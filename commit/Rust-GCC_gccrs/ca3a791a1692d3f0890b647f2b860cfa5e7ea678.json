{"sha": "ca3a791a1692d3f0890b647f2b860cfa5e7ea678", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EzYTc5MWExNjkyZDNmMDg5MGI2NDdmMmI4NjBjZmE1ZTdlYTY3OA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2004-12-02T04:56:42Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2004-12-02T04:56:42Z"}, "message": "tree.h (save_eptr, save_filt): Now file scoped statics.\n\n        * tree.h (save_eptr, save_filt): Now file scoped statics.\n        (honor_protect_cleanup_actions): Only create save_eptr and\n        save_filt if they do not already exist.\n        (lower_eh_constructs): Wipe all knowledge of save_eptr and\n        save_filt before returning.\n\nFrom-SVN: r91613", "tree": {"sha": "7622236fa5e9d7ebbbde7e6b3e1867763b967a1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7622236fa5e9d7ebbbde7e6b3e1867763b967a1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca3a791a1692d3f0890b647f2b860cfa5e7ea678", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3a791a1692d3f0890b647f2b860cfa5e7ea678", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca3a791a1692d3f0890b647f2b860cfa5e7ea678", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3a791a1692d3f0890b647f2b860cfa5e7ea678/comments", "author": null, "committer": null, "parents": [{"sha": "78579b601d74b339eadbc08bb3cf1a4c48a70f69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78579b601d74b339eadbc08bb3cf1a4c48a70f69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78579b601d74b339eadbc08bb3cf1a4c48a70f69"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "6c7d2a062c37f53e8350aaac4654486917a7139e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3a791a1692d3f0890b647f2b860cfa5e7ea678/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3a791a1692d3f0890b647f2b860cfa5e7ea678/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca3a791a1692d3f0890b647f2b860cfa5e7ea678", "patch": "@@ -1,3 +1,11 @@\n+2004-12-01  Jeff Law  <law@redhat.com>\n+\n+        * tree.h (save_eptr, save_filt): Now file scoped statics.\n+        (honor_protect_cleanup_actions): Only create save_eptr and\n+        save_filt if they do not already exist.\n+        (lower_eh_constructs): Wipe all knowledge of save_eptr and\n+        save_filt before returning.\n+\n 2004-12-02  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-phinodes.c (remove_phi_arg_num): Fix a comment."}, {"sha": "08a8a0f19cb5774c6070d20d17fa625b25b4ff01", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3a791a1692d3f0890b647f2b860cfa5e7ea678/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3a791a1692d3f0890b647f2b860cfa5e7ea678/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=ca3a791a1692d3f0890b647f2b860cfa5e7ea678", "patch": "@@ -37,6 +37,21 @@ Boston, MA 02111-1307, USA.  */\n #include \"langhooks.h\"\n #include \"ggc.h\"\n \n+/* In some circumstances we have to save EH data around a nested\n+   exception.  The EXC_PTR_EXPR and FILTER_EXPR values are saved\n+   into these _DECL nodes.\n+\n+   We lazily create this pair of _DECL nodes once per function rather\n+   than creating a new pair of _DECLs each time we need to save the\n+   EXEC_PTR and FILTER.  This can save us literally thousands of _DECL\n+   nodes when we have many inline destructors with an embedded try block.  \n+\n+   This is safe as we know the lifetime of the values in these _DECL nodes.\n+   Their lifetimes also ensure that globbing these uses into a single\n+   pair of _DECL nodes requires no additional PHI_NODEs or SSA_NAMEs when\n+   compared to having a pair of _DECL nodes per inline destructor with\n+   an embedded try block.  */\n+static tree save_eptr, save_filt;\n \f\n /* Nonzero if we are using EH to handle cleanups.  */\n static int using_eh_for_cleanups_p = 0;\n@@ -807,10 +822,13 @@ honor_protect_cleanup_actions (struct leh_state *outer_state,\n      we never fallthru from this copy of the finally block.  */\n   if (finally_may_fallthru)\n     {\n-      tree save_eptr, save_filt;\n-\n-      save_eptr = create_tmp_var (ptr_type_node, \"save_eptr\");\n-      save_filt = create_tmp_var (integer_type_node, \"save_filt\");\n+      /* If we have not created _DECLs for saving the EXC_PTR\n+\t and FILTER_EXPR, create them now.  */\n+      if (!save_eptr)\n+\t{\n+\t  save_eptr = create_tmp_var (ptr_type_node, \"save_eptr\");\n+\t  save_filt = create_tmp_var (integer_type_node, \"save_filt\");\n+\t}\n \n       i = tsi_start (finally);\n       x = build (EXC_PTR_EXPR, ptr_type_node);\n@@ -1644,6 +1662,11 @@ lower_eh_constructs (void)\n   htab_delete (finally_tree);\n \n   collect_eh_region_array ();\n+\n+  /* Wipe the DECLs we use for saving the EXC_PTR and FILTER_EXPR\n+     to ensure we create new ones for the next function.  */\n+  save_eptr = NULL;\n+  save_filt = NULL;\n }\n \n struct tree_opt_pass pass_lower_eh ="}]}