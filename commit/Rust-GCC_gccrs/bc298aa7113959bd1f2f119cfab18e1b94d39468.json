{"sha": "bc298aa7113959bd1f2f119cfab18e1b94d39468", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMyOThhYTcxMTM5NTliZDFmMmYxMTljZmFiMThlMWI5NGQzOTQ2OA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2004-01-13T02:52:37Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-01-13T02:52:37Z"}, "message": "re PR c/13656 (ICE after redeclaring size_t in the system headers)\n\n\tPR 13656\n\t* c-decl.c (diagnose_mismatched_decls): Whenever newtype or\n\toldtype is set, set *newtypep or *oldtypep too.  Do not set\n\tthem at the very end.\n\t(validate_proto_after_old_defn): Restructure for comprehensibility;\n\tmake error messages clearer.\ntestsuite:\n\t* gcc.dg/typedef-redecl.c: New test case.\n\t* gcc.dg/typedef-redecl.h: New support file.\n\nFrom-SVN: r75787", "tree": {"sha": "6afc5d8ff769e05c6c4b584eb8acf804d26ac923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6afc5d8ff769e05c6c4b584eb8acf804d26ac923"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc298aa7113959bd1f2f119cfab18e1b94d39468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc298aa7113959bd1f2f119cfab18e1b94d39468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc298aa7113959bd1f2f119cfab18e1b94d39468", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc298aa7113959bd1f2f119cfab18e1b94d39468/comments", "author": null, "committer": null, "parents": [{"sha": "12a08b407e52c5f0576d3089332dadba6ba550f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a08b407e52c5f0576d3089332dadba6ba550f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12a08b407e52c5f0576d3089332dadba6ba550f4"}], "stats": {"total": 109, "additions": 76, "deletions": 33}, "files": [{"sha": "5f4a76d458f479c894c9d8d7d41c7e91b052bcb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc298aa7113959bd1f2f119cfab18e1b94d39468/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc298aa7113959bd1f2f119cfab18e1b94d39468/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc298aa7113959bd1f2f119cfab18e1b94d39468", "patch": "@@ -1,3 +1,12 @@\n+2004-01-12  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR 13656\n+\t* c-decl.c (diagnose_mismatched_decls): Whenever newtype or\n+\toldtype is set, set *newtypep or *oldtypep too.  Do not set\n+\tthem at the very end.\n+\t(validate_proto_after_old_defn): Restructure for comprehensibility;\n+\tmake error messages clearer.\n+\n 2004-01-12  Zack Weinberg  <zack@codesourcery.com>\n \n \t* varray.h (VARRAY_POP): Add checking variant, aborts on underflow."}, {"sha": "77f6cfbb69f83ca71450f943d7d7259909d68037", "filename": "gcc/c-decl.c", "status": "modified", "additions": 48, "deletions": 33, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc298aa7113959bd1f2f119cfab18e1b94d39468/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc298aa7113959bd1f2f119cfab18e1b94d39468/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=bc298aa7113959bd1f2f119cfab18e1b94d39468", "patch": "@@ -839,42 +839,59 @@ diagnose_arglist_conflict (tree newdecl, tree olddecl,\n static bool\n validate_proto_after_old_defn (tree newdecl, tree newtype, tree oldtype)\n {\n-  tree type, parm;\n-  int nargs;\n-  /* Prototype decl follows defn w/o prototype.  */\n-\n-  for (parm = TYPE_ACTUAL_ARG_TYPES (oldtype),\n-\t type = TYPE_ARG_TYPES (newtype),\n-\t nargs = 1;\n-       ;\n-       parm = TREE_CHAIN (parm), type = TREE_CHAIN (type), nargs++)\n-    {\n-      if (TYPE_MAIN_VARIANT (TREE_VALUE (parm)) == void_type_node\n-\t  && TYPE_MAIN_VARIANT (TREE_VALUE (type)) == void_type_node)\n+  tree newargs, oldargs;\n+  int i;\n+\n+  /* ??? Elsewhere TYPE_MAIN_VARIANT is not used in this context.  */\n+#define END_OF_ARGLIST(t) (TYPE_MAIN_VARIANT (t) == void_type_node)\n+\n+  oldargs = TYPE_ACTUAL_ARG_TYPES (oldtype);\n+  newargs = TYPE_ARG_TYPES (newtype);\n+  i = 1;\n+\n+  for (;;)\n+    {\n+      tree oldargtype = TREE_VALUE (oldargs);\n+      tree newargtype = TREE_VALUE (newargs);\n+\n+      if (END_OF_ARGLIST (oldargtype) && END_OF_ARGLIST (newargtype))\n+\tbreak;\n+\n+      /* Reaching the end of just one list means the two decls don't\n+\t agree on the number of arguments.  */\n+      if (END_OF_ARGLIST (oldargtype))\n \t{\n-\t  /* End of list.  */\n-\t  warning (\"%Jprototype for '%D' follows non-prototype definition\",\n-\t\t   newdecl, newdecl);\n-\t  return true;\n+\t  error (\"%Jprototype for '%D' declares more arguments \"\n+\t\t \"than previous old-style definition\", newdecl, newdecl);\n+\t  return false;\n \t}\n-\n-      if (TYPE_MAIN_VARIANT (TREE_VALUE (parm)) == void_type_node\n-\t  || TYPE_MAIN_VARIANT (TREE_VALUE (type)) == void_type_node)\n+      else if (END_OF_ARGLIST (newargtype))\n \t{\n-\t  error (\"%Jprototype for '%D' with different number of arguments \"\n-\t\t \"follows non-prototype definition\", newdecl, newdecl);\n+\t  error (\"%Jprototype for '%D' declares fewer arguments \"\n+\t\t \"than previous old-style definition\", newdecl, newdecl);\n \t  return false;\n \t}\n-      /* Type for passing arg must be consistent\n-\t with that declared for the arg.  */\n-      if (! comptypes (TREE_VALUE (parm), TREE_VALUE (type),\n-\t\t       COMPARE_STRICT))\n+\n+      /* Type for passing arg must be consistent with that declared\n+\t for the arg.  */\n+      else if (! comptypes (oldargtype, newargtype, COMPARE_STRICT))\n \t{\n-\t  error (\"%Jprototype for '%D' with incompatible argument %d \"\n-\t\t \"follows non-prototype definition\", newdecl, newdecl, nargs);\n+\t  error (\"%Jprototype for '%D' declares arg %d with incompatible type\",\n+\t\t newdecl, newdecl, i);\n \t  return false;\n \t}\n+\n+      oldargs = TREE_CHAIN (oldargs);\n+      newargs = TREE_CHAIN (newargs);\n+      i++;\n     }\n+\n+  /* If we get here, no errors were found, but do issue a warning\n+     for this poor-style construct.  */\n+  warning (\"%Jprototype for '%D' follows non-prototype definition\",\n+\t   newdecl, newdecl);\n+  return true;\n+#undef END_OF_ARGLIST\n }\n \n /* Subroutine of diagnose_mismatched_decls.  Report the location of DECL,\n@@ -913,8 +930,8 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n      the previous decl - we're in an error cascade already.  */\n   if (olddecl == error_mark_node || newdecl == error_mark_node)\n     return false;\n-  oldtype = TREE_TYPE (olddecl);\n-  newtype = TREE_TYPE (newdecl);\n+  *oldtypep = oldtype = TREE_TYPE (olddecl);\n+  *newtypep = newtype = TREE_TYPE (newdecl);\n   if (oldtype == error_mark_node || newtype == error_mark_node)\n     return false;\n \n@@ -946,7 +963,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t  tree trytype = match_builtin_function_types (newtype, oldtype);\n \n \t  if (trytype && comptypes (newtype, trytype, COMPARE_STRICT))\n-\t    oldtype = trytype;\n+\t    *oldtypep = oldtype = trytype;\n \t  else\n \t    {\n \t      /* If types don't match for a built-in, throw away the\n@@ -978,7 +995,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t{\n \t  pedwarn (\"%Jconflicting types for '%D'\", newdecl, newdecl);\n \t  /* Make sure we keep void as the return type.  */\n-\t  TREE_TYPE (newdecl) = newtype = oldtype;\n+\t  TREE_TYPE (newdecl) = *newtypep = newtype = oldtype;\n \t  C_FUNCTION_IMPLICIT_INT (newdecl) = 0;\n \t  pedwarned = true;\n \t}\n@@ -1230,8 +1247,6 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n   if (warned || pedwarned)\n     locate_old_decl (olddecl, pedwarned ? pedwarn : warning);\n \n-  *newtypep = newtype;\n-  *oldtypep = oldtype;\n   return true;\n }\n "}, {"sha": "14e0a2b320ac24f5288c17e899acc2f9956b580e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc298aa7113959bd1f2f119cfab18e1b94d39468/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc298aa7113959bd1f2f119cfab18e1b94d39468/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bc298aa7113959bd1f2f119cfab18e1b94d39468", "patch": "@@ -1,3 +1,9 @@\n+2004-01-12  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR 13656\n+\t* gcc.dg/typedef-redecl.c: New test case.\n+\t* gcc.dg/typedef-redecl.h: New support file.\n+\n 2004-01-13  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/always_inline.c: New test."}, {"sha": "8ac5282fb70e2513638b4a7b0ccd5cd2ffdc9a03", "filename": "gcc/testsuite/gcc.dg/typedef-redecl.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc298aa7113959bd1f2f119cfab18e1b94d39468/gcc%2Ftestsuite%2Fgcc.dg%2Ftypedef-redecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc298aa7113959bd1f2f119cfab18e1b94d39468/gcc%2Ftestsuite%2Fgcc.dg%2Ftypedef-redecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftypedef-redecl.c?ref=bc298aa7113959bd1f2f119cfab18e1b94d39468", "patch": "@@ -0,0 +1,6 @@\n+/* Redeclaration of typedef (invalid but accepted in system headers)\n+   causes ICE; PR 13656.  Test case by Richard Sandiford <rsandifo@redhat.com>,\n+   reduced from glibc.  */\n+\n+#include \"typedef-redecl.h\"\n+x a;"}, {"sha": "9fa7da05db08cbb641352cea31451ddeb120daa5", "filename": "gcc/testsuite/gcc.dg/typedef-redecl.h", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc298aa7113959bd1f2f119cfab18e1b94d39468/gcc%2Ftestsuite%2Fgcc.dg%2Ftypedef-redecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc298aa7113959bd1f2f119cfab18e1b94d39468/gcc%2Ftestsuite%2Fgcc.dg%2Ftypedef-redecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftypedef-redecl.h?ref=bc298aa7113959bd1f2f119cfab18e1b94d39468", "patch": "@@ -0,0 +1,7 @@\n+/* Redeclaration of typedef (invalid but accepted in system headers)\n+   causes ICE; PR 13656.  Test case by Richard Sandiford <rsandifo@redhat.com>,\n+   reduced from glibc.  */\n+\n+#pragma GCC system_header\n+typedef int x;\n+typedef int x;"}]}