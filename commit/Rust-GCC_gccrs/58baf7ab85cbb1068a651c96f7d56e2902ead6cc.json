{"sha": "58baf7ab85cbb1068a651c96f7d56e2902ead6cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThiYWY3YWI4NWNiYjEwNjhhNjUxYzk2ZjdkNTZlMjkwMmVhZDZjYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-10-17T14:08:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-10-17T14:08:16Z"}, "message": "tree-vect-loop.c (check_reduction_path): Compute reduction operation here.\n\n2019-10-17  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-loop.c (check_reduction_path): Compute reduction\n\toperation here.\n\t(vect_is_simple_reduction): Remove special-case of single-stmt\n\treduction path detection.\n\nFrom-SVN: r277112", "tree": {"sha": "fe8e947abfcfb94d1686b92ff8008db81d140f81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe8e947abfcfb94d1686b92ff8008db81d140f81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58baf7ab85cbb1068a651c96f7d56e2902ead6cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58baf7ab85cbb1068a651c96f7d56e2902ead6cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58baf7ab85cbb1068a651c96f7d56e2902ead6cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58baf7ab85cbb1068a651c96f7d56e2902ead6cc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cdb77369ca02673e878b1a1b7856de0f979d2fec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdb77369ca02673e878b1a1b7856de0f979d2fec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdb77369ca02673e878b1a1b7856de0f979d2fec"}], "stats": {"total": 146, "additions": 45, "deletions": 101}, "files": [{"sha": "143f4d641386917866b70362c1f7ce8db8a947eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58baf7ab85cbb1068a651c96f7d56e2902ead6cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58baf7ab85cbb1068a651c96f7d56e2902ead6cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58baf7ab85cbb1068a651c96f7d56e2902ead6cc", "patch": "@@ -1,3 +1,10 @@\n+2019-10-17  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (check_reduction_path): Compute reduction\n+\toperation here.\n+\t(vect_is_simple_reduction): Remove special-case of single-stmt\n+\treduction path detection.\n+\n 2019-10-17  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm-cpus.in (marvel-pj4): Add +fp to the architecture."}, {"sha": "d7df0a498d357f97b3ee81dac9f3e5281dbe1451", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 38, "deletions": 101, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58baf7ab85cbb1068a651c96f7d56e2902ead6cc/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58baf7ab85cbb1068a651c96f7d56e2902ead6cc/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=58baf7ab85cbb1068a651c96f7d56e2902ead6cc", "patch": "@@ -2586,11 +2586,12 @@ needs_fold_left_reduction_p (tree type, tree_code code)\n }\n \n /* Return true if the reduction PHI in LOOP with latch arg LOOP_ARG and\n-   reduction operation CODE has a handled computation expression.  */\n+   has a handled computation expression.  Store the main reduction\n+   operation in *CODE.  */\n \n static bool\n check_reduction_path (dump_user_location_t loc, loop_p loop, gphi *phi,\n-\t\t      tree loop_arg, enum tree_code code,\n+\t\t      tree loop_arg, enum tree_code *code,\n \t\t      vec<std::pair<ssa_op_iter, use_operand_p> > &path)\n {\n   auto_bitmap visited;\n@@ -2660,6 +2661,7 @@ check_reduction_path (dump_user_location_t loc, loop_p loop, gphi *phi,\n   /* Check whether the reduction path detected is valid.  */\n   bool fail = path.length () == 0;\n   bool neg = false;\n+  *code = ERROR_MARK;\n   for (unsigned i = 1; i < path.length (); ++i)\n     {\n       gimple *use_stmt = USE_STMT (path[i].second);\n@@ -2676,31 +2678,33 @@ check_reduction_path (dump_user_location_t loc, loop_p loop, gphi *phi,\n \t  fail = true;\n \t  break;\n \t}\n-      if (gimple_assign_rhs_code (use_stmt) != code)\n+      enum tree_code use_code = gimple_assign_rhs_code (use_stmt);\n+      if (use_code == MINUS_EXPR)\n \t{\n-\t  if (code == PLUS_EXPR\n-\t      && gimple_assign_rhs_code (use_stmt) == MINUS_EXPR)\n-\t    {\n-\t      /* Track whether we negate the reduction value each iteration.  */\n-\t      if (gimple_assign_rhs2 (use_stmt) == op)\n-\t\tneg = ! neg;\n-\t    }\n-\t  else\n-\t    {\n-\t      fail = true;\n-\t      break;\n-\t    }\n+\t  use_code = PLUS_EXPR;\n+\t  /* Track whether we negate the reduction value each iteration.  */\n+\t  if (gimple_assign_rhs2 (use_stmt) == op)\n+\t    neg = ! neg;\n+\t}\n+      if (*code == ERROR_MARK)\n+\t*code = use_code;\n+      else if (use_code != *code)\n+\t{\n+\t  fail = true;\n+\t  break;\n \t}\n     }\n-  return ! fail && ! neg;\n+  return ! fail && ! neg && *code != ERROR_MARK;\n }\n \n bool\n check_reduction_path (dump_user_location_t loc, loop_p loop, gphi *phi,\n \t\t      tree loop_arg, enum tree_code code)\n {\n   auto_vec<std::pair<ssa_op_iter, use_operand_p> > path;\n-  return check_reduction_path (loc, loop, phi, loop_arg, code, path);\n+  enum tree_code code_;\n+  return (check_reduction_path (loc, loop, phi, loop_arg, &code_, path)\n+\t  && code_ == code);\n }\n \n \n@@ -2883,86 +2887,18 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n       return NULL;\n     }\n \n-  gassign *def_stmt = dyn_cast <gassign *> (def_stmt_info->stmt);\n-  if (!def_stmt)\n-    {\n-      if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t \"reduction: unhandled reduction operation: %G\",\n-\t\t\t def_stmt_info->stmt);\n-      return NULL;\n-    }\n-  enum tree_code code = gimple_assign_rhs_code (def_stmt);\n-\n-  /* We can handle \"res -= x[i]\", which is non-associative by\n-     simply rewriting this into \"res += -x[i]\".  Avoid changing\n-     gimple instruction for the first simple tests and only do this\n-     if we're allowed to change code at all.  */\n-  if (code == MINUS_EXPR && gimple_assign_rhs2 (def_stmt) != phi_name)\n-    code = PLUS_EXPR;\n-\n-  tree op1, op2;\n-  if (code == COND_EXPR)\n-    {\n-      if (! nested_in_vect_loop)\n-\tSTMT_VINFO_REDUC_TYPE (phi_info) = COND_REDUCTION;\n-      op1 = gimple_assign_rhs2 (def_stmt);\n-      op2 = gimple_assign_rhs3 (def_stmt);\n-    }\n-  else if (get_gimple_rhs_class (code) == GIMPLE_BINARY_RHS)\n-    {\n-      op1 = gimple_assign_rhs1 (def_stmt);\n-      op2 = gimple_assign_rhs2 (def_stmt);\n-    }\n-  else\n-    {\n-      if (dump_enabled_p ())\n-\treport_vect_op (MSG_MISSED_OPTIMIZATION, def_stmt,\n-\t\t\t\"reduction: not handled operation: \");\n-      return NULL;\n-    }\n-\n-  if (TREE_CODE (op1) != SSA_NAME && TREE_CODE (op2) != SSA_NAME)\n-    {\n-      if (dump_enabled_p ())\n-\treport_vect_op (MSG_MISSED_OPTIMIZATION, def_stmt,\n-\t\t\t\"reduction: both uses not ssa_names: \");\n-\n-      return NULL;\n-    }\n-\n-  /* Reduction is safe. We're dealing with one of the following:\n-     1) integer arithmetic and no trapv\n-     2) floating point arithmetic, and special flags permit this optimization\n-     3) nested cycle (i.e., outer loop vectorization).  */\n-\n-  /* Check for the simple case that one def is the reduction def,\n-     defined by the PHI node.  */\n-  stmt_vec_info def1_info = loop_info->lookup_def (op1);\n-  stmt_vec_info def2_info = loop_info->lookup_def (op2);\n-  if (def2_info && def2_info->stmt == phi)\n-    {\n-      STMT_VINFO_REDUC_IDX (def_stmt_info) = 1 + (code == COND_EXPR ? 1 : 0);\n-      if (dump_enabled_p ())\n-\treport_vect_op (MSG_NOTE, def_stmt, \"detected reduction: \");\n-      return def_stmt_info;\n-    }\n-  else if (def1_info && def1_info->stmt == phi)\n-    {\n-      STMT_VINFO_REDUC_IDX (def_stmt_info) = 0 + (code == COND_EXPR ? 1 : 0);\n-      if (dump_enabled_p ())\n-\treport_vect_op (MSG_NOTE, def_stmt, \"detected reduction: \");\n-      return def_stmt_info;\n-    }\n-\n-  /* Look for the expression computing latch_def from then loop PHI result\n-     in a way involving more than one stmt.  */\n+  /* Look for the expression computing latch_def from then loop PHI result.  */\n   auto_vec<std::pair<ssa_op_iter, use_operand_p> > path;\n-  if (check_reduction_path (vect_location, loop, phi, latch_def, code,\n+  enum tree_code code;\n+  if (check_reduction_path (vect_location, loop, phi, latch_def, &code,\n \t\t\t    path))\n     {\n-      /* Try building an SLP reduction chain for which the additional\n-         restriction is that all operations in the chain are the same.  */\n+      if (code == COND_EXPR && !nested_in_vect_loop)\n+\tSTMT_VINFO_REDUC_TYPE (phi_info) = COND_REDUCTION;\n+\n+      /* Fill in STMT_VINFO_REDUC_IDX and gather stmts for an SLP\n+\t reduction chain for which the additional restriction is that\n+\t all operations in the chain are the same.  */\n       auto_vec<stmt_vec_info, 8> reduc_chain;\n       unsigned i;\n       bool is_slp_reduc = !nested_in_vect_loop && code != COND_EXPR;\n@@ -2976,7 +2912,7 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n \t    = path[i].second->use - gimple_assign_rhs1_ptr (stmt);\n \t  reduc_chain.safe_push (stmt_info);\n \t}\n-      if (is_slp_reduc)\n+      if (is_slp_reduc && reduc_chain.length () > 1)\n \t{\n \t  for (unsigned i = 0; i < reduc_chain.length () - 1; ++i)\n \t    {\n@@ -2991,18 +2927,19 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n \t  REDUC_GROUP_SIZE (reduc_chain[0]) = reduc_chain.length ();\n \n \t  if (dump_enabled_p ())\n-\t    report_vect_op (MSG_NOTE, def_stmt,\n-\t\t\t    \"reduction: detected reduction chain: \");\n+\t    dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t    \"reduction: detected reduction chain\\n\");\n \t}\n+      else if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t \"reduction: detected reduction\\n\");\n \n       return def_stmt_info;\n     }\n \n   if (dump_enabled_p ())\n-    {\n-      report_vect_op (MSG_MISSED_OPTIMIZATION, def_stmt,\n-\t\t      \"reduction: unknown pattern: \");\n-    }\n+    dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t     \"reduction: unknown pattern\\n\");\n \n   return NULL;\n }"}]}