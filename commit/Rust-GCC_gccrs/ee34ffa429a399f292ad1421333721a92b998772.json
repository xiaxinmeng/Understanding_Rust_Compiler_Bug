{"sha": "ee34ffa429a399f292ad1421333721a92b998772", "node_id": "C_kwDOANBUbNoAKGVlMzRmZmE0MjlhMzk5ZjI5MmFkMTQyMTMzMzcyMWE5MmI5OTg3NzI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-03-10T12:43:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-03-10T12:43:19Z"}, "message": "tree-optimization/102943 - use tree form for sbr_sparse_bitmap\n\nThe following arranges to remove an indirection do the bitvector\nin sbr_sparse_bitmap by embedding bitmap_head instead of bitmap\nand using the tree form (since we only ever set/query individual\naligned bit chunks).  That shaves off 6 seconds from 70 seconds\nof the slowest 521.wrf_r LRANS unit build.\n\n2022-03-10  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/102943\n\t* gimple-range-cache.cc (sbr_sparse_bitmap::bitvec):\n\tMake a bitmap_head.\n\t(sbr_sparse_bitmap::sbr_sparse_bitmap): Adjust and switch\n\tto tree view.\n\t(sbr_sparse_bitmap::set_bb_range): Adjust.\n\t(sbr_sparse_bitmap::get_bb_range): Likewise.", "tree": {"sha": "afab9632adaa21e2b92cce18aa15b5e621363e37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afab9632adaa21e2b92cce18aa15b5e621363e37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee34ffa429a399f292ad1421333721a92b998772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee34ffa429a399f292ad1421333721a92b998772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee34ffa429a399f292ad1421333721a92b998772", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee34ffa429a399f292ad1421333721a92b998772/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9467e7331188705ec16c086b77e1809c5b0aab7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9467e7331188705ec16c086b77e1809c5b0aab7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9467e7331188705ec16c086b77e1809c5b0aab7d"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "583ba29eb63c794e924c211c417dbb781cc7d091", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee34ffa429a399f292ad1421333721a92b998772/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee34ffa429a399f292ad1421333721a92b998772/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=ee34ffa429a399f292ad1421333721a92b998772", "patch": "@@ -313,7 +313,7 @@ class sbr_sparse_bitmap : public ssa_block_ranges\n   int bitmap_get_quad (const_bitmap head, int quad);\n   irange_allocator *m_irange_allocator;\n   irange *m_range[SBR_NUM];\n-  bitmap bitvec;\n+  bitmap_head bitvec;\n   tree m_type;\n };\n \n@@ -324,7 +324,8 @@ sbr_sparse_bitmap::sbr_sparse_bitmap (tree t, irange_allocator *allocator,\n {\n   gcc_checking_assert (TYPE_P (t));\n   m_type = t;\n-  bitvec = BITMAP_ALLOC (bm);\n+  bitmap_initialize (&bitvec, bm);\n+  bitmap_tree_view (&bitvec);\n   m_irange_allocator = allocator;\n   // Pre-cache varying.\n   m_range[0] = m_irange_allocator->allocate (2);\n@@ -370,7 +371,7 @@ sbr_sparse_bitmap::set_bb_range (const_basic_block bb, const irange &r)\n {\n   if (r.undefined_p ())\n     {\n-      bitmap_set_quad (bitvec, bb->index, SBR_UNDEF);\n+      bitmap_set_quad (&bitvec, bb->index, SBR_UNDEF);\n       return true;\n     }\n \n@@ -380,11 +381,11 @@ sbr_sparse_bitmap::set_bb_range (const_basic_block bb, const irange &r)\n       {\n \tif (!m_range[x])\n \t  m_range[x] = m_irange_allocator->allocate (r);\n-\tbitmap_set_quad (bitvec, bb->index, x + 1);\n+\tbitmap_set_quad (&bitvec, bb->index, x + 1);\n \treturn true;\n       }\n   // All values are taken, default to VARYING.\n-  bitmap_set_quad (bitvec, bb->index, SBR_VARYING);\n+  bitmap_set_quad (&bitvec, bb->index, SBR_VARYING);\n   return false;\n }\n \n@@ -394,7 +395,7 @@ sbr_sparse_bitmap::set_bb_range (const_basic_block bb, const irange &r)\n bool\n sbr_sparse_bitmap::get_bb_range (irange &r, const_basic_block bb)\n {\n-  int value = bitmap_get_quad (bitvec, bb->index);\n+  int value = bitmap_get_quad (&bitvec, bb->index);\n \n   if (!value)\n     return false;\n@@ -412,7 +413,7 @@ sbr_sparse_bitmap::get_bb_range (irange &r, const_basic_block bb)\n bool\n sbr_sparse_bitmap::bb_range_p (const_basic_block bb)\n {\n-  return (bitmap_get_quad (bitvec, bb->index) != 0);\n+  return (bitmap_get_quad (&bitvec, bb->index) != 0);\n }\n \n // -------------------------------------------------------------------------"}]}