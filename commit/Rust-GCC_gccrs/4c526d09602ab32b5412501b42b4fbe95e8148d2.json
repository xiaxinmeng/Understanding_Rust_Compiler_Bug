{"sha": "4c526d09602ab32b5412501b42b4fbe95e8148d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM1MjZkMDk2MDJhYjMyYjU0MTI1MDFiNDJiNGZiZTk1ZTgxNDhkMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-06-18T18:34:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-06-18T18:34:09Z"}, "message": "sstream.tcc (seekoff): We can't seek beyond _M_out_lim...\n\n2003-06-18  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/sstream.tcc (seekoff): We can't seek beyond\n\t_M_out_lim, therefore _M_move_out_cur boils down to simply\n\tupdating _M_out_cur.\n\t(seekpos): Likewise, clean up.\n\nFrom-SVN: r68162", "tree": {"sha": "51ef4b431883f1829dd12c0f33cfc5944a2ed9f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51ef4b431883f1829dd12c0f33cfc5944a2ed9f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c526d09602ab32b5412501b42b4fbe95e8148d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c526d09602ab32b5412501b42b4fbe95e8148d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c526d09602ab32b5412501b42b4fbe95e8148d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c526d09602ab32b5412501b42b4fbe95e8148d2/comments", "author": null, "committer": null, "parents": [{"sha": "c1b74c211a117a9f6e05f6d2e47dd633cc5f40e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b74c211a117a9f6e05f6d2e47dd633cc5f40e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1b74c211a117a9f6e05f6d2e47dd633cc5f40e2"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "fad6a0868edf91db2dffe99df121ea7eafb27d32", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c526d09602ab32b5412501b42b4fbe95e8148d2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c526d09602ab32b5412501b42b4fbe95e8148d2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4c526d09602ab32b5412501b42b4fbe95e8148d2", "patch": "@@ -1,3 +1,10 @@\n+2003-06-18  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/sstream.tcc (seekoff): We can't seek beyond\n+\t_M_out_lim, therefore _M_move_out_cur boils down to simply\n+\tupdating _M_out_cur.\n+\t(seekpos): Likewise, clean up.\n+\n 2003-06-18  Nathan C. Myers  <ncm-nospam@cantrip.org>\n             Paolo Carlini  <pcarlini@unitus.it>\n "}, {"sha": "764e2801d197044052064628c20d64286b3f71fb", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c526d09602ab32b5412501b42b4fbe95e8148d2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c526d09602ab32b5412501b42b4fbe95e8148d2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=4c526d09602ab32b5412501b42b4fbe95e8148d2", "patch": "@@ -157,7 +157,7 @@ namespace std\n \t      && __newoffo + __off >= 0 \n \t      && this->_M_out_lim - __beg >= __newoffo + __off)\n \t    {\n-\t      _M_move_out_cur(__newoffo + __off - (this->_M_out_cur - __beg));\n+\t      this->_M_out_cur = __beg + __newoffo + __off;\n \t      __ret = pos_type(__newoffo);\n \t    }\n \t}\n@@ -174,34 +174,25 @@ namespace std\n       if (_M_string.capacity())\n \t{\n \t  off_type __pos = __sp; // Use streamoff operator to do conversion.\n-\t  char_type* __beg = NULL;\n-\t  char_type* __end = NULL;\n \t  const bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;\n \t  const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;\n+\t  char_type* __beg = __testin ? this->_M_in_beg : this->_M_out_beg;\n \t  \n \t  // NB: Ordered.\n \t  bool __testposi = false;\n \t  bool __testposo = false;\n-\t  if (__testin)\n-\t    {\n-\t      __beg = this->_M_in_beg;\n-\t      __end = this->_M_in_end;\n-\t      if (0 <= __pos && __pos <= __end - __beg)\n-\t\t__testposi = true;\n-\t    }\n-\t  if (__testout)\n-\t    {\n-\t      __beg = this->_M_out_beg;\n-\t      __end = this->_M_out_lim;\n-\t      if (0 <= __pos && __pos <= __end - __beg)\n-\t\t__testposo = true;\n-\t    }\n+\t  if (__testin && 0 <= __pos\n+\t      && __pos <=  this->_M_in_end - __beg)\n+\t    __testposi = true;\n+\t  if (__testout && 0 <= __pos\n+\t      && __pos <=  this->_M_out_lim - __beg)\n+\t    __testposo = true;\n \t  if (__testposi || __testposo)\n \t    {\n \t      if (__testposi)\n-\t\tthis->_M_in_cur = this->_M_in_beg + __pos;\n+\t\tthis->_M_in_cur = __beg + __pos;\n \t      if (__testposo)\n-\t\t_M_move_out_cur((__pos) - (this->_M_out_cur - __beg));\n+\t        this->_M_out_cur = __beg + __pos;\n \t      __ret = pos_type(off_type(__pos));\n \t    }\n \t}"}]}