{"sha": "8d21ff6025652fa67085d94d5101cd699c57cf0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQyMWZmNjAyNTY1MmZhNjcwODVkOTRkNTEwMWNkNjk5YzU3Y2YwYg==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2019-07-05T07:03:58Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-05T07:03:58Z"}, "message": "[Ada] Incorrect accessibility check\n\nThis patch fixes an issue whereby anonymous access result types were\ntreated as having the same accessibility level as typed results instead\nof having the level determined by the \"master of the call\" as per RM\n3.10.2 (10).\n\n------------\n-- Source --\n------------\n\n--  main.adb\n\nwith Pack_12; use Pack_12;\nwith Pack_05; use Pack_05;\n\nprocedure Main is\n   Obj : aliased Integer;\nbegin\n   Test_Alloc\n     (new Rec_T'(Disc => Id_A (Obj'Access))); --  OK\n\n   Id_A (Obj'Access).all := 0;                --  OK\n   Id_B (Obj'Access).all := 0;                --  OK\n   Id_C (Obj'Access).all := 0;                --  ERROR\nend Main;\n\n--  pack_12.ads\n\npragma Ada_2012;\n\nwith Ada.Unchecked_Conversion;\n\npackage Pack_12 is\n   function Id_A (I : access Integer)\n     return access Integer\n     is (I);\n\n   type Obj_Ptr is access all Integer;\n\n   function Id_C (I : access Integer)\n     return Obj_Ptr\n     is (I.all'Access);\n\n   type Rec_T (Disc : access Integer) is null record;\n\n   procedure Test_Alloc (Access_Param : access Rec_T);\nend Pack_12;\n\n--  pack_12.adb\n\npackage body Pack_12 is\n   Dummy : Integer;\n\n   procedure Test_Alloc (Access_Param : access Rec_T) is\n   begin\n      Dummy := Access_Param.Disc.all;\n   end Test_Alloc;\nend Pack_12;\n\n--  pack_05.ads\n\npragma Ada_2005;\n\nwith Pack_12; use Pack_12;\n\npackage Pack_05 is\n   function Id_B (I : access Integer)\n     return access Integer\n     renames Id_A;\nend Pack_05;\n\n-----------------\n-- Compilation --\n-----------------\n\n$ gnatmake -q main.adb\n$ main\nraised PROGRAM_ERROR : pack_12.ads:14 accessibility check failed\n\n2019-07-05  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* checks.adb (Apply_Accessibility_Check): Add logic to fetch the\n\tfunction result accessibility level if one is required within\n\tthe generated check.\n\t* exp_ch6.adb (Needs_Result_Accessibility_Level): Modify\n\tcontrolling elsif block to handle more cases such as anonymous\n\taccess results and disable checking for coextensions.\n\nFrom-SVN: r273130", "tree": {"sha": "99167fd3656b1362399c64255b257e3366600c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99167fd3656b1362399c64255b257e3366600c52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d21ff6025652fa67085d94d5101cd699c57cf0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d21ff6025652fa67085d94d5101cd699c57cf0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d21ff6025652fa67085d94d5101cd699c57cf0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d21ff6025652fa67085d94d5101cd699c57cf0b/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76e716d76171e50353e7eb80632ea75165eabdc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e716d76171e50353e7eb80632ea75165eabdc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76e716d76171e50353e7eb80632ea75165eabdc0"}], "stats": {"total": 82, "additions": 59, "deletions": 23}, "files": [{"sha": "8a729d1e1a5fbaf56d4de5b75432cc4e215cb243", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d21ff6025652fa67085d94d5101cd699c57cf0b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d21ff6025652fa67085d94d5101cd699c57cf0b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8d21ff6025652fa67085d94d5101cd699c57cf0b", "patch": "@@ -1,3 +1,12 @@\n+2019-07-05  Justin Squirek  <squirek@adacore.com>\n+\n+\t* checks.adb (Apply_Accessibility_Check): Add logic to fetch the\n+\tfunction result accessibility level if one is required within\n+\tthe generated check.\n+\t* exp_ch6.adb (Needs_Result_Accessibility_Level): Modify\n+\tcontrolling elsif block to handle more cases such as anonymous\n+\taccess results and disable checking for coextensions.\n+\n 2019-07-05  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch9.adb (Analyze_Accept_Statement): If this is an illegal"}, {"sha": "601b932a1f391d422a2f61b30b5f8a0cf437ab2c", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d21ff6025652fa67085d94d5101cd699c57cf0b/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d21ff6025652fa67085d94d5101cd699c57cf0b/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=8d21ff6025652fa67085d94d5101cd699c57cf0b", "patch": "@@ -617,8 +617,23 @@ package body Checks is\n          Param_Level :=\n            New_Occurrence_Of (Extra_Accessibility (Param_Ent), Loc);\n \n-         Type_Level :=\n-           Make_Integer_Literal (Loc, Deepest_Type_Access_Level (Typ));\n+         --  Use the dynamic accessibility parameter for the function's result\n+         --  when one has been created instead of statically referring to the\n+         --  deepest type level so as to appropriatly handle the rules for\n+         --  RM 3.10.2 (10.1/3).\n+\n+         if Ekind_In (Scope (Param_Ent), E_Function,\n+                                         E_Operator,\n+                                         E_Subprogram_Type)\n+           and then Present (Extra_Accessibility_Of_Result (Scope (Param_Ent)))\n+         then\n+            Type_Level :=\n+              New_Occurrence_Of\n+                (Extra_Accessibility_Of_Result (Scope (Param_Ent)), Loc);\n+         else\n+            Type_Level :=\n+              Make_Integer_Literal (Loc, Deepest_Type_Access_Level (Typ));\n+         end if;\n \n          --  Raise Program_Error if the accessibility level of the access\n          --  parameter is deeper than the level of the target access type."}, {"sha": "ae17a5bd68f26aa0e54e46b0dfc6df1c0a0bf6d4", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d21ff6025652fa67085d94d5101cd699c57cf0b/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d21ff6025652fa67085d94d5101cd699c57cf0b/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=8d21ff6025652fa67085d94d5101cd699c57cf0b", "patch": "@@ -9236,8 +9236,9 @@ package body Exp_Ch6 is\n          return False;\n       end Has_Unconstrained_Access_Discriminant_Component;\n \n-      Feature_Disabled : constant Boolean := True;\n-      --  Temporary\n+      Disable_Coextension_Cases : constant Boolean := True;\n+      --  Flag used to temporarily disable a \"True\" result for types with\n+      --  access discriminants and related coextension cases.\n \n    --  Start of processing for Needs_Result_Accessibility_Level\n \n@@ -9247,9 +9248,6 @@ package body Exp_Ch6 is\n       if not Present (Func_Typ) then\n          return False;\n \n-      elsif Feature_Disabled then\n-         return False;\n-\n       --  False if not a function, also handle enum-lit renames case\n \n       elsif Func_Typ = Standard_Void_Type\n@@ -9274,23 +9272,37 @@ package body Exp_Ch6 is\n       elsif Ada_Version < Ada_2012 then\n          return False;\n \n-      elsif Ekind (Func_Typ) = E_Anonymous_Access_Type\n-        or else Is_Tagged_Type (Func_Typ)\n-      then\n-         --  In the case of, say, a null tagged record result type, the need\n-         --  for this extra parameter might not be obvious. This function\n-         --  returns True for all tagged types for compatibility reasons.\n-         --  A function with, say, a tagged null controlling result type might\n-         --  be overridden by a primitive of an extension having an access\n-         --  discriminant and the overrider and overridden must have compatible\n-         --  calling conventions (including implicitly declared parameters).\n-         --  Similarly, values of one access-to-subprogram type might designate\n-         --  both a primitive subprogram of a given type and a function\n-         --  which is, for example, not a primitive subprogram of any type.\n-         --  Again, this requires calling convention compatibility.\n-         --  It might be possible to solve these issues by introducing\n-         --  wrappers, but that is not the approach that was chosen.\n+      --  Handle the situation where a result is an anonymous access type\n+      --  RM 3.10.2 (10.3/3).\n+\n+      elsif Ekind (Func_Typ) = E_Anonymous_Access_Type then\n+         return True;\n+\n+      --  The following cases are related to coextensions and do not fully\n+      --  cover everything mentioned in RM 3.10.2 (12) ???\n+\n+      --  Temporarily disabled ???\n+\n+      elsif Disable_Coextension_Cases then\n+         return False;\n+\n+      --  In the case of, say, a null tagged record result type, the need for\n+      --  this extra parameter might not be obvious so this function returns\n+      --  True for all tagged types for compatibility reasons.\n+\n+      --  A function with, say, a tagged null controlling result type might\n+      --  be overridden by a primitive of an extension having an access\n+      --  discriminant and the overrider and overridden must have compatible\n+      --  calling conventions (including implicitly declared parameters).\n+\n+      --  Similarly, values of one access-to-subprogram type might designate\n+      --  both a primitive subprogram of a given type and a function which is,\n+      --  for example, not a primitive subprogram of any type. Again, this\n+      --  requires calling convention compatibility. It might be possible to\n+      --  solve these issues by introducing wrappers, but that is not the\n+      --  approach that was chosen.\n \n+      elsif Is_Tagged_Type (Func_Typ) then\n          return True;\n \n       elsif Has_Unconstrained_Access_Discriminants (Func_Typ) then"}]}