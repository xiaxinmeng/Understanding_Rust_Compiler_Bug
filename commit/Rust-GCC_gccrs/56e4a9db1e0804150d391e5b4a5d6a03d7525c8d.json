{"sha": "56e4a9db1e0804150d391e5b4a5d6a03d7525c8d", "node_id": "C_kwDOANBUbNoAKDU2ZTRhOWRiMWUwODA0MTUwZDM5MWU1YjRhNWQ2YTAzZDc1MjVjOGQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-30T15:24:34Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-01T13:12:48Z"}, "message": "Add TypePath resolution for enum ctor\n\nWhen constructing enums we end up with a path like Enum::discriminant so\nwe must lookup the variant to figure out how to construct the enum.\n\nAddresses #79", "tree": {"sha": "5658f7bc0c0f8cb03e4294223a160df89e7f6c7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5658f7bc0c0f8cb03e4294223a160df89e7f6c7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56e4a9db1e0804150d391e5b4a5d6a03d7525c8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56e4a9db1e0804150d391e5b4a5d6a03d7525c8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56e4a9db1e0804150d391e5b4a5d6a03d7525c8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56e4a9db1e0804150d391e5b4a5d6a03d7525c8d/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "919a5a4c5aa7c567e2f3b3a75d7de91c1425227f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/919a5a4c5aa7c567e2f3b3a75d7de91c1425227f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/919a5a4c5aa7c567e2f3b3a75d7de91c1425227f"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "d318b9cc7676501df37980191467a464ec924578", "filename": "gcc/rust/typecheck/rust-hir-path-probe.h", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e4a9db1e0804150d391e5b4a5d6a03d7525c8d/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e4a9db1e0804150d391e5b4a5d6a03d7525c8d/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h?ref=56e4a9db1e0804150d391e5b4a5d6a03d7525c8d", "patch": "@@ -32,6 +32,8 @@ struct PathProbeCandidate\n {\n   enum CandidateType\n   {\n+    ENUM_VARIANT,\n+\n     IMPL_CONST,\n     IMPL_TYPE_ALIAS,\n     IMPL_FUNC,\n@@ -41,6 +43,12 @@ struct PathProbeCandidate\n     TRAIT_FUNC,\n   };\n \n+  struct EnumItemCandidate\n+  {\n+    const TyTy::ADTType *parent;\n+    const TyTy::VariantDef *variant;\n+  };\n+\n   struct ImplItemCandidate\n   {\n     HIR::ImplItem *impl_item;\n@@ -59,13 +67,20 @@ struct PathProbeCandidate\n   Location locus;\n   union Candidate\n   {\n+    EnumItemCandidate enum_field;\n     ImplItemCandidate impl;\n     TraitItemCandidate trait;\n \n+    Candidate (EnumItemCandidate enum_field) : enum_field (enum_field) {}\n     Candidate (ImplItemCandidate impl) : impl (impl) {}\n     Candidate (TraitItemCandidate trait) : trait (trait) {}\n   } item;\n \n+  PathProbeCandidate (CandidateType type, TyTy::BaseType *ty, Location locus,\n+\t\t      EnumItemCandidate enum_field)\n+    : type (type), ty (ty), item (enum_field)\n+  {}\n+\n   PathProbeCandidate (CandidateType type, TyTy::BaseType *ty, Location locus,\n \t\t      ImplItemCandidate impl)\n     : type (type), ty (ty), item (impl)\n@@ -81,6 +96,8 @@ struct PathProbeCandidate\n     return \"PathProbe candidate TODO - as_string\";\n   }\n \n+  bool is_enum_candidate () const { return type == ENUM_VARIANT; }\n+\n   bool is_impl_candidate () const\n   {\n     return type == IMPL_CONST || type == IMPL_TYPE_ALIAS || type == IMPL_FUNC;\n@@ -106,7 +123,17 @@ class PathProbeType : public TypeCheckBase\n   {\n     PathProbeType probe (receiver, segment_name);\n     if (probe_impls)\n-      probe.process_impl_items_for_candidates ();\n+      {\n+\tif (receiver->get_kind () == TyTy::TypeKind::ADT)\n+\t  {\n+\t    const TyTy::ADTType *adt\n+\t      = static_cast<const TyTy::ADTType *> (receiver);\n+\t    if (adt->is_enum ())\n+\t      probe.process_enum_item_for_candiates (adt);\n+\t  }\n+\n+\tprobe.process_impl_items_for_candidates ();\n+      }\n \n     if (!probe_bounds)\n       return probe.candidates;\n@@ -192,6 +219,19 @@ class PathProbeType : public TypeCheckBase\n   }\n \n protected:\n+  void process_enum_item_for_candiates (const TyTy::ADTType *adt)\n+  {\n+    TyTy::VariantDef *v;\n+    if (!adt->lookup_variant (search.as_string (), &v))\n+      return;\n+\n+    PathProbeCandidate::EnumItemCandidate enum_item_candidate{adt, v};\n+    PathProbeCandidate candidate{\n+      PathProbeCandidate::CandidateType::ENUM_VARIANT, receiver->clone (),\n+      mappings->lookup_location (adt->get_ty_ref ()), enum_item_candidate};\n+    candidates.push_back (std::move (candidate));\n+  }\n+\n   void process_impl_items_for_candidates ()\n   {\n     mappings->iterate_impl_items ([&] (HirId id, HIR::ImplItem *item,\n@@ -403,6 +443,10 @@ class ReportMultipleCandidateError : private TypeCheckBase\n       {\n \tswitch (c.type)\n \t  {\n+\t  case PathProbeCandidate::CandidateType::ENUM_VARIANT:\n+\t    gcc_unreachable ();\n+\t    break;\n+\n \t  case PathProbeCandidate::CandidateType::IMPL_CONST:\n \t  case PathProbeCandidate::CandidateType::IMPL_TYPE_ALIAS:\n \t  case PathProbeCandidate::CandidateType::IMPL_FUNC:"}, {"sha": "1afb0edd963908fe8d2d8ab89880cbd880990a36", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e4a9db1e0804150d391e5b4a5d6a03d7525c8d/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e4a9db1e0804150d391e5b4a5d6a03d7525c8d/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=56e4a9db1e0804150d391e5b4a5d6a03d7525c8d", "patch": "@@ -1232,6 +1232,20 @@ class ADTType : public BaseType, public SubstitutionRef\n   std::vector<VariantDef *> &get_variants () { return variants; }\n   const std::vector<VariantDef *> &get_variants () const { return variants; }\n \n+  bool lookup_variant (const std::string &lookup,\n+\t\t       VariantDef **found_variant) const\n+  {\n+    for (auto &variant : variants)\n+      {\n+\tif (variant->get_identifier ().compare (lookup) == 0)\n+\t  {\n+\t    *found_variant = variant;\n+\t    return true;\n+\t  }\n+      }\n+    return false;\n+  }\n+\n   ADTType *\n   handle_substitions (SubstitutionArgumentMappings mappings) override final;\n "}]}