{"sha": "47c2cf3ac684fab21ec31c72462b7b21845a41f2", "node_id": "C_kwDOANBUbNoAKDQ3YzJjZjNhYzY4NGZhYjIxZWMzMWM3MjQ2MmI3YjIxODQ1YTQxZjI", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-09T09:14:25Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-09T13:29:22Z"}, "message": "Remove TDF_THREADING flag in favor of param.\n\nI am returning a TDF_* flag to the queue of available entries as I am\nunconvinced that we need to burn an entire flag for internal debugging\nconstructs, especially since we seem to be running out of them.\n\nI've added a --param=threader-debug entry similar to the one we use for\nranger debugging.  Currently this only affects the backward threader,\nbut since the DOM threader is an outlier and on the chopping block, I\navoided using the \"backward\" name.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* dumpfile.c (dump_options): Remove TDF_THREADING entry.\n\t* dumpfile.h (enum dump_flag): Remove TDF_THREADING and adjust\n\tremaining entries.\n\t* flag-types.h (enum threader_debug): New.\n\t* gimple-range-path.cc (DEBUG_SOLVER): Use param_threader_debug.\n\t* params.opt: Add entry for --param=threader-debug=.", "tree": {"sha": "f50d0bc73091d02c016be7e0f50534a4afcbeac2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f50d0bc73091d02c016be7e0f50534a4afcbeac2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47c2cf3ac684fab21ec31c72462b7b21845a41f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c2cf3ac684fab21ec31c72462b7b21845a41f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47c2cf3ac684fab21ec31c72462b7b21845a41f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c2cf3ac684fab21ec31c72462b7b21845a41f2/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c71cb26a9e841888f52e4bfcaad94c8f8ecb4fdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c71cb26a9e841888f52e4bfcaad94c8f8ecb4fdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c71cb26a9e841888f52e4bfcaad94c8f8ecb4fdb"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "8169daf7f5964dbdf18cdfb61fdd780aa20ab153", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c2cf3ac684fab21ec31c72462b7b21845a41f2/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c2cf3ac684fab21ec31c72462b7b21845a41f2/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=47c2cf3ac684fab21ec31c72462b7b21845a41f2", "patch": "@@ -145,7 +145,6 @@ static const kv_pair<dump_flags_t> dump_options[] =\n   {\"missed\", MSG_MISSED_OPTIMIZATION},\n   {\"note\", MSG_NOTE},\n   {\"optall\", MSG_ALL_KINDS},\n-  {\"threading\", TDF_THREADING},\n   {\"all\", dump_flags_t (TDF_ALL_VALUES\n \t\t\t& ~(TDF_RAW | TDF_SLIM | TDF_LINENO | TDF_GRAPH\n \t\t\t    | TDF_STMTADDR | TDF_RHS_ONLY | TDF_NOUID"}, {"sha": "2487ae243c69e46aa1bbb619e73afa08ab0f6ed7", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c2cf3ac684fab21ec31c72462b7b21845a41f2/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c2cf3ac684fab21ec31c72462b7b21845a41f2/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=47c2cf3ac684fab21ec31c72462b7b21845a41f2", "patch": "@@ -146,20 +146,17 @@ enum dump_flag : uint32_t\n   /* Dump folding details.  */\n   TDF_FOLDING = (1 << 21),\n \n-  /* Dumping for range path solver.  */\n-  TDF_THREADING = (1 << 22),\n-\n   /* MSG_* flags for expressing the kinds of message to\n      be emitted by -fopt-info.  */\n \n   /* -fopt-info optimized sources.  */\n-  MSG_OPTIMIZED_LOCATIONS = (1 << 23),\n+  MSG_OPTIMIZED_LOCATIONS = (1 << 22),\n \n   /* Missed opportunities.  */\n-  MSG_MISSED_OPTIMIZATION = (1 << 24),\n+  MSG_MISSED_OPTIMIZATION = (1 << 23),\n \n   /* General optimization info.  */\n-  MSG_NOTE = (1 << 25),\n+  MSG_NOTE = (1 << 24),\n \n   /* Mask for selecting MSG_-kind flags.  */\n   MSG_ALL_KINDS = (MSG_OPTIMIZED_LOCATIONS\n@@ -178,33 +175,33 @@ enum dump_flag : uint32_t\n      sub-option of -fopt-info to show the internal messages.  */\n \n   /* Implicitly supplied for messages at the top-level dump scope.  */\n-  MSG_PRIORITY_USER_FACING = (1 << 26),\n+  MSG_PRIORITY_USER_FACING = (1 << 25),\n \n   /* Implicitly supplied for messages within nested dump scopes.  */\n-  MSG_PRIORITY_INTERNALS = (1 << 27),\n+  MSG_PRIORITY_INTERNALS = (1 << 26),\n \n   /* Supplied when an opt_problem generated in a nested scope is re-emitted\n      at the top-level.   We want to default to showing these in -fopt-info\n      output, but to *not* show them in dump files, as the message would be\n      shown twice, messing up \"scan-tree-dump-times\" in DejaGnu tests.  */\n-  MSG_PRIORITY_REEMITTED = (1 << 28),\n+  MSG_PRIORITY_REEMITTED = (1 << 27),\n \n   /* Mask for selecting MSG_PRIORITY_* flags.  */\n   MSG_ALL_PRIORITIES = (MSG_PRIORITY_USER_FACING\n \t\t\t| MSG_PRIORITY_INTERNALS\n \t\t\t| MSG_PRIORITY_REEMITTED),\n \n   /* All -fdump- flags.  */\n-  TDF_ALL_VALUES = (1 << 29) - 1,\n+  TDF_ALL_VALUES = (1 << 28) - 1,\n \n   /* Dumping for -fcompare-debug.  */\n-  TDF_COMPARE_DEBUG = (1 << 29),\n+  TDF_COMPARE_DEBUG = (1 << 28),\n \n   /* Dump a GIMPLE value which means wrapping certain things with _Literal.  */\n-  TDF_GIMPLE_VAL = (1 << 30),\n+  TDF_GIMPLE_VAL = (1 << 29),\n \n   /* For error.  */\n-  TDF_ERROR = ((uint32_t)1 << 31),\n+  TDF_ERROR = ((uint32_t)1 << 30),\n };\n \n /* Dump flags type.  */"}, {"sha": "cfd2a5f6f50211093509f692acef47a9c717d515", "filename": "gcc/flag-types.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c2cf3ac684fab21ec31c72462b7b21845a41f2/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c2cf3ac684fab21ec31c72462b7b21845a41f2/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=47c2cf3ac684fab21ec31c72462b7b21845a41f2", "patch": "@@ -462,6 +462,13 @@ enum ranger_debug\n \t\t      | RANGER_DEBUG_TRACE)\n };\n \n+/* Jump threader verbose dumps.  */\n+enum threader_debug\n+{\n+  THREADER_DEBUG_NONE = 0,\n+  THREADER_DEBUG_ALL = 1\n+};\n+\n /* EVRP mode.  */\n enum evrp_mode\n {"}, {"sha": "52de10369f3e061d50a330eb13f1431d7cad0de0", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c2cf3ac684fab21ec31c72462b7b21845a41f2/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c2cf3ac684fab21ec31c72462b7b21845a41f2/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=47c2cf3ac684fab21ec31c72462b7b21845a41f2", "patch": "@@ -34,7 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-iterator.h\"\n \n // Internal construct to help facilitate debugging of solver.\n-#define DEBUG_SOLVER (dump_file && dump_flags & TDF_THREADING)\n+#define DEBUG_SOLVER (dump_file && (param_threader_debug == THREADER_DEBUG_ALL))\n \n path_range_query::path_range_query (gimple_ranger &ranger, bool resolve)\n   : m_ranger (ranger)"}, {"sha": "e725c99e5e460298b3e272d0115091e06f083a9b", "filename": "gcc/params.opt", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c2cf3ac684fab21ec31c72462b7b21845a41f2/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c2cf3ac684fab21ec31c72462b7b21845a41f2/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=47c2cf3ac684fab21ec31c72462b7b21845a41f2", "patch": "@@ -1047,6 +1047,19 @@ Maximum number of escape points tracked by modref per SSA-name.\n Common Joined UInteger Var(param_modref_max_adjustments) Init(8) IntegerRange(0, 254) Param Optimization\n Maximum number of times a given range is adjusted during the dataflow.\n \n+-param=threader-debug=\n+Common Joined Var(param_threader_debug) Enum(threader_debug) Init(THREADER_DEBUG_NONE) Param Optimization\n+--param=threader-debug=[none|all] Enables verbose dumping of the threader solver.\n+\n+Enum\n+Name(threader_debug) Type(enum threader_debug) UnknownError(unknown threader debug mode %qs)\n+\n+EnumValue\n+Enum(threader_debug) String(none) Value(THREADER_DEBUG_NONE)\n+\n+EnumValue\n+Enum(threader_debug) String(all) Value(THREADER_DEBUG_ALL)\n+\n -param=tm-max-aggregate-size=\n Common Joined UInteger Var(param_tm_max_aggregate_size) Init(9) Param Optimization\n Size in bytes after which thread-local aggregates should be instrumented with the logging functions instead of save/restore pairs."}]}