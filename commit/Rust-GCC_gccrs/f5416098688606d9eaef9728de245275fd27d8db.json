{"sha": "f5416098688606d9eaef9728de245275fd27d8db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU0MTYwOTg2ODg2MDZkOWVhZWY5NzI4ZGUyNDUyNzVmZDI3ZDhkYg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-06-26T11:53:00Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-06-26T11:53:00Z"}, "message": "builtins.c (expand_builtin_mathfn): Always stabilize the argument list against re-evaluation.\n\n\n\t* builtins.c (expand_builtin_mathfn): Always stabilize the argument\n\tlist against re-evaluation.  If expand_unop fails, call expand_call\n\twith the stabilized argument list rather than return NULL_RTX.\n\t(expand_builtin_mathfn2): Likewise, always stabilize the argument\n\tlist, and call expand_call ourselves if expand_binop fails.\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r68526", "tree": {"sha": "b5f5ac43cc1e65fc0a80e9b537fb8ebf47cdb182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5f5ac43cc1e65fc0a80e9b537fb8ebf47cdb182"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5416098688606d9eaef9728de245275fd27d8db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5416098688606d9eaef9728de245275fd27d8db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5416098688606d9eaef9728de245275fd27d8db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5416098688606d9eaef9728de245275fd27d8db/comments", "author": null, "committer": null, "parents": [{"sha": "998c7773b5ac64ae6be1d905764bd233271cc734", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/998c7773b5ac64ae6be1d905764bd233271cc734", "html_url": "https://github.com/Rust-GCC/gccrs/commit/998c7773b5ac64ae6be1d905764bd233271cc734"}], "stats": {"total": 111, "additions": 46, "deletions": 65}, "files": [{"sha": "0bf71eaa54719951d503e7315a1dcf061caf65ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5416098688606d9eaef9728de245275fd27d8db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5416098688606d9eaef9728de245275fd27d8db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5416098688606d9eaef9728de245275fd27d8db", "patch": "@@ -1,3 +1,12 @@\n+2003-06-26  Roger Sayle  <roger@eyesopen.com>\n+\t    Richard Henderson  <rth@redhat.com>\n+\n+\t* builtins.c (expand_builtin_mathfn): Always stabilize the argument\n+\tlist against re-evaluation.  If expand_unop fails, call expand_call\n+\twith the stabilized argument list rather than return NULL_RTX.\n+\t(expand_builtin_mathfn2): Likewise, always stabilize the argument\n+\tlist, and call expand_call ourselves if expand_binop fails.\n+\n 2003-06-26  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR optimization/11210"}, {"sha": "3872fd56c503facce82e28baef045042cda9822e", "filename": "gcc/builtins.c", "status": "modified", "additions": 37, "deletions": 65, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5416098688606d9eaef9728de245275fd27d8db/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5416098688606d9eaef9728de245275fd27d8db/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=f5416098688606d9eaef9728de245275fd27d8db", "patch": "@@ -1701,7 +1701,7 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n   tree arglist = TREE_OPERAND (exp, 1);\n   enum machine_mode mode;\n   bool errno_set = false;\n-  tree arg;\n+  tree arg, narg;\n \n   if (!validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n     return 0;\n@@ -1771,25 +1771,15 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n   if (! flag_errno_math || ! HONOR_NANS (mode))\n     errno_set = false;\n \n-  /* Stabilize and compute the argument.  */\n-  if (errno_set)\n-    switch (TREE_CODE (arg))\n-      {\n-      case VAR_DECL:\n-      case PARM_DECL:\n-      case SAVE_EXPR:\n-      case REAL_CST:\n-\tbreak;\n-\n-      default:\n-\t/* Wrap the computation of the argument in a SAVE_EXPR, as we\n-\t   need to expand the argument again in expand_errno_check.  This\n-\t   way, we will not perform side-effects more the once.  */\n-\targ = save_expr (arg);\n-\targlist = build_tree_list (NULL_TREE, arg);\n-\texp = build_function_call_expr (fndecl, arglist);\n-\tbreak;\n-      }\n+  /* Wrap the computation of the argument in a SAVE_EXPR, as we may\n+     need to expand the argument again.  This way, we will not perform\n+     side-effects more the once.  */\n+  narg = save_expr (arg);\n+  if (narg != arg)\n+    {\n+      arglist = build_tree_list (NULL_TREE, arg);\n+      exp = build_function_call_expr (fndecl, arglist);\n+    }\n \n   op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n \n@@ -1800,13 +1790,13 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n      Set TARGET to wherever the result comes back.  */\n   target = expand_unop (mode, builtin_optab, op0, target, 0);\n \n-  /* If we were unable to expand via the builtin, stop the\n-     sequence (without outputting the insns) and return 0, causing\n-     a call to the library function.  */\n+  /* If we were unable to expand via the builtin, stop the sequence\n+     (without outputting the insns) and call to the library function\n+     with the stabilized argument list.  */\n   if (target == 0)\n     {\n       end_sequence ();\n-      return 0;\n+      return expand_call (exp, target, target == const0_rtx);\n     }\n \n   if (errno_set)\n@@ -1834,7 +1824,7 @@ expand_builtin_mathfn_2 (tree exp, rtx target, rtx subtarget)\n   rtx op0, op1, insns;\n   tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n   tree arglist = TREE_OPERAND (exp, 1);\n-  tree arg0, arg1, temp;\n+  tree arg0, arg1, temp, narg;\n   enum machine_mode mode;\n   bool errno_set = true;\n   bool stable = true;\n@@ -1866,45 +1856,27 @@ expand_builtin_mathfn_2 (tree exp, rtx target, rtx subtarget)\n   if (! flag_errno_math || ! HONOR_NANS (mode))\n     errno_set = false;\n \n-  /* Stabilize the arguments.  */\n-  if (errno_set)\n+  /* Alway stabilize the argument list.  */\n+  narg = save_expr (arg1);\n+  if (narg != arg1)\n     {\n-      switch (TREE_CODE (arg1))\n-\t{\n-\tcase VAR_DECL:\n-\tcase PARM_DECL:\n-\tcase SAVE_EXPR:\n-\tcase REAL_CST:\n-\t  temp = TREE_CHAIN (arglist);\n-\t  break;\n-\n-\tdefault:\n-\t  stable = false;\n-\t  arg1 = save_expr (arg1);\n-\t  temp = build_tree_list (NULL_TREE, arg1);\n-\t  break;\n-        }\n-\n-      switch (TREE_CODE (arg0))\n-\t{\n-\tcase VAR_DECL:\n-\tcase PARM_DECL:\n-\tcase SAVE_EXPR:\n-\tcase REAL_CST:\n-\t  if (! stable)\n-\t    arglist = tree_cons (NULL_TREE, arg0, temp);\n-\t  break;\n-\n-\tdefault:\n-\t  stable = false;\n-\t  arg0 = save_expr (arg0);\n-\t  arglist = tree_cons (NULL_TREE, arg0, temp);\n-\t  break;\n-\t}\n+      temp = build_tree_list (NULL_TREE, narg);\n+      stable = false;\n+    }\n+  else\n+    temp = TREE_CHAIN (arglist);\n \n-      if (! stable)\n-\texp = build_function_call_expr (fndecl, arglist);\n+  narg = save_expr (arg0);\n+  if (narg != arg0)\n+    {\n+      arglist = tree_cons (NULL_TREE, narg, temp);\n+      stable = false;\n     }\n+  else if (! stable)\n+    arglist = tree_cons (NULL_TREE, arg0, temp);\n+\n+  if (! stable)\n+    exp = build_function_call_expr (fndecl, arglist);\n \n   op0 = expand_expr (arg0, subtarget, VOIDmode, 0);\n   op1 = expand_expr (arg1, 0, VOIDmode, 0);\n@@ -1917,13 +1889,13 @@ expand_builtin_mathfn_2 (tree exp, rtx target, rtx subtarget)\n   target = expand_binop (mode, builtin_optab, op0, op1,\n \t\t\t target, 0, OPTAB_DIRECT);\n \n-  /* If we were unable to expand via the builtin, stop the\n-     sequence (without outputting the insns) and return 0, causing\n-     a call to the library function.  */\n+  /* If we were unable to expand via the builtin, stop the sequence\n+     (without outputting the insns) and call to the library function\n+     with the stabilized argument list.  */\n   if (target == 0)\n     {\n       end_sequence ();\n-      return 0;\n+      return expand_call (exp, target, target == const0_rtx);\n     }\n \n   if (errno_set)"}]}