{"sha": "d60e76db50467899935a6738a56af8871d33a789", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYwZTc2ZGI1MDQ2Nzg5OTkzNWE2NzM4YTU2YWY4ODcxZDMzYTc4OQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-03-31T16:42:58Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-03-31T16:42:58Z"}, "message": "re PR fortran/31160 (%VAL and related features need to be documented.)\n\n2007-03-31  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/31160\n\t* gfortran.texi: Add a section for the %VAL, %REF and %LOC\n\textensions.\n\nFrom-SVN: r123383", "tree": {"sha": "7d470ade8ba2b23b23b184fcfc2c89c02a6a6c2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d470ade8ba2b23b23b184fcfc2c89c02a6a6c2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d60e76db50467899935a6738a56af8871d33a789", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d60e76db50467899935a6738a56af8871d33a789", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d60e76db50467899935a6738a56af8871d33a789", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d60e76db50467899935a6738a56af8871d33a789/comments", "author": null, "committer": null, "parents": [{"sha": "c9516c38e3ea4a028efafe349142638800e0212e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9516c38e3ea4a028efafe349142638800e0212e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9516c38e3ea4a028efafe349142638800e0212e"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "63c8bb7c4a1a4199ab808a0e467432c15e972ce3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60e76db50467899935a6738a56af8871d33a789/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60e76db50467899935a6738a56af8871d33a789/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d60e76db50467899935a6738a56af8871d33a789", "patch": "@@ -1,3 +1,9 @@\n+2007-03-31  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/31160\n+\t* gfortran.texi: Add a section for the %VAL, %REF and %LOC\n+\textensions.\n+\n 2007-03-30  Rafael Avila de Espindola  <espindola@google.com>\n \n \t* trans-types.c (gfc_signed_or_unsigned_type): Remove."}, {"sha": "5f315852e330565f4901aa3eec703f4c259cf5f2", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60e76db50467899935a6738a56af8871d33a789/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60e76db50467899935a6738a56af8871d33a789/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=d60e76db50467899935a6738a56af8871d33a789", "patch": "@@ -808,6 +808,7 @@ of extensions, and @option{-std=legacy} allows both without warning.\n * Cray pointers::\n * CONVERT specifier::\n * OpenMP::\n+* Argument list functions::\n @end menu\n \n @node Old-style kind specifications\n@@ -1288,6 +1289,44 @@ For details refer to the actual\n @uref{http://www.openmp.org/drupal/mp-documents/spec25.pdf,\n OpenMP Application Program Interface v2.5} specification.\n \n+@node Argument list functions\n+@section Argument list functions %VAL, %REF and %LOC\n+@cindex Argument list functions %VAL, %REF and %LOC\n+\n+GNU Fortran supports argument list functions @code{%VAL}, @code{%REF} \n+and @code{%LOC} statements, for backward compatibility with g77. \n+It is recommended that these should be used only for code that is \n+accessing facilities outside of GNU Fortran, such as operating system \n+or windowing facilities. It is best to constrain such uses to isolated \n+portions of a program--portions that deal specifically and exclusively \n+with low-level, system-dependent facilities. Such portions might well \n+provide a portable interface for use by the program as a whole, but are \n+themselves not portable, and should be thoroughly tested each time they \n+are rebuilt using a new compiler or version of a compiler.\n+\n+@code{%VAL} passes a scalar argument by value, @code{%REF} passes it by \n+reference and @code{%LOC} passes its memory location.  Since gfortran \n+already passes scalar arguments by reference, @code{%REF} is in effect \n+a do-nothing.  @code{%LOC} has the same effect as a fortran pointer.\n+\n+An example of passing an argument by value to a C subroutine foo.:\n+@smallexample\n+C\n+C prototype      void foo_ (float x);\n+C\n+      external foo\n+      real*4 x\n+      x = 3.14159\n+      call foo (%VAL (x))\n+      end\n+@end smallexample\n+\n+For details refer to the g77 manual\n+@uref{http://gcc.gnu.org/onlinedocs/gcc-3.4.6/g77/index.html#Top}.\n+\n+Also, the gfortran testsuite c_by_val.f and its partner c_by_val.c are\n+worth a look.\n+\n @c ---------------------------------------------------------------------\n @c Intrinsic Procedures\n @c ---------------------------------------------------------------------"}]}