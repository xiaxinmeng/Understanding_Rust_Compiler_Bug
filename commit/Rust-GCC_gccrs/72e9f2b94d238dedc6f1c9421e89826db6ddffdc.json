{"sha": "72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJlOWYyYjk0ZDIzOGRlZGM2ZjFjOTQyMWU4OTgyNmRiNmRkZmZkYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-07T09:26:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-07T09:26:27Z"}, "message": "[multiple changes]\n\n2010-10-07  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_res.adb: Minor reformatting\n\n2010-10-07  Olivier Ramonat  <ramonat@adacore.com>\n\n\t* gnat_ugn.texi: Minor editing.\n\t* opt.ads: Document that scripts rely on specific formats in opt.ads\n\n2010-10-07  Robert Dewar  <dewar@adacore.com>\n\n\t* a-wichun.ads, a-wichun.adb (To_Lower_Case): New function\n\t(To_Upper_Case): Fix to be inverse of To_Lower_Case\n\t* a-zchuni.ads, a-zchuni.adb (To_Lower_Case): New function\n\t(To_Upper_Case): Fix to be inverse of To_Lower_Case\n\n2010-10-07  Robert Dewar  <dewar@adacore.com>\n\n\t* a-wichha.adb, a-wichha.ads, a-zchhan.adb, a-zchhan.ads: New file.\n\t* impunit.adb: Add entries for a-wichha/a-zchhan\n\t* Makefile.rtl: Add entries for a-wichha/a-zchhan\n\n2010-10-07  Vincent Celier  <celier@adacore.com>\n\n\t* make.adb (Check): Call Check_Source_Info_In_ALI with Project_Tree\n\t* makeutl.adb (Check_Source_Info_In_ALI): If there is at least one\n\treplaced source, check that none of the replaced sources are in the\n\tdependencies.\n\t* makeutl.ads (Check_Source_Info_In_ALI): New parameter Tree\n\t* prj-nmsc.adb (Remove_Source): New parameter Tree. If the source is\n\treplaced with a source with a different file name, put it in the hash\n\ttable Replaced_Sources.\n\t(Add_Source): Call Remove_Source with Data.Tree. If there is at least\n\tone replaced source, check if it has the same file name as the current\n\tsource; if it has, remove it from the hash table Replaced_Sources.\n\t* prj.adb (Reset): Reset hash table Tree.Replaced_Sources\n\t* prj.ads (Replaced_Source_HTable): New hash table\n\t(Project_Tree_Data): New components Replaced_Sources and\n\tReplaced_Source_Number.\n\n2010-10-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_elab.adb (Check_A_Call): After inserting elaboration check, set\n\tproper flag to prevent a double elaboration check on the same call.\n\t* exp_util.adb (Insert_Actions): If the enclosing node is an\n\tExpression_With_Actions and it has been analyzed already, find\n\tinsertion point further up in the tree.\n\n2010-10-07  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Record_Representation_Clause): Alphabetize all\n\tlocal variables. Remove the general restriction which prohibits the\n\tapplication of record rep clauses to Unchecked_Union types. Add Ada\n\t2012 check to detect improper naming of an Unchecked_Union\n\tdiscriminant in record rep clause.\n\t* sem_prag.adb: Add with and use clause for Exp_Ch7.\n\t(Analyze_Pragma): Unchecked_Union case: Propagate the Unchecked_Union\n\ttype to all invocations of Check_Component and Check_Variant.\n\t(Check_Component): Add formal parameters UU_Typ and In_Variant_Part.\n\tRewritten.  Add Ada 2012 check to detect improper use of formal\n\tprivate types and private extensions as component types of an\n\tUnchecked_Union declared inside a generic body.\n\t(Check_Variant): Add formal parameter UU_Typ. Propagate the\n\tUnchecked_Union type to all calls of Check_Component. Signal that the\n\tcurrent component comes from the variant part of an Unchecked_Union\n\ttype.\n\t(Inside_Generic_Body): New routine.\n\n2010-10-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (Expand_Composite_Equality): When looking for a primitive\n\tequality operation for a record component, verify that both formals\n\thave the same type, and the result type is boolean.\n\n2010-10-07  Vincent Celier  <celier@adacore.com>\n\n\t* gnatcmd.adb (Check_Files): When looking for the .ci file for a\n\tbinder generated file, look for both b~xxx and b__xxx as gprbuild\n\talways uses b__ as the prefix of such files.\n\nFrom-SVN: r165084", "tree": {"sha": "18f5293df900e9613129fa71e2e652368370cc1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18f5293df900e9613129fa71e2e652368370cc1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/comments", "author": null, "committer": null, "parents": [{"sha": "b4a4936bdc59886a3c6dedd6a2d2edf476735c3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4a4936bdc59886a3c6dedd6a2d2edf476735c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4a4936bdc59886a3c6dedd6a2d2edf476735c3c"}], "stats": {"total": 1042, "additions": 974, "deletions": 68}, "files": [{"sha": "bc00ea0c57c784a454c1656da15110b3a2c2e2a1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -1,3 +1,83 @@\n+2010-10-07  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_res.adb: Minor reformatting\n+\n+2010-10-07  Olivier Ramonat  <ramonat@adacore.com>\n+\n+\t* gnat_ugn.texi: Minor editing.\n+\t* opt.ads: Document that scripts rely on specific formats in opt.ads\n+\n+2010-10-07  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-wichun.ads, a-wichun.adb (To_Lower_Case): New function\n+\t(To_Upper_Case): Fix to be inverse of To_Lower_Case\n+\t* a-zchuni.ads, a-zchuni.adb (To_Lower_Case): New function\n+\t(To_Upper_Case): Fix to be inverse of To_Lower_Case\n+\n+2010-10-07  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-wichha.adb, a-wichha.ads, a-zchhan.adb, a-zchhan.ads: New file.\n+\t* impunit.adb: Add entries for a-wichha/a-zchhan\n+\t* Makefile.rtl: Add entries for a-wichha/a-zchhan\n+\n+2010-10-07  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb (Check): Call Check_Source_Info_In_ALI with Project_Tree\n+\t* makeutl.adb (Check_Source_Info_In_ALI): If there is at least one\n+\treplaced source, check that none of the replaced sources are in the\n+\tdependencies.\n+\t* makeutl.ads (Check_Source_Info_In_ALI): New parameter Tree\n+\t* prj-nmsc.adb (Remove_Source): New parameter Tree. If the source is\n+\treplaced with a source with a different file name, put it in the hash\n+\ttable Replaced_Sources.\n+\t(Add_Source): Call Remove_Source with Data.Tree. If there is at least\n+\tone replaced source, check if it has the same file name as the current\n+\tsource; if it has, remove it from the hash table Replaced_Sources.\n+\t* prj.adb (Reset): Reset hash table Tree.Replaced_Sources\n+\t* prj.ads (Replaced_Source_HTable): New hash table\n+\t(Project_Tree_Data): New components Replaced_Sources and\n+\tReplaced_Source_Number.\n+\n+2010-10-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_elab.adb (Check_A_Call): After inserting elaboration check, set\n+\tproper flag to prevent a double elaboration check on the same call.\n+\t* exp_util.adb (Insert_Actions): If the enclosing node is an\n+\tExpression_With_Actions and it has been analyzed already, find\n+\tinsertion point further up in the tree.\n+\n+2010-10-07  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Record_Representation_Clause): Alphabetize all\n+\tlocal variables. Remove the general restriction which prohibits the\n+\tapplication of record rep clauses to Unchecked_Union types. Add Ada\n+\t2012 check to detect improper naming of an Unchecked_Union\n+\tdiscriminant in record rep clause.\n+\t* sem_prag.adb: Add with and use clause for Exp_Ch7.\n+\t(Analyze_Pragma): Unchecked_Union case: Propagate the Unchecked_Union\n+\ttype to all invocations of Check_Component and Check_Variant.\n+\t(Check_Component): Add formal parameters UU_Typ and In_Variant_Part.\n+\tRewritten.  Add Ada 2012 check to detect improper use of formal\n+\tprivate types and private extensions as component types of an\n+\tUnchecked_Union declared inside a generic body.\n+\t(Check_Variant): Add formal parameter UU_Typ. Propagate the\n+\tUnchecked_Union type to all calls of Check_Component. Signal that the\n+\tcurrent component comes from the variant part of an Unchecked_Union\n+\ttype.\n+\t(Inside_Generic_Body): New routine.\n+\n+2010-10-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Composite_Equality): When looking for a primitive\n+\tequality operation for a record component, verify that both formals\n+\thave the same type, and the result type is boolean.\n+\n+2010-10-07  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatcmd.adb (Check_Files): When looking for the .ci file for a\n+\tbinder generated file, look for both b~xxx and b__xxx as gprbuild\n+\talways uses b__ as the prefix of such files.\n+\n 2010-10-07  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_res.adb: Minor reformatting."}, {"sha": "b913d2f033136f9c5cedff34cccfb1726b562c97", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -268,6 +268,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-tiunio$(objext) \\\n   a-unccon$(objext) \\\n   a-uncdea$(objext) \\\n+  a-wichha$(objext) \\\n   a-wichun$(objext) \\\n   a-widcha$(objext) \\\n   a-witeio$(objext) \\\n@@ -292,6 +293,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-wwboio$(objext) \\\n   a-wwunio$(objext) \\\n   a-zchara$(objext) \\\n+  a-zchhan$(objext) \\\n   a-zchuni$(objext) \\\n   a-zrstfi$(objext) \\\n   a-ztcoau$(objext) \\"}, {"sha": "2dad375a4f039892fa74dbe0ebdd7984e836f5ad", "filename": "gcc/ada/a-wichha.adb", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fa-wichha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fa-wichha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wichha.adb?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -0,0 +1,186 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--         A D A . W I D E _ C H A R A C T E R S . H A N D L I N G          --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--            Copyright (C) 2010, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.Wide_Characters.Unicode; use Ada.Wide_Characters.Unicode;\n+\n+package body Ada.Wide_Characters.Handling is\n+\n+   ---------------------\n+   -- Is_Alphanumeric --\n+   ---------------------\n+\n+   function Is_Alphanumeric (Item : Wide_Character) return Boolean is\n+   begin\n+      return Is_Letter (Item) or else Is_Digit (Item);\n+   end Is_Alphanumeric;\n+\n+   ----------------\n+   -- Is_Control --\n+   ----------------\n+\n+   function Is_Control (Item : Wide_Character) return Boolean is\n+   begin\n+      return Get_Category (Item) = Cc;\n+   end Is_Control;\n+\n+   --------------\n+   -- Is_Digit --\n+   --------------\n+\n+   function Is_Digit (Item : Wide_Character) return Boolean\n+     renames Ada.Wide_Characters.Unicode.Is_Digit;\n+\n+   ----------------\n+   -- Is_Graphic --\n+   ----------------\n+\n+   function Is_Graphic (Item : Wide_Character) return Boolean is\n+   begin\n+      return not Is_Non_Graphic (Item);\n+   end Is_Graphic;\n+\n+   --------------------------\n+   -- Is_Hexadecimal_Digit --\n+   --------------------------\n+\n+   function Is_Hexadecimal_Digit (Item : Wide_Character) return Boolean is\n+   begin\n+      return Is_Digit (Item)\n+        or else Item in 'A' .. 'F'\n+        or else Item in 'a' .. 'f';\n+   end Is_Hexadecimal_Digit;\n+\n+   ---------------\n+   -- Is_Letter --\n+   ---------------\n+\n+   function Is_Letter (Item : Wide_Character) return Boolean\n+     renames Ada.Wide_Characters.Unicode.Is_Letter;\n+\n+   ------------------------\n+   -- Is_Line_Terminator --\n+   ------------------------\n+\n+   function Is_Line_Terminator (Item : Wide_Character) return Boolean\n+     renames Ada.Wide_Characters.Unicode.Is_Line_Terminator;\n+\n+   --------------\n+   -- Is_Lower --\n+   --------------\n+\n+   function Is_Lower (Item : Wide_Character) return Boolean is\n+   begin\n+      return Get_Category (Item) = Ll;\n+   end Is_Lower;\n+\n+   -------------\n+   -- Is_Mark --\n+   -------------\n+\n+   function Is_Mark (Item : Wide_Character) return Boolean\n+     renames Ada.Wide_Characters.Unicode.Is_Mark;\n+\n+   --------------\n+   -- Is_Other --\n+   --------------\n+\n+   function Is_Other (Item : Wide_Character) return Boolean\n+     renames Ada.Wide_Characters.Unicode.Is_Other;\n+\n+   --------------------\n+   -- Is_Punctuation --\n+   --------------------\n+\n+   function Is_Punctuation (Item : Wide_Character) return Boolean\n+     renames Ada.Wide_Characters.Unicode.Is_Punctuation;\n+\n+   --------------\n+   -- Is_Space --\n+   --------------\n+\n+   function Is_Space (Item : Wide_Character) return Boolean\n+     renames Ada.Wide_Characters.Unicode.Is_Space;\n+\n+   ----------------\n+   -- Is_Special --\n+   ----------------\n+\n+   function Is_Special (Item : Wide_Character) return Boolean is\n+   begin\n+      return Is_Graphic (Item) and then not Is_Alphanumeric (Item);\n+   end Is_Special;\n+\n+   --------------\n+   -- Is_Upper --\n+   --------------\n+\n+   function Is_Upper (Item : Wide_Character) return Boolean is\n+   begin\n+      return Get_Category (Item) = Lu;\n+   end Is_Upper;\n+\n+   --------------\n+   -- To_Lower --\n+   --------------\n+\n+   function To_Lower (Item : Wide_Character) return Wide_Character\n+     renames Ada.Wide_Characters.Unicode.To_Lower_Case;\n+\n+   function To_Lower (Item : Wide_String) return Wide_String is\n+      Result : Wide_String (Item'Range);\n+\n+   begin\n+      for J in Result'Range loop\n+         Result (J) := To_Lower (Item (J));\n+      end loop;\n+\n+      return Result;\n+   end To_Lower;\n+\n+   --------------\n+   -- To_Upper --\n+   --------------\n+\n+   function To_Upper (Item : Wide_Character) return Wide_Character\n+     renames Ada.Wide_Characters.Unicode.To_Upper_Case;\n+\n+   function To_Upper (Item : Wide_String) return Wide_String is\n+      Result : Wide_String (Item'Range);\n+\n+   begin\n+      for J in Result'Range loop\n+         Result (J) := To_Upper (Item (J));\n+      end loop;\n+\n+      return Result;\n+   end To_Upper;\n+\n+end Ada.Wide_Characters.Handling;"}, {"sha": "50c3ff8ed19e653ae7050d588e2fb792e2bf9023", "filename": "gcc/ada/a-wichha.ads", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fa-wichha.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fa-wichha.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wichha.ads?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -0,0 +1,120 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--         A D A . W I D E _ C H A R A C T E R S . H A N D L I N G          --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT.  In accordance with the copyright of that document, you can freely --\n+-- copy and modify this specification,  provided that if you redistribute a --\n+-- modified version,  any changes that you have made are clearly indicated. --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package Ada.Wide_Characters.Handling is\n+\n+   function Is_Control (Item : Wide_Character) return Boolean;\n+   pragma Inline (Is_Control);\n+   --  Returns True if the Wide_Character designated by Item is categorized as\n+   --  other_control, otherwise returns false.\n+\n+   function Is_Letter (Item : Wide_Character) return Boolean;\n+   pragma Inline (Is_Letter);\n+   --  Returns True if the Wide_Character designated by Item is categorized as\n+   --  letter_uppercase, letter_lowercase, letter_titlecase, letter_modifier,\n+   --  letter_other, or number_letter. Otherwise returns false.\n+\n+   function Is_Lower (Item : Wide_Character) return Boolean;\n+   pragma Inline (Is_Lower);\n+   --  Returns True if the Wide_Character designated by Item is categorized as\n+   --  letter_lowercase, otherwise returns false.\n+\n+   function Is_Upper (Item : Wide_Character) return Boolean;\n+   pragma Inline (Is_Upper);\n+   --  Returns True if the Wide_Character designated by Item is categorized as\n+   --  letter_uppercase, otherwise returns false.\n+\n+   function Is_Digit (Item : Wide_Character) return Boolean;\n+   pragma Inline (Is_Digit);\n+   --  Returns True if the Wide_Character designated by Item is categorized as\n+   --  number_decimal, otherwise returns false.\n+\n+   function Is_Decimal_Digit (Item : Wide_Character) return Boolean\n+     renames Is_Digit;\n+\n+   function Is_Hexadecimal_Digit (Item : Wide_Character) return Boolean;\n+   --  Returns True if the Wide_Character designated by Item is categorized as\n+   --  number_decimal, or is in the range 'A' .. 'F' or 'a' .. 'f', otherwise\n+   --  returns false.\n+\n+   function Is_Alphanumeric (Item : Wide_Character) return Boolean;\n+   pragma Inline (Is_Alphanumeric);\n+   --  Returns True if the Wide_Character designated by Item is categorized as\n+   --  number_decimal, or is in the range 'A' .. 'F' or 'a' .. 'f', otherwise\n+   --  returns false.\n+\n+   function Is_Special (Item : Wide_Character) return Boolean;\n+   pragma Inline (Is_Special);\n+   --  Returns True if the Wide_Character designated by Item is categorized\n+   --  as graphic_character, but not categorized as letter_uppercase,\n+   --  letter_lowercase, letter_titlecase, letter_modifier, letter_other,\n+   --  number_letter, or number_decimal. Otherwise returns false.\n+\n+   function Is_Line_Terminator (Item : Wide_Character) return Boolean;\n+   pragma Inline (Is_Line_Terminator);\n+   --  Returns True if the Wide_Character designated by Item is categorized as\n+   --  separator_line or separator_paragraph, or if Item is a conventional line\n+   --  terminator character (CR, LF, VT, or FF). Otherwise returns false.\n+\n+   function Is_Mark (Item : Wide_Character) return Boolean;\n+   pragma Inline (Is_Mark);\n+   --  Returns True if the Wide_Character designated by Item is categorized as\n+   --  mark_non_spacing or mark_spacing_combining, otherwise returns false.\n+\n+   function Is_Other (Item : Wide_Character) return Boolean;\n+   pragma Inline (Is_Other);\n+   --  Returns True if the Wide_Character designated by Item is categorized as\n+   --  other_format, otherwise returns false.\n+\n+   function Is_Punctuation (Item : Wide_Character) return Boolean;\n+   pragma Inline (Is_Punctuation);\n+   --  Returns True if the Wide_Character designated by Item is categorized as\n+   --  punctuation_connector, otherwise returns false.\n+\n+   function Is_Space (Item : Wide_Character) return Boolean;\n+   pragma Inline (Is_Space);\n+   --  Returns True if the Wide_Character designated by Item is categorized as\n+   --  separator_space, otherwise returns false.\n+\n+   function Is_Graphic (Item : Wide_Character) return Boolean;\n+   pragma Inline (Is_Graphic);\n+   --  Returns True if the Wide_Character designated by Item is categorized as\n+   --  graphic_character, otherwise returns false.\n+\n+   function To_Lower (Item : Wide_Character) return Wide_Character;\n+   pragma Inline (To_Lower);\n+   --  Returns the Simple Lowercase Mapping of the Wide_Character designated by\n+   --  Item. If the Simple Lowercase Mapping does not exist for the\n+   --  Wide_Character designated by Item, then the value of Item is returned.\n+\n+   function To_Lower (Item : Wide_String) return Wide_String;\n+   --  Returns the result of applying the To_Lower Wide_Character to\n+   --  Wide_Character conversion to each element of the Wide_String designated\n+   --  by Item. The result is the null Wide_String if the value of the formal\n+   --  parameter is the null Wide_String.\n+\n+   function To_Upper (Item : Wide_Character) return Wide_Character;\n+   pragma Inline (To_Upper);\n+   --  Returns the Simple Uppercase Mapping of the Wide_Character designated by\n+   --  Item. If the Simple Uppercase Mapping does not exist for the\n+   --  Wide_Character designated by Item, then the value of Item is returned.\n+\n+   function To_Upper (Item : Wide_String) return Wide_String;\n+   --  Returns the result of applying the To_Upper Wide_Character to\n+   --  Wide_Character conversion to each element of the Wide_String designated\n+   --  by Item. The result is the null Wide_String if the value of the formal\n+   --  parameter is the null Wide_String.\n+\n+end Ada.Wide_Characters.Handling;"}, {"sha": "b36d4a435d42a49e4ff665145f0ac86cf2dd7e10", "filename": "gcc/ada/a-wichun.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fa-wichun.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fa-wichun.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wichun.adb?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2005-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2005-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -149,6 +149,19 @@ package body Ada.Wide_Characters.Unicode is\n       return G.Is_UTF_32_Space (G.Category (C));\n    end Is_Space;\n \n+   -------------------\n+   -- To_Lower_Case --\n+   -------------------\n+\n+   function To_Lower_Case\n+     (U : Wide_Character) return Wide_Character\n+   is\n+   begin\n+      return\n+        Wide_Character'Val\n+          (G.UTF_32_To_Lower_Case (Wide_Character'Pos (U)));\n+   end To_Lower_Case;\n+\n    -------------------\n    -- To_Upper_Case --\n    -------------------"}, {"sha": "08ac83d6f67f331d01cfc59f376dc2cfa69ae82c", "filename": "gcc/ada/a-wichun.ads", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fa-wichun.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fa-wichun.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wichun.ads?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2005-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2005-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -176,7 +176,15 @@ package Ada.Wide_Characters.Unicode is\n    --  The following function is used to fold to upper case, as required by\n    --  the Ada 2005 standard rules for identifier case folding. Two\n    --  identifiers are equivalent if they are identical after folding all\n-   --  letters to upper case using this routine.\n+   --  letters to upper case using this routine. A corresponding function to\n+   --  fold to lower case is also provided.\n+\n+   function To_Lower_Case (U : Wide_Character) return Wide_Character;\n+   pragma Inline (To_Lower_Case);\n+   --  If U represents an upper case letter, returns the corresponding lower\n+   --  case letter, otherwise U is returned unchanged. The folding is locale\n+   --  independent as defined by documents referenced in the note in section\n+   --  1 of ISO/IEC 10646:2003\n \n    function To_Upper_Case (U : Wide_Character) return Wide_Character;\n    pragma Inline (To_Upper_Case);"}, {"sha": "836d334ebd95f37a90b1706e6971fdab8abd5adb", "filename": "gcc/ada/a-zchhan.adb", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fa-zchhan.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fa-zchhan.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-zchhan.adb?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -0,0 +1,186 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--    A D A . W I D E _ W I D E _ C H A R A C T E R S . H A N D L I N G     --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--            Copyright (C) 2010, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.Wide_Wide_Characters.Unicode; use Ada.Wide_Wide_Characters.Unicode;\n+\n+package body Ada.Wide_Wide_Characters.Handling is\n+\n+   ---------------------\n+   -- Is_Alphanumeric --\n+   ---------------------\n+\n+   function Is_Alphanumeric (Item : Wide_Wide_Character) return Boolean is\n+   begin\n+      return Is_Letter (Item) or else Is_Digit (Item);\n+   end Is_Alphanumeric;\n+\n+   ----------------\n+   -- Is_Control --\n+   ----------------\n+\n+   function Is_Control (Item : Wide_Wide_Character) return Boolean is\n+   begin\n+      return Get_Category (Item) = Cc;\n+   end Is_Control;\n+\n+   --------------\n+   -- Is_Digit --\n+   --------------\n+\n+   function Is_Digit (Item : Wide_Wide_Character) return Boolean\n+     renames Ada.Wide_Wide_Characters.Unicode.Is_Digit;\n+\n+   ----------------\n+   -- Is_Graphic --\n+   ----------------\n+\n+   function Is_Graphic (Item : Wide_Wide_Character) return Boolean is\n+   begin\n+      return not Is_Non_Graphic (Item);\n+   end Is_Graphic;\n+\n+   --------------------------\n+   -- Is_Hexadecimal_Digit --\n+   --------------------------\n+\n+   function Is_Hexadecimal_Digit (Item : Wide_Wide_Character) return Boolean is\n+   begin\n+      return Is_Digit (Item)\n+        or else Item in 'A' .. 'F'\n+        or else Item in 'a' .. 'f';\n+   end Is_Hexadecimal_Digit;\n+\n+   ---------------\n+   -- Is_Letter --\n+   ---------------\n+\n+   function Is_Letter (Item : Wide_Wide_Character) return Boolean\n+     renames Ada.Wide_Wide_Characters.Unicode.Is_Letter;\n+\n+   ------------------------\n+   -- Is_Line_Terminator --\n+   ------------------------\n+\n+   function Is_Line_Terminator (Item : Wide_Wide_Character) return Boolean\n+     renames Ada.Wide_Wide_Characters.Unicode.Is_Line_Terminator;\n+\n+   --------------\n+   -- Is_Lower --\n+   --------------\n+\n+   function Is_Lower (Item : Wide_Wide_Character) return Boolean is\n+   begin\n+      return Get_Category (Item) = Ll;\n+   end Is_Lower;\n+\n+   -------------\n+   -- Is_Mark --\n+   -------------\n+\n+   function Is_Mark (Item : Wide_Wide_Character) return Boolean\n+     renames Ada.Wide_Wide_Characters.Unicode.Is_Mark;\n+\n+   --------------\n+   -- Is_Other --\n+   --------------\n+\n+   function Is_Other (Item : Wide_Wide_Character) return Boolean\n+     renames Ada.Wide_Wide_Characters.Unicode.Is_Other;\n+\n+   --------------------\n+   -- Is_Punctuation --\n+   --------------------\n+\n+   function Is_Punctuation (Item : Wide_Wide_Character) return Boolean\n+     renames Ada.Wide_Wide_Characters.Unicode.Is_Punctuation;\n+\n+   --------------\n+   -- Is_Space --\n+   --------------\n+\n+   function Is_Space (Item : Wide_Wide_Character) return Boolean\n+     renames Ada.Wide_Wide_Characters.Unicode.Is_Space;\n+\n+   ----------------\n+   -- Is_Special --\n+   ----------------\n+\n+   function Is_Special (Item : Wide_Wide_Character) return Boolean is\n+   begin\n+      return Is_Graphic (Item) and then not Is_Alphanumeric (Item);\n+   end Is_Special;\n+\n+   --------------\n+   -- Is_Upper --\n+   --------------\n+\n+   function Is_Upper (Item : Wide_Wide_Character) return Boolean is\n+   begin\n+      return Get_Category (Item) = Lu;\n+   end Is_Upper;\n+\n+   --------------\n+   -- To_Lower --\n+   --------------\n+\n+   function To_Lower (Item : Wide_Wide_Character) return Wide_Wide_Character\n+     renames Ada.Wide_Wide_Characters.Unicode.To_Lower_Case;\n+\n+   function To_Lower (Item : Wide_Wide_String) return Wide_Wide_String is\n+      Result : Wide_Wide_String (Item'Range);\n+\n+   begin\n+      for J in Result'Range loop\n+         Result (J) := To_Lower (Item (J));\n+      end loop;\n+\n+      return Result;\n+   end To_Lower;\n+\n+   --------------\n+   -- To_Upper --\n+   --------------\n+\n+   function To_Upper (Item : Wide_Wide_Character) return Wide_Wide_Character\n+     renames Ada.Wide_Wide_Characters.Unicode.To_Upper_Case;\n+\n+   function To_Upper (Item : Wide_Wide_String) return Wide_Wide_String is\n+      Result : Wide_Wide_String (Item'Range);\n+\n+   begin\n+      for J in Result'Range loop\n+         Result (J) := To_Upper (Item (J));\n+      end loop;\n+\n+      return Result;\n+   end To_Upper;\n+\n+end Ada.Wide_Wide_Characters.Handling;"}, {"sha": "973a7803dce229e40a82ea4d82ba3c132d5d3203", "filename": "gcc/ada/a-zchhan.ads", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fa-zchhan.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fa-zchhan.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-zchhan.ads?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -0,0 +1,126 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--    A D A . W I D E _ W I D E _ C H A R A C T E R S . H A N D L I N G     --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT.  In accordance with the copyright of that document, you can freely --\n+-- copy and modify this specification,  provided that if you redistribute a --\n+-- modified version,  any changes that you have made are clearly indicated. --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package Ada.Wide_Wide_Characters.Handling is\n+\n+   function Is_Control (Item : Wide_Wide_Character) return Boolean;\n+   pragma Inline (Is_Control);\n+   --  Returns True if the Wide_Wide_Character designated by Item is\n+   --  categorized as other_control, otherwise returns false.\n+\n+   function Is_Letter (Item : Wide_Wide_Character) return Boolean;\n+   pragma Inline (Is_Letter);\n+   --  Returns True if the Wide_Wide_Character designated by Item is\n+   --  categorized as letter_uppercase, letter_lowercase, letter_titlecase,\n+   --  letter_modifier, letter_other, or number_letter. Otherwise returns\n+   --  false.\n+\n+   function Is_Lower (Item : Wide_Wide_Character) return Boolean;\n+   pragma Inline (Is_Lower);\n+   --  Returns True if the Wide_Wide_Character designated by Item is\n+   --  categorized as letter_lowercase, otherwise returns false.\n+\n+   function Is_Upper (Item : Wide_Wide_Character) return Boolean;\n+   pragma Inline (Is_Upper);\n+   --  Returns True if the Wide_Wide_Character designated by Item is\n+   --  categorized as letter_uppercase, otherwise returns false.\n+\n+   function Is_Digit (Item : Wide_Wide_Character) return Boolean;\n+   pragma Inline (Is_Digit);\n+   --  Returns True if the Wide_Wide_Character designated by Item is\n+   --  categorized as number_decimal, otherwise returns false.\n+\n+   function Is_Decimal_Digit (Item : Wide_Wide_Character) return Boolean\n+     renames Is_Digit;\n+\n+   function Is_Hexadecimal_Digit (Item : Wide_Wide_Character) return Boolean;\n+   --  Returns True if the Wide_Wide_Character designated by Item is\n+   --  categorized as number_decimal, or is in the range 'A' .. 'F' or\n+   --  'a' .. 'f', otherwise returns false.\n+\n+   function Is_Alphanumeric (Item : Wide_Wide_Character) return Boolean;\n+   pragma Inline (Is_Alphanumeric);\n+   --  Returns True if the Wide_Wide_Character designated by Item is\n+   --  categorized as letter_uppercase, letter_lowercase, letter_titlecase,\n+   --  letter_modifier, letter_other, number_letter, or number_decimal.\n+   --  Otherwise returns false.\n+\n+   function Is_Special (Item : Wide_Wide_Character) return Boolean;\n+   pragma Inline (Is_Special);\n+   --  Returns True if the Wide_Wide_Character designated by Item\n+   --  is categorized as graphic_character, but not categorized as\n+   --  letter_uppercase, letter_lowercase, letter_titlecase, letter_modifier,\n+   --  letter_other, number_letter, or number_decimal. Otherwise returns false.\n+\n+   function Is_Line_Terminator (Item : Wide_Wide_Character) return Boolean;\n+   pragma Inline (Is_Line_Terminator);\n+   --  Returns True if the Wide_Wide_Character designated by Item is\n+   --  categorized as separator_line or separator_paragraph, or if Item is a\n+   --  conventional line terminator character (CR, LF, VT, or FF). Otherwise\n+   --  returns false.\n+\n+   function Is_Mark (Item : Wide_Wide_Character) return Boolean;\n+   pragma Inline (Is_Mark);\n+   --  Returns True if the Wide_Wide_Character designated by Item is\n+   --  categorized as mark_non_spacing or mark_spacing_combining, otherwise\n+   --  returns false.\n+\n+   function Is_Other (Item : Wide_Wide_Character) return Boolean;\n+   pragma Inline (Is_Other);\n+   --  Returns True if the Wide_Wide_Character designated by Item is\n+   --  categorized as other_format, otherwise returns false.\n+\n+   function Is_Punctuation (Item : Wide_Wide_Character) return Boolean;\n+   pragma Inline (Is_Punctuation);\n+   --  Returns True if the Wide_Wide_Character designated by Item is\n+   --  categorized as punctuation_connector, otherwise returns false.\n+\n+   function Is_Space (Item : Wide_Wide_Character) return Boolean;\n+   pragma Inline (Is_Space);\n+   --  Returns True if the Wide_Wide_Character designated by Item is\n+   --  categorized as separator_space, otherwise returns false.\n+\n+   function Is_Graphic (Item : Wide_Wide_Character) return Boolean;\n+   pragma Inline (Is_Graphic);\n+   --  Returns True if the Wide_Wide_Character designated by Item is\n+   --  categorized as graphic_character, otherwise returns false.\n+\n+   function To_Lower (Item : Wide_Wide_Character) return Wide_Wide_Character;\n+   pragma Inline (To_Lower);\n+   --  Returns the Simple Lowercase Mapping of the Wide_Wide_Character\n+   --  designated by Item. If the Simple Lowercase Mapping does not exist for\n+   --  the Wide_Wide_Character designated by Item, then the value of Item is\n+   --  returned.\n+\n+   function To_Lower (Item : Wide_Wide_String) return Wide_Wide_String;\n+   --  Returns the result of applying the To_Lower Wide_Wide_Character to\n+   --  Wide_Wide_Character conversion to each element of the Wide_Wide_String\n+   --  designated by Item. The result is the null Wide_Wide_String if the value\n+   --  of the formal parameter is the null Wide_Wide_String.\n+\n+   function To_Upper (Item : Wide_Wide_Character) return Wide_Wide_Character;\n+   pragma Inline (To_Upper);\n+   --  Returns the Simple Uppercase Mapping of the Wide_Wide_Character\n+   --  designated by Item. If the Simple Uppercase Mapping does not exist for\n+   --  the Wide_Wide_Character designated by Item, then the value of Item is\n+   --  returned.\n+\n+   function To_Upper (Item : Wide_Wide_String) return Wide_Wide_String;\n+   --  Returns the result of applying the To_Upper Wide_Wide_Character to\n+   --  Wide_Wide_Character conversion to each element of the Wide_Wide_String\n+   --  designated by Item. The result is the null Wide_Wide_String if the value\n+   --  of the formal parameter is the null Wide_Wide_String.\n+\n+end Ada.Wide_Wide_Characters.Handling;"}, {"sha": "5e0b1cbdc2690d3fc3e23714cca0a6aa571d28a3", "filename": "gcc/ada/a-zchuni.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fa-zchuni.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fa-zchuni.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-zchuni.adb?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2005-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2005-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -149,6 +149,19 @@ package body Ada.Wide_Wide_Characters.Unicode is\n       return G.Is_UTF_32_Space (G.Category (C));\n    end Is_Space;\n \n+   -------------------\n+   -- To_Lower_Case --\n+   -------------------\n+\n+   function To_Lower_Case\n+     (U : Wide_Wide_Character) return Wide_Wide_Character\n+   is\n+   begin\n+      return\n+        Wide_Wide_Character'Val\n+          (G.UTF_32_To_Lower_Case (Wide_Wide_Character'Pos (U)));\n+   end To_Lower_Case;\n+\n    -------------------\n    -- To_Upper_Case --\n    -------------------"}, {"sha": "10506957a295c06565746f726a7a405c9b8631bd", "filename": "gcc/ada/a-zchuni.ads", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fa-zchuni.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fa-zchuni.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-zchuni.ads?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2005-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2005-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -173,7 +173,16 @@ package Ada.Wide_Wide_Characters.Unicode is\n    --  The following function is used to fold to upper case, as required by\n    --  the Ada 2005 standard rules for identifier case folding. Two\n    --  identifiers are equivalent if they are identical after folding all\n-   --  letters to upper case using this routine.\n+   --  letters to upper case using this routine. A fold to lower routine is\n+   --  also provided.\n+\n+   function To_Lower_Case\n+     (U : Wide_Wide_Character) return Wide_Wide_Character;\n+   pragma Inline (To_Lower_Case);\n+   --  If U represents an upper case letter, returns the corresponding lower\n+   --  case letter, otherwise U is returned unchanged. The folding is locale\n+   --  independent as defined by documents referenced in the note in section\n+   --  1 of ISO/IEC 10646:2003\n \n    function To_Upper_Case\n      (U : Wide_Wide_Character) return Wide_Wide_Character;"}, {"sha": "41de2b5ffe0d17369c11fe4a1f5ba835ddf1e7c4", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -2193,7 +2193,14 @@ package body Exp_Ch4 is\n             begin\n                Prim := First_Elmt (Collect_Primitive_Operations (Full_Type));\n                while Present (Prim) loop\n-                  if Chars (Node (Prim)) = Name_Op_Eq then\n+\n+                  --  Locate primitive equality with the right signature\n+\n+                  if Chars (Node (Prim)) = Name_Op_Eq\n+                    and then Etype (First_Formal (Node (Prim))) =\n+                               Etype (Next_Formal (First_Formal (Node (Prim))))\n+                    and then Etype (Node (Prim)) = Standard_Boolean\n+                  then\n                      if Is_Abstract_Subprogram (Node (Prim)) then\n                         return\n                           Make_Raise_Program_Error (Loc,"}, {"sha": "b1f96e9398fd582bccdc841ac24f3bcf8401d039", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -2451,11 +2451,15 @@ package body Exp_Util is\n                return;\n \n             --  Case of appearing within an Expressions_With_Actions node. We\n-            --  prepend the actions to the list of actions already there.\n+            --  prepend the actions to the list of actions already there, if\n+            --  the node has not been analyzed yet. Otherwise find insertion\n+            --  location further up the tree.\n \n             when N_Expression_With_Actions =>\n-               Prepend_List (Ins_Actions, Actions (P));\n-               return;\n+               if not Analyzed (P) then\n+                  Prepend_List (Ins_Actions, Actions (P));\n+                  return;\n+               end if;\n \n             --  Case of appearing in the condition of a while expression or\n             --  elsif. We insert the actions into the Condition_Actions field."}, {"sha": "ae154fc215e5573db2ac9fff2bc847f85e5a19e8", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -6980,10 +6980,12 @@ may generally be compiled using this switch (see the description of the\n @option{-gnat83} and @option{-gnat95} switches for further\n information).\n \n+@ifset PROEDITION\n Note that even though Ada 2005 is the current official version of the\n language, GNAT still compiles in Ada 95 mode by default, so if you are\n using Ada 2005 features in your program, you must use this switch (or\n the equivalent Ada_05 or Ada_2005 configuration pragmas).\n+@end ifset\n \n @item -gnat12 or -gnat2012 (Ada 2012 mode)\n @cindex @option{-gnat12} (@command{gcc})"}, {"sha": "2b6f31922016b5bd6dc1cc2c38e8a6fd3560be45", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -177,6 +177,7 @@ package body Impunit is\n       --  harmless (and useful) to make then available in Ada 95 mode, since\n       --  they do not deal with Wide_Wide_Character.\n \n+     \"a-wichha\",    -- Ada.Wide_Characters.Handling\n      \"a-stuten\",    -- Ada.Strings.UTF_Encoding\n      \"a-suenco\",    -- Ada.Strings.UTF_Encoding.Conversions\n      \"a-suesen\",    -- Ada.Strings.UTF_Encoding.String_Encoding\n@@ -426,6 +427,7 @@ package body Impunit is\n      \"a-wwboio\",    -- Ada.Wide_Text_IO.Wide_Bounded_IO\n      \"a-wwunio\",    -- Ada.Wide_Text_IO.Wide_Unbounded_IO\n      \"a-zchara\",    -- Ada.Wide_Wide_Characters\n+     \"a-zchhan\",    -- Ada.Wide_Wide_Characters.Handling\n      \"a-ztcoio\",    -- Ada.Wide_Wide_Text_IO.Complex_IO\n      \"a-ztedit\",    -- Ada.Wide_Wide_Text_IO.Editing\n      \"a-zttest\",    -- Ada.Wide_Wide_Text_IO.Text_Streams"}, {"sha": "567f1269510468d6fe03536374ca1382c2555593", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -1843,7 +1843,7 @@ package body Make is\n \n             elsif not Read_Only and then Main_Project /= No_Project then\n \n-               if not Check_Source_Info_In_ALI (ALI) then\n+               if not Check_Source_Info_In_ALI (ALI, Project_Tree) then\n                   ALI := No_ALI_Id;\n                   return;\n                end if;"}, {"sha": "1ac84a2b3f894f920392f24404d8214c5136026d", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -203,7 +203,10 @@ package body Makeutl is\n    -- Check_Source_Info_In_ALI --\n    ------------------------------\n \n-   function Check_Source_Info_In_ALI (The_ALI : ALI_Id) return Boolean is\n+   function Check_Source_Info_In_ALI\n+     (The_ALI : ALI_Id;\n+      Tree    : Project_Tree_Ref) return Boolean\n+   is\n       Unit_Name : Name_Id;\n \n    begin\n@@ -242,7 +245,7 @@ package body Makeutl is\n          end loop;\n       end loop;\n \n-      --  Loop to check subunits\n+      --  Loop to check subunits and replaced sources\n \n       for D in ALIs.Table (The_ALI).First_Sdep ..\n                ALIs.Table (The_ALI).Last_Sdep\n@@ -253,8 +256,32 @@ package body Makeutl is\n          begin\n             Unit_Name := SD.Subunit_Name;\n \n-            if Unit_Name /= No_Name then\n+            if Unit_Name = No_Name then\n+               --  Check if this source file has been replaced by a source with\n+               --  a different file name.\n+\n+               if Tree /= null and then Tree.Replaced_Source_Number > 0 then\n+                  declare\n+                     Replacement : constant File_Name_Type :=\n+                       Replaced_Source_HTable.Get\n+                         (Tree.Replaced_Sources, SD.Sfile);\n+\n+                  begin\n+                     if Replacement /= No_File then\n+                        if Verbose_Mode then\n+                           Write_Line\n+                             (\"source file\" &\n+                              Get_Name_String (SD.Sfile) &\n+                              \" has been replaced by \" &\n+                              Get_Name_String (Replacement));\n+                        end if;\n \n+                        return False;\n+                     end if;\n+                  end;\n+               end if;\n+\n+            else\n                --  For separates, the file is no longer associated with the\n                --  unit (\"proc-sep.adb\" is not associated with unit \"proc.sep\")\n                --  so we need to check whether the source file still exists in"}, {"sha": "5ba084a00042c7af5f4ea49ea25d74bca29b8526", "filename": "gcc/ada/makeutl.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fmakeutl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fmakeutl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.ads?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -105,7 +105,9 @@ package Makeutl is\n    --  True if the unit is in one of the project file, but the file name is not\n    --  one of its source. Returns False otherwise.\n \n-   function Check_Source_Info_In_ALI (The_ALI : ALI.ALI_Id) return Boolean;\n+   function Check_Source_Info_In_ALI\n+     (The_ALI : ALI.ALI_Id;\n+      Tree    : Project_Tree_Ref) return Boolean;\n    --  Check whether all file references in ALI are still valid (i.e. the\n    --  source files are still associated with the same units). Return True\n    --  if everything is still valid."}, {"sha": "17e1c3de8df52eb8a3c521f51d57368686283500", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -78,6 +78,9 @@ package Opt is\n    --  GNAT\n    --  Default Ada version if no switch given. The Warnings off is to kill\n    --  constant condition warnings.\n+   --\n+   --  WARNING: some scripts rely on the format of this line of code. Any\n+   --  change must be coordinated with the scripts requirements.\n \n    Ada_Version : Ada_Version_Type := Ada_Version_Default;\n    --  GNAT"}, {"sha": "82c74f52948408602a039c5518d28991c1f54901", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -482,7 +482,8 @@ package body Prj.Nmsc is\n    --  if file cannot be found.\n \n    procedure Remove_Source\n-     (Id          : Source_Id;\n+     (Tree        : Project_Tree_Ref;\n+      Id          : Source_Id;\n       Replaced_By : Source_Id);\n    --  Remove a file from the list of sources of a project. This might be\n    --  because the file is replaced by another one in an extending project,\n@@ -872,7 +873,16 @@ package body Prj.Nmsc is\n       Lang_Id.First_Source := Id;\n \n       if Source_To_Replace /= No_Source then\n-         Remove_Source (Source_To_Replace, Id);\n+         Remove_Source (Data.Tree, Source_To_Replace, Id);\n+      end if;\n+\n+      if Data.Tree.Replaced_Source_Number > 0 and then\n+         Replaced_Source_HTable.Get (Data.Tree.Replaced_Sources, Id.File) /=\n+           No_File\n+      then\n+         Replaced_Source_HTable.Remove (Data.Tree.Replaced_Sources, Id.File);\n+         Data.Tree.Replaced_Source_Number :=\n+           Data.Tree.Replaced_Source_Number - 1;\n       end if;\n \n       Files_Htable.Set (Data.File_To_Source, File_Name, Id);\n@@ -6193,7 +6203,7 @@ package body Prj.Nmsc is\n                           (Project.Source_Names,\n                            Source.File,\n                            No_Name_Location);\n-                        Remove_Source (Source, No_Source);\n+                        Remove_Source (Data.Tree, Source, No_Source);\n \n                         Error_Msg_Name_1 := Name_Id (Source.File);\n                         Error_Msg\n@@ -6277,7 +6287,7 @@ package body Prj.Nmsc is\n                end if;\n \n                if Source.Path = No_Path_Information then\n-                  Remove_Source (Source, No_Source);\n+                  Remove_Source (Data.Tree, Source, No_Source);\n                end if;\n             end if;\n \n@@ -7589,7 +7599,8 @@ package body Prj.Nmsc is\n    -------------------\n \n    procedure Remove_Source\n-     (Id          : Source_Id;\n+     (Tree        : Project_Tree_Ref;\n+      Id          : Source_Id;\n       Replaced_By : Source_Id)\n    is\n       Source : Source_Id;\n@@ -7609,6 +7620,21 @@ package body Prj.Nmsc is\n       if Replaced_By /= No_Source then\n          Id.Replaced_By := Replaced_By;\n          Replaced_By.Declared_In_Interfaces := Id.Declared_In_Interfaces;\n+\n+         if Id.File /= Replaced_By.File then\n+            declare\n+               Replacement : constant File_Name_Type :=\n+                 Replaced_Source_HTable.Get (Tree.Replaced_Sources, Id.File);\n+            begin\n+               Replaced_Source_HTable.Set\n+                 (Tree.Replaced_Sources, Id.File, Replaced_By.File);\n+\n+               if Replacement = No_File then\n+                  Tree.Replaced_Source_Number :=\n+                    Tree.Replaced_Source_Number + 1;\n+               end if;\n+            end;\n+         end if;\n       end if;\n \n       Id.In_Interfaces := False;"}, {"sha": "5a69848a8087bd8ed3ff6a41c658a8591205264d", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -898,6 +898,9 @@ package body Prj is\n       Array_Table.Init              (Tree.Arrays);\n       Package_Table.Init            (Tree.Packages);\n       Source_Paths_Htable.Reset     (Tree.Source_Paths_HT);\n+      Replaced_Source_HTable.Reset  (Tree.Replaced_Sources);\n+\n+      Tree.Replaced_Source_Number := 0;\n \n       Free_List (Tree.Projects, Free_Project => True);\n       Free_Units (Tree.Units_HT);"}, {"sha": "4fc6c93a66915afbd0d7fdd94829ba29aed3b4c4", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -1333,6 +1333,14 @@ package Prj is\n    -- Project_Tree_Data --\n    -----------------------\n \n+   package Replaced_Source_HTable is new Simple_HTable\n+     (Header_Num => Header_Num,\n+      Element    => File_Name_Type,\n+      No_Element => No_File,\n+      Key        => File_Name_Type,\n+      Hash       => Hash,\n+      Equal      => \"=\");\n+\n    type Private_Project_Tree_Data is private;\n    --  Data for a project tree that is used only by the Project Manager\n \n@@ -1347,6 +1355,13 @@ package Prj is\n          Packages          : Package_Table.Instance;\n          Projects          : Project_List;\n \n+         Replaced_Sources  : Replaced_Source_HTable.Instance;\n+         --  The list of sources that have been replaced by sources with\n+         --  different file names.\n+\n+         Replaced_Source_Number : Natural := 0;\n+         --  The number of entries in Replaced_Sources\n+\n          Units_HT : Units_Htable.Instance;\n          --  Unit name to Unit_Index (and from there so Source_Id)\n "}, {"sha": "a583ddece6953caf0d0eb38292e1c07348b5e5be", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -2506,16 +2506,16 @@ package body Sem_Ch13 is\n    --  for the remainder of this processing.\n \n    procedure Analyze_Record_Representation_Clause (N : Node_Id) is\n-      Ident   : constant Node_Id    := Identifier (N);\n-      Rectype : Entity_Id;\n+      Ident   : constant Node_Id := Identifier (N);\n+      Biased  : Boolean;\n       CC      : Node_Id;\n-      Posit   : Uint;\n+      Comp    : Entity_Id;\n       Fbit    : Uint;\n-      Lbit    : Uint;\n       Hbit    : Uint := Uint_0;\n-      Comp    : Entity_Id;\n+      Lbit    : Uint;\n       Ocomp   : Entity_Id;\n-      Biased  : Boolean;\n+      Posit   : Uint;\n+      Rectype : Entity_Id;\n \n       CR_Pragma : Node_Id := Empty;\n       --  Points to N_Pragma node if Complete_Representation pragma present\n@@ -2543,10 +2543,6 @@ package body Sem_Ch13 is\n            (\"record type required, found}\", Ident, First_Subtype (Rectype));\n          return;\n \n-      elsif Is_Unchecked_Union (Rectype) then\n-         Error_Msg_N\n-           (\"record rep clause not allowed for Unchecked_Union\", N);\n-\n       elsif Scope (Rectype) /= Current_Scope then\n          Error_Msg_N (\"type must be declared in this scope\", N);\n          return;\n@@ -2722,6 +2718,24 @@ package body Sem_Ch13 is\n                      Error_Msg_N\n                        (\"component clause is for non-existent field\", CC);\n \n+                  --  Ada 2012 (AI05-0026): Any name that denotes a\n+                  --  discriminant of an object of an unchecked union type\n+                  --  shall not occur within a record_representation_clause.\n+\n+                  --  The general restriction of using record rep clauses on\n+                  --  Unchecked_Union types has now been lifted. Since it is\n+                  --  possible to introduce a record rep clause which mentions\n+                  --  the discriminant of an Unchecked_Union in non-Ada 2012\n+                  --  code, this check is applied to all versions of the\n+                  --  language.\n+\n+                  elsif Ekind (Comp) = E_Discriminant\n+                    and then Is_Unchecked_Union (Rectype)\n+                  then\n+                     Error_Msg_N\n+                       (\"cannot reference discriminant of Unchecked_Union\",\n+                        Component_Name (CC));\n+\n                   elsif Present (Component_Clause (Comp)) then\n \n                      --  Diagnose duplicate rep clause, or check consistency"}, {"sha": "9af2e5c96a29d5fa0758156f6544f973c4e31d59", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -939,6 +939,16 @@ package body Sem_Elab is\n                  Make_Attribute_Reference (Loc,\n                    Attribute_Name => Name_Elaborated,\n                    Prefix => New_Occurrence_Of (Spec_Entity (E_Scope), Loc)));\n+\n+               --  Prevent duplicate elaboration checks on the same call,\n+               --  which can happen if the body enclosing the call appears\n+               --  itself in a call whose elaboration check is delayed.\n+\n+               if\n+                 Nkind_In (N, N_Function_Call, N_Procedure_Call_Statement)\n+               then\n+                  Set_No_Elaboration_Check (N);\n+               end if;\n             end if;\n \n          --  Case of static elaboration model"}, {"sha": "64724c92427d908cc99195ae3c047a6c0678f031", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 85, "deletions": 37, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -37,6 +37,7 @@ with Debug;    use Debug;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n with Errout;   use Errout;\n+with Exp_Ch7;  use Exp_Ch7;\n with Exp_Dist; use Exp_Dist;\n with Lib;      use Lib;\n with Lib.Writ; use Lib.Writ;\n@@ -392,9 +393,14 @@ package body Sem_Prag is\n       procedure Check_At_Most_N_Arguments (N : Nat);\n       --  Check there are no more than N arguments present\n \n-      procedure Check_Component (Comp : Node_Id);\n-      --  Examine Unchecked_Union component for correct use of per-object\n+      procedure Check_Component\n+        (Comp            : Node_Id;\n+         UU_Typ          : Entity_Id;\n+         In_Variant_Part : Boolean := False);\n+      --  Examine an Unchecked_Union component for correct use of per-object\n       --  constrained subtypes, and for restrictions on finalizable components.\n+      --  UU_Typ is the related Unchecked_Union type. Flag In_Variant_Part\n+      --  should be set when Comp comes from a record variant.\n \n       procedure Check_Duplicated_Export_Name (Nam : Node_Id);\n       --  Nam is an N_String_Literal node containing the external name set by\n@@ -483,9 +489,10 @@ package body Sem_Prag is\n       --  and to library level instantiations), and they are simply ignored,\n       --  which is implemented by rewriting them as null statements.\n \n-      procedure Check_Variant (Variant : Node_Id);\n-      --  Check Unchecked_Union variant for lack of nested variants and\n-      --  presence of at least one component.\n+      procedure Check_Variant (Variant : Node_Id; UU_Typ : Entity_Id);\n+      --  Check an Unchecked_Union variant for lack of nested variants and\n+      --  presence of at least one component. UU_Typ is the related Unchecked_\n+      --  Union type.\n \n       procedure Error_Pragma (Msg : String);\n       pragma No_Return (Error_Pragma);\n@@ -1094,39 +1101,80 @@ package body Sem_Prag is\n       -- Check_Component --\n       ---------------------\n \n-      procedure Check_Component (Comp : Node_Id) is\n-      begin\n-         if Nkind (Comp) = N_Component_Declaration then\n-            declare\n-               Sindic : constant Node_Id :=\n-                          Subtype_Indication (Component_Definition (Comp));\n-               Typ    : constant Entity_Id :=\n-                          Etype (Defining_Identifier (Comp));\n-            begin\n-               if Nkind (Sindic) = N_Subtype_Indication then\n+      procedure Check_Component\n+        (Comp            : Node_Id;\n+         UU_Typ          : Entity_Id;\n+         In_Variant_Part : Boolean := False)\n+      is\n+         Comp_Id : constant Entity_Id := Defining_Identifier (Comp);\n+         Sindic  : constant Node_Id :=\n+                     Subtype_Indication (Component_Definition (Comp));\n+         Typ     : constant Entity_Id := Etype (Comp_Id);\n \n-                  --  Ada 2005 (AI-216): If a component subtype is subject to\n-                  --  a per-object constraint, then the component type shall\n-                  --  be an Unchecked_Union.\n+         function Inside_Generic_Body (Id : Entity_Id) return Boolean;\n+         --  Determine whether entity Id appears inside a generic body\n \n-                  if Has_Per_Object_Constraint (Defining_Identifier (Comp))\n-                    and then\n-                      not Is_Unchecked_Union (Etype (Subtype_Mark (Sindic)))\n-                  then\n-                     Error_Msg_N (\"component subtype subject to per-object\" &\n-                       \" constraint must be an Unchecked_Union\", Comp);\n-                  end if;\n-               end if;\n+         -------------------------\n+         -- Inside_Generic_Body --\n+         -------------------------\n \n-               if Is_Controlled (Typ) then\n-                  Error_Msg_N\n-                   (\"component of unchecked union cannot be controlled\", Comp);\n+         function Inside_Generic_Body (Id : Entity_Id) return Boolean is\n+            S : Entity_Id := Id;\n \n-               elsif Has_Task (Typ) then\n-                  Error_Msg_N\n-                   (\"component of unchecked union cannot have tasks\", Comp);\n+         begin\n+            while Present (S)\n+              and then S /= Standard_Standard\n+            loop\n+               if Ekind (S) = E_Generic_Package\n+                 and then In_Package_Body (S)\n+               then\n+                  return True;\n                end if;\n-            end;\n+\n+               S := Scope (S);\n+            end loop;\n+\n+            return False;\n+         end Inside_Generic_Body;\n+\n+      --  Start of processing for Check_Component\n+\n+      begin\n+         --  Ada 2005 (AI-216): If a component subtype is subject to a per-\n+         --  object constraint, then the component type shall be an Unchecked_\n+         --  Union.\n+\n+         if Nkind (Sindic) = N_Subtype_Indication\n+           and then Has_Per_Object_Constraint (Comp_Id)\n+           and then not Is_Unchecked_Union (Etype (Subtype_Mark (Sindic)))\n+         then\n+            Error_Msg_N\n+              (\"component subtype subject to per-object constraint \" &\n+               \"must be an Unchecked_Union\", Comp);\n+\n+         --  Ada 2012 (AI05-0026): For an unchecked union type declared within\n+         --  the body of a generic unit, or within the body of any of its\n+         --  descendant library units, no part of the type of a component\n+         --  declared in a variant_part of the unchecked union type shall be of\n+         --  a formal private type or formal private extension declared within\n+         --  the formal part of the generic unit.\n+\n+         elsif Ada_Version >= Ada_2012\n+           and then Inside_Generic_Body (UU_Typ)\n+           and then In_Variant_Part\n+           and then Is_Private_Type (Typ)\n+           and then Is_Generic_Type (Typ)\n+         then\n+            Error_Msg_N\n+              (\"component of Unchecked_Union cannot be of generic type\", Comp);\n+\n+         elsif Needs_Finalization (Typ) then\n+            Error_Msg_N\n+              (\"component of Unchecked_Union cannot be controlled\", Comp);\n+\n+         elsif Has_Task (Typ) then\n+            Error_Msg_N\n+              (\"component of Unchecked_Union cannot have tasks\", Comp);\n          end if;\n       end Check_Component;\n \n@@ -1698,7 +1746,7 @@ package body Sem_Prag is\n       -- Check_Variant --\n       -------------------\n \n-      procedure Check_Variant (Variant : Node_Id) is\n+      procedure Check_Variant (Variant : Node_Id; UU_Typ : Entity_Id) is\n          Clist : constant Node_Id := Component_List (Variant);\n          Comp  : Node_Id;\n \n@@ -1712,7 +1760,7 @@ package body Sem_Prag is\n \n          Comp := First (Component_Items (Clist));\n          while Present (Comp) loop\n-            Check_Component (Comp);\n+            Check_Component (Comp, UU_Typ, In_Variant_Part => True);\n             Next (Comp);\n          end loop;\n       end Check_Variant;\n@@ -11971,7 +12019,7 @@ package body Sem_Prag is\n \n                Comp := First (Component_Items (Clist));\n                while Present (Comp) loop\n-                  Check_Component (Comp);\n+                  Check_Component (Comp, Typ);\n                   Next (Comp);\n                end loop;\n \n@@ -11986,7 +12034,7 @@ package body Sem_Prag is\n \n                Variant := First (Variants (Vpart));\n                while Present (Variant) loop\n-                  Check_Variant (Variant);\n+                  Check_Variant (Variant, Typ);\n                   Next (Variant);\n                end loop;\n             end if;"}, {"sha": "84576770ec85939d148748a7df94e8b5bb95467c", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e9f2b94d238dedc6f1c9421e89826db6ddffdc/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=72e9f2b94d238dedc6f1c9421e89826db6ddffdc", "patch": "@@ -1150,7 +1150,7 @@ package body Sem_Res is\n    begin\n       return Ekind (Btyp) = E_Access_Type\n         or else (Ekind (Btyp) = E_Access_Subprogram_Type\n-                   and then Comes_From_Source (Btyp));\n+                  and then Comes_From_Source (Btyp));\n    end Is_Definite_Access_Type;\n \n    ----------------------"}]}