{"sha": "acbab5bf1cba27e01f837ead3060f0f7ad609bbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNiYWI1YmYxY2JhMjdlMDFmODM3ZWFkMzA2MGYwZjdhZDYwOWJiZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-18T10:51:13Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-18T10:51:13Z"}, "message": "basic_string.h (c_str()): Simplify, due to 21.3.4 the internal representation is always kept null-terminated.\n\n2004-01-18  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.h (c_str()): Simplify, due to\n\t21.3.4 the internal representation is always kept null-terminated.\n\t* include/bits/basic_string.tcc (_M_clone): Null-terminate.\n\t* testsuite/21_strings/basic_string/element_access/char/4.cc: New.\n\t* testsuite/21_strings/basic_string/element_access/wchar_t/4.cc: Ditto.\n\nFrom-SVN: r76092", "tree": {"sha": "458444ccb1b5f0e88dd4126c4113a0638daa4107", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/458444ccb1b5f0e88dd4126c4113a0638daa4107"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acbab5bf1cba27e01f837ead3060f0f7ad609bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acbab5bf1cba27e01f837ead3060f0f7ad609bbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acbab5bf1cba27e01f837ead3060f0f7ad609bbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acbab5bf1cba27e01f837ead3060f0f7ad609bbd/comments", "author": null, "committer": null, "parents": [{"sha": "9c96a6896b7a6a3932a989fe840c816693b5df76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c96a6896b7a6a3932a989fe840c816693b5df76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c96a6896b7a6a3932a989fe840c816693b5df76"}], "stats": {"total": 122, "additions": 113, "deletions": 9}, "files": [{"sha": "6470dbb802c077f7e4594116fc04a9d2d8b7fef5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbab5bf1cba27e01f837ead3060f0f7ad609bbd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbab5bf1cba27e01f837ead3060f0f7ad609bbd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=acbab5bf1cba27e01f837ead3060f0f7ad609bbd", "patch": "@@ -1,3 +1,12 @@\n+2004-01-18  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.h (c_str()): Simplify, due to\n+\t21.3.4 the internal representation is always kept null-terminated.\n+\t* include/bits/basic_string.tcc (_M_clone): Null-terminate.\n+\t* testsuite/21_strings/basic_string/element_access/char/4.cc: New.\n+\t* testsuite/21_strings/basic_string/element_access/wchar_t/4.cc:\n+\tDitto.\n+\n 2004-01-18  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/basic_string.h (append(size_type, _CharT)):"}, {"sha": "69a9f2dc86edd8555b5ee5547e7f42ce47a55ead", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbab5bf1cba27e01f837ead3060f0f7ad609bbd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbab5bf1cba27e01f837ead3060f0f7ad609bbd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=acbab5bf1cba27e01f837ead3060f0f7ad609bbd", "patch": "@@ -129,9 +129,8 @@ namespace std\n     private:\n       // _Rep: string representation\n       //   Invariants:\n-      //   1. String really contains _M_length + 1 characters; last is set\n-      //      to 0 only on call to c_str().  We avoid instantiating\n-      //      _CharT() where the interface does not require it.\n+      //   1. String really contains _M_length + 1 characters: due to 21.3.4\n+      //      must be kept null-terminated.\n       //   2. _M_capacity >= _M_length\n       //      Allocated memory is always _M_capacity + (1 * sizeof(_CharT)).\n       //   3. _M_refcount has three states:\n@@ -1457,12 +1456,7 @@ namespace std\n       */\n       const _CharT*\n       c_str() const\n-      {\n-\t// MT: This assumes concurrent writes are OK.\n-\tconst size_type __n = this->size();\n-\ttraits_type::assign(_M_data()[__n], _Rep::_S_terminal);\n-        return _M_data();\n-      }\n+      { return _M_data(); }\n \n       /**\n        *  @brief  Return const pointer to contents."}, {"sha": "bb39df3f370ffb1f7ea176f1ff3b1f2fb63203d4", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbab5bf1cba27e01f837ead3060f0f7ad609bbd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbab5bf1cba27e01f837ead3060f0f7ad609bbd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=acbab5bf1cba27e01f837ead3060f0f7ad609bbd", "patch": "@@ -616,6 +616,7 @@ namespace std\n \t    }\n \t}\n       __r->_M_length = this->_M_length;\n+      __r->_M_refdata()[this->_M_length] = _Rep::_S_terminal;\n       return __r->_M_refdata();\n     }\n   "}, {"sha": "3edc543b32b5e494e6cbd8be02ffd00c35c2b086", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/char/4.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbab5bf1cba27e01f837ead3060f0f7ad609bbd/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbab5bf1cba27e01f837ead3060f0f7ad609bbd/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F4.cc?ref=acbab5bf1cba27e01f837ead3060f0f7ad609bbd", "patch": "@@ -0,0 +1,50 @@\n+// 2004-01-18  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.4 basic_string element access\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// http://gcc.gnu.org/ml/libstdc++/2004-01/msg00184.html\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  for (int i = 0; i < 2000; ++i)\n+    {\n+      string str_01;\n+\n+      for (int j = 0; j < i; ++j)\n+\tstr_01 += 'a';\n+\n+      str_01.reserve(i + 10);\n+\n+      const string str_02(str_01);\n+      VERIFY( str_02[i] == '\\0' );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "18b72f0a15f46c8dc21ba32048f3cbfb5beb43fc", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/wchar_t/4.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbab5bf1cba27e01f837ead3060f0f7ad609bbd/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbab5bf1cba27e01f837ead3060f0f7ad609bbd/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F4.cc?ref=acbab5bf1cba27e01f837ead3060f0f7ad609bbd", "patch": "@@ -0,0 +1,50 @@\n+// 2004-01-18  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.4 basic_string element access\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// http://gcc.gnu.org/ml/libstdc++/2004-01/msg00184.html\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  for (int i = 0; i < 2000; ++i)\n+    {\n+      wstring str_01;\n+\n+      for (int j = 0; j < i; ++j)\n+\tstr_01 += L'a';\n+\n+      str_01.reserve(i + 10);\n+\n+      const wstring str_02(str_01);\n+      VERIFY( str_02[i] == L'\\0' );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}