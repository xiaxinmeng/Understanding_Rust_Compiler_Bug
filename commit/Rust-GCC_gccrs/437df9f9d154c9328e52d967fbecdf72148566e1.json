{"sha": "437df9f9d154c9328e52d967fbecdf72148566e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM3ZGY5ZjlkMTU0YzkzMjhlNTJkOTY3ZmJlY2RmNzIxNDg1NjZlMQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-12-13T15:26:14Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-12-13T15:26:14Z"}, "message": "Fill bitregion_{start,end} in store_constructor (PR tree-optimization/78428)\n\n\t* expr.c (store_constructor_field): Add new arguments to the\n\tfunction.\n\t(store_constructor): Set up bitregion_end and add\n\tgcc_unreachable to fields that have either non-constant size\n\tor (and) offset.\n\t* gcc.dg/tree-ssa/pr78428.c: New test.\n\nFrom-SVN: r243610", "tree": {"sha": "20c6456f8225fb48fa74e05f954acf51c911049e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20c6456f8225fb48fa74e05f954acf51c911049e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/437df9f9d154c9328e52d967fbecdf72148566e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437df9f9d154c9328e52d967fbecdf72148566e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/437df9f9d154c9328e52d967fbecdf72148566e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437df9f9d154c9328e52d967fbecdf72148566e1/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4e659b947e64c015681361cbae571bf130d4c17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4e659b947e64c015681361cbae571bf130d4c17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4e659b947e64c015681361cbae571bf130d4c17"}], "stats": {"total": 93, "additions": 61, "deletions": 32}, "files": [{"sha": "aa816d95d2412765ae432f2b714bca1f4533602a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/437df9f9d154c9328e52d967fbecdf72148566e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/437df9f9d154c9328e52d967fbecdf72148566e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=437df9f9d154c9328e52d967fbecdf72148566e1", "patch": "@@ -1,3 +1,12 @@\n+2016-12-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/78428\n+\t* expr.c (store_constructor_field): Add new arguments to the\n+\tfunction.\n+\t(store_constructor): Set up bitregion_end and add\n+\tgcc_unreachable to fields that have either non-constant size\n+\tor (and) offset.\n+\n 2016-12-13  Marek Polacek  <polacek@redhat.com>\n \n \t* tree-data-ref.c (compute_overlap_steps_for_affine_univar): Change"}, {"sha": "88da8dd4a3f49b61d998a32be778c89752d5d1ae", "filename": "gcc/expr.c", "status": "modified", "additions": 20, "deletions": 32, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/437df9f9d154c9328e52d967fbecdf72148566e1/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/437df9f9d154c9328e52d967fbecdf72148566e1/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=437df9f9d154c9328e52d967fbecdf72148566e1", "patch": "@@ -80,7 +80,8 @@ static void clear_by_pieces (rtx, unsigned HOST_WIDE_INT, unsigned int);\n static rtx_insn *compress_float_constant (rtx, rtx);\n static rtx get_subtarget (rtx);\n static void store_constructor_field (rtx, unsigned HOST_WIDE_INT,\n-\t\t\t\t     HOST_WIDE_INT, machine_mode,\n+\t\t\t\t     HOST_WIDE_INT, unsigned HOST_WIDE_INT,\n+\t\t\t\t     unsigned HOST_WIDE_INT, machine_mode,\n \t\t\t\t     tree, int, alias_set_type, bool);\n static void store_constructor (tree, rtx, int, HOST_WIDE_INT, bool);\n static rtx store_field (rtx, HOST_WIDE_INT, HOST_WIDE_INT,\n@@ -6077,7 +6078,10 @@ all_zeros_p (const_tree exp)\n \n static void\n store_constructor_field (rtx target, unsigned HOST_WIDE_INT bitsize,\n-\t\t\t HOST_WIDE_INT bitpos, machine_mode mode,\n+\t\t\t HOST_WIDE_INT bitpos,\n+\t\t\t unsigned HOST_WIDE_INT bitregion_start,\n+\t\t\t unsigned HOST_WIDE_INT bitregion_end,\n+\t\t\t machine_mode mode,\n \t\t\t tree exp, int cleared,\n \t\t\t alias_set_type alias_set, bool reverse)\n {\n@@ -6112,8 +6116,8 @@ store_constructor_field (rtx target, unsigned HOST_WIDE_INT bitsize,\n \t\t\t reverse);\n     }\n   else\n-    store_field (target, bitsize, bitpos, 0, 0, mode, exp, alias_set, false,\n-\t\t reverse);\n+    store_field (target, bitsize, bitpos, bitregion_start, bitregion_end, mode,\n+\t\t exp, alias_set, false, reverse);\n }\n \n \n@@ -6148,6 +6152,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size,\n {\n   tree type = TREE_TYPE (exp);\n   HOST_WIDE_INT exp_size = int_size_in_bytes (type);\n+  HOST_WIDE_INT bitregion_end = size > 0 ? size * BITS_PER_UNIT - 1 : 0;\n \n   switch (TREE_CODE (type))\n     {\n@@ -6225,7 +6230,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size,\n \t    if (tree_fits_uhwi_p (DECL_SIZE (field)))\n \t      bitsize = tree_to_uhwi (DECL_SIZE (field));\n \t    else\n-\t      bitsize = -1;\n+\t      gcc_unreachable ();\n \n \t    mode = DECL_MODE (field);\n \t    if (DECL_BIT_FIELD (field))\n@@ -6236,31 +6241,10 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size,\n \t\t&& tree_fits_shwi_p (bit_position (field)))\n \t      {\n \t\tbitpos = int_bit_position (field);\n-\t\toffset = 0;\n+\t\toffset = NULL_TREE;\n \t      }\n \t    else\n-\t      bitpos = tree_to_shwi (DECL_FIELD_BIT_OFFSET (field));\n-\n-\t    if (offset)\n-\t      {\n-\t        machine_mode address_mode;\n-\t\trtx offset_rtx;\n-\n-\t\toffset\n-\t\t  = SUBSTITUTE_PLACEHOLDER_IN_EXPR (offset,\n-\t\t\t\t\t\t    make_tree (TREE_TYPE (exp),\n-\t\t\t\t\t\t\t       target));\n-\n-\t\toffset_rtx = expand_normal (offset);\n-\t\tgcc_assert (MEM_P (to_rtx));\n-\n-\t\taddress_mode = get_address_mode (to_rtx);\n-\t\tif (GET_MODE (offset_rtx) != address_mode)\n-\t\t  offset_rtx = convert_to_mode (address_mode, offset_rtx, 0);\n-\n-\t\tto_rtx = offset_address (to_rtx, offset_rtx,\n-\t\t\t\t\t highest_pow2_factor (offset));\n-\t      }\n+\t      gcc_unreachable ();\n \n \t    /* If this initializes a field that is smaller than a\n \t       word, at the start of a word, try to widen it to a full\n@@ -6308,7 +6292,8 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size,\n \t\tMEM_KEEP_ALIAS_SET_P (to_rtx) = 1;\n \t      }\n \n-\t    store_constructor_field (to_rtx, bitsize, bitpos, mode,\n+\t    store_constructor_field (to_rtx, bitsize, bitpos,\n+\t\t\t\t     0, bitregion_end, mode,\n \t\t\t\t     value, cleared,\n \t\t\t\t     get_alias_set (TREE_TYPE (field)),\n \t\t\t\t     reverse);\n@@ -6468,7 +6453,8 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size,\n \t\t\t  }\n \n \t\t\tstore_constructor_field\n-\t\t\t  (target, bitsize, bitpos, mode, value, cleared,\n+\t\t\t  (target, bitsize, bitpos, 0, bitregion_end,\n+\t\t\t   mode, value, cleared,\n \t\t\t   get_alias_set (elttype), reverse);\n \t\t      }\n \t\t  }\n@@ -6571,7 +6557,8 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size,\n \t\t    target = copy_rtx (target);\n \t\t    MEM_KEEP_ALIAS_SET_P (target) = 1;\n \t\t  }\n-\t\tstore_constructor_field (target, bitsize, bitpos, mode, value,\n+\t\tstore_constructor_field (target, bitsize, bitpos, 0,\n+\t\t\t\t\t bitregion_end, mode, value,\n \t\t\t\t\t cleared, get_alias_set (elttype),\n \t\t\t\t\t reverse);\n \t      }\n@@ -6705,7 +6692,8 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size,\n \t\t  ? TYPE_MODE (TREE_TYPE (value))\n \t\t  : eltmode;\n \t\tbitpos = eltpos * elt_size;\n-\t\tstore_constructor_field (target, bitsize, bitpos, value_mode,\n+\t\tstore_constructor_field (target, bitsize, bitpos, 0,\n+\t\t\t\t\t bitregion_end, value_mode,\n \t\t\t\t\t value, cleared, alias, reverse);\n \t      }\n \t  }"}, {"sha": "dfdadddaca184df458cccf724ef206d35dc1da3a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/437df9f9d154c9328e52d967fbecdf72148566e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/437df9f9d154c9328e52d967fbecdf72148566e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=437df9f9d154c9328e52d967fbecdf72148566e1", "patch": "@@ -1,3 +1,8 @@\n+2016-12-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/78428\n+\t* gcc.dg/tree-ssa/pr78428.c: New test.\n+\n 2016-12-13  Janus Weil  <janus@gcc.gnu.org>\n \t    Paul Thomas  <pault@gcc.gnu.org>\n "}, {"sha": "3a9b99c7e036b25428997e906ad001d6b9d9001e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr78428.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/437df9f9d154c9328e52d967fbecdf72148566e1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr78428.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/437df9f9d154c9328e52d967fbecdf72148566e1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr78428.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr78428.c?ref=437df9f9d154c9328e52d967fbecdf72148566e1", "patch": "@@ -0,0 +1,27 @@\n+/* PR tree-optimization/78428.  */\n+/* { dg-options \"-O2\" } */\n+/* { dg-do run } */\n+\n+struct S0\n+{\n+  int f2;\n+  int f3:16;\n+  int f4:18;\n+} ;\n+\n+int a = 5;\n+struct S0 b = { 3, 0, 0 };\n+static struct S0 global[2] = { { 77, 0, 78 }, { 77, 0, 78 } };\n+\n+int main ()\n+{\n+  volatile struct S0 *j;\n+  for (; a;)\n+    {\n+      __builtin_printf (\"\", b.f2);\n+      j = &b;\n+      *j = global[1];\n+      a--;\n+    }\n+  return 0;\n+}"}]}