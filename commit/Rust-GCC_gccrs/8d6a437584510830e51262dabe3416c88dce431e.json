{"sha": "8d6a437584510830e51262dabe3416c88dce431e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ2YTQzNzU4NDUxMDgzMGU1MTI2MmRhYmUzNDE2Yzg4ZGNlNDMxZQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-08-02T23:46:39Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-08-02T23:46:39Z"}, "message": "RandomAccessFile.java (seek): Let seek go past end of file.\n\n\t* java/io/RandomAccessFile.java (seek): Let seek go past end of\n\tfile.\n\t(skipBytes): Don't fail if seeking past end of file.\n\t* java/io/FileInputStream.java (skip): Don't fail if seeking past\n\tend of file.\n\t* java/io/natFileDescriptorWin32.cc (seek): Handle `eof_trunc'\n\targument.\n\t* java/io/natFileDescriptorEcos.cc (seek): Handle `eof_trunc'\n\targument.\n\t* java/io/natFileDescriptorPosix.cc (seek): Handle `eof_trunc'\n\targument.\n\t* java/io/FileDescriptor.java (seek): Added `eof_trunc' argument.\n\nFrom-SVN: r44586", "tree": {"sha": "9a4a339f33e52b784286ab24c2d8b29c0c4f6d69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a4a339f33e52b784286ab24c2d8b29c0c4f6d69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d6a437584510830e51262dabe3416c88dce431e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d6a437584510830e51262dabe3416c88dce431e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d6a437584510830e51262dabe3416c88dce431e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d6a437584510830e51262dabe3416c88dce431e/comments", "author": null, "committer": null, "parents": [{"sha": "ead4cf347a033e7876095f45aeb0066b972f51a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ead4cf347a033e7876095f45aeb0066b972f51a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ead4cf347a033e7876095f45aeb0066b972f51a0"}], "stats": {"total": 66, "additions": 43, "deletions": 23}, "files": [{"sha": "5bdccf0bbf4d814768ffb8c74cbb7bbf5b71e189", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6a437584510830e51262dabe3416c88dce431e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6a437584510830e51262dabe3416c88dce431e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8d6a437584510830e51262dabe3416c88dce431e", "patch": "@@ -1,3 +1,18 @@\n+2001-08-02  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/io/RandomAccessFile.java (seek): Let seek go past end of\n+\tfile.\n+\t(skipBytes): Don't fail if seeking past end of file.\n+\t* java/io/FileInputStream.java (skip): Don't fail if seeking past\n+\tend of file.\n+\t* java/io/natFileDescriptorWin32.cc (seek): Handle `eof_trunc'\n+\targument.\n+\t* java/io/natFileDescriptorEcos.cc (seek): Handle `eof_trunc'\n+\targument.\n+\t* java/io/natFileDescriptorPosix.cc (seek): Handle `eof_trunc'\n+\targument.\n+\t* java/io/FileDescriptor.java (seek): Added `eof_trunc' argument.\n+\n 2001-08-02  Martin Kahlert  <martin.kahlert@infineon.com>\n \n \t* jni.cc (JNI_CreateJavaVM): Call _Jv_JNI_Init in order"}, {"sha": "8afcda4768ff0bb76cbd586188f77a7c9549d053", "filename": "libjava/java/io/FileDescriptor.java", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6a437584510830e51262dabe3416c88dce431e/libjava%2Fjava%2Fio%2FFileDescriptor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6a437584510830e51262dabe3416c88dce431e/libjava%2Fjava%2Fio%2FFileDescriptor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileDescriptor.java?ref=8d6a437584510830e51262dabe3416c88dce431e", "patch": "@@ -1,6 +1,6 @@\n // FileDescriptor.java - Open file or device\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -54,7 +54,11 @@\n   native void write (byte[] b, int offset, int len)\n     throws IOException, NullPointerException, IndexOutOfBoundsException;\n   native void close () throws IOException;\n-  native int seek (long pos, int whence) throws IOException;\n+  // EOF_TRUNC is true if a request to seek past the end of file\n+  // should actually stop at the end of file.  If false, then a seek\n+  // past the end is ok (and if a subsequent write occurs the file\n+  // will grow).\n+  native int seek (long pos, int whence, boolean eof_trunc) throws IOException;\n   native long length () throws IOException;\n   native long getFilePointer () throws IOException;\n   native int read () throws IOException;"}, {"sha": "9d0d0133b9cf76a102d9a21bd122b494d7a192c8", "filename": "libjava/java/io/FileInputStream.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6a437584510830e51262dabe3416c88dce431e/libjava%2Fjava%2Fio%2FFileInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6a437584510830e51262dabe3416c88dce431e/libjava%2Fjava%2Fio%2FFileInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileInputStream.java?ref=8d6a437584510830e51262dabe3416c88dce431e", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -88,6 +88,6 @@ public int read(byte[] b, int off, int len) throws IOException\n \n   public long skip(long n) throws IOException\n   {\n-    return fd.seek(n, FileDescriptor.CUR);\n+    return n <= 0 ? 0 : fd.seek(n, FileDescriptor.CUR, true);\n   }\n }"}, {"sha": "418974c091e2d0f19376d897d48cb06509aa8fe4", "filename": "libjava/java/io/RandomAccessFile.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6a437584510830e51262dabe3416c88dce431e/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6a437584510830e51262dabe3416c88dce431e/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FRandomAccessFile.java?ref=8d6a437584510830e51262dabe3416c88dce431e", "patch": "@@ -1,6 +1,6 @@\n // RandomAccessFile.java\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -161,12 +161,12 @@ public final String readUTF () throws IOException\n \n   public void seek (long pos) throws IOException\n   {\n-    fd.seek(pos, FileDescriptor.SET);\n+    fd.seek(pos, FileDescriptor.SET, false);\n   }\n \n   public int skipBytes (int count) throws IOException\n   {\n-    return fd.seek(count, FileDescriptor.CUR);\n+    return count <= 0 ? 0 : fd.seek(count, FileDescriptor.CUR, true);\n   }\n \n   public void write (int oneByte) throws IOException"}, {"sha": "a66bf739d3563546cafa9936f702d60de865dcfb", "filename": "libjava/java/io/natFileDescriptorEcos.cc", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6a437584510830e51262dabe3416c88dce431e/libjava%2Fjava%2Fio%2FnatFileDescriptorEcos.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6a437584510830e51262dabe3416c88dce431e/libjava%2Fjava%2Fio%2FnatFileDescriptorEcos.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileDescriptorEcos.cc?ref=8d6a437584510830e51262dabe3416c88dce431e", "patch": "@@ -1,6 +1,6 @@\n // natFileDescriptor.cc - Native part of FileDescriptor class.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -88,16 +88,9 @@ java::io::FileDescriptor::close (void)\n }\n \n jint\n-java::io::FileDescriptor::seek (jlong pos, jint whence)\n+java::io::FileDescriptor::seek (jlong pos, jint whence, jboolean)\n {\n   JvAssert (whence == SET || whence == CUR);\n-\n-  jlong len = length ();\n-  jlong here = getFilePointer ();\n-\n-  if ((whence == SET && pos > len) || (whence == CUR && here + pos > len))\n-    throw new EOFException;\n-\n   return 0;\n }\n "}, {"sha": "ad1c1cdd0486c9d099a94291426e5ea8329d006b", "filename": "libjava/java/io/natFileDescriptorPosix.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6a437584510830e51262dabe3416c88dce431e/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6a437584510830e51262dabe3416c88dce431e/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc?ref=8d6a437584510830e51262dabe3416c88dce431e", "patch": "@@ -177,15 +177,19 @@ java::io::FileDescriptor::close (void)\n }\n \n jint\n-java::io::FileDescriptor::seek (jlong pos, jint whence)\n+java::io::FileDescriptor::seek (jlong pos, jint whence, jboolean eof_trunc)\n {\n   JvAssert (whence == SET || whence == CUR);\n \n   jlong len = length ();\n   jlong here = getFilePointer ();\n \n-  if ((whence == SET && pos > len) || (whence == CUR && here + pos > len))\n-    throw new EOFException;\n+  if (eof_trunc\n+      && ((whence == SET && pos > len) || (whence == CUR && here + pos > len)))\n+    {\n+      whence = SET;\n+      pos = len;\n+    }\n \n   off_t r = ::lseek (fd, (off_t) pos, whence == SET ? SEEK_SET : SEEK_CUR);\n   if (r == -1)"}, {"sha": "c0e33e2a2aeeb7060eddde74ffec3a9661962430", "filename": "libjava/java/io/natFileDescriptorWin32.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6a437584510830e51262dabe3416c88dce431e/libjava%2Fjava%2Fio%2FnatFileDescriptorWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6a437584510830e51262dabe3416c88dce431e/libjava%2Fjava%2Fio%2FnatFileDescriptorWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileDescriptorWin32.cc?ref=8d6a437584510830e51262dabe3416c88dce431e", "patch": "@@ -1,6 +1,6 @@\n // natFileDescriptorWin32.cc - Native part of FileDescriptor class.\n \n-/* Copyright (C) 1998, 1999, 2000  Red Hat, Inc.\n+/* Copyright (C) 1998, 1999, 2000, 2001  Red Hat, Inc.\n \n    This file is part of libgcj.\n \n@@ -171,15 +171,19 @@ java::io::FileDescriptor::close (void)\n }\n \n jint\n-java::io::FileDescriptor::seek (jlong pos, jint whence)\n+java::io::FileDescriptor::seek (jlong pos, jint whence, jboolean eof_trunc)\n {\n   JvAssert (whence == SET || whence == CUR);\n \n   jlong len = length();\n   jlong here = getFilePointer();\n \n-  if ((whence == SET && pos > len) || (whence == CUR && here + pos > len))\n-    throw new EOFException;\n+  if (eof_trunc\n+      && ((whence == SET && pos > len) || (whence == CUR && here + pos > len)))\n+    {\n+      whence = SET;\n+      pos = len;\n+    }\n \n   LONG high = pos >> 32;\n   DWORD low = SetFilePointer ((HANDLE)fd, (DWORD)(0xffffffff & pos), &high, whence == SET ? FILE_BEGIN : FILE_CURRENT);"}]}