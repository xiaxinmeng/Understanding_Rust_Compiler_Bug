{"sha": "6690a9e079bf15d086d2805d00fea0e228cd7db9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY5MGE5ZTA3OWJmMTVkMDg2ZDI4MDVkMDBmZWEwZTIyOGNkN2RiOQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-06-05T07:45:03Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-06-05T07:45:03Z"}, "message": "re PR fortran/14067 (no warning when character data statement overflows declared size)\n\n2006-06-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/14067\n\t* data.c (create_character_intializer): Add warning message\n\tfor truncated string.\n\n\tPR fortran/16943\n\t* symbol.c : Include flags.h.\n\t(gfc_add_type): If a procedure and types are the same do not\n\tthrow an error unless standard is less than gnu or pedantic.\n\n\tPR fortran/20838\n\t* parse.c (parse_do_block): Error if named block do construct\n\tdoes not have a named enddo.\n\n\tPR fortran/27655\n\t* check.c (gfc_check_associated): Pick up EXPR_NULL for pointer\n\tas well as target and put error return at end of function.\n\n2006-06-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/14067\n\t* gfortran.dg/data_char_1.f90: Add messages for truncated\n\tstrings.\n\n\tPR fortran/16943\n\t* gfortran.dg/func_decl_2.f90: New test.\n\n\tPR fortran/20838\n\t* gfortran.dg/do_2.f90: New test.\n\n\tPR fortran/27655\n\t* gfortran.dg/associated_3.f90: New test.\n\nFrom-SVN: r114385", "tree": {"sha": "390b7c6a31468417e763f88ebe31b126efc05a4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/390b7c6a31468417e763f88ebe31b126efc05a4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6690a9e079bf15d086d2805d00fea0e228cd7db9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6690a9e079bf15d086d2805d00fea0e228cd7db9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6690a9e079bf15d086d2805d00fea0e228cd7db9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6690a9e079bf15d086d2805d00fea0e228cd7db9/comments", "author": null, "committer": null, "parents": [{"sha": "86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2"}], "stats": {"total": 176, "additions": 163, "deletions": 13}, "files": [{"sha": "abff6a261fb862fcfb834aff6ce851d0671f3819", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6690a9e079bf15d086d2805d00fea0e228cd7db9", "patch": "@@ -1,3 +1,22 @@\n+2006-06-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/14067\n+\t* data.c (create_character_intializer): Add warning message\n+\tfor truncated string.\n+\n+\tPR fortran/16943\n+\t* symbol.c : Include flags.h.\n+\t(gfc_add_type): If a procedure and types are the same do not\n+\tthrow an error unless standard is less than gnu or pedantic.\n+\n+\tPR fortran/20838\n+\t* parse.c (parse_do_block): Error if named block do construct\n+\tdoes not have a named enddo.\n+\n+\tPR fortran/27655\n+\t* check.c (gfc_check_associated): Pick up EXPR_NULL for pointer\n+\tas well as target and put error return at end of function.\n+\n 2006-06-03  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* trans.c (gfc_msg_bounds, gfc_msg_fault, gfc_msg_wrong_return):"}, {"sha": "15278f4fe4fe7aaed90bf05678afff75a5593c72", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=6690a9e079bf15d086d2805d00fea0e228cd7db9", "patch": "@@ -499,11 +499,16 @@ gfc_check_associated (gfc_expr * pointer, gfc_expr * target)\n   symbol_attribute attr;\n   int i;\n   try t;\n+  locus *where;\n+\n+  where = &pointer->where;\n \n   if (pointer->expr_type == EXPR_VARIABLE)\n     attr = gfc_variable_attr (pointer, NULL);\n   else if (pointer->expr_type == EXPR_FUNCTION)\n     attr = pointer->symtree->n.sym->attr;\n+  else if (pointer->expr_type == EXPR_NULL)\n+    goto null_arg;\n   else\n     gcc_assert (0); /* Pointer must be a variable or a function.  */\n \n@@ -519,13 +524,9 @@ gfc_check_associated (gfc_expr * pointer, gfc_expr * target)\n   if (target == NULL)\n     return SUCCESS;\n \n+  where = &target->where;\n   if (target->expr_type == EXPR_NULL)\n-    {\n-      gfc_error (\"NULL pointer at %L is not permitted as actual argument \"\n-                 \"of '%s' intrinsic function\",\n-                 &target->where, gfc_current_intrinsic);\n-      return FAILURE;\n-    }\n+    goto null_arg;\n \n   if (target->expr_type == EXPR_VARIABLE)\n     attr = gfc_variable_attr (target, NULL);\n@@ -565,6 +566,13 @@ gfc_check_associated (gfc_expr * pointer, gfc_expr * target)\n           }\n     }\n   return t;\n+\n+null_arg:\n+\n+  gfc_error (\"NULL pointer at %L is not permitted as actual argument \"\n+\t     \"of '%s' intrinsic function\", where, gfc_current_intrinsic);\n+  return FAILURE;\n+\n }\n \n "}, {"sha": "c708becd095e48e71bcb1c889c0fd7c11cb64841", "filename": "gcc/fortran/data.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ffortran%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ffortran%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdata.c?ref=6690a9e079bf15d086d2805d00fea0e228cd7db9", "patch": "@@ -185,7 +185,12 @@ create_character_intializer (gfc_expr * init, gfc_typespec * ts,\n   /* Copy the initial value.  */\n   len = rvalue->value.character.length;\n   if (len > end - start)\n-    len = end - start;\n+    {\n+      len = end - start;\n+      gfc_warning_now (\"initialization string truncated to match variable \"\n+\t\t       \"at %L\", &rvalue->where);\n+    }\n+\n   memcpy (&dest[start], rvalue->value.character.string, len);\n \n   /* Pad with spaces.  Substrings will already be blanked.  */"}, {"sha": "5b98d1da0b3adb1e4fd711abf35f026b12890f30", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=6690a9e079bf15d086d2805d00fea0e228cd7db9", "patch": "@@ -2282,6 +2282,15 @@ parse_do_block (void)\n       break;\n \n     case ST_IMPLIED_ENDDO:\n+     /* If the do-stmt of this DO construct has a do-construct-name,\n+\tthe corresponding end-do must be an end-do-stmt (with a matching\n+\tname, but in that case we must have seen ST_ENDDO first).\n+\tWe only complain about this in pedantic mode.  */\n+     if (gfc_current_block () != NULL)\n+\tgfc_error_now\n+\t  (\"named block DO at %L requires matching ENDDO name\",\n+\t   &gfc_current_block()->declared_at);\n+\n       break;\n \n     default:"}, {"sha": "63e45ecb5fe7ae58fcf7800ff941afd6836305c2", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=6690a9e079bf15d086d2805d00fea0e228cd7db9", "patch": "@@ -23,6 +23,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"flags.h\"\n #include \"gfortran.h\"\n #include \"parse.h\"\n \n@@ -1178,9 +1179,18 @@ gfc_add_type (gfc_symbol * sym, gfc_typespec * ts, locus * where)\n \n   if (sym->ts.type != BT_UNKNOWN)\n     {\n-      gfc_error (\"Symbol '%s' at %L already has basic type of %s\", sym->name,\n-\t\t where, gfc_basic_typename (sym->ts.type));\n-      return FAILURE;\n+      const char *msg = \"Symbol '%s' at %L already has basic type of %s\";\n+      if (!(sym->ts.type == ts->type\n+\t     && (sym->attr.flavor == FL_PROCEDURE || sym->attr.result))\n+\t   || gfc_notification_std (GFC_STD_GNU) == ERROR\n+\t   || pedantic)\n+\t{\n+\t  gfc_error (msg, sym->name, where, gfc_basic_typename (sym->ts.type));\n+\t  return FAILURE;\n+\t}\n+      else if (gfc_notify_std (GFC_STD_GNU, msg, sym->name, where,\n+\t\t\t       gfc_basic_typename (sym->ts.type)) == FAILURE)\n+\t  return FAILURE;\n     }\n \n   flavor = sym->attr.flavor;"}, {"sha": "a47d993bd7785f2bfabb81e8a8075659f6890f32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6690a9e079bf15d086d2805d00fea0e228cd7db9", "patch": "@@ -1,3 +1,18 @@\n+2006-06-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/14067\n+\t* gfortran.dg/data_char_1.f90: Add messages for truncated\n+\tstrings.\n+\n+\tPR fortran/16943\n+\t* gfortran.dg/func_decl_2.f90: New test.\n+\n+\tPR fortran/20838\n+\t* gfortran.dg/do_2.f90: New test.\n+\n+\tPR fortran/27655\n+\t* gfortran.dg/associated_3.f90: New test.\n+\n 2006-06-04  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/27819"}, {"sha": "c0a7f9a26f4d5fc3bf5f183bd0e30775138e4de8", "filename": "gcc/testsuite/gfortran.dg/associated_3.f90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_3.f90?ref=6690a9e079bf15d086d2805d00fea0e228cd7db9", "patch": "@@ -0,0 +1,8 @@\n+! { dg-do compile }\n+! Test for fix of PR27655\n+!\n+!Contributed by Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org> \n+  integer, pointer :: i\n+  print *, associated(NULL(),i) ! { dg-error \"not permitted as actual argument\" }\n+  print *, associated(i,NULL()) ! { dg-error \"not permitted as actual argument\" }\n+end"}, {"sha": "00381c674997b056ab53f712d50300de00919c24", "filename": "gcc/testsuite/gfortran.dg/data_char_1.f90", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_char_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_char_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_char_1.f90?ref=6690a9e079bf15d086d2805d00fea0e228cd7db9", "patch": "@@ -1,12 +1,13 @@\n ! { dg-do run }\n ! Test character variables in data statements\n-! Also substrings of cahracter variables.\n+! Also substrings of character variables.\n ! PR14976 PR16228 \n program data_char_1\n   character(len=5) :: a(2)\n   character(len=5) :: b(2)\n-  data a /'Hellow', 'orld'/\n-  data b(:)(1:4), b(1)(5:5), b(2)(5:5) /'abcdefg', 'hi', 'j', 'k'/\n+  data a /'Hellow', 'orld'/       ! { dg-warning \"string truncated\" }\n+  data b(:)(1:4), b(1)(5:5), b(2)(5:5) &\n+      /'abcdefg', 'hi', 'j', 'k'/ ! { dg-warning \"string truncated\" }\n   \n   if ((a(1) .ne. 'Hello') .or. (a(2) .ne. 'orld ')) call abort\n   if ((b(1) .ne. 'abcdj') .or. (b(2) .ne. 'hi  k')) call abort"}, {"sha": "95959d03e47a0af8ef204a0ac19fbb4dbc37f728", "filename": "gcc/testsuite/gfortran.dg/do_2.f90", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_2.f90?ref=6690a9e079bf15d086d2805d00fea0e228cd7db9", "patch": "@@ -0,0 +1,54 @@\n+! { dg-do compile }\n+! Check the fix for PR20839, which concerned non-compliance with one of the\n+! constraints for block-do-constructs (8.1.4.1.1):\n+! Constraint: If the do-stmt of a block-do-construct is identified by a \n+! do-construct-name, the corresponding end-do shall be an end-do-stmt\n+! specifying the same do-construct-name. (Tests a & b)\n+! If the do-stmt of a block-do-construct is not identified by a\n+! do-construct-name, the corresponding end-do shall not specify a\n+! do-construct-name. (Tests c & d)\n+! Constraint: If the do-stmt is a nonlabel-do-stmt, the corresponding end-do\n+! shall be an end-do-stmt.\n+! Constraint: If the do-stmt is a label-do-stmt, the corresponding end-do shall\n+! be identified with the same label.\n+!\n+! Test a - this was the PR\n+  doi: DO 111 i=1,3 ! { dg-error \"requires matching ENDDO name\" }\n+111 continue \n+! Test b\n+  doii: DO 112 ij=1,3\n+112 enddo doij      ! { dg-error \"Expected label\" }\n+! Test c\n+  DO 113 ik=1,3\n+113 enddo doik      ! { dg-error \"Syntax error\" }\n+! Test d\n+  DO il=1,3\n+  enddo doil        ! { dg-error \"Syntax error\" }\n+! Test e\n+  doj: DO 114 j=1,3\n+  enddo doj         ! { dg-error \"doesn't match DO label\" }\n+\n+! Correct block do constructs\n+dok: DO 115 k=1,3\n+    dokk: do kk=1,3\n+        dokkk: DO\n+                   do kkkk=1,3\n+                       do\n+                       enddo\n+                   enddo\n+\t       enddo dokkk\n+\t  enddo dokk\n+115  enddo dok \n+! Correct non-block do constructs\n+  do 117 l=1,3\n+      do ll=1,3\n+          do 116 lll=1,3\n+116       continue\n+      enddo\n+117 enddo\n+! These prevent an EOF error, arising from the previous errors.\n+end do\n+113 end do\n+112 end do doii\n+END\n+"}, {"sha": "c2cc4403cd6794d2caa6beca55270a9c459cdec8", "filename": "gcc/testsuite/gfortran.dg/func_decl_2.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_decl_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6690a9e079bf15d086d2805d00fea0e228cd7db9/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_decl_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_decl_2.f90?ref=6690a9e079bf15d086d2805d00fea0e228cd7db9", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+! Test fix for PR16943 in which the double typing of\n+! N caused an error.  This is a common extension to the\n+! F95 standard, so the error is only thrown for -std=f95\n+! or -pedantic.\n+!\n+! Contributed by Paul Thomas  <pault@gcc.gnu.org>\n+!\n+  program bug8 \n+    implicit none \n+    stop \" OK. \" \n+\n+  contains \n+\n+    integer function bugf(M) result (N) \n+      integer, intent (in) :: M \n+      integer :: N ! { dg-warning \"already has basic type of INTEGER\" }\n+      N = M \n+      return \n+    end function bugf\n+  end program bug8"}]}