{"sha": "47d3640028b6647601a18cc8f84f3180c85f045e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdkMzY0MDAyOGI2NjQ3NjAxYTE4Y2M4Zjg0ZjMxODBjODVmMDQ1ZQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "crux@pool.informatik.rwth-aachen.de", "date": "1997-08-27T06:29:59Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-08-27T06:29:59Z"}, "message": "i386.md (pop): pop increments the stack pointer.\n\n        * i386.md (pop): pop increments the stack pointer.\n        (prologue_set_stack_ptr): New pattern.\n        * i386.c (ix86_expand_prologue): Use prologue_set_stack_ptr\n        instead of subsi3.\nFixes problem with scheduling on the x86.\n\nFrom-SVN: r14956", "tree": {"sha": "70fe87aae510cad31198e0714fee8554b25c0c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70fe87aae510cad31198e0714fee8554b25c0c43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47d3640028b6647601a18cc8f84f3180c85f045e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d3640028b6647601a18cc8f84f3180c85f045e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47d3640028b6647601a18cc8f84f3180c85f045e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d3640028b6647601a18cc8f84f3180c85f045e/comments", "author": null, "committer": null, "parents": [{"sha": "b9e6eb36ff871a2b0216d06e4b55183643eadc24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e6eb36ff871a2b0216d06e4b55183643eadc24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9e6eb36ff871a2b0216d06e4b55183643eadc24"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "c8fc1a9e2c26a08fae4a8a741ca696e0458350ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d3640028b6647601a18cc8f84f3180c85f045e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d3640028b6647601a18cc8f84f3180c85f045e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47d3640028b6647601a18cc8f84f3180c85f045e", "patch": "@@ -1,3 +1,10 @@\n+Wed Aug 27 00:30:00 1997  Bernd Schmidt  <crux@pool.informatik.rwth-aachen.de>\n+\n+\t* i386.md (pop): pop increments the stack pointer.\n+\t(prologue_set_stack_ptr): New pattern.\n+\t* i386.c (ix86_expand_prologue): Use prologue_set_stack_ptr\n+\tinstead of subsi3.\n+\n Tue Aug 26 18:50:32 1997  Jim Wilson  <wilson@cygnus.com>\n \n \t* reload.c (find_reloads, case '0'): Reject matching a non-offsettable"}, {"sha": "35dbc62a81b87261582b33ebe727e804fc623ab8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d3640028b6647601a18cc8f84f3180c85f045e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d3640028b6647601a18cc8f84f3180c85f045e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=47d3640028b6647601a18cc8f84f3180c85f045e", "patch": "@@ -1973,7 +1973,7 @@ ix86_expand_prologue ()\n     ;\n   else if (! TARGET_STACK_PROBE || tsize < CHECK_STACK_LIMIT)\n     {\n-      insn = emit_insn (gen_subsi3 (xops[0], xops[0], xops[2]));\n+      insn = emit_insn (gen_prologue_set_stack_ptr (xops[2]));\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n   else "}, {"sha": "8ae87644505007dc6d39bdcbe03dc4d7b357ba8f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d3640028b6647601a18cc8f84f3180c85f045e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d3640028b6647601a18cc8f84f3180c85f045e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=47d3640028b6647601a18cc8f84f3180c85f045e", "patch": "@@ -60,6 +60,9 @@\n ;;    operand 0 is the argument for `cos'.\n ;; 3  This is part of a `stack probe' operation.  The mode of the UNSPEC is \n ;;    always SImode.  operand 0 is the size of the stack allocation.\n+;; 4  This is the source of a fake SET of the frame pointer which is used to\n+;;    prevent insns referencing it being scheduled across the initial\n+;;    decrement of the stack pointer.\n \f\n ;; This shadows the processor_type enumeration, so changes must be made\n ;; to i386.h at the same time.\n@@ -6492,6 +6495,24 @@ byte_xor_operation:\n   DONE;\n }\")\n \n+;; The use of UNSPEC here is currently not necessary - a simple SET of ebp\n+;; to itself would be enough. But this way we are safe even if some optimizer\n+;; becomes too clever in the future.\n+(define_insn \"prologue_set_stack_ptr\"\n+  [(set (reg:SI 7)\n+\t(minus:SI (reg:SI 7) (match_operand:SI 0 \"immediate_operand\" \"i\")))\n+   (set (reg:SI 6) (unspec:SI [(reg:SI 6)] 4))]\n+  \"\"\n+  \"*\n+{\n+  rtx xops [2];\n+\n+  xops[0] = operands[0];\n+  xops[1] = stack_pointer_rtx;\n+  output_asm_insn (AS2 (sub%L1,%0,%1), xops);\n+  RET;\n+}\")\n+\n (define_insn \"prologue_set_got\"\n   [(set (match_operand:SI 0 \"\" \"\")\n     (plus:SI (match_dup 0)\n@@ -6564,7 +6585,7 @@ byte_xor_operation:\n (define_insn \"pop\"\n   [(set (match_operand:SI 0 \"register_operand\" \"r\")\n \t(mem:SI (reg:SI 7)))\n-   (set (reg:SI 7) (minus:SI (reg:SI 7) (const_int 4)))]\n+   (set (reg:SI 7) (plus:SI (reg:SI 7) (const_int 4)))]\n   \"\"\n   \"*\n {"}]}