{"sha": "548e44b3366c210afee8754753a82a8641118684", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ4ZTQ0YjMzNjZjMjEwYWZlZTg3NTQ3NTNhODJhODY0MTExODY4NA==", "commit": {"author": {"name": "Lutz Vieweg", "email": "lkv@mania.robin.de", "date": "1999-01-06T23:06:29Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-01-06T23:06:29Z"}, "message": "pa.h (reg_class): Add FPUPPER_REGS.\n\n        * pa.h (reg_class): Add FPUPPER_REGS.\n        (REG_CLASS_NAMES): Similarly.\n        (REG_CLASS_CONTENTS): Similarly\n        (REGNO_REG_CLASS): Handle FPUPPER_REGS.\n        (FP_REG_CLASS_P): Likewise.\n        (REG_CLASS_FROM_LETTER): Similarly.\n        (CLASS_MAX_NREGS): Similarly.\n\nFrom-SVN: r24546", "tree": {"sha": "5a94214824f9865d6640e155c7b7d3a599206808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a94214824f9865d6640e155c7b7d3a599206808"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/548e44b3366c210afee8754753a82a8641118684", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/548e44b3366c210afee8754753a82a8641118684", "html_url": "https://github.com/Rust-GCC/gccrs/commit/548e44b3366c210afee8754753a82a8641118684", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/548e44b3366c210afee8754753a82a8641118684/comments", "author": null, "committer": null, "parents": [{"sha": "ee65dab8419efd872b531721a280b74d9b2866f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee65dab8419efd872b531721a280b74d9b2866f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee65dab8419efd872b531721a280b74d9b2866f0"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "dc4f25243b79f5e4a8a67111964fbd94b4f48407", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548e44b3366c210afee8754753a82a8641118684/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548e44b3366c210afee8754753a82a8641118684/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=548e44b3366c210afee8754753a82a8641118684", "patch": "@@ -1,3 +1,13 @@\n+Thu Jan  7 00:01:38 1999  Lutz Vieweg <lkv@mania.robin.de>\n+\n+\t* pa.h (reg_class): Add FPUPPER_REGS.\n+\t(REG_CLASS_NAMES): Similarly.\n+\t(REG_CLASS_CONTENTS): Similarly\n+\t(REGNO_REG_CLASS): Handle FPUPPER_REGS.\n+\t(FP_REG_CLASS_P): Likewise.\n+\t(REG_CLASS_FROM_LETTER): Similarly.\n+\t(CLASS_MAX_NREGS): Similarly.\n+\n 1999-01-06  Brendan Kehoe  <brendan@cygnus.com>\n \n \t* fixincludes: For HP/UX 10.20, also look in curses_colr/curses.h"}, {"sha": "d25e0d2760a6c5eb3d1f249406a4a8984d26e5f5", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548e44b3366c210afee8754753a82a8641118684/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548e44b3366c210afee8754753a82a8641118684/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=548e44b3366c210afee8754753a82a8641118684", "patch": "@@ -687,15 +687,15 @@ do {\t\t\t\t\t\t\t\t\\\n      1.1 fp regs, and the high 1.1 fp regs, to which the operands of\n      fmpyadd and fmpysub are restricted.  */\n \n-enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FP_REGS, GENERAL_OR_FP_REGS,\n+enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FPUPPER_REGS, FP_REGS, GENERAL_OR_FP_REGS,\n   SHIFT_REGS, ALL_REGS, LIM_REG_CLASSES};\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n /* Give names of register classes as strings for dump file.   */\n \n #define REG_CLASS_NAMES \\\n-  {\"NO_REGS\", \"R1_REGS\", \"GENERAL_REGS\", \"FP_REGS\",\t\t\t\\\n+  {\"NO_REGS\", \"R1_REGS\", \"GENERAL_REGS\", \"FPUPPER_REGS\", \"FP_REGS\", \\\n    \"GENERAL_OR_FP_REGS\", \"SHIFT_REGS\", \"ALL_REGS\"}\n \n /* Define which registers fit in which classes.\n@@ -707,6 +707,7 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FP_REGS, GENERAL_OR_FP_REGS,\n  {{0x00000000, 0x00000000, 0x00000000},\t/* NO_REGS */\t\t\t\\\n   {0x00000002, 0x00000000, 0x00000000},\t/* R1_REGS */\t\t\t\\\n   {0xfffffffe, 0x00000000, 0x00000000},\t/* GENERAL_REGS */\t\t\\\n+  {0x00000000, 0xff000000, 0x00ffffff},\t/* FPUPPER_REGS */\t\t\t\\\n   {0x00000000, 0xffffffff, 0x00ffffff},\t/* FP_REGS */\t\t\t\\\n   {0xfffffffe, 0xffffffff, 0x00ffffff},\t/* GENERAL_OR_FP_REGS */\t\\\n   {0x00000000, 0x00000000, 0x01000000},\t/* SHIFT_REGS */\t\t\\\n@@ -721,20 +722,22 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FP_REGS, GENERAL_OR_FP_REGS,\n   ((REGNO) == 0 ? NO_REGS \t\t\t\t\t\t\\\n    : (REGNO) == 1 ? R1_REGS\t\t\t\t\t\t\\\n    : (REGNO) < 32 ? GENERAL_REGS\t\t\t\t\t\\\n-   : (REGNO) < 88 ? FP_REGS\t\t\t\t\t\t\\\n+   : (REGNO) < 56 ? FP_REGS\t\t\t\t\t\t\\\n+   : (REGNO) < 88 ? FPUPPER_REGS\t\t\t\t\t\t\\\n    : SHIFT_REGS)\n \n /* The class value for index registers, and the one for base regs.  */\n #define INDEX_REG_CLASS GENERAL_REGS\n #define BASE_REG_CLASS GENERAL_REGS\n \n #define FP_REG_CLASS_P(CLASS) \\\n-  ((CLASS) == FP_REGS)\n+  ((CLASS) == FP_REGS || (CLASS) == FPUPPER_REGS)\n \n /* Get reg_class from a letter such as appears in the machine description.  */\n /* Keep 'x' for backward compatibility with user asm.   */\n #define REG_CLASS_FROM_LETTER(C) \\\n   ((C) == 'f' ? FP_REGS :\t\t\t\t\t\\\n+   (C) == 'y' ? FPUPPER_REGS :\t\t\t\t\t\\\n    (C) == 'x' ? FP_REGS :\t\t\t\t\t\\\n    (C) == 'q' ? SHIFT_REGS :\t\t\t\t\t\\\n    (C) == 'a' ? R1_REGS :\t\t\t\t\t\\\n@@ -808,7 +811,7 @@ int zdepi_cint_p ();\n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */\n #define CLASS_MAX_NREGS(CLASS, MODE)\t\t\t\t\t\\\n-  (!TARGET_SNAKE && (CLASS) == FP_REGS ? 1 :\t\t\t\t\\\n+  (!TARGET_SNAKE && ((CLASS) == FP_REGS || (CLASS) == FPUPPER_REGS) ? 1 :\t\t\t\t\\\n    ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \f\n /* Stack layout; function entry, exit and calling.  */"}]}