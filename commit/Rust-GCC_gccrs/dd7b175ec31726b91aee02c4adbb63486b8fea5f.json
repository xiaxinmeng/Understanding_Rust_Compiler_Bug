{"sha": "dd7b175ec31726b91aee02c4adbb63486b8fea5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ3YjE3NWVjMzE3MjZiOTFhZWUwMmM0YWRiYjYzNDg2YjhmZWE1Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-05-31T02:29:22Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-31T02:29:22Z"}, "message": "type_traits (__or_, __and_): Add trivial definitions for a single element.\n\n2011-05-30  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/type_traits (__or_, __and_): Add trivial definitions\n\tfor a single element.\n\t* include/bits/stl_pair.h: Use __and_ in noexcept specs and\n\tconstraints.\n\t(pair<>::pair(pair&&)): Define.\n\t(pair<>::pair(const pair<>&)): Constrain with is_convertible.\n\t(pair<>::pair(pair<>&&)): Likewise, remove noexcept.\n\t* include/std/tuple: Use __and_ in noexcept specs and constraints.\n\t(_Tuple_impl<>::_Tuple_impl(allocator_arg_t, const _Alloc&,\n\t_Tuple_impl&&)): Remove noexcept.\n\t(tuple<>::tuple(_UElements&&...), tuple(const tuple<_UElements...>&),\n\ttuple(tuple<_UElements...>&&), tuple(const pair<_U1, _U2>&),\n\ttuple(pair<_U1, _U2>&&)): Constrain with is_convertible.\n\t* testsuite/20_util/tuple/moveable2.cc: Use = delete.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n\tAdjust dg-error line numbers.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n\t* testsuite/20_util/ratio/cons/cons_overflow_neg.cc: Likewise.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Likewise.\n\nFrom-SVN: r174464", "tree": {"sha": "1ff3574b3c069d087019a051f31ca6a8b0d9e4db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ff3574b3c069d087019a051f31ca6a8b0d9e4db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd7b175ec31726b91aee02c4adbb63486b8fea5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd7b175ec31726b91aee02c4adbb63486b8fea5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd7b175ec31726b91aee02c4adbb63486b8fea5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd7b175ec31726b91aee02c4adbb63486b8fea5f/comments", "author": null, "committer": null, "parents": [{"sha": "c7dfcaeb529d275c335274b47b0e8da747747b71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7dfcaeb529d275c335274b47b0e8da747747b71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7dfcaeb529d275c335274b47b0e8da747747b71"}], "stats": {"total": 203, "additions": 132, "deletions": 71}, "files": [{"sha": "ba7bd9cbc46076ef9ab1c071aa802a2c8d28058d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dd7b175ec31726b91aee02c4adbb63486b8fea5f", "patch": "@@ -1,3 +1,27 @@\n+2011-05-30  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/type_traits (__or_, __and_): Add trivial definitions\n+\tfor a single element.\n+\t* include/bits/stl_pair.h: Use __and_ in noexcept specs and\n+\tconstraints.\n+\t(pair<>::pair(pair&&)): Define.\n+\t(pair<>::pair(const pair<>&)): Constrain with is_convertible.\n+\t(pair<>::pair(pair<>&&)): Likewise, remove noexcept.\n+\t* include/std/tuple: Use __and_ in noexcept specs and constraints.\n+\t(_Tuple_impl<>::_Tuple_impl(allocator_arg_t, const _Alloc&,\n+\t_Tuple_impl&&)): Remove noexcept.\n+\t(tuple<>::tuple(_UElements&&...), tuple(const tuple<_UElements...>&),\n+\ttuple(tuple<_UElements...>&&), tuple(const pair<_U1, _U2>&),\n+\ttuple(pair<_U1, _U2>&&)): Constrain with is_convertible.\n+\t* testsuite/20_util/tuple/moveable2.cc: Use = delete.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n+\tAdjust dg-error line numbers.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n+\t* testsuite/20_util/ratio/cons/cons_overflow_neg.cc: Likewise.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Likewise.\n+\n 2011-05-31  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/std/tuple: Restore is_convertible constraint."}, {"sha": "61ebc719040f62ceec376deb24f71bfd22b18b62", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=dd7b175ec31726b91aee02c4adbb63486b8fea5f", "patch": "@@ -105,37 +105,47 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : first(__a), second(__b) { }\n \n       /** There is also a templated copy ctor for the @c pair class itself.  */\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       template<class _U1, class _U2>\n-\t_GLIBCXX_CONSTEXPR pair(const pair<_U1, _U2>& __p)\n+\tpair(const pair<_U1, _U2>& __p)\n+\t: first(__p.first), second(__p.second) { }\n+#else\n+      template<class _U1, class _U2, class = typename\n+\t       enable_if<__and_<is_convertible<const _U1&, _T1>,\n+\t\t\t\tis_convertible<const _U2&, _T2>>::value>::type>\n+\tconstexpr pair(const pair<_U1, _U2>& __p)\n \t: first(__p.first), second(__p.second) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n       constexpr pair(const pair&) = default;\n \n-      // Implicit?!? Breaks containers!!!\n-      // pair(pair&&) = default;\n+      // XXX Defaulted?!? Breaks std::map!!!\n+      pair(pair&& __p)\n+      noexcept(__and_<is_nothrow_move_constructible<_T1>,\n+\t              is_nothrow_move_constructible<_T2>>::value)\n+      : first(std::forward<first_type>(__p.first)),\n+\tsecond(std::forward<second_type>(__p.second)) { }\n \n       // DR 811.\n       template<class _U1, class = typename\n-\t       std::enable_if<std::is_convertible<_U1, _T1>::value>::type>\n+\t       enable_if<is_convertible<_U1, _T1>::value>::type>\n \tpair(_U1&& __x, const _T2& __y)\n \t: first(std::forward<_U1>(__x)), second(__y) { }\n \n       template<class _U2, class = typename\n-\t       std::enable_if<std::is_convertible<_U2, _T2>::value>::type>\n+\t       enable_if<is_convertible<_U2, _T2>::value>::type>\n \tpair(const _T1& __x, _U2&& __y)\n \t: first(__x), second(std::forward<_U2>(__y)) { }\n \n       template<class _U1, class _U2, class = typename\n-\t       std::enable_if<std::is_convertible<_U1, _T1>::value\n-\t\t\t      && std::is_convertible<_U2, _T2>::value>::type>\n+\t       enable_if<__and_<is_convertible<_U1, _T1>,\n+\t\t\t\tis_convertible<_U2, _T2>>::value>::type>\n \tpair(_U1&& __x, _U2&& __y)\n \t: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }\n \n-      template<class _U1, class _U2>\n+      template<class _U1, class _U2, class = typename\n+\t       enable_if<__and_<is_convertible<_U1, _T1>,\n+\t\t\t\tis_convertible<_U2, _T2>>::value>::type>\n \tpair(pair<_U1, _U2>&& __p)\n-\tnoexcept(std::is_nothrow_constructible<_T1, _U1&&>::value\n-\t\t && std::is_nothrow_constructible<_T2, _U2&&>::value)\n \t: first(std::forward<_U1>(__p.first)),\n \t  second(std::forward<_U2>(__p.second)) { }\n \n@@ -155,11 +165,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       pair&\n       operator=(pair&& __p)\n-      noexcept(std::is_nothrow_move_assignable<_T1>::value\n-\t       && std::is_nothrow_move_assignable<_T2>::value)\n+      noexcept(__and_<is_nothrow_move_assignable<_T1>,\n+\t              is_nothrow_move_assignable<_T2>>::value)\n       {\n-\tfirst = std::move(__p.first);\n-\tsecond = std::move(__p.second);\n+\tfirst = std::forward<first_type>(__p.first);\n+\tsecond = std::forward<second_type>(__p.second);\n \treturn *this;\n       }\n \n@@ -176,8 +186,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tpair&\n \toperator=(pair<_U1, _U2>&& __p)\n \t{\n-\t  first = std::move(__p.first);\n-\t  second = std::move(__p.second);\n+\t  first = std::forward<_U1>(__p.first);\n+\t  second = std::forward<_U2>(__p.second);\n \t  return *this;\n \t}\n "}, {"sha": "10272ccb1b21fca7e07ba5ac2410338332f18a1a", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 58, "deletions": 39, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=dd7b175ec31726b91aee02c4adbb63486b8fea5f", "patch": "@@ -224,7 +224,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _Inherited(__tail...), _Base(__head) { }\n \n       template<typename _UHead, typename... _UTail, typename = typename\n-               std::enable_if<sizeof...(_Tail)==sizeof...(_UTail)>::type> \n+               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> \n         explicit\n         _Tuple_impl(_UHead&& __head, _UTail&&... __tail)\n \t: _Inherited(std::forward<_UTail>(__tail)...),\n@@ -233,8 +233,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr _Tuple_impl(const _Tuple_impl&) = default;\n \n       _Tuple_impl(_Tuple_impl&& __in)\n-      noexcept(std::is_nothrow_move_constructible<_Head>::value\n-\t       && std::is_nothrow_move_constructible<_Inherited>::value)\n+      noexcept(__and_<is_nothrow_move_constructible<_Head>,\n+\t              is_nothrow_move_constructible<_Inherited>>::value)\n       : _Inherited(std::move(__in._M_tail())), \n \t_Base(std::forward<_Head>(__in._M_head())) { }\n \n@@ -254,13 +254,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Alloc>\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n-\t    const _Head& __head, const _Tail&... __tail)\n+\t\t    const _Head& __head, const _Tail&... __tail)\n \t: _Inherited(__tag, __a, __tail...),\n           _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }\n \n       template<typename _Alloc, typename _UHead, typename... _UTail,\n-               typename = typename std::enable_if<sizeof...(_Tail)\n-\t\t                                  ==sizeof...(_UTail)>::type>\n+               typename = typename enable_if<sizeof...(_Tail)\n+\t\t\t\t\t     == sizeof...(_UTail)>::type>\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t            _UHead&& __head, _UTail&&... __tail)\n \t: _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),\n@@ -276,8 +276,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Alloc>\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t            _Tuple_impl&& __in)\n-\tnoexcept(std::is_nothrow_move_constructible<_Head>::value\n-\t\t && std::is_nothrow_move_constructible<_Inherited>::value)\n \t: _Inherited(__tag, __a, std::move(__in._M_tail())), \n \t  _Base(__use_alloc<_Head, _Alloc, _Head>(__a),\n \t        std::forward<_Head>(__in._M_head())) { }\n@@ -305,8 +303,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _Tuple_impl&\n       operator=(_Tuple_impl&& __in)\n-      noexcept(std::is_nothrow_move_assignable<_Head>::value\n-\t       && std::is_nothrow_move_assignable<_Inherited>::value)\n+      noexcept(__and_<is_nothrow_move_assignable<_Head>,\n+\t              is_nothrow_move_assignable<_Inherited>>::value)\n       {\n \t_M_head() = std::forward<_Head>(__in._M_head());\n \t_M_tail() = std::move(__in._M_tail());\n@@ -359,25 +357,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _Inherited(__elements...) { }\n \n       template<typename... _UElements, typename = typename\n-\t       std::enable_if<sizeof...(_UElements)\n-\t\t\t      == sizeof...(_Elements)>::type>\n-        explicit\n+\tenable_if<__and_<integral_constant<bool, sizeof...(_UElements)\n+\t\t\t\t\t   == sizeof...(_Elements)>,\n+\t\t\t __and_<is_convertible<_UElements,\n+\t\t\t\t\t       _Elements>...>>::value>::type>\n+\texplicit\n         tuple(_UElements&&... __elements)\n \t: _Inherited(std::forward<_UElements>(__elements)...) {\t}\n \n       constexpr tuple(const tuple&) = default;\n       tuple(tuple&&) = default;\n \n       template<typename... _UElements, typename = typename\n-\t       std::enable_if<sizeof...(_UElements)\n-\t\t\t      == sizeof...(_Elements)>::type>\n+\tenable_if<__and_<integral_constant<bool, sizeof...(_UElements)\n+\t\t\t\t\t   == sizeof...(_Elements)>,\n+\t\t\t __and_<is_convertible<const _UElements&,\n+\t\t\t\t\t       _Elements>...>>::value>::type>\n         tuple(const tuple<_UElements...>& __in)\n         : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))\n         { }\n \n       template<typename... _UElements, typename = typename\n-\t       std::enable_if<sizeof...(_UElements)\n-\t\t\t      == sizeof...(_Elements)>::type>\n+\tenable_if<__and_<integral_constant<bool, sizeof...(_UElements)\n+\t\t\t\t\t   == sizeof...(_Elements)>,\n+\t\t\t __and_<is_convertible<_UElements,\n+\t\t\t\t\t       _Elements>...>>::value>::type>\n         tuple(tuple<_UElements...>&& __in)\n         : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }\n \n@@ -393,8 +397,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _Inherited(__tag, __a, __elements...) { }\n \n       template<typename _Alloc, typename... _UElements, typename = typename\n-\t       std::enable_if<sizeof...(_UElements)\n-\t\t\t      == sizeof...(_Elements)>::type>\n+\t       enable_if<sizeof...(_UElements)\n+\t\t\t == sizeof...(_Elements)>::type>\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n \t      _UElements&&... __elements)\n \t: _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)\n@@ -409,17 +413,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }\n \n       template<typename _Alloc, typename... _UElements, typename = typename\n-\t       std::enable_if<sizeof...(_UElements)\n-\t\t\t      == sizeof...(_Elements)>::type>\n+\t       enable_if<sizeof...(_UElements)\n+\t\t\t == sizeof...(_Elements)>::type>\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n \t      const tuple<_UElements...>& __in)\n \t: _Inherited(__tag, __a,\n \t             static_cast<const _Tuple_impl<0, _UElements...>&>(__in))\n \t{ }\n \n       template<typename _Alloc, typename... _UElements, typename = typename\n-\t       std::enable_if<sizeof...(_UElements)\n-\t\t\t      == sizeof...(_Elements)>::type>\n+\t       enable_if<sizeof...(_UElements)\n+\t\t\t == sizeof...(_Elements)>::type>\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n \t      tuple<_UElements...>&& __in)\n \t: _Inherited(__tag, __a,\n@@ -435,15 +439,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       tuple&\n       operator=(tuple&& __in)\n-      noexcept(std::is_nothrow_move_assignable<_Inherited>::value)\n+      noexcept(is_nothrow_move_assignable<_Inherited>::value)\n       {\n \tstatic_cast<_Inherited&>(*this) = std::move(__in);\n \treturn *this;\n       }\n \n       template<typename... _UElements, typename = typename\n-\t       std::enable_if<sizeof...(_UElements)\n-\t\t\t      == sizeof...(_Elements)>::type>\n+\t       enable_if<sizeof...(_UElements)\n+\t\t\t == sizeof...(_Elements)>::type>\n         tuple&\n         operator=(const tuple<_UElements...>& __in)\n         {\n@@ -452,8 +456,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename... _UElements, typename = typename\n-\t       std::enable_if<sizeof...(_UElements)\n-\t\t\t      == sizeof...(_Elements)>::type>\n+\t       enable_if<sizeof...(_UElements)\n+\t\t\t == sizeof...(_Elements)>::type>\n         tuple&\n         operator=(tuple<_UElements...>&& __in)\n         {\n@@ -488,28 +492,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr tuple(const _T1& __a1, const _T2& __a2)\n       : _Inherited(__a1, __a2) { }\n \n-      template<typename _U1, typename _U2>\n+      template<typename _U1, typename _U2, typename = typename\n+\t       enable_if<__and_<is_convertible<_U1, _T1>,\n+\t\t\t\tis_convertible<_U2, _T2>>::value>::type>\n         explicit\n         tuple(_U1&& __a1, _U2&& __a2)\n \t: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }\n \n       constexpr tuple(const tuple&) = default;\n       tuple(tuple&&) = default;\n \n-      template<typename _U1, typename _U2>\n+      template<typename _U1, typename _U2, typename = typename\n+\tenable_if<__and_<is_convertible<const _U1&, _T1>,\n+\t\t\t is_convertible<const _U2&, _T2>>::value>::type>\n         tuple(const tuple<_U1, _U2>& __in)\n \t: _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }\n \n-      template<typename _U1, typename _U2>\n+      template<typename _U1, typename _U2, typename = typename\n+\t       enable_if<__and_<is_convertible<_U1, _T1>,\n+\t\t\t\tis_convertible<_U2, _T2>>::value>::type>\n         tuple(tuple<_U1, _U2>&& __in)\n \t: _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }\n \n-      template<typename _U1, typename _U2>\n+      template<typename _U1, typename _U2, typename = typename\n+\tenable_if<__and_<is_convertible<const _U1&, _T1>,\n+\t\t\t is_convertible<const _U2&, _T2>>::value>::type>\n         tuple(const pair<_U1, _U2>& __in)\n \t: _Inherited(__in.first, __in.second) { }\n \n-      template<typename _U1, typename _U2>\n-        tuple(pair<_U1, _U2>&& __in)\n+      template<typename _U1, typename _U2, typename = typename\n+\t       enable_if<__and_<is_convertible<_U1, _T1>,\n+\t\t\t\tis_convertible<_U2, _T2>>::value>::type>\n+         tuple(pair<_U1, _U2>&& __in)\n \t: _Inherited(std::forward<_U1>(__in.first),\n \t\t     std::forward<_U2>(__in.second)) { }\n \n@@ -568,7 +582,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       tuple&\n       operator=(tuple&& __in)\n-      noexcept(std::is_nothrow_move_assignable<_Inherited>::value)\n+      noexcept(is_nothrow_move_assignable<_Inherited>::value)\n       {\n \tstatic_cast<_Inherited&>(*this) = std::move(__in);\n \treturn *this;\n@@ -615,6 +629,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   /// tuple (1-element).\n+  // TODO: Should be simply removed when c++/49225 is fixed, worst case\n+  //       together with a different way to constrain the constructors\n+  //       of the primary template.\n   template<typename _T1>\n     class tuple<_T1> : public _Tuple_impl<0, _T1>\n     {\n@@ -629,19 +646,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _Inherited(__a1) { }\n \n       template<typename _U1, typename = typename\n-\t       std::enable_if<std::is_convertible<_U1, _T1>::value>::type>\n+\t       enable_if<is_convertible<_U1, _T1>::value>::type>\n         explicit\n         tuple(_U1&& __a1)\n \t: _Inherited(std::forward<_U1>(__a1)) { }\n \n       constexpr tuple(const tuple&) = default;\n       tuple(tuple&&) = default;\n \n-      template<typename _U1>\n+      template<typename _U1, typename = typename\n+\t       enable_if<is_convertible<const _U1&, _T1>::value>::type>\n         tuple(const tuple<_U1>& __in)\n \t: _Inherited(static_cast<const _Tuple_impl<0, _U1>&>(__in)) { }\n \n-      template<typename _U1>\n+      template<typename _U1, typename = typename\n+\t       enable_if<is_convertible<_U1, _T1>::value>::type>\n         tuple(tuple<_U1>&& __in)\n \t: _Inherited(static_cast<_Tuple_impl<0, _U1>&&>(__in)) { }\n \n@@ -686,7 +705,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       tuple&\n       operator=(tuple&& __in)\n-      noexcept(std::is_nothrow_move_assignable<_Inherited>::value)\n+      noexcept(is_nothrow_move_assignable<_Inherited>::value)\n       {\n \tstatic_cast<_Inherited&>(*this) = std::move(__in);\n \treturn *this;"}, {"sha": "a8842eda95baf5c6d0849a9f5990e5dbca0a8ebc", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=dd7b175ec31726b91aee02c4adbb63486b8fea5f", "patch": "@@ -59,9 +59,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, _Tp>\n     struct integral_constant;\n \n-  template<typename, typename, typename...>\n+  template<typename...>\n     struct __or_;\n \n+  template<typename _B1>\n+    struct __or_<_B1>\n+    : public _B1\n+    { };\n+\n   template<typename _B1, typename _B2>\n     struct __or_<_B1, _B2>\n     : public conditional<_B1::value, _B1, _B2>::type\n@@ -72,9 +77,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type\n     { };\n \n-  template<typename, typename, typename...>\n+  template<typename...>\n     struct __and_;\n \n+  template<typename _B1>\n+    struct __and_<_B1>\n+    : public _B1\n+    { };\n+\n   template<typename _B1, typename _B2>\n     struct __and_<_B1, _B2>\n     : public conditional<_B1::value, _B2, _B1>::type"}, {"sha": "8fcdab40a583c7c4628218db17c11418928f8d83", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=dd7b175ec31726b91aee02c4adbb63486b8fea5f", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1715 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1725 }\n \n #include <utility>\n "}, {"sha": "77328d8a4c2bd28d405ff7982edf62ac14adc747", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=dd7b175ec31726b91aee02c4adbb63486b8fea5f", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1501 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1465 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1511 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1475 }"}, {"sha": "572953eef27bc7710c5a037fc8e59b88f5ee5182", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=dd7b175ec31726b91aee02c4adbb63486b8fea5f", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1425 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1389 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1435 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1399 }"}, {"sha": "e6a71c3fe5d326025fb7b0c158cffc3b7063ae93", "filename": "libstdc++-v3/testsuite/20_util/ratio/cons/cons_overflow_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc?ref=dd7b175ec31726b91aee02c4adbb63486b8fea5f", "patch": "@@ -51,4 +51,4 @@ test04()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 46 }\n // { dg-error \"denominator cannot be zero\" \"\" { target *-*-* } 268 }\n // { dg-error \"out of range\" \"\" { target *-*-* } 269 }\n-// { dg-error \"overflow in constant expression\" \"\" { target *-*-* } 99 }\n+// { dg-error \"overflow in constant expression\" \"\" { target *-*-* } 109 }"}, {"sha": "5ed8de56a694260de31e525b4c1611ae73631bea", "filename": "libstdc++-v3/testsuite/20_util/tuple/moveable2.cc", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fmoveable2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fmoveable2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fmoveable2.cc?ref=dd7b175ec31726b91aee02c4adbb63486b8fea5f", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -17,7 +17,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <tuple>\n #include <utility>\n \n@@ -30,9 +29,8 @@ struct MoveOnly\n   MoveOnly& operator=(MoveOnly&&)\n   { return *this; }\n \n-private:\n-  MoveOnly(MoveOnly const&); // = delete\n-  MoveOnly& operator=(MoveOnly const&); // = delete\n+  MoveOnly(MoveOnly const&) = delete;\n+  MoveOnly& operator=(MoveOnly const&) = delete;\n };\n \n MoveOnly"}, {"sha": "ace80cf79c04678364259fd44779b4731f396169", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd7b175ec31726b91aee02c4adbb63486b8fea5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=dd7b175ec31726b91aee02c4adbb63486b8fea5f", "patch": "@@ -51,9 +51,9 @@ main()\n // { dg-warning \"note\" \"\" { target *-*-* } 485 }\n // { dg-warning \"note\" \"\" { target *-*-* } 479 }\n // { dg-warning \"note\" \"\" { target *-*-* } 469 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 868 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 887 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1056 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1050 }\n // { dg-warning \"note\" \"\" { target *-*-* } 342 }\n // { dg-warning \"note\" \"\" { target *-*-* } 292 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 214 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 224 }"}]}