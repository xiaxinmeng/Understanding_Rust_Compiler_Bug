{"sha": "ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ0ZmYzMTA4NmQ4ZTMzOGViZDdiMzA3MjUxNDVmNmFkNTdkNjNhZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1997-04-30T18:13:30Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1997-04-30T18:13:30Z"}, "message": "x\n\nFrom-SVN: r13994", "tree": {"sha": "08953da2d888b7041436e28ef4a8fa401e61163b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08953da2d888b7041436e28ef4a8fa401e61163b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/comments", "author": null, "committer": null, "parents": [{"sha": "a4b3b54a70b9c9cccd9b715ec896e25bfc48131f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4b3b54a70b9c9cccd9b715ec896e25bfc48131f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4b3b54a70b9c9cccd9b715ec896e25bfc48131f"}], "stats": {"total": 214, "additions": 114, "deletions": 100}, "files": [{"sha": "59e9a13d628c5db6eca99795ab41faa192418818", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -1450,7 +1450,7 @@ extern int a29k_debug_reg_map[];\n /* This how to write an assembler directive to FILE to switch to\n    section NAME for DECL.  */\n \n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME) \\\n+#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n   fprintf (FILE, \"\\t.sect %s, bss\\n\\t.use %s\\n\", NAME, NAME)\n \n /* This is how to output the definition of a user-level label named NAME,"}, {"sha": "6eb94cd86b2376dd7a5cd619cdb5f60f70d2d65f", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -276,10 +276,10 @@ dtors_section ()\t\t\t\t\t\t\t\\\n \n    We make the section read-only and executable for a function decl,\n    read-only for a const data decl, and writable for a non-const data decl.  */\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME) \\\n+#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n   fprintf (FILE, \".section\\t%s,\\\"%s\\\",@progbits\\n\", NAME, \\\n \t   (DECL) && TREE_CODE (DECL) == FUNCTION_DECL ? \"ax\" : \\\n-\t   (DECL) && TREE_READONLY (DECL) ? \"a\" : \"aw\")\n+\t   (DECL) && DECL_READONLY_SECTION (DECL, RELOC) ? \"a\" : \"aw\")\n \n \n /* A C statement (sans semicolon) to output an element in the table of"}, {"sha": "18a07187e7e3baaf75f98ccaad86512dd9943149", "filename": "gcc/config/arm/coff.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Farm%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Farm%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcoff.h?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -87,11 +87,11 @@ do {\t\t\t\t\t\t\t\t\\\n    NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n    NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n    define this macro in such cases.  */\n-#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME) \\\n+#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME, RELOC) \\\n do {\t\t\t\t\t\t\t\t\\\n   if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n     fprintf (STREAM, \"\\t.section %s,\\\"x\\\"\\n\", (NAME));\t\t\\\n-  else if ((DECL) && TREE_READONLY (DECL))\t\t\t\\\n+  else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\\\n     fprintf (STREAM, \"\\t.section %s,\\\"\\\"\\n\", (NAME));\t\t\\\n   else\t\t\t\t\t\t\t\t\\\n     fprintf (STREAM, \"\\t.section %s,\\\"w\\\"\\n\", (NAME));\t\t\\"}, {"sha": "60a053245706206f6e48f2cf1be8493ffcf21536", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -1182,7 +1182,7 @@ readonly_data() \t\t\t\t\t\t\\\n    NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n    define this macro in such cases.  */\n \n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME) \\\n+#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n   fprintf (FILE, \"\\t.section %s\\n\", NAME)\n \n /* This is how to output the definition of a user-level label named NAME,"}, {"sha": "88b367bc1cb40f64d592d91a1ea05ec0017a9a96", "filename": "gcc/config/i386/cygwin32.h", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fi386%2Fcygwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fi386%2Fcygwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin32.h?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -172,27 +172,22 @@ while (0)\n    symbols must be explicitly imported from shared libraries (DLLs).  */\n #define MULTIPLE_SYMBOL_SPACES\n \n-/* For objects going into their own sections, a C expression of name of the\n-   section, expressed as a STRING_CST node, to put DECL into.  The\n-   STRING_CST node must be allocated in the saveable obstack.  Function\n-   build_string can be used to do this.  Define this macro if the name of a\n-   symbol cannot be used as its section name.  */\n-extern union tree_node *i386_pe_unique_section ();\n-#define UNIQUE_SECTION(DECL) i386_pe_unique_section (DECL)\n+#define UNIQUE_SECTION_P(DECL) DECL_ONE_ONLY (DECL)\n+extern void i386_pe_unique_section ();\n+#define UNIQUE_SECTION(DECL,RELOC) i386_pe_unique_section (DECL, RELOC)\n \n-#define MAKE_DECL_ONE_ONLY(DECL)\t\t\t\\\n-  DECL_SECTION_NAME (DECL) = UNIQUE_SECTION (DECL)\n+#define SUPPORTS_ONE_ONLY 1\n \n /* A C statement to output something to the assembler file to switch to section\n    NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n    NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n    define this macro in such cases.  */\n #undef ASM_OUTPUT_SECTION_NAME\n-#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME) \\\n+#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME, RELOC)\t\\\n do {\t\t\t\t\t\t\t\t\\\n   if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n     fprintf (STREAM, \"\\t.section %s,\\\"x\\\"\\n\", (NAME));\t\t\\\n-  else if ((DECL) && TREE_READONLY (DECL))\t\t\t\\\n+  else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\\\n     fprintf (STREAM, \"\\t.section %s,\\\"\\\"\\n\", (NAME));\t\t\\\n   else\t\t\t\t\t\t\t\t\\\n     fprintf (STREAM, \"\\t.section %s,\\\"w\\\"\\n\", (NAME));\t\t\\"}, {"sha": "c256f7d43554a512ca7452249792244a381001bf", "filename": "gcc/config/i386/go32.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fi386%2Fgo32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fi386%2Fgo32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgo32.h?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -58,7 +58,7 @@ dtor_section ()\t\t\t\t\t\t\t\\\n   } while (0)\n \n /* Allow (eg) __attribute__((section \"locked\")) to work */\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME)\\\n+#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC)\\\n   do {\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.section %s\\n\", NAME);\t\\\n   } while (0)\n@@ -81,11 +81,6 @@ dtor_section ()\t\t\t\t\t\t\t\\\n \toutput_file_directive (FILE, main_input_filename);\t\t\\\n   } while (0)\n \n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME)\\\n-  do {\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.section %s\\n\", NAME);\t\\\n-  } while (0)\n-\n /* This is how to output an assembler line\n    that says to advance the location counter\n    to a multiple of 2**LOG bytes.  */"}, {"sha": "d5471ecdec3038c33e0f05db993ae6e3d887667f", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -477,18 +477,18 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define USER_LABEL_PREFIX \"\"\n \n #undef ASM_OUTPUT_SECTION_NAME\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME) \\\n+#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n do {\t\t\t\t\t\t\t\t\t\\\n   char *snam = NAME ;\t\t\t\t\t\t\t\\\n   if (strcmp(NAME, \".gcc_except_table\") == 0) snam = \".gccexc\" ;\t\\\n   if (TARGET_ELF)\t\t\t\t\t\t\t\\\n     fprintf (FILE, \".section\\t%s,\\\"%s\\\",@progbits\\n\", NAME, \t\t\\\n \t   (DECL) && TREE_CODE (DECL) == FUNCTION_DECL ? \"ax\" : \t\\\n-\t   (DECL) && TREE_READONLY (DECL) ? \"a\" : \"aw\");\t\t\\\n+\t   (DECL) && DECL_READONLY_SECTION (DECL, RELOC) ? \"a\" : \"aw\");\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     fprintf (FILE, \".section\\t%s,\\\"%s\\\"\\n\", snam,\t\t\t\\\n \t(DECL) && TREE_CODE (DECL) == FUNCTION_DECL ? \"x\" : \t\t\\\n-\t(DECL) && TREE_READONLY (DECL) ? \"a\" : \"w\");\t\t\t\\\n+\t(DECL) && DECL_READONLY_SECTION (DECL, RELOC) ? \"a\" : \"w\");\t\\\n } while (0)\n \n #undef ASM_OUTPUT_SKIP"}, {"sha": "72666921ed184ff7de3862ad2de187d56a0a77f0", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -67,8 +67,9 @@ gen_stdcall_suffix (decl)\n /* Cover function for UNIQUE_SECTION.  */\n \n tree\n-i386_pe_unique_section (decl)\n+i386_pe_unique_section (decl, reloc)\n      tree decl;\n+     int reloc;\n {\n   int len;\n   char *name,*string,*prefix;\n@@ -80,7 +81,7 @@ i386_pe_unique_section (decl)\n      (everything from the $ on is stripped).  */\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     prefix = \".text$\";\n-  else if (TREE_READONLY (decl))\n+  else if (DECL_READONLY_SECTION (decl, reloc))\n     prefix = \".rdata$\";\n   else\n     prefix = \".data$\";"}, {"sha": "acd45e7bb2d12713122b87c923738ef20129756f", "filename": "gcc/config/m68k/coff.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fm68k%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fm68k%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fcoff.h?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -103,10 +103,10 @@ Boston, MA 02111-1307, USA.  */\n /* Support generic sections */\n \n #undef ASM_OUTPUT_SECTION_NAME\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME) \\\n+#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n   fprintf((FILE), \".section\\t%s,\\\"%c\\\"\\n\", (NAME), \\\n \t  (DECL) && (TREE_CODE (DECL) == FUNCTION_DECL || \\\n-\t\t     TREE_READONLY (DECL)) ? 'x' : 'd')\n+\t\t     DECL_READONLY_SECTION (DECL, RELOC)) ? 'x' : 'd')\n \n /* Support the ctors and dtors sections for g++.  */\n "}, {"sha": "3d1a91bba8f5b4cfc88aed2ea1bdad181b9b9566", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -83,12 +83,12 @@ do {\t\t\t\t\t\t\t\\\n    NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n    define this macro in such cases.  */\n \n-#define ASM_OUTPUT_SECTION_NAME(F, DECL, NAME) \\\n+#define ASM_OUTPUT_SECTION_NAME(F, DECL, NAME, RELOC) \\\n do {\t\t\t\t\t\t\t\t\\\n   extern FILE *asm_out_text_file;\t\t\t\t\\\n   if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n     fprintf (asm_out_text_file, \"\\t.section %s,\\\"ax\\\",@progbits\\n\", (NAME)); \\\n-  else if ((DECL) && TREE_READONLY (DECL))\t\t\t\\\n+  else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\\\n     fprintf (F, \"\\t.section %s,\\\"a\\\",@progbits\\n\", (NAME));\t\\\n   else\t\t\t\t\t\t\t\t\\\n     fprintf (F, \"\\t.section %s,\\\"aw\\\",@progbits\\n\", (NAME));\t\\"}, {"sha": "dd9914576a0b2c4fb54fe81f0438e28e202d2582", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -338,12 +338,12 @@ dtors_section ()\t\t\t\t\t\t\t\\\n    NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n    NULL_TREE.  */\n \n-#define ASM_OUTPUT_SECTION_NAME(F, DECL, NAME)\t\t\t\t\\\n+#define ASM_OUTPUT_SECTION_NAME(F, DECL, NAME, RELOC)\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   extern FILE *asm_out_text_file;\t\t\t\t\t\\\n   if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n     fprintf (asm_out_text_file, \"\\t.section %s,1,6,4,4\\n\", (NAME));\t\\\n-  else if ((DECL) && TREE_READONLY (DECL))\t\t\t\t\\\n+  else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n     fprintf (F, \"\\t.section %s,1,2,0,8\\n\", (NAME));\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     fprintf (F, \"\\t.section %s,1,3,0,8\\n\", (NAME));\t\t\t\\"}, {"sha": "9ed8dfd8dfc154507ca5286a2159a887778587bb", "filename": "gcc/config/mips/netbsd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fnetbsd.h?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -211,12 +211,12 @@ do {\t\t\t\t\t\t\t\t\t \\\n  NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n  define this macro in such cases.\n */\n-#define ASM_OUTPUT_SECTION_NAME(F, DECL, NAME)                               \\\n+#define ASM_OUTPUT_SECTION_NAME(F, DECL, NAME, RELOC)                        \\\n do {                                                                         \\\n   extern FILE *asm_out_text_file;                                            \\\n   if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)                           \\\n     fprintf (asm_out_text_file, \"\\t.section %s,\\\"ax\\\",@progbits\\n\", (NAME)); \\\n-  else if ((DECL) && TREE_READONLY (DECL))                                   \\\n+  else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))                    \\\n     fprintf (F, \"\\t.section %s,\\\"a\\\",@progbits\\n\", (NAME));                  \\\n   else                                                                       \\\n     fprintf (F, \"\\t.section %s,\\\"aw\\\",@progbits\\n\", (NAME));                 \\"}, {"sha": "4751a8d2a4fd00a0c18bda20d9a07375a9d73348", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -1976,15 +1976,15 @@ do { fputs (\"\\t.SPACE $PRIVATE$\\n\\\n \n    We make the section read-only and executable for a function decl,\n    read-only for a const data decl, and writable for a non-const data decl.  */\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME) \\\n+#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n   if (DECL && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       fputs (\"\\t.SPACE $TEXT$\\n\", FILE);\t\t\t\\\n       fprintf (FILE,\t\t\t\t\t\t\\\n \t       \"\\t.SUBSPA %s%s%s,QUAD=0,ALIGN=8,ACCESS=44,CODE_ONLY,SORT=24\\n\",\\\n \t       TARGET_GAS ? \"\" : \"$\", NAME, TARGET_GAS ? \"\" : \"$\"); \\\n     }\t\t\t\t\t\t\t\t\\\n-  else if (DECL && TREE_READONLY (DECL))\t\t\t\\\n+  else if (DECL && DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       fputs (\"\\t.SPACE $TEXT$\\n\", FILE);\t\t\t\\\n       fprintf (FILE,\t\t\t\t\t\t\\"}, {"sha": "d4043002a1c142ec7fa55177478b88f9b53036eb", "filename": "gcc/config/psos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fpsos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fpsos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpsos.h?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -87,10 +87,10 @@ while (0)\n \n /* Switch into a generic section. */\n \n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME) \\\n+#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n   fprintf (FILE, \".section\\t%s,\\\"%s\\\",@progbits\\n\", NAME, \\\n \t   (DECL) && TREE_CODE (DECL) == FUNCTION_DECL ? \"ax\" : \\\n-\t   (DECL) && TREE_READONLY (DECL) ? \"a\" : \"aw\")\n+\t   (DECL) && DECL_READONLY_SECTION (DECL, RELOC) ? \"a\" : \"aw\")\n \n \n /* Define the pseudo-ops used to switch to the .ctors and .dtors"}, {"sha": "80b7b165d0cc052e41f962df5f89e59f0b43baf2", "filename": "gcc/config/ptx4.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fptx4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fptx4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fptx4.h?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -541,10 +541,10 @@ dtors_section ()\t\t\t\t\t\t\t\\\n \n    We make the section read-only and executable for a function decl,\n    read-only for a const data decl, and writable for a non-const data decl. */\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME) \\\n+#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n   fprintf (FILE, \".section\\t%s,\\\"%s\\\",@progbits\\n\", NAME, \\\n \t   (DECL) && TREE_CODE (DECL) == FUNCTION_DECL ? \"ax\" : \\\n-\t   (DECL) && TREE_READONLY (DECL) ? \"a\" : \"aw\")\n+\t   (DECL) && DECL_READONLY_SECTION (DECL, RELOC) ? \"a\" : \"aw\")\n \n \n /* A C statement (sans semicolon) to output an element in the table of"}, {"sha": "635bb329d116dbea534a5c99b69763db6656ce91", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -865,7 +865,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n  */\n \n #undef\tASM_OUTPUT_SECTION_NAME\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME)\t\t\t\\\n+#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   static struct section_info\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -883,7 +883,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (DECL && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n     type = SECT_EXEC, mode = \"ax\";\t\t\t\t\t\\\n-  else if (DECL && TREE_READONLY (DECL) && !TARGET_RELOCATABLE && !flag_pic) \\\n+  else if (DECL && DECL_READONLY_SECTION (DECL, RELOC) && !TARGET_RELOCATABLE && !flag_pic) \\\n     type = SECT_RO, mode = \"a\";\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     type = SECT_RW, mode = \"aw\";\t\t\t\t\t\\"}, {"sha": "022c9bcb4c42d2aabe7baf6434c14d07a3433f8f", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -1373,7 +1373,7 @@ dtors_section()\t\t\t\t\t\t\t\\\n    NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n    define this macro in such cases.  */\n \n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME) \\\n+#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n    do { fprintf (FILE, \".section\\t%s\\n\", NAME); } while (0)\n \n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME) \\"}, {"sha": "96e49f9babe61f872e9912479c2e53ab60f0aa75", "filename": "gcc/config/sparc/sysv4.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsysv4.h?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -186,12 +186,12 @@ do { ASM_OUTPUT_ALIGN ((FILE), Pmode == SImode ? 2 : 3);\t\t\\\n    define this macro in such cases.  */\n \n #undef\tASM_OUTPUT_SECTION_NAME\t/* Override svr4.h's definition.  */\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME) \\\n+#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n do {\t\t\t\t\t\t\t\t\t\\\n   if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n     fprintf (FILE, \".section\\t\\\"%s%s\\\",#alloc,#execinstr\\n\",\t\t\\\n \t     flag_function_sections ? \".text%\" : \"\", (NAME));\t\t\\\n-  else if ((DECL) && TREE_READONLY (DECL))\t\t\t\t\\\n+  else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n     fprintf (FILE, \".section\\t\\\"%s\\\",#alloc\\n\", (NAME));\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     fprintf (FILE, \".section\\t\\\"%s\\\",#alloc,#write\\n\", (NAME));\t\t\\"}, {"sha": "d70aa1175582fb3f8bb6e191ca68f9cab3cc29ae", "filename": "gcc/config/svr4.h", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fsvr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fconfig%2Fsvr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr4.h?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -593,19 +593,17 @@ dtors_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-\n-/*\n- * Switch into a generic section.\n- *\n- * We make the section read-only and executable for a function decl,\n- * read-only for a const data decl, and writable for a non-const data decl.\n- *\n- * If the section has already been defined, we must not\n- * emit the attributes here. The SVR4 assembler does not\n- * recognize section redefinitions.\n- * If DECL is NULL, no attributes are emitted.\n- */\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME)\t\t\t\\\n+/* Switch into a generic section.\n+ \n+   We make the section read-only and executable for a function decl,\n+   read-only for a const data decl, and writable for a non-const data decl.\n+ \n+   If the section has already been defined, we must not\n+   emit the attributes here. The SVR4 assembler does not\n+   recognize section redefinitions.\n+   If DECL is NULL, no attributes are emitted.  */\n+\n+#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   static struct section_info\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -623,7 +621,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (DECL && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n     type = SECT_EXEC, mode = \"ax\";\t\t\t\t\t\\\n-  else if (DECL && TREE_READONLY (DECL))\t\t\t\t\\\n+  else if (DECL && DECL_READONLY_SECTION (DECL, RELOC))\t\t\t\\\n     type = SECT_RO, mode = \"a\";\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     type = SECT_RW, mode = \"aw\";\t\t\t\t\t\\\n@@ -647,21 +645,20 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n-/* A C statement (sans semicolon) to mark DECL to be emitted as a\n-   public symbol such that extra copies in multiple translation units will\n-   be discarded by the linker.  */\n-#define MAKE_DECL_ONE_ONLY(DECL)\t\t\t\t\\\n+#define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n+#define UNIQUE_SECTION_P(DECL) (DECL_ONE_ONLY (DECL))\n+#define UNIQUE_SECTION(DECL,RELOC)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n   int len;\t\t\t\t\t\t\t\\\n   char *name, *string, *prefix;\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n-  DECL_WEAK (DECL) = 1;\t\t\t\t\t\t\\\n-  \t\t\t\t\t\t\t\t\\\n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\\\n \t\t\t\t\t\t\t\t\\\n-  if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n+  if (! DECL_ONE_ONLY (DECL))\t\t\t\t\t\\\n+    prefix = \".\";\t\t\t\t\t\t\\\n+  else if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n     prefix = \".gnu.linkonce.t.\";\t\t\t\t\\\n-  else if (TREE_READONLY (DECL))\t\t\t\t\\\n+  else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\t\\\n     prefix = \".gnu.linkonce.r.\";\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\\\n     prefix = \".gnu.linkonce.d.\";\t\t\t\t\\\n@@ -711,10 +708,7 @@ do {\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else if (TREE_CODE (DECL) == VAR_DECL)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      if (!TREE_READONLY (DECL) || TREE_SIDE_EFFECTS (DECL)\t\t\\\n-\t  || !DECL_INITIAL (DECL)\t\t\t\t\t\\\n-\t  || (DECL_INITIAL (DECL) != error_mark_node\t\t\t\\\n-\t      && !TREE_CONSTANT (DECL_INITIAL (DECL))))\t\t\t\\\n+      if (! DECL_READONLY_SECTION (DECL, RELOC))\t\t\t\\\n \tdata_section ();\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \tconst_section ();\t\t\t\t\t\t\\"}, {"sha": "749043b38fad16e2bc8e5cb3a31a89388262e798", "filename": "gcc/output.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -134,8 +134,9 @@ extern int in_text_section\t\tPROTO((void));\n #ifdef TREE_CODE\n /* Tell assembler to change to section NAME for DECL.\n    If DECL is NULL, just switch to section NAME.\n-   If NAME is NULL, get the name from DECL.  */\n-extern void named_section\t\tPROTO((tree, char *));\n+   If NAME is NULL, get the name from DECL.\n+   If RELOC is 1, the initializer for DECL contains relocs.  */\n+extern void named_section\t\tPROTO((tree, char *, int));\n \n /* Tell assembler to switch to the section for function DECL.  */\n extern void function_section\t\tPROTO((tree));\n@@ -429,3 +430,14 @@ extern int sdb_begin_function_line;\n #ifdef BUFSIZ\n extern FILE *asm_out_file;\n #endif\n+\n+/* Decide whether DECL needs to be in a writable section.  RELOC is the same\n+   as for SELECT_SECTION.  */\n+\n+#define DECL_READONLY_SECTION(DECL,RELOC)\t\t\\\n+  (TREE_READONLY (DECL)\t\t\t\t\t\\\n+   && ! TREE_THIS_VOLATILE (DECL)\t\t\t\\\n+   && DECL_INITIAL (DECL)\t\t\t\t\\\n+   && (DECL_INITIAL (DECL) == error_mark_node\t\t\\\n+       || TREE_CONSTANT (DECL_INITIAL (DECL)))\t\t\\\n+   && ! (RELOC && (flag_pic || DECL_ONE_ONLY (DECL))))"}, {"sha": "3d4e87afa0bf71c74e1f650400c1ce83cbcd1a0d", "filename": "gcc/varasm.c", "status": "modified", "additions": 42, "deletions": 25, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4ff31086d8e338ebd7b30725145f6ad57d63ae/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=ad4ff31086d8e338ebd7b30725145f6ad57d63ae", "patch": "@@ -250,12 +250,14 @@ in_data_section ()\n \n /* Tell assembler to change to section NAME for DECL.\n    If DECL is NULL, just switch to section NAME.\n-   If NAME is NULL, get the name from DECL.  */\n+   If NAME is NULL, get the name from DECL.\n+   If RELOC is 1, the initializer for DECL contains relocs.  */\n \n void\n-named_section (decl, name)\n+named_section (decl, name, reloc)\n      tree decl;\n      char *name;\n+     int reloc;\n {\n   if (decl != NULL_TREE\n       && TREE_CODE_CLASS (TREE_CODE (decl)) != 'd')\n@@ -270,7 +272,7 @@ named_section (decl, name)\n       in_section = in_named;\n     \n #ifdef ASM_OUTPUT_SECTION_NAME\n-      ASM_OUTPUT_SECTION_NAME (asm_out_file, decl, name);\n+      ASM_OUTPUT_SECTION_NAME (asm_out_file, decl, name, reloc);\n #else\n       /* Section attributes are not supported if this macro isn't provided -\n \t some host formats don't support them at all.  The front-end should\n@@ -280,6 +282,29 @@ named_section (decl, name)\n     }\n }\n \n+#ifdef ASM_OUTPUT_SECTION_NAME\n+#ifndef UNIQUE_SECTION\n+#define UNIQUE_SECTION(DECL,RELOC)\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n+  int len;\t\t\t\t\t\t\t\\\n+  char *name, *string;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\\\n+  /* Strip off any encoding in name.  */\t\t\t\\\n+  STRIP_NAME_ENCODING (name, name);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+  len = strlen (name) + 1;\t\t\t\t\t\\\n+  string = alloca (len + 1);\t\t\t\t\t\\\n+  sprintf (string, \".%s\", name);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+  DECL_SECTION_NAME (DECL) = build_string (len, string);\t\\\n+} while (0)\n+#endif\n+#ifndef UNIQUE_SECTION_P\n+#define UNIQUE_SECTION_P(DECL) 0\n+#endif\n+#endif\n+\n #ifdef BSS_SECTION_ASM_OP\n \n /* Tell the assembler to switch to the bss section.  */\n@@ -376,7 +401,7 @@ function_section (decl)\n {\n   if (decl != NULL_TREE\n       && DECL_SECTION_NAME (decl) != NULL_TREE)\n-    named_section (decl, (char *) 0);\n+    named_section (decl, (char *) 0, 0);\n   else\n     text_section ();\n }\n@@ -391,7 +416,7 @@ variable_section (decl, reloc)\n      int reloc;\n {\n   if (IN_NAMED_SECTION (decl))\n-    named_section (decl, NULL);\n+    named_section (decl, NULL, reloc);\n   else\n     {\n       /* C++ can have const variables that get initialized from constructors,\n@@ -410,12 +435,7 @@ variable_section (decl, reloc)\n #ifdef SELECT_SECTION\n       SELECT_SECTION (decl, reloc);\n #else\n-      if (TREE_READONLY (decl)\n-\t  && ! TREE_THIS_VOLATILE (decl)\n-\t  && DECL_INITIAL (decl)\n-\t  && (DECL_INITIAL (decl) == error_mark_node\n-\t      || TREE_CONSTANT (DECL_INITIAL (decl)))\n-\t  && ! (flag_pic && reloc))\n+      if (DECL_READONLY_SECTION (decl, reloc))\n \treadonly_data_section ();\n       else\n \tdata_section ();\n@@ -430,7 +450,7 @@ void\n exception_section ()\n {\n #ifdef ASM_OUTPUT_SECTION_NAME\n-  named_section (NULL_TREE, \".gcc_except_table\");\n+  named_section (NULL_TREE, \".gcc_except_table\", 0);\n #else\n   if (flag_pic)\n     data_section ();\n@@ -938,18 +958,10 @@ assemble_start_function (decl, fnname)\n #ifdef ASM_OUTPUT_SECTION_NAME\n   /* If the function is to be put in its own section and it's not in a section\n      already, indicate so.  */\n-  if (flag_function_sections\n-      && DECL_SECTION_NAME (decl) == NULL_TREE)\n-    {\n-#ifdef UNIQUE_SECTION\n-      DECL_SECTION_NAME(decl) = UNIQUE_SECTION (decl);\n-#else\n-      char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-      /* Strip off any encoding in name.  */\n-      STRIP_NAME_ENCODING (name, name);\n-      DECL_SECTION_NAME (decl) = build_string (strlen (name), name);\n-#endif\n-    }\n+  if ((flag_function_sections\n+       && DECL_SECTION_NAME (decl) == NULL_TREE)\n+      || UNIQUE_SECTION_P (decl))\n+    UNIQUE_SECTION (decl, 0);\n #endif\n \n   function_section (decl);\n@@ -1438,6 +1450,11 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n   else if (DECL_INITIAL (decl))\n     reloc = output_addressed_constants (DECL_INITIAL (decl));\n \n+#ifdef ASM_OUTPUT_SECTION_NAME\n+  if (UNIQUE_SECTION_P (decl))\n+    UNIQUE_SECTION (decl, reloc);\n+#endif\n+\n   /* Switch to the appropriate section.  */\n   variable_section (decl, reloc);\n \n@@ -3050,7 +3067,7 @@ output_constant_def_contents (exp, reloc, labelno)\n   int align;\n \n   if (IN_NAMED_SECTION (exp))\n-    named_section (exp, NULL);\n+    named_section (exp, NULL, reloc);\n   else\n     {\n       /* First switch to text section, except for writable strings.  */"}]}