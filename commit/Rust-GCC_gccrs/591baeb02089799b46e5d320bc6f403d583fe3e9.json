{"sha": "591baeb02089799b46e5d320bc6f403d583fe3e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkxYmFlYjAyMDg5Nzk5YjQ2ZTVkMzIwYmM2ZjQwM2Q1ODNmZTNlOQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-08-06T11:31:49Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-08-06T11:31:49Z"}, "message": "re PR c/23113 (The -Wunused (value computed is not used) option missed an important case)\n\n\tPR c/23113\n\t* stmt.c (warn_if_unused_value): Check TREE_NO_WARNING at start.\n\tDon't handle NOP_EXPR, CONVERT_EXPR and NON_LVALUE_EXPR\n\tspecially.  Check for side effects only for COND_EXPR.\n\t* c-typeck.c (c_finish_stmt_expr): Mark statement expression\n\treturn with TREE_NO_WARNING.\n\ntestsuite:\n\t* gcc.dg/Wunused-value-1.c: New test.\n\nFrom-SVN: r102805", "tree": {"sha": "50083463eef147d4518d2138f1a14ce9e8fb18b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50083463eef147d4518d2138f1a14ce9e8fb18b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/591baeb02089799b46e5d320bc6f403d583fe3e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591baeb02089799b46e5d320bc6f403d583fe3e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/591baeb02089799b46e5d320bc6f403d583fe3e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591baeb02089799b46e5d320bc6f403d583fe3e9/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7a064b51430b3ba027c921786f1268c54cd1d5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a064b51430b3ba027c921786f1268c54cd1d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7a064b51430b3ba027c921786f1268c54cd1d5c"}], "stats": {"total": 88, "additions": 59, "deletions": 29}, "files": [{"sha": "0d0848ddd4db4216d12b054a9a4817c4d8317bf1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591baeb02089799b46e5d320bc6f403d583fe3e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591baeb02089799b46e5d320bc6f403d583fe3e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=591baeb02089799b46e5d320bc6f403d583fe3e9", "patch": "@@ -1,3 +1,12 @@\n+2005-08-06  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/23113\n+\t* stmt.c (warn_if_unused_value): Check TREE_NO_WARNING at start.\n+\tDon't handle NOP_EXPR, CONVERT_EXPR and NON_LVALUE_EXPR\n+\tspecially.  Check for side effects only for COND_EXPR.\n+\t* c-typeck.c (c_finish_stmt_expr): Mark statement expression\n+\treturn with TREE_NO_WARNING.\n+\n 2005-08-06  Richard Sandiford  <richard@codesourcery.com>\n \n \tPR rtl-optimization/23233"}, {"sha": "90787305ecfeacc844f5cf985119941ea69b53ea", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591baeb02089799b46e5d320bc6f403d583fe3e9/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591baeb02089799b46e5d320bc6f403d583fe3e9/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=591baeb02089799b46e5d320bc6f403d583fe3e9", "patch": "@@ -7315,7 +7315,13 @@ c_finish_stmt_expr (tree body)\n   if (last == error_mark_node\n       || (last == BIND_EXPR_BODY (body)\n \t  && BIND_EXPR_VARS (body) == NULL))\n-    return last;\n+    {\n+      /* Do not warn if the return value of a statement expression is\n+\t unused.  */\n+      if (EXPR_P (last))\n+\tTREE_NO_WARNING (last) = 1;\n+      return last;\n+    }\n \n   /* Extract the type of said expression.  */\n   type = TREE_TYPE (last);"}, {"sha": "ad75392010b34235e9a1b85a094c825ed0a26f31", "filename": "gcc/stmt.c", "status": "modified", "additions": 7, "deletions": 28, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591baeb02089799b46e5d320bc6f403d583fe3e9/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591baeb02089799b46e5d320bc6f403d583fe3e9/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=591baeb02089799b46e5d320bc6f403d583fe3e9", "patch": "@@ -1373,7 +1373,7 @@ int\n warn_if_unused_value (tree exp, location_t locus)\n {\n  restart:\n-  if (TREE_USED (exp))\n+  if (TREE_USED (exp) || TREE_NO_WARNING (exp))\n     return 0;\n \n   /* Don't warn about void constructs.  This includes casting to void,\n@@ -1416,8 +1416,6 @@ warn_if_unused_value (tree exp, location_t locus)\n       goto restart;\n \n     case COMPOUND_EXPR:\n-      if (TREE_NO_WARNING (exp))\n-\treturn 0;\n       if (warn_if_unused_value (TREE_OPERAND (exp, 0), locus))\n \treturn 1;\n       /* Let people do `(foo (), 0)' without a warning.  */\n@@ -1426,27 +1424,12 @@ warn_if_unused_value (tree exp, location_t locus)\n       exp = TREE_OPERAND (exp, 1);\n       goto restart;\n \n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n-    case NON_LVALUE_EXPR:\n-      /* Don't warn about conversions not explicit in the user's program.  */\n-      if (TREE_NO_WARNING (exp))\n+    case COND_EXPR:\n+      /* If this is an expression with side effects, don't warn; this\n+\t case commonly appears in macro expansions.  */\n+      if (TREE_SIDE_EFFECTS (exp))\n \treturn 0;\n-      /* Assignment to a cast usually results in a cast of a modify.\n-\t Don't complain about that.  There can be an arbitrary number of\n-\t casts before the modify, so we must loop until we find the first\n-\t non-cast expression and then test to see if that is a modify.  */\n-      {\n-\ttree tem = TREE_OPERAND (exp, 0);\n-\n-\twhile (TREE_CODE (tem) == CONVERT_EXPR || TREE_CODE (tem) == NOP_EXPR)\n-\t  tem = TREE_OPERAND (tem, 0);\n-\n-\tif (TREE_CODE (tem) == MODIFY_EXPR || TREE_CODE (tem) == INIT_EXPR\n-\t    || TREE_CODE (tem) == CALL_EXPR)\n-\t  return 0;\n-      }\n-      goto maybe_warn;\n+      goto warn;\n \n     case INDIRECT_REF:\n       /* Don't warn about automatic dereferencing of references, since\n@@ -1470,11 +1453,7 @@ warn_if_unused_value (tree exp, location_t locus)\n       if (EXPRESSION_CLASS_P (exp) && TREE_CODE_LENGTH (TREE_CODE (exp)) == 0)\n \treturn 0;\n \n-    maybe_warn:\n-      /* If this is an expression with side effects, don't warn.  */\n-      if (TREE_SIDE_EFFECTS (exp))\n-\treturn 0;\n-\n+    warn:\n       warning (0, \"%Hvalue computed is not used\", &locus);\n       return 1;\n     }"}, {"sha": "6e27aec9c24b278d4f4bd29b6e28729eb382194a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591baeb02089799b46e5d320bc6f403d583fe3e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591baeb02089799b46e5d320bc6f403d583fe3e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=591baeb02089799b46e5d320bc6f403d583fe3e9", "patch": "@@ -1,3 +1,8 @@\n+2005-08-06  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/23113\n+\t* gcc.dg/Wunused-value-1.c: New test.\n+\n 2005-08-06  Richard Sandiford  <richard@codesourcery.com>\n \n \tPR rtl-optimization/23233"}, {"sha": "0fc7c364ba812309b1f8fe1510c5f92261c7eed7", "filename": "gcc/testsuite/gcc.dg/Wunused-value-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591baeb02089799b46e5d320bc6f403d583fe3e9/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-value-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591baeb02089799b46e5d320bc6f403d583fe3e9/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-value-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-value-1.c?ref=591baeb02089799b46e5d320bc6f403d583fe3e9", "patch": "@@ -0,0 +1,31 @@\n+/* Test -Wunused-value.  Bug 23113.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused-value\" } */\n+\n+int f (void);\n+void g (void);\n+int *p;\n+\n+void\n+h (void)\n+{\n+  1 + f (); /* { dg-warning \"value computed is not used\" } */\n+  f () + f (); /* { dg-warning \"value computed is not used\" } */\n+  f () + f (), f (); /* { dg-warning \"value computed is not used\" } */\n+  (char) f (); /* { dg-warning \"value computed is not used\" } */\n+  g ();\n+  f ();\n+  (void) f ();\n+  *p++; /* { dg-warning \"value computed is not used\" } */\n+  ++*p;\n+  (*p ? f() : 0);\n+  ({ f(); });\n+  /* Statement expressions may be used in macro expansions which like\n+     functions return values which may or may not be of use, so don't\n+     warn for them but do warn inside them.  */\n+  ({ f() + 1; });\n+  ({ f(); 0; });\n+  ({ f() + 1; 0; }); /* { dg-warning \"value computed is not used\" } */\n+  1 + ({ f(); }); /* { dg-warning \"value computed is not used\" } */\n+}"}]}