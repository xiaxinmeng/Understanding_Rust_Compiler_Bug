{"sha": "e892493899b225a21746d24221d7dc45fc19fed2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg5MjQ5Mzg5OWIyMjVhMjE3NDZkMjQyMjFkN2RjNDVmYzE5ZmVkMg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2008-04-04T14:57:18Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2008-04-04T14:57:18Z"}, "message": "function.c (free_after_parsing): Replace with cxx_push_function_context from C++ front-end.\n\n2008-04-03  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* function.c (free_after_parsing): Replace with\n\tcxx_push_function_context from C++ front-end.\n\t(allocate_struct_function): Don't call langhook.\n\t* langhooks.h (struct lang_hooks_for_functions): Delete.\n\t(struct lang_hooks): Add back missing_noreturn_ok_p here, delete\n\tmember \"function\".\n\t* langhooks-def.h (LANG_HOOKS_MISSING_NORETURN_OK_P): Add.\n\t(LANG_HOOKS_FUNCTION_INIT, LANG_HOOKS_FUNCTION_FINAL,\n\tLANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P,\n\tLANG_HOOKS_FUNCTION_INITIALIZER): Delete.\n\t(LANG_HOOKS_INITIALIZER): Add LANG_HOOKS_MISSING_NORETURN_OK_P,\n\tremove LANG_HOOKS_FUNCTION_INITIALIZER.\n\t* tree-cfg.c: Adjust call to missing_noreturn_ok_p langhook.\n\n\t* c-objc-common.h (LANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P):\n\tRename to LANG_HOOKS_MISSING_NORETURN_OK_P.\n\t\ncp:\n2008-04-03  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* decl.c (cxx_push_function_context): Delete.\n\t(cxx_pop_function_context): Delete.\n\t(start_preparsed_function): Merge cxx_push_function_context (!f->decl\n\tcode only).\n\t* cp-objcp-common.h (LANG_HOOKS_FUNCTION_INIT,\n\tLANG_HOOKS_FUNCTION_FINAL): Delete.\n\t(LANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P): Rename to\n\tLANG_HOOKS_MISSING_NORETURN_OK_P.\n\t* cp-tree.h (cxx_push_function_context, cxx_pop_function_context):\n\tDelete prototype.\n\t* semantics.c (current_stmt_tree): Fix comment.\n\nFrom-SVN: r133900", "tree": {"sha": "4d59bdfcd5fb25b6d8efd2449db7fba8e15351f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d59bdfcd5fb25b6d8efd2449db7fba8e15351f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e892493899b225a21746d24221d7dc45fc19fed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e892493899b225a21746d24221d7dc45fc19fed2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e892493899b225a21746d24221d7dc45fc19fed2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e892493899b225a21746d24221d7dc45fc19fed2/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "05008a0c3c6826ee6bc4b5d0368c068af1509d58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05008a0c3c6826ee6bc4b5d0368c068af1509d58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05008a0c3c6826ee6bc4b5d0368c068af1509d58"}], "stats": {"total": 141, "additions": 50, "deletions": 91}, "files": [{"sha": "fab141fda0bdb9e2f73741668f10d0a07cc0c705", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e892493899b225a21746d24221d7dc45fc19fed2", "patch": "@@ -1,3 +1,22 @@\n+2008-04-04  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* function.c (free_after_parsing): Replace with\n+\tcxx_push_function_context from C++ front-end.\n+\t(allocate_struct_function): Don't call langhook.\n+\t* langhooks.h (struct lang_hooks_for_functions): Delete.\n+\t(struct lang_hooks): Add back missing_noreturn_ok_p here, delete\n+\tmember \"function\".\n+\t* langhooks-def.h (LANG_HOOKS_MISSING_NORETURN_OK_P): Add.\n+\t(LANG_HOOKS_FUNCTION_INIT, LANG_HOOKS_FUNCTION_FINAL,\n+\tLANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P,\n+\tLANG_HOOKS_FUNCTION_INITIALIZER): Delete.\n+\t(LANG_HOOKS_INITIALIZER): Add LANG_HOOKS_MISSING_NORETURN_OK_P,\n+\tremove LANG_HOOKS_FUNCTION_INITIALIZER.\n+\t* tree-cfg.c: Adjust call to missing_noreturn_ok_p langhook.\n+\n+\t* c-objc-common.h (LANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P):\n+\tRename to LANG_HOOKS_MISSING_NORETURN_OK_P.\n+\t\n 2008-04-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/35440"}, {"sha": "c48838ceb99205837fcae9f086a94c8d8e7cdc8d", "filename": "gcc/c-objc-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.h?ref=e892493899b225a21746d24221d7dc45fc19fed2", "patch": "@@ -63,8 +63,8 @@ extern void c_initialize_diagnostics (diagnostic_context *);\n #define LANG_HOOKS_PRINT_IDENTIFIER c_print_identifier\n #undef LANG_HOOKS_TYPES_COMPATIBLE_P\n #define LANG_HOOKS_TYPES_COMPATIBLE_P c_types_compatible_p\n-#undef LANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P\n-#define LANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P c_missing_noreturn_ok_p\n+#undef LANG_HOOKS_MISSING_NORETURN_OK_P\n+#define LANG_HOOKS_MISSING_NORETURN_OK_P c_missing_noreturn_ok_p\n #undef LANG_HOOKS_DUP_LANG_SPECIFIC_DECL\n #define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL c_dup_lang_specific_decl\n #undef  LANG_HOOKS_BUILTIN_FUNCTION"}, {"sha": "6702af2a6c748d6f56463398d1efd2cbb46ca495", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e892493899b225a21746d24221d7dc45fc19fed2", "patch": "@@ -1,3 +1,17 @@\n+2008-04-04  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* decl.c (cxx_push_function_context): Delete.\n+\t(cxx_pop_function_context): Delete.\n+\t(start_preparsed_function): Merge cxx_push_function_context (!f->decl\n+\tcode only).\n+\t* cp-objcp-common.h (LANG_HOOKS_FUNCTION_INIT,\n+\tLANG_HOOKS_FUNCTION_FINAL): Delete.\n+\t(LANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P): Rename to\n+\tLANG_HOOKS_MISSING_NORETURN_OK_P.\n+\t* cp-tree.h (cxx_push_function_context, cxx_pop_function_context):\n+\tDelete prototype.\n+\t* semantics.c (current_stmt_tree): Fix comment.\n+\n 2008-04-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/35741"}, {"sha": "a15b6b47a4f5c7d6471ff4d63e53029ed97e35a2", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=e892493899b225a21746d24221d7dc45fc19fed2", "patch": "@@ -88,13 +88,8 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n #define LANG_HOOKS_BUILTIN_FUNCTION cxx_builtin_function\n #undef\tLANG_HOOKS_TYPE_HASH_EQ\n #define LANG_HOOKS_TYPE_HASH_EQ\tcxx_type_hash_eq\n-\n-#undef LANG_HOOKS_FUNCTION_INIT\n-#define LANG_HOOKS_FUNCTION_INIT cxx_push_function_context\n-#undef LANG_HOOKS_FUNCTION_FINAL\n-#define LANG_HOOKS_FUNCTION_FINAL cxx_pop_function_context\n-#undef LANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P\n-#define LANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P cp_missing_noreturn_ok_p\n+#undef LANG_HOOKS_MISSING_NORETURN_OK_P\n+#define LANG_HOOKS_MISSING_NORETURN_OK_P cp_missing_noreturn_ok_p\n \n /* Attribute hooks.  */\n #undef LANG_HOOKS_COMMON_ATTRIBUTE_TABLE"}, {"sha": "27212c3c85c616b63db5d94ac8eee42ea89f24f8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e892493899b225a21746d24221d7dc45fc19fed2", "patch": "@@ -4183,8 +4183,6 @@ extern void cxx_init_decl_processing\t\t(void);\n enum cp_tree_node_structure_enum cp_tree_node_structure\n \t\t\t\t\t\t(union lang_tree_node *);\n extern bool cxx_mark_addressable\t\t(tree);\n-extern void cxx_push_function_context\t\t(struct function *);\n-extern void cxx_pop_function_context\t\t(struct function *);\n extern void maybe_push_cleanup_level\t\t(tree);\n extern void finish_scope\t\t\t(void);\n extern void push_switch\t\t\t\t(tree);"}, {"sha": "15ebf29d61dd193367af6b7950813e0505aaecd2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 41, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e892493899b225a21746d24221d7dc45fc19fed2", "patch": "@@ -11258,6 +11258,11 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n      FIXME factor out the non-RTL stuff.  */\n   bl = current_binding_level;\n   allocate_struct_function (decl1, processing_template_decl);\n+\n+  /* Initialize the language data structures.  Whenever we start\n+     a new function, we destroy temporaries in the usual way.  */\n+  cfun->language = GGC_CNEW (struct language_function);\n+  current_stmt_tree ()->stmts_are_full_exprs_p = 1;\n   current_binding_level = bl;\n \n   /* Even though we're inside a function body, we still don't want to\n@@ -12269,47 +12274,6 @@ revert_static_member_fn (tree decl)\n   DECL_STATIC_FUNCTION_P (decl) = 1;\n }\n \n-/* Initialize the variables used during compilation of a C++\n-   function.  */\n-\n-void\n-cxx_push_function_context (struct function * f)\n-{\n-  struct language_function *p = GGC_CNEW (struct language_function);\n-  f->language = p;\n-\n-  /* Whenever we start a new function, we destroy temporaries in the\n-     usual way.  */\n-  current_stmt_tree ()->stmts_are_full_exprs_p = 1;\n-\n-  if (f->decl)\n-    {\n-      tree fn = f->decl;\n-\n-      if (DECL_SAVED_FUNCTION_DATA (fn))\n-\t{\n-\t  /* If we already parsed this function, and we're just expanding it\n-\t     now, restore saved state.  */\n-\t  *cp_function_chain = *DECL_SAVED_FUNCTION_DATA (fn);\n-\n-\t  /* We don't need the saved data anymore.  Unless this is an inline\n-\t     function; we need the named return value info for\n-\t     declare_return_variable.  */\n-\t  if (! DECL_INLINE (fn))\n-\t    DECL_SAVED_FUNCTION_DATA (fn) = NULL;\n-\t}\n-    }\n-}\n-\n-/* Free the language-specific parts of F, now that we've finished\n-   compiling the function.  */\n-\n-void\n-cxx_pop_function_context (struct function * f)\n-{\n-  f->language = 0;\n-}\n-\n /* Return which tree structure is used by T, or TS_CP_GENERIC if T is\n    one of the language-independent trees.  */\n "}, {"sha": "3a36fddab181a465bd98f0a3c8679a5a941a212e", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e892493899b225a21746d24221d7dc45fc19fed2", "patch": "@@ -381,9 +381,7 @@ add_stmt (tree t)\n   return t;\n }\n \n-/* Returns the stmt_tree (if any) to which statements are currently\n-   being added.  If there is no active statement-tree, NULL is\n-   returned.  */\n+/* Returns the stmt_tree to which statements are currently being added.  */\n \n stmt_tree\n current_stmt_tree (void)"}, {"sha": "240a3e7615beab8d5502b229dd5f5c9dfc2a18de", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=e892493899b225a21746d24221d7dc45fc19fed2", "patch": "@@ -271,12 +271,7 @@ pop_function_context (void)\n void\n free_after_parsing (struct function *f)\n {\n-  /* f->expr->forced_labels is used by code generation.  */\n-  /* f->emit->regno_reg_rtx is used by code generation.  */\n-  /* f->varasm is used by code generation.  */\n-  /* f->eh->eh_return_stub_label is used by code generation.  */\n-\n-  lang_hooks.function.final (f);\n+  f->language = 0;\n }\n \n /* Clear out all parts of the state in F that can safely be discarded\n@@ -3861,7 +3856,6 @@ allocate_struct_function (tree fndecl, bool abstract_p)\n \n   init_eh_for_function ();\n \n-  lang_hooks.function.init (cfun);\n   if (init_machine_status)\n     cfun->machine = (*init_machine_status) ();\n "}, {"sha": "a67ba81974b867a5697355236b6720bd87ac5685", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=e892493899b225a21746d24221d7dc45fc19fed2", "patch": "@@ -90,6 +90,7 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_HANDLE_OPTION\thook_int_size_t_constcharptr_int_0\n #define LANG_HOOKS_MISSING_ARGUMENT\thook_bool_constcharptr_size_t_false\n #define LANG_HOOKS_POST_OPTIONS\t\tlhd_post_options\n+#define LANG_HOOKS_MISSING_NORETURN_OK_P hook_bool_tree_true\n #define LANG_HOOKS_GET_ALIAS_SET\tlhd_get_alias_set\n #define LANG_HOOKS_EXPAND_EXPR\t\tlhd_expand_expr\n #define LANG_HOOKS_EXPAND_DECL\t\tlhd_expand_decl\n@@ -115,10 +116,6 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_TO_TARGET_CHARSET\tlhd_to_target_charset\n #define LANG_HOOKS_INIT_TS\t\tlhd_do_nothing\n \n-#define LANG_HOOKS_FUNCTION_INIT\tlhd_do_nothing_f\n-#define LANG_HOOKS_FUNCTION_FINAL\tlhd_do_nothing_f\n-#define LANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P hook_bool_tree_true\n-\n /* Attribute hooks.  */\n #define LANG_HOOKS_ATTRIBUTE_TABLE\t\tNULL\n #define LANG_HOOKS_COMMON_ATTRIBUTE_TABLE\tNULL\n@@ -140,12 +137,6 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n   LANG_HOOKS_CALLGRAPH_EMIT_ASSOCIATED_THUNKS, \\\n }\n \n-#define LANG_HOOKS_FUNCTION_INITIALIZER {\t\\\n-  LANG_HOOKS_FUNCTION_INIT,\t\t\t\\\n-  LANG_HOOKS_FUNCTION_FINAL,\t\t\t\\\n-  LANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P\t\\\n-}\n-\n /* Hooks for tree gimplification.  */\n #define LANG_HOOKS_GIMPLIFY_EXPR lhd_gimplify_expr\n #define LANG_HOOKS_FOLD_OBJ_TYPE_REF NULL\n@@ -242,6 +233,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_INIT, \\\n   LANG_HOOKS_FINISH, \\\n   LANG_HOOKS_PARSE_FILE, \\\n+  LANG_HOOKS_MISSING_NORETURN_OK_P, \\\n   LANG_HOOKS_GET_ALIAS_SET, \\\n   LANG_HOOKS_EXPAND_EXPR, \\\n   LANG_HOOKS_EXPAND_DECL, \\\n@@ -266,7 +258,6 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_ATTRIBUTE_TABLE, \\\n   LANG_HOOKS_COMMON_ATTRIBUTE_TABLE, \\\n   LANG_HOOKS_FORMAT_ATTRIBUTE_TABLE, \\\n-  LANG_HOOKS_FUNCTION_INITIALIZER, \\\n   LANG_HOOKS_TREE_INLINING_INITIALIZER, \\\n   LANG_HOOKS_CALLGRAPH_INITIALIZER, \\\n   LANG_HOOKS_TREE_DUMP_INITIALIZER, \\"}, {"sha": "722c82cb6232203a5c36e50a68f56e4794ceaf74", "filename": "gcc/langhooks.h", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=e892493899b225a21746d24221d7dc45fc19fed2", "patch": "@@ -54,20 +54,6 @@ struct lang_hooks_for_callgraph\n   void (*emit_associated_thunks) (tree);\n };\n \n-/* Lang hooks for management of language-specific data or status\n-   when entering / leaving functions etc.  */\n-struct lang_hooks_for_functions\n-{\n-  /* Called when entering a function.  */\n-  void (*init) (struct function *);\n-\n-  /* Called when leaving a function.  */\n-  void (*final) (struct function *);\n-\n-  /* Determines if it's ok for a function to have no noreturn attribute.  */\n-  bool (*missing_noreturn_ok_p) (tree);\n-};\n-\n /* The following hooks are used by tree-dump.c.  */\n \n struct lang_hooks_for_tree_dump\n@@ -283,6 +269,9 @@ struct lang_hooks\n      parsers to dump debugging information during parsing.  */\n   void (*parse_file) (int);\n \n+  /* Determines if it's ok for a function to have no noreturn attribute.  */\n+  bool (*missing_noreturn_ok_p) (tree);\n+\n   /* Called to obtain the alias set to be used for an expression or type.\n      Returns -1 if the language does nothing special for it.  */\n   alias_set_type (*get_alias_set) (tree);\n@@ -386,9 +375,6 @@ struct lang_hooks\n   const struct attribute_spec *common_attribute_table;\n   const struct attribute_spec *format_attribute_table;\n \n-  /* Function-related language hooks.  */\n-  struct lang_hooks_for_functions function;\n-\n   struct lang_hooks_for_tree_inlining tree_inlining;\n \n   struct lang_hooks_for_callgraph callgraph;"}, {"sha": "cea11b8661c021893d091f268ad6840086f85205", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e892493899b225a21746d24221d7dc45fc19fed2/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=e892493899b225a21746d24221d7dc45fc19fed2", "patch": "@@ -7085,7 +7085,7 @@ execute_warn_function_noreturn (void)\n   if (warn_missing_noreturn\n       && !TREE_THIS_VOLATILE (cfun->decl)\n       && EDGE_COUNT (EXIT_BLOCK_PTR->preds) == 0\n-      && !lang_hooks.function.missing_noreturn_ok_p (cfun->decl))\n+      && !lang_hooks.missing_noreturn_ok_p (cfun->decl))\n     warning (OPT_Wmissing_noreturn, \"%Jfunction might be possible candidate \"\n \t     \"for attribute %<noreturn%>\",\n \t     cfun->decl);"}]}