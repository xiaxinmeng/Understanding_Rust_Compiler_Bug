{"sha": "c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcwZmY5ZjliZTBjNzM2MGEzNzUxOWVjNjhhYzRkZDQxZThkMGEzYw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-08-31T03:01:15Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-08-31T03:01:15Z"}, "message": "compiler, runtime: support and use single argument go:linkname\n    \n    The gc compiler has started permitting go:linkname comments with a\n    single argument to mean that a function should be externally visible\n    outside the package.  Implement this in the Go frontend.\n    \n    Change the libgo runtime package to use it, rather than repeating the\n    name just to export a function.\n    \n    Remove a couple of unnecessary go:linkname comments on declarations.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/192197\n\nFrom-SVN: r275239", "tree": {"sha": "2a189fbed2324d7708bfe231203bd294028057c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a189fbed2324d7708bfe231203bd294028057c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/comments", "author": null, "committer": null, "parents": [{"sha": "e7c8f75569e792f81a4f4ceee4e1b20f2544e7a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c8f75569e792f81a4f4ceee4e1b20f2544e7a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c8f75569e792f81a4f4ceee4e1b20f2544e7a4"}], "stats": {"total": 590, "additions": 297, "deletions": 293}, "files": [{"sha": "025e66ea99b416b129e62dd97b46570cdd7fc1fc", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -1,4 +1,4 @@\n-80403eb9e95c9642ebabb4d7c43deedaa763211f\n+289d94b9e6303ec74649d1f08d418300f2b4d0fd\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "d39a4fb51aac1df14504fb10486e2dc82107b87b", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -2531,9 +2531,22 @@ Gogo::add_linkname(const std::string& go_name, bool is_exported,\n   if (no == NULL)\n     go_error_at(loc, \"%s is not defined\", go_name.c_str());\n   else if (no->is_function())\n-    no->func_value()->set_asm_name(ext_name);\n+    {\n+      if (ext_name.empty())\n+\tno->func_value()->set_is_exported_by_linkname();\n+      else\n+\tno->func_value()->set_asm_name(ext_name);\n+    }\n   else if (no->is_function_declaration())\n-    no->func_declaration_value()->set_asm_name(ext_name);\n+    {\n+      if (ext_name.empty())\n+\tgo_error_at(loc,\n+\t\t    (\"//%<go:linkname%> missing external name \"\n+\t\t     \"for declaration of %s\"),\n+\t\t    go_name.c_str());\n+      else\n+\tno->func_declaration_value()->set_asm_name(ext_name);\n+    }\n   else\n     go_error_at(loc,\n \t\t(\"%s is not a function; \"\n@@ -5465,7 +5478,8 @@ Function::Function(Function_type* type, Named_object* enclosing, Block* block,\n     calls_recover_(false), is_recover_thunk_(false), has_recover_thunk_(false),\n     calls_defer_retaddr_(false), is_type_specific_function_(false),\n     in_unique_section_(false), export_for_inlining_(false),\n-    is_inline_only_(false), is_referenced_by_inline_(false)\n+    is_inline_only_(false), is_referenced_by_inline_(false),\n+    is_exported_by_linkname_(false)\n {\n }\n \n@@ -6220,6 +6234,11 @@ Function::get_or_make_decl(Gogo* gogo, Named_object* no)\n       if (this->is_referenced_by_inline_)\n \tflags |= Backend::function_is_visible;\n \n+      // A go:linkname directive can be used to force a function to be\n+      // visible.\n+      if (this->is_exported_by_linkname_)\n+\tflags |= Backend::function_is_visible;\n+\n       // If a function calls the predeclared recover function, we\n       // can't inline it, because recover behaves differently in a\n       // function passed directly to defer.  If this is a recover"}, {"sha": "e742b6eb8e3f9af07fd6422d4f19651b2063af0b", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -547,7 +547,9 @@ class Gogo\n   { this->file_block_names_[name] = location; }\n \n   // Add a linkname, from the go:linkname compiler directive.  This\n-  // changes the externally visible name of go_name to be ext_name.\n+  // changes the externally visible name of GO_NAME to be EXT_NAME.\n+  // If EXT_NAME is the empty string, GO_NAME is unchanged, but the\n+  // symbol is made publicly visible.\n   void\n   add_linkname(const std::string& go_name, bool is_exported,\n \t       const std::string& ext_name, Location location);\n@@ -1359,6 +1361,11 @@ class Function\n   set_asm_name(const std::string& asm_name)\n   { this->asm_name_ = asm_name; }\n \n+  // Mark this symbol as exported by a linkname directive.\n+  void\n+  set_is_exported_by_linkname()\n+  { this->is_exported_by_linkname_ = true; }\n+\n   // Return the pragmas for this function.\n   unsigned int\n   pragmas() const\n@@ -1706,6 +1713,9 @@ class Function\n   // True if this function is referenced from an inlined body that\n   // will be put into the export data.\n   bool is_referenced_by_inline_ : 1;\n+  // True if we should make this function visible to other packages\n+  // because of a go:linkname directive.\n+  bool is_exported_by_linkname_ : 1;\n };\n \n // A snapshot of the current binding state."}, {"sha": "f0236132328dee79cd39571c358f156e80a3edac", "filename": "gcc/go/gofrontend/lex.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/gcc%2Fgo%2Fgofrontend%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/gcc%2Fgo%2Fgofrontend%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.cc?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -1996,7 +1996,7 @@ Lex::skip_cpp_comment()\n \n \t      while (ps < pend && *ps != ' ' && *ps != '\\t')\n \t\t++ps;\n-\t      if (ps < pend)\n+\t      if (ps <= pend)\n \t\tgo_name = std::string(pg, ps - pg);\n \t      while (ps < pend && (*ps == ' ' || *ps == '\\t'))\n \t\t++ps;\n@@ -2015,8 +2015,8 @@ Lex::skip_cpp_comment()\n \t      ext_name.clear();\n \t    }\n \t}\n-      if (go_name.empty() || ext_name.empty())\n-\tgo_error_at(loc, \"usage: %<//go:linkname%> localname linkname\");\n+      if (go_name.empty())\n+\tgo_error_at(loc, \"usage: %<//go:linkname%> localname [linkname]\");\n       else\n \t{\n \t  if (this->linknames_ == NULL)"}, {"sha": "3be38062150bdf1eec0dd516ad53dd7cdb44d4d7", "filename": "gcc/go/gofrontend/lex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/gcc%2Fgo%2Fgofrontend%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/gcc%2Fgo%2Fgofrontend%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.h?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -380,7 +380,7 @@ class Lex\n \n   struct Linkname\n   {\n-    std::string ext_name;\t// External name.\n+    std::string ext_name;\t// External name; empty to just export.\n     bool is_exported;\t\t// Whether the internal name is exported.\n     Location loc;\t\t// Location of go:linkname directive.\n "}, {"sha": "0daddf10e11a5f20d0314e2aa9f16d3c3a80aa6a", "filename": "libgo/go/runtime/alg.go", "status": "modified", "additions": 34, "deletions": 35, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Falg.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Falg.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Falg.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -10,44 +10,43 @@ import (\n \t\"unsafe\"\n )\n \n-// For gccgo, use go:linkname to rename compiler-called functions to\n-// themselves, so that the compiler will export them.\n+// For gccgo, use go:linkname to export compiler-called functions.\n //\n-//go:linkname memhash0 runtime.memhash0\n-//go:linkname memhash8 runtime.memhash8\n-//go:linkname memhash16 runtime.memhash16\n-//go:linkname memhash32 runtime.memhash32\n-//go:linkname memhash64 runtime.memhash64\n-//go:linkname memhash128 runtime.memhash128\n-//go:linkname strhash runtime.strhash\n-//go:linkname f32hash runtime.f32hash\n-//go:linkname f64hash runtime.f64hash\n-//go:linkname c64hash runtime.c64hash\n-//go:linkname c128hash runtime.c128hash\n-//go:linkname interhash runtime.interhash\n-//go:linkname nilinterhash runtime.nilinterhash\n-//go:linkname memequal0 runtime.memequal0\n-//go:linkname memequal8 runtime.memequal8\n-//go:linkname memequal16 runtime.memequal16\n-//go:linkname memequal32 runtime.memequal32\n-//go:linkname memequal64 runtime.memequal64\n-//go:linkname memequal128 runtime.memequal128\n-//go:linkname strequal runtime.strequal\n-//go:linkname f32equal runtime.f32equal\n-//go:linkname f64equal runtime.f64equal\n-//go:linkname c64equal runtime.c64equal\n-//go:linkname c128equal runtime.c128equal\n-//go:linkname interequal runtime.interequal\n-//go:linkname nilinterequal runtime.nilinterequal\n-//go:linkname efaceeq runtime.efaceeq\n-//go:linkname ifaceeq runtime.ifaceeq\n-//go:linkname ifacevaleq runtime.ifacevaleq\n-//go:linkname ifaceefaceeq runtime.ifaceefaceeq\n-//go:linkname efacevaleq runtime.efacevaleq\n-//go:linkname cmpstring runtime.cmpstring\n+//go:linkname memhash0\n+//go:linkname memhash8\n+//go:linkname memhash16\n+//go:linkname memhash32\n+//go:linkname memhash64\n+//go:linkname memhash128\n+//go:linkname strhash\n+//go:linkname f32hash\n+//go:linkname f64hash\n+//go:linkname c64hash\n+//go:linkname c128hash\n+//go:linkname interhash\n+//go:linkname nilinterhash\n+//go:linkname memequal0\n+//go:linkname memequal8\n+//go:linkname memequal16\n+//go:linkname memequal32\n+//go:linkname memequal64\n+//go:linkname memequal128\n+//go:linkname strequal\n+//go:linkname f32equal\n+//go:linkname f64equal\n+//go:linkname c64equal\n+//go:linkname c128equal\n+//go:linkname interequal\n+//go:linkname nilinterequal\n+//go:linkname efaceeq\n+//go:linkname ifaceeq\n+//go:linkname ifacevaleq\n+//go:linkname ifaceefaceeq\n+//go:linkname efacevaleq\n+//go:linkname cmpstring\n //\n // Temporary to be called from C code.\n-//go:linkname alginit runtime.alginit\n+//go:linkname alginit\n \n const (\n \tc0 = uintptr((8-sys.PtrSize)/4*2860486313 + (sys.PtrSize-4)/4*33054211828000289)"}, {"sha": "69c3e44313784f9d314b7d3b0a4f715992cb0fec", "filename": "libgo/go/runtime/cgocall.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fcgocall.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fcgocall.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fcgocall.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -12,8 +12,8 @@ import (\n )\n \n // Functions called by cgo-generated code.\n-//go:linkname cgoCheckPointer runtime.cgoCheckPointer\n-//go:linkname cgoCheckResult runtime.cgoCheckResult\n+//go:linkname cgoCheckPointer\n+//go:linkname cgoCheckResult\n \n // Pointer checking for cgo code.\n "}, {"sha": "a1216cf322392d3c5dca1d27aeae1d3952fbbce9", "filename": "libgo/go/runtime/chan.go", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fchan.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fchan.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fchan.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -23,18 +23,17 @@ import (\n \t\"unsafe\"\n )\n \n-// For gccgo, use go:linkname to rename compiler-called functions to\n-// themselves, so that the compiler will export them.\n+// For gccgo, use go:linkname to export compiler-called functions.\n //\n-//go:linkname makechan runtime.makechan\n-//go:linkname makechan64 runtime.makechan64\n-//go:linkname chansend1 runtime.chansend1\n-//go:linkname chanrecv1 runtime.chanrecv1\n-//go:linkname chanrecv2 runtime.chanrecv2\n-//go:linkname closechan runtime.closechan\n-//go:linkname selectnbsend runtime.selectnbsend\n-//go:linkname selectnbrecv runtime.selectnbrecv\n-//go:linkname selectnbrecv2 runtime.selectnbrecv2\n+//go:linkname makechan\n+//go:linkname makechan64\n+//go:linkname chansend1\n+//go:linkname chanrecv1\n+//go:linkname chanrecv2\n+//go:linkname closechan\n+//go:linkname selectnbsend\n+//go:linkname selectnbrecv\n+//go:linkname selectnbrecv2\n \n const (\n \tmaxAlign  = 8"}, {"sha": "be79224a4fb7ff35183c62d774dc1af2e2f8f494", "filename": "libgo/go/runtime/ffi.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fffi.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fffi.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fffi.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -37,7 +37,7 @@ func ffi_type_void() *__ffi_type\n func ffi_prep_cif(*_ffi_cif, _ffi_abi, uint32, *__ffi_type, **__ffi_type) _ffi_status\n \n // ffiFuncToCIF is called from C code.\n-//go:linkname ffiFuncToCIF runtime.ffiFuncToCIF\n+//go:linkname ffiFuncToCIF\n \n // ffiFuncToCIF builds an _ffi_cif struct for function described by ft.\n func ffiFuncToCIF(ft *functype, isInterface bool, isMethod bool, cif *_ffi_cif) {"}, {"sha": "fba6bc354b14d0842e089354b05a9cf724d1a400", "filename": "libgo/go/runtime/hash32.go", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fhash32.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fhash32.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fhash32.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -12,10 +12,9 @@ package runtime\n \n import \"unsafe\"\n \n-// For gccgo, use go:linkname to rename compiler-called functions to\n-// themselves, so that the compiler will export them.\n+// For gccgo, use go:linkname to export compiler-called functions.\n //\n-//go:linkname memhash runtime.memhash\n+//go:linkname memhash\n \n const (\n \t// Constants for multiplication: four random odd 32-bit numbers."}, {"sha": "3f94256ad33e3721be5c112c3b15bf1757294b0e", "filename": "libgo/go/runtime/hash64.go", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fhash64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fhash64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fhash64.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -12,10 +12,9 @@ package runtime\n \n import \"unsafe\"\n \n-// For gccgo, use go:linkname to rename compiler-called functions to\n-// themselves, so that the compiler will export them.\n+// For gccgo, use go:linkname to export compiler-called functions.\n //\n-//go:linkname memhash runtime.memhash\n+//go:linkname memhash\n \n const (\n \t// Constants for multiplication: four random odd 64-bit numbers."}, {"sha": "3fa5dd6deec63b33a42eec59fb1a6102ae244206", "filename": "libgo/go/runtime/iface.go", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fiface.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fiface.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fiface.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -10,23 +10,22 @@ import (\n \t\"unsafe\"\n )\n \n-// For gccgo, use go:linkname to rename compiler-called functions to\n-// themselves, so that the compiler will export them.\n+// For gccgo, use go:linkname to export compiler-called functions.\n //\n-//go:linkname requireitab runtime.requireitab\n-//go:linkname assertitab runtime.assertitab\n-//go:linkname panicdottype runtime.panicdottype\n-//go:linkname ifaceE2E2 runtime.ifaceE2E2\n-//go:linkname ifaceI2E2 runtime.ifaceI2E2\n-//go:linkname ifaceE2I2 runtime.ifaceE2I2\n-//go:linkname ifaceI2I2 runtime.ifaceI2I2\n-//go:linkname ifaceE2T2P runtime.ifaceE2T2P\n-//go:linkname ifaceI2T2P runtime.ifaceI2T2P\n-//go:linkname ifaceE2T2 runtime.ifaceE2T2\n-//go:linkname ifaceI2T2 runtime.ifaceI2T2\n-//go:linkname ifaceT2Ip runtime.ifaceT2Ip\n+//go:linkname requireitab\n+//go:linkname assertitab\n+//go:linkname panicdottype\n+//go:linkname ifaceE2E2\n+//go:linkname ifaceI2E2\n+//go:linkname ifaceE2I2\n+//go:linkname ifaceI2I2\n+//go:linkname ifaceE2T2P\n+//go:linkname ifaceI2T2P\n+//go:linkname ifaceE2T2\n+//go:linkname ifaceI2T2\n+//go:linkname ifaceT2Ip\n // Temporary for C code to call:\n-//go:linkname getitab runtime.getitab\n+//go:linkname getitab\n \n // The gccgo itab structure is different than the gc one.\n //"}, {"sha": "6f86e91264bc66ed9c5ec0884fac7d3ef752537b", "filename": "libgo/go/runtime/lock_futex.go", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Flock_futex.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Flock_futex.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Flock_futex.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -12,16 +12,15 @@ import (\n )\n \n // For gccgo, while we still have C runtime code, use go:linkname to\n-// rename some functions to themselves, so that the compiler will\n-// export them.\n+// export some functions.\n //\n-//go:linkname lock runtime.lock\n-//go:linkname unlock runtime.unlock\n-//go:linkname noteclear runtime.noteclear\n-//go:linkname notewakeup runtime.notewakeup\n-//go:linkname notesleep runtime.notesleep\n-//go:linkname notetsleep runtime.notetsleep\n-//go:linkname notetsleepg runtime.notetsleepg\n+//go:linkname lock\n+//go:linkname unlock\n+//go:linkname noteclear\n+//go:linkname notewakeup\n+//go:linkname notesleep\n+//go:linkname notetsleep\n+//go:linkname notetsleepg\n \n // This implementation depends on OS-specific implementations of\n //"}, {"sha": "bf9211a6c3b9a39b173e3a9ca9b772a147d90f9e", "filename": "libgo/go/runtime/lock_sema.go", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Flock_sema.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Flock_sema.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Flock_sema.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -12,16 +12,15 @@ import (\n )\n \n // For gccgo, while we still have C runtime code, use go:linkname to\n-// rename some functions to themselves, so that the compiler will\n-// export them.\n+// export some functions.\n //\n-//go:linkname lock runtime.lock\n-//go:linkname unlock runtime.unlock\n-//go:linkname noteclear runtime.noteclear\n-//go:linkname notewakeup runtime.notewakeup\n-//go:linkname notesleep runtime.notesleep\n-//go:linkname notetsleep runtime.notetsleep\n-//go:linkname notetsleepg runtime.notetsleepg\n+//go:linkname lock\n+//go:linkname unlock\n+//go:linkname noteclear\n+//go:linkname notewakeup\n+//go:linkname notesleep\n+//go:linkname notetsleep\n+//go:linkname notetsleepg\n \n // This implementation depends on OS-specific implementations of\n //"}, {"sha": "e1e908b2859154d7d5d3bd29c1ea259541b2f844", "filename": "libgo/go/runtime/malloc.go", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fmalloc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fmalloc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmalloc.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -114,13 +114,12 @@ import (\n // C function to get the end of the program's memory.\n func getEnd() uintptr\n \n-// For gccgo, use go:linkname to rename compiler-called functions to\n-// themselves, so that the compiler will export them.\n+// For gccgo, use go:linkname to export compiler-called functions.\n //\n-//go:linkname newobject runtime.newobject\n+//go:linkname newobject\n \n // Functions called by C code.\n-//go:linkname mallocgc runtime.mallocgc\n+//go:linkname mallocgc\n \n const (\n \tdebugMalloc = false"}, {"sha": "eebb2103bb23d728258d22488135526145b417b5", "filename": "libgo/go/runtime/map.go", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fmap.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fmap.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmap.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -60,21 +60,20 @@ import (\n \t\"unsafe\"\n )\n \n-// For gccgo, use go:linkname to rename compiler-called functions to\n-// themselves, so that the compiler will export them.\n+// For gccgo, use go:linkname to export compiler-called functions.\n //\n-//go:linkname makemap runtime.makemap\n-//go:linkname makemap64 runtime.makemap64\n-//go:linkname makemap_small runtime.makemap_small\n-//go:linkname mapaccess1 runtime.mapaccess1\n-//go:linkname mapaccess2 runtime.mapaccess2\n-//go:linkname mapaccess1_fat runtime.mapaccess1_fat\n-//go:linkname mapaccess2_fat runtime.mapaccess2_fat\n-//go:linkname mapassign runtime.mapassign\n-//go:linkname mapdelete runtime.mapdelete\n-//go:linkname mapclear runtime.mapclear\n-//go:linkname mapiterinit runtime.mapiterinit\n-//go:linkname mapiternext runtime.mapiternext\n+//go:linkname makemap\n+//go:linkname makemap64\n+//go:linkname makemap_small\n+//go:linkname mapaccess1\n+//go:linkname mapaccess2\n+//go:linkname mapaccess1_fat\n+//go:linkname mapaccess2_fat\n+//go:linkname mapassign\n+//go:linkname mapdelete\n+//go:linkname mapclear\n+//go:linkname mapiterinit\n+//go:linkname mapiternext\n \n const (\n \t// Maximum number of key/value pairs a bucket can hold."}, {"sha": "67d6df8c9a325b2353a6662679ff55a273e80893", "filename": "libgo/go/runtime/map_fast32.go", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fmap_fast32.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fmap_fast32.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmap_fast32.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -9,14 +9,13 @@ import (\n \t\"unsafe\"\n )\n \n-// For gccgo, use go:linkname to rename compiler-called functions to\n-// themselves, so that the compiler will export them.\n+// For gccgo, use go:linkname to export compiler-called functions.\n //\n-//go:linkname mapaccess1_fast32 runtime.mapaccess1_fast32\n-//go:linkname mapaccess2_fast32 runtime.mapaccess2_fast32\n-//go:linkname mapassign_fast32 runtime.mapassign_fast32\n-//go:linkname mapassign_fast32ptr runtime.mapassign_fast32ptr\n-//go:linkname mapdelete_fast32 runtime.mapdelete_fast32\n+//go:linkname mapaccess1_fast32\n+//go:linkname mapaccess2_fast32\n+//go:linkname mapassign_fast32\n+//go:linkname mapassign_fast32ptr\n+//go:linkname mapdelete_fast32\n \n func mapaccess1_fast32(t *maptype, h *hmap, key uint32) unsafe.Pointer {\n \tif raceenabled && h != nil {"}, {"sha": "b62ecb106cc090941f842ec79cf3eddabb03c52e", "filename": "libgo/go/runtime/map_fast64.go", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fmap_fast64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fmap_fast64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmap_fast64.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -9,14 +9,13 @@ import (\n \t\"unsafe\"\n )\n \n-// For gccgo, use go:linkname to rename compiler-called functions to\n-// themselves, so that the compiler will export them.\n+// For gccgo, use go:linkname to export compiler-called functions.\n //\n-//go:linkname mapaccess1_fast64 runtime.mapaccess1_fast64\n-//go:linkname mapaccess2_fast64 runtime.mapaccess2_fast64\n-//go:linkname mapassign_fast64 runtime.mapassign_fast64\n-//go:linkname mapassign_fast64ptr runtime.mapassign_fast64ptr\n-//go:linkname mapdelete_fast64 runtime.mapdelete_fast64\n+//go:linkname mapaccess1_fast64\n+//go:linkname mapaccess2_fast64\n+//go:linkname mapassign_fast64\n+//go:linkname mapassign_fast64ptr\n+//go:linkname mapdelete_fast64\n \n func mapaccess1_fast64(t *maptype, h *hmap, key uint64) unsafe.Pointer {\n \tif raceenabled && h != nil {"}, {"sha": "2202695a45bbd9ba31e767d73f67abdd733f7417", "filename": "libgo/go/runtime/map_faststr.go", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fmap_faststr.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fmap_faststr.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmap_faststr.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -9,13 +9,12 @@ import (\n \t\"unsafe\"\n )\n \n-// For gccgo, use go:linkname to rename compiler-called functions to\n-// themselves, so that the compiler will export them.\n+// For gccgo, use go:linkname to export compiler-called functions.\n //\n-//go:linkname mapaccess1_faststr runtime.mapaccess1_faststr\n-//go:linkname mapaccess2_faststr runtime.mapaccess2_faststr\n-//go:linkname mapassign_faststr runtime.mapassign_faststr\n-//go:linkname mapdelete_faststr runtime.mapdelete_faststr\n+//go:linkname mapaccess1_faststr\n+//go:linkname mapaccess2_faststr\n+//go:linkname mapassign_faststr\n+//go:linkname mapdelete_faststr\n \n func mapaccess1_faststr(t *maptype, h *hmap, ky string) unsafe.Pointer {\n \tif raceenabled && h != nil {"}, {"sha": "00e5eb8baa525a9eb1e9c72f88f050f188cdd9dc", "filename": "libgo/go/runtime/mbarrier.go", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fmbarrier.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fmbarrier.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmbarrier.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -18,12 +18,11 @@ import (\n \t\"unsafe\"\n )\n \n-// For gccgo, use go:linkname to rename compiler-called functions to\n-// themselves, so that the compiler will export them.\n+// For gccgo, use go:linkname to export compiler-called functions.\n //\n-//go:linkname typedmemmove runtime.typedmemmove\n-//go:linkname typedslicecopy runtime.typedslicecopy\n-//go:linkname memclrHasPointers runtime.memclrHasPointers\n+//go:linkname typedmemmove\n+//go:linkname typedslicecopy\n+//go:linkname memclrHasPointers\n \n // Go uses a hybrid barrier that combines a Yuasa-style deletion\n // barrier\u2014which shades the object whose reference is being"}, {"sha": "5ce816c323a4df368bef92a36c15f9df6ed77a52", "filename": "libgo/go/runtime/mem_gccgo.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fmem_gccgo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fmem_gccgo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmem_gccgo.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -12,8 +12,8 @@ import (\n )\n \n // Functions called by C code.\n-//go:linkname sysAlloc runtime.sysAlloc\n-//go:linkname sysFree runtime.sysFree\n+//go:linkname sysAlloc\n+//go:linkname sysFree\n \n //extern mmap\n func sysMmap(addr unsafe.Pointer, n uintptr, prot, flags, fd int32, off uintptr) unsafe.Pointer"}, {"sha": "d7ae26090f53e724d81c2057a38932671e4210dd", "filename": "libgo/go/runtime/mgc_gccgo.go", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fmgc_gccgo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fmgc_gccgo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmgc_gccgo.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -11,10 +11,9 @@ import (\n \t\"unsafe\"\n )\n \n-// For gccgo, use go:linkname to rename compiler-called functions to\n-// themselves, so that the compiler will export them.\n+// For gccgo, use go:linkname to export compiler-called functions.\n //\n-//go:linkname gcWriteBarrier runtime.gcWriteBarrier\n+//go:linkname gcWriteBarrier\n \n // gcRoot is a single GC root: a variable plus a ptrmask.\n //go:notinheap\n@@ -130,7 +129,7 @@ func createGcRootsIndex() {\n }\n \n // registerGCRoots is called by compiler-generated code.\n-//go:linkname registerGCRoots runtime.registerGCRoots\n+//go:linkname registerGCRoots\n \n // registerGCRoots is called by init functions to register the GC\n // roots for a package.  The init functions are run sequentially at"}, {"sha": "b6b69ddd2e16618fd4d43aa3b8789e15f001876b", "filename": "libgo/go/runtime/mgcmark.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fmgcmark.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fmgcmark.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmgcmark.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -1042,7 +1042,7 @@ func scanobject(b uintptr, gcw *gcWork) {\n \tgcw.scanWork += int64(i)\n }\n \n-//go:linkname scanstackblock runtime.scanstackblock\n+//go:linkname scanstackblock\n \n // scanstackblock is called by the stack scanning code in C to\n // actually find and mark pointers in the stack block. This is like\n@@ -1064,7 +1064,7 @@ func scanstackblock(b, n uintptr, gcw *gcWork) {\n \n // scanstackblockwithmap is like scanstackblock, but with an explicit\n // pointer bitmap. This is used only when precise stack scan is enabled.\n-//go:linkname scanstackblockwithmap runtime.scanstackblockwithmap\n+//go:linkname scanstackblockwithmap\n //go:nowritebarrier\n func scanstackblockwithmap(pc, b0, n0 uintptr, ptrmask *uint8, gcw *gcWork) {\n \t// Use local copies of original parameters, so that a stack trace"}, {"sha": "00c7f52514784b2b82705a6804c3db5a1eedd9ab", "filename": "libgo/go/runtime/netpoll.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fnetpoll.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fnetpoll.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fnetpoll.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -12,7 +12,7 @@ import (\n )\n \n // Export temporarily for gccgo's C code to call:\n-//go:linkname netpoll runtime.netpoll\n+//go:linkname netpoll\n \n // Integrated network poller (platform-independent part).\n // A particular implementation (epoll/kqueue) must define the following functions:"}, {"sha": "ef33d679fe498fcf19a43b01a787a33d94a68d5e", "filename": "libgo/go/runtime/os_gccgo.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fos_gccgo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fos_gccgo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fos_gccgo.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -9,7 +9,7 @@ import (\n )\n \n // For C code to call:\n-//go:linkname minit runtime.minit\n+//go:linkname minit\n \n func goenvs() {\n \tgoenvs_unix()"}, {"sha": "8e56bbe8b56b7c58f3215c02ce32bcb7a5e2b39c", "filename": "libgo/go/runtime/panic.go", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fpanic.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fpanic.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fpanic.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -9,39 +9,38 @@ import (\n \t\"unsafe\"\n )\n \n-// For gccgo, use go:linkname to rename compiler-called functions to\n-// themselves, so that the compiler will export them.\n+// For gccgo, use go:linkname to export compiler-called functions.\n //\n-//go:linkname deferproc runtime.deferproc\n-//go:linkname deferprocStack runtime.deferprocStack\n-//go:linkname deferreturn runtime.deferreturn\n-//go:linkname setdeferretaddr runtime.setdeferretaddr\n-//go:linkname checkdefer runtime.checkdefer\n-//go:linkname gopanic runtime.gopanic\n-//go:linkname canrecover runtime.canrecover\n-//go:linkname makefuncfficanrecover runtime.makefuncfficanrecover\n-//go:linkname makefuncreturning runtime.makefuncreturning\n-//go:linkname gorecover runtime.gorecover\n-//go:linkname deferredrecover runtime.deferredrecover\n-//go:linkname goPanicIndex runtime.goPanicIndex\n-//go:linkname goPanicIndexU runtime.goPanicIndexU\n-//go:linkname goPanicSliceAlen runtime.goPanicSliceAlen\n-//go:linkname goPanicSliceAlenU runtime.goPanicSliceAlenU\n-//go:linkname goPanicSliceAcap runtime.goPanicSliceAcap\n-//go:linkname goPanicSliceAcapU runtime.goPanicSliceAcapU\n-//go:linkname goPanicSliceB runtime.goPanicSliceB\n-//go:linkname goPanicSliceBU runtime.goPanicSliceBU\n-//go:linkname goPanicSlice3Alen runtime.goPanicSlice3Alen\n-//go:linkname goPanicSlice3AlenU runtime.goPanicSlice3AlenU\n-//go:linkname goPanicSlice3Acap runtime.goPanicSlice3Acap\n-//go:linkname goPanicSlice3AcapU runtime.goPanicSlice3AcapU\n-//go:linkname goPanicSlice3B runtime.goPanicSlice3B\n-//go:linkname goPanicSlice3BU runtime.goPanicSlice3BU\n-//go:linkname goPanicSlice3C runtime.goPanicSlice3C\n-//go:linkname goPanicSlice3CU runtime.goPanicSlice3CU\n-//go:linkname panicmem runtime.panicmem\n+//go:linkname deferproc\n+//go:linkname deferprocStack\n+//go:linkname deferreturn\n+//go:linkname setdeferretaddr\n+//go:linkname checkdefer\n+//go:linkname gopanic\n+//go:linkname canrecover\n+//go:linkname makefuncfficanrecover\n+//go:linkname makefuncreturning\n+//go:linkname gorecover\n+//go:linkname deferredrecover\n+//go:linkname goPanicIndex\n+//go:linkname goPanicIndexU\n+//go:linkname goPanicSliceAlen\n+//go:linkname goPanicSliceAlenU\n+//go:linkname goPanicSliceAcap\n+//go:linkname goPanicSliceAcapU\n+//go:linkname goPanicSliceB\n+//go:linkname goPanicSliceBU\n+//go:linkname goPanicSlice3Alen\n+//go:linkname goPanicSlice3AlenU\n+//go:linkname goPanicSlice3Acap\n+//go:linkname goPanicSlice3AcapU\n+//go:linkname goPanicSlice3B\n+//go:linkname goPanicSlice3BU\n+//go:linkname goPanicSlice3C\n+//go:linkname goPanicSlice3CU\n+//go:linkname panicmem\n // Temporary for C code to call:\n-//go:linkname throw runtime.throw\n+//go:linkname throw\n \n // Check to make sure we can really generate a panic. If the panic\n // was generated from the runtime, or from inside malloc, then convert"}, {"sha": "fa314afc20a3f9f9ba4f4e8759f28a3646442bae", "filename": "libgo/go/runtime/panic32.go", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fpanic32.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fpanic32.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fpanic32.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -6,25 +6,24 @@ package runtime\n \n import _ \"unsafe\" // for go:linkname\n \n-// For gccgo, use go:linkname to rename compiler-called functions to\n-// themselves, so that the compiler will export them.\n+// For gccgo, use go:linkname to export compiler-called functions.\n //\n-//go:linkname goPanicExtendIndex runtime.goPanicExtendIndex\n-//go:linkname goPanicExtendIndexU runtime.goPanicExtendIndexU\n-//go:linkname goPanicExtendSliceAlen runtime.goPanicExtendSliceAlen\n-//go:linkname goPanicExtendSliceAlenU runtime.goPanicExtendSliceAlenU\n-//go:linkname goPanicExtendSliceAcap runtime.goPanicExtendSliceAcap\n-//go:linkname goPanicExtendSliceAcapU runtime.goPanicExtendSliceAcapU\n-//go:linkname goPanicExtendSliceB runtime.goPanicExtendSliceB\n-//go:linkname goPanicExtendSliceBU runtime.goPanicExtendSliceBU\n-//go:linkname goPanicExtendSlice3Alen runtime.goPanicExtendSlice3Alen\n-//go:linkname goPanicExtendSlice3AlenU runtime.goPanicExtendSlice3AlenU\n-//go:linkname goPanicExtendSlice3Acap runtime.goPanicExtendSlice3Acap\n-//go:linkname goPanicExtendSlice3AcapU runtime.goPanicExtendSlice3AcapU\n-//go:linkname goPanicExtendSlice3B runtime.goPanicExtendSlice3B\n-//go:linkname goPanicExtendSlice3BU runtime.goPanicExtendSlice3BU\n-//go:linkname goPanicExtendSlice3C runtime.goPanicExtendSlice3C\n-//go:linkname goPanicExtendSlice3CU runtime.goPanicExtendSlice3CU\n+//go:linkname goPanicExtendIndex\n+//go:linkname goPanicExtendIndexU\n+//go:linkname goPanicExtendSliceAlen\n+//go:linkname goPanicExtendSliceAlenU\n+//go:linkname goPanicExtendSliceAcap\n+//go:linkname goPanicExtendSliceAcapU\n+//go:linkname goPanicExtendSliceB\n+//go:linkname goPanicExtendSliceBU\n+//go:linkname goPanicExtendSlice3Alen\n+//go:linkname goPanicExtendSlice3AlenU\n+//go:linkname goPanicExtendSlice3Acap\n+//go:linkname goPanicExtendSlice3AcapU\n+//go:linkname goPanicExtendSlice3B\n+//go:linkname goPanicExtendSlice3BU\n+//go:linkname goPanicExtendSlice3C\n+//go:linkname goPanicExtendSlice3CU\n \n // Additional index/slice error paths for 32-bit platforms.\n // Used when the high word of a 64-bit index is not zero."}, {"sha": "7729ddc0a74822f06eacff8a5a6119e516b6b6c5", "filename": "libgo/go/runtime/print.go", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fprint.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fprint.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fprint.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -9,27 +9,26 @@ import (\n \t\"unsafe\"\n )\n \n-// For gccgo, use go:linkname to rename compiler-called functions to\n-// themselves, so that the compiler will export them.\n+// For gccgo, use go:linkname to export compiler-called functions.\n //\n-//go:linkname printbool runtime.printbool\n-//go:linkname printfloat runtime.printfloat\n-//go:linkname printint runtime.printint\n-//go:linkname printhex runtime.printhex\n-//go:linkname printuint runtime.printuint\n-//go:linkname printcomplex runtime.printcomplex\n-//go:linkname printstring runtime.printstring\n-//go:linkname printpointer runtime.printpointer\n-//go:linkname printiface runtime.printiface\n-//go:linkname printeface runtime.printeface\n-//go:linkname printslice runtime.printslice\n-//go:linkname printnl runtime.printnl\n-//go:linkname printsp runtime.printsp\n-//go:linkname printlock runtime.printlock\n-//go:linkname printunlock runtime.printunlock\n+//go:linkname printbool\n+//go:linkname printfloat\n+//go:linkname printint\n+//go:linkname printhex\n+//go:linkname printuint\n+//go:linkname printcomplex\n+//go:linkname printstring\n+//go:linkname printpointer\n+//go:linkname printiface\n+//go:linkname printeface\n+//go:linkname printslice\n+//go:linkname printnl\n+//go:linkname printsp\n+//go:linkname printlock\n+//go:linkname printunlock\n // Temporary for C code to call:\n-//go:linkname gwrite runtime.gwrite\n-//go:linkname printhex runtime.printhex\n+//go:linkname gwrite\n+//go:linkname printhex\n \n // The compiler knows that a print of a value of this type\n // should use printhex instead of printuint (decimal)."}, {"sha": "fa85d262efea47f767548ec31f4deae692bccca0", "filename": "libgo/go/runtime/proc.go", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fproc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fproc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fproc.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -12,37 +12,37 @@ import (\n )\n \n // Functions called by C code.\n-//go:linkname main runtime.main\n-//go:linkname goparkunlock runtime.goparkunlock\n-//go:linkname newextram runtime.newextram\n-//go:linkname acquirep runtime.acquirep\n-//go:linkname releasep runtime.releasep\n-//go:linkname incidlelocked runtime.incidlelocked\n-//go:linkname ginit runtime.ginit\n-//go:linkname schedinit runtime.schedinit\n-//go:linkname ready runtime.ready\n-//go:linkname stopm runtime.stopm\n-//go:linkname handoffp runtime.handoffp\n-//go:linkname wakep runtime.wakep\n-//go:linkname stoplockedm runtime.stoplockedm\n-//go:linkname schedule runtime.schedule\n-//go:linkname execute runtime.execute\n-//go:linkname goexit1 runtime.goexit1\n-//go:linkname reentersyscall runtime.reentersyscall\n-//go:linkname reentersyscallblock runtime.reentersyscallblock\n-//go:linkname exitsyscall runtime.exitsyscall\n-//go:linkname gfget runtime.gfget\n-//go:linkname kickoff runtime.kickoff\n-//go:linkname mstart1 runtime.mstart1\n-//go:linkname mexit runtime.mexit\n-//go:linkname globrunqput runtime.globrunqput\n-//go:linkname pidleget runtime.pidleget\n+//go:linkname main\n+//go:linkname goparkunlock\n+//go:linkname newextram\n+//go:linkname acquirep\n+//go:linkname releasep\n+//go:linkname incidlelocked\n+//go:linkname ginit\n+//go:linkname schedinit\n+//go:linkname ready\n+//go:linkname stopm\n+//go:linkname handoffp\n+//go:linkname wakep\n+//go:linkname stoplockedm\n+//go:linkname schedule\n+//go:linkname execute\n+//go:linkname goexit1\n+//go:linkname reentersyscall\n+//go:linkname reentersyscallblock\n+//go:linkname exitsyscall\n+//go:linkname gfget\n+//go:linkname kickoff\n+//go:linkname mstart1\n+//go:linkname mexit\n+//go:linkname globrunqput\n+//go:linkname pidleget\n \n // Exported for test (see runtime/testdata/testprogcgo/dropm_stub.go).\n-//go:linkname getm runtime.getm\n+//go:linkname getm\n \n // Function called by misc/cgo/test.\n-//go:linkname lockedOSThread runtime.lockedOSThread\n+//go:linkname lockedOSThread\n \n // C functions for thread and context management.\n func newosproc(*m)"}, {"sha": "abc5eab00d5052aaa473f004fb0930fba07fc055", "filename": "libgo/go/runtime/runtime.go", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fruntime.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fruntime.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fruntime.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -14,10 +14,9 @@ import (\n //go:generate go run mkfastlog2table.go\n \n // For gccgo, while we still have C runtime code, use go:linkname to\n-// rename some functions to themselves, so that the compiler will\n-// export them.\n+// export some functions.\n //\n-//go:linkname tickspersecond runtime.tickspersecond\n+//go:linkname tickspersecond\n \n var ticksLock mutex\n var ticksVal uint64"}, {"sha": "d9309cca771cdff75f0308443d46b7297c2ce527", "filename": "libgo/go/runtime/runtime1.go", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fruntime1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fruntime1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fruntime1.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -11,16 +11,15 @@ import (\n )\n \n // For gccgo, while we still have C runtime code, use go:linkname to\n-// rename some functions to themselves, so that the compiler will\n-// export them.\n+// export some functions to themselves.\n //\n-//go:linkname gotraceback runtime.gotraceback\n-//go:linkname args runtime.args\n-//go:linkname goargs runtime.goargs\n-//go:linkname check runtime.check\n-//go:linkname goenvs_unix runtime.goenvs_unix\n-//go:linkname parsedebugvars runtime.parsedebugvars\n-//go:linkname timediv runtime.timediv\n+//go:linkname gotraceback\n+//go:linkname args\n+//go:linkname goargs\n+//go:linkname check\n+//go:linkname goenvs_unix\n+//go:linkname parsedebugvars\n+//go:linkname timediv\n \n // Keep a cached value to make gotraceback fast,\n // since we call it on every call to gentraceback."}, {"sha": "fd77c4ca84e048b9a391d0cf376d471ab8f9b058", "filename": "libgo/go/runtime/runtime2.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fruntime2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fruntime2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fruntime2.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -930,7 +930,7 @@ type sigset _sigset_t\n \n // getMemstats returns a pointer to the internal memstats variable,\n // for C code.\n-//go:linkname getMemstats runtime.getMemstats\n+//go:linkname getMemstats\n func getMemstats() *mstats {\n \treturn &memstats\n }"}, {"sha": "41e5e88b286a739ed739d18e2d2c176a6aa596be", "filename": "libgo/go/runtime/select.go", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fselect.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fselect.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fselect.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -10,11 +10,10 @@ import (\n \t\"unsafe\"\n )\n \n-// For gccgo, use go:linkname to rename compiler-called functions to\n-// themselves, so that the compiler will export them.\n+// For gccgo, use go:linkname to export compiler-called functions.\n //\n-//go:linkname selectgo runtime.selectgo\n-//go:linkname block runtime.block\n+//go:linkname selectgo\n+//go:linkname block\n \n const debugSelect = false\n "}, {"sha": "e1bab8caba39e09d24ae0608048b16753e38adb8", "filename": "libgo/go/runtime/signal_unix.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fsignal_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fsignal_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fsignal_unix.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -12,8 +12,8 @@ import (\n )\n \n // For gccgo's C code to call:\n-//go:linkname initsig runtime.initsig\n-//go:linkname sigtrampgo runtime.sigtrampgo\n+//go:linkname initsig\n+//go:linkname sigtrampgo\n \n // sigTabT is the type of an entry in the global sigtable array.\n // sigtable is inherently system dependent, and appears in OS-specific files,"}, {"sha": "4b15f82a54ef18b72fe80c0ac2cc4f8d63b67f39", "filename": "libgo/go/runtime/slice.go", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fslice.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fslice.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fslice.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -10,14 +10,13 @@ import (\n \t\"unsafe\"\n )\n \n-// For gccgo, use go:linkname to rename compiler-called functions to\n-// themselves, so that the compiler will export them.\n+// For gccgo, use go:linkname to export compiler-called functions.\n //\n-//go:linkname makeslice runtime.makeslice\n-//go:linkname makeslice64 runtime.makeslice64\n-//go:linkname growslice runtime.growslice\n-//go:linkname slicecopy runtime.slicecopy\n-//go:linkname slicestringcopy runtime.slicestringcopy\n+//go:linkname makeslice\n+//go:linkname makeslice64\n+//go:linkname growslice\n+//go:linkname slicecopy\n+//go:linkname slicestringcopy\n \n type slice struct {\n \tarray unsafe.Pointer"}, {"sha": "d225dc3a6437fbdbc1637a1ffc019786cdde905e", "filename": "libgo/go/runtime/string.go", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fstring.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fstring.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fstring.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -9,19 +9,18 @@ import (\n \t\"unsafe\"\n )\n \n-// For gccgo, use go:linkname to rename compiler-called functions to\n-// themselves, so that the compiler will export them.\n+// For gccgo, use go:linkname to export compiler-called functions.\n //\n-//go:linkname concatstrings runtime.concatstrings\n-//go:linkname slicebytetostring runtime.slicebytetostring\n-//go:linkname slicebytetostringtmp runtime.slicebytetostringtmp\n-//go:linkname stringtoslicebyte runtime.stringtoslicebyte\n-//go:linkname stringtoslicerune runtime.stringtoslicerune\n-//go:linkname slicerunetostring runtime.slicerunetostring\n-//go:linkname intstring runtime.intstring\n+//go:linkname concatstrings\n+//go:linkname slicebytetostring\n+//go:linkname slicebytetostringtmp\n+//go:linkname stringtoslicebyte\n+//go:linkname stringtoslicerune\n+//go:linkname slicerunetostring\n+//go:linkname intstring\n // Temporary for C code to call:\n-//go:linkname gostringnocopy runtime.gostringnocopy\n-//go:linkname findnull runtime.findnull\n+//go:linkname gostringnocopy\n+//go:linkname findnull\n \n // The constant is known to the compiler.\n // There is no fundamental theory behind this number."}, {"sha": "4662251da7f2265a9b72135011b6e2bf8c9b985f", "filename": "libgo/go/runtime/stubs.go", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fstubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Fstubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fstubs.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -165,7 +165,6 @@ func breakpoint()\n \n func asminit() {}\n \n-//go:linkname reflectcall runtime.reflectcall\n //go:noescape\n func reflectcall(fntype *functype, fn *funcval, isInterface, isMethod bool, params, results *unsafe.Pointer)\n \n@@ -280,13 +279,13 @@ func osyield()\n func syscall(trap uintptr, a1, a2, a3, a4, a5, a6 uintptr) uintptr\n \n // For gccgo, to communicate from the C code to the Go code.\n-//go:linkname setIsCgo runtime.setIsCgo\n+//go:linkname setIsCgo\n func setIsCgo() {\n \tiscgo = true\n }\n \n // For gccgo, to communicate from the C code to the Go code.\n-//go:linkname setSupportAES runtime.setSupportAES\n+//go:linkname setSupportAES\n func setSupportAES(v bool) {\n \tsupport_aes = v\n }\n@@ -320,7 +319,7 @@ func dumpregs(*_siginfo_t, unsafe.Pointer)\n func setRandomNumber(uint32)\n \n // Called by gccgo's proc.c.\n-//go:linkname allocg runtime.allocg\n+//go:linkname allocg\n func allocg() *g {\n \treturn new(g)\n }\n@@ -368,17 +367,16 @@ func abort()\n var usestackmaps bool\n \n // probestackmaps detects whether there are stack maps.\n-//go:linkname probestackmaps runtime.probestackmaps\n func probestackmaps() bool\n \n // For the math/bits packages for gccgo.\n-//go:linkname getDivideError runtime.getDivideError\n+//go:linkname getDivideError\n func getDivideError() error {\n \treturn divideError\n }\n \n // For the math/bits packages for gccgo.\n-//go:linkname getOverflowError runtime.getOverflowError\n+//go:linkname getOverflowError\n func getOverflowError() error {\n \treturn overflowError\n }"}, {"sha": "13905353f83ad78cb3304c0c0f3d1ce198820473", "filename": "libgo/go/runtime/type.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Ftype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Ftype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Ftype.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -179,7 +179,7 @@ var typelistLock mutex\n // type descriptors.\n // p points to a list of *typeDescriptorList, n is the length\n // of the list.\n-//go:linkname registerTypeDescriptors runtime.registerTypeDescriptors\n+//go:linkname registerTypeDescriptors\n func registerTypeDescriptors(n int, p unsafe.Pointer) {\n \t*(*slice)(unsafe.Pointer(&typelist.lists)) = slice{p, n, n}\n }"}, {"sha": "6590472c0d3c7efe16465beb4d1cdbff27fcb930", "filename": "libgo/go/runtime/utf8.go", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Futf8.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c/libgo%2Fgo%2Fruntime%2Futf8.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Futf8.go?ref=c70ff9f9be0c7360a37519ec68ac4dd41e8d0a3c", "patch": "@@ -6,10 +6,9 @@ package runtime\n \n import _ \"unsafe\" // For go:linkname.\n \n-// For gccgo, use go:linkname to rename compiler-called functions to\n-// themselves, so that the compiler will export them.\n+// For gccgo, use go:linkname to export compiler-called functions.\n //\n-//go:linkname decoderune runtime.decoderune\n+//go:linkname decoderune\n \n // Numbers fundamental to the encoding.\n const ("}]}