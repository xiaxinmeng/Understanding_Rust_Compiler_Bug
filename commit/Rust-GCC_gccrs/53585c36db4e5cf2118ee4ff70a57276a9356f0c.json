{"sha": "53585c36db4e5cf2118ee4ff70a57276a9356f0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM1ODVjMzZkYjRlNWNmMjExOGVlNGZmNzBhNTcyNzZhOTM1NmYwYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-02-01T20:58:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-02-01T20:58:35Z"}, "message": "libgcc2.c: Include auto-host.h.\n\n        * libgcc2.c: Include auto-host.h.\n        (ATTRIBUTE_HIDDEN): New.\n        (__clz_tab): Don't declare here for clz and ctz.\n        (__clzsi2, __clzdi2): Use count_leading_zeros.\n        (__ctzsi2, __ctzdi2): Use count_trailing_zeros.\n        (__popcount_tab): Mark ATTRIBUTE_HIDDEN.\n        (__paritysi2, __paritydi2): Use shifts instead of __popcount_tab.\n        * longlong.h (__clz_tab): Mark ATTRIBUTE_HIDDEN.\n\nFrom-SVN: r62256", "tree": {"sha": "c5ccc05b101856374dffe4cae8ddb3805e239b6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5ccc05b101856374dffe4cae8ddb3805e239b6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53585c36db4e5cf2118ee4ff70a57276a9356f0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53585c36db4e5cf2118ee4ff70a57276a9356f0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53585c36db4e5cf2118ee4ff70a57276a9356f0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53585c36db4e5cf2118ee4ff70a57276a9356f0c/comments", "author": null, "committer": null, "parents": [{"sha": "bc8a6d63e68700570c5616cb654f993e7ca0ca26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc8a6d63e68700570c5616cb654f993e7ca0ca26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc8a6d63e68700570c5616cb654f993e7ca0ca26"}], "stats": {"total": 140, "additions": 80, "deletions": 60}, "files": [{"sha": "fef7792022975bdaf99238ef57cf2feaf703be3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53585c36db4e5cf2118ee4ff70a57276a9356f0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53585c36db4e5cf2118ee4ff70a57276a9356f0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53585c36db4e5cf2118ee4ff70a57276a9356f0c", "patch": "@@ -1,3 +1,14 @@\n+2003-02-01  Richard Henderson  <rth@redhat.com>\n+\n+\t* libgcc2.c: Include auto-host.h.\n+\t(ATTRIBUTE_HIDDEN): New.\n+\t(__clz_tab): Don't declare here for clz and ctz.\n+\t(__clzsi2, __clzdi2): Use count_leading_zeros.\n+\t(__ctzsi2, __ctzdi2): Use count_trailing_zeros.\n+\t(__popcount_tab): Mark ATTRIBUTE_HIDDEN.\n+\t(__paritysi2, __paritydi2): Use shifts instead of __popcount_tab.\n+\t* longlong.h (__clz_tab): Mark ATTRIBUTE_HIDDEN.\n+\n 2003-02-01  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.md (addsi_1_zext splitter): Add TARGET_64BIT"}, {"sha": "4260e25d66cecf0de34d6cb302e2aa412c54f192", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 67, "deletions": 58, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53585c36db4e5cf2118ee4ff70a57276a9356f0c/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53585c36db4e5cf2118ee4ff70a57276a9356f0c/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=53585c36db4e5cf2118ee4ff70a57276a9356f0c", "patch": "@@ -29,10 +29,14 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n+\n+/* We include auto-host.h here to get HAVE_GAS_HIDDEN.  This is\n+   supposedly valid even though this is a \"target\" file.  */\n+#include \"auto-host.h\"\n+\n /* It is incorrect to include config.h here, because this file is being\n    compiled for the target, and hence definitions concerning only the host\n    do not apply.  */\n-\n #include \"tconfig.h\"\n #include \"tsystem.h\"\n #include \"coretypes.h\"\n@@ -43,6 +47,12 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #undef abort\n #endif\n \n+#ifdef HAVE_GAS_HIDDEN\n+#define ATTRIBUTE_HIDDEN  __attribute__ ((__visibility__ (\"hidden\")))\n+#else\n+#define ATTRIBUTE_HIDDEN\n+#endif\n+\n #include \"libgcc2.h\"\n \f\n #ifdef DECLARE_LIBRARY_RENAMES\n@@ -495,11 +505,6 @@ __udiv_w_sdiv (UWtype *rp __attribute__ ((__unused__)),\n #define L_udivmoddi4\n #endif\n \n-#if (defined (L_clzsi2) || defined (L_clzdi2) || \\\n-     defined (L_ctzsi2) || defined (L_ctzdi2))\n-extern const UQItype __clz_tab[];\n-#endif\n-\n #ifdef L_clz\n const UQItype __clz_tab[] =\n {\n@@ -518,84 +523,81 @@ const UQItype __clz_tab[] =\n Wtype\n __clzsi2 (USItype x)\n {\n-  Wtype a;\n-\n-  /* Note that we've already verified that BITS_PER_UNIT == 8, and\n-     thus SItype is 32 bits wide.  */\n-  if (x < (1 << 2 * 8))\n-    if (x < (1 << 1 * 8))\n-      a = 0 * 8;\n-    else\n-      a = 1 * 8;\n-  else\n-    if (x < (1 << 3 * 8))\n-      a = 2 * 8;\n-    else\n-      a = 3 * 8;\n+  UWtype w = x;\n+  Wtype ret;\n \n-  return 32 - (__clz_tab[x >> a] + a);\n+  count_leading_zeros (ret, w);\n+  ret -= (sizeof(w) - sizeof(x)) * BITS_PER_UNIT;\n+\n+  return ret;\n }\n #endif\n \f\n #ifdef L_clzdi2\n Wtype\n __clzdi2 (UDItype x)\n {\n-  Wtype a;\n+  UWtype word;\n+  Wtype ret, add;\n+\n+  if (sizeof(x) > sizeof(word))\n+    {\n+      DWunion uu;\n \n-  /* Note that we've already verified that BITS_PER_UNIT == 8, and\n-     thus DItype is 64 bits wide.  */\n-  for (a = 64 - 8; a > 0; a -= 8)\n-    if (((x >> a) & 0xff) != 0)\n-      break;\n+      uu.ll = x;\n+      if (uu.s.high)\n+\tword = uu.s.high, add = 0;\n+      else\n+\tword = uu.s.low, add = W_TYPE_SIZE;\n+    }\n+  else\n+    word = x, add = (Wtype)(sizeof(x) - sizeof(word)) * BITS_PER_UNIT;\n \n-  return 64 - (__clz_tab[x >> a] + a);\n+  count_leading_zeros (ret, word);\n+  return ret + add;\n }\n #endif\n \f\n #ifdef L_ctzsi2\n Wtype\n __ctzsi2 (USItype x)\n {\n-  Wtype a;\n+  Wtype ret;\n \n-  x = x & -x;\n+  count_trailing_zeros (ret, x);\n \n-  /* Note that we've already verified that BITS_PER_UNIT == 8, and\n-     thus SItype is 32 bits wide.  */\n-  if (x < (1 << 2 * 8))\n-    if (x < (1 << 1 * 8))\n-      a = 0 * 8;\n-    else\n-      a = 1 * 8;\n-  else\n-    if (x < (1 << 3 * 8))\n-      a = 2 * 8;\n-    else\n-      a = 3 * 8;\n-\n-  return __clz_tab[x >> a] + a - 1;\n+  return ret;\n }\n #endif\n \f\n #ifdef L_ctzdi2\n Wtype\n __ctzdi2 (UDItype x)\n {\n-  Wtype a;\n+  UWtype word;\n+  Wtype ret, add;\n+\n+  if (sizeof(x) > sizeof(word))\n+    {\n+      DWunion uu;\n \n-  x = x & -x;\n-  for (a = 64 - 8; a > 0; a -= 8)\n-    if (((x >> a) & 0xff) != 0)\n-      break;\n+      uu.ll = x;\n+      if (uu.s.low)\n+\tword = uu.s.low, add = 0;\n+      else\n+\tword = uu.s.high, add = W_TYPE_SIZE;\n+    }\n+  else\n+    word = x, add = 0;\n \n-  return __clz_tab[x >> a] + a - 1;\n+  count_trailing_zeros (ret, word);\n+  return ret + add;\n }\n #endif\n \n-#if (defined (L_popcountsi2) || defined (L_popcountdi2) || \\\n-     defined (L_paritysi2) || defined (L_paritydi2))\n-extern const UQItype __popcount_tab[];\n+#if (defined (L_popcountsi2) || defined (L_popcountdi2)\t\\\n+     || defined (L_popcount_tab))\n+extern const UQItype __popcount_tab[] ATTRIBUTE_HIDDEN;\n #endif\n \n #ifdef L_popcount_tab\n@@ -642,20 +644,27 @@ __popcountdi2 (UDItype x)\n Wtype\n __paritysi2 (USItype x)\n {\n-  x ^= x >> 16;\n-  x ^= x >> 8;\n-  return __popcount_tab[x & 0xff] & 1;\n+  UWtype nx = x;\n+  nx ^= nx >> 16;\n+  nx ^= nx >> 8;\n+  nx ^= nx >> 4;\n+  nx ^= nx >> 2;\n+  nx ^= nx >> 1;\n+  return nx & 1;\n }\n #endif\n \f\n #ifdef L_paritydi2\n Wtype\n __paritydi2 (UDItype x)\n {\n-  Wtype nx = x ^ (x >> 32);\n+  UWtype nx = x ^ (x >> 32);\n   nx ^= nx >> 16;\n   nx ^= nx >> 8;\n-  return __popcount_tab[nx & 0xff] & 1;\n+  nx ^= nx >> 4;\n+  nx ^= nx >> 2;\n+  nx ^= nx >> 1;\n+  return nx & 1;\n }\n #endif\n "}, {"sha": "c1fee2d25893ca20d72be23bd6bfc267fc1a1c55", "filename": "gcc/longlong.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53585c36db4e5cf2118ee4ff70a57276a9356f0c/gcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53585c36db4e5cf2118ee4ff70a57276a9356f0c/gcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flonglong.h?ref=53585c36db4e5cf2118ee4ff70a57276a9356f0c", "patch": "@@ -134,7 +134,7 @@ extern UDItype __udiv_qrnnd (UDItype *, UDItype, UDItype, UDItype);\n   __asm__(\"cttz %1,%0\" : \"=r\"(COUNT) : \"r\"(X))\n #define COUNT_LEADING_ZEROS_0 64\n #else\n-extern const UQItype __clz_tab[];\n+extern const UQItype __clz_tab[] ATTRIBUTE_HIDDEN;\n #define count_leading_zeros(COUNT,X) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     UDItype __xr = (X), __t, __a;\t\t\t\t\t\\\n@@ -1287,7 +1287,7 @@ UDItype __umulsidi3 (USItype, USItype);\n #endif\n \n #if !defined (count_leading_zeros)\n-extern const UQItype __clz_tab[];\n+extern const UQItype __clz_tab[] ATTRIBUTE_HIDDEN;\n #define count_leading_zeros(count, x) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     UWtype __xr = (x);\t\t\t\t\t\t\t\\"}]}