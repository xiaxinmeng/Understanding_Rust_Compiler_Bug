{"sha": "9597375a25a1f993208611d1f3793d877c50d323", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU5NzM3NWEyNWExZjk5MzIwODYxMWQxZjM3OTNkODc3YzUwZDMyMw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-03T21:36:14Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-03T21:36:14Z"}, "message": "re PR target/50457 (SH2A atomic functions)\n\n\tPR target/50457\n\t* config/sh/sh.c (parse_validate_atomic_model_option): Handle name\n\tstrings in sh_atomic_model.\n\t* config/sh/sh.h (TARGET_CPU_CPP_BUILTINS): Move macro implementation\n\tto ...\n\t* config/sh/sh-c.c (sh_cpu_cpp_builtins): ... this new function.\n\tAdd __SH1__ and __SH2__ defines.  Add __SH_ATOMIC_MODEL_*__ define.\n\t* config/sh/sh-protos.h (sh_atomic_model): Add name and cdef_name\n\tvariables.\n\t(sh_cpu_cpp_builtins): Declare new function.\n\n\tPR target/50457\n\t* config/sh/linux-atomic.S: Delete.\n\t* config/sh/linux-atomic.c: New.\n\t* config/sh/t-linux (LIB2ADD): Replace linux-atomic.S with\n\tlinux-atomic.c.  Add cflags to disable warnings.\n\nFrom-SVN: r192051", "tree": {"sha": "fc71bcf1d0b65b9bef37251498b377478996703e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc71bcf1d0b65b9bef37251498b377478996703e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9597375a25a1f993208611d1f3793d877c50d323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9597375a25a1f993208611d1f3793d877c50d323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9597375a25a1f993208611d1f3793d877c50d323", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9597375a25a1f993208611d1f3793d877c50d323/comments", "author": null, "committer": null, "parents": [{"sha": "846b158cd9da478584980fff99df3dc25c459240", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846b158cd9da478584980fff99df3dc25c459240", "html_url": "https://github.com/Rust-GCC/gccrs/commit/846b158cd9da478584980fff99df3dc25c459240"}], "stats": {"total": 515, "additions": 217, "deletions": 298}, "files": [{"sha": "fcdeec9685a652c4d670e2296ee91bd4058cbe88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9597375a25a1f993208611d1f3793d877c50d323/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9597375a25a1f993208611d1f3793d877c50d323/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9597375a25a1f993208611d1f3793d877c50d323", "patch": "@@ -1,3 +1,16 @@\n+2012-10-03  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/50457\n+\t* config/sh/sh.c (parse_validate_atomic_model_option): Handle name\n+\tstrings in sh_atomic_model.\n+\t* config/sh/sh.h (TARGET_CPU_CPP_BUILTINS): Move macro implementation\n+\tto ...\n+\t* config/sh/sh-c.c (sh_cpu_cpp_builtins): ... this new function.\n+\tAdd __SH1__ and __SH2__ defines.  Add __SH_ATOMIC_MODEL_*__ define.\n+\t* config/sh/sh-protos.h (sh_atomic_model): Add name and cdef_name\n+\tvariables.\n+\t(sh_cpu_cpp_builtins): Declare new function.\n+\n 2012-10-03  Dehao Chen  <dehao@google.com>\n \n \tPR middle-end/54782"}, {"sha": "94c5f99d270a271d706d9021df64c50b28e9ab05", "filename": "gcc/config/sh/sh-c.c", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9597375a25a1f993208611d1f3793d877c50d323/gcc%2Fconfig%2Fsh%2Fsh-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9597375a25a1f993208611d1f3793d877c50d323/gcc%2Fconfig%2Fsh%2Fsh-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-c.c?ref=9597375a25a1f993208611d1f3793d877c50d323", "patch": "@@ -25,6 +25,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"tm_p.h\"\n+#include \"cpplib.h\"\n+#include \"c-family/c-common.h\"\n+#include \"target.h\"\n \n /* Handle machine specific pragmas to be semi-compatible with Renesas\n    compiler.  */\n@@ -66,3 +69,79 @@ sh_pr_nosave_low_regs (struct cpp_reader *pfile ATTRIBUTE_UNUSED)\n {\n   sh_add_function_attribute (\"nosave_low_regs\");\n }\n+\n+#define builtin_define(TXT) cpp_define (pfile, TXT)\n+#define builtin_assert(TXT) cpp_assert (pfile, TXT)\n+\n+/* Implement the TARGET_CPU_CPP_BUILTINS macro  */\n+void\n+sh_cpu_cpp_builtins (cpp_reader* pfile)\n+{\n+  builtin_define (\"__sh__\");\n+  builtin_assert (\"cpu=sh\");\n+  builtin_assert (\"machine=sh\");\n+  switch ((int) sh_cpu)\n+    {\n+    case PROCESSOR_SH1:\n+      builtin_define (\"__sh1__\");\n+      builtin_define (\"__SH1__\");\n+      break;\n+    case PROCESSOR_SH2:\n+      builtin_define (\"__sh2__\");\n+      builtin_define (\"__SH2__\");\n+      break;\n+    case PROCESSOR_SH2E:\n+      builtin_define (\"__SH2E__\");\n+      break;\n+    case PROCESSOR_SH2A:\n+      builtin_define (\"__SH2A__\");\n+      if (TARGET_SH2A_DOUBLE)\n+\tbuiltin_define (TARGET_FPU_SINGLE\n+\t\t\t? \"__SH2A_SINGLE__\" : \"__SH2A_DOUBLE__\");\n+      else\n+\tbuiltin_define (TARGET_FPU_ANY\n+\t\t\t? \"__SH2A_SINGLE_ONLY__\" : \"__SH2A_NOFPU__\");\n+      break;\n+    case PROCESSOR_SH3:\n+      builtin_define (\"__sh3__\");\n+      builtin_define (\"__SH3__\");\n+      if (TARGET_HARD_SH4)\n+\tbuiltin_define (\"__SH4_NOFPU__\");\n+      break;\n+    case PROCESSOR_SH3E:\n+      builtin_define (TARGET_HARD_SH4 ? \"__SH4_SINGLE_ONLY__\" : \"__SH3E__\");\n+      break;\n+    case PROCESSOR_SH4:\n+      builtin_define (TARGET_FPU_SINGLE ? \"__SH4_SINGLE__\" : \"__SH4__\");\n+      break;\n+    case PROCESSOR_SH4A: \\\n+      builtin_define (\"__SH4A__\");\n+      builtin_define (TARGET_SH4\n+\t\t      ? (TARGET_FPU_SINGLE ? \"__SH4_SINGLE__\" : \"__SH4__\")\n+\t\t      : TARGET_FPU_ANY ? \"__SH4_SINGLE_ONLY__\"\n+\t\t      : \"__SH4_NOFPU__\");\n+      break;\n+    case PROCESSOR_SH5:\n+      {\n+\tbuiltin_define_with_value (\"__SH5__\",\n+\t\t\t\t   TARGET_SHMEDIA64 ? \"64\" : \"32\", 0);\n+\tbuiltin_define_with_value (\"__SHMEDIA__\",\n+\t\t\t\t   TARGET_SHMEDIA ? \"1\" : \"0\", 0);\n+\tif (! TARGET_FPU_DOUBLE)\n+\t  builtin_define (\"__SH4_NOFPU__\");\n+      }\n+    }\n+  if (TARGET_FPU_ANY)\n+    builtin_define (\"__SH_FPU_ANY__\");\n+  if (TARGET_FPU_DOUBLE)\n+    builtin_define (\"__SH_FPU_DOUBLE__\");\n+  if (TARGET_HITACHI)\n+    builtin_define (\"__HITACHI__\");\n+  if (TARGET_FMOVD)\n+    builtin_define (\"__FMOVD_ENABLED__\");\n+  builtin_define (TARGET_LITTLE_ENDIAN\n+\t\t  ? \"__LITTLE_ENDIAN__\" : \"__BIG_ENDIAN__\");\n+\n+  cpp_define_formatted (pfile, \"__SH_ATOMIC_MODEL_%s__\",\n+\t\t\tselected_atomic_model ().cdef_name);\n+}"}, {"sha": "d908110dc1b072f6e1facc5b87941e1d626f1fc2", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9597375a25a1f993208611d1f3793d877c50d323/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9597375a25a1f993208611d1f3793d877c50d323/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=9597375a25a1f993208611d1f3793d877c50d323", "patch": "@@ -55,6 +55,14 @@ struct sh_atomic_model\n       happen on SH4A.  */\n   bool strict;\n   enum_type type;\n+\n+  /* Name string as it was specified on the command line.  */\n+  const char* name;\n+\n+  /* Name string as it is used in C/C++ defines.  */\n+  const char* cdef_name;\n+\n+  /* GBR offset variable for TCB model.  */\n   int tcb_gbr_offset;\n };\n \n@@ -156,6 +164,8 @@ extern void sh_canonicalize_comparison (enum rtx_code&, rtx&, rtx&,\n \n #endif /* RTX_CODE */\n \n+extern void sh_cpu_cpp_builtins (cpp_reader* pfile);\n+\n extern const char *output_jump_label_table (void);\n extern rtx get_t_reg_rtx (void);\n extern rtx get_fpscr_rtx (void);"}, {"sha": "9f6b796f466c5aabd0c3eae9bba8cc0d366338a2", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9597375a25a1f993208611d1f3793d877c50d323/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9597375a25a1f993208611d1f3793d877c50d323/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=9597375a25a1f993208611d1f3793d877c50d323", "patch": "@@ -619,8 +619,17 @@ parse_validate_atomic_model_option (const char* str)\n   model_names[sh_atomic_model::soft_tcb] = \"soft-tcb\";\n   model_names[sh_atomic_model::soft_imask] = \"soft-imask\";\n \n+  const char* model_cdef_names[sh_atomic_model::num_models];\n+  model_cdef_names[sh_atomic_model::none] = \"NONE\";\n+  model_cdef_names[sh_atomic_model::soft_gusa] = \"SOFT_GUSA\";\n+  model_cdef_names[sh_atomic_model::hard_llcs] = \"HARD_LLCS\";\n+  model_cdef_names[sh_atomic_model::soft_tcb] = \"SOFT_TCB\";\n+  model_cdef_names[sh_atomic_model::soft_imask] = \"SOFT_IMASK\";\n+\n   sh_atomic_model ret;\n   ret.type = sh_atomic_model::none;\n+  ret.name = model_names[sh_atomic_model::none];\n+  ret.cdef_name = model_cdef_names[sh_atomic_model::none];\n   ret.strict = false;\n   ret.tcb_gbr_offset = -1;\n \n@@ -646,6 +655,8 @@ parse_validate_atomic_model_option (const char* str)\n       if (tokens.front () == model_names[i])\n \t{\n \t  ret.type = (sh_atomic_model::enum_type)i;\n+\t  ret.name = model_names[i];\n+\t  ret.cdef_name = model_cdef_names[i];\n \t  goto got_mode_name;\n \t}\n \n@@ -677,25 +688,23 @@ got_mode_name:;\n \n   if (ret.type == sh_atomic_model::soft_gusa && !TARGET_SH3)\n     err_ret (\"atomic model %s is only available on SH3 and SH4 targets\",\n-\t     model_names[ret.type]);\n+\t     ret.name);\n \n   if (ret.type == sh_atomic_model::hard_llcs && !TARGET_SH4A)\n-    err_ret (\"atomic model %s is only available on SH4A targets\",\n-\t     model_names[ret.type]);\n+    err_ret (\"atomic model %s is only available on SH4A targets\", ret.name);\n \n   if (ret.type == sh_atomic_model::soft_tcb && ret.tcb_gbr_offset == -1)\n-    err_ret (\"atomic model %s requires gbr-offset parameter\", \n-\t     model_names[ret.type]);\n+    err_ret (\"atomic model %s requires gbr-offset parameter\", ret.name);\n \n   if (ret.type == sh_atomic_model::soft_tcb\n       && (ret.tcb_gbr_offset < 0 || ret.tcb_gbr_offset > 1020\n           || (ret.tcb_gbr_offset & 3) != 0))\n     err_ret (\"invalid gbr-offset value \\\"%d\\\" for atomic model %s; it must be \"\n \t     \"a multiple of 4 in the range 0-1020\", ret.tcb_gbr_offset,\n-\t     model_names[ret.type]);\n+\t     ret.name);\n \n   if (ret.type == sh_atomic_model::soft_imask && TARGET_USERMODE)\n-    err_ret (\"cannot use atomic model %s in user mode\", model_names[ret.type]);\n+    err_ret (\"cannot use atomic model %s in user mode\", ret.name);\n \n   return ret;\n "}, {"sha": "52875265ed616e111e8287b67158a4fe9ac3be60", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 63, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9597375a25a1f993208611d1f3793d877c50d323/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9597375a25a1f993208611d1f3793d877c50d323/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=9597375a25a1f993208611d1f3793d877c50d323", "patch": "@@ -31,69 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n /* ??? No longer true.  */\n extern int code_for_indirect_jump_scratch;\n \n-#define TARGET_CPU_CPP_BUILTINS() \\\n-do { \\\n-  builtin_define (\"__sh__\"); \\\n-  builtin_assert (\"cpu=sh\"); \\\n-  builtin_assert (\"machine=sh\"); \\\n-  switch ((int) sh_cpu) \\\n-    { \\\n-    case PROCESSOR_SH1: \\\n-      builtin_define (\"__sh1__\"); \\\n-      break; \\\n-    case PROCESSOR_SH2: \\\n-      builtin_define (\"__sh2__\"); \\\n-      break; \\\n-    case PROCESSOR_SH2E: \\\n-      builtin_define (\"__SH2E__\"); \\\n-      break; \\\n-    case PROCESSOR_SH2A: \\\n-      builtin_define (\"__SH2A__\"); \\\n-      builtin_define (TARGET_SH2A_DOUBLE \\\n-\t\t      ? (TARGET_FPU_SINGLE ? \"__SH2A_SINGLE__\" : \"__SH2A_DOUBLE__\") \\\n-\t\t      : TARGET_FPU_ANY ? \"__SH2A_SINGLE_ONLY__\" \\\n-\t\t      : \"__SH2A_NOFPU__\"); \\\n-      break; \\\n-    case PROCESSOR_SH3: \\\n-      builtin_define (\"__sh3__\"); \\\n-      builtin_define (\"__SH3__\"); \\\n-      if (TARGET_HARD_SH4) \\\n-\tbuiltin_define (\"__SH4_NOFPU__\"); \\\n-      break; \\\n-    case PROCESSOR_SH3E: \\\n-      builtin_define (TARGET_HARD_SH4 ? \"__SH4_SINGLE_ONLY__\" : \"__SH3E__\"); \\\n-      break; \\\n-    case PROCESSOR_SH4: \\\n-      builtin_define (TARGET_FPU_SINGLE ? \"__SH4_SINGLE__\" : \"__SH4__\"); \\\n-      break; \\\n-    case PROCESSOR_SH4A: \\\n-      builtin_define (\"__SH4A__\"); \\\n-      builtin_define (TARGET_SH4 \\\n-\t\t      ? (TARGET_FPU_SINGLE ? \"__SH4_SINGLE__\" : \"__SH4__\") \\\n-\t\t      : TARGET_FPU_ANY ? \"__SH4_SINGLE_ONLY__\" \\\n-\t\t      : \"__SH4_NOFPU__\"); \\\n-      break; \\\n-    case PROCESSOR_SH5: \\\n-      { \\\n-\tbuiltin_define_with_value (\"__SH5__\", \\\n-\t\t\t\t   TARGET_SHMEDIA64 ? \"64\" : \"32\", 0); \\\n-\tbuiltin_define_with_value (\"__SHMEDIA__\", \\\n-\t\t\t\t   TARGET_SHMEDIA ? \"1\" : \"0\", 0); \\\n-\tif (! TARGET_FPU_DOUBLE) \\\n-\t  builtin_define (\"__SH4_NOFPU__\"); \\\n-      } \\\n-    } \\\n-  if (TARGET_FPU_ANY) \\\n-    builtin_define (\"__SH_FPU_ANY__\"); \\\n-  if (TARGET_FPU_DOUBLE) \\\n-    builtin_define (\"__SH_FPU_DOUBLE__\"); \\\n-  if (TARGET_HITACHI) \\\n-    builtin_define (\"__HITACHI__\"); \\\n-  if (TARGET_FMOVD) \\\n-    builtin_define (\"__FMOVD_ENABLED__\"); \\\n-  builtin_define (TARGET_LITTLE_ENDIAN \\\n-\t\t  ? \"__LITTLE_ENDIAN__\" : \"__BIG_ENDIAN__\"); \\\n-} while (0)\n+#define TARGET_CPU_CPP_BUILTINS() sh_cpu_cpp_builtins (pfile)\n \n /* Value should be nonzero if functions must have frame pointers.\n    Zero means the frame pointer need not be set up (and parms may be accessed"}, {"sha": "683d2d113aacb824650a5d0ca85727eb063f1cb2", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9597375a25a1f993208611d1f3793d877c50d323/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9597375a25a1f993208611d1f3793d877c50d323/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=9597375a25a1f993208611d1f3793d877c50d323", "patch": "@@ -1,3 +1,11 @@\n+2012-10-03  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/50457\n+\t* config/sh/linux-atomic.S: Delete.\n+\t* config/sh/linux-atomic.c: New.\n+\t* config/sh/t-linux (LIB2ADD): Replace linux-atomic.S with\n+\tlinux-atomic.c.  Add cflags to disable warnings.\n+\n 2012-10-02  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR other/53889\n@@ -16,8 +24,8 @@\n \n 2012-09-19  Mark Kettenis  <kettenis@openbsd.org>\n \n-        * config.host (hppa-*-openbsd*): New target.\n-        * config/pa/t-openbsd: New file.\n+\t* config.host (hppa-*-openbsd*): New target.\n+\t* config/pa/t-openbsd: New file.\n \n 2012-09-15  Georg-Johann Lay  <avr@gjlay.de>\n \n@@ -50,9 +58,9 @@\n \n 2012-09-07  Teresa Johnson  <tejohnson@google.com>\n \n-        PR gcov-profile/54487\n+\tPR gcov-profile/54487\n \t* libgcc/libgcov.c (gcov_exit): Avoid warning on histogram\n-        differences.\n+\tdifferences.\n \n 2012-09-05  Georg-Johann Lay  <avr@gjlay.de>\n "}, {"sha": "743c61bb76c66904ffd738687bfd108d1e94da99", "filename": "libgcc/config/sh/linux-atomic.S", "status": "removed", "additions": 0, "deletions": 223, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846b158cd9da478584980fff99df3dc25c459240/libgcc%2Fconfig%2Fsh%2Flinux-atomic.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846b158cd9da478584980fff99df3dc25c459240/libgcc%2Fconfig%2Fsh%2Flinux-atomic.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Flinux-atomic.S?ref=846b158cd9da478584980fff99df3dc25c459240", "patch": "@@ -1,223 +0,0 @@\n-/* Copyright (C) 2006, 2008, 2009 Free Software Foundation, Inc.\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3, or (at your option)\n-   any later version.\n-\n-   GCC is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   Under Section 7 of GPL version 3, you are granted additional\n-   permissions described in the GCC Runtime Library Exception, version\n-   3.1, as published by the Free Software Foundation.\n-\n-   You should have received a copy of the GNU General Public License and\n-   a copy of the GCC Runtime Library Exception along with this program;\n-   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-\n-!! Linux specific atomic routines for the Renesas / SuperH SH CPUs.\n-!! Linux kernel for SH3/4 has implemented the support for software\n-!! atomic sequences.\n-\n-#define FUNC(X)\t\t.type X,@function\n-#define HIDDEN_FUNC(X)\tFUNC(X); .hidden X\n-#define ENDFUNC0(X)\t.Lfe_##X: .size X,.Lfe_##X-X\n-#define ENDFUNC(X)\tENDFUNC0(X)\n-\n-#if ! __SH5__\n-\n-#define ATOMIC_TEST_AND_SET(N,T,EXT) \\\n-\t.global\t__sync_lock_test_and_set_##N; \\\n-\tHIDDEN_FUNC(__sync_lock_test_and_set_##N); \\\n-\t.align\t2; \\\n-__sync_lock_test_and_set_##N:; \\\n-\tmova\t1f, r0; \\\n-\tnop; \\\n-\tmov\tr15, r1; \\\n-\tmov\t#(0f-1f), r15; \\\n-0:\tmov.##T\t@r4, r2; \\\n-\tmov.##T\tr5, @r4; \\\n-1:\tmov\tr1, r15; \\\n-\trts; \\\n-\t EXT\tr2, r0; \\\n-\tENDFUNC(__sync_lock_test_and_set_##N)\n-\n-ATOMIC_TEST_AND_SET (1,b,extu.b)\n-ATOMIC_TEST_AND_SET (2,w,extu.w)\n-ATOMIC_TEST_AND_SET (4,l,mov)\n-\n-#define ATOMIC_COMPARE_AND_SWAP(N,T,EXTS,EXT) \\\n-\t.global\t__sync_val_compare_and_swap_##N; \\\n-\tHIDDEN_FUNC(__sync_val_compare_and_swap_##N); \\\n-\t.align\t2; \\\n-__sync_val_compare_and_swap_##N:; \\\n-\tmova\t1f, r0; \\\n-\tEXTS\tr5, r5; \\\n-\tmov\tr15, r1; \\\n-\tmov\t#(0f-1f), r15; \\\n-0:\tmov.##T\t@r4, r2; \\\n-\tcmp/eq\tr2, r5; \\\n-\tbf\t1f; \\\n-\tmov.##T\tr6, @r4; \\\n-1:\tmov\tr1, r15; \\\n-\trts; \\\n-\t EXT\tr2, r0; \\\n-\tENDFUNC(__sync_val_compare_and_swap_##N)\n-\n-ATOMIC_COMPARE_AND_SWAP (1,b,exts.b,extu.b)\n-ATOMIC_COMPARE_AND_SWAP (2,w,exts.w,extu.w)\n-ATOMIC_COMPARE_AND_SWAP (4,l,mov,mov)\n-\n-#define ATOMIC_BOOL_COMPARE_AND_SWAP(N,T,EXTS) \\\n-\t.global\t__sync_bool_compare_and_swap_##N; \\\n-\tHIDDEN_FUNC(__sync_bool_compare_and_swap_##N); \\\n-\t.align\t2; \\\n-__sync_bool_compare_and_swap_##N:; \\\n-\tmova\t1f, r0; \\\n-\tEXTS\tr5, r5; \\\n-\tmov\tr15, r1; \\\n-\tmov\t#(0f-1f), r15; \\\n-0:\tmov.##T\t@r4, r2; \\\n-\tcmp/eq\tr2, r5; \\\n-\tbf\t1f; \\\n-\tmov.##T\tr6, @r4; \\\n-1:\tmov\tr1, r15; \\\n-\trts; \\\n-\t movt\tr0; \\\n-\tENDFUNC(__sync_bool_compare_and_swap_##N)\n-\n-ATOMIC_BOOL_COMPARE_AND_SWAP (1,b,exts.b)\n-ATOMIC_BOOL_COMPARE_AND_SWAP (2,w,exts.w)\n-ATOMIC_BOOL_COMPARE_AND_SWAP (4,l,mov)\n-\n-#define ATOMIC_FETCH_AND_OP(OP,N,T,EXT) \\\n-\t.global\t__sync_fetch_and_##OP##_##N; \\\n-\tHIDDEN_FUNC(__sync_fetch_and_##OP##_##N); \\\n-\t.align\t2; \\\n-__sync_fetch_and_##OP##_##N:; \\\n-\tmova\t1f, r0; \\\n-\tnop; \\\n-\tmov\tr15, r1; \\\n-\tmov\t#(0f-1f), r15; \\\n-0:\tmov.##T\t@r4, r2; \\\n-\tmov\tr5, r3; \\\n-\tOP\tr2, r3; \\\n-\tmov.##T\tr3, @r4; \\\n-1:\tmov\tr1, r15; \\\n-\trts; \\\n-\t EXT\tr2, r0; \\\n-\tENDFUNC(__sync_fetch_and_##OP##_##N)\n-\n-ATOMIC_FETCH_AND_OP(add,1,b,extu.b)\n-ATOMIC_FETCH_AND_OP(add,2,w,extu.w)\n-ATOMIC_FETCH_AND_OP(add,4,l,mov)\n-\n-ATOMIC_FETCH_AND_OP(or,1,b,extu.b)\n-ATOMIC_FETCH_AND_OP(or,2,w,extu.w)\n-ATOMIC_FETCH_AND_OP(or,4,l,mov)\n-\n-ATOMIC_FETCH_AND_OP(and,1,b,extu.b)\n-ATOMIC_FETCH_AND_OP(and,2,w,extu.w)\n-ATOMIC_FETCH_AND_OP(and,4,l,mov)\n-\n-ATOMIC_FETCH_AND_OP(xor,1,b,extu.b)\n-ATOMIC_FETCH_AND_OP(xor,2,w,extu.w)\n-ATOMIC_FETCH_AND_OP(xor,4,l,mov)\n-\n-#define ATOMIC_FETCH_AND_COMBOP(OP,OP0,OP1,N,T,EXT) \\\n-\t.global\t__sync_fetch_and_##OP##_##N; \\\n-\tHIDDEN_FUNC(__sync_fetch_and_##OP##_##N); \\\n-\t.align\t2; \\\n-__sync_fetch_and_##OP##_##N:; \\\n-\tmova\t1f, r0; \\\n-\tmov\tr15, r1; \\\n-\tmov\t#(0f-1f), r15; \\\n-0:\tmov.##T\t@r4, r2; \\\n-\tmov\tr5, r3; \\\n-\tOP0\tr2, r3; \\\n-\tOP1\tr3, r3; \\\n-\tmov.##T\tr3, @r4; \\\n-1:\tmov\tr1, r15; \\\n-\trts; \\\n-\t EXT\tr2, r0; \\\n-\tENDFUNC(__sync_fetch_and_##OP##_##N)\n-\n-ATOMIC_FETCH_AND_COMBOP(sub,sub,neg,1,b,extu.b)\n-ATOMIC_FETCH_AND_COMBOP(sub,sub,neg,2,w,extu.w)\n-ATOMIC_FETCH_AND_COMBOP(sub,sub,neg,4,l,mov)\n-\n-ATOMIC_FETCH_AND_COMBOP(nand,and,not,1,b,extu.b)\n-ATOMIC_FETCH_AND_COMBOP(nand,and,not,2,w,extu.w)\n-ATOMIC_FETCH_AND_COMBOP(nand,and,not,4,l,mov)\n-\n-#define ATOMIC_OP_AND_FETCH(OP,N,T,EXT) \\\n-\t.global\t__sync_##OP##_and_fetch_##N; \\\n-\tHIDDEN_FUNC(__sync_##OP##_and_fetch_##N); \\\n-\t.align\t2; \\\n-__sync_##OP##_and_fetch_##N:; \\\n-\tmova\t1f, r0; \\\n-\tnop; \\\n-\tmov\tr15, r1; \\\n-\tmov\t#(0f-1f), r15; \\\n-0:\tmov.##T\t@r4, r2; \\\n-\tmov\tr5, r3; \\\n-\tOP\tr2, r3; \\\n-\tmov.##T\tr3, @r4; \\\n-1:\tmov\tr1, r15; \\\n-\trts; \\\n-\t EXT\tr3, r0; \\\n-\tENDFUNC(__sync_##OP##_and_fetch_##N)\n-\n-ATOMIC_OP_AND_FETCH(add,1,b,extu.b)\n-ATOMIC_OP_AND_FETCH(add,2,w,extu.w)\n-ATOMIC_OP_AND_FETCH(add,4,l,mov)\n-\n-ATOMIC_OP_AND_FETCH(or,1,b,extu.b)\n-ATOMIC_OP_AND_FETCH(or,2,w,extu.w)\n-ATOMIC_OP_AND_FETCH(or,4,l,mov)\n-\n-ATOMIC_OP_AND_FETCH(and,1,b,extu.b)\n-ATOMIC_OP_AND_FETCH(and,2,w,extu.w)\n-ATOMIC_OP_AND_FETCH(and,4,l,mov)\n-\n-ATOMIC_OP_AND_FETCH(xor,1,b,extu.b)\n-ATOMIC_OP_AND_FETCH(xor,2,w,extu.w)\n-ATOMIC_OP_AND_FETCH(xor,4,l,mov)\n-\n-#define ATOMIC_COMBOP_AND_FETCH(OP,OP0,OP1,N,T,EXT) \\\n-\t.global\t__sync_##OP##_and_fetch_##N; \\\n-\tHIDDEN_FUNC(__sync_##OP##_and_fetch_##N); \\\n-\t.align\t2; \\\n-__sync_##OP##_and_fetch_##N:; \\\n-\tmova\t1f, r0; \\\n-\tmov\tr15, r1; \\\n-\tmov\t#(0f-1f), r15; \\\n-0:\tmov.##T\t@r4, r2; \\\n-\tmov\tr5, r3; \\\n-\tOP0\tr2, r3; \\\n-\tOP1\tr3, r3; \\\n-\tmov.##T\tr3, @r4; \\\n-1:\tmov\tr1, r15; \\\n-\trts; \\\n-\t EXT\tr3, r0; \\\n-\tENDFUNC(__sync_##OP##_and_fetch_##N)\n-\n-ATOMIC_COMBOP_AND_FETCH(sub,sub,neg,1,b,extu.b)\n-ATOMIC_COMBOP_AND_FETCH(sub,sub,neg,2,w,extu.w)\n-ATOMIC_COMBOP_AND_FETCH(sub,sub,neg,4,l,mov)\n-\n-ATOMIC_COMBOP_AND_FETCH(nand,and,not,1,b,extu.b)\n-ATOMIC_COMBOP_AND_FETCH(nand,and,not,2,w,extu.w)\n-ATOMIC_COMBOP_AND_FETCH(nand,and,not,4,l,mov)\n-\n-.section .note.GNU-stack,\"\",%progbits\n-.previous\n-\n-#endif /* ! __SH5__ */"}, {"sha": "a5249c6dc9b5de9093f070c6c746c0da699344dd", "filename": "libgcc/config/sh/linux-atomic.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9597375a25a1f993208611d1f3793d877c50d323/libgcc%2Fconfig%2Fsh%2Flinux-atomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9597375a25a1f993208611d1f3793d877c50d323/libgcc%2Fconfig%2Fsh%2Flinux-atomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Flinux-atomic.c?ref=9597375a25a1f993208611d1f3793d877c50d323", "patch": "@@ -0,0 +1,81 @@\n+/* Copyright (C) 2012 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Atomic built-in C functions for link compatibility with older code that\n+   was compiled to emit function calls for atomic built-ins.\n+   Notice that if no atomic model has been selected the functions in this\n+   file must not be generated, or else they will result in infinite no-op\n+   loops.\n+   Notice also, that all the generated functions below take three parameters,\n+   which is not actually true for some of the built-in functions.  However,\n+   on SH this does not matter, since the first four parameters are always\n+   passed in call clobbered registers.\n+   The return type for the sync_bool_compare_and_swap functions is also\n+   actually supposed to be a bool, but this also doesn't matter since any\n+   int return type <= 32 bit is returned in R0 on SH.  */\n+\n+#if !__SH_ATOMIC_MODEL_NONE__\n+\n+typedef unsigned char uint8_t;\n+typedef unsigned short uint16_t;\n+typedef unsigned int uint32_t;\n+\n+#define uint8_t_sz 1\n+#define uint16_t_sz 2\n+#define uint32_t_sz 4\n+\n+#define typesz(x) x##_sz\n+\n+#define concat(x,y) __ ## x ## _ ## y\n+#define eval(x,y) concat (x,y)\n+#define genname(f,t) eval(f, typesz (t))\n+\n+#define func1(name, type) \\\n+  type __attribute__((visibility(\"hidden\"))) \\\n+  genname (name, type) (type* x, type y, type z) \\\n+  { \\\n+    return __##name (x, y, z); \\\n+  }\n+\n+#define genfuncs(name) \\\n+  func1 (name, uint8_t) \\\n+  func1 (name, uint16_t) \\\n+  func1 (name, uint32_t)\n+\n+genfuncs (sync_lock_test_and_set)\n+genfuncs (sync_val_compare_and_swap)\n+genfuncs (sync_bool_compare_and_swap)\n+genfuncs (sync_fetch_and_add)\n+genfuncs (sync_fetch_and_or)\n+genfuncs (sync_fetch_and_and)\n+genfuncs (sync_fetch_and_xor)\n+genfuncs (sync_fetch_and_sub)\n+genfuncs (sync_fetch_and_nand)\n+genfuncs (sync_add_and_fetch)\n+genfuncs (sync_or_and_fetch)\n+genfuncs (sync_and_and_fetch)\n+genfuncs (sync_xor_and_fetch)\n+genfuncs (sync_sub_and_fetch)\n+genfuncs (sync_nand_and_fetch)\n+\n+#endif"}, {"sha": "60dee8de11ac2b76181e147db9b425624a572bd4", "filename": "libgcc/config/sh/t-linux", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9597375a25a1f993208611d1f3793d877c50d323/libgcc%2Fconfig%2Fsh%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9597375a25a1f993208611d1f3793d877c50d323/libgcc%2Fconfig%2Fsh%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Ft-linux?ref=9597375a25a1f993208611d1f3793d877c50d323", "patch": "@@ -1,9 +1,13 @@\n LIB1ASMFUNCS_CACHE = _ic_invalidate _ic_invalidate_array\n \n-LIB2ADD = $(srcdir)/config/sh/linux-atomic.S\n+LIB2ADD = $(srcdir)/config/sh/linux-atomic.c\n \n HOST_LIBGCC2_CFLAGS += -mieee -DNO_FPSCR_VALUES\n \n+# Silence atomic built-in related warnings in linux-atomic.c.\n+# Unfortunately the conflicting types warning can't be disabled selectively.\n+HOST_LIBGCC2_CFLAGS += -w -Wno-sync-nand\n+\n # Override t-slibgcc-elf-ver to export some libgcc symbols with\n # the symbol versions that glibc used, and hide some lib1func\n # routines which should not be called via PLT.  We have to create"}]}