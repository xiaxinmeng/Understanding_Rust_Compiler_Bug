{"sha": "d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFjOGUwOGEwYzQ1NDgzYjkwYjA5ZTZjZGYxMmNmOGQ3Nzg3NmZkNg==", "commit": {"author": {"name": "Taras Glek", "email": "tglek@mozilla.com", "date": "2009-05-14T01:38:33Z"}, "committer": {"name": "Taras Glek", "email": "tglek@gcc.gnu.org", "date": "2009-05-14T01:38:33Z"}, "message": "2009-05-13  Taras Glek  <tglek@mozilla.com>\ngcc/\n       * attribs.c moved out attribute registration into register_attribute\n       * doc/plugins.texi Documented register_attribute and PLUGIN_ATTRIBUTES\n       * gcc-plugin.h Added forward decl for register_attribute\n       * plugin.c Added PLUGIN_ATTRIBUTES boilerplate\n       * plugin.h Added PLUGIN_ATTRIBUTES\n\ngcc/testsuite/\n       * g++.dg/plugin/attribute_plugin-test-1.C Testcase input for custom attributes and decl smashing\n       * g++.dg/plugin/attribute_plugin.c Testcase plugin to test user attributes\n       * g++.dg/plugin/dumb_plugin.c Fixed typo\n       * g++.dg/plugin/plugin.exp Added attribute_plugin test\n\nFrom-SVN: r147516", "tree": {"sha": "79caa93c375ec4191d07fcb56826aa922c1e1518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79caa93c375ec4191d07fcb56826aa922c1e1518"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/comments", "author": null, "committer": null, "parents": [{"sha": "1806edae58885e4bde7c0a06ec4afb3726e494e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1806edae58885e4bde7c0a06ec4afb3726e494e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1806edae58885e4bde7c0a06ec4afb3726e494e5"}], "stats": {"total": 161, "additions": 155, "deletions": 6}, "files": [{"sha": "4b5637b67675216df5ea1a35fa29f046a7e1b186", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6", "patch": "@@ -1,3 +1,11 @@\n+2009-05-13  Taras Glek  <tglek@mozilla.com>\n+\n+       * attribs.c moved out attribute registration into register_attribute\n+       * doc/plugins.texi Documented register_attribute and PLUGIN_ATTRIBUTES\n+       * gcc-plugin.h Added forward decl for register_attribute\n+       * plugin.c Added PLUGIN_ATTRIBUTES boilerplate\n+       * plugin.h Added PLUGIN_ATTRIBUTES\n+\n 2009-05-14  Dave Korn  <dave.korn.cygwin@gmail.com>\n \n \t* config/i386/msformat-c.c (ms_printf_length_specs):  Use enumeration"}, {"sha": "a7f549e1dc8c8a7f1b5c0fdafd061eb4eb13d357", "filename": "gcc/attribs.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"langhooks.h\"\n #include \"hashtab.h\"\n+#include \"plugin.h\"\n \n static void init_attributes (void);\n \n@@ -182,18 +183,27 @@ init_attributes (void)\n   for (i = 0; i < ARRAY_SIZE (attribute_tables); i++)\n     for (k = 0; attribute_tables[i][k].name != NULL; k++)\n       {\n+        register_attribute (&attribute_tables[i][k]);\n+      }\n+  invoke_plugin_callbacks (PLUGIN_ATTRIBUTES, NULL);\n+  attributes_initialized = true;\n+}\n+\n+/* Insert a single ATTR into the attribute table.  */\n+\n+void\n+register_attribute (const struct attribute_spec *attr) \n+{\n \tstruct substring str;\n \tconst void **slot;\n \n-\tstr.str = attribute_tables[i][k].name;\n-\tstr.length = strlen (attribute_tables[i][k].name);\n+\tstr.str = attr->name;\n+\tstr.length = strlen (str.str);\n \tslot = (const void **)htab_find_slot_with_hash (attribute_hash, &str,\n \t\t\t\t\t substring_hash (str.str, str.length),\n \t\t\t\t\t INSERT);\n \tgcc_assert (!*slot);\n-\t*slot = &attribute_tables[i][k];\n-      }\n-  attributes_initialized = true;\n+\t*slot = attr;\n }\n \n /* Return the spec for the attribute named NAME.  */"}, {"sha": "1710395b50d2d92f39587d313e35c47fb1d533c4", "filename": "gcc/doc/plugins.texi", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Fdoc%2Fplugins.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Fdoc%2Fplugins.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fplugins.texi?ref=d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6", "patch": "@@ -71,6 +71,7 @@ enum plugin_event\n   PLUGIN_FINISH_UNIT,           /* Useful for summary processing.  */\n   PLUGIN_CXX_CP_PRE_GENERICIZE, /* Allows to see low level AST in C++ FE.  */\n   PLUGIN_FINISH,                /* Called before GCC exits.  */\n+  PLUGIN_ATTRIBUTES,            /* Called during attribute registration */\n   PLUGIN_EVENT_LAST             /* Dummy event used for indexing callback\n                                    array.  */\n @};\n@@ -135,3 +136,35 @@ plugin_init (const char *plugin_name, int argc, struct plugin_argument *argv)\n   ...\n @}\n @end smallexample\n+@section Registering custom attributes\n+\n+For analysis purposes it is useful to be able to add custom attributes.\n+\n+The @code{PLUGIN_ATTRIBUTES} callback is called during attribute\n+registration. Use the @code{register_attribute} function to register\n+custom attributes.\n+\n+@smallexample\n+/* Attribute handler callback */\n+static tree\n+handle_user_attribute (tree *node, tree name, tree args,\n+\t\t\tint flags, bool *no_add_attrs)\n+@{\n+  return NULL_TREE;\n+@}\n+\n+/* Attribute definition */\n+static struct attribute_spec user_attr =\n+  @{ \"user\", 1, 1, false,  false, false, handle_user_attribute @};\n+\n+/* Plugin callback called during attribute registration.\n+Registered with register_callback (plugin_name, PLUGIN_ATTRIBUTES, register_attributes, NULL)\n+*/\n+static void \n+register_attributes (void *event_data, void *data)\n+@{\n+  warning (0, G_(\"Callback to register attributes\"));\n+  register_attribute (&user_attr);\n+@}\n+\n+@end smallexample"}, {"sha": "ba20b42475c1226db1729631cd71366dc8f62474", "filename": "gcc/gcc-plugin.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Fgcc-plugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Fgcc-plugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-plugin.h?ref=d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6", "patch": "@@ -29,6 +29,7 @@ enum plugin_event\n   PLUGIN_CXX_CP_PRE_GENERICIZE, /* Allows to see low level AST in C++ FE.  */\n   PLUGIN_FINISH,                /* Called before GCC exits.  */\n   PLUGIN_INFO,                  /* Information about the plugin */\n+  PLUGIN_ATTRIBUTES,            /* Called during attribute registration.  */\n   PLUGIN_EVENT_LAST             /* Dummy event used for indexing callback\n                                    array.  */\n };"}, {"sha": "923f0add0cf482f849b20820eb307cc5721798c9", "filename": "gcc/plugin.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6", "patch": "@@ -493,6 +493,7 @@ register_callback (const char *plugin_name,\n       case PLUGIN_FINISH_TYPE:\n       case PLUGIN_FINISH_UNIT:\n       case PLUGIN_CXX_CP_PRE_GENERICIZE:\n+      case PLUGIN_ATTRIBUTES:\n       case PLUGIN_FINISH:\n         {\n           struct callback_info *new_callback;\n@@ -534,6 +535,7 @@ invoke_plugin_callbacks (enum plugin_event event, void *gcc_data)\n       case PLUGIN_FINISH_TYPE:\n       case PLUGIN_FINISH_UNIT:\n       case PLUGIN_CXX_CP_PRE_GENERICIZE:\n+      case PLUGIN_ATTRIBUTES:\n       case PLUGIN_FINISH:\n         {\n           /* Iterate over every callback registered with this event and"}, {"sha": "b610b23ed93e2e2f97ea4753c8bf92a3d1b92c2c", "filename": "gcc/plugin.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Fplugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Fplugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.h?ref=d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6", "patch": "@@ -22,6 +22,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"gcc-plugin.h\"\n \n+struct attribute_spec;\n+\n extern void add_new_plugin (const char *);\n extern void parse_plugin_arg_opt (const char *);\n extern void invoke_plugin_callbacks (enum plugin_event, void *);\n@@ -33,4 +35,8 @@ extern void print_plugins_versions (FILE *file, const char *indent);\n extern void print_plugins_help (FILE *file, const char *indent);\n extern void finalize_plugins (void);\n \n+/* In attribs.c.  */\n+\n+extern void register_attribute (const struct attribute_spec *attr);\n+\n #endif /* PLUGIN_H */"}, {"sha": "2775cdb33362061b66fc346e69b6063a51f07f12", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6", "patch": "@@ -1,3 +1,9 @@\n+2009-05-13  Taras Glek  <tglek@mozilla.com>\n+       * g++.dg/plugin/attribute_plugin-test-1.C Testcase input for custom attributes and decl smashing\n+       * g++.dg/plugin/attribute_plugin.c Testcase plugin to test user attributes\n+       * g++.dg/plugin/dumb_plugin.c Fixed typo\n+       * g++.dg/plugin/plugin.exp Added attribute_plugin test \n+\n 2009-05-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/39865"}, {"sha": "abb1328670a8e1534de42253038d07b69f956fe7", "filename": "gcc/testsuite/g++.dg/plugin/attribute_plugin-test-1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin-test-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin-test-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin-test-1.C?ref=d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6", "patch": "@@ -0,0 +1,16 @@\n+// { dg-warning \"Callback to register attributes\" }\n+\n+void normal_func (char c, char c2);\n+void normal_func (char __attribute__((user(\"param\"))) c, char);\n+void normal_func (char c, char __attribute__((user(\"param\"))) c2) \n+{\n+} // { dg-warning \"attribute 'user' on param 'c' of function normal_func\" }\n+// { dg-warning \"attribute 'user' on param 'c2' of function normal_func\" \"\" { target *-*-* } 7 }\n+\n+class Foo {\n+  void method (char __attribute__((user(\"param\"))) c);\n+};\n+\n+void Foo::method(char c) \n+{\n+} // { dg-warning \"attribute 'user' on param 'c' of function method\" }"}, {"sha": "d071762102b4ea8842098087d421e98e94615841", "filename": "gcc/testsuite/g++.dg/plugin/attribute_plugin.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin.c?ref=d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6", "patch": "@@ -0,0 +1,66 @@\n+/* Demonstrates how to add custom attributes */\n+\n+#include <stdlib.h>\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tree.h\"\n+#include \"tree-pass.h\"\n+#include \"intl.h\"\n+#include \"gcc-plugin.h\"\n+\n+/* Attribute handler callback */\n+\n+static tree\n+handle_user_attribute (tree *node, tree name, tree args,\n+\t\t\tint flags, bool *no_add_attrs)\n+{\n+  return NULL_TREE;\n+}\n+\n+/* Attribute definition */\n+\n+static struct attribute_spec user_attr =\n+  { \"user\", 1, 1, false,  false, false, handle_user_attribute };\n+\n+/* Plugin callback called during attribute registration */\n+\n+static void \n+register_attributes (void *event_data, void *data) \n+{\n+  warning (0, G_(\"Callback to register attributes\"));\n+  register_attribute (&user_attr);\n+}\n+\n+/* Callback function to invoke before the function body is genericized.  */ \n+\n+void\n+handle_pre_generic (void *event_data, void *data)\n+{\n+  tree fndecl = (tree) event_data;\n+  tree arg;\n+  for (arg = DECL_ARGUMENTS(fndecl); arg; arg = TREE_CHAIN (arg)) {\n+      tree attr;\n+      for (attr = DECL_ATTRIBUTES (arg); attr; attr = TREE_CHAIN (attr)) {\n+          tree attrname = TREE_PURPOSE (attr);\n+          tree attrargs = TREE_VALUE (attr);\n+          warning (0, G_(\"attribute '%s' on param '%s' of function %s\"),\n+                   IDENTIFIER_POINTER (attrname),\n+                   IDENTIFIER_POINTER (DECL_NAME (arg)),\n+                   IDENTIFIER_POINTER (DECL_NAME (fndecl))\n+                   );\n+      }\n+  }\n+}\n+\n+int\n+plugin_init (const char *plugin_name,\n+             struct plugin_gcc_version *version,\n+             int argc, struct plugin_argument *argv)\n+{\n+  register_callback (plugin_name, PLUGIN_CXX_CP_PRE_GENERICIZE,\n+                     handle_pre_generic, NULL);\n+\n+  register_callback (plugin_name, PLUGIN_ATTRIBUTES, register_attributes, NULL);\n+  return 0;\n+}"}, {"sha": "839dc2b1c8a28d4aed4298ce16afccf0c6aae01e", "filename": "gcc/testsuite/g++.dg/plugin/dumb_plugin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdumb_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdumb_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdumb_plugin.c?ref=d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6", "patch": "@@ -21,7 +21,7 @@ handle_struct (void *event_data, void *data)\n            IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type))));\n }\n \n-/* Callback function to invoke before the program is genericized.  */ \n+/* Callback function to invoke before the function body is genericized.  */ \n \n void\n handle_pre_generic (void *event_data, void *data)"}, {"sha": "eb019986ffe09585e7f90a55da81c907ea99eb8c", "filename": "gcc/testsuite/g++.dg/plugin/plugin.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp?ref=d1c8e08a0c45483b90b09e6cdf12cf8d77876fd6", "patch": "@@ -47,6 +47,7 @@ load_lib plugin-support.exp\n # Specify the plugin source file and the associated test files in a list.\n # plugin_test_list={ {plugin1 test1 test2 ...} {plugin2 test1 ...} ... }\n set plugin_test_list [list \\\n+    { attribute_plugin.c attribute_plugin-test-1.C } \\\n     { selfassign.c self-assign-test-1.C self-assign-test-2.C self-assign-test-3.C } \\\n     { dumb_plugin.c dumb-plugin-test-1.C } ]\n "}]}