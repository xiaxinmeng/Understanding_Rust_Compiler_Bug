{"sha": "4fc473c177ed213d0610e2699f4cab0193b31ce5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZjNDczYzE3N2VkMjEzZDA2MTBlMjY5OWY0Y2FiMDE5M2IzMWNlNQ==", "commit": {"author": {"name": "Timothy Moore", "email": "moore@gnu.org", "date": "1992-09-01T21:27:47Z"}, "committer": {"name": "Timothy Moore", "email": "moore@gnu.org", "date": "1992-09-01T21:27:47Z"}, "message": "(CPP_SPEC, TARGET_SWITCHES): new flags: -mnosnake,\n\n        -mpa-risc-1-0, -mpa-risc-1-1.\n        (ASM_DECLARE_FUNCTION_NAME): Emit argument descriptors for all\n        general registers if current_function_varargs.\n\nFrom-SVN: r2018", "tree": {"sha": "78d71d1a4ac1babf71681f18e982122e8d23e280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78d71d1a4ac1babf71681f18e982122e8d23e280"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fc473c177ed213d0610e2699f4cab0193b31ce5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fc473c177ed213d0610e2699f4cab0193b31ce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fc473c177ed213d0610e2699f4cab0193b31ce5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fc473c177ed213d0610e2699f4cab0193b31ce5/comments", "author": null, "committer": null, "parents": [{"sha": "69b78d8d12b43817cb6f4d1e02e487c3b370ed43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b78d8d12b43817cb6f4d1e02e487c3b370ed43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69b78d8d12b43817cb6f4d1e02e487c3b370ed43"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "a24fd6071851d1f75b795d47e493cad915616b0c", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fc473c177ed213d0610e2699f4cab0193b31ce5/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fc473c177ed213d0610e2699f4cab0193b31ce5/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=4fc473c177ed213d0610e2699f4cab0193b31ce5", "patch": "@@ -32,9 +32,10 @@ enum cmp_type\t\t\t\t/* comparison type */\n #define DEFAULT_GDB_EXTENSIONS 0\n \n #if (TARGET_DEFAULT & 1) == 0\n-#define CPP_SPEC \"%{msnake:-D__hp9000s700 -D_PA_RISC1_1}\"\n+#define CPP_SPEC \"%{msnake:-D__hp9000s700 -D_PA_RISC1_1}\\\n+ %{mpa-risc-1-1:-D__hp9000s700 -D_PA_RISC1_1}\"\n #else\n-#define CPP_SPEC \"-D__hp9000s700 -D_PA_RISC1_1\"\n+#define CPP_SPEC \"%{!mpa-risc-1-0:-D__hp9000s700 -D_PA_RISC1_1}\"\n #endif\n \n /* Defines for a K&R CC */\n@@ -99,6 +100,9 @@ extern int target_flags;\n \n #define TARGET_SWITCHES \\\n   {{\"snake\", 1},\t\\\n+   {\"nosnake\", -1},\t\\\n+   {\"pa-risc-1-0\", -1},\t\\\n+   {\"pa-risc-1-1\", 1},\t\\\n    {\"no-bss\", 2},\t\\\n    { \"\", TARGET_DEFAULT}}\n \n@@ -777,7 +781,7 @@ extern enum cmp_type hppa_branch_type;\n \t tree parm;\t\t\t\t\t\t\t\\\n \t int i;\t\t\t\t\t\t\t\t\\\n \t if (TREE_PUBLIC (DECL))\t\t\t\t\t\\\n-\t   {\t\t\t\t\t\t\t\t\\\n+\t   { extern int current_function_varargs;\t\t\t\\\n \t     fputs (\"\\t.EXPORT \", FILE); assemble_name (FILE, NAME);\t\\\n \t     fputs (\",PRIV_LEV=3\", FILE);\t\t\t\t\\\n \t     for (parm = DECL_ARGUMENTS (DECL), i = 0; parm && i < 4;\t\\\n@@ -813,9 +817,10 @@ extern enum cmp_type hppa_branch_type;\n \t\t   }\t\t\t\t\t\t\t\\\n \t       }\t\t\t\t\t\t\t\\\n \t     /* anonymous args */\t\t\t\t\t\\\n-\t     if (TYPE_ARG_TYPES (tree_type) != 0\t\t\t\\\n-\t\t && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (tree_type)))\\\n-\t\t     != void_type_node))\t\t\t\t\\\n+\t     if ((TYPE_ARG_TYPES (tree_type) != 0\t\t\t\\\n+\t\t  && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (tree_type)))\\\n+\t\t      != void_type_node))\t\t\t\t\\\n+\t\t || current_function_varargs)\t\t\t\t\\\n \t       {\t\t\t\t\t\t\t\\\n \t\t for (; i < 4; i++)\t\t\t\t\t\\\n \t\t   fprintf (FILE, \",ARGW%d=GR\", i);\t\t\t\\\n@@ -1705,3 +1710,5 @@ extern char *output_mod_insn ();\n extern void output_arg_descriptor ();\n extern void output_global_address ();\n extern struct rtx_def *legitimize_pic_address ();\n+extern struct rtx_def *gen_cmp_fp ();\n+extern struct rtx_def *gen_scond_fp ();"}]}