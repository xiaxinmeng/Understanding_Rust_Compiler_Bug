{"sha": "88944e131491d60ede2517c0ea2c9a08f2e2863e", "node_id": "C_kwDOANBUbNoAKDg4OTQ0ZTEzMTQ5MWQ2MGVkZTI1MTdjMGVhMmM5YTA4ZjJlMjg2M2U", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-03T00:16:22Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-03T00:16:22Z"}, "message": "Daily bump.", "tree": {"sha": "72ff42c4d87adf9a5f163c695ab455c4e3872cf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72ff42c4d87adf9a5f163c695ab455c4e3872cf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88944e131491d60ede2517c0ea2c9a08f2e2863e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88944e131491d60ede2517c0ea2c9a08f2e2863e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88944e131491d60ede2517c0ea2c9a08f2e2863e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88944e131491d60ede2517c0ea2c9a08f2e2863e/comments", "author": null, "committer": null, "parents": [{"sha": "fb45d8e692d41d0d5d0fea56791d5dca448009c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb45d8e692d41d0d5d0fea56791d5dca448009c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb45d8e692d41d0d5d0fea56791d5dca448009c5"}], "stats": {"total": 232, "additions": 231, "deletions": 1}, "files": [{"sha": "5c1e50a6fdc57de12e4fc6fa57a07d68d831505d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88944e131491d60ede2517c0ea2c9a08f2e2863e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88944e131491d60ede2517c0ea2c9a08f2e2863e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88944e131491d60ede2517c0ea2c9a08f2e2863e", "patch": "@@ -1,3 +1,103 @@\n+2022-02-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104270\n+\t* doc/invoke.texi (-ftrivial-auto-var-init=): Add reference to\n+\t-Wanalyzer-use-of-uninitialized-value to paragraph documenting that\n+\t-ftrivial-auto-var-init= doesn't suppress warnings.\n+\n+2022-02-02  Martin Liska  <mliska@suse.cz>\n+\n+\t* dwarf2out.cc (TEXT_SECTION_NAME): Remove unused macro.\n+\n+2022-02-02  Bernd Kuhls  <bernd.kuhls@t-online.de>\n+\n+\tPR target/94372\n+\t* config/or1k/linux.h (CPP_SPEC): Define.\n+\n+2022-02-02  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/102819\n+\tPR tree-optimization/103169\n+\t* config/arm/vec-common.md (cml<fcmac1><conj_op><mode>4): Use\n+\tcanonical order.\n+\n+2022-02-02  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/102819\n+\tPR tree-optimization/103169\n+\t* config/aarch64/aarch64-simd.md (cml<fcmac1><conj_op><mode>4): Use\n+\tcanonical order.\n+\t* config/aarch64/aarch64-sve.md (cml<fcmac1><conj_op><mode>4): Likewise.\n+\n+2022-02-02  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/102819\n+\tPR tree-optimization/103169\n+\t* doc/md.texi: Update docs for cfms, cfma.\n+\t* tree-data-ref.h (same_data_refs): Accept optional offset.\n+\t* tree-vect-slp-patterns.cc (is_linear_load_p): Fix issue with repeating\n+\tpatterns.\n+\t(vect_normalize_conj_loc): Remove.\n+\t(is_eq_or_top): Change to take two nodes.\n+\t(enum _conj_status, compatible_complex_nodes_p,\n+\tvect_validate_multiplication): New.\n+\t(class complex_add_pattern, complex_add_pattern::matches,\n+\tcomplex_add_pattern::recognize, class complex_mul_pattern,\n+\tcomplex_mul_pattern::recognize, class complex_fms_pattern,\n+\tcomplex_fms_pattern::recognize, class complex_operations_pattern,\n+\tcomplex_operations_pattern::recognize, addsub_pattern::recognize): Pass\n+\tnew cache.\n+\t(complex_fms_pattern::matches, complex_mul_pattern::matches): Pass new\n+\tcache and use new validation code.\n+\t* tree-vect-slp.cc (vect_match_slp_patterns_2, vect_match_slp_patterns,\n+\tvect_analyze_slp): Pass along cache.\n+\t(compatible_calls_p): Expose.\n+\t* tree-vectorizer.h (compatible_calls_p, slp_node_hash,\n+\tslp_compat_nodes_map_t): New.\n+\t(class vect_pattern): Update signatures include new cache.\n+\n+2022-02-02  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.cc (cris_preferred_reload_class): Reject\n+\t\"eliminated\" registers and small-enough constants unless\n+\treloaded into a class that is a subset of GENERAL_REGS.\n+\t* config/cris/cris.md (attribute \"cpu_variant\"): New.\n+\t(attribute \"enabled\"): Conditionalize on a matching attribute\n+\tcpu_variant, if specified.\n+\t(\"*movsi_internal<setcc><setnz><setnzvc>\"): For moves to and from\n+\tmemory, add cpu-variant-enabled variants for \"r\" alternatives on\n+\tthe far side of the \"x\" alternatives, preferring the \"x\" ones\n+\tonly for variants where MOF is present (in addition to SRP).\n+\n+2022-02-02  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.cc (cris_register_move_cost): Remove special pre-ira\n+\textra cost for ALL_REGS.\n+\n+2022-02-02  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/constraints.md (define_register_constraint \"b\"): Now\n+\tGENERAL_REGS.\n+\t* config/cris/cris.md (CRIS_ACR_REGNUM): Remove.\n+\t* config/cris/cris.h: (reg_class, REG_CLASS_NAMES)\n+\t(REG_CLASS_CONTENTS): Remove ACR_REGS, SPEC_ACR_REGS, GENNONACR_REGS,\n+\tand SPEC_GENNONACR_REGS.\n+\t* config/cris/cris.cc (cris_preferred_reload_class): Don't mention\n+\tACR_REGS and return GENERAL_REGS instead of GENNONACR_REGS.\n+\n+2022-02-02  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.md (\"*movsi_internal<setcc><setnz><setnzvc>\"):\n+\tConditionalize on (sub-)register operands or operand 1 being 0.\n+\n+2022-02-02  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.h (TARGET_DEFAULT): Don't include MASK_MUL_BUG.\n+\t(MUL_BUG_ASM_DEFAULT): New macro.\n+\t(MAYBE_AS_NO_MUL_BUG_ABORT): Define in terms of MUL_BUG_ASM_DEFAULT.\n+\t* doc/invoke.texi (CRIS Options, -mmul-bug-workaround): Adjust\n+\taccordingly.\n+\n 2022-02-01  Eugene Rozenfeld  <erozen@microsoft.com>\n \n \t* opts.cc (common_handle_option): Don't set param_early_inliner_max_iterations"}, {"sha": "7896cd5370e4d478b1c67e310beb9b9653da6275", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88944e131491d60ede2517c0ea2c9a08f2e2863e/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88944e131491d60ede2517c0ea2c9a08f2e2863e/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=88944e131491d60ede2517c0ea2c9a08f2e2863e", "patch": "@@ -1 +1 @@\n-20220202\n+20220203"}, {"sha": "b0bc6035add55e617dde4c0f11d1166cd3d7df9c", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88944e131491d60ede2517c0ea2c9a08f2e2863e/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88944e131491d60ede2517c0ea2c9a08f2e2863e/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=88944e131491d60ede2517c0ea2c9a08f2e2863e", "patch": "@@ -1,3 +1,47 @@\n+2022-02-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model.cc (region_model::on_return): Replace usage of\n+\tcopy_region with get_rvalue/set_value pair.\n+\t(region_model::pop_frame): Likewise.\n+\t(selftest::test_compound_assignment): Likewise.\n+\t* region-model.h (region_model::copy_region): Delete decl.\n+\t* region.cc (region_model::copy_region): Delete.\n+\n+2022-02-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region.cc (region::calc_offset): Consolidate effectively\n+\tidentical cases.\n+\n+2022-02-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.h (class bit_range_region): New forward decl.\n+\t* region-model-manager.cc (region_model_manager::get_bit_range):\n+\tNew.\n+\t(region_model_manager::log_stats): Handle m_bit_range_regions.\n+\t* region-model.cc (region_model::get_lvalue_1): Handle\n+\tBIT_FIELD_REF.\n+\t* region-model.h (region_model_manager::get_bit_range): New decl.\n+\t(region_model_manager::m_bit_range_regions): New field.\n+\t* region.cc (region::get_base_region): Handle RK_BIT_RANGE.\n+\t(region::base_region_p): Likewise.\n+\t(region::calc_offset): Likewise.\n+\t(bit_range_region::dump_to_pp): New.\n+\t(bit_range_region::get_byte_size): New.\n+\t(bit_range_region::get_bit_size): New.\n+\t(bit_range_region::get_byte_size_sval): New.\n+\t(bit_range_region::get_relative_concrete_offset): New.\n+\t* region.h (enum region_kind): Add RK_BIT_RANGE.\n+\t(region::dyn_cast_bit_range_region): New vfunc.\n+\t(class bit_range_region): New.\n+\t(is_a_helper <const bit_range_region *>::test): New.\n+\t(default_hash_traits<bit_range_region::key_t>): New.\n+\n+2022-02-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104270\n+\t* region-model.cc (region_model::on_call_pre): Handle\n+\tIFN_DEFERRED_INIT.\n+\n 2022-01-27  David Malcolm  <dmalcolm@redhat.com>\n \n \t* checker-path.cc (event_kind_to_string): Handle"}, {"sha": "05a09b8974f427e864cfa43c785cc9f41ebf8e9d", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88944e131491d60ede2517c0ea2c9a08f2e2863e/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88944e131491d60ede2517c0ea2c9a08f2e2863e/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=88944e131491d60ede2517c0ea2c9a08f2e2863e", "patch": "@@ -1,3 +1,11 @@\n+2022-02-02  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/104333\n+\t* lto-common.cc (read_cgraph_and_symbols): Move resolution\n+\tchecking for number of files later and report a reasonable\n+\terror message.\n+\t* lto-object.cc (lto_obj_file_open): Make error fatal.\n+\n 2022-01-17  Martin Liska  <mliska@suse.cz>\n \n \t* config-lang.in: Rename .c names to .cc."}, {"sha": "717fbdb0e2ce19d48183cd12973c19bbfe01b7f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88944e131491d60ede2517c0ea2c9a08f2e2863e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88944e131491d60ede2517c0ea2c9a08f2e2863e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88944e131491d60ede2517c0ea2c9a08f2e2863e", "patch": "@@ -1,3 +1,51 @@\n+2022-02-02  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* lib/target-supports.exp (check_effective_target_powerpc_altivec_ok):\n+\tReturn 0 if the target is not Power.  Restructure and add some comments.\n+\n+2022-02-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/torture/ubsan-1.c: Add missing return stmts.\n+\t* gcc.dg/analyzer/uninit-trivial-auto-var-init-pattern.c: Move\n+\tto...\n+\t* gcc.dg/analyzer/torture/uninit-trivial-auto-var-init-pattern.c:\n+\t...here.\n+\t* gcc.dg/analyzer/uninit-trivial-auto-var-init-uninitialized.c:\n+\tMove to...\n+\t* gcc.dg/analyzer/torture/uninit-trivial-auto-var-init-uninitialized.c:\n+\t...here.\n+\t* gcc.dg/analyzer/uninit-trivial-auto-var-init-zero.c: Move to...\n+\t* gcc.dg/analyzer/torture/uninit-trivial-auto-var-init-zero.c: ...here.\n+\n+2022-02-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/torture/uninit-bit-field-ref.c: New test.\n+\n+2022-02-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104270\n+\t* gcc.dg/analyzer/uninit-trivial-auto-var-init-pattern.c: New\n+\ttest.\n+\t* gcc.dg/analyzer/uninit-trivial-auto-var-init-uninitialized.c:\n+\tNew test.\n+\t* gcc.dg/analyzer/uninit-trivial-auto-var-init-zero.c: New test.\n+\n+2022-02-02  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/102819\n+\tPR tree-optimization/103169\n+\t* g++.dg/vect/pr99149.cc: xfail for now.\n+\t* gcc.dg/vect/complex/pr102819-1.c: New test.\n+\t* gcc.dg/vect/complex/pr102819-2.c: New test.\n+\t* gcc.dg/vect/complex/pr102819-3.c: New test.\n+\t* gcc.dg/vect/complex/pr102819-4.c: New test.\n+\t* gcc.dg/vect/complex/pr102819-5.c: New test.\n+\t* gcc.dg/vect/complex/pr102819-6.c: New test.\n+\t* gcc.dg/vect/complex/pr102819-7.c: New test.\n+\t* gcc.dg/vect/complex/pr102819-8.c: New test.\n+\t* gcc.dg/vect/complex/pr102819-9.c: New test.\n+\t* gcc.dg/vect/complex/pr103169.c: New test.\n+\n 2022-02-01  Ilya Leoshkevich  <iii@linux.ibm.com>\n \n \t* gcc.target/s390/nobp-section-type-conflict.c: New test."}, {"sha": "e0c99e0a146eb39e41af4d22f2b891ef01ead12e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88944e131491d60ede2517c0ea2c9a08f2e2863e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88944e131491d60ede2517c0ea2c9a08f2e2863e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=88944e131491d60ede2517c0ea2c9a08f2e2863e", "patch": "@@ -1,3 +1,33 @@\n+2022-02-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++17/fs_dir.cc (fs::recursive_directory_iterator::pop):\n+\tAdd [[maybe_unused]] attribute.\n+\t* src/filesystem/dir.cc (fs::recursive_directory_iterator::pop):\n+\tLikewise.\n+\n+2022-02-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/23_containers/multiset/operators/cmp_c++20.cc: Use\n+\tcustom comparison function for multiset.\n+\t* testsuite/23_containers/set/operators/cmp_c++20.cc: Use custom\n+\tcomparison function for set.\n+\n+2022-02-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/boost_concept_check.h (_OutputIteratorConcept):\n+\tChange member function to data member of function pointer type.\n+\n+2022-02-02  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR libstdc++/101831\n+\t* include/std/array (begin): Declare const member function attribute\n+\tconst.\n+\t(end, rbegin, rend, size, max_size, empty, data): Same.\n+\t* testsuite/23_containers/array/capacity/empty.cc: Add test cases.\n+\t* testsuite/23_containers/array/capacity/max_size.cc: Same.\n+\t* testsuite/23_containers/array/capacity/size.cc: Same.\n+\t* testsuite/23_containers/array/iterators/begin_end.cc: New test.\n+\n 2022-02-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/27_io/filesystem/iterators/error_reporting.cc: Use"}]}