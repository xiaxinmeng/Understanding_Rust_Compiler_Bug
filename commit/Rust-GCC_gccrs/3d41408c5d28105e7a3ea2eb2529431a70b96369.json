{"sha": "3d41408c5d28105e7a3ea2eb2529431a70b96369", "node_id": "C_kwDOANBUbNoAKDNkNDE0MDhjNWQyODEwNWU3YTNlYTJlYjI1Mjk0MzFhNzBiOTYzNjk", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-04-09T22:12:57Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-04-09T22:12:57Z"}, "message": "analyzer: fix folding of regions involving unknown ptrs [PR103892]\n\nPR analyzer/103892 reports a false positive from -Wanalyzer-double-free.\n\nThe root cause is the analyzer failing to properly handle \"unknown\"\nsymbolic regions, and thus confusing two different expressions.\n\nSpecifically, the analyzer eventually hits the complexity limit for\nsymbolic values, and starts using an \"unknown\" svalue for a pointer.\nThe analyzer uses\n  symbolic_region(unknown_svalue([of ptr type]))\ni.e.\n  (*UNKNOWN_PTR)\nin a few places to mean \"we have an lvalue, but we're not going to\nattempt to track what it is anymore\".\n\n\"Unknown\" should probably be renamed to \"unknowable\"; in theory, any\noperation on such an unknown svalue should be also an unknown svalue.\n\nThe issue is that in various places where we create child regions, we\nwere failing to check for the parent region being (*UNKNOWN_PTR), and so\nwere erroneously creating regions based on (*UNKNOWN_PTR), such as\n*(UNKNOWN_PTR + OFFSET).  The state-machine handling was erroneously\nallowing e.g. INITIAL_VALUE (*(UNKNOWN_PTR + OFFSET)) to have state,\nand thus we could record that such a value had had \"free\" called on it,\nand thus eventually false report a double-free when a different\nexpression incorrectly \"simplified\" to the same expression.\n\nThis patch fixes things by checking when creating the various kinds of\nchild region for (*UNKNOWN_PTR) as the parent region, and simply\nreturning another (*UNKNOWN_PTR) for such child regions (using the\nappropriate type).\n\nDoing so fixes the false positive, and also fixes a state explosion on\nthis testcase, as the states at the program points more rapidly reach\na fixed point where everything is unknown.  I checked for other cases\nthat no longer needed -Wno-analyzer-too-complex; the only other one\nseems to be gcc.dg/analyzer/pr96841.c, but that seems to already have\nbecome redundant at some point before this patch.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/103892\n\t* region-model-manager.cc\n\t(region_model_manager::get_unknown_symbolic_region): New,\n\textracted from...\n\t(region_model_manager::get_field_region): ...here.\n\t(region_model_manager::get_element_region): Use it here.\n\t(region_model_manager::get_offset_region): Likewise.\n\t(region_model_manager::get_sized_region): Likewise.\n\t(region_model_manager::get_cast_region): Likewise.\n\t(region_model_manager::get_bit_range): Likewise.\n\t* region-model.h\n\t(region_model_manager::get_unknown_symbolic_region): New decl.\n\t* region.cc (symbolic_region::symbolic_region): Handle sval_ptr\n\thaving NULL type.\n\t(symbolic_region::dump_to_pp): Handle having NULL type.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/103892\n\t* gcc.dg/analyzer/pr103892.c: New test.\n\t* gcc.dg/analyzer/pr96841.c: Drop redundant\n\t-Wno-analyzer-too-complex.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "1b9f55531c36d80333f3556df8f2a71a8221243d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b9f55531c36d80333f3556df8f2a71a8221243d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d41408c5d28105e7a3ea2eb2529431a70b96369", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d41408c5d28105e7a3ea2eb2529431a70b96369", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d41408c5d28105e7a3ea2eb2529431a70b96369", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d41408c5d28105e7a3ea2eb2529431a70b96369/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4943b75e9f06f0b64ed541430bb7fbccf55fc552", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4943b75e9f06f0b64ed541430bb7fbccf55fc552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4943b75e9f06f0b64ed541430bb7fbccf55fc552"}], "stats": {"total": 127, "additions": 117, "deletions": 10}, "files": [{"sha": "4ec275ecd431117ff4233b901e97b41f2d8f56c1", "filename": "gcc/analyzer/region-model-manager.cc", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d41408c5d28105e7a3ea2eb2529431a70b96369/gcc%2Fanalyzer%2Fregion-model-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d41408c5d28105e7a3ea2eb2529431a70b96369/gcc%2Fanalyzer%2Fregion-model-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-manager.cc?ref=3d41408c5d28105e7a3ea2eb2529431a70b96369", "patch": "@@ -1362,6 +1362,19 @@ region_model_manager::get_region_for_global (tree expr)\n   return reg;\n }\n \n+/* Return the region for an unknown access of type REGION_TYPE,\n+   creating it if necessary.\n+   This is a symbolic_region, where the pointer is an unknown_svalue\n+   of type &REGION_TYPE.  */\n+\n+const region *\n+region_model_manager::get_unknown_symbolic_region (tree region_type)\n+{\n+  tree ptr_type = region_type ? build_pointer_type (region_type) : NULL_TREE;\n+  const svalue *unknown_ptr = get_or_create_unknown_svalue (ptr_type);\n+  return get_symbolic_region (unknown_ptr);\n+}\n+\n /* Return the region that describes accessing field FIELD of PARENT,\n    creating it if necessary.  */\n \n@@ -1372,12 +1385,7 @@ region_model_manager::get_field_region (const region *parent, tree field)\n \n   /* (*UNKNOWN_PTR).field is (*UNKNOWN_PTR_OF_&FIELD_TYPE).  */\n   if (parent->symbolic_for_unknown_ptr_p ())\n-    {\n-      tree ptr_to_field_type = build_pointer_type (TREE_TYPE (field));\n-      const svalue *unknown_ptr_to_field\n-\t= get_or_create_unknown_svalue (ptr_to_field_type);\n-      return get_symbolic_region (unknown_ptr_to_field);\n-    }\n+    return get_unknown_symbolic_region (TREE_TYPE (field));\n \n   field_region::key_t key (parent, field);\n   if (field_region *reg = m_field_regions.get (key))\n@@ -1397,6 +1405,10 @@ region_model_manager::get_element_region (const region *parent,\n \t\t\t\t\t  tree element_type,\n \t\t\t\t\t  const svalue *index)\n {\n+  /* (UNKNOWN_PTR[IDX]) is (UNKNOWN_PTR).  */\n+  if (parent->symbolic_for_unknown_ptr_p ())\n+    return get_unknown_symbolic_region (element_type);\n+\n   element_region::key_t key (parent, element_type, index);\n   if (element_region *reg = m_element_regions.get (key))\n     return reg;\n@@ -1416,6 +1428,10 @@ region_model_manager::get_offset_region (const region *parent,\n \t\t\t\t\t tree type,\n \t\t\t\t\t const svalue *byte_offset)\n {\n+  /* (UNKNOWN_PTR + OFFSET) is (UNKNOWN_PTR).  */\n+  if (parent->symbolic_for_unknown_ptr_p ())\n+    return get_unknown_symbolic_region (type);\n+\n   /* If BYTE_OFFSET is zero, return PARENT.  */\n   if (tree cst_offset = byte_offset->maybe_get_constant ())\n     if (zerop (cst_offset))\n@@ -1451,6 +1467,9 @@ region_model_manager::get_sized_region (const region *parent,\n \t\t\t\t\ttree type,\n \t\t\t\t\tconst svalue *byte_size_sval)\n {\n+  if (parent->symbolic_for_unknown_ptr_p ())\n+    return get_unknown_symbolic_region (type);\n+\n   if (byte_size_sval->get_type () != size_type_node)\n     byte_size_sval = get_or_create_cast (size_type_node, byte_size_sval);\n \n@@ -1486,6 +1505,9 @@ region_model_manager::get_cast_region (const region *original_region,\n   if (type == original_region->get_type ())\n     return original_region;\n \n+  if (original_region->symbolic_for_unknown_ptr_p ())\n+    return get_unknown_symbolic_region (type);\n+\n   cast_region::key_t key (original_region, type);\n   if (cast_region *reg = m_cast_regions.get (key))\n     return reg;\n@@ -1558,6 +1580,9 @@ region_model_manager::get_bit_range (const region *parent, tree type,\n {\n   gcc_assert (parent);\n \n+  if (parent->symbolic_for_unknown_ptr_p ())\n+    return get_unknown_symbolic_region (type);\n+\n   bit_range_region::key_t key (parent, type, bits);\n   if (bit_range_region *reg = m_bit_range_regions.get (key))\n     return reg;"}, {"sha": "eff3d4930f9b123a62a9eb4356307803f5ba05a0", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d41408c5d28105e7a3ea2eb2529431a70b96369/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d41408c5d28105e7a3ea2eb2529431a70b96369/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=3d41408c5d28105e7a3ea2eb2529431a70b96369", "patch": "@@ -327,6 +327,8 @@ class region_model_manager\n   const region *get_bit_range (const region *parent, tree type,\n \t\t\t       const bit_range &bits);\n \n+  const region *get_unknown_symbolic_region (tree region_type);\n+\n   const region *\n   get_region_for_unexpected_tree_code (region_model_context *ctxt,\n \t\t\t\t       tree t,"}, {"sha": "1a7949b3f097b86498ce23f9a2ceb5af833fa45d", "filename": "gcc/analyzer/region.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d41408c5d28105e7a3ea2eb2529431a70b96369/gcc%2Fanalyzer%2Fregion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d41408c5d28105e7a3ea2eb2529431a70b96369/gcc%2Fanalyzer%2Fregion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion.cc?ref=3d41408c5d28105e7a3ea2eb2529431a70b96369", "patch": "@@ -1016,7 +1016,9 @@ root_region::dump_to_pp (pretty_printer *pp, bool simple) const\n symbolic_region::symbolic_region (unsigned id, region *parent,\n \t\t\t\t  const svalue *sval_ptr)\n : region (complexity::from_pair (parent, sval_ptr), id, parent,\n-\t  TREE_TYPE (sval_ptr->get_type ())),\n+\t  (sval_ptr->get_type ()\n+\t   ? TREE_TYPE (sval_ptr->get_type ())\n+\t   : NULL_TREE)),\n   m_sval_ptr (sval_ptr)\n {\n }\n@@ -1045,8 +1047,11 @@ symbolic_region::dump_to_pp (pretty_printer *pp, bool simple) const\n     {\n       pp_string (pp, \"symbolic_region(\");\n       get_parent_region ()->dump_to_pp (pp, simple);\n-      pp_string (pp, \", \");\n-      print_quoted_type (pp, get_type ());\n+      if (get_type ())\n+\t{\n+\t  pp_string (pp, \", \");\n+\t  print_quoted_type (pp, get_type ());\n+\t}\n       pp_string (pp, \", \");\n       m_sval_ptr->dump_to_pp (pp, simple);\n       pp_string (pp, \")\");"}, {"sha": "e9775b69ad0bf76d0b5879c624881672f5495e5d", "filename": "gcc/testsuite/gcc.dg/analyzer/pr103892.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d41408c5d28105e7a3ea2eb2529431a70b96369/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103892.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d41408c5d28105e7a3ea2eb2529431a70b96369/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103892.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103892.c?ref=3d41408c5d28105e7a3ea2eb2529431a70b96369", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-additional-options \"-O2\" } */\n+\n+extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));\n+\n+enum pipecmd_tag\n+{\n+ PIPECMD_PROCESS,\n+ PIPECMD_SEQUENCE\n+};\n+\n+struct pipecmd {\n+ enum pipecmd_tag tag;\n+ union {\n+  struct pipecmd_process {\n+   int argc;\n+   int argv_max;\n+   char **argv;\n+  } process;\n+  struct pipecmd_sequence {\n+   int ncommands;\n+   int commands_max;\n+   struct pipecmd **commands;\n+  } sequence;\n+ } u;\n+};\n+\n+static char *argstr_get_word (const char **argstr)\n+{\n+ while (**argstr) {\n+  switch (**argstr) {\n+   case ' ':\n+   case '\\t':\n+    return (void *) 0;\n+  }\n+ }\n+ return (void *) 0;\n+}\n+\n+struct pipecmd *pipecmd_new_argstr (const char *argstr)\n+{\n+ argstr_get_word (&argstr);\n+ return (void *) 0;\n+}\n+\n+void pipecmd_free (struct pipecmd *cmd)\n+{\n+ int i;\n+\n+ if (!cmd)\n+  return;\n+\n+ switch (cmd->tag) {\n+  case PIPECMD_PROCESS: {\n+   struct pipecmd_process *cmdp = &cmd->u.process;\n+\n+   for (i = 0; i < cmdp->argc; ++i)\n+    free (cmdp->argv[i]);\n+   free (cmdp->argv);\n+\n+   break;\n+  }\n+\n+  case PIPECMD_SEQUENCE: {\n+   struct pipecmd_sequence *cmds = &cmd->u.sequence;\n+\n+   for (i = 0; i < cmds->ncommands; ++i)\n+    pipecmd_free (cmds->commands[i]);\n+   free (cmds->commands);\n+\n+   break;\n+  }\n+ }\n+\n+ free (cmd);\n+}"}, {"sha": "14f3f7a86a338686ec660fb9970ecafd2f425097", "filename": "gcc/testsuite/gcc.dg/analyzer/pr96841.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d41408c5d28105e7a3ea2eb2529431a70b96369/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96841.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d41408c5d28105e7a3ea2eb2529431a70b96369/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96841.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96841.c?ref=3d41408c5d28105e7a3ea2eb2529431a70b96369", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-additional-options \"-Wno-analyzer-too-complex -O1 -Wno-builtin-declaration-mismatch\" } */\n+/* { dg-additional-options \"-O1 -Wno-builtin-declaration-mismatch\" } */\n \n int\n l8 (void);"}]}