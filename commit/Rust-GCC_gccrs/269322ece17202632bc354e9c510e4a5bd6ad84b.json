{"sha": "269322ece17202632bc354e9c510e4a5bd6ad84b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY5MzIyZWNlMTcyMDI2MzJiYzM1NGU5YzUxMGU0YTViZDZhZDg0Yg==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-07-29T08:37:44Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-07-29T08:37:44Z"}, "message": "OpenMP: Add 'omp requires' to Fortran (mostly parsing)\n\ngcc/fortran/ChangeLog:\n\n\t* gfortran.h (enum gfc_statement): Add ST_OMP_REQUIRES.\n\t(enum gfc_omp_requires_kind): New.\n\t(enum gfc_omp_atomic_op): Add GFC_OMP_ATOMIC_ACQ_REL.\n\t(struct gfc_namespace): Add omp_requires and omp_target_seen.\n\t(gfc_omp_requires_add_clause,\n\t(gfc_check_omp_requires): New.\n\t* match.h (gfc_match_omp_requires): New.\n\t* module.c (enum ab_attribute, attr_bits): Add omp requires clauses.\n\t(mio_symbol_attribute): Read/write them.\n\t* openmp.c (gfc_check_omp_requires, (gfc_omp_requires_add_clause,\n\tgfc_match_omp_requires): New.\n\t(gfc_match_omp_oacc_atomic): Use requires's default mem-order.\n\t* parse.c (decode_omp_directive): Match requires, set omp_target_seen.\n\t(gfc_ascii_statement): Handle ST_OMP_REQUIRES.\n\t* trans-openmp.c (gfc_trans_omp_atomic): Handle GFC_OMP_ATOMIC_ACQ_REL.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/requires-1.f90: New test.\n\t* gfortran.dg/gomp/requires-2.f90: New test.\n\t* gfortran.dg/gomp/requires-3.f90: New test.\n\t* gfortran.dg/gomp/requires-4.f90: New test.\n\t* gfortran.dg/gomp/requires-5.f90: New test.\n\t* gfortran.dg/gomp/requires-6.f90: New test.\n\t* gfortran.dg/gomp/requires-7.f90: New test.\n\t* gfortran.dg/gomp/requires-8.f90: New test.\n\t* gfortran.dg/gomp/requires-9.f90: New test.", "tree": {"sha": "0f455436d3c7c8d20fa70bb68296c9e9445fb3b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f455436d3c7c8d20fa70bb68296c9e9445fb3b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/269322ece17202632bc354e9c510e4a5bd6ad84b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/269322ece17202632bc354e9c510e4a5bd6ad84b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/269322ece17202632bc354e9c510e4a5bd6ad84b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/269322ece17202632bc354e9c510e4a5bd6ad84b/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c180464b7b0827b3cc07a78e96dfe55352db33f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c180464b7b0827b3cc07a78e96dfe55352db33f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c180464b7b0827b3cc07a78e96dfe55352db33f"}], "stats": {"total": 658, "additions": 648, "deletions": 10}, "files": [{"sha": "20cce5cf39bb75ab057f3f9f8f890ceed1459aff", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=269322ece17202632bc354e9c510e4a5bd6ad84b", "patch": "@@ -263,7 +263,7 @@ enum gfc_statement\n   ST_OMP_TARGET_SIMD, ST_OMP_END_TARGET_SIMD,\n   ST_OMP_TASKLOOP, ST_OMP_END_TASKLOOP,\n   ST_OMP_TASKLOOP_SIMD, ST_OMP_END_TASKLOOP_SIMD, ST_OMP_ORDERED_DEPEND,\n-  ST_PROCEDURE, ST_GENERIC, ST_CRITICAL, ST_END_CRITICAL,\n+  ST_OMP_REQUIRES, ST_PROCEDURE, ST_GENERIC, ST_CRITICAL, ST_END_CRITICAL,\n   ST_GET_FCN_CHARACTERISTICS, ST_LOCK, ST_UNLOCK, ST_EVENT_POST,\n   ST_EVENT_WAIT, ST_FAIL_IMAGE, ST_FORM_TEAM, ST_CHANGE_TEAM,\n   ST_END_TEAM, ST_SYNC_TEAM, ST_NONE\n@@ -1334,6 +1334,24 @@ enum gfc_omp_if_kind\n   OMP_IF_LAST\n };\n \n+enum gfc_omp_requires_kind\n+{\n+  /* Keep in sync with gfc_namespace, esp. with omp_req_mem_order.  */\n+  OMP_REQ_ATOMIC_MEM_ORDER_SEQ_CST = 1,  /* 01 */\n+  OMP_REQ_ATOMIC_MEM_ORDER_ACQ_REL = 2,  /* 10 */\n+  OMP_REQ_ATOMIC_MEM_ORDER_RELAXED = 3,  /* 11 */\n+  OMP_REQ_REVERSE_OFFLOAD = (1 << 2),\n+  OMP_REQ_UNIFIED_ADDRESS = (1 << 3),\n+  OMP_REQ_UNIFIED_SHARED_MEMORY = (1 << 4),\n+  OMP_REQ_DYNAMIC_ALLOCATORS = (1 << 5),\n+  OMP_REQ_TARGET_MASK = (OMP_REQ_REVERSE_OFFLOAD\n+\t\t\t | OMP_REQ_UNIFIED_ADDRESS\n+\t\t\t | OMP_REQ_UNIFIED_SHARED_MEMORY),\n+  OMP_REQ_ATOMIC_MEM_ORDER_MASK = (OMP_REQ_ATOMIC_MEM_ORDER_SEQ_CST\n+\t\t\t\t   | OMP_REQ_ATOMIC_MEM_ORDER_ACQ_REL\n+\t\t\t\t   | OMP_REQ_ATOMIC_MEM_ORDER_RELAXED)\n+};\n+\n typedef struct gfc_omp_clauses\n {\n   struct gfc_expr *if_expr;\n@@ -1915,6 +1933,10 @@ typedef struct gfc_namespace\n \n   /* Set to 1 if there are any calls to procedures with implicit interface.  */\n   unsigned implicit_interface_calls:1;\n+\n+  /* OpenMP requires. */\n+  unsigned omp_requires:6;\n+  unsigned omp_target_seen:1;\n }\n gfc_namespace;\n \n@@ -2645,7 +2667,8 @@ enum gfc_omp_atomic_op\n   GFC_OMP_ATOMIC_CAPTURE = 3,\n   GFC_OMP_ATOMIC_MASK = 3,\n   GFC_OMP_ATOMIC_SEQ_CST = 4,\n-  GFC_OMP_ATOMIC_SWAP = 8\n+  GFC_OMP_ATOMIC_ACQ_REL = 8,\n+  GFC_OMP_ATOMIC_SWAP = 16\n };\n \n typedef struct gfc_code\n@@ -3270,6 +3293,9 @@ gfc_expr *gfc_get_parentheses (gfc_expr *);\n \n /* openmp.c */\n struct gfc_omp_saved_state { void *ptrs[2]; int ints[1]; };\n+bool gfc_omp_requires_add_clause (gfc_omp_requires_kind, const char *,\n+\t\t\t\t  locus *, const char *);\n+void gfc_check_omp_requires (gfc_namespace *, int);\n void gfc_free_omp_clauses (gfc_omp_clauses *);\n void gfc_free_oacc_declare_clauses (struct gfc_oacc_declare *);\n void gfc_free_omp_declare_simd (gfc_omp_declare_simd *);"}, {"sha": "7bf70d77016e672c45d131129a87f9648c71ad43", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=269322ece17202632bc354e9c510e4a5bd6ad84b", "patch": "@@ -177,6 +177,7 @@ match gfc_match_omp_parallel_do (void);\n match gfc_match_omp_parallel_do_simd (void);\n match gfc_match_omp_parallel_sections (void);\n match gfc_match_omp_parallel_workshare (void);\n+match gfc_match_omp_requires (void);\n match gfc_match_omp_sections (void);\n match gfc_match_omp_simd (void);\n match gfc_match_omp_single (void);"}, {"sha": "384d0aeac02cc5ec89da4b2358566494231ce1ab", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 71, "deletions": 2, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=269322ece17202632bc354e9c510e4a5bd6ad84b", "patch": "@@ -2047,7 +2047,11 @@ enum ab_attribute\n   AB_OMP_DECLARE_TARGET_LINK, AB_PDT_KIND, AB_PDT_LEN, AB_PDT_TYPE,\n   AB_PDT_TEMPLATE, AB_PDT_ARRAY, AB_PDT_STRING,\n   AB_OACC_ROUTINE_LOP_GANG, AB_OACC_ROUTINE_LOP_WORKER,\n-  AB_OACC_ROUTINE_LOP_VECTOR, AB_OACC_ROUTINE_LOP_SEQ\n+  AB_OACC_ROUTINE_LOP_VECTOR, AB_OACC_ROUTINE_LOP_SEQ,\n+  AB_OMP_REQ_REVERSE_OFFLOAD, AB_OMP_REQ_UNIFIED_ADDRESS,\n+  AB_OMP_REQ_UNIFIED_SHARED_MEMORY, AB_OMP_REQ_DYNAMIC_ALLOCATORS,\n+  AB_OMP_REQ_MEM_ORDER_SEQ_CST, AB_OMP_REQ_MEM_ORDER_ACQ_REL,\n+  AB_OMP_REQ_MEM_ORDER_RELAXED\n };\n \n static const mstring attr_bits[] =\n@@ -2121,6 +2125,13 @@ static const mstring attr_bits[] =\n     minit (\"OACC_ROUTINE_LOP_WORKER\", AB_OACC_ROUTINE_LOP_WORKER),\n     minit (\"OACC_ROUTINE_LOP_VECTOR\", AB_OACC_ROUTINE_LOP_VECTOR),\n     minit (\"OACC_ROUTINE_LOP_SEQ\", AB_OACC_ROUTINE_LOP_SEQ),\n+    minit (\"OMP_REQ_REVERSE_OFFLOAD\", AB_OMP_REQ_REVERSE_OFFLOAD),\n+    minit (\"OMP_REQ_UNIFIED_ADDRESS\", AB_OMP_REQ_UNIFIED_ADDRESS),\n+    minit (\"OMP_REQ_UNIFIED_SHARED_MEMORY\", AB_OMP_REQ_UNIFIED_SHARED_MEMORY),\n+    minit (\"OMP_REQ_DYNAMIC_ALLOCATORS\", AB_OMP_REQ_DYNAMIC_ALLOCATORS),\n+    minit (\"OMP_REQ_MEM_ORDER_SEQ_CST\", AB_OMP_REQ_MEM_ORDER_SEQ_CST),\n+    minit (\"OMP_REQ_MEM_ORDER_ACQ_REL\", AB_OMP_REQ_MEM_ORDER_ACQ_REL),\n+    minit (\"OMP_REQ_MEM_ORDER_RELAXED\", AB_OMP_REQ_MEM_ORDER_RELAXED),\n     minit (NULL, -1)\n };\n \n@@ -2366,8 +2377,27 @@ mio_symbol_attribute (symbol_attribute *attr)\n \t  gcc_unreachable ();\n \t}\n \n+      if (attr->flavor == FL_MODULE && gfc_current_ns->omp_requires)\n+\t{\n+\t  if (gfc_current_ns->omp_requires & OMP_REQ_REVERSE_OFFLOAD)\n+\t    MIO_NAME (ab_attribute) (AB_OMP_REQ_REVERSE_OFFLOAD, attr_bits);\n+\t  if (gfc_current_ns->omp_requires & OMP_REQ_UNIFIED_ADDRESS)\n+\t    MIO_NAME (ab_attribute) (AB_OMP_REQ_UNIFIED_ADDRESS, attr_bits);\n+\t  if (gfc_current_ns->omp_requires & OMP_REQ_UNIFIED_SHARED_MEMORY)\n+\t    MIO_NAME (ab_attribute) (AB_OMP_REQ_UNIFIED_SHARED_MEMORY, attr_bits);\n+\t  if (gfc_current_ns->omp_requires & OMP_REQ_DYNAMIC_ALLOCATORS)\n+\t    MIO_NAME (ab_attribute) (AB_OMP_REQ_DYNAMIC_ALLOCATORS, attr_bits);\n+\t  if ((gfc_current_ns->omp_requires & OMP_REQ_ATOMIC_MEM_ORDER_MASK)\n+\t      == OMP_REQ_ATOMIC_MEM_ORDER_SEQ_CST)\n+\t    MIO_NAME (ab_attribute) (AB_OMP_REQ_MEM_ORDER_SEQ_CST, attr_bits);\n+\t  if ((gfc_current_ns->omp_requires & OMP_REQ_ATOMIC_MEM_ORDER_MASK)\n+\t      == OMP_REQ_ATOMIC_MEM_ORDER_ACQ_REL)\n+\t    MIO_NAME (ab_attribute) (AB_OMP_REQ_MEM_ORDER_ACQ_REL, attr_bits);\n+\t  if ((gfc_current_ns->omp_requires & OMP_REQ_ATOMIC_MEM_ORDER_MASK)\n+\t      == OMP_REQ_ATOMIC_MEM_ORDER_RELAXED)\n+\t    MIO_NAME (ab_attribute) (AB_OMP_REQ_MEM_ORDER_RELAXED, attr_bits);\n+\t}\n       mio_rparen ();\n-\n     }\n   else\n     {\n@@ -2592,6 +2622,45 @@ mio_symbol_attribute (symbol_attribute *attr)\n \t      verify_OACC_ROUTINE_LOP_NONE (attr->oacc_routine_lop);\n \t      attr->oacc_routine_lop = OACC_ROUTINE_LOP_SEQ;\n \t      break;\n+\t    case AB_OMP_REQ_REVERSE_OFFLOAD:\n+\t       gfc_omp_requires_add_clause (OMP_REQ_REVERSE_OFFLOAD,\n+\t\t\t\t\t    \"reverse_offload\",\n+\t\t\t\t\t    &gfc_current_locus,\n+\t\t\t\t\t    module_name);\n+\t      break;\n+\t    case AB_OMP_REQ_UNIFIED_ADDRESS:\n+\t      gfc_omp_requires_add_clause (OMP_REQ_UNIFIED_ADDRESS,\n+\t\t\t\t\t   \"unified_address\",\n+\t\t\t\t\t   &gfc_current_locus,\n+\t\t\t\t\t   module_name);\n+\t      break;\n+\t    case AB_OMP_REQ_UNIFIED_SHARED_MEMORY:\n+\t      gfc_omp_requires_add_clause (OMP_REQ_UNIFIED_SHARED_MEMORY,\n+\t\t\t\t\t   \"unified_shared_memory\",\n+\t\t\t\t\t   &gfc_current_locus,\n+\t\t\t\t\t   module_name);\n+\t      break;\n+\t    case AB_OMP_REQ_DYNAMIC_ALLOCATORS:\n+\t      gfc_omp_requires_add_clause (OMP_REQ_DYNAMIC_ALLOCATORS,\n+\t\t\t\t\t   \"dynamic_allocators\",\n+\t\t\t\t\t   &gfc_current_locus,\n+\t\t\t\t\t   module_name);\n+\t      break;\n+\t    case AB_OMP_REQ_MEM_ORDER_SEQ_CST:\n+\t      gfc_omp_requires_add_clause (OMP_REQ_ATOMIC_MEM_ORDER_SEQ_CST,\n+\t\t\t\t\t   \"seq_cst\", &gfc_current_locus,\n+\t\t\t\t\t   module_name);\n+\t      break;\n+\t    case AB_OMP_REQ_MEM_ORDER_ACQ_REL:\n+\t      gfc_omp_requires_add_clause (OMP_REQ_ATOMIC_MEM_ORDER_ACQ_REL,\n+\t\t\t\t\t   \"acq_rel\", &gfc_current_locus,\n+\t\t\t\t\t   module_name);\n+\t      break;\n+\t    case AB_OMP_REQ_MEM_ORDER_RELAXED:\n+\t      gfc_omp_requires_add_clause (OMP_REQ_ATOMIC_MEM_ORDER_RELAXED,\n+\t\t\t\t\t   \"relaxed\", &gfc_current_locus,\n+\t\t\t\t\t   module_name);\n+\t      break;\n \t    }\n \t}\n     }"}, {"sha": "0fd998839b221e5ed408dc3a65ef59748c8a56a5", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 244, "deletions": 0, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=269322ece17202632bc354e9c510e4a5bd6ad84b", "patch": "@@ -3424,6 +3424,230 @@ gfc_match_omp_parallel_workshare (void)\n   return match_omp (EXEC_OMP_PARALLEL_WORKSHARE, OMP_PARALLEL_CLAUSES);\n }\n \n+void\n+gfc_check_omp_requires (gfc_namespace *ns, int ref_omp_requires)\n+{\n+  if (ns->omp_target_seen\n+      && (ns->omp_requires & OMP_REQ_TARGET_MASK)\n+\t != (ref_omp_requires & OMP_REQ_TARGET_MASK))\n+    {\n+      gcc_assert (ns->proc_name);\n+      if ((ref_omp_requires & OMP_REQ_REVERSE_OFFLOAD)\n+\t  && !(ns->omp_requires & OMP_REQ_REVERSE_OFFLOAD))\n+\tgfc_error (\"Program unit at %L has OpenMP device constructs/routines \"\n+\t\t   \"but does not set !$OMP REQUIRES REVERSE_OFFSET but other \"\n+\t\t   \"program units do\", &ns->proc_name->declared_at);\n+      if ((ref_omp_requires & OMP_REQ_UNIFIED_ADDRESS)\n+\t  && !(ns->omp_requires & OMP_REQ_UNIFIED_ADDRESS))\n+\tgfc_error (\"Program unit at %L has OpenMP device constructs/routines \"\n+\t\t   \"but does not set !$OMP REQUIRES UNIFIED_ADDRESS but other \"\n+\t\t   \"program units do\", &ns->proc_name->declared_at);\n+      if ((ref_omp_requires & OMP_REQ_UNIFIED_SHARED_MEMORY)\n+\t  && !(ns->omp_requires & OMP_REQ_UNIFIED_SHARED_MEMORY))\n+\tgfc_error (\"Program unit at %L has OpenMP device constructs/routines \"\n+\t\t   \"but does not set !$OMP REQUIRES UNIFIED_SHARED_MEMORY but \"\n+\t\t   \"other program units do\", &ns->proc_name->declared_at);\n+    }\n+}\n+\n+bool\n+gfc_omp_requires_add_clause (gfc_omp_requires_kind clause,\n+\t\t\t     const char *clause_name, locus *loc,\n+\t\t\t     const char *module_name)\n+{\n+  gfc_namespace *prog_unit = gfc_current_ns;\n+  while (prog_unit->parent)\n+    {\n+      if (gfc_state_stack->previous\n+\t  && gfc_state_stack->previous->state == COMP_INTERFACE)\n+\tbreak;\n+      prog_unit = prog_unit->parent;\n+    }\n+\n+  /* Requires added after use.  */\n+  if (prog_unit->omp_target_seen\n+      && (clause & OMP_REQ_TARGET_MASK)\n+      && !(prog_unit->omp_requires & clause))\n+    {\n+      if (module_name)\n+\tgfc_error (\"!$OMP REQUIRES clause %qs specified via module %qs use \"\n+\t\t   \"at %L comes after using a device construct/routine\",\n+\t\t   clause_name, module_name, loc);\n+      else\n+\tgfc_error (\"!$OMP REQUIRES clause %qs specified at %L comes after \"\n+\t\t   \"using a device construct/routine\", clause_name, loc);\n+      return false;\n+    }\n+\n+  /* Overriding atomic_default_mem_order clause value.  */\n+  if ((clause & OMP_REQ_ATOMIC_MEM_ORDER_MASK)\n+      && (prog_unit->omp_requires & OMP_REQ_ATOMIC_MEM_ORDER_MASK)\n+      && (prog_unit->omp_requires & OMP_REQ_ATOMIC_MEM_ORDER_MASK)\n+\t != (int) clause)\n+    {\n+      const char *other;\n+      if (prog_unit->omp_requires & OMP_REQ_ATOMIC_MEM_ORDER_SEQ_CST)\n+\tother = \"seq_cst\";\n+      else if (prog_unit->omp_requires & OMP_REQ_ATOMIC_MEM_ORDER_ACQ_REL)\n+\tother = \"acq_rel\";\n+      else if (prog_unit->omp_requires & OMP_REQ_ATOMIC_MEM_ORDER_RELAXED)\n+\tother = \"relaxed\";\n+      else\n+\tgcc_unreachable ();\n+\n+      if (module_name)\n+\tgfc_error (\"!$OMP REQUIRES clause %<atomic_default_mem_order(%s)%> \"\n+\t\t   \"specified via module %qs use at %L overrides a previous \"\n+\t\t   \"%<atomic_default_mem_order(%s)%> (which might be through \"\n+\t\t   \"using a module)\", clause_name, module_name, loc, other);\n+      else\n+\tgfc_error (\"!$OMP REQUIRES clause %<atomic_default_mem_order(%s)%> \"\n+\t\t   \"specified at %L overrides a previous \"\n+\t\t   \"%<atomic_default_mem_order(%s)%> (which might be through \"\n+\t\t   \"using a module)\", clause_name, loc, other);\n+      return false;\n+    }\n+\n+  /* Requires via module not at program-unit level and not repeating clause.  */\n+  if (prog_unit != gfc_current_ns && !(prog_unit->omp_requires & clause))\n+    {\n+      if (clause & OMP_REQ_ATOMIC_MEM_ORDER_MASK)\n+\tgfc_error (\"!$OMP REQUIRES clause %<atomic_default_mem_order(%s)%> \"\n+\t\t   \"specified via module %qs use at %L but same clause is \"\n+\t\t   \"not set at for the program unit\", clause_name, module_name,\n+\t\t   loc);\n+      else\n+\tgfc_error (\"!$OMP REQUIRES clause %qs specified via module %qs use at \"\n+\t\t   \"%L but same clause is not set at for the program unit\",\n+\t\t   clause_name, module_name, loc);\n+      return false;\n+    }\n+\n+  if (!gfc_state_stack->previous\n+      || gfc_state_stack->previous->state != COMP_INTERFACE)\n+    prog_unit->omp_requires |= clause;\n+  return true;\n+}\n+\n+match\n+gfc_match_omp_requires (void)\n+{\n+  static const char *clauses[] = {\"reverse_offload\",\n+\t\t\t\t  \"unified_address\",\n+\t\t\t\t  \"unified_shared_memory\",\n+\t\t\t\t  \"dynamic_allocators\",\n+\t\t\t\t  \"atomic_default\"};\n+  const char *clause = NULL;\n+  int requires_clauses = 0;\n+  bool first = true;\n+  locus old_loc;\n+\n+  if (gfc_current_ns->parent\n+      && (!gfc_state_stack->previous\n+\t  || gfc_state_stack->previous->state != COMP_INTERFACE))\n+    {\n+      gfc_error (\"!$OMP REQUIRES at %C must appear in the specification part \"\n+\t\t \"of a program unit\");\n+      return MATCH_ERROR;\n+    }\n+\n+  while (true)\n+    {\n+      old_loc = gfc_current_locus;\n+      gfc_omp_requires_kind requires_clause;\n+      if ((first || gfc_match_char (',') != MATCH_YES)\n+\t  && (first && gfc_match_space () != MATCH_YES))\n+\tgoto error;\n+      first = false;\n+      gfc_gobble_whitespace ();\n+      old_loc = gfc_current_locus;\n+\n+      if (gfc_match_omp_eos () != MATCH_NO)\n+\tbreak;\n+      if (gfc_match (clauses[0]) == MATCH_YES)\n+\t{\n+\t  clause = clauses[0];\n+\t  requires_clause = OMP_REQ_REVERSE_OFFLOAD;\n+\t  if (requires_clauses & OMP_REQ_REVERSE_OFFLOAD)\n+\t    goto duplicate_clause;\n+\t}\n+      else if (gfc_match (clauses[1]) == MATCH_YES)\n+\t{\n+\t  clause = clauses[1];\n+\t  requires_clause = OMP_REQ_UNIFIED_ADDRESS;\n+\t  if (requires_clauses & OMP_REQ_UNIFIED_ADDRESS)\n+\t    goto duplicate_clause;\n+\t}\n+      else if (gfc_match (clauses[2]) == MATCH_YES)\n+\t{\n+\t  clause = clauses[2];\n+\t  requires_clause = OMP_REQ_UNIFIED_SHARED_MEMORY;\n+\t  if (requires_clauses & OMP_REQ_UNIFIED_SHARED_MEMORY)\n+\t    goto duplicate_clause;\n+\t}\n+      else if (gfc_match (clauses[3]) == MATCH_YES)\n+\t{\n+\t  clause = clauses[3];\n+\t  requires_clause = OMP_REQ_DYNAMIC_ALLOCATORS;\n+\t  if (requires_clauses & OMP_REQ_DYNAMIC_ALLOCATORS)\n+\t    goto duplicate_clause;\n+\t}\n+      else if (gfc_match (\"atomic_default_mem_order (\") == MATCH_YES)\n+\t{\n+\t  clause = clauses[4];\n+\t  if (requires_clauses & OMP_REQ_ATOMIC_MEM_ORDER_MASK)\n+\t    goto duplicate_clause;\n+\t  if (gfc_match (\" seq_cst )\") == MATCH_YES)\n+\t    {\n+\t      clause = \"seq_cst\";\n+\t      requires_clause = OMP_REQ_ATOMIC_MEM_ORDER_SEQ_CST;\n+\t    }\n+\t  else if (gfc_match (\" acq_rel )\") == MATCH_YES)\n+\t    {\n+\t      clause = \"acq_rel\";\n+\t      requires_clause = OMP_REQ_ATOMIC_MEM_ORDER_ACQ_REL;\n+\t    }\n+\t  else if (gfc_match (\" relaxed )\") == MATCH_YES)\n+\t    {\n+\t      clause = \"relaxed\";\n+\t      requires_clause = OMP_REQ_ATOMIC_MEM_ORDER_RELAXED;\n+\t    }\n+\t  else\n+\t    {\n+\t      gfc_error (\"Expected SEQ_CST, ACQ_REL or RELAXED for \"\n+\t\t\t \"ATOMIC_DEFAULT_MEM_ORDER clause at %C\");\n+\t      goto error;\n+\t    }\n+\t}\n+      else\n+\tgoto error;\n+\n+      if (requires_clause & ~OMP_REQ_ATOMIC_MEM_ORDER_MASK)\n+\tgfc_error_now (\"Sorry, %qs clause at %L on REQUIRES directive is not \"\n+\t\t       \"yet supported\", clause, &old_loc);\n+      if (!gfc_omp_requires_add_clause (requires_clause, clause, &old_loc, NULL))\n+\tgoto error;\n+      requires_clauses |= requires_clause;\n+    }\n+\n+  if (requires_clauses == 0)\n+    {\n+      if (!gfc_error_flag_test ())\n+\tgfc_error (\"Clause expected at %C\");\n+      goto error;\n+    }\n+  return MATCH_YES;\n+\n+duplicate_clause:\n+  gfc_error (\"%qs clause at %L specified more than once\", clause, &old_loc);\n+error:\n+  if (!gfc_error_flag_test ())\n+    gfc_error (\"Expected UNIFIED_ADDRESS, UNIFIED_SHARED_MEMORY, \"\n+\t       \"DYNAMIC_ALLOCATORS, REVERSE_OFFLOAD, or \"\n+\t       \"ATOMIC_DEFAULT_MEM_ORDER clause at %L\", &old_loc);\n+  return MATCH_ERROR;\n+}\n+\n \n match\n gfc_match_omp_sections (void)\n@@ -3745,6 +3969,26 @@ gfc_match_omp_oacc_atomic (bool omp_p)\n   new_st.op = (omp_p ? EXEC_OMP_ATOMIC : EXEC_OACC_ATOMIC);\n   if (seq_cst)\n     op = (gfc_omp_atomic_op) (op | GFC_OMP_ATOMIC_SEQ_CST);\n+  else if (omp_p)\n+    {\n+      gfc_namespace *prog_unit = gfc_current_ns;\n+      while (prog_unit->parent)\n+\tprog_unit = prog_unit->parent;\n+      switch (prog_unit->omp_requires & OMP_REQ_ATOMIC_MEM_ORDER_MASK)\n+\t{\n+\tcase 0:\n+\tcase OMP_REQ_ATOMIC_MEM_ORDER_RELAXED:\n+\t  break;\n+\tcase OMP_REQ_ATOMIC_MEM_ORDER_SEQ_CST:\n+\t  op = (gfc_omp_atomic_op) (op | GFC_OMP_ATOMIC_SEQ_CST);\n+\t  break;\n+\tcase OMP_REQ_ATOMIC_MEM_ORDER_ACQ_REL:\n+\t  op = (gfc_omp_atomic_op) (op | GFC_OMP_ATOMIC_ACQ_REL);\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+    }\n   new_st.ext.omp_atomic = op;\n   return MATCH_YES;\n }"}, {"sha": "66696215c98a79d76bde443478c4ea8ecba07b92", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 50, "deletions": 3, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=269322ece17202632bc354e9c510e4a5bd6ad84b", "patch": "@@ -995,6 +995,9 @@ decode_omp_directive (void)\n \t      ST_OMP_PARALLEL_WORKSHARE);\n       matcho (\"parallel\", gfc_match_omp_parallel, ST_OMP_PARALLEL);\n       break;\n+    case 'r':\n+      matcho (\"requires\", gfc_match_omp_requires, ST_OMP_REQUIRES);\n+      break;\n     case 's':\n       matcho (\"sections\", gfc_match_omp_sections, ST_OMP_SECTIONS);\n       matcho (\"section\", gfc_match_omp_eos_error, ST_OMP_SECTION);\n@@ -1086,6 +1089,38 @@ decode_omp_directive (void)\n \t  return ST_NONE;\n \t}\n     }\n+  switch (ret)\n+    {\n+    case ST_OMP_DECLARE_TARGET:\n+    case ST_OMP_TARGET:\n+    case ST_OMP_TARGET_DATA:\n+    case ST_OMP_TARGET_ENTER_DATA:\n+    case ST_OMP_TARGET_EXIT_DATA:\n+    case ST_OMP_TARGET_TEAMS:\n+    case ST_OMP_TARGET_TEAMS_DISTRIBUTE:\n+    case ST_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:\n+    case ST_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO:\n+    case ST_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n+    case ST_OMP_TARGET_PARALLEL:\n+    case ST_OMP_TARGET_PARALLEL_DO:\n+    case ST_OMP_TARGET_PARALLEL_DO_SIMD:\n+    case ST_OMP_TARGET_SIMD:\n+    case ST_OMP_TARGET_UPDATE:\n+      {\n+\tgfc_namespace *prog_unit = gfc_current_ns;\n+\twhile (prog_unit->parent)\n+\t  {\n+\t    if (gfc_state_stack->previous\n+\t\t&& gfc_state_stack->previous->state == COMP_INTERFACE)\n+\t      break;\n+\t    prog_unit = prog_unit->parent;\n+\t  }\n+\t  prog_unit->omp_target_seen = true;\n+\tbreak;\n+      }\n+    default:\n+      break;\n+    }\n   return ret;\n \n  do_spec_only:\n@@ -1604,7 +1639,8 @@ next_statement (void)\n /* OpenMP declaration statements.  */\n \n #define case_omp_decl case ST_OMP_THREADPRIVATE: case ST_OMP_DECLARE_SIMD: \\\n-  case ST_OMP_DECLARE_TARGET: case ST_OMP_DECLARE_REDUCTION\n+  case ST_OMP_DECLARE_TARGET: case ST_OMP_DECLARE_REDUCTION: \\\n+  case ST_OMP_REQUIRES\n \n /* Block end statements.  Errors associated with interchanging these\n    are detected in gfc_match_end().  */\n@@ -2407,6 +2443,9 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_PARALLEL_WORKSHARE:\n       p = \"!$OMP PARALLEL WORKSHARE\";\n       break;\n+    case ST_OMP_REQUIRES:\n+      p = \"!$OMP REQUIRES\";\n+      break;\n     case ST_OMP_SECTIONS:\n       p = \"!$OMP SECTIONS\";\n       break;\n@@ -6516,10 +6555,18 @@ gfc_parse_file (void)\n     }\n   while (changed);\n \n-  /* Fixup for external procedures.  */\n+  /* Fixup for external procedures and resolve 'omp requires'.  */\n+  int omp_requires;\n+  omp_requires = 0;\n+  for (gfc_current_ns = gfc_global_ns_list; gfc_current_ns;\n+       gfc_current_ns = gfc_current_ns->sibling)\n+    {\n+      omp_requires |= gfc_current_ns->omp_requires;\n+      gfc_check_externals (gfc_current_ns);\n+    }\n   for (gfc_current_ns = gfc_global_ns_list; gfc_current_ns;\n        gfc_current_ns = gfc_current_ns->sibling)\n-    gfc_check_externals (gfc_current_ns);\n+    gfc_check_omp_requires (gfc_current_ns, omp_requires);\n \n   /* Do the parse tree dump.  */\n   gfc_current_ns = flag_dump_fortran_original ? gfc_global_ns_list : NULL;"}, {"sha": "f6a39edf121f66bc1966c78fa5a879f8062cf420", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=269322ece17202632bc354e9c510e4a5bd6ad84b", "patch": "@@ -3932,9 +3932,13 @@ gfc_trans_omp_atomic (gfc_code *code)\n   enum tree_code op = ERROR_MARK;\n   enum tree_code aop = OMP_ATOMIC;\n   bool var_on_left = false;\n-  enum omp_memory_order mo\n-    = ((atomic_code->ext.omp_atomic & GFC_OMP_ATOMIC_SEQ_CST)\n-       ? OMP_MEMORY_ORDER_SEQ_CST : OMP_MEMORY_ORDER_RELAXED);\n+  enum omp_memory_order mo;\n+  if (atomic_code->ext.omp_atomic & GFC_OMP_ATOMIC_SEQ_CST)\n+    mo = OMP_MEMORY_ORDER_SEQ_CST;\n+  else if (atomic_code->ext.omp_atomic & GFC_OMP_ATOMIC_ACQ_REL)\n+    mo = OMP_MEMORY_ORDER_ACQ_REL;\n+  else\n+    mo = OMP_MEMORY_ORDER_RELAXED;\n \n   code = code->block->next;\n   gcc_assert (code->op == EXEC_ASSIGN);"}, {"sha": "b115a654e71128a2d563ab8dbe43645d06602c4d", "filename": "gcc/testsuite/gfortran.dg/gomp/requires-1.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-1.f90?ref=269322ece17202632bc354e9c510e4a5bd6ad84b", "patch": "@@ -0,0 +1,13 @@\n+subroutine foo\n+!$omp requires unified_address\n+!$omp requires unified_shared_memory\n+!$omp requires unified_shared_memory unified_address\n+!$omp requires dynamic_allocators,reverse_offload\n+end\n+\n+subroutine bar\n+!$omp requires unified_shared_memory unified_address\n+!$omp requires atomic_default_mem_order(seq_cst)\n+end\n+\n+! { dg-prune-output \"not yet supported\" }"}, {"sha": "7b63d4a8b3bdb990b5fcb147b58c8a09a70d1d93", "filename": "gcc/testsuite/gfortran.dg/gomp/requires-2.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-2.f90?ref=269322ece17202632bc354e9c510e4a5bd6ad84b", "patch": "@@ -0,0 +1,14 @@\n+!$omp requires\t! { dg-error \"Clause expected\" }\n+!$omp requires unified_shared_memory,unified_shared_memory\t! { dg-error \"specified more than once\" }\n+!$omp requires unified_address\tunified_address\t! { dg-error \"specified more than once\" }\n+!$omp requires reverse_offload reverse_offload\t! { dg-error \"specified more than once\" }\n+!$omp requires foobarbaz\t! { dg-error \"Expected UNIFIED_ADDRESS, UNIFIED_SHARED_MEMORY, DYNAMIC_ALLOCATORS, REVERSE_OFFLOAD, or ATOMIC_DEFAULT_MEM_ORDER clause\" }\n+!$omp requires dynamic_allocators , dynamic_allocators\t! { dg-error \"specified more than once\" }\n+!$omp requires atomic_default_mem_order(seq_cst) atomic_default_mem_order(seq_cst)\t! { dg-error \"specified more than once\" }\n+!$omp requires atomic_default_mem_order (seq_cst)\n+!$omp requires atomic_default_mem_order (seq_cst)\n+!$omp requires atomic_default_mem_order (acq_rel) ! { dg-error \"overrides a previous 'atomic_default_mem_order\\\\(seq_cst\\\\)'\" }\n+!$omp requires atomic_default_mem_order (foo) ! { dg-error \"Expected SEQ_CST, ACQ_REL or RELAXED for ATOMIC_DEFAULT_MEM_ORDER clause\" }\n+end\n+\n+! { dg-prune-output \"not yet supported\" }"}, {"sha": "4429aab2ee62c619dab12c85ff76122a059d4a2d", "filename": "gcc/testsuite/gfortran.dg/gomp/requires-3.f90", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-3.f90?ref=269322ece17202632bc354e9c510e4a5bd6ad84b", "patch": "@@ -0,0 +1,4 @@\n+!$omp requires atomic_default_mem_order(acquire)\t! { dg-error \"Expected SEQ_CST, ACQ_REL or RELAXED for ATOMIC_DEFAULT_MEM_ORDER clause\" }\n+!$omp requires atomic_default_mem_order(release)\t! { dg-error \"Expected SEQ_CST, ACQ_REL or RELAXED for ATOMIC_DEFAULT_MEM_ORDER clause\" }\n+!$omp requires atomic_default_mem_order(foobar)\t! { dg-error \"Expected SEQ_CST, ACQ_REL or RELAXED for ATOMIC_DEFAULT_MEM_ORDER clause\" }\n+end"}, {"sha": "e0eb4dbc603df1eef6f10ef3c23838e2d216f562", "filename": "gcc/testsuite/gfortran.dg/gomp/requires-4.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-4.f90?ref=269322ece17202632bc354e9c510e4a5bd6ad84b", "patch": "@@ -0,0 +1,36 @@\n+subroutine bar\n+!$omp requires unified_shared_memory,unified_address,reverse_offload\n+end\n+\n+module m\n+!$omp requires unified_shared_memory,unified_address,reverse_offload\n+end module m\n+\n+subroutine foo\n+  !$omp target\n+  !$omp end target\n+! { dg-error \"OpenMP device constructs/routines but does not set !.OMP REQUIRES REVERSE_OFFSET but other program units do\" \"\" { target *-*-* } 9 }\n+! { dg-error \"OpenMP device constructs/routines but does not set !.OMP REQUIRES UNIFIED_ADDRESS but other program units do\" \"\" { target *-*-* } 9 }\n+! { dg-error \"OpenMP device constructs/routines but does not set !.OMP REQUIRES UNIFIED_SHARED_MEMORY but other program units do\" \"\" { target *-*-* } 9 }\n+end\n+\n+subroutine foobar\n+i = 5  ! < execution statement\n+!$omp requires atomic_default_mem_order(seq_cst) ! { dg-error \"Unexpected ..OMP REQUIRES statement\" }\n+end\n+\n+program main\n+!$omp requires dynamic_allocators ! OK\n+!$omp requires unified_shared_memory\n+!$omp requires unified_address\n+!$omp requires reverse_offload\n+contains\n+  subroutine foo\n+    !$target\n+    !$end target\n+  end subroutine\n+  subroutine bar\n+    !$omp requires unified_addres ! { dg-error \"must appear in the specification part of a program unit\" }\n+  end subroutine bar\n+end\n+! { dg-prune-output \"not yet supported\" }"}, {"sha": "ade2a3613c666790c995dcc9111b4c7cc713cae8", "filename": "gcc/testsuite/gfortran.dg/gomp/requires-5.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-5.f90?ref=269322ece17202632bc354e9c510e4a5bd6ad84b", "patch": "@@ -0,0 +1,16 @@\n+subroutine bar\n+!$omp requires atomic_default_mem_order(seq_cst)\n+!$omp requires unified_shared_memory\n+end\n+\n+subroutine foo\n+!$omp requires unified_shared_memory\n+!$omp requires unified_shared_memory\n+!$omp requires atomic_default_mem_order(relaxed)\n+!$omp requires atomic_default_mem_order(relaxed)\n+!$omp requires atomic_default_mem_order(seq_cst) ! { dg-error \"overrides a previous 'atomic_default_mem_order\\\\(seq_cst\\\\)'\" }\n+  !$omp target\n+  !$omp end target\n+end\n+\n+! { dg-prune-output \"not yet supported\" }"}, {"sha": "cabd3d94a908efd132077c88e967312fcca55e47", "filename": "gcc/testsuite/gfortran.dg/gomp/requires-6.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-6.f90?ref=269322ece17202632bc354e9c510e4a5bd6ad84b", "patch": "@@ -0,0 +1,16 @@\n+subroutine bar\n+!$omp atomic\n+ i = i + 5\n+end\n+\n+subroutine foo\n+!$omp requires atomic_default_mem_order(seq_cst)\n+end\n+\n+subroutine foobar\n+!$omp atomic\n+ i = i + 5\n+!$omp requires atomic_default_mem_order(acq_rel) ! { dg-error \"Unexpected !.OMP REQUIRES statement\" }\n+end\n+\n+! { dg-prune-output \"not yet supported\" }"}, {"sha": "3d75b89e00bdf7e7855aa5a5cb19a263f4a7de6f", "filename": "gcc/testsuite/gfortran.dg/gomp/requires-7.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-7.f90?ref=269322ece17202632bc354e9c510e4a5bd6ad84b", "patch": "@@ -0,0 +1,41 @@\n+subroutine bar2\n+  block\n+    !$omp requires unified_shared_memory ! { dg-error \"must appear in the specification part of a program unit\" }\n+  end block\n+end\n+\n+subroutine bar\n+contains\n+  subroutine foo\n+    !$omp requires unified_shared_memory ! { dg-error \"must appear in the specification part of a program unit\" }\n+  end\n+end\n+\n+module m\n+contains\n+  subroutine foo\n+    !$omp requires unified_shared_memory ! { dg-error \"must appear in the specification part of a program unit\" }\n+  end\n+end\n+\n+module m2\n+ interface\n+  module subroutine foo()\n+  end\n+ end interface\n+end\n+\n+submodule (m2) m2_sub\n+    !$omp requires unified_shared_memory\n+contains\n+  module procedure foo\n+  end\n+end\n+\n+program main\n+contains\n+  subroutine foo\n+    !$omp requires unified_shared_memory ! { dg-error \"must appear in the specification part of a program unit\" }\n+  end\n+end\n+! { dg-prune-output \"not yet supported\" }"}, {"sha": "3c32ae9860e57cb320d1967e8747edf374a77f0e", "filename": "gcc/testsuite/gfortran.dg/gomp/requires-8.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-8.f90?ref=269322ece17202632bc354e9c510e4a5bd6ad84b", "patch": "@@ -0,0 +1,22 @@\n+module m  !  { dg-error \"has OpenMP device constructs/routines but does not set !.OMP REQUIRES UNIFIED_SHARED_MEMORY but other program units do\" }\n+  !$omp requires reverse_offload\n+contains\n+ subroutine foo\n+  interface\n+   subroutine bar2\n+     !$!omp requires dynamic_allocators\n+   end subroutine\n+  end interface\n+  !$omp target\n+     call bar2()\n+  !$omp end target\n+ end subroutine foo\n+end module m\n+\n+subroutine bar  ! { dg-error \"has OpenMP device constructs/routines but does not set !.OMP REQUIRES REVERSE_OFFSET but other program units do\" }\n+  !use m\n+  !$omp requires unified_shared_memory\n+  !$omp declare target\n+end subroutine bar\n+\n+! { dg-prune-output \"not yet supported\" }"}, {"sha": "a2b0f50ae73413573e922818c0548e861f4e816d", "filename": "gcc/testsuite/gfortran.dg/gomp/requires-9.f90", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269322ece17202632bc354e9c510e4a5bd6ad84b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frequires-9.f90?ref=269322ece17202632bc354e9c510e4a5bd6ad84b", "patch": "@@ -0,0 +1,85 @@\n+! { dg-additional-options \"-fdump-tree-original\" }\n+\n+module relaxed\n+  !$omp requires atomic_default_mem_order(relaxed)\n+end module relaxed\n+\n+module seq\n+  !$omp requires atomic_default_mem_order(seq_cst)\n+end module seq\n+\n+module acq\n+  !$omp requires atomic_default_mem_order(acq_rel)\n+end module acq\n+\n+subroutine sub1\n+  !$omp atomic  ! <= relaxed\n+  i1 = i1 + 5\n+end subroutine\n+\n+subroutine sub2\n+  !$omp atomic seq_cst\n+  i2 = i2 + 5\n+end subroutine\n+\n+subroutine sub3\n+  use relaxed\n+  !$omp atomic\n+  i3 = i3 + 5\n+end subroutine\n+\n+subroutine sub4\n+  use relaxed\n+  !$omp atomic seq_cst\n+  i4 = i4 + 5\n+end subroutine\n+\n+subroutine sub5\n+  use seq\n+  !$omp atomic\n+  i5 = i5 + 5\n+contains\n+  subroutine bar\n+    block\n+      !$omp atomic\n+      i5b = i5b + 5\n+    end block\n+  end\n+end subroutine\n+\n+subroutine sub6\n+  use seq\n+  !$omp atomic seq_cst\n+  i6 = i6 + 5\n+end subroutine\n+\n+subroutine sub7\n+  use acq\n+  !$omp atomic\n+  i7 = i7 + 5\n+contains\n+  subroutine foobar\n+    block\n+      !$omp atomic\n+      i7b = i7b + 5\n+    end block\n+  end\n+end subroutine\n+\n+subroutine sub8\n+  use acq\n+  !$omp atomic seq_cst\n+  i8 = i8 + 5\n+end subroutine\n+\n+! { dg-final { scan-tree-dump-times \"#pragma omp atomic relaxed\\[\\n\\r]\\[^\\n\\r]*&i1 =\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp atomic seq_cst\\[\\n\\r]\\[^\\n\\r]*&i2 =\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp atomic relaxed\\[\\n\\r]\\[^\\n\\r]*&i3 =\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp atomic seq_cst\\[\\n\\r]\\[^\\n\\r]*&i4 =\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp atomic seq_cst\\[\\n\\r]\\[^\\n\\r]*&i5 =\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp atomic seq_cst\\[\\n\\r]\\[^\\n\\r]*&i5 =\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp atomic seq_cst\\[\\n\\r]\\[^\\n\\r]*&i5b =\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp atomic seq_cst\\[\\n\\r]\\[^\\n\\r]*&i6 =\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp atomic acq_rel\\[\\n\\r]\\[^\\n\\r]*&i7 =\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp atomic acq_rel\\[\\n\\r]\\[^\\n\\r]*&i7b =\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp atomic seq_cst\\[\\n\\r]\\[^\\n\\r]*&i8 =\" 1 \"original\" } }"}]}