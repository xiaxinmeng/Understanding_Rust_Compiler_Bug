{"sha": "020ca9503b2ea23e645cfd469231b7c5d416ad32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIwY2E5NTAzYjJlYTIzZTY0NWNmZDQ2OTIzMWI3YzVkNDE2YWQzMg==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2015-01-12T16:47:11Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2015-01-12T16:47:11Z"}, "message": "tsan.c (instrument_expr): Use force_gimple_operand.\n\n2015-01-12  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * tsan.c (instrument_expr): Use force_gimple_operand.\n        Use may_be_nonaddressable_p instead of is_gimple_addressable.\n\nFrom-SVN: r219478", "tree": {"sha": "7057a85721f7a7109f7e1b3f93a92cb82af33c2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7057a85721f7a7109f7e1b3f93a92cb82af33c2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/020ca9503b2ea23e645cfd469231b7c5d416ad32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/020ca9503b2ea23e645cfd469231b7c5d416ad32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/020ca9503b2ea23e645cfd469231b7c5d416ad32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/020ca9503b2ea23e645cfd469231b7c5d416ad32/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1760f7f915a36ee9b4636fb54719c9b3ae59356", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1760f7f915a36ee9b4636fb54719c9b3ae59356", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1760f7f915a36ee9b4636fb54719c9b3ae59356"}], "stats": {"total": 45, "additions": 14, "deletions": 31}, "files": [{"sha": "6ceae6db832f203bc2215e28e8ebc5e31c1e195f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020ca9503b2ea23e645cfd469231b7c5d416ad32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020ca9503b2ea23e645cfd469231b7c5d416ad32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=020ca9503b2ea23e645cfd469231b7c5d416ad32", "patch": "@@ -1,3 +1,8 @@\n+2015-01-12  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* tsan.c (instrument_expr): Use force_gimple_operand.\n+\tUse may_be_nonaddressable_p instead of is_gimple_addressable.\n+\n 2015-01-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/64530"}, {"sha": "5d080b82e08f70653ce1d7ee5a7b3d9419b3b86a", "filename": "gcc/tsan.c", "status": "modified", "additions": 9, "deletions": 31, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020ca9503b2ea23e645cfd469231b7c5d416ad32/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020ca9503b2ea23e645cfd469231b7c5d416ad32/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=020ca9503b2ea23e645cfd469231b7c5d416ad32", "patch": "@@ -51,6 +51,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"hash-map.h\"\n #include \"plugin-api.h\"\n@@ -67,6 +68,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"diagnostic.h\"\n #include \"tree-ssa-propagate.h\"\n+#include \"tree-ssa-loop-ivopts.h\"\n #include \"tsan.h\"\n #include \"asan.h\"\n #include \"builtins.h\"\n@@ -144,16 +146,15 @@ instrument_expr (gimple_stmt_iterator gsi, tree expr, bool is_write)\n \n   /* No need to instrument accesses to decls that don't escape,\n      they can't escape to other threads then.  */\n-  if (DECL_P (base))\n+  if (DECL_P (base) && !is_global_var (base))\n     {\n       struct pt_solution pt;\n       memset (&pt, 0, sizeof (pt));\n       pt.escaped = 1;\n       pt.ipa_escaped = flag_ipa_pta != 0;\n-      pt.nonlocal = 1;\n       if (!pt_solution_includes (&pt, base))\n \treturn false;\n-      if (!is_global_var (base) && !may_be_aliased (base))\n+      if (!may_be_aliased (base))\n \treturn false;\n     }\n \n@@ -165,7 +166,6 @@ instrument_expr (gimple_stmt_iterator gsi, tree expr, bool is_write)\n   stmt = gsi_stmt (gsi);\n   loc = gimple_location (stmt);\n   rhs = is_vptr_store (stmt, expr, is_write);\n-  seq = NULL;\n \n   if ((TREE_CODE (expr) == COMPONENT_REF\n        && DECL_BIT_FIELD_TYPE (TREE_OPERAND (expr, 1)))\n@@ -197,6 +197,8 @@ instrument_expr (gimple_stmt_iterator gsi, tree expr, bool is_write)\n \treturn false;\n       size = (bitpos % BITS_PER_UNIT + bitsize + BITS_PER_UNIT - 1)\n \t     / BITS_PER_UNIT;\n+      if (may_be_nonaddressable_p (base))\n+\treturn false;\n       align = get_object_alignment (base);\n       if (align < BITS_PER_UNIT)\n \treturn false;\n@@ -206,45 +208,21 @@ instrument_expr (gimple_stmt_iterator gsi, tree expr, bool is_write)\n \t  align = (align - 1) & bitpos;\n \t  align = align & -align;\n \t}\n-      gcc_checking_assert (is_gimple_addressable (base));\n       expr = build_fold_addr_expr (unshare_expr (base));\n-      if (!is_gimple_mem_ref_addr (expr))\n-\t{\n-\t  g = gimple_build_assign (make_ssa_name (TREE_TYPE (expr)), expr);\n-\t  expr = gimple_assign_lhs (g);\n-\t  gimple_set_location (g, loc);\n-\t  gimple_seq_add_stmt_without_update (&seq, g);\n-\t}\n       expr = build2 (MEM_REF, char_type_node, expr,\n \t\t     build_int_cst (TREE_TYPE (expr), bitpos / BITS_PER_UNIT));\n       expr_ptr = build_fold_addr_expr (expr);\n     }\n-  /* We can't call build_fold_addr_expr on a VIEW_CONVERT_EXPR.\n-     This can occur in Ada.  */\n-  else if (TREE_CODE (expr) == VIEW_CONVERT_EXPR)\n-    {\n-      align = get_object_alignment (expr);\n-      if (align < BITS_PER_UNIT)\n-\treturn false;\n-      expr = TREE_OPERAND (expr, 0);\n-      gcc_checking_assert (is_gimple_addressable (expr));\n-      expr_ptr = build_fold_addr_expr (unshare_expr (expr));\n-    }\n   else\n     {\n+      if (may_be_nonaddressable_p (expr))\n+\treturn false;\n       align = get_object_alignment (expr);\n       if (align < BITS_PER_UNIT)\n \treturn false;\n-      gcc_checking_assert (is_gimple_addressable (expr));\n       expr_ptr = build_fold_addr_expr (unshare_expr (expr));\n     }\n-  if (!is_gimple_val (expr_ptr))\n-    {\n-      g = gimple_build_assign (make_ssa_name (TREE_TYPE (expr_ptr)), expr_ptr);\n-      expr_ptr = gimple_assign_lhs (g);\n-      gimple_set_location (g, loc);\n-      gimple_seq_add_stmt_without_update (&seq, g);\n-    }\n+  expr_ptr = force_gimple_operand (expr_ptr, &seq, true, NULL_TREE);\n   if ((size & (size - 1)) != 0 || size > 16\n       || align < MIN (size, 8) * BITS_PER_UNIT)\n     {"}]}