{"sha": "c73e8d45ca0111f51d7187641963df97f5c9c63f", "node_id": "C_kwDOANBUbNoAKGM3M2U4ZDQ1Y2EwMTExZjUxZDcxODc2NDE5NjNkZjk3ZjVjOWM2M2Y", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-05T17:06:13Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-05T17:06:13Z"}, "message": "Doubleword version of and;cmp to not;test optimization on x86.\n\nThis patch extends the earlier and;cmp to not;test optimization to also\nperform this transformation for TImode on TARGET_64BIT and DImode on -m32,\nOne motivation for this is that it's a step to fixing the current failure\nof gcc.target/i386/pr65105-5.c on -m32.\n\nA more direct benefit for x86_64 is that the following code:\n\nint foo(__int128 x, __int128 y)\n{\n  return (x & y) == y;\n}\n\nimproves with -O2 from 15 instructions:\n\n        movq    %rdi, %r8\n        movq    %rsi, %rax\n        movq    %rax, %rdi\n        movq    %r8, %rsi\n        movq    %rdx, %r8\n        andq    %rdx, %rsi\n        andq    %rcx, %rdi\n        movq    %rsi, %rax\n        movq    %rdi, %rdx\n        xorq    %r8, %rax\n        xorq    %rcx, %rdx\n        orq     %rdx, %rax\n        sete    %al\n        movzbl  %al, %eax\n        ret\n\nto the slightly better 13 instructions:\n\n        movq    %rdi, %r8\n        movq    %rsi, %rax\n        movq    %r8, %rsi\n        movq    %rax, %rdi\n        notq    %rsi\n        notq    %rdi\n        andq    %rdx, %rsi\n        andq    %rcx, %rdi\n        movq    %rsi, %rax\n        orq     %rdi, %rax\n        sete    %al\n        movzbl  %al, %eax\n        ret\n\n2022-07-05  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/i386.cc (ix86_rtx_costs) <COMPARE>: Provide costs\n\tfor double word comparisons and tests (comparisons against zero).\n\t* config/i386/i386.md (*test<mode>_not_doubleword): Split DWI\n\tand;cmp into andn;cmp $0 as a pre-reload splitter.\n\t(*andn<dwi>3_doubleword_bmi): Use <dwi> instead of <mode> in name.\n\t(*<any_or><dwi>3_doubleword): Likewise.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/testnot-3.c: New test case.", "tree": {"sha": "7d8ae0764e0b46a32a6444af40917e7e457206f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d8ae0764e0b46a32a6444af40917e7e457206f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c73e8d45ca0111f51d7187641963df97f5c9c63f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73e8d45ca0111f51d7187641963df97f5c9c63f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c73e8d45ca0111f51d7187641963df97f5c9c63f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73e8d45ca0111f51d7187641963df97f5c9c63f/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02e2e15ec4b610c0f5c73e1db424b1bbc65dd39a"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "95cb1e2ce7008c5e643d71d5c561e6fb3ebf029b", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73e8d45ca0111f51d7187641963df97f5c9c63f/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73e8d45ca0111f51d7187641963df97f5c9c63f/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=c73e8d45ca0111f51d7187641963df97f5c9c63f", "patch": "@@ -20982,6 +20982,19 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n \t  return true;\n \t}\n \n+      if (SCALAR_INT_MODE_P (GET_MODE (op0))\n+\t  && GET_MODE_SIZE (GET_MODE (op0)) > UNITS_PER_WORD)\n+\t{\n+\t  if (op1 == const0_rtx)\n+\t    *total = cost->add\n+\t\t     + rtx_cost (op0, GET_MODE (op0), outer_code, opno, speed);\n+\t  else\n+\t    *total = 3*cost->add\n+\t\t     + rtx_cost (op0, GET_MODE (op0), outer_code, opno, speed)\n+\t\t     + rtx_cost (op1, GET_MODE (op0), outer_code, opno, speed);\n+\t  return true;\n+\t}\n+\n       /* The embedded comparison operand is completely free.  */\n       if (!general_operand (op0, GET_MODE (op0)) && op1 == const0_rtx)\n \t*total = 0;"}, {"sha": "bdde577ddb50cc0732d7fe3588b16b39a3af9c2c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73e8d45ca0111f51d7187641963df97f5c9c63f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73e8d45ca0111f51d7187641963df97f5c9c63f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c73e8d45ca0111f51d7187641963df97f5c9c63f", "patch": "@@ -9792,7 +9792,25 @@\n    (set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ (and:SWI (match_dup 2) (match_dup 1))\n \t\t     (const_int 0)))]\n+  \"operands[2] = gen_reg_rtx (<MODE>mode);\")\n+\n+;; Split and;cmp (as optimized by combine) into andn;cmp $0\n+(define_insn_and_split \"*test<mode>_not_doubleword\"\n+  [(set (reg:CCZ FLAGS_REG)\n+\t(compare:CCZ\n+\t  (and:DWI\n+\t    (not:DWI (match_operand:DWI 0 \"nonimmediate_operand\"))\n+\t    (match_operand:DWI 1 \"nonimmediate_operand\"))\n+\t  (const_int 0)))]\n+  \"ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel\n+      [(set (match_dup 2) (and:DWI (not:DWI (match_dup 0)) (match_dup 1)))\n+       (clobber (reg:CC FLAGS_REG))])\n+   (set (reg:CCZ FLAGS_REG) (compare:CCZ (match_dup 2) (const_int 0)))]\n {\n+  operands[0] = force_reg (<MODE>mode, operands[0]);\n   operands[2] = gen_reg_rtx (<MODE>mode);\n })\n \n@@ -10404,7 +10422,7 @@\n   operands[2] = gen_int_mode (INTVAL (operands[2]), QImode);\n })\n \n-(define_insn_and_split \"*andn<mode>3_doubleword_bmi\"\n+(define_insn_and_split \"*andn<dwi>3_doubleword_bmi\"\n   [(set (match_operand:<DWI> 0 \"register_operand\" \"=r\")\n \t(and:<DWI>\n \t  (not:<DWI> (match_operand:<DWI> 1 \"register_operand\" \"r\"))\n@@ -10618,7 +10636,7 @@\n   DONE;\n })\n \n-(define_insn_and_split \"*<code><mode>3_doubleword\"\n+(define_insn_and_split \"*<code><dwi>3_doubleword\"\n   [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro,r\")\n \t(any_or:<DWI>\n \t (match_operand:<DWI> 1 \"nonimmediate_operand\" \"%0,0\")"}, {"sha": "7c54dbc3421e0ebef7329f620dcecc2eb2343d84", "filename": "gcc/testsuite/gcc.target/i386/testnot-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73e8d45ca0111f51d7187641963df97f5c9c63f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestnot-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73e8d45ca0111f51d7187641963df97f5c9c63f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestnot-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestnot-3.c?ref=c73e8d45ca0111f51d7187641963df97f5c9c63f", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+\n+int foo(__int128 x, __int128 y)\n+{\n+  return (x & y) == y;\n+}\n+\n+/* { dg-final { scan-assembler-not \"xorq\" } } */"}]}