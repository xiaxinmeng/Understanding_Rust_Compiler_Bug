{"sha": "009b7fc1870354e2c70d21c88fa671113a8e5f13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA5YjdmYzE4NzAzNTRlMmM3MGQyMWM4OGZhNjcxMTEzYThlNWYxMw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2015-04-28T04:01:28Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-04-28T04:01:28Z"}, "message": "re PR tree-optimization/65217 (__builtin_unreachable in if statement causes bad assembly generation)\n\n\tPR tree-optimization/65217\n\t* tree-ssa-dom.c (record_equality): Given two SSA_NAMEs, if just one\n\tof them has a single use, make sure it is the LHS of the implied\n\tcopy.\n\n        PR tree-optimization/65217\n\t* gcc.target/i386/pr65217.c: Remove XFAIL.\n\nFrom-SVN: r222499", "tree": {"sha": "a59c6eeaf6d12c3a659434c06b6cf3b9bc71f7ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a59c6eeaf6d12c3a659434c06b6cf3b9bc71f7ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/009b7fc1870354e2c70d21c88fa671113a8e5f13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009b7fc1870354e2c70d21c88fa671113a8e5f13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/009b7fc1870354e2c70d21c88fa671113a8e5f13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009b7fc1870354e2c70d21c88fa671113a8e5f13/comments", "author": null, "committer": null, "parents": [{"sha": "3954ead0d88676855e877a8a20c05f49256260d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3954ead0d88676855e877a8a20c05f49256260d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3954ead0d88676855e877a8a20c05f49256260d7"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "1a82f17a97fb7a567a45cb6d94d34671daeafa28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009b7fc1870354e2c70d21c88fa671113a8e5f13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009b7fc1870354e2c70d21c88fa671113a8e5f13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=009b7fc1870354e2c70d21c88fa671113a8e5f13", "patch": "@@ -1,3 +1,10 @@\n+2015-04-27  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/65217\n+\t* tree-ssa-dom.c (record_equality): Given two SSA_NAMEs, if just one\n+\tof them has a single use, make sure it is the LHS of the implied\n+\tcopy.\n+\n 2015-04-28  Alan Modra  <amodra@gmail.com>\n \n \tPR target/65810"}, {"sha": "0fc23843520b31318ff8023e2f43050bce0e6b08", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009b7fc1870354e2c70d21c88fa671113a8e5f13/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009b7fc1870354e2c70d21c88fa671113a8e5f13/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=009b7fc1870354e2c70d21c88fa671113a8e5f13", "patch": "@@ -1,3 +1,8 @@\n+2015-04-27  Jeff Law <law@redhat.com>\n+\n+        PR tree-optimization/65217\n+\t* gcc.target/i386/pr65217.c: Remove XFAIL.\n+\n 2015-04-27  Andre Vehreschild  <vehre@gmx.de>\n \n \tPR fortran/60322"}, {"sha": "d5c9be5b9ef22668ce5c8762adc3f361a050eff0", "filename": "gcc/testsuite/gcc.target/i386/pr65217.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009b7fc1870354e2c70d21c88fa671113a8e5f13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65217.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009b7fc1870354e2c70d21c88fa671113a8e5f13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65217.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65217.c?ref=009b7fc1870354e2c70d21c88fa671113a8e5f13", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O\" } */\n-/* { dg-final { scan-assembler-not \"negl\" { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-not \"andl\" { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not \"negl\" } } */\n+/* { dg-final { scan-assembler-not \"andl\" } } */\n \n int \n test(int n)"}, {"sha": "c7d427be22ec007d40b4e9ff9c323478ea4294f2", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009b7fc1870354e2c70d21c88fa671113a8e5f13/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009b7fc1870354e2c70d21c88fa671113a8e5f13/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=009b7fc1870354e2c70d21c88fa671113a8e5f13", "patch": "@@ -1762,6 +1762,20 @@ record_equality (tree x, tree y)\n   if (tree_swap_operands_p (x, y, false))\n     std::swap (x, y);\n \n+  /* Most of the time tree_swap_operands_p does what we want.  But there's\n+     cases where we we know one operand is better for copy propagation than\n+     the other.  Given no other code cares about ordering of equality\n+     comparison operators for that purpose, we just handle the special cases\n+     here.  */\n+  if (TREE_CODE (x) == SSA_NAME && TREE_CODE (y) == SSA_NAME)\n+    {\n+      /* If one operand is a single use operand, then make it\n+\t X.  This will preserve its single use properly and if this\n+\t conditional is eliminated, the computation of X can be\n+\t eliminated as well.  */\n+      if (has_single_use (y) && ! has_single_use (x))\n+\tstd::swap (x, y);\n+    }\n   if (TREE_CODE (x) == SSA_NAME)\n     prev_x = SSA_NAME_VALUE (x);\n   if (TREE_CODE (y) == SSA_NAME)"}]}