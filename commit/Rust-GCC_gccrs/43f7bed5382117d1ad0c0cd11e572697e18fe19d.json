{"sha": "43f7bed5382117d1ad0c0cd11e572697e18fe19d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNmN2JlZDUzODIxMTdkMWFkMGMwY2QxMWU1NzI2OTdlMThmZTE5ZA==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@cygnus.com", "date": "1999-02-08T16:00:46Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "1999-02-08T16:00:46Z"}, "message": "c-typeck.c (check_init_type_bitfields): Use nonincremental initialization of unions whose first member is a bitfield.\n\nMon Feb  9 18:57:45 1999  Vladimir N. Makarov  <vmakarov@cygnus.com>\n\t* c-typeck.c (check_init_type_bitfields): Use nonincremental\n\tinitialization of unions whose first member is a bitfield.\n        Remove unnecessary code for checking the declaration mode\n        after DECL_C_BIT_FIELD.\n\t* varasm.c (output_constructor): Additional comment about the\n \tconstructor of bitfield union initialization.\n\nFrom-SVN: r25093", "tree": {"sha": "60dfefde34e222d8b7627ad7d2847648aa63f309", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60dfefde34e222d8b7627ad7d2847648aa63f309"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43f7bed5382117d1ad0c0cd11e572697e18fe19d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f7bed5382117d1ad0c0cd11e572697e18fe19d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43f7bed5382117d1ad0c0cd11e572697e18fe19d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f7bed5382117d1ad0c0cd11e572697e18fe19d/comments", "author": null, "committer": null, "parents": [{"sha": "ef5ae176719e04e4f54bc95cde9447e52af62906", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef5ae176719e04e4f54bc95cde9447e52af62906", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef5ae176719e04e4f54bc95cde9447e52af62906"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "35680f61784c04839363347e6c37c68f1831152f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f7bed5382117d1ad0c0cd11e572697e18fe19d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f7bed5382117d1ad0c0cd11e572697e18fe19d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43f7bed5382117d1ad0c0cd11e572697e18fe19d", "patch": "@@ -1,3 +1,13 @@\n+Mon Feb  9 18:57:45 1999  Vladimir N. Makarov  <vmakarov@cygnus.com>\n+\n+\t* c-typeck.c (check_init_type_bitfields): Use nonincremental\n+\tinitialization of unions whose first member is a bitfield.\n+        Remove unnecessary code for checking the declaration mode\n+        after DECL_C_BIT_FIELD.\n+\n+\t* varasm.c (output_constructor): Additional comment about the\n+ \tconstructor of bitfield union initialization.\n+\n Tue Feb  9 11:55:04 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.md (*movhi_stik): New pattern."}, {"sha": "c065dc4f909babde84ba91a55b0f01d0c43f05c3", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f7bed5382117d1ad0c0cd11e572697e18fe19d/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f7bed5382117d1ad0c0cd11e572697e18fe19d/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=43f7bed5382117d1ad0c0cd11e572697e18fe19d", "patch": "@@ -5480,9 +5480,7 @@ check_init_type_bitfields (type)\n       for (tail = TYPE_FIELDS (type); tail;\n \t   tail = TREE_CHAIN (tail))\n \t{\n-\t  if (DECL_C_BIT_FIELD (tail)\n-\t      /* This catches cases like `int foo : 8;'.  */\n-\t      || DECL_MODE (tail) != TYPE_MODE (TREE_TYPE (tail)))\n+\t  if (DECL_C_BIT_FIELD (tail))\n \t    {\n \t      constructor_incremental = 0;\n \t      break;\n@@ -5492,6 +5490,17 @@ check_init_type_bitfields (type)\n \t}\n     }\n \n+  else if (TREE_CODE (type) == UNION_TYPE)\n+    {\n+      tree tail = TYPE_FIELDS (type);\n+      if (tail && DECL_C_BIT_FIELD (tail))\n+\t/* We also use the nonincremental algorithm for initiliazation\n+\t   of unions whose first member is a bitfield, becuase the\n+\t   incremental algorithm has no code for dealing with\n+\t   bitfields. */\n+\tconstructor_incremental = 0;\n+    }\n+\n   else if (TREE_CODE (type) == ARRAY_TYPE)\n     check_init_type_bitfields (TREE_TYPE (type));\n }"}, {"sha": "213c07c9a582066bfea5480483ebc42daf60401e", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f7bed5382117d1ad0c0cd11e572697e18fe19d/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f7bed5382117d1ad0c0cd11e572697e18fe19d/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=43f7bed5382117d1ad0c0cd11e572697e18fe19d", "patch": "@@ -3998,7 +3998,11 @@ output_constructor (exp, size)\n      FIELD goes through the structure fields, if the constant is a structure.\n      if the constant is a union, then we override this,\n      by getting the field from the TREE_LIST element.\n-     But the constant could also be an array.  Then FIELD is zero.  */\n+     But the constant could also be an array.  Then FIELD is zero.\n+\n+     There is always a maximum of one element in the chain LINK for unions\n+     (even if the initializer in a source program incorrectly contains\n+     more one). */\n   for (link = CONSTRUCTOR_ELTS (exp);\n        link;\n        link = TREE_CHAIN (link),"}]}