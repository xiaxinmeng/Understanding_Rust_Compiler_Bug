{"sha": "044331a86cdee0427e7b8552307c9e83f7088979", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ0MzMxYTg2Y2RlZTA0MjdlN2I4NTUyMzA3YzllODNmNzA4ODk3OQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-08-07T08:12:04Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-08-07T08:12:04Z"}, "message": "fold-const.c (fold_binary_loc): Add folding of (PTR0 - (PTR1 p+ A) -> (PTR0 - PTR1) - A.\n\n\t* fold-const.c (fold_binary_loc): Add folding of \n\t(PTR0 - (PTR1 p+ A) -> (PTR0 - PTR1) - A.\nc/\n\t* c-typeck.c (pointer_diff): Remove P - (P + CST) optimization.\ntestsuite/\n\t* gcc.dg/fold-reassoc-3.c: New test.\n\nFrom-SVN: r213700", "tree": {"sha": "d7ba08e9040a1712a5107f8572a9ad61c05b7f13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7ba08e9040a1712a5107f8572a9ad61c05b7f13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/044331a86cdee0427e7b8552307c9e83f7088979", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/044331a86cdee0427e7b8552307c9e83f7088979", "html_url": "https://github.com/Rust-GCC/gccrs/commit/044331a86cdee0427e7b8552307c9e83f7088979", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/044331a86cdee0427e7b8552307c9e83f7088979/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce597aedd79e646c4a5517505088d380239cbfa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce597aedd79e646c4a5517505088d380239cbfa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce597aedd79e646c4a5517505088d380239cbfa5"}], "stats": {"total": 89, "additions": 43, "deletions": 46}, "files": [{"sha": "6ad4fe10112b73593bcf137a6b0edb1423f4400a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044331a86cdee0427e7b8552307c9e83f7088979/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044331a86cdee0427e7b8552307c9e83f7088979/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=044331a86cdee0427e7b8552307c9e83f7088979", "patch": "@@ -1,3 +1,8 @@\n+2014-08-07  Marek Polacek  <polacek@redhat.com>\n+\n+\t* fold-const.c (fold_binary_loc): Add folding of \n+\t(PTR0 - (PTR1 p+ A) -> (PTR0 - PTR1) - A.\n+\n 2013-08-07  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* config/elfos.h (ASM_DECLARE_OBJECT_NAME): Use decl size"}, {"sha": "484a284b0fd92514bf626b46909d41a1c28b3ced", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044331a86cdee0427e7b8552307c9e83f7088979/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044331a86cdee0427e7b8552307c9e83f7088979/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=044331a86cdee0427e7b8552307c9e83f7088979", "patch": "@@ -1,3 +1,7 @@\n+2014-08-07  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-typeck.c (pointer_diff): Remove P - (P + CST) optimization.\n+\n 2014-08-02  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* c-typeck.c: Use hash_map instead of pointer_map."}, {"sha": "998e3863a96f902d4b5350a6d1ae77ed88e63db2", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044331a86cdee0427e7b8552307c9e83f7088979/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044331a86cdee0427e7b8552307c9e83f7088979/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=044331a86cdee0427e7b8552307c9e83f7088979", "patch": "@@ -3460,7 +3460,6 @@ pointer_diff (location_t loc, tree op0, tree op1)\n   addr_space_t as0 = TYPE_ADDR_SPACE (TREE_TYPE (TREE_TYPE (op0)));\n   addr_space_t as1 = TYPE_ADDR_SPACE (TREE_TYPE (TREE_TYPE (op1)));\n   tree target_type = TREE_TYPE (TREE_TYPE (op0));\n-  tree con0, con1, lit0, lit1;\n   tree orig_op1 = op1;\n \n   /* If the operands point into different address spaces, we need to\n@@ -3490,58 +3489,13 @@ pointer_diff (location_t loc, tree op0, tree op1)\n   else\n     inttype = restype;\n \n-\n   if (TREE_CODE (target_type) == VOID_TYPE)\n     pedwarn (loc, OPT_Wpointer_arith,\n \t     \"pointer of type %<void *%> used in subtraction\");\n   if (TREE_CODE (target_type) == FUNCTION_TYPE)\n     pedwarn (loc, OPT_Wpointer_arith,\n \t     \"pointer to a function used in subtraction\");\n \n-  /* If the conversion to ptrdiff_type does anything like widening or\n-     converting a partial to an integral mode, we get a convert_expression\n-     that is in the way to do any simplifications.\n-     (fold-const.c doesn't know that the extra bits won't be needed.\n-     split_tree uses STRIP_SIGN_NOPS, which leaves conversions to a\n-     different mode in place.)\n-     So first try to find a common term here 'by hand'; we want to cover\n-     at least the cases that occur in legal static initializers.  */\n-  if (CONVERT_EXPR_P (op0)\n-      && (TYPE_PRECISION (TREE_TYPE (op0))\n-\t  == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (op0, 0)))))\n-    con0 = TREE_OPERAND (op0, 0);\n-  else\n-    con0 = op0;\n-  if (CONVERT_EXPR_P (op1)\n-      && (TYPE_PRECISION (TREE_TYPE (op1))\n-\t  == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (op1, 0)))))\n-    con1 = TREE_OPERAND (op1, 0);\n-  else\n-    con1 = op1;\n-\n-  if (TREE_CODE (con0) == POINTER_PLUS_EXPR)\n-    {\n-      lit0 = TREE_OPERAND (con0, 1);\n-      con0 = TREE_OPERAND (con0, 0);\n-    }\n-  else\n-    lit0 = integer_zero_node;\n-\n-  if (TREE_CODE (con1) == POINTER_PLUS_EXPR)\n-    {\n-      lit1 = TREE_OPERAND (con1, 1);\n-      con1 = TREE_OPERAND (con1, 0);\n-    }\n-  else\n-    lit1 = integer_zero_node;\n-\n-  if (operand_equal_p (con0, con1, 0))\n-    {\n-      op0 = lit0;\n-      op1 = lit1;\n-    }\n-\n-\n   /* First do the subtraction as integers;\n      then drop through to build the divide operator.\n      Do not do default conversions on the minus operator"}, {"sha": "d44476972158b125aecd8c4a5c8d6176ad3b0e5c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044331a86cdee0427e7b8552307c9e83f7088979/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044331a86cdee0427e7b8552307c9e83f7088979/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=044331a86cdee0427e7b8552307c9e83f7088979", "patch": "@@ -10831,6 +10831,19 @@ fold_binary_loc (location_t loc,\n \t      if (tmp)\n \t        return fold_build2_loc (loc, PLUS_EXPR, type, tmp, arg01);\n \t    }\n+\t  /* PTR0 - (PTR1 p+ A) -> (PTR0 - PTR1) - A, assuming PTR0 - PTR1\n+\t     simplifies. */\n+\t  else if (TREE_CODE (arg1) == POINTER_PLUS_EXPR)\n+\t    {\n+\t      tree arg10 = fold_convert_loc (loc, type,\n+\t\t\t\t\t     TREE_OPERAND (arg1, 0));\n+\t      tree arg11 = fold_convert_loc (loc, type,\n+\t\t\t\t\t     TREE_OPERAND (arg1, 1));\n+\t      tree tmp = fold_binary_loc (loc, MINUS_EXPR, type, arg0,\n+\t\t\t\t\t  fold_convert_loc (loc, type, arg10));\n+\t      if (tmp)\n+\t\treturn fold_build2_loc (loc, MINUS_EXPR, type, tmp, arg11);\n+\t    }\n \t}\n       /* A - (-B) -> A + B */\n       if (TREE_CODE (arg1) == NEGATE_EXPR)"}, {"sha": "978bab8cbb53f96b1c86649fbee2ccb8254a40a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044331a86cdee0427e7b8552307c9e83f7088979/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044331a86cdee0427e7b8552307c9e83f7088979/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=044331a86cdee0427e7b8552307c9e83f7088979", "patch": "@@ -1,3 +1,7 @@\n+2014-08-07  Marek Polacek  <polacek@redhat.com>\n+\n+\t* gcc.dg/fold-reassoc-3.c: New test.\n+\n 2013-08-07  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* gcc.target/i386/struct-size.c: New."}, {"sha": "313fb986e411e0493676db171aa9ff087e7fa8cb", "filename": "gcc/testsuite/gcc.dg/fold-reassoc-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044331a86cdee0427e7b8552307c9e83f7088979/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-reassoc-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044331a86cdee0427e7b8552307c9e83f7088979/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-reassoc-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-reassoc-3.c?ref=044331a86cdee0427e7b8552307c9e83f7088979", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-original\" } */\n+\n+int i;\n+int *p = &i;\n+static __PTRDIFF_TYPE__ d = p - (p + 1);\n+\n+void\n+foo (void)\n+{\n+  int *q = &i;\n+  static __PTRDIFF_TYPE__ e = q - (q + 1);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \" - \" \"original\" } } */\n+/* { dg-final { scan-tree-dump-not \" \\\\\\+ \" \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"orginal\" } } */"}]}