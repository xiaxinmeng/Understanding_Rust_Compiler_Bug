{"sha": "c37bb106ec37b73a1d44494a268f5857a2b90b93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM3YmIxMDZlYzM3YjczYTFkNDQ0OTRhMjY4ZjU4NTdhMmI5MGI5Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-05-19T14:24:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-05-19T14:24:07Z"}, "message": "[multiple changes]\n\n2004-05-19  Joel Brobecker  <brobecker@gnat.com>\n\n\t* exp_dbug.ads: Correct comments concerning handling of overloading,\n\tsince we no longer use $ anymore.\n\n2004-05-19  Sergey Rybin  <rybin@act-europe.fr>\n\n\t* sem_ch10.adb (Optional_Subunit): When loading a subunit, do not\n\tignore errors if ASIS_Mode is set. This prevents creating ASIS trees\n\twith illegal subunits.\n\n2004-05-19  Ed Schonberg  <schonberg@gnat.com>\n\n\t* sem_ch6.adb (Check_Following_Pragma): When compiling a subprogram\n\tbody with front-end inlining enabled, check whether an inline pragma\n\tappears immediately after the body and applies to it.\n\n\t* sem_prag.adb (Cannot_Inline): Emit warning if front-end inlining is\n\tenabled and the pragma appears after the body of the subprogram.\n\nFrom-SVN: r82026", "tree": {"sha": "a57faeaf8a7a0c6e7070868d587ca81339b04831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a57faeaf8a7a0c6e7070868d587ca81339b04831"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c37bb106ec37b73a1d44494a268f5857a2b90b93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37bb106ec37b73a1d44494a268f5857a2b90b93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c37bb106ec37b73a1d44494a268f5857a2b90b93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37bb106ec37b73a1d44494a268f5857a2b90b93/comments", "author": null, "committer": null, "parents": [{"sha": "31a52b868a209f0c8f3ade10a91148664526dc9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31a52b868a209f0c8f3ade10a91148664526dc9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31a52b868a209f0c8f3ade10a91148664526dc9b"}], "stats": {"total": 125, "additions": 93, "deletions": 32}, "files": [{"sha": "87bb01f4bffc2bedeb1903dd09d8650056b09393", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37bb106ec37b73a1d44494a268f5857a2b90b93/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37bb106ec37b73a1d44494a268f5857a2b90b93/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c37bb106ec37b73a1d44494a268f5857a2b90b93", "patch": "@@ -1,3 +1,23 @@\n+2004-05-19  Joel Brobecker  <brobecker@gnat.com>\n+\n+\t* exp_dbug.ads: Correct comments concerning handling of overloading,\n+\tsince we no longer use $ anymore.\n+\n+2004-05-19  Sergey Rybin  <rybin@act-europe.fr>\n+\n+\t* sem_ch10.adb (Optional_Subunit): When loading a subunit, do not\n+\tignore errors if ASIS_Mode is set. This prevents creating ASIS trees\n+\twith illegal subunits.\n+\n+2004-05-19  Ed Schonberg  <schonberg@gnat.com>\n+\n+\t* sem_ch6.adb (Check_Following_Pragma): When compiling a subprogram\n+\tbody with front-end inlining enabled, check whether an inline pragma\n+\tappears immediately after the body and applies to it.\n+\n+\t* sem_prag.adb (Cannot_Inline): Emit warning if front-end inlining is\n+\tenabled and the pragma appears after the body of the subprogram.\n+\n 2004-05-17  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \tPart of function-at-a-time conversion"}, {"sha": "080e86615649b70fe04e3aba7d947207e5e33839", "filename": "gcc/ada/exp_dbug.ads", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37bb106ec37b73a1d44494a268f5857a2b90b93/gcc%2Fada%2Fexp_dbug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37bb106ec37b73a1d44494a268f5857a2b90b93/gcc%2Fada%2Fexp_dbug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.ads?ref=c37bb106ec37b73a1d44494a268f5857a2b90b93", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1996-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1996-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -99,23 +99,19 @@ package Exp_Dbug is\n       --  subprograms, since overloading can legitimately result in a\n       --  case of two entities with exactly the same fully qualified names.\n       --  To distinguish between entries in a set of overloaded subprograms,\n-      --  the encoded names are serialized by adding one of the suffixes:\n+      --  the encoded names are serialized by adding the suffix:\n \n-      --    $n    (dollar sign)\n       --    __nn  (two underscores)\n \n       --  where nn is a serial number (2 for the second overloaded function,\n-      --  2 for the third, etc.). We use $ if this symbol is allowed, and\n-      --  double underscore if it is not. In the remaining examples in this\n-      --  section, we use a $ sign, but the $ is replaced by __ throughout\n-      --  these examples if $ sign is not available. A suffix of $1 is\n-      --  always omitted (i.e. no suffix implies the first instance).\n+      --  2 for the third, etc.). A suffix of __1 is always omitted (i.e. no\n+      --  suffix implies the first instance).\n \n       --  These names are prefixed by the normal full qualification. So\n       --  for example, the third instance of the subprogram qrs in package\n       --  yz would have the name:\n \n-      --    yz__qrs$3\n+      --    yz__qrs__3\n \n       --  A more subtle case arises with entities declared within overloaded\n       --  subprograms. If we have two overloaded subprograms, and both declare\n@@ -128,7 +124,7 @@ package Exp_Dbug is\n       --  we are talking about. For this purpose, we use a more complex suffix\n       --  which has the form:\n \n-      --    $nn_nn_nn ...\n+      --    __nn_nn_nn ...\n \n       --  where the nn values are the homonym numbers as needed for any of\n       --  the qualifying entities, separated by a single underscore. If all\n@@ -141,13 +137,13 @@ package Exp_Dbug is\n       --        procedure Tuv is ... end;    -- Name is yz__qrs__tuv\n       --      begin ... end Qrs;\n \n-      --      procedure Qrs (X: Int) is      -- Name is yz__qrs$2\n-      --        procedure Tuv is ... end;    -- Name is yz__qrs__tuv$2_1\n-      --        procedure Tuv (X: Int) is    -- Name is yz__qrs__tuv$2_2\n+      --      procedure Qrs (X: Int) is      -- Name is yz__qrs__2\n+      --        procedure Tuv is ... end;    -- Name is yz__qrs__tuv__2_1\n+      --        procedure Tuv (X: Int) is    -- Name is yz__qrs__tuv__2_2\n       --        begin ... end Tuv;\n \n-      --        procedure Tuv (X: Float) is  -- Name is yz__qrs__tuv$2_3\n-      --          type m is new float;       -- Name is yz__qrs__tuv__m$2_3\n+      --        procedure Tuv (X: Float) is  -- Name is yz__qrs__tuv__2_3\n+      --          type m is new float;       -- Name is yz__qrs__tuv__m__2_3\n       --        begin ... end Tuv;\n       --      begin ... end Qrs;\n       --    end Yz;"}, {"sha": "9eaee3e057f6ed0d06629a74f0261c34e986615b", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37bb106ec37b73a1d44494a268f5857a2b90b93/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37bb106ec37b73a1d44494a268f5857a2b90b93/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=c37bb106ec37b73a1d44494a268f5857a2b90b93", "patch": "@@ -948,14 +948,20 @@ package body Sem_Ch10 is\n          --  Errout to ignore all errors. Note that Fatal_Error will still\n          --  be set, so we will be able to check for this case below.\n \n-         Ignore_Errors_Enable := Ignore_Errors_Enable + 1;\n+         if not ASIS_Mode then\n+            Ignore_Errors_Enable := Ignore_Errors_Enable + 1;\n+         end if;\n+\n          Unum :=\n            Load_Unit\n              (Load_Name  => Subunit_Name,\n               Required   => False,\n               Subunit    => True,\n               Error_Node => N);\n-         Ignore_Errors_Enable := Ignore_Errors_Enable - 1;\n+\n+         if not ASIS_Mode then\n+            Ignore_Errors_Enable := Ignore_Errors_Enable - 1;\n+         end if;\n \n          --  All done if we successfully loaded the subunit\n "}, {"sha": "41d23886b166336cac35cf2c264f705b3babffcf", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37bb106ec37b73a1d44494a268f5857a2b90b93/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37bb106ec37b73a1d44494a268f5857a2b90b93/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=c37bb106ec37b73a1d44494a268f5857a2b90b93", "patch": "@@ -790,6 +790,33 @@ package body Sem_Ch6 is\n       Missing_Ret  : Boolean;\n       P_Ent        : Entity_Id;\n \n+      procedure Check_Following_Pragma;\n+      --  If front-end inlining is enabled, look ahead to recognize a pragma\n+      --  that may appear after the body.\n+\n+      procedure Check_Following_Pragma is\n+         Prag : Node_Id;\n+      begin\n+         if Front_End_Inlining\n+           and then Is_List_Member (N)\n+           and then Present (Spec_Decl)\n+           and then List_Containing (N) = List_Containing (Spec_Decl)\n+         then\n+            Prag := Next (N);\n+\n+            if Present (Prag)\n+              and then Nkind (Prag) = N_Pragma\n+              and then Get_Pragma_Id (Chars (Prag)) = Pragma_Inline\n+              and then\n+              Chars\n+                (Expression (First (Pragma_Argument_Associations (Prag))))\n+                   = Chars (Body_Id)\n+            then\n+               Analyze (Prag);\n+            end if;\n+         end if;\n+      end Check_Following_Pragma;\n+\n    begin\n       if Debug_Flag_C then\n          Write_Str (\"====  Compiling subprogram body \");\n@@ -1141,13 +1168,15 @@ package body Sem_Ch6 is\n \n       elsif  Present (Spec_Id)\n         and then Expander_Active\n-        and then (Is_Always_Inlined (Spec_Id)\n-                    or else (Has_Pragma_Inline (Spec_Id)\n-                              and then\n-                                (Front_End_Inlining\n-                                  or else Configurable_Run_Time_Mode)))\n       then\n-         Build_Body_To_Inline (N, Spec_Id);\n+         Check_Following_Pragma;\n+\n+         if Is_Always_Inlined (Spec_Id)\n+           or else (Has_Pragma_Inline (Spec_Id)\n+             and then (Front_End_Inlining or else Configurable_Run_Time_Mode))\n+         then\n+            Build_Body_To_Inline (N, Spec_Id);\n+         end if;\n       end if;\n \n       --  Ada 0Y (AI-262): In library subprogram bodies, after the analysis\n@@ -1169,6 +1198,7 @@ package body Sem_Ch6 is\n       Process_End_Label (HSS, 't', Current_Scope);\n       End_Scope;\n       Check_Subprogram_Order (N);\n+      Set_Analyzed (Body_Id);\n \n       --  If we have a separate spec, then the analysis of the declarations\n       --  caused the entities in the body to be chained to the spec id, but"}, {"sha": "afbb68042b6c881f53fe5c52bbfd3af6ff5d2085", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37bb106ec37b73a1d44494a268f5857a2b90b93/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37bb106ec37b73a1d44494a268f5857a2b90b93/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=c37bb106ec37b73a1d44494a268f5857a2b90b93", "patch": "@@ -2856,15 +2856,17 @@ package body Sem_Prag is\n          procedure Set_Inline_Flags (Subp : Entity_Id);\n          --  Sets Is_Inlined and Has_Pragma_Inline flags for Subp\n \n-         function Back_End_Cannot_Inline (Subp : Entity_Id) return Boolean;\n+         function Cannot_Inline (Subp : Entity_Id) return Boolean;\n          --  Do not set the inline flag if body is available and contains\n          --  exception handlers, to prevent undefined symbols at link time.\n+         --  Emit warning if front-end inlining is enabled and the pragma\n+         --  appears too late.\n \n-         ----------------------------\n-         -- Back_End_Cannot_Inline --\n-         ----------------------------\n+         -------------------\n+         -- Cannot_Inline --\n+         -------------------\n \n-         function Back_End_Cannot_Inline (Subp : Entity_Id) return Boolean is\n+         function Cannot_Inline (Subp : Entity_Id) return Boolean is\n             Decl : constant Node_Id := Unit_Declaration_Node (Subp);\n \n          begin\n@@ -2876,12 +2878,19 @@ package body Sem_Prag is\n             elsif Nkind (Decl) = N_Subprogram_Declaration\n               and then Present (Corresponding_Body (Decl))\n             then\n+               if Front_End_Inlining\n+                 and then Analyzed (Corresponding_Body (Decl))\n+               then\n+                  Error_Msg_N (\"pragma appears too late, ignored?\", N);\n+                  return True;\n+\n                --  If the subprogram is a renaming as body, the body is\n                --  just a call to the renamed subprogram, and inlining is\n                --  trivially possible.\n \n-               if Nkind (Unit_Declaration_Node (Corresponding_Body (Decl))) =\n-                                            N_Subprogram_Renaming_Declaration\n+               elsif\n+                 Nkind (Unit_Declaration_Node (Corresponding_Body (Decl)))\n+                   = N_Subprogram_Renaming_Declaration\n                then\n                   return False;\n \n@@ -2897,7 +2906,7 @@ package body Sem_Prag is\n \n                return False;\n             end if;\n-         end Back_End_Cannot_Inline;\n+         end Cannot_Inline;\n \n          -----------------\n          -- Make_Inline --\n@@ -2911,7 +2920,7 @@ package body Sem_Prag is\n             if Etype (Subp) = Any_Type then\n                return;\n \n-            elsif Back_End_Cannot_Inline (Subp) then\n+            elsif Cannot_Inline (Subp) then\n                Applies := True;    --  Do not treat as an error.\n                return;\n "}]}