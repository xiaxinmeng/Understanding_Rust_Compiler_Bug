{"sha": "771578a0df0245565f21186deb58135c3351f3a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcxNTc4YTBkZjAyNDU1NjVmMjExODZkZWI1ODEzNWMzMzUxZjNhNw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2008-07-08T13:25:24Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2008-07-08T13:25:24Z"}, "message": "ipa-cp.c (ipcp_init_cloned_node): Call ipa_check_create_node_params instead of ipa_create_node_params.\n\n2008-07-08  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-cp.c (ipcp_init_cloned_node): Call ipa_check_create_node_params\n\tinstead of ipa_create_node_params.\n\t(ipcp_driver): Allocate infos with ipa_check_create_node_params and\n\tipa_check_create_edge_args, free them with\n\tfree_all_ipa_structures_after_ipa_cp, call ipa_register_cgraph_hooks.\n\n\t* ipa-prop.c: Include flags.h and tree-inline.h.\n\t(ipa_node_params_vector): New variable.\n\t(ipa_edge_args_vector): New variable.\n\t(edge_removal_hook_holder): New variable.\n\t(node_removal_hook_holder): New variable.\n\t(edge_duplication_hook_holder): New variable.\n\t(node_duplication_hook_holder): New variable.\n\t(ipa_detect_param_modifications): Check for presence of modified flags.\n\t(ipa_compute_jump_functions): Check for presence of jump functions.\n\t(ipa_free_edge_args_substructures): New function.\n\t(ipa_create_node_params): Removed.\n\t(ipa_free_all_edge_args): Changed to deallocate the on-the-side vector.\n\t(ipa_free_node_params_substructures): New function.\n\t(ipa_free_all_node_params): Changed to deallocate the on-the-side\n\tvector.\n\t(ipa_edge_removal_hook): New function.\n\t(ipa_node_removal_hook): New function.\n\t(duplicate_array): New function.\n\t(ipa_edge_duplication_hook): New function.\n\t(ipa_node_duplication_hook): New function.\n\t(ipa_register_cgraph_hooks): New function.\n\t(ipa_unregister_cgraph_hooks): New function.\n\t(free_all_ipa_structures_after_ipa_cp): New function.\n\t\n\t* ipa-prop.h: Include vec.h.\n\t(ipa_node_params_t): New typedef with vector types for it.\n\t(ipa_edge_args_t):  New typedef with vector types for it.\n\t(IPA_NODE_REF): Changed to access an on-the-side vector.\n\t(IPA_EDGE_REF): Changed to access an on-the-side vector.\n\t(ipa_check_create_node_params): New function.\n\t(ipa_check_create_edge_args): New function.\n\t\n\t* Makefile.in (IPA_PROP_H): New variable for ipa-prop.h.  Converted\n\tall users.\n\nFrom-SVN: r137620", "tree": {"sha": "e964190c72b31bbe2578ccc7a12321dbf171286e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e964190c72b31bbe2578ccc7a12321dbf171286e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/771578a0df0245565f21186deb58135c3351f3a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/771578a0df0245565f21186deb58135c3351f3a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/771578a0df0245565f21186deb58135c3351f3a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/771578a0df0245565f21186deb58135c3351f3a7/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1349557126e2b625bb3183ccc2d94ab03b22618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1349557126e2b625bb3183ccc2d94ab03b22618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1349557126e2b625bb3183ccc2d94ab03b22618"}], "stats": {"total": 368, "additions": 293, "deletions": 75}, "files": [{"sha": "4a126ecef43452d5dcfaa35c99864d867ad3a66f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/771578a0df0245565f21186deb58135c3351f3a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/771578a0df0245565f21186deb58135c3351f3a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=771578a0df0245565f21186deb58135c3351f3a7", "patch": "@@ -1,3 +1,46 @@\n+2008-07-08  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-cp.c (ipcp_init_cloned_node): Call ipa_check_create_node_params\n+\tinstead of ipa_create_node_params.\n+\t(ipcp_driver): Allocate infos with ipa_check_create_node_params and\n+\tipa_check_create_edge_args, free them with\n+\tfree_all_ipa_structures_after_ipa_cp, call ipa_register_cgraph_hooks.\n+\n+\t* ipa-prop.c: Include flags.h and tree-inline.h.\n+\t(ipa_node_params_vector): New variable.\n+\t(ipa_edge_args_vector): New variable.\n+\t(edge_removal_hook_holder): New variable.\n+\t(node_removal_hook_holder): New variable.\n+\t(edge_duplication_hook_holder): New variable.\n+\t(node_duplication_hook_holder): New variable.\n+\t(ipa_detect_param_modifications): Check for presence of modified flags.\n+\t(ipa_compute_jump_functions): Check for presence of jump functions.\n+\t(ipa_free_edge_args_substructures): New function.\n+\t(ipa_create_node_params): Removed.\n+\t(ipa_free_all_edge_args): Changed to deallocate the on-the-side vector.\n+\t(ipa_free_node_params_substructures): New function.\n+\t(ipa_free_all_node_params): Changed to deallocate the on-the-side\n+\tvector.\n+\t(ipa_edge_removal_hook): New function.\n+\t(ipa_node_removal_hook): New function.\n+\t(duplicate_array): New function.\n+\t(ipa_edge_duplication_hook): New function.\n+\t(ipa_node_duplication_hook): New function.\n+\t(ipa_register_cgraph_hooks): New function.\n+\t(ipa_unregister_cgraph_hooks): New function.\n+\t(free_all_ipa_structures_after_ipa_cp): New function.\n+\t\n+\t* ipa-prop.h: Include vec.h.\n+\t(ipa_node_params_t): New typedef with vector types for it.\n+\t(ipa_edge_args_t):  New typedef with vector types for it.\n+\t(IPA_NODE_REF): Changed to access an on-the-side vector.\n+\t(IPA_EDGE_REF): Changed to access an on-the-side vector.\n+\t(ipa_check_create_node_params): New function.\n+\t(ipa_check_create_edge_args): New function.\n+\t\n+\t* Makefile.in (IPA_PROP_H): New variable for ipa-prop.h.  Converted\n+\tall users.\n+\t\n 2008-07-07  Tom Tromey  <tromey@redhat.com>\n \n \t* configure, config.in: Rebuilt."}, {"sha": "a3def27bd5236ac590c1c0d0c2fe1bc06f933dcc", "filename": "gcc/Makefile.in", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/771578a0df0245565f21186deb58135c3351f3a7/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/771578a0df0245565f21186deb58135c3351f3a7/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=771578a0df0245565f21186deb58135c3351f3a7", "patch": "@@ -839,6 +839,7 @@ TREE_INLINE_H = tree-inline.h $(VARRAY_H) pointer-set.h\n REAL_H = real.h $(MACHMODE_H)\n DBGCNT_H = dbgcnt.h dbgcnt.def\n EBIMAP_H = ebitmap.h sbitmap.h\n+IPA_PROP_H = $(TREE_H) vec.h\n \n #\f\n # Now figure out from those variables how to compile and link.\n@@ -2007,7 +2008,7 @@ tree-inline.o : tree-inline.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(VARRAY_H) $(HASHTAB_H) $(SPLAY_TREE_H) toplev.h \\\n    langhooks.h $(TREE_INLINE_H) $(CGRAPH_H) intl.h $(FUNCTION_H) $(TREE_GIMPLE_H) \\\n    debug.h $(DIAGNOSTIC_H) $(TREE_FLOW_H) tree-iterator.h tree-mudflap.h \\\n-   ipa-prop.h value-prof.h $(TARGET_H) $(INTEGRATE_H)\n+   $(IPA_PROP_H) value-prof.h $(TARGET_H) $(INTEGRATE_H)\n print-tree.o : print-tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(GGC_H) langhooks.h $(REAL_H) tree-iterator.h fixed-value.h $(TREE_FLOW_H)\n stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n@@ -2520,7 +2521,7 @@ cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) toplev.h $(FLAGS_H) $(GGC_H) \\\n    $(TARGET_H) $(CGRAPH_H) intl.h pointer-set.h $(FUNCTION_H) $(TREE_GIMPLE_H) \\\n    $(TREE_FLOW_H) tree-pass.h $(C_COMMON_H) debug.h $(DIAGNOSTIC_H) \\\n-   $(FIBHEAP_H) output.h $(PARAMS_H) $(RTL_H) $(TIMEVAR_H) ipa-prop.h \\\n+   $(FIBHEAP_H) output.h $(PARAMS_H) $(RTL_H) $(TIMEVAR_H) $(IPA_PROP_H) \\\n    gt-cgraphunit.h \n cgraphbuild.o : cgraphbuild.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(CGRAPH_H) intl.h pointer-set.h $(TREE_GIMPLE_H) \\\n@@ -2529,14 +2530,14 @@ varpool.o : varpool.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) toplev.h $(FLAGS_H) $(GGC_H) \\\n    $(TARGET_H) $(CGRAPH_H) intl.h pointer-set.h $(FUNCTION_H) $(TREE_GIMPLE_H) \\\n    $(TREE_FLOW_H) tree-pass.h $(C_COMMON_H) debug.h $(DIAGNOSTIC_H) \\\n-   $(FIBHEAP_H) output.h $(PARAMS_H) $(RTL_H) $(TIMEVAR_H) ipa-prop.h \\\n+   $(FIBHEAP_H) output.h $(PARAMS_H) $(RTL_H) $(TIMEVAR_H) $(IPA_PROP_H) \\\n    gt-varpool.h\n ipa.o : ipa.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(CGRAPH_H)\n ipa-prop.o : ipa-prop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h  \\\n-   langhooks.h $(GGC_H) $(TARGET_H) $(CGRAPH_H) ipa-prop.h \\\n-   $(TREE_FLOW_H) $(TM_H) tree-pass.h $(FLAGS_H) $(TREE_H)\n+   langhooks.h $(GGC_H) $(TARGET_H) $(CGRAPH_H) $(IPA_PROP_H) \\\n+   $(TREE_FLOW_H) $(TM_H) tree-pass.h $(FLAGS_H) $(TREE_H) tree-inline.h\n ipa-cp.o : ipa-cp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h  \\\n-   langhooks.h $(TARGET_H) $(CGRAPH_H) ipa-prop.h tree-inline.h tree-dump.h \\\n+   langhooks.h $(TARGET_H) $(CGRAPH_H) $(IPA_PROP_H) tree-inline.h tree-dump.h \\\n    $(TREE_FLOW_H) $(TM_H) tree-pass.h $(FLAGS_H) $(TREE_H) $(DIAGNOSTIC_H)\n matrix-reorg.o : matrix-reorg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h  \\\n    $(TARGET_H) $(CGRAPH_H) $(TREE_FLOW_H) $(TM_H) tree-pass.h  \\"}, {"sha": "bda0fc261d6b521eb6c8cd0d33e158982b58c7af", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/771578a0df0245565f21186deb58135c3351f3a7/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/771578a0df0245565f21186deb58135c3351f3a7/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=771578a0df0245565f21186deb58135c3351f3a7", "patch": "@@ -153,7 +153,7 @@ static void\n ipcp_init_cloned_node (struct cgraph_node *orig_node,\n \t\t       struct cgraph_node *new_node)\n {\n-  ipa_create_node_params (new_node);\n+  ipa_check_create_node_params ();\n   IPA_NODE_REF (new_node)->ipcp_orig_node = orig_node;\n   ipa_count_formal_params (new_node);\n   ipa_create_param_decls_array (new_node);\n@@ -998,8 +998,9 @@ ipcp_driver (void)\n {\n   if (dump_file)\n     fprintf (dump_file, \"\\nIPA constant propagation start:\\n\");\n-  ipa_create_all_node_params ();\n-  ipa_create_all_edge_args ();\n+  ipa_check_create_node_params ();\n+  ipa_check_create_edge_args ();\n+  ipa_register_cgraph_hooks ();\n   /* 1. Call the init stage to initialize \n      the ipa_node_params and ipa_edge_args structures.  */\n   ipcp_init_stage ();\n@@ -1025,8 +1026,7 @@ ipcp_driver (void)\n       ipcp_print_profile_data (dump_file);\n     }\n   /* Free all IPCP structures.  */\n-  ipa_free_all_node_params ();\n-  ipa_free_all_edge_args ();\n+  free_all_ipa_structures_after_ipa_cp ();\n   if (dump_file)\n     fprintf (dump_file, \"\\nIPA constant propagation end\\n\");\n   cgraph_remove_unreachable_nodes (true, NULL);"}, {"sha": "f67d6579e10c5ce156097a66e1619b8ff4cc948d", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 172, "deletions": 49, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/771578a0df0245565f21186deb58135c3351f3a7/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/771578a0df0245565f21186deb58135c3351f3a7/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=771578a0df0245565f21186deb58135c3351f3a7", "patch": "@@ -28,8 +28,21 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-prop.h\"\n #include \"tree-flow.h\"\n #include \"tree-pass.h\"\n+#include \"tree-inline.h\"\n #include \"flags.h\"\n #include \"timevar.h\"\n+#include \"flags.h\"\n+\n+/* Vector where the parameter infos are actually stored. */\n+VEC (ipa_node_params_t, heap) *ipa_node_params_vector;\n+/* Vector where the parameter infos are actually stored. */\n+VEC (ipa_edge_args_t, heap) *ipa_edge_args_vector;\n+\n+/* Holders of ipa cgraph hooks: */\n+struct cgraph_edge_hook_list *edge_removal_hook_holder;\n+struct cgraph_node_hook_list *node_removal_hook_holder;\n+struct cgraph_2edge_hook_list *edge_duplication_hook_holder;\n+struct cgraph_2node_hook_list *node_duplication_hook_holder;\n \n /* Initialize worklist to contain all functions.  */\n struct ipa_func_list *\n@@ -176,7 +189,7 @@ ipa_detect_param_modifications (struct cgraph_node *mt)\n   tree stmt, parm_tree;\n   struct ipa_node_params *info = IPA_NODE_REF (mt);\n \n-  if (ipa_get_param_count (info) == 0)\n+  if (ipa_get_param_count (info) == 0 || info->modified_flags)\n     return;\n \n   count = ipa_get_param_count (info);\n@@ -244,7 +257,7 @@ ipa_compute_jump_functions (struct cgraph_edge *cs)\n   call_expr_arg_iterator iter;\n   struct ipa_edge_args *args = IPA_EDGE_REF (cs);\n \n-  if (ipa_get_cs_argument_count (args) == 0)\n+  if (ipa_get_cs_argument_count (args) == 0 || args->jump_functions)\n     return;\n   args->jump_functions = XCNEWVEC (struct ipa_jump_func,\n \t\t\t\t   ipa_get_cs_argument_count (args));\n@@ -316,74 +329,184 @@ ipa_compute_jump_functions (struct cgraph_edge *cs)\n     }\n }\n \n-/* Allocate and initialize ipa_node_params structure for the given cgraph\n-   node.  */\n+/* Frees all dynamically allocated structures that the argument info points\n+   to.  */\n void\n-ipa_create_node_params (struct cgraph_node *node)\n+ipa_free_edge_args_substructures (struct ipa_edge_args *args)\n {\n-  node->aux = xcalloc (1, sizeof (struct ipa_node_params));\n+  if (args->jump_functions)\n+    free (args->jump_functions);\n+\n+  memset (args, 0, sizeof (*args));\n }\n \n-/* Allocate and initialize ipa_node_params structure for all\n-   nodes in callgraph.  */\n+/* Free all ipa_edge structures.  */\n void\n-ipa_create_all_node_params (void)\n+ipa_free_all_edge_args (void)\n {\n-  struct cgraph_node *node;\n+  int i;\n+  struct ipa_edge_args *args;\n \n-  for (node = cgraph_nodes; node; node = node->next)\n-    ipa_create_node_params (node);\n+  for (i = 0;\n+       VEC_iterate (ipa_edge_args_t, ipa_edge_args_vector, i, args);\n+       i++)\n+    ipa_free_edge_args_substructures (args);\n+\n+  VEC_free (ipa_edge_args_t, heap, ipa_edge_args_vector);\n+  ipa_edge_args_vector = NULL;\n }\n \n-/* Allocate and initialize ipa_edge structure.  */\n+/* Frees all dynamically allocated structures that the param info points\n+   to.  */\n void\n-ipa_create_all_edge_args (void)\n+ipa_free_node_params_substructures (struct ipa_node_params *info)\n {\n-  struct cgraph_node *node;\n-  struct cgraph_edge *cs;\n-\n-  for (node = cgraph_nodes; node; node = node->next)\n-    for (cs = node->callees; cs; cs = cs->next_callee)\n-      cs->aux = xcalloc (1, sizeof (struct ipa_edge_args));\n+  if (info->ipcp_lattices)\n+    free (info->ipcp_lattices);\n+  if (info->param_decls)\n+    free (info->param_decls);\n+  if (info->modified_flags)\n+    free (info->modified_flags);\n+\n+  memset (info, 0, sizeof (*info));\n }\n \n-/* Free ipa_edge structure.  */\n+/* Free all ipa_node_params structures.  */\n void\n-ipa_free_all_edge_args (void)\n+ipa_free_all_node_params (void)\n {\n-  struct cgraph_node *node;\n-  struct cgraph_edge *cs;\n+  int i;\n+  struct ipa_node_params *info;\n \n-  for (node = cgraph_nodes; node; node = node->next)\n-    for (cs = node->callees; cs; cs = cs->next_callee)\n-      if (cs->aux)\n-\t{\n-\t  if (IPA_EDGE_REF (cs)->jump_functions)\n-\t    free (IPA_EDGE_REF (cs)->jump_functions);\n-\t  free (cs->aux);\n-\t  cs->aux = NULL;\n-\t}\n+  for (i = 0;\n+       VEC_iterate (ipa_node_params_t, ipa_node_params_vector, i, info);\n+       i++)\n+    ipa_free_node_params_substructures (info);\n+\n+  VEC_free (ipa_node_params_t, heap, ipa_node_params_vector);\n+  ipa_node_params_vector = NULL;\n+}\n+\n+/* Hook that is called by cgraph.c when an edge is removed.  */\n+static void\n+ipa_edge_removal_hook (struct cgraph_edge *cs,\n+\t\t       void *data __attribute__ ((unused)))\n+{\n+  ipa_free_edge_args_substructures (IPA_EDGE_REF (cs));\n }\n \n-/* Free ipa data structures of ipa_node_params and ipa_edge_args.  */\n+/* Hook that is called by cgraph.c when a node is removed.  */\n+static void\n+ipa_node_removal_hook (struct cgraph_node *node,\n+\t\t       void *data __attribute__ ((unused)))\n+{\n+  ipa_free_node_params_substructures (IPA_NODE_REF (node));\n+}\n+\n+/* Helper function to duplicate an array of size N that is at SRC and store a\n+   pointer to it to DST.  Nothing is done if SRC is NULL.  */\n+static void *\n+duplicate_array (void *src, size_t n)\n+{\n+  void *p;\n+\n+  if (!src)\n+    return NULL;\n+\n+  p = xcalloc (1, n);\n+  memcpy (p, src, n);\n+  return p;\n+}\n+\n+/* Hook that is called by cgraph.c when a node is duplicated.  */\n+static void\n+ipa_edge_duplication_hook (struct cgraph_edge *src, struct cgraph_edge *dst,\n+\t\t\t   void *data)\n+{\n+  struct ipa_edge_args *old_args, *new_args;\n+  int arg_count;\n+\n+  ipa_check_create_edge_args ();\n+\n+  old_args = IPA_EDGE_REF (src);\n+  new_args = IPA_EDGE_REF (dst);\n+\n+  arg_count = ipa_get_cs_argument_count (old_args);\n+  ipa_set_cs_argument_count (new_args, arg_count);\n+  new_args->jump_functions = (struct ipa_jump_func *)\n+    duplicate_array (old_args->jump_functions,\n+\t\t     sizeof (struct ipa_jump_func) * arg_count);\n+  data = data; \t\t\t/* Suppressing compiler warning.  */\n+}\n+\n+/* Hook that is called by cgraph.c when a node is duplicated.  */\n+static void\n+ipa_node_duplication_hook (struct cgraph_node *src, struct cgraph_node *dst,\n+\t\t\t   void *data)\n+{\n+  struct ipa_node_params *old_info, *new_info;\n+  int param_count;\n+\n+  ipa_check_create_node_params ();\n+  old_info = IPA_NODE_REF (src);\n+  new_info = IPA_NODE_REF (dst);\n+  param_count = ipa_get_param_count (old_info);\n+\n+  ipa_set_param_count (new_info, param_count);\n+  new_info->ipcp_lattices = (struct ipcp_lattice *)\n+    duplicate_array (old_info->ipcp_lattices,\n+\t\t     sizeof (struct ipcp_lattice) * param_count);\n+  new_info->param_decls = (tree *)\n+    duplicate_array (old_info->param_decls, sizeof (tree) * param_count);\n+  new_info->modified_flags = (bool *)\n+    duplicate_array (old_info->modified_flags, sizeof (bool) * param_count);\n+\n+  new_info->ipcp_orig_node = old_info->ipcp_orig_node;\n+  new_info->count_scale = old_info->count_scale;\n+\n+  data = data; \t\t\t/* Suppressing compiler warning.  */\n+}\n+\n+/* Register our cgraph hooks if they are not already there.  */\n void\n-ipa_free_all_node_params (void)\n+ipa_register_cgraph_hooks (void)\n {\n-  struct cgraph_node *node;\n+  if (!edge_removal_hook_holder)\n+    edge_removal_hook_holder =\n+      cgraph_add_edge_removal_hook (&ipa_edge_removal_hook, NULL);\n+  if (!node_removal_hook_holder)\n+    node_removal_hook_holder =\n+      cgraph_add_node_removal_hook (&ipa_node_removal_hook, NULL);\n+  if (!edge_duplication_hook_holder)\n+    edge_duplication_hook_holder =\n+      cgraph_add_edge_duplication_hook (&ipa_edge_duplication_hook, NULL);\n+  if (!node_duplication_hook_holder)\n+    node_duplication_hook_holder =\n+      cgraph_add_node_duplication_hook (&ipa_node_duplication_hook, NULL);\n+}\n \n-  for (node = cgraph_nodes; node; node = node->next)\n-    {\n-      if (node->aux == NULL)\n-\tcontinue;\n-      if (IPA_NODE_REF (node)->ipcp_lattices)\n-\tfree (IPA_NODE_REF (node)->ipcp_lattices);\n-      if (IPA_NODE_REF (node)->param_decls)\n-\tfree (IPA_NODE_REF (node)->param_decls);\n-      if (IPA_NODE_REF (node)->modified_flags)\n-\tfree (IPA_NODE_REF (node)->modified_flags);\n-      free (node->aux);\n-      node->aux = NULL;\n-    }\n+/* Unregister our cgraph hooks if they are not already there.  */\n+static void\n+ipa_unregister_cgraph_hooks (void)\n+{\n+  cgraph_remove_edge_removal_hook (edge_removal_hook_holder);\n+  edge_removal_hook_holder = NULL;\n+  cgraph_remove_node_removal_hook (node_removal_hook_holder);\n+  node_removal_hook_holder = NULL;\n+  cgraph_remove_edge_duplication_hook (edge_duplication_hook_holder);\n+  edge_duplication_hook_holder = NULL;\n+  cgraph_remove_node_duplication_hook (node_duplication_hook_holder);\n+  node_duplication_hook_holder = NULL;\n+}\n+\n+/* Free all ipa_node_params and all ipa_edge_args structures if they are no\n+   longer needed after ipa-cp.  */\n+void\n+free_all_ipa_structures_after_ipa_cp (void)\n+{\n+  ipa_free_all_edge_args ();\n+  ipa_free_all_node_params ();\n+  ipa_unregister_cgraph_hooks ();\n }\n \n /* Print ipa_tree_map data structures of all functions in the"}, {"sha": "e442698bd3a51a4137be2cc0985f34065007d949", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 66, "deletions": 15, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/771578a0df0245565f21186deb58135c3351f3a7/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/771578a0df0245565f21186deb58135c3351f3a7/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=771578a0df0245565f21186deb58135c3351f3a7", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #define IPA_PROP_H\n \n #include \"tree.h\"\n+#include \"vec.h\"\n \n /* The following definitions and interfaces are used by\n    interprocedural analyses.  */\n@@ -100,14 +101,6 @@ struct ipa_replace_map\n   bool ref_p;\n };\n \n-/* Return the field in cgraph_node/cgraph_edge struct that points\n-   to ipa_node_params/ipa_edge_args struct.  */\n-#define IPA_NODE_REF(MT) ((struct ipa_node_params *)(MT)->aux)\n-#define IPA_EDGE_REF(EDGE) ((struct ipa_edge_args *)(EDGE)->aux)\n-/* This macro checks validity of index returned by\n-   ipa_get_param_decl_index function.  */\n-#define IS_VALID_JUMP_FUNC_INDEX(I) ((I) != -1)\n-\n /* ipa_node_params stores information related to formal parameters of functions\n    and some other information for interprocedural passes that operate on\n    parameters (such as ipa-cp).  */\n@@ -229,6 +222,71 @@ ipa_get_ith_jump_func (struct ipa_edge_args *args, int i)\n   return &args->jump_functions[i];\n }\n \n+/* Vectors need to have typedefs of structures.  */\n+typedef struct ipa_node_params ipa_node_params_t;\n+typedef struct ipa_edge_args ipa_edge_args_t;\n+\n+/* Types of vectors hodling the infos.  */\n+DEF_VEC_O (ipa_node_params_t);\n+DEF_VEC_ALLOC_O (ipa_node_params_t, heap);\n+DEF_VEC_O (ipa_edge_args_t);\n+DEF_VEC_ALLOC_O (ipa_edge_args_t, heap);\n+\n+/* Vector where the parameter infos are actually stored. */\n+extern VEC (ipa_node_params_t, heap) *ipa_node_params_vector;\n+/* Vector where the parameter infos are actually stored. */\n+extern VEC (ipa_edge_args_t, heap) *ipa_edge_args_vector;\n+\n+/* Return the associated parameter/argument info corresponding to the given\n+   node/edge.  */\n+#define IPA_NODE_REF(NODE) (VEC_index (ipa_node_params_t, \\\n+\t\t\t\t       ipa_node_params_vector, (NODE)->uid))\n+#define IPA_EDGE_REF(EDGE) (VEC_index (ipa_edge_args_t, \\\n+\t\t\t\t       ipa_edge_args_vector, (EDGE)->uid))\n+/* This macro checks validity of index returned by\n+   ipa_get_param_decl_index function.  */\n+#define IS_VALID_JUMP_FUNC_INDEX(I) ((I) != -1)\n+\n+/* Creating and freeing ipa_node_params and ipa_edge_args.  */\n+void ipa_create_all_node_params (void);\n+void ipa_create_all_edge_args (void);\n+void ipa_free_edge_args_substructures (struct ipa_edge_args *);\n+void ipa_free_node_params_substructures (struct ipa_node_params *);\n+void ipa_free_all_node_params (void);\n+void ipa_free_all_edge_args (void);\n+void free_all_ipa_structures_after_ipa_cp (void);\n+void ipa_register_cgraph_hooks (void);\n+\n+/* This function ensures the array of node param infos is big enough to\n+   accomdate a structure for all nodes and realloacates it if not.  */\n+static inline void\n+ipa_check_create_node_params (void)\n+{\n+  if (!ipa_node_params_vector)\n+    ipa_node_params_vector = VEC_alloc (ipa_node_params_t, heap,\n+\t\t\t\t\tcgraph_max_uid);\n+\n+  if (VEC_length (ipa_node_params_t, ipa_node_params_vector)\n+      <= (unsigned) cgraph_max_uid)\n+    VEC_safe_grow_cleared (ipa_node_params_t, heap,\n+\t\t\t   ipa_node_params_vector, cgraph_max_uid + 1);\n+}\n+\n+/* This function ensures the array of adge arguments infos is big enough to\n+   accomdate a structure for all edges and realloacates it if not.  */\n+static inline void\n+ipa_check_create_edge_args (void)\n+{\n+  if (!ipa_edge_args_vector)\n+    ipa_edge_args_vector = VEC_alloc (ipa_edge_args_t, heap,\n+\t\t\t\t      cgraph_edge_max_uid);\n+\n+  if (VEC_length (ipa_edge_args_t, ipa_edge_args_vector)\n+      <=  (unsigned) cgraph_edge_max_uid)\n+    VEC_safe_grow_cleared (ipa_edge_args_t, heap, ipa_edge_args_vector,\n+\t\t\t   cgraph_edge_max_uid + 1);\n+}\n+\n /* A function list element.  It is used to create a temporary worklist used in\n    the propagation stage of IPCP. (can be used for more IPA optimizations)  */\n struct ipa_func_list\n@@ -251,13 +309,6 @@ void ipa_count_formal_params (struct cgraph_node *);\n void ipa_create_param_decls_array (struct cgraph_node *);\n void ipa_detect_param_modifications (struct cgraph_node *);\n \n-/* Creating and freeing ipa_node_params and ipa_edge_args.  */\n-void ipa_create_node_params (struct cgraph_node *);\n-void ipa_free_all_node_params (void);\n-void ipa_create_all_node_params (void);\n-void ipa_create_all_edge_args (void);\n-void ipa_free_all_edge_args (void);\n-\n /* Debugging interface.  */\n void ipa_print_all_tree_maps (FILE *);\n void ipa_print_all_params_modified (FILE *);"}]}