{"sha": "a3fe41f5c986c9557518bb9b4dc76269568a8af7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNmZTQxZjVjOTg2Yzk1NTc1MThiYjliNGRjNzYyNjk1NjhhOGFmNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-08-06T08:51:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-08-06T08:51:59Z"}, "message": "gimple.h (gimple_call_set_fn): Access op member directly.\n\n2015-08-06  Richard Biener  <rguenther@suse.de>\n\n\t* gimple.h (gimple_call_set_fn): Access op member directly.\n\t(gimple_call_chain_ptr): Likewise.\n\t(gimple_call_set_chain): Likewise.\n\t(gimple_cond_lhs_ptr): Likewise.\n\t(gimple_cond_set_lhs): Likewise.\n\t(gimple_cond_rhs_ptr): Likewise.\n\t(gimple_cond_set_rhs): Likewise.\n\t(gimple_cond_true_label): Likewise.\n\t(gimple_cond_set_true_label): Likewise.\n\t(gimple_cond_set_false_label): Likewise.\n\t(gimple_cond_false_label): Likewise.\n\t(gimple_label_label): Likewise.\n\t(gimple_label_set_label): Likewise.\n\t(gimple_goto_set_dest): Likewise.\n\t(gimple_asm_input_op): Likewise.\n\t(gimple_asm_input_op_ptr): Likewise.\n\t(gimple_asm_set_input_op): Likewise.\n\t(gimple_asm_output_op): Likewise.\n\t(gimple_asm_output_op_ptr): Likewise.\n\t(gimple_asm_set_output_op): Likewise.\n\t(gimple_asm_clobber_op): Likewise.\n\t(gimple_asm_set_clobber_op): Likewise.\n\t(gimple_asm_label_op): Likewise.\n\t(gimple_asm_set_label_op): Likewise.\n\t(gimple_switch_index): Likewise.\n\t(gimple_switch_index_ptr): Likewise.\n\t(gimple_return_retval_ptr): Likewise.\n\t(gimple_return_retval): Likewise.\n\t(gimple_return_set_retval): Likewise.\n\t(gimple_switch_set_index): Likewise.  Remove superfluous GIMPLE_CHECK.\n\t(gimple_switch_label): Likewise.\n\t(gimple_switch_set_label): Likewise.\n\nFrom-SVN: r226669", "tree": {"sha": "e99943a1fdec8fbcf28d21f5a6b0a4df398e5e9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e99943a1fdec8fbcf28d21f5a6b0a4df398e5e9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3fe41f5c986c9557518bb9b4dc76269568a8af7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3fe41f5c986c9557518bb9b4dc76269568a8af7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3fe41f5c986c9557518bb9b4dc76269568a8af7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3fe41f5c986c9557518bb9b4dc76269568a8af7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8861704d23452518ecba127c7fd26faf447f9c71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8861704d23452518ecba127c7fd26faf447f9c71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8861704d23452518ecba127c7fd26faf447f9c71"}], "stats": {"total": 103, "additions": 67, "deletions": 36}, "files": [{"sha": "29d6dcf9f698e42a0fd1075004aadc3af431d975", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3fe41f5c986c9557518bb9b4dc76269568a8af7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3fe41f5c986c9557518bb9b4dc76269568a8af7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3fe41f5c986c9557518bb9b4dc76269568a8af7", "patch": "@@ -1,3 +1,38 @@\n+2015-08-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple.h (gimple_call_set_fn): Access op member directly.\n+\t(gimple_call_chain_ptr): Likewise.\n+\t(gimple_call_set_chain): Likewise.\n+\t(gimple_cond_lhs_ptr): Likewise.\n+\t(gimple_cond_set_lhs): Likewise.\n+\t(gimple_cond_rhs_ptr): Likewise.\n+\t(gimple_cond_set_rhs): Likewise.\n+\t(gimple_cond_true_label): Likewise.\n+\t(gimple_cond_set_true_label): Likewise.\n+\t(gimple_cond_set_false_label): Likewise.\n+\t(gimple_cond_false_label): Likewise.\n+\t(gimple_label_label): Likewise.\n+\t(gimple_label_set_label): Likewise.\n+\t(gimple_goto_set_dest): Likewise.\n+\t(gimple_asm_input_op): Likewise.\n+\t(gimple_asm_input_op_ptr): Likewise.\n+\t(gimple_asm_set_input_op): Likewise.\n+\t(gimple_asm_output_op): Likewise.\n+\t(gimple_asm_output_op_ptr): Likewise.\n+\t(gimple_asm_set_output_op): Likewise.\n+\t(gimple_asm_clobber_op): Likewise.\n+\t(gimple_asm_set_clobber_op): Likewise.\n+\t(gimple_asm_label_op): Likewise.\n+\t(gimple_asm_set_label_op): Likewise.\n+\t(gimple_switch_index): Likewise.\n+\t(gimple_switch_index_ptr): Likewise.\n+\t(gimple_return_retval_ptr): Likewise.\n+\t(gimple_return_retval): Likewise.\n+\t(gimple_return_set_retval): Likewise.\n+\t(gimple_switch_set_index): Likewise.  Remove superfluous GIMPLE_CHECK.\n+\t(gimple_switch_label): Likewise.\n+\t(gimple_switch_set_label): Likewise.\n+\n 2015-08-06  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-fold.c (gimple_fold_stmt_to_constant_1): Simplify"}, {"sha": "200418803af527d20aadd78e9b73236a2c1ea1be", "filename": "gcc/gimple.h", "status": "modified", "additions": 32, "deletions": 36, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3fe41f5c986c9557518bb9b4dc76269568a8af7/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3fe41f5c986c9557518bb9b4dc76269568a8af7/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=a3fe41f5c986c9557518bb9b4dc76269568a8af7", "patch": "@@ -2759,7 +2759,7 @@ static inline void\n gimple_call_set_fn (gcall *gs, tree fn)\n {\n   gcc_gimple_checking_assert (!gimple_call_internal_p (gs));\n-  gimple_set_op (gs, 1, fn);\n+  gs->op[1] = fn;\n }\n \n \n@@ -2828,15 +2828,15 @@ gimple_call_chain (const_gimple gs)\n static inline tree *\n gimple_call_chain_ptr (const gcall *call_stmt)\n {\n-  return gimple_op_ptr (call_stmt, 2);\n+  return const_cast<tree *> (&call_stmt->op[2]);\n }\n \n /* Set CHAIN to be the static chain for call statement CALL_STMT.  */\n \n static inline void\n gimple_call_set_chain (gcall *call_stmt, tree chain)\n {\n-  gimple_set_op (call_stmt, 2, chain);\n+  call_stmt->op[2] = chain;\n }\n \n \n@@ -3101,7 +3101,7 @@ gimple_cond_lhs (const_gimple gs)\n static inline tree *\n gimple_cond_lhs_ptr (const gcond *gs)\n {\n-  return gimple_op_ptr (gs, 0);\n+  return const_cast<tree *> (&gs->op[0]);\n }\n \n /* Set LHS to be the LHS operand of the predicate computed by\n@@ -3110,7 +3110,7 @@ gimple_cond_lhs_ptr (const gcond *gs)\n static inline void\n gimple_cond_set_lhs (gcond *gs, tree lhs)\n {\n-  gimple_set_op (gs, 0, lhs);\n+  gs->op[0] = lhs;\n }\n \n \n@@ -3129,7 +3129,7 @@ gimple_cond_rhs (const_gimple gs)\n static inline tree *\n gimple_cond_rhs_ptr (const gcond *gs)\n {\n-  return gimple_op_ptr (gs, 1);\n+  return const_cast<tree *> (&gs->op[1]);\n }\n \n \n@@ -3139,7 +3139,7 @@ gimple_cond_rhs_ptr (const gcond *gs)\n static inline void\n gimple_cond_set_rhs (gcond *gs, tree rhs)\n {\n-  gimple_set_op (gs, 1, rhs);\n+  gs->op[1] = rhs;\n }\n \n \n@@ -3149,7 +3149,7 @@ gimple_cond_set_rhs (gcond *gs, tree rhs)\n static inline tree\n gimple_cond_true_label (const gcond *gs)\n {\n-  return gimple_op (gs, 2);\n+  return gs->op[2];\n }\n \n \n@@ -3159,7 +3159,7 @@ gimple_cond_true_label (const gcond *gs)\n static inline void\n gimple_cond_set_true_label (gcond *gs, tree label)\n {\n-  gimple_set_op (gs, 2, label);\n+  gs->op[2] = label;\n }\n \n \n@@ -3169,7 +3169,7 @@ gimple_cond_set_true_label (gcond *gs, tree label)\n static inline void\n gimple_cond_set_false_label (gcond *gs, tree label)\n {\n-  gimple_set_op (gs, 3, label);\n+  gs->op[3] = label;\n }\n \n \n@@ -3179,8 +3179,7 @@ gimple_cond_set_false_label (gcond *gs, tree label)\n static inline tree\n gimple_cond_false_label (const gcond *gs)\n {\n-\n-  return gimple_op (gs, 3);\n+  return gs->op[3];\n }\n \n \n@@ -3271,7 +3270,7 @@ gimple_cond_set_condition (gcond *stmt, enum tree_code code, tree lhs,\n static inline tree\n gimple_label_label (const glabel *gs)\n {\n-  return gimple_op (gs, 0);\n+  return gs->op[0];\n }\n \n \n@@ -3281,7 +3280,7 @@ gimple_label_label (const glabel *gs)\n static inline void\n gimple_label_set_label (glabel *gs, tree label)\n {\n-  gimple_set_op (gs, 0, label);\n+  gs->op[0] = label;\n }\n \n \n@@ -3300,7 +3299,7 @@ gimple_goto_dest (const_gimple gs)\n static inline void\n gimple_goto_set_dest (ggoto *gs, tree dest)\n {\n-  gimple_set_op (gs, 0, dest);\n+  gs->op[0] = dest;\n }\n \n \n@@ -3438,7 +3437,7 @@ static inline tree\n gimple_asm_input_op (const gasm *asm_stmt, unsigned index)\n {\n   gcc_gimple_checking_assert (index < asm_stmt->ni);\n-  return gimple_op (asm_stmt, index + asm_stmt->no);\n+  return asm_stmt->op[index + asm_stmt->no];\n }\n \n /* Return a pointer to input operand INDEX of GIMPLE_ASM ASM_STMT.  */\n@@ -3447,7 +3446,7 @@ static inline tree *\n gimple_asm_input_op_ptr (const gasm *asm_stmt, unsigned index)\n {\n   gcc_gimple_checking_assert (index < asm_stmt->ni);\n-  return gimple_op_ptr (asm_stmt, index + asm_stmt->no);\n+  return const_cast<tree *> (&asm_stmt->op[index + asm_stmt->no]);\n }\n \n \n@@ -3458,7 +3457,7 @@ gimple_asm_set_input_op (gasm *asm_stmt, unsigned index, tree in_op)\n {\n   gcc_gimple_checking_assert (index < asm_stmt->ni\n \t\t\t      && TREE_CODE (in_op) == TREE_LIST);\n-  gimple_set_op (asm_stmt, index + asm_stmt->no, in_op);\n+  asm_stmt->op[index + asm_stmt->no] = in_op;\n }\n \n \n@@ -3468,7 +3467,7 @@ static inline tree\n gimple_asm_output_op (const gasm *asm_stmt, unsigned index)\n {\n   gcc_gimple_checking_assert (index < asm_stmt->no);\n-  return gimple_op (asm_stmt, index);\n+  return asm_stmt->op[index];\n }\n \n /* Return a pointer to output operand INDEX of GIMPLE_ASM ASM_STMT.  */\n@@ -3477,7 +3476,7 @@ static inline tree *\n gimple_asm_output_op_ptr (const gasm *asm_stmt, unsigned index)\n {\n   gcc_gimple_checking_assert (index < asm_stmt->no);\n-  return gimple_op_ptr (asm_stmt, index);\n+  return const_cast<tree *> (&asm_stmt->op[index]);\n }\n \n \n@@ -3488,7 +3487,7 @@ gimple_asm_set_output_op (gasm *asm_stmt, unsigned index, tree out_op)\n {\n   gcc_gimple_checking_assert (index < asm_stmt->no\n \t\t\t      && TREE_CODE (out_op) == TREE_LIST);\n-  gimple_set_op (asm_stmt, index, out_op);\n+  asm_stmt->op[index] = out_op;\n }\n \n \n@@ -3498,7 +3497,7 @@ static inline tree\n gimple_asm_clobber_op (const gasm *asm_stmt, unsigned index)\n {\n   gcc_gimple_checking_assert (index < asm_stmt->nc);\n-  return gimple_op (asm_stmt, index + asm_stmt->ni + asm_stmt->no);\n+  return asm_stmt->op[index + asm_stmt->ni + asm_stmt->no];\n }\n \n \n@@ -3509,7 +3508,7 @@ gimple_asm_set_clobber_op (gasm *asm_stmt, unsigned index, tree clobber_op)\n {\n   gcc_gimple_checking_assert (index < asm_stmt->nc\n \t\t\t      && TREE_CODE (clobber_op) == TREE_LIST);\n-  gimple_set_op (asm_stmt, index + asm_stmt->ni + asm_stmt->no, clobber_op);\n+  asm_stmt->op[index + asm_stmt->ni + asm_stmt->no] = clobber_op;\n }\n \n /* Return label operand INDEX of GIMPLE_ASM ASM_STMT.  */\n@@ -3518,7 +3517,7 @@ static inline tree\n gimple_asm_label_op (const gasm *asm_stmt, unsigned index)\n {\n   gcc_gimple_checking_assert (index < asm_stmt->nl);\n-  return gimple_op (asm_stmt, index + asm_stmt->ni + asm_stmt->nc);\n+  return asm_stmt->op[index + asm_stmt->ni + asm_stmt->nc];\n }\n \n /* Set LABEL_OP to be label operand INDEX in GIMPLE_ASM ASM_STMT.  */\n@@ -3528,7 +3527,7 @@ gimple_asm_set_label_op (gasm *asm_stmt, unsigned index, tree label_op)\n {\n   gcc_gimple_checking_assert (index < asm_stmt->nl\n \t\t\t      && TREE_CODE (label_op) == TREE_LIST);\n-  gimple_set_op (asm_stmt, index + asm_stmt->ni + asm_stmt->nc, label_op);\n+  asm_stmt->op[index + asm_stmt->ni + asm_stmt->nc] = label_op;\n }\n \n /* Return the string representing the assembly instruction in\n@@ -4124,7 +4123,7 @@ gimple_switch_set_num_labels (gswitch *g, unsigned nlabels)\n static inline tree\n gimple_switch_index (const gswitch *gs)\n {\n-  return gimple_op (gs, 0);\n+  return gs->op[0];\n }\n \n \n@@ -4133,7 +4132,7 @@ gimple_switch_index (const gswitch *gs)\n static inline tree *\n gimple_switch_index_ptr (const gswitch *gs)\n {\n-  return gimple_op_ptr (gs, 0);\n+  return const_cast<tree *> (&gs->op[0]);\n }\n \n \n@@ -4142,9 +4141,8 @@ gimple_switch_index_ptr (const gswitch *gs)\n static inline void\n gimple_switch_set_index (gswitch *gs, tree index)\n {\n-  GIMPLE_CHECK (gs, GIMPLE_SWITCH);\n   gcc_gimple_checking_assert (SSA_VAR_P (index) || CONSTANT_CLASS_P (index));\n-  gimple_set_op (gs, 0, index);\n+  gs->op[0] = index;\n }\n \n \n@@ -4154,21 +4152,19 @@ gimple_switch_set_index (gswitch *gs, tree index)\n static inline tree\n gimple_switch_label (const gswitch *gs, unsigned index)\n {\n-  GIMPLE_CHECK (gs, GIMPLE_SWITCH);\n   gcc_gimple_checking_assert (gimple_num_ops (gs) > index + 1);\n-  return gimple_op (gs, index + 1);\n+  return gs->op[index + 1];\n }\n \n /* Set the label number INDEX to LABEL.  0 is always the default label.  */\n \n static inline void\n gimple_switch_set_label (gswitch *gs, unsigned index, tree label)\n {\n-  GIMPLE_CHECK (gs, GIMPLE_SWITCH);\n   gcc_gimple_checking_assert (gimple_num_ops (gs) > index + 1\n \t\t\t      && (label == NULL_TREE\n \t\t\t          || TREE_CODE (label) == CASE_LABEL_EXPR));\n-  gimple_set_op (gs, index + 1, label);\n+  gs->op[index + 1] = label;\n }\n \n /* Return the default label for a switch statement.  */\n@@ -5522,15 +5518,15 @@ gimple_transaction_set_subcode (gtransaction *transaction_stmt,\n static inline tree *\n gimple_return_retval_ptr (const greturn *gs)\n {\n-  return gimple_op_ptr (gs, 0);\n+  return const_cast<tree *> (&gs->op[0]);\n }\n \n /* Return the return value for GIMPLE_RETURN GS.  */\n \n static inline tree\n gimple_return_retval (const greturn *gs)\n {\n-  return gimple_op (gs, 0);\n+  return gs->op[0];\n }\n \n \n@@ -5539,7 +5535,7 @@ gimple_return_retval (const greturn *gs)\n static inline void\n gimple_return_set_retval (greturn *gs, tree retval)\n {\n-  gimple_set_op (gs, 0, retval);\n+  gs->op[0] = retval;\n }\n \n "}]}