{"sha": "d9ed2fbdde539392474718ac7783202a49836538", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDllZDJmYmRkZTUzOTM5MjQ3NDcxOGFjNzc4MzIwMmE0OTgzNjUzOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-07-27T12:31:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-07-27T12:31:49Z"}, "message": "tree-into-ssa.c (def_blocks_p): New typedef.\n\n2012-07-27  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-into-ssa.c (def_blocks_p): New typedef.\n\t(insert_phi_nodes_compare_def_blocks): New function.\n\t(insert_phi_nodes): Do not walk over referenced vars, instead\n\twalk over recorded def_blocks, record relevant ones and sort\n\tthem to avoid repeated hashtable lookups.\n\nFrom-SVN: r189912", "tree": {"sha": "a42176b1039f53ea9418c0c2f3959c0d5a9b622b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a42176b1039f53ea9418c0c2f3959c0d5a9b622b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9ed2fbdde539392474718ac7783202a49836538", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ed2fbdde539392474718ac7783202a49836538", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9ed2fbdde539392474718ac7783202a49836538", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ed2fbdde539392474718ac7783202a49836538/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf3791ae4c9d51be572563af5d5cf427d232d5df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3791ae4c9d51be572563af5d5cf427d232d5df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf3791ae4c9d51be572563af5d5cf427d232d5df"}], "stats": {"total": 66, "additions": 39, "deletions": 27}, "files": [{"sha": "04e42f8a123d1b6b1c4c5535c2d86bc801cd8925", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ed2fbdde539392474718ac7783202a49836538/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ed2fbdde539392474718ac7783202a49836538/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9ed2fbdde539392474718ac7783202a49836538", "patch": "@@ -1,3 +1,11 @@\n+2012-07-27  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-into-ssa.c (def_blocks_p): New typedef.\n+\t(insert_phi_nodes_compare_def_blocks): New function.\n+\t(insert_phi_nodes): Do not walk over referenced vars, instead\n+\twalk over recorded def_blocks, record relevant ones and sort\n+\tthem to avoid repeated hashtable lookups.\n+\n 2012-07-27  Richard Guenther  <rguenther@suse.de>\n \n \t* doc/invoke.texi (min-virtual-mappings, virtual-mappings-ratio):"}, {"sha": "37558cbf53707dc04623f163a96e0784b77c7ec0", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ed2fbdde539392474718ac7783202a49836538/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ed2fbdde539392474718ac7783202a49836538/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=d9ed2fbdde539392474718ac7783202a49836538", "patch": "@@ -67,6 +67,11 @@ struct def_blocks_d\n   bitmap livein_blocks;\n };\n \n+typedef struct def_blocks_d *def_blocks_p;\n+\n+DEF_VEC_P(def_blocks_p);\n+DEF_VEC_ALLOC_P(def_blocks_p,heap);\n+\n \n /* Each entry in DEF_BLOCKS contains an element of type STRUCT\n    DEF_BLOCKS_D, mapping a variable VAR to a bitmap describing all the\n@@ -1104,6 +1109,18 @@ insert_phi_nodes_for (tree var, bitmap phi_insertion_points, bool update_p)\n     }\n }\n \n+/* Sort def_blocks after DECL_UID of their var.  */\n+\n+static int\n+insert_phi_nodes_compare_def_blocks (const void *a, const void *b)\n+{\n+  const struct def_blocks_d *defa = *(struct def_blocks_d * const *)a;\n+  const struct def_blocks_d *defb = *(struct def_blocks_d * const *)b;\n+  if (DECL_UID (defa->var) < DECL_UID (defb->var))\n+    return -1;\n+  else\n+    return 1;\n+}\n \n /* Insert PHI nodes at the dominance frontier of blocks with variable\n    definitions.  DFS contains the dominance frontier information for\n@@ -1112,43 +1129,30 @@ insert_phi_nodes_for (tree var, bitmap phi_insertion_points, bool update_p)\n static void\n insert_phi_nodes (bitmap_head *dfs)\n {\n-  referenced_var_iterator rvi;\n-  bitmap_iterator bi;\n-  tree var;\n-  bitmap vars;\n-  unsigned uid;\n+  htab_iterator hi;\n+  unsigned i;\n+  struct def_blocks_d *def_map;\n+  VEC(def_blocks_p,heap) *vars;\n \n   timevar_push (TV_TREE_INSERT_PHI_NODES);\n \n+  vars = VEC_alloc (def_blocks_p, heap, htab_elements (def_blocks));\n+  FOR_EACH_HTAB_ELEMENT (def_blocks, def_map, struct def_blocks_d *, hi)\n+    if (get_phi_state (def_map->var) != NEED_PHI_STATE_NO)\n+      VEC_quick_push (def_blocks_p, vars, def_map);\n+\n   /* Do two stages to avoid code generation differences for UID\n      differences but no UID ordering differences.  */\n+  VEC_qsort (def_blocks_p, vars, insert_phi_nodes_compare_def_blocks);\n \n-  vars = BITMAP_ALLOC (NULL);\n-  FOR_EACH_REFERENCED_VAR (cfun, var, rvi)\n-    {\n-      struct def_blocks_d *def_map;\n-\n-      def_map = find_def_blocks_for (var);\n-      if (def_map == NULL)\n-\tcontinue;\n-\n-      if (get_phi_state (var) != NEED_PHI_STATE_NO)\n-\tbitmap_set_bit (vars, DECL_UID (var));\n-    }\n-\n-  EXECUTE_IF_SET_IN_BITMAP (vars, 0, uid, bi)\n+  FOR_EACH_VEC_ELT (def_blocks_p, vars, i, def_map)\n     {\n-      tree var = referenced_var (uid);\n-      struct def_blocks_d *def_map;\n-      bitmap idf;\n-\n-      def_map = find_def_blocks_for (var);\n-      idf = compute_idf (def_map->def_blocks, dfs);\n-      insert_phi_nodes_for (var, idf, false);\n+      bitmap idf = compute_idf (def_map->def_blocks, dfs);\n+      insert_phi_nodes_for (def_map->var, idf, false);\n       BITMAP_FREE (idf);\n     }\n \n-  BITMAP_FREE (vars);\n+  VEC_free(def_blocks_p, heap, vars);\n \n   timevar_pop (TV_TREE_INSERT_PHI_NODES);\n }"}]}