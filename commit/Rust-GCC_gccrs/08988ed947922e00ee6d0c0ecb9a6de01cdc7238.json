{"sha": "08988ed947922e00ee6d0c0ecb9a6de01cdc7238", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg5ODhlZDk0NzkyMmUwMGVlNmQwYzBlY2I5YTZkZTAxY2RjNzIzOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-10T13:17:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-10T13:17:07Z"}, "message": "[multiple changes]\n\n2013-10-10  Robert Dewar  <dewar@adacore.com>\n\n\t* par-ch6.adb (Check_Junk_Semicolon_Before_Return): Remove\n\tjunk code.\n\n2013-10-10  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch13.adb (Freeze_Entity_Checks): Avoid\n\tloosing errors on CPP entities in -gnatc mode.\n\n2013-10-10  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch5.adb (Analyze_If_Statement): Only diagnose redundant\n\tif from source.\n\n2013-10-10  Robert Dewar  <dewar@adacore.com>\n\n\t* restrict.adb (Check_SPARK_Restriction): Refine test (don't\n\tautomatically go to the original node).\n\t* sem_ch11.adb (Analyze_Raise_Statement): Only raise\n\tstatements that come from source violate SPARK restrictions.\n\t(Analyze_Raise_xxx_Error): Same fix.\n\t* sem_ch3.adb (Analyze_Object_Declaration): Check OK SPARK\n\tinitialization on original node, not on possibly rewritten\n\texpression.\n\t* sem_ch4.adb (Analyze_If_Expression): Only if expressions that\n\tcome from source violate SPARK mode restrictions.\n\n2013-10-10  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Fix confusing documentation for -gnatyM.\n\nFrom-SVN: r203374", "tree": {"sha": "97f38666666d88b403845139074482f4255266f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97f38666666d88b403845139074482f4255266f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08988ed947922e00ee6d0c0ecb9a6de01cdc7238", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08988ed947922e00ee6d0c0ecb9a6de01cdc7238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08988ed947922e00ee6d0c0ecb9a6de01cdc7238", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08988ed947922e00ee6d0c0ecb9a6de01cdc7238/comments", "author": null, "committer": null, "parents": [{"sha": "de6a560804ad384b70a8697fcba8d0dc632e3382", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6a560804ad384b70a8697fcba8d0dc632e3382", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de6a560804ad384b70a8697fcba8d0dc632e3382"}], "stats": {"total": 87, "additions": 74, "deletions": 13}, "files": [{"sha": "434a0723a8f53bd4961e54ed74d801f03f80bee0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08988ed947922e00ee6d0c0ecb9a6de01cdc7238/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08988ed947922e00ee6d0c0ecb9a6de01cdc7238/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=08988ed947922e00ee6d0c0ecb9a6de01cdc7238", "patch": "@@ -1,3 +1,35 @@\n+2013-10-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par-ch6.adb (Check_Junk_Semicolon_Before_Return): Remove\n+\tjunk code.\n+\n+2013-10-10  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch13.adb (Freeze_Entity_Checks): Avoid\n+\tloosing errors on CPP entities in -gnatc mode.\n+\n+2013-10-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_If_Statement): Only diagnose redundant\n+\tif from source.\n+\n+2013-10-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* restrict.adb (Check_SPARK_Restriction): Refine test (don't\n+\tautomatically go to the original node).\n+\t* sem_ch11.adb (Analyze_Raise_Statement): Only raise\n+\tstatements that come from source violate SPARK restrictions.\n+\t(Analyze_Raise_xxx_Error): Same fix.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Check OK SPARK\n+\tinitialization on original node, not on possibly rewritten\n+\texpression.\n+\t* sem_ch4.adb (Analyze_If_Expression): Only if expressions that\n+\tcome from source violate SPARK mode restrictions.\n+\n+2013-10-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Fix confusing documentation for -gnatyM.\n+\n 2013-10-10  Yannick Moy  <moy@adacore.com>\n \n \t* errout.adb (Compilation_Errors): In formal verification mode,"}, {"sha": "2b5049573109d8e135dcacefca3557a4bd1457c4", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08988ed947922e00ee6d0c0ecb9a6de01cdc7238/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08988ed947922e00ee6d0c0ecb9a6de01cdc7238/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=08988ed947922e00ee6d0c0ecb9a6de01cdc7238", "patch": "@@ -19032,7 +19032,8 @@ by @command{gnatstub} to compile an argument source file.\n \n @item ^-gnatyM^/MAX_LINE_LENGTH=^@var{n}\n @cindex @option{^-gnatyM^/MAX_LINE_LENGTH^} (@command{gnatstub})\n-(@var{n} is a non-negative integer). Set the maximum line length in the\n+(@var{n} is a non-negative integer). Set the maximum line length that is\n+allowed in a source file. The default is 79. The maximum value that can be\n body stub to @var{n}; the default is 79. The maximum value that can be\n specified is 32767. Note that in the special case of configuration\n pragma files, the maximum is always 32767 regardless of whether or"}, {"sha": "560cf4c989c5e28ff8f581a95e20c13d01f7eedf", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08988ed947922e00ee6d0c0ecb9a6de01cdc7238/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08988ed947922e00ee6d0c0ecb9a6de01cdc7238/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=08988ed947922e00ee6d0c0ecb9a6de01cdc7238", "patch": "@@ -73,9 +73,6 @@ package body Ch6 is\n          else\n             Restore_Scan_State (Scan_State);\n          end if;\n-\n-      elsif Bad_Spelling_Of (Tok_Return) then\n-         null;\n       end if;\n    end Check_Junk_Semicolon_Before_Return;\n "}, {"sha": "668c4440d8d52a3b5c57ee49d5b6e5d009fbe911", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08988ed947922e00ee6d0c0ecb9a6de01cdc7238/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08988ed947922e00ee6d0c0ecb9a6de01cdc7238/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=08988ed947922e00ee6d0c0ecb9a6de01cdc7238", "patch": "@@ -1406,9 +1406,30 @@ package body Restrict is\n    is\n       Msg_Issued          : Boolean;\n       Save_Error_Msg_Sloc : Source_Ptr;\n+      Onode               : constant Node_Id := Original_Node (N);\n \n    begin\n-      if Force or else Comes_From_Source (Original_Node (N)) then\n+      --  Output message if Force set\n+\n+      if Force\n+\n+        --  Or if this node comes from source\n+\n+        or else Comes_From_Source (N)\n+\n+        --  Or if this is a range node which rewrites a range attribute and\n+        --  the range attribute comes from source.\n+\n+        or else (Nkind (N) = N_Range\n+                  and then Nkind (Onode) = N_Attribute_Reference\n+                  and then Attribute_Name (Onode) = Name_Range\n+                  and then Comes_From_Source (Onode))\n+\n+        --  Or this is an expression that does not come from source, which is\n+        --  a rewriting of an expression that does come from source.\n+\n+        or else (Nkind (N) in N_Subexpr and then Comes_From_Source (Onode))\n+      then\n          if Restriction_Check_Required (SPARK_05)\n            and then Is_In_Hidden_Part_In_SPARK (Sloc (N))\n          then"}, {"sha": "c5b92e202c73f5cc34215159042bed5d6652a361", "filename": "gcc/ada/sem_ch11.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08988ed947922e00ee6d0c0ecb9a6de01cdc7238/gcc%2Fada%2Fsem_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08988ed947922e00ee6d0c0ecb9a6de01cdc7238/gcc%2Fada%2Fsem_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.adb?ref=08988ed947922e00ee6d0c0ecb9a6de01cdc7238", "patch": "@@ -489,7 +489,10 @@ package body Sem_Ch11 is\n       Par            : Node_Id;\n \n    begin\n-      Check_SPARK_Restriction (\"raise statement is not allowed\", N);\n+      if Comes_From_Source (N) then\n+         Check_SPARK_Restriction (\"raise statement is not allowed\", N);\n+      end if;\n+\n       Check_Unreachable_Code (N);\n \n       --  Check exception restrictions on the original source\n@@ -687,7 +690,9 @@ package body Sem_Ch11 is\n    --  Start of processing for Analyze_Raise_xxx_Error\n \n    begin\n-      Check_SPARK_Restriction (\"raise statement is not allowed\", N);\n+      if Nkind (Original_Node (N)) = N_Raise_Statement then\n+         Check_SPARK_Restriction (\"raise statement is not allowed\", N);\n+      end if;\n \n       if No (Etype (N)) then\n          Set_Etype (N, Standard_Void_Type);"}, {"sha": "b059b135587a98d9eb41dfee0552da9a5e8f79b4", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08988ed947922e00ee6d0c0ecb9a6de01cdc7238/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08988ed947922e00ee6d0c0ecb9a6de01cdc7238/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=08988ed947922e00ee6d0c0ecb9a6de01cdc7238", "patch": "@@ -8972,7 +8972,6 @@ package body Sem_Ch13 is\n         and then Is_CPP_Class (E)\n         and then Is_Tagged_Type (E)\n         and then Tagged_Type_Expansion\n-        and then Expander_Active       -- why? losing errors in -gnatc mode???\n       then\n          if CPP_Num_Prims (E) = 0 then\n \n@@ -8981,8 +8980,6 @@ package body Sem_Ch13 is\n             --  has no primitives then the C++ compiler does not added the _tag\n             --  component to the type.\n \n-            pragma Assert (Chars (First_Entity (E)) = Name_uTag);\n-\n             if First_Entity (E) /= Last_Entity (E) then\n                Error_Msg_N\n                  (\"'C'P'P type must import at least one primitive from C++??\","}, {"sha": "0d3cd0f68c8aab1a93a96bacd8053b8eda81add7", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08988ed947922e00ee6d0c0ecb9a6de01cdc7238/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08988ed947922e00ee6d0c0ecb9a6de01cdc7238/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=08988ed947922e00ee6d0c0ecb9a6de01cdc7238", "patch": "@@ -3263,7 +3263,7 @@ package body Sem_Ch3 is\n             end if;\n          end if;\n \n-         --  Check incorrect use of dynamically tagged expressions.\n+         --  Check incorrect use of dynamically tagged expressions\n \n          if Is_Tagged_Type (T) then\n             Check_Dynamically_Tagged_Expression\n@@ -3281,7 +3281,7 @@ package body Sem_Ch3 is\n            --  Only call test if needed\n \n            and then Restriction_Check_Required (SPARK_05)\n-           and then not Is_SPARK_Initialization_Expr (E)\n+           and then not Is_SPARK_Initialization_Expr (Original_Node (E))\n          then\n             Check_SPARK_Restriction\n               (\"initialization expression is not appropriate\", E);"}, {"sha": "06a548a4b7cfb25626f39cd130d3dd17ceefc2a9", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08988ed947922e00ee6d0c0ecb9a6de01cdc7238/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08988ed947922e00ee6d0c0ecb9a6de01cdc7238/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=08988ed947922e00ee6d0c0ecb9a6de01cdc7238", "patch": "@@ -2033,7 +2033,9 @@ package body Sem_Ch4 is\n          return;\n       end if;\n \n-      Check_SPARK_Restriction (\"if expression is not allowed\", N);\n+      if Comes_From_Source (N) then\n+         Check_SPARK_Restriction (\"if expression is not allowed\", N);\n+      end if;\n \n       Else_Expr := Next (Then_Expr);\n "}, {"sha": "a29aece272c84efbd2ef7e9b4efeecf945d8172b", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08988ed947922e00ee6d0c0ecb9a6de01cdc7238/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08988ed947922e00ee6d0c0ecb9a6de01cdc7238/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=08988ed947922e00ee6d0c0ecb9a6de01cdc7238", "patch": "@@ -1580,8 +1580,14 @@ package body Sem_Ch5 is\n \n       --  Warn on redundant if statement that has no effect\n \n+      --  Note, we could also check empty ELSIF parts ???\n+\n       if Warn_On_Redundant_Constructs\n \n+        --  If statement must be from source\n+\n+        and then Comes_From_Source (N)\n+\n         --  Condition must not have obvious side effect\n \n         and then Has_No_Obvious_Side_Effects (Condition (N))"}]}