{"sha": "915182a087847bbb0778bf351b5154fa2a83a13c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE1MTgyYTA4Nzg0N2JiYjA3NzhiZjM1MWI1MTU0ZmEyYTgzYTEzYw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2014-03-04T02:56:57Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-03-04T02:56:57Z"}, "message": "go-gcc.cc (Gcc_backend::immutable_struct): If IS_COMMON, set DECL_WEAK.\n\n\t* go-gcc.cc (Gcc_backend::immutable_struct): If IS_COMMON, set\n\tDECL_WEAK.\n\t(GCC_backend::immutable_struct_set_init): If IS_COMMON, clear\n\tDECL_WEAK.\n\nFrom-SVN: r208301", "tree": {"sha": "3d76438411d2c629f888bbf61a1663a360d0866a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d76438411d2c629f888bbf61a1663a360d0866a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/915182a087847bbb0778bf351b5154fa2a83a13c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/915182a087847bbb0778bf351b5154fa2a83a13c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/915182a087847bbb0778bf351b5154fa2a83a13c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/915182a087847bbb0778bf351b5154fa2a83a13c/comments", "author": null, "committer": null, "parents": [{"sha": "9b1a9494e5a97bd4caf5a5d24e9ddf07bf6754af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b1a9494e5a97bd4caf5a5d24e9ddf07bf6754af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b1a9494e5a97bd4caf5a5d24e9ddf07bf6754af"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "689578e2064608342b4c24ca0e21a854f3cf5364", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/915182a087847bbb0778bf351b5154fa2a83a13c/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/915182a087847bbb0778bf351b5154fa2a83a13c/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=915182a087847bbb0778bf351b5154fa2a83a13c", "patch": "@@ -1,3 +1,10 @@\n+2014-03-03  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go-gcc.cc (Gcc_backend::immutable_struct): If IS_COMMON, set\n+\tDECL_WEAK.\n+\t(GCC_backend::immutable_struct_set_init): If IS_COMMON, clear\n+\tDECL_WEAK.\n+\n 2014-01-24  Chris Manghane  <cmang@google.com>\n \n \t* go-gcc.cc (Gcc_backend::unary_expression): New function."}, {"sha": "6aec2877d7b450e5287d5da9c1844d2d1f72c0a4", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/915182a087847bbb0778bf351b5154fa2a83a13c/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/915182a087847bbb0778bf351b5154fa2a83a13c/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=915182a087847bbb0778bf351b5154fa2a83a13c", "patch": "@@ -1871,7 +1871,7 @@ Gcc_backend::temporary_variable(Bfunction* function, Bblock* bblock,\n \n Bvariable*\n Gcc_backend::immutable_struct(const std::string& name, bool is_hidden,\n-\t\t\t      bool, Btype* btype, Location location)\n+\t\t\t      bool is_common, Btype* btype, Location location)\n {\n   tree type_tree = btype->get_tree();\n   if (type_tree == error_mark_node)\n@@ -1888,6 +1888,21 @@ Gcc_backend::immutable_struct(const std::string& name, bool is_hidden,\n   if (!is_hidden)\n     TREE_PUBLIC(decl) = 1;\n \n+  // When the initializer for one immutable_struct refers to another,\n+  // it needs to know the visibility of the referenced struct so that\n+  // compute_reloc_for_constant will return the right value.  On many\n+  // systems calling make_decl_one_only will mark the decl as weak,\n+  // which will change the return value of compute_reloc_for_constant.\n+  // We can't reliably call make_decl_one_only yet, because we don't\n+  // yet know the initializer.  This issue doesn't arise in C because\n+  // Go initializers, unlike C initializers, can be indirectly\n+  // recursive.  To ensure that compute_reloc_for_constant computes\n+  // the right value if some other initializer refers to this one, we\n+  // mark this symbol as weak here.  We undo that below in\n+  // immutable_struct_set_init before calling mark_decl_one_only.\n+  if (is_common)\n+    DECL_WEAK(decl) = 1;\n+\n   // We don't call rest_of_decl_compilation until we have the\n   // initializer.\n \n@@ -1910,9 +1925,13 @@ Gcc_backend::immutable_struct_set_init(Bvariable* var, const std::string&,\n \n   DECL_INITIAL(decl) = init_tree;\n \n-  // We can't call make_decl_one_only until we set DECL_INITIAL.\n+  // Now that DECL_INITIAL is set, we can't call make_decl_one_only.\n+  // See the comment where DECL_WEAK is set in immutable_struct.\n   if (is_common)\n-    make_decl_one_only(decl, DECL_ASSEMBLER_NAME(decl));\n+    {\n+      DECL_WEAK(decl) = 0;\n+      make_decl_one_only(decl, DECL_ASSEMBLER_NAME(decl));\n+    }\n \n   // These variables are often unneeded in the final program, so put\n   // them in their own section so that linker GC can discard them."}]}