{"sha": "dba1ab212292839572fda60df00965e094a11252", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJhMWFiMjEyMjkyODM5NTcyZmRhNjBkZjAwOTY1ZTA5NGExMTI1Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-02T14:29:22Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-02T17:21:23Z"}, "message": "libstdc++: Remove \"no stronger\" assertion in compare exchange [PR102177]\n\nP0418R2 removed some preconditions from std::atomic::compare_exchange_*\nbut we still enforce them via __glibcxx_assert. This removes those\nassertions.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR c++/102177\n\t* include/bits/atomic_base.h (__is_valid_cmpexch_failure_order):\n\tNew function to check if a memory order is valid for the failure\n\tcase of compare exchange operations.\n\t(__atomic_base<I>::compare_exchange_weak): Simplify assertions\n\tby using __is_valid_cmpexch_failure_order.\n\t(__atomic_base<I>::compare_exchange_strong): Likewise.\n\t(__atomic_base<P*>::compare_exchange_weak): Likewise.\n\t(__atomic_base<P*>::compare_exchange_strong): Likewise.\n\t(__atomic_impl::compare_exchange_weak): Add assertion.\n\t(__atomic_impl::compare_exchange_strong): Likewise.\n\t* include/std/atomic (atomic::compare_exchange_weak): Likewise.\n\t(atomic::compare_exchange_strong): Likewise.", "tree": {"sha": "9d292593d984ed632dcf59597340339bdee601a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d292593d984ed632dcf59597340339bdee601a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dba1ab212292839572fda60df00965e094a11252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dba1ab212292839572fda60df00965e094a11252", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dba1ab212292839572fda60df00965e094a11252", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dba1ab212292839572fda60df00965e094a11252/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b73abd1a5f44f72e36bc7aefd423816083291ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b73abd1a5f44f72e36bc7aefd423816083291ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b73abd1a5f44f72e36bc7aefd423816083291ea"}], "stats": {"total": 69, "additions": 25, "deletions": 44}, "files": [{"sha": "cbe1da6d12583f4f137909ca1f0f9e8cac196b4a", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 17, "deletions": 44, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dba1ab212292839572fda60df00965e094a11252/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dba1ab212292839572fda60df00965e094a11252/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=dba1ab212292839572fda60df00965e094a11252", "patch": "@@ -121,6 +121,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       | __memory_order_modifier(__m & __memory_order_modifier_mask));\n   }\n \n+  constexpr bool\n+  __is_valid_cmpexch_failure_order(memory_order __m) noexcept\n+  {\n+    return (__m & __memory_order_mask) != memory_order_release\n+\t&& (__m & __memory_order_mask) != memory_order_acq_rel;\n+  }\n+\n   _GLIBCXX_ALWAYS_INLINE void\n   atomic_thread_fence(memory_order __m) noexcept\n   { __atomic_thread_fence(int(__m)); }\n@@ -511,13 +518,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       compare_exchange_weak(__int_type& __i1, __int_type __i2,\n \t\t\t    memory_order __m1, memory_order __m2) noexcept\n       {\n-\tmemory_order __b2 __attribute__ ((__unused__))\n-\t  = __m2 & __memory_order_mask;\n-\tmemory_order __b1 __attribute__ ((__unused__))\n-\t  = __m1 & __memory_order_mask;\n-\t__glibcxx_assert(__b2 != memory_order_release);\n-\t__glibcxx_assert(__b2 != memory_order_acq_rel);\n-\t__glibcxx_assert(__b2 <= __b1);\n+\t__glibcxx_assert(__is_valid_cmpexch_failure_order(__m2));\n \n \treturn __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1,\n \t\t\t\t\t   int(__m1), int(__m2));\n@@ -528,13 +529,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t    memory_order __m1,\n \t\t\t    memory_order __m2) volatile noexcept\n       {\n-\tmemory_order __b2 __attribute__ ((__unused__))\n-\t  = __m2 & __memory_order_mask;\n-\tmemory_order __b1 __attribute__ ((__unused__))\n-\t  = __m1 & __memory_order_mask;\n-\t__glibcxx_assert(__b2 != memory_order_release);\n-\t__glibcxx_assert(__b2 != memory_order_acq_rel);\n-\t__glibcxx_assert(__b2 <= __b1);\n+\t__glibcxx_assert(__is_valid_cmpexch_failure_order(__m2));\n \n \treturn __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1,\n \t\t\t\t\t   int(__m1), int(__m2));\n@@ -560,13 +555,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       compare_exchange_strong(__int_type& __i1, __int_type __i2,\n \t\t\t      memory_order __m1, memory_order __m2) noexcept\n       {\n-\tmemory_order __b2 __attribute__ ((__unused__))\n-\t  = __m2 & __memory_order_mask;\n-\tmemory_order __b1 __attribute__ ((__unused__))\n-\t  = __m1 & __memory_order_mask;\n-\t__glibcxx_assert(__b2 != memory_order_release);\n-\t__glibcxx_assert(__b2 != memory_order_acq_rel);\n-\t__glibcxx_assert(__b2 <= __b1);\n+\t__glibcxx_assert(__is_valid_cmpexch_failure_order(__m2));\n \n \treturn __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0,\n \t\t\t\t\t   int(__m1), int(__m2));\n@@ -577,14 +566,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t      memory_order __m1,\n \t\t\t      memory_order __m2) volatile noexcept\n       {\n-\tmemory_order __b2 __attribute__ ((__unused__))\n-\t  = __m2 & __memory_order_mask;\n-\tmemory_order __b1 __attribute__ ((__unused__))\n-\t  = __m1 & __memory_order_mask;\n-\n-\t__glibcxx_assert(__b2 != memory_order_release);\n-\t__glibcxx_assert(__b2 != memory_order_acq_rel);\n-\t__glibcxx_assert(__b2 <= __b1);\n+\t__glibcxx_assert(__is_valid_cmpexch_failure_order(__m2));\n \n \treturn __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0,\n \t\t\t\t\t   int(__m1), int(__m2));\n@@ -869,13 +851,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t      memory_order __m1,\n \t\t\t      memory_order __m2) noexcept\n       {\n-\tmemory_order __b2 __attribute__ ((__unused__))\n-\t  = __m2 & __memory_order_mask;\n-\tmemory_order __b1 __attribute__ ((__unused__))\n-\t  = __m1 & __memory_order_mask;\n-\t__glibcxx_assert(__b2 != memory_order_release);\n-\t__glibcxx_assert(__b2 != memory_order_acq_rel);\n-\t__glibcxx_assert(__b2 <= __b1);\n+\t__glibcxx_assert(__is_valid_cmpexch_failure_order(__m2));\n \n \treturn __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0,\n \t\t\t\t\t   int(__m1), int(__m2));\n@@ -886,14 +862,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t      memory_order __m1,\n \t\t\t      memory_order __m2) volatile noexcept\n       {\n-\tmemory_order __b2 __attribute__ ((__unused__))\n-\t  = __m2 & __memory_order_mask;\n-\tmemory_order __b1 __attribute__ ((__unused__))\n-\t  = __m1 & __memory_order_mask;\n-\n-\t__glibcxx_assert(__b2 != memory_order_release);\n-\t__glibcxx_assert(__b2 != memory_order_acq_rel);\n-\t__glibcxx_assert(__b2 <= __b1);\n+\t__glibcxx_assert(__is_valid_cmpexch_failure_order(__m2));\n \n \treturn __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0,\n \t\t\t\t\t   int(__m1), int(__m2));\n@@ -996,6 +965,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t    _Val<_Tp> __desired, memory_order __success,\n \t\t\t    memory_order __failure) noexcept\n       {\n+\t__glibcxx_assert(__is_valid_cmpexch_failure_order(__failure));\n+\n \treturn __atomic_compare_exchange(__ptr, std::__addressof(__expected),\n \t\t\t\t\t std::__addressof(__desired), true,\n \t\t\t\t\t int(__success), int(__failure));\n@@ -1007,6 +978,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t      _Val<_Tp> __desired, memory_order __success,\n \t\t\t      memory_order __failure) noexcept\n       {\n+\t__glibcxx_assert(__is_valid_cmpexch_failure_order(__failure));\n+\n \treturn __atomic_compare_exchange(__ptr, std::__addressof(__expected),\n \t\t\t\t\t std::__addressof(__desired), false,\n \t\t\t\t\t int(__success), int(__failure));"}, {"sha": "b395c65d468790e4df9bc5a32017517b20f52cf3", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dba1ab212292839572fda60df00965e094a11252/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dba1ab212292839572fda60df00965e094a11252/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=dba1ab212292839572fda60df00965e094a11252", "patch": "@@ -320,6 +320,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s,\n \t\t\t    memory_order __f) noexcept\n       {\n+\t__glibcxx_assert(__is_valid_cmpexch_failure_order(__f));\n+\n \treturn __atomic_compare_exchange(std::__addressof(_M_i),\n \t\t\t\t\t std::__addressof(__e),\n \t\t\t\t\t std::__addressof(__i),\n@@ -330,6 +332,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s,\n \t\t\t    memory_order __f) volatile noexcept\n       {\n+\t__glibcxx_assert(__is_valid_cmpexch_failure_order(__f));\n+\n \treturn __atomic_compare_exchange(std::__addressof(_M_i),\n \t\t\t\t\t std::__addressof(__e),\n \t\t\t\t\t std::__addressof(__i),\n@@ -352,6 +356,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,\n \t\t\t      memory_order __f) noexcept\n       {\n+\t__glibcxx_assert(__is_valid_cmpexch_failure_order(__f));\n+\n \treturn __atomic_compare_exchange(std::__addressof(_M_i),\n \t\t\t\t\t std::__addressof(__e),\n \t\t\t\t\t std::__addressof(__i),\n@@ -362,6 +368,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,\n \t\t\t      memory_order __f) volatile noexcept\n       {\n+\t__glibcxx_assert(__is_valid_cmpexch_failure_order(__f));\n+\n \treturn __atomic_compare_exchange(std::__addressof(_M_i),\n \t\t\t\t\t std::__addressof(__e),\n \t\t\t\t\t std::__addressof(__i),"}]}