{"sha": "5f77d6cc515e09e0be234bbc2d7c5268a4301ad4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY3N2Q2Y2M1MTVlMDllMGJlMjM0YmJjMmQ3YzUyNjhhNDMwMWFkNA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "1999-09-17T01:49:29Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "1999-09-17T01:49:29Z"}, "message": "error.c: Reduce code duplication.\n\n1999-09-17  Gabriel Dos Reis  <gdr@codesourcery.com>\n\n        * error.c: Reduce code duplication.\n        (dump_template_value): New function.\n        (dump_type_real): Use it.\n        (dump_decl): Likewise.\n        (dump_function_name): Likewise.\n        (dump_function_decl): Don't be too talkative about function return\n        type variety.\n\nFrom-SVN: r29469", "tree": {"sha": "6fa819a8de4455069fbc273f2e0b99acd1bd2e3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fa819a8de4455069fbc273f2e0b99acd1bd2e3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f77d6cc515e09e0be234bbc2d7c5268a4301ad4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f77d6cc515e09e0be234bbc2d7c5268a4301ad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f77d6cc515e09e0be234bbc2d7c5268a4301ad4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f77d6cc515e09e0be234bbc2d7c5268a4301ad4/comments", "author": null, "committer": null, "parents": [{"sha": "51925d8a2ab8562fa195eb84cf2f688b6195d7a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51925d8a2ab8562fa195eb84cf2f688b6195d7a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51925d8a2ab8562fa195eb84cf2f688b6195d7a3"}], "stats": {"total": 49, "additions": 23, "deletions": 26}, "files": [{"sha": "7f268ac98a767bb92c11e0ad113806d684142eaf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f77d6cc515e09e0be234bbc2d7c5268a4301ad4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f77d6cc515e09e0be234bbc2d7c5268a4301ad4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5f77d6cc515e09e0be234bbc2d7c5268a4301ad4", "patch": "@@ -1,3 +1,4 @@\n+\n 1999-09-16  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (saved_scope_p): New fn."}, {"sha": "5bf5f0fbd774e943bbdaa7fe2ec3b5440e99e736", "filename": "gcc/cp/error.c", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f77d6cc515e09e0be234bbc2d7c5268a4301ad4/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f77d6cc515e09e0be234bbc2d7c5268a4301ad4/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=5f77d6cc515e09e0be234bbc2d7c5268a4301ad4", "patch": "@@ -116,6 +116,7 @@ static void dump_exception_spec PROTO((tree, int));\n static const char *aggr_variety PROTO((tree));\n static tree ident_fndecl PROTO((tree));\n static int interesting_scope_p PROTO((tree));\n+static void dump_template_value PROTO((tree, int, int));\n \n void\n init_error ()\n@@ -187,6 +188,22 @@ dump_qualifiers (t, p)\n    value.  */\n static char digit_buffer[128];\n \n+/* Dump a template parameter or template argument VALUE at VERBOSITY\n+   level.  The boolean CANONICAL_NAME indicates whether to dump abstract\n+   names, e.g. typedefs, or not. */\n+\n+static void\n+dump_template_value (value, verbosity, canonical_name)\n+     tree value;\n+     int verbosity, canonical_name;\n+{\n+  if (TREE_CODE_CLASS (TREE_CODE (value)) == 't'\n+      || TREE_CODE (value) == TEMPLATE_DECL)\n+    dump_type_real (value, verbosity, canonical_name);\n+  else\n+    dump_expr (value, verbosity);\n+}\n+\n /* Dump into the obstack a human-readable equivalent of TYPE.  */\n \n static void\n@@ -282,12 +299,7 @@ dump_type_real (t, v, canonical_name)\n \t  OB_PUTC ('<');\n \t  for (i = 0; i < TREE_VEC_LENGTH (args); i++)\n \t    {\n-\t      tree arg = TREE_VEC_ELT (args, i);\n-\t      if (TREE_CODE_CLASS (TREE_CODE (arg)) == 't'\n-\t\t  || TREE_CODE (arg) == TEMPLATE_DECL)\n-\t        dump_type_real (arg, 0, canonical_name);\n-\t      else\n-\t        dump_expr (arg, 0);\n+              dump_template_value (TREE_VEC_ELT (args, i), 0, canonical_name);\n \t      if (i < TREE_VEC_LENGTH (args)-1)\n \t        OB_PUTC2 (',', ' ');\n \t    }\n@@ -895,11 +907,7 @@ dump_decl (t, v)\n \tOB_PUTC ('<');\n \tfor (args = TREE_OPERAND (t, 1); args; args = TREE_CHAIN (args))\n \t  {\n-\t    if (TREE_CODE_CLASS (TREE_CODE (TREE_VALUE (args))) == 't'\n-\t\t|| TREE_CODE (TREE_VALUE (args)) == TEMPLATE_DECL)\n-\t      dump_type (TREE_VALUE (args), 0);\n-\t    else\n-\t      dump_expr (TREE_VALUE (args), 0);\n+            dump_template_value (TREE_VALUE (args), 0, 0);\n \t    if (TREE_CHAIN (args))\n \t      OB_PUTC2 (',', ' ');\n \t  }\n@@ -985,7 +993,7 @@ dump_function_decl (t, v)\n \t  && ! DECL_CONSTRUCTOR_P (t)\n \t  && ! DECL_DESTRUCTOR_P (t))\n \t{\n-\t  dump_type_prefix (TREE_TYPE (fntype), 1, 0);\n+\t  dump_type_prefix (TREE_TYPE (fntype), 0, 0);\n \t  OB_PUTC (' ');\n \t}\n     }\n@@ -1149,13 +1157,7 @@ dump_function_name (t)\n \t\t    OB_PUTS (\", \");\n \t\t  \n \t\t  if (a)\n-\t\t    {\n-\t\t      if (TREE_CODE_CLASS (TREE_CODE (a)) == 't'\n-\t\t\t  || TREE_CODE (a) == TEMPLATE_DECL)\n-\t\t\tdump_type (a, 0);\n-\t\t      else\n-\t\t\tdump_expr (a, 0);\n-\t\t    }\n+                    dump_template_value (a, 0, 0);\n \t\t  \n \t\t  need_comma = 1;\n \t\t}\n@@ -1178,13 +1180,7 @@ dump_function_name (t)\n \t\t    OB_PUTS (\", \");\n \t\t  \n \t\t  if (a)\n-\t\t    {\n-\t\t      if (TREE_CODE_CLASS (TREE_CODE (a)) == 't'\n-\t\t\t  || TREE_CODE (a) == TEMPLATE_DECL)\n-\t\t\tdump_type (a, 0);\n-\t\t      else\n-\t\t\tdump_expr (a, 0);\n-\t\t    }\n+                    dump_template_value (a, 0, 0);\n \t\t  \n \t\t  need_comma = 1;\n \t\t}"}]}