{"sha": "b7359edc20cae432bb68f5f897ba485f34de6f9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjczNTllZGMyMGNhZTQzMmJiNjhmNWY4OTdiYTQ4NWYzNGRlNmY5YQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-10-16T12:21:29Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-10-16T12:21:29Z"}, "message": "re PR target/59401 ([SH] GBR addressing mode optimization produces wrong code)\n\ngcc/\n\tPR target/59401\n\t* config/sh/sh.h (CALL_REALLY_USED_REGISTERS): Expand macro and set\n\tGBR to 0.\n\nFrom-SVN: r216314", "tree": {"sha": "3f5a0d00cca9c6b7ceb9f5c24fc98618b9c718c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f5a0d00cca9c6b7ceb9f5c24fc98618b9c718c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7359edc20cae432bb68f5f897ba485f34de6f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7359edc20cae432bb68f5f897ba485f34de6f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7359edc20cae432bb68f5f897ba485f34de6f9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7359edc20cae432bb68f5f897ba485f34de6f9a/comments", "author": null, "committer": null, "parents": [{"sha": "6c0975accd61fa7255fff43ed8fc7bd921f9b9ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c0975accd61fa7255fff43ed8fc7bd921f9b9ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c0975accd61fa7255fff43ed8fc7bd921f9b9ae"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "94256676d1b67e8b46f58c177602eae82f144e52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7359edc20cae432bb68f5f897ba485f34de6f9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7359edc20cae432bb68f5f897ba485f34de6f9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7359edc20cae432bb68f5f897ba485f34de6f9a", "patch": "@@ -1,3 +1,9 @@\n+2014-10-16  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/59401\n+\t* config/sh/sh.h (CALL_REALLY_USED_REGISTERS): Expand macro and set\n+\tGBR to 0.\n+\n 2014-10-16  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "5b8b4a1939cbbdce386d9954a85a33613d272a7c", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7359edc20cae432bb68f5f897ba485f34de6f9a/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7359edc20cae432bb68f5f897ba485f34de6f9a/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=b7359edc20cae432bb68f5f897ba485f34de6f9a", "patch": "@@ -821,9 +821,42 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n   1,      1,      1,      1,\t\t\t\t\t\t\\\n }\n \n-/* TARGET_CONDITIONAL_REGISTER_USAGE might want to make a register\n-   call-used, yet fixed, like PIC_OFFSET_TABLE_REGNUM.  */\n-#define CALL_REALLY_USED_REGISTERS CALL_USED_REGISTERS\n+/* CALL_REALLY_USED_REGISTERS is used as a default setting, which is then\n+   overridden by -fcall-saved-* and -fcall-used-* options and then by\n+   TARGET_CONDITIONAL_REGISTER_USAGE.  There we might want to make a\n+   register call-used, yet fixed, like PIC_OFFSET_TABLE_REGNUM.  */\n+#define CALL_REALLY_USED_REGISTERS \t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+/* Regular registers.  */\t\t\t\t\t\t\\\n+  1,      1,      1,      1,      1,      1,      1,      1,\t\t\\\n+  /* R8 and R9 are call-clobbered on SH5, but not on earlier SH ABIs.\t\\\n+     Only the lower 32bits of R10-R14 are guaranteed to be preserved\t\\\n+     across SH5 function calls.  */\t\t\t\t\t\\\n+  0,      0,      0,      0,      0,      0,      0,      1,\t\t\\\n+  1,      1,      1,      1,      1,      1,      1,      1,\t\t\\\n+  1,      1,      1,      1,      0,      0,      0,      0,\t\t\\\n+  0,      0,      0,      0,      1,      1,      1,      1,\t\t\\\n+  1,      1,      1,      1,      0,      0,      0,      0,\t\t\\\n+  0,      0,      0,      0,      0,      0,      0,      0,\t\t\\\n+  0,      0,      0,      0,      1,      1,      1,      1,\t\t\\\n+/* FP registers.  */\t\t\t\t\t\t\t\\\n+  1,      1,      1,      1,      1,      1,      1,      1,\t\t\\\n+  1,      1,      1,      1,      0,      0,      0,      0,\t\t\\\n+  1,      1,      1,      1,      1,      1,      1,      1,\t\t\\\n+  1,      1,      1,      1,      1,      1,      1,      1,\t\t\\\n+  1,      1,      1,      1,      0,      0,      0,      0,\t\t\\\n+  0,      0,      0,      0,      0,      0,      0,      0,\t\t\\\n+  0,      0,      0,      0,      0,      0,      0,      0,\t\t\\\n+  0,      0,      0,      0,      0,      0,      0,      0,\t\t\\\n+/* Branch target registers.  */\t\t\t\t\t\t\\\n+  1,      1,      1,      1,      1,      0,      0,      0,\t\t\\\n+/* XD registers.  */\t\t\t\t\t\t\t\\\n+  1,      1,      1,      1,      1,      1,      0,      0,\t\t\\\n+/*\"gbr\",  \"ap\",\t  \"pr\",   \"t\",    \"mach\", \"macl\", \"fpul\", \"fpscr\", */\t\\\n+  0,      1,      1,      1,      1,      1,      1,      1,\t\t\\\n+/*\"rap\",  \"sfp\",\"fpscr0\",\"fpscr1\"  */\t\t\t\t\t\\\n+  1,      1,      0,      0,\t\t\t\t\t\t\\\n+}\n \n /* Only the lower 32-bits of R10-R14 are guaranteed to be preserved\n    across SHcompact function calls.  We can't tell whether a called"}]}