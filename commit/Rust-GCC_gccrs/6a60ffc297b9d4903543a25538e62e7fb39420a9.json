{"sha": "6a60ffc297b9d4903543a25538e62e7fb39420a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE2MGZmYzI5N2I5ZDQ5MDM1NDNhMjU1MzhlNjJlN2ZiMzk0MjBhOQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-04-01T14:42:43Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-04-01T21:04:15Z"}, "message": "c++: GC collects live data when synthesizing operator== [PR99831]\n\nHere we crash in reshape_init because we're accessing ggc_freed\n& poisoned data: since r277865 in defaulted_late_check we call\nsynthesize_method here:\n\n  if (kind == sfk_comparison)\n    {\n      /* If the function was declared constexpr, check that the definition\n         qualifies.  Otherwise we can define the function lazily.  */\n      if (DECL_DECLARED_CONSTEXPR_P (fn) && !DECL_INITIAL (fn))\n        synthesize_method (fn);\n      return;\n    }\n\nwhich in this test triggers when we're processing the string<\"a\">{} in\nthe static_assert.  First, we create a CONSTRUCTOR for the \"{}\" in\ncp_parser_functional_cast, then we call finish_compound_literal which\ncalls complete_type and that results in garbage collection, which then\nfrees the CONSTRUCTOR {} we created when parsing the braced-list in\nstring<\"a\">{} -- at this point, it's not referenced by anything.\n(That's not the case for 'type' in finish_compound_literal: the symbol\ntable contains a node for operator==, so ggc_mark_roots goes and marks\nthe fn decl, its type, its arguments etc., as used, so we don't collect\nit.)\n\nWe could just bump function_depth around the new call to synthesize_method\nto prevent GC.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99831\n\t* method.c (defaulted_late_check): ++ and -- function_depth around\n\tthe call to synthesize_method.\n\t* pt.c: Remove the saved_trees global.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99831\n\t* g++.dg/other/gc6.C: New test.", "tree": {"sha": "db97bc7f8917b8ee7d2c87667c790c7f4dfc551e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db97bc7f8917b8ee7d2c87667c790c7f4dfc551e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a60ffc297b9d4903543a25538e62e7fb39420a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a60ffc297b9d4903543a25538e62e7fb39420a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a60ffc297b9d4903543a25538e62e7fb39420a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a60ffc297b9d4903543a25538e62e7fb39420a9/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cf4813202f19768e31666f6aa82bde4dce4065a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cf4813202f19768e31666f6aa82bde4dce4065a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cf4813202f19768e31666f6aa82bde4dce4065a"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "0f416bec35b5e562f4448b5110b64d6ae9817667", "filename": "gcc/cp/method.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a60ffc297b9d4903543a25538e62e7fb39420a9/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a60ffc297b9d4903543a25538e62e7fb39420a9/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=6a60ffc297b9d4903543a25538e62e7fb39420a9", "patch": "@@ -3131,7 +3131,12 @@ defaulted_late_check (tree fn)\n       /* If the function was declared constexpr, check that the definition\n \t qualifies.  Otherwise we can define the function lazily.  */\n       if (DECL_DECLARED_CONSTEXPR_P (fn) && !DECL_INITIAL (fn))\n-\tsynthesize_method (fn);\n+\t{\n+\t  /* Prevent GC.  */\n+\t  function_depth++;\n+\t  synthesize_method (fn);\n+\t  function_depth--;\n+\t}\n       return;\n     }\n "}, {"sha": "7956e83c1de414d4e9054869438907f5784e67fb", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a60ffc297b9d4903543a25538e62e7fb39420a9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a60ffc297b9d4903543a25538e62e7fb39420a9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6a60ffc297b9d4903543a25538e62e7fb39420a9", "patch": "@@ -65,7 +65,6 @@ static GTY(()) struct pending_template *last_pending_template;\n int processing_template_parmlist;\n static int template_header_count;\n \n-static GTY(()) tree saved_trees;\n static vec<int> inline_parm_levels;\n \n static GTY(()) struct tinst_level *current_tinst_level;"}, {"sha": "ff45dd313d65163de85746d4b9a6354ea566ae26", "filename": "gcc/testsuite/g++.dg/other/gc6.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a60ffc297b9d4903543a25538e62e7fb39420a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fgc6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a60ffc297b9d4903543a25538e62e7fb39420a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fgc6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fgc6.C?ref=6a60ffc297b9d4903543a25538e62e7fb39420a9", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/99831\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"--param ggc-min-heapsize=0 --param ggc-min-expand=0\" }\n+\n+template <int N> struct S {\n+  constexpr S(const char (&str)[N]) : value{} { }\n+  char value[N];\n+};\n+template <S> struct string {\n+  constexpr bool operator==(const string &) const = default;\n+};\n+template <S L2> void operator+(string<L2>) {\n+  char value[1];\n+  S{value};\n+}\n+static_assert(string<\"a\">{} == string<\"a\">{});"}]}