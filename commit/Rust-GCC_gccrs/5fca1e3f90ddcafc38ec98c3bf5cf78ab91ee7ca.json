{"sha": "5fca1e3f90ddcafc38ec98c3bf5cf78ab91ee7ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZjYTFlM2Y5MGRkY2FmYzM4ZWM5OGMzYmY1Y2Y3OGFiOTFlZTdjYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-24T22:33:43Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-24T22:33:43Z"}, "message": "compiler: Do not allow slice of array literal.\n\nFrom-SVN: r183499", "tree": {"sha": "2aea8aa2949cf55833a16d86f7b43d27720e8f7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aea8aa2949cf55833a16d86f7b43d27720e8f7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fca1e3f90ddcafc38ec98c3bf5cf78ab91ee7ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fca1e3f90ddcafc38ec98c3bf5cf78ab91ee7ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fca1e3f90ddcafc38ec98c3bf5cf78ab91ee7ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fca1e3f90ddcafc38ec98c3bf5cf78ab91ee7ca/comments", "author": null, "committer": null, "parents": [{"sha": "42cf06094db7547fa4ec123f144180882b5a9f5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42cf06094db7547fa4ec123f144180882b5a9f5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42cf06094db7547fa4ec123f144180882b5a9f5b"}], "stats": {"total": 70, "additions": 1, "deletions": 69}, "files": [{"sha": "5563dde703221769c772092da6fe63a787694d59", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fca1e3f90ddcafc38ec98c3bf5cf78ab91ee7ca/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fca1e3f90ddcafc38ec98c3bf5cf78ab91ee7ca/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=5fca1e3f90ddcafc38ec98c3bf5cf78ab91ee7ca", "patch": "@@ -10593,7 +10593,7 @@ Array_index_expression::do_check_types(Gogo*)\n   if (this->end_ != NULL && !array_type->is_slice_type())\n     {\n       if (!this->array_->is_addressable())\n-\tthis->report_error(_(\"array is not addressable\"));\n+\tthis->report_error(_(\"slice of unaddressable value\"));\n       else\n \tthis->array_->address_taken(true);\n     }\n@@ -10834,13 +10834,6 @@ Expression*\n Expression::make_array_index(Expression* array, Expression* start,\n \t\t\t     Expression* end, Location location)\n {\n-  // Taking a slice of a composite literal requires moving the literal\n-  // onto the heap.\n-  if (end != NULL && array->is_composite_literal())\n-    {\n-      array = Expression::make_heap_composite(array, location);\n-      array = Expression::make_unary(OPERATOR_MULT, array, location);\n-    }\n   return new Array_index_expression(array, start, end, location);\n }\n \n@@ -11954,10 +11947,6 @@ class Struct_construction_expression : public Expression\n \t\t\t\t\t      this->location());\n   }\n \n-  bool\n-  do_is_addressable() const\n-  { return true; }\n-\n   tree\n   do_get_tree(Translate_context*);\n \n@@ -12239,10 +12228,6 @@ class Array_construction_expression : public Expression\n   void\n   do_check_types(Gogo*);\n \n-  bool\n-  do_is_addressable() const\n-  { return true; }\n-\n   void\n   do_export(Export*) const;\n "}, {"sha": "a38d0545b1d1506ecdb3668786d24974fbe8234e", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug268.go", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42cf06094db7547fa4ec123f144180882b5a9f5b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug268.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42cf06094db7547fa4ec123f144180882b5a9f5b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug268.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug268.go?ref=42cf06094db7547fa4ec123f144180882b5a9f5b", "patch": "@@ -1,53 +0,0 @@\n-// $G $D/$F.go && $L $F.$A && ./$A.out\n-\n-// Copyright 2010 The Go Authors.  All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// http://code.google.com/p/go/issues/detail?id=745\n-\n-package main\n-\n-type T1 struct {\n-\tT2 *T2\n-}\n-\n-type T2 struct {\n-\tT3 *T3\n-}\n-\n-type T3 struct {\n-\tT4 []*T4\n-}\n-\n-type T4 struct {\n-\tX int\n-}\n-\n-func f() *T1 {\n-\tx := &T1{\n-\t\t&T2{\n-\t\t\t&T3{\n-\t\t\t\t[1]*T4{\n-\t\t\t\t\t&T4{5},\n-\t\t\t\t}[0:],\n-\t\t\t},\n-\t\t},\n-\t}\n-\treturn x\n-}\n-\n-func g(x int) {\n-\tif x == 0 {\n-\t\treturn\n-\t}\n-\tg(x-1)\n-}\n-\n-func main() {\n-\tx := f()\n-\tg(100) // smash temporaries left over on stack\n-\tif x.T2.T3.T4[0].X != 5 {\n-\t\tprintln(\"BUG\", x.T2.T3.T4[0].X)\n-\t}\n-}"}]}