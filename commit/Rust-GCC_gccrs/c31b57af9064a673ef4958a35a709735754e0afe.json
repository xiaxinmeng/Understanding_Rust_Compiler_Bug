{"sha": "c31b57af9064a673ef4958a35a709735754e0afe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMxYjU3YWY5MDY0YTY3M2VmNDk1OGEzNWE3MDk3MzU3NTRlMGFmZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-11-12T10:59:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T10:59:25Z"}, "message": "einfo.ads (Overlays_Constant): Document usage for E_Constant.\n\n2015-11-12  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* einfo.ads (Overlays_Constant): Document usage for E_Constant.\n\t* freeze.adb (Warn_Overlay): Small reformatting.\n\t(Check_Address_Clause): Deal specifically with deferred\n\tconstants.  For a variable or a non-imported constant\n\toverlaying a constant object and with initialization value,\n\teither remove the initialization or issue a warning.  Fix a\n\tcouple of typos.\n\t* sem_util.adb (Note_Possible_Modification): Overhaul the condition for\n\tthe warning on modified constants and use Find_Overlaid_Entity instead\n\tof doing it manually.\n\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Compute and\n\tset Overlays_Constant once on entry.  Do not treat the overlaid\n\tentity as volatile.  Do not issue the warning on modified\n\tconstants here.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Constant>: Remove\n\tover-restrictive condition for the special treatment of deferred\n\tconstants.\n\t<E_Variable>: Remove obsolete associated code.\n\nFrom-SVN: r230229", "tree": {"sha": "a2f2cf157298438444a07161643f881d168cd92b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2f2cf157298438444a07161643f881d168cd92b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c31b57af9064a673ef4958a35a709735754e0afe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c31b57af9064a673ef4958a35a709735754e0afe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c31b57af9064a673ef4958a35a709735754e0afe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c31b57af9064a673ef4958a35a709735754e0afe/comments", "author": null, "committer": null, "parents": [{"sha": "16f1996259366f82d31429463b0b80f7bdf3cd56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f1996259366f82d31429463b0b80f7bdf3cd56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16f1996259366f82d31429463b0b80f7bdf3cd56"}], "stats": {"total": 227, "additions": 116, "deletions": 111}, "files": [{"sha": "ed8f8f058e7f481d549ca2fc32ff1f07ab687411", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31b57af9064a673ef4958a35a709735754e0afe/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31b57af9064a673ef4958a35a709735754e0afe/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c31b57af9064a673ef4958a35a709735754e0afe", "patch": "@@ -1,3 +1,24 @@\n+2015-11-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Overlays_Constant): Document usage for E_Constant.\n+\t* freeze.adb (Warn_Overlay): Small reformatting.\n+\t(Check_Address_Clause): Deal specifically with deferred\n+\tconstants.  For a variable or a non-imported constant\n+\toverlaying a constant object and with initialization value,\n+\teither remove the initialization or issue a warning.  Fix a\n+\tcouple of typos.\n+\t* sem_util.adb (Note_Possible_Modification): Overhaul the condition for\n+\tthe warning on modified constants and use Find_Overlaid_Entity instead\n+\tof doing it manually.\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Compute and\n+\tset Overlays_Constant once on entry.  Do not treat the overlaid\n+\tentity as volatile.  Do not issue the warning on modified\n+\tconstants here.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Constant>: Remove\n+\tover-restrictive condition for the special treatment of deferred\n+\tconstants.\n+\t<E_Variable>: Remove obsolete associated code.\n+\n 2015-11-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (gnat_to_gnu) <N_Subprogram_Renaming_Decl>: Do"}, {"sha": "3b52ea553f7854c454b9044035e17ecab18d2a7e", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31b57af9064a673ef4958a35a709735754e0afe/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31b57af9064a673ef4958a35a709735754e0afe/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=c31b57af9064a673ef4958a35a709735754e0afe", "patch": "@@ -3638,8 +3638,9 @@ package Einfo is\n --         Points to the component in the base type.\n \n --    Overlays_Constant (Flag243)\n---       Defined in all entities. Set only for a variable for which there is\n---       an address clause which causes the variable to overlay a constant.\n+--       Defined in all entities. Set only for E_Constant or E_Variable for\n+--       which there is an address clause which causes the entity to overlay\n+--       a constant object.\n \n --    Overridden_Operation (Node26)\n --       Defined in subprograms. For overriding operations, points to the"}, {"sha": "88e785cda397dff0df5c2334d03b10f9c89d039c", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 65, "deletions": 20, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31b57af9064a673ef4958a35a709735754e0afe/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31b57af9064a673ef4958a35a709735754e0afe/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=c31b57af9064a673ef4958a35a709735754e0afe", "patch": "@@ -207,10 +207,7 @@ package body Freeze is\n    --  this to have a Freeze_Node, so ensure it doesn't. Do the same for any\n    --  Full_View or Corresponding_Record_Type.\n \n-   procedure Warn_Overlay\n-     (Expr : Node_Id;\n-      Typ  : Entity_Id;\n-      Nam  : Node_Id);\n+   procedure Warn_Overlay (Expr : Node_Id; Typ : Entity_Id; Nam : Node_Id);\n    --  Expr is the expression for an address clause for entity Nam whose type\n    --  is Typ. If Typ has a default initialization, and there is no explicit\n    --  initialization in the source declaration, check whether the address\n@@ -598,16 +595,25 @@ package body Freeze is\n    --------------------------\n \n    procedure Check_Address_Clause (E : Entity_Id) is\n-      Addr       : constant Node_Id    := Address_Clause (E);\n+      Addr       : constant Node_Id   := Address_Clause (E);\n+      Typ        : constant Entity_Id := Etype (E);\n+      Decl       : Node_Id;\n       Expr       : Node_Id;\n-      Decl       : constant Node_Id    := Declaration_Node (E);\n-      Loc        : constant Source_Ptr := Sloc (Decl);\n-      Typ        : constant Entity_Id  := Etype (E);\n+      Init       : Node_Id;\n       Lhs        : Node_Id;\n       Tag_Assign : Node_Id;\n \n    begin\n       if Present (Addr) then\n+\n+         --  For a deferred constant, the initialization value is on full view\n+\n+         if Ekind (E) = E_Constant and then Present (Full_View (E)) then\n+            Decl := Declaration_Node (Full_View (E));\n+         else\n+            Decl := Declaration_Node (E);\n+         end if;\n+\n          Expr := Expression (Addr);\n \n          if Needs_Constant_Address (Decl, Typ) then\n@@ -656,29 +662,72 @@ package body Freeze is\n             Warn_Overlay (Expr, Typ, Name (Addr));\n          end if;\n \n-         if Present (Expression (Decl)) then\n+         Init := Expression (Decl);\n+\n+         --  If a variable, or a non-imported constant, overlays a constant\n+         --  object and has an initialization value, then the initialization\n+         --  may end up writing into read-only memory. Detect the cases of\n+         --  statically identical values and remove the initialization. In\n+         --  the other cases, give a warning. We will give other warnings\n+         --  later for the variable if it is assigned.\n+\n+         if (Ekind (E) = E_Variable\n+               or else (Ekind (E) = E_Constant\n+                          and then not Is_Imported (E)))\n+           and then Overlays_Constant (E)\n+           and then Present (Init)\n+         then\n+            declare\n+               O_Ent : Entity_Id;\n+               Off   : Boolean;\n+            begin\n+               Find_Overlaid_Entity (Addr, O_Ent, Off);\n+\n+               if Ekind (O_Ent) = E_Constant\n+                 and then Etype (O_Ent) = Typ\n+                 and then Present (Constant_Value (O_Ent))\n+                 and then Compile_Time_Compare (\n+                            Init,\n+                            Constant_Value (O_Ent),\n+                            Assume_Valid => True) = EQ\n+               then\n+                  Set_No_Initialization (Decl);\n+                  return;\n+\n+               elsif Comes_From_Source (Init)\n+                 and then Address_Clause_Overlay_Warnings\n+               then\n+                  Error_Msg_Sloc := Sloc (Addr);\n+                  Error_Msg_NE\n+                    (\"??constant& may be modified via address clause#\",\n+                     Decl, O_Ent);\n+               end if;\n+            end;\n+         end if;\n+\n+         if Present (Init) then\n \n             --  Capture initialization value at point of declaration,\n             --  and make explicit assignment legal, because object may\n             --  be a constant.\n \n-            Remove_Side_Effects (Expression (Decl));\n-            Lhs := New_Occurrence_Of (E, Loc);\n+            Remove_Side_Effects (Init);\n+            Lhs := New_Occurrence_Of (E, Sloc (Decl));\n             Set_Assignment_OK (Lhs);\n \n-            --  Move initialization to freeze actions (once the object has\n-            --  been frozen, and the address clause alignment check has been\n+            --  Move initialization to freeze actions, once the object has\n+            --  been frozen and the address clause alignment check has been\n             --  performed.\n \n             Append_Freeze_Action (E,\n-              Make_Assignment_Statement (Loc,\n+              Make_Assignment_Statement (Sloc (Decl),\n                 Name       => Lhs,\n                 Expression => Expression (Decl)));\n \n             Set_No_Initialization (Decl);\n \n             --  If the objet is tagged, check whether the tag must be\n-            --  reassigned expliitly.\n+            --  reassigned explicitly.\n \n             Tag_Assign := Make_Tag_Assignment (Decl);\n             if Present (Tag_Assign) then\n@@ -8128,11 +8177,7 @@ package body Freeze is\n    -- Warn_Overlay --\n    ------------------\n \n-   procedure Warn_Overlay\n-     (Expr : Node_Id;\n-      Typ  : Entity_Id;\n-      Nam  : Entity_Id)\n-   is\n+   procedure Warn_Overlay (Expr : Node_Id; Typ : Entity_Id; Nam : Entity_Id) is\n       Ent : constant Entity_Id := Entity (Nam);\n       --  The object to which the address clause applies\n "}, {"sha": "0c59ab3aabb3624a72cbc3956791fde545f6b15e", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31b57af9064a673ef4958a35a709735754e0afe/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31b57af9064a673ef4958a35a709735754e0afe/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=c31b57af9064a673ef4958a35a709735754e0afe", "patch": "@@ -506,7 +506,6 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n       /* Ignore constant definitions already marked with the error node.  See\n \t the N_Object_Declaration case of gnat_to_gnu for the rationale.  */\n       if (definition\n-\t  && gnu_expr\n \t  && present_gnu_tree (gnat_entity)\n \t  && get_gnu_tree (gnat_entity) == error_mark_node)\n \t{\n@@ -1186,13 +1185,6 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t  }\n \t      }\n \n-\t    /* If this is a deferred constant, the initializer is attached to\n-\t       the full view.  */\n-\t    if (kind == E_Constant && Present (Full_View (gnat_entity)))\n-\t      gnu_expr\n-\t\t= gnat_to_gnu\n-\t\t    (Expression (Declaration_Node (Full_View (gnat_entity))));\n-\n \t    /* If we don't have an initializing expression for the underlying\n \t       variable, the initializing expression for the pointer is the\n \t       specified address.  Otherwise, we have to make a COMPOUND_EXPR"}, {"sha": "bbcd7afde76e892c23faeeb4fa4a7dda129fbcb0", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 14, "deletions": 63, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31b57af9064a673ef4958a35a709735754e0afe/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31b57af9064a673ef4958a35a709735754e0afe/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=c31b57af9064a673ef4958a35a709735754e0afe", "patch": "@@ -4724,6 +4724,12 @@ package body Sem_Ch13 is\n \n                   Find_Overlaid_Entity (N, O_Ent, Off);\n \n+                  --  If the object overlays a constant view, mark it so\n+\n+                  if Present (O_Ent) and then Is_Constant_Object (O_Ent) then\n+                     Set_Overlays_Constant (U_Ent);\n+                  end if;\n+\n                   --  Overlaying controlled objects is erroneous.\n                   --  Emit warning but continue analysis because program is\n                   --  itself legal, and back-end must see address clause.\n@@ -4743,12 +4749,12 @@ package body Sem_Ch13 is\n \n                   --  Issue an unconditional warning for a constant overlaying\n                   --  a variable. For the reverse case, we will issue it only\n-                  --  if the variable is modified, see below.\n+                  --  if the variable is modified.\n \n-                  elsif Address_Clause_Overlay_Warnings\n+                  elsif Ekind (U_Ent) = E_Constant\n                     and then Present (O_Ent)\n-                    and then Ekind (U_Ent) = E_Constant\n-                    and then not Is_Constant_Object (O_Ent)\n+                    and then not Overlays_Constant (U_Ent)\n+                    and then Address_Clause_Overlay_Warnings\n                   then\n                      Error_Msg_N (\"??constant overlays a variable\", Expr);\n \n@@ -4767,34 +4773,6 @@ package body Sem_Ch13 is\n \n                   Note_Possible_Modification (Nam, Sure => False);\n \n-                  --  Here we are checking for explicit overlap of one variable\n-                  --  by another, and if we find this then mark the overlapped\n-                  --  variable as also being volatile to prevent unwanted\n-                  --  optimizations. This is a significant pessimization so\n-                  --  avoid it when there is an offset, i.e. when the object\n-                  --  is composite; they cannot be optimized easily anyway.\n-\n-                  if Present (O_Ent)\n-                    and then Is_Object (O_Ent)\n-                    and then not Off\n-\n-                    --  The following test is an expedient solution to what\n-                    --  is really a problem in CodePeer. Suppressing the\n-                    --  Set_Treat_As_Volatile call here prevents later\n-                    --  generation (in some cases) of trees that CodePeer\n-                    --  should, but currently does not, handle correctly.\n-                    --  This test should probably be removed when CodePeer\n-                    --  is improved, just because we want the tree CodePeer\n-                    --  analyzes to match the tree for which we generate code\n-                    --  as closely as is practical. ???\n-\n-                    and then not CodePeer_Mode\n-                  then\n-                     --  ??? O_Ent might not be in current unit\n-\n-                     Set_Treat_As_Volatile (O_Ent);\n-                  end if;\n-\n                   --  Legality checks on the address clause for initialized\n                   --  objects is deferred until the freeze point, because\n                   --  a subsequent pragma might indicate that the object\n@@ -4867,39 +4845,12 @@ package body Sem_Ch13 is\n                   --  Furthermore, by removing the test, we handle the\n                   --  aspect case properly.\n \n-                  if Address_Clause_Overlay_Warnings\n-                    and then Present (O_Ent)\n+                  if Present (O_Ent)\n                     and then Is_Object (O_Ent)\n+                    and then not Is_Generic_Type (Etype (U_Ent))\n+                    and then Address_Clause_Overlay_Warnings\n                   then\n-                     if not Is_Generic_Type (Etype (U_Ent)) then\n-                        Address_Clause_Checks.Append ((N, U_Ent, O_Ent, Off));\n-                     end if;\n-\n-                     --  If variable overlays a constant view, and we are\n-                     --  warning on overlays, then mark the variable as\n-                     --  overlaying a constant and warn immediately if it\n-                     --  is initialized. We will give other warnings later\n-                     --  if the variable is assigned.\n-\n-                     if Is_Constant_Object (O_Ent)\n-                       and then Ekind (U_Ent) = E_Variable\n-                     then\n-                        declare\n-                           Init : constant Node_Id :=\n-                                    Expression (Declaration_Node (U_Ent));\n-                        begin\n-                           Set_Overlays_Constant (U_Ent);\n-\n-                           if Present (Init)\n-                             and then Comes_From_Source (Init)\n-                           then\n-                              Error_Msg_Sloc := Sloc (N);\n-                              Error_Msg_NE\n-                                (\"??constant& may be modified via address \"\n-                                 & \"clause#\", Declaration_Node (U_Ent), O_Ent);\n-                           end if;\n-                        end;\n-                     end if;\n+                     Address_Clause_Checks.Append ((N, U_Ent, O_Ent, Off));\n                   end if;\n                end;\n "}, {"sha": "2422bb3ec47c7d31371c18a355b8784e472d86da", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31b57af9064a673ef4958a35a709735754e0afe/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31b57af9064a673ef4958a35a709735754e0afe/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=c31b57af9064a673ef4958a35a709735754e0afe", "patch": "@@ -16258,27 +16258,22 @@ package body Sem_Util is\n             --  If we are sure this is a modification from source, and we know\n             --  this modifies a constant, then give an appropriate warning.\n \n-            if Overlays_Constant (Ent)\n-              and then (Modification_Comes_From_Source and Sure)\n+            if Sure\n+              and then Modification_Comes_From_Source\n+              and then Overlays_Constant (Ent)\n+              and then Address_Clause_Overlay_Warnings\n             then\n                declare\n-                  A : constant Node_Id := Address_Clause (Ent);\n+                  Addr  : constant Node_Id := Address_Clause (Ent);\n+                  O_Ent : Entity_Id;\n+                  Off   : Boolean;\n                begin\n-                  if Present (A) then\n-                     declare\n-                        Exp : constant Node_Id := Expression (A);\n-                     begin\n-                        if Nkind (Exp) = N_Attribute_Reference\n-                          and then Attribute_Name (Exp) = Name_Address\n-                          and then Is_Entity_Name (Prefix (Exp))\n-                        then\n-                           Error_Msg_Sloc := Sloc (A);\n-                           Error_Msg_NE\n-                             (\"constant& may be modified via address \"\n-                              & \"clause#??\", N, Entity (Prefix (Exp)));\n-                        end if;\n-                     end;\n-                  end if;\n+                  Find_Overlaid_Entity (Addr, O_Ent, Off);\n+\n+                  Error_Msg_Sloc := Sloc (Addr);\n+                  Error_Msg_NE\n+                    (\"??constant& may be modified via address clause#\",\n+                     N, O_Ent);\n                end;\n             end if;\n "}]}