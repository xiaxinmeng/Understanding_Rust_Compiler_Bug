{"sha": "379ecbfacf3272e1c12b5ac930155ea6f5367a71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc5ZWNiZmFjZjMyNzJlMWMxMmI1YWM5MzAxNTVlYTZmNTM2N2E3MQ==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@adacore.com", "date": "2005-11-15T13:57:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-11-15T13:57:56Z"}, "message": "expect.c (__gnat_kill): Fix implementation...\n\n2005-11-14  Pascal Obry  <obry@adacore.com>\n\n\t* expect.c (__gnat_kill) [Win32]: Fix implementation, the pid returned\n\tby spawnve is a process handle, no need to convert. Add a parameter\n\tclose to control wether the process handle must be closed.\n\t(__gnat_waitpid): Fix implementation, the pid returned by spawnve is\n\ta process handle, not need to convert.\n\t(__gnat_kill) [*]: Add dummy parameter close to match the Win32 spec.\n\n\t* g-expect.adb: (Kill): Document the new close parameter.\n\t(Close): Do not release the process handle in the kill there as\n\twaitpid() is using it.\n\t(Send_Signal): Release the process handle.\n\nFrom-SVN: r106974", "tree": {"sha": "a05042bd8367388bbe2377d8298b4111af9eaae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a05042bd8367388bbe2377d8298b4111af9eaae7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/379ecbfacf3272e1c12b5ac930155ea6f5367a71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/379ecbfacf3272e1c12b5ac930155ea6f5367a71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/379ecbfacf3272e1c12b5ac930155ea6f5367a71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/379ecbfacf3272e1c12b5ac930155ea6f5367a71/comments", "author": {"login": "TurboGit", "id": 467069, "node_id": "MDQ6VXNlcjQ2NzA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurboGit", "html_url": "https://github.com/TurboGit", "followers_url": "https://api.github.com/users/TurboGit/followers", "following_url": "https://api.github.com/users/TurboGit/following{/other_user}", "gists_url": "https://api.github.com/users/TurboGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurboGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurboGit/subscriptions", "organizations_url": "https://api.github.com/users/TurboGit/orgs", "repos_url": "https://api.github.com/users/TurboGit/repos", "events_url": "https://api.github.com/users/TurboGit/events{/privacy}", "received_events_url": "https://api.github.com/users/TurboGit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ce0c3f5ed442fe46a2ba21de5a437704791dae5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ce0c3f5ed442fe46a2ba21de5a437704791dae5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ce0c3f5ed442fe46a2ba21de5a437704791dae5"}], "stats": {"total": 43, "additions": 20, "deletions": 23}, "files": [{"sha": "dd03b1ca1f8452dc93d955ed5ad4b4f498b0a25a", "filename": "gcc/ada/expect.c", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/379ecbfacf3272e1c12b5ac930155ea6f5367a71/gcc%2Fada%2Fexpect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/379ecbfacf3272e1c12b5ac930155ea6f5367a71/gcc%2Fada%2Fexpect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpect.c?ref=379ecbfacf3272e1c12b5ac930155ea6f5367a71", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *           Copyright (C) 2001-2005 Ada Core Technologies, Inc.            *\n+ *                     Copyright (C) 2001-2005, AdaCore                     *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -76,35 +76,30 @@\n #include <process.h>\n \n void\n-__gnat_kill (int pid, int sig)\n+__gnat_kill (int pid, int sig, int close)\n {\n-  HANDLE process_handle;\n-\n   if (sig == 9)\n     {\n-      process_handle = OpenProcess (PROCESS_TERMINATE, FALSE, pid);\n-      if (process_handle != NULL)\n+      if ((HANDLE)pid != NULL)\n \t{\n-\t  TerminateProcess (process_handle, 0);\n-\t  CloseHandle (process_handle);\n+\t  TerminateProcess ((HANDLE)pid, 0);\n+\t  if (close)\n+\t    CloseHandle ((HANDLE)pid);\n \t}\n     }\n }\n \n int\n __gnat_waitpid (int pid)\n {\n-  HANDLE process_handle;\n   DWORD exitcode = 1;\n   DWORD res;\n \n-  process_handle = OpenProcess (PROCESS_QUERY_INFORMATION, FALSE, pid);\n-\n-  if (process_handle != NULL)\n+  if ((HANDLE)pid != NULL)\n     {\n-      res = WaitForSingleObject (process_handle, INFINITE);\n-      GetExitCodeProcess (process_handle, &exitcode);\n-      CloseHandle (process_handle);\n+      res = WaitForSingleObject ((HANDLE)pid, INFINITE);\n+      GetExitCodeProcess ((HANDLE)pid, &exitcode);\n+      CloseHandle ((HANDLE)pid);\n     }\n \n   return (int) exitcode;\n@@ -337,7 +332,7 @@ typedef long fd_mask;\n #endif /* !NO_FD_SET */\n \n void\n-__gnat_kill (int pid, int sig)\n+__gnat_kill (int pid, int sig, int close)\n {\n   kill (pid, sig);\n }\n@@ -456,7 +451,7 @@ __gnat_expect_poll (int *fd, int num_fd, int timeout, int *is_set)\n #else\n \n void\n-__gnat_kill (int pid, int sig)\n+__gnat_kill (int pid, int sig, int close)\n {\n }\n "}, {"sha": "1cb07881f12509249faf327840ad996c19658d3b", "filename": "gcc/ada/g-expect.adb", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/379ecbfacf3272e1c12b5ac930155ea6f5367a71/gcc%2Fada%2Fg-expect.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/379ecbfacf3272e1c12b5ac930155ea6f5367a71/gcc%2Fada%2Fg-expect.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect.adb?ref=379ecbfacf3272e1c12b5ac930155ea6f5367a71", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 2000-2005 Ada Core Technologies, Inc.            --\n+--                     Copyright (C) 2000-2005, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -89,8 +89,9 @@ package body GNAT.Expect is\n    procedure Dup2 (Old_Fd, New_Fd : File_Descriptor);\n    pragma Import (C, Dup2);\n \n-   procedure Kill (Pid : Process_Id; Sig_Num : Integer);\n+   procedure Kill (Pid : Process_Id; Sig_Num : Integer; Close : Integer);\n    pragma Import (C, Kill, \"__gnat_kill\");\n+   --  if Close is set to 1 all OS resources used by the Pid must be freed\n \n    function Create_Pipe (Pipe : access Pipe_Type) return Integer;\n    pragma Import (C, Create_Pipe, \"__gnat_pipe\");\n@@ -221,7 +222,7 @@ package body GNAT.Expect is\n \n       --  ??? Should have timeouts for different signals\n \n-      Kill (Descriptor.Pid, 9);\n+      Kill (Descriptor.Pid, 9, 0);\n \n       GNAT.OS_Lib.Free (Descriptor.Buffer);\n       Descriptor.Buffer_Size := 0;\n@@ -339,10 +340,11 @@ package body GNAT.Expect is\n             return;\n          end if;\n \n-         --  Calculate the timeout for the next turn.\n+         --  Calculate the timeout for the next turn\n+\n          --  Note that Timeout is, from the caller's perspective, the maximum\n          --  time until a match, not the maximum time until some output is\n-         --  read, and thus can not be reused as is for Expect_Internal.\n+         --  read, and thus cannot be reused as is for Expect_Internal.\n \n          if Timeout /= -1 then\n             Timeout_Tmp := Integer (Try_Until - Clock) * 1000;\n@@ -1148,7 +1150,7 @@ package body GNAT.Expect is\n       Signal     : Integer)\n    is\n    begin\n-      Kill (Descriptor.Pid, Signal);\n+      Kill (Descriptor.Pid, Signal, 1);\n       --  ??? Need to check process status here\n    end Send_Signal;\n "}]}