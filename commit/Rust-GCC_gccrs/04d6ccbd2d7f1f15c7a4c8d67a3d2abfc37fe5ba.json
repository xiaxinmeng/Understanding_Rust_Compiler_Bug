{"sha": "04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRkNmNjYmQyZDdmMWYxNWM3YTRjOGQ2N2EzZDJhYmZjMzdmZTViYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-07-03T13:16:01Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-07-03T13:16:01Z"}, "message": "class.c (add_method, [...]): Fix format specifier.\n\n\t* class.c (add_method, check_field_decl): Fix format specifier.\n\t* decl.c (duplicate_decls, pushdecl, check_goto,\n\tfixup_anonymous_aggr, maybe_commonize_var, grokdeclarator,\n\tstart_enum): Likewise.\n\t* decl2.c (ambiguous_decl): Likewise.\n\t* pt.c (redeclare_class_template): Likewise.\n\nFrom-SVN: r68878", "tree": {"sha": "2d7e729ef22ba276e7ea14d4fcae5225b55321bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d7e729ef22ba276e7ea14d4fcae5225b55321bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba/comments", "author": null, "committer": null, "parents": [{"sha": "a11c61d20b95777d95db0ae12c550d39bba89d95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11c61d20b95777d95db0ae12c550d39bba89d95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a11c61d20b95777d95db0ae12c550d39bba89d95"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "c0b47dc970b844086c52f9ca7f7dbb780b8e0e61", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba", "patch": "@@ -1,3 +1,12 @@\n+2003-07-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* class.c (add_method, check_field_decl): Fix format specifier.\n+\t* decl.c (duplicate_decls, pushdecl, check_goto,\n+\tfixup_anonymous_aggr, maybe_commonize_var, grokdeclarator,\n+\tstart_enum): Likewise.\n+\t* decl2.c (ambiguous_decl): Likewise.\n+\t* pt.c (redeclare_class_template): Likewise.\n+\n 2003-07-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/10219"}, {"sha": "09688b68a037fddc3ed90cbc6e3dffd600c897a9", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba", "patch": "@@ -927,7 +927,7 @@ add_method (tree type, tree method, int error_p)\n \t      else\n \t\t{\n \t\t  cp_error_at (\"`%#D' and `%#D' cannot be overloaded\",\n-\t\t\t       method, fn, method);\n+\t\t\t       method, fn);\n \n \t\t  /* We don't call duplicate_decls here to merge\n \t\t     the declarations because that will confuse\n@@ -2961,7 +2961,7 @@ check_field_decl (tree field,\n       /* `build_class_init_list' does not recognize\n \t non-FIELD_DECLs.  */\n       if (TREE_CODE (t) == UNION_TYPE && any_default_members != 0)\n-\tcp_error_at (\"multiple fields in union `%T' initialized\");\n+\terror (\"multiple fields in union `%T' initialized\", t);\n       *any_default_members = 1;\n     }\n }"}, {"sha": "732ada291b4d2ae502364bfef95cd591ea9582dd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba", "patch": "@@ -3138,7 +3138,8 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t{\n \t  /* Prototype decl follows defn w/o prototype.  */\n \t  cp_warning_at (\"prototype for `%#D'\", newdecl);\n-\t  cp_warning_at (\"follows non-prototype definition here\", olddecl);\n+\t  warning (\"%Hfollows non-prototype definition here\",\n+\t\t   &DECL_SOURCE_LOCATION (olddecl));\n \t}\n       else if (TREE_CODE (olddecl) == FUNCTION_DECL\n \t       && DECL_LANGUAGE (newdecl) != DECL_LANGUAGE (olddecl))\n@@ -3195,8 +3196,8 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t    {\n \t      warning (\"`%#D' was used before it was declared inline\",\n \t\t\t  newdecl);\n-\t      cp_warning_at (\"previous non-inline declaration here\",\n-\t\t\t     olddecl);\n+\t      warning (\"%Hprevious non-inline declaration here\",\n+\t\t       &DECL_SOURCE_LOCATION (olddecl));\n \t    }\n \t}\n     }\n@@ -3888,7 +3889,7 @@ pushdecl (tree x)\n \t      && TREE_CODE (decl) == TREE_CODE (x)\n \t      && !same_type_p (TREE_TYPE (x), TREE_TYPE (decl)))\n \t    {\n-\t      pedwarn (\"type mismatch with previous external decl\", x);\n+\t      pedwarn (\"type mismatch with previous external decl of `%#D'\", x);\n \t      cp_pedwarn_at (\"previous external decl of `%#D'\", decl);\n \t    }\n \t}\n@@ -4925,7 +4926,7 @@ check_goto (tree decl)\n \n       if (u > 1 && DECL_ARTIFICIAL (b))\n \t/* Can't skip init of __exception_info.  */\n-\tcp_error_at (\"  enters catch block\", b);\n+\terror (\"%H  enters catch block\", &DECL_SOURCE_LOCATION (b));\n       else if (u > 1)\n \tcp_error_at (\"  skips initialization of `%#D'\", b);\n       else\n@@ -6692,7 +6693,8 @@ fixup_anonymous_aggr (tree t)\n \n   /* ISO C++ 9.5.3.  Anonymous unions may not have function members.  */\n   if (TYPE_METHODS (t))\n-    cp_error_at (\"an anonymous union cannot have function members\", t);\n+    error (\"%Han anonymous union cannot have function members\",\n+\t   &DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (t)));\n \n   /* Anonymous aggregates cannot have fields with ctors, dtors or complex\n      assignment operators (because they cannot have these methods themselves).\n@@ -7393,7 +7395,8 @@ maybe_commonize_var (tree decl)\n \t      TREE_PUBLIC (decl) = 0;\n \t      DECL_COMMON (decl) = 0;\n \t      cp_warning_at (\"sorry: semantics of inline function static data `%#D' are wrong (you'll wind up with multiple copies)\", decl);\n-\t      cp_warning_at (\"  you can work around this by removing the initializer\", decl);\n+\t      warning (\"%H  you can work around this by removing the initializer\",\n+\t\t       &DECL_SOURCE_LOCATION (decl));\n \t    }\n \t}\n     }\n@@ -11140,8 +11143,8 @@ grokdeclarator (tree declarator,\n \t{\n \t  decl = build_decl (TYPE_DECL, declarator, type);\n \t  if (in_namespace || ctype)\n-\t    cp_error_at (\"typedef name may not be a nested-name-specifier\",\n-\t\t\t decl);\n+\t    error (\"%Htypedef name may not be a nested-name-specifier\",\n+\t\t   &DECL_SOURCE_LOCATION (decl));\n \t  if (!current_function_decl)\n \t    DECL_CONTEXT (decl) = FROB_CONTEXT (current_namespace);\n \t}\n@@ -11187,7 +11190,8 @@ grokdeclarator (tree declarator,\n \t  if (ctype == NULL_TREE)\n \t    {\n \t      if (TREE_CODE (type) != METHOD_TYPE)\n-\t\tcp_error_at (\"invalid type qualifier for non-member function type\", decl);\n+\t\terror (\"%Hinvalid type qualifier for non-member function type\",\n+\t\t       &DECL_SOURCE_LOCATION (decl));\n \t      else\n \t\tctype = TYPE_METHOD_BASETYPE (type);\n \t    }\n@@ -13014,7 +13018,8 @@ start_enum (tree name)\n   if (enumtype != NULL_TREE && TREE_CODE (enumtype) == ENUMERAL_TYPE)\n     {\n       error (\"multiple definition of `%#T'\", enumtype);\n-      cp_error_at (\"previous definition here\", enumtype);\n+      error (\"%Hprevious definition here\",\n+\t     &DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (enumtype)));\n       /* Clear out TYPE_VALUES, and start again.  */\n       TYPE_VALUES (enumtype) = NULL_TREE;\n     }"}, {"sha": "faa36f58b3cd99644099c0b034b2824c807ff688", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba", "patch": "@@ -3664,8 +3664,10 @@ ambiguous_decl (tree name, cxx_binding *old, cxx_binding *new, int flags)\n       if (flags & LOOKUP_COMPLAIN)\n         {\n           error (\"`%D' denotes an ambiguous type\",name);\n-          cp_error_at (\"  first type here\", BINDING_TYPE (old));\n-          cp_error_at (\"  other type here\", type);\n+          error (\"%H  first type here\",\n+\t\t &DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (BINDING_TYPE (old))));\n+          error (\"%H  other type here\",\n+\t\t &DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (type)));\n         }\n     }\n   return old;"}, {"sha": "11f0bcdcd42c4e32075dbce0708cb6fef600b8cd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=04d6ccbd2d7f1f15c7a4c8d67a3d2abfc37fe5ba", "patch": "@@ -2984,7 +2984,8 @@ redeclare_class_template (tree type, tree parms)\n \t     A template-parameter may not be given default arguments\n \t     by two different declarations in the same scope.  */\n \t  error (\"redefinition of default argument for `%#D'\", parm);\n-\t  cp_error_at (\"  original definition appeared here\", tmpl_parm);\n+\t  error (\"%H  original definition appeared here\",\n+\t\t &DECL_SOURCE_LOCATION (tmpl_parm));\n \t  return;\n \t}\n "}]}