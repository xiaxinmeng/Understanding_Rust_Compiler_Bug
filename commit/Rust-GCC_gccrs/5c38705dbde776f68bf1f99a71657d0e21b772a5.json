{"sha": "5c38705dbde776f68bf1f99a71657d0e21b772a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMzODcwNWRiZGU3NzZmNjhiZjFmOTlhNzE2NTdkMGUyMWI3NzJhNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-15T09:00:22Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-15T09:00:22Z"}, "message": "[AArch64] Add a aarch64_sve_mode_p query\n\nThis patch adds an exported function for testing whether a mode is\nan SVE mode.  The ACLE will make more use of it, but there's already\none place that can benefit.\n\n2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-protos.h (aarch64_sve_mode_p): Declare.\n\t* config/aarch64/aarch64.c (aarch64_sve_mode_p): New function.\n\t(aarch64_select_early_remat_modes): Use it.\n\nFrom-SVN: r274523", "tree": {"sha": "463d991b05a991bc9e5260a9aa5ae0a2a98ab1eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/463d991b05a991bc9e5260a9aa5ae0a2a98ab1eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c38705dbde776f68bf1f99a71657d0e21b772a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c38705dbde776f68bf1f99a71657d0e21b772a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c38705dbde776f68bf1f99a71657d0e21b772a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c38705dbde776f68bf1f99a71657d0e21b772a5/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07108a9ebe4776610bb23f684b3a346d28511bed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07108a9ebe4776610bb23f684b3a346d28511bed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07108a9ebe4776610bb23f684b3a346d28511bed"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "12c8dcd5cc9da31cae2efad72128057bfd7f5846", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c38705dbde776f68bf1f99a71657d0e21b772a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c38705dbde776f68bf1f99a71657d0e21b772a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c38705dbde776f68bf1f99a71657d0e21b772a5", "patch": "@@ -1,3 +1,9 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_sve_mode_p): Declare.\n+\t* config/aarch64/aarch64.c (aarch64_sve_mode_p): New function.\n+\t(aarch64_select_early_remat_modes): Use it.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_simd_vector_alignment): Return"}, {"sha": "89e5e28aeeba0d0a5403c7b614d8db31c99001d0", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c38705dbde776f68bf1f99a71657d0e21b772a5/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c38705dbde776f68bf1f99a71657d0e21b772a5/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=5c38705dbde776f68bf1f99a71657d0e21b772a5", "patch": "@@ -475,6 +475,7 @@ bool aarch64_masks_and_shift_for_bfi_p (scalar_int_mode, unsigned HOST_WIDE_INT,\n bool aarch64_zero_extend_const_eq (machine_mode, rtx, machine_mode, rtx);\n bool aarch64_move_imm (HOST_WIDE_INT, machine_mode);\n opt_machine_mode aarch64_sve_pred_mode (unsigned int);\n+bool aarch64_sve_mode_p (machine_mode);\n bool aarch64_sve_cnt_immediate_p (rtx);\n bool aarch64_sve_scalar_inc_dec_immediate_p (rtx);\n bool aarch64_sve_addvl_addpl_immediate_p (rtx);"}, {"sha": "84341c041cf22b021916d3dbcff0a0a19377fdd7", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c38705dbde776f68bf1f99a71657d0e21b772a5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c38705dbde776f68bf1f99a71657d0e21b772a5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=5c38705dbde776f68bf1f99a71657d0e21b772a5", "patch": "@@ -1606,6 +1606,14 @@ aarch64_vector_data_mode_p (machine_mode mode)\n   return aarch64_classify_vector_mode (mode) & VEC_ANY_DATA;\n }\n \n+/* Return true if MODE is any form of SVE mode, including predicates,\n+   vectors and structures.  */\n+bool\n+aarch64_sve_mode_p (machine_mode mode)\n+{\n+  return aarch64_classify_vector_mode (mode) & VEC_ANY_SVE;\n+}\n+\n /* Return true if MODE is an SVE data vector mode; either a single vector\n    or a structure of vectors.  */\n static bool\n@@ -19962,12 +19970,8 @@ aarch64_select_early_remat_modes (sbitmap modes)\n   /* SVE values are not normally live across a call, so it should be\n      worth doing early rematerialization even in VL-specific mode.  */\n   for (int i = 0; i < NUM_MACHINE_MODES; ++i)\n-    {\n-      machine_mode mode = (machine_mode) i;\n-      unsigned int vec_flags = aarch64_classify_vector_mode (mode);\n-      if (vec_flags & VEC_ANY_SVE)\n-\tbitmap_set_bit (modes, i);\n-    }\n+    if (aarch64_sve_mode_p ((machine_mode) i))\n+      bitmap_set_bit (modes, i);\n }\n \n /* Override the default target speculation_safe_value.  */"}]}