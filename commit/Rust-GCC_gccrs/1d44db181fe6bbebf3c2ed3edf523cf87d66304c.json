{"sha": "1d44db181fe6bbebf3c2ed3edf523cf87d66304c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ0NGRiMTgxZmU2YmJlYmYzYzJlZDNlZGY1MjNjZjg3ZDY2MzA0Yw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-09-16T17:21:33Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-09-16T17:21:33Z"}, "message": "compiler: Don't crash on malformed numeric constants.\n\n    \n    Fixes golang/go#11548.\n    \n    Reviewed-on: https://go-review.googlesource.com/13794\n\nFrom-SVN: r227830", "tree": {"sha": "dc23fe1db3ca15d17e0e32ac66f0635e8684ffe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc23fe1db3ca15d17e0e32ac66f0635e8684ffe2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d44db181fe6bbebf3c2ed3edf523cf87d66304c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d44db181fe6bbebf3c2ed3edf523cf87d66304c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d44db181fe6bbebf3c2ed3edf523cf87d66304c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d44db181fe6bbebf3c2ed3edf523cf87d66304c/comments", "author": null, "committer": null, "parents": [{"sha": "48c6522f7147595cffbc9cec526e115a6ffd066b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c6522f7147595cffbc9cec526e115a6ffd066b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48c6522f7147595cffbc9cec526e115a6ffd066b"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "fb61c64ea310ebdac4e7de6a876579846df3b2b4", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d44db181fe6bbebf3c2ed3edf523cf87d66304c/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d44db181fe6bbebf3c2ed3edf523cf87d66304c/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=1d44db181fe6bbebf3c2ed3edf523cf87d66304c", "patch": "@@ -1,4 +1,4 @@\n-01a574c1b2bb244be764b6a18aab980ca0aef43c\n+79f457a267ff2bf8e65db4bcec0cbc7add79227a\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "49d4d27071a601d565c70fe7479544769e2c56d6", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d44db181fe6bbebf3c2ed3edf523cf87d66304c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d44db181fe6bbebf3c2ed3edf523cf87d66304c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=1d44db181fe6bbebf3c2ed3edf523cf87d66304c", "patch": "@@ -1904,6 +1904,13 @@ Integer_expression::do_check_types(Gogo*)\n Bexpression*\n Integer_expression::do_get_backend(Translate_context* context)\n {\n+  if (this->is_error_expression()\n+      || (this->type_ != NULL && this->type_->is_error_type()))\n+    {\n+      go_assert(saw_errors());\n+      return context->gogo()->backend()->error_expression();\n+    }\n+\n   Type* resolved_type = NULL;\n   if (this->type_ != NULL && !this->type_->is_abstract())\n     resolved_type = this->type_;\n@@ -2266,6 +2273,13 @@ Float_expression::do_check_types(Gogo*)\n Bexpression*\n Float_expression::do_get_backend(Translate_context* context)\n {\n+  if (this->is_error_expression()\n+      || (this->type_ != NULL && this->type_->is_error_type()))\n+    {\n+      go_assert(saw_errors());\n+      return context->gogo()->backend()->error_expression();\n+    }\n+\n   Type* resolved_type;\n   if (this->type_ != NULL && !this->type_->is_abstract())\n     resolved_type = this->type_;\n@@ -2448,6 +2462,13 @@ Complex_expression::do_check_types(Gogo*)\n Bexpression*\n Complex_expression::do_get_backend(Translate_context* context)\n {\n+  if (this->is_error_expression()\n+      || (this->type_ != NULL && this->type_->is_error_type()))\n+    {\n+      go_assert(saw_errors());\n+      return context->gogo()->backend()->error_expression();\n+    }\n+\n   Type* resolved_type;\n   if (this->type_ != NULL && !this->type_->is_abstract())\n     resolved_type = this->type_;\n@@ -2826,8 +2847,12 @@ Const_expression::do_check_types(Gogo*)\n Bexpression*\n Const_expression::do_get_backend(Translate_context* context)\n {\n-  if (this->type_ != NULL && this->type_->is_error())\n-    return context->backend()->error_expression();\n+  if (this->is_error_expression()\n+      || (this->type_ != NULL && this->type_->is_error()))\n+    {\n+      go_assert(saw_errors());\n+      return context->backend()->error_expression();\n+    }\n \n   // If the type has been set for this expression, but the underlying\n   // object is an abstract int or float, we try to get the abstract"}]}