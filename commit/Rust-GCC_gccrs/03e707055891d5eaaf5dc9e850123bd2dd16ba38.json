{"sha": "03e707055891d5eaaf5dc9e850123bd2dd16ba38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNlNzA3MDU1ODkxZDVlYWFmNWRjOWU4NTAxMjNiZDJkZDE2YmEzOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-09-03T18:41:11Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-09-03T18:41:11Z"}, "message": "pt.c (type_unification): If strict and the function parm doesn't use template parms, just compare types.\n\n\t* pt.c (type_unification): If strict and the function parm doesn't\n\tuse template parms, just compare types.\n\nFrom-SVN: r15062", "tree": {"sha": "004ddc4a3ac77fc22b4096bda212e1211a1a2827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/004ddc4a3ac77fc22b4096bda212e1211a1a2827"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03e707055891d5eaaf5dc9e850123bd2dd16ba38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03e707055891d5eaaf5dc9e850123bd2dd16ba38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03e707055891d5eaaf5dc9e850123bd2dd16ba38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03e707055891d5eaaf5dc9e850123bd2dd16ba38/comments", "author": null, "committer": null, "parents": [{"sha": "57163df067f5bc899c643fc2c05c776ed8fddee1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57163df067f5bc899c643fc2c05c776ed8fddee1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57163df067f5bc899c643fc2c05c776ed8fddee1"}], "stats": {"total": 53, "additions": 48, "deletions": 5}, "files": [{"sha": "fe2bdbaf00463656d4635a9bd7812d0d11cb2c84", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03e707055891d5eaaf5dc9e850123bd2dd16ba38/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03e707055891d5eaaf5dc9e850123bd2dd16ba38/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=03e707055891d5eaaf5dc9e850123bd2dd16ba38", "patch": "@@ -1,4 +1,9 @@\n-Wed Sep  3 09:55:09 1997  Klaus Espenlaub  (kespenla@student.informatik.uni-ulm.de)\n+Wed Sep  3 11:09:25 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (type_unification): If strict and the function parm doesn't\n+\tuse template parms, just compare types.\n+\n+Wed Sep  3 10:35:49 1997  Klaus Espenlaub  <kespenla@student.informatik.uni-ulm.de>\n \n \t* method.c (build_overloaded_value): Replace direct call\n \tto the floating point emulator with REAL_VALUE_TO_DECIMAL macro.\n@@ -32,6 +37,15 @@ Tue Sep  2 10:27:08 1997  Richard Henderson  <rth@cygnus.com>\n \n Mon Sep  1 13:19:04 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* call.c (add_builtin_candidate): Add missing TREE_TYPE.\n+\t(compare_ics): Likewise.\n+\tFrom someone whose name I've lost (sorry).\n+\n+\t* call.c (joust): Warn about choosing one conversion op over\n+ \tanother because of 'this' argument when the other return type is\n+ \tbetter.\n+\t(source_type): New fn.\n+\n \t* call.c (build_new_op): Strip leading REF_BIND from first operand\n \tto builtin operator.\n "}, {"sha": "b30f78fcd4a0b00298da79399370987b768cc38c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03e707055891d5eaaf5dc9e850123bd2dd16ba38/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03e707055891d5eaaf5dc9e850123bd2dd16ba38/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=03e707055891d5eaaf5dc9e850123bd2dd16ba38", "patch": "@@ -5781,6 +5781,8 @@ compare_ics (ics1, ics2)\n   return 0;\n }\n \n+/* The source type for this standard conversion sequence.  */\n+\n static tree\n source_type (t)\n      tree t;"}, {"sha": "9ba46ac21b2b92a2d43fd3883c517948928e2bda", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03e707055891d5eaaf5dc9e850123bd2dd16ba38/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03e707055891d5eaaf5dc9e850123bd2dd16ba38/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=03e707055891d5eaaf5dc9e850123bd2dd16ba38", "patch": "@@ -2664,11 +2664,38 @@ type_unification (tparms, targs, parms, args, nsubsts, subr, strict)\n       if (arg == unknown_type_node)\n \treturn 1;\n \n-      if (! uses_template_parms (parm)\n-\t  && TREE_CODE_CLASS (TREE_CODE (arg)) != 't')\n+      /* Conversions will be performed on a function argument that\n+\t corresponds with a function parameter that contains only\n+\t non-deducible template parameters and explicitly specified\n+\t template parameters.  */\n+      if (! uses_template_parms (parm))\n \t{\n-\t  if (can_convert_arg (parm, TREE_TYPE (arg), arg))\n-\t    continue;\n+\t  tree type;\n+\n+\t  if (TREE_CODE_CLASS (TREE_CODE (arg)) != 't')\n+\t    type = TREE_TYPE (arg);\n+\t  else\n+\t    {\n+\t      type = arg;\n+\t      arg = NULL_TREE;\n+\t    }\n+\n+\t  if (strict)\n+\t    {\n+\t      if (comptypes (parm, type, 1))\n+\t\tcontinue;\n+\t    }\n+\t  else if (arg)\n+\t    {\n+\t      if (can_convert_arg (parm, type, arg))\n+\t\tcontinue;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (can_convert (parm, type))\n+\t\tcontinue;\n+\t    }\n+\n \t  return 1;\n \t}\n \t"}]}