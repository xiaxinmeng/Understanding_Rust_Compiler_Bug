{"sha": "30a52a6d629ebe46c788940c1cbe518e4d5cbd5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBhNTJhNmQ2MjllYmU0NmM3ODg5NDBjMWNiZTUxOGU0ZDVjYmQ1YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-05-15T21:56:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-05-15T21:56:29Z"}, "message": "PR c++/64372 - CWG 1560, gratuitous lvalue-rvalue conversion in ?:\n\n\t* call.c (build_conditional_expr_1): Don't force_rvalue when one arm\n\tis a throw-expression.\n\nFrom-SVN: r260272", "tree": {"sha": "33a71d286617d3c0aadf84776d61d8355ec2e226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33a71d286617d3c0aadf84776d61d8355ec2e226"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30a52a6d629ebe46c788940c1cbe518e4d5cbd5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a52a6d629ebe46c788940c1cbe518e4d5cbd5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a52a6d629ebe46c788940c1cbe518e4d5cbd5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a52a6d629ebe46c788940c1cbe518e4d5cbd5a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "275605696b6754f178af04ef6187b1faed6092e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/275605696b6754f178af04ef6187b1faed6092e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/275605696b6754f178af04ef6187b1faed6092e9"}], "stats": {"total": 73, "additions": 36, "deletions": 37}, "files": [{"sha": "fe80f7205e703d1c2490914f33c17431612d6f35", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a52a6d629ebe46c788940c1cbe518e4d5cbd5a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a52a6d629ebe46c788940c1cbe518e4d5cbd5a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=30a52a6d629ebe46c788940c1cbe518e4d5cbd5a", "patch": "@@ -1,3 +1,9 @@\n+2018-05-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/64372 - CWG 1560, gratuitous lvalue-rvalue conversion in ?:\n+\t* call.c (build_conditional_expr_1): Don't force_rvalue when one arm\n+\tis a throw-expression.\n+\n 2018-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* cp-tree.h (DECL_MAYBE_IN_CHARGE_CDTOR_P): New."}, {"sha": "09a3618b0074dfcf0cdfc722a40f74f289104261", "filename": "gcc/cp/call.c", "status": "modified", "additions": 16, "deletions": 37, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a52a6d629ebe46c788940c1cbe518e4d5cbd5a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a52a6d629ebe46c788940c1cbe518e4d5cbd5a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=30a52a6d629ebe46c788940c1cbe518e4d5cbd5a", "patch": "@@ -4969,56 +4969,33 @@ build_conditional_expr_1 (location_t loc, tree arg1, tree arg2, tree arg3,\n   arg3_type = unlowered_expr_type (arg3);\n   if (VOID_TYPE_P (arg2_type) || VOID_TYPE_P (arg3_type))\n     {\n-      /* Do the conversions.  We don't these for `void' type arguments\n-\t since it can't have any effect and since decay_conversion\n-\t does not handle that case gracefully.  */\n-      if (!VOID_TYPE_P (arg2_type))\n-\targ2 = decay_conversion (arg2, complain);\n-      if (!VOID_TYPE_P (arg3_type))\n-\targ3 = decay_conversion (arg3, complain);\n-      arg2_type = TREE_TYPE (arg2);\n-      arg3_type = TREE_TYPE (arg3);\n-\n       /* [expr.cond]\n \n \t One of the following shall hold:\n \n \t --The second or the third operand (but not both) is a\n-\t   throw-expression (_except.throw_); the result is of the\n-\t   type of the other and is an rvalue.\n+\t   throw-expression (_except.throw_); the result is of the type\n+\t   and value category of the other.\n \n \t --Both the second and the third operands have type void; the\n-\t   result is of type void and is an rvalue.\n-\n-\t We must avoid calling force_rvalue for expressions of type\n-\t \"void\" because it will complain that their value is being\n-\t used.  */\n+\t   result is of type void and is a prvalue.  */\n       if (TREE_CODE (arg2) == THROW_EXPR\n \t  && TREE_CODE (arg3) != THROW_EXPR)\n \t{\n-\t  if (!VOID_TYPE_P (arg3_type))\n-\t    {\n-\t      arg3 = force_rvalue (arg3, complain);\n-\t      if (arg3 == error_mark_node)\n-\t\treturn error_mark_node;\n-\t    }\n-\t  arg3_type = TREE_TYPE (arg3);\n \t  result_type = arg3_type;\n+\t  is_glvalue = glvalue_p (arg3);\n \t}\n       else if (TREE_CODE (arg2) != THROW_EXPR\n \t       && TREE_CODE (arg3) == THROW_EXPR)\n \t{\n-\t  if (!VOID_TYPE_P (arg2_type))\n-\t    {\n-\t      arg2 = force_rvalue (arg2, complain);\n-\t      if (arg2 == error_mark_node)\n-\t\treturn error_mark_node;\n-\t    }\n-\t  arg2_type = TREE_TYPE (arg2);\n \t  result_type = arg2_type;\n+\t  is_glvalue = glvalue_p (arg2);\n \t}\n       else if (VOID_TYPE_P (arg2_type) && VOID_TYPE_P (arg3_type))\n-\tresult_type = void_type_node;\n+\t{\n+\t  result_type = void_type_node;\n+\t  is_glvalue = false;\n+\t}\n       else\n \t{\n           if (complain & tf_error)\n@@ -5037,7 +5014,6 @@ build_conditional_expr_1 (location_t loc, tree arg1, tree arg2, tree arg3,\n \t  return error_mark_node;\n \t}\n \n-      is_glvalue = false;\n       goto valid_operands;\n     }\n   /* [expr.cond]\n@@ -5155,10 +5131,6 @@ build_conditional_expr_1 (location_t loc, tree arg1, tree arg2, tree arg3,\n       && same_type_p (arg2_type, arg3_type))\n     {\n       result_type = arg2_type;\n-      if (processing_template_decl)\n-\t/* Let lvalue_kind know this was a glvalue.  */\n-\tresult_type = cp_build_reference_type (result_type, xvalue_p (arg2));\n-\n       arg2 = mark_lvalue_use (arg2);\n       arg3 = mark_lvalue_use (arg3);\n       goto valid_operands;\n@@ -5352,6 +5324,13 @@ build_conditional_expr_1 (location_t loc, tree arg1, tree arg2, tree arg3,\n     return error_mark_node;\n \n  valid_operands:\n+  if (processing_template_decl && is_glvalue)\n+    {\n+      /* Let lvalue_kind know this was a glvalue.  */\n+      tree arg = (result_type == arg2_type ? arg2 : arg3);\n+      result_type = cp_build_reference_type (result_type, xvalue_p (arg));\n+    }\n+\n   result = build3_loc (loc, COND_EXPR, result_type, arg1, arg2, arg3);\n \n   /* If the ARG2 and ARG3 are the same and don't have side-effects,"}, {"sha": "b21ca98e2797e3cdfa448e688c547e3911c45e80", "filename": "gcc/testsuite/g++.dg/cpp1y/dr1560.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a52a6d629ebe46c788940c1cbe518e4d5cbd5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdr1560.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a52a6d629ebe46c788940c1cbe518e4d5cbd5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdr1560.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdr1560.C?ref=30a52a6d629ebe46c788940c1cbe518e4d5cbd5a", "patch": "@@ -0,0 +1,14 @@\n+// Core 1560\n+// { dg-do compile { target c++14 } }\n+\n+struct A\n+{\n+  A();\n+  A(const A&) = delete;\n+};\n+\n+void f(bool b)\n+{\n+  A a;\n+  b ? a : throw 42;\n+}"}]}