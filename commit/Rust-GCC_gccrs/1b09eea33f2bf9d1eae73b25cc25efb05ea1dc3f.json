{"sha": "1b09eea33f2bf9d1eae73b25cc25efb05ea1dc3f", "node_id": "C_kwDOANBUbNoAKDFiMDllZWEzM2YyYmY5ZDFlYWU3M2IyNWNjMjVlZmIwNWVhMWRjM2Y", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-08-22T14:16:16Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-08-22T21:52:24Z"}, "message": "libstdc++: Check for overflow in regex back-reference [PR106607]\n\nCurrently we fail to notice integer overflow when parsing a\nback-reference expression, or when converting the parsed result from\nlong to int. This changes the result to be int, so no conversion is\nneeded, and uses the overflow-checking built-ins to detect an\nout-of-range back-reference.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/106607\n\t* include/bits/regex_compiler.tcc (_Compiler::_M_cur_int_value):\n\tUse built-ins to check for integer overflow in back-reference\n\tnumber.\n\t* testsuite/28_regex/basic_regex/106607.cc: New test.", "tree": {"sha": "13ab4879e18170f3920e84ce931e44a006f38e84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13ab4879e18170f3920e84ce931e44a006f38e84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b09eea33f2bf9d1eae73b25cc25efb05ea1dc3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b09eea33f2bf9d1eae73b25cc25efb05ea1dc3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b09eea33f2bf9d1eae73b25cc25efb05ea1dc3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b09eea33f2bf9d1eae73b25cc25efb05ea1dc3f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "990124c35cd60cd23e0b70fc84cfb75311e80276", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990124c35cd60cd23e0b70fc84cfb75311e80276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/990124c35cd60cd23e0b70fc84cfb75311e80276"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "9f3ca63af517bfc8d416d7df6dd0bf3da546763e", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b09eea33f2bf9d1eae73b25cc25efb05ea1dc3f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b09eea33f2bf9d1eae73b25cc25efb05ea1dc3f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=1b09eea33f2bf9d1eae73b25cc25efb05ea1dc3f", "patch": "@@ -583,10 +583,12 @@ namespace __detail\n     _Compiler<_TraitsT>::\n     _M_cur_int_value(int __radix)\n     {\n-      long __v = 0;\n-      for (typename _StringT::size_type __i = 0;\n-\t   __i < _M_value.length(); ++__i)\n-\t__v =__v * __radix + _M_traits.value(_M_value[__i], __radix);\n+      int __v = 0;\n+      for (_CharT __c : _M_value)\n+\tif (__builtin_mul_overflow(__v, __radix, &__v)\n+\t    || __builtin_add_overflow(__v, _M_traits.value(__c, __radix), &__v))\n+\t    std::__throw_regex_error(regex_constants::error_backref,\n+\t\t\t\t     \"invalid back reference\");\n       return __v;\n     }\n "}, {"sha": "f8e7fb2364daf65eabff8e0fa61143174f1965b0", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/106607.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b09eea33f2bf9d1eae73b25cc25efb05ea1dc3f/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2F106607.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b09eea33f2bf9d1eae73b25cc25efb05ea1dc3f/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2F106607.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2F106607.cc?ref=1b09eea33f2bf9d1eae73b25cc25efb05ea1dc3f", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do run { target c++11 } }\n+\n+#include <regex>\n+#include <string>\n+#include <climits>\n+#include <testsuite_hooks.h>\n+\n+// PR libstdc++/106607 - Regex integer overflow on large backreference value\n+\n+int main()\n+{\n+  std::regex r(\"(.)\\\\1\"); // OK\n+\n+  try\n+  {\n+    long long n = (unsigned)-1 + 2LL;          // 4294967297 for 32-bit int\n+    VERIFY( (int)n == 1 );                     // 4294967297 % 2^32 == 1\n+    std::regex r(\"(.)\\\\\" + std::to_string(n)); // Invalid back reference.\n+    VERIFY(false);\n+  }\n+  catch (const std::regex_error& e)\n+  {\n+    VERIFY( e.code() == std::regex_constants::error_backref );\n+  }\n+}"}]}