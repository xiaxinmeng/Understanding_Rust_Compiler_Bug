{"sha": "a0e701d8a2d31d3fcbaad4de67639aadca7a1681", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBlNzAxZDhhMmQzMWQzZmNiYWFkNGRlNjc2MzlhYWRjYTdhMTY4MQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-10-30T00:13:22Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-10-30T00:13:22Z"}, "message": "openacc.h (enum acc_device_t): Reformat.\n\n\tgcc/\n\t* openacc.h (enum acc_device_t): Reformat. Ensure layout\n\tcompatibility.\n\t(enum acc_async_t): Reformat.\n\t(acc_on_device): Declare compatible with builtin and provide C++\n\twrapper.\n\t* testsuite/libgomp.oacc-c-c++-common/acc-on-device.c: New.\n\n\tgcc/testsuite/\n\t* c-c++-common/goacc/acc_on_device-2-off.c: Delete.\n\t* c-c++-common/goacc/acc_on_device-2.c: Delete.\n\nFrom-SVN: r229562", "tree": {"sha": "dd2241361205d8674dc6b7d973e1d78df3ddc6d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd2241361205d8674dc6b7d973e1d78df3ddc6d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0e701d8a2d31d3fcbaad4de67639aadca7a1681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e701d8a2d31d3fcbaad4de67639aadca7a1681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0e701d8a2d31d3fcbaad4de67639aadca7a1681", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e701d8a2d31d3fcbaad4de67639aadca7a1681/comments", "author": null, "committer": null, "parents": [{"sha": "e7c6980e55d974035a4d85b3551eca47181d1bfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c6980e55d974035a4d85b3551eca47181d1bfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c6980e55d974035a4d85b3551eca47181d1bfc"}], "stats": {"total": 127, "additions": 56, "deletions": 71}, "files": [{"sha": "ffefb43c1dd8d7132e7edea30a50fd345fbd9f4a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e701d8a2d31d3fcbaad4de67639aadca7a1681/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e701d8a2d31d3fcbaad4de67639aadca7a1681/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0e701d8a2d31d3fcbaad4de67639aadca7a1681", "patch": "@@ -1,3 +1,8 @@\n+2015-10-29  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c-c++-common/goacc/acc_on_device-2-off.c: Delete.\n+\t* c-c++-common/goacc/acc_on_device-2.c: Delete.\n+\n 2015-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/torture/builtin-convert-1.c: Require c99_runtime."}, {"sha": "59c72f755fb547400613550ddb052d381f728be0", "filename": "gcc/testsuite/c-c++-common/goacc/acc_on_device-2-off.c", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c6980e55d974035a4d85b3551eca47181d1bfc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Facc_on_device-2-off.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c6980e55d974035a4d85b3551eca47181d1bfc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Facc_on_device-2-off.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Facc_on_device-2-off.c?ref=e7c6980e55d974035a4d85b3551eca47181d1bfc", "patch": "@@ -1,24 +0,0 @@\n-/* Have to enable optimizations, as otherwise builtins won't be expanded.  */\n-/* { dg-additional-options \"-O -fdump-rtl-expand -fno-openacc\" } */\n-\n-#if __cplusplus\n-extern \"C\" {\n-#endif\n-\n-typedef enum acc_device_t { acc_device_X = 123 } acc_device_t;\n-extern int acc_on_device (acc_device_t);\n-\n-#if __cplusplus\n-}\n-#endif\n-\n-int\n-f (void)\n-{\n-  const acc_device_t dev = acc_device_X;\n-  return acc_on_device (dev);\n-}\n-\n-/* Without -fopenacc, we're expecting one call.\n-   { dg-final { scan-rtl-dump-times \"\\\\\\(call \\[^\\\\n\\]* acc_on_device\" 1 \"expand\" } } */\n-"}, {"sha": "ef622a874d55e37bfb19f6458d3d8e4394021cc5", "filename": "gcc/testsuite/c-c++-common/goacc/acc_on_device-2.c", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c6980e55d974035a4d85b3551eca47181d1bfc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Facc_on_device-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c6980e55d974035a4d85b3551eca47181d1bfc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Facc_on_device-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Facc_on_device-2.c?ref=e7c6980e55d974035a4d85b3551eca47181d1bfc", "patch": "@@ -1,28 +0,0 @@\n-/* Have to enable optimizations, as otherwise builtins won't be expanded.  */\n-/* { dg-additional-options \"-O -fdump-rtl-expand\" } */\n-\n-#if __cplusplus\n-extern \"C\" {\n-#endif\n-\n-typedef enum acc_device_t { acc_device_X = 123 } acc_device_t;\n-extern int acc_on_device (acc_device_t);\n-\n-#if __cplusplus\n-}\n-#endif\n-\n-int\n-f (void)\n-{\n-  const acc_device_t dev = acc_device_X;\n-  return acc_on_device (dev);\n-}\n-\n-/* With -fopenacc, we're expecting the builtin to be expanded, so no calls.\n-   TODO: in C++, even under extern \"C\", the use of enum for acc_device_t\n-   perturbs expansion as a builtin, which expects an int parameter.  It's fine\n-   when changing acc_device_t to plain int, but that's not what we're doing in\n-   <openacc.h>.\n-\n-   { dg-final { scan-rtl-dump-times \"\\\\\\(call \\[^\\\\n\\]* acc_on_device\" 0 \"expand\" { xfail c++ } } } */"}, {"sha": "4d1906613f9c1dd2928e550413de1506fb39cba0", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e701d8a2d31d3fcbaad4de67639aadca7a1681/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e701d8a2d31d3fcbaad4de67639aadca7a1681/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=a0e701d8a2d31d3fcbaad4de67639aadca7a1681", "patch": "@@ -1,3 +1,12 @@\n+2015-10-29  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* openacc.h (enum acc_device_t): Reformat. Ensure layout\n+\tcompatibility.\n+\t(enum acc_async_t): Reformat.\n+\t(acc_on_device): Declare compatible with builtin and provide C++\n+\twrapper.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc-on-device.c: New.\n+\n 2015-10-29  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>\n "}, {"sha": "30b18db2b691c8a00a3d181ce2650e8aa7359a71", "filename": "libgomp/openacc.h", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e701d8a2d31d3fcbaad4de67639aadca7a1681/libgomp%2Fopenacc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e701d8a2d31d3fcbaad4de67639aadca7a1681/libgomp%2Fopenacc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fopenacc.h?ref=a0e701d8a2d31d3fcbaad4de67639aadca7a1681", "patch": "@@ -47,24 +47,25 @@ extern \"C\" {\n #endif\n \n /* Types */\n-typedef enum acc_device_t\n-  {\n-    /* Keep in sync with include/gomp-constants.h.  */\n-    acc_device_none = 0,\n-    acc_device_default = 1,\n-    acc_device_host = 2,\n-    /* acc_device_host_nonshm = 3 removed.  */\n-    acc_device_not_host = 4,\n-    acc_device_nvidia = 5,\n-    _ACC_device_hwm\n-  } acc_device_t;\n-\n-typedef enum acc_async_t\n-  {\n-    /* Keep in sync with include/gomp-constants.h.  */\n-    acc_async_noval = -1,\n-    acc_async_sync  = -2\n-  } acc_async_t;\n+typedef enum acc_device_t {\n+  /* Keep in sync with include/gomp-constants.h.  */\n+  acc_device_none = 0,\n+  acc_device_default = 1,\n+  acc_device_host = 2,\n+  /* acc_device_host_nonshm = 3 removed.  */\n+  acc_device_not_host = 4,\n+  acc_device_nvidia = 5,\n+  _ACC_device_hwm,\n+  /* Ensure enumeration is layout compatible with int.  */\n+  _ACC_highest = __INT_MAX__,\n+  _ACC_neg = -1\n+} acc_device_t;\n+\n+typedef enum acc_async_t {\n+  /* Keep in sync with include/gomp-constants.h.  */\n+  acc_async_noval = -1,\n+  acc_async_sync  = -2\n+} acc_async_t;\n \n int acc_get_num_devices (acc_device_t) __GOACC_NOTHROW;\n void acc_set_device_type (acc_device_t) __GOACC_NOTHROW;\n@@ -79,7 +80,11 @@ void acc_wait_all (void) __GOACC_NOTHROW;\n void acc_wait_all_async (int) __GOACC_NOTHROW;\n void acc_init (acc_device_t) __GOACC_NOTHROW;\n void acc_shutdown (acc_device_t) __GOACC_NOTHROW;\n-int acc_on_device (acc_device_t) __GOACC_NOTHROW;\n+#ifdef __cplusplus\n+int acc_on_device (int __arg) __GOACC_NOTHROW;\n+#else\n+int acc_on_device (acc_device_t __arg) __GOACC_NOTHROW;\n+#endif\n void *acc_malloc (size_t) __GOACC_NOTHROW;\n void acc_free (void *) __GOACC_NOTHROW;\n /* Some of these would be more correct with const qualifiers, but\n@@ -113,6 +118,13 @@ int acc_set_cuda_stream (int, void *) __GOACC_NOTHROW;\n \n #ifdef __cplusplus\n }\n+\n+/* Forwarding function with correctly typed arg.  */\n+\n+inline int acc_on_device (acc_device_t __arg) __GOACC_NOTHROW\n+{\n+  return acc_on_device ((int) __arg);\n+}\n #endif\n \n #endif /* _OPENACC_H */"}, {"sha": "88c000e62f0b3456aa86d1e305c0e422f0a3adfe", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc-on-device.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e701d8a2d31d3fcbaad4de67639aadca7a1681/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc-on-device.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e701d8a2d31d3fcbaad4de67639aadca7a1681/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc-on-device.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc-on-device.c?ref=a0e701d8a2d31d3fcbaad4de67639aadca7a1681", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include <openacc.h>\n+\n+int Foo (acc_device_t x)\n+{\n+  return acc_on_device (x);\n+}\n+\n+/* { dg-final { scan-assembler-not \"acc_on_device\" } } */"}]}