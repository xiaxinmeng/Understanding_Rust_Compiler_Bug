{"sha": "fd22e260b5d48a245411c09858fa42b1614a89c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQyMmUyNjBiNWQ0OGEyNDU0MTFjMDk4NThmYTQyYjE2MTRhODljNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-18T10:02:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-18T10:02:58Z"}, "message": "[multiple changes]\n\n2016-04-18  Yannick Moy  <moy@adacore.com>\n\n\t* sem_res.adb (Resolve_Call): Prevent inlining of\n\tcalls inside expression functions.  Factor previous code issuing\n\terrors to call Cannot_Inline instead, which does appropriate\n\tprocessing of message for GNATprove.\n\n2016-04-18  Arnaud Charlet  <charlet@adacore.com>\n\n\t* einfo.ads, sem_ch3.adb, sem_ch8.adb, osint-l.adb, rtsfind.adb,\n\tosint-b.adb: Cleanups.\n\n2016-04-18  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Only create\n\tbody to inline in GNATprove mode when SPARK_Mode On applies to\n\tsubprogram body.\n\t* sem_prag.adb, sem_prag.ads (Get_SPARK_Mode_Type): Make function\n\tpublic.\n\n2016-04-18  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* layout.adb: Fix minor typo in comment.\n\t* inline.adb: Fix minor pasto.\n\t* sem_ch12.ads: Fix minor typos in comments.\n\nFrom-SVN: r235111", "tree": {"sha": "81ad184a60bc98c7641724338100bd5ead5de616", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81ad184a60bc98c7641724338100bd5ead5de616"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd22e260b5d48a245411c09858fa42b1614a89c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd22e260b5d48a245411c09858fa42b1614a89c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd22e260b5d48a245411c09858fa42b1614a89c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd22e260b5d48a245411c09858fa42b1614a89c7/comments", "author": null, "committer": null, "parents": [{"sha": "0d66b5969fec023f9aa6c297ba8550f5621cb2ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d66b5969fec023f9aa6c297ba8550f5621cb2ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d66b5969fec023f9aa6c297ba8550f5621cb2ea"}], "stats": {"total": 173, "additions": 123, "deletions": 50}, "files": [{"sha": "c8e9141ff328d1edd12aecfafe9881cde4b36721", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fd22e260b5d48a245411c09858fa42b1614a89c7", "patch": "@@ -1,3 +1,29 @@\n+2016-04-18  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Call): Prevent inlining of\n+\tcalls inside expression functions.  Factor previous code issuing\n+\terrors to call Cannot_Inline instead, which does appropriate\n+\tprocessing of message for GNATprove.\n+\n+2016-04-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* einfo.ads, sem_ch3.adb, sem_ch8.adb, osint-l.adb, rtsfind.adb,\n+\tosint-b.adb: Cleanups.\n+\n+2016-04-18  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Only create\n+\tbody to inline in GNATprove mode when SPARK_Mode On applies to\n+\tsubprogram body.\n+\t* sem_prag.adb, sem_prag.ads (Get_SPARK_Mode_Type): Make function\n+\tpublic.\n+\n+2016-04-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* layout.adb: Fix minor typo in comment.\n+\t* inline.adb: Fix minor pasto.\n+\t* sem_ch12.ads: Fix minor typos in comments.\n+\n 2016-04-18  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_disp.adb (Check_Dispatching_Call): Major rewriting to"}, {"sha": "1fb29e4d9ac857978a7ed7649bf95c46130ea3b3", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=fd22e260b5d48a245411c09858fa42b1614a89c7", "patch": "@@ -3449,7 +3449,7 @@ package Einfo is\n \n --    Next_Discriminant (synthesized)\n --       Applies to discriminants returned by First/Next_Discriminant. Returns\n---       the next language-defined (ie: perhaps non-girder) discriminant by\n+--       the next language-defined (i.e. perhaps non-girder) discriminant by\n --       following the chain of declared entities as long as the kind of the\n --       entity corresponds to a discriminant. Note that the discriminants\n --       might be the only components of the record. Returns Empty if there"}, {"sha": "9a7b3758da484288f85261e195c243540ecb8a3b", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=fd22e260b5d48a245411c09858fa42b1614a89c7", "patch": "@@ -3866,7 +3866,6 @@ package body Inline is\n          --  We can now complete the cleanup actions of scopes that contain\n          --  pending instantiations (skipped for generic units, since we\n          --  never need any cleanups in generic units).\n-         --  pending instantiations.\n \n          if Expander_Active\n            and then not Is_Generic_Unit (Main_Unit_Entity)"}, {"sha": "cee5853fcf2fb5a5b7a07da2beff53bc6e87f669", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=fd22e260b5d48a245411c09858fa42b1614a89c7", "patch": "@@ -3318,7 +3318,7 @@ package body Layout is\n             --  we have no way of doing that or easily figuring it out, so we\n             --  don't bother.\n \n-            --  Historical note. In versions of GNAT prior to Nov 6th, 2010, an\n+            --  Historical note. In versions of GNAT prior to Nov 6th, 2011, an\n             --  odd distinction was made between inherited alignments greater\n             --  than the computed alignment (where the larger alignment was\n             --  inherited) and inherited alignments smaller than the computed"}, {"sha": "322bc6cdba0efa34d9b8ebd6e78c3a7e4068c67f", "filename": "gcc/ada/osint-b.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Fosint-b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Fosint-b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint-b.adb?ref=fd22e260b5d48a245411c09858fa42b1614a89c7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -153,7 +153,7 @@ package body Osint.B is\n    -- More_Lib_Files --\n    --------------------\n \n-   function More_Lib_Files return Boolean renames  More_Files;\n+   function More_Lib_Files return Boolean renames More_Files;\n \n    ------------------------\n    -- Next_Main_Lib_File --"}, {"sha": "eb7e3c379c19d3753a9e540120e17f00db659669", "filename": "gcc/ada/osint-l.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Fosint-l.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Fosint-l.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint-l.adb?ref=fd22e260b5d48a245411c09858fa42b1614a89c7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,7 +29,7 @@ package body Osint.L is\n    -- More_Lib_Files --\n    --------------------\n \n-   function More_Lib_Files return Boolean renames  More_Files;\n+   function More_Lib_Files return Boolean renames More_Files;\n \n    ------------------------\n    -- Next_Main_Lib_File --"}, {"sha": "e2d9cb5301888d537f0e45f969d170a0f1023fc8", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=fd22e260b5d48a245411c09858fa42b1614a89c7", "patch": "@@ -730,7 +730,7 @@ package body Rtsfind is\n \n          declare\n             U : RT_Unit_Table_Record\n-                  renames  RT_Unit_Table (RE_Unit_Table (E));\n+                  renames RT_Unit_Table (RE_Unit_Table (E));\n          begin\n             if No (U.Entity) then\n                U.Entity := S;"}, {"sha": "faf8917b11ec2e0edf84e5e9122ee9c0ca2d5415", "filename": "gcc/ada/sem_ch12.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Fsem_ch12.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Fsem_ch12.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.ads?ref=fd22e260b5d48a245411c09858fa42b1614a89c7", "patch": "@@ -100,7 +100,7 @@ package Sem_Ch12 is\n       Body_Optional : Boolean := False);\n    --  Called after semantic analysis, to complete the instantiation of\n    --  package instances. The flag Inlined_Body is set if the body is\n-   --  being instantiated on the fly for inlined purposes.\n+   --  being instantiated on the fly for inlining purposes.\n    --\n    --  The flag Body_Optional indicates that the call is for an instance\n    --  that precedes the current instance in the same declarative part.\n@@ -112,10 +112,10 @@ package Sem_Ch12 is\n    --  appears in the context of some other unit P that contains an instance\n    --  of G, we compile the body of I2, but not that of I1. However, when we\n    --  compile U as the main unit, we compile both bodies. This will lead to\n-   --  lead to link-time errors if the compilation of I1 generates public\n-   --  symbols, because those in I2 will receive different names in both\n-   --  cases. This forces us to analyze the body of I1 even when U is not the\n-   --  main unit. We don't want this additional mechanism to generate an error\n+   --  link-time errors if the compilation of I1 generates public symbols,\n+   --  because those in I2 will receive different names in both cases.\n+   --  This forces us to analyze the body of I1 even when U is not the main\n+   --  unit. We don't want this additional mechanism to generate an error\n    --  when the body of the generic for I1 is not present, and this is the\n    --  reason for the presence of the flag Body_Optional, which is exchanged\n    --  between the current procedure and Load_Parent_Of_Generic."}, {"sha": "a010b54cb618a272d25dbce9597674a07c5a5c41", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=fd22e260b5d48a245411c09858fa42b1614a89c7", "patch": "@@ -19828,7 +19828,7 @@ package body Sem_Ch3 is\n                         end if;\n \n                      elsif Is_Dispatching_Operation (Prim)\n-                       and then Disp_Typ  /= Full_T\n+                       and then Disp_Typ /= Full_T\n                      then\n \n                         --  Verify that it is not otherwise controlled by a"}, {"sha": "a0a75b2ef8d311b37fcf79f0700985d1e9cf3f14", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 53, "deletions": 12, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=fd22e260b5d48a245411c09858fa42b1614a89c7", "patch": "@@ -2178,6 +2178,11 @@ package body Sem_Ch6 is\n       --  Check whether unanalyzed body has an aspect or pragma that may\n       --  generate a SPARK contract.\n \n+      function Body_Has_SPARK_Mode_On return Boolean;\n+      --  Check whether SPARK_Mode On applies to the subprogram body, either\n+      --  because it is specified directly on the body, or because it is\n+      --  inherited from the enclosing subprogram or package.\n+\n       procedure Build_Subprogram_Declaration;\n       --  Create a matching subprogram declaration for subprogram body N\n \n@@ -2272,6 +2277,53 @@ package body Sem_Ch6 is\n          return False;\n       end Body_Has_Contract;\n \n+      ----------------------------\n+      -- Body_Has_SPARK_Mode_On --\n+      ----------------------------\n+\n+      function Body_Has_SPARK_Mode_On return Boolean is\n+         Decls : constant List_Id := Declarations (N);\n+         Item  : Node_Id;\n+\n+      begin\n+         --  Check for SPARK_Mode aspect\n+\n+         if Present (Aspect_Specifications (N)) then\n+            Item := First (Aspect_Specifications (N));\n+            while Present (Item) loop\n+               if Get_Aspect_Id (Item) = Aspect_SPARK_Mode then\n+                  return No (Expression (Item))\n+                           or else\n+                        (Nkind (Expression (Item)) = N_Identifier\n+                           and then\n+                         Get_SPARK_Mode_Type (Chars (Expression (Item))) = On);\n+               end if;\n+\n+               Next (Item);\n+            end loop;\n+         end if;\n+\n+         --  Check for SPARK_Mode pragma\n+\n+         if Present (Decls) then\n+            Item := First (Decls);\n+            while Present (Item) loop\n+               if Nkind (Item) = N_Pragma\n+                 and then Get_Pragma_Id (Item) = Pragma_SPARK_Mode\n+               then\n+                  return Get_SPARK_Mode_From_Pragma (Item) = On;\n+               end if;\n+\n+               Next (Item);\n+            end loop;\n+         end if;\n+\n+         --  Applicable SPARK_Mode is inherited from the enclosing subprogram\n+         --  or package.\n+\n+         return SPARK_Mode = On;\n+      end Body_Has_SPARK_Mode_On;\n+\n       ----------------------------------\n       -- Build_Subprogram_Declaration --\n       ----------------------------------\n@@ -3695,6 +3747,7 @@ package body Sem_Ch6 is\n         and then Present (Spec_Id)\n         and then\n           Nkind (Unit_Declaration_Node (Spec_Id)) = N_Subprogram_Declaration\n+        and then Body_Has_SPARK_Mode_On\n         and then Can_Be_Inlined_In_GNATprove_Mode (Spec_Id, Body_Id)\n         and then not Body_Has_Contract\n       then\n@@ -3814,18 +3867,6 @@ package body Sem_Ch6 is\n \n       Analyze_Entry_Or_Subprogram_Body_Contract (Body_Id);\n \n-      --  If SPARK_Mode for body is not On, disable frontend inlining for this\n-      --  subprogram in GNATprove mode, as its body should not be analyzed.\n-\n-      if SPARK_Mode /= On\n-        and then GNATprove_Mode\n-        and then Present (Spec_Id)\n-        and then Nkind (Parent (Parent (Spec_Id))) = N_Subprogram_Declaration\n-      then\n-         Set_Body_To_Inline (Parent (Parent (Spec_Id)), Empty);\n-         Set_Is_Inlined_Always (Spec_Id, False);\n-      end if;\n-\n       --  Check completion, and analyze the statements\n \n       Check_Completion;"}, {"sha": "73303f49f1215a58d2a1aa747b79b808a73d45f8", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=fd22e260b5d48a245411c09858fa42b1614a89c7", "patch": "@@ -7526,7 +7526,7 @@ package body Sem_Ch8 is\n          --  array of Boolean type.\n \n          when Name_Op_And | Name_Op_Not | Name_Op_Or  | Name_Op_Xor =>\n-            while Id  /= Priv_Id loop\n+            while Id /= Priv_Id loop\n                if Valid_Boolean_Arg (Id) and then Is_Base_Type (Id) then\n                   Add_Implicit_Operator (Id);\n                   return True;\n@@ -7538,7 +7538,7 @@ package body Sem_Ch8 is\n          --  Equality: look for any non-limited type (result is Boolean)\n \n          when Name_Op_Eq | Name_Op_Ne =>\n-            while Id  /= Priv_Id loop\n+            while Id /= Priv_Id loop\n                if Is_Type (Id)\n                  and then not Is_Limited_Type (Id)\n                  and then Is_Base_Type (Id)\n@@ -7553,7 +7553,7 @@ package body Sem_Ch8 is\n          --  Comparison operators: scalar type, or array of scalar\n \n          when Name_Op_Lt | Name_Op_Le | Name_Op_Gt | Name_Op_Ge =>\n-            while Id  /= Priv_Id loop\n+            while Id /= Priv_Id loop\n                if (Is_Scalar_Type (Id)\n                     or else (Is_Array_Type (Id)\n                               and then Is_Scalar_Type (Component_Type (Id))))\n@@ -7576,7 +7576,7 @@ package body Sem_Ch8 is\n               Name_Op_Multiply |\n               Name_Op_Divide   |\n               Name_Op_Expon    =>\n-            while Id  /= Priv_Id loop\n+            while Id /= Priv_Id loop\n                if Is_Numeric_Type (Id) and then Is_Base_Type (Id) then\n                   Add_Implicit_Operator (Id);\n                   return True;\n@@ -7588,7 +7588,7 @@ package body Sem_Ch8 is\n          --  Concatenation: any one-dimensional array type\n \n          when Name_Op_Concat =>\n-            while Id  /= Priv_Id loop\n+            while Id /= Priv_Id loop\n                if Is_Array_Type (Id)\n                  and then Number_Dimensions (Id) = 1\n                  and then Is_Base_Type (Id)"}, {"sha": "1d64de503f480e340aecf04f5dd8e9ad9e28f327", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=fd22e260b5d48a245411c09858fa42b1614a89c7", "patch": "@@ -235,11 +235,6 @@ package body Sem_Prag is\n    --  original one, following the renaming chain) is returned. Otherwise the\n    --  entity is returned unchanged. Should be in Einfo???\n \n-   function Get_SPARK_Mode_Type (N : Name_Id) return SPARK_Mode_Type;\n-   --  Subsidiary to the analysis of pragma SPARK_Mode as well as subprogram\n-   --  Get_SPARK_Mode_Type. Convert a name into a corresponding value of type\n-   --  SPARK_Mode_Type.\n-\n    function Has_Extra_Parentheses (Clause : Node_Id) return Boolean;\n    --  Subsidiary to the analysis of pragmas Depends and Refined_Depends.\n    --  Determine whether dependency clause Clause is surrounded by extra"}, {"sha": "3bc2f65ae92faabab72b7e0059d51edb9902db59", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=fd22e260b5d48a245411c09858fa42b1614a89c7", "patch": "@@ -383,6 +383,11 @@ package Sem_Prag is\n    function Get_SPARK_Mode_From_Pragma (N : Node_Id) return SPARK_Mode_Type;\n    --  Given a pragma SPARK_Mode node, return corresponding mode id\n \n+   function Get_SPARK_Mode_Type (N : Name_Id) return SPARK_Mode_Type;\n+   --  Subsidiary to the analysis of pragma SPARK_Mode as well as subprogram\n+   --  Get_SPARK_Mode_From_Pragma. Convert a name into a corresponding value\n+   --  of type SPARK_Mode_Type.\n+\n    procedure Initialize;\n    --  Initializes data structures used for pragma processing. Must be called\n    --  before analyzing each new main source program."}, {"sha": "bd4b562f09bc7407a8f6e71d27eca3f9bb629d11", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22e260b5d48a245411c09858fa42b1614a89c7/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=fd22e260b5d48a245411c09858fa42b1614a89c7", "patch": "@@ -6428,16 +6428,14 @@ package body Sem_Res is\n             --  assertions as logic expressions.\n \n             elsif In_Assertion_Expr /= 0 then\n-               Error_Msg_NE (\"info: no contextual analysis of &?\", N, Nam);\n-               Error_Msg_N (\"\\call appears in assertion expression\", N);\n-               Set_Is_Inlined_Always (Nam_UA, False);\n+               Cannot_Inline\n+                 (\"cannot inline & (in assertion expression)?\", N, Nam_UA);\n \n             --  Calls cannot be inlined inside default expressions\n \n             elsif In_Default_Expr then\n-               Error_Msg_NE (\"info: no contextual analysis of &?\", N, Nam);\n-               Error_Msg_N (\"\\call appears in default expression\", N);\n-               Set_Is_Inlined_Always (Nam_UA, False);\n+               Cannot_Inline\n+                 (\"cannot inline & (in default expression)?\", N, Nam_UA);\n \n             --  Inlining should not be performed during pre-analysis\n \n@@ -6447,10 +6445,8 @@ package body Sem_Res is\n                --  inlined if the corresponding body has not been seen yet.\n \n                if No (Body_Id) then\n-                  Error_Msg_NE\n-                    (\"info: no contextual analysis of & (body not seen yet)?\",\n-                     N, Nam);\n-                  Set_Is_Inlined_Always (Nam_UA, False);\n+                  Cannot_Inline\n+                    (\"cannot inline & (body not seen yet)?\", N, Nam_UA);\n \n                --  Nothing to do if there is no body to inline, indicating that\n                --  the subprogram is not suitable for inlining in GNATprove\n@@ -6459,15 +6455,26 @@ package body Sem_Res is\n                elsif No (Body_To_Inline (Nam_Decl)) then\n                   null;\n \n+               --  Do not inline calls inside expression functions, as this\n+               --  would prevent interpreting them as logical formulas in\n+               --  GNATprove.\n+\n+               elsif Present (Current_Subprogram)\n+                       and then\n+                     Is_Expression_Function_Or_Completion (Current_Subprogram)\n+               then\n+                  Cannot_Inline\n+                    (\"cannot inline & (inside expression function)?\",\n+                     N, Nam_UA);\n+\n                --  Calls cannot be inlined inside potentially unevaluated\n                --  expressions, as this would create complex actions inside\n                --  expressions, that are not handled by GNATprove.\n \n                elsif Is_Potentially_Unevaluated (N) then\n-                  Error_Msg_NE (\"info: no contextual analysis of &?\", N, Nam);\n-                  Error_Msg_N\n-                    (\"\\call appears in potentially unevaluated context\", N);\n-                  Set_Is_Inlined_Always (Nam_UA, False);\n+                  Cannot_Inline\n+                    (\"cannot inline & (in potentially unevaluated context)?\",\n+                     N, Nam_UA);\n \n                --  Otherwise, inline the call\n "}]}