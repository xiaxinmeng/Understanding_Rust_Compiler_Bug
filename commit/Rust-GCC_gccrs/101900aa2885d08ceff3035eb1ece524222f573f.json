{"sha": "101900aa2885d08ceff3035eb1ece524222f573f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAxOTAwYWEyODg1ZDA4Y2VmZjMwMzVlYjFlY2U1MjQyMjJmNTczZg==", "commit": {"author": {"name": "Fernando Nasser", "email": "fnasser@redhat.com", "date": "2004-01-16T16:15:49Z"}, "committer": {"name": "Fernando Nasser", "email": "fnasser@gcc.gnu.org", "date": "2004-01-16T16:15:49Z"}, "message": "EventDispatchThread.java (run): Stop running when interrupted.\n\n        * java/awt/EventDispatchThread.java (run): Stop running when\n        interrupted.\n        * java/awt/EventQueue.java (pop): Stop dispatch thread when done.\n        Reset the queue after transferring its contents.\n        (push): Start a new dispatch thread if none is running.\n\nFrom-SVN: r75977", "tree": {"sha": "23d41a020b7d3f81a3015111bd82e8f4e329bb48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23d41a020b7d3f81a3015111bd82e8f4e329bb48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/101900aa2885d08ceff3035eb1ece524222f573f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/101900aa2885d08ceff3035eb1ece524222f573f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/101900aa2885d08ceff3035eb1ece524222f573f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/101900aa2885d08ceff3035eb1ece524222f573f/comments", "author": {"login": "fnasser", "id": 326533, "node_id": "MDQ6VXNlcjMyNjUzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/326533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fnasser", "html_url": "https://github.com/fnasser", "followers_url": "https://api.github.com/users/fnasser/followers", "following_url": "https://api.github.com/users/fnasser/following{/other_user}", "gists_url": "https://api.github.com/users/fnasser/gists{/gist_id}", "starred_url": "https://api.github.com/users/fnasser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fnasser/subscriptions", "organizations_url": "https://api.github.com/users/fnasser/orgs", "repos_url": "https://api.github.com/users/fnasser/repos", "events_url": "https://api.github.com/users/fnasser/events{/privacy}", "received_events_url": "https://api.github.com/users/fnasser/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ed5fd905c6fd33256c0a64f5913d4064bc5eccd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ed5fd905c6fd33256c0a64f5913d4064bc5eccd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ed5fd905c6fd33256c0a64f5913d4064bc5eccd"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "c16a006c96b9614852af9b23037f7ead3024337d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101900aa2885d08ceff3035eb1ece524222f573f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101900aa2885d08ceff3035eb1ece524222f573f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=101900aa2885d08ceff3035eb1ece524222f573f", "patch": "@@ -1,3 +1,11 @@\n+2004-01-16  Fernando Nasser  <fnasser@redhat.com>\n+\n+\t* java/awt/EventDispatchThread.java (run): Stop running when\n+\tinterrupted.\n+\t* java/awt/EventQueue.java (pop): Stop dispatch thread when done.\n+\tReset the queue after transferring its contents.\n+\t(push): Start a new dispatch thread if none is running.\n+\n 2004-01-16\u00a0 Olga Rodimina <rodimina@redhat.com>\n \n \t* gnu/java/awt/peer/gtk/GdkGraphics2D.java:"}, {"sha": "91145e1bb48a7a8a9c080fc57fce92ed4a324ac0", "filename": "libjava/java/awt/EventDispatchThread.java", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101900aa2885d08ceff3035eb1ece524222f573f/libjava%2Fjava%2Fawt%2FEventDispatchThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101900aa2885d08ceff3035eb1ece524222f573f/libjava%2Fjava%2Fawt%2FEventDispatchThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FEventDispatchThread.java?ref=101900aa2885d08ceff3035eb1ece524222f573f", "patch": "@@ -62,8 +62,18 @@ public void run()\n         try\n \t{\n \t  AWTEvent evt = queue.getNextEvent();\n+\t  if (isInterrupted ())\n+\t    {\n+\t      // We are interrupted when we should finish executing\n+\t      return;\n+\t    }\n \t  queue.dispatchEvent(evt);\n \t}\n+\tcatch (InterruptedException ie)\n+\t{\n+\t  // We are interrupted when we should finish executing\n+\t  return;\n+\t}\n \tcatch (Throwable x)\n \t{\n \t  System.err.println(\"Exception during event dispatch:\");"}, {"sha": "fe9138fa3f765a71b86917cfee28c89d91824780", "filename": "libjava/java/awt/EventQueue.java", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101900aa2885d08ceff3035eb1ece524222f573f/libjava%2Fjava%2Fawt%2FEventQueue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101900aa2885d08ceff3035eb1ece524222f573f/libjava%2Fjava%2Fawt%2FEventQueue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FEventQueue.java?ref=101900aa2885d08ceff3035eb1ece524222f573f", "patch": "@@ -301,8 +301,8 @@ public static AWTEvent getCurrentEvent()\n   /**\n    * Allows a custom EventQueue implementation to replace this one. \n    * All pending events are transferred to the new queue. Calls to postEvent,\n-   * getNextEvent, and peekEvent are forwarded to the pushed queue until it\n-   * is removed with a pop().\n+   * getNextEvent, and peekEvent and others are forwarded to the pushed queue\n+   * until it is removed with a pop().\n    *\n    * @exception NullPointerException if newEventQueue is null.\n    */\n@@ -320,6 +320,10 @@ public synchronized void push(EventQueue newEventQueue)\n         return;\n       }\n \n+    /* Make sure we have a live dispatch thread to drive the queue */\n+    if (dispatchThread == null)\n+      dispatchThread = new EventDispatchThread(this);\n+\n     int i = next_out;\n     while (i != next_in)\n       {\n@@ -361,6 +365,13 @@ protected void pop() throws EmptyStackException\n             if (++i == queue.length)\n               i = 0;\n           }\n+\t// Empty the queue so it can be reused\n+\tnext_in = 0;\n+\tnext_out = 0;\n+\n+        // Tell our EventDispatchThread that it can end execution\n+        dispatchThread.interrupt ();\n+\tdispatchThread = null;\n       }\n   }\n "}]}