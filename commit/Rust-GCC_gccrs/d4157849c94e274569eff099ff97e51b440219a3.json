{"sha": "d4157849c94e274569eff099ff97e51b440219a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQxNTc4NDljOTRlMjc0NTY5ZWZmMDk5ZmY5N2U1MWI0NDAyMTlhMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-24T17:22:40Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-24T17:22:40Z"}, "message": "compiler: Better handling of erroneous function signatures.\n\nFrom-SVN: r183479", "tree": {"sha": "d181726a4306d3ebca54c7ffef309e37c31621ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d181726a4306d3ebca54c7ffef309e37c31621ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4157849c94e274569eff099ff97e51b440219a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4157849c94e274569eff099ff97e51b440219a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4157849c94e274569eff099ff97e51b440219a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4157849c94e274569eff099ff97e51b440219a3/comments", "author": null, "committer": null, "parents": [{"sha": "00a42fb364bba1a8cea3e36c15969d7fbc10a1fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a42fb364bba1a8cea3e36c15969d7fbc10a1fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00a42fb364bba1a8cea3e36c15969d7fbc10a1fe"}], "stats": {"total": 166, "additions": 140, "deletions": 26}, "files": [{"sha": "447e652860e1c8d8d7ee768aa55d4b67c543b4e9", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4157849c94e274569eff099ff97e51b440219a3/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4157849c94e274569eff099ff97e51b440219a3/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=d4157849c94e274569eff099ff97e51b440219a3", "patch": "@@ -1455,8 +1455,9 @@ Unknown_expression::do_lower(Gogo*, Named_object*, Statement_inserter*, int)\n \t{\n \t  if (this->is_composite_literal_key_)\n \t    return this;\n-\t  error_at(location, \"reference to undefined name %qs\",\n-\t\t   this->named_object_->message_name().c_str());\n+\t  if (!this->no_error_message_)\n+\t    error_at(location, \"reference to undefined name %qs\",\n+\t\t     this->named_object_->message_name().c_str());\n \t  return Expression::make_error(location);\n \t}\n     }\n@@ -1469,8 +1470,9 @@ Unknown_expression::do_lower(Gogo*, Named_object*, Statement_inserter*, int)\n     case Named_object::NAMED_OBJECT_TYPE_DECLARATION:\n       if (this->is_composite_literal_key_)\n \treturn this;\n-      error_at(location, \"reference to undefined type %qs\",\n-\t       real->message_name().c_str());\n+      if (!this->no_error_message_)\n+\terror_at(location, \"reference to undefined type %qs\",\n+\t\t real->message_name().c_str());\n       return Expression::make_error(location);\n     case Named_object::NAMED_OBJECT_VAR:\n       real->var_value()->set_is_used();\n@@ -1481,7 +1483,8 @@ Unknown_expression::do_lower(Gogo*, Named_object*, Statement_inserter*, int)\n     case Named_object::NAMED_OBJECT_PACKAGE:\n       if (this->is_composite_literal_key_)\n \treturn this;\n-      error_at(location, \"unexpected reference to package\");\n+      if (!this->no_error_message_)\n+\terror_at(location, \"unexpected reference to package\");\n       return Expression::make_error(location);\n     default:\n       go_unreachable();\n@@ -1499,7 +1502,7 @@ Unknown_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n \n // Make a reference to an unknown name.\n \n-Expression*\n+Unknown_expression*\n Expression::make_unknown_reference(Named_object* no, Location location)\n {\n   return new Unknown_expression(no, location);\n@@ -8483,6 +8486,11 @@ Builtin_call_expression::do_check_types(Gogo*)\n \t\t    || type->function_type() != NULL\n \t\t    || type->is_slice_type())\n \t\t  ;\n+\t\telse if ((*p)->is_type_expression())\n+\t\t  {\n+\t\t    // If this is a type expression it's going to give\n+\t\t    // an error anyhow, so we don't need one here.\n+\t\t  }\n \t\telse\n \t\t  this->report_error(_(\"unsupported argument type to \"\n \t\t\t\t       \"builtin function\"));"}, {"sha": "6672b684e47d9e00e3cdd5cc213db75f54eb6302", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4157849c94e274569eff099ff97e51b440219a3/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4157849c94e274569eff099ff97e51b440219a3/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=d4157849c94e274569eff099ff97e51b440219a3", "patch": "@@ -153,7 +153,7 @@ class Expression\n \n   // Make a reference to an unknown name.  In a correct program this\n   // will always be lowered to a real const/var/func reference.\n-  static Expression*\n+  static Unknown_expression*\n   make_unknown_reference(Named_object*, Location);\n \n   // Make a constant bool expression.\n@@ -1554,7 +1554,8 @@ class Unknown_expression : public Parser_expression\n  public:\n   Unknown_expression(Named_object* named_object, Location location)\n     : Parser_expression(EXPRESSION_UNKNOWN_REFERENCE, location),\n-      named_object_(named_object), is_composite_literal_key_(false)\n+      named_object_(named_object), no_error_message_(false),\n+      is_composite_literal_key_(false)\n   { }\n \n   // The associated named object.\n@@ -1566,6 +1567,13 @@ class Unknown_expression : public Parser_expression\n   const std::string&\n   name() const;\n \n+  // Call this to indicate that we should not give an error if this\n+  // name is never defined.  This is used to avoid knock-on errors\n+  // during an erroneous parse.\n+  void\n+  set_no_error_message()\n+  { this->no_error_message_ = true; }\n+\n   // Note that this expression is being used as the key in a composite\n   // literal, so it may be OK if it is not resolved.\n   void\n@@ -1592,6 +1600,9 @@ class Unknown_expression : public Parser_expression\n  private:\n   // The unknown name.\n   Named_object* named_object_;\n+  // True if we should not give errors if this is undefined.  This is\n+  // used if there was a parse failure.\n+  bool no_error_message_;\n   // True if this is the key in a composite literal.\n   bool is_composite_literal_key_;\n };"}, {"sha": "9ab4a3bf2ac59f1d81f65b1ac7f99abb3737aef9", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4157849c94e274569eff099ff97e51b440219a3/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4157849c94e274569eff099ff97e51b440219a3/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=d4157849c94e274569eff099ff97e51b440219a3", "patch": "@@ -1108,6 +1108,10 @@ Named_object::get_tree(Gogo* gogo, Named_object* function)\n       }\n       break;\n \n+    case NAMED_OBJECT_ERRONEOUS:\n+      decl = error_mark_node;\n+      break;\n+\n     default:\n       go_unreachable();\n     }"}, {"sha": "cf16ef6ccd6553cc442da4ae30cac02ba98e241b", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4157849c94e274569eff099ff97e51b440219a3/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4157849c94e274569eff099ff97e51b440219a3/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=d4157849c94e274569eff099ff97e51b440219a3", "patch": "@@ -626,19 +626,19 @@ Gogo::start_function(const std::string& name, Function_type* type,\n       const Typed_identifier* receiver = type->receiver();\n       Variable* this_param = new Variable(receiver->type(), NULL, false,\n \t\t\t\t\t  true, true, location);\n-      std::string name = receiver->name();\n-      if (name.empty())\n+      std::string rname = receiver->name();\n+      if (rname.empty())\n \t{\n \t  // We need to give receivers a name since they wind up in\n \t  // DECL_ARGUMENTS.  FIXME.\n \t  static unsigned int count;\n \t  char buf[50];\n \t  snprintf(buf, sizeof buf, \"r.%u\", count);\n \t  ++count;\n-\t  name = buf;\n+\t  rname = buf;\n \t}\n-      if (!Gogo::is_sink_name(name))\n-\tblock->bindings()->add_variable(name, NULL, this_param);\n+      if (!Gogo::is_sink_name(rname))\n+\tblock->bindings()->add_variable(rname, NULL, this_param);\n     }\n \n   const Typed_identifier_list* parameters = type->parameters();\n@@ -654,18 +654,18 @@ Gogo::start_function(const std::string& name, Function_type* type,\n \t  if (is_varargs && p + 1 == parameters->end())\n \t    param->set_is_varargs_parameter();\n \n-\t  std::string name = p->name();\n-\t  if (name.empty() || Gogo::is_sink_name(name))\n+\t  std::string pname = p->name();\n+\t  if (pname.empty() || Gogo::is_sink_name(pname))\n \t    {\n \t      // We need to give parameters a name since they wind up\n \t      // in DECL_ARGUMENTS.  FIXME.\n \t      static unsigned int count;\n \t      char buf[50];\n \t      snprintf(buf, sizeof buf, \"p.%u\", count);\n \t      ++count;\n-\t      name = buf;\n+\t      pname = buf;\n \t    }\n-\t  block->bindings()->add_variable(name, NULL, param);\n+\t  block->bindings()->add_variable(pname, NULL, param);\n \t}\n     }\n \n@@ -834,6 +834,14 @@ Gogo::finish_block(Location location)\n   return block;\n }\n \n+// Add an erroneous name.\n+\n+Named_object*\n+Gogo::add_erroneous_name(const std::string& name)\n+{\n+  return this->package_->bindings()->add_erroneous_name(name);\n+}\n+\n // Add an unknown name.\n \n Named_object*\n@@ -3522,6 +3530,7 @@ Block::traverse(Traverse* traverse)\n \n \t    case Named_object::NAMED_OBJECT_TYPE_DECLARATION:\n \t    case Named_object::NAMED_OBJECT_UNKNOWN:\n+\t    case Named_object::NAMED_OBJECT_ERRONEOUS:\n \t      break;\n \n \t    case Named_object::NAMED_OBJECT_PACKAGE:\n@@ -4521,6 +4530,9 @@ Named_object::location() const\n     case NAMED_OBJECT_UNINITIALIZED:\n       go_unreachable();\n \n+    case NAMED_OBJECT_ERRONEOUS:\n+      return Linemap::unknown_location();\n+\n     case NAMED_OBJECT_UNKNOWN:\n       return this->unknown_value()->location();\n \n@@ -4565,6 +4577,9 @@ Named_object::export_named_object(Export* exp) const\n     case NAMED_OBJECT_UNKNOWN:\n       go_unreachable();\n \n+    case NAMED_OBJECT_ERRONEOUS:\n+      break;\n+\n     case NAMED_OBJECT_CONST:\n       this->const_value()->export_const(exp, this->name_);\n       break;\n@@ -4751,13 +4766,19 @@ Bindings::add_named_object_to_contour(Contour* contour,\n Named_object*\n Bindings::new_definition(Named_object* old_object, Named_object* new_object)\n {\n+  if (new_object->is_erroneous() && !old_object->is_erroneous())\n+    return new_object;\n+\n   std::string reason;\n   switch (old_object->classification())\n     {\n     default:\n     case Named_object::NAMED_OBJECT_UNINITIALIZED:\n       go_unreachable();\n \n+    case Named_object::NAMED_OBJECT_ERRONEOUS:\n+      return old_object;\n+\n     case Named_object::NAMED_OBJECT_UNKNOWN:\n       {\n \tNamed_object* real = old_object->unknown_value()->real_named_object();\n@@ -5003,6 +5024,7 @@ Bindings::traverse(Traverse* traverse, bool is_global)\n \tcase Named_object::NAMED_OBJECT_TYPE_DECLARATION:\n \tcase Named_object::NAMED_OBJECT_FUNC_DECLARATION:\n \tcase Named_object::NAMED_OBJECT_UNKNOWN:\n+\tcase Named_object::NAMED_OBJECT_ERRONEOUS:\n \t  break;\n \n \tcase Named_object::NAMED_OBJECT_SINK:"}, {"sha": "e7b06e51b22f55f655ad51e2b18c7f11372120f7", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4157849c94e274569eff099ff97e51b440219a3/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4157849c94e274569eff099ff97e51b440219a3/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=d4157849c94e274569eff099ff97e51b440219a3", "patch": "@@ -267,6 +267,11 @@ class Gogo\n   Block*\n   finish_block(Location);\n \n+  // Declare an erroneous name.  This is used to avoid knock-on errors\n+  // after a parsing error.\n+  Named_object*\n+  add_erroneous_name(const std::string& name);\n+\n   // Declare an unknown name.  This is used while parsing.  The name\n   // must be resolved by the end of the parse.  Unknown names are\n   // always added at the package level.\n@@ -1688,6 +1693,9 @@ class Named_object\n   {\n     // An uninitialized Named_object.  We should never see this.\n     NAMED_OBJECT_UNINITIALIZED,\n+    // An erroneous name.  This indicates a parse error, to avoid\n+    // later errors about undefined references.\n+    NAMED_OBJECT_ERRONEOUS,\n     // An unknown name.  This is used for forward references.  In a\n     // correct program, these will all be resolved by the end of the\n     // parse.\n@@ -1719,6 +1727,10 @@ class Named_object\n \n   // Classifiers.\n \n+  bool\n+  is_erroneous() const\n+  { return this->classification_ == NAMED_OBJECT_ERRONEOUS; }\n+\n   bool\n   is_unknown() const\n   { return this->classification_ == NAMED_OBJECT_UNKNOWN; }\n@@ -1761,6 +1773,10 @@ class Named_object\n \n   // Creators.\n \n+  static Named_object*\n+  make_erroneous_name(const std::string& name)\n+  { return new Named_object(name, NULL, NAMED_OBJECT_ERRONEOUS); }\n+\n   static Named_object*\n   make_unknown_name(const std::string& name, Location);\n \n@@ -2032,6 +2048,11 @@ class Bindings\n \n   Bindings(Bindings* enclosing);\n \n+  // Add an erroneous name.\n+  Named_object*\n+  add_erroneous_name(const std::string& name)\n+  { return this->add_named_object(Named_object::make_erroneous_name(name)); }\n+\n   // Add an unknown name.\n   Named_object*\n   add_unknown_name(const std::string& name, Location location)"}, {"sha": "c6014d560d21ff34196bfec72de19cd335f8e5de", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 55, "deletions": 9, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4157849c94e274569eff099ff97e51b440219a3/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4157849c94e274569eff099ff97e51b440219a3/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=d4157849c94e274569eff099ff97e51b440219a3", "patch": "@@ -45,6 +45,7 @@ Parse::Parse(Lex* lex, Gogo* gogo)\n     token_(Token::make_invalid_token(Linemap::unknown_location())),\n     unget_token_(Token::make_invalid_token(Linemap::unknown_location())),\n     unget_token_valid_(false),\n+    is_erroneous_function_(false),\n     gogo_(gogo),\n     break_stack_(NULL),\n     continue_stack_(NULL),\n@@ -2123,8 +2124,6 @@ Parse::function_decl()\n   this->advance_token();\n \n   Function_type* fntype = this->signature(rec, this->location());\n-  if (fntype == NULL)\n-    return;\n \n   Named_object* named_object = NULL;\n \n@@ -2171,13 +2170,28 @@ Parse::function_decl()\n   if (!this->peek_token()->is_op(OPERATOR_LCURLY))\n     {\n       if (named_object == NULL && !Gogo::is_sink_name(name))\n-\tthis->gogo_->declare_function(name, fntype, location);\n+\t{\n+\t  if (fntype != NULL)\n+\t    this->gogo_->declare_function(name, fntype, location);\n+\t  else\n+\t    this->gogo_->add_erroneous_name(name);\n+\t}\n     }\n   else\n     {\n+      bool hold_is_erroneous_function = this->is_erroneous_function_;\n+      if (fntype == NULL)\n+\t{\n+\t  fntype = Type::make_function_type(NULL, NULL, NULL, location);\n+\t  this->is_erroneous_function_ = true;\n+\t  if (!Gogo::is_sink_name(name))\n+\t    this->gogo_->add_erroneous_name(name);\n+\t  name = this->gogo_->pack_hidden_name(\"_\", false);\n+\t}\n       this->gogo_->start_function(name, fntype, true, location);\n       Location end_loc = this->block();\n       this->gogo_->finish_function(end_loc);\n+      this->is_erroneous_function_ = hold_is_erroneous_function;\n     }\n }\n \n@@ -2392,7 +2406,15 @@ Parse::operand(bool may_be_sink)\n \t    return Expression::make_func_reference(named_object, NULL,\n \t\t\t\t\t\t   location);\n \t  case Named_object::NAMED_OBJECT_UNKNOWN:\n-\t    return Expression::make_unknown_reference(named_object, location);\n+\t    {\n+\t      Unknown_expression* ue =\n+\t\tExpression::make_unknown_reference(named_object, location);\n+\t      if (this->is_erroneous_function_)\n+\t\tue->set_no_error_message();\n+\t      return ue;\n+\t    }\n+\t  case Named_object::NAMED_OBJECT_ERRONEOUS:\n+\t    return Expression::make_error(location);\n \t  default:\n \t    go_unreachable();\n \t  }\n@@ -2698,14 +2720,22 @@ Parse::function_lit()\n   hold_enclosing_vars.swap(this->enclosing_vars_);\n \n   Function_type* type = this->signature(NULL, location);\n+  bool fntype_is_error = false;\n   if (type == NULL)\n-    type = Type::make_function_type(NULL, NULL, NULL, location);\n+    {\n+      type = Type::make_function_type(NULL, NULL, NULL, location);\n+      fntype_is_error = true;\n+    }\n \n   // For a function literal, the next token must be a '{'.  If we\n   // don't see that, then we may have a type expression.\n   if (!this->peek_token()->is_op(OPERATOR_LCURLY))\n     return Expression::make_type(type, location);\n \n+  bool hold_is_erroneous_function = this->is_erroneous_function_;\n+  if (fntype_is_error)\n+    this->is_erroneous_function_ = true;\n+\n   Bc_stack* hold_break_stack = this->break_stack_;\n   Bc_stack* hold_continue_stack = this->continue_stack_;\n   this->break_stack_ = NULL;\n@@ -2724,6 +2754,8 @@ Parse::function_lit()\n   this->break_stack_ = hold_break_stack;\n   this->continue_stack_ = hold_continue_stack;\n \n+  this->is_erroneous_function_ = hold_is_erroneous_function;\n+\n   hold_enclosing_vars.swap(this->enclosing_vars_);\n \n   Expression* closure = this->create_closure(no, &hold_enclosing_vars,\n@@ -3043,13 +3075,27 @@ Parse::id_to_expression(const std::string& name, Location location)\n     case Named_object::NAMED_OBJECT_FUNC_DECLARATION:\n       return Expression::make_func_reference(named_object, NULL, location);\n     case Named_object::NAMED_OBJECT_UNKNOWN:\n-      return Expression::make_unknown_reference(named_object, location);\n+      {\n+\tUnknown_expression* ue =\n+\t  Expression::make_unknown_reference(named_object, location);\n+\tif (this->is_erroneous_function_)\n+\t  ue->set_no_error_message();\n+\treturn ue;\n+      }\n     case Named_object::NAMED_OBJECT_PACKAGE:\n     case Named_object::NAMED_OBJECT_TYPE:\n     case Named_object::NAMED_OBJECT_TYPE_DECLARATION:\n-      // These cases can arise for a field name in a composite\n-      // literal.\n-      return Expression::make_unknown_reference(named_object, location);\n+      {\n+\t// These cases can arise for a field name in a composite\n+\t// literal.\n+\tUnknown_expression* ue =\n+\t  Expression::make_unknown_reference(named_object, location);\n+\tif (this->is_erroneous_function_)\n+\t  ue->set_no_error_message();\n+\treturn ue;\n+      }\n+    case Named_object::NAMED_OBJECT_ERRONEOUS:\n+      return Expression::make_error(location);\n     default:\n       error_at(this->location(), \"unexpected type of identifier\");\n       return Expression::make_error(location);"}, {"sha": "a838e4bcbbfc166fe8515e126801aa2f31108937", "filename": "gcc/go/gofrontend/parse.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4157849c94e274569eff099ff97e51b440219a3/gcc%2Fgo%2Fgofrontend%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4157849c94e274569eff099ff97e51b440219a3/gcc%2Fgo%2Fgofrontend%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.h?ref=d4157849c94e274569eff099ff97e51b440219a3", "patch": "@@ -305,6 +305,8 @@ class Parse\n   Token unget_token_;\n   // Whether unget_token_ is valid.\n   bool unget_token_valid_;\n+  // Whether the function we are parsing had errors in the signature.\n+  bool is_erroneous_function_;\n   // The code we are generating.\n   Gogo* gogo_;\n   // A stack of statements for which break may be used."}]}