{"sha": "3fa87ef8fcb647c77882424daa96bf50b24b3213", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZhODdlZjhmY2I2NDdjNzc4ODI0MjRkYWE5NmJmNTBiMjRiMzIxMw==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2008-01-11T01:00:48Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2008-01-11T01:00:48Z"}, "message": "re PR ada/34466 (s-tasinf.ads:81:42: \"cpu_set_t\" not declared in \"OS_Interface\")\n\n\tPR ada/34466\n\t* s-osinte-linux-hppa.ads (SC_NPROCESSORS_ONLN): New constant for\n\tsysconf call.\n\t(bit_field): New packed boolean type used by cpu_set_t.\n\t(cpu_set_t): New type corresponding to the C type with\n\tthe same name. Note that on the Ada side we use a bit\n\tfield array for the affinity mask. There is not need\n\tfor the C macro for setting individual bit.\n\t(pthread_setaffinity_np): New imported routine.\n\nFrom-SVN: r131457", "tree": {"sha": "080e40fffc5ac22cb9862ce61a294008b6057687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/080e40fffc5ac22cb9862ce61a294008b6057687"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fa87ef8fcb647c77882424daa96bf50b24b3213", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa87ef8fcb647c77882424daa96bf50b24b3213", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa87ef8fcb647c77882424daa96bf50b24b3213", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa87ef8fcb647c77882424daa96bf50b24b3213/comments", "author": null, "committer": null, "parents": [{"sha": "041313f88f98cfbe5dd58cfb23ec67865292e1a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/041313f88f98cfbe5dd58cfb23ec67865292e1a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/041313f88f98cfbe5dd58cfb23ec67865292e1a2"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "4dfdde62954ca000a2436c86e87bd5b1b0ef60b5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa87ef8fcb647c77882424daa96bf50b24b3213/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa87ef8fcb647c77882424daa96bf50b24b3213/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3fa87ef8fcb647c77882424daa96bf50b24b3213", "patch": "@@ -1,3 +1,15 @@\n+2008-01-10  John David Anglin  <dave.anglin.@nrc-cnrc.gc.ca>\n+\n+\tPR ada/34466\n+\t* s-osinte-linux-hppa.ads (SC_NPROCESSORS_ONLN): New constant for\n+\tsysconf call.\n+\t(bit_field): New packed boolean type used by cpu_set_t.\n+\t(cpu_set_t): New type corresponding to the C type with\n+\tthe same name. Note that on the Ada side we use a bit\n+\tfield array for the affinity mask. There is not need\n+\tfor the C macro for setting individual bit.\n+\t(pthread_setaffinity_np): New imported routine.\n+\n 2008-01-03  Tero Koskinen <tero.koskinen@iki.fi>\n \n \tPR ada/34647"}, {"sha": "1c4386bfe8207956a44c79c79c1989d0e9387089", "filename": "gcc/ada/s-osinte-linux-hppa.ads", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa87ef8fcb647c77882424daa96bf50b24b3213/gcc%2Fada%2Fs-osinte-linux-hppa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa87ef8fcb647c77882424daa96bf50b24b3213/gcc%2Fada%2Fs-osinte-linux-hppa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-linux-hppa.ads?ref=3fa87ef8fcb647c77882424daa96bf50b24b3213", "patch": "@@ -244,6 +244,7 @@ package System.OS_Interface is\n    pragma Import (C, sysconf);\n \n    SC_CLK_TCK : constant := 2;\n+   SC_NPROCESSORS_ONLN : constant := 84;\n \n    -------------------------\n    -- Priority Scheduling --\n@@ -463,6 +464,24 @@ package System.OS_Interface is\n       destructor : destructor_pointer) return int;\n    pragma Import (C, pthread_key_create, \"pthread_key_create\");\n \n+   CPU_SETSIZE : constant := 1_024;\n+\n+   type bit_field is array (1 .. CPU_SETSIZE) of Boolean;\n+   for bit_field'Size use CPU_SETSIZE;\n+   pragma Pack (bit_field);\n+   pragma Convention (C, bit_field);\n+\n+   type cpu_set_t is record\n+      bits : bit_field;\n+   end record;\n+   pragma Convention (C, cpu_set_t);\n+\n+   function pthread_setaffinity_np\n+     (thread     : pthread_t;\n+      cpusetsize : size_t;\n+      cpuset     : access cpu_set_t) return int;\n+   pragma Import (C, pthread_setaffinity_np, \"__gnat_pthread_setaffinity_np\");\n+\n private\n \n    type sigset_t is array (0 .. 31) of unsigned_long;"}]}