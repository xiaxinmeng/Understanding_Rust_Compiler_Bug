{"sha": "3786bbd19bb747859aac3bea0c1048b674e71727", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc4NmJiZDE5YmI3NDc4NTlhYWMzYmVhMGMxMDQ4YjY3NGU3MTcyNw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-10-08T12:34:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-08T12:34:08Z"}, "message": "sem_aggr.adb: Minor reformatting.\n\n2010-10-08  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_aggr.adb: Minor reformatting.\n\n2010-10-08  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_imgv.adb (Expand_Image_Attribute): Handle special calling\n\tsequence for soft hyphen for Character'Image case.\n\t* rtsfind.ads (Image_Character_05): New entry\n\t* s-imgcha.adb (Image_Character_05): New procedurew\n\t* s-imgcha.ads (Image_Character_05): New procedure\n\t* s-imgwch.adb (Image_Wide_Character): Deal with Ada 2005 soft hyphen\n\tcase.\n\t* s-valcha.adb (Value_Character): Recognize SOFT_HYPHEN for 16#AD#\n\t* sem_attr.adb (Eval_Attribute, case Width): Handle soft_hyphen name\n\tproperly.\n\nFrom-SVN: r165168", "tree": {"sha": "4b3146f56cf873301154bb78b8f6d4bc6b2ec0a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b3146f56cf873301154bb78b8f6d4bc6b2ec0a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3786bbd19bb747859aac3bea0c1048b674e71727", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3786bbd19bb747859aac3bea0c1048b674e71727", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3786bbd19bb747859aac3bea0c1048b674e71727", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3786bbd19bb747859aac3bea0c1048b674e71727/comments", "author": null, "committer": null, "parents": [{"sha": "bcae2eaac7fe1533f7ef107aa41f0ff67db39631", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcae2eaac7fe1533f7ef107aa41f0ff67db39631", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcae2eaac7fe1533f7ef107aa41f0ff67db39631"}], "stats": {"total": 128, "additions": 103, "deletions": 25}, "files": [{"sha": "2b37a3cc7dd5f1b46c6ed8c5d720edf290365225", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3786bbd19bb747859aac3bea0c1048b674e71727/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3786bbd19bb747859aac3bea0c1048b674e71727/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3786bbd19bb747859aac3bea0c1048b674e71727", "patch": "@@ -1,3 +1,20 @@\n+2010-10-08  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_aggr.adb: Minor reformatting.\n+\n+2010-10-08  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_imgv.adb (Expand_Image_Attribute): Handle special calling\n+\tsequence for soft hyphen for Character'Image case.\n+\t* rtsfind.ads (Image_Character_05): New entry\n+\t* s-imgcha.adb (Image_Character_05): New procedurew\n+\t* s-imgcha.ads (Image_Character_05): New procedure\n+\t* s-imgwch.adb (Image_Wide_Character): Deal with Ada 2005 soft hyphen\n+\tcase.\n+\t* s-valcha.adb (Value_Character): Recognize SOFT_HYPHEN for 16#AD#\n+\t* sem_attr.adb (Eval_Attribute, case Width): Handle soft_hyphen name\n+\tproperly.\n+\n 2010-10-08  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_attr.adb (Eval_Attribute, case Width): Avoid ludicrous long loop"}, {"sha": "25bce023c175b0fa4c6983788e24541b1a7850c3", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3786bbd19bb747859aac3bea0c1048b674e71727/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3786bbd19bb747859aac3bea0c1048b674e71727/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=3786bbd19bb747859aac3bea0c1048b674e71727", "patch": "@@ -306,8 +306,16 @@ package body Exp_Imgv is\n          Imid := RE_Image_Boolean;\n          Tent := Rtyp;\n \n+      --  For standard character, we have to select the version which handles\n+      --  soft hyphen correctly, based on the version of Ada in use (ugly!)\n+\n       elsif Rtyp = Standard_Character then\n-         Imid := RE_Image_Character;\n+         if Ada_Version < Ada_05 then\n+            Imid := RE_Image_Character;\n+         else\n+            Imid := RE_Image_Character_05;\n+         end if;\n+\n          Tent := Rtyp;\n \n       elsif Rtyp = Standard_Wide_Character then"}, {"sha": "ca61bd120a635187d9031d52da7de886200c61a4", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3786bbd19bb747859aac3bea0c1048b674e71727/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3786bbd19bb747859aac3bea0c1048b674e71727/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=3786bbd19bb747859aac3bea0c1048b674e71727", "patch": "@@ -800,6 +800,7 @@ package Rtsfind is\n      RE_Image_Boolean,                   -- System.Img_Bool\n \n      RE_Image_Character,                 -- System.Img_Char\n+     RE_Image_Character_05,              -- System.Img_Char\n \n      RE_Image_Decimal,                   -- System.Img_Dec\n \n@@ -1972,6 +1973,7 @@ package Rtsfind is\n      RE_Image_Boolean                    => System_Img_Bool,\n \n      RE_Image_Character                  => System_Img_Char,\n+     RE_Image_Character_05               => System_Img_Char,\n \n      RE_Image_Decimal                    => System_Img_Dec,\n "}, {"sha": "67613ddbd48da474888fdd1bc9fe3ce526dc1805", "filename": "gcc/ada/s-imgcha.adb", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3786bbd19bb747859aac3bea0c1048b674e71727/gcc%2Fada%2Fs-imgcha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3786bbd19bb747859aac3bea0c1048b674e71727/gcc%2Fada%2Fs-imgcha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgcha.adb?ref=3786bbd19bb747859aac3bea0c1048b674e71727", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -158,4 +158,23 @@ package body System.Img_Char is\n       end if;\n    end Image_Character;\n \n+   ------------------------\n+   -- Image_Character_05 --\n+   ------------------------\n+\n+   procedure Image_Character_05\n+     (V : Character;\n+      S : in out String;\n+      P : out Natural)\n+   is\n+      pragma Assert (S'First = 1);\n+   begin\n+      if V = Character'Val (16#00AD#) then\n+         P := 11;\n+         S (1 .. P) := \"SOFT_HYPHEN\";\n+      else\n+         Image_Character (V, S, P);\n+      end if;\n+   end Image_Character_05;\n+\n end System.Img_Char;"}, {"sha": "6faf2f309712d8a71bc8faeb87fe6dc974f68c2c", "filename": "gcc/ada/s-imgcha.ads", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3786bbd19bb747859aac3bea0c1048b674e71727/gcc%2Fada%2Fs-imgcha.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3786bbd19bb747859aac3bea0c1048b674e71727/gcc%2Fada%2Fs-imgcha.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgcha.ads?ref=3786bbd19bb747859aac3bea0c1048b674e71727", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,4 +42,14 @@ package System.Img_Char is\n    --  setting the resulting value of P. The caller guarantees that S is\n    --  long enough to hold the result, and that S'First is 1.\n \n+   procedure Image_Character_05\n+     (V : Character;\n+      S : in out String;\n+      P : out Natural);\n+   --  Computes Character'Image (V) and stores the result in S (1 .. P)\n+   --  setting the resulting value of P. The caller guarantees that S is\n+   --  long enough to hold the result, and that S'First is 1. This version\n+   --  is for use in Ada 2005 and beyond, where soft hyphen is a non-graphic\n+   --  and results in \"SOFT_HYPHEN\" as the output.\n+\n end System.Img_Char;"}, {"sha": "44cca3996240375fc9d99466119106c739eaa389", "filename": "gcc/ada/s-imgwch.adb", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3786bbd19bb747859aac3bea0c1048b674e71727/gcc%2Fada%2Fs-imgwch.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3786bbd19bb747859aac3bea0c1048b674e71727/gcc%2Fada%2Fs-imgwch.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgwch.adb?ref=3786bbd19bb747859aac3bea0c1048b674e71727", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -61,6 +61,16 @@ package body System.Img_WChar is\n \n          P := 4;\n \n+      --  Deal with annoying Ada 95 incompatibility with soft hyphen\n+\n+      elsif V = Wide_Character'Val (16#00AD#)\n+        and then not Ada_2005\n+      then\n+         P := 3;\n+         S (1) := ''';\n+         S (2) := Character'Val (16#00AD#);\n+         S (3) := ''';\n+\n       --  Normal case, same as Wide_Wide_Character\n \n       else\n@@ -83,10 +93,14 @@ package body System.Img_WChar is\n       Val : Unsigned_32 := Wide_Wide_Character'Pos (V);\n \n    begin\n-      --  If in range of standard Character, use Character routine\n+      --  If in range of standard Character, use Character routine. Use the\n+      --  Ada 2005 version, since either we are called directly in Ada 2005\n+      --  mode for Wide_Wide_Character, or this is the Wide_Character case\n+      --  which already took care of the Soft_Hyphen glitch.\n \n       if Val <= 16#FF# then\n-         Image_Character (Character'Val (Wide_Wide_Character'Pos (V)), S, P);\n+         Image_Character_05\n+           (Character'Val (Wide_Wide_Character'Pos (V)), S, P);\n \n       --  Otherwise value returned is Hex_hhhhhhhh\n "}, {"sha": "8dddcf58403f15ebd153c1192a9fcff1635cf462", "filename": "gcc/ada/s-valcha.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3786bbd19bb747859aac3bea0c1048b674e71727/gcc%2Fada%2Fs-valcha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3786bbd19bb747859aac3bea0c1048b674e71727/gcc%2Fada%2Fs-valcha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valcha.adb?ref=3786bbd19bb747859aac3bea0c1048b674e71727", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -65,6 +65,10 @@ package body System.Val_Char is\n             end if;\n          end loop;\n \n+         if S (F .. L) = \"SOFT_HYPHEN\" then\n+            return Character'Val (16#AD#);\n+         end if;\n+\n          raise Constraint_Error;\n       end if;\n    end Value_Character;"}, {"sha": "5574f658d7fbffbffb04e122d7c2eb1e4d90b286", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3786bbd19bb747859aac3bea0c1048b674e71727/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3786bbd19bb747859aac3bea0c1048b674e71727/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=3786bbd19bb747859aac3bea0c1048b674e71727", "patch": "@@ -3654,10 +3654,11 @@ package body Sem_Aggr is\n                           (Aggr       : Node_Id;\n                            Assoc_List : List_Id)\n                         is\n-                           Aggr_Type  : constant Entity_Id :=\n-                             Base_Type (Etype (Aggr));\n-                           Def_Node   : constant Node_Id :=\n-                             Type_Definition (Declaration_Node (Aggr_Type));\n+                           Aggr_Type : constant Entity_Id :=\n+                                         Base_Type (Etype (Aggr));\n+                           Def_Node  : constant Node_Id :=\n+                                         Type_Definition\n+                                           (Declaration_Node (Aggr_Type));\n \n                            Comp       : Node_Id;\n                            Comp_Elmt  : Elmt_Id;\n@@ -3666,7 +3667,7 @@ package body Sem_Aggr is\n                            Errors     : Boolean;\n \n                            procedure Process_Component (Comp : Entity_Id);\n-                           --  Add one component with a box association  to the\n+                           --  Add one component with a box association to the\n                            --  inner aggregate, and recurse if component is\n                            --  itself composite.\n \n@@ -3702,7 +3703,6 @@ package body Sem_Aggr is\n                            end Process_Component;\n \n                         begin\n-\n                            --  The component type may be a variant type, so\n                            --  collect the components that are ruled by the\n                            --  known values of the discriminants.\n@@ -3734,7 +3734,6 @@ package body Sem_Aggr is\n                            --  No variant part, iterate over all components\n \n                            else\n-\n                               Comp := First_Component (Etype (Aggr));\n                               while Present (Comp) loop\n                                  Process_Component (Comp);\n@@ -3753,15 +3752,16 @@ package body Sem_Aggr is\n                            end if;\n                         end Propagate_Discriminants;\n \n-                        --  Start of processing for Capture_Discriminants\n+                     --  Start of processing for Capture_Discriminants\n \n                      begin\n                         Expr := Make_Aggregate (Loc, New_List, New_List);\n                         Set_Etype (Expr, Ctyp);\n \n-                        --  If the enclosing type has discriminants, they\n-                        --  have been collected in the aggregate earlier, and\n-                        --  they may appear as constraints of subcomponents.\n+                        --  If the enclosing type has discriminants, they have\n+                        --  been collected in the aggregate earlier, and they\n+                        --  may appear as constraints of subcomponents.\n+\n                         --  Similarly if this component has discriminants, they\n                         --  might in turn be propagated to their components.\n \n@@ -3771,7 +3771,7 @@ package body Sem_Aggr is\n \n                         elsif Has_Discriminants (Ctyp) then\n                            Add_Discriminant_Values\n-                              (Expr,  Component_Associations (Expr));\n+                              (Expr, Component_Associations (Expr));\n                            Propagate_Discriminants\n                               (Expr, Component_Associations (Expr));\n "}, {"sha": "8d052c0e533987d54fa95315afa92de26aed6a3b", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3786bbd19bb747859aac3bea0c1048b674e71727/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3786bbd19bb747859aac3bea0c1048b674e71727/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=3786bbd19bb747859aac3bea0c1048b674e71727", "patch": "@@ -7413,7 +7413,6 @@ package body Sem_Attr is\n \n                            --  No need to compute this more than once!\n \n-                           W := Int'Max (W, 12);\n                            exit;\n \n                         else\n@@ -7427,13 +7426,11 @@ package body Sem_Attr is\n                            case C is\n                               when Reserved_128 | Reserved_129 |\n                                    Reserved_132 | Reserved_153\n-\n                                 => Wt := 12;\n \n                               when BS | HT | LF | VT | FF | CR |\n                                    SO | SI | EM | FS | GS | RS |\n                                    US | RI | MW | ST | PM\n-\n                                 => Wt := 2;\n \n                               when NUL | SOH | STX | ETX | EOT |\n@@ -7445,13 +7442,20 @@ package body Sem_Attr is\n                                    SS2 | SS3 | DCS | PU1 | PU2 |\n                                    STS | CCH | SPA | EPA | SOS |\n                                    SCI | CSI | OSC | APC\n-\n                                 => Wt := 3;\n \n                               when Space .. Tilde |\n                                    No_Break_Space .. LC_Y_Diaeresis\n-\n-                                => Wt := 3;\n+                                =>\n+                                 --  Special case of soft hyphen in Ada 2005\n+\n+                                 if C = Character'Val (16#AD#)\n+                                   and then Ada_Version >= Ada_05\n+                                 then\n+                                    Wt := 11;\n+                                 else\n+                                    Wt := 3;\n+                                 end if;\n                            end case;\n \n                            W := Int'Max (W, Wt);"}]}