{"sha": "666955711fcfd86667ff80cf76fcee9bf6fee606", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY2OTU1NzExZmNmZDg2NjY3ZmY4MGNmNzZmY2VlOWJmNmZlZTYwNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-11-10T17:44:46Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-11-10T17:44:46Z"}, "message": "sparc.c (print_operand): Test for a non-null DECL_SIZE of DECL_RESULT before evaluating it.\n\n\t* config/sparc/sparc.c (print_operand) <')'>: Test for a non-null\n\tDECL_SIZE of DECL_RESULT before evaluating it.\n\nFrom-SVN: r154068", "tree": {"sha": "26a6783c17f70f5f059a7c18769193e9410c6598", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26a6783c17f70f5f059a7c18769193e9410c6598"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/666955711fcfd86667ff80cf76fcee9bf6fee606", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/666955711fcfd86667ff80cf76fcee9bf6fee606", "html_url": "https://github.com/Rust-GCC/gccrs/commit/666955711fcfd86667ff80cf76fcee9bf6fee606", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/666955711fcfd86667ff80cf76fcee9bf6fee606/comments", "author": null, "committer": null, "parents": [{"sha": "6692a053e274798edc26345f400f5b032ee08194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6692a053e274798edc26345f400f5b032ee08194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6692a053e274798edc26345f400f5b032ee08194"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "c8902ee98d530c2bb5dd665f2e06a10e4c5debdb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666955711fcfd86667ff80cf76fcee9bf6fee606/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666955711fcfd86667ff80cf76fcee9bf6fee606/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=666955711fcfd86667ff80cf76fcee9bf6fee606", "patch": "@@ -1,3 +1,8 @@\n+2009-11-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.c (print_operand) <')'>: Test for a non-null\n+\tDECL_SIZE of DECL_RESULT before evaluating it.\n+\n 2009-11-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \tPR tree-optimization/41987"}, {"sha": "75bb2dd58ad7cf656c9f74895241180e9f797c9a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666955711fcfd86667ff80cf76fcee9bf6fee606/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666955711fcfd86667ff80cf76fcee9bf6fee606/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=666955711fcfd86667ff80cf76fcee9bf6fee606", "patch": "@@ -6958,19 +6958,19 @@ print_operand (FILE *file, rtx x, int code)\n       /* Output the right displacement from the saved PC on function return.\n \t The caller may have placed an \"unimp\" insn immediately after the call\n \t so we have to account for it.  This insn is used in the 32-bit ABI\n-\t when calling a function that returns a non zero-sized structure. The\n+\t when calling a function that returns a non zero-sized structure.  The\n \t 64-bit ABI doesn't have it.  Be careful to have this test be the same\n-\t as that used on the call. The exception here is that when \n-\t sparc_std_struct_return is enabled, the psABI is followed exactly\n-\t and the adjustment is made by the code in sparc_struct_value_rtx. \n-\t The call emitted is the same when sparc_std_struct_return is \n-\t present. */\n-     if (! TARGET_ARCH64\n+\t as that for the call.  The exception is when sparc_std_struct_return\n+\t is enabled, the psABI is followed exactly and the adjustment is made\n+\t by the code in sparc_struct_value_rtx.  The call emitted is the same\n+\t when sparc_std_struct_return is enabled. */\n+     if (!TARGET_ARCH64\n \t && cfun->returns_struct\n-\t && ! sparc_std_struct_return\n-\t && (TREE_CODE (DECL_SIZE (DECL_RESULT (current_function_decl)))\n-\t     == INTEGER_CST)\n-\t && ! integer_zerop (DECL_SIZE (DECL_RESULT (current_function_decl))))\n+\t && !sparc_std_struct_return\n+\t && DECL_SIZE (DECL_RESULT (current_function_decl))\n+\t && TREE_CODE (DECL_SIZE (DECL_RESULT (current_function_decl)))\n+\t     == INTEGER_CST\n+\t && !integer_zerop (DECL_SIZE (DECL_RESULT (current_function_decl))))\n \tfputs (\"12\", file);\n       else\n         fputc ('8', file);"}]}