{"sha": "387d0773f39a56b2a831a2b7e7ed189d6ffc2f36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg3ZDA3NzNmMzlhNTZiMmE4MzFhMmI3ZTdlZDE4OWQ2ZmZjMmYzNg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-08-04T16:11:51Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-08-26T08:03:56Z"}, "message": "libiberty: Add support for `in' and `in ref' storage classes.\n\nThe storage class `in' is now a first-class citizen with its own mangle\nsymbol, of which also permits `in ref'.  Previously, `in' was an alias\nto `const [scope]', which is a type constructor.\n\nThe mangle symbol repurposed for this is `I', which was originally used\nby identifier types.  However, while TypeIdentifier is part of the\ngrammar, it must be resolved to some other entity during the semantic\npasses, and so shouldn't appear anywhere in the mangled name.\n\nOld tests that are now no longer valid have been removed.\n\nlibiberty/ChangeLog:\n\n\t* d-demangle.c (dlang_function_args): Handle 'in' and 'in ref'\n\tparameter storage classes.\n\t(dlang_type): Remove identifier type.\n\t* testsuite/d-demangle-expected: Update tests.", "tree": {"sha": "76be22c67db978cec95182958ee7bbbb67841a54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76be22c67db978cec95182958ee7bbbb67841a54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/387d0773f39a56b2a831a2b7e7ed189d6ffc2f36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387d0773f39a56b2a831a2b7e7ed189d6ffc2f36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/387d0773f39a56b2a831a2b7e7ed189d6ffc2f36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387d0773f39a56b2a831a2b7e7ed189d6ffc2f36/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0a0a84cd9a75052114066a15beebeee8c2cf8ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0a0a84cd9a75052114066a15beebeee8c2cf8ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0a0a84cd9a75052114066a15beebeee8c2cf8ab"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "2e52eff76173be98cb039f5525f0f17591094be3", "filename": "libiberty/d-demangle.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387d0773f39a56b2a831a2b7e7ed189d6ffc2f36/libiberty%2Fd-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387d0773f39a56b2a831a2b7e7ed189d6ffc2f36/libiberty%2Fd-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fd-demangle.c?ref=387d0773f39a56b2a831a2b7e7ed189d6ffc2f36", "patch": "@@ -699,6 +699,15 @@ dlang_function_args (string *decl, const char *mangled, struct dlang_info *info)\n \n       switch (*mangled)\n \t{\n+\tcase 'I': /* in(T) */\n+\t  mangled++;\n+\t  string_append (decl, \"in \");\n+\t  if (*mangled == 'K') /* in ref(T) */\n+\t    {\n+\t      mangled++;\n+\t      string_append (decl, \"ref \");\n+\t    }\n+\t  break;\n \tcase 'J': /* out(T) */\n \t  mangled++;\n \t  string_append (decl, \"out \");\n@@ -826,7 +835,6 @@ dlang_type (string *decl, const char *mangled, struct dlang_info *info)\n       mangled = dlang_function_type (decl, mangled, info);\n       string_append (decl, \"function\");\n       return mangled;\n-    case 'I': /* ident T */\n     case 'C': /* class T */\n     case 'S': /* struct T */\n     case 'E': /* enum T */"}, {"sha": "ffb317f23d4cf1ee839742d2742ac55bba8b33ec", "filename": "libiberty/testsuite/d-demangle-expected", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387d0773f39a56b2a831a2b7e7ed189d6ffc2f36/libiberty%2Ftestsuite%2Fd-demangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387d0773f39a56b2a831a2b7e7ed189d6ffc2f36/libiberty%2Ftestsuite%2Fd-demangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fd-demangle-expected?ref=387d0773f39a56b2a831a2b7e7ed189d6ffc2f36", "patch": "@@ -274,14 +274,6 @@ _D8demangle4testFNhG4dZv\n demangle.test(__vector(double[4]))\n #\n --format=dlang\n-_D8demangle4testFI5identZv\n-demangle.test(ident)\n-#\n---format=dlang\n-_D8demangle4testFI5ident4testZv\n-demangle.test(ident.test)\n-#\n---format=dlang\n _D8demangle4testFC5classZv\n demangle.test(class)\n #\n@@ -314,6 +306,14 @@ _D8demangle4testFT7typedef4testZv\n demangle.test(typedef.test)\n #\n --format=dlang\n+_D8demangle4testFIaZv\n+demangle.test(in char)\n+#\n+--format=dlang\n+_D8demangle4testFIKaZv\n+demangle.test(in ref char)\n+#\n+--format=dlang\n _D8demangle4testFJaZv\n demangle.test(out char)\n #"}]}