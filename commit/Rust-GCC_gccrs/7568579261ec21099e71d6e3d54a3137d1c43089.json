{"sha": "7568579261ec21099e71d6e3d54a3137d1c43089", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU2ODU3OTI2MWVjMjEwOTllNzFkNmUzZDU0YTMxMzdkMWM0MzA4OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-03-14T20:18:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-03-14T20:18:43Z"}, "message": "config.gcc (extra_options): New variable for listing option files.\n\n\t* config.gcc (extra_options): New variable for listing option files.\n\tAdd ${cpu_type}/${cpu_type}.opt to it if that file exists.\n\t* configure.ac (extra_opt_files): New AC_SUBST variable.\n\t(tm_file_list, tm_include_list): Include options.h first.\n\t* configure: Regenerate.\n\t* Makefile.in (extra_opt_files, ALL_OPT_FILES): New variables.\n\t(s-options): Use $(ALL_OPT_FILES) instead of $(lang_opt_files)\n\t(s-options-h): New rule.\n\t(options.h): Depend on it.\n\t(TEXI_GCCINT_FILES): Add options.texi.\n\t* hooks.h (hook_bool_size_t_constcharptr_int_true): Declare.\n\t* hooks.c (hook_bool_size_t_constcharptr_int_true): New function.\n\t* target.h (gcc_target): Add default_target_flags and handle_option.\n\t* target-def.h (TARGET_DEFAULT_TARGET_FLAGS)\n\t(TARGET_HANDLE_OPTION): New macros.\n\t(TARGET_INITIALIZER): Include them.\n\t* opt-functions.awk (opt_args, nth_arg): New functions.\n\t(switch_flags): Handle the \"Target\" flag.\n\t(var_args): Delete.\n\t(var_name): Use opt_args and nth_arg.\n\t(var_set, var_ref): Likewise.  Handle \"Mask\" and \"InverseMask\".\n\t* opth-gen.awk: Declare target_flags.  Declare MASK_* and TARGET_*\n\tmacros for the \"Mask\" and \"InverseMask\" options.\n\t* opts.h (cl_var_cond): New enum.\n\t(cl_option): Replace the \"has_set_value\" and \"set_value\" fields with\n\t\"var_cond\" and \"var_value\".\n\t(CL_TARGET): New macro.\n\t(option_enabled, print_filtered_help): Declare.\n\t(decode_options): Move definition.\n\t* opts.c (handle_option): Search for the original option before\n\tremoving any \"no-\" prefix.  Handle CL_TARGET.  Adjust for the new\n\tvar_cond and var_value fields.  Use targetm.handle_option to handle\n\ttarget options.\n\t(decode_options): Set target_flags to targetm.default_target_flags.\n\t(print_filtered_help): Make global.  Handle CL_TARGET.\n\t(option_enabled): New function.\n\t* toplev.c (target_switches): Guard with #ifdef TARGET_SWITCHES.\n\t(display_target_options, set_target_switch, print_switch_values)\n\t(default_pch_valid_p): Guard uses of target_switches with\n\t#ifdef TARGET_SWITCHES.  Also...\n\t(display_target_options): Display the CL_TARGET entries in cl_options.\n\t(set_target_option): Don't complain about the \"\" option when\n\tTARGET_SWITCHES is undefined.\n\t(print_switch_values): Use option_enabled.\n\t(default_pch_valid_p): Check cl_options[] when looking for something\n\tthat has changed the value of target_flags.\n\t* c.opt: Remove documentation from top of file.\n\t* doc/gccint.texi: Add an \"Options\" chapter.  Include options.texi.\n\t* doc/sourecebuild.texi: Refer to the new options documentation\n\tinstead of c.opt.  Document machine-specific .opt files.\n\t* doc/tm.texi (target_flags): Say that this variable is declared\n\tby options.h.\n\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Document.\n\t(TARGET_SWITCHES, TARGET_OPTIONS): Refer to the option files as\n\tan alternative.\n\t* doc/options.texi: New file.\n\nFrom-SVN: r96448", "tree": {"sha": "93e6840750fcec57ca9299b96d2ddd12e82c2805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93e6840750fcec57ca9299b96d2ddd12e82c2805"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7568579261ec21099e71d6e3d54a3137d1c43089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7568579261ec21099e71d6e3d54a3137d1c43089", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7568579261ec21099e71d6e3d54a3137d1c43089", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7568579261ec21099e71d6e3d54a3137d1c43089/comments", "author": null, "committer": null, "parents": [{"sha": "3a3b81e73f2f4b05740199db410f8b37df46be4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a3b81e73f2f4b05740199db410f8b37df46be4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a3b81e73f2f4b05740199db410f8b37df46be4f"}], "stats": {"total": 645, "additions": 519, "deletions": 126}, "files": [{"sha": "fb182eb502abe1dc09dafb520d16d69c67763919", "filename": "gcc/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7568579261ec21099e71d6e3d54a3137d1c43089", "patch": "@@ -1,3 +1,62 @@\n+2005-03-14  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config.gcc (extra_options): New variable for listing option files.\n+\tAdd ${cpu_type}/${cpu_type}.opt to it if that file exists.\n+\t* configure.ac (extra_opt_files): New AC_SUBST variable.\n+\t(tm_file_list, tm_include_list): Include options.h first.\n+\t* configure: Regenerate.\n+\t* Makefile.in (extra_opt_files, ALL_OPT_FILES): New variables.\n+\t(s-options): Use $(ALL_OPT_FILES) instead of $(lang_opt_files)\n+\t(s-options-h): New rule.\n+\t(options.h): Depend on it.\n+\t(TEXI_GCCINT_FILES): Add options.texi.\n+\t* hooks.h (hook_bool_size_t_constcharptr_int_true): Declare.\n+\t* hooks.c (hook_bool_size_t_constcharptr_int_true): New function.\n+\t* target.h (gcc_target): Add default_target_flags and handle_option.\n+\t* target-def.h (TARGET_DEFAULT_TARGET_FLAGS)\n+\t(TARGET_HANDLE_OPTION): New macros.\n+\t(TARGET_INITIALIZER): Include them.\n+\t* opt-functions.awk (opt_args, nth_arg): New functions.\n+\t(switch_flags): Handle the \"Target\" flag.\n+\t(var_args): Delete.\n+\t(var_name): Use opt_args and nth_arg.\n+\t(var_set, var_ref): Likewise.  Handle \"Mask\" and \"InverseMask\".\n+\t* opth-gen.awk: Declare target_flags.  Declare MASK_* and TARGET_*\n+\tmacros for the \"Mask\" and \"InverseMask\" options.\n+\t* opts.h (cl_var_cond): New enum.\n+\t(cl_option): Replace the \"has_set_value\" and \"set_value\" fields with \n+\t\"var_cond\" and \"var_value\".\n+\t(CL_TARGET): New macro.\n+\t(option_enabled, print_filtered_help): Declare.\n+\t(decode_options): Move definition.\n+\t* opts.c (handle_option): Search for the original option before\n+\tremoving any \"no-\" prefix.  Handle CL_TARGET.  Adjust for the new\n+\tvar_cond and var_value fields.  Use targetm.handle_option to handle\n+\ttarget options.\n+\t(decode_options): Set target_flags to targetm.default_target_flags.\n+\t(print_filtered_help): Make global.  Handle CL_TARGET.\n+\t(option_enabled): New function.\n+\t* toplev.c (target_switches): Guard with #ifdef TARGET_SWITCHES.\n+\t(display_target_options, set_target_switch, print_switch_values)\n+\t(default_pch_valid_p): Guard uses of target_switches with\n+\t#ifdef TARGET_SWITCHES.  Also...\n+\t(display_target_options): Display the CL_TARGET entries in cl_options.\n+\t(set_target_option): Don't complain about the \"\" option when\n+\tTARGET_SWITCHES is undefined.\n+\t(print_switch_values): Use option_enabled.\n+\t(default_pch_valid_p): Check cl_options[] when looking for something\n+\tthat has changed the value of target_flags.\n+\t* c.opt: Remove documentation from top of file.\n+\t* doc/gccint.texi: Add an \"Options\" chapter.  Include options.texi.\n+\t* doc/sourecebuild.texi: Refer to the new options documentation\n+\tinstead of c.opt.  Document machine-specific .opt files.\n+\t* doc/tm.texi (target_flags): Say that this variable is declared\n+\tby options.h.\n+\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Document.\n+\t(TARGET_SWITCHES, TARGET_OPTIONS): Refer to the option files as\n+\tan alternative.\n+\t* doc/options.texi: New file.\n+\n 2005-03-14  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR middle-end/18628"}, {"sha": "fbdc9e11ac9e2bf8cf2e8ac4091393a636bd7bdf", "filename": "gcc/Makefile.in", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7568579261ec21099e71d6e3d54a3137d1c43089", "patch": "@@ -425,6 +425,7 @@ GCC_THREAD_FILE=@thread_file@\n OBJC_BOEHM_GC=@objc_boehm_gc@\n GTHREAD_FLAGS=@gthread_flags@\n extra_modes_file=@extra_modes_file@\n+extra_opt_files=@extra_opt_files@\n host_hook_obj=@out_host_hook_obj@\n # Be prepared for gcc2 merges.\n gcc_version=@gcc_version@\n@@ -880,6 +881,9 @@ SUBDIR_FLAGS_TO_PASS = $(ORDINARY_FLAGS_TO_PASS) \\\n #\f\n # Lists of files for various purposes.\n \n+# All option source files\n+ALL_OPT_FILES=$(lang_opt_files) $(extra_opt_files)\n+\n # Target specific, C specific object file\n C_TARGET_OBJS=@c_target_objs@\n \n@@ -1529,19 +1533,21 @@ s-specs : Makefile\n \t$(STAMP) s-specs\n \n optionlist: s-options ; @true\n-s-options: $(lang_opt_files) Makefile $(srcdir)/opt-gather.awk\n-\t$(AWK) -f $(srcdir)/opt-gather.awk $(lang_opt_files) > tmp-optionlist\n+s-options: $(ALL_OPT_FILES) Makefile $(srcdir)/opt-gather.awk\n+\t$(AWK) -f $(srcdir)/opt-gather.awk $(ALL_OPT_FILES) > tmp-optionlist\n \t$(SHELL) $(srcdir)/../move-if-change tmp-optionlist optionlist\n \t$(STAMP) s-options\n \n-\n options.c: optionlist $(srcdir)/opt-functions.awk $(srcdir)/optc-gen.awk\n \t$(AWK) -f $(srcdir)/opt-functions.awk -f $(srcdir)/optc-gen.awk \\\n \t       -v header_name=\"options.h\" < $< > $@ \n \n-options.h: optionlist $(srcdir)/opt-functions.awk $(srcdir)/opth-gen.awk\n+options.h: s-options-h ; @true\n+s-options-h: optionlist $(srcdir)/opt-functions.awk $(srcdir)/opth-gen.awk\n \t$(AWK) -f $(srcdir)/opt-functions.awk -f $(srcdir)/opth-gen.awk \\\n-\t       < $< > $@\n+\t       < $< > tmp-options.h\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-options.h options.h\n+\t$(STAMP) $@\n \n options.o: options.c options.h opts.h intl.h\n \n@@ -2977,7 +2983,7 @@ TEXI_GCCINT_FILES = gccint.texi gcc-common.texi contribute.texi makefile.texi \\\n \t c-tree.texi rtl.texi md.texi tm.texi hostconfig.texi fragments.texi \\\n \t configfiles.texi collect2.texi headerdirs.texi funding.texi gnu.texi \\\n \t gpl.texi fdl.texi contrib.texi languages.texi sourcebuild.texi \\\n-\t gty.texi libgcc.texi cfg.texi tree-ssa.texi\n+\t gty.texi libgcc.texi cfg.texi tree-ssa.texi options.texi\n \n TEXI_GCCINSTALL_FILES = install.texi install-old.texi fdl.texi\n "}, {"sha": "2582661129211d74d57681fe3e8c5eb9563bde71", "filename": "gcc/c.opt", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=7568579261ec21099e71d6e3d54a3137d1c43089", "patch": "@@ -19,51 +19,6 @@\n ; 02111-1307, USA.\n \n \n-; This file is processed by the script opts.sh.  It is a database of\n-; command line options, with each record separated by a blank line,\n-; and each field appearing on its own line.  The first field is the\n-; command-line switch with the leading \"-\" removed.  All options\n-; beginning with \"f\" or \"W\" are implicitly assumed to take a \"no-\"\n-; form; this form should not be listed.  If you do not want this\n-; negative form and you want it to be automatically rejected, add\n-; RejectNegative to the second field.\n-\n-; The second field is a space-separated list of which parts of the\n-; compiler recognize the switch, as declared by \"Language\" entries.\n-; If the switch takes an argument, then you should also specify\n-; \"Joined\" and/or \"Separate\" to indicate where the argument can\n-; appear.  If a Joined argument can legitimately be omitted, specify\n-; \"JoinedOrMissing\" instead of \"Joined\".  If the argument to a switch\n-; is a non-negative integer, you can specify \"UInteger\" and the switch\n-; decoder will convert the argument for you, or complain to the user\n-; if the argument is invalid.  \"Var(name,set)\" creates an integer\n-; variable \"name\".  The variable is declared and initialized to value\n-; given by \"Init(value)\" (or zero if this property is not defined).\n-; When the option is passed to compiler, this variable is set to \"set\"\n-; if value passed through the flag is nonzero, !\"set\" if value is zero,\n-; or to value if \"set\" is omitted.  If \"VarExists\"  is specified, the\n-; declaration for the variable is not created.  If \"Report\" is specified,\n-; the flag is output with -fverbose-asm.\n-\n-; The third field is the help text to output with --help.  This is\n-; automatically line-wrapped on output.  Normally the switch is output\n-; automatically, with the help text on the right hand side of the\n-; output.  However, if the help text contains a tab character, the\n-; text to the left of the tab is output instead of the switch, and the\n-; text to its right forms the help.  This is useful for elaborating on\n-; what type of argument a switch takes, for example.  If the second\n-; field contains \"Undocumented\" then nothing is output with --help.\n-; Only do this with good reason like the switch being internal between\n-; the driver and the front end - it is not an excuse to leave a switch\n-; undocumented.\n-\n-; Comments can appear on their own line anwhere in the file, preceded\n-; by a semicolon.  Whitespace is permitted before the semicolon.\n-\n-; For each switch XXX below, an enumeration constant is created by the\n-; script opts.sh spelt OPT_XXX, but with all non-alphanumeric\n-; characters replaced with an underscore.\n-\n ; Please try to keep this file in ASCII collating order.\n \n Language"}, {"sha": "bd542c4df6d2ab2cf48232718d3041e57ff79cf1", "filename": "gcc/config.gcc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=7568579261ec21099e71d6e3d54a3137d1c43089", "patch": "@@ -98,6 +98,8 @@\n #\n #  extra_programs\tLike extra_passes, but these are used when linking.\n #\n+#  extra_options\tList of target-dependent .opt files.\n+#\n #  c_target_objs\tList of extra target-dependent objects that be\n #\t\t\tlinked into the C compiler only.\n #\n@@ -151,6 +153,7 @@ extra_parts=\n extra_programs=\n extra_objs=\n extra_gcc_objs=\n+extra_options=\n c_target_objs=\n cxx_target_objs=\n tm_defines=\n@@ -318,6 +321,10 @@ if test -f ${srcdir}/config/${cpu_type}/${cpu_type}-modes.def\n then\n \textra_modes=${cpu_type}/${cpu_type}-modes.def\n fi\n+if test -f ${srcdir}/config/${cpu_type}/${cpu_type}.opt\n+then\n+\textra_options=\"${extra_options} ${cpu_type}/${cpu_type}.opt\"\n+fi\n \n case ${target} in\n x86_64-*-*)"}, {"sha": "02fdf0bb5962be39b77dd096afe4291e7e7516ba", "filename": "gcc/configure", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=7568579261ec21099e71d6e3d54a3137d1c43089", "patch": "@@ -309,7 +309,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical build_subdir host_subdir target_subdir gcc_version_trigger gcc_version_full gcc_version GENINSRC CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT NO_MINUS_C_MINUS_O OUTPUT_OPTION CPP EGREP strict1_warn warn_cflags WERROR nocommon_flag TREEBROWSER valgrind_path valgrind_path_defines valgrind_command coverage_flags enable_multilib enable_shared TARGET_SYSTEM_ROOT TARGET_SYSTEM_ROOT_DEFINE CROSS_SYSTEM_HEADER_DIR onestep SET_MAKE AWK LN_S LN RANLIB ac_ct_RANLIB ranlib_flags INSTALL INSTALL_PROGRAM INSTALL_DATA make_compare_target have_mktemp_command MAKEINFO BUILD_INFO GENERATED_MANPAGES FLEX BISON NM AR stage1_cflags COLLECT2_LIBS GNAT_LIBEXC LDEXP_LIB TARGET_GETGROUPS_T LIBICONV LTLIBICONV LIBICONV_DEP manext objext gthread_flags extra_modes_file PACKAGE VERSION USE_NLS LIBINTL LIBINTL_DEP INCINTL XGETTEXT GMSGFMT POSUB CATALOGS host_cc_for_libada CROSS ALL SYSTEM_HEADER_DIR inhibit_libc CC_FOR_BUILD BUILD_CFLAGS STMP_FIXINC STMP_FIXPROTO collect2 libgcc_visibility GGC zlibdir zlibinc MAINT gcc_tooldir dollar slibdir objdir subdirs srcdir all_boot_languages all_compilers all_gtfiles all_gtfiles_files_langs all_gtfiles_files_files all_lang_makefrags all_lang_makefiles all_languages all_stagestuff build_exeext build_install_headers_dir build_xm_file_list build_xm_include_list build_xm_defines check_languages cc_set_by_configure quoted_cc_set_by_configure cpp_install_dir xmake_file tmake_file extra_gcc_objs extra_headers_list extra_objs extra_parts extra_passes extra_programs float_h_file gcc_config_arguments gcc_gxx_include_dir libstdcxx_incdir host_exeext host_xm_file_list host_xm_include_list host_xm_defines out_host_hook_obj install lang_opt_files lang_specs_files lang_tree_files local_prefix md_file objc_boehm_gc out_file out_object_file stage_prefix_set_by_configure quoted_stage_prefix_set_by_configure thread_file tm_file_list tm_include_list tm_defines tm_p_file_list tm_p_include_list xm_file_list xm_include_list xm_defines c_target_objs cxx_target_objs target_cpu_default set_gcc_lib_path GMPLIBS GMPINC LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical build_subdir host_subdir target_subdir gcc_version_trigger gcc_version_full gcc_version GENINSRC CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT NO_MINUS_C_MINUS_O OUTPUT_OPTION CPP EGREP strict1_warn warn_cflags WERROR nocommon_flag TREEBROWSER valgrind_path valgrind_path_defines valgrind_command coverage_flags enable_multilib enable_shared TARGET_SYSTEM_ROOT TARGET_SYSTEM_ROOT_DEFINE CROSS_SYSTEM_HEADER_DIR onestep SET_MAKE AWK LN_S LN RANLIB ac_ct_RANLIB ranlib_flags INSTALL INSTALL_PROGRAM INSTALL_DATA make_compare_target have_mktemp_command MAKEINFO BUILD_INFO GENERATED_MANPAGES FLEX BISON NM AR stage1_cflags COLLECT2_LIBS GNAT_LIBEXC LDEXP_LIB TARGET_GETGROUPS_T LIBICONV LTLIBICONV LIBICONV_DEP manext objext gthread_flags extra_modes_file extra_opt_files PACKAGE VERSION USE_NLS LIBINTL LIBINTL_DEP INCINTL XGETTEXT GMSGFMT POSUB CATALOGS host_cc_for_libada CROSS ALL SYSTEM_HEADER_DIR inhibit_libc CC_FOR_BUILD BUILD_CFLAGS STMP_FIXINC STMP_FIXPROTO collect2 libgcc_visibility GGC zlibdir zlibinc MAINT gcc_tooldir dollar slibdir objdir subdirs srcdir all_boot_languages all_compilers all_gtfiles all_gtfiles_files_langs all_gtfiles_files_files all_lang_makefrags all_lang_makefiles all_languages all_stagestuff build_exeext build_install_headers_dir build_xm_file_list build_xm_include_list build_xm_defines check_languages cc_set_by_configure quoted_cc_set_by_configure cpp_install_dir xmake_file tmake_file extra_gcc_objs extra_headers_list extra_objs extra_parts extra_passes extra_programs float_h_file gcc_config_arguments gcc_gxx_include_dir libstdcxx_incdir host_exeext host_xm_file_list host_xm_include_list host_xm_defines out_host_hook_obj install lang_opt_files lang_specs_files lang_tree_files local_prefix md_file objc_boehm_gc out_file out_object_file stage_prefix_set_by_configure quoted_stage_prefix_set_by_configure thread_file tm_file_list tm_include_list tm_defines tm_p_file_list tm_p_include_list xm_file_list xm_include_list xm_defines c_target_objs cxx_target_objs target_cpu_default set_gcc_lib_path GMPLIBS GMPINC LIBOBJS LTLIBOBJS'\n ac_subst_files='language_hooks'\n \n # Initialize some variables set by options.\n@@ -12061,6 +12061,13 @@ _ACEOF\n \n fi\n \n+# Convert extra_options into a form suitable for Makefile use.\n+extra_opt_files=\n+for f in $extra_options; do\n+  extra_opt_files=\"$extra_opt_files \\$(srcdir)/config/$f\"\n+done\n+\n+\n # auto-host.h is the file containing items generated by autoconf and is\n # the first file included by config.h.\n # If host=build, it is correct to have bconfig include auto-host.h\n@@ -12445,8 +12452,8 @@ host_cc_for_libada=${CC}\n \n out_object_file=`basename $out_file .c`.o\n \n-tm_file_list=\n-tm_include_list=\n+tm_file_list=\"options.h\"\n+tm_include_list=\"options.h\"\n for f in $tm_file; do\n   case $f in\n     defaults.h )\n@@ -16029,6 +16036,7 @@ s,@manext@,$manext,;t t\n s,@objext@,$objext,;t t\n s,@gthread_flags@,$gthread_flags,;t t\n s,@extra_modes_file@,$extra_modes_file,;t t\n+s,@extra_opt_files@,$extra_opt_files,;t t\n s,@PACKAGE@,$PACKAGE,;t t\n s,@VERSION@,$VERSION,;t t\n s,@USE_NLS@,$USE_NLS,;t t"}, {"sha": "dedb800297003e5a4d3af49b5576dbbbcfeed466", "filename": "gcc/configure.ac", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=7568579261ec21099e71d6e3d54a3137d1c43089", "patch": "@@ -1332,6 +1332,13 @@ if test -n \"$extra_modes\" && test -f $srcdir/config/$extra_modes; then\n    for this architecture.])\n fi\n \n+# Convert extra_options into a form suitable for Makefile use.\n+extra_opt_files=\n+for f in $extra_options; do\n+  extra_opt_files=\"$extra_opt_files \\$(srcdir)/config/$f\"\n+done\n+AC_SUBST(extra_opt_files)\n+\n # auto-host.h is the file containing items generated by autoconf and is\n # the first file included by config.h.\n # If host=build, it is correct to have bconfig include auto-host.h\n@@ -1525,8 +1532,8 @@ AC_SUBST(host_cc_for_libada)\n \n out_object_file=`basename $out_file .c`.o\n \n-tm_file_list=\n-tm_include_list=\n+tm_file_list=\"options.h\"\n+tm_include_list=\"options.h\"\n for f in $tm_file; do\n   case $f in\n     defaults.h )"}, {"sha": "d66a4a4a21006e697da0fc3d7fd406a150734f43", "filename": "gcc/doc/gccint.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fdoc%2Fgccint.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fdoc%2Fgccint.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgccint.texi?ref=7568579261ec21099e71d6e3d54a3137d1c43089", "patch": "@@ -105,6 +105,7 @@ Additional tutorial information is linked to from\n * Libgcc::          Low-level runtime library used by GCC.\n * Languages::       Languages for which GCC front ends are written.\n * Source Tree::     GCC source tree structure and build system.\n+* Options::         Option specification files.\n * Passes::          Order of passes, what they do, and what each file is for.\n * Trees::           The source representation used by the C and C++ front ends.\n * RTL::             The intermediate representation that most passes work on.\n@@ -136,6 +137,7 @@ Additional tutorial information is linked to from\n @include libgcc.texi\n @include languages.texi\n @include sourcebuild.texi\n+@include options.texi\n @include passes.texi\n @include c-tree.texi\n @include tree-ssa.texi"}, {"sha": "138ebdb838d9139549923721555b003d22471834", "filename": "gcc/doc/options.texi", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=7568579261ec21099e71d6e3d54a3137d1c43089", "patch": "@@ -0,0 +1,161 @@\n+@c Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node Options\n+@chapter Option specification files\n+@cindex option specification files\n+@cindex @samp{opts.sh}\n+\n+Most GCC command-line options are described by special option\n+definition files, the names of which conventionally end in\n+@code{.opt}.  This chapter describes the format of these files.\n+\n+@menu\n+* Option file format::   The general layout of the files\n+* Option properties::    Supported option properties\n+@end menu\n+\n+@node Option file format\n+@section Option file format\n+\n+Option files are a simple list of records in which each field occupies\n+its own line and in which the records themselves are separated by\n+blank lines.  Comments may appear on their own line anywhere within\n+the file and are preceded by semicolons.  Whitespace is allowed before\n+the semicolon.\n+\n+The files can contain two types of record: language definitions and\n+option definitions.\n+\n+A language definition record has two fields: the string\n+@samp{Language} and the name of the language.  Once a language has\n+been declared in this way, it can be used as an option property.\n+@xref{Option properties}.\n+\n+An option definition record has the following fields:\n+\n+@enumerate\n+@item\n+the name of the option, with the leading ``-'' removed\n+@item\n+a space-separated list of option properties (@pxref{Option properties})\n+@item\n+the help text to use for @option{--help} (omitted if the second field\n+contains the @code{Undocumented} property).\n+@end enumerate\n+\n+By default, all options beginning with ``f'', ``W'' or ``m'' are\n+implicitly assumed to take a ``no-'' form.  This form should not be\n+listed separately.  If an option beginning with one of these letters\n+does not have a ``no-'' form, you can use the @code{RejectNegative}\n+property to reject it.\n+\n+The help text is automatically line-wrapped before being displayed.\n+Normally the name of the option is printed on the left-hand side of\n+the output and the help text is printed on the right.  However, if the\n+help text contains a tab character, the text to the left of the tab is\n+used instead of the option's name and the text to the right of the\n+tab forms the help text.  This allows you to elaborate on what type\n+of argument the option takes.\n+\n+@node Option properties\n+@section Option properties\n+\n+The second field of an option record can specify the following properties:\n+\n+@table @code\n+@item Common\n+The option is available for all languages and targets.\n+\n+@item Target\n+The option is available for all languages but is target-specific.\n+\n+@item @var{language}\n+The option is available when compiling for the given language.\n+\n+It is possible to specify several different languages for the same\n+option.  Each @var{language} must have been declared by an earlier\n+@code{Language} record.  @xref{Option file format}.\n+\n+@item RejectNegative\n+The option does not have a ``no-'' form.  All options beginning with\n+``f'', ``W'' or ``m'' are assumed to have a ``no-'' form unless this\n+property is used.\n+\n+@item Joined\n+@itemx Separate\n+The option takes a mandatory argument.  @code{Joined} indicates\n+that the option and argument can be included in the same @code{argv}\n+entry (as with @code{-mflush-func=@var{name}}, for example).\n+@code{Separate} indicates that the option and argument can be\n+separate @code{argv} entries (as with @code{-o}).  An option is\n+allowed to have both of these properties.\n+\n+@item JoinedOrMissing\n+The option takes an optional argument.  If the argument is given,\n+it will be part of the same @code{argv} entry as the option itself.\n+\n+This property cannot be used alongside @code{Joined} or @code{Separate}.\n+\n+@item UInteger\n+The option's argument is a non-negative integer.  The option parser\n+will check and convert the argument before passing it to the relevant\n+option handler.\n+\n+@item Var(@var{var})\n+The option controls an integer variable @var{var}.  If the option has\n+the @code{UInteger} property, the option parser will set @var{var} to\n+the value of the user-specified argument.  Otherwise the option is\n+assumed to be an on/off switch that is active when @var{var} is nonzero.\n+In this case, the option parser will set @var{var} to 1 when the positive\n+form of the option is used and 0 when the ``no-'' form is used.\n+\n+The option-processing script will usually declare @var{var} in\n+@file{options.c} and leave it to be zero-initialized at start-up time.\n+You can modify this behavior using @code{VarExists} and @code{Init}.\n+\n+@item Var(@var{var}, @var{set})\n+The option controls an integer variable @var{var} and is active when\n+@var{var} equals @var{set}.  The option parser will set @var{var} to\n+@var{set} when the positive form of the option is used and @code{!@var{set}}\n+when the ``no-'' form is used.\n+\n+@var{var} is declared in the same way as for the single-argument form\n+described above.\n+\n+@item VarExists\n+The variable specified by the @code{Var} property already exists.\n+No definition should be added to @file{options.c} in response to\n+this option record.\n+\n+You should use this property if an earlier option has already declared\n+the variable or if the variable is declared outside @file{options.c}.\n+\n+@item Init(@var{value})\n+The variable specified by the @code{Var} property should be statically\n+initialized to @var{value}.\n+\n+@item Mask(@var{name})\n+The option is associated with a bit in the @code{target_flags} variable\n+(@pxref{Run-time Target}) and is active when that bit is set.\n+\n+The options-processing script will automatically allocate a unique\n+bit for the option and set the macro @code{MASK_@var{name}} to the\n+appropriate bitmask.  It will also declare a @code{TARGET_@var{name}}\n+macro that has the value 1 when the option is active and 0 otherwise.\n+\n+@item InverseMask(@var{othername})\n+@itemx InverseMask(@var{othername}, @var{thisname})\n+The option is the inverse of another option that has the\n+@code{Mask(@var{othername})} property.  If @var{thisname} is given,\n+the options-processing script will declare a @code{TARGET_@var{thisname}}\n+macro that is 1 when the option is active and 0 otherwise.\n+\n+@item Report\n+The state of the option should be printed by @option{-fverbose-asm}.\n+\n+@item Undocumented\n+The option is deliberately missing documentation and should not\n+be included in the @option{--help} output.\n+@end table"}, {"sha": "128322d7768e3872ec35379f1ba923687226705e", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=7568579261ec21099e71d6e3d54a3137d1c43089", "patch": "@@ -652,9 +652,7 @@ Move to the stage directory files not included in @code{stagestuff} in\n \n @item lang.opt\n This file registers the set of switches that the front end accepts on\n-the command line, and their @option{--help} text.  The file format is\n-documented in the file @file{c.opt}.  These files are processed by the\n-script @file{opts.sh}.\n+the command line, and their @option{--help} text.  @xref{Options}.\n @item lang-specs.h\n This file provides entries for @code{default_compilers} in\n @file{gcc.c} which override the default of giving an error that a\n@@ -746,6 +744,11 @@ If necessary, a file @file{@var{machine}-modes.def} in the\n @file{@var{machine}} directory, containing additional machine modes to\n represent condition codes.  @xref{Condition Code}, for further details.\n @item\n+An optional @file{@var{machine}.opt} file in the @file{@var{machine}}\n+directory, containing a list of target-specific options.  You can also\n+add other option files using the @code{extra_options} variable in\n+@file{config.gcc}.  @xref{Options}.\n+@item\n Entries in @file{config.gcc} (@pxref{System Config, , The\n @file{config.gcc} File}) for the systems with this target\n architecture."}, {"sha": "aa5c929f048ef806e15cf24609b578849b952569", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=7568579261ec21099e71d6e3d54a3137d1c43089", "patch": "@@ -721,9 +721,35 @@ it yourself.\n @end defmac\n \n @deftypevar {extern int} target_flags\n-This declaration should be present.\n+This variable is declared in @file{options.h}, which is included before\n+any target-specific headers.\n @end deftypevar\n \n+@deftypevar {Target Hook} int TARGET_DEFAULT_TARGET_FLAGS\n+This variable specifies the initial value of @code{target_flags}.\n+Its default setting is 0.\n+\n+If the target defines @code{TARGET_SWITCHES}, the null\n+@code{TARGET_SWITCHES} entry will override this value.\n+@end deftypevar\n+\n+@deftypefn {Target Hook} bool TARGET_HANDLE_OPTION (size_t @var{code}, const char *@var{arg}, int @var{value})\n+This hook is called whenever the user specifies one of the\n+target-specific options described by the @file{.opt} definition files\n+(@pxref{Options}).  It has the opportunity to do some option-specific\n+processing and should return true if the option is valid.  The default\n+definition does nothing but return true.\n+\n+@var{code} specifies the @code{OPT_@var{name}} enumeration value\n+associated with the selected option; @var{name} is just a rendering of\n+the option name in which non-alphanumeric characters are replaced by\n+underscores.  @var{arg} specifies the string argument and is null if\n+no argument was given.  If the option is flagged as a @code{UInteger}\n+(@pxref{Option properties}), @var{value} is the numeric value of the\n+argument.  Otherwise @var{value} is 1 if the positive form of the\n+option was used and 0 if the ``no-'' form was.\n+@end deftypefn\n+\n @cindex optional hardware or system features\n @cindex features, optional, in system conventions\n \n@@ -792,6 +818,10 @@ with opposite meanings, and picks the latter as the default:\n     @{ \"\", MASK_68020, \"\" @},          \\\n   @}\n @end smallexample\n+\n+This macro is being kept for compatibility with older backends.\n+New targets should use option definition files instead.\n+@xref{Back End}.\n @end defmac\n \n @defmac TARGET_OPTIONS\n@@ -861,6 +891,10 @@ extern char *chip_alu;\n #define TARGET_ALU1 (chip_alu[0] == '1')\n #define TARGET_ALU2 (chip_alu[0] == '2')\n @end smallexample\n+\n+This macro is being kept for compatibility with older backends.\n+New targets should use option definition files instead.\n+@xref{Back End}.\n @end defmac\n \n @defmac TARGET_VERSION"}, {"sha": "fc59b97bd6c73867cc68a8aa23325822c5d607d3", "filename": "gcc/hooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=7568579261ec21099e71d6e3d54a3137d1c43089", "patch": "@@ -101,6 +101,14 @@ hook_bool_constcharptr_size_t_false (const char *a ATTRIBUTE_UNUSED,\n   return false;\n }\n \n+bool\n+hook_bool_size_t_constcharptr_int_true (size_t a ATTRIBUTE_UNUSED,\n+\t\t\t\t\tconst char *b ATTRIBUTE_UNUSED,\n+\t\t\t\t\tint c ATTRIBUTE_UNUSED)\n+{\n+  return true;\n+}\n+\n bool\n default_can_output_mi_thunk_no_vcall (tree a ATTRIBUTE_UNUSED,\n \t\t\t\t      HOST_WIDE_INT b ATTRIBUTE_UNUSED,"}, {"sha": "a4a38041f25f649f16976afb9e2007d8e73a4e72", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=7568579261ec21099e71d6e3d54a3137d1c43089", "patch": "@@ -38,6 +38,7 @@ extern bool hook_bool_rtx_false (rtx);\n extern bool hook_bool_uintp_uintp_false (unsigned int *, unsigned int *);\n extern bool hook_bool_rtx_int_int_intp_false (rtx, int, int, int *);\n extern bool hook_bool_constcharptr_size_t_false (const char *, size_t);\n+extern bool hook_bool_size_t_constcharptr_int_true (size_t, const char *, int);\n \n extern void hook_void_void (void);\n extern void hook_void_constcharptr (const char *);"}, {"sha": "35ab4453f313db7f497769c2413fe54ec52e180c", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 53, "deletions": 22, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=7568579261ec21099e71d6e3d54a3137d1c43089", "patch": "@@ -18,6 +18,33 @@\n \n # Some common subroutines for use by opt[ch]-gen.awk.\n \n+# If FLAGS contains a \"NAME(...argument...)\" flag, return the value\n+# of the argument.  Return the empty string otherwise.\n+function opt_args(name, flags)\n+{\n+\tflags = \" \" flags\n+\tif (flags !~ \" \" name \"\\\\(\")\n+\t\treturn \"\"\n+\tsub(\".* \" name \"\\\\(\", \"\", flags)\n+\tsub(\"\\\\).*\", \"\", flags)\n+\n+\treturn flags\n+}\n+\n+# Return the Nth comma-separated element of S.  Return the empty string\n+# if S does not contain N elements.\n+function nth_arg(n, s)\n+{\n+\twhile (n-- > 0) {\n+\t\tif (s !~ \",\")\n+\t\t\treturn \"\"\n+\t\tsub(\"[^,]*, *\", \"\", s)\n+\t}\n+\tsub(\",.*\", \"\", s)\n+\treturn s\n+}\n+\n+# Return a bitmask of CL_* values for option flags FLAGS.\n function switch_flags (flags)\n {\n \tflags = \" \" flags \" \"\n@@ -29,6 +56,7 @@ function switch_flags (flags)\n \t\t\tresult = result \" | \" macros[j]\n \t}\n \tif (flags ~ \" Common \") result = result \" | CL_COMMON\"\n+\tif (flags ~ \" Target \") result = result \" | CL_TARGET\"\n \tif (flags ~ \" Joined \") result = result \" | CL_JOINED\"\n \tif (flags ~ \" JoinedOrMissing \") \\\n \t    result = result \" | CL_JOINED | CL_MISSING_OK\"\n@@ -41,36 +69,39 @@ function switch_flags (flags)\n \treturn result\n }\n \n-function var_args(flags)\n-{\n-\tif (flags !~ \"Var\\\\(\")\n-\t    return \"\"\n-\tsub(\".*Var\\\\(\", \"\", flags)\n-\tsub(\"\\\\).*\", \"\", flags)\n-\n-\treturn flags\n-}\n+# If FLAGS includes a Var flag, return the name of the variable it specifies.\n+# Return the empty string otherwise.\n function var_name(flags)\n {\n-\ts = var_args(flags)\n-\tif (s == \"\")\n-\t\treturn \"\";\n-\tsub( \",.*\", \"\", s)\n-\treturn s\n+\treturn nth_arg(0, opt_args(\"Var\", flags))\n }\n+\n+# Given that an option has flags FLAGS, return an initializer for the\n+# \"var_cond\" and \"var_value\" fields of its cl_options[] entry.\n function var_set(flags)\n {\n-\ts = var_args(flags)\n-\tif (s !~ \",\")\n-\t\treturn \"0, 0\"\n-\tsub( \"[^,]*,\", \"\", s)\n-\treturn \"1, \" s\n+\ts = nth_arg(1, opt_args(\"Var\", flags))\n+\tif (s != \"\")\n+\t\treturn \"CLVC_EQUAL, \" s\n+\ts = opt_args(\"Mask\", flags);\n+\tif (s != \"\")\n+\t\treturn \"CLVC_BIT_SET, MASK_\" s\n+\ts = nth_arg(0, opt_args(\"InverseMask\", flags));\n+\tif (s != \"\")\n+\t\treturn \"CLVC_BIT_CLEAR, MASK_\" s\n+\treturn \"CLVC_BOOLEAN, 0\"\n }\n+\n+# Given that an option has flags FLAGS, return an initializer for the\n+# \"flag_var\" field of its cl_options[] entry.\n function var_ref(flags)\n {\n \tname = var_name(flags)\n-\tif (name == \"\")\n-\t\treturn \"0\"\n-\telse\n+\tif (name != \"\")\n \t\treturn \"&\" name\n+\tif (opt_args(\"Mask\", flags) != \"\")\n+\t\treturn \"&target_flags\"\n+\tif (opt_args(\"InverseMask\", flags) != \"\")\n+\t\treturn \"&target_flags\"\n+\treturn \"0\"\n }"}, {"sha": "83d19343e879c2738551913b31bf493a999e6bf5", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=7568579261ec21099e71d6e3d54a3137d1c43089", "patch": "@@ -53,6 +53,7 @@ print \"\"\n print \"#ifndef OPTIONS_H\"\n print \"#define OPTIONS_H\"\n print \"\"\n+print \"extern int target_flags;\"\n \n for (i = 0; i < n_opts; i++) {\n \tname = var_name(flags[i]);\n@@ -66,6 +67,31 @@ for (i = 0; i < n_opts; i++) {\n \n     }\n \n+masknum = 0\n+for (i = 0; i < n_opts; i++) {\n+\tname = opt_args(\"Mask\", flags[i])\n+\tif (name != \"\")\n+\t\tprint \"#define MASK_\" name \" (1 << \" masknum++ \")\"\n+}\n+if (masknum > 31)\n+\tprint \"#error too many target masks\"\n+print \"\"\n+\n+for (i = 0; i < n_opts; i++) {\n+\tname = opt_args(\"Mask\", flags[i])\n+\tif (name != \"\")\n+\t\tprint \"#define TARGET_\" name \\\n+\t\t      \" ((target_flags & MASK_\" name \") != 0)\"\n+}\n+print \"\"\n+\n+for (i = 0; i < n_opts; i++) {\n+\topt = opt_args(\"InverseMask\", flags[i])\n+\tif (opt ~ \",\")\n+\t\tprint \"#define TARGET_\" nth_arg(1, opt) \\\n+\t\t      \" ((target_flags & MASK_\" nth_arg(0, opt) \") == 0)\"\n+}\n+print \"\"\n \n for (i = 0; i < n_langs; i++) {\n \tmacros[i] = \"CL_\" langs[i]"}, {"sha": "3361c9fe72471bd67d7053fe7e8a36dfdbb95760", "filename": "gcc/opts.c", "status": "modified", "additions": 56, "deletions": 18, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=7568579261ec21099e71d6e3d54a3137d1c43089", "patch": "@@ -112,7 +112,6 @@ static void handle_options (unsigned int, const char **, unsigned int);\n static void wrap_help (const char *help, const char *item, unsigned int);\n static void print_help (void);\n static void print_param_help (void);\n-static void print_filtered_help (unsigned int flag);\n static unsigned int print_switch (const char *text, unsigned int indent);\n static void set_debug_level (enum debug_info_type type, int extended,\n \t\t\t     const char *arg);\n@@ -277,10 +276,12 @@ handle_option (const char **argv, unsigned int lang_mask)\n \n   opt = argv[0];\n \n-  /* Drop the \"no-\" from negative switches.  */\n-  if ((opt[1] == 'W' || opt[1] == 'f')\n+  opt_index = find_opt (opt + 1, lang_mask | CL_COMMON | CL_TARGET);\n+  if (opt_index == cl_options_count\n+      && (opt[1] == 'W' || opt[1] == 'f' || opt[1] == 'm')\n       && opt[2] == 'n' && opt[3] == 'o' && opt[4] == '-')\n     {\n+      /* Drop the \"no-\" from negative switches.  */\n       size_t len = strlen (opt) - 3;\n \n       dup = xmalloc (len + 1);\n@@ -289,9 +290,9 @@ handle_option (const char **argv, unsigned int lang_mask)\n       memcpy (dup + 2, opt + 5, len - 2 + 1);\n       opt = dup;\n       value = 0;\n+      opt_index = find_opt (opt + 1, lang_mask | CL_COMMON | CL_TARGET);\n     }\n \n-  opt_index = find_opt (opt + 1, lang_mask | CL_COMMON);\n   if (opt_index == cl_options_count)\n     goto done;\n \n@@ -335,7 +336,7 @@ handle_option (const char **argv, unsigned int lang_mask)\n \n   /* Now we've swallowed any potential argument, complain if this\n      is a switch for a different front end.  */\n-  if (!(option->flags & (lang_mask | CL_COMMON)))\n+  if (!(option->flags & (lang_mask | CL_COMMON | CL_TARGET)))\n     {\n       complain_wrong_lang (argv[0], option, lang_mask);\n       goto done;\n@@ -361,17 +362,26 @@ handle_option (const char **argv, unsigned int lang_mask)\n     }\n \n   if (option->flag_var)\n-    {\n-      if (option->has_set_value)\n-\t{\n-\t  if (value)\n-\t    *option->flag_var = option->set_value;\n-\t  else\n-\t    *option->flag_var = !option->set_value;\n-\t}\n-      else\n+    switch (option->var_cond)\n+      {\n+      case CLVC_BOOLEAN:\n \t*option->flag_var = value;\n-    }\n+\tbreak;\n+\n+      case CLVC_EQUAL:\n+\t*option->flag_var = value ? option->var_value : !option->var_value;\n+\tbreak;\n+\n+      case CLVC_BIT_CLEAR:\n+      case CLVC_BIT_SET:\n+\tif ((value != 0) == (option->var_cond == CLVC_BIT_SET))\n+\t  *option->flag_var |= option->var_value;\n+\telse\n+\t  *option->flag_var &= ~option->var_value;\n+\tif (option->flag_var == &target_flags)\n+\t  target_flags_explicit |= option->var_value;\n+\tbreak;\n+      }\n   \n   if (option->flags & lang_mask)\n     if (lang_hooks.handle_option (opt_index, arg, value) == 0)\n@@ -381,6 +391,10 @@ handle_option (const char **argv, unsigned int lang_mask)\n     if (common_handle_option (opt_index, arg, value) == 0)\n       result = 0;\n \n+  if (result && (option->flags & CL_TARGET))\n+    if (!targetm.handle_option (opt_index, arg, value))\n+      result = 0;\n+\n  done:\n   if (dup)\n     free (dup);\n@@ -591,7 +605,7 @@ decode_options (unsigned int argc, const char **argv)\n \n   /* Initialize target_flags before OPTIMIZATION_OPTIONS so the latter can\n      modify it.  */\n-  target_flags = 0;\n+  target_flags = targetm.default_target_flags;\n   set_target_switch (\"\");\n \n   /* Unwind tables are always present when a target has ABI-specified unwind\n@@ -1223,15 +1237,15 @@ print_param_help (void)\n }\n \n /* Print help for a specific front-end, etc.  */\n-static void\n+void\n print_filtered_help (unsigned int flag)\n {\n   unsigned int i, len, filter, indent = 0;\n   bool duplicates = false;\n   const char *help, *opt, *tab;\n   static char *printed;\n \n-  if (flag == CL_COMMON)\n+  if (flag == CL_COMMON || flag == CL_TARGET)\n     {\n       filter = flag;\n       if (!printed)\n@@ -1378,3 +1392,27 @@ wrap_help (const char *help, const char *item, unsigned int item_width)\n     }\n   while (remaining);\n }\n+\n+/* Return 1 if OPTION is enabled, 0 if it is disabled, or -1 if it isn't\n+   a simple on-off switch.  */\n+\n+int\n+option_enabled (const struct cl_option *option)\n+{\n+  if (option->flag_var)\n+    switch (option->var_cond)\n+      {\n+      case CLVC_BOOLEAN:\n+\treturn *option->flag_var != 0;\n+\n+      case CLVC_EQUAL:\n+\treturn *option->flag_var == option->var_value;\n+\n+      case CLVC_BIT_CLEAR:\n+\treturn (*option->flag_var & option->var_value) == 0;\n+\n+      case CLVC_BIT_SET:\n+\treturn (*option->flag_var & option->var_value) != 0;\n+      }\n+  return -1;\n+}"}, {"sha": "de1fe31e90ac1a851311cbf54e6eb8c92fc9df87", "filename": "gcc/opts.h", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=7568579261ec21099e71d6e3d54a3137d1c43089", "patch": "@@ -21,7 +21,20 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_OPTS_H\n #define GCC_OPTS_H\n \n-extern void decode_options (unsigned int argc, const char **argv);\n+/* Specifies how a switch's VAR_VALUE relates to its FLAG_VAR.  */\n+enum cl_var_cond {\n+  /* The switch is enabled when FLAG_VAR is nonzero.  */\n+  CLVC_BOOLEAN,\n+\n+  /* The switch is enabled when FLAG_VAR == VAR_VALUE.  */\n+  CLVC_EQUAL,\n+\n+  /* The switch is enabled when VAR_VALUE is not set in FLAG_VAR.  */\n+  CLVC_BIT_CLEAR,\n+\n+  /* The switch is enabled when VAR_VALUE is set in FLAG_VAR.  */\n+  CLVC_BIT_SET\n+};\n \n struct cl_option\n {\n@@ -31,14 +44,15 @@ struct cl_option\n   unsigned char opt_len;\n   unsigned int flags;\n   int *flag_var;\n-  int has_set_value;\n-  int set_value;\n+  enum cl_var_cond var_cond;\n+  int var_value;\n };\n \n extern const struct cl_option cl_options[];\n extern const unsigned int cl_options_count;\n extern const char *const lang_names[];\n \n+#define CL_TARGET\t\t(1 << 22) /* Target-specific option.  */\n #define CL_REPORT\t\t(1 << 23) /* Report argument with -fverbose-asm  */\n #define CL_JOINED\t\t(1 << 24) /* If takes joined argument.  */\n #define CL_SEPARATE\t\t(1 << 25) /* If takes a separate argument.  */\n@@ -56,4 +70,8 @@ extern const char **in_fnames;\n \n extern unsigned num_in_fnames;\n \n+extern void decode_options (unsigned int argc, const char **argv);\n+extern int option_enabled (const struct cl_option *);\n+extern void print_filtered_help (unsigned int);\n+\n #endif"}, {"sha": "e4e2b36a3d090ca48a8a6120ffd19d02fc00d2fa", "filename": "gcc/target-def.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=7568579261ec21099e71d6e3d54a3137d1c43089", "patch": "@@ -278,6 +278,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_VECTORIZE                                                \\\n   {TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD}\n \n+#define TARGET_DEFAULT_TARGET_FLAGS 0\n+\n+#define TARGET_HANDLE_OPTION hook_bool_size_t_constcharptr_int_true\n+\n /* In except.c */\n #define TARGET_EH_RETURN_FILTER_MODE  default_eh_return_filter_mode\n \n@@ -485,6 +489,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_ASM_OUT,\t\t\t\t\\\n   TARGET_SCHED,\t\t\t\t\t\\\n   TARGET_VECTORIZE,\t\t\t\t\\\n+  TARGET_DEFAULT_TARGET_FLAGS,\t\t\t\\\n+  TARGET_HANDLE_OPTION,\t\t\t\t\\\n   TARGET_EH_RETURN_FILTER_MODE,\t\t\t\\\n   TARGET_MERGE_DECL_ATTRIBUTES,\t\t\t\\\n   TARGET_MERGE_TYPE_ATTRIBUTES,\t\t\t\\"}, {"sha": "35135501b167e93e53a349993b325dcc524d3e07", "filename": "gcc/target.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=7568579261ec21099e71d6e3d54a3137d1c43089", "patch": "@@ -291,6 +291,16 @@ struct gcc_target\n     tree (* builtin_mask_for_load) (void);\n   } vectorize;\n \n+  /* The initial value of target_flags.  */\n+  int default_target_flags;\n+\n+  /* Handle target switch CODE (an OPT_* value).  ARG is the argument\n+     passed to the switch; it is NULL if no argument was.  VALUE is the\n+     value of ARG if CODE specifies a UInteger option, otherwise it is\n+     1 if the positive form of the switch was used and 0 if the negative\n+     form was.  Return true if the switch was valid.  */\n+  bool (* handle_option) (size_t code, const char *arg, int value);\n+\n   /* Return machine mode for filter value.  */\n   enum machine_mode (* eh_return_filter_mode) (void);\n "}, {"sha": "04b02bc6ecffc968c670601f21bd7164e9aee840", "filename": "gcc/toplev.c", "status": "modified", "additions": 36, "deletions": 23, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7568579261ec21099e71d6e3d54a3137d1c43089/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=7568579261ec21099e71d6e3d54a3137d1c43089", "patch": "@@ -374,6 +374,7 @@ static const param_info lang_independent_params[] = {\n   { NULL, 0, 0, 0, NULL }\n };\n \n+#ifdef TARGET_SWITCHES\n /* Here is a table, controlled by the tm.h file, listing each -m switch\n    and which bits in `target_switches' it should set or clear.\n    If VALUE is positive, it is bits to set.\n@@ -387,6 +388,7 @@ static const struct\n   const char *const description;\n }\n target_switches[] = TARGET_SWITCHES;\n+#endif\n \n /* This table is similar, but allows the switch to have a value.  */\n \n@@ -1066,6 +1068,7 @@ void\n display_target_options (void)\n {\n   int undoc, i;\n+  unsigned int cli;\n   static bool displayed = false;\n \n   /* Avoid double printing for --help --target-help.  */\n@@ -1074,18 +1077,26 @@ display_target_options (void)\n \n   displayed = true;\n \n-  if (ARRAY_SIZE (target_switches) > 1\n+  for (cli = 0; cli < cl_options_count; cli++)\n+    if ((cl_options[cli].flags & (CL_TARGET | CL_UNDOCUMENTED)) == CL_TARGET)\n+      break;\n+\n+  if (cli < cl_options_count\n+#ifdef TARGET_SWITCHES\n+      || ARRAY_SIZE (target_switches) > 1\n+#endif\n #ifdef TARGET_OPTIONS\n       || ARRAY_SIZE (target_options) > 1\n #endif\n       )\n     {\n-      int doc = 0;\n+      int doc = cli < cl_options_count;\n \n       undoc = 0;\n \n       printf (_(\"\\nTarget specific options:\\n\"));\n \n+#ifdef TARGET_SWITCHES\n       for (i = ARRAY_SIZE (target_switches); i--;)\n \t{\n \t  const char *option      = target_switches[i].name;\n@@ -1103,6 +1114,7 @@ display_target_options (void)\n \t  else if (*description != 0)\n \t    doc += printf (\"  -m%-23s %s\\n\", option, _(description));\n \t}\n+#endif\n \n #ifdef TARGET_OPTIONS\n       for (i = ARRAY_SIZE (target_options); i--;)\n@@ -1123,6 +1135,7 @@ display_target_options (void)\n \t    doc += printf (\"  -m%-23s %s\\n\", option, _(description));\n \t}\n #endif\n+      print_filtered_help (CL_TARGET);\n       if (undoc)\n \t{\n \t  if (doc)\n@@ -1189,9 +1202,12 @@ const char *const debug_type_names[] =\n void\n set_target_switch (const char *name)\n {\n+#if defined (TARGET_SWITCHES) || defined (TARGET_OPTIONS)\n   size_t j;\n+#endif\n   int valid_target_option = 0;\n \n+#ifdef TARGET_SWITCHES\n   for (j = 0; j < ARRAY_SIZE (target_switches); j++)\n     if (!strcmp (target_switches[j].name, name))\n       {\n@@ -1208,6 +1224,7 @@ set_target_switch (const char *name)\n \t  }\n \tvalid_target_option = 1;\n       }\n+#endif\n \n #ifdef TARGET_OPTIONS\n   if (!valid_target_option)\n@@ -1233,7 +1250,7 @@ set_target_switch (const char *name)\n       }\n #endif\n \n-  if (!valid_target_option)\n+  if (name[0] != 0 && !valid_target_option)\n     error (\"invalid option %qs\", name);\n }\n \n@@ -1340,28 +1357,14 @@ print_switch_values (FILE *file, int pos, int max,\n \t\t\t     _(\"options enabled: \"), \"\");\n \n   for (j = 0; j < cl_options_count; j++)\n-    {\n-      if (!cl_options[j].flag_var\n-\t  || !(cl_options[j].flags & CL_REPORT))\n-\tcontinue;\n-\n-      if (cl_options[j].has_set_value)\n-\t{\n-\t  if (*cl_options[j].flag_var != cl_options[j].set_value)\n-\t    continue;\n-\t}\n-      else\n-\t{\n-\t  if (!*cl_options[j].flag_var)\n-\t    continue;\n-\t}\n-      \n+    if ((cl_options[j].flags & CL_REPORT)\n+\t&& option_enabled (&cl_options[j]) > 0)\n       pos = print_single_switch (file, pos, max, indent, sep, term,\n \t\t\t\t \"\", cl_options[j].opt_text);\n-    }\n \n   /* Print target specific options.  */\n \n+#ifdef TARGET_SWITCHES\n   for (j = 0; j < ARRAY_SIZE (target_switches); j++)\n     if (target_switches[j].name[0] != '\\0'\n \t&& target_switches[j].value > 0\n@@ -1371,6 +1374,7 @@ print_switch_values (FILE *file, int pos, int max,\n \tpos = print_single_switch (file, pos, max, indent, sep, term,\n \t\t\t\t   \"-m\", target_switches[j].name);\n       }\n+#endif\n \n #ifdef TARGET_OPTIONS\n   for (j = 0; j < ARRAY_SIZE (target_options); j++)\n@@ -1497,12 +1501,13 @@ default_pch_valid_p (const void *data_p, size_t len)\n   /* Check target_flags.  */\n   if (memcmp (data, &target_flags, sizeof (target_flags)) != 0)\n     {\n+      int tf;\n+\n+      memcpy (&tf, data, sizeof (target_flags));\n+#ifdef TARGET_SWITCHES\n       for (i = 0; i < ARRAY_SIZE (target_switches); i++)\n \t{\n \t  int bits;\n-\t  int tf;\n-\n-\t  memcpy (&tf, data, sizeof (target_flags));\n \n \t  bits = target_switches[i].value;\n \t  if (bits < 0)\n@@ -1513,6 +1518,14 @@ default_pch_valid_p (const void *data_p, size_t len)\n \t      goto make_message;\n \t    }\n \t}\n+#endif\n+      for (i = 0; i < cl_options_count; i++)\n+\tif (cl_options[i].flag_var == &target_flags\n+\t    && (cl_options[i].var_value & (target_flags ^ tf)) != 0)\n+\t  {\n+\t    flag_that_differs = cl_options[i].opt_text + 2;\n+\t    goto make_message;\n+\t  }\n       gcc_unreachable ();\n     }\n   data += sizeof (target_flags);"}]}