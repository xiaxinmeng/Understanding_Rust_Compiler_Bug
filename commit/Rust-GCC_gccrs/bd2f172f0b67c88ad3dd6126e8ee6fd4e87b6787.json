{"sha": "bd2f172f0b67c88ad3dd6126e8ee6fd4e87b6787", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQyZjE3MmYwYjY3Yzg4YWQzZGQ2MTI2ZThlZTZmZDRlODdiNjc4Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-06-30T13:19:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-06-30T13:19:29Z"}, "message": "tree-vect-slp.c (vect_slp_analyze_node_operations): Only analyze the first scalar stmt.\n\n2017-06-30  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (vect_slp_analyze_node_operations): Only\n\tanalyze the first scalar stmt.  Move vector type computation\n\tfor the BB case here from ...\n\t* tree-vect-stmts.c (vect_analyze_stmt): ... here.  Guard\n\tlive operation processing in the SLP case properly.\n\nFrom-SVN: r249839", "tree": {"sha": "2ab8327e8cb49ed1817c71232164c08f1b01082a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ab8327e8cb49ed1817c71232164c08f1b01082a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd2f172f0b67c88ad3dd6126e8ee6fd4e87b6787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2f172f0b67c88ad3dd6126e8ee6fd4e87b6787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd2f172f0b67c88ad3dd6126e8ee6fd4e87b6787", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2f172f0b67c88ad3dd6126e8ee6fd4e87b6787/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b5c768c40c78618962f2d6e86c9c7affdf86eb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5c768c40c78618962f2d6e86c9c7affdf86eb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b5c768c40c78618962f2d6e86c9c7affdf86eb8"}], "stats": {"total": 156, "additions": 81, "deletions": 75}, "files": [{"sha": "a898fd40917734bdabf1d827174de823d8b9ca24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2f172f0b67c88ad3dd6126e8ee6fd4e87b6787/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2f172f0b67c88ad3dd6126e8ee6fd4e87b6787/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd2f172f0b67c88ad3dd6126e8ee6fd4e87b6787", "patch": "@@ -1,3 +1,11 @@\n+2017-06-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_slp_analyze_node_operations): Only\n+\tanalyze the first scalar stmt.  Move vector type computation\n+\tfor the BB case here from ...\n+\t* tree-vect-stmts.c (vect_analyze_stmt): ... here.  Guard\n+\tlive operation processing in the SLP case properly.\n+\n 2017-06-30  Richard Biener  <rguenther@suse.de>\n \n \t* graph.c (draw_cfg_node_succ_edges): Fix broken dot syntax."}, {"sha": "dd8658e32f04cf03f144652ad10980101fd7c06a", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 61, "deletions": 20, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2f172f0b67c88ad3dd6126e8ee6fd4e87b6787/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2f172f0b67c88ad3dd6126e8ee6fd4e87b6787/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=bd2f172f0b67c88ad3dd6126e8ee6fd4e87b6787", "patch": "@@ -2437,29 +2437,70 @@ vect_slp_analyze_node_operations (slp_tree node)\n     if (!vect_slp_analyze_node_operations (child))\n       return false;\n \n-  bool res = true;\n-  FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt)\n+  stmt = SLP_TREE_SCALAR_STMTS (node)[0];\n+  stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n+  gcc_assert (stmt_info);\n+  gcc_assert (STMT_SLP_TYPE (stmt_info) != loop_vect);\n+\n+  /* For BB vectorization vector types are assigned here.\n+     Memory accesses already got their vector type assigned\n+     in vect_analyze_data_refs.  */\n+  bb_vec_info bb_vinfo = STMT_VINFO_BB_VINFO (stmt_info);\n+  if (bb_vinfo\n+      && ! STMT_VINFO_DATA_REF (stmt_info))\n     {\n-      stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n-      gcc_assert (stmt_info);\n-      gcc_assert (STMT_SLP_TYPE (stmt_info) != loop_vect);\n-\n-      /* Push SLP node def-type to stmt operands.  */\n-      FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), j, child)\n-\tif (SLP_TREE_DEF_TYPE (child) != vect_internal_def)\n-\t  STMT_VINFO_DEF_TYPE (vinfo_for_stmt (SLP_TREE_SCALAR_STMTS (child)[i]))\n-\t    = SLP_TREE_DEF_TYPE (child);\n-      res = vect_analyze_stmt (stmt, &dummy, node);\n-      /* Restore def-types.  */\n-      FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), j, child)\n-\tif (SLP_TREE_DEF_TYPE (child) != vect_internal_def)\n-\t  STMT_VINFO_DEF_TYPE (vinfo_for_stmt (SLP_TREE_SCALAR_STMTS (child)[i]))\n-\t    = vect_internal_def;\n-      if (! res)\n-\tbreak;\n+      gcc_assert (PURE_SLP_STMT (stmt_info));\n+\n+      tree scalar_type = TREE_TYPE (gimple_get_lhs (stmt));\n+      if (dump_enabled_p ())\n+\t{\n+\t  dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t   \"get vectype for scalar type:  \");\n+\t  dump_generic_expr (MSG_NOTE, TDF_SLIM, scalar_type);\n+\t  dump_printf (MSG_NOTE, \"\\n\");\n+\t}\n+\n+      tree vectype = get_vectype_for_scalar_type (scalar_type);\n+      if (!vectype)\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    {\n+\t      dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t       \"not SLPed: unsupported data-type \");\n+\t      dump_generic_expr (MSG_MISSED_OPTIMIZATION, TDF_SLIM,\n+\t\t\t\t scalar_type);\n+\t      dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n+\t    }\n+\t  return false;\n+\t}\n+\n+      if (dump_enabled_p ())\n+\t{\n+\t  dump_printf_loc (MSG_NOTE, vect_location, \"vectype:  \");\n+\t  dump_generic_expr (MSG_NOTE, TDF_SLIM, vectype);\n+\t  dump_printf (MSG_NOTE, \"\\n\");\n+\t}\n+\n+      gimple *sstmt;\n+      FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, sstmt)\n+\tSTMT_VINFO_VECTYPE (vinfo_for_stmt (sstmt)) = vectype;\n     }\n \n-  return res;\n+  /* Push SLP node def-type to stmt operands.  */\n+  FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), j, child)\n+    if (SLP_TREE_DEF_TYPE (child) != vect_internal_def)\n+      STMT_VINFO_DEF_TYPE (vinfo_for_stmt (SLP_TREE_SCALAR_STMTS (child)[0]))\n+\t= SLP_TREE_DEF_TYPE (child);\n+  bool res = vect_analyze_stmt (stmt, &dummy, node);\n+  /* Restore def-types.  */\n+  FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), j, child)\n+    if (SLP_TREE_DEF_TYPE (child) != vect_internal_def)\n+      STMT_VINFO_DEF_TYPE (vinfo_for_stmt (SLP_TREE_SCALAR_STMTS (child)[0]))\n+\t= vect_internal_def;\n+  if (! res)\n+    return false;\n+\n+  return true;\n }\n \n "}, {"sha": "9647c111d654f513961ed7791ee0908e3e8d100a", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 12, "deletions": 55, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2f172f0b67c88ad3dd6126e8ee6fd4e87b6787/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2f172f0b67c88ad3dd6126e8ee6fd4e87b6787/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=bd2f172f0b67c88ad3dd6126e8ee6fd4e87b6787", "patch": "@@ -8398,7 +8398,6 @@ vect_analyze_stmt (gimple *stmt, bool *need_to_vectorize, slp_tree node)\n   bb_vec_info bb_vinfo = STMT_VINFO_BB_VINFO (stmt_info);\n   enum vect_relevant relevance = STMT_VINFO_RELEVANT (stmt_info);\n   bool ok;\n-  tree scalar_type, vectype;\n   gimple *pattern_stmt;\n   gimple_seq pattern_def_seq;\n \n@@ -8529,48 +8528,6 @@ vect_analyze_stmt (gimple *stmt, bool *need_to_vectorize, slp_tree node)\n         gcc_unreachable ();\n     }\n \n-  if (bb_vinfo)\n-    {\n-      gcc_assert (PURE_SLP_STMT (stmt_info));\n-\n-      /* Memory accesses already got their vector type assigned\n-         in vect_analyze_data_refs.  */\n-      if (! STMT_VINFO_DATA_REF (stmt_info))\n-\t{\n-\t  scalar_type = TREE_TYPE (gimple_get_lhs (stmt));\n-\t  if (dump_enabled_p ())\n-\t    {\n-\t      dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t       \"get vectype for scalar type:  \");\n-\t      dump_generic_expr (MSG_NOTE, TDF_SLIM, scalar_type);\n-\t      dump_printf (MSG_NOTE, \"\\n\");\n-\t    }\n-\n-\t  vectype = get_vectype_for_scalar_type (scalar_type);\n-\t  if (!vectype)\n-\t    {\n-\t      if (dump_enabled_p ())\n-\t\t{\n-\t\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t\t   \"not SLPed: unsupported data-type \");\n-\t\t  dump_generic_expr (MSG_MISSED_OPTIMIZATION, TDF_SLIM,\n-\t\t\t\t     scalar_type);\n-\t\t  dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n-\t\t}\n-\t      return false;\n-\t    }\n-\n-\t  if (dump_enabled_p ())\n-\t    {\n-\t      dump_printf_loc (MSG_NOTE, vect_location, \"vectype:  \");\n-\t      dump_generic_expr (MSG_NOTE, TDF_SLIM, vectype);\n-\t      dump_printf (MSG_NOTE, \"\\n\");\n-\t    }\n-\n-\t  STMT_VINFO_VECTYPE (stmt_info) = vectype;\n-\t}\n-   }\n-\n   if (STMT_VINFO_RELEVANT_P (stmt_info))\n     {\n       gcc_assert (!VECTOR_MODE_P (TYPE_MODE (gimple_expr_type (stmt))));\n@@ -8815,20 +8772,20 @@ vect_transform_stmt (gimple *stmt, gimple_stmt_iterator *gsi,\n     {\n       gimple *slp_stmt;\n       int i;\n-      FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (slp_node), i, slp_stmt)\n-\t{\n-\t  stmt_vec_info slp_stmt_info = vinfo_for_stmt (slp_stmt);\n-\t  if (STMT_VINFO_LIVE_P (slp_stmt_info)\n-\t      && STMT_VINFO_TYPE (slp_stmt_info) != reduc_vec_info_type)\n-\t    {\n-\t      done = vectorizable_live_operation (slp_stmt, gsi, slp_node, i,\n-\t\t\t\t\t\t  &vec_stmt);\n-\t      gcc_assert (done);\n-\t    }\n-\t}\n+      if (STMT_VINFO_TYPE (stmt_info) != reduc_vec_info_type)\n+\tFOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (slp_node), i, slp_stmt)\n+\t  {\n+\t    stmt_vec_info slp_stmt_info = vinfo_for_stmt (slp_stmt);\n+\t    if (STMT_VINFO_LIVE_P (slp_stmt_info))\n+\t      {\n+\t\tdone = vectorizable_live_operation (slp_stmt, gsi, slp_node, i,\n+\t\t\t\t\t\t    &vec_stmt);\n+\t\tgcc_assert (done);\n+\t      }\n+\t  }\n     }\n   else if (STMT_VINFO_LIVE_P (stmt_info)\n-      && STMT_VINFO_TYPE (stmt_info) != reduc_vec_info_type)\n+\t   && STMT_VINFO_TYPE (stmt_info) != reduc_vec_info_type)\n     {\n       done = vectorizable_live_operation (stmt, gsi, slp_node, -1, &vec_stmt);\n       gcc_assert (done);"}]}