{"sha": "0abb78dda084a14b3d955757c6431fff71c263f3", "node_id": "C_kwDOANBUbNoAKDBhYmI3OGRkYTA4NGExNGIzZDk1NTc1N2M2NDMxZmZmNzFjMjYzZjM", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-08-08T21:45:28Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-08-26T16:56:34Z"}, "message": "c++: Implement -Wself-move warning [PR81159]\n\nAbout 5 years ago we got a request to implement -Wself-move, which\nwarns about useless moves like this:\n\n  int x;\n  x = std::move (x);\n\nThis patch implements that warning.\n\n\tPR c++/81159\n\ngcc/c-family/ChangeLog:\n\n\t* c.opt (Wself-move): New option.\n\ngcc/cp/ChangeLog:\n\n\t* typeck.cc (maybe_warn_self_move): New.\n\t(cp_build_modify_expr): Call maybe_warn_self_move.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi: Document -Wself-move.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/Wself-move1.C: New test.", "tree": {"sha": "e50c14d175e4d5e2e61ea340f47f00f92cf039a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e50c14d175e4d5e2e61ea340f47f00f92cf039a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0abb78dda084a14b3d955757c6431fff71c263f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0abb78dda084a14b3d955757c6431fff71c263f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0abb78dda084a14b3d955757c6431fff71c263f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0abb78dda084a14b3d955757c6431fff71c263f3/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e2462890ac748a5e5b6a34fdeb61e7027863a90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2462890ac748a5e5b6a34fdeb61e7027863a90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e2462890ac748a5e5b6a34fdeb61e7027863a90"}], "stats": {"total": 205, "additions": 203, "deletions": 2}, "files": [{"sha": "f776efd39d86ffd7fa33783ec2e38fd0ac7df618", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0abb78dda084a14b3d955757c6431fff71c263f3/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0abb78dda084a14b3d955757c6431fff71c263f3/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=0abb78dda084a14b3d955757c6431fff71c263f3", "patch": "@@ -1229,6 +1229,10 @@ Wselector\n ObjC ObjC++ Var(warn_selector) Warning\n Warn if a selector has multiple methods.\n \n+Wself-move\n+C++ ObjC++ Var(warn_self_move) Warning LangEnabledBy(C++ ObjC++, Wall)\n+Warn when a value is moved to itself with std::move.\n+\n Wsequence-point\n C ObjC C++ ObjC++ Var(warn_sequence_point) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about possible violations of sequence point rules."}, {"sha": "b99947c10fd3c1c9dc29d2c6d4fc326fb6ff08a1", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0abb78dda084a14b3d955757c6431fff71c263f3/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0abb78dda084a14b3d955757c6431fff71c263f3/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=0abb78dda084a14b3d955757c6431fff71c263f3", "patch": "@@ -8897,7 +8897,56 @@ cp_build_c_cast (location_t loc, tree type, tree expr,\n \n   return error_mark_node;\n }\n-\f\n+\n+/* Warn when a value is moved to itself with std::move.  LHS is the target,\n+   RHS may be the std::move call, and LOC is the location of the whole\n+   assignment.  */\n+\n+static void\n+maybe_warn_self_move (location_t loc, tree lhs, tree rhs)\n+{\n+  if (!warn_self_move)\n+    return;\n+\n+  /* C++98 doesn't know move.  */\n+  if (cxx_dialect < cxx11)\n+    return;\n+\n+  if (processing_template_decl)\n+    return;\n+\n+  if (!REFERENCE_REF_P (rhs)\n+      || TREE_CODE (TREE_OPERAND (rhs, 0)) != CALL_EXPR)\n+    return;\n+  tree fn = TREE_OPERAND (rhs, 0);\n+  if (!is_std_move_p (fn))\n+    return;\n+\n+  /* Just a little helper to strip * and various NOPs.  */\n+  auto extract_op = [] (tree &op) {\n+    STRIP_NOPS (op);\n+    while (INDIRECT_REF_P (op))\n+      op = TREE_OPERAND (op, 0);\n+    op = maybe_undo_parenthesized_ref (op);\n+    STRIP_ANY_LOCATION_WRAPPER (op);\n+  };\n+\n+  tree arg = CALL_EXPR_ARG (fn, 0);\n+  extract_op (arg);\n+  if (TREE_CODE (arg) == ADDR_EXPR)\n+    arg = TREE_OPERAND (arg, 0);\n+  tree type = TREE_TYPE (lhs);\n+  tree orig_lhs = lhs;\n+  extract_op (lhs);\n+  if (cp_tree_equal (lhs, arg))\n+    {\n+      auto_diagnostic_group d;\n+      if (warning_at (loc, OPT_Wself_move,\n+\t\t      \"moving %qE of type %qT to itself\", orig_lhs, type))\n+\tinform (loc, \"remove %<std::move%> call\");\n+    }\n+}\n+\n /* For use from the C common bits.  */\n tree\n build_modify_expr (location_t location,\n@@ -9101,6 +9150,8 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \n       if (modifycode == NOP_EXPR)\n \t{\n+\t  maybe_warn_self_move (loc, lhs, rhs);\n+\n \t  if (c_dialect_objc ())\n \t    {\n \t      result = objc_maybe_build_modify_expr (lhs, rhs);"}, {"sha": "6131bfa7acf28acc538b97a04f0ef2a5a667049b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0abb78dda084a14b3d955757c6431fff71c263f3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0abb78dda084a14b3d955757c6431fff71c263f3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0abb78dda084a14b3d955757c6431fff71c263f3", "patch": "@@ -264,7 +264,7 @@ in the following sections.\n -Wreorder  -Wregister @gol\n -Wstrict-null-sentinel  -Wno-subobject-linkage  -Wtemplates @gol\n -Wno-non-template-friend  -Wold-style-cast @gol\n--Woverloaded-virtual  -Wno-pmf-conversions -Wsign-promo @gol\n+-Woverloaded-virtual  -Wno-pmf-conversions -Wself-move -Wsign-promo @gol\n -Wsized-deallocation  -Wsuggest-final-methods @gol\n -Wsuggest-final-types  -Wsuggest-override  @gol\n -Wno-terminate  -Wuseless-cast  -Wno-vexing-parse  @gol\n@@ -5838,6 +5838,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wreorder   @gol\n -Wrestrict   @gol\n -Wreturn-type  @gol\n+-Wself-move @r{(only for C++)}  @gol\n -Wsequence-point  @gol\n -Wsign-compare @r{(only in C++)}  @gol\n -Wsizeof-array-div @gol\n@@ -6823,6 +6824,26 @@ of a declaration:\n \n This warning is enabled by @option{-Wall}.\n \n+@item -Wno-self-move @r{(C++ and Objective-C++ only)}\n+@opindex Wself-move\n+@opindex Wno-self-move\n+This warning warns when a value is moved to itself with @code{std::move}.\n+Such a @code{std::move} typically has no effect.\n+\n+@smallexample\n+struct T @{\n+@dots{}\n+@};\n+void fn()\n+@{\n+  T t;\n+  @dots{}\n+  t = std::move (t);\n+@}\n+@end smallexample\n+\n+This warning is enabled by @option{-Wall}.\n+\n @item -Wsequence-point\n @opindex Wsequence-point\n @opindex Wno-sequence-point"}, {"sha": "5c9fc92c3479fee7ff6ca1de42c9a925838309a9", "filename": "gcc/testsuite/g++.dg/warn/Wself-move1.C", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0abb78dda084a14b3d955757c6431fff71c263f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWself-move1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0abb78dda084a14b3d955757c6431fff71c263f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWself-move1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWself-move1.C?ref=0abb78dda084a14b3d955757c6431fff71c263f3", "patch": "@@ -0,0 +1,125 @@\n+// PR c++/81159\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wself-move\" }\n+\n+// Define std::move.\n+namespace std {\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    constexpr typename std::remove_reference<_Tp>::type&&\n+    move(_Tp&& __t) noexcept\n+    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n+}\n+\n+int g;\n+\n+struct S {\n+  int x;\n+  S(S&& o) {\n+    x = std::move (x); // { dg-warning \"moving '\\[^\\n\\r]*S::x' of type .int. to itself\" }\n+    x = std::move (o.x);\n+    o.x = std::move (x);\n+    o.x = std::move (o.x); // { dg-warning \"moving 'o.S::x' of type .int. to itself\" }\n+  }\n+  void foo (int x) {\n+    x = std::move (x); // { dg-warning \"moving 'x' of type .int. to itself\" }\n+  }\n+};\n+\n+struct X {\n+  int x;\n+  X(int x) : x(std::move (x)) { }\n+};\n+\n+struct A {};\n+struct B { A a; };\n+struct C { C(); ~C(); };\n+struct D { D(); D(const D&); D(D&&); D& operator=(const D&); };\n+\n+void\n+test ()\n+{\n+  int i = 42;\n+  i = std::move (i); // { dg-warning \"moving 'i' of type .int. to itself\" }\n+  (i) = std::move (i); // { dg-warning \"moving 'i' of type .int. to itself\" }\n+\n+  g = std::move (g); // { dg-warning \"moving 'g' of type .int. to itself\" }\n+  (g) = std::move (g); // { dg-warning \"moving 'g' of type .int. to itself\" }\n+\n+  A a;\n+  a = std::move (a); // { dg-warning \"moving 'a' of type .A. to itself\" }\n+  (a) = std::move (a); // { dg-warning \"moving 'a' of type .A. to itself\" }\n+\n+  B b;\n+  b = std::move (b); // { dg-warning \"moving 'b' of type .B. to itself\" }\n+  (b) = std::move (b); // { dg-warning \"moving 'b' of type .B. to itself\" }\n+  b.a = std::move (b.a); // { dg-warning \"moving 'b.B::a' of type .A. to itself\" }\n+  (b.a) = std::move (b.a); // { dg-warning \"moving 'b.B::a' of type .A. to itself\" }\n+\n+  C c;\n+  c = std::move (c); // { dg-warning \"moving 'c' of type .C. to itself\" }\n+  D d;\n+  d = std::move (d); // { dg-warning \"moving 'd' of type .D. to itself\" }\n+}\n+\n+template<typename T>\n+void ttest ()\n+{\n+  T t;\n+  t = std::move (t); // { dg-warning \"moving 't' of type .A. to itself\" }\n+}\n+\n+template void ttest<A>();\n+\n+void\n+testref (int &r, int &&rr)\n+{\n+  r = std::move (r); // { dg-warning \"moving 'r' of type .int. to itself\" }\n+  rr = std::move (rr); // { dg-warning \"moving 'rr' of type .int. to itself\" }\n+}\n+\n+// Test various other arguments to std::move.\n+template<typename T>\n+void\n+testargs (T *Tptr, T **Tpptr, T& Tref, T&& Trref, const T *Tcptr)\n+{\n+  Tptr = std::move (Tptr); // { dg-warning \"moving 'Tptr' of type 'int\\\\*' to itself\" }\n+  *Tptr = std::move (*Tptr); // { dg-warning \"moving '\\\\* Tptr' of type 'int' to itself\" }\n+  *Tptr = std::move (*(Tptr)); // { dg-warning \"moving '\\\\* Tptr' of type 'int' to itself\" }\n+  *(Tptr) = std::move (*Tptr); // { dg-warning \"moving '\\\\* Tptr' of type 'int' to itself\" }\n+  *(Tptr + 1) = std::move (*(Tptr + 1)); // { dg-warning \"moving '\\[^\\n\\r]*Tptr\\[^\\n\\r]*' of type 'int' to itself\" }\n+  *(Tptr + 1) = std::move (*(Tptr + 2));\n+  (*(Tptr)) = std::move (*Tptr); // { dg-warning \"moving '\\\\* Tptr' of type 'int' to itself\" }\n+  *Tpptr = std::move (*Tpptr); // { dg-warning \"moving '\\\\* Tpptr' of type 'int\\\\*' to itself\" }\n+  **Tpptr = std::move (**Tpptr); // { dg-warning \"moving '\\\\* \\\\* Tpptr' of type 'int' to itself\" }\n+  Tref = std::move (Tref); // { dg-warning \"moving 'Tref' of type 'int' to itself\" }\n+  Trref = std::move (Trref); // { dg-warning \"moving 'Trref' of type 'int' to itself\" }\n+  Tcptr = std::move (Tcptr); // { dg-warning \"moving 'Tcptr' of type 'const int\\\\*' to itself\" }\n+  (Tptr) = std::move (Tptr); // { dg-warning \"moving 'Tptr' of type 'int\\\\*' to itself\" }\n+  (*Tptr) = std::move (*Tptr); // { dg-warning \"moving '\\\\* Tptr' of type 'int' to itself\" }\n+  (*Tpptr) = std::move (*Tpptr); // { dg-warning \"moving '\\\\* Tpptr' of type 'int\\\\*' to itself\" }\n+  (**Tpptr) = std::move (**Tpptr); // { dg-warning \"moving '\\\\* \\\\* Tpptr' of type 'int' to itself\" }\n+  (*(*(Tpptr))) = std::move (**Tpptr); // { dg-warning \"moving '\\\\* \\\\* Tpptr' of type 'int' to itself\" }\n+  (Tref) = std::move (Tref); // { dg-warning \"moving 'Tref' of type 'int' to itself\" }\n+  (Trref) = std::move (Trref); // { dg-warning \"moving 'Trref' of type 'int' to itself\" }\n+  (Tcptr) = std::move (Tcptr); // { dg-warning \"moving 'Tcptr' of type 'const int\\\\*' to itself\" }\n+}\n+\n+void\n+call_testargs ()\n+{\n+  int i = 42;\n+  int *p = &i;\n+  testargs<int>(&i, &p, i, 42, &i);\n+}"}]}