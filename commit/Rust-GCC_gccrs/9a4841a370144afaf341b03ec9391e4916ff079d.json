{"sha": "9a4841a370144afaf341b03ec9391e4916ff079d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE0ODQxYTM3MDE0NGFmYWYzNDFiMDNlYzkzOTFlNDkxNmZmMDc5ZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2018-01-30T13:23:39Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-01-30T13:23:39Z"}, "message": "re PR ipa/81360 (ice in estimate_edge_growth, at ipa-inline.h:86)\n\n\n\tPR ipa/81360\n\t* ipa-inline.c (can_inline_edge_p): Break out late tests to...\n\t(can_inline_edge_by_limits_p): ... here.\n\t(can_early_inline_edge_p, check_callers,\n\tupdate_caller_keys, update_callee_keys, recursive_inlining,\n\tadd_new_edges_to_heap, speculation_useful_p,\n\tinline_small_functions,\n\tinline_small_functions, flatten_function,\n\tinline_to_all_callers_1): Update.\n\n\t* g++.dg/torture/pr81360.C: New testcase\n\nFrom-SVN: r257184", "tree": {"sha": "6f333ac1bce377dd0fccdfd18abcef74b64907e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f333ac1bce377dd0fccdfd18abcef74b64907e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a4841a370144afaf341b03ec9391e4916ff079d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a4841a370144afaf341b03ec9391e4916ff079d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a4841a370144afaf341b03ec9391e4916ff079d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a4841a370144afaf341b03ec9391e4916ff079d/comments", "author": null, "committer": null, "parents": [{"sha": "44c945e62c87d9e01156c9cd6da93f69b984be37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c945e62c87d9e01156c9cd6da93f69b984be37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44c945e62c87d9e01156c9cd6da93f69b984be37"}], "stats": {"total": 183, "additions": 161, "deletions": 22}, "files": [{"sha": "dc75ffab7c8fe1beab4cac885519e63188c9c8c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a4841a370144afaf341b03ec9391e4916ff079d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a4841a370144afaf341b03ec9391e4916ff079d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a4841a370144afaf341b03ec9391e4916ff079d", "patch": "@@ -1,3 +1,15 @@\n+2018-01-30  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/81360\n+\t* ipa-inline.c (can_inline_edge_p): Break out late tests to...\n+\t(can_inline_edge_by_limits_p): ... here.\n+\t(can_early_inline_edge_p, check_callers,\n+\tupdate_caller_keys, update_callee_keys, recursive_inlining,\n+\tadd_new_edges_to_heap, speculation_useful_p,\n+\tinline_small_functions,\n+\tinline_small_functions, flatten_function,\n+\tinline_to_all_callers_1): Update.\n+\n 2018-01-30  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* profile-count.c (profile_count::combine_with_ipa_count): Handle"}, {"sha": "f56a1a69107c703fd942d43f7f4b62bc7ef4487a", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 65, "deletions": 22, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a4841a370144afaf341b03ec9391e4916ff079d/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a4841a370144afaf341b03ec9391e4916ff079d/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=9a4841a370144afaf341b03ec9391e4916ff079d", "patch": "@@ -289,18 +289,16 @@ sanitize_attrs_match_for_inline_p (const_tree caller, const_tree callee)\n       (opts_for_fn (caller->decl)->x_##flag\t\t\\\n        != opts_for_fn (callee->decl)->x_##flag)\n \n- /* Decide if we can inline the edge and possibly update\n+/* Decide if we can inline the edge and possibly update\n    inline_failed reason.  \n    We check whether inlining is possible at all and whether\n    caller growth limits allow doing so.  \n \n-   if REPORT is true, output reason to the dump file.  \n-\n-   if DISREGARD_LIMITS is true, ignore size limits.*/\n+   if REPORT is true, output reason to the dump file. */\n \n static bool\n can_inline_edge_p (struct cgraph_edge *e, bool report,\n-\t\t   bool disregard_limits = false, bool early = false)\n+\t\t   bool early = false)\n {\n   gcc_checking_assert (e->inline_failed);\n \n@@ -316,9 +314,6 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n   cgraph_node *caller = e->caller->global.inlined_to\n \t\t        ? e->caller->global.inlined_to : e->caller;\n   cgraph_node *callee = e->callee->ultimate_alias_target (&avail, caller);\n-  tree caller_tree = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (caller->decl);\n-  tree callee_tree\n-    = callee ? DECL_FUNCTION_SPECIFIC_OPTIMIZATION (callee->decl) : NULL;\n \n   if (!callee->definition)\n     {\n@@ -379,12 +374,47 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n       e->inline_failed = CIF_ATTRIBUTE_MISMATCH;\n       inlinable = false;\n     }\n+  if (!inlinable && report)\n+    report_inline_failed_reason (e);\n+  return inlinable;\n+}\n+\n+/* Decide if we can inline the edge and possibly update\n+   inline_failed reason.  \n+   We check whether inlining is possible at all and whether\n+   caller growth limits allow doing so.  \n+\n+   if REPORT is true, output reason to the dump file.\n+\n+   if DISREGARD_LIMITS is true, ignore size limits.  */\n+\n+static bool\n+can_inline_edge_by_limits_p (struct cgraph_edge *e, bool report,\n+\t\t             bool disregard_limits = false, bool early = false)\n+{\n+  gcc_checking_assert (e->inline_failed);\n+\n+  if (cgraph_inline_failed_type (e->inline_failed) == CIF_FINAL_ERROR)\n+    {\n+      if (report)\n+        report_inline_failed_reason (e);\n+      return false;\n+    }\n+\n+  bool inlinable = true;\n+  enum availability avail;\n+  cgraph_node *caller = e->caller->global.inlined_to\n+\t\t        ? e->caller->global.inlined_to : e->caller;\n+  cgraph_node *callee = e->callee->ultimate_alias_target (&avail, caller);\n+  tree caller_tree = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (caller->decl);\n+  tree callee_tree\n+    = callee ? DECL_FUNCTION_SPECIFIC_OPTIMIZATION (callee->decl) : NULL;\n   /* Check if caller growth allows the inlining.  */\n-  else if (!DECL_DISREGARD_INLINE_LIMITS (callee->decl)\n-\t   && !disregard_limits\n-\t   && !lookup_attribute (\"flatten\",\n-\t\t\t\t DECL_ATTRIBUTES (caller->decl))\n-           && !caller_growth_limits (e))\n+  if (!DECL_DISREGARD_INLINE_LIMITS (callee->decl)\n+      && !disregard_limits\n+      && !lookup_attribute (\"flatten\",\n+     \t\t DECL_ATTRIBUTES (caller->decl))\n+      && !caller_growth_limits (e))\n     inlinable = false;\n   /* Don't inline a function with a higher optimization level than the\n      caller.  FIXME: this is really just tip of iceberg of handling\n@@ -541,7 +571,8 @@ can_early_inline_edge_p (struct cgraph_edge *e)\n \tfprintf (dump_file, \"  edge not inlinable: not in SSA form\\n\");\n       return false;\n     }\n-  if (!can_inline_edge_p (e, true, false, true))\n+  if (!can_inline_edge_p (e, true, true)\n+      || !can_inline_edge_by_limits_p (e, true, false, true))\n     return false;\n   return true;\n }\n@@ -925,6 +956,8 @@ check_callers (struct cgraph_node *node, void *has_hot_call)\n          return true;\n        if (e->recursive_p ())\n \t return true;\n+       if (!can_inline_edge_by_limits_p (e, true))\n+         return true;\n        if (!(*(bool *)has_hot_call) && e->maybe_hot_p ())\n \t *(bool *)has_hot_call = true;\n      }\n@@ -1317,8 +1350,9 @@ update_caller_keys (edge_heap_t *heap, struct cgraph_node *node,\n         if (!check_inlinablity_for\n \t    || check_inlinablity_for == edge)\n \t  {\n-\t    if (want_inline_small_function_p (edge, false)\n-\t\t&& can_inline_edge_p (edge, false))\n+\t    if (can_inline_edge_p (edge, false)\n+\t\t&& want_inline_small_function_p (edge, false)\n+\t\t&& can_inline_edge_by_limits_p (edge, false))\n \t      update_edge_key (heap, edge);\n \t    else if (edge->aux)\n \t      {\n@@ -1361,8 +1395,9 @@ update_callee_keys (edge_heap_t *heap, struct cgraph_node *node,\n \t    && avail >= AVAIL_AVAILABLE\n \t    && !bitmap_bit_p (updated_nodes, callee->uid))\n \t  {\n-\t    if (want_inline_small_function_p (e, false)\n-\t\t&& can_inline_edge_p (e, false))\n+\t    if (can_inline_edge_p (e, false)\n+\t\t&& want_inline_small_function_p (e, false)\n+\t\t&& can_inline_edge_by_limits_p (e, false))\n \t      update_edge_key (heap, e);\n \t    else if (e->aux)\n \t      {\n@@ -1449,7 +1484,8 @@ recursive_inlining (struct cgraph_edge *edge,\n       struct cgraph_edge *curr = heap.extract_min ();\n       struct cgraph_node *cnode, *dest = curr->callee;\n \n-      if (!can_inline_edge_p (curr, true))\n+      if (!can_inline_edge_p (curr, true)\n+\t  || can_inline_edge_by_limits_p (curr, true))\n \tcontinue;\n \n       /* MASTER_CLONE is produced in the case we already started modified\n@@ -1569,7 +1605,8 @@ add_new_edges_to_heap (edge_heap_t *heap, vec<cgraph_edge *> new_edges)\n       gcc_assert (!edge->aux);\n       if (edge->inline_failed\n \t  && can_inline_edge_p (edge, true)\n-\t  && want_inline_small_function_p (edge, true))\n+\t  && want_inline_small_function_p (edge, true)\n+\t  && can_inline_edge_by_limits_p (edge, true))\n         edge->aux = heap->insert (edge_badness (edge, false), edge);\n     }\n }\n@@ -1630,7 +1667,9 @@ speculation_useful_p (struct cgraph_edge *e, bool anticipate_inlining)\n   if (!anticipate_inlining && e->inline_failed && !target->local.local)\n     return false;\n   /* For overwritable targets there is not much to do.  */\n-  if (e->inline_failed && !can_inline_edge_p (e, false, true))\n+  if (e->inline_failed\n+      && (!can_inline_edge_p (e, false)\n+\t  || !can_inline_edge_by_limits_p (e, false, true)))\n     return false;\n   /* OK, speculation seems interesting.  */\n   return true;\n@@ -1790,6 +1829,7 @@ inline_small_functions (void)\n \t      && !edge->aux\n \t      && can_inline_edge_p (edge, true)\n \t      && want_inline_small_function_p (edge, true)\n+\t      && can_inline_edge_by_limits_p (edge, true)\n \t      && edge->inline_failed)\n \t    {\n \t      gcc_assert (!edge->aux);\n@@ -1890,7 +1930,8 @@ inline_small_functions (void)\n \t    badness = current_badness;\n \t}\n \n-      if (!can_inline_edge_p (edge, true))\n+      if (!can_inline_edge_p (edge, true)\n+\t  || !can_inline_edge_by_limits_p (edge, true))\n \t{\n \t  resolve_noninline_speculation (&edge_heap, edge);\n \t  continue;\n@@ -2101,6 +2142,7 @@ flatten_function (struct cgraph_node *node, bool early)\n \t too.  */\n       if (!early\n \t  ? !can_inline_edge_p (e, true)\n+\t    && !can_inline_edge_by_limits_p (e, true)\n \t  : !can_early_inline_edge_p (e))\n \tcontinue;\n \n@@ -2155,6 +2197,7 @@ inline_to_all_callers_1 (struct cgraph_node *node, void *data,\n       struct cgraph_node *caller = node->callers->caller;\n \n       if (!can_inline_edge_p (node->callers, true)\n+\t  || !can_inline_edge_by_limits_p (node->callers, true)\n \t  || node->callers->recursive_p ())\n \t{\n \t  if (dump_file)"}, {"sha": "71bd0a76aa05b0084ba141564308ec0dd641f758", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a4841a370144afaf341b03ec9391e4916ff079d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a4841a370144afaf341b03ec9391e4916ff079d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a4841a370144afaf341b03ec9391e4916ff079d", "patch": "@@ -1,3 +1,8 @@\n+2018-01-30  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/81360\n+\t* g++.dg/torture/pr81360.C: New testcase.\n+\n 2018-01-30  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR lto/83954"}, {"sha": "ba0cf56d075a3689e6c83266c9f53275fafde713", "filename": "gcc/testsuite/g++.dg/torture/pr81360.C", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a4841a370144afaf341b03ec9391e4916ff079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81360.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a4841a370144afaf341b03ec9391e4916ff079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81360.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81360.C?ref=9a4841a370144afaf341b03ec9391e4916ff079d", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-early-inlining\"  } */\n+\n+template <int dim> class B;\n+template <int, int dim> class TriaObjectAccessor;\n+template <int, typename Accessor> class A;\n+template <int dim> class TriaDimensionInfo {\n+public:\n+  typedef A<3, TriaObjectAccessor<2, 3> > raw_quad_iterator;\n+  typedef A<3, B<3> > raw_hex_iterator;\n+  typedef raw_hex_iterator raw_cell_iterator;\n+};\n+template <int dim> class Triangulation : public TriaDimensionInfo<1> {\n+  public:\n+  typedef typename TriaDimensionInfo<dim>::raw_quad_iterator raw_quad_iterator;\n+  TriaDimensionInfo::raw_cell_iterator end() const;\n+  raw_quad_iterator end_quad() const {\n+    return raw_quad_iterator(const_cast<Triangulation *>(this), 0, 0);\n+  }\n+};\n+template <int dim> class TriaAccessor {\n+public:\n+  typedef void AccessorData;\n+  TriaAccessor(const Triangulation<dim> * = 0);\n+  Triangulation<1> *tria;\n+\n+  int a, b, c;\n+};\n+template <int dim> class TriaObjectAccessor<2, dim> : public TriaAccessor<dim> {\n+public:\n+  typedef typename TriaAccessor<dim>::AccessorData AccessorData;\n+  TriaObjectAccessor(const Triangulation<dim> * = 0);\n+};\n+template <int dim> class TriaObjectAccessor<3, dim> : public TriaAccessor<dim> {\n+public:\n+  typedef typename TriaAccessor<dim>::AccessorData AccessorData;\n+  TriaObjectAccessor(const Triangulation<dim> * = 0);\n+};\n+template <int dim> class B : public TriaObjectAccessor<dim, dim> {\n+public:\n+  typedef typename TriaObjectAccessor<dim, dim>::AccessorData AccessorData;\n+  B(const Triangulation<dim> * = 0);\n+};\n+template <int dim, typename Accessor> class A {\n+public:\n+  A(const A &);\n+  A(const Triangulation<dim> *, int, int);\n+  Accessor accessor;\n+};\n+template class Triangulation<3>;\n+template <int dim, typename Accessor>\n+A<dim, Accessor>::A(const Triangulation<dim> *, int, int) {}\n+template <int dim>\n+TriaAccessor<dim>::TriaAccessor(const Triangulation<dim> *)\n+    : tria(), a(-1), b(-2), c(-3) {}\n+template <int dim>\n+TriaObjectAccessor<2, dim>::TriaObjectAccessor(const Triangulation<dim> *) {}\n+template <int dim>\n+TriaObjectAccessor<3, dim>::TriaObjectAccessor(const Triangulation<dim> *) {}\n+template <int dim> B<dim>::B(const Triangulation<dim> *) {}\n+template <>\n+TriaDimensionInfo<3>::raw_cell_iterator Triangulation<3>::end() const {\n+  return raw_hex_iterator(const_cast<Triangulation *>(this), 0, 0);\n+}\n+\n+#pragma GCC optimize (\"-O0\")\n+int main()\n+{\n+  Triangulation <3> t;\n+  Triangulation<3>::raw_quad_iterator i1 = t.end_quad();\n+  TriaDimensionInfo<3>::raw_cell_iterator i2 = t.end();\n+\n+  if(i2.accessor.c != -3)\n+    return 1;\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 0\" \"icf\"  } } */"}]}