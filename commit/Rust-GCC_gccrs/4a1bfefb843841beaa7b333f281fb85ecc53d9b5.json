{"sha": "4a1bfefb843841beaa7b333f281fb85ecc53d9b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGExYmZlZmI4NDM4NDFiZWFhN2IzMzNmMjgxZmI4NWVjYzUzZDliNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-05T13:48:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-05T13:48:16Z"}, "message": "[multiple changes]\n\n2011-09-05  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb: Minor reformatting.\n\n2011-09-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb: Better error message.\n\n2011-09-05  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_aggr.adb: Add with and use clause for Exp_Ch6.\n\t(Expand_Array_Aggregate): Detect a special case of an aggregate\n\twhich contains tasks in the context of an unexpanded return\n\tstatement of a build-in-place function.\n\t* exp_ch6.adb: Add with and use clause for Exp_Aggr.\n\t(Expand_N_Extended_Return_Statement): Detect a delayed aggregate\n\twhich contains tasks and expand it now that the original simple\n\treturn statement has been rewritten.\n\t* exp_ch9.adb (Build_Activation_Chain_Entity): Code\n\treformatting. Do not create a chain for an extended return\n\tstatement if one is already available.\n\t(Has_Activation_Chain): New routine.\n\nFrom-SVN: r178539", "tree": {"sha": "af0b94669292a1c4a344b38f90d4a1a9df5b6afb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af0b94669292a1c4a344b38f90d4a1a9df5b6afb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a1bfefb843841beaa7b333f281fb85ecc53d9b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a1bfefb843841beaa7b333f281fb85ecc53d9b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a1bfefb843841beaa7b333f281fb85ecc53d9b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a1bfefb843841beaa7b333f281fb85ecc53d9b5/comments", "author": null, "committer": null, "parents": [{"sha": "9ec080cb2152ca831307b8c4fd825d9acecc4a45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ec080cb2152ca831307b8c4fd825d9acecc4a45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ec080cb2152ca831307b8c4fd825d9acecc4a45"}], "stats": {"total": 209, "additions": 156, "deletions": 53}, "files": [{"sha": "056672d378e5141b0d414ed9e4656d0748d6a918", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a1bfefb843841beaa7b333f281fb85ecc53d9b5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a1bfefb843841beaa7b333f281fb85ecc53d9b5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4a1bfefb843841beaa7b333f281fb85ecc53d9b5", "patch": "@@ -1,3 +1,26 @@\n+2011-09-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb: Minor reformatting.\n+\n+2011-09-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb: Better error message.\n+\n+2011-09-05  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_aggr.adb: Add with and use clause for Exp_Ch6.\n+\t(Expand_Array_Aggregate): Detect a special case of an aggregate\n+\twhich contains tasks in the context of an unexpanded return\n+\tstatement of a build-in-place function.\n+\t* exp_ch6.adb: Add with and use clause for Exp_Aggr.\n+\t(Expand_N_Extended_Return_Statement): Detect a delayed aggregate\n+\twhich contains tasks and expand it now that the original simple\n+\treturn statement has been rewritten.\n+\t* exp_ch9.adb (Build_Activation_Chain_Entity): Code\n+\treformatting. Do not create a chain for an extended return\n+\tstatement if one is already available.\n+\t(Has_Activation_Chain): New routine.\n+\n 2011-09-05  Marc Sango  <sango@adacore.com>\n \n \t* sem_ch3.adb (Analyze_Object_Declaration): Remove"}, {"sha": "31b0c61736eb91740675e997fc35e5c6d3cda9f3", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a1bfefb843841beaa7b333f281fb85ecc53d9b5/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a1bfefb843841beaa7b333f281fb85ecc53d9b5/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=4a1bfefb843841beaa7b333f281fb85ecc53d9b5", "patch": "@@ -32,6 +32,7 @@ with Errout;   use Errout;\n with Expander; use Expander;\n with Exp_Util; use Exp_Util;\n with Exp_Ch3;  use Exp_Ch3;\n+with Exp_Ch6;  use Exp_Ch6;\n with Exp_Ch7;  use Exp_Ch7;\n with Exp_Ch9;  use Exp_Ch9;\n with Exp_Disp; use Exp_Disp;\n@@ -4604,6 +4605,21 @@ package body Exp_Aggr is\n         or else Is_RTE (Ctyp, RE_Asm_Output_Operand)\n       then\n          return;\n+\n+      --  Do not expand an aggregate for an array type which contains tasks if\n+      --  the aggregate is associated with an unexpanded return statement of a\n+      --  build-in-place function. The aggregate is expanded when the related\n+      --  return statement (rewritten into an extended return) is processed.\n+      --  This delay ensures that any temporaries and initialization code\n+      --  generated for the aggregate appear in the proper return block and\n+      --  use the correct _chain and _master.\n+\n+      elsif Has_Task (Base_Type (Etype (N)))\n+        and then Nkind (Parent (N)) = N_Simple_Return_Statement\n+        and then Is_Build_In_Place_Function\n+                   (Return_Applies_To (Return_Statement_Entity (Parent (N))))\n+      then\n+         return;\n       end if;\n \n       --  If the semantic analyzer has determined that aggregate N will raise"}, {"sha": "82f11931167a521a8e80fa89da772c1089ca63bd", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a1bfefb843841beaa7b333f281fb85ecc53d9b5/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a1bfefb843841beaa7b333f281fb85ecc53d9b5/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=4a1bfefb843841beaa7b333f281fb85ecc53d9b5", "patch": "@@ -29,6 +29,7 @@ with Debug;    use Debug;\n with Einfo;    use Einfo;\n with Errout;   use Errout;\n with Elists;   use Elists;\n+with Exp_Aggr; use Exp_Aggr;\n with Exp_Atag; use Exp_Atag;\n with Exp_Ch2;  use Exp_Ch2;\n with Exp_Ch3;  use Exp_Ch3;\n@@ -4768,6 +4769,15 @@ package body Exp_Ch6 is\n          if Is_Build_In_Place\n            and then Has_Task (Etype (Par_Func))\n          then\n+            --  The return expression is an aggregate for a complex type which\n+            --  contains tasks. This particular case is left unexpanded since\n+            --  the regular expansion would insert all temporaries and\n+            --  initialization code in the wrong block.\n+\n+            if Nkind (Exp) = N_Aggregate then\n+               Expand_N_Aggregate (Exp);\n+            end if;\n+\n             Append_To (Stmts, Move_Activation_Chain);\n          end if;\n "}, {"sha": "542ae6109a9c4843409dd99bc274de97d0731505", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 97, "deletions": 48, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a1bfefb843841beaa7b333f281fb85ecc53d9b5/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a1bfefb843841beaa7b333f281fb85ecc53d9b5/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=4a1bfefb843841beaa7b333f281fb85ecc53d9b5", "patch": "@@ -843,72 +843,121 @@ package body Exp_Ch9 is\n    -----------------------------------\n \n    procedure Build_Activation_Chain_Entity (N : Node_Id) is\n-      P     : Node_Id;\n+      function Has_Activation_Chain (Stmt : Node_Id) return Boolean;\n+      --  Determine whether an extended return statement has an activation\n+      --  chain.\n+\n+      --------------------------\n+      -- Has_Activation_Chain --\n+      --------------------------\n+\n+      function Has_Activation_Chain (Stmt : Node_Id) return Boolean is\n+         Decl : Node_Id;\n+\n+      begin\n+         Decl := First (Return_Object_Declarations (Stmt));\n+         while Present (Decl) loop\n+            if Nkind (Decl) = N_Object_Declaration\n+              and then Chars (Defining_Identifier (Decl)) = Name_uChain\n+            then\n+               return True;\n+            end if;\n+\n+            Next (Decl);\n+         end loop;\n+\n+         return False;\n+      end Has_Activation_Chain;\n+\n+      --  Local variables\n+\n       Decls : List_Id;\n-      Chain : Entity_Id;\n+      Par   : Node_Id;\n+\n+   --  Start of processing for Build_Activation_Chain_Entity\n \n    begin\n-      --  Loop to find enclosing construct containing activation chain variable\n-      --  The construct is a body, a block, or an extended return.\n-\n-      P := Parent (N);\n-\n-      while not Nkind_In (P, N_Subprogram_Body,\n-                             N_Entry_Body,\n-                             N_Package_Declaration,\n-                             N_Package_Body,\n-                             N_Block_Statement,\n-                             N_Task_Body,\n-                             N_Extended_Return_Statement)\n+      --  Traverse the parent chain looking for an enclosing construct which\n+      --  contains an activation chain variable. The construct is either a\n+      --  body, a block, or an extended return.\n+\n+      Par := Parent (N);\n+\n+      while not Nkind_In (Par, N_Block_Statement,\n+                               N_Entry_Body,\n+                               N_Extended_Return_Statement,\n+                               N_Package_Body,\n+                               N_Package_Declaration,\n+                               N_Subprogram_Body,\n+                               N_Task_Body)\n       loop\n-         P := Parent (P);\n+         Par := Parent (Par);\n       end loop;\n \n-      --  If we are in a package body, the activation chain variable is\n-      --  declared in the body, but the Activation_Chain_Entity is attached\n-      --  to the spec.\n+      --  When the enclosing construct is a package body, the activation chain\n+      --  variable is declared in the body, but the Activation_Chain_Entity is\n+      --  attached to the spec.\n \n-      if Nkind (P) = N_Package_Body then\n-         Decls := Declarations (P);\n-         P := Unit_Declaration_Node (Corresponding_Spec (P));\n+      if Nkind (Par) = N_Package_Body then\n+         Decls := Declarations (Par);\n+         Par   := Unit_Declaration_Node (Corresponding_Spec (Par));\n \n-      elsif Nkind (P) = N_Package_Declaration then\n-         Decls := Visible_Declarations (Specification (P));\n+      elsif Nkind (Par) = N_Package_Declaration then\n+         Decls := Visible_Declarations (Specification (Par));\n \n-      elsif Nkind (P) = N_Extended_Return_Statement then\n-         Decls := Return_Object_Declarations (P);\n+      elsif Nkind (Par) = N_Extended_Return_Statement then\n+         Decls := Return_Object_Declarations (Par);\n \n       else\n-         Decls := Declarations (P);\n+         Decls := Declarations (Par);\n       end if;\n \n-      --  If activation chain entity not already declared, declare it\n+      --  If an activation chain entity has not been declared already, create\n+      --  one.\n \n-      if Nkind (P) = N_Extended_Return_Statement\n-        or else No (Activation_Chain_Entity (P))\n+      if Nkind (Par) = N_Extended_Return_Statement\n+        or else No (Activation_Chain_Entity (Par))\n       then\n-         Chain := Make_Defining_Identifier (Sloc (N), Name_uChain);\n-\n-         --  Note: An extended return statement is not really a task activator,\n-         --  but it does have an activation chain on which to store the tasks\n-         --  temporarily. On successful return, the tasks on this chain are\n-         --  moved to the chain passed in by the caller. We do not build an\n-         --  Activation_Chain_Entity for an N_Extended_Return_Statement,\n-         --  because we do not want to build a call to Activate_Tasks. Task\n-         --  activation is the responsibility of the caller.\n-\n-         if Nkind (P) /= N_Extended_Return_Statement then\n-            Set_Activation_Chain_Entity (P, Chain);\n+         --  Since extended return statements do not store the entity of the\n+         --  chain, examine the return object declarations to avoid creating\n+         --  a duplicate.\n+\n+         if Nkind (Par) = N_Extended_Return_Statement\n+           and then Has_Activation_Chain (Par)\n+         then\n+            return;\n          end if;\n \n-         Prepend_To (Decls,\n-           Make_Object_Declaration (Sloc (P),\n-             Defining_Identifier => Chain,\n-             Aliased_Present => True,\n-             Object_Definition =>\n-               New_Reference_To (RTE (RE_Activation_Chain), Sloc (P))));\n+         declare\n+            Chain : Entity_Id;\n+            Decl  : Node_Id;\n \n-         Analyze (First (Decls));\n+         begin\n+            Chain := Make_Defining_Identifier (Sloc (N), Name_uChain);\n+\n+            --  Note: An extended return statement is not really a task\n+            --  activator, but it does have an activation chain on which to\n+            --  store the tasks temporarily. On successful return, the tasks\n+            --  on this chain are moved to the chain passed in by the caller.\n+            --  We do not build an Activation_Chain_Entity for an extended\n+            --  return statement, because we do not want to build a call to\n+            --  Activate_Tasks. Task activation is the responsibility of the\n+            --  caller.\n+\n+            if Nkind (Par) /= N_Extended_Return_Statement then\n+               Set_Activation_Chain_Entity (Par, Chain);\n+            end if;\n+\n+            Decl :=\n+              Make_Object_Declaration (Sloc (Par),\n+                Defining_Identifier => Chain,\n+                Aliased_Present     => True,\n+                Object_Definition   =>\n+                  New_Reference_To (RTE (RE_Activation_Chain), Sloc (Par)));\n+\n+            Prepend_To (Decls, Decl);\n+            Analyze (Decl);\n+         end;\n       end if;\n    end Build_Activation_Chain_Entity;\n "}, {"sha": "b5ee8fec170b3c770ed1fad411899ede2b609523", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a1bfefb843841beaa7b333f281fb85ecc53d9b5/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a1bfefb843841beaa7b333f281fb85ecc53d9b5/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=4a1bfefb843841beaa7b333f281fb85ecc53d9b5", "patch": "@@ -3270,8 +3270,11 @@ package body Sem_Ch3 is\n          --  In SPARK, a declaration of unconstrained type is allowed\n          --  only for constants of type string.\n \n+         --  Why do we need to test Original_Node here ???\n+\n          if Is_String_Type (T)\n-           and then not Constant_Present (Original_Node (N)) then\n+           and then not Constant_Present (Original_Node (N))\n+         then\n             Check_SPARK_Restriction\n               (\"declaration of object of unconstrained type not allowed\",\n                N);"}, {"sha": "36b9e31b51ad2bfe1f77493dc917e6d255a2deef", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a1bfefb843841beaa7b333f281fb85ecc53d9b5/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a1bfefb843841beaa7b333f281fb85ecc53d9b5/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=4a1bfefb843841beaa7b333f281fb85ecc53d9b5", "patch": "@@ -2337,13 +2337,15 @@ package body Sem_Ch5 is\n          if Of_Present (N) then\n             Set_Etype (Def_Id, Component_Type (Typ));\n \n-         elsif Ada_Version < Ada_2012 then\n+         else\n             Error_Msg_N\n               (\"missing Range attribute in iteration over an array\", N);\n \n-         else\n-            Error_Msg_N\n-              (\"to iterate over the elements of an array, use OF\", N);\n+            if Ada_Version >= Ada_2012 then\n+               Error_Msg_NE\n+                 (\"\\if& is meant to designate an element of the array, use OF\",\n+                    N, Def_Id);\n+            end if;\n \n             --  Prevent cascaded errors\n "}]}