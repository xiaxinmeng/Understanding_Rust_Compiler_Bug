{"sha": "9d86e84ec0b576bd3586cf05f6605fee316c9cd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ4NmU4NGVjMGI1NzZiZDM1ODZjZjA1ZjY2MDVmZWUzMTZjOWNkNA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2015-07-09T15:39:53Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2015-07-09T15:39:53Z"}, "message": "re PR rtl-optimization/66782 (Unable to run 64-bit wine after MS->SYSV register changes)\n\n2015-07-09  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/66782\n\t* lra-int.h (struct lra_insn_recog_data): Add comment about\n\tclobbered hard regs for arg_hard_regs.\n\t* lra.c (lra_set_insn_recog_data): Add clobbered hard regs.\n\t* lra-lives.c (process_bb_lives): Process clobbered hard regs.\n\tAdd condition for processing used hard regs.\n\t* lra-constraints.c (update_ebb_live_info, inherit_in_ebb):\n\tProcess clobbered hard regs.\n\nFrom-SVN: r225618", "tree": {"sha": "29d233e4e61f3cd1493734ba7208f952708bef72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29d233e4e61f3cd1493734ba7208f952708bef72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d86e84ec0b576bd3586cf05f6605fee316c9cd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d86e84ec0b576bd3586cf05f6605fee316c9cd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d86e84ec0b576bd3586cf05f6605fee316c9cd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d86e84ec0b576bd3586cf05f6605fee316c9cd4/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c551c21da8eca5bbc4798b7db33c8f3c9f39ec06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c551c21da8eca5bbc4798b7db33c8f3c9f39ec06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c551c21da8eca5bbc4798b7db33c8f3c9f39ec06"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "32a43744f47b07a46114dfa1c0064f0f44cb4063", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d86e84ec0b576bd3586cf05f6605fee316c9cd4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d86e84ec0b576bd3586cf05f6605fee316c9cd4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d86e84ec0b576bd3586cf05f6605fee316c9cd4", "patch": "@@ -1,3 +1,14 @@\n+2015-07-09  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/66782\n+\t* lra-int.h (struct lra_insn_recog_data): Add comment about\n+\tclobbered hard regs for arg_hard_regs.\n+\t* lra.c (lra_set_insn_recog_data): Add clobbered hard regs.\n+\t* lra-lives.c (process_bb_lives): Process clobbered hard regs.\n+\tAdd condition for processing used hard regs.\n+\t* lra-constraints.c (update_ebb_live_info, inherit_in_ebb):\n+\tProcess clobbered hard regs.\n+\n 2015-07-09  Michael Matz  <matz@suse.de>\n \n \t* genmatch.c (fprintf_indent): New function."}, {"sha": "7d170b63bc83bab0b9dd746ab24f43d0670622a4", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d86e84ec0b576bd3586cf05f6605fee316c9cd4/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d86e84ec0b576bd3586cf05f6605fee316c9cd4/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=9d86e84ec0b576bd3586cf05f6605fee316c9cd4", "patch": "@@ -5149,6 +5149,11 @@ update_ebb_live_info (rtx_insn *head, rtx_insn *tail)\n       for (reg = curr_static_id->hard_regs; reg != NULL; reg = reg->next)\n \tif (reg->type == OP_OUT && ! reg->subreg_p)\n \t  bitmap_clear_bit (&live_regs, reg->regno);\n+      if (curr_id->arg_hard_regs != NULL)\n+\t/* Make clobbered argument hard registers die.  */\n+\tfor (i = 0; (regno = curr_id->arg_hard_regs[i]) >= 0; i++)\n+\t  if (regno >= FIRST_PSEUDO_REGISTER)\n+\t    bitmap_clear_bit (&live_regs, regno - FIRST_PSEUDO_REGISTER);\n       /* Mark each used value as live.  */\n       for (reg = curr_id->regs; reg != NULL; reg = reg->next)\n \tif (reg->type != OP_OUT\n@@ -5159,9 +5164,10 @@ update_ebb_live_info (rtx_insn *head, rtx_insn *tail)\n \t    && bitmap_bit_p (&check_only_regs, reg->regno))\n \t  bitmap_set_bit (&live_regs, reg->regno);\n       if (curr_id->arg_hard_regs != NULL)\n-\t/* Make argument hard registers live.  */\n+\t/* Make used argument hard registers live.  */\n \tfor (i = 0; (regno = curr_id->arg_hard_regs[i]) >= 0; i++)\n-\t  if (bitmap_bit_p (&check_only_regs, regno))\n+\t  if (regno < FIRST_PSEUDO_REGISTER\n+\t      && bitmap_bit_p (&check_only_regs, regno))\n \t    bitmap_set_bit (&live_regs, regno);\n       /* It is quite important to remove dead move insns because it\n \t means removing dead store.  We don't need to process them for\n@@ -5471,6 +5477,12 @@ inherit_in_ebb (rtx_insn *head, rtx_insn *tail)\n \t\t\t}\n \t\t    }\n \t\t}\n+\t  /* Process clobbered call regs.  */\n+\t  if (curr_id->arg_hard_regs != NULL)\n+\t    for (i = 0; (dst_regno = curr_id->arg_hard_regs[i]) >= 0; i++)\n+\t      if (dst_regno >= FIRST_PSEUDO_REGISTER)\n+\t\tusage_insns[dst_regno - FIRST_PSEUDO_REGISTER].check\n+\t\t  = -(int) INSN_UID (curr_insn);\n \t  if (! JUMP_P (curr_insn))\n \t    for (i = 0; i < to_inherit_num; i++)\n \t      if (inherit_reload_reg (true, to_inherit[i].regno,\n@@ -5578,7 +5590,7 @@ inherit_in_ebb (rtx_insn *head, rtx_insn *tail)\n \t\t      add_next_usage_insn (src_regno, use_insn, reloads_num);\n \t\t    }\n \t\t}\n-\t  /* Process call args.  */\n+\t  /* Process used call regs.  */\n \t  if (curr_id->arg_hard_regs != NULL)\n \t    for (i = 0; (src_regno = curr_id->arg_hard_regs[i]) >= 0; i++)\n \t      if (src_regno < FIRST_PSEUDO_REGISTER)"}, {"sha": "5c640426686cf8b024337e4bac391cfdedbebbb2", "filename": "gcc/lra-int.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d86e84ec0b576bd3586cf05f6605fee316c9cd4/gcc%2Flra-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d86e84ec0b576bd3586cf05f6605fee316c9cd4/gcc%2Flra-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-int.h?ref=9d86e84ec0b576bd3586cf05f6605fee316c9cd4", "patch": "@@ -267,9 +267,11 @@ struct lra_insn_recog_data\n      duplication numbers: */\n   rtx **operand_loc; /* The operand locations, NULL if no operands.  */\n   rtx **dup_loc; /* The dup locations, NULL if no dups.\t */\n-  /* Number of hard registers implicitly used in given call insn.  The\n-     value can be NULL or points to array of the hard register numbers\n-     ending with a negative value.  */\n+  /* Number of hard registers implicitly used/clobbered in given call\n+     insn.  The value can be NULL or points to array of the hard\n+     register numbers ending with a negative value.  To differ\n+     clobbered and used hard regs, clobbered hard regs are incremented\n+     by FIRST_PSEUDO_REGISTER.  */\n   int *arg_hard_regs;\n   /* Cached value of get_preferred_alternatives.  */\n   alternative_mask preferred_alternatives;"}, {"sha": "78f165315590be8a8934297d2e76a4a8b3493616", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d86e84ec0b576bd3586cf05f6605fee316c9cd4/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d86e84ec0b576bd3586cf05f6605fee316c9cd4/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=9d86e84ec0b576bd3586cf05f6605fee316c9cd4", "patch": "@@ -814,6 +814,12 @@ process_bb_lives (basic_block bb, int &curr_point, bool dead_insn_p)\n \tif (reg->type != OP_IN)\n \t  make_hard_regno_born (reg->regno, false);\n \n+      if (curr_id->arg_hard_regs != NULL)\n+\tfor (i = 0; (regno = curr_id->arg_hard_regs[i]) >= 0; i++)\n+\t  if (regno >= FIRST_PSEUDO_REGISTER)\n+\t    /* It is a clobber.  */\n+\t    make_hard_regno_born (regno - FIRST_PSEUDO_REGISTER, false);\n+\n       sparseset_copy (unused_set, start_living);\n \n       sparseset_clear (start_dying);\n@@ -829,6 +835,12 @@ process_bb_lives (basic_block bb, int &curr_point, bool dead_insn_p)\n \tif (reg->type == OP_OUT && ! reg->early_clobber && ! reg->subreg_p)\n \t  make_hard_regno_dead (reg->regno);\n \n+      if (curr_id->arg_hard_regs != NULL)\n+\tfor (i = 0; (regno = curr_id->arg_hard_regs[i]) >= 0; i++)\n+\t  if (regno >= FIRST_PSEUDO_REGISTER)\n+\t    /* It is a clobber.  */\n+\t    make_hard_regno_dead (regno - FIRST_PSEUDO_REGISTER);\n+\n       if (call_p)\n \t{\n \t  if (flag_ipa_ra)\n@@ -877,7 +889,8 @@ process_bb_lives (basic_block bb, int &curr_point, bool dead_insn_p)\n \t/* Make argument hard registers live.  Don't create conflict\n \t   of used REAL_PIC_OFFSET_TABLE_REGNUM and the pic pseudo.  */\n \tfor (i = 0; (regno = curr_id->arg_hard_regs[i]) >= 0; i++)\n-\t  make_hard_regno_born (regno, true);\n+\t  if (regno < FIRST_PSEUDO_REGISTER)\n+\t    make_hard_regno_born (regno, true);\n \n       sparseset_and_compl (dead_set, start_living, start_dying);\n "}, {"sha": "a7b9919e6fc4977539a88cb966b55062b8e46315", "filename": "gcc/lra.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d86e84ec0b576bd3586cf05f6605fee316c9cd4/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d86e84ec0b576bd3586cf05f6605fee316c9cd4/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=9d86e84ec0b576bd3586cf05f6605fee316c9cd4", "patch": "@@ -1055,6 +1055,7 @@ lra_set_insn_recog_data (rtx_insn *insn)\n   data->arg_hard_regs = NULL;\n   if (CALL_P (insn))\n     {\n+      bool use_p;\n       rtx link;\n       int n_hard_regs, regno, arg_hard_regs[FIRST_PSEUDO_REGISTER];\n \n@@ -1065,14 +1066,16 @@ lra_set_insn_recog_data (rtx_insn *insn)\n       for (link = CALL_INSN_FUNCTION_USAGE (insn);\n \t   link != NULL_RTX;\n \t   link = XEXP (link, 1))\n-\tif (GET_CODE (XEXP (link, 0)) == USE\n+\tif (((use_p = GET_CODE (XEXP (link, 0)) == USE)\n+\t     || GET_CODE (XEXP (link, 0)) == CLOBBER)\n \t    && REG_P (XEXP (XEXP (link, 0), 0)))\n \t  {\n \t    regno = REGNO (XEXP (XEXP (link, 0), 0));\n \t    lra_assert (regno < FIRST_PSEUDO_REGISTER);\n \t    /* It is an argument register.  */\n \t    for (i = REG_NREGS (XEXP (XEXP (link, 0), 0)) - 1; i >= 0; i--)\n-\t      arg_hard_regs[n_hard_regs++] = regno + i;\n+\t      arg_hard_regs[n_hard_regs++]\n+\t\t= regno + i + (use_p ? 0 : FIRST_PSEUDO_REGISTER);\n \t  }\n       if (n_hard_regs != 0)\n \t{"}]}