{"sha": "f1555d4013ed3cae2589270436387063d1c2f1a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE1NTVkNDAxM2VkM2NhZTI1ODkyNzA0MzYzODcwNjNkMWMyZjFhMw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-05-13T17:47:41Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-06-17T10:10:41Z"}, "message": "Cleanup clz and ctz code in range_of_builtin_call.\n\nThese are various cleanups to the clz/ctz code.\n\nFirst, ranges from range_of_expr are always numeric so we\nshould adjust.  Also, the checks for non-zero were assuming the argument\nwas unsigned, which in the PR's testcase is clearly not.  I've cleaned\nthis up, so that it works either way.\n\nI've also removed the following annoying idiom:\n\n-         int newmini = prec - 1 - wi::floor_log2 (r.upper_bound ());\n-         if (newmini == prec)\n\nThis is really a check for r.upper_bound() == 0, as floor_log2(0)\nreturns -1.  It's confusing.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/100790\n\t* gimple-range.cc (range_of_builtin_call): Cleanup clz and ctz\n\tcode.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr100790.c: New test.", "tree": {"sha": "ce352c9735b2095b6952b2b84a660240dd8be3b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce352c9735b2095b6952b2b84a660240dd8be3b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1555d4013ed3cae2589270436387063d1c2f1a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1555d4013ed3cae2589270436387063d1c2f1a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1555d4013ed3cae2589270436387063d1c2f1a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1555d4013ed3cae2589270436387063d1c2f1a3/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8eac92a07e386301f7b09f7ef6146e6e3ac6b6cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eac92a07e386301f7b09f7ef6146e6e3ac6b6cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eac92a07e386301f7b09f7ef6146e6e3ac6b6cd"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "15c65f16a32844c83f20fcff8a58730743941d4d", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1555d4013ed3cae2589270436387063d1c2f1a3/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1555d4013ed3cae2589270436387063d1c2f1a3/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=f1555d4013ed3cae2589270436387063d1c2f1a3", "patch": "@@ -960,32 +960,29 @@ fold_using_range::range_of_builtin_call (irange &r, gcall *call,\n \n       src.get_operand (r, arg);\n       // From clz of minimum we can compute result maximum.\n-      if (r.constant_p () && !r.varying_p ())\n+      if (!r.undefined_p ())\n \t{\n-\t  int newmaxi = prec - 1 - wi::floor_log2 (r.lower_bound ());\n-\t  // Argument is unsigned, so do nothing if it is [0, ...] range.\n-\t  if (newmaxi != prec)\n+\t  // From clz of minimum we can compute result maximum.\n+\t  if (wi::gt_p (r.lower_bound (), 0, TYPE_SIGN (r.type ())))\n+\t    {\n+\t      maxi = prec - 1 - wi::floor_log2 (r.lower_bound ());\n+\t      if (mini == -2)\n+\t\tmini = 0;\n+\t    }\n+\t  else if (!range_includes_zero_p (&r))\n \t    {\n \t      mini = 0;\n-\t      maxi = newmaxi;\n+\t      maxi = prec - 1;\n \t    }\n-\t}\n-      else if (!range_includes_zero_p (&r))\n-\t{\n-\t  maxi = prec - 1;\n-\t  mini = 0;\n-\t}\n-      if (mini == -2)\n-\tbreak;\n-      // From clz of maximum we can compute result minimum.\n-      if (r.constant_p ())\n-\t{\n-\t  int newmini = prec - 1 - wi::floor_log2 (r.upper_bound ());\n-\t  if (newmini == prec)\n+\t  if (mini == -2)\n+\t    break;\n+\t  // From clz of maximum we can compute result minimum.\n+\t  wide_int max = r.upper_bound ();\n+\t  int newmini = prec - 1 - wi::floor_log2 (max);\n+\t  if (max == 0)\n \t    {\n-\t      // Argument range is [0, 0].  If CLZ_DEFINED_VALUE_AT_ZERO\n-\t      // is 2 with VALUE of prec, return [prec, prec], otherwise\n-\t      // ignore the range.\n+\t      // If CLZ_DEFINED_VALUE_AT_ZERO is 2 with VALUE of prec,\n+\t      // return [prec, prec], otherwise ignore the range.\n \t      if (maxi == prec)\n \t\tmini = prec;\n \t    }\n@@ -1026,7 +1023,8 @@ fold_using_range::range_of_builtin_call (irange &r, gcall *call,\n       src.get_operand (r, arg);\n       if (!r.undefined_p ())\n \t{\n-\t  if (r.lower_bound () != 0)\n+\t  // If arg is non-zero, then use [0, prec - 1].\n+\t  if (!range_includes_zero_p (&r))\n \t    {\n \t      mini = 0;\n \t      maxi = prec - 1;"}, {"sha": "31e0effdea26ec8fc9c8c61e12776e9797dd81ea", "filename": "gcc/testsuite/gcc.dg/pr100790.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1555d4013ed3cae2589270436387063d1c2f1a3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100790.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1555d4013ed3cae2589270436387063d1c2f1a3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100790.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100790.c?ref=f1555d4013ed3cae2589270436387063d1c2f1a3", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -w\" }\n+\n+__builtin_clz(int x) { x ? __builtin_clz(x) : 32; }"}]}