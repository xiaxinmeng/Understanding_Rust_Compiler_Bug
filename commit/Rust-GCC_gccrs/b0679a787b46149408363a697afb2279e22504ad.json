{"sha": "b0679a787b46149408363a697afb2279e22504ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA2NzlhNzg3YjQ2MTQ5NDA4MzYzYTY5N2FmYjIyNzllMjI1MDRhZA==", "commit": {"author": {"name": "Sebastian Perta", "email": "sebastian.perta@renesas.com", "date": "2018-01-26T10:55:31Z"}, "committer": {"name": "Sebastian Perta", "email": "sebastianperta@gcc.gnu.org", "date": "2018-01-26T10:55:31Z"}, "message": "rl78.c: if operand 2 is const avoid addition with 0 and use incw and decw where possible\n\n2018-01-25  Sebastian Perta  <sebastian.perta@renesas.com>\n\n\t* config/rl78/rl78.c: if operand 2 is const avoid addition with 0\n\tand use incw and decw where possible\n\t* testsuite/gcc.target/rl78/test_addsi3_internal.c: new file\n\nFrom-SVN: r257079", "tree": {"sha": "f79b160b8d141e0ba10c3b814bde07a1fed992ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f79b160b8d141e0ba10c3b814bde07a1fed992ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0679a787b46149408363a697afb2279e22504ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0679a787b46149408363a697afb2279e22504ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0679a787b46149408363a697afb2279e22504ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0679a787b46149408363a697afb2279e22504ad/comments", "author": null, "committer": null, "parents": [{"sha": "0547173960db190acc75e7017bf8d2e89706a5ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0547173960db190acc75e7017bf8d2e89706a5ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0547173960db190acc75e7017bf8d2e89706a5ee"}], "stats": {"total": 64, "additions": 62, "deletions": 2}, "files": [{"sha": "6792051a53db10fd39eb9826e12176d4c0fde5fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0679a787b46149408363a697afb2279e22504ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0679a787b46149408363a697afb2279e22504ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0679a787b46149408363a697afb2279e22504ad", "patch": "@@ -1,3 +1,9 @@\n+2018-01-25  Sebastian Perta  <sebastian.perta@renesas.com>\n+\n+\t* config/rl78/rl78.c: if operand 2 is const avoid addition with 0\n+\tand use incw and decw where possible\n+\t* testsuite/gcc.target/rl78/test_addsi3_internal.c: new file\n+\n 2018-01-26  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/81082"}, {"sha": "b8c1e7b89dde1b35e53388b7c668bb9ea07bf757", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0679a787b46149408363a697afb2279e22504ad/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0679a787b46149408363a697afb2279e22504ad/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=b0679a787b46149408363a697afb2279e22504ad", "patch": "@@ -80,6 +80,9 @@ static const char * const word_regnames[] =\n   \"sp\", \"ap\", \"psw\", \"es\", \"cs\"\n };\n \n+/* used by rl78_addsi3_internal for formatting insns output */\n+static char fmt_buffer[1024];\n+\n /* Structure for G13 MDUC registers.  */\n struct mduc_reg_type\n {\n@@ -4788,6 +4791,8 @@ rl78_flags_already_set (rtx op, rtx operand)\n const char *\n rl78_addsi3_internal (rtx * operands, unsigned int alternative)\n {\n+  const char *addH2 = \"addw ax, %H2\\n\\t\";\n+\n   /* If we are adding in a constant symbolic address when -mes0\n      is active then we know that the address must be <64K and\n      that it is invalid to access anything above 64K relative to\n@@ -4799,16 +4804,38 @@ rl78_addsi3_internal (rtx * operands, unsigned int alternative)\n       && ! TREE_SIDE_EFFECTS (SYMBOL_REF_DECL (operands[2])))\n     return \"movw ax, %h1\\n\\taddw ax, %h2\\n\\tmovw %h0, ax\";\n \n+  if(CONST_INT_P(operands[2]))\n+  {\n+    if((INTVAL(operands[2]) & 0xFFFF0000) == 0)\n+    {\n+        addH2 = \"\";\n+    }\n+    else if((INTVAL(operands[2]) & 0xFFFF0000) == 0x00010000)\n+    {\n+        addH2 = \"incw ax\\n\\t\";\n+    }\n+    else if((INTVAL(operands[2]) & 0xFFFF0000) == 0xFFFF0000)\n+    {\n+        addH2 = \"decw ax\\n\\t\";\n+    }\n+  }\n+\n   switch (alternative)\n     {\n     case 0:\n     case 1:\n-      return \"movw ax, %h1\\n\\taddw ax, %h2\\n\\tmovw %h0, ax\\n\\tmovw ax, %H1\\n\\tsknc\\n\\tincw ax\\n\\taddw ax, %H2\\n\\tmovw %H0, ax\";\n+\t  snprintf(fmt_buffer, sizeof(fmt_buffer),\n+               \"movw ax, %%h1\\n\\taddw ax, %%h2\\n\\tmovw %%h0, ax\\n\\tmovw ax, %%H1\\n\\tsknc\\n\\tincw ax\\n\\t%smovw %%H0,ax\", addH2);\n+\t  break;\n     case 2:\n-      return \"movw ax, %h1\\n\\taddw ax,%h2\\n\\tmovw bc, ax\\n\\tmovw ax, %H1\\n\\tsknc\\n\\tincw ax\\n\\taddw ax, %H2\\n\\tmovw %H0, ax\\n\\tmovw ax, bc\\n\\tmovw %h0, ax\";\n+\t  snprintf(fmt_buffer, sizeof(fmt_buffer),\n+               \"movw ax, %%h1\\n\\taddw ax, %%h2\\n\\tmovw bc, ax\\n\\tmovw ax, %%H1\\n\\tsknc\\n\\tincw ax\\n\\t%smovw %%H0, ax\\n\\tmovw ax, bc\\n\\tmovw %%h0, ax\", addH2);\n+ \t  break;\n     default:\n       gcc_unreachable ();\n     }\n+\n+  return fmt_buffer;\n }\n \n rtx"}, {"sha": "575f11600547547baa5d83f85f107d5b7346bbe2", "filename": "gcc/testsuite/gcc.target/rl78/test_addsi3_internal.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0679a787b46149408363a697afb2279e22504ad/gcc%2Ftestsuite%2Fgcc.target%2Frl78%2Ftest_addsi3_internal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0679a787b46149408363a697afb2279e22504ad/gcc%2Ftestsuite%2Fgcc.target%2Frl78%2Ftest_addsi3_internal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Frl78%2Ftest_addsi3_internal.c?ref=b0679a787b46149408363a697afb2279e22504ad", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\r\n+/* { dg-options \"-Os\" } */\r\n+long l, v;\r\n+\r\n+void test1()\r\n+{\r\n+\tl++;\r\n+}\r\n+\r\n+void test2()\r\n+{\r\n+\tl--;\r\n+}\r\n+\r\n+void test3()\r\n+{\r\n+\tl += 10;\r\n+}\r\n+\r\n+long test4()\r\n+{\r\n+\treturn l + v;\r\n+}\r\n+\r\n+/* { dg-final { scan-assembler-not \"addw ax, #0\" } } */\r\n+/* { dg-final { scan-assembler-not \"addw ax, #-1\" } } */\r\n+/* { dg-final { scan-assembler \"decw ax\" } } */\r"}]}