{"sha": "21de01f5554fa037f59b27525d2eb7342f5649c7", "node_id": "C_kwDOANBUbNoAKDIxZGUwMWY1NTU0ZmEwMzdmNTliMjc1MjVkMmViNzM0MmY1NjQ5Yzc", "commit": {"author": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2022-11-09T06:02:31Z"}, "committer": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2022-11-11T01:57:01Z"}, "message": "i386: Add ISA check for newly introduced prefetch builtins.\n\nHi all,\n\nAs Hongtao said, the fail on pentiumpro is caused by missing ISA check\nsince we are using emit_insn () through new builtins and it won't check\nif the TARGET matches. Previously, the builtin in middle-end will check\nthat.\n\nOn pentiumpro, we won't have anything that supports any prefetch so that\nit dropped into the pattern and then failed.\n\nI have added the restrictions just like what middle-end builtin_prefetch\ndoes. Also I added missing checks for PREFETCHI. Ok for trunk?\n\nBRs,\nHaochen\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-builtin.def (BDESC): Add\n\tOPTION_MASK_ISA2_PREFETCHI for prefetchi builtin.\n\t* config/i386/i386-expand.cc (ix86_expand_builtin):\n\tAdd ISA check before emit_insn.\n\t* config/i386/prfchiintrin.h: Add target for intrin.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/prefetchi-5.c: New test.", "tree": {"sha": "8d9b9b10a02d00464ac34e529daaed7c2789df81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d9b9b10a02d00464ac34e529daaed7c2789df81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21de01f5554fa037f59b27525d2eb7342f5649c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21de01f5554fa037f59b27525d2eb7342f5649c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21de01f5554fa037f59b27525d2eb7342f5649c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21de01f5554fa037f59b27525d2eb7342f5649c7/comments", "author": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f225b813e4d1d337164b72361f23306c1b28d550", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f225b813e4d1d337164b72361f23306c1b28d550", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f225b813e4d1d337164b72361f23306c1b28d550"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "5e0461acc005a16634650a64bd97992306cac399", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21de01f5554fa037f59b27525d2eb7342f5649c7/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21de01f5554fa037f59b27525d2eb7342f5649c7/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=21de01f5554fa037f59b27525d2eb7342f5649c7", "patch": "@@ -498,7 +498,7 @@ BDESC (0, OPTION_MASK_ISA2_WIDEKL, CODE_FOR_nothing, \"__builtin_ia32_aesencwide1\n BDESC (0, OPTION_MASK_ISA2_WIDEKL, CODE_FOR_nothing, \"__builtin_ia32_aesencwide256kl_u8\", IX86_BUILTIN_AESENCWIDE256KLU8, UNKNOWN, (int) UINT8_FTYPE_PV2DI_PCV2DI_PCVOID)\n \n /* PREFETCHI */\n-BDESC (0, 0, CODE_FOR_prefetchi, \"__builtin_ia32_prefetchi\", IX86_BUILTIN_PREFETCHI, UNKNOWN, (int) VOID_FTYPE_PCVOID_INT)\n+BDESC (0, OPTION_MASK_ISA2_PREFETCHI, CODE_FOR_prefetchi, \"__builtin_ia32_prefetchi\", IX86_BUILTIN_PREFETCHI, UNKNOWN, (int) VOID_FTYPE_PCVOID_INT)\n BDESC (0, 0, CODE_FOR_nothing, \"__builtin_ia32_prefetch\", IX86_BUILTIN_PREFETCH, UNKNOWN, (int) VOID_FTYPE_PCVOID_INT_INT_INT)\n \n BDESC_END (SPECIAL_ARGS, PURE_ARGS)"}, {"sha": "a166395db450151548a88ba7cf9ab57d72eff2a6", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21de01f5554fa037f59b27525d2eb7342f5649c7/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21de01f5554fa037f59b27525d2eb7342f5649c7/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=21de01f5554fa037f59b27525d2eb7342f5649c7", "patch": "@@ -13133,7 +13133,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \n \tif (INTVAL (op3) == 1)\n \t  {\n-\t    if (TARGET_64BIT\n+\t    if (TARGET_64BIT && TARGET_PREFETCHI\n \t\t&& local_func_symbolic_operand (op0, GET_MODE (op0)))\n \t      emit_insn (gen_prefetchi (op0, op2));\n \t    else\n@@ -13152,7 +13152,14 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t\top0 = convert_memory_address (Pmode, op0);\n \t\top0 = copy_addr_to_reg (op0);\n \t      }\n-\t    emit_insn (gen_prefetch (op0, op1, op2));\n+\n+\t    if (TARGET_3DNOW || TARGET_PREFETCH_SSE\n+\t\t|| TARGET_PRFCHW || TARGET_PREFETCHWT1)\n+\t      emit_insn (gen_prefetch (op0, op1, op2));\n+\t    else if (!MEM_P (op0) && side_effects_p (op0))\n+\t      /* Don't do anything with direct references to volatile memory,\n+\t\t but generate code to handle other side effects.  */\n+\t      emit_insn (op0);\n \t  }\n \n \treturn 0;"}, {"sha": "996a4be1aba96c1123b3aaaf147c50fb5b2b43af", "filename": "gcc/config/i386/prfchiintrin.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21de01f5554fa037f59b27525d2eb7342f5649c7/gcc%2Fconfig%2Fi386%2Fprfchiintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21de01f5554fa037f59b27525d2eb7342f5649c7/gcc%2Fconfig%2Fi386%2Fprfchiintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fprfchiintrin.h?ref=21de01f5554fa037f59b27525d2eb7342f5649c7", "patch": "@@ -30,6 +30,13 @@\n \n #ifdef __x86_64__\n \n+\n+#ifndef __PREFETCHI__\n+#pragma GCC push_options\n+#pragma GCC target(\"prefetchi\")\n+#define __DISABLE_PREFETCHI__\n+#endif /* __PREFETCHI__ */\n+\n extern __inline void\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _m_prefetchit0 (void* __P)\n@@ -44,6 +51,11 @@ _m_prefetchit1 (void* __P)\n   __builtin_ia32_prefetchi (__P, 2);\n }\n \n-#endif\n+#ifdef __DISABLE_PREFETCHI__\n+#undef __DISABLE_PREFETCHI__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_PREFETCHI__ */\n+\n+#endif /* __x86_64__ */\n \n #endif /* _PRFCHIINTRIN_H_INCLUDED */"}, {"sha": "8c26540f96a230ece5826a2509bd518a298d4336", "filename": "gcc/testsuite/gcc.target/i386/prefetchi-5.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21de01f5554fa037f59b27525d2eb7342f5649c7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchi-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21de01f5554fa037f59b27525d2eb7342f5649c7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchi-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchi-5.c?ref=21de01f5554fa037f59b27525d2eb7342f5649c7", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile { target { ia32 } } } */\n+/* { dg-options \"-O0 -march=pentiumpro\" } */\n+\n+#include \"prefetchi-4.c\""}]}