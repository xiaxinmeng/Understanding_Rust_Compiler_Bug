{"sha": "ebd7d91067c230ca812f6d5a3b6c2b2302aaf9a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJkN2Q5MTA2N2MyMzBjYTgxMmY2ZDVhM2I2YzJiMjMwMmFhZjlhNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-08-15T12:54:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-08-15T12:54:28Z"}, "message": "tree-ssa-structalias.c (readonly_id): Rename to string_id.\n\n2014-08-15  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-structalias.c (readonly_id): Rename to string_id.\n\t(get_constraint_for_ssa_var): Remove dead code.\n\t(get_constraint_for_1): Adjust.\n\t(find_what_var_points_to): Likewise.\n\t(init_base_vars): Likewise.  STRING_CSTs do not contain pointers.\n\nFrom-SVN: r214020", "tree": {"sha": "5212ba0bf347b9753f11947f4c212315e8a458dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5212ba0bf347b9753f11947f4c212315e8a458dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebd7d91067c230ca812f6d5a3b6c2b2302aaf9a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebd7d91067c230ca812f6d5a3b6c2b2302aaf9a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebd7d91067c230ca812f6d5a3b6c2b2302aaf9a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebd7d91067c230ca812f6d5a3b6c2b2302aaf9a5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "275be1dac2866fa0e50a73ad36bdc45760796d63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/275be1dac2866fa0e50a73ad36bdc45760796d63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/275be1dac2866fa0e50a73ad36bdc45760796d63"}], "stats": {"total": 61, "additions": 26, "deletions": 35}, "files": [{"sha": "8451f79ed24b523b0d80db71cff45f30cca2e43f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebd7d91067c230ca812f6d5a3b6c2b2302aaf9a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebd7d91067c230ca812f6d5a3b6c2b2302aaf9a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebd7d91067c230ca812f6d5a3b6c2b2302aaf9a5", "patch": "@@ -1,3 +1,11 @@\n+2014-08-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-structalias.c (readonly_id): Rename to string_id.\n+\t(get_constraint_for_ssa_var): Remove dead code.\n+\t(get_constraint_for_1): Adjust.\n+\t(find_what_var_points_to): Likewise.\n+\t(init_base_vars): Likewise.  STRING_CSTs do not contain pointers.\n+\n 2014-08-15  Ilya Tocar  <tocarip@gmail.com>\n \n \tPR target/61878"}, {"sha": "efcec2e0065ee4d750357982aec798b27162ec87", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 18, "deletions": 35, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebd7d91067c230ca812f6d5a3b6c2b2302aaf9a5/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebd7d91067c230ca812f6d5a3b6c2b2302aaf9a5/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=ebd7d91067c230ca812f6d5a3b6c2b2302aaf9a5", "patch": "@@ -344,7 +344,7 @@ vi_next (varinfo_t vi)\n \n /* Static IDs for the special variables.  Variable ID zero is unused\n    and used as terminator for the sub-variable chain.  */\n-enum { nothing_id = 1, anything_id = 2, readonly_id = 3,\n+enum { nothing_id = 1, anything_id = 2, string_id = 3,\n        escaped_id = 4, nonlocal_id = 5,\n        storedanything_id = 6, integer_id = 7 };\n \n@@ -2938,14 +2938,6 @@ get_constraint_for_ssa_var (tree t, vec<ce_s> *results, bool address_p)\n   cexpr.var = vi->id;\n   cexpr.type = SCALAR;\n   cexpr.offset = 0;\n-  /* If we determine the result is \"anything\", and we know this is readonly,\n-     say it points to readonly memory instead.  */\n-  if (cexpr.var == anything_id && TREE_READONLY (t))\n-    {\n-      gcc_unreachable ();\n-      cexpr.type = ADDRESSOF;\n-      cexpr.var = readonly_id;\n-    }\n \n   /* If we are not taking the address of the constraint expr, add all\n      sub-fiels of the variable as well.  */\n@@ -3380,10 +3372,11 @@ get_constraint_for_1 (tree t, vec<ce_s> *results, bool address_p,\n       return;\n     }\n \n-  /* String constants are read-only.  */\n+  /* String constants are read-only, ideally we'd have a CONST_DECL\n+     for those.  */\n   if (TREE_CODE (t) == STRING_CST)\n     {\n-      temp.var = readonly_id;\n+      temp.var = string_id;\n       temp.type = SCALAR;\n       temp.offset = 0;\n       results->safe_push (temp);\n@@ -6112,8 +6105,8 @@ find_what_var_points_to (varinfo_t orig_vi)\n \t  else if (vi->is_heap_var)\n \t    /* We represent heapvars in the points-to set properly.  */\n \t    ;\n-\t  else if (vi->id == readonly_id)\n-\t    /* Nobody cares.  */\n+\t  else if (vi->id == string_id)\n+\t    /* Nobody cares - STRING_CSTs are read-only entities.  */\n \t    ;\n \t  else if (vi->id == anything_id\n \t\t   || vi->id == integer_id)\n@@ -6501,7 +6494,7 @@ init_base_vars (void)\n   struct constraint_expr lhs, rhs;\n   varinfo_t var_anything;\n   varinfo_t var_nothing;\n-  varinfo_t var_readonly;\n+  varinfo_t var_string;\n   varinfo_t var_escaped;\n   varinfo_t var_nonlocal;\n   varinfo_t var_storedanything;\n@@ -6547,27 +6540,17 @@ init_base_vars (void)\n      but this one are redundant.  */\n   constraints.safe_push (new_constraint (lhs, rhs));\n \n-  /* Create the READONLY variable, used to represent that a variable\n-     points to readonly memory.  */\n-  var_readonly = new_var_info (NULL_TREE, \"READONLY\");\n-  gcc_assert (var_readonly->id == readonly_id);\n-  var_readonly->is_artificial_var = 1;\n-  var_readonly->offset = 0;\n-  var_readonly->size = ~0;\n-  var_readonly->fullsize = ~0;\n-  var_readonly->is_special_var = 1;\n-\n-  /* readonly memory points to anything, in order to make deref\n-     easier.  In reality, it points to anything the particular\n-     readonly variable can point to, but we don't track this\n-     separately. */\n-  lhs.type = SCALAR;\n-  lhs.var = readonly_id;\n-  lhs.offset = 0;\n-  rhs.type = ADDRESSOF;\n-  rhs.var = readonly_id;  /* FIXME */\n-  rhs.offset = 0;\n-  process_constraint (new_constraint (lhs, rhs));\n+  /* Create the STRING variable, used to represent that a variable\n+     points to a string literal.  String literals don't contain\n+     pointers so STRING doesn't point to anything.  */\n+  var_string = new_var_info (NULL_TREE, \"STRING\");\n+  gcc_assert (var_string->id == string_id);\n+  var_string->is_artificial_var = 1;\n+  var_string->offset = 0;\n+  var_string->size = ~0;\n+  var_string->fullsize = ~0;\n+  var_string->is_special_var = 1;\n+  var_string->may_have_pointers = 0;\n \n   /* Create the ESCAPED variable, used to represent the set of escaped\n      memory.  */"}]}