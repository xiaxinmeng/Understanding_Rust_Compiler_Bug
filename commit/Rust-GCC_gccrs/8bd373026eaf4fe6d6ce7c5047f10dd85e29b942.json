{"sha": "8bd373026eaf4fe6d6ce7c5047f10dd85e29b942", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJkMzczMDI2ZWFmNGZlNmQ2Y2U3YzUwNDdmMTBkZDg1ZTI5Yjk0Mg==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2012-02-10T16:38:37Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2012-02-10T16:38:37Z"}, "message": "re PR tree-optimization/50031 (Sphinx3 has a 10% regression going from GCC 4.5 to GCC 4.6 on powerpc)\n\n2012-02-10  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\t    Ira Rosen  <irar@il.ibm.com>\n\n\tPR tree-optimization/50031\n\t* targhooks.c (default_builtin_vectorization_cost): Handle\n\tvec_promote_demote.\n\t* target.h (enum vect_cost_for_stmt): Add vec_promote_demote.\n\t* tree-vect-loop.c (vect_get_single_scalar_iteraion_cost): Handle\n\tall types of reduction and pattern statements.\n\t(vect_estimate_min_profitable_iters): Likewise.\n\t* tree-vect-stmts.c (vect_model_promotion_demotion_cost): New function.\n\t(vect_get_load_cost): Use vec_perm for permutations; add dump logic\n\tfor explicit realigns.\n\t(vectorizable_conversion): Call vect_model_promotion_demotion_cost.\n\t* config/spu/spu.c (spu_builtin_vectorization_cost): Handle\n\tvec_promote_demote.\n\t* config/i386/i386.c (ix86_builtin_vectorization_cost): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_builtin_vectorization_cost): Update\n\tvec_perm for VSX and handle vec_promote_demote.\n\n\nCo-Authored-By: Ira Rosen <irar@il.ibm.com>\n\nFrom-SVN: r184102", "tree": {"sha": "1455fc4d37f458d4ad3a9c635dedf65878af17e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1455fc4d37f458d4ad3a9c635dedf65878af17e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19f326e8ec1917f33e54e165e036f2c6ff091ce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19f326e8ec1917f33e54e165e036f2c6ff091ce8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19f326e8ec1917f33e54e165e036f2c6ff091ce8"}], "stats": {"total": 135, "additions": 124, "deletions": 11}, "files": [{"sha": "02a7f16d8799942c53be12c15ee5e718af218871", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8bd373026eaf4fe6d6ce7c5047f10dd85e29b942", "patch": "@@ -1,3 +1,23 @@\n+2012-02-10  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\t    Ira Rosen  <irar@il.ibm.com>\n+\n+\tPR tree-optimization/50031\n+\t* targhooks.c (default_builtin_vectorization_cost): Handle\n+\tvec_promote_demote.\n+\t* target.h (enum vect_cost_for_stmt): Add vec_promote_demote.\n+\t* tree-vect-loop.c (vect_get_single_scalar_iteraion_cost): Handle\n+\tall types of reduction and pattern statements.\n+\t(vect_estimate_min_profitable_iters): Likewise.\n+\t* tree-vect-stmts.c (vect_model_promotion_demotion_cost): New function.\n+\t(vect_get_load_cost): Use vec_perm for permutations; add dump logic\n+\tfor explicit realigns.\n+\t(vectorizable_conversion): Call vect_model_promotion_demotion_cost.\n+\t* config/spu/spu.c (spu_builtin_vectorization_cost): Handle\n+\tvec_promote_demote.\n+\t* config/i386/i386.c (ix86_builtin_vectorization_cost): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_vectorization_cost): Update\n+\tvec_perm for VSX and handle vec_promote_demote.\n+\n 2012-02-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/52177"}, {"sha": "b901ee648e11d70e81a6d1ec48b32310426ca441", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8bd373026eaf4fe6d6ce7c5047f10dd85e29b942", "patch": "@@ -35336,6 +35336,7 @@ ix86_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n         return ix86_cost->cond_not_taken_branch_cost;\n \n       case vec_perm:\n+      case vec_promote_demote:\n         return ix86_cost->vec_stmt_cost;\n \n       default:"}, {"sha": "97a3b81b08d5933f7ddbccb82a262726d755a25d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8bd373026eaf4fe6d6ce7c5047f10dd85e29b942", "patch": "@@ -3543,9 +3543,16 @@ rs6000_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n         return 1;\n \n       case vec_perm:\n-\tif (!TARGET_VSX)\n+\tif (TARGET_VSX)\n+\t  return 4;\n+\telse\n \t  return 1;\n-\treturn 2;\n+\n+      case vec_promote_demote:\n+        if (TARGET_VSX)\n+          return 5;\n+        else\n+          return 1;\n \n       case cond_branch_taken:\n         return 3;"}, {"sha": "c65d003c40e5e5261c33d3283f7d34fd9fbb9316", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=8bd373026eaf4fe6d6ce7c5047f10dd85e29b942", "patch": "@@ -6920,6 +6920,7 @@ spu_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n       case scalar_to_vec:\n       case cond_branch_not_taken:\n       case vec_perm:\n+      case vec_promote_demote:\n         return 1;\n \n       case scalar_store:"}, {"sha": "e3307e8ead27b5bfd89c05331f86f2f66bb0e136", "filename": "gcc/target.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=8bd373026eaf4fe6d6ce7c5047f10dd85e29b942", "patch": "@@ -145,7 +145,8 @@ enum vect_cost_for_stmt\n   scalar_to_vec,\n   cond_branch_not_taken,\n   cond_branch_taken,\n-  vec_perm\n+  vec_perm,\n+  vec_promote_demote\n };\n \n /* The target structure.  This holds all the backend hooks.  */"}, {"sha": "8e3d74ea356645c3c94f9a0b293cd67ea993f0ac", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=8bd373026eaf4fe6d6ce7c5047f10dd85e29b942", "patch": "@@ -514,6 +514,7 @@ default_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n       case scalar_to_vec:\n       case cond_branch_not_taken:\n       case vec_perm:\n+      case vec_promote_demote:\n         return 1;\n \n       case unaligned_load:"}, {"sha": "7f42a7d88cd770cac687e7434dcd0c35f9f4bc5e", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=8bd373026eaf4fe6d6ce7c5047f10dd85e29b942", "patch": "@@ -2417,7 +2417,8 @@ vect_get_single_scalar_iteraion_cost (loop_vec_info loop_vinfo)\n           if (stmt_info\n               && !STMT_VINFO_RELEVANT_P (stmt_info)\n               && (!STMT_VINFO_LIVE_P (stmt_info)\n-                  || STMT_VINFO_DEF_TYPE (stmt_info) != vect_reduction_def))\n+                  || !VECTORIZABLE_CYCLE_DEF (STMT_VINFO_DEF_TYPE (stmt_info)))\n+\t      && !STMT_VINFO_IN_PATTERN_P (stmt_info))\n             continue;\n \n           if (STMT_VINFO_DATA_REF (vinfo_for_stmt (stmt)))\n@@ -2564,15 +2565,46 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo)\n \t{\n \t  gimple stmt = gsi_stmt (si);\n \t  stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n+\n+\t  if (STMT_VINFO_IN_PATTERN_P (stmt_info))\n+\t    {\n+\t      stmt = STMT_VINFO_RELATED_STMT (stmt_info);\n+\t      stmt_info = vinfo_for_stmt (stmt);\n+\t    }\n+\n \t  /* Skip stmts that are not vectorized inside the loop.  */\n \t  if (!STMT_VINFO_RELEVANT_P (stmt_info)\n \t      && (!STMT_VINFO_LIVE_P (stmt_info)\n-\t\t  || STMT_VINFO_DEF_TYPE (stmt_info) != vect_reduction_def))\n+                 || !VECTORIZABLE_CYCLE_DEF (STMT_VINFO_DEF_TYPE (stmt_info))))\n \t    continue;\n+\n \t  vec_inside_cost += STMT_VINFO_INSIDE_OF_LOOP_COST (stmt_info) * factor;\n \t  /* FIXME: for stmts in the inner-loop in outer-loop vectorization,\n \t     some of the \"outside\" costs are generated inside the outer-loop.  */\n \t  vec_outside_cost += STMT_VINFO_OUTSIDE_OF_LOOP_COST (stmt_info);\n+          if (is_pattern_stmt_p (stmt_info)\n+\t      && STMT_VINFO_PATTERN_DEF_SEQ (stmt_info))\n+            {\n+\t      gimple_stmt_iterator gsi;\n+\t      \n+\t      for (gsi = gsi_start (STMT_VINFO_PATTERN_DEF_SEQ (stmt_info));\n+\t\t   !gsi_end_p (gsi); gsi_next (&gsi))\n+                {\n+                  gimple pattern_def_stmt = gsi_stmt (gsi);\n+                  stmt_vec_info pattern_def_stmt_info\n+\t\t    = vinfo_for_stmt (pattern_def_stmt);\n+                  if (STMT_VINFO_RELEVANT_P (pattern_def_stmt_info)\n+                      || STMT_VINFO_LIVE_P (pattern_def_stmt_info))\n+\t\t    {\n+                      vec_inside_cost\n+\t\t\t+= STMT_VINFO_INSIDE_OF_LOOP_COST\n+\t\t\t   (pattern_def_stmt_info) * factor;\n+                      vec_outside_cost\n+\t\t\t+= STMT_VINFO_OUTSIDE_OF_LOOP_COST\n+\t\t\t   (pattern_def_stmt_info);\n+                    }\n+\t\t}\n+\t    }\n \t}\n     }\n "}, {"sha": "20f10f37437d8d8fe76282aa5831803e598a099b", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 56, "deletions": 6, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bd373026eaf4fe6d6ce7c5047f10dd85e29b942/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=8bd373026eaf4fe6d6ce7c5047f10dd85e29b942", "patch": "@@ -811,6 +811,46 @@ vect_model_simple_cost (stmt_vec_info stmt_info, int ncopies,\n }\n \n \n+/* Model cost for type demotion and promotion operations.  PWR is normally\n+   zero for single-step promotions and demotions.  It will be one if \n+   two-step promotion/demotion is required, and so on.  Each additional\n+   step doubles the number of instructions required.  */\n+\n+static void\n+vect_model_promotion_demotion_cost (stmt_vec_info stmt_info,\n+\t\t\t\t    enum vect_def_type *dt, int pwr)\n+{\n+  int i, tmp;\n+  int inside_cost = 0, outside_cost = 0, single_stmt_cost;\n+\n+  /* The SLP costs were already calculated during SLP tree build.  */\n+  if (PURE_SLP_STMT (stmt_info))\n+    return;\n+\n+  single_stmt_cost = vect_get_stmt_cost (vec_promote_demote);\n+  for (i = 0; i < pwr + 1; i++)\n+    {\n+      tmp = (STMT_VINFO_TYPE (stmt_info) == type_promotion_vec_info_type) ?\n+\t(i + 1) : i;\n+      inside_cost += vect_pow2 (tmp) * single_stmt_cost;\n+    }\n+\n+  /* FORNOW: Assuming maximum 2 args per stmts.  */\n+  for (i = 0; i < 2; i++)\n+    {\n+      if (dt[i] == vect_constant_def || dt[i] == vect_external_def)\n+        outside_cost += vect_get_stmt_cost (vector_stmt);\n+    }\n+\n+  if (vect_print_dump_info (REPORT_COST))\n+    fprintf (vect_dump, \"vect_model_promotion_demotion_cost: inside_cost = %d, \"\n+             \"outside_cost = %d .\", inside_cost, outside_cost);\n+\n+  /* Set the costs in STMT_INFO.  */\n+  stmt_vinfo_set_inside_of_loop_cost (stmt_info, NULL, inside_cost);\n+  stmt_vinfo_set_outside_of_loop_cost (stmt_info, NULL, outside_cost);\n+}\n+\n /* Function vect_cost_strided_group_size\n \n    For strided load or store, return the group_size only if it is the first\n@@ -887,7 +927,6 @@ vect_model_store_cost (stmt_vec_info stmt_info, int ncopies,\n       if (vect_print_dump_info (REPORT_COST))\n         fprintf (vect_dump, \"vect_model_store_cost: strided group_size = %d .\",\n                  group_size);\n-\n     }\n \n   /* Costs of the stores.  */\n@@ -1049,14 +1088,17 @@ vect_get_load_cost (struct data_reference *dr, int ncopies,\n     case dr_explicit_realign:\n       {\n         *inside_cost += ncopies * (2 * vect_get_stmt_cost (vector_load)\n-           + vect_get_stmt_cost (vector_stmt));\n+\t\t\t\t   + vect_get_stmt_cost (vec_perm));\n \n         /* FIXME: If the misalignment remains fixed across the iterations of\n            the containing loop, the following cost should be added to the\n            outside costs.  */\n         if (targetm.vectorize.builtin_mask_for_load)\n           *inside_cost += vect_get_stmt_cost (vector_stmt);\n \n+        if (vect_print_dump_info (REPORT_COST))\n+          fprintf (vect_dump, \"vect_model_load_cost: explicit realign\");\n+\n         break;\n       }\n     case dr_explicit_realign_optimized:\n@@ -1080,7 +1122,12 @@ vect_get_load_cost (struct data_reference *dr, int ncopies,\n           }\n \n         *inside_cost += ncopies * (vect_get_stmt_cost (vector_load)\n-          + vect_get_stmt_cost (vector_stmt));\n+\t\t\t\t   + vect_get_stmt_cost (vec_perm));\n+\n+        if (vect_print_dump_info (REPORT_COST))\n+          fprintf (vect_dump,\n+\t\t   \"vect_model_load_cost: explicit realign optimized\");\n+\n         break;\n       }\n \n@@ -2392,16 +2439,19 @@ vectorizable_conversion (gimple stmt, gimple_stmt_iterator *gsi,\n       if (vect_print_dump_info (REPORT_DETAILS))\n \tfprintf (vect_dump, \"=== vectorizable_conversion ===\");\n       if (code == FIX_TRUNC_EXPR || code == FLOAT_EXPR)\n-\tSTMT_VINFO_TYPE (stmt_info) = type_conversion_vec_info_type;\n+        {\n+\t  STMT_VINFO_TYPE (stmt_info) = type_conversion_vec_info_type;\n+\t  vect_model_simple_cost (stmt_info, ncopies, dt, NULL);\n+\t}\n       else if (modifier == NARROW)\n \t{\n \t  STMT_VINFO_TYPE (stmt_info) = type_demotion_vec_info_type;\n-\t  vect_model_simple_cost (stmt_info, ncopies, dt, NULL);\n+\t  vect_model_promotion_demotion_cost (stmt_info, dt, multi_step_cvt);\n \t}\n       else\n \t{\n \t  STMT_VINFO_TYPE (stmt_info) = type_promotion_vec_info_type;\n-\t  vect_model_simple_cost (stmt_info, 2 * ncopies, dt, NULL);\n+\t  vect_model_promotion_demotion_cost (stmt_info, dt, multi_step_cvt);\n \t}\n       VEC_free (tree, heap, interm_types);\n       return true;"}]}