{"sha": "50e461dfe37e66bff2a2932480fb041743cdd93c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBlNDYxZGZlMzdlNjZiZmYyYTI5MzI0ODBmYjA0MTc0M2NkZDkzYw==", "commit": {"author": {"name": "Olga Makhotina", "email": "olga.makhotina@intel.com", "date": "2018-05-08T12:23:08Z"}, "committer": {"name": "Sebastian Peryt", "email": "speryt@gcc.gnu.org", "date": "2018-05-08T12:23:08Z"}, "message": "config.gcc: Support \"goldmont\".\n\n2018-05-08  Olga Makhotina  <olga.makhotina@intel.com>\n\ngcc/\n\n\t* config.gcc: Support \"goldmont\".\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect \"goldmont\".\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle\n\tPROCESSOR_GOLDMONT.\n\t* config/i386/i386.c (m_GOLDMONT): Define.\n\t(processor_target_table): Add \"goldmont\".\n\t(PTA_GOLDMONT): Define.\n\t(ix86_lea_outperforms): Add TARGET_GOLDMONT.\n\t(get_builtin_code_for_version): Handle PROCESSOR_GOLDMONT.\n\t(fold_builtin_cpu): Add M_INTEL_GOLDMONT.\n\t(fold_builtin_cpu): Add \"goldmont\".\n\t(ix86_add_stmt_cost): Add TARGET_GOLDMONT.\n\t(ix86_option_override_internal): Add \"goldmont\".\n\t* config/i386/i386.h (processor_costs): Define TARGET_GOLDMONT.\n\t(processor_type): Add PROCESSOR_GOLDMONT.\n\t* config/i386/i386.md: Add CPU \"glm\".\n\t* config/i386/glm.md: New file.\n\t* config/i386/x86-tune.def: Add m_GOLDMONT.\n\t* doc/invoke.texi: Add goldmont as x86 -march=/-mtune= CPU type.\n\nlibgcc/\n\t* config/i386/cpuinfo.h (processor_types): Add INTEL_GOLDMONT.\n\t* config/i386/cpuinfo.c (get_intel_cpu): Detect Goldmont.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/builtin_target.c: Test goldmont.\n\t* gcc.target/i386/funcspec-56.inc: Tests for arch=goldmont and\n\tarch=silvermont.\n\nFrom-SVN: r260042", "tree": {"sha": "75627a5203d33c9541902dbfaa7744c8abb80b5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75627a5203d33c9541902dbfaa7744c8abb80b5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50e461dfe37e66bff2a2932480fb041743cdd93c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50e461dfe37e66bff2a2932480fb041743cdd93c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50e461dfe37e66bff2a2932480fb041743cdd93c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50e461dfe37e66bff2a2932480fb041743cdd93c/comments", "author": {"login": "Djilka", "id": 6038217, "node_id": "MDQ6VXNlcjYwMzgyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6038217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Djilka", "html_url": "https://github.com/Djilka", "followers_url": "https://api.github.com/users/Djilka/followers", "following_url": "https://api.github.com/users/Djilka/following{/other_user}", "gists_url": "https://api.github.com/users/Djilka/gists{/gist_id}", "starred_url": "https://api.github.com/users/Djilka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Djilka/subscriptions", "organizations_url": "https://api.github.com/users/Djilka/orgs", "repos_url": "https://api.github.com/users/Djilka/repos", "events_url": "https://api.github.com/users/Djilka/events{/privacy}", "received_events_url": "https://api.github.com/users/Djilka/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4d4015db89b3e93dac9f8e08ce9127390d475f11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4015db89b3e93dac9f8e08ce9127390d475f11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d4015db89b3e93dac9f8e08ce9127390d475f11"}], "stats": {"total": 858, "additions": 829, "deletions": 29}, "files": [{"sha": "654cacbc25ad0997c3364572a40f485f68bf70a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50e461dfe37e66bff2a2932480fb041743cdd93c", "patch": "@@ -1,3 +1,25 @@\n+2018-05-08  Olga Makhotina  <olga.makhotina@intel.com>\n+\n+\t* config.gcc: Support \"goldmont\".\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect \"goldmont\".\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle\n+\tPROCESSOR_GOLDMONT.\n+\t* config/i386/i386.c (m_GOLDMONT): Define.\n+\t(processor_target_table): Add \"goldmont\".\n+\t(PTA_GOLDMONT): Define.\n+\t(ix86_lea_outperforms): Add TARGET_GOLDMONT.\n+\t(get_builtin_code_for_version): Handle PROCESSOR_GOLDMONT.\n+\t(fold_builtin_cpu): Add M_INTEL_GOLDMONT.\n+\t(fold_builtin_cpu): Add \"goldmont\".\n+\t(ix86_add_stmt_cost): Add TARGET_GOLDMONT.\n+\t(ix86_option_override_internal): Add \"goldmont\".\n+\t* config/i386/i386.h (processor_costs): Define TARGET_GOLDMONT.\n+\t(processor_type): Add PROCESSOR_GOLDMONT.\n+\t* config/i386/i386.md: Add CPU \"glm\".\n+\t* config/i386/glm.md: New file.\n+\t* config/i386/x86-tune.def: Add m_GOLDMONT.\n+\t* doc/invoke.texi: Add goldmont as x86 -march=/-mtune= CPU type.\n+\n 2018-05-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/85572"}, {"sha": "7f5ba50d4b2e949c8e145804eeb091fea98f9b11", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=50e461dfe37e66bff2a2932480fb041743cdd93c", "patch": "@@ -637,7 +637,8 @@ x86_64_archs=\"amdfam10 athlon64 athlon64-sse3 barcelona bdver1 bdver2 \\\n bdver3 bdver4 znver1 btver1 btver2 k8 k8-sse3 opteron opteron-sse3 nocona \\\n core2 corei7 corei7-avx core-avx-i core-avx2 atom slm nehalem westmere \\\n sandybridge ivybridge haswell broadwell bonnell silvermont knl knm \\\n-skylake-avx512 cannonlake icelake-client icelake-server skylake x86-64 native\"\n+skylake-avx512 cannonlake icelake-client icelake-server skylake goldmont \\\n+x86-64 native\"\n \n # Additional x86 processors supported by --with-cpu=.  Each processor\n # MUST be separated by exactly one space."}, {"sha": "88cf6eaf7255893c3df369507fd6edd31625f456", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=50e461dfe37e66bff2a2932480fb041743cdd93c", "patch": "@@ -755,6 +755,11 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t  /* Silvermont.  */\n \t  cpu = \"silvermont\";\n \t  break;\n+\tcase 0x5c:\n+\tcase 0x5f:\n+\t  /* Goldmont.  */\n+\t  cpu = \"goldmont\";\n+\t  break;\n \tcase 0x0f:\n \t  /* Merom.  */\n \tcase 0x17:\n@@ -859,7 +864,10 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\tcpu = \"sandybridge\";\n \t      else if (has_sse4_2)\n \t\t{\n-\t\t  if (has_movbe)\n+\t\t  if (has_xsave)\n+\t\t    /* Assume Goldmont.  */\n+\t\t    cpu = \"goldmont\";\n+\t\t  else if (has_movbe)\n \t\t    /* Assume Silvermont.  */\n \t\t    cpu = \"silvermont\";\n \t\t  else"}, {"sha": "03d28ff34cd320b596f8146da77aee0dfa9602ac", "filename": "gcc/config/i386/glm.md", "status": "added", "additions": 711, "deletions": 0, "changes": 711, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Fconfig%2Fi386%2Fglm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Fconfig%2Fi386%2Fglm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fglm.md?ref=50e461dfe37e66bff2a2932480fb041743cdd93c", "patch": "@@ -0,0 +1,711 @@\n+;; Goldmont(GLM) Scheduling\n+;; Copyright (C) 2018 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+;;\n+;; Goldmont has 3 out-of-order IEC, 2 out-of--order FEC and out-of-order MEC.\n+\n+\n+(define_automaton \"glm\")\n+\n+;;  EU: Execution Unit\n+;;  Goldmont has 3 clusters - IEC, FPC, MEC\n+\n+;;  IEC has three execution ports - IEC-0, IEC-1 and IEC-2.\n+;;  FPC has two execution ports - FPC-0 and FPC-1.\n+;;  MEC has two execution ports - MEC-0 (load) and MEC-1 (store0.\n+(define_cpu_unit \"glm-iec-0,glm-iec-1,glm-iec-2\" \"glm\")\n+(define_cpu_unit \"glm-fec-0,glm-fec-1,glm-load,glm-store\" \"glm\")\n+\n+;; Some EUs have duplicated copied and can be accessed via either ports 0, 1 or 2.\n+(define_reservation \"glm-iec-any\" \"(glm-iec-0 | glm-iec-1 | glm-iec-2)\")\n+(define_reservation \"glm-iec-any-load\" \"(glm-iec-0|glm-iec-1|glm-iec-2)+glm-load\")\n+(define_reservation \"glm-iec-any-store\" \"(glm-iec-0|glm-iec-1|glm-iec-2)+glm-store\")\n+(define_reservation \"glm-iec-any-both\" \"(glm-iec-0 | glm-iec-1 | glm-iec-2) + glm-load + glm-store\")\n+(define_reservation \"glm-fec-all\" \"(glm-fec-0 + glm-fec-1)\")\n+(define_reservation \"glm-all\" \"(glm-iec-0+glm-iec-1+glm-iec-2)+(glm-fec-0+glm-fec-1)+(glm-load+glm-store)\")\n+(define_reservation \"glm-int-0\" \"glm-iec-0\")\n+(define_reservation \"glm-int-0-load\" \"glm-iec-0 + glm-load\")\n+(define_reservation \"glm-int-0-both\" \"glm-iec-0 + glm-load + glm-store\")\n+(define_reservation \"glm-int-1\" \"glm-iec-1\")\n+(define_reservation \"glm-int-1-mem\" \"glm-iec-1 + glm-load\")\n+(define_reservation \"glm-int-2\" \"glm-iec-2\")\n+(define_reservation \"glm-int-2-mem\" \"glm-iec-2 + glm-load\")\n+(define_reservation \"glm-fp-0\" \"glm-fec-0\")\n+(define_reservation \"glm-fec-any\" \"(glm-fec-0 | glm-fec-1)\")\n+\n+;;; fmul insn can have 4 or 5 cycles latency for scalar and vector types.\n+(define_reservation \"glm-fmul-4c\" \"glm-fec-0, nothing*3\")\n+(define_reservation \"glm-fmul-4c-mem\" \"glm-fec-0+glm-load, nothing*3\")\n+(define_reservation \"glm-fmul-5c\" \"glm-fec-0, nothing*4\")\n+\n+;;; fadd has 3 cycles latency.\n+(define_reservation \"glm-fadd-3c\" \"glm-fec-1, nothing*2\")\n+(define_reservation \"glm-fadd-3c-mem\" \"glm-fec-1+glm-load, nothing*2\")\n+\n+;;; imul insn has 3 cycles latency for SI operands\n+(define_reservation \"glm-imul-32\" \"glm-iec-1, nothing*2\")\n+(define_reservation \"glm-imul-mem-32\"\n+\t\t    \"(glm-iec-1+glm-load), nothing*2\")\n+;;; imul has 5 cycles latency for DI operands with 1/2 tput\n+(define_reservation \"glm-imul-64\"\n+\t\t    \"glm-iec-1, glm-iec-1, nothing*3\")\n+(define_reservation \"glm-imul-mem-64\"\n+\t\t    \"glm-iec-1+glm-load, glm-iec-1, nothing*3\")\n+\n+\n+(define_insn_reservation  \"glm_other\" 9\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"other\")\n+\t    (eq_attr \"atom_unit\" \"!jeu\")))\n+  \"glm-all*9\")\n+\n+;; return has type \"other\" with atom_unit \"jeu\"\n+(define_insn_reservation  \"glm_other_2\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"other\")\n+\t    (eq_attr \"atom_unit\" \"jeu\")))\n+  \"glm-all\")\n+\n+(define_insn_reservation  \"glm_multi\" 9\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (eq_attr \"type\" \"multi\"))\n+  \"glm-all*9\")\n+\n+;; Normal alu insns without carry\n+(define_insn_reservation  \"glm_alu\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"memory\" \"none\")\n+\t\t (eq_attr \"use_carry\" \"0\"))))\n+  \"glm-iec-any\")\n+\n+;; Normal alu insns without carry, but use MEC.\n+(define_insn_reservation  \"glm_alu_load\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"memory\" \"load\")\n+\t\t (eq_attr \"use_carry\" \"0\"))))\n+  \"glm-iec-any-load\")\n+\n+(define_insn_reservation  \"glm_alu_mem\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"memory\" \"both\")\n+\t\t (eq_attr \"use_carry\" \"0\"))))\n+  \"glm-iec-any-both\")\n+\n+\n+;; Alu insn consuming CF, such as add/sbb\n+(define_insn_reservation  \"glm_alu_carry\" 2\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"memory\" \"none\")\n+\t\t (eq_attr \"use_carry\" \"1\"))))\n+  \"glm-int-2, nothing\")\n+\n+;; Alu insn consuming CF, such as add/sbb\n+(define_insn_reservation  \"glm_alu_carry_mem\" 2\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"memory\" \"!none\")\n+\t\t(eq_attr \"use_carry\" \"1\"))))\n+  \"glm-int-2-mem, nothing\")\n+\n+(define_insn_reservation  \"glm_alu1\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"alu1\")\n+\t    (eq_attr \"memory\" \"none\") (eq_attr \"prefix_0f\" \"0\")))\n+  \"glm-int-1\")\n+\n+;; bsf and bsf insn\n+(define_insn_reservation  \"glm_alu1_1\" 10\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"alu1\")\n+\t    (eq_attr \"memory\" \"none\") (eq_attr \"prefix_0f\" \"1\")))\n+  \"glm-int-1*8,nothing*2\")\n+\n+(define_insn_reservation  \"glm_alu1_mem\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"alu1\")\n+\t    (eq_attr \"memory\" \"!none\")))\n+  \"glm-int-1-mem\")\n+\n+(define_insn_reservation  \"glm_negnot\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"negnot\")\n+\t    (eq_attr \"memory\" \"none\")))\n+  \"glm-iec-any\")\n+\n+(define_insn_reservation  \"glm_negnot_mem\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"negnot\")\n+\t    (eq_attr \"memory\" \"!none\")))\n+  \"glm-iec-any-both\")\n+\n+(define_insn_reservation  \"glm_imov\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"imov\")\n+\t    (eq_attr \"memory\" \"none\")))\n+  \"glm-iec-any\")\n+\n+(define_insn_reservation  \"glm_imov_load\" 2\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"imov\")\n+\t    (eq_attr \"memory\" \"load\")))\n+  \"glm-iec-any-load,nothing\")\n+\n+(define_insn_reservation  \"glm_imov_store\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"imov\")\n+\t    (eq_attr \"memory\" \"store\")))\n+  \"glm-iec-any-store\")\n+\n+;; 16<-16, 32<-32\n+(define_insn_reservation  \"glm_imovx\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"imovx\")\n+\t    (and (eq_attr \"memory\" \"none\")\n+\t\t (ior (and (match_operand:HI 0 \"register_operand\")\n+\t\t\t   (match_operand:HI 1 \"general_operand\"))\n+\t\t      (and (match_operand:SI 0 \"register_operand\")\n+\t\t\t   (match_operand:SI 1 \"general_operand\"))))))\n+  \"glm-iec-any\")\n+\n+;; 16<-16, 32<-32, mem\n+(define_insn_reservation  \"glm_imovx_mem\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"imovx\")\n+\t    (and (eq_attr \"memory\" \"!none\")\n+\t\t (ior (and (match_operand:HI 0 \"register_operand\")\n+\t\t\t   (match_operand:HI 1 \"general_operand\"))\n+\t\t      (and (match_operand:SI 0 \"register_operand\")\n+\t\t\t   (match_operand:SI 1 \"general_operand\"))))))\n+  \"glm-iec-any-load\")\n+\n+\n+;; 32<-16, 32<-8, 64<-16, 64<-8, 64<-32, 8<-8\n+(define_insn_reservation  \"glm_imovx_2\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"imovx\")\n+\t    (and (eq_attr \"memory\" \"none\")\n+\t\t (ior (match_operand:QI 0 \"register_operand\")\n+\t\t      (ior (and (match_operand:SI 0 \"register_operand\")\n+\t\t\t\t(not (match_operand:SI 1 \"general_operand\")))\n+\t\t\t   (match_operand:DI 0 \"register_operand\"))))))\n+  \"glm-iec-any\")\n+\n+;; 32<-16, 32<-8, 64<-16, 64<-8, 64<-32, 8<-8, mem\n+(define_insn_reservation  \"glm_imovx_2_load\" 2\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"imovx\")\n+\t    (and (eq_attr \"memory\" \"load\")\n+\t\t (ior (match_operand:QI 0 \"register_operand\")\n+\t\t      (ior (and (match_operand:SI 0 \"register_operand\")\n+\t\t\t\t(not (match_operand:SI 1 \"general_operand\")))\n+\t\t\t   (match_operand:DI 0 \"register_operand\"))))))\n+  \"glm-iec-any-load,nothing\")\n+\n+(define_insn_reservation  \"glm_imovx_2_mem\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"imovx\")\n+\t    (and (eq_attr \"memory\" \"!none\")\n+\t\t (ior (match_operand:QI 0 \"register_operand\")\n+\t\t      (ior (and (match_operand:SI 0 \"register_operand\")\n+\t\t\t\t(not (match_operand:SI 1 \"general_operand\")))\n+\t\t\t   (match_operand:DI 0 \"register_operand\"))))))\n+  \"glm-iec-any-both\")\n+\n+\n+;; 16<-8\n+(define_insn_reservation  \"glm_imovx_3\" 3\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"imovx\")\n+\t    (and (match_operand:HI 0 \"register_operand\")\n+\t\t (match_operand:QI 1 \"general_operand\"))))\n+  \"glm-int-0, nothing*2\")\n+\n+(define_insn_reservation  \"glm_lea\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"lea\")\n+\t    (eq_attr \"mode\" \"!HI\")))\n+  \"glm-iec-any\")\n+\n+;; lea 16bit address is complex insn\n+(define_insn_reservation  \"glm_lea_2\" 2\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"lea\")\n+\t    (eq_attr \"mode\" \"HI\")))\n+  \"glm-all*2\")\n+\n+(define_insn_reservation  \"glm_incdec\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"incdec\")\n+\t    (eq_attr \"memory\" \"none\")))\n+  \"glm-int-0\")\n+\n+(define_insn_reservation  \"glm_incdec_mem\" 3\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"incdec\")\n+\t    (eq_attr \"memory\" \"!none\")))\n+  \"glm-int-0-both, nothing*2\")\n+\n+;; simple shift instruction use SHIFT eu, none memory\n+(define_insn_reservation  \"glm_ishift\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"ishift\")\n+\t    (and (eq_attr \"memory\" \"none\") (eq_attr \"prefix_0f\" \"0\"))))\n+  \"glm-int-0\")\n+\n+;; simple shift instruction use SHIFT eu, memory\n+(define_insn_reservation  \"glm_ishift_mem\" 2\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"ishift\")\n+\t    (and (eq_attr \"memory\" \"!none\") (eq_attr \"prefix_0f\" \"0\"))))\n+  \"glm-int-0-both,nothing\")\n+\n+;; DF shift (prefixed with 0f) is complex insn with latency of 4 cycles\n+(define_insn_reservation  \"glm_ishift_3\" 4\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"ishift\")\n+\t    (eq_attr \"prefix_0f\" \"1\")))\n+  \"glm-all*4\")\n+\n+(define_insn_reservation  \"glm_ishift1\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"ishift1\")\n+\t    (eq_attr \"memory\" \"none\")))\n+  \"glm-int-0\")\n+\n+(define_insn_reservation  \"glm_ishift1_mem\" 2\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"ishift1\")\n+\t    (eq_attr \"memory\" \"!none\")))\n+  \"glm-int-0-both,nothing\")\n+\n+(define_insn_reservation  \"glm_rotate\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"rotate\")\n+\t    (eq_attr \"memory\" \"none\")))\n+  \"glm-int-0\")\n+\n+(define_insn_reservation  \"glm_rotate_mem\" 2\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"rotate\")\n+\t    (eq_attr \"memory\" \"!none\")))\n+  \"glm-int-0-both,nothing\")\n+\n+(define_insn_reservation  \"glm_imul\" 3\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"imul\")\n+\t    (and (eq_attr \"memory\" \"none\") (eq_attr \"mode\" \"SI\"))))\n+  \"glm-imul-32\")\n+\n+(define_insn_reservation  \"glm_imul_load\" 3\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"imul\")\n+\t    (and (eq_attr \"memory\" \"!none\") (eq_attr \"mode\" \"SI\"))))\n+  \"glm-imul-mem-32\")\n+\n+\n+;; latency set to 5 as common 64x64 imul with 1/2 tput\n+(define_insn_reservation  \"glm_imul64\" 5\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"imul\")\n+\t    (and (eq_attr \"memory\" \"none\") (eq_attr \"mode\" \"!SI\"))))\n+  \"glm-imul-64\")\n+\n+(define_insn_reservation  \"glm_imul64-load\" 5\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"imul\")\n+\t    (and (eq_attr \"memory\" \"!none\") (eq_attr \"mode\" \"!SI\"))))\n+  \"glm-imul-mem-64\")\n+\n+(define_insn_reservation  \"glm_idiv\" 25\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (eq_attr \"type\" \"idiv\"))\n+  \"glm-all*16, nothing*9\")\n+\n+(define_insn_reservation  \"glm_icmp\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"icmp\")\n+\t    (eq_attr \"memory\" \"none\")))\n+  \"glm-int-0\")\n+\n+(define_insn_reservation  \"glm_icmp_mem\" 2\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"icmp\")\n+\t    (eq_attr \"memory\" \"!none\")))\n+  \"glm-int-0-load,nothing\")\n+\n+(define_insn_reservation  \"glm_test\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"test\")\n+\t    (eq_attr \"memory\" \"none\")))\n+  \"glm-int-0\")\n+\n+(define_insn_reservation  \"glm_test_mem\" 2\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"test\")\n+\t    (eq_attr \"memory\" \"!none\")))\n+  \"glm-int-0-load,nothing\")\n+\n+(define_insn_reservation  \"glm_ibr\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"ibr\")\n+\t    (eq_attr \"memory\" \"!load\")))\n+  \"glm-int-1\")\n+\n+;; complex if jump target is from address\n+(define_insn_reservation  \"glm_ibr_2\" 2\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"ibr\")\n+\t    (eq_attr \"memory\" \"load\")))\n+  \"glm-all*2\")\n+\n+(define_insn_reservation  \"glm_setcc\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"setcc\")\n+\t    (eq_attr \"memory\" \"!store\")))\n+  \"glm-iec-any\")\n+\n+;; 2 cycles complex if target is in memory\n+(define_insn_reservation  \"glm_setcc_2\" 2\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"setcc\")\n+\t    (eq_attr \"memory\" \"store\")))\n+  \"glm-all*2\")\n+\n+(define_insn_reservation  \"glm_icmov\" 2\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"icmov\")\n+\t    (eq_attr \"memory\" \"none\")))\n+  \"glm-iec-any, nothing\")\n+\n+(define_insn_reservation  \"glm_icmov_mem\" 2\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"icmov\")\n+\t    (eq_attr \"memory\" \"!none\")))\n+  \"glm-int-0-load, nothing\")\n+\n+;; UCODE if segreg, ignored\n+(define_insn_reservation  \"glm_push\" 2\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (eq_attr \"type\" \"push\"))\n+  \"(glm-int-1+glm-int-2)*2\")\n+\n+;; pop r64 is 1 cycle. UCODE if segreg, ignored\n+(define_insn_reservation  \"glm_pop\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"pop\")\n+\t    (eq_attr \"mode\" \"DI\")))\n+  \"glm-int-1+glm-int-2\")\n+\n+;; pop non-r64 is 2 cycles. UCODE if segreg, ignored\n+(define_insn_reservation  \"glm_pop_2\" 2\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"pop\")\n+\t    (eq_attr \"mode\" \"!DI\")))\n+  \"(glm-int-1+glm-int-2)*2\")\n+\n+;; UCODE if segreg, ignored\n+(define_insn_reservation  \"glm_call\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (eq_attr \"type\" \"call,callv\"))\n+  \"(glm-int-0+glm-int-1)\")\n+\n+(define_insn_reservation  \"glm_leave\" 3\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (eq_attr \"type\" \"leave\"))\n+  \"glm-all*3\")\n+\n+(define_insn_reservation  \"glm_str\" 3\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (eq_attr \"type\" \"str\"))\n+  \"glm-all*3\")\n+\n+(define_insn_reservation  \"glm_sselog\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"sselog\")\n+\t    (eq_attr \"memory\" \"none\")))\n+  \"glm-fec-all\")\n+\n+(define_insn_reservation  \"glm_sselog_mem\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"sselog\")\n+\t    (eq_attr \"memory\" \"!none\")))\n+  \"glm-fec-all+glm-load\")\n+\n+(define_insn_reservation  \"glm_sselog1\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"sselog1\")\n+\t    (eq_attr \"memory\" \"none\")))\n+  \"glm-fp-0\")\n+\n+(define_insn_reservation  \"glm_sselog1_mem\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"sselog1\")\n+\t    (eq_attr \"memory\" \"!none\")))\n+  \"glm-fp-0+glm-load\")\n+\n+;; not pmad, not psad\n+(define_insn_reservation  \"glm_sseiadd\" 3\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"sseiadd\")\n+\t    (and (not (match_operand:V2DI 0 \"register_operand\"))\n+\t\t (and (eq_attr \"atom_unit\" \"!simul\")\n+\t\t      (eq_attr \"atom_unit\" \"!complex\")))))\n+  \"glm-fadd-3c\")\n+\n+;; pmad, psad and 64\n+(define_insn_reservation  \"glm_sseiadd_2\" 4\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"sseiadd\")\n+\t    (and (not (match_operand:V2DI 0 \"register_operand\"))\n+\t\t (and (eq_attr \"atom_unit\" \"simul\")\n+\t\t      (eq_attr \"mode\" \"DI,TI\")))))\n+  \"glm-fmul-4c\")\n+\n+;; if paddq(64 bit op), phadd/phsub\n+(define_insn_reservation  \"glm_sseiadd_3\" 5\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"sseiadd\")\n+\t    (ior (match_operand:V2DI 0 \"register_operand\")\n+\t\t (eq_attr \"atom_unit\" \"complex\"))))\n+  \"glm-fmul-5c\")\n+\n+;; if immediate op.\n+(define_insn_reservation  \"glm_sseishft\" 2\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"sseishft\")\n+\t    (match_operand 2 \"immediate_operand\")))\n+  \"glm-fp-0, nothing\")\n+\n+(define_insn_reservation  \"glm_sseimul\" 4\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"sseimul\")\n+\t    (eq_attr \"memory\" \"none\")))\n+  \"glm-fmul-4c\")\n+\n+(define_insn_reservation  \"glm_sseimul_load\" 4\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"sseimul\")\n+\t    (eq_attr \"memory\" \"!none\")))\n+  \"glm-fmul-4c-mem\")\n+\n+\n+;; rcpss or rsqrtss\n+(define_insn_reservation  \"glm_sse\" 4\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"sse\")\n+\t    (and (eq_attr \"atom_sse_attr\" \"rcp\") (eq_attr \"mode\" \"SF\"))))\n+  \"glm-fmul-4c\")\n+\n+;; movshdup, movsldup. Suggest to type sseishft\n+(define_insn_reservation  \"glm_sse_2\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"sse\")\n+\t    (eq_attr \"atom_sse_attr\" \"movdup\")))\n+  \"glm-fec-any\")\n+\n+;; lfence\n+(define_insn_reservation  \"glm_sse_3\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"sse\")\n+\t    (eq_attr \"atom_sse_attr\" \"lfence\")))\n+  \"glm-fec-any\")\n+\n+;; sfence,clflush,mfence, prefetch\n+(define_insn_reservation  \"glm_sse_4\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"sse\")\n+\t    (ior (eq_attr \"atom_sse_attr\" \"fence\")\n+\t\t (eq_attr \"atom_sse_attr\" \"prefetch\"))))\n+  \"glm-fp-0\")\n+\n+;; rcpps, rsqrtss, sqrt, ldmxcsr\n+(define_insn_reservation  \"glm_sse_5\" 9\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"sse\")\n+\t    (ior (ior (eq_attr \"atom_sse_attr\" \"sqrt\")\n+\t\t      (eq_attr \"atom_sse_attr\" \"mxcsr\"))\n+\t\t (and (eq_attr \"atom_sse_attr\" \"rcp\")\n+\t\t      (eq_attr \"mode\" \"V4SF\")))))\n+  \"glm-fec-all*6, nothing*3\")\n+\n+;; xmm->xmm\n+(define_insn_reservation  \"glm_ssemov\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"ssemov\")\n+\t    (and (match_operand 0 \"register_operand\" \"xy\")\n+\t\t (match_operand 1 \"register_operand\" \"xy\"))))\n+  \"glm-fec-any\")\n+\n+;; reg->xmm\n+(define_insn_reservation  \"glm_ssemov_2\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"ssemov\")\n+\t    (and (match_operand 0 \"register_operand\" \"xy\")\n+\t\t (match_operand 1 \"register_operand\" \"r\"))))\n+  \"glm-fp-0\")\n+\n+;; xmm->reg\n+(define_insn_reservation  \"glm_ssemov_3\" 3\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"ssemov\")\n+\t    (and (match_operand 0 \"register_operand\" \"r\")\n+\t\t (match_operand 1 \"register_operand\" \"xy\"))))\n+  \"glm-fp-0, nothing*2\")\n+\n+;; mov mem\n+(define_insn_reservation  \"glm_ssemov_load\" 2\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"ssemov\")\n+\t    (eq_attr \"memory\" \"load\")))\n+  \"glm-fec-any+glm-load,nothing\")\n+\n+(define_insn_reservation  \"glm_ssemov_store\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"ssemov\")\n+\t    (eq_attr \"memory\" \"store\")))\n+  \"glm-fec-any+glm-store\")\n+\n+;; no memory simple\n+(define_insn_reservation  \"glm_sseadd\" 3\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"sseadd\")\n+\t    (eq_attr \"memory\" \"none\")))\n+  \"glm-fadd-3c\")\n+\n+;; memory simple\n+(define_insn_reservation  \"glm_sseadd_mem\" 3\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"sseadd\")\n+\t    (eq_attr \"memory\" \"!none\")))\n+  \"glm-fadd-3c-mem\")\n+\n+;; Except dppd/dpps\n+(define_insn_reservation  \"glm_ssemul\" 4\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"ssemul\")\n+\t    (eq_attr \"memory\" \"none\")))\n+  \"glm-fmul-4c\")\n+\n+(define_insn_reservation  \"glm_ssemul_mem\" 4\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"ssemul\")\n+\t    (eq_attr \"memory\" \"!none\")))\n+  \"glm-fmul-4c-mem\")\n+\n+(define_insn_reservation  \"glm_ssecmp\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (eq_attr \"type\" \"ssecmp\"))\n+  \"glm-fec-any\")\n+\n+(define_insn_reservation  \"glm_ssecomi\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (eq_attr \"type\" \"ssecomi\"))\n+  \"glm-fp-0\")\n+\n+;; no memory and cvtpi2ps, cvtps2pi, cvttps2pi\n+(define_insn_reservation  \"glm_ssecvt\" 4\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"ssecvt\")\n+\t    (ior (and (match_operand:V2SI 0 \"register_operand\")\n+\t\t      (match_operand:V4SF 1 \"register_operand\"))\n+\t\t (and (match_operand:V4SF 0 \"register_operand\")\n+\t\t      (match_operand:V2SI 1 \"register_operand\")))))\n+  \"glm-fp-0, nothing*3\")\n+\n+;; memory and cvtpi2ps, cvtps2pi, cvttps2pi\n+(define_insn_reservation  \"glm_ssecvt_mem\" 4\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"ssecvt\")\n+\t    (ior (and (match_operand:V2SI 0 \"register_operand\")\n+\t\t      (match_operand:V4SF 1 \"memory_operand\"))\n+\t\t (and (match_operand:V4SF 0 \"register_operand\")\n+\t\t      (match_operand:V2SI 1 \"memory_operand\")))))\n+  \"glm-fp-0+glm-load, nothing*3\")\n+\n+;; memory and cvtsi2sd\n+(define_insn_reservation  \"glm_sseicvt\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"sseicvt\")\n+\t    (and (match_operand:V2DF 0 \"register_operand\")\n+\t\t (match_operand:SI 1 \"nonimmediate_operand\"))))\n+  \"glm-fp-0\")\n+\n+;; otherwise. 8 cycles average for cvtsd2si\n+(define_insn_reservation  \"glm_sseicvt_2\" 4\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"sseicvt\")\n+\t    (not (and (match_operand:V2DF 0 \"register_operand\")\n+\t\t      (match_operand:SI 1 \"memory_operand\")))))\n+  \"glm-fp-0, nothing*3\")\n+\n+(define_insn_reservation  \"glm_ssediv\" 13\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (eq_attr \"type\" \"ssediv\"))\n+  \"glm-fec-all*12, nothing\")\n+\n+;; simple for fmov\n+(define_insn_reservation  \"glm_fmov\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"fmov\")\n+\t    (eq_attr \"memory\" \"none\")))\n+  \"glm-fec-any\")\n+\n+;; simple for fmov\n+(define_insn_reservation  \"glm_fmov_load\" 3\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"fmov\")\n+\t    (eq_attr \"memory\" \"load\")))\n+  \"glm-fec-any+glm-load, nothing*2\")\n+\n+(define_insn_reservation  \"glm_fmov_store\" 1\n+  (and (eq_attr \"cpu\" \"glm\")\n+       (and (eq_attr \"type\" \"fmov\")\n+\t    (eq_attr \"memory\" \"store\")))\n+  \"glm-fec-any+glm-store\")\n+\n+;; Define bypass here\n+\n+;; There will be 0 cycle stall from cmp/test to jcc\n+\n+;; There will be 1 cycle stall from flag producer to cmov and adc/sbb\n+(define_bypass 2 \"glm_icmp, glm_test, glm_alu, glm_alu_carry,\n+\t\t  glm_alu1, glm_negnot, glm_incdec, glm_ishift,\n+\t\t  glm_ishift1, glm_rotate\"\n+\t\t \"glm_icmov, glm_alu_carry\")\n+\n+;; lea to shift source stall is 1 cycle\n+(define_bypass 2 \"glm_lea\"\n+\t\t \"glm_ishift, glm_ishift1, glm_rotate\"\n+\t\t \"!ix86_dep_by_shift_count\")\n+\n+;; non-lea to shift count stall is 1 cycle\n+(define_bypass 2 \"glm_alu_carry,\n+\t\t  glm_alu,glm_alu1,glm_negnot,glm_imov,glm_imovx,\n+\t\t  glm_incdec,glm_ishift,glm_ishift1,glm_rotate,\n+\t\t  glm_setcc, glm_icmov, glm_pop, glm_imov_store,\n+\t\t  glm_alu_mem, glm_alu_carry_mem, glm_alu1_mem,\n+\t\t  glm_alu_load, glm_imovx_mem, glm_imovx_2_mem,\n+\t\t  glm_imov_load, glm_icmov_mem, glm_fmov_load, glm_fmov_store\"\n+\t\t \"glm_ishift, glm_ishift1, glm_rotate,\n+\t\t  glm_ishift_mem, glm_ishift1_mem,\n+\t\t  glm_rotate_mem\"\n+\t\t \"ix86_dep_by_shift_count\")"}, {"sha": "3df599cdc8b98720307a60eed1b23e5dab7b547b", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=50e461dfe37e66bff2a2932480fb041743cdd93c", "patch": "@@ -174,6 +174,10 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n       def_or_undef (parse_in, \"__silvermont\");\n       def_or_undef (parse_in, \"__silvermont__\");\n       break;\n+    case PROCESSOR_GOLDMONT:\n+      def_or_undef (parse_in, \"__goldmont\");\n+      def_or_undef (parse_in, \"__goldmont__\");\n+      break;\n     case PROCESSOR_KNL:\n       def_or_undef (parse_in, \"__knl\");\n       def_or_undef (parse_in, \"__knl__\");\n@@ -311,6 +315,9 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n       def_or_undef (parse_in, \"__tune_slm__\");\n       def_or_undef (parse_in, \"__tune_silvermont__\");\n       break;\n+    case PROCESSOR_GOLDMONT:\n+      def_or_undef (parse_in, \"__tune_goldmont__\");\n+      break;\n     case PROCESSOR_KNL:\n       def_or_undef (parse_in, \"__tune_knl__\");\n       break;"}, {"sha": "70e87fb8f67ae6234f6a85dd1121fa9f8a11779d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=50e461dfe37e66bff2a2932480fb041743cdd93c", "patch": "@@ -149,6 +149,7 @@ const struct processor_costs *ix86_cost = NULL;\n #define m_CANNONLAKE (HOST_WIDE_INT_1U<<PROCESSOR_CANNONLAKE)\n #define m_ICELAKE_CLIENT (HOST_WIDE_INT_1U<<PROCESSOR_ICELAKE_CLIENT)\n #define m_ICELAKE_SERVER (HOST_WIDE_INT_1U<<PROCESSOR_ICELAKE_SERVER)\n+#define m_GOLDMONT (HOST_WIDE_INT_1U<<PROCESSOR_GOLDMONT)\n #define m_INTEL (HOST_WIDE_INT_1U<<PROCESSOR_INTEL)\n \n #define m_GEODE (HOST_WIDE_INT_1U<<PROCESSOR_GEODE)\n@@ -858,6 +859,7 @@ static const struct ptt processor_target_table[PROCESSOR_max] =\n   {\"haswell\", &core_cost, 16, 10, 16, 10, 16},\n   {\"bonnell\", &atom_cost, 16, 15, 16, 7, 16},\n   {\"silvermont\", &slm_cost, 16, 15, 16, 7, 16},\n+  {\"goldmont\", &slm_cost, 16, 15, 16, 7, 16},\n   {\"knl\", &slm_cost, 16, 15, 16, 7, 16},\n   {\"knm\", &slm_cost, 16, 15, 16, 7, 16},\n   {\"skylake\", &skylake_cost, 16, 10, 16, 10, 16},\n@@ -3484,6 +3486,9 @@ ix86_option_override_internal (bool main_args_p,\n     | PTA_AVX512F | PTA_AVX512CD;\n   const wide_int_bitmask PTA_BONNELL = PTA_CORE2 | PTA_MOVBE;\n   const wide_int_bitmask PTA_SILVERMONT = PTA_WESTMERE | PTA_MOVBE | PTA_RDRND;\n+  const wide_int_bitmask PTA_GOLDMONT = PTA_SILVERMONT | PTA_SHA | PTA_XSAVE\n+    | PTA_RDSEED | PTA_XSAVEC | PTA_XSAVES | PTA_CLFLUSHOPT | PTA_XSAVEOPT\n+    | PTA_FSGSBASE;\n   const wide_int_bitmask PTA_KNM = PTA_KNL | PTA_AVX5124VNNIW\n     | PTA_AVX5124FMAPS | PTA_AVX512VPOPCNTDQ;\n \n@@ -3559,6 +3564,7 @@ ix86_option_override_internal (bool main_args_p,\n       {\"atom\", PROCESSOR_BONNELL, CPU_ATOM, PTA_BONNELL},\n       {\"silvermont\", PROCESSOR_SILVERMONT, CPU_SLM, PTA_SILVERMONT},\n       {\"slm\", PROCESSOR_SILVERMONT, CPU_SLM, PTA_SILVERMONT},\n+      {\"goldmont\", PROCESSOR_GOLDMONT, CPU_GLM, PTA_GOLDMONT},\n       {\"knl\", PROCESSOR_KNL, CPU_SLM, PTA_KNL},\n       {\"knm\", PROCESSOR_KNM, CPU_SLM, PTA_KNM},\n       {\"intel\", PROCESSOR_INTEL, CPU_SLM, PTA_NEHALEM},\n@@ -21233,7 +21239,7 @@ ix86_lea_outperforms (rtx_insn *insn, unsigned int regno0, unsigned int regno1,\n   /* For Silvermont if using a 2-source or 3-source LEA for\n      non-destructive destination purposes, or due to wanting\n      ability to use SCALE, the use of LEA is justified.  */\n-  if (TARGET_SILVERMONT || TARGET_INTEL)\n+  if (TARGET_SILVERMONT || TARGET_GOLDMONT || TARGET_INTEL)\n     {\n       if (has_scale)\n \treturn true;\n@@ -32392,6 +32398,10 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n \t      arg_str = \"silvermont\";\n \t      priority = P_PROC_SSE4_2;\n \t      break;\n+\t   case PROCESSOR_GOLDMONT:\n+\t      arg_str = \"goldmont\";\n+\t      priority = P_PROC_SSE4_2;\n+\t      break;\n \t    case PROCESSOR_AMDFAM10:\n \t      arg_str = \"amdfam10h\";\n \t      priority = P_PROC_SSE4_A;\n@@ -33096,7 +33106,8 @@ fold_builtin_cpu (tree fndecl, tree *args)\n     M_INTEL_COREI7_SKYLAKE_AVX512,\n     M_INTEL_COREI7_CANNONLAKE,\n     M_INTEL_COREI7_ICELAKE_CLIENT,\n-    M_INTEL_COREI7_ICELAKE_SERVER\n+    M_INTEL_COREI7_ICELAKE_SERVER,\n+    M_INTEL_GOLDMONT\n   };\n \n   static struct _arch_names_table\n@@ -33125,6 +33136,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n       {\"icelake-server\", M_INTEL_COREI7_ICELAKE_SERVER},\n       {\"bonnell\", M_INTEL_BONNELL},\n       {\"silvermont\", M_INTEL_SILVERMONT},\n+      {\"goldmont\", M_INTEL_GOLDMONT},\n       {\"knl\", M_INTEL_KNL},\n       {\"knm\", M_INTEL_KNM},\n       {\"amdfam10h\", M_AMDFAM10H},\n@@ -50647,7 +50659,7 @@ ix86_add_stmt_cost (void *data, int count, enum vect_cost_for_stmt kind,\n   /* We need to multiply all vector stmt cost by 1.7 (estimated cost)\n      for Silvermont as it has out of order integer pipeline and can execute\n      2 scalar instruction per tick, but has in order SIMD pipeline.  */\n-  if ((TARGET_SILVERMONT || TARGET_INTEL)\n+  if ((TARGET_SILVERMONT || TARGET_GOLDMONT || TARGET_INTEL)\n       && stmt_info && stmt_info->stmt)\n     {\n       tree lhs_op = gimple_get_lhs (stmt_info->stmt);"}, {"sha": "787bf9fd39a3a8918ca8959a717fac58fc5f955c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=50e461dfe37e66bff2a2932480fb041743cdd93c", "patch": "@@ -385,6 +385,7 @@ extern const struct processor_costs ix86_size_cost;\n #define TARGET_HASWELL (ix86_tune == PROCESSOR_HASWELL)\n #define TARGET_BONNELL (ix86_tune == PROCESSOR_BONNELL)\n #define TARGET_SILVERMONT (ix86_tune == PROCESSOR_SILVERMONT)\n+#define TARGET_GOLDMONT (ix86_tune == PROCESSOR_GOLDMONT)\n #define TARGET_KNL (ix86_tune == PROCESSOR_KNL)\n #define TARGET_KNM (ix86_tune == PROCESSOR_KNM)\n #define TARGET_SKYLAKE (ix86_tune == PROCESSOR_SKYLAKE)\n@@ -2279,6 +2280,7 @@ enum processor_type\n   PROCESSOR_HASWELL,\n   PROCESSOR_BONNELL,\n   PROCESSOR_SILVERMONT,\n+  PROCESSOR_GOLDMONT,\n   PROCESSOR_KNL,\n   PROCESSOR_KNM,\n   PROCESSOR_SKYLAKE,"}, {"sha": "ad28961a8263611cef9e661588bbe1df2cffdceb", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=50e461dfe37e66bff2a2932480fb041743cdd93c", "patch": "@@ -433,7 +433,7 @@\n \f\n ;; Processor type.\n (define_attr \"cpu\" \"none,pentium,pentiumpro,geode,k6,athlon,k8,core2,nehalem,\n-\t\t    atom,slm,haswell,generic,amdfam10,bdver1,bdver2,bdver3,\n+\t\t    atom,slm,glm,haswell,generic,amdfam10,bdver1,bdver2,bdver3,\n \t\t    bdver4,btver2,znver1\"\n   (const (symbol_ref \"ix86_schedule\")))\n \n@@ -1230,6 +1230,7 @@\n (include \"geode.md\")\n (include \"atom.md\")\n (include \"slm.md\")\n+(include \"glm.md\")\n (include \"core2.md\")\n (include \"haswell.md\")\n "}, {"sha": "ae9f42cdda0bcbe9ebb69c62960c58ed87087bee", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=50e461dfe37e66bff2a2932480fb041743cdd93c", "patch": "@@ -41,15 +41,16 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* X86_TUNE_SCHEDULE: Enable scheduling.  */\n DEF_TUNE (X86_TUNE_SCHEDULE, \"schedule\",\n           m_PENT | m_LAKEMONT | m_PPRO | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n-\t  | m_INTEL | m_KNL | m_KNM | m_K6_GEODE | m_AMD_MULTIPLE | m_GENERIC)\n+\t  | m_INTEL | m_KNL | m_KNM | m_K6_GEODE | m_AMD_MULTIPLE | m_GOLDMONT\n+\t  | m_GENERIC)\n \n /* X86_TUNE_PARTIAL_REG_DEPENDENCY: Enable more register renaming\n    on modern chips.  Preffer stores affecting whole integer register\n    over partial stores.  For example preffer MOVZBL or MOVQ to load 8bit\n    value over movb.  */\n DEF_TUNE (X86_TUNE_PARTIAL_REG_DEPENDENCY, \"partial_reg_dependency\",\n           m_P4_NOCONA | m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE\n-\t  | m_BONNELL | m_SILVERMONT | m_INTEL\n+\t  | m_BONNELL | m_SILVERMONT | m_GOLDMONT | m_INTEL\n \t  | m_KNL | m_KNM | m_AMD_MULTIPLE | m_SKYLAKE_AVX512 | m_GENERIC)\n \n /* X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY: This knob promotes all store\n@@ -84,14 +85,14 @@ DEF_TUNE (X86_TUNE_PARTIAL_FLAG_REG_STALL, \"partial_flag_reg_stall\",\n    partial dependencies.  */\n DEF_TUNE (X86_TUNE_MOVX, \"movx\",\n           m_PPRO | m_P4_NOCONA | m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE\n-\t  | m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL\n+\t  | m_BONNELL | m_SILVERMONT | m_GOLDMONT | m_KNL | m_KNM | m_INTEL\n \t  | m_GEODE | m_AMD_MULTIPLE | m_SKYLAKE_AVX512 | m_GENERIC)\n \n /* X86_TUNE_MEMORY_MISMATCH_STALL: Avoid partial stores that are followed by\n    full sized loads.  */\n DEF_TUNE (X86_TUNE_MEMORY_MISMATCH_STALL, \"memory_mismatch_stall\",\n           m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_INTEL\n-\t  | m_KNL | m_KNM | m_AMD_MULTIPLE | m_GENERIC)\n+\t  | m_KNL | m_KNM | m_GOLDMONT | m_AMD_MULTIPLE | m_GENERIC)\n \n /* X86_TUNE_FUSE_CMP_AND_BRANCH_32: Fuse compare with a subsequent\n    conditional jump instruction for 32 bit TARGET.  */\n@@ -130,7 +131,7 @@ DEF_TUNE (X86_TUNE_FUSE_ALU_AND_BRANCH, \"fuse_alu_and_branch\",\n \n DEF_TUNE (X86_TUNE_ACCUMULATE_OUTGOING_ARGS, \"accumulate_outgoing_args\",\n \t  m_PPRO | m_P4_NOCONA | m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL\n-\t  | m_ATHLON_K8)\n+\t  | m_GOLDMONT | m_ATHLON_K8)\n \n /* X86_TUNE_PROLOGUE_USING_MOVE: Do not use push/pop in prologues that are\n    considered on critical path.  */\n@@ -192,7 +193,7 @@ DEF_TUNE (X86_TUNE_PAD_RETURNS, \"pad_returns\",\n    than 4 branch instructions in the 16 byte window.  */\n DEF_TUNE (X86_TUNE_FOUR_JUMP_LIMIT, \"four_jump_limit\",\n           m_PPRO | m_P4_NOCONA | m_BONNELL | m_SILVERMONT | m_KNL | m_KNM\n-\t |m_INTEL | m_ATHLON_K8 | m_AMDFAM10)\n+\t  | m_GOLDMONT | m_INTEL | m_ATHLON_K8 | m_AMDFAM10)\n \n /*****************************************************************************/\n /* Integer instruction selection tuning                                      */\n@@ -220,22 +221,24 @@ DEF_TUNE (X86_TUNE_READ_MODIFY, \"read_modify\", ~(m_PENT | m_LAKEMONT | m_PPRO))\n    done by GCC generated code.  */\n DEF_TUNE (X86_TUNE_USE_INCDEC, \"use_incdec\",\n           ~(m_P4_NOCONA | m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE\n-\t    | m_BONNELL | m_SILVERMONT | m_INTEL |  m_KNL | m_KNM | m_GENERIC))\n+\t    | m_BONNELL | m_SILVERMONT | m_INTEL |  m_KNL | m_KNM | m_GOLDMONT\n+\t    | m_GENERIC))\n \n /* X86_TUNE_INTEGER_DFMODE_MOVES: Enable if integer moves are preferred\n    for DFmode copies */\n DEF_TUNE (X86_TUNE_INTEGER_DFMODE_MOVES, \"integer_dfmode_moves\",\n           ~(m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n-\t    | m_KNL | m_KNM | m_INTEL | m_GEODE | m_AMD_MULTIPLE | m_GENERIC))\n+\t    | m_KNL | m_KNM | m_INTEL | m_GEODE | m_AMD_MULTIPLE | m_GOLDMONT\n+\t    | m_GENERIC))\n \n /* X86_TUNE_OPT_AGU: Optimize for Address Generation Unit. This flag\n    will impact LEA instruction selection. */\n DEF_TUNE (X86_TUNE_OPT_AGU, \"opt_agu\", m_BONNELL | m_SILVERMONT | m_KNL\n-\t | m_KNM | m_INTEL)\n+\t | m_KNM | m_GOLDMONT | m_INTEL)\n \n /* X86_TUNE_AVOID_LEA_FOR_ADDR: Avoid lea for address computation.  */\n DEF_TUNE (X86_TUNE_AVOID_LEA_FOR_ADDR, \"avoid_lea_for_addr\",\n-\t  m_BONNELL | m_SILVERMONT | m_KNL | m_KNM)\n+\t  m_BONNELL | m_SILVERMONT | m_GOLDMONT | m_KNL | m_KNM)\n \n /* X86_TUNE_SLOW_IMUL_IMM32_MEM: Imul of 32-bit constant and memory is\n    vector path on AMD machines.\n@@ -252,7 +255,7 @@ DEF_TUNE (X86_TUNE_SLOW_IMUL_IMM8, \"slow_imul_imm8\",\n /* X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE: Try to avoid memory operands for\n    a conditional move.  */\n DEF_TUNE (X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE, \"avoid_mem_opnd_for_cmove\",\n-\t  m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL)\n+\t  m_BONNELL | m_SILVERMONT | m_GOLDMONT | m_KNL | m_KNM | m_INTEL)\n \n /* X86_TUNE_SINGLE_STRINGOP: Enable use of single string operations, such\n    as MOVS and STOS (without a REP prefix) to move/set sequences of bytes.  */\n@@ -271,17 +274,17 @@ DEF_TUNE (X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES,\n DEF_TUNE (X86_TUNE_USE_SAHF, \"use_sahf\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n \t  | m_KNL | m_KNM | m_INTEL | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_BDVER\n-\t  | m_BTVER | m_ZNVER1 | m_GENERIC)\n+\t  | m_BTVER | m_ZNVER1 | m_GOLDMONT | m_GENERIC)\n \n /* X86_TUNE_USE_CLTD: Controls use of CLTD and CTQO instructions.  */\n DEF_TUNE (X86_TUNE_USE_CLTD, \"use_cltd\",\n \t  ~(m_PENT | m_LAKEMONT | m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL\n-\t    | m_K6))\n+\t    | m_K6 | m_GOLDMONT))\n \n /* X86_TUNE_USE_BT: Enable use of BT (bit test) instructions.  */\n DEF_TUNE (X86_TUNE_USE_BT, \"use_bt\",\n           m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL\n-\t  | m_LAKEMONT | m_AMD_MULTIPLE | m_GENERIC)\n+\t  | m_LAKEMONT | m_AMD_MULTIPLE | m_GOLDMONT | m_GENERIC)\n \n /* X86_TUNE_AVOID_FALSE_DEP_FOR_BMI: Avoid false dependency\n    for bit-manipulation instructions.  */\n@@ -297,7 +300,8 @@ DEF_TUNE (X86_TUNE_ADJUST_UNROLL, \"adjust_unroll_factor\", m_BDVER3 | m_BDVER4)\n /* X86_TUNE_ONE_IF_CONV_INSNS: Restrict a number of cmov insns in\n    if-converted sequence to one.  */\n DEF_TUNE (X86_TUNE_ONE_IF_CONV_INSN, \"one_if_conv_insn\",\n-\t  m_SILVERMONT | m_KNL | m_KNM | m_INTEL | m_CORE_ALL | m_GENERIC)\n+\t  m_SILVERMONT | m_KNL | m_KNM | m_INTEL | m_CORE_ALL | m_GOLDMONT\n+\t  | m_GENERIC)\n \n /*****************************************************************************/\n /* 387 instruction selection tuning                                          */\n@@ -313,15 +317,17 @@ DEF_TUNE (X86_TUNE_USE_HIMODE_FIOP, \"use_himode_fiop\",\n    integer operand.  */\n DEF_TUNE (X86_TUNE_USE_SIMODE_FIOP, \"use_simode_fiop\",\n           ~(m_PENT | m_LAKEMONT | m_PPRO | m_CORE_ALL | m_BONNELL\n-\t    | m_SILVERMONT | m_KNL | m_KNM | m_INTEL | m_AMD_MULTIPLE | m_GENERIC))\n+\t    | m_SILVERMONT | m_KNL | m_KNM | m_INTEL | m_AMD_MULTIPLE\n+\t    | m_GOLDMONT | m_GENERIC))\n \n /* X86_TUNE_USE_FFREEP: Use freep instruction instead of fstp.  */\n DEF_TUNE (X86_TUNE_USE_FFREEP, \"use_ffreep\", m_AMD_MULTIPLE)\n \n /* X86_TUNE_EXT_80387_CONSTANTS: Use fancy 80387 constants, such as PI.  */\n DEF_TUNE (X86_TUNE_EXT_80387_CONSTANTS, \"ext_80387_constants\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n-\t  | m_KNL | m_KNM | m_INTEL | m_K6_GEODE | m_ATHLON_K8 | m_GENERIC)\n+\t  | m_KNL | m_KNM | m_INTEL | m_K6_GEODE | m_ATHLON_K8 | m_GOLDMONT\n+\t  | m_GENERIC)\n \n /*****************************************************************************/\n /* SSE instruction selection tuning                                          */\n@@ -336,14 +342,15 @@ DEF_TUNE (X86_TUNE_GENERAL_REGS_SSE_SPILL, \"general_regs_sse_spill\",\n    of a sequence loading registers by parts.  */\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL, \"sse_unaligned_load_optimal\",\n \t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_SILVERMONT | m_KNL | m_KNM\n-\t  | m_INTEL | m_SKYLAKE_AVX512 | m_AMDFAM10 | m_BDVER | m_BTVER\n-\t  | m_ZNVER1 | m_GENERIC)\n+\t  | m_INTEL | m_SKYLAKE_AVX512 | m_GOLDMONT | m_AMDFAM10 | m_BDVER\n+\t  | m_BTVER | m_ZNVER1 | m_GENERIC)\n \n /* X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL: Use movups for misaligned stores instead\n    of a sequence loading registers by parts.  */\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL, \"sse_unaligned_store_optimal\",\n \t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_SILVERMONT | m_KNL | m_KNM\n-\t  | m_INTEL | m_SKYLAKE_AVX512 | m_BDVER | m_ZNVER1 | m_GENERIC)\n+\t  | m_INTEL | m_SKYLAKE_AVX512 | m_GOLDMONT | m_BDVER | m_ZNVER1\n+\t  | m_GENERIC)\n \n /* Use packed single precision instructions where posisble.  I.e. movups instead\n    of movupd.  */\n@@ -380,7 +387,7 @@ DEF_TUNE (X86_TUNE_INTER_UNIT_CONVERSIONS, \"inter_unit_conversions\",\n /* X86_TUNE_SPLIT_MEM_OPND_FOR_FP_CONVERTS: Try to split memory operand for\n    fp converts to destination register.  */\n DEF_TUNE (X86_TUNE_SPLIT_MEM_OPND_FOR_FP_CONVERTS, \"split_mem_opnd_for_fp_converts\",\n-          m_SILVERMONT | m_KNL | m_KNM | m_INTEL)\n+\t  m_SILVERMONT | m_KNL | m_KNM | m_GOLDMONT | m_INTEL)\n \n /* X86_TUNE_USE_VECTOR_FP_CONVERTS: Prefer vector packed SSE conversion\n    from FP to FP.  This form of instructions avoids partial write to the\n@@ -394,11 +401,11 @@ DEF_TUNE (X86_TUNE_USE_VECTOR_CONVERTS, \"use_vector_converts\", m_AMDFAM10)\n \n /* X86_TUNE_SLOW_SHUFB: Indicates tunings with slow pshufb instruction.  */\n DEF_TUNE (X86_TUNE_SLOW_PSHUFB, \"slow_pshufb\",\n-          m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL)\n+\t  m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_GOLDMONT | m_INTEL)\n \n /* X86_TUNE_AVOID_4BYTE_PREFIXES: Avoid instructions requiring 4+ bytes of prefixes.  */\n DEF_TUNE (X86_TUNE_AVOID_4BYTE_PREFIXES, \"avoid_4byte_prefixes\",\n-          m_SILVERMONT | m_INTEL)\n+\t  m_SILVERMONT | m_GOLDMONT | m_INTEL)\n \n /* X86_TUNE_USE_GATHER: Use gather instructions.  */\n DEF_TUNE (X86_TUNE_USE_GATHER, \"use_gather\","}, {"sha": "6019e1f7ec835f333eae90565adb51746e1d86cb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=50e461dfe37e66bff2a2932480fb041743cdd93c", "patch": "@@ -26498,6 +26498,11 @@ instruction set support.\n Intel Silvermont CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3,\n SSE4.1, SSE4.2, POPCNT, AES, PCLMUL and RDRND instruction set support.\n \n+@item goldmont\n+Intel Goldmont CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3,\n+SSE4.1, SSE4.2, POPCNT, AES, PCLMUL, RDRND, XSAVE, XSAVEOPT and FSGSBASE\n+instruction set support.\n+\n @item knl\n Intel Knight's Landing CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3,\n SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA,"}, {"sha": "d601ed182ae095ae4ce0b1869c2087cdf1cce4c8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=50e461dfe37e66bff2a2932480fb041743cdd93c", "patch": "@@ -1,3 +1,9 @@\n+2018-05-08  Olga Makhotina  <olga.makhotina@intel.com>\n+\n+\t* gcc.target/i386/builtin_target.c: Test goldmont.\n+\t* gcc.target/i386/funcspec-56.inc: Tests for arch=goldmont and\n+\tarch=silvermont.\n+\n 2018-05-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/85572"}, {"sha": "024212cafaafd9d31c61b0abbf6b2c4a02723269", "filename": "gcc/testsuite/gcc.target/i386/builtin_target.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c?ref=50e461dfe37e66bff2a2932480fb041743cdd93c", "patch": "@@ -38,6 +38,11 @@ check_intel_cpu_model (unsigned int family, unsigned int model,\n \t      /* Silvermont.  */\n \t      assert (__builtin_cpu_is (\"silvermont\"));\n \t      break;\n+\t    case 0x5c:\n+\t    case 0x5f:\n+\t      /* Goldmont.  */\n+\t      assert (__builtin_cpu_is (\"goldmont\"));\n+\t      break;\n \t    case 0x57:\n \t      /* Knights Landing.  */\n \t      assert (__builtin_cpu_is (\"knl\"));"}, {"sha": "72519babe15c1d4876ea7261b0241e00fa9d23a7", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e461dfe37e66bff2a2932480fb041743cdd93c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=50e461dfe37e66bff2a2932480fb041743cdd93c", "patch": "@@ -141,6 +141,8 @@ extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));\n extern void test_arch_corei7 (void)\t\t__attribute__((__target__(\"arch=corei7\")));\n extern void test_arch_corei7_avx (void)\t\t__attribute__((__target__(\"arch=corei7-avx\")));\n extern void test_arch_core_avx2 (void)\t\t__attribute__((__target__(\"arch=core-avx2\")));\n+extern void test_arch_silvermont (void)\t\t__attribute__((__target__(\"arch=silvermont\")));\n+extern void test_arch_goldmont (void)\t\t__attribute__((__target__(\"arch=goldmont\")));\n extern void test_arch_knl (void)\t\t__attribute__((__target__(\"arch=knl\")));\n extern void test_arch_knm (void)\t\t__attribute__((__target__(\"arch=knm\")));\n extern void test_arch_skylake (void)\t\t__attribute__((__target__(\"arch=skylake\")));"}, {"sha": "93c95e3631185ad6450c174d722cfa659a379611", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e461dfe37e66bff2a2932480fb041743cdd93c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e461dfe37e66bff2a2932480fb041743cdd93c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=50e461dfe37e66bff2a2932480fb041743cdd93c", "patch": "@@ -1,3 +1,8 @@\n+2018-05-08  Olga Makhotina  <olga.makhotina@intel.com>\n+\n+\t* config/i386/cpuinfo.h (processor_types): Add INTEL_GOLDMONT.\n+\t* config/i386/cpuinfo.c (get_intel_cpu): Detect Goldmont.\n+\n 2018-05-07  Amaan Cheval  <amaan.cheval@gmail.com>\n \n \t* config.host (x86_64-*-rtems*): Build crti.o and crtn.o."}, {"sha": "7e6c7a43dbdd1fe5ec6c0881506b60bd14576c06", "filename": "libgcc/config/i386/cpuinfo.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e461dfe37e66bff2a2932480fb041743cdd93c/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e461dfe37e66bff2a2932480fb041743cdd93c/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c?ref=50e461dfe37e66bff2a2932480fb041743cdd93c", "patch": "@@ -140,6 +140,11 @@ get_intel_cpu (unsigned int family, unsigned int model, unsigned int brand_id)\n \t      /* Silvermont.  */\n \t      __cpu_model.__cpu_type = INTEL_SILVERMONT;\n \t      break;\n+\t    case 0x5c:\n+\t    case 0x5f:\n+\t      /* Goldmont.  */\n+\t      __cpu_model.__cpu_type = INTEL_GOLDMONT;\n+\t      break;\n \t    case 0x57:\n \t      /* Knights Landing.  */\n \t      __cpu_model.__cpu_type = INTEL_KNL;"}, {"sha": "18db199bc84e94f151881e93ac0e3c9eacbb7b58", "filename": "libgcc/config/i386/cpuinfo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e461dfe37e66bff2a2932480fb041743cdd93c/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e461dfe37e66bff2a2932480fb041743cdd93c/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h?ref=50e461dfe37e66bff2a2932480fb041743cdd93c", "patch": "@@ -48,6 +48,7 @@ enum processor_types\n   AMD_BTVER2,  \n   AMDFAM17H,\n   INTEL_KNM,\n+  INTEL_GOLDMONT,\n   CPU_TYPE_MAX\n };\n "}]}