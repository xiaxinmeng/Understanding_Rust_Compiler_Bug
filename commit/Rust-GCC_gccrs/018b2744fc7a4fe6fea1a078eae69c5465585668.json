{"sha": "018b2744fc7a4fe6fea1a078eae69c5465585668", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE4YjI3NDRmYzdhNGZlNmZlYTFhMDc4ZWFlNjljNTQ2NTU4NTY2OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-13T17:58:14Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-13T17:58:14Z"}, "message": "Handle more SLP constant and extern definitions for variable VF\n\nThis patch adds support for vectorising SLP definitions that are\nconstant or external (i.e. from outside the loop) when the vectorisation\nfactor isn't known at compile time.  It can only handle cases where the\nnumber of SLP statements is a power of 2.\n\n2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree-vect-slp.c: Include gimple-fold.h and internal-fn.h\n\t(can_duplicate_and_interleave_p): New function.\n\t(vect_get_and_check_slp_defs): Take the vector of statements\n\trather than just the current one.  Remove excess parentheses.\n\tRestriction rejectinon of vect_constant_def and vect_external_def\n\tfor variable-length vectors to boolean types, or types for which\n\tcan_duplicate_and_interleave_p is false.\n\t(vect_build_slp_tree_2): Update call to vect_get_and_check_slp_defs.\n\t(duplicate_and_interleave): New function.\n\t(vect_get_constant_vectors): Use gimple_build_vector for\n\tconstant-length vectors and suitable variable-length constant\n\tvectors.  Use duplicate_and_interleave for other variable-length\n\tvectors.  Don't defer the update when inserting new statements.\n\ngcc/testsuite/\n\t* gcc.dg/vect/no-scevccp-slp-30.c: Don't XFAIL for vect_variable_length\n\t&& vect_load_lanes\n\t* gcc.dg/vect/slp-1.c: Likewise.\n\t* gcc.dg/vect/slp-10.c: Likewise.\n\t* gcc.dg/vect/slp-12b.c: Likewise.\n\t* gcc.dg/vect/slp-12c.c: Likewise.\n\t* gcc.dg/vect/slp-17.c: Likewise.\n\t* gcc.dg/vect/slp-19b.c: Likewise.\n\t* gcc.dg/vect/slp-20.c: Likewise.\n\t* gcc.dg/vect/slp-21.c: Likewise.\n\t* gcc.dg/vect/slp-22.c: Likewise.\n\t* gcc.dg/vect/slp-23.c: Likewise.\n\t* gcc.dg/vect/slp-24-big-array.c: Likewise.\n\t* gcc.dg/vect/slp-24.c: Likewise.\n\t* gcc.dg/vect/slp-28.c: Likewise.\n\t* gcc.dg/vect/slp-39.c: Likewise.\n\t* gcc.dg/vect/slp-6.c: Likewise.\n\t* gcc.dg/vect/slp-7.c: Likewise.\n\t* gcc.dg/vect/slp-cond-1.c: Likewise.\n\t* gcc.dg/vect/slp-cond-2-big-array.c: Likewise.\n\t* gcc.dg/vect/slp-cond-2.c: Likewise.\n\t* gcc.dg/vect/slp-multitypes-1.c: Likewise.\n\t* gcc.dg/vect/slp-multitypes-8.c: Likewise.\n\t* gcc.dg/vect/slp-multitypes-9.c: Likewise.\n\t* gcc.dg/vect/slp-multitypes-10.c: Likewise.\n\t* gcc.dg/vect/slp-multitypes-12.c: Likewise.\n\t* gcc.dg/vect/slp-perm-6.c: Likewise.\n\t* gcc.dg/vect/slp-widen-mult-half.c: Likewise.\n\t* gcc.dg/vect/vect-live-slp-1.c: Likewise.\n\t* gcc.dg/vect/vect-live-slp-2.c: Likewise.\n\t* gcc.dg/vect/pr33953.c: Don't XFAIL for vect_variable_length.\n\t* gcc.dg/vect/slp-12a.c: Likewise.\n\t* gcc.dg/vect/slp-14.c: Likewise.\n\t* gcc.dg/vect/slp-15.c: Likewise.\n\t* gcc.dg/vect/slp-multitypes-2.c: Likewise.\n\t* gcc.dg/vect/slp-multitypes-4.c: Likewise.\n\t* gcc.dg/vect/slp-multitypes-5.c: Likewise.\n\t* gcc.target/aarch64/sve/slp_1.c: New test.\n\t* gcc.target/aarch64/sve/slp_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/slp_2.c: Likewise.\n\t* gcc.target/aarch64/sve/slp_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/slp_3.c: Likewise.\n\t* gcc.target/aarch64/sve/slp_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/slp_4.c: Likewise.\n\t* gcc.target/aarch64/sve/slp_4_run.c: Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256622", "tree": {"sha": "33e1fa7adf115a1367ec68d2c663a6bb8aa9b72f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33e1fa7adf115a1367ec68d2c663a6bb8aa9b72f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/018b2744fc7a4fe6fea1a078eae69c5465585668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/018b2744fc7a4fe6fea1a078eae69c5465585668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/018b2744fc7a4fe6fea1a078eae69c5465585668", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/018b2744fc7a4fe6fea1a078eae69c5465585668/comments", "author": null, "committer": null, "parents": [{"sha": "3ea518f6f63e66e48f2d41cfa41e1efae653a484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ea518f6f63e66e48f2d41cfa41e1efae653a484", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ea518f6f63e66e48f2d41cfa41e1efae653a484"}], "stats": {"total": 711, "additions": 635, "deletions": 76}, "files": [{"sha": "8bb12d3035fe72cab05884300da09ca4dadabe25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -1,3 +1,21 @@\n+2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree-vect-slp.c: Include gimple-fold.h and internal-fn.h\n+\t(can_duplicate_and_interleave_p): New function.\n+\t(vect_get_and_check_slp_defs): Take the vector of statements\n+\trather than just the current one.  Remove excess parentheses.\n+\tRestriction rejectinon of vect_constant_def and vect_external_def\n+\tfor variable-length vectors to boolean types, or types for which\n+\tcan_duplicate_and_interleave_p is false.\n+\t(vect_build_slp_tree_2): Update call to vect_get_and_check_slp_defs.\n+\t(duplicate_and_interleave): New function.\n+\t(vect_get_constant_vectors): Use gimple_build_vector for\n+\tconstant-length vectors and suitable variable-length constant\n+\tvectors.  Use duplicate_and_interleave for other variable-length\n+\tvectors.  Don't defer the update when inserting new statements.\n+\n 2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "3f6b5d75c3260f6305e0cbb0da00a705fad6e265", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -1,3 +1,53 @@\n+2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* gcc.dg/vect/no-scevccp-slp-30.c: Don't XFAIL for vect_variable_length\n+\t&& vect_load_lanes\n+\t* gcc.dg/vect/slp-1.c: Likewise.\n+\t* gcc.dg/vect/slp-10.c: Likewise.\n+\t* gcc.dg/vect/slp-12b.c: Likewise.\n+\t* gcc.dg/vect/slp-12c.c: Likewise.\n+\t* gcc.dg/vect/slp-17.c: Likewise.\n+\t* gcc.dg/vect/slp-19b.c: Likewise.\n+\t* gcc.dg/vect/slp-20.c: Likewise.\n+\t* gcc.dg/vect/slp-21.c: Likewise.\n+\t* gcc.dg/vect/slp-22.c: Likewise.\n+\t* gcc.dg/vect/slp-23.c: Likewise.\n+\t* gcc.dg/vect/slp-24-big-array.c: Likewise.\n+\t* gcc.dg/vect/slp-24.c: Likewise.\n+\t* gcc.dg/vect/slp-28.c: Likewise.\n+\t* gcc.dg/vect/slp-39.c: Likewise.\n+\t* gcc.dg/vect/slp-6.c: Likewise.\n+\t* gcc.dg/vect/slp-7.c: Likewise.\n+\t* gcc.dg/vect/slp-cond-1.c: Likewise.\n+\t* gcc.dg/vect/slp-cond-2-big-array.c: Likewise.\n+\t* gcc.dg/vect/slp-cond-2.c: Likewise.\n+\t* gcc.dg/vect/slp-multitypes-1.c: Likewise.\n+\t* gcc.dg/vect/slp-multitypes-8.c: Likewise.\n+\t* gcc.dg/vect/slp-multitypes-9.c: Likewise.\n+\t* gcc.dg/vect/slp-multitypes-10.c: Likewise.\n+\t* gcc.dg/vect/slp-multitypes-12.c: Likewise.\n+\t* gcc.dg/vect/slp-perm-6.c: Likewise.\n+\t* gcc.dg/vect/slp-widen-mult-half.c: Likewise.\n+\t* gcc.dg/vect/vect-live-slp-1.c: Likewise.\n+\t* gcc.dg/vect/vect-live-slp-2.c: Likewise.\n+\t* gcc.dg/vect/pr33953.c: Don't XFAIL for vect_variable_length.\n+\t* gcc.dg/vect/slp-12a.c: Likewise.\n+\t* gcc.dg/vect/slp-14.c: Likewise.\n+\t* gcc.dg/vect/slp-15.c: Likewise.\n+\t* gcc.dg/vect/slp-multitypes-2.c: Likewise.\n+\t* gcc.dg/vect/slp-multitypes-4.c: Likewise.\n+\t* gcc.dg/vect/slp-multitypes-5.c: Likewise.\n+\t* gcc.target/aarch64/sve/slp_1.c: New test.\n+\t* gcc.target/aarch64/sve/slp_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/slp_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/slp_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/slp_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/slp_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/slp_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/slp_4_run.c: Likewise.\n+\n 2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "fe9e7e7ab4038acfe02d3e6ea9c4fc37ba207043", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-slp-30.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-slp-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-slp-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-slp-30.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -52,5 +52,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" } } */\n   "}, {"sha": "4dd54cd57f3e4b0e7eb724d032b2c85d0bf6f736", "filename": "gcc/testsuite/gcc.dg/vect/pr33953.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33953.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33953.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33953.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -29,6 +29,6 @@ void blockmove_NtoN_blend_noremap32 (const UINT32 *srcdata, int srcwidth,\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || vect_variable_length } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n \n "}, {"sha": "26b71d654252bcd2e4591f11a78a4c0a3dad5d85", "filename": "gcc/testsuite/gcc.dg/vect/slp-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-1.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -118,5 +118,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"vect\" { xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"vect\" } } */\n   "}, {"sha": "da44f26601a9ba8ea52417ec5a160dc4bedfc315", "filename": "gcc/testsuite/gcc.dg/vect/slp-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-10.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -107,7 +107,7 @@ int main (void)\n /* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\"  {target {vect_uintfloat_cvt && vect_int_mult} } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  {target {{! { vect_uintfloat_cvt}} && vect_int_mult} } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  {target {{! { vect_uintfloat_cvt}} && { ! {vect_int_mult}}} } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" {target { vect_uintfloat_cvt && vect_int_mult } xfail { vect_variable_length && vect_load_lanes } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" {target { vect_uintfloat_cvt && vect_int_mult }} } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\"  {target {{! { vect_uintfloat_cvt}} && vect_int_mult} } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  {target {{! { vect_uintfloat_cvt}} && { ! {vect_int_mult}}} } } } */\n   "}, {"sha": "08a8f55bab0b3d09e7eae14354c515203146b3d8", "filename": "gcc/testsuite/gcc.dg/vect/slp-12a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12a.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -75,5 +75,5 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_strided8 && vect_int_mult } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { target { ! { vect_strided8 && vect_int_mult } } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { vect_strided8 && vect_int_mult } xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { vect_strided8 && vect_int_mult } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" { target { ! { vect_strided8 && vect_int_mult } } } } } */"}, {"sha": "48e78651a6dca24de91a1f36d0cd757e18f7c1b8", "filename": "gcc/testsuite/gcc.dg/vect/slp-12b.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12b.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -46,6 +46,6 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target { vect_strided2 && vect_int_mult } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  { target { ! { vect_strided2 && vect_int_mult } } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  { target { vect_strided2 && vect_int_mult } xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  { target { vect_strided2 && vect_int_mult } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  { target { ! { vect_strided2 && vect_int_mult } } } } } */\n   "}, {"sha": "6650b8bd94ece71dd9ccb9adcc3d17be2f2bc07a", "filename": "gcc/testsuite/gcc.dg/vect/slp-12c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12c.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -48,5 +48,5 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target { vect_int_mult } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  { target { ! vect_int_mult } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_int_mult xfail { vect_variable_length && vect_load_lanes } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_int_mult } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" { target { ! vect_int_mult } } } } */"}, {"sha": "6af70815dd43c13fc9abfcebd70c562268dea86f", "filename": "gcc/testsuite/gcc.dg/vect/slp-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-14.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -111,5 +111,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target vect_int_mult } } }  */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target vect_int_mult xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target vect_int_mult } } } */\n   "}, {"sha": "dbced88c98d1fc8d289e6ac32a84dc9f4072e49f", "filename": "gcc/testsuite/gcc.dg/vect/slp-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-15.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -112,6 +112,6 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  {target vect_int_mult } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  {target  { ! { vect_int_mult } } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" {target vect_int_mult xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" {target vect_int_mult } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" {target { ! { vect_int_mult } } } } } */\n   "}, {"sha": "6fa11e4c53ad73735af9ee74f56ddff0b777b99b", "filename": "gcc/testsuite/gcc.dg/vect/slp-17.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-17.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -51,5 +51,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { xfail { vect_variable_length && vect_load_lanes } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" } } */\n   "}, {"sha": "237b36dd227186c8f0cb78b703351fdae6fef27c", "filename": "gcc/testsuite/gcc.dg/vect/slp-19b.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-19b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-19b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-19b.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -53,5 +53,5 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_strided4 } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { target { ! vect_strided4 } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_strided4 xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_strided4 } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" { target { ! vect_strided4 } } } } */"}, {"sha": "dc5eab669ea9eaf7db83606b4c426921a6a5da15", "filename": "gcc/testsuite/gcc.dg/vect/slp-20.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-20.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -110,5 +110,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"vect\" { xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"vect\" } } */\n   "}, {"sha": "1f8c82e8ba8b4630ec47051346713cf67db4196d", "filename": "gcc/testsuite/gcc.dg/vect/slp-21.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-21.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -201,6 +201,6 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\"  { target { vect_strided4 || vect_extract_even_odd } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target  { ! { vect_strided4 || vect_extract_even_odd } } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target vect_strided4 xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target vect_strided4 } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  { target { ! { vect_strided4 } } } } } */\n   "}, {"sha": "e2a0002ffaf363fc12b76deaaee3067c9a0a186b", "filename": "gcc/testsuite/gcc.dg/vect/slp-22.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-22.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -129,5 +129,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 6 \"vect\" { xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 6 \"vect\" } } */\n   "}, {"sha": "3cda497db0cd5331ad0b6156512a4972a64b4fa0", "filename": "gcc/testsuite/gcc.dg/vect/slp-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-23.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -109,6 +109,6 @@ int main (void)\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { ! { vect_strided8 || vect_no_align } } } } } */\n /* We fail to vectorize the second loop with variable-length SVE but\n    fall back to 128-bit vectors, which does use SLP.  */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { ! vect_perm } xfail aarch64_sve } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { ! vect_perm } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target vect_perm } } } */\n   "}, {"sha": "abd3a878f1ac36a7c8cde58743496f79b71f4476", "filename": "gcc/testsuite/gcc.dg/vect/slp-24-big-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24-big-array.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -91,4 +91,4 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && ilp32 } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { xfail { { vect_no_align && ilp32 } || vect_variable_length } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { xfail { vect_no_align && ilp32 } } } } */"}, {"sha": "a45ce7de71fa6a8595b611dd47507df4e91e3b36", "filename": "gcc/testsuite/gcc.dg/vect/slp-24.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -77,4 +77,4 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && ilp32 } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { xfail { { vect_no_align && ilp32 } || vect_variable_length } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { xfail { vect_no_align && ilp32 } } } } */"}, {"sha": "7778bad44653e7b29f4f2486236aab8be2f07919", "filename": "gcc/testsuite/gcc.dg/vect/slp-28.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-28.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -89,5 +89,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" } } */\n   "}, {"sha": "85d32eaf748a64820a374eec88faad3ad5aac2ae", "filename": "gcc/testsuite/gcc.dg/vect/slp-39.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-39.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -21,4 +21,4 @@ void bar (double w)\n     }\r\n }\r\n \r\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { xfail vect_variable_length } } } */\r\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" } } */\r"}, {"sha": "ec85eb77236e4b8bf5e0c6a8d07abf44a28e2a5c", "filename": "gcc/testsuite/gcc.dg/vect/slp-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-6.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -116,6 +116,6 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\"  {target vect_int_mult} } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  {target  { ! { vect_int_mult } } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" {target vect_int_mult xfail { vect_variable_length && vect_load_lanes } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" {target vect_int_mult } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" {target  { ! { vect_int_mult } } } } } */\n   "}, {"sha": "e836a1ae9b5b60685e8ec2d15ca5005ff35a895e", "filename": "gcc/testsuite/gcc.dg/vect/slp-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-7.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -122,6 +122,6 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\"  { target vect_short_mult } } }*/\n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  { target { ! { vect_short_mult } } } } }*/\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\"  { target vect_short_mult xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\"  { target vect_short_mult } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\"  { target { ! { vect_short_mult } } } } } */\n  "}, {"sha": "482fc080a0fc132409509b084fcd67ef95f2aa17", "filename": "gcc/testsuite/gcc.dg/vect/slp-cond-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-cond-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-cond-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-cond-1.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -122,4 +122,4 @@ main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" { xfail { vect_variable_length && vect_load_lanes } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" } } */"}, {"sha": "57cc67ee121108bcc5ccaaee0dca5085264c8818", "filename": "gcc/testsuite/gcc.dg/vect/slp-cond-2-big-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-cond-2-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-cond-2-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-cond-2-big-array.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -125,4 +125,4 @@ main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" { xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" } } */"}, {"sha": "7350695ece0f53e36de861c4e7724ebf36ff6b76", "filename": "gcc/testsuite/gcc.dg/vect/slp-cond-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-cond-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-cond-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-cond-2.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -125,4 +125,4 @@ main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" { xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" } } */"}, {"sha": "1850f063eb4fc74c26a9b1a1016f9d70a0c28441", "filename": "gcc/testsuite/gcc.dg/vect/slp-multitypes-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-1.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -52,5 +52,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" } } */\n   "}, {"sha": "62580c070c8e19468812a9c81edc1c5847327ebb", "filename": "gcc/testsuite/gcc.dg/vect/slp-multitypes-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-10.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -46,5 +46,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target vect_pack_trunc } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  { target vect_pack_trunc xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  { target vect_pack_trunc } } } */\n   "}, {"sha": "d4c929de2ecbc73c75c08ae498b8b400f67bf636", "filename": "gcc/testsuite/gcc.dg/vect/slp-multitypes-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-12.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -62,5 +62,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" { xfail { vect_variable_length && vect_load_lanes } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" } } */\n   "}, {"sha": "28a645c79472578d3775e9e2eb28cb7ee69efad0", "filename": "gcc/testsuite/gcc.dg/vect/slp-multitypes-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-2.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -77,5 +77,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\"  } } */\n   "}, {"sha": "faf17d6f0cde5eacb7756996a224e4004b305f7f", "filename": "gcc/testsuite/gcc.dg/vect/slp-multitypes-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-4.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -52,5 +52,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target vect_unpack } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  { target vect_unpack xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  { target vect_unpack } } } */\n   "}, {"sha": "fb4f720aa4935da6862951a3c618799bb37f535f", "filename": "gcc/testsuite/gcc.dg/vect/slp-multitypes-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-5.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -52,5 +52,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_pack_trunc } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_pack_trunc xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_pack_trunc } } } */\n   "}, {"sha": "d88ebe4d778c4487c00ef055059d2b825542679a", "filename": "gcc/testsuite/gcc.dg/vect/slp-multitypes-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-8.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -40,5 +40,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target vect_unpack } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  { target vect_unpack xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  { target vect_unpack } } } */\n   "}, {"sha": "872b20cac93c119854b8250eb85dc43767743da4", "filename": "gcc/testsuite/gcc.dg/vect/slp-multitypes-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-9.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -40,5 +40,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target vect_pack_trunc } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  { target vect_pack_trunc xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  { target vect_pack_trunc } } } */\n   "}, {"sha": "4eb648ac71b2f45e513afbda873b638b898aa6e3", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-6.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -104,7 +104,7 @@ int main (int argc, const char* argv[])\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target vect_perm } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target { vect_perm3_int && { ! vect_load_lanes } } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_load_lanes xfail { vect_variable_length && vect_load_lanes } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_load_lanes } } } */\n /* { dg-final { scan-tree-dump \"note: Built SLP cancelled: can use load/store-lanes\" \"vect\" { target { vect_perm3_int && vect_load_lanes } } } } */\n /* { dg-final { scan-tree-dump \"LOAD_LANES\" \"vect\" { target vect_load_lanes } } } */\n /* { dg-final { scan-tree-dump \"STORE_LANES\" \"vect\" { target vect_load_lanes } } } */"}, {"sha": "f5fb63e19f15988b5de4854923169aafa24d99e4", "filename": "gcc/testsuite/gcc.dg/vect/slp-widen-mult-half.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-widen-mult-half.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-widen-mult-half.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-widen-mult-half.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -46,7 +46,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_widen_mult_hi_to_si } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target vect_widen_mult_hi_to_si xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target vect_widen_mult_hi_to_si } } } */\n /* { dg-final { scan-tree-dump-times \"vect_recog_widen_mult_pattern: detected\" 2 \"vect\" { target vect_widen_mult_hi_to_si_pattern } } } */\n /* { dg-final { scan-tree-dump-times \"pattern recognized\" 2 \"vect\" { target vect_widen_mult_hi_to_si_pattern } } } */\n "}, {"sha": "aff37c100f046021b7834ef0bfa399744a618dd8", "filename": "gcc/testsuite/gcc.dg/vect/vect-live-slp-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-live-slp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-live-slp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-live-slp-1.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -68,5 +68,5 @@ main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"vect\" { xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"vec_stmt_relevant_p: stmt live but not relevant\" 4 \"vect\" } } */"}, {"sha": "35689665b548cf6ade0c8e8e2fbd490335ce7779", "filename": "gcc/testsuite/gcc.dg/vect/vect-live-slp-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-live-slp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-live-slp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-live-slp-2.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -62,5 +62,5 @@ main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"vec_stmt_relevant_p: stmt live but not relevant\" 2 \"vect\" } } */"}, {"sha": "dffc7b467cc68e119ad39eda67c0d2f23b0375ec", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_1.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=scalable\" } */\n+\n+#include <stdint.h>\n+\n+#define VEC_PERM(TYPE)\t\t\t\t\t\t\\\n+TYPE __attribute__ ((noinline, noclone))\t\t\t\\\n+vec_slp_##TYPE (TYPE *restrict a, TYPE b, TYPE c, int n)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      a[i * 2] += b;\t\t\t\t\t\t\\\n+      a[i * 2 + 1] += c;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (int8_t)\t\t\t\t\t\\\n+  T (uint8_t)\t\t\t\t\t\\\n+  T (int16_t)\t\t\t\t\t\\\n+  T (uint16_t)\t\t\t\t\t\\\n+  T (int32_t)\t\t\t\t\t\\\n+  T (uint32_t)\t\t\t\t\t\\\n+  T (int64_t)\t\t\t\t\t\\\n+  T (uint64_t)\t\t\t\t\t\\\n+  T (_Float16)\t\t\t\t\t\\\n+  T (float)\t\t\t\t\t\\\n+  T (double)\n+\n+TEST_ALL (VEC_PERM)\n+\n+/* We should use one DUP for each of the 8-, 16- and 32-bit types,\n+   although we currently use LD1RW for _Float16.  We should use two\n+   DUPs for each of the three 64-bit types.  */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, [hw]} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, [sw]} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1rw\\tz[0-9]+\\.s, } 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, [dx]} 9 } } */\n+/* { dg-final { scan-assembler-times {\\tzip1\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 3 } } */\n+/* { dg-final { scan-assembler-not {\\tzip2\\t} } } */"}, {"sha": "0ce056acfdf54def68ad8b74969cee5c9e815962", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_1_run.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_1_run.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"slp_1.c\"\n+\n+#define N (103 * 2)\n+\n+#define HARNESS(TYPE)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE a[N], b[2] = { 3, 11 };\t\t\t\t\\\n+    for (unsigned int i = 0; i < N; ++i)\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = i * 2 + i % 5;\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    vec_slp_##TYPE (a, b[0], b[1], N / 2);\t\t\t\\\n+    for (unsigned int i = 0; i < N; ++i)\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE orig = i * 2 + i % 5;\t\t\t\t\\\n+\tTYPE expected = orig + b[i % 2];\t\t\t\\\n+\tif (a[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  TEST_ALL (HARNESS)\n+}"}, {"sha": "0a258872fd058cdb2b09ce4f42932e15afba16ff", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_2.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=scalable\" } */\n+\n+#include <stdint.h>\n+\n+#define VEC_PERM(TYPE)\t\t\t\t\t\t\\\n+TYPE __attribute__ ((noinline, noclone))\t\t\t\\\n+vec_slp_##TYPE (TYPE *restrict a, int n)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      a[i * 2] += 10;\t\t\t\t\t\t\\\n+      a[i * 2 + 1] += 17;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (int8_t)\t\t\t\t\t\\\n+  T (uint8_t)\t\t\t\t\t\\\n+  T (int16_t)\t\t\t\t\t\\\n+  T (uint16_t)\t\t\t\t\t\\\n+  T (int32_t)\t\t\t\t\t\\\n+  T (uint32_t)\t\t\t\t\t\\\n+  T (int64_t)\t\t\t\t\t\\\n+  T (uint64_t)\t\t\t\t\t\\\n+  T (_Float16)\t\t\t\t\t\\\n+  T (float)\t\t\t\t\t\\\n+  T (double)\n+\n+TEST_ALL (VEC_PERM)\n+\n+/* { dg-final { scan-assembler-times {\\tld1rh\\tz[0-9]+\\.h, } 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1rw\\tz[0-9]+\\.s, } 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1rd\\tz[0-9]+\\.d, } 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1rqb\\tz[0-9]+\\.b, } 3 } } */\n+/* { dg-final { scan-assembler-not {\\tzip1\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tzip2\\t} } } */"}, {"sha": "bb5ef669703774c89d27d8ab25fe683f73f3aa35", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_2_run.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_2_run.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"slp_2.c\"\n+\n+#define N (103 * 2)\n+\n+#define HARNESS(TYPE)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE a[N], b[2] = { 10, 17 };\t\t\t\t\\\n+    for (unsigned int i = 0; i < N; ++i)\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = i * 2 + i % 5;\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    vec_slp_##TYPE (a, N / 2);\t\t\t\t\t\\\n+    for (unsigned int i = 0; i < N; ++i)\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE orig = i * 2 + i % 5;\t\t\t\t\\\n+\tTYPE expected = orig + b[i % 2];\t\t\t\\\n+\tif (a[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  TEST_ALL (HARNESS)\n+}"}, {"sha": "534ad44fd0d1190e06137d06cd222dee78bc71b8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_3.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_3.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=scalable\" } */\n+\n+#include <stdint.h>\n+\n+#define VEC_PERM(TYPE)\t\t\t\t\t\t\\\n+TYPE __attribute__ ((noinline, noclone))\t\t\t\\\n+vec_slp_##TYPE (TYPE *restrict a, int n)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      a[i * 4] += 41;\t\t\t\t\t\t\\\n+      a[i * 4 + 1] += 25;\t\t\t\t\t\\\n+      a[i * 4 + 2] += 31;\t\t\t\t\t\\\n+      a[i * 4 + 3] += 62;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (int8_t)\t\t\t\t\t\\\n+  T (uint8_t)\t\t\t\t\t\\\n+  T (int16_t)\t\t\t\t\t\\\n+  T (uint16_t)\t\t\t\t\t\\\n+  T (int32_t)\t\t\t\t\t\\\n+  T (uint32_t)\t\t\t\t\t\\\n+  T (int64_t)\t\t\t\t\t\\\n+  T (uint64_t)\t\t\t\t\t\\\n+  T (_Float16)\t\t\t\t\t\\\n+  T (float)\t\t\t\t\t\\\n+  T (double)\n+\n+TEST_ALL (VEC_PERM)\n+\n+/* 1 for each 8-bit type.  */\n+/* { dg-final { scan-assembler-times {\\tld1rw\\tz[0-9]+\\.s, } 2 } } */\n+/* 1 for each 16-bit type and 4 for double.  */\n+/* { dg-final { scan-assembler-times {\\tld1rd\\tz[0-9]+\\.d, } 7 } } */\n+/* 1 for each 32-bit type.  */\n+/* { dg-final { scan-assembler-times {\\tld1rqb\\tz[0-9]+\\.b, } 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #41\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #25\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #31\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #62\\n} 2 } } */\n+/* The 64-bit types need:\n+\n+      ZIP1 ZIP1 (2 ZIP2s optimized away)\n+      ZIP1 ZIP2.  */\n+/* { dg-final { scan-assembler-times {\\tzip1\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 9 } } */\n+/* { dg-final { scan-assembler-times {\\tzip2\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 3 } } */"}, {"sha": "0ec1cea1be0c850154f54f483fc95e16a4a416f8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_3_run.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_3_run.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"slp_3.c\"\n+\n+#define N (77 * 4)\n+\n+#define HARNESS(TYPE)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE a[N], b[4] = { 41, 25, 31, 62 };\t\t\t\\\n+    for (unsigned int i = 0; i < N; ++i)\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = i * 2 + i % 5;\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    vec_slp_##TYPE (a, N / 4);\t\t\t\t\t\\\n+    for (unsigned int i = 0; i < N; ++i)\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE orig = i * 2 + i % 5;\t\t\t\t\\\n+\tTYPE expected = orig + b[i % 4];\t\t\t\\\n+\tif (a[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  TEST_ALL (HARNESS)\n+}"}, {"sha": "09f9dedf73c6ce203bb6cb8cf1add00b8b2696e2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_4.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_4.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=scalable\" } */\n+\n+#include <stdint.h>\n+\n+#define VEC_PERM(TYPE)\t\t\t\t\t\t\\\n+TYPE __attribute__ ((noinline, noclone))\t\t\t\\\n+vec_slp_##TYPE (TYPE *restrict a, int n)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      a[i * 8] += 99;\t\t\t\t\t\t\\\n+      a[i * 8 + 1] += 11;\t\t\t\t\t\\\n+      a[i * 8 + 2] += 17;\t\t\t\t\t\\\n+      a[i * 8 + 3] += 80;\t\t\t\t\t\\\n+      a[i * 8 + 4] += 63;\t\t\t\t\t\\\n+      a[i * 8 + 5] += 37;\t\t\t\t\t\\\n+      a[i * 8 + 6] += 24;\t\t\t\t\t\\\n+      a[i * 8 + 7] += 81;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (int8_t)\t\t\t\t\t\\\n+  T (uint8_t)\t\t\t\t\t\\\n+  T (int16_t)\t\t\t\t\t\\\n+  T (uint16_t)\t\t\t\t\t\\\n+  T (int32_t)\t\t\t\t\t\\\n+  T (uint32_t)\t\t\t\t\t\\\n+  T (int64_t)\t\t\t\t\t\\\n+  T (uint64_t)\t\t\t\t\t\\\n+  T (_Float16)\t\t\t\t\t\\\n+  T (float)\t\t\t\t\t\\\n+  T (double)\n+\n+TEST_ALL (VEC_PERM)\n+\n+/* 1 for each 8-bit type, 4 for each 32-bit type and 8 for double.  */\n+/* { dg-final { scan-assembler-times {\\tld1rd\\tz[0-9]+\\.d, } 22 } } */\n+/* 1 for each 16-bit type.  */\n+/* { dg-final { scan-assembler-times {\\tld1rqb\\tz[0-9]\\.b, } 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #99\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #11\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #17\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #80\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #63\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #37\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #24\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #81\\n} 2 } } */\n+/* The 32-bit types need:\n+\n+      ZIP1 ZIP1 (2 ZIP2s optimized away)\n+      ZIP1 ZIP2\n+\n+   and the 64-bit types need:\n+\n+      ZIP1 ZIP1 ZIP1 ZIP1 (4 ZIP2s optimized away)\n+      ZIP1 ZIP2 ZIP1 ZIP2\n+      ZIP1 ZIP2 ZIP1 ZIP2.  */\n+/* { dg-final { scan-assembler-times {\\tzip1\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 33 } } */\n+/* { dg-final { scan-assembler-times {\\tzip2\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 15 } } */"}, {"sha": "3ca9dbb9da792bfa8f7ad6227ab61d70c420e0b0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_4_run.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_4_run.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"slp_4.c\"\n+\n+#define N (59 * 8)\n+\n+#define HARNESS(TYPE)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE a[N], b[8] = { 99, 11, 17, 80, 63, 37, 24, 81 };\t\\\n+    for (unsigned int i = 0; i < N; ++i)\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = i * 2 + i % 5;\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    vec_slp_##TYPE (a, N / 8);\t\t\t\t\t\\\n+    for (unsigned int i = 0; i < N; ++i)\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE orig = i * 2 + i % 5;\t\t\t\t\\\n+\tTYPE expected = orig + b[i % 8];\t\t\t\\\n+\tif (a[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  TEST_ALL (HARNESS)\n+}"}, {"sha": "5f6a33a89706c6fd29e55af272b23ddbd84703f4", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 224, "deletions": 40, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018b2744fc7a4fe6fea1a078eae69c5465585668/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=018b2744fc7a4fe6fea1a078eae69c5465585668", "patch": "@@ -43,6 +43,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dbgcnt.h\"\n #include \"tree-vector-builder.h\"\n #include \"vec-perm-indices.h\"\n+#include \"gimple-fold.h\"\n+#include \"internal-fn.h\"\n \n \n /* Recursively free the memory allocated for the SLP tree rooted at NODE.  */\n@@ -208,24 +210,87 @@ vect_get_place_in_interleaving_chain (gimple *stmt, gimple *first_stmt)\n   return -1;\n }\n \n+/* Check whether it is possible to load COUNT elements of type ELT_MODE\n+   using the method implemented by duplicate_and_interleave.  Return true\n+   if so, returning the number of intermediate vectors in *NVECTORS_OUT\n+   (if nonnull) and the type of each intermediate vector in *VECTOR_TYPE_OUT\n+   (if nonnull).  */\n+\n+static bool\n+can_duplicate_and_interleave_p (unsigned int count, machine_mode elt_mode,\n+\t\t\t\tunsigned int *nvectors_out = NULL,\n+\t\t\t\ttree *vector_type_out = NULL,\n+\t\t\t\ttree *permutes = NULL)\n+{\n+  poly_int64 elt_bytes = count * GET_MODE_SIZE (elt_mode);\n+  poly_int64 nelts;\n+  unsigned int nvectors = 1;\n+  for (;;)\n+    {\n+      scalar_int_mode int_mode;\n+      poly_int64 elt_bits = elt_bytes * BITS_PER_UNIT;\n+      if (multiple_p (current_vector_size, elt_bytes, &nelts)\n+\t  && int_mode_for_size (elt_bits, 0).exists (&int_mode))\n+\t{\n+\t  tree int_type = build_nonstandard_integer_type\n+\t    (GET_MODE_BITSIZE (int_mode), 1);\n+\t  tree vector_type = build_vector_type (int_type, nelts);\n+\t  if (VECTOR_MODE_P (TYPE_MODE (vector_type)))\n+\t    {\n+\t      vec_perm_builder sel1 (nelts, 2, 3);\n+\t      vec_perm_builder sel2 (nelts, 2, 3);\n+\t      poly_int64 half_nelts = exact_div (nelts, 2);\n+\t      for (unsigned int i = 0; i < 3; ++i)\n+\t\t{\n+\t\t  sel1.quick_push (i);\n+\t\t  sel1.quick_push (i + nelts);\n+\t\t  sel2.quick_push (half_nelts + i);\n+\t\t  sel2.quick_push (half_nelts + i + nelts);\n+\t\t}\n+\t      vec_perm_indices indices1 (sel1, 2, nelts);\n+\t      vec_perm_indices indices2 (sel2, 2, nelts);\n+\t      if (can_vec_perm_const_p (TYPE_MODE (vector_type), indices1)\n+\t\t  && can_vec_perm_const_p (TYPE_MODE (vector_type), indices2))\n+\t\t{\n+\t\t  if (nvectors_out)\n+\t\t    *nvectors_out = nvectors;\n+\t\t  if (vector_type_out)\n+\t\t    *vector_type_out = vector_type;\n+\t\t  if (permutes)\n+\t\t    {\n+\t\t      permutes[0] = vect_gen_perm_mask_checked (vector_type,\n+\t\t\t\t\t\t\t\tindices1);\n+\t\t      permutes[1] = vect_gen_perm_mask_checked (vector_type,\n+\t\t\t\t\t\t\t\tindices2);\n+\t\t    }\n+\t\t  return true;\n+\t\t}\n+\t    }\n+\t}\n+      if (!multiple_p (elt_bytes, 2, &elt_bytes))\n+\treturn false;\n+      nvectors *= 2;\n+    }\n+}\n \n /* Get the defs for the rhs of STMT (collect them in OPRNDS_INFO), check that\n    they are of a valid type and that they match the defs of the first stmt of\n    the SLP group (stored in OPRNDS_INFO).  This function tries to match stmts\n-   by swapping operands of STMT when possible.  Non-zero *SWAP indicates swap\n-   is required for cond_expr stmts.  Specifically, *SWAP is 1 if STMT is cond\n-   and operands of comparison need to be swapped; *SWAP is 2 if STMT is cond\n-   and code of comparison needs to be inverted.  If there is any operand swap\n-   in this function, *SWAP is set to non-zero value.\n+   by swapping operands of STMTS[STMT_NUM] when possible.  Non-zero *SWAP\n+   indicates swap is required for cond_expr stmts.  Specifically, *SWAP\n+   is 1 if STMT is cond and operands of comparison need to be swapped;\n+   *SWAP is 2 if STMT is cond and code of comparison needs to be inverted.\n+   If there is any operand swap in this function, *SWAP is set to non-zero\n+   value.\n    If there was a fatal error return -1; if the error could be corrected by\n    swapping operands of father node of this one, return 1; if everything is\n    ok return 0.  */\n-\n static int\n vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char *swap,\n-\t\t\t     gimple *stmt, unsigned stmt_num,\n+\t\t\t     vec<gimple *> stmts, unsigned stmt_num,\n \t\t\t     vec<slp_oprnd_info> *oprnds_info)\n {\n+  gimple *stmt = stmts[stmt_num];\n   tree oprnd;\n   unsigned int i, number_of_oprnds;\n   gimple *def_stmt;\n@@ -373,15 +438,15 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char *swap,\n \t     types for reduction chains: the first stmt must be a\n \t     vect_reduction_def (a phi node), and the rest\n \t     vect_internal_def.  */\n-\t  if (((oprnd_info->first_dt != dt\n-                && !(oprnd_info->first_dt == vect_reduction_def\n-                     && dt == vect_internal_def)\n-\t\t&& !((oprnd_info->first_dt == vect_external_def\n-\t\t      || oprnd_info->first_dt == vect_constant_def)\n-\t\t     && (dt == vect_external_def\n-\t\t\t || dt == vect_constant_def)))\n-               || !types_compatible_p (oprnd_info->first_op_type,\n-\t\t\t\t       TREE_TYPE (oprnd))))\n+\t  tree type = TREE_TYPE (oprnd);\n+\t  if ((oprnd_info->first_dt != dt\n+\t       && !(oprnd_info->first_dt == vect_reduction_def\n+\t\t    && dt == vect_internal_def)\n+\t       && !((oprnd_info->first_dt == vect_external_def\n+\t\t     || oprnd_info->first_dt == vect_constant_def)\n+\t\t    && (dt == vect_external_def\n+\t\t\t|| dt == vect_constant_def)))\n+\t      || !types_compatible_p (oprnd_info->first_op_type, type))\n \t    {\n \t      /* Try swapping operands if we got a mismatch.  */\n \t      if (i == 0\n@@ -398,16 +463,12 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char *swap,\n \n \t      return 1;\n \t    }\n-\t}\n-\n-      /* Check the types of the definitions.  */\n-      switch (dt)\n-\t{\n-\tcase vect_constant_def:\n-\tcase vect_external_def:\n-\t  /* We must already have set a vector size by now.  */\n-\t  gcc_checking_assert (maybe_ne (current_vector_size, 0U));\n-\t  if (!current_vector_size.is_constant ())\n+\t  if ((dt == vect_constant_def\n+\t       || dt == vect_external_def)\n+\t      && !current_vector_size.is_constant ()\n+\t      && (TREE_CODE (type) == BOOLEAN_TYPE\n+\t\t  || !can_duplicate_and_interleave_p (stmts.length (),\n+\t\t\t\t\t\t      TYPE_MODE (type))))\n \t    {\n \t      if (dump_enabled_p ())\n \t\t{\n@@ -419,6 +480,13 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char *swap,\n \t\t}\n \t      return -1;\n \t    }\n+\t}\n+\n+      /* Check the types of the definitions.  */\n+      switch (dt)\n+\t{\n+\tcase vect_constant_def:\n+\tcase vect_external_def:\n \t  break;\n \n \tcase vect_reduction_def:\n@@ -1119,7 +1187,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n   FOR_EACH_VEC_ELT (stmts, i, stmt)\n     {\n       int res = vect_get_and_check_slp_defs (vinfo, &swap[i],\n-\t\t\t\t\t     stmt, i, &oprnds_info);\n+\t\t\t\t\t     stmts, i, &oprnds_info);\n       if (res != 0)\n \tmatches[(res == -1) ? 0 : i] = false;\n       if (!matches[0])\n@@ -3219,6 +3287,118 @@ vect_mask_constant_operand_p (gimple *stmt, int opnum)\n   return VECTOR_BOOLEAN_TYPE_P (STMT_VINFO_VECTYPE (stmt_vinfo));\n }\n \n+/* Build a variable-length vector in which the elements in ELTS are repeated\n+   to a fill NRESULTS vectors of type VECTOR_TYPE.  Store the vectors in\n+   RESULTS and add any new instructions to SEQ.\n+\n+   The approach we use is:\n+\n+   (1) Find a vector mode VM with integer elements of mode IM.\n+\n+   (2) Replace ELTS[0:NELTS] with ELTS'[0:NELTS'], where each element of\n+       ELTS' has mode IM.  This involves creating NELTS' VIEW_CONVERT_EXPRs\n+       from small vectors to IM.\n+\n+   (3) Duplicate each ELTS'[I] into a vector of mode VM.\n+\n+   (4) Use a tree of interleaving VEC_PERM_EXPRs to create VMs with the\n+       correct byte contents.\n+\n+   (5) Use VIEW_CONVERT_EXPR to cast the final VMs to the required type.\n+\n+   We try to find the largest IM for which this sequence works, in order\n+   to cut down on the number of interleaves.  */\n+\n+static void\n+duplicate_and_interleave (gimple_seq *seq, tree vector_type, vec<tree> elts,\n+\t\t\t  unsigned int nresults, vec<tree> &results)\n+{\n+  unsigned int nelts = elts.length ();\n+  tree element_type = TREE_TYPE (vector_type);\n+\n+  /* (1) Find a vector mode VM with integer elements of mode IM.  */\n+  unsigned int nvectors = 1;\n+  tree new_vector_type;\n+  tree permutes[2];\n+  if (!can_duplicate_and_interleave_p (nelts, TYPE_MODE (element_type),\n+\t\t\t\t       &nvectors, &new_vector_type,\n+\t\t\t\t       permutes))\n+    gcc_unreachable ();\n+\n+  /* Get a vector type that holds ELTS[0:NELTS/NELTS'].  */\n+  unsigned int partial_nelts = nelts / nvectors;\n+  tree partial_vector_type = build_vector_type (element_type, partial_nelts);\n+\n+  tree_vector_builder partial_elts;\n+  auto_vec<tree, 32> pieces (nvectors * 2);\n+  pieces.quick_grow (nvectors * 2);\n+  for (unsigned int i = 0; i < nvectors; ++i)\n+    {\n+      /* (2) Replace ELTS[0:NELTS] with ELTS'[0:NELTS'], where each element of\n+\t     ELTS' has mode IM.  */\n+      partial_elts.new_vector (partial_vector_type, partial_nelts, 1);\n+      for (unsigned int j = 0; j < partial_nelts; ++j)\n+\tpartial_elts.quick_push (elts[i * partial_nelts + j]);\n+      tree t = gimple_build_vector (seq, &partial_elts);\n+      t = gimple_build (seq, VIEW_CONVERT_EXPR,\n+\t\t\tTREE_TYPE (new_vector_type), t);\n+\n+      /* (3) Duplicate each ELTS'[I] into a vector of mode VM.  */\n+      pieces[i] = gimple_build_vector_from_val (seq, new_vector_type, t);\n+    }\n+\n+  /* (4) Use a tree of VEC_PERM_EXPRs to create a single VM with the\n+\t correct byte contents.\n+\n+     We need to repeat the following operation log2(nvectors) times:\n+\n+\tout[i * 2] = VEC_PERM_EXPR (in[i], in[i + hi_start], lo_permute);\n+\tout[i * 2 + 1] = VEC_PERM_EXPR (in[i], in[i + hi_start], hi_permute);\n+\n+     However, if each input repeats every N elements and the VF is\n+     a multiple of N * 2, the HI result is the same as the LO.  */\n+  unsigned int in_start = 0;\n+  unsigned int out_start = nvectors;\n+  unsigned int hi_start = nvectors / 2;\n+  /* A bound on the number of outputs needed to produce NRESULTS results\n+     in the final iteration.  */\n+  unsigned int noutputs_bound = nvectors * nresults;\n+  for (unsigned int in_repeat = 1; in_repeat < nvectors; in_repeat *= 2)\n+    {\n+      noutputs_bound /= 2;\n+      unsigned int limit = MIN (noutputs_bound, nvectors);\n+      for (unsigned int i = 0; i < limit; ++i)\n+\t{\n+\t  if ((i & 1) != 0\n+\t      && multiple_p (TYPE_VECTOR_SUBPARTS (new_vector_type),\n+\t\t\t     2 * in_repeat))\n+\t    {\n+\t      pieces[out_start + i] = pieces[out_start + i - 1];\n+\t      continue;\n+\t    }\n+\n+\t  tree output = make_ssa_name (new_vector_type);\n+\t  tree input1 = pieces[in_start + (i / 2)];\n+\t  tree input2 = pieces[in_start + (i / 2) + hi_start];\n+\t  gassign *stmt = gimple_build_assign (output, VEC_PERM_EXPR,\n+\t\t\t\t\t       input1, input2,\n+\t\t\t\t\t       permutes[i & 1]);\n+\t  gimple_seq_add_stmt (seq, stmt);\n+\t  pieces[out_start + i] = output;\n+\t}\n+      std::swap (in_start, out_start);\n+    }\n+\n+  /* (5) Use VIEW_CONVERT_EXPR to cast the final VM to the required type.  */\n+  results.reserve (nresults);\n+  for (unsigned int i = 0; i < nresults; ++i)\n+    if (i < nvectors)\n+      results.quick_push (gimple_build (seq, VIEW_CONVERT_EXPR, vector_type,\n+\t\t\t\t\tpieces[in_start + i]));\n+    else\n+      results.quick_push (results[i - nvectors]);\n+}\n+\n \n /* For constant and loop invariant defs of SLP_NODE this function returns\n    (vector) defs (VEC_OPRNDS) that will be used in the vectorized stmts.\n@@ -3235,7 +3415,7 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n   vec<gimple *> stmts = SLP_TREE_SCALAR_STMTS (slp_node);\n   gimple *stmt = stmts[0];\n   stmt_vec_info stmt_vinfo = vinfo_for_stmt (stmt);\n-  unsigned nunits;\n+  unsigned HOST_WIDE_INT nunits;\n   tree vec_cst;\n   unsigned j, number_of_places_left_in_vector;\n   tree vector_type;\n@@ -3249,6 +3429,7 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n   tree neutral_op = NULL;\n   enum tree_code code = gimple_expr_code (stmt);\n   gimple_seq ctor_seq = NULL;\n+  auto_vec<tree, 16> permute_results;\n \n   /* Check if vector type is a boolean vector.  */\n   if (VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (op))\n@@ -3257,8 +3438,6 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n       = build_same_sized_truth_vector_type (STMT_VINFO_VECTYPE (stmt_vinfo));\n   else\n     vector_type = get_vectype_for_scalar_type (TREE_TYPE (op));\n-  /* Enforced by vect_get_and_check_slp_defs.  */\n-  nunits = TYPE_VECTOR_SUBPARTS (vector_type).to_constant ();\n \n   if (STMT_VINFO_DATA_REF (stmt_vinfo))\n     {\n@@ -3286,6 +3465,11 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n      (s1, s2, ..., s8).  We will create two vectors {s1, s2, s3, s4} and\n      {s5, s6, s7, s8}.  */\n \n+  /* When using duplicate_and_interleave, we just need one element for\n+     each scalar statement.  */\n+  if (!TYPE_VECTOR_SUBPARTS (vector_type).is_constant (&nunits))\n+    nunits = group_size;\n+\n   number_of_copies = nunits * number_of_vectors / group_size;\n \n   number_of_places_left_in_vector = nunits;\n@@ -3407,16 +3591,17 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n \n           if (number_of_places_left_in_vector == 0)\n             {\n-\t      if (constant_p)\n-\t\tvec_cst = elts.build ();\n+\t      if (constant_p\n+\t\t  ? multiple_p (TYPE_VECTOR_SUBPARTS (vector_type), nunits)\n+\t\t  : known_eq (TYPE_VECTOR_SUBPARTS (vector_type), nunits))\n+\t\tvec_cst = gimple_build_vector (&ctor_seq, &elts);\n \t      else\n \t\t{\n-\t\t  vec<constructor_elt, va_gc> *v;\n-\t\t  unsigned k;\n-\t\t  vec_alloc (v, nunits);\n-\t\t  for (k = 0; k < nunits; ++k)\n-\t\t    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, elts[k]);\n-\t\t  vec_cst = build_constructor (vector_type, v);\n+\t\t  if (vec_oprnds->is_empty ())\n+\t\t    duplicate_and_interleave (&ctor_seq, vector_type, elts,\n+\t\t\t\t\t      number_of_vectors,\n+\t\t\t\t\t      permute_results);\n+\t\t  vec_cst = permute_results[number_of_vectors - j - 1];\n \t\t}\n \t      tree init;\n \t      gimple_stmt_iterator gsi;\n@@ -3431,8 +3616,7 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n \t      if (ctor_seq != NULL)\n \t\t{\n \t\t  gsi = gsi_for_stmt (SSA_NAME_DEF_STMT (init));\n-\t\t  gsi_insert_seq_before_without_update (&gsi, ctor_seq,\n-\t\t\t\t\t\t\tGSI_SAME_STMT);\n+\t\t  gsi_insert_seq_before (&gsi, ctor_seq, GSI_SAME_STMT);\n \t\t  ctor_seq = NULL;\n \t\t}\n \t      voprnds.quick_push (init);"}]}