{"sha": "c26d7df103197e52dcd6edbb9a7f58eafdd6c715", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI2ZDdkZjEwMzE5N2U1MmRjZDZlZGJiOWE3ZjU4ZWFmZGQ2YzcxNQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-10-22T15:09:22Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-10-22T15:09:22Z"}, "message": "OpenMP: Fortran - support omp flush's memorder clauses\n\ngcc/fortran/ChangeLog:\n\n\t* gfortran.h (enum gfc_omp_memorder): Add.\n\t(gfc_omp_clauses): Use it.\n\t* openmp.c (gfc_match_omp_flush): Match memorder clauses.\n\t* trans-openmp.c (gfc_trans_omp_flush): Handle them.\n\t(gfc_trans_omp_directive): Update call.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/flush-1.f90: New test.\n\t* gfortran.dg/gomp/flush-2.f90: New test.", "tree": {"sha": "612b26bcbe24f27385ef93fa3bda30b2f90f4276", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/612b26bcbe24f27385ef93fa3bda30b2f90f4276"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c26d7df103197e52dcd6edbb9a7f58eafdd6c715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c26d7df103197e52dcd6edbb9a7f58eafdd6c715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c26d7df103197e52dcd6edbb9a7f58eafdd6c715", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c26d7df103197e52dcd6edbb9a7f58eafdd6c715/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b69c00612db1ccf7de77b0072c6b1b47090318f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b69c00612db1ccf7de77b0072c6b1b47090318f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b69c00612db1ccf7de77b0072c6b1b47090318f3"}], "stats": {"total": 127, "additions": 123, "deletions": 4}, "files": [{"sha": "931b908a16e1160c52a416406325cefe400e16a9", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c26d7df103197e52dcd6edbb9a7f58eafdd6c715/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c26d7df103197e52dcd6edbb9a7f58eafdd6c715/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=c26d7df103197e52dcd6edbb9a7f58eafdd6c715", "patch": "@@ -1361,6 +1361,14 @@ enum gfc_omp_requires_kind\n \t\t\t\t   | OMP_REQ_ATOMIC_MEM_ORDER_RELAXED)\n };\n \n+enum gfc_omp_memorder\n+{\n+  OMP_MEMORDER_ACQ_REL,\n+  OMP_MEMORDER_RELEASE,\n+  OMP_MEMORDER_ACQUIRE,\n+  OMP_MEMORDER_LAST\n+};\n+\n typedef struct gfc_omp_clauses\n {\n   struct gfc_expr *if_expr;\n@@ -1376,6 +1384,7 @@ typedef struct gfc_omp_clauses\n   bool inbranch, notinbranch, defaultmap, nogroup;\n   bool sched_simd, sched_monotonic, sched_nonmonotonic;\n   bool simd, threads, depend_source, order_concurrent;\n+  enum gfc_omp_memorder memorder;\n   enum gfc_omp_cancel_kind cancel;\n   enum gfc_omp_proc_bind_kind proc_bind;\n   struct gfc_expr *safelen_expr;"}, {"sha": "b143ba7454ad88df1c7db7943ab062fca34f1c69", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c26d7df103197e52dcd6edbb9a7f58eafdd6c715/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c26d7df103197e52dcd6edbb9a7f58eafdd6c715/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=c26d7df103197e52dcd6edbb9a7f58eafdd6c715", "patch": "@@ -2766,15 +2766,44 @@ match\n gfc_match_omp_flush (void)\n {\n   gfc_omp_namelist *list = NULL;\n+  gfc_omp_clauses *c = NULL;\n+  gfc_gobble_whitespace ();\n+  enum gfc_omp_memorder mo = OMP_MEMORDER_LAST;\n+  if (gfc_match_omp_eos () == MATCH_NO && gfc_peek_ascii_char () != '(')\n+    {\n+      if (gfc_match (\"acq_rel\") == MATCH_YES)\n+\tmo = OMP_MEMORDER_ACQ_REL;\n+      else if (gfc_match (\"release\") == MATCH_YES)\n+\tmo = OMP_MEMORDER_RELEASE;\n+      else if (gfc_match (\"acquire\") == MATCH_YES)\n+\tmo = OMP_MEMORDER_ACQUIRE;\n+      else\n+\t{\n+\t  gfc_error (\"Expected AQC_REL, RELEASE, or ACQUIRE at %C\");\n+\t  return MATCH_ERROR;\n+\t}\n+      c = gfc_get_omp_clauses ();\n+      c->memorder = mo;\n+    }\n   gfc_match_omp_variable_list (\" (\", &list, true);\n+  if (list && mo != OMP_MEMORDER_LAST)\n+    {\n+      gfc_error (\"List specified together with memory order clause in FLUSH \"\n+\t\t \"directive at %C\");\n+      gfc_free_omp_namelist (list);\n+      gfc_free_omp_clauses (c);\n+      return MATCH_ERROR;\n+    }\n   if (gfc_match_omp_eos () != MATCH_YES)\n     {\n       gfc_error (\"Unexpected junk after $OMP FLUSH statement at %C\");\n       gfc_free_omp_namelist (list);\n+      gfc_free_omp_clauses (c);\n       return MATCH_ERROR;\n     }\n   new_st.op = EXEC_OMP_FLUSH;\n   new_st.ext.omp_namelist = list;\n+  new_st.ext.omp_clauses = c;\n   return MATCH_YES;\n }\n "}, {"sha": "bd7e13d748e9c88ac7e5a418bfdfcb61bd8897bc", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c26d7df103197e52dcd6edbb9a7f58eafdd6c715/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c26d7df103197e52dcd6edbb9a7f58eafdd6c715/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=c26d7df103197e52dcd6edbb9a7f58eafdd6c715", "patch": "@@ -38,6 +38,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gomp-constants.h\"\n #include \"omp-general.h\"\n #include \"omp-low.h\"\n+#include \"memmodel.h\"  /* For MEMMODEL_ enums.  */\n+\n #undef GCC_DIAG_STYLE\n #define GCC_DIAG_STYLE __gcc_tdiag__\n #include \"diagnostic-core.h\"\n@@ -4785,10 +4787,30 @@ gfc_trans_oacc_combined_directive (gfc_code *code)\n }\n \n static tree\n-gfc_trans_omp_flush (void)\n+gfc_trans_omp_flush (gfc_code *code)\n {\n-  tree decl = builtin_decl_explicit (BUILT_IN_SYNC_SYNCHRONIZE);\n-  return build_call_expr_loc (input_location, decl, 0);\n+  tree call;\n+  if (!code->ext.omp_clauses\n+      || code->ext.omp_clauses->memorder == OMP_MEMORDER_LAST)\n+    {\n+      call = builtin_decl_explicit (BUILT_IN_SYNC_SYNCHRONIZE);\n+      call = build_call_expr_loc (input_location, call, 0);\n+    }\n+  else\n+    {\n+      enum memmodel mo = MEMMODEL_LAST;\n+      switch (code->ext.omp_clauses->memorder)\n+\t{\n+\tcase OMP_MEMORDER_ACQ_REL: mo = MEMMODEL_ACQ_REL; break;\n+\tcase OMP_MEMORDER_RELEASE: mo = MEMMODEL_RELEASE; break;\n+\tcase OMP_MEMORDER_ACQUIRE: mo = MEMMODEL_ACQUIRE; break;\n+\tdefault: gcc_unreachable (); break;\n+\t}\n+      call = builtin_decl_explicit (BUILT_IN_ATOMIC_THREAD_FENCE);\n+      call = build_call_expr_loc (input_location, call, 1,\n+\t\t\t\t  build_int_cst (integer_type_node, mo));\n+    }\n+  return call;\n }\n \n static tree\n@@ -6033,7 +6055,7 @@ gfc_trans_omp_directive (gfc_code *code)\n     case EXEC_OMP_DO_SIMD:\n       return gfc_trans_omp_do_simd (code, NULL, NULL, NULL_TREE);\n     case EXEC_OMP_FLUSH:\n-      return gfc_trans_omp_flush ();\n+      return gfc_trans_omp_flush (code);\n     case EXEC_OMP_MASTER:\n       return gfc_trans_omp_master (code);\n     case EXEC_OMP_ORDERED:"}, {"sha": "d0b7f9eb82d3d90dd5261f7205bba2c742a8ebce", "filename": "gcc/testsuite/gfortran.dg/gomp/flush-1.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c26d7df103197e52dcd6edbb9a7f58eafdd6c715/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fflush-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c26d7df103197e52dcd6edbb9a7f58eafdd6c715/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fflush-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fflush-1.f90?ref=c26d7df103197e52dcd6edbb9a7f58eafdd6c715", "patch": "@@ -0,0 +1,41 @@\n+! { dg-additional-options \"-fdump-tree-gimple\" }\n+! { dg-final { scan-tree-dump \"foo \\\\(4\\\\);\\[\\n\\r]*  __atomic_thread_fence \\\\(4\\\\);\\[\\n\\r]*  foo \\\\(4\\\\);\" \"gimple\" } }\n+! { dg-final { scan-tree-dump \"foo \\\\(3\\\\);\\[\\n\\r]*  __atomic_thread_fence \\\\(3\\\\);\\[\\n\\r]*  foo \\\\(3\\\\);\" \"gimple\" } }\n+! { dg-final { scan-tree-dump \"foo \\\\(2\\\\);\\[\\n\\r]*  __atomic_thread_fence \\\\(2\\\\);\\[\\n\\r]*  foo \\\\(2\\\\);\" \"gimple\" } }\n+! { dg-final { scan-tree-dump \"foo \\\\(5\\\\);\\[\\n\\r]*  __sync_synchronize \\\\(\\\\);\\[\\n\\r]*  foo \\\\(5\\\\);\" \"gimple\" } }\n+\n+module m\n+  interface\n+    subroutine foo(x)\n+      integer, value :: x\n+    end\n+  end interface\n+end module m\n+\n+subroutine f1\n+  use m\n+  call foo (4)\n+  !$omp flush acq_rel\n+  call foo (4)\n+end\n+\n+subroutine f2\n+  use m\n+  call foo (3)\n+  !$omp flush release\n+  call foo (3)\n+end\n+\n+subroutine f3\n+  use m\n+  call foo (2)\n+  !$omp flush acquire\n+  call foo (2)\n+end\n+\n+subroutine f4\n+  use m\n+  call foo (5)\n+  !$omp flush\n+  call foo (5)\n+end"}, {"sha": "685737116490701b87143485a2a5718a5f4e3051", "filename": "gcc/testsuite/gfortran.dg/gomp/flush-2.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c26d7df103197e52dcd6edbb9a7f58eafdd6c715/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fflush-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c26d7df103197e52dcd6edbb9a7f58eafdd6c715/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fflush-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fflush-2.f90?ref=c26d7df103197e52dcd6edbb9a7f58eafdd6c715", "patch": "@@ -0,0 +1,18 @@\n+module m\n+  integer :: a, b\n+end module m\n+\n+subroutine foo (void)\n+  use m\n+  !$omp flush\n+  !$omp flush (a, b)\n+  !$omp flush acquire\n+  !$omp flush release\n+  !$omp flush acq_rel\n+  !$omp flush relaxed\t\t! { dg-error \"Expected AQC_REL, RELEASE, or ACQUIRE\" }\n+  !$omp flush seq_cst\t\t! { dg-error \"Expected AQC_REL, RELEASE, or ACQUIRE\" }\n+  !$omp flush foobar\t\t! { dg-error \"Expected AQC_REL, RELEASE, or ACQUIRE\" }\n+  !$omp flush acquire (a, b)\t! { dg-error \"List specified together with memory order clause in FLUSH directive\" }\n+  !$omp flush release (a, b)\t! { dg-error \"List specified together with memory order clause in FLUSH directive\" }\n+  !$omp flush acq_rel (a, b)\t! { dg-error \"List specified together with memory order clause in FLUSH directive\" }\n+end"}]}