{"sha": "daa6fb411022376ac4f4ada96d686614ac7b8860", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFhNmZiNDExMDIyMzc2YWM0ZjRhZGE5NmQ2ODY2MTRhYzdiODg2MA==", "commit": {"author": {"name": "Roman Kennke", "email": "roman@kennke.org", "date": "2005-08-23T22:19:17Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-08-23T22:19:17Z"}, "message": "2005-08-23  Roman Kennke  <roman@kennke.org>\n\n\t* java/lang/Character.java\n\t(toChars(int)): New JDK1.5 method.\n\t(toChars(int, char[], int)): New JDK1.5 method.\n\t(charCount): New JDK1.5 method.\n\t(isSupplementaryCodePoint): New JDK1.5 method.\n\t(isValidCodePoint): New JDK1.5 method.\n\nFrom-SVN: r103413", "tree": {"sha": "6904d898a2597b555456b2e41165f5f83997e854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6904d898a2597b555456b2e41165f5f83997e854"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daa6fb411022376ac4f4ada96d686614ac7b8860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daa6fb411022376ac4f4ada96d686614ac7b8860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daa6fb411022376ac4f4ada96d686614ac7b8860", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daa6fb411022376ac4f4ada96d686614ac7b8860/comments", "author": null, "committer": null, "parents": [{"sha": "7d04db3f0fe50fef2a617af24620a28b9e2d1f25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d04db3f0fe50fef2a617af24620a28b9e2d1f25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d04db3f0fe50fef2a617af24620a28b9e2d1f25"}], "stats": {"total": 176, "additions": 175, "deletions": 1}, "files": [{"sha": "ac42734710e1646528eff0744a9d48607b2fa7e2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa6fb411022376ac4f4ada96d686614ac7b8860/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa6fb411022376ac4f4ada96d686614ac7b8860/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=daa6fb411022376ac4f4ada96d686614ac7b8860", "patch": "@@ -1,3 +1,12 @@\n+2005-08-23  Roman Kennke  <roman@kennke.org>\n+\n+\t* java/lang/Character.java\n+\t(toChars(int)): New JDK1.5 method.\n+\t(toChars(int, char[], int)): New JDK1.5 method.\n+\t(charCount): New JDK1.5 method.\n+\t(isSupplementaryCodePoint): New JDK1.5 method.\n+\t(isValidCodePoint): New JDK1.5 method.\n+\n 2005-08-23  Tom Tromey  <tromey@redhat.com>\n \n \t* aclocal.m4, Makefile.in: Rebuilt."}, {"sha": "aa29e0bd523dbdd210c492eba1c9ebcf82114d55", "filename": "libjava/java/lang/Character.java", "status": "modified", "additions": 166, "deletions": 1, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa6fb411022376ac4f4ada96d686614ac7b8860/libjava%2Fjava%2Flang%2FCharacter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa6fb411022376ac4f4ada96d686614ac7b8860/libjava%2Fjava%2Flang%2FCharacter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FCharacter.java?ref=daa6fb411022376ac4f4ada96d686614ac7b8860", "patch": "@@ -1,5 +1,5 @@\n /* java.lang.Character -- Wrapper class for char, and Unicode subsets\n-   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2002, 2005 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -1410,6 +1410,57 @@ else if (ch > b.end)\n    */\n   private static final int MIRROR_MASK = 0x40;\n \n+  /**\n+   * Min value for supplementary code point.\n+   *\n+   * @since 1.5\n+   */\n+  public static final int MIN_SUPPLEMENTARY_CODE_POINT = 0x10000;\n+\n+  /**\n+   * Min value for code point.\n+   *\n+   * @since 1.5\n+   */\n+  public static final int MIN_CODE_POINT = 0; \n+ \n+ \n+  /**\n+   * Max value for code point.\n+   *\n+   * @since 1.5\n+   */\n+  public static final int MAX_CODE_POINT = 0x010ffff;\n+\n+\n+  /**\n+   * Minimum high surrrogate code in UTF-16 encoding.\n+   *\n+   * @since 1.5\n+   */\n+  public static final char MIN_HIGH_SURROGATE = '\\ud800';\n+\n+  /**\n+   * Maximum high surrrogate code in UTF-16 encoding.\n+   *\n+   * @since 1.5\n+   */\n+  public static final char MAX_HIGH_SURROGATE = '\\udbff';\n+ \n+  /**\n+   * Minimum low surrrogate code in UTF-16 encoding.\n+   *\n+   * @since 1.5\n+   */\n+  public static final char MIN_LOW_SURROGATE = '\\udc00';\n+\n+  /**\n+   * Maximum low surrrogate code in UTF-16 encoding.\n+   *\n+   * @since 1.5\n+   */\n+  public static final char MAX_LOW_SURROGATE = '\\udfff';\n+\n   /**\n    * Grabs an attribute offset from the Unicode attribute database. The lower\n    * 5 bits are the character type, the next 2 bits are flags, and the top\n@@ -2160,4 +2211,118 @@ public int compareTo(Object o)\n   {\n     return compareTo((Character) o);\n   }\n+\n+  /**\n+   * Converts a unicode code point to a UTF-16 representation of that\n+   * code point.\n+   * \n+   * @param codePoint the unicode code point\n+   *\n+   * @return the UTF-16 representation of that code point\n+   *\n+   * @throws IllegalArgumentException if the code point is not a valid\n+   *         unicode code point\n+   *\n+   * @since 1.5\n+   */\n+  public static char[] toChars(int codePoint)\n+  {\n+    char[] result = new char[charCount(codePoint)];\n+    int ignore = toChars(codePoint, result, 0);\n+    return result;\n+  }\n+\n+  /**\n+   * Converts a unicode code point to its UTF-16 representation.\n+   *\n+   * @param codePoint the unicode code point\n+   * @param dst the target char array\n+   * @param dstIndex the start index for the target\n+   *\n+   * @return number of characters written to <code>dst</code>\n+   *\n+   * @throws IllegalArgumentException if <code>codePoint</code> is not a\n+   *         valid unicode code point\n+   * @throws NullPointerException if <code>dst</code> is <code>null</code>\n+   * @throws IndexOutOfBoundsException if <code>dstIndex</code> is not valid\n+   *         in <code>dst</code> or if the UTF-16 representation does not\n+   *         fit into <code>dst</code>\n+   *\n+   * @since 1.5\n+   */\n+  public static int toChars(int codePoint, char[] dst, int dstIndex)\n+  {\n+    if (!isValidCodePoint(codePoint))\n+      {\n+        throw new IllegalArgumentException(\"not a valid code point: \"\n+                                           + codePoint);\n+      }\n+\n+    int result;\n+    if (isSupplementaryCodePoint(codePoint))\n+      {\n+        // Write second char first to cause IndexOutOfBoundsException\n+        // immediately.\n+        dst[dstIndex + 1] = (char) ((codePoint & 0x3ff)\n+                                    + (int) MIN_LOW_SURROGATE );\n+        dst[dstIndex] = (char) ((codePoint >> 10) + (int) MIN_HIGH_SURROGATE);\n+        result = 2;\n+    }\n+    else\n+      {\n+        dst[dstIndex] = (char) codePoint;\n+        result = 1; \n+      }\n+    return result;\n+  }\n+\n+  /**\n+   * Return number of 16-bit characters required to represent the given\n+   * code point.\n+   *\n+   * @param codePoint a uncode code point\n+   *\n+   * @return 2 if codePoint >= 0x10000, 1 otherwise.\n+   *\n+   * @since 1.5\n+   */\n+  public static int charCount(int codePoint)\n+  {\n+    return \n+      (codePoint >= MIN_SUPPLEMENTARY_CODE_POINT) \n+      ? 2 \n+      : 1;\n+  }\n+\n+  /**\n+   * Determines whether the specified code point is\n+   * in the range 0x10000 .. 0x10FFFF, i.e. the character is within the Unicode\n+   * supplementary character range.\n+   *\n+   * @param codePoint a Unicode code point\n+   *\n+   * @return <code>true</code> if code point is in supplementary range\n+   *\n+   * @since 1.5\n+   */\n+  public static boolean isSupplementaryCodePoint(int codePoint)\n+  {\n+    return codePoint >= MIN_SUPPLEMENTARY_CODE_POINT\n+      && codePoint <= MAX_CODE_POINT;\n+  }\n+\n+  /**\n+   * Determines whether the specified code point is\n+   * in the range 0x0000 .. 0x10FFFF, i.e. it is a valid Unicode code point.\n+   *\n+   * @param codePoint a Unicode code point\n+   *\n+   * @return <code>true</code> if code point is valid\n+   *\n+   * @since 1.5\n+   */\n+  public static boolean isValidCodePoint(int codePoint)\n+  {\n+    return codePoint >= MIN_CODE_POINT && codePoint <= MAX_CODE_POINT;\n+  }\n } // class Character"}]}