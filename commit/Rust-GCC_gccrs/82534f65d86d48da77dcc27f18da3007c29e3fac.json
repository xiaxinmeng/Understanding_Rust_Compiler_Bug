{"sha": "82534f65d86d48da77dcc27f18da3007c29e3fac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI1MzRmNjVkODZkNDhkYTc3ZGNjMjdmMThkYTMwMDdjMjllM2ZhYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-07-29T22:47:36Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-07-29T22:47:36Z"}, "message": "i386.md (movstrict<mode>): Use register_operand predicate for operand 0.\n\n\t* config/i386/i386.md (movstrict<mode>): Use register_operand\n\tpredicate for operand 0.  Add expander condition.  Assert that\n\toperand 0 is a SUBREG RTX.\n\t(*movstrict<mode>_1): Use register_operand predicate for operand 0.\n\tUpdate operand constraints and insn condition.\n\t(zero_extend<mode>si2_and): Do not call gen_movstrict<mode>.\n\t(zero_extendqihi2_and): Do not call gen_movstrictqi.\n\t(*setcc_qi_slp): Use register_operand predicate for operand 0.\n\tUpdate operand 0 constraints.\n\t(setcc_qi_slp splitters): Use register_operand predicate for operand 0.\n\nFrom-SVN: r273891", "tree": {"sha": "66f2988eb3298820d0144790757f626ba8eaa392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66f2988eb3298820d0144790757f626ba8eaa392"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82534f65d86d48da77dcc27f18da3007c29e3fac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82534f65d86d48da77dcc27f18da3007c29e3fac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82534f65d86d48da77dcc27f18da3007c29e3fac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82534f65d86d48da77dcc27f18da3007c29e3fac/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49c432df666bdb3b680246c94735274a1b39cfc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49c432df666bdb3b680246c94735274a1b39cfc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49c432df666bdb3b680246c94735274a1b39cfc8"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "f991c703ca76438b6299c5f2c61c387acdbc490e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82534f65d86d48da77dcc27f18da3007c29e3fac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82534f65d86d48da77dcc27f18da3007c29e3fac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82534f65d86d48da77dcc27f18da3007c29e3fac", "patch": "@@ -1,3 +1,16 @@\n+2019-07-30  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (movstrict<mode>): Use register_operand\n+\tpredicate for operand 0.  Add expander condition.  Assert that\n+\toperand 0 is a SUBREG RTX.\n+\t(*movstrict<mode>_1): Use register_operand predicate for operand 0.\n+\tUpdate operand constraints and insn condition.\n+\t(zero_extend<mode>si2_and): Do not call gen_movstrict<mode>.\n+\t(zero_extendqihi2_and): Do not call gen_movstrictqi.\n+\t(*setcc_qi_slp): Use register_operand predicate for operand 0.\n+\tUpdate operand 0 constraints.\n+\t(setcc_qi_slp splitters): Use register_operand predicate for operand 0.\n+\n 2019-07-29  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* config/msp430/msp430.h (DRIVER_SELF_SPECS): Define and emit errors"}, {"sha": "e19a591fa9dcd2a64394b75cbe25dc652f5757d0", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82534f65d86d48da77dcc27f18da3007c29e3fac/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82534f65d86d48da77dcc27f18da3007c29e3fac/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=82534f65d86d48da77dcc27f18da3007c29e3fac", "patch": "@@ -2786,26 +2786,20 @@\n    (set_attr \"bdver1_decode\" \"double\")])\n \n (define_expand \"movstrict<mode>\"\n-  [(set (strict_low_part (match_operand:SWI12 0 \"nonimmediate_operand\"))\n+  [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\"))\n \t(match_operand:SWI12 1 \"general_operand\"))]\n-  \"\"\n+  \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n {\n-  if (TARGET_PARTIAL_REG_STALL && optimize_function_for_speed_p (cfun))\n+  gcc_assert (SUBREG_P (operands[0]));\n+  if (GET_MODE_CLASS (GET_MODE (SUBREG_REG (operands[0]))) != MODE_INT)\n     FAIL;\n-  if (SUBREG_P (operands[0])\n-      && GET_MODE_CLASS (GET_MODE (SUBREG_REG (operands[0]))) != MODE_INT)\n-    FAIL;\n-  /* Don't generate memory->memory moves, go through a register */\n-  if (MEM_P (operands[0]) && MEM_P (operands[1]))\n-    operands[1] = force_reg (<MODE>mode, operands[1]);\n })\n \n (define_insn \"*movstrict<mode>_1\"\n   [(set (strict_low_part\n-\t  (match_operand:SWI12 0 \"nonimmediate_operand\" \"+<r>m,<r>\"))\n-\t(match_operand:SWI12 1 \"general_operand\" \"<r>n,m\"))]\n-  \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+\t  (match_operand:SWI12 0 \"register_operand\" \"+<r>\"))\n+\t(match_operand:SWI12 1 \"general_operand\" \"<r>mn\"))]\n+  \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n   \"mov{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"imov\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -4011,8 +4005,10 @@\n       ix86_expand_clear (operands[0]);\n \n       gcc_assert (!TARGET_PARTIAL_REG_STALL);\n-      emit_insn (gen_movstrict<mode>\n-\t\t  (gen_lowpart (<MODE>mode, operands[0]), operands[1]));\n+      emit_insn (gen_rtx_SET\n+      \t\t (gen_rtx_STRICT_LOW_PART\n+\t\t  (VOIDmode, gen_lowpart (<MODE>mode, operands[0])),\n+\t\t  operands[1]));\n       DONE;\n     }\n \n@@ -4063,8 +4059,10 @@\n       ix86_expand_clear (operands[0]);\n \n       gcc_assert (!TARGET_PARTIAL_REG_STALL);\n-      emit_insn (gen_movstrictqi\n-\t\t  (gen_lowpart (QImode, operands[0]), operands[1]));\n+      emit_insn (gen_rtx_SET\n+\t\t (gen_rtx_STRICT_LOW_PART\n+\t\t  (VOIDmode, gen_lowpart (QImode, operands[0])),\n+\t\t  operands[1]));\n       DONE;\n     }\n \n@@ -11835,7 +11833,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*setcc_qi_slp\"\n-  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n+  [(set (strict_low_part (match_operand:QI 0 \"register_operand\" \"+q\"))\n \t(match_operator:QI 1 \"ix86_comparison_operator\"\n \t  [(reg FLAGS_REG) (const_int 0)]))]\n   \"\"\n@@ -11864,7 +11862,7 @@\n })\n \n (define_split\n-  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\"))\n+  [(set (strict_low_part (match_operand:QI 0 \"register_operand\"))\n \t(ne:QI (match_operator 1 \"ix86_comparison_operator\"\n \t         [(reg FLAGS_REG) (const_int 0)])\n \t    (const_int 0)))]\n@@ -11896,7 +11894,7 @@\n })\n \n (define_split\n-  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\"))\n+  [(set (strict_low_part (match_operand:QI 0 \"register_operand\"))\n \t(eq:QI (match_operator 1 \"ix86_comparison_operator\"\n \t         [(reg FLAGS_REG) (const_int 0)])\n \t    (const_int 0)))]"}]}