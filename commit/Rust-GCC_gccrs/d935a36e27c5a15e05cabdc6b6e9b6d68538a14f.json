{"sha": "d935a36e27c5a15e05cabdc6b6e9b6d68538a14f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkzNWEzNmUyN2M1YTE1ZTA1Y2FiZGM2YjZlOWI2ZDY4NTM4YTE0Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-04-29T15:24:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-04-29T15:24:56Z"}, "message": "[multiple changes]\n\n2004-04-29  Ed Schonberg  <schonberg@gnat.com>\n\n\t* checks.adb (Enable_Range_Check): If the prefix of an index component\n\tis an access to an unconstrained array, perform check unconditionally.\n\n2004-04-29  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n\n\t* decl.c (gnat_to_gnu_field): Also call make_packable_type if\n\tComponent_Clause.\n\n2004-04-29  Olivier Hainque  <hainque@act-europe.fr>\n\n\t* init.c (__gnat_install_handler, __gnat_error_handler): Remove\n\talternate stack setting. There was no support for the tasking cases\n\tand the changes eventually caused a number of side-effect failures in\n\tthe non-tasking case too.\n\n2004-04-29  Eric Botcazou  <ebotcazou@act-europe.fr>\n\n\tlang-specs.h: Redirect output to /dev/null if -gnatc or -gnatz or\n\t-gnats is passed.\n\n2004-04-29  Vincent Celier  <celier@gnat.com>\n\n\t* make.adb (Gnatmake): Increase max size of argument array for\n\tgnatbind for the potential addition of -F.\n\tIf there are Stand-Alone Library projects, invoke gnatbind with -F to\n\tbe sure that elaboration flags will be checked.\n\n\t* switch-c.adb: Correct call to Scan_Pos for -gnateI\n\n2004-04-29  Thomas Quinot  <quinot@act-europe.fr>\n\n\t* sem_warn.adb (Check_References): Move '<access-variable> may be\n\tnull' warning out of under Warn_On_No_Value_Assigned.\n\n2004-04-29  Ed Falis  <falis@gnat.com>\n\n\t* gnat_ugn.texi: Fixed texi error\n\n2004-04-29  Robert Dewar  <dewar@gnat.com>\n\n\t* sem_ch4.adb (Remove_Abstract_Operations): Unconditionally remove\n\tabstract operations if they come from predefined files.\n\n\t* gnat_rm.texi: Fix bad doc for pragma Elaboration_Checks (should be\n\tDynamic, not RM).\n\n\t* s-addope.adb: Correct obvious error in mod function\n\nFrom-SVN: r81289", "tree": {"sha": "32aad4e68b4052f7ce71c58540a2b80a90d67674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32aad4e68b4052f7ce71c58540a2b80a90d67674"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/comments", "author": null, "committer": null, "parents": [{"sha": "56141a6ad7f965b156427f25ab45bd1093b0b565", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56141a6ad7f965b156427f25ab45bd1093b0b565", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56141a6ad7f965b156427f25ab45bd1093b0b565"}], "stats": {"total": 205, "additions": 118, "deletions": 87}, "files": [{"sha": "5daf8d435c005438ee43b2059981692650ce72ba", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d935a36e27c5a15e05cabdc6b6e9b6d68538a14f", "patch": "@@ -1,3 +1,61 @@\n+2004-04-29  Ed Schonberg  <schonberg@gnat.com>\n+\n+\t* checks.adb (Enable_Range_Check): If the prefix of an index component\n+\tis an access to an unconstrained array, perform check unconditionally.\n+\n+2004-04-29  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* decl.c (gnat_to_gnu_field): Also call make_packable_type if\n+\tComponent_Clause.\n+\n+2004-04-29  Olivier Hainque  <hainque@act-europe.fr>\n+\n+\t* init.c (__gnat_install_handler, __gnat_error_handler): Remove\n+\talternate stack setting. There was no support for the tasking cases\n+\tand the changes eventually caused a number of side-effect failures in\n+\tthe non-tasking case too.\n+\n+2004-04-29  Eric Botcazou  <ebotcazou@act-europe.fr>\n+\n+\tlang-specs.h: Redirect output to /dev/null if -gnatc or -gnatz or\n+\t-gnats is passed.\n+\n+2004-04-29  Vincent Celier  <celier@gnat.com>\n+\n+\t* make.adb (Gnatmake): Increase max size of argument array for\n+\tgnatbind for the potential addition of -F.\n+\tIf there are Stand-Alone Library projects, invoke gnatbind with -F to\n+\tbe sure that elaboration flags will be checked.\n+\n+\t* switch-c.adb: Correct call to Scan_Pos for -gnateI\n+\n+2004-04-29  Thomas Quinot  <quinot@act-europe.fr>\n+\n+\t* sem_warn.adb (Check_References): Move '<access-variable> may be\n+\tnull' warning out of under Warn_On_No_Value_Assigned.\n+\n+2004-04-29  Ed Falis  <falis@gnat.com>\n+\n+\t* gnat_ugn.texi: Fixed texi error\n+\n+2004-04-29  Robert Dewar  <dewar@gnat.com>\n+\n+\t* sem_ch4.adb (Remove_Abstract_Operations): Unconditionally remove\n+\tabstract operations if they come from predefined files.\n+\n+\t* gnat_rm.texi: Fix bad doc for pragma Elaboration_Checks (should be\n+\tDynamic, not RM).\n+\n+\t* s-addope.adb: Correct obvious error in mod function\n+\n+2004-04-28  Andrew W. Reynolds  <awreynolds@mac.com>\n+\n+\t* Makefile.in: Add target pairs for powerpc darwin*\n+\ttasking support.\n+\n+\t* a-intnam-darwin.ads, s-osinte-darwin.adb,\n+\ts-osinte-darwin.ads, system-darwin-ppc.ads: New files.\n+\n 2004-04-28  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* Makefile.in: Add target macro definitions for s390*-linux*."}, {"sha": "059730067e06257207a2e7187c211e32eef7f217", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=d935a36e27c5a15e05cabdc6b6e9b6d68538a14f", "patch": "@@ -3379,6 +3379,16 @@ package body Checks is\n \n             if Is_Access_Type (Atyp) then\n                Atyp := Designated_Type (Atyp);\n+\n+               --  If the prefix is an access to an unconstrained array,\n+               --  perform check unconditionally: it depends on the bounds\n+               --  of an object and we cannot currently recognize whether\n+               --  the test may be redundant.\n+\n+               if not Is_Constrained (Atyp) then\n+                  Set_Do_Range_Check (N, True);\n+                  return;\n+               end if;\n             end if;\n \n             Indx := First_Index (Atyp);"}, {"sha": "92e1342feb93ed69e78cd439eee1dc150cd024ce", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=d935a36e27c5a15e05cabdc6b6e9b6d68538a14f", "patch": "@@ -4998,19 +4998,20 @@ gnat_to_gnu_field (Entity_Id gnat_field,\n       && TYPE_LEFT_JUSTIFIED_MODULAR_P (gnu_field_type))\n     gnu_field_type = TREE_TYPE (TYPE_FIELDS (gnu_field_type));\n \n-  /* If we are packing this record or we have a specified size that's\n-     smaller than that of the field type and the field type is also a record\n-     that's BLKmode and with a small constant size, see if we can get a\n-     better form of the type that allows more packing.  If we can, show\n-     a size was specified for it if there wasn't one so we know to\n+  /* If we are packing this record, have a specified size that's smaller than\n+     that of the field type, or a position is specified, and the field type\n+     is also a record that's BLKmode and with a small constant size, see if\n+     we can get a better form of the type that allows more packing.  If we\n+     can, show a size was specified for it if there wasn't one so we know to\n      make this a bitfield and avoid making things wider.  */\n   if (TREE_CODE (gnu_field_type) == RECORD_TYPE\n       && TYPE_MODE (gnu_field_type) == BLKmode\n       && host_integerp (TYPE_SIZE (gnu_field_type), 1)\n       && compare_tree_int (TYPE_SIZE (gnu_field_type), BIGGEST_ALIGNMENT) <= 0\n       && (packed\n \t  || (gnu_size != 0 && tree_int_cst_lt (gnu_size,\n-\t\t\t\t\t\tTYPE_SIZE (gnu_field_type)))))\n+\t\t\t\t\t\tTYPE_SIZE (gnu_field_type)))\n+\t  || Present (Component_Clause (gnat_field))))\n     {\n       gnu_field_type = make_packable_type (gnu_field_type);\n "}, {"sha": "fad86e184bc0ea694a584e3734a63e8db2982578", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=d935a36e27c5a15e05cabdc6b6e9b6d68538a14f", "patch": "@@ -1308,16 +1308,17 @@ debug procedures in the middle of declarations.\n Syntax:\n \n @smallexample @c ada\n-pragma Elaboration_Checks (RM | Static);\n+pragma Elaboration_Checks (Dynamic | Static);\n @end smallexample\n \n @noindent\n This is a configuration pragma that provides control over the\n elaboration model used by the compilation affected by the\n-pragma.  If the parameter is RM, then the dynamic elaboration\n+pragma.  If the parameter is @code{Dynamic},\n+then the dynamic elaboration\n model described in the Ada Reference Manual is used, as though\n the @code{-gnatE} switch had been specified on the command\n-line.  If the parameter is Static, then the default GNAT static\n+line.  If the parameter is @code{Static}, then the default GNAT static\n model is used.  This configuration pragma overrides the setting\n of the command line.  For full details on the elaboration models\n used by the GNAT compiler, see section ``Elaboration Order"}, {"sha": "2b908fb2e8b55789eea4b4f19e87df2dc292c6d3", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=d935a36e27c5a15e05cabdc6b6e9b6d68538a14f", "patch": "@@ -6935,7 +6935,7 @@ See also the packages @code{GNAT.Traceback} and\n @ifclear vms\n Note that on x86 ports, you must not use @option{-fomit-frame-pointer}\n @code{gcc} option.\n-@end ifclear vms\n+@end ifclear\n \n @item ^-F^/FORCE_ELABS_FLAGS^\n @cindex @option{^-F^/FORCE_ELABS_FLAGS^} (@command{gnatbind})"}, {"sha": "fd25d0d7b0d09971c3a48a7676db4e003b42d257", "filename": "gcc/ada/init.c", "status": "modified", "additions": 1, "deletions": 64, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=d935a36e27c5a15e05cabdc6b6e9b6d68538a14f", "patch": "@@ -386,7 +386,6 @@ __gnat_initialize (void)\n    exclude this case in the above test.  */\n \n #include <signal.h>\n-#include <setjmp.h>\n #include <sys/siginfo.h>\n \n static void __gnat_error_handler (int, siginfo_t *, struct sigcontext *);\n@@ -404,7 +403,6 @@ __gnat_error_handler (int sig, siginfo_t *sip, struct sigcontext *context)\n   static int recurse = 0;\n   struct sigcontext *mstate;\n   const char *msg;\n-  jmp_buf handler_jmpbuf;\n \n   /* If this was an explicit signal from a \"kill\", just resignal it.  */\n   if (SI_FROMUSER (sip))\n@@ -414,43 +412,6 @@ __gnat_error_handler (int sig, siginfo_t *sip, struct sigcontext *context)\n     }\n \n   /* Otherwise, treat it as something we handle.  */\n-\n-  /* We are now going to raise the exception corresponding to the signal we\n-     caught, which may eventually end up resuming the application code if the\n-     exception is handled.\n-\n-     When the exception is handled, merely arranging for the *exception*\n-     handler's context (stack pointer, program counter, other registers, ...)\n-     to be installed is *not* enough to let the kernel think we've left the\n-     *signal* handler.  This has annoying implications if an alternate stack\n-     has been setup for this *signal* handler, because the kernel thinks we\n-     are still running on that alternate stack even after the jump, which\n-     causes trouble at least as soon as another signal is raised.\n-\n-     We deal with this by forcing a \"local\" longjmp within the signal handler\n-     below, forcing the \"on alternate stack\" indication to be reset (kernel\n-     wise) on the way.  If no alternate stack has been setup, this should be a\n-     neutral operation. Otherwise, we will be in a delicate situation for a\n-     short while because we are going to run the exception propagation code\n-     within the alternate stack area (that is, with the stack pointer inside\n-     the alternate stack bounds), but with the corresponding flag off from the\n-     kernel's standpoint.  We expect this to be ok as long as the propagation\n-     code does not trigger a signal itself, which is expected.\n-\n-     ??? A better approach would be to at least delay this operation until the\n-     last second, that is, until just before we jump to the exception handler,\n-     if any.  */\n-\n-  if (setjmp (handler_jmpbuf) == 0)\n-    {\n-#define JB_ONSIGSTK 0\n-\n-      /* Arrange for the \"on alternate stack\" flag to be reset.  See the\n-\t comments around \"jmp_buf offsets\" in /usr/include/setjmp.h.  */\n-      handler_jmpbuf [JB_ONSIGSTK] = 0;\n-      longjmp (handler_jmpbuf, 1);\n-    }\n-\n   switch (sig)\n     {\n     case SIGSEGV:\n@@ -510,36 +471,12 @@ __gnat_install_handler (void)\n {\n   struct sigaction act;\n \n-  /* stack-checking on this platform is performed by the back-end and conforms\n-     to what the ABI *mandates* (DEC OSF/1 Calling standard for AXP systems,\n-     chapter 6: Stack Limits in Multihtreaded Execution Environments).  This\n-     does not include a \"stack reserve\" region, so nothing guarantees that\n-     enough room remains on the current stack to propagate an exception when\n-     a stack-overflow is signaled.  We deal with this by requesting the use of\n-     an alternate stack region for signal handlers.\n-\n-     ??? The actual use of this alternate region depends on the act.sa_flags\n-     including SA_ONSTACK below.  Care should be taken to update s-intman if\n-     we want this to happen for tasks also.  */\n-\n-  static char sig_stack [8*1024];\n-  /* 8K is a mininum to be able to propagate an exception using the GCC/ZCX\n-     scheme.  */\n-\n-  struct sigaltstack ss;\n-\n-  ss.ss_sp = (void *) sig_stack;\n-  ss.ss_size = sizeof (sig_stack);\n-  ss.ss_flags = 0;\n-\n-  sigaltstack (&ss, 0);\n-\n   /* Setup signal handler to map synchronous signals to appropriate\n      exceptions. Make sure that the handler isn't interrupted by another\n      signal that might cause a scheduling event! */\n \n   act.sa_handler = (void (*) (int)) __gnat_error_handler;\n-  act.sa_flags = SA_ONSTACK | SA_RESTART | SA_NODEFER | SA_SIGINFO;\n+  act.sa_flags = SA_RESTART | SA_NODEFER | SA_SIGINFO;\n   sigemptyset (&act.sa_mask);\n \n   /* Do not install handlers if interrupt state is \"System\" */"}, {"sha": "46a862a7d59d6198a82137810860204f8efb9e72", "filename": "gcc/ada/lang-specs.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flang-specs.h?ref=d935a36e27c5a15e05cabdc6b6e9b6d68538a14f", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *           Copyright (C) 1992-2003 Free Software Foundation, Inc.         *\n+ *           Copyright (C) 1992-2004 Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -40,4 +40,5 @@\n     %{g*} %{O*} %{W*} %{w} %{p} %{pg:-p} %{m*} %{a} %{f*} %{d*}\\\n     %{!S:%{o*:%w%*-gnatO}} \\\n     %i %{S:%W{o*}%{!o*:-o %b.s}} \\\n+    %{!S:%{gnatc*|gnatz*|gnats*: -o %j}} \\\n     %{!gnatc*:%{!gnatz*:%{!gnats*:%(invoke_as)}}}\", 0, 0, 0},"}, {"sha": "149c1fc41127a822cca4fe39dc2ec0eaf8371cb9", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=d935a36e27c5a15e05cabdc6b6e9b6d68538a14f", "patch": "@@ -344,6 +344,7 @@ package body Make is\n    --  These flags are reset to True for each invokation of procedure Gnatmake.\n \n    Shared_String : aliased String := \"-shared\";\n+   Force_Elab_Flags_String : aliased String := \"-F\";\n \n    No_Shared_Switch  : aliased Argument_List := (1 .. 0 => null);\n    Shared_Switch     : aliased Argument_List := (1 => Shared_String'Access);\n@@ -3323,6 +3324,8 @@ package body Make is\n       --  The current working directory, used to modify some relative path\n       --  switches on the command line when a project file is used.\n \n+      There_Are_Stand_Alone_Libraries : Boolean := False;\n+\n    begin\n       Gnatmake_Called := True;\n \n@@ -4428,6 +4431,10 @@ package body Make is\n \n                      for Proj1 in Projects.First .. Projects.Last loop\n \n+                        if Projects.Table (Proj1).Standalone_Library then\n+                           There_Are_Stand_Alone_Libraries := True;\n+                        end if;\n+\n                         if Projects.Table (Proj1).Library\n                           and then not Projects.Table (Proj1).Flag1\n                         then\n@@ -4643,7 +4650,7 @@ package body Make is\n          if Do_Bind_Step then\n             Bind_Step : declare\n                Args : Argument_List\n-                        (Binder_Switches.First .. Binder_Switches.Last + 1);\n+                        (Binder_Switches.First .. Binder_Switches.Last + 2);\n                --  The arguments for the invocation of gnatbind\n \n                Last_Arg : Natural := Binder_Switches.Last;\n@@ -4704,6 +4711,11 @@ package body Make is\n                   Args (J) := Binder_Switches.Table (J);\n                end loop;\n \n+               if There_Are_Stand_Alone_Libraries then\n+                  Last_Arg := Last_Arg + 1;\n+                  Args (Last_Arg) := Force_Elab_Flags_String'Access;\n+               end if;\n+\n                if Main_Project /= No_Project then\n \n                   --  Put all the source directories in ADA_INCLUDE_PATH,"}, {"sha": "2b360f1c96fad578ede362713de5295989c6f628", "filename": "gcc/ada/s-addope.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Fs-addope.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Fs-addope.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-addope.adb?ref=d935a36e27c5a15e05cabdc6b6e9b6d68538a14f", "patch": "@@ -81,7 +81,7 @@ package body System.Address_Operations is\n \n    function ModA (Left, Right : Address) return Address is\n    begin\n-      return A (I (Left) and I (Right));\n+      return A (I (Left) mod I (Right));\n    end ModA;\n \n    ---------"}, {"sha": "42ebaef27861bbf00410d823442d3e551d9b7917", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=d935a36e27c5a15e05cabdc6b6e9b6d68538a14f", "patch": "@@ -30,7 +30,9 @@ with Debug;    use Debug;\n with Einfo;    use Einfo;\n with Errout;   use Errout;\n with Exp_Util; use Exp_Util;\n+with Fname;    use Fname;\n with Itypes;   use Itypes;\n+with Lib;      use Lib;\n with Lib.Xref; use Lib.Xref;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n@@ -4344,22 +4346,32 @@ package body Sem_Ch4 is\n    --------------------------------\n \n    procedure Remove_Abstract_Operations (N : Node_Id) is\n-      I               : Interp_Index;\n-      It              : Interp;\n-      Abstract_Op     : Entity_Id := Empty;\n+      I           : Interp_Index;\n+      It          : Interp;\n+      Abstract_Op : Entity_Id := Empty;\n \n       --  AI-310: If overloaded, remove abstract non-dispatching\n-      --  operations.\n+      --  operations. We activate this if either extensions are\n+      --  enabled, or if the abstract operation in question comes\n+      --  from a predefined file. This latter test allows us to\n+      --  use abstract to make operations invisible to users. In\n+      --  particular, if type Address is non-private and abstract\n+      --  subprograms are used to hide its operators, they will be\n+      --  truly hidden.\n \n    begin\n-      if Extensions_Allowed\n-        and then Is_Overloaded (N)\n-      then\n+      if Is_Overloaded (N) then\n          Get_First_Interp (N, I, It);\n+\n          while Present (It.Nam) loop\n             if not Is_Type (It.Nam)\n               and then Is_Abstract (It.Nam)\n               and then not Is_Dispatching_Operation (It.Nam)\n+              and then\n+                (Extensions_Allowed\n+                   or else Is_Predefined_File_Name\n+                             (Unit_File_Name (Get_Source_Unit (It.Nam))))\n+\n             then\n                Abstract_Op := It.Nam;\n                Remove_Interp (I);"}, {"sha": "970213e7905783d98d3b0e71c9f197ef3ce4f684", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=d935a36e27c5a15e05cabdc6b6e9b6d68538a14f", "patch": "@@ -384,8 +384,7 @@ package body Sem_Warn is\n                then\n                   null;\n \n-               elsif Warn_On_No_Value_Assigned\n-                 and then Present (UR)\n+               elsif Present (UR)\n                  and then Is_Access_Type (Etype (E1))\n                then\n "}, {"sha": "a378f209d9bd6a255dde6b02bbf0cdde37e06c5e", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d935a36e27c5a15e05cabdc6b6e9b6d68538a14f/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=d935a36e27c5a15e05cabdc6b6e9b6d68538a14f", "patch": "@@ -386,7 +386,7 @@ package body Switch.C is\n \n                   when 'I' =>\n                      Ptr := Ptr + 1;\n-                     Scan_Pos (Switch_Chars, 999, Ptr, Multiple_Unit_Index);\n+                     Scan_Pos (Switch_Chars, Max, Ptr, Multiple_Unit_Index);\n \n                   --  -gnatem (mapping file)\n "}]}