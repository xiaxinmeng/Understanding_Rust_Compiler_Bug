{"sha": "a165040e11e340f6b397104f23717ef398408e67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE2NTA0MGUxMWUzNDBmNmIzOTcxMDRmMjM3MTdlZjM5ODQwOGU2Nw==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde@tbsaunde.org", "date": "2021-06-07T00:13:38Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@tbsaunde.org", "date": "2021-06-17T08:43:27Z"}, "message": "return auto_vec from get_loop_hot_path\n\nThis ensures callers take ownership of the returned vector.\n\nSigned-off-by: Trevor Saunders <tbsaunde@tbsaunde.org>\n\ngcc/ChangeLog:\n\n\t* cfgloop.h (get_loop_hot_path): Return auto_vec<basic_block>.\n\t* cfgloopanal.c (get_loop_hot_path): Likewise.\n\t* tree-ssa-loop-ivcanon.c (tree_estimate_loop_size): Likewise.", "tree": {"sha": "06fc140b824f43bd1413ecc5d7cd175e056fa9b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06fc140b824f43bd1413ecc5d7cd175e056fa9b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a165040e11e340f6b397104f23717ef398408e67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a165040e11e340f6b397104f23717ef398408e67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a165040e11e340f6b397104f23717ef398408e67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a165040e11e340f6b397104f23717ef398408e67/comments", "author": {"login": "tbsaunde", "id": 349840, "node_id": "MDQ6VXNlcjM0OTg0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/349840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbsaunde", "html_url": "https://github.com/tbsaunde", "followers_url": "https://api.github.com/users/tbsaunde/followers", "following_url": "https://api.github.com/users/tbsaunde/following{/other_user}", "gists_url": "https://api.github.com/users/tbsaunde/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbsaunde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbsaunde/subscriptions", "organizations_url": "https://api.github.com/users/tbsaunde/orgs", "repos_url": "https://api.github.com/users/tbsaunde/repos", "events_url": "https://api.github.com/users/tbsaunde/events{/privacy}", "received_events_url": "https://api.github.com/users/tbsaunde/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbsaunde", "id": 349840, "node_id": "MDQ6VXNlcjM0OTg0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/349840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbsaunde", "html_url": "https://github.com/tbsaunde", "followers_url": "https://api.github.com/users/tbsaunde/followers", "following_url": "https://api.github.com/users/tbsaunde/following{/other_user}", "gists_url": "https://api.github.com/users/tbsaunde/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbsaunde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbsaunde/subscriptions", "organizations_url": "https://api.github.com/users/tbsaunde/orgs", "repos_url": "https://api.github.com/users/tbsaunde/repos", "events_url": "https://api.github.com/users/tbsaunde/events{/privacy}", "received_events_url": "https://api.github.com/users/tbsaunde/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "265af872a1f8d7ffda2c4056d1d80a3ec4fc8650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265af872a1f8d7ffda2c4056d1d80a3ec4fc8650", "html_url": "https://github.com/Rust-GCC/gccrs/commit/265af872a1f8d7ffda2c4056d1d80a3ec4fc8650"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "5e699276c8883638e2540b598f9f7809b3fa3b15", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a165040e11e340f6b397104f23717ef398408e67/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a165040e11e340f6b397104f23717ef398408e67/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=a165040e11e340f6b397104f23717ef398408e67", "patch": "@@ -840,7 +840,7 @@ enum\n \n extern void doloop_optimize_loops (void);\n extern void move_loop_invariants (void);\n-extern vec<basic_block> get_loop_hot_path (const class loop *loop);\n+extern auto_vec<basic_block> get_loop_hot_path (const class loop *loop);\n \n /* Returns the outermost loop of the loop nest that contains LOOP.*/\n static inline class loop *"}, {"sha": "fdd8d3f43feb5f1f695a1b96c01571f87dd5a5fe", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a165040e11e340f6b397104f23717ef398408e67/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a165040e11e340f6b397104f23717ef398408e67/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=a165040e11e340f6b397104f23717ef398408e67", "patch": "@@ -500,7 +500,7 @@ single_likely_exit (class loop *loop, vec<edge> exits)\n    order against direction of edges from latch.  Specially, if\n    header != latch, latch is the 1-st block.  */\n \n-vec<basic_block>\n+auto_vec<basic_block>\n get_loop_hot_path (const class loop *loop)\n {\n   basic_block bb = loop->header;"}, {"sha": "b1971f83544db5fccaa55264d0c54ec2d27c9196", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a165040e11e340f6b397104f23717ef398408e67/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a165040e11e340f6b397104f23717ef398408e67/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=a165040e11e340f6b397104f23717ef398408e67", "patch": "@@ -218,7 +218,7 @@ tree_estimate_loop_size (class loop *loop, edge exit, edge edge_to_cancel,\n   gimple_stmt_iterator gsi;\n   unsigned int i;\n   bool after_exit;\n-  vec<basic_block> path = get_loop_hot_path (loop);\n+  auto_vec<basic_block> path = get_loop_hot_path (loop);\n \n   size->overall = 0;\n   size->eliminated_by_peeling = 0;\n@@ -342,7 +342,6 @@ tree_estimate_loop_size (class loop *loop, edge exit, edge edge_to_cancel,\n \t      - size->last_iteration_eliminated_by_peeling) > upper_bound)\n \t    {\n               free (body);\n-\t      path.release ();\n \t      return true;\n \t    }\n \t}\n@@ -379,7 +378,7 @@ tree_estimate_loop_size (class loop *loop, edge exit, edge edge_to_cancel,\n \t    size->num_branches_on_hot_path++;\n \t}\n     }\n-  path.release ();\n+\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"size: %i-%i, last_iteration: %i-%i\\n\", size->overall,\n     \t     size->eliminated_by_peeling, size->last_iteration,"}]}