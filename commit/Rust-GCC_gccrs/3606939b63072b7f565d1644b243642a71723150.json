{"sha": "3606939b63072b7f565d1644b243642a71723150", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYwNjkzOWI2MzA3MmI3ZjU2NWQxNjQ0YjI0MzY0MmE3MTcyMzE1MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-12-17T17:23:08Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-04-29T08:00:49Z"}, "message": "[Ada] Tree inconsistency between -O0 and -O1\n\ngcc/ada/\n\n\t* exp_ch5.adb (Expand_N_If_Statement): Only perform the\n\tsimplification on return True/False for internal nodes when\n\t-fpreserve-control-flow is not set.", "tree": {"sha": "2afb45e0659bdb751a1ea77c2b9eae97afe2ed20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2afb45e0659bdb751a1ea77c2b9eae97afe2ed20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3606939b63072b7f565d1644b243642a71723150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3606939b63072b7f565d1644b243642a71723150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3606939b63072b7f565d1644b243642a71723150", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3606939b63072b7f565d1644b243642a71723150/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42add8097cba0fa15bb3ee78f322f9f5b114280a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42add8097cba0fa15bb3ee78f322f9f5b114280a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42add8097cba0fa15bb3ee78f322f9f5b114280a"}], "stats": {"total": 92, "additions": 44, "deletions": 48}, "files": [{"sha": "dbccf73fef418eacacb2c982bab7d71cf92ce2b4", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 44, "deletions": 48, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3606939b63072b7f565d1644b243642a71723150/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3606939b63072b7f565d1644b243642a71723150/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=3606939b63072b7f565d1644b243642a71723150", "patch": "@@ -3788,62 +3788,58 @@ package body Exp_Ch5 is\n \n       --     return not (expression);\n \n-      --  Only do these optimizations if we are at least at -O1 level and\n-      --  do not do them if control flow optimizations are suppressed.\n+      --  Do these optimizations only for internally generated code and only\n+      --  when -fpreserve-control-flow isn't set, to preserve the original\n+      --  source control flow.\n \n-      if Optimization_Level > 0\n+      if not Comes_From_Source (N)\n         and then not Opt.Suppress_Control_Flow_Optimizations\n+        and then Nkind (N) = N_If_Statement\n+        and then No (Elsif_Parts (N))\n+        and then Present (Else_Statements (N))\n+        and then List_Length (Then_Statements (N)) = 1\n+        and then List_Length (Else_Statements (N)) = 1\n       then\n-         if Nkind (N) = N_If_Statement\n-           and then No (Elsif_Parts (N))\n-           and then Present (Else_Statements (N))\n-           and then List_Length (Then_Statements (N)) = 1\n-           and then List_Length (Else_Statements (N)) = 1\n-         then\n-            declare\n-               Then_Stm : constant Node_Id := First (Then_Statements (N));\n-               Else_Stm : constant Node_Id := First (Else_Statements (N));\n+         declare\n+            Then_Stm : constant Node_Id := First (Then_Statements (N));\n+            Else_Stm : constant Node_Id := First (Else_Statements (N));\n \n-            begin\n-               if Nkind (Then_Stm) = N_Simple_Return_Statement\n+            Then_Expr : Node_Id;\n+            Else_Expr : Node_Id;\n+\n+         begin\n+            if Nkind (Then_Stm) = N_Simple_Return_Statement\n+                 and then\n+               Nkind (Else_Stm) = N_Simple_Return_Statement\n+            then\n+               Then_Expr := Expression (Then_Stm);\n+               Else_Expr := Expression (Else_Stm);\n+\n+               if Nkind (Then_Expr) in N_Expanded_Name | N_Identifier\n                     and then\n-                  Nkind (Else_Stm) = N_Simple_Return_Statement\n+                  Nkind (Else_Expr) in N_Expanded_Name | N_Identifier\n                then\n-                  declare\n-                     Then_Expr : constant Node_Id := Expression (Then_Stm);\n-                     Else_Expr : constant Node_Id := Expression (Else_Stm);\n+                  if Entity (Then_Expr) = Standard_True\n+                    and then Entity (Else_Expr) = Standard_False\n+                  then\n+                     Rewrite (N,\n+                       Make_Simple_Return_Statement (Loc,\n+                         Expression => Relocate_Node (Condition (N))));\n+                     Analyze (N);\n \n-                  begin\n-                     if Nkind (Then_Expr) in N_Expanded_Name | N_Identifier\n-                          and then\n-                        Nkind (Else_Expr) in N_Expanded_Name | N_Identifier\n-                     then\n-                        if Entity (Then_Expr) = Standard_True\n-                          and then Entity (Else_Expr) = Standard_False\n-                        then\n-                           Rewrite (N,\n-                             Make_Simple_Return_Statement (Loc,\n-                               Expression => Relocate_Node (Condition (N))));\n-                           Analyze (N);\n-                           return;\n-\n-                        elsif Entity (Then_Expr) = Standard_False\n-                          and then Entity (Else_Expr) = Standard_True\n-                        then\n-                           Rewrite (N,\n-                             Make_Simple_Return_Statement (Loc,\n-                               Expression =>\n-                                 Make_Op_Not (Loc,\n-                                   Right_Opnd =>\n-                                     Relocate_Node (Condition (N)))));\n-                           Analyze (N);\n-                           return;\n-                        end if;\n-                     end if;\n-                  end;\n+                  elsif Entity (Then_Expr) = Standard_False\n+                    and then Entity (Else_Expr) = Standard_True\n+                  then\n+                     Rewrite (N,\n+                       Make_Simple_Return_Statement (Loc,\n+                         Expression =>\n+                           Make_Op_Not (Loc,\n+                             Right_Opnd => Relocate_Node (Condition (N)))));\n+                     Analyze (N);\n+                  end if;\n                end if;\n-            end;\n-         end if;\n+            end if;\n+         end;\n       end if;\n    end Expand_N_If_Statement;\n "}]}