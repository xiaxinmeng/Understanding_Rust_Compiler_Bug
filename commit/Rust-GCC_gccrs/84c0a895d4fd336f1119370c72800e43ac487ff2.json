{"sha": "84c0a895d4fd336f1119370c72800e43ac487ff2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRjMGE4OTVkNGZkMzM2ZjExMTkzNzBjNzI4MDBlNDNhYzQ4N2ZmMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:26:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:26:20Z"}, "message": "[multiple changes]\n\n2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Check_Return_Subtype_Indication): Reject a return\n\tsubtype indication in an extended return statement when the\n\treturn value is an ancestor of the return type of the function,\n\tand that return type is a null record extension.\n\n2014-07-29  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch13.adb (Rep_Item_Too_Late): Specialize/clarify error\n\tmessage produced for the case of a type-related representation\n\titem that is made illegal by 13.10(1).\n\t* gnat_rm.texi (Scalar_Storage_Order): Minor change in\n\tdocumentation.\n\nFrom-SVN: r213173", "tree": {"sha": "ace0763eacf78c09295e90e44f0533b58c0af195", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ace0763eacf78c09295e90e44f0533b58c0af195"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84c0a895d4fd336f1119370c72800e43ac487ff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c0a895d4fd336f1119370c72800e43ac487ff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84c0a895d4fd336f1119370c72800e43ac487ff2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c0a895d4fd336f1119370c72800e43ac487ff2/comments", "author": null, "committer": null, "parents": [{"sha": "7a2c22774192312c94ad7809290aab6da33b40d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a2c22774192312c94ad7809290aab6da33b40d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a2c22774192312c94ad7809290aab6da33b40d7"}], "stats": {"total": 88, "additions": 58, "deletions": 30}, "files": [{"sha": "1b7701c75f2d1af170ced9fc309e63426a95a4bd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c0a895d4fd336f1119370c72800e43ac487ff2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c0a895d4fd336f1119370c72800e43ac487ff2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=84c0a895d4fd336f1119370c72800e43ac487ff2", "patch": "@@ -1,3 +1,18 @@\n+2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Return_Subtype_Indication): Reject a return\n+\tsubtype indication in an extended return statement when the\n+\treturn value is an ancestor of the return type of the function,\n+\tand that return type is a null record extension.\n+\n+2014-07-29  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch13.adb (Rep_Item_Too_Late): Specialize/clarify error\n+\tmessage produced for the case of a type-related representation\n+\titem that is made illegal by 13.10(1).\n+\t* gnat_rm.texi (Scalar_Storage_Order): Minor change in\n+\tdocumentation.\n+\n 2014-07-29  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_ugn.texi: Add section on Wide_Wide_Character encodings."}, {"sha": "7043f134c8421750a4276392aaaadc5735cce04c", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c0a895d4fd336f1119370c72800e43ac487ff2/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c0a895d4fd336f1119370c72800e43ac487ff2/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=84c0a895d4fd336f1119370c72800e43ac487ff2", "patch": "@@ -9419,8 +9419,8 @@ of the use of this feature:\n Other properties are as for standard representation attribute @code{Bit_Order},\n as defined by Ada RM 13.5.3(4). The default is @code{System.Default_Bit_Order}.\n \n-For a record type @var{S}, if @code{@var{S}'Scalar_Storage_Order} is\n-specified explicitly, it shall be equal to @code{@var{S}'Bit_Order}. Note:\n+For a record type @var{T}, if @code{@var{T}'Scalar_Storage_Order} is\n+specified explicitly, it shall be equal to @code{@var{T}'Bit_Order}. Note:\n this means that if a @code{Scalar_Storage_Order} attribute definition\n clause is not confirming, then the type's @code{Bit_Order} shall be\n specified explicitly and set to the same value.\n@@ -9430,7 +9430,7 @@ types. This may be overridden for the derived type by giving an explicit scalar\n storage order for the derived type. For a record extension, the derived type\n must have the same scalar storage order as the parent type.\n \n-If a component of @var{S} is of a record or array type, then that type must\n+If a component of @var{T} is of a record or array type, then that type must\n also have a @code{Scalar_Storage_Order} attribute definition clause.\n \n A component of a record or array type that is a packed array, or that"}, {"sha": "e63d4dde263e36d35c0eb658c7b7c613a13446e2", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c0a895d4fd336f1119370c72800e43ac487ff2/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c0a895d4fd336f1119370c72800e43ac487ff2/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=84c0a895d4fd336f1119370c72800e43ac487ff2", "patch": "@@ -11064,10 +11064,25 @@ package body Sem_Ch13 is\n       S           : Entity_Id;\n       Parent_Type : Entity_Id;\n \n+      procedure No_Type_Rep_Item;\n+      --  Output message indicating that no type-related aspects can be\n+      --  specified due to some property of the parent type.\n+\n       procedure Too_Late;\n-      --  Output the too late message. Note that this is not considered a\n-      --  serious error, since the effect is simply that we ignore the\n-      --  representation clause in this case.\n+      --  Output message for an aspect being specified too late\n+\n+      --  Note that neither of the above errors is considered a serious one,\n+      --  since the effect is simply that we ignore the representation clause\n+      --  in these cases.\n+\n+      ----------------------\n+      -- No_Type_Rep_Item --\n+      ----------------------\n+\n+      procedure No_Type_Rep_Item is\n+      begin\n+         Error_Msg_N (\"|type-related representation item not permitted!\", N);\n+      end No_Type_Rep_Item;\n \n       --------------\n       -- Too_Late --\n@@ -11114,7 +11129,9 @@ package body Sem_Ch13 is\n          return True;\n \n       --  Check for case of non-tagged derived type whose parent either has\n-      --  primitive operations, or is a by reference type (RM 13.1(10)).\n+      --  primitive operations, or is a by reference type (RM 13.1(10)). In\n+      --  this case we do not output a Too_Late message, since there is no\n+      --  earlier point where the rep item could be placed to make it legal.\n \n       elsif Is_Type (T)\n         and then not FOnly\n@@ -11124,15 +11141,15 @@ package body Sem_Ch13 is\n          Parent_Type := Etype (Base_Type (T));\n \n          if Has_Primitive_Operations (Parent_Type) then\n-            Too_Late;\n+            No_Type_Rep_Item;\n             Error_Msg_NE\n-              (\"primitive operations already defined for&!\", N, Parent_Type);\n+              (\"\\parent type & has primitive operations!\", N, Parent_Type);\n             return True;\n \n          elsif Is_By_Reference_Type (Parent_Type) then\n-            Too_Late;\n+            No_Type_Rep_Item;\n             Error_Msg_NE\n-              (\"parent type & is a by reference type!\", N, Parent_Type);\n+              (\"\\parent type & is a by reference type!\", N, Parent_Type);\n             return True;\n          end if;\n       end if;"}, {"sha": "b80c497319a5ba217d776e1329a4a47f719cc1d8", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c0a895d4fd336f1119370c72800e43ac487ff2/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c0a895d4fd336f1119370c72800e43ac487ff2/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=84c0a895d4fd336f1119370c72800e43ac487ff2", "patch": "@@ -811,10 +811,9 @@ package body Sem_Ch6 is\n                end if;\n             end if;\n \n-         elsif Etype (Base_Type (R_Type)) = R_Stm_Type\n-           and then Is_Null_Extension (Base_Type (R_Type))\n-         then\n-            null;\n+            --  Previous versions of this subprogram allowed the return value\n+            --  to be the ancestor of the return type if the return type was\n+            --  a null extension.  This was plainly incorrect.\n \n          else\n             Error_Msg_N\n@@ -10631,7 +10630,6 @@ package body Sem_Ch6 is\n       is\n          AO : constant Entity_Id := Alias (Old_E);\n          AN : constant Entity_Id := Alias (New_E);\n-\n       begin\n          return Scope (AO) /= Scope (AN)\n            or else No (DTC_Entity (AO))\n@@ -10847,7 +10845,7 @@ package body Sem_Ch6 is\n                             or else Is_Abstract_Subprogram (S)\n                             or else\n                               (Is_Dispatching_Operation (E)\n-                                 and then Is_Overriding_Alias (E, S)))\n+                                and then Is_Overriding_Alias (E, S)))\n                  and then Ekind (E) /= E_Enumeration_Literal\n                then\n                   --  When an derived operation is overloaded it may be due to\n@@ -11505,8 +11503,8 @@ package body Sem_Ch6 is\n               and then Is_Access_Constant (Etype (Default))\n             then\n                Error_Msg_N\n-                 (\"formal that is access to variable cannot be initialized \" &\n-                    \"with an access-to-constant expression\", Default);\n+                 (\"formal that is access to variable cannot be initialized \"\n+                  & \"with an access-to-constant expression\", Default);\n             end if;\n \n             --  Check that the designated type of an access parameter's default\n@@ -11700,11 +11698,11 @@ package body Sem_Ch6 is\n    -------------------------\n \n    procedure Set_Actual_Subtypes (N : Node_Id; Subp : Entity_Id) is\n-      Decl           : Node_Id;\n-      Formal         : Entity_Id;\n-      T              : Entity_Id;\n-      First_Stmt     : Node_Id := Empty;\n-      AS_Needed      : Boolean;\n+      Decl       : Node_Id;\n+      Formal     : Entity_Id;\n+      T          : Entity_Id;\n+      First_Stmt : Node_Id := Empty;\n+      AS_Needed  : Boolean;\n \n    begin\n       --  If this is an empty initialization procedure, no need to create\n@@ -11991,7 +11989,6 @@ package body Sem_Ch6 is\n       Result : Boolean;\n    begin\n       May_Hide_Profile := False;\n-\n       Check_Conformance\n         (New_Id, Old_Id, Type_Conformant, False, Result,\n          Skip_Controlling_Formals => Skip_Controlling_Formals);\n@@ -12020,12 +12017,11 @@ package body Sem_Ch6 is\n \n          --  For function instantiations that are operators, we must check\n          --  separately that the corresponding generic only has in-parameters.\n-         --  For subprogram declarations this is done in Set_Formal_Mode.\n-         --  Such an error could not arise in earlier versions of the language.\n+         --  For subprogram declarations this is done in Set_Formal_Mode. Such\n+         --  an error could not arise in earlier versions of the language.\n \n          elsif Ekind (F) /= E_In_Parameter then\n-            Error_Msg_N\n-              (\"operators can only have IN parameters\", F);\n+            Error_Msg_N (\"operators can only have IN parameters\", F);\n          end if;\n \n          Next_Formal (F);\n@@ -12058,7 +12054,7 @@ package body Sem_Ch6 is\n         and then not Is_Intrinsic_Subprogram (Designator)\n       then\n          Error_Msg_N\n-            (\"explicit definition of inequality not allowed\", Designator);\n+           (\"explicit definition of inequality not allowed\", Designator);\n       end if;\n    end Valid_Operator_Definition;\n "}]}