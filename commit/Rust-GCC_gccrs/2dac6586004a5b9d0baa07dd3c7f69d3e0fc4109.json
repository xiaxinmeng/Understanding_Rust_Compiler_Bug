{"sha": "2dac6586004a5b9d0baa07dd3c7f69d3e0fc4109", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRhYzY1ODYwMDRhNWI5ZDBiYWEwN2RkM2M3ZjY5ZDNlMGZjNDEwOQ==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-01-27T17:25:18Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-03T13:35:24Z"}, "message": "aarch64: Use RTL builtins for [su]mlal_high_n intrinsics\n\nRewrite [su]mlal_high_n Neon intrinsics to use RTL builtins rather\nthan inline assembly code, allowing for better scheduling and\noptimization.\n\ngcc/ChangeLog:\n\n2021-01-27  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add [su]mlal_hi_n\n\tbuiltin generator macros.\n\t* config/aarch64/aarch64-simd.md (aarch64_<su>mlal_hi_n<mode>_insn):\n\tDefine.\n\t(aarch64_<su>mlal_hi_n<mode>): Define.\n\t* config/aarch64/arm_neon.h (vmlal_high_n_s16): Use RTL builtin\n\tinstead of inline asm.\n\t(vmlal_high_n_s32): Likewise.\n\t(vmlal_high_n_u16): Likewise.\n\t(vmlal_high_n_u32): Likewise.", "tree": {"sha": "b82e6ef975d9deb87d6293e589ac1cb0418f4d1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b82e6ef975d9deb87d6293e589ac1cb0418f4d1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dac6586004a5b9d0baa07dd3c7f69d3e0fc4109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dac6586004a5b9d0baa07dd3c7f69d3e0fc4109", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dac6586004a5b9d0baa07dd3c7f69d3e0fc4109", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dac6586004a5b9d0baa07dd3c7f69d3e0fc4109/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "719877b079678f68f8acb3b4202432e93cd2c5a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/719877b079678f68f8acb3b4202432e93cd2c5a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/719877b079678f68f8acb3b4202432e93cd2c5a0"}], "stats": {"total": 61, "additions": 37, "deletions": 24}, "files": [{"sha": "352a99c2edbd43841de0628598462077e198ec92", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac6586004a5b9d0baa07dd3c7f69d3e0fc4109/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac6586004a5b9d0baa07dd3c7f69d3e0fc4109/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=2dac6586004a5b9d0baa07dd3c7f69d3e0fc4109", "patch": "@@ -244,6 +244,10 @@\n   BUILTIN_VQW (TERNOP, smlal_hi, 0, NONE)\n   BUILTIN_VQW (TERNOPU, umlal_hi, 0, NONE)\n \n+  /* Implemented by aarch64_<su>mlal_hi_n<mode>.  */\n+  BUILTIN_VQ_HSI (TERNOP, smlal_hi_n, 0, NONE)\n+  BUILTIN_VQ_HSI (TERNOPU, umlal_hi_n, 0, NONE)\n+\n   BUILTIN_VSQN_HSDI (UNOPUS, sqmovun, 0, NONE)\n \n   /* Implemented by aarch64_sqxtun2<mode>.  */"}, {"sha": "e76c71e4106a4609b50f25bb862da13adf9396a2", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac6586004a5b9d0baa07dd3c7f69d3e0fc4109/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac6586004a5b9d0baa07dd3c7f69d3e0fc4109/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=2dac6586004a5b9d0baa07dd3c7f69d3e0fc4109", "patch": "@@ -2006,6 +2006,35 @@\n }\n )\n \n+(define_insn \"aarch64_<su>mlal_hi_n<mode>_insn\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (plus:<VWIDE>\n+          (mult:<VWIDE>\n+              (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n+                 (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n+                 (match_operand:VQ_HSI 3 \"vect_par_cnst_hi_half\" \"\")))\n+              (ANY_EXTEND:<VWIDE> (vec_duplicate:<VCOND>\n+\t               (match_operand:<VEL> 4 \"register_operand\" \"<h_con>\"))))\n+          (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  \"<su>mlal2\\t%0.<Vwtype>, %2.<Vtype>, %4.<Vetype>[0]\"\n+  [(set_attr \"type\" \"neon_mla_<Vetype>_long\")]\n+)\n+\n+(define_expand \"aarch64_<su>mlal_hi_n<mode>\"\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:<VWIDE> 1 \"register_operand\")\n+   (ANY_EXTEND:<VWIDE>(match_operand:VQ_HSI 2 \"register_operand\"))\n+   (match_operand:<VEL> 3 \"register_operand\")]\n+  \"TARGET_SIMD\"\n+{\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n+  emit_insn (gen_aarch64_<su>mlal_hi_n<mode>_insn (operands[0],\n+             operands[1], operands[2], p, operands[3]));\n+  DONE;\n+}\n+)\n+\n (define_insn \"*aarch64_<su>mlsl_lo<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (minus:<VWIDE>"}, {"sha": "e1f9c53a8fa8a3140077a7918cc7ad9db3fb179d", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac6586004a5b9d0baa07dd3c7f69d3e0fc4109/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac6586004a5b9d0baa07dd3c7f69d3e0fc4109/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=2dac6586004a5b9d0baa07dd3c7f69d3e0fc4109", "patch": "@@ -7268,48 +7268,28 @@ __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_high_n_s16 (int32x4_t __a, int16x8_t __b, int16_t __c)\n {\n-  int32x4_t __result;\n-  __asm__ (\"smlal2 %0.4s,%2.8h,%3.h[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"x\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smlal_hi_nv8hi (__a, __b, __c);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_high_n_s32 (int64x2_t __a, int32x4_t __b, int32_t __c)\n {\n-  int64x2_t __result;\n-  __asm__ (\"smlal2 %0.2d,%2.4s,%3.s[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smlal_hi_nv4si (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_high_n_u16 (uint32x4_t __a, uint16x8_t __b, uint16_t __c)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"umlal2 %0.4s,%2.8h,%3.h[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"x\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umlal_hi_nv8hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_high_n_u32 (uint64x2_t __a, uint32x4_t __b, uint32_t __c)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"umlal2 %0.2d,%2.4s,%3.s[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umlal_hi_nv4si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline int16x8_t"}]}