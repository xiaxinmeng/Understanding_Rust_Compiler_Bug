{"sha": "302a0e37cfa7255c3049ec97996a050e7ade3407", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAyYTBlMzdjZmE3MjU1YzMwNDllYzk3OTk2YTA1MGU3YWRlMzQwNw==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2017-05-12T15:40:04Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2017-05-12T15:40:04Z"}, "message": "rs6000.c (rs6000_gimple_fold_builtin): Add handling for early expansion of vector divide builtins.\n\n[gcc]\n\n2017-05-10  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add handling for\n\tearly expansion of vector divide builtins.\n\t(builtin_function_type): Add VSX_BUILTIN_UDIV_V2DI to the list of\n\tbuiltins identified as having unsigned arguments.\n\n\n[gcc/testsuite]\n\n2017-05-10  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/fold-vec-div-float.c: New.\n\t* gcc.target/powerpc/fold-vec-div-floatdouble.c: New.\n\t* gcc.target/powerpc/fold-vec-div-longlong.c: New.\n\nFrom-SVN: r247977", "tree": {"sha": "5fd4b86f7df4bd780cb77771961051901555c33c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fd4b86f7df4bd780cb77771961051901555c33c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/302a0e37cfa7255c3049ec97996a050e7ade3407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302a0e37cfa7255c3049ec97996a050e7ade3407", "html_url": "https://github.com/Rust-GCC/gccrs/commit/302a0e37cfa7255c3049ec97996a050e7ade3407", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302a0e37cfa7255c3049ec97996a050e7ade3407/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7785078b5edd903bf07686b3cdbc3c75a9bf58e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7785078b5edd903bf07686b3cdbc3c75a9bf58e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7785078b5edd903bf07686b3cdbc3c75a9bf58e"}], "stats": {"total": 94, "additions": 93, "deletions": 1}, "files": [{"sha": "4339e570b6eb52fd1239797a4f3bbd2c5e459d2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302a0e37cfa7255c3049ec97996a050e7ade3407/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302a0e37cfa7255c3049ec97996a050e7ade3407/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=302a0e37cfa7255c3049ec97996a050e7ade3407", "patch": "@@ -1,4 +1,11 @@\n-2017-05-10  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+2017-05-12  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add handling for\n+\tearly expansion of vector divide builtins.\n+\t(builtin_function_type): Add VSX_BUILTIN_UDIV_V2DI to the list of\n+\tbuiltins identified as having unsigned arguments.\n+\n+2017-05-12  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (gimple-fold.h): New #include.\n \t(rs6000_gimple_fold_builtin): Add handling for early GIMPLE"}, {"sha": "dac673ca53842385a2aa3a47c90fa3d120e1d33d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302a0e37cfa7255c3049ec97996a050e7ade3407/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302a0e37cfa7255c3049ec97996a050e7ade3407/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=302a0e37cfa7255c3049ec97996a050e7ade3407", "patch": "@@ -17205,6 +17205,30 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \tgsi_replace (gsi, g, true);\n \treturn true;\n       }\n+    /* Flavors of vec_div (Integer).  */\n+    case VSX_BUILTIN_DIV_V2DI:\n+    case VSX_BUILTIN_UDIV_V2DI:\n+      {\n+\targ0 = gimple_call_arg (stmt, 0);\n+\targ1 = gimple_call_arg (stmt, 1);\n+\tlhs = gimple_call_lhs (stmt);\n+\tgimple *g = gimple_build_assign (lhs, TRUNC_DIV_EXPR, arg0, arg1);\n+\tgimple_set_location (g, gimple_location (stmt));\n+\tgsi_replace (gsi, g, true);\n+\treturn true;\n+      }\n+    /* Flavors of vec_div (Float).  */\n+    case VSX_BUILTIN_XVDIVSP:\n+    case VSX_BUILTIN_XVDIVDP:\n+      {\n+\targ0 = gimple_call_arg (stmt, 0);\n+\targ1 = gimple_call_arg (stmt, 1);\n+\tlhs = gimple_call_lhs (stmt);\n+\tgimple *g = gimple_build_assign (lhs, RDIV_EXPR, arg0, arg1);\n+\tgimple_set_location (g, gimple_location (stmt));\n+\tgsi_replace (gsi, g, true);\n+\treturn true;\n+      }\n     /* Flavors of vec_and.  */\n     case ALTIVEC_BUILTIN_VAND:\n       {\n@@ -18946,6 +18970,7 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n     case MISC_BUILTIN_DIVWEUO:\n     case MISC_BUILTIN_DIVDEU:\n     case MISC_BUILTIN_DIVDEUO:\n+    case VSX_BUILTIN_UDIV_V2DI:\n       h.uns_p[0] = 1;\n       h.uns_p[1] = 1;\n       h.uns_p[2] = 1;"}, {"sha": "82cd82d52f05e8c202fb4fea8762d06197482497", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302a0e37cfa7255c3049ec97996a050e7ade3407/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302a0e37cfa7255c3049ec97996a050e7ade3407/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=302a0e37cfa7255c3049ec97996a050e7ade3407", "patch": "@@ -1,3 +1,9 @@\n+2017-05-12  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-div-float.c: New.\n+\t* gcc.target/powerpc/fold-vec-div-floatdouble.c: New.\n+\t* gcc.target/powerpc/fold-vec-div-longlong.c: New.\n+\n 2017-05-12  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/fold-vec-logical-ands-char.c: New."}, {"sha": "8e8f645baf42f9fb77af7f8be1c18949a94e6cd2", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-div-float.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302a0e37cfa7255c3049ec97996a050e7ade3407/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-div-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302a0e37cfa7255c3049ec97996a050e7ade3407/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-div-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-div-float.c?ref=302a0e37cfa7255c3049ec97996a050e7ade3407", "patch": "@@ -0,0 +1,16 @@\n+/* Verify that overloaded built-ins for vec_div with float\n+   inputs produce the right results with -maltivec.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include <altivec.h>\n+\n+vector float\n+test1 (vector float x, vector float y)\n+{\n+  return vec_div (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mxvdivsp\\M} 1 } } */"}, {"sha": "0559013dc332cafd40859a53fb3c38f42ce0cf59", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-div-floatdouble.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302a0e37cfa7255c3049ec97996a050e7ade3407/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-div-floatdouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302a0e37cfa7255c3049ec97996a050e7ade3407/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-div-floatdouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-div-floatdouble.c?ref=302a0e37cfa7255c3049ec97996a050e7ade3407", "patch": "@@ -0,0 +1,16 @@\n+/* Verify that overloaded built-ins for vec_div with float and\n+   double inputs for VSX produce the right results with -mvsx. */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include <altivec.h>\n+\n+vector double\n+test2 (vector double x, vector double y)\n+{\n+  return vec_div (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mxvdivdp\\M} 1 } } */"}, {"sha": "c37c6485817683d450663b4cbfb0ef5a81c26caf", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-div-longlong.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302a0e37cfa7255c3049ec97996a050e7ade3407/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-div-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302a0e37cfa7255c3049ec97996a050e7ade3407/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-div-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-div-longlong.c?ref=302a0e37cfa7255c3049ec97996a050e7ade3407", "patch": "@@ -0,0 +1,22 @@\n+/* Verify that overloaded built-ins for vec_div with long long\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-maltivec -mpower8-vector -O3\" } */\n+\n+#include <altivec.h>\n+\n+vector signed long long\n+test3 (vector signed long long x, vector signed long long y)\n+{\n+  return vec_div (x, y);\n+}\n+\n+vector unsigned long long\n+test6 (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_div (x, y);\n+}\n+/* { dg-final { scan-assembler-times {\\mdivd\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mdivdu\\M} 2 } } */"}]}