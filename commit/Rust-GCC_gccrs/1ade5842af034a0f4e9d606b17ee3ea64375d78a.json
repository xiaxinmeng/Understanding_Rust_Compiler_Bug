{"sha": "1ade5842af034a0f4e9d606b17ee3ea64375d78a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFkZTU4NDJhZjAzNGEwZjRlOWQ2MDZiMTdlZTNlYTY0Mzc1ZDc4YQ==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-07-20T03:30:58Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-07-20T03:30:58Z"}, "message": "fold-const.c (tree_expr_nonnegative_p): Only return true for ABS_EXPR when flag_wrapv is false because of INT_MIN.\n\n2005-07-19  James A. Morrison  <phython@gcc.gnu.org>\n\n        * fold-const.c (tree_expr_nonnegative_p): Only return true for\n        ABS_EXPR when flag_wrapv is false because of INT_MIN.\n        (tree_expr_nonzero_p): Always call tree_expr_nonzero_p on the argument\n        of an ABS_EXPR.\n        (fold_unary): Always fold ABS_EXPR<ABS_EXPR<x>> into\n        ABS_EXPR<x>.\n\nFrom-SVN: r102184", "tree": {"sha": "1deede4acfc6d0df887b5c1c33abf9c83e1ea611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1deede4acfc6d0df887b5c1c33abf9c83e1ea611"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ade5842af034a0f4e9d606b17ee3ea64375d78a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ade5842af034a0f4e9d606b17ee3ea64375d78a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ade5842af034a0f4e9d606b17ee3ea64375d78a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ade5842af034a0f4e9d606b17ee3ea64375d78a/comments", "author": null, "committer": null, "parents": [{"sha": "4038c495fc9685efdb400b36848627daab979e78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4038c495fc9685efdb400b36848627daab979e78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4038c495fc9685efdb400b36848627daab979e78"}], "stats": {"total": 60, "additions": 56, "deletions": 4}, "files": [{"sha": "f37b254fcae2ed218859a8b100dc9ff07659a8df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ade5842af034a0f4e9d606b17ee3ea64375d78a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ade5842af034a0f4e9d606b17ee3ea64375d78a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ade5842af034a0f4e9d606b17ee3ea64375d78a", "patch": "@@ -1,3 +1,12 @@\n+2005-07-19  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\t* fold-const.c (tree_expr_nonnegative_p): Only return true for\n+\tABS_EXPR when flag_wrapv is false because of INT_MIN.\n+\t(tree_expr_nonzero_p): Always call tree_expr_nonzero_p on the argument\n+\tof an ABS_EXPR.\n+\t(fold_unary): Always fold ABS_EXPR<ABS_EXPR<x>> into\n+\tABS_EXPR<x>.\n+\n 2005-07-20  Giovanni Bajo  <giovannibajo@libero.it>\n \n \tMake CONSTRUCTOR use VEC to store initializers."}, {"sha": "e9d88d1e6c3441b6928e71014f6cc4b5dc6b9669", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ade5842af034a0f4e9d606b17ee3ea64375d78a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ade5842af034a0f4e9d606b17ee3ea64375d78a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1ade5842af034a0f4e9d606b17ee3ea64375d78a", "patch": "@@ -6827,7 +6827,8 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t\t\t\t\t\t    TREE_TYPE (targ0),\n \t\t\t\t\t\t    targ0));\n \t}\n-      else if (tree_expr_nonnegative_p (arg0))\n+      /* ABS_EXPR<ABS_EXPR<x>> = ABS_EXPR<x> even if flag_wrapv is on.  */\n+      else if (tree_expr_nonnegative_p (arg0) || TREE_CODE (arg0) == ABS_EXPR)\n \treturn arg0;\n \n       /* Strip sign ops from argument.  */\n@@ -10527,7 +10528,11 @@ tree_expr_nonnegative_p (tree t)\n   switch (TREE_CODE (t))\n     {\n     case ABS_EXPR:\n-      return 1;\n+      /* We can't return 1 if flag_wrapv is set because\n+\t ABS_EXPR<INT_MIN> = INT_MIN.  */\n+      if (!flag_wrapv)\n+        return 1;\n+      break;\n \n     case INTEGER_CST:\n       return tree_int_cst_sgn (t) >= 0;\n@@ -10804,8 +10809,7 @@ tree_expr_nonzero_p (tree t)\n   switch (TREE_CODE (t))\n     {\n     case ABS_EXPR:\n-      if (!TYPE_UNSIGNED (type) && !flag_wrapv)\n-\treturn tree_expr_nonzero_p (TREE_OPERAND (t, 0));\n+      return tree_expr_nonzero_p (TREE_OPERAND (t, 0));\n \n     case INTEGER_CST:\n       /* We used to test for !integer_zerop here.  This does not work correctly"}, {"sha": "043d5128019632fbdc8567d37342a583bc7975b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ade5842af034a0f4e9d606b17ee3ea64375d78a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ade5842af034a0f4e9d606b17ee3ea64375d78a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ade5842af034a0f4e9d606b17ee3ea64375d78a", "patch": "@@ -1,3 +1,9 @@\n+2005-07-19  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\t* gcc.dg/fold-abs-1.c: New test.\n+\t* gcc.dg/fold-abs-2.c: New test.\n+\t* gcc.dg/fold-abs-3.c: New test.\n+\n 2005-07-20  Giovanni Bajo  <giovannibajo@libero.it>\n \n \tMake CONSTRUCTOR use VEC to store initializers."}, {"sha": "2e69a207577ebe99d0d936c9c0da95c1753b7713", "filename": "gcc/testsuite/gcc.dg/fold-abs-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ade5842af034a0f4e9d606b17ee3ea64375d78a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-abs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ade5842af034a0f4e9d606b17ee3ea64375d78a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-abs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-abs-1.c?ref=1ade5842af034a0f4e9d606b17ee3ea64375d78a", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fwrapv\" } */\n+#define ABS(x) (x > 0 ? x : -x)\n+int f (int a, int b) {\n+\tif ((ABS(a) | b) != 0) return 1;\n+\telse return 0;\n+}"}, {"sha": "6291d7e5384ce8be1c910361d4eafcbce23e482b", "filename": "gcc/testsuite/gcc.dg/fold-abs-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ade5842af034a0f4e9d606b17ee3ea64375d78a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-abs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ade5842af034a0f4e9d606b17ee3ea64375d78a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-abs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-abs-2.c?ref=1ade5842af034a0f4e9d606b17ee3ea64375d78a", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -fwrapv\" } */\n+#include <limits.h>\n+void exit (int);\n+void abort ();\n+#define ABS(x) (x > 0 ? x : -x)\n+int f (int a) {\n+\tif (ABS(a) >= 0) return 1;\n+\telse return 0;\n+}\n+\n+int main (int argc, char *argv[]) {\n+\tif (f(INT_MIN))\n+\t  abort ();\n+\telse\n+\t  exit (0);\n+}"}, {"sha": "d151a8d7aec0cd60424b5d53f8fdddd3e1656233", "filename": "gcc/testsuite/gcc.dg/fold-abs-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ade5842af034a0f4e9d606b17ee3ea64375d78a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-abs-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ade5842af034a0f4e9d606b17ee3ea64375d78a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-abs-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-abs-3.c?ref=1ade5842af034a0f4e9d606b17ee3ea64375d78a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple -fwrapv\" } */\n+#define ABS(x) (x > 0 ? x : -x)\n+int f (int a) {\n+\treturn ABS (ABS(a));\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"ABS\" 1 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}]}