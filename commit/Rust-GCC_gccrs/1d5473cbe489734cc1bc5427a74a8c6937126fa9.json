{"sha": "1d5473cbe489734cc1bc5427a74a8c6937126fa9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ1NDczY2JlNDg5NzM0Y2MxYmM1NDI3YTc0YThjNjkzNzEyNmZhOQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1994-06-04T11:17:23Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1994-06-04T11:17:23Z"}, "message": "(print_multi_reg, output_call, output_call_mem,\n\n output_mov_long_double_fpu_from_arm,\n output_mov_long_double_arm_from_fpu,\n output_mov_double_fpu_from_arm, output_mov_double_arm_from_fpu,\n output_return_instruction, output_func_{prologue,epilogue},\n arm_print_operand, output_load_symbol):  Print the register prefix\nbefore each register name.\n(output_func_prologue, output_lcomm_directive):  Output the target\ndependent comment char for asm comments.\n\nFrom-SVN: r7442", "tree": {"sha": "999922ecf33abd865e6619478c73c12709c696a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/999922ecf33abd865e6619478c73c12709c696a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d5473cbe489734cc1bc5427a74a8c6937126fa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5473cbe489734cc1bc5427a74a8c6937126fa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d5473cbe489734cc1bc5427a74a8c6937126fa9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5473cbe489734cc1bc5427a74a8c6937126fa9/comments", "author": null, "committer": null, "parents": [{"sha": "b3de8b7505d7952ddb463576ad6c080b09097ea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3de8b7505d7952ddb463576ad6c080b09097ea4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3de8b7505d7952ddb463576ad6c080b09097ea4"}], "stats": {"total": 111, "additions": 66, "deletions": 45}, "files": [{"sha": "996415cff30c130b8b3358c109720b62d80099e1", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 66, "deletions": 45, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5473cbe489734cc1bc5427a74a8c6937126fa9/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5473cbe489734cc1bc5427a74a8c6937126fa9/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1d5473cbe489734cc1bc5427a74a8c6937126fa9", "patch": "@@ -892,13 +892,15 @@ print_multi_reg (stream, instr, mask, hat)\n   int i;\n   int not_first = FALSE;\n \n-  fprintf (stream, \"\\t%s, {\", instr);\n+  fputc ('\\t', stream);\n+  fprintf (stream, instr, ARM_REG_PREFIX);\n+  fputs (\", {\", stream);\n   for (i = 0; i < 16; i++)\n     if (mask & (1 << i))\n       {\n \tif (not_first)\n \t  fprintf (stream, \", \");\n-\tfprintf (stream, \"%s\", reg_names[i]);\n+\tfprintf (stream, \"%s%s\", ARM_REG_PREFIX, reg_names[i]);\n \tnot_first = TRUE;\n       }\n \n@@ -916,10 +918,10 @@ output_call (operands)\n   if (REGNO (operands[0]) == 14)\n     {\n       operands[0] = gen_rtx (REG, SImode, 12);\n-      output_asm_insn (\"mov%?\\t%0, lr\", operands);\n+      output_asm_insn (\"mov%?\\t%0, %|lr\", operands);\n     }\n-  output_asm_insn (\"mov%?\\tlr, pc\", operands);\n-  output_asm_insn (\"mov%?\\tpc, %0\", operands);\n+  output_asm_insn (\"mov%?\\t%|lr, %|pc\", operands);\n+  output_asm_insn (\"mov%?\\t%|pc, %0\", operands);\n   return \"\";\n }\n \n@@ -965,10 +967,10 @@ output_call_mem (operands)\n   /* Handle calls using lr by using ip (which may be clobbered in subr anyway).\n    */\n   if (eliminate_lr2ip (&operands[0]))\n-    output_asm_insn (\"mov%?\\tip, lr\", operands);\n+    output_asm_insn (\"mov%?\\t%|ip, %|lr\", operands);\n \n-  output_asm_insn (\"mov%?\\tlr, pc\", operands);\n-  output_asm_insn (\"ldr%?\\tpc, %0\", operands);\n+  output_asm_insn (\"mov%?\\t%|lr, %|pc\", operands);\n+  output_asm_insn (\"ldr%?\\t%|pc, %0\", operands);\n   return \"\";\n }\n \n@@ -991,8 +993,8 @@ output_mov_long_double_fpu_from_arm (operands)\n   ops[1] = gen_rtx (REG, SImode, 1 + arm_reg0);\n   ops[2] = gen_rtx (REG, SImode, 2 + arm_reg0);\n   \n-  output_asm_insn (\"stm%?fd\\tsp!, {%0, %1, %2}\", ops);\n-  output_asm_insn (\"ldf%?e\\t%0, [sp], #12\", operands);\n+  output_asm_insn (\"stm%?fd\\t%|sp!, {%0, %1, %2}\", ops);\n+  output_asm_insn (\"ldf%?e\\t%0, [%|sp], #12\", operands);\n   return \"\";\n }\n \n@@ -1014,8 +1016,8 @@ output_mov_long_double_arm_from_fpu (operands)\n   ops[1] = gen_rtx (REG, SImode, 1 + arm_reg0);\n   ops[2] = gen_rtx (REG, SImode, 2 + arm_reg0);\n \n-  output_asm_insn (\"stf%?e\\t%1, [sp, #-12]!\", operands);\n-  output_asm_insn (\"ldm%?fd\\tsp!, {%0, %1, %2}\", ops);\n+  output_asm_insn (\"stf%?e\\t%1, [%|sp, #-12]!\", operands);\n+  output_asm_insn (\"ldm%?fd\\t%|sp!, {%0, %1, %2}\", ops);\n   return \"\";\n }\n \n@@ -1070,8 +1072,8 @@ output_mov_double_fpu_from_arm (operands)\n     abort();\n   ops[0] = gen_rtx (REG, SImode, arm_reg0);\n   ops[1] = gen_rtx (REG, SImode, 1 + arm_reg0);\n-  output_asm_insn (\"stm%?fd\\tsp!, {%0, %1}\", ops);\n-  output_asm_insn (\"ldf%?d\\t%0, [sp], #8\", operands);\n+  output_asm_insn (\"stm%?fd\\t%|sp!, {%0, %1}\", ops);\n+  output_asm_insn (\"ldf%?d\\t%0, [%|sp], #8\", operands);\n   return \"\";\n }\n \n@@ -1091,8 +1093,8 @@ output_mov_double_arm_from_fpu (operands)\n \n   ops[0] = gen_rtx (REG, SImode, arm_reg0);\n   ops[1] = gen_rtx (REG, SImode, 1 + arm_reg0);\n-  output_asm_insn (\"stf%?d\\t%1, [sp, #-8]!\", operands);\n-  output_asm_insn (\"ldm%?fd\\tsp!, {%0, %1}\", ops);\n+  output_asm_insn (\"stf%?d\\t%1, [%|sp, #-8]!\", operands);\n+  output_asm_insn (\"ldm%?fd\\t%|sp!, {%0, %1}\", ops);\n   return \"\";\n }\n \n@@ -1675,34 +1677,42 @@ output_return_instruction (operand, really_return)\n         live_regs++;\n \n       if (frame_pointer_needed)\n-        strcpy (instr, \"ldm%?%d0ea\\tfp, {\");\n+        strcpy (instr, \"ldm%?%d0ea\\t%|fp, {\");\n       else\n-        strcpy (instr, \"ldm%?%d0fd\\tsp!, {\");\n+        strcpy (instr, \"ldm%?%d0fd\\t%|sp!, {\");\n \n       for (reg = 0; reg <= 10; reg++)\n         if (regs_ever_live[reg] && ! call_used_regs[reg])\n           {\n+\t    strcat (instr, \"%|\");\n             strcat (instr, reg_names[reg]);\n \t    if (--live_regs)\n               strcat (instr, \", \");\n           }\n \n       if (frame_pointer_needed)\n         {\n+\t  strcat (instr, \"%|\");\n           strcat (instr, reg_names[11]);\n           strcat (instr, \", \");\n+\t  strcat (instr, \"%|\");\n           strcat (instr, reg_names[13]);\n           strcat (instr, \", \");\n+\t  strcat (instr, \"%|\");\n           strcat (instr, really_return ? reg_names[15] : reg_names[14]);\n         }\n       else\n-        strcat (instr, really_return ? reg_names[15] : reg_names[14]);\n+\t{\n+\t  strcat (instr, \"%|\");\n+\t  strcat (instr, really_return ? reg_names[15] : reg_names[14]);\n+\t}\n       strcat (instr, (TARGET_6 || !really_return) ? \"}\" : \"}^\");\n       output_asm_insn (instr, &operand);\n     }\n   else if (really_return)\n     {\n-      strcpy (instr, TARGET_6 ? \"mov%?%d0\\tpc, lr\" : \"mov%?%d0s\\tpc, lr\");\n+      strcpy (instr,\n+\t      TARGET_6 ? \"mov%?%d0\\t%|pc, lr\" : \"mov%?%d0s\\t%|pc, %|lr\");\n       output_asm_insn (instr, &operand);\n     }\n \n@@ -1780,11 +1790,12 @@ output_func_prologue (f, frame_size)\n   return_used_this_function = 0;\n   lr_save_eliminated = 0;\n   \n-  fprintf (f, \"\\t@ args = %d, pretend = %d, frame = %d\\n\",\n-\t   current_function_args_size, current_function_pretend_args_size,\n-\t   frame_size);\n-  fprintf (f, \"\\t@ frame_needed = %d, current_function_anonymous_args = %d\\n\",\n-\t   frame_pointer_needed, current_function_anonymous_args);\n+  fprintf (f, \"\\t%c args = %d, pretend = %d, frame = %d\\n\",\n+\t   ARM_COMMENT_CHAR, current_function_args_size,\n+\t   current_function_pretend_args_size, frame_size);\n+  fprintf (f, \"\\t%c frame_needed = %d, current_function_anonymous_args = %d\\n\",\n+\t   ARM_COMMENT_CHAR, frame_pointer_needed,\n+\t   current_function_anonymous_args);\n \n   if (current_function_anonymous_args && current_function_pretend_args_size)\n     store_arg_regs = 1;\n@@ -1796,14 +1807,15 @@ output_func_prologue (f, frame_size)\n   if (frame_pointer_needed)\n     {\n       live_regs_mask |= 0xD800;\n-      fputs (\"\\tmov\\tip, sp\\n\", f);\n+      fprintf (f, \"\\tmov\\t%sip, %ssp\\n\", ARM_REG_PREFIX, ARM_REG_PREFIX);\n     }\n   else if (regs_ever_live[14])\n     {\n       if (! current_function_args_size\n \t  && ! function_really_clobbers_lr (get_insns ()))\n \t{\n-\t  fprintf (f,\"\\t@ I don't think this function clobbers lr\\n\");\n+\t  fprintf (f,\"\\t%c I don't think this function clobbers lr\\n\",\n+\t\t   ARM_COMMENT_CHAR);\n \t  lr_save_eliminated = 1;\n         }\n       else\n@@ -1823,7 +1835,7 @@ output_func_prologue (f, frame_size)\n \t  for (reg = 3, arg_size = current_function_pretend_args_size;\n \t       arg_size > 0; reg--, arg_size -= 4)\n \t    mask |= (1 << reg);\n-\t  print_multi_reg (f, \"stmfd\\tsp!\", mask, FALSE);\n+\t  print_multi_reg (f, \"stmfd\\t%ssp!\", mask, FALSE);\n \t}\n       else\n \t{\n@@ -1845,12 +1857,13 @@ output_func_prologue (f, frame_size)\n       lr_save_eliminated = 0;\n \n       /* Now push all the call-saved regs onto the stack */\n-      print_multi_reg (f, \"stmfd\\tsp!\", live_regs_mask, FALSE);\n+      print_multi_reg (f, \"stmfd\\t%ssp!\", live_regs_mask, FALSE);\n     }\n \n   for (reg = 23; reg > 15; reg--)\n     if (regs_ever_live[reg] && !call_used_regs[reg])\n-      fprintf (f, \"\\tstfe\\t%s, [sp, #-12]!\\n\", reg_names[reg]);\n+      fprintf (f, \"\\tstfe\\t%s%s, [%ssp, #-12]!\\n\", ARM_REG_PREFIX,\n+\t       reg_names[reg], ARM_REG_PREFIX);\n \n   if (frame_pointer_needed)\n     {\n@@ -1902,14 +1915,14 @@ output_func_epilogue (f, frame_size)\n       for (reg = 23; reg > 15; reg--)\n \tif (regs_ever_live[reg] && ! call_used_regs[reg])\n \t  {\n-\t    fprintf (f, \"\\tldfe\\t%s, [fp, #-%d]\\n\", reg_names[reg],\n-\t\t     floats_offset);\n+\t    fprintf (f, \"\\tldfe\\t%s%s, [%sfp, #-%d]\\n\", ARM_REG_PREFIX,\n+\t\t     reg_names[reg], ARM_REG_PREFIX, floats_offset);\n \t    floats_offset += 12;\n \t    code_size += 4;\n \t  }\n \n       live_regs_mask |= 0xA800;\n-      print_multi_reg (f, \"ldmea\\tfp\", live_regs_mask,\n+      print_multi_reg (f, \"ldmea\\t%sfp\", live_regs_mask,\n \t\t       TARGET_6 ? FALSE : TRUE);\n       code_size += 4;\n     }\n@@ -1926,12 +1939,13 @@ output_func_epilogue (f, frame_size)\n       for (reg = 16; reg < 24; reg++)\n \tif (regs_ever_live[reg] && ! call_used_regs[reg])\n \t  {\n-\t    fprintf (f, \"\\tldfe\\t%s, [sp], #12\\n\", reg_names[reg]);\n+\t    fprintf (f, \"\\tldfe\\t%s%s, [%ssp], #12\\n\", ARM_REG_PREFIX,\n+\t\t     reg_names[reg], ARM_REG_PREFIX);\n \t    code_size += 4;\n \t  }\n       if (current_function_pretend_args_size == 0 && regs_ever_live[14])\n \t{\n-\t  print_multi_reg (f, \"ldmfd\\tsp!\", live_regs_mask | 0x8000,\n+\t  print_multi_reg (f, \"ldmfd\\t%ssp!\", live_regs_mask | 0x8000,\n \t\t\t   TARGET_6 ? FALSE : TRUE);\n \t  code_size += 4;\n \t}\n@@ -1940,7 +1954,7 @@ output_func_epilogue (f, frame_size)\n \t  if (live_regs_mask || regs_ever_live[14])\n \t    {\n \t      live_regs_mask |= 0x4000;\n-\t      print_multi_reg (f, \"ldmfd\\tsp!\", live_regs_mask, FALSE);\n+\t      print_multi_reg (f, \"ldmfd\\t%ssp!\", live_regs_mask, FALSE);\n \t      code_size += 4;\n \t    }\n \t  if (current_function_pretend_args_size)\n@@ -1950,7 +1964,9 @@ output_func_epilogue (f, frame_size)\n \t\t\t\t     current_function_pretend_args_size);\n \t      output_add_immediate (operands);\n \t    }\n-\t  fputs (TARGET_6 ? \"\\tmov\\tpc, lr\\n\" : \"\\tmovs\\tpc, lr\\n\", f);\n+\t  fprintf (f,\n+\t\t   TARGET_6 ? \"\\tmov\\t%spc, %slr\\n\" : \"\\tmovs\\t%spc, %slr\\n\",\n+\t\t   ARM_REG_PREFIX, ARM_REG_PREFIX, f);\n \t  code_size += 4;\n \t}\n     }\n@@ -2056,22 +2072,24 @@ arm_print_operand (stream, x, code)\n     case 'R':\n       if (REGNO (x) > 15)\n \tabort ();\n+      fputs (ARM_REG_PREFIX, stream);\n       fputs (reg_names[REGNO (x) + 1], stream);\n       return;\n \n     case 'm':\n+      fputs (ARM_REG_PREFIX, stream);\n       if (GET_CODE (XEXP (x, 0)) == REG)\n \tfputs (reg_names[REGNO (XEXP (x, 0))], stream);\n       else\n \tfputs (reg_names[REGNO (XEXP (XEXP (x, 0), 0))], stream);\n       return;\n \n     case 'M':\n-      fprintf (stream, \"{%s-%s}\", reg_names[REGNO (x)],\n-\t       reg_names[REGNO (x) - 1\n-\t\t\t + ((GET_MODE_SIZE (GET_MODE (x))\n-\t\t\t     + GET_MODE_SIZE (SImode) - 1)\n-\t\t\t    / GET_MODE_SIZE (SImode))]);\n+      fprintf (stream, \"{%s%s-%s%s}\", ARM_REG_PREFIX, reg_names[REGNO (x)],\n+\t       ARM_REG_PREFIX, reg_names[REGNO (x) - 1\n+\t\t\t\t\t + ((GET_MODE_SIZE (GET_MODE (x))\n+\t\t\t\t\t     + GET_MODE_SIZE (SImode) - 1)\n+\t\t\t\t\t    / GET_MODE_SIZE (SImode))]);\n       return;\n \n     case 'd':\n@@ -2096,7 +2114,10 @@ arm_print_operand (stream, x, code)\n \tabort ();\n \n       if (GET_CODE (x) == REG)\n-\tfputs (reg_names[REGNO (x)], stream);\n+\t{\n+\t  fputs (ARM_REG_PREFIX, stream);\n+\t  fputs (reg_names[REGNO (x)], stream);\n+\t}\n       else if (GET_CODE (x) == MEM)\n \t{\n \t  output_memory_reference_mode = GET_MODE (x);\n@@ -2228,7 +2249,7 @@ output_load_symbol (insn, operands)\n     {\n       if (inst == 8)\n \t{\n-\t  strcpy (buffer, \"sub%?\\t%0, pc, #(8 + . -%a1)\");\n+\t  strcpy (buffer, \"sub%?\\t%0, %|pc, #(8 + . -%a1)\");\n \t  if ((never_mask | mask) != 0xffffffff)\n \t    sprintf (buffer + strlen (buffer), \" & 0x%x\", mask | never_mask);\n \t}\n@@ -2257,7 +2278,7 @@ output_lcomm_directive (stream, name, size, rounded)\n      char *name;\n      int size, rounded;\n {\n-  fputs (\"\\n\\t.bss\\t@ .lcomm\\n\", stream);\n+  fprintf (stream, \"\\n\\t.bss\\t%c .lcomm\\n\", ARM_COMMENT_CHAR);\n   assemble_name (stream, name);\n   fprintf (stream, \":\\t.space\\t%d\\n\", rounded);\n   if (in_text_section ())"}]}