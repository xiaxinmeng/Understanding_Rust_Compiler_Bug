{"sha": "e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRiNDRmZDc0MWVlMjVhYTVhZDA4Njk0OWNjZmJjYmQzNzM2YzBmMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2019-06-01T16:36:49Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-06-01T16:36:49Z"}, "message": "alias.c: Include ipa-utils.h.\n\n\n\t* alias.c: Include ipa-utils.h.\n\t(get_alias_set): Try to complete ODR type via ODR type hash lookup.\n\t* ipa-devirt.c (prevailing_odr_type): New.\n\t* ipa-utils.h (previaling_odr_type): Declare.\n\n\t* g++.dg/lto/alias-1_0.C: New testcase.\n\t* g++.dg/lto/alias-1_1.C: New testcase.\n\nFrom-SVN: r271837", "tree": {"sha": "de277309e24560ad8eaec387435ea436ae9943ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de277309e24560ad8eaec387435ea436ae9943ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3/comments", "author": null, "committer": null, "parents": [{"sha": "5a2a2fb3152a801b5652bb65c380d92db2d900d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2a2fb3152a801b5652bb65c380d92db2d900d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a2a2fb3152a801b5652bb65c380d92db2d900d3"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "491577b8828086a1780750b741ac849328417f8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3", "patch": "@@ -1,3 +1,10 @@\n+2019-05-31  Jan Hubicka  <jh@suse.cz>\n+\n+\t* alias.c: Include ipa-utils.h.\n+\t(get_alias_set): Try to complete ODR type via ODR type hash lookup.\n+\t* ipa-devirt.c (prevailing_odr_type): New.\n+\t* ipa-utils.h (previaling_odr_type): Declare.\n+\n 2019-05-31  H.J. Lu  <hongjiu.lu@intel.com>\n \t    Hongtao Liu  <hongtao.liu@intel.com>\n "}, {"sha": "eece84ae2442dfd5a2267de591a7bd316f2d33cd", "filename": "gcc/alias.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3", "patch": "@@ -39,6 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfganal.h\"\n #include \"rtl-iter.h\"\n #include \"cgraph.h\"\n+#include \"ipa-utils.h\"\n \n /* The aliasing API provided here solves related but different problems:\n \n@@ -1008,6 +1009,14 @@ get_alias_set (tree t)\n \t}\n       p = TYPE_MAIN_VARIANT (p);\n \n+      /* In LTO for C++ programs we can turn in complete types to complete\n+\t using ODR name lookup.  */\n+      if (in_lto_p && TYPE_STRUCTURAL_EQUALITY_P (p) && odr_type_p (p))\n+\t{\n+\t  p = prevailing_odr_type (p);\n+\t  gcc_checking_assert (TYPE_MAIN_VARIANT (p) == p);\n+\t}\n+\n       /* Make void * compatible with char * and also void **.\n \t Programs are commonly violating TBAA by this.\n "}, {"sha": "e9cb1800b3f31d71a1188e383f43322fc06c5d40", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3", "patch": "@@ -2170,6 +2170,20 @@ get_odr_type (tree type, bool insert)\n   return val;\n }\n \n+/* Return type that in ODR type hash prevailed TYPE.  Be careful and punt\n+   on ODR violations.  */\n+\n+tree\n+prevailing_odr_type (tree type)\n+{\n+  odr_type t = get_odr_type (type, false);\n+  if (!t || t->odr_violated)\n+    return type;\n+  return t->type;\n+}\n+\n+/* Return true if we reported some ODR violation on TYPE.  */\n+\n bool\n odr_type_violation_reported_p (tree type)\n {"}, {"sha": "77cf3d3d91dd795d8d74aa7e156b070330f55cca", "filename": "gcc/ipa-utils.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3/gcc%2Fipa-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3/gcc%2Fipa-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.h?ref=e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3", "patch": "@@ -92,6 +92,7 @@ void warn_types_mismatch (tree t1, tree t2, location_t loc1 = UNKNOWN_LOCATION,\n bool odr_or_derived_type_p (const_tree t);\n bool odr_types_equivalent_p (tree type1, tree type2);\n bool odr_type_violation_reported_p (tree type);\n+tree prevailing_odr_type (tree type);\n \n /* Return vector containing possible targets of polymorphic call E.\n    If COMPLETEP is non-NULL, store true if the list is complete. "}, {"sha": "0663f4c07c62267e70267f75ce9147dc68998c92", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3", "patch": "@@ -1,3 +1,8 @@\n+2019-05-31  Jan Hubicka  <jh@suse.cz>\n+\n+\t* g++.dg/lto/alias-1_0.C: New testcase.\n+\t* g++.dg/lto/alias-1_1.C: New testcase.\n+\n 2019-05-31  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89355"}, {"sha": "32f3ff0cba49cec6423c60df651930d4e6ab0f56", "filename": "gcc/testsuite/g++.dg/lto/alias-1_0.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Falias-1_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Falias-1_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Falias-1_0.C?ref=e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-lto-do run } */\n+/* { dg-lto-options { { -O2 -flto } } } */\n+\n+/* With LTO we consider all pointers to incomplete types to be possibly\n+   aliasing.  This makes *bptr to alias with aptr.\n+   However with C++ ODR rule we can turn incomplete pointers to complete\n+   dragging in info from alias-1_1.C.  */\n+\n+#include <string.h>\n+\n+typedef int (*fnptr) ();\n+\n+__attribute__ ((used))\n+struct a *aptr;\n+\n+__attribute__ ((used))\n+struct b **bptr = (struct b**)&aptr;\n+extern void init ();\n+extern void inline_me_late (int);\n+\n+\n+int\n+main (int argc, char **argv)\n+{\n+  init ();\n+  aptr = 0;\n+  inline_me_late (argc);\n+  if (!__builtin_constant_p (aptr == 0))\n+    __builtin_abort ();\n+  return (size_t)aptr;\n+}"}, {"sha": "49e821732964430a1bc434802d3adcfdb7dea78c", "filename": "gcc/testsuite/g++.dg/lto/alias-1_1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Falias-1_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Falias-1_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Falias-1_1.C?ref=e4b44fd741ee25aa5ad086949ccfbcbd3736c0f3", "patch": "@@ -0,0 +1,16 @@\n+#include <string.h>\n+struct a {int a;} a;\n+struct b {short b;} b;\n+extern struct b **bptr;\n+void\n+inline_me_late (int argc)\n+{\n+  if (argc == -1)\n+    *bptr = (struct b *)(size_t)1;\n+}\n+void\n+init()\n+{\n+  a.a=1;\n+  b.b=2;\n+}"}]}