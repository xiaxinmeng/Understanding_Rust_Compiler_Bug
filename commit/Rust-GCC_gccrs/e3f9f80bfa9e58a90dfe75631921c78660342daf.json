{"sha": "e3f9f80bfa9e58a90dfe75631921c78660342daf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNmOWY4MGJmYTllNThhOTBkZmU3NTYzMTkyMWM3ODY2MDM0MmRhZg==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-02-03T09:34:18Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-02-03T09:34:18Z"}, "message": "Fortran: Fix Array dependency with local coarrays [PR98913]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/98913\n\t* dependency.c (gfc_dep_resolver): Treat local access\n\tto coarrays like any array access in dependency analysis.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/98913\n\t* gfortran.dg/coarray/array_temporary.f90: New test.", "tree": {"sha": "ee620165059b1f46968460ba8a94be68c872dd15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee620165059b1f46968460ba8a94be68c872dd15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3f9f80bfa9e58a90dfe75631921c78660342daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f9f80bfa9e58a90dfe75631921c78660342daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3f9f80bfa9e58a90dfe75631921c78660342daf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f9f80bfa9e58a90dfe75631921c78660342daf/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b06fcb0c9ec1110f4d6eb1dacf9c41222346f04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b06fcb0c9ec1110f4d6eb1dacf9c41222346f04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b06fcb0c9ec1110f4d6eb1dacf9c41222346f04"}], "stats": {"total": 89, "additions": 86, "deletions": 3}, "files": [{"sha": "5de3b2cf5208846b9aa17d02140822ee06436436", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f9f80bfa9e58a90dfe75631921c78660342daf/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f9f80bfa9e58a90dfe75631921c78660342daf/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=e3f9f80bfa9e58a90dfe75631921c78660342daf", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dependency.h\"\n #include \"constructor.h\"\n #include \"arith.h\"\n+#include \"options.h\"\n \n /* static declarations */\n /* Enums  */\n@@ -2142,9 +2143,17 @@ gfc_dep_resolver (gfc_ref *lref, gfc_ref *rref, gfc_reverse *reverse,\n \t  return (fin_dep == GFC_DEP_OVERLAP) ? 1 : 0;\n \n \tcase REF_ARRAY:\n-\n-\t  /* For now, treat all coarrays as dangerous.  */\n-\t  if (lref->u.ar.codimen || rref->u.ar.codimen)\n+\t  /* Coarrays: If there is a coindex, either the image differs and there\n+\t     is no overlap or the image is the same - then the normal analysis\n+\t     applies.  Hence, return early only if 'identical' is required and\n+\t     either ref is coindexed and more than one image can exist.  */\n+\t  if (identical && flag_coarray != GFC_FCOARRAY_SINGLE\n+\t      && ((lref->u.ar.codimen\n+\t\t   && lref->u.ar.dimen_type[lref->u.ar.dimen]\n+\t\t      != DIMEN_THIS_IMAGE)\n+\t\t  || (rref->u.ar.codimen\n+\t\t      && lref->u.ar.dimen_type[lref->u.ar.dimen]\n+\t\t\t != DIMEN_THIS_IMAGE)))\n \t    return 1;\n \n \t  if (ref_same_as_full_array (lref, rref))"}, {"sha": "86460a7c2826882b2901718bf4b6eff75fcb66aa", "filename": "gcc/testsuite/gfortran.dg/coarray/array_temporary.f90", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f9f80bfa9e58a90dfe75631921c78660342daf/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Farray_temporary.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f9f80bfa9e58a90dfe75631921c78660342daf/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Farray_temporary.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Farray_temporary.f90?ref=e3f9f80bfa9e58a90dfe75631921c78660342daf", "patch": "@@ -0,0 +1,74 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-Warray-temporaries\" }\n+!\n+! PR fortran/98913\n+!\n+! Contributed by Jorge D'Elia\n+!\n+! Did create an array temporary for local access to coarray\n+! (but not for identical noncoarray use).\n+!\n+\n+program test\n+  implicit none\n+  integer, parameter :: iin = kind (1)     \n+  integer, parameter :: idp = kind (1.0d0) \n+  real    (kind=idp), allocatable :: AA (:,:)[:]\n+  real    (kind=idp), allocatable :: BB (:,:)\n+  real    (kind=idp), allocatable :: UU (:)\n+  integer (kind=iin) :: nn, n1, n2\n+  integer (kind=iin) :: j, k, k1\n+  !\n+  nn =  5\n+  n1 =  1\n+  n2 = 10\n+  !\n+  allocate (AA (1:nn,n1:n2)[*])\n+  allocate (BB (1:nn,n1:n2))\n+  allocate (UU (1:nn))\n+  !\n+  k  = 1\n+  k1 = k + 1\n+  !\n+  AA = 1.0_idp\n+  BB = 1.0_idp\n+  UU = 2.0_idp\n+\n+  ! AA - coarrays\n+  ! No temporary needed:\n+  do  j = 1, nn\n+    AA (k1:nn,j) = AA (k1:nn,j) - UU (k1:nn) * AA (k,j)  ! { dg-bogus \"Creating array temporary\" }\n+  end do\n+  do  j = 1, nn\n+    AA (k1:nn,j) = AA (k1:nn,j) - UU (k1:nn) * AA (k,j) - UU(k) * AA (k1-1:nn-1,j)  ! { dg-bogus \"Creating array temporary\" }\n+  end do\n+  do  j = 1, nn\n+    AA (k1:nn,j) = AA (k1:nn,j) - UU (k1:nn) * AA (k,j) - UU(k) * AA (k1+1:nn+1,j)  ! { dg-bogus \"Creating array temporary\" }\n+  end do\n+\n+  ! But:\n+  do  j = 1, nn\n+    AA (k1:nn,j) = AA (k1-1:nn-1,j) - UU (k1:nn) * AA (k,j) - UU(k) * AA (k1+1:nn+1,j)  ! { dg-warning \"Creating array temporary\" }\n+  end do\n+\n+  ! BB - no coarrays\n+  ! No temporary needed:\n+  do  j = 1, nn\n+    BB (k1:nn,j) = BB (k1:nn,j) - UU (k1:nn) * BB (k,j)  ! { dg-bogus \"Creating array temporary\" }\n+  end do\n+  do  j = 1, nn\n+    BB (k1:nn,j) = BB (k1:nn,j) - UU (k1:nn) * BB (k,j) - UU(k) * BB (k1-1:nn-1,j)  ! { dg-bogus \"Creating array temporary\" }\n+  end do\n+  do  j = 1, nn\n+    BB (k1:nn,j) = BB (k1:nn,j) - UU (k1:nn) * BB (k,j) - UU(k) * BB (k1+1:nn+1,j)  ! { dg-bogus \"Creating array temporary\" }\n+  end do\n+\n+  ! But:\n+  do  j = 1, nn\n+    BB (k1:nn,j) = BB (k1-1:nn-1,j) - UU (k1:nn) * BB (k,j) - UU(k) * BB (k1+1:nn+1,j)  ! { dg-warning \"Creating array temporary\" }\n+  end do\n+\n+  deallocate (AA)\n+  deallocate (BB)\n+  deallocate (UU)\n+end program test"}]}