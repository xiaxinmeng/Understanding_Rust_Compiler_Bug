{"sha": "6429d58f83a1ee1334942d419c078a1fcd962c18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQyOWQ1OGY4M2ExZWUxMzM0OTQyZDQxOWMwNzhhMWZjZDk2MmMxOA==", "commit": {"author": {"name": "Andreas Tobler", "email": "a.tobler@schweiz.ch", "date": "2006-02-16T22:29:01Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2006-02-16T22:29:01Z"}, "message": "return_dbl.c: New test case.\n\n2006-02-16  Andreas Tobler  <a.tobler@schweiz.ch>\n\n\t* testsuite/libffi.call/return_dbl.c: New test case.\n\t* testsuite/libffi.call/return_dbl1.c: Likewise.\n\t* testsuite/libffi.call/return_dbl2.c: Likewise.\n\t* testsuite/libffi.call/return_fl.c: Likewise.\n\t* testsuite/libffi.call/return_fl1.c: Likewise.\n\t* testsuite/libffi.call/return_fl2.c: Likewise.\n\t* testsuite/libffi.call/return_fl3.c: Likewise.\n\t* testsuite/libffi.call/closure_fn6.c: Likewise.\n\nFrom-SVN: r111156", "tree": {"sha": "db8041e17823c097a5dd0ba8efe461034a7323c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db8041e17823c097a5dd0ba8efe461034a7323c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6429d58f83a1ee1334942d419c078a1fcd962c18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6429d58f83a1ee1334942d419c078a1fcd962c18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6429d58f83a1ee1334942d419c078a1fcd962c18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6429d58f83a1ee1334942d419c078a1fcd962c18/comments", "author": null, "committer": null, "parents": [{"sha": "fd7927cdc6aeb055e30e8f599664e1e7ebf621c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd7927cdc6aeb055e30e8f599664e1e7ebf621c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd7927cdc6aeb055e30e8f599664e1e7ebf621c9"}], "stats": {"total": 381, "additions": 381, "deletions": 0}, "files": [{"sha": "724b256997390465c50e8795aa59b743f2cbcbd5", "filename": "libffi/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429d58f83a1ee1334942d419c078a1fcd962c18/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429d58f83a1ee1334942d419c078a1fcd962c18/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=6429d58f83a1ee1334942d419c078a1fcd962c18", "patch": "@@ -1,5 +1,14 @@\n 2006-02-16  Andreas Tobler  <a.tobler@schweiz.ch>\n \n+\t* testsuite/libffi.call/return_dbl.c: New test case.\n+\t* testsuite/libffi.call/return_dbl1.c: Likewise.\n+\t* testsuite/libffi.call/return_dbl2.c: Likewise.\n+\t* testsuite/libffi.call/return_fl.c: Likewise.\n+\t* testsuite/libffi.call/return_fl1.c: Likewise.\n+\t* testsuite/libffi.call/return_fl2.c: Likewise.\n+\t* testsuite/libffi.call/return_fl3.c: Likewise.\n+\t* testsuite/libffi.call/closure_fn6.c: Likewise.\n+\n \t* testsuite/libffi.call/nested_struct2.c: Remove ffi_type_mylong\n \tdefinition.\n \t* testsuite/libffi.call/ffitest.h: Add ffi_type_mylong definition"}, {"sha": "8f8f743ea2fcf3f50f5acb31ed94479910c96ba9", "filename": "libffi/testsuite/libffi.call/closure_fn6.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429d58f83a1ee1334942d419c078a1fcd962c18/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429d58f83a1ee1334942d419c078a1fcd962c18/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn6.c?ref=6429d58f83a1ee1334942d419c078a1fcd962c18", "patch": "@@ -0,0 +1,97 @@\n+/* Area:\tclosure_call\n+   Purpose:\tCheck multiple values passing from different type.\n+\t\tAlso, exceed the limit of gpr and fpr registers on PowerPC.\n+   Limitations:\tnone.\n+   PR:\t\tPR23404\n+   Originator:\t<andreast@gcc.gnu.org> 20050830\t */\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n+#include \"ffitest.h\"\n+\n+static void\n+closure_test_fn0(ffi_cif* cif,void* resp,void** args, void* userdata)\n+{\n+  *(ffi_arg*)resp =\n+    (int)*(unsigned long long *)args[0] +\n+    (int)(*(unsigned long long *)args[1]) +\n+    (int)(*(unsigned long long *)args[2]) +\n+    (int)*(unsigned long long *)args[3] +\n+    (int)(*(int *)args[4]) + (int)(*(double *)args[5]) +\n+    (int)*(double *)args[6] + (int)(*(float *)args[7]) +\n+    (int)(*(double *)args[8]) + (int)*(double *)args[9] +\n+    (int)(*(int *)args[10]) + (int)(*(float *)args[11]) +\n+    (int)*(int *)args[12] + (int)(*(int *)args[13]) +\n+    (int)(*(double *)args[14]) +  (int)*(double *)args[15] +\n+    (int)(long)userdata;\n+\n+  printf(\"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d: %d\\n\",\n+\t (int)*(unsigned long long  *)args[0],\n+\t (int)(*(unsigned long long  *)args[1]),\n+\t (int)(*(unsigned long long  *)args[2]),\n+\t (int)*(unsigned long long  *)args[3],\n+\t (int)(*(int *)args[4]), (int)(*(double *)args[5]),\n+\t (int)*(double *)args[6], (int)(*(float *)args[7]),\n+\t (int)(*(double *)args[8]), (int)*(double *)args[9],\n+\t (int)(*(int *)args[10]), (int)(*(float *)args[11]),\n+\t (int)*(int *)args[12], (int)(*(int *)args[13]),\n+\t (int)(*(double *)args[14]), (int)(*(double *)args[15]),\n+\t (int)(long)userdata, (int)*(ffi_arg *)resp);\n+\n+}\n+\n+typedef int (*closure_test_type0)(unsigned long long,\n+\t\t\t\t  unsigned long long,\n+\t\t\t\t  unsigned long long,\n+\t\t\t\t  unsigned long long,\n+\t\t\t\t  int, double, double, float, double, double,\n+\t\t\t\t  int, float, int, int, double, double);\n+\n+int main (void)\n+{\n+  ffi_cif cif;\n+#ifndef USING_MMAP\n+  static ffi_closure cl;\n+#endif\n+  ffi_closure *pcl;\n+  ffi_type * cl_arg_types[17];\n+  int res;\n+\n+#ifdef USING_MMAP\n+  pcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+  pcl = &cl;\n+#endif\n+\n+  cl_arg_types[0] = &ffi_type_uint64;\n+  cl_arg_types[1] = &ffi_type_uint64;\n+  cl_arg_types[2] = &ffi_type_uint64;\n+  cl_arg_types[3] = &ffi_type_uint64;\n+  cl_arg_types[4] = &ffi_type_uint;\n+  cl_arg_types[5] = &ffi_type_double;\n+  cl_arg_types[6] = &ffi_type_double;\n+  cl_arg_types[7] = &ffi_type_float;\n+  cl_arg_types[8] = &ffi_type_double;\n+  cl_arg_types[9] = &ffi_type_double;\n+  cl_arg_types[10] = &ffi_type_uint;\n+  cl_arg_types[11] = &ffi_type_float;\n+  cl_arg_types[12] = &ffi_type_uint;\n+  cl_arg_types[13] = &ffi_type_uint;\n+  cl_arg_types[14] = &ffi_type_double;\n+  cl_arg_types[15] = &ffi_type_double;\n+  cl_arg_types[16] = NULL;\n+\n+  /* Initialize the cif */\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 16,\n+\t\t     &ffi_type_sint, cl_arg_types) == FFI_OK);\n+\n+  CHECK(ffi_prep_closure(pcl, &cif, closure_test_fn0,\n+\t\t\t (void *) 3 /* userdata */) == FFI_OK);\n+\n+  res = (*((closure_test_type0)pcl))\n+    (1, 2, 3, 4, 127, 429., 7., 8., 9.5, 10., 11, 12., 13,\n+     19, 21., 1.);\n+  /* { dg-output \"1 2 3 4 127 429 7 8 9 10 11 12 13 19 21 1 3: 680\" } */\n+  printf(\"res: %d\\n\",res);\n+  /* { dg-output \"\\nres: 680\" } */\n+  exit(0);\n+}"}, {"sha": "1aab403d9c324682458cb38321a4a7e7fdc020c7", "filename": "libffi/testsuite/libffi.call/return_dbl.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429d58f83a1ee1334942d419c078a1fcd962c18/libffi%2Ftestsuite%2Flibffi.call%2Freturn_dbl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429d58f83a1ee1334942d419c078a1fcd962c18/libffi%2Ftestsuite%2Flibffi.call%2Freturn_dbl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Freturn_dbl.c?ref=6429d58f83a1ee1334942d419c078a1fcd962c18", "patch": "@@ -0,0 +1,35 @@\n+/* Area:\tffi_call\n+   Purpose:\tCheck return value double.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<andreast@gcc.gnu.org> 20050212  */\n+\n+/* { dg-do run } */\n+#include \"ffitest.h\"\n+\n+static double return_dbl(double dbl)\n+{\n+  return 2 * dbl;\n+}\n+int main (void)\n+{\n+  ffi_cif cif;\n+  ffi_type *args[MAX_ARGS];\n+  void *values[MAX_ARGS];\n+  double dbl, rdbl;\n+\n+  args[0] = &ffi_type_double;\n+  values[0] = &dbl;\n+\n+  /* Initialize the cif */\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 1,\n+\t\t     &ffi_type_double, args) == FFI_OK);\n+\n+  for (dbl = -127.3; dbl <  127; dbl++)\n+    {\n+      ffi_call(&cif, FFI_FN(return_dbl), &rdbl, values);\n+      printf (\"%f vs %f\\n\", rdbl, return_dbl(dbl));\n+      CHECK(rdbl == 2 * dbl);\n+    }\n+  exit(0);\n+}"}, {"sha": "a6c1cfca2da7575c9001425b29f21959067ef8ef", "filename": "libffi/testsuite/libffi.call/return_dbl1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429d58f83a1ee1334942d419c078a1fcd962c18/libffi%2Ftestsuite%2Flibffi.call%2Freturn_dbl1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429d58f83a1ee1334942d419c078a1fcd962c18/libffi%2Ftestsuite%2Flibffi.call%2Freturn_dbl1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Freturn_dbl1.c?ref=6429d58f83a1ee1334942d419c078a1fcd962c18", "patch": "@@ -0,0 +1,43 @@\n+/* Area:\tffi_call\n+   Purpose:\tCheck return value double.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<andreast@gcc.gnu.org> 20050212  */\n+\n+/* { dg-do run } */\n+#include \"ffitest.h\"\n+\n+static double return_dbl(double dbl1, float fl2, unsigned int in3, double dbl4)\n+{\n+  return dbl1 + fl2 + in3 + dbl4;\n+}\n+int main (void)\n+{\n+  ffi_cif cif;\n+  ffi_type *args[MAX_ARGS];\n+  void *values[MAX_ARGS];\n+  double dbl1, dbl4, rdbl;\n+  float fl2;\n+  unsigned int in3;\n+  args[0] = &ffi_type_double;\n+  args[1] = &ffi_type_float;\n+  args[2] = &ffi_type_uint32;\n+  args[3] = &ffi_type_double;\n+  values[0] = &dbl1;\n+  values[1] = &fl2;\n+  values[2] = &in3;\n+  values[3] = &dbl4;\n+\n+  /* Initialize the cif */\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 4,\n+\t\t     &ffi_type_double, args) == FFI_OK);\n+  dbl1 = 127.0;\n+  fl2 = 128.0;\n+  in3 = 255;\n+  dbl4 = 512.7;\n+\n+  ffi_call(&cif, FFI_FN(return_dbl), &rdbl, values);\n+  printf (\"%f vs %f\\n\", rdbl, return_dbl(dbl1, fl2, in3, dbl4));\n+  CHECK(rdbl ==  dbl1 + fl2 + in3 + dbl4);\n+  exit(0);\n+}"}, {"sha": "51af3bad8caa062455c0912e195e0136013c8c03", "filename": "libffi/testsuite/libffi.call/return_dbl2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429d58f83a1ee1334942d419c078a1fcd962c18/libffi%2Ftestsuite%2Flibffi.call%2Freturn_dbl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429d58f83a1ee1334942d419c078a1fcd962c18/libffi%2Ftestsuite%2Flibffi.call%2Freturn_dbl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Freturn_dbl2.c?ref=6429d58f83a1ee1334942d419c078a1fcd962c18", "patch": "@@ -0,0 +1,42 @@\n+/* Area:\tffi_call\n+   Purpose:\tCheck return value double.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<andreast@gcc.gnu.org> 20050212  */\n+\n+/* { dg-do run } */\n+#include \"ffitest.h\"\n+\n+static double return_dbl(double dbl1, double dbl2, unsigned int in3, double dbl4)\n+{\n+  return dbl1 + dbl2 + in3 + dbl4;\n+}\n+int main (void)\n+{\n+  ffi_cif cif;\n+  ffi_type *args[MAX_ARGS];\n+  void *values[MAX_ARGS];\n+  double dbl1, dbl2, dbl4, rdbl;\n+  unsigned int in3;\n+  args[0] = &ffi_type_double;\n+  args[1] = &ffi_type_double;\n+  args[2] = &ffi_type_uint32;\n+  args[3] = &ffi_type_double;\n+  values[0] = &dbl1;\n+  values[1] = &dbl2;\n+  values[2] = &in3;\n+  values[3] = &dbl4;\n+\n+  /* Initialize the cif */\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 4,\n+\t\t     &ffi_type_double, args) == FFI_OK);\n+  dbl1 = 127.0;\n+  dbl2 = 128.0;\n+  in3 = 255;\n+  dbl4 = 512.7;\n+\n+  ffi_call(&cif, FFI_FN(return_dbl), &rdbl, values);\n+  printf (\"%f vs %f\\n\", rdbl, return_dbl(dbl1, dbl2, in3, dbl4));\n+  CHECK(rdbl ==  dbl1 + dbl2 + in3 + dbl4);\n+  exit(0);\n+}"}, {"sha": "fb8a09e32ab4fa69fc2e05e7b26450b13453036f", "filename": "libffi/testsuite/libffi.call/return_fl.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429d58f83a1ee1334942d419c078a1fcd962c18/libffi%2Ftestsuite%2Flibffi.call%2Freturn_fl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429d58f83a1ee1334942d419c078a1fcd962c18/libffi%2Ftestsuite%2Flibffi.call%2Freturn_fl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Freturn_fl.c?ref=6429d58f83a1ee1334942d419c078a1fcd962c18", "patch": "@@ -0,0 +1,35 @@\n+/* Area:\tffi_call\n+   Purpose:\tCheck return value float.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<andreast@gcc.gnu.org> 20050212  */\n+\n+/* { dg-do run } */\n+#include \"ffitest.h\"\n+\n+static float return_fl(float fl)\n+{\n+  return 2 * fl;\n+}\n+int main (void)\n+{\n+  ffi_cif cif;\n+  ffi_type *args[MAX_ARGS];\n+  void *values[MAX_ARGS];\n+  float fl, rfl;\n+\n+  args[0] = &ffi_type_float;\n+  values[0] = &fl;\n+\n+  /* Initialize the cif */\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 1,\n+\t\t     &ffi_type_float, args) == FFI_OK);\n+\n+  for (fl = -127.0; fl <  127; fl++)\n+    {\n+      ffi_call(&cif, FFI_FN(return_fl), &rfl, values);\n+      printf (\"%f vs %f\\n\", rfl, return_fl(fl));\n+      CHECK(rfl ==  2 * fl);\n+    }\n+  exit(0);\n+}"}, {"sha": "c3d92c283d0b0e4a4e71f28b50dcae087c4a2523", "filename": "libffi/testsuite/libffi.call/return_fl1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429d58f83a1ee1334942d419c078a1fcd962c18/libffi%2Ftestsuite%2Flibffi.call%2Freturn_fl1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429d58f83a1ee1334942d419c078a1fcd962c18/libffi%2Ftestsuite%2Flibffi.call%2Freturn_fl1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Freturn_fl1.c?ref=6429d58f83a1ee1334942d419c078a1fcd962c18", "patch": "@@ -0,0 +1,36 @@\n+/* Area:\tffi_call\n+   Purpose:\tCheck return value float.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<andreast@gcc.gnu.org> 20050212  */\n+\n+/* { dg-do run } */\n+#include \"ffitest.h\"\n+\n+static float return_fl(float fl1, float fl2)\n+{\n+  return fl1 + fl2;\n+}\n+int main (void)\n+{\n+  ffi_cif cif;\n+  ffi_type *args[MAX_ARGS];\n+  void *values[MAX_ARGS];\n+  float fl1, fl2, rfl;\n+\n+  args[0] = &ffi_type_float;\n+  args[1] = &ffi_type_float;\n+  values[0] = &fl1;\n+  values[1] = &fl2;\n+\n+  /* Initialize the cif */\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2,\n+\t\t     &ffi_type_float, args) == FFI_OK);\n+  fl1 = 127.0;\n+  fl2 = 128.0;\n+\n+  ffi_call(&cif, FFI_FN(return_fl), &rfl, values);\n+  printf (\"%f vs %f\\n\", rfl, return_fl(fl1, fl2));\n+  CHECK(rfl ==  fl1 + fl2);\n+  exit(0);\n+}"}, {"sha": "d4bd3ded8502611e679731822aa0751ff3196c5f", "filename": "libffi/testsuite/libffi.call/return_fl2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429d58f83a1ee1334942d419c078a1fcd962c18/libffi%2Ftestsuite%2Flibffi.call%2Freturn_fl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429d58f83a1ee1334942d419c078a1fcd962c18/libffi%2Ftestsuite%2Flibffi.call%2Freturn_fl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Freturn_fl2.c?ref=6429d58f83a1ee1334942d419c078a1fcd962c18", "patch": "@@ -0,0 +1,42 @@\n+/* Area:\tffi_call\n+   Purpose:\tCheck return value float.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<andreast@gcc.gnu.org> 20050212  */\n+\n+/* { dg-do run } */\n+#include \"ffitest.h\"\n+\n+static float return_fl(float fl1, float fl2, float fl3, float fl4)\n+{\n+  return fl1 + fl2 + fl3 + fl4;\n+}\n+int main (void)\n+{\n+  ffi_cif cif;\n+  ffi_type *args[MAX_ARGS];\n+  void *values[MAX_ARGS];\n+  float fl1, fl2, fl3, fl4, rfl;\n+\n+  args[0] = &ffi_type_float;\n+  args[1] = &ffi_type_float;\n+  args[2] = &ffi_type_float;\n+  args[3] = &ffi_type_float;\n+  values[0] = &fl1;\n+  values[1] = &fl2;\n+  values[2] = &fl3;\n+  values[3] = &fl4;\n+\n+  /* Initialize the cif */\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 4,\n+\t\t     &ffi_type_float, args) == FFI_OK);\n+  fl1 = 127.0;\n+  fl2 = 128.0;\n+  fl3 = 255.1;\n+  fl4 = 512.7;\n+\n+  ffi_call(&cif, FFI_FN(return_fl), &rfl, values);\n+  printf (\"%f vs %f\\n\", rfl, return_fl(fl1, fl2, fl3, fl4));\n+  CHECK(rfl ==  fl1 + fl2 + fl3 + fl4);\n+  exit(0);\n+}"}, {"sha": "c3d2f12038015c9340c3dec7fc1973c32d57771d", "filename": "libffi/testsuite/libffi.call/return_fl3.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429d58f83a1ee1334942d419c078a1fcd962c18/libffi%2Ftestsuite%2Flibffi.call%2Freturn_fl3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429d58f83a1ee1334942d419c078a1fcd962c18/libffi%2Ftestsuite%2Flibffi.call%2Freturn_fl3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Freturn_fl3.c?ref=6429d58f83a1ee1334942d419c078a1fcd962c18", "patch": "@@ -0,0 +1,42 @@\n+/* Area:\tffi_call\n+   Purpose:\tCheck return value float.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<andreast@gcc.gnu.org> 20050212  */\n+\n+/* { dg-do run } */\n+#include \"ffitest.h\"\n+\n+static float return_fl(float fl1, float fl2, unsigned int in3, float fl4)\n+{\n+  return fl1 + fl2 + in3 + fl4;\n+}\n+int main (void)\n+{\n+  ffi_cif cif;\n+  ffi_type *args[MAX_ARGS];\n+  void *values[MAX_ARGS];\n+  float fl1, fl2, fl4, rfl;\n+  unsigned int in3;\n+  args[0] = &ffi_type_float;\n+  args[1] = &ffi_type_float;\n+  args[2] = &ffi_type_uint32;\n+  args[3] = &ffi_type_float;\n+  values[0] = &fl1;\n+  values[1] = &fl2;\n+  values[2] = &in3;\n+  values[3] = &fl4;\n+\n+  /* Initialize the cif */\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 4,\n+\t\t     &ffi_type_float, args) == FFI_OK);\n+  fl1 = 127.0;\n+  fl2 = 128.0;\n+  in3 = 255;\n+  fl4 = 512.7;\n+\n+  ffi_call(&cif, FFI_FN(return_fl), &rfl, values);\n+  printf (\"%f vs %f\\n\", rfl, return_fl(fl1, fl2, in3, fl4));\n+  CHECK(rfl ==  fl1 + fl2 + in3 + fl4);\n+  exit(0);\n+}"}]}