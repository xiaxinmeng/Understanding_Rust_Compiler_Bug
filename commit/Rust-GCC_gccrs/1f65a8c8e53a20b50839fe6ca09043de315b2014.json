{"sha": "1f65a8c8e53a20b50839fe6ca09043de315b2014", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY2NWE4YzhlNTNhMjBiNTA4MzlmZTZjYTA5MDQzZGUzMTViMjAxNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-29T22:28:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-29T22:28:15Z"}, "message": "re PR c++/49216 ([C++0x] ICE on compiling new-expression with braced-init-list for arrays)\n\n\tPR c++/49216\n\t* init.c (build_new_1): Pass {} down to build_vec_init.\n\t(build_vec_init): Handle it.\n\nFrom-SVN: r175674", "tree": {"sha": "5735c7861fd9ae6619f6ade9d38dd97ad3226922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5735c7861fd9ae6619f6ade9d38dd97ad3226922"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f65a8c8e53a20b50839fe6ca09043de315b2014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f65a8c8e53a20b50839fe6ca09043de315b2014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f65a8c8e53a20b50839fe6ca09043de315b2014", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f65a8c8e53a20b50839fe6ca09043de315b2014/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "417ae187142e16f8c697d68495614ca07e947636", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/417ae187142e16f8c697d68495614ca07e947636", "html_url": "https://github.com/Rust-GCC/gccrs/commit/417ae187142e16f8c697d68495614ca07e947636"}], "stats": {"total": 81, "additions": 65, "deletions": 16}, "files": [{"sha": "e95e7c8f082128ec4ef22d473aadcab2c265d154", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f65a8c8e53a20b50839fe6ca09043de315b2014/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f65a8c8e53a20b50839fe6ca09043de315b2014/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1f65a8c8e53a20b50839fe6ca09043de315b2014", "patch": "@@ -1,5 +1,9 @@\n 2011-06-29  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/49216\n+\t* init.c (build_new_1): Pass {} down to build_vec_init.\n+\t(build_vec_init): Handle it.\n+\n \tDR 1207\n \tPR c++/49003\n \t* cp-tree.h (struct saved_scope): Add x_current_class_ptr,"}, {"sha": "f80c475f7ac2bbbacc9d56921f826a6d4f2598b2", "filename": "gcc/cp/init.c", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f65a8c8e53a20b50839fe6ca09043de315b2014/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f65a8c8e53a20b50839fe6ca09043de315b2014/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=1f65a8c8e53a20b50839fe6ca09043de315b2014", "patch": "@@ -2396,24 +2396,31 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \t      && BRACE_ENCLOSED_INITIALIZER_P (VEC_index (tree, *init, 0))\n \t      && CONSTRUCTOR_IS_DIRECT_INIT (VEC_index (tree, *init, 0)))\n \t    {\n-\t      tree arraytype, domain;\n \t      vecinit = VEC_index (tree, *init, 0);\n-\t      if (TREE_CONSTANT (nelts))\n-\t\tdomain = compute_array_index_type (NULL_TREE, nelts, complain);\n+\t      if (CONSTRUCTOR_NELTS (vecinit) == 0)\n+\t\t/* List-value-initialization, leave it alone.  */;\n \t      else\n \t\t{\n-\t\t  domain = NULL_TREE;\n-\t\t  if (CONSTRUCTOR_NELTS (vecinit) > 0)\n-\t\t    warning (0, \"non-constant array size in new, unable to \"\n-\t\t\t     \"verify length of initializer-list\");\n+\t\t  tree arraytype, domain;\n+\t\t  if (TREE_CONSTANT (nelts))\n+\t\t    domain = compute_array_index_type (NULL_TREE, nelts,\n+\t\t\t\t\t\t       complain);\n+\t\t  else\n+\t\t    {\n+\t\t      domain = NULL_TREE;\n+\t\t      if (CONSTRUCTOR_NELTS (vecinit) > 0)\n+\t\t\twarning (0, \"non-constant array size in new, unable \"\n+\t\t\t\t \"to verify length of initializer-list\");\n+\t\t    }\n+\t\t  arraytype = build_cplus_array_type (type, domain);\n+\t\t  vecinit = digest_init (arraytype, vecinit, complain);\n \t\t}\n-\t      arraytype = build_cplus_array_type (type, domain);\n-\t      vecinit = digest_init (arraytype, vecinit, complain);\n \t    }\n \t  else if (*init)\n             {\n               if (complain & tf_error)\n-                permerror (input_location, \"ISO C++ forbids initialization in array new\");\n+                permerror (input_location,\n+\t\t\t   \"parenthesized initializer in array new\");\n               else\n                 return error_mark_node;\n \t      vecinit = build_tree_list_vec (*init);\n@@ -3090,9 +3097,23 @@ build_vec_init (tree base, tree maxindex, tree init,\n       try_block = begin_try_block ();\n     }\n \n+  /* If the initializer is {}, then all elements are initialized from {}.\n+     But for non-classes, that's the same as value-initialization.  */\n+  if (init && BRACE_ENCLOSED_INITIALIZER_P (init)\n+      && CONSTRUCTOR_NELTS (init) == 0)\n+    {\n+      if (CLASS_TYPE_P (type))\n+\t/* Leave init alone.  */;\n+      else\n+\t{\n+\t  init = NULL_TREE;\n+\t  explicit_value_init_p = true;\n+\t}\n+    }\n+\n   /* Maybe pull out constant value when from_array? */\n \n-  if (init != NULL_TREE && TREE_CODE (init) == CONSTRUCTOR)\n+  else if (init != NULL_TREE && TREE_CODE (init) == CONSTRUCTOR)\n     {\n       /* Do non-default initialization of non-trivial arrays resulting from\n \t brace-enclosed initializers.  */\n@@ -3210,7 +3231,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n      We do need to keep going if we're copying an array.  */\n \n   if (from_array\n-      || ((type_build_ctor_call (type) || explicit_value_init_p)\n+      || ((type_build_ctor_call (type) || init || explicit_value_init_p)\n \t  && ! (host_integerp (maxindex, 0)\n \t\t&& (num_initialized_elts\n \t\t    == tree_low_cst (maxindex, 0) + 1))))\n@@ -3276,8 +3297,16 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t}\n       else\n \t{\n-\t  gcc_assert (type_build_ctor_call (type));\n-\t  elt_init = build_aggr_init (to, init, 0, complain);\n+\t  gcc_assert (type_build_ctor_call (type) || init);\n+\t  if (CLASS_TYPE_P (type))\n+\t    elt_init = build_aggr_init (to, init, 0, complain);\n+\t  else\n+\t    {\n+\t      if (TREE_CODE (init) == TREE_LIST)\n+\t\tinit = build_x_compound_expr_from_list (init, ELK_INIT,\n+\t\t\t\t\t\t\tcomplain);\n+\t      elt_init = build2 (INIT_EXPR, type, to, init);\n+\t    }\n \t}\n \n       if (elt_init == error_mark_node)"}, {"sha": "7afaafb1f31c34d9be18ee0a8be678f56b33ea42", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f65a8c8e53a20b50839fe6ca09043de315b2014/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f65a8c8e53a20b50839fe6ca09043de315b2014/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f65a8c8e53a20b50839fe6ca09043de315b2014", "patch": "@@ -1,5 +1,10 @@\n 2011-06-29  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/49216\n+\t* g++.dg/cpp0x/initlist53.C: Use placement new.\n+\t* g++.dg/cpp0x/initlist-value.C: Use placement new.\n+\t* g++.old-deja/g++.ext/arrnew2.C: Remove xfail.\n+\n \tPR c++/49003\n \t* g++.dg/cpp0x/trailing6.C: New.\n \t* g++.dg/cpp0x/pr45908.C: No error."}, {"sha": "215bb90d4df0ffb3a07e2bd1c9020124fb3b7b4e", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-value.C", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f65a8c8e53a20b50839fe6ca09043de315b2014/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-value.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f65a8c8e53a20b50839fe6ca09043de315b2014/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-value.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-value.C?ref=1f65a8c8e53a20b50839fe6ca09043de315b2014", "patch": "@@ -2,6 +2,9 @@\n // { dg-options -std=c++0x }\n // { dg-do run }\n \n+void * operator new (__SIZE_TYPE__, void *p) { return p; }\n+void * operator new[] (__SIZE_TYPE__, void *p) { return p; }\n+\n // Empty base so A isn't an aggregate\n struct B {};\n struct A: B {\n@@ -18,8 +21,14 @@ int main()\n {\n   A a{};\n   C c;\n+  int space = 42;\n+  A* ap = new (&space) A{};\n+  int space1[1] = { 42 };\n+  A* a1p = new (space1) A[1]{};\n   if (a.i != 0\n       || c.i != 0\n+      || ap->i != 0\n+      || a1p[0].i != 0\n       || A{}.i != 0\n       || f({}) != 0)\n     return 1;"}, {"sha": "22633f909559b98d2399a2f12a96c0ffaa68adbb", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist53.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f65a8c8e53a20b50839fe6ca09043de315b2014/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist53.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f65a8c8e53a20b50839fe6ca09043de315b2014/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist53.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist53.C?ref=1f65a8c8e53a20b50839fe6ca09043de315b2014", "patch": "@@ -4,6 +4,7 @@\n \n #include <initializer_list>\n extern \"C\" void abort();\n+void * operator new[] (__SIZE_TYPE__, void *p) { return p; }\n \n bool constructed;\n \n@@ -14,7 +15,8 @@ struct A\n \n int main() {\n   new A[1]{};\n-  int *p = new int[1]{};\n+  int space[1] = { 42 };\n+  int *p = new (space) int[1]{};\n   if (p[0] != 0 || !constructed)\n     abort();\n }"}, {"sha": "c6a967ccc38516e9a81d3b14bb3de317270afc4f", "filename": "gcc/testsuite/g++.old-deja/g++.ext/arrnew2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f65a8c8e53a20b50839fe6ca09043de315b2014/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farrnew2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f65a8c8e53a20b50839fe6ca09043de315b2014/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farrnew2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farrnew2.C?ref=1f65a8c8e53a20b50839fe6ca09043de315b2014", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { xfail *-*-* } }\n+// { dg-do run }\n // { dg-options \"-w -fpermissive\" }\n \n int *foo = new int[1](42); // { dg-bogus \"\" }"}]}