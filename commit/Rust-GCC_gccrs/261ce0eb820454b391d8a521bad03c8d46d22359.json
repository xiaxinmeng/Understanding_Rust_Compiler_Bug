{"sha": "261ce0eb820454b391d8a521bad03c8d46d22359", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYxY2UwZWI4MjA0NTRiMzkxZDhhNTIxYmFkMDNjOGQ0NmQyMjM1OQ==", "commit": {"author": {"name": "Nicolas Roche", "email": "roche@adacore.com", "date": "2006-02-15T09:33:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:33:38Z"}, "message": "a-envvar.adb, [...]: New files.\n\n2006-02-13  Nicolas Roche  <roche@adacore.com>\n\n\t* a-envvar.adb, a-envvar.ads: New files.\n\nFrom-SVN: r111039", "tree": {"sha": "f6ea3de6028d5d0766fdc4d544afa0ec4e129922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6ea3de6028d5d0766fdc4d544afa0ec4e129922"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/261ce0eb820454b391d8a521bad03c8d46d22359", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261ce0eb820454b391d8a521bad03c8d46d22359", "html_url": "https://github.com/Rust-GCC/gccrs/commit/261ce0eb820454b391d8a521bad03c8d46d22359", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261ce0eb820454b391d8a521bad03c8d46d22359/comments", "author": {"login": "Nikokrock", "id": 7796165, "node_id": "MDQ6VXNlcjc3OTYxNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/7796165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nikokrock", "html_url": "https://github.com/Nikokrock", "followers_url": "https://api.github.com/users/Nikokrock/followers", "following_url": "https://api.github.com/users/Nikokrock/following{/other_user}", "gists_url": "https://api.github.com/users/Nikokrock/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nikokrock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nikokrock/subscriptions", "organizations_url": "https://api.github.com/users/Nikokrock/orgs", "repos_url": "https://api.github.com/users/Nikokrock/repos", "events_url": "https://api.github.com/users/Nikokrock/events{/privacy}", "received_events_url": "https://api.github.com/users/Nikokrock/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5cbfe1be9373f7892489487201d5ea3dbb8fdb8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cbfe1be9373f7892489487201d5ea3dbb8fdb8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cbfe1be9373f7892489487201d5ea3dbb8fdb8d"}], "stats": {"total": 213, "additions": 212, "deletions": 1}, "files": [{"sha": "f38f06d5d9411998ad2c82a6060130913a30140e", "filename": "gcc/ada/s-parame-vms-alpha.ads", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261ce0eb820454b391d8a521bad03c8d46d22359/gcc%2Fada%2Fs-parame-vms-alpha.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261ce0eb820454b391d8a521bad03c8d46d22359/gcc%2Fada%2Fs-parame-vms-alpha.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-parame-vms-alpha.ads?ref=261ce0eb820454b391d8a521bad03c8d46d22359", "patch": "@@ -31,7 +31,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This is the OpenVMS version\n+--  This is the OpenVMS Alpha version\n \n --  This package defines some system dependent parameters for GNAT. These\n --  are values that are referenced by the runtime library and are therefore", "previous_filename": "gcc/ada/s-parame-vms.ads"}, {"sha": "be85db3439bf02d77d8b2a6caad7a06af0f5c290", "filename": "gcc/ada/s-parame-vms-ia64.ads", "status": "added", "additions": 211, "deletions": 0, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261ce0eb820454b391d8a521bad03c8d46d22359/gcc%2Fada%2Fs-parame-vms-ia64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261ce0eb820454b391d8a521bad03c8d46d22359/gcc%2Fada%2Fs-parame-vms-ia64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-parame-vms-ia64.ads?ref=261ce0eb820454b391d8a521bad03c8d46d22359", "patch": "@@ -0,0 +1,211 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                    S Y S T E M . P A R A M E T E R S                     --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the Integrity OpenVMS version\n+\n+--  This package defines some system dependent parameters for GNAT. These\n+--  are values that are referenced by the runtime library and are therefore\n+--  relevant to the target machine.\n+\n+--  The parameters whose value is defined in the spec are not generally\n+--  expected to be changed. If they are changed, it will be necessary to\n+--  recompile the run-time library.\n+\n+--  The parameters which are defined by functions can be changed by modifying\n+--  the body of System.Parameters in file s-parame.adb. A change to this body\n+--  requires only rebinding and relinking of the application.\n+\n+--  Note: do not introduce any pragma Inline statements into this unit, since\n+--  otherwise the relinking and rebinding capability would be deactivated.\n+\n+package System.Parameters is\n+   pragma Pure;\n+\n+   ---------------------------------------\n+   -- Task And Stack Allocation Control --\n+   ---------------------------------------\n+\n+   type Task_Storage_Size is new Integer;\n+   --  Type used in tasking units for task storage size\n+\n+   type Size_Type is new Task_Storage_Size;\n+   --  Type used to provide task storage size to runtime\n+\n+   Unspecified_Size : constant Size_Type := Size_Type'First;\n+   --  Value used to indicate that no size type is set\n+\n+   subtype Ratio is Size_Type range -1 .. 100;\n+   Dynamic : constant Size_Type := -1;\n+   --  The secondary stack ratio is a constant between 0 and 100 which\n+   --  determines the percentage of the allocated task stack that is\n+   --  used by the secondary stack (the rest being the primary stack).\n+   --  The special value of minus one indicates that the secondary\n+   --  stack is to be allocated from the heap instead.\n+\n+   Sec_Stack_Ratio : constant Ratio := Dynamic;\n+   --  This constant defines the handling of the secondary stack\n+\n+   Sec_Stack_Dynamic : constant Boolean := Sec_Stack_Ratio = Dynamic;\n+   --  Convenient Boolean for testing for dynamic secondary stack\n+\n+   function Default_Stack_Size return Size_Type;\n+   --  Default task stack size used if none is specified\n+\n+   function Minimum_Stack_Size return Size_Type;\n+   --  Minimum task stack size permitted\n+\n+   function Adjust_Storage_Size (Size : Size_Type) return Size_Type;\n+   --  Given the storage size stored in the TCB, return the Storage_Size\n+   --  value required by the RM for the Storage_Size attribute. The\n+   --  required adjustment is as follows:\n+   --\n+   --    when Size = Unspecified_Size, return Default_Stack_Size\n+   --    when Size < Minimum_Stack_Size, return Minimum_Stack_Size\n+   --    otherwise return given Size\n+\n+   Default_Env_Stack_Size : constant Size_Type := 8_192_000;\n+   --  Assumed size of the environment task, if no other information\n+   --  is available. This value is used when stack checking is\n+   --  enabled and no GNAT_STACK_LIMIT environment variable is set.\n+\n+   Stack_Grows_Down  : constant Boolean := True;\n+   --  This constant indicates whether the stack grows up (False) or\n+   --  down (True) in memory as functions are called. It is used for\n+   --  proper implementation of the stack overflow check.\n+\n+   ----------------------------------------------\n+   -- Characteristics of types in Interfaces.C --\n+   ----------------------------------------------\n+\n+   long_bits : constant := 32;\n+   --  Number of bits in type long and unsigned_long. The normal convention\n+   --  is that this is the same as type Long_Integer, but this is not true\n+   --  of all targets. For example, in OpenVMS long /= Long_Integer.\n+\n+   ----------------------------------------------\n+   -- Behavior of Pragma Finalize_Storage_Only --\n+   ----------------------------------------------\n+\n+   --  Garbage_Collected is a Boolean constant whose value indicates the\n+   --  effect of the pragma Finalize_Storage_Entry on a controlled type.\n+\n+   --    Garbage_Collected = False\n+\n+   --      The system releases all storage on program termination only,\n+   --      but not other garbage collection occurs, so finalization calls\n+   --      are ommitted only for outer level onjects can be omitted if\n+   --      pragma Finalize_Storage_Only is used.\n+\n+   --    Garbage_Collected = True\n+\n+   --      The system provides full garbage collection, so it is never\n+   --      necessary to release storage for controlled objects for which\n+   --      a pragma Finalize_Storage_Only is used.\n+\n+   Garbage_Collected : constant Boolean := False;\n+   --  The storage mode for this system (release on program exit)\n+\n+   ---------------------\n+   -- Tasking Profile --\n+   ---------------------\n+\n+   --  In the following sections, constant parameters are defined to\n+   --  allow some optimizations and fine tuning within the tasking run time\n+   --  based on restrictions on the tasking features.\n+\n+   ----------------------\n+   -- Locking Strategy --\n+   ----------------------\n+\n+   Single_Lock : constant Boolean := False;\n+   --  Indicates whether a single lock should be used within the tasking\n+   --  run-time to protect internal structures. If True, a single lock\n+   --  will be used, meaning less locking/unlocking operations, but also\n+   --  more global contention. In general, Single_Lock should be set to\n+   --  True on single processor machines, and to False to multi-processor\n+   --  systems, but this can vary from application to application and also\n+   --  depends on the scheduling policy.\n+\n+   -------------------\n+   -- Task Abortion --\n+   -------------------\n+\n+   No_Abort : constant Boolean := False;\n+   --  This constant indicates whether abort statements and asynchronous\n+   --  transfer of control (ATC) are disallowed. If set to True, it is\n+   --  assumed that neither construct is used, and the run time does not\n+   --  need to defer/undefer abort and check for pending actions at\n+   --  completion points. A value of True for No_Abort corresponds to:\n+   --  pragma Restrictions (No_Abort_Statements);\n+   --  pragma Restrictions (Max_Asynchronous_Select_Nesting => 0);\n+\n+   ----------------------\n+   -- Dynamic Priority --\n+   ----------------------\n+\n+   Dynamic_Priority_Support : constant Boolean := True;\n+   --  This constant indicates whether dynamic changes of task priorities\n+   --  are allowed (True means normal RM mode in which such changes are\n+   --  allowed). In particular, if this is False, then we do not need to\n+   --  poll for pending base priority changes at every abort completion\n+   --  point. A value of False for Dynamic_Priority_Support corresponds\n+   --  to pragma Restrictions (No_Dynamic_Priorities);\n+\n+   ---------------------\n+   -- Task Attributes --\n+   ---------------------\n+\n+   Default_Attribute_Count : constant := 4;\n+   --  Number of pre-allocated Address-sized task attributes stored in the\n+   --  task control block.\n+\n+   --------------------\n+   -- Runtime Traces --\n+   --------------------\n+\n+   Runtime_Traces : constant Boolean := False;\n+   --  This constant indicates whether the runtime outputs traces to a\n+   --  predefined output or not (True means that traces are output).\n+   --  See System.Traces for more details.\n+\n+   ------------------------------\n+   -- Exception Message Length --\n+   ------------------------------\n+\n+   Default_Exception_Msg_Max_Length : constant := 512;\n+   --  This constant specifies the maximum number of characters to allow in an\n+   --  exception message (see RM 11.4.1(18)). The value for VMS exceeds the\n+   --  default minimum of 200 to allow for the length of chained VMS condition\n+   --  handling messages.\n+\n+end System.Parameters;"}]}