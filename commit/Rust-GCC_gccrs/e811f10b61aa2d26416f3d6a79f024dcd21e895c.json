{"sha": "e811f10b61aa2d26416f3d6a79f024dcd21e895c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgxMWYxMGI2MWFhMmQyNjQxNmYzZDZhNzlmMDI0ZGNkMjFlODk1Yw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-07T16:03:08Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-08T10:29:25Z"}, "message": "aarch64: Reimplement most vpadal intrinsics using builtins\n\nThis patch reimplements most of the vpadal intrinsics to use RTL\nbuiltins in the normal way.\nThe ones that aren't converted are the int32x2_t -> int64x1_t ones as\nthe RTL pattern doesn't currently handle\nthese modes. We don't have a V1DI mode so it would need to return a\nDImode value or a V2DI one with the first lane\nbeing the result. It's not hard to do, but it would require a bit more\nrefactoring so we can do it separately later.\n\nThis patch hopefully improves the status quo.\n\nThe new Vwhalf mode attribute is created because the existing Vwtype\nattribute maps V8QI wrongly (for this pattern) to \"8h\" as the\nsuffix rather than \"4h\" as needed.\n\ngcc/\n\t* config/aarch64/iterators.md (Vwhalf): New iterator.\n\t* config/aarch64/aarch64-simd.md (aarch64_<sur>adalp<mode>_3):\n\tRename to...\n\t(aarch64_<sur>adalp<mode>): ... This.  Make more\n\tbuiltin-friendly.\n\t(<sur>sadv16qi): Adjust callsite of the above.\n\t* config/aarch64/aarch64-simd-builtins.def (sadalp, uadalp): New\n\tbuiltins.\n\t* config/aarch64/arm_neon.h (vpadal_s8): Reimplement using\n\tbuiltins.\n\t(vpadal_s16): Likewise.\n\t(vpadal_u8): Likewise.\n\t(vpadal_u16): Likewise.\n\t(vpadalq_s8): Likewise.\n\t(vpadalq_s16): Likewise.\n\t(vpadalq_s32): Likewise.\n\t(vpadalq_u8): Likewise.\n\t(vpadalq_u16): Likewise.\n\t(vpadalq_u32): Likewise.", "tree": {"sha": "ce02315afc611de57a83c2f6cfd1d4614a6c05bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce02315afc611de57a83c2f6cfd1d4614a6c05bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e811f10b61aa2d26416f3d6a79f024dcd21e895c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e811f10b61aa2d26416f3d6a79f024dcd21e895c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e811f10b61aa2d26416f3d6a79f024dcd21e895c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e811f10b61aa2d26416f3d6a79f024dcd21e895c/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79db5945ade4480d7500dac6bea64f49331e0cde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79db5945ade4480d7500dac6bea64f49331e0cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79db5945ade4480d7500dac6bea64f49331e0cde"}], "stats": {"total": 89, "additions": 23, "deletions": 66}, "files": [{"sha": "0d611878c9dac5d352d86f9c30b3023ae440f122", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e811f10b61aa2d26416f3d6a79f024dcd21e895c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e811f10b61aa2d26416f3d6a79f024dcd21e895c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=e811f10b61aa2d26416f3d6a79f024dcd21e895c", "patch": "@@ -157,6 +157,9 @@\n   BUILTIN_VDQ_BHSI (TERNOP, saba, 0, NONE)\n   BUILTIN_VDQ_BHSI (TERNOPU, uaba, 0, NONE)\n \n+  BUILTIN_VDQV_S (BINOP, sadalp, 0, NONE)\n+  BUILTIN_VDQV_S (BINOPU, uadalp, 0, NONE)\n+\n   /* Implemented by aarch64_<sur><addsub>hn<mode>.  */\n   BUILTIN_VQN (BINOP, addhn, 0, NONE)\n   BUILTIN_VQN (BINOP, subhn, 0, NONE)"}, {"sha": "b6629bfa93e7868442fa422cc052a8909c2a2109", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e811f10b61aa2d26416f3d6a79f024dcd21e895c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e811f10b61aa2d26416f3d6a79f024dcd21e895c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=e811f10b61aa2d26416f3d6a79f024dcd21e895c", "patch": "@@ -801,13 +801,13 @@\n   [(set_attr \"type\" \"neon_arith_acc<q>\")]\n )\n \n-(define_insn \"aarch64_<sur>adalp<mode>_3\"\n+(define_insn \"aarch64_<sur>adalp<mode>\"\n   [(set (match_operand:<VDBLW> 0 \"register_operand\" \"=w\")\n-\t(unspec:<VDBLW> [(match_operand:VDQV_S 1 \"register_operand\" \"w\")\n-\t\t\t  (match_operand:<VDBLW> 2 \"register_operand\" \"0\")]\n+\t(unspec:<VDBLW> [(match_operand:VDQV_S 2 \"register_operand\" \"w\")\n+\t\t\t  (match_operand:<VDBLW> 1 \"register_operand\" \"0\")]\n \tADALP))]\n   \"TARGET_SIMD\"\n-  \"<sur>adalp\\t%0.<Vwtype>, %1.<Vtype>\"\n+  \"<sur>adalp\\t%0.<Vwhalf>, %2.<Vtype>\"\n   [(set_attr \"type\" \"neon_reduc_add<q>\")]\n )\n \n@@ -852,8 +852,7 @@\n \t\t\t\t\t       operands[2]));\n     emit_insn (gen_aarch64_<sur>abalv16qi_4 (reduc, operands[1],\n \t\t\t\t\t      operands[2], reduc));\n-    emit_insn (gen_aarch64_<sur>adalpv8hi_3 (operands[3], reduc,\n-\t\t\t\t\t      operands[3]));\n+    emit_insn (gen_aarch64_<sur>adalpv8hi (operands[3], operands[3], reduc));\n     emit_move_insn (operands[0], operands[3]);\n     DONE;\n   }"}, {"sha": "608e582d25820062a409310e7f3fc872660f8041", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 10, "deletions": 60, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e811f10b61aa2d26416f3d6a79f024dcd21e895c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e811f10b61aa2d26416f3d6a79f024dcd21e895c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=e811f10b61aa2d26416f3d6a79f024dcd21e895c", "patch": "@@ -9289,24 +9289,14 @@ __extension__ extern __inline int16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpadal_s8 (int16x4_t __a, int8x8_t __b)\n {\n-  int16x4_t __result;\n-  __asm__ (\"sadalp %0.4h,%2.8b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sadalpv8qi (__a, __b);\n }\n \n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpadal_s16 (int32x2_t __a, int16x4_t __b)\n {\n-  int32x2_t __result;\n-  __asm__ (\"sadalp %0.2s,%2.4h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sadalpv4hi (__a, __b);\n }\n \n __extension__ extern __inline int64x1_t\n@@ -9325,24 +9315,14 @@ __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpadal_u8 (uint16x4_t __a, uint8x8_t __b)\n {\n-  uint16x4_t __result;\n-  __asm__ (\"uadalp %0.4h,%2.8b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uadalpv8qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpadal_u16 (uint32x2_t __a, uint16x4_t __b)\n {\n-  uint32x2_t __result;\n-  __asm__ (\"uadalp %0.2s,%2.4h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uadalpv4hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint64x1_t\n@@ -9361,72 +9341,42 @@ __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpadalq_s8 (int16x8_t __a, int8x16_t __b)\n {\n-  int16x8_t __result;\n-  __asm__ (\"sadalp %0.8h,%2.16b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sadalpv16qi (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpadalq_s16 (int32x4_t __a, int16x8_t __b)\n {\n-  int32x4_t __result;\n-  __asm__ (\"sadalp %0.4s,%2.8h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sadalpv8hi (__a, __b);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpadalq_s32 (int64x2_t __a, int32x4_t __b)\n {\n-  int64x2_t __result;\n-  __asm__ (\"sadalp %0.2d,%2.4s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sadalpv4si (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpadalq_u8 (uint16x8_t __a, uint8x16_t __b)\n {\n-  uint16x8_t __result;\n-  __asm__ (\"uadalp %0.8h,%2.16b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uadalpv16qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpadalq_u16 (uint32x4_t __a, uint16x8_t __b)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"uadalp %0.4s,%2.8h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uadalpv8hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpadalq_u32 (uint64x2_t __a, uint32x4_t __b)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"uadalp %0.2d,%2.4s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uadalpv4si_uuu (__a, __b);\n }\n \n __extension__ extern __inline int16x4_t"}, {"sha": "5a82d9395f96bf426f3b293b5586247ec08edb59", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e811f10b61aa2d26416f3d6a79f024dcd21e895c/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e811f10b61aa2d26416f3d6a79f024dcd21e895c/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=e811f10b61aa2d26416f3d6a79f024dcd21e895c", "patch": "@@ -1291,6 +1291,11 @@\n \t\t\t  (V8HI \"4s\") (V4SI \"2d\")\n \t\t\t  (V8HF \"4s\") (V4SF \"2d\")])\n \n+;; Widened mode with half the element register suffixes for VD_BHSI/VQW/VQ_HSF.\n+(define_mode_attr Vwhalf [(V8QI \"4h\") (V4HI \"2s\")\n+\t\t\t  (V2SI \"1d\") (V16QI \"8h\")\n+\t\t\t  (V8HI \"4s\") (V4SI \"2d\")])\n+\n ;; SVE vector after narrowing.\n (define_mode_attr Ventype [(VNx8HI \"b\")\n \t\t\t   (VNx4SI \"h\") (VNx4SF \"h\")"}]}