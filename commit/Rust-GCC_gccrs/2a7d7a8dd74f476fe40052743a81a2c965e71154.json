{"sha": "2a7d7a8dd74f476fe40052743a81a2c965e71154", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE3ZDdhOGRkNzRmNDc2ZmU0MDA1Mjc0M2E4MWEyYzk2NWU3MTE1NA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2009-12-14T16:55:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-12-14T16:55:52Z"}, "message": "re PR target/41473 (dsymutil \"Assertion failed ...\")\n\n\tPR debug/41473\n\t* dwarf2out.c (AT_loc_list_ptr): New.\n\t(resolve_addr): Remove unresolved attributes and loc_list entries.\n\nFrom-SVN: r155222", "tree": {"sha": "de6bb0abac27b0afbf18fa93b34541be17a75439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de6bb0abac27b0afbf18fa93b34541be17a75439"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a7d7a8dd74f476fe40052743a81a2c965e71154", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a7d7a8dd74f476fe40052743a81a2c965e71154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a7d7a8dd74f476fe40052743a81a2c965e71154", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a7d7a8dd74f476fe40052743a81a2c965e71154/comments", "author": null, "committer": null, "parents": [{"sha": "23198957a2176cf80b4b33e17f77ab5e5dea4bfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23198957a2176cf80b4b33e17f77ab5e5dea4bfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23198957a2176cf80b4b33e17f77ab5e5dea4bfe"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "94f46c870394413c673e1b2634dd871e6bdf0a85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a7d7a8dd74f476fe40052743a81a2c965e71154/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a7d7a8dd74f476fe40052743a81a2c965e71154/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a7d7a8dd74f476fe40052743a81a2c965e71154", "patch": "@@ -1,5 +1,9 @@\n 2009-12-14  Alexandre Oliva  <aoliva@redhat.com>\n \n+\tPR debug/41473\n+\t* dwarf2out.c (AT_loc_list_ptr): New.\n+\t(resolve_addr): Remove unresolved attributes and loc_list entries.\n+\n \tPR debug/41473\n \t* dwarf2out.c (add_var_loc_to_decl): Don't drop initial empty\n \tlocations."}, {"sha": "b3aa5a5cbc1a7c9217b5592cead8b4f47d1c6996", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a7d7a8dd74f476fe40052743a81a2c965e71154/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a7d7a8dd74f476fe40052743a81a2c965e71154/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=2a7d7a8dd74f476fe40052743a81a2c965e71154", "patch": "@@ -7211,6 +7211,13 @@ AT_loc_list (dw_attr_ref a)\n   return a->dw_attr_val.v.val_loc_list;\n }\n \n+static inline dw_loc_list_ref *\n+AT_loc_list_ptr (dw_attr_ref a)\n+{\n+  gcc_assert (a && AT_class (a) == dw_val_class_loc_list);\n+  return &a->dw_attr_val.v.val_loc_list;\n+}\n+\n /* Add an address constant attribute value to a DIE.  */\n \n static inline void\n@@ -20968,28 +20975,48 @@ resolve_addr (dw_die_ref die)\n {\n   dw_die_ref c;\n   dw_attr_ref a;\n-  dw_loc_list_ref curr;\n+  dw_loc_list_ref *curr;\n   unsigned ix;\n \n   for (ix = 0; VEC_iterate (dw_attr_node, die->die_attr, ix, a); ix++)\n     switch (AT_class (a))\n       {\n       case dw_val_class_loc_list:\n-\tfor (curr = AT_loc_list (a); curr != NULL; curr = curr->dw_loc_next)\n-\t  if (!resolve_addr_in_expr (curr->expr))\n-\t    curr->expr = NULL;\n+\tcurr = AT_loc_list_ptr (a);\n+\twhile (*curr)\n+\t  {\n+\t    if (!resolve_addr_in_expr ((*curr)->expr))\n+\t      {\n+\t\tdw_loc_list_ref next = (*curr)->dw_loc_next;\n+\t\tif (next && (*curr)->ll_symbol)\n+\t\t  {\n+\t\t    gcc_assert (!next->ll_symbol);\n+\t\t    next->ll_symbol = (*curr)->ll_symbol;\n+\t\t  }\n+\t\t*curr = next;\n+\t      }\n+\t    else\n+\t      curr = &(*curr)->dw_loc_next;\n+\t  }\n+\tif (!AT_loc_list (a))\n+\t  {\n+\t    remove_AT (die, a->dw_attr);\n+\t    ix--;\n+\t  }\n \tbreak;\n       case dw_val_class_loc:\n \tif (!resolve_addr_in_expr (AT_loc (a)))\n-\t  a->dw_attr_val.v.val_loc = NULL;\n+\t  {\n+\t    remove_AT (die, a->dw_attr);\n+\t    ix--;\n+\t  }\n \tbreak;\n       case dw_val_class_addr:\n \tif (a->dw_attr == DW_AT_const_value\n \t    && resolve_one_addr (&a->dw_attr_val.v.val_addr, NULL))\n \t  {\n-\t    a->dw_attr = DW_AT_location;\n-\t    a->dw_attr_val.val_class = dw_val_class_loc;\n-\t    a->dw_attr_val.v.val_loc = NULL;\n+\t    remove_AT (die, a->dw_attr);\n+\t    ix--;\n \t  }\n \tbreak;\n       default:"}]}