{"sha": "cce7aea77b5d60f2d23d321f51472c2185d69ed6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NlN2FlYTc3YjVkNjBmMmQyM2QzMjFmNTE0NzJjMjE4NWQ2OWVkNg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-04-11T17:29:33Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-04-11T17:29:33Z"}, "message": "(all.cross, rest.encap): Delete objc-runtime and SYSCALLS.c.X.\n\n(all.cross, rest.encap): Delete objc-runtime and\nSYSCALLS.c.X.\n(OBJC, OBJECTIVE-C): Add objc-runtime.\n(proto): Add SYSCALLS.c.X.\n(libgcc2.ready, libobjc.a, sublibobjc.a, SYSCALLS.c.X): Add\ndependence on stmp-int-hdrs.\n\nFrom-SVN: r7029", "tree": {"sha": "6afae1b86cd53ff8a75d364c01fe583b2d70c7ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6afae1b86cd53ff8a75d364c01fe583b2d70c7ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cce7aea77b5d60f2d23d321f51472c2185d69ed6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cce7aea77b5d60f2d23d321f51472c2185d69ed6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cce7aea77b5d60f2d23d321f51472c2185d69ed6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cce7aea77b5d60f2d23d321f51472c2185d69ed6/comments", "author": null, "committer": null, "parents": [{"sha": "80512db770127b1a868fb97007144edc00be95d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80512db770127b1a868fb97007144edc00be95d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80512db770127b1a868fb97007144edc00be95d3"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "305d5f4a07a3917c4efcd473d0bca218ab5d86a8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce7aea77b5d60f2d23d321f51472c2185d69ed6/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce7aea77b5d60f2d23d321f51472c2185d69ed6/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=cce7aea77b5d60f2d23d321f51472c2185d69ed6", "patch": "@@ -502,13 +502,13 @@ all.internal: start.encap rest.encap\n # This is what to compile if making a cross-compiler.\n # Note that we can compile enquire using the cross-compiler just build,\n # although we can't run it on this machine.\n-all.cross: native gcc-cross g++-cross specs stmp-headers $(LIBGCC) $(STMP_FIXPROTO) objc-runtime SYSCALLS.c.X $(CROSS_TEST) $(ENQUIRE) $(EXTRA_PARTS)\n+all.cross: native gcc-cross g++-cross specs stmp-headers $(LIBGCC) $(STMP_FIXPROTO) $(CROSS_TEST) $(ENQUIRE) $(EXTRA_PARTS)\n # This is what to compile if making gcc with a cross-compiler.\n all.build: native xgcc g++ $(EXTRA_PARTS)\n # This is what must be made before installing GCC and converting libraries.\n start.encap: native xgcc g++ specs $(LIBGCC1) xlimits.h\n # These can't be made until after GCC can run.\n-rest.encap: stmp-headers $(LIBGCC) $(STMP_FIXPROTO) objc-runtime SYSCALLS.c.X $(EXTRA_PARTS)\n+rest.encap: stmp-headers $(LIBGCC) $(STMP_FIXPROTO) $(EXTRA_PARTS)\n # This is what is made with the host's compiler\n # whether making a cross compiler or not.\n native: config.status cpp $(LANGUAGES) $(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2)\n@@ -519,8 +519,8 @@ native: config.status cpp $(LANGUAGES) $(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_C\n # to do the right thing within all.cross.\n C c: cc1\n C++ c++: cc1plus\n-OBJC objc: cc1obj\n-OBJECTIVE-C objective-c: cc1obj\n+OBJC objc: cc1obj objc-runtime\n+OBJECTIVE-C objective-c: cc1obj objc-runtime\n PROTO: proto\n \n # Really, really stupid make features, such as SUN's KEEP_STATE, may force\n@@ -691,7 +691,7 @@ libgcc1.a: libgcc1.c $(CONFIG_H) $(LIB1FUNCS_EXTRA) config.status\n # Compiling libgcc2.a requires making sure that cc1, etc. have been compiled.\n # But recompiling cc1 should not force recompilation of libgcc2.a.\n # If you want to force recompilation, delete libgcc2.a.\n-libgcc2.ready: $(GCC_PASSES) $(LIBGCC2_DEPS)\n+libgcc2.ready: $(GCC_PASSES) $(LIBGCC2_DEPS) stmp-int-hdrs\n \t-if [ -f libgcc2.ready ] ; then \\\n \t\ttrue; \\\n \telse \\\n@@ -770,7 +770,7 @@ libgcc.a: $(LIBGCC1) $(LIBGCC2)\n objc-runtime: libobjc.a\n \n # Build the Objective C runtime library.\n-libobjc.a: cc1obj libgcc2.ready $(USE_COLLECT2) $(EXTRA_PARTS)\n+libobjc.a: cc1obj stmp-int-hdrs libgcc2.ready $(USE_COLLECT2) $(EXTRA_PARTS)\n \tif [ -d objc ]; then true; else mkdir objc; fi\n \tthisdir1=`pwd`; \\\n \tsrcdir1=`cd $(srcdir); pwd`; \\\n@@ -784,7 +784,7 @@ libobjc.a: cc1obj libgcc2.ready $(USE_COLLECT2) $(EXTRA_PARTS)\n \t-if $(RANLIB_TEST) ; then $(RANLIB) libobjc.a; else true; fi\n \n # This is used by objc/Makefile if the user runs that directly.\n-sublibobjc.a: cc1obj libgcc2.ready\n+sublibobjc.a: cc1obj stmp-int-hdrs libgcc2.ready\n \tthisdir1=`pwd`; \\\n \tsrcdir1=`cd $(srcdir); pwd`; \\\n \tcd objc; \\\n@@ -1413,7 +1413,7 @@ cccp.o: cccp.c $(CONFIG_H) pcp.h version.c config.status\n # Note for the stamp targets, we run the program `true' instead of\n # having an empty command (nothing following the semicolon).\n \n-proto: config.status protoize unprotoize\n+proto: config.status protoize unprotoize SYSCALLS.c.X\n \n protoize: protoize.o getopt.o getopt1.o getpwd.o version.o $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) \\\n@@ -1452,7 +1452,7 @@ getopt1.o: $(srcdir)/getopt1.c getopt.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/getopt1.c\n \n # This info describes the target machine, so compile with GCC just built.\n-SYSCALLS.c.X: $(srcdir)/sys-types.h $(srcdir)/sys-protos.h $(GCC_PASSES)\n+SYSCALLS.c.X: $(srcdir)/sys-types.h $(srcdir)/sys-protos.h $(GCC_PASSES) stmp-int-hdrs\n \t-rm -f SYSCALLS.c tmp-SYSCALLS.s\n \tcat $(srcdir)/sys-types.h $(srcdir)/sys-protos.h > SYSCALLS.c\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\"}]}