{"sha": "dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZkZTM1YjM1OWMyM2RkMGQxNTQyZjlmYmIyZGRiNWJhZDMyNzJmZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-02-01T17:26:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-02-01T17:26:17Z"}, "message": "re PR debug/64817 (compilation hangs at -O3 with -g enabled on x86_64-linux-gnu)\n\n\tPR debug/64817\n\t* cfgexpand.c (deep_ter_debug_map): New variable.\n\t(avoid_deep_ter_for_debug): New function.\n\t(expand_debug_expr): If TERed SSA_NAME is in\n\tdeep_ter_debug_map, use the corresponding DEBUG_EXPR_DECL\n\tinstead of trying to expand SSA_NAME's def stmt.\n\t(expand_debug_locations): When expanding debug bind\n\tof a DEBUG_EXPR_DECL to corresponding SSA_NAME,\n\ttemporarily remove the DEBUG_EXPR_DECL from deep_ter_debug_map's\n\tvalue.\n\t(pass_expand::execute): Call avoid_deep_ter_for_debug on\n\tall debug bind stmts.  Delete deep_ter_debug_map after\n\texpand_debug_location if non-NULL and clear it.\n\n\t* gcc.dg/pr64817-1.c: New test.\n\t* gcc.dg/pr64817-2.c: New test.\n\nFrom-SVN: r220320", "tree": {"sha": "94ca412c24ccc67dd6fdffbc04a5139e57e8e436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94ca412c24ccc67dd6fdffbc04a5139e57e8e436"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "516db2dd078c8f9fac7a3dd3ec9ef383570b1dfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516db2dd078c8f9fac7a3dd3ec9ef383570b1dfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/516db2dd078c8f9fac7a3dd3ec9ef383570b1dfb"}], "stats": {"total": 142, "additions": 141, "deletions": 1}, "files": [{"sha": "ce07fba1b741f0fd0506c117585b2513ab274b7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe", "patch": "@@ -1,3 +1,19 @@\n+2015-02-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/64817\n+\t* cfgexpand.c (deep_ter_debug_map): New variable.\n+\t(avoid_deep_ter_for_debug): New function.\n+\t(expand_debug_expr): If TERed SSA_NAME is in\n+\tdeep_ter_debug_map, use the corresponding DEBUG_EXPR_DECL\n+\tinstead of trying to expand SSA_NAME's def stmt.\n+\t(expand_debug_locations): When expanding debug bind\n+\tof a DEBUG_EXPR_DECL to corresponding SSA_NAME,\n+\ttemporarily remove the DEBUG_EXPR_DECL from deep_ter_debug_map's\n+\tvalue.\n+\t(pass_expand::execute): Call avoid_deep_ter_for_debug on\n+\tall debug bind stmts.  Delete deep_ter_debug_map after\n+\texpand_debug_location if non-NULL and clear it.\n+\n 2015-02-01  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/64851"}, {"sha": "12021de0dd5adf82d6f428977c649c69c62e6dc0", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 86, "deletions": 1, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe", "patch": "@@ -3767,6 +3767,48 @@ convert_debug_memory_address (machine_mode mode, rtx x,\n   return x;\n }\n \n+/* Map from SSA_NAMEs to corresponding DEBUG_EXPR_DECLs created\n+   by avoid_deep_ter_for_debug.  */\n+\n+static hash_map<tree, tree> *deep_ter_debug_map;\n+\n+/* Split too deep TER chains for debug stmts using debug temporaries.  */\n+\n+static void\n+avoid_deep_ter_for_debug (gimple stmt, int depth)\n+{\n+  use_operand_p use_p;\n+  ssa_op_iter iter;\n+  FOR_EACH_SSA_USE_OPERAND (use_p, stmt, iter, SSA_OP_USE)\n+    {\n+      tree use = USE_FROM_PTR (use_p);\n+      if (TREE_CODE (use) != SSA_NAME || SSA_NAME_IS_DEFAULT_DEF (use))\n+\tcontinue;\n+      gimple g = get_gimple_for_ssa_name (use);\n+      if (g == NULL)\n+\tcontinue;\n+      if (depth > 6 && !stmt_ends_bb_p (g))\n+\t{\n+\t  if (deep_ter_debug_map == NULL)\n+\t    deep_ter_debug_map = new hash_map<tree, tree>;\n+\n+\t  tree &vexpr = deep_ter_debug_map->get_or_insert (use);\n+\t  if (vexpr != NULL)\n+\t    continue;\n+\t  vexpr = make_node (DEBUG_EXPR_DECL);\n+\t  gimple def_temp = gimple_build_debug_bind (vexpr, use, g);\n+\t  DECL_ARTIFICIAL (vexpr) = 1;\n+\t  TREE_TYPE (vexpr) = TREE_TYPE (use);\n+\t  DECL_MODE (vexpr) = TYPE_MODE (TREE_TYPE (use));\n+\t  gimple_stmt_iterator gsi = gsi_for_stmt (g);\n+\t  gsi_insert_after (&gsi, def_temp, GSI_NEW_STMT);\n+\t  avoid_deep_ter_for_debug (def_temp, 0);\n+\t}\n+      else\n+\tavoid_deep_ter_for_debug (g, depth + 1);\n+    }\n+}\n+\n /* Return an RTX equivalent to the value of the parameter DECL.  */\n \n static rtx\n@@ -4654,7 +4696,16 @@ expand_debug_expr (tree exp)\n \tgimple g = get_gimple_for_ssa_name (exp);\n \tif (g)\n \t  {\n-\t    op0 = expand_debug_expr (gimple_assign_rhs_to_tree (g));\n+\t    tree t = NULL_TREE;\n+\t    if (deep_ter_debug_map)\n+\t      {\n+\t\ttree *slot = deep_ter_debug_map->get (exp);\n+\t\tif (slot)\n+\t\t  t = *slot;\n+\t      }\n+\t    if (t == NULL_TREE)\n+\t      t = gimple_assign_rhs_to_tree (g);\n+\t    op0 = expand_debug_expr (t);\n \t    if (!op0)\n \t      return NULL;\n \t  }\n@@ -4961,6 +5012,25 @@ expand_debug_locations (void)\n \t    if (INSN_VAR_LOCATION_STATUS (insn)\n \t\t== VAR_INIT_STATUS_UNINITIALIZED)\n \t      val = expand_debug_source_expr (value);\n+\t    /* The avoid_deep_ter_for_debug function inserts\n+\t       debug bind stmts after SSA_NAME definition, with the\n+\t       SSA_NAME as the whole bind location.  Disable temporarily\n+\t       expansion of that SSA_NAME into the DEBUG_EXPR_DECL\n+\t       being defined in this DEBUG_INSN.  */\n+\t    else if (deep_ter_debug_map && TREE_CODE (value) == SSA_NAME)\n+\t      {\n+\t\ttree *slot = deep_ter_debug_map->get (value);\n+\t\tif (slot)\n+\t\t  {\n+\t\t    if (*slot == INSN_VAR_LOCATION_DECL (insn))\n+\t\t      *slot = NULL_TREE;\n+\t\t    else\n+\t\t      slot = NULL;\n+\t\t  }\n+\t\tval = expand_debug_expr (value);\n+\t\tif (slot)\n+\t\t  *slot = INSN_VAR_LOCATION_DECL (insn);\n+\t      }\n \t    else\n \t      val = expand_debug_expr (value);\n \t    gcc_assert (last == get_last_insn ());\n@@ -5821,6 +5891,15 @@ pass_expand::execute (function *fun)\n   timevar_pop (TV_OUT_OF_SSA);\n   SA.partition_to_pseudo = XCNEWVEC (rtx, SA.map->num_partitions);\n \n+  if (MAY_HAVE_DEBUG_STMTS && flag_tree_ter)\n+    {\n+      gimple_stmt_iterator gsi;\n+      FOR_EACH_BB_FN (bb, cfun)\n+\tfor (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+\t  if (gimple_debug_bind_p (gsi_stmt (gsi)))\n+\t    avoid_deep_ter_for_debug (gsi_stmt (gsi), 0);\n+    }\n+\n   /* Make sure all values used by the optimization passes have sane\n      defaults.  */\n   reg_renumber = 0;\n@@ -6008,6 +6087,12 @@ pass_expand::execute (function *fun)\n   if (MAY_HAVE_DEBUG_INSNS)\n     expand_debug_locations ();\n \n+  if (deep_ter_debug_map)\n+    {\n+      delete deep_ter_debug_map;\n+      deep_ter_debug_map = NULL;\n+    }\n+\n   /* Free stuff we no longer need after GIMPLE optimizations.  */\n   free_dominance_info (CDI_DOMINATORS);\n   free_dominance_info (CDI_POST_DOMINATORS);"}, {"sha": "9e3485d73b259b3380357ebeaea58929759f2d23", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe", "patch": "@@ -1,3 +1,9 @@\n+2015-02-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/64817\n+\t* gcc.dg/pr64817-1.c: New test.\n+\t* gcc.dg/pr64817-2.c: New test.\n+\n 2015-02-01  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/64851"}, {"sha": "9d016da81134d7e65cdf7b981ebd330ddca987eb", "filename": "gcc/testsuite/gcc.dg/pr64817-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64817-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64817-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64817-1.c?ref=dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe", "patch": "@@ -0,0 +1,20 @@\n+/* PR debug/64817 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -g\" } */\n+\n+int a, b, d;\n+\n+void\n+foo (void)\n+{\n+  for (b = 0; b < 9; b++)\n+    {\n+      int e;\n+      for (d = 0; d < 5; d++)\n+\t{\n+\t  a &= 231;\n+\t  a ^= 14;\n+\t}\n+      e = (a ^= 1) < 0;\n+    }\n+}"}, {"sha": "89532a95a106e9719eb98eded2049c30fd5b5a99", "filename": "gcc/testsuite/gcc.dg/pr64817-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64817-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64817-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64817-2.c?ref=dfde35b359c23dd0d1542f9fbb2ddb5bad3272fe", "patch": "@@ -0,0 +1,13 @@\n+/* PR debug/64817 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -g\" } */\n+\n+int a;\n+\n+void\n+foo (void)\n+{\n+  int e;\n+  a = ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((an+  e = (a < 0);\n+}"}]}