{"sha": "d096ecdd9643db67bf3c17aa3345a15d62a103a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA5NmVjZGQ5NjQzZGI2N2JmM2MxN2FhMzM0NWExNWQ2MmExMDNhNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-10-29T16:28:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-10-29T16:28:40Z"}, "message": "i386-protos.h (ix86_expand_floorceil): Declare.\n\n2006-10-29  Richard Guenther  <rguenther@suse.de>\n\n\t* config/i386/i386-protos.h (ix86_expand_floorceil): Declare.\n\t(ix86_expand_floorceildf_32): Likewise.\n\t* config/i386/i386.c (ix86_expand_sse_compare_mask): New\n\tstatic helper function.\n\t(ix86_expand_floorceil): Expander for floor and ceil to SSE\n\tmath.\n\t(ix86_expand_floorceildf_32): Same for DFmode on 32bit archs.\n\t* config/i386/i386.md (floordf2): Adjust to enable floor\n\texpansion via ix86_expand_floorceil if TARGET_SSE_MATH and\n\t-fno-trapping-math is enabled and if not optimizing for size.\n\t(floorsf2, ceildf2, ceilsf2): Likewise.\n\t* config/i386/sse.md (sse_maskcmpsf3): New insn.\n\t(sse2_maskcmpdf3): Likewise.\n\n\t* gcc.target/i386/math-torture/ceil.c: New testcase.\n\t* gcc.target/i386/math-torture/floor.c: Likewise.\n\nFrom-SVN: r118145", "tree": {"sha": "7c11fdca54ae3407bf7cb2a09d0ce63be2ba8f70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c11fdca54ae3407bf7cb2a09d0ce63be2ba8f70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d096ecdd9643db67bf3c17aa3345a15d62a103a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d096ecdd9643db67bf3c17aa3345a15d62a103a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d096ecdd9643db67bf3c17aa3345a15d62a103a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d096ecdd9643db67bf3c17aa3345a15d62a103a6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7d32ff6193ad93643fda556bc0db619771241f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d32ff6193ad93643fda556bc0db619771241f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7d32ff6193ad93643fda556bc0db619771241f1"}], "stats": {"total": 327, "additions": 295, "deletions": 32}, "files": [{"sha": "8d776d5ecd1cb7d6c45800dadaee20c31f0c3a23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d096ecdd9643db67bf3c17aa3345a15d62a103a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d096ecdd9643db67bf3c17aa3345a15d62a103a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d096ecdd9643db67bf3c17aa3345a15d62a103a6", "patch": "@@ -1,3 +1,19 @@\n+2006-10-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* config/i386/i386-protos.h (ix86_expand_floorceil): Declare.\n+\t(ix86_expand_floorceildf_32): Likewise.\n+\t* config/i386/i386.c (ix86_expand_sse_compare_mask): New\n+\tstatic helper function.\n+\t(ix86_expand_floorceil): Expander for floor and ceil to SSE\n+\tmath.\n+\t(ix86_expand_floorceildf_32): Same for DFmode on 32bit archs.\n+\t* config/i386/i386.md (floordf2): Adjust to enable floor\n+\texpansion via ix86_expand_floorceil if TARGET_SSE_MATH and\n+\t-fno-trapping-math is enabled and if not optimizing for size.\n+\t(floorsf2, ceildf2, ceilsf2): Likewise.\n+\t* config/i386/sse.md (sse_maskcmpsf3): New insn.\n+\t(sse2_maskcmpdf3): Likewise.\n+\n 2006-10-29  Richard Guenther  <rguenther@suse.de>\n \n \t* builtins.c (expand_builtin_mathfn): Expand nearbyint as"}, {"sha": "a6f760cc686b077ab7e163a20c508ae68b0eeda1", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d096ecdd9643db67bf3c17aa3345a15d62a103a6/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d096ecdd9643db67bf3c17aa3345a15d62a103a6/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=d096ecdd9643db67bf3c17aa3345a15d62a103a6", "patch": "@@ -160,6 +160,8 @@ extern enum rtx_code ix86_reverse_condition (enum rtx_code, enum machine_mode);\n extern void ix86_expand_lround (rtx, rtx);\n extern void ix86_expand_lfloorceil (rtx, rtx, bool);\n extern void ix86_expand_rint (rtx, rtx);\n+extern void ix86_expand_floorceil (rtx, rtx, bool);\n+extern void ix86_expand_floorceildf_32 (rtx, rtx, bool);\n \n #ifdef TREE_CODE\n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);"}, {"sha": "6a125da252501a322103d7489ee0cfd59ea51579", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d096ecdd9643db67bf3c17aa3345a15d62a103a6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d096ecdd9643db67bf3c17aa3345a15d62a103a6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d096ecdd9643db67bf3c17aa3345a15d62a103a6", "patch": "@@ -19310,6 +19310,33 @@ ix86_expand_sse_compare_and_jump (enum rtx_code code, rtx op0, rtx op1,\n   return label;\n }\n \n+/* Expand a mask generating SSE comparison instruction comparing OP0 with OP1\n+   using comparison code CODE.  Operands are swapped for the comparison if\n+   SWAP_OPERANDS is true.  Returns a rtx for the generated mask.  */\n+static rtx\n+ix86_expand_sse_compare_mask (enum rtx_code code, rtx op0, rtx op1,\n+\t\t\t      bool swap_operands)\n+{\n+  enum machine_mode mode = GET_MODE (op0);\n+  rtx mask = gen_reg_rtx (mode);\n+\n+  if (swap_operands)\n+    {\n+      rtx tmp = op0;\n+      op0 = op1;\n+      op1 = tmp;\n+    }\n+\n+  if (mode == DFmode)\n+    emit_insn (gen_sse2_maskcmpdf3 (mask, op0, op1,\n+\t\t\t\t    gen_rtx_fmt_ee (code, mode, op0, op1)));\n+  else\n+    emit_insn (gen_sse_maskcmpsf3 (mask, op0, op1,\n+\t\t\t\t   gen_rtx_fmt_ee (code, mode, op0, op1)));\n+\n+  return mask;\n+}\n+\n /* Generate and return a rtx of mode MODE for 2**n where n is the number\n    of bits of the mantissa of MODE, which must be one of DFmode or SFmode.  */\n static rtx\n@@ -19423,4 +19450,117 @@ ix86_expand_rint (rtx operand0, rtx operand1)\n   emit_move_insn (operand0, res);\n }\n \n+/* Expand SSE2 sequence for computing floor or ceil from OPERAND1 storing\n+   into OPERAND0.  */\n+void\n+ix86_expand_floorceildf_32 (rtx operand0, rtx operand1, bool do_floor)\n+{\n+  /* C code for the stuff we expand below.\n+        double xa = fabs (x), x2;\n+        if (!isless (xa, TWO52))\n+          return x;\n+        xa = xa + TWO52 - TWO52;\n+        x2 = copysign (xa, x);\n+     Compensate.  Floor:\n+        if (x2 > x)\n+          x2 -= 1;\n+     Compensate.  Ceil:\n+        if (x2 < x)\n+          x2 += 1;\n+        return x2;\n+   */\n+  enum machine_mode mode = GET_MODE (operand0);\n+  rtx xa, TWO52, tmp, label, one, res, mask;\n+\n+  TWO52 = ix86_gen_TWO52 (mode);\n+\n+  /* Temporary for holding the result, initialized to the input\n+     operand to ease control flow.  */\n+  res = gen_reg_rtx (mode);\n+  emit_move_insn (res, operand1);\n+\n+  /* xa = abs (operand1) */\n+  xa = ix86_expand_sse_fabs (res, &mask);\n+\n+  /* if (!isless (xa, TWO52)) goto label; */\n+  label = ix86_expand_sse_compare_and_jump (UNLE, TWO52, xa, false);\n+\n+  /* xa = xa + TWO52 - TWO52; */\n+  expand_simple_binop (mode, PLUS, xa, TWO52, xa, 0, OPTAB_DIRECT);\n+  expand_simple_binop (mode, MINUS, xa, TWO52, xa, 0, OPTAB_DIRECT);\n+\n+  /* xa = copysign (xa, operand1) */\n+  ix86_sse_copysign_to_positive (xa, xa, res, mask);\n+\n+  /* generate 1.0 */\n+  one = force_reg (mode, const_double_from_real_value (dconst1, mode));\n+\n+  /* Compensate: xa = xa - (xa > operand1 ? 1 : 0) */\n+  tmp = ix86_expand_sse_compare_mask (UNGT, xa, res, !do_floor);\n+  emit_insn (gen_rtx_SET (VOIDmode, tmp,\n+                          gen_rtx_AND (mode, one, tmp)));\n+  expand_simple_binop (mode, do_floor ? MINUS : PLUS,\n+                       xa, tmp, res, 0, OPTAB_DIRECT);\n+\n+  emit_label (label);\n+  LABEL_NUSES (label) = 1;\n+\n+  emit_move_insn (operand0, res);\n+}\n+\n+/* Expand SSE2 sequence for computing floor or ceil from OPERAND1 storing\n+   into OPERAND0.  */\n+void\n+ix86_expand_floorceil (rtx operand0, rtx operand1, bool do_floor)\n+{\n+  /* C code for the stuff we expand below.\n+\tdouble xa = fabs (x), x2;\n+        if (!isless (xa, TWO52))\n+          return x;\n+\tx2 = (double)(long)x;\n+     Compensate.  Floor:\n+\tif (x2 > x)\n+\t  x2 -= 1;\n+     Compensate.  Ceil:\n+\tif (x2 < x)\n+\t  x2 += 1;\n+\treturn x2;\n+   */\n+  enum machine_mode mode = GET_MODE (operand0);\n+  rtx xa, xi, TWO52, tmp, label, one, res;\n+\n+  TWO52 = ix86_gen_TWO52 (mode);\n+\n+  /* Temporary for holding the result, initialized to the input\n+     operand to ease control flow.  */\n+  res = gen_reg_rtx (mode);\n+  emit_move_insn (res, operand1);\n+\n+  /* xa = abs (operand1) */\n+  xa = ix86_expand_sse_fabs (res, NULL);\n+\n+  /* if (!isless (xa, TWO52)) goto label; */\n+  label = ix86_expand_sse_compare_and_jump (UNLE, TWO52, xa, false);\n+\n+  /* xa = (double)(long)x */\n+  xi = gen_reg_rtx (mode == DFmode ? DImode : SImode);\n+  expand_fix (xi, res, 0);\n+  expand_float (xa, xi, 0);\n+\n+  /* generate 1.0 */\n+  one = force_reg (mode, const_double_from_real_value (dconst1, mode));\n+\n+  /* Compensate: xa = xa - (xa > operand1 ? 1 : 0) */\n+  tmp = ix86_expand_sse_compare_mask (UNGT, xa, res, !do_floor);\n+  emit_insn (gen_rtx_SET (VOIDmode, tmp,\n+                          gen_rtx_AND (mode, one, tmp)));\n+  expand_simple_binop (mode, do_floor ? MINUS : PLUS,\n+                       xa, tmp, res, 0, OPTAB_DIRECT);\n+\n+  emit_label (label);\n+  LABEL_NUSES (label) = 1;\n+\n+  emit_move_insn (operand0, res);\n+}\n+\n #include \"gt-i386.h\""}, {"sha": "99ab0db3f8f58aa89fbd6ca187b5c3b8d7ab66c2", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 82, "deletions": 32, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d096ecdd9643db67bf3c17aa3345a15d62a103a6/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d096ecdd9643db67bf3c17aa3345a15d62a103a6/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d096ecdd9643db67bf3c17aa3345a15d62a103a6", "patch": "@@ -17435,34 +17435,59 @@\n (define_expand \"floordf2\"\n   [(use (match_operand:DF 0 \"register_operand\" \"\"))\n    (use (match_operand:DF 1 \"register_operand\" \"\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n+  \"(TARGET_USE_FANCY_MATH_387\n+    && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n+    && flag_unsafe_math_optimizations)\n+   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n+       && !flag_trapping_math\n+       && !optimize_size)\"\n {\n-  rtx op0 = gen_reg_rtx (XFmode);\n-  rtx op1 = gen_reg_rtx (XFmode);\n+  if (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n+      && !flag_trapping_math\n+      && !optimize_size)\n+    {\n+      if (TARGET_64BIT)\n+\tix86_expand_floorceil (operand0, operand1, true);\n+      else\n+\tix86_expand_floorceildf_32 (operand0, operand1, true);\n+    }\n+  else\n+    {\n+      rtx op0 = gen_reg_rtx (XFmode);\n+      rtx op1 = gen_reg_rtx (XFmode);\n \n-  emit_insn (gen_extenddfxf2 (op1, operands[1]));\n-  emit_insn (gen_frndintxf2_floor (op0, op1));\n+      emit_insn (gen_extenddfxf2 (op1, operands[1]));\n+      emit_insn (gen_frndintxf2_floor (op0, op1));\n \n-  emit_insn (gen_truncxfdf2_i387_noop (operands[0], op0));\n+      emit_insn (gen_truncxfdf2_i387_noop (operands[0], op0));\n+    }\n   DONE;\n })\n \n (define_expand \"floorsf2\"\n   [(use (match_operand:SF 0 \"register_operand\" \"\"))\n    (use (match_operand:SF 1 \"register_operand\" \"\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n+  \"(TARGET_USE_FANCY_MATH_387\n+    && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n+    && flag_unsafe_math_optimizations)\n+   || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n+       && !flag_trapping_math\n+       && !optimize_size)\"\n {\n-  rtx op0 = gen_reg_rtx (XFmode);\n-  rtx op1 = gen_reg_rtx (XFmode);\n+  if (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n+      && !flag_trapping_math\n+      && !optimize_size)\n+    ix86_expand_floorceil (operand0, operand1, true);\n+  else\n+    {\n+      rtx op0 = gen_reg_rtx (XFmode);\n+      rtx op1 = gen_reg_rtx (XFmode);\n \n-  emit_insn (gen_extendsfxf2 (op1, operands[1]));\n-  emit_insn (gen_frndintxf2_floor (op0, op1));\n+      emit_insn (gen_extendsfxf2 (op1, operands[1]));\n+      emit_insn (gen_frndintxf2_floor (op0, op1));\n \n-  emit_insn (gen_truncxfsf2_i387_noop (operands[0], op0));\n+      emit_insn (gen_truncxfsf2_i387_noop (operands[0], op0));\n+    }\n   DONE;\n })\n \n@@ -17696,34 +17721,59 @@\n (define_expand \"ceildf2\"\n   [(use (match_operand:DF 0 \"register_operand\" \"\"))\n    (use (match_operand:DF 1 \"register_operand\" \"\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n+  \"(TARGET_USE_FANCY_MATH_387\n+    && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n+    && flag_unsafe_math_optimizations)\n+   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n+       && !flag_trapping_math\n+       && !optimize_size)\"\n {\n-  rtx op0 = gen_reg_rtx (XFmode);\n-  rtx op1 = gen_reg_rtx (XFmode);\n+  if (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n+      && !flag_trapping_math\n+      && !optimize_size)\n+    {\n+      if (TARGET_64BIT)\n+\tix86_expand_floorceil (operand0, operand1, false);\n+      else\n+\tix86_expand_floorceildf_32 (operand0, operand1, false);\n+    }\n+  else\n+    {\n+      rtx op0 = gen_reg_rtx (XFmode);\n+      rtx op1 = gen_reg_rtx (XFmode);\n \n-  emit_insn (gen_extenddfxf2 (op1, operands[1]));\n-  emit_insn (gen_frndintxf2_ceil (op0, op1));\n+      emit_insn (gen_extenddfxf2 (op1, operands[1]));\n+      emit_insn (gen_frndintxf2_ceil (op0, op1));\n \n-  emit_insn (gen_truncxfdf2_i387_noop (operands[0], op0));\n+      emit_insn (gen_truncxfdf2_i387_noop (operands[0], op0));\n+    }\n   DONE;\n })\n \n (define_expand \"ceilsf2\"\n   [(use (match_operand:SF 0 \"register_operand\" \"\"))\n    (use (match_operand:SF 1 \"register_operand\" \"\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n+  \"(TARGET_USE_FANCY_MATH_387\n+    && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n+    && flag_unsafe_math_optimizations)\n+   || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n+       && !flag_trapping_math\n+       && !optimize_size)\"\n {\n-  rtx op0 = gen_reg_rtx (XFmode);\n-  rtx op1 = gen_reg_rtx (XFmode);\n+  if (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n+      && !flag_trapping_math\n+      && !optimize_size)\n+    ix86_expand_floorceil (operand0, operand1, false);\n+  else\n+    {\n+      rtx op0 = gen_reg_rtx (XFmode);\n+      rtx op1 = gen_reg_rtx (XFmode);\n \n-  emit_insn (gen_extendsfxf2 (op1, operands[1]));\n-  emit_insn (gen_frndintxf2_ceil (op0, op1));\n+      emit_insn (gen_extendsfxf2 (op1, operands[1]));\n+      emit_insn (gen_frndintxf2_ceil (op0, op1));\n \n-  emit_insn (gen_truncxfsf2_i387_noop (operands[0], op0));\n+      emit_insn (gen_truncxfsf2_i387_noop (operands[0], op0));\n+    }\n   DONE;\n })\n "}, {"sha": "78976ed441fdda38953619636a0a0d45493daeea", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d096ecdd9643db67bf3c17aa3345a15d62a103a6/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d096ecdd9643db67bf3c17aa3345a15d62a103a6/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d096ecdd9643db67bf3c17aa3345a15d62a103a6", "patch": "@@ -733,6 +733,16 @@\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"mode\" \"V4SF\")])\n \n+(define_insn \"sse_maskcmpsf3\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n+\t(match_operator:SF 3 \"sse_comparison_operator\"\n+\t\t[(match_operand:SF 1 \"register_operand\" \"0\")\n+\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"xm\")]))]\n+  \"TARGET_SSE\"\n+  \"cmp%D3ss\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"mode\" \"SF\")])\n+\n (define_insn \"sse_vmmaskcmpv4sf3\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n \t(vec_merge:V4SF\n@@ -1718,6 +1728,16 @@\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"mode\" \"V2DF\")])\n \n+(define_insn \"sse2_maskcmpdf3\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=x\")\n+\t(match_operator:DF 3 \"sse_comparison_operator\"\n+\t\t[(match_operand:DF 1 \"register_operand\" \"0\")\n+\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"xm\")]))]\n+  \"TARGET_SSE2\"\n+  \"cmp%D3sd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"mode\" \"DF\")])\n+\n (define_insn \"sse2_vmmaskcmpv2df3\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n \t(vec_merge:V2DF"}, {"sha": "55d7f956939cca3259c35dce6550c53a1beb0e58", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d096ecdd9643db67bf3c17aa3345a15d62a103a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d096ecdd9643db67bf3c17aa3345a15d62a103a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d096ecdd9643db67bf3c17aa3345a15d62a103a6", "patch": "@@ -1,3 +1,8 @@\n+2006-10-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/math-torture/ceil.c: New testcase.\n+\t* gcc.target/i386/math-torture/floor.c: Likewise.\n+\n 2006-10-29  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.target/i386/math-torture/rint.c: New testcase."}, {"sha": "dfccd7af4309b4031cc26d29d334efa1a053dfde", "filename": "gcc/testsuite/gcc.target/i386/math-torture/ceil.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d096ecdd9643db67bf3c17aa3345a15d62a103a6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Fceil.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d096ecdd9643db67bf3c17aa3345a15d62a103a6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Fceil.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Fceil.c?ref=d096ecdd9643db67bf3c17aa3345a15d62a103a6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do assemble } */\n+\n+float testlf (float x)\n+{\n+  return __builtin_ceilf (x);\n+}\n+double testl (double x)\n+{\n+  return __builtin_ceil (x);\n+}\n+long double testll (long double x)\n+{\n+  return __builtin_ceill (x);\n+}\n+"}, {"sha": "0c3aa915644b9b777ff803cfdfbfd7890701faa3", "filename": "gcc/testsuite/gcc.target/i386/math-torture/floor.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d096ecdd9643db67bf3c17aa3345a15d62a103a6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Ffloor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d096ecdd9643db67bf3c17aa3345a15d62a103a6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Ffloor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Ffloor.c?ref=d096ecdd9643db67bf3c17aa3345a15d62a103a6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do assemble } */\n+\n+float testlf (float x)\n+{\n+  return __builtin_floorf (x);\n+}\n+double testl (double x)\n+{\n+  return __builtin_floor (x);\n+}\n+long double testll (long double x)\n+{\n+  return __builtin_floorl (x);\n+}\n+"}]}