{"sha": "c61ef4169e502c5b67306f3b32cf463e55309d6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYxZWY0MTY5ZTUwMmM1YjY3MzA2ZjNiMzJjZjQ2M2U1NTMwOWQ2ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-17T06:22:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-17T06:22:32Z"}, "message": "[multiple changes]\n\n2014-07-17  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_aux.ads: Minor comment addition.\n\n2014-07-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Make_Call_Into_Operator): If the call is already\n\ta rewriting of an operator node, there are no actuals to be\n\tpropagated from original node to rewritten node when in ASIS mode.\n\n2014-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Contract,\n\tAnalyze_Subprogram_Contract): Add new local variable Mode. Save\n\tand restore the SPARK mode of the related construct in a\n\tstack-like fashion.\n\t* sem_ch7.adb (Analyze_Package_Body_Contract,\n\tAnalyze_Package_Contract): Add new local variable Mode. Save and\n\trestore the SPARK mode of the related construct in a stack-like fashion.\n\t* sem_util.adb Remove with and use clause for Opt.\n\t(Restore_SPARK_Mode): New routine.\n\t(Save_SPARK_Mode_And_Set): New routine.\n\t* sem_util.ads Add with and use clause for Opt.\n\t(Restore_SPARK_Mode): New routine.\n\t(Save_SPARK_Mode_And_Set): New routine.\n\n2014-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_util.adb (Is_Aliased): Transient objects\n\twithin an expression with actions cannot be considered aliased.\n\nFrom-SVN: r212721", "tree": {"sha": "a8d4010884d73ff2803ee4cb3b7d27fc326073aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8d4010884d73ff2803ee4cb3b7d27fc326073aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c61ef4169e502c5b67306f3b32cf463e55309d6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61ef4169e502c5b67306f3b32cf463e55309d6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c61ef4169e502c5b67306f3b32cf463e55309d6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61ef4169e502c5b67306f3b32cf463e55309d6e/comments", "author": null, "committer": null, "parents": [{"sha": "36295779910f4a972c960a95f8586bcdff4f9fde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36295779910f4a972c960a95f8586bcdff4f9fde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36295779910f4a972c960a95f8586bcdff4f9fde"}], "stats": {"total": 120, "additions": 116, "deletions": 4}, "files": [{"sha": "1e18c48fc98d78ef37312f8ff57178c04badee2f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61ef4169e502c5b67306f3b32cf463e55309d6e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61ef4169e502c5b67306f3b32cf463e55309d6e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c61ef4169e502c5b67306f3b32cf463e55309d6e", "patch": "@@ -1,3 +1,34 @@\n+2014-07-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_aux.ads: Minor comment addition.\n+\n+2014-07-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Make_Call_Into_Operator): If the call is already\n+\ta rewriting of an operator node, there are no actuals to be\n+\tpropagated from original node to rewritten node when in ASIS mode.\n+\n+2014-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Contract,\n+\tAnalyze_Subprogram_Contract): Add new local variable Mode. Save\n+\tand restore the SPARK mode of the related construct in a\n+\tstack-like fashion.\n+\t* sem_ch7.adb (Analyze_Package_Body_Contract,\n+\tAnalyze_Package_Contract): Add new local variable Mode. Save and\n+\trestore the SPARK mode of the related construct in a stack-like fashion.\n+\t* sem_util.adb Remove with and use clause for Opt.\n+\t(Restore_SPARK_Mode): New routine.\n+\t(Save_SPARK_Mode_And_Set): New routine.\n+\t* sem_util.ads Add with and use clause for Opt.\n+\t(Restore_SPARK_Mode): New routine.\n+\t(Save_SPARK_Mode_And_Set): New routine.\n+\n+2014-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_util.adb (Is_Aliased): Transient objects\n+\twithin an expression with actions cannot be considered aliased.\n+\n 2014-07-17  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem.ads (Scope_Stack_Entry): Reorganize storage of action lists;"}, {"sha": "6eb4243bcd3cd58672c2a7d50c840b94e8b83906", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61ef4169e502c5b67306f3b32cf463e55309d6e/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61ef4169e502c5b67306f3b32cf463e55309d6e/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=c61ef4169e502c5b67306f3b32cf463e55309d6e", "patch": "@@ -4557,6 +4557,15 @@ package body Exp_Util is\n       --  Start of processing for Is_Aliased\n \n       begin\n+         --  Aliasing in expression with actions does not matter because the\n+         --  scope of the transient object is always limited by the scope of\n+         --  the EWA. Such objects are always hooked and always finalized at\n+         --  the end of the EWA's scope.\n+\n+         if Nkind (Rel_Node) = N_Expression_With_Actions then\n+            return False;\n+         end if;\n+\n          Stmt := First_Stmt;\n          while Present (Stmt) loop\n             if Nkind (Stmt) = N_Object_Declaration then\n@@ -7343,7 +7352,7 @@ package body Exp_Util is\n             elsif Is_Access_Type (Obj_Typ)\n               and then Present (Status_Flag_Or_Transient_Decl (Obj_Id))\n               and then Nkind (Status_Flag_Or_Transient_Decl (Obj_Id)) =\n-                                                        N_Object_Declaration\n+                                N_Object_Declaration\n               and then Is_Finalizable_Transient\n                          (Status_Flag_Or_Transient_Decl (Obj_Id), Decl)\n             then"}, {"sha": "1fb9068213d8c75cc82917b158975c621228f0aa", "filename": "gcc/ada/sem_aux.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61ef4169e502c5b67306f3b32cf463e55309d6e/gcc%2Fada%2Fsem_aux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61ef4169e502c5b67306f3b32cf463e55309d6e/gcc%2Fada%2Fsem_aux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.ads?ref=c61ef4169e502c5b67306f3b32cf463e55309d6e", "patch": "@@ -255,6 +255,12 @@ package Sem_Aux is\n    --  Defined in tagged types. Set if an External_Tag rep. clause has been\n    --  given for this type. Use to avoid the generation of the default\n    --  External_Tag.\n+   --\n+   --  Note: we used to use an entity flag for this purpose, but that was wrong\n+   --  because it was not propagated from the private view to the full view. We\n+   --  could have added that propagation, but it would have been an annoying\n+   --  irregularity compared to other representation aspects, and the cost of\n+   --  looking up the aspect when needed is small.\n \n    function Has_Unconstrained_Elements (T : Entity_Id) return Boolean;\n    --  True if T has discriminants and is unconstrained, or is an array type"}, {"sha": "ce4c8b9b8b448b233d6a2ff6ce2f0044688efec6", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61ef4169e502c5b67306f3b32cf463e55309d6e/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61ef4169e502c5b67306f3b32cf463e55309d6e/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=c61ef4169e502c5b67306f3b32cf463e55309d6e", "patch": "@@ -2033,12 +2033,15 @@ package body Sem_Ch6 is\n \n    procedure Analyze_Subprogram_Body_Contract (Body_Id : Entity_Id) is\n       Body_Decl   : constant Node_Id := Parent (Parent (Body_Id));\n+      Mode        : SPARK_Mode_Type;\n       Prag        : Node_Id;\n       Ref_Depends : Node_Id := Empty;\n       Ref_Global  : Node_Id := Empty;\n       Spec_Id     : Entity_Id;\n \n    begin\n+      Save_SPARK_Mode_And_Set (Body_Id, Mode);\n+\n       --  When a subprogram body declaration is illegal, its defining entity is\n       --  left unanalyzed. There is nothing left to do in this case because the\n       --  body lacks a contract, or even a proper Ekind.\n@@ -2112,6 +2115,8 @@ package body Sem_Ch6 is\n                Body_Decl, Spec_Id);\n          end if;\n       end if;\n+\n+      Restore_SPARK_Mode (Mode);\n    end Analyze_Subprogram_Body_Contract;\n \n    ------------------------------------\n@@ -3680,13 +3685,16 @@ package body Sem_Ch6 is\n       Case_Prag    : Node_Id := Empty;\n       Depends      : Node_Id := Empty;\n       Global       : Node_Id := Empty;\n+      Mode         : SPARK_Mode_Type;\n       Nam          : Name_Id;\n       Post_Prag    : Node_Id := Empty;\n       Prag         : Node_Id;\n       Seen_In_Case : Boolean := False;\n       Seen_In_Post : Boolean := False;\n \n    begin\n+      Save_SPARK_Mode_And_Set (Subp, Mode);\n+\n       if Present (Items) then\n \n          --  Analyze pre- and postconditions\n@@ -3808,6 +3816,8 @@ package body Sem_Ch6 is\n               (\"function postcondition does not mention result?T?\", Post_Prag);\n          end if;\n       end if;\n+\n+      Restore_SPARK_Mode (Mode);\n    end Analyze_Subprogram_Contract;\n \n    ------------------------------------"}, {"sha": "372fd86ce6fe84236ecd7dd772aaba48ab3e5c03", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61ef4169e502c5b67306f3b32cf463e55309d6e/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61ef4169e502c5b67306f3b32cf463e55309d6e/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=c61ef4169e502c5b67306f3b32cf463e55309d6e", "patch": "@@ -180,9 +180,12 @@ package body Sem_Ch7 is\n \n    procedure Analyze_Package_Body_Contract (Body_Id : Entity_Id) is\n       Spec_Id : constant Entity_Id := Spec_Entity (Body_Id);\n+      Mode    : SPARK_Mode_Type;\n       Prag    : Node_Id;\n \n    begin\n+      Save_SPARK_Mode_And_Set (Body_Id, Mode);\n+\n       Prag := Get_Pragma (Body_Id, Pragma_Refined_State);\n \n       --  The analysis of pragma Refined_State detects whether the spec has\n@@ -200,6 +203,8 @@ package body Sem_Ch7 is\n       then\n          Error_Msg_N (\"package & requires state refinement\", Spec_Id);\n       end if;\n+\n+      Restore_SPARK_Mode (Mode);\n    end Analyze_Package_Body_Contract;\n \n    ---------------------------------\n@@ -839,9 +844,12 @@ package body Sem_Ch7 is\n    ------------------------------\n \n    procedure Analyze_Package_Contract (Pack_Id : Entity_Id) is\n+      Mode : SPARK_Mode_Type;\n       Prag : Node_Id;\n \n    begin\n+      Save_SPARK_Mode_And_Set (Pack_Id, Mode);\n+\n       --  Analyze the initialization related pragmas. Initializes must come\n       --  before Initial_Condition due to item dependencies.\n \n@@ -867,6 +875,8 @@ package body Sem_Ch7 is\n             Check_Missing_Part_Of (Pack_Id);\n          end if;\n       end if;\n+\n+      Restore_SPARK_Mode (Mode);\n    end Analyze_Package_Contract;\n \n    ---------------------------------"}, {"sha": "dfb3fe5e188af1506748fcbdba6ecbd8c9a2716e", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61ef4169e502c5b67306f3b32cf463e55309d6e/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61ef4169e502c5b67306f3b32cf463e55309d6e/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=c61ef4169e502c5b67306f3b32cf463e55309d6e", "patch": "@@ -1564,9 +1564,13 @@ package body Sem_Res is\n       --  the call has already been constant-folded, nothing to do. We\n       --  relocate the operand nodes rather than copy them, to preserve\n       --  original_node pointers, given that the operands themselves may\n-      --  have been rewritten.\n+      --  have been rewritten. If the call was itself a rewriting of an\n+      --  operator node, nothing to do.\n \n-      if ASIS_Mode and then Nkind (N) in N_Op then\n+      if ASIS_Mode\n+        and then Nkind (N) in N_Op\n+        and then Nkind (Original_Node (N)) = N_Function_Call\n+      then\n          if Is_Binary then\n             Rewrite (First (Parameter_Associations (Original_Node (N))),\n                Relocate_Node (Left_Opnd (N)));"}, {"sha": "5ae64c5cf5c7a5fb0368b3bc54dcc9fa4907d18f", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61ef4169e502c5b67306f3b32cf463e55309d6e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61ef4169e502c5b67306f3b32cf463e55309d6e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=c61ef4169e502c5b67306f3b32cf463e55309d6e", "patch": "@@ -41,7 +41,6 @@ with Namet.Sp; use Namet.Sp;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n with Output;   use Output;\n-with Opt;      use Opt;\n with Restrict; use Restrict;\n with Rident;   use Rident;\n with Rtsfind;  use Rtsfind;\n@@ -15321,6 +15320,15 @@ package body Sem_Util is\n       Reset_Analyzed (N);\n    end Reset_Analyzed_Flags;\n \n+   ------------------------\n+   -- Restore_SPARK_Mode --\n+   ------------------------\n+\n+   procedure Restore_SPARK_Mode (Mode : SPARK_Mode_Type) is\n+   begin\n+      SPARK_Mode := Mode;\n+   end Restore_SPARK_Mode;\n+\n    --------------------------------\n    -- Returns_Unconstrained_Type --\n    --------------------------------\n@@ -15624,6 +15632,28 @@ package body Sem_Util is\n       end if;\n    end Same_Value;\n \n+   -----------------------------\n+   -- Save_SPARK_Mode_And_Set --\n+   -----------------------------\n+\n+   procedure Save_SPARK_Mode_And_Set\n+     (Context : Entity_Id;\n+      Mode    : out SPARK_Mode_Type)\n+   is\n+      Prag : constant Node_Id := SPARK_Pragma (Context);\n+\n+   begin\n+      --  Save the current mode in effect\n+\n+      Mode := SPARK_Mode;\n+\n+      --  Set the mode of the context as the current SPARK mode\n+\n+      if Present (Prag) then\n+         SPARK_Mode := Get_SPARK_Mode_From_Pragma (Prag);\n+      end if;\n+   end Save_SPARK_Mode_And_Set;\n+\n    ------------------------\n    -- Scope_Is_Transient --\n    ------------------------"}, {"sha": "9d40a8594a474e694885dc39c22c511227b27b66", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61ef4169e502c5b67306f3b32cf463e55309d6e/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61ef4169e502c5b67306f3b32cf463e55309d6e/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=c61ef4169e502c5b67306f3b32cf463e55309d6e", "patch": "@@ -28,6 +28,7 @@\n with Einfo;   use Einfo;\n with Exp_Tss; use Exp_Tss;\n with Namet;   use Namet;\n+with Opt;     use Opt;\n with Snames;  use Snames;\n with Types;   use Types;\n with Uintp;   use Uintp;\n@@ -1689,6 +1690,10 @@ package Sem_Util is\n    procedure Reset_Analyzed_Flags (N : Node_Id);\n    --  Reset the Analyzed flags in all nodes of the tree whose root is N\n \n+   procedure Restore_SPARK_Mode (Mode : SPARK_Mode_Type);\n+   --  Set the current SPARK_Mode to whatever Mode denotes. This routime must\n+   --  be used in tandem with Save_SPARK_Mode_And_Set.\n+\n    function Returns_Unconstrained_Type (Subp : Entity_Id) return Boolean;\n    --  Return true if Subp is a function that returns an unconstrained type\n \n@@ -1740,6 +1745,13 @@ package Sem_Util is\n    --  A result of False does not necessarily mean they have different values,\n    --  just that it is not possible to determine they have the same value.\n \n+   procedure Save_SPARK_Mode_And_Set\n+     (Context : Entity_Id;\n+      Mode    : out SPARK_Mode_Type);\n+   --  Save the current SPARK_Mode in effect in Mode. Establish the SPARK_Mode\n+   --  (if any) of a package or a subprogram denoted by Context. This routine\n+   --  must be used in tandem with Restore_SPARK_Mode.\n+\n    function Scope_Within_Or_Same (Scope1, Scope2 : Entity_Id) return Boolean;\n    --  Determines if the entity Scope1 is the same as Scope2, or if it is\n    --  inside it, where both entities represent scopes. Note that scopes"}]}