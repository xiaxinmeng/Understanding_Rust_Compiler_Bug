{"sha": "25e651ca8efee467e836ead3b06a2d23e4de18f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVlNjUxY2E4ZWZlZTQ2N2U4MzZlYWQzYjA2YTJkMjNlNGRlMThmNw==", "commit": {"author": {"name": "Andrew Stubbs", "email": "andrew.stubbs@st.com", "date": "2006-03-27T14:11:14Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2006-03-27T14:11:14Z"}, "message": "superh.opt: New file.\n\n2006-03-27  Andrew Stubbs <andrew.stubbs@st.com>\n\t    J\"orn Rennecke <joern.rennecke@st.com>\n\n\t* superh.opt: New file.\n\t* sh.c (boardtype, osruntime): Remove.\n\t* superh.h (SUBTARGET_OPTIONS): Remove.\n\t* config.gcc (sh*-superh-elf): Add sh/superh.opt to extra_options.\n\n\t* config.gcc (sh*-*-*): Don't use c-c ranges for tr.  Quote sed\n\targuments with ^ and/or [].\n\n\t* config.gcc (sh-*-*): Add quoting to account for quirk of\n\tSolaris /bin/sh.\n\tReplace == with = in enable_incomplete_targets test.\n\n\t* config/sh/superh.h (SUBTARGET_LINK_SPEC): Replace LITTLE_ENDIAN_BIT\n\twith MASK_LITTLE_ENDIAN.\n\n\t* config.gcc (sh*-superh-elf): Add sh/superh.h to tm_file.\n\t* config/sh/sh.opt: Added to some comments.\n\t* config/sh/superh.h: Removed some chaff.\n\n\t* config/sh/sh.opt: Add m4-[1234]00* options.\n\t* config/sh/sh.c (sh_handle_option): Likewise.\n\t* config/sh/t-sh (IC_EXTRA_PARTS, EXTRA_MULTILIB_PARTS): Define.\n\t(ic_invalidate_array_4-100.o): New rule.\n\t($(T)libic_invalidate_array_4-100.a): Likewise.\n\t(ic_invalidate_array_4-200.o): Likewise.\n\t($(T)libic_invalidate_array_4-200.a): Likewise.\n\t(ic_invalidate_array_4a.o): Likewise.\n\t($(T)libic_invalidate_array_4a.a): Likewise.\n\t* config/sh/t-elf (EXTRA_MULTILIB_PARTS): Add IC_EXTRA_PARTS.\n\t* config/sh/embed-elf.h (LIBGCC_SPEC): Add clauses for m4-100*,\n\tm4-200*, and m4a*.\n\t* config/sh/crt1.asm: Merged in profiling code.\n\t* config/sh/superh.h (STARTFILE_SPEC): Override.\n\t* config/sh/t-superh: Override EXTRA_MULTILIB_PARTS.\n\tAdd rules for $(T)crt1-mmu.o, $(T)gcrt1-mmu.o and $(T)gcrt1.o.\n\t* config.gcc (sh*-superh-elf): Add t-superh to tmake_file.\n\n\t* t-sh (MULTILIB_MATCHES): Add sh4-[1245]00* variants.\n\t* config/sh/t-superh: Removed now-redundant MULTILIB_OPTIONS /\n\tMULTILIB_DIRNAMES / MULTILIB_MATCHES settings.\n\n\t* sh.opt (mpretend-cmove): New option.\n\t* sh.h (OPERRIDE_OPTIONS): Switch it off if not TARGET_SH1.\n\t* sh.md (movsicc_t_false, movsicc_t_tru): New patterns.\n\t(movsicc): Add TARGET_PRETEND_CMOVE code.\n\nCo-Authored-By: J\"orn Rennecke <joern.rennecke@st.com>\n\nFrom-SVN: r112421", "tree": {"sha": "cbd153e204fbb1c334086aedb0b89dec61e430e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbd153e204fbb1c334086aedb0b89dec61e430e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25e651ca8efee467e836ead3b06a2d23e4de18f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25e651ca8efee467e836ead3b06a2d23e4de18f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25e651ca8efee467e836ead3b06a2d23e4de18f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25e651ca8efee467e836ead3b06a2d23e4de18f7/comments", "author": null, "committer": null, "parents": [{"sha": "74aa8b4b45a6d65fbd9a05545bcc5372967d5a74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74aa8b4b45a6d65fbd9a05545bcc5372967d5a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74aa8b4b45a6d65fbd9a05545bcc5372967d5a74"}], "stats": {"total": 575, "additions": 450, "deletions": 125}, "files": [{"sha": "7e1dea7a9525c9d6c6b2f41290efb307bb686d23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25e651ca8efee467e836ead3b06a2d23e4de18f7", "patch": "@@ -1,3 +1,52 @@\n+2006-03-27  Andrew Stubbs <andrew.stubbs@st.com>\n+\t    J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\t* superh.opt: New file.\n+\t* sh.c (boardtype, osruntime): Remove.\n+\t* superh.h (SUBTARGET_OPTIONS): Remove.\n+\t* config.gcc (sh*-superh-elf): Add sh/superh.opt to extra_options.\n+\n+\t* config.gcc (sh*-*-*): Don't use c-c ranges for tr.  Quote sed\n+\targuments with ^ and/or [].\n+\n+\t* config.gcc (sh-*-*): Add quoting to account for quirk of\n+\tSolaris /bin/sh.\n+\tReplace == with = in enable_incomplete_targets test.\n+\n+\t* config/sh/superh.h (SUBTARGET_LINK_SPEC): Replace LITTLE_ENDIAN_BIT\n+\twith MASK_LITTLE_ENDIAN.\n+\n+\t* config.gcc (sh*-superh-elf): Add sh/superh.h to tm_file.\n+\t* config/sh/sh.opt: Added to some comments.\n+\t* config/sh/superh.h: Removed some chaff.\n+\n+\t* config/sh/sh.opt: Add m4-[1234]00* options.\n+\t* config/sh/sh.c (sh_handle_option): Likewise.\n+\t* config/sh/t-sh (IC_EXTRA_PARTS, EXTRA_MULTILIB_PARTS): Define.\n+\t(ic_invalidate_array_4-100.o): New rule.\n+\t($(T)libic_invalidate_array_4-100.a): Likewise.\n+\t(ic_invalidate_array_4-200.o): Likewise.\n+\t($(T)libic_invalidate_array_4-200.a): Likewise.\n+\t(ic_invalidate_array_4a.o): Likewise.\n+\t($(T)libic_invalidate_array_4a.a): Likewise.\n+\t* config/sh/t-elf (EXTRA_MULTILIB_PARTS): Add IC_EXTRA_PARTS.\n+\t* config/sh/embed-elf.h (LIBGCC_SPEC): Add clauses for m4-100*,\n+\tm4-200*, and m4a*.\n+\t* config/sh/crt1.asm: Merged in profiling code.\n+\t* config/sh/superh.h (STARTFILE_SPEC): Override.\n+\t* config/sh/t-superh: Override EXTRA_MULTILIB_PARTS.\n+\tAdd rules for $(T)crt1-mmu.o, $(T)gcrt1-mmu.o and $(T)gcrt1.o.\n+\t* config.gcc (sh*-superh-elf): Add t-superh to tmake_file.\n+\n+\t* t-sh (MULTILIB_MATCHES): Add sh4-[1245]00* variants.\n+\t* config/sh/t-superh: Removed now-redundant MULTILIB_OPTIONS /\n+\tMULTILIB_DIRNAMES / MULTILIB_MATCHES settings.\n+\n+\t* sh.opt (mpretend-cmove): New option.\n+\t* sh.h (OPERRIDE_OPTIONS): Switch it off if not TARGET_SH1.\n+\t* sh.md (movsicc_t_false, movsicc_t_tru): New patterns.\n+\t(movsicc): Add TARGET_PRETEND_CMOVE code.\n+\n 2006-03-27  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390-protos.h (s390_hard_regno_mode_ok, "}, {"sha": "96a547e1f13eb9e4d0029a6f91a5c669ddeb19d2", "filename": "gcc/config.gcc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=25e651ca8efee467e836ead3b06a2d23e4de18f7", "patch": "@@ -1949,7 +1949,8 @@ sh-*-symbianelf* | sh[12346l]*-*-symbianelf* | \\\n \t\t\t\twith_libgloss=yes\n \t\t\t\ttm_file=\"${tm_file} sh/newlib.h\"\n \t\t\tfi\n-\t\t\ttm_file=\"${tm_file} sh/embed-elf.h\" ;;\n+\t\t\ttm_file=\"${tm_file} sh/embed-elf.h\"\n+\t\t\textra_options=\"${extra_options} sh/superh.opt\" ;;\n \t*)\t\tif test x$with_newlib = xyes \\\n \t\t\t   && test x$with_libgloss = xyes; then\n \t\t\t\ttm_file=\"${tm_file} sh/newlib.h\"\n@@ -2048,9 +2049,9 @@ sh-*-symbianelf* | sh[12346l]*-*-symbianelf* | \\\n \t\t\tsh_multilibs=\"`echo $sh_multilibs|sed -e s/m4/sh4-nofpu/ -e s/,m4-[^,]*//g -e s/,m[23]e// -e s/m2a,m2a-single/m2a-nofpu/ -e s/m5-..m....,//g`\"\n \t\tfi\n \tfi\n-\ttarget_cpu_default=SELECT_`echo ${sh_cpu_default}|tr a-z- A-Z_`\n+\ttarget_cpu_default=SELECT_`echo ${sh_cpu_default}|tr abcdefghijklmnopqrstuvwxyz- ABCDEFGHIJKLMNOPQRSTUVWXYZ_`\n \ttm_defines=${tm_defines}' SH_MULTILIB_CPU_DEFAULT=\\\"'`echo $sh_cpu_default|sed s/sh/m/`'\\\"'\n-\tsh_multilibs=`echo $sh_multilibs,$sh_cpu_default | sed -e 's/[ \t,/][ \t,]*/ /g' -e 's/ $//' -e s/^m/sh/ -e 's/ m/ sh/g' | tr A-Z_ a-z-`\n+\tsh_multilibs=`echo $sh_multilibs,$sh_cpu_default | sed -e 's/[ \t,/][ \t,]*/ /g' -e 's/ $//' -e 's/^m/sh/' -e 's/ m/ sh/g' | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ_ abcdefghijklmnopqrstuvwxyz-`\n \tfor sh_multilib in ${sh_multilibs}; do\n \t\tcase ${sh_multilib} in\n \t\tsh1 | sh2 | sh2e | sh3 | sh3e | \\\n@@ -2061,15 +2062,15 @@ sh-*-symbianelf* | sh[12346l]*-*-symbianelf* | \\\n \t\tsh5-32media | sh5-32media-nofpu | \\\n \t\tsh5-compact | sh5-compact-nofpu)\n \t\t\ttmake_file=\"${tmake_file} sh/t-mlib-${sh_multilib}\"\n-\t\t\ttm_defines=\"$tm_defines SUPPORT_`echo $sh_multilib|tr a-z- A-Z_`=1\"\n+\t\t\ttm_defines=\"$tm_defines SUPPORT_`echo $sh_multilib|tr abcdefghijklmnopqrstuvwxyz- ABCDEFGHIJKLMNOPQRSTUVWXYZ_`=1\"\n \t\t\t;;\n \t\t*)\n \t\t\techo \"with_multilib_list=${sh_multilib} not supported.\"\n \t\t\texit 1\n \t\t\t;;\n \t\tesac\n \tdone\n-\tif test x${enable_incomplete_targets} == xyes ; then\n+\tif test x${enable_incomplete_targets} = xyes ; then\n \t\ttm_defines=\"$tm_defines SUPPORT_SH1=1 SUPPORT_SH2E=1 SUPPORT_SH4=1 SUPPORT_SH4_SINGLE=1 SUPPORT_SH2A=1 SUPPORT_SH2A_SINGLE=1 SUPPORT_SH5_32MEDIA=1 SUPPORT_SH5_32MEDIA_NOFPU=1 SUPPORT_SH5_64MEDIA=1 SUPPORT_SH5_64MEDIA_NOFPU=1\"\n \tfi\n \tuse_fixproto=yes\n@@ -2855,7 +2856,7 @@ case \"${target}\" in\n \n \tsh[123456ble]-*-* | sh-*-*)\n \t\tsupported_defaults=\"cpu\"\n-\t\tcase \"`echo $with_cpu | tr A-Z_ a-z- | sed s/sh/m/`\" in\n+\t\tcase \"`echo $with_cpu | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ_ abcdefghijklmnopqrstuvwxyz- | sed s/sh/m/`\" in\n \t\t\"\" | m1 | m2 | m2e | m3 | m3e | m4 | m4-single | m4-single-only | m4-nofpu )\n \t\t\t# OK\n \t\t\t;;"}, {"sha": "c110fa0742716c8ecd143d6f20b5f0f494d46ecb", "filename": "gcc/config/sh/crt1.asm", "status": "modified", "additions": 217, "deletions": 41, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Fcrt1.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Fcrt1.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fcrt1.asm?ref=25e651ca8efee467e836ead3b06a2d23e4de18f7", "patch": "@@ -688,6 +688,11 @@ __superh_trap_handler:\n \t.section .bss\n old_vbr:\n \t.long 0\n+#ifdef PROFILE\n+profiling_enabled:\n+\t.long 0\n+#endif\n+\n \n \t.section .text\n \t.global\tstart\n@@ -764,6 +769,30 @@ set_sr:\n \tjsr\t@r0\n \tnop\n \n+#ifdef PROFILE\n+\t! arrange for exit to call _mcleanup (via stop_profiling)\n+\tmova    stop_profiling,r0\n+\tmov.l   atexit_k,r1\n+\tjsr     @r1\n+\tmov\tr0, r4\n+\n+\t! Call profiler startup code\n+\tmov.l monstartup_k, r0\n+\tmov.l start_k, r4\n+\tmov.l etext_k, r5\n+\tjsr @r0\n+\tnop\n+\n+\t! enable profiling trap\n+\t! until now any trap 33s will have been ignored\n+\t! This means that all library functions called before this point\n+\t! (directly or indirectly) may have the profiling trap at the start.\n+\t! Therefore, only mcount itself may not have the extra header.\n+\tmov.l\tprofiling_enabled_k2, r0\n+\tmov\t#1, r1\n+\tmov.l\tr1, @r0\n+#endif /* PROFILE */\n+\n \t! call init\n \tmov.l\tinit_k,r0\n \tjsr\t@r0\n@@ -780,6 +809,32 @@ set_sr:\n \tjsr\t@r0\n \tnop\n \t\n+\t\t.balign 4\n+#ifdef PROFILE\n+stop_profiling:\n+\t# stop mcount counting\n+\tmov.l\tprofiling_enabled_k2, r0\n+\tmov\t#0, r1\n+\tmov.l\tr1, @r0\n+\n+\t# call mcleanup\n+\tmov.l\tmcleanup_k, r0\n+\tjmp\t@r0\n+\tnop\n+\t\t\n+\t\t.balign 4\n+mcleanup_k:\n+\t.long __mcleanup\n+monstartup_k:\n+\t.long ___monstartup\n+profiling_enabled_k2:\n+\t.long profiling_enabled\n+start_k:\n+\t.long _start\n+etext_k:\n+\t.long __etext\n+#endif /* PROFILE */\n+\n \t.align 2\n #if defined (__SH_FPU_ANY__)\n set_fpscr_k:\n@@ -818,10 +873,18 @@ sr_initial_rtos:\n rtos_start_fn:\n \t.long ___rtos_profiler_start_timer\n \t\n+#ifdef PROFILE\n+sr_initial_bare:\n+\t! Privileged mode RB 1 BL 0. Keep BL 0 to allow default trap handlers to work.\n+\t! For bare machine, we need to enable interrupts to get profiling working\n+\t.long 0x60000001\n+#else\n+\n sr_initial_bare:\n \t! Privileged mode RB 1 BL 0. Keep BL 0 to allow default trap handlers to work.\n \t! Keep interrupts disabled - the application will enable as required.\n \t.long 0x600000f1\n+#endif\n \n \t! supplied for backward compatibility only, in case of linking\n \t! code whose main() was compiled with an older version of GCC.\n@@ -849,6 +912,92 @@ vbr_start:\n \n \t.balign 256\n vbr_100:\n+\t#ifdef PROFILE\n+\t! Note on register usage.\n+\t! we use r0..r3 as scratch in this code. If we are here due to a trapa for profiling\n+\t! then this is OK as we are just before executing any function code.\n+\t! The other r4..r7 we save explicityl on the stack\n+\t! Remaining registers are saved by normal ABI conventions and we assert we do not\n+\t! use floating point registers.\n+\tmov.l expevt_k1, r1\n+\tmov.l @r1, r1\n+\tmov.l event_mask, r0\n+\tand r0,r1\n+\tmov.l trapcode_k, r2\n+\tcmp/eq r1,r2\n+\tbt 1f\n+\tbra handler_100   ! if not a trapa, go to default handler\n+\tnop\n+1:\t\n+\tmov.l trapa_k, r0\n+\tmov.l @r0, r0\n+\tshlr2 r0      ! trapa code is shifted by 2.\n+\tcmp/eq #33, r0\n+\tbt 2f\n+\tbra handler_100\n+\tnop\n+2:\t\n+\t\n+\t! If here then it looks like we have trap #33\n+\t! Now we need to call mcount with the following convention\n+\t! Save and restore r4..r7\n+\tmov.l\tr4,@-r15\n+\tmov.l\tr5,@-r15\n+\tmov.l\tr6,@-r15\n+\tmov.l\tr7,@-r15\n+\tsts.l\tpr,@-r15\n+\n+\t! r4 is frompc.\n+\t! r5 is selfpc\n+\t! r0 is the branch back address.\n+\t! The code sequence emitted by gcc for the profiling trap is\n+\t! .align 2\n+\t! trapa #33\n+\t! .align 2\n+\t! .long lab Where lab is planted by the compiler. This is the address\n+\t! of a datum that needs to be incremented. \n+\tsts pr,  r4     ! frompc\n+\tstc spc, r5\t! selfpc\n+\tmov #2, r2\n+\tnot r2, r2      ! pattern to align to 4\n+\tand r2, r5      ! r5 now has aligned address\n+!\tadd #4, r5      ! r5 now has address of address\n+\tmov r5, r2      ! Remember it.\n+!\tmov.l @r5, r5   ! r5 has value of lable (lab in above example)\n+\tadd #8, r2\n+\tldc r2, spc     ! our return address avoiding address word\n+\n+\t! only call mcount if profiling is enabled\n+\tmov.l profiling_enabled_k, r0\n+\tmov.l @r0, r0\n+\tcmp/eq #0, r0\n+\tbt 3f\n+\t! call mcount\n+\tmov.l mcount_k, r2\n+\tjsr @r2\n+\tnop\n+3:\n+\tlds.l @r15+,pr\n+\tmov.l @r15+,r7\n+\tmov.l @r15+,r6\n+\tmov.l @r15+,r5\n+\tmov.l @r15+,r4\n+\trte\n+\tnop\n+\t.balign 4\n+event_mask:\n+\t.long 0xfff\n+trapcode_k:\t\n+\t.long 0x160\n+expevt_k1:\n+\t.long 0xff000024 ! Address of expevt\n+trapa_k:\t\n+\t.long 0xff000020\n+mcount_k:\n+\t.long __call_mcount\n+profiling_enabled_k:\n+\t.long profiling_enabled\n+#endif\n \t! Non profiling case.\n handler_100:\n \tmov.l 2f, r0     ! load the old vbr setting (if any)\n@@ -899,13 +1048,12 @@ vbr_300:\n \tbra handler\n \tnop\t\n 1:\t! there was a previous handler - chain them\n-\tadd #0x7f, r0\t ! 0x7f\n-\tadd #0x7f, r0\t ! 0xfe\n-\tadd #0x7f, r0\t ! 0x17d\n-\tadd #0x7f, r0    ! 0x1fc\n-\tadd #0x7f, r0\t ! 0x27b\n-\tadd #0x7f, r0    ! 0x2fa\n-\tadd #0x6, r0     ! add 0x300 without corrupting another register\n+\trotcr r0\n+\trotcr r0\n+\tadd #0x7f, r0\t ! 0x1fc\n+\tadd #0x41, r0\t ! 0x300\n+\trotcl r0\n+\trotcl r0\t ! Add 0x300 without corrupting another register\n \tjmp @r0\n \tnop\n \t.balign 4\n@@ -920,15 +1068,13 @@ vbr_400:\t! Should be at vbr+0x400\n \t! no previous vbr - jump to own generic handler\n \tbt handler\n \t! there was a previous handler - chain them\n-\tadd #0x7f, r0\t ! 0x7f\n-\tadd #0x7f, r0\t ! 0xfe\n-\tadd #0x7f, r0\t ! 0x17d\n-\tadd #0x7f, r0    ! 0x1fc\n-\tadd #0x7f, r0\t ! 0x27b\n-\tadd #0x7f, r0    ! 0x2fa\n-\tadd #0x7f, r0\t ! 0x379\n-\tadd #0x7f, r0    ! 0x3f8\n-\tadd #0x8, r0     ! add 0x400 without corrupting another register\n+\trotcr r0\n+\trotcr r0\n+\tadd #0x7f, r0\t ! 0x1fc\n+\tadd #0x7f, r0\t ! 0x3f8\n+\tadd #0x02, r0\t ! 0x400\n+\trotcl r0\n+\trotcl r0\t ! Add 0x400 without corrupting another register\n \tjmp @r0\n \tnop\n \t.balign 4\n@@ -965,17 +1111,13 @@ vbr_500:\n \t! no previous vbr - jump to own generic handler\n \tbt handler\n \t! there was a previous handler - chain them\n-\tadd #0x7f, r0\t ! 0x7f\n-\tadd #0x7f, r0\t ! 0xfe\n-\tadd #0x7f, r0\t ! 0x17d\n-\tadd #0x7f, r0    ! 0x1fc\n-\tadd #0x7f, r0\t ! 0x27b\n-\tadd #0x7f, r0    ! 0x2fa\n-\tadd #0x7f, r0\t ! 0x379\n-\tadd #0x7f, r0    ! 0x3f8\n-\tadd #0x7f, r0\t ! 0x477\n-\tadd #0x7f, r0    ! 0x4f6\n-\tadd #0xa, r0     ! add 0x500 without corrupting another register\n+\trotcr r0\n+\trotcr r0\n+\tadd #0x7f, r0\t ! 0x1fc\n+\tadd #0x7f, r0\t ! 0x3f8\n+\tadd #0x42, r0\t ! 0x500\n+\trotcl r0\n+\trotcl r0\t ! Add 0x500 without corrupting another register\n \tjmp @r0\n \tnop\n \t.balign 4\n@@ -984,30 +1126,58 @@ vbr_500:\n \n \t.balign 256\n vbr_600:\n-\tmov.l 2f, r0     ! load the old vbr setting (if any)\n+#ifdef PROFILE\t\n+\t! Should be at vbr+0x600\n+\t! Now we are in the land of interrupts so need to save more state. \n+\t! Save register state\n+\tmov.l interrupt_stack_k, r15 ! r15 has been saved to sgr.\n+\tmov.l\tr0,@-r15\t\n+\tmov.l\tr1,@-r15\n+\tmov.l\tr2,@-r15\n+\tmov.l\tr3,@-r15\n+\tmov.l\tr4,@-r15\n+\tmov.l\tr5,@-r15\n+\tmov.l\tr6,@-r15\n+\tmov.l\tr7,@-r15\n+\tsts.l\tpr,@-r15\n+\t! Pass interrupted pc to timer_handler as first parameter (r4).\n+\tstc    spc, r4\n+\tmov.l timer_handler_k, r0\n+\tjsr @r0\n+\tnop\n+\tlds.l @r15+,pr\n+\tmov.l @r15+,r7\n+\tmov.l @r15+,r6\n+\tmov.l @r15+,r5\n+\tmov.l @r15+,r4\n+\tmov.l @r15+,r3\n+\tmov.l @r15+,r2\n+\tmov.l @r15+,r1\n+\tmov.l @r15+,r0\n+\tstc sgr, r15    ! Restore r15, destroyed by this sequence. \n+\trte\n+\tnop\n+#else\n+\tmov.l 2f, r0     ! Load the old vbr setting (if any).\n \tmov.l @r0, r0\n \tcmp/eq #0, r0\n \t! no previous vbr - jump to own handler\n \tbt chandler\n \t! there was a previous handler - chain them\n-\tadd #0x7f, r0\t ! 0x7f\n-\tadd #0x7f, r0\t ! 0xfe\n-\tadd #0x7f, r0\t ! 0x17d\n-\tadd #0x7f, r0    ! 0x1fc\n-\tadd #0x7f, r0\t ! 0x27b\n-\tadd #0x7f, r0    ! 0x2fa\n-\tadd #0x7f, r0\t ! 0x379\n-\tadd #0x7f, r0    ! 0x3f8\n-\tadd #0x7f, r0\t ! 0x477\n-\tadd #0x7f, r0    ! 0x4f6\n-\tadd #0x7f, r0\t ! 0x575\n-\tadd #0x7f, r0    ! 0x5f4\n-\tadd #0xc, r0     ! add 0x600 without corrupting another register\n+\trotcr r0\n+\trotcr r0\n+\tadd #0x7f, r0\t ! 0x1fc\n+\tadd #0x7f, r0\t ! 0x3f8\n+\tadd #0x7f, r0\t ! 0x5f4\n+\tadd #0x03, r0\t ! 0x600\n+\trotcl r0\n+\trotcl r0\t ! Add 0x600 without corrupting another register\n \tjmp @r0\n \tnop\n \t.balign 4\n 2:\n \t.long old_vbr\n+#endif\t /* PROFILE code */\n chandler:\n \tmov.l expevt_k, r4\n \tmov.l @r4, r4 ! r4 is value of expevt hence making this the return code\n@@ -1020,6 +1190,12 @@ limbo:\n \tbra limbo\n \tnop\n \t.balign 4\n+#ifdef PROFILE\n+interrupt_stack_k:\n+\t.long __timer_stack\t! The high end of the stack\n+timer_handler_k:\n+\t.long __profil_counter\n+#endif\n expevt_k:\n \t.long 0xff000024 ! Address of expevt\n chandler_k:\t"}, {"sha": "f8c0713ee65337435ae7fe99f7435047c74b9a93", "filename": "gcc/config/sh/embed-elf.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Fembed-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Fembed-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fembed-elf.h?ref=25e651ca8efee467e836ead3b06a2d23e4de18f7", "patch": "@@ -24,3 +24,8 @@ Boston, MA 02110-1301, USA.  */\n #define USER_LABEL_PREFIX \"_\"\n \n #undef TARGET_POSIX_IO\n+\n+#define LIBGCC_SPEC \"%{!shared: \\\n+  %{m4-100*:-lic_invalidate_array_4-100} \\\n+  %{m4-200*:-lic_invalidate_array_4-200} \\\n+  %{m4a*:-lic_invalidate_array_4a}} -lgcc\""}, {"sha": "07292812abcc4ff3b4c94002349831159bfd033d", "filename": "gcc/config/sh/lib1funcs.asm", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flib1funcs.asm?ref=25e651ca8efee467e836ead3b06a2d23e4de18f7", "patch": "@@ -2141,7 +2141,8 @@ GLOBAL(ic_invalidate):\n #endif /* L_ic_invalidate */\n \n #ifdef L_ic_invalidate_array\n-#if defined(__SH4A__)\n+#if defined(__SH4A__) || (defined (__FORCE_SH4A__) && (defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__) || (defined(__SH4_NOFPU__) && !defined(__SH5__))))\n+\t.global GLOBAL(ic_invalidate_array)\n \t/* This is needed when an SH4 dso with trampolines is used on SH4A.  */\n \t.global GLOBAL(ic_invalidate_array)\n \tFUNC(GLOBAL(ic_invalidate_array))"}, {"sha": "9f8415c95353f2ac613a95cfd38e90b0e55f8fe3", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=25e651ca8efee467e836ead3b06a2d23e4de18f7", "patch": "@@ -524,18 +524,26 @@ sh_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED,\n       return true;\n \n     case OPT_m4:\n+    case OPT_m4_100:\n+    case OPT_m4_200:\n       target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH4;\n       return true;\n \n     case OPT_m4_nofpu:\n+    case OPT_m4_400:\n+    case OPT_m4_500:\n       target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH4_NOFPU;\n       return true;\n \n     case OPT_m4_single:\n+    case OPT_m4_100_single:\n+    case OPT_m4_200_single:\n       target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH4_SINGLE;\n       return true;\n \n     case OPT_m4_single_only:\n+    case OPT_m4_100_single_only:\n+    case OPT_m4_200_single_only:\n       target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH4_SINGLE_ONLY;\n       return true;\n \n@@ -10901,11 +10909,4 @@ sh_secondary_reload (bool in_p, rtx x, enum reg_class class,\n \n enum sh_divide_strategy_e sh_div_strategy = SH_DIV_STRATEGY_DEFAULT;\n \n-/* This defines the storage for the variable part of a -mboard= option.\n-   It is only required when using the sh-superh-elf target */\n-#ifdef _SUPERH_H\n-const char * boardtype = \"7750p2\";\n-const char * osruntime = \"bare\";\n-#endif\n-\n #include \"gt-sh.h\""}, {"sha": "6e833ccedb72664f1c49187341533e3a0d80c603", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=25e651ca8efee467e836ead3b06a2d23e4de18f7", "patch": "@@ -654,6 +654,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n \telse\t\t\t\t\t\t\t\t\\\n \t  sh_div_strategy = SH_DIV_CALL_DIV1;\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n+  if (!TARGET_SH1)\t\t\t\t\t\t\t\\\n+    TARGET_PRETEND_CMOVE = 0;\t\t\t\t\t\t\\\n   if (sh_divsi3_libfunc[0])\t\t\t\t\t\t\\\n     ; /* User supplied - leave it alone.  */\t\t\t\t\\\n   else if (TARGET_DIVIDE_CALL_FP)\t\t\t\t\t\\"}, {"sha": "00d1de30046fceb982a8e75536775a2521568a1a", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 57, "deletions": 4, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=25e651ca8efee467e836ead3b06a2d23e4de18f7", "patch": "@@ -1180,19 +1180,72 @@\n   DONE;\n }\")\n \n+(define_insn \"*movsicc_t_false\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r,r\")\n+\t(if_then_else (eq (reg:SI T_REG) (const_int 0))\n+\t\t      (match_operand:SI 1 \"general_movsrc_operand\" \"r,I08\")\n+\t\t      (match_operand:SI 2 \"arith_reg_operand\" \"0,0\")))]\n+  \"TARGET_PRETEND_CMOVE\n+   && (arith_reg_operand (operands[1], SImode)\n+       || (immediate_operand (operands[1], SImode)\n+\t   && CONST_OK_FOR_I08 (INTVAL (operands[1]))))\"\n+  \"bt 0f\\;mov %1,%0\\\\n0:\"\n+  [(set_attr \"type\" \"mt_group,arith\") ;; poor approximation\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*movsicc_t_true\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r,r\")\n+\t(if_then_else (ne (reg:SI T_REG) (const_int 0))\n+\t\t      (match_operand:SI 1 \"general_movsrc_operand\" \"r,I08\")\n+\t\t      (match_operand:SI 2 \"arith_reg_operand\" \"0,0\")))]\n+  \"TARGET_PRETEND_CMOVE\n+   && (arith_reg_operand (operands[1], SImode)\n+       || (immediate_operand (operands[1], SImode)\n+\t   && CONST_OK_FOR_I08 (INTVAL (operands[1]))))\"\n+  \"bf 0f\\;mov %1,%0\\\\n0:\"\n+  [(set_attr \"type\" \"mt_group,arith\") ;; poor approximation\n+   (set_attr \"length\" \"4\")])\n+\n (define_expand \"movsicc\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"\")\n \t(if_then_else:SI (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t (match_operand:SI 2 \"register_operand\" \"\")\n-\t\t\t (match_operand:SI 3 \"register_operand\" \"\")))]\n-  \"TARGET_SHMEDIA\"\n+\t\t\t (match_operand:SI 2 \"arith_reg_or_0_operand\" \"\")\n+\t\t\t (match_operand:SI 3 \"arith_reg_operand\" \"\")))]\n+  \"TARGET_SHMEDIA || TARGET_PRETEND_CMOVE\"\n   \"\n {\n   if ((GET_CODE (operands[1]) == EQ || GET_CODE (operands[1]) == NE)\n       && GET_MODE (sh_compare_op0) == SImode\n+      && (TARGET_SHMEDIA\n+\t  || (REG_P (sh_compare_op0) && REGNO (sh_compare_op0) == T_REG))\n       && sh_compare_op1 == const0_rtx)\n     operands[1] = gen_rtx_fmt_ee (GET_CODE (operands[1]), VOIDmode,\n \t\t\t\t  sh_compare_op0, sh_compare_op1);\n+  else if (TARGET_PRETEND_CMOVE)\n+    {\n+      enum rtx_code code = GET_CODE (operands[1]);\n+      enum rtx_code new_code = code;\n+      rtx tmp;\n+\n+      if (! currently_expanding_to_rtl)\n+\tFAIL;\n+      switch (code)\n+\t{\n+\tcase LT: case LE: case LEU: case LTU:\n+\t  if (GET_MODE_CLASS (GET_MODE (sh_compare_op0)) != MODE_INT)\n+\t    break;\n+\tcase NE:\n+\t  new_code = reverse_condition (code);\n+\t  break;\n+\tcase EQ: case GT: case GE: case GEU: case GTU:\n+\t  break;\n+\tdefault:\n+\t  FAIL;\n+\t}\n+      tmp = prepare_scc_operands (new_code);\n+      operands[1] = gen_rtx_fmt_ee (new_code == code ? NE : EQ, VOIDmode,\n+\t\t\t\t    tmp, const0_rtx);\n+    }\n   else\n     {\n       rtx tmp;"}, {"sha": "7f9a87e95d91b6b363aa5ca3543ac3afa14f7d73", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=25e651ca8efee467e836ead3b06a2d23e4de18f7", "patch": "@@ -80,18 +80,52 @@ m4\n Target RejectNegative Mask(SH4) Condition(SUPPORT_SH4)\n Generate SH4 code\n \n+m4-100\n+Target RejectNegative Condition(SUPPORT_SH4)\n+Generate SH4-100 code\n+\n+m4-200\n+Target RejectNegative Condition(SUPPORT_SH4)\n+Generate SH4-200 code\n+\n m4-nofpu\n Target RejectNegative Condition(SUPPORT_SH4_NOFPU)\n Generate SH4 FPU-less code\n \n+m4-400\n+Target RejectNegative Condition(SUPPORT_SH4_NOFPU)\n+Generate code for SH4 400 series (MMU/FPU-less)\n+;; passes -isa=sh4-nommu-nofpu to the assembler.\n+\n+m4-500\n+Target RejectNegative Condition(SUPPORT_SH4_NOFPU)\n+Generate code for SH4 500 series (FPU-less).\n+;; passes -isa=sh4-nofpu to the assembler.\n+\n m4-single\n Target RejectNegative Condition(SUPPORT_SH4_SINGLE)\n Generate default single-precision SH4 code\n \n+m4-100-single\n+Target RejectNegative Condition(SUPPORT_SH4_SINGLE)\n+Generate default single-precision SH4-100 code\n+\n+m4-200-single\n+Target RejectNegative Condition(SUPPORT_SH4_SINGLE)\n+Generate default single-precision SH4-200 code\n+\n m4-single-only\n Target RejectNegative Condition(SUPPORT_SH4_SINGLE_ONLY)\n Generate only single-precision SH4 code\n \n+m4-100-single-only\n+Target RejectNegative Condition(SUPPORT_SH4_SINGLE_ONLY)\n+Generate only single-precision SH4-100 code\n+\n+m4-200-single-only\n+Target RejectNegative Condition(SUPPORT_SH4_SINGLE_ONLY)\n+Generate only single-precision SH4-200 code\n+\n m4a\n Target RejectNegative Mask(SH4A) Condition(SUPPORT_SH4A)\n Generate SH4a code\n@@ -232,3 +266,9 @@ Cost to assume for a multiply insn\n musermode\n Target Report RejectNegative Mask(USERMODE)\n Generate library function call to invalidate instruction cache entries after fixing trampoline\n+\n+;; We might want to enable this by default for TARGET_HARD_SH4, because\n+;; zero-offset branches have zero latency.  Needs some benchmarking.\n+mpretend-cmove\n+Target Var(TARGET_PRETEND_CMOVE)\n+Pretend a branch-around-a-move is a conditional move."}, {"sha": "7ac96ef7734b29ccf8c726a398d64af17b8434d9", "filename": "gcc/config/sh/superh.h", "status": "modified", "additions": 13, "deletions": 56, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Fsuperh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Fsuperh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsuperh.h?ref=25e651ca8efee467e836ead3b06a2d23e4de18f7", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for gcc for Super-H using sh-superh-elf.\n-   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2006 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -20,9 +20,9 @@ Boston, MA 02110-1301, USA.  */\n \n \n /* This header file is used when the vendor name is set to 'superh'.\n-   It configures the compiler for SH4 only and switches the default\n-   endianess to little (although big endian is still available).\n-   It also configures the spec file to the default board configuration\n+   config.gcc already configured the compiler for SH4 only and switched\n+   the default endianess to little (although big endian is still available).\n+   This file configures the spec file to the default board configuration\n    but in such a way that it can be overridden by a boardspecs file\n    (using the -specs= option). This file is expected to disable the\n    defaults and provide options --defsym _start and --defsym _stack\n@@ -39,57 +39,6 @@ Boston, MA 02110-1301, USA.  */\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (SuperH SH special %s)\", __DATE__);\n \n-\n-/* We override TARGET_PROCESSOR_SWITCHES in order to remove all the unrequired cpu options\n-   and add options for all the SuperH CPU variants:\n-   -m4-100  is an alias for -m4.\n-   -m4-200  is an alias for -m4.\n-   -m4-400  is an alias for -m4-nofpu and passes -isa=sh4-nommu-nofpu to the assembler.\n-   -m4-500  is an alias for -m4-nofpu and passes -isa=sh4-nofpu to the assembler.  */\n-#undef TARGET_PROCESSOR_SWITCHES\n-#define TARGET_PROCESSOR_SWITCHES \\\n-  {\"4-500\",\tTARGET_NONE, \"SH4 500 series (FPU-less)\" }, \\\n-  {\"4-500\",\tSELECT_SH4_NOFPU, \"\" }, \\\n-  {\"4-400\",\tTARGET_NONE, \"SH4 400 series (MMU/FPU-less)\" },\t\\\n-  {\"4-400\",\tSELECT_SH4_NOFPU, \"\" }, \\\n-  {\"4-200-single-only\",\tTARGET_NONE, \"SH4 200 series with double = float (SH3e ABI)\" },\t\\\n-  {\"4-200-single-only\",\tSELECT_SH4_SINGLE_ONLY, \"\" }, \\\n-  {\"4-200-single\",\tTARGET_NONE, \"SH4 200 series with single precision pervading\" }, \\\n-  {\"4-200-single\",\tSELECT_SH4_SINGLE, \"\" }, \\\n-  {\"4-200-nofpu\",\tTARGET_NONE, \"SH4 200 series using soft floating point\" }, \\\n-  {\"4-200-nofpu\",\tSELECT_SH4_NOFPU, \"\" }, \\\n-  {\"4-200\",\tTARGET_NONE, \"SH4 200 series\" }, \\\n-  {\"4-200\",\tSELECT_SH4_NOFPU, \"\" }, \\\n-  {\"4-100-single-only\",\tTARGET_NONE, \"SH4 100 series with double = float (SH3e ABI)\" },\t\\\n-  {\"4-100-single-only\",\tSELECT_SH4_SINGLE_ONLY, \"\" }, \\\n-  {\"4-100-single\",\tTARGET_NONE, \"SH4 100 series with single precision pervading\" }, \\\n-  {\"4-100-single\",\tSELECT_SH4_SINGLE, \"\" }, \\\n-  {\"4-100-nofpu\",\tTARGET_NONE, \"SH4 100 series using soft floating point\" }, \\\n-  {\"4-100-nofpu\",\tSELECT_SH4_NOFPU, \"\" }, \\\n-  {\"4-100\",\tTARGET_NONE, \"SH4 100 series\" }, \\\n-  {\"4-100\",\tSELECT_SH4_NOFPU, \"\" }, \\\n-  {\"4-single-only\",\tTARGET_NONE, \"Generic SH4 with double = float (SH3e ABI)\" }, \\\n-  {\"4-single-only\",\tSELECT_SH4_SINGLE_ONLY, \"\" }, \\\n-  {\"4-single\",\tTARGET_NONE, \"Generic SH4 with single precision pervading\" }, \\\n-  {\"4-single\",\tSELECT_SH4_SINGLE, \"\" }, \\\n-  {\"4-nofpu\",\tTARGET_NONE, \"Generic SH4 using soft floating point\" },\t\\\n-  {\"4-nofpu\",\tSELECT_SH4_NOFPU, \"\" }, \\\n-  {\"4\",\t        TARGET_NONE, \"Generic SH4 (default)\" },\t\\\n-  {\"4\",\t        SELECT_SH4, \"\" }\n-\n-\n-/* Provide the -mboard= option used by the boardspecs file */\n-#undef SUBTARGET_OPTIONS\n-#define SUBTARGET_OPTIONS \\\n-  { \"board=\",   &boardtype, \"Board name [and momory region].\", 0 }, \\\n-  { \"runtime=\", &osruntime, \"Runtime name.\", 0 }, \\\n-\n-/* These are required by the mboard= option and runtime= option\n-   and are defined in sh.c but are not used anywhere */\n-extern const char * boardtype;\n-extern const char * osruntime;\n-\n-\n /* Override the linker spec strings to use the new emulation\n    The specstrings are concatenated as follows\n    LINK_EMUL_PREFIX.(''|'32'|'64'|LINK_DEFAULT_CPU_EMUL).SUBTARGET_LINK_EMUL_SUFFIX\n@@ -103,7 +52,7 @@ extern const char * osruntime;\n /* Add the SUBTARGET_LINK_SPEC to add the board and runtime support and\n    change the endianness */\n #undef SUBTARGET_LINK_SPEC\n-#if  TARGET_ENDIAN_DEFAULT == LITTLE_ENDIAN_BIT\n+#if  TARGET_ENDIAN_DEFAULT == MASK_LITTLE_ENDIAN\n #define SUBTARGET_LINK_SPEC \"%(board_link) %(ldruntime) %{ml|!mb:-EL}%{mb:-EB}\"\n #else\n #define SUBTARGET_LINK_SPEC \"%(board_link) %(ldruntime) %{ml:-EL}%{mb|!ml:-EB}\"\n@@ -149,3 +98,11 @@ extern const char * osruntime;\n /* Override the LIB_SPEC to add the runtime support */\n #undef LIB_SPEC\n #define LIB_SPEC \"%{!shared:%{!symbolic:%(libruntime) -lc}} %{pg:-lprofile -lc}\"\n+\n+/* Override STARTFILE_SPEC to add profiling and MMU support.  */\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+  \"%{!shared: %{!m4-400*: %{pg:gcrt1-mmu.o%s}%{!pg:crt1-mmu.o%s}}} \\\n+   %{!shared: %{m4-400*: %{pg:gcrt1.o%s}%{!pg:crt1.o%s}}} \\\n+   crti.o%s \\\n+   %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\""}, {"sha": "b85abddaf8ea35995088766028bd94ec88125f7e", "filename": "gcc/config/sh/superh.opt", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Fsuperh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Fsuperh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsuperh.opt?ref=25e651ca8efee467e836ead3b06a2d23e4de18f7", "patch": "@@ -0,0 +1,10 @@\n+;; The -mboard and -mruntime options need only be accepted here, they are\n+;; actually processed by supplementary specs files.\n+\n+mboard=\n+Target RejectNegative Joined\n+Board name [and memory region].\n+\n+mruntime=\n+Target RejectNegative Joined\n+Runtime name."}, {"sha": "9d9454a7221f79ffd9cdfc47d5ce5eca6dd43f0c", "filename": "gcc/config/sh/t-elf", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-elf?ref=25e651ca8efee467e836ead3b06a2d23e4de18f7", "patch": "@@ -1,5 +1,5 @@\n EXTRA_MULTILIB_PARTS= crt1.o crti.o crtn.o \\\n-\tcrtbegin.o crtend.o crtbeginS.o crtendS.o\n+\tcrtbegin.o crtend.o crtbeginS.o crtendS.o $(IC_EXTRA_PARTS)\n \n # Compile crtbeginS.o and crtendS.o with pic.\n CRTSTUFF_T_CFLAGS_S = -fPIC"}, {"sha": "11fa6f306beaf13ca863a3c555703d46dcbf4edf", "filename": "gcc/config/sh/t-sh", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Ft-sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Ft-sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-sh?ref=25e651ca8efee467e836ead3b06a2d23e4de18f7", "patch": "@@ -38,9 +38,11 @@ MULTILIB_DIRNAMES=\n # is why sh2a and sh2a-single need their own multilibs.\n MULTILIB_MATCHES = $(shell \\\n   multilibs=\"$(MULTILIB_OPTIONS)\" ; \\\n-  for abi in m1,m2,m3,m4-nofpu,m4al,m4a-nofpu m1,m2,m2a-nofpu \\\n-             m2e,m3e,m4-single-only,m4a-single-only m2e,m2a-single-only \\\n-             m4-single,m4a-single m4,m4a \\\n+  for abi in m1,m2,m3,m4-nofpu,m4-400,m4-500,m4al,m4a-nofpu m1,m2,m2a-nofpu \\\n+             m2e,m3e,m4-single-only,m4-100-single-only,m4-200-single-only,m4a-single-only \\\n+             m2e,m2a-single-only \\\n+             m4-single,m4-100-single,m4-200-single,m4a-single \\\n+             m4,m4-100,m4-200,m4a \\\n              m5-32media,m5-compact,m5-32media \\\n              m5-32media-nofpu,m5-compact-nofpu,m5-32media-nofpu; do \\\n     subst= ; \\\n@@ -72,6 +74,25 @@ gt-sh.h : s-gtype ; @true\n # These are not suitable for COFF.\n # EXTRA_MULTILIB_PARTS= crt1.o crti.o crtn.o crtbegin.o crtend.o\n \n+IC_EXTRA_PARTS= libic_invalidate_array_4-100.a libic_invalidate_array_4-200.a \\\n+libic_invalidate_array_4a.a\n+EXTRA_MULTILIB_PARTS= $(IC_EXTRA_PARTS)\n+\n+$(T)ic_invalidate_array_4-100.o: $(srcdir)/config/sh/lib1funcs.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)ic_invalidate_array_4-100.o -DL_ic_invalidate_array -DWAYS=1 -DWAY_SIZE=0x2000 -x assembler-with-cpp $(srcdir)/config/sh/lib1funcs.asm\n+$(T)libic_invalidate_array_4-100.a: $(T)ic_invalidate_array_4-100.o $(GCC_PASSES)\n+\t$(AR_CREATE_FOR_TARGET) $(T)ic_invalidate_array_4-100.a $(T)ic_invalidate_array_4-100.o\n+\n+$(T)ic_invalidate_array_4-200.o: $(srcdir)/config/sh/lib1funcs.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)ic_invalidate_array_4-200.o -DL_ic_invalidate_array -DWAYS=2 -DWAY_SIZE=0x2000 -x assembler-with-cpp $(srcdir)/config/sh/lib1funcs.asm\n+$(T)libic_invalidate_array_4-200.a: $(T)ic_invalidate_array_4-200.o $(GCC_PASSES)\n+\t$(AR_CREATE_FOR_TARGET) $(T)ic_invalidate_array_4-200.a $(T)ic_invalidate_array_4-200.o\n+\n+$(T)ic_invalidate_array_4a.o: $(srcdir)/config/sh/lib1funcs.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)ic_invalidate_array_4a.o -DL_ic_invalidate_array -D__FORCE_SH4A__ -x assembler-with-cpp $(srcdir)/config/sh/lib1funcs.asm\n+$(T)libic_invalidate_array_4a.a: $(T)ic_invalidate_array_4a.o $(GCC_PASSES)\n+\t$(AR_CREATE_FOR_TARGET) $(T)ic_invalidate_array_4a.a $(T)ic_invalidate_array_4a.o\n+\n # Local Variables:\n # mode: Makefile\n # End:"}, {"sha": "875f7529f24a8514b6718755d69544b918b5cca0", "filename": "gcc/config/sh/t-superh", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Ft-superh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e651ca8efee467e836ead3b06a2d23e4de18f7/gcc%2Fconfig%2Fsh%2Ft-superh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-superh?ref=25e651ca8efee467e836ead3b06a2d23e4de18f7", "patch": "@@ -1,6 +1,15 @@\n-MULTILIB_OPTIONS= mb m4-nofpu/m4-single/m4-single-only\n-MULTILIB_DIRNAMES= \n-MULTILIB_MATCHES = m4=m4-100 m4-nofpu=m4-100-nofpu m4-single=m4-100-single m4-single-only=m4-100-single-only \\\n-\t\t   m4=m4-200 m4-nofpu=m4-200-nofpu m4-single=m4-200-single m4-single-only=m4-200-single-only \\\n-\t\t   m4-nofpu=m4-400 \\\n-\t\t   m4-nofpu=m4-500\n+EXTRA_MULTILIB_PARTS= crt1.o crti.o crtn.o \\\n+\tcrtbegin.o crtend.o crtbeginS.o crtendS.o \\\n+\tcrt1-mmu.o gcrt1-mmu.o gcrt1.o $(IC_EXTRA_PARTS)\n+\n+# Compile crt1-mmu.o as crt1.o with -DMMU_SUPPORT\n+$(T)crt1-mmu.o: $(srcdir)/config/sh/crt1.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)crt1-mmu.o -DMMU_SUPPORT -x assembler-with-cpp $(srcdir)/config/sh/crt1.asm\n+\n+# Compile gcrt1-mmu.o as crt1-mmu.o with -DPROFILE\n+$(T)gcrt1-mmu.o: $(srcdir)/config/sh/crt1.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)gcrt1-mmu.o -DPROFILE -DMMU_SUPPORT -x assembler-with-cpp $(srcdir)/config/sh/crt1.asm\n+\n+# For sh4-400: Compile gcrt1.o as crt1.o with -DPROFILE\n+$(T)gcrt1.o: $(srcdir)/config/sh/crt1.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)gcrt1.o -DPROFILE -x assembler-with-cpp $(srcdir)/config/sh/crt1.asm"}]}