{"sha": "33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM1OTBmMTNiMjZiOWQ3OWY0MWJhNWM3ZGM5ZGVhMjgyZGFhYThiYg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-08-08T02:49:01Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-08-08T02:49:01Z"}, "message": "Implement std::messages.\n\n\n2001-08-07  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tImplement std::messages.\n\tMake config a fully-nested directory.\n\t* config/locale: New directory.\n\t* config/c_locale_generic.cc: Move into locale subdirectory.\n\t* config/c_locale_generic.h: Same.\n\t* config/c_locale_gnu.cc: Same.\n\t* config/c_locale_gnu.h: Same.\n\t* config/c_locale_ieee_1003.1-200x.cc: Same.\n\t* config/c_locale_ieee_1003.1-200x_.h: Same.\n\t* config/codecvt_specializations_generic.h: Same.\n\t* config/codecvt_specializations_ieee_1003.1-200x.h: Same.\n\t* config/messages_members_gnu.h: Same.\n\t* config/messaages_members_gnu.cc: Same.\n\t* config/messages_members_generic.h: Same.\n\t* config/messaages_members_generic.cc: Same.\n\t* config/messages_members_ieee_1003.1-200x.h: Same.\n\t* config/messaages_members_ieee_1003.1-200x.cc: Same.\n\t* config/io: New directory.\n\t* config/basic_file_libio.h: Move into io subdirectory.\n\t* config/basic_file_libio.cc: Same.\n\t* config/c_io_libio.h: Same.\n\t* config/c_io_libio_codecvt.c: Same.\n\t* config/basic_file_stdio.h: Same.\n\t* config/basic_file_stdio.cc: Same.\n\t* config/c_io_stdio.h: Same.\n\n\t* po: New directory.\n\t* po/POTFILES.in: New file.\n\t* po/Makefile.am: New file.\n\t* po/Makefile.in: New file.\n\t* po/libstdc++.pot: Generic translation file.\n\t* po/fr.po: Preliminary French translation.\n\t* po/de.po: Preliminary German translation.\n\t* intl: New directory.\n\t* intl/Makefile.am: New file.\n\t* intl/Makefile.in: New file.\n\t* intl/string_literals.cc: New file.\n\t* acinclude.m4 (GLIBCPP_CONFIGURE): Bump VERSION to 3.1.0. Add\n\trequisite setup for gettext. Re-arrange.\n\t* aclocal.m4: Regenerate.\n\t* configure.in: Don't call GLIBCPP_CHECK_COMPILER_VERSION.\n\tOutput Makefile bits for po and intl.\n\t* configure: Regenerate.\n\t* Makefile.am (SUBDIRS): Add intl, po. Add rule for dist.\n\t* Makefile.in: Regenerate.\n\t* acconfig.h: Add ENABLE_NLS, HAVE_CATGETS, HAVE_GETTEXT, HAVE_STPCPY.\n\t* config.h.in: Regenerate.\n\n\t* acinclude.m4 (AC_REPLACE_STRINGFUNCS): Remove.\n\n\t* include/Makefile.am (install-data-local): Don't install Makefile.\n\t* include/Makefile.in: Regenerate.\n\n\t* include/bits/locale_facet.h (locale::facet::_S_clone_c_locale):\n\tAdd member.\n\t* config/locale/c_locale_gnu.cc (_S_clone_c_locale): Add definition.\n\t* config/locale/c_locale_generic.cc: Same.\n\t* config/locale/c_locale_ieee_1003.1-200x.cc: Same.\n\n\t* include/bits/codecvt.h: Excise non-standard, non-required\n\tbits. This includes __enc_traits, and partial specializations of\n\tcodecvt for __enc_traits.\n\t* src/codecvt.cc (__enc_traits::_S_max_size): Guard\n\t* config/codecvt_partials_ieee_1003.1-200x.h: New file.\n\t* config/codecvt_partials_generic.h: New file.\n\t* include/Makefile.am (allstamps): Add stamp-codecvt_model.\n\t(stamp-codecvt_model): Add.\n\t* include/Makefile.in: Regenerate.\n\t* acinclude.m4 (GLIBCPP_ENABLE_CLOCALE): Add in codecvt configury.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\t* testsuite/22_locale/codecvt_unicode_wchar_t.cc: Use macro guard.\n\t* testsuite/22_locale/codecvt_unicode_char.cc: Same.\n\t* testsuite/22_locale/ctor_copy_dtor.cc: And here.\n\n\t* include/bits/localefwd.h (class locale::facet): Add __enc_traits\n\tas a friend for _S_*_c_locale functions.\n\t* include/bits/codecvt.h (__enc_traits::__enc_traits): Add locale\n\targument to default constructor so that CODESET information can be\n\tdeduced.\n\t* include/bits/locale_facets.h (messages_byname):\n\tRe-implement. Remove specializations.\n\t* src/locale.cc (messages_byname<char>): Remove specialization.\n\t(messages_byname<wchar_t>): Same.\n\t* config/locale/c_locale_ieee_1003.1-200x.cc: New file.\n\t* config/locale/c_locale_ieee_1003.1-200x.h: New file.\n\t* config/locale/messages_members_ieee_1003.1-200x.cc: New file.\n\t* config/locale/messages_members_ieee_1003.1-200x.h: New file.\n\t* config/locale/messages_members_gnu.cc: New file.\n\t* config/locale/messages_members_gnu.h: New file.\n\t* config/locale/messages_members_generic.cc: New file.\n\t* config/locale/messages_members_generic.h: New file.\n\n\t* docs/html/configopts.html: Add documentation for new locale\n\tmodel, ieee_1003.1. Adjust other flags for current defaults.\n\t* docs/html/22_locale/locale.html: Update.\n\t* docs/html/22_locale/howto.html: Add link to messages.html. Organize.\n\t* docs/html/22_locale/messages.html: New.\n\n\t* src/Makefile.am (sources): Add messages_virtuals.cc.\n\t* src/Makefile.in: Regenerate.\n\t* include/Makefile.am (allstamps): Add stamp-messages_model.\n\t(stamp-messages_model): Add.\n\t* include/Makefile.in: Regenerate.\n\t* acinclude.m4 (GLIBCPP_ENABLE_CLOCALE): Add in messages configury.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\n\t* testsuite_flags.in (--cxxflags): Add LOCALEDIR.\n\t* testsuite/lib/libstdc++-v3-dg.exp: Remove broken LD_LIBRARY_PATH\n\tbits for Irix.\n\t* acinclude (GLIBCPP_ENABLE_CLOCALE): Set glibcpp_localedir to the\n\tbuild directories message catalog base directory, and export.\n\tEventually this should probably be made to deal with build and\n\tinstall directories. For now, punt on this as the library itself\n\tdoesn't use message catalogs (yet).\n\t* testsuite/22_locale/messages.cc: New file.\n\t* testsuite/22_locale/messages_char_members.cc: New file.\n\t* testsuite/22_locale/messages_byname.cc: New file.\n\nFrom-SVN: r44702", "tree": {"sha": "206d2f141f8a0aeeee16600fe3735d0bec5f1ffc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/206d2f141f8a0aeeee16600fe3735d0bec5f1ffc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/comments", "author": null, "committer": null, "parents": [{"sha": "7364fdd8e0b52133f3cd8e49d72f465ae6128118", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7364fdd8e0b52133f3cd8e49d72f465ae6128118", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7364fdd8e0b52133f3cd8e49d72f465ae6128118"}], "stats": {"total": 9624, "additions": 7369, "deletions": 2255}, "files": [{"sha": "433ebec66fe21375ceed56a131115407d0c5db9b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -1,3 +1,125 @@\n+2001-08-07  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tImplement std::messages.\n+\tMake config a fully-nested directory.\n+\t* config/locale: New directory.\n+\t* config/c_locale_generic.cc: Move into locale subdirectory.\n+\t* config/c_locale_generic.h: Same.\n+\t* config/c_locale_gnu.cc: Same.\n+\t* config/c_locale_gnu.h: Same.\n+\t* config/c_locale_ieee_1003.1-200x.cc: Same.\n+\t* config/c_locale_ieee_1003.1-200x_.h: Same.\n+\t* config/codecvt_specializations_generic.h: Same.\n+\t* config/codecvt_specializations_ieee_1003.1-200x.h: Same.\t\n+\t* config/messages_members_gnu.h: Same.\n+\t* config/messaages_members_gnu.cc: Same.\n+\t* config/messages_members_generic.h: Same.\n+\t* config/messaages_members_generic.cc: Same.\n+\t* config/messages_members_ieee_1003.1-200x.h: Same.\n+\t* config/messaages_members_ieee_1003.1-200x.cc: Same.\n+\t* config/io: New directory.\n+\t* config/basic_file_libio.h: Move into io subdirectory.\t\n+\t* config/basic_file_libio.cc: Same.\n+\t* config/c_io_libio.h: Same.\n+\t* config/c_io_libio_codecvt.c: Same.\t\n+\t* config/basic_file_stdio.h: Same.\n+\t* config/basic_file_stdio.cc: Same.\n+\t* config/c_io_stdio.h: Same.\n+\t\n+\t* po: New directory.\n+\t* po/POTFILES.in: New file.\n+\t* po/Makefile.am: New file.\n+\t* po/Makefile.in: New file.\t\n+\t* po/libstdc++.pot: Generic translation file.\n+\t* po/fr.po: Preliminary French translation.\n+\t* po/de.po: Preliminary German translation.\n+\t* intl: New directory.\n+\t* intl/Makefile.am: New file.\n+\t* intl/Makefile.in: New file.\t\n+\t* intl/string_literals.cc: New file.\n+\t* acinclude.m4 (GLIBCPP_CONFIGURE): Bump VERSION to 3.1.0. Add\n+\trequisite setup for gettext. Re-arrange.\n+\t* aclocal.m4: Regenerate.\n+\t* configure.in: Don't call GLIBCPP_CHECK_COMPILER_VERSION.\n+\tOutput Makefile bits for po and intl.\n+\t* configure: Regenerate.\n+\t* Makefile.am (SUBDIRS): Add intl, po. Add rule for dist.\n+\t* Makefile.in: Regenerate.\n+\t* acconfig.h: Add ENABLE_NLS, HAVE_CATGETS, HAVE_GETTEXT, HAVE_STPCPY.\n+\t* config.h.in: Regenerate.\n+\n+\t* acinclude.m4 (AC_REPLACE_STRINGFUNCS): Remove.\n+\t\n+\t* include/Makefile.am (install-data-local): Don't install Makefile.\n+\t* include/Makefile.in: Regenerate.\n+\t\n+\t* include/bits/locale_facet.h (locale::facet::_S_clone_c_locale):\n+\tAdd member.\n+\t* config/locale/c_locale_gnu.cc (_S_clone_c_locale): Add definition.\n+\t* config/locale/c_locale_generic.cc: Same.\n+\t* config/locale/c_locale_ieee_1003.1-200x.cc: Same.\n+\n+\t* include/bits/codecvt.h: Excise non-standard, non-required\n+\tbits. This includes __enc_traits, and partial specializations of\n+\tcodecvt for __enc_traits.\n+\t* src/codecvt.cc (__enc_traits::_S_max_size): Guard \n+\t* config/codecvt_partials_ieee_1003.1-200x.h: New file.\t\n+\t* config/codecvt_partials_generic.h: New file.\t\t\n+\t* include/Makefile.am (allstamps): Add stamp-codecvt_model.\n+\t(stamp-codecvt_model): Add.\n+\t* include/Makefile.in: Regenerate.\n+\t* acinclude.m4 (GLIBCPP_ENABLE_CLOCALE): Add in codecvt configury.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t* testsuite/22_locale/codecvt_unicode_wchar_t.cc: Use macro guard.\n+\t* testsuite/22_locale/codecvt_unicode_char.cc: Same.\n+\t* testsuite/22_locale/ctor_copy_dtor.cc: And here.\n+\t\n+\t* include/bits/localefwd.h (class locale::facet): Add __enc_traits\n+\tas a friend for _S_*_c_locale functions.\n+\t* include/bits/codecvt.h (__enc_traits::__enc_traits): Add locale\n+\targument to default constructor so that CODESET information can be\n+\tdeduced.\n+\t* include/bits/locale_facets.h (messages_byname):\n+\tRe-implement. Remove specializations.\n+\t* src/locale.cc (messages_byname<char>): Remove specialization.\n+\t(messages_byname<wchar_t>): Same.\n+\t* config/locale/c_locale_ieee_1003.1-200x.cc: New file.\n+\t* config/locale/c_locale_ieee_1003.1-200x.h: New file.\t\n+\t* config/locale/messages_members_ieee_1003.1-200x.cc: New file.\n+\t* config/locale/messages_members_ieee_1003.1-200x.h: New file.\t\n+\t* config/locale/messages_members_gnu.cc: New file.\n+\t* config/locale/messages_members_gnu.h: New file.\t\n+\t* config/locale/messages_members_generic.cc: New file.\n+\t* config/locale/messages_members_generic.h: New file.\t\n+\t\n+\t* docs/html/configopts.html: Add documentation for new locale\n+\tmodel, ieee_1003.1. Adjust other flags for current defaults.\n+\t* docs/html/22_locale/locale.html: Update.\n+\t* docs/html/22_locale/howto.html: Add link to messages.html. Organize.\n+\t* docs/html/22_locale/messages.html: New.\n+\n+\t* src/Makefile.am (sources): Add messages_virtuals.cc.\n+\t* src/Makefile.in: Regenerate.\n+\t* include/Makefile.am (allstamps): Add stamp-messages_model.\n+\t(stamp-messages_model): Add.\n+\t* include/Makefile.in: Regenerate.\n+\t* acinclude.m4 (GLIBCPP_ENABLE_CLOCALE): Add in messages configury.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\n+\t* testsuite_flags.in (--cxxflags): Add LOCALEDIR.\n+\t* testsuite/lib/libstdc++-v3-dg.exp: Remove broken LD_LIBRARY_PATH\n+\tbits for Irix. \n+\t* acinclude (GLIBCPP_ENABLE_CLOCALE): Set glibcpp_localedir to the\n+\tbuild directories message catalog base directory, and export.\n+\tEventually this should probably be made to deal with build and\n+\tinstall directories. For now, punt on this as the library itself\n+\tdoesn't use message catalogs (yet).\n+\t* testsuite/22_locale/messages.cc: New file.\n+\t* testsuite/22_locale/messages_char_members.cc: New file.\n+\t* testsuite/22_locale/messages_byname.cc: New file.\n+\n 2001-08-06  Phil Edwards  <pme@sources.redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_CONFIGURE_TESTSUITE):  New macro, calls..."}, {"sha": "ed5e022a074639719292d2dd8190eac284711dd7", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -24,7 +24,7 @@\n AUTOMAKE_OPTIONS = 1.3 cygnus\n MAINT_CHARSET = latin1\n \n-SUBDIRS = include libio libmath libsupc++ src testsuite\n+SUBDIRS = include libio libmath libsupc++ src testsuite po intl\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n@@ -139,5 +139,3 @@ AM_MAKEFLAGS = \\\n \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n \t\"DESTDIR=$(DESTDIR)\" \\\n \t\"WERROR=$(WERROR)\" \n-\n-"}, {"sha": "55fdf83d177032285438e1b0fcf41f8fdafe2297", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 62, "deletions": 20, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -67,67 +67,90 @@ AR = @AR@\n AS = @AS@\n ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n BASIC_FILE_H = @BASIC_FILE_H@\n+CATALOGS = @CATALOGS@\n+CATOBJEXT = @CATOBJEXT@\n CC = @CC@\n CCODECVT_C = @CCODECVT_C@\n+CCODECVT_H = @CCODECVT_H@\n CLOCALE_H = @CLOCALE_H@\n+CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+DATADIRNAME = @DATADIRNAME@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n+GENCAT = @GENCAT@\n GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n+GMOFILES = @GMOFILES@\n+GMSGFMT = @GMSGFMT@\n+GT_NO = @GT_NO@\n+GT_YES = @GT_YES@\n+INCLUDE_LOCALE_H = @INCLUDE_LOCALE_H@\n+INSTOBJEXT = @INSTOBJEXT@\n+INTLDEPS = @INTLDEPS@\n+INTLLIBS = @INTLLIBS@\n+INTLOBJS = @INTLOBJS@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n LIBMATHOBJS = @LIBMATHOBJS@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n-LIBSTRINGOBJS = @LIBSTRINGOBJS@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n+MKINSTALLDIRS = @MKINSTALLDIRS@\n+MSGFMT = @MSGFMT@\n OBJDUMP = @OBJDUMP@\n OBJEXT = @OBJEXT@\n OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n OPT_LDFLAGS = @OPT_LDFLAGS@\n OS_INC_SRCDIR = @OS_INC_SRCDIR@\n PACKAGE = @PACKAGE@\n+POFILES = @POFILES@\n+POSUB = @POSUB@\n RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n+USE_INCLUDED_LIBINTL = @USE_INCLUDED_LIBINTL@\n+USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n glibcpp_CXX = @glibcpp_CXX@\n+glibcpp_MOFILES = @glibcpp_MOFILES@\n glibcpp_basedir = @glibcpp_basedir@\n glibcpp_builddir = @glibcpp_builddir@\n+glibcpp_localedir = @glibcpp_localedir@\n glibcpp_prefixdir = @glibcpp_prefixdir@\n glibcpp_srcdir = @glibcpp_srcdir@\n glibcpp_thread_h = @glibcpp_thread_h@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n+l = @l@\n libio_la = @libio_la@\n toplevel_srcdir = @toplevel_srcdir@\n \n AUTOMAKE_OPTIONS = 1.3 cygnus\n MAINT_CHARSET = latin1\n \n-SUBDIRS = include libio libmath libsupc++ src testsuite\n+SUBDIRS = include libio libmath libsupc++ src testsuite po intl\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n@@ -148,11 +171,11 @@ MULTICLEAN = true\n AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-CONFIG_HEADER = config.h\n+CONFIG_HEADER = config.h config.h ./testsuite/testsuite_hooks.h\n CONFIG_CLEAN_FILES =  mkcheck testsuite_flags\n-DIST_COMMON =  README ./stamp-h.in ChangeLog Makefile.am Makefile.in \\\n-acconfig.h acinclude.m4 aclocal.m4 config.h.in configure configure.in \\\n-mkcheck.in testsuite_flags.in\n+DIST_COMMON =  README ./stamp-h1.in ./stamp-h2.in ChangeLog Makefile.am \\\n+Makefile.in acconfig.h acinclude.m4 aclocal.m4 config.h.in configure \\\n+configure.in mkcheck.in testsuite_flags.in\n \n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n@@ -176,31 +199,50 @@ config.status: $(srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)\n $(srcdir)/configure: @MAINTAINER_MODE_TRUE@$(srcdir)/configure.in $(ACLOCAL_M4) $(CONFIGURE_DEPENDENCIES)\n \tcd $(srcdir) && $(AUTOCONF)\n \n-config.h: stamp-h\n+config.h: stamp-h1\n \t@if test ! -f $@; then \\\n-\t\trm -f stamp-h; \\\n-\t\t$(MAKE) stamp-h; \\\n+\t\trm -f stamp-h1; \\\n+\t\t$(MAKE) stamp-h1; \\\n \telse :; fi\n-stamp-h: $(srcdir)/config.h.in $(top_builddir)/config.status\n+stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status\n \tcd $(top_builddir) \\\n \t  && CONFIG_FILES= CONFIG_HEADERS=config.h \\\n \t     $(SHELL) ./config.status\n-\t@echo timestamp > stamp-h 2> /dev/null\n-$(srcdir)/config.h.in: @MAINTAINER_MODE_TRUE@$(srcdir)/stamp-h.in\n+\t@echo timestamp > stamp-h1 2> /dev/null\n+$(srcdir)/config.h.in: @MAINTAINER_MODE_TRUE@$(srcdir)/stamp-h1.in\n \t@if test ! -f $@; then \\\n-\t\trm -f $(srcdir)/stamp-h.in; \\\n-\t\t$(MAKE) $(srcdir)/stamp-h.in; \\\n+\t\trm -f $(srcdir)/stamp-h1.in; \\\n+\t\t$(MAKE) $(srcdir)/stamp-h1.in; \\\n \telse :; fi\n-$(srcdir)/stamp-h.in: $(top_srcdir)/configure.in $(ACLOCAL_M4) acconfig.h\n+$(srcdir)/stamp-h1.in: $(top_srcdir)/configure.in $(ACLOCAL_M4) acconfig.h\n \tcd $(top_srcdir) && $(AUTOHEADER)\n-\t@echo timestamp > $(srcdir)/stamp-h.in 2> /dev/null\n+\t@echo timestamp > $(srcdir)/stamp-h1.in 2> /dev/null\n+\n+config.h: stamp-h2\n+\t@if test ! -f $@; then \\\n+\t\trm -f stamp-h2; \\\n+\t\t$(MAKE) stamp-h2; \\\n+\telse :; fi\n+stamp-h2: $(srcdir)/config.h.in $(top_builddir)/config.status\n+\tcd $(top_builddir) \\\n+\t  && CONFIG_FILES= CONFIG_HEADERS=config.h \\\n+\t     $(SHELL) ./config.status\n+\t@echo timestamp > stamp-h2 2> /dev/null\n+$(srcdir)/config.h.in: @MAINTAINER_MODE_TRUE@$(srcdir)/stamp-h2.in\n+\t@if test ! -f $@; then \\\n+\t\trm -f $(srcdir)/stamp-h2.in; \\\n+\t\t$(MAKE) $(srcdir)/stamp-h2.in; \\\n+\telse :; fi\n+$(srcdir)/stamp-h2.in: $(top_srcdir)/configure.in $(ACLOCAL_M4) acconfig.h\n+\tcd $(top_srcdir) && $(AUTOHEADER)\n+\t@echo timestamp > $(srcdir)/stamp-h2.in 2> /dev/null\n \n mostlyclean-hdr:\n \n clean-hdr:\n \n distclean-hdr:\n-\t-rm -f config.h\n+\t-rm -f config.h config.h\n \n maintainer-clean-hdr:\n mkcheck: $(top_builddir)/config.status mkcheck.in\n@@ -295,7 +337,7 @@ distcheck: dist\n \tmkdir $(distdir)/=inst\n \tdc_install_base=`cd $(distdir)/=inst && pwd`; \\\n \tcd $(distdir)/=build \\\n-\t  && ../configure --srcdir=.. --prefix=$$dc_install_base \\\n+\t  && ../configure --with-included-gettext --srcdir=.. --prefix=$$dc_install_base \\\n \t  && $(MAKE) $(AM_MAKEFLAGS) \\\n \t  && $(MAKE) $(AM_MAKEFLAGS) dvi \\\n \t  && $(MAKE) $(AM_MAKEFLAGS) check \\\n@@ -350,7 +392,7 @@ installcheck-am:\n installcheck: installcheck-recursive\n install-info-am: \n install-info: install-info-recursive\n-all-recursive-am: config.h\n+all-recursive-am: config.h config.h\n \t$(MAKE) $(AM_MAKEFLAGS) all-recursive\n \n install-exec-am:\n@@ -364,7 +406,7 @@ install-am: all-am\n install: install-recursive\n uninstall-am:\n uninstall: uninstall-recursive\n-all-am: Makefile config.h\n+all-am: Makefile config.h config.h\n all-redirect: all-recursive-am\n install-strip:\n \t$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install"}, {"sha": "5a5142b71c18577c1ece22e56e4c8d6dd9d39431", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -1,5 +1,15 @@\n // acconfig.h symbols and macros for libstdc++ v3 -*- C++ -*-\n \n+// Defines libstdc++ version.\n+#undef PACKAGE\n+#undef VERSION\n+\n+// Needed for gettext.\n+#undef ENABLE_NLS\n+#undef HAVE_CATGETS\n+#undef HAVE_GETTEXT\n+#undef HAVE_STPCPY\n+\n // Define if GCC supports weak symbols\n #undef _GLIBCPP_SUPPORTS_WEAK\n "}, {"sha": "a24a2843700b40fade8b8d9f59a4b8cf5a0a5628", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 137, "deletions": 70, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -12,11 +12,58 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n     *)   AC_MSG_ERROR(bad value ${enableval} for multilib option) ;;\n    esac], [multilib=yes])dnl\n \n+# When building with srcdir == objdir, links to the source files will\n+# be created in directories within the target_subdir.  We have to\n+# adjust toplevel_srcdir accordingly, so that configure finds\n+# install-sh and other auxiliary files that live in the top-level\n+# source directory.\n+if test \"${srcdir}\" = \".\"; then\n+  if test -z \"${with_target_subdir}\"; then\n+    toprel=\"..\"\n+  else\n+    if test \"${with_target_subdir}\" != \".\"; then\n+      toprel=\"${with_multisrctop}../..\"\n+    else\n+      toprel=\"${with_multisrctop}..\"\n+    fi\n+  fi\n+else\n+  toprel=\"..\"\n+fi\n+AC_CONFIG_AUX_DIR(${srcdir}/$toprel)\n+toplevel_srcdir=\\${top_srcdir}/$toprel\n+AC_SUBST(toplevel_srcdir)\n+\n+# Export build and source directories.\n+# These need to be absolute paths, yet at the same time need to\n+# canonicalize only relative paths, because then amd will not unmount\n+# drives. Thus the use of PWDCMD: set it to 'pawd' or 'amq -w' if using amd.\n+glibcpp_builddir=`pwd`\n+case $srcdir in\n+[\\\\/$]* | ?:[\\\\/]*) glibcpp_srcdir=${srcdir} ;;\n+*) glibcpp_srcdir=`cd \"$srcdir\" && ${PWDCMD-pwd} || echo \"$srcdir\"` ;;\n+esac\n+AC_SUBST(glibcpp_builddir)\n+AC_SUBST(glibcpp_srcdir)\n+\n+dnl This is here just to satisfy automake.\n+ifelse(not,equal,[AC_CONFIG_AUX_DIR(..)])\n+\n+# Will set LN_S to either 'ln -s' or 'ln'.  With autoconf 2.50+, can also\n+# be 'cp -p' if linking isn't available.\n+#ac_cv_prog_LN_S='cp -p'\n+AC_PROG_LN_S\n+\n+# We use these options to decide which functions to include.\n+AC_ARG_WITH(target-subdir,\n+[  --with-target-subdir=SUBDIR\n+                           configuring in a subdirectory])\n+AC_ARG_WITH(cross-host,\n+[  --with-cross-host=HOST  configuring with a cross compiler])\n+\n   glibcpp_basedir=$srcdir/$toprel/$1/libstdc++-v3\n   AC_SUBST(glibcpp_basedir)\n \n-  AM_INIT_AUTOMAKE(libstdc++, 3.0.0)\n-\n   # Never versions of autoconf add an underscore to these functions.\n   # Prevent future problems ...\n   ifdef([AC_PROG_CC_G],[],[define([AC_PROG_CC_G],defn([_AC_PROG_CC_G]))])\n@@ -112,6 +159,9 @@ fi\n \n LIB_AC_PROG_CXX\n \n+   # For some reason, gettext needs this.\n+   AC_ISC_POSIX\n+\n   AC_CHECK_TOOL(AS, as)\n   AC_CHECK_TOOL(AR, ar)\n   AC_CHECK_TOOL(RANLIB, ranlib, ranlib-not-found-in-path-error)\n@@ -144,6 +194,8 @@ LIB_AC_PROG_CXX\n   # This does for the target what configure.host does for the host.  In\n   # addition to possibly modifying the same flags, it also sets up symlinks.\n   GLIBCPP_CHECK_TARGET\n+\n+  # \n ])\n \n \n@@ -977,8 +1029,8 @@ dnl\n dnl Check for which locale library to use:  gnu or generic.\n dnl\n dnl GLIBCPP_ENABLE_CLOCALE\n-dnl --enable-clocale=gnu sets config/c_locale_gnu.cc and friends\n-dnl --enable-clocale=generic sets config/c_locale_generic.cc and friends\n+dnl --enable-clocale=gnu sets config/locale/c_locale_gnu.cc and friends\n+dnl --enable-clocale=generic sets config/locale/c_locale_generic.cc and friends\n dnl \n dnl default is generic\n dnl\n@@ -997,32 +1049,77 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n \n   dnl Check if a valid locale package\n   case x${enable_clocale_flag} in\n+    xgeneric)\n+      AC_MSG_RESULT(generic)\n+\n+      # Don't use gettext.\n+      USE_NLS=no\n+      AC_SUBST(USE_NLS)\n+\n+      CLOCALE_H=config/locale/c_locale_generic.h\n+      CLOCALE_CC=config/locale/c_locale_generic.cc\n+      CCODECVT_H=config/locale/codecvt_specializations_generic.h\n+      CMESSAGES_H=config/locale/messages_members_generic.h\n+      CMESSAGES_CC=config/locale/messages_members_generic.cc\n+      ;;\n     xgnu)\n-      CLOCALE_H=config/c_locale_gnu.h\n-      CLOCALE_CC=config/c_locale_gnu.cc\n       AC_MSG_RESULT(gnu)\n+\n+      # Declare intention to use gettext, and add support for specific\n+      # languages.\n+      # For some reason, ALL_LINGUAS has to be before AM_GNU_GETTEXT\n+      ALL_LINGUAS=\"de fr\"\n+      AM_GNU_GETTEXT\n+\n+      # Export the build objects.\n+      for ling in $ALL_LINGUAS; do \\\n+        glibcpp_MOFILES=\"$glibcpp_MOFILES $ling.mo\"; \\\n+      done\n+      AC_SUBST(glibcpp_MOFILES)\n+\n+      CLOCALE_H=config/locale/c_locale_gnu.h\n+      CLOCALE_CC=config/locale/c_locale_gnu.cc\n+      CCODECVT_H=config/locale/codecvt_specializations_ieee_1003.1-200x.h\n+      CMESSAGES_H=config/locale/messages_members_gnu.h\n+      CMESSAGES_CC=config/locale/messages_members_gnu.cc\n       ;;\n-    xgeneric)\n-      CLOCALE_H=config/c_locale_generic.h\n-      CLOCALE_CC=config/c_locale_generic.cc\n+    xieee_1003.1)\n       AC_MSG_RESULT(generic)\n+\n+      # Don't use gettext.\n+      USE_NLS=no\n+      AC_SUBST(USE_NLS)\n+\n+      CLOCALE_H=config/locale/c_locale_ieee_1003.1-200x.h\n+      CLOCALE_CC=config/locale/c_locale_ieee_1003.1-200x.cc\n+      CCODECVT_H=config/locale/codecvt_specializations_ieee_1003.1-200x.h\n+      CMESSAGES_H=config/locale/messages_members_ieee_1003.1-200x.h\n+      CMESSAGES_CC=config/locale/messages_members_ieee_1003.1-200x.cc\n       ;;\n     *)\n       echo \"$enable_clocale is an unknown locale package\" 1>&2\n       exit 1\n       ;;\n   esac\n \n+  # This is where the testsuite looks for locale catalogs, using the\n+  # -DLOCALEDIR define during testsuite compilation.\n+  glibcpp_localedir=${glibcpp_builddir}/po/share/locale\n+  AC_SUBST(glibcpp_localedir)\n+\n   AC_SUBST(CLOCALE_H)\n+  AC_SUBST(CCODECVT_H)\n+  AC_SUBST(CMESSAGES_H)\n   AC_LINK_FILES($CLOCALE_CC, src/c++locale.cc)\n+  AC_LINK_FILES($CMESSAGES_CC, src/messages_members.cc)\n ])\n \n \n dnl\n dnl Check for which I/O library to use:  libio, or something specific.\n dnl\n dnl GLIBCPP_ENABLE_CSTDIO\n-dnl --enable-cstdio=libio sets config/c_io_libio.h and friends\n+dnl --enable-cstdio=libio sets config/io/c_io_libio.h and friends\n dnl \n dnl default is stdio\n dnl\n@@ -1042,9 +1139,9 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   dnl Check if a valid I/O package\n   case x${enable_cstdio_flag} in\n     xlibio)\n-      CSTDIO_H=config/c_io_libio.h\n-      BASIC_FILE_H=config/basic_file_libio.h\n-      BASIC_FILE_CC=config/basic_file_libio.cc\n+      CSTDIO_H=config/io/c_io_libio.h\n+      BASIC_FILE_H=config/io/basic_file_libio.h\n+      BASIC_FILE_CC=config/io/basic_file_libio.cc\n       AC_MSG_RESULT(libio)\n \n       # see if we are on a system with libio native (ie, linux)\n@@ -1099,9 +1196,9 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       ;;\n     xstdio | x | xno | xnone | xyes)\n       # default\n-      CSTDIO_H=config/c_io_stdio.h\n-      BASIC_FILE_H=config/basic_file_stdio.h\n-      BASIC_FILE_CC=config/basic_file_stdio.cc\n+      CSTDIO_H=config/io/c_io_stdio.h\n+      BASIC_FILE_H=config/io/basic_file_stdio.h\n+      BASIC_FILE_CC=config/io/basic_file_stdio.cc\n       AC_MSG_RESULT(stdio)\n \n       # We're not using stdio.\n@@ -1118,7 +1215,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   AC_LINK_FILES($BASIC_FILE_CC, src/basic_file.cc)\n \n   # 2000-08-04 bkoz hack\n-  CCODECVT_C=config/c_io_libio_codecvt.c\n+  CCODECVT_C=config/io/c_io_libio_codecvt.c\n   AC_SUBST(CCODECVT_C)\n   # 2000-08-04 bkoz hack\n \n@@ -1540,28 +1637,17 @@ dnl  GLIBCPP_EXPORT_INSTALL_INFO\n dnl  calculates gxx_install_dir\n dnl  exports glibcpp_toolexecdir\n dnl  exports glibcpp_toolexeclibdir\n-dnl  exports glibcpp_builddir\n-dnl  exports glibcpp_srcdir\n dnl  exports glibcpp_prefixdir\n dnl\n dnl Assumes cross_compiling bits already done, and with_cross_host in\n dnl particular\n dnl\n dnl GLIBCPP_EXPORT_INSTALL_INFO\n AC_DEFUN(GLIBCPP_EXPORT_INSTALL_INFO, [\n-\n+# Assumes glibcpp_builddir, glibcpp_srcdir are alreay set up and\n+# exported correctly in GLIBCPP_CONFIGURE.\n glibcpp_toolexecdir=no\n glibcpp_toolexeclibdir=no\n-\n-# Export build and source directories.\n-# These need to be absolute paths, yet at the same time need to\n-# canonicalize only relative paths, because then amd will not unmount\n-# drives. Thus the use of PWDCMD: set it to 'pawd' or 'amq -w' if using amd.\n-glibcpp_builddir=`pwd`\n-case $srcdir in\n-[\\\\/$]* | ?:[\\\\/]*) glibcpp_srcdir=${srcdir} ;;\n-*) glibcpp_srcdir=`cd \"$srcdir\" && ${PWDCMD-pwd} || echo \"$srcdir\"` ;;\n-esac\n glibcpp_prefixdir=${prefix}\n \n AC_MSG_CHECKING([for interface version number])\n@@ -1627,37 +1713,13 @@ fi\n AC_MSG_CHECKING([for install location])\n AC_MSG_RESULT($gxx_include_dir)\n \n-AC_SUBST(glibcpp_builddir)\n-AC_SUBST(glibcpp_srcdir)\n AC_SUBST(glibcpp_prefixdir)\n AC_SUBST(gxx_include_dir)\n AC_SUBST(glibcpp_toolexecdir)\n AC_SUBST(glibcpp_toolexeclibdir)\n ])\n \n \n-# Check whether LC_MESSAGES is available in <locale.h>.\n-# Ulrich Drepper <drepper@cygnus.com>, 1995.\n-#\n-# This file file be copied and used freely without restrictions.  It can\n-# be used in projects which are not available under the GNU Public License\n-# but which still want to provide support for the GNU gettext functionality.\n-# Please note that the actual code is *not* freely available.\n-\n-# serial 1\n-\n-AC_DEFUN(AC_LC_MESSAGES, [\n-  AC_CHECK_HEADER(locale.h, [\n-    AC_CACHE_CHECK([for LC_MESSAGES], ac_cv_val_LC_MESSAGES,\n-      [AC_TRY_LINK([#include <locale.h>], [return LC_MESSAGES],\n-       ac_cv_val_LC_MESSAGES=yes, ac_cv_val_LC_MESSAGES=no)])\n-    if test $ac_cv_val_LC_MESSAGES = yes; then\n-      AC_DEFINE(HAVE_LC_MESSAGES)\n-    fi\n-  ])\n-])\n-\n-\n # Check for functions in math library.\n # Ulrich Drepper <drepper@cygnus.com>, 1998.\n #\n@@ -1675,22 +1737,6 @@ AC_SUBST(LIBMATHOBJS)dnl\n ])\n \n \n-# Check for string functions.\n-# Ulrich Drepper <drepper@cygnus.com>, 1998.\n-#\n-# This file can be copied and used freely without restrictions.  It can\n-# be used in projects which are not available under the GNU Public License\n-# but which still want to provide support for the GNU gettext functionality.\n-# Please note that the actual code is *not* freely available.\n-\n-# serial 1\n-\n-dnl AC_REPLACE_STRINGFUNCS(FUNCTION...)\n-AC_DEFUN(AC_REPLACE_STRINGFUNCS,\n-[AC_CHECK_FUNCS([$1], , [LIBSTRINGOBJS=\"$LIBSTRINGOBJS ${ac_func}.lo\"])\n-AC_SUBST(LIBSTRINGOBJS)dnl\n-])\n-\n \n dnl This macro searches for a GNU version of make.  If a match is found, the\n dnl makefile variable `ifGNUmake' is set to the empty string, otherwise it is\n@@ -1810,3 +1856,24 @@ AC_DEFUN([AC_PROG_LD])\n ])\n \n \n+# Check whether LC_MESSAGES is available in <locale.h>.\n+# Ulrich Drepper <drepper@cygnus.com>, 1995.\n+#\n+# This file file be copied and used freely without restrictions.  It can\n+# be used in projects which are not available under the GNU Public License\n+# but which still want to provide support for the GNU gettext functionality.\n+# Please note that the actual code is *not* freely available.\n+\n+# serial 1\n+\n+AC_DEFUN(AC_LC_MESSAGES, [\n+  AC_CHECK_HEADER(locale.h, [\n+    AC_CACHE_CHECK([for LC_MESSAGES], ac_cv_val_LC_MESSAGES,\n+      [AC_TRY_LINK([#include <locale.h>], [return LC_MESSAGES],\n+       ac_cv_val_LC_MESSAGES=yes, ac_cv_val_LC_MESSAGES=no)])\n+    if test $ac_cv_val_LC_MESSAGES = yes; then\n+      AC_DEFINE(HAVE_LC_MESSAGES)\n+    fi\n+  ])\n+])\n+"}, {"sha": "ae019f069690d5393c78448c6b27d1594b859c5b", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 554, "deletions": 103, "changes": 657, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -24,11 +24,58 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n     *)   AC_MSG_ERROR(bad value ${enableval} for multilib option) ;;\n    esac], [multilib=yes])dnl\n \n+# When building with srcdir == objdir, links to the source files will\n+# be created in directories within the target_subdir.  We have to\n+# adjust toplevel_srcdir accordingly, so that configure finds\n+# install-sh and other auxiliary files that live in the top-level\n+# source directory.\n+if test \"${srcdir}\" = \".\"; then\n+  if test -z \"${with_target_subdir}\"; then\n+    toprel=\"..\"\n+  else\n+    if test \"${with_target_subdir}\" != \".\"; then\n+      toprel=\"${with_multisrctop}../..\"\n+    else\n+      toprel=\"${with_multisrctop}..\"\n+    fi\n+  fi\n+else\n+  toprel=\"..\"\n+fi\n+AC_CONFIG_AUX_DIR(${srcdir}/$toprel)\n+toplevel_srcdir=\\${top_srcdir}/$toprel\n+AC_SUBST(toplevel_srcdir)\n+\n+# Export build and source directories.\n+# These need to be absolute paths, yet at the same time need to\n+# canonicalize only relative paths, because then amd will not unmount\n+# drives. Thus the use of PWDCMD: set it to 'pawd' or 'amq -w' if using amd.\n+glibcpp_builddir=`pwd`\n+case $srcdir in\n+[\\\\/$]* | ?:[\\\\/]*) glibcpp_srcdir=${srcdir} ;;\n+*) glibcpp_srcdir=`cd \"$srcdir\" && ${PWDCMD-pwd} || echo \"$srcdir\"` ;;\n+esac\n+AC_SUBST(glibcpp_builddir)\n+AC_SUBST(glibcpp_srcdir)\n+\n+dnl This is here just to satisfy automake.\n+ifelse(not,equal,[AC_CONFIG_AUX_DIR(..)])\n+\n+# Will set LN_S to either 'ln -s' or 'ln'.  With autoconf 2.50+, can also\n+# be 'cp -p' if linking isn't available.\n+#ac_cv_prog_LN_S='cp -p'\n+AC_PROG_LN_S\n+\n+# We use these options to decide which functions to include.\n+AC_ARG_WITH(target-subdir,\n+[  --with-target-subdir=SUBDIR\n+                           configuring in a subdirectory])\n+AC_ARG_WITH(cross-host,\n+[  --with-cross-host=HOST  configuring with a cross compiler])\n+\n   glibcpp_basedir=$srcdir/$toprel/$1/libstdc++-v3\n   AC_SUBST(glibcpp_basedir)\n \n-  AM_INIT_AUTOMAKE(libstdc++, 3.0.0)\n-\n   # Never versions of autoconf add an underscore to these functions.\n   # Prevent future problems ...\n   ifdef([AC_PROG_CC_G],[],[define([AC_PROG_CC_G],defn([_AC_PROG_CC_G]))])\n@@ -124,6 +171,9 @@ fi\n \n LIB_AC_PROG_CXX\n \n+   # For some reason, gettext needs this.\n+   AC_ISC_POSIX\n+\n   AC_CHECK_TOOL(AS, as)\n   AC_CHECK_TOOL(AR, ar)\n   AC_CHECK_TOOL(RANLIB, ranlib, ranlib-not-found-in-path-error)\n@@ -156,6 +206,8 @@ LIB_AC_PROG_CXX\n   # This does for the target what configure.host does for the host.  In\n   # addition to possibly modifying the same flags, it also sets up symlinks.\n   GLIBCPP_CHECK_TARGET\n+\n+  # \n ])\n \n \n@@ -989,8 +1041,8 @@ dnl\n dnl Check for which locale library to use:  gnu or generic.\n dnl\n dnl GLIBCPP_ENABLE_CLOCALE\n-dnl --enable-clocale=gnu sets config/c_locale_gnu.cc and friends\n-dnl --enable-clocale=generic sets config/c_locale_generic.cc and friends\n+dnl --enable-clocale=gnu sets config/locale/c_locale_gnu.cc and friends\n+dnl --enable-clocale=generic sets config/locale/c_locale_generic.cc and friends\n dnl \n dnl default is generic\n dnl\n@@ -1009,32 +1061,77 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n \n   dnl Check if a valid locale package\n   case x${enable_clocale_flag} in\n+    xgeneric)\n+      AC_MSG_RESULT(generic)\n+\n+      # Don't use gettext.\n+      USE_NLS=no\n+      AC_SUBST(USE_NLS)\n+\n+      CLOCALE_H=config/locale/c_locale_generic.h\n+      CLOCALE_CC=config/locale/c_locale_generic.cc\n+      CCODECVT_H=config/locale/codecvt_specializations_generic.h\n+      CMESSAGES_H=config/locale/messages_members_generic.h\n+      CMESSAGES_CC=config/locale/messages_members_generic.cc\n+      ;;\n     xgnu)\n-      CLOCALE_H=config/c_locale_gnu.h\n-      CLOCALE_CC=config/c_locale_gnu.cc\n       AC_MSG_RESULT(gnu)\n+\n+      # Declare intention to use gettext, and add support for specific\n+      # languages.\n+      # For some reason, ALL_LINGUAS has to be before AM_GNU_GETTEXT\n+      ALL_LINGUAS=\"de fr\"\n+      AM_GNU_GETTEXT\n+\n+      # Export the build objects.\n+      for ling in $ALL_LINGUAS; do \\\n+        glibcpp_MOFILES=\"$glibcpp_MOFILES $ling.mo\"; \\\n+      done\n+      AC_SUBST(glibcpp_MOFILES)\n+\n+      CLOCALE_H=config/locale/c_locale_gnu.h\n+      CLOCALE_CC=config/locale/c_locale_gnu.cc\n+      CCODECVT_H=config/locale/codecvt_specializations_ieee_1003.1-200x.h\n+      CMESSAGES_H=config/locale/messages_members_gnu.h\n+      CMESSAGES_CC=config/locale/messages_members_gnu.cc\n       ;;\n-    xgeneric)\n-      CLOCALE_H=config/c_locale_generic.h\n-      CLOCALE_CC=config/c_locale_generic.cc\n+    xieee_1003.1)\n       AC_MSG_RESULT(generic)\n+\n+      # Don't use gettext.\n+      USE_NLS=no\n+      AC_SUBST(USE_NLS)\n+\n+      CLOCALE_H=config/locale/c_locale_ieee_1003.1-200x.h\n+      CLOCALE_CC=config/locale/c_locale_ieee_1003.1-200x.cc\n+      CCODECVT_H=config/locale/codecvt_specializations_ieee_1003.1-200x.h\n+      CMESSAGES_H=config/locale/messages_members_ieee_1003.1-200x.h\n+      CMESSAGES_CC=config/locale/messages_members_ieee_1003.1-200x.cc\n       ;;\n     *)\n       echo \"$enable_clocale is an unknown locale package\" 1>&2\n       exit 1\n       ;;\n   esac\n \n+  # This is where the testsuite looks for locale catalogs, using the\n+  # -DLOCALEDIR define during testsuite compilation.\n+  glibcpp_localedir=${glibcpp_builddir}/po/share/locale\n+  AC_SUBST(glibcpp_localedir)\n+\n   AC_SUBST(CLOCALE_H)\n+  AC_SUBST(CCODECVT_H)\n+  AC_SUBST(CMESSAGES_H)\n   AC_LINK_FILES($CLOCALE_CC, src/c++locale.cc)\n+  AC_LINK_FILES($CMESSAGES_CC, src/messages_members.cc)\n ])\n \n \n dnl\n dnl Check for which I/O library to use:  libio, or something specific.\n dnl\n dnl GLIBCPP_ENABLE_CSTDIO\n-dnl --enable-cstdio=libio sets config/c_io_libio.h and friends\n+dnl --enable-cstdio=libio sets config/io/c_io_libio.h and friends\n dnl \n dnl default is stdio\n dnl\n@@ -1054,9 +1151,9 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   dnl Check if a valid I/O package\n   case x${enable_cstdio_flag} in\n     xlibio)\n-      CSTDIO_H=config/c_io_libio.h\n-      BASIC_FILE_H=config/basic_file_libio.h\n-      BASIC_FILE_CC=config/basic_file_libio.cc\n+      CSTDIO_H=config/io/c_io_libio.h\n+      BASIC_FILE_H=config/io/basic_file_libio.h\n+      BASIC_FILE_CC=config/io/basic_file_libio.cc\n       AC_MSG_RESULT(libio)\n \n       # see if we are on a system with libio native (ie, linux)\n@@ -1111,9 +1208,9 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       ;;\n     xstdio | x | xno | xnone | xyes)\n       # default\n-      CSTDIO_H=config/c_io_stdio.h\n-      BASIC_FILE_H=config/basic_file_stdio.h\n-      BASIC_FILE_CC=config/basic_file_stdio.cc\n+      CSTDIO_H=config/io/c_io_stdio.h\n+      BASIC_FILE_H=config/io/basic_file_stdio.h\n+      BASIC_FILE_CC=config/io/basic_file_stdio.cc\n       AC_MSG_RESULT(stdio)\n \n       # We're not using stdio.\n@@ -1130,7 +1227,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   AC_LINK_FILES($BASIC_FILE_CC, src/basic_file.cc)\n \n   # 2000-08-04 bkoz hack\n-  CCODECVT_C=config/c_io_libio_codecvt.c\n+  CCODECVT_C=config/io/c_io_libio_codecvt.c\n   AC_SUBST(CCODECVT_C)\n   # 2000-08-04 bkoz hack\n \n@@ -1552,28 +1649,17 @@ dnl  GLIBCPP_EXPORT_INSTALL_INFO\n dnl  calculates gxx_install_dir\n dnl  exports glibcpp_toolexecdir\n dnl  exports glibcpp_toolexeclibdir\n-dnl  exports glibcpp_builddir\n-dnl  exports glibcpp_srcdir\n dnl  exports glibcpp_prefixdir\n dnl\n dnl Assumes cross_compiling bits already done, and with_cross_host in\n dnl particular\n dnl\n dnl GLIBCPP_EXPORT_INSTALL_INFO\n AC_DEFUN(GLIBCPP_EXPORT_INSTALL_INFO, [\n-\n+# Assumes glibcpp_builddir, glibcpp_srcdir are alreay set up and\n+# exported correctly in GLIBCPP_CONFIGURE.\n glibcpp_toolexecdir=no\n glibcpp_toolexeclibdir=no\n-\n-# Export build and source directories.\n-# These need to be absolute paths, yet at the same time need to\n-# canonicalize only relative paths, because then amd will not unmount\n-# drives. Thus the use of PWDCMD: set it to 'pawd' or 'amq -w' if using amd.\n-glibcpp_builddir=`pwd`\n-case $srcdir in\n-[\\\\/$]* | ?:[\\\\/]*) glibcpp_srcdir=${srcdir} ;;\n-*) glibcpp_srcdir=`cd \"$srcdir\" && ${PWDCMD-pwd} || echo \"$srcdir\"` ;;\n-esac\n glibcpp_prefixdir=${prefix}\n \n AC_MSG_CHECKING([for interface version number])\n@@ -1639,37 +1725,13 @@ fi\n AC_MSG_CHECKING([for install location])\n AC_MSG_RESULT($gxx_include_dir)\n \n-AC_SUBST(glibcpp_builddir)\n-AC_SUBST(glibcpp_srcdir)\n AC_SUBST(glibcpp_prefixdir)\n AC_SUBST(gxx_include_dir)\n AC_SUBST(glibcpp_toolexecdir)\n AC_SUBST(glibcpp_toolexeclibdir)\n ])\n \n \n-# Check whether LC_MESSAGES is available in <locale.h>.\n-# Ulrich Drepper <drepper@cygnus.com>, 1995.\n-#\n-# This file file be copied and used freely without restrictions.  It can\n-# be used in projects which are not available under the GNU Public License\n-# but which still want to provide support for the GNU gettext functionality.\n-# Please note that the actual code is *not* freely available.\n-\n-# serial 1\n-\n-AC_DEFUN(AC_LC_MESSAGES, [\n-  AC_CHECK_HEADER(locale.h, [\n-    AC_CACHE_CHECK([for LC_MESSAGES], ac_cv_val_LC_MESSAGES,\n-      [AC_TRY_LINK([#include <locale.h>], [return LC_MESSAGES],\n-       ac_cv_val_LC_MESSAGES=yes, ac_cv_val_LC_MESSAGES=no)])\n-    if test $ac_cv_val_LC_MESSAGES = yes; then\n-      AC_DEFINE(HAVE_LC_MESSAGES)\n-    fi\n-  ])\n-])\n-\n-\n # Check for functions in math library.\n # Ulrich Drepper <drepper@cygnus.com>, 1998.\n #\n@@ -1687,22 +1749,6 @@ AC_SUBST(LIBMATHOBJS)dnl\n ])\n \n \n-# Check for string functions.\n-# Ulrich Drepper <drepper@cygnus.com>, 1998.\n-#\n-# This file can be copied and used freely without restrictions.  It can\n-# be used in projects which are not available under the GNU Public License\n-# but which still want to provide support for the GNU gettext functionality.\n-# Please note that the actual code is *not* freely available.\n-\n-# serial 1\n-\n-dnl AC_REPLACE_STRINGFUNCS(FUNCTION...)\n-AC_DEFUN(AC_REPLACE_STRINGFUNCS,\n-[AC_CHECK_FUNCS([$1], , [LIBSTRINGOBJS=\"$LIBSTRINGOBJS ${ac_func}.lo\"])\n-AC_SUBST(LIBSTRINGOBJS)dnl\n-])\n-\n \n dnl This macro searches for a GNU version of make.  If a match is found, the\n dnl makefile variable `ifGNUmake' is set to the empty string, otherwise it is\n@@ -1822,6 +1868,444 @@ AC_DEFUN([AC_PROG_LD])\n ])\n \n \n+# Check whether LC_MESSAGES is available in <locale.h>.\n+# Ulrich Drepper <drepper@cygnus.com>, 1995.\n+#\n+# This file file be copied and used freely without restrictions.  It can\n+# be used in projects which are not available under the GNU Public License\n+# but which still want to provide support for the GNU gettext functionality.\n+# Please note that the actual code is *not* freely available.\n+\n+# serial 1\n+\n+AC_DEFUN(AC_LC_MESSAGES, [\n+  AC_CHECK_HEADER(locale.h, [\n+    AC_CACHE_CHECK([for LC_MESSAGES], ac_cv_val_LC_MESSAGES,\n+      [AC_TRY_LINK([#include <locale.h>], [return LC_MESSAGES],\n+       ac_cv_val_LC_MESSAGES=yes, ac_cv_val_LC_MESSAGES=no)])\n+    if test $ac_cv_val_LC_MESSAGES = yes; then\n+      AC_DEFINE(HAVE_LC_MESSAGES)\n+    fi\n+  ])\n+])\n+\n+\n+# Add --enable-maintainer-mode option to configure.\n+# From Jim Meyering\n+\n+# serial 1\n+\n+AC_DEFUN(AM_MAINTAINER_MODE,\n+[AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])\n+  dnl maintainer-mode is disabled by default\n+  AC_ARG_ENABLE(maintainer-mode,\n+[  --enable-maintainer-mode enable make rules and dependencies not useful\n+                          (and sometimes confusing) to the casual installer],\n+      USE_MAINTAINER_MODE=$enableval,\n+      USE_MAINTAINER_MODE=no)\n+  AC_MSG_RESULT($USE_MAINTAINER_MODE)\n+  AM_CONDITIONAL(MAINTAINER_MODE, test $USE_MAINTAINER_MODE = yes)\n+  MAINT=$MAINTAINER_MODE_TRUE\n+  AC_SUBST(MAINT)dnl\n+]\n+)\n+\n+# Define a conditional.\n+\n+AC_DEFUN(AM_CONDITIONAL,\n+[AC_SUBST($1_TRUE)\n+AC_SUBST($1_FALSE)\n+if $2; then\n+  $1_TRUE=\n+  $1_FALSE='#'\n+else\n+  $1_TRUE='#'\n+  $1_FALSE=\n+fi])\n+\n+# Macro to add for using GNU gettext.\n+# Ulrich Drepper <drepper@cygnus.com>, 1995.\n+#\n+# This file can be copied and used freely without restrictions.  It can\n+# be used in projects which are not available under the GNU Public License\n+# but which still want to provide support for the GNU gettext functionality.\n+# Please note that the actual code is *not* freely available.\n+\n+# serial 5\n+\n+AC_DEFUN(AM_WITH_NLS,\n+  [AC_MSG_CHECKING([whether NLS is requested])\n+    dnl Default is enabled NLS\n+    AC_ARG_ENABLE(nls,\n+      [  --disable-nls           do not use Native Language Support],\n+      USE_NLS=$enableval, USE_NLS=yes)\n+    AC_MSG_RESULT($USE_NLS)\n+    AC_SUBST(USE_NLS)\n+\n+    USE_INCLUDED_LIBINTL=no\n+\n+    dnl If we use NLS figure out what method\n+    if test \"$USE_NLS\" = \"yes\"; then\n+      AC_DEFINE(ENABLE_NLS)\n+      AC_MSG_CHECKING([whether included gettext is requested])\n+      AC_ARG_WITH(included-gettext,\n+        [  --with-included-gettext use the GNU gettext library included here],\n+        nls_cv_force_use_gnu_gettext=$withval,\n+        nls_cv_force_use_gnu_gettext=no)\n+      AC_MSG_RESULT($nls_cv_force_use_gnu_gettext)\n+\n+      nls_cv_use_gnu_gettext=\"$nls_cv_force_use_gnu_gettext\"\n+      if test \"$nls_cv_force_use_gnu_gettext\" != \"yes\"; then\n+        dnl User does not insist on using GNU NLS library.  Figure out what\n+        dnl to use.  If gettext or catgets are available (in this order) we\n+        dnl use this.  Else we have to fall back to GNU NLS library.\n+\tdnl catgets is only used if permitted by option --with-catgets.\n+\tnls_cv_header_intl=\n+\tnls_cv_header_libgt=\n+\tCATOBJEXT=NONE\n+\n+\tAC_CHECK_HEADER(libintl.h,\n+\t  [AC_CACHE_CHECK([for gettext in libc], gt_cv_func_gettext_libc,\n+\t    [AC_TRY_LINK([#include <libintl.h>], [return (int) gettext (\"\")],\n+\t       gt_cv_func_gettext_libc=yes, gt_cv_func_gettext_libc=no)])\n+\n+\t   if test \"$gt_cv_func_gettext_libc\" != \"yes\"; then\n+\t     AC_CHECK_LIB(intl, bindtextdomain,\n+\t       [AC_CACHE_CHECK([for gettext in libintl],\n+\t\t gt_cv_func_gettext_libintl,\n+\t\t [AC_CHECK_LIB(intl, gettext,\n+\t\t  gt_cv_func_gettext_libintl=yes,\n+\t\t  gt_cv_func_gettext_libintl=no)],\n+\t\t gt_cv_func_gettext_libintl=no)])\n+\t   fi\n+\n+\t   if test \"$gt_cv_func_gettext_libc\" = \"yes\" \\\n+\t      || test \"$gt_cv_func_gettext_libintl\" = \"yes\"; then\n+\t      AC_DEFINE(HAVE_GETTEXT)\n+\t      AM_PATH_PROG_WITH_TEST(MSGFMT, msgfmt,\n+\t\t[test -z \"`$ac_dir/$ac_word -h 2>&1 | grep 'dv '`\"], no)dnl\n+\t      if test \"$MSGFMT\" != \"no\"; then\n+\t\tAC_CHECK_FUNCS(dcgettext)\n+\t\tAC_PATH_PROG(GMSGFMT, gmsgfmt, $MSGFMT)\n+\t\tAM_PATH_PROG_WITH_TEST(XGETTEXT, xgettext,\n+\t\t  [test -z \"`$ac_dir/$ac_word -h 2>&1 | grep '(HELP)'`\"], :)\n+\t\tAC_TRY_LINK(, [extern int _nl_msg_cat_cntr;\n+\t\t\t       return _nl_msg_cat_cntr],\n+\t\t  [CATOBJEXT=.gmo\n+\t\t   DATADIRNAME=share],\n+\t\t  [CATOBJEXT=.mo\n+\t\t   DATADIRNAME=lib])\n+\t\tINSTOBJEXT=.mo\n+\t      fi\n+\t    fi\n+\t])\n+\n+        if test \"$CATOBJEXT\" = \"NONE\"; then\n+\t  AC_MSG_CHECKING([whether catgets can be used])\n+\t  AC_ARG_WITH(catgets,\n+\t    [  --with-catgets          use catgets functions if available],\n+\t    nls_cv_use_catgets=$withval, nls_cv_use_catgets=no)\n+\t  AC_MSG_RESULT($nls_cv_use_catgets)\n+\n+\t  if test \"$nls_cv_use_catgets\" = \"yes\"; then\n+\t    dnl No gettext in C library.  Try catgets next.\n+\t    AC_CHECK_LIB(i, main)\n+\t    AC_CHECK_FUNC(catgets,\n+\t      [AC_DEFINE(HAVE_CATGETS)\n+\t       INTLOBJS=\"\\$(CATOBJS)\"\n+\t       AC_PATH_PROG(GENCAT, gencat, no)dnl\n+\t       if test \"$GENCAT\" != \"no\"; then\n+\t\t AC_PATH_PROG(GMSGFMT, gmsgfmt, no)\n+\t\t if test \"$GMSGFMT\" = \"no\"; then\n+\t\t   AM_PATH_PROG_WITH_TEST(GMSGFMT, msgfmt,\n+\t\t    [test -z \"`$ac_dir/$ac_word -h 2>&1 | grep 'dv '`\"], no)\n+\t\t fi\n+\t\t AM_PATH_PROG_WITH_TEST(XGETTEXT, xgettext,\n+\t\t   [test -z \"`$ac_dir/$ac_word -h 2>&1 | grep '(HELP)'`\"], :)\n+\t\t USE_INCLUDED_LIBINTL=yes\n+\t\t CATOBJEXT=.cat\n+\t\t INSTOBJEXT=.cat\n+\t\t DATADIRNAME=lib\n+\t\t INTLDEPS='$(top_builddir)/intl/libintl.a'\n+\t\t INTLLIBS=$INTLDEPS\n+\t\t LIBS=`echo $LIBS | sed -e 's/-lintl//'`\n+\t\t nls_cv_header_intl=intl/libintl.h\n+\t\t nls_cv_header_libgt=intl/libgettext.h\n+\t       fi])\n+\t  fi\n+        fi\n+\n+        if test \"$CATOBJEXT\" = \"NONE\"; then\n+\t  dnl Neither gettext nor catgets in included in the C library.\n+\t  dnl Fall back on GNU gettext library.\n+\t  nls_cv_use_gnu_gettext=yes\n+        fi\n+      fi\n+\n+      if test \"$nls_cv_use_gnu_gettext\" = \"yes\"; then\n+        dnl Mark actions used to generate GNU NLS library.\n+        INTLOBJS=\"\\$(GETTOBJS)\"\n+        AM_PATH_PROG_WITH_TEST(MSGFMT, msgfmt,\n+\t  [test -z \"`$ac_dir/$ac_word -h 2>&1 | grep 'dv '`\"], msgfmt)\n+        AC_PATH_PROG(GMSGFMT, gmsgfmt, $MSGFMT)\n+        AM_PATH_PROG_WITH_TEST(XGETTEXT, xgettext,\n+\t  [test -z \"`$ac_dir/$ac_word -h 2>&1 | grep '(HELP)'`\"], :)\n+        AC_SUBST(MSGFMT)\n+\tUSE_INCLUDED_LIBINTL=yes\n+        CATOBJEXT=.gmo\n+        INSTOBJEXT=.mo\n+        DATADIRNAME=share\n+\tINTLDEPS='$(top_builddir)/intl/libintl.a'\n+\tINTLLIBS=$INTLDEPS\n+\tLIBS=`echo $LIBS | sed -e 's/-lintl//'`\n+        nls_cv_header_intl=intl/libintl.h\n+        nls_cv_header_libgt=intl/libgettext.h\n+      fi\n+\n+      dnl Test whether we really found GNU xgettext.\n+      if test \"$XGETTEXT\" != \":\"; then\n+\tdnl If it is no GNU xgettext we define it as : so that the\n+\tdnl Makefiles still can work.\n+\tif $XGETTEXT --omit-header /dev/null 2> /dev/null; then\n+\t  : ;\n+\telse\n+\t  AC_MSG_RESULT(\n+\t    [found xgettext program is not GNU xgettext; ignore it])\n+\t  XGETTEXT=\":\"\n+\tfi\n+      fi\n+\n+      # We need to process the po/ directory.\n+      POSUB=po\n+    else\n+      DATADIRNAME=share\n+      nls_cv_header_intl=intl/libintl.h\n+      nls_cv_header_libgt=intl/libgettext.h\n+    fi\n+    AC_LINK_FILES($nls_cv_header_libgt, $nls_cv_header_intl)\n+    AC_OUTPUT_COMMANDS(\n+     [case \"$CONFIG_FILES\" in *po/Makefile.in*)\n+        sed -e \"/POTFILES =/r po/POTFILES\" po/Makefile.in > po/Makefile\n+      esac])\n+\n+\n+    # If this is used in GNU gettext we have to set USE_NLS to `yes'\n+    # because some of the sources are only built for this goal.\n+    if test \"$PACKAGE\" = gettext; then\n+      USE_NLS=yes\n+      USE_INCLUDED_LIBINTL=yes\n+    fi\n+\n+    dnl These rules are solely for the distribution goal.  While doing this\n+    dnl we only have to keep exactly one list of the available catalogs\n+    dnl in configure.in.\n+    for lang in $ALL_LINGUAS; do\n+      GMOFILES=\"$GMOFILES $lang.gmo\"\n+      POFILES=\"$POFILES $lang.po\"\n+    done\n+\n+    dnl Make all variables we use known to autoconf.\n+    AC_SUBST(USE_INCLUDED_LIBINTL)\n+    AC_SUBST(CATALOGS)\n+    AC_SUBST(CATOBJEXT)\n+    AC_SUBST(DATADIRNAME)\n+    AC_SUBST(GMOFILES)\n+    AC_SUBST(INSTOBJEXT)\n+    AC_SUBST(INTLDEPS)\n+    AC_SUBST(INTLLIBS)\n+    AC_SUBST(INTLOBJS)\n+    AC_SUBST(POFILES)\n+    AC_SUBST(POSUB)\n+  ])\n+\n+AC_DEFUN(AM_GNU_GETTEXT,\n+  [AC_REQUIRE([AC_PROG_MAKE_SET])dnl\n+   AC_REQUIRE([AC_PROG_CC])dnl\n+   AC_REQUIRE([AC_PROG_RANLIB])dnl\n+   AC_REQUIRE([AC_ISC_POSIX])dnl\n+   AC_REQUIRE([AC_HEADER_STDC])dnl\n+   AC_REQUIRE([AC_C_CONST])dnl\n+   AC_REQUIRE([AC_C_INLINE])dnl\n+   AC_REQUIRE([AC_TYPE_OFF_T])dnl\n+   AC_REQUIRE([AC_TYPE_SIZE_T])dnl\n+   AC_REQUIRE([AC_FUNC_ALLOCA])dnl\n+   AC_REQUIRE([AC_FUNC_MMAP])dnl\n+\n+   AC_CHECK_HEADERS([argz.h limits.h locale.h nl_types.h malloc.h string.h \\\n+unistd.h sys/param.h])\n+   AC_CHECK_FUNCS([getcwd munmap putenv setenv setlocale strchr strcasecmp \\\n+strdup __argz_count __argz_stringify __argz_next])\n+\n+   if test \"${ac_cv_func_stpcpy+set}\" != \"set\"; then\n+     AC_CHECK_FUNCS(stpcpy)\n+   fi\n+   if test \"${ac_cv_func_stpcpy}\" = \"yes\"; then\n+     AC_DEFINE(HAVE_STPCPY)\n+   fi\n+\n+   AM_LC_MESSAGES\n+   AM_WITH_NLS\n+\n+   if test \"x$CATOBJEXT\" != \"x\"; then\n+     if test \"x$ALL_LINGUAS\" = \"x\"; then\n+       LINGUAS=\n+     else\n+       AC_MSG_CHECKING(for catalogs to be installed)\n+       NEW_LINGUAS=\n+       for lang in ${LINGUAS=$ALL_LINGUAS}; do\n+         case \"$ALL_LINGUAS\" in\n+          *$lang*) NEW_LINGUAS=\"$NEW_LINGUAS $lang\" ;;\n+         esac\n+       done\n+       LINGUAS=$NEW_LINGUAS\n+       AC_MSG_RESULT($LINGUAS)\n+     fi\n+\n+     dnl Construct list of names of catalog files to be constructed.\n+     if test -n \"$LINGUAS\"; then\n+       for lang in $LINGUAS; do CATALOGS=\"$CATALOGS $lang$CATOBJEXT\"; done\n+     fi\n+   fi\n+\n+   dnl The reference to <locale.h> in the installed <libintl.h> file\n+   dnl must be resolved because we cannot expect the users of this\n+   dnl to define HAVE_LOCALE_H.\n+   if test $ac_cv_header_locale_h = yes; then\n+     INCLUDE_LOCALE_H=\"#include <locale.h>\"\n+   else\n+     INCLUDE_LOCALE_H=\"\\\n+/* The system does not provide the header <locale.h>.  Take care yourself.  */\"\n+   fi\n+   AC_SUBST(INCLUDE_LOCALE_H)\n+\n+   dnl Determine which catalog format we have (if any is needed)\n+   dnl For now we know about two different formats:\n+   dnl   Linux libc-5 and the normal X/Open format\n+   test -d intl || mkdir intl\n+   if test \"$CATOBJEXT\" = \".cat\"; then\n+     AC_CHECK_HEADER(linux/version.h, msgformat=linux, msgformat=xopen)\n+\n+     dnl Transform the SED scripts while copying because some dumb SEDs\n+     dnl cannot handle comments.\n+     sed -e '/^#/d' $srcdir/intl/$msgformat-msg.sed > intl/po2msg.sed\n+   fi\n+   dnl po2tbl.sed is always needed.\n+   sed -e '/^#.*[^\\\\]$/d' -e '/^#$/d' \\\n+     $srcdir/intl/po2tbl.sed.in > intl/po2tbl.sed\n+\n+   dnl In the intl/Makefile.in we have a special dependency which makes\n+   dnl only sense for gettext.  We comment this out for non-gettext\n+   dnl packages.\n+   if test \"$PACKAGE\" = \"gettext\"; then\n+     GT_NO=\"#NO#\"\n+     GT_YES=\n+   else\n+     GT_NO=\n+     GT_YES=\"#YES#\"\n+   fi\n+   AC_SUBST(GT_NO)\n+   AC_SUBST(GT_YES)\n+\n+   dnl If the AC_CONFIG_AUX_DIR macro for autoconf is used we possibly\n+   dnl find the mkinstalldirs script in another subdir but ($top_srcdir).\n+   dnl Try to locate is.\n+   MKINSTALLDIRS=\n+   if test -n \"$ac_aux_dir\"; then\n+     MKINSTALLDIRS=\"$ac_aux_dir/mkinstalldirs\"\n+   fi\n+   if test -z \"$MKINSTALLDIRS\"; then\n+     MKINSTALLDIRS=\"\\$(top_srcdir)/mkinstalldirs\"\n+   fi\n+   AC_SUBST(MKINSTALLDIRS)\n+\n+   dnl *** For now the libtool support in intl/Makefile is not for real.\n+   l=\n+   AC_SUBST(l)\n+\n+   dnl Generate list of files to be processed by xgettext which will\n+   dnl be included in po/Makefile.\n+   test -d po || mkdir po\n+   if test \"x$srcdir\" != \"x.\"; then\n+     if test \"x`echo $srcdir | sed 's@/.*@@'`\" = \"x\"; then\n+       posrcprefix=\"$srcdir/\"\n+     else\n+       posrcprefix=\"../$srcdir/\"\n+     fi\n+   else\n+     posrcprefix=\"../\"\n+   fi\n+   rm -f po/POTFILES\n+   sed -e \"/^#/d\" -e \"/^\\$/d\" -e \"s,.*,\t$posrcprefix& \\\\\\\\,\" -e \"\\$s/\\(.*\\) \\\\\\\\/\\1/\" \\\n+\t< $srcdir/po/POTFILES.in > po/POTFILES\n+  ])\n+\n+# Search path for a program which passes the given test.\n+# Ulrich Drepper <drepper@cygnus.com>, 1996.\n+#\n+# This file can be copied and used freely without restrictions.  It can\n+# be used in projects which are not available under the GNU Public License\n+# but which still want to provide support for the GNU gettext functionality.\n+# Please note that the actual code is *not* freely available.\n+\n+# serial 1\n+\n+dnl AM_PATH_PROG_WITH_TEST(VARIABLE, PROG-TO-CHECK-FOR,\n+dnl   TEST-PERFORMED-ON-FOUND_PROGRAM [, VALUE-IF-NOT-FOUND [, PATH]])\n+AC_DEFUN(AM_PATH_PROG_WITH_TEST,\n+[# Extract the first word of \"$2\", so it can be a program name with args.\n+set dummy $2; ac_word=[$]2\n+AC_MSG_CHECKING([for $ac_word])\n+AC_CACHE_VAL(ac_cv_path_$1,\n+[case \"[$]$1\" in\n+  /*)\n+  ac_cv_path_$1=\"[$]$1\" # Let the user override the test with a path.\n+  ;;\n+  *)\n+  IFS=\"${IFS= \t}\"; ac_save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n+  for ac_dir in ifelse([$5], , $PATH, [$5]); do\n+    test -z \"$ac_dir\" && ac_dir=.\n+    if test -f $ac_dir/$ac_word; then\n+      if [$3]; then\n+\tac_cv_path_$1=\"$ac_dir/$ac_word\"\n+\tbreak\n+      fi\n+    fi\n+  done\n+  IFS=\"$ac_save_ifs\"\n+dnl If no 4th arg is given, leave the cache variable unset,\n+dnl so AC_PATH_PROGS will keep looking.\n+ifelse([$4], , , [  test -z \"[$]ac_cv_path_$1\" && ac_cv_path_$1=\"$4\"\n+])dnl\n+  ;;\n+esac])dnl\n+$1=\"$ac_cv_path_$1\"\n+if test -n \"[$]$1\"; then\n+  AC_MSG_RESULT([$]$1)\n+else\n+  AC_MSG_RESULT(no)\n+fi\n+AC_SUBST($1)dnl\n+])\n+\n+# Check whether LC_MESSAGES is available in <locale.h>.\n+# Ulrich Drepper <drepper@cygnus.com>, 1995.\n+#\n+# This file can be copied and used freely without restrictions.  It can\n+# be used in projects which are not available under the GNU Public License\n+# but which still want to provide support for the GNU gettext functionality.\n+# Please note that the actual code is *not* freely available.\n+\n+# serial 1\n+\n+AC_DEFUN(AM_LC_MESSAGES,\n+  [if test $ac_cv_header_locale_h = yes; then\n+    AC_CACHE_CHECK([for LC_MESSAGES], am_cv_val_LC_MESSAGES,\n+      [AC_TRY_LINK([#include <locale.h>], [return LC_MESSAGES],\n+       am_cv_val_LC_MESSAGES=yes, am_cv_val_LC_MESSAGES=no)])\n+    if test $am_cv_val_LC_MESSAGES = yes; then\n+      AC_DEFINE(HAVE_LC_MESSAGES)\n+    fi\n+  fi])\n \n # Do all the work for Automake.  This macro actually does too much --\n # some checks are only needed if your package does certain things.\n@@ -1915,39 +2399,6 @@ else\n fi\n AC_SUBST($1)])\n \n-# Add --enable-maintainer-mode option to configure.\n-# From Jim Meyering\n-\n-# serial 1\n-\n-AC_DEFUN(AM_MAINTAINER_MODE,\n-[AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])\n-  dnl maintainer-mode is disabled by default\n-  AC_ARG_ENABLE(maintainer-mode,\n-[  --enable-maintainer-mode enable make rules and dependencies not useful\n-                          (and sometimes confusing) to the casual installer],\n-      USE_MAINTAINER_MODE=$enableval,\n-      USE_MAINTAINER_MODE=no)\n-  AC_MSG_RESULT($USE_MAINTAINER_MODE)\n-  AM_CONDITIONAL(MAINTAINER_MODE, test $USE_MAINTAINER_MODE = yes)\n-  MAINT=$MAINTAINER_MODE_TRUE\n-  AC_SUBST(MAINT)dnl\n-]\n-)\n-\n-# Define a conditional.\n-\n-AC_DEFUN(AM_CONDITIONAL,\n-[AC_SUBST($1_TRUE)\n-AC_SUBST($1_FALSE)\n-if $2; then\n-  $1_TRUE=\n-  $1_FALSE='#'\n-else\n-  $1_TRUE='#'\n-  $1_FALSE=\n-fi])\n-\n # Like AC_CONFIG_HEADER, but automatically create stamp file.\n \n AC_DEFUN(AM_CONFIG_HEADER,"}, {"sha": "78035d3762e7680aa51792424c5bca746754312a", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -1,8 +1,54 @@\n /* config.h.in.  Generated automatically from configure.in by autoheader.  */\n \n+/* Define if using alloca.c.  */\n+#undef C_ALLOCA\n+\n+/* Define to empty if the keyword does not work.  */\n+#undef const\n+\n+/* Define to one of _getb67, GETB67, getb67 for Cray-2 and Cray-YMP systems.\n+   This function is required for alloca.c support on those systems.  */\n+#undef CRAY_STACKSEG_END\n+\n+/* Define if you have alloca, as a function or macro.  */\n+#undef HAVE_ALLOCA\n+\n+/* Define if you have <alloca.h> and it should be used (not on Ultrix).  */\n+#undef HAVE_ALLOCA_H\n+\n /* Define if you have a working `mmap' system call.  */\n #undef HAVE_MMAP\n \n+/* Define as __inline if that's what the C compiler calls it.  */\n+#undef inline\n+\n+/* Define to `long' if <sys/types.h> doesn't define.  */\n+#undef off_t\n+\n+/* Define if you need to in order for stat and other things to work.  */\n+#undef _POSIX_SOURCE\n+\n+/* Define to `unsigned' if <sys/types.h> doesn't define.  */\n+#undef size_t\n+\n+/* If using the C implementation of alloca, define if you know the\n+   direction of stack growth for your system; otherwise it will be\n+   automatically deduced at run-time.\n+ STACK_DIRECTION > 0 => grows toward higher addresses\n+ STACK_DIRECTION < 0 => grows toward lower addresses\n+ STACK_DIRECTION = 0 => direction of growth unknown\n+ */\n+#undef STACK_DIRECTION\n+\n+/* Define if you have the ANSI C header files.  */\n+#undef STDC_HEADERS\n+\n+// Needed for gettext.\n+#undef ENABLE_NLS\n+#undef HAVE_CATGETS\n+#undef HAVE_GETTEXT\n+#undef HAVE_STPCPY\n+\n // Define if GCC supports weak symbols\n #undef _GLIBCPP_SUPPORTS_WEAK\n \n@@ -75,6 +121,15 @@\n // Define if LC_MESSAGES is available in <locale.h>.\n #undef HAVE_LC_MESSAGES\n \n+/* Define if you have the __argz_count function.  */\n+#undef HAVE___ARGZ_COUNT\n+\n+/* Define if you have the __argz_next function.  */\n+#undef HAVE___ARGZ_NEXT\n+\n+/* Define if you have the __argz_stringify function.  */\n+#undef HAVE___ARGZ_STRINGIFY\n+\n /* Define if you have the _acosf function.  */\n #undef HAVE__ACOSF\n \n@@ -315,6 +370,9 @@\n /* Define if you have the cosl function.  */\n #undef HAVE_COSL\n \n+/* Define if you have the dcgettext function.  */\n+#undef HAVE_DCGETTEXT\n+\n /* Define if you have the drand48 function.  */\n #undef HAVE_DRAND48\n \n@@ -378,6 +436,9 @@\n /* Define if you have the fwscanf function.  */\n #undef HAVE_FWSCANF\n \n+/* Define if you have the getcwd function.  */\n+#undef HAVE_GETCWD\n+\n /* Define if you have the getpagesize function.  */\n #undef HAVE_GETPAGESIZE\n \n@@ -459,6 +520,9 @@\n /* Define if you have the modfl function.  */\n #undef HAVE_MODFL\n \n+/* Define if you have the munmap function.  */\n+#undef HAVE_MUNMAP\n+\n /* Define if you have the nan function.  */\n #undef HAVE_NAN\n \n@@ -471,6 +535,9 @@\n /* Define if you have the powl function.  */\n #undef HAVE_POWL\n \n+/* Define if you have the putenv function.  */\n+#undef HAVE_PUTENV\n+\n /* Define if you have the putwc function.  */\n #undef HAVE_PUTWC\n \n@@ -480,6 +547,12 @@\n /* Define if you have the qfpclass function.  */\n #undef HAVE_QFPCLASS\n \n+/* Define if you have the setenv function.  */\n+#undef HAVE_SETENV\n+\n+/* Define if you have the setlocale function.  */\n+#undef HAVE_SETLOCALE\n+\n /* Define if you have the signbitl function.  */\n #undef HAVE_SIGNBITL\n \n@@ -510,6 +583,18 @@\n /* Define if you have the sqrtl function.  */\n #undef HAVE_SQRTL\n \n+/* Define if you have the stpcpy function.  */\n+#undef HAVE_STPCPY\n+\n+/* Define if you have the strcasecmp function.  */\n+#undef HAVE_STRCASECMP\n+\n+/* Define if you have the strchr function.  */\n+#undef HAVE_STRCHR\n+\n+/* Define if you have the strdup function.  */\n+#undef HAVE_STRDUP\n+\n /* Define if you have the strtold function.  */\n #undef HAVE_STRTOLD\n \n@@ -645,6 +730,9 @@\n /* Define if you have the wscanf function.  */\n #undef HAVE_WSCANF\n \n+/* Define if you have the <argz.h> header file.  */\n+#undef HAVE_ARGZ_H\n+\n /* Define if you have the <endian.h> header file.  */\n #undef HAVE_ENDIAN_H\n \n@@ -663,6 +751,9 @@\n /* Define if you have the <inttypes.h> header file.  */\n #undef HAVE_INTTYPES_H\n \n+/* Define if you have the <limits.h> header file.  */\n+#undef HAVE_LIMITS_H\n+\n /* Define if you have the <locale.h> header file.  */\n #undef HAVE_LOCALE_H\n \n@@ -672,15 +763,27 @@\n /* Define if you have the <machine/param.h> header file.  */\n #undef HAVE_MACHINE_PARAM_H\n \n+/* Define if you have the <malloc.h> header file.  */\n+#undef HAVE_MALLOC_H\n+\n /* Define if you have the <nan.h> header file.  */\n #undef HAVE_NAN_H\n \n+/* Define if you have the <nl_types.h> header file.  */\n+#undef HAVE_NL_TYPES_H\n+\n+/* Define if you have the <string.h> header file.  */\n+#undef HAVE_STRING_H\n+\n /* Define if you have the <sys/isa_defs.h> header file.  */\n #undef HAVE_SYS_ISA_DEFS_H\n \n /* Define if you have the <sys/machine.h> header file.  */\n #undef HAVE_SYS_MACHINE_H\n \n+/* Define if you have the <sys/param.h> header file.  */\n+#undef HAVE_SYS_PARAM_H\n+\n /* Define if you have the <sys/resource.h> header file.  */\n #undef HAVE_SYS_RESOURCE_H\n \n@@ -690,6 +793,9 @@\n /* Define if you have the <wchar.h> header file.  */\n #undef HAVE_WCHAR_H\n \n+/* Define if you have the i library (-li).  */\n+#undef HAVE_LIBI\n+\n /* Define if you have the m library (-lm).  */\n #undef HAVE_LIBM\n "}, {"sha": "60eb006a8474a6421b165f56450e6fe1bf461c23", "filename": "libstdc++-v3/config/io/basic_file_libio.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_libio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_libio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_libio.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "previous_filename": "libstdc++-v3/config/basic_file_libio.cc"}, {"sha": "4c6591fd9f64813a5caec269d5cd029b26207cdf", "filename": "libstdc++-v3/config/io/basic_file_libio.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_libio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_libio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_libio.h?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "previous_filename": "libstdc++-v3/config/basic_file_libio.h"}, {"sha": "0bfd1c4acf956090057c080a77f0e95aca0dc84c", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "previous_filename": "libstdc++-v3/config/basic_file_stdio.cc"}, {"sha": "edf4d98baa9340d18bce22b174880c12bd2d4677", "filename": "libstdc++-v3/config/io/basic_file_stdio.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "previous_filename": "libstdc++-v3/config/basic_file_stdio.h"}, {"sha": "59267985f9662bf28689401ed98270eb601ec08d", "filename": "libstdc++-v3/config/io/c_io_libio.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_libio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_libio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_libio.h?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "previous_filename": "libstdc++-v3/config/c_io_libio.h"}, {"sha": "38d8b55e0c2aed0fc534f1f6bd4a8528f554a1fa", "filename": "libstdc++-v3/config/io/c_io_libio_codecvt.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_libio_codecvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_libio_codecvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_libio_codecvt.c?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "previous_filename": "libstdc++-v3/config/c_io_libio_codecvt.c"}, {"sha": "1ea8b3081fce55505b207f997e4acc21043bb88c", "filename": "libstdc++-v3/config/io/c_io_stdio.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "previous_filename": "libstdc++-v3/config/c_io_stdio.h"}, {"sha": "493ac0142086849ea00c7a4c2b6a2522451e29c2", "filename": "libstdc++-v3/config/locale/c_locale_generic.cc", "status": "renamed", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_generic.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -38,16 +38,20 @@\n namespace std \n {\n   void\n-  locale::facet::_S_create_c_locale(__c_locale& /*__cloc*/, const char*)\n+  locale::facet::_S_create_c_locale(__c_locale&, const char*)\n   { }\n \n   void\n-  locale::facet::_S_destroy_c_locale(__c_locale& /*__cloc*/)\n+  locale::facet::_S_destroy_c_locale(__c_locale&)\n   { }\n \n+  __c_locale\n+  locale::facet::_S_clone_c_locale(__c_locale&)\n+  { return __c_locale(); }\n+\n   template<> \n     void\n-    numpunct<char>::_M_initialize_numpunct(__c_locale /*__cloc*/)\n+    numpunct<char>::_M_initialize_numpunct(__c_locale)\n     {\n       // \"C\" locale\n       _M_decimal_point = '.';\n@@ -60,7 +64,7 @@ namespace std\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<> \n     void\n-    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale /*__cloc*/)\n+    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale)\n     {\n       // \"C\" locale\n       _M_decimal_point = L'.';\n@@ -73,7 +77,7 @@ namespace std\n \n   template<> \n     void\n-    moneypunct<char>::_M_initialize_moneypunct(__c_locale /*__cloc*/)\n+    moneypunct<char>::_M_initialize_moneypunct(__c_locale)\n     {\n       // \"C\" locale\n       _M_decimal_point = '.';\n@@ -90,7 +94,7 @@ namespace std\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<> \n     void\n-    moneypunct<wchar_t>::_M_initialize_moneypunct(__c_locale /*__cloc*/)\n+    moneypunct<wchar_t>::_M_initialize_moneypunct(__c_locale)\n     {\n       // \"C\" locale\n       _M_decimal_point = L'.';\n@@ -105,3 +109,4 @@ namespace std\n     }\n #endif\n }  // namespace std\n+", "previous_filename": "libstdc++-v3/config/c_locale_generic.cc"}, {"sha": "4c205297f563b999bdd037f7b0c0873db96ae53c", "filename": "libstdc++-v3/config/locale/c_locale_generic.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_generic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_generic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_generic.h?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "previous_filename": "libstdc++-v3/config/c_locale_generic.h"}, {"sha": "a003c330687ae7a69fbf2247cb1b0848b93a2c7d", "filename": "libstdc++-v3/config/locale/c_locale_gnu.cc", "status": "renamed", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -61,6 +61,10 @@ namespace std\n       __freelocale(__cloc); \n   }\n \n+  __c_locale\n+  locale::facet::_S_clone_c_locale(__c_locale& __cloc)\n+  { return __duplocale(__cloc); }\n+\n   template<> \n     void\n     numpunct<char>::_M_initialize_numpunct(__c_locale __cloc)", "previous_filename": "libstdc++-v3/config/c_locale_gnu.cc"}, {"sha": "f3c680238820e7e59f96c69234199b02c6a79bed", "filename": "libstdc++-v3/config/locale/c_locale_gnu.h", "status": "renamed", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.h?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -34,8 +34,16 @@\n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n #include <clocale>\n+#include <langinfo.h>\t\t// For codecvt\n+#include <iconv.h>\t\t// For codecvt using iconv, iconv_t\n+#include <libintl.h> \t\t// For messages\n \n namespace std\n {\n   typedef __locale_t\t\t__c_locale;\n }\n+\n+\n+\n+\n+", "previous_filename": "libstdc++-v3/config/c_locale_gnu.h"}, {"sha": "493ac0142086849ea00c7a4c2b6a2522451e29c2", "filename": "libstdc++-v3/config/locale/c_locale_ieee_1003.1-200x.cc", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_ieee_1003.1-200x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_ieee_1003.1-200x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_ieee_1003.1-200x.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,112 @@\n+// Wrapper for underlying C-language localization -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.8  Standard locale categories.\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <locale>\n+\n+namespace std \n+{\n+  void\n+  locale::facet::_S_create_c_locale(__c_locale&, const char*)\n+  { }\n+\n+  void\n+  locale::facet::_S_destroy_c_locale(__c_locale&)\n+  { }\n+\n+  __c_locale\n+  locale::facet::_S_clone_c_locale(__c_locale&)\n+  { return __c_locale(); }\n+\n+  template<> \n+    void\n+    numpunct<char>::_M_initialize_numpunct(__c_locale)\n+    {\n+      // \"C\" locale\n+      _M_decimal_point = '.';\n+      _M_thousands_sep = ',';\n+      _M_grouping = \"\";\n+      _M_truename = \"true\";\n+      _M_falsename = \"false\";\n+    }\n+      \n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<> \n+    void\n+    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale)\n+    {\n+      // \"C\" locale\n+      _M_decimal_point = L'.';\n+      _M_thousands_sep = L',';\n+      _M_grouping = \"\";\n+      _M_truename = L\"true\";\n+      _M_falsename = L\"false\";\n+    }\n+#endif\n+\n+  template<> \n+    void\n+    moneypunct<char>::_M_initialize_moneypunct(__c_locale)\n+    {\n+      // \"C\" locale\n+      _M_decimal_point = '.';\n+      _M_thousands_sep = ',';\n+      _M_grouping = \"\";\n+      _M_curr_symbol = string_type();\n+      _M_positive_sign = string_type();\n+      _M_negative_sign = string_type();\n+      _M_frac_digits = 0;\n+      _M_pos_format = money_base::_S_default_pattern;\n+      _M_neg_format = money_base::_S_default_pattern;\n+    }\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<> \n+    void\n+    moneypunct<wchar_t>::_M_initialize_moneypunct(__c_locale)\n+    {\n+      // \"C\" locale\n+      _M_decimal_point = L'.';\n+      _M_thousands_sep = L',';\n+      _M_grouping = \"\";\n+      _M_curr_symbol = string_type();\n+      _M_positive_sign = string_type();\n+      _M_negative_sign = string_type();\n+      _M_frac_digits = 0;\n+      _M_pos_format = money_base::_S_default_pattern;\n+      _M_neg_format = money_base::_S_default_pattern;\n+    }\n+#endif\n+}  // namespace std\n+"}, {"sha": "bbfb85eb9e6e82c93138a2067c8b4a070621a395", "filename": "libstdc++-v3/config/locale/c_locale_ieee_1003.1-200x.h", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_ieee_1003.1-200x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_ieee_1003.1-200x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_ieee_1003.1-200x.h?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,49 @@\n+// Wrapper for underlying C-language localization -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.8  Standard locale categories.\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <clocale>\n+#include <langinfo.h>\t\t// For codecvt\n+#include <iconv.h>\t\t// For codecvt using iconv, iconv_t\n+#include <nl_types.h> \t\t// For messages\n+\n+namespace std\n+{\n+  typedef __locale_t\t\t__c_locale;\n+}\n+\n+\n+\n+\n+"}, {"sha": "24db4c84dc2cabe88f91e5a0c6c39903a1b3131b", "filename": "libstdc++-v3/config/locale/codecvt_specializations_generic.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcodecvt_specializations_generic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcodecvt_specializations_generic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcodecvt_specializations_generic.h?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,38 @@\n+// Locale support (codecvt) -*- C++ -*-\n+\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.1.5 Template class codecvt\n+//\n+\n+// Warning: this file is not meant for user inclusion.  Use <locale>.\n+\n+// Written by Benjamin Kosnik <bkoz@cygnus.com>\n+\n+// XXX dummy file"}, {"sha": "3fe261cb6210665b6e049e737356a89cf45b1836", "filename": "libstdc++-v3/config/locale/codecvt_specializations_ieee_1003.1-200x.h", "status": "added", "additions": 453, "deletions": 0, "changes": 453, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcodecvt_specializations_ieee_1003.1-200x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcodecvt_specializations_ieee_1003.1-200x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcodecvt_specializations_ieee_1003.1-200x.h?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,453 @@\n+// Locale support (codecvt) -*- C++ -*-\n+\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.1.5 Template class codecvt\n+//\n+\n+// Warning: this file is not meant for user inclusion.  Use <locale>.\n+\n+// Written by Benjamin Kosnik <bkoz@cygnus.com>\n+\n+  // XXX \n+  // __enc_traits may need to move up the locale header hierarchy,\n+  // depending on if ctype ends up using it.\n+\n+  // Extensions to use icov for dealing with character encodings,\n+  // including conversions and comparisons between various character\n+  // sets.  This object encapsulates data that may need to be shared between\n+  // char_traits, codecvt and ctype.\n+\n+#if _GLIBCPP_USE_SHADOW_HEADERS\n+  using _C_legacy::CODESET;\n+#endif\n+\n+  // XXX\n+  // Define this here to codecvt.cc can have _S_max_size definition.\n+#define _GLIBCPP_USE___ENC_TRAITS 1\n+\n+  class __enc_traits\n+  {\n+  public:\n+    // Types: \n+    // NB: A conversion descriptor subsumes and enhances the\n+    // functionality of a simple state type such as mbstate_t.\n+    typedef iconv_t\t__desc_type;\n+    \n+  protected:\n+    // Data Members:\n+    // Max size of charset encoding name\n+    static const int \t_S_max_size = 32;\n+    // Name of internal character set encoding.\n+    char\t       \t_M_int_enc[_S_max_size];\n+    // Name of external character set encoding.\n+    char  \t       \t_M_ext_enc[_S_max_size];\n+\n+    // Conversion descriptor between external encoding to internal encoding.\n+    __desc_type\t\t_M_in_desc;\n+    // Conversion descriptor between internal encoding to external encoding.\n+    __desc_type\t\t_M_out_desc;\n+\n+    // Details the byte-order marker for the external encoding, if necessary.\n+    int\t\t\t_M_ext_bom;\n+\n+    // Details the byte-order marker for the internal encoding, if necessary.\n+    int\t\t\t_M_int_bom;\n+\n+  public:\n+    __enc_traits(const locale& __loc = locale())\n+    : _M_in_desc(0), _M_out_desc(0), _M_ext_bom(0), _M_int_bom(0)\n+    {\n+      // __intc_end = whatever we are using internally, which is\n+      // UCS4 (linux) \n+      // UCS2 == UNICODE  (microsoft, java, aix, whatever...)\n+      // XXX Currently don't know how to get this data from target system...\n+      strcpy(_M_int_enc, \"UCS4\");\n+\n+      // __extc_end = external codeset in current locale\n+      // XXX There has got to be a better way to do this.\n+      __c_locale __cloc;\n+      locale::facet::_S_create_c_locale(__cloc, __loc.name().c_str());\n+      strcpy(_M_ext_enc, __nl_langinfo_l(CODESET, __cloc));\n+      locale::facet::_S_destroy_c_locale(__cloc);\n+    }\n+\n+    __enc_traits(const char* __int, const char* __ext, int __ibom = 0, \n+\t\t int __ebom = 0)\n+    : _M_in_desc(0), _M_out_desc(0), _M_ext_bom(0), _M_int_bom(0)\n+    {\n+      strncpy(_M_int_enc, __int, _S_max_size);\n+      strncpy(_M_ext_enc, __ext, _S_max_size);\n+    }\n+\n+    // 21.1.2 traits typedefs\n+    // p4\n+    // typedef STATE_T state_type\n+    // requires: state_type shall meet the requirements of\n+    // CopyConstructible types (20.1.3)\n+    __enc_traits(const __enc_traits& __obj)\n+    {\n+      strncpy(_M_int_enc, __obj._M_int_enc, _S_max_size);\n+      strncpy(_M_ext_enc, __obj._M_ext_enc, _S_max_size);\n+      _M_ext_bom = __obj._M_ext_bom;\n+      _M_int_bom = __obj._M_int_bom;\n+    }\n+\n+    ~__enc_traits()\n+    {\n+      iconv_close(_M_in_desc);\n+      iconv_close(_M_out_desc);\n+    } \n+\n+    // Initializes\n+    void\n+    _M_init()\n+    {\n+      _M_in_desc = iconv_open(_M_int_enc, _M_ext_enc);\n+      _M_out_desc = iconv_open(_M_ext_enc, _M_int_enc);\n+      if (_M_out_desc == iconv_t(-1) || _M_in_desc == iconv_t(-1))\n+\t{\n+\t  // XXX Extended error checking.\n+\t}\n+    }\n+\n+    bool\n+    _M_good()\n+    { \n+      return _M_out_desc && _M_in_desc \n+\t     && _M_out_desc != iconv_t(-1) && _M_in_desc != iconv_t(-1);\n+    }\n+\n+    const __desc_type* \n+    _M_get_in_descriptor()\n+    { return &_M_in_desc; }\n+\n+    const __desc_type* \n+    _M_get_out_descriptor()\n+    { return &_M_out_desc; }\n+\n+   const char* \n+    _M_get_internal_enc()\n+    { return _M_int_enc; }\n+\n+    const char* \n+    _M_get_external_enc()\n+    { return _M_ext_enc; }\n+\n+    int \n+    _M_get_external_bom()\n+    { return _M_ext_bom; }\n+\n+    int \n+    _M_get_internal_bom()\n+    { return _M_int_bom; }\n+  };\n+\n+  // Partial specialization\n+  // This specialization takes advantage of iconv to provide code\n+  // conversions between a large number of character encodings.\n+  template<typename _InternT, typename _ExternT>\n+    class codecvt<_InternT, _ExternT, __enc_traits>\n+    : public __codecvt_abstract_base<_InternT, _ExternT, __enc_traits>\n+    {\n+    public:      \n+      // Types:\n+      typedef codecvt_base::result\t\t\tresult;\n+      typedef _InternT \t\t\t\t\tintern_type;\n+      typedef _ExternT \t\t\t\t\textern_type;\n+      typedef __enc_traits \t\t\t\tstate_type;\n+      typedef __enc_traits::__desc_type \t\t__desc_type;\n+      typedef __enc_traits\t\t\t\t__enc_type;\n+\n+      // Data Members:\n+      static locale::id \t\tid;\n+\n+      explicit \n+      codecvt(size_t __refs = 0)\n+      : __codecvt_abstract_base<intern_type, extern_type, state_type>(__refs)\n+      { }\n+\n+      explicit \n+      codecvt(__enc_type* __enc, size_t __refs = 0)\n+      : __codecvt_abstract_base<intern_type, extern_type, state_type>(__refs)\n+      { }\n+\n+    protected:\n+      virtual \n+      ~codecvt() { }\n+\n+      virtual result\n+      do_out(state_type& __state, const intern_type* __from, \n+\t     const intern_type* __from_end, const intern_type*& __from_next,\n+\t     extern_type* __to, extern_type* __to_end,\n+\t     extern_type*& __to_next) const;\n+\n+      virtual result\n+      do_unshift(state_type& __state, extern_type* __to, \n+\t\t extern_type* __to_end, extern_type*& __to_next) const;\n+\n+      virtual result\n+      do_in(state_type& __state, const extern_type* __from, \n+\t    const extern_type* __from_end, const extern_type*& __from_next,\n+\t    intern_type* __to, intern_type* __to_end, \n+\t    intern_type*& __to_next) const;\n+\n+      virtual int \n+      do_encoding() const throw();\n+\n+      virtual bool \n+      do_always_noconv() const throw();\n+\n+      virtual int \n+      do_length(const state_type&, const extern_type* __from, \n+\t\tconst extern_type* __end, size_t __max) const;\n+\n+      virtual int \n+      do_max_length() const throw();\n+    };\n+\n+  template<typename _InternT, typename _ExternT>\n+    locale::id \n+    codecvt<_InternT, _ExternT, __enc_traits>::id;\n+\n+  // This adaptor works around the signature problems of the second\n+  // argument to iconv():  SUSv2 and others use 'const char**', but glibc 2.2\n+  // uses 'char**', which is what the standard is (apparently) due to use\n+  // in the future.  Using this adaptor, g++ will do the work for us.\n+  template<typename _T>\n+    inline size_t\n+    __iconv_adaptor(size_t(*iconv_func)(iconv_t, _T, size_t*, char**, size_t*),\n+                    iconv_t cd, char** inbuf, size_t* inbytesleft,\n+                    char** outbuf, size_t* outbytesleft)\n+    {\n+      return iconv_func(cd, (_T)inbuf, inbytesleft, outbuf, outbytesleft);\n+    }\n+\n+  template<typename _InternT, typename _ExternT>\n+    codecvt_base::result\n+    codecvt<_InternT, _ExternT, __enc_traits>::\n+    do_out(state_type& __state, const intern_type* __from, \n+\t   const intern_type* __from_end, const intern_type*& __from_next,\n+\t   extern_type* __to, extern_type* __to_end,\n+\t   extern_type*& __to_next) const\n+    {\n+      result __ret = error;\n+      if (__state._M_good())\n+\t{\n+\t  typedef state_type::__desc_type\t__desc_type;\n+\t  const __desc_type* __desc = __state._M_get_out_descriptor();\n+\t  const size_t __fmultiple = sizeof(intern_type) / sizeof(char);\n+\t  size_t __flen = __fmultiple * (__from_end - __from);\n+\t  const size_t __tmultiple = sizeof(extern_type) / sizeof(char);\n+\t  size_t __tlen = __tmultiple * (__to_end - __to); \n+\t  \n+\t  // Argument list for iconv specifies a byte sequence. Thus,\n+\t  // all to/from arrays must be brutally casted to char*.\n+\t  char* __cto = reinterpret_cast<char*>(__to);\n+\t  char* __cfrom;\n+\t  size_t __conv;\n+\n+\t  // Some encodings need a byte order marker as the first item\n+\t  // in the byte stream, to designate endian-ness. The default\n+\t  // value for the byte order marker is NULL, so if this is\n+\t  // the case, it's not necessary and we can just go on our\n+\t  // merry way.\n+\t  int __int_bom = __state._M_get_internal_bom();\n+\t  if (__int_bom)\n+\t    {\t  \n+\t      size_t __size = __from_end - __from;\n+\t      intern_type* __cfixed = static_cast<intern_type*>(__builtin_alloca(sizeof(intern_type) * (__size + 1)));\n+\t      __cfixed[0] = static_cast<intern_type>(__int_bom);\n+\t      char_traits<intern_type>::copy(__cfixed + 1, __from, __size);\n+\t      __cfrom = reinterpret_cast<char*>(__cfixed);\n+\t      __conv = __iconv_adaptor(iconv, *__desc, &__cfrom,\n+                                        &__flen, &__cto, &__tlen); \n+\t    }\n+\t  else\n+\t    {\n+\t      intern_type* __cfixed = const_cast<intern_type*>(__from);\n+\t      __cfrom = reinterpret_cast<char*>(__cfixed);\n+\t      __conv = __iconv_adaptor(iconv, *__desc, &__cfrom,\n+                                       &__flen, &__cto, &__tlen); \n+\t    }\n+\n+\t  if (__conv != size_t(-1))\n+\t    {\n+\t      __from_next = reinterpret_cast<const intern_type*>(__cfrom);\n+\t      __to_next = reinterpret_cast<extern_type*>(__cto);\n+\t      __ret = ok;\n+\t    }\n+\t  else \n+\t    {\n+\t      if (__flen < static_cast<size_t>(__from_end - __from))\n+\t\t{\n+\t\t  __from_next = reinterpret_cast<const intern_type*>(__cfrom);\n+\t\t  __to_next = reinterpret_cast<extern_type*>(__cto);\n+\t\t  __ret = partial;\n+\t\t}\n+\t      else\n+\t\t__ret = error;\n+\t    }\n+\t}\n+      return __ret; \n+    }\n+\n+  template<typename _InternT, typename _ExternT>\n+    codecvt_base::result\n+    codecvt<_InternT, _ExternT, __enc_traits>::\n+    do_unshift(state_type& __state, extern_type* __to, \n+\t       extern_type* __to_end, extern_type*& __to_next) const\n+    {\n+      result __ret = error;\n+      if (__state._M_good())\n+\t{\n+\t  typedef state_type::__desc_type\t__desc_type;\n+\t  const __desc_type* __desc = __state._M_get_in_descriptor();\n+\t  const size_t __tmultiple = sizeof(intern_type) / sizeof(char);\n+\t  size_t __tlen = __tmultiple * (__to_end - __to); \n+\t  \n+\t  // Argument list for iconv specifies a byte sequence. Thus,\n+\t  // all to/from arrays must be brutally casted to char*.\n+\t  char* __cto = reinterpret_cast<char*>(__to);\n+\t  size_t __conv = __iconv_adaptor(iconv,*__desc, NULL, NULL,\n+                                          &__cto, &__tlen); \n+\t  \n+\t  if (__conv != size_t(-1))\n+\t    {\n+\t      __to_next = reinterpret_cast<extern_type*>(__cto);\n+\t      if (__tlen == __tmultiple * (__to_end - __to))\n+\t\t__ret = noconv;\n+\t      else if (__tlen == 0)\n+\t\t__ret = ok;\n+\t      else\n+\t\t__ret = partial;\n+\t    }\n+\t  else \n+\t    __ret = error;\n+\t}\n+      return __ret; \n+    }\n+   \n+  template<typename _InternT, typename _ExternT>\n+    codecvt_base::result\n+    codecvt<_InternT, _ExternT, __enc_traits>::\n+    do_in(state_type& __state, const extern_type* __from, \n+\t  const extern_type* __from_end, const extern_type*& __from_next,\n+\t  intern_type* __to, intern_type* __to_end, \n+\t  intern_type*& __to_next) const\n+    { \n+      result __ret = error;\n+      if (__state._M_good())\n+\t{\n+\t  typedef state_type::__desc_type\t__desc_type;\n+\t  const __desc_type* __desc = __state._M_get_in_descriptor();\n+\t  const size_t __fmultiple = sizeof(extern_type) / sizeof(char);\n+\t  size_t __flen = __fmultiple * (__from_end - __from);\n+\t  const size_t __tmultiple = sizeof(intern_type) / sizeof(char);\n+\t  size_t __tlen = __tmultiple * (__to_end - __to); \n+\t  \n+\t  // Argument list for iconv specifies a byte sequence. Thus,\n+\t  // all to/from arrays must be brutally casted to char*.\n+\t  char* __cto = reinterpret_cast<char*>(__to);\n+\t  char* __cfrom;\n+\t  size_t __conv;\n+\n+\t  // Some encodings need a byte order marker as the first item\n+\t  // in the byte stream, to designate endian-ness. The default\n+\t  // value for the byte order marker is NULL, so if this is\n+\t  // the case, it's not necessary and we can just go on our\n+\t  // merry way.\n+\t  int __ext_bom = __state._M_get_external_bom();\n+\t  if (__ext_bom)\n+\t    {\t  \n+\t      size_t __size = __from_end - __from;\n+\t      extern_type* __cfixed =  static_cast<extern_type*>(__builtin_alloca(sizeof(extern_type) * (__size + 1)));\n+\t      __cfixed[0] = static_cast<extern_type>(__ext_bom);\n+\t      char_traits<extern_type>::copy(__cfixed + 1, __from, __size);\n+\t      __cfrom = reinterpret_cast<char*>(__cfixed);\n+\t      __conv = __iconv_adaptor(iconv, *__desc, &__cfrom,\n+                                       &__flen, &__cto, &__tlen); \n+\t    }\n+\t  else\n+\t    {\n+\t      extern_type* __cfixed = const_cast<extern_type*>(__from);\n+\t      __cfrom = reinterpret_cast<char*>(__cfixed);\n+\t      __conv = __iconv_adaptor(iconv, *__desc, &__cfrom,\n+                                       &__flen, &__cto, &__tlen); \n+\t    }\n+\n+\t  \n+\t  if (__conv != size_t(-1))\n+\t    {\n+\t      __from_next = reinterpret_cast<const extern_type*>(__cfrom);\n+\t      __to_next = reinterpret_cast<intern_type*>(__cto);\n+\t      __ret = ok;\n+\t    }\n+\t  else \n+\t    {\n+\t      if (__flen < static_cast<size_t>(__from_end - __from))\n+\t\t{\n+\t\t  __from_next = reinterpret_cast<const extern_type*>(__cfrom);\n+\t\t  __to_next = reinterpret_cast<intern_type*>(__cto);\n+\t\t  __ret = partial;\n+\t\t}\n+\t      else\n+\t\t__ret = error;\n+\t    }\n+\t}\n+      return __ret; \n+    }\n+  \n+  template<typename _InternT, typename _ExternT>\n+    int \n+    codecvt<_InternT, _ExternT, __enc_traits>::\n+    do_encoding() const throw()\n+    { return 0; }\n+  \n+  template<typename _InternT, typename _ExternT>\n+    bool \n+    codecvt<_InternT, _ExternT, __enc_traits>::\n+    do_always_noconv() const throw()\n+    { return false; }\n+  \n+  template<typename _InternT, typename _ExternT>\n+    int \n+    codecvt<_InternT, _ExternT, __enc_traits>::\n+    do_length(const state_type&, const extern_type* __from, \n+\t      const extern_type* __end, size_t __max) const\n+    { return min(__max, static_cast<size_t>(__end - __from)); }\n+\n+#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+// 74.  Garbled text for codecvt::do_max_length\n+  template<typename _InternT, typename _ExternT>\n+    int \n+    codecvt<_InternT, _ExternT, __enc_traits>::\n+    do_max_length() const throw()\n+    { return 1; }\n+#endif"}, {"sha": "480ab88d824155eadf1116f363c00e2ce644d5fe", "filename": "libstdc++-v3/config/locale/messages_members_generic.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_generic.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,45 @@\n+// std::messages implementation details, generic version -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.7.1.2  messages virtual functions\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <locale>\n+\n+namespace std\n+{\n+  // Specializations\n+  template<>\n+    string\n+    messages<char>::do_get(catalog, int, int, const string& __dfault) const\n+    { return __dfault; }\n+}"}, {"sha": "43f23ae64ecdc4716a67e7531e4f5ec676a23806", "filename": "libstdc++-v3/config/locale/messages_members_generic.h", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_generic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_generic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_generic.h?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,62 @@\n+// std::messages implementation details, generic version -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.7.1.2  messages virtual functions\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+  // Non-virtual member functions.\n+  template<typename _CharT>\n+    messages<_CharT>::catalog \n+    messages<_CharT>::open(const basic_string<char>& __s, const locale& __loc, \n+\t\t\t   const char*) const\n+    { return this->do_open(__s, __loc); }\n+\n+  // Virtual member functions.\n+  template<typename _CharT>\n+    messages<_CharT>::~messages()\n+    { }\n+\n+  template<typename _CharT>\n+    messages<_CharT>::catalog \n+    messages<_CharT>::do_open(const basic_string<char>&, const locale&) const\n+    { return 0; }\n+\n+  template<typename _CharT>\n+    messages<_CharT>::string_type  \n+    messages<_CharT>::do_get(catalog, int, int, \n+\t\t\t     const string_type& __dfault) const\n+    { return __dfault; }\n+\n+  template<typename _CharT>\n+    void    \n+    messages<_CharT>::do_close(catalog) const \n+    { }"}, {"sha": "ef1a5a360eb441f41957d6bb7a88a371a71e9abb", "filename": "libstdc++-v3/config/locale/messages_members_gnu.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_gnu.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,57 @@\n+// std::messages implementation details, GNU version -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.7.1.2  messages virtual functions\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <locale>\n+\n+namespace std\n+{\n+  // Specializations\n+  template<>\n+    string\n+    messages<char>::do_get(catalog, int, int, const string& __dfault) const\n+    {\n+#if 0\n+      // Requires glibc 2.3\n+      __c_locale __old = uselocale(_M_c_locale_messages);\n+      const char* __msg = const_cast<const char*>(gettext(__dfault.c_str()));\n+      uselocale(__old);\n+      return string(__msg);\n+#else\n+      setlocale(LC_ALL, _M_name_messages);\n+      const char* __msg = gettext(__dfault.c_str());\n+      return string(__msg);\n+#endif\n+    }\n+}"}, {"sha": "2afc5589b127fdb4cf947484e6c0f1e403953b32", "filename": "libstdc++-v3/config/locale/messages_members_gnu.h", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_gnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_gnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_gnu.h?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,93 @@\n+// std::messages implementation details, GNU version -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.7.1.2  messages virtual functions\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+  // Non-virtual member functions.\n+  template<typename _CharT>\n+    messages<_CharT>::catalog \n+    messages<_CharT>::open(const basic_string<char>& __s, const locale& __loc, \n+\t\t\t   const char* __dir) const\n+    { \n+      bindtextdomain(__s.c_str(), __dir);\n+      return this->do_open(__s, __loc); \n+    }\n+\n+  // Virtual member functions.\n+  template<typename _CharT>\n+    messages<_CharT>::~messages()\n+    { \n+      if (_M_c_locale_messages)\n+\t_S_destroy_c_locale(_M_c_locale_messages); \n+    }\n+\n+  template<typename _CharT>\n+    messages<_CharT>::catalog \n+    messages<_CharT>::do_open(const basic_string<char>& __s, \n+\t\t\t      const locale&) const\n+    { \n+      // No error checking is done, assume the catalog exists and can\n+      // be used.\n+      textdomain(__s.c_str());\n+      return 0;\n+    }\n+\n+  template<typename _CharT>\n+    messages<_CharT>::string_type  \n+    messages<_CharT>::do_get(catalog, int, int, \n+\t\t\t     const string_type& __dfault) const\n+    { \n+#if 0\n+      // Requires glibc 2.3\n+      __c_locale __old = uselocale(_M_c_locale_messages);\n+      char* __msg = gettext(_M_convert_to_char(__dfault));\n+      uselocale(__old);\n+      return _M_convert_from_char(__msg);\n+#else\n+      setlocale(LC_ALL, _M_name_messages);\n+      char* __msg = gettext(_M_convert_to_char(__dfault));\n+      return _M_convert_from_char(__msg);\n+#endif\n+    }\n+\n+  template<typename _CharT>\n+    void    \n+    messages<_CharT>::do_close(catalog) const \n+    { }\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "0f667d6a4d021395b04f3bab33ef2d579ebed70c", "filename": "libstdc++-v3/config/locale/messages_members_ieee_1003.1-200x.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_ieee_1003.1-200x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_ieee_1003.1-200x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_ieee_1003.1-200x.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,49 @@\n+// std::messages implementation details, IEEE 1003.1-200x version -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.7.1.2  messages virtual functions\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <locale>\n+\n+namespace std\n+{\n+  // Specializations\n+  template<>\n+    string\n+    messages<char>::do_get(catalog __c, int __setid, int __msgid, \n+\t\t\t   const string& __dfault) const\n+    {\n+      nl_catd __nlc = reinterpret_cast<nl_catd>(__c);\n+      return string(catgets(__nlc, __setid, __msgid, __dfault.c_str())); \n+    }\n+}"}, {"sha": "c49013527968e2900f15ce1afe9c2934ad561296", "filename": "libstdc++-v3/config/locale/messages_members_ieee_1003.1-200x.h", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_ieee_1003.1-200x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_ieee_1003.1-200x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmessages_members_ieee_1003.1-200x.h?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,70 @@\n+// std::messages implementation details, IEEE 1003.1-200x version -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.7.1.2  messages virtual functions\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+  // Non-virtual member functions.\n+  template<typename _CharT>\n+    messages<_CharT>::catalog \n+    messages<_CharT>::open(const basic_string<char>& __s, const locale& __loc, \n+\t\t\t   const char*) const\n+    { return this->do_open(__s, __loc); }\n+\n+  // Virtual member functions.\n+  template<typename _CharT>\n+    messages<_CharT>::~messages()\n+    { }\n+\n+  template<typename _CharT>\n+    messages<_CharT>::catalog \n+    messages<_CharT>::do_open(const basic_string<char>& __s, \n+\t\t\t      const locale&) const\n+    { return reinterpret_cast<catalog>(catopen(__s.c_str(), NL_CAT_LOCALE)); }\n+\n+  template<typename _CharT>\n+    messages<_CharT>::string_type  \n+    messages<_CharT>::do_get(catalog __c, int __setid, int __msgid, \n+\t\t\t     const string_type& __dfault) const\n+    {\n+      nl_catd __nlc = reinterpret_cast<nl_catd>(__c);\n+      char* __msg = catgets(__nlc, __setid, __msgid, \n+\t\t\t    _M_convert_to_char(__dfault));\n+      return _M_convert_from_char(__msg);\n+    }\n+\n+  template<typename _CharT>\n+    void    \n+    messages<_CharT>::do_close(catalog __c) const \n+    { catclose(reinterpret_cast<nl_catd>(__c)); }\n+\n+"}, {"sha": "ca21239046c22d3533b10fa83fa688fb46ce8e83", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 3379, "deletions": 1363, "changes": 4742, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb"}, {"sha": "f04a42a85d5bcc055f8be9ba0b1aa38625c328b8", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 19, "deletions": 42, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -4,30 +4,13 @@\n AC_PREREQ(2.13)\n AC_INIT(src/ios.cc)\n \n-# When building with srcdir == objdir, links to the source files will\n-# be created in directories within the target_subdir.  We have to\n-# adjust toplevel_srcdir accordingly, so that configure finds\n-# install-sh and other auxiliary files that live in the top-level\n-# source directory.\n-if test \"${srcdir}\" = \".\"; then\n-  if test -z \"${with_target_subdir}\"; then\n-    toprel=\"..\"\n-  else\n-    if test \"${with_target_subdir}\" != \".\"; then\n-      toprel=\"${with_multisrctop}../..\"\n-    else\n-      toprel=\"${with_multisrctop}..\"\n-    fi\n-  fi\n-else\n-  toprel=\"..\"\n-fi\n-AC_CONFIG_AUX_DIR(${srcdir}/$toprel)\n-toplevel_srcdir=\\${top_srcdir}/$toprel\n-AC_SUBST(toplevel_srcdir)\n-\n-dnl This is here just to satisfy automake.\n-ifelse(not,equal,[AC_CONFIG_AUX_DIR(..)])\n+PACKAGE=libstdc++\n+MAJOR_VERSION=3\n+MINOR_VERSION=1\n+MICRO_VERSION=0\n+VERSION=$MAJOR_VERSION.$MINOR_VERSION.$MICRO_VERSION\n+AC_SUBST(PACKAGE)\n+AC_SUBST(VERSION)\n \n # Gets and sets build, host, target, *_vendor, *_cpu, *_os, etc.\n # AC 2.50 sets target_alias iff the user specified --target, but we use it\n@@ -36,34 +19,26 @@ AC_CANONICAL_SYSTEM\n target_alias=${target_alias-$target}\n AC_SUBST(target_alias)\n \n-# Will set LN_S to either 'ln -s' or 'ln'.  With autoconf 2.50+, can also\n-# be 'cp -p' if linking isn't available.\n-#ac_cv_prog_LN_S='cp -p'\n-AC_PROG_LN_S\n+AM_INIT_AUTOMAKE($PACKAGE, $VERSION)\n+AM_CONFIG_HEADER(config.h)\n \n-# We use these options to decide which functions to include.\n-AC_ARG_WITH(target-subdir,\n-[  --with-target-subdir=SUBDIR\n-                           configuring in a subdirectory])\n-AC_ARG_WITH(cross-host,\n-[  --with-cross-host=HOST  configuring with a cross compiler])\n-\n-# Runs configure.host and configure.target. Have to run this before\n-# the GLIBCPP_ENABLE_* macros below.\n+# Runs configure.host and configure.target, as well as finds CC, CXX\n+# and assorted other critical bits. Have to run this before the\n+# GLIBCPP_ENABLE_* macros below.\n GLIBCPP_CONFIGURE(.)\n \n AC_LIBTOOL_DLOPEN\n AM_PROG_LIBTOOL\n AC_SUBST(enable_shared)\n AC_SUBST(enable_static)\n-GLIBCPP_CHECK_GNU_MAKE\n \n AM_CONFIG_HEADER(config.h testsuite/testsuite_hooks.h)\n \n # Check for c++ or library specific bits that don't require linking.\n-GLIBCPP_CHECK_COMPILER_VERSION\n+#GLIBCPP_CHECK_COMPILER_VERSION\n+GLIBCPP_CHECK_GNU_MAKE\n \n-# Enable all the crazy c++ stuff.  C_MBCHAR must come early.\n+# Enable all the variable C++ stuff.  C_MBCHAR must come early.\n GLIBCPP_ENABLE_DEBUG($USE_MAINTAINER_MODE)\n GLIBCPP_ENABLE_CSTDIO\n GLIBCPP_ENABLE_CLOCALE\n@@ -75,13 +50,14 @@ GLIBCPP_ENABLE_THREADS\n GLIBCPP_ENABLE_CXX_FLAGS([none])\n GLIBCPP_ENABLE_SJLJ_EXCEPTIONS\n \n+\n if test -n \"$with_cross_host\" || test x\"$build\" != x\"$host\"; then\n \n   # We are being configured with some form of cross compiler.\n   # mknumeric_limits may not work correctly, either because the\n   # compiler may not run on this machine, may not be able to link\n   # executables, or may produce executables we can't run on this\n-  # machine.\n+  # machine. Thus, just use the pre-generated include/bits/limits_generic.h\n   GLIBCPP_IS_CROSS_COMPILING=1\n \n   # If Canadian cross, then don't pick up tools from the build\n@@ -220,6 +196,7 @@ else\n [AC_DEFINE(HAVE_SIGSETJMP, 1, [Define if sigsetjmp is available.  ])])\n \n   AC_FUNC_MMAP\n+\n fi\n \n # Enable/configure some pieces which may require knowledge about the\n@@ -272,7 +249,7 @@ AC_SUBST(LIBSUPCXX_PICFLAGS)\n AC_OUTPUT(Makefile \\\n     include/Makefile src/Makefile \\\n     libmath/Makefile libio/Makefile libsupc++/Makefile \\\n-    testsuite/Makefile mkcheck testsuite_flags,\n+    po/Makefile intl/Makefile testsuite/Makefile mkcheck testsuite_flags,\n [if test -n \"$CONFIG_FILES\"; then\n   ac_file=Makefile . ${glibcpp_basedir}/../config-ml.in\n   grep '^MULTISUBDIR =' Makefile >> src/Makefile"}, {"sha": "55d2842571f344dc4466da3cfa87c295e4f1f5b5", "filename": "libstdc++-v3/docs/html/22_locale/howto.html", "status": "modified", "additions": 53, "deletions": 69, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fhowto.html?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 22</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.2 2001/02/07 00:03:20 pme Exp $ -->\n+<!-- $Id: howto.html,v 1.3 2001/04/03 00:26:55 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -22,19 +22,60 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Chapter 22:  Localization</A></H1>\n <HR>\n <H1>Contents</H1>\n <UL>\n-   <LI><A HREF=\"#1\">Bjarne Stroustrup on Locales</A>\n-   <LI><A HREF=\"#2\">Nathan Myers on Locales</A>   \n-   <LI><A HREF=\"#3\">class locale</A>\n-   <LI><A HREF=\"#4\">class codecvt</A>\n-   <LI><A HREF=\"#5\">class ctype</A>\n-   <LI><A HREF=\"#6\">Correct Transformations</A>\n+   <LI><A HREF=\"#1\">class locale</A>\n+   <LI><A HREF=\"#2\">class codecvt</A>\n+   <LI><A HREF=\"#3\">class ctype</A>\n+   <LI><A HREF=\"#4\">class messages</A>\n+   <LI><A HREF=\"#5\">Bjarne Stroustrup on Locales</A>\n+   <LI><A HREF=\"#6\">Nathan Myers on Locales</A>   \n+   <LI><A HREF=\"#7\">Correct Transformations</A>\n </UL>\n \n+<!-- ####################################################### -->\n+\n <HR>\n+<H2><A NAME=\"1\">class locale</A></H2>\n+   <P> Notes made during the implementation of locales can be found \n+       <A HREF=\"locale.html\">here</A>.\n+   </P>\n \n-<!-- ####################################################### -->\n+<HR>\n+<H2><A NAME=\"2\">class codecvt</A></H2>\n+   <P> Notes made during the implementation of codecvt can be found \n+       <A HREF=\"codecvt.html\">here</A>.\n+   </P>\n+\n+   <P> The following is the abstract from the implementation notes:\n+   <BLOCKQUOTE>\n+   The standard class codecvt attempts to address conversions between\n+   different character encoding schemes. In particular, the standard\n+   attempts to detail conversions between the implementation-defined\n+   wide characters (hereafter referred to as wchar_t) and the standard\n+   type char that is so beloved in classic &quot;C&quot; (which can\n+   now be referred to as narrow characters.)  This document attempts\n+   to describe how the GNU libstdc++-v3 implementation deals with the\n+   conversion between wide and narrow characters, and also presents a\n+   framework for dealing with the huge number of other encodings that\n+   iconv can convert, including Unicode and UTF8. Design issues and\n+   requirements are addressed, and examples of correct usage for both\n+   the required specializations for wide and narrow characters and the\n+   implementation-provided extended functionality are given.\n+   </BLOCKQUOTE>\n \n-<H2><A NAME=\"1\">Stroustrup on Locales</A></H2>\n+<HR>\n+<H2><A NAME=\"3\">class ctype</A></H2>\n+   <P> Notes made during the implementation of ctype can be found \n+       <A HREF=\"ctype.html\">here</A>.\n+   </P>\n+\n+<HR>\n+<H2><A NAME=\"4\">class messages</A></H2>\n+   <P> Notes made during the implementation of messages can be found \n+       <A HREF=\"messages.html\">here</A>.\n+   </P>\n+\n+<HR>\n+<H2><A NAME=\"5\">Stroustrup on Locales</A></H2>\n    <P>Dr. Bjarne Stroustrup has released a\n       <A HREF=\"http://www.research.att.com/~bs/3rd_loc0.html\">pointer</A>\n       to Appendix D of his book,\n@@ -50,68 +91,16 @@ <H2><A NAME=\"1\">Stroustrup on Locales</A></H2>\n       avoid it.\n       </EM></BLOCKQUOTE>\n    </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n \n <HR>\n-<H2><A NAME=\"2\">Nathan Myers on Locales</A></H2>\n+<H2><A NAME=\"6\">Nathan Myers on Locales</A></H2>\n    <P> An article entitled &quot;The Standard C++ Locale&quot; was\n        published in Dr. Dobb's Journal and can be found\n       <A HREF=\"http://www.cantrip.org/locale.html\">here</A>.\n    </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n \n <HR>\n-<H2><A NAME=\"5\">class locale</A></H2>\n-   <P> Notes made during the implementation of locales can be found \n-       <A HREF=\"locale.html\">here</A>.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n-\n-<HR>\n-<H2><A NAME=\"4\">class codecvt</A></H2>\n-   <P> Notes made during the implementation of codecvt can be found \n-       <A HREF=\"codecvt.html\">here</A>.\n-   </P>\n-\n-   <P> The following is the abstract from the implementation notes:\n-<BLOCKQUOTE>\n-\tThe standard class codecvt attempts to address conversions\n-between different character encoding schemes. In particular, the\n-standard attempts to detail conversions between the\n-implementation-defined wide characters (hereafter referred to as\n-wchar_t) and the standard type char that is so beloved in classic\n-&quot;C&quot; (which can now be referred to as narrow characters.)\n-This document attempts to describe how the GNU libstdc++-v3\n-implementation deals with the conversion between wide and narrow\n-characters, and also presents a framework for dealing with the huge\n-number of other encodings that iconv can convert, including Unicode\n-and UTF8. Design issues and requirements are addressed, and examples\n-of correct usage for both the required specializations for wide and\n-narrow characters and the implementation-provided extended\n-functionality are given.\n-</BLOCKQUOTE>\n-\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n-\n-<HR>\n-<H2><A NAME=\"5\">class ctype</A></H2>\n-   <P> Notes made during the implementation of ctype can be found \n-       <A HREF=\"ctype.html\">here</A>.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n-\n-<HR>\n-<H2><A NAME=\"6\">Correct Transformations</A></H2>\n+<H2><A NAME=\"7\">Correct Transformations</A></H2>\n    <!-- Jumping directly here from chapter 21. -->\n    <P>A very common question on newsgroups and mailing lists is, &quot;How\n       do I do &lt;foo&gt; to a character string?&quot; where &lt;foo&gt; is\n@@ -213,11 +202,6 @@ <H2><A NAME=\"6\">Correct Transformations</A></H2>\n       shown it here because no compilers currently available to me will\n       handle it.\n    </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n-\n-\n \n \n <!-- ####################################################### -->\n@@ -226,7 +210,7 @@ <H2><A NAME=\"6\">Correct Transformations</A></H2>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n <A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: howto.html,v 1.2 2001/02/07 00:03:20 pme Exp $\n+<BR> $Id: howto.html,v 1.3 2001/04/03 00:26:55 pme Exp $\n </EM></P>\n \n "}, {"sha": "2c7b28828ed114cfb3ad4f122c95bc2d03664184", "filename": "libstdc++-v3/docs/html/22_locale/locale.html", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Flocale.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Flocale.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Flocale.html?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -5,7 +5,7 @@ <H1>\n   </H1>\n </HEAD>\n <I>\n-prepared by Benjamin Kosnik (bkoz@redhat.com) on January 24, 2001\n+prepared by Benjamin Kosnik (bkoz@redhat.com) on August 8, 2001\n </I>\n \n <P>\n@@ -95,6 +95,16 @@ <H2>\n \t<LI> locale initialization: at what point does _S_classic,\n \t_S_global get initialized? Can named locales assume this\n \tinitialization has already taken place?\n+\n+\t<LI> document how named locales error check when filling data\n+\tmembers. Ie, a fr_FR locale that doesn't have\n+\tnumpunct::truename(): does it use \"true\"? Or is it a blank\n+\tstring? What's the convention?\n+\n+\t<li> explain how locale aliasing happens. When does \"de_DE\"\n+\tuse \"de\" information? What is the rule for locales composed of\n+\tjust an ISO language code (say, \"de\") and locales with both an\n+\tISO language code and ISO country code (say, \"de_DE\").\n </UL>\n \n "}, {"sha": "165035842de781453bfd1320ed4dda06ee81095c", "filename": "libstdc++-v3/docs/html/22_locale/messages.html", "status": "added", "additions": 404, "deletions": 0, "changes": 404, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fmessages.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fmessages.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fmessages.html?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,404 @@\n+<HTML>\n+<HEAD>\n+  <H1>\n+  Notes on the messages implementation.\n+  </H1>\n+</HEAD>\n+<I>\n+prepared by Benjamin Kosnik (bkoz@redhat.com) on August 8, 2001\n+</I>\n+\n+<P>\n+<H2>\n+1. Abstract\n+</H2>\n+<P>\n+The std::messages facet implements message retrieval functionality\n+equivalent to Java's java.text.MessageFormat .using either GNU gettext\n+or IEEE 1003.1-200 functions.\n+</P>\n+\n+<P>\n+<H2>\n+2. What the standard says\n+</H2>\n+The std::messages facet is probably the most vaguely defined facet in\n+the standard library. It's assumed that this facility was built into\n+the standard library in order to convert string literals from one\n+locale to the other. For instance, converting the \"C\" locale's\n+<TT>const char* c = \"please\"</TT> to a German-localized <TT>\"bitte\"</TT>\n+during program execution.\n+\n+<BLOCKQUOTE>\n+22.2.7.1 - Template class messages [lib.locale.messages]\n+</BLOCKQUOTE>\n+\n+This class has three public member functions, which directly\n+correspond to three protected virtual member functions. \n+\n+The public member functions are:\n+\n+<P>\n+<TT>catalog open(const basic_string<char>&, const locale&) const</TT>\n+\n+<P>\n+<TT>string_type get(catalog, int, int, const string_type&) const</TT>\n+\n+<P>\n+<TT>void close(catalog) const</TT>\n+\n+<P>\n+While the virtual functions are:\n+\n+<P>\n+<TT>catalog do_open(const basic_string<char>&, const locale&) const</TT>\n+<BLOCKQUOTE>\n+<I>\n+-1- Returns: A value that may be passed to get() to retrieve a\n+message, from the message catalog identified by the string name\n+according to an implementation-defined mapping. The result can be used\n+until it is passed to close().  Returns a value less than 0 if no such\n+catalog can be opened.\n+</I>\n+</BLOCKQUOTE>\n+\n+<P>\n+<TT>string_type do_get(catalog, int, int, const string_type&) const</TT>\n+<BLOCKQUOTE>\n+<I>\n+-3- Requires: A catalog cat obtained from open() and not yet closed. \n+-4- Returns: A message identified by arguments set, msgid, and dfault,\n+according to an implementation-defined mapping. If no such message can\n+be found, returns dfault.\n+</I>\n+</BLOCKQUOTE>\n+\n+<P>\n+<TT>void do_close(catalog) const</TT>\n+<BLOCKQUOTE>\n+<I>\n+-5- Requires: A catalog cat obtained from open() and not yet closed. \n+-6- Effects: Releases unspecified resources associated with cat. \n+-7- Notes: The limit on such resources, if any, is implementation-defined. \n+</I>\n+</BLOCKQUOTE>\n+\n+\n+<P>\n+<H2>\n+3. Problems with &quot;C&quot; messages: thread safety,\n+over-specification, and assumptions.\n+</H2>\n+A couple of notes on the standard. \n+\n+<p>\n+First, why is <TT>messages_base::catalog</TT> specified as a typedef\n+to int? This makes sense for implementations that use\n+<TT>catopen</TT>, but not for others. Fortunately, it's not heavily\n+used and so only a minor irritant. \n+\n+<p>\n+Second, by making the member functions <TT>const</TT>, it is\n+impossible to save state in them. Thus, storing away information used\n+in the 'open' member function for use in 'get' is impossible. This is\n+unfortunate.\n+\n+<p>\n+The 'open' member function in particular seems to be oddly\n+designed. The signature seems quite peculiar. Why specify a <TT>const\n+string& </TT> argument, for instance, instead of just <TT>const\n+char*</TT>? Or, why specify a <TT>const locale&</TT> argument that is\n+to be used in the 'get' member function? How, exactly, is this locale\n+argument useful? What was the intent? It might make sense if a locale\n+argument was associated with a given default message string in the\n+'open' member function, for instance. Quite murky and unclear, on\n+reflection.\n+\n+<p>\n+Lastly, it seems odd that messages, which explicitly require code\n+conversion, don't use the codecvt facet. Because the messages facet\n+has only one template parameter, it is assumed that ctype, and not\n+codecvt, is to be used to convert between character sets. \n+\n+<p>\n+It is implicitly assumed that the locale for the default message\n+string in 'get' is in the \"C\" locale. Thus, all source code is assumed\n+to be written in English, so translations are always from \"en_US\" to\n+other, explicitly named locales.\n+\n+<P>\n+<H2>\n+4. Design and Implementation Details\n+</H2>\n+This is a relatively simple class, on the face of it. The standard\n+specifies very little in concrete terms, so generic implementations\n+that are conforming yet do very little are the norm. Adding\n+functionality that would be useful to programmers and comparable to\n+Java's java.text.MessageFormat takes a bit of work, and is highly\n+dependent on the capabilities of the underlying operating system.\n+\n+<P>\n+Three different mechanisms have been provided, selectable via\n+configure flags:\n+\n+<UL>\n+\t<LI> generic\n+\t<P>\n+\tThis model does very little, and is what is used by default.\t\n+\t</P>\n+\n+\t<LI> gnu\n+\t<P>\n+\tThe gnu model is complete and fully tested. It's based on the\n+\tGNU gettext package, which is part of glibc. It uses the functions\n+\t<TT>textdomain, bindtextdomain, gettext</TT>\n+\tto implement full functionality. Creating message\n+\tcatalogs is a relatively straight-forward process and is\n+\tlightly documented below, and fully documented in gettext's\n+\tdistributed documentation.\n+\t</P>\n+\n+\t<LI> ieee_1003.1-200x\n+\t<P>\n+\tThis is a complete, though untested, implementation based on\n+\tthe IEEE standard. The functions\n+\t<TT>catopen, catgets, catclose</TT>\n+\tare used to retrieve locale-specific messages given the\n+\tappropriate message catalogs that have been constructed for\n+\ttheir use. Note, the script <TT> po2msg.sed</TT> that is part\n+\tof the gettext distribution can convert gettext catalogs into\n+\tcatalogs that <TT>catopen</TT> can use.\n+\t</P>\n+</UL>\n+\n+<P>\n+A new, standards-conformant non-virtual member function signature was\n+added for 'open' so that a directory could be specified with a given\n+message catalog. This simplifies calling conventions for the gnu\n+model.\n+\n+<P>\n+The rest of this document discusses details of the GNU model.\n+\n+<P>\n+The messages facet, because it is retrieving and converting between\n+characters sets, depends on the ctype and perhaps the codecvt facet in\n+a given locale. In addition, underlying \"C\" library locale support is\n+necessary for more than just the <TT>LC_MESSAGES</TT> mask:\n+<TT>LC_CTYPE</TT> is also necessary. To avoid any unpleasantness, all\n+bits of the \"C\" mask (ie <TT>LC_ALL</TT>) are set before retrieving\n+messages.\n+\n+<p>\n+Making the message catalogs can be initially tricky, but become quite\n+simple with practice. For complete info, see the gettext\n+documentation. Here's an idea of what is required:\n+\n+<UL>\n+\t<LI > Make a source file with the required string literals\n+\tthat need to be translated. See\n+\t<TT>intl/string_literals.cc</TT> for an example.\n+\n+\t<p>\n+\t<LI> Make initial catalog (see \"4 Making the PO Template File\"\n+\tfrom the gettext docs).\n+\t<p>\n+\t<TT> xgettext --c++ --debug string_literals.cc -o libstdc++.pot </TT>\n+\t\n+\t<p> \n+\t<LI> Make language and country-specific locale catalogs.\n+\t<p>\n+\t<TT>cp libstdc++.pot fr_FR.po</TT>\n+\t<p>\n+\t<TT>cp libstdc++.pot de_DE.po</TT>\n+\n+\t<p> \n+\t<LI> Edit localized catalogs in emacs so that strings are\n+\ttranslated.\n+\t<p>\n+\t<TT>emacs fr_FR.po</TT>\n+\t\n+\t<P>\n+\t<LI> Make the binary mo files.\n+\t<p>\n+\t<TT>msgfmt fr_FR.po -o fr_FR.mo</TT>\n+\t<p>\n+\t<TT>msgfmt de_DE.po -o de_DE.mo</TT>\n+\n+\t<P>\n+\t<LI> Copy the binary files into the correct directory structure.\n+\t<p>\n+\t<TT>cp fr_FR.mo (dir)/fr_FR/LC_MESSAGES/libstdc++-v3.mo</TT>\n+\t<p>\n+\t<TT>cp de_DE.mo (dir)/de_DE/LC_MESSAGES/libstdc++-v3.mo</TT>\n+\n+\t<P>\n+\t<LI> Use the new message catalogs.\n+\t<p>\n+\t<TT>locale loc_de(\"de_DE\");</TT>\n+\t<p>\n+\t<TT>\n+\tuse_facet<messages<char> >(loc_de).open(\"libstdc++\", locale(), dir);\n+\t</TT>\n+</UL>\n+\n+<P>\n+<H2>\n+5.  Examples\n+</H2>\n+\n+<UL>\n+\t<LI> message converting, simple example using the GNU model.\n+\n+<pre>\n+#include <locale>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef std::messages<char>::catalog catalog;\n+\n+  // Set to the root directory of the libstdc++.mo catalogs.\n+  const char* dir = LOCALEDIR;\n+  locale loc_de(\"de_DE\");\n+\n+  // Cache the messages facet.\n+  const messages<char>& mssg_de = use_facet<messages<char> >(loc_de); \n+\n+  // Check German (de_DE) locale.\n+  catalog cat_de = mssg_de.open(\"libstdc++\", loc_c, dir);\n+  string s01 = mssg_de.get(cat_de, 0, 0, \"please\");\n+  string s02 = mssg_de.get(cat_de, 0, 0, \"thank you\");\n+  // s01 == \"bitte\" \n+  // s02 == \"danke\" \n+  mssg_de.close(cat_de);\n+}\n+</pre>\n+</UL>\n+\n+More information can be found in the following testcases:\n+<UL>\n+<LI> testsuite/22_locale/messages.cc  \n+<LI> testsuite/22_locale/messages_byname.cc\n+<LI> testsuite/22_locale/messages_char_members.cc\n+</UL>\n+\n+<P>\n+<H2>\n+6.  Unresolved Issues\n+</H2>\n+<UL>\n+<LI>\tThings that are sketchy, or remain unimplemented:\n+\t<UL>\n+\t\t<LI>_M_convert_from_char, _M_convert_to_char are in\n+\t\tflux, depending on how the library ends up doing\n+\t\tcharacter set conversions. It might not be possible to\n+\t\tdo a real character set based conversion, due to the\n+\t\tfact that the template parameter for messages is not\n+\t\tenough to instantiate the codecvt facet (1 supplied,\n+\t\tneed at least 2 but would prefer 3).\n+\n+\t\t<LI> There are issues with gettext needing the global\n+\t\tlocale set to extract a message. This dependence on\n+\t\tthe global locale makes the current \"gnu\" model non\n+\t\tMT-safe. Future versions of glibc, ie glibc 2.3.x will\n+\t\tfix this, and the C++ library bits are already in\n+\t\tplace.\n+\t</UL>\n+\t\t\n+<p>\n+<LI>\tDevelopment versions of the GNU \"C\" library, glibc 2.3 will allow\n+\ta more efficient, MT implementation of std::messages, and will\n+\tallow the removal of the _M_name_messages data member. If this\n+\tis done, it will change the library ABI. The C++ parts to\n+\tsupport glibc 2.3 have already been coded, but are not in use:\n+\tonce this version of the \"C\" library is released, the marked\n+\tparts of the messages implementation can be switched over to\n+\tthe new \"C\" library functionality. \n+<p>\t\t\n+<LI>    At some point in the near future, std::numpunct will probably use\n+\tstd::messages facilities to implement truename/falename\n+\tcorrectly. This is currently not done, but entries in\n+\tlibstdc++.pot have already been made for \"true\" and \"false\"\n+\tstring literals, so all that remains is the std::numpunct\n+\tcoding and the configure/make hassles to make the installed\n+\tlibrary search its own catalog. Currently the libstdc++.mo\n+\tcatalog is only searched for the testsuite cases involving\n+\tmessages members.\n+\n+<p>\n+<LI>\tThe following member functions:\n+\n+\t<p>\n+\t<TT>\n+        catalog \n+        open(const basic_string<char>& __s, const locale& __loc) const\n+\t</TT>\n+\n+\t<p>\n+\t<TT>\n+\tcatalog \n+\topen(const basic_string<char>&, const locale&, const char*) const;\n+\t</TT>\n+\n+\t<p>\n+\tDon't actually return a \"value less than 0 if no such catalog\n+\tcan be opened\" as required by the standard in the \"gnu\"\n+\tmodel. As of this writing, it is unknown how to query to see\n+\tif a specified message catalog exists using the gettext\n+\tpackage.\n+</UL>\n+\n+<P>\n+<H2>\n+7. Acknowledgments\n+</H2>\n+Ulrich Drepper for the character set explanations, gettext details,\n+and patient answering of late-night questions, Tom Tromey for the java details.\n+\n+\n+<P>\n+<H2>\n+8. Bibliography / Referenced Documents\n+</H2>\n+\n+Drepper, Ulrich, GNU libc (glibc) 2.2 manual. In particular, Chapters\n+&quot;7 Locales and Internationalization&quot;\n+\n+<P>\n+Drepper, Ulrich, Thread-Aware Locale Model, A proposal. This is a\n+draft document describing the design of glibc 2.3 MT locale\n+functionality.\n+\n+<P>\n+Drepper, Ulrich, Numerous, late-night email correspondence\n+\n+<P>\n+ISO/IEC 9899:1999 Programming languages - C\n+\n+<P>\n+ISO/IEC 14882:1998 Programming languages - C++\n+\n+<P>\n+Java 2 Platform, Standard Edition, v 1.3.1 API Specification. In\n+particular, java.util.Properties, java.text.MessageFormat,\n+java.util.Locale, java.util.ResourceBundle.\n+http://java.sun.com/j2se/1.3/docs/api\n+\n+<P>\n+System Interface Definitions, Issue 7 (IEEE Std. 1003.1-200x)\n+The Open Group/The Institute of Electrical and Electronics Engineers, Inc.\n+In particular see lines 5268-5427.\n+http://www.opennc.org/austin/docreg.html\n+\n+<P> GNU gettext tools, version 0.10.38, Native Language Support\n+Library and Tools. \n+http://sources.redhat.com/gettext\n+\n+<P>\n+Langer, Angelika and Klaus Kreft, Standard C++ IOStreams and Locales,\n+Advanced Programmer's Guide and Reference, Addison Wesley Longman,\n+Inc. 2000. See page 725, Internationalized Messages.\n+\n+<P>\n+Stroustrup, Bjarne, Appendix D, The C++ Programming Language, Special Edition, Addison Wesley, Inc. 2000"}, {"sha": "dd0bcd3a4301a1c6888f593fddd51cec3aa0e164", "filename": "libstdc++-v3/docs/html/configopts.html", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -7,7 +7,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 configure options</TITLE>\n <LINK REL=StyleSheet HREF=\"lib3styles.css\">\n-<!-- $Id: configopts.html,v 1.11 2001/07/09 19:37:01 pme Exp $ -->\n+<!-- $Id: configopts.html,v 1.12 2001/07/09 21:47:35 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -46,13 +46,15 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n      </P>\n \n  <DT><TT>--enable-debug  </TT>\n- <DD><P>The configure script will automatically detect the highest level\n-        of optimization that the compiler in use can use (certain\n-        versions of g++ will ICE if given the <TT>-O2</TT> option, but\n-        this is fixed in later versions of the compiler).  This --enable\n-        flag will disable all optimizations and instruct the compiler to\n-        emit as much extra debugging information as it can, for use\n-        inside GDB.\n+ <DD><P>The configure script will automatically detect the highest\n+        level of optimization that the compiler in use can use\n+        (certain versions of g++ will ICE if given the <TT>-O2</TT>\n+        option, but this is fixed in later versions of the compiler).\n+        This --enable flag will disable all optimizations and instruct\n+        the compiler to emit as much extra debugging information as it\n+        can, for use inside GDB. Note this make command, executed in\n+        the build directory, will do much the same thing, without the\n+        configuration difference:<TT>make CXXFLAGS='-g -O0' all</TT>\n      </P>\n \n  <DT><TT>--enable-cstdio  </TT>\n@@ -83,25 +85,29 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n      </P>\n \n  <DT><TT>--enable-clocale=MODEL  </TT>\n- <DD><P>Select a target-specific underlying locale package.  The choices\n-        are 'gnu' to specify an X/Open (IEEE Std. 1003.1-200x) model based\n-        on langinfo/iconv (from\n-        <A HREF=\"http://sources.redhat.com/glibc/\">glibc</A>, the GNU C\n-        library), or 'generic' to use a generic &quot;C&quot; abstraction\n-        which consists of &quot;C&quot; locale info.  The default is 'generic'.\n+ <DD><P>Select a target-specific underlying locale package.  The\n+        choices are 'ieee_1003.1' to specify an X/Open, Standard Unix\n+        (IEEE Std. 1003.1-200x) model based on langinfo/iconv/catgets,\n+        'gnu' to specify a model based on functionality from the GNU C\n+        library (langinfo/iconv/gettext) (from <A\n+        HREF=\"http://sources.redhat.com/glibc/\">glibc</A>, the GNU C\n+        library), or 'generic' to use a generic &quot;C&quot;\n+        abstraction which consists of &quot;C&quot; locale info.  The\n+        default is 'generic'.\n      </P>\n \n  <DT><TT>--enable-c99  </TT>\n  <DD><P>The &quot;long long&quot; type was introduced in C99, along\n-        with bunches of other functions for wide characters, and math\n+        with many other functions for wide characters, and math\n         classification macros, etc.  If enabled, all C99 functions not\n         specified by the C++ standard will be put into <TT>namespace\n-        c99</TT>, and then all names in the c99 namespace will be injected\n-        into namespace std, so that C99 functions can be used &quot;as\n-        if&quot; they were in the C++ standard (as they will eventually\n-        be in some future revision of the standard, without a doubt).\n-        By default, C99 support is on, assuming the configure probes find\n-        all the necessary functions and bits necessary.\n+        __gnu_cxx</TT>, and then all these names will\n+        be injected into namespace std, so that C99 functions can be\n+        used &quot;as if&quot; they were in the C++ standard (as they\n+        will eventually be in some future revision of the standard,\n+        without a doubt).  By default, C99 support is on, assuming the\n+        configure probes find all the necessary functions and bits\n+        necessary.\n     </P>\n \n  <DT><TT>--enable-long-long  </TT>\n@@ -197,8 +203,7 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n         changing rapidly, and can cause problems on new platforms.\n         Disabling wide character specializations is useful for initial\n         porting steps, but builds only a subset of what is required by\n-        ISO.  Default is on, but the <TT>--enable-cstdio=stdio </TT>\n-        option currently turns it off.\n+        ISO.  By default, this option is on.\n      </P>\n </DL>\n </P>\n@@ -211,7 +216,7 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n \n <HR>\n <P CLASS=\"fineprint\"><EM>\n-$Id: configopts.html,v 1.11 2001/07/09 19:37:01 pme Exp $\n+$Id: configopts.html,v 1.12 2001/07/09 21:47:35 pme Exp $\n </EM></P>\n \n "}, {"sha": "7e2d0ae36c2320e6eda317a9b88dc173ed298d4c", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id$\n+## $Id: Makefile.am,v 1.1 2001/07/13 16:47:55 pme Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -294,9 +294,10 @@ thread_headers = \\\n \n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n-# XXX stamp-c_compatibility \n+# XXX stamp-c_compatibility not implemented yet.\n allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \\\n-\tstamp-target stamp-thread stamp-file_model stamp-io stamp-locale\n+\tstamp-target stamp-thread stamp-file_model stamp-io \\\n+\tstamp-locale stamp-messages_model stamp-codecvt_model\n \n # By adding these files here, automake will remove them for 'make clean'\n CLEANFILES = ${allstamps}\n@@ -370,6 +371,14 @@ stamp-locale: ${glibcpp_srcdir}/@CLOCALE_H@ ${target_builddir}\n \t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h) ;\\\n \techo `date` > stamp-locale\n \n+stamp-messages_model: ${glibcpp_srcdir}/@CMESSAGES_H@ ${target_builddir}\n+\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h) ;\\\n+\techo `date` > stamp-messages_model\n+\n+stamp-codecvt_model: ${glibcpp_srcdir}/@CCODECVT_H@ ${target_builddir}\n+\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h) ;\\\n+\techo `date` > stamp-codecvt_model\n+\n # This target is kinda special.  The timestamp on a directory gets modified\n # whenever a file it contains gets modified, and that'll throw off all the\n # build dependencies that need this target.  On the other hand, someone\n@@ -426,7 +435,7 @@ ${thread_builddir}/gthr-default.h:\n gxx_include_dir = @gxx_include_dir@\n \n install-data-local:\n-\tfor file in `find . ! -name stamp-\\* -print`; do \\\n+\tfor file in `find . ! -name stamp-\\* ! -name Makefile -print`; do \\\n \tinstallFile=${gxx_include_dir}/$${file} ;\\\n \tif [ -d $${file} ]; then \\\n \t  $(INSTALL) -d $${installFile} ;\\"}, {"sha": "8673e76ee4aed2460441e85e1f94c2a63debf414", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -67,55 +67,78 @@ AR = @AR@\n AS = @AS@\n ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n BASIC_FILE_H = @BASIC_FILE_H@\n+CATALOGS = @CATALOGS@\n+CATOBJEXT = @CATOBJEXT@\n CC = @CC@\n CCODECVT_C = @CCODECVT_C@\n+CCODECVT_H = @CCODECVT_H@\n CLOCALE_H = @CLOCALE_H@\n+CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+DATADIRNAME = @DATADIRNAME@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n+GENCAT = @GENCAT@\n GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n+GMOFILES = @GMOFILES@\n+GMSGFMT = @GMSGFMT@\n+GT_NO = @GT_NO@\n+GT_YES = @GT_YES@\n+INCLUDE_LOCALE_H = @INCLUDE_LOCALE_H@\n+INSTOBJEXT = @INSTOBJEXT@\n+INTLDEPS = @INTLDEPS@\n+INTLLIBS = @INTLLIBS@\n+INTLOBJS = @INTLOBJS@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n LIBMATHOBJS = @LIBMATHOBJS@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n-LIBSTRINGOBJS = @LIBSTRINGOBJS@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n+MKINSTALLDIRS = @MKINSTALLDIRS@\n+MSGFMT = @MSGFMT@\n OBJDUMP = @OBJDUMP@\n OBJEXT = @OBJEXT@\n OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n OPT_LDFLAGS = @OPT_LDFLAGS@\n OS_INC_SRCDIR = @OS_INC_SRCDIR@\n PACKAGE = @PACKAGE@\n+POFILES = @POFILES@\n+POSUB = @POSUB@\n RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n+USE_INCLUDED_LIBINTL = @USE_INCLUDED_LIBINTL@\n+USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n glibcpp_CXX = @glibcpp_CXX@\n+glibcpp_MOFILES = @glibcpp_MOFILES@\n glibcpp_basedir = @glibcpp_basedir@\n+glibcpp_localedir = @glibcpp_localedir@\n glibcpp_prefixdir = @glibcpp_prefixdir@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n ifGNUmake = @ifGNUmake@\n+l = @l@\n libio_la = @libio_la@\n toplevel_srcdir = @toplevel_srcdir@\n \n@@ -166,8 +189,8 @@ thread_headers =  \t${thread_builddir}/gthr.h \t${thread_builddir}/gthr-single.h\n \n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n-# XXX stamp-c_compatibility \n-allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \tstamp-target stamp-thread stamp-file_model stamp-io stamp-locale\n+# XXX stamp-c_compatibility not implemented yet.\n+allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \tstamp-target stamp-thread stamp-file_model stamp-io \tstamp-locale stamp-messages_model stamp-codecvt_model\n \n \n # By adding these files here, automake will remove them for 'make clean'\n@@ -179,7 +202,7 @@ uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n # One big happy istallation:  just copy everything from the build to the\n # install tree (except for the build stamps).\n gxx_include_dir = @gxx_include_dir@\n-CONFIG_HEADER = ../config.h\n+CONFIG_HEADER = ../config.h ../config.h ../testsuite/testsuite_hooks.h\n CONFIG_CLEAN_FILES = \n DIST_COMMON =  Makefile.am Makefile.in\n \n@@ -351,6 +374,14 @@ stamp-locale: ${glibcpp_srcdir}/@CLOCALE_H@ ${target_builddir}\n \t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h) ;\\\n \techo `date` > stamp-locale\n \n+stamp-messages_model: ${glibcpp_srcdir}/@CMESSAGES_H@ ${target_builddir}\n+\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h) ;\\\n+\techo `date` > stamp-messages_model\n+\n+stamp-codecvt_model: ${glibcpp_srcdir}/@CCODECVT_H@ ${target_builddir}\n+\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h) ;\\\n+\techo `date` > stamp-codecvt_model\n+\n # This target is kinda special.  The timestamp on a directory gets modified\n # whenever a file it contains gets modified, and that'll throw off all the\n # build dependencies that need this target.  On the other hand, someone\n@@ -400,7 +431,7 @@ ${thread_builddir}/gthr-default.h:\n \t    < ${glibcpp_srcdir}/../gcc/${glibcpp_thread_h} > $@\n \n install-data-local:\n-\tfor file in `find . ! -name stamp-\\* -print`; do \\\n+\tfor file in `find . ! -name stamp-\\* ! -name Makefile -print`; do \\\n \tinstallFile=${gxx_include_dir}/$${file} ;\\\n \tif [ -d $${file} ]; then \\\n \t  $(INSTALL) -d $${installFile} ;\\"}, {"sha": "448cffacdf6119ead5147141f46688a2bfbc3744", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 8, "deletions": 417, "changes": 425, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -40,135 +40,6 @@\n \n #pragma GCC system_header\n \n-  // XXX \n-  // __enc_traits may need to move up the locale header hierarchy,\n-  // depending on if ctype ends up using it.\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  // Extensions to use icov for dealing with character encodings,\n-  // including conversions and comparisons between various character\n-  // sets.  This object encapsulates data that may need to be shared between\n-  // char_traits, codecvt and ctype.\n-\n-#if _GLIBCPP_USE_SHADOW_HEADERS\n-  using _C_legacy::CODESET;\n-#endif\n-\n-  class __enc_traits\n-  {\n-  public:\n-    // Types: \n-    // NB: A conversion descriptor subsumes and enhances the\n-    // functionality of a simple state type such as mbstate_t.\n-    typedef iconv_t\t__desc_type;\n-    \n-  protected:\n-    // Data Members:\n-    // Max size of charset encoding name\n-    static const int \t_S_max_size = 32;\n-    // Name of internal character set encoding.\n-    char\t       \t_M_int_enc[_S_max_size];\n-    // Name of external character set encoding.\n-    char  \t       \t_M_ext_enc[_S_max_size];\n-\n-    // Conversion descriptor between external encoding to internal encoding.\n-    __desc_type\t\t_M_in_desc;\n-    // Conversion descriptor between internal encoding to external encoding.\n-    __desc_type\t\t_M_out_desc;\n-\n-    // Details the byte-order marker for the external encoding, if necessary.\n-    int\t\t\t_M_ext_bom;\n-\n-    // Details the byte-order marker for the internal encoding, if necessary.\n-    int\t\t\t_M_int_bom;\n-\n-  public:\n-    __enc_traits()\n-    : _M_in_desc(0), _M_out_desc(0), _M_ext_bom(0), _M_int_bom(0)\n-    {\n-      // __intc_end = whatever we are using internally, which is\n-      // UCS4 (linux) \n-      // UCS2 == UNICODE  (microsoft, java, aix, whatever...)\n-      // XXX Currently don't know how to get this data from target system...\n-      strcpy(_M_int_enc, \"UCS4\");\n-\n-      // __extc_end = external codeset in current locale\n-      strcpy(_M_ext_enc, nl_langinfo(CODESET));\n-    }\n-\n-    __enc_traits(const char* __int, const char* __ext, int __ibom = 0, \n-\t\t int __ebom = 0)\n-    : _M_in_desc(0), _M_out_desc(0), _M_ext_bom(0), _M_int_bom(0)\n-    {\n-      strncpy(_M_int_enc, __int, _S_max_size);\n-      strncpy(_M_ext_enc, __ext, _S_max_size);\n-    }\n-\n-    // 21.1.2 traits typedefs\n-    // p4\n-    // typedef STATE_T state_type\n-    // requires: state_type shall meet the requirements of\n-    // CopyConstructible types (20.1.3)\n-    __enc_traits(const __enc_traits& __obj)\n-    {\n-      strncpy(_M_int_enc, __obj._M_int_enc, _S_max_size);\n-      strncpy(_M_ext_enc, __obj._M_ext_enc, _S_max_size);\n-      _M_ext_bom = __obj._M_ext_bom;\n-      _M_int_bom = __obj._M_int_bom;\n-    }\n-\n-    ~__enc_traits()\n-    {\n-      iconv_close(_M_in_desc);\n-      iconv_close(_M_out_desc);\n-    } \n-\n-    // Initializes\n-    void\n-    _M_init()\n-    {\n-      _M_in_desc = iconv_open(_M_int_enc, _M_ext_enc);\n-      _M_out_desc = iconv_open(_M_ext_enc, _M_int_enc);\n-      if (_M_out_desc == iconv_t(-1) || _M_in_desc == iconv_t(-1))\n-\t{\n-\t  // XXX Extended error checking.\n-\t}\n-    }\n-\n-    bool\n-    _M_good()\n-    { \n-      return _M_out_desc && _M_in_desc \n-\t     && _M_out_desc != iconv_t(-1) && _M_in_desc != iconv_t(-1);\n-    }\n-\n-    const __desc_type* \n-    _M_get_in_descriptor()\n-    { return &_M_in_desc; }\n-\n-    const __desc_type* \n-    _M_get_out_descriptor()\n-    { return &_M_out_desc; }\n-\n-   const char* \n-    _M_get_internal_enc()\n-    { return _M_int_enc; }\n-\n-    const char* \n-    _M_get_external_enc()\n-    { return _M_ext_enc; }\n-\n-    int \n-    _M_get_external_bom()\n-    { return _M_ext_bom; }\n-\n-    int \n-    _M_get_internal_bom()\n-    { return _M_int_bom; }\n-  };\n-#endif //_GLIBCPP_USE_WCHAR_T\n-\n-\n   //  22.2.1.5  Template class codecvt\n   class codecvt_base\n   {\n@@ -305,291 +176,6 @@\n   template<typename _InternT, typename _ExternT, typename _StateT>\n     locale::id codecvt<_InternT, _ExternT, _StateT>::id;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  // partial specialization\n-  // This specialization takes advantage of iconv to provide code\n-  // conversions between a large number of character encodings.\n-  template<typename _InternT, typename _ExternT>\n-    class codecvt<_InternT, _ExternT, __enc_traits>\n-    : public __codecvt_abstract_base<_InternT, _ExternT, __enc_traits>\n-    {\n-    public:      \n-      // Types:\n-      typedef codecvt_base::result\t\t\tresult;\n-      typedef _InternT \t\t\t\t\tintern_type;\n-      typedef _ExternT \t\t\t\t\textern_type;\n-      typedef __enc_traits \t\t\t\tstate_type;\n-      typedef __enc_traits::__desc_type \t\t__desc_type;\n-      typedef __enc_traits\t\t\t\t__enc_type;\n-\n-      // Data Members:\n-      static locale::id \t\tid;\n-\n-      explicit \n-      codecvt(size_t __refs = 0)\n-      : __codecvt_abstract_base<intern_type, extern_type, state_type>(__refs)\n-      { }\n-\n-      explicit \n-      codecvt(__enc_type* __enc, size_t __refs = 0)\n-      : __codecvt_abstract_base<intern_type, extern_type, state_type>(__refs)\n-      { }\n-\n-    protected:\n-      virtual \n-      ~codecvt() { }\n-\n-      virtual result\n-      do_out(state_type& __state, const intern_type* __from, \n-\t     const intern_type* __from_end, const intern_type*& __from_next,\n-\t     extern_type* __to, extern_type* __to_end,\n-\t     extern_type*& __to_next) const;\n-\n-      virtual result\n-      do_unshift(state_type& __state, extern_type* __to, \n-\t\t extern_type* __to_end, extern_type*& __to_next) const;\n-\n-      virtual result\n-      do_in(state_type& __state, const extern_type* __from, \n-\t    const extern_type* __from_end, const extern_type*& __from_next,\n-\t    intern_type* __to, intern_type* __to_end, \n-\t    intern_type*& __to_next) const;\n-\n-      virtual int \n-      do_encoding() const throw();\n-\n-      virtual bool \n-      do_always_noconv() const throw();\n-\n-      virtual int \n-      do_length(const state_type&, const extern_type* __from, \n-\t\tconst extern_type* __end, size_t __max) const;\n-\n-      virtual int \n-      do_max_length() const throw();\n-    };\n-\n-  template<typename _InternT, typename _ExternT>\n-    locale::id \n-    codecvt<_InternT, _ExternT, __enc_traits>::id;\n-\n-  // This adaptor works around the signature problems of the second\n-  // argument to iconv():  SUSv2 and others use 'const char**', but glibc 2.2\n-  // uses 'char**', which is what the standard is (apparently) due to use\n-  // in the future.  Using this adaptor, g++ will do the work for us.\n-  template<typename _T>\n-    inline size_t\n-    __iconv_adaptor(size_t(*iconv_func)(iconv_t, _T, size_t*, char**, size_t*),\n-                    iconv_t cd, char** inbuf, size_t* inbytesleft,\n-                    char** outbuf, size_t* outbytesleft)\n-    {\n-      return iconv_func(cd, (_T)inbuf, inbytesleft, outbuf, outbytesleft);\n-    }\n-\n-  template<typename _InternT, typename _ExternT>\n-    codecvt_base::result\n-    codecvt<_InternT, _ExternT, __enc_traits>::\n-    do_out(state_type& __state, const intern_type* __from, \n-\t   const intern_type* __from_end, const intern_type*& __from_next,\n-\t   extern_type* __to, extern_type* __to_end,\n-\t   extern_type*& __to_next) const\n-    {\n-      result __ret = error;\n-      if (__state._M_good())\n-\t{\n-\t  typedef state_type::__desc_type\t__desc_type;\n-\t  const __desc_type* __desc = __state._M_get_out_descriptor();\n-\t  const size_t __fmultiple = sizeof(intern_type) / sizeof(char);\n-\t  size_t __flen = __fmultiple * (__from_end - __from);\n-\t  const size_t __tmultiple = sizeof(extern_type) / sizeof(char);\n-\t  size_t __tlen = __tmultiple * (__to_end - __to); \n-\t  \n-\t  // Argument list for iconv specifies a byte sequence. Thus,\n-\t  // all to/from arrays must be brutally casted to char*.\n-\t  char* __cto = reinterpret_cast<char*>(__to);\n-\t  char* __cfrom;\n-\t  size_t __conv;\n-\n-\t  // Some encodings need a byte order marker as the first item\n-\t  // in the byte stream, to designate endian-ness. The default\n-\t  // value for the byte order marker is NULL, so if this is\n-\t  // the case, it's not necessary and we can just go on our\n-\t  // merry way.\n-\t  int __int_bom = __state._M_get_internal_bom();\n-\t  if (__int_bom)\n-\t    {\t  \n-\t      size_t __size = __from_end - __from;\n-\t      intern_type* __cfixed = static_cast<intern_type*>(__builtin_alloca(sizeof(intern_type) * (__size + 1)));\n-\t      __cfixed[0] = static_cast<intern_type>(__int_bom);\n-\t      char_traits<intern_type>::copy(__cfixed + 1, __from, __size);\n-\t      __cfrom = reinterpret_cast<char*>(__cfixed);\n-\t      __conv = __iconv_adaptor(iconv, *__desc, &__cfrom,\n-                                        &__flen, &__cto, &__tlen); \n-\t    }\n-\t  else\n-\t    {\n-\t      intern_type* __cfixed = const_cast<intern_type*>(__from);\n-\t      __cfrom = reinterpret_cast<char*>(__cfixed);\n-\t      __conv = __iconv_adaptor(iconv, *__desc, &__cfrom,\n-                                       &__flen, &__cto, &__tlen); \n-\t    }\n-\n-\t  if (__conv != size_t(-1))\n-\t    {\n-\t      __from_next = reinterpret_cast<const intern_type*>(__cfrom);\n-\t      __to_next = reinterpret_cast<extern_type*>(__cto);\n-\t      __ret = ok;\n-\t    }\n-\t  else \n-\t    {\n-\t      if (__flen < static_cast<size_t>(__from_end - __from))\n-\t\t{\n-\t\t  __from_next = reinterpret_cast<const intern_type*>(__cfrom);\n-\t\t  __to_next = reinterpret_cast<extern_type*>(__cto);\n-\t\t  __ret = partial;\n-\t\t}\n-\t      else\n-\t\t__ret = error;\n-\t    }\n-\t}\n-      return __ret; \n-    }\n-\n-  template<typename _InternT, typename _ExternT>\n-    codecvt_base::result\n-    codecvt<_InternT, _ExternT, __enc_traits>::\n-    do_unshift(state_type& __state, extern_type* __to, \n-\t       extern_type* __to_end, extern_type*& __to_next) const\n-    {\n-      result __ret = error;\n-      if (__state._M_good())\n-\t{\n-\t  typedef state_type::__desc_type\t__desc_type;\n-\t  const __desc_type* __desc = __state._M_get_in_descriptor();\n-\t  const size_t __tmultiple = sizeof(intern_type) / sizeof(char);\n-\t  size_t __tlen = __tmultiple * (__to_end - __to); \n-\t  \n-\t  // Argument list for iconv specifies a byte sequence. Thus,\n-\t  // all to/from arrays must be brutally casted to char*.\n-\t  char* __cto = reinterpret_cast<char*>(__to);\n-\t  size_t __conv = __iconv_adaptor(iconv,*__desc, NULL, NULL,\n-                                          &__cto, &__tlen); \n-\t  \n-\t  if (__conv != size_t(-1))\n-\t    {\n-\t      __to_next = reinterpret_cast<extern_type*>(__cto);\n-\t      if (__tlen == __tmultiple * (__to_end - __to))\n-\t\t__ret = noconv;\n-\t      else if (__tlen == 0)\n-\t\t__ret = ok;\n-\t      else\n-\t\t__ret = partial;\n-\t    }\n-\t  else \n-\t    __ret = error;\n-\t}\n-      return __ret; \n-    }\n-   \n-  template<typename _InternT, typename _ExternT>\n-    codecvt_base::result\n-    codecvt<_InternT, _ExternT, __enc_traits>::\n-    do_in(state_type& __state, const extern_type* __from, \n-\t  const extern_type* __from_end, const extern_type*& __from_next,\n-\t  intern_type* __to, intern_type* __to_end, \n-\t  intern_type*& __to_next) const\n-    { \n-      result __ret = error;\n-      if (__state._M_good())\n-\t{\n-\t  typedef state_type::__desc_type\t__desc_type;\n-\t  const __desc_type* __desc = __state._M_get_in_descriptor();\n-\t  const size_t __fmultiple = sizeof(extern_type) / sizeof(char);\n-\t  size_t __flen = __fmultiple * (__from_end - __from);\n-\t  const size_t __tmultiple = sizeof(intern_type) / sizeof(char);\n-\t  size_t __tlen = __tmultiple * (__to_end - __to); \n-\t  \n-\t  // Argument list for iconv specifies a byte sequence. Thus,\n-\t  // all to/from arrays must be brutally casted to char*.\n-\t  char* __cto = reinterpret_cast<char*>(__to);\n-\t  char* __cfrom;\n-\t  size_t __conv;\n-\n-\t  // Some encodings need a byte order marker as the first item\n-\t  // in the byte stream, to designate endian-ness. The default\n-\t  // value for the byte order marker is NULL, so if this is\n-\t  // the case, it's not necessary and we can just go on our\n-\t  // merry way.\n-\t  int __ext_bom = __state._M_get_external_bom();\n-\t  if (__ext_bom)\n-\t    {\t  \n-\t      size_t __size = __from_end - __from;\n-\t      extern_type* __cfixed =  static_cast<extern_type*>(__builtin_alloca(sizeof(extern_type) * (__size + 1)));\n-\t      __cfixed[0] = static_cast<extern_type>(__ext_bom);\n-\t      char_traits<extern_type>::copy(__cfixed + 1, __from, __size);\n-\t      __cfrom = reinterpret_cast<char*>(__cfixed);\n-\t      __conv = __iconv_adaptor(iconv, *__desc, &__cfrom,\n-                                       &__flen, &__cto, &__tlen); \n-\t    }\n-\t  else\n-\t    {\n-\t      extern_type* __cfixed = const_cast<extern_type*>(__from);\n-\t      __cfrom = reinterpret_cast<char*>(__cfixed);\n-\t      __conv = __iconv_adaptor(iconv, *__desc, &__cfrom,\n-                                       &__flen, &__cto, &__tlen); \n-\t    }\n-\n-\t  \n-\t  if (__conv != size_t(-1))\n-\t    {\n-\t      __from_next = reinterpret_cast<const extern_type*>(__cfrom);\n-\t      __to_next = reinterpret_cast<intern_type*>(__cto);\n-\t      __ret = ok;\n-\t    }\n-\t  else \n-\t    {\n-\t      if (__flen < static_cast<size_t>(__from_end - __from))\n-\t\t{\n-\t\t  __from_next = reinterpret_cast<const extern_type*>(__cfrom);\n-\t\t  __to_next = reinterpret_cast<intern_type*>(__cto);\n-\t\t  __ret = partial;\n-\t\t}\n-\t      else\n-\t\t__ret = error;\n-\t    }\n-\t}\n-      return __ret; \n-    }\n-  \n-  template<typename _InternT, typename _ExternT>\n-    int \n-    codecvt<_InternT, _ExternT, __enc_traits>::\n-    do_encoding() const throw()\n-    { return 0; }\n-  \n-  template<typename _InternT, typename _ExternT>\n-    bool \n-    codecvt<_InternT, _ExternT, __enc_traits>::\n-    do_always_noconv() const throw()\n-    { return false; }\n-  \n-  template<typename _InternT, typename _ExternT>\n-    int \n-    codecvt<_InternT, _ExternT, __enc_traits>::\n-    do_length(const state_type&, const extern_type* __from, \n-\t      const extern_type* __end, size_t __max) const\n-    { return min(__max, static_cast<size_t>(__end - __from)); }\n-\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-// 74.  Garbled text for codecvt::do_max_length\n-  template<typename _InternT, typename _ExternT>\n-    int \n-    codecvt<_InternT, _ExternT, __enc_traits>::\n-    do_max_length() const throw()\n-    { return 1; }\n-#endif\n-#endif /* _GLIBCPP_USE_WCHAR_T */\n-\n   // codecvt<char, char, mbstate_t> required specialization\n   template<>\n     class codecvt<char, char, mbstate_t> \n@@ -709,9 +295,14 @@\n       ~codecvt_byname() { }\n     };\n \n+  // Include host and configuration specific partial specializations\n+  // with additional functionality, if possible.\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  #include <bits/codecvt_specializations.h>\n+#endif\n+\n #endif // _CPP_BITS_CODECVT_H\n \n-// Local Variables:\n-// mode:c++\n-// End:\n+\n+\n "}, {"sha": "0912fc6597c8ea1a417308945b9d1b49d9c63a54", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 112, "deletions": 32, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -41,15 +41,13 @@\n #include <bits/std_ctime.h>\t// For struct tm\n #include <bits/std_ios.h>\t// For ios_base\n #ifdef _GLIBCPP_USE_WCHAR_T\n-# include <langinfo.h>\t\t// For codecvt\n # include <bits/std_cwctype.h>\t// For wctype_t\n-# include <iconv.h>\t\t// For codecvt using iconv, iconv_t\n #endif \n \n namespace std\n {\n   // 22.2.1.1  Template class ctype\n-  // Include host-specific ctype enums for ctype_base.\n+  // Include host and configuration specific ctype enums for ctype_base.\n   #include <bits/ctype_base.h>\n \n   // __ctype_abstract_base is the common base for ctype<_CharT>.  \n@@ -388,7 +386,7 @@ namespace std\n     use_facet<ctype<wchar_t> >(const locale& __loc);\n #endif //_GLIBCPP_USE_WCHAR_T\n \n-  // Include host-specific ctype inlines.\n+  // Include host and configuration specific ctype inlines.\n   #include <bits/ctype_inline.h>\n \n   // 22.2.1.2  Template class ctype_byname\n@@ -820,6 +818,7 @@ namespace std\n   template <typename _CharT, typename _OutIter>\n     locale::id num_put<_CharT, _OutIter>::id;\n \n+\n   template<typename _CharT>\n     class numpunct : public locale::facet\n     {\n@@ -848,23 +847,23 @@ namespace std\n \n       char_type    \n       decimal_point() const\n-      { return do_decimal_point(); }\n+      { return this->do_decimal_point(); }\n \n       char_type    \n       thousands_sep() const\n-      { return do_thousands_sep(); }\n+      { return this->do_thousands_sep(); }\n \n       string       \n       grouping() const\n-      { return do_grouping(); }\n+      { return this->do_grouping(); }\n \n       string_type  \n       truename() const\n-      { return do_truename(); }\n+      { return this->do_truename(); }\n \n       string_type  \n       falsename() const\n-      { return do_falsename(); }\n+      { return this->do_falsename(); }\n \n     protected:\n       virtual \n@@ -918,7 +917,9 @@ namespace std\n   template<typename _CharT>\n     class numpunct_byname : public numpunct<_CharT>\n     {\n+      // Data Member.\n       __c_locale\t\t\t_M_c_locale_numpunct;\n+\n     public:\n       typedef _CharT               \tchar_type;\n       typedef basic_string<_CharT> \tstring_type;\n@@ -1462,68 +1463,147 @@ namespace std\n     class messages : public locale::facet, public messages_base\n     {\n     public:\n+      // Types:\n       typedef _CharT \t\t\tchar_type;\n       typedef basic_string<_CharT> \tstring_type;\n \n+    protected:\n+      // Underlying \"C\" library locale information saved from\n+      // initialization, needed by messages_byname as well.\n+      __c_locale\t_M_c_locale_messages;\n+      #if 1\n+      // Only needed if glibc < 2.3\n+      const char*\t_M_name_messages;\n+      #endif\n+\n+    public:\n       static locale::id id;\n \n       explicit \n-      messages(size_t __refs = 0) : locale::facet(__refs) { }\n+      messages(size_t __refs = 0) \n+      : locale::facet(__refs), _M_c_locale_messages(NULL), \n+      _M_name_messages(\"C\")\n+      { }\n+\n+      explicit \n+      messages(__c_locale __cloc, const char* __name, size_t __refs = 0) \n+      : locale::facet(__refs)\n+      { \n+\t_M_name_messages = __name;\n+\tif (__cloc)\n+\t  _M_c_locale_messages = _S_clone_c_locale(__cloc); \n+      }\n \n       catalog \n       open(const basic_string<char>& __s, const locale& __loc) const\n-      { return do_open(__s, __loc); }\n+      { return this->do_open(__s, __loc); }\n+\n+      // Non-standard and unorthodox, yet effective.\n+      catalog \n+      open(const basic_string<char>&, const locale&, const char*) const;\n \n       string_type  \n       get(catalog __c, int __set, int __msgid, const string_type& __s) const\n-      { return do_get(__c,__set,__msgid,__s); }\n+      { return this->do_get(__c, __set, __msgid, __s); }\n \n       void \n       close(catalog __c) const\n-      { return do_close(__c); }\n+      { return this->do_close(__c); }\n \n     protected:\n       virtual \n-      ~messages() { }\n+      ~messages();\n \n-      // NB: Probably these should be pure, and implemented only in\n-      //  specializations of messages<>.  But for now...\n       virtual catalog \n-      do_open(const basic_string<char>&, const locale&) const\n-      { return 0; }\n+      do_open(const basic_string<char>&, const locale&) const;\n \n       virtual string_type  \n-      do_get(catalog, int, int /*__msgid*/, const string_type& __dfault) const\n-      { return __dfault; }\n+      do_get(catalog, int, int, const string_type& __dfault) const;\n \n       virtual void    \n-      do_close(catalog) const { }\n-    };\n+      do_close(catalog) const;\n+\n+      // Returns a locale and codeset-converted string, given a char* message.\n+      char*\n+      _M_convert_to_char(const string_type& __msg) const\n+      {\n+\t// XXX\n+\treturn reinterpret_cast<char*>(const_cast<_CharT*>(__msg.c_str()));\n+      }\n+\n+      // Returns a locale and codeset-converted string, given a char* message.\n+      string_type\n+      _M_convert_from_char(char* __msg) const\n+      {\n+\t// Length of message string without terminating null.\n+\tsize_t __len = char_traits<char>::length(__msg) - 1;\n+\n+\t// \"everybody can easily convert the string using\n+\t// mbsrtowcs/wcsrtombs or with iconv()\"\n+#if 0\n+\t// Convert char* to _CharT in locale used to open catalog.\n+\t// XXX need additional template parameter on messages class for this..\n+\t// typedef typename codecvt<char, _CharT, _StateT> __codecvt_type;\n+\ttypedef typename codecvt<char, _CharT, mbstate_t> __codecvt_type;      \n+\n+\t__codecvt_type::state_type __state;\n+\t// XXX may need to initialize state.\n+\t//initialize_state(__state._M_init());\n+\t\n+\tchar* __from_next;\n+\t// XXX what size for this string?\n+\t_CharT* __to = static_cast<_CharT*>(__builtin_alloca(__len + 1));\n+\tconst __codecvt_type& __cvt = use_facet<__codecvt_type>(_M_locale_conv);\n+\t__cvt.out(__state, __msg, __msg + __len, __from_next,\n+\t\t  __to, __to + __len + 1, __to_next);\n+\treturn string_type(__to);\n+#endif\n+#if 0\n+\ttypedef ctype<_CharT> __ctype_type;\n+\t// const __ctype_type& __cvt = use_facet<__ctype_type>(_M_locale_msg);\n+\tconst __ctype_type& __cvt = use_facet<__ctype_type>(locale());\n+\t// XXX Again, proper length of converted string an issue here.\n+\t// For now, assume the converted length is not larger.\n+\t_CharT* __dest = static_cast<_CharT*>(__builtin_alloca(__len + 1));\n+\t__cvt.widen(__msg, __msg + __len, __dest);\n+\treturn basic_string<_CharT>(__dest);\n+#endif\n+\treturn string_type();\n+      }\n+     };\n \n   template<typename _CharT>\n     locale::id messages<_CharT>::id;\n \n+  // Specializations for required instantiations.\n+  template<>\n+    string\n+    messages<char>::do_get(catalog, int, int, const string&) const;\n+\n+  // Include host and configuration specific messages virtual functions.\n+  #include <bits/messages_members.h>\n+\n   template<typename _CharT>\n     class messages_byname : public messages<_CharT>\n     {\n     public:\n-      typedef _CharT char_type;\n-      typedef basic_string<_CharT> string_type;\n+      typedef _CharT               \tchar_type;\n+      typedef basic_string<_CharT> \tstring_type;\n \n       explicit \n-      messages_byname(const char*, size_t __refs = 0);\n+      messages_byname(const char* __s, size_t __refs = 0)\n+      : messages<_CharT>(__refs) \n+      { \n+\t_S_create_c_locale(_M_c_locale_messages, __s); \n+\t_M_name_messages = __s;\n+      }\n \n     protected:\n       virtual \n-      ~messages_byname() { }\n+      ~messages_byname() \n+      { }\n     };\n \n-  template<>\n-    messages_byname<char>::messages_byname(const char*, size_t __refs);\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  template<>\n-    messages_byname<wchar_t>::messages_byname(const char*, size_t __refs);\n-#endif\n \n   // Subclause convenience interfaces, inlines \n   // NB: these are inline"}, {"sha": "5256f6c2da245420d1ad11bfc6fbd8269fbcbf43", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -37,7 +37,7 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n-#include <bits/c++locale.h>     // Defines __c_locale.\n+#include <bits/c++locale.h>     // Defines __c_locale, config-specific includes\n #include <bits/std_climits.h>\t// For CHAR_BIT\n #include <bits/std_string.h> \t// For string\n #include <bits/std_cctype.h>\t// For isspace, etc.\n@@ -124,6 +124,7 @@ namespace std\n   // NB: Specialized for char and wchar_t in locale_facets.h.\n \n   class codecvt_base;\n+  class __enc_traits;\n   template<typename _InternT, typename _ExternT, typename _StateT>\n     class codecvt;\n   template<> class codecvt<char, char, mbstate_t>;\n@@ -310,7 +311,6 @@ namespace std\n     size_t \t\t\t\t_M_references;\n     __vec_facet* \t\t\t_M_facets;\n     string \t\t\t\t_M_names[_S_num_categories];\n-    __c_locale\t\t\t\t_M_c_locale;\n     static const locale::id* const \t_S_id_ctype[];\n     static const locale::id* const \t_S_id_numeric[];\n     static const locale::id* const \t_S_id_collate[];\n@@ -379,6 +379,7 @@ namespace std\n   {\n     friend class locale;\n     friend class locale::_Impl;\n+    friend class __enc_traits;\n \n   protected:\n     explicit \n@@ -390,6 +391,9 @@ namespace std\n     static void\n     _S_create_c_locale(__c_locale& __cloc, const char* __s);\n \n+    static __c_locale\n+    _S_clone_c_locale(__c_locale& __cloc);\n+\n     static void\n     _S_destroy_c_locale(__c_locale& __cloc);\n "}, {"sha": "520a6f12ad7fed39292da8ce6e5a6a9f6042a1fc", "filename": "libstdc++-v3/intl/Makefile.am", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fintl%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fintl%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fintl%2FMakefile.am?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,34 @@\n+## Makefile for the intl subdirectory of the GNU C++ Standard library.\n+##\n+## Copyright (C) 2001 Free Software Foundation, Inc.\n+##\n+## This file is part of the libstdc++ version 3 distribution.\n+## Process this file with automake to produce Makefile.in.\n+\n+## This file is part of the GNU ISO C++ Library.  This library is free\n+## software; you can redistribute it and/or modify it under the\n+## terms of the GNU General Public License as published by the\n+## Free Software Foundation; either version 2, or (at your option)\n+## any later version.\n+\n+## This library is distributed in the hope that it will be useful,\n+## but WITHOUT ANY WARRANTY; without even the implied warranty of\n+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+## GNU General Public License for more details.\n+\n+## You should have received a copy of the GNU General Public License along\n+## with this library; see the file COPYING.  If not, write to the Free\n+## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+## USA.\n+\n+PACKAGE = @PACKAGE@\n+\n+DISTFILES = \\\n+\tstring_literals.cc\n+\n+# Dummy rule.\n+all-local:\n+\n+\n+\n+"}, {"sha": "78f255bc6eab8378de6241b0cb1932e8fc5e70aa", "filename": "libstdc++-v3/intl/Makefile.in", "status": "added", "additions": 258, "deletions": 0, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fintl%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fintl%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fintl%2FMakefile.in?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,258 @@\n+# Makefile.in generated automatically by automake 1.4 from Makefile.am\n+\n+# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n+# This Makefile.in is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+# PARTICULAR PURPOSE.\n+\n+\n+SHELL = @SHELL@\n+\n+srcdir = @srcdir@\n+top_srcdir = @top_srcdir@\n+VPATH = @srcdir@\n+prefix = @prefix@\n+exec_prefix = @exec_prefix@\n+\n+bindir = @bindir@\n+sbindir = @sbindir@\n+libexecdir = @libexecdir@\n+datadir = @datadir@\n+sysconfdir = @sysconfdir@\n+sharedstatedir = @sharedstatedir@\n+localstatedir = @localstatedir@\n+libdir = @libdir@\n+infodir = @infodir@\n+mandir = @mandir@\n+includedir = @includedir@\n+oldincludedir = /usr/include\n+\n+DESTDIR =\n+\n+pkgdatadir = $(datadir)/@PACKAGE@\n+pkglibdir = $(libdir)/@PACKAGE@\n+pkgincludedir = $(includedir)/@PACKAGE@\n+\n+top_builddir = ..\n+\n+ACLOCAL = @ACLOCAL@\n+AUTOCONF = @AUTOCONF@\n+AUTOMAKE = @AUTOMAKE@\n+AUTOHEADER = @AUTOHEADER@\n+\n+INSTALL = @INSTALL@\n+INSTALL_PROGRAM = @INSTALL_PROGRAM@ $(AM_INSTALL_PROGRAM_FLAGS)\n+INSTALL_DATA = @INSTALL_DATA@\n+INSTALL_SCRIPT = @INSTALL_SCRIPT@\n+transform = @program_transform_name@\n+\n+NORMAL_INSTALL = :\n+PRE_INSTALL = :\n+POST_INSTALL = :\n+NORMAL_UNINSTALL = :\n+PRE_UNINSTALL = :\n+POST_UNINSTALL = :\n+build_alias = @build_alias@\n+build_triplet = @build@\n+host_alias = @host_alias@\n+host_triplet = @host@\n+target_alias = @target_alias@\n+target_triplet = @target@\n+AR = @AR@\n+AS = @AS@\n+ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n+BASIC_FILE_H = @BASIC_FILE_H@\n+CATALOGS = @CATALOGS@\n+CATOBJEXT = @CATOBJEXT@\n+CC = @CC@\n+CCODECVT_C = @CCODECVT_C@\n+CCODECVT_H = @CCODECVT_H@\n+CLOCALE_H = @CLOCALE_H@\n+CMESSAGES_H = @CMESSAGES_H@\n+CPP = @CPP@\n+CSHADOW_FLAGS = @CSHADOW_FLAGS@\n+CSTDIO_H = @CSTDIO_H@\n+CXX = @CXX@\n+CXXCPP = @CXXCPP@\n+C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+DATADIRNAME = @DATADIRNAME@\n+DEBUG_FLAGS = @DEBUG_FLAGS@\n+DLLTOOL = @DLLTOOL@\n+EXEEXT = @EXEEXT@\n+EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n+GCJ = @GCJ@\n+GCJFLAGS = @GCJFLAGS@\n+GENCAT = @GENCAT@\n+GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n+GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n+GMOFILES = @GMOFILES@\n+GMSGFMT = @GMSGFMT@\n+GT_NO = @GT_NO@\n+GT_YES = @GT_YES@\n+INCLUDE_LOCALE_H = @INCLUDE_LOCALE_H@\n+INSTOBJEXT = @INSTOBJEXT@\n+INTLDEPS = @INTLDEPS@\n+INTLLIBS = @INTLLIBS@\n+INTLOBJS = @INTLOBJS@\n+LIBIO_INCLUDES = @LIBIO_INCLUDES@\n+LIBMATHOBJS = @LIBMATHOBJS@\n+LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n+LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n+LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n+LIBTOOL = @LIBTOOL@\n+LN_S = @LN_S@\n+MAINT = @MAINT@\n+MAKEINFO = @MAKEINFO@\n+MKINSTALLDIRS = @MKINSTALLDIRS@\n+MSGFMT = @MSGFMT@\n+OBJDUMP = @OBJDUMP@\n+OBJEXT = @OBJEXT@\n+OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n+OPT_LDFLAGS = @OPT_LDFLAGS@\n+OS_INC_SRCDIR = @OS_INC_SRCDIR@\n+POFILES = @POFILES@\n+POSUB = @POSUB@\n+RANLIB = @RANLIB@\n+SECTION_FLAGS = @SECTION_FLAGS@\n+SECTION_LDFLAGS = @SECTION_LDFLAGS@\n+STRIP = @STRIP@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n+USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n+USE_INCLUDED_LIBINTL = @USE_INCLUDED_LIBINTL@\n+USE_NLS = @USE_NLS@\n+VERSION = @VERSION@\n+WARN_FLAGS = @WARN_FLAGS@\n+WERROR = @WERROR@\n+enable_shared = @enable_shared@\n+enable_static = @enable_static@\n+glibcpp_CXX = @glibcpp_CXX@\n+glibcpp_MOFILES = @glibcpp_MOFILES@\n+glibcpp_basedir = @glibcpp_basedir@\n+glibcpp_builddir = @glibcpp_builddir@\n+glibcpp_localedir = @glibcpp_localedir@\n+glibcpp_prefixdir = @glibcpp_prefixdir@\n+glibcpp_srcdir = @glibcpp_srcdir@\n+glibcpp_thread_h = @glibcpp_thread_h@\n+glibcpp_toolexecdir = @glibcpp_toolexecdir@\n+glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n+gxx_include_dir = @gxx_include_dir@\n+ifGNUmake = @ifGNUmake@\n+l = @l@\n+libio_la = @libio_la@\n+toplevel_srcdir = @toplevel_srcdir@\n+\n+PACKAGE = @PACKAGE@\n+\n+DISTFILES =  \tstring_literals.cc\n+\n+mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n+CONFIG_HEADER = ../config.h ../config.h ../testsuite/testsuite_hooks.h\n+CONFIG_CLEAN_FILES = \n+DIST_COMMON =  Makefile.am Makefile.in\n+\n+\n+TAR = gtar\n+GZIP_ENV = --best\n+all: all-redirect\n+.SUFFIXES:\n+$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) \n+\tcd $(top_srcdir) && $(AUTOMAKE) --cygnus intl/Makefile\n+\n+Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status\n+\tcd $(top_builddir) \\\n+\t  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status\n+\n+tags: TAGS\n+TAGS:\n+\n+\n+distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)\n+\n+subdir = intl\n+\n+distdir: $(DISTFILES)\n+\t@for file in $(DISTFILES); do \\\n+\t  if test -f $$file; then d=.; else d=$(srcdir); fi; \\\n+\t  if test -d $$d/$$file; then \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n+\t  else \\\n+\t    test -f $(distdir)/$$file \\\n+\t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\\n+\t    || cp -p $$d/$$file $(distdir)/$$file || :; \\\n+\t  fi; \\\n+\tdone\n+info-am:\n+info: info-am\n+dvi-am:\n+dvi: dvi-am\n+check-am:\n+check: check-am\n+installcheck-am:\n+installcheck: installcheck-am\n+install-info-am: \n+install-info: install-info-am\n+install-exec-am:\n+install-exec: install-exec-am\n+\n+install-data-am:\n+install-data: install-data-am\n+\n+install-am: all-am\n+\t@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am\n+install: install-am\n+uninstall-am:\n+uninstall: uninstall-am\n+all-am: Makefile all-local\n+all-redirect: all-am\n+install-strip:\n+\t$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install\n+installdirs:\n+\n+\n+mostlyclean-generic:\n+\n+clean-generic:\n+\n+distclean-generic:\n+\t-rm -f Makefile $(CONFIG_CLEAN_FILES)\n+\t-rm -f config.cache config.log stamp-h stamp-h[0-9]*\n+\n+maintainer-clean-generic:\n+mostlyclean-am:  mostlyclean-generic\n+\n+mostlyclean: mostlyclean-am\n+\n+clean-am:  clean-generic mostlyclean-am\n+\n+clean: clean-am\n+\n+distclean-am:  distclean-generic clean-am\n+\t-rm -f libtool\n+\n+distclean: distclean-am\n+\n+maintainer-clean-am:  maintainer-clean-generic distclean-am\n+\t@echo \"This command is intended for maintainers to use;\"\n+\t@echo \"it deletes files that may require special tools to rebuild.\"\n+\n+maintainer-clean: maintainer-clean-am\n+\n+.PHONY: tags distdir info-am info dvi-am dvi check check-am \\\n+installcheck-am installcheck install-info-am install-info \\\n+install-exec-am install-exec install-data-am install-data install-am \\\n+install uninstall-am uninstall all-local all-redirect all-am all \\\n+installdirs mostlyclean-generic distclean-generic clean-generic \\\n+maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n+\n+\n+# Dummy rule.\n+all-local:\n+\n+# Tell versions [3.59,3.63) of GNU make to not export all variables.\n+# Otherwise a system limit (for SysV at least) may be exceeded.\n+.NOEXPORT:"}, {"sha": "776cf39068a08571c8b227ab69fa4fd8e2e6f561", "filename": "libstdc++-v3/intl/string_literals.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fintl%2Fstring_literals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fintl%2Fstring_literals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fintl%2Fstring_literals.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <libintl.h>\n+#define gettext_noop(Str) Str\n+\n+// For messages testsuite files.\n+const char* msgstr1 = gettext_noop(\"please\");\n+const char* msgstr2 = gettext_noop(\"thank you\");\n+\n+// For numpunct implementation.\n+const char* msgstr3 = gettext_noop(\"true\");\n+const char* msgstr4 = gettext_noop(\"false\");\n+"}, {"sha": "4eb9b8bf3f483983c1da805fa65f629526f4c8a9", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -67,57 +67,80 @@ AR = @AR@\n AS = @AS@\n ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n BASIC_FILE_H = @BASIC_FILE_H@\n+CATALOGS = @CATALOGS@\n+CATOBJEXT = @CATOBJEXT@\n CC = @CC@\n CCODECVT_C = @CCODECVT_C@\n+CCODECVT_H = @CCODECVT_H@\n CLOCALE_H = @CLOCALE_H@\n+CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+DATADIRNAME = @DATADIRNAME@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n+GENCAT = @GENCAT@\n GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n+GMOFILES = @GMOFILES@\n+GMSGFMT = @GMSGFMT@\n+GT_NO = @GT_NO@\n+GT_YES = @GT_YES@\n+INCLUDE_LOCALE_H = @INCLUDE_LOCALE_H@\n+INSTOBJEXT = @INSTOBJEXT@\n+INTLDEPS = @INTLDEPS@\n+INTLLIBS = @INTLLIBS@\n+INTLOBJS = @INTLOBJS@\n LIBMATHOBJS = @LIBMATHOBJS@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n-LIBSTRINGOBJS = @LIBSTRINGOBJS@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n+MKINSTALLDIRS = @MKINSTALLDIRS@\n+MSGFMT = @MSGFMT@\n OBJDUMP = @OBJDUMP@\n OBJEXT = @OBJEXT@\n OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n OPT_LDFLAGS = @OPT_LDFLAGS@\n OS_INC_SRCDIR = @OS_INC_SRCDIR@\n PACKAGE = @PACKAGE@\n+POFILES = @POFILES@\n+POSUB = @POSUB@\n RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n+USE_INCLUDED_LIBINTL = @USE_INCLUDED_LIBINTL@\n+USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n glibcpp_CXX = @glibcpp_CXX@\n+glibcpp_MOFILES = @glibcpp_MOFILES@\n glibcpp_basedir = @glibcpp_basedir@\n glibcpp_builddir = @glibcpp_builddir@\n+glibcpp_localedir = @glibcpp_localedir@\n glibcpp_prefixdir = @glibcpp_prefixdir@\n glibcpp_srcdir = @glibcpp_srcdir@\n glibcpp_thread_h = @glibcpp_thread_h@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n+l = @l@\n libio_la = @libio_la@\n toplevel_srcdir = @toplevel_srcdir@\n \n@@ -147,12 +170,12 @@ EXTRA_DIST = iostreamP.h\n libio_la_SOURCES = $(LIBIO_SRCS) $(LIBIO_WSRCS)\n \n AM_CFLAGS = -D_GNU_SOURCE @DEBUG_FLAGS@ \n-CONFIG_HEADER = ../config.h\n+CONFIG_HEADER = ../config.h ../config.h ../testsuite/testsuite_hooks.h\n CONFIG_CLEAN_FILES = \n LTLIBRARIES =  $(noinst_LTLIBRARIES)\n \n \n-DEFS = @DEFS@ -I. -I$(srcdir) -I..\n+DEFS = @DEFS@ -I. -I$(srcdir) -I.. -I.. -I../testsuite\n CPPFLAGS = @CPPFLAGS@\n LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@"}, {"sha": "4e1131c1e8311ad666f5ab1e9a081d8e175b2538", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -67,59 +67,82 @@ AR = @AR@\n AS = @AS@\n ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n BASIC_FILE_H = @BASIC_FILE_H@\n+CATALOGS = @CATALOGS@\n+CATOBJEXT = @CATOBJEXT@\n CC = @CC@\n CCODECVT_C = @CCODECVT_C@\n+CCODECVT_H = @CCODECVT_H@\n CLOCALE_H = @CLOCALE_H@\n+CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+DATADIRNAME = @DATADIRNAME@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n+GENCAT = @GENCAT@\n GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n+GMOFILES = @GMOFILES@\n+GMSGFMT = @GMSGFMT@\n+GT_NO = @GT_NO@\n+GT_YES = @GT_YES@\n+INCLUDE_LOCALE_H = @INCLUDE_LOCALE_H@\n+INSTOBJEXT = @INSTOBJEXT@\n+INTLDEPS = @INTLDEPS@\n+INTLLIBS = @INTLLIBS@\n+INTLOBJS = @INTLOBJS@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n LIBMATHOBJS = @LIBMATHOBJS@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n-LIBSTRINGOBJS = @LIBSTRINGOBJS@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n+MKINSTALLDIRS = @MKINSTALLDIRS@\n+MSGFMT = @MSGFMT@\n OBJDUMP = @OBJDUMP@\n OBJEXT = @OBJEXT@\n OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n OPT_LDFLAGS = @OPT_LDFLAGS@\n OS_INC_SRCDIR = @OS_INC_SRCDIR@\n PACKAGE = @PACKAGE@\n+POFILES = @POFILES@\n+POSUB = @POSUB@\n RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n+USE_INCLUDED_LIBINTL = @USE_INCLUDED_LIBINTL@\n+USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n glibcpp_CXX = @glibcpp_CXX@\n+glibcpp_MOFILES = @glibcpp_MOFILES@\n glibcpp_basedir = @glibcpp_basedir@\n glibcpp_builddir = @glibcpp_builddir@\n+glibcpp_localedir = @glibcpp_localedir@\n glibcpp_prefixdir = @glibcpp_prefixdir@\n glibcpp_srcdir = @glibcpp_srcdir@\n glibcpp_thread_h = @glibcpp_thread_h@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n+l = @l@\n libio_la = @libio_la@\n toplevel_srcdir = @toplevel_srcdir@\n \n@@ -147,12 +170,12 @@ TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n INCLUDES =  \t$(TOPLEVEL_INCLUDES) \n \n-CONFIG_HEADER = ../config.h\n+CONFIG_HEADER = ../config.h ../config.h ../testsuite/testsuite_hooks.h\n CONFIG_CLEAN_FILES = \n LTLIBRARIES =  $(noinst_LTLIBRARIES)\n \n \n-DEFS = @DEFS@ -I. -I$(srcdir) -I..\n+DEFS = @DEFS@ -I. -I$(srcdir) -I.. -I.. -I../testsuite\n CPPFLAGS = @CPPFLAGS@\n LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n@@ -276,7 +299,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  if test -f $$file; then d=.; else d=$(srcdir); fi; \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "5e6f4a18f570b7749865323a5f5620bc447fd7ee", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -67,56 +67,79 @@ AR = @AR@\n AS = @AS@\n ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n BASIC_FILE_H = @BASIC_FILE_H@\n+CATALOGS = @CATALOGS@\n+CATOBJEXT = @CATOBJEXT@\n CC = @CC@\n CCODECVT_C = @CCODECVT_C@\n+CCODECVT_H = @CCODECVT_H@\n CLOCALE_H = @CLOCALE_H@\n+CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+DATADIRNAME = @DATADIRNAME@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n+GENCAT = @GENCAT@\n GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n+GMOFILES = @GMOFILES@\n+GMSGFMT = @GMSGFMT@\n+GT_NO = @GT_NO@\n+GT_YES = @GT_YES@\n+INCLUDE_LOCALE_H = @INCLUDE_LOCALE_H@\n+INSTOBJEXT = @INSTOBJEXT@\n+INTLDEPS = @INTLDEPS@\n+INTLLIBS = @INTLLIBS@\n+INTLOBJS = @INTLOBJS@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n LIBMATHOBJS = @LIBMATHOBJS@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n-LIBSTRINGOBJS = @LIBSTRINGOBJS@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n+MKINSTALLDIRS = @MKINSTALLDIRS@\n+MSGFMT = @MSGFMT@\n OBJDUMP = @OBJDUMP@\n OBJEXT = @OBJEXT@\n OPT_LDFLAGS = @OPT_LDFLAGS@\n OS_INC_SRCDIR = @OS_INC_SRCDIR@\n PACKAGE = @PACKAGE@\n+POFILES = @POFILES@\n+POSUB = @POSUB@\n RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n+USE_INCLUDED_LIBINTL = @USE_INCLUDED_LIBINTL@\n+USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n glibcpp_CXX = @glibcpp_CXX@\n+glibcpp_MOFILES = @glibcpp_MOFILES@\n glibcpp_basedir = @glibcpp_basedir@\n glibcpp_builddir = @glibcpp_builddir@\n+glibcpp_localedir = @glibcpp_localedir@\n glibcpp_prefixdir = @glibcpp_prefixdir@\n glibcpp_srcdir = @glibcpp_srcdir@\n glibcpp_thread_h = @glibcpp_thread_h@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n+l = @l@\n libio_la = @libio_la@\n toplevel_srcdir = @toplevel_srcdir@\n \n@@ -212,12 +235,12 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=c\n # compilation driver.\n CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared           --mode=link $(CXX)           @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n-CONFIG_HEADER = ../config.h\n+CONFIG_HEADER = ../config.h ../config.h ../testsuite/testsuite_hooks.h\n CONFIG_CLEAN_FILES = \n LTLIBRARIES =  $(noinst_LTLIBRARIES) $(toolexeclib_LTLIBRARIES)\n \n \n-DEFS = @DEFS@ -I. -I$(srcdir) -I..\n+DEFS = @DEFS@ -I. -I$(srcdir) -I.. -I.. -I../testsuite\n CPPFLAGS = @CPPFLAGS@\n LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@"}, {"sha": "0f26f11355930d9c66457b865b05e03d833975cd", "filename": "libstdc++-v3/po/Makefile.am", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fpo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fpo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.am?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,69 @@\n+## Makefile for the po subdirectory of the GNU C++ Standard library.\n+##\n+## Copyright (C) 2001 Free Software Foundation, Inc.\n+##\n+## This file is part of the libstdc++ version 3 distribution.\n+## Process this file with automake to produce Makefile.in.\n+\n+## This file is part of the GNU ISO C++ Library.  This library is free\n+## software; you can redistribute it and/or modify it under the\n+## terms of the GNU General Public License as published by the\n+## Free Software Foundation; either version 2, or (at your option)\n+## any later version.\n+\n+## This library is distributed in the hope that it will be useful,\n+## but WITHOUT ANY WARRANTY; without even the implied warranty of\n+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+## GNU General Public License for more details.\n+\n+## You should have received a copy of the GNU General Public License along\n+## with this library; see the file COPYING.  If not, write to the Free\n+## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+## USA.\n+\n+PACKAGE = @PACKAGE@\n+\n+# Necessary files.\n+DISTFILES = \\\n+\tMakefile.am Makefile.in POTFILES.in $(PACKAGE).pot \\\n+\t$(LOCALE_IN) \n+\n+# Location of installation directories.\n+locale_installdir = $(DESTDIR)$(datadir)/locale\n+locale_builddir = @glibcpp_localedir@\n+\n+# Tell automake that foo.po makes foo.mo\n+SUFFIXES = .po .mo\n+\n+LOCALE_IN = @POFILES@\n+LOCALE_OUT = @glibcpp_MOFILES@\n+\n+.po.mo:\n+\tcat=`basename $<`; \\\n+\tlang=`echo $$cat | sed 's/\\.po$$//'`; \\\n+\tdir=$(locale_builddir)/$$lang/LC_MESSAGES; \\\n+\t$(mkinstalldirs) $$dir; \\\n+\t$(MSGFMT) $< -o $$dir/$(PACKAGE).mo \n+\n+all-local: all-local-@USE_NLS@\n+all-local-no: \n+all-local-yes: $(LOCALE_OUT)\n+\n+# Install rules here. \n+# Wish install could just `cp -R ./share $(locale_installdir)` ...\n+install-data-local: install-data-local-@USE_NLS@\n+install-data-local-no:\n+install-data-local-yes: all-local-yes\n+\t$(mkinstalldirs) $(locale_installdir) \n+\t@catalogs='$(LOCALE_OUT)'; \\\n+\tfor cat in $$catalogs; do \\\n+\t  cat=`basename $$cat`; \\\n+\t  lang=`echo $$cat | sed 's/\\.mo$$//'`; \\\n+\t  install_dir=$(locale_installdir)/$$lang/LC_MESSAGES; \\\n+\t  $(mkinstalldirs) $$install_dir; \\\n+\t  build_cat=$(locale_builddir)/$$lang/LC_MESSAGES/$(PACKAGE).mo; \\\n+\t  $(INSTALL_DATA) $$build_cat $$install_dir/$(PACKAGE).mo; \\\n+\tdone\n+\n+# Specify what gets cleaned up on a 'make clean'\n+CLEANFILES = $(LOCALE_OUT)"}, {"sha": "1c51fae535c67d1bffb6e4bf0ec6389ce30ee374", "filename": "libstdc++-v3/po/Makefile.in", "status": "added", "additions": 304, "deletions": 0, "changes": 304, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,304 @@\n+# Makefile.in generated automatically by automake 1.4 from Makefile.am\n+\n+# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n+# This Makefile.in is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+# PARTICULAR PURPOSE.\n+\n+\n+SHELL = @SHELL@\n+\n+srcdir = @srcdir@\n+top_srcdir = @top_srcdir@\n+VPATH = @srcdir@\n+prefix = @prefix@\n+exec_prefix = @exec_prefix@\n+\n+bindir = @bindir@\n+sbindir = @sbindir@\n+libexecdir = @libexecdir@\n+datadir = @datadir@\n+sysconfdir = @sysconfdir@\n+sharedstatedir = @sharedstatedir@\n+localstatedir = @localstatedir@\n+libdir = @libdir@\n+infodir = @infodir@\n+mandir = @mandir@\n+includedir = @includedir@\n+oldincludedir = /usr/include\n+\n+DESTDIR =\n+\n+pkgdatadir = $(datadir)/@PACKAGE@\n+pkglibdir = $(libdir)/@PACKAGE@\n+pkgincludedir = $(includedir)/@PACKAGE@\n+\n+top_builddir = ..\n+\n+ACLOCAL = @ACLOCAL@\n+AUTOCONF = @AUTOCONF@\n+AUTOMAKE = @AUTOMAKE@\n+AUTOHEADER = @AUTOHEADER@\n+\n+INSTALL = @INSTALL@\n+INSTALL_PROGRAM = @INSTALL_PROGRAM@ $(AM_INSTALL_PROGRAM_FLAGS)\n+INSTALL_DATA = @INSTALL_DATA@\n+INSTALL_SCRIPT = @INSTALL_SCRIPT@\n+transform = @program_transform_name@\n+\n+NORMAL_INSTALL = :\n+PRE_INSTALL = :\n+POST_INSTALL = :\n+NORMAL_UNINSTALL = :\n+PRE_UNINSTALL = :\n+POST_UNINSTALL = :\n+build_alias = @build_alias@\n+build_triplet = @build@\n+host_alias = @host_alias@\n+host_triplet = @host@\n+target_alias = @target_alias@\n+target_triplet = @target@\n+AR = @AR@\n+AS = @AS@\n+ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n+BASIC_FILE_H = @BASIC_FILE_H@\n+CATALOGS = @CATALOGS@\n+CATOBJEXT = @CATOBJEXT@\n+CC = @CC@\n+CCODECVT_C = @CCODECVT_C@\n+CCODECVT_H = @CCODECVT_H@\n+CLOCALE_H = @CLOCALE_H@\n+CMESSAGES_H = @CMESSAGES_H@\n+CPP = @CPP@\n+CSHADOW_FLAGS = @CSHADOW_FLAGS@\n+CSTDIO_H = @CSTDIO_H@\n+CXX = @CXX@\n+CXXCPP = @CXXCPP@\n+C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+DATADIRNAME = @DATADIRNAME@\n+DEBUG_FLAGS = @DEBUG_FLAGS@\n+DLLTOOL = @DLLTOOL@\n+EXEEXT = @EXEEXT@\n+EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n+GCJ = @GCJ@\n+GCJFLAGS = @GCJFLAGS@\n+GENCAT = @GENCAT@\n+GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n+GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n+GMOFILES = @GMOFILES@\n+GMSGFMT = @GMSGFMT@\n+GT_NO = @GT_NO@\n+GT_YES = @GT_YES@\n+INCLUDE_LOCALE_H = @INCLUDE_LOCALE_H@\n+INSTOBJEXT = @INSTOBJEXT@\n+INTLDEPS = @INTLDEPS@\n+INTLLIBS = @INTLLIBS@\n+INTLOBJS = @INTLOBJS@\n+LIBIO_INCLUDES = @LIBIO_INCLUDES@\n+LIBMATHOBJS = @LIBMATHOBJS@\n+LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n+LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n+LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n+LIBTOOL = @LIBTOOL@\n+LN_S = @LN_S@\n+MAINT = @MAINT@\n+MAKEINFO = @MAKEINFO@\n+MKINSTALLDIRS = @MKINSTALLDIRS@\n+MSGFMT = @MSGFMT@\n+OBJDUMP = @OBJDUMP@\n+OBJEXT = @OBJEXT@\n+OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n+OPT_LDFLAGS = @OPT_LDFLAGS@\n+OS_INC_SRCDIR = @OS_INC_SRCDIR@\n+POFILES = @POFILES@\n+POSUB = @POSUB@\n+RANLIB = @RANLIB@\n+SECTION_FLAGS = @SECTION_FLAGS@\n+SECTION_LDFLAGS = @SECTION_LDFLAGS@\n+STRIP = @STRIP@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n+USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n+USE_INCLUDED_LIBINTL = @USE_INCLUDED_LIBINTL@\n+USE_NLS = @USE_NLS@\n+VERSION = @VERSION@\n+WARN_FLAGS = @WARN_FLAGS@\n+WERROR = @WERROR@\n+enable_shared = @enable_shared@\n+enable_static = @enable_static@\n+glibcpp_CXX = @glibcpp_CXX@\n+glibcpp_MOFILES = @glibcpp_MOFILES@\n+glibcpp_basedir = @glibcpp_basedir@\n+glibcpp_builddir = @glibcpp_builddir@\n+glibcpp_localedir = @glibcpp_localedir@\n+glibcpp_prefixdir = @glibcpp_prefixdir@\n+glibcpp_srcdir = @glibcpp_srcdir@\n+glibcpp_thread_h = @glibcpp_thread_h@\n+glibcpp_toolexecdir = @glibcpp_toolexecdir@\n+glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n+gxx_include_dir = @gxx_include_dir@\n+ifGNUmake = @ifGNUmake@\n+l = @l@\n+libio_la = @libio_la@\n+toplevel_srcdir = @toplevel_srcdir@\n+\n+PACKAGE = @PACKAGE@\n+\n+# Necessary files.\n+DISTFILES =  \tMakefile.am Makefile.in POTFILES.in $(PACKAGE).pot \t$(LOCALE_IN) \n+\n+\n+# Location of installation directories.\n+locale_installdir = $(DESTDIR)$(datadir)/locale\n+locale_builddir = @glibcpp_localedir@\n+\n+# Tell automake that foo.po makes foo.mo\n+SUFFIXES = .po .mo\n+\n+LOCALE_IN = @POFILES@\n+LOCALE_OUT = @glibcpp_MOFILES@\n+\n+# Specify what gets cleaned up on a 'make clean'\n+CLEANFILES = $(LOCALE_OUT)\n+mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n+CONFIG_HEADER = ../config.h ../config.h ../testsuite/testsuite_hooks.h\n+CONFIG_CLEAN_FILES = \n+CFLAGS = @CFLAGS@\n+COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+CCLD = $(CC)\n+LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n+DIST_COMMON =  Makefile.am Makefile.in\n+\n+\n+TAR = gtar\n+GZIP_ENV = --best\n+all: all-redirect\n+.SUFFIXES:\n+.SUFFIXES: .mo .po\n+$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) \n+\tcd $(top_srcdir) && $(AUTOMAKE) --cygnus po/Makefile\n+\n+Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status\n+\tcd $(top_builddir) \\\n+\t  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status\n+\n+tags: TAGS\n+TAGS:\n+\n+\n+distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)\n+\n+subdir = po\n+\n+distdir: $(DISTFILES)\n+\t@for file in $(DISTFILES); do \\\n+\t  if test -f $$file; then d=.; else d=$(srcdir); fi; \\\n+\t  if test -d $$d/$$file; then \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n+\t  else \\\n+\t    test -f $(distdir)/$$file \\\n+\t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\\n+\t    || cp -p $$d/$$file $(distdir)/$$file || :; \\\n+\t  fi; \\\n+\tdone\n+info-am:\n+info: info-am\n+dvi-am:\n+dvi: dvi-am\n+check-am:\n+check: check-am\n+installcheck-am:\n+installcheck: installcheck-am\n+install-info-am: \n+install-info: install-info-am\n+install-exec-am:\n+install-exec: install-exec-am\n+\n+install-data-am: install-data-local\n+install-data: install-data-am\n+\n+install-am: all-am\n+\t@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am\n+install: install-am\n+uninstall-am:\n+uninstall: uninstall-am\n+all-am: Makefile all-local\n+all-redirect: all-am\n+install-strip:\n+\t$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install\n+installdirs:\n+\n+\n+mostlyclean-generic:\n+\n+clean-generic:\n+\t-test -z \"$(CLEANFILES)\" || rm -f $(CLEANFILES)\n+\n+distclean-generic:\n+\t-rm -f Makefile $(CONFIG_CLEAN_FILES)\n+\t-rm -f config.cache config.log stamp-h stamp-h[0-9]*\n+\n+maintainer-clean-generic:\n+mostlyclean-am:  mostlyclean-generic\n+\n+mostlyclean: mostlyclean-am\n+\n+clean-am:  clean-generic mostlyclean-am\n+\n+clean: clean-am\n+\n+distclean-am:  distclean-generic clean-am\n+\t-rm -f libtool\n+\n+distclean: distclean-am\n+\n+maintainer-clean-am:  maintainer-clean-generic distclean-am\n+\t@echo \"This command is intended for maintainers to use;\"\n+\t@echo \"it deletes files that may require special tools to rebuild.\"\n+\n+maintainer-clean: maintainer-clean-am\n+\n+.PHONY: tags distdir info-am info dvi-am dvi check check-am \\\n+installcheck-am installcheck install-info-am install-info \\\n+install-exec-am install-exec install-data-local install-data-am \\\n+install-data install-am install uninstall-am uninstall all-local \\\n+all-redirect all-am all installdirs mostlyclean-generic \\\n+distclean-generic clean-generic maintainer-clean-generic clean \\\n+mostlyclean distclean maintainer-clean\n+\n+\n+.po.mo:\n+\tcat=`basename $<`; \\\n+\tlang=`echo $$cat | sed 's/\\.po$$//'`; \\\n+\tdir=$(locale_builddir)/$$lang/LC_MESSAGES; \\\n+\t$(mkinstalldirs) $$dir; \\\n+\t$(MSGFMT) $< -o $$dir/$(PACKAGE).mo \n+\n+all-local: all-local-@USE_NLS@\n+all-local-no: \n+all-local-yes: $(LOCALE_OUT)\n+\n+# Install rules here. \n+# Wish install could just `cp -R ./share $(locale_installdir)` ...\n+install-data-local: install-data-local-@USE_NLS@\n+install-data-local-no:\n+install-data-local-yes: all-local-yes\n+\t$(mkinstalldirs) $(locale_installdir) \n+\t@catalogs='$(LOCALE_OUT)'; \\\n+\tfor cat in $$catalogs; do \\\n+\t  cat=`basename $$cat`; \\\n+\t  lang=`echo $$cat | sed 's/\\.mo$$//'`; \\\n+\t  install_dir=$(locale_installdir)/$$lang/LC_MESSAGES; \\\n+\t  $(mkinstalldirs) $$install_dir; \\\n+\t  build_cat=$(locale_builddir)/$$lang/LC_MESSAGES/$(PACKAGE).mo; \\\n+\t  $(INSTALL_DATA) $$build_cat $$install_dir/$(PACKAGE).mo; \\\n+\tdone\n+\n+# Tell versions [3.59,3.63) of GNU make to not export all variables.\n+# Otherwise a system limit (for SysV at least) may be exceeded.\n+.NOEXPORT:"}, {"sha": "1cedc4176b9dddd1bab0296a8d3fce7ca0b34c41", "filename": "libstdc++-v3/po/POTFILES.in", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fpo%2FPOTFILES.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fpo%2FPOTFILES.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FPOTFILES.in?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,25 @@\n+## Make/configure bits for translation of the GNU C++ Standard library.\n+##\n+## Copyright (C) 2001 Free Software Foundation, Inc.\n+##\n+## This file is part of the libstdc++ version 3 distribution.\n+## Process this file with automake to produce Makefile.in.\n+\n+## This file is part of the GNU ISO C++ Library.  This library is free\n+## software; you can redistribute it and/or modify it under the\n+## terms of the GNU General Public License as published by the\n+## Free Software Foundation; either version 2, or (at your option)\n+## any later version.\n+\n+## This library is distributed in the hope that it will be useful,\n+## but WITHOUT ANY WARRANTY; without even the implied warranty of\n+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+## GNU General Public License for more details.\n+\n+## You should have received a copy of the GNU General Public License along\n+## with this library; see the file COPYING.  If not, write to the Free\n+## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+## USA.\n+\n+# include/backward/backward_warning.h\n+intl/string_literals.cc"}, {"sha": "835650ce4df8efa86923572a1f73fe513d779289", "filename": "libstdc++-v3/po/de.po", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fpo%2Fde.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fpo%2Fde.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2Fde.po?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,31 @@\n+# Translations needed for GNU C++ library locale implementation.\n+# Copyright (C) 2001 Free Software Foundation, Inc.\n+# Benjamin Kosnik <bkoz@redhat.com>, 2001.\n+#\n+#, fuzzy\n+msgid \"\"\n+msgstr \"\"\n+\"Project-Id-Version: libstdc++ 3.1.0\\n\"\n+\"POT-Creation-Date: 2001-07-31 08:49-0700\\n\"\n+\"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n\"\n+\"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n\"\n+\"Language-Team: LANGUAGE <LL@li.org>\\n\"\n+\"MIME-Version: 1.0\\n\"\n+\"Content-Type: text/plain; charset=ISO-8859-1\\n\"\n+\"Content-Transfer-Encoding: 8-bit\\n\"\n+\n+#: string_literals.cc:23\n+msgid \"please\"\n+msgstr \"bitte\"\n+\n+#: string_literals.cc:24\n+msgid \"thank you\"\n+msgstr \"danke\"\n+\n+#: string_literals.cc:27\n+msgid \"true\"\n+msgstr \"zutreffend\"\n+\n+#: string_literals.cc:28\n+msgid \"false\"\n+msgstr \"falsch\""}, {"sha": "03abcc5c2609c8c27bdec09d89ea0ffd0453d6ae", "filename": "libstdc++-v3/po/fr.po", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fpo%2Ffr.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fpo%2Ffr.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2Ffr.po?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,31 @@\n+# Translations needed for GNU C++ library locale implementation.\n+# Copyright (C) 2001 Free Software Foundation, Inc.\n+# Benjamin Kosnik <bkoz@redhat.com>, 2001.\n+#\n+#, fuzzy\n+msgid \"\"\n+msgstr \"\"\n+\"Project-Id-Version: libstdc++ 3.1.0\\n\"\n+\"POT-Creation-Date: 2001-07-31 08:49-0700\\n\"\n+\"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n\"\n+\"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n\"\n+\"Language-Team: LANGUAGE <LL@li.org>\\n\"\n+\"MIME-Version: 1.0\\n\"\n+\"Content-Type: text/plain; charset=ISO-8859-1\\n\"\n+\"Content-Transfer-Encoding: 8-bit\\n\"\n+\n+#: string_literals.cc:23\n+msgid \"please\"\n+msgstr \"s'il vous pla\ufffdt\"\n+\n+#: string_literals.cc:24\n+msgid \"thank you\"\n+msgstr \"merci\"\n+\n+#: string_literals.cc:27\n+msgid \"true\"\n+msgstr \"vrai\"\n+\n+#: string_literals.cc:28\n+msgid \"false\"\n+msgstr \"faux\""}, {"sha": "1b936efa93491d6ad0cea7089caff543ac1b633d", "filename": "libstdc++-v3/po/libstdc++.pot", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fpo%2Flibstdc%2B%2B.pot", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fpo%2Flibstdc%2B%2B.pot", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2Flibstdc%2B%2B.pot?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,31 @@\n+# Translations needed for GNU C++ library locale implementation.\n+# Copyright (C) 2001 Free Software Foundation, Inc.\n+# Benjamin Kosnik <bkoz@redhat.com>, 2001.\n+#\n+#, fuzzy\n+msgid \"\"\n+msgstr \"\"\n+\"Project-Id-Version: libstdc++ 3.1.0\\n\"\n+\"POT-Creation-Date: 2001-07-31 08:49-0700\\n\"\n+\"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n\"\n+\"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n\"\n+\"Language-Team: LANGUAGE <LL@li.org>\\n\"\n+\"MIME-Version: 1.0\\n\"\n+\"Content-Type: text/plain; charset=ISO-8859-1\\n\"\n+\"Content-Transfer-Encoding: 8-bit\\n\"\n+\n+#: string_literals.cc:23\n+msgid \"please\"\n+msgstr \"\"\n+\n+#: string_literals.cc:24\n+msgid \"thank you\"\n+msgstr \"\"\n+\n+#: string_literals.cc:27\n+msgid \"true\"\n+msgstr \"\"\n+\n+#: string_literals.cc:28\n+msgid \"false\"\n+msgstr \"\""}, {"sha": "0be5f018aa33ceaa10ef4fe3964300c19497c825", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.89 2001/06/26 21:22:57 bkoz Exp $\n+## $Id: Makefile.am,v 1.90 2001/07/13 16:47:55 pme Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -64,10 +64,9 @@ INCLUDES = \\\n sources = \\\n \tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \\\n \tcomplex_io.cc functexcept.cc globals.cc ios.cc limitsMEMBERS.cc \\\n-\tlocale.cc locale-inst.cc localename.cc misc-inst.cc stdexcept.cc \\\n-\tstl-inst.cc string-inst.cc strstream.cc valarray-inst.cc \\\n-\twstring-inst.cc\n-\n+\tlocale.cc locale-inst.cc localename.cc messages_members.cc \\\n+\tmisc-inst.cc stdexcept.cc stl-inst.cc string-inst.cc strstream.cc \\\n+\tvalarray-inst.cc wstring-inst.cc\n \n VPATH = $(top_srcdir):$(top_srcdir)/src\n "}, {"sha": "89c002f89839938fc2c8a1c3b2b4ad58fb3aa5db", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -66,53 +66,76 @@ AR = @AR@\n AS = @AS@\n ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n BASIC_FILE_H = @BASIC_FILE_H@\n+CATALOGS = @CATALOGS@\n+CATOBJEXT = @CATOBJEXT@\n CC = @CC@\n CCODECVT_C = @CCODECVT_C@\n+CCODECVT_H = @CCODECVT_H@\n CLOCALE_H = @CLOCALE_H@\n+CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+DATADIRNAME = @DATADIRNAME@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n+GENCAT = @GENCAT@\n GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n+GMOFILES = @GMOFILES@\n+GMSGFMT = @GMSGFMT@\n+GT_NO = @GT_NO@\n+GT_YES = @GT_YES@\n+INCLUDE_LOCALE_H = @INCLUDE_LOCALE_H@\n+INSTOBJEXT = @INSTOBJEXT@\n+INTLDEPS = @INTLDEPS@\n+INTLLIBS = @INTLLIBS@\n+INTLOBJS = @INTLOBJS@\n LIBMATHOBJS = @LIBMATHOBJS@\n-LIBSTRINGOBJS = @LIBSTRINGOBJS@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n+MKINSTALLDIRS = @MKINSTALLDIRS@\n+MSGFMT = @MSGFMT@\n OBJDUMP = @OBJDUMP@\n OBJEXT = @OBJEXT@\n OPT_LDFLAGS = @OPT_LDFLAGS@\n OS_INC_SRCDIR = @OS_INC_SRCDIR@\n PACKAGE = @PACKAGE@\n+POFILES = @POFILES@\n+POSUB = @POSUB@\n RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n+USE_INCLUDED_LIBINTL = @USE_INCLUDED_LIBINTL@\n+USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n glibcpp_CXX = @glibcpp_CXX@\n+glibcpp_MOFILES = @glibcpp_MOFILES@\n glibcpp_basedir = @glibcpp_basedir@\n glibcpp_builddir = @glibcpp_builddir@\n+glibcpp_localedir = @glibcpp_localedir@\n glibcpp_prefixdir = @glibcpp_prefixdir@\n glibcpp_srcdir = @glibcpp_srcdir@\n glibcpp_thread_h = @glibcpp_thread_h@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n+l = @l@\n libio_la = @libio_la@\n toplevel_srcdir = @toplevel_srcdir@\n \n@@ -151,7 +174,7 @@ TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n INCLUDES =  \t-nostdinc++ \t$(GLIBCPP_INCLUDES) \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\n \n \n-sources =  \tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \tcomplex_io.cc functexcept.cc globals.cc ios.cc limitsMEMBERS.cc \tlocale.cc locale-inst.cc localename.cc misc-inst.cc stdexcept.cc \tstl-inst.cc string-inst.cc strstream.cc valarray-inst.cc \twstring-inst.cc\n+sources =  \tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \tcomplex_io.cc functexcept.cc globals.cc ios.cc limitsMEMBERS.cc \tlocale.cc locale-inst.cc localename.cc messages_members.cc \tmisc-inst.cc stdexcept.cc stl-inst.cc string-inst.cc strstream.cc \tvalarray-inst.cc wstring-inst.cc\n \n \n VPATH = $(top_srcdir):$(top_srcdir)/src\n@@ -210,20 +233,20 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(\n # compilation driver.\n CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n-CONFIG_HEADER = ../config.h\n+CONFIG_HEADER = ../config.h ../config.h ../testsuite/testsuite_hooks.h\n CONFIG_CLEAN_FILES = \n LTLIBRARIES =  $(toolexeclib_LTLIBRARIES)\n \n \n-DEFS = @DEFS@ -I. -I$(srcdir) -I..\n+DEFS = @DEFS@ -I. -I$(srcdir) -I.. -I.. -I../testsuite\n CPPFLAGS = @CPPFLAGS@\n LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n libstdc___la_OBJECTS =  basic_file.lo bitset.lo c++locale.lo cmath.lo \\\n codecvt.lo complex_io.lo functexcept.lo globals.lo ios.lo \\\n-limitsMEMBERS.lo locale.lo locale-inst.lo localename.lo misc-inst.lo \\\n-stdexcept.lo stl-inst.lo string-inst.lo strstream.lo valarray-inst.lo \\\n-wstring-inst.lo\n+limitsMEMBERS.lo locale.lo locale-inst.lo localename.lo \\\n+messages_members.lo misc-inst.lo stdexcept.lo stl-inst.lo \\\n+string-inst.lo strstream.lo valarray-inst.lo wstring-inst.lo\n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)"}, {"sha": "3a798fc5182dd3fe495cb31fafdf8ea3d002f728", "filename": "libstdc++-v3/src/codecvt.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -29,12 +29,12 @@\n \n #include <bits/std_locale.h>\n \n-namespace std {\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+namespace std \n+{\n+#ifdef _GLIBCPP_USE___ENC_TRAITS\n   // Definitions for static const data members of __enc_traits.\n   const int __enc_traits::_S_max_size;\n-#endif /* _GLIBCPP_USE_WCHAR_T */\n+#endif \n \n   codecvt<char, char, mbstate_t>::\n   codecvt(size_t __refs)\n@@ -199,7 +199,6 @@ namespace std {\n   do_max_length() const throw()\n   { return 1; }\n #endif //  _GLIBCPP_USE_WCHAR_T\n-\n } // namespace std\n \n "}, {"sha": "16af2c686ec65516424bd989a449e8e0b7da9ef0", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -1058,11 +1058,6 @@ namespace std\n \t\t\t\t\t\t   size_t __refs)\n   : moneypunct<char, true>(__refs) { }\n   \n-  template<>\n-  messages_byname<char>::\n-  messages_byname(const char* /*__s*/, size_t __refs)\n-  : messages<char>(__refs) { }\n-\n #ifdef _GLIBCPP_USE_WCHAR_T  \n   ctype<wchar_t>::__wmask_type\n   ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const\n@@ -1255,11 +1250,5 @@ namespace std\n   collate_byname<wchar_t>::\n   collate_byname(const char* /*__s*/, size_t __refs)\n   : collate<wchar_t> (__refs) { }\n-  \n-  template<>\n-  messages_byname<wchar_t>::\n-  messages_byname(const char* /*__s*/, size_t __refs)\n-  : messages<wchar_t> (__refs) { }\n #endif //  _GLIBCPP_USE_WCHAR_T\n } // namespace std\n-"}, {"sha": "993d868ce02296ee57cb1c6ccdfbb04f110cae72", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -41,13 +41,12 @@ namespace std\n       if (*it)\n \t(*it)->_M_remove_reference();\n     delete _M_facets;\n-    locale::facet::_S_destroy_c_locale(_M_c_locale);\n   }\n \n   // Clone existing _Impl object.\n   locale::_Impl::\n   _Impl(const _Impl& __imp, size_t __refs)\n-  : _M_references(__refs), _M_facets(0), _M_c_locale(0) // XXX\n+  : _M_references(__refs), _M_facets(0) // XXX\n   {\n     try\n       {  _M_facets = new __vec_facet(*(__imp._M_facets)); }\n@@ -73,10 +72,9 @@ namespace std\n   {\n     // Initialize the underlying locale model, which also checks to\n     // see if the given name is valid.\n+    __c_locale __cloc = NULL;\n     if (__str != \"C\" && __str != \"POSIX\")\n-      locale::facet::_S_create_c_locale(_M_c_locale, __str.c_str());\n-    else\n-      _M_c_locale = NULL;\n+      locale::facet::_S_create_c_locale(__cloc, __str.c_str());\n \n     // Allocate facet container.\n     try\n@@ -92,36 +90,37 @@ namespace std\n       _M_names[i] = __str;\n \n     // Construct all standard facets and add them to _M_facets.\n-    // XXX Eventually, all should use __c_locale ctor like numpunct\n+    // XXX Eventually, all should use __clocale ctor like numpunct\n     _M_init_facet(new std::collate<char>);\n     _M_init_facet(new std::ctype<char>);\n     _M_init_facet(new codecvt<char, char, mbstate_t>);\n-    _M_init_facet(new moneypunct<char, false>(_M_c_locale));\n+    _M_init_facet(new moneypunct<char, false>(__cloc));\n     _M_init_facet(new moneypunct<char,true >);\n     _M_init_facet(new money_get<char>);\n     _M_init_facet(new money_put<char>);\n-    _M_init_facet(new numpunct<char>(_M_c_locale));\n+    _M_init_facet(new numpunct<char>(__cloc));\n     _M_init_facet(new num_get<char>);\n     _M_init_facet(new num_put<char>);\n     _M_init_facet(new time_get<char>);\n     _M_init_facet(new time_put<char>);\n-    _M_init_facet(new std::messages<char>);\n+    _M_init_facet(new std::messages<char>(__cloc, __str.c_str()));\n     \n #ifdef  _GLIBCPP_USE_WCHAR_T\n     _M_init_facet(new std::collate<wchar_t>);\n     _M_init_facet(new std::ctype<wchar_t>);\n     _M_init_facet(new codecvt<wchar_t, char, mbstate_t>);\n-    _M_init_facet(new moneypunct<wchar_t, false>(_M_c_locale));\n+    _M_init_facet(new moneypunct<wchar_t, false>(__cloc));\n     _M_init_facet(new moneypunct<wchar_t,true >);\n     _M_init_facet(new money_get<wchar_t>);\n     _M_init_facet(new money_put<wchar_t>);\n-    _M_init_facet(new numpunct<wchar_t>(_M_c_locale));\n+    _M_init_facet(new numpunct<wchar_t>(__cloc));\n     _M_init_facet(new num_get<wchar_t>);\n     _M_init_facet(new num_put<wchar_t>);\n     _M_init_facet(new time_get<wchar_t>);\n     _M_init_facet(new time_put<wchar_t>);\n-    _M_init_facet(new std::messages<wchar_t>);\n+    _M_init_facet(new std::messages<wchar_t>(__cloc, __str.c_str()));\n #endif\t  \n+    locale::facet::_S_destroy_c_locale(__cloc);\n   }\n   \n   void"}, {"sha": "2a135f67df111001ac87ff9319eab67c9ccb3c42", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_unicode_char.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_char.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -1,6 +1,6 @@\n // 2000-08-22 Benjamin Kosnik <bkoz@cygnus.com>\n \n-// Copyright (C) 2000 Free Software Foundation\n+// Copyright (C) 2000, 2001 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,7 @@\n \n using namespace std;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCPP_USE___ENC_TRAITS\n \n /*\n > how do I check that these conversions are correct? \n@@ -226,14 +226,14 @@ void test02()\n   delete [] i_arr;\n }\n \n-#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n+#endif // _GLIBCPP_USE___ENC_TRAITS\n \n int main ()\n {\n-#if _GLIBCPP_USE_WCHAR_T\n+#if _GLIBCPP_USE___ENC_TRAITS\n   test01();\n   test02();\n-#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n+#endif \n \n   return 0;\n }"}, {"sha": "df4944f8fea6dfc82583ba2ce8f089160bde1701", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_unicode_wchar_t.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_wchar_t.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -1,6 +1,6 @@\n // 2000-08-23 Benjamin Kosnik <bkoz@cygnus.com>\n \n-// Copyright (C) 2000 Free Software Foundation\n+// Copyright (C) 2000, 2001 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,7 @@\n \n using namespace std;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCPP_USE___ENC_TRAITS\n \n void\n initialize_state(__enc_traits& state)\n@@ -120,13 +120,14 @@ void test01()\n   delete [] e_arr;\n   delete [] i_arr;\n }\n-#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n+#endif // _GLIBCPP_USE___ENC_TRAITS\n \n int main ()\n {\n-#if _GLIBCPP_USE_WCHAR_T\n+#if _GLIBCPP_USE___ENC_TRAITS\n   test01();\n-#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n+#endif \n \n   return 0;\n }\n+"}, {"sha": "d5d7b843c20aa79740225919462600c2b7083a0d", "filename": "libstdc++-v3/testsuite/22_locale/ctor_copy_dtor.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -33,7 +33,7 @@ void test00()\n   std::locale loc(\"C\");\n }\n \n-#if _GLIBCPP_USE_WCHAR_T\n+#if _GLIBCPP_USE___ENC_TRAITS\n typedef std::codecvt<char, char, std::mbstate_t> \t      c_codecvt;\n typedef std::codecvt_byname<char, char, std::mbstate_t>       c_codecvt_byname;\n typedef std::codecvt<wchar_t, char, std::mbstate_t>\t      w_codecvt;\n@@ -237,13 +237,13 @@ void test01()\n     VERIFY (loc15 != loc09);  \n   }\n }\n-#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n+#endif // _GLIBCPP_USE___ENC_TRAITS\n \n int main ()\n {\n   test00();\n \n-#if _GLIBCPP_USE_WCHAR_T\n+#if _GLIBCPP_USE___ENC_TRAITS\n   test01();\n #endif \n "}, {"sha": "176c2b272e9dad30fa9b0e51ef009069c4814a9b", "filename": "libstdc++-v3/testsuite/22_locale/messages.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,54 @@\n+// 2001-07-17  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.7 The message retrieval category\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::messages<char> test_type;\n+  typedef std::locale::facet base_type1;\n+  typedef std::messages_base base_type2;\n+  const test_type& obj = std::use_facet<test_type>(std::locale()); \n+  const base_type1* base1 = &obj;\n+  const base_type2* base2 = &obj;\n+\n+  // Check for required typedefs\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n+}\n+\n+// Should be able to instantiate this for other types besides char, wchar_t\n+class gnu_messages: public std::messages<unsigned char> \n+{ };\n+\n+void test02()\n+{ \n+  gnu_messages facet01;\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "1f5782cb83553bd50c9a0042d16b773252c31352", "filename": "libstdc++-v3/testsuite/22_locale/messages_byname.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,82 @@\n+// 2001-07-17 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.7.2 Template class messages_byname\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// XXX This test is not working for non-glibc locale models.\n+// { dg-do run { xfail *-*-* } }\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef std::messages<char>::catalog catalog;\n+  typedef std::messages<char>::string_type string_type;\n+\n+  bool test = true;\n+  string str;\n+  // This is exported through RUNTESTFLAGS in testsuite/Makefile.am.\n+  const char* dir = LOCALEDIR;\n+  locale loc_c = locale::classic();\n+\n+  locale loc_byname(locale::classic(), new messages_byname<char>(\"de_DE\"));\n+  str = loc_byname.name();\n+\n+  locale loc_de(\"de_DE\");\n+  str = loc_de.name();\n+\n+  VERIFY( loc_de != loc_byname );\n+\n+  // cache the messages facets\n+  const messages<char>& mssg_byname = use_facet<messages<char> >(loc_byname); \n+  const messages<char>& mssg_de = use_facet<messages<char> >(loc_de); \n+\n+  // catalog open(const string&, const locale&) const;\n+  // string_type get(catalog, int, int, const string_type& ) const; \n+  // void close(catalog) const;\n+\n+  // Check German (de_DE) locale.\n+  catalog cat_de = mssg_de.open(\"libstdc++\", loc_c, dir);\n+  string s01 = mssg_de.get(cat_de, 0, 0, \"please\");\n+  string s02 = mssg_de.get(cat_de, 0, 0, \"thank you\");\n+  VERIFY ( s01 == \"bitte\" );\n+  VERIFY ( s02 == \"danke\" );\n+  mssg_de.close(cat_de);\n+\n+  // Check byname locale.\n+  catalog cat_byname = mssg_byname.open(\"libstdc++\", loc_c, dir);\n+  string s03 = mssg_byname.get(cat_de, 0, 0, \"please\");\n+  string s04 = mssg_byname.get(cat_de, 0, 0, \"thank you\");\n+  VERIFY ( s03 == \"bitte\" );\n+  VERIFY ( s04 == \"danke\" );\n+  mssg_byname.close(cat_byname);\n+\n+  VERIFY ( s01 == s03 );\n+  VERIFY ( s02 == s04 );\n+}\n+\n+int main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "bb34794c78d50ed14b24675608cfb8a8e63c3213", "filename": "libstdc++-v3/testsuite/22_locale/messages_char_members.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_char_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_char_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_char_members.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -0,0 +1,90 @@\n+// 2001-07-17 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.7.1.1 messages members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// XXX This test is not working for non-glibc locale models.\n+// { dg-do run { xfail *-*-* } }\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef std::messages<char>::catalog catalog;\n+  typedef std::messages<char>::string_type string_type;\n+\n+  bool test = true;\n+  // This is exported through RUNTESTFLAGS in testsuite/Makefile.am.\n+  const char* dir = LOCALEDIR;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_us(\"en_US\");\n+  locale loc_fr(\"fr_FR\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_us != loc_fr );\n+  VERIFY( loc_us != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the messages facets\n+  const messages<char>& mssg_c = use_facet<messages<char> >(loc_c); \n+  const messages<char>& mssg_us = use_facet<messages<char> >(loc_us); \n+  const messages<char>& mssg_fr = use_facet<messages<char> >(loc_fr); \n+  const messages<char>& mssg_de = use_facet<messages<char> >(loc_de); \n+\n+  // catalog open(const string&, const locale&) const;\n+  // string_type get(catalog, int, int, const string_type& ) const; \n+  // void close(catalog) const;\n+\n+  // Check German (de_DE) locale.\n+  catalog cat_de = mssg_de.open(\"libstdc++\", loc_c, dir);\n+  string s01 = mssg_de.get(cat_de, 0, 0, \"please\");\n+  string s02 = mssg_de.get(cat_de, 0, 0, \"thank you\");\n+  VERIFY ( s01 == \"bitte\" );\n+  VERIFY ( s02 == \"danke\" );\n+  mssg_de.close(cat_de);\n+\n+  // Check French (fr_FR) locale.\n+  catalog cat_fr = mssg_fr.open(\"libstdc++\", loc_c, dir);\n+  s01 = mssg_fr.get(cat_fr, 0, 0, \"please\");\n+  s02 = mssg_fr.get(cat_fr, 0, 0, \"thank you\");\n+  VERIFY ( s01 == \"s'il vous pla\ufffdt\" );\n+  VERIFY ( s02 == \"merci\" );\n+  mssg_fr.close(cat_fr);\n+\n+  // Check US (en_US) locale.\n+  catalog cat_us = mssg_fr.open(\"libstdc++\", loc_c, dir);\n+  s01 = mssg_us.get(cat_us, 0, 0, \"please\");\n+  s02 = mssg_us.get(cat_us, 0, 0, \"thank you\");\n+  VERIFY ( s01 == \"please\" );\n+  VERIFY ( s02 == \"thank you\" );\n+  mssg_us.close(cat_us);\n+\n+ }\n+\n+int main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "7a420db5a01a7e7a3bdd046cdb7d1b66bee91286", "filename": "libstdc++-v3/testsuite/22_locale/numpunct.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -18,7 +18,7 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-// 22.2.3 the numeric punctuation facet\n+// 22.2.3  The numeric punctuation facet\n \n #include <locale>\n "}, {"sha": "e562f76fe814c9bda0ecd8bd6c85fd91d9fbdd60", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_char_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_char_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_char_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_char_members.cc?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -1,4 +1,4 @@\n-// 2001-01-17 bkoz\n+// 2001-01-17 Benjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2001 Free Software Foundation\n //"}, {"sha": "1d2f4aab0bb93e4614f69d96059df23329cd2118", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 72, "deletions": 14, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -67,60 +67,83 @@ AR = @AR@\n AS = @AS@\n ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n BASIC_FILE_H = @BASIC_FILE_H@\n+CATALOGS = @CATALOGS@\n+CATOBJEXT = @CATOBJEXT@\n CC = @CC@\n CCODECVT_C = @CCODECVT_C@\n+CCODECVT_H = @CCODECVT_H@\n CLOCALE_H = @CLOCALE_H@\n+CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+DATADIRNAME = @DATADIRNAME@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n+GENCAT = @GENCAT@\n GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n+GMOFILES = @GMOFILES@\n+GMSGFMT = @GMSGFMT@\n+GT_NO = @GT_NO@\n+GT_YES = @GT_YES@\n+INCLUDE_LOCALE_H = @INCLUDE_LOCALE_H@\n+INSTOBJEXT = @INSTOBJEXT@\n+INTLDEPS = @INTLDEPS@\n+INTLLIBS = @INTLLIBS@\n+INTLOBJS = @INTLOBJS@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n LIBMATHOBJS = @LIBMATHOBJS@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n-LIBSTRINGOBJS = @LIBSTRINGOBJS@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n+MKINSTALLDIRS = @MKINSTALLDIRS@\n+MSGFMT = @MSGFMT@\n OBJDUMP = @OBJDUMP@\n OBJEXT = @OBJEXT@\n OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n OPT_LDFLAGS = @OPT_LDFLAGS@\n OS_INC_SRCDIR = @OS_INC_SRCDIR@\n PACKAGE = @PACKAGE@\n+POFILES = @POFILES@\n+POSUB = @POSUB@\n RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n+USE_INCLUDED_LIBINTL = @USE_INCLUDED_LIBINTL@\n+USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n glibcpp_CXX = @glibcpp_CXX@\n+glibcpp_MOFILES = @glibcpp_MOFILES@\n glibcpp_basedir = @glibcpp_basedir@\n glibcpp_builddir = @glibcpp_builddir@\n+glibcpp_localedir = @glibcpp_localedir@\n glibcpp_prefixdir = @glibcpp_prefixdir@\n glibcpp_srcdir = @glibcpp_srcdir@\n glibcpp_thread_h = @glibcpp_thread_h@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n+l = @l@\n libio_la = @libio_la@\n toplevel_srcdir = @toplevel_srcdir@\n \n@@ -136,9 +159,10 @@ RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \t       echo @gl\n \n RUNTESTFLAGS = \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n-CONFIG_HEADER = ../config.h\n+CONFIG_HEADER = ../config.h ../config.h testsuite_hooks.h\n CONFIG_CLEAN_FILES = \n-DIST_COMMON =  README Makefile.am Makefile.in\n+DIST_COMMON =  README ./stamp-h3.in Makefile.am Makefile.in \\\n+testsuite_hooks.h.in\n \n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n@@ -154,6 +178,34 @@ Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status\n \tcd $(top_builddir) \\\n \t  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status\n \n+\n+testsuite_hooks.h: stamp-h3\n+\t@if test ! -f $@; then \\\n+\t\trm -f stamp-h3; \\\n+\t\t$(MAKE) stamp-h3; \\\n+\telse :; fi\n+stamp-h3: $(srcdir)/testsuite_hooks.h.in $(top_builddir)/config.status\n+\tcd $(top_builddir) \\\n+\t  && CONFIG_FILES= CONFIG_HEADERS=testsuite/testsuite_hooks.h \\\n+\t     $(SHELL) ./config.status\n+\t@echo timestamp > stamp-h3 2> /dev/null\n+$(srcdir)/testsuite_hooks.h.in: @MAINTAINER_MODE_TRUE@$(srcdir)/stamp-h3.in\n+\t@if test ! -f $@; then \\\n+\t\trm -f $(srcdir)/stamp-h3.in; \\\n+\t\t$(MAKE) $(srcdir)/stamp-h3.in; \\\n+\telse :; fi\n+$(srcdir)/stamp-h3.in: $(top_srcdir)/configure.in $(ACLOCAL_M4) \n+\tcd $(top_srcdir) && $(AUTOHEADER)\n+\t@echo timestamp > $(srcdir)/stamp-h3.in 2> /dev/null\n+\n+mostlyclean-hdr:\n+\n+clean-hdr:\n+\n+distclean-hdr:\n+\t-rm -f testsuite_hooks.h\n+\n+maintainer-clean-hdr:\n tags: TAGS\n TAGS:\n \n@@ -218,6 +270,9 @@ installcheck-am:\n installcheck: installcheck-am\n install-info-am: \n install-info: install-info-am\n+all-recursive-am: testsuite_hooks.h\n+\t$(MAKE) $(AM_MAKEFLAGS) all-recursive\n+\n install-exec-am:\n install-exec: install-exec-am\n \n@@ -229,7 +284,7 @@ install-am: all-am\n install: install-am\n uninstall-am:\n uninstall: uninstall-am\n-all-am: Makefile\n+all-am: Makefile testsuite_hooks.h\n all-redirect: all-am\n install-strip:\n \t$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install\n@@ -245,31 +300,34 @@ distclean-generic:\n \t-rm -f config.cache config.log stamp-h stamp-h[0-9]*\n \n maintainer-clean-generic:\n-mostlyclean-am:  mostlyclean-generic\n+mostlyclean-am:  mostlyclean-hdr mostlyclean-generic\n \n mostlyclean: mostlyclean-am\n \n-clean-am:  clean-generic mostlyclean-am\n+clean-am:  clean-hdr clean-generic mostlyclean-am\n \n clean: clean-am\n \n-distclean-am:  distclean-generic clean-am\n+distclean-am:  distclean-hdr distclean-generic clean-am\n \t-rm -f libtool\n \n distclean: distclean-am\n \n-maintainer-clean-am:  maintainer-clean-generic distclean-am\n+maintainer-clean-am:  maintainer-clean-hdr maintainer-clean-generic \\\n+\t\tdistclean-am\n \t@echo \"This command is intended for maintainers to use;\"\n \t@echo \"it deletes files that may require special tools to rebuild.\"\n \n maintainer-clean: maintainer-clean-am\n \n-.PHONY: tags distdir check-DEJAGNU info-am info dvi-am dvi check \\\n-check-am installcheck-am installcheck install-info-am install-info \\\n-install-exec-am install-exec install-data-am install-data install-am \\\n-install uninstall-am uninstall all-redirect all-am all installdirs \\\n-mostlyclean-generic distclean-generic clean-generic \\\n-maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n+.PHONY: mostlyclean-hdr distclean-hdr clean-hdr maintainer-clean-hdr \\\n+tags distdir check-DEJAGNU info-am info dvi-am dvi check check-am \\\n+installcheck-am installcheck install-info-am install-info \\\n+all-recursive-am install-exec-am install-exec install-data-am \\\n+install-data install-am install uninstall-am uninstall all-redirect \\\n+all-am all installdirs mostlyclean-generic distclean-generic \\\n+clean-generic maintainer-clean-generic clean mostlyclean distclean \\\n+maintainer-clean\n \n \n # Tell versions [3.59,3.63) of GNU make to not export all variables."}, {"sha": "bb7b8cb6c4c17c352e90d94581c5828244f2d672", "filename": "libstdc++-v3/testsuite/lib/libstdc++-v3-dg.exp", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -156,15 +156,3 @@ proc libstdc++-v3_target_compile { source dest type options } {\n     return [target_compile $source $dest $type $options]\n }\n \n-# On IRIX 6, we have to set variables akin to LD_LIBRARY_PATH, but\n-# called LD_LIBRARYN32_PATH (for the N32 ABI) and LD_LIBRARY64_PATH\n-# (for the 64-bit ABI).  The right way to do this would be to modify\n-# unix.exp -- but that's not an option since it's part of DejaGNU\n-# proper, so we do it here, by trickery.  We really only need to do \n-# this on IRIX, but it shouldn't hurt to do it anywhere else.\n-proc libstdc++-v3_set_ld_library_path { name element op } {\n-  setenv LD_LIBRARYN32_PATH [getenv LD_LIBRARY_PATH]\n-  setenv LD_LIBRARY64_PATH [getenv LD_LIBRARY_PATH]\n-}\n-\n-trace variable env(LD_LIBRARY_PATH) w libstdc++-v3_set_ld_library_path"}, {"sha": "1843a6dbb4619697fcd8a8fab5b5e69c52115dea", "filename": "libstdc++-v3/testsuite_flags.in", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33590f13b26b9d79f41ba5c7dc9dea282daaa8bb/libstdc%2B%2B-v3%2Ftestsuite_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite_flags.in?ref=33590f13b26b9d79f41ba5c7dc9dea282daaa8bb", "patch": "@@ -47,7 +47,8 @@ case ${query} in\n       echo ${CXX}\n       ;;\n     --cxxflags)\n-      CXXFLAGS=\" -ggdb3 -DDEBUG_ASSERT @SECTION_FLAGS@ @SECTION_LDFLAGS@\"\n+      CXXFLAGS=' -ggdb3 @SECTION_FLAGS@ @SECTION_LDFLAGS@ \n+\t\t -DDEBUG_ASSERT  -DLOCALEDIR=\"@glibcpp_localedir@\" '\n       echo ${CXXFLAGS}\n       ;;\n     *)\n@@ -56,5 +57,3 @@ case ${query} in\n esac\n \n exit 0\n-\n-"}]}