{"sha": "4c07e591925bb02e71a499f1cf780ce63985dba0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMwN2U1OTE5MjViYjAyZTcxYTQ5OWYxY2Y3ODBjZTYzOTg1ZGJhMA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-04-26T21:50:18Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-05-07T19:00:21Z"}, "message": "Don't over-allocate switch default range object.\n\nWe were always allocating the 255 max ranges for the default condition.\nInstead, use int_range_max to build the default range, then allocate and\nstore only what is needed.\n\n\t* gimple-range-edge.cc (outgoing_range::calc_switch_ranges): Compute\n\tdefault range into a temp and allocate only what is needed.", "tree": {"sha": "c021623fdd58d360fd6d3ced4367570cef66717f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c021623fdd58d360fd6d3ced4367570cef66717f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c07e591925bb02e71a499f1cf780ce63985dba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c07e591925bb02e71a499f1cf780ce63985dba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c07e591925bb02e71a499f1cf780ce63985dba0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c07e591925bb02e71a499f1cf780ce63985dba0/comments", "author": null, "committer": null, "parents": [{"sha": "156054e873194004161dab2f8d43dbccc5cd8f36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/156054e873194004161dab2f8d43dbccc5cd8f36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/156054e873194004161dab2f8d43dbccc5cd8f36"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "4d4cb97bbec15fdc8e74b9d11632677d1932ecf4", "filename": "gcc/gimple-range-edge.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c07e591925bb02e71a499f1cf780ce63985dba0/gcc%2Fgimple-range-edge.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c07e591925bb02e71a499f1cf780ce63985dba0/gcc%2Fgimple-range-edge.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-edge.cc?ref=4c07e591925bb02e71a499f1cf780ce63985dba0", "patch": "@@ -112,8 +112,7 @@ outgoing_range::calc_switch_ranges (gswitch *sw)\n   //\n   // Allocate an int_range_max for the default range case, start with\n   // varying and intersect each other case from it.\n-  irange *default_range = m_range_allocator.allocate (255);\n-  default_range->set_varying (type);\n+  int_range_max default_range (type);\n \n   for (x = 1; x < lim; x++)\n     {\n@@ -132,7 +131,7 @@ outgoing_range::calc_switch_ranges (gswitch *sw)\n       int_range_max def_range (low, high);\n       range_cast (def_range, type);\n       def_range.invert ();\n-      default_range->intersect (def_range);\n+      default_range.intersect (def_range);\n \n       // Create/union this case with anything on else on the edge.\n       int_range_max case_range (low, high);\n@@ -156,7 +155,8 @@ outgoing_range::calc_switch_ranges (gswitch *sw)\n   irange *&slot = m_edge_table->get_or_insert (default_edge, &existed);\n   // This should be the first call into this switch.\n   gcc_checking_assert (!existed);\n-  slot = default_range;\n+  irange *dr = m_range_allocator.allocate (default_range);\n+  slot = dr;\n }\n \n "}]}