{"sha": "d4c89139666d87afd6544277c7e363716e3d7d9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRjODkxMzk2NjZkODdhZmQ2NTQ0Mjc3YzdlMzYzNzE2ZTNkN2Q5ZQ==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1993-09-13T06:01:37Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1993-09-13T06:01:37Z"}, "message": "(expand_expr, ARRAY_REF):  Coerce low_bound to sizetype.\n\nFrom-SVN: r5313", "tree": {"sha": "3228495a06f49761a4990498649e3983a717d15f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3228495a06f49761a4990498649e3983a717d15f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4c89139666d87afd6544277c7e363716e3d7d9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4c89139666d87afd6544277c7e363716e3d7d9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4c89139666d87afd6544277c7e363716e3d7d9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4c89139666d87afd6544277c7e363716e3d7d9e/comments", "author": null, "committer": null, "parents": [{"sha": "59b22f6465f0e7bee50b3dc18e97c111a5aa521e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59b22f6465f0e7bee50b3dc18e97c111a5aa521e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59b22f6465f0e7bee50b3dc18e97c111a5aa521e"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "85b2555eec10f55e6aa550dcff4e9d568f3ed23a", "filename": "gcc/expr.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4c89139666d87afd6544277c7e363716e3d7d9e/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4c89139666d87afd6544277c7e363716e3d7d9e/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d4c89139666d87afd6544277c7e363716e3d7d9e", "patch": "@@ -3889,9 +3889,20 @@ expand_expr (exp, target, tmode, modifier)\n \ttree index_type = TREE_TYPE (index);\n \tint i;\n \n-\t/* Optimize the special-case of a zero lower bound.  */\n+\t/* Optimize the special-case of a zero lower bound.\n+\n+\t   We convert the low_bound to sizetype to avoid some problems\n+\t   with constant folding.  (E.g. suppose the lower bound is 1,\n+\t   and its mode is QI.  Without the conversion,  (ARRAY\n+\t   +(INDEX-(unsigned char)1)) becomes ((ARRAY+(-(unsigned char)1))\n+\t   +INDEX), which becomes (ARRAY+255+INDEX).  Oops!)\n+\n+\t   But sizetype isn't quite right either (especially if\n+\t   the lowbound is negative).  FIXME */\n+\n \tif (! integer_zerop (low_bound))\n-\t  index = fold (build (MINUS_EXPR, index_type, index, low_bound));\n+\t  index = fold (build (MINUS_EXPR, index_type, index,\n+\t\t\t       convert (sizetype, low_bound)));\n \n \tif (TREE_CODE (index) != INTEGER_CST\n \t    || TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)"}]}