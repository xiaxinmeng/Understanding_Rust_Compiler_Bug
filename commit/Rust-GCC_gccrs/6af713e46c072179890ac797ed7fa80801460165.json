{"sha": "6af713e46c072179890ac797ed7fa80801460165", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFmNzEzZTQ2YzA3MjE3OTg5MGFjNzk3ZWQ3ZmE4MDgwMTQ2MDE2NQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2004-12-14T22:35:48Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2004-12-14T22:35:48Z"}, "message": "pa.h (REGNO_OK_FOR_INDEX_P, [...]): Check register number and that reg_renumber is nonzero before using it.\n\n\t* pa.h (REGNO_OK_FOR_INDEX_P, REGNO_OK_FOR_BASE_P, REGNO_OK_FOR_FP_P):\n\tCheck register number and that reg_renumber is nonzero before using it.\n\nFrom-SVN: r92164", "tree": {"sha": "3931bccc755e947f5a01f68eac4ca129d8135689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3931bccc755e947f5a01f68eac4ca129d8135689"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6af713e46c072179890ac797ed7fa80801460165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af713e46c072179890ac797ed7fa80801460165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6af713e46c072179890ac797ed7fa80801460165", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af713e46c072179890ac797ed7fa80801460165/comments", "author": null, "committer": null, "parents": [{"sha": "cf77e601e577e8e082487c08f72e0f4e4925f6af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf77e601e577e8e082487c08f72e0f4e4925f6af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf77e601e577e8e082487c08f72e0f4e4925f6af"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "93bb229bfc553d29db09201ed256741fe1ec50fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af713e46c072179890ac797ed7fa80801460165/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af713e46c072179890ac797ed7fa80801460165/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6af713e46c072179890ac797ed7fa80801460165", "patch": "@@ -1,3 +1,8 @@\n+2004-12-14  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.h (REGNO_OK_FOR_INDEX_P, REGNO_OK_FOR_BASE_P, REGNO_OK_FOR_FP_P):\n+\tCheck register number and that reg_renumber is nonzero before using it.\n+\n 2004-12-14  Steve Ellcey  <sje@cup.hp.com>\n \n \t* doc/invoke.texi (IA-64 options): Add existing options that"}, {"sha": "0ed47149f4414e4a12b369e72107be3fcb892473", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af713e46c072179890ac797ed7fa80801460165/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af713e46c072179890ac797ed7fa80801460165/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=6af713e46c072179890ac797ed7fa80801460165", "patch": "@@ -1172,18 +1172,27 @@ extern int may_call_alloca;\n \n /* Macros to check register numbers against specific register classes.  */\n \n-/* These assume that REGNO is a hard or pseudo reg number.\n-   They give nonzero only if REGNO is a hard reg of the suitable class\n+/* The following macros assume that X is a hard or pseudo reg number.\n+   They give nonzero only if X is a hard reg of the suitable class\n    or a pseudo reg currently allocated to a suitable hard reg.\n    Since they use reg_renumber, they are safe only once reg_renumber\n    has been allocated, which happens in local-alloc.c.  */\n \n-#define REGNO_OK_FOR_INDEX_P(REGNO) \\\n-  ((REGNO) && ((REGNO) < 32 || (unsigned) reg_renumber[REGNO] < 32))\n-#define REGNO_OK_FOR_BASE_P(REGNO)  \\\n-  ((REGNO) && ((REGNO) < 32 || (unsigned) reg_renumber[REGNO] < 32))\n-#define REGNO_OK_FOR_FP_P(REGNO) \\\n-  (FP_REGNO_P (REGNO) || FP_REGNO_P (reg_renumber[REGNO]))\n+#define REGNO_OK_FOR_INDEX_P(X) \\\n+  ((X) && ((X) < 32\t\t\t\t\t\t\t\\\n+   || (X >= FIRST_PSEUDO_REGISTER\t\t\t\t\t\\\n+       && reg_renumber\t\t\t\t\t\t\t\\\n+       && (unsigned) reg_renumber[X] < 32)))\n+#define REGNO_OK_FOR_BASE_P(X) \\\n+  ((X) && ((X) < 32\t\t\t\t\t\t\t\\\n+   || (X >= FIRST_PSEUDO_REGISTER\t\t\t\t\t\\\n+       && reg_renumber\t\t\t\t\t\t\t\\\n+       && (unsigned) reg_renumber[X] < 32)))\n+#define REGNO_OK_FOR_FP_P(X) \\\n+  (FP_REGNO_P (X)\t\t\t\t\t\t\t\\\n+   || (X >= FIRST_PSEUDO_REGISTER\t\t\t\t\t\\\n+       && reg_renumber\t\t\t\t\t\t\t\\\n+       && FP_REGNO_P (reg_renumber[X])))\n \n /* Now macros that check whether X is a register and also,\n    strictly, whether it is in a specified class."}]}