{"sha": "91b90ead334deba8a963afbf1cb6947ca16bf2ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFiOTBlYWQzMzRkZWJhOGE5NjNhZmJmMWNiNjk0N2NhMTZiZjJmZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-10-17T18:29:32Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-10-17T18:29:32Z"}, "message": "c-parser.c (c_parser_for_statement): Move initialization of cond and incr before if.\n\n\t* c-parser.c (c_parser_for_statement): Move initialization of\n\tcond and incr before if.\n\nFrom-SVN: r165592", "tree": {"sha": "faba9202aefcd99a9119767fce634c2097cb144e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/faba9202aefcd99a9119767fce634c2097cb144e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91b90ead334deba8a963afbf1cb6947ca16bf2ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91b90ead334deba8a963afbf1cb6947ca16bf2ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91b90ead334deba8a963afbf1cb6947ca16bf2ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91b90ead334deba8a963afbf1cb6947ca16bf2ff/comments", "author": null, "committer": null, "parents": [{"sha": "efb7b456501344ef0670c15f35e8945906ef63bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb7b456501344ef0670c15f35e8945906ef63bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efb7b456501344ef0670c15f35e8945906ef63bb"}], "stats": {"total": 43, "additions": 18, "deletions": 25}, "files": [{"sha": "530eca6dc865bd577491e5efc0d3277ba70e10d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b90ead334deba8a963afbf1cb6947ca16bf2ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b90ead334deba8a963afbf1cb6947ca16bf2ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91b90ead334deba8a963afbf1cb6947ca16bf2ff", "patch": "@@ -1,11 +1,16 @@\n+2010-10-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* c-parser.c (c_parser_for_statement): Move initialization of\n+\tcond and incr before if.\n+\n 2010-10-17  Anatoly Sokolov  <aesok@post.ru>\n \n \t* target.def (preferred_output_reload_class): New hook.\n \t* doc/tm.texi.in (TARGET_PREFERRED_OUTPUT_RELOAD_CLASS): Document.\n \t* doc/tm.texi: Regenerate.\n \t* targhooks.c (default_preferred_output_reload_class): New function.\n \t* targhooks.h (default_preferred_output_reload_class): Declare.\n-\t* reload.c (find_dummy_reload): Change rclass argument type from \n+\t* reload.c (find_dummy_reload): Change rclass argument type from\n \tenum reg_class to reg_class_t. Change this_alternative array type\n \tfrom enum reg_class to reg_class_t.\n \tUse TARGET_PREFERRED_OUTPUT_RELOAD_CLASS target hook.\n@@ -17,15 +22,16 @@\n \t* recog.h (reg_fits_class_p): Update prototype.\n \n \t* config/i386/i386.h (PREFERRED_OUTPUT_RELOAD_CLASS): Remove.\n-\t* config/i386/i386-protos.h (ix86_preferred_output_reload_class): Remove.\n+\t* config/i386/i386-protos.h (ix86_preferred_output_reload_class):\n+\tRemove.\n \t* config/i386/i386.c (ix86_preferred_output_reload_class): Make\n \tstatic. Change regclass argument and result types from enum reg_class\n \tto reg_class_t.\n \t(TARGET_PREFERRED_OUTPUT_RELOAD_CLASS): Define.\n \n 2010-10-17  Iain Sandoe  <iains@gcc.gnu.org>\n \n-\t* c-parser.c (c_parser_objc_class_instance_variables): Update to use \n+\t* c-parser.c (c_parser_objc_class_instance_variables): Update to use\n \tvisibility enum, and handle @package.\n \n 2010-10-17  Nicola Pero  <nicola.pero@meta-innovation.com>\n@@ -44,7 +50,7 @@\n \n \t* cgraph.c (dump_cgraph_node): Dump same_comdat_group,\n \tonly_called_at_startup and only_called_at_exit.\n-\t(cgraph_propagate_frequency): Compute only_called_at_startup and \n+\t(cgraph_propagate_frequency): Compute only_called_at_startup and\n \tonly_called_at_exit.\n \t* cgraph.h (struct cgraph_node): New fileds only_called_at_startup and\n \tonly_called_at_exit.\n@@ -132,8 +138,7 @@\n \t* hooks.c (hook_void_gcc_optionsp): New.\n \t* hooks.h (hook_void_gcc_optionsp): Declare.\n \t* langhooks-def.h (lhd_init_options_struct): Remove.\n-\t(LANG_HOOKS_INIT_OPTIONS_STRUCT): Define to\n-\thook_void_gcc_optionsp.\n+\t(LANG_HOOKS_INIT_OPTIONS_STRUCT): Define to hook_void_gcc_optionsp.\n \t* langhooks.c (lhd_init_options_struct): Remove.\n \t* opts.c (init_options_struct): Also call\n \ttargetm.target_option.init_struct.\n@@ -147,8 +152,7 @@\n \tpdp11_option_init_struct.\n \t* config/rs6000/rs6000.c (rs6000_option_optimization): Replace by\n \trs6000_option_init_struct.  Use options structure pointer.\n-\t(TARGET_OPTION_OPTIMIZATION): Replace by\n-\tTARGET_OPTION_INIT_STRUCT.\n+\t(TARGET_OPTION_OPTIMIZATION): Replace by TARGET_OPTION_INIT_STRUCT.\n \t* config/s390/s390.c (s390_option_init_struct,\n \tTARGET_OPTION_INIT_STRUCT): New.\n \t(s390_option_optimization): Don't set\n@@ -158,8 +162,7 @@\n \t(sh_option_optimization): Don't set flag_finite_math_only here.\n \t* config/spu/spu.c (spu_option_optimization): Replace by\n \tspu_option_optimization.  Use options structure pointer.\n-\t(TARGET_OPTION_OPTIMIZATION): Replace by\n-\tTARGET_OPTION_INIT_STRUCT.\n+\t(TARGET_OPTION_OPTIMIZATION): Replace by TARGET_OPTION_INIT_STRUCT.\n \n 2010-10-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n@@ -197,8 +200,7 @@\n \n \t* config/rs6000/altivec.md (UNSPEC_VNMSUBFP): Delete.\n \t(altivec_vmaddfp): Rewrite to use FMA rtl if no fused\n-\tmultiply/add.  Rename combiner pattern, and add TARGET_FUSED_MADD\n-\ttest.\n+\tmultiply/add.  Rename combiner pattern, and add TARGET_FUSED_MADD test.\n \t(altivec_vmaddfp_1): Ditto.\n \t(altivec_vmaddfp_2): Ditto.\n \t(atlivec_mulv4sf3): Ditto.\n@@ -207,8 +209,7 @@\n \t(altivec_vnmsubfp_2): Ditto.\n \t(altivec_vnmsubfp_3): Delete.\n \n-\t* config/rs6000/rs6000.md (fmasf4): New insns for fma builtin\n-\tsupport.\n+\t* config/rs6000/rs6000.md (fmasf4): New insns for fma builtin support.\n \t(fmasf4_fpr): Ditto.\n \t(fmssf4_fpr): Ditto.\n \t(fnmasf4_fpr): Ditto.\n@@ -306,7 +307,7 @@\n \n 2010-10-14  Iain Sandoe  <iains@gcc.gnu.org>\n \n-\tmerge from FSF apple 'trunk' branch.\n+\tMerge from FSF apple 'trunk' branch.\n \t2006 Fariborz Jahanian <fjahanian@apple.com>\n \n \tRadars 4436866, 4505126, 4506903, 4517826"}, {"sha": "8338e9d32857eb3faf7aa3e8f4e33c0c6c2d7156", "filename": "gcc/c-parser.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b90ead334deba8a963afbf1cb6947ca16bf2ff/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b90ead334deba8a963afbf1cb6947ca16bf2ff/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=91b90ead334deba8a963afbf1cb6947ca16bf2ff", "patch": "@@ -4568,15 +4568,12 @@ c_parser_for_statement (c_parser *parser)\n   /* Open a compound statement in Objective-C as well, just in case this is\n      as foreach expression.  */\n   block = c_begin_compound_stmt (flag_isoc99 || c_dialect_objc ());\n+  cond = error_mark_node;\n+  incr = error_mark_node;\n   if (c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n     {\n       /* Parse the initialization declaration or expression.  */\n-      cond = error_mark_node;\n       object_expression = error_mark_node;\n-      /* Initializing incr should not be necessary, but it avoids\n-\t bogus warnings of uninitialized uses.  */\n-      incr = error_mark_node;\n-\n       if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n \t{\n \t  c_parser_consume_token (parser);\n@@ -4694,11 +4691,6 @@ c_parser_for_statement (c_parser *parser)\n \t}\n       c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, \"expected %<)%>\");\n     }\n-  else\n-    {\n-      cond = error_mark_node;\n-      incr = error_mark_node;\n-    }\n   save_break = c_break_label;\n   c_break_label = NULL_TREE;\n   save_cont = c_cont_label;"}]}