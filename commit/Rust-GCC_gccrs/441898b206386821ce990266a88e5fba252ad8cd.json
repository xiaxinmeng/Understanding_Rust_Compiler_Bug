{"sha": "441898b206386821ce990266a88e5fba252ad8cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQxODk4YjIwNjM4NjgyMWNlOTkwMjY2YTg4ZTVmYmEyNTJhZDhjZA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2015-05-09T15:40:05Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2015-05-09T15:40:05Z"}, "message": "re PR tree-optimization/64454 (optimize (x%5)%5)\n\n2015-05-09  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR tree-optimization/64454\ngcc/\n\t* tree-vrp.c (extract_range_from_binary_expr_1) <TRUNC_MOD_EXPR>:\n\tRewrite.\ngcc/testsuite/\n\t* gcc.dg/tree-ssa/vrp97.c: New file.\n\t* gcc.dg/vect/slp-perm-7.c: Update.\n\nFrom-SVN: r222970", "tree": {"sha": "b168c8463ea22d4e5289a1ea8089b0283d94942f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b168c8463ea22d4e5289a1ea8089b0283d94942f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/441898b206386821ce990266a88e5fba252ad8cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441898b206386821ce990266a88e5fba252ad8cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/441898b206386821ce990266a88e5fba252ad8cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441898b206386821ce990266a88e5fba252ad8cd/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a31765efbfaff2563c0af4459d43de4c4303eec8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a31765efbfaff2563c0af4459d43de4c4303eec8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a31765efbfaff2563c0af4459d43de4c4303eec8"}], "stats": {"total": 97, "additions": 81, "deletions": 16}, "files": [{"sha": "3a56037814da1b2005eebdb28019ee258a629012", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441898b206386821ce990266a88e5fba252ad8cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441898b206386821ce990266a88e5fba252ad8cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=441898b206386821ce990266a88e5fba252ad8cd", "patch": "@@ -1,3 +1,9 @@\n+2015-05-09  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/64454\n+\t* tree-vrp.c (extract_range_from_binary_expr_1) <TRUNC_MOD_EXPR>:\n+\tRewrite.\n+\n 2015-05-08  Jason Merrill  <jason@redhat.com>\n \n \t* bitmap.c, c/c-aux-info.c, cfg.c, cfghooks.c, cgraph.c,"}, {"sha": "53fd15206fc05b06f8264ee70258a9ba3c5eb82a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441898b206386821ce990266a88e5fba252ad8cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441898b206386821ce990266a88e5fba252ad8cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=441898b206386821ce990266a88e5fba252ad8cd", "patch": "@@ -1,3 +1,9 @@\n+2015-05-09  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/64454\n+\t* gcc.dg/tree-ssa/vrp97.c: New file.\n+\t* gcc.dg/vect/slp-perm-7.c: Update.\n+\n 2015-05-09  Andre Vehreschild  <vehre@gmx.de>\n \n \tPR fortran/65894"}, {"sha": "3805ca9f31f468db1df93fe560ce944a23dd481f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp97.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441898b206386821ce990266a88e5fba252ad8cd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp97.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441898b206386821ce990266a88e5fba252ad8cd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp97.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp97.c?ref=441898b206386821ce990266a88e5fba252ad8cd", "patch": "@@ -0,0 +1,19 @@\n+/* PR tree-optimization/64454 */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+\n+int f(int a, int b)\n+{\n+    if (a < -3 || a > 13) __builtin_unreachable();\n+    if (b < -6 || b > 9) __builtin_unreachable();\n+    int c = a % b;\n+    return c >= -3 && c <= 8;\n+}\n+\n+int g(int a, int b)\n+{\n+  int c = a % b;\n+  return c != -__INT_MAX__ - 1;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 1;\" 2 \"vrp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "9eff25e2f2771d2ecd9daa14f1155586a845f001", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441898b206386821ce990266a88e5fba252ad8cd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441898b206386821ce990266a88e5fba252ad8cd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-7.c?ref=441898b206386821ce990266a88e5fba252ad8cd", "patch": "@@ -70,7 +70,7 @@ int main (int argc, const char* argv[])\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target vect_perm } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\"  { target vect_perm } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_perm } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "c0b381df648a6d3bcbfbc95c9fe574d1dc0f8dbf", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 49, "deletions": 15, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441898b206386821ce990266a88e5fba252ad8cd/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441898b206386821ce990266a88e5fba252ad8cd/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=441898b206386821ce990266a88e5fba252ad8cd", "patch": "@@ -3196,26 +3196,60 @@ extract_range_from_binary_expr_1 (value_range_t *vr,\n     }\n   else if (code == TRUNC_MOD_EXPR)\n     {\n-      if (vr1.type != VR_RANGE\n-\t  || range_includes_zero_p (vr1.min, vr1.max) != 0\n-\t  || vrp_val_is_min (vr1.min))\n+      if (range_is_null (&vr1))\n \t{\n-\t  set_value_range_to_varying (vr);\n+\t  set_value_range_to_undefined (vr);\n \t  return;\n \t}\n+      /* ABS (A % B) < ABS (B) and either\n+\t 0 <= A % B <= A or A <= A % B <= 0.  */\n       type = VR_RANGE;\n-      /* Compute MAX <|vr1.min|, |vr1.max|> - 1.  */\n-      max = fold_unary_to_constant (ABS_EXPR, expr_type, vr1.min);\n-      if (tree_int_cst_lt (max, vr1.max))\n-\tmax = vr1.max;\n-      max = int_const_binop (MINUS_EXPR, max, build_int_cst (TREE_TYPE (max), 1));\n-      /* If the dividend is non-negative the modulus will be\n-\t non-negative as well.  */\n-      if (TYPE_UNSIGNED (expr_type)\n-\t  || value_range_nonnegative_p (&vr0))\n-\tmin = build_int_cst (TREE_TYPE (max), 0);\n+      signop sgn = TYPE_SIGN (expr_type);\n+      unsigned int prec = TYPE_PRECISION (expr_type);\n+      wide_int wmin, wmax, tmp;\n+      wide_int zero = wi::zero (prec);\n+      wide_int one = wi::one (prec);\n+      if (vr1.type == VR_RANGE && !symbolic_range_p (&vr1))\n+\t{\n+\t  wmax = wi::sub (vr1.max, one);\n+\t  if (sgn == SIGNED)\n+\t    {\n+\t      tmp = wi::sub (wi::minus_one (prec), vr1.min);\n+\t      wmax = wi::smax (wmax, tmp);\n+\t    }\n+\t}\n       else\n-\tmin = fold_unary_to_constant (NEGATE_EXPR, expr_type, max);\n+\t{\n+\t  wmax = wi::max_value (prec, sgn);\n+\t  /* X % INT_MIN may be INT_MAX.  */\n+\t  if (sgn == UNSIGNED)\n+\t    wmax = wmax - one;\n+\t}\n+\n+      if (sgn == UNSIGNED)\n+\twmin = zero;\n+      else\n+\t{\n+\t  wmin = -wmax;\n+\t  if (vr0.type == VR_RANGE && TREE_CODE (vr0.min) == INTEGER_CST)\n+\t    {\n+\t      tmp = vr0.min;\n+\t      if (wi::gts_p (tmp, zero))\n+\t\ttmp = zero;\n+\t      wmin = wi::smax (wmin, tmp);\n+\t    }\n+\t}\n+\n+      if (vr0.type == VR_RANGE && TREE_CODE (vr0.max) == INTEGER_CST)\n+\t{\n+\t  tmp = vr0.max;\n+\t  if (sgn == SIGNED && wi::neg_p (tmp))\n+\t    tmp = zero;\n+\t  wmax = wi::min (wmax, tmp, sgn);\n+\t}\n+\n+      min = wide_int_to_tree (expr_type, wmin);\n+      max = wide_int_to_tree (expr_type, wmax);\n     }\n   else if (code == BIT_AND_EXPR || code == BIT_IOR_EXPR || code == BIT_XOR_EXPR)\n     {"}]}