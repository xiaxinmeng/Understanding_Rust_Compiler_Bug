{"sha": "522818b971dbbb87e4bf875de17a67c813c54b47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIyODE4Yjk3MWRiYmI4N2U0YmY4NzVkZTE3YTY3YzgxM2M1NGI0Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2017-03-28T15:14:36Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-03-28T15:14:36Z"}, "message": "re PR tree-optimization/80218 (tree-call-cdce does not update block frequencies)\n\ngcc/\n\tPR tree-optimization/80218\n\t* tree-call-cdce.c (shrink_wrap_one_built_in_call_with_conds):\n\tUpdate block frequencies and counts.\n\ngcc/testsuite/\n\tPR tree-optimization/80218\n\t* gcc.dg/pr80218.c: New test.\n\nFrom-SVN: r246538", "tree": {"sha": "64d0f8f1398e687831ad5d1e92203e4ab62dde47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64d0f8f1398e687831ad5d1e92203e4ab62dde47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/522818b971dbbb87e4bf875de17a67c813c54b47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522818b971dbbb87e4bf875de17a67c813c54b47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/522818b971dbbb87e4bf875de17a67c813c54b47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522818b971dbbb87e4bf875de17a67c813c54b47/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea7d7da886911a91831bd45fc56d0aa1e2a55ecc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea7d7da886911a91831bd45fc56d0aa1e2a55ecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea7d7da886911a91831bd45fc56d0aa1e2a55ecc"}], "stats": {"total": 107, "additions": 89, "deletions": 18}, "files": [{"sha": "19b9d578508c652227d736301c8a64eb9535cd6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522818b971dbbb87e4bf875de17a67c813c54b47/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522818b971dbbb87e4bf875de17a67c813c54b47/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=522818b971dbbb87e4bf875de17a67c813c54b47", "patch": "@@ -1,3 +1,9 @@\n+2017-03-28  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/80218\n+\t* tree-call-cdce.c (shrink_wrap_one_built_in_call_with_conds):\n+\tUpdate block frequencies and counts.\n+\n 2017-03-28  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/78644"}, {"sha": "8cbbc16220ea56a3dceed36f0623b1a1fc0d3c8d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522818b971dbbb87e4bf875de17a67c813c54b47/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522818b971dbbb87e4bf875de17a67c813c54b47/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=522818b971dbbb87e4bf875de17a67c813c54b47", "patch": "@@ -1,3 +1,8 @@\n+2017-03-28  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+        PR tree-optimization/80218\n+\t* gcc.dg/pr80218.c: New test.\n+\n 2017-03-28  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/78644"}, {"sha": "8669ee1275131f2d059c0ca92e8e40adcbe6054b", "filename": "gcc/testsuite/gcc.dg/pr80218.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522818b971dbbb87e4bf875de17a67c813c54b47/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80218.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522818b971dbbb87e4bf875de17a67c813c54b47/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80218.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80218.c?ref=522818b971dbbb87e4bf875de17a67c813c54b47", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-options \"-O2 -fdump-rtl-ira-details-blocks\" } */\n+/* { dg-require-effective-target c99_runtime } */\n+\n+#include <math.h>\n+\n+void foo (float *);\n+\n+void\n+f1 (float *x)\n+{\n+  x[0] = sqrtf (x[0]);\n+}\n+\n+void\n+f2 (float *x)\n+{\n+  sqrtf (x[0]);\n+  foo (x);\n+}\n+\n+void\n+f3 (float *x)\n+{\n+  acosf (x[0]);\n+  foo (x);\n+}\n+\n+/* { dg-final { scan-rtl-dump-not \"Invalid sum\" \"ira\" } } */"}, {"sha": "7bd242c533699a2e16bddf3cadefb85ee7a61d96", "filename": "gcc/tree-call-cdce.c", "status": "modified", "additions": 50, "deletions": 18, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522818b971dbbb87e4bf875de17a67c813c54b47/gcc%2Ftree-call-cdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522818b971dbbb87e4bf875de17a67c813c54b47/gcc%2Ftree-call-cdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.c?ref=522818b971dbbb87e4bf875de17a67c813c54b47", "patch": "@@ -847,10 +847,12 @@ shrink_wrap_one_built_in_call_with_conds (gcall *bi_call, vec <gimple *> conds,\n       gsi_insert_before (&bi_call_bsi, c, GSI_SAME_STMT);\n       cond_expr = c;\n     }\n-  nconds--;\n   ci++;\n   gcc_assert (cond_expr && gimple_code (cond_expr) == GIMPLE_COND);\n \n+  typedef std::pair<edge, edge> edge_pair;\n+  auto_vec<edge_pair, 8> edges;\n+\n   bi_call_in_edge0 = split_block (bi_call_bb, cond_expr);\n   bi_call_in_edge0->flags &= ~EDGE_FALLTHRU;\n   bi_call_in_edge0->flags |= EDGE_FALSE_VALUE;\n@@ -859,17 +861,11 @@ shrink_wrap_one_built_in_call_with_conds (gcall *bi_call, vec <gimple *> conds,\n   join_tgt_in_edge_fall_thru = make_edge (guard_bb, join_tgt_bb,\n                                           EDGE_TRUE_VALUE);\n \n-  bi_call_in_edge0->probability = REG_BR_PROB_BASE * ERR_PROB;\n-  bi_call_in_edge0->count =\n-      apply_probability (guard_bb->count,\n-\t\t\t bi_call_in_edge0->probability);\n-  join_tgt_in_edge_fall_thru->probability =\n-      inverse_probability (bi_call_in_edge0->probability);\n-  join_tgt_in_edge_fall_thru->count =\n-      guard_bb->count - bi_call_in_edge0->count;\n+  edges.reserve (nconds);\n+  edges.quick_push (edge_pair (bi_call_in_edge0, join_tgt_in_edge_fall_thru));\n \n   /* Code generation for the rest of the conditions  */\n-  while (nconds > 0)\n+  for (unsigned int i = 1; i < nconds; ++i)\n     {\n       unsigned ci0;\n       edge bi_call_in_edge;\n@@ -885,22 +881,58 @@ shrink_wrap_one_built_in_call_with_conds (gcall *bi_call, vec <gimple *> conds,\n           gsi_insert_before (&guard_bsi, c, GSI_SAME_STMT);\n           cond_expr = c;\n         }\n-      nconds--;\n       ci++;\n       gcc_assert (cond_expr && gimple_code (cond_expr) == GIMPLE_COND);\n       guard_bb_in_edge = split_block (guard_bb, cond_expr);\n       guard_bb_in_edge->flags &= ~EDGE_FALLTHRU;\n       guard_bb_in_edge->flags |= EDGE_TRUE_VALUE;\n \n       bi_call_in_edge = make_edge (guard_bb, bi_call_bb, EDGE_FALSE_VALUE);\n+      edges.quick_push (edge_pair (bi_call_in_edge, guard_bb_in_edge));\n+    }\n+\n+  /* Now update the probability and profile information, processing the\n+     guards in order of execution.\n+\n+     There are two approaches we could take here.  On the one hand we\n+     could assign a probability of X to the call block and distribute\n+     that probability among its incoming edges.  On the other hand we\n+     could assign a probability of X to each individual call edge.\n+\n+     The choice only affects calls that have more than one condition.\n+     In those cases, the second approach would give the call block\n+     a greater probability than the first.  However, the difference\n+     is only small, and our chosen X is a pure guess anyway.\n+\n+     Here we take the second approach because it's slightly simpler\n+     and because it's easy to see that it doesn't lose profile counts.  */\n+  bi_call_bb->count = 0;\n+  bi_call_bb->frequency = 0;\n+  while (!edges.is_empty ())\n+    {\n+      edge_pair e = edges.pop ();\n+      edge call_edge = e.first;\n+      edge nocall_edge = e.second;\n+      basic_block src_bb = call_edge->src;\n+      gcc_assert (src_bb == nocall_edge->src);\n+\n+      call_edge->probability = REG_BR_PROB_BASE * ERR_PROB;\n+      call_edge->count = apply_probability (src_bb->count,\n+\t\t\t\t\t    call_edge->probability);\n+      nocall_edge->probability = inverse_probability (call_edge->probability);\n+      nocall_edge->count = src_bb->count - call_edge->count;\n+\n+      unsigned int call_frequency = apply_probability (src_bb->frequency,\n+\t\t\t\t\t\t       call_edge->probability);\n \n-      bi_call_in_edge->probability = REG_BR_PROB_BASE * ERR_PROB;\n-      bi_call_in_edge->count =\n-\t  apply_probability (guard_bb->count,\n-\t\t\t     bi_call_in_edge->probability);\n-      guard_bb_in_edge->probability =\n-          inverse_probability (bi_call_in_edge->probability);\n-      guard_bb_in_edge->count = guard_bb->count - bi_call_in_edge->count;\n+      bi_call_bb->count += call_edge->count;\n+      bi_call_bb->frequency += call_frequency;\n+\n+      if (nocall_edge->dest != join_tgt_bb)\n+\t{\n+\t  nocall_edge->dest->count = nocall_edge->count;\n+\t  nocall_edge->dest->frequency = src_bb->frequency - call_frequency;\n+\t}\n     }\n \n   if (dom_info_available_p (CDI_DOMINATORS))"}]}