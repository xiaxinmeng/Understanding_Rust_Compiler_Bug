{"sha": "e4270465dd9aecb856b05a67ed5653b9e0f57c27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQyNzA0NjVkZDlhZWNiODU2YjA1YTY3ZWQ1NjUzYjllMGY1N2MyNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-06-11T08:54:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-06-11T08:54:32Z"}, "message": "trans.c (Identifier_to_gnu): Test Is_Elementary_Type instead of Is_Scalar_Type for a constant with an...\n\n\t* gcc-interface/trans.c (Identifier_to_gnu): Test Is_Elementary_Type\n\tinstead of Is_Scalar_Type for a constant with an address clause.\n\tDo not return the underlying constant for a constant used by reference\n\tif it holds the address of a constant and an lvalue is required.\n\nFrom-SVN: r188380", "tree": {"sha": "fe8fe3f9c10e6ea4a87678bcba512d9a30ff6520", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe8fe3f9c10e6ea4a87678bcba512d9a30ff6520"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4270465dd9aecb856b05a67ed5653b9e0f57c27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4270465dd9aecb856b05a67ed5653b9e0f57c27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4270465dd9aecb856b05a67ed5653b9e0f57c27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4270465dd9aecb856b05a67ed5653b9e0f57c27/comments", "author": null, "committer": null, "parents": [{"sha": "9083aacd090fc35f85659bdaa812384779ef73e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9083aacd090fc35f85659bdaa812384779ef73e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9083aacd090fc35f85659bdaa812384779ef73e2"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "de1d479203de1adde6b57c7cc7cfdcfeca85f536", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4270465dd9aecb856b05a67ed5653b9e0f57c27/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4270465dd9aecb856b05a67ed5653b9e0f57c27/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e4270465dd9aecb856b05a67ed5653b9e0f57c27", "patch": "@@ -1,3 +1,10 @@\n+2012-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Identifier_to_gnu): Test Is_Elementary_Type\n+\tinstead of Is_Scalar_Type for a constant with an address clause.\n+\tDo not return the underlying constant for a constant used by reference\n+\tif it holds the address of a constant and an lvalue is required.\n+\n 2012-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity): Do not specifically deal"}, {"sha": "6e651f4312352185161a2fbe69b902cfd1621386", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4270465dd9aecb856b05a67ed5653b9e0f57c27/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4270465dd9aecb856b05a67ed5653b9e0f57c27/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=e4270465dd9aecb856b05a67ed5653b9e0f57c27", "patch": "@@ -1019,7 +1019,7 @@ Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n      order-of-elaboration issue here.  */\n   gnu_result_type = get_unpadded_type (gnat_temp_type);\n \n-  /* If this is a non-imported scalar constant with an address clause,\n+  /* If this is a non-imported elementary constant with an address clause,\n      retrieve the value instead of a pointer to be dereferenced unless\n      an lvalue is required.  This is generally more efficient and actually\n      required if this is a static expression because it might be used\n@@ -1028,7 +1028,7 @@ Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n      volatile-ness short-circuit here since Volatile constants must be\n      imported per C.6.  */\n   if (Ekind (gnat_temp) == E_Constant\n-      && Is_Scalar_Type (gnat_temp_type)\n+      && Is_Elementary_Type (gnat_temp_type)\n       && !Is_Imported (gnat_temp)\n       && Present (Address_Clause (gnat_temp)))\n     {\n@@ -1080,7 +1080,10 @@ Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n \t  = convert (build_pointer_type (gnu_result_type), gnu_result);\n \n       /* If it's a CONST_DECL, return the underlying constant like below.  */\n-      else if (TREE_CODE (gnu_result) == CONST_DECL)\n+      else if (TREE_CODE (gnu_result) == CONST_DECL\n+\t       && !(DECL_CONST_ADDRESS_P (gnu_result)\n+\t\t    && lvalue_required_p (gnat_node, gnu_result_type, true,\n+\t\t\t\t\t  true, false)))\n \tgnu_result = DECL_INITIAL (gnu_result);\n \n       /* If it's a renaming pointer and we are at the right binding level,"}]}