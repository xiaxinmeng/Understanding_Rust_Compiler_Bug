{"sha": "c788a0eae0a7144e6f148162512fa2e93a45a035", "node_id": "C_kwDOANBUbNoAKGM3ODhhMGVhZTBhNzE0NGU2ZjE0ODE2MjUxMmZhMmU5M2E0NWEwMzU", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-03-29T21:50:48Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-03-29T21:50:48Z"}, "message": "analyzer: skip constant pool in -fdump-analyzer-untracked [PR testsuite/105085]\n\nIn r12-7809-g5f6197d7c197f9 I added -fdump-analyzer-untracked as support\nfor DejaGnu testing of an optimization of -fanalyzer,\nPR analyzer/104954.\n\nPR testsuite/105085 notes testsuite failures of the form:\n  FAIL: gcc.dg/analyzer/untracked-1.c (test for excess errors)\n  Excess errors:\n  cc1: warning: track '*.LC1': yes\nwhere these warnings are emitted on some targets where the test\ncauses labelled constants to be created in the constant pool.\n\nWe probably ought not to be tracking the values of such decls in the\nstore, given that they're meant to be constant, and I attempted various\nfixes to make the \"should we track this decl\" logic smarter, but given\nthat we're in stage 4, the simplest fix seems to be for\n-fdump-analyzer-untracked to skip such decls in its output, to minimize\ntest output differences between targets.\n\ngcc/analyzer/ChangeLog:\n\tPR testsuite/105085\n\t* region-model-manager.cc (dump_untracked_region): Skip decls in\n\tthe constant pool.\n\ngcc/testsuite/ChangeLog:\n\tPR testsuite/105085\n\t* gcc.dg/analyzer/untracked-1.c: Add further test coverage.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "30d7ee6b2c47d78b611feadc45090ce9eb991fb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30d7ee6b2c47d78b611feadc45090ce9eb991fb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c788a0eae0a7144e6f148162512fa2e93a45a035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c788a0eae0a7144e6f148162512fa2e93a45a035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c788a0eae0a7144e6f148162512fa2e93a45a035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c788a0eae0a7144e6f148162512fa2e93a45a035/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69db6e7f4e1d07bf8f33e93a29139cc16c1e0a2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69db6e7f4e1d07bf8f33e93a29139cc16c1e0a2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69db6e7f4e1d07bf8f33e93a29139cc16c1e0a2f"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "56d60768749ee99be631f904495d7daeeca6f665", "filename": "gcc/analyzer/region-model-manager.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c788a0eae0a7144e6f148162512fa2e93a45a035/gcc%2Fanalyzer%2Fregion-model-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c788a0eae0a7144e6f148162512fa2e93a45a035/gcc%2Fanalyzer%2Fregion-model-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-manager.cc?ref=c788a0eae0a7144e6f148162512fa2e93a45a035", "patch": "@@ -1770,6 +1770,13 @@ dump_untracked_region (const decl_region *decl_reg)\n   tree decl = decl_reg->get_decl ();\n   if (TREE_CODE (decl) != VAR_DECL)\n     return;\n+  /* For now, don't emit the status of decls in the constant pool, to avoid\n+     differences in DejaGnu test results between targets that use these vs\n+     those that don't.\n+     (Eventually these decls should probably be untracked and we should test\n+     for that, but that's not stage 4 material).  */\n+  if (DECL_IN_CONSTANT_POOL (decl))\n+    return;\n   warning_at (DECL_SOURCE_LOCATION (decl), 0,\n \t      \"track %qD: %s\",\n \t      decl, (decl_reg->tracked_p () ? \"yes\" : \"no\"));"}, {"sha": "9f3a639db5cdf0cec8c159f7815b9ad48f71be47", "filename": "gcc/testsuite/gcc.dg/analyzer/untracked-1.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c788a0eae0a7144e6f148162512fa2e93a45a035/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funtracked-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c788a0eae0a7144e6f148162512fa2e93a45a035/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funtracked-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funtracked-1.c?ref=c788a0eae0a7144e6f148162512fa2e93a45a035", "patch": "@@ -1,5 +1,7 @@\n /* { dg-additional-options \"-fdump-analyzer-untracked\" } */\n \n+#include \"analyzer-decls.h\"\n+\n struct st\n {\n   const char *m_filename;\n@@ -39,6 +41,16 @@ void test_3 (void)\n   extern_fn (&s3);\n }\n \n+void test_3a (void)\n+{\n+  struct st s3a = { \"foo.c\", 42 }; /* { dg-warning \"track 's3a': yes\" } */\n+  __analyzer_eval (s3a.m_filename[0] == 'f'); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (s3a.m_line == 42); /* { dg-warning \"TRUE\" } */\n+  extern_fn (&s3a);\n+  __analyzer_eval (s3a.m_filename[0] == 'f'); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (s3a.m_line == 42); /* { dg-warning \"UNKNOWN\" } */\n+}\n+\n extern void called_by_test_4 (int *);\n \n int test_4 (void)\n@@ -103,3 +115,17 @@ void test_13 (void)\n {\n   extern_fn_char_ptr (__func__); /* { dg-warning \"track '__func__': no\" } */\n }\n+\n+char t14_global_unused[100]; /* { dg-warning \"track 't14_global_unused': yes\" } */\n+static char t14_static_unused[100]; /* { dg-warning \"track 't14_static_unused': yes\" } */\n+char t14_global_used[100]; /* { dg-warning \"track 't14_global_used': yes\" } */\n+static char t14_static_used[100]; /* { dg-warning \"track 't14_static_used': yes\" } */\n+void test_14 (void)\n+{\n+  extern_fn_char_ptr (t14_global_unused);\n+  extern_fn_char_ptr (t14_static_unused);\n+  extern_fn_char_ptr (t14_global_used);\n+  __analyzer_eval (t14_global_used[0] == '\\0'); /* { dg-warning \"UNKNOWN\" } */\n+  extern_fn_char_ptr (t14_static_used);\n+  __analyzer_eval (t14_static_used[0] == '\\0'); /* { dg-warning \"UNKNOWN\" } */\n+}"}]}