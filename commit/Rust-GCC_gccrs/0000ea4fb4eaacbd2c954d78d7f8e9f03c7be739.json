{"sha": "0000ea4fb4eaacbd2c954d78d7f8e9f03c7be739", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAwMGVhNGZiNGVhYWNiZDJjOTU0ZDc4ZDdmOGU5ZjAzYzdiZTczOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-10T14:56:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-10T14:56:20Z"}, "message": "c, c++: Fix up -Wunused-value on COMPLEX_EXPRs [PR97748]\n\nThe -Wunused-value warning in both C and C++ FEs (implemented\nsignificantly differently between the two) sees the COMPLEX_EXPRs created\ne.g. for complex pre/post increment and many other expressions as useless\nand warns about it.\n\nFor the C warning implementation, on e.g.\nCOMPLEX_EXPR < ++REALPART_EXPR <x>, IMAGPART_EXPR <x>>;\nwould warn even on the IMAGPART_EXPR <x> there alone etc., so what works\nis check if we'd warn about both operands of COMPLEX_EXPR and if yes,\nwarn on the whole COMPLEX_EXPR, otherwise don't warn.\n\nThe C++ warning implementation is significantly different and for that one\nthe only warn if both would be warned about doesn't really work,\nwe then miss warnings e.g. about\nCOMPLEX_EXPR <REALPART_EXPR <SAVE_EXPR <x>> + 1.0e+0, IMAGPART_EXPR <SAVE_EXPR <x>>> >>>>>\nThe patch replaces the warning_at call with call to the c-family\nwarn_if_unused_value function.\n\nOn the testcase which after the initial new tests contains pretty much\neverything from gcc.dg/Wunused-value-1.c both approaches seem to work\nnicely.\n\n2020-11-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/97748\ngcc/c-family/\n\t* c-common.h (warn_if_unused_value): Add quiet argument defaulted\n\tto false.\n\t* c-warn.c (warn_if_unused_value): Likewise.  Pass it down\n\trecursively and just return true instead of warning if it is true.\n\tHandle COMPLEX_EXPR.\ngcc/cp/\n\t* cvt.c (convert_to_void): Check (complain & tf_warning) in the outer\n\tif rather than twice times in the inner one.  Use warn_if_unused_value.\n\tFormatting fix.\ngcc/testsuite/\n\t* c-c++-common/Wunused-value-1.c: New test.", "tree": {"sha": "ea86e5aadf8bd224dbbdbaf8d0aea40a784e69b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea86e5aadf8bd224dbbdbaf8d0aea40a784e69b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0000ea4fb4eaacbd2c954d78d7f8e9f03c7be739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0000ea4fb4eaacbd2c954d78d7f8e9f03c7be739", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0000ea4fb4eaacbd2c954d78d7f8e9f03c7be739", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0000ea4fb4eaacbd2c954d78d7f8e9f03c7be739/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1693746302e4306b43cb66a0afe589137069bd8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1693746302e4306b43cb66a0afe589137069bd8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1693746302e4306b43cb66a0afe589137069bd8e"}], "stats": {"total": 86, "additions": 59, "deletions": 27}, "files": [{"sha": "94f4868915a2120ccb01a025a69eb94ca7602c42", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0000ea4fb4eaacbd2c954d78d7f8e9f03c7be739/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0000ea4fb4eaacbd2c954d78d7f8e9f03c7be739/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=0000ea4fb4eaacbd2c954d78d7f8e9f03c7be739", "patch": "@@ -1365,7 +1365,7 @@ extern void warn_tautological_cmp (const op_location_t &, enum tree_code,\n \t\t\t\t   tree, tree);\n extern void warn_logical_not_parentheses (location_t, enum tree_code, tree,\n \t\t\t\t\t  tree);\n-extern bool warn_if_unused_value (const_tree, location_t);\n+extern bool warn_if_unused_value (const_tree, location_t, bool = false);\n extern bool strict_aliasing_warning (location_t, tree, tree);\n extern void sizeof_pointer_memaccess_warning (location_t *, tree,\n \t\t\t\t\t      vec<tree, va_gc> *, tree *,"}, {"sha": "6d1f9a73e4489640b4becbae09e1e6a91a7a6de6", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0000ea4fb4eaacbd2c954d78d7f8e9f03c7be739/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0000ea4fb4eaacbd2c954d78d7f8e9f03c7be739/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=0000ea4fb4eaacbd2c954d78d7f8e9f03c7be739", "patch": "@@ -585,7 +585,7 @@ warn_logical_not_parentheses (location_t location, enum tree_code code,\n    (potential) location of the expression.  */\n \n bool\n-warn_if_unused_value (const_tree exp, location_t locus)\n+warn_if_unused_value (const_tree exp, location_t locus, bool quiet)\n {\n  restart:\n   if (TREE_USED (exp) || TREE_NO_WARNING (exp))\n@@ -633,7 +633,7 @@ warn_if_unused_value (const_tree exp, location_t locus)\n       goto restart;\n \n     case COMPOUND_EXPR:\n-      if (warn_if_unused_value (TREE_OPERAND (exp, 0), locus))\n+      if (warn_if_unused_value (TREE_OPERAND (exp, 0), locus, quiet))\n \treturn true;\n       /* Let people do `(foo (), 0)' without a warning.  */\n       if (TREE_CONSTANT (TREE_OPERAND (exp, 1)))\n@@ -648,6 +648,13 @@ warn_if_unused_value (const_tree exp, location_t locus)\n \treturn false;\n       goto warn;\n \n+    case COMPLEX_EXPR:\n+      /* Warn only if both operands are unused.  */\n+      if (warn_if_unused_value (TREE_OPERAND (exp, 0), locus, true)\n+\t  && warn_if_unused_value (TREE_OPERAND (exp, 1), locus, true))\n+\tgoto warn;\n+      return false;\n+\n     case INDIRECT_REF:\n       /* Don't warn about automatic dereferencing of references, since\n \t the user cannot control it.  */\n@@ -671,6 +678,8 @@ warn_if_unused_value (const_tree exp, location_t locus)\n \treturn false;\n \n     warn:\n+      if (quiet)\n+\treturn true;\n       return warning_at (locus, OPT_Wunused_value, \"value computed is not used\");\n     }\n }"}, {"sha": "bcd7c5af81c251bc16707569b93e744042d72e79", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0000ea4fb4eaacbd2c954d78d7f8e9f03c7be739/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0000ea4fb4eaacbd2c954d78d7f8e9f03c7be739/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=0000ea4fb4eaacbd2c954d78d7f8e9f03c7be739", "patch": "@@ -1568,12 +1568,13 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n \t  && warn_unused_value\n \t  && !TREE_NO_WARNING (expr)\n \t  && !processing_template_decl\n-\t  && !cp_unevaluated_operand)\n+\t  && !cp_unevaluated_operand\n+\t  && (complain & tf_warning))\n \t{\n \t  /* The middle end does not warn about expressions that have\n \t     been explicitly cast to void, so we must do so here.  */\n-\t  if (!TREE_SIDE_EFFECTS (expr)) {\n-            if (complain & tf_warning)\n+\t  if (!TREE_SIDE_EFFECTS (expr))\n+\t    {\n \t      switch (implicit)\n \t\t{\n \t\t  case ICV_SECOND_OF_COND:\n@@ -1605,14 +1606,10 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n \t\t  default:\n \t\t    gcc_unreachable ();\n \t\t}\n-          }\n+\t    }\n \t  else\n \t    {\n-\t      tree e;\n-\t      enum tree_code code;\n-\t      enum tree_code_class tclass;\n-\n-\t      e = expr;\n+\t      tree e = expr;\n \t      /* We might like to warn about (say) \"(int) f()\", as the\n \t\t cast has no effect, but the compiler itself will\n \t\t generate implicit conversions under some\n@@ -1626,21 +1623,14 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n \t      while (TREE_CODE (e) == NOP_EXPR)\n \t\te = TREE_OPERAND (e, 0);\n \n-\t      code = TREE_CODE (e);\n-\t      tclass = TREE_CODE_CLASS (code);\n-\t      if ((tclass == tcc_comparison\n-\t\t   || tclass == tcc_unary\n-\t\t   || (tclass == tcc_binary\n-\t\t       && !(code == MODIFY_EXPR\n-\t\t\t    || code == INIT_EXPR\n-\t\t\t    || code == PREDECREMENT_EXPR\n-\t\t\t    || code == PREINCREMENT_EXPR\n-\t\t\t    || code == POSTDECREMENT_EXPR\n-\t\t\t    || code == POSTINCREMENT_EXPR))\n-\t\t   || code == VEC_PERM_EXPR\n-\t\t   || code == VEC_COND_EXPR)\n-                  && (complain & tf_warning))\n-\t\twarning_at (loc, OPT_Wunused_value, \"value computed is not used\");\n+\t      enum tree_code code = TREE_CODE (e);\n+\t      enum tree_code_class tclass = TREE_CODE_CLASS (code);\n+\t      if (tclass == tcc_comparison\n+\t\t  || tclass == tcc_unary\n+\t\t  || tclass == tcc_binary\n+\t\t  || code == VEC_PERM_EXPR\n+\t\t  || code == VEC_COND_EXPR)\n+\t\twarn_if_unused_value (e, loc);\n \t    }\n \t}\n       expr = build1 (CONVERT_EXPR, void_type_node, expr);"}, {"sha": "90c9d93340f246af8e8b8d9c263ece61511945a7", "filename": "gcc/testsuite/c-c++-common/Wunused-value-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0000ea4fb4eaacbd2c954d78d7f8e9f03c7be739/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-value-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0000ea4fb4eaacbd2c954d78d7f8e9f03c7be739/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-value-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-value-1.c?ref=0000ea4fb4eaacbd2c954d78d7f8e9f03c7be739", "patch": "@@ -0,0 +1,33 @@\n+/* PR c/97748 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused-value\" } */\n+\n+double _Complex f ();\n+double _Complex *p;\n+\n+double _Complex\n+foo (double _Complex x)\n+{\n+  ++x;\t\t\t/* { dg-bogus \"value computed is not used\" } */\n+  --x;\t\t\t/* { dg-bogus \"value computed is not used\" } */\n+  x += 1;\t\t/* { dg-bogus \"value computed is not used\" } */\n+  x += 1.0iF;\t\t/* { dg-bogus \"value computed is not used\" } */\n+  x++;\t\t\t/* { dg-bogus \"value computed is not used\" } */\n+  x--;\t\t\t/* { dg-bogus \"value computed is not used\" } */\n+  x + 1;\t\t/* { dg-warning \"value computed is not used\" } */\n+  (void) (x + 1);\t/* { dg-bogus \"value computed is not used\" } */\n+  1 + f (); \t\t/* { dg-warning \"value computed is not used\" } */\n+  f () + f (); \t\t/* { dg-warning \"value computed is not used\" } */\n+  f () + f (), f (); \t/* { dg-warning \"value computed is not used\" } */\n+  f ();\n+  (void) f ();\n+  *p++;\t\t\t/* { dg-warning \"value computed is not used\" } */\n+  ++*p;\t\t\t/* { dg-bogus \"value computed is not used\" } */\n+  (*p ? f () : 0);\n+  ({ f (); });\n+  ({ f () + 1; });\n+  ({ f (); 0; });\n+  ({ f () + 1; 0; });\t/* { dg-warning \"value computed is not used\" } */\n+  1 + ({ f (); });\t/* { dg-warning \"value computed is not used\" } */\n+  return x;\n+}"}]}