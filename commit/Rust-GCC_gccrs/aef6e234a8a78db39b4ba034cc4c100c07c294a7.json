{"sha": "aef6e234a8a78db39b4ba034cc4c100c07c294a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVmNmUyMzRhOGE3OGRiMzliNGJhMDM0Y2M0YzEwMGMwN2MyOTRhNw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-30T01:12:21Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-30T01:12:21Z"}, "message": "c++: satisfaction value of type typedef to bool [PR95386]\n\nIn the testcase below, the satisfaction value of fn1<int>'s constraint\nis INTEGER_CST '1' of type BOOLEAN_TYPE value_type, which is a typedef\nto the standard boolean_type_node.  But satisfaction_value expects to\nsee exactly boolean_true_node or integer_one_node, which this value is\nneither, causing us to trip over the assert therein.\n\nThis patch changes satisfaction_value to accept INTEGER_CST of any\nboolean type.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95386\n\t* constraint.cc (satisfaction_value): Accept INTEGER_CST of any\n\tboolean type.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95386\n\t* g++.dg/concepts/pr95386.C: New test.", "tree": {"sha": "7ddbd61f63e9768bb33c105e39f46babf39ca566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ddbd61f63e9768bb33c105e39f46babf39ca566"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aef6e234a8a78db39b4ba034cc4c100c07c294a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aef6e234a8a78db39b4ba034cc4c100c07c294a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aef6e234a8a78db39b4ba034cc4c100c07c294a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aef6e234a8a78db39b4ba034cc4c100c07c294a7/comments", "author": null, "committer": null, "parents": [{"sha": "885ef72f270cf8e58066681e70fb05d846ac426e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/885ef72f270cf8e58066681e70fb05d846ac426e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/885ef72f270cf8e58066681e70fb05d846ac426e"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "92ff283013eca1e394c10ff40e2d23a5deccd8f0", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aef6e234a8a78db39b4ba034cc4c100c07c294a7/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aef6e234a8a78db39b4ba034cc4c100c07c294a7/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=aef6e234a8a78db39b4ba034cc4c100c07c294a7", "patch": "@@ -2490,15 +2490,15 @@ satisfy_disjunction (tree t, tree args, subst_info info)\n tree\n satisfaction_value (tree t)\n {\n-  if (t == error_mark_node)\n+  if (t == error_mark_node || t == boolean_true_node || t == boolean_false_node)\n     return t;\n-  if (t == boolean_true_node || t == integer_one_node)\n-    return boolean_true_node;\n-  if (t == boolean_false_node || t == integer_zero_node)\n-    return boolean_false_node;\n \n-  /* Anything else should be invalid.  */\n-  gcc_assert (false);\n+  gcc_assert (TREE_CODE (t) == INTEGER_CST\n+\t      && same_type_p (TREE_TYPE (t), boolean_type_node));\n+  if (integer_zerop (t))\n+    return boolean_false_node;\n+  else\n+    return boolean_true_node;\n }\n \n /* Build a new template argument list with template arguments corresponding"}, {"sha": "3c683e5693c14906d70e457a93ea0da91b0e913c", "filename": "gcc/testsuite/g++.dg/concepts/pr95386.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aef6e234a8a78db39b4ba034cc4c100c07c294a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr95386.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aef6e234a8a78db39b4ba034cc4c100c07c294a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr95386.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr95386.C?ref=aef6e234a8a78db39b4ba034cc4c100c07c294a7", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/95386\n+// { dg-do compile { target concepts } }\n+\n+template <typename> struct blah {\n+ typedef bool value_type;\n+ constexpr operator value_type() { return false; }\n+};\n+\n+template <class T> void fn1(T) requires (!blah<T>());\n+\n+void fn2() { fn1(0); }"}]}