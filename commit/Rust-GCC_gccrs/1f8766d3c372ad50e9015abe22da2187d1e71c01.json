{"sha": "1f8766d3c372ad50e9015abe22da2187d1e71c01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY4NzY2ZDNjMzcyYWQ1MGU5MDE1YWJlMjJkYTIxODdkMWU3MWMwMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-28T13:33:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-28T13:33:16Z"}, "message": "[multiple changes]\n\n2017-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_ch9.adb (Build_Lock_Free_Unprotected_Subprogram_Body): Also\n\tinitialize Block_Decls variable.\n\t(Expand_Entry_Barrier): Add pragma Warnings on Func_Body variable.\n\t(Build_Dispatching_Requeue): Add pragma Warnings on Op variable.\n\t* exp_disp.adb (Expand_Interface_Actuals): Initialize\n\tFormal_DDT and Actual_DDT variables.\n\t(Expand_Interface_Thunk): Initialize Iface_Formal.\n\t(Make_DT): Initialize Size_Comp.\n\t(Make_Select_Specific_Data_Table): Initialize Decls.\n\t* exp_dist.adb (Add_RACW_Primitive_Declarations_And_Bodies):\n\tAlso initialize more RPC_Receiver_* variables.\n\t(Build_To_Any_Function): Initialize Cstr_Formal.\n\t* exp_prag.adb (Expand_Pragma_Contract_Cases): Initialize Msg_Str.\n\n2017-04-28  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Freeze_Type_Refs): For an interface conversion\n\tnode between access types, freeze the designated type as well,\n\tso that dispatch table pointers are created in the proper scope,\n\tand not in the constructed body of the expression function.\n\n2017-04-28  Bob Duff  <duff@adacore.com>\n\n\t* alloc.ads (Nodes_Initial): Go back to previous value. The large\n\tvalue makes large compilations faster, but small compilations slower.\n\n2017-04-28  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_util.adb: minor typos in Is_Child_Or_Sibling.\n\n2017-04-28  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* erroutc.adb (Compilation_Errors): Do not consider info messages\n\tas suitable warnings when warnings must be treated as errors.\n\t* sem_ch7.adb (Analyze_Package_Specification): Do not consider\n\tinternally-generated packages when outputting completion\n\tinformation.\n\t* errout.adb (Output_Messages): Do not consider info messages as\n\tsuitable warnings when warnings must be treated as errors.\n\t* errutil.adb (Finalize): Do not consider info messages as\n\tsuitable warnings when warnings must be treated as errors.\n\n\n2017-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* warnsw.ads: Minor fix for incorrect wording in comment.\n\n2017-04-28  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (In_Instance_Code): New predicate in\n\tValid_Conversion, to determine whether a type conversion appears\n\tas (or within) an actual for a formal object.  Type conversions\n\tin instances are not rechecked in Valid_Conversion because\n\tvisibility changes between generic location andi instance may\n\tlead to spurious errors, but conversions within an actual must be\n\tfully checked, and they are not fully resolved when pre-analyzing\n\tthe actuals.\n\nFrom-SVN: r247385", "tree": {"sha": "e107e28e4538fc44368dc748601bd789d3900ae5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e107e28e4538fc44368dc748601bd789d3900ae5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f8766d3c372ad50e9015abe22da2187d1e71c01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8766d3c372ad50e9015abe22da2187d1e71c01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f8766d3c372ad50e9015abe22da2187d1e71c01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8766d3c372ad50e9015abe22da2187d1e71c01/comments", "author": null, "committer": null, "parents": [{"sha": "d5fa5335e2171cbfd732a9acba9f22f0df784913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5fa5335e2171cbfd732a9acba9f22f0df784913", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5fa5335e2171cbfd732a9acba9f22f0df784913"}], "stats": {"total": 190, "additions": 159, "deletions": 31}, "files": [{"sha": "af976831dab5b55193a79edaca25c5acf8150795", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1f8766d3c372ad50e9015abe22da2187d1e71c01", "patch": "@@ -1,3 +1,63 @@\n+2017-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch9.adb (Build_Lock_Free_Unprotected_Subprogram_Body): Also\n+\tinitialize Block_Decls variable.\n+\t(Expand_Entry_Barrier): Add pragma Warnings on Func_Body variable.\n+\t(Build_Dispatching_Requeue): Add pragma Warnings on Op variable.\n+\t* exp_disp.adb (Expand_Interface_Actuals): Initialize\n+\tFormal_DDT and Actual_DDT variables.\n+\t(Expand_Interface_Thunk): Initialize Iface_Formal.\n+\t(Make_DT): Initialize Size_Comp.\n+\t(Make_Select_Specific_Data_Table): Initialize Decls.\n+\t* exp_dist.adb (Add_RACW_Primitive_Declarations_And_Bodies):\n+\tAlso initialize more RPC_Receiver_* variables.\n+\t(Build_To_Any_Function): Initialize Cstr_Formal.\n+\t* exp_prag.adb (Expand_Pragma_Contract_Cases): Initialize Msg_Str.\n+\n+2017-04-28  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Freeze_Type_Refs): For an interface conversion\n+\tnode between access types, freeze the designated type as well,\n+\tso that dispatch table pointers are created in the proper scope,\n+\tand not in the constructed body of the expression function.\n+\n+2017-04-28  Bob Duff  <duff@adacore.com>\n+\n+\t* alloc.ads (Nodes_Initial): Go back to previous value. The large\n+\tvalue makes large compilations faster, but small compilations slower.\n+\n+2017-04-28  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_util.adb: minor typos in Is_Child_Or_Sibling.\n+\n+2017-04-28  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* erroutc.adb (Compilation_Errors): Do not consider info messages\n+\tas suitable warnings when warnings must be treated as errors.\n+\t* sem_ch7.adb (Analyze_Package_Specification): Do not consider\n+\tinternally-generated packages when outputting completion\n+\tinformation.\n+\t* errout.adb (Output_Messages): Do not consider info messages as\n+\tsuitable warnings when warnings must be treated as errors.\n+\t* errutil.adb (Finalize): Do not consider info messages as\n+\tsuitable warnings when warnings must be treated as errors.\n+\n+\n+2017-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* warnsw.ads: Minor fix for incorrect wording in comment.\n+\n+2017-04-28  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (In_Instance_Code): New predicate in\n+\tValid_Conversion, to determine whether a type conversion appears\n+\tas (or within) an actual for a formal object.  Type conversions\n+\tin instances are not rechecked in Valid_Conversion because\n+\tvisibility changes between generic location andi instance may\n+\tlead to spurious errors, but conversions within an actual must be\n+\tfully checked, and they are not fully resolved when pre-analyzing\n+\tthe actuals.\n+\n 2017-04-28  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch6.adb (Expand_N_Extended_Return_Statement): Use"}, {"sha": "c42afbb091de160e23d941d7a2faad6cb789288d", "filename": "gcc/ada/alloc.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Falloc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Falloc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Falloc.ads?ref=1f8766d3c372ad50e9015abe22da2187d1e71c01", "patch": "@@ -100,7 +100,7 @@ package Alloc is\n    Names_Initial                    : constant := 6_000;      -- Namet\n    Names_Increment                  : constant := 100;\n \n-   Nodes_Initial                    : constant := 5_000_000;  -- Atree\n+   Nodes_Initial                    : constant := 50_000;     -- Atree\n    Nodes_Increment                  : constant := 100;\n    Nodes_Release_Threshold          : constant := 100_000;\n "}, {"sha": "0ff4b4e9e347beae848b347b6c22bc837f35cb8f", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=1f8766d3c372ad50e9015abe22da2187d1e71c01", "patch": "@@ -2119,9 +2119,12 @@ package body Errout is\n \n       Write_Max_Errors;\n \n+      --  Even though info messages are a subclass of warnings, they must not\n+      --  be treated as errors when -gnatwe is in effect.\n+\n       if Warning_Mode = Treat_As_Error then\n          Total_Errors_Detected :=\n-           Total_Errors_Detected + Warnings_Detected;\n+           Total_Errors_Detected + Warnings_Detected - Info_Messages;\n          Warnings_Detected := Info_Messages;\n       end if;\n    end Output_Messages;"}, {"sha": "b4fc53af77c02c5799515f05c7554a1f26dff7d9", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=1f8766d3c372ad50e9015abe22da2187d1e71c01", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -242,10 +242,11 @@ package body Erroutc is\n \n    function Compilation_Errors return Boolean is\n    begin\n-      return Total_Errors_Detected /= 0\n-        or else (Warnings_Detected /= 0\n-                  and then Warning_Mode = Treat_As_Error)\n-        or else Warnings_Treated_As_Errors /= 0;\n+      return\n+        Total_Errors_Detected /= 0\n+          or else (Warnings_Detected - Info_Messages /= 0\n+                    and then Warning_Mode = Treat_As_Error)\n+          or else Warnings_Treated_As_Errors /= 0;\n    end Compilation_Errors;\n \n    ------------------"}, {"sha": "057ce768220a461e486d178ca087392a70657f3d", "filename": "gcc/ada/errutil.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Ferrutil.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Ferrutil.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrutil.adb?ref=1f8766d3c372ad50e9015abe22da2187d1e71c01", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1991-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1991-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -586,9 +586,12 @@ package body Errutil is\n          end if;\n       end if;\n \n+      --  Even though info messages are a subclass of warnings, they must not\n+      --  be treated as errors when -gnatwe is in effect.\n+\n       if Warning_Mode = Treat_As_Error then\n          Total_Errors_Detected :=\n-           Total_Errors_Detected + Warnings_Detected;\n+           Total_Errors_Detected + Warnings_Detected - Info_Messages;\n          Warnings_Detected := Info_Messages;\n       end if;\n "}, {"sha": "d10ae744583de795c8c0d7b73e4a1afef108f60c", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=1f8766d3c372ad50e9015abe22da2187d1e71c01", "patch": "@@ -2956,7 +2956,7 @@ package body Exp_Ch9 is\n                              Ekind (Corresponding_Spec (N)) = E_Procedure;\n             --  Indicates if N is a protected procedure body\n \n-            Block_Decls   : List_Id;\n+            Block_Decls   : List_Id := No_List;\n             Try_Write     : Entity_Id;\n             Desired_Comp  : Entity_Id;\n             Decl          : Node_Id;\n@@ -6117,6 +6117,7 @@ package body Exp_Ch9 is\n       Cond_Id    : Entity_Id;\n       Entry_Body : Node_Id;\n       Func_Body  : Node_Id;\n+      pragma Warnings (Off, Func_Body);\n \n    --  Start of processing for Expand_Entry_Barrier\n \n@@ -9985,6 +9986,7 @@ package body Exp_Ch9 is\n          declare\n             Elmt : Elmt_Id;\n             Op   : Entity_Id;\n+            pragma Warnings (Off, Op);\n \n          begin\n             Elmt := First_Elmt (Primitive_Operations (Etype (Conc_Typ)));"}, {"sha": "b26aab0af2cc0d858f6ec5b9f316a3cac0bd416e", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=1f8766d3c372ad50e9015abe22da2187d1e71c01", "patch": "@@ -1546,8 +1546,8 @@ package body Exp_Disp is\n       Formal     : Entity_Id;\n       Formal_Typ : Entity_Id;\n       Subp       : Entity_Id;\n-      Formal_DDT : Entity_Id;\n-      Actual_DDT : Entity_Id;\n+      Formal_DDT : Entity_Id := Empty;  -- initialize to prevent warning\n+      Actual_DDT : Entity_Id := Empty;  -- initialize to prevent warning\n \n    begin\n       --  This subprogram is called directly from the semantics, so we need a\n@@ -1729,7 +1729,7 @@ package body Exp_Disp is\n       Expr          : Node_Id;\n       Formal        : Node_Id;\n       Ftyp          : Entity_Id;\n-      Iface_Formal  : Node_Id;\n+      Iface_Formal  : Node_Id := Empty;  -- initialize to prevent warning\n       New_Arg       : Node_Id;\n       Offset_To_Top : Node_Id;\n       Target_Formal : Entity_Id;\n@@ -5274,7 +5274,7 @@ package body Exp_Disp is\n             declare\n                Prim_Elmt : Elmt_Id;\n                Prim      : Entity_Id;\n-               Size_Comp : Node_Id;\n+               Size_Comp : Node_Id := Empty;\n \n             begin\n                Prim_Elmt := First_Elmt (Primitive_Operations (Typ));\n@@ -6377,7 +6377,7 @@ package body Exp_Disp is\n       Loc         : constant Source_Ptr := Sloc (Typ);\n \n       Conc_Typ  : Entity_Id;\n-      Decls     : List_Id;\n+      Decls     : List_Id := No_List;\n       Prim      : Entity_Id;\n       Prim_Als  : Entity_Id;\n       Prim_Elmt : Elmt_Id;"}, {"sha": "70f07fc3e427c0d303e6fa5f33270c3a4f198660", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=1f8766d3c372ad50e9015abe22da2187d1e71c01", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1364,10 +1364,10 @@ package body Exp_Dist is\n       RPC_Receiver                   : Entity_Id;\n       RPC_Receiver_Statements        : List_Id;\n       RPC_Receiver_Case_Alternatives : constant List_Id := New_List;\n-      RPC_Receiver_Elsif_Parts       : List_Id;\n-      RPC_Receiver_Request           : Entity_Id;\n-      RPC_Receiver_Subp_Id           : Entity_Id;\n-      RPC_Receiver_Subp_Index        : Entity_Id;\n+      RPC_Receiver_Elsif_Parts       : List_Id          := No_List;\n+      RPC_Receiver_Request           : Entity_Id        := Empty;\n+      RPC_Receiver_Subp_Id           : Entity_Id        := Empty;\n+      RPC_Receiver_Subp_Index        : Entity_Id        := Empty;\n \n       Subp_Str : String_Id;\n \n@@ -9434,7 +9434,7 @@ package body Exp_Dist is\n             Stms   : List_Id;\n \n             Expr_Formal : Entity_Id;\n-            Cstr_Formal : Entity_Id;\n+            Cstr_Formal : Entity_Id := Empty;  -- initialize to prevent warning\n             Any         : Entity_Id;\n             Result_TC   : Node_Id;\n "}, {"sha": "7ed11362fd59b1a303fd02fa5db9e7a35d37f445", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=1f8766d3c372ad50e9015abe22da2187d1e71c01", "patch": "@@ -1000,7 +1000,7 @@ package body Exp_Prag is\n       Flag          : Entity_Id;\n       Flag_Decl     : Node_Id;\n       If_Stmt       : Node_Id;\n-      Msg_Str       : Entity_Id;\n+      Msg_Str       : Entity_Id := Empty;\n       Multiple_PCs  : Boolean;\n       Old_Evals     : Node_Id   := Empty;\n       Others_Decl   : Node_Id;"}, {"sha": "a4fd1f4363ed93ae289c03b7a6740e7614ec5c10", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=1f8766d3c372ad50e9015abe22da2187d1e71c01", "patch": "@@ -3110,6 +3110,18 @@ package body Sem_Ch6 is\n                      end if;\n                   end;\n                end if;\n+\n+            --  Freezing an access type does not freeze the designated\n+            --  type, but freezing conversions between access to interfaces\n+            --  requires that the interface types themselves be frozen, so\n+            --  that dispatch table entities are properly created.\n+            --  Unclear whether a more general rule is needed ???\n+\n+            elsif Nkind (Node) = N_Type_Conversion\n+              and then Is_Access_Type (Etype (Node))\n+              and then Is_Interface (Designated_Type (Etype (Node)))\n+            then\n+               Freeze_Before (N, Designated_Type (Etype (Node)));\n             end if;\n \n             return OK;"}, {"sha": "0b415d737cb33a628e1c81950c9c5f238db7e303", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=1f8766d3c372ad50e9015abe22da2187d1e71c01", "patch": "@@ -1711,11 +1711,14 @@ package body Sem_Ch7 is\n \n       Check_One_Tagged_Type_Or_Extension_At_Most;\n \n-      --  If switch set, output information on why body required\n+      --  Output relevant information as to why the package requires a body.\n+      --  Do not consider generated packages as this exposes internal symbols\n+      --  and leads to confusing messages.\n \n       if List_Body_Required_Info\n         and then In_Extended_Main_Source_Unit (Id)\n         and then Unit_Requires_Body (Id)\n+        and then Comes_From_Source (Id)\n       then\n          Unit_Requires_Body_Info (Id);\n       end if;\n@@ -3143,4 +3146,5 @@ package body Sem_Ch7 is\n          Next_Entity (E);\n       end loop;\n    end Unit_Requires_Body_Info;\n+\n end Sem_Ch7;"}, {"sha": "97f6cb674a75552357a3597d83a22db13f59c829", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=1f8766d3c372ad50e9015abe22da2187d1e71c01", "patch": "@@ -11870,6 +11870,12 @@ package body Sem_Res is\n          E   : Node_Or_Entity_Id);\n       --  If Report_Errs, then calls Errout.Error_Msg_NE with its arguments\n \n+      function In_Instance_Code return Boolean;\n+      --  Return True if expression is within an instance but is not in one of\n+      --  the actuals of the instantiation. Type conversions within an instance\n+      --  are not rechecked because type visbility may lead to spurious errors,\n+      --  but conversions in an actual for a formal object must be checked.\n+\n       function Valid_Tagged_Conversion\n         (Target_Type : Entity_Id;\n          Opnd_Type   : Entity_Id) return Boolean;\n@@ -11899,7 +11905,7 @@ package body Sem_Res is\n             --  Valid_Conversion still ensures the proper compatibility of\n             --  target and operand types.\n \n-           and then not In_Instance\n+           and then not In_Instance_Code\n          then\n             Conversion_Error_N (Msg, Operand);\n          end if;\n@@ -11933,6 +11939,43 @@ package body Sem_Res is\n          end if;\n       end Conversion_Error_NE;\n \n+      ----------------------\n+      -- In_Instance_Code --\n+      ----------------------\n+\n+      function In_Instance_Code return Boolean is\n+         Par : Node_Id;\n+      begin\n+         if not In_Instance then\n+            return False;\n+\n+         else\n+            Par := Parent (N);\n+            while Present (Par) loop\n+\n+               --  The expression is part of an actual object if it appears\n+               --  in the generated object declaration in the instance.\n+\n+               if Nkind (Par) = N_Object_Declaration\n+                  and then Present (Corresponding_Generic_Association (Par))\n+               then\n+                  return False;\n+               else\n+                  exit when Nkind (Par)\n+                      in N_Statement_Other_Than_Procedure_Call\n+                    or else Nkind (Par) in N_Subprogram_Call\n+                    or else Nkind (Par) in N_Declaration;\n+               end if;\n+\n+               Par := Parent (Par);\n+            end loop;\n+\n+            --  Otherwise the expression appears within the instantiated unit.\n+\n+            return True;\n+         end if;\n+      end In_Instance_Code;\n+\n       ----------------------------\n       -- Valid_Array_Conversion --\n       ----------------------------\n@@ -12271,7 +12314,7 @@ package body Sem_Res is\n          --  but in fact the test is required for source code as well, since\n          --  this situation can arise in source code.\n \n-         elsif In_Instance or else In_Inlined_Body then\n+         elsif In_Instance_Code or else In_Inlined_Body then\n             return True;\n \n          --  Otherwise we need the conversion check"}, {"sha": "41f6f16a0b8841541b081e6dc1fd888487b1aa5b", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=1f8766d3c372ad50e9015abe22da2187d1e71c01", "patch": "@@ -12353,7 +12353,7 @@ package body Sem_Util is\n          return False;\n \n       --  One of the packages is at a deeper level than the other. Note that\n-      --  both may still come from differen hierarchies.\n+      --  both may still come from different hierarchies.\n \n       --        (root)           P_2\n       --        /    \\            :\n@@ -12388,7 +12388,7 @@ package body Sem_Util is\n \n       --      P_1\n       --       :\n-      --       X    became   P_1 P_2   or vica versa\n+      --       X    became   P_1 P_2   or vice versa\n       --       :\n       --      P_2\n "}, {"sha": "53332a7735386b9806bd831f1b2f3a1d9c3f9e49", "filename": "gcc/ada/warnsw.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Fwarnsw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8766d3c372ad50e9015abe22da2187d1e71c01/gcc%2Fada%2Fwarnsw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.ads?ref=1f8766d3c372ad50e9015abe22da2187d1e71c01", "patch": "@@ -150,9 +150,9 @@ package Warnsw is\n    procedure Set_GNAT_Mode_Warnings;\n    --  This is called in -gnatg mode to set the warnings for gnat mode. It is\n    --  also used to set the proper warning statuses for -gnatw.g. Note that\n-   --  this set of warnings is disjoint from -gnatwa, it enables warnings that\n-   --  are not included in -gnatwa, and it disables warnings that are included\n-   --  in -gnatwa (such as Warn_On_Implementation_Units, which we clearly want\n-   --  to be False for units built with -gnatg).\n+   --  this set of warnings is neither a subset nor a superset of -gnatwa, it\n+   --  enables warnings that are not included in -gnatwa and disables warnings\n+   --  that are included in -gnatwa (such as Warn_On_Implementation_Units, that\n+   --  we clearly want to be False for units built with -gnatg).\n \n end Warnsw;"}]}