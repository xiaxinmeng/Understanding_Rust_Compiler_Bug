{"sha": "a8b432f4def6548c398a660a2880517f20802fcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThiNDMyZjRkZWY2NTQ4YzM5OGE2NjBhMjg4MDUxN2YyMDgwMmZjYw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-05-13T13:52:08Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-05-13T13:52:08Z"}, "message": "ctype_inline.h (scan_is, scan_not): Fix typo, use this->is() rather than manually (and perhaps incorrectly) inlining it.\n\n\t* config/os/irix/irix5.2/bits/ctype_inline.h (scan_is, scan_not):\n\tFix typo, use this->is() rather than manually (and perhaps\n\tincorrectly) inlining it.\n\t* config/os/irix/irix6.5/bits/ctype_inline.h (scan_is, scan_not):\n\tLikewise.\n\t* testsuite/22_locale/ctype_scan_char.cc: New file.\n\nFrom-SVN: r53422", "tree": {"sha": "92143f2917b1417482d954645a296f3e9b3915dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92143f2917b1417482d954645a296f3e9b3915dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8b432f4def6548c398a660a2880517f20802fcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b432f4def6548c398a660a2880517f20802fcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8b432f4def6548c398a660a2880517f20802fcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b432f4def6548c398a660a2880517f20802fcc/comments", "author": null, "committer": null, "parents": [{"sha": "dcb41ced7946e159914d0d0d019ac9b5417e2b96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcb41ced7946e159914d0d0d019ac9b5417e2b96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcb41ced7946e159914d0d0d019ac9b5417e2b96"}], "stats": {"total": 365, "additions": 357, "deletions": 8}, "files": [{"sha": "8f6065d4600b99297f1ec443f7954b03e19a4895", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b432f4def6548c398a660a2880517f20802fcc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b432f4def6548c398a660a2880517f20802fcc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a8b432f4def6548c398a660a2880517f20802fcc", "patch": "@@ -1,3 +1,12 @@\n+2002-05-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* config/os/irix/irix5.2/bits/ctype_inline.h (scan_is, scan_not):\n+\tFix typo, use this->is() rather than manually (and perhaps\n+\tincorrectly) inlining it.\n+\t* config/os/irix/irix6.5/bits/ctype_inline.h (scan_is, scan_not):\n+\tLikewise.\n+\t* testsuite/22_locale/ctype_scan_char.cc: New file.\n+\n 2002-05-13  Paolo Carlini  <pcarlini@unitus.it>\n             Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "89cf11b259b0dbb4a4813b83e6e125beb147a048", "filename": "libstdc++-v3/config/os/irix/irix5.2/bits/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b432f4def6548c398a660a2880517f20802fcc/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b432f4def6548c398a660a2880517f20802fcc/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fbits%2Fctype_inline.h?ref=a8b432f4def6548c398a660a2880517f20802fcc", "patch": "@@ -52,8 +52,7 @@\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high \n-\t   && !((_M_table)[static_cast<unsigned char>(*__low)] & __m))\n+    while (__low < __high && ! this->is(__m, *__low))\n       ++__low;\n     return __low;\n   }\n@@ -62,8 +61,7 @@\n   ctype<char>::\n   scan_not(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high \n-\t   && ((_M_table + 1)[static_cast<unsigned char>(*__low)] & __m) != 0)\n+    while (__low < __high && this->is(__m, *__low))\n       ++__low;\n     return __low;\n   }"}, {"sha": "8c10c4d17ff08052204e51544d5b938655cbff24", "filename": "libstdc++-v3/config/os/irix/irix6.5/bits/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b432f4def6548c398a660a2880517f20802fcc/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b432f4def6548c398a660a2880517f20802fcc/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fbits%2Fctype_inline.h?ref=a8b432f4def6548c398a660a2880517f20802fcc", "patch": "@@ -52,8 +52,7 @@\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high \n-\t   && !((_M_table)[static_cast<unsigned char>(*__low)] & __m))\n+    while (__low < __high && ! this->is(__m, *__low))\n       ++__low;\n     return __low;\n   }\n@@ -62,8 +61,7 @@\n   ctype<char>::\n   scan_not(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high \n-\t   && ((_M_table + 1)[static_cast<unsigned char>(*__low)] & __m) != 0)\n+    while (__low < __high && this->is(__m, *__low))\n       ++__low;\n     return __low;\n   }"}, {"sha": "04ea1af6261e084f866efc259b52bd96bfb72d9a", "filename": "libstdc++-v3/testsuite/22_locale/ctype_scan_char.cc", "status": "added", "additions": 344, "deletions": 0, "changes": 344, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b432f4def6548c398a660a2880517f20802fcc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_scan_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b432f4def6548c398a660a2880517f20802fcc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_scan_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_scan_char.cc?ref=a8b432f4def6548c398a660a2880517f20802fcc", "patch": "@@ -0,0 +1,344 @@\n+// 2002-05-10 ghazi\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-do run }\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+class gnu_ctype: public std::ctype<char> { };\n+\n+// These two macros take a ctype mask, a string and a pointer within\n+// the string that the scan function should return, usually either the\n+// first or last character if the string contains identical values as\n+// below.\n+#define VERIFY_SCAN_IS(MASK, STRING, EXPECTED) \\\n+  VERIFY(gctype.scan_is((MASK), (STRING), \\\n+\t\t\t(STRING)+strlen(STRING)) == (EXPECTED))\n+#define VERIFY_SCAN_NOT(MASK, STRING, EXPECTED) \\\n+  VERIFY(gctype.scan_not((MASK), (STRING), \\\n+\t\t\t (STRING)+strlen(STRING)) == (EXPECTED))\n+\n+// Sanity check scan_is() and scan_not().\n+void test01()\n+{\n+  const char *const ca = \"aaaaa\";\n+  const char *const cz = \"zzzzz\";\n+  const char *const cA = \"AAAAA\";\n+  const char *const cZ = \"ZZZZZ\";\n+  const char *const c0 = \"00000\";\n+  const char *const c9 = \"99999\";\n+  const char *const cs = \"     \";\n+  const char *const xf = \"fffff\";\n+  const char *const xF = \"FFFFF\";\n+  const char *const p1 = \"!!!!!\";\n+  const char *const p2 = \"/////\";\n+  \n+  gnu_ctype gctype;\n+\n+  // 'a'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, ca, ca);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, ca, ca);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, ca, ca+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, ca, ca+5);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, ca, ca);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, ca, ca);\n+  VERIFY_SCAN_IS (std::ctype_base::print, ca, ca);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, ca, ca+5);\n+  VERIFY_SCAN_IS (std::ctype_base::space, ca, ca+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, ca, ca+5);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, ca, ca);\n+\n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, ca, ca+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, ca, ca+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, ca, ca);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, ca, ca);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, ca, ca+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, ca, ca+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, ca, ca+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, ca, ca);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, ca, ca);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, ca, ca);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, ca, ca+5);\n+\n+  // 'z'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, cz, cz);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, cz, cz);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, cz, cz+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, cz, cz+5);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, cz, cz);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, cz, cz);\n+  VERIFY_SCAN_IS (std::ctype_base::print, cz, cz);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, cz, cz+5);\n+  VERIFY_SCAN_IS (std::ctype_base::space, cz, cz+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, cz, cz+5);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, cz, cz+5);\n+  \n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, cz, cz+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, cz, cz+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, cz, cz);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, cz, cz);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, cz, cz+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, cz, cz+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, cz, cz+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, cz, cz);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, cz, cz);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, cz, cz);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, cz, cz);\n+  \n+  // 'A'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, cA, cA);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, cA, cA);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, cA, cA+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, cA, cA+5);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, cA, cA);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, cA, cA+5);\n+  VERIFY_SCAN_IS (std::ctype_base::print, cA, cA);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, cA, cA+5);\n+  VERIFY_SCAN_IS (std::ctype_base::space, cA, cA+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, cA, cA);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, cA, cA);\n+  \n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, cA, cA+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, cA, cA+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, cA, cA);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, cA, cA);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, cA, cA+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, cA, cA);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, cA, cA+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, cA, cA);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, cA, cA);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, cA, cA+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, cA, cA+5);\n+  \n+  // 'Z'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, cZ, cZ);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, cZ, cZ);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, cZ, cZ+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, cZ, cZ+5);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, cZ, cZ);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, cZ, cZ+5);\n+  VERIFY_SCAN_IS (std::ctype_base::print, cZ, cZ);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, cZ, cZ+5);\n+  VERIFY_SCAN_IS (std::ctype_base::space, cZ, cZ+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, cZ, cZ);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, cZ, cZ+5);\n+  \n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, cZ, cZ+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, cZ, cZ+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, cZ, cZ);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, cZ, cZ);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, cZ, cZ+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, cZ, cZ);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, cZ, cZ+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, cZ, cZ);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, cZ, cZ);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, cZ, cZ+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, cZ, cZ);\n+  \n+  // '0'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, c0, c0);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, c0, c0+5);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, c0, c0+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, c0, c0);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, c0, c0);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, c0, c0+5);\n+  VERIFY_SCAN_IS (std::ctype_base::print, c0, c0);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, c0, c0+5);\n+  VERIFY_SCAN_IS (std::ctype_base::space, c0, c0+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, c0, c0+5);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, c0, c0);\n+  \n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, c0, c0+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, c0, c0);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, c0, c0);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, c0, c0+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, c0, c0+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, c0, c0);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, c0, c0+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, c0, c0);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, c0, c0);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, c0, c0);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, c0, c0+5);\n+  \n+  // '9'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, c9, c9);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, c9, c9+5);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, c9, c9+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, c9, c9);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, c9, c9);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, c9, c9+5);\n+  VERIFY_SCAN_IS (std::ctype_base::print, c9, c9);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, c9, c9+5);\n+  VERIFY_SCAN_IS (std::ctype_base::space, c9, c9+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, c9, c9+5);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, c9, c9);\n+  \n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, c9, c9+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, c9, c9);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, c9, c9);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, c9, c9+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, c9, c9+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, c9, c9);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, c9, c9+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, c9, c9);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, c9, c9);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, c9, c9);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, c9, c9+5);\n+  \n+  // ' '\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, cs, cs+5);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, cs, cs+5);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, cs, cs+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, cs, cs+5);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, cs, cs+5);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, cs, cs+5);\n+  VERIFY_SCAN_IS (std::ctype_base::print, cs, cs);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, cs, cs+5);\n+  VERIFY_SCAN_IS (std::ctype_base::space, cs, cs);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, cs, cs+5);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, cs, cs+5);\n+  \n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, cs, cs);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, cs, cs);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, cs, cs);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, cs, cs);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, cs, cs);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, cs, cs);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, cs, cs+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, cs, cs);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, cs, cs+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, cs, cs);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, cs, cs);\n+  \n+  // 'f'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, xf, xf);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, xf, xf);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, xf, xf+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, xf, xf+5);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, xf, xf);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, xf, xf);\n+  VERIFY_SCAN_IS (std::ctype_base::print, xf, xf);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, xf, xf+5);\n+  VERIFY_SCAN_IS (std::ctype_base::space, xf, xf+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, xf, xf+5);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, xf, xf);\n+  \n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, xf, xf+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, xf, xf+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, xf, xf);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, xf, xf);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, xf, xf+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, xf, xf+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, xf, xf+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, xf, xf);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, xf, xf);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, xf, xf);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, xf, xf+5);\n+  \n+  // 'F'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, xF, xF);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, xF, xF);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, xF, xF+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, xF, xF+5);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, xF, xF);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, xF, xF+5);\n+  VERIFY_SCAN_IS (std::ctype_base::print, xF, xF);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, xF, xF+5);\n+  VERIFY_SCAN_IS (std::ctype_base::space, xF, xF+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, xF, xF);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, xF, xF);\n+  \n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, xF, xF+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, xF, xF+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, xF, xF);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, xF, xF);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, xF, xF+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, xF, xF);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, xF, xF+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, xF, xF);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, xF, xF);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, xF, xF+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, xF, xF+5);\n+  \n+  // '!'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, p1, p1+5);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, p1, p1+5);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, p1, p1+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, p1, p1+5);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, p1, p1);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, p1, p1+5);\n+  VERIFY_SCAN_IS (std::ctype_base::print, p1, p1);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, p1, p1);\n+  VERIFY_SCAN_IS (std::ctype_base::space, p1, p1+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, p1, p1+5);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, p1, p1+5);\n+  \n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, p1, p1);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, p1, p1);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, p1, p1);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, p1, p1);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, p1, p1);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, p1, p1+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, p1, p1+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, p1, p1);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, p1, p1);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, p1, p1);\n+  \n+  // '/'\n+  VERIFY_SCAN_IS (std::ctype_base::alnum, p2, p2+5);\n+  VERIFY_SCAN_IS (std::ctype_base::alpha, p2, p2+5);\n+  VERIFY_SCAN_IS (std::ctype_base::cntrl, p2, p2+5);\n+  VERIFY_SCAN_IS (std::ctype_base::digit, p2, p2+5);\n+  VERIFY_SCAN_IS (std::ctype_base::graph, p2, p2);\n+  VERIFY_SCAN_IS (std::ctype_base::lower, p2, p2+5);\n+  VERIFY_SCAN_IS (std::ctype_base::print, p2, p2);\n+  VERIFY_SCAN_IS (std::ctype_base::punct, p2, p2);\n+  VERIFY_SCAN_IS (std::ctype_base::space, p2, p2+5);\n+  VERIFY_SCAN_IS (std::ctype_base::upper, p2, p2+5);\n+  VERIFY_SCAN_IS (std::ctype_base::xdigit, p2, p2+5);\n+\n+  VERIFY_SCAN_NOT (std::ctype_base::alnum, p2, p2);\n+  VERIFY_SCAN_NOT (std::ctype_base::alpha, p2, p2);\n+  VERIFY_SCAN_NOT (std::ctype_base::cntrl, p2, p2);\n+  VERIFY_SCAN_NOT (std::ctype_base::digit, p2, p2);\n+  VERIFY_SCAN_NOT (std::ctype_base::graph, p2, p2+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::lower, p2, p2);\n+  VERIFY_SCAN_NOT (std::ctype_base::print, p2, p2+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::punct, p2, p2+5);\n+  VERIFY_SCAN_NOT (std::ctype_base::space, p2, p2);\n+  VERIFY_SCAN_NOT (std::ctype_base::upper, p2, p2);\n+  VERIFY_SCAN_NOT (std::ctype_base::xdigit, p2, p2);\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}]}