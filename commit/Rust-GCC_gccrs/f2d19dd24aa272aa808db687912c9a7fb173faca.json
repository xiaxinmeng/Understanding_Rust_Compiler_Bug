{"sha": "f2d19dd24aa272aa808db687912c9a7fb173faca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJkMTlkZDI0YWEyNzJhYTgwOGRiNjg3OTEyYzlhN2ZiMTczZmFjYQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-15T02:55:47Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-15T02:55:47Z"}, "message": "We're moving away from distributing generated files.\n\nFrom-SVN: r15446", "tree": {"sha": "1566a4f79be29b5b5f8058954864cc58b3ba40f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1566a4f79be29b5b5f8058954864cc58b3ba40f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2d19dd24aa272aa808db687912c9a7fb173faca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d19dd24aa272aa808db687912c9a7fb173faca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d19dd24aa272aa808db687912c9a7fb173faca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d19dd24aa272aa808db687912c9a7fb173faca/comments", "author": null, "committer": null, "parents": [{"sha": "a3ee32467c5c4c29066a0f490bbd20c0901a87f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ee32467c5c4c29066a0f490bbd20c0901a87f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3ee32467c5c4c29066a0f490bbd20c0901a87f2"}], "stats": {"total": 26208, "additions": 0, "deletions": 26208}, "files": [{"sha": "b396df3c015c698354d36f4ee9c6b33c33f58268", "filename": "gcc/f/g77.info", "status": "removed", "additions": 0, "deletions": 751, "changes": 751, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2", "patch": "@@ -1,751 +0,0 @@\n-This is Info file g77.info, produced by Makeinfo version 1.68 from the\n-input file g77.texi.\n-\n-   This file explains how to use the GNU Fortran system.\n-\n-   Published by the Free Software Foundation 59 Temple Place - Suite 330\n-Boston, MA 02111-1307 USA\n-\n-   Copyright (C) 1995-1997 Free Software Foundation, Inc.\n-\n-   Permission is granted to make and distribute verbatim copies of this\n-manual provided the copyright notice and this permission notice are\n-preserved on all copies.\n-\n-   Permission is granted to copy and distribute modified versions of\n-this manual under the conditions for verbatim copying, provided also\n-that the sections entitled \"GNU General Public License,\" \"Funding for\n-Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n-included exactly as in the original, and provided that the entire\n-resulting derived work is distributed under the terms of a permission\n-notice identical to this one.\n-\n-   Permission is granted to copy and distribute translations of this\n-manual into another language, under the above conditions for modified\n-versions, except that the sections entitled \"GNU General Public\n-License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n-`Look And Feel'\", and this permission notice, may be included in\n-translations approved by the Free Software Foundation instead of in the\n-original English.\n-\n-   Contributed by James Craig Burley (<burley@gnu.ai.mit.edu>).\n-Inspired by a first pass at translating `g77-0.5.16/f/DOC' that was\n-contributed to Craig by David Ronis (<ronis@onsager.chem.mcgill.ca>).\n-\n-INFO-DIR-SECTION Fortran Programming\n-START-INFO-DIR-ENTRY\n-* g77: (g77).               The GNU Fortran compilation system.\n-END-INFO-DIR-ENTRY\n-\n-\u001f\n-Indirect:\n-g77.info-1: 1697\n-g77.info-2: 51504\n-g77.info-3: 86652\n-g77.info-4: 102421\n-g77.info-5: 148200\n-g77.info-6: 198176\n-g77.info-7: 240263\n-g77.info-8: 290181\n-g77.info-9: 339800\n-g77.info-10: 389391\n-g77.info-11: 437993\n-g77.info-12: 487886\n-g77.info-13: 537704\n-g77.info-14: 586061\n-g77.info-15: 635100\n-g77.info-16: 684261\n-g77.info-17: 734128\n-g77.info-18: 773211\n-g77.info-19: 822559\n-g77.info-20: 833284\n-\u001f\n-Tag Table:\n-(Indirect)\n-Node: Top\u007f1697\n-Node: Copying\u007f3654\n-Node: Contributors\u007f22836\n-Node: Funding\u007f25868\n-Node: Funding GNU Fortran\u007f28371\n-Node: Look and Feel\u007f31054\n-Node: Getting Started\u007f31556\n-Node: What is GNU Fortran?\u007f33874\n-Node: G77 and GCC\u007f43439\n-Node: Invoking G77\u007f44790\n-Node: Option Summary\u007f46941\n-Node: Overall Options\u007f51504\n-Node: Shorthand Options\u007f57592\n-Node: Fortran Dialect Options\u007f60070\n-Node: Warning Options\u007f70755\n-Node: Debugging Options\u007f79641\n-Node: Optimize Options\u007f80714\n-Node: Preprocessor Options\u007f84159\n-Node: Directory Options\u007f85340\n-Node: Code Gen Options\u007f86652\n-Node: Environment Variables\u007f101963\n-Node: News\u007f102421\n-Node: Changes\u007f148200\n-Node: Language\u007f162250\n-Node: Direction of Language Development\u007f164190\n-Node: Standard Support\u007f170429\n-Node: No Passing External Assumed-length\u007f171150\n-Node: No Passing Dummy Assumed-length\u007f171627\n-Node: No Pathological Implied-DO\u007f172142\n-Node: No Useless Implied-DO\u007f172829\n-Node: Conformance\u007f173560\n-Node: Notation Used\u007f175583\n-Node: Terms and Concepts\u007f179788\n-Node: Syntactic Items\u007f180300\n-Node: Statements Comments Lines\u007f180982\n-Node: Scope of Names and Labels\u007f182847\n-Node: Characters Lines Sequence\u007f183277\n-Node: Character Set\u007f183858\n-Node: Lines\u007f184859\n-Node: Continuation Line\u007f187335\n-Node: Statements\u007f188290\n-Node: Statement Labels\u007f189246\n-Node: Order\u007f189938\n-Node: INCLUDE\u007f190823\n-Node: Data Types and Constants\u007f193566\n-Node: Types\u007f197087\n-Node: Double Notation\u007f198176\n-Node: Star Notation\u007f199248\n-Node: Kind Notation\u007f202193\n-Node: Constants\u007f210613\n-Node: Integer Type\u007f211925\n-Node: Character Type\u007f212523\n-Node: Expressions\u007f213287\n-Node: %LOC()\u007f213703\n-Node: Specification Statements\u007f216404\n-Node: NAMELIST\u007f216861\n-Node: DOUBLE COMPLEX\u007f217143\n-Node: Control Statements\u007f217397\n-Node: DO WHILE\u007f217889\n-Node: END DO\u007f218115\n-Node: Construct Names\u007f219122\n-Node: CYCLE and EXIT\u007f219862\n-Node: Functions and Subroutines\u007f222626\n-Node: %VAL()\u007f223272\n-Node: %REF()\u007f224636\n-Node: %DESCR()\u007f226464\n-Node: Generics and Specifics\u007f228597\n-Node: REAL() and AIMAG() of Complex\u007f235792\n-Node: CMPLX() of DOUBLE PRECISION\u007f237625\n-Node: MIL-STD 1753\u007f239351\n-Node: f77/f2c Intrinsics\u007f239693\n-Node: Table of Intrinsic Functions\u007f240263\n-Node: Abort Intrinsic\u007f256970\n-Node: Abs Intrinsic\u007f257234\n-Node: Access Intrinsic\u007f258102\n-Node: AChar Intrinsic\u007f258938\n-Node: ACos Intrinsic\u007f259460\n-Node: AdjustL Intrinsic\u007f259921\n-Node: AdjustR Intrinsic\u007f260246\n-Node: AImag Intrinsic\u007f260572\n-Node: AInt Intrinsic\u007f261377\n-Node: Alarm Intrinsic\u007f262005\n-Node: All Intrinsic\u007f262841\n-Node: Allocated Intrinsic\u007f263153\n-Node: ALog Intrinsic\u007f263482\n-Node: ALog10 Intrinsic\u007f263872\n-Node: AMax0 Intrinsic\u007f264270\n-Node: AMax1 Intrinsic\u007f264755\n-Node: AMin0 Intrinsic\u007f265208\n-Node: AMin1 Intrinsic\u007f265692\n-Node: AMod Intrinsic\u007f266144\n-Node: And Intrinsic\u007f266570\n-Node: ANInt Intrinsic\u007f267076\n-Node: Any Intrinsic\u007f267840\n-Node: ASin Intrinsic\u007f268147\n-Node: Associated Intrinsic\u007f268605\n-Node: ATan Intrinsic\u007f268939\n-Node: ATan2 Intrinsic\u007f269405\n-Node: BesJ0 Intrinsic\u007f269956\n-Node: BesJ1 Intrinsic\u007f270417\n-Node: BesJN Intrinsic\u007f270878\n-Node: BesY0 Intrinsic\u007f271377\n-Node: BesY1 Intrinsic\u007f271839\n-Node: BesYN Intrinsic\u007f272301\n-Node: Bit_Size Intrinsic\u007f272804\n-Node: BTest Intrinsic\u007f273463\n-Node: CAbs Intrinsic\u007f274183\n-Node: CCos Intrinsic\u007f274570\n-Node: Ceiling Intrinsic\u007f274962\n-Node: CExp Intrinsic\u007f275284\n-Node: Char Intrinsic\u007f275676\n-Node: ChDir Intrinsic (subroutine)\u007f276930\n-Node: ChMod Intrinsic (subroutine)\u007f277739\n-Node: CLog Intrinsic\u007f279008\n-Node: Cmplx Intrinsic\u007f279412\n-Node: Complex Intrinsic\u007f280213\n-Node: Conjg Intrinsic\u007f281659\n-Node: Cos Intrinsic\u007f282083\n-Node: CosH Intrinsic\u007f282546\n-Node: Count Intrinsic\u007f282921\n-Node: Cpu_Time Intrinsic\u007f283239\n-Node: CShift Intrinsic\u007f283702\n-Node: CSin Intrinsic\u007f284024\n-Node: CSqRt Intrinsic\u007f284416\n-Node: CTime Intrinsic (subroutine)\u007f284826\n-Node: CTime Intrinsic (function)\u007f285581\n-Node: DAbs Intrinsic\u007f286215\n-Node: DACos Intrinsic\u007f286611\n-Node: DASin Intrinsic\u007f287002\n-Node: DATan Intrinsic\u007f287394\n-Node: DATan2 Intrinsic\u007f287787\n-Node: Date_and_Time Intrinsic\u007f288242\n-Node: DbesJ0 Intrinsic\u007f288592\n-Node: DbesJ1 Intrinsic\u007f288985\n-Node: DbesJN Intrinsic\u007f289371\n-Node: DbesY0 Intrinsic\u007f289795\n-Node: DbesY1 Intrinsic\u007f290181\n-Node: DbesYN Intrinsic\u007f290567\n-Node: Dble Intrinsic\u007f290989\n-Node: DCos Intrinsic\u007f291695\n-Node: DCosH Intrinsic\u007f292079\n-Node: DDiM Intrinsic\u007f292469\n-Node: DErF Intrinsic\u007f292901\n-Node: DErFC Intrinsic\u007f293270\n-Node: DExp Intrinsic\u007f293645\n-Node: Digits Intrinsic\u007f294031\n-Node: DiM Intrinsic\u007f294348\n-Node: DInt Intrinsic\u007f294847\n-Node: DLog Intrinsic\u007f295231\n-Node: DLog10 Intrinsic\u007f295616\n-Node: DMax1 Intrinsic\u007f296014\n-Node: DMin1 Intrinsic\u007f296468\n-Node: DMod Intrinsic\u007f296920\n-Node: DNInt Intrinsic\u007f297348\n-Node: Dot_Product Intrinsic\u007f297747\n-Node: DProd Intrinsic\u007f298087\n-Node: DSign Intrinsic\u007f298469\n-Node: DSin Intrinsic\u007f298908\n-Node: DSinH Intrinsic\u007f299293\n-Node: DSqRt Intrinsic\u007f299684\n-Node: DTan Intrinsic\u007f300075\n-Node: DTanH Intrinsic\u007f300460\n-Node: Dtime Intrinsic (subroutine)\u007f300864\n-Node: EOShift Intrinsic\u007f301799\n-Node: Epsilon Intrinsic\u007f302138\n-Node: ErF Intrinsic\u007f302462\n-Node: ErFC Intrinsic\u007f302868\n-Node: ETime Intrinsic (subroutine)\u007f303426\n-Node: ETime Intrinsic (function)\u007f304253\n-Node: Exit Intrinsic\u007f304957\n-Node: Exp Intrinsic\u007f305434\n-Node: Exponent Intrinsic\u007f305896\n-Node: Fdate Intrinsic (subroutine)\u007f306235\n-Node: Fdate Intrinsic (function)\u007f306923\n-Node: FGet Intrinsic (subroutine)\u007f307473\n-Node: FGetC Intrinsic (subroutine)\u007f308310\n-Node: Float Intrinsic\u007f309187\n-Node: Floor Intrinsic\u007f309587\n-Node: Flush Intrinsic\u007f309903\n-Node: FNum Intrinsic\u007f310482\n-Node: FPut Intrinsic (subroutine)\u007f310930\n-Node: FPutC Intrinsic (subroutine)\u007f311727\n-Node: Fraction Intrinsic\u007f312574\n-Node: FSeek Intrinsic\u007f312915\n-Node: FStat Intrinsic (subroutine)\u007f313640\n-Node: FStat Intrinsic (function)\u007f315109\n-Node: FTell Intrinsic (subroutine)\u007f316343\n-Node: FTell Intrinsic (function)\u007f317016\n-Node: GError Intrinsic\u007f317533\n-Node: GetArg Intrinsic\u007f317907\n-Node: GetCWD Intrinsic (subroutine)\u007f318543\n-Node: GetCWD Intrinsic (function)\u007f319399\n-Node: GetEnv Intrinsic\u007f320019\n-Node: GetGId Intrinsic\u007f320606\n-Node: GetLog Intrinsic\u007f320912\n-Node: GetPId Intrinsic\u007f321236\n-Node: GetUId Intrinsic\u007f321544\n-Node: GMTime Intrinsic\u007f321849\n-Node: HostNm Intrinsic (subroutine)\u007f322857\n-Node: HostNm Intrinsic (function)\u007f323729\n-Node: Huge Intrinsic\u007f324354\n-Node: IAbs Intrinsic\u007f324677\n-Node: IAChar Intrinsic\u007f325068\n-Node: IAnd Intrinsic\u007f325608\n-Node: IArgC Intrinsic\u007f326096\n-Node: IBClr Intrinsic\u007f326472\n-Node: IBits Intrinsic\u007f326982\n-Node: IBSet Intrinsic\u007f327696\n-Node: IChar Intrinsic\u007f328197\n-Node: IDate Intrinsic (UNIX)\u007f329416\n-Node: IDiM Intrinsic\u007f329997\n-Node: IDInt Intrinsic\u007f330446\n-Node: IDNInt Intrinsic\u007f330839\n-Node: IEOr Intrinsic\u007f331238\n-Node: IErrNo Intrinsic\u007f331736\n-Node: IFix Intrinsic\u007f332063\n-Node: Imag Intrinsic\u007f332451\n-Node: ImagPart Intrinsic\u007f333456\n-Node: Index Intrinsic\u007f334482\n-Node: Int Intrinsic\u007f335035\n-Node: Int2 Intrinsic\u007f335750\n-Node: Int8 Intrinsic\u007f336438\n-Node: IOr Intrinsic\u007f337126\n-Node: IRand Intrinsic\u007f337606\n-Node: IsaTty Intrinsic\u007f338526\n-Node: IShft Intrinsic\u007f338950\n-Node: IShftC Intrinsic\u007f339800\n-Node: ISign Intrinsic\u007f340728\n-Node: ITime Intrinsic\u007f341178\n-Node: Kill Intrinsic (subroutine)\u007f341580\n-Node: Kind Intrinsic\u007f342417\n-Node: LBound Intrinsic\u007f342742\n-Node: Len Intrinsic\u007f343059\n-Node: Len_Trim Intrinsic\u007f343695\n-Node: LGe Intrinsic\u007f344107\n-Node: LGt Intrinsic\u007f345520\n-Node: Link Intrinsic (subroutine)\u007f346426\n-Node: LLe Intrinsic\u007f347391\n-Node: LLt Intrinsic\u007f348297\n-Node: LnBlnk Intrinsic\u007f349192\n-Node: Loc Intrinsic\u007f349595\n-Node: Log Intrinsic\u007f350026\n-Node: Log10 Intrinsic\u007f350606\n-Node: Logical Intrinsic\u007f351179\n-Node: Long Intrinsic\u007f351502\n-Node: LShift Intrinsic\u007f352026\n-Node: LStat Intrinsic (subroutine)\u007f353062\n-Node: LStat Intrinsic (function)\u007f354818\n-Node: LTime Intrinsic\u007f356325\n-Node: MatMul Intrinsic\u007f357329\n-Node: Max Intrinsic\u007f357647\n-Node: Max0 Intrinsic\u007f358198\n-Node: Max1 Intrinsic\u007f358649\n-Node: MaxExponent Intrinsic\u007f359133\n-Node: MaxLoc Intrinsic\u007f359473\n-Node: MaxVal Intrinsic\u007f359800\n-Node: MClock Intrinsic\u007f360122\n-Node: MClock8 Intrinsic\u007f360849\n-Node: Merge Intrinsic\u007f361567\n-Node: Min Intrinsic\u007f361883\n-Node: Min0 Intrinsic\u007f362434\n-Node: Min1 Intrinsic\u007f362885\n-Node: MinExponent Intrinsic\u007f363369\n-Node: MinLoc Intrinsic\u007f363709\n-Node: MinVal Intrinsic\u007f364036\n-Node: Mod Intrinsic\u007f364355\n-Node: Modulo Intrinsic\u007f364878\n-Node: MvBits Intrinsic\u007f365197\n-Node: Nearest Intrinsic\u007f366063\n-Node: NInt Intrinsic\u007f366387\n-Node: Not Intrinsic\u007f367225\n-Node: Or Intrinsic\u007f367620\n-Node: Pack Intrinsic\u007f368118\n-Node: PError Intrinsic\u007f368428\n-Node: Precision Intrinsic\u007f368882\n-Node: Present Intrinsic\u007f369217\n-Node: Product Intrinsic\u007f369547\n-Node: Radix Intrinsic\u007f369873\n-Node: Rand Intrinsic\u007f370190\n-Node: Random_Number Intrinsic\u007f371077\n-Node: Random_Seed Intrinsic\u007f371430\n-Node: Range Intrinsic\u007f371778\n-Node: Real Intrinsic\u007f372099\n-Node: RealPart Intrinsic\u007f373105\n-Node: Rename Intrinsic (subroutine)\u007f374138\n-Node: Repeat Intrinsic\u007f375110\n-Node: Reshape Intrinsic\u007f375446\n-Node: RRSpacing Intrinsic\u007f375775\n-Node: RShift Intrinsic\u007f376110\n-Node: Scale Intrinsic\u007f377108\n-Node: Scan Intrinsic\u007f377424\n-Node: Second Intrinsic (function)\u007f377748\n-Node: Second Intrinsic (subroutine)\u007f378288\n-Node: Selected_Int_Kind Intrinsic\u007f378934\n-Node: Selected_Real_Kind Intrinsic\u007f379325\n-Node: Set_Exponent Intrinsic\u007f379712\n-Node: Shape Intrinsic\u007f380069\n-Node: Short Intrinsic\u007f380392\n-Node: Sign Intrinsic\u007f381088\n-Node: Signal Intrinsic (subroutine)\u007f381688\n-Node: Sin Intrinsic\u007f382987\n-Node: SinH Intrinsic\u007f383462\n-Node: Sleep Intrinsic\u007f383835\n-Node: Sngl Intrinsic\u007f384177\n-Node: Spacing Intrinsic\u007f384566\n-Node: Spread Intrinsic\u007f384890\n-Node: SqRt Intrinsic\u007f385211\n-Node: SRand Intrinsic\u007f385815\n-Node: Stat Intrinsic (subroutine)\u007f386192\n-Node: Stat Intrinsic (function)\u007f387751\n-Node: Sum Intrinsic\u007f389059\n-Node: SymLnk Intrinsic (subroutine)\u007f389391\n-Node: System Intrinsic (subroutine)\u007f390423\n-Node: System_Clock Intrinsic\u007f391362\n-Node: Tan Intrinsic\u007f392130\n-Node: TanH Intrinsic\u007f392590\n-Node: Time Intrinsic (UNIX)\u007f392972\n-Node: Time8 Intrinsic\u007f393786\n-Node: Tiny Intrinsic\u007f394499\n-Node: Transfer Intrinsic\u007f394814\n-Node: Transpose Intrinsic\u007f395145\n-Node: Trim Intrinsic\u007f395479\n-Node: TtyNam Intrinsic (subroutine)\u007f395809\n-Node: TtyNam Intrinsic (function)\u007f396508\n-Node: UBound Intrinsic\u007f397077\n-Node: UMask Intrinsic (subroutine)\u007f397422\n-Node: Unlink Intrinsic (subroutine)\u007f398119\n-Node: Unpack Intrinsic\u007f399017\n-Node: Verify Intrinsic\u007f399352\n-Node: XOr Intrinsic\u007f399671\n-Node: ZAbs Intrinsic\u007f400187\n-Node: ZCos Intrinsic\u007f400556\n-Node: ZExp Intrinsic\u007f400929\n-Node: ZLog Intrinsic\u007f401302\n-Node: ZSin Intrinsic\u007f401675\n-Node: ZSqRt Intrinsic\u007f402049\n-Node: Scope and Classes of Names\u007f402406\n-Node: Underscores in Symbol Names\u007f402876\n-Node: Other Dialects\u007f403123\n-Node: Source Form\u007f404282\n-Node: Carriage Returns\u007f405633\n-Node: Tabs\u007f405962\n-Node: Short Lines\u007f407671\n-Node: Long Lines\u007f408645\n-Node: Ampersands\u007f409256\n-Node: Trailing Comment\u007f409510\n-Node: Debug Line\u007f410286\n-Node: Dollar Signs\u007f410955\n-Node: Case Sensitivity\u007f411241\n-Node: VXT Fortran\u007f419857\n-Node: Double Quote Meaning\u007f421040\n-Node: Exclamation Point\u007f421968\n-Node: Fortran 90\u007f423011\n-Node: Pedantic Compilation\u007f424063\n-Node: Distensions\u007f428027\n-Node: Ugly Implicit Argument Conversion\u007f429558\n-Node: Ugly Assumed-Size Arrays\u007f430172\n-Node: Ugly Complex Part Extraction\u007f431893\n-Node: Ugly Null Arguments\u007f433515\n-Node: Ugly Conversion of Initializers\u007f435120\n-Node: Ugly Integer Conversions\u007f436885\n-Node: Ugly Assigned Labels\u007f437993\n-Node: Compiler\u007f439924\n-Node: Compiler Limits\u007f440530\n-Node: Compiler Types\u007f441413\n-Node: Compiler Constants\u007f446112\n-Node: Compiler Intrinsics\u007f446971\n-Node: Intrinsic Groups\u007f447898\n-Node: Other Intrinsics\u007f451339\n-Node: ACosD Intrinsic\u007f458937\n-Node: AIMax0 Intrinsic\u007f459218\n-Node: AIMin0 Intrinsic\u007f459527\n-Node: AJMax0 Intrinsic\u007f459837\n-Node: AJMin0 Intrinsic\u007f460147\n-Node: ASinD Intrinsic\u007f460456\n-Node: ATan2D Intrinsic\u007f460762\n-Node: ATanD Intrinsic\u007f461070\n-Node: BITest Intrinsic\u007f461376\n-Node: BJTest Intrinsic\u007f461685\n-Node: CDAbs Intrinsic\u007f461994\n-Node: CDCos Intrinsic\u007f462367\n-Node: CDExp Intrinsic\u007f462742\n-Node: CDLog Intrinsic\u007f463117\n-Node: CDSin Intrinsic\u007f463492\n-Node: CDSqRt Intrinsic\u007f463868\n-Node: ChDir Intrinsic (function)\u007f464261\n-Node: ChMod Intrinsic (function)\u007f464895\n-Node: CosD Intrinsic\u007f466007\n-Node: DACosD Intrinsic\u007f466319\n-Node: DASinD Intrinsic\u007f466627\n-Node: DATan2D Intrinsic\u007f466938\n-Node: DATanD Intrinsic\u007f467252\n-Node: Date Intrinsic\u007f467561\n-Node: DbleQ Intrinsic\u007f468190\n-Node: DCmplx Intrinsic\u007f468494\n-Node: DConjg Intrinsic\u007f470125\n-Node: DCosD Intrinsic\u007f470510\n-Node: DFloat Intrinsic\u007f470816\n-Node: DFlotI Intrinsic\u007f471188\n-Node: DFlotJ Intrinsic\u007f471498\n-Node: DImag Intrinsic\u007f471807\n-Node: DReal Intrinsic\u007f472184\n-Node: DSinD Intrinsic\u007f473331\n-Node: DTanD Intrinsic\u007f473635\n-Node: Dtime Intrinsic (function)\u007f473950\n-Node: FGet Intrinsic (function)\u007f474844\n-Node: FGetC Intrinsic (function)\u007f475617\n-Node: FloatI Intrinsic\u007f476433\n-Node: FloatJ Intrinsic\u007f476753\n-Node: FPut Intrinsic (function)\u007f477072\n-Node: FPutC Intrinsic (function)\u007f477808\n-Node: IDate Intrinsic (VXT)\u007f478601\n-Node: IIAbs Intrinsic\u007f479320\n-Node: IIAnd Intrinsic\u007f479630\n-Node: IIBClr Intrinsic\u007f479935\n-Node: IIBits Intrinsic\u007f480244\n-Node: IIBSet Intrinsic\u007f480554\n-Node: IIDiM Intrinsic\u007f480863\n-Node: IIDInt Intrinsic\u007f481169\n-Node: IIDNnt Intrinsic\u007f481478\n-Node: IIEOr Intrinsic\u007f481787\n-Node: IIFix Intrinsic\u007f482092\n-Node: IInt Intrinsic\u007f482395\n-Node: IIOr Intrinsic\u007f482694\n-Node: IIQint Intrinsic\u007f482994\n-Node: IIQNnt Intrinsic\u007f483302\n-Node: IIShftC Intrinsic\u007f483613\n-Node: IISign Intrinsic\u007f483927\n-Node: IMax0 Intrinsic\u007f484237\n-Node: IMax1 Intrinsic\u007f484542\n-Node: IMin0 Intrinsic\u007f484846\n-Node: IMin1 Intrinsic\u007f485150\n-Node: IMod Intrinsic\u007f485453\n-Node: INInt Intrinsic\u007f485753\n-Node: INot Intrinsic\u007f486055\n-Node: IZExt Intrinsic\u007f486355\n-Node: JIAbs Intrinsic\u007f486658\n-Node: JIAnd Intrinsic\u007f486962\n-Node: JIBClr Intrinsic\u007f487267\n-Node: JIBits Intrinsic\u007f487576\n-Node: JIBSet Intrinsic\u007f487886\n-Node: JIDiM Intrinsic\u007f488195\n-Node: JIDInt Intrinsic\u007f488501\n-Node: JIDNnt Intrinsic\u007f488810\n-Node: JIEOr Intrinsic\u007f489119\n-Node: JIFix Intrinsic\u007f489424\n-Node: JInt Intrinsic\u007f489727\n-Node: JIOr Intrinsic\u007f490026\n-Node: JIQint Intrinsic\u007f490326\n-Node: JIQNnt Intrinsic\u007f490634\n-Node: JIShft Intrinsic\u007f490944\n-Node: JIShftC Intrinsic\u007f491255\n-Node: JISign Intrinsic\u007f491569\n-Node: JMax0 Intrinsic\u007f491879\n-Node: JMax1 Intrinsic\u007f492184\n-Node: JMin0 Intrinsic\u007f492488\n-Node: JMin1 Intrinsic\u007f492792\n-Node: JMod Intrinsic\u007f493095\n-Node: JNInt Intrinsic\u007f493395\n-Node: JNot Intrinsic\u007f493697\n-Node: JZExt Intrinsic\u007f493997\n-Node: Kill Intrinsic (function)\u007f494310\n-Node: Link Intrinsic (function)\u007f494992\n-Node: QAbs Intrinsic\u007f495804\n-Node: QACos Intrinsic\u007f496114\n-Node: QACosD Intrinsic\u007f496418\n-Node: QASin Intrinsic\u007f496726\n-Node: QASinD Intrinsic\u007f497032\n-Node: QATan Intrinsic\u007f497340\n-Node: QATan2 Intrinsic\u007f497646\n-Node: QATan2D Intrinsic\u007f497956\n-Node: QATanD Intrinsic\u007f498270\n-Node: QCos Intrinsic\u007f498579\n-Node: QCosD Intrinsic\u007f498880\n-Node: QCosH Intrinsic\u007f499183\n-Node: QDiM Intrinsic\u007f499486\n-Node: QExp Intrinsic\u007f499785\n-Node: QExt Intrinsic\u007f500083\n-Node: QExtD Intrinsic\u007f500382\n-Node: QFloat Intrinsic\u007f500686\n-Node: QInt Intrinsic\u007f500993\n-Node: QLog Intrinsic\u007f501293\n-Node: QLog10 Intrinsic\u007f501593\n-Node: QMax1 Intrinsic\u007f501900\n-Node: QMin1 Intrinsic\u007f502205\n-Node: QMod Intrinsic\u007f502508\n-Node: QNInt Intrinsic\u007f502808\n-Node: QSin Intrinsic\u007f503110\n-Node: QSinD Intrinsic\u007f503410\n-Node: QSinH Intrinsic\u007f503713\n-Node: QSqRt Intrinsic\u007f504017\n-Node: QTan Intrinsic\u007f504320\n-Node: QTanD Intrinsic\u007f504620\n-Node: QTanH Intrinsic\u007f504923\n-Node: Rename Intrinsic (function)\u007f505239\n-Node: Secnds Intrinsic\u007f506044\n-Node: Signal Intrinsic (function)\u007f506419\n-Node: SinD Intrinsic\u007f507530\n-Node: SnglQ Intrinsic\u007f507842\n-Node: SymLnk Intrinsic (function)\u007f508157\n-Node: System Intrinsic (function)\u007f509025\n-Node: TanD Intrinsic\u007f510352\n-Node: Time Intrinsic (VXT)\u007f510669\n-Node: UMask Intrinsic (function)\u007f511200\n-Node: Unlink Intrinsic (function)\u007f511808\n-Node: ZExt Intrinsic\u007f512537\n-Node: Other Compilers\u007f512825\n-Node: Dropping f2c Compatibility\u007f515205\n-Node: Compilers Other Than f2c\u007f518031\n-Node: Other Languages\u007f519830\n-Node: Interoperating with C and C++\u007f520082\n-Node: C Interfacing Tools\u007f521115\n-Node: C Access to Type Information\u007f522043\n-Node: f2c Skeletons and Prototypes\u007f522730\n-Node: C++ Considerations\u007f524428\n-Node: Startup Code\u007f525083\n-Node: Installation\u007f525994\n-Node: Prerequisites\u007f527150\n-Node: Problems Installing\u007f535614\n-Node: General Problems\u007f536240\n-Node: GNU C Required\u007f537003\n-Node: Patching GNU CC Necessary\u007f537704\n-Node: Building GNU CC Necessary\u007f538554\n-Node: Missing strtoul\u007f538900\n-Node: Object File Differences\u007f540314\n-Node: Cleanup Kills Stage Directories\u007f541011\n-Node: Missing gperf?\u007f541431\n-Node: Cross-compiler Problems\u007f542819\n-Node: Settings\u007f545024\n-Node: Larger File Unit Numbers\u007f546102\n-Node: Always Flush Output\u007f547685\n-Node: Maximum Stackable Size\u007f549545\n-Node: Floating-point Bit Patterns\u007f550401\n-Node: Large Initialization\u007f551142\n-Node: Alpha Problems Fixed\u007f552731\n-Node: Quick Start\u007f553618\n-Node: Complete Installation\u007f564031\n-Node: Unpacking\u007f564611\n-Node: Merging Distributions\u007f567700\n-Node: Installing f77\u007f573149\n-Node: Installing f2c\u007f574494\n-Node: Patching GNU Fortran\u007f577419\n-Node: Where to Install\u007f578937\n-Node: Configuring gcc\u007f582282\n-Node: Building gcc\u007f584054\n-Node: Bootstrap Build\u007f586061\n-Node: Straight Build\u007f587807\n-Node: Pre-installation Checks\u007f589196\n-Node: Installation of Binaries\u007f592622\n-Node: Updating Documentation\u007f593983\n-Node: Missing bison?\u007f594837\n-Node: Missing makeinfo?\u007f596183\n-Node: Distributing Binaries\u007f596708\n-Node: Debugging and Interfacing\u007f602653\n-Node: Main Program Unit\u007f605337\n-Node: Procedures\u007f607834\n-Node: Functions\u007f610495\n-Node: Names\u007f612113\n-Node: Common Blocks\u007f615254\n-Node: Local Equivalence Areas\u007f617287\n-Node: Complex Variables\u007f619974\n-Node: Arrays\u007f621304\n-Node: Adjustable Arrays\u007f624638\n-Node: Alternate Entry Points\u007f627497\n-Node: Alternate Returns\u007f634199\n-Node: Assigned Statement Labels\u007f635100\n-Node: Run-time Library Errors\u007f636945\n-Node: Collected Fortran Wisdom\u007f638897\n-Node: Advantages Over f2c\u007f640333\n-Node: Language Extensions\u007f641242\n-Node: Compiler Options\u007f641749\n-Node: Compiler Speed\u007f642201\n-Node: Program Speed\u007f642911\n-Node: Ease of Debugging\u007f644496\n-Node: Character and Hollerith Constants\u007f646926\n-Node: Block Data and Libraries\u007f647720\n-Node: Loops\u007f651044\n-Node: Working Programs\u007f656260\n-Node: Not My Type\u007f656940\n-Node: Variables Assumed To Be Zero\u007f658871\n-Node: Variables Assumed To Be Saved\u007f659925\n-Node: Unwanted Variables\u007f661295\n-Node: Unused Arguments\u007f662175\n-Node: Surprising Interpretations of Code\u007f662638\n-Node: Aliasing Assumed To Work\u007f663484\n-Node: Output Assumed To Flush\u007f669400\n-Node: Large File Unit Numbers\u007f670806\n-Node: Overly Convenient Options\u007f672088\n-Node: Faster Programs\u007f675698\n-Node: Aligned Data\u007f676144\n-Node: Prefer Automatic Uninitialized Variables\u007f679988\n-Node: Avoid f2c Compatibility\u007f681354\n-Node: Use Submodel Options\u007f681822\n-Node: Trouble\u007f682645\n-Node: But-bugs\u007f684261\n-Node: Signal 11 and Friends\u007f686035\n-Node: Cannot Link Fortran Programs\u007f688114\n-Node: Large Common Blocks\u007f689397\n-Node: Debugger Problems\u007f689823\n-Node: NeXTStep Problems\u007f690345\n-Node: Stack Overflow\u007f692167\n-Node: Nothing Happens\u007f694180\n-Node: Strange Behavior at Run Time\u007f695794\n-Node: Floating-point Errors\u007f698087\n-Node: Actual Bugs\u007f702664\n-Node: Missing Features\u007f713415\n-Node: Better Source Model\u007f715132\n-Node: Fortran 90 Support\u007f716901\n-Node: Intrinsics in PARAMETER Statements\u007f718002\n-Node: SELECT CASE on CHARACTER Type\u007f718888\n-Node: RECURSIVE Keyword\u007f719186\n-Node: Increasing Precision/Range\u007f719613\n-Node: Popular Non-standard Types\u007f721150\n-Node: Full Support for Compiler Types\u007f721567\n-Node: Array Bounds Expressions\u007f722239\n-Node: POINTER Statements\u007f722686\n-Node: Sensible Non-standard Constructs\u007f723569\n-Node: FLUSH Statement\u007f725894\n-Node: Expressions in FORMAT Statements\u007f726280\n-Node: Explicit Assembler Code\u007f727459\n-Node: Q Edit Descriptor\u007f727748\n-Node: Old-style PARAMETER Statements\u007f728252\n-Node: TYPE and ACCEPT I/O Statements\u007f728986\n-Node: STRUCTURE UNION RECORD MAP\u007f729552\n-Node: OPEN CLOSE and INQUIRE Keywords\u007f730038\n-Node: ENCODE and DECODE\u007f730470\n-Node: Suppressing Space Padding\u007f731571\n-Node: Fortran Preprocessor\u007f732797\n-Node: Bit Operations on Floating-point Data\u007f733370\n-Node: POSIX Standard\u007f733884\n-Node: Floating-point Exception Handling\u007f734128\n-Node: Nonportable Conversions\u007f735170\n-Node: Large Automatic Arrays\u007f735706\n-Node: Support for Threads\u007f736113\n-Node: Gracefully Handle Sensible Bad Code\u007f736538\n-Node: Non-standard Conversions\u007f737293\n-Node: Non-standard Intrinsics\u007f737636\n-Node: Modifying DO Variable\u007f738052\n-Node: Better Pedantic Compilation\u007f738728\n-Node: Warn About Implicit Conversions\u007f739356\n-Node: Invalid Use of Hollerith Constant\u007f739943\n-Node: Dummy Array Without Dimensioning Dummy\u007f740486\n-Node: Invalid FORMAT Specifiers\u007f741399\n-Node: Ambiguous Dialects\u007f741800\n-Node: Unused Labels\u007f742211\n-Node: Informational Messages\u007f742433\n-Node: Uninitialized Variables at Run Time\u007f742836\n-Node: Bounds Checking at Run Time\u007f743443\n-Node: Labels Visible to Debugger\u007f743891\n-Node: Disappointments\u007f744297\n-Node: Mangling of Names\u007f744935\n-Node: Multiple Definitions of External Names\u007f745785\n-Node: Limitation on Implicit Declarations\u007f747148\n-Node: Non-bugs\u007f747432\n-Node: Backslash in Constants\u007f748557\n-Node: Initializing Before Specifying\u007f753446\n-Node: Context-Sensitive Intrinsicness\u007f754588\n-Node: Context-Sensitive Constants\u007f756484\n-Node: Equivalence Versus Equality\u007f759441\n-Node: Order of Side Effects\u007f761951\n-Node: Warnings and Errors\u007f763679\n-Node: Open Questions\u007f765363\n-Node: Bugs\u007f766511\n-Node: Bug Criteria\u007f768016\n-Node: Bug Lists\u007f772439\n-Node: Bug Reporting\u007f773211\n-Node: Sending Patches\u007f786658\n-Node: Service\u007f792142\n-Node: Adding Options\u007f792610\n-Node: Projects\u007f796659\n-Node: Efficiency\u007f797504\n-Node: Better Optimization\u007f800401\n-Node: Simplify Porting\u007f803771\n-Node: More Extensions\u007f805526\n-Node: Machine Model\u007f808727\n-Node: Internals Documentation\u007f810013\n-Node: Internals Improvements\u007f810327\n-Node: Better Diagnostics\u007f813871\n-Node: Diagnostics\u007f814788\n-Node: CMPAMBIG\u007f816085\n-Node: EXPIMP\u007f822559\n-Node: INTGLOB\u007f823795\n-Node: LEX\u007f826039\n-Node: GLOBALS\u007f831431\n-Node: Index\u007f833284\n-\u001f\n-End Tag Table"}, {"sha": "87ee3cc70f94f710a8f2c38c90486b4f4f9248fd", "filename": "gcc/f/g77.info-1", "status": "removed", "additions": 0, "deletions": 1073, "changes": 1073, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-1?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2", "patch": "@@ -1,1073 +0,0 @@\n-This is Info file g77.info, produced by Makeinfo version 1.68 from the\n-input file g77.texi.\n-\n-   This file explains how to use the GNU Fortran system.\n-\n-   Published by the Free Software Foundation 59 Temple Place - Suite 330\n-Boston, MA 02111-1307 USA\n-\n-   Copyright (C) 1995-1997 Free Software Foundation, Inc.\n-\n-   Permission is granted to make and distribute verbatim copies of this\n-manual provided the copyright notice and this permission notice are\n-preserved on all copies.\n-\n-   Permission is granted to copy and distribute modified versions of\n-this manual under the conditions for verbatim copying, provided also\n-that the sections entitled \"GNU General Public License,\" \"Funding for\n-Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n-included exactly as in the original, and provided that the entire\n-resulting derived work is distributed under the terms of a permission\n-notice identical to this one.\n-\n-   Permission is granted to copy and distribute translations of this\n-manual into another language, under the above conditions for modified\n-versions, except that the sections entitled \"GNU General Public\n-License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n-`Look And Feel'\", and this permission notice, may be included in\n-translations approved by the Free Software Foundation instead of in the\n-original English.\n-\n-   Contributed by James Craig Burley (<burley@gnu.ai.mit.edu>).\n-Inspired by a first pass at translating `g77-0.5.16/f/DOC' that was\n-contributed to Craig by David Ronis (<ronis@onsager.chem.mcgill.ca>).\n-\n-INFO-DIR-SECTION Fortran Programming\n-START-INFO-DIR-ENTRY\n-* g77: (g77).               The GNU Fortran compilation system.\n-END-INFO-DIR-ENTRY\n-\n-\u001f\n-File: g77.info,  Node: Top,  Next: Copying,  Up: (DIR)\n-\n-Introduction\n-************\n-\n-   This manual documents how to run, install and port the GNU Fortran\n-compiler, as well as its new features and incompatibilities, and how to\n-report bugs.  It corresponds to GNU Fortran version 0.5.21.\n-\n-* Menu:\n-\n-* Copying::         GNU General Public License says\n-                    how you can copy and share GNU Fortran.\n-* Contributors::    People who have contributed to GNU Fortran.\n-* Funding::         How to help assure continued work for free software.\n-* Funding GNU Fortran::  How to help assure continued work on GNU Fortran.\n-* Look and Feel::   Protect your freedom--fight \"look and feel\".\n-\n-* Getting Started:: Finding your way around this manual.\n-* What is GNU Fortran?::  How `g77' fits into the universe.\n-* G77 and GCC::     You can compile Fortran, C, or other programs.\n-* Invoking G77::    Command options supported by `g77'.\n-* News::            News about recent releases of `g77'.\n-* Changes::         User-visible changes to recent releases of `g77'.\n-* Language::        The GNU Fortran language.\n-* Compiler::        The GNU Fortran compiler.\n-* Other Dialects::  Dialects of Fortran supported by `g77'.\n-* Other Compilers:: Fortran compilers other than `g77'.\n-* Other Languages:: Languages other than Fortran.\n-* Installation::    How to configure, compile and install GNU Fortran.\n-* Debugging and Interfacing::  How `g77' generates code.\n-* Collected Fortran Wisdom::  How to avoid Trouble.\n-* Trouble::         If you have trouble with GNU Fortran.\n-* Open Questions::  Things we'd like to know.\n-* Bugs::            How, why, and where to report bugs.\n-* Service::         How to find suppliers of support for GNU Fortran.\n-\n-* Adding Options::  Guidance on teaching `g77' about new options.\n-* Projects::        Projects for `g77' internals hackers.\n-\n-* M: Diagnostics.   Diagnostics produced by `g77'.\n-\n-* Index::           Index of concepts and symbol names.\n-\n-\u001f\n-File: g77.info,  Node: Copying,  Next: Contributors,  Prev: Top,  Up: Top\n-\n-GNU GENERAL PUBLIC LICENSE\n-**************************\n-\n-                         Version 2, June 1991\n-\n-     Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n-     59 Temple Place - Suite 330, Boston, MA 02111-1307, USA\n-     \n-     Everyone is permitted to copy and distribute verbatim copies\n-     of this license document, but changing it is not allowed.\n-\n-Preamble\n-========\n-\n-   The licenses for most software are designed to take away your\n-freedom to share and change it.  By contrast, the GNU General Public\n-License is intended to guarantee your freedom to share and change free\n-software--to make sure the software is free for all its users.  This\n-General Public License applies to most of the Free Software\n-Foundation's software and to any other program whose authors commit to\n-using it.  (Some other Free Software Foundation software is covered by\n-the GNU Library General Public License instead.)  You can apply it to\n-your programs, too.\n-\n-   When we speak of free software, we are referring to freedom, not\n-price.  Our General Public Licenses are designed to make sure that you\n-have the freedom to distribute copies of free software (and charge for\n-this service if you wish), that you receive source code or can get it\n-if you want it, that you can change the software or use pieces of it in\n-new free programs; and that you know you can do these things.\n-\n-   To protect your rights, we need to make restrictions that forbid\n-anyone to deny you these rights or to ask you to surrender the rights.\n-These restrictions translate to certain responsibilities for you if you\n-distribute copies of the software, or if you modify it.\n-\n-   For example, if you distribute copies of such a program, whether\n-gratis or for a fee, you must give the recipients all the rights that\n-you have.  You must make sure that they, too, receive or can get the\n-source code.  And you must show them these terms so they know their\n-rights.\n-\n-   We protect your rights with two steps: (1) copyright the software,\n-and (2) offer you this license which gives you legal permission to copy,\n-distribute and/or modify the software.\n-\n-   Also, for each author's protection and ours, we want to make certain\n-that everyone understands that there is no warranty for this free\n-software.  If the software is modified by someone else and passed on, we\n-want its recipients to know that what they have is not the original, so\n-that any problems introduced by others will not reflect on the original\n-authors' reputations.\n-\n-   Finally, any free program is threatened constantly by software\n-patents.  We wish to avoid the danger that redistributors of a free\n-program will individually obtain patent licenses, in effect making the\n-program proprietary.  To prevent this, we have made it clear that any\n-patent must be licensed for everyone's free use or not licensed at all.\n-\n-   The precise terms and conditions for copying, distribution and\n-modification follow.\n-\n-    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n-\n-  0. This License applies to any program or other work which contains a\n-     notice placed by the copyright holder saying it may be distributed\n-     under the terms of this General Public License.  The \"Program\",\n-     below, refers to any such program or work, and a \"work based on\n-     the Program\" means either the Program or any derivative work under\n-     copyright law: that is to say, a work containing the Program or a\n-     portion of it, either verbatim or with modifications and/or\n-     translated into another language.  (Hereinafter, translation is\n-     included without limitation in the term \"modification\".)  Each\n-     licensee is addressed as \"you\".\n-\n-     Activities other than copying, distribution and modification are\n-     not covered by this License; they are outside its scope.  The act\n-     of running the Program is not restricted, and the output from the\n-     Program is covered only if its contents constitute a work based on\n-     the Program (independent of having been made by running the\n-     Program).  Whether that is true depends on what the Program does.\n-\n-  1. You may copy and distribute verbatim copies of the Program's\n-     source code as you receive it, in any medium, provided that you\n-     conspicuously and appropriately publish on each copy an appropriate\n-     copyright notice and disclaimer of warranty; keep intact all the\n-     notices that refer to this License and to the absence of any\n-     warranty; and give any other recipients of the Program a copy of\n-     this License along with the Program.\n-\n-     You may charge a fee for the physical act of transferring a copy,\n-     and you may at your option offer warranty protection in exchange\n-     for a fee.\n-\n-  2. You may modify your copy or copies of the Program or any portion\n-     of it, thus forming a work based on the Program, and copy and\n-     distribute such modifications or work under the terms of Section 1\n-     above, provided that you also meet all of these conditions:\n-\n-       a. You must cause the modified files to carry prominent notices\n-          stating that you changed the files and the date of any change.\n-\n-       b. You must cause any work that you distribute or publish, that\n-          in whole or in part contains or is derived from the Program\n-          or any part thereof, to be licensed as a whole at no charge\n-          to all third parties under the terms of this License.\n-\n-       c. If the modified program normally reads commands interactively\n-          when run, you must cause it, when started running for such\n-          interactive use in the most ordinary way, to print or display\n-          an announcement including an appropriate copyright notice and\n-          a notice that there is no warranty (or else, saying that you\n-          provide a warranty) and that users may redistribute the\n-          program under these conditions, and telling the user how to\n-          view a copy of this License.  (Exception: if the Program\n-          itself is interactive but does not normally print such an\n-          announcement, your work based on the Program is not required\n-          to print an announcement.)\n-\n-     These requirements apply to the modified work as a whole.  If\n-     identifiable sections of that work are not derived from the\n-     Program, and can be reasonably considered independent and separate\n-     works in themselves, then this License, and its terms, do not\n-     apply to those sections when you distribute them as separate\n-     works.  But when you distribute the same sections as part of a\n-     whole which is a work based on the Program, the distribution of\n-     the whole must be on the terms of this License, whose permissions\n-     for other licensees extend to the entire whole, and thus to each\n-     and every part regardless of who wrote it.\n-\n-     Thus, it is not the intent of this section to claim rights or\n-     contest your rights to work written entirely by you; rather, the\n-     intent is to exercise the right to control the distribution of\n-     derivative or collective works based on the Program.\n-\n-     In addition, mere aggregation of another work not based on the\n-     Program with the Program (or with a work based on the Program) on\n-     a volume of a storage or distribution medium does not bring the\n-     other work under the scope of this License.\n-\n-  3. You may copy and distribute the Program (or a work based on it,\n-     under Section 2) in object code or executable form under the terms\n-     of Sections 1 and 2 above provided that you also do one of the\n-     following:\n-\n-       a. Accompany it with the complete corresponding machine-readable\n-          source code, which must be distributed under the terms of\n-          Sections 1 and 2 above on a medium customarily used for\n-          software interchange; or,\n-\n-       b. Accompany it with a written offer, valid for at least three\n-          years, to give any third party, for a charge no more than your\n-          cost of physically performing source distribution, a complete\n-          machine-readable copy of the corresponding source code, to be\n-          distributed under the terms of Sections 1 and 2 above on a\n-          medium customarily used for software interchange; or,\n-\n-       c. Accompany it with the information you received as to the offer\n-          to distribute corresponding source code.  (This alternative is\n-          allowed only for noncommercial distribution and only if you\n-          received the program in object code or executable form with\n-          such an offer, in accord with Subsection b above.)\n-\n-     The source code for a work means the preferred form of the work for\n-     making modifications to it.  For an executable work, complete\n-     source code means all the source code for all modules it contains,\n-     plus any associated interface definition files, plus the scripts\n-     used to control compilation and installation of the executable.\n-     However, as a special exception, the source code distributed need\n-     not include anything that is normally distributed (in either\n-     source or binary form) with the major components (compiler,\n-     kernel, and so on) of the operating system on which the executable\n-     runs, unless that component itself accompanies the executable.\n-\n-     If distribution of executable or object code is made by offering\n-     access to copy from a designated place, then offering equivalent\n-     access to copy the source code from the same place counts as\n-     distribution of the source code, even though third parties are not\n-     compelled to copy the source along with the object code.\n-\n-  4. You may not copy, modify, sublicense, or distribute the Program\n-     except as expressly provided under this License.  Any attempt\n-     otherwise to copy, modify, sublicense or distribute the Program is\n-     void, and will automatically terminate your rights under this\n-     License.  However, parties who have received copies, or rights,\n-     from you under this License will not have their licenses\n-     terminated so long as such parties remain in full compliance.\n-\n-  5. You are not required to accept this License, since you have not\n-     signed it.  However, nothing else grants you permission to modify\n-     or distribute the Program or its derivative works.  These actions\n-     are prohibited by law if you do not accept this License.\n-     Therefore, by modifying or distributing the Program (or any work\n-     based on the Program), you indicate your acceptance of this\n-     License to do so, and all its terms and conditions for copying,\n-     distributing or modifying the Program or works based on it.\n-\n-  6. Each time you redistribute the Program (or any work based on the\n-     Program), the recipient automatically receives a license from the\n-     original licensor to copy, distribute or modify the Program\n-     subject to these terms and conditions.  You may not impose any\n-     further restrictions on the recipients' exercise of the rights\n-     granted herein.  You are not responsible for enforcing compliance\n-     by third parties to this License.\n-\n-  7. If, as a consequence of a court judgment or allegation of patent\n-     infringement or for any other reason (not limited to patent\n-     issues), conditions are imposed on you (whether by court order,\n-     agreement or otherwise) that contradict the conditions of this\n-     License, they do not excuse you from the conditions of this\n-     License.  If you cannot distribute so as to satisfy simultaneously\n-     your obligations under this License and any other pertinent\n-     obligations, then as a consequence you may not distribute the\n-     Program at all.  For example, if a patent license would not permit\n-     royalty-free redistribution of the Program by all those who\n-     receive copies directly or indirectly through you, then the only\n-     way you could satisfy both it and this License would be to refrain\n-     entirely from distribution of the Program.\n-\n-     If any portion of this section is held invalid or unenforceable\n-     under any particular circumstance, the balance of the section is\n-     intended to apply and the section as a whole is intended to apply\n-     in other circumstances.\n-\n-     It is not the purpose of this section to induce you to infringe any\n-     patents or other property right claims or to contest validity of\n-     any such claims; this section has the sole purpose of protecting\n-     the integrity of the free software distribution system, which is\n-     implemented by public license practices.  Many people have made\n-     generous contributions to the wide range of software distributed\n-     through that system in reliance on consistent application of that\n-     system; it is up to the author/donor to decide if he or she is\n-     willing to distribute software through any other system and a\n-     licensee cannot impose that choice.\n-\n-     This section is intended to make thoroughly clear what is believed\n-     to be a consequence of the rest of this License.\n-\n-  8. If the distribution and/or use of the Program is restricted in\n-     certain countries either by patents or by copyrighted interfaces,\n-     the original copyright holder who places the Program under this\n-     License may add an explicit geographical distribution limitation\n-     excluding those countries, so that distribution is permitted only\n-     in or among countries not thus excluded.  In such case, this\n-     License incorporates the limitation as if written in the body of\n-     this License.\n-\n-  9. The Free Software Foundation may publish revised and/or new\n-     versions of the General Public License from time to time.  Such\n-     new versions will be similar in spirit to the present version, but\n-     may differ in detail to address new problems or concerns.\n-\n-     Each version is given a distinguishing version number.  If the\n-     Program specifies a version number of this License which applies\n-     to it and \"any later version\", you have the option of following\n-     the terms and conditions either of that version or of any later\n-     version published by the Free Software Foundation.  If the Program\n-     does not specify a version number of this License, you may choose\n-     any version ever published by the Free Software Foundation.\n-\n- 10. If you wish to incorporate parts of the Program into other free\n-     programs whose distribution conditions are different, write to the\n-     author to ask for permission.  For software which is copyrighted\n-     by the Free Software Foundation, write to the Free Software\n-     Foundation; we sometimes make exceptions for this.  Our decision\n-     will be guided by the two goals of preserving the free status of\n-     all derivatives of our free software and of promoting the sharing\n-     and reuse of software generally.\n-\n-                                NO WARRANTY\n-\n- 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO\n-     WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE\n-     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\n-     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT\n-     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT\n-     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n-     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE\n-     QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\n-     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY\n-     SERVICING, REPAIR OR CORRECTION.\n-\n- 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\n-     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY\n-     MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE\n-     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,\n-     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR\n-     INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\n-     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU\n-     OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY\n-     OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN\n-     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n-\n-                      END OF TERMS AND CONDITIONS\n-\n-How to Apply These Terms to Your New Programs\n-=============================================\n-\n-   If you develop a new program, and you want it to be of the greatest\n-possible use to the public, the best way to achieve this is to make it\n-free software which everyone can redistribute and change under these\n-terms.\n-\n-   To do so, attach the following notices to the program.  It is safest\n-to attach them to the start of each source file to most effectively\n-convey the exclusion of warranty; and each file should have at least\n-the \"copyright\" line and a pointer to where the full notice is found.\n-\n-     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.\n-     Copyright (C) 19YY  NAME OF AUTHOR\n-     \n-     This program is free software; you can redistribute it and/or modify\n-     it under the terms of the GNU General Public License as published by\n-     the Free Software Foundation; either version 2 of the License, or\n-     (at your option) any later version.\n-     \n-     This program is distributed in the hope that it will be useful,\n-     but WITHOUT ANY WARRANTY; without even the implied warranty of\n-     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-     GNU General Public License for more details.\n-     \n-     You should have received a copy of the GNU General Public License\n-     along with this program; if not, write to the Free Software\n-     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n-\n-   Also add information on how to contact you by electronic and paper\n-mail.\n-\n-   If the program is interactive, make it output a short notice like\n-this when it starts in an interactive mode:\n-\n-     Gnomovision version 69, Copyright (C) 19YY NAME OF AUTHOR\n-     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details\n-     type `show w'.\n-     This is free software, and you are welcome to redistribute it\n-     under certain conditions; type `show c' for details.\n-\n-   The hypothetical commands `show w' and `show c' should show the\n-appropriate parts of the General Public License.  Of course, the\n-commands you use may be called something other than `show w' and `show\n-c'; they could even be mouse-clicks or menu items--whatever suits your\n-program.\n-\n-   You should also get your employer (if you work as a programmer) or\n-your school, if any, to sign a \"copyright disclaimer\" for the program,\n-if necessary.  Here is a sample; alter the names:\n-\n-     Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n-     `Gnomovision' (which makes passes at compilers) written by James Hacker.\n-     \n-     SIGNATURE OF TY COON, 1 April 1989\n-     Ty Coon, President of Vice\n-\n-   This General Public License does not permit incorporating your\n-program into proprietary programs.  If your program is a subroutine\n-library, you may consider it more useful to permit linking proprietary\n-applications with the library.  If this is what you want to do, use the\n-GNU Library General Public License instead of this License.\n-\n-\u001f\n-File: g77.info,  Node: Contributors,  Next: Funding,  Prev: Copying,  Up: Top\n-\n-Contributors to GNU Fortran\n-***************************\n-\n-   In addition to James Craig Burley, who wrote the front end, many\n-people have helped create and improve GNU Fortran.\n-\n-   * The packaging and compiler portions of GNU Fortran are based\n-     largely on the GNU CC compiler.  *Note Contributors to GNU CC:\n-     (gcc)Contributors, for more information.\n-\n-   * The run-time library used by GNU Fortran is a repackaged version\n-     of the `libf2c' library (combined from the `libF77' and `libI77'\n-     libraries) provided as part of `f2c', available for free from\n-     `netlib' sites on the Internet.\n-\n-   * Cygnus Support and The Free Software Foundation contributed\n-     significant money and/or equipment to Craig's efforts.\n-\n-   * The following individuals served as alpha testers prior to `g77''s\n-     public release.  This work consisted of testing, researching,\n-     sometimes debugging, and occasionally providing small amounts of\n-     code and fixes for `g77', plus offering plenty of helpful advice\n-     to Craig:\n-\n-          Jonathan Corbet\n-\n-          Dr. Mark Fernyhough\n-\n-          Takafumi Hayashi (The University of\n-          AIzu)--<takafumi@u-aizu.ac.jp>\n-\n-          Kate Hedstrom\n-\n-          Michel Kern (INRIA and Rice\n-          University)--<Michel.Kern@inria.fr>\n-\n-          Dr. A. O. V. Le Blanc\n-\n-          Dave Love\n-\n-          Rick Lutowski\n-\n-          Toon Moene\n-\n-          Rick Niles\n-\n-          Derk Reefman\n-\n-          Wayne K. Schroll\n-\n-          Bill Thorson\n-\n-          Pedro A. M. Vazquez\n-\n-          Ian Watson\n-\n-   * Scott Snyder (<snyder@d0sgif.fnal.gov>) provided the patch to add\n-     rudimentary support for `INTEGER*1', `INTEGER*2', and `LOGICAL*1'.\n-     This inspired Craig to add further support, even though the\n-     resulting support would still be incomplete, because version 0.6\n-     is still a ways off.\n-\n-   * David Ronis (<ronis@onsager.chem.mcgill.ca>) inspired and\n-     encouraged Craig to rewrite the documentation in texinfo format by\n-     contributing a first pass at a translation of the old\n-     `g77-0.5.16/f/DOC' file.\n-\n-   * Toon Moene (<toon@moene.indiv.nluug.nl>) performed some analysis\n-     of generated code as part of an overall project to improve `g77'\n-     code generation to at least be as good as `f2c' used in\n-     conjunction with `gcc'.  So far, this has resulted in the three,\n-     somewhat experimental, options added by `g77' to the `gcc'\n-     compiler and its back end.\n-\n-   * John Carr (<jfc@mit.edu>) wrote the alias analysis improvements.\n-\n-   * Thanks to Mary Cortani and the staff at Craftwork Solutions\n-     (<support@craftwork.com>) for all of their support.\n-\n-   * Many other individuals have helped debug, test, and improve `g77'\n-     over the past several years, and undoubtedly more people will be\n-     doing so in the future.  If you have done so, and would like to\n-     see your name listed in the above list, please ask!  The default\n-     is that people wish to remain anonymous.\n-\n-\u001f\n-File: g77.info,  Node: Funding,  Next: Funding GNU Fortran,  Prev: Contributors,  Up: Top\n-\n-Funding Free Software\n-*********************\n-\n-   If you want to have more free software a few years from now, it makes\n-sense for you to help encourage people to contribute funds for its\n-development.  The most effective approach known is to encourage\n-commercial redistributors to donate.\n-\n-   Users of free software systems can boost the pace of development by\n-encouraging for-a-fee distributors to donate part of their selling price\n-to free software developers--the Free Software Foundation, and others.\n-\n-   The way to convince distributors to do this is to demand it and\n-expect it from them.  So when you compare distributors, judge them\n-partly by how much they give to free software development.  Show\n-distributors they must compete to be the one who gives the most.\n-\n-   To make this approach work, you must insist on numbers that you can\n-compare, such as, \"We will donate ten dollars to the Frobnitz project\n-for each disk sold.\"  Don't be satisfied with a vague promise, such as\n-\"A portion of the profits are donated,\" since it doesn't give a basis\n-for comparison.\n-\n-   Even a precise fraction \"of the profits from this disk\" is not very\n-meaningful, since creative accounting and unrelated business decisions\n-can greatly alter what fraction of the sales price counts as profit.\n-If the price you pay is $50, ten percent of the profit is probably less\n-than a dollar; it might be a few cents, or nothing at all.\n-\n-   Some redistributors do development work themselves.  This is useful\n-too; but to keep everyone honest, you need to inquire how much they do,\n-and what kind.  Some kinds of development make much more long-term\n-difference than others.  For example, maintaining a separate version of\n-a program contributes very little; maintaining the standard version of a\n-program for the whole community contributes much.  Easy new ports\n-contribute little, since someone else would surely do them; difficult\n-ports such as adding a new CPU to the GNU C compiler contribute more;\n-major new features or packages contribute the most.\n-\n-   By establishing the idea that supporting further development is \"the\n-proper thing to do\" when distributing free software for a fee, we can\n-assure a steady flow of resources into making more free software.\n-\n-     Copyright (C) 1994 Free Software Foundation, Inc.\n-     Verbatim copying and redistribution of this section is permitted\n-     without royalty; alteration is not permitted.\n-\n-\u001f\n-File: g77.info,  Node: Funding GNU Fortran,  Next: Look and Feel,  Prev: Funding,  Up: Top\n-\n-Funding GNU Fortran\n-*******************\n-\n-   Work on GNU Fortran is still being done mostly by its author, James\n-Craig Burley (<burley@gnu.ai.mit.edu>), who is a volunteer for, not an\n-employee of, the Free Software Foundation (FSF).  As with other GNU\n-software, funding is important because it can pay for needed equipment,\n-personnel, and so on.\n-\n-   The FSF provides information on the best way to fund ongoing\n-development of GNU software (such as GNU Fortran) in documents such as\n-the \"GNUS Bulletin\".  Email <gnu@prep.ai.mit.edu> for information on\n-funding the FSF.\n-\n-   To fund specific GNU Fortran work in particular, the FSF might\n-provide a means for that, but the FSF does not provide direct funding\n-to the author of GNU Fortran to continue his work.  The FSF has\n-employee salary restrictions that can be incompatible with the\n-financial needs of some volunteers, who therefore choose to remain\n-volunteers and thus be able to be free to do contract work and\n-otherwise make their own schedules for doing GNU work.\n-\n-   Still, funding the FSF at least indirectly benefits work on specific\n-projects like GNU Fortran because it ensures the continuing operation\n-of the FSF offices, their workstations, their network connections, and\n-so on, which are invaluable to volunteers.  (Similarly, hiring Cygnus\n-Support can help a project like GNU Fortran--Cygnus has been a\n-long-time donor of equipment usage to the author of GNU Fortran, and\n-this too has been invaluable--*Note Contributors::.)\n-\n-   Currently, the only way to directly fund the author of GNU Fortran\n-in his work on that project is to hire him for the work you want him to\n-do, or donate money to him.  Several people have done this already,\n-with the result that he has not needed to immediately find contract\n-work on a few occasions.  If more people did this, he would be able to\n-plan on not doing contract work for many months and could thus devote\n-that time to work on projects (such as the planned changes for 0.6)\n-that require longer timeframes to complete.  For the latest information\n-on the status of the author, do `finger -l burley@gate.gnu.ai.mit.edu'\n-on a UNIX system (or any system with a command like UNIX `finger').\n-\n-   Another important way to support work on GNU Fortran is to volunteer\n-to help out.  Work is needed on documentation, testing, porting to\n-various machines, and in some cases, coding (although major changes\n-planned for version 0.6 make it difficult to add manpower to this area).\n-Email <fortran@gnu.ai.mit.edu> to volunteer for this work.\n-\n-   *Note Funding Free Software: Funding, for more information.\n-\n-\u001f\n-File: g77.info,  Node: Look and Feel,  Next: Getting Started,  Prev: Funding GNU Fortran,  Up: Top\n-\n-Protect Your Freedom--Fight \"Look And Feel\"\n-*******************************************\n-\n-   To preserve the ability to write free software, including\n-replacements for proprietary software, authors must be free to\n-replicate the user interface to which users of existing software have\n-become accustomed.\n-\n-   *Note Protect Your Freedom--Fight \"Look And Feel\": (gcc)Look and\n-Feel, for more information.\n-\n-\u001f\n-File: g77.info,  Node: Getting Started,  Next: What is GNU Fortran?,  Prev: Look and Feel,  Up: Top\n-\n-Getting Started\n-***************\n-\n-   If you don't need help getting started reading the portions of this\n-manual that are most important to you, you should skip this portion of\n-the manual.\n-\n-   If you are new to compilers, especially Fortran compilers, or new to\n-how compilers are structured under UNIX and UNIX-like systems, you'll\n-want to see *Note What is GNU Fortran?::.\n-\n-   If you are new to GNU compilers, or have used only one GNU compiler\n-in the past and not had to delve into how it lets you manage various\n-versions and configurations of `gcc', you should see *Note G77 and\n-GCC::.\n-\n-   Everyone except experienced `g77' users should see *Note Invoking\n-G77::.\n-\n-   If you're acquainted with previous versions of `g77', you should see\n-*Note News::.  Further, if you've actually used previous versions of\n-`g77', especially if you've written or modified Fortran code to be\n-compiled by previous versions of `g77', you should see *Note Changes::.\n-\n-   If you intend to write or otherwise compile code that is not already\n-strictly conforming ANSI FORTRAN 77--and this is probably everyone--you\n-should see *Note Language::.\n-\n-   If you don't already have `g77' installed on your system, you must\n-see *Note Installation::.\n-\n-   If you run into trouble getting Fortran code to compile, link, run,\n-or work properly, you might find answers if you see *Note Debugging and\n-Interfacing::, see *Note Collected Fortran Wisdom::, and see *Note\n-Trouble::.  You might also find that the problems you are encountering\n-are bugs in `g77'--see *Note Bugs::, for information on reporting them,\n-after reading the other material.\n-\n-   If you need further help with `g77', or with freely redistributable\n-software in general, see *Note Service::.\n-\n-   If you would like to help the `g77' project, see *Note Funding GNU\n-Fortran::, for information on helping financially, and see *Note\n-Projects::, for information on helping in other ways.\n-\n-   If you're generally curious about the future of `g77', see *Note\n-Projects::.  If you're curious about its past, see *Note Contributors::,\n-and see *Note Funding GNU Fortran::.\n-\n-   To see a few of the questions maintainers of `g77' have, and that\n-you might be able to answer, see *Note Open Questions::.\n-\n-\u001f\n-File: g77.info,  Node: What is GNU Fortran?,  Next: G77 and GCC,  Prev: Getting Started,  Up: Top\n-\n-What is GNU Fortran?\n-********************\n-\n-   GNU Fortran, or `g77', is designed initially as a free replacement\n-for, or alternative to, the UNIX `f77' command.  (Similarly, `gcc' is\n-designed as a replacement for the UNIX `cc' command.)\n-\n-   `g77' also is designed to fit in well with the other fine GNU\n-compilers and tools.\n-\n-   Sometimes these design goals conflict--in such cases, resolution\n-often is made in favor of fitting in well with Project GNU.  These\n-cases are usually identified in the appropriate sections of this manual.\n-\n-   As compilers, `g77', `gcc', and `f77' share the following\n-characteristics:\n-\n-   * They read a user's program, stored in a file and containing\n-     instructions written in the appropriate language (Fortran, C, and\n-     so on).  This file contains \"source code\".\n-\n-   * They translate the user's program into instructions a computer can\n-     carry out more quickly than it takes to translate the instructions\n-     in the first place.  These instructions are called \"machine\n-     code\"--code designed to be efficiently translated and processed by\n-     a machine such as a computer.  Humans usually aren't as good\n-     writing machine code as they are at writing Fortran or C, because\n-     it is easy to make tiny mistakes writing machine code.  When\n-     writing Fortran or C, it is easy to make big mistakes.\n-\n-   * They provide information in the generated machine code that can\n-     make it easier to find bugs in the program (using a debugging\n-     tool, called a \"debugger\", such as `gdb').\n-\n-   * They locate and gather machine code already generated to perform\n-     actions requested by statements in the user's program.  This\n-     machine code is organized into \"libraries\" and is located and\n-     gathered during the \"link\" phase of the compilation process.\n-     (Linking often is thought of as a separate step, because it can be\n-     directly invoked via the `ld' command.  However, the `g77' and\n-     `gcc' commands, as with most compiler commands, automatically\n-     perform the linking step by calling on `ld' directly, unless asked\n-     to not do so by the user.)\n-\n-   * They attempt to diagnose cases where the user's program contains\n-     incorrect usages of the language.  The \"diagnostics\" produced by\n-     the compiler indicate the problem and the location in the user's\n-     source file where the problem was first noticed.  The user can use\n-     this information to locate and fix the problem.  (Sometimes an\n-     incorrect usage of the language leads to a situation where the\n-     compiler can no longer make any sense of what follows--while a\n-     human might be able to--and thus ends up complaining about many\n-     \"problems\" it encounters that, in fact, stem from just one\n-     problem, usually the first one reported.)\n-\n-   * They attempt to diagnose cases where the user's program contains a\n-     correct usage of the language, but instructs the computer to do\n-     something questionable.  These diagnostics often are in the form\n-     of \"warnings\", instead of the \"errors\" that indicate incorrect\n-     usage of the language.\n-\n-   How these actions are performed is generally under the control of\n-the user.  Using command-line options, the user can specify how\n-persnickety the compiler is to be regarding the program (whether to\n-diagnose questionable usage of the language), how much time to spend\n-making the generated machine code run faster, and so on.\n-\n-   `g77' consists of several components:\n-\n-   * A modified version of the `gcc' command, which also might be\n-     installed as the system's `cc' command.  (In many cases, `cc'\n-     refers to the system's \"native\" C compiler, which might be a\n-     non-GNU compiler, or an older version of `gcc' considered more\n-     stable or that is used to build the operating system kernel.)\n-\n-   * The `g77' command itself, which also might be installed as the\n-     system's `f77' command.\n-\n-   * The `libf2c' run-time library.  This library contains the machine\n-     code needed to support capabilities of the Fortran language that\n-     are not directly provided by the machine code generated by the\n-     `g77' compilation phase.\n-\n-   * The compiler itself, internally named `f771'.\n-\n-     Note that `f771' does not generate machine code directly--it\n-     generates \"assembly code\" that is a more readable form of machine\n-     code, leaving the conversion to actual machine code to an\n-     \"assembler\", usually named `as'.\n-\n-   `gcc' is often thought of as \"the C compiler\" only, but it does more\n-than that.  Based on command-line options and the names given for files\n-on the command line, `gcc' determines which actions to perform,\n-including preprocessing, compiling (in a variety of possible\n-languages), assembling, and linking.\n-\n-   For example, the command `gcc foo.c' \"drives\" the file `foo.c'\n-through the preprocessor `cpp', then the C compiler (internally named\n-`cc1'), then the assembler (usually `as'), then the linker (`ld'),\n-producing an executable program named `a.out' (on UNIX systems).\n-\n-   As another example, the command `gcc foo.cc' would do much the same\n-as `gcc foo.c', but instead of using the C compiler named `cc1', `gcc'\n-would use the C++ compiler (named `cc1plus').\n-\n-   In a GNU Fortran installation, `gcc' recognizes Fortran source files\n-by name just like it does C and C++ source files.  It knows to use the\n-Fortran compiler named `f771', instead of `cc1' or `cc1plus', to\n-compile Fortran files.\n-\n-   Non-Fortran-related operation of `gcc' is generally unaffected by\n-installing the GNU Fortran version of `gcc'.  However, without the\n-installed version of `gcc' being the GNU Fortran version, `gcc' will\n-not be able to compile and link Fortran programs--and since `g77' uses\n-`gcc' to do most of the actual work, neither will `g77'!\n-\n-   The `g77' command is essentially just a front-end for the `gcc'\n-command.  Fortran users will normally use `g77' instead of `gcc',\n-because `g77' knows how to specify the libraries needed to link with\n-Fortran programs (`libf2c' and `lm').  `g77' can still compile and link\n-programs and source files written in other languages, just like `gcc'.\n-\n-   The command `g77 -v' is a quick way to display lots of version\n-information for the various programs used to compile a typical\n-preprocessed Fortran source file--this produces much more output than\n-`gcc -v' currently does.  (If it produces an error message near the end\n-of the output--diagnostics from the linker, usually `ld'--you might\n-have an out-of-date `libf2c' that improperly handles complex\n-arithmetic.)  In the output of this command, the line beginning `GNU\n-Fortran Front End' identifies the version number of GNU Fortran;\n-immediately preceding that line is a line identifying the version of\n-`gcc' with which that version of `g77' was built.\n-\n-   The `libf2c' library is distributed with GNU Fortran for the\n-convenience of its users, but is not part of GNU Fortran.  It contains\n-the procedures needed by Fortran programs while they are running.\n-\n-   For example, while code generated by `g77' is likely to do\n-additions, subtractions, and multiplications \"in line\"--in the actual\n-compiled code--it is not likely to do trigonometric functions this way.\n-\n-   Instead, operations like trigonometric functions are compiled by the\n-`f771' compiler (invoked by `g77' when compiling Fortran code) into\n-machine code that, when run, calls on functions in `libf2c', so\n-`libf2c' must be linked with almost every useful program having any\n-component compiled by GNU Fortran.  (As mentioned above, the `g77'\n-command takes care of all this for you.)\n-\n-   The `f771' program represents most of what is unique to GNU Fortran.\n-While much of the `libf2c' component is really part of `f2c', a free\n-Fortran-to-C converter distributed by Bellcore (AT&T), plus `libU77',\n-provided by Dave Love, and the `g77' command is just a small front-end\n-to `gcc', `f771' is a combination of two rather large chunks of code.\n-\n-   One chunk is the so-called \"GNU Back End\", or GBE, which knows how\n-to generate fast code for a wide variety of processors.  The same GBE\n-is used by the C, C++, and Fortran compiler programs `cc1', `cc1plus',\n-and `f771', plus others.  Often the GBE is referred to as the \"gcc back\n-end\" or even just \"gcc\"--in this manual, the term GBE is used whenever\n-the distinction is important.\n-\n-   The other chunk of `f771' is the majority of what is unique about\n-GNU Fortran--the code that knows how to interpret Fortran programs to\n-determine what they are intending to do, and then communicate that\n-knowledge to the GBE for actual compilation of those programs.  This\n-chunk is called the \"Fortran Front End\" (FFE).  The `cc1' and `cc1plus'\n-programs have their own front ends, for the C and C++ languages,\n-respectively.  These fronts ends are responsible for diagnosing\n-incorrect usage of their respective languages by the programs the\n-process, and are responsible for most of the warnings about\n-questionable constructs as well.  (The GBE handles producing some\n-warnings, like those concerning possible references to undefined\n-variables.)\n-\n-   Because so much is shared among the compilers for various languages,\n-much of the behavior and many of the user-selectable options for these\n-compilers are similar.  For example, diagnostics (error messages and\n-warnings) are similar in appearance; command-line options like `-Wall'\n-have generally similar effects; and the quality of generated code (in\n-terms of speed and size) is roughly similar (since that work is done by\n-the shared GBE).\n-\n-\u001f\n-File: g77.info,  Node: G77 and GCC,  Next: Invoking G77,  Prev: What is GNU Fortran?,  Up: Top\n-\n-Compile Fortran, C, or Other Programs\n-*************************************\n-\n-   A GNU Fortran installation includes a modified version of the `gcc'\n-command.\n-\n-   In a non-Fortran installation, `gcc' recognizes C, C++, and\n-Objective-C source files.\n-\n-   In a GNU Fortran installation, `gcc' also recognizes Fortran source\n-files and accepts Fortran-specific command-line options, plus some\n-command-line options that are designed to cater to Fortran users but\n-apply to other languages as well.\n-\n-   *Note Compile C; C++; or Objective-C: (gcc)G++ and GCC, for\n-information on the way different languages are handled by the GNU CC\n-compiler (`gcc').\n-\n-   Also provided as part of GNU Fortran is the `g77' command.  The\n-`g77' command is designed to make compiling and linking Fortran\n-programs somewhat easier than when using the `gcc' command for these\n-tasks.  It does this by analyzing the command line somewhat and\n-changing it appropriately before submitting it to the `gcc' command.\n-\n-   Use the `-v' option with `g77' to see what is going on--the first\n-line of output is the invocation of the `gcc' command.  Use\n-`--driver=true' to disable actual invocation of `gcc' (this works\n-because `true' is the name of a UNIX command that simply returns\n-success status).\n-\n-\u001f\n-File: g77.info,  Node: Invoking G77,  Next: News,  Prev: G77 and GCC,  Up: Top\n-\n-GNU Fortran Command Options\n-***************************\n-\n-   The `g77' command supports all the options supported by the `gcc'\n-command.  *Note GNU CC Command Options: (gcc)Invoking GCC, for\n-information on the non-Fortran-specific aspects of the `gcc' command\n-(and, therefore, the `g77' command).\n-\n-   The `g77' command supports one option not supported by the `gcc'\n-command:\n-\n-`--driver=COMMAND'\n-     Specifies that COMMAND, rather than `gcc', is to be invoked by\n-     `g77' to do its job.  For example, within the `gcc' build\n-     directory after building GNU Fortran (but without having to\n-     install it), `./g77 --driver=./xgcc foo.f -B./'.\n-\n-   All other options are supported both by `g77' and by `gcc' as\n-modified (and reinstalled) by the `g77' distribution.  In some cases,\n-options have positive and negative forms; the negative form of `-ffoo'\n-would be `-fno-foo'.  This manual documents only one of these two\n-forms, whichever one is not the default.\n-\n-* Menu:\n-\n-* Option Summary::      Brief list of all `g77' options,\n-                        without explanations.\n-* Overall Options::     Controlling the kind of output:\n-                        an executable, object files, assembler files,\n-                        or preprocessed source.\n-* Shorthand Options::   Options that are shorthand for other options.\n-* Fortran Dialect Options::  Controlling the variant of Fortran language\n-                             compiled.\n-* Warning Options::     How picky should the compiler be?\n-* Debugging Options::   Symbol tables, measurements, and debugging dumps.\n-* Optimize Options::    How much optimization?\n-* Preprocessor Options:: Controlling header files and macro definitions.\n-                         Also, getting dependency information for Make.\n-* Directory Options::   Where to find header files and libraries.\n-                        Where to find the compiler executable files.\n-* Code Gen Options::    Specifying conventions for function calls, data layout\n-                        and register usage.\n-* Environment Variables:: Env vars that affect GNU Fortran.\n-\n-\u001f\n-File: g77.info,  Node: Option Summary,  Next: Overall Options,  Up: Invoking G77\n-\n-Option Summary\n-==============\n-\n-   Here is a summary of all the options specific to GNU Fortran, grouped\n-by type.  Explanations are in the following sections.\n-\n-*Overall Options*\n-     *Note Options Controlling the Kind of Output: Overall Options.\n-          --driver  -fversion  -fset-g77-defaults  -fno-silent\n-\n-*Shorthand Options*\n-     *Note Shorthand Options::.\n-          -ff66  -fno-f66  -ff77  -fno-f77  -fugly  -fno-ugly\n-\n-*Fortran Language Options*\n-     *Note Options Controlling Fortran Dialect: Fortran Dialect Options.\n-          -ffree-form  -fno-fixed-form  -ff90\n-          -fvxt  -fdollar-ok  -fno-backslash\n-          -fno-ugly-args  -fno-ugly-assign  -fno-ugly-assumed\n-          -fugly-comma  -fugly-complex  -fugly-init  -fugly-logint\n-          -fonetrip  -ftypeless-boz\n-          -fintrin-case-initcap  -fintrin-case-upper\n-          -fintrin-case-lower  -fintrin-case-any\n-          -fmatch-case-initcap  -fmatch-case-upper\n-          -fmatch-case-lower  -fmatch-case-any\n-          -fsource-case-upper -fsource-case-lower  -fsource-case-preserve\n-          -fsymbol-case-initcap  -fsymbol-case-upper\n-          -fsymbol-case-lower  -fsymbol-case-any\n-          -fcase-strict-upper  -fcase-strict-lower\n-          -fcase-initcap  -fcase-upper  -fcase-lower  -fcase-preserve\n-          -ff2c-intrinsics-delete  -ff2c-intrinsics-hide\n-          -ff2c-intrinsics-disable  -ff2c-intrinsics-enable\n-          -ff90-intrinsics-delete  -ff90-intrinsics-hide\n-          -ff90-intrinsics-disable  -ff90-intrinsics-enable\n-          -fgnu-intrinsics-delete  -fgnu-intrinsics-hide\n-          -fgnu-intrinsics-disable  -fgnu-intrinsics-enable\n-          -fmil-intrinsics-delete  -fmil-intrinsics-hide\n-          -fmil-intrinsics-disable  -fmil-intrinsics-enable\n-          -funix-intrinsics-delete  -funix-intrinsics-hide\n-          -funix-intrinsics-disable  -funix-intrinsics-enable\n-          -fvxt-intrinsics-delete  -fvxt-intrinsics-hide\n-          -fvxt-intrinsics-disable  -fvxt-intrinsics-enable\n-          -ffixed-line-length-N  -ffixed-line-length-none\n-\n-*Warning Options*\n-     *Note Options to Request or Suppress Warnings: Warning Options.\n-          -fsyntax-only  -pedantic  -pedantic-errors  -fpedantic\n-          -w  -Wno-globals  -Wimplicit -Wunused  -Wuninitialized\n-          -Wall  -Wsurprising\n-          -Werror  -W\n-\n-*Debugging Options*\n-     *Note Options for Debugging Your Program or GCC: Debugging Options.\n-          -g\n-\n-*Optimization Options*\n-     *Note Options that Control Optimization: Optimize Options.\n-          -malign-double\n-          -ffloat-store  -fforce-mem  -fforce-addr  -fno-inline\n-          -ffast-math  -fstrength-reduce  -frerun-cse-after-loop\n-          -fexpensive-optimizations  -fdelayed-branch\n-          -fschedule-insns  -fschedule-insn2  -fcaller-saves\n-          -funroll-loops  -funroll-all-loops\n-          -fno-move-all-movables  -fno-reduce-all-givs\n-          -fno-rerun-loop-opt\n-\n-*Directory Options*\n-     *Note Options for Directory Search: Directory Options.\n-          -IDIR  -I-\n-\n-*Code Generation Options*\n-     *Note Options for Code Generation Conventions: Code Gen Options.\n-          -fno-automatic  -finit-local-zero  -fno-f2c\n-          -ff2c-library  -fno-underscoring  -fno-ident\n-          -fpcc-struct-return  -freg-struct-return\n-          -fshort-double  -fno-common  -fpack-struct\n-          -fzeros  -fno-second-underscore\n-          -fdebug-kludge  -fno-emulate-complex\n-          -falias-check  -fargument-alias\n-          -fargument-noalias  -fno-argument-noalias-global\n-          -fno-globals\n-\n-* Menu:\n-\n-* Overall Options::     Controlling the kind of output:\n-                        an executable, object files, assembler files,\n-                        or preprocessed source.\n-* Shorthand Options::   Options that are shorthand for other options.\n-* Fortran Dialect Options::  Controlling the variant of Fortran language\n-                             compiled.\n-* Warning Options::     How picky should the compiler be?\n-* Debugging Options::   Symbol tables, measurements, and debugging dumps.\n-* Optimize Options::    How much optimization?\n-* Preprocessor Options:: Controlling header files and macro definitions.\n-                         Also, getting dependency information for Make.\n-* Directory Options::   Where to find header files and libraries.\n-                        Where to find the compiler executable files.\n-* Code Gen Options::    Specifying conventions for function calls, data layout\n-                        and register usage.\n-"}, {"sha": "90f79f1fb1de431e21d895b58b8fba3a11994ce5", "filename": "gcc/f/g77.info-10", "status": "removed", "additions": 0, "deletions": 1462, "changes": 1462, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-10", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-10", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-10?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2", "patch": "@@ -1,1462 +0,0 @@\n-This is Info file g77.info, produced by Makeinfo version 1.68 from the\n-input file g77.texi.\n-\n-   This file explains how to use the GNU Fortran system.\n-\n-   Published by the Free Software Foundation 59 Temple Place - Suite 330\n-Boston, MA 02111-1307 USA\n-\n-   Copyright (C) 1995-1997 Free Software Foundation, Inc.\n-\n-   Permission is granted to make and distribute verbatim copies of this\n-manual provided the copyright notice and this permission notice are\n-preserved on all copies.\n-\n-   Permission is granted to copy and distribute modified versions of\n-this manual under the conditions for verbatim copying, provided also\n-that the sections entitled \"GNU General Public License,\" \"Funding for\n-Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n-included exactly as in the original, and provided that the entire\n-resulting derived work is distributed under the terms of a permission\n-notice identical to this one.\n-\n-   Permission is granted to copy and distribute translations of this\n-manual into another language, under the above conditions for modified\n-versions, except that the sections entitled \"GNU General Public\n-License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n-`Look And Feel'\", and this permission notice, may be included in\n-translations approved by the Free Software Foundation instead of in the\n-original English.\n-\n-   Contributed by James Craig Burley (<burley@gnu.ai.mit.edu>).\n-Inspired by a first pass at translating `g77-0.5.16/f/DOC' that was\n-contributed to Craig by David Ronis (<ronis@onsager.chem.mcgill.ca>).\n-\n-INFO-DIR-SECTION Fortran Programming\n-START-INFO-DIR-ENTRY\n-* g77: (g77).               The GNU Fortran compilation system.\n-END-INFO-DIR-ENTRY\n-\n-\u001f\n-File: g77.info,  Node: SymLnk Intrinsic (subroutine),  Next: System Intrinsic (subroutine),  Prev: Sum Intrinsic,  Up: Table of Intrinsic Functions\n-\n-SymLnk Intrinsic (subroutine)\n-.............................\n-\n-     CALL SymLnk(PATH1, PATH2, STATUS)\n-\n-PATH1: `CHARACTER'; scalar; INTENT(IN).\n-\n-PATH2: `CHARACTER'; scalar; INTENT(IN).\n-\n-STATUS: `INTEGER(KIND=1)'; OPTIONAL; scalar; INTENT(OUT).\n-\n-Intrinsic groups: `unix'.\n-\n-Description:\n-\n-   Makes a symbolic link from file PATH1 to PATH2.  A null character\n-(`CHAR(0)') marks the end of the names in PATH1 and PATH2--otherwise,\n-trailing blanks in PATH1 and PATH2 are ignored.  If the STATUS argument\n-is supplied, it contains 0 on success or a non-zero error code upon\n-return (`ENOSYS' if the system does not provide `symlink(2)').\n-\n-   Some non-GNU implementations of Fortran provide this intrinsic as\n-only a function, not as a subroutine, or do not support the (optional)\n-STATUS argument.\n-\n-   For information on other intrinsics with the same name: *Note SymLnk\n-Intrinsic (function)::.\n-\n-\u001f\n-File: g77.info,  Node: System Intrinsic (subroutine),  Next: System_Clock Intrinsic,  Prev: SymLnk Intrinsic (subroutine),  Up: Table of Intrinsic Functions\n-\n-System Intrinsic (subroutine)\n-.............................\n-\n-     CALL System(COMMAND, STATUS)\n-\n-COMMAND: `CHARACTER'; scalar; INTENT(IN).\n-\n-STATUS: `INTEGER(KIND=1)'; OPTIONAL; scalar; INTENT(OUT).\n-\n-Intrinsic groups: `unix'.\n-\n-Description:\n-\n-   Passes the command COMMAND to a shell (see `system(3)').  If\n-argument STATUS is present, it contains the value returned by\n-`system(3)', presumably 0 if the shell command succeeded.  Note that\n-which shell is used to invoke the command is system-dependent and\n-environment-dependent.\n-\n-   Some non-GNU implementations of Fortran provide this intrinsic as\n-only a function, not as a subroutine, or do not support the (optional)\n-STATUS argument.\n-\n-   For information on other intrinsics with the same name: *Note System\n-Intrinsic (function)::.\n-\n-\u001f\n-File: g77.info,  Node: System_Clock Intrinsic,  Next: Tan Intrinsic,  Prev: System Intrinsic (subroutine),  Up: Table of Intrinsic Functions\n-\n-System_Clock Intrinsic\n-......................\n-\n-     CALL System_Clock(COUNT, RATE, MAX)\n-\n-COUNT: `INTEGER(KIND=1)'; scalar; INTENT(OUT).\n-\n-RATE: `INTEGER(KIND=1)'; scalar; INTENT(OUT).\n-\n-MAX: `INTEGER(KIND=1)'; scalar; INTENT(OUT).\n-\n-Intrinsic groups: `f90'.\n-\n-Description:\n-\n-   Returns in COUNT the current value of the system clock; this is the\n-value returned by the UNIX function `times(2)' in this implementation,\n-but isn't in general.  RATE is the number of clock ticks per second and\n-MAX is the maximum value this can take, which isn't very useful in this\n-implementation since it's just the maximum C `unsigned int' value.\n-\n-\u001f\n-File: g77.info,  Node: Tan Intrinsic,  Next: TanH Intrinsic,  Prev: System_Clock Intrinsic,  Up: Table of Intrinsic Functions\n-\n-Tan Intrinsic\n-.............\n-\n-     Tan(X)\n-\n-Tan: `REAL' function, the `KIND=' value of the type being that of\n-argument X.\n-\n-X: `REAL'; scalar; INTENT(IN).\n-\n-Intrinsic groups: (standard FORTRAN 77).\n-\n-Description:\n-\n-   Returns the tangent of X, an angle measured in radians.\n-\n-   *Note ATan Intrinsic::, for the inverse of this function.\n-\n-\u001f\n-File: g77.info,  Node: TanH Intrinsic,  Next: Time Intrinsic (UNIX),  Prev: Tan Intrinsic,  Up: Table of Intrinsic Functions\n-\n-TanH Intrinsic\n-..............\n-\n-     TanH(X)\n-\n-TanH: `REAL' function, the `KIND=' value of the type being that of\n-argument X.\n-\n-X: `REAL'; scalar; INTENT(IN).\n-\n-Intrinsic groups: (standard FORTRAN 77).\n-\n-Description:\n-\n-   Returns the hyperbolic tangent of X.\n-\n-\u001f\n-File: g77.info,  Node: Time Intrinsic (UNIX),  Next: Time8 Intrinsic,  Prev: TanH Intrinsic,  Up: Table of Intrinsic Functions\n-\n-Time Intrinsic (UNIX)\n-.....................\n-\n-     Time()\n-\n-Time: `INTEGER(KIND=1)' function.\n-\n-Intrinsic groups: `unix'.\n-\n-Description:\n-\n-   Returns the current time encoded as an integer (in the manner of the\n-UNIX function `time(3)').  This value is suitable for passing to\n-`CTIME', `GMTIME', and `LTIME'.\n-\n-   This intrinsic is not fully portable, such as to systems with 32-bit\n-`INTEGER' types but supporting times wider than 32 bits.  *Note Time8\n-Intrinsic::, for information on a similar intrinsic that might be\n-portable to more GNU Fortran implementations, though to fewer Fortran\n-compilers.\n-\n-   For information on other intrinsics with the same name: *Note Time\n-Intrinsic (VXT)::.\n-\n-\u001f\n-File: g77.info,  Node: Time8 Intrinsic,  Next: Tiny Intrinsic,  Prev: Time Intrinsic (UNIX),  Up: Table of Intrinsic Functions\n-\n-Time8 Intrinsic\n-...............\n-\n-     Time8()\n-\n-Time8: `INTEGER(KIND=2)' function.\n-\n-Intrinsic groups: `unix'.\n-\n-Description:\n-\n-   Returns the current time encoded as a long integer (in the manner of\n-the UNIX function `time(3)').  This value is suitable for passing to\n-`CTIME', `GMTIME', and `LTIME'.\n-\n-   No Fortran implementations other than GNU Fortran are known to\n-support this intrinsic at the time of this writing.  *Note Time\n-Intrinsic (UNIX)::, for information on a similar intrinsic that might\n-be portable to more Fortran compilers, though to fewer GNU Fortran\n-implementations.\n-\n-\u001f\n-File: g77.info,  Node: Tiny Intrinsic,  Next: Transfer Intrinsic,  Prev: Time8 Intrinsic,  Up: Table of Intrinsic Functions\n-\n-Tiny Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL Tiny' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: Transfer Intrinsic,  Next: Transpose Intrinsic,  Prev: Tiny Intrinsic,  Up: Table of Intrinsic Functions\n-\n-Transfer Intrinsic\n-..................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL Transfer' to use this name for\n-an external procedure.\n-\n-\u001f\n-File: g77.info,  Node: Transpose Intrinsic,  Next: Trim Intrinsic,  Prev: Transfer Intrinsic,  Up: Table of Intrinsic Functions\n-\n-Transpose Intrinsic\n-...................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL Transpose' to use this name\n-for an external procedure.\n-\n-\u001f\n-File: g77.info,  Node: Trim Intrinsic,  Next: TtyNam Intrinsic (subroutine),  Prev: Transpose Intrinsic,  Up: Table of Intrinsic Functions\n-\n-Trim Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL Trim' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: TtyNam Intrinsic (subroutine),  Next: TtyNam Intrinsic (function),  Prev: Trim Intrinsic,  Up: Table of Intrinsic Functions\n-\n-TtyNam Intrinsic (subroutine)\n-.............................\n-\n-     CALL TtyNam(NAME, UNIT)\n-\n-NAME: `CHARACTER'; scalar; INTENT(OUT).\n-\n-UNIT: `INTEGER'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `unix'.\n-\n-Description:\n-\n-   Sets NAME to the name of the terminal device open on logical unit\n-UNIT or a blank string if UNIT is not connected to a terminal.\n-\n-   Some non-GNU implementations of Fortran provide this intrinsic as\n-only a function, not as a subroutine.\n-\n-   For information on other intrinsics with the same name: *Note TtyNam\n-Intrinsic (function)::.\n-\n-\u001f\n-File: g77.info,  Node: TtyNam Intrinsic (function),  Next: UBound Intrinsic,  Prev: TtyNam Intrinsic (subroutine),  Up: Table of Intrinsic Functions\n-\n-TtyNam Intrinsic (function)\n-...........................\n-\n-     TtyNam(UNIT)\n-\n-TtyNam: `CHARACTER*(*)' function.\n-\n-UNIT: `INTEGER'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `unix'.\n-\n-Description:\n-\n-   Returns the name of the terminal device open on logical unit UNIT or\n-a blank string if UNIT is not connected to a terminal.\n-\n-   For information on other intrinsics with the same name: *Note TtyNam\n-Intrinsic (subroutine)::.\n-\n-\u001f\n-File: g77.info,  Node: UBound Intrinsic,  Next: UMask Intrinsic (subroutine),  Prev: TtyNam Intrinsic (function),  Up: Table of Intrinsic Functions\n-\n-UBound Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL UBound' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: UMask Intrinsic (subroutine),  Next: Unlink Intrinsic (subroutine),  Prev: UBound Intrinsic,  Up: Table of Intrinsic Functions\n-\n-UMask Intrinsic (subroutine)\n-............................\n-\n-     CALL UMask(MASK, OLD)\n-\n-MASK: `INTEGER'; scalar; INTENT(IN).\n-\n-OLD: `INTEGER(KIND=1)'; OPTIONAL; scalar; INTENT(OUT).\n-\n-Intrinsic groups: `unix'.\n-\n-Description:\n-\n-   Sets the file creation mask to MASK and returns the old value in\n-argument OLD if it is supplied.  See `umask(2)'.\n-\n-   Some non-GNU implementations of Fortran provide this intrinsic as\n-only a function, not as a subroutine.\n-\n-   For information on other intrinsics with the same name: *Note UMask\n-Intrinsic (function)::.\n-\n-\u001f\n-File: g77.info,  Node: Unlink Intrinsic (subroutine),  Next: Unpack Intrinsic,  Prev: UMask Intrinsic (subroutine),  Up: Table of Intrinsic Functions\n-\n-Unlink Intrinsic (subroutine)\n-.............................\n-\n-     CALL Unlink(FILE, STATUS)\n-\n-FILE: `CHARACTER'; scalar; INTENT(IN).\n-\n-STATUS: `INTEGER(KIND=1)'; OPTIONAL; scalar; INTENT(OUT).\n-\n-Intrinsic groups: `unix'.\n-\n-Description:\n-\n-   Unlink the file FILE.  A null character (`CHAR(0)') marks the end of\n-the name in FILE--otherwise, trailing blanks in FILE are ignored.  If\n-the STATUS argument is supplied, it contains 0 on success or a non-zero\n-error code upon return.  See `unlink(2)'.\n-\n-   Some non-GNU implementations of Fortran provide this intrinsic as\n-only a function, not as a subroutine, or do not support the (optional)\n-STATUS argument.\n-\n-   For information on other intrinsics with the same name: *Note Unlink\n-Intrinsic (function)::.\n-\n-\u001f\n-File: g77.info,  Node: Unpack Intrinsic,  Next: Verify Intrinsic,  Prev: Unlink Intrinsic (subroutine),  Up: Table of Intrinsic Functions\n-\n-Unpack Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL Unpack' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: Verify Intrinsic,  Next: XOr Intrinsic,  Prev: Unpack Intrinsic,  Up: Table of Intrinsic Functions\n-\n-Verify Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL Verify' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: XOr Intrinsic,  Next: ZAbs Intrinsic,  Prev: Verify Intrinsic,  Up: Table of Intrinsic Functions\n-\n-XOr Intrinsic\n-.............\n-\n-     XOr(I, J)\n-\n-XOr: `INTEGER' or `LOGICAL' function, the exact type being the result\n-of cross-promoting the types of all the arguments.\n-\n-I: `INTEGER' or `LOGICAL'; scalar; INTENT(IN).\n-\n-J: `INTEGER' or `LOGICAL'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `f2c'.\n-\n-Description:\n-\n-   Returns value resulting from boolean exclusive-OR of pair of bits in\n-each of I and J.\n-\n-\u001f\n-File: g77.info,  Node: ZAbs Intrinsic,  Next: ZCos Intrinsic,  Prev: XOr Intrinsic,  Up: Table of Intrinsic Functions\n-\n-ZAbs Intrinsic\n-..............\n-\n-     ZAbs(A)\n-\n-ZAbs: `REAL(KIND=2)' function.\n-\n-A: `COMPLEX(KIND=2)'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `f2c'.\n-\n-Description:\n-\n-   Archaic form of `ABS()' that is specific to one type for A.  *Note\n-Abs Intrinsic::.\n-\n-\u001f\n-File: g77.info,  Node: ZCos Intrinsic,  Next: ZExp Intrinsic,  Prev: ZAbs Intrinsic,  Up: Table of Intrinsic Functions\n-\n-ZCos Intrinsic\n-..............\n-\n-     ZCos(X)\n-\n-ZCos: `COMPLEX(KIND=2)' function.\n-\n-X: `COMPLEX(KIND=2)'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `f2c'.\n-\n-Description:\n-\n-   Archaic form of `COS()' that is specific to one type for X.  *Note\n-Cos Intrinsic::.\n-\n-\u001f\n-File: g77.info,  Node: ZExp Intrinsic,  Next: ZLog Intrinsic,  Prev: ZCos Intrinsic,  Up: Table of Intrinsic Functions\n-\n-ZExp Intrinsic\n-..............\n-\n-     ZExp(X)\n-\n-ZExp: `COMPLEX(KIND=2)' function.\n-\n-X: `COMPLEX(KIND=2)'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `f2c'.\n-\n-Description:\n-\n-   Archaic form of `EXP()' that is specific to one type for X.  *Note\n-Exp Intrinsic::.\n-\n-\u001f\n-File: g77.info,  Node: ZLog Intrinsic,  Next: ZSin Intrinsic,  Prev: ZExp Intrinsic,  Up: Table of Intrinsic Functions\n-\n-ZLog Intrinsic\n-..............\n-\n-     ZLog(X)\n-\n-ZLog: `COMPLEX(KIND=2)' function.\n-\n-X: `COMPLEX(KIND=2)'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `f2c'.\n-\n-Description:\n-\n-   Archaic form of `LOG()' that is specific to one type for X.  *Note\n-Log Intrinsic::.\n-\n-\u001f\n-File: g77.info,  Node: ZSin Intrinsic,  Next: ZSqRt Intrinsic,  Prev: ZLog Intrinsic,  Up: Table of Intrinsic Functions\n-\n-ZSin Intrinsic\n-..............\n-\n-     ZSin(X)\n-\n-ZSin: `COMPLEX(KIND=2)' function.\n-\n-X: `COMPLEX(KIND=2)'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `f2c'.\n-\n-Description:\n-\n-   Archaic form of `SIN()' that is specific to one type for X.  *Note\n-Sin Intrinsic::.\n-\n-\u001f\n-File: g77.info,  Node: ZSqRt Intrinsic,  Prev: ZSin Intrinsic,  Up: Table of Intrinsic Functions\n-\n-ZSqRt Intrinsic\n-...............\n-\n-     ZSqRt(X)\n-\n-ZSqRt: `COMPLEX(KIND=2)' function.\n-\n-X: `COMPLEX(KIND=2)'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `f2c'.\n-\n-Description:\n-\n-   Archaic form of `SQRT()' that is specific to one type for X.  *Note\n-SqRt Intrinsic::.\n-\n-\u001f\n-File: g77.info,  Node: Scope and Classes of Names,  Prev: Functions and Subroutines,  Up: Language\n-\n-Scope and Classes of Symbolic Names\n-===================================\n-\n-   (The following information augments or overrides the information in\n-Chapter 18 of ANSI X3.9-1978 FORTRAN 77 in specifying the GNU Fortran\n-language.  Chapter 18 of that document otherwise serves as the basis\n-for the relevant aspects of GNU Fortran.)\n-\n-* Menu:\n-\n-* Underscores in Symbol Names::\n-\n-\u001f\n-File: g77.info,  Node: Underscores in Symbol Names,  Up: Scope and Classes of Names\n-\n-Underscores in Symbol Names\n----------------------------\n-\n-   Underscores (`_') are accepted in symbol names after the first\n-character (which must be a letter).\n-\n-\u001f\n-File: g77.info,  Node: Other Dialects,  Next: Other Compilers,  Prev: Compiler,  Up: Top\n-\n-Other Dialects\n-**************\n-\n-   GNU Fortran supports a variety of features that are not considered\n-part of the GNU Fortran language itself, but are representative of\n-various dialects of Fortran that `g77' supports in whole or in part.\n-\n-   Any of the features listed below might be disallowed by `g77' unless\n-some command-line option is specified.  Currently, some of the features\n-are accepted using the default invocation of `g77', but that might\n-change in the future.\n-\n-   *Note: This portion of the documentation definitely needs a lot of\n-work!*\n-\n-* Menu:\n-\n-* Source Form::       Details of fixed-form and free-form source.\n-* Trailing Comment::  Use of `/*' to start a comment.\n-* Debug Line::        Use of `D' in column 1.\n-* Dollar Signs::      Use of `$' in symbolic names.\n-* Case Sensitivity::  Uppercase and lowercase in source files.\n-* VXT Fortran::       ...versus the GNU Fortran language.\n-* Fortran 90::        ...versus the GNU Fortran language.\n-* Pedantic Compilation::  Enforcing the standard.\n-* Distensions::       Misfeatures supported by GNU Fortran.\n-\n-\u001f\n-File: g77.info,  Node: Source Form,  Next: Trailing Comment,  Up: Other Dialects\n-\n-Source Form\n-===========\n-\n-   GNU Fortran accepts programs written in either fixed form or free\n-form.\n-\n-   Fixed form corresponds to ANSI FORTRAN 77 (plus popular extensions,\n-such as allowing tabs) and Fortran 90's fixed form.\n-\n-   Free form corresponds to Fortran 90's free form (though possibly not\n-entirely up-to-date, and without complaining about some things that for\n-which Fortran 90 requires diagnostics, such as the spaces in the\n-constant in `R = 3 . 1').\n-\n-   The way a Fortran compiler views source files depends entirely on the\n-implementation choices made for the compiler, since those choices are\n-explicitly left to the implementation by the published Fortran\n-standards.  GNU Fortran currently tries to be somewhat like a few\n-popular compilers (`f2c', Digital (\"DEC\") Fortran, and so on), though a\n-cleaner default definition along with more flexibility offered by\n-command-line options is likely to be offered in version 0.6.\n-\n-   This section describes how `g77' interprets source lines.\n-\n-* Menu:\n-\n-* Carriage Returns::  Carriage returns ignored.\n-* Tabs::              Tabs converted to spaces.\n-* Short Lines::       Short lines padded with spaces (fixed-form only).\n-* Long Lines::        Long lines truncated.\n-* Ampersands::        Special Continuation Lines.\n-\n-\u001f\n-File: g77.info,  Node: Carriage Returns,  Next: Tabs,  Up: Source Form\n-\n-Carriage Returns\n-----------------\n-\n-   Carriage returns (`\\r') in source lines are ignored.  This is\n-somewhat different from `f2c', which seems to treat them as spaces\n-outside character/Hollerith constants, and encodes them as `\\r' inside\n-such constants.\n-\n-\u001f\n-File: g77.info,  Node: Tabs,  Next: Short Lines,  Prev: Carriage Returns,  Up: Source Form\n-\n-Tabs\n-----\n-\n-   A source line with a <TAB> character anywhere in it is treated as\n-entirely significant--however long it is--instead of ending in column\n-72 (for fixed-form source) or 132 (for free-form source).  This also is\n-different from `f2c', which encodes tabs as `\\t' (the ASCII <TAB>\n-character) inside character and Hollerith constants, but nevertheless\n-seems to treat the column position as if it had been affected by the\n-canonical tab positioning.\n-\n-   `g77' effectively translates tabs to the appropriate number of\n-spaces (a la the default for the UNIX `expand' command) before doing\n-any other processing, other than (currently) noting whether a tab was\n-found on a line and using this information to decide how to interpret\n-the length of the line and continued constants.\n-\n-   Note that this default behavior probably will change for version 0.6,\n-when it will presumably be available via a command-line option.  The\n-default as of version 0.6 is planned to be a \"pure visual\" model, where\n-tabs are immediately converted to spaces and otherwise have no effect,\n-so the way a typical user sees source lines produces a consistent\n-result no matter how the spacing in those source lines is actually\n-implemented via tabs, spaces, and trailing tabs/spaces before newline.\n-Command-line options are likely to be added to specify whether all or\n-just-tabbed lines are to be extended to 132 or full input-line length,\n-and perhaps even an option will be added to specify the truncated-line\n-behavior to which some Digital compilers default (and which affects the\n-way continued character/Hollerith constants are interpreted).\n-\n-\u001f\n-File: g77.info,  Node: Short Lines,  Next: Long Lines,  Prev: Tabs,  Up: Source Form\n-\n-Short Lines\n------------\n-\n-   Source lines shorter than the applicable fixed-form length are\n-treated as if they were padded with spaces to that length.  (None of\n-this is relevant to source files written in free form.)\n-\n-   This affects only continued character and Hollerith constants, and\n-is a different interpretation than provided by some other popular\n-compilers (although a bit more consistent with the traditional\n-punched-card basis of Fortran and the way the Fortran standard\n-expressed fixed source form).\n-\n-   `g77' might someday offer an option to warn about cases where\n-differences might be seen as a result of this treatment, and perhaps an\n-option to specify the alternate behavior as well.\n-\n-   Note that this padding cannot apply to lines that are effectively of\n-infinite length--such lines are specified using command-line options\n-like `-ffixed-line-length-none', for example.\n-\n-\u001f\n-File: g77.info,  Node: Long Lines,  Next: Ampersands,  Prev: Short Lines,  Up: Source Form\n-\n-Long Lines\n-----------\n-\n-   Source lines longer than the applicable length are truncated to that\n-length.  Currently, `g77' does not warn if the truncated characters are\n-not spaces, to accommodate existing code written for systems that\n-treated truncated text as commentary (especially in columns 73 through\n-80).\n-\n-   *Note Options Controlling Fortran Dialect: Fortran Dialect Options,\n-for information on the `-ffixed-line-length-N' option, which can be\n-used to set the line length applicable to fixed-form source files.\n-\n-\u001f\n-File: g77.info,  Node: Ampersands,  Prev: Long Lines,  Up: Source Form\n-\n-Ampersand Continuation Line\n----------------------------\n-\n-   A `&' in column 1 of fixed-form source denotes an arbitrary-length\n-continuation line, imitating the behavior of `f2c'.\n-\n-\u001f\n-File: g77.info,  Node: Trailing Comment,  Next: Debug Line,  Prev: Source Form,  Up: Other Dialects\n-\n-Trailing Comment\n-================\n-\n-   `g77' supports use of `/*' to start a trailing comment.  In the GNU\n-Fortran language, `!' is used for this purpose.\n-\n-   `/*' is not in the GNU Fortran language because the use of `/*' in a\n-program might suggest to some readers that a block, not trailing,\n-comment is started (and thus ended by `*/', not end of line), since\n-that is the meaning of `/*' in C.\n-\n-   Also, such readers might think they can use `//' to start a trailing\n-comment as an alternative to `/*', but `//' already denotes\n-concatenation, and such a \"comment\" might actually result in a program\n-that compiles without error (though it would likely behave incorrectly).\n-\n-\u001f\n-File: g77.info,  Node: Debug Line,  Next: Dollar Signs,  Prev: Trailing Comment,  Up: Other Dialects\n-\n-Debug Line\n-==========\n-\n-   Use of `D' or `d' as the first character (column 1) of a source line\n-denotes a debug line.\n-\n-   In turn, a debug line is treated as either a comment line or a\n-normal line, depending on whether debug lines are enabled.\n-\n-   When treated as a comment line, a line beginning with `D' or `d' is\n-treated as if it the first character was `C' or `c', respectively.\n-When treated as a normal line, such a line is treated as if the first\n-character was <SPC> (space).\n-\n-   (Currently, `g77' provides no means for treating debug lines as\n-normal lines.)\n-\n-\u001f\n-File: g77.info,  Node: Dollar Signs,  Next: Case Sensitivity,  Prev: Debug Line,  Up: Other Dialects\n-\n-Dollar Signs in Symbol Names\n-============================\n-\n-   Dollar signs (`$') are allowed in symbol names (after the first\n-character) when the `-fdollar-ok' option is specified.\n-\n-\u001f\n-File: g77.info,  Node: Case Sensitivity,  Next: VXT Fortran,  Prev: Dollar Signs,  Up: Other Dialects\n-\n-Case Sensitivity\n-================\n-\n-   GNU Fortran offers the programmer way too much flexibility in\n-deciding how source files are to be treated vis-a-vis uppercase and\n-lowercase characters.  There are 66 useful settings that affect case\n-sensitivity, plus 10 settings that are nearly useless, with the\n-remaining 116 settings being either redundant or useless.\n-\n-   None of these settings have any effect on the contents of comments\n-(the text after a `c' or `C' in Column 1, for example) or of character\n-or Hollerith constants.  Note that things like the `E' in the statement\n-`CALL FOO(3.2E10)' and the `TO' in `ASSIGN 10 TO LAB' are considered\n-built-in keywords, and so are affected by these settings.\n-\n-   Low-level switches are identified in this section as follows:\n-\n-     A Source Case Conversion:\n-\n-          0 Preserve (see Note 1)\n-\n-          1 Convert to Upper Case\n-\n-          2 Convert to Lower Case\n-\n-     B Built-in Keyword Matching:\n-\n-          0 Match Any Case (per-character basis)\n-\n-          1 Match Upper Case Only\n-\n-          2 Match Lower Case Only\n-\n-          3 Match InitialCaps Only (see tables for spellings)\n-\n-     C Built-in Intrinsic Matching:\n-\n-          0 Match Any Case (per-character basis)\n-\n-          1 Match Upper Case Only\n-\n-          2 Match Lower Case Only\n-\n-          3 Match InitialCaps Only (see tables for spellings)\n-\n-     D User-defined Symbol Possibilities (warnings only):\n-\n-          0 Allow Any Case (per-character basis)\n-\n-          1 Allow Upper Case Only\n-\n-          2 Allow Lower Case Only\n-\n-          3 Allow InitialCaps Only (see Note 2)\n-\n-   Note 1: `g77' eventually will support `NAMELIST' in a manner that is\n-consistent with these source switches--in the sense that input will be\n-expected to meet the same requirements as source code in terms of\n-matching symbol names and keywords (for the exponent letters).\n-\n-   Currently, however, `NAMELIST' is supported by `libf2c', which\n-uppercases `NAMELIST' input and symbol names for matching.  This means\n-not only that `NAMELIST' output currently shows symbol (and keyword)\n-names in uppercase even if lower-case source conversion (option A2) is\n-selected, but that `NAMELIST' cannot be adequately supported when\n-source case preservation (option A0) is selected.\n-\n-   If A0 is selected, a warning message will be output for each\n-`NAMELIST' statement to this effect.  The behavior of the program is\n-undefined at run time if two or more symbol names appear in a given\n-`NAMELIST' such that the names are identical when converted to upper\n-case (e.g. `NAMELIST /X/ VAR, Var, var').  For complete and total\n-elegance, perhaps there should be a warning when option A2 is selected,\n-since the output of NAMELIST is currently in uppercase but will someday\n-be lowercase (when a `libg77' is written), but that seems to be\n-overkill for a product in beta test.\n-\n-   Note 2: Rules for InitialCaps names are:\n-\n-   - Must be a single uppercase letter, *or*\n-\n-   - Must start with an uppercase letter and contain at least one\n-     lowercase letter.\n-\n-   So `A', `Ab', `ABc', `AbC', and `Abc' are valid InitialCaps names,\n-but `AB', `A2', and `ABC' are not.  Note that most, but not all,\n-built-in names meet these requirements--the exceptions are some of the\n-two-letter format specifiers, such as `BN' and `BZ'.\n-\n-   Here are the names of the corresponding command-line options:\n-\n-     A0: -fsource-case-preserve\n-     A1: -fsource-case-upper\n-     A2: -fsource-case-lower\n-     \n-     B0: -fmatch-case-any\n-     B1: -fmatch-case-upper\n-     B2: -fmatch-case-lower\n-     B3: -fmatch-case-initcap\n-     \n-     C0: -fintrin-case-any\n-     C1: -fintrin-case-upper\n-     C2: -fintrin-case-lower\n-     C3: -fintrin-case-initcap\n-     \n-     D0: -fsymbol-case-any\n-     D1: -fsymbol-case-upper\n-     D2: -fsymbol-case-lower\n-     D3: -fsymbol-case-initcap\n-\n-   Useful combinations of the above settings, along with abbreviated\n-option names that set some of these combinations all at once:\n-\n-      1: A0--  B0---  C0---  D0---    -fcase-preserve\n-      2: A0--  B0---  C0---  D-1--\n-      3: A0--  B0---  C0---  D--2-\n-      4: A0--  B0---  C0---  D---3\n-      5: A0--  B0---  C-1--  D0---\n-      6: A0--  B0---  C-1--  D-1--\n-      7: A0--  B0---  C-1--  D--2-\n-      8: A0--  B0---  C-1--  D---3\n-      9: A0--  B0---  C--2-  D0---\n-     10: A0--  B0---  C--2-  D-1--\n-     11: A0--  B0---  C--2-  D--2-\n-     12: A0--  B0---  C--2-  D---3\n-     13: A0--  B0---  C---3  D0---\n-     14: A0--  B0---  C---3  D-1--\n-     15: A0--  B0---  C---3  D--2-\n-     16: A0--  B0---  C---3  D---3\n-     17: A0--  B-1--  C0---  D0---\n-     18: A0--  B-1--  C0---  D-1--\n-     19: A0--  B-1--  C0---  D--2-\n-     20: A0--  B-1--  C0---  D---3\n-     21: A0--  B-1--  C-1--  D0---\n-     22: A0--  B-1--  C-1--  D-1--    -fcase-strict-upper\n-     23: A0--  B-1--  C-1--  D--2-\n-     24: A0--  B-1--  C-1--  D---3\n-     25: A0--  B-1--  C--2-  D0---\n-     26: A0--  B-1--  C--2-  D-1--\n-     27: A0--  B-1--  C--2-  D--2-\n-     28: A0--  B-1--  C--2-  D---3\n-     29: A0--  B-1--  C---3  D0---\n-     30: A0--  B-1--  C---3  D-1--\n-     31: A0--  B-1--  C---3  D--2-\n-     32: A0--  B-1--  C---3  D---3\n-     33: A0--  B--2-  C0---  D0---\n-     34: A0--  B--2-  C0---  D-1--\n-     35: A0--  B--2-  C0---  D--2-\n-     36: A0--  B--2-  C0---  D---3\n-     37: A0--  B--2-  C-1--  D0---\n-     38: A0--  B--2-  C-1--  D-1--\n-     39: A0--  B--2-  C-1--  D--2-\n-     40: A0--  B--2-  C-1--  D---3\n-     41: A0--  B--2-  C--2-  D0---\n-     42: A0--  B--2-  C--2-  D-1--\n-     43: A0--  B--2-  C--2-  D--2-    -fcase-strict-lower\n-     44: A0--  B--2-  C--2-  D---3\n-     45: A0--  B--2-  C---3  D0---\n-     46: A0--  B--2-  C---3  D-1--\n-     47: A0--  B--2-  C---3  D--2-\n-     48: A0--  B--2-  C---3  D---3\n-     49: A0--  B---3  C0---  D0---\n-     50: A0--  B---3  C0---  D-1--\n-     51: A0--  B---3  C0---  D--2-\n-     52: A0--  B---3  C0---  D---3\n-     53: A0--  B---3  C-1--  D0---\n-     54: A0--  B---3  C-1--  D-1--\n-     55: A0--  B---3  C-1--  D--2-\n-     56: A0--  B---3  C-1--  D---3\n-     57: A0--  B---3  C--2-  D0---\n-     58: A0--  B---3  C--2-  D-1--\n-     59: A0--  B---3  C--2-  D--2-\n-     60: A0--  B---3  C--2-  D---3\n-     61: A0--  B---3  C---3  D0---\n-     62: A0--  B---3  C---3  D-1--\n-     63: A0--  B---3  C---3  D--2-\n-     64: A0--  B---3  C---3  D---3    -fcase-initcap\n-     65: A-1-  B01--  C01--  D01--    -fcase-upper\n-     66: A--2  B0-2-  C0-2-  D0-2-    -fcase-lower\n-\n-   Number 22 is the \"strict\" ANSI FORTRAN 77 model wherein all input\n-(except comments, character constants, and Hollerith strings) must be\n-entered in uppercase.  Use `-fcase-strict-upper' to specify this\n-combination.\n-\n-   Number 43 is like Number 22 except all input must be lowercase.  Use\n-`-fcase-strict-lower' to specify this combination.\n-\n-   Number 65 is the \"classic\" ANSI FORTRAN 77 model as implemented on\n-many non-UNIX machines whereby all the source is translated to\n-uppercase.  Use `-fcase-upper' to specify this combination.\n-\n-   Number 66 is the \"canonical\" UNIX model whereby all the source is\n-translated to lowercase.  Use `-fcase-lower' to specify this\n-combination.\n-\n-   There are a few nearly useless combinations:\n-\n-     67: A-1-  B01--  C01--  D--2-\n-     68: A-1-  B01--  C01--  D---3\n-     69: A-1-  B01--  C--23  D01--\n-     70: A-1-  B01--  C--23  D--2-\n-     71: A-1-  B01--  C--23  D---3\n-     72: A--2  B01--  C0-2-  D-1--\n-     73: A--2  B01--  C0-2-  D---3\n-     74: A--2  B01--  C-1-3  D0-2-\n-     75: A--2  B01--  C-1-3  D-1--\n-     76: A--2  B01--  C-1-3  D---3\n-\n-   The above allow some programs to be compiled but with restrictions\n-that make most useful programs impossible: Numbers 67 and 72 warn about\n-*any* user-defined symbol names (such as `SUBROUTINE FOO'); Numbers 68\n-and 73 warn about any user-defined symbol names longer than one\n-character that don't have at least one non-alphabetic character after\n-the first; Numbers 69 and 74 disallow any references to intrinsics; and\n-Numbers 70, 71, 75, and 76 are combinations of the restrictions in\n-67+69, 68+69, 72+74, and 73+74, respectively.\n-\n-   All redundant combinations are shown in the above tables anyplace\n-where more than one setting is shown for a low-level switch.  For\n-example, `B0-2-' means either setting 0 or 2 is valid for switch B.\n-The \"proper\" setting in such a case is the one that copies the setting\n-of switch A--any other setting might slightly reduce the speed of the\n-compiler, though possibly to an unmeasurable extent.\n-\n-   All remaining combinations are useless in that they prevent\n-successful compilation of non-null source files (source files with\n-something other than comments).\n-\n-\u001f\n-File: g77.info,  Node: VXT Fortran,  Next: Fortran 90,  Prev: Case Sensitivity,  Up: Other Dialects\n-\n-VXT Fortran\n-===========\n-\n-   `g77' supports certain constructs that have different meanings in\n-VXT Fortran than they do in the GNU Fortran language.\n-\n-   Generally, this manual uses the invented term VXT Fortran to refer\n-VAX FORTRAN (circa v4).  That compiler offered many popular features,\n-though not necessarily those that are specific to the VAX processor\n-architecture, the VMS operating system, or Digital Equipment\n-Corporation's Fortran product line.  (VAX and VMS probably are\n-trademarks of Digital Equipment Corporation.)\n-\n-   An extension offered by a Digital Fortran product that also is\n-offered by several other Fortran products for different kinds of\n-systems is probably going to be considered for inclusion in `g77'\n-someday, and is considered a VXT Fortran feature.\n-\n-   The `-fvxt' option generally specifies that, where the meaning of a\n-construct is ambiguous (means one thing in GNU Fortran and another in\n-VXT Fortran), the VXT Fortran meaning is to be assumed.\n-\n-* Menu:\n-\n-* Double Quote Meaning::  `\"2000' as octal constant.\n-* Exclamation Point::     `!' in column 6.\n-\n-\u001f\n-File: g77.info,  Node: Double Quote Meaning,  Next: Exclamation Point,  Up: VXT Fortran\n-\n-Meaning of Double Quote\n------------------------\n-\n-   `g77' treats double-quote (`\"') as beginning an octal constant of\n-`INTEGER(KIND=1)' type when the `-fvxt' option is specified.  The form\n-of this octal constant is\n-\n-     \"OCTAL-DIGITS\n-\n-where OCTAL-DIGITS is a nonempty string of characters in the set\n-`01234567'.\n-\n-   For example, the `-fvxt' option permits this:\n-\n-     PRINT *, \"20\n-     END\n-\n-The above program would print the value `16'.\n-\n-   *Note Integer Type::, for information on the preferred construct for\n-integer constants specified using GNU Fortran's octal notation.\n-\n-   (In the GNU Fortran language, the double-quote character (`\"')\n-delimits a character constant just as does apostrophe (`'').  There is\n-no way to allow both constructs in the general case, since statements\n-like `PRINT *,\"2000 !comment?\"' would be ambiguous.)\n-\n-\u001f\n-File: g77.info,  Node: Exclamation Point,  Prev: Double Quote Meaning,  Up: VXT Fortran\n-\n-Meaning of Exclamation Point in Column 6\n-----------------------------------------\n-\n-   `g77' treats an exclamation point (`!') in column 6 of a fixed-form\n-source file as a continuation character rather than as the beginning of\n-a comment (as it does in any other column) when the `-fvxt' option is\n-specified.\n-\n-   The following program, when run, prints a message indicating whether\n-it is interpreted according to GNU Fortran (and Fortran 90) rules or\n-VXT Fortran rules:\n-\n-     C234567  (This line begins in column 1.)\n-           I = 0\n-          !1\n-           IF (I.EQ.0) PRINT *, ' I am a VXT Fortran program'\n-           IF (I.EQ.1) PRINT *, ' I am a Fortran 90 program'\n-           IF (I.LT.0 .OR. I.GT.1) PRINT *, ' I am a HAL 9000 computer'\n-           END\n-\n-   (In the GNU Fortran and Fortran 90 languages, exclamation point is a\n-valid character and, unlike space (<SPC>) or zero (`0'), marks a line\n-as a continuation line when it appears in column 6.)\n-\n-\u001f\n-File: g77.info,  Node: Fortran 90,  Next: Pedantic Compilation,  Prev: VXT Fortran,  Up: Other Dialects\n-\n-Fortran 90\n-==========\n-\n-   The GNU Fortran language includes a number of features that are part\n-of Fortran 90, even when the `-ff90' option is not specified.  The\n-features enabled by `-ff90' are intended to be those that, when `-ff90'\n-is not specified, would have another meaning to `g77'--usually meaning\n-something invalid in the GNU Fortran language.\n-\n-   So, the purpose of `-ff90' is not to specify whether `g77' is to\n-gratuitously reject Fortran 90 constructs.  The `-pedantic' option\n-specified with `-fno-f90' is intended to do that, although its\n-implementation is certainly incomplete at this point.\n-\n-   When `-ff90' is specified:\n-\n-   * The type of `REAL(EXPR)' and `AIMAG(EXPR)', where EXPR is\n-     `COMPLEX' type, is the same type as the real part of EXPR.\n-\n-     For example, assuming `Z' is type `COMPLEX(KIND=2)', `REAL(Z)'\n-     would return a value of type `REAL(KIND=2)', not of type\n-     `REAL(KIND=1)', since `-ff90' is specified.\n-\n-\u001f\n-File: g77.info,  Node: Pedantic Compilation,  Next: Distensions,  Prev: Fortran 90,  Up: Other Dialects\n-\n-Pedantic Compilation\n-====================\n-\n-   The `-fpedantic' command-line option specifies that `g77' is to warn\n-about code that is not standard-conforming.  This is useful for finding\n-some extensions `g77' accepts that other compilers might not accept.\n-(Note that the `-pedantic' and `-pedantic-errors' options always imply\n-`-fpedantic'.)\n-\n-   With `-fno-f90' in force, ANSI FORTRAN 77 is used as the standard\n-for conforming code.  With `-ff90' in force, Fortran 90 is used.\n-\n-   The constructs for which `g77' issues diagnostics when `-fpedantic'\n-and `-fno-f90' are in force are:\n-\n-   * Automatic arrays, as in\n-\n-          SUBROUTINE X(N)\n-          REAL A(N)\n-          ...\n-\n-     where `A' is not listed in any `ENTRY' statement, and thus is not\n-     a dummy argument.\n-\n-   * The commas in `READ (5), I' and `WRITE (10), J'.\n-\n-     These commas are disallowed by FORTRAN 77, but, while strictly\n-     superfluous, are syntactically elegant, especially given that\n-     commas are required in statements such as `READ 99, I' and `PRINT\n-     *, J'.  Many compilers permit the superfluous commas for this\n-     reason.\n-\n-   * `DOUBLE COMPLEX', either explicitly or implicitly.\n-\n-     An explicit use of this type is via a `DOUBLE COMPLEX' or\n-     `IMPLICIT DOUBLE COMPLEX' statement, for examples.\n-\n-     An example of an implicit use is the expression `C*D', where `C'\n-     is `COMPLEX(KIND=1)' and `D' is `DOUBLE PRECISION'.  This\n-     expression is prohibited by ANSI FORTRAN 77 because the rules of\n-     promotion would suggest that it produce a `DOUBLE COMPLEX'\n-     result--a type not provided for by that standard.\n-\n-   * Automatic conversion of numeric expressions to `INTEGER(KIND=1)'\n-     in contexts such as:\n-\n-        - Array-reference indexes.\n-\n-        - Alternate-return values.\n-\n-        - Computed `GOTO'.\n-\n-        - `FORMAT' run-time expressions (not yet supported).\n-\n-        - Dimension lists in specification statements.\n-\n-        - Numbers for I/O statements (such as `READ (UNIT=3.2), I')\n-\n-        - Sizes of `CHARACTER' entities in specification statements.\n-\n-        - Kind types in specification entities (a Fortran 90 feature).\n-\n-        - Initial, terminal, and incrementation parameters for\n-          implied-`DO' constructs in `DATA' statements.\n-\n-   * Automatic conversion of `LOGICAL' expressions to `INTEGER' in\n-     contexts such as arithmetic `IF' (where `COMPLEX' expressions are\n-     disallowed anyway).\n-\n-   * Zero-size array dimensions, as in:\n-\n-          INTEGER I(10,20,4:2)\n-\n-   * Zero-length `CHARACTER' entities, as in:\n-\n-          PRINT *, ''\n-\n-   * Substring operators applied to character constants and named\n-     constants, as in:\n-\n-          PRINT *, 'hello'(3:5)\n-\n-   * Null arguments passed to statement function, as in:\n-\n-          PRINT *, FOO(,3)\n-\n-   * Disagreement among program units regarding whether a given `COMMON'\n-     area is `SAVE'd (for targets where program units in a single source\n-     file are \"glued\" together as they typically are for UNIX\n-     development environments).\n-\n-   * Disagreement among program units regarding the size of a named\n-     `COMMON' block.\n-\n-   * Specification statements following first `DATA' statement.\n-\n-     (In the GNU Fortran language, `DATA I/1/' may be followed by\n-     `INTEGER J', but not `INTEGER I'.  The `-fpedantic' option\n-     disallows both of these.)\n-\n-   * Semicolon as statement separator, as in:\n-\n-          CALL FOO; CALL BAR\n-\n-   * Use of `&' in column 1 of fixed-form source (to indicate\n-     continuation).\n-\n-   * Use of `CHARACTER' constants to initialize numeric entities, and\n-     vice versa.\n-\n-   * Expressions having two arithmetic operators in a row, such as\n-     `X*-Y'.\n-\n-   If `-fpedantic' is specified along with `-ff90', the following\n-constructs result in diagnostics:\n-\n-   * Use of semicolon as a statement separator on a line that has an\n-     `INCLUDE' directive.\n-\n-\u001f\n-File: g77.info,  Node: Distensions,  Prev: Pedantic Compilation,  Up: Other Dialects\n-\n-Distensions\n-===========\n-\n-   The `-fugly-*' command-line options determine whether certain\n-features supported by VAX FORTRAN and other such compilers, but\n-considered too ugly to be in code that can be changed to use safer\n-and/or more portable constructs, are accepted.  These are humorously\n-referred to as \"distensions\", extensions that just plain look ugly in\n-the harsh light of day.\n-\n-   *Note:* The `-fugly' option, which currently serves as shorthand to\n-enable all of the distensions below, is likely to be removed in a\n-future version of `g77'.  That's because it's likely new distensions\n-will be added that conflict with existing ones in terms of assigning\n-meaning to a given chunk of code.  (Also, it's pretty clear that users\n-should not use `-fugly' as shorthand when the next release of `g77'\n-might add a distension to that that causes their existing code, when\n-recompiled, to behave differently--perhaps even fail to compile or run\n-correctly.)\n-\n-* Menu:\n-\n-* Ugly Implicit Argument Conversion::  Disabled via `-fno-ugly-args'.\n-* Ugly Assumed-Size Arrays::           Enabled via `-fugly-assumed'.\n-* Ugly Null Arguments::                Enabled via `-fugly-comma'.\n-* Ugly Complex Part Extraction::       Enabled via `-fugly-complex'.\n-* Ugly Conversion of Initializers::    Disabled via `-fno-ugly-init'.\n-* Ugly Integer Conversions::           Enabled via `-fugly-logint'.\n-* Ugly Assigned Labels::               Enabled via `-fugly-assign'.\n-\n-\u001f\n-File: g77.info,  Node: Ugly Implicit Argument Conversion,  Next: Ugly Assumed-Size Arrays,  Up: Distensions\n-\n-Implicit Argument Conversion\n-----------------------------\n-\n-   The `-fno-ugly-args' option disables passing typeless and Hollerith\n-constants as actual arguments in procedure invocations.  For example:\n-\n-     CALL FOO(4HABCD)\n-     CALL BAR('123'O)\n-\n-These constructs can be too easily used to create non-portable code,\n-but are not considered as \"ugly\" as others.  Further, they are widely\n-used in existing Fortran source code in ways that often are quite\n-portable.  Therefore, they are enabled by default.\n-\n-\u001f\n-File: g77.info,  Node: Ugly Assumed-Size Arrays,  Next: Ugly Null Arguments,  Prev: Ugly Implicit Argument Conversion,  Up: Distensions\n-\n-Ugly Assumed-Size Arrays\n-------------------------\n-\n-   The `-fugly-assumed' option enables the treatment of any array with\n-a final dimension specified as `1' as an assumed-size array, as if `*'\n-had been specified instead.\n-\n-   For example, `DIMENSION X(1)' is treated as if it had read\n-`DIMENSION X(*)' if `X' is listed as a dummy argument in a preceding\n-`SUBROUTINE', `FUNCTION', or `ENTRY' statement in the same program unit.\n-\n-   Use an explicit lower bound to avoid this interpretation.  For\n-example, `DIMENSION X(1:1)' is never treated as if it had read\n-`DIMENSION X(*)' or `DIMENSION X(1:*)'.  Nor is `DIMENSION X(2-1)'\n-affected by this option, since that kind of expression is unlikely to\n-have been intended to designate an assumed-size array.\n-\n-   This option is used to prevent warnings being issued about apparent\n-out-of-bounds reference such as `X(2) = 99'.\n-\n-   It also prevents the array from being used in contexts that disallow\n-assumed-size arrays, such as `PRINT *,X'.  In such cases, a diagnostic\n-is generated and the source file is not compiled.\n-\n-   The construct affected by this option is used only in old code that\n-pre-exists the widespread acceptance of adjustable and assumed-size\n-arrays in the Fortran community.\n-\n-   *Note:* This option does not affect how `DIMENSION X(1)' is treated\n-if `X' is listed as a dummy argument only *after* the `DIMENSION'\n-statement (presumably in an `ENTRY' statement).  For example,\n-`-fugly-assumed' has no effect on the following program unit:\n-\n-     SUBROUTINE X\n-     REAL A(1)\n-     RETURN\n-     ENTRY Y(A)\n-     PRINT *, A\n-     END\n-\n-\u001f\n-File: g77.info,  Node: Ugly Complex Part Extraction,  Next: Ugly Conversion of Initializers,  Prev: Ugly Null Arguments,  Up: Distensions\n-\n-Ugly Complex Part Extraction\n-----------------------------\n-\n-   The `-fugly-complex' option enables use of the `REAL()' and `AIMAG()'\n-intrinsics with arguments that are `COMPLEX' types other than\n-`COMPLEX(KIND=1)'.\n-\n-   With `-ff90' in effect, these intrinsics return the unconverted real\n-and imaginary parts (respectively) of their argument.\n-\n-   With `-fno-f90' in effect, these intrinsics convert the real and\n-imaginary parts to `REAL(KIND=1)', and return the result of that\n-conversion.\n-\n-   Due to this ambiguity, the GNU Fortran language defines these\n-constructs as invalid, except in the specific case where they are\n-entirely and solely passed as an argument to an invocation of the\n-`REAL()' intrinsic.  For example,\n-\n-     REAL(REAL(Z))\n-\n-is permitted even when `Z' is `COMPLEX(KIND=2)' and `-fno-ugly-complex'\n-is in effect, because the meaning is clear.\n-\n-   `g77' enforces this restriction, unless `-fugly-complex' is\n-specified, in which case the appropriate interpretation is chosen and\n-no diagnostic is issued.\n-\n-   *Note CMPAMBIG::, for information on how to cope with existing code\n-with unclear expectations of `REAL()' and `AIMAG()' with\n-`COMPLEX(KIND=2)' arguments.\n-\n-   *Note RealPart Intrinsic::, for information on the `REALPART()'\n-intrinsic, used to extract the real part of a complex expression\n-without conversion.  *Note ImagPart Intrinsic::, for information on the\n-`IMAGPART()' intrinsic, used to extract the imaginary part of a complex\n-expression without conversion.\n-\n-\u001f\n-File: g77.info,  Node: Ugly Null Arguments,  Next: Ugly Complex Part Extraction,  Prev: Ugly Assumed-Size Arrays,  Up: Distensions\n-\n-Ugly Null Arguments\n--------------------\n-\n-   The `-fugly-comma' option enables use of a single trailing comma to\n-mean \"pass an extra trailing null argument\" in a list of actual\n-arguments to a procedure other than a statement function, and use of an\n-empty list of arguments to mean \"pass a single null argument\".\n-\n-   (Null arguments often are used in some procedure-calling schemes to\n-indicate omitted arguments.)\n-\n-   For example, `CALL FOO(,)' means \"pass two null arguments\", rather\n-than \"pass one null argument\".  Also, `CALL BAR()' means \"pass one null\n-argument\".\n-\n-   This construct is considered \"ugly\" because it does not provide an\n-elegant way to pass a single null argument that is syntactically\n-distinct from passing no arguments.  That is, this construct changes\n-the meaning of code that makes no use of the construct.\n-\n-   So, with `-fugly-comma' in force, `CALL FOO()' and `I = JFUNC()'\n-pass a single null argument, instead of passing no arguments as\n-required by the Fortran 77 and 90 standards.\n-\n-   *Note:* Many systems gracefully allow the case where a procedure\n-call passes one extra argument that the called procedure does not\n-expect.\n-\n-   So, in practice, there might be no difference in the behavior of a\n-program that does `CALL FOO()' or `I = JFUNC()' and is compiled with\n-`-fugly-comma' in force as compared to its behavior when compiled with\n-the default, `-fno-ugly-comma', in force, assuming `FOO' and `JFUNC' do\n-not expect any arguments to be passed.\n-\n-\u001f\n-File: g77.info,  Node: Ugly Conversion of Initializers,  Next: Ugly Integer Conversions,  Prev: Ugly Complex Part Extraction,  Up: Distensions\n-\n-Ugly Conversion of Initializers\n--------------------------------\n-\n-   The constructs disabled by `-fno-ugly-init' are:\n-\n-   * Use of Hollerith and typeless constants in contexts where they set\n-     initial (compile-time) values for variables, arrays, and named\n-     constants--that is, `DATA' and `PARAMETER' statements, plus\n-     type-declaration statements specifying initial values.\n-\n-     Here are some sample initializations that are disabled by the\n-     `-fno-ugly-init' option:\n-\n-          PARAMETER (VAL='9A304FFE'X)\n-          REAL*8 STRING/8HOUTPUT00/\n-          DATA VAR/4HABCD/\n-\n-   * In the same contexts as above, use of character constants to\n-     initialize numeric items and vice versa (one constant per item).\n-\n-     Here are more sample initializations that are disabled by the\n-     `-fno-ugly-init' option:\n-\n-          INTEGER IA\n-          CHARACTER BELL\n-          PARAMETER (IA = 'A')\n-          PARAMETER (BELL = 7)\n-\n-   * Use of Hollerith and typeless constants on the right-hand side of\n-     assignment statements to numeric types, and in other contexts\n-     (such as passing arguments in invocations of intrinsic procedures\n-     and statement functions) that are treated as assignments to known\n-     types (the dummy arguments, in these cases).\n-\n-     Here are sample statements that are disabled by the\n-     `-fno-ugly-init' option:\n-\n-          IVAR = 4HABCD\n-          PRINT *, IMAX0(2HAB, 2HBA)\n-\n-   The above constructs, when used, can tend to result in non-portable\n-code.  But, they are widely used in existing Fortran code in ways that\n-often are quite portable.  Therefore, they are enabled by default.\n-\n-\u001f\n-File: g77.info,  Node: Ugly Integer Conversions,  Next: Ugly Assigned Labels,  Prev: Ugly Conversion of Initializers,  Up: Distensions\n-\n-Ugly Integer Conversions\n-------------------------\n-\n-   The constructs enabled via `-fugly-logint' are:\n-\n-   * Automatic conversion between `INTEGER' and `LOGICAL' as dictated by\n-     context (typically implies nonportable dependencies on how a\n-     particular implementation encodes `.TRUE.' and `.FALSE.').\n-\n-   * Use of a `LOGICAL' variable in `ASSIGN' and assigned-`GOTO'\n-     statements.\n-\n-   The above constructs are disabled by default because use of them\n-tends to lead to non-portable code.  Even existing Fortran code that\n-uses that often turns out to be non-portable, if not outright buggy.\n-\n-   Some of this is due to differences among implementations as far as\n-how `.TRUE.' and `.FALSE.' are encoded as `INTEGER' values--Fortran\n-code that assumes a particular coding is likely to use one of the above\n-constructs, and is also likely to not work correctly on implementations\n-using different encodings.\n-\n-   *Note Equivalence Versus Equality::, for more information.\n-"}, {"sha": "b2176a2d92def9c5107a1e0eb66a0a880fdf124b", "filename": "gcc/f/g77.info-11", "status": "removed", "additions": 0, "deletions": 1608, "changes": 1608, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-11?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2", "patch": "@@ -1,1608 +0,0 @@\n-This is Info file g77.info, produced by Makeinfo version 1.68 from the\n-input file g77.texi.\n-\n-   This file explains how to use the GNU Fortran system.\n-\n-   Published by the Free Software Foundation 59 Temple Place - Suite 330\n-Boston, MA 02111-1307 USA\n-\n-   Copyright (C) 1995-1997 Free Software Foundation, Inc.\n-\n-   Permission is granted to make and distribute verbatim copies of this\n-manual provided the copyright notice and this permission notice are\n-preserved on all copies.\n-\n-   Permission is granted to copy and distribute modified versions of\n-this manual under the conditions for verbatim copying, provided also\n-that the sections entitled \"GNU General Public License,\" \"Funding for\n-Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n-included exactly as in the original, and provided that the entire\n-resulting derived work is distributed under the terms of a permission\n-notice identical to this one.\n-\n-   Permission is granted to copy and distribute translations of this\n-manual into another language, under the above conditions for modified\n-versions, except that the sections entitled \"GNU General Public\n-License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n-`Look And Feel'\", and this permission notice, may be included in\n-translations approved by the Free Software Foundation instead of in the\n-original English.\n-\n-   Contributed by James Craig Burley (<burley@gnu.ai.mit.edu>).\n-Inspired by a first pass at translating `g77-0.5.16/f/DOC' that was\n-contributed to Craig by David Ronis (<ronis@onsager.chem.mcgill.ca>).\n-\n-INFO-DIR-SECTION Fortran Programming\n-START-INFO-DIR-ENTRY\n-* g77: (g77).               The GNU Fortran compilation system.\n-END-INFO-DIR-ENTRY\n-\n-\u001f\n-File: g77.info,  Node: Ugly Assigned Labels,  Prev: Ugly Integer Conversions,  Up: Distensions\n-\n-Ugly Assigned Labels\n---------------------\n-\n-   The `-fugly-assign' option forces `g77' to use the same storage for\n-assigned labels as it would for a normal assignment to the same\n-variable.\n-\n-   For example, consider the following code fragment:\n-\n-     I = 3\n-     ASSIGN 10 TO I\n-\n-Normally, for portability and improved diagnostics, `g77' reserves\n-distinct storage for a \"sibling\" of `I', used only for `ASSIGN'\n-statements to that variable (along with the corresponding\n-assigned-`GOTO' and assigned-`FORMAT'-I/O statements that reference the\n-variable).\n-\n-   However, some code (that violates the ANSI FORTRAN 77 standard)\n-attempts to copy assigned labels among variables involved with `ASSIGN'\n-statements, as in:\n-\n-     ASSIGN 10 TO I\n-     ISTATE(5) = I\n-     ...\n-     J = ISTATE(ICUR)\n-     GOTO J\n-\n-Such code doesn't work under `g77' unless `-fugly-assign' is specified\n-on the command-line, ensuring that the value of `I' referenced in the\n-second line is whatever value `g77' uses to designate statement label\n-`10', so the value may be copied into the `ISTATE' array, later\n-retrieved into a variable of the appropriate type (`J'), and used as\n-the target of an assigned-`GOTO' statement.\n-\n-   *Note:* To avoid subtle program bugs, when `-fugly-assign' is\n-specified, `g77' requires the type of variables specified in\n-assigned-label contexts *must* be the same type returned by `%LOC()'.\n-On many systems, this type is effectively the same as\n-`INTEGER(KIND=1)', while, on others, it is effectively the same as\n-`INTEGER(KIND=2)'.\n-\n-   Do *not* depend on `g77' actually writing valid pointers to these\n-variables, however.  While `g77' currently chooses that implementation,\n-it might be changed in the future.\n-\n-   *Note Assigned Statement Labels (ASSIGN and GOTO): Assigned\n-Statement Labels, for implementation details on assigned-statement\n-labels.\n-\n-\u001f\n-File: g77.info,  Node: Compiler,  Next: Other Dialects,  Prev: Language,  Up: Top\n-\n-The GNU Fortran Compiler\n-************************\n-\n-   The GNU Fortran compiler, `g77', supports programs written in the\n-GNU Fortran language and in some other dialects of Fortran.\n-\n-   Some aspects of how `g77' works are universal regardless of dialect,\n-and yet are not properly part of the GNU Fortran language itself.\n-These are described below.\n-\n-   *Note: This portion of the documentation definitely needs a lot of\n-work!*\n-\n-* Menu:\n-\n-* Compiler Limits::\n-* Compiler Types::\n-* Compiler Constants::\n-* Compiler Intrinsics::\n-\n-\u001f\n-File: g77.info,  Node: Compiler Limits,  Next: Compiler Types,  Up: Compiler\n-\n-Compiler Limits\n-===============\n-\n-   `g77', as with GNU tools in general, imposes few arbitrary\n-restrictions on lengths of identifiers, number of continuation lines,\n-number of external symbols in a program, and so on.\n-\n-   For example, some other Fortran compiler have an option (such as\n-`-NlX') to increase the limit on the number of continuation lines.\n-Also, some Fortran compilation systems have an option (such as `-NxX')\n-to increase the limit on the number of external symbols.\n-\n-   `g77', `gcc', and GNU `ld' (the GNU linker) have no equivalent\n-options, since they do not impose arbitrary limits in these areas.\n-\n-   `g77' does currently limit the number of dimensions in an array to\n-the same degree as do the Fortran standards--seven (7).  This\n-restriction might well be lifted in a future version.\n-\n-\u001f\n-File: g77.info,  Node: Compiler Types,  Next: Compiler Constants,  Prev: Compiler Limits,  Up: Compiler\n-\n-Compiler Types\n-==============\n-\n-   Fortran implementations have a fair amount of freedom given them by\n-the standard as far as how much storage space is used and how much\n-precision and range is offered by the various types such as\n-`LOGICAL(KIND=1)', `INTEGER(KIND=1)', `REAL(KIND=1)', `REAL(KIND=2)',\n-`COMPLEX(KIND=1)', and `CHARACTER'.  Further, many compilers offer\n-so-called `*N' notation, but the interpretation of N varies across\n-compilers and target architectures.\n-\n-   The standard requires that `LOGICAL(KIND=1)', `INTEGER(KIND=1)', and\n-`REAL(KIND=1)' occupy the same amount of storage space, and that\n-`COMPLEX(KIND=1)' and `REAL(KIND=2)' take twice as much storage space\n-as `REAL(KIND=1)'.  Further, it requires that `COMPLEX(KIND=1)'\n-entities be ordered such that when a `COMPLEX(KIND=1)' variable is\n-storage-associated (such as via `EQUIVALENCE') with a two-element\n-`REAL(KIND=1)' array named `R', `R(1)' corresponds to the real element\n-and `R(2)' to the imaginary element of the `COMPLEX(KIND=1)' variable.\n-\n-   (Few requirements as to precision or ranges of any of these are\n-placed on the implementation, nor is the relationship of storage sizes\n-of these types to the `CHARACTER' type specified, by the standard.)\n-\n-   `g77' follows the above requirements, warning when compiling a\n-program requires placement of items in memory that contradict the\n-requirements of the target architecture.  (For example, a program can\n-require placement of a `REAL(KIND=2)' on a boundary that is not an even\n-multiple of its size, but still an even multiple of the size of a\n-`REAL(KIND=1)' variable.  On some target architectures, using the\n-canonical mapping of Fortran types to underlying architectural types,\n-such placement is prohibited by the machine definition or the\n-Application Binary Interface (ABI) in force for the configuration\n-defined for building `gcc' and `g77'.  `g77' warns about such\n-situations when it encounters them.)\n-\n-   `g77' follows consistent rules for configuring the mapping between\n-Fortran types, including the `*N' notation, and the underlying\n-architectural types as accessed by a similarly-configured applicable\n-version of the `gcc' compiler.  These rules offer a widely portable,\n-consistent Fortran/C environment, although they might well conflict\n-with the expectations of users of Fortran compilers designed and\n-written for particular architectures.\n-\n-   These rules are based on the configuration that is in force for the\n-version of `gcc' built in the same release as `g77' (and which was\n-therefore used to build both the `g77' compiler components and the\n-`libf2c' run-time library):\n-\n-`REAL(KIND=1)'\n-     Same as `float' type.\n-\n-`REAL(KIND=2)'\n-     Same as whatever floating-point type that is twice the size of a\n-     `float'--usually, this is a `double'.\n-\n-`INTEGER(KIND=1)'\n-     Same as an integral type that is occupies the same amount of\n-     memory storage as `float'--usually, this is either an `int' or a\n-     `long int'.\n-\n-`LOGICAL(KIND=1)'\n-     Same `gcc' type as `INTEGER(KIND=1)'.\n-\n-`INTEGER(KIND=2)'\n-     Twice the size, and usually nearly twice the range, as\n-     `INTEGER(KIND=1)'--usually, this is either a `long int' or a `long\n-     long int'.\n-\n-`LOGICAL(KIND=2)'\n-     Same `gcc' type as `INTEGER(KIND=2)'.\n-\n-`INTEGER(KIND=3)'\n-     Same `gcc' type as signed `char'.\n-\n-`LOGICAL(KIND=3)'\n-     Same `gcc' type as `INTEGER(KIND=3)'.\n-\n-`INTEGER(KIND=6)'\n-     Twice the size, and usually nearly twice the range, as\n-     `INTEGER(KIND=3)'--usually, this is a `short'.\n-\n-`LOGICAL(KIND=6)'\n-     Same `gcc' type as `INTEGER(KIND=6)'.\n-\n-`COMPLEX(KIND=1)'\n-     Two `REAL(KIND=1)' scalars (one for the real part followed by one\n-     for the imaginary part).\n-\n-`COMPLEX(KIND=2)'\n-     Two `REAL(KIND=2)' scalars.\n-\n-`NUMERIC-TYPE*N'\n-     (Where NUMERIC-TYPE is any type other than `CHARACTER'.)  Same as\n-     whatever `gcc' type occupies N times the storage space of a `gcc'\n-     `char' item.\n-\n-`DOUBLE PRECISION'\n-     Same as `REAL(KIND=2)'.\n-\n-`DOUBLE COMPLEX'\n-     Same as `COMPLEX(KIND=2)'.\n-\n-   Note that the above are proposed correspondences and might change in\n-future versions of `g77'--avoid writing code depending on them.\n-\n-   Other types supported by `g77' are derived from gcc types such as\n-`char', `short', `int', `long int', `long long int', `long double', and\n-so on.  That is, whatever types `gcc' already supports, `g77' supports\n-now or probably will support in a future version.  The rules for the\n-`NUMERIC-TYPE*N' notation apply to these types, and new values for\n-`NUMERIC-TYPE(KIND=N)' will be assigned in a way that encourages\n-clarity, consistency, and portability.\n-\n-\u001f\n-File: g77.info,  Node: Compiler Constants,  Next: Compiler Intrinsics,  Prev: Compiler Types,  Up: Compiler\n-\n-Compiler Constants\n-==================\n-\n-   `g77' strictly assigns types to *all* constants not documented as\n-\"typeless\" (typeless constants including `'1'Z', for example).  Many\n-other Fortran compilers attempt to assign types to typed constants\n-based on their context.  This results in hard-to-find bugs, nonportable\n-code, and is not in the spirit (though it strictly follows the letter)\n-of the 77 and 90 standards.\n-\n-   `g77' might offer, in a future release, explicit constructs by which\n-a wider variety of typeless constants may be specified, and/or\n-user-requested warnings indicating places where `g77' might differ from\n-how other compilers assign types to constants.\n-\n-   *Note Context-Sensitive Constants::, for more information on this\n-issue.\n-\n-\u001f\n-File: g77.info,  Node: Compiler Intrinsics,  Prev: Compiler Constants,  Up: Compiler\n-\n-Compiler Intrinsics\n-===================\n-\n-   `g77' offers an ever-widening set of intrinsics.  Currently these\n-all are procedures (functions and subroutines).\n-\n-   Some of these intrinsics are unimplemented, but their names reserved\n-to reduce future problems with existing code as they are implemented.\n-Others are implemented as part of the GNU Fortran language, while yet\n-others are provided for compatibility with other dialects of Fortran\n-but are not part of the GNU Fortran language.\n-\n-   To manage these distinctions, `g77' provides intrinsic *groups*, a\n-facility that is simply an extension of the intrinsic groups provided\n-by the GNU Fortran language.\n-\n-* Menu:\n-\n-* Intrinsic Groups::  How intrinsics are grouped for easy management.\n-* Other Intrinsics::  Intrinsics other than those in the GNU\n-                       Fortran language.\n-\n-\u001f\n-File: g77.info,  Node: Intrinsic Groups,  Next: Other Intrinsics,  Up: Compiler Intrinsics\n-\n-Intrinsic Groups\n-----------------\n-\n-   A given specific intrinsic belongs in one or more groups.  Each\n-group is deleted, disabled, hidden, or enabled by default or a\n-command-line option.  The meaning of each term follows.\n-\n-Deleted\n-     No intrinsics are recognized as belonging to that group.\n-\n-Disabled\n-     Intrinsics are recognized as belonging to the group, but\n-     references to them (other than via the `INTRINSIC' statement) are\n-     disallowed through that group.\n-\n-Hidden\n-     Intrinsics in that group are recognized and enabled (if\n-     implemented) *only* if the first mention of the actual name of an\n-     intrinsic in a program unit is in an `INTRINSIC' statement.\n-\n-Enabled\n-     Intrinsics in that group are recognized and enabled (if\n-     implemented).\n-\n-   The distinction between deleting and disabling a group is illustrated\n-by the following example.  Assume intrinsic `FOO' belongs only to group\n-`FGR'.  If group `FGR' is deleted, the following program unit will\n-successfully compile, because `FOO()' will be seen as a reference to an\n-external function named `FOO':\n-\n-     PRINT *, FOO()\n-     END\n-\n-If group `FGR' is disabled, compiling the above program will produce\n-diagnostics, either because the `FOO' intrinsic is improperly invoked\n-or, if properly invoked, it is not enabled.  To change the above\n-program so it references an external function `FOO' instead of the\n-disabled `FOO' intrinsic, add the following line to the top:\n-\n-     EXTERNAL FOO\n-\n-So, deleting a group tells `g77' to pretend as though the intrinsics in\n-that group do not exist at all, whereas disabling it tells `g77' to\n-recognize them as (disabled) intrinsics in intrinsic-like contexts.\n-\n-   Hiding a group is like enabling it, but the intrinsic must be first\n-named in an `INTRINSIC' statement to be considered a reference to the\n-intrinsic rather than to an external procedure.  This might be the\n-\"safest\" way to treat a new group of intrinsics when compiling old\n-code, because it allows the old code to be generally written as if\n-those new intrinsics never existed, but to be changed to use them by\n-inserting `INTRINSIC' statements in the appropriate places.  However,\n-it should be the goal of development to use `EXTERNAL' for all names of\n-external procedures that might be intrinsic names.\n-\n-   If an intrinsic is in more than one group, it is enabled if any of\n-its containing groups are enabled; if not so enabled, it is hidden if\n-any of its containing groups are hidden; if not so hidden, it is\n-disabled if any of its containing groups are disabled; if not so\n-disabled, it is deleted.  This extra complication is necessary because\n-some intrinsics, such as `IBITS', belong to more than one group, and\n-hence should be enabled if any of the groups to which they belong are\n-enabled, and so on.\n-\n-   The groups are:\n-\n-`badu77'\n-     UNIX intrinsics having inappropriate forms (usually functions that\n-     have intended side effects).\n-\n-`gnu'\n-     Intrinsics the GNU Fortran language supports that are extensions to\n-     the Fortran standards (77 and 90).\n-\n-`f2c'\n-     Intrinsics supported by AT&T's `f2c' converter and/or `libf2c'.\n-\n-`f90'\n-     Fortran 90 intrinsics.\n-\n-`mil'\n-     MIL-STD 1753 intrinsics (`MVBITS', `IAND', `BTEST', and so on).\n-\n-`unix'\n-     UNIX intrinsics (`IARGC', `EXIT', `ERF', and so on).\n-\n-`vxt'\n-     VAX/VMS FORTRAN (current as of v4) intrinsics.\n-\n-\u001f\n-File: g77.info,  Node: Other Intrinsics,  Prev: Intrinsic Groups,  Up: Compiler Intrinsics\n-\n-Other Intrinsics\n-----------------\n-\n-   `g77' supports intrinsics other than those in the GNU Fortran\n-language proper.  This set of intrinsics is described below.\n-\n-   (Note that the empty lines appearing in the menu below are not\n-intentional--they result from a bug in the `makeinfo' program.)\n-\n-* Menu:\n-\n-\n-* ACosD Intrinsic::     (Reserved for future use.)\n-\n-* AIMax0 Intrinsic::    (Reserved for future use.)\n-* AIMin0 Intrinsic::    (Reserved for future use.)\n-\n-* AJMax0 Intrinsic::    (Reserved for future use.)\n-* AJMin0 Intrinsic::    (Reserved for future use.)\n-\n-* ASinD Intrinsic::     (Reserved for future use.)\n-\n-* ATan2D Intrinsic::    (Reserved for future use.)\n-* ATanD Intrinsic::     (Reserved for future use.)\n-\n-* BITest Intrinsic::    (Reserved for future use.)\n-\n-* BJTest Intrinsic::    (Reserved for future use.)\n-\n-* CDAbs Intrinsic::     Absolute value (archaic).\n-* CDCos Intrinsic::     Cosine (archaic).\n-* CDExp Intrinsic::     Exponential (archaic).\n-* CDLog Intrinsic::     Natural logarithm (archaic).\n-* CDSin Intrinsic::     Sine (archaic).\n-* CDSqRt Intrinsic::    Square root (archaic).\n-\n-* ChDir Intrinsic (function):: Change directory.\n-\n-* ChMod Intrinsic (function):: Change file modes.\n-\n-* CosD Intrinsic::      (Reserved for future use.)\n-\n-* DACosD Intrinsic::    (Reserved for future use.)\n-\n-* DASinD Intrinsic::    (Reserved for future use.)\n-\n-* DATan2D Intrinsic::   (Reserved for future use.)\n-* DATanD Intrinsic::    (Reserved for future use.)\n-* Date Intrinsic::      Get current date as dd-Mon-yy.\n-\n-* DbleQ Intrinsic::     (Reserved for future use.)\n-\n-* DCmplx Intrinsic::    Construct `COMPLEX(KIND=2)' value.\n-* DConjg Intrinsic::    Complex conjugate (archaic).\n-\n-* DCosD Intrinsic::     (Reserved for future use.)\n-\n-* DFloat Intrinsic::    Conversion (archaic).\n-\n-* DFlotI Intrinsic::    (Reserved for future use.)\n-* DFlotJ Intrinsic::    (Reserved for future use.)\n-\n-* DImag Intrinsic::     Convert/extract imaginary part of complex (archaic).\n-\n-* DReal Intrinsic::     Convert value to type `REAL(KIND=2)'.\n-\n-* DSinD Intrinsic::     (Reserved for future use.)\n-\n-* DTanD Intrinsic::     (Reserved for future use.)\n-\n-* Dtime Intrinsic (function):: Get elapsed time since last time.\n-\n-* FGet Intrinsic (function):: Read a character from unit 5 stream-wise.\n-\n-* FGetC Intrinsic (function):: Read a character stream-wise.\n-\n-* FloatI Intrinsic::    (Reserved for future use.)\n-* FloatJ Intrinsic::    (Reserved for future use.)\n-\n-* FPut Intrinsic (function):: Write a character to unit 6 stream-wise.\n-\n-* FPutC Intrinsic (function):: Write a character stream-wise.\n-\n-* IDate Intrinsic (VXT):: Get local time info (VAX/VMS).\n-\n-* IIAbs Intrinsic::     (Reserved for future use.)\n-* IIAnd Intrinsic::     (Reserved for future use.)\n-* IIBClr Intrinsic::    (Reserved for future use.)\n-* IIBits Intrinsic::    (Reserved for future use.)\n-* IIBSet Intrinsic::    (Reserved for future use.)\n-* IIDiM Intrinsic::     (Reserved for future use.)\n-* IIDInt Intrinsic::    (Reserved for future use.)\n-* IIDNnt Intrinsic::    (Reserved for future use.)\n-* IIEOr Intrinsic::     (Reserved for future use.)\n-* IIFix Intrinsic::     (Reserved for future use.)\n-* IInt Intrinsic::      (Reserved for future use.)\n-* IIOr Intrinsic::      (Reserved for future use.)\n-* IIQint Intrinsic::    (Reserved for future use.)\n-* IIQNnt Intrinsic::    (Reserved for future use.)\n-* IIShftC Intrinsic::   (Reserved for future use.)\n-* IISign Intrinsic::    (Reserved for future use.)\n-\n-* IMax0 Intrinsic::     (Reserved for future use.)\n-* IMax1 Intrinsic::     (Reserved for future use.)\n-* IMin0 Intrinsic::     (Reserved for future use.)\n-* IMin1 Intrinsic::     (Reserved for future use.)\n-* IMod Intrinsic::      (Reserved for future use.)\n-\n-* INInt Intrinsic::     (Reserved for future use.)\n-* INot Intrinsic::      (Reserved for future use.)\n-\n-* IZExt Intrinsic::     (Reserved for future use.)\n-* JIAbs Intrinsic::     (Reserved for future use.)\n-* JIAnd Intrinsic::     (Reserved for future use.)\n-* JIBClr Intrinsic::    (Reserved for future use.)\n-* JIBits Intrinsic::    (Reserved for future use.)\n-* JIBSet Intrinsic::    (Reserved for future use.)\n-* JIDiM Intrinsic::     (Reserved for future use.)\n-* JIDInt Intrinsic::    (Reserved for future use.)\n-* JIDNnt Intrinsic::    (Reserved for future use.)\n-* JIEOr Intrinsic::     (Reserved for future use.)\n-* JIFix Intrinsic::     (Reserved for future use.)\n-* JInt Intrinsic::      (Reserved for future use.)\n-* JIOr Intrinsic::      (Reserved for future use.)\n-* JIQint Intrinsic::    (Reserved for future use.)\n-* JIQNnt Intrinsic::    (Reserved for future use.)\n-* JIShft Intrinsic::    (Reserved for future use.)\n-* JIShftC Intrinsic::   (Reserved for future use.)\n-* JISign Intrinsic::    (Reserved for future use.)\n-* JMax0 Intrinsic::     (Reserved for future use.)\n-* JMax1 Intrinsic::     (Reserved for future use.)\n-* JMin0 Intrinsic::     (Reserved for future use.)\n-* JMin1 Intrinsic::     (Reserved for future use.)\n-* JMod Intrinsic::      (Reserved for future use.)\n-* JNInt Intrinsic::     (Reserved for future use.)\n-* JNot Intrinsic::      (Reserved for future use.)\n-* JZExt Intrinsic::     (Reserved for future use.)\n-\n-* Kill Intrinsic (function):: Signal a process.\n-\n-* Link Intrinsic (function):: Make hard link in file system.\n-\n-* QAbs Intrinsic::      (Reserved for future use.)\n-* QACos Intrinsic::     (Reserved for future use.)\n-* QACosD Intrinsic::    (Reserved for future use.)\n-* QASin Intrinsic::     (Reserved for future use.)\n-* QASinD Intrinsic::    (Reserved for future use.)\n-* QATan Intrinsic::     (Reserved for future use.)\n-* QATan2 Intrinsic::    (Reserved for future use.)\n-* QATan2D Intrinsic::   (Reserved for future use.)\n-* QATanD Intrinsic::    (Reserved for future use.)\n-* QCos Intrinsic::      (Reserved for future use.)\n-* QCosD Intrinsic::     (Reserved for future use.)\n-* QCosH Intrinsic::     (Reserved for future use.)\n-* QDiM Intrinsic::      (Reserved for future use.)\n-* QExp Intrinsic::      (Reserved for future use.)\n-* QExt Intrinsic::      (Reserved for future use.)\n-* QExtD Intrinsic::     (Reserved for future use.)\n-* QFloat Intrinsic::    (Reserved for future use.)\n-* QInt Intrinsic::      (Reserved for future use.)\n-* QLog Intrinsic::      (Reserved for future use.)\n-* QLog10 Intrinsic::    (Reserved for future use.)\n-* QMax1 Intrinsic::     (Reserved for future use.)\n-* QMin1 Intrinsic::     (Reserved for future use.)\n-* QMod Intrinsic::      (Reserved for future use.)\n-* QNInt Intrinsic::     (Reserved for future use.)\n-* QSin Intrinsic::      (Reserved for future use.)\n-* QSinD Intrinsic::     (Reserved for future use.)\n-* QSinH Intrinsic::     (Reserved for future use.)\n-* QSqRt Intrinsic::     (Reserved for future use.)\n-* QTan Intrinsic::      (Reserved for future use.)\n-* QTanD Intrinsic::     (Reserved for future use.)\n-* QTanH Intrinsic::     (Reserved for future use.)\n-\n-* Rename Intrinsic (function):: Rename file.\n-\n-* Secnds Intrinsic::    Get local time offset since midnight.\n-\n-* Signal Intrinsic (function):: Muck with signal handling.\n-\n-* SinD Intrinsic::      (Reserved for future use.)\n-\n-* SnglQ Intrinsic::     (Reserved for future use.)\n-\n-* SymLnk Intrinsic (function):: Make symbolic link in file system.\n-\n-* System Intrinsic (function):: Invoke shell (system) command.\n-\n-* TanD Intrinsic::      (Reserved for future use.)\n-\n-* Time Intrinsic (VXT):: Get the time as a character value.\n-\n-* UMask Intrinsic (function):: Set file creation permissions mask.\n-\n-* Unlink Intrinsic (function):: Unlink file.\n-\n-* ZExt Intrinsic::      (Reserved for future use.)\n-\n-\u001f\n-File: g77.info,  Node: ACosD Intrinsic,  Next: AIMax0 Intrinsic,  Up: Other Intrinsics\n-\n-ACosD Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL ACosD' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: AIMax0 Intrinsic,  Next: AIMin0 Intrinsic,  Prev: ACosD Intrinsic,  Up: Other Intrinsics\n-\n-AIMax0 Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL AIMax0' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: AIMin0 Intrinsic,  Next: AJMax0 Intrinsic,  Prev: AIMax0 Intrinsic,  Up: Other Intrinsics\n-\n-AIMin0 Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL AIMin0' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: AJMax0 Intrinsic,  Next: AJMin0 Intrinsic,  Prev: AIMin0 Intrinsic,  Up: Other Intrinsics\n-\n-AJMax0 Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL AJMax0' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: AJMin0 Intrinsic,  Next: ASinD Intrinsic,  Prev: AJMax0 Intrinsic,  Up: Other Intrinsics\n-\n-AJMin0 Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL AJMin0' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: ASinD Intrinsic,  Next: ATan2D Intrinsic,  Prev: AJMin0 Intrinsic,  Up: Other Intrinsics\n-\n-ASinD Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL ASinD' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: ATan2D Intrinsic,  Next: ATanD Intrinsic,  Prev: ASinD Intrinsic,  Up: Other Intrinsics\n-\n-ATan2D Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL ATan2D' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: ATanD Intrinsic,  Next: BITest Intrinsic,  Prev: ATan2D Intrinsic,  Up: Other Intrinsics\n-\n-ATanD Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL ATanD' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: BITest Intrinsic,  Next: BJTest Intrinsic,  Prev: ATanD Intrinsic,  Up: Other Intrinsics\n-\n-BITest Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL BITest' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: BJTest Intrinsic,  Next: CDAbs Intrinsic,  Prev: BITest Intrinsic,  Up: Other Intrinsics\n-\n-BJTest Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL BJTest' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: CDAbs Intrinsic,  Next: CDCos Intrinsic,  Prev: BJTest Intrinsic,  Up: Other Intrinsics\n-\n-CDAbs Intrinsic\n-...............\n-\n-     CDAbs(A)\n-\n-CDAbs: `REAL(KIND=2)' function.\n-\n-A: `COMPLEX(KIND=2)'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `f2c', `vxt'.\n-\n-Description:\n-\n-   Archaic form of `ABS()' that is specific to one type for A.  *Note\n-Abs Intrinsic::.\n-\n-\u001f\n-File: g77.info,  Node: CDCos Intrinsic,  Next: CDExp Intrinsic,  Prev: CDAbs Intrinsic,  Up: Other Intrinsics\n-\n-CDCos Intrinsic\n-...............\n-\n-     CDCos(X)\n-\n-CDCos: `COMPLEX(KIND=2)' function.\n-\n-X: `COMPLEX(KIND=2)'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `f2c', `vxt'.\n-\n-Description:\n-\n-   Archaic form of `COS()' that is specific to one type for X.  *Note\n-Cos Intrinsic::.\n-\n-\u001f\n-File: g77.info,  Node: CDExp Intrinsic,  Next: CDLog Intrinsic,  Prev: CDCos Intrinsic,  Up: Other Intrinsics\n-\n-CDExp Intrinsic\n-...............\n-\n-     CDExp(X)\n-\n-CDExp: `COMPLEX(KIND=2)' function.\n-\n-X: `COMPLEX(KIND=2)'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `f2c', `vxt'.\n-\n-Description:\n-\n-   Archaic form of `EXP()' that is specific to one type for X.  *Note\n-Exp Intrinsic::.\n-\n-\u001f\n-File: g77.info,  Node: CDLog Intrinsic,  Next: CDSin Intrinsic,  Prev: CDExp Intrinsic,  Up: Other Intrinsics\n-\n-CDLog Intrinsic\n-...............\n-\n-     CDLog(X)\n-\n-CDLog: `COMPLEX(KIND=2)' function.\n-\n-X: `COMPLEX(KIND=2)'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `f2c', `vxt'.\n-\n-Description:\n-\n-   Archaic form of `LOG()' that is specific to one type for X.  *Note\n-Log Intrinsic::.\n-\n-\u001f\n-File: g77.info,  Node: CDSin Intrinsic,  Next: CDSqRt Intrinsic,  Prev: CDLog Intrinsic,  Up: Other Intrinsics\n-\n-CDSin Intrinsic\n-...............\n-\n-     CDSin(X)\n-\n-CDSin: `COMPLEX(KIND=2)' function.\n-\n-X: `COMPLEX(KIND=2)'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `f2c', `vxt'.\n-\n-Description:\n-\n-   Archaic form of `SIN()' that is specific to one type for X.  *Note\n-Sin Intrinsic::.\n-\n-\u001f\n-File: g77.info,  Node: CDSqRt Intrinsic,  Next: ChDir Intrinsic (function),  Prev: CDSin Intrinsic,  Up: Other Intrinsics\n-\n-CDSqRt Intrinsic\n-................\n-\n-     CDSqRt(X)\n-\n-CDSqRt: `COMPLEX(KIND=2)' function.\n-\n-X: `COMPLEX(KIND=2)'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `f2c', `vxt'.\n-\n-Description:\n-\n-   Archaic form of `SQRT()' that is specific to one type for X.  *Note\n-SqRt Intrinsic::.\n-\n-\u001f\n-File: g77.info,  Node: ChDir Intrinsic (function),  Next: ChMod Intrinsic (function),  Prev: CDSqRt Intrinsic,  Up: Other Intrinsics\n-\n-ChDir Intrinsic (function)\n-..........................\n-\n-     ChDir(DIR)\n-\n-ChDir: `INTEGER(KIND=1)' function.\n-\n-DIR: `CHARACTER'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `badu77'.\n-\n-Description:\n-\n-   Sets the current working directory to be DIR.  Returns 0 on success\n-or a non-zero error code.  See `chdir(3)'.\n-\n-   Due to the side effects performed by this intrinsic, the function\n-form is not recommended.\n-\n-   For information on other intrinsics with the same name: *Note ChDir\n-Intrinsic (subroutine)::.\n-\n-\u001f\n-File: g77.info,  Node: ChMod Intrinsic (function),  Next: CosD Intrinsic,  Prev: ChDir Intrinsic (function),  Up: Other Intrinsics\n-\n-ChMod Intrinsic (function)\n-..........................\n-\n-     ChMod(NAME, MODE)\n-\n-ChMod: `INTEGER(KIND=1)' function.\n-\n-NAME: `CHARACTER'; scalar; INTENT(IN).\n-\n-MODE: `CHARACTER'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `badu77'.\n-\n-Description:\n-\n-   Changes the access mode of file NAME according to the specification\n-MODE, which is given in the format of `chmod(1)'.  A null character\n-(`CHAR(0)') marks the end of the name in NAME--otherwise, trailing\n-blanks in NAME are ignored.  Currently, NAME must not contain the\n-single quote character.\n-\n-   Returns 0 on success or a non-zero error code otherwise.\n-\n-   Note that this currently works by actually invoking `/bin/chmod' (or\n-the `chmod' found when the library was configured) and so may fail in\n-some circumstances and will, anyway, be slow.\n-\n-   Due to the side effects performed by this intrinsic, the function\n-form is not recommended.\n-\n-   For information on other intrinsics with the same name: *Note ChMod\n-Intrinsic (subroutine)::.\n-\n-\u001f\n-File: g77.info,  Node: CosD Intrinsic,  Next: DACosD Intrinsic,  Prev: ChMod Intrinsic (function),  Up: Other Intrinsics\n-\n-CosD Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL CosD' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: DACosD Intrinsic,  Next: DASinD Intrinsic,  Prev: CosD Intrinsic,  Up: Other Intrinsics\n-\n-DACosD Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL DACosD' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: DASinD Intrinsic,  Next: DATan2D Intrinsic,  Prev: DACosD Intrinsic,  Up: Other Intrinsics\n-\n-DASinD Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL DASinD' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: DATan2D Intrinsic,  Next: DATanD Intrinsic,  Prev: DASinD Intrinsic,  Up: Other Intrinsics\n-\n-DATan2D Intrinsic\n-.................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL DATan2D' to use this name for\n-an external procedure.\n-\n-\u001f\n-File: g77.info,  Node: DATanD Intrinsic,  Next: Date Intrinsic,  Prev: DATan2D Intrinsic,  Up: Other Intrinsics\n-\n-DATanD Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL DATanD' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: Date Intrinsic,  Next: DbleQ Intrinsic,  Prev: DATanD Intrinsic,  Up: Other Intrinsics\n-\n-Date Intrinsic\n-..............\n-\n-     CALL Date(DATE)\n-\n-DATE: `CHARACTER'; scalar; INTENT(OUT).\n-\n-Intrinsic groups: `vxt'.\n-\n-Description:\n-\n-   Returns DATE in the form `DD-MMM-YY', representing the numeric day\n-of the month DD, a three-character abbreviation of the month name MMM\n-and the last two digits of the year YY, e.g. `25-Nov-96'.\n-\n-   This intrinsic is not recommended, due to the year 2000 approaching.\n-*Note CTime Intrinsic (subroutine)::, for information on obtaining more\n-digits for the current (or any) date.\n-\n-\u001f\n-File: g77.info,  Node: DbleQ Intrinsic,  Next: DCmplx Intrinsic,  Prev: Date Intrinsic,  Up: Other Intrinsics\n-\n-DbleQ Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL DbleQ' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: DCmplx Intrinsic,  Next: DConjg Intrinsic,  Prev: DbleQ Intrinsic,  Up: Other Intrinsics\n-\n-DCmplx Intrinsic\n-................\n-\n-     DCmplx(X, Y)\n-\n-DCmplx: `COMPLEX(KIND=2)' function.\n-\n-X: `INTEGER', `REAL', or `COMPLEX'; scalar; INTENT(IN).\n-\n-Y: `INTEGER' or `REAL'; OPTIONAL (must be omitted if X is `COMPLEX');\n-scalar; INTENT(IN).\n-\n-Intrinsic groups: `f2c', `vxt'.\n-\n-Description:\n-\n-   If X is not type `COMPLEX', constructs a value of type\n-`COMPLEX(KIND=2)' from the real and imaginary values specified by X and\n-Y, respectively.  If Y is omitted, `0D0' is assumed.\n-\n-   If X is type `COMPLEX', converts it to type `COMPLEX(KIND=2)'.\n-\n-   Although this intrinsic is not standard Fortran, it is a popular\n-extension offered by many compilers that support `DOUBLE COMPLEX',\n-since it offers the easiest way to convert to `DOUBLE COMPLEX' without\n-using Fortran 90 features (such as the `KIND=' argument to the\n-`CMPLX()' intrinsic).\n-\n-   (`CMPLX(0D0, 0D0)' returns a single-precision `COMPLEX' result, as\n-required by standard FORTRAN 77.  That's why so many compilers provide\n-`DCMPLX()', since `DCMPLX(0D0, 0D0)' returns a `DOUBLE COMPLEX' result.\n-Still, `DCMPLX()' converts even `REAL*16' arguments to their `REAL*8'\n-equivalents in most dialects of Fortran, so neither it nor `CMPLX()'\n-allow easy construction of arbitrary-precision values without\n-potentially forcing a conversion involving extending or reducing\n-precision.  GNU Fortran provides such an intrinsic, called `COMPLEX()'.)\n-\n-   *Note Complex Intrinsic::, for information on easily constructing a\n-`COMPLEX' value of arbitrary precision from `REAL' arguments.\n-\n-\u001f\n-File: g77.info,  Node: DConjg Intrinsic,  Next: DCosD Intrinsic,  Prev: DCmplx Intrinsic,  Up: Other Intrinsics\n-\n-DConjg Intrinsic\n-................\n-\n-     DConjg(Z)\n-\n-DConjg: `COMPLEX(KIND=2)' function.\n-\n-Z: `COMPLEX(KIND=2)'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `f2c', `vxt'.\n-\n-Description:\n-\n-   Archaic form of `CONJG()' that is specific to one type for Z.  *Note\n-Conjg Intrinsic::.\n-\n-\u001f\n-File: g77.info,  Node: DCosD Intrinsic,  Next: DFloat Intrinsic,  Prev: DConjg Intrinsic,  Up: Other Intrinsics\n-\n-DCosD Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL DCosD' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: DFloat Intrinsic,  Next: DFlotI Intrinsic,  Prev: DCosD Intrinsic,  Up: Other Intrinsics\n-\n-DFloat Intrinsic\n-................\n-\n-     DFloat(A)\n-\n-DFloat: `REAL(KIND=2)' function.\n-\n-A: `INTEGER'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `f2c', `vxt'.\n-\n-Description:\n-\n-   Archaic form of `REAL()' that is specific to one type for A.  *Note\n-Real Intrinsic::.\n-\n-\u001f\n-File: g77.info,  Node: DFlotI Intrinsic,  Next: DFlotJ Intrinsic,  Prev: DFloat Intrinsic,  Up: Other Intrinsics\n-\n-DFlotI Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL DFlotI' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: DFlotJ Intrinsic,  Next: DImag Intrinsic,  Prev: DFlotI Intrinsic,  Up: Other Intrinsics\n-\n-DFlotJ Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL DFlotJ' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: DImag Intrinsic,  Next: DReal Intrinsic,  Prev: DFlotJ Intrinsic,  Up: Other Intrinsics\n-\n-DImag Intrinsic\n-...............\n-\n-     DImag(Z)\n-\n-DImag: `REAL(KIND=2)' function.\n-\n-Z: `COMPLEX(KIND=2)'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `f2c', `vxt'.\n-\n-Description:\n-\n-   Archaic form of `AIMAG()' that is specific to one type for Z.  *Note\n-AImag Intrinsic::.\n-\n-\u001f\n-File: g77.info,  Node: DReal Intrinsic,  Next: DSinD Intrinsic,  Prev: DImag Intrinsic,  Up: Other Intrinsics\n-\n-DReal Intrinsic\n-...............\n-\n-     DReal(A)\n-\n-DReal: `REAL(KIND=2)' function.\n-\n-A: `INTEGER', `REAL', or `COMPLEX'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `vxt'.\n-\n-Description:\n-\n-   Converts A to `REAL(KIND=2)'.\n-\n-   If A is type `COMPLEX', its real part is converted (if necessary) to\n-`REAL(KIND=2)', and its imaginary part is disregarded.\n-\n-   Although this intrinsic is not standard Fortran, it is a popular\n-extension offered by many compilers that support `DOUBLE COMPLEX',\n-since it offers the easiest way to extract the real part of a `DOUBLE\n-COMPLEX' value without using the Fortran 90 `REAL()' intrinsic in a way\n-that produces a return value inconsistent with the way many FORTRAN 77\n-compilers handle `REAL()' of a `DOUBLE COMPLEX' value.\n-\n-   *Note RealPart Intrinsic::, for information on a GNU Fortran\n-intrinsic that avoids these areas of confusion.\n-\n-   *Note Dble Intrinsic::, for information on the standard FORTRAN 77\n-replacement for `DREAL()'.\n-\n-   *Note REAL() and AIMAG() of Complex::, for more information on this\n-issue.\n-\n-\u001f\n-File: g77.info,  Node: DSinD Intrinsic,  Next: DTanD Intrinsic,  Prev: DReal Intrinsic,  Up: Other Intrinsics\n-\n-DSinD Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL DSinD' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: DTanD Intrinsic,  Next: Dtime Intrinsic (function),  Prev: DSinD Intrinsic,  Up: Other Intrinsics\n-\n-DTanD Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL DTanD' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: Dtime Intrinsic (function),  Next: FGet Intrinsic (function),  Prev: DTanD Intrinsic,  Up: Other Intrinsics\n-\n-Dtime Intrinsic (function)\n-..........................\n-\n-     Dtime(TARRAY)\n-\n-Dtime: `REAL(KIND=1)' function.\n-\n-TARRAY: `REAL(KIND=1)'; DIMENSION(2); INTENT(OUT).\n-\n-Intrinsic groups: `badu77'.\n-\n-Description:\n-\n-   Initially, return the number of seconds of runtime since the start\n-of the process's execution as the function value, and the user and\n-system components of this in `TARRAY(1)' and `TARRAY(2)' respectively.\n-The functions' value is equal to `TARRAY(1) + TARRAY(2)'.\n-\n-   Subsequent invocations of `DTIME()' return values accumulated since\n-the previous invocation.\n-\n-   Due to the side effects performed by this intrinsic, the function\n-form is not recommended.\n-\n-   For information on other intrinsics with the same name: *Note Dtime\n-Intrinsic (subroutine)::.\n-\n-\u001f\n-File: g77.info,  Node: FGet Intrinsic (function),  Next: FGetC Intrinsic (function),  Prev: Dtime Intrinsic (function),  Up: Other Intrinsics\n-\n-FGet Intrinsic (function)\n-.........................\n-\n-     FGet(C)\n-\n-FGet: `INTEGER(KIND=1)' function.\n-\n-C: `CHARACTER'; scalar; INTENT(OUT).\n-\n-Intrinsic groups: `badu77'.\n-\n-Description:\n-\n-   Reads a single character into C in stream mode from unit 5\n-(by-passing normal formatted input) using `getc(3)'.  Returns 0 on\n-success, -1 on end-of-file, and the error code from `ferror(3)'\n-otherwise.\n-\n-   Stream I/O should not be mixed with normal record-oriented\n-(formatted or unformatted) I/O on the same unit; the results are\n-unpredictable.\n-\n-   For information on other intrinsics with the same name: *Note FGet\n-Intrinsic (subroutine)::.\n-\n-\u001f\n-File: g77.info,  Node: FGetC Intrinsic (function),  Next: FloatI Intrinsic,  Prev: FGet Intrinsic (function),  Up: Other Intrinsics\n-\n-FGetC Intrinsic (function)\n-..........................\n-\n-     FGetC(UNIT, C)\n-\n-FGetC: `INTEGER(KIND=1)' function.\n-\n-UNIT: `INTEGER'; scalar; INTENT(IN).\n-\n-C: `CHARACTER'; scalar; INTENT(OUT).\n-\n-Intrinsic groups: `badu77'.\n-\n-Description:\n-\n-   Reads a single character into C in stream mode from unit UNIT\n-(by-passing normal formatted output) using `getc(3)'.  Returns 0 on\n-success, -1 on end-of-file, and the error code from `ferror(3)'\n-otherwise.\n-\n-   Stream I/O should not be mixed with normal record-oriented\n-(formatted or unformatted) I/O on the same unit; the results are\n-unpredictable.\n-\n-   For information on other intrinsics with the same name: *Note FGetC\n-Intrinsic (subroutine)::.\n-\n-\u001f\n-File: g77.info,  Node: FloatI Intrinsic,  Next: FloatJ Intrinsic,  Prev: FGetC Intrinsic (function),  Up: Other Intrinsics\n-\n-FloatI Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL FloatI' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: FloatJ Intrinsic,  Next: FPut Intrinsic (function),  Prev: FloatI Intrinsic,  Up: Other Intrinsics\n-\n-FloatJ Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL FloatJ' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: FPut Intrinsic (function),  Next: FPutC Intrinsic (function),  Prev: FloatJ Intrinsic,  Up: Other Intrinsics\n-\n-FPut Intrinsic (function)\n-.........................\n-\n-     FPut(C)\n-\n-FPut: `INTEGER(KIND=1)' function.\n-\n-C: `CHARACTER'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `badu77'.\n-\n-Description:\n-\n-   Writes the single character C in stream mode to unit 6 (by-passing\n-normal formatted output) using `getc(3)'.  Returns 0 on success, the\n-error code from `ferror(3)' otherwise.\n-\n-   Stream I/O should not be mixed with normal record-oriented\n-(formatted or unformatted) I/O on the same unit; the results are\n-unpredictable.\n-\n-   For information on other intrinsics with the same name: *Note FPut\n-Intrinsic (subroutine)::.\n-\n-\u001f\n-File: g77.info,  Node: FPutC Intrinsic (function),  Next: IDate Intrinsic (VXT),  Prev: FPut Intrinsic (function),  Up: Other Intrinsics\n-\n-FPutC Intrinsic (function)\n-..........................\n-\n-     FPutC(UNIT, C)\n-\n-FPutC: `INTEGER(KIND=1)' function.\n-\n-UNIT: `INTEGER'; scalar; INTENT(IN).\n-\n-C: `CHARACTER'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `badu77'.\n-\n-Description:\n-\n-   Writes the single character C in stream mode to unit UNIT\n-(by-passing normal formatted output) using `putc(3)'.  Returns 0 on\n-success, the error code from `ferror(3)' otherwise.\n-\n-   Stream I/O should not be mixed with normal record-oriented\n-(formatted or unformatted) I/O on the same unit; the results are\n-unpredictable.\n-\n-   For information on other intrinsics with the same name: *Note FPutC\n-Intrinsic (subroutine)::.\n-\n-\u001f\n-File: g77.info,  Node: IDate Intrinsic (VXT),  Next: IIAbs Intrinsic,  Prev: FPutC Intrinsic (function),  Up: Other Intrinsics\n-\n-IDate Intrinsic (VXT)\n-.....................\n-\n-     CALL IDate(M, D, Y)\n-\n-M: `INTEGER(KIND=1)'; scalar; INTENT(OUT).\n-\n-D: `INTEGER(KIND=1)'; scalar; INTENT(OUT).\n-\n-Y: `INTEGER(KIND=1)'; scalar; INTENT(OUT).\n-\n-Intrinsic groups: `vxt'.\n-\n-Description:\n-\n-   Returns the numerical values of the current local time.  The month\n-(in the range 1-12) is returned in M, the day (in the range 1-7) in D,\n-and the year in Y (in the range 0-99).\n-\n-   This intrinsic is not recommended, due to the year 2000 approaching.\n-\n-   For information on other intrinsics with the same name: *Note IDate\n-Intrinsic (UNIX)::.\n-\n-\u001f\n-File: g77.info,  Node: IIAbs Intrinsic,  Next: IIAnd Intrinsic,  Prev: IDate Intrinsic (VXT),  Up: Other Intrinsics\n-\n-IIAbs Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IIAbs' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IIAnd Intrinsic,  Next: IIBClr Intrinsic,  Prev: IIAbs Intrinsic,  Up: Other Intrinsics\n-\n-IIAnd Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IIAnd' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IIBClr Intrinsic,  Next: IIBits Intrinsic,  Prev: IIAnd Intrinsic,  Up: Other Intrinsics\n-\n-IIBClr Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IIBClr' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IIBits Intrinsic,  Next: IIBSet Intrinsic,  Prev: IIBClr Intrinsic,  Up: Other Intrinsics\n-\n-IIBits Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IIBits' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IIBSet Intrinsic,  Next: IIDiM Intrinsic,  Prev: IIBits Intrinsic,  Up: Other Intrinsics\n-\n-IIBSet Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IIBSet' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IIDiM Intrinsic,  Next: IIDInt Intrinsic,  Prev: IIBSet Intrinsic,  Up: Other Intrinsics\n-\n-IIDiM Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IIDiM' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IIDInt Intrinsic,  Next: IIDNnt Intrinsic,  Prev: IIDiM Intrinsic,  Up: Other Intrinsics\n-\n-IIDInt Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IIDInt' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IIDNnt Intrinsic,  Next: IIEOr Intrinsic,  Prev: IIDInt Intrinsic,  Up: Other Intrinsics\n-\n-IIDNnt Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IIDNnt' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IIEOr Intrinsic,  Next: IIFix Intrinsic,  Prev: IIDNnt Intrinsic,  Up: Other Intrinsics\n-\n-IIEOr Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IIEOr' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IIFix Intrinsic,  Next: IInt Intrinsic,  Prev: IIEOr Intrinsic,  Up: Other Intrinsics\n-\n-IIFix Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IIFix' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IInt Intrinsic,  Next: IIOr Intrinsic,  Prev: IIFix Intrinsic,  Up: Other Intrinsics\n-\n-IInt Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IInt' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IIOr Intrinsic,  Next: IIQint Intrinsic,  Prev: IInt Intrinsic,  Up: Other Intrinsics\n-\n-IIOr Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IIOr' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IIQint Intrinsic,  Next: IIQNnt Intrinsic,  Prev: IIOr Intrinsic,  Up: Other Intrinsics\n-\n-IIQint Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IIQint' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IIQNnt Intrinsic,  Next: IIShftC Intrinsic,  Prev: IIQint Intrinsic,  Up: Other Intrinsics\n-\n-IIQNnt Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IIQNnt' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IIShftC Intrinsic,  Next: IISign Intrinsic,  Prev: IIQNnt Intrinsic,  Up: Other Intrinsics\n-\n-IIShftC Intrinsic\n-.................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IIShftC' to use this name for\n-an external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IISign Intrinsic,  Next: IMax0 Intrinsic,  Prev: IIShftC Intrinsic,  Up: Other Intrinsics\n-\n-IISign Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IISign' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IMax0 Intrinsic,  Next: IMax1 Intrinsic,  Prev: IISign Intrinsic,  Up: Other Intrinsics\n-\n-IMax0 Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IMax0' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IMax1 Intrinsic,  Next: IMin0 Intrinsic,  Prev: IMax0 Intrinsic,  Up: Other Intrinsics\n-\n-IMax1 Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IMax1' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IMin0 Intrinsic,  Next: IMin1 Intrinsic,  Prev: IMax1 Intrinsic,  Up: Other Intrinsics\n-\n-IMin0 Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IMin0' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IMin1 Intrinsic,  Next: IMod Intrinsic,  Prev: IMin0 Intrinsic,  Up: Other Intrinsics\n-\n-IMin1 Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IMin1' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IMod Intrinsic,  Next: INInt Intrinsic,  Prev: IMin1 Intrinsic,  Up: Other Intrinsics\n-\n-IMod Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IMod' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: INInt Intrinsic,  Next: INot Intrinsic,  Prev: IMod Intrinsic,  Up: Other Intrinsics\n-\n-INInt Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL INInt' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: INot Intrinsic,  Next: IZExt Intrinsic,  Prev: INInt Intrinsic,  Up: Other Intrinsics\n-\n-INot Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL INot' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: IZExt Intrinsic,  Next: JIAbs Intrinsic,  Prev: INot Intrinsic,  Up: Other Intrinsics\n-\n-IZExt Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL IZExt' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JIAbs Intrinsic,  Next: JIAnd Intrinsic,  Prev: IZExt Intrinsic,  Up: Other Intrinsics\n-\n-JIAbs Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JIAbs' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JIAnd Intrinsic,  Next: JIBClr Intrinsic,  Prev: JIAbs Intrinsic,  Up: Other Intrinsics\n-\n-JIAnd Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JIAnd' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JIBClr Intrinsic,  Next: JIBits Intrinsic,  Prev: JIAnd Intrinsic,  Up: Other Intrinsics\n-\n-JIBClr Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JIBClr' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JIBits Intrinsic,  Next: JIBSet Intrinsic,  Prev: JIBClr Intrinsic,  Up: Other Intrinsics\n-\n-JIBits Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JIBits' to use this name for an\n-external procedure.\n-"}, {"sha": "3bf2594382b2f17985c3ebeb14603629c0bc33e1", "filename": "gcc/f/g77.info-12", "status": "removed", "additions": 0, "deletions": 1443, "changes": 1443, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-12", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-12", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-12?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2", "patch": "@@ -1,1443 +0,0 @@\n-This is Info file g77.info, produced by Makeinfo version 1.68 from the\n-input file g77.texi.\n-\n-   This file explains how to use the GNU Fortran system.\n-\n-   Published by the Free Software Foundation 59 Temple Place - Suite 330\n-Boston, MA 02111-1307 USA\n-\n-   Copyright (C) 1995-1997 Free Software Foundation, Inc.\n-\n-   Permission is granted to make and distribute verbatim copies of this\n-manual provided the copyright notice and this permission notice are\n-preserved on all copies.\n-\n-   Permission is granted to copy and distribute modified versions of\n-this manual under the conditions for verbatim copying, provided also\n-that the sections entitled \"GNU General Public License,\" \"Funding for\n-Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n-included exactly as in the original, and provided that the entire\n-resulting derived work is distributed under the terms of a permission\n-notice identical to this one.\n-\n-   Permission is granted to copy and distribute translations of this\n-manual into another language, under the above conditions for modified\n-versions, except that the sections entitled \"GNU General Public\n-License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n-`Look And Feel'\", and this permission notice, may be included in\n-translations approved by the Free Software Foundation instead of in the\n-original English.\n-\n-   Contributed by James Craig Burley (<burley@gnu.ai.mit.edu>).\n-Inspired by a first pass at translating `g77-0.5.16/f/DOC' that was\n-contributed to Craig by David Ronis (<ronis@onsager.chem.mcgill.ca>).\n-\n-INFO-DIR-SECTION Fortran Programming\n-START-INFO-DIR-ENTRY\n-* g77: (g77).               The GNU Fortran compilation system.\n-END-INFO-DIR-ENTRY\n-\n-\u001f\n-File: g77.info,  Node: JIBSet Intrinsic,  Next: JIDiM Intrinsic,  Prev: JIBits Intrinsic,  Up: Other Intrinsics\n-\n-JIBSet Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JIBSet' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JIDiM Intrinsic,  Next: JIDInt Intrinsic,  Prev: JIBSet Intrinsic,  Up: Other Intrinsics\n-\n-JIDiM Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JIDiM' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JIDInt Intrinsic,  Next: JIDNnt Intrinsic,  Prev: JIDiM Intrinsic,  Up: Other Intrinsics\n-\n-JIDInt Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JIDInt' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JIDNnt Intrinsic,  Next: JIEOr Intrinsic,  Prev: JIDInt Intrinsic,  Up: Other Intrinsics\n-\n-JIDNnt Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JIDNnt' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JIEOr Intrinsic,  Next: JIFix Intrinsic,  Prev: JIDNnt Intrinsic,  Up: Other Intrinsics\n-\n-JIEOr Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JIEOr' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JIFix Intrinsic,  Next: JInt Intrinsic,  Prev: JIEOr Intrinsic,  Up: Other Intrinsics\n-\n-JIFix Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JIFix' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JInt Intrinsic,  Next: JIOr Intrinsic,  Prev: JIFix Intrinsic,  Up: Other Intrinsics\n-\n-JInt Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JInt' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JIOr Intrinsic,  Next: JIQint Intrinsic,  Prev: JInt Intrinsic,  Up: Other Intrinsics\n-\n-JIOr Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JIOr' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JIQint Intrinsic,  Next: JIQNnt Intrinsic,  Prev: JIOr Intrinsic,  Up: Other Intrinsics\n-\n-JIQint Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JIQint' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JIQNnt Intrinsic,  Next: JIShft Intrinsic,  Prev: JIQint Intrinsic,  Up: Other Intrinsics\n-\n-JIQNnt Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JIQNnt' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JIShft Intrinsic,  Next: JIShftC Intrinsic,  Prev: JIQNnt Intrinsic,  Up: Other Intrinsics\n-\n-JIShft Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JIShft' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JIShftC Intrinsic,  Next: JISign Intrinsic,  Prev: JIShft Intrinsic,  Up: Other Intrinsics\n-\n-JIShftC Intrinsic\n-.................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JIShftC' to use this name for\n-an external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JISign Intrinsic,  Next: JMax0 Intrinsic,  Prev: JIShftC Intrinsic,  Up: Other Intrinsics\n-\n-JISign Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JISign' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JMax0 Intrinsic,  Next: JMax1 Intrinsic,  Prev: JISign Intrinsic,  Up: Other Intrinsics\n-\n-JMax0 Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JMax0' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JMax1 Intrinsic,  Next: JMin0 Intrinsic,  Prev: JMax0 Intrinsic,  Up: Other Intrinsics\n-\n-JMax1 Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JMax1' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JMin0 Intrinsic,  Next: JMin1 Intrinsic,  Prev: JMax1 Intrinsic,  Up: Other Intrinsics\n-\n-JMin0 Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JMin0' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JMin1 Intrinsic,  Next: JMod Intrinsic,  Prev: JMin0 Intrinsic,  Up: Other Intrinsics\n-\n-JMin1 Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JMin1' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JMod Intrinsic,  Next: JNInt Intrinsic,  Prev: JMin1 Intrinsic,  Up: Other Intrinsics\n-\n-JMod Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JMod' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JNInt Intrinsic,  Next: JNot Intrinsic,  Prev: JMod Intrinsic,  Up: Other Intrinsics\n-\n-JNInt Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JNInt' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JNot Intrinsic,  Next: JZExt Intrinsic,  Prev: JNInt Intrinsic,  Up: Other Intrinsics\n-\n-JNot Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JNot' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: JZExt Intrinsic,  Next: Kill Intrinsic (function),  Prev: JNot Intrinsic,  Up: Other Intrinsics\n-\n-JZExt Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL JZExt' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: Kill Intrinsic (function),  Next: Link Intrinsic (function),  Prev: JZExt Intrinsic,  Up: Other Intrinsics\n-\n-Kill Intrinsic (function)\n-.........................\n-\n-     Kill(PID, SIGNAL)\n-\n-Kill: `INTEGER(KIND=1)' function.\n-\n-PID: `INTEGER'; scalar; INTENT(IN).\n-\n-SIGNAL: `INTEGER'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `badu77'.\n-\n-Description:\n-\n-   Sends the signal specified by SIGNAL to the process PID.  Returns 0\n-on success or a non-zero error code.  See `kill(2)'.\n-\n-   Due to the side effects performed by this intrinsic, the function\n-form is not recommended.\n-\n-   For information on other intrinsics with the same name: *Note Kill\n-Intrinsic (subroutine)::.\n-\n-\u001f\n-File: g77.info,  Node: Link Intrinsic (function),  Next: QAbs Intrinsic,  Prev: Kill Intrinsic (function),  Up: Other Intrinsics\n-\n-Link Intrinsic (function)\n-.........................\n-\n-     Link(PATH1, PATH2)\n-\n-Link: `INTEGER(KIND=1)' function.\n-\n-PATH1: `CHARACTER'; scalar; INTENT(IN).\n-\n-PATH2: `CHARACTER'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `badu77'.\n-\n-Description:\n-\n-   Makes a (hard) link from file PATH1 to PATH2.  A null character\n-(`CHAR(0)') marks the end of the names in PATH1 and PATH2--otherwise,\n-trailing blanks in PATH1 and PATH2 are ignored.  Returns 0 on success\n-or a non-zero error code.  See `link(2)'.\n-\n-   Due to the side effects performed by this intrinsic, the function\n-form is not recommended.\n-\n-   For information on other intrinsics with the same name: *Note Link\n-Intrinsic (subroutine)::.\n-\n-\u001f\n-File: g77.info,  Node: QAbs Intrinsic,  Next: QACos Intrinsic,  Prev: Link Intrinsic (function),  Up: Other Intrinsics\n-\n-QAbs Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QAbs' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QACos Intrinsic,  Next: QACosD Intrinsic,  Prev: QAbs Intrinsic,  Up: Other Intrinsics\n-\n-QACos Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QACos' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QACosD Intrinsic,  Next: QASin Intrinsic,  Prev: QACos Intrinsic,  Up: Other Intrinsics\n-\n-QACosD Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QACosD' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QASin Intrinsic,  Next: QASinD Intrinsic,  Prev: QACosD Intrinsic,  Up: Other Intrinsics\n-\n-QASin Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QASin' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QASinD Intrinsic,  Next: QATan Intrinsic,  Prev: QASin Intrinsic,  Up: Other Intrinsics\n-\n-QASinD Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QASinD' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QATan Intrinsic,  Next: QATan2 Intrinsic,  Prev: QASinD Intrinsic,  Up: Other Intrinsics\n-\n-QATan Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QATan' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QATan2 Intrinsic,  Next: QATan2D Intrinsic,  Prev: QATan Intrinsic,  Up: Other Intrinsics\n-\n-QATan2 Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QATan2' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QATan2D Intrinsic,  Next: QATanD Intrinsic,  Prev: QATan2 Intrinsic,  Up: Other Intrinsics\n-\n-QATan2D Intrinsic\n-.................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QATan2D' to use this name for\n-an external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QATanD Intrinsic,  Next: QCos Intrinsic,  Prev: QATan2D Intrinsic,  Up: Other Intrinsics\n-\n-QATanD Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QATanD' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QCos Intrinsic,  Next: QCosD Intrinsic,  Prev: QATanD Intrinsic,  Up: Other Intrinsics\n-\n-QCos Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QCos' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QCosD Intrinsic,  Next: QCosH Intrinsic,  Prev: QCos Intrinsic,  Up: Other Intrinsics\n-\n-QCosD Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QCosD' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QCosH Intrinsic,  Next: QDiM Intrinsic,  Prev: QCosD Intrinsic,  Up: Other Intrinsics\n-\n-QCosH Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QCosH' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QDiM Intrinsic,  Next: QExp Intrinsic,  Prev: QCosH Intrinsic,  Up: Other Intrinsics\n-\n-QDiM Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QDiM' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QExp Intrinsic,  Next: QExt Intrinsic,  Prev: QDiM Intrinsic,  Up: Other Intrinsics\n-\n-QExp Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QExp' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QExt Intrinsic,  Next: QExtD Intrinsic,  Prev: QExp Intrinsic,  Up: Other Intrinsics\n-\n-QExt Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QExt' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QExtD Intrinsic,  Next: QFloat Intrinsic,  Prev: QExt Intrinsic,  Up: Other Intrinsics\n-\n-QExtD Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QExtD' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QFloat Intrinsic,  Next: QInt Intrinsic,  Prev: QExtD Intrinsic,  Up: Other Intrinsics\n-\n-QFloat Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QFloat' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QInt Intrinsic,  Next: QLog Intrinsic,  Prev: QFloat Intrinsic,  Up: Other Intrinsics\n-\n-QInt Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QInt' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QLog Intrinsic,  Next: QLog10 Intrinsic,  Prev: QInt Intrinsic,  Up: Other Intrinsics\n-\n-QLog Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QLog' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QLog10 Intrinsic,  Next: QMax1 Intrinsic,  Prev: QLog Intrinsic,  Up: Other Intrinsics\n-\n-QLog10 Intrinsic\n-................\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QLog10' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QMax1 Intrinsic,  Next: QMin1 Intrinsic,  Prev: QLog10 Intrinsic,  Up: Other Intrinsics\n-\n-QMax1 Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QMax1' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QMin1 Intrinsic,  Next: QMod Intrinsic,  Prev: QMax1 Intrinsic,  Up: Other Intrinsics\n-\n-QMin1 Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QMin1' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QMod Intrinsic,  Next: QNInt Intrinsic,  Prev: QMin1 Intrinsic,  Up: Other Intrinsics\n-\n-QMod Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QMod' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QNInt Intrinsic,  Next: QSin Intrinsic,  Prev: QMod Intrinsic,  Up: Other Intrinsics\n-\n-QNInt Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QNInt' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QSin Intrinsic,  Next: QSinD Intrinsic,  Prev: QNInt Intrinsic,  Up: Other Intrinsics\n-\n-QSin Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QSin' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QSinD Intrinsic,  Next: QSinH Intrinsic,  Prev: QSin Intrinsic,  Up: Other Intrinsics\n-\n-QSinD Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QSinD' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QSinH Intrinsic,  Next: QSqRt Intrinsic,  Prev: QSinD Intrinsic,  Up: Other Intrinsics\n-\n-QSinH Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QSinH' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QSqRt Intrinsic,  Next: QTan Intrinsic,  Prev: QSinH Intrinsic,  Up: Other Intrinsics\n-\n-QSqRt Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QSqRt' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QTan Intrinsic,  Next: QTanD Intrinsic,  Prev: QSqRt Intrinsic,  Up: Other Intrinsics\n-\n-QTan Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QTan' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QTanD Intrinsic,  Next: QTanH Intrinsic,  Prev: QTan Intrinsic,  Up: Other Intrinsics\n-\n-QTanD Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QTanD' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: QTanH Intrinsic,  Next: Rename Intrinsic (function),  Prev: QTanD Intrinsic,  Up: Other Intrinsics\n-\n-QTanH Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL QTanH' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: Rename Intrinsic (function),  Next: Secnds Intrinsic,  Prev: QTanH Intrinsic,  Up: Other Intrinsics\n-\n-Rename Intrinsic (function)\n-...........................\n-\n-     Rename(PATH1, PATH2)\n-\n-Rename: `INTEGER(KIND=1)' function.\n-\n-PATH1: `CHARACTER'; scalar; INTENT(IN).\n-\n-PATH2: `CHARACTER'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `badu77'.\n-\n-Description:\n-\n-   Renames the file PATH1 to PATH2.  A null character (`CHAR(0)') marks\n-the end of the names in PATH1 and PATH2--otherwise, trailing blanks in\n-PATH1 and PATH2 are ignored.  See `rename(2)'.  Returns 0 on success or\n-a non-zero error code.\n-\n-   Due to the side effects performed by this intrinsic, the function\n-form is not recommended.\n-\n-   For information on other intrinsics with the same name: *Note Rename\n-Intrinsic (subroutine)::.\n-\n-\u001f\n-File: g77.info,  Node: Secnds Intrinsic,  Next: Signal Intrinsic (function),  Prev: Rename Intrinsic (function),  Up: Other Intrinsics\n-\n-Secnds Intrinsic\n-................\n-\n-     Secnds(T)\n-\n-Secnds: `REAL(KIND=1)' function.\n-\n-T: `REAL(KIND=1)'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `vxt'.\n-\n-Description:\n-\n-   Returns the local time in seconds since midnight minus the value T.\n-\n-\u001f\n-File: g77.info,  Node: Signal Intrinsic (function),  Next: SinD Intrinsic,  Prev: Secnds Intrinsic,  Up: Other Intrinsics\n-\n-Signal Intrinsic (function)\n-...........................\n-\n-     Signal(NUMBER, HANDLER)\n-\n-Signal: `INTEGER(KIND=1)' function.\n-\n-NUMBER: `INTEGER'; scalar; INTENT(IN).\n-\n-HANDLER: Signal handler (`INTEGER FUNCTION' or `SUBROUTINE') or\n-dummy/global `INTEGER(KIND=1)' scalar.\n-\n-Intrinsic groups: `badu77'.\n-\n-Description:\n-\n-   If HANDLER is a an `EXTERNAL' routine, arranges for it to be invoked\n-with a single integer argument (of system-dependent length) when signal\n-NUMBER occurs.  If NUMBER is an integer, it can be used to turn off\n-handling of signal HANDLER or revert to its default action.  See\n-`signal(2)'.\n-\n-   Note that HANDLER will be called using C conventions, so its value in\n-Fortran terms is obtained by applying `%LOC()' (or LOC()) to it.\n-\n-   The value returned by `signal(2)' is returned.\n-\n-   Due to the side effects performed by this intrinsic, the function\n-form is not recommended.\n-\n-   For information on other intrinsics with the same name: *Note Signal\n-Intrinsic (subroutine)::.\n-\n-\u001f\n-File: g77.info,  Node: SinD Intrinsic,  Next: SnglQ Intrinsic,  Prev: Signal Intrinsic (function),  Up: Other Intrinsics\n-\n-SinD Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL SinD' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: SnglQ Intrinsic,  Next: SymLnk Intrinsic (function),  Prev: SinD Intrinsic,  Up: Other Intrinsics\n-\n-SnglQ Intrinsic\n-...............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL SnglQ' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: SymLnk Intrinsic (function),  Next: System Intrinsic (function),  Prev: SnglQ Intrinsic,  Up: Other Intrinsics\n-\n-SymLnk Intrinsic (function)\n-...........................\n-\n-     SymLnk(PATH1, PATH2)\n-\n-SymLnk: `INTEGER(KIND=1)' function.\n-\n-PATH1: `CHARACTER'; scalar; INTENT(IN).\n-\n-PATH2: `CHARACTER'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `badu77'.\n-\n-Description:\n-\n-   Makes a symbolic link from file PATH1 to PATH2.  A null character\n-(`CHAR(0)') marks the end of the names in PATH1 and PATH2--otherwise,\n-trailing blanks in PATH1 and PATH2 are ignored.  Returns 0 on success\n-or a non-zero error code (`ENOSYS' if the system does not provide\n-`symlink(2)').\n-\n-   Due to the side effects performed by this intrinsic, the function\n-form is not recommended.\n-\n-   For information on other intrinsics with the same name: *Note SymLnk\n-Intrinsic (subroutine)::.\n-\n-\u001f\n-File: g77.info,  Node: System Intrinsic (function),  Next: TanD Intrinsic,  Prev: SymLnk Intrinsic (function),  Up: Other Intrinsics\n-\n-System Intrinsic (function)\n-...........................\n-\n-     System(COMMAND)\n-\n-System: `INTEGER(KIND=1)' function.\n-\n-COMMAND: `CHARACTER'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `badu77'.\n-\n-Description:\n-\n-   Passes the command COMMAND to a shell (see `system(3)').  Returns\n-the value returned by `system(3)', presumably 0 if the shell command\n-succeeded.  Note that which shell is used to invoke the command is\n-system-dependent and environment-dependent.\n-\n-   Due to the side effects performed by this intrinsic, the function\n-form is not recommended.  However, the function form can be valid in\n-cases where the actual side effects performed by the call are\n-unimportant to the application.\n-\n-   For example, on a UNIX system, `SAME = SYSTEM('cmp a b')' does not\n-perform any side effects likely to be important to the program, so the\n-programmer would not care if the actual system call (and invocation of\n-`cmp') was optimized away in a situation where the return value could\n-be determined otherwise, or was not actually needed (`SAME' not\n-actually referenced after the sample assignment statement).\n-\n-   For information on other intrinsics with the same name: *Note System\n-Intrinsic (subroutine)::.\n-\n-\u001f\n-File: g77.info,  Node: TanD Intrinsic,  Next: Time Intrinsic (VXT),  Prev: System Intrinsic (function),  Up: Other Intrinsics\n-\n-TanD Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL TanD' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: Time Intrinsic (VXT),  Next: UMask Intrinsic (function),  Prev: TanD Intrinsic,  Up: Other Intrinsics\n-\n-Time Intrinsic (VXT)\n-....................\n-\n-     CALL Time(TIME)\n-\n-TIME: `CHARACTER*8'; scalar; INTENT(OUT).\n-\n-Intrinsic groups: `vxt'.\n-\n-Description:\n-\n-   Returns in TIME a character representation of the current time as\n-obtained from `ctime(3)'.\n-\n-   *Note Fdate Intrinsic (subroutine):: for an equivalent routine.\n-\n-   For information on other intrinsics with the same name: *Note Time\n-Intrinsic (UNIX)::.\n-\n-\u001f\n-File: g77.info,  Node: UMask Intrinsic (function),  Next: Unlink Intrinsic (function),  Prev: Time Intrinsic (VXT),  Up: Other Intrinsics\n-\n-UMask Intrinsic (function)\n-..........................\n-\n-     UMask(MASK)\n-\n-UMask: `INTEGER(KIND=1)' function.\n-\n-MASK: `INTEGER'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `badu77'.\n-\n-Description:\n-\n-   Sets the file creation mask to MASK and returns the old value.  See\n-`umask(2)'.\n-\n-   Due to the side effects performed by this intrinsic, the function\n-form is not recommended.\n-\n-   For information on other intrinsics with the same name: *Note UMask\n-Intrinsic (subroutine)::.\n-\n-\u001f\n-File: g77.info,  Node: Unlink Intrinsic (function),  Next: ZExt Intrinsic,  Prev: UMask Intrinsic (function),  Up: Other Intrinsics\n-\n-Unlink Intrinsic (function)\n-...........................\n-\n-     Unlink(FILE)\n-\n-Unlink: `INTEGER(KIND=1)' function.\n-\n-FILE: `CHARACTER'; scalar; INTENT(IN).\n-\n-Intrinsic groups: `badu77'.\n-\n-Description:\n-\n-   Unlink the file FILE.  A null character (`CHAR(0)') marks the end of\n-the name in FILE--otherwise, trailing blanks in FILE are ignored.\n-Returns 0 on success or a non-zero error code.  See `unlink(2)'.\n-\n-   Due to the side effects performed by this intrinsic, the function\n-form is not recommended.\n-\n-   For information on other intrinsics with the same name: *Note Unlink\n-Intrinsic (subroutine)::.\n-\n-\u001f\n-File: g77.info,  Node: ZExt Intrinsic,  Prev: Unlink Intrinsic (function),  Up: Other Intrinsics\n-\n-ZExt Intrinsic\n-..............\n-\n-   This intrinsic is not yet implemented.  The name is, however,\n-reserved as an intrinsic.  Use `EXTERNAL ZExt' to use this name for an\n-external procedure.\n-\n-\u001f\n-File: g77.info,  Node: Other Compilers,  Next: Other Languages,  Prev: Other Dialects,  Up: Top\n-\n-Other Compilers\n-***************\n-\n-   An individual Fortran source file can be compiled to an object\n-(`*.o') file instead of to the final program executable.  This allows\n-several portions of a program to be compiled at different times and\n-linked together whenever a new version of the program is needed.\n-However, it introduces the issue of \"object compatibility\" across the\n-various object files (and libraries, or `*.a' files) that are linked\n-together to produce any particular executable file.\n-\n-   Object compatibility is an issue when combining, in one program,\n-Fortran code compiled by more than one compiler (or more than one\n-configuration of a compiler).  If the compilers disagree on how to\n-transform the names of procedures, there will normally be errors when\n-linking such programs.  Worse, if the compilers agree on naming, but\n-disagree on issues like how to pass parameters, return arguments, and\n-lay out `COMMON' areas, the earliest detected errors might be the\n-incorrect results produced by the program (and that assumes these\n-errors are detected, which is not always the case).\n-\n-   Normally, `g77' generates code that is object-compatible with code\n-generated by a version of `f2c' configured (with, for example, `f2c.h'\n-definitions) to be generally compatible with `g77' as built by `gcc'.\n-(Normally, `f2c' will, by default, conform to the appropriate\n-configuration, but it is possible that older or perhaps even newer\n-versions of `f2c', or versions having certain configuration changes to\n-`f2c' internals, will produce object files that are incompatible with\n-`g77'.)\n-\n-   For example, a Fortran string subroutine argument will become two\n-arguments on the C side: a `char *' and an `int' length.\n-\n-   Much of this compatibility results from the fact that `g77' uses the\n-same run-time library, `libf2c', used by `f2c'.\n-\n-   Other compilers might or might not generate code that is\n-object-compatible with `libf2c' and current `g77', and some might offer\n-such compatibility only when explicitly selected via a command-line\n-option to the compiler.\n-\n-   *Note: This portion of the documentation definitely needs a lot of\n-work!*\n-\n-* Menu:\n-\n-* Dropping f2c Compatibility::  When speed is more important.\n-* Compilers Other Than f2c::    Interoperation with code from other compilers.\n-\n-\u001f\n-File: g77.info,  Node: Dropping f2c Compatibility,  Next: Compilers Other Than f2c,  Up: Other Compilers\n-\n-Dropping `f2c' Compatibility\n-============================\n-\n-   Specifying `-fno-f2c' allows `g77' to generate, in some cases,\n-faster code, by not needing to allow to the possibility of linking with\n-code compiled by `f2c'.\n-\n-   For example, this affects how `REAL(KIND=1)', `COMPLEX(KIND=1)', and\n-`COMPLEX(KIND=2)' functions are called.  With `-fno-f2c', they are\n-compiled as returning the appropriate `gcc' type (`float', `__complex__\n-float', `__complex__ double', in many configurations).\n-\n-   With `-ff2c' in force, they are compiled differently (with perhaps\n-slower run-time performance) to accommodate the restrictions inherent\n-in `f2c''s use of K&R C as an intermediate language--`REAL(KIND=1)'\n-functions return C's `double' type, while `COMPLEX' functions return\n-`void' and use an extra argument pointing to a place for the functions\n-to return their values.\n-\n-   It is possible that, in some cases, leaving `-ff2c' in force might\n-produce faster code than using `-fno-f2c'.  Feel free to experiment,\n-but remember to experiment with changing the way *entire programs and\n-their Fortran libraries are compiled* at a time, since this sort of\n-experimentation affects the interface of code generated for a Fortran\n-source file--that is, it affects object compatibility.\n-\n-   Note that `f2c' compatibility is a fairly static target to achieve,\n-though not necessarily perfectly so, since, like `g77', it is still\n-being improved.  However, specifying `-fno-f2c' causes `g77' to\n-generate code that will probably be incompatible with code generated by\n-future versions of `g77' when the same option is in force.  You should\n-make sure you are always able to recompile complete programs from\n-source code when upgrading to new versions of `g77' or `f2c',\n-especially when using options such as `-fno-f2c'.\n-\n-   Therefore, if you are using `g77' to compile libraries and other\n-object files for possible future use and you don't want to require\n-recompilation for future use with subsequent versions of `g77', you\n-might want to stick with `f2c' compatibility for now, and carefully\n-watch for any announcements about changes to the `f2c'/`libf2c'\n-interface that might affect existing programs (thus requiring\n-recompilation).\n-\n-   It is probable that a future version of `g77' will not, by default,\n-generate object files compatible with `f2c', and that version probably\n-would no longer use `libf2c'.  If you expect to depend on this\n-compatibility in the long term, use the options `-ff2c -ff2c-library'\n-when compiling all of the applicable code.  This should cause future\n-versions of `g77' either to produce compatible code (at the expense of\n-the availability of some features and performance), or at the very\n-least, to produce diagnostics.\n-\n-\u001f\n-File: g77.info,  Node: Compilers Other Than f2c,  Prev: Dropping f2c Compatibility,  Up: Other Compilers\n-\n-Compilers Other Than `f2c'\n-==========================\n-\n-   On systems with Fortran compilers other than `f2c' and `g77', code\n-compiled by `g77' is not expected to work well with code compiled by\n-the native compiler.  (This is true for `f2c'-compiled objects as\n-well.)  Libraries compiled with the native compiler probably will have\n-to be recompiled with `g77' to be used with `g77'-compiled code.\n-\n-   Reasons for such incompatibilities include:\n-\n-   * There might be differences in the way names of Fortran procedures\n-     are translated for use in the system's object-file format.  For\n-     example, the statement `CALL FOO' might be compiled by `g77' to\n-     call a procedure the linker `ld' sees given the name `_foo_',\n-     while the apparently corresponding statement `SUBROUTINE FOO'\n-     might be compiled by the native compiler to define the\n-     linker-visible name `_foo', or `_FOO_', and so on.\n-\n-   * There might be subtle type mismatches which cause subroutine\n-     arguments and function return values to get corrupted.\n-\n-     This is why simply getting `g77' to transform procedure names the\n-     same way a native compiler does is not usually a good idea--unless\n-     some effort has been made to ensure that, aside from the way the\n-     two compilers transform procedure names, everything else about the\n-     way they generate code for procedure interfaces is identical.\n-\n-   * Native compilers use libraries of private I/O routines which will\n-     not be available at link time unless you have the native\n-     compiler--and you would have to explicitly ask for them.\n-\n-     For example, on the Sun you would have to add `-L/usr/lang/SCx.x\n-     -lF77 -lV77' to the link command.\n-\n-\u001f\n-File: g77.info,  Node: Other Languages,  Next: Installation,  Prev: Other Compilers,  Up: Top\n-\n-Other Languages\n-***************\n-\n-   *Note: This portion of the documentation definitely needs a lot of\n-work!*\n-\n-* Menu:\n-\n-* Interoperating with C and C++::\n-\n-\u001f\n-File: g77.info,  Node: Interoperating with C and C++,  Up: Other Languages\n-\n-Tools and advice for interoperating with C and C++\n-==================================================\n-\n-   The following discussion assumes that you are running `g77' in `f2c'\n-compatibility mode, i.e. not using `-fno-f2c'.  It provides some advice\n-about quick and simple techniques for linking Fortran and C (or C++),\n-the most common requirement.  For the full story consult the\n-description of code generation.  *Note Debugging and Interfacing::.\n-\n-   When linking Fortran and C, it's usually best to use `g77' to do the\n-linking so that the correct libraries are included (including the maths\n-one).  If you're linking with C++ you will want to add `-lstdc++',\n-`-lg++' or whatever.  If you need to use another driver program (or\n-`ld' directly), you can find out what linkage options `g77' passes by\n-running `g77 -v'.\n-\n-* Menu:\n-\n-* C Interfacing Tools::\n-* C Access to Type Information::\n-* f2c Skeletons and Prototypes::\n-* C++ Considerations::\n-* Startup Code::\n-\n-\u001f\n-File: g77.info,  Node: C Interfacing Tools,  Next: C Access to Type Information,  Up: Interoperating with C and C++\n-\n-C Interfacing Tools\n--------------------\n-\n-   Even if you don't actually use it as a compiler, `f2c' from\n-`ftp://ftp.netlib.org/f2c/src', can be a useful tool when you're\n-interfacing (linking) Fortran and C.  *Note Generating Skeletons and\n-Prototypes with `f2c': f2c Skeletons and Prototypes.\n-\n-   To use `f2c' for this purpose you only need retrieve and build the\n-`src' directory from the distribution, consult the `README'\n-instructions there for machine-specifics, and install the `f2c' program\n-on your path.\n-\n-   Something else that might be useful is `cfortran.h' from\n-`ftp://zebra/desy.de/cfortran'.  This is a fairly general tool which\n-can be used to generate interfaces for calling in both directions\n-between Fortran and C.  It can be used in `f2c' mode with\n-`g77'--consult its documentation for details.\n-\n-\u001f\n-File: g77.info,  Node: C Access to Type Information,  Next: f2c Skeletons and Prototypes,  Prev: C Interfacing Tools,  Up: Interoperating with C and C++\n-\n-Accessing Type Information in C\n--------------------------------\n-\n-   Generally, C code written to link with `g77' code--calling and/or\n-being called from Fortran--should `#include <f2c.h>' to define the C\n-versions of the Fortran types.  Don't assume Fortran `INTEGER' types\n-correspond to C `int's, for instance; instead, declare them as\n-`integer', a type defined by `f2c.h'.  `f2c.h' is installed where `gcc'\n-will find it by default, assuming you use a copy of `gcc' compatible\n-with `g77', probably built at the same time as `g77'.\n-\n-\u001f\n-File: g77.info,  Node: f2c Skeletons and Prototypes,  Next: C++ Considerations,  Prev: C Access to Type Information,  Up: Interoperating with C and C++\n-\n-Generating Skeletons and Prototypes with `f2c'\n-----------------------------------------------\n-\n-   A simple and foolproof way to write `g77'-callable C routines--e.g.\n-to interface with an existing library--is to write a file (named, for\n-example, `fred.f') of dummy Fortran skeletons comprising just the\n-declaration of the routine(s) and dummy arguments plus `END' statements.\n-Then run `f2c' on file `fred.f' to produce `fred.c' into which you can\n-edit useful code, confident the calling sequence is correct, at least.\n-(There are some errors otherwise commonly made in generating C\n-interfaces with f2c conventions, such as not using `doublereal' as the\n-return type of a `REAL' `FUNCTION'.)\n-\n-   `f2c' also can help with calling Fortran from C, using its `-P'\n-option to generate C prototypes appropriate for calling the Fortran.(1)\n-If the Fortran code containing any routines to be called from C is in\n-file `joe.f', use the command `f2c -P joe.f' to generate the file\n-`joe.P' containing prototype information.  `#include' this in the C\n-which has to call the Fortran routines to make sure you get it right.\n-\n-   *Note Arrays (DIMENSION: Arrays, for information on the differences\n-between the way Fortran (including compilers like `g77') and C handle\n-arrays.\n-\n-   ---------- Footnotes ----------\n-\n-   (1) The files generated like this can also be used for inter-unit\n-consistency checking of dummy and actual arguments, although the\n-`ftnchek' tool from `ftp://ftp.netlib.org/fortran' or\n-`ftp://ftp.dsm.fordham.edu' is probably better for this purpose.\n-\n-\u001f\n-File: g77.info,  Node: C++ Considerations,  Next: Startup Code,  Prev: f2c Skeletons and Prototypes,  Up: Interoperating with C and C++\n-\n-C++ Considerations\n-------------------\n-\n-   `f2c' can be used to generate suitable code for compilation with a\n-C++ system using the `-C++' option.  The important thing about linking\n-`g77'-compiled code with C++ is that the prototypes for the `g77'\n-routines must specify C linkage to avoid name mangling.  So, use an\n-`extern \"C\"' declaration.  `f2c''s `-C++' option will take care of this\n-when generating skeletons or prototype files as above, and also avoid\n-clashes with C++ reserved words in addition to those in C.\n-\n-\u001f\n-File: g77.info,  Node: Startup Code,  Prev: C++ Considerations,  Up: Interoperating with C and C++\n-\n-Startup Code\n-------------\n-\n-   Unlike with some runtime systems, it shouldn't be necessary (unless\n-there are bugs) to use a Fortran main program to ensure the\n-runtime--specifically the i/o system--is initialized.  However, to use\n-the `g77' intrinsics `GETARG()' and `IARGC()' the `main()' routine from\n-the `libf2c' library must be used, either explicitly or implicitly by\n-using a Fortran main program.  This `main()' program calls `MAIN__()'\n-(where the names are C-type `extern' names, i.e. not mangled).  You\n-need to provide this nullary procedure as the entry point for your C\n-code if using `libf2c''s `main'.  In some cases it might be necessary to\n-provide a dummy version of this to avoid linkers complaining about\n-failure to resolve `MAIN__()' if linking against `libf2c' and not using\n-`main()' from it.\n-\n-\u001f\n-File: g77.info,  Node: Installation,  Next: Debugging and Interfacing,  Prev: Other Languages,  Up: Top\n-\n-Installing GNU Fortran\n-**********************\n-\n-   The following information describes how to install `g77'.\n-\n-   The information in this file generally pertains to dealing with\n-*source* distributions of `g77' and `gcc'.  It is possible that some of\n-this information will be applicable to some *binary* distributions of\n-these products--however, since these distributions are not made by the\n-maintainers of `g77', responsibility for binary distributions rests with\n-whoever built and first distributed them.\n-\n-   Nevertheless, efforts to make `g77' easier to both build and install\n-from source and package up as a binary distribution are ongoing.\n-\n-* Menu:\n-\n-* Prerequisites::          Make sure your system is ready for `g77'.\n-* Problems Installing::    Known trouble areas.\n-* Settings::               Changing `g77' internals before building.\n-* Quick Start::            The easier procedure for non-experts.\n-* Complete Installation::  For experts, or those who want to be: the details.\n-* Distributing Binaries::  If you plan on distributing your `g77'.\n-\n-\u001f\n-File: g77.info,  Node: Prerequisites,  Next: Problems Installing,  Up: Installation\n-\n-Prerequisites\n-=============\n-\n-   The procedures described to unpack, configure, build, and install\n-`g77' assume your system has certain programs already installed.\n-\n-   The following prerequisites should be met by your system before you\n-follow the `g77' installation instructions:\n-\n-`gzip'\n-     To unpack the `gcc' and `g77' distributions, you'll need the\n-     `gunzip' utility in the `gzip' distribution.  Most UNIX systems\n-     already have `gzip' installed.  If yours doesn't, you can get it\n-     from the FSF.\n-\n-     Note that you'll need `tar' and other utilities as well, but all\n-     UNIX systems have these.  There are GNU versions of all these\n-     available--in fact, a complete GNU UNIX system can be put together\n-     on most systems, if desired.\n-\n-     The version of GNU `gzip' used to package this release is 1.24.\n-     (The version of GNU `tar' used to package this release is 1.11.2.)\n-\n-`gcc-2.7.2.3.tar.gz'\n-     You need to have this, or some other applicable, version of `gcc'\n-     on your system.  The version should be an exact copy of a\n-     distribution from the FSF.  Its size is approximately 7.1MB.\n-\n-     If you've already unpacked `gcc-2.7.2.3.tar.gz' into a directory\n-     (named `gcc-2.7.2.3') called the \"source tree\" for `gcc', you can\n-     delete the distribution itself, but you'll need to remember to\n-     skip any instructions to unpack this distribution.\n-\n-     Without an applicable `gcc' source tree, you cannot build `g77'.\n-     You can obtain an FSF distribution of `gcc' from the FSF.\n-\n-`g77-0.5.21.tar.gz'\n-     You probably have already unpacked this package, or you are\n-     reading an advance copy of these installation instructions, which\n-     are contained in this distribution.  The size of this package is\n-     approximately 1.5MB.\n-\n-     You can obtain an FSF distribution of `g77' from the FSF, the same\n-     way you obtained `gcc'.\n-\n-Enough disk space\n-     The amount of disk space needed to unpack, build, install, and use\n-     `g77' depends on the type of system you're using, how you build\n-     `g77', and how much of it you install (primarily, which languages\n-     you install).\n-\n-     The sizes shown below assume all languages distributed in\n-     `gcc-2.7.2.3', plus `g77', will be built and installed.  These\n-     sizes are indicative of GNU/Linux systems on Intel x86 running\n-     COFF and on Digital Alpha (AXP) systems running ELF.  These should\n-     be fairly representative of 32-bit and 64-bit systems,\n-     respectively.\n-\n-     Note that all sizes are approximate and subject to change without\n-     notice!  They are based on preliminary releases of g77 made shortly\n-     before the public beta release.\n-\n-        -- `gcc' and `g77' distributions occupy 8.6MB packed, 35MB\n-          unpacked.  These consist of the source code and documentation,\n-          plus some derived files (mostly documentation), for `gcc' and\n-          `g77'.  Any deviations from these numbers for different kinds\n-          of systems are likely to be very minor.\n-\n-        -- A \"bootstrap\" build requires an additional 67.3MB for a\n-          total of 102MB on an ix86, and an additional 98MB for a total\n-          of 165MB on an Alpha.\n-\n-        -- Removing `gcc/stage1' after the build recovers 10.7MB for a\n-          total of 91MB on an ix86, and recovers ??MB for a total of\n-          ??MB on an Alpha.\n-\n-          After doing this, the integrity of the build can still be\n-          verified via `make compare', and the `gcc' compiler modified\n-          and used to build itself for testing fairly quickly, using\n-          the copy of the compiler kept in `gcc/stage2'.\n-\n-        -- Removing `gcc/stage2' after the build further recovers\n-          27.3MB for a total of 64.3MB, and recovers ??MB for a total\n-          of ??MB on an Alpha.\n-\n-          After doing this, the compiler can still be installed,\n-          especially if GNU `make' is used to avoid gratuitous rebuilds\n-          (or, the installation can be done by hand).\n-\n-        -- Installing `gcc' and `g77' copies 14.9MB onto the `--prefix'\n-          disk for a total of 79.2MB on an ix86, and copies ??MB onto\n-          the `--prefix' disk for a total of ??MB on an Alpha.\n-\n-     After installation, if no further modifications and builds of\n-     `gcc' or `g77' are planned, the source and build directory may be\n-     removed, leaving the total impact on a system's disk storage as\n-     that of the amount copied during installation.\n-\n-     Systems with the appropriate version of `gcc' installed don't\n-     require the complete bootstrap build.  Doing a \"straight build\"\n-     requires about as much space as does a bootstrap build followed by\n-     removing both the `gcc/stage1' and `gcc/stage2' directories.\n-\n-     Installing `gcc' and `g77' over existing versions might require\n-     less *new* disk space, but note that, unlike many products, `gcc'\n-     installs itself in a way that avoids overwriting other installed\n-     versions of itself, so that other versions may easily be invoked\n-     (via `gcc -V VERSION').\n-\n-     So, the amount of space saved as a result of having an existing\n-     version of `gcc' and `g77' already installed is not\n-     much--typically only the command drivers (`gcc', `g77', `g++', and\n-     so on, which are small) and the documentation is overwritten by\n-     the new installation.  The rest of the new installation is done\n-     without replacing existing installed versions (assuming they have\n-     different version numbers).\n-\n-`patch'\n-     Although you can do everything `patch' does yourself, by hand,\n-     without much trouble, having `patch' installed makes installation\n-     of new versions of GNU utilities such as `g77' so much easier that\n-     it is worth getting.  You can obtain `patch' the same way you\n-     obtained `gcc' and `g77'.\n-\n-     In any case, you can apply patches by hand--patch files are\n-     designed for humans to read them.\n-\n-     The version of GNU `patch' used to develop this release is 2.4.\n-\n-`make'\n-     Your system must have `make', and you will probably save yourself\n-     a lot of trouble if it is GNU `make' (sometimes referred to as\n-     `gmake').\n-\n-     The version of GNU `make' used to develop this release is 3.73.\n-\n-`cc'\n-     Your system must have a working C compiler.\n-\n-     *Note Installing GNU CC: (gcc)Installation, for more information\n-     on prerequisites for installing `gcc'.\n-\n-`bison'\n-     If you do not have `bison' installed, you can usually work around\n-     any need for it, since `g77' itself does not use it, and `gcc'\n-     normally includes all files generated by running it in its\n-     distribution.  You can obtain `bison' the same way you obtained\n-     `gcc' and `g77'.\n-\n-     The version of GNU `bison' used to develop this release is 1.25.\n-\n-     *Note Missing bison?::, for information on how to work around not\n-     having `bison'.\n-\n-`makeinfo'\n-     If you are missing `makeinfo', you can usually work around any\n-     need for it.  You can obtain `makeinfo' the same way you obtained\n-     `gcc' and `g77'.\n-\n-     The version of GNU `makeinfo' used to develop this release is\n-     1.68, from GNU `texinfo' version 3.11.\n-\n-     *Note Missing makeinfo?::, for information on getting around the\n-     lack of `makeinfo'.\n-\n-`sed'\n-     All UNIX systems have `sed', but some have a broken version that\n-     cannot handle configuring, building, or installing `gcc' or `g77'.\n-\n-     The version of GNU `sed' used to develop this release is 2.05.\n-     (Note that GNU `sed' version 3.0 was withdrawn by the FSF--if you\n-     happen to have this version installed, replace it with version\n-     2.05 immediately.  See a GNU distribution site for further\n-     explanation.)\n-\n-`root' access or equivalent\n-     To perform the complete installation procedures on a system, you\n-     need to have `root' access to that system, or equivalent access to\n-     the `--prefix' directory tree specified on the `configure' command\n-     line.\n-\n-     Portions of the procedure (such as configuring and building `g77')\n-     can be performed by any user with enough disk space and virtual\n-     memory.\n-\n-     However, these instructions are oriented towards less-experienced\n-     users who want to install `g77' on their own personal systems.\n-\n-     System administrators with more experience will want to determine\n-     for themselves how they want to modify the procedures described\n-     below to suit the needs of their installation.\n-\n-\u001f\n-File: g77.info,  Node: Problems Installing,  Next: Settings,  Prev: Prerequisites,  Up: Installation\n-\n-Problems Installing\n-===================\n-\n-   This is a list of problems (and some apparent problems which don't\n-really mean anything is wrong) that show up when configuring, building,\n-installing, or porting GNU Fortran.\n-\n-   *Note Installation Problems: (gcc)Installation Problems, for more\n-information on installation problems that can afflict either `gcc' or\n-`g77'.\n-\n-* Menu:\n-\n-* General Problems::         Problems afflicting most or all systems.\n-* Cross-compiler Problems::  Problems afflicting cross-compilation setups.\n-\n-\u001f\n-File: g77.info,  Node: General Problems,  Next: Cross-compiler Problems,  Up: Problems Installing\n-\n-General Problems\n-----------------\n-\n-   These problems can occur on most or all systems.\n-\n-* Menu:\n-\n-* GNU C Required::\t       Why even ANSI C is not enough.\n-* Patching GNU CC Necessary::  Why `gcc' must be patched first.\n-* Building GNU CC Necessary::  Why you can't build *just* Fortran.\n-* Missing strtoul::\t       If linking `f771' fails due to an\n-                                unresolved reference to `strtoul'.\n-* Object File Differences::    It's okay that `make compare' will\n-                                flag `f/zzz.o'.\n-* Cleanup Kills Stage Directories::  A minor nit for `g77' developers.\n-* Missing gperf?::             When building requires `gperf'.\n-\n-\u001f\n-File: g77.info,  Node: GNU C Required,  Next: Patching GNU CC Necessary,  Up: General Problems\n-\n-GNU C Required\n-..............\n-\n-   Compiling `g77' requires GNU C, not just ANSI C.  Fixing this\n-wouldn't be very hard (just tedious), but the code using GNU extensions\n-to the C language is expected to be rewritten for 0.6 anyway, so there\n-are no plans for an interim fix.\n-\n-   This requirement does not mean you must already have `gcc' installed\n-to build `g77'.  As long as you have a working C compiler, you can use a\n-bootstrap build to automate the process of first building `gcc' using\n-the working C compiler you have, then building `g77' and rebuilding\n-`gcc' using that just-built `gcc', and so on.\n-"}, {"sha": "81479b1aa0e82be6bccdbb5bb23159147cab632f", "filename": "gcc/f/g77.info-13", "status": "removed", "additions": 0, "deletions": 1144, "changes": 1144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-13", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-13", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-13?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2", "patch": "@@ -1,1144 +0,0 @@\n-This is Info file g77.info, produced by Makeinfo version 1.68 from the\n-input file g77.texi.\n-\n-   This file explains how to use the GNU Fortran system.\n-\n-   Published by the Free Software Foundation 59 Temple Place - Suite 330\n-Boston, MA 02111-1307 USA\n-\n-   Copyright (C) 1995-1997 Free Software Foundation, Inc.\n-\n-   Permission is granted to make and distribute verbatim copies of this\n-manual provided the copyright notice and this permission notice are\n-preserved on all copies.\n-\n-   Permission is granted to copy and distribute modified versions of\n-this manual under the conditions for verbatim copying, provided also\n-that the sections entitled \"GNU General Public License,\" \"Funding for\n-Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n-included exactly as in the original, and provided that the entire\n-resulting derived work is distributed under the terms of a permission\n-notice identical to this one.\n-\n-   Permission is granted to copy and distribute translations of this\n-manual into another language, under the above conditions for modified\n-versions, except that the sections entitled \"GNU General Public\n-License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n-`Look And Feel'\", and this permission notice, may be included in\n-translations approved by the Free Software Foundation instead of in the\n-original English.\n-\n-   Contributed by James Craig Burley (<burley@gnu.ai.mit.edu>).\n-Inspired by a first pass at translating `g77-0.5.16/f/DOC' that was\n-contributed to Craig by David Ronis (<ronis@onsager.chem.mcgill.ca>).\n-\n-INFO-DIR-SECTION Fortran Programming\n-START-INFO-DIR-ENTRY\n-* g77: (g77).               The GNU Fortran compilation system.\n-END-INFO-DIR-ENTRY\n-\n-\u001f\n-File: g77.info,  Node: Patching GNU CC Necessary,  Next: Building GNU CC Necessary,  Prev: GNU C Required,  Up: General Problems\n-\n-Patching GNU CC Necessary\n-.........................\n-\n-   `g77' currently requires application of a patch file to the gcc\n-compiler tree.  The necessary patches should be folded in to the\n-mainline gcc distribution.\n-\n-   Some combinations of versions of `g77' and `gcc' might actually\n-*require* no patches, but the patch files will be provided anyway as\n-long as there are more changes expected in subsequent releases.  These\n-patch files might contain unnecessary, but possibly helpful, patches.\n-As a result, it is possible this issue might never be resolved, except\n-by eliminating the need for the person configuring `g77' to apply a\n-patch by hand, by going to a more automated approach (such as\n-configure-time patching).\n-\n-\u001f\n-File: g77.info,  Node: Building GNU CC Necessary,  Next: Missing strtoul,  Prev: Patching GNU CC Necessary,  Up: General Problems\n-\n-Building GNU CC Necessary\n-.........................\n-\n-   It should be possible to build the runtime without building `cc1'\n-and other non-Fortran items, but, for now, an easy way to do that is\n-not yet established.\n-\n-\u001f\n-File: g77.info,  Node: Missing strtoul,  Next: Object File Differences,  Prev: Building GNU CC Necessary,  Up: General Problems\n-\n-Missing strtoul\n-...............\n-\n-   On SunOS4 systems, linking the `f771' program produces an error\n-message concerning an undefined symbol named `_strtoul'.\n-\n-   This is not a `g77' bug.  *Note Patching GNU Fortran::, for\n-information on a workaround provided by `g77'.\n-\n-   The proper fix is either to upgrade your system to one that provides\n-a complete ANSI C environment, or improve `gcc' so that it provides one\n-for all the languages and configurations it supports.\n-\n-   *Note:* In earlier versions of `g77', an automated workaround for\n-this problem was attempted.  It worked for systems without `_strtoul',\n-substituting the incomplete-yet-sufficient version supplied with `g77'\n-for those systems.  However, the automated workaround failed\n-mysteriously for systems that appeared to have conforming ANSI C\n-environments, and it was decided that, lacking resources to more fully\n-investigate the problem, it was better to not punish users of those\n-systems either by requiring them to work around the problem by hand or\n-by always substituting an incomplete `strtoul()' implementation when\n-their systems had a complete, working one.  Unfortunately, this meant\n-inconveniencing users of systems not having `strtoul()', but they're\n-using obsolete (and generally unsupported) systems anyway.\n-\n-\u001f\n-File: g77.info,  Node: Object File Differences,  Next: Cleanup Kills Stage Directories,  Prev: Missing strtoul,  Up: General Problems\n-\n-Object File Differences\n-.......................\n-\n-   A comparison of object files after building Stage 3 during a\n-bootstrap build will result in `gcc/f/zzz.o' being flagged as different\n-from the Stage 2 version.  That is because it contains a string with an\n-expansion of the `__TIME__' macro, which expands to the current time of\n-day.  It is nothing to worry about, since `gcc/f/zzz.c' doesn't contain\n-any actual code.  It does allow you to override its use of `__DATE__'\n-and `__TIME__' by defining macros for the compilation--see the source\n-code for details.\n-\n-\u001f\n-File: g77.info,  Node: Cleanup Kills Stage Directories,  Next: Missing gperf?,  Prev: Object File Differences,  Up: General Problems\n-\n-Cleanup Kills Stage Directories\n-...............................\n-\n-   It'd be helpful if `g77''s `Makefile.in' or `Make-lang.in' would\n-create the various `stageN' directories and their subdirectories, so\n-developers and expert installers wouldn't have to reconfigure after\n-cleaning up.\n-\n-\u001f\n-File: g77.info,  Node: Missing gperf?,  Prev: Cleanup Kills Stage Directories,  Up: General Problems\n-\n-Missing `gperf'?\n-................\n-\n-   If a build aborts trying to invoke `gperf', that strongly suggests\n-an improper method was used to create the `gcc' source directory, such\n-as the UNIX `cp -r' command instead of `cp -pr', since this problem\n-very likely indicates that the date-time-modified information on the\n-`gcc' source files is incorrect.\n-\n-   The proper solution is to recreate the `gcc' source directory from a\n-`gcc' distribution known to be provided by the FSF.\n-\n-   It is possible you might be able to temporarily work around the\n-problem, however, by trying these commands:\n-\n-     sh# cd gcc\n-     sh# touch c-gperf.h\n-     sh#\n-\n-   These commands update the date-time-modified information for the\n-file produced by the invocation of `gperf' in the current versions of\n-`gcc', so that `make' no longer believes it needs to update it.  This\n-file should already exist in a `gcc' distribution, but mistakes made\n-when copying the `gcc' directory can leave the modification information\n-set such that the `gperf' input files look more \"recent\" than the\n-corresponding output files.\n-\n-   If the above does not work, definitely start from scratch and avoid\n-copying the `gcc' using any method that does not reliably preserve\n-date-time-modified information, such as the UNIX `cp -r' command.\n-\n-\u001f\n-File: g77.info,  Node: Cross-compiler Problems,  Prev: General Problems,  Up: Problems Installing\n-\n-Cross-compiler Problems\n------------------------\n-\n-   `g77' has been in alpha testing since September of 1992, and in\n-public beta testing since February of 1995.  Alpha testing was done by\n-a small number of people worldwide on a fairly wide variety of\n-machines, involving self-compilation in most or all cases.  Beta\n-testing has been done primarily via self-compilation, but in more and\n-more cases, cross-compilation (and \"criss-cross compilation\", where a\n-version of a compiler is built on one machine to run on a second and\n-generate code that runs on a third) has been tried and has succeeded,\n-to varying extents.\n-\n-   Generally, `g77' can be ported to any configuration to which `gcc',\n-`f2c', and `libf2c' can be ported and made to work together, aside from\n-the known problems described in this manual.  If you want to port `g77'\n-to a particular configuration, you should first make sure `gcc' and\n-`libf2c' can be ported to that configuration before focusing on `g77',\n-because `g77' is so dependent on them.\n-\n-   Even for cases where `gcc' and `libf2c' work, you might run into\n-problems with cross-compilation on certain machines, for several\n-reasons.\n-\n-   * There is one known bug (a design bug to be fixed in 0.6) that\n-     prevents configuration of `g77' as a cross-compiler in some cases,\n-     though there are assumptions made during configuration that\n-     probably make doing non-self-hosting builds a hassle, requiring\n-     manual intervention.\n-\n-   * `gcc' might still have some trouble being configured for certain\n-     combinations of machines.  For example, it might not know how to\n-     handle floating-point constants.\n-\n-   * Improvements to the way `libf2c' is built could make building\n-     `g77' as a cross-compiler easier--for example, passing and using\n-     `$(LD)' and `$(AR)' in the appropriate ways.\n-\n-   * There are still some challenges putting together the right\n-     run-time libraries (needed by `libf2c') for a target system,\n-     depending on the systems involved in the configuration.  (This is\n-     a general problem with cross-compilation, and with `gcc' in\n-     particular.)\n-\n-\u001f\n-File: g77.info,  Node: Settings,  Next: Quick Start,  Prev: Problems Installing,  Up: Installation\n-\n-Changing Settings Before Building\n-=================================\n-\n-   Here are some internal `g77' settings that can be changed by editing\n-source files in `gcc/f/' before building.\n-\n-   This information, and perhaps even these settings, represent\n-stop-gap solutions to problems people doing various ports of `g77' have\n-encountered.  As such, none of the following information is expected to\n-be pertinent in future versions of `g77'.\n-\n-* Menu:\n-\n-* Larger File Unit Numbers::     Raising `MXUNIT'.\n-* Always Flush Output::          Synchronizing write errors.\n-* Maximum Stackable Size::       Large arrays forced off the stack.\n-* Floating-point Bit Patterns::  Possible programs building `g77'\n-                                   as a cross-compiler.\n-* Large Initialization::         Large arrays with `DATA'\n-                                   initialization.\n-* Alpha Problems Fixed::         Problems with 64-bit systems like\n-                                   Alphas now fixed?\n-\n-\u001f\n-File: g77.info,  Node: Larger File Unit Numbers,  Next: Always Flush Output,  Up: Settings\n-\n-Larger File Unit Numbers\n-------------------------\n-\n-   As distributed, whether as part of `f2c' or `g77', `libf2c' accepts\n-file unit numbers only in the range 0 through 99.  For example, a\n-statement such as `WRITE (UNIT=100)' causes a run-time crash in\n-`libf2c', because the unit number, 100, is out of range.\n-\n-   If you know that Fortran programs at your installation require the\n-use of unit numbers higher than 99, you can change the value of the\n-`MXUNIT' macro, which represents the maximum unit number, to an\n-appropriately higher value.\n-\n-   To do this, edit the file `f/runtime/libI77/fio.h' in your `g77'\n-source tree, changing the following line:\n-\n-     #define MXUNIT 100\n-\n-   Change the line so that the value of `MXUNIT' is defined to be at\n-least one *greater* than the maximum unit number used by the Fortran\n-programs on your system.\n-\n-   (For example, a program that does `WRITE (UNIT=255)' would require\n-`MXUNIT' set to at least 256 to avoid crashing.)\n-\n-   Then build or rebuild `g77' as appropriate.\n-\n-   *Note:* Changing this macro has *no* effect on other limits your\n-system might place on the number of files open at the same time.  That\n-is, the macro might allow a program to do `WRITE (UNIT=100)', but the\n-library and operating system underlying `libf2c' might disallow it if\n-many other files have already been opened (via `OPEN' or implicitly via\n-`READ', `WRITE', and so on).  Information on how to increase these\n-other limits should be found in your system's documentation.\n-\n-\u001f\n-File: g77.info,  Node: Always Flush Output,  Next: Maximum Stackable Size,  Prev: Larger File Unit Numbers,  Up: Settings\n-\n-Always Flush Output\n--------------------\n-\n-   Some Fortran programs require output (writes) to be flushed to the\n-operating system (under UNIX, via the `fflush()' library call) so that\n-errors, such as disk full, are immediately flagged via the relevant\n-`ERR=' and `IOSTAT=' mechanism, instead of such errors being flagged\n-later as subsequent writes occur, forcing the previously written data\n-to disk, or when the file is closed.\n-\n-   Essentially, the difference can be viewed as synchronous error\n-reporting (immediate flagging of errors during writes) versus\n-asynchronous, or, more precisely, buffered error reporting (detection\n-of errors might be delayed).\n-\n-   `libf2c' supports flagging write errors immediately when it is built\n-with the `ALWAYS_FLUSH' macro defined.  This results in a `libf2c' that\n-runs slower, sometimes quite a bit slower, under certain\n-circumstances--for example, accessing files via the networked file\n-system NFS--but the effect can be more reliable, robust file I/O.\n-\n-   If you know that Fortran programs requiring this level of precision\n-of error reporting are to be compiled using the version of `g77' you\n-are building, you might wish to modify the `g77' source tree so that\n-the version of `libf2c' is built with the `ALWAYS_FLUSH' macro defined,\n-enabling this behavior.\n-\n-   To do this, find this line in `f/runtime/configure.in' in your `g77'\n-source tree:\n-\n-     dnl AC_DEFINE(ALWAYS_FLUSH)\n-\n-   Remove the leading `dnl ', so the line begins with `AC_DEFINE(', and\n-run `autoconf' in that file's directory.  (Or, if you don't have\n-`autoconf', you can modify `f2c.h.in' in the same directory to include\n-the line `#define ALWAYS_FLUSH' after `#define F2C_INCLUDE'.)\n-\n-   Then build or rebuild `g77' as appropriate.\n-\n-\u001f\n-File: g77.info,  Node: Maximum Stackable Size,  Next: Floating-point Bit Patterns,  Prev: Always Flush Output,  Up: Settings\n-\n-Maximum Stackable Size\n-----------------------\n-\n-   `g77', on most machines, puts many variables and arrays on the stack\n-where possible, and can be configured (by changing\n-`FFECOM_sizeMAXSTACKITEM' in `gcc/f/com.c') to force smaller-sized\n-entities into static storage (saving on stack space) or permit\n-larger-sized entities to be put on the stack (which can improve\n-run-time performance, as it presents more opportunities for the GBE to\n-optimize the generated code).\n-\n-   *Note:* Putting more variables and arrays on the stack might cause\n-problems due to system-dependent limits on stack size.  Also, the value\n-of `FFECOM_sizeMAXSTACKITEM' has no effect on automatic variables and\n-arrays.  *Note But-bugs::, for more information.\n-\n-\u001f\n-File: g77.info,  Node: Floating-point Bit Patterns,  Next: Large Initialization,  Prev: Maximum Stackable Size,  Up: Settings\n-\n-Floating-point Bit Patterns\n----------------------------\n-\n-   The `g77' build will crash if an attempt is made to build it as a\n-cross-compiler for a target when `g77' cannot reliably determine the\n-bit pattern of floating-point constants for the target.  Planned\n-improvements for g77-0.6 will give it the capabilities it needs to not\n-have to crash the build but rather generate correct code for the target.\n-(Currently, `g77' would generate bad code under such circumstances if\n-it didn't crash during the build, e.g. when compiling a source file\n-that does something like `EQUIVALENCE (I,R)' and `DATA R/9.43578/'.)\n-\n-\u001f\n-File: g77.info,  Node: Large Initialization,  Next: Alpha Problems Fixed,  Prev: Floating-point Bit Patterns,  Up: Settings\n-\n-Initialization of Large Aggregate Areas\n----------------------------------------\n-\n-   A warning message is issued when `g77' sees code that provides\n-initial values (e.g. via `DATA') to an aggregate area (`COMMON' or\n-`EQUIVALENCE', or even a large enough array or `CHARACTER' variable)\n-that is large enough to increase `g77''s compile time by roughly a\n-factor of 10.\n-\n-   This size currently is quite small, since `g77' currently has a\n-known bug requiring too much memory and time to handle such cases.  In\n-`gcc/f/data.c', the macro `FFEDATA_sizeTOO_BIG_INIT_' is defined to the\n-minimum size for the warning to appear.  The size is specified in\n-storage units, which can be bytes, words, or whatever, on a\n-case-by-case basis.\n-\n-   After changing this macro definition, you must (of course) rebuild\n-and reinstall `g77' for the change to take effect.\n-\n-   Note that, as of version 0.5.18, improvements have reduced the scope\n-of the problem for *sparse* initialization of large arrays, especially\n-those with large, contiguous uninitialized areas.  However, the warning\n-is issued at a point prior to when `g77' knows whether the\n-initialization is sparse, and delaying the warning could mean it is\n-produced too late to be helpful.\n-\n-   Therefore, the macro definition should not be adjusted to reflect\n-sparse cases.  Instead, adjust it to generate the warning when densely\n-initialized arrays begin to cause responses noticeably slower than\n-linear performance would suggest.\n-\n-\u001f\n-File: g77.info,  Node: Alpha Problems Fixed,  Prev: Large Initialization,  Up: Settings\n-\n-Alpha Problems Fixed\n---------------------\n-\n-   `g77' used to warn when it was used to compile Fortran code for a\n-target configuration that is not basically a 32-bit machine (such as an\n-Alpha, which is a 64-bit machine, especially if it has a 64-bit\n-operating system running on it).  That was because `g77' was known to\n-not work properly on such configurations.\n-\n-   As of version 0.5.20, `g77' is believed to work well enough on such\n-systems.  So, the warning is no longer needed or provided.\n-\n-   However, support for 64-bit systems, especially in areas such as\n-cross-compilation and handling of intrinsics, is still incomplete.  The\n-symptoms are believed to be compile-time diagnostics rather than the\n-generation of bad code.  It is hoped that version 0.6 will completely\n-support 64-bit systems.\n-\n-\u001f\n-File: g77.info,  Node: Quick Start,  Next: Complete Installation,  Prev: Settings,  Up: Installation\n-\n-Quick Start\n-===========\n-\n-   This procedure configures, builds, and installs `g77' \"out of the\n-box\" and works on most UNIX systems.  Each command is identified by a\n-unique number, used in the explanatory text that follows.  For the most\n-part, the output of each command is not shown, though indications of\n-the types of responses are given in a few cases.\n-\n-   To perform this procedure, the installer must be logged in as user\n-`root'.  Much of it can be done while not logged in as `root', and\n-users experienced with UNIX administration should be able to modify the\n-procedure properly to do so.\n-\n-   Following traditional UNIX conventions, it is assumed that the\n-source trees for `g77' and `gcc' will be placed in `/usr/src'.  It also\n-is assumed that the source distributions themselves already reside in\n-`/usr/FSF', a naming convention used by the author of `g77' on his own\n-system:\n-\n-     /usr/FSF/gcc-2.7.2.3.tar.gz\n-     /usr/FSF/g77-0.5.21.tar.gz\n-\n-   Users of the following systems should not blindly follow these\n-quick-start instructions, because of problems their systems have coping\n-with straightforward installation of `g77':\n-\n-   * SunOS4\n-\n-   Instead, see *Note Complete Installation::, for detailed information\n-on how to configure, build, and install `g77' for your particular\n-system.  Also, see *Note Known Causes of Trouble with GNU Fortran:\n-Trouble, for information on bugs and other problems known to afflict the\n-installation process, and how to report newly discovered ones.\n-\n-   If your system is *not* on the above list, and *is* a UNIX system or\n-one of its variants, you should be able to follow the instructions\n-below.  If you vary *any* of the steps below, you might run into\n-trouble, including possibly breaking existing programs for other users\n-of your system.  Before doing so, it is wise to review the explanations\n-of some of the steps.  These explanations follow this list of steps.\n-\n-     sh[ 1]# cd /usr/src\n-     \n-     sh[ 2]# gunzip -c < /usr/FSF/gcc-2.7.2.3.tar.gz | tar xf -\n-     [Might say \"Broken pipe\"...that is normal on some systems.]\n-     \n-     sh[ 3]# gunzip -c < /usr/FSF/g77-0.5.21.tar.gz | tar xf -\n-     [\"Broken pipe\" again possible.]\n-     \n-     sh[ 4]# ln -s gcc-2.7.2.3 gcc\n-     \n-     sh[ 5]# ln -s g77-0.5.21 g77\n-     \n-     sh[ 6]# mv -i g77/* gcc\n-     [No questions should be asked by mv here; or, you made a mistake.]\n-     \n-     sh[ 7]# patch -p1 -V t -d gcc < gcc/f/gbe/2.7.2.3.diff\n-     [Unless patch complains about rejected patches, this step worked.]\n-     \n-     sh[ 8]# cd gcc\n-     sh[ 9]# touch f77-install-ok\n-     [Do not do the above if your system already has an f77\n-     command, unless you've checked that overwriting it\n-     is okay.]\n-     \n-     sh[10]# touch f2c-install-ok\n-     [Do not do the above if your system already has an f2c\n-     command, unless you've checked that overwriting it\n-     is okay.  Else, touch f2c-exists-ok.]\n-     \n-     sh[11]# ./configure --prefix=/usr\n-     [Do not do the above if gcc is not installed in /usr/bin.\n-     You might need a different --prefix=..., as\n-     described below.]\n-     \n-     sh[12]# make bootstrap\n-     [This takes a long time, and is where most problems occur.]\n-     \n-     sh[13]# make compare\n-     [This verifies that the compiler is `sane'.  Only\n-     the file `f/zzz.o' (aka `tmp-foo1' and `tmp-foo2')\n-     should be in the list of object files this command\n-     prints as having different contents.  If other files\n-     are printed, you have likely found a g77 bug.]\n-     \n-     sh[14]# rm -fr stage1\n-     \n-     sh[15]# make -k install\n-     [The actual installation.]\n-     \n-     sh[16]# g77 -v\n-     [Verify that g77 is installed, obtain version info.]\n-     \n-     sh[17]#\n-\n-   *Note Updating Your Info Directory: Updating Documentation, for\n-information on how to update your system's top-level `info' directory\n-to contain a reference to this manual, so that users of `g77' can\n-easily find documentation instead of having to ask you for it.\n-\n-   Elaborations of many of the above steps follows:\n-\n-Step 1: `cd /usr/src'\n-     You can build `g77' pretty much anyplace.  By convention, this\n-     manual assumes `/usr/src'.  It might be helpful if other users on\n-     your system knew where to look for the source code for the\n-     installed version of `g77' and `gcc' in any case.\n-\n-Step 3: `gunzip -d < /usr/FSF/g77-0.5.21.tar.gz | tar xf -'\n-     It is not always necessary to obtain the latest version of `g77'\n-     as a complete `.tar.gz' file if you have a complete, earlier\n-     distribution of `g77'.  If appropriate, you can unpack that earlier\n-     version of `g77', and then apply the appropriate patches to\n-     achieve the same result--a source tree containing version 0.5.21\n-     of `g77'.\n-\n-Step 4: `ln -s gcc-2.7.2.3 gcc'\n-\n-Step 5: `ln -s g77-0.5.21 g77'\n-     These commands mainly help reduce typing, and help reduce visual\n-     clutter in examples in this manual showing what to type to install\n-     `g77'.\n-\n-     *Note Unpacking::, for information on using distributions of `g77'\n-     made by organizations other than the FSF.\n-\n-Step 6: `mv -i g77/* gcc'\n-     After doing this, you can, if you like, type `rm g77' and `rmdir\n-     g77-0.5.21' to remove the empty directory and the symbol link to\n-     it.  But, it might be helpful to leave them around as quick\n-     reminders of which version(s) of `g77' are installed on your\n-     system.\n-\n-     *Note Unpacking::, for information on the contents of the `g77'\n-     directory (as merged into the `gcc' directory).\n-\n-Step 7: `patch -p1 ...'\n-     This can produce a wide variety of printed output, from `Hmm, I\n-     can't seem to find a patch in there anywhere...'  to long lists of\n-     messages indicated that patches are being found, applied\n-     successfully, and so on.\n-\n-     If messages about \"fuzz\", \"offset\", or especially \"reject files\"\n-     are printed, it might mean you applied the wrong patch file.  If\n-     you believe this is the case, it is best to restart the sequence\n-     after deleting (or at least renaming to unused names) the\n-     top-level directories for `g77' and `gcc' and their symbolic links.\n-\n-     After this command finishes, the `gcc' directory might have old\n-     versions of several files as saved by `patch'.  To remove these,\n-     after `cd gcc', type `rm -i *.~*~'.\n-\n-     *Note Merging Distributions::, for more information.\n-\n-Step 9: `touch f77-install-ok'\n-     Don't do this if you don't want to overwrite an existing version\n-     of `f77' (such as a native compiler, or a script that invokes\n-     `f2c').  Otherwise, installation will overwrite the `f77' command\n-     and the `f77' man pages with copies of the corresponding `g77'\n-     material.\n-\n-     *Note Installing `f77': Installing f77, for more information.\n-\n-Step 10: `touch f2c-install-ok'\n-     Don't do this if you don't want to overwrite an existing\n-     installation of `libf2c' (though, chances are, you do).  Instead,\n-     `touch f2c-exists-ok' to allow the installation to continue\n-     without any error messages about `/usr/lib/libf2c.a' already\n-     existing.\n-\n-     *Note Installing `f2c': Installing f2c, for more information.\n-\n-Step 11: `./configure --prefix=/usr'\n-     This is where you specify that the `g77' executable is to be\n-     installed in `/usr/bin/', the `libf2c.a' library is to be\n-     installed in `/usr/lib/', and so on.\n-\n-     You should ensure that any existing installation of the `gcc'\n-     executable is in `/usr/bin/'.  Otherwise, installing `g77' so that\n-     it does not fully replace the existing installation of `gcc' is\n-     likely to result in the inability to compile Fortran programs.\n-\n-     *Note Where in the World Does Fortran (and GNU CC) Go?: Where to\n-     Install, for more information on determining where to install\n-     `g77'.  *Note Configuring gcc::, for more information on the\n-     configuration process triggered by invoking the `./configure'\n-     script.\n-\n-Step 12: `make bootstrap'\n-     *Note Installing GNU CC: (gcc)Installation, for information on the\n-     kinds of diagnostics you should expect during this procedure.\n-\n-     *Note Building gcc::, for complete `g77'-specific information on\n-     this step.\n-\n-Step 13: `make compare'\n-     *Note Where to Port Bugs: Bug Lists, for information on where to\n-     report that you observed more than `f/zzz.o' having different\n-     contents during this phase.\n-\n-     *Note How to Report Bugs: Bug Reporting, for information on *how*\n-     to report bugs like this.\n-\n-Step 14: `rm -fr stage1'\n-     You don't need to do this, but it frees up disk space.\n-\n-Step 15: `make -k install'\n-     If this doesn't seem to work, try:\n-\n-          make -k install install-libf77 install-f2c-all\n-\n-     *Note Installation of Binaries::, for more information.\n-\n-     *Note Updating Your Info Directory: Updating Documentation, for\n-     information on entering this manual into your system's list of\n-     texinfo manuals.\n-\n-Step 16: `g77 -v'\n-     If this command prints approximately 25 lines of output, including\n-     the GNU Fortran Front End version number (which should be the same\n-     as the version number for the version of `g77' you just built and\n-     installed) and the version numbers for the three parts of the\n-     `libf2c' library (`libF77', `libI77', `libU77'), and those version\n-     numbers are all in agreement, then there is a high likelihood that\n-     the installation has been successfully completed.\n-\n-     You might consider doing further testing.  For example, log in as\n-     a non-privileged user, then create a small Fortran program, such\n-     as:\n-\n-                PROGRAM SMTEST\n-                DO 10 I=1, 10\n-                   PRINT *, 'Hello World #', I\n-          10    CONTINUE\n-                END\n-\n-     Compile, link, and run the above program, and, assuming you named\n-     the source file `smtest.f', the session should look like this:\n-\n-          sh# g77 -o smtest smtest.f\n-          sh# ./smtest\n-           Hello World # 1\n-           Hello World # 2\n-           Hello World # 3\n-           Hello World # 4\n-           Hello World # 5\n-           Hello World # 6\n-           Hello World # 7\n-           Hello World # 8\n-           Hello World # 9\n-           Hello World # 10\n-          sh#\n-\n-     After proper installation, you don't need to keep your gcc and g77\n-     source and build directories around anymore.  Removing them can\n-     free up a lot of disk space.\n-\n-\u001f\n-File: g77.info,  Node: Complete Installation,  Next: Distributing Binaries,  Prev: Quick Start,  Up: Installation\n-\n-Complete Installation\n-=====================\n-\n-   Here is the complete `g77'-specific information on how to configure,\n-build, and install `g77'.\n-\n-* Menu:\n-\n-* Unpacking::\n-* Merging Distributions::\n-* f77: Installing f77.\n-* f2c: Installing f2c.\n-* Patching GNU Fortran::\n-* Where to Install::\n-* Configuring gcc::\n-* Building gcc::\n-* Pre-installation Checks::\n-* Installation of Binaries::\n-* Updating Documentation::\n-* bison: Missing bison?.\n-* makeinfo: Missing makeinfo?.\n-\n-\u001f\n-File: g77.info,  Node: Unpacking,  Next: Merging Distributions,  Up: Complete Installation\n-\n-Unpacking\n----------\n-\n-   The `gcc' source distribution is a stand-alone distribution.  It is\n-designed to be unpacked (producing the `gcc' source tree) and built as\n-is, assuming certain prerequisites are met (including the availability\n-of compatible UNIX programs such as `make', `cc', and so on).\n-\n-   However, before building `gcc', you will want to unpack and merge\n-the `g77' distribution in with it, so that you build a Fortran-capable\n-version of `gcc', which includes the `g77' command, the necessary\n-run-time libraries, and this manual.\n-\n-   Unlike `gcc', the `g77' source distribution is *not* a stand-alone\n-distribution.  It is designed to be unpacked and, afterwards,\n-immediately merged into an applicable `gcc' source tree.  That is, the\n-`g77' distribution *augments* a `gcc' distribution--without `gcc',\n-generally only the documentation is immediately usable.\n-\n-   A sequence of commands typically used to unpack `gcc' and `g77' is:\n-\n-     sh# cd /usr/src\n-     sh# gunzip -c /usr/FSF/gcc-2.7.2.3.tar.gz | tar xf -\n-     sh# gunzip -c /usr/FSF/g77-0.5.21.tar.gz | tar xf -\n-     sh# ln -s gcc-2.7.2.3 gcc\n-     sh# ln -s g77-0.5.21 g77\n-     sh# mv -i g77/* gcc\n-\n-   *Notes:* The commands beginning with `gunzip...' might print `Broken\n-pipe...' as they complete.  That is nothing to worry about, unless you\n-actually *hear* a pipe breaking.  The `ln' commands are helpful in\n-reducing typing and clutter in installation examples in this manual.\n-Hereafter, the top level of `gcc' source tree is referred to as `gcc',\n-and the top level of just the `g77' source tree (prior to issuing the\n-`mv' command, above) is referred to as `g77'.\n-\n-   There are three top-level names in a `g77' distribution:\n-\n-     g77/COPYING.g77\n-     g77/README.g77\n-     g77/f\n-\n-   All three entries should be moved (or copied) into a `gcc' source\n-tree (typically named after its version number and as it appears in the\n-FSF distributions--e.g. `gcc-2.7.2.3').\n-\n-   `g77/f' is the subdirectory containing all of the code,\n-documentation, and other information that is specific to `g77'.  The\n-other two files exist to provide information on `g77' to someone\n-encountering a `gcc' source tree with `g77' already present, who has\n-not yet read these installation instructions and thus needs help\n-understanding that the source tree they are looking at does not come\n-from a single FSF distribution.  They also help people encountering an\n-unmerged `g77' source tree for the first time.\n-\n-   *Note:* Please use *only* `gcc' and `g77' source trees as\n-distributed by the FSF.  Use of modified versions, such as the\n-Pentium-specific-optimization port of `gcc', is likely to result in\n-problems that appear to be in the `g77' code but, in fact, are not.  Do\n-not use such modified versions unless you understand all the\n-differences between them and the versions the FSF distributes--in which\n-case you should be able to modify the `g77' (or `gcc') source trees\n-appropriately so `g77' and `gcc' can coexist as they do in the stock\n-FSF distributions.\n-\n-\u001f\n-File: g77.info,  Node: Merging Distributions,  Next: Installing f77,  Prev: Unpacking,  Up: Complete Installation\n-\n-Merging Distributions\n----------------------\n-\n-   After merging the `g77' source tree into the `gcc' source tree, the\n-final merge step is done by applying the pertinent patches the `g77'\n-distribution provides for the `gcc' source tree.\n-\n-   Read the file `gcc/f/gbe/README', and apply the appropriate patch\n-file for the version of the GNU CC compiler you have, if that exists.\n-If the directory exists but the appropriate file does not exist, you\n-are using either an old, unsupported version, or a release one that is\n-newer than the newest `gcc' version supported by the version of `g77'\n-you have.\n-\n-   As of version 0.5.18, `g77' modifies the version number of `gcc' via\n-the pertinent patches.  This is done because the resulting version of\n-`gcc' is deemed sufficiently different from the vanilla distribution to\n-make it worthwhile to present, to the user, information signaling the\n-fact that there are some differences.\n-\n-   GNU version numbers make it easy to figure out whether a particular\n-version of a distribution is newer or older than some other version of\n-that distribution.  The format is, generally, MAJOR.MINOR.PATCH, with\n-each field being a decimal number.  (You can safely ignore leading\n-zeros; for example, 1.5.3 is the same as 1.5.03.)  The MAJOR field only\n-increases with time.  The other two fields are reset to 0 when the\n-field to their left is incremented; otherwise, they, too, only increase\n-with time.  So, version 2.6.2 is newer than version 2.5.8, and version\n-3.0 is newer than both.  (Trailing `.0' fields often are omitted in\n-announcements and in names for distributions and the directories they\n-create.)\n-\n-   If your version of `gcc' is older than the oldest version supported\n-by `g77' (as casually determined by listing the contents of\n-`gcc/f/gbe/'), you should obtain a newer, supported version of `gcc'.\n-(You could instead obtain an older version of `g77', or try and get\n-your `g77' to work with the old `gcc', but neither approach is\n-recommended, and you shouldn't bother reporting any bugs you find if you\n-take either approach, because they're probably already fixed in the\n-newer versions you're not using.)\n-\n-   If your version of `gcc' is newer than the newest version supported\n-by `g77', it is possible that your `g77' will work with it anyway.  If\n-the version number for `gcc' differs only in the PATCH field, you might\n-as well try applying the `g77' patch that is for the newest version of\n-`gcc' having the same MAJOR and MINOR fields, as this is likely to work.\n-\n-   So, for example, if a particular version of `g77' has support for\n-`gcc' versions 2.7.0 and 2.7.1, it is likely that `gcc-2.7.2' would\n-work well with `g77' by using the `2.7.1.diff' patch file provided with\n-`g77' (aside from some offsets reported by `patch', which usually are\n-harmless).\n-\n-   However, `gcc-2.8.0' would almost certainly not work with that\n-version of `g77' no matter which patch file was used, so a new version\n-of `g77' would be needed (and you should wait for it rather than\n-bothering the maintainers--*note User-Visible Changes: Changes.).\n-\n-   This complexity is the result of `gcc' and `g77' being separate\n-distributions.  By keeping them separate, each product is able to be\n-independently improved and distributed to its user base more frequently.\n-\n-   However, `g77' often requires changes to contemporary versions of\n-`gcc'.  Also, the GBE interface defined by `gcc' typically undergoes\n-some incompatible changes at least every time the MINOR field of the\n-version number is incremented, and such changes require corresponding\n-changes to the `g77' front end (FFE).\n-\n-   It is hoped that the GBE interface, and the `gcc' and `g77' products\n-in general, will stabilize sufficiently for the need for hand-patching\n-to disappear.\n-\n-   Invoking `patch' as described in `gcc/f/gbe/README' can produce a\n-wide variety of printed output, from `Hmm, I can't seem to find a patch\n-in there anywhere...'  to long lists of messages indicated that patches\n-are being found, applied successfully, and so on.\n-\n-   If messages about \"fuzz\", \"offset\", or especially \"reject files\" are\n-printed, it might mean you applied the wrong patch file.  If you\n-believe this is the case, it is best to restart the sequence after\n-deleting (or at least renaming to unused names) the top-level\n-directories for `g77' and `gcc' and their symbolic links.  That is\n-because `patch' might have partially patched some `gcc' source files,\n-so reapplying the correct patch file might result in the correct\n-patches being applied incorrectly (due to the way `patch' necessarily\n-works).\n-\n-   After `patch' finishes, the `gcc' directory might have old versions\n-of several files as saved by `patch'.  To remove these, after `cd gcc',\n-type `rm -i *.~*~'.\n-\n-   *Note:* `g77''s configuration file `gcc/f/config-lang.in' ensures\n-that the source code for the version of `gcc' being configured has at\n-least one indication of being patched as required specifically by `g77'.\n-This configuration-time checking should catch failure to apply the\n-correct patch and, if so caught, should abort the configuration with an\n-explanation.  *Please* do not try to disable the check, otherwise `g77'\n-might well appear to build and install correctly, and even appear to\n-compile correctly, but could easily produce broken code.\n-\n-   `diff -rcp2N' is used to create the patch files in `gcc/f/gbe/'.\n-\n-\u001f\n-File: g77.info,  Node: Installing f77,  Next: Installing f2c,  Prev: Merging Distributions,  Up: Complete Installation\n-\n-Installing `f77'\n-----------------\n-\n-   You should decide whether you want installation of `g77' to also\n-install an `f77' command.  On systems with a native `f77', this is not\n-normally desired, so `g77' does not do this by default.\n-\n-   If you want `f77' installed, create the file `f77-install-ok' (e.g.\n-via the UNIX command `touch f77-install-ok') in the source or build\n-top-level directory (the same directory in which the `g77' `f'\n-directory resides, not the `f' directory itself), or edit\n-`gcc/f/Make-lang.in' and change the definition of the\n-`F77_INSTALL_FLAG' macro appropriately.\n-\n-   Usually, this means that, after typing `cd gcc', you would type\n-`touch f77-install-ok'.\n-\n-   When you enable installation of `f77', either a link to or a direct\n-copy of the `g77' command is made.  Similarly, `f77.1' is installed as\n-a man page.\n-\n-   (The `uninstall' target in the `gcc/Makefile' also tests this macro\n-and file, when invoked, to determine whether to delete the installed\n-copies of `f77' and `f77.1'.)\n-\n-   *Note:* No attempt is yet made to install a program (like a shell\n-script) that provides compatibility with any other `f77' programs.\n-Only the most rudimentary invocations of `f77' will work the same way\n-with `g77'.\n-\n-\u001f\n-File: g77.info,  Node: Installing f2c,  Next: Patching GNU Fortran,  Prev: Installing f77,  Up: Complete Installation\n-\n-Installing `f2c'\n-----------------\n-\n-   Currently, `g77' does not include `f2c' itself in its distribution.\n-However, it does include a modified version of the `libf2c'.  This\n-version is normally compatible with `f2c', but has been modified to\n-meet the needs of `g77' in ways that might possibly be incompatible\n-with some versions or configurations of `f2c'.\n-\n-   Decide how installation of `g77' should affect any existing\n-installation of `f2c' on your system.\n-\n-   If you do not have `f2c' on your system (e.g. no `/usr/bin/f2c', no\n-`/usr/include/f2c.h', and no `/usr/lib/libf2c.a', `/usr/lib/libF77.a',\n-or `/usr/lib/libI77.a'), you don't need to be concerned with this item.\n-\n-   If you do have `f2c' on your system, you need to decide how users of\n-`f2c' will be affected by your installing `g77'.  Since `g77' is\n-currently designed to be object-code-compatible with `f2c' (with very\n-few, clear exceptions), users of `f2c' might want to combine\n-`f2c'-compiled object files with `g77'-compiled object files in a\n-single executable.\n-\n-   To do this, users of `f2c' should use the same copies of `f2c.h' and\n-`libf2c.a' that `g77' uses (and that get built as part of `g77').\n-\n-   If you do nothing here, the `g77' installation process will not\n-overwrite the `include/f2c.h' and `lib/libf2c.a' files with its own\n-versions, and in fact will not even install `libf2c.a' for use with the\n-newly installed versions of `gcc' and `g77' if it sees that\n-`lib/libf2c.a' exists--instead, it will print an explanatory message\n-and skip this part of the installation.\n-\n-   To install `g77''s versions of `f2c.h' and `libf2c.a' in the\n-appropriate places, create the file `f2c-install-ok' (e.g. via the UNIX\n-command `touch f2c-install-ok') in the source or build top-level\n-directory (the same directory in which the `g77' `f' directory resides,\n-not the `f' directory itself), or edit `gcc/f/Make-lang.in' and change\n-the definition of the `F2C_INSTALL_FLAG' macro appropriately.\n-\n-   Usually, this means that, after typing `cd gcc', you would type\n-`touch f2c-install-ok'.\n-\n-   Make sure that when you enable the overwriting of `f2c.h' and\n-`libf2c.a' as used by `f2c', you have a recent and properly configured\n-version of `bin/f2c' so that it generates code that is compatible with\n-`g77'.\n-\n-   If you don't want installation of `g77' to overwrite `f2c''s existing\n-installation, but you do want `g77' installation to proceed with\n-installation of its own versions of `f2c.h' and `libf2c.a' in places\n-where `g77' will pick them up (even when linking `f2c'-compiled object\n-files--which might lead to incompatibilities), create the file\n-`f2c-exists-ok' (e.g. via the UNIX command `touch f2c-exists-ok') in\n-the source or build top-level directory, or edit `gcc/f/Make-lang.in'\n-and change the definition of the `F2CLIBOK' macro appropriately.\n-\n-\u001f\n-File: g77.info,  Node: Patching GNU Fortran,  Next: Where to Install,  Prev: Installing f2c,  Up: Complete Installation\n-\n-Patching GNU Fortran\n---------------------\n-\n-   If you're using a SunOS4 system, you'll need to make the following\n-change to `gcc/f/proj.h': edit the line reading\n-\n-     #define FFEPROJ_STRTOUL 1  ...\n-\n-by replacing the `1' with `0'.  Or, you can avoid editing the source by\n-adding\n-     CFLAGS='-DFFEPROJ_STRTOUL=0 -g -O'\n-   to the command line for `make' when you invoke it.  (`-g' is the\n-default for `CFLAGS'.)\n-\n-   This causes a minimal version of `strtoul()' provided as part of the\n-`g77' distribution to be compiled and linked into whatever `g77'\n-programs need it, since some systems (like SunOS4 with only the bundled\n-compiler and its runtime) do not provide this function in their system\n-libraries.\n-\n-   Similarly, a minimal version of `bsearch()' is available and can be\n-enabled by editing a line similar to the one for `strtoul()' above in\n-`gcc/f/proj.h', if your system libraries lack `bsearch()'.  The method\n-of overriding `X_CFLAGS' may also be used.\n-\n-   These are not problems with `g77', which requires an ANSI C\n-environment.  You should upgrade your system to one that provides a\n-full ANSI C environment, or encourage the maintainers of `gcc' to\n-provide one to all `gcc'-based compilers in future `gcc' distributions.\n-\n-   *Note Problems Installing::, for more information on why `strtoul()'\n-comes up missing and on approaches to dealing with this problem that\n-have already been tried.\n-\n-\u001f\n-File: g77.info,  Node: Where to Install,  Next: Configuring gcc,  Prev: Patching GNU Fortran,  Up: Complete Installation\n-\n-Where in the World Does Fortran (and GNU CC) Go?\n-------------------------------------------------\n-\n-   Before configuring, you should make sure you know where you want the\n-`g77' and `gcc' binaries to be installed after they're built, because\n-this information is given to the configuration tool and used during the\n-build itself.\n-\n-   A `g77' installation necessarily requires installation of a\n-`g77'-aware version of `gcc', so that the `gcc' command recognizes\n-Fortran source files and knows how to compile them.\n-\n-   For this to work, the version of `gcc' that you will be building as\n-part of `g77' *must* be installed as the \"active\" version of `gcc' on\n-the system.\n-\n-   Sometimes people make the mistake of installing `gcc' as\n-`/usr/local/bin/gcc', leaving an older, non-Fortran-aware version in\n-`/usr/bin/gcc'.  (Or, the opposite happens.)  This can result in `g77'\n-being unable to compile Fortran source files, because when it calls on\n-`gcc' to do the actual compilation, `gcc' complains that it does not\n-recognize the language, or the file name suffix.\n-\n-   So, determine whether `gcc' already is installed on your system,\n-and, if so, *where* it is installed, and prepare to configure the new\n-version of `gcc' you'll be building so that it installs over the\n-existing version of `gcc'.\n-\n-   You might want to back up your existing copy of `bin/gcc', and the\n-entire `lib/' directory, before you perform the actual installation (as\n-described in this manual).\n-\n-   Existing `gcc' installations typically are found in `/usr' or\n-`/usr/local'.  If you aren't certain where the currently installed\n-version of `gcc' and its related programs reside, look at the output of\n-this command:\n-\n-     gcc -v -o /tmp/delete-me -xc /dev/null -xnone\n-\n-   All sorts of interesting information on the locations of various\n-`gcc'-related programs and data files should be visible in the output\n-of the above command.  (The output also is likely to include a\n-diagnostic from the linker, since there's no `main_()' function.)\n-However, you do have to sift through it yourself; `gcc' currently\n-provides no easy way to ask it where it is installed and where it looks\n-for the various programs and data files it calls on to do its work.\n-\n-   Just *building* `g77' should not overwrite any installed\n-programs--but, usually, after you build `g77', you will want to install\n-it, so backing up anything it might overwrite is a good idea.  (This is\n-true for any package, not just `g77', though in this case it is\n-intentional that `g77' overwrites `gcc' if it is already installed--it\n-is unusual that the installation process for one distribution\n-intentionally overwrites a program or file installed by another\n-distribution.)\n-\n-   Another reason to back up the existing version first, or make sure\n-you can restore it easily, is that it might be an older version on\n-which other users have come to depend for certain behaviors.  However,\n-even the new version of `gcc' you install will offer users the ability\n-to specify an older version of the actual compilation programs if\n-desired, and these older versions need not include any `g77' components.\n-*Note Specifying Target Machine and Compiler Version: (gcc)Target\n-Options, for information on the `-V' option of `gcc'.\n-\n-\u001f\n-File: g77.info,  Node: Configuring gcc,  Next: Building gcc,  Prev: Where to Install,  Up: Complete Installation\n-\n-Configuring GNU CC\n-------------------\n-\n-   `g77' is configured automatically when you configure `gcc'.  There\n-are two parts of `g77' that are configured in two different\n-ways--`g77', which \"camps on\" to the `gcc' configuration mechanism, and\n-`libf2c', which uses a variation of the GNU `autoconf' configuration\n-system.\n-\n-   Generally, you shouldn't have to be concerned with either `g77' or\n-`libf2c' configuration, unless you're configuring `g77' as a\n-cross-compiler.  In this case, the `libf2c' configuration, and possibly\n-the `g77' and `gcc' configurations as well, might need special\n-attention.  (This also might be the case if you're porting `gcc' to a\n-whole new system--even if it is just a new operating system on an\n-existing, supported CPU.)\n-\n-   To configure the system, see *Note Installing GNU CC:\n-(gcc)Installation, following the instructions for running `./configure'.\n-Pay special attention to the `--prefix=' option, which you almost\n-certainly will need to specify.\n-\n-   (Note that `gcc' installation information is provided as a straight\n-text file in `gcc/INSTALL'.)\n-\n-   The information printed by the invocation of `./configure' should\n-show that the `f' directory (the Fortran language) has been configured.\n-If it does not, there is a problem.\n-\n-   *Note:* Configuring with the `--srcdir' argument is known to work\n-with GNU `make', but it is not known to work with other variants of\n-`make'.  Irix5.2 and SunOS4.1 versions of `make' definitely won't work\n-outside the source directory at present.  `g77''s portion of the\n-`configure' script issues a warning message about this when you\n-configure for building binaries outside the source directory.\n-\n-\u001f\n-File: g77.info,  Node: Building gcc,  Next: Pre-installation Checks,  Prev: Configuring gcc,  Up: Complete Installation\n-\n-Building GNU CC\n----------------\n-\n-   Building `g77' requires building enough of `gcc' that these\n-instructions assume you're going to build all of `gcc', including\n-`g++', `protoize', and so on.  You can save a little time and disk\n-space by changes the `LANGUAGES' macro definition in `gcc/Makefile.in'\n-or `gcc/Makefile', but if you do that, you're on your own.  One change\n-is almost *certainly* going to cause failures: removing `c' or `f77'\n-from the definition of the `LANGUAGES' macro.\n-\n-   After configuring `gcc', which configures `g77' and `libf2c'\n-automatically, you're ready to start the actual build by invoking\n-`make'.\n-\n-   *Note:* You *must* have run `./configure' before you run `make',\n-even if you're using an already existing `gcc' development directory,\n-because `./configure' does the work to recognize that you've added\n-`g77' to the configuration.\n-\n-   There are two general approaches to building GNU CC from scratch:\n-\n-\"bootstrap\"\n-     This method uses minimal native system facilities to build a\n-     barebones, unoptimized `gcc', that is then used to compile\n-     (\"bootstrap\") the entire system.\n-\n-\"straight\"\n-     This method assumes a more complete native system exists, and uses\n-     that just once to build the entire system.\n-\n-   On all systems without a recent version of `gcc' already installed,\n-the bootstrap method must be used.  In particular, `g77' uses\n-extensions to the C language offered, apparently, only by `gcc'.\n-\n-   On most systems with a recent version of `gcc' already installed,\n-the straight method can be used.  This is an advantage, because it\n-takes less CPU time and disk space for the build.  However, it does\n-require that the system have fairly recent versions of many GNU\n-programs and other programs, which are not enumerated here.\n-\n-* Menu:\n-\n-* Bootstrap Build::  For all systems.\n-* Straight Build::   For systems with a recent version of `gcc'.\n-"}, {"sha": "457710ff475ed6ce896ce5ec7fdd24c43d0f1e5e", "filename": "gcc/f/g77.info-14", "status": "removed", "additions": 0, "deletions": 1145, "changes": 1145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-14", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-14", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-14?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2", "patch": "@@ -1,1145 +0,0 @@\n-This is Info file g77.info, produced by Makeinfo version 1.68 from the\n-input file g77.texi.\n-\n-   This file explains how to use the GNU Fortran system.\n-\n-   Published by the Free Software Foundation 59 Temple Place - Suite 330\n-Boston, MA 02111-1307 USA\n-\n-   Copyright (C) 1995-1997 Free Software Foundation, Inc.\n-\n-   Permission is granted to make and distribute verbatim copies of this\n-manual provided the copyright notice and this permission notice are\n-preserved on all copies.\n-\n-   Permission is granted to copy and distribute modified versions of\n-this manual under the conditions for verbatim copying, provided also\n-that the sections entitled \"GNU General Public License,\" \"Funding for\n-Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n-included exactly as in the original, and provided that the entire\n-resulting derived work is distributed under the terms of a permission\n-notice identical to this one.\n-\n-   Permission is granted to copy and distribute translations of this\n-manual into another language, under the above conditions for modified\n-versions, except that the sections entitled \"GNU General Public\n-License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n-`Look And Feel'\", and this permission notice, may be included in\n-translations approved by the Free Software Foundation instead of in the\n-original English.\n-\n-   Contributed by James Craig Burley (<burley@gnu.ai.mit.edu>).\n-Inspired by a first pass at translating `g77-0.5.16/f/DOC' that was\n-contributed to Craig by David Ronis (<ronis@onsager.chem.mcgill.ca>).\n-\n-INFO-DIR-SECTION Fortran Programming\n-START-INFO-DIR-ENTRY\n-* g77: (g77).               The GNU Fortran compilation system.\n-END-INFO-DIR-ENTRY\n-\n-\u001f\n-File: g77.info,  Node: Bootstrap Build,  Next: Straight Build,  Up: Building gcc\n-\n-Bootstrap Build\n-...............\n-\n-   A complete bootstrap build is done by issuing a command beginning\n-with `make bootstrap ...', as described in *Note Installing GNU CC:\n-(gcc)Installation.  This is the most reliable form of build, but it\n-does require the most disk space and CPU time, since the complete system\n-is built twice (in Stages 2 and 3), after an initial build (during\n-Stage 1) of a minimal `gcc' compiler using the native compiler and\n-libraries.\n-\n-   You might have to, or want to, control the way a bootstrap build is\n-done by entering the `make' commands to build each stage one at a time,\n-as described in the `gcc' manual.  For example, to save time or disk\n-space, you might want to not bother doing the Stage 3 build, in which\n-case you are assuming that the `gcc' compiler you have built is\n-basically sound (because you are giving up the opportunity to compare a\n-large number of object files to ensure they're identical).\n-\n-   To save some disk space during installation, after Stage 2 is built,\n-you can type `rm -fr stage1' to remove the binaries built during Stage\n-1.\n-\n-   *Note:* *Note Object File Differences::, for information on expected\n-differences in object files produced during Stage 2 and Stage 3 of a\n-bootstrap build.  These differences will be encountered as a result of\n-using the `make compare' or similar command sequence recommended by the\n-GNU CC installation documentation.\n-\n-   Also, *Note Installing GNU CC: (gcc)Installation, for important\n-information on building `gcc' that is not described in this `g77'\n-manual.  For example, explanations of diagnostic messages and whether\n-they're expected, or indicate trouble, are found there.\n-\n-\u001f\n-File: g77.info,  Node: Straight Build,  Prev: Bootstrap Build,  Up: Building gcc\n-\n-Straight Build\n-..............\n-\n-   If you have a recent version of `gcc' already installed on your\n-system, and if you're reasonably certain it produces code that is\n-object-compatible with the version of `gcc' you want to build as part\n-of building `g77', you can save time and disk space by doing a straight\n-build.\n-\n-   To build just the C and Fortran compilers and the necessary run-time\n-libraries, issue the following command:\n-\n-     make -k CC=gcc LANGUAGES=f77 all g77\n-\n-   (The `g77' target is necessary because the `gcc' build procedures\n-apparently do not automatically build command drivers for languages in\n-subdirectories.  It's the `all' target that triggers building\n-everything except, apparently, the `g77' command itself.)\n-\n-   If you run into problems using this method, you have two options:\n-\n-   * Abandon this approach and do a bootstrap build.\n-\n-   * Try to make this approach work by diagnosing the problems you're\n-     running into and retrying.\n-\n-   Especially if you do the latter, you might consider submitting any\n-solutions as bug/fix reports.  *Note Known Causes of Trouble with GNU\n-Fortran: Trouble.\n-\n-   However, understand that many problems preventing a straight build\n-from working are not `g77' problems, and, in such cases, are not likely\n-to be addressed in future versions of `g77'.\n-\n-\u001f\n-File: g77.info,  Node: Pre-installation Checks,  Next: Installation of Binaries,  Prev: Building gcc,  Up: Complete Installation\n-\n-Pre-installation Checks\n------------------------\n-\n-   Before installing the system, which includes installing `gcc', you\n-might want to do some minimum checking to ensure that some basic things\n-work.\n-\n-   Here are some commands you can try, and output typically printed by\n-them when they work:\n-\n-     sh# cd /usr/src/gcc\n-     sh# ./g77 --driver=./xgcc -B./ -v\n-     g77 version 0.5.21\n-      ./xgcc -B./ -v -fnull-version -o /tmp/gfa18047 ...\n-     Reading specs from ./specs\n-     gcc version 2.7.2.3.f.1\n-      ./cpp -lang-c -v -isystem ./include -undef ...\n-     GNU CPP version 2.7.2.3.f.1 (Linux/Alpha)\n-     #include \"...\" search starts here:\n-     #include <...> search starts here:\n-      ./include\n-      /usr/local/include\n-      /usr/alpha-unknown-linux/include\n-      /usr/lib/gcc-lib/alpha-unknown-linux/2.7.2.3.f.1/include\n-      /usr/include\n-     End of search list.\n-      ./f771 /tmp/cca18048.i -fset-g77-defaults -quiet -dumpbase ...\n-     GNU F77 version 2.7.2.3.f.1 (Linux/Alpha) compiled ...\n-     GNU Fortran Front End version 0.5.21 compiled: ...\n-      as -nocpp -o /tmp/cca180481.o /tmp/cca18048.s\n-      ld -G 8 -O1 -o /tmp/gfa18047 /usr/lib/crt0.o -L. ...\n-     __G77_LIBF77_VERSION__: 0.5.21\n-     @(#)LIBF77 VERSION 19970404\n-     __G77_LIBI77_VERSION__: 0.5.21\n-     @(#) LIBI77 VERSION pjw,dmg-mods 19970816\n-     __G77_LIBU77_VERSION__: 0.5.21\n-     @(#) LIBU77 VERSION 19970609\n-     sh# ./xgcc -B./ -v -o /tmp/delete-me -xc /dev/null -xnone\n-     Reading specs from ./specs\n-     gcc version 2.7.2.3.f.1\n-      ./cpp -lang-c -v -isystem ./include -undef ...\n-     GNU CPP version 2.7.2.3.f.1 (Linux/Alpha)\n-     #include \"...\" search starts here:\n-     #include <...> search starts here:\n-      ./include\n-      /usr/local/include\n-      /usr/alpha-unknown-linux/include\n-      /usr/lib/gcc-lib/alpha-unknown-linux/2.7.2.3.f.1/include\n-      /usr/include\n-     End of search list.\n-      ./cc1 /tmp/cca18063.i -quiet -dumpbase null.c -version ...\n-     GNU C version 2.7.2.3.f.1 (Linux/Alpha) compiled ...\n-      as -nocpp -o /tmp/cca180631.o /tmp/cca18063.s\n-      ld -G 8 -O1 -o /tmp/delete-me /usr/lib/crt0.o -L. ...\n-     /usr/lib/crt0.o: In function `__start':\n-     crt0.S:110: undefined reference to `main'\n-     /usr/lib/crt0.o(.lita+0x28): undefined reference to `main'\n-     sh#\n-\n-   (Note that long lines have been truncated, and `...'  used to\n-indicate such truncations.)\n-\n-   The above two commands test whether `g77' and `gcc', respectively,\n-are able to compile empty (null) source files, whether invocation of\n-the C preprocessor works, whether libraries can be linked, and so on.\n-\n-   If the output you get from either of the above two commands is\n-noticeably different, especially if it is shorter or longer in ways\n-that do not look consistent with the above sample output, you probably\n-should not install `gcc' and `g77' until you have investigated further.\n-\n-   For example, you could try compiling actual applications and seeing\n-how that works.  (You might want to do that anyway, even if the above\n-tests work.)\n-\n-   To compile using the not-yet-installed versions of `gcc' and `g77',\n-use the following commands to invoke them.\n-\n-   To invoke `g77', type:\n-\n-     /usr/src/gcc/g77 --driver=/usr/src/gcc/xgcc -B/usr/src/gcc/ ...\n-\n-   To invoke `gcc', type:\n-\n-     /usr/src/gcc/xgcc -B/usr/src/gcc/ ...\n-\n-\u001f\n-File: g77.info,  Node: Installation of Binaries,  Next: Updating Documentation,  Prev: Pre-installation Checks,  Up: Complete Installation\n-\n-Installation of Binaries\n-------------------------\n-\n-   After configuring, building, and testing `g77' and `gcc', when you\n-are ready to install them on your system, type:\n-\n-     make -k CC=gcc LANGUAGES=f77 install\n-\n-   As described in *Note Installing GNU CC: (gcc)Installation, the\n-values for the `CC' and `LANGUAGES' macros should be the same as those\n-you supplied for the build itself.\n-\n-   So, the details of the above command might vary if you used a\n-bootstrap build (where you might be able to omit both definitions, or\n-might have to supply the same definitions you used when building the\n-final stage) or if you deviated from the instructions for a straight\n-build.\n-\n-   If the above command does not install `libf2c.a' as expected, try\n-this:\n-\n-     make -k ... install install-libf77 install-f2c-all\n-\n-   We don't know why some non-GNU versions of `make' sometimes require\n-this alternate command, but they do.  (Remember to supply the\n-appropriate definitions for `CC' and `LANGUAGES' where you see `...' in\n-the above command.)\n-\n-   Note that using the `-k' option tells `make' to continue after some\n-installation problems, like not having `makeinfo' installed on your\n-system.  It might not be necessary for your system.\n-\n-\u001f\n-File: g77.info,  Node: Updating Documentation,  Next: Missing bison?,  Prev: Installation of Binaries,  Up: Complete Installation\n-\n-Updating Your Info Directory\n-----------------------------\n-\n-   As part of installing `g77', you should make sure users of `info'\n-can easily access this manual on-line.  Do this by making sure a line\n-such as the following exists in `/usr/info/dir', or in whatever file is\n-the top-level file in the `info' directory on your system (perhaps\n-`/usr/local/info/dir':\n-\n-     * g77: (g77).           The GNU Fortran programming language.\n-\n-   If the menu in `dir' is organized into sections, `g77' probably\n-belongs in a section with a name such as one of the following:\n-\n-   * Fortran Programming\n-\n-   * Writing Programs\n-\n-   * Programming Languages\n-\n-   * Languages Other Than C\n-\n-   * Scientific/Engineering Tools\n-\n-   * GNU Compilers\n-\n-\u001f\n-File: g77.info,  Node: Missing bison?,  Next: Missing makeinfo?,  Prev: Updating Documentation,  Up: Complete Installation\n-\n-Missing `bison'?\n-----------------\n-\n-   If you cannot install `bison', make sure you have started with a\n-*fresh* distribution of `gcc', do *not* do `make maintainer-clean' (in\n-other versions of `gcc', this was called `make realclean'), and, to\n-ensure that `bison' is not invoked by `make' during the build, type\n-these commands:\n-\n-     sh# cd gcc\n-     sh# touch bi-parser.c bi-parser.h c-parse.c c-parse.h cexp.c\n-     sh# touch cp/parse.c cp/parse.h objc-parse.c\n-     sh#\n-\n-   These commands update the date-time-modified information for all the\n-files produced by the various invocations of `bison' in the current\n-versions of `gcc', so that `make' no longer believes it needs to update\n-them.  All of these files should already exist in a `gcc' distribution,\n-but the application of patches to upgrade to a newer version can leave\n-the modification information set such that the `bison' input files look\n-more \"recent\" than the corresponding output files.\n-\n-   *Note:* New versions of `gcc' might change the set of files it\n-generates by invoking `bison'--if you cannot figure out for yourself\n-how to handle such a situation, try an older version of `gcc' until you\n-find someone who can (or until you obtain and install `bison').\n-\n-\u001f\n-File: g77.info,  Node: Missing makeinfo?,  Prev: Missing bison?,  Up: Complete Installation\n-\n-Missing `makeinfo'?\n--------------------\n-\n-   If you cannot install `makeinfo', either use the `-k' option when\n-invoking make to specify any of the `install' or related targets, or\n-specify `MAKEINFO=echo' on the `make' command line.\n-\n-   If you fail to do one of these things, some files, like `libf2c.a',\n-might not be installed, because the failed attempt by `make' to invoke\n-`makeinfo' causes it to cancel any further processing.\n-\n-\u001f\n-File: g77.info,  Node: Distributing Binaries,  Prev: Complete Installation,  Up: Installation\n-\n-Distributing Binaries\n-=====================\n-\n-   If you are building `g77' for distribution to others in binary form,\n-first make sure you are aware of your legal responsibilities (read the\n-file `gcc/COPYING' thoroughly).\n-\n-   Then, consider your target audience and decide where `g77' should be\n-installed.\n-\n-   For systems like GNU/Linux that have no native Fortran compiler (or\n-where `g77' could be considered the native compiler for Fortran and\n-`gcc' for C, etc.), you should definitely configure `g77' for\n-installation in `/usr/bin' instead of `/usr/local/bin'.  Specify the\n-`--prefix=/usr' option when running `./configure'.  You might also want\n-to set up the distribution so the `f77' command is a link to\n-`g77'--just make an empty file named `f77-install-ok' in the source or\n-build directory (the one in which the `f' directory resides, not the\n-`f' directory itself) when you specify one of the `install' or\n-`uninstall' targets in a `make' command.\n-\n-   For a system that might already have `f2c' installed, you definitely\n-will want to make another empty file (in the same directory) named\n-either `f2c-exists-ok' or `f2c-install-ok'.  Use the former if you\n-don't want your distribution to overwrite `f2c'-related files in\n-existing systems; use the latter if you want to improve the likelihood\n-that users will be able to use both `f2c' and `g77' to compile code for\n-a single program without encountering link-time or run-time\n-incompatibilities.\n-\n-   (Make sure you clearly document, in the \"advertising\" for your\n-distribution, how installation of your distribution will affect\n-existing installations of `gcc', `f2c', `f77', `libf2c.a', and so on.\n-Similarly, you should clearly document any requirements you assume are\n-met by users of your distribution.)\n-\n-   For other systems with native `f77' (and `cc') compilers, configure\n-`g77' as you (or most of your audience) would configure `gcc' for their\n-installations.  Typically this is for installation in `/usr/local', and\n-would not include a copy of `g77' named `f77', so users could still use\n-the native `f77'.\n-\n-   In any case, for `g77' to work properly, you *must* ensure that the\n-binaries you distribute include:\n-\n-`bin/g77'\n-     This is the command most users use to compile Fortran.\n-\n-`bin/gcc'\n-     This is the command all users use to compile Fortran, either\n-     directly or indirectly via the `g77' command.  The `bin/gcc'\n-     executable file must have been built from a `gcc' source tree into\n-     which a `g77' source tree was merged and configured, or it will\n-     not know how to compile Fortran programs.\n-\n-`bin/f77'\n-     In installations with no non-GNU native Fortran compiler, this is\n-     the same as `bin/g77'.  Otherwise, it should be omitted from the\n-     distribution, so the one on already on a particular system does\n-     not get overwritten.\n-\n-`info/g77.info*'\n-     This is the documentation for `g77'.  If it is not included, users\n-     will have trouble understanding diagnostics messages and other\n-     such things, and will send you a lot of email asking questions.\n-\n-     Please edit this documentation (by editing `gcc/f/*.texi' and\n-     doing `make doc' from the `/usr/src/gcc' directory) to reflect any\n-     changes you've made to `g77', or at least to encourage users of\n-     your binary distribution to report bugs to you first.\n-\n-     Also, whether you distribute binaries or install `g77' on your own\n-     system, it might be helpful for everyone to add a line listing\n-     this manual by name and topic to the top-level `info' node in\n-     `/usr/info/dir'.  That way, users can find `g77' documentation more\n-     easily.  *Note Updating Your Info Directory: Updating\n-     Documentation.\n-\n-`man/man1/g77.1'\n-     This is the short man page for `g77'.  It is out of date, but you\n-     might as well include it for people who really like man pages.\n-\n-`man/man1/f77.1'\n-     In installations where `f77' is the same as `g77', this is the\n-     same as `man/man1/g77.1'.  Otherwise, it should be omitted from\n-     the distribution, so the one already on a particular system does\n-     not get overwritten.\n-\n-`lib/gcc-lib/.../f771'\n-     This is the actual Fortran compiler.\n-\n-`lib/gcc-lib/.../libf2c.a'\n-     This is the run-time library for `g77'-compiled programs.\n-\n-   Whether you want to include the slightly updated (and possibly\n-improved) versions of `cc1', `cc1plus', and whatever other binaries get\n-rebuilt with the changes the GNU Fortran distribution makes to the GNU\n-back end, is up to you.  These changes are highly unlikely to break any\n-compilers, and it is possible they'll fix back-end bugs that can be\n-demonstrated using front ends other than GNU Fortran's.\n-\n-   Please assure users that unless they have a specific need for their\n-existing, older versions of `gcc' command, they are unlikely to\n-experience any problems by overwriting it with your version--though\n-they could certainly protect themselves by making backup copies first!\n-Otherwise, users might try and install your binaries in a \"safe\" place,\n-find they cannot compile Fortran programs with your distribution\n-(because, perhaps, they're picking up their old version of the `gcc'\n-command, which does not recognize Fortran programs), and assume that\n-your binaries (or, more generally, GNU Fortran distributions in\n-general) are broken, at least for their system.\n-\n-   Finally, *please* ask for bug reports to go to you first, at least\n-until you're sure your distribution is widely used and has been well\n-tested.  This especially goes for those of you making any changes to\n-the `g77' sources to port `g77', e.g. to OS/2.\n-<fortran@gnu.ai.mit.edu> has received a fair number of bug reports that\n-turned out to be problems with other peoples' ports and distributions,\n-about which nothing could be done for the user.  Once you are quite\n-certain a bug report does not involve your efforts, you can forward it\n-to us.\n-\n-\u001f\n-File: g77.info,  Node: Debugging and Interfacing,  Next: Collected Fortran Wisdom,  Prev: Installation,  Up: Top\n-\n-Debugging and Interfacing\n-*************************\n-\n-   GNU Fortran currently generates code that is object-compatible with\n-the `f2c' converter.  Also, it avoids limitations in the current GBE,\n-such as the inability to generate a procedure with multiple entry\n-points, by generating code that is structured differently (in terms of\n-procedure names, scopes, arguments, and so on) than might be expected.\n-\n-   As a result, writing code in other languages that calls on, is\n-called by, or shares in-memory data with `g77'-compiled code generally\n-requires some understanding of the way `g77' compiles code for various\n-constructs.\n-\n-   Similarly, using a debugger to debug `g77'-compiled code, even if\n-that debugger supports native Fortran debugging, generally requires\n-this sort of information.\n-\n-   This section describes some of the basic information on how `g77'\n-compiles code for constructs involving interfaces to other languages\n-and to debuggers.\n-\n-   *Caution:* Much or all of this information pertains to only the\n-current release of `g77', sometimes even to using certain compiler\n-options with `g77' (such as `-fno-f2c').  Do not write code that\n-depends on this information without clearly marking said code as\n-nonportable and subject to review for every new release of `g77'.  This\n-information is provided primarily to make debugging of code generated\n-by this particular release of `g77' easier for the user, and partly to\n-make writing (generally nonportable) interface code easier.  Both of\n-these activities require tracking changes in new version of `g77' as\n-they are installed, because new versions can change the behaviors\n-described in this section.\n-\n-* Menu:\n-\n-* Main Program Unit::  How `g77' compiles a main program unit.\n-* Procedures::         How `g77' constructs parameter lists\n-                       for procedures.\n-* Functions::          Functions returning floating-point or character data.\n-* Names::              Naming of user-defined variables, procedures, etc.\n-* Common Blocks::      Accessing common variables while debugging.\n-* Local Equivalence Areas::  Accessing `EQUIVALENCE' while debugging.\n-* Complex Variables::  How `g77' performs complex arithmetic.\n-* Arrays::             Dealing with (possibly multi-dimensional) arrays.\n-* Adjustable Arrays::  Special consideration for adjustable arrays.\n-* Alternate Entry Points::  How `g77' implements alternate `ENTRY'.\n-* Alternate Returns::  How `g77' handles alternate returns.\n-* Assigned Statement Labels::  How `g77' handles `ASSIGN'.\n-* Run-time Library Errors::  Meanings of some `IOSTAT=' values.\n-\n-\u001f\n-File: g77.info,  Node: Main Program Unit,  Next: Procedures,  Up: Debugging and Interfacing\n-\n-Main Program Unit (PROGRAM)\n-===========================\n-\n-   When `g77' compiles a main program unit, it gives it the public\n-procedure name `MAIN__'.  The `libf2c' library has the actual `main()'\n-procedure as is typical of C-based environments, and it is this\n-procedure that performs some initial start-up activity and then calls\n-`MAIN__'.\n-\n-   Generally, `g77' and `libf2c' are designed so that you need not\n-include a main program unit written in Fortran in your program--it can\n-be written in C or some other language.  Especially for I/O handling,\n-this is the case, although `g77' version 0.5.16 includes a bug fix for\n-`libf2c' that solved a problem with using the `OPEN' statement as the\n-first Fortran I/O activity in a program without a Fortran main program\n-unit.\n-\n-   However, if you don't intend to use `g77' (or `f2c') to compile your\n-main program unit--that is, if you intend to compile a `main()'\n-procedure using some other language--you should carefully examine the\n-code for `main()' in `libf2c', found in the source file\n-`gcc/f/runtime/libF77/main.c', to see what kinds of things might need\n-to be done by your `main()' in order to provide the Fortran environment\n-your Fortran code is expecting.\n-\n-   For example, `libf2c''s `main()' sets up the information used by the\n-`IARGC' and `GETARG' intrinsics.  Bypassing `libf2c''s `main()' without\n-providing a substitute for this activity would mean that invoking\n-`IARGC' and `GETARG' would produce undefined results.\n-\n-   When debugging, one implication of the fact that `main()', which is\n-the place where the debugged program \"starts\" from the debugger's point\n-of view, is in `libf2c' is that you won't be starting your Fortran\n-program at a point you recognize as your Fortran code.\n-\n-   The standard way to get around this problem is to set a break point\n-(a one-time, or temporary, break point will do) at the entrance to\n-`MAIN__', and then run the program.  A convenient way to do so is to\n-add the `gdb' command\n-\n-     tbreak MAIN__\n-\n-to the file `.gdbinit' in the directory in which you're debugging\n-(using `gdb').\n-\n-   After doing this, the debugger will see the current execution point\n-of the program as at the beginning of the main program unit of your\n-program.\n-\n-   Of course, if you really want to set a break point at some other\n-place in your program and just start the program running, without first\n-breaking at `MAIN__', that should work fine.\n-\n-\u001f\n-File: g77.info,  Node: Procedures,  Next: Functions,  Prev: Main Program Unit,  Up: Debugging and Interfacing\n-\n-Procedures (SUBROUTINE and FUNCTION)\n-====================================\n-\n-   Currently, `g77' passes arguments via reference--specifically, by\n-passing a pointer to the location in memory of a variable, array, array\n-element, a temporary location that holds the result of evaluating an\n-expression, or a temporary or permanent location that holds the value\n-of a constant.\n-\n-   Procedures that accept `CHARACTER' arguments are implemented by\n-`g77' so that each `CHARACTER' argument has two actual arguments.\n-\n-   The first argument occupies the expected position in the argument\n-list and has the user-specified name.  This argument is a pointer to an\n-array of characters, passed by the caller.\n-\n-   The second argument is appended to the end of the user-specified\n-calling sequence and is named `__g77_length_X', where X is the\n-user-specified name.  This argument is of the C type `ftnlen' (see\n-`gcc/f/runtime/f2c.h.in' for information on that type) and is the\n-number of characters the caller has allocated in the array pointed to\n-by the first argument.\n-\n-   A procedure will ignore the length argument if `X' is not declared\n-`CHARACTER*(*)', because for other declarations, it knows the length.\n-Not all callers necessarily \"know\" this, however, which is why they all\n-pass the extra argument.\n-\n-   The contents of the `CHARACTER' argument are specified by the\n-address passed in the first argument (named after it).  The procedure\n-can read or write these contents as appropriate.\n-\n-   When more than one `CHARACTER' argument is present in the argument\n-list, the length arguments are appended in the order the original\n-arguments appear.  So `CALL FOO('HI','THERE')' is implemented in C as\n-`foo(\"hi\",\"there\",2,5);', ignoring the fact that `g77' does not provide\n-the trailing null bytes on the constant strings (`f2c' does provide\n-them, but they are unnecessary in a Fortran environment, and you should\n-not expect them to be there).\n-\n-   Note that the above information applies to `CHARACTER' variables and\n-arrays *only*.  It does *not* apply to external `CHARACTER' functions\n-or to intrinsic `CHARACTER' functions.  That is, no second length\n-argument is passed to `FOO' in this case:\n-\n-     CHARACTER X\n-     EXTERNAL X\n-     CALL FOO(X)\n-\n-Nor does `FOO' expect such an argument in this case:\n-\n-     SUBROUTINE FOO(X)\n-     CHARACTER X\n-     EXTERNAL X\n-\n-   Because of this implementation detail, if a program has a bug such\n-that there is disagreement as to whether an argument is a procedure,\n-and the type of the argument is `CHARACTER', subtle symptoms might\n-appear.\n-\n-\u001f\n-File: g77.info,  Node: Functions,  Next: Names,  Prev: Procedures,  Up: Debugging and Interfacing\n-\n-Functions (FUNCTION and RETURN)\n-===============================\n-\n-   `g77' handles in a special way functions that return the following\n-types:\n-\n-   * `CHARACTER'\n-\n-   * `COMPLEX'\n-\n-   * `REAL(KIND=1)'\n-\n-   For `CHARACTER', `g77' implements a subroutine (a C function\n-returning `void') with two arguments prepended: `__g77_result', which\n-the caller passes as a pointer to a `char' array expected to hold the\n-return value, and `__g77_length', which the caller passes as an\n-`ftnlen' value specifying the length of the return value as declared in\n-the calling program.  For `CHARACTER*(*)', the called function uses\n-`__g77_length' to determine the size of the array that `__g77_result'\n-points to; otherwise, it ignores that argument.\n-\n-   For `COMPLEX', when `-ff2c' is in force, `g77' implements a\n-subroutine with one argument prepended: `__g77_result', which the\n-caller passes as a pointer to a variable of the type of the function.\n-The called function writes the return value into this variable instead\n-of returning it as a function value.  When `-fno-f2c' is in force,\n-`g77' implements a `COMPLEX' function as `gcc''s `__complex__ float' or\n-`__complex__ double' function (or an emulation thereof, when\n-`-femulate-complex' is in effect), returning the result of the function\n-in the same way as `gcc' would.\n-\n-   For `REAL(KIND=1)', when `-ff2c' is in force, `g77' implements a\n-function that actually returns `REAL(KIND=2)' (typically C's `double'\n-type).  When `-fno-f2c' is in force, `REAL(KIND=1)' functions return\n-`float'.\n-\n-\u001f\n-File: g77.info,  Node: Names,  Next: Common Blocks,  Prev: Functions,  Up: Debugging and Interfacing\n-\n-Names\n-=====\n-\n-   Fortran permits each implementation to decide how to represent names\n-as far as how they're seen in other contexts, such as debuggers and\n-when interfacing to other languages, and especially as far as how\n-casing is handled.\n-\n-   External names--names of entities that are public, or \"accessible\",\n-to all modules in a program--normally have an underscore (`_') appended\n-by `g77', to generate code that is compatible with f2c.  External names\n-include names of Fortran things like common blocks, external procedures\n-(subroutines and functions, but not including statement functions,\n-which are internal procedures), and entry point names.\n-\n-   However, use of the `-fno-underscoring' option disables this kind of\n-transformation of external names (though inhibiting the transformation\n-certainly improves the chances of colliding with incompatible externals\n-written in other languages--but that might be intentional.\n-\n-   When `-funderscoring' is in force, any name (external or local) that\n-already has at least one underscore in it is implemented by `g77' by\n-appending two underscores.  (This second underscore can be disabled via\n-the `-fno-second-underscore' option.)  External names are changed this\n-way for `f2c' compatibility.  Local names are changed this way to avoid\n-collisions with external names that are different in the source\n-code--`f2c' does the same thing, but there's no compatibility issue\n-there except for user expectations while debugging.\n-\n-   For example:\n-\n-     Max_Cost = 0\n-\n-Here, a user would, in the debugger, refer to this variable using the\n-name `max_cost__' (or `MAX_COST__' or `Max_Cost__', as described below).\n-(We hope to improve `g77' in this regard in the future--don't write\n-scripts depending on this behavior!  Also, consider experimenting with\n-the `-fno-underscoring' option to try out debugging without having to\n-massage names by hand like this.)\n-\n-   `g77' provides a number of command-line options that allow the user\n-to control how case mapping is handled for source files.  The default\n-is the traditional UNIX model for Fortran compilers--names are mapped\n-to lower case.  Other command-line options can be specified to map\n-names to upper case, or to leave them exactly as written in the source\n-file.\n-\n-   For example:\n-\n-     Foo = 9.436\n-\n-Here, it is normally the case that the variable assigned will be named\n-`foo'.  This would be the name to enter when using a debugger to access\n-the variable.\n-\n-   However, depending on the command-line options specified, the name\n-implemented by `g77' might instead be `FOO' or even `Foo', thus\n-affecting how debugging is done.\n-\n-   Also:\n-\n-     Call Foo\n-\n-This would normally call a procedure that, if it were in a separate C\n-program, be defined starting with the line:\n-\n-     void foo_()\n-\n-However, `g77' command-line options could be used to change the casing\n-of names, resulting in the name `FOO_' or `Foo_' being given to the\n-procedure instead of `foo_', and the `-fno-underscoring' option could\n-be used to inhibit the appending of the underscore to the name.\n-\n-\u001f\n-File: g77.info,  Node: Common Blocks,  Next: Local Equivalence Areas,  Prev: Names,  Up: Debugging and Interfacing\n-\n-Common Blocks (COMMON)\n-======================\n-\n-   `g77' names and lays out `COMMON' areas the same way f2c does, for\n-compatibility with f2c.\n-\n-   Currently, `g77' does not emit \"true\" debugging information for\n-members of a `COMMON' area, due to an apparent bug in the GBE.\n-\n-   (As of Version 0.5.19, `g77' emits debugging information for such\n-members in the form of a constant string specifying the base name of\n-the aggregate area and the offset of the member in bytes from the start\n-of the area.  Use the `-fdebug-kludge' option to enable this behavior.\n-In `gdb', use `set language c' before printing the value of the member,\n-then `set language fortran' to restore the default language, since\n-`gdb' doesn't provide a way to print a readable version of a character\n-string in Fortran language mode.\n-\n-   This kludge will be removed in a future version of `g77' that, in\n-conjunction with a contemporary version of `gdb', properly supports\n-Fortran-language debugging, including access to members of `COMMON'\n-areas.)\n-\n-   *Note Options for Code Generation Conventions: Code Gen Options, for\n-information on the `-fdebug-kludge' option.\n-\n-   Moreover, `g77' currently implements a `COMMON' area such that its\n-type is an array of the C `char' data type.\n-\n-   So, when debugging, you must know the offset into a `COMMON' area\n-for a particular item in that area, and you have to take into account\n-the appropriate multiplier for the respective sizes of the types (as\n-declared in your code) for the items preceding the item in question as\n-compared to the size of the `char' type.\n-\n-   For example, using default implicit typing, the statement\n-\n-     COMMON I(15), R(20), T\n-\n-results in a public 144-byte `char' array named `_BLNK__' with `I'\n-placed at `_BLNK__[0]', `R' at `_BLNK__[60]', and `T' at `_BLNK__[140]'.\n-(This is assuming that the target machine for the compilation has\n-4-byte `INTEGER(KIND=1)' and `REAL(KIND=1)' types.)\n-\n-\u001f\n-File: g77.info,  Node: Local Equivalence Areas,  Next: Complex Variables,  Prev: Common Blocks,  Up: Debugging and Interfacing\n-\n-Local Equivalence Areas (EQUIVALENCE)\n-=====================================\n-\n-   `g77' treats storage-associated areas involving a `COMMON' block as\n-explained in the section on common blocks.\n-\n-   A local `EQUIVALENCE' area is a collection of variables and arrays\n-connected to each other in any way via `EQUIVALENCE', none of which are\n-listed in a `COMMON' statement.\n-\n-   Currently, `g77' does not emit \"true\" debugging information for\n-members in a local `EQUIVALENCE' area, due to an apparent bug in the\n-GBE.\n-\n-   (As of Version 0.5.19, `g77' does emit debugging information for such\n-members in the form of a constant string specifying the base name of\n-the aggregate area and the offset of the member in bytes from the start\n-of the area.  Use the `-fdebug-kludge' option to enable this behavior.\n-In `gdb', use `set language c' before printing the value of the member,\n-then `set language fortran' to restore the default language, since\n-`gdb' doesn't provide a way to print a readable version of a character\n-string in Fortran language mode.\n-\n-   This kludge will be removed in a future version of `g77' that, in\n-conjunction with a contemporary version of `gdb', properly supports\n-Fortran-language debugging, including access to members of\n-`EQUIVALENCE' areas.)\n-\n-   *Note Options for Code Generation Conventions: Code Gen Options, for\n-information on the `-fdebug-kludge' option.\n-\n-   Moreover, `g77' implements a local `EQUIVALENCE' area such that its\n-type is an array of the C `char' data type.\n-\n-   The name `g77' gives this array of `char' type is `__g77_equiv_X',\n-where X is the name of the item that is placed at the beginning (offset\n-0) of this array.  If more than one such item is placed at the\n-beginning, X is the name that sorts to the top in an alphabetical sort\n-of the list of such items.\n-\n-   When debugging, you must therefore access members of `EQUIVALENCE'\n-areas by specifying the appropriate `__g77_equiv_X' array section with\n-the appropriate offset.  See the explanation of debugging `COMMON'\n-blocks for info applicable to debugging local `EQUIVALENCE' areas.\n-\n-   (*Note:* `g77' version 0.5.18 and earlier chose the name for X using\n-a different method when more than one name was in the list of names of\n-entities placed at the beginning of the array.  Though the\n-documentation specified that the first name listed in the `EQUIVALENCE'\n-statements was chosen for X, `g77' in fact chose the name using a\n-method that was so complicated, it seemed easier to change it to an\n-alphabetical sort than to describe the previous method in the\n-documentation.)\n-\n-\u001f\n-File: g77.info,  Node: Complex Variables,  Next: Arrays,  Prev: Local Equivalence Areas,  Up: Debugging and Interfacing\n-\n-Complex Variables (COMPLEX)\n-===========================\n-\n-   As of 0.5.20, `g77' defaults to handling `COMPLEX' types (and\n-related intrinsics, constants, functions, and so on) in a manner that\n-makes direct debugging involving these types in Fortran language mode\n-difficult.\n-\n-   Essentially, `g77' implements these types using an internal\n-construct similar to C's `struct', at least as seen by the `gcc' back\n-end.\n-\n-   Currently, the back end, when outputting debugging info with the\n-compiled code for the assembler to digest, does not detect these\n-`struct' types as being substitutes for Fortran complex.  As a result,\n-the Fortran language modes of debuggers such as `gdb' see these types\n-as C `struct' types, which they might or might not support.\n-\n-   Until this is fixed, switch to C language mode to work with entities\n-of `COMPLEX' type and then switch back to Fortran language mode\n-afterward.  (In `gdb', this is accomplished via `set lang c' and either\n-`set lang fortran' or `set lang auto'.)\n-\n-   *Note:* Compiling with the `-fno-emulate-complex' option avoids the\n-debugging problem, but is known to cause other problems like compiler\n-crashes and generation of incorrect code, so it is not recommended.\n-\n-\u001f\n-File: g77.info,  Node: Arrays,  Next: Adjustable Arrays,  Prev: Complex Variables,  Up: Debugging and Interfacing\n-\n-Arrays (DIMENSION)\n-==================\n-\n-   Fortran uses \"column-major ordering\" in its arrays.  This differs\n-from other languages, such as C, which use \"row-major ordering\".  The\n-difference is that, with Fortran, array elements adjacent to each other\n-in memory differ in the *first* subscript instead of the last;\n-`A(5,10,20)' immediately follows `A(4,10,20)', whereas with row-major\n-ordering it would follow `A(5,10,19)'.\n-\n-   This consideration affects not only interfacing with and debugging\n-Fortran code, it can greatly affect how code is designed and written,\n-especially when code speed and size is a concern.\n-\n-   Fortran also differs from C, a popular language for interfacing and\n-to support directly in debuggers, in the way arrays are treated.  In C,\n-arrays are single-dimensional and have interesting relationships to\n-pointers, neither of which is true for Fortran.  As a result, dealing\n-with Fortran arrays from within an environment limited to C concepts\n-can be challenging.\n-\n-   For example, accessing the array element `A(5,10,20)' is easy enough\n-in Fortran (use `A(5,10,20)'), but in C some difficult machinations are\n-needed.  First, C would treat the A array as a single-dimension array.\n-Second, C does not understand low bounds for arrays as does Fortran.\n-Third, C assumes a low bound of zero (0), while Fortran defaults to a\n-low bound of one (1) and can supports an arbitrary low bound.\n-Therefore, calculations must be done to determine what the C equivalent\n-of `A(5,10,20)' would be, and these calculations require knowing the\n-dimensions of `A'.\n-\n-   For `DIMENSION A(2:11,21,0:29)', the calculation of the offset of\n-`A(5,10,20)' would be:\n-\n-       (5-2)\n-     + (10-1)*(11-2+1)\n-     + (20-0)*(11-2+1)*(21-1+1)\n-     = 4293\n-\n-So the C equivalent in this case would be `a[4293]'.\n-\n-   When using a debugger directly on Fortran code, the C equivalent\n-might not work, because some debuggers cannot understand the notion of\n-low bounds other than zero.  However, unlike `f2c', `g77' does inform\n-the GBE that a multi-dimensional array (like `A' in the above example)\n-is really multi-dimensional, rather than a single-dimensional array, so\n-at least the dimensionality of the array is preserved.\n-\n-   Debuggers that understand Fortran should have no trouble with\n-non-zero low bounds, but for non-Fortran debuggers, especially C\n-debuggers, the above example might have a C equivalent of `a[4305]'.\n-This calculation is arrived at by eliminating the subtraction of the\n-lower bound in the first parenthesized expression on each line--that\n-is, for `(5-2)' substitute `(5)', for `(10-1)' substitute `(10)', and\n-for `(20-0)' substitute `(20)'.  Actually, the implication of this can\n-be that the expression `*(&a[2][1][0] + 4293)' works fine, but that\n-`a[20][10][5]' produces the equivalent of `*(&a[0][0][0] + 4305)'\n-because of the missing lower bounds.\n-\n-   Come to think of it, perhaps the behavior is due to the debugger\n-internally compensating for the lower bounds by offsetting the base\n-address of `a', leaving `&a' set lower, in this case, than\n-`&a[2][1][0]' (the address of its first element as identified by\n-subscripts equal to the corresponding lower bounds).\n-\n-   You know, maybe nobody really needs to use arrays.\n-\n-\u001f\n-File: g77.info,  Node: Adjustable Arrays,  Next: Alternate Entry Points,  Prev: Arrays,  Up: Debugging and Interfacing\n-\n-Adjustable Arrays (DIMENSION)\n-=============================\n-\n-   Adjustable and automatic arrays in Fortran require the implementation\n-(in this case, the `g77' compiler) to \"memorize\" the expressions that\n-dimension the arrays each time the procedure is invoked.  This is so\n-that subsequent changes to variables used in those expressions, made\n-during execution of the procedure, do not have any effect on the\n-dimensions of those arrays.\n-\n-   For example:\n-\n-     REAL ARRAY(5)\n-     DATA ARRAY/5*2/\n-     CALL X(ARRAY, 5)\n-     END\n-     SUBROUTINE X(A, N)\n-     DIMENSION A(N)\n-     N = 20\n-     PRINT *, N, A\n-     END\n-\n-Here, the implementation should, when running the program, print\n-something like:\n-\n-     20   2.  2.  2.  2.  2.\n-\n-Note that this shows that while the value of `N' was successfully\n-changed, the size of the `A' array remained at 5 elements.\n-\n-   To support this, `g77' generates code that executes before any user\n-code (and before the internally generated computed `GOTO' to handle\n-alternate entry points, as described below) that evaluates each\n-(nonconstant) expression in the list of subscripts for an array, and\n-saves the result of each such evaluation to be used when determining\n-the size of the array (instead of re-evaluating the expressions).\n-\n-   So, in the above example, when `X' is first invoked, code is\n-executed that copies the value of `N' to a temporary.  And that same\n-temporary serves as the actual high bound for the single dimension of\n-the `A' array (the low bound being the constant 1).  Since the user\n-program cannot (legitimately) change the value of the temporary during\n-execution of the procedure, the size of the array remains constant\n-during each invocation.\n-\n-   For alternate entry points, the code `g77' generates takes into\n-account the possibility that a dummy adjustable array is not actually\n-passed to the actual entry point being invoked at that time.  In that\n-case, the public procedure implementing the entry point passes to the\n-master private procedure implementing all the code for the entry points\n-a `NULL' pointer where a pointer to that adjustable array would be\n-expected.  The `g77'-generated code doesn't attempt to evaluate any of\n-the expressions in the subscripts for an array if the pointer to that\n-array is `NULL' at run time in such cases.  (Don't depend on this\n-particular implementation by writing code that purposely passes `NULL'\n-pointers where the callee expects adjustable arrays, even if you know\n-the callee won't reference the arrays--nor should you pass `NULL'\n-pointers for any dummy arguments used in calculating the bounds of such\n-arrays or leave undefined any values used for that purpose in\n-COMMON--because the way `g77' implements these things might change in\n-the future!)\n-\n-\u001f\n-File: g77.info,  Node: Alternate Entry Points,  Next: Alternate Returns,  Prev: Adjustable Arrays,  Up: Debugging and Interfacing\n-\n-Alternate Entry Points (ENTRY)\n-==============================\n-\n-   The GBE does not understand the general concept of alternate entry\n-points as Fortran provides via the ENTRY statement.  `g77' gets around\n-this by using an approach to compiling procedures having at least one\n-`ENTRY' statement that is almost identical to the approach used by\n-`f2c'.  (An alternate approach could be used that would probably\n-generate faster, but larger, code that would also be a bit easier to\n-debug.)\n-\n-   Information on how `g77' implements `ENTRY' is provided for those\n-trying to debug such code.  The choice of implementation seems unlikely\n-to affect code (compiled in other languages) that interfaces to such\n-code.\n-\n-   `g77' compiles exactly one public procedure for the primary entry\n-point of a procedure plus each `ENTRY' point it specifies, as usual.\n-That is, in terms of the public interface, there is no difference\n-between\n-\n-     SUBROUTINE X\n-     END\n-     SUBROUTINE Y\n-     END\n-\n-and:\n-\n-     SUBROUTINE X\n-     ENTRY Y\n-     END\n-\n-   The difference between the above two cases lies in the code compiled\n-for the `X' and `Y' procedures themselves, plus the fact that, for the\n-second case, an extra internal procedure is compiled.\n-\n-   For every Fortran procedure with at least one `ENTRY' statement,\n-`g77' compiles an extra procedure named `__g77_masterfun_X', where X is\n-the name of the primary entry point (which, in the above case, using\n-the standard compiler options, would be `x_' in C).\n-\n-   This extra procedure is compiled as a private procedure--that is, a\n-procedure not accessible by name to separately compiled modules.  It\n-contains all the code in the program unit, including the code for the\n-primary entry point plus for every entry point.  (The code for each\n-public procedure is quite short, and explained later.)\n-\n-   The extra procedure has some other interesting characteristics.\n-\n-   The argument list for this procedure is invented by `g77'.  It\n-contains a single integer argument named `__g77_which_entrypoint',\n-passed by value (as in Fortran's `%VAL()' intrinsic), specifying the\n-entry point index--0 for the primary entry point, 1 for the first entry\n-point (the first `ENTRY' statement encountered), 2 for the second entry\n-point, and so on.\n-\n-   It also contains, for functions returning `CHARACTER' and (when\n-`-ff2c' is in effect) `COMPLEX' functions, and for functions returning\n-different types among the `ENTRY' statements (e.g. `REAL FUNCTION R()'\n-containing `ENTRY I()'), an argument named `__g77_result' that is\n-expected at run time to contain a pointer to where to store the result\n-of the entry point.  For `CHARACTER' functions, this storage area is an\n-array of the appropriate number of characters; for `COMPLEX' functions,\n-it is the appropriate area for the return type; for\n-multiple-return-type functions, it is a union of all the supported\n-return types (which cannot include `CHARACTER', since combining\n-`CHARACTER' and non-`CHARACTER' return types via `ENTRY' in a single\n-function is not supported by `g77').\n-\n-   For `CHARACTER' functions, the `__g77_result' argument is followed\n-by yet another argument named `__g77_length' that, at run time,\n-specifies the caller's expected length of the returned value.  Note\n-that only `CHARACTER*(*)' functions and entry points actually make use\n-of this argument, even though it is always passed by all callers of\n-public `CHARACTER' functions (since the caller does not generally know\n-whether such a function is `CHARACTER*(*)' or whether there are any\n-other callers that don't have that information).\n-\n-   The rest of the argument list is the union of all the arguments\n-specified for all the entry points (in their usual forms, e.g.\n-`CHARACTER' arguments have extra length arguments, all appended at the\n-end of this list).  This is considered the \"master list\" of arguments.\n-\n-   The code for this procedure has, before the code for the first\n-executable statement, code much like that for the following Fortran\n-statement:\n-\n-            GOTO (100000,100001,100002), __g77_which_entrypoint\n-     100000 ...code for primary entry point...\n-     100001 ...code immediately following first ENTRY statement...\n-     100002 ...code immediately following second ENTRY statement...\n-\n-(Note that invalid Fortran statement labels and variable names are used\n-in the above example to highlight the fact that it represents code\n-generated by the `g77' internals, not code to be written by the user.)\n-\n-   It is this code that, when the procedure is called, picks which\n-entry point to start executing.\n-\n-   Getting back to the public procedures (`x' and `Y' in the original\n-example), those procedures are fairly simple.  Their interfaces are\n-just like they would be if they were self-contained procedures (without\n-`ENTRY'), of course, since that is what the callers expect.  Their code\n-consists of simply calling the private procedure, described above, with\n-the appropriate extra arguments (the entry point index, and perhaps a\n-pointer to a multiple-type- return variable, local to the public\n-procedure, that contains all the supported returnable non-character\n-types).  For arguments that are not listed for a given entry point that\n-are listed for other entry points, and therefore that are in the\n-\"master list\" for the private procedure, null pointers (in C, the\n-`NULL' macro) are passed.  Also, for entry points that are part of a\n-multiple-type- returning function, code is compiled after the call of\n-the private procedure to extract from the multi-type union the\n-appropriate result, depending on the type of the entry point in\n-question, returning that result to the original caller.\n-\n-   When debugging a procedure containing alternate entry points, you\n-can either set a break point on the public procedure itself (e.g.  a\n-break point on `X' or `Y') or on the private procedure that contains\n-most of the pertinent code (e.g. `__g77_masterfun_X').  If you do the\n-former, you should use the debugger's command to \"step into\" the called\n-procedure to get to the actual code; with the latter approach, the\n-break point leaves you right at the actual code, skipping over the\n-public entry point and its call to the private procedure (unless you\n-have set a break point there as well, of course).\n-\n-   Further, the list of dummy arguments that is visible when the\n-private procedure is active is going to be the expanded version of the\n-list for whichever particular entry point is active, as explained\n-above, and the way in which return values are handled might well be\n-different from how they would be handled for an equivalent single-entry\n-function.\n-\n-\u001f\n-File: g77.info,  Node: Alternate Returns,  Next: Assigned Statement Labels,  Prev: Alternate Entry Points,  Up: Debugging and Interfacing\n-\n-Alternate Returns (SUBROUTINE and RETURN)\n-=========================================\n-\n-   Subroutines with alternate returns (e.g. `SUBROUTINE X(*)' and `CALL\n-X(*50)') are implemented by `g77' as functions returning the C `int'\n-type.  The actual alternate-return arguments are omitted from the\n-calling sequence.  Instead, the caller uses the return value to do a\n-rough equivalent of the Fortran computed-`GOTO' statement, as in `GOTO\n-(50), X()' in the example above (where `X' is quietly declared as an\n-`INTEGER(KIND=1)' function), and the callee just returns whatever\n-integer is specified in the `RETURN' statement for the subroutine For\n-example, `RETURN 1' is implemented as `X = 1' followed by `RETURN' in\n-C, and `RETURN' by itself is `X = 0' and `RETURN').\n-"}, {"sha": "ee5d1a40d211fa7695628b23e6ba24d2d8dc0cf5", "filename": "gcc/f/g77.info-15", "status": "removed", "additions": 0, "deletions": 1175, "changes": 1175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-15", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-15", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-15?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2", "patch": "@@ -1,1175 +0,0 @@\n-This is Info file g77.info, produced by Makeinfo version 1.68 from the\n-input file g77.texi.\n-\n-   This file explains how to use the GNU Fortran system.\n-\n-   Published by the Free Software Foundation 59 Temple Place - Suite 330\n-Boston, MA 02111-1307 USA\n-\n-   Copyright (C) 1995-1997 Free Software Foundation, Inc.\n-\n-   Permission is granted to make and distribute verbatim copies of this\n-manual provided the copyright notice and this permission notice are\n-preserved on all copies.\n-\n-   Permission is granted to copy and distribute modified versions of\n-this manual under the conditions for verbatim copying, provided also\n-that the sections entitled \"GNU General Public License,\" \"Funding for\n-Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n-included exactly as in the original, and provided that the entire\n-resulting derived work is distributed under the terms of a permission\n-notice identical to this one.\n-\n-   Permission is granted to copy and distribute translations of this\n-manual into another language, under the above conditions for modified\n-versions, except that the sections entitled \"GNU General Public\n-License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n-`Look And Feel'\", and this permission notice, may be included in\n-translations approved by the Free Software Foundation instead of in the\n-original English.\n-\n-   Contributed by James Craig Burley (<burley@gnu.ai.mit.edu>).\n-Inspired by a first pass at translating `g77-0.5.16/f/DOC' that was\n-contributed to Craig by David Ronis (<ronis@onsager.chem.mcgill.ca>).\n-\n-INFO-DIR-SECTION Fortran Programming\n-START-INFO-DIR-ENTRY\n-* g77: (g77).               The GNU Fortran compilation system.\n-END-INFO-DIR-ENTRY\n-\n-\u001f\n-File: g77.info,  Node: Assigned Statement Labels,  Next: Run-time Library Errors,  Prev: Alternate Returns,  Up: Debugging and Interfacing\n-\n-Assigned Statement Labels (ASSIGN and GOTO)\n-===========================================\n-\n-   For portability to machines where a pointer (such as to a label,\n-which is how `g77' implements `ASSIGN' and its relatives, the\n-assigned-`GOTO' and assigned-`FORMAT'-I/O statements) is wider\n-(bitwise) than an `INTEGER(KIND=1)', `g77' uses a different memory\n-location to hold the `ASSIGN'ed value of a variable than it does the\n-numerical value in that variable, unless the variable is wide enough\n-(can hold enough bits).\n-\n-   In particular, while `g77' implements\n-\n-     I = 10\n-\n-as, in C notation, `i = 10;', it implements\n-\n-     ASSIGN 10 TO I\n-\n-as, in GNU's extended C notation (for the label syntax),\n-`__g77_ASSIGN_I = &&L10;' (where `L10' is just a massaging of the\n-Fortran label `10' to make the syntax C-like; `g77' doesn't actually\n-generate the name `L10' or any other name like that, since debuggers\n-cannot access labels anyway).\n-\n-   While this currently means that an `ASSIGN' statement does not\n-overwrite the numeric contents of its target variable, *do not* write\n-any code depending on this feature.  `g77' has already changed this\n-implementation across versions and might do so in the future.  This\n-information is provided only to make debugging Fortran programs\n-compiled with the current version of `g77' somewhat easier.  If there's\n-no debugger-visible variable named `__g77_ASSIGN_I' in a program unit\n-that does `ASSIGN 10 TO I', that probably means `g77' has decided it\n-can store the pointer to the label directly into `I' itself.\n-\n-   *Note Ugly Assigned Labels::, for information on a command-line\n-option to force `g77' to use the same storage for both normal and\n-assigned-label uses of a variable.\n-\n-\u001f\n-File: g77.info,  Node: Run-time Library Errors,  Prev: Assigned Statement Labels,  Up: Debugging and Interfacing\n-\n-Run-time Library Errors\n-=======================\n-\n-   The `libf2c' library currently has the following table to relate\n-error code numbers, returned in `IOSTAT=' variables, to messages.  This\n-information should, in future versions of this document, be expanded\n-upon to include detailed descriptions of each message.\n-\n-   In line with good coding practices, any of the numbers in the list\n-below should *not* be directly written into Fortran code you write.\n-Instead, make a separate `INCLUDE' file that defines `PARAMETER' names\n-for them, and use those in your code, so you can more easily change the\n-actual numbers in the future.\n-\n-   The information below is culled from the definition of `F_err' in\n-`f/runtime/libI77/err.c' in the `g77' source tree.\n-\n-     100: \"error in format\"\n-     101: \"illegal unit number\"\n-     102: \"formatted io not allowed\"\n-     103: \"unformatted io not allowed\"\n-     104: \"direct io not allowed\"\n-     105: \"sequential io not allowed\"\n-     106: \"can't backspace file\"\n-     107: \"null file name\"\n-     108: \"can't stat file\"\n-     109: \"unit not connected\"\n-     110: \"off end of record\"\n-     111: \"truncation failed in endfile\"\n-     112: \"incomprehensible list input\"\n-     113: \"out of free space\"\n-     114: \"unit not connected\"\n-     115: \"read unexpected character\"\n-     116: \"bad logical input field\"\n-     117: \"bad variable type\"\n-     118: \"bad namelist name\"\n-     119: \"variable not in namelist\"\n-     120: \"no end record\"\n-     121: \"variable count incorrect\"\n-     122: \"subscript for scalar variable\"\n-     123: \"invalid array section\"\n-     124: \"substring out of bounds\"\n-     125: \"subscript out of bounds\"\n-     126: \"can't read file\"\n-     127: \"can't write file\"\n-     128: \"'new' file exists\"\n-     129: \"can't append to file\"\n-     130: \"non-positive record number\"\n-     131: \"I/O started while already doing I/O\"\n-\n-\u001f\n-File: g77.info,  Node: Collected Fortran Wisdom,  Next: Trouble,  Prev: Debugging and Interfacing,  Up: Top\n-\n-Collected Fortran Wisdom\n-************************\n-\n-   Most users of `g77' can be divided into two camps:\n-\n-   * Those writing new Fortran code to be compiled by `g77'.\n-\n-   * Those using `g77' to compile existing, \"legacy\" code.\n-\n-   Users writing new code generally understand most of the necessary\n-aspects of Fortran to write \"mainstream\" code, but often need help\n-deciding how to handle problems, such as the construction of libraries\n-containing `BLOCK DATA'.\n-\n-   Users dealing with \"legacy\" code sometimes don't have much\n-experience with Fortran, but believe that the code they're compiling\n-already works when compiled by other compilers (and might not\n-understand why, as is sometimes the case, it doesn't work when compiled\n-by `g77').\n-\n-   The following information is designed to help users do a better job\n-coping with existing, \"legacy\" Fortran code, and with writing new code\n-as well.\n-\n-* Menu:\n-\n-* Advantages Over f2c::        If `f2c' is so great, why `g77'?\n-* Block Data and Libraries::   How `g77' solves a common problem.\n-* Loops::                      Fortran `DO' loops surprise many people.\n-* Working Programs::           Getting programs to work should be done first.\n-* Overly Convenient Options::  Temptations to avoid, habits to not form.\n-* Faster Programs::            Everybody wants these, but at what cost?\n-\n-\u001f\n-File: g77.info,  Node: Advantages Over f2c,  Next: Block Data and Libraries,  Up: Collected Fortran Wisdom\n-\n-Advantages Over f2c\n-===================\n-\n-   Without `f2c', `g77' would have taken much longer to do and probably\n-not been as good for quite a while.  Sometimes people who notice how\n-much `g77' depends on, and documents encouragement to use, `f2c' ask\n-why `g77' was created if `f2c' already existed.\n-\n-   This section gives some basic answers to these questions, though it\n-is not intended to be comprehensive.\n-\n-* Menu:\n-\n-* Language Extensions::  Features used by Fortran code.\n-* Compiler Options::     Features helpful during development.\n-* Compiler Speed::       Speed of the compilation process.\n-* Program Speed::        Speed of the generated, optimized code.\n-* Ease of Debugging::    Debugging ease-of-use at the source level.\n-* Character and Hollerith Constants::  A byte saved is a byte earned.\n-\n-\u001f\n-File: g77.info,  Node: Language Extensions,  Next: Compiler Options,  Up: Advantages Over f2c\n-\n-Language Extensions\n--------------------\n-\n-   `g77' offers several extensions to the Fortran language that `f2c'\n-doesn't.\n-\n-   However, `f2c' offers a few that `g77' doesn't, like fairly complete\n-support for `INTEGER*2'.  It is expected that `g77' will offer some or\n-all of these missing features at some time in the future.  (Version\n-0.5.18 of `g77' offers some rudimentary support for some of these\n-features.)\n-\n-\u001f\n-File: g77.info,  Node: Compiler Options,  Next: Compiler Speed,  Prev: Language Extensions,  Up: Advantages Over f2c\n-\n-Compiler Options\n-----------------\n-\n-   `g77' offers a whole bunch of compiler options that `f2c' doesn't.\n-\n-   However, `f2c' offers a few that `g77' doesn't, like an option to\n-generate code to check array subscripts at run time.  It is expected\n-that `g77' will offer some or all of these missing options at some time\n-in the future.\n-\n-\u001f\n-File: g77.info,  Node: Compiler Speed,  Next: Program Speed,  Prev: Compiler Options,  Up: Advantages Over f2c\n-\n-Compiler Speed\n---------------\n-\n-   Saving the steps of writing and then rereading C code is a big reason\n-why `g77' should be able to compile code much faster than using `f2c'\n-in conjunction with the equivalent invocation of `gcc'.\n-\n-   However, due to `g77''s youth, lots of self-checking is still being\n-performed.  As a result, this improvement is as yet unrealized (though\n-the potential seems to be there for quite a big speedup in the future).\n-It is possible that, as of version 0.5.18, `g77' is noticeably faster\n-compiling many Fortran source files than using `f2c' in conjunction\n-with `gcc'.\n-\n-\u001f\n-File: g77.info,  Node: Program Speed,  Next: Ease of Debugging,  Prev: Compiler Speed,  Up: Advantages Over f2c\n-\n-Program Speed\n--------------\n-\n-   `g77' has the potential to better optimize code than `f2c', even\n-when `gcc' is used to compile the output of `f2c', because `f2c' must\n-necessarily translate Fortran into a somewhat lower-level language (C)\n-that cannot preserve all the information that is potentially useful for\n-optimization, while `g77' can gather, preserve, and transmit that\n-information directly to the GBE.\n-\n-   For example, `g77' implements `ASSIGN' and assigned `GOTO' using\n-direct assignment of pointers to labels and direct jumps to labels,\n-whereas `f2c' maps the assigned labels to integer values and then uses\n-a C `switch' statement to encode the assigned `GOTO' statements.\n-\n-   However, as is typical, theory and reality don't quite match, at\n-least not in all cases, so it is still the case that `f2c' plus `gcc'\n-can generate code that is faster than `g77'.\n-\n-   Version 0.5.18 of `g77' offered default settings and options, via\n-patches to the `gcc' back end, that allow for better program speed,\n-though some of these improvements also affected the performance of\n-programs translated by `f2c' and then compiled by `g77''s version of\n-`gcc'.\n-\n-   Version 0.5.20 of `g77' offers further performance improvements, at\n-least one of which (alias analysis) is not generally applicable to\n-`f2c' (though `f2c' could presumably be changed to also take advantage\n-of this new capability of the `gcc' back end, assuming this is made\n-available in an upcoming release of `gcc').\n-\n-\u001f\n-File: g77.info,  Node: Ease of Debugging,  Next: Character and Hollerith Constants,  Prev: Program Speed,  Up: Advantages Over f2c\n-\n-Ease of Debugging\n------------------\n-\n-   Because `g77' compiles directly to assembler code like `gcc',\n-instead of translating to an intermediate language (C) as does `f2c',\n-support for debugging can be better for `g77' than `f2c'.\n-\n-   However, although `g77' might be somewhat more \"native\" in terms of\n-debugging support than `f2c' plus `gcc', there still are a lot of\n-things \"not quite right\".  Many of the important ones should be\n-resolved in the near future.\n-\n-   For example, `g77' doesn't have to worry about reserved names like\n-`f2c' does.  Given `FOR = WHILE', `f2c' must necessarily translate this\n-to something *other* than `for = while;', because C reserves those\n-words.\n-\n-   However, `g77' does still uses things like an extra level of\n-indirection for `ENTRY'-laden procedures--in this case, because the\n-back end doesn't yet support multiple entry points.\n-\n-   Another example is that, given\n-\n-     COMMON A, B\n-     EQUIVALENCE (B, C)\n-\n-the `g77' user should be able to access the variables directly, by name,\n-without having to traverse C-like structures and unions, while `f2c' is\n-unlikely to ever offer this ability (due to limitations in the C\n-language).\n-\n-   However, due to apparent bugs in the back end, `g77' currently\n-doesn't take advantage of this facility at all--it doesn't emit any\n-debugging information for `COMMON' and `EQUIVALENCE' areas, other than\n-information on the array of `char' it creates (and, in the case of\n-local `EQUIVALENCE', names) for each such area.\n-\n-   Yet another example is arrays.  `g77' represents them to the debugger\n-using the same \"dimensionality\" as in the source code, while `f2c' must\n-necessarily convert them all to one-dimensional arrays to fit into the\n-confines of the C language.  However, the level of support offered by\n-debuggers for interactive Fortran-style access to arrays as compiled by\n-`g77' can vary widely.  In some cases, it can actually be an advantage\n-that `f2c' converts everything to widely supported C semantics.\n-\n-   In fairness, `g77' could do many of the things `f2c' does to get\n-things working at least as well as `f2c'--for now, the developers\n-prefer making `g77' work the way they think it is supposed to, and\n-finding help improving the other products (the back end of `gcc';\n-`gdb'; and so on) to get things working properly.\n-\n-\u001f\n-File: g77.info,  Node: Character and Hollerith Constants,  Prev: Ease of Debugging,  Up: Advantages Over f2c\n-\n-Character and Hollerith Constants\n----------------------------------\n-\n-   To avoid the extensive hassle that would be needed to avoid this,\n-`f2c' uses C character constants to encode character and Hollerith\n-constants.  That means a constant like `'HELLO'' is translated to\n-`\"hello\"' in C, which further means that an extra null byte is present\n-at the end of the constant.  This null byte is superfluous.\n-\n-   `g77' does not generate such null bytes.  This represents significant\n-savings of resources, such as on systems where `/dev/null' or\n-`/dev/zero' represent bottlenecks in the systems' performance, because\n-`g77' simply asks for fewer zeros from the operating system than `f2c'.\n-\n-\u001f\n-File: g77.info,  Node: Block Data and Libraries,  Next: Loops,  Prev: Advantages Over f2c,  Up: Collected Fortran Wisdom\n-\n-Block Data and Libraries\n-========================\n-\n-   To ensure that block data program units are linked, especially a\n-concern when they are put into libraries, give each one a name (as in\n-`BLOCK DATA FOO') and make sure there is an `EXTERNAL FOO' statement in\n-every program unit that uses any common block initialized by the\n-corresponding `BLOCK DATA'.  `g77' currently compiles a `BLOCK DATA' as\n-if it were a `SUBROUTINE', that is, it generates an actual procedure\n-having the appropriate name.  The procedure does nothing but return\n-immediately if it happens to be called.  For `EXTERNAL FOO', where\n-`FOO' is not otherwise referenced in the same program unit, `g77'\n-assumes there exists a `BLOCK DATA FOO' in the program and ensures that\n-by generating a reference to it so the linker will make sure it is\n-present.  (Specifically, `g77' outputs in the data section a static\n-pointer to the external name `FOO'.)\n-\n-   The implementation `g77' currently uses to make this work is one of\n-the few things not compatible with `f2c' as currently shipped.  `f2c'\n-currently does nothing with `EXTERNAL FOO' except issue a warning that\n-`FOO' is not otherwise referenced, and for `BLOCK DATA FOO', f2c\n-doesn't generate a dummy procedure with the name `FOO'.  The upshot is\n-that you shouldn't mix `f2c' and `g77' in this particular case.  If you\n-use f2c to compile `BLOCK DATA FOO', then any `g77'-compiled program\n-unit that says `EXTERNAL FOO' will result in an unresolved reference\n-when linked.  If you do the opposite, then `FOO' might not be linked in\n-under various circumstances (such as when `FOO' is in a library, or\n-you're using a \"clever\" linker--so clever, it produces a broken program\n-with little or no warning by omitting initializations of global data\n-because they are contained in unreferenced procedures).\n-\n-   The changes you make to your code to make `g77' handle this\n-situation, however, appear to be a widely portable way to handle it.\n-That is, many systems permit it (as they should, since the FORTRAN 77\n-standard permits `EXTERNAL FOO' when `FOO' is a block data program\n-unit), and of the ones that might not link `BLOCK DATA FOO' under some\n-circumstances, most of them appear to do so once `EXTERNAL FOO' is\n-present in the appropriate program units.\n-\n-   Here is the recommended approach to modifying a program containing a\n-program unit such as the following:\n-\n-     BLOCK DATA FOO\n-     COMMON /VARS/ X, Y, Z\n-     DATA X, Y, Z / 3., 4., 5. /\n-     END\n-\n-If the above program unit might be placed in a library module, then\n-ensure that every program unit in every program that references that\n-particular `COMMON' area uses the `EXTERNAL' statement to force the\n-area to be initialized.\n-\n-   For example, change a program unit that starts with\n-\n-     INTEGER FUNCTION CURX()\n-     COMMON /VARS/ X, Y, Z\n-     CURX = X\n-     END\n-\n-so that it uses the `EXTERNAL' statement, as in:\n-\n-     INTEGER FUNCTION CURX()\n-     COMMON /VARS/ X, Y, Z\n-     EXTERNAL FOO\n-     CURX = X\n-     END\n-\n-That way, `CURX' is compiled by `g77' (and many other compilers) so\n-that the linker knows it must include `FOO', the `BLOCK DATA' program\n-unit that sets the initial values for the variables in `VAR', in the\n-executable program.\n-\n-\u001f\n-File: g77.info,  Node: Loops,  Next: Working Programs,  Prev: Block Data and Libraries,  Up: Collected Fortran Wisdom\n-\n-Loops\n-=====\n-\n-   The meaning of a `DO' loop in Fortran is precisely specified in the\n-Fortran standard...and is quite different from what many programmers\n-might expect.\n-\n-   In particular, Fortran `DO' loops are implemented as if the number\n-of trips through the loop is calculated *before* the loop is entered.\n-\n-   The number of trips for a loop is calculated from the START, END,\n-and INCREMENT values specified in a statement such as:\n-\n-     DO ITER = START, END, INCREMENT\n-\n-The trip count is evaluated using a fairly simple formula based on the\n-three values following the `=' in the statement, and it is that trip\n-count that is effectively decremented during each iteration of the loop.\n-If, at the beginning of an iteration of the loop, the trip count is\n-zero or negative, the loop terminates.  The per-loop-iteration\n-modifications to ITER are not related to determining whether to\n-terminate the loop.\n-\n-   There are two important things to remember about the trip count:\n-\n-   * It can be *negative*, in which case it is treated as if it was\n-     zero--meaning the loop is not executed at all.\n-\n-   * The type used to *calculate* the trip count is the same type as\n-     ITER, but the final calculation, and thus the type of the trip\n-     count itself, always is `INTEGER(KIND=1)'.\n-\n-   These two items mean that there are loops that cannot be written in\n-straightforward fashion using the Fortran `DO'.\n-\n-   For example, on a system with the canonical 32-bit two's-complement\n-implementation of `INTEGER(KIND=1)', the following loop will not work:\n-\n-     DO I = -2000000000, 2000000000\n-\n-Although the START and END values are well within the range of\n-`INTEGER(KIND=1)', the *trip count* is not.  The expected trip count is\n-40000000001, which is outside the range of `INTEGER(KIND=1)' on many\n-systems.\n-\n-   Instead, the above loop should be constructed this way:\n-\n-     I = -2000000000\n-     DO\n-       IF (I .GT. 2000000000) EXIT\n-       ...\n-       I = I + 1\n-     END DO\n-\n-The simple `DO' construct and the `EXIT' statement (used to leave the\n-innermost loop) are F90 features that `g77' supports.\n-\n-   Some Fortran compilers have buggy implementations of `DO', in that\n-they don't follow the standard.  They implement `DO' as a\n-straightforward translation to what, in C, would be a `for' statement.\n-Instead of creating a temporary variable to hold the trip count as\n-calculated at run time, these compilers use the iteration variable ITER\n-to control whether the loop continues at each iteration.\n-\n-   The bug in such an implementation shows up when the trip count is\n-within the range of the type of ITER, but the magnitude of `ABS(END) +\n-ABS(INCR)' exceeds that range.  For example:\n-\n-     DO I = 2147483600, 2147483647\n-\n-A loop started by the above statement will work as implemented by\n-`g77', but the use, by some compilers, of a more C-like implementation\n-akin to\n-\n-     for (i = 2147483600; i <= 2147483647; ++i)\n-\n-produces a loop that does not terminate, because `i' can never be\n-greater than 2147483647, since incrementing it beyond that value\n-overflows `i', setting it to -2147483648.  This is a large, negative\n-number that still is less than 2147483647.\n-\n-   Another example of unexpected behavior of `DO' involves using a\n-nonintegral iteration variable ITER, that is, a `REAL' variable.\n-Consider the following program:\n-\n-           DATA BEGIN, END, STEP /.1, .31, .007/\n-           DO 10 R = BEGIN, END, STEP\n-              IF (R .GT. END) PRINT *, R, ' .GT. ', END, '!!'\n-              PRINT *,R\n-     10    CONTINUE\n-           PRINT *,'LAST = ',R\n-           IF (R .LE. END) PRINT *, R, ' .LE. ', END, '!!'\n-           END\n-\n-A C-like view of `DO' would hold that the two \"exclamatory\" `PRINT'\n-statements are never executed.  However, this is the output of running\n-the above program as compiled by `g77' on a GNU/Linux ix86 system:\n-\n-      .100000001\n-      .107000001\n-      .114\n-      .120999999\n-      ...\n-      .289000005\n-      .296000004\n-      .303000003\n-     LAST =   .310000002\n-      .310000002 .LE.   .310000002!!\n-\n-   Note that one of the two checks in the program turned up an apparent\n-violation of the programmer's expectation--yet, the loop is correctly\n-implemented by `g77', in that it has 30 iterations.  This trip count of\n-30 is correct when evaluated using the floating-point representations\n-for the BEGIN, END, and INCR values (.1, .31, .007) on GNU/Linux ix86\n-are used.  On other systems, an apparently more accurate trip count of\n-31 might result, but, nevertheless, `g77' is faithfully following the\n-Fortran standard, and the result is not what the author of the sample\n-program above apparently expected.  (Such other systems might, for\n-different values in the `DATA' statement, violate the other\n-programmer's expectation, for example.)\n-\n-   Due to this combination of imprecise representation of\n-floating-point values and the often-misunderstood interpretation of\n-`DO' by standard-conforming compilers such as `g77', use of `DO' loops\n-with `REAL' iteration variables is not recommended.  Such use can be\n-caught by specifying `-Wsurprising'.  *Note Warning Options::, for more\n-information on this option.\n-\n-\u001f\n-File: g77.info,  Node: Working Programs,  Next: Overly Convenient Options,  Prev: Loops,  Up: Collected Fortran Wisdom\n-\n-Working Programs\n-================\n-\n-   Getting Fortran programs to work in the first place can be quite a\n-challenge--even when the programs already work on other systems, or\n-when using other compilers.\n-\n-   `g77' offers some facilities that might be useful for tracking down\n-bugs in such programs.\n-\n-* Menu:\n-\n-* Not My Type::\n-* Variables Assumed To Be Zero::\n-* Variables Assumed To Be Saved::\n-* Unwanted Variables::\n-* Unused Arguments::\n-* Surprising Interpretations of Code::\n-* Aliasing Assumed To Work::\n-* Output Assumed To Flush::\n-* Large File Unit Numbers::\n-\n-\u001f\n-File: g77.info,  Node: Not My Type,  Next: Variables Assumed To Be Zero,  Up: Working Programs\n-\n-Not My Type\n------------\n-\n-   A fruitful source of bugs in Fortran source code is use, or mis-use,\n-of Fortran's implicit-typing feature, whereby the type of a variable,\n-array, or function is determined by the first character of its name.\n-\n-   Simple cases of this include statements like `LOGX=9.227', without a\n-statement such as `REAL LOGX'.  In this case, `LOGX' is implicitly\n-given `INTEGER(KIND=1)' type, with the result of the assignment being\n-that it is given the value `9'.\n-\n-   More involved cases include a function that is defined starting with\n-a statement like `DOUBLE PRECISION FUNCTION IPS(...)'.  Any caller of\n-this function that does not also declare `IPS' as type `DOUBLE\n-PRECISION' (or, in GNU Fortran, `REAL(KIND=2)') is likely to assume it\n-returns `INTEGER', or some other type, leading to invalid results or\n-even program crashes.\n-\n-   The `-Wimplicit' option might catch failures to properly specify the\n-types of variables, arrays, and functions in the code.\n-\n-   However, in code that makes heavy use of Fortran's implicit-typing\n-facility, this option might produce so many warnings about cases that\n-are working, it would be hard to find the one or two that represent\n-bugs.  This is why so many experienced Fortran programmers strongly\n-recommend widespread use of the `IMPLICIT NONE' statement, despite it\n-not being standard FORTRAN 77, to completely turn off implicit typing.\n-(`g77' supports `IMPLICIT NONE', as do almost all FORTRAN 77 compilers.)\n-\n-   Note that `-Wimplicit' catches only implicit typing of *names*.  It\n-does not catch implicit typing of expressions such as `X**(2/3)'.  Such\n-expressions can be buggy as well--in fact, `X**(2/3)' is equivalent to\n-`X**0', due to the way Fortran expressions are given types and then\n-evaluated.  (In this particular case, the programmer probably wanted\n-`X**(2./3.)'.)\n-\n-\u001f\n-File: g77.info,  Node: Variables Assumed To Be Zero,  Next: Variables Assumed To Be Saved,  Prev: Not My Type,  Up: Working Programs\n-\n-Variables Assumed To Be Zero\n-----------------------------\n-\n-   Many Fortran programs were developed on systems that provided\n-automatic initialization of all, or some, variables and arrays to zero.\n-As a result, many of these programs depend, sometimes inadvertently, on\n-this behavior, though to do so violates the Fortran standards.\n-\n-   You can ask `g77' for this behavior by specifying the\n-`-finit-local-zero' option when compiling Fortran code.  (You might\n-want to specify `-fno-automatic' as well, to avoid code-size inflation\n-for non-optimized compilations.)\n-\n-   Note that a program that works better when compiled with the\n-`-finit-local-zero' option is almost certainly depending on a\n-particular system's, or compiler's, tendency to initialize some\n-variables to zero.  It might be worthwhile finding such cases and\n-fixing them, using techniques such as compiling with the `-O\n--Wuninitialized' options using `g77'.\n-\n-\u001f\n-File: g77.info,  Node: Variables Assumed To Be Saved,  Next: Unwanted Variables,  Prev: Variables Assumed To Be Zero,  Up: Working Programs\n-\n-Variables Assumed To Be Saved\n------------------------------\n-\n-   Many Fortran programs were developed on systems that saved the\n-values of all, or some, variables and arrays across procedure calls.\n-As a result, many of these programs depend, sometimes inadvertently, on\n-being able to assign a value to a variable, perform a `RETURN' to a\n-calling procedure, and, upon subsequent invocation, reference the\n-previously assigned variable to obtain the value.\n-\n-   They expect this despite not using the `SAVE' statement to specify\n-that the value in a variable is expected to survive procedure returns\n-and calls.  Depending on variables and arrays to retain values across\n-procedure calls without using `SAVE' to require it violates the Fortran\n-standards.\n-\n-   You can ask `g77' to assume `SAVE' is specified for all relevant\n-(local) variables and arrays by using the `-fno-automatic' option.\n-\n-   Note that a program that works better when compiled with the\n-`-fno-automatic' option is almost certainly depending on not having to\n-use the `SAVE' statement as required by the Fortran standard.  It might\n-be worthwhile finding such cases and fixing them, using techniques such\n-as compiling with the `-O -Wuninitialized' options using `g77'.\n-\n-\u001f\n-File: g77.info,  Node: Unwanted Variables,  Next: Unused Arguments,  Prev: Variables Assumed To Be Saved,  Up: Working Programs\n-\n-Unwanted Variables\n-------------------\n-\n-   The `-Wunused' option can find bugs involving implicit typing,\n-sometimes more easily than using `-Wimplicit' in code that makes heavy\n-use of implicit typing.  An unused variable or array might indicate\n-that the spelling for its declaration is different from that of its\n-intended uses.\n-\n-   Other than cases involving typos, unused variables rarely indicate\n-actual bugs in a program.  However, investigating such cases thoroughly\n-has, on occasion, led to the discovery of code that had not been\n-completely written--where the programmer wrote declarations as needed\n-for the whole algorithm, wrote some or even most of the code for that\n-algorithm, then got distracted and forgot that the job was not complete.\n-\n-\u001f\n-File: g77.info,  Node: Unused Arguments,  Next: Surprising Interpretations of Code,  Prev: Unwanted Variables,  Up: Working Programs\n-\n-Unused Arguments\n-----------------\n-\n-   As with unused variables, It is possible that unused arguments to a\n-procedure might indicate a bug.  Compile with `-W -Wunused' option to\n-catch cases of unused arguments.\n-\n-   Note that `-W' also enables warnings regarding overflow of\n-floating-point constants under certain circumstances.\n-\n-\u001f\n-File: g77.info,  Node: Surprising Interpretations of Code,  Next: Aliasing Assumed To Work,  Prev: Unused Arguments,  Up: Working Programs\n-\n-Surprising Interpretations of Code\n-----------------------------------\n-\n-   The `-Wsuprising' option can help find bugs involving expression\n-evaluation or in the way `DO' loops with non-integral iteration\n-variables are handled.  Cases found by this option might indicate a\n-difference of interpretation between the author of the code involved,\n-and a standard-conforming compiler such as `g77'.  Such a difference\n-might produce actual bugs.\n-\n-   In any case, changing the code to explicitly do what the programmer\n-might have expected it to do, so `g77' and other compilers are more\n-likely to follow the programmer's expectations, might be worthwhile,\n-especially if such changes make the program work better.\n-\n-\u001f\n-File: g77.info,  Node: Aliasing Assumed To Work,  Next: Output Assumed To Flush,  Prev: Surprising Interpretations of Code,  Up: Working Programs\n-\n-Aliasing Assumed To Work\n-------------------------\n-\n-   The `-falias-check', `-fargument-alias', `-fargument-noalias', and\n-`-fno-argument-noalias-global' options, introduced in version 0.5.20 and\n-`g77''s version 2.7.2.2.f.2 of `gcc', control the assumptions regarding\n-aliasing (overlapping) of writes and reads to main memory (core) made\n-by the `gcc' back end.\n-\n-   They are effective only when compiling with `-O' (specifying any\n-level other than `-O0') or with `-falias-check'.\n-\n-   The default for Fortran code is `-fargument-noalias-global'.  (The\n-default for C code and code written in other C-based languages is\n-`-fargument-alias'.  These defaults apply regardless of whether you use\n-`g77' or `gcc' to compile your code.)\n-\n-   Note that, on some systems, compiling with `-fforce-addr' in effect\n-can produce more optimal code when the default aliasing options are in\n-effect (and when optimization is enabled).\n-\n-   If your program is not working when compiled with optimization, it\n-is possible it is violating the Fortran standards (77 and 90) by\n-relying on the ability to \"safely\" modify variables and arrays that are\n-aliased, via procedure calls, to other variables and arrays, without\n-using `EQUIVALENCE' to explicitly set up this kind of aliasing.\n-\n-   (The FORTRAN 77 standard's prohibition of this sort of overlap,\n-generally referred to therein as \"storage assocation\", appears in\n-Sections 15.9.3.6.  This prohibition allows implementations, such as\n-`g77', to, for example, implement the passing of procedures and even\n-values in `COMMON' via copy operations into local, perhaps more\n-efficiently accessed temporaries at entry to a procedure, and, where\n-appropriate, via copy operations back out to their original locations\n-in memory at exit from that procedure, without having to take into\n-consideration the order in which the local copies are updated by the\n-code, among other things.)\n-\n-   To test this hypothesis, try compiling your program with the\n-`-fargument-alias' option, which causes the compiler to revert to\n-assumptions essentially the same as made by versions of `g77' prior to\n-0.5.20.\n-\n-   If the program works using this option, that strongly suggests that\n-the bug is in your program.  Finding and fixing the bug(s) should\n-result in a program that is more standard-conforming and that can be\n-compiled by `g77' in a way that results in a faster executable.\n-\n-   (You might want to try compiling with `-fargument-noalias', a kind\n-of half-way point, to see if the problem is limited to aliasing between\n-dummy arguments and `COMMON' variables--this option assumes that such\n-aliasing is not done, while still allowing aliasing among dummy\n-arguments.)\n-\n-   An example of aliasing that is invalid according to the standards is\n-shown in the following program, which might *not* produce the expected\n-results when executed:\n-\n-     I = 1\n-     CALL FOO(I, I)\n-     PRINT *, I\n-     END\n-     \n-     SUBROUTINE FOO(J, K)\n-     J = J + K\n-     K = J * K\n-     PRINT *, J, K\n-     END\n-\n-   The above program attempts to use the temporary aliasing of the `J'\n-and `K' arguments in `FOO' to effect a pathological behavior--the\n-simultaneous changing of the values of *both* `J' and `K' when either\n-one of them is written.\n-\n-   The programmer likely expects the program to print these values:\n-\n-     2  4\n-     4\n-\n-   However, since the program is not standard-conforming, an\n-implementation's behavior when running it is undefined, because\n-subroutine `FOO' modifies at least one of the arguments, and they are\n-aliased with each other.  (Even if one of the assignment statements was\n-deleted, the program would still violate these rules.  This kind of\n-on-the-fly aliasing is permitted by the standard only when none of the\n-aliased items are defined, or written, while the aliasing is in effect.)\n-\n-   As a practical example, an optimizing compiler might schedule the `J\n-=' part of the second line of `FOO' *after* the reading of `J' and `K'\n-for the `J * K' expression, resulting in the following output:\n-\n-     2  2\n-     2\n-\n-   Essentially, compilers are promised (by the standard and, therefore,\n-by programmers who write code they claim to be standard-conforming)\n-that if they cannot detect aliasing via static analysis of a single\n-program unit's `EQUIVALENCE' and `COMMON' statements, no such aliasing\n-exists.  In such cases, compilers are free to assume that an assignment\n-to one variable will not change the value of another variable, allowing\n-it to avoid generating code to re-read the value of the other variable,\n-to re-schedule reads and writes, and so on, to produce a faster\n-executable.\n-\n-   The same promise holds true for arrays (as seen by the called\n-procedure)--an element of one dummy array cannot be aliased with, or\n-overlap, any element of another dummy array or be in a `COMMON' area\n-known to the procedure.\n-\n-   (These restrictions apply only when the procedure defines, or writes\n-to, one of the aliased variables or arrays.)\n-\n-   Unfortunately, there is no way to find *all* possible cases of\n-violations of the prohibitions against aliasing in Fortran code.\n-Static analysis is certainly imperfect, as is run-time analysis, since\n-neither can catch all violations.  (Static analysis can catch all\n-likely violations, and some that might never actually happen, while\n-run-time analysis can catch only those violations that actually happen\n-during a particular run.  Neither approach can cope with programs\n-mixing Fortran code with routines written in other languages, however.)\n-\n-   Currently, `g77' provides neither static nor run-time facilities to\n-detect any cases of this problem, although other products might.\n-Run-time facilities are more likely to be offered by future versions of\n-`g77', though patches improving `g77' so that it provides either form\n-of detection are welcome.\n-\n-\u001f\n-File: g77.info,  Node: Output Assumed To Flush,  Next: Large File Unit Numbers,  Prev: Aliasing Assumed To Work,  Up: Working Programs\n-\n-Output Assumed To Flush\n------------------------\n-\n-   For several versions prior to 0.5.20, `g77' configured its version\n-of the `libf2c' run-time library so that one of its configuration\n-macros, `ALWAYS_FLUSH', was defined.\n-\n-   This was done as a result of a belief that many programs expected\n-output to be flushed to the operating system (under UNIX, via the\n-`fflush()' library call) with the result that errors, such as disk\n-full, would be immediately flagged via the relevant `ERR=' and\n-`IOSTAT=' mechanism.\n-\n-   Because of the adverse effects this approach had on the performance\n-of many programs, `g77' no longer configures `libf2c' to always flush\n-output.\n-\n-   If your program depends on this behavior, either insert the\n-appropriate `CALL FLUSH' statements, or modify the sources to the\n-`libf2c', rebuild and reinstall `g77', and relink your programs with\n-the modified library.\n-\n-   (Ideally, `libf2c' would offer the choice at run-time, so that a\n-compile-time option to `g77' or `f2c' could result in generating the\n-appropriate calls to flushing or non-flushing library routines.)\n-\n-   *Note Always Flush Output::, for information on how to modify the\n-`g77' source tree so that a version of `libf2c' can be built and\n-installed with the `ALWAYS_FLUSH' macro defined.\n-\n-\u001f\n-File: g77.info,  Node: Large File Unit Numbers,  Prev: Output Assumed To Flush,  Up: Working Programs\n-\n-Large File Unit Numbers\n------------------------\n-\n-   If your program crashes at run time with a message including the\n-text `illegal unit number', that probably is a message from the\n-run-time library, `libf2c', used, and distributed with, `g77'.\n-\n-   The message means that your program has attempted to use a file unit\n-number that is out of the range accepted by `libf2c'.  Normally, this\n-range is 0 through 99, and the high end of the range is controlled by a\n-`libf2c' source-file macro named `MXUNIT'.\n-\n-   If you can easily change your program to use unit numbers in the\n-range 0 through 99, you should do so.\n-\n-   Otherwise, see *Note Larger File Unit Numbers::, for information on\n-how to change `MXUNIT' in `libf2c' so you can build and install a new\n-version of `libf2c' that supports the larger unit numbers you need.\n-\n-   *Note:* While `libf2c' places a limit on the range of Fortran\n-file-unit numbers, the underlying library and operating system might\n-impose different kinds of limits.  For example, some systems limit the\n-number of files simultaneously open by a running program.  Information\n-on how to increase these limits should be found in your system's\n-documentation.\n-\n-\u001f\n-File: g77.info,  Node: Overly Convenient Options,  Next: Faster Programs,  Prev: Working Programs,  Up: Collected Fortran Wisdom\n-\n-Overly Convenient Command-line Options\n-======================================\n-\n-   These options should be used only as a quick-and-dirty way to\n-determine how well your program will run under different compilation\n-models without having to change the source.  Some are more problematic\n-than others, depending on how portable and maintainable you want the\n-program to be (and, of course, whether you are allowed to change it at\n-all is crucial).\n-\n-   You should not continue to use these command-line options to compile\n-a given program, but rather should make changes to the source code:\n-\n-`-finit-local-zero'\n-     (This option specifies that any uninitialized local variables and\n-     arrays have default initialization to binary zeros.)\n-\n-     Many other compilers do this automatically, which means lots of\n-     Fortran code developed with those compilers depends on it.\n-\n-     It is safer (and probably would produce a faster program) to find\n-     the variables and arrays that need such initialization and provide\n-     it explicitly via `DATA', so that `-finit-local-zero' is not\n-     needed.\n-\n-     Consider using `-Wuninitialized' (which requires `-O') to find\n-     likely candidates, but do not specify `-finit-local-zero' or\n-     `-fno-automatic', or this technique won't work.\n-\n-`-fno-automatic'\n-     (This option specifies that all local variables and arrays are to\n-     be treated as if they were named in `SAVE' statements.)\n-\n-     Many other compilers do this automatically, which means lots of\n-     Fortran code developed with those compilers depends on it.\n-\n-     The effect of this is that all non-automatic variables and arrays\n-     are made static, that is, not placed on the stack or in heap\n-     storage.  This might cause a buggy program to appear to work\n-     better.  If so, rather than relying on this command-line option\n-     (and hoping all compilers provide the equivalent one), add `SAVE'\n-     statements to some or all program unit sources, as appropriate.\n-     Consider using `-Wuninitialized' (which requires `-O') to find\n-     likely candidates, but do not specify `-finit-local-zero' or\n-     `-fno-automatic', or this technique won't work.\n-\n-     The default is `-fautomatic', which tells `g77' to try and put\n-     variables and arrays on the stack (or in fast registers) where\n-     possible and reasonable.  This tends to make programs faster.\n-\n-     *Note:* Automatic variables and arrays are not affected by this\n-     option.  These are variables and arrays that are *necessarily*\n-     automatic, either due to explicit statements, or due to the way\n-     they are declared.  Examples include local variables and arrays\n-     not given the `SAVE' attribute in procedures declared `RECURSIVE',\n-     and local arrays declared with non-constant bounds (automatic\n-     arrays).  Currently, `g77' supports only automatic arrays, not\n-     `RECURSIVE' procedures or other means of explicitly specifying\n-     that variables or arrays are automatic.\n-\n-`-fugly'\n-     Fix the source code so that `-fno-ugly' will work.  Note that, for\n-     many programs, it is difficult to practically avoid using the\n-     features enabled via `-fugly-init', and these features pose the\n-     lowest risk of writing nonportable code, among the various \"ugly\"\n-     features.\n-\n-`-fGROUP-intrinsics-hide'\n-     Change the source code to use `EXTERNAL' for any external procedure\n-     that might be the name of an intrinsic.  It is easy to find these\n-     using `-fGROUP-intrinsics-disable'.\n-\n-\u001f\n-File: g77.info,  Node: Faster Programs,  Prev: Overly Convenient Options,  Up: Collected Fortran Wisdom\n-\n-Faster Programs\n-===============\n-\n-   Aside from the usual `gcc' options, such as `-O', `-ffast-math', and\n-so on, consider trying some of the following approaches to speed up\n-your program (once you get it working).\n-\n-* Menu:\n-\n-* Aligned Data::\n-* Prefer Automatic Uninitialized Variables::\n-* Avoid f2c Compatibility::\n-* Use Submodel Options::\n-\n-\u001f\n-File: g77.info,  Node: Aligned Data,  Next: Prefer Automatic Uninitialized Variables,  Up: Faster Programs\n-\n-Aligned Data\n-------------\n-\n-   On some systems, such as those with Pentium Pro CPUs, programs that\n-make heavy use of `REAL(KIND=2)' (`DOUBLE PRECISION') might run much\n-slower than possible due to the compiler not aligning these 64-bit\n-values to 64-bit boundaries in memory.  (The effect also is present,\n-though to a lesser extent, on the 586 (Pentium) architecture.)\n-\n-   The Intel x86 architecture generally ensures that these programs will\n-work on all its implementations, but particular implementations (such\n-as Pentium Pro) perform better with more strict alignment.  (Such\n-behavior isn't unique to the Intel x86 architecture.)  Other\n-architectures might *demand* 64-bit alignment of 64-bit data.\n-\n-   There are a variety of approaches to use to address this problem:\n-\n-   * Order your `COMMON' and `EQUIVALENCE' areas such that the\n-     variables and arrays with the widest alignment guidelines come\n-     first.\n-\n-     For example, on most systems, this would mean placing\n-     `COMPLEX(KIND=2)', `REAL(KIND=2)', and `INTEGER(KIND=2)' entities\n-     first, followed by `REAL(KIND=1)', `INTEGER(KIND=1)', and\n-     `LOGICAL(KIND=1)' entities, then `INTEGER(KIND=6)' entities, and\n-     finally `CHARACTER' and `INTEGER(KIND=3)' entities.\n-\n-     The reason to use such placement is it makes it more likely that\n-     your data will be aligned properly, without requiring you to do\n-     detailed analysis of each aggregate (`COMMON' and `EQUIVALENCE')\n-     area.\n-\n-     Specifically, on systems where the above guidelines are\n-     appropriate, placing `CHARACTER' entities before `REAL(KIND=2)'\n-     entities can work just as well, but only if the number of bytes\n-     occupied by the `CHARACTER' entities is divisible by the\n-     recommended alignment for `REAL(KIND=2)'.\n-\n-     By ordering the placement of entities in aggregate areas according\n-     to the simple guidelines above, you avoid having to carefully\n-     count the number of bytes occupied by each entity to determine\n-     whether the actual alignment of each subsequent entity meets the\n-     alignment guidelines for the type of that entity.\n-\n-     If you don't ensure correct alignment of `COMMON' elements, the\n-     compiler may be forced by some systems to violate the Fortran\n-     semantics by adding padding to get `DOUBLE PRECISION' data\n-     properly aligned.  If the unfortunate practice is employed of\n-     overlaying different types of data in the `COMMON' block, the\n-     different variants of this block may become misaligned with\n-     respect to each other.  Even if your platform doesn't require\n-     strict alignment, `COMMON' should be laid out as above for\n-     portability.  (Unfortunately the FORTRAN 77 standard didn't\n-     anticipate this possible requirement, which is\n-     compiler-independent on a given platform.)\n-\n-   * Use the (x86-specific) `-malign-double' option when compiling\n-     programs for the Pentium and Pentium Pro architectures (called 586\n-     and 686 in the `gcc' configuration subsystem).  The warning about\n-     this in the `gcc' manual isn't generally relevant to Fortran, but\n-     using it will force `COMMON' to be padded if necessary to align\n-     `DOUBLE PRECISION' data.\n-\n-   * Ensure that `crt0.o' or `crt1.o' on your system guarantees a 64-bit\n-     aligned stack for `main()'.  The recent one from GNU (`glibc2')\n-     will do this on x86 systems, but we don't know of any other x86\n-     setups where it will be right.  Read your system's documentation\n-     to determine if it is appropriate to upgrade to a more recent\n-     version to obtain the optimal alignment.\n-\n-   Progress is being made on making this work \"out of the box\" on\n-future versions of `g77', `gcc', and some of the relevant operating\n-systems (such as GNU/Linux).\n-\n-\u001f\n-File: g77.info,  Node: Prefer Automatic Uninitialized Variables,  Next: Avoid f2c Compatibility,  Prev: Aligned Data,  Up: Faster Programs\n-\n-Prefer Automatic Uninitialized Variables\n-----------------------------------------\n-\n-   If you're using `-fno-automatic' already, you probably should change\n-your code to allow compilation with `-fautomatic' (the default), to\n-allow the program to run faster.\n-\n-   Similarly, you should be able to use `-fno-init-local-zero' (the\n-default) instead of `-finit-local-zero'.  This is because it is rare\n-that every variable affected by these options in a given program\n-actually needs to be so affected.\n-\n-   For example, `-fno-automatic', which effectively `SAVE's every local\n-non-automatic variable and array, affects even things like `DO'\n-iteration variables, which rarely need to be `SAVE'd, and this often\n-reduces run-time performances.  Similarly, `-fno-init-local-zero'\n-forces such variables to be initialized to zero--when `SAVE'd (such as\n-when `-fno-automatic'), this by itself generally affects only startup\n-time for a program, but when not `SAVE'd, it can slow down the\n-procedure every time it is called.\n-\n-   *Note Overly Convenient Command-Line Options: Overly Convenient\n-Options, for information on the `-fno-automatic' and\n-`-finit-local-zero' options and how to convert their use into selective\n-changes in your own code.\n-\n-\u001f\n-File: g77.info,  Node: Avoid f2c Compatibility,  Next: Use Submodel Options,  Prev: Prefer Automatic Uninitialized Variables,  Up: Faster Programs\n-\n-Avoid f2c Compatibility\n------------------------\n-\n-   If you aren't linking with any code compiled using `f2c', try using\n-the `-fno-f2c' option when compiling *all* the code in your program.\n-(Note that `libf2c' is *not* an example of code that is compiled using\n-`f2c'--it is compiled by a C compiler, typically `gcc'.)\n-\n-\u001f\n-File: g77.info,  Node: Use Submodel Options,  Prev: Avoid f2c Compatibility,  Up: Faster Programs\n-\n-Use Submodel Options\n---------------------\n-\n-   Using an appropriate `-m' option to generate specific code for your\n-CPU may be worthwhile, though it may mean the executable won't run on\n-other versions of the CPU that don't support the same instruction set.\n-*Note Hardware Models and Configurations: (gcc)Submodel Options.\n-\n-   For recent CPUs that don't have explicit support in the released\n-version of `gcc', it may still be possible to get improvements.  For\n-instance, the flags recommended for 586/686 (Pentium(Pro)) chips for\n-building the Linux kernel are:\n-\n-     -m486 -malign-loops=2 -malign-jumps=2 -malign-functions=2\n-     -fomit-frame-pointer\n-\n-`-fomit-frame-pointer' will, however, inhibit debugging on x86 systems.\n-\n-\u001f\n-File: g77.info,  Node: Trouble,  Next: Open Questions,  Prev: Collected Fortran Wisdom,  Up: Top\n-\n-Known Causes of Trouble with GNU Fortran\n-****************************************\n-\n-   This section describes known problems that affect users of GNU\n-Fortran.  Most of these are not GNU Fortran bugs per se--if they were,\n-we would fix them.  But the result for a user might be like the result\n-of a bug.\n-\n-   Some of these problems are due to bugs in other software, some are\n-missing features that are too much work to add, and some are places\n-where people's opinions differ as to what is best.\n-\n-   Information on bugs that show up when configuring, porting, building,\n-or installing `g77' is not provided here.  *Note Problems Installing::.\n-\n-   To find out about major bugs discovered in the current release and\n-possible workarounds for them, retrieve\n-`ftp://alpha.gnu.ai.mit.edu/g77.plan'.\n-\n-   (Note that some of this portion of the manual is lifted directly\n-from the `gcc' manual, with minor modifications to tailor it to users\n-of `g77'.  Anytime a bug seems to have more to do with the `gcc'\n-portion of `g77', *Note Known Causes of Trouble with GNU CC:\n-(gcc)Trouble.)\n-\n-* Menu:\n-\n-* But-bugs::         Bugs really in other programs or elsewhere.\n-* Actual Bugs::      Bugs and misfeatures we will fix later.\n-* Missing Features:: Features we already know we want to add later.\n-* Disappointments::  Regrettable things we can't change.\n-* Non-bugs::         Things we think are right, but some others disagree.\n-* Warnings and Errors::  Which problems in your code get warnings,\n-                        and which get errors.\n-"}, {"sha": "e81f43ab8e76c34da9df9ad50707260757e7b93f", "filename": "gcc/f/g77.info-16", "status": "removed", "additions": 0, "deletions": 1210, "changes": 1210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-16", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-16", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-16?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2", "patch": "@@ -1,1210 +0,0 @@\n-This is Info file g77.info, produced by Makeinfo version 1.68 from the\n-input file g77.texi.\n-\n-   This file explains how to use the GNU Fortran system.\n-\n-   Published by the Free Software Foundation 59 Temple Place - Suite 330\n-Boston, MA 02111-1307 USA\n-\n-   Copyright (C) 1995-1997 Free Software Foundation, Inc.\n-\n-   Permission is granted to make and distribute verbatim copies of this\n-manual provided the copyright notice and this permission notice are\n-preserved on all copies.\n-\n-   Permission is granted to copy and distribute modified versions of\n-this manual under the conditions for verbatim copying, provided also\n-that the sections entitled \"GNU General Public License,\" \"Funding for\n-Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n-included exactly as in the original, and provided that the entire\n-resulting derived work is distributed under the terms of a permission\n-notice identical to this one.\n-\n-   Permission is granted to copy and distribute translations of this\n-manual into another language, under the above conditions for modified\n-versions, except that the sections entitled \"GNU General Public\n-License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n-`Look And Feel'\", and this permission notice, may be included in\n-translations approved by the Free Software Foundation instead of in the\n-original English.\n-\n-   Contributed by James Craig Burley (<burley@gnu.ai.mit.edu>).\n-Inspired by a first pass at translating `g77-0.5.16/f/DOC' that was\n-contributed to Craig by David Ronis (<ronis@onsager.chem.mcgill.ca>).\n-\n-INFO-DIR-SECTION Fortran Programming\n-START-INFO-DIR-ENTRY\n-* g77: (g77).               The GNU Fortran compilation system.\n-END-INFO-DIR-ENTRY\n-\n-\u001f\n-File: g77.info,  Node: But-bugs,  Next: Actual Bugs,  Up: Trouble\n-\n-Bugs Not In GNU Fortran\n-=======================\n-\n-   These are bugs to which the maintainers often have to reply, \"but\n-that isn't a bug in `g77'...\".  Some of these already are fixed in new\n-versions of other software; some still need to be fixed; some are\n-problems with how `g77' is installed or is being used; some are the\n-result of bad hardware that causes software to misbehave in sometimes\n-bizarre ways; some just cannot be addressed at this time until more is\n-known about the problem.\n-\n-   Please don't re-report these bugs to the `g77' maintainers--if you\n-must remind someone how important it is to you that the problem be\n-fixed, talk to the people responsible for the other products identified\n-below, but preferably only after you've tried the latest versions of\n-those products.  The `g77' maintainers have their hands full working on\n-just fixing and improving `g77', without serving as a clearinghouse for\n-all bugs that happen to affect `g77' users.\n-\n-   *Note Collected Fortran Wisdom::, for information on behavior of\n-Fortran programs, and the programs that compile them, that might be\n-*thought* to indicate bugs.\n-\n-* Menu:\n-\n-* Signal 11 and Friends::  Strange behavior by any software.\n-* Cannot Link Fortran Programs::  Unresolved references.\n-* Large Common Blocks::    Problems on older GNU/Linux systems.\n-* Debugger Problems::      When the debugger crashes.\n-* NeXTStep Problems::      Misbehaving executables.\n-* Stack Overflow::         More misbehaving executables.\n-* Nothing Happens::        Less behaving executables.\n-* Strange Behavior at Run Time::  Executables misbehaving due to\n-                            bugs in your program.\n-* Floating-point Errors::  The results look wrong, but....\n-\n-\u001f\n-File: g77.info,  Node: Signal 11 and Friends,  Next: Cannot Link Fortran Programs,  Up: But-bugs\n-\n-Signal 11 and Friends\n----------------------\n-\n-   A whole variety of strange behaviors can occur when the software, or\n-the way you are using the software, stresses the hardware in a way that\n-triggers hardware bugs.  This might seem hard to believe, but it\n-happens frequently enough that there exist documents explaining in\n-detail what the various causes of the problems are, what typical\n-symptoms look like, and so on.\n-\n-   Generally these problems are referred to in this document as \"signal\n-11\" crashes, because the Linux kernel, running on the most popular\n-hardware (the Intel x86 line), often stresses the hardware more than\n-other popular operating systems.  When hardware problems do occur under\n-GNU/Linux on x86 systems, these often manifest themselves as \"signal 11\"\n-problems, as illustrated by the following diagnostic:\n-\n-     sh# g77 myprog.f\n-     gcc: Internal compiler error: program f771 got fatal signal 11\n-     sh#\n-\n-   It is *very* important to remember that the above message is *not*\n-the only one that indicates a hardware problem, nor does it always\n-indicate a hardware problem.\n-\n-   In particular, on systems other than those running the Linux kernel,\n-the message might appear somewhat or very different, as it will if the\n-error manifests itself while running a program other than the `g77'\n-compiler.  For example, it will appear somewhat different when running\n-your program, when running Emacs, and so on.\n-\n-   How to cope with such problems is well beyond the scope of this\n-manual.\n-\n-   However, users of Linux-based systems (such as GNU/Linux) should\n-review `http://www.bitwizard.nl/sig11', a source of detailed\n-information on diagnosing hardware problems, by recognizing their\n-common symptoms.\n-\n-   Users of other operating systems and hardware might find this\n-reference useful as well.  If you know of similar material for another\n-hardware/software combination, please let us know so we can consider\n-including a reference to it in future versions of this manual.\n-\n-\u001f\n-File: g77.info,  Node: Cannot Link Fortran Programs,  Next: Large Common Blocks,  Prev: Signal 11 and Friends,  Up: But-bugs\n-\n-Cannot Link Fortran Programs\n-----------------------------\n-\n-   On some systems, perhaps just those with out-of-date (shared?)\n-libraries, unresolved-reference errors happen when linking\n-`g77'-compiled programs (which should be done using `g77').\n-\n-   If this happens to you, try appending `-lc' to the command you use\n-to link the program, e.g. `g77 foo.f -lc'.  `g77' already specifies\n-`-lf2c -lm' when it calls the linker, but it cannot also specify `-lc'\n-because not all systems have a file named `libc.a'.\n-\n-   It is unclear at this point whether there are legitimately installed\n-systems where `-lf2c -lm' is insufficient to resolve code produced by\n-`g77'.\n-\n-   If your program doesn't link due to unresolved references to names\n-like `_main', make sure you're using the `g77' command to do the link,\n-since this command ensures that the necessary libraries are loaded by\n-specifying `-lf2c -lm' when it invokes the `gcc' command to do the\n-actual link.  (Use the `-v' option to discover more about what actually\n-happens when you use the `g77' and `gcc' commands.)\n-\n-   Also, try specifying `-lc' as the last item on the `g77' command\n-line, in case that helps.\n-\n-\u001f\n-File: g77.info,  Node: Large Common Blocks,  Next: Debugger Problems,  Prev: Cannot Link Fortran Programs,  Up: But-bugs\n-\n-Large Common Blocks\n--------------------\n-\n-   On some older GNU/Linux systems, programs with common blocks larger\n-than 16MB cannot be linked without some kind of error message being\n-produced.\n-\n-   This is a bug in older versions of `ld', fixed in more recent\n-versions of `binutils', such as version 2.6.\n-\n-\u001f\n-File: g77.info,  Node: Debugger Problems,  Next: NeXTStep Problems,  Prev: Large Common Blocks,  Up: But-bugs\n-\n-Debugger Problems\n------------------\n-\n-   There are some known problems when using `gdb' on code compiled by\n-`g77'.  Inadequate investigation as of the release of 0.5.16 results in\n-not knowing which products are the culprit, but `gdb-4.14' definitely\n-crashes when, for example, an attempt is made to print the contents of\n-a `COMPLEX(KIND=2)' dummy array, on at least some GNU/Linux machines,\n-plus some others.\n-\n-\u001f\n-File: g77.info,  Node: NeXTStep Problems,  Next: Stack Overflow,  Prev: Debugger Problems,  Up: But-bugs\n-\n-NeXTStep Problems\n------------------\n-\n-   Developers of Fortran code on NeXTStep (all architectures) have to\n-watch out for the following problem when writing programs with large,\n-statically allocated (i.e. non-stack based) data structures (common\n-blocks, saved arrays).\n-\n-   Due to the way the native loader (`/bin/ld') lays out data\n-structures in virtual memory, it is very easy to create an executable\n-wherein the `__DATA' segment overlaps (has addresses in common) with\n-the `UNIX STACK' segment.\n-\n-   This leads to all sorts of trouble, from the executable simply not\n-executing, to bus errors.  The NeXTStep command line tool `ebadexec'\n-points to the problem as follows:\n-\n-     % /bin/ebadexec a.out\n-     /bin/ebadexec: __LINKEDIT segment (truncated address = 0x3de000\n-     rounded size = 0x2a000) of executable file: a.out overlaps with UNIX\n-     STACK segment (truncated address = 0x400000 rounded size =\n-     0x3c00000) of executable file: a.out\n-\n-   (In the above case, it is the `__LINKEDIT' segment that overlaps the\n-stack segment.)\n-\n-   This can be cured by assigning the `__DATA' segment (virtual)\n-addresses beyond the stack segment.  A conservative estimate for this\n-is from address 6000000 (hexadecimal) onwards--this has always worked\n-for me [Toon Moene]:\n-\n-     % g77 -segaddr __DATA 6000000 test.f\n-     % ebadexec a.out\n-     ebadexec: file: a.out appears to be executable\n-     %\n-\n-   Browsing through `gcc/f/Makefile.in', you will find that the `f771'\n-program itself also has to be linked with these flags--it has large\n-statically allocated data structures.  (Version 0.5.18 reduces this\n-somewhat, but probably not enough.)\n-\n-   (The above item was contributed by Toon Moene\n-(<toon@moene.indiv.nluug.nl>).)\n-\n-\u001f\n-File: g77.info,  Node: Stack Overflow,  Next: Nothing Happens,  Prev: NeXTStep Problems,  Up: But-bugs\n-\n-Stack Overflow\n---------------\n-\n-   `g77' code might fail at runtime (probably with a \"segmentation\n-violation\") due to overflowing the stack.  This happens most often on\n-systems with an environment that provides substantially more heap space\n-(for use when arbitrarily allocating and freeing memory) than stack\n-space.\n-\n-   Often this can be cured by increasing or removing your shell's limit\n-on stack usage, typically using `limit stacksize' (in `csh' and\n-derivatives) or `ulimit -s' (in `sh' and derivatives).\n-\n-   Increasing the allowed stack size might, however, require changing\n-some operating system or system configuration parameters.\n-\n-   You might be able to work around the problem by compiling with the\n-`-fno-automatic' option to reduce stack usage, probably at the expense\n-of speed.\n-\n-   *Note Maximum Stackable Size::, for information on patching `g77' to\n-use different criteria for placing local non-automatic variables and\n-arrays on the stack.\n-\n-   However, if your program uses large automatic arrays (for example,\n-has declarations like `REAL A(N)' where `A' is a local array and `N' is\n-a dummy or `COMMON' variable that can have a large value), neither use\n-of `-fno-automatic', nor changing the cut-off point for `g77' for using\n-the stack, will solve the problem by changing the placement of these\n-large arrays, as they are *necessarily* automatic.\n-\n-   `g77' currently provides no means to specify that automatic arrays\n-are to be allocated on the heap instead of the stack.  So, other than\n-increasing the stack size, your best bet is to change your source code\n-to avoid large automatic arrays.  Methods for doing this currently are\n-outside the scope of this document.\n-\n-   (*Note:* If your system puts stack and heap space in the same memory\n-area, such that they are effectively combined, then a stack overflow\n-probably indicates a program that is either simply too large for the\n-system, or buggy.)\n-\n-\u001f\n-File: g77.info,  Node: Nothing Happens,  Next: Strange Behavior at Run Time,  Prev: Stack Overflow,  Up: But-bugs\n-\n-Nothing Happens\n----------------\n-\n-   It is occasionally reported that a \"simple\" program, such as a\n-\"Hello, World!\" program, does nothing when it is run, even though the\n-compiler reported no errors, despite the program containing nothing\n-other than a simple `PRINT' statement.\n-\n-   This most often happens because the program has been compiled and\n-linked on a UNIX system and named `test', though other names can lead\n-to similarly unexpected run-time behavior on various systems.\n-\n-   Essentially this problem boils down to giving your program a name\n-that is already known to the shell you are using to identify some other\n-program, which the shell continues to execute instead of your program\n-when you invoke it via, for example:\n-\n-     sh# test\n-     sh#\n-\n-   Under UNIX and many other system, a simple command name invokes a\n-searching mechanism that might well not choose the program located in\n-the current working directory if there is another alternative (such as\n-the `test' command commonly installed on UNIX systems).\n-\n-   The reliable way to invoke a program you just linked in the current\n-directory under UNIX is to specify it using an explicit pathname, as in:\n-\n-     sh# ./test\n-      Hello, World!\n-     sh#\n-\n-   Users who encounter this problem should take the time to read up on\n-how their shell searches for commands, how to set their search path,\n-and so on.  The relevant UNIX commands to learn about include `man',\n-`info' (on GNU systems), `setenv' (or `set' and `env'), `which', and\n-`find'.\n-\n-\u001f\n-File: g77.info,  Node: Strange Behavior at Run Time,  Next: Floating-point Errors,  Prev: Nothing Happens,  Up: But-bugs\n-\n-Strange Behavior at Run Time\n-----------------------------\n-\n-   `g77' code might fail at runtime with \"segmentation violation\", \"bus\n-error\", or even something as subtle as a procedure call overwriting a\n-variable or array element that it is not supposed to touch.\n-\n-   These can be symptoms of a wide variety of actual bugs that occurred\n-earlier during the program's run, but manifested themselves as\n-*visible* problems some time later.\n-\n-   Overflowing the bounds of an array--usually by writing beyond the\n-end of it--is one of two kinds of bug that often occurs in Fortran code.\n-\n-   The other kind of bug is a mismatch between the actual arguments\n-passed to a procedure and the dummy arguments as declared by that\n-procedure.\n-\n-   Both of these kinds of bugs, and some others as well, can be\n-difficult to track down, because the bug can change its behavior, or\n-even appear to not occur, when using a debugger.\n-\n-   That is, these bugs can be quite sensitive to data, including data\n-representing the placement of other data in memory (that is, pointers,\n-such as the placement of stack frames in memory).\n-\n-   Plans call for improving `g77' so that it can offer the ability to\n-catch and report some of these problems at compile, link, or run time,\n-such as by generating code to detect references to beyond the bounds of\n-an array, or checking for agreement between calling and called\n-procedures.\n-\n-   In the meantime, finding and fixing the programming bugs that lead\n-to these behaviors is, ultimately, the user's responsibility, as\n-difficult as that task can sometimes be.\n-\n-   One runtime problem that has been observed might have a simple\n-solution.  If a formatted `WRITE' produces an endless stream of spaces,\n-check that your program is linked against the correct version of the C\n-library.  The configuration process takes care to account for your\n-system's normal `libc' not being ANSI-standard, which will otherwise\n-cause this behaviour.  If your system's default library is\n-ANSI-standard and you subsequently link against a non-ANSI one, there\n-might be problems such as this one.\n-\n-   Specifically, on Solaris2 systems, avoid picking up the `BSD'\n-library from `/usr/ucblib'.\n-\n-\u001f\n-File: g77.info,  Node: Floating-point Errors,  Prev: Strange Behavior at Run Time,  Up: But-bugs\n-\n-Floating-point Errors\n----------------------\n-\n-   Some programs appear to produce inconsistent floating-point results\n-compiled by `g77' versus by other compilers.\n-\n-   Often the reason for this behavior is the fact that floating-point\n-values are represented on almost all Fortran systems by\n-*approximations*, and these approximations are inexact even for\n-apparently simple values like 0.1, 0.2, 0.3, 0.4, 0.6, 0.7, 0.8, 0.9,\n-1.1, and so on.  Most Fortran systems, including all current ports of\n-`g77', use binary arithmetic to represent these approximations.\n-\n-   Therefore, the exact value of any floating-point approximation as\n-manipulated by `g77'-compiled code is representable by adding some\n-combination of the values 1.0, 0.5, 0.25, 0.125, and so on (just keep\n-dividing by two) through the precision of the fraction (typically\n-around 23 bits for `REAL(KIND=1)', 52 for `REAL(KIND=2)'), then\n-multiplying the sum by a integral power of two (in Fortran, by `2**N')\n-that typically is between -127 and +128 for `REAL(KIND=1)' and -1023\n-and +1024 for `REAL(KIND=2)', then multiplying by -1 if the number is\n-negative.\n-\n-   So, a value like 0.2 is exactly represented in decimal--since it is\n-a fraction, `2/10', with a denomenator that is compatible with the base\n-of the number system (base 10).  However, `2/10' cannot be represented\n-by any finite number of sums of any of 1.0, 0.5, 0.25, and so on, so\n-0.2 cannot be exactly represented in binary notation.\n-\n-   (On the other hand, decimal notation can represent any binary number\n-in a finite number of digits.  Decimal notation cannot do so with\n-ternary, or base-3, notation, which would represent floating-point\n-numbers as sums of any of `1/1', `1/3', `1/9', and so on.  After all,\n-no finite number of decimal digits can exactly represent `1/3'.\n-Fortunately, few systems use ternary notation.)\n-\n-   Moreover, differences in the way run-time I/O libraries convert\n-between these approximations and the decimal representation often used\n-by programmers and the programs they write can result in apparent\n-differences between results that do not actually exist, or exist to\n-such a small degree that they usually are not worth worrying about.\n-\n-   For example, consider the following program:\n-\n-     PRINT *, 0.2\n-     END\n-\n-   When compiled by `g77', the above program might output `0.20000003',\n-while another compiler might produce a executable that outputs `0.2'.\n-\n-   This particular difference is due to the fact that, currently,\n-conversion of floating-point values by the `libf2c' library, used by\n-`g77', handles only double-precision values.\n-\n-   Since `0.2' in the program is a single-precision value, it is\n-converted to double precision (still in binary notation) before being\n-converted back to decimal.  The conversion to binary appends _binary_\n-zero digits to the original value--which, again, is an inexact\n-approximation of 0.2--resulting in an approximation that is much less\n-exact than is connoted by the use of double precision.\n-\n-   (The appending of binary zero digits has essentially the same effect\n-as taking a particular decimal approximation of `1/3', such as\n-`0.3333333', and appending decimal zeros to it, producing\n-`0.33333330000000000'.  Treating the resulting decimal approximation as\n-if it really had 18 or so digits of valid precision would make it seem\n-a very poor approximation of `1/3'.)\n-\n-   As a result of converting the single-precision approximation to\n-double precision by appending binary zeros, the conversion of the\n-resulting double-precision value to decimal produces what looks like an\n-incorrect result, when in fact the result is *inexact*, and is probably\n-no less inaccurate or imprecise an approximation of 0.2 than is\n-produced by other compilers that happen to output the converted value\n-as \"exactly\" `0.2'.  (Some compilers behave in a way that can make them\n-appear to retain more accuracy across a conversion of a single-precision\n-constant to double precision.  *Note Context-Sensitive Constants::, to\n-see why this practice is illusory and even dangerous.)\n-\n-   Note that a more exact approximation of the constant is computed\n-when the program is changed to specify a double-precision constant:\n-\n-     PRINT *, 0.2D0\n-     END\n-\n-   Future versions of `g77' and/or `libf2c' might convert\n-single-precision values directly to decimal, instead of converting them\n-to double precision first.  This would tend to result in output that is\n-more consistent with that produced by some other Fortran\n-implementations.\n-\n-\u001f\n-File: g77.info,  Node: Actual Bugs,  Next: Missing Features,  Prev: But-bugs,  Up: Trouble\n-\n-Actual Bugs We Haven't Fixed Yet\n-================================\n-\n-   This section identifies bugs that `g77' *users* might run into.\n-This includes bugs that are actually in the `gcc' back end (GBE) or in\n-`libf2c', because those sets of code are at least somewhat under the\n-control of (and necessarily intertwined with) `g77', so it isn't worth\n-separating them out.\n-\n-   For information on bugs that might afflict people who configure,\n-port, build, and install `g77', *Note Problems Installing::.\n-\n-   * `g77''s version of `gcc', and probably `g77' itself, cannot be\n-     reliably used with the `-O2' option (or higher) on Digital\n-     Semiconductor Alpha AXP machines.  The problem is most immediately\n-     noticed in differences discovered by `make compare' following a\n-     bootstrap build using `-O2'.  It also manifests itself as a\n-     failure to compile `DATA' statements such as `DATA R/7./'\n-     correctly; in this case, `R' might be initialized to `4.0'.\n-\n-     Until this bug is fixed, use only `-O1' or no optimization.\n-\n-   * A code-generation bug afflicts Intel x86 targets when `-O2' is\n-     specified compiling, for example, an old version of the `DNRM2'\n-     routine.  The x87 coprocessor stack is being somewhat mismanaged\n-     in cases where assigned `GOTO' and `ASSIGN' are involved.\n-\n-     Version 0.5.21 of `g77' contains an initial effort to fix the\n-     problem, but this effort is incomplete, and a more complete fix is\n-     planned for the next release.\n-\n-   * Work is needed on the `SIGNAL()' intrinsic to ensure that pointers\n-     and integers are properly handled on all targets, including 64-bit\n-     machines.\n-\n-   * When using `-fugly-comma', `g77' assumes an extra `%VAL(0)'\n-     argument is to be passed to intrinsics taking no arguments, such\n-     as `IARGC()', which in turn reject such a call.  Although this has\n-     been worked around for 0.5.18 due to changes in the handling of\n-     intrinsics, `g77' needs to do the ugly-argument-appending trick\n-     only for external-function invocation, as this would probably be\n-     more consistent with compilers that default to using that trick.\n-\n-   * Something about `g77''s straightforward handling of label\n-     references and definitions sometimes prevents the GBE from\n-     unrolling loops.  Until this is solved, try inserting or removing\n-     `CONTINUE' statements as the terminal statement, using the `END DO'\n-     form instead, and so on.  (Probably improved, but not wholly\n-     fixed, in 0.5.21.)\n-\n-   * The `g77' command itself should more faithfully process options\n-     the way the `gcc' command does.  For example, `gcc' accepts\n-     abbreviated forms of long options, `g77' generally doesn't.\n-\n-   * Some confusion in diagnostics concerning failing `INCLUDE'\n-     statements from within `INCLUDE''d or `#include''d files.\n-\n-   * `g77' assumes that `INTEGER(KIND=1)' constants range from `-2**31'\n-     to `2**31-1' (the range for two's-complement 32-bit values),\n-     instead of determining their range from the actual range of the\n-     type for the configuration (and, someday, for the constant).\n-\n-     Further, it generally doesn't implement the handling of constants\n-     very well in that it makes assumptions about the configuration\n-     that it no longer makes regarding variables (types).\n-\n-     Included with this item is the fact that `g77' doesn't recognize\n-     that, on IEEE-754/854-compliant systems, `0./0.' should produce a\n-     NaN and no warning instead of the value `0.' and a warning.  This\n-     is to be fixed in version 0.6, when `g77' will use the `gcc' back\n-     end's constant-handling mechanisms to replace its own.\n-\n-   * `g77' uses way too much memory and CPU time to process large\n-     aggregate areas having any initialized elements.\n-\n-     For example, `REAL A(1000000)' followed by `DATA A(1)/1/' takes up\n-     way too much time and space, including the size of the generated\n-     assembler file.  This is to be mitigated somewhat in version 0.6.\n-\n-     Version 0.5.18 improves cases like this--specifically, cases of\n-     *sparse* initialization that leave large, contiguous areas\n-     uninitialized--significantly.  However, even with the\n-     improvements, these cases still require too much memory and CPU\n-     time.\n-\n-     (Version 0.5.18 also improves cases where the initial values are\n-     zero to a much greater degree, so if the above example ends with\n-     `DATA A(1)/0/', the compile-time performance will be about as good\n-     as it will ever get, aside from unrelated improvements to the\n-     compiler.)\n-\n-     Note that `g77' does display a warning message to notify the user\n-     before the compiler appears to hang.  *Note Initialization of\n-     Large Aggregate Areas: Large Initialization, for information on\n-     how to change the point at which `g77' decides to issue this\n-     warning.\n-\n-   * `g77' doesn't emit variable and array members of common blocks for\n-     use with a debugger (the `-g' command-line option).  The code is\n-     present to do this, but doesn't work with at least one debug\n-     format--perhaps it works with others.  And it turns out there's a\n-     similar bug for local equivalence areas, so that has been disabled\n-     as well.\n-\n-     As of Version 0.5.19, a temporary kludge solution is provided\n-     whereby some rudimentary information on a member is written as a\n-     string that is the member's value as a character string.\n-\n-     *Note Options for Code Generation Conventions: Code Gen Options,\n-     for information on the `-fdebug-kludge' option.\n-\n-   * When debugging, after starting up the debugger but before being\n-     able to see the source code for the main program unit, the user\n-     must currently set a breakpoint at `MAIN__' (or `MAIN___' or\n-     `MAIN_' if `MAIN__' doesn't exist) and run the program until it\n-     hits the breakpoint.  At that point, the main program unit is\n-     activated and about to execute its first executable statement, but\n-     that's the state in which the debugger should start up, as is the\n-     case for languages like C.\n-\n-   * Debugging `g77'-compiled code using debuggers other than `gdb' is\n-     likely not to work.\n-\n-     Getting `g77' and `gdb' to work together is a known\n-     problem--getting `g77' to work properly with other debuggers, for\n-     which source code often is unavailable to `g77' developers, seems\n-     like a much larger, unknown problem, and is a lower priority than\n-     making `g77' and `gdb' work together properly.\n-\n-     On the other hand, information about problems other debuggers have\n-     with `g77' output might make it easier to properly fix `g77', and\n-     perhaps even improve `gdb', so it is definitely welcome.  Such\n-     information might even lead to all relevant products working\n-     together properly sooner.\n-\n-   * `g77' currently inserts needless padding for things like `COMMON\n-     A,IPAD' where `A' is `CHARACTER*1' and `IPAD' is `INTEGER(KIND=1)'\n-     on machines like x86, because the back end insists that `IPAD' be\n-     aligned to a 4-byte boundary, but the processor has no such\n-     requirement (though it's good for performance).\n-\n-     It is possible that this is not a real bug, and could be considered\n-     a performance feature, but it might be important to provide the\n-     ability to Fortran code to specify minimum padding for aggregate\n-     areas such as common blocks--and, certainly, there is the\n-     potential, with the current setup, for interface differences in\n-     the way such areas are laid out between `g77' and other compilers.\n-\n-   * Some crashes occur when compiling under Solaris on x86 machines.\n-\n-     Nothing has been heard about any such problems for some time, so\n-     this is considering a closed item as of 0.5.20.  Please submit any\n-     bug reports pertinent to `g77''s support for Solaris/x86 systems.\n-\n-   * RS/6000 support is not complete as of the gcc 2.6.3 back end.  The\n-     2.7.0 back end appears to fix this problem, or at least mitigate\n-     it significantly, but there is at least one known problem that is\n-     likely to be a code-generation bug in `gcc-2.7.0' plus\n-     `g77-0.5.16'.  This problem shows up only when compiling the\n-     Fortran program with `-O'.\n-\n-     Nothing has been heard about any RS/6000 problems for some time,\n-     so this is considering a closed item as of 0.5.20.  Please submit\n-     any bug reports pertinent to `g77''s support for RS/6000 systems.\n-\n-   * SGI support is known to be a bit buggy.  The known problem shows\n-     up only when compiling the Fortran program with `-O'.\n-\n-     It is possible these problems have all been fixed in 0.5.20 by\n-     emulating complex arithmetic in the front end.  Please submit any\n-     bug reports pertinent to `g77''s support for SGI systems.\n-\n-   * `g77' doesn't work perfectly on 64-bit configurations such as the\n-     Alpha.  This problem is expected to be largely resolved as of\n-     version 0.5.20, and further addressed by 0.5.21.  Version 0.6\n-     should solve most or all related problems (such as 64-bit machines\n-     other than Digital Semiconductor (\"DEC\") Alphas).\n-\n-     One known bug that causes a compile-time crash occurs when\n-     compiling code such as the following with optimization:\n-\n-          SUBROUTINE CRASH (TEMP)\n-          INTEGER*2 HALF(2)\n-          REAL TEMP\n-          HALF(1) = NINT (TEMP)\n-          END\n-\n-     It is expected that a future version of `g77' will have a fix for\n-     this problem, almost certainly by the time `g77' supports the\n-     forthcoming version 2.8.0 of `gcc'.\n-\n-   * Maintainers of gcc report that the back end definitely has \"broken\"\n-     support for `COMPLEX' types.  Based on their input, it seems many\n-     of the problems affect only the more-general facilities for gcc's\n-     `__complex__' type, such as `__complex__ int' (where the real and\n-     imaginary parts are integers) that GNU Fortran does not use.\n-\n-     Version 0.5.20 of `g77' works around this problem by not using the\n-     back end's support for `COMPLEX'.  The new option\n-     `-fno-emulate-complex' avoids the work-around, reverting to using\n-     the same \"broken\" mechanism as that used by versions of `g77'\n-     prior to 0.5.20.\n-\n-   * There seem to be some problems with passing constants, and perhaps\n-     general expressions (other than simple variables/arrays), to\n-     procedures when compiling on some systems (such as i386) with\n-     `-fPIC', as in when compiling for ELF targets.  The symptom is\n-     that the assembler complains about invalid opcodes.  More\n-     investigation is needed, but the problem is almost certainly in\n-     the gcc back end, and it apparently occurs only when compiling\n-     sufficiently complicated functions *without* the `-O' option.\n-\n-\u001f\n-File: g77.info,  Node: Missing Features,  Next: Disappointments,  Prev: Actual Bugs,  Up: Trouble\n-\n-Missing Features\n-================\n-\n-   This section lists features we know are missing from `g77', and\n-which we want to add someday.  (There is no priority implied in the\n-ordering below.)\n-\n-* Menu:\n-\n-GNU Fortran language:\n-* Better Source Model::\n-* Fortran 90 Support::\n-* Intrinsics in PARAMETER Statements::\n-* SELECT CASE on CHARACTER Type::\n-* RECURSIVE Keyword::\n-* Popular Non-standard Types::\n-* Full Support for Compiler Types::\n-* Array Bounds Expressions::\n-* POINTER Statements::\n-* Sensible Non-standard Constructs::\n-* FLUSH Statement::\n-* Expressions in FORMAT Statements::\n-* Explicit Assembler Code::\n-* Q Edit Descriptor::\n-\n-GNU Fortran dialects:\n-* Old-style PARAMETER Statements::\n-* TYPE and ACCEPT I/O Statements::\n-* STRUCTURE UNION RECORD MAP::\n-* OPEN CLOSE and INQUIRE Keywords::\n-* ENCODE and DECODE::\n-* Suppressing Space Padding::\n-* Fortran Preprocessor::\n-* Bit Operations on Floating-point Data::\n-\n-New facilities:\n-* POSIX Standard::\n-* Floating-point Exception Handling::\n-* Nonportable Conversions::\n-* Large Automatic Arrays::\n-* Support for Threads::\n-* Increasing Precision/Range::\n-\n-Better diagnostics:\n-* Gracefully Handle Sensible Bad Code::\n-* Non-standard Conversions::\n-* Non-standard Intrinsics::\n-* Modifying DO Variable::\n-* Better Pedantic Compilation::\n-* Warn About Implicit Conversions::\n-* Invalid Use of Hollerith Constant::\n-* Dummy Array Without Dimensioning Dummy::\n-* Invalid FORMAT Specifiers::\n-* Ambiguous Dialects::\n-* Unused Labels::\n-* Informational Messages::\n-\n-Run-time facilities:\n-* Uninitialized Variables at Run Time::\n-* Bounds Checking at Run Time::\n-\n-Debugging:\n-* Labels Visible to Debugger::\n-\n-\u001f\n-File: g77.info,  Node: Better Source Model,  Next: Fortran 90 Support,  Up: Missing Features\n-\n-Better Source Model\n--------------------\n-\n-   `g77' needs to provide, as the default source-line model, a \"pure\n-visual\" mode, where the interpretation of a source program in this mode\n-can be accurately determined by a user looking at a traditionally\n-displayed rendition of the program (assuming the user knows whether the\n-program is fixed or free form).\n-\n-   The design should assume the user cannot tell tabs from spaces and\n-cannot see trailing spaces on lines, but has canonical tab stops and,\n-for fixed-form source, has the ability to always know exactly where\n-column 72 is (since the Fortran standard itself requires this for\n-fixed-form source).\n-\n-   This would change the default treatment of fixed-form source to not\n-treat lines with tabs as if they were infinitely long--instead, they\n-would end at column 72 just as if the tabs were replaced by spaces in\n-the canonical way.\n-\n-   As part of this, provide common alternate models (Digital, `f2c',\n-and so on) via command-line options.  This includes allowing\n-arbitrarily long lines for free-form source as well as fixed-form\n-source and providing various limits and diagnostics as appropriate.\n-\n-   Also, `g77' should offer, perhaps even default to, warnings when\n-characters beyond the last valid column are anything other than spaces.\n-This would mean code with \"sequence numbers\" in columns 73 through 80\n-would be rejected, and there's a lot of that kind of code around, but\n-one of the most frequent bugs encountered by new users is accidentally\n-writing fixed-form source code into and beyond column 73.  So, maybe\n-the users of old code would be able to more easily handle having to\n-specify, say, a `-Wno-col73to80' option.\n-\n-\u001f\n-File: g77.info,  Node: Fortran 90 Support,  Next: Intrinsics in PARAMETER Statements,  Prev: Better Source Model,  Up: Missing Features\n-\n-Fortran 90 Support\n-------------------\n-\n-   `g77' does not support many of the features that distinguish Fortran\n-90 (and, now, Fortran 95) from ANSI FORTRAN 77.\n-\n-   Some Fortran 90 features are supported, because they make sense to\n-offer even to die-hard users of F77.  For example, many of them codify\n-various ways F77 has been extended to meet users' needs during its\n-tenure, so `g77' might as well offer them as the primary way to meet\n-those same needs, even if it offers compatibility with one or more of\n-the ways those needs were met by other F77 compilers in the industry.\n-\n-   Still, many important F90 features are not supported, because no\n-attempt has been made to research each and every feature and assess its\n-viability in `g77'.  In the meantime, users who need those features must\n-use Fortran 90 compilers anyway, and the best approach to adding some\n-F90 features to GNU Fortran might well be to fund a comprehensive\n-project to create GNU Fortran 95.\n-\n-\u001f\n-File: g77.info,  Node: Intrinsics in PARAMETER Statements,  Next: SELECT CASE on CHARACTER Type,  Prev: Fortran 90 Support,  Up: Missing Features\n-\n-Intrinsics in `PARAMETER' Statements\n-------------------------------------\n-\n-   `g77' doesn't allow intrinsics in `PARAMETER' statements.  This\n-feature is considered to be absolutely vital, even though it is not\n-standard-conforming, and is scheduled for version 0.6.\n-\n-   Related to this, `g77' doesn't allow non-integral exponentiation in\n-`PARAMETER' statements, such as `PARAMETER (R=2**.25)'.  It is unlikely\n-`g77' will ever support this feature, as doing it properly requires\n-complete emulation of a target computer's floating-point facilities when\n-building `g77' as a cross-compiler.  But, if the `gcc' back end is\n-enhanced to provide such a facility, `g77' will likely use that facility\n-in implementing this feature soon afterwards.\n-\n-\u001f\n-File: g77.info,  Node: SELECT CASE on CHARACTER Type,  Next: RECURSIVE Keyword,  Prev: Intrinsics in PARAMETER Statements,  Up: Missing Features\n-\n-`SELECT CASE' on `CHARACTER' Type\n----------------------------------\n-\n-   Character-type selector/cases for `SELECT CASE' currently are not\n-supported.\n-\n-\u001f\n-File: g77.info,  Node: RECURSIVE Keyword,  Next: Popular Non-standard Types,  Prev: SELECT CASE on CHARACTER Type,  Up: Missing Features\n-\n-`RECURSIVE' Keyword\n--------------------\n-\n-   `g77' doesn't support the `RECURSIVE' keyword that F90 compilers do.\n-Nor does it provide any means for compiling procedures designed to do\n-recursion.\n-\n-   All recursive code can be rewritten to not use recursion, but the\n-result is not pretty.\n-\n-\u001f\n-File: g77.info,  Node: Increasing Precision/Range,  Next: Gracefully Handle Sensible Bad Code,  Prev: Support for Threads,  Up: Missing Features\n-\n-Increasing Precision/Range\n---------------------------\n-\n-   Some compilers, such as `f2c', have an option (`-r8' or similar)\n-that provides automatic treatment of `REAL' entities such that they\n-have twice the storage size, and a corresponding increase in the range\n-and precision, of what would normally be the `REAL(KIND=1)' (default\n-`REAL') type.  (This affects `COMPLEX' the same way.)\n-\n-   They also typically offer another option (`-i8') to increase\n-`INTEGER' entities so they are twice as large (with roughly twice as\n-much range).\n-\n-   (There are potential pitfalls in using these options.)\n-\n-   `g77' does not yet offer any option that performs these kinds of\n-transformations.  Part of the problem is the lack of detailed\n-specifications regarding exactly how these options affect the\n-interpretation of constants, intrinsics, and so on.\n-\n-   Until `g77' addresses this need, programmers could improve the\n-portability of their code by modifying it to not require compile-time\n-options to produce correct results.  Some free tools are available\n-which may help, specifically in Toolpack (which one would expect to be\n-sound) and the `fortran' section of the Netlib repository.\n-\n-   Use of preprocessors can provide a fairly portable means to work\n-around the lack of widely portable methods in the Fortran language\n-itself (though increasing acceptance of Fortran 90 would alleviate this\n-problem).\n-\n-\u001f\n-File: g77.info,  Node: Popular Non-standard Types,  Next: Full Support for Compiler Types,  Prev: RECURSIVE Keyword,  Up: Missing Features\n-\n-Popular Non-standard Types\n---------------------------\n-\n-   `g77' doesn't fully support `INTEGER*2', `LOGICAL*1', and similar.\n-Version 0.6 will provide full support for this very popular set of\n-features.  In the meantime, version 0.5.18 provides rudimentary support\n-for them.\n-\n-\u001f\n-File: g77.info,  Node: Full Support for Compiler Types,  Next: Array Bounds Expressions,  Prev: Popular Non-standard Types,  Up: Missing Features\n-\n-Full Support for Compiler Types\n--------------------------------\n-\n-   `g77' doesn't support `INTEGER', `REAL', and `COMPLEX' equivalents\n-for *all* applicable back-end-supported types (`char', `short int',\n-`int', `long int', `long long int', and `long double').  This means\n-providing intrinsic support, and maybe constant support (using F90\n-syntax) as well, and, for most machines will result in automatic\n-support of `INTEGER*1', `INTEGER*2', `INTEGER*8', maybe even `REAL*16',\n-and so on.  This is scheduled for version 0.6.\n-\n-\u001f\n-File: g77.info,  Node: Array Bounds Expressions,  Next: POINTER Statements,  Prev: Full Support for Compiler Types,  Up: Missing Features\n-\n-Array Bounds Expressions\n-------------------------\n-\n-   `g77' doesn't support more general expressions to dimension arrays,\n-such as array element references, function references, etc.\n-\n-   For example, `g77' currently does not accept the following:\n-\n-     SUBROUTINE X(M, N)\n-     INTEGER N(10), M(N(2), N(1))\n-\n-\u001f\n-File: g77.info,  Node: POINTER Statements,  Next: Sensible Non-standard Constructs,  Prev: Array Bounds Expressions,  Up: Missing Features\n-\n-POINTER Statements\n-------------------\n-\n-   `g77' doesn't support pointers or allocatable objects (other than\n-automatic arrays).  This set of features is probably considered just\n-behind intrinsics in `PARAMETER' statements on the list of large,\n-important things to add to `g77'.\n-\n-   In the meantime, consider using the `INTEGER(KIND=7)' declaration to\n-specify that a variable must be able to hold a pointer.  This construct\n-is not portable to other non-GNU compilers, but it is portable to all\n-machines GNU Fortran supports when `g77' is used.\n-\n-   *Note Functions and Subroutines::, for information on `%VAL()',\n-`%REF()', and `%DESCR()' constructs, which are useful for passing\n-pointers to procedures written in languages other than Fortran.\n-\n-\u001f\n-File: g77.info,  Node: Sensible Non-standard Constructs,  Next: FLUSH Statement,  Prev: POINTER Statements,  Up: Missing Features\n-\n-Sensible Non-standard Constructs\n---------------------------------\n-\n-   `g77' rejects things other compilers accept, like `INTRINSIC\n-SQRT,SQRT'.  As time permits in the future, some of these things that\n-are easy for humans to read and write and unlikely to be intended to\n-mean something else will be accepted by `g77' (though `-fpedantic'\n-should trigger warnings about such non-standard constructs).\n-\n-   Until `g77' no longer gratuitously rejects sensible code, you might\n-as well fix your code to be more standard-conforming and portable.\n-\n-   The kind of case that is important to except from the recommendation\n-to change your code is one where following good coding rules would\n-force you to write non-standard code that nevertheless has a clear\n-meaning.\n-\n-   For example, when writing an `INCLUDE' file that defines a common\n-block, it might be appropriate to include a `SAVE' statement for the\n-common block (such as `SAVE /CBLOCK/'), so that variables defined in\n-the common block retain their values even when all procedures declaring\n-the common block become inactive (return to their callers).\n-\n-   However, putting `SAVE' statements in an `INCLUDE' file would\n-prevent otherwise standard-conforming code from also specifying the\n-`SAVE' statement, by itself, to indicate that all local variables and\n-arrays are to have the `SAVE' attribute.\n-\n-   For this reason, `g77' already has been changed to allow this\n-combination, because although the general problem of gratuitously\n-rejecting unambiguous and \"safe\" constructs still exists in `g77', this\n-particular construct was deemed useful enough that it was worth fixing\n-`g77' for just this case.\n-\n-   So, while there is no need to change your code to avoid using this\n-particular construct, there might be other, equally appropriate but\n-non-standard constructs, that you shouldn't have to stop using just\n-because `g77' (or any other compiler) gratuitously rejects it.\n-\n-   Until the general problem is solved, if you have any such construct\n-you believe is worthwhile using (e.g. not just an arbitrary, redundant\n-specification of an attribute), please submit a bug report with an\n-explanation, so we can consider fixing `g77' just for cases like yours.\n-\n-\u001f\n-File: g77.info,  Node: FLUSH Statement,  Next: Expressions in FORMAT Statements,  Prev: Sensible Non-standard Constructs,  Up: Missing Features\n-\n-`FLUSH' Statement\n------------------\n-\n-   `g77' could perhaps use a `FLUSH' statement that does what `CALL\n-FLUSH' does, but that supports `*' as the unit designator (same unit as\n-for `PRINT') and accepts `ERR=' and/or `IOSTAT=' specifiers.\n-\n-\u001f\n-File: g77.info,  Node: Expressions in FORMAT Statements,  Next: Explicit Assembler Code,  Prev: FLUSH Statement,  Up: Missing Features\n-\n-Expressions in `FORMAT' Statements\n-----------------------------------\n-\n-   `g77' doesn't support `FORMAT(I<J>)' and the like.  Supporting this\n-requires a significant redesign or replacement of `libf2c'.\n-\n-   However, a future version of `g77' might support this construct when\n-the expression is constant.  For example:\n-\n-           PARAMETER (IWIDTH = 12)\n-     10    FORMAT (I<IWIDTH>)\n-\n-   In the meantime, at least for output (`PRINT' and `WRITE'), Fortran\n-code making use of this feature can be rewritten to avoid it by\n-constructing the `FORMAT' string in a `CHARACTER' variable or array,\n-then using that variable or array in place of the `FORMAT' statement\n-label to do the original `PRINT' or `WRITE'.\n-\n-   Many uses of this feature on input can be rewritten this way as\n-well, but not all can.  For example, this can be rewritten:\n-\n-           READ 20, I\n-     20    FORMAT (I<J>)\n-\n-   However, this cannot, in general, be rewritten, especially when\n-`ERR=' and `END=' constructs are employed:\n-\n-           READ 30, J, I\n-     30    FORMAT (I<J>)\n-\n-\u001f\n-File: g77.info,  Node: Explicit Assembler Code,  Next: Q Edit Descriptor,  Prev: Expressions in FORMAT Statements,  Up: Missing Features\n-\n-Explicit Assembler Code\n------------------------\n-\n-   `g77' needs to provide some way, a la `gcc', for `g77' code to\n-specify explicit assembler code.\n-\n-\u001f\n-File: g77.info,  Node: Q Edit Descriptor,  Next: Old-style PARAMETER Statements,  Prev: Explicit Assembler Code,  Up: Missing Features\n-\n-Q Edit Descriptor\n------------------\n-\n-   The `Q' edit descriptor in `FORMAT's isn't supported.  (This is\n-meant to get the number of characters remaining in an input record.)\n-Supporting this requires a significant redesign or replacement of\n-`libf2c'.\n-\n-   A workaround might be using internal I/O or the stream-based\n-intrinsics.  *Note FGetC Intrinsic (subroutine)::.\n-\n-\u001f\n-File: g77.info,  Node: Old-style PARAMETER Statements,  Next: TYPE and ACCEPT I/O Statements,  Prev: Q Edit Descriptor,  Up: Missing Features\n-\n-Old-style PARAMETER Statements\n-------------------------------\n-\n-   `g77' doesn't accept `PARAMETER I=1'.  Supporting this obsolete form\n-of the `PARAMETER' statement would not be particularly hard, as most of\n-the parsing code is already in place and working.\n-\n-   Until time/money is spent implementing it, you might as well fix\n-your code to use the standard form, `PARAMETER (I=1)' (possibly needing\n-`INTEGER I' preceding the `PARAMETER' statement as well, otherwise, in\n-the obsolete form of `PARAMETER', the type of the variable is set from\n-the type of the constant being assigned to it).\n-\n-\u001f\n-File: g77.info,  Node: TYPE and ACCEPT I/O Statements,  Next: STRUCTURE UNION RECORD MAP,  Prev: Old-style PARAMETER Statements,  Up: Missing Features\n-\n-`TYPE' and `ACCEPT' I/O Statements\n-----------------------------------\n-\n-   `g77' doesn't support the I/O statements `TYPE' and `ACCEPT'.  These\n-are common extensions that should be easy to support, but also are\n-fairly easy to work around in user code.\n-\n-   Generally, any `TYPE fmt,list' I/O statement can be replaced by\n-`PRINT fmt,list'.  And, any `ACCEPT fmt,list' statement can be replaced\n-by `READ fmt,list'.\n-\n-\u001f\n-File: g77.info,  Node: STRUCTURE UNION RECORD MAP,  Next: OPEN CLOSE and INQUIRE Keywords,  Prev: TYPE and ACCEPT I/O Statements,  Up: Missing Features\n-\n-`STRUCTURE', `UNION', `RECORD', `MAP'\n--------------------------------------\n-\n-   `g77' doesn't support `STRUCTURE', `UNION', `RECORD', `MAP'.  This\n-set of extensions is quite a bit lower on the list of large, important\n-things to add to `g77', partly because it requires a great deal of work\n-either upgrading or replacing `libf2c'.\n-\n-\u001f\n-File: g77.info,  Node: OPEN CLOSE and INQUIRE Keywords,  Next: ENCODE and DECODE,  Prev: STRUCTURE UNION RECORD MAP,  Up: Missing Features\n-\n-`OPEN', `CLOSE', and `INQUIRE' Keywords\n----------------------------------------\n-\n-   `g77' doesn't have support for keywords such as `DISP='DELETE'' in\n-the `OPEN', `CLOSE', and `INQUIRE' statements.  These extensions are\n-easy to add to `g77' itself, but require much more work on `libf2c'.\n-\n-\u001f\n-File: g77.info,  Node: ENCODE and DECODE,  Next: Suppressing Space Padding,  Prev: OPEN CLOSE and INQUIRE Keywords,  Up: Missing Features\n-\n-`ENCODE' and `DECODE'\n----------------------\n-\n-   `g77' doesn't support `ENCODE' or `DECODE'.\n-\n-   These statements are best replaced by READ and WRITE statements\n-involving internal files (CHARACTER variables and arrays).\n-\n-   For example, replace a code fragment like\n-\n-           INTEGER*1 LINE(80)\n-     ...\n-           DECODE (80, 9000, LINE) A, B, C\n-     ...\n-     9000  FORMAT (1X, 3(F10.5))\n-\n-with:\n-\n-           CHARACTER*80 LINE\n-     ...\n-           READ (UNIT=LINE, FMT=9000) A, B, C\n-     ...\n-     9000  FORMAT (1X, 3(F10.5))\n-\n-   Similarly, replace a code fragment like\n-\n-           INTEGER*1 LINE(80)\n-     ...\n-           ENCODE (80, 9000, LINE) A, B, C\n-     ...\n-     9000  FORMAT (1X, 'OUTPUT IS ', 3(F10.5))\n-\n-with:\n-\n-           CHARACTER*80 LINE\n-     ...\n-           WRITE (UNIT=LINE, FMT=9000) A, B, C\n-     ...\n-     9000  FORMAT (1X, 'OUTPUT IS ', 3(F10.5))\n-\n-   It is entirely possible that `ENCODE' and `DECODE' will be supported\n-by a future version of `g77'.\n-\n-\u001f\n-File: g77.info,  Node: Suppressing Space Padding,  Next: Fortran Preprocessor,  Prev: ENCODE and DECODE,  Up: Missing Features\n-\n-Suppressing Space Padding of Source Lines\n------------------------------------------\n-\n-   `g77' should offer VXT-Fortran-style suppression of virtual spaces\n-at the end of a source line if an appropriate command-line option is\n-specified.\n-\n-   This affects cases where a character constant is continued onto the\n-next line in a fixed-form source file, as in the following example:\n-\n-     10    PRINT *,'HOW MANY\n-          1 SPACES?'\n-\n-`g77', and many other compilers, virtually extend the continued line\n-through column 72 with spaces that become part of the character\n-constant, but Digital Fortran normally didn't, leaving only one space\n-between `MANY' and `SPACES?'  in the output of the above statement.\n-\n-   Fairly recently, at least one version of Digital Fortran was\n-enhanced to provide the other behavior when a command-line option is\n-specified, apparently due to demand from readers of the USENET group\n-`comp.lang.fortran' to offer conformance to this widespread practice in\n-the industry.  `g77' should return the favor by offering conformance to\n-Digital's approach to handling the above example.\n-\n-\u001f\n-File: g77.info,  Node: Fortran Preprocessor,  Next: Bit Operations on Floating-point Data,  Prev: Suppressing Space Padding,  Up: Missing Features\n-\n-Fortran Preprocessor\n---------------------\n-\n-   `g77' should offer a preprocessor designed specifically for Fortran\n-to replace `cpp -traditional'.  There are several out there worth\n-evaluating, at least.\n-\n-   Such a preprocessor would recognize Hollerith constants, properly\n-parse comments and character constants, and so on.  It might also\n-recognize, process, and thus preprocess files included via the\n-`INCLUDE' directive.\n-\n-\u001f\n-File: g77.info,  Node: Bit Operations on Floating-point Data,  Next: POSIX Standard,  Prev: Fortran Preprocessor,  Up: Missing Features\n-\n-Bit Operations on Floating-point Data\n--------------------------------------\n-\n-   `g77' does not allow `REAL' and other non-integral types for\n-arguments to intrinsics like `AND', `OR', and `SHIFT'.\n-\n-   For example, this program is rejected by `g77', because the\n-intrinsic `IAND' does not accept `REAL' arguments:\n-\n-     DATA A/7.54/, B/9.112/\n-     PRINT *, IAND(A, B)\n-     END\n-\n-\u001f\n-File: g77.info,  Node: POSIX Standard,  Next: Floating-point Exception Handling,  Prev: Bit Operations on Floating-point Data,  Up: Missing Features\n-\n-`POSIX' Standard\n-----------------\n-\n-   `g77' should support the POSIX standard for Fortran.\n-"}, {"sha": "b514a9a52f36a52c224008853ef6d4d9923c1f37", "filename": "gcc/f/g77.info-17", "status": "removed", "additions": 0, "deletions": 968, "changes": 968, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-17", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-17", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-17?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2", "patch": "@@ -1,968 +0,0 @@\n-This is Info file g77.info, produced by Makeinfo version 1.68 from the\n-input file g77.texi.\n-\n-   This file explains how to use the GNU Fortran system.\n-\n-   Published by the Free Software Foundation 59 Temple Place - Suite 330\n-Boston, MA 02111-1307 USA\n-\n-   Copyright (C) 1995-1997 Free Software Foundation, Inc.\n-\n-   Permission is granted to make and distribute verbatim copies of this\n-manual provided the copyright notice and this permission notice are\n-preserved on all copies.\n-\n-   Permission is granted to copy and distribute modified versions of\n-this manual under the conditions for verbatim copying, provided also\n-that the sections entitled \"GNU General Public License,\" \"Funding for\n-Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n-included exactly as in the original, and provided that the entire\n-resulting derived work is distributed under the terms of a permission\n-notice identical to this one.\n-\n-   Permission is granted to copy and distribute translations of this\n-manual into another language, under the above conditions for modified\n-versions, except that the sections entitled \"GNU General Public\n-License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n-`Look And Feel'\", and this permission notice, may be included in\n-translations approved by the Free Software Foundation instead of in the\n-original English.\n-\n-   Contributed by James Craig Burley (<burley@gnu.ai.mit.edu>).\n-Inspired by a first pass at translating `g77-0.5.16/f/DOC' that was\n-contributed to Craig by David Ronis (<ronis@onsager.chem.mcgill.ca>).\n-\n-INFO-DIR-SECTION Fortran Programming\n-START-INFO-DIR-ENTRY\n-* g77: (g77).               The GNU Fortran compilation system.\n-END-INFO-DIR-ENTRY\n-\n-\u001f\n-File: g77.info,  Node: Floating-point Exception Handling,  Next: Nonportable Conversions,  Prev: POSIX Standard,  Up: Missing Features\n-\n-Floating-point Exception Handling\n----------------------------------\n-\n-   The `gcc' backend and, consequently, `g77', currently provides no\n-control over whether or not floating-point exceptions are trapped or\n-ignored.  (Ignoring them typically results in NaN values being\n-propagated in systems that conform to IEEE 754.)  The behaviour is\n-inherited from the system-dependent startup code.\n-\n-   Most systems provide some C-callable mechanism to change this; this\n-can be invoked at startup using `gcc''s `constructor' attribute.  For\n-example, just compiling and linking the following C code with your\n-program will turn on exception trapping for the \"common\" exceptions on\n-an x86-based GNU system:\n-\n-     #include <fpu_control.h>\n-     void __attribute__ ((constructor))\n-     trapfpe () {\n-       (void) __setfpucw (_FPU_DEFAULT &\n-                          ~(_FPU_MASK_IM | _FPU_MASK_ZM | _FPU_MASK_OM));\n-     }\n-\n-\u001f\n-File: g77.info,  Node: Nonportable Conversions,  Next: Large Automatic Arrays,  Prev: Floating-point Exception Handling,  Up: Missing Features\n-\n-Nonportable Conversions\n------------------------\n-\n-   `g77' doesn't accept some particularly nonportable, silent data-type\n-conversions such as `LOGICAL' to `REAL' (as in `A=.FALSE.', where `A'\n-is type `REAL'), that other compilers might quietly accept.\n-\n-   Some of these conversions are accepted by `g77' when the `-fugly'\n-option is specified.  Perhaps it should accept more or all of them.\n-\n-\u001f\n-File: g77.info,  Node: Large Automatic Arrays,  Next: Support for Threads,  Prev: Nonportable Conversions,  Up: Missing Features\n-\n-Large Automatic Arrays\n-----------------------\n-\n-   Currently, automatic arrays always are allocated on the stack.  For\n-situations where the stack cannot be made large enough, `g77' should\n-offer a compiler option that specifies allocation of automatic arrays\n-in heap storage.\n-\n-\u001f\n-File: g77.info,  Node: Support for Threads,  Next: Increasing Precision/Range,  Prev: Large Automatic Arrays,  Up: Missing Features\n-\n-Support for Threads\n--------------------\n-\n-   Neither the code produced by `g77' nor the `libf2c' library are\n-thread-safe, nor does `g77' have support for parallel processing (other\n-than the instruction-level parallelism available on some processors).\n-A package such as PVM might help here.\n-\n-\u001f\n-File: g77.info,  Node: Gracefully Handle Sensible Bad Code,  Next: Non-standard Conversions,  Prev: Increasing Precision/Range,  Up: Missing Features\n-\n-Gracefully Handle Sensible Bad Code\n------------------------------------\n-\n-   `g77' generally should continue processing for warnings and\n-recoverable (user) errors whenever possible--that is, it shouldn't\n-gratuitously make bad or useless code.\n-\n-   For example:\n-\n-     INTRINSIC ZABS\n-     CALL FOO(ZABS)\n-     END\n-\n-When compiling the above with `-ff2c-intrinsics-disable', `g77' should\n-indeed complain about passing `ZABS', but it still should compile,\n-instead of rejecting the entire `CALL' statement.  (Some of this is\n-related to improving the compiler internals to improve how statements\n-are analyzed.)\n-\n-\u001f\n-File: g77.info,  Node: Non-standard Conversions,  Next: Non-standard Intrinsics,  Prev: Gracefully Handle Sensible Bad Code,  Up: Missing Features\n-\n-Non-standard Conversions\n-------------------------\n-\n-   `-Wconversion' and related should flag places where non-standard\n-conversions are found.  Perhaps much of this would be part of `-Wugly*'.\n-\n-\u001f\n-File: g77.info,  Node: Non-standard Intrinsics,  Next: Modifying DO Variable,  Prev: Non-standard Conversions,  Up: Missing Features\n-\n-Non-standard Intrinsics\n------------------------\n-\n-   `g77' needs a new option, like `-Wintrinsics', to warn about use of\n-non-standard intrinsics without explicit `INTRINSIC' statements for\n-them.  This would help find code that might fail silently when ported\n-to another compiler.\n-\n-\u001f\n-File: g77.info,  Node: Modifying DO Variable,  Next: Better Pedantic Compilation,  Prev: Non-standard Intrinsics,  Up: Missing Features\n-\n-Modifying `DO' Variable\n------------------------\n-\n-   `g77' should warn about modifying `DO' variables via `EQUIVALENCE'.\n-(The internal information gathered to produce this warning might also\n-be useful in setting the internal \"doiter\" flag for a variable or even\n-array reference within a loop, since that might produce faster code\n-someday.)\n-\n-   For example, this code is invalid, so `g77' should warn about the\n-invalid assignment to `NOTHER':\n-\n-     EQUIVALENCE (I, NOTHER)\n-     DO I = 1, 100\n-        IF (I.EQ. 10) NOTHER = 20\n-     END DO\n-\n-\u001f\n-File: g77.info,  Node: Better Pedantic Compilation,  Next: Warn About Implicit Conversions,  Prev: Modifying DO Variable,  Up: Missing Features\n-\n-Better Pedantic Compilation\n----------------------------\n-\n-   `g77' needs to support `-fpedantic' more thoroughly, and use it only\n-to generate warnings instead of rejecting constructs outright.  Have it\n-warn: if a variable that dimensions an array is not a dummy or placed\n-explicitly in `COMMON' (F77 does not allow it to be placed in `COMMON'\n-via `EQUIVALENCE'); if specification statements follow\n-statement-function-definition statements; about all sorts of syntactic\n-extensions.\n-\n-\u001f\n-File: g77.info,  Node: Warn About Implicit Conversions,  Next: Invalid Use of Hollerith Constant,  Prev: Better Pedantic Compilation,  Up: Missing Features\n-\n-Warn About Implicit Conversions\n--------------------------------\n-\n-   `g77' needs a `-Wpromotions' option to warn if source code appears\n-to expect automatic, silent, and somewhat dangerous compiler-assisted\n-conversion of `REAL(KIND=1)' constants to `REAL(KIND=2)' based on\n-context.\n-\n-   For example, it would warn about cases like this:\n-\n-     DOUBLE PRECISION FOO\n-     PARAMETER (TZPHI = 9.435784839284958)\n-     FOO = TZPHI * 3D0\n-\n-\u001f\n-File: g77.info,  Node: Invalid Use of Hollerith Constant,  Next: Dummy Array Without Dimensioning Dummy,  Prev: Warn About Implicit Conversions,  Up: Missing Features\n-\n-Invalid Use of Hollerith Constant\n----------------------------------\n-\n-   `g77' should disallow statements like `RETURN 2HAB', which are\n-invalid in both source forms (unlike `RETURN (2HAB)', which probably\n-still makes no sense but at least can be reliably parsed).  Fixed-form\n-processing rejects it, but not free-form, except in a way that is a bit\n-difficult to understand.\n-\n-\u001f\n-File: g77.info,  Node: Dummy Array Without Dimensioning Dummy,  Next: Invalid FORMAT Specifiers,  Prev: Invalid Use of Hollerith Constant,  Up: Missing Features\n-\n-Dummy Array Without Dimensioning Dummy\n---------------------------------------\n-\n-   `g77' should complain when a list of dummy arguments containing an\n-adjustable dummy array does not also contain every variable listed in\n-the dimension list of the adjustable array.\n-\n-   Currently, `g77' does complain about a variable that dimensions an\n-array but doesn't appear in any dummy list or `COMMON' area, but this\n-needs to be extended to catch cases where it doesn't appear in every\n-dummy list that also lists any arrays it dimensions.\n-\n-   For example, `g77' should warn about the entry point `ALT' below,\n-since it includes `ARRAY' but not `ISIZE' in its list of arguments:\n-\n-     SUBROUTINE PRIMARY(ARRAY, ISIZE)\n-     REAL ARRAY(ISIZE)\n-     ENTRY ALT(ARRAY)\n-\n-\u001f\n-File: g77.info,  Node: Invalid FORMAT Specifiers,  Next: Ambiguous Dialects,  Prev: Dummy Array Without Dimensioning Dummy,  Up: Missing Features\n-\n-Invalid FORMAT Specifiers\n--------------------------\n-\n-   `g77' should check `FORMAT' specifiers for validity as it does\n-`FORMAT' statements.\n-\n-   For example, a diagnostic would be produced for:\n-\n-     PRINT 'HI THERE!'  !User meant PRINT *, 'HI THERE!'\n-\n-\u001f\n-File: g77.info,  Node: Ambiguous Dialects,  Next: Unused Labels,  Prev: Invalid FORMAT Specifiers,  Up: Missing Features\n-\n-Ambiguous Dialects\n-------------------\n-\n-   `g77' needs a set of options such as `-Wugly*', `-Wautomatic',\n-`-Wvxt', `-Wf90', and so on.  These would warn about places in the\n-user's source where ambiguities are found, helpful in resolving\n-ambiguities in the program's dialect or dialects.\n-\n-\u001f\n-File: g77.info,  Node: Unused Labels,  Next: Informational Messages,  Prev: Ambiguous Dialects,  Up: Missing Features\n-\n-Unused Labels\n--------------\n-\n-   `g77' should warn about unused labels when `-Wunused' is in effect.\n-\n-\u001f\n-File: g77.info,  Node: Informational Messages,  Next: Uninitialized Variables at Run Time,  Prev: Unused Labels,  Up: Missing Features\n-\n-Informational Messages\n-----------------------\n-\n-   `g77' needs an option to suppress information messages (notes).\n-`-w' does this but also suppresses warnings.  The default should be to\n-suppress info messages.\n-\n-   Perhaps info messages should simply be eliminated.\n-\n-\u001f\n-File: g77.info,  Node: Uninitialized Variables at Run Time,  Next: Bounds Checking at Run Time,  Prev: Informational Messages,  Up: Missing Features\n-\n-Uninitialized Variables at Run Time\n------------------------------------\n-\n-   `g77' needs an option to initialize everything (not otherwise\n-explicitly initialized) to \"weird\" (machine-dependent) values, e.g.\n-NaNs, bad (non-`NULL') pointers, and largest-magnitude integers, would\n-help track down references to some kinds of uninitialized variables at\n-run time.\n-\n-   Note that use of the options `-O -Wuninitialized' can catch many\n-such bugs at compile time.\n-\n-\u001f\n-File: g77.info,  Node: Bounds Checking at Run Time,  Next: Labels Visible to Debugger,  Prev: Uninitialized Variables at Run Time,  Up: Missing Features\n-\n-Bounds Checking at Run Time\n----------------------------\n-\n-   `g77' should offer run-time bounds-checking of array/subscript\n-references in a fashion similar to `f2c'.\n-\n-   Note that `g77' already warns about references to out-of-bounds\n-elements of arrays when it detects these at compile time.\n-\n-\u001f\n-File: g77.info,  Node: Labels Visible to Debugger,  Prev: Bounds Checking at Run Time,  Up: Missing Features\n-\n-Labels Visible to Debugger\n---------------------------\n-\n-   `g77' should output debugging information for statements labels, for\n-use by debuggers that know how to support them.  Same with weirder\n-things like construct names.  It is not yet known if any debug formats\n-or debuggers support these.\n-\n-\u001f\n-File: g77.info,  Node: Disappointments,  Next: Non-bugs,  Prev: Missing Features,  Up: Trouble\n-\n-Disappointments and Misunderstandings\n-=====================================\n-\n-   These problems are perhaps regrettable, but we don't know any\n-practical way around them for now.\n-\n-* Menu:\n-\n-* Mangling of Names::                       `SUBROUTINE FOO' is given\n-                                              external name `foo_'.\n-* Multiple Definitions of External Names::  No doing both `COMMON /FOO/'\n-                                              and `SUBROUTINE FOO'.\n-* Limitation on Implicit Declarations::     No `IMPLICIT CHARACTER*(*)'.\n-\n-\u001f\n-File: g77.info,  Node: Mangling of Names,  Next: Multiple Definitions of External Names,  Up: Disappointments\n-\n-Mangling of Names in Source Code\n---------------------------------\n-\n-   The current external-interface design, which includes naming of\n-external procedures, COMMON blocks, and the library interface, has\n-various usability problems, including things like adding underscores\n-where not really necessary (and preventing easier inter-language\n-operability) and yet not providing complete namespace freedom for user\n-C code linked with Fortran apps (due to the naming of functions in the\n-library, among other things).\n-\n-   Project GNU should at least get all this \"right\" for systems it\n-fully controls, such as the Hurd, and provide defaults and options for\n-compatibility with existing systems and interoperability with popular\n-existing compilers.\n-\n-\u001f\n-File: g77.info,  Node: Multiple Definitions of External Names,  Next: Limitation on Implicit Declarations,  Prev: Mangling of Names,  Up: Disappointments\n-\n-Multiple Definitions of External Names\n---------------------------------------\n-\n-   `g77' doesn't allow a common block and an external procedure or\n-`BLOCK DATA' to have the same name.  Some systems allow this, but `g77'\n-does not, to be compatible with `f2c'.\n-\n-   `g77' could special-case the way it handles `BLOCK DATA', since it\n-is not compatible with `f2c' in this particular area (necessarily,\n-since `g77' offers an important feature here), but it is likely that\n-such special-casing would be very annoying to people with programs that\n-use `EXTERNAL FOO', with no other mention of `FOO' in the same program\n-unit, to refer to external procedures, since the result would be that\n-`g77' would treat these references as requests to force-load BLOCK DATA\n-program units.\n-\n-   In that case, if `g77' modified names of `BLOCK DATA' so they could\n-have the same names as `COMMON', users would find that their programs\n-wouldn't link because the `FOO' procedure didn't have its name\n-translated the same way.\n-\n-   (Strictly speaking, `g77' could emit a\n-null-but-externally-satisfying definition of `FOO' with its name\n-transformed as if it had been a `BLOCK DATA', but that probably invites\n-more trouble than it's worth.)\n-\n-\u001f\n-File: g77.info,  Node: Limitation on Implicit Declarations,  Prev: Multiple Definitions of External Names,  Up: Disappointments\n-\n-Limitation on Implicit Declarations\n------------------------------------\n-\n-   `g77' disallows `IMPLICIT CHARACTER*(*)'.  This is not\n-standard-conforming.\n-\n-\u001f\n-File: g77.info,  Node: Non-bugs,  Next: Warnings and Errors,  Prev: Disappointments,  Up: Trouble\n-\n-Certain Changes We Don't Want to Make\n-=====================================\n-\n-   This section lists changes that people frequently request, but which\n-we do not make because we think GNU Fortran is better without them.\n-\n-* Menu:\n-\n-* Backslash in Constants::           Why `'\\\\'' is a constant that\n-                                       is one, not two, characters long.\n-* Initializing Before Specifying::   Why `DATA VAR/1/' can't precede\n-                                       `COMMON VAR'.\n-* Context-Sensitive Intrinsicness::  Why `CALL SQRT' won't work.\n-* Context-Sensitive Constants::      Why `9.435784839284958' is a\n-                                       single-precision constant,\n-                                       and might be interpreted as\n-                                       `9.435785' or similar.\n-* Equivalence Versus Equality::      Why `.TRUE. .EQ. .TRUE.' won't work.\n-* Order of Side Effects::            Why `J = IFUNC() - IFUNC()' might\n-                                       not behave as expected.\n-\n-\u001f\n-File: g77.info,  Node: Backslash in Constants,  Next: Initializing Before Specifying,  Up: Non-bugs\n-\n-Backslash in Constants\n-----------------------\n-\n-   In the opinion of many experienced Fortran users, `-fno-backslash'\n-should be the default, not `-fbackslash', as currently set by `g77'.\n-\n-   First of all, you can always specify `-fno-backslash' to turn off\n-this processing.\n-\n-   Despite not being within the spirit (though apparently within the\n-letter) of the ANSI FORTRAN 77 standard, `g77' defaults to\n-`-fbackslash' because that is what most UNIX `f77' commands default to,\n-and apparently lots of code depends on this feature.\n-\n-   This is a particularly troubling issue.  The use of a C construct in\n-the midst of Fortran code is bad enough, worse when it makes existing\n-Fortran programs stop working (as happens when programs written for\n-non-UNIX systems are ported to UNIX systems with compilers that provide\n-the `-fbackslash' feature as the default--sometimes with no option to\n-turn it off).\n-\n-   The author of GNU Fortran wished, for reasons of linguistic purity,\n-to make `-fno-backslash' the default for GNU Fortran and thus require\n-users of UNIX `f77' and `f2c' to specify `-fbackslash' to get the UNIX\n-behavior.\n-\n-   However, the realization that `g77' is intended as a replacement for\n-*UNIX* `f77', caused the author to choose to make `g77' as compatible\n-with `f77' as feasible, which meant making `-fbackslash' the default.\n-\n-   The primary focus on compatibility is at the source-code level, and\n-the question became \"What will users expect a replacement for `f77' to\n-do, by default?\"  Although at least one UNIX `f77' does not provide\n-`-fbackslash' as a default, it appears that the majority of them do,\n-which suggests that the majority of code that is compiled by UNIX `f77'\n-compilers expects `-fbackslash' to be the default.\n-\n-   It is probably the case that more code exists that would *not* work\n-with `-fbackslash' in force than code that requires it be in force.\n-\n-   However, most of *that* code is not being compiled with `f77', and\n-when it is, new build procedures (shell scripts, makefiles, and so on)\n-must be set up anyway so that they work under UNIX.  That makes a much\n-more natural and safe opportunity for non-UNIX users to adapt their\n-build procedures for `g77''s default of `-fbackslash' than would exist\n-for the majority of UNIX `f77' users who would have to modify existing,\n-working build procedures to explicitly specify `-fbackslash' if that was\n-not the default.\n-\n-   One suggestion has been to configure the default for `-fbackslash'\n-(and perhaps other options as well) based on the configuration of `g77'.\n-\n-   This is technically quite straightforward, but will be avoided even\n-in cases where not configuring defaults to be dependent on a particular\n-configuration greatly inconveniences some users of legacy code.\n-\n-   Many users appreciate the GNU compilers because they provide an\n-environment that is uniform across machines.  These users would be\n-inconvenienced if the compiler treated things like the format of the\n-source code differently on certain machines.\n-\n-   Occasionally users write programs intended only for a particular\n-machine type.  On these occasions, the users would benefit if the GNU\n-Fortran compiler were to support by default the same dialect as the\n-other compilers on that machine.  But such applications are rare.  And\n-users writing a program to run on more than one type of machine cannot\n-possibly benefit from this kind of compatibility.  (This is consistent\n-with the design goals for `gcc'.  To change them for `g77', you must\n-first change them for `gcc'.  Do not ask the maintainers of `g77' to do\n-this for you, or to disassociate `g77' from the widely understood, if\n-not widely agreed-upon, goals for GNU compilers in general.)\n-\n-   This is why GNU Fortran does and will treat backslashes in the same\n-fashion on all types of machines (by default).  *Note Direction of\n-Language Development::, for more information on this overall philosophy\n-guiding the development of the GNU Fortran language.\n-\n-   Of course, users strongly concerned about portability should indicate\n-explicitly in their build procedures which options are expected by\n-their source code, or write source code that has as few such\n-expectations as possible.\n-\n-   For example, avoid writing code that depends on backslash (`\\')\n-being interpreted either way in particular, such as by starting a\n-program unit with:\n-\n-     CHARACTER BACKSL\n-     PARAMETER (BACKSL = '\\\\')\n-\n-Then, use concatenation of `BACKSL' anyplace a backslash is desired.\n-In this way, users can write programs which have the same meaning in\n-many Fortran dialects.\n-\n-   (However, this technique does not work for Hollerith constants--which\n-is just as well, since the only generally portable uses for Hollerith\n-constants are in places where character constants can and should be\n-used instead, for readability.)\n-\n-\u001f\n-File: g77.info,  Node: Initializing Before Specifying,  Next: Context-Sensitive Intrinsicness,  Prev: Backslash in Constants,  Up: Non-bugs\n-\n-Initializing Before Specifying\n-------------------------------\n-\n-   `g77' does not allow `DATA VAR/1/' to appear in the source code\n-before `COMMON VAR', `DIMENSION VAR(10)', `INTEGER VAR', and so on.  In\n-general, `g77' requires initialization of a variable or array to be\n-specified *after* all other specifications of attributes (type, size,\n-placement, and so on) of that variable or array are specified (though\n-*confirmation* of data type is permitted).\n-\n-   It is *possible* `g77' will someday allow all of this, even though\n-it is not allowed by the FORTRAN 77 standard.\n-\n-   Then again, maybe it is better to have `g77' always require\n-placement of `DATA' so that it can possibly immediately write constants\n-to the output file, thus saving time and space.\n-\n-   That is, `DATA A/1000000*1/' should perhaps always be immediately\n-writable to canonical assembler, unless it's already known to be in a\n-`COMMON' area following as-yet-uninitialized stuff, and to do this it\n-cannot be followed by `COMMON A'.\n-\n-\u001f\n-File: g77.info,  Node: Context-Sensitive Intrinsicness,  Next: Context-Sensitive Constants,  Prev: Initializing Before Specifying,  Up: Non-bugs\n-\n-Context-Sensitive Intrinsicness\n--------------------------------\n-\n-   `g77' treats procedure references to *possible* intrinsic names as\n-always enabling their intrinsic nature, regardless of whether the\n-*form* of the reference is valid for that intrinsic.\n-\n-   For example, `CALL SQRT' is interpreted by `g77' as an invalid\n-reference to the `SQRT' intrinsic function, because the reference is a\n-subroutine invocation.\n-\n-   First, `g77' recognizes the statement `CALL SQRT' as a reference to\n-a *procedure* named `SQRT', not to a *variable* with that name (as it\n-would for a statement such as `V = SQRT').\n-\n-   Next, `g77' establishes that, in the program unit being compiled,\n-`SQRT' is an intrinsic--not a subroutine that happens to have the same\n-name as an intrinsic (as would be the case if, for example, `EXTERNAL\n-SQRT' was present).\n-\n-   Finally, `g77' recognizes that the *form* of the reference is\n-invalid for that particular intrinsic.  That is, it recognizes that it\n-is invalid for an intrinsic *function*, such as `SQRT', to be invoked as\n-a *subroutine*.\n-\n-   At that point, `g77' issues a diagnostic.\n-\n-   Some users claim that it is \"obvious\" that `CALL SQRT' references an\n-external subroutine of their own, not an intrinsic function.\n-\n-   However, `g77' knows about intrinsic subroutines, not just\n-functions, and is able to support both having the same names, for\n-example.\n-\n-   As a result of this, `g77' rejects calls to intrinsics that are not\n-subroutines, and function invocations of intrinsics that are not\n-functions, just as it (and most compilers) rejects invocations of\n-intrinsics with the wrong number (or types) of arguments.\n-\n-   So, use the `EXTERNAL SQRT' statement in a program unit that calls a\n-user-written subroutine named `SQRT'.\n-\n-\u001f\n-File: g77.info,  Node: Context-Sensitive Constants,  Next: Equivalence Versus Equality,  Prev: Context-Sensitive Intrinsicness,  Up: Non-bugs\n-\n-Context-Sensitive Constants\n----------------------------\n-\n-   `g77' does not use context to determine the types of constants or\n-named constants (`PARAMETER'), except for (non-standard) typeless\n-constants such as `'123'O'.\n-\n-   For example, consider the following statement:\n-\n-     PRINT *, 9.435784839284958 * 2D0\n-\n-`g77' will interpret the (truncated) constant `9.435784839284958' as a\n-`REAL(KIND=1)', not `REAL(KIND=2)', constant, because the suffix `D0'\n-is not specified.\n-\n-   As a result, the output of the above statement when compiled by\n-`g77' will appear to have \"less precision\" than when compiled by other\n-compilers.\n-\n-   In these and other cases, some compilers detect the fact that a\n-single-precision constant is used in a double-precision context and\n-therefore interpret the single-precision constant as if it was\n-*explicitly* specified as a double-precision constant.  (This has the\n-effect of appending *decimal*, not *binary*, zeros to the fractional\n-part of the number--producing different computational results.)\n-\n-   The reason this misfeature is dangerous is that a slight, apparently\n-innocuous change to the source code can change the computational\n-results.  Consider:\n-\n-     REAL ALMOST, CLOSE\n-     DOUBLE PRECISION FIVE\n-     PARAMETER (ALMOST = 5.000000000001)\n-     FIVE = 5\n-     CLOSE = 5.000000000001\n-     PRINT *, 5.000000000001 - FIVE\n-     PRINT *, ALMOST - FIVE\n-     PRINT *, CLOSE - FIVE\n-     END\n-\n-Running the above program should result in the same value being printed\n-three times.  With `g77' as the compiler, it does.\n-\n-   However, compiled by many other compilers, running the above program\n-would print two or three distinct values, because in two or three of\n-the statements, the constant `5.000000000001', which on most systems is\n-exactly equal to `5.'  when interpreted as a single-precision constant,\n-is instead interpreted as a double-precision constant, preserving the\n-represented precision.  However, this \"clever\" promotion of type does\n-not extend to variables or, in some compilers, to named constants.\n-\n-   Since programmers often are encouraged to replace manifest constants\n-or permanently-assigned variables with named constants (`PARAMETER' in\n-Fortran), and might need to replace some constants with variables\n-having the same values for pertinent portions of code, it is important\n-that compilers treat code so modified in the same way so that the\n-results of such programs are the same.  `g77' helps in this regard by\n-treating constants just the same as variables in terms of determining\n-their types in a context-independent way.\n-\n-   Still, there is a lot of existing Fortran code that has been written\n-to depend on the way other compilers freely interpret constants' types\n-based on context, so anything `g77' can do to help flag cases of this\n-in such code could be very helpful.\n-\n-\u001f\n-File: g77.info,  Node: Equivalence Versus Equality,  Next: Order of Side Effects,  Prev: Context-Sensitive Constants,  Up: Non-bugs\n-\n-Equivalence Versus Equality\n----------------------------\n-\n-   Use of `.EQ.' and `.NE.' on `LOGICAL' operands is not supported,\n-except via `-fugly', which is not recommended except for legacy code\n-(where the behavior expected by the *code* is assumed).\n-\n-   Legacy code should be changed, as resources permit, to use `.EQV.'\n-and `.NEQV.' instead, as these are permitted by the various Fortran\n-standards.\n-\n-   New code should never be written expecting `.EQ.' or `.NE.'  to work\n-if either of its operands is `LOGICAL'.\n-\n-   The problem with supporting this \"feature\" is that there is unlikely\n-to be consensus on how it works, as illustrated by the following sample\n-program:\n-\n-     LOGICAL L,M,N\n-     DATA L,M,N /3*.FALSE./\n-     IF (L.AND.M.EQ.N) PRINT *,'L.AND.M.EQ.N'\n-     END\n-\n-   The issue raised by the above sample program is: what is the\n-precedence of `.EQ.' (and `.NE.') when applied to `LOGICAL' operands?\n-\n-   Some programmers will argue that it is the same as the precedence\n-for `.EQ.' when applied to numeric (such as `INTEGER') operands.  By\n-this interpretation, the subexpression `M.EQ.N' must be evaluated first\n-in the above program, resulting in a program that, when run, does not\n-execute the `PRINT' statement.\n-\n-   Other programmers will argue that the precedence is the same as the\n-precedence for `.EQV.', which is restricted by the standards to\n-`LOGICAL' operands.  By this interpretation, the subexpression\n-`L.AND.M' must be evaluated first, resulting in a program that *does*\n-execute the `PRINT' statement.\n-\n-   Assigning arbitrary semantic interpretations to syntactic expressions\n-that might legitimately have more than one \"obvious\" interpretation is\n-generally unwise.\n-\n-   The creators of the various Fortran standards have done a good job\n-in this case, requiring a distinct set of operators (which have their\n-own distinct precedence) to compare `LOGICAL' operands.  This\n-requirement results in expression syntax with more certain precedence\n-(without requiring substantial context), making it easier for\n-programmers to read existing code.  `g77' will avoid muddying up\n-elements of the Fortran language that were well-designed in the first\n-place.\n-\n-   (Ask C programmers about the precedence of expressions such as `(a)\n-& (b)' and `(a) - (b)'--they cannot even tell you, without knowing more\n-context, whether the `&' and `-' operators are infix (binary) or unary!)\n-\n-\u001f\n-File: g77.info,  Node: Order of Side Effects,  Prev: Equivalence Versus Equality,  Up: Non-bugs\n-\n-Order of Side Effects\n----------------------\n-\n-   `g77' does not necessarily produce code that, when run, performs\n-side effects (such as those performed by function invocations) in the\n-same order as in some other compiler--or even in the same order as\n-another version, port, or invocation (using different command-line\n-options) of `g77'.\n-\n-   It is never safe to depend on the order of evaluation of side\n-effects.  For example, an expression like this may very well behave\n-differently from one compiler to another:\n-\n-     J = IFUNC() - IFUNC()\n-\n-There is no guarantee that `IFUNC' will be evaluated in any particular\n-order.  Either invocation might happen first.  If `IFUNC' returns 5 the\n-first time it is invoked, and returns 12 the second time, `J' might end\n-up with the value `7', or it might end up with `-7'.\n-\n-   Generally, in Fortran, procedures with side-effects intended to be\n-visible to the caller are best designed as *subroutines*, not functions.\n-Examples of such side-effects include:\n-\n-   * The generation of random numbers that are intended to influence\n-     return values.\n-\n-   * Performing I/O (other than internal I/O to local variables).\n-\n-   * Updating information in common blocks.\n-\n-   An example of a side-effect that is not intended to be visible to\n-the caller is a function that maintains a cache of recently calculated\n-results, intended solely to speed repeated invocations of the function\n-with identical arguments.  Such a function can be safely used in\n-expressions, because if the compiler optimizes away one or more calls\n-to the function, operation of the program is unaffected (aside from\n-being speeded up).\n-\n-\u001f\n-File: g77.info,  Node: Warnings and Errors,  Prev: Non-bugs,  Up: Trouble\n-\n-Warning Messages and Error Messages\n-===================================\n-\n-   The GNU compiler can produce two kinds of diagnostics: errors and\n-warnings.  Each kind has a different purpose:\n-\n-     *Errors* report problems that make it impossible to compile your\n-     program.  GNU Fortran reports errors with the source file name,\n-     line number, and column within the line where the problem is\n-     apparent.\n-\n-     *Warnings* report other unusual conditions in your code that\n-     *might* indicate a problem, although compilation can (and does)\n-     proceed.  Warning messages also report the source file name, line\n-     number, and column information, but include the text `warning:' to\n-     distinguish them from error messages.\n-\n-   Warnings might indicate danger points where you should check to make\n-sure that your program really does what you intend; or the use of\n-obsolete features; or the use of nonstandard features of GNU Fortran.\n-Many warnings are issued only if you ask for them, with one of the `-W'\n-options (for instance, `-Wall' requests a variety of useful warnings).\n-\n-   *Note:* Currently, the text of the line and a pointer to the column\n-is printed in most `g77' diagnostics.  Probably, as of version 0.6,\n-`g77' will no longer print the text of the source line, instead printing\n-the column number following the file name and line number in a form\n-that GNU Emacs recognizes.  This change is expected to speed up and\n-reduce the memory usage of the `g77' compiler.\n-\n-   *Note Options to Request or Suppress Warnings: Warning Options, for\n-more detail on these and related command-line options.\n-\n-\u001f\n-File: g77.info,  Node: Open Questions,  Next: Bugs,  Prev: Trouble,  Up: Top\n-\n-Open Questions\n-**************\n-\n-   Please consider offering useful answers to these questions!\n-\n-   * How do system administrators and users manage multiple incompatible\n-     Fortran compilers on their systems?  How can `g77' contribute to\n-     this, or at least avoiding intefering with it?\n-\n-     Currently, `g77' provides rudimentary ways to choose whether to\n-     overwrite portions of other Fortran compilation systems (such as\n-     the `f77' command and the `libf2c' library).  Is this sufficient?\n-     What happens when users choose not to overwrite these--does `g77'\n-     work properly in all such installations, picking up its own\n-     versions, or does it pick up the existing \"alien\" versions it\n-     didn't overwrite with its own, possibly leading to subtle bugs?\n-\n-   * `LOC()' and other intrinsics are probably somewhat misclassified.\n-     Is the a need for more precise classification of intrinsics, and\n-     if so, what are the appropriate groupings?  Is there a need to\n-     individually enable/disable/delete/hide intrinsics from the\n-     command line?\n-\n-\u001f\n-File: g77.info,  Node: Bugs,  Next: Service,  Prev: Open Questions,  Up: Top\n-\n-Reporting Bugs\n-**************\n-\n-   Your bug reports play an essential role in making GNU Fortran\n-reliable.\n-\n-   When you encounter a problem, the first thing to do is to see if it\n-is already known.  *Note Trouble::.  If it isn't known, then you should\n-report the problem.\n-\n-   Reporting a bug might help you by bringing a solution to your\n-problem, or it might not.  (If it does not, look in the service\n-directory; see *Note Service::.)  In any case, the principal function\n-of a bug report is to help the entire community by making the next\n-version of GNU Fortran work better.  Bug reports are your contribution\n-to the maintenance of GNU Fortran.\n-\n-   Since the maintainers are very overloaded, we cannot respond to every\n-bug report.  However, if the bug has not been fixed, we are likely to\n-send you a patch and ask you to tell us whether it works.\n-\n-   In order for a bug report to serve its purpose, you must include the\n-information that makes for fixing the bug.\n-\n-* Menu:\n-\n-* Criteria: Bug Criteria.    Have you really found a bug?\n-* Where: Bug Lists.          Where to send your bug report.\n-* Reporting: Bug Reporting.  How to report a bug effectively.\n-* Patches: Sending Patches.  How to send a patch for GNU Fortran.\n-\n-   *Note Known Causes of Trouble with GNU Fortran: Trouble, for\n-information on problems we already know about.\n-\n-   *Note How To Get Help with GNU Fortran: Service, for information on\n-where to ask for help.\n-\n-\u001f\n-File: g77.info,  Node: Bug Criteria,  Next: Bug Lists,  Up: Bugs\n-\n-Have You Found a Bug?\n-=====================\n-\n-   If you are not sure whether you have found a bug, here are some\n-guidelines:\n-\n-   * If the compiler gets a fatal signal, for any input whatever, that\n-     is a compiler bug.  Reliable compilers never crash--they just\n-     remain obsolete.\n-\n-   * If the compiler produces invalid assembly code, for any input\n-     whatever, that is a compiler bug, unless the compiler reports\n-     errors (not just warnings) which would ordinarily prevent the\n-     assembler from being run.\n-\n-   * If the compiler produces valid assembly code that does not\n-     correctly execute the input source code, that is a compiler bug.\n-\n-     However, you must double-check to make sure, because you might\n-     have run into an incompatibility between GNU Fortran and\n-     traditional Fortran.  These incompatibilities might be considered\n-     bugs, but they are inescapable consequences of valuable features.\n-\n-     Or you might have a program whose behavior is undefined, which\n-     happened by chance to give the desired results with another\n-     Fortran compiler.  It is best to check the relevant Fortran\n-     standard thoroughly if it is possible that the program indeed does\n-     something undefined.\n-\n-     After you have localized the error to a single source line, it\n-     should be easy to check for these things.  If your program is\n-     correct and well defined, you have found a compiler bug.\n-\n-     It might help if, in your submission, you identified the specific\n-     language in the relevant Fortran standard that specifies the\n-     desired behavior, if it isn't likely to be obvious and agreed-upon\n-     by all Fortran users.\n-\n-   * If the compiler produces an error message for valid input, that is\n-     a compiler bug.\n-\n-   * If the compiler does not produce an error message for invalid\n-     input, that is a compiler bug.  However, you should note that your\n-     idea of \"invalid input\" might be someone else's idea of \"an\n-     extension\" or \"support for traditional practice\".\n-\n-   * If you are an experienced user of Fortran compilers, your\n-     suggestions for improvement of GNU Fortran are welcome in any case.\n-\n-   Many, perhaps most, bug reports against `g77' turn out to be bugs in\n-the user's code.  While we find such bug reports educational, they\n-sometimes take a considerable amount of time to track down or at least\n-respond to--time we could be spending making `g77', not some user's\n-code, better.\n-\n-   Some steps you can take to verify that the bug is not certainly in\n-the code you're compiling with `g77':\n-\n-   * Compile your code using the `g77' options `-W -Wall -O'.  These\n-     options enable many useful warning; the `-O' option enables flow\n-     analysis that enables the uninitialized-variable warning.\n-\n-     If you investigate the warnings and find evidence of possible bugs\n-     in your code, fix them first and retry `g77'.\n-\n-   * Compile your code using the `g77' options `-finit-local-zero',\n-     `-fno-automatic', `-ffloat-store', and various combinations\n-     thereof.\n-\n-     If your code works with any of these combinations, that is not\n-     proof that the bug isn't in `g77'--a `g77' bug exposed by your\n-     code might simply be avoided, or have a different, more subtle\n-     effect, when different options are used--but it can be a strong\n-     indicator that your code is making unawarranted assumptions about\n-     the Fortran dialect and/or underlying machine it is being compiled\n-     and run on.\n-\n-     *Note Overly Convenient Command-Line Options: Overly Convenient\n-     Options, for information on the `-fno-automatic' and\n-     `-finit-local-zero' options and how to convert their use into\n-     selective changes in your own code.\n-\n-   * Validate your code with `ftnchek' or a similar code-checking tool.\n-     `ftncheck' can be found at `ftp://ftp.netlib.org/fortran' or\n-     `ftp://ftp.dsm.fordham.edu'.\n-\n-   * Try your code out using other Fortran compilers, such as `f2c'.\n-     If it does not work on at least one other compiler (assuming the\n-     compiler supports the features the code needs), that is a strong\n-     indicator of a bug in the code.\n-\n-     However, even if your code works on many compilers *except* `g77',\n-     that does *not* mean the bug is in `g77'.  It might mean the bug\n-     is in your code, and that `g77' simply exposes it more readily\n-     than other compilers.\n-\n-\u001f\n-File: g77.info,  Node: Bug Lists,  Next: Bug Reporting,  Prev: Bug Criteria,  Up: Bugs\n-\n-Where to Report Bugs\n-====================\n-\n-   Send bug reports for GNU Fortran to <fortran@gnu.ai.mit.edu>.\n-\n-   Often people think of posting bug reports to a newsgroup instead of\n-mailing them.  This sometimes appears to work, but it has one problem\n-which can be crucial: a newsgroup posting does not contain a mail path\n-back to the sender.  Thus, if maintainers need more information, they\n-might be unable to reach you.  For this reason, you should always send\n-bug reports by mail to the proper mailing list.\n-\n-   As a last resort, send bug reports on paper to:\n-\n-     GNU Compiler Bugs\n-     Free Software Foundation\n-     59 Temple Place - Suite 330\n-     Boston, MA 02111-1307, USA\n-"}, {"sha": "34be0ea71a4851e669d791bbbcca7c25a712b745", "filename": "gcc/f/g77.info-18", "status": "removed", "additions": 0, "deletions": 1125, "changes": 1125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-18", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-18", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-18?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2", "patch": "@@ -1,1125 +0,0 @@\n-This is Info file g77.info, produced by Makeinfo version 1.68 from the\n-input file g77.texi.\n-\n-   This file explains how to use the GNU Fortran system.\n-\n-   Published by the Free Software Foundation 59 Temple Place - Suite 330\n-Boston, MA 02111-1307 USA\n-\n-   Copyright (C) 1995-1997 Free Software Foundation, Inc.\n-\n-   Permission is granted to make and distribute verbatim copies of this\n-manual provided the copyright notice and this permission notice are\n-preserved on all copies.\n-\n-   Permission is granted to copy and distribute modified versions of\n-this manual under the conditions for verbatim copying, provided also\n-that the sections entitled \"GNU General Public License,\" \"Funding for\n-Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n-included exactly as in the original, and provided that the entire\n-resulting derived work is distributed under the terms of a permission\n-notice identical to this one.\n-\n-   Permission is granted to copy and distribute translations of this\n-manual into another language, under the above conditions for modified\n-versions, except that the sections entitled \"GNU General Public\n-License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n-`Look And Feel'\", and this permission notice, may be included in\n-translations approved by the Free Software Foundation instead of in the\n-original English.\n-\n-   Contributed by James Craig Burley (<burley@gnu.ai.mit.edu>).\n-Inspired by a first pass at translating `g77-0.5.16/f/DOC' that was\n-contributed to Craig by David Ronis (<ronis@onsager.chem.mcgill.ca>).\n-\n-INFO-DIR-SECTION Fortran Programming\n-START-INFO-DIR-ENTRY\n-* g77: (g77).               The GNU Fortran compilation system.\n-END-INFO-DIR-ENTRY\n-\n-\u001f\n-File: g77.info,  Node: Bug Reporting,  Next: Sending Patches,  Prev: Bug Lists,  Up: Bugs\n-\n-How to Report Bugs\n-==================\n-\n-   The fundamental principle of reporting bugs usefully is this:\n-*report all the facts*.  If you are not sure whether to state a fact or\n-leave it out, state it!\n-\n-   Often people omit facts because they think they know what causes the\n-problem and they conclude that some details don't matter.  Thus, you\n-might assume that the name of the variable you use in an example does\n-not matter.  Well, probably it doesn't, but one cannot be sure.\n-Perhaps the bug is a stray memory reference which happens to fetch from\n-the location where that name is stored in memory; perhaps, if the name\n-were different, the contents of that location would fool the compiler\n-into doing the right thing despite the bug.  Play it safe and give a\n-specific, complete example.  That is the easiest thing for you to do,\n-and the most helpful.\n-\n-   Keep in mind that the purpose of a bug report is to enable someone to\n-fix the bug if it is not known.  It isn't very important what happens if\n-the bug is already known.  Therefore, always write your bug reports on\n-the assumption that the bug is not known.\n-\n-   Sometimes people give a few sketchy facts and ask, \"Does this ring a\n-bell?\"  This cannot help us fix a bug, so it is rarely helpful.  We\n-respond by asking for enough details to enable us to investigate.  You\n-might as well expedite matters by sending them to begin with.\n-(Besides, there are enough bells ringing around here as it is.)\n-\n-   Try to make your bug report self-contained.  If we have to ask you\n-for more information, it is best if you include all the previous\n-information in your response, as well as the information that was\n-missing.\n-\n-   Please report each bug in a separate message.  This makes it easier\n-for us to track which bugs have been fixed and to forward your bugs\n-reports to the appropriate maintainer.\n-\n-   Do not compress and encode any part of your bug report using programs\n-such as `uuencode'.  If you do so it will slow down the processing of\n-your bug.  If you must submit multiple large files, use `shar', which\n-allows us to read your message without having to run any decompression\n-programs.\n-\n-   (As a special exception for GNU Fortran bug-reporting, at least for\n-now, if you are sending more than a few lines of code, if your\n-program's source file format contains \"interesting\" things like\n-trailing spaces or strange characters, or if you need to include binary\n-data files, it is acceptable to put all the files together in a `tar'\n-archive, and, whether you need to do that, it is acceptable to then\n-compress the single file (`tar' archive or source file) using `gzip'\n-and encode it via `uuencode'.  Do not use any MIME stuff--the current\n-maintainer can't decode this.  Using `compress' instead of `gzip' is\n-acceptable, assuming you have licensed the use of the patented\n-algorithm in `compress' from Unisys.)\n-\n-   To enable someone to investigate the bug, you should include all\n-these things:\n-\n-   * The version of GNU Fortran.  You can get this by running `g77'\n-     with the `-v' option.  (Ignore any error messages that might be\n-     displayed when the linker is run.)\n-\n-     Without this, we won't know whether there is any point in looking\n-     for the bug in the current version of GNU Fortran.\n-\n-   * A complete input file that will reproduce the bug.  If the bug is\n-     in the compiler proper (`f771') and you are using the C\n-     preprocessor, run your source file through the C preprocessor by\n-     doing `g77 -E SOURCEFILE > OUTFILE', then include the contents of\n-     OUTFILE in the bug report.  (When you do this, use the same `-I',\n-     `-D' or `-U' options that you used in actual compilation.)\n-\n-     A single statement is not enough of an example.  In order to\n-     compile it, it must be embedded in a complete file of compiler\n-     input; and the bug might depend on the details of how this is done.\n-\n-     Without a real example one can compile, all anyone can do about\n-     your bug report is wish you luck.  It would be futile to try to\n-     guess how to provoke the bug.  For example, bugs in register\n-     allocation and reloading frequently depend on every little detail\n-     of the function they happen in.\n-\n-   * Note that you should include with your bug report any files\n-     included by the source file (via the `#include' or `INCLUDE'\n-     directive) that you send, and any files they include, and so on.\n-\n-     It is not necessary to replace the `#include' and `INCLUDE'\n-     directives with the actual files in the version of the source file\n-     that you send, but it might make submitting the bug report easier\n-     in the end.  However, be sure to *reproduce* the bug using the\n-     *exact* version of the source material you submit, to avoid\n-     wild-goose chases.\n-\n-   * The command arguments you gave GNU Fortran to compile that example\n-     and observe the bug.  For example, did you use `-O'?  To guarantee\n-     you won't omit something important, list all the options.\n-\n-     If we were to try to guess the arguments, we would probably guess\n-     wrong and then we would not encounter the bug.\n-\n-   * The type of machine you are using, and the operating system name\n-     and version number.  (Much of this information is printed by `g77\n-     -v'--if you include that, send along any additional info you have\n-     that you don't see clearly represented in that output.)\n-\n-   * The operands you gave to the `configure' command when you installed\n-     the compiler.\n-\n-   * A complete list of any modifications you have made to the compiler\n-     source.  (We don't promise to investigate the bug unless it\n-     happens in an unmodified compiler.  But if you've made\n-     modifications and don't tell us, then you are sending us on a\n-     wild-goose chase.)\n-\n-     Be precise about these changes.  A description in English is not\n-     enough--send a context diff for them.\n-\n-     Adding files of your own (such as a machine description for a\n-     machine we don't support) is a modification of the compiler source.\n-\n-   * Details of any other deviations from the standard procedure for\n-     installing GNU Fortran.\n-\n-   * A description of what behavior you observe that you believe is\n-     incorrect.  For example, \"The compiler gets a fatal signal,\" or,\n-     \"The assembler instruction at line 208 in the output is incorrect.\"\n-\n-     Of course, if the bug is that the compiler gets a fatal signal,\n-     then one can't miss it.  But if the bug is incorrect output, the\n-     maintainer might not notice unless it is glaringly wrong.  None of\n-     us has time to study all the assembler code from a 50-line Fortran\n-     program just on the chance that one instruction might be wrong.\n-     We need *you* to do this part!\n-\n-     Even if the problem you experience is a fatal signal, you should\n-     still say so explicitly.  Suppose something strange is going on,\n-     such as, your copy of the compiler is out of synch, or you have\n-     encountered a bug in the C library on your system.  (This has\n-     happened!)  Your copy might crash and the copy here would not.  If\n-     you said to expect a crash, then when the compiler here fails to\n-     crash, we would know that the bug was not happening.  If you don't\n-     say to expect a crash, then we would not know whether the bug was\n-     happening.  We would not be able to draw any conclusion from our\n-     observations.\n-\n-     If the problem is a diagnostic when building GNU Fortran with some\n-     other compiler, say whether it is a warning or an error.\n-\n-     Often the observed symptom is incorrect output when your program\n-     is run.  Sad to say, this is not enough information unless the\n-     program is short and simple.  None of us has time to study a large\n-     program to figure out how it would work if compiled correctly,\n-     much less which line of it was compiled wrong.  So you will have\n-     to do that.  Tell us which source line it is, and what incorrect\n-     result happens when that line is executed.  A person who\n-     understands the program can find this as easily as finding a bug\n-     in the program itself.\n-\n-   * If you send examples of assembler code output from GNU Fortran,\n-     please use `-g' when you make them.  The debugging information\n-     includes source line numbers which are essential for correlating\n-     the output with the input.\n-\n-   * If you wish to mention something in the GNU Fortran source, refer\n-     to it by context, not by line number.\n-\n-     The line numbers in the development sources don't match those in\n-     your sources.  Your line numbers would convey no convenient\n-     information to the maintainers.\n-\n-   * Additional information from a debugger might enable someone to\n-     find a problem on a machine which he does not have available.\n-     However, you need to think when you collect this information if\n-     you want it to have any chance of being useful.\n-\n-     For example, many people send just a backtrace, but that is never\n-     useful by itself.  A simple backtrace with arguments conveys little\n-     about GNU Fortran because the compiler is largely data-driven; the\n-     same functions are called over and over for different RTL insns,\n-     doing different things depending on the details of the insn.\n-\n-     Most of the arguments listed in the backtrace are useless because\n-     they are pointers to RTL list structure.  The numeric values of the\n-     pointers, which the debugger prints in the backtrace, have no\n-     significance whatever; all that matters is the contents of the\n-     objects they point to (and most of the contents are other such\n-     pointers).\n-\n-     In addition, most compiler passes consist of one or more loops that\n-     scan the RTL insn sequence.  The most vital piece of information\n-     about such a loop--which insn it has reached--is usually in a\n-     local variable, not in an argument.\n-\n-     What you need to provide in addition to a backtrace are the values\n-     of the local variables for several stack frames up.  When a local\n-     variable or an argument is an RTX, first print its value and then\n-     use the GDB command `pr' to print the RTL expression that it points\n-     to.  (If GDB doesn't run on your machine, use your debugger to call\n-     the function `debug_rtx' with the RTX as an argument.)  In\n-     general, whenever a variable is a pointer, its value is no use\n-     without the data it points to.\n-\n-   Here are some things that are not necessary:\n-\n-   * A description of the envelope of the bug.\n-\n-     Often people who encounter a bug spend a lot of time investigating\n-     which changes to the input file will make the bug go away and which\n-     changes will not affect it.\n-\n-     This is often time consuming and not very useful, because the way\n-     we will find the bug is by running a single example under the\n-     debugger with breakpoints, not by pure deduction from a series of\n-     examples.  You might as well save your time for something else.\n-\n-     Of course, if you can find a simpler example to report *instead* of\n-     the original one, that is a convenience.  Errors in the output\n-     will be easier to spot, running under the debugger will take less\n-     time, etc.  Most GNU Fortran bugs involve just one function, so\n-     the most straightforward way to simplify an example is to delete\n-     all the function definitions except the one where the bug occurs.\n-     Those earlier in the file may be replaced by external declarations\n-     if the crucial function depends on them.  (Exception: inline\n-     functions might affect compilation of functions defined later in\n-     the file.)\n-\n-     However, simplification is not vital; if you don't want to do this,\n-     report the bug anyway and send the entire test case you used.\n-\n-   * In particular, some people insert conditionals `#ifdef BUG' around\n-     a statement which, if removed, makes the bug not happen.  These\n-     are just clutter; we won't pay any attention to them anyway.\n-     Besides, you should send us preprocessor output, and that can't\n-     have conditionals.\n-\n-   * A patch for the bug.\n-\n-     A patch for the bug is useful if it is a good one.  But don't omit\n-     the necessary information, such as the test case, on the\n-     assumption that a patch is all we need.  We might see problems\n-     with your patch and decide to fix the problem another way, or we\n-     might not understand it at all.\n-\n-     Sometimes with a program as complicated as GNU Fortran it is very\n-     hard to construct an example that will make the program follow a\n-     certain path through the code.  If you don't send the example, we\n-     won't be able to construct one, so we won't be able to verify that\n-     the bug is fixed.\n-\n-     And if we can't understand what bug you are trying to fix, or why\n-     your patch should be an improvement, we won't install it.  A test\n-     case will help us to understand.\n-\n-     *Note Sending Patches::, for guidelines on how to make it easy for\n-     us to understand and install your patches.\n-\n-   * A guess about what the bug is or what it depends on.\n-\n-     Such guesses are usually wrong.  Even the maintainer can't guess\n-     right about such things without first using the debugger to find\n-     the facts.\n-\n-   * A core dump file.\n-\n-     We have no way of examining a core dump for your type of machine\n-     unless we have an identical system--and if we do have one, we\n-     should be able to reproduce the crash ourselves.\n-\n-\u001f\n-File: g77.info,  Node: Sending Patches,  Prev: Bug Reporting,  Up: Bugs\n-\n-Sending Patches for GNU Fortran\n-===============================\n-\n-   If you would like to write bug fixes or improvements for the GNU\n-Fortran compiler, that is very helpful.  Send suggested fixes to the\n-bug report mailing list, <fortran@gnu.ai.mit.edu>.\n-\n-   Please follow these guidelines so we can study your patches\n-efficiently.  If you don't follow these guidelines, your information\n-might still be useful, but using it will take extra work.  Maintaining\n-GNU Fortran is a lot of work in the best of circumstances, and we can't\n-keep up unless you do your best to help.\n-\n-   * Send an explanation with your changes of what problem they fix or\n-     what improvement they bring about.  For a bug fix, just include a\n-     copy of the bug report, and explain why the change fixes the bug.\n-\n-     (Referring to a bug report is not as good as including it, because\n-     then we will have to look it up, and we have probably already\n-     deleted it if we've already fixed the bug.)\n-\n-   * Always include a proper bug report for the problem you think you\n-     have fixed.  We need to convince ourselves that the change is\n-     right before installing it.  Even if it is right, we might have\n-     trouble judging it if we don't have a way to reproduce the problem.\n-\n-   * Include all the comments that are appropriate to help people\n-     reading the source in the future understand why this change was\n-     needed.\n-\n-   * Don't mix together changes made for different reasons.  Send them\n-     *individually*.\n-\n-     If you make two changes for separate reasons, then we might not\n-     want to install them both.  We might want to install just one.  If\n-     you send them all jumbled together in a single set of diffs, we\n-     have to do extra work to disentangle them--to figure out which\n-     parts of the change serve which purpose.  If we don't have time\n-     for this, we might have to ignore your changes entirely.\n-\n-     If you send each change as soon as you have written it, with its\n-     own explanation, then the two changes never get tangled up, and we\n-     can consider each one properly without any extra work to\n-     disentangle them.\n-\n-     Ideally, each change you send should be impossible to subdivide\n-     into parts that we might want to consider separately, because each\n-     of its parts gets its motivation from the other parts.\n-\n-   * Send each change as soon as that change is finished.  Sometimes\n-     people think they are helping us by accumulating many changes to\n-     send them all together.  As explained above, this is absolutely\n-     the worst thing you could do.\n-\n-     Since you should send each change separately, you might as well\n-     send it right away.  That gives us the option of installing it\n-     immediately if it is important.\n-\n-   * Use `diff -c' to make your diffs.  Diffs without context are hard\n-     for us to install reliably.  More than that, they make it hard for\n-     us to study the diffs to decide whether we want to install them.\n-     Unidiff format is better than contextless diffs, but not as easy\n-     to read as `-c' format.\n-\n-     If you have GNU `diff', use `diff -cp', which shows the name of the\n-     function that each change occurs in.  (The maintainer of GNU\n-     Fortran currently uses `diff -rcp2N'.)\n-\n-   * Write the change log entries for your changes.  We get lots of\n-     changes, and we don't have time to do all the change log writing\n-     ourselves.\n-\n-     Read the `ChangeLog' file to see what sorts of information to put\n-     in, and to learn the style that we use.  The purpose of the change\n-     log is to show people where to find what was changed.  So you need\n-     to be specific about what functions you changed; in large\n-     functions, it's often helpful to indicate where within the\n-     function the change was.\n-\n-     On the other hand, once you have shown people where to find the\n-     change, you need not explain its purpose.  Thus, if you add a new\n-     function, all you need to say about it is that it is new.  If you\n-     feel that the purpose needs explaining, it probably does--but the\n-     explanation will be much more useful if you put it in comments in\n-     the code.\n-\n-     If you would like your name to appear in the header line for who\n-     made the change, send us the header line.\n-\n-   * When you write the fix, keep in mind that we can't install a\n-     change that would break other systems.\n-\n-     People often suggest fixing a problem by changing\n-     machine-independent files such as `toplev.c' to do something\n-     special that a particular system needs.  Sometimes it is totally\n-     obvious that such changes would break GNU Fortran for almost all\n-     users.  We can't possibly make a change like that.  At best it\n-     might tell us how to write another patch that would solve the\n-     problem acceptably.\n-\n-     Sometimes people send fixes that *might* be an improvement in\n-     general--but it is hard to be sure of this.  It's hard to install\n-     such changes because we have to study them very carefully.  Of\n-     course, a good explanation of the reasoning by which you concluded\n-     the change was correct can help convince us.\n-\n-     The safest changes are changes to the configuration files for a\n-     particular machine.  These are safe because they can't create new\n-     bugs on other machines.\n-\n-     Please help us keep up with the workload by designing the patch in\n-     a form that is good to install.\n-\n-\u001f\n-File: g77.info,  Node: Service,  Next: Adding Options,  Prev: Bugs,  Up: Top\n-\n-How To Get Help with GNU Fortran\n-********************************\n-\n-   If you need help installing, using or changing GNU Fortran, there\n-are two ways to find it:\n-\n-   * Look in the service directory for someone who might help you for a\n-     fee.  The service directory is found in the file named `SERVICE'\n-     in the GNU CC distribution.\n-\n-   * Send a message to <fortran@gnu.ai.mit.edu>.\n-\n-\u001f\n-File: g77.info,  Node: Adding Options,  Next: Projects,  Prev: Service,  Up: Top\n-\n-Adding Options\n-**************\n-\n-   To add a new command-line option to `g77', first decide what kind of\n-option you wish to add.  Search the `g77' and `gcc' documentation for\n-one or more options that is most closely like the one you want to add\n-(in terms of what kind of effect it has, and so on) to help clarify its\n-nature.\n-\n-   * *Fortran options* are options that apply only when compiling\n-     Fortran programs.  They are accepted by `g77' and `gcc', but they\n-     apply only when compiling Fortran programs.\n-\n-   * *Compiler options* are options that apply when compiling most any\n-     kind of program.\n-\n-   *Fortran options* are listed in the file `gcc/f/lang-options.h',\n-which is used during the build of `gcc' to build a list of all options\n-that are accepted by at least one language's compiler.  This list goes\n-into the `lang_options' array in `gcc/toplev.c', which uses this array\n-to determine whether a particular option should be offered to the\n-linked-in front end for processing by calling `lang_option_decode',\n-which, for `g77', is in `gcc/f/com.c' and just calls\n-`ffe_decode_option'.\n-\n-   If the linked-in front end \"rejects\" a particular option passed to\n-it, `toplev.c' just ignores the option, because *some* language's\n-compiler is willing to accept it.\n-\n-   This allows commands like `gcc -fno-asm foo.c bar.f' to work, even\n-though Fortran compilation does not currently support the `-fno-asm'\n-option; even though the `f771' version of `lang_decode_option' rejects\n-`-fno-asm', `toplev.c' doesn't produce a diagnostic because some other\n-language (C) does accept it.\n-\n-   This also means that commands like `g77 -fno-asm foo.f' yield no\n-diagnostics, despite the fact that no phase of the command was able to\n-recognize and process `-fno-asm'--perhaps a warning about this would be\n-helpful if it were possible.\n-\n-   Code that processes Fortran options is found in `gcc/f/top.c',\n-function `ffe_decode_option'.  This code needs to check positive and\n-negative forms of each option.\n-\n-   The defaults for Fortran options are set in their global\n-definitions, also found in `gcc/f/top.c'.  Many of these defaults are\n-actually macros defined in `gcc/f/target.h', since they might be\n-machine-specific.  However, since, in practice, GNU compilers should\n-behave the same way on all configurations (especially when it comes to\n-language constructs), the practice of setting defaults in `target.h' is\n-likely to be deprecated and, ultimately, stopped in future versions of\n-`g77'.\n-\n-   Accessor macros for Fortran options, used by code in the `g77' FFE,\n-are defined in `gcc/f/top.h'.\n-\n-   *Compiler options* are listed in `gcc/toplev.c' in the array\n-`f_options'.  An option not listed in `lang_options' is looked up in\n-`f_options' and handled from there.\n-\n-   The defaults for compiler options are set in the global definitions\n-for the corresponding variables, some of which are in `gcc/toplev.c'.\n-\n-   You can set different defaults for *Fortran-oriented* or\n-*Fortran-reticent* compiler options by changing the way `f771' handles\n-the `-fset-g77-defaults' option, which is always provided as the first\n-option when called by `g77' or `gcc'.\n-\n-   This code is in `ffe_decode_options' in `gcc/f/top.c'.  Have it\n-change just the variables that you want to default to a different\n-setting for Fortran compiles compared to compiles of other languages.\n-\n-   The `-fset-g77-defaults' option is passed to `f771' automatically\n-because of the specification information kept in `gcc/f/lang-specs.h'.\n-This file tells the `gcc' command how to recognize, in this case,\n-Fortran source files (those to be preprocessed, and those that are\n-not), and further, how to invoke the appropriate programs (including\n-`f771') to process those source files.\n-\n-   It is in `gcc/f/lang-specs.h' that `-fset-g77-defaults',\n-`-fversion', and other options are passed, as appropriate, even when\n-the user has not explicitly specified them.  Other \"internal\" options\n-such as `-quiet' also are passed via this mechanism.\n-\n-\u001f\n-File: g77.info,  Node: Projects,  Next: Diagnostics,  Prev: Adding Options,  Up: Top\n-\n-Projects\n-********\n-\n-   If you want to contribute to `g77' by doing research, design,\n-specification, documentation, coding, or testing, the following\n-information should give you some ideas.\n-\n-* Menu:\n-\n-* Efficiency::               Make `g77' itself compile code faster.\n-* Better Optimization::      Teach `g77' to generate faster code.\n-* Simplify Porting::         Make `g77' easier to configure, build,\n-                             and install.\n-* More Extensions::          Features many users won't know to ask for.\n-* Machine Model::            `g77' should better leverage `gcc'.\n-* Internals Documentation::  Make maintenance easier.\n-* Internals Improvements::   Make internals more robust.\n-* Better Diagnostics::       Make using `g77' on new code easier.\n-\n-\u001f\n-File: g77.info,  Node: Efficiency,  Next: Better Optimization,  Up: Projects\n-\n-Improve Efficiency\n-==================\n-\n-   Don't bother doing any performance analysis until most of the\n-following items are taken care of, because there's no question they\n-represent serious space/time problems, although some of them show up\n-only given certain kinds of (popular) input.\n-\n-   * Improve `malloc' package and its uses to specify more info about\n-     memory pools and, where feasible, use obstacks to implement them.\n-\n-   * Skip over uninitialized portions of aggregate areas (arrays,\n-     `COMMON' areas, `EQUIVALENCE' areas) so zeros need not be output.\n-     This would reduce memory usage for large initialized aggregate\n-     areas, even ones with only one initialized element.\n-\n-     As of version 0.5.18, a portion of this item has already been\n-     accomplished.\n-\n-   * Prescan the statement (in `sta.c') so that the nature of the\n-     statement is determined as much as possible by looking entirely at\n-     its form, and not looking at any context (previous statements,\n-     including types of symbols).  This would allow ripping out of the\n-     statement-confirmation, symbol retraction/confirmation, and\n-     diagnostic inhibition mechanisms.  Plus, it would result in\n-     much-improved diagnostics.  For example, `CALL\n-     some-intrinsic(...)', where the intrinsic is not a subroutine\n-     intrinsic, would result actual error instead of the\n-     unimplemented-statement catch-all.\n-\n-   * Throughout `g77', don't pass line/column pairs where a simple\n-     `ffewhere' type, which points to the error as much as is desired\n-     by the configuration, will do, and don't pass `ffelexToken' types\n-     where a simple `ffewhere' type will do.  Then, allow new default\n-     configuration of `ffewhere' such that the source line text is not\n-     preserved, and leave it to things like Emacs' next-error function\n-     to point to them (now that `next-error' supports column, or,\n-     perhaps, character-offset, numbers).  The change in calling\n-     sequences should improve performance somewhat, as should not\n-     having to save source lines.  (Whether this whole item will\n-     improve performance is questionable, but it should improve\n-     maintainability.)\n-\n-   * Handle `DATA (A(I),I=1,1000000)/1000000*2/' more efficiently,\n-     especially as regards the assembly output.  Some of this might\n-     require improving the back end, but lots of improvement in\n-     space/time required in `g77' itself can be fairly easily obtained\n-     without touching the back end.  Maybe type-conversion, where\n-     necessary, can be speeded up as well in cases like the one shown\n-     (converting the `2' into `2.').\n-\n-   * If analysis shows it to be worthwhile, optimize `lex.c'.\n-\n-   * Consider redesigning `lex.c' to not need any feedback during\n-     tokenization, by keeping track of enough parse state on its own.\n-\n-\u001f\n-File: g77.info,  Node: Better Optimization,  Next: Simplify Porting,  Prev: Efficiency,  Up: Projects\n-\n-Better Optimization\n-===================\n-\n-   Much of this work should be put off until after `g77' has all the\n-features necessary for its widespread acceptance as a useful F77\n-compiler.  However, perhaps this work can be done in parallel during\n-the feature-adding work.\n-\n-   * Do the equivalent of the trick of putting `extern inline' in front\n-     of every function definition in `libf2c' and #include'ing the\n-     resulting file in `f2c'+`gcc'--that is, inline all\n-     run-time-library functions that are at all worth inlining.  (Some\n-     of this has already been done, such as for integral\n-     exponentiation.)\n-\n-   * When doing `CHAR_VAR = CHAR_FUNC(...)', and it's clear that types\n-     line up and `CHAR_VAR' is addressable or not a `VAR_DECL', make\n-     `CHAR_VAR', not a temporary, be the receiver for `CHAR_FUNC'.\n-     (This is now done for `COMPLEX' variables.)\n-\n-   * Design and implement Fortran-specific optimizations that don't\n-     really belong in the back end, or where the front end needs to\n-     give the back end more info than it currently does.\n-\n-   * Design and implement a new run-time library interface, with the\n-     code going into `libgcc' so no special linking is required to link\n-     Fortran programs using standard language features.  This library\n-     would speed up lots of things, from I/O (using precompiled formats,\n-     doing just one, or, at most, very few, calls for arrays or array\n-     sections, and so on) to general computing (array/section\n-     implementations of various intrinsics, implementation of commonly\n-     performed loops that aren't likely to be optimally compiled\n-     otherwise, etc.).\n-\n-     Among the important things the library would do are:\n-\n-        * Be a one-stop-shop-type library, hence shareable and usable\n-          by all, in that what are now library-build-time options in\n-          `libf2c' would be moved at least to the `g77' compile phase,\n-          if not to finer grains (such as choosing how list-directed\n-          I/O formatting is done by default at `OPEN' time, for\n-          preconnected units via options or even statements in the main\n-          program unit, maybe even on a per-I/O basis with appropriate\n-          pragma-like devices).\n-\n-   * Probably requiring the new library design, change interface to\n-     normally have `COMPLEX' functions return their values in the way\n-     `gcc' would if they were declared `__complex__ float', rather than\n-     using the mechanism currently used by `CHARACTER' functions\n-     (whereby the functions are compiled as returning void and their\n-     first arg is a pointer to where to store the result).  (Don't\n-     append underscores to external names for `COMPLEX' functions in\n-     some cases once `g77' uses `gcc' rather than `f2c' calling\n-     conventions.)\n-\n-   * Do something useful with `doiter' references where possible.  For\n-     example, `CALL FOO(I)' cannot modify `I' if within a `DO' loop\n-     that uses `I' as the iteration variable, and the back end might\n-     find that info useful in determining whether it needs to read `I'\n-     back into a register after the call.  (It normally has to do that,\n-     unless it knows `FOO' never modifies its passed-by-reference\n-     argument, which is rarely the case for Fortran-77 code.)\n-\n-\u001f\n-File: g77.info,  Node: Simplify Porting,  Next: More Extensions,  Prev: Better Optimization,  Up: Projects\n-\n-Simplify Porting\n-================\n-\n-   Making `g77' easier to configure, port, build, and install, either\n-as a single-system compiler or as a cross-compiler, would be very\n-useful.\n-\n-   * A new library (replacing `libf2c') should improve portability as\n-     well as produce more optimal code.  Further, `g77' and the new\n-     library should conspire to simplify naming of externals, such as\n-     by removing unnecessarily added underscores, and to\n-     reduce/eliminate the possibility of naming conflicts, while making\n-     debugger more straightforward.\n-\n-     Also, it should make multi-language applications more feasible,\n-     such as by providing Fortran intrinsics that get Fortran unit\n-     numbers given C `FILE *' descriptors.\n-\n-   * Possibly related to a new library, `g77' should produce the\n-     equivalent of a `gcc' `main(argc, argv)' function when it compiles\n-     a main program unit, instead of compiling something that must be\n-     called by a library implementation of `main()'.\n-\n-     This would do many useful things such as provide more flexibility\n-     in terms of setting up exception handling, not requiring\n-     programmers to start their debugging sessions with `breakpoint\n-     MAIN__' followed by `run', and so on.\n-\n-   * The GBE needs to understand the difference between alignment\n-     requirements and desires.  For example, on Intel x86 machines,\n-     `g77' currently imposes overly strict alignment requirements, due\n-     to the back end, but it would be useful for Fortran and C\n-     programmers to be able to override these *recommendations* as long\n-     as they don't violate the actual processor *requirements*.\n-\n-\u001f\n-File: g77.info,  Node: More Extensions,  Next: Machine Model,  Prev: Simplify Porting,  Up: Projects\n-\n-More Extensions\n-===============\n-\n-   These extensions are not the sort of things users ask for \"by name\",\n-but they might improve the usability of `g77', and Fortran in general,\n-in the long run.  Some of these items really pertain to improving `g77'\n-internals so that some popular extensions can be more easily supported.\n-\n-   * Look through all the documentation on the GNU Fortran language,\n-     dialects, compiler, missing features, bugs, and so on.  Many\n-     mentions of incomplete or missing features are sprinkled\n-     throughout.  It is not worth repeating them here.\n-\n-   * Support arbitrary operands for concatenation, even in contexts\n-     where run-time allocation is required.\n-\n-   * Consider adding a `NUMERIC' type to designate typeless numeric\n-     constants, named and unnamed.  The idea is to provide a\n-     forward-looking, effective replacement for things like the\n-     old-style `PARAMETER' statement when people really need\n-     typelessness in a maintainable, portable, clearly documented way.\n-     Maybe `TYPELESS' would include `CHARACTER', `POINTER', and\n-     whatever else might come along.  (This is not really a call for\n-     polymorphism per se, just an ability to express limited, syntactic\n-     polymorphism.)\n-\n-   * Support `OPEN(...,KEY=(...),...)'.\n-\n-   * Support arbitrary file unit numbers, instead of limiting them to 0\n-     through `MXUNIT-1'.  (This is a `libf2c' issue.)\n-\n-   * `OPEN(NOSPANBLOCKS,...)' is treated as\n-     `OPEN(UNIT=NOSPANBLOCKS,...)', so a later `UNIT=' in the first\n-     example is invalid.  Make sure this is what users of this feature\n-     would expect.\n-\n-   * Currently `g77' disallows `READ(1'10)' since it is an obnoxious\n-     syntax, but supporting it might be pretty easy if needed.  More\n-     details are needed, such as whether general expressions separated\n-     by an apostrophe are supported, or maybe the record number can be\n-     a general expression, and so on.\n-\n-   * Support `STRUCTURE', `UNION', `MAP', and `RECORD' fully.\n-     Currently there is no support at all for `%FILL' in `STRUCTURE'\n-     and related syntax, whereas the rest of the stuff has at least\n-     some parsing support.  This requires either major changes to\n-     `libf2c' or its replacement.\n-\n-   * F90 and `g77' probably disagree about label scoping relative to\n-     `INTERFACE' and `END INTERFACE', and their contained procedure\n-     interface bodies (blocks?).\n-\n-   * `ENTRY' doesn't support F90 `RESULT()' yet, since that was added\n-     after S8.112.\n-\n-   * Empty-statement handling (10 ;;CONTINUE;;) probably isn't\n-     consistent with the final form of the standard (it was vague at\n-     S8.112).\n-\n-   * It seems to be an \"open\" question whether a file, immediately\n-     after being `OPEN'ed,is positioned at the beginning, the end, or\n-     wherever--it might be nice to offer an option of opening to\n-     \"undefined\" status, requiring an explicit absolute-positioning\n-     operation to be performed before any other (besides `CLOSE') to\n-     assist in making applications port to systems (some IBM?) that\n-     `OPEN' to the end of a file or some such thing.\n-\n-\u001f\n-File: g77.info,  Node: Machine Model,  Next: Internals Documentation,  Prev: More Extensions,  Up: Projects\n-\n-Machine Model\n-=============\n-\n-   This items pertain to generalizing `g77''s view of the machine model\n-to more fully accept whatever the GBE provides it via its configuration.\n-\n-   * Switch to using `REAL_VALUE_TYPE' to represent floating-point\n-     constants exclusively so the target float format need not be\n-     required.  This means changing the way `g77' handles\n-     initialization of aggregate areas having more than one type, such\n-     as `REAL' and `INTEGER', because currently it initializes them as\n-     if they were arrays of `char' and uses the bit patterns of the\n-     constants of the various types in them to determine what to stuff\n-     in elements of the arrays.\n-\n-   * Rely more and more on back-end info and capabilities, especially\n-     in the area of constants (where having the `g77' front-end's IL\n-     just store the appropriate tree nodes containing constants might\n-     be best).\n-\n-   * Suite of C and Fortran programs that a user/administrator can run\n-     on a machine to help determine the configuration for `g77' before\n-     building and help determine if the compiler works (especially with\n-     whatever libraries are installed) after building.\n-\n-\u001f\n-File: g77.info,  Node: Internals Documentation,  Next: Internals Improvements,  Prev: Machine Model,  Up: Projects\n-\n-Internals Documentation\n-=======================\n-\n-   Better info on how `g77' works and how to port it is needed.  Much\n-of this should be done only after the redesign planned for 0.6 is\n-complete.\n-\n-\u001f\n-File: g77.info,  Node: Internals Improvements,  Next: Better Diagnostics,  Prev: Internals Documentation,  Up: Projects\n-\n-Internals Improvements\n-======================\n-\n-   Some more items that would make `g77' more reliable and easier to\n-maintain:\n-\n-   * Generally make expression handling focus more on critical syntax\n-     stuff, leaving semantics to callers.  For example, anything a\n-     caller can check, semantically, let it do so, rather than having\n-     `expr.c' do it.  (Exceptions might include things like diagnosing\n-     `FOO(I--K:)=BAR' where `FOO' is a `PARAMETER'--if it seems\n-     important to preserve the left-to-right-in-source order of\n-     production of diagnostics.)\n-\n-   * Come up with better naming conventions for `-D' to establish\n-     requirements to achieve desired implementation dialect via\n-     `proj.h'.\n-\n-   * Clean up used tokens and `ffewhere's in `ffeglobal_terminate_1'.\n-\n-   * Replace `sta.c' `outpooldisp' mechanism with `malloc_pool_use'.\n-\n-   * Check for `opANY' in more places in `com.c', `std.c', and `ste.c',\n-     and get rid of the `opCONVERT(opANY)' kludge (after determining if\n-     there is indeed no real need for it).\n-\n-   * Utility to read and check `bad.def' messages and their references\n-     in the code, to make sure calls are consistent with message\n-     templates.\n-\n-   * Search and fix `&ffe...' and similar so that `ffe...ptr...' macros\n-     are available instead (a good argument for wishing this could have\n-     written all this stuff in C++, perhaps).  On the other hand, it's\n-     questionable whether this sort of improvement is really necessary,\n-     given the availability of tools such as Emacs and Perl, which make\n-     finding any address-taking of structure members easy enough?\n-\n-   * Some modules truly export the member names of their structures\n-     (and the structures themselves), maybe fix this, and fix other\n-     modules that just appear to as well (by appending `_', though it'd\n-     be ugly and probably not worth the time).\n-\n-   * Implement C macros `RETURNS(value)' and `SETS(something,value)' in\n-     `proj.h' and use them throughout `g77' source code (especially in\n-     the definitions of access macros in `.h' files) so they can be\n-     tailored to catch code writing into a `RETURNS()' or reading from\n-     a `SETS()'.\n-\n-   * Decorate throughout with `const' and other such stuff.\n-\n-   * All F90 notational derivations in the source code are still based\n-     on the S8.112 version of the draft standard.  Probably should\n-     update to the official standard, or put documentation of the rules\n-     as used in the code...uh...in the code.\n-\n-   * Some `ffebld_new' calls (those outside of `ffeexpr.c' or inside\n-     but invoked via paths not involving `ffeexpr_lhs' or\n-     `ffeexpr_rhs') might be creating things in improper pools, leading\n-     to such things staying around too long or (doubtful, but possible\n-     and dangerous) not long enough.\n-\n-   * Some `ffebld_list_new' (or whatever) calls might not be matched by\n-     `ffebld_list_bottom' (or whatever) calls, which might someday\n-     matter.  (It definitely is not a problem just yet.)\n-\n-   * Probably not doing clean things when we fail to `EQUIVALENCE'\n-     something due to alignment/mismatch or other problems--they end up\n-     without `ffestorag' objects, so maybe the backend (and other parts\n-     of the front end) can notice that and handle like an `opANY' (do\n-     what it wants, just don't complain or crash).  Most of this seems\n-     to have been addressed by now, but a code review wouldn't hurt.\n-\n-\u001f\n-File: g77.info,  Node: Better Diagnostics,  Prev: Internals Improvements,  Up: Projects\n-\n-Better Diagnostics\n-==================\n-\n-   These are things users might not ask about, or that need to be\n-looked into, before worrying about.  Also here are items that involve\n-reducing unnecessary diagnostic clutter.\n-\n-   * When `FUNCTION' and `ENTRY' point types disagree (`CHARACTER'\n-     lengths, type classes, and so on), `ANY'-ize the offending `ENTRY'\n-     point and any *new* dummies it specifies.\n-\n-   * Speed up and improve error handling for data when repeat-count is\n-     specified.  For example, don't output 20 unnecessary messages\n-     after the first necessary one for:\n-\n-          INTEGER X(20)\n-          CONTINUE\n-          DATA (X(I), J= 1, 20) /20*5/\n-          END\n-\n-     (The `CONTINUE' statement ensures the `DATA' statement is\n-     processed in the context of executable, not specification,\n-     statements.)\n-\n-\u001f\n-File: g77.info,  Node: Diagnostics,  Next: Index,  Prev: Projects,  Up: Top\n-\n-Diagnostics\n-***********\n-\n-   Some diagnostics produced by `g77' require sufficient explanation\n-that the explanations are given below, and the diagnostics themselves\n-identify the appropriate explanation.\n-\n-   Identification uses the GNU Info format--specifically, the `info'\n-command that displays the explanation is given in within square\n-brackets in the diagnostic.  For example:\n-\n-     foo.f:5: Invalid statement [info -f g77 M FOOEY]\n-\n-   More details about the above diagnostic is found in the `g77' Info\n-documentation, menu item `M', submenu item `FOOEY', which is displayed\n-by typing the UNIX command `info -f g77 M FOOEY'.\n-\n-   Other Info readers, such as EMACS, may be just as easily used to\n-display the pertinent node.  In the above example, `g77' is the Info\n-document name, `M' is the top-level menu item to select, and, in that\n-node (named `Diagnostics', the name of this chapter, which is the very\n-text you're reading now), `FOOEY' is the menu item to select.\n-\n-* Menu:\n-\n-* CMPAMBIG::    Ambiguous use of intrinsic.\n-* EXPIMP::      Intrinsic used explicitly and implicitly.\n-* INTGLOB::     Intrinsic also used as name of global.\n-* LEX::         Various lexer messages\n-* GLOBALS::     Disagreements about globals.\n-\n-\u001f\n-File: g77.info,  Node: CMPAMBIG,  Next: EXPIMP,  Up: Diagnostics\n-\n-`CMPAMBIG'\n-==========\n-\n-     Ambiguous use of intrinsic INTRINSIC ...\n-\n-   The type of the argument to the invocation of the INTRINSIC\n-intrinsic is a `COMPLEX' type other than `COMPLEX(KIND=1)'.  Typically,\n-it is `COMPLEX(KIND=2)', also known as `DOUBLE COMPLEX'.\n-\n-   The interpretation of this invocation depends on the particular\n-dialect of Fortran for which the code was written.  Some dialects\n-convert the real part of the argument to `REAL(KIND=1)', thus losing\n-precision; other dialects, and Fortran 90, do no such conversion.\n-\n-   So, GNU Fortran rejects such invocations except under certain\n-circumstances, to avoid making an incorrect assumption that results in\n-generating the wrong code.\n-\n-   To determine the dialect of the program unit, perhaps even whether\n-that particular invocation is properly coded, determine how the result\n-of the intrinsic is used.\n-\n-   The result of INTRINSIC is expected (by the original programmer) to\n-be `REAL(KIND=1)' (the non-Fortran-90 interpretation) if:\n-\n-   * It is passed as an argument to a procedure that explicitly or\n-     implicitly declares that argument `REAL(KIND=1)'.\n-\n-     For example, a procedure with no `DOUBLE PRECISION' or `IMPLICIT\n-     DOUBLE PRECISION' statement specifying the dummy argument\n-     corresponding to an actual argument of `REAL(Z)', where `Z' is\n-     declared `DOUBLE COMPLEX', strongly suggests that the programmer\n-     expected `REAL(Z)' to return `REAL(KIND=1)' instead of\n-     `REAL(KIND=2)'.\n-\n-   * It is used in a context that would otherwise not include any\n-     `REAL(KIND=2)' but where treating the INTRINSIC invocation as\n-     `REAL(KIND=2)' would result in unnecessary promotions and\n-     (typically) more expensive operations on the wider type.\n-\n-     For example:\n-\n-          DOUBLE COMPLEX Z\n-          ...\n-          R(1) = T * REAL(Z)\n-\n-     The above example suggests the programmer expected the real part\n-     of `Z' to be converted to `REAL(KIND=1)' before being multiplied\n-     by `T' (presumed, along with `R' above, to be type `REAL(KIND=1)').\n-\n-     Otherwise, the conversion would have to be delayed until after the\n-     multiplication, requiring not only an extra conversion (of `T' to\n-     `REAL(KIND=2)'), but a (typically) more expensive multiplication\n-     (a double-precision multiplication instead of a single-precision\n-     one).\n-\n-   The result of INTRINSIC is expected (by the original programmer) to\n-be `REAL(KIND=2)' (the Fortran 90 interpretation) if:\n-\n-   * It is passed as an argument to a procedure that explicitly or\n-     implicitly declares that argument `REAL(KIND=2)'.\n-\n-     For example, a procedure specifying a `DOUBLE PRECISION' dummy\n-     argument corresponding to an actual argument of `REAL(Z)', where\n-     `Z' is declared `DOUBLE COMPLEX', strongly suggests that the\n-     programmer expected `REAL(Z)' to return `REAL(KIND=2)' instead of\n-     `REAL(KIND=1)'.\n-\n-   * It is used in an expression context that includes other\n-     `REAL(KIND=2)' operands, or is assigned to a `REAL(KIND=2)'\n-     variable or array element.\n-\n-     For example:\n-\n-          DOUBLE COMPLEX Z\n-          DOUBLE PRECISION R, T\n-          ...\n-          R(1) = T * REAL(Z)\n-\n-     The above example suggests the programmer expected the real part\n-     of `Z' to *not* be converted to `REAL(KIND=1)' by the `REAL()'\n-     intrinsic.\n-\n-     Otherwise, the conversion would have to be immediately followed by\n-     a conversion back to `REAL(KIND=2)', losing the original, full\n-     precision of the real part of `Z', before being multiplied by `T'.\n-\n-   Once you have determined whether a particular invocation of INTRINSIC\n-expects the Fortran 90 interpretation, you can:\n-\n-   * Change it to `DBLE(EXPR)' (if INTRINSIC is `REAL') or\n-     `DIMAG(EXPR)' (if INTRINSIC is `AIMAG') if it expected the Fortran\n-     90 interpretation.\n-\n-     This assumes EXPR is `COMPLEX(KIND=2)'--if it is some other type,\n-     such as `COMPLEX*32', you should use the appropriate intrinsic,\n-     such as the one to convert to `REAL*16' (perhaps `DBLEQ()' in\n-     place of `DBLE()', and `QIMAG()' in place of `DIMAG()').\n-\n-   * Change it to `REAL(INTRINSIC(EXPR))', otherwise.  This converts to\n-     `REAL(KIND=1)' in all working Fortran compilers.\n-\n-   If you don't want to change the code, and you are certain that all\n-ambiguous invocations of INTRINSIC in the source file have the same\n-expectation regarding interpretation, you can:\n-\n-   * Compile with the `g77' option `-ff90', to enable the Fortran 90\n-     interpretation.\n-\n-   * Compile with the `g77' options `-fno-f90 -fugly-complex', to\n-     enable the non-Fortran-90 interpretations.\n-\n-   *Note REAL() and AIMAG() of Complex::, for more information on this\n-issue.\n-\n-   Note: If the above suggestions don't produce enough evidence as to\n-whether a particular program expects the Fortran 90 interpretation of\n-this ambiguous invocation of INTRINSIC, there is one more thing you can\n-try.\n-\n-   If you have access to most or all the compilers used on the program\n-to create successfully tested and deployed executables, read the\n-documentation for, and *also* test out, each compiler to determine how\n-it treats the INTRINSIC intrinsic in this case.  (If all the compilers\n-don't agree on an interpretation, there might be lurking bugs in the\n-deployed versions of the program.)\n-\n-   The following sample program might help:\n-\n-           PROGRAM JCB003\n-     C\n-     C Written by James Craig Burley 1997-02-23.\n-     C Contact via Internet email: burley@gnu.ai.mit.edu\n-     C\n-     C Determine how compilers handle non-standard REAL\n-     C and AIMAG on DOUBLE COMPLEX operands.\n-     C\n-           DOUBLE COMPLEX Z\n-           REAL R\n-           Z = (3.3D0, 4.4D0)\n-           R = Z\n-           CALL DUMDUM(Z, R)\n-           R = REAL(Z) - R\n-           IF (R .NE. 0.) PRINT *, 'REAL() is Fortran 90'\n-           IF (R .EQ. 0.) PRINT *, 'REAL() is not Fortran 90'\n-           R = 4.4D0\n-           CALL DUMDUM(Z, R)\n-           R = AIMAG(Z) - R\n-           IF (R .NE. 0.) PRINT *, 'AIMAG() is Fortran 90'\n-           IF (R .EQ. 0.) PRINT *, 'AIMAG() is not Fortran 90'\n-           END\n-     C\n-     C Just to make sure compiler doesn't use naive flow\n-     C analysis to optimize away careful work above,\n-     C which might invalidate results....\n-     C\n-           SUBROUTINE DUMDUM(Z, R)\n-           DOUBLE COMPLEX Z\n-           REAL R\n-           END\n-\n-   If the above program prints contradictory results on a particular\n-compiler, run away!\n-"}, {"sha": "a75f2f2d988394d2a4783054c2a294de66d31bfd", "filename": "gcc/f/g77.info-19", "status": "removed", "additions": 0, "deletions": 296, "changes": 296, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-19", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-19", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-19?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2", "patch": "@@ -1,296 +0,0 @@\n-This is Info file g77.info, produced by Makeinfo version 1.68 from the\n-input file g77.texi.\n-\n-   This file explains how to use the GNU Fortran system.\n-\n-   Published by the Free Software Foundation 59 Temple Place - Suite 330\n-Boston, MA 02111-1307 USA\n-\n-   Copyright (C) 1995-1997 Free Software Foundation, Inc.\n-\n-   Permission is granted to make and distribute verbatim copies of this\n-manual provided the copyright notice and this permission notice are\n-preserved on all copies.\n-\n-   Permission is granted to copy and distribute modified versions of\n-this manual under the conditions for verbatim copying, provided also\n-that the sections entitled \"GNU General Public License,\" \"Funding for\n-Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n-included exactly as in the original, and provided that the entire\n-resulting derived work is distributed under the terms of a permission\n-notice identical to this one.\n-\n-   Permission is granted to copy and distribute translations of this\n-manual into another language, under the above conditions for modified\n-versions, except that the sections entitled \"GNU General Public\n-License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n-`Look And Feel'\", and this permission notice, may be included in\n-translations approved by the Free Software Foundation instead of in the\n-original English.\n-\n-   Contributed by James Craig Burley (<burley@gnu.ai.mit.edu>).\n-Inspired by a first pass at translating `g77-0.5.16/f/DOC' that was\n-contributed to Craig by David Ronis (<ronis@onsager.chem.mcgill.ca>).\n-\n-INFO-DIR-SECTION Fortran Programming\n-START-INFO-DIR-ENTRY\n-* g77: (g77).               The GNU Fortran compilation system.\n-END-INFO-DIR-ENTRY\n-\n-\u001f\n-File: g77.info,  Node: EXPIMP,  Next: INTGLOB,  Prev: CMPAMBIG,  Up: Diagnostics\n-\n-`EXPIMP'\n-========\n-\n-     Intrinsic INTRINSIC referenced ...\n-\n-   The INTRINSIC is explicitly declared in one program unit in the\n-source file and implicitly used as an intrinsic in another program unit\n-in the same source file.\n-\n-   This diagnostic is designed to catch cases where a program might\n-depend on using the name INTRINSIC as an intrinsic in one program unit\n-and as a global name (such as the name of a subroutine or function) in\n-another, but `g77' recognizes the name as an intrinsic in both cases.\n-\n-   After verifying that the program unit making implicit use of the\n-intrinsic is indeed written expecting the intrinsic, add an `INTRINSIC\n-INTRINSIC' statement to that program unit to prevent this warning.\n-\n-   This and related warnings are disabled by using the `-Wno-globals'\n-option when compiling.\n-\n-   Note that this warning is not issued for standard intrinsics.\n-Standard intrinsics include those described in the FORTRAN 77 standard\n-and, if `-ff90' is specified, those described in the Fortran 90\n-standard.  Such intrinsics are not as likely to be confused with user\n-procedures as intrinsics provided as extensions to the standard by\n-`g77'.\n-\n-\u001f\n-File: g77.info,  Node: INTGLOB,  Next: LEX,  Prev: EXPIMP,  Up: Diagnostics\n-\n-`INTGLOB'\n-=========\n-\n-     Same name `INTRINSIC' given ...\n-\n-   The name INTRINSIC is used for a global entity (a common block or a\n-program unit) in one program unit and implicitly used as an intrinsic\n-in another program unit.\n-\n-   This diagnostic is designed to catch cases where a program intends\n-to use a name entirely as a global name, but `g77' recognizes the name\n-as an intrinsic in the program unit that references the name, a\n-situation that would likely produce incorrect code.\n-\n-   For example:\n-\n-     INTEGER FUNCTION TIME()\n-     ...\n-     END\n-     ...\n-     PROGRAM SAMP\n-     INTEGER TIME\n-     PRINT *, 'Time is ', TIME()\n-     END\n-\n-   The above example defines a program unit named `TIME', but the\n-reference to `TIME' in the main program unit `SAMP' is normally treated\n-by `g77' as a reference to the intrinsic `TIME()' (unless a\n-command-line option that prevents such treatment has been specified).\n-\n-   As a result, the program `SAMP' will *not* invoke the `TIME'\n-function in the same source file.\n-\n-   Since `g77' recognizes `libU77' procedures as intrinsics, and since\n-some existing code uses the same names for its own procedures as used\n-by some `libU77' procedures, this situation is expected to arise often\n-enough to make this sort of warning worth issuing.\n-\n-   After verifying that the program unit making implicit use of the\n-intrinsic is indeed written expecting the intrinsic, add an `INTRINSIC\n-INTRINSIC' statement to that program unit to prevent this warning.\n-\n-   Or, if you believe the program unit is designed to invoke the\n-program-defined procedure instead of the intrinsic (as recognized by\n-`g77'), add an `EXTERNAL INTRINSIC' statement to the program unit that\n-references the name to prevent this warning.\n-\n-   This and related warnings are disabled by using the `-Wno-globals'\n-option when compiling.\n-\n-   Note that this warning is not issued for standard intrinsics.\n-Standard intrinsics include those described in the FORTRAN 77 standard\n-and, if `-ff90' is specified, those described in the Fortran 90\n-standard.  Such intrinsics are not as likely to be confused with user\n-procedures as intrinsics provided as extensions to the standard by\n-`g77'.\n-\n-\u001f\n-File: g77.info,  Node: LEX,  Next: GLOBALS,  Prev: INTGLOB,  Up: Diagnostics\n-\n-`LEX'\n-=====\n-\n-     Unrecognized character ...\n-     Invalid first character ...\n-     Line too long ...\n-     Non-numeric character ...\n-     Continuation indicator ...\n-     Label at ... invalid with continuation line indicator ...\n-     Character constant ...\n-     Continuation line ...\n-     Statement at ... begins with invalid token\n-\n-   Although the diagnostics identify specific problems, they can be\n-produced when general problems such as the following occur:\n-\n-   * The source file contains something other than Fortran code.\n-\n-     If the code in the file does not look like many of the examples\n-     elsewhere in this document, it might not be Fortran code.  (Note\n-     that Fortran code often is written in lower case letters, while\n-     the examples in this document use upper case letters, for\n-     stylistic reasons.)\n-\n-     For example, if the file contains lots of strange-looking\n-     characters, it might be APL source code; if it contains lots of\n-     parentheses, it might be Lisp source code; if it contains lots of\n-     bugs, it might be C++ source code.\n-\n-   * The source file contains free-form Fortran code, but `-ffree-form'\n-     was not specified on the command line to compile it.\n-\n-     Free form is a newer form for Fortran code.  The older, classic\n-     form is called fixed form.\n-\n-     Fixed-form code is visually fairly distinctive, because numerical\n-     labels and comments are all that appear in the first five columns\n-     of a line, the sixth column is reserved to denote continuation\n-     lines, and actual statements start at or beyond column 7.  Spaces\n-     generally are not significant, so if you see statements such as\n-     `REALX,Y' and `DO10I=1,100', you are looking at fixed-form code.\n-     Comment lines are indicated by the letter `C' or the symbol `*' in\n-     column 1.  (Some code uses `!' or `/*' to begin in-line comments,\n-     which many compilers support.)\n-\n-     Free-form code is distinguished from fixed-form source primarily\n-     by the fact that statements may start anywhere.  (If lots of\n-     statements start in columns 1 through 6, that's a strong indicator\n-     of free-form source.)  Consecutive keywords must be separated by\n-     spaces, so `REALX,Y' is not valid, while `REAL X,Y' is.  There are\n-     no comment lines per se, but `!' starts a comment anywhere in a\n-     line (other than within a character or hollerith constant).\n-\n-     *Note Source Form::, for more information.\n-\n-   * The source file is in fixed form and has been edited without\n-     sensitivity to the column requirements.\n-\n-     Statements in fixed-form code must be entirely contained within\n-     columns 7 through 72 on a given line.  Starting them \"early\" is\n-     more likely to result in diagnostics than finishing them \"late\",\n-     though both kinds of errors are often caught at compile time.\n-\n-     For example, if the following code fragment is edited by following\n-     the commented instructions literally, the result, shown afterward,\n-     would produce a diagnostic when compiled:\n-\n-          C On XYZZY systems, remove \"C\" on next line:\n-          C     CALL XYZZY_RESET\n-\n-     The result of editing the above line might be:\n-\n-          C On XYZZY systems, remove \"C\" on next line:\n-               CALL XYZZY_RESET\n-\n-     However, that leaves the first `C' in the `CALL' statement in\n-     column 6, making it a comment line, which is not really what the\n-     author intended, and which is likely to result in one of the\n-     above-listed diagnostics.\n-\n-     *Replacing* the `C' in column 1 with a space is the proper change\n-     to make, to ensure the `CALL' keyword starts in or after column 7.\n-\n-     Another common mistake like this is to forget that fixed-form\n-     source lines are significant through only column 72, and that,\n-     normally, any text beyond column 72 is ignored or is diagnosed at\n-     compile time.\n-\n-     *Note Source Form::, for more information.\n-\n-   * The source file requires preprocessing, and the preprocessing is\n-     not being specified at compile time.\n-\n-     A source file containing lines beginning with `#define',\n-     `#include', `#if', and so on is likely one that requires\n-     preprocessing.\n-\n-     If the file's suffix is `.f' or `.for', the file will normally be\n-     compiled *without* preprocessing by `g77'.\n-\n-     Change the file's suffix from `.f' to `.F' (or, on systems with\n-     case-insensitive file names, to `.fpp') or from `.for' to `.fpp'.\n-     `g77' compiles files with such names *with* preprocessing.\n-\n-     Or, learn how to use `gcc''s `-x' option to specify the language\n-     `f77-cpp-input' for Fortran files that require preprocessing.\n-     *Note gcc: (Using and Porting GNU CC)Overall Options.\n-\n-   * The source file is preprocessed, and the results of preprocessing\n-     result in syntactic errors that are not necessarily obvious to\n-     someone examining the source file itself.\n-\n-     Examples of errors resulting from preprocessor macro expansion\n-     include exceeding the line-length limit, improperly starting,\n-     terminating, or incorporating the apostrophe or double-quote in a\n-     character constant, improperly forming a hollerith constant, and\n-     so on.\n-\n-     *Note Options Controlling the Kind of Output: Overall Options, for\n-     suggestions about how to use, and not use, preprocessing for\n-     Fortran code.\n-\n-\u001f\n-File: g77.info,  Node: GLOBALS,  Prev: LEX,  Up: Diagnostics\n-\n-`GLOBALS'\n-=========\n-\n-     Global name NAME defined at ... already defined...\n-     Global name NAME at ... has different type...\n-     Too many arguments passed to NAME at ...\n-     Too few arguments passed to NAME at ...\n-     Argument #N of NAME is ...\n-\n-   These messages all identify disagreements about the global procedure\n-named NAME among different program units (usually including NAME\n-itself).\n-\n-   These disagreements, if not diagnosed, could result in a compiler\n-crash if the compiler attempted to inline a reference to NAME within a\n-calling program unit that disagreed with the NAME program unit\n-regarding whether the procedure is a subroutine or function, the type\n-of the return value of the procedure (if it is a function), the number\n-of arguments the procedure accepts, or the type of each argument.\n-\n-   Such disagreements *should* be fixed in the Fortran code itself.\n-However, if that is not immediately practical, and the code has been\n-working for some time, it is possible it will work when compiled by\n-`g77' with the `-fno-globals' option.\n-\n-   The `-fno-globals' option disables these diagnostics, and also\n-disables all inlining of references to global procedures to avoid\n-compiler crashes.  The diagnostics are actually produced, but as\n-warnings, unless the `-Wno-globals' option also is specified.\n-\n-   After using `-fno-globals' to work around these problems, it is wise\n-to stop using that option and address them by fixing the Fortran code,\n-because such problems, while they might not actually result in bugs on\n-some systems, indicate that the code is not as portable as it could be.\n-In particular, the code might appear to work on a particular system,\n-but have bugs that affect the reliability of the data without\n-exhibiting any other outward manifestations of the bugs.\n-"}, {"sha": "191b4c8d0e8ce7b376206adea96433ef559cbcad", "filename": "gcc/f/g77.info-2", "status": "removed", "additions": 0, "deletions": 968, "changes": 968, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-2?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2", "patch": "@@ -1,968 +0,0 @@\n-This is Info file g77.info, produced by Makeinfo version 1.68 from the\n-input file g77.texi.\n-\n-   This file explains how to use the GNU Fortran system.\n-\n-   Published by the Free Software Foundation 59 Temple Place - Suite 330\n-Boston, MA 02111-1307 USA\n-\n-   Copyright (C) 1995-1997 Free Software Foundation, Inc.\n-\n-   Permission is granted to make and distribute verbatim copies of this\n-manual provided the copyright notice and this permission notice are\n-preserved on all copies.\n-\n-   Permission is granted to copy and distribute modified versions of\n-this manual under the conditions for verbatim copying, provided also\n-that the sections entitled \"GNU General Public License,\" \"Funding for\n-Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n-included exactly as in the original, and provided that the entire\n-resulting derived work is distributed under the terms of a permission\n-notice identical to this one.\n-\n-   Permission is granted to copy and distribute translations of this\n-manual into another language, under the above conditions for modified\n-versions, except that the sections entitled \"GNU General Public\n-License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n-`Look And Feel'\", and this permission notice, may be included in\n-translations approved by the Free Software Foundation instead of in the\n-original English.\n-\n-   Contributed by James Craig Burley (<burley@gnu.ai.mit.edu>).\n-Inspired by a first pass at translating `g77-0.5.16/f/DOC' that was\n-contributed to Craig by David Ronis (<ronis@onsager.chem.mcgill.ca>).\n-\n-INFO-DIR-SECTION Fortran Programming\n-START-INFO-DIR-ENTRY\n-* g77: (g77).               The GNU Fortran compilation system.\n-END-INFO-DIR-ENTRY\n-\n-\u001f\n-File: g77.info,  Node: Overall Options,  Next: Shorthand Options,  Prev: Option Summary,  Up: Invoking G77\n-\n-Options Controlling the Kind of Output\n-======================================\n-\n-   Compilation can involve as many as four stages: preprocessing, code\n-generation (often what is really meant by the term \"compilation\"),\n-assembly, and linking, always in that order.  The first three stages\n-apply to an individual source file, and end by producing an object\n-file; linking combines all the object files (those newly compiled, and\n-those specified as input) into an executable file.\n-\n-   For any given input file, the file name suffix determines what kind\n-of program is contained in the file--that is, the language in which the\n-program is written is generally indicated by the suffix.  Suffixes\n-specific to GNU Fortran are listed below.  *Note gcc: (Using and\n-Porting GNU CC)Overall Options, for information on suffixes recognized\n-by GNU CC.\n-\n-`FILE.f'\n-\n-`FILE.for'\n-     Fortran source code that should not be preprocessed.\n-\n-     Such source code cannot contain any preprocessor directives, such\n-     as `#include', `#define', `#if', and so on.\n-\n-`FILE.F'\n-\n-`FILE.fpp'\n-     Fortran source code that must be preprocessed (by the C\n-     preprocessor `cpp', which is part of GNU CC).\n-\n-     Note that preprocessing is not extended to the contents of files\n-     included by the `INCLUDE' directive--the `#include' preprocessor\n-     directive must be used instead.\n-\n-`FILE.r'\n-     Ratfor source code, which must be preprocessed by the `ratfor'\n-     command, which is available separately (as it is not yet part of\n-     the GNU Fortran distribution).\n-\n-   UNIX users typically use the `FILE.f' and `FILE.F' nomenclature.\n-Users of other operating systems, especially those that cannot\n-distinguish upper-case letters from lower-case letters in their file\n-names, typically use the `FILE.for' and `FILE.fpp' nomenclature.\n-\n-   Use of the preprocessor `cpp' allows use of C-like constructs such\n-as `#define' and `#include', but can lead to unexpected, even mistaken,\n-results due to Fortran's source file format.  It is recommended that\n-use of the C preprocessor be limited to `#include' and, in conjunction\n-with `#define', only `#if' and related directives, thus avoiding\n-in-line macro expansion entirely.  This recommendation applies\n-especially when using the traditional fixed source form.  With free\n-source form, fewer unexpected transformations are likely to happen, but\n-use of constructs such as Hollerith and character constants can\n-nevertheless present problems, especially when these are continued\n-across multiple source lines.  These problems result, primarily, from\n-differences between the way such constants are interpreted by the C\n-preprocessor and by a Fortran compiler.\n-\n-   Another example of a problem that results from using the C\n-preprocessor is that a Fortran comment line that happens to contain any\n-characters \"interesting\" to the C preprocessor, such as a backslash at\n-the end of the line, is not recognized by the preprocessor as a comment\n-line, so instead of being passed through \"raw\", the line is edited\n-according to the rules for the preprocessor.  For example, the\n-backslash at the end of the line is removed, along with the subsequent\n-newline, resulting in the next line being effectively commented\n-out--unfortunate if that line is a non-comment line of important code!\n-\n-   *Note:* The `-traditional' and `-undef' flags are supplied to `cpp'\n-by default, to avoid unpleasant surprises.  *Note Options Controlling\n-the Preprocessor: (gcc)Preprocessor Options.  This means that ANSI C\n-preprocessor features (such as the `#' operator) aren't available, and\n-only variables in the C reserved namespace (generally, names with a\n-leading underscore) are liable to substitution by C predefines.  Thus,\n-if you want to do system-specific tests, use, for example, `#ifdef\n-__linux__' rather than `#ifdef linux'.  Use the `-v' option to see\n-exactly how the preprocessor is invoked.\n-\n-   The following options that affect overall processing are recognized\n-by the `g77' and `gcc' commands in a GNU Fortran installation:\n-\n-`--driver=COMMAND'\n-     This works when invoking only the `g77' command, not when invoking\n-     the `gcc' command.  *Note GNU Fortran Command Options: Invoking\n-     G77, for information on this option.\n-\n-`-fversion'\n-     Ensure that the `g77'-specific version of the compiler phase is\n-     reported, if run.  (This is supplied automatically when `-v' or\n-     `--verbose' is specified as a command-line option for `g77' or\n-     `gcc' and when the resulting commands compile Fortran source\n-     files.)\n-\n-`-fset-g77-defaults'\n-     Set up whatever `gcc' options are to apply to Fortran\n-     compilations, and avoid running internal consistency checks that\n-     might take some time.\n-\n-     As of version 0.5.20, this is equivalent to `-fmove-all-movables\n-     -freduce-all-givs -frerun-loop-opt -fargument-noalias-global'.\n-\n-     This option is supplied automatically when compiling Fortran code\n-     via the `g77' or `gcc' command.  The description of this option is\n-     provided so that users seeing it in the output of, say, `g77 -v'\n-     understand why it is there.\n-\n-     Also, developers who run `f771' directly might want to specify it\n-     by hand to get the same defaults as they would running `f771' via\n-     `g77' or `gcc'.  However, such developers should, after linking a\n-     new `f771' executable, invoke it without this option once, e.g.\n-     via `./f771 -quiet < /dev/null', to ensure that they have not\n-     introduced any internal inconsistencies (such as in the table of\n-     intrinsics) before proceeding--`g77' will crash with a diagnostic\n-     if it detects an inconsistency.\n-\n-`-fno-silent'\n-     Print (to `stderr') the names of the program units as they are\n-     compiled, in a form similar to that used by popular UNIX `f77'\n-     implementations and `f2c'.\n-\n-   *Note Options Controlling the Kind of Output: (gcc)Overall Options,\n-for information on more options that control the overall operation of\n-the `gcc' command (and, by extension, the `g77' command).\n-\n-\u001f\n-File: g77.info,  Node: Shorthand Options,  Next: Fortran Dialect Options,  Prev: Overall Options,  Up: Invoking G77\n-\n-Shorthand Options\n-=================\n-\n-   The following options serve as \"shorthand\" for other options\n-accepted by the compiler:\n-\n-`-fugly'\n-     Specify that certain \"ugly\" constructs are to be quietly accepted.\n-     Same as:\n-\n-          -fugly-args -fugly-assign -fugly-assumed\n-          -fugly-comma -fugly-complex -fugly-init\n-          -fugly-logint\n-\n-     These constructs are considered inappropriate to use in new or\n-     well-maintained portable Fortran code, but widely used in old code.\n-     *Note Distensions::, for more information.\n-\n-     *Note:* The `-fugly' option is likely to be removed in a future\n-     version.  Implicitly enabling all the `-fugly-*' options is\n-     unlikely to be feasible, or sensible, in the future, so users\n-     should learn to specify only those `-fugly-*' options they really\n-     need for a particular source file.\n-\n-`-fno-ugly'\n-     Specify that all \"ugly\" constructs are to be noisily rejected.\n-     Same as:\n-\n-          -fno-ugly-args -fno-ugly-assign -fno-ugly-assumed\n-          -fno-ugly-comma -fno-ugly-complex -fno-ugly-init\n-          -fno-ugly-logint\n-\n-     *Note Distensions::, for more information.\n-\n-`-ff66'\n-     Specify that the program is written in idiomatic FORTRAN 66.  Same\n-     as `-fonetrip -fugly-assumed'.\n-\n-     The `-fno-f66' option is the inverse of `-ff66'.  As such, it is\n-     the same as `-fno-onetrip -fno-ugly-assumed'.\n-\n-     The meaning of this option is likely to be refined as future\n-     versions of `g77' provide more compatibility with other existing\n-     and obsolete Fortran implementations.\n-\n-`-ff77'\n-     Specify that the program is written in idiomatic UNIX FORTRAN 77\n-     and/or the dialect accepted by the `f2c' product.  Same as\n-     `-fbackslash -fno-typeless-boz'.\n-\n-     The meaning of this option is likely to be refined as future\n-     versions of `g77' provide more compatibility with other existing\n-     and obsolete Fortran implementations.\n-\n-`-fno-f77'\n-     The `-fno-f77' option is *not* the inverse of `-ff77'.  It\n-     specifies that the program is not written in idiomatic UNIX\n-     FORTRAN 77 or `f2c', but in a more widely portable dialect.\n-     `-fno-f77' is the same as `-fno-backslash'.\n-\n-     The meaning of this option is likely to be refined as future\n-     versions of `g77' provide more compatibility with other existing\n-     and obsolete Fortran implementations.\n-\n-\u001f\n-File: g77.info,  Node: Fortran Dialect Options,  Next: Warning Options,  Prev: Shorthand Options,  Up: Invoking G77\n-\n-Options Controlling Fortran Dialect\n-===================================\n-\n-   The following options control the dialect of Fortran that the\n-compiler accepts:\n-\n-`-ffree-form'\n-\n-`-fno-fixed-form'\n-     Specify that the source file is written in free form (introduced\n-     in Fortran 90) instead of the more-traditional fixed form.\n-\n-`-ff90'\n-     Allow certain Fortran-90 constructs.\n-\n-     This option controls whether certain Fortran 90 constructs are\n-     recognized.  (Other Fortran 90 constructs might or might not be\n-     recognized depending on other options such as `-fvxt',\n-     `-ff90-intrinsics-enable', and the current level of support for\n-     Fortran 90.)\n-\n-     *Note Fortran 90::, for more information.\n-\n-`-fvxt'\n-     Specify the treatment of certain constructs that have different\n-     meanings depending on whether the code is written in GNU Fortran\n-     (based on FORTRAN 77 and akin to Fortran 90) or VXT Fortran (more\n-     like VAX FORTRAN).\n-\n-     The default is `-fno-vxt'.  `-fvxt' specifies that the VXT Fortran\n-     interpretations for those constructs are to be chosen.\n-\n-     *Note VXT Fortran::, for more information.\n-\n-`-fdollar-ok'\n-     Allow `$' as a valid character in a symbol name.\n-\n-`-fno-backslash'\n-     Specify that `\\' is not to be specially interpreted in character\n-     and Hollerith constants a la C and many UNIX Fortran compilers.\n-\n-     For example, with `-fbackslash' in effect, `A\\nB' specifies three\n-     characters, with the second one being newline.  With\n-     `-fno-backslash', it specifies four characters, `A', `\\', `n', and\n-     `B'.\n-\n-     Note that `g77' implements a fairly general form of backslash\n-     processing that is incompatible with the narrower forms supported\n-     by some other compilers.  For example, `'A\\003B'' is a\n-     three-character string in `g77', whereas other compilers that\n-     support backslash might not support the three-octal-digit form,\n-     and thus treat that string as longer than three characters.\n-\n-     *Note Backslash in Constants::, for information on why\n-     `-fbackslash' is the default instead of `-fno-backslash'.\n-\n-`-fno-ugly-args'\n-     Disallow passing Hollerith and typeless constants as actual\n-     arguments (for example, `CALL FOO(4HABCD)').\n-\n-     *Note Ugly Implicit Argument Conversion::, for more information.\n-\n-`-fugly-assign'\n-     Use the same storage for a given variable regardless of whether it\n-     is used to hold an assigned-statement label (as in `ASSIGN 10 TO\n-     I') or used to hold numeric data (as in `I = 3').\n-\n-     *Note Ugly Assigned Labels::, for more information.\n-\n-`-fugly-assumed'\n-     Assume any dummy array with a final dimension specified as `1' is\n-     really an assumed-size array, as if `*' had been specified for the\n-     final dimension instead of `1'.\n-\n-     For example, `DIMENSION X(1)' is treated as if it had read\n-     `DIMENSION X(*)'.\n-\n-     *Note Ugly Assumed-Size Arrays::, for more information.\n-\n-`-fugly-comma'\n-     Treat a trailing comma in an argument list as specification of a\n-     trailing null argument, and treat an empty argument list as\n-     specification of a single null argument.\n-\n-     For example, `CALL FOO(,)' is treated as `CALL FOO(%VAL(0),\n-     %VAL(0))'.  That is, *two* null arguments are specified by the\n-     procedure call when `-fugly-comma' is in force.  And `F = FUNC()'\n-     is treated as `F = FUNC(%VAL(0))'.\n-\n-     The default behavior, `-fno-ugly-comma', is to ignore a single\n-     trailing comma in an argument list.\n-\n-     *Note Ugly Null Arguments::, for more information.\n-\n-`-fugly-complex'\n-     Do not complain about `REAL(EXPR)' or `AIMAG(EXPR)' when EXPR is a\n-     `COMPLEX' type other than `COMPLEX(KIND=1)'--usually this is used\n-     to permit `COMPLEX(KIND=2)' (`DOUBLE COMPLEX') operands.\n-\n-     The `-ff90' option controls the interpretation of this construct.\n-\n-     *Note Ugly Complex Part Extraction::, for more information.\n-\n-`-fno-ugly-init'\n-     Disallow use of Hollerith and typeless constants as initial values\n-     (in `PARAMETER' and `DATA' statements), and use of character\n-     constants to initialize numeric types and vice versa.\n-\n-     For example, `DATA I/'F'/, CHRVAR/65/, J/4HABCD/' is disallowed by\n-     `-fno-ugly-init'.\n-\n-     *Note Ugly Conversion of Initializers::, for more information.\n-\n-`-fugly-logint'\n-     Treat `INTEGER' and `LOGICAL' variables and expressions as\n-     potential stand-ins for each other.\n-\n-     For example, automatic conversion between `INTEGER' and `LOGICAL'\n-     is enabled, for many contexts, via this option.\n-\n-     *Note Ugly Integer Conversions::, for more information.\n-\n-`-fonetrip'\n-     Imperative executable `DO' loops are to be executed at least once\n-     each time they are reached.\n-\n-     ANSI FORTRAN 77 and more recent versions of the Fortran standard\n-     specify that the body of an imperative `DO' loop is not executed\n-     if the number of iterations calculated from the parameters of the\n-     loop is less than 1.  (For example, `DO 10 I = 1, 0'.)  Such a\n-     loop is called a \"zero-trip loop\".\n-\n-     Prior to ANSI FORTRAN 77, many compilers implemented `DO' loops\n-     such that the body of a loop would be executed at least once, even\n-     if the iteration count was zero.  Fortran code written assuming\n-     this behavior is said to require \"one-trip loops\".  For example,\n-     some code written to the FORTRAN 66 standard expects this behavior\n-     from its `DO' loops, although that standard did not specify this\n-     behavior.\n-\n-     The `-fonetrip' option specifies that the source file(s) being\n-     compiled require one-trip loops.\n-\n-     This option affects only those loops specified by the (imperative)\n-     `DO' statement and by implied-`DO' lists in I/O statements.  Loops\n-     specified by implied-`DO' lists in `DATA' and specification\n-     (non-executable) statements are not affected.\n-\n-`-ftypeless-boz'\n-     Specifies that prefix-radix non-decimal constants, such as\n-     `Z'ABCD'', are typeless instead of `INTEGER(KIND=1)'.\n-\n-     You can test for yourself whether a particular compiler treats the\n-     prefix form as `INTEGER(KIND=1)' or typeless by running the\n-     following program:\n-\n-          EQUIVALENCE (I, R)\n-          R = Z'ABCD1234'\n-          J = Z'ABCD1234'\n-          IF (J .EQ. I) PRINT *, 'Prefix form is TYPELESS'\n-          IF (J .NE. I) PRINT *, 'Prefix form is INTEGER'\n-          END\n-\n-     Reports indicate that many compilers process this form as\n-     `INTEGER(KIND=1)', though a few as typeless, and at least one\n-     based on a command-line option specifying some kind of\n-     compatibility.\n-\n-`-fintrin-case-initcap'\n-\n-`-fintrin-case-upper'\n-\n-`-fintrin-case-lower'\n-\n-`-fintrin-case-any'\n-     Specify expected case for intrinsic names.  `-fintrin-case-lower'\n-     is the default.\n-\n-`-fmatch-case-initcap'\n-\n-`-fmatch-case-upper'\n-\n-`-fmatch-case-lower'\n-\n-`-fmatch-case-any'\n-     Specify expected case for keywords.  `-fmatch-case-lower' is the\n-     default.\n-\n-`-fsource-case-upper'\n-\n-`-fsource-case-lower'\n-\n-`-fsource-case-preserve'\n-     Specify whether source text other than character and Hollerith\n-     constants is to be translated to uppercase, to lowercase, or\n-     preserved as is.  `-fsource-case-lower' is the default.\n-\n-`-fsymbol-case-initcap'\n-\n-`-fsymbol-case-upper'\n-\n-`-fsymbol-case-lower'\n-\n-`-fsymbol-case-any'\n-     Specify valid cases for user-defined symbol names.\n-     `-fsymbol-case-any' is the default.\n-\n-`-fcase-strict-upper'\n-     Same as `-fintrin-case-upper -fmatch-case-upper\n-     -fsource-case-preserve -fsymbol-case-upper'.  (Requires all\n-     pertinent source to be in uppercase.)\n-\n-`-fcase-strict-lower'\n-     Same as `-fintrin-case-lower -fmatch-case-lower\n-     -fsource-case-preserve -fsymbol-case-lower'.  (Requires all\n-     pertinent source to be in lowercase.)\n-\n-`-fcase-initcap'\n-     Same as `-fintrin-case-initcap -fmatch-case-initcap\n-     -fsource-case-preserve -fsymbol-case-initcap'.  (Requires all\n-     pertinent source to be in initial capitals, as in `Print\n-     *,SqRt(Value)'.)\n-\n-`-fcase-upper'\n-     Same as `-fintrin-case-any -fmatch-case-any -fsource-case-upper\n-     -fsymbol-case-any'.  (Maps all pertinent source to uppercase.)\n-\n-`-fcase-lower'\n-     Same as `-fintrin-case-any -fmatch-case-any -fsource-case-lower\n-     -fsymbol-case-any'.  (Maps all pertinent source to lowercase.)\n-\n-`-fcase-preserve'\n-     Same as `-fintrin-case-any -fmatch-case-any -fsource-case-preserve\n-     -fsymbol-case-any'.  (Preserves all case in user-defined symbols,\n-     while allowing any-case matching of intrinsics and keywords.  For\n-     example, `call Foo(i,I)' would pass two *different* variables\n-     named `i' and `I' to a procedure named `Foo'.)\n-\n-`-ff2c-intrinsics-delete'\n-\n-`-ff2c-intrinsics-hide'\n-\n-`-ff2c-intrinsics-disable'\n-\n-`-ff2c-intrinsics-enable'\n-     Specify status of f2c-specific intrinsics.\n-     `-ff2c-intrinsics-enable' is the default.\n-\n-`-ff90-intrinsics-delete'\n-\n-`-ff90-intrinsics-hide'\n-\n-`-ff90-intrinsics-disable'\n-\n-`-ff90-intrinsics-enable'\n-     Specify status of F90-specific intrinsics.\n-     `-ff90-intrinsics-enable' is the default.\n-\n-`-fgnu-intrinsics-delete'\n-\n-`-fgnu-intrinsics-hide'\n-\n-`-fgnu-intrinsics-disable'\n-\n-`-fgnu-intrinsics-enable'\n-     Specify status of Digital's COMPLEX-related intrinsics.\n-     `-fgnu-intrinsics-enable' is the default.\n-\n-`-fmil-intrinsics-delete'\n-\n-`-fmil-intrinsics-hide'\n-\n-`-fmil-intrinsics-disable'\n-\n-`-fmil-intrinsics-enable'\n-     Specify status of MIL-STD-1753-specific intrinsics.\n-     `-fmil-intrinsics-enable' is the default.\n-\n-`-funix-intrinsics-delete'\n-\n-`-funix-intrinsics-hide'\n-\n-`-funix-intrinsics-disable'\n-\n-`-funix-intrinsics-enable'\n-     Specify status of UNIX intrinsics.  `-funix-intrinsics-enable' is\n-     the default.\n-\n-`-fvxt-intrinsics-delete'\n-\n-`-fvxt-intrinsics-hide'\n-\n-`-fvxt-intrinsics-disable'\n-\n-`-fvxt-intrinsics-enable'\n-     Specify status of VXT intrinsics.  `-fvxt-intrinsics-enable' is\n-     the default.\n-\n-`-ffixed-line-length-N'\n-     Set column after which characters are ignored in typical fixed-form\n-     lines in the source file, and through which spaces are assumed (as\n-     if padded to that length) after the ends of short fixed-form lines.\n-\n-     Popular values for N include 72 (the standard and the default), 80\n-     (card image), and 132 (corresponds to \"extended-source\" options in\n-     some popular compilers).  N may be `none', meaning that the entire\n-     line is meaningful and that continued character constants never\n-     have implicit spaces appended to them to fill out the line.\n-     `-ffixed-line-length-0' means the same thing as\n-     `-ffixed-line-length-none'.\n-\n-     *Note Source Form::, for more information.\n-\n-\u001f\n-File: g77.info,  Node: Warning Options,  Next: Debugging Options,  Prev: Fortran Dialect Options,  Up: Invoking G77\n-\n-Options to Request or Suppress Warnings\n-=======================================\n-\n-   Warnings are diagnostic messages that report constructions which are\n-not inherently erroneous but which are risky or suggest there might\n-have been an error.\n-\n-   You can request many specific warnings with options beginning `-W',\n-for example `-Wimplicit' to request warnings on implicit declarations.\n-Each of these specific warning options also has a negative form\n-beginning `-Wno-' to turn off warnings; for example, `-Wno-implicit'.\n-This manual lists only one of the two forms, whichever is not the\n-default.\n-\n-   These options control the amount and kinds of warnings produced by\n-GNU Fortran:\n-\n-`-fsyntax-only'\n-     Check the code for syntax errors, but don't do anything beyond\n-     that.\n-\n-`-pedantic'\n-     Issue warnings for uses of extensions to ANSI FORTRAN 77.\n-     `-pedantic' also applies to C-language constructs where they occur\n-     in GNU Fortran source files, such as use of `\\e' in a character\n-     constant within a directive like `#include'.\n-\n-     Valid ANSI FORTRAN 77 programs should compile properly with or\n-     without this option.  However, without this option, certain GNU\n-     extensions and traditional Fortran features are supported as well.\n-     With this option, many of them are rejected.\n-\n-     Some users try to use `-pedantic' to check programs for strict ANSI\n-     conformance.  They soon find that it does not do quite what they\n-     want--it finds some non-ANSI practices, but not all.  However,\n-     improvements to `g77' in this area are welcome.\n-\n-`-pedantic-errors'\n-     Like `-pedantic', except that errors are produced rather than\n-     warnings.\n-\n-`-fpedantic'\n-     Like `-pedantic', but applies only to Fortran constructs.\n-\n-`-w'\n-     Inhibit all warning messages.\n-\n-`-Wno-globals'\n-     Inhibit warnings about use of a name as both a global name (a\n-     subroutine, function, or block data program unit, or a common\n-     block) and implicitly as the name of an intrinsic in a source file.\n-\n-     Also inhibit warnings about inconsistent invocations and/or\n-     definitions of global procedures (function and subroutines).  Such\n-     inconsistencies include different numbers of arguments and\n-     different types of arguments.\n-\n-`-Wimplicit'\n-     Warn whenever a variable, array, or function is implicitly\n-     declared.  Has an effect similar to using the `IMPLICIT NONE'\n-     statement in every program unit.  (Some Fortran compilers provide\n-     this feature by an option named `-u' or `/WARNINGS=DECLARATIONS'.)\n-\n-`-Wunused'\n-     Warn whenever a variable is unused aside from its declaration.\n-\n-`-Wuninitialized'\n-     Warn whenever an automatic variable is used without first being\n-     initialized.\n-\n-     These warnings are possible only in optimizing compilation,\n-     because they require data-flow information that is computed only\n-     when optimizing.  If you don't specify `-O', you simply won't get\n-     these warnings.\n-\n-     These warnings occur only for variables that are candidates for\n-     register allocation.  Therefore, they do not occur for a variable\n-     whose address is taken, or whose size is other than 1, 2, 4 or 8\n-     bytes.  Also, they do not occur for arrays, even when they are in\n-     registers.\n-\n-     Note that there might be no warning about a variable that is used\n-     only to compute a value that itself is never used, because such\n-     computations may be deleted by data-flow analysis before the\n-     warnings are printed.\n-\n-     These warnings are made optional because GNU Fortran is not smart\n-     enough to see all the reasons why the code might be correct\n-     despite appearing to have an error.  Here is one example of how\n-     this can happen:\n-\n-          SUBROUTINE DISPAT(J)\n-          IF (J.EQ.1) I=1\n-          IF (J.EQ.2) I=4\n-          IF (J.EQ.3) I=5\n-          CALL FOO(I)\n-          END\n-\n-     If the value of `J' is always 1, 2 or 3, then `I' is always\n-     initialized, but GNU Fortran doesn't know this.  Here is another\n-     common case:\n-\n-          SUBROUTINE MAYBE(FLAG)\n-          LOGICAL FLAG\n-          IF (FLAG) VALUE = 9.4\n-          ...\n-          IF (FLAG) PRINT *, VALUE\n-          END\n-\n-     This has no bug because `VALUE' is used only if it is set.\n-\n-`-Wall'\n-     The `-Wunused' and `-Wuninitialized' options combined.  These are\n-     all the options which pertain to usage that we recommend avoiding\n-     and that we believe is easy to avoid.  (As more warnings are added\n-     to `g77', some might be added to the list enabled by `-Wall'.)\n-\n-   The remaining `-W...' options are not implied by `-Wall' because\n-they warn about constructions that we consider reasonable to use, on\n-occasion, in clean programs.\n-\n-`-Wsurprising'\n-     Warn about \"suspicious\" constructs that are interpreted by the\n-     compiler in a way that might well be surprising to someone reading\n-     the code.  These differences can result in subtle,\n-     compiler-dependent (even machine-dependent) behavioral differences.\n-     The constructs warned about include:\n-\n-        * Expressions having two arithmetic operators in a row, such as\n-          `X*-Y'.  Such a construct is nonstandard, and can produce\n-          unexpected results in more complicated situations such as\n-          `X**-Y*Z'.  `g77', along with many other compilers, interprets\n-          this example differently than many programmers, and a few\n-          other compilers.  Specifically, `g77' interprets `X**-Y*Z' as\n-          `(X**(-Y))*Z', while others might think it should be\n-          interpreted as `X**(-(Y*Z))'.\n-\n-          A revealing example is the constant expression `2**-2*1.',\n-          which `g77' evaluates to .25, while others might evaluate it\n-          to 0., the difference resulting from the way precedence\n-          affects type promotion.\n-\n-          (The `-fpedantic' option also warns about expressions having\n-          two arithmetic operators in a row.)\n-\n-        * Expressions with a unary minus followed by an operand and then\n-          a binary operator other than plus or minus.  For example,\n-          `-2**2' produces a warning, because the precedence is\n-          `-(2**2)', yielding -4, not `(-2)**2', which yields 4, and\n-          which might represent what a programmer expects.\n-\n-          An example of an expression producing different results in a\n-          surprising way is `-I*S', where I holds the value\n-          `-2147483648' and S holds `0.5'.  On many systems, negating I\n-          results in the same value, not a positive number, because it\n-          is already the lower bound of what an `INTEGER(KIND=1)'\n-          variable can hold.  So, the expression evaluates to a\n-          positive number, while the \"expected\" interpretation,\n-          `(-I)*S', would evaluate to a negative number.\n-\n-          Even cases such as `-I*J' produce warnings, even though, in\n-          most configurations and situations, there is no computational\n-          difference between the results of the two\n-          interpretations--the purpose of this warning is to warn about\n-          differing interpretations and encourage a better style of\n-          coding, not to identify only those places where bugs might\n-          exist in the user's code.\n-\n-        * `DO' loops with `DO' variables that are not of integral\n-          type--that is, using `REAL' variables as loop control\n-          variables.  Although such loops can be written to work in the\n-          \"obvious\" way, the way `g77' is required by the Fortran\n-          standard to interpret such code is likely to be quite\n-          different from the way many programmers expect.  (This is\n-          true of all `DO' loops, but the differences are pronounced\n-          for non-integral loop control variables.)\n-\n-          *Note Loops::, for more information.\n-\n-`-Werror'\n-     Make all warnings into errors.\n-\n-`-W'\n-     Turns on \"extra warnings\" and, if optimization is specified via\n-     `-O', the `-Wuninitialized' option.  (This might change in future\n-     versions of `g77'.)\n-\n-     \"Extra warnings\" are issued for:\n-\n-        * Unused parameters to a procedure (when `-Wunused' also is\n-          specified).\n-\n-        * Overflows involving floating-point constants (not available\n-          for certain configurations).\n-\n-   *Note Options to Request or Suppress Warnings: (gcc)Warning Options,\n-for information on more options offered by the GBE shared by `g77',\n-`gcc', and other GNU compilers.\n-\n-   Some of these have no effect when compiling programs written in\n-Fortran:\n-\n-`-Wcomment'\n-\n-`-Wformat'\n-\n-`-Wparentheses'\n-\n-`-Wswitch'\n-\n-`-Wtraditional'\n-\n-`-Wshadow'\n-\n-`-Wid-clash-LEN'\n-\n-`-Wlarger-than-LEN'\n-\n-`-Wconversion'\n-\n-`-Waggregate-return'\n-\n-`-Wredundant-decls'\n-     These options all could have some relevant meaning for GNU Fortran\n-     programs, but are not yet supported.\n-\n-\u001f\n-File: g77.info,  Node: Debugging Options,  Next: Optimize Options,  Prev: Warning Options,  Up: Invoking G77\n-\n-Options for Debugging Your Program or GNU Fortran\n-=================================================\n-\n-   GNU Fortran has various special options that are used for debugging\n-either your program or `g77'.\n-\n-`-g'\n-     Produce debugging information in the operating system's native\n-     format (stabs, COFF, XCOFF, or DWARF).  GDB can work with this\n-     debugging information.\n-\n-     Support for this option in Fortran programs is incomplete.  In\n-     particular, names of variables and arrays in common blocks or that\n-     are storage-associated via `EQUIVALENCE' are unavailable to the\n-     debugger.\n-\n-     However, version 0.5.19 of `g77' does provide this information in\n-     a rudimentary way, as controlled by the `-fdebug-kludge' option.\n-\n-     *Note Options for Code Generation Conventions: Code Gen Options,\n-     for more information.\n-\n-   *Note Options for Debugging Your Program or GNU CC: (gcc)Debugging\n-Options, for more information on debugging options.\n-\n-\u001f\n-File: g77.info,  Node: Optimize Options,  Next: Preprocessor Options,  Prev: Debugging Options,  Up: Invoking G77\n-\n-Options That Control Optimization\n-=================================\n-\n-   Most Fortran users will want to use no optimization when developing\n-and testing programs, and use `-O' or `-O2' when compiling programs for\n-late-cycle testing and for production use.\n-\n-   The following flags have particular applicability when compiling\n-Fortran programs:\n-\n-`-malign-double'\n-     (Intel 386 architecture only.)\n-\n-     Noticeably improves performance of `g77' programs making heavy use\n-     of `REAL(KIND=2)' (`DOUBLE PRECISION') data on some systems.  In\n-     particular, systems using Pentium, Pentium Pro, 586, and 686\n-     implementations of the i386 architecture execute programs faster\n-     when `REAL(KIND=2)' (`DOUBLE PRECISION') data are aligned on\n-     64-bit boundaries in memory.\n-\n-     This option can, at least, make benchmark results more consistent\n-     across various system configurations, versions of the program, and\n-     data sets.\n-\n-     *Note:* The warning in the `gcc' documentation about this option\n-     does not apply, generally speaking, to Fortran code compiled by\n-     `g77'.\n-\n-     *Also note:* `g77' fixes a `gcc' backend bug to allow\n-     `-malign-double' to work generally, not just with\n-     statically-allocated data.\n-\n-     *Also also note:* The negative form of `-malign-double' is\n-     `-mno-align-double', not `-benign-double'.\n-\n-`-ffloat-store'\n-     Might help a Fortran program that depends on exact IEEE conformance\n-     on some machines, but might slow down a program that doesn't.\n-\n-`-fforce-mem'\n-\n-`-fforce-addr'\n-     Might improve optimization of loops.\n-\n-`-fno-inline'\n-     Don't compile statement functions inline.  Might reduce the size\n-     of a program unit--which might be at expense of some speed (though\n-     it should compile faster).  Note that if you are not optimizing,\n-     no functions can be expanded inline.\n-\n-`-ffast-math'\n-     Might allow some programs designed to not be too dependent on IEEE\n-     behavior for floating-point to run faster, or die trying.\n-\n-`-fstrength-reduce'\n-     Might make some loops run faster.\n-\n-`-frerun-cse-after-loop'\n-\n-`-fexpensive-optimizations'\n-\n-`-fdelayed-branch'\n-\n-`-fschedule-insns'\n-\n-`-fschedule-insns2'\n-\n-`-fcaller-saves'\n-     Might improve performance on some code.\n-\n-`-funroll-loops'\n-     Definitely improves performance on some code.\n-\n-`-funroll-all-loops'\n-     Definitely improves performance on some code.\n-\n-`-fno-move-all-movables'\n-\n-`-fno-reduce-all-givs'\n-\n-`-fno-rerun-loop-opt'\n-     Each of these might improve performance on some code.\n-\n-     Analysis of Fortran code optimization and the resulting\n-     optimizations triggered by the above options were contributed by\n-     Toon Moene (<toon@moene.indiv.nluug.nl>).\n-\n-     These three options are intended to be removed someday, once they\n-     have helped determine the efficacy of various approaches to\n-     improving the performance of Fortran code.\n-\n-     Please let us know how use of these options affects the\n-     performance of your production code.  We're particularly\n-     interested in code that runs faster when these options are\n-     *disabled*, and in non-Fortran code that benefits when they are\n-     *enabled* via the above `gcc' command-line options.\n-\n-   *Note Options That Control Optimization: (gcc)Optimize Options, for\n-more information on options to optimize the generated machine code.\n-\n-\u001f\n-File: g77.info,  Node: Preprocessor Options,  Next: Directory Options,  Prev: Optimize Options,  Up: Invoking G77\n-\n-Options Controlling the Preprocessor\n-====================================\n-\n-   These options control the C preprocessor, which is run on each C\n-source file before actual compilation.\n-\n-   *Note Options Controlling the Preprocessor: (gcc)Preprocessor\n-Options, for information on C preprocessor options.\n-\n-   Some of these options also affect how `g77' processes the `INCLUDE'\n-directive.  Since this directive is processed even when preprocessing\n-is not requested, it is not described in this section.  *Note Options\n-for Directory Search: Directory Options, for information on how `g77'\n-processes the `INCLUDE' directive.\n-\n-   However, the `INCLUDE' directive does not apply preprocessing to the\n-contents of the included file itself.\n-\n-   Therefore, any file that contains preprocessor directives (such as\n-`#include', `#define', and `#if') must be included via the `#include'\n-directive, not via the `INCLUDE' directive.  Therefore, any file\n-containing preprocessor directives, if included, is necessarily\n-included by a file that itself contains preprocessor directives.\n-\n-\u001f\n-File: g77.info,  Node: Directory Options,  Next: Code Gen Options,  Prev: Preprocessor Options,  Up: Invoking G77\n-\n-Options for Directory Search\n-============================\n-\n-   These options affect how the `cpp' preprocessor searches for files\n-specified via the `#include' directive.  Therefore, when compiling\n-Fortran programs, they are meaningful when the preproecssor is used.\n-\n-   Some of these options also affect how `g77' searches for files\n-specified via the `INCLUDE' directive, although files included by that\n-directive are not, themselves, preprocessed.  These options are:\n-\n-`-I-'\n-\n-`-IDIR'\n-     These affect interpretation of the `INCLUDE' directive (as well as\n-     of the `#include' directive of the `cpp' preprocessor).\n-\n-     Note that `-IDIR' must be specified *without* any spaces between\n-     `-I' and the directory name--that is, `-Ifoo/bar' is valid, but\n-     `-I foo/bar' is rejected by the `g77' compiler (though the\n-     preprocessor supports the latter form).  Also note that the\n-     general behavior of `-I' and `INCLUDE' is pretty much the same as\n-     of `-I' with `#include' in the `cpp' preprocessor, with regard to\n-     looking for `header.gcc' files and other such things.\n-\n-     *Note Options for Directory Search: (gcc)Directory Options, for\n-     information on the `-I' option.\n-"}, {"sha": "f824bd51f9b47b6fd43a7db8fa4c0a69f20b080d", "filename": "gcc/f/g77.info-20", "status": "removed", "additions": 0, "deletions": 2122, "changes": 2122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-20", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-20", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-20?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2"}, {"sha": "c8b772e11c81ba6a8f395d0a2afa406895976d81", "filename": "gcc/f/g77.info-3", "status": "removed", "additions": 0, "deletions": 397, "changes": 397, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-3?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2", "patch": "@@ -1,397 +0,0 @@\n-This is Info file g77.info, produced by Makeinfo version 1.68 from the\n-input file g77.texi.\n-\n-   This file explains how to use the GNU Fortran system.\n-\n-   Published by the Free Software Foundation 59 Temple Place - Suite 330\n-Boston, MA 02111-1307 USA\n-\n-   Copyright (C) 1995-1997 Free Software Foundation, Inc.\n-\n-   Permission is granted to make and distribute verbatim copies of this\n-manual provided the copyright notice and this permission notice are\n-preserved on all copies.\n-\n-   Permission is granted to copy and distribute modified versions of\n-this manual under the conditions for verbatim copying, provided also\n-that the sections entitled \"GNU General Public License,\" \"Funding for\n-Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n-included exactly as in the original, and provided that the entire\n-resulting derived work is distributed under the terms of a permission\n-notice identical to this one.\n-\n-   Permission is granted to copy and distribute translations of this\n-manual into another language, under the above conditions for modified\n-versions, except that the sections entitled \"GNU General Public\n-License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n-`Look And Feel'\", and this permission notice, may be included in\n-translations approved by the Free Software Foundation instead of in the\n-original English.\n-\n-   Contributed by James Craig Burley (<burley@gnu.ai.mit.edu>).\n-Inspired by a first pass at translating `g77-0.5.16/f/DOC' that was\n-contributed to Craig by David Ronis (<ronis@onsager.chem.mcgill.ca>).\n-\n-INFO-DIR-SECTION Fortran Programming\n-START-INFO-DIR-ENTRY\n-* g77: (g77).               The GNU Fortran compilation system.\n-END-INFO-DIR-ENTRY\n-\n-\u001f\n-File: g77.info,  Node: Code Gen Options,  Next: Environment Variables,  Prev: Directory Options,  Up: Invoking G77\n-\n-Options for Code Generation Conventions\n-=======================================\n-\n-   These machine-independent options control the interface conventions\n-used in code generation.\n-\n-   Most of them have both positive and negative forms; the negative form\n-of `-ffoo' would be `-fno-foo'.  In the table below, only one of the\n-forms is listed--the one which is not the default.  You can figure out\n-the other form by either removing `no-' or adding it.\n-\n-`-fno-automatic'\n-     Treat each program unit as if the `SAVE' statement was specified\n-     for every local variable and array referenced in it.  Does not\n-     affect common blocks.  (Some Fortran compilers provide this option\n-     under the name `-static'.)\n-\n-`-finit-local-zero'\n-     Specify that variables and arrays that are local to a program unit\n-     (not in a common block and not passed as an argument) are to be\n-     initialized to binary zeros.\n-\n-     Since there is a run-time penalty for initialization of variables\n-     that are not given the `SAVE' attribute, it might be a good idea\n-     to also use `-fno-automatic' with `-finit-local-zero'.\n-\n-`-fno-f2c'\n-     Do not generate code designed to be compatible with code generated\n-     by `f2c'; use the GNU calling conventions instead.\n-\n-     The `f2c' calling conventions require functions that return type\n-     `REAL(KIND=1)' to actually return the C type `double', and\n-     functions that return type `COMPLEX' to return the values via an\n-     extra argument in the calling sequence that points to where to\n-     store the return value.  Under the GNU calling conventions, such\n-     functions simply return their results as they would in GNU\n-     C--`REAL(KIND=1)' functions return the C type `float', and\n-     `COMPLEX' functions return the GNU C type `complex' (or its\n-     `struct' equivalent).\n-\n-     This does not affect the generation of code that interfaces with\n-     the `libf2c' library.\n-\n-     However, because the `libf2c' library uses `f2c' calling\n-     conventions, `g77' rejects attempts to pass intrinsics implemented\n-     by routines in this library as actual arguments when `-fno-f2c' is\n-     used, to avoid bugs when they are actually called by code\n-     expecting the GNU calling conventions to work.\n-\n-     For example, `INTRINSIC ABS;CALL FOO(ABS)' is rejected when\n-     `-fno-f2c' is in force.  (Future versions of the `g77' run-time\n-     library might offer routines that provide GNU-callable versions of\n-     the routines that implement the `f2c'-callable intrinsics that may\n-     be passed as actual arguments, so that valid programs need not be\n-     rejected when `-fno-f2c' is used.)\n-\n-     *Caution:* If `-fno-f2c' is used when compiling any source file\n-     used in a program, it must be used when compiling *all* Fortran\n-     source files used in that program.\n-\n-`-ff2c-library'\n-     Specify that use of `libf2c' is required.  This is the default for\n-     the current version of `g77'.\n-\n-     Currently it is not valid to specify `-fno-f2c-library'.  This\n-     option is provided so users can specify it in shell scripts that\n-     build programs and libraries that require the `libf2c' library,\n-     even when being compiled by future versions of `g77' that might\n-     otherwise default to generating code for an incompatible library.\n-\n-`-fno-underscoring'\n-     Do not transform names of entities specified in the Fortran source\n-     file by appending underscores to them.\n-\n-     With `-funderscoring' in effect, `g77' appends two underscores to\n-     names with underscores and one underscore to external names with\n-     no underscores.  (`g77' also appends two underscores to internal\n-     names with underscores to avoid naming collisions with external\n-     names.  The `-fno-second-underscore' option disables appending of\n-     the second underscore in all cases.)\n-\n-     This is done to ensure compatibility with code produced by many\n-     UNIX Fortran compilers, including `f2c', which perform the same\n-     transformations.\n-\n-     Use of `-fno-underscoring' is not recommended unless you are\n-     experimenting with issues such as integration of (GNU) Fortran into\n-     existing system environments (vis-a-vis existing libraries, tools,\n-     and so on).\n-\n-     For example, with `-funderscoring', and assuming other defaults\n-     like `-fcase-lower' and that `j()' and `max_count()' are external\n-     functions while `my_var' and `lvar' are local variables, a\n-     statement like\n-\n-          I = J() + MAX_COUNT (MY_VAR, LVAR)\n-\n-     is implemented as something akin to:\n-\n-          i = j_() + max_count__(&my_var__, &lvar);\n-\n-     With `-fno-underscoring', the same statement is implemented as:\n-\n-          i = j() + max_count(&my_var, &lvar);\n-\n-     Use of `-fno-underscoring' allows direct specification of\n-     user-defined names while debugging and when interfacing\n-     `g77'-compiled code with other languages.\n-\n-     Note that just because the names match does *not* mean that the\n-     interface implemented by `g77' for an external name matches the\n-     interface implemented by some other language for that same name.\n-     That is, getting code produced by `g77' to link to code produced\n-     by some other compiler using this or any other method can be only a\n-     small part of the overall solution--getting the code generated by\n-     both compilers to agree on issues other than naming can require\n-     significant effort, and, unlike naming disagreements, linkers\n-     normally cannot detect disagreements in these other areas.\n-\n-     Also, note that with `-fno-underscoring', the lack of appended\n-     underscores introduces the very real possibility that a\n-     user-defined external name will conflict with a name in a system\n-     library, which could make finding unresolved-reference bugs quite\n-     difficult in some cases--they might occur at program run time, and\n-     show up only as buggy behavior at run time.\n-\n-     In future versions of `g77', we hope to improve naming and linking\n-     issues so that debugging always involves using the names as they\n-     appear in the source, even if the names as seen by the linker are\n-     mangled to prevent accidental linking between procedures with\n-     incompatible interfaces.\n-\n-`-fno-second-underscore'\n-     Do not append a second underscore to names of entities specified\n-     in the Fortran source file.\n-\n-     This option has no effect if `-fno-underscoring' is in effect.\n-\n-     Otherwise, with this option, an external name such as `MAX_COUNT'\n-     is implemented as a reference to the link-time external symbol\n-     `max_count_', instead of `max_count__'.\n-\n-`-fno-ident'\n-     Ignore the `#ident' directive.\n-\n-`-fzeros'\n-     Treat initial values of zero as if they were any other value.\n-\n-     As of version 0.5.18, `g77' normally treats `DATA' and other\n-     statements that are used to specify initial values of zero for\n-     variables and arrays as if no values were actually specified, in\n-     the sense that no diagnostics regarding multiple initializations\n-     are produced.\n-\n-     This is done to speed up compiling of programs that initialize\n-     large arrays to zeros.\n-\n-     Use `-fzeros' to revert to the simpler, slower behavior that can\n-     catch multiple initializations by keeping track of all\n-     initializations, zero or otherwise.\n-\n-     *Caution:* Future versions of `g77' might disregard this option\n-     (and its negative form, the default) or interpret it somewhat\n-     differently.  The interpretation changes will affect only\n-     non-standard programs; standard-conforming programs should not be\n-     affected.\n-\n-`-fdebug-kludge'\n-     Emit information on `COMMON' and `EQUIVALENCE' members that might\n-     help users of debuggers work around lack of proper debugging\n-     information on such members.\n-\n-     As of version 0.5.19, `g77' offers this option to emit information\n-     on members of aggregate areas to help users while debugging.  This\n-     information consists of establishing the type and contents of each\n-     such member so that, when a debugger is asked to print the\n-     contents, the printed information provides rudimentary debugging\n-     information.  This information identifies the name of the\n-     aggregate area (either the `COMMON' block name, or the\n-     `g77'-assigned name for the `EQUIVALENCE' name) and the offset, in\n-     bytes, of the member from the beginning of the area.\n-\n-     Using `gdb', this information is not coherently displayed in the\n-     Fortran language mode, so temporarily switching to the C language\n-     mode to display the information is suggested.  Use `set language\n-     c' and `set language fortran' to accomplish this.\n-\n-     For example:\n-\n-                COMMON /X/A,B\n-                EQUIVALENCE (C,D)\n-                CHARACTER XX*50\n-                EQUIVALENCE (I,XX(20:20))\n-                END\n-          \n-          GDB is free software and you are welcome to distribute copies of it\n-           under certain conditions; type \"show copying\" to see the conditions.\n-          There is absolutely no warranty for GDB; type \"show warranty\" for details.\n-          GDB 4.16 (lm-gnits-dwim), Copyright 1996 Free Software Foundation, Inc...\n-          (gdb) b MAIN__\n-          Breakpoint 1 at 0t1200000201120112: file cd.f, line 5.\n-          (gdb) r\n-          Starting program: /home/user/a.out\n-          \n-          Breakpoint 1, MAIN__ () at cd.f:5\n-          Current language:  auto; currently fortran\n-          (gdb) set language c\n-          Warning: the current language does not match this frame.\n-          (gdb) p a\n-          $2 = \"At (COMMON) `x_' plus 0 bytes\"\n-          (gdb) p b\n-          $3 = \"At (COMMON) `x_' plus 4 bytes\"\n-          (gdb) p c\n-          $4 = \"At (EQUIVALENCE) `__g77_equiv_c' plus 0 bytes\"\n-          (gdb) p d\n-          $5 = \"At (EQUIVALENCE) `__g77_equiv_c' plus 0 bytes\"\n-          (gdb) p i\n-          $6 = \"At (EQUIVALENCE) `__g77_equiv_xx' plus 20 bytes\"\n-          (gdb) p xx\n-          $7 = \"At (EQUIVALENCE) `__g77_equiv_xx' plus 1 bytes\"\n-          (gdb) set language fortran\n-          (gdb)\n-\n-     Use `-fdebug-kludge' to generate this information, which might\n-     make some programs noticeably larger.\n-\n-     *Caution:* Future versions of `g77' might disregard this option\n-     (and its negative form).  Current plans call for this to happen\n-     when published versions of `g77' and `gdb' exist that provide\n-     proper access to debugging information on `COMMON' and\n-     `EQUIVALENCE' members.\n-\n-`-fno-emulate-complex'\n-     Implement `COMPLEX' arithmetic using the facilities in the `gcc'\n-     back end that provide direct support of `complex' arithmetic,\n-     instead of emulating the arithmetic.\n-\n-     `gcc' has some known problems in its back-end support for\n-     `complex' arithmetic, due primarily to the support not being\n-     completed as of version 2.7.2.2.  Other front ends for the `gcc'\n-     back end avoid this problem by emulating `complex' arithmetic at a\n-     higher level, so the back end sees arithmetic on the real and\n-     imaginary components.  To make `g77' more portable to systems\n-     where `complex' support in the `gcc' back end is particularly\n-     troublesome, `g77' now defaults to performing the same kinds of\n-     emulations done by these other front ends.\n-\n-     Use `-fno-emulate-complex' to try the `complex' support in the\n-     `gcc' back end, in case it works and produces faster programs.  So\n-     far, all the known bugs seem to involve compile-time crashes,\n-     rather than the generation of incorrect code.\n-\n-     Use of this option should not affect how Fortran code compiled by\n-     `g77' works in terms of its interfaces to other code, e.g. that\n-     compiled by `f2c'.\n-\n-     *Caution:* Future versions of `g77' are likely to change the\n-     default for this option to `-fno-emulate-complex', and perhaps\n-     someday ignore both forms of this option.\n-\n-     Also, it is possible that use of the `-fno-emulate-complex' option\n-     could result in incorrect code being silently produced by `g77'.\n-     But, this is generally true of compilers anyway, so, as usual, test\n-     the programs you compile before assuming they are working.\n-\n-`-falias-check'\n-\n-`-fargument-alias'\n-\n-`-fargument-noalias'\n-\n-`-fno-argument-noalias-global'\n-     These options specify to what degree aliasing (overlap) is\n-     permitted between arguments (passed as pointers) and `COMMON'\n-     (external, or public) storage.\n-\n-     The default for Fortran code, as mandated by the FORTRAN 77 and\n-     Fortran 90 standards, is `-fargument-noalias-global'.  The default\n-     for code written in the C language family is `-fargument-alias'.\n-\n-     Note that, on some systems, compiling with `-fforce-addr' in\n-     effect can produce more optimal code when the default aliasing\n-     options are in effect (and when optimization is enabled).\n-\n-     *Note Aliasing Assumed To Work::, for detailed information on the\n-     implications of compiling Fortran code that depends on the ability\n-     to alias dummy arguments.\n-\n-`-fno-globals'\n-     Disable diagnostics about inter-procedural analysis problems, such\n-     as disagreements about the type of a function or a procedure's\n-     argument, that might cause a compiler crash when attempting to\n-     inline a reference to a procedure within a program unit.  (The\n-     diagnostics themselves are still produced, but as warnings, unless\n-     `-Wno-globals' is specified, in which case no relevant diagnostics\n-     are produced.)\n-\n-     Further, this option disables such inlining, to avoid compiler\n-     crashes resulting from incorrect code that would otherwise be\n-     diagnosed.\n-\n-     As such, this option might be quite useful when compiling\n-     existing, \"working\" code that happens to have a few bugs that do\n-     not generally show themselves, but `g77' exposes via a diagnostic.\n-\n-     Use of this option therefore has the effect of instructing `g77'\n-     to behave more like it did up through version 0.5.19.1, when it\n-     paid little or no attention to disagreements between program units\n-     about a procedure's type and argument information, and when it\n-     performed no inlining of procedures (except statement functions).\n-\n-     Without this option, `g77' defaults to performing the potentially\n-     inlining procedures as it started doing in version 0.5.20, but as\n-     of version 0.5.21, it also diagnoses disagreements that might\n-     cause such inlining to crash the compiler.\n-\n-   *Note Options for Code Generation Conventions: (gcc)Code Gen\n-Options, for information on more options offered by the GBE shared by\n-`g77', `gcc', and other GNU compilers.\n-\n-   Some of these do *not* work when compiling programs written in\n-Fortran:\n-\n-`-fpcc-struct-return'\n-\n-`-freg-struct-return'\n-     You should not use these except strictly the same way as you used\n-     them to build the version of `libf2c' with which you will be\n-     linking all code compiled by `g77' with the same option.\n-\n-`-fshort-double'\n-     This probably either has no effect on Fortran programs, or makes\n-     them act loopy.\n-\n-`-fno-common'\n-     Do not use this when compiling Fortran programs, or there will be\n-     Trouble.\n-\n-`-fpack-struct'\n-     This probably will break any calls to the `libf2c' library, at the\n-     very least, even if it is built with the same option.\n-\n-\u001f\n-File: g77.info,  Node: Environment Variables,  Prev: Code Gen Options,  Up: Invoking G77\n-\n-Environment Variables Affecting GNU Fortran\n-===========================================\n-\n-   GNU Fortran currently does not make use of any environment variables\n-to control its operation above and beyond those that affect the\n-operation of `gcc'.\n-\n-   *Note Environment Variables Affecting GNU CC: (gcc)Environment\n-Variables, for information on environment variables.\n-"}, {"sha": "ca26588ccdfa305829860b82c98dc18a27788caf", "filename": "gcc/f/g77.info-4", "status": "removed", "additions": 0, "deletions": 1117, "changes": 1117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-4?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2", "patch": "@@ -1,1117 +0,0 @@\n-This is Info file g77.info, produced by Makeinfo version 1.68 from the\n-input file g77.texi.\n-\n-   This file explains how to use the GNU Fortran system.\n-\n-   Published by the Free Software Foundation 59 Temple Place - Suite 330\n-Boston, MA 02111-1307 USA\n-\n-   Copyright (C) 1995-1997 Free Software Foundation, Inc.\n-\n-   Permission is granted to make and distribute verbatim copies of this\n-manual provided the copyright notice and this permission notice are\n-preserved on all copies.\n-\n-   Permission is granted to copy and distribute modified versions of\n-this manual under the conditions for verbatim copying, provided also\n-that the sections entitled \"GNU General Public License,\" \"Funding for\n-Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n-included exactly as in the original, and provided that the entire\n-resulting derived work is distributed under the terms of a permission\n-notice identical to this one.\n-\n-   Permission is granted to copy and distribute translations of this\n-manual into another language, under the above conditions for modified\n-versions, except that the sections entitled \"GNU General Public\n-License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n-`Look And Feel'\", and this permission notice, may be included in\n-translations approved by the Free Software Foundation instead of in the\n-original English.\n-\n-   Contributed by James Craig Burley (<burley@gnu.ai.mit.edu>).\n-Inspired by a first pass at translating `g77-0.5.16/f/DOC' that was\n-contributed to Craig by David Ronis (<ronis@onsager.chem.mcgill.ca>).\n-\n-INFO-DIR-SECTION Fortran Programming\n-START-INFO-DIR-ENTRY\n-* g77: (g77).               The GNU Fortran compilation system.\n-END-INFO-DIR-ENTRY\n-\n-\u001f\n-File: g77.info,  Node: News,  Next: Changes,  Prev: Invoking G77,  Up: Top\n-\n-News About GNU Fortran\n-**********************\n-\n-   Changes made to recent versions of GNU Fortran are listed below,\n-with the most recent version first.\n-\n-   The changes are generally listed with code-generation bugs first,\n-followed by compiler crashes involving valid code, new features, fixes\n-to existing features, new diagnostics, internal improvements, and\n-miscellany.  This order is not strict--for example, some items involve\n-a combination of these elements.\n-\n-In 0.5.21:\n-==========\n-\n-   * Fix a code-generation bug introduced by 0.5.20 caused by loop\n-     unrolling (by specifying `-funroll-loops' or similar).  This bug\n-     afflicted all code compiled by version 2.7.2.2.f.2 of `gcc' (C,\n-     C++, Fortran, and so on).\n-\n-   * Fix a code-generation bug manifested when combining local\n-     `EQUIVALENCE' with a `DATA' statement that follows the first\n-     executable statement (or is treated as an executable-context\n-     statement as a result of using the `-fpedantic' option).\n-\n-   * Fix a compiler crash that occured when an integer division by a\n-     constant zero is detected.  Instead, when the `-W' option is\n-     specified, the `gcc' back end issues a warning about such a case.\n-     This bug afflicted all code compiled by version 2.7.2.2.f.2 of\n-     `gcc' (C, C++, Fortran, and so on).\n-\n-   * Fix a compiler crash that occurred in some cases of procedure\n-     inlining.  (Such cases became more frequent in 0.5.20.)\n-\n-   * Fix a compiler crash resulting from using `DATA' or similar to\n-     initialize a `COMPLEX' variable or array to zero.\n-\n-   * Fix compiler crashes involving use of `AND', `OR', or `XOR'\n-     intrinsics.\n-\n-   * Fix compiler bug triggered when using a `COMMON' or `EQUIVALENCE'\n-     variable as the target of an `ASSIGN' or assigned-`GOTO' statement.\n-\n-   * Fix compiler crashes due to using the name of a some non-standard\n-     intrinsics (such as `FTELL' or `FPUTC') as such and as the name of\n-     a procedure or common block.  Such dual use of a name in a program\n-     is allowed by the standard.\n-\n-   * Place automatic arrays on the stack, even if `SAVE' or the\n-     `-fno-automatic' option is in effect.  This avoids a compiler\n-     crash in some cases.\n-\n-   * The `-malign-double' option now reliably aligns `DOUBLE PRECISION'\n-     optimally on Pentium and Pentium Pro architectures (586 and 686 in\n-     `gcc').\n-\n-   * New option `-Wno-globals' disables warnings about \"suspicious\" use\n-     of a name both as a global name and as the implicit name of an\n-     intrinsic, and warnings about disagreements over the number or\n-     natures of arguments passed to global procedures, or the natures\n-     of the procedures themselves.\n-\n-     The default is to issue such warnings, which are new as of this\n-     version of `g77'.\n-\n-   * New option `-fno-globals' disables diagnostics about potentially\n-     fatal disagreements analysis problems, such as disagreements over\n-     the number or natures of arguments passed to global procedures, or\n-     the natures of those procedures themselves.\n-\n-     The default is to issue such diagnostics and flag the compilation\n-     as unsuccessful.  With this option, the diagnostics are issued as\n-     warnings, or, if `-Wno-globals' is specified, are not issued at\n-     all.\n-\n-     This option also disables inlining of global procedures, to avoid\n-     compiler crashes resulting from coding errors that these\n-     diagnostics normally would identify.\n-\n-   * Diagnose cases where a reference to a procedure disagrees with the\n-     type of that procedure, or where disagreements about the number or\n-     nature of arguments exist.  This avoids a compiler crash.\n-\n-   * Fix parsing bug whereby `g77' rejected a second initialization\n-     specification immediately following the first's closing `/' without\n-     an intervening comma in a `DATA' statement, and the second\n-     specification was an implied-DO list.\n-\n-   * Improve performance of the `gcc' back end so certain complicated\n-     expressions involving `COMPLEX' arithmetic (especially\n-     multiplication) don't appear to take forever to compile.\n-\n-   * Fix a couple of profiling-related bugs in `gcc' back end.\n-\n-   * Integrate GNU Ada's (GNAT's) changes to the back end, which\n-     consist almost entirely of bug fixes.  These fixes are circa\n-     version 3.10p of GNAT.\n-\n-   * Include some other `gcc' fixes that seem useful in `g77''s version\n-     of `gcc'.  (See `gcc/ChangeLog' for details--compare it to that\n-     file in the vanilla `gcc-2.7.2.3.tar.gz' distribution.)\n-\n-   * Fix `libU77' routines that accept file and other names to strip\n-     trailing blanks from them, for consistency with other\n-     implementations.  Blanks may be forcibly appended to such names by\n-     appending a single null character (`CHAR(0)') to the significant\n-     trailing blanks.\n-\n-   * Fix `CHMOD' intrinsic to work with file names that have embedded\n-     blanks, commas, and so on.\n-\n-   * Fix `SIGNAL' intrinsic so it accepts an optional third `Status'\n-     argument.\n-\n-   * Fix `IDATE()' intrinsic subroutine (VXT form) so it accepts\n-     arguments in the correct order.  Documentation fixed accordingly,\n-     and for `GMTIME()' and `LTIME()' as well.\n-\n-   * Make many changes to `libU77' intrinsics to support existing code\n-     more directly.\n-\n-     Such changes include allowing both subroutine and function forms\n-     of many routines, changing `MCLOCK()' and `TIME()' to return\n-     `INTEGER(KIND=1)' values, introducing `MCLOCK8()' and `TIME8()' to\n-     return `INTEGER(KIND=2)' values, and placing functions that are\n-     intended to perform side effects in a new intrinsic group,\n-     `badu77'.\n-\n-   * Improve `libU77' so it is more portable.\n-\n-   * Add options `-fbadu77-intrinsics-delete',\n-     `-fbadu77-intrinsics-hide', and so on.\n-\n-   * Fix crashes involving diagnosed or invalid code.\n-\n-   * `g77' and `gcc' now do a somewhat better job detecting and\n-     diagnosing arrays that are too large to handle before these cause\n-     diagnostics during the assembler or linker phase, a compiler\n-     crash, or generation of incorrect code.\n-\n-   * Make some fixes to alias analysis code.\n-\n-   * Add support for `restrict' keyword in `gcc' front end.\n-\n-   * Support `gcc' version 2.7.2.3 (modified by `g77' into version\n-     2.7.2.3.f.1), and remove support for prior versions of `gcc'.\n-\n-   * Incorporate GNAT's patches to the `gcc' back end into `g77''s, so\n-     GNAT users do not need to apply GNAT's patches to build both GNAT\n-     and `g77' from the same source tree.\n-\n-   * Modify `make' rules and related code so that generation of Info\n-     documentation doesn't require compilation using `gcc'.  Now, any\n-     ANSI C compiler should be adequate to produce the `g77'\n-     documentation (in particular, the tables of intrinsics) from\n-     scratch.\n-\n-   * Add `INT2' and `INT8' intrinsics.\n-\n-   * Add `CPU_TIME' intrinsic.\n-\n-   * Add `ALARM' intrinsic.\n-\n-   * `CTIME' intrinsic now accepts any `INTEGER' argument, not just\n-     `INTEGER(KIND=2)'.\n-\n-   * Warn when explicit type declaration disagrees with the type of an\n-     intrinsic invocation.\n-\n-   * Support `*f771' entry in `gcc' `specs' file.\n-\n-   * Fix typo in `make' rule `g77-cross', used only for cross-compiling.\n-\n-   * Fix `libf2c' build procedure to re-archive library if previous\n-     attempt to archive was interrupted.\n-\n-   * Change `gcc' to unroll loops only during the last invocation (of\n-     as many as two invocations) of loop optimization.\n-\n-   * Improve handling of `-fno-f2c' so that code that attempts to pass\n-     an intrinsic as an actual argument, such as `CALL FOO(ABS)', is\n-     rejected due to the fact that the run-time-library routine is,\n-     effectively, compiled with `-ff2c' in effect.\n-\n-   * Fix `g77' driver to recognize `-fsyntax-only' as an option that\n-     inhibits linking, just like `-c' or `-S', and to recognize and\n-     properly handle the `-nostdlib', `-M', `-MM', `-nodefaultlibs',\n-     and `-Xlinker' options.\n-\n-   * Upgrade to `libf2c' as of 1997-08-16.\n-\n-   * Modify `libf2c' to consistently and clearly diagnose recursive I/O\n-     (at run time).\n-\n-   * `g77' driver now prints version information (such as produced by\n-     `g77 -v') to `stderr' instead of `stdout'.\n-\n-   * The `.r' suffix now designates a Ratfor source file, to be\n-     preprocessed via the `ratfor' command, available separately.\n-\n-   * Fix some aspects of how `gcc' determines what kind of system is\n-     being configured and what kinds are supported.  For example, GNU\n-     Linux/Alpha ELF systems now are directly supported.\n-\n-   * Improve diagnostics.\n-\n-   * Improve documentation and indexing.\n-\n-   * Include all pertinent files for `libf2c' that come from\n-     `netlib.bell-labs.com'; give any such files that aren't quite\n-     accurate in `g77''s version of `libf2c' the suffix `.netlib'.\n-\n-   * Reserve `INTEGER(KIND=0)' for future use.\n-\n-In 0.5.20:\n-==========\n-\n-   * The `-fno-typeless-boz' option is now the default.\n-\n-     This option specifies that non-decimal-radix constants using the\n-     prefixed-radix form (such as `Z'1234'') are to be interpreted as\n-     `INTEGER' constants.  Specify `-ftypeless-boz' to cause such\n-     constants to be interpreted as typeless.\n-\n-     (Version 0.5.19 introduced `-fno-typeless-boz' and its inverse.)\n-\n-   * Options `-ff90-intrinsics-enable' and `-fvxt-intrinsics-enable'\n-     now are the defaults.\n-\n-     Some programs might use names that clash with intrinsic names\n-     defined (and now enabled) by these options or by the new `libU77'\n-     intrinsics.  Users of such programs might need to compile them\n-     differently (using, for example, `-ff90-intrinsics-disable') or,\n-     better yet, insert appropriate `EXTERNAL' statements specifying\n-     that these names are not intended to be names of intrinsics.\n-\n-   * The `ALWAYS_FLUSH' macro is no longer defined when building\n-     `libf2c', which should result in improved I/O performance,\n-     especially over NFS.\n-\n-     *Note:* If you have code that depends on the behavior of `libf2c'\n-     when built with `ALWAYS_FLUSH' defined, you will have to modify\n-     `libf2c' accordingly before building it from this and future\n-     versions of `g77'.\n-\n-   * Dave Love's implementation of `libU77' has been added to the\n-     version of `libf2c' distributed with and built as part of `g77'.\n-     `g77' now knows about the routines in this library as intrinsics.\n-\n-   * New option `-fvxt' specifies that the source file is written in\n-     VXT Fortran, instead of GNU Fortran.\n-\n-   * The `-fvxt-not-f90' option has been deleted, along with its\n-     inverse, `-ff90-not-vxt'.\n-\n-     If you used one of these deleted options, you should re-read the\n-     pertinent documentation to determine which options, if any, are\n-     appropriate for compiling your code with this version of `g77'.\n-\n-   * The `-fugly' option now issues a warning, as it likely will be\n-     removed in a future version.\n-\n-     (Enabling all the `-fugly-*' options is unlikely to be feasible,\n-     or sensible, in the future, so users should learn to specify only\n-     those `-fugly-*' options they really need for a particular source\n-     file.)\n-\n-   * The `-fugly-assumed' option, introduced in version 0.5.19, has\n-     been changed to better accommodate old and new code.\n-\n-   * Make a number of fixes to the `g77' front end and the `gcc' back\n-     end to better support Alpha (AXP) machines.  This includes\n-     providing at least one bug-fix to the `gcc' back end for Alphas.\n-\n-   * Related to supporting Alpha (AXP) machines, the `LOC()' intrinsic\n-     and `%LOC()' construct now return values of integer type that is\n-     the same width (holds the same number of bits) as the pointer type\n-     on the machine.\n-\n-     On most machines, this won't make a difference, whereas on Alphas,\n-     the type these constructs return is `INTEGER*8' instead of the\n-     more common `INTEGER*4'.\n-\n-   * Emulate `COMPLEX' arithmetic in the `g77' front end, to avoid bugs\n-     in `complex' support in the `gcc' back end.  New option\n-     `-fno-emulate-complex' causes `g77' to revert the 0.5.19 behavior.\n-\n-   * Fix bug whereby `REAL A(1)', for example, caused a compiler crash\n-     if `-fugly-assumed' was in effect and A was a local (automatic)\n-     array.  That case is no longer affected by the new handling of\n-     `-fugly-assumed'.\n-\n-   * Fix `g77' command driver so that `g77 -o foo.f' no longer deletes\n-     `foo.f' before issuing other diagnostics, and so the `-x' option\n-     is properly handled.\n-\n-   * Enable inlining of subroutines and functions by the `gcc' back end.\n-     This works as it does for `gcc' itself--program units may be\n-     inlined for invocations that follow them in the same program unit,\n-     as long as the appropriate compile-time options are specified.\n-\n-   * Dummy arguments are no longer assumed to potentially alias\n-     (overlap) other dummy arguments or `COMMON' areas when any of\n-     these are defined (assigned to) by Fortran code.\n-\n-     This can result in faster and/or smaller programs when compiling\n-     with optimization enabled, though on some systems this effect is\n-     observed only when `-fforce-addr' also is specified.\n-\n-     New options `-falias-check', `-fargument-alias',\n-     `-fargument-noalias', and `-fno-argument-noalias-global' control\n-     the way `g77' handles potential aliasing.\n-\n-   * The `CONJG()' and `DCONJG()' intrinsics now are compiled in-line.\n-\n-   * The bug-fix for 0.5.19.1 has been re-done.  The `g77' compiler has\n-     been changed back to assume `libf2c' has no aliasing problems in\n-     its implementations of the `COMPLEX' (and `DOUBLE COMPLEX')\n-     intrinsics.  The `libf2c' has been changed to have no such\n-     problems.\n-\n-     As a result, 0.5.20 is expected to offer improved performance over\n-     0.5.19.1, perhaps as good as 0.5.19 in most or all cases, due to\n-     this change alone.\n-\n-     *Note:* This change requires version 0.5.20 of `libf2c', at least,\n-     when linking code produced by any versions of `g77' other than\n-     0.5.19.1.  Use `g77 -v' to determine the version numbers of the\n-     `libF77', `libI77', and `libU77' components of the `libf2c'\n-     library.  (If these version numbers are not printed--in\n-     particular, if the linker complains about unresolved references to\n-     names like `g77__fvers__'--that strongly suggests your\n-     installation has an obsolete version of `libf2c'.)\n-\n-   * New option `-fugly-assign' specifies that the same memory\n-     locations are to be used to hold the values assigned by both\n-     statements `I = 3' and `ASSIGN 10 TO I', for example.  (Normally,\n-     `g77' uses a separate memory location to hold assigned statement\n-     labels.)\n-\n-   * `FORMAT' and `ENTRY' statements now are allowed to precede\n-     `IMPLICIT NONE' statements.\n-\n-   * Produce diagnostic for unsupported `SELECT CASE' on `CHARACTER'\n-     type, instead of crashing, at compile time.\n-\n-   * Fix crashes involving diagnosed or invalid code.\n-\n-   * Change approach to building `libf2c' archive (`libf2c.a') so that\n-     members are added to it only when truly necessary, so the user\n-     that installs an already-built `g77' doesn't need to have write\n-     access to the build tree (whereas the user doing the build might\n-     not have access to install new software on the system).\n-\n-   * Support `gcc' version 2.7.2.2 (modified by `g77' into version\n-     2.7.2.2.f.2), and remove support for prior versions of `gcc'.\n-\n-   * Upgrade to `libf2c' as of 1997-02-08, and fix up some of the build\n-     procedures.\n-\n-   * Improve general build procedures for `g77', fixing minor bugs\n-     (such as deletion of any file named `f771' in the parent directory\n-     of `gcc/').\n-\n-   * Enable full support of `INTEGER*8' available in `libf2c' and\n-     `f2c.h' so that `f2c' users may make full use of its features via\n-     the `g77' version of `f2c.h' and the `INTEGER*8' support routines\n-     in the `g77' version of `libf2c'.\n-\n-   * Improve `g77' driver and `libf2c' so that `g77 -v' yields version\n-     information on the library.\n-\n-   * The `SNGL' and `FLOAT' intrinsics now are specific intrinsics,\n-     instead of synonyms for the generic intrinsic `REAL'.\n-\n-   * New intrinsics have been added.  These are `REALPART', `IMAGPART',\n-     `COMPLEX', `LONG', and `SHORT'.\n-\n-   * A new group of intrinsics, `gnu', has been added to contain the\n-     new `REALPART', `IMAGPART', and `COMPLEX' intrinsics.  An old\n-     group, `dcp', has been removed.\n-\n-   * Complain about industry-wide ambiguous references `REAL(EXPR)' and\n-     `AIMAG(EXPR)', where EXPR is `DOUBLE COMPLEX' (or any complex type\n-     other than `COMPLEX'), unless `-ff90' option specifies Fortran 90\n-     interpretation or new `-fugly-complex' option, in conjunction with\n-     `-fnot-f90', specifies `f2c' interpretation.\n-\n-   * Make improvements to diagnostics.\n-\n-   * Speed up compiler a bit.\n-\n-   * Improvements to documentation and indexing, including a new\n-     chapter containing information on one, later more, diagnostics\n-     that users are directed to pull up automatically via a message in\n-     the diagnostic itself.\n-\n-     (Hence the menu item `M' for the node `Diagnostics' in the\n-     top-level menu of the Info documentation.)\n-\n-In 0.5.19.1:\n-============\n-\n-   * Code-generation bugs afflicting operations on complex data have\n-     been fixed.\n-\n-     These bugs occurred when assigning the result of an operation to a\n-     complex variable (or array element) that also served as an input\n-     to that operation.\n-\n-     The operations affected by this bug were: `CONJG()', `DCONJG()',\n-     `CCOS()', `CDCOS()', `CLOG()', `CDLOG()', `CSIN()', `CDSIN()',\n-     `CSQRT()', `CDSQRT()', complex division, and raising a `DOUBLE\n-     COMPLEX' operand to an `INTEGER' power.  (The related generic and\n-     `Z'-prefixed intrinsics, such as `ZSIN()', also were affected.)\n-\n-     For example, `C = CSQRT(C)', `Z = Z/C', and `Z = Z**I' (where `C'\n-     is `COMPLEX' and `Z' is `DOUBLE COMPLEX') have been fixed.\n-\n-In 0.5.19:\n-==========\n-\n-   * Fix `FORMAT' statement parsing so negative values for specifiers\n-     such as `P' (e.g. `FORMAT(-1PF8.1)') are correctly processed as\n-     negative.\n-\n-   * Fix `SIGNAL' intrinsic so it once again accepts a procedure as its\n-     second argument.\n-\n-   * A temporary kludge option provides bare-bones information on\n-     `COMMON' and `EQUIVALENCE' members at debug time.\n-\n-   * New `-fonetrip' option specifies FORTRAN-66-style one-trip `DO'\n-     loops.\n-\n-   * New `-fno-silent' option causes names of program units to be\n-     printed as they are compiled, in a fashion similar to UNIX `f77'\n-     and `f2c'.\n-\n-   * New `-fugly-assumed' option specifies that arrays dimensioned via\n-     `DIMENSION X(1)', for example, are to be treated as assumed-size.\n-\n-   * New `-fno-typeless-boz' option specifies that non-decimal-radix\n-     constants using the prefixed-radix form (such as `Z'1234'') are to\n-     be interpreted as `INTEGER' constants.\n-\n-   * New `-ff66' option is a \"shorthand\" option that specifies\n-     behaviors considered appropriate for FORTRAN 66 programs.\n-\n-   * New `-ff77' option is a \"shorthand\" option that specifies\n-     behaviors considered appropriate for UNIX `f77' programs.\n-\n-   * New `-fugly-comma' and `-fugly-logint' options provided to perform\n-     some of what `-fugly' used to do.  `-fugly' and `-fno-ugly' are\n-     now \"shorthand\" options, in that they do nothing more than enable\n-     (or disable) other `-fugly-*' options.\n-\n-   * Fix parsing of assignment statements involving targets that are\n-     substrings of elements of `CHARACTER' arrays having names such as\n-     `READ', `WRITE', `GOTO', and `REALFUNCTIONFOO'.\n-\n-   * Fix crashes involving diagnosed code.\n-\n-   * Fix handling of local `EQUIVALENCE' areas so certain cases of\n-     valid Fortran programs are not misdiagnosed as improperly\n-     extending the area backwards.\n-\n-   * Support `gcc' version 2.7.2.1.\n-\n-   * Upgrade to `libf2c' as of 1996-09-26, and fix up some of the build\n-     procedures.\n-\n-   * Change code generation for list-directed I/O so it allows for new\n-     versions of `libf2c' that might return non-zero status codes for\n-     some operations previously assumed to always return zero.\n-\n-     This change not only affects how `IOSTAT=' variables are set by\n-     list-directed I/O, it also affects whether `END=' and `ERR='\n-     labels are reached by these operations.\n-\n-   * Add intrinsic support for new `FTELL' and `FSEEK' procedures in\n-     `libf2c'.\n-\n-   * Modify `fseek_()' in `libf2c' to be more portable (though, in\n-     practice, there might be no systems where this matters) and to\n-     catch invalid `whence' arguments.\n-\n-   * Some useless warnings from the `-Wunused' option have been\n-     eliminated.\n-\n-   * Fix a problem building the `f771' executable on AIX systems by\n-     linking with the `-bbigtoc' option.\n-\n-   * Abort configuration if `gcc' has not been patched using the patch\n-     file provided in the `gcc/f/gbe/' subdirectory.\n-\n-   * Add options `--help' and `--version' to the `g77' command, to\n-     conform to GNU coding guidelines.  Also add printing of `g77'\n-     version number when the `--verbose' (`-v') option is used.\n-\n-   * Change internally generated name for local `EQUIVALENCE' areas to\n-     one based on the alphabetically sorted first name in the list of\n-     names for entities placed at the beginning of the areas.\n-\n-   * Improvements to documentation and indexing.\n-\n-In 0.5.18:\n-==========\n-\n-   * Add some rudimentary support for `INTEGER*1', `INTEGER*2',\n-     `INTEGER*8', and their `LOGICAL' equivalents.  (This support works\n-     on most, maybe all, `gcc' targets.)\n-\n-     Thanks to Scott Snyder (<snyder@d0sgif.fnal.gov>) for providing\n-     the patch for this!\n-\n-     Among the missing elements from the support for these features are\n-     full intrinsic support and constants.\n-\n-   * Add some rudimentary support for the `BYTE' and `WORD'\n-     type-declaration statements.  `BYTE' corresponds to `INTEGER*1',\n-     while `WORD' corresponds to `INTEGER*2'.\n-\n-     Thanks to Scott Snyder (<snyder@d0sgif.fnal.gov>) for providing\n-     the patch for this!\n-\n-   * The compiler code handling intrinsics has been largely rewritten\n-     to accommodate the new types.  No new intrinsics or arguments for\n-     existing intrinsics have been added, so there is, at this point,\n-     no intrinsic to convert to `INTEGER*8', for example.\n-\n-   * Support automatic arrays in procedures.\n-\n-   * Reduce space/time requirements for handling large *sparsely*\n-     initialized aggregate arrays.  This improvement applies to only a\n-     subset of the general problem to be addressed in 0.6.\n-\n-   * Treat initial values of zero as if they weren't specified (in DATA\n-     and type-declaration statements).  The initial values will be set\n-     to zero anyway, but the amount of compile time processing them\n-     will be reduced, in some cases significantly (though, again, this\n-     is only a subset of the general problem to be addressed in 0.6).\n-\n-     A new option, `-fzeros', is introduced to enable the traditional\n-     treatment of zeros as any other value.\n-\n-   * With `-ff90' in force, `g77' incorrectly interpreted `REAL(Z)' as\n-     returning a `REAL' result, instead of as a `DOUBLE PRECISION'\n-     result.  (Here, `Z' is `DOUBLE COMPLEX'.)\n-\n-     With `-fno-f90' in force, the interpretation remains unchanged,\n-     since this appears to be how at least some F77 code using the\n-     `DOUBLE COMPLEX' extension expected it to work.\n-\n-     Essentially, `REAL(Z)' in F90 is the same as `DBLE(Z)', while in\n-     extended F77, it appears to be the same as `REAL(REAL(Z))'.\n-\n-   * An expression involving exponentiation, where both operands were\n-     type `INTEGER' and the right-hand operand was negative, was\n-     erroneously evaluated.\n-\n-   * Fix bugs involving `DATA' implied-`DO' constructs (these involved\n-     an errant diagnostic and a crash, both on good code, one involving\n-     subsequent statement-function definition).\n-\n-   * Close `INCLUDE' files after processing them, so compiling source\n-     files with lots of `INCLUDE' statements does not result in being\n-     unable to open `INCLUDE' files after all the available file\n-     descriptors are used up.\n-\n-   * Speed up compiling, especially of larger programs, and perhaps\n-     slightly reduce memory utilization while compiling (this is *not*\n-     the improvement planned for 0.6 involving large aggregate\n-     areas)--these improvements result from simply turning off some\n-     low-level code to do self-checking that hasn't been triggered in a\n-     long time.\n-\n-   * Introduce three new options that implement optimizations in the\n-     `gcc' back end (GBE).  These options are `-fmove-all-movables',\n-     `-freduce-all-givs', and `-frerun-loop-opt', which are enabled, by\n-     default, for Fortran compilations.  These optimizations are\n-     intended to help toon Fortran programs.\n-\n-   * Patch the GBE to do a better job optimizing certain kinds of\n-     references to array elements.\n-\n-   * Due to patches to the GBE, the version number of `gcc' also is\n-     patched to make it easier to manage installations, especially\n-     useful if it turns out a `g77' change to the GBE has a bug.\n-\n-     The `g77'-modified version number is the `gcc' version number with\n-     the string `.f.N' appended, where `f' identifies the version as\n-     enhanced for Fortran, and N is `1' for the first Fortran patch for\n-     that version of `gcc', `2' for the second, and so on.\n-\n-     So, this introduces version 2.7.2.f.1 of `gcc'.\n-\n-   * Make several improvements and fixes to diagnostics, including the\n-     removal of two that were inappropriate or inadequate.\n-\n-   * Warning about two successive arithmetic operators, produced by\n-     `-Wsurprising', now produced *only* when both operators are,\n-     indeed, arithmetic (not relational/boolean).\n-\n-   * `-Wsurprising' now warns about the remaining cases of using\n-     non-integral variables for implied-`DO' loops, instead of these\n-     being rejected unless `-fpedantic' or `-fugly' specified.\n-\n-   * Allow `SAVE' of a local variable or array, even after it has been\n-     given an initial value via `DATA', for example.\n-\n-   * Introduce an Info version of `g77' documentation, which supercedes\n-     `gcc/f/CREDITS', `gcc/f/DOC', and `gcc/f/PROJECTS'.  These files\n-     will be removed in a future release.  The files `gcc/f/BUGS',\n-     `gcc/f/INSTALL', and `gcc/f/NEWS' now are automatically built from\n-     the texinfo source when distributions are made.\n-\n-     This effort was inspired by a first pass at translating\n-     `g77-0.5.16/f/DOC' that was contributed to Craig by David Ronis\n-     (<ronis@onsager.chem.mcgill.ca>).\n-\n-   * New `-fno-second-underscore' option to specify that, when\n-     `-funderscoring' is in effect, a second underscore is not to be\n-     appended to Fortran names already containing an underscore.\n-\n-   * Change the way iterative `DO' loops work to follow the F90\n-     standard.  In particular, calculation of the iteration count is\n-     still done by converting the start, end, and increment parameters\n-     to the type of the `DO' variable, but the result of the\n-     calculation is always converted to the default `INTEGER' type.\n-\n-     (This should have no effect on existing code compiled by `g77',\n-     but code written to assume that use of a *wider* type for the `DO'\n-     variable will result in an iteration count being fully calculated\n-     using that wider type (wider than default `INTEGER') must be\n-     rewritten.)\n-\n-   * Support `gcc' version 2.7.2.\n-\n-   * Upgrade to `libf2c' as of 1996-03-23, and fix up some of the build\n-     procedures.\n-\n-     Note that the email addresses related to `f2c' have changed--the\n-     distribution site now is named `netlib.bell-labs.com', and the\n-     maintainer's new address is <dmg@bell-labs.com>.\n-\n-In 0.5.17:\n-==========\n-\n-   * *Fix serious bug* in `g77 -v' command that can cause removal of a\n-     system's `/dev/null' special file if run by user `root'.\n-\n-     *All users* of version 0.5.16 should ensure that they have not\n-     removed `/dev/null' or replaced it with an ordinary file (e.g. by\n-     comparing the output of `ls -l /dev/null' with `ls -l /dev/zero'.\n-     If the output isn't basically the same, contact your system\n-     administrator about restoring `/dev/null' to its proper status).\n-\n-     This bug is particularly insidious because removing `/dev/null' as\n-     a special file can go undetected for quite a while, aside from\n-     various applications and programs exhibiting sudden, strange\n-     behaviors.\n-\n-     I sincerely apologize for not realizing the implications of the\n-     fact that when `g77 -v' runs the `ld' command with `-o /dev/null'\n-     that `ld' tries to *remove* the executable it is supposed to build\n-     (especially if it reports unresolved references, which it should\n-     in this case)!\n-\n-   * Fix crash on `CHARACTER*(*) FOO' in a main or block data program\n-     unit.\n-\n-   * Fix crash that can occur when diagnostics given outside of any\n-     program unit (such as when input file contains `@foo').\n-\n-   * Fix crashes, infinite loops (hangs), and such involving diagnosed\n-     code.\n-\n-   * Fix `ASSIGN''ed variables so they can be `SAVE''d or dummy\n-     arguments, and issue clearer error message in cases where target\n-     of `ASSIGN' or `ASSIGN'ed `GOTO'/`FORMAT' is too small (which\n-     should never happen).\n-\n-   * Make `libf2c' build procedures work on more systems again by\n-     eliminating unnecessary invocations of `ld -r -x' and `mv'.\n-\n-   * Fix omission of `-funix-intrinsics-...' options in list of\n-     permitted options to compiler.\n-\n-   * Fix failure to always diagnose missing type declaration for\n-     `IMPLICIT NONE'.\n-\n-   * Fix compile-time performance problem (which could sometimes crash\n-     the compiler, cause a hang, or whatever, due to a bug in the back\n-     end) involving exponentiation with a large `INTEGER' constant for\n-     the right-hand operator (e.g. `I**32767').\n-\n-   * Fix build procedures so cross-compiling `g77' (the `fini' utility\n-     in particular) is properly built using the host compiler.\n-\n-   * Add new `-Wsurprising' option to warn about constructs that are\n-     interpreted by the Fortran standard (and `g77') in ways that are\n-     surprising to many programmers.\n-\n-   * Add `ERF()' and `ERFC()' as generic intrinsics mapping to existing\n-     `ERF'/`DERF' and `ERFC'/`DERFC' specific intrinsics.\n-\n-     *Note:* You should specify `INTRINSIC ERF,ERFC' in any code where\n-     you might use these as generic intrinsics, to improve likelihood\n-     of diagnostics (instead of subtle run-time bugs) when using a\n-     compiler that doesn't support these as intrinsics (e.g. `f2c').\n-\n-   * Remove from `-fno-pedantic' the diagnostic about `DO' with\n-     non-`INTEGER' index variable; issue that under `-Wsurprising'\n-     instead.\n-\n-   * Clarify some diagnostics that say things like \"ignored\" when that's\n-     misleading.\n-\n-   * Clarify diagnostic on use of `.EQ.'/`.NE.' on `LOGICAL' operands.\n-\n-   * Minor improvements to code generation for various operations on\n-     `LOGICAL' operands.\n-\n-   * Minor improvement to code generation for some `DO' loops on some\n-     machines.\n-\n-   * Support `gcc' version 2.7.1.\n-\n-   * Upgrade to `libf2c' as of 1995-11-15.\n-\n-In 0.5.16:\n-==========\n-\n-   * Fix a code-generation bug involving complicated `EQUIVALENCE'\n-     statements not involving `COMMON'.\n-\n-   * Fix code-generation bugs involving invoking \"gratis\" library\n-     procedures in `libf2c' from code compiled with `-fno-f2c' by\n-     making these procedures known to `g77' as intrinsics (not affected\n-     by -fno-f2c).  This is known to fix code invoking `ERF()',\n-     `ERFC()', `DERF()', and `DERFC()'.\n-\n-   * Update `libf2c' to include netlib patches through 1995-08-16, and\n-     `#define' `WANT_LEAD_0' to 1 to make `g77'-compiled code more\n-     consistent with other Fortran implementations by outputting\n-     leading zeros in formatted and list-directed output.\n-\n-   * Fix a code-generation bug involving adjustable dummy arrays with\n-     high bounds whose primaries are changed during procedure\n-     execution, and which might well improve code-generation\n-     performance for such arrays compared to `f2c' plus `gcc' (but\n-     apparently only when using `gcc-2.7.0' or later).\n-\n-   * Fix a code-generation bug involving invocation of `COMPLEX' and\n-     `DOUBLE COMPLEX' `FUNCTION's and doing `COMPLEX' and `DOUBLE\n-     COMPLEX' divides, when the result of the invocation or divide is\n-     assigned directly to a variable that overlaps one or more of the\n-     arguments to the invocation or divide.\n-\n-   * Fix crash by not generating new optimal code for `X**I' if `I' is\n-     nonconstant and the expression is used to dimension a dummy array,\n-     since the `gcc' back end does not support the necessary mechanics\n-     (and the `gcc' front end rejects the equivalent construct, as it\n-     turns out).\n-\n-   * Fix crash on expressions like `COMPLEX**INTEGER'.\n-\n-   * Fix crash on expressions like `(1D0,2D0)**2', i.e. raising a\n-     `DOUBLE COMPLEX' constant to an `INTEGER' constant power.\n-\n-   * Fix crashes and such involving diagnosed code.\n-\n-   * Diagnose, instead of crashing on, statement function definitions\n-     having duplicate dummy argument names.\n-\n-   * Fix bug causing rejection of good code involving statement function\n-     definitions.\n-\n-   * Fix bug resulting in debugger not knowing size of local equivalence\n-     area when any member of area has initial value (via `DATA', for\n-     example).\n-\n-   * Fix installation bug that prevented installation of `g77' driver.\n-     Provide for easy selection of whether to install copy of `g77' as\n-     `f77' to replace the broken code.\n-\n-   * Fix `gcc' driver (affects `g77' thereby) to not gratuitously\n-     invoke the `f771' program (e.g. when `-E' is specified).\n-\n-   * Fix diagnostic to point to correct source line when it immediately\n-     follows an `INCLUDE' statement.\n-\n-   * Support more compiler options in `gcc'/`g77' when compiling\n-     Fortran files.  These options include `-p', `-pg', `-aux-info',\n-     `-P', correct setting of version-number macros for preprocessing,\n-     full recognition of `-O0', and automatic insertion of\n-     configuration-specific linker specs.\n-\n-   * Add new intrinsics that interface to existing routines in `libf2c':\n-     `ABORT', `DERF', `DERFC', `ERF', `ERFC', `EXIT', `FLUSH',\n-     `GETARG', `GETENV', `IARGC', `SIGNAL', and `SYSTEM'.  Note that\n-     `ABORT', `EXIT', `FLUSH', `SIGNAL', and `SYSTEM' are intrinsic\n-     subroutines, not functions (since they have side effects), so to\n-     get the return values from `SIGNAL' and `SYSTEM', append a final\n-     argument specifying an `INTEGER' variable or array element (e.g.\n-     `CALL SYSTEM('rm foo',ISTAT)').\n-\n-   * Add new intrinsic group named `unix' to contain the new intrinsics,\n-     and by default enable this new group.\n-\n-   * Move `LOC()' intrinsic out of the `vxt' group to the new `unix'\n-     group.\n-\n-   * Improve `g77' so that `g77 -v' by itself (or with certain other\n-     options, including `-B', `-b', `-i', `-nostdlib', and `-V')\n-     reports lots more useful version info, and so that long-form\n-     options `gcc' accepts are understood by `g77' as well (even in\n-     truncated, unambiguous forms).\n-\n-   * Add new `g77' option `--driver=name' to specify driver when\n-     default, `gcc', isn't appropriate.\n-\n-   * Add support for `#' directives (as output by the preprocessor) in\n-     the compiler, and enable generation of those directives by the\n-     preprocessor (when compiling `.F' files) so diagnostics and\n-     debugging info are more useful to users of the preprocessor.\n-\n-   * Produce better diagnostics, more like `gcc', with info such as `In\n-     function `foo':' and `In file included from...:'.\n-\n-   * Support `gcc''s `-fident' and `-fno-ident' options.\n-\n-   * When `-Wunused' in effect, don't warn about local variables used as\n-     statement-function dummy arguments or `DATA' implied-`DO' iteration\n-     variables, even though, strictly speaking, these are not uses of\n-     the variables themselves.\n-\n-   * When `-W -Wunused' in effect, don't warn about unused dummy\n-     arguments at all, since there's no way to turn this off for\n-     individual cases (`g77' might someday start warning about\n-     these)--applies to `gcc' versions 2.7.0 and later, since earlier\n-     versions didn't warn about unused dummy arguments.\n-\n-   * New option `-fno-underscoring' that inhibits transformation of\n-     names (by appending one or two underscores) so users may experiment\n-     with implications of such an environment.\n-\n-   * Minor improvement to `gcc/f/info' module to make it easier to build\n-     `g77' using the native (non-`gcc') compiler on certain machines\n-     (but definitely not all machines nor all non-`gcc' compilers).\n-     Please do not report bugs showing problems compilers have with\n-     macros defined in `gcc/f/target.h' and used in places like\n-     `gcc/f/expr.c'.\n-\n-   * Add warning to be printed for each invocation of the compiler if\n-     the target machine `INTEGER', `REAL', or `LOGICAL' size is not 32\n-     bits, since `g77' is known to not work well for such cases (to be\n-     fixed in Version 0.6--*note Actual Bugs We Haven't Fixed Yet:\n-     Actual Bugs.).\n-\n-   * Lots of new documentation (though work is still needed to put it\n-     into canonical GNU format).\n-\n-   * Build `libf2c' with `-g0', not `-g2', in effect (by default), to\n-     produce smaller library without lots of debugging clutter.\n-\n-In 0.5.15:\n-==========\n-\n-   * Fix bad code generation involving `X**I' and temporary, internal\n-     variables generated by `g77' and the back end (such as for `DO'\n-     loops).\n-\n-   * Fix crash given `CHARACTER A;DATA A/.TRUE./'.\n-\n-   * Replace crash with diagnostic given `CHARACTER A;DATA A/1.0/'.\n-\n-   * Fix crash or other erratic behavior when null character constant\n-     (`''') is encountered.\n-\n-   * Fix crash or other erratic behavior involving diagnosed code.\n-\n-   * Fix code generation for external functions returning type `REAL'\n-     when the `-ff2c' option is in force (which it is by default) so\n-     that `f2c' compatibility is indeed provided.\n-\n-   * Disallow `COMMON I(10)' if `I' has previously been specified with\n-     an array declarator.\n-\n-   * New `-ffixed-line-length-N' option, where N is the maximum length\n-     of a typical fixed-form line, defaulting to 72 columns, such that\n-     characters beyond column N are ignored, or N is `none', meaning no\n-     characters are ignored.  does not affect lines with `&' in column\n-     1, which are always processed as if `-ffixed-line-length-none' was\n-     in effect.\n-\n-   * No longer generate better code for some kinds of array references,\n-     as `gcc' back end is to be fixed to do this even better, and it\n-     turned out to slow down some code in some cases after all.\n-\n-   * In `COMMON' and `EQUIVALENCE' areas with any members given initial\n-     values (e.g. via `DATA'), uninitialized members now always\n-     initialized to binary zeros (though this is not required by the\n-     standard, and might not be done in future versions of `g77').\n-     Previously, in some `COMMON'/`EQUIVALENCE' areas (essentially\n-     those with members of more than one type), the uninitialized\n-     members were initialized to spaces, to cater to `CHARACTER' types,\n-     but it seems no existing code expects that, while much existing\n-     code expects binary zeros.\n-\n-In 0.5.14:\n-==========\n-\n-   * Don't emit bad code when low bound of adjustable array is\n-     nonconstant and thus might vary as an expression at run time.\n-\n-   * Emit correct code for calculation of number of trips in `DO' loops\n-     for cases where the loop should not execute at all.  (This bug\n-     affected cases where the difference between the begin and end\n-     values was less than the step count, though probably not for\n-     floating-point cases.)\n-\n-   * Fix crash when extra parentheses surround item in `DATA'\n-     implied-`DO' list.\n-\n-   * Fix crash over minor internal inconsistencies in handling\n-     diagnostics, just substitute dummy strings where necessary.\n-\n-   * Fix crash on some systems when compiling call to `MVBITS()'\n-     intrinsic.\n-\n-   * Fix crash on array assignment `TYPEDDD(...)=...', where DDD is a\n-     string of one or more digits.\n-\n-   * Fix crash on `DCMPLX()' with a single `INTEGER' argument.\n-\n-   * Fix various crashes involving code with diagnosed errors.\n-\n-   * Support `-I' option for `INCLUDE' statement, plus `gcc''s\n-     `header.gcc' facility for handling systems like MS-DOS.\n-\n-   * Allow `INCLUDE' statement to be continued across multiple lines,\n-     even allow it to coexist with other statements on the same line.\n-\n-   * Incorporate Bellcore fixes to `libf2c' through 1995-03-15--this\n-     fixes a bug involving infinite loops reading EOF with empty\n-     list-directed I/O list.\n-\n-   * Remove all the `g77'-specific auto-configuration scripts, code,\n-     and so on, except for temporary substitutes for bsearch() and\n-     strtoul(), as too many configure/build problems were reported in\n-     these areas.  People will have to fix their systems' problems\n-     themselves, or at least somewhere other than `g77', which expects\n-     a working ANSI C environment (and, for now, a GNU C compiler to\n-     compile `g77' itself).\n-\n-   * Complain if initialized common redeclared as larger in subsequent\n-     program unit.\n-\n-   * Warn if blank common initialized, since its size can vary and hence\n-     related warnings that might be helpful won't be seen.\n-\n-   * New `-fbackslash' option, on by default, that causes `\\' within\n-     `CHARACTER' and Hollerith constants to be interpreted a la GNU C.\n-     Note that this behavior is somewhat different from `f2c''s, which\n-     supports only a limited subset of backslash (escape) sequences.\n-\n-   * Make `-fugly-args' the default.\n-\n-   * New `-fugly-init' option, on by default, that allows\n-     typeless/Hollerith to be specified as initial values for variables\n-     or named constants (`PARAMETER'), and also allows\n-     character<->numeric conversion in those contexts--turn off via\n-     `-fno-ugly-init'.\n-\n-   * New `-finit-local-zero' option to initialize local variables to\n-     binary zeros.  This does not affect whether they are `SAVE'd, i.e.\n-     made automatic or static.\n-\n-   * New `-Wimplicit' option to warn about implicitly typed variables,\n-     arrays, and functions.  (Basically causes all program units to\n-     default to `IMPLICIT NONE'.)\n-\n-   * `-Wall' now implies `-Wuninitialized' as with `gcc' (i.e. unless\n-     `-O' not specified, since `-Wuninitialized' requires `-O'), and\n-     implies `-Wunused' as well.\n-\n-   * `-Wunused' no longer gives spurious messages for unused `EXTERNAL'\n-     names (since they are assumed to refer to block data program\n-     units, to make use of libraries more reliable).\n-\n-   * Support `%LOC()' and `LOC()' of character arguments.\n-\n-   * Support null (zero-length) character constants and expressions.\n-\n-   * Support `f2c''s `IMAG()' generic intrinsic.\n-\n-   * Support `ICHAR()', `IACHAR()', and `LEN()' of character\n-     expressions that are valid in assignments but not normally as\n-     actual arguments.\n-\n-   * Support `f2c'-style `&' in column 1 to mean continuation line.\n-\n-   * Allow `NAMELIST', `EXTERNAL', `INTRINSIC', and `VOLATILE' in\n-     `BLOCK DATA', even though these are not allowed by the standard.\n-\n-   * Allow `RETURN' in main program unit.\n-\n-   * Changes to Hollerith-constant support to obey Appendix C of the\n-     standard:\n-\n-        - Now padded on the right with zeros, not spaces.\n-\n-        - Hollerith \"format specifications\" in the form of arrays of\n-          non-character allowed.\n-\n-        - Warnings issued when non-space truncation occurs when\n-          converting to another type.\n-\n-        - When specified as actual argument, now passed by reference to\n-          `INTEGER' (padded on right with spaces if constant too small,\n-          otherwise fully intact if constant wider the `INTEGER' type)\n-          instead of by value.\n-\n-     *Warning:* `f2c' differs on the interpretation of `CALL FOO(1HX)',\n-     which it treats exactly the same as `CALL FOO('X')', but which the\n-     standard and `g77' treat as `CALL FOO(%REF('X   '))' (padded with\n-     as many spaces as necessary to widen to `INTEGER'), essentially.\n-\n-   * Changes and fixes to typeless-constant support:\n-\n-        - Now treated as a typeless double-length `INTEGER' value.\n-\n-        - Warnings issued when overflow occurs.\n-\n-        - Padded on the left with zeros when converting to a larger\n-          type.\n-\n-        - Should be properly aligned and ordered on the target machine\n-          for whatever type it is turned into.\n-\n-        - When specified as actual argument, now passed as reference to\n-          a default `INTEGER' constant.\n-\n-   * `%DESCR()' of a non-`CHARACTER' expression now passes a pointer to\n-     the expression plus a length for the expression just as if it were\n-     a `CHARACTER' expression.  For example, `CALL FOO(%DESCR(D))',\n-     where `D' is `REAL*8', is the same as `CALL FOO(D,%VAL(8)))'.\n-\n-   * Name of multi-entrypoint master function changed to incorporate\n-     the name of the primary entry point instead of a decimal value, so\n-     the name of the master function for `SUBROUTINE X' with alternate\n-     entry points is now `__g77_masterfun_x'.\n-\n-   * Remove redundant message about zero-step-count `DO' loops.\n-\n-   * Clean up diagnostic messages, shortening many of them.\n-\n-   * Fix typo in `g77' man page.\n-\n-   * Clarify implications of constant-handling bugs in `f/BUGS'.\n-\n-   * Generate better code for `**' operator with a right-hand operand of\n-     type `INTEGER'.\n-\n-   * Generate better code for `SQRT()' and `DSQRT()', also when\n-     `-ffast-math' specified, enable better code generation for `SIN()'\n-     and `COS()'.\n-\n-   * Generate better code for some kinds of array references.\n-\n-   * Speed up lexing somewhat (this makes the compilation phase\n-     noticeably faster).\n-"}, {"sha": "47ecfc377919a22bd842c15d738c31d3d4a61254", "filename": "gcc/f/g77.info-5", "status": "removed", "additions": 0, "deletions": 1305, "changes": 1305, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-5", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-5", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-5?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2", "patch": "@@ -1,1305 +0,0 @@\n-This is Info file g77.info, produced by Makeinfo version 1.68 from the\n-input file g77.texi.\n-\n-   This file explains how to use the GNU Fortran system.\n-\n-   Published by the Free Software Foundation 59 Temple Place - Suite 330\n-Boston, MA 02111-1307 USA\n-\n-   Copyright (C) 1995-1997 Free Software Foundation, Inc.\n-\n-   Permission is granted to make and distribute verbatim copies of this\n-manual provided the copyright notice and this permission notice are\n-preserved on all copies.\n-\n-   Permission is granted to copy and distribute modified versions of\n-this manual under the conditions for verbatim copying, provided also\n-that the sections entitled \"GNU General Public License,\" \"Funding for\n-Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n-included exactly as in the original, and provided that the entire\n-resulting derived work is distributed under the terms of a permission\n-notice identical to this one.\n-\n-   Permission is granted to copy and distribute translations of this\n-manual into another language, under the above conditions for modified\n-versions, except that the sections entitled \"GNU General Public\n-License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n-`Look And Feel'\", and this permission notice, may be included in\n-translations approved by the Free Software Foundation instead of in the\n-original English.\n-\n-   Contributed by James Craig Burley (<burley@gnu.ai.mit.edu>).\n-Inspired by a first pass at translating `g77-0.5.16/f/DOC' that was\n-contributed to Craig by David Ronis (<ronis@onsager.chem.mcgill.ca>).\n-\n-INFO-DIR-SECTION Fortran Programming\n-START-INFO-DIR-ENTRY\n-* g77: (g77).               The GNU Fortran compilation system.\n-END-INFO-DIR-ENTRY\n-\n-\u001f\n-File: g77.info,  Node: Changes,  Next: Language,  Prev: News,  Up: Top\n-\n-User-visible Changes\n-********************\n-\n-   This section describes changes to `g77' that are visible to the\n-programmers who actually write and maintain Fortran code they compile\n-with `g77'.  Information on changes to installation procedures, changes\n-to the documentation, and bug fixes is not provided here, unless it is\n-likely to affect how users use `g77'.  *Note News About GNU Fortran:\n-News, for information on such changes to `g77'.\n-\n-   To find out about existing bugs and ongoing plans for GNU Fortran,\n-retrieve `ftp://alpha.gnu.ai.mit.edu/g77.plan' or, if you cannot do\n-that, email <fortran@gnu.ai.mit.edu> asking for a recent copy of the\n-GNU Fortran `.plan' file.\n-\n-In 0.5.21:\n-==========\n-\n-   * When the `-W' option is specified, `gcc', `g77', and other GNU\n-     compilers that incorporate the `gcc' back end as modified by\n-     `g77', issue a warning about integer division by constant zero.\n-\n-   * New option `-Wno-globals' disables warnings about \"suspicious\" use\n-     of a name both as a global name and as the implicit name of an\n-     intrinsic, and warnings about disagreements over the number or\n-     natures of arguments passed to global procedures, or the natures\n-     of the procedures themselves.\n-\n-     The default is to issue such warnings, which are new as of this\n-     version of `g77'.\n-\n-   * New option `-fno-globals' disables diagnostics about potentially\n-     fatal disagreements analysis problems, such as disagreements over\n-     the number or natures of arguments passed to global procedures, or\n-     the natures of those procedures themselves.\n-\n-     The default is to issue such diagnostics and flag the compilation\n-     as unsuccessful.  With this option, the diagnostics are issued as\n-     warnings, or, if `-Wno-globals' is specified, are not issued at\n-     all.\n-\n-     This option also disables inlining of global procedures, to avoid\n-     compiler crashes resulting from coding errors that these\n-     diagnostics normally would identify.\n-\n-   * Fix `libU77' routines that accept file names to strip trailing\n-     spaces from them, for consistency with other implementations.\n-\n-   * Fix `SIGNAL' intrinsic so it accepts an optional third `Status'\n-     argument.\n-\n-   * Make many changes to `libU77' intrinsics to support existing code\n-     more directly.\n-\n-     Such changes include allowing both subroutine and function forms\n-     of many routines, changing `MCLOCK()' and `TIME()' to return\n-     `INTEGER(KIND=1)' values, introducing `MCLOCK8()' and `TIME8()' to\n-     return `INTEGER(KIND=2)' values, and placing functions that are\n-     intended to perform side effects in a new intrinsic group,\n-     `badu77'.\n-\n-   * Add options `-fbadu77-intrinsics-delete',\n-     `-fbadu77-intrinsics-hide', and so on.\n-\n-   * Add `INT2' and `INT8' intrinsics.\n-\n-   * Add `CPU_TIME' intrinsic.\n-\n-   * `CTIME' intrinsic now accepts any `INTEGER' argument, not just\n-     `INTEGER(KIND=2)'.\n-\n-In 0.5.20:\n-==========\n-\n-   * The `-fno-typeless-boz' option is now the default.\n-\n-     This option specifies that non-decimal-radix constants using the\n-     prefixed-radix form (such as `Z'1234'') are to be interpreted as\n-     `INTEGER(KIND=1)' constants.  Specify `-ftypeless-boz' to cause\n-     such constants to be interpreted as typeless.\n-\n-     (Version 0.5.19 introduced `-fno-typeless-boz' and its inverse.)\n-\n-     *Note Options Controlling Fortran Dialect: Fortran Dialect Options,\n-     for information on the `-ftypeless-boz' option.\n-\n-   * Options `-ff90-intrinsics-enable' and `-fvxt-intrinsics-enable'\n-     now are the defaults.\n-\n-     Some programs might use names that clash with intrinsic names\n-     defined (and now enabled) by these options or by the new `libU77'\n-     intrinsics.  Users of such programs might need to compile them\n-     differently (using, for example, `-ff90-intrinsics-disable') or,\n-     better yet, insert appropriate `EXTERNAL' statements specifying\n-     that these names are not intended to be names of intrinsics.\n-\n-   * The `ALWAYS_FLUSH' macro is no longer defined when building\n-     `libf2c', which should result in improved I/O performance,\n-     especially over NFS.\n-\n-     *Note:* If you have code that depends on the behavior of `libf2c'\n-     when built with `ALWAYS_FLUSH' defined, you will have to modify\n-     `libf2c' accordingly before building it from this and future\n-     versions of `g77'.\n-\n-     *Note Output Assumed To Flush::, for more information.\n-\n-   * Dave Love's implementation of `libU77' has been added to the\n-     version of `libf2c' distributed with and built by `g77'.  `g77'\n-     now knows about the routines in this library as intrinsics.\n-\n-   * New option `-fvxt' specifies that the source file is written in\n-     VXT Fortran, instead of GNU Fortran.\n-\n-     *Note VXT Fortran::, for more information on the constructs\n-     recognized when the `-fvxt' option is specified.\n-\n-   * The `-fvxt-not-f90' option has been deleted, along with its\n-     inverse, `-ff90-not-vxt'.\n-\n-     If you used one of these deleted options, you should re-read the\n-     pertinent documentation to determine which options, if any, are\n-     appropriate for compiling your code with this version of `g77'.\n-\n-     *Note Other Dialects::, for more information.\n-\n-   * The `-fugly' option now issues a warning, as it likely will be\n-     removed in a future version.\n-\n-     (Enabling all the `-fugly-*' options is unlikely to be feasible,\n-     or sensible, in the future, so users should learn to specify only\n-     those `-fugly-*' options they really need for a particular source\n-     file.)\n-\n-   * The `-fugly-assumed' option, introduced in version 0.5.19, has\n-     been changed to better accommodate old and new code.  *Note Ugly\n-     Assumed-Size Arrays::, for more information.\n-\n-   * Related to supporting Alpha (AXP) machines, the `LOC()' intrinsic\n-     and `%LOC()' construct now return values of `INTEGER(KIND=0)' type,\n-     as defined by the GNU Fortran language.\n-\n-     This type is wide enough (holds the same number of bits) as the\n-     character-pointer type on the machine.\n-\n-     On most systems, this won't make a noticable difference, whereas\n-     on Alphas and other systems with 64-bit pointers, the\n-     `INTEGER(KIND=0)' type is equivalent to `INTEGER(KIND=2)' (often\n-     referred to as `INTEGER*8') instead of the more common\n-     `INTEGER(KIND=1)' (often referred to as `INTEGER*4').\n-\n-   * Emulate `COMPLEX' arithmetic in the `g77' front end, to avoid bugs\n-     in `complex' support in the `gcc' back end.  New option\n-     `-fno-emulate-complex' causes `g77' to revert the 0.5.19 behavior.\n-\n-   * Dummy arguments are no longer assumed to potentially alias\n-     (overlap) other dummy arguments or `COMMON' areas when any of\n-     these are defined (assigned to) by Fortran code.\n-\n-     This can result in faster and/or smaller programs when compiling\n-     with optimization enabled, though on some systems this effect is\n-     observed only when `-fforce-addr' also is specified.\n-\n-     New options `-falias-check', `-fargument-alias',\n-     `-fargument-noalias', and `-fno-argument-noalias-global' control\n-     the way `g77' handles potential aliasing.\n-\n-     *Note Aliasing Assumed To Work::, for detailed information on why\n-     the new defaults might result in some programs no longer working\n-     the way they did when compiled by previous versions of `g77'.\n-\n-   * New option `-fugly-assign' specifies that the same memory\n-     locations are to be used to hold the values assigned by both\n-     statements `I = 3' and `ASSIGN 10 TO I', for example.  (Normally,\n-     `g77' uses a separate memory location to hold assigned statement\n-     labels.)\n-\n-     *Note Ugly Assigned Labels::, for more information.\n-\n-   * `FORMAT' and `ENTRY' statements now are allowed to precede\n-     `IMPLICIT NONE' statements.\n-\n-   * Enable full support of `INTEGER(KIND=2)' (often referred to as\n-     `INTEGER*8') available in `libf2c' and `f2c.h' so that `f2c' users\n-     may make full use of its features via the `g77' version of `f2c.h'\n-     and the `INTEGER(KIND=2)' support routines in the `g77' version of\n-     `libf2c'.\n-\n-   * Improve `g77' driver and `libf2c' so that `g77 -v' yields version\n-     information on the library.\n-\n-   * The `SNGL' and `FLOAT' intrinsics now are specific intrinsics,\n-     instead of synonyms for the generic intrinsic `REAL'.\n-\n-   * New intrinsics have been added.  These are `REALPART', `IMAGPART',\n-     `COMPLEX', `LONG', and `SHORT'.\n-\n-   * A new group of intrinsics, `gnu', has been added to contain the\n-     new `REALPART', `IMAGPART', and `COMPLEX' intrinsics.  An old\n-     group, `dcp', has been removed.\n-\n-In 0.5.19:\n-==========\n-\n-   * A temporary kludge option provides bare-bones information on\n-     `COMMON' and `EQUIVALENCE' members at debug time.  *Note Options\n-     for Code Generation Conventions: Code Gen Options, for information\n-     on the `-fdebug-kludge' option.\n-\n-   * New `-fonetrip' option specifies FORTRAN-66-style one-trip `DO'\n-     loops.\n-\n-   * New `-fno-silent' option causes names of program units to be\n-     printed as they are compiled, in a fashion similar to UNIX `f77'\n-     and `f2c'.\n-\n-   * New `-fugly-assumed' option specifies that arrays dimensioned via\n-     `DIMENSION X(1)', for example, are to be treated as assumed-size.\n-\n-   * New `-fno-typeless-boz' option specifies that non-decimal-radix\n-     constants using the prefixed-radix form (such as `Z'1234'') are to\n-     be interpreted as `INTEGER(KIND=1)' constants.\n-\n-   * New `-ff66' option is a \"shorthand\" option that specifies\n-     behaviors considered appropriate for FORTRAN 66 programs.\n-\n-   * New `-ff77' option is a \"shorthand\" option that specifies\n-     behaviors considered appropriate for UNIX `f77' programs.\n-\n-   * New `-fugly-comma' and `-fugly-logint' options provided to perform\n-     some of what `-fugly' used to do.  `-fugly' and `-fno-ugly' are\n-     now \"shorthand\" options, in that they do nothing more than enable\n-     (or disable) other `-fugly-*' options.\n-\n-   * Change code generation for list-directed I/O so it allows for new\n-     versions of `libf2c' that might return non-zero status codes for\n-     some operations previously assumed to always return zero.\n-\n-     This change not only affects how `IOSTAT=' variables are set by\n-     list-directed I/O, it also affects whether `END=' and `ERR='\n-     labels are reached by these operations.\n-\n-   * Add intrinsic support for new `FTELL' and `FSEEK' procedures in\n-     `libf2c'.\n-\n-   * Add options `--help' and `--version' to the `g77' command, to\n-     conform to GNU coding guidelines.  Also add printing of `g77'\n-     version number when the `--verbose' (`-v') option is used.\n-\n-In 0.5.18:\n-==========\n-\n-   * The `BYTE' and `WORD' statements now are supported, to a limited\n-     extent.\n-\n-   * `INTEGER*1', `INTEGER*2', `INTEGER*8', and their `LOGICAL'\n-     equivalents, now are supported to a limited extent.  Among the\n-     missing elements are complete intrinsic and constant support.\n-\n-   * Support automatic arrays in procedures.  For example, `REAL A(N)',\n-     where `A' is not a dummy argument, specifies that `A' is an\n-     automatic array.  The size of `A' is calculated from the value of\n-     `N' each time the procedure is called, that amount of space is\n-     allocated, and that space is freed when the procedure returns to\n-     its caller.\n-\n-   * Add `-fno-zeros' option, enabled by default, to reduce\n-     compile-time CPU and memory usage for code that provides initial\n-     zero values for variables and arrays.\n-\n-   * Introduce three new options that apply to all compilations by\n-     `g77'-aware GNU compilers--`-fmove-all-movables',\n-     `-freduce-all-givs', and `-frerun-loop-opt'--which can improve the\n-     run-time performance of some programs.\n-\n-   * Replace much of the existing documentation with a single Info\n-     document.\n-\n-   * New option `-fno-second-underscore'.\n-\n-In 0.5.17:\n-==========\n-\n-   * The `ERF()' and `ERFC()' intrinsics now are generic intrinsics,\n-     mapping to `ERF'/`DERF' and `ERFC'/`DERFC', respectively.  *Note:*\n-     Use `INTRINSIC ERF,ERFC' in any code that might reference these as\n-     generic intrinsics, to improve the likelihood of diagnostics\n-     (instead of subtle run-time bugs) when using compilers that don't\n-     support these as intrinsics.\n-\n-   * New option `-Wsurprising'.\n-\n-   * DO loops with non-`INTEGER' variables now diagnosed only when\n-     `-Wsurprising' specified.  Previously, this was diagnosed *unless*\n-     `-fpedantic' or `-fugly' was specified.\n-\n-In 0.5.16:\n-==========\n-\n-   * `libf2c' changed to output a leading zero (0) digit for\n-     floating-point values output via list-directed and formatted\n-     output (to bring `g77' more into line with many existing Fortran\n-     implementations--the ANSI FORTRAN 77 standard leaves this choice\n-     to the implementation).\n-\n-   * `libf2c' no longer built with debugging information intact, making\n-     it much smaller.\n-\n-   * Automatic installation of the `g77' command now works.\n-\n-   * Diagnostic messages now more informative, a la `gcc', including\n-     messages like `In function `foo':' and `In file included from...:'.\n-\n-   * New group of intrinsics called `unix', including `ABORT', `DERF',\n-     `DERFC', `ERF', `ERFC', `EXIT', `FLUSH', `GETARG', `GETENV',\n-     `SIGNAL', and `SYSTEM'.\n-\n-   * `-funix-intrinsics-{delete,hide,disable,enable}' options added.\n-\n-   * `-fno-underscoring' option added.\n-\n-   * `--driver' option added to the `g77' command.\n-\n-   * Support for the `gcc' options `-fident' and `-fno-ident' added.\n-\n-   * `g77 -v' returns much more version info, making the submission of\n-     better bug reports easily.\n-\n-   * Many improvements to the `g77' command to better fulfill its role\n-     as a front-end to the `gcc' driver.  For example, `g77' now\n-     recognizes `--verbose' as a verbose way of specifying `-v'.\n-\n-   * Compiling preprocessed (`*.F' and `*.fpp') files now results in\n-     better diagnostics and debugging information, as the\n-     source-location info now is passed all the way through the\n-     compilation process instead of being lost.\n-\n-\u001f\n-File: g77.info,  Node: Language,  Next: Compiler,  Prev: Changes,  Up: Top\n-\n-The GNU Fortran Language\n-************************\n-\n-   GNU Fortran supports a variety of extensions to, and dialects of,\n-the Fortran language.  Its primary base is the ANSI FORTRAN 77\n-standard, currently available on the network at\n-`http://kumo.swcp.com/fortran/F77_std/f77_std.html' or in\n-`ftp://ftp.ast.cam.ac.uk/pub/michael/'.  It offers some extensions that\n-are popular among users of UNIX `f77' and `f2c' compilers, some that\n-are popular among users of other compilers (such as Digital products),\n-some that are popular among users of the newer Fortran 90 standard, and\n-some that are introduced by GNU Fortran.\n-\n-   (If you need a text on Fortran, a few freely available electronic\n-references have pointers from `http://www.fortran.com/fortran/Books/'.)\n-\n-   Part of what defines a particular implementation of a Fortran\n-system, such as `g77', is the particular characteristics of how it\n-supports types, constants, and so on.  Much of this is left up to the\n-implementation by the various Fortran standards and accepted practice\n-in the industry.\n-\n-   The GNU Fortran *language* is described below.  Much of the material\n-is organized along the same lines as the ANSI FORTRAN 77 standard\n-itself.\n-\n-   *Note Other Dialects::, for information on features `g77' supports\n-that are not part of the GNU Fortran language.\n-\n-   *Note*: This portion of the documentation definitely needs a lot of\n-work!\n-\n-* Menu:\n-\n-Relationship to the ANSI FORTRAN 77 standard:\n-* Direction of Language Development::  Where GNU Fortran is headed.\n-* Standard Support::  Degree of support for the standard.\n-\n-Extensions to the ANSI FORTRAN 77 standard:\n-* Conformance::\n-* Notation Used::\n-* Terms and Concepts::\n-* Characters Lines Sequence::\n-* Data Types and Constants::\n-* Expressions::\n-* Specification Statements::\n-* Control Statements::\n-* Functions and Subroutines::\n-* Scope and Classes of Names::\n-\n-\u001f\n-File: g77.info,  Node: Direction of Language Development,  Next: Standard Support,  Up: Language\n-\n-Direction of Language Development\n-=================================\n-\n-   The purpose of the following description of the GNU Fortran language\n-is to promote wide portability of GNU Fortran programs.\n-\n-   GNU Fortran is an evolving language, due to the fact that `g77'\n-itself is in beta test.  Some current features of the language might\n-later be redefined as dialects of Fortran supported by `g77' when\n-better ways to express these features are added to `g77', for example.\n-Such features would still be supported by `g77', but would be available\n-only when one or more command-line options were used.\n-\n-   The GNU Fortran *language* is distinct from the GNU Fortran\n-*compilation system* (`g77').\n-\n-   For example, `g77' supports various dialects of Fortran--in a sense,\n-these are languages other than GNU Fortran--though its primary purpose\n-is to support the GNU Fortran language, which also is described in its\n-documentation and by its implementation.\n-\n-   On the other hand, non-GNU compilers might offer support for the GNU\n-Fortran language, and are encouraged to do so.\n-\n-   Currently, the GNU Fortran language is a fairly fuzzy object.  It\n-represents something of a cross between what `g77' accepts when\n-compiling using the prevailing defaults and what this document\n-describes as being part of the language.\n-\n-   Future versions of `g77' are expected to clarify the definition of\n-the language in the documentation.  Often, this will mean adding new\n-features to the language, in the form of both new documentation and new\n-support in `g77'.  However, it might occasionally mean removing a\n-feature from the language itself to \"dialect\" status.  In such a case,\n-the documentation would be adjusted to reflect the change, and `g77'\n-itself would likely be changed to require one or more command-line\n-options to continue supporting the feature.\n-\n-   The development of the GNU Fortran language is intended to strike a\n-balance between:\n-\n-   * Serving as a mostly-upwards-compatible language from the de facto\n-     UNIX Fortran dialect as supported by `f77'.\n-\n-   * Offering new, well-designed language features.  Attributes of such\n-     features include not making existing code any harder to read (for\n-     those who might be unaware that the new features are not in use)\n-     and not making state-of-the-art compilers take longer to issue\n-     diagnostics, among others.\n-\n-   * Supporting existing, well-written code without gratuitously\n-     rejecting non-standard constructs, regardless of the origin of the\n-     code (its dialect).\n-\n-   * Offering default behavior and command-line options to reduce and,\n-     where reasonable, eliminate the need for programmers to make any\n-     modifications to code that already works in existing production\n-     environments.\n-\n-   * Diagnosing constructs that have different meanings in different\n-     systems, languages, and dialects, while offering clear, less\n-     ambiguous ways to express each of the different meanings so\n-     programmers can change their code appropriately.\n-\n-   One of the biggest practical challenges for the developers of the\n-GNU Fortran language is meeting the sometimes contradictory demands of\n-the above items.\n-\n-   For example, a feature might be widely used in one popular\n-environment, but the exact same code that utilizes that feature might\n-not work as expected--perhaps it might mean something entirely\n-different--in another popular environment.\n-\n-   Traditionally, Fortran compilers--even portable ones--have solved\n-this problem by simply offering the appropriate feature to users of the\n-respective systems.  This approach treats users of various Fortran\n-systems and dialects as remote \"islands\", or camps, of programmers, and\n-assume that these camps rarely come into contact with each other (or,\n-especially, with each other's code).\n-\n-   Project GNU takes a radically different approach to software and\n-language design, in that it assumes that users of GNU software do not\n-necessarily care what kind of underlying system they are using,\n-regardless of whether they are using software (at the user-interface\n-level) or writing it (for example, writing Fortran or C code).\n-\n-   As such, GNU users rarely need consider just what kind of underlying\n-hardware (or, in many cases, operating system) they are using at any\n-particular time.  They can use and write software designed for a\n-general-purpose, widely portable, heteregenous environment--the GNU\n-environment.\n-\n-   In line with this philosophy, GNU Fortran must evolve into a product\n-that is widely ported and portable not only in the sense that it can be\n-successfully built, installed, and run by users, but in the larger\n-sense that its users can use it in the same way, and expect largely the\n-same behaviors from it, regardless of the kind of system they are using\n-at any particular time.\n-\n-   This approach constrains the solutions `g77' can use to resolve\n-conflicts between various camps of Fortran users.  If these two camps\n-disagree about what a particular construct should mean, `g77' cannot\n-simply be changed to treat that particular construct as having one\n-meaning without comment (such as a warning), lest the users expecting\n-it to have the other meaning are unpleasantly surprised that their code\n-misbehaves when executed.\n-\n-   The use of the ASCII backslash character in character constants is\n-an excellent (and still somewhat unresolved) example of this kind of\n-controversy.  *Note Backslash in Constants::.  Other examples are\n-likely to arise in the future, as `g77' developers strive to improve\n-its ability to accept an ever-wider variety of existing Fortran code\n-without requiring significant modifications to said code.\n-\n-   Development of GNU Fortran is further constrained by the desire to\n-avoid requiring programmers to change their code.  This is important\n-because it allows programmers, administrators, and others to more\n-faithfully evaluate and validate `g77' (as an overall product and as\n-new versions are distributed) without having to support multiple\n-versions of their programs so that they continue to work the same way\n-on their existing systems (non-GNU perhaps, but possibly also earlier\n-versions of `g77').\n-\n-\u001f\n-File: g77.info,  Node: Standard Support,  Next: Conformance,  Prev: Direction of Language Development,  Up: Language\n-\n-ANSI FORTRAN 77 Standard Support\n-================================\n-\n-   GNU Fortran supports ANSI FORTRAN 77 with the following caveats.  In\n-summary, the only ANSI FORTRAN 77 features `g77' doesn't support are\n-those that are probably rarely used in actual code, some of which are\n-explicitly disallowed by the Fortran 90 standard.\n-\n-* Menu:\n-\n-* No Passing External Assumed-length::  CHAR*(*) CFUNC restriction.\n-* No Passing Dummy Assumed-length::     CHAR*(*) CFUNC restriction.\n-* No Pathological Implied-DO::          No `((..., I=...), I=...)'.\n-* No Useless Implied-DO::               No `(A, I=1, 1)'.\n-\n-\u001f\n-File: g77.info,  Node: No Passing External Assumed-length,  Next: No Passing Dummy Assumed-length,  Up: Standard Support\n-\n-No Passing External Assumed-length\n-----------------------------------\n-\n-   `g77' disallows passing of an external procedure as an actual\n-argument if the procedure's type is declared `CHARACTER*(*)'.  For\n-example:\n-\n-     CHARACTER*(*) CFUNC\n-     EXTERNAL CFUNC\n-     CALL FOO(CFUNC)\n-     END\n-\n-It isn't clear whether the standard considers this conforming.\n-\n-\u001f\n-File: g77.info,  Node: No Passing Dummy Assumed-length,  Next: No Pathological Implied-DO,  Prev: No Passing External Assumed-length,  Up: Standard Support\n-\n-No Passing Dummy Assumed-length\n--------------------------------\n-\n-   `g77' disallows passing of a dummy procedure as an actual argument\n-if the procedure's type is declared `CHARACTER*(*)'.\n-\n-     SUBROUTINE BAR(CFUNC)\n-     CHARACTER*(*) CFUNC\n-     EXTERNAL CFUNC\n-     CALL FOO(CFUNC)\n-     END\n-\n-It isn't clear whether the standard considers this conforming.\n-\n-\u001f\n-File: g77.info,  Node: No Pathological Implied-DO,  Next: No Useless Implied-DO,  Prev: No Passing Dummy Assumed-length,  Up: Standard Support\n-\n-No Pathological Implied-DO\n---------------------------\n-\n-   The `DO' variable for an implied-`DO' construct in a `DATA'\n-statement may not be used as the `DO' variable for an outer\n-implied-`DO' construct.  For example, this fragment is disallowed by\n-`g77':\n-\n-     DATA ((A(I, I), I= 1, 10), I= 1, 10) /.../\n-\n-This also is disallowed by Fortran 90, as it offers no additional\n-capabilities and would have a variety of possible meanings.\n-\n-   Note that it is *very* unlikely that any production Fortran code\n-tries to use this unsupported construct.\n-\n-\u001f\n-File: g77.info,  Node: No Useless Implied-DO,  Prev: No Pathological Implied-DO,  Up: Standard Support\n-\n-No Useless Implied-DO\n----------------------\n-\n-   An array element initializer in an implied-`DO' construct in a\n-`DATA' statement must contain at least one reference to the `DO'\n-variables of each outer implied-`DO' construct.  For example, this\n-fragment is disallowed by `g77':\n-\n-     DATA (A, I= 1, 1) /1./\n-\n-This also is disallowed by Fortran 90, as FORTRAN 77's more permissive\n-requirements offer no additional capabilities.  However, `g77' doesn't\n-necessarily diagnose all cases where this requirement is not met.\n-\n-   Note that it is *very* unlikely that any production Fortran code\n-tries to use this unsupported construct.\n-\n-\u001f\n-File: g77.info,  Node: Conformance,  Next: Notation Used,  Prev: Standard Support,  Up: Language\n-\n-Conformance\n-===========\n-\n-   (The following information augments or overrides the information in\n-Section 1.4 of ANSI X3.9-1978 FORTRAN 77 in specifying the GNU Fortran\n-language.  Chapter 1 of that document otherwise serves as the basis for\n-the relevant aspects of GNU Fortran.)\n-\n-   The definition of the GNU Fortran language is akin to that of the\n-ANSI FORTRAN 77 language in that it does not generally require\n-conforming implementations to diagnose cases where programs do not\n-conform to the language.\n-\n-   However, `g77' as a compiler is being developed in a way that is\n-intended to enable it to diagnose such cases in an easy-to-understand\n-manner.\n-\n-   A program that conforms to the GNU Fortran language should, when\n-compiled, linked, and executed using a properly installed `g77' system,\n-perform as described by the GNU Fortran language definition.  Reasons\n-for different behavior include, among others:\n-\n-   * Use of resources (memory--heap, stack, and so on; disk space; CPU\n-     time; etc.) exceeds those of the system.\n-\n-   * Range and/or precision of calculations required by the program\n-     exceeds that of the system.\n-\n-   * Excessive reliance on behaviors that are system-dependent\n-     (non-portable Fortran code).\n-\n-   * Bugs in the program.\n-\n-   * Bug in `g77'.\n-\n-   * Bugs in the system.\n-\n-   Despite these \"loopholes\", the availability of a clear specification\n-of the language of programs submitted to `g77', as this document is\n-intended to provide, is considered an important aspect of providing a\n-robust, clean, predictable Fortran implementation.\n-\n-   The definition of the GNU Fortran language, while having no special\n-legal status, can therefore be viewed as a sort of contract, or\n-agreement.  This agreement says, in essence, \"if you write a program in\n-this language, and run it in an environment (such as a `g77' system)\n-that supports this language, the program should behave in a largely\n-predictable way\".\n-\n-\u001f\n-File: g77.info,  Node: Notation Used,  Next: Terms and Concepts,  Prev: Conformance,  Up: Language\n-\n-Notation Used in This Chapter\n-=============================\n-\n-   (The following information augments or overrides the information in\n-Section 1.5 of ANSI X3.9-1978 FORTRAN 77 in specifying the GNU Fortran\n-language.  Chapter 1 of that document otherwise serves as the basis for\n-the relevant aspects of GNU Fortran.)\n-\n-   In this chapter, \"must\" denotes a requirement, \"may\" denotes\n-permission, and \"must not\" and \"may not\" denote prohibition.  Terms\n-such as \"might\", \"should\", and \"can\" generally add little or nothing in\n-the way of weight to the GNU Fortran language itself, but are used to\n-explain or illustrate the language.\n-\n-   For example:\n-\n-     ``The `FROBNITZ' statement must precede all executable\n-     statements in a program unit, and may not specify any dummy\n-     arguments.  It may specify local or common variables and arrays.\n-     Its use should be limited to portions of the program designed to\n-     be non-portable and system-specific, because it might cause the\n-     containing program unit to behave quite differently on different\n-     systems.''\n-\n-   Insofar as the GNU Fortran language is specified, the requirements\n-and permissions denoted by the above sample statement are limited to\n-the placement of the statement and the kinds of things it may specify.\n-The rest of the statement--the content regarding non-portable portions\n-of the program and the differing behavior of program units containing\n-the `FROBNITZ' statement--does not pertain the GNU Fortran language\n-itself.  That content offers advice and warnings about the `FROBNITZ'\n-statement.\n-\n-   *Remember:* The GNU Fortran language definition specifies both what\n-constitutes a valid GNU Fortran program and how, given such a program,\n-a valid GNU Fortran implementation is to interpret that program.\n-\n-   It is *not* incumbent upon a valid GNU Fortran implementation to\n-behave in any particular way, any consistent way, or any predictable\n-way when it is asked to interpret input that is *not* a valid GNU\n-Fortran program.\n-\n-   Such input is said to have \"undefined\" behavior when interpreted by\n-a valid GNU Fortran implementation, though an implementation may choose\n-to specify behaviors for some cases of inputs that are not valid GNU\n-Fortran programs.\n-\n-   Other notation used herein is that of the GNU texinfo format, which\n-is used to generate printed hardcopy, on-line hypertext (Info), and\n-on-line HTML versions, all from a single source document.  This\n-notation is used as follows:\n-\n-   * Keywords defined by the GNU Fortran language are shown in\n-     uppercase, as in: `COMMON', `INTEGER', and `BLOCK DATA'.\n-\n-     Note that, in practice, many Fortran programs are written in\n-     lowercase--uppercase is used in this manual as a means to readily\n-     distinguish keywords and sample Fortran-related text from the\n-     prose in this document.\n-\n-   * Portions of actual sample program, input, or output text look like\n-     this: `Actual program text'.\n-\n-     Generally, uppercase is used for all Fortran-specific and\n-     Fortran-related text, though this does not always include literal\n-     text within Fortran code.\n-\n-     For example: `PRINT *, 'My name is Bob''.\n-\n-   * A metasyntactic variable--that is, a name used in this document to\n-     serve as a placeholder for whatever text is used by the user or\n-     programmer-appears as shown in the following example:\n-\n-     \"The `INTEGER IVAR' statement specifies that IVAR is a variable or\n-     array of type `INTEGER'.\"\n-\n-     In the above example, any valid text may be substituted for the\n-     metasyntactic variable IVAR to make the statement apply to a\n-     specific instance, as long as the same text is substituted for\n-     *both* occurrences of IVAR.\n-\n-   * Ellipses (\"...\") are used to indicate further text that is either\n-     unimportant or expanded upon further, elsewhere.\n-\n-   * Names of data types are in the style of Fortran 90, in most cases.\n-\n-     *Note Kind Notation::, for information on the relationship between\n-     Fortran 90 nomenclature (such as `INTEGER(KIND=1)') and the more\n-     traditional, less portably concise nomenclature (such as\n-     `INTEGER*4').\n-\n-\u001f\n-File: g77.info,  Node: Terms and Concepts,  Next: Characters Lines Sequence,  Prev: Notation Used,  Up: Language\n-\n-Fortran Terms and Concepts\n-==========================\n-\n-   (The following information augments or overrides the information in\n-Chapter 2 of ANSI X3.9-1978 FORTRAN 77 in specifying the GNU Fortran\n-language.  Chapter 2 of that document otherwise serves as the basis for\n-the relevant aspects of GNU Fortran.)\n-\n-* Menu:\n-\n-* Syntactic Items::\n-* Statements Comments Lines::\n-* Scope of Names and Labels::\n-\n-\u001f\n-File: g77.info,  Node: Syntactic Items,  Next: Statements Comments Lines,  Up: Terms and Concepts\n-\n-Syntactic Items\n----------------\n-\n-   (Corresponds to Section 2.2 of ANSI X3.9-1978 FORTRAN 77.)\n-\n-   In GNU Fortran, a symbolic name is at least one character long, and\n-has no arbitrary upper limit on length.  However, names of entities\n-requiring external linkage (such as external functions, external\n-subroutines, and `COMMON' areas) might be restricted to some arbitrary\n-length by the system.  Such a restriction is no more constrained than\n-that of one through six characters.\n-\n-   Underscores (`_') are accepted in symbol names after the first\n-character (which must be a letter).\n-\n-\u001f\n-File: g77.info,  Node: Statements Comments Lines,  Next: Scope of Names and Labels,  Prev: Syntactic Items,  Up: Terms and Concepts\n-\n-Statements, Comments, and Lines\n--------------------------------\n-\n-   (Corresponds to Section 2.3 of ANSI X3.9-1978 FORTRAN 77.)\n-\n-   Use of an exclamation point (`!') to begin a trailing comment (a\n-comment that extends to the end of the same source line) is permitted\n-under the following conditions:\n-\n-   * The exclamation point does not appear in column 6.  Otherwise, it\n-     is treated as an indicator of a continuation line.\n-\n-   * The exclamation point appears outside a character or hollerith\n-     constant.  Otherwise, the exclamation point is considered part of\n-     the constant.\n-\n-   * The exclamation point appears to the left of any other possible\n-     trailing comment.  That is, a trailing comment may contain\n-     exclamation points in their commentary text.\n-\n-   Use of a semicolon (`;') as a statement separator is permitted under\n-the following conditions:\n-\n-   * The semicolon appears outside a character or hollerith constant.\n-     Otherwise, the semicolon is considered part of the constant.\n-\n-   * The semicolon appears to the left of a trailing comment.\n-     Otherwise, the semicolon is considered part of that comment.\n-\n-   * Neither a logical `IF' statement nor a non-construct `WHERE'\n-     statement (a Fortran 90 feature) may be followed (in the same,\n-     possibly continued, line) by a semicolon used as a statement\n-     separator.\n-\n-     This restriction avoids the confusion that can result when reading\n-     a line such as:\n-\n-          IF (VALIDP) CALL FOO; CALL BAR\n-\n-     Some readers might think the `CALL BAR' is executed only if\n-     `VALIDP' is `.TRUE.', while others might assume its execution is\n-     unconditional.\n-\n-     (At present, `g77' does not diagnose code that violates this\n-     restriction.)\n-\n-\u001f\n-File: g77.info,  Node: Scope of Names and Labels,  Prev: Statements Comments Lines,  Up: Terms and Concepts\n-\n-Scope of Symbolic Names and Statement Labels\n---------------------------------------------\n-\n-   (Corresponds to Section 2.9 of ANSI X3.9-1978 FORTRAN 77.)\n-\n-   Included in the list of entities that have a scope of a program unit\n-are construct names (a Fortran 90 feature).  *Note Construct Names::,\n-for more information.\n-\n-\u001f\n-File: g77.info,  Node: Characters Lines Sequence,  Next: Data Types and Constants,  Prev: Terms and Concepts,  Up: Language\n-\n-Characters, Lines, and Execution Sequence\n-=========================================\n-\n-   (The following information augments or overrides the information in\n-Chapter 3 of ANSI X3.9-1978 FORTRAN 77 in specifying the GNU Fortran\n-language.  Chapter 3 of that document otherwise serves as the basis for\n-the relevant aspects of GNU Fortran.)\n-\n-* Menu:\n-\n-* Character Set::\n-* Lines::\n-* Continuation Line::\n-* Statements::\n-* Statement Labels::\n-* Order::\n-* INCLUDE::\n-\n-\u001f\n-File: g77.info,  Node: Character Set,  Next: Lines,  Up: Characters Lines Sequence\n-\n-GNU Fortran Character Set\n--------------------------\n-\n-   (Corresponds to Section 3.1 of ANSI X3.9-1978 FORTRAN 77.)\n-\n-   Letters include uppercase letters (the twenty-six characters of the\n-English alphabet) and lowercase letters (their lowercase equivalent).\n-Generally, lowercase letters may be used in place of uppercase letters,\n-though in character and hollerith constants, they are distinct.\n-\n-   Special characters include:\n-\n-   * Semicolon (`;')\n-\n-   * Exclamation point (`!')\n-\n-   * Double quote (`\"')\n-\n-   * Backslash (`\\')\n-\n-   * Question mark (`?')\n-\n-   * Hash mark (`#')\n-\n-   * Ampersand (`&')\n-\n-   * Percent sign (`%')\n-\n-   * Underscore (`_')\n-\n-   * Open angle (`<')\n-\n-   * Close angle (`>')\n-\n-   * The FORTRAN 77 special characters (<SPC>, `=', `+', `-', `*', `/',\n-     `(', `)', `,', `.', `$', `'', and `:')\n-\n-   Note that this document refers to <SPC> as \"space\", while X3.9-1978\n-FORTRAN 77 refers to it as \"blank\".\n-\n-\u001f\n-File: g77.info,  Node: Lines,  Next: Continuation Line,  Prev: Character Set,  Up: Characters Lines Sequence\n-\n-Lines\n------\n-\n-   (Corresponds to Section 3.2 of ANSI X3.9-1978 FORTRAN 77.)\n-\n-   The way a Fortran compiler views source files depends entirely on the\n-implementation choices made for the compiler, since those choices are\n-explicitly left to the implementation by the published Fortran\n-standards.\n-\n-   The GNU Fortran language mandates a view applicable to UNIX-like\n-text files--files that are made up of an arbitrary number of lines,\n-each with an arbitrary number of characters (sometimes called\n-stream-based files).\n-\n-   This view does not apply to types of files that are specified as\n-having a particular number of characters on every single line (sometimes\n-referred to as record-based files).\n-\n-   Because a \"line in a program unit is a sequence of 72 characters\",\n-to quote X3.9-1978, the GNU Fortran language specifies that a\n-stream-based text file is translated to GNU Fortran lines as follows:\n-\n-   * A newline in the file is the character that represents the end of\n-     a line of text to the underlying system.  For example, on\n-     ASCII-based systems, a newline is the <NL> character, which has\n-     ASCII value 12 (decimal).\n-\n-   * Each newline in the file serves to end the line of text that\n-     precedes it (and that does not contain a newline).\n-\n-   * The end-of-file marker (`EOF') also serves to end the line of text\n-     that precedes it (and that does not contain a newline).\n-\n-   * Any line of text that is shorter than 72 characters is padded to\n-     that length with spaces (called \"blanks\" in the standard).\n-\n-   * Any line of text that is longer than 72 characters is truncated to\n-     that length, but the truncated remainder must consist entirely of\n-     spaces.\n-\n-   * Characters other than newline and the GNU Fortran character set\n-     are invalid.\n-\n-   For the purposes of the remainder of this description of the GNU\n-Fortran language, the translation described above has already taken\n-place, unless otherwise specified.\n-\n-   The result of the above translation is that the source file appears,\n-in terms of the remainder of this description of the GNU Fortran\n-language, as if it had an arbitrary number of 72-character lines, each\n-character being among the GNU Fortran character set.\n-\n-   For example, if the source file itself has two newlines in a row,\n-the second newline becomes, after the above translation, a single line\n-containing 72 spaces.\n-\n-\u001f\n-File: g77.info,  Node: Continuation Line,  Next: Statements,  Prev: Lines,  Up: Characters Lines Sequence\n-\n-Continuation Line\n------------------\n-\n-   (Corresponds to Section 3.2.3 of ANSI X3.9-1978 FORTRAN 77.)\n-\n-   A continuation line is any line that both\n-\n-   * Contains a continuation character, and\n-\n-   * Contains only spaces in columns 1 through 5\n-\n-   A continuation character is any character of the GNU Fortran\n-character set other than space (<SPC>) or zero (`0') in column 6, or a\n-digit (`0' through `9') in column 7 through 72 of a line that has only\n-spaces to the left of that digit.\n-\n-   The continuation character is ignored as far as the content of the\n-statement is concerned.\n-\n-   The GNU Fortran language places no limit on the number of\n-continuation lines in a statement.  In practice, the limit depends on a\n-variety of factors, such as available memory, statement content, and so\n-on, but no GNU Fortran system may impose an arbitrary limit.\n-\n-\u001f\n-File: g77.info,  Node: Statements,  Next: Statement Labels,  Prev: Continuation Line,  Up: Characters Lines Sequence\n-\n-Statements\n-----------\n-\n-   (Corresponds to Section 3.3 of ANSI X3.9-1978 FORTRAN 77.)\n-\n-   Statements may be written using an arbitrary number of continuation\n-lines.\n-\n-   Statements may be separated using the semicolon (`;'), except that\n-the logical `IF' and non-construct `WHERE' statements may not be\n-separated from subsequent statements using only a semicolon as\n-statement separator.\n-\n-   The `END PROGRAM', `END SUBROUTINE', `END FUNCTION', and `END BLOCK\n-DATA' statements are alternatives to the `END' statement.  These\n-alternatives may be written as normal statements--they are not subject\n-to the restrictions of the `END' statement.\n-\n-   However, no statement other than `END' may have an initial line that\n-appears to be an `END' statement--even `END PROGRAM', for example, must\n-not be written as:\n-\n-           END\n-          &PROGRAM\n-\n-\u001f\n-File: g77.info,  Node: Statement Labels,  Next: Order,  Prev: Statements,  Up: Characters Lines Sequence\n-\n-Statement Labels\n-----------------\n-\n-   (Corresponds to Section 3.4 of ANSI X3.9-1978 FORTRAN 77.)\n-\n-   A statement separated from its predecessor via a semicolon may be\n-labeled as follows:\n-\n-   * The semicolon is followed by the label for the statement, which in\n-     turn follows the label.\n-\n-   * The label must be no more than five digits in length.\n-\n-   * The first digit of the label for the statement is not the first\n-     non-space character on a line.  Otherwise, that character is\n-     treated as a continuation character.\n-\n-   A statement may have only one label defined for it.\n-\n-\u001f\n-File: g77.info,  Node: Order,  Next: INCLUDE,  Prev: Statement Labels,  Up: Characters Lines Sequence\n-\n-Order of Statements and Lines\n------------------------------\n-\n-   (Corresponds to Section 3.5 of ANSI X3.9-1978 FORTRAN 77.)\n-\n-   Generally, `DATA' statements may precede executable statements.\n-However, specification statements pertaining to any entities\n-initialized by a `DATA' statement must precede that `DATA' statement.\n-For example, after `DATA I/1/', `INTEGER I' is not permitted, but\n-`INTEGER J' is permitted.\n-\n-   The last line of a program unit may be an `END' statement, or may be:\n-\n-   * An `END PROGRAM' statement, if the program unit is a main program.\n-\n-   * An `END SUBROUTINE' statement, if the program unit is a subroutine.\n-\n-   * An `END FUNCTION' statement, if the program unit is a function.\n-\n-   * An `END BLOCK DATA' statement, if the program unit is a block data.\n-\n-\u001f\n-File: g77.info,  Node: INCLUDE,  Prev: Order,  Up: Characters Lines Sequence\n-\n-Including Source Text\n----------------------\n-\n-   Additional source text may be included in the processing of the\n-source file via the `INCLUDE' directive:\n-\n-     INCLUDE FILENAME\n-\n-The source text to be included is identified by FILENAME, which is a\n-literal GNU Fortran character constant.  The meaning and interpretation\n-of FILENAME depends on the implementation, but typically is a filename.\n-\n-   (`g77' treats it as a filename that it searches for in the current\n-directory and/or directories specified via the `-I' command-line\n-option.)\n-\n-   The effect of the `INCLUDE' directive is as if the included text\n-directly replaced the directive in the source file prior to\n-interpretation of the program.  Included text may itself use `INCLUDE'.\n-The depth of nested `INCLUDE' references depends on the implementation,\n-but typically is a positive integer.\n-\n-   This virtual replacement treats the statements and `INCLUDE'\n-directives in the included text as syntactically distinct from those in\n-the including text.\n-\n-   Therefore, the first non-comment line of the included text must not\n-be a continuation line.  The included text must therefore have, after\n-the non-comment lines, either an initial line (statement), an `INCLUDE'\n-directive, or nothing (the end of the included text).\n-\n-   Similarly, the including text may end the `INCLUDE' directive with a\n-semicolon or the end of the line, but it cannot follow an `INCLUDE'\n-directive at the end of its line with a continuation line.  Thus, the\n-last statement in an included text may not be continued.\n-\n-   Any statements between two `INCLUDE' directives on the same line are\n-treated as if they appeared in between the respective included texts.\n-For example:\n-\n-     INCLUDE 'A'; PRINT *, 'B'; INCLUDE 'C'; END PROGRAM\n-\n-If the text included by `INCLUDE 'A'' constitutes a `PRINT *, 'A''\n-statement and the text included by `INCLUDE 'C'' constitutes a `PRINT\n-*, 'C'' statement, then the output of the above sample program would be\n-\n-     A\n-     B\n-     C\n-\n-(with suitable allowances for how an implementation defines its\n-handling of output).\n-\n-   Included text must not include itself directly or indirectly,\n-regardless of whether the FILENAME used to reference the text is the\n-same.\n-\n-   Note that `INCLUDE' is *not* a statement.  As such, it is neither a\n-non-executable or executable statement.  However, if the text it\n-includes constitutes one or more executable statements, then the\n-placement of `INCLUDE' is subject to effectively the same restrictions\n-as those on executable statements.\n-\n-   An `INCLUDE' directive may be continued across multiple lines as if\n-it were a statement.  This permits long names to be used for FILENAME.\n-\n-\u001f\n-File: g77.info,  Node: Data Types and Constants,  Next: Expressions,  Prev: Characters Lines Sequence,  Up: Language\n-\n-Data Types and Constants\n-========================\n-\n-   (The following information augments or overrides the information in\n-Chapter 4 of ANSI X3.9-1978 FORTRAN 77 in specifying the GNU Fortran\n-language.  Chapter 4 of that document otherwise serves as the basis for\n-the relevant aspects of GNU Fortran.)\n-\n-   To more concisely express the appropriate types for entities, this\n-document uses the more concise Fortran 90 nomenclature such as\n-`INTEGER(KIND=1)' instead of the more traditional, but less portably\n-concise, byte-size-based nomenclature such as `INTEGER*4', wherever\n-reasonable.\n-\n-   When referring to generic types--in contexts where the specific\n-precision and range of a type are not important--this document uses the\n-generic type names `INTEGER', `LOGICAL', `REAL', `COMPLEX', and\n-`CHARACTER'.\n-\n-   In some cases, the context requires specification of a particular\n-type.  This document uses the `KIND=' notation to accomplish this\n-throughout, sometimes supplying the more traditional notation for\n-clarification, though the traditional notation might not work the same\n-way on all GNU Fortran implementations.\n-\n-   Use of `KIND=' makes this document more concise because `g77' is\n-able to define values for `KIND=' that have the same meanings on all\n-systems, due to the way the Fortran 90 standard specifies these values\n-are to be used.\n-\n-   (In particular, that standard permits an implementation to\n-arbitrarily assign nonnegative values.  There are four distinct sets of\n-assignments: one to the `CHARACTER' type; one to the `INTEGER' type;\n-one to the `LOGICAL' type; and the fourth to both the `REAL' and\n-`COMPLEX' types.  Implementations are free to assign these values in\n-any order, leave gaps in the ordering of assignments, and assign more\n-than one value to a representation.)\n-\n-   This makes `KIND=' values superior to the values used in\n-non-standard statements such as `INTEGER*4', because the meanings of\n-the values in those statements vary from machine to machine, compiler\n-to compiler, even operating system to operating system.\n-\n-   However, use of `KIND=' is *not* generally recommended when writing\n-portable code (unless, for example, the code is going to be compiled\n-only via `g77', which is a widely ported compiler).  GNU Fortran does\n-not yet have adequate language constructs to permit use of `KIND=' in a\n-fashion that would make the code portable to Fortran 90\n-implementations; and, this construct is known to *not* be accepted by\n-many popular FORTRAN 77 implementations, so it cannot be used in code\n-that is to be ported to those.\n-\n-   The distinction here is that this document is able to use specific\n-values for `KIND=' to concisely document the types of various\n-operations and operands.\n-\n-   A Fortran program should use the FORTRAN 77 designations for the\n-appropriate GNU Fortran types--such as `INTEGER' for `INTEGER(KIND=1)',\n-`REAL' for `REAL(KIND=1)', and `DOUBLE COMPLEX' for\n-`COMPLEX(KIND=2)'--and, where no such designations exist, make use of\n-appropriate techniques (preprocessor macros, parameters, and so on) to\n-specify the types in a fashion that may be easily adjusted to suit each\n-particular implementation to which the program is ported.  (These types\n-generally won't need to be adjusted for ports of `g77'.)\n-\n-   Further details regarding GNU Fortran data types and constants are\n-provided below.\n-\n-* Menu:\n-\n-* Types::\n-* Constants::\n-* Integer Type::\n-* Character Type::\n-\n-\u001f\n-File: g77.info,  Node: Types,  Next: Constants,  Up: Data Types and Constants\n-\n-Data Types\n-----------\n-\n-   (Corresponds to Section 4.1 of ANSI X3.9-1978 FORTRAN 77.)\n-\n-   GNU Fortran supports these types:\n-\n-  1. Integer (generic type `INTEGER')\n-\n-  2. Real (generic type `REAL')\n-\n-  3. Double precision\n-\n-  4. Complex (generic type `COMPLEX')\n-\n-  5. Logical (generic type `LOGICAL')\n-\n-  6. Character (generic type `CHARACTER')\n-\n-  7. Double Complex\n-\n-   (The types numbered 1 through 6 above are standard FORTRAN 77 types.)\n-\n-   The generic types shown above are referred to in this document using\n-only their generic type names.  Such references usually indicate that\n-any specific type (kind) of that generic type is valid.\n-\n-   For example, a context described in this document as accepting the\n-`COMPLEX' type also is likely to accept the `DOUBLE COMPLEX' type.\n-\n-   The GNU Fortran language supports three ways to specify a specific\n-kind of a generic type.\n-\n-* Menu:\n-\n-* Double Notation::  As in `DOUBLE COMPLEX'.\n-* Star Notation::    As in `INTEGER*4'.\n-* Kind Notation::    As in `INTEGER(KIND=1)'.\n-"}, {"sha": "f77f935683e63b110de8a589e294c75b4c749924", "filename": "gcc/f/g77.info-6", "status": "removed", "additions": 0, "deletions": 1131, "changes": 1131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-6?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2", "patch": "@@ -1,1131 +0,0 @@\n-This is Info file g77.info, produced by Makeinfo version 1.68 from the\n-input file g77.texi.\n-\n-   This file explains how to use the GNU Fortran system.\n-\n-   Published by the Free Software Foundation 59 Temple Place - Suite 330\n-Boston, MA 02111-1307 USA\n-\n-   Copyright (C) 1995-1997 Free Software Foundation, Inc.\n-\n-   Permission is granted to make and distribute verbatim copies of this\n-manual provided the copyright notice and this permission notice are\n-preserved on all copies.\n-\n-   Permission is granted to copy and distribute modified versions of\n-this manual under the conditions for verbatim copying, provided also\n-that the sections entitled \"GNU General Public License,\" \"Funding for\n-Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n-included exactly as in the original, and provided that the entire\n-resulting derived work is distributed under the terms of a permission\n-notice identical to this one.\n-\n-   Permission is granted to copy and distribute translations of this\n-manual into another language, under the above conditions for modified\n-versions, except that the sections entitled \"GNU General Public\n-License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n-`Look And Feel'\", and this permission notice, may be included in\n-translations approved by the Free Software Foundation instead of in the\n-original English.\n-\n-   Contributed by James Craig Burley (<burley@gnu.ai.mit.edu>).\n-Inspired by a first pass at translating `g77-0.5.16/f/DOC' that was\n-contributed to Craig by David Ronis (<ronis@onsager.chem.mcgill.ca>).\n-\n-INFO-DIR-SECTION Fortran Programming\n-START-INFO-DIR-ENTRY\n-* g77: (g77).               The GNU Fortran compilation system.\n-END-INFO-DIR-ENTRY\n-\n-\u001f\n-File: g77.info,  Node: Double Notation,  Next: Star Notation,  Up: Types\n-\n-Double Notation\n-...............\n-\n-   The GNU Fortran language supports two uses of the keyword `DOUBLE'\n-to specify a specific kind of type:\n-\n-   * `DOUBLE PRECISION', equivalent to `REAL(KIND=2)'\n-\n-   * `DOUBLE COMPLEX', equivalent to `COMPLEX(KIND=2)'\n-\n-   Use one of the above forms where a type name is valid.\n-\n-   While use of this notation is popular, it doesn't scale well in a\n-language or dialect rich in intrinsic types, as is the case for the GNU\n-Fortran language (especially planned future versions of it).\n-\n-   After all, one rarely sees type names such as `DOUBLE INTEGER',\n-`QUADRUPLE REAL', or `QUARTER INTEGER'.  Instead, `INTEGER*8',\n-`REAL*16', and `INTEGER*1' often are substituted for these,\n-respectively, even though they do not always have the same meanings on\n-all systems.  (And, the fact that `DOUBLE REAL' does not exist as such\n-is an inconsistency.)\n-\n-   Therefore, this document uses \"double notation\" only on occasion for\n-the benefit of those readers who are accustomed to it.\n-\n-\u001f\n-File: g77.info,  Node: Star Notation,  Next: Kind Notation,  Prev: Double Notation,  Up: Types\n-\n-Star Notation\n-.............\n-\n-   The following notation specifies the storage size for a type:\n-\n-     GENERIC-TYPE*N\n-\n-GENERIC-TYPE must be a generic type--one of `INTEGER', `REAL',\n-`COMPLEX', `LOGICAL', or `CHARACTER'.  N must be one or more digits\n-comprising a decimal integer number greater than zero.\n-\n-   Use the above form where a type name is valid.\n-\n-   The `*N' notation specifies that the amount of storage occupied by\n-variables and array elements of that type is N times the storage\n-occupied by a `CHARACTER*1' variable.\n-\n-   This notation might indicate a different degree of precision and/or\n-range for such variables and array elements, and the functions that\n-return values of types using this notation.  It does not limit the\n-precision or range of values of that type in any particular way--use\n-explicit code to do that.\n-\n-   Further, the GNU Fortran language requires no particular values for\n-N to be supported by an implementation via the `*N' notation.  `g77'\n-supports `INTEGER*1' (as `INTEGER(KIND=3)') on all systems, for example,\n-but not all implementations are required to do so, and `g77' is known\n-to not support `REAL*1' on most (or all) systems.\n-\n-   As a result, except for GENERIC-TYPE of `CHARACTER', uses of this\n-notation should be limited to isolated portions of a program that are\n-intended to handle system-specific tasks and are expected to be\n-non-portable.\n-\n-   (Standard FORTRAN 77 supports the `*N' notation for only\n-`CHARACTER', where it signifies not only the amount of storage\n-occupied, but the number of characters in entities of that type.\n-However, almost all Fortran compilers have supported this notation for\n-generic types, though with a variety of meanings for N.)\n-\n-   Specifications of types using the `*N' notation always are\n-interpreted as specifications of the appropriate types described in\n-this document using the `KIND=N' notation, described below.\n-\n-   While use of this notation is popular, it doesn't serve well in the\n-context of a widely portable dialect of Fortran, such as the GNU\n-Fortran language.\n-\n-   For example, even on one particular machine, two or more popular\n-Fortran compilers might well disagree on the size of a type declared\n-`INTEGER*2' or `REAL*16'.  Certainly there is known to be disagreement\n-over such things among Fortran compilers on *different* systems.\n-\n-   Further, this notation offers no elegant way to specify sizes that\n-are not even multiples of the \"byte size\" typically designated by\n-`INTEGER*1'.  Use of \"absurd\" values (such as `INTEGER*1000') would\n-certainly be possible, but would perhaps be stretching the original\n-intent of this notation beyond the breaking point in terms of\n-widespread readability of documentation and code making use of it.\n-\n-   Therefore, this document uses \"star notation\" only on occasion for\n-the benefit of those readers who are accustomed to it.\n-\n-\u001f\n-File: g77.info,  Node: Kind Notation,  Prev: Star Notation,  Up: Types\n-\n-Kind Notation\n-.............\n-\n-   The following notation specifies the kind-type selector of a type:\n-\n-     GENERIC-TYPE(KIND=N)\n-\n-Use the above form where a type name is valid.\n-\n-   GENERIC-TYPE must be a generic type--one of `INTEGER', `REAL',\n-`COMPLEX', `LOGICAL', or `CHARACTER'.  N must be an integer\n-initialization expression that is a positive, nonzero value.\n-\n-   Programmers are discouraged from writing these values directly into\n-their code.  Future versions of the GNU Fortran language will offer\n-facilities that will make the writing of code portable to `g77' *and*\n-Fortran 90 implementations simpler.\n-\n-   However, writing code that ports to existing FORTRAN 77\n-implementations depends on avoiding the `KIND=' construct.\n-\n-   The `KIND=' construct is thus useful in the context of GNU Fortran\n-for two reasons:\n-\n-   * It provides a means to specify a type in a fashion that is\n-     portable across all GNU Fortran implementations (though not other\n-     FORTRAN 77 and Fortran 90 implementations).\n-\n-   * It provides a sort of Rosetta stone for this document to use to\n-     concisely describe the types of various operations and operands.\n-\n-   The values of N in the GNU Fortran language are assigned using a\n-scheme that:\n-\n-   * Attempts to maximize the ability of readers of this document to\n-     quickly familiarize themselves with assignments for popular types\n-\n-   * Provides a unique value for each specific desired meaning\n-\n-   * Provides a means to automatically assign new values so they have a\n-     \"natural\" relationship to existing values, if appropriate, or, if\n-     no such relationship exists, will not interfere with future values\n-     assigned on the basis of such relationships\n-\n-   * Avoids using values that are similar to values used in the\n-     existing, popular `*N' notation, to prevent readers from expecting\n-     that these implied correspondences work on all GNU Fortran\n-     implementations\n-\n-   The assignment system accomplishes this by assigning to each\n-\"fundamental meaning\" of a specific type a unique prime number.\n-Combinations of fundamental meanings--for example, a type that is two\n-times the size of some other type--are assigned values of N that are\n-the products of the values for those fundamental meanings.\n-\n-   A prime value of N is never given more than one fundamental meaning,\n-to avoid situations where some code or system cannot reasonably provide\n-those meanings in the form of a single type.\n-\n-   The values of N assigned so far are:\n-\n-`KIND=0'\n-     This value is reserved for future use.\n-\n-     The planned future use is for this value to designate, explicitly,\n-     context-sensitive kind-type selection.  For example, the\n-     expression `1D0 * 0.1_0' would be equivalent to `1D0 * 0.1D0'.\n-\n-`KIND=1'\n-     This corresponds to the default types for `REAL', `INTEGER',\n-     `LOGICAL', `COMPLEX', and `CHARACTER', as appropriate.\n-\n-     These are the \"default\" types described in the Fortran 90 standard,\n-     though that standard does not assign any particular `KIND=' value\n-     to these types.\n-\n-     (Typically, these are `REAL*4', `INTEGER*4', `LOGICAL*4', and\n-     `COMPLEX*8'.)\n-\n-`KIND=2'\n-     This corresponds to types that occupy twice as much storage as the\n-     default types.  `REAL(KIND=2)' is `DOUBLE PRECISION' (typically\n-     `REAL*8'), `COMPLEX(KIND=2)' is `DOUBLE COMPLEX' (typically\n-     `COMPLEX*16'),\n-\n-     These are the \"double precision\" types described in the Fortran 90\n-     standard, though that standard does not assign any particular\n-     `KIND=' value to these types.\n-\n-     N of 4 thus corresponds to types that occupy four times as much\n-     storage as the default types, N of 8 to types that occupy eight\n-     times as much storage, and so on.\n-\n-     The `INTEGER(KIND=2)' and `LOGICAL(KIND=2)' types are not\n-     necessarily supported by every GNU Fortran implementation.\n-\n-`KIND=3'\n-     This corresponds to types that occupy as much storage as the\n-     default `CHARACTER' type, which is the same effective type as\n-     `CHARACTER(KIND=1)' (making that type effectively the same as\n-     `CHARACTER(KIND=3)').\n-\n-     (Typically, these are `INTEGER*1' and `LOGICAL*1'.)\n-\n-     N of 6 thus corresponds to types that occupy twice as much storage\n-     as the N=3 types, N of 12 to types that occupy four times as much\n-     storage, and so on.\n-\n-     These are not necessarily supported by every GNU Fortran\n-     implementation.\n-\n-`KIND=5'\n-     This corresponds to types that occupy half the storage as the\n-     default (N=1) types.\n-\n-     (Typically, these are `INTEGER*2' and `LOGICAL*2'.)\n-\n-     N of 25 thus corresponds to types that occupy one-quarter as much\n-     storage as the default types.\n-\n-     These are not necessarily supported by every GNU Fortran\n-     implementation.\n-\n-`KIND=7'\n-     This is valid only as `INTEGER(KIND=7)' and denotes the `INTEGER'\n-     type that has the smallest storage size that holds a pointer on\n-     the system.\n-\n-     A pointer representable by this type is capable of uniquely\n-     addressing a `CHARACTER*1' variable, array, array element, or\n-     substring.\n-\n-     (Typically this is equivalent to `INTEGER*4' or, on 64-bit\n-     systems, `INTEGER*8'.  In a compatible C implementation, it\n-     typically would be the same size and semantics of the C type `void\n-     *'.)\n-\n-   Note that these are *proposed* correspondences and might change in\n-future versions of `g77'--avoid writing code depending on them while\n-`g77', and therefore the GNU Fortran language it defines, is in beta\n-testing.\n-\n-   Values not specified in the above list are reserved to future\n-versions of the GNU Fortran language.\n-\n-   Implementation-dependent meanings will be assigned new, unique prime\n-numbers so as to not interfere with other implementation-dependent\n-meanings, and offer the possibility of increasing the portability of\n-code depending on such types by offering support for them in other GNU\n-Fortran implementations.\n-\n-   Other meanings that might be given unique values are:\n-\n-   * Types that make use of only half their storage size for\n-     representing precision and range.\n-\n-     For example, some compilers offer options that cause `INTEGER'\n-     types to occupy the amount of storage that would be needed for\n-     `INTEGER(KIND=2)' types, but the range remains that of\n-     `INTEGER(KIND=1)'.\n-\n-   * The IEEE single floating-point type.\n-\n-   * Types with a specific bit pattern (endianness), such as the\n-     little-endian form of `INTEGER(KIND=1)'.  These could permit,\n-     conceptually, use of portable code and implementations on data\n-     files written by existing systems.\n-\n-   Future *prime* numbers should be given meanings in as incremental a\n-fashion as possible, to allow for flexibility and expressiveness in\n-combining types.\n-\n-   For example, instead of defining a prime number for little-endian\n-IEEE doubles, one prime number might be assigned the meaning\n-\"little-endian\", another the meaning \"IEEE double\", and the value of N\n-for a little-endian IEEE double would thus naturally be the product of\n-those two respective assigned values.  (It could even be reasonable to\n-have IEEE values result from the products of prime values denoting\n-exponent and fraction sizes and meanings, hidden bit usage,\n-availability and representations of special values such as subnormals,\n-infinities, and Not-A-Numbers (NaNs), and so on.)\n-\n-   This assignment mechanism, while not inherently required for future\n-versions of the GNU Fortran language, is worth using because it could\n-ease management of the \"space\" of supported types much easier in the\n-long run.\n-\n-   The above approach suggests a mechanism for specifying inheritance\n-of intrinsic (built-in) types for an entire, widely portable product\n-line.  It is certainly reasonable that, unlike programmers of other\n-languages offering inheritance mechanisms that employ verbose names for\n-classes and subclasses, along with graphical browsers to elucidate the\n-relationships, Fortran programmers would employ a mechanism that works\n-by multiplying prime numbers together and finding the prime factors of\n-such products.\n-\n-   Most of the advantages for the above scheme have been explained\n-above.  One disadvantage is that it could lead to the defining, by the\n-GNU Fortran language, of some fairly large prime numbers.  This could\n-lead to the GNU Fortran language being declared \"munitions\" by the\n-United States Department of Defense.\n-\n-\u001f\n-File: g77.info,  Node: Constants,  Next: Integer Type,  Prev: Types,  Up: Data Types and Constants\n-\n-Constants\n----------\n-\n-   (Corresponds to Section 4.2 of ANSI X3.9-1978 FORTRAN 77.)\n-\n-   A \"typeless constant\" has one of the following forms:\n-\n-     'BINARY-DIGITS'B\n-     'OCTAL-DIGITS'O\n-     'HEXADECIMAL-DIGITS'Z\n-     'HEXADECIMAL-DIGITS'X\n-\n-BINARY-DIGITS, OCTAL-DIGITS, and HEXADECIMAL-DIGITS are nonempty\n-strings of characters in the set `01', `01234567', and\n-`0123456789ABCDEFabcdef', respectively.  (The value for `A' (and `a')\n-is 10, for `B' and `b' is 11, and so on.)\n-\n-   Typeless constants have values that depend on the context in which\n-they are used.\n-\n-   All other constants, called \"typed constants\", are\n-interpreted--converted to internal form--according to their inherent\n-type.  Thus, context is *never* a determining factor for the type, and\n-hence the interpretation, of a typed constant.  (All constants in the\n-ANSI FORTRAN 77 language are typed constants.)\n-\n-   For example, `1' is always type `INTEGER(KIND=1)' in GNU Fortran\n-(called default INTEGER in Fortran 90), `9.435784839284958' is always\n-type `REAL(KIND=1)' (even if the additional precision specified is\n-lost, and even when used in a `REAL(KIND=2)' context), `1E0' is always\n-type `REAL(KIND=2)', and `1D0' is always type `REAL(KIND=2)'.\n-\n-\u001f\n-File: g77.info,  Node: Integer Type,  Next: Character Type,  Prev: Constants,  Up: Data Types and Constants\n-\n-Integer Type\n-------------\n-\n-   (Corresponds to Section 4.3 of ANSI X3.9-1978 FORTRAN 77.)\n-\n-   An integer constant also may have one of the following forms:\n-\n-     B'BINARY-DIGITS'\n-     O'OCTAL-DIGITS'\n-     Z'HEXADECIMAL-DIGITS'\n-     X'HEXADECIMAL-DIGITS'\n-\n-BINARY-DIGITS, OCTAL-DIGITS, and HEXADECIMAL-DIGITS are nonempty\n-strings of characters in the set `01', `01234567', and\n-`0123456789ABCDEFabcdef', respectively.  (The value for `A' (and `a')\n-is 10, for `B' and `b' is 11, and so on.)\n-\n-\u001f\n-File: g77.info,  Node: Character Type,  Prev: Integer Type,  Up: Data Types and Constants\n-\n-Character Type\n---------------\n-\n-   (Corresponds to Section 4.8 of ANSI X3.9-1978 FORTRAN 77.)\n-\n-   A character constant may be delimited by a pair of double quotes\n-(`\"') instead of apostrophes.  In this case, an apostrophe within the\n-constant represents a single apostrophe, while a double quote is\n-represented in the source text of the constant by two consecutive double\n-quotes with no intervening spaces.\n-\n-   A character constant may be empty (have a length of zero).\n-\n-   A character constant may include a substring specification, The\n-value of such a constant is the value of the substring--for example,\n-the value of `'hello'(3:5)' is the same as the value of `'llo''.\n-\n-\u001f\n-File: g77.info,  Node: Expressions,  Next: Specification Statements,  Prev: Data Types and Constants,  Up: Language\n-\n-Expressions\n-===========\n-\n-   (The following information augments or overrides the information in\n-Chapter 6 of ANSI X3.9-1978 FORTRAN 77 in specifying the GNU Fortran\n-language.  Chapter 6 of that document otherwise serves as the basis for\n-the relevant aspects of GNU Fortran.)\n-\n-* Menu:\n-\n-* %LOC()::\n-\n-\u001f\n-File: g77.info,  Node: %LOC(),  Up: Expressions\n-\n-The `%LOC()' Construct\n-----------------------\n-\n-     %LOC(ARG)\n-\n-   The `%LOC()' construct is an expression that yields the value of the\n-location of its argument, ARG, in memory.  The size of the type of the\n-expression depends on the system--typically, it is equivalent to either\n-`INTEGER(KIND=1)' or `INTEGER(KIND=2)', though it is actually type\n-`INTEGER(KIND=7)'.\n-\n-   The argument to `%LOC()' must be suitable as the left-hand side of\n-an assignment statement.  That is, it may not be a general expression\n-involving operators such as addition, subtraction, and so on, nor may\n-it be a constant.\n-\n-   Use of `%LOC()' is recommended only for code that is accessing\n-facilities outside of GNU Fortran, such as operating system or\n-windowing facilities.  It is best to constrain such uses to isolated\n-portions of a program--portions that deal specifically and exclusively\n-with low-level, system-dependent facilities.  Such portions might well\n-provide a portable interface for use by the program as a whole, but are\n-themselves not portable, and should be thoroughly tested each time they\n-are rebuilt using a new compiler or version of a compiler.\n-\n-   Do not depend on `%LOC()' returning a pointer that can be safely\n-used to *define* (change) the argument.  While this might work in some\n-circumstances, it is hard to predict whether it will continue to work\n-when a program (that works using this unsafe behavior) is recompiled\n-using different command-line options or a different version of `g77'.\n-\n-   Generally, `%LOC()' is safe when used as an argument to a procedure\n-that makes use of the value of the corresponding dummy argument only\n-during its activation, and only when such use is restricted to\n-referencing (reading) the value of the argument to `%LOC()'.\n-\n-   *Implementation Note:* Currently, `g77' passes arguments (those not\n-passed using a construct such as `%VAL()') by reference or descriptor,\n-depending on the type of the actual argument.  Thus, given `INTEGER I',\n-`CALL FOO(I)' would seem to mean the same thing as `CALL FOO(%LOC(I))',\n-and in fact might compile to identical code.\n-\n-   However, `CALL FOO(%LOC(I))' emphatically means \"pass the address of\n-`I' in memory\".  While `CALL FOO(I)' might use that same approach in a\n-particular version of `g77', another version or compiler might choose a\n-different implementation, such as copy-in/copy-out, to effect the\n-desired behavior--and which will therefore not necessarily compile to\n-the same code as would `CALL FOO(%LOC(I))' using the same version or\n-compiler.\n-\n-   *Note Debugging and Interfacing::, for detailed information on how\n-this particular version of `g77' implements various constructs.\n-\n-\u001f\n-File: g77.info,  Node: Specification Statements,  Next: Control Statements,  Prev: Expressions,  Up: Language\n-\n-Specification Statements\n-========================\n-\n-   (The following information augments or overrides the information in\n-Chapter 8 of ANSI X3.9-1978 FORTRAN 77 in specifying the GNU Fortran\n-language.  Chapter 8 of that document otherwise serves as the basis for\n-the relevant aspects of GNU Fortran.)\n-\n-* Menu:\n-\n-* NAMELIST::\n-* DOUBLE COMPLEX::\n-\n-\u001f\n-File: g77.info,  Node: NAMELIST,  Next: DOUBLE COMPLEX,  Up: Specification Statements\n-\n-`NAMELIST' Statement\n---------------------\n-\n-   The `NAMELIST' statement, and related I/O constructs, are supported\n-by the GNU Fortran language in essentially the same way as they are by\n-`f2c'.\n-\n-\u001f\n-File: g77.info,  Node: DOUBLE COMPLEX,  Prev: NAMELIST,  Up: Specification Statements\n-\n-`DOUBLE COMPLEX' Statement\n---------------------------\n-\n-   `DOUBLE COMPLEX' is a type-statement (and type) that specifies the\n-type `COMPLEX(KIND=2)' in GNU Fortran.\n-\n-\u001f\n-File: g77.info,  Node: Control Statements,  Next: Functions and Subroutines,  Prev: Specification Statements,  Up: Language\n-\n-Control Statements\n-==================\n-\n-   (The following information augments or overrides the information in\n-Chapter 11 of ANSI X3.9-1978 FORTRAN 77 in specifying the GNU Fortran\n-language.  Chapter 11 of that document otherwise serves as the basis\n-for the relevant aspects of GNU Fortran.)\n-\n-* Menu:\n-\n-* DO WHILE::\n-* END DO::\n-* Construct Names::\n-* CYCLE and EXIT::\n-\n-\u001f\n-File: g77.info,  Node: DO WHILE,  Next: END DO,  Up: Control Statements\n-\n-DO WHILE\n---------\n-\n-   The `DO WHILE' statement, a feature of both the MIL-STD 1753 and\n-Fortran 90 standards, is provided by the GNU Fortran language.\n-\n-\u001f\n-File: g77.info,  Node: END DO,  Next: Construct Names,  Prev: DO WHILE,  Up: Control Statements\n-\n-END DO\n-------\n-\n-   The `END DO' statement is provided by the GNU Fortran language.\n-\n-   This statement is used in one of two ways:\n-\n-   * The Fortran 90 meaning, in which it specifies the termination\n-     point of a single `DO' loop started with a `DO' statement that\n-     specifies no termination label.\n-\n-   * The MIL-STD 1753 meaning, in which it specifies the termination\n-     point of one or more `DO' loops, all of which start with a `DO'\n-     statement that specify the label defined for the `END DO'\n-     statement.\n-\n-     This kind of `END DO' statement is merely a synonym for\n-     `CONTINUE', except it is permitted only when the statement is\n-     labeled and a target of one or more labeled `DO' loops.\n-\n-     It is expected that this use of `END DO' will be removed from the\n-     GNU Fortran language in the future, though it is likely that it\n-     will long be supported by `g77' as a dialect form.\n-\n-\u001f\n-File: g77.info,  Node: Construct Names,  Next: CYCLE and EXIT,  Prev: END DO,  Up: Control Statements\n-\n-Construct Names\n----------------\n-\n-   The GNU Fortran language supports construct names as defined by the\n-Fortran 90 standard.  These names are local to the program unit and are\n-defined as follows:\n-\n-     CONSTRUCT-NAME: BLOCK-STATEMENT\n-\n-Here, CONSTRUCT-NAME is the construct name itself; its definition is\n-connoted by the single colon (`:'); and BLOCK-STATEMENT is an `IF',\n-`DO', or `SELECT CASE' statement that begins a block.\n-\n-   A block that is given a construct name must also specify the same\n-construct name in its termination statement:\n-\n-     END BLOCK CONSTRUCT-NAME\n-\n-Here, BLOCK must be `IF', `DO', or `SELECT', as appropriate.\n-\n-\u001f\n-File: g77.info,  Node: CYCLE and EXIT,  Prev: Construct Names,  Up: Control Statements\n-\n-The `CYCLE' and `EXIT' Statements\n----------------------------------\n-\n-   The `CYCLE' and `EXIT' statements specify that the remaining\n-statements in the current iteration of a particular active (enclosing)\n-`DO' loop are to be skipped.\n-\n-   `CYCLE' specifies that these statements are skipped, but the `END\n-DO' statement that marks the end of the `DO' loop be executed--that is,\n-the next iteration, if any, is to be started.  If the statement marking\n-the end of the `DO' loop is not `END DO'--in other words, if the loop\n-is not a block `DO'--the `CYCLE' statement does not execute that\n-statement, but does start the next iteration (if any).\n-\n-   `EXIT' specifies that the loop specified by the `DO' construct is\n-terminated.\n-\n-   The `DO' loop affected by `CYCLE' and `EXIT' is the innermost\n-enclosing `DO' loop when the following forms are used:\n-\n-     CYCLE\n-     EXIT\n-\n-   Otherwise, the following forms specify the construct name of the\n-pertinent `DO' loop:\n-\n-     CYCLE CONSTRUCT-NAME\n-     EXIT CONSTRUCT-NAME\n-\n-   `CYCLE' and `EXIT' can be viewed as glorified `GO TO' statements.\n-However, they cannot be easily thought of as `GO TO' statements in\n-obscure cases involving FORTRAN 77 loops.  For example:\n-\n-           DO 10 I = 1, 5\n-           DO 10 J = 1, 5\n-              IF (J .EQ. 5) EXIT\n-           DO 10 K = 1, 5\n-              IF (K .EQ. 3) CYCLE\n-     10    PRINT *, 'I=', I, ' J=', J, ' K=', K\n-     20    CONTINUE\n-\n-In particular, neither the `EXIT' nor `CYCLE' statements above are\n-equivalent to a `GO TO' statement to either label `10' or `20'.\n-\n-   To understand the effect of `CYCLE' and `EXIT' in the above\n-fragment, it is helpful to first translate it to its equivalent using\n-only block `DO' loops:\n-\n-           DO I = 1, 5\n-              DO J = 1, 5\n-                 IF (J .EQ. 5) EXIT\n-                 DO K = 1, 5\n-                    IF (K .EQ. 3) CYCLE\n-     10             PRINT *, 'I=', I, ' J=', J, ' K=', K\n-                 END DO\n-              END DO\n-           END DO\n-     20    CONTINUE\n-\n-   Adding new labels allows translation of `CYCLE' and `EXIT' to `GO\n-TO' so they may be more easily understood by programmers accustomed to\n-FORTRAN coding:\n-\n-           DO I = 1, 5\n-              DO J = 1, 5\n-                 IF (J .EQ. 5) GOTO 18\n-                 DO K = 1, 5\n-                    IF (K .EQ. 3) GO TO 12\n-     10             PRINT *, 'I=', I, ' J=', J, ' K=', K\n-     12          END DO\n-              END DO\n-     18    END DO\n-     20    CONTINUE\n-\n-Thus, the `CYCLE' statement in the innermost loop skips over the\n-`PRINT' statement as it begins the next iteration of the loop, while\n-the `EXIT' statement in the middle loop ends that loop but *not* the\n-outermost loop.\n-\n-\u001f\n-File: g77.info,  Node: Functions and Subroutines,  Next: Scope and Classes of Names,  Prev: Control Statements,  Up: Language\n-\n-Functions and Subroutines\n-=========================\n-\n-   (The following information augments or overrides the information in\n-Chapter 15 of ANSI X3.9-1978 FORTRAN 77 in specifying the GNU Fortran\n-language.  Chapter 15 of that document otherwise serves as the basis\n-for the relevant aspects of GNU Fortran.)\n-\n-* Menu:\n-\n-* %VAL()::\n-* %REF()::\n-* %DESCR()::\n-* Generics and Specifics::\n-* REAL() and AIMAG() of Complex::\n-* CMPLX() of DOUBLE PRECISION::\n-* MIL-STD 1753::\n-* f77/f2c Intrinsics::\n-* Table of Intrinsic Functions::\n-\n-\u001f\n-File: g77.info,  Node: %VAL(),  Next: %REF(),  Up: Functions and Subroutines\n-\n-The `%VAL()' Construct\n-----------------------\n-\n-     %VAL(ARG)\n-\n-   The `%VAL()' construct specifies that an argument, ARG, is to be\n-passed by value, instead of by reference or descriptor.\n-\n-   `%VAL()' is restricted to actual arguments in invocations of\n-external procedures.\n-\n-   Use of `%VAL()' is recommended only for code that is accessing\n-facilities outside of GNU Fortran, such as operating system or\n-windowing facilities.  It is best to constrain such uses to isolated\n-portions of a program--portions the deal specifically and exclusively\n-with low-level, system-dependent facilities.  Such portions might well\n-provide a portable interface for use by the program as a whole, but are\n-themselves not portable, and should be thoroughly tested each time they\n-are rebuilt using a new compiler or version of a compiler.\n-\n-   *Implementation Note:* Currently, `g77' passes all arguments either\n-by reference or by descriptor.\n-\n-   Thus, use of `%VAL()' tends to be restricted to cases where the\n-called procedure is written in a language other than Fortran that\n-supports call-by-value semantics.  (C is an example of such a language.)\n-\n-   *Note Procedures (SUBROUTINE and FUNCTION): Procedures, for detailed\n-information on how this particular version of `g77' passes arguments to\n-procedures.\n-\n-\u001f\n-File: g77.info,  Node: %REF(),  Next: %DESCR(),  Prev: %VAL(),  Up: Functions and Subroutines\n-\n-The `%REF()' Construct\n-----------------------\n-\n-     %REF(ARG)\n-\n-   The `%REF()' construct specifies that an argument, ARG, is to be\n-passed by reference, instead of by value or descriptor.\n-\n-   `%REF()' is restricted to actual arguments in invocations of\n-external procedures.\n-\n-   Use of `%REF()' is recommended only for code that is accessing\n-facilities outside of GNU Fortran, such as operating system or\n-windowing facilities.  It is best to constrain such uses to isolated\n-portions of a program--portions the deal specifically and exclusively\n-with low-level, system-dependent facilities.  Such portions might well\n-provide a portable interface for use by the program as a whole, but are\n-themselves not portable, and should be thoroughly tested each time they\n-are rebuilt using a new compiler or version of a compiler.\n-\n-   Do not depend on `%REF()' supplying a pointer to the procedure being\n-invoked.  While that is a likely implementation choice, other\n-implementation choices are available that preserve Fortran\n-pass-by-reference semantics without passing a pointer to the argument,\n-ARG.  (For example, a copy-in/copy-out implementation.)\n-\n-   *Implementation Note:* Currently, `g77' passes all arguments (other\n-than variables and arrays of type `CHARACTER') by reference.  Future\n-versions of, or dialects supported by, `g77' might not pass `CHARACTER'\n-functions by reference.\n-\n-   Thus, use of `%REF()' tends to be restricted to cases where ARG is\n-type `CHARACTER' but the called procedure accesses it via a means other\n-than the method used for Fortran `CHARACTER' arguments.\n-\n-   *Note Procedures (SUBROUTINE and FUNCTION): Procedures, for detailed\n-information on how this particular version of `g77' passes arguments to\n-procedures.\n-\n-\u001f\n-File: g77.info,  Node: %DESCR(),  Next: Generics and Specifics,  Prev: %REF(),  Up: Functions and Subroutines\n-\n-The `%DESCR()' Construct\n-------------------------\n-\n-     %DESCR(ARG)\n-\n-   The `%DESCR()' construct specifies that an argument, ARG, is to be\n-passed by descriptor, instead of by value or reference.\n-\n-   `%DESCR()' is restricted to actual arguments in invocations of\n-external procedures.\n-\n-   Use of `%DESCR()' is recommended only for code that is accessing\n-facilities outside of GNU Fortran, such as operating system or\n-windowing facilities.  It is best to constrain such uses to isolated\n-portions of a program--portions the deal specifically and exclusively\n-with low-level, system-dependent facilities.  Such portions might well\n-provide a portable interface for use by the program as a whole, but are\n-themselves not portable, and should be thoroughly tested each time they\n-are rebuilt using a new compiler or version of a compiler.\n-\n-   Do not depend on `%DESCR()' supplying a pointer and/or a length\n-passed by value to the procedure being invoked.  While that is a likely\n-implementation choice, other implementation choices are available that\n-preserve the pass-by-reference semantics without passing a pointer to\n-the argument, ARG.  (For example, a copy-in/copy-out implementation.)\n-And, future versions of `g77' might change the way descriptors are\n-implemented, such as passing a single argument pointing to a record\n-containing the pointer/length information instead of passing that same\n-information via two arguments as it currently does.\n-\n-   *Implementation Note:* Currently, `g77' passes all variables and\n-arrays of type `CHARACTER' by descriptor.  Future versions of, or\n-dialects supported by, `g77' might pass `CHARACTER' functions by\n-descriptor as well.\n-\n-   Thus, use of `%DESCR()' tends to be restricted to cases where ARG is\n-not type `CHARACTER' but the called procedure accesses it via a means\n-similar to the method used for Fortran `CHARACTER' arguments.\n-\n-   *Note Procedures (SUBROUTINE and FUNCTION): Procedures, for detailed\n-information on how this particular version of `g77' passes arguments to\n-procedures.\n-\n-\u001f\n-File: g77.info,  Node: Generics and Specifics,  Next: REAL() and AIMAG() of Complex,  Prev: %DESCR(),  Up: Functions and Subroutines\n-\n-Generics and Specifics\n-----------------------\n-\n-   The ANSI FORTRAN 77 language defines generic and specific intrinsics.\n-In short, the distinctions are:\n-\n-   * *Specific* intrinsics have specific types for their arguments and\n-     a specific return type.\n-\n-   * *Generic* intrinsics are treated, on a case-by-case basis in the\n-     program's source code, as one of several possible specific\n-     intrinsics.\n-\n-     Typically, a generic intrinsic has a return type that is\n-     determined by the type of one or more of its arguments.\n-\n-   The GNU Fortran language generalizes these concepts somewhat,\n-especially by providing intrinsic subroutines and generic intrinsics\n-that are treated as either a specific intrinsic subroutine or a\n-specific intrinsic function (e.g. `SECOND').\n-\n-   However, GNU Fortran avoids generalizing this concept to the point\n-where existing code would be accepted as meaning something possibly\n-different than what was intended.\n-\n-   For example, `ABS' is a generic intrinsic, so all working code\n-written using `ABS' of an `INTEGER' argument expects an `INTEGER'\n-return value.  Similarly, all such code expects that `ABS' of an\n-`INTEGER*2' argument returns an `INTEGER*2' return value.\n-\n-   Yet, `IABS' is a *specific* intrinsic that accepts only an\n-`INTEGER(KIND=1)' argument.  Code that passes something other than an\n-`INTEGER(KIND=1)' argument to `IABS' is not valid GNU Fortran code,\n-because it is not clear what the author intended.\n-\n-   For example, if `J' is `INTEGER(KIND=6)', `IABS(J)' is not defined\n-by the GNU Fortran language, because the programmer might have used\n-that construct to mean any of the following, subtly different, things:\n-\n-   * Convert `J' to `INTEGER(KIND=1)' first (as if `IABS(INT(J))' had\n-     been written).\n-\n-   * Convert the result of the intrinsic to `INTEGER(KIND=1)' (as if\n-     `INT(ABS(J))' had been written).\n-\n-   * No conversion (as if `ABS(J)' had been written).\n-\n-   The distinctions matter especially when types and values wider than\n-`INTEGER(KIND=1)' (such as `INTEGER(KIND=2)'), or when operations\n-performing more \"arithmetic\" than absolute-value, are involved.\n-\n-   The following sample program is not a valid GNU Fortran program, but\n-might be accepted by other compilers.  If so, the output is likely to\n-be revealing in terms of how a given compiler treats intrinsics (that\n-normally are specific) when they are given arguments that do not\n-conform to their stated requirements:\n-\n-           PROGRAM JCB002\n-     C Version 1:\n-     C Modified 1997-05-21 (Burley) to accommodate compilers that implement\n-     C INT(I1-I2) as INT(I1)-INT(I2) given INTEGER*2 I1,I2.\n-     C\n-     C Version 0:\n-     C Written by James Craig Burley 1997-02-20.\n-     C Contact via Internet email: burley@gnu.ai.mit.edu\n-     C\n-     C Purpose:\n-     C Determine how compilers handle non-standard IDIM\n-     C on INTEGER*2 operands, which presumably can be\n-     C extrapolated into understanding how the compiler\n-     C generally treats specific intrinsics that are passed\n-     C arguments not of the correct types.\n-     C\n-     C If your compiler implements INTEGER*2 and INTEGER\n-     C as the same type, change all INTEGER*2 below to\n-     C INTEGER*1.\n-     C\n-           INTEGER*2 I0, I4\n-           INTEGER I1, I2, I3\n-           INTEGER*2 ISMALL, ILARGE\n-           INTEGER*2 ITOOLG, ITWO\n-           INTEGER*2 ITMP\n-           LOGICAL L2, L3, L4\n-     C\n-     C Find smallest INTEGER*2 number.\n-     C\n-           ISMALL=0\n-      10   I0 = ISMALL-1\n-           IF ((I0 .GE. ISMALL) .OR. (I0+1 .NE. ISMALL)) GOTO 20\n-           ISMALL = I0\n-           GOTO 10\n-      20   CONTINUE\n-     C\n-     C Find largest INTEGER*2 number.\n-     C\n-           ILARGE=0\n-      30   I0 = ILARGE+1\n-           IF ((I0 .LE. ILARGE) .OR. (I0-1 .NE. ILARGE)) GOTO 40\n-           ILARGE = I0\n-           GOTO 30\n-      40   CONTINUE\n-     C\n-     C Multiplying by two adds stress to the situation.\n-     C\n-           ITWO = 2\n-     C\n-     C Need a number that, added to -2, is too wide to fit in I*2.\n-     C\n-           ITOOLG = ISMALL\n-     C\n-     C Use IDIM the straightforward way.\n-     C\n-           I1 = IDIM (ILARGE, ISMALL) * ITWO + ITOOLG\n-     C\n-     C Calculate result for first interpretation.\n-     C\n-           I2 = (INT (ILARGE) - INT (ISMALL)) * ITWO + ITOOLG\n-     C\n-     C Calculate result for second interpretation.\n-     C\n-           ITMP = ILARGE - ISMALL\n-           I3 = (INT (ITMP)) * ITWO + ITOOLG\n-     C\n-     C Calculate result for third interpretation.\n-     C\n-           I4 = (ILARGE - ISMALL) * ITWO + ITOOLG\n-     C\n-     C Print results.\n-     C\n-           PRINT *, 'ILARGE=', ILARGE\n-           PRINT *, 'ITWO=', ITWO\n-           PRINT *, 'ITOOLG=', ITOOLG\n-           PRINT *, 'ISMALL=', ISMALL\n-           PRINT *, 'I1=', I1\n-           PRINT *, 'I2=', I2\n-           PRINT *, 'I3=', I3\n-           PRINT *, 'I4=', I4\n-           PRINT *\n-           L2 = (I1 .EQ. I2)\n-           L3 = (I1 .EQ. I3)\n-           L4 = (I1 .EQ. I4)\n-           IF (L2 .AND. .NOT.L3 .AND. .NOT.L4) THEN\n-              PRINT *, 'Interp 1: IDIM(I*2,I*2) => IDIM(INT(I*2),INT(I*2))'\n-              STOP\n-           END IF\n-           IF (L3 .AND. .NOT.L2 .AND. .NOT.L4) THEN\n-              PRINT *, 'Interp 2: IDIM(I*2,I*2) => INT(DIM(I*2,I*2))'\n-              STOP\n-           END IF\n-           IF (L4 .AND. .NOT.L2 .AND. .NOT.L3) THEN\n-              PRINT *, 'Interp 3: IDIM(I*2,I*2) => DIM(I*2,I*2)'\n-              STOP\n-           END IF\n-           PRINT *, 'Results need careful analysis.'\n-           END\n-\n-   No future version of the GNU Fortran language will likely permit\n-specific intrinsic invocations with wrong-typed arguments (such as\n-`IDIM' in the above example), since it has been determined that\n-disagreements exist among many production compilers on the\n-interpretation of such invocations.  These disagreements strongly\n-suggest that Fortran programmers, and certainly existing Fortran\n-programs, disagree about the meaning of such invocations.\n-\n-   The first version of `JCB002' didn't accommodate some compilers'\n-treatment of `INT(I1-I2)' where `I1' and `I2' are `INTEGER*2'.  In such\n-a case, these compilers apparently convert both operands to `INTEGER*4'\n-and then do an `INTEGER*4' subtraction, instead of doing an `INTEGER*2'\n-subtraction on the original values in `I1' and `I2'.\n-\n-   However, the results of the careful analyses done on the outputs of\n-programs compiled by these various compilers show that they all\n-implement either `Interp 1' or `Interp 2' above.\n-\n-   Specifically, it is believed that the new version of `JCB002' above\n-will confirm that:\n-\n-   * Digital Semiconductor (\"DEC\") Alpha OSF/1, HP-UX 10.0.1, AIX 3.2.5\n-     `f77' compilers all implement `Interp 1'.\n-\n-   * IRIX 5.3 `f77' compiler implements `Interp 2'.\n-\n-   * Solaris 2.5, SunOS 4.1.3, DECstation ULTRIX 4.3, and IRIX 6.1\n-     `f77' compilers all implement `Interp 3'.\n-\n-   If you get different results than the above for the stated\n-compilers, or have results for other compilers that might be worth\n-adding to the above list, please let us know the details (compiler\n-product, version, machine, results, and so on).\n-\n-\u001f\n-File: g77.info,  Node: REAL() and AIMAG() of Complex,  Next: CMPLX() of DOUBLE PRECISION,  Prev: Generics and Specifics,  Up: Functions and Subroutines\n-\n-`REAL()' and `AIMAG()' of Complex\n----------------------------------\n-\n-   The GNU Fortran language disallows `REAL(EXPR)' and `AIMAG(EXPR)',\n-where EXPR is any `COMPLEX' type other than `COMPLEX(KIND=1)', except\n-when they are used in the following way:\n-\n-     REAL(REAL(EXPR))\n-     REAL(AIMAG(EXPR))\n-\n-The above forms explicitly specify that the desired effect is to\n-convert the real or imaginary part of EXPR, which might be some `REAL'\n-type other than `REAL(KIND=1)', to type `REAL(KIND=1)', and have that\n-serve as the value of the expression.\n-\n-   The GNU Fortran language offers clearly named intrinsics to extract\n-the real and imaginary parts of a complex entity without any conversion:\n-\n-     REALPART(EXPR)\n-     IMAGPART(EXPR)\n-\n-   To express the above using typical extended FORTRAN 77, use the\n-following constructs (when EXPR is `COMPLEX(KIND=2)'):\n-\n-     DBLE(EXPR)\n-     DIMAG(EXPR)\n-\n-   The FORTRAN 77 language offers no way to explicitly specify the real\n-and imaginary parts of a complex expression of arbitrary type,\n-apparently as a result of requiring support for only one `COMPLEX' type\n-(`COMPLEX(KIND=1)').  The concepts of converting an expression to type\n-`REAL(KIND=1)' and of extracting the real part of a complex expression\n-were thus \"smooshed\" by FORTRAN 77 into a single intrinsic, since they\n-happened to have the exact same effect in that language (due to having\n-only one `COMPLEX' type).\n-\n-   *Note:* When `-ff90' is in effect, `g77' treats `REAL(EXPR)', where\n-EXPR is of type `COMPLEX', as `REALPART(EXPR)', whereas with\n-`-fugly-complex -fno-f90' in effect, it is treated as\n-`REAL(REALPART(EXPR))'.\n-\n-   *Note Ugly Complex Part Extraction::, for more information.\n-\n-\u001f\n-File: g77.info,  Node: CMPLX() of DOUBLE PRECISION,  Next: MIL-STD 1753,  Prev: REAL() and AIMAG() of Complex,  Up: Functions and Subroutines\n-\n-`CMPLX()' of `DOUBLE PRECISION'\n--------------------------------\n-\n-   In accordance with Fortran 90 and at least some (perhaps all) other\n-compilers, the GNU Fortran language defines `CMPLX()' as always\n-returning a result that is type `COMPLEX(KIND=1)'.\n-\n-   This means `CMPLX(D1,D2)', where `D1' and `D2' are `REAL(KIND=2)'\n-(`DOUBLE PRECISION'), is treated as:\n-\n-     CMPLX(SNGL(D1), SNGL(D2))\n-\n-   (It was necessary for Fortran 90 to specify this behavior for\n-`DOUBLE PRECISION' arguments, since that is the behavior mandated by\n-FORTRAN 77.)\n-\n-   The GNU Fortran language also provides the `DCMPLX()' intrinsic,\n-which is provided by some FORTRAN 77 compilers to construct a `DOUBLE\n-COMPLEX' entity from of `DOUBLE PRECISION' operands.  However, this\n-solution does not scale well when more `COMPLEX' types (having various\n-precisions and ranges) are offered by Fortran implementations.\n-\n-   Fortran 90 extends the `CMPLX()' intrinsic by adding an extra\n-argument used to specify the desired kind of complex result.  However,\n-this solution is somewhat awkward to use, and `g77' currently does not\n-support it.\n-\n-   The GNU Fortran language provides a simple way to build a complex\n-value out of two numbers, with the precise type of the value determined\n-by the types of the two numbers (via the usual type-promotion\n-mechanism):\n-\n-     COMPLEX(REAL, IMAG)\n-\n-   When REAL and IMAG are the same `REAL' types, `COMPLEX()' performs\n-no conversion other than to put them together to form a complex result\n-of the same (complex version of real) type.\n-\n-   *Note Complex Intrinsic::, for more information.\n-\n-\u001f\n-File: g77.info,  Node: MIL-STD 1753,  Next: f77/f2c Intrinsics,  Prev: CMPLX() of DOUBLE PRECISION,  Up: Functions and Subroutines\n-\n-MIL-STD 1753 Support\n---------------------\n-\n-   The GNU Fortran language includes the MIL-STD 1753 intrinsics\n-`BTEST', `IAND', `IBCLR', `IBITS', `IBSET', `IEOR', `IOR', `ISHFT',\n-`ISHFTC', `MVBITS', and `NOT'.\n-\n-\u001f\n-File: g77.info,  Node: f77/f2c Intrinsics,  Next: Table of Intrinsic Functions,  Prev: MIL-STD 1753,  Up: Functions and Subroutines\n-\n-`f77'/`f2c' Intrinsics\n-----------------------\n-\n-   The bit-manipulation intrinsics supported by traditional `f77' and\n-by `f2c' are available in the GNU Fortran language.  These include\n-`AND', `LSHIFT', `OR', `RSHIFT', and `XOR'.\n-\n-   Also supported are the intrinsics `CDABS', `CDCOS', `CDEXP',\n-`CDLOG', `CDSIN', `CDSQRT', `DCMPLX', `DCONJG', `DFLOAT', `DIMAG',\n-`DREAL', and `IMAG', `ZABS', `ZCOS', `ZEXP', `ZLOG', `ZSIN', and\n-`ZSQRT'.\n-"}, {"sha": "574a40aed03b3f2963b6f56b5cebb1298f2a1f85", "filename": "gcc/f/g77.info-7", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-7", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-7", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-7?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2"}, {"sha": "34decb7f4dd5f4e61c86067e05c73949ce33114b", "filename": "gcc/f/g77.info-8", "status": "removed", "additions": 0, "deletions": 2055, "changes": 2055, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-8", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-8", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-8?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2"}, {"sha": "bf0102c6b146b6e85953b60219f732598686f8cf", "filename": "gcc/f/g77.info-9", "status": "removed", "additions": 0, "deletions": 1844, "changes": 1844, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-9", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee32467c5c4c29066a0f490bbd20c0901a87f2/gcc%2Ff%2Fg77.info-9", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.info-9?ref=a3ee32467c5c4c29066a0f490bbd20c0901a87f2"}]}