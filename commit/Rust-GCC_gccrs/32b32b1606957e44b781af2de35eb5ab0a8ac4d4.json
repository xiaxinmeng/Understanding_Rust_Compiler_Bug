{"sha": "32b32b1606957e44b781af2de35eb5ab0a8ac4d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJiMzJiMTYwNjk1N2U0NGI3ODFhZjJkZTM1ZWI1YWIwYThhYzRkNA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2003-12-08T17:30:44Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2003-12-08T17:30:44Z"}, "message": "re PR middle-end/10060 (ICE (stack overflow) on huge file (300k lines) due to recursive behaviour of copy_rtx_if_shared, in emit_rtl.c)\n\n2003-12-08  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/10060\n        * emit-rtl.c (copy_rtx_if_shared): Split out into ...\n        (copy_rtx_if_shared_1): here and optimize the last one\n        in the sequence into tail-recursion.\n        (reset_used_flags): Optimize the last one\n        in the sequence into tail-recursion.\n\nFrom-SVN: r74424", "tree": {"sha": "0a91d74d2a64413a736588c08f11d46770fba2e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a91d74d2a64413a736588c08f11d46770fba2e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32b32b1606957e44b781af2de35eb5ab0a8ac4d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32b32b1606957e44b781af2de35eb5ab0a8ac4d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32b32b1606957e44b781af2de35eb5ab0a8ac4d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32b32b1606957e44b781af2de35eb5ab0a8ac4d4/comments", "author": null, "committer": null, "parents": [{"sha": "0fa96a6006d2689aeb376139cdf78a2a51c907e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa96a6006d2689aeb376139cdf78a2a51c907e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fa96a6006d2689aeb376139cdf78a2a51c907e9"}], "stats": {"total": 74, "additions": 62, "deletions": 12}, "files": [{"sha": "3cc34b5df8e94fbcd5662e493135aeee0a3e73aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32b32b1606957e44b781af2de35eb5ab0a8ac4d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32b32b1606957e44b781af2de35eb5ab0a8ac4d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32b32b1606957e44b781af2de35eb5ab0a8ac4d4", "patch": "@@ -1,3 +1,12 @@\n+2003-12-08  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/10060\n+\t* emit-rtl.c (copy_rtx_if_shared): Split out into ...\n+\t(copy_rtx_if_shared_1): here and optimize the last one\n+\tin the sequence into tail-recursion.\n+\t(reset_used_flags): Optimize the last one\n+\tin the sequence into tail-recursion.\n+\n 2003-12-08  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.md: New split to transform ((X << y) - 1) into ~(~(X-1) << y)"}, {"sha": "8b2be2d6add1a9238c7f9b6ba0d4e833affd4ff9", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 53, "deletions": 12, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32b32b1606957e44b781af2de35eb5ab0a8ac4d4/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32b32b1606957e44b781af2de35eb5ab0a8ac4d4/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=32b32b1606957e44b781af2de35eb5ab0a8ac4d4", "patch": "@@ -198,6 +198,7 @@ static reg_attrs *get_reg_attrs (tree, int);\n static tree component_ref_for_mem_expr (tree);\n static rtx gen_const_vector_0 (enum machine_mode);\n static rtx gen_complex_constant_part (enum machine_mode, rtx, int);\n+static void copy_rtx_if_shared_1 (rtx *orig);\n \n /* Probability of the conditional branch currently proceeded by try_split.\n    Set to -1 otherwise.  */\n@@ -2775,14 +2776,27 @@ copy_most_rtx (rtx orig, rtx may_share)\n rtx\n copy_rtx_if_shared (rtx orig)\n {\n-  rtx x = orig;\n+  copy_rtx_if_shared_1 (&orig);\n+  return orig;\n+}\n+\n+static void\n+copy_rtx_if_shared_1 (rtx *orig1)\n+{\n+  rtx x;\n   int i;\n   enum rtx_code code;\n+  rtx *last_ptr;\n   const char *format_ptr;\n   int copied = 0;\n+  int length;\n+\n+  /* Repeat is used to turn tail-recursion into iteration.  */\n+repeat:\n+  x = *orig1;\n \n   if (x == 0)\n-    return 0;\n+    return;\n \n   code = GET_CODE (x);\n \n@@ -2802,15 +2816,15 @@ copy_rtx_if_shared (rtx orig)\n     case CC0:\n     case SCRATCH:\n       /* SCRATCH must be shared because they represent distinct values.  */\n-      return x;\n+      return;\n \n     case CONST:\n       /* CONST can be shared if it contains a SYMBOL_REF.  If it contains\n \t a LABEL_REF, it isn't sharable.  */\n       if (GET_CODE (XEXP (x, 0)) == PLUS\n \t  && GET_CODE (XEXP (XEXP (x, 0), 0)) == SYMBOL_REF\n \t  && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT)\n-\treturn x;\n+\treturn;\n       break;\n \n     case INSN:\n@@ -2819,7 +2833,7 @@ copy_rtx_if_shared (rtx orig)\n     case NOTE:\n     case BARRIER:\n       /* The chain of insns is not being copied.  */\n-      return x;\n+      return;\n \n     default:\n       break;\n@@ -2845,30 +2859,47 @@ copy_rtx_if_shared (rtx orig)\n      must be copied if X was copied.  */\n \n   format_ptr = GET_RTX_FORMAT (code);\n-\n-  for (i = 0; i < GET_RTX_LENGTH (code); i++)\n+  length = GET_RTX_LENGTH (code);\n+  last_ptr = NULL;\n+  \n+  for (i = 0; i < length; i++)\n     {\n       switch (*format_ptr++)\n \t{\n \tcase 'e':\n-\t  XEXP (x, i) = copy_rtx_if_shared (XEXP (x, i));\n+          if (last_ptr)\n+            copy_rtx_if_shared_1 (last_ptr);\n+\t  last_ptr = &XEXP (x, i);\n \t  break;\n \n \tcase 'E':\n \t  if (XVEC (x, i) != NULL)\n \t    {\n \t      int j;\n \t      int len = XVECLEN (x, i);\n-\n+              \n+              /* Copy the vector iff I copied the rtx and the length is nonzero. */\n \t      if (copied && len > 0)\n \t\tXVEC (x, i) = gen_rtvec_v (len, XVEC (x, i)->elem);\n+              \n+              /* Call recsusively on all inside the vector. */\n \t      for (j = 0; j < len; j++)\n-\t\tXVECEXP (x, i, j) = copy_rtx_if_shared (XVECEXP (x, i, j));\n+                {\n+\t\t  if (last_ptr)\n+\t\t    copy_rtx_if_shared_1 (last_ptr);\n+                  last_ptr = &XVECEXP (x, i, j);\n+                }\n \t    }\n \t  break;\n \t}\n     }\n-  return x;\n+  *orig1 = x;\n+  if (last_ptr)\n+    {\n+      orig1 = last_ptr;\n+      goto repeat;\n+    }\n+  return;\n }\n \n /* Clear all the USED bits in X to allow copy_rtx_if_shared to be used\n@@ -2880,7 +2911,10 @@ reset_used_flags (rtx x)\n   int i, j;\n   enum rtx_code code;\n   const char *format_ptr;\n+  int length;\n \n+  /* Repeat is used to turn tail-recursion into iteration.  */\n+repeat:\n   if (x == 0)\n     return;\n \n@@ -2918,11 +2952,18 @@ reset_used_flags (rtx x)\n   RTX_FLAG (x, used) = 0;\n \n   format_ptr = GET_RTX_FORMAT (code);\n-  for (i = 0; i < GET_RTX_LENGTH (code); i++)\n+  length = GET_RTX_LENGTH (code);\n+  \n+  for (i = 0; i < length; i++)\n     {\n       switch (*format_ptr++)\n \t{\n \tcase 'e':\n+          if (i == length-1)\n+            {\n+              x = XEXP (x, i);\n+\t      goto repeat;\n+            }\n \t  reset_used_flags (XEXP (x, i));\n \t  break;\n "}]}