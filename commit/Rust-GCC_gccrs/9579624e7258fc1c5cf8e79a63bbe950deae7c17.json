{"sha": "9579624e7258fc1c5cf8e79a63bbe950deae7c17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU3OTYyNGU3MjU4ZmMxYzVjZjhlNzlhNjNiYmU5NTBkZWFlN2MxNw==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2003-10-17T15:41:46Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2003-10-17T15:41:46Z"}, "message": "re PR c++/2513 (internal template template parameter causes ICE)\n\n\tPR c++/2513\n\t* decl.c (make_typename_type): Use dependent_type_p.\n\t(make_unbound_class_template): Likewise.\n\t* pt.c (instantiate_class_template): Increment\n\tprocessing_template_decl during substitution of template friend\n\tfunction.  Preincrement processing_template_decl rather than\n\tpostincrement.\n\t(get_mostly_instantiated_function_type): Increment\n\tprocessing_template_decl during partial substitution of function\n\ttype.\n\n\t* g++.dg/template/typename5.C: New test.\n\nFrom-SVN: r72611", "tree": {"sha": "595c9d55452a0d493a68f4caf4ea21d82b3b3b6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/595c9d55452a0d493a68f4caf4ea21d82b3b3b6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9579624e7258fc1c5cf8e79a63bbe950deae7c17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9579624e7258fc1c5cf8e79a63bbe950deae7c17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9579624e7258fc1c5cf8e79a63bbe950deae7c17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9579624e7258fc1c5cf8e79a63bbe950deae7c17/comments", "author": null, "committer": null, "parents": [{"sha": "5511bc2e55b130ef1ce47b47af354ca7876e5ff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5511bc2e55b130ef1ce47b47af354ca7876e5ff8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5511bc2e55b130ef1ce47b47af354ca7876e5ff8"}], "stats": {"total": 67, "additions": 57, "deletions": 10}, "files": [{"sha": "b5cba3c7aaf1ef5d1be3a9729431bdb616a43dc0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9579624e7258fc1c5cf8e79a63bbe950deae7c17/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9579624e7258fc1c5cf8e79a63bbe950deae7c17/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9579624e7258fc1c5cf8e79a63bbe950deae7c17", "patch": "@@ -1,3 +1,16 @@\n+2003-10-17  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/2513\n+\t* decl.c (make_typename_type): Use dependent_type_p.\n+\t(make_unbound_class_template): Likewise.\n+\t* pt.c (instantiate_class_template): Increment\n+\tprocessing_template_decl during substitution of template friend\n+\tfunction.  Preincrement processing_template_decl rather than\n+\tpostincrement.\n+\t(get_mostly_instantiated_function_type): Increment\n+\tprocessing_template_decl during partial substitution of function\n+\ttype.\n+\n 2003-10-15  Jan Hubicka  <jh@suse.cz>\n \n \tpr c++/12574"}, {"sha": "227c773e1b34f14e4caf62e4a73d3d27b48f025f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9579624e7258fc1c5cf8e79a63bbe950deae7c17/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9579624e7258fc1c5cf8e79a63bbe950deae7c17/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9579624e7258fc1c5cf8e79a63bbe950deae7c17", "patch": "@@ -2604,7 +2604,7 @@ make_typename_type (tree context, tree name, tsubst_flags_t complain)\n       return error_mark_node;\n     }\n \n-  if (! uses_template_parms (context)\n+  if (!dependent_type_p (context)\n       || currently_open_class (context))\n     {\n       if (TREE_CODE (fullname) == TEMPLATE_ID_EXPR)\n@@ -2663,7 +2663,7 @@ make_typename_type (tree context, tree name, tsubst_flags_t complain)\n \n   /* If the CONTEXT is not a template type, then either the field is\n      there now or its never going to be.  */\n-  if (!uses_template_parms (context))\n+  if (!dependent_type_p (context))\n     {\n       if (complain & tf_error)\n \terror (\"no type named `%#T' in `%#T'\", name, context);\n@@ -2692,7 +2692,7 @@ make_unbound_class_template (tree context, tree name, tsubst_flags_t complain)\n   if (TREE_CODE (name) != IDENTIFIER_NODE)\n     abort ();\n \n-  if (!uses_template_parms (context)\n+  if (!dependent_type_p (context)\n       || currently_open_class (context))\n     {\n       tree tmpl = NULL_TREE;"}, {"sha": "ffc347c7a014220268d0312f2304d03cd28b1e9e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9579624e7258fc1c5cf8e79a63bbe950deae7c17/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9579624e7258fc1c5cf8e79a63bbe950deae7c17/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9579624e7258fc1c5cf8e79a63bbe950deae7c17", "patch": "@@ -5294,10 +5294,10 @@ instantiate_class_template (tree type)\n \t      tree r;\n \t      \n \t      if (TREE_CODE (t) == TEMPLATE_DECL)\n-\t\tprocessing_template_decl++;\n+\t\t++processing_template_decl;\n \t      r = tsubst (t, args, tf_error, NULL_TREE);\n \t      if (TREE_CODE (t) == TEMPLATE_DECL)\n-\t\tprocessing_template_decl--;\n+\t\t--processing_template_decl;\n \t      set_current_access_from_decl (r);\n \t      grok_special_member_properties (r);\n \t      finish_member_declaration (r);\n@@ -5317,10 +5317,10 @@ instantiate_class_template (tree type)\n \t\t  input_location = DECL_SOURCE_LOCATION (t);\n \n \t\t  if (TREE_CODE (t) == TEMPLATE_DECL)\n-\t\t    processing_template_decl++;\n+\t\t    ++processing_template_decl;\n \t\t  r = tsubst (t, args, tf_error | tf_warning, NULL_TREE);\n \t\t  if (TREE_CODE (t) == TEMPLATE_DECL)\n-\t\t    processing_template_decl--;\n+\t\t    --processing_template_decl;\n \t\t  if (TREE_CODE (r) == VAR_DECL)\n \t\t    {\n \t\t      tree init;\n@@ -5412,9 +5412,17 @@ instantiate_class_template (tree type)\n \t\t--processing_template_decl;\n \t    }\n \t  else\n-\t    /* Build new DECL_FRIENDLIST.  */\n-\t    add_friend (type, tsubst_friend_function (t, args),\n-\t\t\t/*complain=*/false);\n+\t    {\n+\t      /* Build new DECL_FRIENDLIST.  */\n+\t      tree r;\n+\n+\t      if (TREE_CODE (t) == TEMPLATE_DECL)\n+\t\t++processing_template_decl;\n+\t      r = tsubst_friend_function (t, args);\n+\t      if (TREE_CODE (t) == TEMPLATE_DECL)\n+\t\t--processing_template_decl;\n+\t      add_friend (type, r, /*complain=*/false);\n+\t    }\n \t}\n     }\n \n@@ -11246,9 +11254,11 @@ get_mostly_instantiated_function_type (tree decl)\n \t specialized or not.  */\n       push_access_scope (decl);\n \n+      ++processing_template_decl;\n       /* Now, do the (partial) substitution to figure out the\n \t appropriate function type.  */\n       fn_type = tsubst (fn_type, partial_args, tf_error, NULL_TREE);\n+      --processing_template_decl;\n \n       /* Substitute into the template parameters to obtain the real\n \t innermost set of parameters.  This step is important if the"}, {"sha": "5cfe1e48523132a3438ce551963a3afd9a160953", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9579624e7258fc1c5cf8e79a63bbe950deae7c17/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9579624e7258fc1c5cf8e79a63bbe950deae7c17/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9579624e7258fc1c5cf8e79a63bbe950deae7c17", "patch": "@@ -1,3 +1,8 @@\n+2003-10-17  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/2513\n+\t* g++.dg/template/typename5.C: New test.\n+\n 2003-10-17  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/12369"}, {"sha": "2f72b5f86019cc2e6885d08ee4779282ff0fd95a", "filename": "gcc/testsuite/g++.dg/template/typename5.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9579624e7258fc1c5cf8e79a63bbe950deae7c17/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9579624e7258fc1c5cf8e79a63bbe950deae7c17/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename5.C?ref=9579624e7258fc1c5cf8e79a63bbe950deae7c17", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do compile }\n+\n+// Origin: ariels@compugen.co.il\n+\n+// PR c++/2513: typename handling when scope is dependent as\n+// described in DR108.\n+\n+template <bool flag> struct Select {\n+  typedef int Result;\n+};\n+\n+template <template<class> class Pred> struct FindType {\n+  typedef typename Select<true>::Result Result;\n+};\n+\n+template <int bits> struct Int {\n+  template<typename T> struct RightSize {};\n+  typedef typename FindType<RightSize>::Result type;\n+};"}]}