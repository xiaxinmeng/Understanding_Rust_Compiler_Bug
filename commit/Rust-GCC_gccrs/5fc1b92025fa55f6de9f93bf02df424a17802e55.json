{"sha": "5fc1b92025fa55f6de9f93bf02df424a17802e55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZjMWI5MjAyNWZhNTVmNmRlOWY5M2JmMDJkZjQyNGExNzgwMmU1NQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2018-04-20T09:19:39Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2018-04-20T09:19:39Z"}, "message": "Check that clones of edges exist during IPA-CP\n\n2018-04-20  Martin Jambor  <mjambor@suse.cz>\n\n\tipa/85447\n\t* ipa-cp.c (create_specialized_node): Check that clones of\n\tself-recursive edges exist during IPA-CP.\n\ntestsuite/\n\t* g++.dg/ipa/pr85447.C: New file.\n\t* gcc.dg/ipa/ipcp-self-recursion-1.c: Likewise.\n\nFrom-SVN: r259517", "tree": {"sha": "5446541e8d006b47acfa69a5dc29b904ff97bf8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5446541e8d006b47acfa69a5dc29b904ff97bf8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fc1b92025fa55f6de9f93bf02df424a17802e55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fc1b92025fa55f6de9f93bf02df424a17802e55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fc1b92025fa55f6de9f93bf02df424a17802e55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fc1b92025fa55f6de9f93bf02df424a17802e55/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e00e62761dbd91200af4e448ff13b598d918049f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e00e62761dbd91200af4e448ff13b598d918049f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e00e62761dbd91200af4e448ff13b598d918049f"}], "stats": {"total": 95, "additions": 92, "deletions": 3}, "files": [{"sha": "a2441991818e949abaeaa9386b8df81044e36a89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fc1b92025fa55f6de9f93bf02df424a17802e55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fc1b92025fa55f6de9f93bf02df424a17802e55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fc1b92025fa55f6de9f93bf02df424a17802e55", "patch": "@@ -1,3 +1,9 @@\n+2018-04-20  Martin Jambor  <mjambor@suse.cz>\n+\n+\tipa/85447\n+\t* ipa-cp.c (create_specialized_node): Check that clones of\n+\tself-recursive edges exist during IPA-CP.\n+\n 2018-04-19  Toon Moene  <toon@moene.org>\n \n \t* doc/invoke.texi: Add -floop-unroll-and-jam to options enabled"}, {"sha": "9388482bbeae69af551c5914a64ec05aed559ffb", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fc1b92025fa55f6de9f93bf02df424a17802e55/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fc1b92025fa55f6de9f93bf02df424a17802e55/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=5fc1b92025fa55f6de9f93bf02df424a17802e55", "patch": "@@ -3867,9 +3867,17 @@ create_specialized_node (struct cgraph_node *node,\n   for (unsigned j = 0; j < self_recursive_calls.length (); j++)\n     {\n       cgraph_edge *cs = next_edge_clone[self_recursive_calls[j]->uid];\n-      gcc_checking_assert (cs);\n-      gcc_assert (cs->caller == new_node);\n-      cs->redirect_callee_duplicating_thunks (new_node);\n+      /* Cloned edges can disappear during cloning as speculation can be\n+\t resolved, check that we have one and that it comes from the last\n+\t cloning.  */\n+      if (cs && cs->caller == new_node)\n+\tcs->redirect_callee_duplicating_thunks (new_node);\n+      /* Any future code that would make more than one clone of an outgoing\n+\t edge would confuse this mechanism, so let's check that does not\n+\t happen.  */\n+      gcc_checking_assert (!cs\n+\t\t\t   || !next_edge_clone[cs->uid]\n+\t\t\t   || next_edge_clone[cs->uid]->caller != new_node);\n     }\n   if (have_self_recursive_calls)\n     new_node->expand_all_artificial_thunks ();"}, {"sha": "92b40feafdf8b76a0e72bc66653c08a62c11935d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fc1b92025fa55f6de9f93bf02df424a17802e55/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fc1b92025fa55f6de9f93bf02df424a17802e55/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5fc1b92025fa55f6de9f93bf02df424a17802e55", "patch": "@@ -1,3 +1,9 @@\n+2018-04-20  Martin Jambor  <mjambor@suse.cz>\n+\n+\tipa/85447\n+\t* g++.dg/ipa/pr85447.C: New file.\n+\t* gcc.dg/ipa/ipcp-self-recursion-1.c: Likewise.\n+\n 2018-04-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/85462"}, {"sha": "d7a7716af2e473d462a720909c7ec79150707eb5", "filename": "gcc/testsuite/g++.dg/ipa/pr85447.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fc1b92025fa55f6de9f93bf02df424a17802e55/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr85447.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fc1b92025fa55f6de9f93bf02df424a17802e55/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr85447.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr85447.C?ref=5fc1b92025fa55f6de9f93bf02df424a17802e55", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+// { dg-options \"-O3 -std=gnu++11\" }\n+\n+typedef int a;\n+enum b : a;\n+class c {\n+public:\n+  enum { d };\n+  virtual b e(int *, int, const int *) = 0;\n+};\n+class f : c {\n+  b e(int *, int, const int *);\n+  b g();\n+};\n+b f::e(int *h, int i, const int *j) {\n+  if (i == d)\n+    return g();\n+  for (;;)\n+    e(h, i, j);\n+}\n+int k;\n+c *l;\n+void m() { l->e(&k, c::d, nullptr); }"}, {"sha": "7ecbf79de611069705450f96586cbab19afbb88e", "filename": "gcc/testsuite/gcc.dg/ipa/ipcp-self-recursion-1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fc1b92025fa55f6de9f93bf02df424a17802e55/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-self-recursion-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fc1b92025fa55f6de9f93bf02df424a17802e55/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-self-recursion-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-self-recursion-1.c?ref=5fc1b92025fa55f6de9f93bf02df424a17802e55", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -fno-early-inlining\"  } */\n+\n+int array[128];\n+\n+volatile int v = 0;\n+volatile int blah = 0;\n+volatile int counter = 0;\n+\n+int __attribute__((noipa))\n+obscured_one ()\n+{\n+  return 1;\n+}\n+\n+static void\n+f (int c, int l)\n+{\n+  int i;\n+  for (i = 0; i < c; i++)\n+    array[i] = 455;\n+\n+  counter++;\n+  if (counter > 6)\n+    __builtin_abort ();\n+\n+  v = l;\n+  if (l > 0)\n+    f (c, l - 1);\n+  blah = l;\n+}\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int i;\n+  for (i = 0; i < 100; i++)\n+    {\n+      counter = 0;\n+      f (0, 5);\n+      if (obscured_one ())\n+\tbreak;\n+    }\n+\n+  return 0;\n+}"}]}