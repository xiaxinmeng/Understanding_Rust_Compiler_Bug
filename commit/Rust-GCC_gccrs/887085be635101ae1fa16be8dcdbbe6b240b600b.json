{"sha": "887085be635101ae1fa16be8dcdbbe6b240b600b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg3MDg1YmU2MzUxMDFhZTFmYTE2YmU4ZGNkYmJlNmIyNDBiNjAwYg==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2020-03-17T14:38:25Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2020-03-17T15:03:18Z"}, "message": "c++: Fix access checks for __is_assignable and __is_constructible\n\ngcc/\n\nPR c++/94197\n* cp/method.c (assignable_expr): Use cp_unevaluated.\n(is_xible_helper): Push a non-deferred access check for\nthe stub objects created by assignable_expr and constructible_expr.\n\ntestsuite/\n\nPR c++/94197\n* g++.dg/ext/pr94197.C: New.", "tree": {"sha": "97237c5675d93b4dcaa46e66a46aa1d463f32e77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97237c5675d93b4dcaa46e66a46aa1d463f32e77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/887085be635101ae1fa16be8dcdbbe6b240b600b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/887085be635101ae1fa16be8dcdbbe6b240b600b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/887085be635101ae1fa16be8dcdbbe6b240b600b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/887085be635101ae1fa16be8dcdbbe6b240b600b/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be8cf77026b6cdcf9ab9cff6e70a75ea4bfaded"}], "stats": {"total": 92, "additions": 90, "deletions": 2}, "files": [{"sha": "d2c062aa3d80d79266bd31f83e0aa418de8ab70a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/887085be635101ae1fa16be8dcdbbe6b240b600b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/887085be635101ae1fa16be8dcdbbe6b240b600b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=887085be635101ae1fa16be8dcdbbe6b240b600b", "patch": "@@ -1,3 +1,17 @@\n+2020-03-17  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tgcc/\n+\n+\tPR c++/94197\n+\t* cp/method.c (assignable_expr): Use cp_unevaluated.\n+\t(is_xible_helper): Push a non-deferred access check for\n+\tthe stub objects created by assignable_expr and constructible_expr.\n+\n+\ttestsuite/\n+\n+\tPR c++/94197\n+\t* g++.dg/ext/pr94197.C: New.\n+\n 2020-03-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* pt.c (tsubst): Fix up duplicated word issue in a diagnostic message."}, {"sha": "c131fd41536e0d215d721cf89332aab51f7d1416", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/887085be635101ae1fa16be8dcdbbe6b240b600b/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/887085be635101ae1fa16be8dcdbbe6b240b600b/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=887085be635101ae1fa16be8dcdbbe6b240b600b", "patch": "@@ -1739,11 +1739,10 @@ check_nontriv (tree *tp, int *, void *)\n static tree\n assignable_expr (tree to, tree from)\n {\n-  ++cp_unevaluated_operand;\n+  cp_unevaluated cp_uneval_guard;\n   to = build_stub_object (to);\n   from = build_stub_object (from);\n   tree r = cp_build_modify_expr (input_location, to, NOP_EXPR, from, tf_none);\n-  --cp_unevaluated_operand;\n   return r;\n }\n \n@@ -1806,6 +1805,7 @@ constructible_expr (tree to, tree from)\n static tree\n is_xible_helper (enum tree_code code, tree to, tree from, bool trivial)\n {\n+  deferring_access_check_sentinel acs (dk_no_deferred);\n   if (VOID_TYPE_P (to) || ABSTRACT_CLASS_TYPE_P (to)\n       || (from && FUNC_OR_METHOD_TYPE_P (from)\n \t  && (TYPE_READONLY (from) || FUNCTION_REF_QUALIFIED (from))))"}, {"sha": "433a4616be25273d7951139272184536c4a0881c", "filename": "gcc/testsuite/g++.dg/ext/pr94197.C", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/887085be635101ae1fa16be8dcdbbe6b240b600b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr94197.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/887085be635101ae1fa16be8dcdbbe6b240b600b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr94197.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr94197.C?ref=887085be635101ae1fa16be8dcdbbe6b240b600b", "patch": "@@ -0,0 +1,74 @@\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T>\n+  T&& declval() noexcept;\n+\n+template<bool B>\n+struct bool_constant\n+{\n+  static constexpr bool value = B;\n+  using type = bool_constant;\n+};\n+\n+using true_type = bool_constant<true>;\n+using false_type = bool_constant<false>;\n+\n+template<bool, typename T, typename Arg>\n+  struct __is_nt_constructible_impl\n+  : public false_type\n+  { };\n+\n+template<typename T, typename Arg>\n+  struct __is_nt_constructible_impl<true, T, Arg>\n+  : public bool_constant<noexcept(static_cast<T>(declval<Arg>()))>\n+  { };\n+\n+template<typename T, typename Arg>\n+  using __is_nothrow_constructible_impl\n+    = __is_nt_constructible_impl<__is_constructible(T, Arg), T, Arg>;\n+\n+template<typename T>\n+  struct __is_nothrow_copy_constructible_impl\n+  : public __is_nothrow_constructible_impl<T, const T&>\n+  { };\n+\n+template<typename T>\n+  struct is_nothrow_copy_constructible\n+  : public __is_nothrow_copy_constructible_impl<T>::type\n+  { };\n+\n+template<bool, typename T, typename Arg>\n+  struct __is_nt_assignable_impl\n+  : public false_type\n+  { };\n+\n+template<typename T, typename Arg>\n+  struct __is_nt_assignable_impl<true, T, Arg>\n+  : public bool_constant<noexcept(declval<T&>() = declval<Arg>())>\n+  { };\n+\n+template<typename T, typename Arg>\n+  using __is_nothrow_assignable_impl\n+    = __is_nt_assignable_impl<__is_assignable(T, Arg), T, Arg>;\n+\n+template<typename T>\n+  struct __is_nothrow_copy_assignable_impl\n+  : public __is_nothrow_assignable_impl<T, const T&>\n+  { };\n+\n+template<typename T>\n+  struct is_nothrow_copy_assignable\n+  : public __is_nothrow_copy_assignable_impl<T>::type\n+  { };\n+\n+struct NType\n+{\n+  NType();\n+private:\n+  NType(const NType&);\n+  NType& operator=(const NType&);\n+};\n+\n+\n+static_assert( !is_nothrow_copy_constructible<NType>::value, \"\" );\n+static_assert( !is_nothrow_copy_assignable<NType>::value, \"\" );"}]}