{"sha": "a4417a863114d5c9c31c86ed71cc4294d650733c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ0MTdhODYzMTE0ZDVjOWMzMWM4NmVkNzFjYzQyOTRkNjUwNzMzYw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-12-19T23:25:43Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-12-19T23:25:43Z"}, "message": "(return_address_pointer_rtx): New global variable.\n\n(gen_rtx, init_emit_once): Add support for it.\n\nFrom-SVN: r10817", "tree": {"sha": "c340d9870bf8d750e5c135911e17f13af5b447ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c340d9870bf8d750e5c135911e17f13af5b447ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4417a863114d5c9c31c86ed71cc4294d650733c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4417a863114d5c9c31c86ed71cc4294d650733c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4417a863114d5c9c31c86ed71cc4294d650733c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4417a863114d5c9c31c86ed71cc4294d650733c/comments", "author": null, "committer": null, "parents": [{"sha": "8e05e5dde2668819a939cae3f9d702f206deb674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e05e5dde2668819a939cae3f9d702f206deb674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e05e5dde2668819a939cae3f9d702f206deb674"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "3f4958d7ed9be4f4a380255da6842314194262cb", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4417a863114d5c9c31c86ed71cc4294d650733c/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4417a863114d5c9c31c86ed71cc4294d650733c/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=a4417a863114d5c9c31c86ed71cc4294d650733c", "patch": "@@ -159,6 +159,10 @@ rtx static_chain_rtx;\t\t/* (REG:Pmode STATIC_CHAIN_REGNUM) */\n rtx static_chain_incoming_rtx;\t/* (REG:Pmode STATIC_CHAIN_INCOMING_REGNUM) */\n rtx pic_offset_table_rtx;\t/* (REG:Pmode PIC_OFFSET_TABLE_REGNUM) */\n \n+/* This is used to implement __builtin_return_address for some machines.\n+   See for instance the MIPS port.  */\n+rtx return_address_pointer_rtx;\t/* (REG:Pmode RETURN_ADDRESS_POINTER_REGNUM) */\n+\n rtx virtual_incoming_args_rtx;\t/* (REG:Pmode VIRTUAL_INCOMING_ARGS_REGNUM) */\n rtx virtual_stack_vars_rtx;\t/* (REG:Pmode VIRTUAL_STACK_VARS_REGNUM) */\n rtx virtual_stack_dynamic_rtx;\t/* (REG:Pmode VIRTUAL_STACK_DYNAMIC_REGNUM) */\n@@ -344,6 +348,11 @@ gen_rtx VPROTO((enum rtx_code code, enum machine_mode mode, ...))\n       if (arg_pointer_rtx && regno == ARG_POINTER_REGNUM && mode == Pmode\n \t  && ! reload_in_progress)\n \treturn arg_pointer_rtx;\n+#endif\n+#ifdef RETURN_ADDRESS_POINTER_REGNUM\n+      if (return_address_pointer_rtx && regno == RETURN_ADDRESS_POINTER_REGNUM\n+\t  && mode == Pmode && ! reload_in_progress)\n+\treturn return_address_pointer_rtx;\n #endif\n       if (stack_pointer_rtx && regno == STACK_POINTER_REGNUM && mode == Pmode\n \t  && ! reload_in_progress)\n@@ -3392,6 +3401,11 @@ init_emit_once (line_numbers)\n   else\n     arg_pointer_rtx = gen_rtx (REG, Pmode, ARG_POINTER_REGNUM);\n \n+#ifdef RETURN_ADDRESS_POINTER_REGNUM\n+  return_address_pointer_rtx = gen_rtx (REG, Pmode,\n+\t\t\t\t\tRETURN_ADDRESS_POINTER_REGNUM);\n+#endif\n+\n   /* Create the virtual registers.  Do so here since the following objects\n      might reference them.  */\n "}]}