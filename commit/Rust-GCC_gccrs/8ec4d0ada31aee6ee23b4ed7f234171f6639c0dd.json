{"sha": "8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVjNGQwYWRhMzFhZWU2ZWUyM2I0ZWQ3ZjIzNDE3MWY2NjM5YzBkZA==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2010-01-14T10:40:19Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2010-01-14T10:40:19Z"}, "message": "re PR rtl-optimization/39453 (ICE : in init_seqno, at sel-sched.c:6433)\n\n2010-01-14  Alexander Monakov  <amonakov@ispras.ru>\n\n\tPR rtl-optimization/39453\n\tPR rtl-optimization/42246\n\t* sel-sched-ir.c (considered_for_pipelining_p): Do not test\n\tfor pipelining_p.\n\t(sel_add_loop_preheaders): Add preheader to last_added_blocks.\n\n\t* gcc.dg/pr39453.c: New.\n\t* gcc.dg/pr42246.c: New.\n\nFrom-SVN: r155892", "tree": {"sha": "e323315c55868e5b80a92761215614a104d56236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e323315c55868e5b80a92761215614a104d56236"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b342bc1fb6df74545e0f33bf8606ac19a66aca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b342bc1fb6df74545e0f33bf8606ac19a66aca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b342bc1fb6df74545e0f33bf8606ac19a66aca9"}], "stats": {"total": 74, "additions": 73, "deletions": 1}, "files": [{"sha": "768e12598cc5fe8f55e305e0f55bbd0a1c63217f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd", "patch": "@@ -1,3 +1,11 @@\n+2010-01-14  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/39453\n+\tPR rtl-optimization/42246\n+\t* sel-sched-ir.c (considered_for_pipelining_p): Do not test\n+\tfor pipelining_p.\n+\t(sel_add_loop_preheaders): Add preheader to last_added_blocks.\n+\n 2010-01-14  Andrey Belevantsev  <abel@ispras.ru>\n \t    Alexander Monakov  <amonakov@ispras.ru>\n "}, {"sha": "218c04e5bf197817e7e7abf5bfd1236c9f0ea3db", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd", "patch": "@@ -5883,7 +5883,7 @@ considered_for_pipelining_p (struct loop *loop)\n      latch.  We can't use header here, because this header could be\n      just removed preheader and it will give us the wrong region number.\n      Latch can't be used because it could be in the inner loop too.  */\n-  if (LOOP_MARKED_FOR_PIPELINING_P (loop) && pipelining_p)\n+  if (LOOP_MARKED_FOR_PIPELINING_P (loop))\n     {\n       int rgn = CONTAINING_RGN (loop->latch->index);\n \n@@ -6032,7 +6032,10 @@ sel_add_loop_preheaders (void)\n   for (i = 0;\n        VEC_iterate (basic_block, preheader_blocks, i, bb);\n        i++)\n+    {\n+      VEC_safe_push (basic_block, heap, last_added_blocks, bb);\n       sel_add_bb (bb);\n+    }\n \n   VEC_free (basic_block, heap, preheader_blocks);\n }"}, {"sha": "af31ac36ba27c19337725b8126065ef93c3aaab8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd", "patch": "@@ -1,3 +1,10 @@\n+2010-01-14  Alexander Monakov <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/39453\n+\tPR rtl-optimization/42246\n+\t* gcc.dg/pr39453.c: New.\n+\t* gcc.dg/pr42246.c: New.\n+\n 2010-01-14  Alexander Monakov <amonakov@ispras.ru>\n \n \tPR middle-end/42245"}, {"sha": "66ecc3fa0208c3c3bb011c75b6582ca4a805374a", "filename": "gcc/testsuite/gcc.dg/pr39453.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39453.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39453.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39453.c?ref=8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target powerpc*-*-* ia64-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -fselective-scheduling2 -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops\" } */\n+\n+int foo(int k, int n)\n+{\n+  int i;\n+  for (i = 0; i < n; i += 8) {\n+    int j;\n+    for (j = 0; j < n; j += 8) {\n+      while (k < n) {\n+        k += 8;\n+      }\n+    }\n+  }\n+  return k;\n+}\n+\n+"}, {"sha": "ee17a211210c0694bd95808f412b5ab1d1598bf6", "filename": "gcc/testsuite/gcc.dg/pr42246.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42246.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42246.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42246.c?ref=8ec4d0ada31aee6ee23b4ed7f234171f6639c0dd", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile { target powerpc*-*-* ia64-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -fselective-scheduling -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops\" } */\n+\n+typedef enum\n+{\n+  empty = 0, pawn = 1, knight = 2, king = 3, bishop = 5, rook = 6, queen = 7\n+}\n+PIECE;\n+extern int p_values[15];\n+extern int *last[65];\n+int\n+Quiesce (int alpha, int beta, int wtm, int ply)\n+{\n+  register int initial_alpha, value, delta;\n+  register int *goodmv, *movep, moves = 0, *sortv, temp;\n+  for (movep = last[ply - 1]; movep < last[ply]; movep++)\n+    if (p_values[(((*movep) >> 15) & 7) + 7] +\n+        p_values[(((*movep) >> 18) & 7) + 7] >= delta)\n+      {\n+        register int done;\n+        register int *end = last[ply - 1] + moves - 1;\n+        do\n+          {\n+            done = 1;\n+            movep = last[ply - 1];\n+            for (; movep < end; movep++, sortv++)\n+              if (*sortv < *(sortv + 1))\n+                {\n+                  *(movep + 1) = temp;\n+                  done = 0;\n+                }\n+          }\n+        while (!done);\n+      }\n+}\n+"}]}