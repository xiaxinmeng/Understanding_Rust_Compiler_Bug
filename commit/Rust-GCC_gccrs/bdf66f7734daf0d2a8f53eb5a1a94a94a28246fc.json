{"sha": "bdf66f7734daf0d2a8f53eb5a1a94a94a28246fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRmNjZmNzczNGRhZjBkMmE4ZjUzZWI1YTFhOTRhOTRhMjgyNDZmYw==", "commit": {"author": {"name": "Marcel B\u00f6hme", "email": "boehme.marcel@gmail.com", "date": "2016-04-08T12:10:21Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-04-08T12:10:21Z"}, "message": "Fix memory allocation size overflows (PR69687, patch by Marcel B\u00f6hme)\n\n\tPR c++/69687\n\t* cplus-dem.c: Include <limits.h> if available.\n\t(INT_MAX): Define if necessary.\n\t(remember_type, remember_Ktype, register_Btype, string_need):\n\tAbort if we detect cases where we the size of the allocation would\n\toverflow.\n\nFrom-SVN: r234829", "tree": {"sha": "cfa89c5025da2434c49ea375c858dac4c4e7233d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfa89c5025da2434c49ea375c858dac4c4e7233d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdf66f7734daf0d2a8f53eb5a1a94a94a28246fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdf66f7734daf0d2a8f53eb5a1a94a94a28246fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdf66f7734daf0d2a8f53eb5a1a94a94a28246fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdf66f7734daf0d2a8f53eb5a1a94a94a28246fc/comments", "author": {"login": "dbgbench", "id": 29189320, "node_id": "MDQ6VXNlcjI5MTg5MzIw", "avatar_url": "https://avatars.githubusercontent.com/u/29189320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbgbench", "html_url": "https://github.com/dbgbench", "followers_url": "https://api.github.com/users/dbgbench/followers", "following_url": "https://api.github.com/users/dbgbench/following{/other_user}", "gists_url": "https://api.github.com/users/dbgbench/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbgbench/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbgbench/subscriptions", "organizations_url": "https://api.github.com/users/dbgbench/orgs", "repos_url": "https://api.github.com/users/dbgbench/repos", "events_url": "https://api.github.com/users/dbgbench/events{/privacy}", "received_events_url": "https://api.github.com/users/dbgbench/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59dad006fa31fe3355defcd6b38ab70fd7d2737f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59dad006fa31fe3355defcd6b38ab70fd7d2737f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59dad006fa31fe3355defcd6b38ab70fd7d2737f"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "2a3435623a8fea345e11797df1ffb66d65b7ea5c", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdf66f7734daf0d2a8f53eb5a1a94a94a28246fc/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdf66f7734daf0d2a8f53eb5a1a94a94a28246fc/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=bdf66f7734daf0d2a8f53eb5a1a94a94a28246fc", "patch": "@@ -1,5 +1,12 @@\n 2016-04-08  Marcel B\u00f6hme  <boehme.marcel@gmail.com>\n \n+\tPR c++/69687\n+\t* cplus-dem.c: Include <limits.h> if available.\n+\t(INT_MAX): Define if necessary.\n+\t(remember_type, remember_Ktype, register_Btype, string_need):\n+\tAbort if we detect cases where we the size of the allocation would\n+\toverflow.\n+\n \tPR c++/70498\n \t* cplus-dem.c (gnu_special): Handle case where consume_count returns\n \t-1."}, {"sha": "7514e57913c55f30b339d4753161d735ef35e1fd", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdf66f7734daf0d2a8f53eb5a1a94a94a28246fc/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdf66f7734daf0d2a8f53eb5a1a94a94a28246fc/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=bdf66f7734daf0d2a8f53eb5a1a94a94a28246fc", "patch": "@@ -56,6 +56,13 @@ void * malloc ();\n void * realloc ();\n #endif\n \n+#ifdef HAVE_LIMITS_H\n+#include <limits.h>\n+#endif\n+#ifndef INT_MAX\n+# define INT_MAX       (int)(((unsigned int) ~0) >> 1)          /* 0x7FFFFFFF */ \n+#endif\n+\n #include <demangle.h>\n #undef CURRENT_DEMANGLING_STYLE\n #define CURRENT_DEMANGLING_STYLE work->options\n@@ -4261,6 +4268,8 @@ remember_type (struct work_stuff *work, const char *start, int len)\n \t}\n       else\n \t{\n+          if (work -> typevec_size > INT_MAX / 2)\n+\t    xmalloc_failed (INT_MAX);\n \t  work -> typevec_size *= 2;\n \t  work -> typevec\n \t    = XRESIZEVEC (char *, work->typevec, work->typevec_size);\n@@ -4288,6 +4297,8 @@ remember_Ktype (struct work_stuff *work, const char *start, int len)\n \t}\n       else\n \t{\n+          if (work -> ksize > INT_MAX / 2)\n+\t    xmalloc_failed (INT_MAX);\n \t  work -> ksize *= 2;\n \t  work -> ktypevec\n \t    = XRESIZEVEC (char *, work->ktypevec, work->ksize);\n@@ -4317,6 +4328,8 @@ register_Btype (struct work_stuff *work)\n \t}\n       else\n \t{\n+          if (work -> bsize > INT_MAX / 2)\n+\t    xmalloc_failed (INT_MAX);\n \t  work -> bsize *= 2;\n \t  work -> btypevec\n \t    = XRESIZEVEC (char *, work->btypevec, work->bsize);\n@@ -4771,6 +4784,8 @@ string_need (string *s, int n)\n   else if (s->e - s->p < n)\n     {\n       tem = s->p - s->b;\n+      if (n > INT_MAX / 2 - tem)\n+        xmalloc_failed (INT_MAX); \n       n += tem;\n       n *= 2;\n       s->b = XRESIZEVEC (char, s->b, n);"}]}