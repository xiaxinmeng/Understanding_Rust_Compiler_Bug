{"sha": "cabbe12a2501a0774661a18887da3c55a28f5da8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FiYmUxMmEyNTAxYTA3NzQ2NjFhMTg4ODdkYTNjNTVhMjhmNWRhOA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-03-22T22:53:32Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-03-22T22:53:32Z"}, "message": "s390-opts.h: New.\n\n\t* config/s390/s390-opts.h: New.\n\t* config/s390/s390.c (s390_tune, s390_tune_flags, s390_arch,\n\ts390_arch_flags, s390_warn_framesize, s390_stack_size,\n\ts390_stack_guard): Remove.\n\t(s390_handle_arch_option): Return void.  Take enum\n\ts390_arch_option value instead of string and searching array.\n\t(s390_handle_option): Don't assert that global structures are in\n\tuse.  Access variables via opts pointer.  Use error_at.  Don't use\n\tsscanf for -mstack-guard= or -mstack-size=.  Update call to\n\ts390_handle_arch_option.\n\t(s390_option_override): Update call to s390_handle_arch_option.\n\t(s390_emit_prologue): Use %d format for s390_stack_size in\n\tdiagnostic.  Use %wd for HOST_WIDE_INT.\n\t* config/s390/s390.h (enum processor_type): Move to s390-opts.h.\n\t(s390_tune, s390_tune_flags, s390_arch, s390_arch_flags): Remove.\n\t* config/s390/s390.opt (config/s390/s390-opts.h): New\n\tHeaderInclude entry.\n\t(s390_arch_string, s390_tune, s390_tune_flags, s390_arch,\n\ts390_arch_flags, s390_warn_framesize): New Variable entries.\n\t(s390_arch_option): New Enum and EnumValue entries.\n\t(march=): Use Enum instead of Var.\n\t(mstack-guard=, mstack-size=): Use UInteger and Var.\n\t(mtune=): Use Enum.\n\nFrom-SVN: r171330", "tree": {"sha": "20b80376c76c0d1e3fd95e7fb3629d586c02e525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20b80376c76c0d1e3fd95e7fb3629d586c02e525"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cabbe12a2501a0774661a18887da3c55a28f5da8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cabbe12a2501a0774661a18887da3c55a28f5da8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cabbe12a2501a0774661a18887da3c55a28f5da8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cabbe12a2501a0774661a18887da3c55a28f5da8/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05b12036e2747d540392008c6b177a6414e2e29d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05b12036e2747d540392008c6b177a6414e2e29d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05b12036e2747d540392008c6b177a6414e2e29d"}], "stats": {"total": 260, "additions": 177, "deletions": 83}, "files": [{"sha": "b0580ad7546585e3ae111dde84a3fe0c400d0642", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabbe12a2501a0774661a18887da3c55a28f5da8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabbe12a2501a0774661a18887da3c55a28f5da8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cabbe12a2501a0774661a18887da3c55a28f5da8", "patch": "@@ -1,3 +1,29 @@\n+2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/s390/s390-opts.h: New.\n+\t* config/s390/s390.c (s390_tune, s390_tune_flags, s390_arch,\n+\ts390_arch_flags, s390_warn_framesize, s390_stack_size,\n+\ts390_stack_guard): Remove.\n+\t(s390_handle_arch_option): Return void.  Take enum\n+\ts390_arch_option value instead of string and searching array.\n+\t(s390_handle_option): Don't assert that global structures are in\n+\tuse.  Access variables via opts pointer.  Use error_at.  Don't use\n+\tsscanf for -mstack-guard= or -mstack-size=.  Update call to\n+\ts390_handle_arch_option.\n+\t(s390_option_override): Update call to s390_handle_arch_option.\n+\t(s390_emit_prologue): Use %d format for s390_stack_size in\n+\tdiagnostic.  Use %wd for HOST_WIDE_INT.\n+\t* config/s390/s390.h (enum processor_type): Move to s390-opts.h.\n+\t(s390_tune, s390_tune_flags, s390_arch, s390_arch_flags): Remove.\n+\t* config/s390/s390.opt (config/s390/s390-opts.h): New\n+\tHeaderInclude entry.\n+\t(s390_arch_string, s390_tune, s390_tune_flags, s390_arch,\n+\ts390_arch_flags, s390_warn_framesize): New Variable entries.\n+\t(s390_arch_option): New Enum and EnumValue entries.\n+\t(march=): Use Enum instead of Var.\n+\t(mstack-guard=, mstack-size=): Use UInteger and Var.\n+\t(mtune=): Use Enum.\n+\n 2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/score/score.c (score_handle_option): Don't assert that"}, {"sha": "fba8711c5dd0b95e1f88f4e12b4ad797956e1b28", "filename": "gcc/config/s390/s390-opts.h", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabbe12a2501a0774661a18887da3c55a28f5da8/gcc%2Fconfig%2Fs390%2Fs390-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabbe12a2501a0774661a18887da3c55a28f5da8/gcc%2Fconfig%2Fs390%2Fs390-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-opts.h?ref=cabbe12a2501a0774661a18887da3c55a28f5da8", "patch": "@@ -0,0 +1,57 @@\n+/* Definitions for option handling for IBM S/390.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n+   2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef S390_OPTS_H\n+#define S390_OPTS_H\n+\n+/* Which processor to generate code or schedule for. The cpu attribute\n+   defines a list that mirrors this list, so changes to s390.md must be\n+   made at the same time.  */\n+\n+enum processor_type\n+{\n+  PROCESSOR_9672_G5,\n+  PROCESSOR_9672_G6,\n+  PROCESSOR_2064_Z900,\n+  PROCESSOR_2084_Z990,\n+  PROCESSOR_2094_Z9_109,\n+  PROCESSOR_2097_Z10,\n+  PROCESSOR_2817_Z196,\n+  PROCESSOR_max\n+};\n+\n+/* This enumeration must match processor_alias_table in\n+   s390_handle_arch_option.  It is different from enum processor_type\n+   because some processors differ for option handling but not for\n+   scheduling.  */\n+\n+enum s390_arch_option\n+{\n+  s390_arch_g5,\n+  s390_arch_g6,\n+  s390_arch_z900,\n+  s390_arch_z990,\n+  s390_arch_z9_109,\n+  s390_arch_z9_ec,\n+  s390_arch_z10,\n+  s390_arch_z196\n+};\n+\n+#endif"}, {"sha": "671d8015a664d473e5b3dba27449c74a69c98fb7", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 38, "deletions": 56, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabbe12a2501a0774661a18887da3c55a28f5da8/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabbe12a2501a0774661a18887da3c55a28f5da8/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=cabbe12a2501a0774661a18887da3c55a28f5da8", "patch": "@@ -278,17 +278,6 @@ struct s390_address\n   bool literal_pool;\n };\n \n-/* Which cpu are we tuning for.  */\n-enum processor_type s390_tune = PROCESSOR_max;\n-int s390_tune_flags;\n-/* Which instruction set architecture to use.  */\n-enum processor_type s390_arch;\n-int s390_arch_flags;\n-\n-HOST_WIDE_INT s390_warn_framesize = 0;\n-HOST_WIDE_INT s390_stack_size = 0;\n-HOST_WIDE_INT s390_stack_guard = 0;\n-\n /* The following structure is embedded in the machine\n    specific part of struct function.  */\n \n@@ -1541,88 +1530,81 @@ s390_option_init_struct (struct gcc_options *opts)\n   opts->x_flag_asynchronous_unwind_tables = 1;\n }\n \n-/* Return true if ARG is the name of a processor.  Set *TYPE and *FLAGS\n-   to the associated processor_type and processor_flags if so.  */\n+/* Set *TYPE and *FLAGS to the associated processor_type and\n+   processor_flags for processor ARCH.  */\n \n-static bool\n-s390_handle_arch_option (const char *arg,\n+static void\n+s390_handle_arch_option (enum s390_arch_option arch,\n \t\t\t enum processor_type *type,\n \t\t\t int *flags)\n {\n+  /* This must match enum s390_arch_option in s390-opts.h.  */\n   static struct pta\n     {\n-      const char *const name;\t\t/* processor name or nickname.  */\n       const enum processor_type processor;\n       const int flags;\t\t\t/* From enum processor_flags. */\n     }\n   const processor_alias_table[] =\n     {\n-      {\"g5\", PROCESSOR_9672_G5, PF_IEEE_FLOAT},\n-      {\"g6\", PROCESSOR_9672_G6, PF_IEEE_FLOAT},\n-      {\"z900\", PROCESSOR_2064_Z900, PF_IEEE_FLOAT | PF_ZARCH},\n-      {\"z990\", PROCESSOR_2084_Z990, PF_IEEE_FLOAT | PF_ZARCH\n+      {PROCESSOR_9672_G5, PF_IEEE_FLOAT},\n+      {PROCESSOR_9672_G6, PF_IEEE_FLOAT},\n+      {PROCESSOR_2064_Z900, PF_IEEE_FLOAT | PF_ZARCH},\n+      {PROCESSOR_2084_Z990, PF_IEEE_FLOAT | PF_ZARCH\n \t\t\t\t    | PF_LONG_DISPLACEMENT},\n-      {\"z9-109\", PROCESSOR_2094_Z9_109, PF_IEEE_FLOAT | PF_ZARCH\n+      {PROCESSOR_2094_Z9_109, PF_IEEE_FLOAT | PF_ZARCH\n                                        | PF_LONG_DISPLACEMENT | PF_EXTIMM},\n-      {\"z9-ec\", PROCESSOR_2094_Z9_109, PF_IEEE_FLOAT | PF_ZARCH\n+      {PROCESSOR_2094_Z9_109, PF_IEEE_FLOAT | PF_ZARCH\n                              | PF_LONG_DISPLACEMENT | PF_EXTIMM | PF_DFP },\n-      {\"z10\", PROCESSOR_2097_Z10, PF_IEEE_FLOAT | PF_ZARCH\n+      {PROCESSOR_2097_Z10, PF_IEEE_FLOAT | PF_ZARCH\n        | PF_LONG_DISPLACEMENT | PF_EXTIMM | PF_DFP | PF_Z10},\n-      {\"z196\", PROCESSOR_2817_Z196, PF_IEEE_FLOAT | PF_ZARCH\n+      {PROCESSOR_2817_Z196, PF_IEEE_FLOAT | PF_ZARCH\n        | PF_LONG_DISPLACEMENT | PF_EXTIMM | PF_DFP | PF_Z10 | PF_Z196 },\n     };\n-  size_t i;\n-\n-  for (i = 0; i < ARRAY_SIZE (processor_alias_table); i++)\n-    if (strcmp (arg, processor_alias_table[i].name) == 0)\n-      {\n-\t*type = processor_alias_table[i].processor;\n-\t*flags = processor_alias_table[i].flags;\n-\treturn true;\n-      }\n \n-  *type = PROCESSOR_max;\n-  *flags = 0;\n-  return false;\n+  *type = processor_alias_table[(int) arch].processor;\n+  *flags = processor_alias_table[(int) arch].flags;\n }\n \n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-s390_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+s390_handle_option (struct gcc_options *opts,\n+\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n \t\t    const struct cl_decoded_option *decoded,\n-\t\t    location_t loc ATTRIBUTE_UNUSED)\n+\t\t    location_t loc)\n {\n   size_t code = decoded->opt_index;\n   const char *arg = decoded->arg;\n-\n-  gcc_assert (opts == &global_options);\n-  gcc_assert (opts_set == &global_options_set);\n+  int value = decoded->value;\n \n   switch (code)\n     {\n     case OPT_march_:\n-      return s390_handle_arch_option (arg, &s390_arch, &s390_arch_flags);\n+      s390_handle_arch_option ((enum s390_arch_option) value,\n+\t\t\t       &opts->x_s390_arch,\n+\t\t\t       &opts->x_s390_arch_flags);\n+      opts->x_s390_arch_string = arg;\n+      return true;\n \n     case OPT_mstack_guard_:\n-      if (sscanf (arg, HOST_WIDE_INT_PRINT_DEC, &s390_stack_guard) != 1)\n-\treturn false;\n-      if (exact_log2 (s390_stack_guard) == -1)\n-\terror (\"stack guard value must be an exact power of 2\");\n+      if (exact_log2 (value) == -1)\n+\terror_at (loc, \"stack guard value must be an exact power of 2\");\n       return true;\n \n     case OPT_mstack_size_:\n-      if (sscanf (arg, HOST_WIDE_INT_PRINT_DEC, &s390_stack_size) != 1)\n-\treturn false;\n-      if (exact_log2 (s390_stack_size) == -1)\n-\terror (\"stack size must be an exact power of 2\");\n+      if (exact_log2 (value) == -1)\n+\terror_at (loc, \"stack size must be an exact power of 2\");\n       return true;\n \n     case OPT_mtune_:\n-      return s390_handle_arch_option (arg, &s390_tune, &s390_tune_flags);\n+      s390_handle_arch_option ((enum s390_arch_option) value,\n+\t\t\t       &opts->x_s390_tune,\n+\t\t\t       &opts->x_s390_tune_flags);\n+      return true;\n \n     case OPT_mwarn_framesize_:\n-      return sscanf (arg, HOST_WIDE_INT_PRINT_DEC, &s390_warn_framesize) == 1;\n+      return sscanf (arg, HOST_WIDE_INT_PRINT_DEC,\n+\t\t     &opts->x_s390_warn_framesize) == 1;\n \n     default:\n       return true;\n@@ -1648,7 +1630,8 @@ s390_option_override (void)\n   if (!s390_arch_string)\n     {\n       s390_arch_string = TARGET_ZARCH? \"z900\" : \"g5\";\n-      s390_handle_arch_option (s390_arch_string, &s390_arch, &s390_arch_flags);\n+      s390_handle_arch_option ((TARGET_ZARCH ? s390_arch_z900 : s390_arch_g5),\n+\t\t\t       &s390_arch, &s390_arch_flags);\n     }\n \n   /* This check is triggered when the user specified a wrong -march=\n@@ -8162,10 +8145,9 @@ s390_emit_prologue (void)\n \n \t  if (cfun_frame_layout.frame_size >= s390_stack_size)\n \t    {\n-\t      warning (0, \"frame size of function %qs is \"\n-\t\t       HOST_WIDE_INT_PRINT_DEC\n+\t      warning (0, \"frame size of function %qs is %wd\"\n \t\t       \" bytes exceeding user provided stack limit of \"\n-\t\t       HOST_WIDE_INT_PRINT_DEC \" bytes.  \"\n+\t\t       \"%d bytes.  \"\n \t\t       \"An unconditional trap is added.\",\n \t\t       current_function_name(), cfun_frame_layout.frame_size,\n \t\t       s390_stack_size);"}, {"sha": "c6ba4ff2453ae58715e49a2d504ab6e0dad94a65", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabbe12a2501a0774661a18887da3c55a28f5da8/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabbe12a2501a0774661a18887da3c55a28f5da8/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=cabbe12a2501a0774661a18887da3c55a28f5da8", "patch": "@@ -24,22 +24,6 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef _S390_H\n #define _S390_H\n \n-/* Which processor to generate code or schedule for. The cpu attribute\n-   defines a list that mirrors this list, so changes to s390.md must be\n-   made at the same time.  */\n-\n-enum processor_type\n-{\n-  PROCESSOR_9672_G5,\n-  PROCESSOR_9672_G6,\n-  PROCESSOR_2064_Z900,\n-  PROCESSOR_2084_Z990,\n-  PROCESSOR_2094_Z9_109,\n-  PROCESSOR_2097_Z10,\n-  PROCESSOR_2817_Z196,\n-  PROCESSOR_max\n-};\n-\n /* Optional architectural facilities supported by the processor.  */\n \n enum processor_flags\n@@ -53,16 +37,10 @@ enum processor_flags\n   PF_Z196 = 64\n };\n \n-extern enum processor_type s390_tune;\n-extern int s390_tune_flags;\n-\n /* This is necessary to avoid a warning about comparing different enum\n    types.  */\n #define s390_tune_attr ((enum attr_cpu)s390_tune)\n \n-extern enum processor_type s390_arch;\n-extern int s390_arch_flags;\n-\n /* These flags indicate that the generated code should run on a cpu\n    providing the respective hardware facility regardless of the\n    current cpu mode (ESA or z/Architecture).  */"}, {"sha": "2bb78b640a4fa91001c7a8fc1f9a008a63247a35", "filename": "gcc/config/s390/s390.opt", "status": "modified", "additions": 56, "deletions": 5, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabbe12a2501a0774661a18887da3c55a28f5da8/gcc%2Fconfig%2Fs390%2Fs390.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabbe12a2501a0774661a18887da3c55a28f5da8/gcc%2Fconfig%2Fs390%2Fs390.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.opt?ref=cabbe12a2501a0774661a18887da3c55a28f5da8", "patch": "@@ -1,6 +1,6 @@\n ; Options for the S/390 / zSeries port of the compiler.\n \n-; Copyright (C) 2005, 2006, 2007, 2010 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2006, 2007, 2010, 2011 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -18,6 +18,30 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n+HeaderInclude\n+config/s390/s390-opts.h\n+\n+; The architecture name to use in diagnostics.\n+Variable\n+const char *s390_arch_string\n+\n+; Which cpu are we tuning for.\n+Variable\n+enum processor_type s390_tune = PROCESSOR_max\n+\n+Variable\n+int s390_tune_flags\n+\n+; Which instruction set architecture to use.\n+Variable\n+enum processor_type s390_arch\n+\n+Variable\n+int s390_arch_flags\n+\n+Variable\n+HOST_WIDE_INT s390_warn_framesize = 0\n+\n m31\n Target Report RejectNegative Negative(m64) InverseMask(64BIT)\n 31 bit ABI\n@@ -27,9 +51,36 @@ Target Report RejectNegative Negative(m31) Mask(64BIT)\n 64 bit ABI\n \n march=\n-Target RejectNegative Joined Var(s390_arch_string)\n+Target RejectNegative Joined Enum(s390_arch_option)\n Generate code for given CPU\n \n+Enum\n+Name(s390_arch_option) Type(enum s390_arch_option)\n+\n+EnumValue\n+Enum(s390_arch_option) String(g5) Value(s390_arch_g5)\n+\n+EnumValue\n+Enum(s390_arch_option) String(g6) Value(s390_arch_g6)\n+\n+EnumValue\n+Enum(s390_arch_option) String(z900) Value(s390_arch_z900)\n+\n+EnumValue\n+Enum(s390_arch_option) String(z990) Value(s390_arch_z990)\n+\n+EnumValue\n+Enum(s390_arch_option) String(z9-109) Value(s390_arch_z9_109)\n+\n+EnumValue\n+Enum(s390_arch_option) String(z9-ec) Value(s390_arch_z9_ec)\n+\n+EnumValue\n+Enum(s390_arch_option) String(z10) Value(s390_arch_z10)\n+\n+EnumValue\n+Enum(s390_arch_option) String(z196) Value(s390_arch_z196)\n+\n mbackchain\n Target Report Mask(BACKCHAIN)\n Maintain backchain pointer\n@@ -71,15 +122,15 @@ Target Report RejectNegative Negative(mhard-float) Mask(SOFT_FLOAT)\n Disable hardware floating point\n \n mstack-guard=\n-Target RejectNegative Joined\n+Target RejectNegative Joined UInteger Var(s390_stack_guard)\n Set the max. number of bytes which has to be left to stack size before a trap instruction is triggered\n \n mstack-size=\n-Target RejectNegative Joined\n+Target RejectNegative Joined UInteger Var(s390_stack_size)\n Emit extra code in the function prologue in order to trap if the stack size exceeds the given limit\n \n mtune=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Enum(s390_arch_option)\n Schedule code for given CPU\n \n mmvcle"}]}