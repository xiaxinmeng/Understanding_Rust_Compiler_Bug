{"sha": "b5434ee085ff13e95435313b907eff3f2f99f931", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU0MzRlZTA4NWZmMTNlOTU0MzUzMTNiOTA3ZWZmM2YyZjk5ZjkzMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-08-29T00:51:31Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-08-29T00:51:31Z"}, "message": "cp-tree.def (LABEL_STMT): New tree node.\n\n\t* cp-tree.def (LABEL_STMT): New tree node.\n\t(LABEL_STMT_LABEL): New macro.\n\t(shadow_label): Remove.\n\t(declare_local_label): New function.\n\t(finish_label_decl): Likewise.\n\t* decl.c (make_label_decl): New function, split out from\n\tlookup_label.\n\t(shadowed_labels): Remove.\n\t(binding_level): Add shadowed_labels.\n\t(clear_binding_level): Remove.\n\t(push_binding_level): Just bzero the new binding level.\n\t(pushlevel): Fix indentation.\n\t(pop_label): New function.\n\t(pop_labels): Likewise, split out from poplevel.\n\t(poplevel): Pop local labels.  Use pop_labels.\n\t(maybe_push_to_top_level): Don't clear shadowed_labels.\n\t(lookup_label): Use make_label_decl.\n\t(shadow_label): Remove.\n\t(declare_local_label): New function.\n\t(define_label): Simplify.\n\t(start_function): Don't clear shadowed_labels.\n\t(cp_function): Remove shadowed_labels.\n\t(push_cp_function_context): Don't save shadowed_labels.\n\t(pop_cp_function_context): Don't restore it.\n\t* dump.c (dequeue_and_dump): Handle LABEL_STMT.\n\t* parse.y (label_decl): Use finish_label_decl.\n\t* pt.c (tsubst_expr): Handle LABEL_STMTs, and local label\n\tdeclarations.\n\t* semantics.c (finish_label_stmt): Add a LABEL_STMT when\n\tbuilding_stmt_tree.\n\t(finish_label_decl): New function.\n\t(expand_stmt): Handle LABEL_STMTs and local label declarations.\n\nFrom-SVN: r28950", "tree": {"sha": "bb9a1aa55eda7536113cfcbec3382d778daf45e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb9a1aa55eda7536113cfcbec3382d778daf45e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5434ee085ff13e95435313b907eff3f2f99f931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5434ee085ff13e95435313b907eff3f2f99f931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5434ee085ff13e95435313b907eff3f2f99f931", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5434ee085ff13e95435313b907eff3f2f99f931/comments", "author": null, "committer": null, "parents": [{"sha": "5aabad0023667049e899ee4d16688a8b6bd73e48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aabad0023667049e899ee4d16688a8b6bd73e48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5aabad0023667049e899ee4d16688a8b6bd73e48"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "5c32998fc9ade67d4813134c2ee52cf4a7dfd623", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5434ee085ff13e95435313b907eff3f2f99f931/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5434ee085ff13e95435313b907eff3f2f99f931/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b5434ee085ff13e95435313b907eff3f2f99f931", "patch": "@@ -43,7 +43,7 @@ Boston, MA 02111-1307, USA.  */\n       DELETE_EXPR_USE_VEC (in DELETE_EXPR).\n       (TREE_CALLS_NEW) (in _EXPR or _REF) (commented-out).\n       TYPE_USES_COMPLEX_INHERITANCE (in _TYPE).\n-      C_DECLARED_LABEL_FLAG.\n+      C_DECLARED_LABEL_FLAG (in LABEL_DECL)\n       INHERITED_VALUE_BINDING_P (in CPLUS_BINDING)\n       BASELINK_P (in TREE_LIST)\n       ICS_ELLIPSIS_FLAG (in _CONV)\n@@ -2159,6 +2159,7 @@ extern int flag_new_for_scope;\n #define DECL_STMT_DECL(NODE)    TREE_OPERAND (NODE, 0)\n #define STMT_EXPR_STMT(NODE)    TREE_OPERAND (NODE, 0)\n #define SUBOBJECT_CLEANUP(NODE) TREE_OPERAND (NODE, 0)\n+#define LABEL_STMT_LABEL(NODE)  TREE_OPERAND (NODE, 0)\n \n /* Nonzero for an ASM_STMT if the assembly statement is volatile.  */\n #define ASM_VOLATILE_P(NODE)\t\t\t\\\n@@ -2894,7 +2895,7 @@ extern tree push_using_directive                PROTO((tree));\n extern void push_class_level_binding\t\tPROTO((tree, tree));\n extern tree implicitly_declare\t\t\tPROTO((tree));\n extern tree lookup_label\t\t\tPROTO((tree));\n-extern tree shadow_label\t\t\tPROTO((tree));\n+extern tree declare_local_label                 PROTO((tree));\n extern tree define_label\t\t\tPROTO((char *, int, tree));\n extern void push_switch\t\t\t\tPROTO((void));\n extern void pop_switch\t\t\t\tPROTO((void));\n@@ -3360,6 +3361,7 @@ extern tree begin_compound_stmt                 PROTO((int));\n extern tree finish_compound_stmt                PROTO((int, tree));\n extern void finish_asm_stmt                     PROTO((tree, tree, tree, tree, tree));\n extern void finish_label_stmt                   PROTO((tree));\n+extern void finish_label_decl                   PROTO((tree));\n extern void finish_subobject                    PROTO((tree));\n extern tree finish_parenthesized_expr           PROTO((tree));\n extern tree begin_stmt_expr                     PROTO((void));"}]}