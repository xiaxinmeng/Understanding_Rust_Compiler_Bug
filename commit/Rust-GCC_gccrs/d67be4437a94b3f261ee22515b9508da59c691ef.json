{"sha": "d67be4437a94b3f261ee22515b9508da59c691ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY3YmU0NDM3YTk0YjNmMjYxZWUyMjUxNWI5NTA4ZGE1OWM2OTFlZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-10-26T23:50:40Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-10-26T23:50:40Z"}, "message": "Protect more algorithms from overloaded comma operators\n\n\t* include/bits/stl_algo.h (__find_if_not_n, generate_n): Cast to void\n\tto ensure overloaded comma not used.\n\t* include/bits/stl_algobase.h (__fill_n_a, equal): Likewise.\n\t* include/bits/stl_uninitialized.h (__uninitialized_fill_n)\n\t(__uninitialized_fill_n_a, __uninitialized_default_n_1)\n\t(__uninitialized_default_n_a, __uninitialized_copy_n)\n\t(__uninitialized_copy_n_pair): Likewise\n\t* testsuite/20_util/specialized_algorithms/memory_management_tools/1.cc:\n\tUse test iterator wrappers with overloaded comma operator.\n\t* testsuite/25_algorithms/fill_n/1.cc: Likewise.\n\t* testsuite/25_algorithms/generate_n/1.cc: New test.\n\t* testsuite/25_algorithms/stable_partition/1.cc: New test.\n\t* testsuite/util/testsuite_iterators.h (operator,): Add deleted\n\tnon-member comma operator with iterator wrappers as right operand.\n\nFrom-SVN: r254128", "tree": {"sha": "102e630a448b23221458eabdc5ea069db19503fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/102e630a448b23221458eabdc5ea069db19503fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d67be4437a94b3f261ee22515b9508da59c691ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d67be4437a94b3f261ee22515b9508da59c691ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d67be4437a94b3f261ee22515b9508da59c691ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d67be4437a94b3f261ee22515b9508da59c691ef/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1b76fde8ffaa74dffc895c2e2e625e30428b435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1b76fde8ffaa74dffc895c2e2e625e30428b435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1b76fde8ffaa74dffc895c2e2e625e30428b435"}], "stats": {"total": 206, "additions": 159, "deletions": 47}, "files": [{"sha": "c53e12b7c37dca4cce6fd706248589ab1d7918ba", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67be4437a94b3f261ee22515b9508da59c691ef/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67be4437a94b3f261ee22515b9508da59c691ef/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d67be4437a94b3f261ee22515b9508da59c691ef", "patch": "@@ -1,3 +1,20 @@\n+2017-10-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_algo.h (__find_if_not_n, generate_n): Cast to void\n+\tto ensure overloaded comma not used.\n+\t* include/bits/stl_algobase.h (__fill_n_a, equal): Likewise.\n+\t* include/bits/stl_uninitialized.h (__uninitialized_fill_n)\n+\t(__uninitialized_fill_n_a, __uninitialized_default_n_1)\n+\t(__uninitialized_default_n_a, __uninitialized_copy_n)\n+\t(__uninitialized_copy_n_pair): Likewise\n+\t* testsuite/20_util/specialized_algorithms/memory_management_tools/1.cc:\n+\tUse test iterator wrappers with overloaded comma operator.\n+\t* testsuite/25_algorithms/fill_n/1.cc: Likewise.\n+\t* testsuite/25_algorithms/generate_n/1.cc: New test.\n+\t* testsuite/25_algorithms/stable_partition/1.cc: New test.\n+\t* testsuite/util/testsuite_iterators.h (operator,): Add deleted\n+\tnon-member comma operator with iterator wrappers as right operand.\n+\n 2017-10-26  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tDeduction guides for associative containers, debug mode deduction"}, {"sha": "b5facef55dd7bd885903605cd9989d9e21fa1b76", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67be4437a94b3f261ee22515b9508da59c691ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67be4437a94b3f261ee22515b9508da59c691ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=d67be4437a94b3f261ee22515b9508da59c691ef", "patch": "@@ -180,7 +180,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _InputIterator\n     __find_if_not_n(_InputIterator __first, _Distance& __len, _Predicate __pred)\n     {\n-      for (; __len; --__len, ++__first)\n+      for (; __len; --__len,  (void) ++__first)\n \tif (!__pred(__first))\n \t  break;\n       return __first;\n@@ -4462,7 +4462,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    __typeof__(__gen())>)\n \n       for (__decltype(__n + 0) __niter = __n;\n-\t   __niter > 0; --__niter, ++__first)\n+\t   __niter > 0; --__niter, (void) ++__first)\n \t*__first = __gen();\n       return __first;\n     }"}, {"sha": "bfdfc7ded5e3d471a754d6700d6c8975fc5c4fc1", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67be4437a94b3f261ee22515b9508da59c691ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67be4437a94b3f261ee22515b9508da59c691ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=d67be4437a94b3f261ee22515b9508da59c691ef", "patch": "@@ -738,7 +738,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)\n     {\n       for (__decltype(__n + 0) __niter = __n;\n-\t   __niter > 0; --__niter, ++__first)\n+\t   __niter > 0; --__niter, (void) ++__first)\n \t*__first = __value;\n       return __first;\n     }\n@@ -750,7 +750,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       const _Tp __tmp = __value;\n       for (__decltype(__n + 0) __niter = __n;\n-\t   __niter > 0; --__niter, ++__first)\n+\t   __niter > 0; --__niter, (void) ++__first)\n \t*__first = __tmp;\n       return __first;\n     }\n@@ -796,7 +796,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tstatic bool\n \tequal(_II1 __first1, _II1 __last1, _II2 __first2)\n \t{\n-\t  for (; __first1 != __last1; ++__first1, (void)++__first2)\n+\t  for (; __first1 != __last1; ++__first1, (void) ++__first2)\n \t    if (!(*__first1 == *__first2))\n \t      return false;\n \t  return true;"}, {"sha": "bac3fd01f7a5215ad195a4d75dadb987362e978d", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67be4437a94b3f261ee22515b9508da59c691ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67be4437a94b3f261ee22515b9508da59c691ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=d67be4437a94b3f261ee22515b9508da59c691ef", "patch": "@@ -206,7 +206,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _ForwardIterator __cur = __first;\n \t  __try\n \t    {\n-\t      for (; __n > 0; --__n, ++__cur)\n+\t      for (; __n > 0; --__n, (void) ++__cur)\n \t\tstd::_Construct(std::__addressof(*__cur), __x);\n \t      return __cur;\n \t    }\n@@ -347,7 +347,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __try\n \t{\n \t  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;\n-\t  for (; __n > 0; --__n, ++__cur)\n+\t  for (; __n > 0; --__n, (void) ++__cur)\n \t    __traits::construct(__alloc, std::__addressof(*__cur), __x);\n \t  return __cur;\n \t}\n@@ -523,7 +523,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _ForwardIterator __cur = __first;\n \t  __try\n \t    {\n-\t      for (; __n > 0; --__n, ++__cur)\n+\t      for (; __n > 0; --__n, (void) ++__cur)\n \t\tstd::_Construct(std::__addressof(*__cur));\n \t      return __cur;\n \t    }\n@@ -627,7 +627,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __try\n \t{\n \t  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;\n-\t  for (; __n > 0; --__n, ++__cur)\n+\t  for (; __n > 0; --__n, (void) ++__cur)\n \t    __traits::construct(__alloc, std::__addressof(*__cur));\n \t  return __cur;\n \t}\n@@ -687,7 +687,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _ForwardIterator __cur = __first;\n \t  __try\n \t    {\n-\t      for (; __n > 0; --__n, ++__cur)\n+\t      for (; __n > 0; --__n, (void) ++__cur)\n \t\tstd::_Construct_novalue(std::__addressof(*__cur));\n \t      return __cur;\n \t    }\n@@ -747,7 +747,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _ForwardIterator __cur = __result;\n       __try\n \t{\n-\t  for (; __n > 0; --__n, ++__first, ++__cur)\n+\t  for (; __n > 0; --__n, (void) ++__first, ++__cur)\n \t    std::_Construct(std::__addressof(*__cur), *__first);\n \t  return __cur;\n \t}\n@@ -775,7 +775,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _ForwardIterator __cur = __result;\n       __try\n \t{\n-\t  for (; __n > 0; --__n, ++__first, ++__cur)\n+\t  for (; __n > 0; --__n, (void) ++__first, ++__cur)\n \t    std::_Construct(std::__addressof(*__cur), *__first);\n \t  return {__first, __cur};\n \t}"}, {"sha": "d118dd18ce9e8c58d0b1b58c741158a378a9f708", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/memory_management_tools/1.cc", "status": "modified", "additions": 50, "deletions": 32, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67be4437a94b3f261ee22515b9508da59c691ef/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fmemory_management_tools%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67be4437a94b3f261ee22515b9508da59c691ef/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fmemory_management_tools%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fmemory_management_tools%2F1.cc?ref=d67be4437a94b3f261ee22515b9508da59c691ef", "patch": "@@ -19,8 +19,8 @@\n \n #include <memory>\n #include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n #include <string>\n-#include <array>\n #include <vector>\n #include <sstream>\n \n@@ -56,36 +56,42 @@ struct ThrowAfterN\n   DelCount dc;\n };\n \n+template<typename T>\n+  using FwdIteratorRange\n+    = __gnu_test::test_container<T, __gnu_test::forward_iterator_wrapper>;\n+\n void test01()\n {\n   char test_data[] = \"123456\";\n-  std::uninitialized_default_construct(std::begin(test_data),\n-\t\t\t\t       std::end(test_data));\n+  FwdIteratorRange<char> r(test_data);\n+  std::uninitialized_default_construct(std::begin(r), std::end(r));\n   VERIFY(std::string(test_data) == \"123456\");\n }\n \n void test02()\n {\n   char test_data[] = \"123456\";\n-  std::uninitialized_value_construct(std::begin(test_data),\n-\t\t\t\t       std::end(test_data));\n+  FwdIteratorRange<char> r(test_data);\n+  std::uninitialized_value_construct(std::begin(r), std::end(r));\n   VERIFY(std::string(test_data, 6) == std::string(\"\\0\\0\\0\\0\\0\\0\", 6));\n }\n \n void test03()\n {\n   char test_data[] = \"123456\";\n-  auto end = std::uninitialized_default_construct_n(std::begin(test_data), 6);\n+  FwdIteratorRange<char> r(test_data);\n+  auto end = std::uninitialized_default_construct_n(std::begin(r), 6);\n   VERIFY(std::string(test_data) == \"123456\");\n-  VERIFY( end == test_data + 6 );\n+  VERIFY( end == std::next(r.begin(), 6) );\n }\n \n void test04()\n {\n   char test_data[] = \"123456\";\n-  auto end = std::uninitialized_value_construct_n(std::begin(test_data), 5);\n+  FwdIteratorRange<char> r(test_data);\n+  auto end = std::uninitialized_value_construct_n(std::begin(r), 5);\n   VERIFY(std::string(test_data, 6) == std::string(\"\\0\\0\\0\\0\\0\" \"6\", 6));\n-  VERIFY( end == test_data + 5 );\n+  VERIFY( end == std::next(r.begin(), 5) );\n }\n \n void test05()\n@@ -122,50 +128,62 @@ void test07()\n   free(x);\n }\n \n+struct MoveOnly\n+{\n+  MoveOnly() : val(-1) { }\n+  MoveOnly(MoveOnly&& m) : val(m.val) { m.val = -1; }\n+  int val;\n+};\n+\n void test08()\n {\n-  std::vector<std::unique_ptr<int>> source;\n-  for (int i = 0; i < 10; ++i) source.push_back(std::make_unique<int>(i));\n-  std::unique_ptr<int>* target =\n-    (std::unique_ptr<int>*)malloc(sizeof(std::unique_ptr<int>)*10);\n-  std::uninitialized_move(source.begin(), source.end(), target);\n-  for (const auto& x : source) VERIFY(!x);\n-  for (int i = 0; i < 10; ++i) VERIFY(bool(*(target+i)));\n-  auto end = std::destroy_n(target, 10);\n-  VERIFY( end == target + 10 );\n+  MoveOnly source[10];\n+  for (int i = 0; i < 10; ++i) source[i].val = i;\n+  FwdIteratorRange<MoveOnly> src(source);\n+  MoveOnly* target = (MoveOnly*)malloc(sizeof(MoveOnly)*10);\n+  FwdIteratorRange<MoveOnly> tgt(target, target+10);\n+  auto end = std::uninitialized_move(src.begin(), src.end(), tgt.begin());\n+  VERIFY( end == std::next(tgt.begin(), 10) );\n+  for (const auto& x : source) VERIFY( x.val == -1 );\n+  for (int i = 0; i < 10; ++i) VERIFY( target[i].val == i );\n+  auto end2 = std::destroy_n(tgt.begin(), 10);\n+  VERIFY( end2 == std::next(tgt.begin(), 10) );\n   free(target);\n }\n \n void test09()\n {\n-  std::vector<std::unique_ptr<int>> source;\n-  for (int i = 0; i < 10; ++i) source.push_back(std::make_unique<int>(i));\n-  std::unique_ptr<int>* target =\n-    (std::unique_ptr<int>*)malloc(sizeof(std::unique_ptr<int>)*10);\n-  auto end = std::uninitialized_move_n(source.begin(), 10, target);\n-  VERIFY( end.first == source.begin() + 10 );\n-  VERIFY( end.second == target + 10 );\n-  for (const auto& x : source) VERIFY(!x);\n-  for (int i = 0; i < 10; ++i) VERIFY(bool(*(target+i)));\n-  auto end2 = std::destroy_n(target, 10);\n-  VERIFY( end2 == target + 10 );\n+  MoveOnly source[10];\n+  for (int i = 0; i < 10; ++i) source[i].val = i;\n+  FwdIteratorRange<MoveOnly> src(source);\n+  MoveOnly* target = (MoveOnly*)malloc(sizeof(MoveOnly)*10);\n+  FwdIteratorRange<MoveOnly> tgt(target, target+10);\n+  auto end = std::uninitialized_move_n(src.begin(), 10, tgt.begin());\n+  VERIFY( end.first == std::next(src.begin(), 10) );\n+  VERIFY( end.second == std::next(tgt.begin(), 10) );\n+  for (const auto& x : source) VERIFY( x.val == -1 );\n+  for (int i = 0; i < 10; ++i) VERIFY( target[i].val == i );\n+  auto end2 = std::destroy_n(tgt.begin(), 10);\n+  VERIFY( end2 == std::next(tgt.begin(), 10) );\n   free(target);\n }\n \n void test10()\n {\n   char* x = (char*)malloc(sizeof(char)*10);\n   for (int i = 0; i < 10; ++i) new (x+i) char;\n-  std::destroy(x, x+10);\n+  FwdIteratorRange<char> r(x, x+10);\n+  std::destroy(r.begin(), r.end());\n   free(x);\n }\n \n void test11()\n {\n   char* x = (char*)malloc(sizeof(char)*10);\n   for (int i = 0; i < 10; ++i) new (x+i) char;\n-  auto end = std::destroy_n(x, 10);\n-  VERIFY( end == x + 10 );\n+  FwdIteratorRange<char> r(x, x+10);\n+  auto end = std::destroy_n(r.begin(), 10);\n+  VERIFY( end == std::next(r.begin(), 10) );\n   free(x);\n }\n "}, {"sha": "4d27f0bd22bfa8bc5f9a918ef8ba9155f852bf5c", "filename": "libstdc++-v3/testsuite/25_algorithms/fill_n/1.cc", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67be4437a94b3f261ee22515b9508da59c691ef/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67be4437a94b3f261ee22515b9508da59c691ef/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F1.cc?ref=d67be4437a94b3f261ee22515b9508da59c691ef", "patch": "@@ -22,21 +22,36 @@\n #include <algorithm>\n #include <vector>\n #include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+// Non-scalar type to exercise partial specialization of fill_n implementation.\n+struct Value\n+{\n+  Value(int n) : n(n) { }\n+\n+  operator int() const { return n; }\n+\n+private:\n+  int n;\n+};\n \n void\n test01()\n {\n   using namespace std;\n+  using __gnu_test::test_container;\n+  using __gnu_test::output_iterator_wrapper;\n \n   const int A1[] = {3, 3, 3, 3, 3, 3, 3, 3, 3, 3};\n   const int N1 = sizeof(A1) / sizeof(int);\n   \n   int i1[N1];\n-  fill_n(i1, N1, 3);\n+  test_container<int, output_iterator_wrapper> c1(i1, i1 + N1);\n+  fill_n(c1.begin(), N1, 3);\n   VERIFY( equal(i1, i1 + N1, A1) );\n \n   vector<int> v1(N1);\n-  fill_n(v1.begin(), N1, 3);\n+  fill_n(v1.begin(), N1, Value(3));\n   VERIFY( equal(v1.begin(), v1.end(), A1) );\n \n   const char A2[] = {'\\3', '\\3', '\\3', '\\3', '\\3',"}, {"sha": "dc3cb9f943bf24daa5c984eb3d725736b63a4c3d", "filename": "libstdc++-v3/testsuite/25_algorithms/generate_n/1.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67be4437a94b3f261ee22515b9508da59c691ef/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate_n%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67be4437a94b3f261ee22515b9508da59c691ef/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate_n%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate_n%2F1.cc?ref=d67be4437a94b3f261ee22515b9508da59c691ef", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+struct Inc\n+{\n+  int operator()() { return ++i; }\n+\n+  int i;\n+};\n+\n+void\n+test01()\n+{\n+  const int N = 3;\n+  int array[N];\n+\n+  using __gnu_test::test_container;\n+  using __gnu_test::output_iterator_wrapper;\n+  test_container<int, output_iterator_wrapper> c(array, array + N);\n+  std::generate_n(c.begin(), N, Inc());\n+  VERIFY(array[0] == 1);\n+  VERIFY(array[1] == 2);\n+  VERIFY(array[2] == 3);\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "f29d8170a83f15b45cf00f291ae2925dc0f0b8ee", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_partition/1.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67be4437a94b3f261ee22515b9508da59c691ef/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67be4437a94b3f261ee22515b9508da59c691ef/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2F1.cc?ref=d67be4437a94b3f261ee22515b9508da59c691ef", "patch": "@@ -21,6 +21,7 @@\n #include <functional>\n #include <testsuite_new_operators.h>\n #include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n \n const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n const int B[] = {2, 4, 6, 8, 10, 12, 14, 16, 1, 3, 5, 7, 9, 11, 13, 15, 17};\n@@ -41,11 +42,16 @@ void\n test01()\n {\n   using std::stable_partition;\n+  using __gnu_test::test_container;\n+  using __gnu_test::forward_iterator_wrapper;\n \n   int s1[N];\n   std::copy(A, A + N, s1);\n \n-  VERIFY( stable_partition(s1, s1 + N, Pred()) == s1 + M );\n+  test_container<int, forward_iterator_wrapper> c(s1, s1+N);\n+  forward_iterator_wrapper<int> expected = c.begin();\n+  std::advance(expected, M);\n+  VERIFY( stable_partition(c.begin(), c.end(), Pred()) == expected);\n   VERIFY( std::equal(s1, s1 + N, B) );\n }\n "}, {"sha": "d6b550dd416d9889a56ae0248002c818757f0b18", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67be4437a94b3f261ee22515b9508da59c691ef/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67be4437a94b3f261ee22515b9508da59c691ef/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=d67be4437a94b3f261ee22515b9508da59c691ef", "patch": "@@ -180,6 +180,11 @@ namespace __gnu_test\n #endif\n   };\n \n+#if __cplusplus >= 201103L\n+  template<typename T, typename U>\n+    void operator,(const T&, const output_iterator_wrapper<U>&) = delete;\n+#endif\n+\n   /**\n    * @brief input_iterator wrapper for pointer\n    *\n@@ -270,6 +275,10 @@ namespace __gnu_test\n #endif\n   };\n \n+#if __cplusplus >= 201103L\n+  template<typename T, typename U>\n+    void operator,(const T&, const input_iterator_wrapper<U>&) = delete;\n+#endif\n \n   /**\n    * @brief forward_iterator wrapper for pointer"}]}