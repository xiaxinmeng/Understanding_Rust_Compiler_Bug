{"sha": "34ecdb0f20498d3cdde1a5be9614c2820cc4688f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRlY2RiMGYyMDQ5OGQzY2RkZTFhNWJlOTYxNGMyODIwY2M0Njg4Zg==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2015-07-01T08:45:08Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-07-01T08:45:08Z"}, "message": "[AArch64] Fall back to -fPIC if no support of -fpic in binutils\n\n2015-07-01  Jiong Wang  <jiong.wang@arm.com>\n\n\t* configure.ac: Add check for aarch64 assembler -fpic relocation\n\tmodifier support.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* config/aarch64/aarch64.c (initialize_aarch64_code_model): Fall back\n\tto -fPIC if not support of -fpic relocation modifier in assembler.\n\nFrom-SVN: r225231", "tree": {"sha": "88fa7395dc593ad418400dda519802a9345f60bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88fa7395dc593ad418400dda519802a9345f60bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34ecdb0f20498d3cdde1a5be9614c2820cc4688f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34ecdb0f20498d3cdde1a5be9614c2820cc4688f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34ecdb0f20498d3cdde1a5be9614c2820cc4688f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34ecdb0f20498d3cdde1a5be9614c2820cc4688f/comments", "author": null, "committer": null, "parents": [{"sha": "1d628b1536253c8b18d1b800f287722a098a4dfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d628b1536253c8b18d1b800f287722a098a4dfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d628b1536253c8b18d1b800f287722a098a4dfe"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "e9ba35fbfe1f4805ea7cbf7368bc2dad4e8f1bd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ecdb0f20498d3cdde1a5be9614c2820cc4688f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ecdb0f20498d3cdde1a5be9614c2820cc4688f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34ecdb0f20498d3cdde1a5be9614c2820cc4688f", "patch": "@@ -1,3 +1,12 @@\n+2015-07-01  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* configure.ac: Add check for aarch64 assembler -fpic relocation\n+\tmodifier support.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* config/aarch64/aarch64.c (initialize_aarch64_code_model): Fall back\n+\tto -fPIC if not support of -fpic relocation modifier in assembler.\n+\n 2015-07-01  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR bootstrap/66685"}, {"sha": "b031a62e838327232a62e4eac6aa127402ab7dbc", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ecdb0f20498d3cdde1a5be9614c2820cc4688f/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ecdb0f20498d3cdde1a5be9614c2820cc4688f/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=34ecdb0f20498d3cdde1a5be9614c2820cc4688f", "patch": "@@ -606,6 +606,12 @@\n #endif\n \n \n+/* Define if your assembler supports relocs needed by -fpic. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_SMALL_PIC_RELOCS\n+#endif\n+\n+\n /* Define if your assembler and linker support thread-local storage. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_TLS"}, {"sha": "5d4dc83f44816a5f2ff9e780ce402a634ad1fd83", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ecdb0f20498d3cdde1a5be9614c2820cc4688f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ecdb0f20498d3cdde1a5be9614c2820cc4688f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=34ecdb0f20498d3cdde1a5be9614c2820cc4688f", "patch": "@@ -7581,9 +7581,13 @@ initialize_aarch64_code_model (void)\n \t   aarch64_cmodel = AARCH64_CMODEL_TINY_PIC;\n \t   break;\n \t case AARCH64_CMODEL_SMALL:\n+#ifdef HAVE_AS_SMALL_PIC_RELOCS\n \t   aarch64_cmodel = (flag_pic == 2\n \t\t\t     ? AARCH64_CMODEL_SMALL_PIC\n \t\t\t     : AARCH64_CMODEL_SMALL_SPIC);\n+#else\n+\t   aarch64_cmodel = AARCH64_CMODEL_SMALL_PIC;\n+#endif\n \t   break;\n \t case AARCH64_CMODEL_LARGE:\n \t   sorry (\"code model %qs with -f%s\", \"large\","}, {"sha": "9561e5c71cc19fedb0d70104c509f0d6b1a90fa5", "filename": "gcc/configure", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ecdb0f20498d3cdde1a5be9614c2820cc4688f/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ecdb0f20498d3cdde1a5be9614c2820cc4688f/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=34ecdb0f20498d3cdde1a5be9614c2820cc4688f", "patch": "@@ -24228,6 +24228,40 @@ $as_echo \"#define HAVE_AS_MABI_OPTION 1\" >>confdefs.h\n         done\n       fi\n     fi\n+    # Check if we have binutils support for relocations types needed by -fpic\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for -fpic relocs\" >&5\n+$as_echo_n \"checking assembler for -fpic relocs... \" >&6; }\n+if test \"${gcc_cv_as_aarch64_picreloc+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_aarch64_picreloc=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '\n+\t.text\n+\tldr     x0, [x2, #:gotpage_lo15:globalsym]\n+    ' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_aarch64_picreloc=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_aarch64_picreloc\" >&5\n+$as_echo \"$gcc_cv_as_aarch64_picreloc\" >&6; }\n+if test $gcc_cv_as_aarch64_picreloc = yes; then\n+\n+$as_echo \"#define HAVE_AS_SMALL_PIC_RELOCS 1\" >>confdefs.h\n+\n+fi\n     # Enable default workaround for AArch64 Cortex-A53 erratum 835769.\n     # Check whether --enable-fix-cortex-a53-835769 was given.\n if test \"${enable_fix_cortex_a53_835769+set}\" = set; then :"}, {"sha": "cb1463930c640e9600b9d3329f3683bb4f0bba13", "filename": "gcc/configure.ac", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ecdb0f20498d3cdde1a5be9614c2820cc4688f/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ecdb0f20498d3cdde1a5be9614c2820cc4688f/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=34ecdb0f20498d3cdde1a5be9614c2820cc4688f", "patch": "@@ -3562,6 +3562,13 @@ case \"$target\" in\n         done\n       fi\n     fi\n+    # Check if we have binutils support for relocations types needed by -fpic\n+    gcc_GAS_CHECK_FEATURE([-fpic relocs], gcc_cv_as_aarch64_picreloc,,,\n+    [\n+\t.text\n+\tldr     x0, [[x2, #:gotpage_lo15:globalsym]]\n+    ],,[AC_DEFINE(HAVE_AS_SMALL_PIC_RELOCS, 1,\n+\t[Define if your assembler supports relocs needed by -fpic.])])\n     # Enable default workaround for AArch64 Cortex-A53 erratum 835769.\n     AC_ARG_ENABLE(fix-cortex-a53-835769,\n     ["}]}