{"sha": "76b75018b3d053a890ebe155e47814de14b3c9fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZiNzUwMThiM2QwNTNhODkwZWJlMTU1ZTQ3ODE0ZGUxNGIzYzlmYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-07-15T19:30:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-09-13T16:28:06Z"}, "message": "c++: implement C++17 hardware interference size\n\nThe last missing piece of the C++17 standard library is the hardware\nintereference size constants.  Much of the delay in implementing these has\nbeen due to uncertainty about what the right values are, and even whether\nthere is a single constant value that is suitable; the destructive\ninterference size is intended to be used in structure layout, so program\nABIs will depend on it.\n\nIn principle, both of these values should be the same as the target's L1\ncache line size.  When compiling for a generic target that is intended to\nsupport a range of target CPUs with different cache line sizes, the\nconstructive size should probably be the minimum size, and the destructive\nsize the maximum, unless you are constrained by ABI compatibility with\nprevious code.\n\nFrom discussion on gcc-patches, I've come to the conclusion that the\nsolution to the difficulty of choosing stable values is to give up on it,\nand instead encourage only uses where ABI stability is unimportant: in\nparticular, uses where the ABI is shared at most between translation units\nbuilt at the same time with the same flags.\n\nTo that end, I've added a warning for any use of the constant value of\nstd::hardware_destructive_interference_size in a header or module export.\nAppropriate uses within a project can disable the warning.\n\nA previous iteration of this patch included an -finterference-tune flag to\nmake the value vary with -mtune; this iteration makes that the default\nbehavior, which should be appropriate for all reasonable uses of the\nvariable.  The previous default of \"stable-ish\" seems to me likely to have\nbeen more of an attractive nuisance; since we can't promise actual\nstability, we should instead make proper uses more convenient.\n\nJF Bastien's implementation proposal is summarized at\nhttps://github.com/itanium-cxx-abi/cxx-abi/issues/74\n\nI implement this by adding new --params for the two sizes.  Targets can\noverride these values in targetm.target_option.override() to support a range\nof values for the generic target; otherwise, both will default to the L1\ncache line size.\n\n64 bytes still seems correct for all x86.\n\nI'm not sure why he proposed 64/64 for generic 32-bit ARM, since the Cortex\nA9 has a 32-byte cache line, so I'd think 32/64 would make more sense.\n\nHe proposed 64/128 for generic AArch64, but since the A64FX now has a 256B\ncache line, I've changed that to 64/256.\n\nOther arch maintainers are invited to set ranges for their generic targets\nif that seems better than using the default cache line size for both values.\n\nWith the above choice to reject stability as a goal, getting these values\n\"right\" is now just a matter of what we want the default optimization to be,\nand we can feel free to adjust them as CPUs with different cache lines\nbecome more and less common.\n\ngcc/ChangeLog:\n\n\t* params.opt: Add destructive-interference-size and\n\tconstructive-interference-size.\n\t* doc/invoke.texi: Document them.\n\t* config/aarch64/aarch64.c (aarch64_override_options_internal):\n\tSet them.\n\t* config/arm/arm.c (arm_option_override): Set them.\n\t* config/i386/i386-options.c (ix86_option_override_internal):\n\tSet them.\n\ngcc/c-family/ChangeLog:\n\n\t* c.opt: Add -Winterference-size.\n\t* c-cppbuiltin.c (cpp_atomic_builtins): Add __GCC_DESTRUCTIVE_SIZE\n\tand __GCC_CONSTRUCTIVE_SIZE.\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.c (maybe_warn_about_constant_value):\n\tComplain about std::hardware_destructive_interference_size.\n\t(cxx_eval_constant_expression): Call it.\n\t* decl.c (cxx_init_decl_processing): Check\n\t--param *-interference-size values.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/version: Define __cpp_lib_hardware_interference_size.\n\t* libsupc++/new: Define hardware interference size variables.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/Winterference.H: New file.\n\t* g++.dg/warn/Winterference.C: New test.\n\t* g++.target/aarch64/interference.C: New test.\n\t* g++.target/arm/interference.C: New test.\n\t* g++.target/i386/interference.C: New test.", "tree": {"sha": "1e9480506219bbb1af3acdd921bf264c6c9342c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e9480506219bbb1af3acdd921bf264c6c9342c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76b75018b3d053a890ebe155e47814de14b3c9fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76b75018b3d053a890ebe155e47814de14b3c9fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76b75018b3d053a890ebe155e47814de14b3c9fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76b75018b3d053a890ebe155e47814de14b3c9fb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ea292591e42aa4d52b4b7a00b86335bfd2e2e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85"}], "stats": {"total": 281, "additions": 279, "deletions": 2}, "files": [{"sha": "ce88e70712730dfae08d5e5ff9d80a921440cb30", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=76b75018b3d053a890ebe155e47814de14b3c9fb", "patch": "@@ -741,6 +741,20 @@ cpp_atomic_builtins (cpp_reader *pfile)\n   builtin_define_with_int_value (\"__GCC_ATOMIC_TEST_AND_SET_TRUEVAL\",\n \t\t\t\t targetm.atomic_test_and_set_trueval);\n \n+  /* Macros for C++17 hardware interference size constants.  Either both or\n+     neither should be set.  */\n+  gcc_assert (!param_destruct_interfere_size\n+\t      == !param_construct_interfere_size);\n+  if (param_destruct_interfere_size)\n+    {\n+      /* FIXME The way of communicating these values to the library should be\n+\t part of the C++ ABI, whether macro or builtin.  */\n+      builtin_define_with_int_value (\"__GCC_DESTRUCTIVE_SIZE\",\n+\t\t\t\t     param_destruct_interfere_size);\n+      builtin_define_with_int_value (\"__GCC_CONSTRUCTIVE_SIZE\",\n+\t\t\t\t     param_construct_interfere_size);\n+    }\n+\n   /* ptr_type_node can't be used here since ptr_mode is only set when\n      toplev calls backend_init which is not done with -E  or pch.  */\n   psize = POINTER_SIZE_UNITS;"}, {"sha": "9c151d19870c279da36a05d6e6350a029145adb5", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=76b75018b3d053a890ebe155e47814de14b3c9fb", "patch": "@@ -722,6 +722,11 @@ Winit-list-lifetime\n C++ ObjC++ Var(warn_init_list) Warning Init(1)\n Warn about uses of std::initializer_list that can result in dangling pointers.\n \n+Winterference-size\n+C++ ObjC++ Var(warn_interference_size) Warning Init(1)\n+Warn about nonsensical values of --param destructive-interference-size or\n+constructive-interference-size.\n+\n Wimplicit\n C ObjC Var(warn_implicit) Warning LangEnabledBy(C ObjC,Wall)\n Warn about implicit declarations."}, {"sha": "36519ccc5a58abab483c38d0a6c5f039592bfc7f", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=76b75018b3d053a890ebe155e47814de14b3c9fb", "patch": "@@ -16540,6 +16540,28 @@ aarch64_override_options_internal (struct gcc_options *opts)\n     SET_OPTION_IF_UNSET (opts, &global_options_set,\n \t\t\t param_l1_cache_line_size,\n \t\t\t aarch64_tune_params.prefetch->l1_cache_line_size);\n+\n+  if (aarch64_tune_params.prefetch->l1_cache_line_size >= 0)\n+    {\n+      SET_OPTION_IF_UNSET (opts, &global_options_set,\n+\t\t\t   param_destruct_interfere_size,\n+\t\t\t   aarch64_tune_params.prefetch->l1_cache_line_size);\n+      SET_OPTION_IF_UNSET (opts, &global_options_set,\n+\t\t\t   param_construct_interfere_size,\n+\t\t\t   aarch64_tune_params.prefetch->l1_cache_line_size);\n+    }\n+  else\n+    {\n+      /* For a generic AArch64 target, cover the current range of cache line\n+\t sizes.  */\n+      SET_OPTION_IF_UNSET (opts, &global_options_set,\n+\t\t\t   param_destruct_interfere_size,\n+\t\t\t   256);\n+      SET_OPTION_IF_UNSET (opts, &global_options_set,\n+\t\t\t   param_construct_interfere_size,\n+\t\t\t   64);\n+    }\n+\n   if (aarch64_tune_params.prefetch->l2_cache_size >= 0)\n     SET_OPTION_IF_UNSET (opts, &global_options_set,\n \t\t\t param_l2_cache_size,"}, {"sha": "6c6e77fab666f4aeff023b1f949e3ca0a3545658", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=76b75018b3d053a890ebe155e47814de14b3c9fb", "patch": "@@ -3669,6 +3669,28 @@ arm_option_override (void)\n     SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n \t\t\t param_l1_cache_line_size,\n \t\t\t current_tune->prefetch.l1_cache_line_size);\n+  if (current_tune->prefetch.l1_cache_line_size >= 0)\n+    {\n+      SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n+\t\t\t   param_destruct_interfere_size,\n+\t\t\t   current_tune->prefetch.l1_cache_line_size);\n+      SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n+\t\t\t   param_construct_interfere_size,\n+\t\t\t   current_tune->prefetch.l1_cache_line_size);\n+    }\n+  else\n+    {\n+      /* For a generic ARM target, JF Bastien proposed using 64 for both.  */\n+      /* ??? Cortex A9 has a 32-byte cache line, so why not 32 for\n+\t constructive?  */\n+      /* More recent Cortex chips have a 64-byte cache line, but are marked\n+\t ARM_PREFETCH_NOT_BENEFICIAL, so they get these defaults.  */\n+      SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n+\t\t\t   param_destruct_interfere_size, 64);\n+      SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n+\t\t\t   param_construct_interfere_size, 64);\n+    }\n+\n   if (current_tune->prefetch.l1_cache_size >= 0)\n     SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n \t\t\t param_l1_cache_size,"}, {"sha": "c0006b3674baad492027132dcfb8c73edbecfb1c", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=76b75018b3d053a890ebe155e47814de14b3c9fb", "patch": "@@ -2579,6 +2579,12 @@ ix86_option_override_internal (bool main_args_p,\n   SET_OPTION_IF_UNSET (opts, opts_set, param_l2_cache_size,\n \t\t       ix86_tune_cost->l2_cache_size);\n \n+  /* 64B is the accepted value for these for all x86.  */\n+  SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n+\t\t       param_destruct_interfere_size, 64);\n+  SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n+\t\t       param_construct_interfere_size, 64);\n+\n   /* Enable sw prefetching at -O3 for CPUS that prefetching is helpful.  */\n   if (opts->x_flag_prefetch_loop_arrays < 0\n       && HAVE_prefetch"}, {"sha": "0c2498aee22d09fea463611e77f7ae333bdfcd1b", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=76b75018b3d053a890ebe155e47814de14b3c9fb", "patch": "@@ -6075,6 +6075,37 @@ inline_asm_in_constexpr_error (location_t loc)\n \t  \"%<constexpr%> function in C++20\");\n }\n \n+/* We're getting the constant value of DECL in a manifestly constant-evaluated\n+   context; maybe complain about that.  */\n+\n+static void\n+maybe_warn_about_constant_value (location_t loc, tree decl)\n+{\n+  static bool explained = false;\n+  if (cxx_dialect >= cxx17\n+      && warn_interference_size\n+      && !global_options_set.x_param_destruct_interfere_size\n+      && DECL_CONTEXT (decl) == std_node\n+      && id_equal (DECL_NAME (decl), \"hardware_destructive_interference_size\")\n+      && (LOCATION_FILE (input_location) != main_input_filename\n+\t  || module_exporting_p ())\n+      && warning_at (loc, OPT_Winterference_size, \"use of %qD\", decl)\n+      && !explained)\n+    {\n+      explained = true;\n+      inform (loc, \"its value can vary between compiler versions or \"\n+\t      \"with different %<-mtune%> or %<-mcpu%> flags\");\n+      inform (loc, \"if this use is part of a public ABI, change it to \"\n+\t      \"instead use a constant variable you define\");\n+      inform (loc, \"the default value for the current CPU tuning \"\n+\t      \"is %d bytes\", param_destruct_interfere_size);\n+      inform (loc, \"you can stabilize this value with %<--param \"\n+\t      \"hardware_destructive_interference_size=%d%>, or disable \"\n+\t      \"this warning with %<-Wno-interference-size%>\",\n+\t      param_destruct_interfere_size);\n+    }\n+}\n+\n /* Attempt to reduce the expression T to a constant value.\n    On failure, issue diagnostic and return error_mark_node.  */\n /* FIXME unify with c_fully_fold */\n@@ -6219,6 +6250,8 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t      r = *p;\n \t      break;\n \t    }\n+      if (ctx->manifestly_const_eval)\n+\tmaybe_warn_about_constant_value (loc, t);\n       if (COMPLETE_TYPE_P (TREE_TYPE (t))\n \t  && is_really_empty_class (TREE_TYPE (t), /*ignore_vptr*/false))\n \t{"}, {"sha": "c2065027369ef13b5adb3e5769b29ea96d224351", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=76b75018b3d053a890ebe155e47814de14b3c9fb", "patch": "@@ -4752,6 +4752,38 @@ cxx_init_decl_processing (void)\n   /* Show we use EH for cleanups.  */\n   if (flag_exceptions)\n     using_eh_for_cleanups ();\n+\n+  /* Check that the hardware interference sizes are at least\n+     alignof(max_align_t), as required by the standard.  */\n+  const int max_align = max_align_t_align () / BITS_PER_UNIT;\n+  if (param_destruct_interfere_size)\n+    {\n+      if (param_destruct_interfere_size < max_align)\n+\terror (\"%<--param destructive-interference-size=%d%> is less than \"\n+\t       \"%d\", param_destruct_interfere_size, max_align);\n+      else if (param_destruct_interfere_size < param_l1_cache_line_size)\n+\twarning (OPT_Winterference_size,\n+\t\t \"%<--param destructive-interference-size=%d%> \"\n+\t\t \"is less than %<--param l1-cache-line-size=%d%>\",\n+\t\t param_destruct_interfere_size, param_l1_cache_line_size);\n+    }\n+  else if (param_l1_cache_line_size >= max_align)\n+    param_destruct_interfere_size = param_l1_cache_line_size;\n+  /* else leave it unset.  */\n+\n+  if (param_construct_interfere_size)\n+    {\n+      if (param_construct_interfere_size < max_align)\n+\terror (\"%<--param constructive-interference-size=%d%> is less than \"\n+\t       \"%d\", param_construct_interfere_size, max_align);\n+      else if (param_construct_interfere_size > param_l1_cache_line_size)\n+\twarning (OPT_Winterference_size,\n+\t\t \"%<--param constructive-interference-size=%d%> \"\n+\t\t \"is greater than %<--param l1-cache-line-size=%d%>\",\n+\t\t param_construct_interfere_size, param_l1_cache_line_size);\n+    }\n+  else if (param_l1_cache_line_size >= max_align)\n+    param_construct_interfere_size = param_l1_cache_line_size;\n }\n \n /* Enter an abi node in global-module context.  returns a cookie to"}, {"sha": "78cfc100ac2f53807b976309b9fb440d12e76867", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=76b75018b3d053a890ebe155e47814de14b3c9fb", "patch": "@@ -9018,6 +9018,43 @@ that has already been done in the current function.  Therefore,\n seemingly insignificant changes in the source program can cause the\n warnings produced by @option{-Winline} to appear or disappear.\n \n+@item -Winterference-size\n+@opindex Winterference-size\n+Warn about use of C++17 @code{std::hardware_destructive_interference_size}\n+without specifying its value with @option{--param destructive-interference-size}.\n+Also warn about questionable values for that option.\n+\n+This variable is intended to be used for controlling class layout, to\n+avoid false sharing in concurrent code:\n+\n+@smallexample\n+struct independent_fields @{\n+  alignas(std::hardware_destructive_interference_size) std::atomic<int> one;\n+  alignas(std::hardware_destructive_interference_size) std::atomic<int> two;\n+@};\n+@end smallexample\n+\n+Here @samp{one} and @samp{two} are intended to be far enough apart\n+that stores to one won't require accesses to the other to reload the\n+cache line.\n+\n+By default, @option{--param destructive-interference-size} and\n+@option{--param constructive-interference-size} are set based on the\n+current @option{-mtune} option, typically to the L1 cache line size\n+for the particular target CPU, sometimes to a range if tuning for a\n+generic target.  So all translation units that depend on ABI\n+compatibility for the use of these variables must be compiled with\n+the same @option{-mtune} (or @option{-mcpu}).\n+\n+If ABI stability is important, such as if the use is in a header for a\n+library, you should probably not use the hardware interference size\n+variables at all.  Alternatively, you can force a particular value\n+with @option{--param}.\n+\n+If you are confident that your use of the variable does not affect ABI\n+outside a single build of your project, you can turn off the warning\n+with @option{-Wno-interference-size}.\n+\n @item -Wint-in-bool-context\n @opindex Wint-in-bool-context\n @opindex Wno-int-in-bool-context\n@@ -13938,6 +13975,34 @@ prefetch hints can be issued for any constant stride.\n \n This setting is only useful for strides that are known and constant.\n \n+@item destructive-interference-size\n+@item constructive-interference-size\n+The values for the C++17 variables\n+@code{std::hardware_destructive_interference_size} and\n+@code{std::hardware_constructive_interference_size}.  The destructive\n+interference size is the minimum recommended offset between two\n+independent concurrently-accessed objects; the constructive\n+interference size is the maximum recommended size of contiguous memory\n+accessed together.  Typically both will be the size of an L1 cache\n+line for the target, in bytes.  For a generic target covering a range of L1\n+cache line sizes, typically the constructive interference size will be\n+the small end of the range and the destructive size will be the large\n+end.\n+\n+The destructive interference size is intended to be used for layout,\n+and thus has ABI impact.  The default value is not expected to be\n+stable, and on some targets varies with @option{-mtune}, so use of\n+this variable in a context where ABI stability is important, such as\n+the public interface of a library, is strongly discouraged; if it is\n+used in that context, users can stabilize the value using this\n+option.\n+\n+The constructive interference size is less sensitive, as it is\n+typically only used in a @samp{static_assert} to make sure that a type\n+fits within a cache line.\n+\n+See also @option{-Winterference-size}.\n+\n @item loop-interchange-max-num-stmts\n The maximum number of stmts in a loop to be interchanged.\n "}, {"sha": "658ca0288519e5f8185da67535dc42517c24d21c", "filename": "gcc/params.opt", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=76b75018b3d053a890ebe155e47814de14b3c9fb", "patch": "@@ -361,6 +361,22 @@ The maximum code size growth ratio when expanding into a jump table (in percent)\n Common Joined UInteger Var(param_l1_cache_line_size) Init(32) Param Optimization\n The size of L1 cache line.\n \n+-param=destructive-interference-size=\n+Common Joined UInteger Var(param_destruct_interfere_size) Init(0) Param Optimization\n+The minimum recommended offset between two concurrently-accessed objects to\n+avoid additional performance degradation due to contention introduced by the\n+implementation.  Typically the L1 cache line size, but can be larger to\n+accommodate a variety of target processors with different cache line sizes.\n+C++17 code might use this value in structure layout, but is strongly\n+discouraged from doing so in public ABIs.\n+\n+-param=constructive-interference-size=\n+Common Joined UInteger Var(param_construct_interfere_size) Init(0) Param Optimization\n+The maximum recommended size of contiguous memory occupied by two objects\n+accessed with temporal locality by concurrent threads.  Typically the L1 cache\n+line size, but can be smaller to accommodate a variety of target processors with\n+different cache line sizes.\n+\n -param=l1-cache-size=\n Common Joined UInteger Var(param_l1_cache_size) Init(64) Param Optimization\n The size of L1 cache."}, {"sha": "2af75c63f83ae28d190d8a7e7fc3f3af3ce21240", "filename": "gcc/testsuite/g++.dg/warn/Winterference-2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinterference-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinterference-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinterference-2.C?ref=76b75018b3d053a890ebe155e47814de14b3c9fb", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile { target c++20 } }\n+// { dg-additional-options -fmodules-ts }\n+\n+module ;\n+\n+#include <new>\n+\n+export module foo;\n+\n+export {\n+  struct A {\n+    alignas(std::hardware_destructive_interference_size) int x; // { dg-warning Winterference-size }\n+  };\n+}"}, {"sha": "57c001bc032f87ecf22db0e0a8de3b805f8f1cf0", "filename": "gcc/testsuite/g++.dg/warn/Winterference.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinterference.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinterference.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinterference.C?ref=76b75018b3d053a890ebe155e47814de14b3c9fb", "patch": "@@ -0,0 +1,6 @@\n+// Test that we warn about use of std::hardware_destructive_interference_size\n+// in a header.\n+// { dg-do compile { target c++17 } }\n+\n+// { dg-warning Winterference-size \"\" { target *-*-* } 0 }\n+#include \"Winterference.H\""}, {"sha": "36f0ad5f6d1561c7fefb2c403bc4cf60663ce832", "filename": "gcc/testsuite/g++.dg/warn/Winterference.H", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinterference.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinterference.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinterference.H?ref=76b75018b3d053a890ebe155e47814de14b3c9fb", "patch": "@@ -0,0 +1,7 @@\n+#include <new>\n+\n+struct A\n+{\n+  alignas(std::hardware_destructive_interference_size) int i;\n+  alignas(std::hardware_destructive_interference_size) int j;\n+};"}, {"sha": "0fc0165522305eabfcd24ba693a94be878264dcc", "filename": "gcc/testsuite/g++.target/aarch64/interference.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Finterference.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Finterference.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Finterference.C?ref=76b75018b3d053a890ebe155e47814de14b3c9fb", "patch": "@@ -0,0 +1,9 @@\n+// Test C++17 hardware interference size constants\n+// { dg-do compile { target c++17 } }\n+\n+#include <new>\n+\n+// Most AArch64 CPUs have an L1 cache line size of 64, but some recent ones use\n+// 128 or even 256.\n+static_assert(std::hardware_destructive_interference_size == 256);\n+static_assert(std::hardware_constructive_interference_size == 64);"}, {"sha": "34fe8a52bff9a769afce0bd45a77db32d628db2c", "filename": "gcc/testsuite/g++.target/arm/interference.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Farm%2Finterference.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Farm%2Finterference.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Farm%2Finterference.C?ref=76b75018b3d053a890ebe155e47814de14b3c9fb", "patch": "@@ -0,0 +1,9 @@\n+// Test C++17 hardware interference size constants\n+// { dg-do compile { target c++17 } }\n+\n+#include <new>\n+\n+// Recent ARM CPUs have a cache line size of 64.  Older ones have\n+// a size of 32, but I guess they're old enough that we don't care?\n+static_assert(std::hardware_destructive_interference_size == 64);\n+static_assert(std::hardware_constructive_interference_size == 64);"}, {"sha": "c7b910e3adaefd98f2cbc93b1b224a50710501ab", "filename": "gcc/testsuite/g++.target/i386/interference.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Finterference.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b75018b3d053a890ebe155e47814de14b3c9fb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Finterference.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Finterference.C?ref=76b75018b3d053a890ebe155e47814de14b3c9fb", "patch": "@@ -0,0 +1,8 @@\n+// Test C++17 hardware interference size constants\n+// { dg-do compile { target c++17 } }\n+\n+#include <new>\n+\n+// It is generally agreed that these are the right values for all x86.\n+static_assert(std::hardware_destructive_interference_size == 64);\n+static_assert(std::hardware_constructive_interference_size == 64);"}, {"sha": "f41004b5911c9a7a88cb651eb9f9850bfca82fd7", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b75018b3d053a890ebe155e47814de14b3c9fb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b75018b3d053a890ebe155e47814de14b3c9fb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=76b75018b3d053a890ebe155e47814de14b3c9fb", "patch": "@@ -140,6 +140,9 @@\n #define __cpp_lib_filesystem 201703\n #define __cpp_lib_gcd 201606\n #define __cpp_lib_gcd_lcm 201606\n+#ifdef __GCC_DESTRUCTIVE_SIZE\n+# define __cpp_lib_hardware_interference_size 201703L\n+#endif\n #define __cpp_lib_hypot 201603\n #define __cpp_lib_invoke 201411L\n #define __cpp_lib_lcm 201606"}, {"sha": "7bc67a6cb0242ea32e13349b2de0d04183f20a2a", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b75018b3d053a890ebe155e47814de14b3c9fb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b75018b3d053a890ebe155e47814de14b3c9fb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=76b75018b3d053a890ebe155e47814de14b3c9fb", "patch": "@@ -183,9 +183,9 @@ inline void operator delete[](void*, void*) _GLIBCXX_USE_NOEXCEPT { }\n } // extern \"C++\"\n \n #if __cplusplus >= 201703L\n-#ifdef _GLIBCXX_HAVE_BUILTIN_LAUNDER\n namespace std\n {\n+#ifdef _GLIBCXX_HAVE_BUILTIN_LAUNDER\n #define __cpp_lib_launder 201606\n   /// Pointer optimization barrier [ptr.launder]\n   template<typename _Tp>\n@@ -205,8 +205,14 @@ namespace std\n   void launder(const void*) = delete;\n   void launder(volatile void*) = delete;\n   void launder(const volatile void*) = delete;\n-}\n #endif // _GLIBCXX_HAVE_BUILTIN_LAUNDER\n+\n+#ifdef __GCC_DESTRUCTIVE_SIZE\n+# define __cpp_lib_hardware_interference_size 201703L\n+  inline constexpr size_t hardware_destructive_interference_size = __GCC_DESTRUCTIVE_SIZE;\n+  inline constexpr size_t hardware_constructive_interference_size = __GCC_CONSTRUCTIVE_SIZE;\n+#endif // __GCC_DESTRUCTIVE_SIZE\n+}\n #endif // C++17\n \n #if __cplusplus > 201703L"}]}