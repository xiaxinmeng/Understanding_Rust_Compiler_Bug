{"sha": "07cfc2d75d85c5fc961bdd8434673f0a5f40587d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdjZmMyZDc1ZDg1YzVmYzk2MWJkZDg0MzQ2NzNmMGE1ZjQwNTg3ZA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-06-12T20:38:16Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-06-12T20:38:16Z"}, "message": "stl_tree.h (_Rb_tree_impl()): Restore _Node_allocator default init.\n\n2017-06-12  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_tree.h (_Rb_tree_impl()): Restore _Node_allocator\n\tdefault init.\n\t* testsuite/util/testsuite_allocator.h\n\t(__gnu_test::default_init_allocator<>) New.\n\t* testsuite/23_containers/set/allocator/default_init.cc: New.\n\t* testsuite/23_containers/map/allocator/default_init.cc: New.\n\nFrom-SVN: r249136", "tree": {"sha": "ffe9b9b9b57625a8e8ca439834e062bbdc18e050", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffe9b9b9b57625a8e8ca439834e062bbdc18e050"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07cfc2d75d85c5fc961bdd8434673f0a5f40587d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07cfc2d75d85c5fc961bdd8434673f0a5f40587d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07cfc2d75d85c5fc961bdd8434673f0a5f40587d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07cfc2d75d85c5fc961bdd8434673f0a5f40587d/comments", "author": null, "committer": null, "parents": [{"sha": "6d1ea02a6c3423a000c0d894b2ff673757042398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d1ea02a6c3423a000c0d894b2ff673757042398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d1ea02a6c3423a000c0d894b2ff673757042398"}], "stats": {"total": 190, "additions": 183, "deletions": 7}, "files": [{"sha": "5ee9e68af684f40a835921c8abacad1529ec37ca", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07cfc2d75d85c5fc961bdd8434673f0a5f40587d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07cfc2d75d85c5fc961bdd8434673f0a5f40587d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=07cfc2d75d85c5fc961bdd8434673f0a5f40587d", "patch": "@@ -1,3 +1,12 @@\n+2017-06-12  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_tree.h (_Rb_tree_impl()): Restore _Node_allocator\n+\tdefault init.\n+\t* testsuite/util/testsuite_allocator.h\n+\t(__gnu_test::default_init_allocator<>) New.\n+\t* testsuite/23_containers/set/allocator/default_init.cc: New.\n+\t* testsuite/23_containers/map/allocator/default_init.cc: New.\n+\n 2017-06-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/55917"}, {"sha": "c2417f1f8ccc2682a75f15dc425200c4e062d4c6", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07cfc2d75d85c5fc961bdd8434673f0a5f40587d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07cfc2d75d85c5fc961bdd8434673f0a5f40587d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=07cfc2d75d85c5fc961bdd8434673f0a5f40587d", "patch": "@@ -572,11 +572,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _Node_allocator&\n       _M_get_Node_allocator() _GLIBCXX_NOEXCEPT\n-      { return *static_cast<_Node_allocator*>(&this->_M_impl); }\n+      { return this->_M_impl; }\n \n       const _Node_allocator&\n       _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT\n-      { return *static_cast<const _Node_allocator*>(&this->_M_impl); }\n+      { return this->_M_impl; }\n \n       allocator_type\n       get_allocator() const _GLIBCXX_NOEXCEPT\n@@ -685,13 +685,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  typedef _Rb_tree_key_compare<_Key_compare> _Base_key_compare;\n \n-#if __cplusplus < 201103L\n \t  _Rb_tree_impl()\n+\t    _GLIBCXX_NOEXCEPT_IF(\n+\t\tis_nothrow_default_constructible<_Node_allocator>::value\n+\t\t&& is_nothrow_default_constructible<_Base_key_compare>::value )\n+\t  : _Node_allocator()\n \t  { }\n-#else\n-\t  _Rb_tree_impl() = default;\n-\t  _Rb_tree_impl(_Rb_tree_impl&&) = default;\n-#endif\n \n \t  _Rb_tree_impl(const _Rb_tree_impl& __x)\n \t  : _Node_allocator(_Alloc_traits::_S_select_on_copy(__x))\n@@ -703,6 +702,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  : _Node_allocator(__a), _Base_key_compare(__comp)\n \t  { }\n #else\n+\t  _Rb_tree_impl(_Rb_tree_impl&&) = default;\n+\n \t  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)\n \t  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)\n \t  { }"}, {"sha": "1ef13d9d22db6c622f842be8994ed97432bda3e1", "filename": "libstdc++-v3/testsuite/23_containers/map/allocator/default_init.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07cfc2d75d85c5fc961bdd8434673f0a5f40587d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fallocator%2Fdefault_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07cfc2d75d85c5fc961bdd8434673f0a5f40587d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fallocator%2Fdefault_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fallocator%2Fdefault_init.cc?ref=07cfc2d75d85c5fc961bdd8434673f0a5f40587d", "patch": "@@ -0,0 +1,67 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-O0\" }\n+// { dg-xfail-run-if \"PR c++/65816\" { *-*-* } }\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+#include <ext/aligned_buffer.h>\n+\n+using T = int;\n+\n+using __gnu_test::default_init_allocator;\n+\n+void test01()\n+{\n+  typedef default_init_allocator<std::pair<const T, T>> alloc_type;\n+  typedef std::map<T, T, std::less<T>, alloc_type> test_type;\n+\n+  __gnu_cxx::__aligned_buffer<test_type> buf;\n+  __builtin_memset(buf._M_addr(), ~0, sizeof(test_type));\n+\n+  test_type *tmp = ::new(buf._M_addr()) test_type;\n+\n+  VERIFY( tmp->get_allocator().state == 0 );\n+\n+  tmp->~test_type();\n+}\n+\n+void test02()\n+{\n+  typedef default_init_allocator<std::pair<const T, T>> alloc_type;\n+  typedef std::map<T, T, std::less<T>, alloc_type> test_type;\n+\n+  __gnu_cxx::__aligned_buffer<test_type> buf;\n+  __builtin_memset(buf._M_addr(), ~0, sizeof(test_type));\n+\n+  test_type *tmp = ::new(buf._M_addr()) test_type();\n+\n+  VERIFY( tmp->get_allocator().state == 0 );\n+\n+  tmp->~test_type();\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "4e14e184a71b4da730a39e632ef8271ee0f9aeb7", "filename": "libstdc++-v3/testsuite/23_containers/set/allocator/default_init.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07cfc2d75d85c5fc961bdd8434673f0a5f40587d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2Fdefault_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07cfc2d75d85c5fc961bdd8434673f0a5f40587d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2Fdefault_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2Fdefault_init.cc?ref=07cfc2d75d85c5fc961bdd8434673f0a5f40587d", "patch": "@@ -0,0 +1,67 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-O0\" }\n+// { dg-xfail-run-if \"PR c++/65816\" { *-*-* } }\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+#include <ext/aligned_buffer.h>\n+\n+using T = int;\n+\n+using __gnu_test::default_init_allocator;\n+\n+void test01()\n+{\n+  typedef default_init_allocator<T> alloc_type;\n+  typedef std::set<T, std::less<T>, alloc_type> test_type;\n+\n+  __gnu_cxx::__aligned_buffer<test_type> buf;\n+  __builtin_memset(buf._M_addr(), ~0, sizeof(test_type));\n+\n+  test_type *tmp = ::new(buf._M_addr()) test_type;\n+\n+  VERIFY( tmp->get_allocator().state == 0 );\n+\n+  tmp->~test_type();\n+}\n+\n+void test02()\n+{\n+  typedef default_init_allocator<T> alloc_type;\n+  typedef std::set<T, std::less<T>, alloc_type> test_type;\n+\n+  __gnu_cxx::__aligned_buffer<test_type> buf;\n+  __builtin_memset(buf._M_addr(), ~0, sizeof(test_type));\n+\n+  test_type *tmp = ::new(buf._M_addr()) test_type();\n+\n+  VERIFY( tmp->get_allocator().state == 0 );\n+\n+  tmp->~test_type();\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "233ea0baefc4013dff8216dc5dd3fb26c7cb3b1d", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07cfc2d75d85c5fc961bdd8434673f0a5f40587d/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07cfc2d75d85c5fc961bdd8434673f0a5f40587d/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=07cfc2d75d85c5fc961bdd8434673f0a5f40587d", "patch": "@@ -508,6 +508,38 @@ namespace __gnu_test\n     bool operator!=(const SimpleAllocator<T>&, const SimpleAllocator<U>&)\n     { return false; }\n \n+  template<typename T>\n+    struct default_init_allocator\n+    {\n+      using value_type = T;\n+\n+      default_init_allocator() = default;\n+\n+      template<typename U>\n+        default_init_allocator(const default_init_allocator<U>& a)\n+\t  : state(a.state)\n+        { }\n+\n+      T*\n+      allocate(std::size_t n)\n+      { return std::allocator<T>().allocate(n); }\n+\n+      void\n+      deallocate(T* p, std::size_t n)\n+      { std::allocator<T>().deallocate(p, n); }\n+\n+      int state;\n+    };\n+\n+  template<typename T, typename U>\n+    bool operator==(const default_init_allocator<T>& t,\n+\t\t    const default_init_allocator<U>& u)\n+    { return t.state == u.state; }\n+\n+  template<typename T, typename U>\n+    bool operator!=(const default_init_allocator<T>& t,\n+\t\t    const default_init_allocator<U>& u)\n+    { return !(t == u); }\n #endif\n \n   template<typename Tp>"}]}