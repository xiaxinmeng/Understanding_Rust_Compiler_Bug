{"sha": "7aca9b9c4e6b744c5e78dc34601f6466fdf2b89e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FjYTliOWM0ZTZiNzQ0YzVlNzhkYzM0NjAxZjY0NjZmZGYyYjg5ZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-08-12T17:52:01Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-08-12T17:52:01Z"}, "message": "(SECONDARY_INPUT_RELOAD_CLASS): Delete case for invalid PIC addresses.\n\n(SECONDARY_INPUT_RELOAD_CLASS): Delete case for invalid\nPIC addresses.\n(CONSTANT_ADDRESS_P): Reject invalid PIC addresses.\n(LEGITIMATE_PIC_OPERAND_P): New macro.\n(GO_IF_LEGITIMATE_ADDRESS): Reject invalid PIC addresses.\n(LEGITIMIZE_ADDRESS): Fix call to legitimize_pic_address.\n\nFrom-SVN: r5144", "tree": {"sha": "d5cfa925125e571340d6c0ad0acedec4dfbd5f07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5cfa925125e571340d6c0ad0acedec4dfbd5f07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7aca9b9c4e6b744c5e78dc34601f6466fdf2b89e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aca9b9c4e6b744c5e78dc34601f6466fdf2b89e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aca9b9c4e6b744c5e78dc34601f6466fdf2b89e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aca9b9c4e6b744c5e78dc34601f6466fdf2b89e/comments", "author": null, "committer": null, "parents": [{"sha": "d0fc7beaa298aebb9c43fac79c88d6e406daa319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0fc7beaa298aebb9c43fac79c88d6e406daa319", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0fc7beaa298aebb9c43fac79c88d6e406daa319"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "caa3182597b991ad1d2435f52ea2f7a435ff1261", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aca9b9c4e6b744c5e78dc34601f6466fdf2b89e/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aca9b9c4e6b744c5e78dc34601f6466fdf2b89e/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=7aca9b9c4e6b744c5e78dc34601f6466fdf2b89e", "patch": "@@ -632,8 +632,7 @@ extern char leaf_reg_backmap[];\n    a paradoxical subreg in a float/fix conversion insn.  */\n \n #define SECONDARY_INPUT_RELOAD_CLASS(CLASS, MODE, IN)\t\t\\\n-  (flag_pic && pic_address_needs_scratch (IN) ? GENERAL_REGS\t\\\n-   : ((CLASS) == FP_REGS && ((MODE) == HImode || (MODE) == QImode)\\\n+  (((CLASS) == FP_REGS && ((MODE) == HImode || (MODE) == QImode)\\\n       && (GET_CODE (IN) == MEM\t\t\t\t\t\\\n \t  || ((GET_CODE (IN) == REG || GET_CODE (IN) == SUBREG)\t\\\n \t      && true_regnum (IN) == -1))) ? GENERAL_REGS : NO_REGS)\n@@ -1120,12 +1119,20 @@ extern struct rtx_def *sparc_builtin_saveregs ();\n \n #define MAX_REGS_PER_ADDRESS 2\n \n-/* Recognize any constant value that is a valid address.  */\n+/* Recognize any constant value that is a valid address.\n+   When PIC, we do not accept an address that would require a scratch reg\n+   to load into a register.  */\n \n #define CONSTANT_ADDRESS_P(X)   \\\n   (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n-   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n-   || GET_CODE (X) == HIGH)\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == HIGH\t\t\t\\\n+   || (GET_CODE (X) == CONST\t\t\t\t\t\t\\\n+       && ! (flag_pic && pic_address_needs_scratch (X))))\n+\n+/* Define this, so that when PIC, reload won't try to reload invalid\n+   addresses which require two reload registers.  */\n+\n+#define LEGITIMATE_PIC_OPERAND_P(X)  (! pic_address_needs_scratch (X))\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    Anything can be made to work except floating point constants.  */\n@@ -1245,7 +1252,9 @@ extern struct rtx_def *sparc_builtin_saveregs ();\n \t  else if (flag_pic == 1\t\t\t\\\n \t\t   && GET_CODE (op1) != REG\t\t\\\n \t\t   && GET_CODE (op1) != LO_SUM\t\t\\\n-\t\t   && GET_CODE (op1) != MEM)\t\t\\\n+\t\t   && GET_CODE (op1) != MEM\t\t\\\n+\t\t   && (GET_CODE (op1) != CONST_INT\t\\\n+\t\t       || SMALL_INT (op1)))\t\t\\\n \t    goto ADDR;\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\\\n       else if (RTX_OK_FOR_BASE_P (op0))\t\t\t\\\n@@ -1304,7 +1313,7 @@ extern struct rtx_def *legitimize_pic_address ();\n \t\t   force_operand (XEXP (X, 1), NULL_RTX));\t\\\n   if (sparc_x != (X) && memory_address_p (MODE, X))\t\t\\\n     goto WIN;\t\t\t\t\t\t\t\\\n-  if (flag_pic) (X) = legitimize_pic_address (X, MODE, 0, 0);\t\\\n+  if (flag_pic) (X) = legitimize_pic_address (X, MODE, 0);\t\\\n   else if (GET_CODE (X) == PLUS && CONSTANT_ADDRESS_P (XEXP (X, 1)))\t\\\n     (X) = gen_rtx (PLUS, Pmode, XEXP (X, 0),\t\t\t\\\n \t\t   copy_to_mode_reg (Pmode, XEXP (X, 1)));\t\\"}]}