{"sha": "903c623438e8f4ce15639fffed80f9ced73a8bf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAzYzYyMzQzOGU4ZjRjZTE1NjM5ZmZmZWQ4MGY5Y2VkNzNhOGJmNw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-01-02T11:29:15Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-01-02T11:29:15Z"}, "message": "re PR c++/5132 (NaN = 0.0 * HUGE_VAL fails to compile in templates)\n\ncp:\n\tPR c++/5132\n\t* decl2.c (reparse_absdcl_as_casts): Don't digest_init if we\n\tare processing a template decl.\ntestsuite:\n\t* g++.dg/template/ctor1.C: New test.\n\nFrom-SVN: r48464", "tree": {"sha": "0a2878924eb6d120753fa4ffd96b1754db925d14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a2878924eb6d120753fa4ffd96b1754db925d14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/903c623438e8f4ce15639fffed80f9ced73a8bf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903c623438e8f4ce15639fffed80f9ced73a8bf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/903c623438e8f4ce15639fffed80f9ced73a8bf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903c623438e8f4ce15639fffed80f9ced73a8bf7/comments", "author": null, "committer": null, "parents": [{"sha": "477558bf39db7da00236fc414e0ac53a5712f577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477558bf39db7da00236fc414e0ac53a5712f577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/477558bf39db7da00236fc414e0ac53a5712f577"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "a6ecc50a3a5f4b0a6d709b06df2571c3a1b323b5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903c623438e8f4ce15639fffed80f9ced73a8bf7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903c623438e8f4ce15639fffed80f9ced73a8bf7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=903c623438e8f4ce15639fffed80f9ced73a8bf7", "patch": "@@ -1,3 +1,9 @@\n+2002-01-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/5132\n+\t* decl2.c (reparse_absdcl_as_casts): Don't digest_init if we\n+\tare processing a template decl.\n+\n 2002-01-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/5116, c++/764"}, {"sha": "401ccbf20f3529226c35ba2d3a0262d63a097631", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903c623438e8f4ce15639fffed80f9ced73a8bf7/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903c623438e8f4ce15639fffed80f9ced73a8bf7/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=903c623438e8f4ce15639fffed80f9ced73a8bf7", "patch": "@@ -1,6 +1,6 @@\n /* Process declarations and variables for C compiler.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -3622,12 +3622,16 @@ reparse_absdcl_as_casts (decl, expr)\n       type = groktypename (TREE_VALUE (CALL_DECLARATOR_PARMS (decl)));\n       decl = TREE_OPERAND (decl, 0);\n \n-      expr = digest_init (type, expr, (tree *) 0);\n-      if (TREE_CODE (type) == ARRAY_TYPE && !COMPLETE_TYPE_P (type))\n+      if (processing_template_decl)\n+\texpr = build_min (CONSTRUCTOR, type, decl, CONSTRUCTOR_ELTS (expr));\n+      else\n \t{\n-\t  int failure = complete_array_type (type, expr, 1);\n-\t  if (failure)\n-\t    my_friendly_abort (78);\n+\t  expr = digest_init (type, expr, (tree *) 0);\n+\t  if (TREE_CODE (type) == ARRAY_TYPE && !COMPLETE_TYPE_P (type))\n+\t    {\n+\t      int failure = complete_array_type (type, expr, 1);\n+\t      my_friendly_assert (!failure, 78);\n+\t    }\n \t}\n     }\n "}, {"sha": "1e0e603837183af2fe391b5368dccb77b17240f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903c623438e8f4ce15639fffed80f9ced73a8bf7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903c623438e8f4ce15639fffed80f9ced73a8bf7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=903c623438e8f4ce15639fffed80f9ced73a8bf7", "patch": "@@ -1,3 +1,7 @@\n+2002-01-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/template/ctor1.C: New test.\n+\n 2002-01-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/template/friend2.C: New test."}, {"sha": "ceae7409e331ad3e2cc50b86441e20c374dbeec5", "filename": "gcc/testsuite/g++.dg/template/ctor1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903c623438e8f4ce15639fffed80f9ced73a8bf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fctor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903c623438e8f4ce15639fffed80f9ced73a8bf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fctor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fctor1.C?ref=903c623438e8f4ce15639fffed80f9ced73a8bf7", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 31 Dec 2001 <nathan@codesourcery.com>\n+\n+// PR 5132. ICE on struct constructors in templates.\n+\n+// snippets from bits/huge_val.h\n+\n+#define __HUGE_VAL_bytes        { 0, 0, 0, 0, 0, 0, 0xf0, 0x7f }\n+#define __huge_val_t    union { unsigned char __c[8]; double __d; }\n+#define HUGE_VAL       (__extension__ \\\n+  ((__huge_val_t) { __c: __HUGE_VAL_bytes }).__d)\n+\n+void foo( const int&) {\n+  HUGE_VAL; // no problem here\n+}\n+\n+template <class F>\n+void Tfoo( const F&) {\n+  HUGE_VAL; // g++ fails here\n+}"}]}