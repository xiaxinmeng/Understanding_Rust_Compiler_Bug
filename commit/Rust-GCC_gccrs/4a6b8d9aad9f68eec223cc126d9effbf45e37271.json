{"sha": "4a6b8d9aad9f68eec223cc126d9effbf45e37271", "node_id": "C_kwDOANBUbNoAKDRhNmI4ZDlhYWQ5ZjY4ZWVjMjIzY2MxMjZkOWVmZmJmNDVlMzcyNzE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-06-01T13:42:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-06-02T06:35:23Z"}, "message": "tree-optimization/105802 - another unswitching type issue\n\nThis also fixes the type of the irange used for unswitching of\nswitch statements.\n\n\tPR tree-optimization/105802\n\t* tree-ssa-loop-unswitch.cc (find_unswitching_predicates_for_bb):\n\tMake sure to also compute the range in the type of the switch index.\n\n\t* g++.dg/opt/pr105802.C: New testcase.", "tree": {"sha": "9facd460dc0d8d3ad5ad0ac3918844ccb2a5866b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9facd460dc0d8d3ad5ad0ac3918844ccb2a5866b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a6b8d9aad9f68eec223cc126d9effbf45e37271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a6b8d9aad9f68eec223cc126d9effbf45e37271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a6b8d9aad9f68eec223cc126d9effbf45e37271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a6b8d9aad9f68eec223cc126d9effbf45e37271/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3164de6ac1b8473e60f6b85e94b15930694c80d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3164de6ac1b8473e60f6b85e94b15930694c80d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3164de6ac1b8473e60f6b85e94b15930694c80d7"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "2514245d00adc6e5b6b8900d64925a48ad851ea2", "filename": "gcc/testsuite/g++.dg/opt/pr105802.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a6b8d9aad9f68eec223cc126d9effbf45e37271/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr105802.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a6b8d9aad9f68eec223cc126d9effbf45e37271/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr105802.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr105802.C?ref=4a6b8d9aad9f68eec223cc126d9effbf45e37271", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+// { dg-options \"-O3\" }\n+\n+enum E { E0, E1 };\n+\n+void bar ();\n+void baz ();\n+\n+int c;\n+\n+void\n+foo (int i)\n+{\n+  E e = (E) i;\n+  while (c)\n+    switch (e)\n+      {\n+      case E0:\n+        bar ();\n+      case E1:\n+        baz ();\n+      }\n+}"}, {"sha": "61c04ed9f2e2d5317dbbde6ccf8003f8d86ce798", "filename": "gcc/tree-ssa-loop-unswitch.cc", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a6b8d9aad9f68eec223cc126d9effbf45e37271/gcc%2Ftree-ssa-loop-unswitch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a6b8d9aad9f68eec223cc126d9effbf45e37271/gcc%2Ftree-ssa-loop-unswitch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.cc?ref=4a6b8d9aad9f68eec223cc126d9effbf45e37271", "patch": "@@ -523,22 +523,19 @@ find_unswitching_predicates_for_bb (basic_block bb, class loop *loop,\n \t  tree lab = gimple_switch_label (stmt, i);\n \t  tree cmp;\n \t  int_range<2> lab_range;\n+\t  tree low = fold_convert (idx_type, CASE_LOW (lab));\n \t  if (CASE_HIGH (lab) != NULL_TREE)\n \t    {\n-\t      tree cmp1 = fold_build2 (GE_EXPR, boolean_type_node, idx,\n-\t\t\t\t       fold_convert (idx_type,\n-\t\t\t\t\t\t     CASE_LOW (lab)));\n-\t      tree cmp2 = fold_build2 (LE_EXPR, boolean_type_node, idx,\n-\t\t\t\t       fold_convert (idx_type,\n-\t\t\t\t\t\t     CASE_HIGH (lab)));\n+\t      tree high = fold_convert (idx_type, CASE_HIGH (lab));\n+\t      tree cmp1 = fold_build2 (GE_EXPR, boolean_type_node, idx, low);\n+\t      tree cmp2 = fold_build2 (LE_EXPR, boolean_type_node, idx, high);\n \t      cmp = fold_build2 (BIT_AND_EXPR, boolean_type_node, cmp1, cmp2);\n-\t      lab_range.set (CASE_LOW (lab), CASE_HIGH (lab));\n+\t      lab_range.set (low, high);\n \t    }\n \t  else\n \t    {\n-\t      cmp = fold_build2 (EQ_EXPR, boolean_type_node, idx,\n-\t\t\t\t fold_convert (idx_type, CASE_LOW (lab)));\n-\t      lab_range.set (CASE_LOW (lab));\n+\t      cmp = fold_build2 (EQ_EXPR, boolean_type_node, idx, low);\n+\t      lab_range.set (low);\n \t    }\n \n \t  /* Combine the expression with the existing one.  */"}]}