{"sha": "3c08de34076ffc085e335cc9c89661945823c594", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MwOGRlMzQwNzZmZmMwODVlMzM1Y2M5Yzg5NjYxOTQ1ODIzYzU5NA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-12-16T10:34:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-12-16T10:34:37Z"}, "message": "[Ada] Prototype implementastion of Ada2020 Map-reduce construct\n\n2019-12-16  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* scng.adb (Scan): In Ada2020, a left-bracket indicates the\n\tstart of an homogenous aggregate.\n\t* par-ch4.adb (P_Reduction_Attribute_Reference): New procedure.\n\t(P_Aggregate): Recognize Ada2020 bracket-delimited aggregates.\n\t(P_Primary): Ditto.\n\t* par-util.adb (Comma_Present): Return false on a right bracket\n\tin Ada2020, indicating the end of an aggregate.\n\t* snames.ads-tmpl: Introduce Name_Reduce and Attribute Reduce.\n\t* sinfo.ads, sinfo.adb (Is_Homogeneous_Aggregate): New flag on\n\taggregates, to designate an Ada2020 array or container aggregate\n\tthat is bracket-delimited in the source.\n\t* sem_attr.adb (Analyze_Attribute): For attribute Reduce, verify\n\tthat two arguments are present, and verify that the prefix is a\n\tstream or an object that is iterable (array or contrainer).\n\t(Resolve_Attribute): For attribute Reduce, resolve initial value\n\twith the type of the context. Type-checking of element type of\n\tprefix is performed after expansion.\n\t* exp_attr.adb (Expand_N_Attribute_Reference): For attribute\n\tReduce, expand into a loop: a) If prefix is an aggregate with a\n\tsingle iterated component association, use its iterator\n\tspecification to construct a loop, b) If prefix is a name, build\n\ta loop using an element iterator loop.\n\t* scans.ads: Add brackets tokens.\n\nFrom-SVN: r279431", "tree": {"sha": "f6a24aff8adfefc807a1d2c3520a1f027fe13e3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6a24aff8adfefc807a1d2c3520a1f027fe13e3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c08de34076ffc085e335cc9c89661945823c594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c08de34076ffc085e335cc9c89661945823c594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c08de34076ffc085e335cc9c89661945823c594", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c08de34076ffc085e335cc9c89661945823c594/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a517d6c19a572a4aa37569f54186883d70627686", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a517d6c19a572a4aa37569f54186883d70627686", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a517d6c19a572a4aa37569f54186883d70627686"}], "stats": {"total": 376, "additions": 371, "deletions": 5}, "files": [{"sha": "79d204255dd24b87c200f6c7e41a3ec8af0d3faf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3c08de34076ffc085e335cc9c89661945823c594", "patch": "@@ -1,3 +1,29 @@\n+2019-12-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* scng.adb (Scan): In Ada2020, a left-bracket indicates the\n+\tstart of an homogenous aggregate.\n+\t* par-ch4.adb (P_Reduction_Attribute_Reference): New procedure.\n+\t(P_Aggregate): Recognize Ada2020 bracket-delimited aggregates.\n+\t(P_Primary): Ditto.\n+\t* par-util.adb (Comma_Present): Return false on a right bracket\n+\tin Ada2020, indicating the end of an aggregate.\n+\t* snames.ads-tmpl: Introduce Name_Reduce and Attribute Reduce.\n+\t* sinfo.ads, sinfo.adb (Is_Homogeneous_Aggregate): New flag on\n+\taggregates, to designate an Ada2020 array or container aggregate\n+\tthat is bracket-delimited in the source.\n+\t* sem_attr.adb (Analyze_Attribute): For attribute Reduce, verify\n+\tthat two arguments are present, and verify that the prefix is a\n+\tstream or an object that is iterable (array or contrainer).\n+\t(Resolve_Attribute): For attribute Reduce, resolve initial value\n+\twith the type of the context. Type-checking of element type of\n+\tprefix is performed after expansion.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): For attribute\n+\tReduce, expand into a loop: a) If prefix is an aggregate with a\n+\tsingle iterated component association, use its iterator\n+\tspecification to construct a loop, b) If prefix is a name, build\n+\ta loop using an element iterator loop.\n+\t* scans.ads: Add brackets tokens.\n+\n 2019-12-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity): Adjust calls to"}, {"sha": "f35fa73128ef4308a7ced0a32e2c9811e11e968d", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=3c08de34076ffc085e335cc9c89661945823c594", "patch": "@@ -5463,6 +5463,97 @@ package body Exp_Attr is\n             Apply_Universal_Integer_Attribute_Checks (N);\n          end if;\n \n+      ------------\n+      -- Reduce --\n+      ------------\n+\n+      when Attribute_Reduce =>\n+         declare\n+            Loc     : constant Source_Ptr := Sloc (N);\n+            E1      : constant Node_Id := First (Expressions (N));\n+            E2      : constant Node_Id := Next (E1);\n+            Bnn     : constant Entity_Id := Make_Temporary (Loc, 'B', N);\n+            Typ     : constant Entity_Id := Etype (N);\n+            New_Loop : Node_Id;\n+\n+         --  If the prefix is an aggregwte, its unique component is sn\n+         --  Iterated_Element, and we create a loop out of its itertor.\n+\n+         begin\n+            if Nkind (Prefix (N)) = N_Aggregate then\n+               declare\n+                  Stream  : constant Node_Id :=\n+                     First (Component_Associations (Prefix (N)));\n+                  Id      : constant Node_Id := Defining_Identifier (Stream);\n+                  Expr    : constant Node_Id := Expression (Stream);\n+                  Ch      : constant Node_Id :=\n+                               First (Discrete_Choices (Stream));\n+               begin\n+                  New_Loop := Make_Loop_Statement (Loc,\n+                    Iteration_Scheme =>\n+                      Make_Iteration_Scheme (Loc,\n+                        Iterator_Specification => Empty,\n+                        Loop_Parameter_Specification =>\n+                          Make_Loop_Parameter_Specification  (Loc,\n+                            Defining_Identifier => New_Copy (Id),\n+                            Discrete_Subtype_Definition =>\n+                              Relocate_Node (Ch))),\n+                      End_Label => Empty,\n+                      Statements => New_List (\n+                        Make_Assignment_Statement (Loc,\n+                          Name => New_Occurrence_Of (Bnn, Loc),\n+                          Expression => Make_Function_Call (Loc,\n+                            Name => New_Occurrence_Of (Entity (E1), Loc),\n+                            Parameter_Associations => New_List (\n+                              New_Occurrence_Of (Bnn, Loc),\n+                              Relocate_Node (Expr))))));\n+               end;\n+            else\n+               --  If the prefix is a name we construct an element iterwtor\n+               --  over it. Its expansion will verify that it is an array\n+               --  or a container with the proper aspects.\n+\n+               declare\n+                  Iter : Node_Id;\n+                  Elem : constant Entity_Id := Make_Temporary (Loc, 'E', N);\n+\n+               begin\n+                  Iter :=\n+                    Make_Iterator_Specification (Loc,\n+                    Defining_Identifier => Elem,\n+                    Name => Relocate_Node (Prefix (N)),\n+                    Subtype_Indication => Empty);\n+                  Set_Of_Present (Iter);\n+\n+                  New_Loop := Make_Loop_Statement (Loc,\n+                    Iteration_Scheme =>\n+                      Make_Iteration_Scheme (Loc,\n+                        Iterator_Specification => Iter,\n+                        Loop_Parameter_Specification => Empty),\n+                      End_Label => Empty,\n+                      Statements => New_List (\n+                        Make_Assignment_Statement (Loc,\n+                          Name => New_Occurrence_Of (Bnn, Loc),\n+                          Expression => Make_Function_Call (Loc,\n+                            Name => New_Occurrence_Of (Entity (E1), Loc),\n+                            Parameter_Associations => New_List (\n+                              New_Occurrence_Of (Bnn, Loc),\n+                              New_Occurrence_Of (Elem, Loc))))));\n+               end;\n+            end if;\n+\n+            Rewrite (N,\n+               Make_Expression_With_Actions (Loc,\n+                 Actions    => New_List (\n+                   Make_Object_Declaration (Loc,\n+                     Defining_Identifier => Bnn,\n+                     Object_Definition   =>\n+                       New_Occurrence_Of (Typ, Loc),\n+                     Expression => Relocate_Node (E2)), New_Loop),\n+                 Expression => New_Occurrence_Of (Bnn, Loc)));\n+            Analyze_And_Resolve (N, Typ);\n+         end;\n+\n       ----------\n       -- Read --\n       ----------"}, {"sha": "355aeb87c7831c89a247067b8c335e4d7a9d456f", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 79, "deletions": 2, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=3c08de34076ffc085e335cc9c89661945823c594", "patch": "@@ -81,6 +81,8 @@ package body Ch4 is\n    function P_Primary                                 return Node_Id;\n    function P_Relation                                return Node_Id;\n    function P_Term                                    return Node_Id;\n+   function P_Reduction_Attribute_Reference (S : Node_Id)\n+      return Node_Id;\n \n    function P_Binary_Adding_Operator                  return Node_Kind;\n    function P_Logical_Operator                        return Node_Kind;\n@@ -1202,12 +1204,48 @@ package body Ch4 is\n       return Attr_Node;\n    end P_Range_Attribute_Reference;\n \n+   -------------------------------------\n+   -- P_Reduction_Attribute_Reference --\n+   -------------------------------------\n+\n+   function P_Reduction_Attribute_Reference (S : Node_Id)\n+      return Node_Id\n+   is\n+      Attr_Node  : Node_Id;\n+      Attr_Name  : Name_Id;\n+\n+   begin\n+      Attr_Name := Token_Name;\n+      Scan;   --  past Reduce\n+      Attr_Node := New_Node (N_Attribute_Reference, Token_Ptr);\n+      Set_Attribute_Name (Attr_Node, Attr_Name);\n+      if Attr_Name /= Name_Reduce then\n+         Error_Msg (\"reduce attribute expected\", Prev_Token_Ptr);\n+      end if;\n+\n+      Set_Prefix (Attr_Node, S);\n+      Set_Expressions (Attr_Node, New_List);\n+      T_Left_Paren;\n+      Append (P_Name, Expressions (Attr_Node));\n+      T_Comma;\n+      Append (P_Expression, Expressions (Attr_Node));\n+      T_Right_Paren;\n+\n+      return Attr_Node;\n+   end P_Reduction_Attribute_Reference;\n+\n    ---------------------------------------\n    -- 4.1.4  Range Attribute Designator --\n    ---------------------------------------\n \n    --  Parsed by P_Range_Attribute_Reference (4.4)\n \n+   ---------------------------------------------\n+   -- 4.1.4 (2) Reduction_Attribute_Reference --\n+   ---------------------------------------------\n+\n+   --  parsed by P_Reduction_Attribute_Reference\n+\n    --------------------\n    -- 4.3  Aggregate --\n    --------------------\n@@ -1229,6 +1267,7 @@ package body Ch4 is\n       if Nkind (Aggr_Node) /= N_Aggregate\n            and then\n          Nkind (Aggr_Node) /= N_Extension_Aggregate\n+         and then Ada_Version < Ada_2020\n       then\n          Error_Msg\n            (\"aggregate may not have single positional component\", Aggr_Sloc);\n@@ -1343,7 +1382,21 @@ package body Ch4 is\n \n    begin\n       Lparen_Sloc := Token_Ptr;\n-      T_Left_Paren;\n+      if Token = Tok_Left_Bracket and then Ada_Version >= Ada_2020 then\n+         Scan;\n+\n+         --  Special case for null aggregate in Ada2020.\n+\n+         if Token = Tok_Right_Bracket then\n+            Scan;   --  past ]\n+            Aggregate_Node := New_Node (N_Aggregate, Lparen_Sloc);\n+            Set_Expressions (Aggregate_Node, New_List);\n+            Set_Is_Homogeneous_Aggregate (Aggregate_Node);\n+            return Aggregate_Node;\n+         end if;\n+      else\n+         T_Left_Paren;\n+      end if;\n \n       --  Note on parentheses count. For cases like an if expression, the\n       --  parens here really count as real parentheses for the paren count,\n@@ -1577,6 +1630,14 @@ package body Ch4 is\n \n             Append (Expr_Node, Expr_List);\n \n+         elsif Token = Tok_Right_Bracket then\n+            if No (Expr_List) then\n+               Expr_List := New_List;\n+            end if;\n+\n+            Append (Expr_Node, Expr_List);\n+            exit;\n+\n          --  Anything else is assumed to be a named association\n \n          else\n@@ -1625,7 +1686,19 @@ package body Ch4 is\n \n       --  All component associations (positional and named) have been scanned\n \n-      T_Right_Paren;\n+      if Token = Tok_Right_Bracket and then Ada_Version >= Ada_2020 then\n+         Set_Component_Associations (Aggregate_Node, Assoc_List);\n+         Set_Is_Homogeneous_Aggregate (Aggregate_Node);\n+         Scan;  --  past right bracket\n+         if Token = Tok_Apostrophe then\n+            Scan;\n+            if Token = Tok_Identifier then\n+               return P_Reduction_Attribute_Reference (Aggregate_Node);\n+            end if;\n+         end if;\n+      else\n+         T_Right_Paren;\n+      end if;\n \n       if Nkind (Aggregate_Node) /= N_Delta_Aggregate then\n          Set_Expressions (Aggregate_Node, Expr_List);\n@@ -2623,6 +2696,7 @@ package body Ch4 is\n    --  | STRING_LITERAL   | AGGREGATE\n    --  | NAME             | QUALIFIED_EXPRESSION\n    --  | ALLOCATOR        | (EXPRESSION) | QUANTIFIED_EXPRESSION\n+   --  | REDUCTION_ATTRIBUTE_REFERENCE\n \n    --  Error recovery: can raise Error_Resync\n \n@@ -2715,6 +2789,9 @@ package body Ch4 is\n                   return Expr;\n                end;\n \n+            when Tok_Left_Bracket =>\n+               return P_Aggregate;\n+\n             --  Allocator\n \n             when Tok_New =>"}, {"sha": "6379c4aa2cb2f4a3948f52768c9687caca5a314f", "filename": "gcc/ada/par-util.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2Fpar-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2Fpar-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-util.adb?ref=3c08de34076ffc085e335cc9c89661945823c594", "patch": "@@ -276,8 +276,11 @@ package body Util is\n \n       --  If we have a right paren, then that is taken as ending the list\n       --  i.e. no comma is present.\n+      --  Ditto for a right bracket in Ada2020.\n \n-      elsif Token = Tok_Right_Paren then\n+      elsif Token = Tok_Right_Paren\n+        or else (Token = Tok_Right_Bracket and then Ada_Version >= Ada_2020)\n+      then\n          return False;\n \n       --  If pragmas, then get rid of them and make a recursive call"}, {"sha": "530da548466e73f1713da0c063a236c60887e626", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=3c08de34076ffc085e335cc9c89661945823c594", "patch": "@@ -87,18 +87,23 @@ package Scans is\n       --  exception-name\". This degrades error recovery slightly, and perhaps\n       --  we could do better, but not worth the effort.\n \n+      --  Ada2020 introduces square brackets as delimiters for array and\n+      --  container aggregates.\n+\n       Tok_Raise,           -- RAISE\n \n       Tok_Dot,             -- .            Namext\n       Tok_Apostrophe,      -- '            Namext\n \n+      Tok_Left_Bracket,    -- [            Namest\n       Tok_Left_Paren,      -- (            Namext, Consk\n \n       Tok_Delta,           -- DELTA        Atkwd, Sterm, Consk\n       Tok_Digits,          -- DIGITS       Atkwd, Sterm, Consk\n       Tok_Range,           -- RANGE        Atkwd, Sterm, Consk\n \n       Tok_Right_Paren,     -- )            Sterm\n+      Tok_Right_Bracket,   -- ]            Sterm\n       Tok_Comma,           -- ,            Sterm\n \n       Tok_And,             -- AND          Logop, Sterm"}, {"sha": "d4c1916a13a3d1e7b2d9dc02664f9ff521919b32", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=3c08de34076ffc085e335cc9c89661945823c594", "patch": "@@ -182,6 +182,7 @@ package body Scng is\n             | Tok_Integer_Literal\n             | Tok_Interface\n             | Tok_Is\n+            | Tok_Left_Bracket\n             | Tok_Left_Paren\n             | Tok_Less\n             | Tok_Less_Equal\n@@ -204,6 +205,7 @@ package body Scng is\n             | Tok_Rem\n             | Tok_Renames\n             | Tok_Reverse\n+            | Tok_Right_Bracket\n             | Tok_Right_Paren\n             | Tok_Slash\n             | Tok_String_Literal\n@@ -324,6 +326,7 @@ package body Scng is\n             | Tok_In\n             | Tok_Integer_Literal\n             | Tok_Is\n+            | Tok_Left_Bracket\n             | Tok_Left_Paren\n             | Tok_Less\n             | Tok_Less_Equal\n@@ -340,6 +343,7 @@ package body Scng is\n             | Tok_Range\n             | Tok_Real_Literal\n             | Tok_Rem\n+            | Tok_Right_Bracket\n             | Tok_Right_Paren\n             | Tok_Slash\n             | Tok_String_Literal\n@@ -1697,6 +1701,11 @@ package body Scng is\n             if Source (Scan_Ptr + 1) = '\"' then\n                goto Scan_Wide_Character;\n \n+            elsif Ada_Version = Ada_2020 then\n+               Scan_Ptr := Scan_Ptr + 1;\n+               Token := Tok_Left_Bracket;\n+               return;\n+\n             else\n                Error_Msg_S (\"illegal character, replaced by \"\"(\"\"\");\n                Scan_Ptr := Scan_Ptr + 1;\n@@ -2063,6 +2072,7 @@ package body Scng is\n               or else Prev_Token = Tok_Identifier\n               or else Prev_Token = Tok_Project\n               or else Prev_Token = Tok_Right_Paren\n+              or else Prev_Token = Tok_Right_Bracket\n               or else Prev_Token in Token_Class_Literal\n             then\n                Token := Tok_Apostrophe;\n@@ -2172,11 +2182,18 @@ package body Scng is\n             return;\n \n          --  Right bracket or right brace, treated as right paren\n+         --  but proper aggregate delimiter in Ada_2020\n \n          when ']' | '}' =>\n-            Error_Msg_S (\"illegal character, replaced by \"\")\"\"\");\n+            if Ada_Version >= Ada_2020 then\n+               Token := Tok_Right_Bracket;\n+\n+            else\n+               Error_Msg_S (\"illegal character, replaced by \"\")\"\"\");\n+               Token := Tok_Right_Paren;\n+            end if;\n+\n             Scan_Ptr := Scan_Ptr + 1;\n-            Token := Tok_Right_Paren;\n             return;\n \n          --  Slash (can be division operator or first character of not equal)"}, {"sha": "72729ec8fc4f8487611caba95e06dcf0ad23bfca", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=3c08de34076ffc085e335cc9c89661945823c594", "patch": "@@ -25,6 +25,7 @@\n \n with Ada.Characters.Latin_1; use Ada.Characters.Latin_1;\n \n+with Aspects;  use Aspects;\n with Atree;    use Atree;\n with Casing;   use Casing;\n with Checks;   use Checks;\n@@ -5497,6 +5498,55 @@ package body Sem_Attr is\n          Check_Discrete_Type;\n          Set_Etype (N, Universal_Integer);\n \n+      ------------\n+      -- Reduce --\n+      ------------\n+\n+      when Attribute_Reduce =>\n+         Check_E2;\n+\n+         declare\n+            Stream : constant Node_Id := Prefix (N);\n+            Typ    : Entity_Id;\n+         begin\n+            if Nkind (Stream) /= N_Aggregate then\n+               --  Prefix is a name, as for other attributes.\n+\n+               --  If the object is a function we asume that it is not\n+               --  overloaded. AI12-242 does not suggest an name resulution\n+               --  rule for that case, but can suppose that the expected\n+               --  type of the reduction is the expected type of the\n+               --  component of the prefix.\n+\n+               Analyze_And_Resolve (Stream);\n+               Typ := Etype (Stream);\n+\n+               --  Verify that prefix can be iterated upon.\n+\n+               if Is_Array_Type (Typ)\n+                 or else Present (Find_Aspect (Typ, Aspect_Default_Iterator))\n+                 or else Present (Find_Aspect (Typ, Aspect_Iterable))\n+               then\n+                  null;\n+               else\n+                  Error_Msg_NE\n+                    (\"cannot apply reduce to object of type$\", N, Typ);\n+               end if;\n+\n+            elsif Present (Expressions (Stream))\n+              or else No (Component_Associations (Stream))\n+              or else Nkind (First (Component_Associations (Stream))) /=\n+                N_Iterated_Component_Association\n+            then\n+               Error_Msg_N\n+                 (\"Prefix of reduce must be an iterated component\", N);\n+            end if;\n+\n+            Analyze (E1);\n+            Analyze (E2);\n+            Set_Etype (N, Etype (E2));\n+         end;\n+\n       ----------\n       -- Read --\n       ----------\n@@ -8241,6 +8291,7 @@ package body Sem_Attr is\n          | Attribute_Implicit_Dereference\n          | Attribute_Iterator_Element\n          | Attribute_Iterable\n+         | Attribute_Reduce\n          | Attribute_Variable_Indexing\n       =>\n          null;\n@@ -11651,6 +11702,70 @@ package body Sem_Attr is\n             return;\n          end Range_Attribute;\n \n+         -------------\n+         -- Reduce --\n+         -------------\n+\n+         when Attribute_Reduce =>\n+            declare\n+               E1 : constant Node_Id := First (Expressions (N));\n+               E2 : constant Node_Id := Next (E1);\n+               Op : Entity_Id := Empty;\n+\n+               Index : Interp_Index;\n+               It    : Interp;\n+               function Proper_Op (Op : Entity_Id) return Boolean;\n+\n+               ---------------\n+               -- Proper_Op --\n+               ---------------\n+\n+               function Proper_Op (Op : Entity_Id) return Boolean is\n+                  F1, F2 : Entity_Id;\n+\n+               begin\n+                  F1 := First_Formal (Op);\n+                  if No (F1) then\n+                     return False;\n+                  else\n+                     F2 := Next_Formal (F1);\n+                     if No (F2)\n+                       or else Present (Next_Formal (F2))\n+                     then\n+                        return False;\n+                     else\n+                        return\n+                          (Ekind (Op) = E_Operator\n+                            and then Scope (Op) = Standard_Standard)\n+                            or else  Covers (Typ, Etype (Op));\n+                     end if;\n+                  end if;\n+               end Proper_Op;\n+\n+            begin\n+               Resolve (E2, Typ);\n+               if Is_Overloaded (E1) then\n+                  Get_First_Interp (E1, Index, It);\n+                  while Present (It.Nam) loop\n+                     if Proper_Op (It.Nam) then\n+                        Op := It.Nam;\n+                        Set_Entity (E1, Op);\n+                        exit;\n+                     end if;\n+\n+                     Get_Next_Interp (Index, It);\n+                  end loop;\n+\n+               elsif Proper_Op (Entity (E1)) then\n+                  Op := Entity (E1);\n+                  Set_Etype (N, Typ);\n+               end if;\n+\n+               if No (Op) then\n+                  Error_Msg_N (\"No visible function for reduction\", E1);\n+               end if;\n+            end;\n+\n          ------------\n          -- Result --\n          ------------"}, {"sha": "41cb8c89e945923d6faaeadc5c41520fa9abac51", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=3c08de34076ffc085e335cc9c89661945823c594", "patch": "@@ -2010,6 +2010,14 @@ package body Sinfo is\n       return Flag2 (N);\n    end Is_Generic_Contract_Pragma;\n \n+   function Is_Homogeneous_Aggregate\n+     (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Aggregate);\n+      return Flag14 (N);\n+   end Is_Homogeneous_Aggregate;\n+\n    function Is_Ignored\n       (N : Node_Id) return Boolean is\n    begin\n@@ -5505,6 +5513,14 @@ package body Sinfo is\n       Set_Flag2 (N, Val);\n    end Set_Is_Generic_Contract_Pragma;\n \n+   procedure Set_Is_Homogeneous_Aggregate\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Aggregate);\n+      Set_Flag14 (N, Val);\n+   end Set_Is_Homogeneous_Aggregate;\n+\n    procedure Set_Is_Ignored\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "706007b8dd06ae3806cb1765545986171f0170b5", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=3c08de34076ffc085e335cc9c89661945823c594", "patch": "@@ -1837,6 +1837,11 @@ package Sinfo is\n    --      Refined_State\n    --      Test_Case\n \n+   --  Is_Homogeneous_Aggregate (Flag14)\n+   --    A flag set on an Ada2020 aggregate that uses square brackets as\n+   --    delimiters, and thus denotes an array or container aggregate, or\n+   --    the prefix of a reduction attribute.\n+\n    --  Is_Ignored (Flag9-Sem)\n    --    A flag set in an N_Aspect_Specification or N_Pragma node if there was\n    --    a Check_Policy or Assertion_Policy (or in the case of a Debug_Pragma)\n@@ -4163,6 +4168,7 @@ package Sinfo is\n       --  Compile_Time_Known_Aggregate (Flag18-Sem)\n       --  Expansion_Delayed (Flag11-Sem)\n       --  Has_Self_Reference (Flag13-Sem)\n+      --  Is_Homogeneous_Aggregate (Flag14)\n       --  plus fields for expression\n \n       --  Note: this structure is used for both record and array aggregates\n@@ -9855,6 +9861,9 @@ package Sinfo is\n    function Is_Generic_Contract_Pragma\n      (N : Node_Id) return Boolean;    -- Flag2\n \n+   function Is_Homogeneous_Aggregate\n+     (N : Node_Id) return Boolean;    -- Flag14\n+\n    function Is_Ignored\n      (N : Node_Id) return Boolean;    -- Flag9\n \n@@ -10967,6 +10976,9 @@ package Sinfo is\n    procedure Set_Is_Generic_Contract_Pragma\n      (N : Node_Id; Val : Boolean := True);    -- Flag2\n \n+   procedure Set_Is_Homogeneous_Aggregate\n+     (N : Node_Id; Val : Boolean := True);    -- Flag14\n+\n    procedure Set_Is_Ignored\n      (N : Node_Id; Val : Boolean := True);    -- Flag9\n \n@@ -13521,6 +13533,7 @@ package Sinfo is\n    pragma Inline (Is_Finalization_Wrapper);\n    pragma Inline (Is_Folded_In_Parser);\n    pragma Inline (Is_Generic_Contract_Pragma);\n+   pragma Inline (Is_Homogeneous_Aggregate);\n    pragma Inline (Is_Ignored);\n    pragma Inline (Is_Ignored_Ghost_Pragma);\n    pragma Inline (Is_In_Discriminant_Check);\n@@ -13887,6 +13900,7 @@ package Sinfo is\n    pragma Inline (Set_Is_Finalization_Wrapper);\n    pragma Inline (Set_Is_Folded_In_Parser);\n    pragma Inline (Set_Is_Generic_Contract_Pragma);\n+   pragma Inline (Set_Is_Homogeneous_Aggregate);\n    pragma Inline (Set_Is_Ignored);\n    pragma Inline (Set_Is_Ignored_Ghost_Pragma);\n    pragma Inline (Set_Is_In_Discriminant_Check);"}, {"sha": "9d8f13ba5af1aa5d953ea9989c8195e89ebdc23a", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c08de34076ffc085e335cc9c89661945823c594/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=3c08de34076ffc085e335cc9c89661945823c594", "patch": "@@ -1002,6 +1002,7 @@ package Snames is\n    Name_Priority                       : constant Name_Id := N + $; -- Ada 05\n    Name_Range                          : constant Name_Id := N + $;\n    Name_Range_Length                   : constant Name_Id := N + $; -- GNAT\n+   Name_Reduce                         : constant Name_Id := N + $;\n    Name_Ref                            : constant Name_Id := N + $; -- GNAT\n    Name_Restriction_Set                : constant Name_Id := N + $; -- GNAT\n    Name_Result                         : constant Name_Id := N + $; -- GNAT\n@@ -1674,6 +1675,7 @@ package Snames is\n       Attribute_Priority,\n       Attribute_Range,\n       Attribute_Range_Length,\n+      Attribute_Reduce,\n       Attribute_Ref,\n       Attribute_Restriction_Set,\n       Attribute_Result,"}]}