{"sha": "299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk5NDA0YTFlYzNkMmRjN2UyYjE5ZWE3OWMzZTlmMzU1MmI2MjE1ZA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-11-24T00:54:26Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-11-24T00:54:26Z"}, "message": "common.opt (initial_max_fld_align, [...]): New Variable entries.\n\n\t* common.opt (initial_max_fld_align, flag_debug_asm,\n\tflag_dump_rtl_in_asm, flag_dump_all_passed, rtl_dump_and_exit,\n\tflag_print_asm_name, graph_dump_format, help_printed,\n\thelp_columns, flag_opts_finished): New Variable entries.\n\t(fdbg-cnt-list, fdbg-cnt=, fdebug-prefix-map=, frandom-seed,\n\tfrandom-seed=): Mark deferred.\n\t(fsched-verbose=): Use UInteger and Var.\n\t* flags.h (set_struct_debug_option, flag_print_asm_name,\n\trtl_dump_and_exit, flag_debug_asm, flag_dump_rtl_in_asm,\n\tgraph_dump_format): Don't declare here.\n\t* haifa-sched.c (sched_verbose_param, fix_sched_param): Remove.\n\t* opts-global.c: Include dbgcnt.h and debug.h.\n\t(decode_options): Pass location to finish_options.\n\t(handle_common_deferred_options): Check flag_dump_all_passed.\n\tHandle OPT_fdbg_cnt_, OPT_fdbg_cnt_list, OPT_fdebug_prefix_map_,\n\tOPT_frandom_seed and OPT_frandom_seed_.  Don't assert on\n\tOPT_fstack_limit.\n\t* opts.c: Don't include toplev.h, dbgcnt.h or debug.h.\n\t(set_struct_debug_option): Add location_t parameter.  Update\n\trecursive call.  Use error_at.\n\t(default_options_optimization): Use error_at.\n\t(finish_options): Add location_t parameter.  Use\n\topts->x_flag_opts_finished instead of first_time_p.  Use\n\topts->x_optimize instead of optimize.  Use error_at.  Pass\n\tlocation to inform.\n\t(print_filtered_help): Use opts->x_help_printed to track what\n\toptions have been printed.\n\t(print_specific_help): Use opts->x_help_columns to track number of\n\tcolumns.\n\t(common_handle_option): Pass locations and gcc_options pointers to\n\tmore functions.  Use warning_at instead of fnotice and warning.\n\tDon't handle OPT_fdbg_cnt_, OPT_fdbg_cnt_list or\n\tOPT_fdebug_prefix_map_.  Use error_at.  Set\n\topts->x_initial_max_fld_align; don't set maximum_field_alignment.\n\tDon't handle OPT_frandom_seed or OPT_frandom_seed_.  Don't handle\n\tOPT_fsched_verbose_.\n\t(handle_param): Add location_r parameter.  Use error_at.\n\t(set_debug_level): Add location_r parameter.  Use error_at and\n\twarning_at.\n\t(setup_core_dumping): Add diagnostic_context parameter.\n\t(decode_d_option): Add gcc_options, location_t and\n\tdiagnostic_context parameters and use them instead of global\n\tstate.  Use warning_at.\n\t(enable_warning_as_error): Use error_at.\n\t* opts.h (finish_options): Update prototype.\n\t(set_struct_debug_option): Declare here.\n\t* rtl.h (fix_sched_param): Remove.\n\t* stor-layout.c (initial_max_fld_align): Remove.\n\t* toplev.c (rtl_dump_and_exit, flag_print_asm_name,\n\tgraph_dump_format, flag_debug_asm, flag_dump_rtl_in_asm): Remove.\n\t(process_options): Set maximum_field_alignment.\n\t* tree.h (initial_max_fld_align) Don't declare here.\n\t* Makefile.in (opts.o, opts-global.o): Update dependencies.\n\nc-family:\n\t* c-opts.c (c_common_handle_option): Pass location to\n\tset_struct_debug_option.\n\ntestsuite:\n\t* gcc.dg/opts-5.c: New test.\n\nFrom-SVN: r167106", "tree": {"sha": "083c8faf230cd5683309b75bc0500baa489ad7cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/083c8faf230cd5683309b75bc0500baa489ad7cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c98cd5bff60fa2a0bd31fcdbd2f0758a32639c09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c98cd5bff60fa2a0bd31fcdbd2f0758a32639c09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c98cd5bff60fa2a0bd31fcdbd2f0758a32639c09"}], "stats": {"total": 484, "additions": 291, "deletions": 193}, "files": [{"sha": "b7309ab1068a2fed9f372128a7b369ae1d941977", "filename": "gcc/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "patch": "@@ -1,3 +1,59 @@\n+2010-11-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* common.opt (initial_max_fld_align, flag_debug_asm,\n+\tflag_dump_rtl_in_asm, flag_dump_all_passed, rtl_dump_and_exit,\n+\tflag_print_asm_name, graph_dump_format, help_printed,\n+\thelp_columns, flag_opts_finished): New Variable entries.\n+\t(fdbg-cnt-list, fdbg-cnt=, fdebug-prefix-map=, frandom-seed,\n+\tfrandom-seed=): Mark deferred.\n+\t(fsched-verbose=): Use UInteger and Var.\n+\t* flags.h (set_struct_debug_option, flag_print_asm_name,\n+\trtl_dump_and_exit, flag_debug_asm, flag_dump_rtl_in_asm,\n+\tgraph_dump_format): Don't declare here.\n+\t* haifa-sched.c (sched_verbose_param, fix_sched_param): Remove.\n+\t* opts-global.c: Include dbgcnt.h and debug.h.\n+\t(decode_options): Pass location to finish_options.\n+\t(handle_common_deferred_options): Check flag_dump_all_passed.\n+\tHandle OPT_fdbg_cnt_, OPT_fdbg_cnt_list, OPT_fdebug_prefix_map_,\n+\tOPT_frandom_seed and OPT_frandom_seed_.  Don't assert on\n+\tOPT_fstack_limit.\n+\t* opts.c: Don't include toplev.h, dbgcnt.h or debug.h.\n+\t(set_struct_debug_option): Add location_t parameter.  Update\n+\trecursive call.  Use error_at.\n+\t(default_options_optimization): Use error_at.\n+\t(finish_options): Add location_t parameter.  Use\n+\topts->x_flag_opts_finished instead of first_time_p.  Use\n+\topts->x_optimize instead of optimize.  Use error_at.  Pass\n+\tlocation to inform.\n+\t(print_filtered_help): Use opts->x_help_printed to track what\n+\toptions have been printed.\n+\t(print_specific_help): Use opts->x_help_columns to track number of\n+\tcolumns.\n+\t(common_handle_option): Pass locations and gcc_options pointers to\n+\tmore functions.  Use warning_at instead of fnotice and warning.\n+\tDon't handle OPT_fdbg_cnt_, OPT_fdbg_cnt_list or\n+\tOPT_fdebug_prefix_map_.  Use error_at.  Set\n+\topts->x_initial_max_fld_align; don't set maximum_field_alignment.\n+\tDon't handle OPT_frandom_seed or OPT_frandom_seed_.  Don't handle\n+\tOPT_fsched_verbose_.\n+\t(handle_param): Add location_r parameter.  Use error_at.\n+\t(set_debug_level): Add location_r parameter.  Use error_at and\n+\twarning_at.\n+\t(setup_core_dumping): Add diagnostic_context parameter.\n+\t(decode_d_option): Add gcc_options, location_t and\n+\tdiagnostic_context parameters and use them instead of global\n+\tstate.  Use warning_at.\n+\t(enable_warning_as_error): Use error_at.\n+\t* opts.h (finish_options): Update prototype.\n+\t(set_struct_debug_option): Declare here.\n+\t* rtl.h (fix_sched_param): Remove.\n+\t* stor-layout.c (initial_max_fld_align): Remove.\n+\t* toplev.c (rtl_dump_and_exit, flag_print_asm_name,\n+\tgraph_dump_format, flag_debug_asm, flag_dump_rtl_in_asm): Remove.\n+\t(process_options): Set maximum_field_alignment.\n+\t* tree.h (initial_max_fld_align) Don't declare here.\n+\t* Makefile.in (opts.o, opts-global.o): Update dependencies.\n+\n 2010-11-23  Joseph Myers  <joseph@codesourcery.com>\n \n \t* flag-types.h (struct visibility_flags): Don't declare here."}, {"sha": "bf562fa75816502767c7ecbc2857642a0ffc1604", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "patch": "@@ -2823,15 +2823,14 @@ fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(GIMPLE_H) realmpfr.h $(TREE_FLOW_H)\n diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    version.h $(INPUT_H) intl.h $(DIAGNOSTIC_H) diagnostic.def\n-opts.o : opts.c $(OPTS_H) $(OPTIONS_H) $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) $(CONFIG_H) $(SYSTEM_H) \\\n+opts.o : opts.c $(OPTS_H) $(OPTIONS_H) $(DIAGNOSTIC_CORE_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TREE_H) $(TM_H) $(RTL_H) \\\n    $(DIAGNOSTIC_H) $(INSN_ATTR_H) intl.h $(TARGET_H) \\\n-   $(FLAGS_H) $(PARAMS_H) $(DBGCNT_H) debug.h \\\n-   opts-diagnostic.h\n+   $(FLAGS_H) $(PARAMS_H) opts-diagnostic.h\n opts-global.o : opts-global.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(DIAGNOSTIC_H) $(OPTS_H) $(FLAGS_H) $(GGC_H) $(TREE_H) langhooks.h \\\n-   $(TM_H) $(RTL_H) $(LTO_STREAMER_H) output.h $(PLUGIN_H) $(TOPLEV_H) \\\n-   $(TREE_PASS_H)\n+   $(TM_H) $(RTL_H) $(DBGCNT_H) debug.h $(LTO_STREAMER_H) output.h \\\n+   $(PLUGIN_H) $(TOPLEV_H) $(TREE_PASS_H)\n opts-common.o : opts-common.c $(OPTS_H) $(FLAGS_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h intl.h $(DIAGNOSTIC_H) $(TM_H)\n targhooks.o : targhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\"}, {"sha": "1b14b0ebbbefe06fb015a98f93f2e81dbc573424", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "patch": "@@ -1,3 +1,8 @@\n+2010-11-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-opts.c (c_common_handle_option): Pass location to\n+\tset_struct_debug_option.\n+\n 2010-11-23  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.c (visibility_options): Move from ../opts.c."}, {"sha": "03af07ae8a8f151742f55c0c404e0579ce0f25f6", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "patch": "@@ -654,16 +654,16 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_femit_struct_debug_baseonly:\n-      set_struct_debug_option (&global_options, \"base\");\n+      set_struct_debug_option (&global_options, loc, \"base\");\n       break;\n \n     case OPT_femit_struct_debug_reduced:\n-      set_struct_debug_option (&global_options,\n+      set_struct_debug_option (&global_options, loc,\n \t\t\t       \"dir:ord:sys,dir:gen:any,ind:base\");\n       break;\n \n     case OPT_femit_struct_debug_detailed_:\n-      set_struct_debug_option (&global_options, arg);\n+      set_struct_debug_option (&global_options, loc, arg);\n       break;\n \n     case OPT_idirafter:"}, {"sha": "e46a27735bb218d1bcfd3f151e6feafdb230de13", "filename": "gcc/common.opt", "status": "modified", "additions": 51, "deletions": 6, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "patch": "@@ -147,6 +147,51 @@ enum debug_info_levels debug_info_level = DINFO_LEVEL_NONE\n Variable\n bool use_gnu_debug_info_extensions\n \n+; Original value of maximum field alignment in bytes, specified via\n+; -fpack-struct=<value>.\n+Variable\n+unsigned int initial_max_fld_align = TARGET_DEFAULT_PACK_STRUCT\n+\n+; -dA causes debug commentary information to be produced in\n+; the generated assembly code (to make it more readable).  This option\n+; is generally only of use to those who actually need to read the\n+; generated assembly code (perhaps while debugging the compiler itself).\n+; Currently, this switch is only used by dwarf2out.c; however, it is intended\n+; to be a catchall for printing debug information in the assembler file.\n+Variable\n+int flag_debug_asm\n+\n+; -dP causes the rtl to be emitted as a comment in assembly.\n+Variable\n+int flag_dump_rtl_in_asm\n+\n+; Whether -da was passed (used only in handle_common_deferred_options).\n+Variable\n+bool flag_dump_all_passed\n+\n+; Other flags saying which kinds of debugging dump have been requested.\n+\n+Variable\n+int rtl_dump_and_exit\n+\n+Variable\n+int flag_print_asm_name\n+\n+Variable\n+enum graph_dump_types graph_dump_format = no_graph\n+\n+; Which options have been printed by --help.\n+Variable\n+char *help_printed\n+\n+; The number of columns for --help output.\n+Variable\n+unsigned int help_columns\n+\n+; Whether this options structure has been through finish_options\n+Variable\n+bool flag_opts_finished\n+\n ###\n Driver\n \n@@ -823,15 +868,15 @@ Common Report Var(flag_data_sections) Optimization\n Place data items into their own section\n \n fdbg-cnt-list\n-Common Report\n+Common Report Var(common_deferred_options) Defer\n List all available debugging counters with their limits and counts.\n \n fdbg-cnt=\n-Common RejectNegative Joined\n+Common RejectNegative Joined Var(common_deferred_options) Defer\n -fdbg-cnt=<counter>:<limit>[,<counter>:<limit>,...]\tSet the debug counter limit.   \n \n fdebug-prefix-map=\n-Common Joined RejectNegative\n+Common Joined RejectNegative Var(common_deferred_options) Defer\n Map one directory name to another in debug information\n \n ; Nonzero for -fdefer-pop: don't pop args after each function call\n@@ -1401,10 +1446,10 @@ Common Report Var(flag_profile_values)\n Insert code to profile values of expressions\n \n frandom-seed\n-Common\n+Common Var(common_deferred_options) Defer\n \n frandom-seed=\n-Common Joined RejectNegative\n+Common Joined RejectNegative Var(common_deferred_options) Defer\n -frandom-seed=<string>\tMake compile reproducible using <string>\n \n ; This switch causes the command line that was used to create an\n@@ -1474,7 +1519,7 @@ Common Report Var(flag_schedule_speculative_load_dangerous) Optimization\n Allow speculative motion of more loads\n \n fsched-verbose=\n-Common RejectNegative Joined\n+Common RejectNegative Joined UInteger Var(sched_verbose_param)\n -fsched-verbose=<number>\tSet the verbosity level of the scheduler\n \n fsched2-use-superblocks"}, {"sha": "a3e277cece995d3801ec1c1ea984048e9c2dd7c3", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "patch": "@@ -33,8 +33,6 @@ extern const char *const debug_type_names[];\n \n extern void strip_off_ending (char *, int);\n extern int base_of_path (const char *path, const char **base_out);\n-extern void set_struct_debug_option (struct gcc_options *opts,\n-\t\t\t\t     const char *value);\n \n /* Run the second compilation of -fcompare-debug.  Not defined using\n    Var in common.opt because this is used in Ada code and so must be\n@@ -60,18 +58,9 @@ extern bool fast_math_flags_struct_set_p (struct cl_optimization *);\n    set to the default value of -Wstrict_aliasing=level.  */\n \n extern void set_Wstrict_aliasing (struct gcc_options *opts, int onoff);\n-\n-/* Nonzero for -dp: annotate the assembly with a comment describing the\n-   pattern and alternative used.  */\n-\n-extern int flag_print_asm_name;\n \f\n /* Now the symbols that are set with `-f' switches.  */\n \n-/* Nonzero if we are only using compiler to check syntax errors.  */\n-\n-extern int rtl_dump_and_exit;\n-\n /* True if printing into -fdump-final-insns= dump.  */\n \n extern bool final_insns_dump_p;\n@@ -80,20 +69,9 @@ extern bool final_insns_dump_p;\n \n extern int flag_permissive;\n \n-/* -dA causes debug information to be produced in\n-   the generated assembly code (to make it more readable).  This option\n-   is generally only of use to those who actually need to read the\n-   generated assembly code (perhaps while debugging the compiler itself).\n-   Currently, this switch is only used by dwarfout.c; however, it is intended\n-   to be a catchall for printing debug information in the assembler file.  */\n-\n-extern int flag_debug_asm;\n-\n /* Generate code for GNU or NeXT Objective-C runtime environment.  */\n \n extern int flag_next_runtime;\n-\n-extern int flag_dump_rtl_in_asm;\n \f\n /* Other basic status info about current function.  */\n \n@@ -142,8 +120,6 @@ extern struct target_flag_state *this_target_flag_state;\n /* Nonzero if we dump in VCG format, not plain text.  */\n extern int dump_for_graph;\n \n-extern enum graph_dump_types graph_dump_format;\n-\n extern enum stack_check_type flag_stack_check;\n \n /* Returns TRUE if generated code should match ABI version N or"}, {"sha": "3bc7dfd16ac78853b3aa5e2c9bbe8643173e61fa", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "patch": "@@ -167,25 +167,12 @@ int issue_rate;\n    N=3: rtl at abort point, control-flow, regions info.\n    N=5: dependences info.  */\n \n-static int sched_verbose_param = 0;\n int sched_verbose = 0;\n \n /* Debugging file.  All printouts are sent to dump, which is always set,\n    either to stderr, or to the dump listing file (-dRS).  */\n FILE *sched_dump = 0;\n \n-/* fix_sched_param() is called from toplev.c upon detection\n-   of the -fsched-verbose=N option.  */\n-\n-void\n-fix_sched_param (const char *param, const char *val)\n-{\n-  if (!strcmp (param, \"verbose\"))\n-    sched_verbose_param = atoi (val);\n-  else\n-    warning (0, \"fix_sched_param: unknown param: %s\", param);\n-}\n-\n /* This is a placeholder for the scheduler parameters common\n    to all schedulers.  */\n struct common_sched_info_def *common_sched_info;"}, {"sha": "dc462ec354f1d879a1baa587240fede19003e497", "filename": "gcc/opts-global.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Fopts-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Fopts-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-global.c?ref=299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "patch": "@@ -30,6 +30,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"tm.h\" /* Required by rtl.h.  */\n #include \"rtl.h\"\n+#include \"dbgcnt.h\"\n+#include \"debug.h\"\n #include \"lto-streamer.h\"\n #include \"output.h\"\n #include \"plugin.h\"\n@@ -326,7 +328,7 @@ decode_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \t\t\tloc, lang_mask,\n \t\t\t&handlers, dc);\n \n-  finish_options (opts, opts_set);\n+  finish_options (opts, opts_set, loc);\n }\n \n /* Process common options that have been deferred until after the\n@@ -340,6 +342,9 @@ handle_common_deferred_options (void)\n   VEC(cl_deferred_option,heap) *vec\n     = (VEC(cl_deferred_option,heap) *) common_deferred_options;\n \n+  if (flag_dump_all_passed)\n+    enable_rtl_dump_file ();\n+\n   FOR_EACH_VEC_ELT (cl_deferred_option, vec, i, opt)\n     {\n       switch (opt->opt_index)\n@@ -352,6 +357,18 @@ handle_common_deferred_options (void)\n \t  fix_register (opt->arg, 0, 0);\n \t  break;\n \n+\tcase OPT_fdbg_cnt_:\n+\t  dbg_cnt_process_opt (opt->arg);\n+\t  break;\n+\n+\tcase OPT_fdbg_cnt_list:\n+\t  dbg_cnt_list_all_counters ();\n+\t  break;\n+\n+\tcase OPT_fdebug_prefix_map_:\n+\t  add_debug_prefix_map (opt->arg);\n+\t  break;\n+\n \tcase OPT_fdump_:\n \t  if (!dump_switch_p (opt->arg))\n \t    error (\"unrecognized command line option %<-fdump-%s%>\", opt->arg);\n@@ -378,10 +395,20 @@ handle_common_deferred_options (void)\n #endif\n \t  break;\n \n+\tcase OPT_frandom_seed:\n+\t  /* The real switch is -fno-random-seed.  */\n+\t  if (!opt->value)\n+\t    set_random_seed (NULL);\n+\t  break;\n+\n+\tcase OPT_frandom_seed_:\n+\t  set_random_seed (opt->arg);\n+\t  break;\n+\n \tcase OPT_fstack_limit:\n \t  /* The real switch is -fno-stack-limit.  */\n-\t  gcc_assert (!opt->value);\n-\t  stack_limit_rtx = NULL_RTX;\n+\t  if (!opt->value)\n+\t    stack_limit_rtx = NULL_RTX;\n \t  break;\n \n \tcase OPT_fstack_limit_register_:"}, {"sha": "309945656923993ba2f06ead9774d3341e4163f2", "filename": "gcc/opts.c", "status": "modified", "additions": 126, "deletions": 112, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "patch": "@@ -37,14 +37,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"options.h\"\n #include \"flags.h\"\n-#include \"toplev.h\" /* For set_random_seed and enable_rtl_dump_file.  */\n #include \"params.h\"\n #include \"diagnostic.h\"\n #include \"opts-diagnostic.h\"\n #include \"insn-attr.h\"\t\t/* For INSN_SCHEDULING and DELAY_SLOTS.  */\n #include \"target.h\"\n-#include \"dbgcnt.h\"\n-#include \"debug.h\"\n \n /* Run the second compilation of -fcompare-debug.  Not defined using\n    Var in common.opt because this is used in Ada code and so must be\n@@ -59,7 +56,8 @@ int flag_compare_debug;\n    ? ((string += sizeof prefix - 1), 1) : 0)\n \n void\n-set_struct_debug_option (struct gcc_options *opts, const char *spec)\n+set_struct_debug_option (struct gcc_options *opts, location_t loc,\n+\t\t\t const char *spec)\n {\n   /* various labels for comparison */\n   static const char dfn_lbl[] = \"dfn:\", dir_lbl[] = \"dir:\", ind_lbl[] = \"ind:\";\n@@ -96,8 +94,10 @@ set_struct_debug_option (struct gcc_options *opts, const char *spec)\n   else if (MATCH (base_lbl, spec))\n     files = DINFO_STRUCT_FILE_BASE;\n   else\n-    error (\"argument %qs to %<-femit-struct-debug-detailed%> not recognized\",\n-           spec);\n+    error_at (loc,\n+\t      \"argument %qs to %<-femit-struct-debug-detailed%> \"\n+\t      \"not recognized\",\n+\t      spec);\n \n   /* Effect the specification. */\n   if (usage == DINFO_USAGE_NUM_ENUMS)\n@@ -124,20 +124,23 @@ set_struct_debug_option (struct gcc_options *opts, const char *spec)\n     }\n \n   if (*spec == ',')\n-    set_struct_debug_option (opts, spec+1);\n+    set_struct_debug_option (opts, loc, spec+1);\n   else\n     {\n       /* No more -femit-struct-debug-detailed specifications.\n          Do final checks. */\n       if (*spec != '\\0')\n-\terror (\"argument %qs to %<-femit-struct-debug-detailed%> unknown\",\n-               spec);\n+\terror_at (loc,\n+\t\t  \"argument %qs to %<-femit-struct-debug-detailed%> unknown\",\n+\t\t  spec);\n       if (opts->x_debug_struct_ordinary[DINFO_USAGE_DIR_USE]\n \t\t< opts->x_debug_struct_ordinary[DINFO_USAGE_IND_USE]\n \t  || opts->x_debug_struct_generic[DINFO_USAGE_DIR_USE]\n \t\t< opts->x_debug_struct_generic[DINFO_USAGE_IND_USE])\n-\terror (\"%<-femit-struct-debug-detailed=dir:...%> must allow at least\"\n-               \" as much as %<-femit-struct-debug-detailed=ind:...%>\");\n+\terror_at (loc,\n+\t\t  \"%<-femit-struct-debug-detailed=dir:...%> must allow \"\n+\t\t  \"at least as much as \"\n+\t\t  \"%<-femit-struct-debug-detailed=ind:...%>\");\n     }\n }\n \n@@ -194,12 +197,15 @@ DEF_VEC_P(char_p);\n DEF_VEC_ALLOC_P(char_p,heap);\n \n static void handle_param (struct gcc_options *opts,\n-\t\t\t  struct gcc_options *opts_set, const char *carg);\n+\t\t\t  struct gcc_options *opts_set, location_t loc,\n+\t\t\t  const char *carg);\n static void set_debug_level (enum debug_info_type type, int extended,\n \t\t\t     const char *arg, struct gcc_options *opts,\n-\t\t\t     struct gcc_options *opts_set);\n+\t\t\t     struct gcc_options *opts_set,\n+\t\t\t     location_t loc);\n static void set_fast_math_flags (struct gcc_options *opts, int set);\n-static void decode_d_option (const char *arg);\n+static void decode_d_option (const char *arg, struct gcc_options *opts,\n+\t\t\t     location_t loc, diagnostic_context *dc);\n static void set_unsafe_math_optimizations_flags (struct gcc_options *opts,\n \t\t\t\t\t\t int set);\n static void enable_warning_as_error (const char *arg, int value,\n@@ -535,8 +541,9 @@ default_options_optimization (struct gcc_options *opts,\n \t    {\n \t      const int optimize_val = integral_argument (opt->arg);\n \t      if (optimize_val == -1)\n-\t\terror (\"argument to %qs should be a non-negative integer\",\n-\t\t       \"-O\");\n+\t\terror_at (loc,\n+\t\t\t  \"argument to %qs should be a non-negative integer\",\n+\t\t\t  \"-O\");\n \t      else\n \t\t{\n \t\t  opts->x_optimize = optimize_val;\n@@ -604,15 +611,18 @@ default_options_optimization (struct gcc_options *opts,\n \t\t\t ofast, lang_mask, handlers, loc, dc);\n }\n \n-/* After all options have been read into OPTS and OPTS_SET, finalize\n-   settings of those options and diagnose incompatible\n+/* After all options at LOC have been read into OPTS and OPTS_SET,\n+   finalize settings of those options and diagnose incompatible\n    combinations.  */\n void\n-finish_options (struct gcc_options *opts, struct gcc_options *opts_set)\n+finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\tlocation_t loc)\n {\n-  static bool first_time_p = true;\n   enum unwind_info_type ui_except;\n \n+  /* These assertions are because of the use of target hooks that\n+     still access global data rather than being passed an options\n+     structure pointer.  */\n   gcc_assert (opts == &global_options);\n   gcc_assert (opts_set = &global_options_set);\n \n@@ -651,12 +661,12 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set)\n   if (!opts->x_flag_unit_at_a_time)\n     {\n       if (opts->x_flag_section_anchors && opts_set->x_flag_section_anchors)\n-\terror (\"section anchors must be disabled when unit-at-a-time \"\n-\t       \"is disabled\");\n+\terror_at (loc, \"section anchors must be disabled when unit-at-a-time \"\n+\t\t  \"is disabled\");\n       opts->x_flag_section_anchors = 0;\n       if (opts->x_flag_toplevel_reorder == 1)\n-\terror (\"toplevel reorder must be disabled when unit-at-a-time \"\n-\t       \"is disabled\");\n+\terror_at (loc, \"toplevel reorder must be disabled when unit-at-a-time \"\n+\t\t  \"is disabled\");\n       opts->x_flag_toplevel_reorder = 0;\n     }\n \n@@ -667,7 +677,7 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set)\n   /* Unless the user has asked for section anchors, we disable toplevel\n      reordering at -O0 to disable transformations that might be surprising\n      to end users and to get -fno-toplevel-reorder tested.  */\n-  if (!optimize\n+  if (!opts->x_optimize\n       && opts->x_flag_toplevel_reorder == 2\n       && !(opts->x_flag_section_anchors && opts_set->x_flag_section_anchors))\n     {\n@@ -677,21 +687,21 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set)\n   if (!opts->x_flag_toplevel_reorder)\n     {\n       if (opts->x_flag_section_anchors && opts_set->x_flag_section_anchors)\n-\terror (\"section anchors must be disabled when toplevel reorder\"\n-\t       \" is disabled\");\n+\terror_at (loc, \"section anchors must be disabled when toplevel reorder\"\n+\t\t  \" is disabled\");\n       opts->x_flag_section_anchors = 0;\n     }\n \n-  if (first_time_p)\n+  if (!opts->x_flag_opts_finished)\n     {\n       if (opts->x_flag_pie)\n \topts->x_flag_pic = opts->x_flag_pie;\n       if (opts->x_flag_pic && !opts->x_flag_pie)\n \topts->x_flag_shlib = 1;\n-      first_time_p = false;\n+      opts->x_flag_opts_finished = false;\n     }\n \n-  if (optimize == 0)\n+  if (opts->x_optimize == 0)\n     {\n       /* Inlining does not work if not optimizing,\n \t so force it not to be done.  */\n@@ -711,7 +721,7 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set)\n       && opts->x_flag_reorder_blocks_and_partition\n       && (ui_except == UI_SJLJ || ui_except == UI_TARGET))\n     {\n-      inform (input_location,\n+      inform (loc,\n \t      \"-freorder-blocks-and-partition does not work \"\n \t      \"with exceptions on this architecture\");\n       opts->x_flag_reorder_blocks_and_partition = 0;\n@@ -726,7 +736,7 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set)\n       && opts->x_flag_reorder_blocks_and_partition\n       && (ui_except == UI_SJLJ || ui_except == UI_TARGET))\n     {\n-      inform (input_location,\n+      inform (loc,\n \t      \"-freorder-blocks-and-partition does not support \"\n \t      \"unwind info on this architecture\");\n       opts->x_flag_reorder_blocks_and_partition = 0;\n@@ -743,7 +753,7 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set)\n \t      && targetm.unwind_tables_default\n \t      && (ui_except == UI_SJLJ || ui_except == UI_TARGET))))\n     {\n-      inform (input_location,\n+      inform (loc,\n \t      \"-freorder-blocks-and-partition does not work \"\n \t      \"on this architecture\");\n       opts->x_flag_reorder_blocks_and_partition = 0;\n@@ -758,7 +768,7 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set)\n   if (!targetm.ira_cover_classes\n       && opts->x_flag_ira_algorithm == IRA_ALGORITHM_CB)\n     {\n-      inform (input_location,\n+      inform (loc,\n \t      \"-fira-algorithm=CB does not work on this architecture\");\n       opts->x_flag_ira_algorithm = IRA_ALGORITHM_PRIORITY;\n     }\n@@ -787,7 +797,7 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set)\n \t errors later.  */\n       opts->x_flag_whole_program = 0;\n #else\n-      error (\"LTO support has not been enabled in this configuration\");\n+      error_at (loc, \"LTO support has not been enabled in this configuration\");\n #endif\n     }\n   if ((opts->x_flag_lto_partition_balanced != 0) + (opts->x_flag_lto_partition_1to1 != 0)\n@@ -796,7 +806,7 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set)\n       if ((opts->x_flag_lto_partition_balanced != 0)\n \t   + (opts->x_flag_lto_partition_1to1 != 0)\n \t   + (opts->x_flag_lto_partition_none != 0) > 1)\n-\terror (\"only one -flto-partition value can be specified\");\n+\terror_at (loc, \"only one -flto-partition value can be specified\");\n     }\n \n   /* We initialize opts->x_flag_split_stack to -1 so that targets can set a\n@@ -807,8 +817,8 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set)\n     {\n       if (!targetm.supports_split_stack (true))\n \t{\n-\t  error (\"%<-fsplit-stack%> is not supported by \"\n-\t\t \"this compiler configuration\");\n+\t  error_at (loc, \"%<-fsplit-stack%> is not supported by \"\n+\t\t    \"this compiler configuration\");\n \t  opts->x_flag_split_stack = 0;\n \t}\n     }\n@@ -873,7 +883,6 @@ print_filtered_help (unsigned int include_flags,\n {\n   unsigned int i;\n   const char *help;\n-  static char *printed = NULL;\n   bool found = false;\n   bool displayed = false;\n \n@@ -900,8 +909,8 @@ print_filtered_help (unsigned int include_flags,\n       return;\n     }\n \n-  if (!printed)\n-    printed = XCNEWVAR (char, cl_options_count);\n+  if (!opts->x_help_printed)\n+    opts->x_help_printed = XCNEWVAR (char, cl_options_count);\n \n   for (i = 0; i < cl_options_count; i++)\n     {\n@@ -930,10 +939,10 @@ print_filtered_help (unsigned int include_flags,\n \n       found = true;\n       /* Skip switches that have already been printed.  */\n-      if (printed[i])\n+      if (opts->x_help_printed[i])\n \tcontinue;\n \n-      printed[i] = true;\n+      opts->x_help_printed[i] = true;\n \n       help = option->help;\n       if (help == NULL)\n@@ -1041,15 +1050,14 @@ print_specific_help (unsigned int include_flags,\n   const char * descrip_extra = \"\";\n   size_t i;\n   unsigned int flag;\n-  static unsigned int columns = 0;\n \n   /* Sanity check: Make sure that we do not have more\n      languages than we have bits available to enumerate them.  */\n   gcc_assert ((1U << cl_lang_count) < CL_MIN_OPTION_CLASS);\n \n   /* If we have not done so already, obtain\n      the desired maximum width of the output.  */\n-  if (columns == 0)\n+  if (opts->x_help_columns == 0)\n     {\n       const char *p;\n \n@@ -1059,12 +1067,12 @@ print_specific_help (unsigned int include_flags,\n \t  int value = atoi (p);\n \n \t  if (value > 0)\n-\t    columns = value;\n+\t    opts->x_help_columns = value;\n \t}\n \n-      if (columns == 0)\n+      if (opts->x_help_columns == 0)\n \t/* Use a reasonable default.  */\n-\tcolumns = 80;\n+\topts->x_help_columns = 80;\n     }\n \n   /* Decide upon the title for the options that we are going to display.  */\n@@ -1130,7 +1138,8 @@ print_specific_help (unsigned int include_flags,\n     }\n \n   printf (\"%s%s:\\n\", description, descrip_extra);\n-  print_filtered_help (include_flags, exclude_flags, any_flags, columns, opts);\n+  print_filtered_help (include_flags, exclude_flags, any_flags,\n+\t\t       opts->x_help_columns, opts);\n }\n \n /* Handle target- and language-independent options.  Return zero to\n@@ -1160,7 +1169,7 @@ common_handle_option (struct gcc_options *opts,\n   switch (code)\n     {\n     case OPT__param:\n-      handle_param (opts, opts_set, arg);\n+      handle_param (opts, opts_set, loc, arg);\n       break;\n \n     case OPT__help:\n@@ -1290,17 +1299,18 @@ common_handle_option (struct gcc_options *opts,\n \t\t    if (strncasecmp (a, \"c\", len) == 0)\n \t\t      * pflags |= lang_flag;\n \t\t    else\n-\t\t      fnotice (stderr,\n-\t\t\t       \"warning: --help argument %.*s is ambiguous, please be more specific\\n\",\n-\t\t\t       len, a);\n+\t\t      warning_at (loc, 0,\n+\t\t\t\t  \"--help argument %q.*s is ambiguous, \"\n+\t\t\t\t  \"please be more specific\",\n+\t\t\t\t  len, a);\n \t\t  }\n \t      }\n \t    else if (lang_flag != 0)\n \t      * pflags |= lang_flag;\n \t    else\n-\t      fnotice (stderr,\n-\t\t       \"warning: unrecognized argument to --help= option: %.*s\\n\",\n-\t\t       len, a);\n+\t      warning_at (loc, 0,\n+\t\t\t  \"unrecognized argument to --help= option: %q.*s\",\n+\t\t\t  len, a);\n \n \t    if (comma == NULL)\n \t      break;\n@@ -1370,7 +1380,7 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_d:\n-      decode_d_option (arg);\n+      decode_d_option (arg, opts, loc, dc);\n       break;\n \n     case OPT_fcall_used_:\n@@ -1383,15 +1393,12 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_fdbg_cnt_:\n-      dbg_cnt_process_opt (arg);\n-      break;\n-\n     case OPT_fdbg_cnt_list:\n-      dbg_cnt_list_all_counters ();\n+      /* Deferred.  */\n       break;\n \n     case OPT_fdebug_prefix_map_:\n-      add_debug_prefix_map (arg);\n+      /* Deferred.  */\n       break;\n \n     case OPT_fdiagnostics_show_location_:\n@@ -1421,7 +1428,7 @@ common_handle_option (struct gcc_options *opts,\n       else if (!strcmp (arg, \"fast\"))\n \topts->x_flag_fp_contract_mode = FP_CONTRACT_FAST;\n       else\n-\terror (\"unknown floating point contraction style \\\"%s\\\"\", arg);\n+\terror_at (loc, \"unknown floating point contraction style \\\"%s\\\"\", arg);\n       break;\n \n     case OPT_fexcess_precision_:\n@@ -1430,7 +1437,7 @@ common_handle_option (struct gcc_options *opts,\n       else if (!strcmp (arg, \"standard\"))\n \topts->x_flag_excess_precision_cmdline = EXCESS_PRECISION_STANDARD;\n       else\n-\terror (\"unknown excess precision style \\\"%s\\\"\", arg);\n+\terror_at (loc, \"unknown excess precision style \\\"%s\\\"\", arg);\n       break;\n \n     case OPT_ffast_math:\n@@ -1468,12 +1475,11 @@ common_handle_option (struct gcc_options *opts,\n \n     case OPT_fpack_struct_:\n       if (value <= 0 || (value & (value - 1)) || value > 16)\n-\terror (\"structure alignment must be a small power of two, not %d\", value);\n+\terror_at (loc,\n+\t\t  \"structure alignment must be a small power of two, not %d\",\n+\t\t  value);\n       else\n-\t{\n-\t  initial_max_fld_align = value;\n-\t  maximum_field_alignment = value * BITS_PER_UNIT;\n-\t}\n+\topts->x_initial_max_fld_align = value;\n       break;\n \n     case OPT_fplugin_:\n@@ -1544,24 +1550,24 @@ common_handle_option (struct gcc_options *opts,\n         else if (!strcmp(arg, \"protected\"))\n           opts->x_default_visibility = VISIBILITY_PROTECTED;\n         else\n-          error (\"unrecognized visibility value \\\"%s\\\"\", arg);\n+          error_at (loc, \"unrecognized visibility value \\\"%s\\\"\", arg);\n       }\n       break;\n \n     case OPT_frandom_seed:\n       /* The real switch is -fno-random-seed.  */\n       if (value)\n \treturn false;\n-      set_random_seed (NULL);\n+      /* Deferred.  */\n       break;\n \n     case OPT_frandom_seed_:\n-      set_random_seed (arg);\n+      /* Deferred.  */\n       break;\n \n     case OPT_fsched_verbose_:\n #ifdef INSN_SCHEDULING\n-      fix_sched_param (\"verbose\", arg);\n+      /* Handled with Var in common.opt.  */\n       break;\n #else\n       return false;\n@@ -1593,7 +1599,7 @@ common_handle_option (struct gcc_options *opts,\n \t\t\t     ? STATIC_BUILTIN_STACK_CHECK\n \t\t\t     : GENERIC_STACK_CHECK;\n       else\n-\twarning (0, \"unknown stack check parameter \\\"%s\\\"\", arg);\n+\twarning_at (loc, 0, \"unknown stack check parameter \\\"%s\\\"\", arg);\n       break;\n \n     case OPT_fstack_limit:\n@@ -1622,7 +1628,7 @@ common_handle_option (struct gcc_options *opts,\n       else if (!strcmp (arg, \"local-exec\"))\n \topts->x_flag_tls_default = TLS_MODEL_LOCAL_EXEC;\n       else\n-\twarning (0, \"unknown tls-model \\\"%s\\\"\", arg);\n+\twarning_at (loc, 0, \"unknown tls-model \\\"%s\\\"\", arg);\n       break;\n \n     case OPT_fira_algorithm_:\n@@ -1631,7 +1637,7 @@ common_handle_option (struct gcc_options *opts,\n       else if (!strcmp (arg, \"priority\"))\n \topts->x_flag_ira_algorithm = IRA_ALGORITHM_PRIORITY;\n       else\n-\twarning (0, \"unknown ira algorithm \\\"%s\\\"\", arg);\n+\twarning_at (loc, 0, \"unknown ira algorithm \\\"%s\\\"\", arg);\n       break;\n \n     case OPT_fira_region_:\n@@ -1642,41 +1648,44 @@ common_handle_option (struct gcc_options *opts,\n       else if (!strcmp (arg, \"mixed\"))\n \topts->x_flag_ira_region = IRA_REGION_MIXED;\n       else\n-\twarning (0, \"unknown ira region \\\"%s\\\"\", arg);\n+\twarning_at (loc, 0, \"unknown ira region \\\"%s\\\"\", arg);\n       break;\n \n     case OPT_g:\n-      set_debug_level (NO_DEBUG, DEFAULT_GDB_EXTENSIONS, arg, opts, opts_set);\n+      set_debug_level (NO_DEBUG, DEFAULT_GDB_EXTENSIONS, arg, opts, opts_set,\n+\t\t       loc);\n       break;\n \n     case OPT_gcoff:\n-      set_debug_level (SDB_DEBUG, false, arg, opts, opts_set);\n+      set_debug_level (SDB_DEBUG, false, arg, opts, opts_set, loc);\n       break;\n \n     case OPT_gdwarf_:\n       if (value < 2 || value > 4)\n-\terror (\"dwarf version %d is not supported\", value);\n+\terror_at (loc, \"dwarf version %d is not supported\", value);\n       else\n \tdwarf_version = value;\n-      set_debug_level (DWARF2_DEBUG, false, \"\", opts, opts_set);\n+      set_debug_level (DWARF2_DEBUG, false, \"\", opts, opts_set, loc);\n       break;\n \n     case OPT_ggdb:\n-      set_debug_level (NO_DEBUG, 2, arg, opts, opts_set);\n+      set_debug_level (NO_DEBUG, 2, arg, opts, opts_set, loc);\n       break;\n \n     case OPT_gstabs:\n     case OPT_gstabs_:\n-      set_debug_level (DBX_DEBUG, code == OPT_gstabs_, arg, opts, opts_set);\n+      set_debug_level (DBX_DEBUG, code == OPT_gstabs_, arg, opts, opts_set,\n+\t\t       loc);\n       break;\n \n     case OPT_gvms:\n-      set_debug_level (VMS_DEBUG, false, arg, opts, opts_set);\n+      set_debug_level (VMS_DEBUG, false, arg, opts, opts_set, loc);\n       break;\n \n     case OPT_gxcoff:\n     case OPT_gxcoff_:\n-      set_debug_level (XCOFF_DEBUG, code == OPT_gxcoff_, arg, opts, opts_set);\n+      set_debug_level (XCOFF_DEBUG, code == OPT_gxcoff_, arg, opts, opts_set,\n+\t\t       loc);\n       break;\n \n     case OPT_pedantic_errors:\n@@ -1713,20 +1722,21 @@ common_handle_option (struct gcc_options *opts,\n /* Handle --param NAME=VALUE.  */\n static void\n handle_param (struct gcc_options *opts, struct gcc_options *opts_set,\n-\t      const char *carg)\n+\t      location_t loc, const char *carg)\n {\n   char *equal, *arg;\n   int value;\n \n   arg = xstrdup (carg);\n   equal = strchr (arg, '=');\n   if (!equal)\n-    error (\"%s: --param arguments should be of the form NAME=VALUE\", arg);\n+    error_at (loc, \"%s: --param arguments should be of the form NAME=VALUE\",\n+\t      arg);\n   else\n     {\n       value = integral_argument (equal + 1);\n       if (value == -1)\n-\terror (\"invalid --param value %qs\", equal + 1);\n+\terror_at (loc, \"invalid --param value %qs\", equal + 1);\n       else\n \t{\n \t  *equal = '\\0';\n@@ -1807,11 +1817,12 @@ fast_math_flags_struct_set_p (struct cl_optimization *opt)\n \n /* Handle a debug output -g switch for options OPTS\n    (OPTS_SET->x_write_symbols storing whether a debug type was passed\n-   explicitly).  EXTENDED is true or false to support extended output\n-   (2 is special and means \"-ggdb\" was given).  */\n+   explicitly), location LOC.  EXTENDED is true or false to support\n+   extended output (2 is special and means \"-ggdb\" was given).  */\n static void\n set_debug_level (enum debug_info_type type, int extended, const char *arg,\n-\t\t struct gcc_options *opts, struct gcc_options *opts_set)\n+\t\t struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t location_t loc)\n {\n   opts->x_use_gnu_debug_info_extensions = extended;\n \n@@ -1831,7 +1842,7 @@ set_debug_level (enum debug_info_type type, int extended, const char *arg,\n \t    }\n \n \t  if (opts->x_write_symbols == NO_DEBUG)\n-\t    warning (0, \"target system does not support debug output\");\n+\t    warning_at (loc, 0, \"target system does not support debug output\");\n \t}\n     }\n   else\n@@ -1840,8 +1851,8 @@ set_debug_level (enum debug_info_type type, int extended, const char *arg,\n       if (opts_set->x_write_symbols != NO_DEBUG\n \t  && opts->x_write_symbols != NO_DEBUG\n \t  && type != opts->x_write_symbols)\n-\terror (\"debug format \\\"%s\\\" conflicts with prior selection\",\n-\t       debug_type_names[type]);\n+\terror_at (loc, \"debug format \\\"%s\\\" conflicts with prior selection\",\n+\t\t  debug_type_names[type]);\n       opts->x_write_symbols = type;\n       opts_set->x_write_symbols = type;\n     }\n@@ -1856,19 +1867,20 @@ set_debug_level (enum debug_info_type type, int extended, const char *arg,\n     {\n       int argval = integral_argument (arg);\n       if (argval == -1)\n-\terror (\"unrecognised debug output level \\\"%s\\\"\", arg);\n+\terror_at (loc, \"unrecognised debug output level \\\"%s\\\"\", arg);\n       else if (argval > 3)\n-\terror (\"debug output level %s is too high\", arg);\n+\terror_at (loc, \"debug output level %s is too high\", arg);\n       else\n \topts->x_debug_info_level = (enum debug_info_levels) argval;\n     }\n }\n \n-/* Arrange to dump core on error.  (The regular error message is still\n-   printed first, except in the case of abort ().)  */\n+/* Arrange to dump core on error for diagnostic context DC.  (The\n+   regular error message is still printed first, except in the case of\n+   abort ().)  */\n \n static void\n-setup_core_dumping (void)\n+setup_core_dumping (diagnostic_context *dc)\n {\n #ifdef SIGABRT\n   signal (SIGABRT, SIG_DFL);\n@@ -1883,34 +1895,36 @@ setup_core_dumping (void)\n       fatal_error (\"setting core file size limit to maximum: %m\");\n   }\n #endif\n-  diagnostic_abort_on_error (global_dc);\n+  diagnostic_abort_on_error (dc);\n }\n \n-/* Parse a -d<ARG> command line switch.  */\n+/* Parse a -d<ARG> command line switch for OPTS, location LOC,\n+   diagnostic context DC.  */\n \n static void\n-decode_d_option (const char *arg)\n+decode_d_option (const char *arg, struct gcc_options *opts,\n+\t\t location_t loc, diagnostic_context *dc)\n {\n   int c;\n \n   while (*arg)\n     switch (c = *arg++)\n       {\n       case 'A':\n-\tflag_debug_asm = 1;\n+\topts->x_flag_debug_asm = 1;\n \tbreak;\n       case 'p':\n-\tflag_print_asm_name = 1;\n+\topts->x_flag_print_asm_name = 1;\n \tbreak;\n       case 'P':\n-\tflag_dump_rtl_in_asm = 1;\n-\tflag_print_asm_name = 1;\n+\topts->x_flag_dump_rtl_in_asm = 1;\n+\topts->x_flag_print_asm_name = 1;\n \tbreak;\n       case 'v':\n-\tgraph_dump_format = vcg;\n+\topts->x_graph_dump_format = vcg;\n \tbreak;\n       case 'x':\n-\trtl_dump_and_exit = 1;\n+\topts->x_rtl_dump_and_exit = 1;\n \tbreak;\n       case 'D':\t/* These are handled by the preprocessor.  */\n       case 'I':\n@@ -1919,14 +1933,14 @@ decode_d_option (const char *arg)\n       case 'U':\n \tbreak;\n       case 'H':\n-\tsetup_core_dumping ();\n+\tsetup_core_dumping (dc);\n \tbreak;\n       case 'a':\n-\tenable_rtl_dump_file ();\n+\topts->x_flag_dump_all_passed = true;\n \tbreak;\n \n       default:\n-\t  warning (0, \"unrecognized gcc debugging option: %c\", c);\n+\t  warning_at (loc, 0, \"unrecognized gcc debugging option: %c\", c);\n \tbreak;\n       }\n }\n@@ -1952,7 +1966,7 @@ enable_warning_as_error (const char *arg, int value, unsigned int lang_mask,\n   option_index = find_opt (new_option, lang_mask);\n   if (option_index == OPT_SPECIAL_unknown)\n     {\n-      error (\"-Werror=%s: no option -%s\", arg, new_option);\n+      error_at (loc, \"-Werror=%s: no option -%s\", arg, new_option);\n     }\n   else\n     {"}, {"sha": "fe7b8faef0dfe5b4e581665a3a041f5870f01d43", "filename": "gcc/opts.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "patch": "@@ -299,7 +299,8 @@ extern bool target_handle_option (struct gcc_options *opts,\n \t\t\t\t  const struct cl_option_handlers *handlers,\n \t\t\t\t  diagnostic_context *dc);\n extern void finish_options (struct gcc_options *opts,\n-\t\t\t    struct gcc_options *opts_set);\n+\t\t\t    struct gcc_options *opts_set,\n+\t\t\t    location_t loc);\n extern void default_options_optimization (struct gcc_options *opts,\n \t\t\t\t\t  struct gcc_options *opts_set,\n \t\t\t\t\t  struct cl_decoded_option *decoded_options,\n@@ -308,4 +309,7 @@ extern void default_options_optimization (struct gcc_options *opts,\n \t\t\t\t\t  unsigned int lang_mask,\n \t\t\t\t\t  const struct cl_option_handlers *handlers,\n \t\t\t\t\t  diagnostic_context *dc);\n+extern void set_struct_debug_option (struct gcc_options *opts,\n+\t\t\t\t     location_t loc,\n+\t\t\t\t     const char *value);\n #endif"}, {"sha": "fdb185cd58d9b6fe56847d6c5499de36fb155acd", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "patch": "@@ -2387,9 +2387,6 @@ extern void schedule_insns (void);\n /* In sched-ebb.c.  */\n extern void schedule_ebbs (void);\n \n-/* In haifa-sched.c.  */\n-extern void fix_sched_param (const char *, const char *);\n-\n /* In sel-sched-dump.c.  */\n extern void sel_sched_fix_param (const char *param, const char *val);\n "}, {"sha": "dc573a2f52fc058fc74ab766e59e10c8dc2863c0", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "patch": "@@ -50,8 +50,6 @@ tree sizetype_tab[(int) TYPE_KIND_LAST];\n /* If nonzero, this is an upper limit on alignment of structure fields.\n    The value is measured in bits.  */\n unsigned int maximum_field_alignment = TARGET_DEFAULT_PACK_STRUCT * BITS_PER_UNIT;\n-/* ... and its original value in bytes, specified via -fpack-struct=<value>.  */\n-unsigned int initial_max_fld_align = TARGET_DEFAULT_PACK_STRUCT;\n \n /* Nonzero if all REFERENCE_TYPEs are internal and hence should be allocated\n    in the address spaces' address_mode, not pointer_mode.   Set only by"}, {"sha": "a38ef1082ad6bad4c822b8cc730206bb5be20485", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "patch": "@@ -1,3 +1,7 @@\n+2010-11-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/opts-5.c: New test.\n+\n 2010-11-23  Jeffrey Yasskin <jyasskin@google.com>\n \n \tPR c++/46527"}, {"sha": "ab1e6f91d3c6e012bd27f872c83bebec3fe70f7f", "filename": "gcc/testsuite/gcc.dg/opts-5.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Ftestsuite%2Fgcc.dg%2Fopts-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Ftestsuite%2Fgcc.dg%2Fopts-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fopts-5.c?ref=299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "patch": "@@ -0,0 +1,5 @@\n+/* -fstack-limit should be rejected without an ICE.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-fstack-limit\" } */\n+\n+/* { dg-error \"unrecognized command line option\" \"\" { target *-*-* } 0 } */"}, {"sha": "0d8cd137ec9e4e985cf0d2c3b66048066f8c4eac", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "patch": "@@ -141,12 +141,6 @@ int main_input_baselength;\n \n const struct gcc_debug_hooks *debug_hooks;\n \n-/* Other flags saying which kinds of debugging dump have been requested.  */\n-\n-int rtl_dump_and_exit;\n-int flag_print_asm_name;\n-enum graph_dump_types graph_dump_format;\n-\n /* True if this is the lto front end.  This is used to disable\n    gimple generation and lowering passes that are normally run on the\n    output of a front end.  These passes must be bypassed for lto since\n@@ -184,19 +178,6 @@ int flag_next_runtime = 0;\n \n int flag_permissive = 0;\n \n-/* -dA causes debug commentary information to be produced in\n-   the generated assembly code (to make it more readable).  This option\n-   is generally only of use to those who actually need to read the\n-   generated assembly code (perhaps while debugging the compiler itself).\n-   Currently, this switch is only used by dwarfout.c; however, it is intended\n-   to be a catchall for printing debug information in the assembler file.  */\n-\n-int flag_debug_asm = 0;\n-\n-/* -dP causes the rtl to be emitted as a comment in assembly.  */\n-\n-int flag_dump_rtl_in_asm = 0;\n-\n /* When non-NULL, indicates that whenever space is allocated on the\n    stack, the resulting stack pointer must not pass this\n    address---that is, for stacks that grow downward, the stack pointer\n@@ -1606,6 +1587,8 @@ process_options (void)\n      This can happen with incorrect pre-processed input. */\n   debug_hooks = &do_nothing_debug_hooks;\n \n+  maximum_field_alignment = initial_max_fld_align * BITS_PER_UNIT;\n+\n   /* This replaces set_Wunused.  */\n   if (warn_unused_function == -1)\n     warn_unused_function = warn_unused;"}, {"sha": "e8e803df9d3d686fd2af9a268e1d725158e51312", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=299404a1ec3d2dc7e2b19ea79c3e9f3552b6215d", "patch": "@@ -4503,8 +4503,6 @@ extern void finalize_size_functions (void);\n \n /* If nonzero, an upper limit on alignment of structure fields, in bits,  */\n extern unsigned int maximum_field_alignment;\n-/* and its original value in bytes, specified via -fpack-struct=<value>.  */\n-extern unsigned int initial_max_fld_align;\n \n /* Concatenate two lists (chains of TREE_LIST nodes) X and Y\n    by making the last node in X point to Y."}]}