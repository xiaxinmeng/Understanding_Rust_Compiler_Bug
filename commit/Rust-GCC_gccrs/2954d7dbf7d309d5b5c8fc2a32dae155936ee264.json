{"sha": "2954d7dbf7d309d5b5c8fc2a32dae155936ee264", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk1NGQ3ZGJmN2QzMDlkNWI1YzhmYzJhMzJkYWUxNTU5MzZlZTI2NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-01-20T17:47:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-01-20T17:47:45Z"}, "message": "stmt.c (expand_return): Don't return anything if size is zero.\n\n\t* stmt.c (expand_return): Don't return anything if size is zero.\n\tDelete redundant assignment to BYTES.\n\t* expr.c (move_block_from_reg): Do nothing if NREGS is zero.\n\nFrom-SVN: r39156", "tree": {"sha": "d266c733475e09758d1260c90b41f1c6bf07614a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d266c733475e09758d1260c90b41f1c6bf07614a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2954d7dbf7d309d5b5c8fc2a32dae155936ee264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2954d7dbf7d309d5b5c8fc2a32dae155936ee264", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2954d7dbf7d309d5b5c8fc2a32dae155936ee264", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2954d7dbf7d309d5b5c8fc2a32dae155936ee264/comments", "author": null, "committer": null, "parents": [{"sha": "1d26ac96cc832057ed835b238ca35dfdb930762f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d26ac96cc832057ed835b238ca35dfdb930762f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d26ac96cc832057ed835b238ca35dfdb930762f"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "3cff034218d4c834b91b59d66a84e80367986866", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2954d7dbf7d309d5b5c8fc2a32dae155936ee264/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2954d7dbf7d309d5b5c8fc2a32dae155936ee264/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2954d7dbf7d309d5b5c8fc2a32dae155936ee264", "patch": "@@ -1,3 +1,9 @@\n+Sat Jan 20 12:46:57 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* stmt.c (expand_return): Don't return anything if size is zero.\n+\tDelete redundant assignment to BYTES.\n+\t* expr.c (move_block_from_reg): Do nothing if NREGS is zero.\n+\n 2001-01-20  Marek Michalkiewicz  <marekm@linux.org.pl>\n \n \t* config/avr/avr.h (INIT_TARGET_OPTABS): Remove most of it, was"}, {"sha": "848431e0440825b561f42774e02a6da553143f9c", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2954d7dbf7d309d5b5c8fc2a32dae155936ee264/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2954d7dbf7d309d5b5c8fc2a32dae155936ee264/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2954d7dbf7d309d5b5c8fc2a32dae155936ee264", "patch": "@@ -1857,6 +1857,9 @@ move_block_from_reg (regno, x, nregs, size)\n #endif\n   enum machine_mode mode;\n \n+  if (nregs == 0)\n+    return;\n+\n   /* If SIZE is that of a mode no bigger than a word, just use that\n      mode's store operation.  */\n   if (size <= UNITS_PER_WORD"}, {"sha": "2399b6f83bf75a8c8a84d4facd4e9e6021246419", "filename": "gcc/stmt.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2954d7dbf7d309d5b5c8fc2a32dae155936ee264/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2954d7dbf7d309d5b5c8fc2a32dae155936ee264/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=2954d7dbf7d309d5b5c8fc2a32dae155936ee264", "patch": "@@ -3016,6 +3016,12 @@ expand_return (retval)\n       rtx result_val = expand_expr (retval_rhs, NULL_RTX, VOIDmode, 0);\n       enum machine_mode tmpmode, result_reg_mode;\n \n+      if (bytes == 0)\n+\t{\n+\t  expand_null_return ();\n+\t  return;\n+\t}\n+\n       /* Structures whose size is not a multiple of a word are aligned\n \t to the least significant byte (to the right).  On a BYTES_BIG_ENDIAN\n \t machine, this means we must skip the empty high order bytes when\n@@ -3063,15 +3069,12 @@ expand_return (retval)\n       /* Find the smallest integer mode large enough to hold the\n \t entire structure and use that mode instead of BLKmode\n \t on the USE insn for the return register.   */\n-      bytes = int_size_in_bytes (TREE_TYPE (retval_rhs));\n       for (tmpmode = GET_CLASS_NARROWEST_MODE (MODE_INT);\n \t   tmpmode != VOIDmode;\n \t   tmpmode = GET_MODE_WIDER_MODE (tmpmode))\n-\t{\n-\t  /* Have we found a large enough mode?  */\n-\t  if (GET_MODE_SIZE (tmpmode) >= bytes)\n-\t    break;\n-\t}\n+\t/* Have we found a large enough mode?  */\n+\tif (GET_MODE_SIZE (tmpmode) >= bytes)\n+\t  break;\n \n       /* No suitable mode found.  */\n       if (tmpmode == VOIDmode)"}]}