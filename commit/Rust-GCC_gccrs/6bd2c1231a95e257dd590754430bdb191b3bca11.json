{"sha": "6bd2c1231a95e257dd590754430bdb191b3bca11", "node_id": "C_kwDOANBUbNoAKDZiZDJjMTIzMWE5NWUyNTdkZDU5MDc1NDQzMGJkYjE5MWIzYmNhMTE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-06T17:41:22Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-07T11:55:52Z"}, "message": "libstdc++: Add --disable-libstdcxx-hosted as an alias for hosted-libstdcxx\n\nMost libstdc++ configure args are of the form --enable-libstdcxx-xxx but\nthe option to build freestanding is --disable-hosted-libstdcxx. If you\naccidentally type --disable-libstdcxx-hosted then it will be ignored.\n\nThis adds --disable-libstdcxx-hosted as an alias for the existing arg,\nso it works whichever way you say it. If both args are used explicitly\nand their values do not agree, configure fails with an error.\n\nlibstdc++-v3/ChangeLog:\n\n\t* acinclude.m4 (GLIBCXX_ENABLE_HOSTED): Add libstdcxx-hosted\n\tenable arg as an alias for hosted-libstdcxx enable arg.\n\t* configure: Regenerate.", "tree": {"sha": "a2470cb399b8f6b24a90ac4ccb33930a3ccc39b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2470cb399b8f6b24a90ac4ccb33930a3ccc39b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bd2c1231a95e257dd590754430bdb191b3bca11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd2c1231a95e257dd590754430bdb191b3bca11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bd2c1231a95e257dd590754430bdb191b3bca11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd2c1231a95e257dd590754430bdb191b3bca11/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93b3ab6c0c6a44df50e9312c8106b4d1001d6205", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b3ab6c0c6a44df50e9312c8106b4d1001d6205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93b3ab6c0c6a44df50e9312c8106b4d1001d6205"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "719eab15c7734a3f25a6cb46903ed63b1bdc74f3", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd2c1231a95e257dd590754430bdb191b3bca11/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd2c1231a95e257dd590754430bdb191b3bca11/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=6bd2c1231a95e257dd590754430bdb191b3bca11", "patch": "@@ -2962,6 +2962,10 @@ dnl installing only the headers required by [17.4.1.3] and the language\n dnl support library.  More than that will be built (to keep the Makefiles\n dnl conveniently clean), but not installed.\n dnl\n+dnl Also define --disable-libstdcxx-hosted as an alias for\n+dnl --disable-hosted-libstdcxx but fail if both are given\n+dnl and their values do not agree.\n+dnl\n dnl Sets:\n dnl  is_hosted  (yes/no)\n dnl\n@@ -2971,7 +2975,8 @@ dnl\n AC_DEFUN([GLIBCXX_ENABLE_HOSTED], [\n   AC_ARG_ENABLE([hosted-libstdcxx],\n     AC_HELP_STRING([--disable-hosted-libstdcxx],\n-\t\t   [only build freestanding C++ runtime support]),,\n+\t\t   [only build freestanding C++ runtime support]),\n+    [enable_hosted_libstdcxx_was_given=yes],\n     [case \"$host\" in\n \tarm*-*-symbianelf*)\n \t    enable_hosted_libstdcxx=no\n@@ -2980,6 +2985,21 @@ AC_DEFUN([GLIBCXX_ENABLE_HOSTED], [\n \t    enable_hosted_libstdcxx=yes\n \t    ;;\n      esac])\n+\n+  # Because most configure args are --enable-libstdcxx-foo add an alias\n+  # of that form for --enable-hosted-libstdcxx.\n+  AC_ARG_ENABLE([libstdcxx-hosted],\n+    AC_HELP_STRING([--disable-libstdcxx-hosted],\n+\t\t   [alias for --disable-hosted-libstdcxx]),\n+    [if test \"$enable_hosted_libstdcxx_was_given\" = yes; then\n+      if test \"$enable_hosted_libstdcxx\" != \"$enableval\"; then\n+\tAC_MSG_ERROR([--enable-libstdcxx-hosted=$enableval conflicts with --enable-hosted-libstdcxx=$enable_hosted_libstdcxx])\n+      fi\n+    else\n+      enable_hosted_libstdcxx=${enableval}\n+    fi\n+    ],)\n+\n   freestanding_flags=\n   if test \"$enable_hosted_libstdcxx\" = no; then\n     AC_MSG_NOTICE([Only freestanding libraries will be built])"}, {"sha": "7ead77a5c800a976100db4b4f919b4054c4c7c1a", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd2c1231a95e257dd590754430bdb191b3bca11/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd2c1231a95e257dd590754430bdb191b3bca11/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=6bd2c1231a95e257dd590754430bdb191b3bca11", "patch": "@@ -922,6 +922,7 @@ enable_fast_install\n with_gnu_ld\n enable_libtool_lock\n enable_hosted_libstdcxx\n+enable_libstdcxx_hosted\n enable_libstdcxx_verbose\n enable_libstdcxx_pch\n with_libstdcxx_lock_policy\n@@ -1610,6 +1611,8 @@ Optional Features:\n   --disable-libtool-lock  avoid locking (might break parallel builds)\n   --disable-hosted-libstdcxx\n                           only build freestanding C++ runtime support\n+  --disable-libstdcxx-hosted\n+                          alias for --disable-hosted-libstdcxx\n   --disable-libstdcxx-verbose\n                           disable termination messages to standard error\n   --enable-libstdcxx-pch  build pre-compiled libstdc++ headers\n@@ -12200,7 +12203,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12203 \"configure\"\n+#line 12206 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12306,7 +12309,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12309 \"configure\"\n+#line 12312 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15635,7 +15638,7 @@ postdeps_CXX=`echo \" $postdeps_CXX \" | sed 's, -lstdc++ ,,g'`\n \n   # Check whether --enable-hosted-libstdcxx was given.\n if test \"${enable_hosted_libstdcxx+set}\" = set; then :\n-  enableval=$enable_hosted_libstdcxx;\n+  enableval=$enable_hosted_libstdcxx; enable_hosted_libstdcxx_was_given=yes\n else\n   case \"$host\" in\n \tarm*-*-symbianelf*)\n@@ -15647,6 +15650,22 @@ else\n      esac\n fi\n \n+\n+  # Because most configure args are --enable-libstdcxx-foo add an alias\n+  # of that form for --enable-hosted-libstdcxx.\n+  # Check whether --enable-libstdcxx-hosted was given.\n+if test \"${enable_libstdcxx_hosted+set}\" = set; then :\n+  enableval=$enable_libstdcxx_hosted; if test \"$enable_hosted_libstdcxx_was_given\" = yes; then\n+      if test \"$enable_hosted_libstdcxx\" != \"$enableval\"; then\n+\tas_fn_error $? \"--enable-libstdcxx-hosted=$enableval conflicts with --enable-hosted-libstdcxx=$enable_hosted_libstdcxx\" \"$LINENO\" 5\n+      fi\n+    else\n+      enable_hosted_libstdcxx=${enableval}\n+    fi\n+\n+fi\n+\n+\n   freestanding_flags=\n   if test \"$enable_hosted_libstdcxx\" = no; then\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: Only freestanding libraries will be built\" >&5\n@@ -15990,7 +16009,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15993 \"configure\"\n+#line 16012 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -16025,7 +16044,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16028 \"configure\"\n+#line 16047 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -16060,7 +16079,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16063 \"configure\"\n+#line 16082 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -16096,7 +16115,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16099 \"configure\"\n+#line 16118 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -16252,7 +16271,7 @@ $as_echo \"mutex\" >&6; }\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 16255 \"configure\"\n+#line 16274 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -16294,7 +16313,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n   cat > conftest.$ac_ext << EOF\n-#line 16297 \"configure\"\n+#line 16316 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };"}]}