{"sha": "78de2333eab3428f4b8723e41534f81c508bc7a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhkZTIzMzNlYWIzNDI4ZjRiODcyM2U0MTUzNGY4MWM1MDhiYzdhNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-09-02T11:37:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-09-02T11:37:13Z"}, "message": "tree-affine.c (add_elt_to_tree): Avoid converting all pointer arithmetic to sizetype.\n\n2013-09-02  Richard Biener  <rguenther@suse.de>\n\n\t* tree-affine.c (add_elt_to_tree): Avoid converting all pointer\n\tarithmetic to sizetype.\n\n\t* gcc.dg/tree-ssa/loop-4.c: Adjust scan looking for one memory\n\treference.\n\nFrom-SVN: r202165", "tree": {"sha": "c0b9d6a6f4d828cb11cf89fbc01d3519c195ad0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0b9d6a6f4d828cb11cf89fbc01d3519c195ad0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78de2333eab3428f4b8723e41534f81c508bc7a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78de2333eab3428f4b8723e41534f81c508bc7a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78de2333eab3428f4b8723e41534f81c508bc7a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78de2333eab3428f4b8723e41534f81c508bc7a6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "85ff4ec64932ebee408be67a815011337e31e66b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ff4ec64932ebee408be67a815011337e31e66b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85ff4ec64932ebee408be67a815011337e31e66b"}], "stats": {"total": 62, "additions": 42, "deletions": 20}, "files": [{"sha": "2ffa49e1750a374b3158ac46c4cc602f8dc3e9a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78de2333eab3428f4b8723e41534f81c508bc7a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78de2333eab3428f4b8723e41534f81c508bc7a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78de2333eab3428f4b8723e41534f81c508bc7a6", "patch": "@@ -1,3 +1,8 @@\n+2013-09-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-affine.c (add_elt_to_tree): Avoid converting all pointer\n+\tarithmetic to sizetype.\n+\n 2013-09-02  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-ssa-loop-ivopts.c (set_autoinc_for_original_candidates):"}, {"sha": "4cb359c3ca1082f3e36c637e8877b4a927dad820", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78de2333eab3428f4b8723e41534f81c508bc7a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78de2333eab3428f4b8723e41534f81c508bc7a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=78de2333eab3428f4b8723e41534f81c508bc7a6", "patch": "@@ -1,3 +1,8 @@\n+2013-09-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/loop-4.c: Adjust scan looking for one memory\n+\treference.\n+\n 2013-09-02  Bin Cheng  <bin.cheng@arm.com>\n \n \t* gcc.target/arm/ivopts-orig_biv-inc.c: New testcase."}, {"sha": "4313fca50e7d90cd661611119fed2c5e862baed6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78de2333eab3428f4b8723e41534f81c508bc7a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78de2333eab3428f4b8723e41534f81c508bc7a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-4.c?ref=78de2333eab3428f4b8723e41534f81c508bc7a6", "patch": "@@ -37,7 +37,7 @@ void xxx(void)\n \n /* { dg-final { scan-tree-dump-times \" \\\\* \\[^\\\\n\\\\r\\]*=\" 0 \"optimized\" } } */\n /* { dg-final { scan-tree-dump-times \"\\[^\\\\n\\\\r\\]*= \\\\* \" 0 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"MEM\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" MEM\" 1 \"optimized\" } } */\n \n /* And the original induction variable should be eliminated.  */\n "}, {"sha": "914b3d77051973e7bb1395c32da6e998e064cb8c", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78de2333eab3428f4b8723e41534f81c508bc7a6/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78de2333eab3428f4b8723e41534f81c508bc7a6/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=78de2333eab3428f4b8723e41534f81c508bc7a6", "patch": "@@ -377,35 +377,46 @@ add_elt_to_tree (tree expr, tree type, tree elt, double_int scale,\n     type1 = sizetype;\n \n   scale = double_int_ext_for_comb (scale, comb);\n-  elt = fold_convert (type1, elt);\n+\n+  if (scale.is_minus_one ()\n+      && POINTER_TYPE_P (TREE_TYPE (elt)))\n+    {\n+      elt = fold_build1 (NEGATE_EXPR, sizetype, convert_to_ptrofftype (elt));\n+      scale = double_int_one;\n+    }\n \n   if (scale.is_one ())\n     {\n       if (!expr)\n-\treturn fold_convert (type, elt);\n-\n-      if (POINTER_TYPE_P (type))\n-        return fold_build_pointer_plus (expr, elt);\n-      return fold_build2 (PLUS_EXPR, type, expr, elt);\n+\treturn elt;\n+\n+      if (POINTER_TYPE_P (TREE_TYPE (expr)))\n+\treturn fold_build_pointer_plus (expr, convert_to_ptrofftype (elt));\n+      if (POINTER_TYPE_P (TREE_TYPE (elt)))\n+\treturn fold_build_pointer_plus (elt, convert_to_ptrofftype (expr));\n+      return fold_build2 (PLUS_EXPR, type1,\n+\t\t\t  fold_convert (type1, expr),\n+\t\t\t  fold_convert (type1, elt));\n     }\n \n   if (scale.is_minus_one ())\n     {\n       if (!expr)\n-\treturn fold_convert (type, fold_build1 (NEGATE_EXPR, type1, elt));\n-\n-      if (POINTER_TYPE_P (type))\n-\t{\n-\t  elt = fold_build1 (NEGATE_EXPR, type1, elt);\n-\t  return fold_build_pointer_plus (expr, elt);\n-\t}\n-      return fold_build2 (MINUS_EXPR, type, expr, elt);\n+\treturn fold_build1 (NEGATE_EXPR, TREE_TYPE (elt), elt);\n+\n+      if (POINTER_TYPE_P (TREE_TYPE (expr)))\n+\treturn fold_build_pointer_plus\n+\t    (expr, convert_to_ptrofftype\n+\t     (fold_build1 (NEGATE_EXPR, TREE_TYPE (elt), elt)));\n+      return fold_build2 (MINUS_EXPR, type1,\n+\t\t\t  fold_convert (type1, expr),\n+\t\t\t  fold_convert (type1, elt));\n     }\n \n+  elt = fold_convert (type1, elt);\n   if (!expr)\n-    return fold_convert (type,\n-\t\t\t fold_build2 (MULT_EXPR, type1, elt,\n-\t\t\t\t      double_int_to_tree (type1, scale)));\n+    return fold_build2 (MULT_EXPR, type1, elt,\n+\t\t\tdouble_int_to_tree (type1, scale));\n \n   if (scale.is_negative ())\n     {\n@@ -417,13 +428,14 @@ add_elt_to_tree (tree expr, tree type, tree elt, double_int scale,\n \n   elt = fold_build2 (MULT_EXPR, type1, elt,\n \t\t     double_int_to_tree (type1, scale));\n-  if (POINTER_TYPE_P (type))\n+  if (POINTER_TYPE_P (TREE_TYPE (expr)))\n     {\n       if (code == MINUS_EXPR)\n         elt = fold_build1 (NEGATE_EXPR, type1, elt);\n       return fold_build_pointer_plus (expr, elt);\n     }\n-  return fold_build2 (code, type, expr, elt);\n+  return fold_build2 (code, type1,\n+\t\t      fold_convert (type1, expr), elt);\n }\n \n /* Makes tree from the affine combination COMB.  */"}]}