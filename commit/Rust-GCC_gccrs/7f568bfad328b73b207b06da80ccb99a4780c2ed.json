{"sha": "7f568bfad328b73b207b06da80ccb99a4780c2ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y1NjhiZmFkMzI4YjczYjIwN2IwNmRhODBjY2I5OWE0NzgwYzJlZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-20T14:02:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-20T14:02:27Z"}, "message": "[multiple changes]\n\n2014-02-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch12.adb (Validate_Access_Type_Instance): Add message if\n\tmismatching predicates.\n\t* sem_ch6.adb (Check_Conformance): Give better messages on\n\tpredicate mismatch.\n\t* sem_eval.adb (Predicates_Match): Move to spec.\n\t* sem_eval.ads (Predicates_Match): Moved here from body.\n\n2014-02-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* a-cbmutr.adb: Use default value in Insert_Child.\n\nFrom-SVN: r207949", "tree": {"sha": "293ddb1db09b6b8c9bf97f23c521011485ca7e64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/293ddb1db09b6b8c9bf97f23c521011485ca7e64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f568bfad328b73b207b06da80ccb99a4780c2ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f568bfad328b73b207b06da80ccb99a4780c2ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f568bfad328b73b207b06da80ccb99a4780c2ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f568bfad328b73b207b06da80ccb99a4780c2ed/comments", "author": null, "committer": null, "parents": [{"sha": "308aab0bb643f5237eb0bfc6c7134a35907a33a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/308aab0bb643f5237eb0bfc6c7134a35907a33a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/308aab0bb643f5237eb0bfc6c7134a35907a33a9"}], "stats": {"total": 226, "additions": 143, "deletions": 83}, "files": [{"sha": "8452f3df9c54a06455a550d3ec8c3e03031c1038", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f568bfad328b73b207b06da80ccb99a4780c2ed/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f568bfad328b73b207b06da80ccb99a4780c2ed/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7f568bfad328b73b207b06da80ccb99a4780c2ed", "patch": "@@ -1,3 +1,16 @@\n+2014-02-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch12.adb (Validate_Access_Type_Instance): Add message if\n+\tmismatching predicates.\n+\t* sem_ch6.adb (Check_Conformance): Give better messages on\n+\tpredicate mismatch.\n+\t* sem_eval.adb (Predicates_Match): Move to spec.\n+\t* sem_eval.ads (Predicates_Match): Moved here from body.\n+\n+2014-02-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* a-cbmutr.adb: Use default value in Insert_Child.\n+\n 2014-02-20  Vincent Celier  <celier@adacore.com>\n \n \t* gnatcmd.adb, make.adb, prj-makr.adb, clean.adb: Call"}, {"sha": "e0bcd3acafe4dd0f718ae0d2ed086135b010b833", "filename": "gcc/ada/a-cbmutr.adb", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f568bfad328b73b207b06da80ccb99a4780c2ed/gcc%2Fada%2Fa-cbmutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f568bfad328b73b207b06da80ccb99a4780c2ed/gcc%2Fada%2Fa-cbmutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbmutr.adb?ref=7f568bfad328b73b207b06da80ccb99a4780c2ed", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---             Copyright (C) 2011-2012, Free Software Foundation, Inc.      --\n+--             Copyright (C) 2011-2013, Free Software Foundation, Inc.      --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1585,6 +1585,15 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n       Nodes : Tree_Node_Array renames Container.Nodes;\n       Last  : Count_Type;\n \n+      Elem : Element_Type;\n+      pragma Unmodified (Elem);\n+      --  There is no explicit element provided, but in an instance the\n+      --  element type may be a scalar with a Default_Value aspect, or a\n+      --  composite type with such a scalar component, so we insert the\n+      --  specified number of possibly initialized elements at the given\n+      --  position. So we are declaring Elem just for this possible default\n+      --  initialization, which is why we need the pragma Unmodified.\n+\n    begin\n       if Parent = No_Element then\n          raise Constraint_Error with \"Parent cursor has no element\";\n@@ -1623,7 +1632,7 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n          Initialize_Root (Container);\n       end if;\n \n-      Allocate_Node (Container, Position.Node);\n+      Allocate_Node (Container, Elem, Position.Node);\n       Nodes (Position.Node).Parent := Parent.Node;\n \n       Last := Position.Node;"}, {"sha": "54df193ab8b4d69cf32f2aa8c6f9356a85bf1509", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f568bfad328b73b207b06da80ccb99a4780c2ed/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f568bfad328b73b207b06da80ccb99a4780c2ed/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=7f568bfad328b73b207b06da80ccb99a4780c2ed", "patch": "@@ -10662,17 +10662,27 @@ package body Sem_Ch12 is\n          if not Subtypes_Match (Desig_Type, Desig_Act) then\n             Error_Msg_NE\n               (\"designated type of actual does not match that of formal &\",\n-                 Actual, Gen_T);\n+               Actual, Gen_T);\n+\n+            if not Predicates_Match (Desig_Type, Desig_Act) then\n+               Error_Msg_N (\"\\predicates do not match\", Actual);\n+            end if;\n+\n             Abandon_Instantiation (Actual);\n \n          elsif Is_Access_Type (Designated_Type (Act_T))\n            and then Is_Constrained (Designated_Type (Designated_Type (Act_T)))\n                       /=\n-                  Is_Constrained (Designated_Type (Desig_Type))\n+                    Is_Constrained (Designated_Type (Desig_Type))\n          then\n             Error_Msg_NE\n               (\"designated type of actual does not match that of formal &\",\n-                 Actual, Gen_T);\n+               Actual, Gen_T);\n+\n+            if not Predicates_Match (Desig_Type, Desig_Act) then\n+               Error_Msg_N (\"\\predicates do not match\", Actual);\n+            end if;\n+\n             Abandon_Instantiation (Actual);\n          end if;\n "}, {"sha": "5885e3f4538296402c93dd8793fa37bfd09d6224", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 57, "deletions": 28, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f568bfad328b73b207b06da80ccb99a4780c2ed/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f568bfad328b73b207b06da80ccb99a4780c2ed/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=7f568bfad328b73b207b06da80ccb99a4780c2ed", "patch": "@@ -669,25 +669,44 @@ package body Sem_Ch6 is\n          Subtype_Ind : constant Node_Id :=\n                          Object_Definition (Original_Node (Obj_Decl));\n \n-         R_Type_Is_Anon_Access :\n-           constant Boolean :=\n-             Ekind (R_Type) = E_Anonymous_Access_Subprogram_Type\n-               or else\n-             Ekind (R_Type) = E_Anonymous_Access_Protected_Subprogram_Type\n-               or else\n-             Ekind (R_Type) = E_Anonymous_Access_Type;\n+         R_Type_Is_Anon_Access : constant Boolean :=\n+             Ekind_In (R_Type,\n+                       E_Anonymous_Access_Subprogram_Type,\n+                       E_Anonymous_Access_Protected_Subprogram_Type,\n+                       E_Anonymous_Access_Type);\n          --  True if return type of the function is an anonymous access type\n          --  Can't we make Is_Anonymous_Access_Type in einfo ???\n \n-         R_Stm_Type_Is_Anon_Access :\n-           constant Boolean :=\n-             Ekind (R_Stm_Type) = E_Anonymous_Access_Subprogram_Type\n-               or else\n-             Ekind (R_Stm_Type) = E_Anonymous_Access_Protected_Subprogram_Type\n-               or else\n-             Ekind (R_Stm_Type) = E_Anonymous_Access_Type;\n+         R_Stm_Type_Is_Anon_Access : constant Boolean :=\n+             Ekind_In (R_Stm_Type,\n+                       E_Anonymous_Access_Subprogram_Type,\n+                       E_Anonymous_Access_Protected_Subprogram_Type,\n+                       E_Anonymous_Access_Type);\n          --  True if type of the return object is an anonymous access type\n \n+         procedure Error_No_Match (N : Node_Id);\n+         --  Output error messages for case where types do not statically\n+         --  match. N is the location for the messages.\n+\n+         --------------------\n+         -- Error_No_Match --\n+         --------------------\n+\n+         procedure Error_No_Match (N : Node_Id) is\n+         begin\n+            Error_Msg_N\n+              (\"subtype must statically match function result subtype\", N);\n+\n+            if not Predicates_Match (R_Stm_Type, R_Type) then\n+               Error_Msg_Node_2 := R_Type;\n+               Error_Msg_NE\n+                 (\"\\predicate of & does not match predicate of &\",\n+                  N, R_Stm_Type);\n+            end if;\n+         end Error_No_Match;\n+\n+      --  Start of processing for Check_Return_Subtype_Indication\n+\n       begin\n          --  First, avoid cascaded errors\n \n@@ -708,9 +727,7 @@ package body Sem_Ch6 is\n                      Base_Type (Designated_Type (R_Type))\n                     or else not Subtypes_Statically_Match (R_Stm_Type, R_Type)\n                   then\n-                     Error_Msg_N\n-                      (\"subtype must statically match function result subtype\",\n-                       Subtype_Mark (Subtype_Ind));\n+                     Error_No_Match (Subtype_Mark (Subtype_Ind));\n                   end if;\n \n                else\n@@ -720,9 +737,7 @@ package body Sem_Ch6 is\n                   if not Conforming_Types\n                     (R_Stm_Type, R_Type, Fully_Conformant)\n                   then\n-                     Error_Msg_N\n-                      (\"subtype must statically match function result subtype\",\n-                         Subtype_Ind);\n+                     Error_No_Match (Subtype_Ind);\n                   end if;\n                end if;\n \n@@ -763,9 +778,7 @@ package body Sem_Ch6 is\n                  or else Null_Exclusion_Present (Parent (Scope_Id))) /=\n                                               Can_Never_Be_Null (R_Stm_Type)\n             then\n-               Error_Msg_N\n-                 (\"subtype must statically match function result subtype\",\n-                  Subtype_Ind);\n+               Error_No_Match (Subtype_Ind);\n             end if;\n \n             --  AI05-103: for elementary types, subtypes must statically match\n@@ -774,9 +787,7 @@ package body Sem_Ch6 is\n               or else Is_Access_Type (R_Type)\n             then\n                if not Subtypes_Statically_Match (R_Stm_Type, R_Type) then\n-                  Error_Msg_N\n-                    (\"subtype must statically match function result subtype\",\n-                     Subtype_Ind);\n+                  Error_No_Match (Subtype_Ind);\n                end if;\n             end if;\n \n@@ -5931,7 +5942,16 @@ package body Sem_Ch6 is\n             null;\n \n          elsif not Conforming_Types (Old_Type, New_Type, Ctype, Get_Inst) then\n-            Conformance_Error (\"\\return type does not match!\", New_Id);\n+            if Ctype >= Subtype_Conformant\n+              and then not Predicates_Match (Old_Type, New_Type)\n+            then\n+               Conformance_Error\n+                 (\"\\predicate of return type does not match!\", New_Id);\n+            else\n+               Conformance_Error\n+                 (\"\\return type does not match!\", New_Id);\n+            end if;\n+\n             return;\n          end if;\n \n@@ -6168,7 +6188,16 @@ package body Sem_Ch6 is\n             if Errmsg and then Old_Formal_Base = Any_Type then\n                Conforms := False;\n             else\n-               Conformance_Error (\"\\type of & does not match!\", New_Formal);\n+               if Ctype >= Subtype_Conformant\n+                 and then\n+                   not Predicates_Match (Old_Formal_Base, New_Formal_Base)\n+               then\n+                  Conformance_Error\n+                    (\"\\predicate of & does not match!\", New_Formal);\n+               else\n+                  Conformance_Error\n+                    (\"\\type of & does not match!\", New_Formal);\n+               end if;\n             end if;\n \n             return;"}, {"sha": "14b2fa97a3b920f75f855ceb8ddc8868f5ada4ec", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 43, "deletions": 50, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f568bfad328b73b207b06da80ccb99a4780c2ed/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f568bfad328b73b207b06da80ccb99a4780c2ed/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=7f568bfad328b73b207b06da80ccb99a4780c2ed", "patch": "@@ -4686,6 +4686,48 @@ package body Sem_Eval is\n       end if;\n    end Out_Of_Range;\n \n+   ----------------------\n+   -- Predicates_Match --\n+   ----------------------\n+\n+   function Predicates_Match (T1, T2 : Entity_Id) return Boolean is\n+      Pred1 : Node_Id;\n+      Pred2 : Node_Id;\n+\n+   begin\n+      if Ada_Version < Ada_2012 then\n+         return True;\n+\n+         --  Both types must have predicates or lack them\n+\n+      elsif Has_Predicates (T1) /= Has_Predicates (T2) then\n+         return False;\n+\n+         --  Check matching predicates\n+\n+      else\n+         Pred1 :=\n+           Get_Rep_Item\n+             (T1, Name_Static_Predicate, Check_Parents => False);\n+         Pred2 :=\n+           Get_Rep_Item\n+             (T2, Name_Static_Predicate, Check_Parents => False);\n+\n+         --  Subtypes statically match if the predicate comes from the\n+         --  same declaration, which can only happen if one is a subtype\n+         --  of the other and has no explicit predicate.\n+\n+         --  Suppress warnings on order of actuals, which is otherwise\n+         --  triggered by one of the two calls below.\n+\n+         pragma Warnings (Off);\n+         return Pred1 = Pred2\n+           or else (No (Pred1) and then Is_Subtype_Of (T1, T2))\n+           or else (No (Pred2) and then Is_Subtype_Of (T2, T1));\n+         pragma Warnings (On);\n+      end if;\n+   end Predicates_Match;\n+\n    -------------------------\n    -- Rewrite_In_Raise_CE --\n    -------------------------\n@@ -4839,55 +4881,6 @@ package body Sem_Eval is\n    --  false even if the types would otherwise match in the RM sense.\n \n    function Subtypes_Statically_Match (T1, T2 : Entity_Id) return Boolean is\n-\n-      function Predicates_Match return Boolean;\n-      --  In Ada 2012, subtypes statically match if their static predicates\n-      --  match as well.\n-\n-      ----------------------\n-      -- Predicates_Match --\n-      ----------------------\n-\n-      function Predicates_Match return Boolean is\n-         Pred1 : Node_Id;\n-         Pred2 : Node_Id;\n-\n-      begin\n-         if Ada_Version < Ada_2012 then\n-            return True;\n-\n-         --  Both types must have predicates or lack them\n-\n-         elsif Has_Predicates (T1) /= Has_Predicates (T2) then\n-            return False;\n-\n-         --  Check matching predicates\n-\n-         else\n-            Pred1 :=\n-              Get_Rep_Item\n-                (T1, Name_Static_Predicate, Check_Parents => False);\n-            Pred2 :=\n-              Get_Rep_Item\n-                (T2, Name_Static_Predicate, Check_Parents => False);\n-\n-            --  Subtypes statically match if the predicate comes from the\n-            --  same declaration, which can only happen if one is a subtype\n-            --  of the other and has no explicit predicate.\n-\n-            --  Suppress warnings on order of actuals, which is otherwise\n-            --  triggered by one of the two calls below.\n-\n-            pragma Warnings (Off);\n-            return Pred1 = Pred2\n-              or else (No (Pred1) and then Is_Subtype_Of (T1, T2))\n-              or else (No (Pred2) and then Is_Subtype_Of (T2, T1));\n-            pragma Warnings (On);\n-         end if;\n-      end Predicates_Match;\n-\n-   --  Start of processing for Subtypes_Statically_Match\n-\n    begin\n       --  A type always statically matches itself\n \n@@ -4903,7 +4896,7 @@ package body Sem_Eval is\n \n       --  No match if predicates do not match\n \n-      elsif not Predicates_Match then\n+      elsif not Predicates_Match (T1, T2) then\n          return False;\n \n       --  Scalar types"}, {"sha": "6d5cdc8319f1a757f6f25c0c86a91794105c12dc", "filename": "gcc/ada/sem_eval.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f568bfad328b73b207b06da80ccb99a4780c2ed/gcc%2Fada%2Fsem_eval.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f568bfad328b73b207b06da80ccb99a4780c2ed/gcc%2Fada%2Fsem_eval.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.ads?ref=7f568bfad328b73b207b06da80ccb99a4780c2ed", "patch": "@@ -454,6 +454,12 @@ package Sem_Eval is\n    --  it cannot (because the value of Lo or Hi is not known at compile time)\n    --  then it returns False.\n \n+   function Predicates_Match (T1, T2 : Entity_Id) return Boolean;\n+   --  In Ada 2012, subtypes statically match if their static predicates\n+   --  match as well. This function performs the required check that\n+   --  predicates match. Separated out from Subtypes_Statically_Match so\n+   --  that it can be used in specializing error messages.\n+\n    procedure Why_Not_Static (Expr : Node_Id);\n    --  This procedure may be called after generating an error message that\n    --  complains that something is non-static. If it finds good reasons,"}]}