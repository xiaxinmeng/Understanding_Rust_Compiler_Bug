{"sha": "15fb94aef9144ef8fda68e4e6982c5579b305d48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVmYjk0YWVmOTE0NGVmOGZkYTY4ZTRlNjk4MmM1NTc5YjMwNWQ0OA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-01-25T16:46:00Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-01-25T16:46:00Z"}, "message": "PR 47375 getlog thread safety\n\nFrom-SVN: r169243", "tree": {"sha": "1538002791cf4c736ee2c94cfa926cd4a4ea3c37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1538002791cf4c736ee2c94cfa926cd4a4ea3c37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15fb94aef9144ef8fda68e4e6982c5579b305d48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15fb94aef9144ef8fda68e4e6982c5579b305d48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15fb94aef9144ef8fda68e4e6982c5579b305d48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15fb94aef9144ef8fda68e4e6982c5579b305d48/comments", "author": null, "committer": null, "parents": [{"sha": "f822b8eab1b7668914c20bf9f5f89bbfb028ae7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f822b8eab1b7668914c20bf9f5f89bbfb028ae7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f822b8eab1b7668914c20bf9f5f89bbfb028ae7c"}], "stats": {"total": 52, "additions": 40, "deletions": 12}, "files": [{"sha": "dc53e87dd2d6b3a8ac9d64e1d16b4d08555b6ecc", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15fb94aef9144ef8fda68e4e6982c5579b305d48/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15fb94aef9144ef8fda68e4e6982c5579b305d48/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=15fb94aef9144ef8fda68e4e6982c5579b305d48", "patch": "@@ -1,3 +1,11 @@\n+2011-01-25  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/47375\n+\t* config.h.in: Regenerated.\n+\t* configure: Regenerated.\n+\t* configure.ac: Add check for getpwuid_r.\n+\t* intrinsics/getlog.c (getlog): Use getpwuid_r() if available.\n+\n 2011-01-22  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR libfortran/46267"}, {"sha": "0701c63916c6c14b12c5c7a9c86877777e50920b", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15fb94aef9144ef8fda68e4e6982c5579b305d48/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15fb94aef9144ef8fda68e4e6982c5579b305d48/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=15fb94aef9144ef8fda68e4e6982c5579b305d48", "patch": "@@ -462,6 +462,9 @@\n /* Define to 1 if you have the `getpwuid' function. */\n #undef HAVE_GETPWUID\n \n+/* Define to 1 if you have the `getpwuid_r' function. */\n+#undef HAVE_GETPWUID_R\n+\n /* Define to 1 if you have the `getrlimit' function. */\n #undef HAVE_GETRLIMIT\n "}, {"sha": "2cbf6546307b80569840520a218cb3893027f172", "filename": "libgfortran/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15fb94aef9144ef8fda68e4e6982c5579b305d48/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15fb94aef9144ef8fda68e4e6982c5579b305d48/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=15fb94aef9144ef8fda68e4e6982c5579b305d48", "patch": "@@ -15636,7 +15636,7 @@ _ACEOF\n fi\n done\n \n-for ac_func in localtime_r gmtime_r strerror_r\n+for ac_func in localtime_r gmtime_r strerror_r getpwuid_r\n do :\n   as_ac_var=`$as_echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n ac_fn_c_check_func \"$LINENO\" \"$ac_func\" \"$as_ac_var\""}, {"sha": "9b91f9af525c31a23317013ae9492acf9e312127", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15fb94aef9144ef8fda68e4e6982c5579b305d48/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15fb94aef9144ef8fda68e4e6982c5579b305d48/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=15fb94aef9144ef8fda68e4e6982c5579b305d48", "patch": "@@ -249,7 +249,7 @@ AC_CHECK_FUNCS(chdir strerror getlogin gethostname kill link symlink perror)\n AC_CHECK_FUNCS(sleep time ttyname signal alarm ctime clock access fork execl)\n AC_CHECK_FUNCS(wait setmode execvp pipe dup2 close fdopen strcasestr getrlimit)\n AC_CHECK_FUNCS(gettimeofday stat fstat lstat getpwuid vsnprintf dup getcwd)\n-AC_CHECK_FUNCS(localtime_r gmtime_r strerror_r)\n+AC_CHECK_FUNCS(localtime_r gmtime_r strerror_r getpwuid_r)\n \n # Check for glibc backtrace functions\n AC_CHECK_FUNCS(backtrace backtrace_symbols)"}, {"sha": "baacdf0609f94f48adc412511da9a8d72b59f0b8", "filename": "libgfortran/intrinsics/getlog.c", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15fb94aef9144ef8fda68e4e6982c5579b305d48/libgfortran%2Fintrinsics%2Fgetlog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15fb94aef9144ef8fda68e4e6982c5579b305d48/libgfortran%2Fintrinsics%2Fgetlog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fgetlog.c?ref=15fb94aef9144ef8fda68e4e6982c5579b305d48", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the GETLOG g77 intrinsic.\n-   Copyright (C) 2005, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2009, 2011 Free Software Foundation, Inc.\n    Contributed by Fran\u00e7ois-Xavier Coudert <coudert@clipper.ens.fr>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -75,28 +75,45 @@ PREFIX(getlog) (char * login, gfc_charlen_type login_len)\n \n   memset (login, ' ', login_len); /* Blank the string.  */\n \n-#if defined(HAVE_GETPWUID) && defined(HAVE_GETEUID)\n+#if defined(HAVE_GETPWUID_R) && defined(HAVE_GETEUID)\n+  struct passwd pwd;\n+  struct passwd *result;\n+  char *buf;\n+  int err;\n+  /* To be pedantic, buflen should be determined by\n+     sysconf(_SC_GETPW_R_SIZE_MAX), which is 1024 on some tested\n+     targets; we do something simple in case the target doesn't\n+     support sysconf.  */\n+  static const size_t buflen = 1024;\n+  buf = get_mem (buflen);\n+  err = getpwuid_r (geteuid (), &pwd, buf, buflen, &result);\n+  if (err != 0 || result == NULL)\n+    goto cleanup;\n+  p = pwd.pw_name;\n+#elif defined(HAVE_GETPWUID) && defined(HAVE_GETEUID)\n   {\n     struct passwd *pw = getpwuid (geteuid ());\n     if (pw)\n       p = pw->pw_name;\n     else\n       return;\n   }\n-#else\n-# ifdef HAVE_GETLOGIN\n+#elif HAVE_GETLOGIN\n   p = getlogin();\n # else\n   return;\n-# endif\n #endif\n \n   if (p == NULL)\n-    return;\n+    goto cleanup;\n \n   p_len = strlen (p);\n   if (login_len < p_len)\n-    memcpy (login, p, login_len);\n-  else\n-    memcpy (login, p, p_len);\n+    p_len = login_len;\n+  memcpy (login, p, p_len);\n+\n+ cleanup:\n+#ifdef HAVE_GETPWUID_R\n+  free (buf);\n+#endif\n }"}]}