{"sha": "3f05e03d6cfdf723ca0556318b6a9aa37be438e7", "node_id": "C_kwDOANBUbNoAKDNmMDVlMDNkNmNmZGY3MjNjYTA1NTYzMThiNmE5YWEzN2JlNDM4ZTc", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-07-05T16:23:15Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-07-06T20:53:04Z"}, "message": "Restore 'GOMP_offload_unregister_ver' functionality\n\nThe recent commit 683f11843974f0bdf42f79cdcbb0c2b43c7b81b0\n\"OpenMP: Move omp requires checks to libgomp\" changed the\n'GOMP_offload_register_ver' interface but didn't change\n'GOMP_offload_unregister_ver' accordingly, so we're no longer\nactually unregistering.\n\n\tgcc/\n\t* config/gcn/mkoffload.cc (process_obj): Clarify 'target_data' ->\n\t'[...]_data'.\n\t* config/nvptx/mkoffload.cc (process): Likewise.\n\tlibgomp/\n\t* target.c (GOMP_offload_register_ver): Clarify 'target_data' ->\n\t'data'.\n\t(GOMP_offload_unregister_ver): Likewise.  Fix up 'target_data'.", "tree": {"sha": "7ef272d37b6d5817125bb1ec3359699c8e665e94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ef272d37b6d5817125bb1ec3359699c8e665e94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f05e03d6cfdf723ca0556318b6a9aa37be438e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f05e03d6cfdf723ca0556318b6a9aa37be438e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f05e03d6cfdf723ca0556318b6a9aa37be438e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f05e03d6cfdf723ca0556318b6a9aa37be438e7/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f0d819a81edee50a98a8a05eed585f0a72bb932", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f0d819a81edee50a98a8a05eed585f0a72bb932", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f0d819a81edee50a98a8a05eed585f0a72bb932"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "d2464332275d75718955f0d3753afaab9cb0b9f6", "filename": "gcc/config/gcn/mkoffload.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f05e03d6cfdf723ca0556318b6a9aa37be438e7/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f05e03d6cfdf723ca0556318b6a9aa37be438e7/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc?ref=3f05e03d6cfdf723ca0556318b6a9aa37be438e7", "patch": "@@ -692,13 +692,13 @@ process_obj (FILE *in, FILE *cfile, uint32_t omp_requires)\n \t   len);\n \n   fprintf (cfile,\n-\t   \"static const struct gcn_image_desc {\\n\"\n+\t   \"static const struct gcn_data {\\n\"\n \t   \"  uintptr_t omp_requires_mask;\\n\"\n \t   \"  const struct gcn_image *gcn_image;\\n\"\n \t   \"  unsigned kernel_count;\\n\"\n \t   \"  const struct hsa_kernel_description *kernel_infos;\\n\"\n \t   \"  unsigned global_variable_count;\\n\"\n-\t   \"} target_data = {\\n\"\n+\t   \"} gcn_data = {\\n\"\n \t   \"  %d,\\n\"\n \t   \"  &gcn_image,\\n\"\n \t   \"  sizeof (gcn_kernels) / sizeof (gcn_kernels[0]),\\n\"\n@@ -723,15 +723,15 @@ process_obj (FILE *in, FILE *cfile, uint32_t omp_requires)\n   fprintf (cfile, \"static __attribute__((constructor)) void init (void)\\n\"\n \t   \"{\\n\"\n \t   \"  GOMP_offload_register_ver (%#x, __OFFLOAD_TABLE__,\"\n-\t   \" %d/*GCN*/, &target_data);\\n\"\n+\t   \" %d/*GCN*/, &gcn_data);\\n\"\n \t   \"};\\n\",\n \t   GOMP_VERSION_PACK (GOMP_VERSION, GOMP_VERSION_GCN),\n \t   GOMP_DEVICE_GCN);\n \n   fprintf (cfile, \"static __attribute__((destructor)) void fini (void)\\n\"\n \t   \"{\\n\"\n \t   \"  GOMP_offload_unregister_ver (%#x, __OFFLOAD_TABLE__,\"\n-\t   \" %d/*GCN*/, &target_data);\\n\"\n+\t   \" %d/*GCN*/, &gcn_data);\\n\"\n \t   \"};\\n\",\n \t   GOMP_VERSION_PACK (GOMP_VERSION, GOMP_VERSION_GCN),\n \t   GOMP_DEVICE_GCN);"}, {"sha": "0fa5f4423bf881272429b81546b677573e7831ac", "filename": "gcc/config/nvptx/mkoffload.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f05e03d6cfdf723ca0556318b6a9aa37be438e7/gcc%2Fconfig%2Fnvptx%2Fmkoffload.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f05e03d6cfdf723ca0556318b6a9aa37be438e7/gcc%2Fconfig%2Fnvptx%2Fmkoffload.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fmkoffload.cc?ref=3f05e03d6cfdf723ca0556318b6a9aa37be438e7", "patch": "@@ -310,15 +310,15 @@ process (FILE *in, FILE *out, uint32_t omp_requires)\n   fprintf (out, \"\\n};\\n\\n\");\n \n   fprintf (out,\n-\t   \"static const struct nvptx_tdata {\\n\"\n+\t   \"static const struct nvptx_data {\\n\"\n \t   \"  uintptr_t omp_requires_mask;\\n\"\n \t   \"  const struct ptx_obj *ptx_objs;\\n\"\n \t   \"  unsigned ptx_num;\\n\"\n \t   \"  const char *const *var_names;\\n\"\n \t   \"  unsigned var_num;\\n\"\n \t   \"  const struct nvptx_fn *fn_names;\\n\"\n \t   \"  unsigned fn_num;\\n\"\n-\t   \"} target_data = {\\n\"\n+\t   \"} nvptx_data = {\\n\"\n \t   \"  %d, ptx_objs, sizeof (ptx_objs) / sizeof (ptx_objs[0]),\\n\"\n \t   \"  var_mappings,\"\n \t   \"  sizeof (var_mappings) / sizeof (var_mappings[0]),\\n\"\n@@ -344,15 +344,15 @@ process (FILE *in, FILE *out, uint32_t omp_requires)\n   fprintf (out, \"static __attribute__((constructor)) void init (void)\\n\"\n \t   \"{\\n\"\n \t   \"  GOMP_offload_register_ver (%#x, __OFFLOAD_TABLE__,\"\n-\t   \" %d/*NVIDIA_PTX*/, &target_data);\\n\"\n+\t   \" %d/*NVIDIA_PTX*/, &nvptx_data);\\n\"\n \t   \"};\\n\",\n \t   GOMP_VERSION_PACK (GOMP_VERSION, GOMP_VERSION_NVIDIA_PTX),\n \t   GOMP_DEVICE_NVIDIA_PTX);\n \n   fprintf (out, \"static __attribute__((destructor)) void fini (void)\\n\"\n \t   \"{\\n\"\n \t   \"  GOMP_offload_unregister_ver (%#x, __OFFLOAD_TABLE__,\"\n-\t   \" %d/*NVIDIA_PTX*/, &target_data);\\n\"\n+\t   \" %d/*NVIDIA_PTX*/, &nvptx_data);\\n\"\n \t   \"};\\n\",\n \t   GOMP_VERSION_PACK (GOMP_VERSION, GOMP_VERSION_NVIDIA_PTX),\n \t   GOMP_DEVICE_NVIDIA_PTX);"}, {"sha": "c66c61b06217b5f9f6fda2fb7b217e6f13904cec", "filename": "libgomp/target.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f05e03d6cfdf723ca0556318b6a9aa37be438e7/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f05e03d6cfdf723ca0556318b6a9aa37be438e7/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=3f05e03d6cfdf723ca0556318b6a9aa37be438e7", "patch": "@@ -2334,23 +2334,29 @@ gomp_requires_to_name (char *buf, size_t size, int requires_mask)\n \n /* This function should be called from every offload image while loading.\n    It gets the descriptor of the host func and var tables HOST_TABLE, TYPE of\n-   the target, and TARGET_DATA needed by target plugin.  */\n+   the target, and DATA.  */\n \n void\n GOMP_offload_register_ver (unsigned version, const void *host_table,\n-\t\t\t   int target_type, const void *target_data)\n+\t\t\t   int target_type, const void *data)\n {\n   int i;\n-  int omp_req = 0;\n \n   if (GOMP_VERSION_LIB (version) > GOMP_VERSION)\n     gomp_fatal (\"Library too old for offload (version %u < %u)\",\n \t\tGOMP_VERSION, GOMP_VERSION_LIB (version));\n \n+  int omp_req;\n+  const void *target_data;\n   if (GOMP_VERSION_LIB (version) > 1)\n     {\n-      omp_req = (int) (size_t) ((void **) target_data)[0];\n-      target_data = &((void **) target_data)[1];\n+      omp_req = (int) (size_t) ((void **) data)[0];\n+      target_data = &((void **) data)[1];\n+    }\n+  else\n+    {\n+      omp_req = 0;\n+      target_data = data;\n     }\n \n   gomp_mutex_lock (&register_lock);\n@@ -2413,14 +2419,24 @@ GOMP_offload_register (const void *host_table, int target_type,\n \n /* This function should be called from every offload image while unloading.\n    It gets the descriptor of the host func and var tables HOST_TABLE, TYPE of\n-   the target, and TARGET_DATA needed by target plugin.  */\n+   the target, and DATA.  */\n \n void\n GOMP_offload_unregister_ver (unsigned version, const void *host_table,\n-\t\t\t     int target_type, const void *target_data)\n+\t\t\t     int target_type, const void *data)\n {\n   int i;\n \n+  if (GOMP_VERSION_LIB (version) > GOMP_VERSION)\n+    gomp_fatal (\"Library too old for offload (version %u < %u)\",\n+\t\tGOMP_VERSION, GOMP_VERSION_LIB (version));\n+\n+  const void *target_data;\n+  if (GOMP_VERSION_LIB (version) > 1)\n+    target_data = &((void **) data)[1];\n+  else\n+    target_data = data;\n+\n   gomp_mutex_lock (&register_lock);\n \n   /* Unload image from all initialized devices.  */"}]}