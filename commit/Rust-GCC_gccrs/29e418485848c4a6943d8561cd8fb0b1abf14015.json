{"sha": "29e418485848c4a6943d8561cd8fb0b1abf14015", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjllNDE4NDg1ODQ4YzRhNjk0M2Q4NTYxY2Q4ZmIwYjFhYmYxNDAxNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-01T10:56:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-01T11:39:07Z"}, "message": "libstdc++: Define type traits for wchar_t even when libc support missing\n\nThis meets the requirement that std::is_integral_v<wchar_t> is true,\neven when full library support for wchar_t via specializations of\nchar_traits etc. is not provided. This is done by checking\n__WCHAR_TYPE__ to see if the compiler knows about the type, rather than\nchecking the library's own _GLIBCXX_USE_WCHAR_T autoconf macro.\n\nThis assumes that the C++ compiler correctly defines wchar_t as a\ndistinct type, not a typedef for one of the other integeral types. This\nis always true for G++ and should be true for any supported non-GNU\ncompilers.\n\nSimilarly, the std::make_unsigned and std::make_signed traits and the\ninternal helpers std::__is_integer and std::__is_char are also changed\nto depend on the same macro.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/type_traits (is_integral<wchar_t>)\n\t(make_unsigned<wchar_t>, make_signed<wchar_t>): Define based\n\ton #ifdef __WCHAR_TYPE__ instead of _GLIBCXX_USE_WCHAR_T.\n\t* include/bits/cpp_type_traits.h (__is_integer<wchar_t>)\n\t(__is_char<wchar_t>): Likewise.", "tree": {"sha": "a407e74705910515e38c711a08313bfb0b3d5551", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a407e74705910515e38c711a08313bfb0b3d5551"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29e418485848c4a6943d8561cd8fb0b1abf14015", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e418485848c4a6943d8561cd8fb0b1abf14015", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29e418485848c4a6943d8561cd8fb0b1abf14015", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e418485848c4a6943d8561cd8fb0b1abf14015/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de77abee118f1900fceb25c34b0cc1ef7261c9ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de77abee118f1900fceb25c34b0cc1ef7261c9ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de77abee118f1900fceb25c34b0cc1ef7261c9ce"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "433a2d7d35bc756b8bd68bd897c614cd42b2539d", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29e418485848c4a6943d8561cd8fb0b1abf14015/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29e418485848c4a6943d8561cd8fb0b1abf14015/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=29e418485848c4a6943d8561cd8fb0b1abf14015", "patch": "@@ -162,7 +162,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef __true_type __type;\n     };\n \n-# ifdef _GLIBCXX_USE_WCHAR_T\n+# ifdef __WCHAR_TYPE__\n   template<>\n     struct __is_integer<wchar_t>\n     {\n@@ -363,7 +363,7 @@ __INT_N(__GLIBCXX_TYPE_INT_N_3)\n       typedef __true_type __type;\n     };\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n+#ifdef __WCHAR_TYPE__\n   template<>\n     struct __is_char<wchar_t>\n     {"}, {"sha": "34e068b59523f0e532f52500a7b8714717e0ca34", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29e418485848c4a6943d8561cd8fb0b1abf14015/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29e418485848c4a6943d8561cd8fb0b1abf14015/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=29e418485848c4a6943d8561cd8fb0b1abf14015", "patch": "@@ -269,7 +269,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_integral_helper<unsigned char>\n     : public true_type { };\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n+  // We want is_integral<wchar_t> to be true (and make_signed/unsigned to work)\n+  // even when libc doesn't provide working <wchar.h> and related functions,\n+  // so check __WCHAR_TYPE__ instead of _GLIBCXX_USE_WCHAR_T.\n+#ifdef __WCHAR_TYPE__\n   template<>\n     struct __is_integral_helper<wchar_t>\n     : public true_type { };\n@@ -1742,7 +1745,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // neither signed integer types nor unsigned integer types, so must be\n   // transformed to the unsigned integer type with the smallest rank.\n   // Use the partial specialization for enumeration types to do that.\n-#if defined(_GLIBCXX_USE_WCHAR_T)\n+#ifdef __WCHAR_TYPE__\n   template<>\n     struct __make_unsigned<wchar_t>\n     {\n@@ -1868,7 +1871,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // signed integer types nor unsigned integer types, so must be\n   // transformed to the signed integer type with the smallest rank.\n   // Use the partial specialization for enumeration types to do that.\n-#if defined(_GLIBCXX_USE_WCHAR_T)\n+#if defined(__WCHAR_TYPE__)\n   template<>\n     struct __make_signed<wchar_t>\n     {"}]}