{"sha": "57b64a64261ed1d1774af61a1e36eeac604abcde", "node_id": "C_kwDOANBUbNoAKDU3YjY0YTY0MjYxZWQxZDE3NzRhZjYxYTFlMzZlZWFjNjA0YWJjZGU", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-16T12:53:22Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-02-20T12:52:12Z"}, "message": "parser: Allow parsing of qualified type path as nested generic argument\n\nLet's take the example of lexing `Option<<T as Iterator>::Item>` and look\nat the first few tokens. Originally, `Option<<T` was lexed as 3 tokens:\n\n* IDENTIFIER(Option)\n* LEFT_SHIFT\n* IDENTIFIER(T)\n\nThe parser did not allow a list of generic arguments to start with a left\nshift, and rejected the above type. We are now splitting the left shift\ninto two left angles, as this allows complex generic arguments and overall\nmakes sense parsing wise. Thus, the above list becomes:\n\n* IDENTIFIER(Option)\n* LEFT_ANGLE\n* LEFT_ANGLE\n* IDENTIFIER(T)\n\nand `<T as Iterator>` is properly parsed as a qualified path.\n\nFixes #1815\nFixed #1809\n\nAddresses #1524\n\ngcc/rust/ChangeLog:\n\n\t* parse/rust-parse-impl.h (Parser::parse_path_generic_args): Split leading\n\t`LEFT_SHIFT` token into two `LEFT_ANGLE` tokens when parsing generic arguments.\n\t(Parser::parse_type_path_segment): Allow `LEFT_ANGLE` as starting token for\n\tparsing generic arguments.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/parse_associated_type_as_generic_arg.rs: New test.\n\t* rust/compile/parse_associated_type_as_generic_arg2.rs: New test.\n\t* rust/compile/path_as_generic_arg.rs: New test.\n\t* rust/compile/nested_generic.rs: New test.", "tree": {"sha": "86370b4355678e9d50aa4941a5d0d9f443d8f5c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86370b4355678e9d50aa4941a5d0d9f443d8f5c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57b64a64261ed1d1774af61a1e36eeac604abcde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b64a64261ed1d1774af61a1e36eeac604abcde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57b64a64261ed1d1774af61a1e36eeac604abcde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b64a64261ed1d1774af61a1e36eeac604abcde/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "773d3c6477d7075ceeb01e4c910be24361ff6dcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/773d3c6477d7075ceeb01e4c910be24361ff6dcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/773d3c6477d7075ceeb01e4c910be24361ff6dcf"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "3bf26bc6fdc4015385a6a4a37e9b81e2f709a864", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b64a64261ed1d1774af61a1e36eeac604abcde/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b64a64261ed1d1774af61a1e36eeac604abcde/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=57b64a64261ed1d1774af61a1e36eeac604abcde", "patch": "@@ -6383,6 +6383,9 @@ template <typename ManagedTokenSource>\n AST::GenericArgs\n Parser<ManagedTokenSource>::parse_path_generic_args ()\n {\n+  if (lexer.peek_token ()->get_id () == LEFT_SHIFT)\n+    lexer.split_current_token (LEFT_ANGLE, LEFT_ANGLE);\n+\n   if (!skip_token (LEFT_ANGLE))\n     {\n       // skip after somewhere?\n@@ -6557,6 +6560,7 @@ Parser<ManagedTokenSource>::parse_type_path_segment ()\n   const_TokenPtr t = lexer.peek_token ();\n   switch (t->get_id ())\n     {\n+    case LEFT_SHIFT:\n       case LEFT_ANGLE: {\n \t// parse generic args\n \tAST::GenericArgs generic_args = parse_path_generic_args ();"}, {"sha": "6c3109957f90b1fc0456a9f541ce8981cd511f64", "filename": "gcc/testsuite/rust/compile/nested_generic.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b64a64261ed1d1774af61a1e36eeac604abcde/gcc%2Ftestsuite%2Frust%2Fcompile%2Fnested_generic.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b64a64261ed1d1774af61a1e36eeac604abcde/gcc%2Ftestsuite%2Frust%2Fcompile%2Fnested_generic.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fnested_generic.rs?ref=57b64a64261ed1d1774af61a1e36eeac604abcde", "patch": "@@ -0,0 +1,4 @@\n+pub struct A<T>(T);\n+pub struct B<T>(T);\n+\n+pub fn foo(_: A<B<i32>>) {}"}, {"sha": "dc05c068359bcdcd2bc006a6220118ef51e57567", "filename": "gcc/testsuite/rust/compile/parse_associated_type_as_generic_arg.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b64a64261ed1d1774af61a1e36eeac604abcde/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_associated_type_as_generic_arg.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b64a64261ed1d1774af61a1e36eeac604abcde/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_associated_type_as_generic_arg.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_associated_type_as_generic_arg.rs?ref=57b64a64261ed1d1774af61a1e36eeac604abcde", "patch": "@@ -0,0 +1,24 @@\n+// { dg-additional-options \"-fsyntax-only\" }\n+\n+trait Foo {\n+    type A;\n+\n+    fn foo();\n+}\n+\n+struct S;\n+\n+impl Foo for S {\n+    type A = i32;\n+\n+    fn foo() {}\n+}\n+\n+enum Maybe<T> {\n+    Something(T),\n+    Nothing,\n+}\n+\n+fn foo() -> Maybe<<S as Foo>::A> {\n+    Maybe::Something(15)\n+}"}, {"sha": "9c518a03ca75fbdb339a42bfbc323e95e440c3f3", "filename": "gcc/testsuite/rust/compile/parse_associated_type_as_generic_arg2.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b64a64261ed1d1774af61a1e36eeac604abcde/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_associated_type_as_generic_arg2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b64a64261ed1d1774af61a1e36eeac604abcde/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_associated_type_as_generic_arg2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_associated_type_as_generic_arg2.rs?ref=57b64a64261ed1d1774af61a1e36eeac604abcde", "patch": "@@ -0,0 +1,24 @@\n+// { dg-additional-options \"-fsyntax-only\" }\n+\n+trait Foo {\n+    type A;\n+\n+    fn foo();\n+}\n+\n+struct S;\n+\n+impl Foo for S {\n+    type A = ();\n+\n+    fn foo() {}\n+}\n+\n+enum Maybe<T> {\n+    Something(T),\n+    Nothing,\n+}\n+\n+fn main() {\n+    let a: Maybe<<S as Foo>::A> = Maybe::Something(());\n+}"}, {"sha": "35b3160e9a8576674df6bd1c4394e03b74db60c2", "filename": "gcc/testsuite/rust/compile/path_as_generic_arg.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b64a64261ed1d1774af61a1e36eeac604abcde/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpath_as_generic_arg.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b64a64261ed1d1774af61a1e36eeac604abcde/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpath_as_generic_arg.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpath_as_generic_arg.rs?ref=57b64a64261ed1d1774af61a1e36eeac604abcde", "patch": "@@ -0,0 +1,12 @@\n+pub enum Result<T, E> {\n+    Ok(T),\n+    Err(E),\n+}\n+\n+pub mod module {\n+    pub struct E;\n+}\n+\n+pub fn foo() -> Result<(), module::E> {\n+    Result::Err(module::E)\n+}"}]}