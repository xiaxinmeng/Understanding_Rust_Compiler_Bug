{"sha": "33cb682bcea5e450ea4c19f99dd07cda04e0ada7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNjYjY4MmJjZWE1ZTQ1MGVhNGMxOWY5OWRkMDdjZGEwNGUwYWRhNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-08-15T17:27:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-08-15T17:27:58Z"}, "message": "re PR bootstrap/62077 (--with-build-config=bootstrap-lto fails)\n\n\tPR bootstrap/62077\ngcc/\n\t* tree.c (type_hash_canon): Uncomment assert.\ngcc/cp/\n\t* tree.c (build_min_array_type, set_array_type_canon): Split out...\n\t(build_cplus_array_type): ...from here.  Only call build_array_type\n\tfor main variants.\n\nFrom-SVN: r214030", "tree": {"sha": "59c350f3d15c70fc24e3f87bcd324f5abe104d94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59c350f3d15c70fc24e3f87bcd324f5abe104d94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33cb682bcea5e450ea4c19f99dd07cda04e0ada7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33cb682bcea5e450ea4c19f99dd07cda04e0ada7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33cb682bcea5e450ea4c19f99dd07cda04e0ada7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33cb682bcea5e450ea4c19f99dd07cda04e0ada7/comments", "author": null, "committer": null, "parents": [{"sha": "9de8e7afa4cc23b93bbc91329d9864c0883e8640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9de8e7afa4cc23b93bbc91329d9864c0883e8640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9de8e7afa4cc23b93bbc91329d9864c0883e8640"}], "stats": {"total": 161, "additions": 92, "deletions": 69}, "files": [{"sha": "1222d30fa4d9ce36b8f40323119abbeeee56aaa9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cb682bcea5e450ea4c19f99dd07cda04e0ada7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cb682bcea5e450ea4c19f99dd07cda04e0ada7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33cb682bcea5e450ea4c19f99dd07cda04e0ada7", "patch": "@@ -1,3 +1,7 @@\n+2014-08-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.c (type_hash_canon): Uncomment assert.\n+\n 2014-08-15  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* input.h (in_system_header_at): Add comment."}, {"sha": "e57131f716edc1e984fac194da8fabfea32df6ff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cb682bcea5e450ea4c19f99dd07cda04e0ada7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cb682bcea5e450ea4c19f99dd07cda04e0ada7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=33cb682bcea5e450ea4c19f99dd07cda04e0ada7", "patch": "@@ -1,3 +1,11 @@\n+2014-08-15  Richard Biener  <rguenther@suse.de>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR bootstrap/62077\n+\t* tree.c (build_min_array_type, set_array_type_canon): Split out...\n+\t(build_cplus_array_type): ...from here.  Only call build_array_type\n+\tfor main variants.\n+\n 2014-08-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/62072"}, {"sha": "c9199f2c186a544a9a57667cd7d0d2cdecb9e96e", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 79, "deletions": 65, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cb682bcea5e450ea4c19f99dd07cda04e0ada7/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cb682bcea5e450ea4c19f99dd07cda04e0ada7/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=33cb682bcea5e450ea4c19f99dd07cda04e0ada7", "patch": "@@ -757,7 +757,40 @@ cplus_array_compare (const void * k1, const void * k2)\n    the language-independent type hash table.  */\n static GTY ((param_is (union tree_node))) htab_t cplus_array_htab;\n \n-/* Like build_array_type, but handle special C++ semantics.  */\n+/* Build an ARRAY_TYPE without laying it out.  */\n+\n+static tree\n+build_min_array_type (tree elt_type, tree index_type)\n+{\n+  tree t = cxx_make_type (ARRAY_TYPE);\n+  TREE_TYPE (t) = elt_type;\n+  TYPE_DOMAIN (t) = index_type;\n+  return t;\n+}\n+\n+/* Set TYPE_CANONICAL like build_array_type_1, but using\n+   build_cplus_array_type.  */\n+\n+static void\n+set_array_type_canon (tree t, tree elt_type, tree index_type)\n+{\n+  /* Set the canonical type for this new node.  */\n+  if (TYPE_STRUCTURAL_EQUALITY_P (elt_type)\n+      || (index_type && TYPE_STRUCTURAL_EQUALITY_P (index_type)))\n+    SET_TYPE_STRUCTURAL_EQUALITY (t);\n+  else if (TYPE_CANONICAL (elt_type) != elt_type\n+\t   || (index_type && TYPE_CANONICAL (index_type) != index_type))\n+    TYPE_CANONICAL (t)\n+      = build_cplus_array_type (TYPE_CANONICAL (elt_type),\n+\t\t\t\tindex_type\n+\t\t\t\t? TYPE_CANONICAL (index_type) : index_type);\n+  else\n+    TYPE_CANONICAL (t) = t;\n+}\n+\n+/* Like build_array_type, but handle special C++ semantics: an array of a\n+   variant element type is a variant of the array of the main variant of\n+   the element type.  */\n \n tree\n build_cplus_array_type (tree elt_type, tree index_type)\n@@ -767,10 +800,19 @@ build_cplus_array_type (tree elt_type, tree index_type)\n   if (elt_type == error_mark_node || index_type == error_mark_node)\n     return error_mark_node;\n \n-  if (processing_template_decl\n-      && (dependent_type_p (elt_type)\n-\t  || (index_type && !TREE_CONSTANT (TYPE_MAX_VALUE (index_type)))))\n+  bool dependent\n+    = (processing_template_decl\n+       && (dependent_type_p (elt_type)\n+\t   || (index_type && !TREE_CONSTANT (TYPE_MAX_VALUE (index_type)))));\n+\n+  if (elt_type != TYPE_MAIN_VARIANT (elt_type))\n+    /* Start with an array of the TYPE_MAIN_VARIANT.  */\n+    t = build_cplus_array_type (TYPE_MAIN_VARIANT (elt_type),\n+\t\t\t\tindex_type);\n+  else if (dependent)\n     {\n+      /* Since type_hash_canon calls layout_type, we need to use our own\n+\t hash table.  */\n       void **e;\n       cplus_array_info cai;\n       hashval_t hash;\n@@ -792,82 +834,33 @@ build_cplus_array_type (tree elt_type, tree index_type)\n       else\n \t{\n \t  /* Build a new array type.  */\n-\t  t = cxx_make_type (ARRAY_TYPE);\n-\t  TREE_TYPE (t) = elt_type;\n-\t  TYPE_DOMAIN (t) = index_type;\n+\t  t = build_min_array_type (elt_type, index_type);\n \n \t  /* Store it in the hash table. */\n \t  *e = t;\n \n \t  /* Set the canonical type for this new node.  */\n-\t  if (TYPE_STRUCTURAL_EQUALITY_P (elt_type)\n-\t      || (index_type && TYPE_STRUCTURAL_EQUALITY_P (index_type)))\n-\t    SET_TYPE_STRUCTURAL_EQUALITY (t);\n-\t  else if (TYPE_CANONICAL (elt_type) != elt_type\n-\t\t   || (index_type \n-\t\t       && TYPE_CANONICAL (index_type) != index_type))\n-\t    TYPE_CANONICAL (t)\n-\t\t= build_cplus_array_type \n-\t\t   (TYPE_CANONICAL (elt_type),\n-\t\t    index_type ? TYPE_CANONICAL (index_type) : index_type);\n-\t  else\n-\t    TYPE_CANONICAL (t) = t;\n+\t  set_array_type_canon (t, elt_type, index_type);\n \t}\n     }\n   else\n     {\n-      if (!TYPE_STRUCTURAL_EQUALITY_P (elt_type)\n-\t  && !(index_type && TYPE_STRUCTURAL_EQUALITY_P (index_type))\n-\t  && (TYPE_CANONICAL (elt_type) != elt_type\n-\t      || (index_type && TYPE_CANONICAL (index_type) != index_type)))\n-\t/* Make sure that the canonical type is on the appropriate\n-\t   variants list.  */\n-\tbuild_cplus_array_type\n-\t  (TYPE_CANONICAL (elt_type),\n-\t   index_type ? TYPE_CANONICAL (index_type) : index_type);\n       t = build_array_type (elt_type, index_type);\n     }\n \n-  /* Push these needs up so that initialization takes place\n-     more easily.  */\n-  bool needs_ctor\n-    = TYPE_NEEDS_CONSTRUCTING (TYPE_MAIN_VARIANT (elt_type));\n-  TYPE_NEEDS_CONSTRUCTING (t) = needs_ctor;\n-  bool needs_dtor\n-    = TYPE_HAS_NONTRIVIAL_DESTRUCTOR (TYPE_MAIN_VARIANT (elt_type));\n-  TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t) = needs_dtor;\n-\n-  /* We want TYPE_MAIN_VARIANT of an array to strip cv-quals from the\n-     element type as well, so fix it up if needed.  */\n+  /* Now check whether we already have this array variant.  */\n   if (elt_type != TYPE_MAIN_VARIANT (elt_type))\n     {\n-      tree m = build_cplus_array_type (TYPE_MAIN_VARIANT (elt_type),\n-\t\t\t\t       index_type);\n-\n-      if (TYPE_MAIN_VARIANT (t) != m)\n+      tree m = t;\n+      for (t = m; t; t = TYPE_NEXT_VARIANT (t))\n+\tif (TREE_TYPE (t) == elt_type)\n+\t  break;\n+      if (!t)\n \t{\n-\t  if (COMPLETE_TYPE_P (TREE_TYPE (t)) && !COMPLETE_TYPE_P (m))\n-\t    {\n-\t      /* m was built before the element type was complete, so we\n-\t\t also need to copy the layout info from t.  We might\n-\t         end up doing this multiple times if t is an array of\n-\t         unknown bound.  */\n-\t      tree size = TYPE_SIZE (t);\n-\t      tree size_unit = TYPE_SIZE_UNIT (t);\n-\t      unsigned int align = TYPE_ALIGN (t);\n-\t      unsigned int user_align = TYPE_USER_ALIGN (t);\n-\t      enum machine_mode mode = TYPE_MODE (t);\n-\t      for (tree var = m; var; var = TYPE_NEXT_VARIANT (var))\n-\t\t{\n-\t\t  TYPE_SIZE (var) = size;\n-\t\t  TYPE_SIZE_UNIT (var) = size_unit;\n-\t\t  TYPE_ALIGN (var) = align;\n-\t\t  TYPE_USER_ALIGN (var) = user_align;\n-\t\t  SET_TYPE_MODE (var, mode);\n-\t\t  TYPE_NEEDS_CONSTRUCTING (var) = needs_ctor;\n-\t\t  TYPE_HAS_NONTRIVIAL_DESTRUCTOR (var) = needs_dtor;\n-\t\t}\n-\t    }\n+\t  t = build_min_array_type (elt_type, index_type);\n+\t  set_array_type_canon (t, elt_type, index_type);\n+\t  if (!dependent)\n+\t    layout_type (t);\n \n \t  TYPE_MAIN_VARIANT (t) = m;\n \t  TYPE_NEXT_VARIANT (t) = TYPE_NEXT_VARIANT (m);\n@@ -879,6 +872,27 @@ build_cplus_array_type (tree elt_type, tree index_type)\n   if (TYPE_SIZE (t) && EXPR_P (TYPE_SIZE (t)))\n     TREE_NO_WARNING (TYPE_SIZE (t)) = 1;\n \n+  /* Push these needs up to the ARRAY_TYPE so that initialization takes\n+     place more easily.  */\n+  bool needs_ctor = (TYPE_NEEDS_CONSTRUCTING (t)\n+\t\t     = TYPE_NEEDS_CONSTRUCTING (elt_type));\n+  bool needs_dtor = (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t)\n+\t\t     = TYPE_HAS_NONTRIVIAL_DESTRUCTOR (elt_type));\n+\n+  if (!dependent && t == TYPE_MAIN_VARIANT (t)\n+      && !COMPLETE_TYPE_P (t) && COMPLETE_TYPE_P (elt_type))\n+    {\n+      /* The element type has been completed since the last time we saw\n+\t this array type; update the layout and 'tor flags for any variants\n+\t that need it.  */\n+      layout_type (t);\n+      for (tree v = TYPE_NEXT_VARIANT (t); v; v = TYPE_NEXT_VARIANT (v))\n+\t{\n+\t  TYPE_NEEDS_CONSTRUCTING (v) = needs_ctor;\n+\t  TYPE_HAS_NONTRIVIAL_DESTRUCTOR (v) = needs_dtor;\n+\t}\n+    }\n+\n   return t;\n }\n "}, {"sha": "2e4ce8d30bc9e9719578cf8be2dd6873d8173560", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cb682bcea5e450ea4c19f99dd07cda04e0ada7/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cb682bcea5e450ea4c19f99dd07cda04e0ada7/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=33cb682bcea5e450ea4c19f99dd07cda04e0ada7", "patch": "@@ -6793,10 +6793,7 @@ type_hash_canon (unsigned int hashcode, tree type)\n   if (*loc)\n     {\n       tree t1 = ((type_hash *) *loc)->type;\n-      /* ???  We'd like to assert here that the hashtable only contains\n-         main variants but the C++ frontend breaks this by modifying\n-\t types already in the hashtable in build_cplus_array_type.  */\n-      /* gcc_assert (TYPE_MAIN_VARIANT (t1) == t1); */\n+      gcc_assert (TYPE_MAIN_VARIANT (t1) == t1);\n       if (GATHER_STATISTICS)\n \t{\n \t  tree_code_counts[(int) TREE_CODE (type)]--;"}]}