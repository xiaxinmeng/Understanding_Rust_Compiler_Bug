{"sha": "7892ec670c1c5d1e4d911ab41903a6af72bc85d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg5MmVjNjcwYzFjNWQxZTRkOTExYWI0MTkwM2E2YWY3MmJjODVkMg==", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2015-09-03T11:24:34Z"}, "committer": {"name": "Sebastian Huber", "email": "sh@gcc.gnu.org", "date": "2015-09-03T11:24:34Z"}, "message": "[gomp] Simplify thread pool initialization\n\nlibgomp/ChangeLog\n\n\t* team.c (gomp_new_thread_pool): Delete and move content to ...\n\t(gomp_get_thread_pool): ... new function.  Allocate and\n\tinitialize thread pool on demand.\n\t(get_last_team): Use gomp_get_thread_pool().\n\t(gomp_team_start): Delete thread pool initialization.\n\nFrom-SVN: r227439", "tree": {"sha": "adcb0cc39a050326a9ae718cb38bbdbf969a0785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adcb0cc39a050326a9ae718cb38bbdbf969a0785"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7892ec670c1c5d1e4d911ab41903a6af72bc85d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7892ec670c1c5d1e4d911ab41903a6af72bc85d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7892ec670c1c5d1e4d911ab41903a6af72bc85d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7892ec670c1c5d1e4d911ab41903a6af72bc85d2/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17720e84bfd8df2224886b087cccf236e237d5bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17720e84bfd8df2224886b087cccf236e237d5bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17720e84bfd8df2224886b087cccf236e237d5bc"}], "stats": {"total": 64, "additions": 35, "deletions": 29}, "files": [{"sha": "319795c41ba62bcefabe826f259efc8e0ccdc918", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7892ec670c1c5d1e4d911ab41903a6af72bc85d2/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7892ec670c1c5d1e4d911ab41903a6af72bc85d2/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=7892ec670c1c5d1e4d911ab41903a6af72bc85d2", "patch": "@@ -1,3 +1,11 @@\n+2015-09-03  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* team.c (gomp_new_thread_pool): Delete and move content to ...\n+\t(gomp_get_thread_pool): ... new function.  Allocate and\n+\tinitialize thread pool on demand.\n+\t(get_last_team): Use gomp_get_thread_pool().\n+\t(gomp_team_start): Delete thread pool initialization.\n+\n 2015-09-03  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/65637"}, {"sha": "e1c4d60270e0e70a83bfb7a695ecbdac483ae351", "filename": "libgomp/team.c", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7892ec670c1c5d1e4d911ab41903a6af72bc85d2/libgomp%2Fteam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7892ec670c1c5d1e4d911ab41903a6af72bc85d2/libgomp%2Fteam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fteam.c?ref=7892ec670c1c5d1e4d911ab41903a6af72bc85d2", "patch": "@@ -134,22 +134,39 @@ gomp_thread_start (void *xdata)\n   return NULL;\n }\n \n+/* Get the thread pool, allocate and initialize it on demand.  */\n+\n+static inline struct gomp_thread_pool *\n+gomp_get_thread_pool (struct gomp_thread *thr, unsigned nthreads)\n+{\n+  struct gomp_thread_pool *pool = thr->thread_pool;\n+  if (__builtin_expect (pool == NULL, 0))\n+    {\n+      pool = gomp_malloc (sizeof (*pool));\n+      pool->threads = NULL;\n+      pool->threads_size = 0;\n+      pool->threads_used = 0;\n+      pool->last_team = NULL;\n+      pool->threads_busy = nthreads;\n+      thr->thread_pool = pool;\n+      pthread_setspecific (gomp_thread_destructor, thr);\n+    }\n+  return pool;\n+}\n+\n static inline struct gomp_team *\n get_last_team (unsigned nthreads)\n {\n   struct gomp_thread *thr = gomp_thread ();\n   if (thr->ts.team == NULL)\n     {\n-      struct gomp_thread_pool *pool = thr->thread_pool;\n-      if (pool != NULL)\n-\t{\n-\t  struct gomp_team *last_team = pool->last_team;\n-\t  if (last_team != NULL && last_team->nthreads == nthreads)\n-\t    {\n-\t      pool->last_team = NULL;\n-\t      return last_team;\n-\t    }\n-\t}\n+      struct gomp_thread_pool *pool = gomp_get_thread_pool (thr, nthreads);\n+      struct gomp_team *last_team = pool->last_team;\n+      if (last_team != NULL && last_team->nthreads == nthreads)\n+        {\n+          pool->last_team = NULL;\n+          return last_team;\n+        }\n     }\n   return NULL;\n }\n@@ -219,19 +236,6 @@ free_team (struct gomp_team *team)\n   free (team);\n }\n \n-/* Allocate and initialize a thread pool. */\n-\n-static struct gomp_thread_pool *gomp_new_thread_pool (void)\n-{\n-  struct gomp_thread_pool *pool\n-    = gomp_malloc (sizeof(struct gomp_thread_pool));\n-  pool->threads = NULL;\n-  pool->threads_size = 0;\n-  pool->threads_used = 0;\n-  pool->last_team = NULL;\n-  return pool;\n-}\n-\n static void\n gomp_free_pool_helper (void *thread_pool)\n {\n@@ -316,12 +320,6 @@ gomp_team_start (void (*fn) (void *), void *data, unsigned nthreads,\n \n   thr = gomp_thread ();\n   nested = thr->ts.team != NULL;\n-  if (__builtin_expect (thr->thread_pool == NULL, 0))\n-    {\n-      thr->thread_pool = gomp_new_thread_pool ();\n-      thr->thread_pool->threads_busy = nthreads;\n-      pthread_setspecific (gomp_thread_destructor, thr);\n-    }\n   pool = thr->thread_pool;\n   task = thr->task;\n   icv = task ? &task->icv : &gomp_global_icv;"}]}