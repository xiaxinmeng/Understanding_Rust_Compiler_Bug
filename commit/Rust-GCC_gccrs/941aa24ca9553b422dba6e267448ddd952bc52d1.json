{"sha": "941aa24ca9553b422dba6e267448ddd952bc52d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQxYWEyNGNhOTU1M2I0MjJkYmE2ZTI2NzQ0OGRkZDk1MmJjNTJkMQ==", "commit": {"author": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2021-06-08T14:10:23Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2021-06-08T14:13:41Z"}, "message": "Further improve redundant test/compare removal on the H8\n\ngcc/\n\t* config/h8300/logical.md (andqi3_1): Move BCLR case into define_insn_and_split.\n\tCreate length attribute on define_insn_and_split.  Only split for cases which we\n\tknow will use AND.\n\t(andqi3_1<cczn>): Renamed from andqi3_1_clobber_flags.  Only handle AND here and\n\tfix length computation.\n\t(b<code><mode>msx): Combine QImode and HImode H8/SX patterns using iterator.", "tree": {"sha": "d94901dc7f58cf4ce4f1533b9f0cf687056eccc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d94901dc7f58cf4ce4f1533b9f0cf687056eccc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/941aa24ca9553b422dba6e267448ddd952bc52d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/941aa24ca9553b422dba6e267448ddd952bc52d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/941aa24ca9553b422dba6e267448ddd952bc52d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/941aa24ca9553b422dba6e267448ddd952bc52d1/comments", "author": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d319517e809ee50496db29e552f86a83a14c837c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d319517e809ee50496db29e552f86a83a14c837c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d319517e809ee50496db29e552f86a83a14c837c"}], "stats": {"total": 41, "additions": 16, "deletions": 25}, "files": [{"sha": "fae3c7cd0c5716eb906802a7a349dcbc3cd712e2", "filename": "gcc/config/h8300/logical.md", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941aa24ca9553b422dba6e267448ddd952bc52d1/gcc%2Fconfig%2Fh8300%2Flogical.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941aa24ca9553b422dba6e267448ddd952bc52d1/gcc%2Fconfig%2Fh8300%2Flogical.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Flogical.md?ref=941aa24ca9553b422dba6e267448ddd952bc52d1", "patch": "@@ -62,22 +62,21 @@\n \t\t(match_operand:QI 2 \"h8300_src_operand\" \"Y0,rn\")))]\n   \"register_operand (operands[0], QImode)\n    || single_zero_operand (operands[2], QImode)\"\n-  \"#\"\n-  \"&& reload_completed\"\n+  \"bclr %W2,%R0\"\n+  \"&& reload_completed && !single_zero_operand (operands[2], QImode)\"\n   [(parallel [(set (match_dup 0) (and:QI (match_dup 1) (match_dup 2)))\n-\t      (clobber (reg:CC CC_REG))])])\n+\t      (clobber (reg:CC CC_REG))])]\n+  \"\"\n+  [(set_attr \"length\" \"8,2\")])\n \n-(define_insn \"andqi3_1_clobber_flags\"\n-  [(set (match_operand:QI 0 \"bit_operand\" \"=U,r\")\n-\t(and:QI (match_operand:QI 1 \"bit_operand\" \"%0,0\")\n-\t\t(match_operand:QI 2 \"h8300_src_operand\" \"Y0,rn\")))\n+(define_insn \"*andqi3_1<cczn>\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n+\t(and:QI (match_operand:QI 1 \"register_operand\" \"%0\")\n+\t\t(match_operand:QI 2 \"h8300_src_operand\" \"rn\")))\n    (clobber (reg:CC CC_REG))]\n-  \"register_operand (operands[0], QImode)\n-   || single_zero_operand (operands[2], QImode)\"\n-  \"@\n-   bclr %W2,%R0\n-   and  %X2,%X0\"\n-  [(set_attr \"length\" \"2,8\")])\n+  \"\"\n+  \"and  %X2,%X0\"\n+  [(set_attr \"length\" \"2\")])\n \n (define_insn_and_split \"*andor<mode>3\"\n   [(set (match_operand:QHSI 0 \"register_operand\" \"=r\")\n@@ -166,22 +165,14 @@\n ;; OR/XOR INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n \n-(define_insn \"b<code>qi_msx\"\n-  [(set (match_operand:QI 0 \"bit_register_indirect_operand\" \"=WU\")\n-\t(ors:QI (match_operand:QI 1 \"bit_register_indirect_operand\" \"%0\")\n-\t\t(match_operand:QI 2 \"single_one_operand\" \"Y2\")))]\n+(define_insn \"b<code><mode>_msx\"\n+  [(set (match_operand:QHI 0 \"bit_register_indirect_operand\" \"=WU\")\n+\t(ors:QHI (match_operand:QHI 1 \"bit_register_indirect_operand\" \"%0\")\n+\t\t (match_operand:QHI 2 \"single_one_operand\" \"Y2\")))]\n   \"TARGET_H8300SX && rtx_equal_p (operands[0], operands[1])\"\n   { return <CODE> == IOR ? \"bset\\\\t%V2,%0\" : \"bnot\\\\t%V2,%0\"; }\n   [(set_attr \"length\" \"8\")])\n \n-(define_insn \"b<code>hi_msx\"\n-  [(set (match_operand:HI 0 \"bit_register_indirect_operand\" \"=m\")\n-\t(ors:HI (match_operand:HI 1 \"bit_register_indirect_operand\" \"%0\")\n-\t\t(match_operand:HI 2 \"single_one_operand\" \"Y2\")))]\n-  \"TARGET_H8300SX\"\n-  { return <CODE> == IOR ? \"bset\\\\t%V2,%0\" : \"bnot\\\\t%V2,%0\"; }\n-  [(set_attr \"length\" \"8\")])\n-\n (define_insn_and_split \"<code>qi3_1\"\n   [(set (match_operand:QI 0 \"bit_operand\" \"=U,rQ\")\n \t(ors:QI (match_operand:QI 1 \"bit_operand\" \"%0,0\")"}]}