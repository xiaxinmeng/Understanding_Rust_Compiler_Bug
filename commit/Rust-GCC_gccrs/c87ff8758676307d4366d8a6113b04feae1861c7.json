{"sha": "c87ff8758676307d4366d8a6113b04feae1861c7", "node_id": "C_kwDOANBUbNoAKGM4N2ZmODc1ODY3NjMwN2Q0MzY2ZDhhNjExM2IwNGZlYWUxODYxYzc", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-12-11T19:37:18Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-12-11T19:37:18Z"}, "message": "Fix handling of thunks in ipa-modref\n\nThunks are not transparent for ipa-modref summary since it cares about offsets\nfrom pointer parameters and also for virtual thunk about the read from memory\nin there.  We however use function_or_virtual_thunk_symbol to get the summary\nthat may lead to wrong code (and does in two testsuite testcases with patch\nI am working on).  This is a first aid fix that is bacportable to gcc 11.\nWe could easily produce summary for thunk on demand.  I will look into it\nincrementally.  It is not very important since we usually inline the thunk when\nwe devirutalize...\n\nBootstrapped/regtested x86_64-linux, will commit it shortly.\n\ngcc/ChangeLog:\n\n2021-12-11  Jan Hubicka  <hubicka@ucw.cz>\n\n\t* ipa-modref.c (get_modref_function_summary): Use ultimate_alias_target.\n\t(ignore_edge): Likewise.\n\t(compute_parm_map): Likewise.\n\t(modref_propagate_in_scc): Likewise.\n\t(modref_propagate_flags_in_scc): Likewise.", "tree": {"sha": "1d8b2b21362da184161ac50670e3ccc9ec19fe84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d8b2b21362da184161ac50670e3ccc9ec19fe84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c87ff8758676307d4366d8a6113b04feae1861c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c87ff8758676307d4366d8a6113b04feae1861c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c87ff8758676307d4366d8a6113b04feae1861c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c87ff8758676307d4366d8a6113b04feae1861c7/comments", "author": null, "committer": null, "parents": [{"sha": "365c7c6ac5400d88816e602f7f9aa12268ba53e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/365c7c6ac5400d88816e602f7f9aa12268ba53e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/365c7c6ac5400d88816e602f7f9aa12268ba53e3"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "55fa873e1f0507cae2855dccc04cfcb1e5831a5d", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c87ff8758676307d4366d8a6113b04feae1861c7/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c87ff8758676307d4366d8a6113b04feae1861c7/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=c87ff8758676307d4366d8a6113b04feae1861c7", "patch": "@@ -754,7 +754,7 @@ get_modref_function_summary (cgraph_node *func)\n      we don't want to return anything, even if we have summary for the target\n      function.  */\n   enum availability avail;\n-  func = func->function_or_virtual_thunk_symbol\n+  func = func->ultimate_alias_target\n \t\t (&avail, current_function_decl ?\n \t\t\t  cgraph_node::get (current_function_decl) : NULL);\n   if (avail <= AVAIL_INTERPOSABLE)\n@@ -4065,7 +4065,7 @@ ignore_edge (struct cgraph_edge *e)\n   if (!e->inline_failed)\n     return false;\n   enum availability avail;\n-  cgraph_node *callee = e->callee->function_or_virtual_thunk_symbol\n+  cgraph_node *callee = e->callee->ultimate_alias_target\n \t\t\t  (&avail, e->caller);\n \n   return (avail <= AVAIL_INTERPOSABLE\n@@ -4088,7 +4088,7 @@ compute_parm_map (cgraph_edge *callee_edge, vec<modref_parm_map> *parm_map)\n       class ipa_call_summary *es\n \t     = ipa_call_summaries->get (callee_edge);\n       cgraph_node *callee\n-\t = callee_edge->callee->function_or_virtual_thunk_symbol\n+\t = callee_edge->callee->ultimate_alias_target\n \t\t\t      (NULL, callee_edge->caller);\n \n       caller_parms_info\n@@ -4578,7 +4578,7 @@ modref_propagate_in_scc (cgraph_node *component_node)\n \n \t      /* Get the callee and its summary.  */\n \t      enum availability avail;\n-\t      callee = callee_edge->callee->function_or_virtual_thunk_symbol\n+\t      callee = callee_edge->callee->ultimate_alias_target\n \t\t\t (&avail, cur);\n \n \t      /* It is not necessary to re-process calls outside of the\n@@ -5021,7 +5021,7 @@ modref_propagate_flags_in_scc (cgraph_node *component_node)\n \n \t      /* Get the callee and its summary.  */\n \t      enum availability avail;\n-\t      callee = callee_edge->callee->function_or_virtual_thunk_symbol\n+\t      callee = callee_edge->callee->ultimate_alias_target\n \t\t\t (&avail, cur);\n \n \t      /* It is not necessary to re-process calls outside of the"}]}