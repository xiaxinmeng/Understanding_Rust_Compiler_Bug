{"sha": "20ac1e0392c91bf7c5ba645b58622a7641675a8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBhYzFlMDM5MmM5MWJmN2M1YmE2NDViNTg2MjJhNzY0MTY3NWE4ZA==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2005-07-21T03:53:07Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2005-07-21T03:53:07Z"}, "message": "re PR c++/2922 ([DR 197] two-stage lookup for unqualified function calls with type-dependent arguments)\n\n2005-07-20  Douglas Gregor <doug.gregor@gmail.com>\n\n\tPR c++/2922\n\t* semantics.c (perform_koenig_lookup): For dependent calls, just\n\treturn the set of functions we've found so far. Later, it will be\n\taugmented by those found through argument-dependent lookup.\n\t* name-lookup.c (lookup_arg_dependent):\n\nFrom-SVN: r102216", "tree": {"sha": "1a32f2e8bbd3f58c84bb5f88d1f78504ccb921b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a32f2e8bbd3f58c84bb5f88d1f78504ccb921b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20ac1e0392c91bf7c5ba645b58622a7641675a8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20ac1e0392c91bf7c5ba645b58622a7641675a8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20ac1e0392c91bf7c5ba645b58622a7641675a8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20ac1e0392c91bf7c5ba645b58622a7641675a8d/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2acaf06aa1e13ecc83201ecc903a1f28c91b163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2acaf06aa1e13ecc83201ecc903a1f28c91b163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2acaf06aa1e13ecc83201ecc903a1f28c91b163"}], "stats": {"total": 38, "additions": 14, "deletions": 24}, "files": [{"sha": "2ef53f2946ac9457832af737a747dbc90b84d3bd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20ac1e0392c91bf7c5ba645b58622a7641675a8d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20ac1e0392c91bf7c5ba645b58622a7641675a8d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=20ac1e0392c91bf7c5ba645b58622a7641675a8d", "patch": "@@ -1,3 +1,11 @@\n+2005-07-20  Douglas Gregor <doug.gregor@gmail.com>\n+\n+\tPR c++/2922\n+\t* semantics.c (perform_koenig_lookup): For dependent calls, just\n+\treturn the set of functions we've found so far. Later, it will be\n+\taugmented by those found through argument-dependent lookup.\n+\t* name-lookup.c (lookup_arg_dependent): \n+\n 2005-07-20  Giovanni Bajo  <giovannibajo@libero.it>\n \n \tMake CONSTRUCTOR use VEC to store initializers."}, {"sha": "d196606da04baccb1b769c88ac3d3ef823f1d60f", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20ac1e0392c91bf7c5ba645b58622a7641675a8d/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20ac1e0392c91bf7c5ba645b58622a7641675a8d/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=20ac1e0392c91bf7c5ba645b58622a7641675a8d", "patch": "@@ -4497,34 +4497,18 @@ tree\n lookup_arg_dependent (tree name, tree fns, tree args)\n {\n   struct arg_lookup k;\n-  tree fn = NULL_TREE;\n \n   timevar_push (TV_NAME_LOOKUP);\n   k.name = name;\n   k.functions = fns;\n   k.classes = NULL_TREE;\n \n-  /* We've already looked at some namespaces during normal unqualified\n-     lookup -- but we don't know exactly which ones.  If the functions\n-     we found were brought into the current namespace via a using\n-     declaration, we have not really checked the namespace from which\n-     they came.  Therefore, we check all namespaces here -- unless the\n-     function we have is from the current namespace.  Even then, we\n-     must check all namespaces if the function is a local\n-     declaration; any other declarations present at namespace scope\n-     should be visible during argument-dependent lookup.  */\n-  if (fns)\n-    fn = OVL_CURRENT (fns);\n-  if (fn && TREE_CODE (fn) == FUNCTION_DECL\n-      && (CP_DECL_CONTEXT (fn) != current_decl_namespace ()\n-\t  || DECL_LOCAL_FUNCTION_P (fn)))\n-    k.namespaces = NULL_TREE;\n-  else\n-    /* Setting NAMESPACES is purely an optimization; it prevents\n-       adding functions which are already in FNS.  Adding them would\n-       be safe -- \"joust\" will eliminate the duplicates -- but\n-       wasteful.  */\n-    k.namespaces = build_tree_list (current_decl_namespace (), NULL_TREE);\n+  /* We previously performed an optimization here by setting\n+     NAMESPACES to the current namespace when it was safe. However, DR\n+     164 says that namespaces that were already searched in the first\n+     stage of template processing are searched again (potentially\n+     picking up later definitions) in the second stage. */\n+  k.namespaces = NULL_TREE;\n \n   arg_assoc_args (&k, args);\n   POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, k.functions);"}, {"sha": "b2a28e2b846a069ff86b3ccb968c7ee36ed757d0", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20ac1e0392c91bf7c5ba645b58622a7641675a8d/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20ac1e0392c91bf7c5ba645b58622a7641675a8d/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=20ac1e0392c91bf7c5ba645b58622a7641675a8d", "patch": "@@ -1738,8 +1738,6 @@ perform_koenig_lookup (tree fn, tree args)\n \t/* The unqualified name could not be resolved.  */\n \tfn = unqualified_fn_lookup_error (identifier);\n     }\n-  else\n-    fn = identifier;\n \n   return fn;\n }"}]}