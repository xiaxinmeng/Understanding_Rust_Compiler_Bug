{"sha": "e37135f7010aea36f9422bfb9e2ba38b04d0e8e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM3MTM1ZjcwMTBhZWEzNmY5NDIyYmZiOWUyYmEzOGIwNGQwZThlNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-01-28T21:29:40Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-01-28T21:29:40Z"}, "message": "* cse.c (find_best_addr): Kill !ADDRESS_COST code.\n\nFrom-SVN: r62008", "tree": {"sha": "bdbb4986ff84247e9b2f94305ae5bb79826c5bee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdbb4986ff84247e9b2f94305ae5bb79826c5bee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e37135f7010aea36f9422bfb9e2ba38b04d0e8e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37135f7010aea36f9422bfb9e2ba38b04d0e8e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e37135f7010aea36f9422bfb9e2ba38b04d0e8e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37135f7010aea36f9422bfb9e2ba38b04d0e8e7/comments", "author": null, "committer": null, "parents": [{"sha": "4334c467a104d806de482e3e3b3058dc9de91540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4334c467a104d806de482e3e3b3058dc9de91540", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4334c467a104d806de482e3e3b3058dc9de91540"}], "stats": {"total": 38, "additions": 11, "deletions": 27}, "files": [{"sha": "474d5af15732b33159aa7f7cb32359a24404806d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37135f7010aea36f9422bfb9e2ba38b04d0e8e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37135f7010aea36f9422bfb9e2ba38b04d0e8e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e37135f7010aea36f9422bfb9e2ba38b04d0e8e7", "patch": "@@ -1,4 +1,8 @@\n- 2003-01-23  Mike Stump  <mrs@apple.com>\n+2003-01-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* cse.c (find_best_addr): Kill !ADDRESS_COST code.\n+\n+2003-01-23  Mike Stump  <mrs@apple.com>\n \n \t* regclass.c (init_reg_autoinc): New function.\n \t(regclass): Move initialization of forbidden_inc_dec_class from"}, {"sha": "d9e9fadaf6700f2eaf42af16eca6fc23b1e7d4c2", "filename": "gcc/cse.c", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37135f7010aea36f9422bfb9e2ba38b04d0e8e7/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37135f7010aea36f9422bfb9e2ba38b04d0e8e7/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=e37135f7010aea36f9422bfb9e2ba38b04d0e8e7", "patch": "@@ -2870,13 +2870,12 @@ canon_reg (x, insn)\n    is a good approximation for that cost.  However, most RISC machines have\n    only a few (usually only one) memory reference formats.  If an address is\n    valid at all, it is often just as cheap as any other address.  Hence, for\n-   RISC machines, we use the configuration macro `ADDRESS_COST' to compare the\n-   costs of various addresses.  For two addresses of equal cost, choose the one\n-   with the highest `rtx_cost' value as that has the potential of eliminating\n-   the most insns.  For equal costs, we choose the first in the equivalence\n-   class.  Note that we ignore the fact that pseudo registers are cheaper\n-   than hard registers here because we would also prefer the pseudo registers.\n-  */\n+   RISC machines, we use `address_cost' to compare the costs of various\n+   addresses.  For two addresses of equal cost, choose the one with the\n+   highest `rtx_cost' value as that has the potential of eliminating the\n+   most insns.  For equal costs, we choose the first in the equivalence\n+   class.  Note that we ignore the fact that pseudo registers are cheaper than\n+   hard registers here because we would also prefer the pseudo registers.  */\n \n static void\n find_best_addr (insn, loc, mode)\n@@ -2886,10 +2885,8 @@ find_best_addr (insn, loc, mode)\n {\n   struct table_elt *elt;\n   rtx addr = *loc;\n-#ifdef ADDRESS_COST\n   struct table_elt *p;\n   int found_better = 1;\n-#endif\n   int save_do_not_record = do_not_record;\n   int save_hash_arg_in_memory = hash_arg_in_memory;\n   int addr_volatile;\n@@ -2953,22 +2950,6 @@ find_best_addr (insn, loc, mode)\n \n   elt = lookup (addr, hash, Pmode);\n \n-#ifndef ADDRESS_COST\n-  if (elt)\n-    {\n-      int our_cost = elt->cost;\n-\n-      /* Find the lowest cost below ours that works.  */\n-      for (elt = elt->first_same_value; elt; elt = elt->next_same_value)\n-\tif (elt->cost < our_cost\n-\t    && (GET_CODE (elt->exp) == REG\n-\t\t|| exp_equiv_p (elt->exp, elt->exp, 1, 0))\n-\t    && validate_change (insn, loc,\n-\t\t\t\tcanon_reg (copy_rtx (elt->exp), NULL_RTX), 0))\n-\t  return;\n-    }\n-#else\n-\n   if (elt)\n     {\n       /* We need to find the best (under the criteria documented above) entry\n@@ -3099,7 +3080,6 @@ find_best_addr (insn, loc, mode)\n \t    }\n \t}\n     }\n-#endif\n }\n \f\n /* Given an operation (CODE, *PARG1, *PARG2), where code is a comparison"}]}