{"sha": "72d1f255ae34d00e29189d58eda27250f8a9ff0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJkMWYyNTVhZTM0ZDAwZTI5MTg5ZDU4ZWRhMjcyNTBmOGE5ZmYwZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-03-21T18:54:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-03-21T18:54:06Z"}, "message": "re PR libstdc++/60587 (debug-mode -std=c++11 vector::insert(pos, begin, end) dereferences begin too eagerly)\n\n\tPR libstdc++/60587\n\t* include/debug/functions.h (_Is_contiguous_sequence): Define.\n\t(__foreign_iterator): Accept additional iterator. Do not dispatch on\n\titerator category.\n\t(__foreign_iterator_aux2): Likewise. Add overload for iterators\n\tfrom different types of debug container. Use _Is_contiguous_sequence\n\tinstead of is_lvalue_reference.\n\t(__foreign_iterator_aux3): Accept additional iterator. Avoid\n\tdereferencing past-the-end iterator.\n\t(__foreign_iterator_aux4): Use const value_type* instead of\n\tpotentially user-defined const_pointer type.\n\t* include/debug/macros.h (__glibcxx_check_insert_range): Fix comment\n\tand pass end iterator to __gnu_debug::__foreign_iterator.\n\t(__glibcxx_check_insert_range_after): Likewise.\n\t(__glibcxx_check_max_load_factor): Fix comment.\n\t* include/debug/vector (_Is_contiguous_sequence): Define partial\n\tspecializations.\n\t* testsuite/23_containers/vector/debug/57779_neg.cc: Remove\n\t-std=gnu++11 option and unused header.\n\t* testsuite/23_containers/vector/debug/60587.cc: New.\n\t* testsuite/23_containers/vector/debug/60587_neg.cc: New.\n\nFrom-SVN: r208755", "tree": {"sha": "4f7628858105e6cecedd5d7a5be9c8a910ee8da7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f7628858105e6cecedd5d7a5be9c8a910ee8da7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72d1f255ae34d00e29189d58eda27250f8a9ff0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72d1f255ae34d00e29189d58eda27250f8a9ff0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72d1f255ae34d00e29189d58eda27250f8a9ff0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72d1f255ae34d00e29189d58eda27250f8a9ff0e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "084721e0122aadd61c87c44119d65d745d3194e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084721e0122aadd61c87c44119d65d745d3194e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/084721e0122aadd61c87c44119d65d745d3194e9"}], "stats": {"total": 261, "additions": 175, "deletions": 86}, "files": [{"sha": "23888c074097def66d4df3e3fce524bf957fc881", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d1f255ae34d00e29189d58eda27250f8a9ff0e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d1f255ae34d00e29189d58eda27250f8a9ff0e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=72d1f255ae34d00e29189d58eda27250f8a9ff0e", "patch": "@@ -1,3 +1,27 @@\n+2014-03-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/60587\n+\t* include/debug/functions.h (_Is_contiguous_sequence): Define.\n+\t(__foreign_iterator): Accept additional iterator. Do not dispatch on\n+\titerator category.\n+\t(__foreign_iterator_aux2): Likewise. Add overload for iterators\n+\tfrom different types of debug container. Use _Is_contiguous_sequence\n+\tinstead of is_lvalue_reference.\n+\t(__foreign_iterator_aux3): Accept additional iterator. Avoid\n+\tdereferencing past-the-end iterator.\n+\t(__foreign_iterator_aux4): Use const value_type* instead of\n+\tpotentially user-defined const_pointer type.\n+\t* include/debug/macros.h (__glibcxx_check_insert_range): Fix comment\n+\tand pass end iterator to __gnu_debug::__foreign_iterator.\n+\t(__glibcxx_check_insert_range_after): Likewise.\n+\t(__glibcxx_check_max_load_factor): Fix comment.\n+\t* include/debug/vector (_Is_contiguous_sequence): Define partial\n+\tspecializations.\n+\t* testsuite/23_containers/vector/debug/57779_neg.cc: Remove\n+\t-std=gnu++11 option and unused header.\n+\t* testsuite/23_containers/vector/debug/60587.cc: New.\n+\t* testsuite/23_containers/vector/debug/60587_neg.cc: New.\n+\n 2014-03-20  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* crossconfig.m4: Support spu-*-elf* targets."}, {"sha": "b48c36d4a1e5d7f5b1dec6cac0dedd09b9b45e8a", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 63, "deletions": 71, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d1f255ae34d00e29189d58eda27250f8a9ff0e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d1f255ae34d00e29189d58eda27250f8a9ff0e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=72d1f255ae34d00e29189d58eda27250f8a9ff0e", "patch": "@@ -34,8 +34,8 @@\n \t\t\t\t\t  // _Iter_base\n #include <bits/cpp_type_traits.h>\t  // for __is_integer\n #include <bits/move.h>                    // for __addressof and addressof\n+# include <bits/stl_function.h>\t\t  // for less\n #if __cplusplus >= 201103L\n-# include <bits/stl_function.h>\t\t  // for less and greater_equal\n # include <type_traits>\t\t\t  // for is_lvalue_reference and __and_\n #endif\n #include <debug/formatter.h>\n@@ -52,6 +52,9 @@ namespace __gnu_debug\n     struct _Insert_range_from_self_is_safe\n     { enum { __value = 0 }; };\n \n+  template<typename _Sequence>\n+    struct _Is_contiguous_sequence : std::__false_type { };\n+\n   // An arbitrary iterator pointer is not singular.\n   inline bool\n   __check_singular_aux(const void*) { return false; }\n@@ -175,123 +178,112 @@ namespace __gnu_debug\n       return __first;\n     }\n \n-#if __cplusplus >= 201103L\n-  // Default implementation.\n+  /* Handle the case where __other is a pointer to _Sequence::value_type. */\n   template<typename _Iterator, typename _Sequence>\n     inline bool\n     __foreign_iterator_aux4(const _Safe_iterator<_Iterator, _Sequence>& __it,\n-\t\t\t    typename _Sequence::const_pointer __begin,\n-\t\t\t    typename _Sequence::const_pointer __other)\n+\t\t\t    const typename _Sequence::value_type* __other)\n     {\n-      typedef typename _Sequence::const_pointer _PointerType;\n-      constexpr std::less<_PointerType> __l{};\n+      typedef const typename _Sequence::value_type* _PointerType;\n+      typedef std::less<_PointerType> _Less;\n+#if __cplusplus >= 201103L\n+      constexpr _Less __l{};\n+#else\n+      const _Less __l = _Less();\n+#endif\n+      const _Sequence* __seq = __it._M_get_sequence();\n+      const _PointerType __begin = std::__addressof(*__seq->_M_base().begin());\n+      const _PointerType __end = std::__addressof(*(__seq->_M_base().end()-1));\n \n-      return (__l(__other, __begin)\n-\t      || __l(std::addressof(*(__it._M_get_sequence()->_M_base().end()\n-\t\t\t\t      - 1)), __other));\n+      // Check whether __other points within the contiguous storage.\n+      return __l(__other, __begin) || __l(__end, __other);\n     }\n \n-  // Fallback when address type cannot be implicitely casted to sequence\n-  // const_pointer.\n-  template<typename _Iterator, typename _Sequence,\n-\t   typename _InputIterator>\n+  /* Fallback overload for when we can't tell, assume it is valid. */\n+  template<typename _Iterator, typename _Sequence>\n     inline bool\n-    __foreign_iterator_aux4(const _Safe_iterator<_Iterator, _Sequence>&,\n-\t\t\t    _InputIterator, ...)\n+    __foreign_iterator_aux4(const _Safe_iterator<_Iterator, _Sequence>&, ...)\n     { return true; }\n \n+  /* Handle sequences with contiguous storage */\n   template<typename _Iterator, typename _Sequence, typename _InputIterator>\n     inline bool\n     __foreign_iterator_aux3(const _Safe_iterator<_Iterator, _Sequence>& __it,\n-\t\t\t    _InputIterator __other,\n-\t\t\t    std::true_type)\n+\t\t\t    const _InputIterator& __other,\n+\t\t\t    const _InputIterator& __other_end,\n+\t\t\t    std::__true_type)\n     {\n-      // Only containers with all elements in contiguous memory can have their\n-      // elements passed through pointers.\n-      // Arithmetics is here just to make sure we are not dereferencing\n-      // past-the-end iterator.\n-      if (__it._M_get_sequence()->_M_base().begin()\n-\t  != __it._M_get_sequence()->_M_base().end())\n-\tif (std::addressof(*(__it._M_get_sequence()->_M_base().end() - 1))\n-\t    - std::addressof(*(__it._M_get_sequence()->_M_base().begin()))\n-\t    == __it._M_get_sequence()->size() - 1)\n-\t  return (__foreign_iterator_aux4\n-\t\t  (__it,\n-\t\t   std::addressof(*(__it._M_get_sequence()->_M_base().begin())),\n-\t\t   std::addressof(*__other)));\n-      return true;\n+      if (__other == __other_end)\n+\treturn true;  // inserting nothing is safe even if not foreign iters\n+      if (__it._M_get_sequence()->begin() == __it._M_get_sequence()->end())\n+\treturn true;  // can't be self-inserting if self is empty\n+      return __foreign_iterator_aux4(__it, std::__addressof(*__other));\n     }\n-\t\t\t   \n-  /* Fallback overload for which we can't say, assume it is valid. */\n+\n+  /* Handle non-contiguous containers, assume it is valid. */\n   template<typename _Iterator, typename _Sequence, typename _InputIterator>\n     inline bool\n-    __foreign_iterator_aux3(const _Safe_iterator<_Iterator, _Sequence>& __it,\n-\t\t\t    _InputIterator __other,\n-\t\t\t    std::false_type)\n+    __foreign_iterator_aux3(const _Safe_iterator<_Iterator, _Sequence>&,\n+\t\t\t    const _InputIterator&, const _InputIterator&,\n+\t\t\t    std::__false_type)\n     { return true; }\n-#endif\n \n-  /** Checks that iterators do not belong to the same sequence. */\n+  /** Handle debug iterators from the same type of container. */\n   template<typename _Iterator, typename _Sequence, typename _OtherIterator>\n     inline bool\n     __foreign_iterator_aux2(const _Safe_iterator<_Iterator, _Sequence>& __it,\n \t\tconst _Safe_iterator<_OtherIterator, _Sequence>& __other,\n-\t\tstd::input_iterator_tag)\n+\t\tconst _Safe_iterator<_OtherIterator, _Sequence>&)\n     { return __it._M_get_sequence() != __other._M_get_sequence(); }\n-\t\t\t   \n-#if __cplusplus >= 201103L\n-  /* This overload detects when passing pointers to the contained elements\n-     rather than using iterators.\n-   */\n+\n+  /** Handle debug iterators from different types of container. */\n+  template<typename _Iterator, typename _Sequence, typename _OtherIterator,\n+\t   typename _OtherSequence>\n+    inline bool\n+    __foreign_iterator_aux2(const _Safe_iterator<_Iterator, _Sequence>& __it,\n+\t\tconst _Safe_iterator<_OtherIterator, _OtherSequence>&,\n+\t\tconst _Safe_iterator<_OtherIterator, _OtherSequence>&)\n+    { return true; }\n+\n+  /* Handle non-debug iterators. */\n   template<typename _Iterator, typename _Sequence, typename _InputIterator>\n     inline bool\n     __foreign_iterator_aux2(const _Safe_iterator<_Iterator, _Sequence>& __it,\n-\t\t\t    _InputIterator __other,\n-\t\t\t    std::random_access_iterator_tag)\n+\t\t\t    const _InputIterator& __other,\n+\t\t\t    const _InputIterator& __other_end)\n     {\n-      typedef typename _Sequence::const_iterator _ItType;\n-      typedef typename std::iterator_traits<_ItType>::reference _Ref;\n-      return __foreign_iterator_aux3(__it, __other,\n-\t\t\t\t     std::is_lvalue_reference<_Ref>());\n+      return __foreign_iterator_aux3(__it, __other, __other_end,\n+\t\t\t\t     _Is_contiguous_sequence<_Sequence>());\n     }\n-#endif\n-\t\t\t   \n-  /* Fallback overload for which we can't say, assume it is valid. */\n-  template<typename _Iterator, typename _Sequence, typename _InputIterator>\n-    inline bool\n-    __foreign_iterator_aux2(const _Safe_iterator<_Iterator, _Sequence>&,\n-\t\t\t   _InputIterator,\n-\t\t\t   std::input_iterator_tag)\n-    { return true; }\n-\t\t\t   \n-  template<typename _Iterator, typename _Sequence,\n-\t   typename _Integral>\n+\n+  /* Handle the case where we aren't really inserting a range after all */\n+  template<typename _Iterator, typename _Sequence, typename _Integral>\n     inline bool\n-    __foreign_iterator_aux(const _Safe_iterator<_Iterator, _Sequence>& __it,\n-\t\t\t   _Integral __other,\n+    __foreign_iterator_aux(const _Safe_iterator<_Iterator, _Sequence>&,\n+\t\t\t   _Integral, _Integral,\n \t\t\t   std::__true_type)\n     { return true; }\n \n+  /* Handle all iterators. */\n   template<typename _Iterator, typename _Sequence,\n \t   typename _InputIterator>\n     inline bool\n     __foreign_iterator_aux(const _Safe_iterator<_Iterator, _Sequence>& __it,\n-\t\t\t   _InputIterator __other,\n+\t\t\t   _InputIterator __other, _InputIterator __other_end,\n \t\t\t   std::__false_type)\n     {\n-      return (_Insert_range_from_self_is_safe<_Sequence>::__value\n-\t      || __foreign_iterator_aux2(__it, __other,\n-\t\t\t\t\t std::__iterator_category(__it)));\n+      return _Insert_range_from_self_is_safe<_Sequence>::__value\n+\t     || __foreign_iterator_aux2(__it, __other, __other_end);\n     }\n \n   template<typename _Iterator, typename _Sequence,\n \t   typename _InputIterator>\n     inline bool\n     __foreign_iterator(const _Safe_iterator<_Iterator, _Sequence>& __it,\n-\t\t       _InputIterator __other)\n+\t\t       _InputIterator __other, _InputIterator __other_end)\n     {\n       typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n-      return __foreign_iterator_aux(__it, __other, _Integral());\n+      return __foreign_iterator_aux(__it, __other, __other_end, _Integral());\n     }\n \n   /** Checks that __s is non-NULL or __n == 0, and then returns __s. */"}, {"sha": "7ce374c75891851e2d57a360a6683739d6cda02d", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d1f255ae34d00e29189d58eda27250f8a9ff0e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d1f255ae34d00e29189d58eda27250f8a9ff0e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=72d1f255ae34d00e29189d58eda27250f8a9ff0e", "patch": "@@ -99,14 +99,15 @@ _GLIBCXX_DEBUG_VERIFY(!_Position._M_is_end(),\t\t\t\t\\\n  *  into a container at a specific position requires that the iterator\n  *  be nonsingular (i.e., either dereferenceable or past-the-end),\n  *  that it reference the sequence we are inserting into, and that the\n- *  iterator range [_First, Last) is a valid (possibly empty)\n- *  range. Note that this macro is only valid when the container is a\n+ *  iterator range [_First, _Last) is a valid (possibly empty)\n+ *  range which does not reference the sequence we are inserting into.\n+ *  Note that this macro is only valid when the container is a\n  *  _Safe_sequence and the _Position iterator is a _Safe_iterator.\n */\n #define __glibcxx_check_insert_range(_Position,_First,_Last)\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n __glibcxx_check_insert(_Position);\t\t\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__foreign_iterator(_Position,_First),\\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__foreign_iterator(_Position,_First,_Last),\\\n \t\t      _M_message(__gnu_debug::__msg_insert_range_from_self)\\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n@@ -117,18 +118,15 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__foreign_iterator(_Position,_First),\\\n  *  into a container after a specific position requires that the iterator\n  *  be nonsingular (i.e., either dereferenceable or past-the-end),\n  *  that it reference the sequence we are inserting into, and that the\n- *  iterator range [_First, Last) is a valid (possibly empty)\n- *  range. Note that this macro is only valid when the container is a\n- *  _Safe_sequence and the iterator is a _Safe_iterator.\n- *\n- *  @todo We would like to be able to check for noninterference of\n- *  _Position and the range [_First, _Last), but that can't (in\n- *  general) be done.\n+ *  iterator range [_First, _Last) is a valid (possibly empty)\n+ *  range which does not reference the sequence we are inserting into.\n+ *  Note that this macro is only valid when the container is a\n+ *  _Safe_sequence and the _Position iterator is a _Safe_iterator.\n */\n #define __glibcxx_check_insert_range_after(_Position,_First,_Last)\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-__glibcxx_check_insert_after(_Position);\t\t\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__foreign_iterator(_Position,_First),\\\n+__glibcxx_check_insert_after(_Position);\t\t\t\t\\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__foreign_iterator(_Position,_First,_Last),\\\n \t\t      _M_message(__gnu_debug::__msg_insert_range_from_self)\\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n@@ -343,7 +341,7 @@ _GLIBCXX_DEBUG_VERIFY(this != &_Other,\t\t\t\t\t\\\n \t\t      _M_message(__gnu_debug::__msg_self_move_assign)\t\\\n                       ._M_sequence(*this, \"this\"))\n \n-// Verify that load factor is position\n+// Verify that load factor is positive\n #define __glibcxx_check_max_load_factor(_F)\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_F > 0.0f,\t\t\t\t\t\\\n \t\t      _M_message(__gnu_debug::__msg_valid_load_factor)\t\\"}, {"sha": "2e9cd656b5c3f2046b67f326ec2c8d971f160d0c", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d1f255ae34d00e29189d58eda27250f8a9ff0e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d1f255ae34d00e29189d58eda27250f8a9ff0e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=72d1f255ae34d00e29189d58eda27250f8a9ff0e", "patch": "@@ -718,4 +718,17 @@ namespace __debug\n \n } // namespace std\n \n+namespace __gnu_debug\n+{\n+  template<typename _Tp, typename _Alloc>\n+    struct _Is_contiguous_sequence<std::__debug::vector<_Tp, _Alloc> >\n+    : std::__true_type\n+    { };\n+\n+  template<typename _Alloc>\n+    struct _Is_contiguous_sequence<std::__debug::vector<bool, _Alloc> >\n+    : std::__false_type\n+    { };\n+}\n+\n #endif"}, {"sha": "a317a839f41a1c90cc07f2b66e7af7822f3acbac", "filename": "libstdc++-v3/testsuite/23_containers/vector/debug/57779_neg.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d1f255ae34d00e29189d58eda27250f8a9ff0e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2F57779_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d1f255ae34d00e29189d58eda27250f8a9ff0e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2F57779_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2F57779_neg.cc?ref=72d1f255ae34d00e29189d58eda27250f8a9ff0e", "patch": "@@ -15,12 +15,10 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n //\n-// { dg-options \"-std=gnu++11\" }\n // { dg-require-debug-mode \"\" }\n // { dg-do run { xfail *-*-* } }\n \n #include <vector>\n-#include <debug/checks.h>\n \n void test01()\n {"}, {"sha": "73b4dac71c0da90f18316bc5e65f66b8d7ec6bd0", "filename": "libstdc++-v3/testsuite/23_containers/vector/debug/60587.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d1f255ae34d00e29189d58eda27250f8a9ff0e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2F60587.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d1f255ae34d00e29189d58eda27250f8a9ff0e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2F60587.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2F60587.cc?ref=72d1f255ae34d00e29189d58eda27250f8a9ff0e", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-require-debug-mode \"\" }\n+\n+// PR libstdc++/60587\n+\n+#include <vector>\n+\n+int main() {\n+    std::vector<int> a, b;\n+    a.push_back(1);\n+    a.insert(a.end(), b.begin(), b.end());\n+    b.push_back(1L);\n+    a.insert(a.end(), b.begin(), b.end());\n+\n+    std::vector<long> c;\n+    a.insert(a.end(), c.begin(), c.end());\n+    c.push_back(1L);\n+    a.insert(a.end(), c.begin(), c.end());\n+}"}, {"sha": "219271b73ea0fed6f589bcd6fc11d5d53abc0941", "filename": "libstdc++-v3/testsuite/23_containers/vector/debug/60587_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d1f255ae34d00e29189d58eda27250f8a9ff0e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2F60587_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d1f255ae34d00e29189d58eda27250f8a9ff0e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2F60587_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2F60587_neg.cc?ref=72d1f255ae34d00e29189d58eda27250f8a9ff0e", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-require-debug-mode \"\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+// PR libstdc++/60587\n+\n+#include <vector>\n+\n+int main() {\n+    std::vector<int> a;\n+    a.push_back(1);\n+    a.insert(a.end(), a.begin(), a.begin());  // Expected to abort here\n+}"}]}