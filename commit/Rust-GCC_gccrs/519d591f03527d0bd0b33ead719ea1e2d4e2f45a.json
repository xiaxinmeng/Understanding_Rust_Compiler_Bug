{"sha": "519d591f03527d0bd0b33ead719ea1e2d4e2f45a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE5ZDU5MWYwMzUyN2QwYmQwYjMzZWFkNzE5ZWExZTJkNGUyZjQ1YQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-02T02:03:56Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-02T02:03:56Z"}, "message": "(grokdeclarator): Handle iterator storage class.\n\n(finish_decl): For iterator, require initial value, make a save_expr.\n\nFrom-SVN: r3579", "tree": {"sha": "1adde46b3790de7115bdefed1312145979c16d3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1adde46b3790de7115bdefed1312145979c16d3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/519d591f03527d0bd0b33ead719ea1e2d4e2f45a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/519d591f03527d0bd0b33ead719ea1e2d4e2f45a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/519d591f03527d0bd0b33ead719ea1e2d4e2f45a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/519d591f03527d0bd0b33ead719ea1e2d4e2f45a/comments", "author": null, "committer": null, "parents": [{"sha": "3791970daf55a3bedd1d83e46bdf798f44b4b6a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3791970daf55a3bedd1d83e46bdf798f44b4b6a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3791970daf55a3bedd1d83e46bdf798f44b4b6a9"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "15da5ba026b65778462c5c447298a596a963a450", "filename": "gcc/c-decl.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519d591f03527d0bd0b33ead719ea1e2d4e2f45a/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519d591f03527d0bd0b33ead719ea1e2d4e2f45a/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=519d591f03527d0bd0b33ead719ea1e2d4e2f45a", "patch": "@@ -3268,6 +3268,14 @@ finish_decl (decl, init, asmspec_tree)\n   if (TREE_CODE (decl) == PARM_DECL)\n     init = 0;\n \n+  if (ITERATOR_P (decl))\n+    {\n+      if (init == 0)\n+\terror_with_decl (decl, \"iterator has no initial value\");\n+      else\n+\tinit = save_expr (init);\n+    }\n+\n   if (init)\n     {\n       if (TREE_CODE (decl) != TYPE_DECL)\n@@ -3880,6 +3888,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n     if (specbits & 1 << (int) RID_EXTERN) nclasses++;\n     if (specbits & 1 << (int) RID_REGISTER) nclasses++;\n     if (specbits & 1 << (int) RID_TYPEDEF) nclasses++;\n+    if (specbits & 1 << (int) RID_ITERATOR) nclasses++;\n \n     /* Warn about storage classes that are invalid for certain\n        kinds of declarations (parameters, typenames, etc.).  */\n@@ -3933,6 +3942,18 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n     else if (current_binding_level == global_binding_level\n \t     && specbits & (1 << (int) RID_AUTO))\n       error (\"top-level declaration of `%s' specifies `auto'\", name);\n+    else if ((specbits & 1 << (int) RID_ITERATOR)\n+\t     && TREE_CODE (declarator) != IDENTIFIER_NODE)\n+      {\n+\terror (\"iterator `%s' has derived type\", name);\n+\ttype = error_mark_node;\n+      }\n+    else if ((specbits & 1 << (int) RID_ITERATOR)\n+\t     && TREE_CODE (type) != INTEGER_TYPE)\n+      {\n+\terror (\"iterator `%s' has noninteger type\", name);\n+\ttype = error_mark_node;\n+      }\n   }\n \n   /* Now figure out the structure of the declarator proper.\n@@ -4449,6 +4470,14 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t    TREE_STATIC (decl) = (specbits & (1 << (int) RID_STATIC)) != 0;\n \t    TREE_PUBLIC (decl) = DECL_EXTERNAL (decl);\n \t  }\n+\n+\tif (specbits & 1 << (int) RID_ITERATOR)\n+\t  ITERATOR_P (decl) = 1;\n+      {\n+\terror (\"iterator `%s' has derived type\", name);\n+\ttype = error_mark_node;\n+      }\n+\n       }\n \n     /* Record `register' declaration for warnings on &"}]}