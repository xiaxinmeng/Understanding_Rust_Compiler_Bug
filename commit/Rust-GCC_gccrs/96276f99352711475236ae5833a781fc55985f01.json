{"sha": "96276f99352711475236ae5833a781fc55985f01", "node_id": "C_kwDOANBUbNoAKDk2Mjc2Zjk5MzUyNzExNDc1MjM2YWU1ODMzYTc4MWZjNTU5ODVmMDE", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-11-09T21:26:00Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-11-09T21:48:33Z"}, "message": "rs6000: Match recent builtins changes in new builtins support\n\n2021-11-09  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-call.c (rs6000_gimple_fold_new_builtin):\n\tDisable gimple fold for RS6000_BIF_{XVMINDP,XVMINSP,VMINFP} and\n\tRS6000_BIF_{XVMAXDP,XVMAXSP,VMAXFP} when fast-math is not set.\n\t(lxvrse_expand_builtin): Modify the expansion for sign extension.\n\tAll extensions are done within VSX registers.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/p10_vec_xl_sext.c: Fix long long case.", "tree": {"sha": "d27b442988a9a5dc4a82514dc2a92ee781c57ce9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d27b442988a9a5dc4a82514dc2a92ee781c57ce9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96276f99352711475236ae5833a781fc55985f01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96276f99352711475236ae5833a781fc55985f01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96276f99352711475236ae5833a781fc55985f01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96276f99352711475236ae5833a781fc55985f01/comments", "author": null, "committer": null, "parents": [{"sha": "8875a92d31329ae52b734683784c4b054839a661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8875a92d31329ae52b734683784c4b054839a661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8875a92d31329ae52b734683784c4b054839a661"}], "stats": {"total": 53, "additions": 39, "deletions": 14}, "files": [{"sha": "83e1abb6118ebdc4eafd7296ed6b42eaa39631ba", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96276f99352711475236ae5833a781fc55985f01/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96276f99352711475236ae5833a781fc55985f01/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=96276f99352711475236ae5833a781fc55985f01", "patch": "@@ -13902,6 +13902,14 @@ rs6000_gimple_fold_new_builtin (gimple_stmt_iterator *gsi)\n     /* flavors of vec_min.  */\n     case RS6000_BIF_XVMINDP:\n     case RS6000_BIF_XVMINSP:\n+    case RS6000_BIF_VMINFP:\n+      {\n+\tlhs = gimple_call_lhs (stmt);\n+\ttree type = TREE_TYPE (lhs);\n+\tif (HONOR_NANS (type))\n+\t  return false;\n+\tgcc_fallthrough ();\n+      }\n     case RS6000_BIF_VMINSD:\n     case RS6000_BIF_VMINUD:\n     case RS6000_BIF_VMINSB:\n@@ -13910,7 +13918,6 @@ rs6000_gimple_fold_new_builtin (gimple_stmt_iterator *gsi)\n     case RS6000_BIF_VMINUB:\n     case RS6000_BIF_VMINUH:\n     case RS6000_BIF_VMINUW:\n-    case RS6000_BIF_VMINFP:\n       arg0 = gimple_call_arg (stmt, 0);\n       arg1 = gimple_call_arg (stmt, 1);\n       lhs = gimple_call_lhs (stmt);\n@@ -13921,6 +13928,14 @@ rs6000_gimple_fold_new_builtin (gimple_stmt_iterator *gsi)\n     /* flavors of vec_max.  */\n     case RS6000_BIF_XVMAXDP:\n     case RS6000_BIF_XVMAXSP:\n+    case RS6000_BIF_VMAXFP:\n+      {\n+\tlhs = gimple_call_lhs (stmt);\n+\ttree type = TREE_TYPE (lhs);\n+\tif (HONOR_NANS (type))\n+\t  return false;\n+\tgcc_fallthrough ();\n+      }\n     case RS6000_BIF_VMAXSD:\n     case RS6000_BIF_VMAXUD:\n     case RS6000_BIF_VMAXSB:\n@@ -13929,7 +13944,6 @@ rs6000_gimple_fold_new_builtin (gimple_stmt_iterator *gsi)\n     case RS6000_BIF_VMAXUB:\n     case RS6000_BIF_VMAXUH:\n     case RS6000_BIF_VMAXUW:\n-    case RS6000_BIF_VMAXFP:\n       arg0 = gimple_call_arg (stmt, 0);\n       arg1 = gimple_call_arg (stmt, 1);\n       lhs = gimple_call_lhs (stmt);\n@@ -15157,7 +15171,7 @@ lxvrse_expand_builtin (rtx target, insn_code icode, rtx *op,\n \t\t\t  gen_rtx_PLUS (Pmode, op[1], op[0]));\n     }\n \n-  rtx discratch = gen_reg_rtx (DImode);\n+  rtx discratch = gen_reg_rtx (V2DImode);\n   rtx tiscratch = gen_reg_rtx (TImode);\n \n   /* Emit the lxvr*x insn.  */\n@@ -15166,20 +15180,31 @@ lxvrse_expand_builtin (rtx target, insn_code icode, rtx *op,\n     return 0;\n   emit_insn (pat);\n \n-  /* Emit a sign extension from QI,HI,WI to double (DI).  */\n-  rtx scratch = gen_lowpart (smode, tiscratch);\n+  /* Emit a sign extension from V16QI,V8HI,V4SI to V2DI.  */\n+  rtx temp1;\n   if (icode == CODE_FOR_vsx_lxvrbx)\n-    emit_insn (gen_extendqidi2 (discratch, scratch));\n+    {\n+      temp1  = simplify_gen_subreg (V16QImode, tiscratch, TImode, 0);\n+      emit_insn (gen_vsx_sign_extend_qi_v2di (discratch, temp1));\n+    }\n   else if (icode == CODE_FOR_vsx_lxvrhx)\n-    emit_insn (gen_extendhidi2 (discratch, scratch));\n+    {\n+      temp1  = simplify_gen_subreg (V8HImode, tiscratch, TImode, 0);\n+      emit_insn (gen_vsx_sign_extend_hi_v2di (discratch, temp1));\n+    }\n   else if (icode == CODE_FOR_vsx_lxvrwx)\n-    emit_insn (gen_extendsidi2 (discratch, scratch));\n-  /*  Assign discratch directly if scratch is already DI.  */\n-  if (icode == CODE_FOR_vsx_lxvrdx)\n-    discratch = scratch;\n+    {\n+      temp1  = simplify_gen_subreg (V4SImode, tiscratch, TImode, 0);\n+      emit_insn (gen_vsx_sign_extend_si_v2di (discratch, temp1));\n+    }\n+  else if (icode == CODE_FOR_vsx_lxvrdx)\n+    discratch = simplify_gen_subreg (V2DImode, tiscratch, TImode, 0);\n+  else\n+    gcc_unreachable ();\n \n-  /* Emit the sign extension from DI (double) to TI (quad).  */\n-  emit_insn (gen_extendditi2 (target, discratch));\n+  /* Emit the sign extension from V2DI (double) to TI (quad).  */\n+  rtx temp2 = simplify_gen_subreg (TImode, discratch, V2DImode, 0);\n+  emit_insn (gen_extendditi2_vector (target, temp2));\n \n   return target;\n }"}, {"sha": "67d52ad8ddbd1ebe3ffa42d3ca4e443b62300dad", "filename": "gcc/testsuite/gcc.target/powerpc/p10_vec_xl_sext.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96276f99352711475236ae5833a781fc55985f01/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp10_vec_xl_sext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96276f99352711475236ae5833a781fc55985f01/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp10_vec_xl_sext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp10_vec_xl_sext.c?ref=96276f99352711475236ae5833a781fc55985f01", "patch": "@@ -24,7 +24,7 @@ foo3 (signed long a, signed int *b)\n }\n \n vector signed __int128\n-foo4 (signed long a, signed long *b)\n+foo4 (signed long a, signed long long *b)\n {\n   return vec_xl_sext (a, b);\n }"}]}