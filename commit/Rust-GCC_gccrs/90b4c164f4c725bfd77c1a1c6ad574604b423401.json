{"sha": "90b4c164f4c725bfd77c1a1c6ad574604b423401", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBiNGMxNjRmNGM3MjViZmQ3N2MxYTFjNmFkNTc0NjA0YjQyMzQwMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-11-24T08:18:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-11-24T08:18:40Z"}, "message": "trans.c (push_range_check_info): Replace early test with assertion.\n\n\t* gcc-interface/trans.c (push_range_check_info): Replace early test\n\twith assertion.\n\t(Raise_Error_to_gnu): Do not call push_range_check_info if the loop\n\tstack is empty.\n\t* gcc-interface/utils.c (convert_to_fat_pointer): Fix formatting.\n\t* gcc-interface/utils2.c (gnat_invariant_expr): Deal with padded types\n\tand revert latest change.\n\nFrom-SVN: r217998", "tree": {"sha": "d3dce21e6f62462c4a3162939a961e2744aecfb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3dce21e6f62462c4a3162939a961e2744aecfb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90b4c164f4c725bfd77c1a1c6ad574604b423401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b4c164f4c725bfd77c1a1c6ad574604b423401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b4c164f4c725bfd77c1a1c6ad574604b423401", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b4c164f4c725bfd77c1a1c6ad574604b423401/comments", "author": null, "committer": null, "parents": [{"sha": "29e0597e2530cc21fe964e35c6cfbfadfb08a01e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e0597e2530cc21fe964e35c6cfbfadfb08a01e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29e0597e2530cc21fe964e35c6cfbfadfb08a01e"}], "stats": {"total": 71, "additions": 64, "deletions": 7}, "files": [{"sha": "c8568f72ee475696b07fd0bae52b039cf92fa817", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b4c164f4c725bfd77c1a1c6ad574604b423401/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b4c164f4c725bfd77c1a1c6ad574604b423401/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=90b4c164f4c725bfd77c1a1c6ad574604b423401", "patch": "@@ -1,3 +1,13 @@\n+2014-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (push_range_check_info): Replace early test\n+\twith assertion.\n+\t(Raise_Error_to_gnu): Do not call push_range_check_info if the loop\n+\tstack is empty.\n+\t* gcc-interface/utils.c (convert_to_fat_pointer): Fix formatting.\n+\t* gcc-interface/utils2.c (gnat_invariant_expr): Deal with padded types\n+\tand revert latest change.\n+\n 2014-11-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (Call_to_gnu): Strip unchecked conversions on"}, {"sha": "11aca57239f0cc08b8674a6cfefda414ec31c20c", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b4c164f4c725bfd77c1a1c6ad574604b423401/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b4c164f4c725bfd77c1a1c6ad574604b423401/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=90b4c164f4c725bfd77c1a1c6ad574604b423401", "patch": "@@ -2569,9 +2569,6 @@ push_range_check_info (tree var)\n   struct loop_info_d *iter = NULL;\n   unsigned int i;\n \n-  if (vec_safe_is_empty (gnu_loop_stack))\n-    return NULL;\n-\n   var = remove_conversions (var, false);\n \n   if (TREE_CODE (var) != VAR_DECL)\n@@ -2580,6 +2577,8 @@ push_range_check_info (tree var)\n   if (decl_function_context (var) != current_function_decl)\n     return NULL;\n \n+  gcc_assert (vec_safe_length (gnu_loop_stack) > 0);\n+\n   for (i = vec_safe_length (gnu_loop_stack) - 1;\n        vec_safe_iterate (gnu_loop_stack, i, &iter);\n        i--)\n@@ -5175,6 +5174,7 @@ Raise_Error_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n \t     the original checks reinstated, and a run time selection.\n \t     The former loop will be suitable for vectorization.  */\n \t  if (flag_unswitch_loops\n+\t      && !vec_safe_is_empty (gnu_loop_stack)\n \t      && (!gnu_low_bound\n \t\t  || (gnu_low_bound = gnat_invariant_expr (gnu_low_bound)))\n \t      && (!gnu_high_bound"}, {"sha": "1b1473723c6e48d039962289bf54742d998f41c6", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b4c164f4c725bfd77c1a1c6ad574604b423401/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b4c164f4c725bfd77c1a1c6ad574604b423401/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=90b4c164f4c725bfd77c1a1c6ad574604b423401", "patch": "@@ -3860,8 +3860,7 @@ convert_to_fat_pointer (tree type, tree expr)\n \t{\n \t  /* The template type can still be dummy at this point so we build an\n \t     empty constructor.  The middle-end will fill it in with zeros.  */\n-\t  t = build_constructor (template_type,\n-\t\t\t\t NULL);\n+\t  t = build_constructor (template_type, NULL);\n \t  TREE_CONSTANT (t) = TREE_STATIC (t) = 1;\n \t  null_bounds = build_unary_op (ADDR_EXPR, NULL_TREE, t);\n \t  SET_TYPE_NULL_BOUNDS (ptr_template_type, null_bounds);"}, {"sha": "1296a4996119801f11518dc333b4ece126369769", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b4c164f4c725bfd77c1a1c6ad574604b423401/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b4c164f4c725bfd77c1a1c6ad574604b423401/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=90b4c164f4c725bfd77c1a1c6ad574604b423401", "patch": "@@ -2780,7 +2780,13 @@ gnat_invariant_expr (tree expr)\n \t  || (TREE_CODE (expr) == VAR_DECL && TREE_READONLY (expr)))\n \t && decl_function_context (expr) == current_function_decl\n \t && DECL_INITIAL (expr))\n-    expr = remove_conversions (DECL_INITIAL (expr), false);\n+    {\n+      expr = DECL_INITIAL (expr);\n+      /* Look into CONSTRUCTORs built to initialize padded types.  */\n+      if (TYPE_IS_PADDING_P (TREE_TYPE (expr)))\n+\texpr = convert (TREE_TYPE (TYPE_FIELDS (TREE_TYPE (expr))), expr);\n+      expr = remove_conversions (expr, false);\n+    }\n \n   if (TREE_CONSTANT (expr))\n     return fold_convert (type, expr);\n@@ -2836,7 +2842,7 @@ gnat_invariant_expr (tree expr)\n   if (!TREE_READONLY (t))\n     return NULL_TREE;\n \n-  if (TREE_CODE (t) == CONSTRUCTOR || TREE_CODE (t) == PARM_DECL)\n+  if (TREE_CODE (t) == PARM_DECL)\n     return fold_convert (type, expr);\n \n   if (TREE_CODE (t) == VAR_DECL"}, {"sha": "76d6653ca2ac592046ad978fd70c7a457d94bc6c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b4c164f4c725bfd77c1a1c6ad574604b423401/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b4c164f4c725bfd77c1a1c6ad574604b423401/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=90b4c164f4c725bfd77c1a1c6ad574604b423401", "patch": "@@ -1,3 +1,7 @@\n+2014-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt45.adb: New test.\n+\n 2014-11-24  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/dollar_sym_3.f: Update dg-error."}, {"sha": "f75e46ed42d59acd6510770d104d2ad7106ae3ec", "filename": "gcc/testsuite/gnat.dg/opt45.adb", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b4c164f4c725bfd77c1a1c6ad574604b423401/gcc%2Ftestsuite%2Fgnat.dg%2Fopt45.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b4c164f4c725bfd77c1a1c6ad574604b423401/gcc%2Ftestsuite%2Fgnat.dg%2Fopt45.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt45.adb?ref=90b4c164f4c725bfd77c1a1c6ad574604b423401", "patch": "@@ -0,0 +1,38 @@\n+-- { dg-do compile }\r\n+-- { dg-options \"-O3\" }\r\n+\r\n+procedure Opt45 is\r\n+\r\n+  type Index_T is mod 2 ** 32;\r\n+  for Index_T'Size use 32;\r\n+  for Index_T'Alignment use 1;\r\n+\r\n+  type Array_T is array (Index_T range <>) of Natural;\r\n+  type Array_Ptr_T is access all Array_T;\r\n+\r\n+  My_Array_1 : aliased Array_T := (1, 2);\r\n+  My_Array_2 : aliased Array_T := (3, 4);\r\n+\r\n+  Array_Ptr : Array_Ptr_T := null;\r\n+  Index : Index_T := Index_T'First;\r\n+\r\n+  My_Value : Natural := Natural'First;\r\n+\r\n+  procedure Proc (Selection : Positive) is\r\n+  begin\r\n+    if Selection = 1 then\r\n+      Array_Ptr := My_Array_1'Access;\r\n+      Index := My_Array_1'First;\r\n+    else\r\n+      Array_Ptr := My_Array_2'Access;\r\n+      Index := My_Array_2'First;\r\n+    end if;\r\n+\r\n+    if My_Value = Natural'First then\r\n+      My_Value := Array_Ptr.all (Index);\r\n+    end if;\r\n+  end;\r\n+\r\n+begin\r\n+  Proc (2);\r\n+end;\r"}]}