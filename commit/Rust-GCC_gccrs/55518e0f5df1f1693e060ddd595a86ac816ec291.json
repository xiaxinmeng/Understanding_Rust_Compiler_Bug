{"sha": "55518e0f5df1f1693e060ddd595a86ac816ec291", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU1MThlMGY1ZGYxZjE2OTNlMDYwZGRkNTk1YTg2YWM4MTZlYzI5MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-11-14T14:43:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-11-14T14:43:43Z"}, "message": "tree-cfgcleanup.c (cleanup_control_expr_graph): Remove first_p paramter and handling.\n\n2017-11-14  Richard Biener  <rguenther@suse.de>\n\n\t* tree-cfgcleanup.c (cleanup_control_expr_graph): Remove first_p\n\tparamter and handling.\n\t(cleanup_control_flow_bb): Likewise.\n\t(cleanup_control_flow_pre): New helper performing a DFS walk\n\tto call cleanup_control_flow_bb in PRE order.\n\t(cleanup_tree_cfg_1): Do the first phase of cleanup_control_flow_bb\n\tvia cleanup_control_flow_pre.\n\nFrom-SVN: r254730", "tree": {"sha": "9665286ee867ccd24be4450c3ea90ef16eadae27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9665286ee867ccd24be4450c3ea90ef16eadae27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55518e0f5df1f1693e060ddd595a86ac816ec291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55518e0f5df1f1693e060ddd595a86ac816ec291", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55518e0f5df1f1693e060ddd595a86ac816ec291", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55518e0f5df1f1693e060ddd595a86ac816ec291/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "082fc7e884f79aa11e87295e8f98b55068574cdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/082fc7e884f79aa11e87295e8f98b55068574cdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/082fc7e884f79aa11e87295e8f98b55068574cdc"}], "stats": {"total": 99, "additions": 65, "deletions": 34}, "files": [{"sha": "e9bb5ae6542bb7dcbb9804558242fdaa17def14a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55518e0f5df1f1693e060ddd595a86ac816ec291/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55518e0f5df1f1693e060ddd595a86ac816ec291/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55518e0f5df1f1693e060ddd595a86ac816ec291", "patch": "@@ -1,3 +1,13 @@\n+2017-11-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-cfgcleanup.c (cleanup_control_expr_graph): Remove first_p\n+\tparamter and handling.\n+\t(cleanup_control_flow_bb): Likewise.\n+\t(cleanup_control_flow_pre): New helper performing a DFS walk\n+\tto call cleanup_control_flow_bb in PRE order.\n+\t(cleanup_tree_cfg_1): Do the first phase of cleanup_control_flow_bb\n+\tvia cleanup_control_flow_pre.\n+\n 2017-11-14  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-simd.md"}, {"sha": "526793723dcede533ac63dbf32577d7e736bc04a", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 55, "deletions": 34, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55518e0f5df1f1693e060ddd595a86ac816ec291/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55518e0f5df1f1693e060ddd595a86ac816ec291/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=55518e0f5df1f1693e060ddd595a86ac816ec291", "patch": "@@ -122,8 +122,7 @@ convert_single_case_switch (gswitch *swtch, gimple_stmt_iterator &gsi)\n    at block BB.  */\n \n static bool\n-cleanup_control_expr_graph (basic_block bb, gimple_stmt_iterator gsi,\n-\t\t\t    bool first_p)\n+cleanup_control_expr_graph (basic_block bb, gimple_stmt_iterator gsi)\n {\n   edge taken_edge;\n   bool retval = false;\n@@ -146,25 +145,14 @@ cleanup_control_expr_graph (basic_block bb, gimple_stmt_iterator gsi,\n       switch (gimple_code (stmt))\n \t{\n \tcase GIMPLE_COND:\n-\t  /* During a first iteration on the CFG only remove trivially\n-\t     dead edges but mark other conditions for re-evaluation.  */\n-\t  if (first_p)\n-\t    {\n-\t      val = const_binop (gimple_cond_code (stmt), boolean_type_node,\n-\t\t\t\t gimple_cond_lhs (stmt),\n-\t\t\t\t gimple_cond_rhs (stmt));\n-\t      if (! val)\n-\t\tbitmap_set_bit (cfgcleanup_altered_bbs, bb->index);\n-\t    }\n-\t  else\n-\t    {\n-\t      code_helper rcode;\n-\t      tree ops[3] = {};\n-\t      if (gimple_simplify (stmt, &rcode, ops, NULL, no_follow_ssa_edges,\n-\t\t\t\t   no_follow_ssa_edges)\n-\t\t  && rcode == INTEGER_CST)\n-\t\tval = ops[0];\n-\t    }\n+\t  {\n+\t    code_helper rcode;\n+\t    tree ops[3] = {};\n+\t    if (gimple_simplify (stmt, &rcode, ops, NULL, no_follow_ssa_edges,\n+\t\t\t\t no_follow_ssa_edges)\n+\t\t&& rcode == INTEGER_CST)\n+\t      val = ops[0];\n+\t  }\n \t  break;\n \n \tcase GIMPLE_SWITCH:\n@@ -235,7 +223,7 @@ cleanup_call_ctrl_altering_flag (gimple *bb_end)\n    true if anything changes.  */\n \n static bool\n-cleanup_control_flow_bb (basic_block bb, bool first_p)\n+cleanup_control_flow_bb (basic_block bb)\n {\n   gimple_stmt_iterator gsi;\n   bool retval = false;\n@@ -258,7 +246,7 @@ cleanup_control_flow_bb (basic_block bb, bool first_p)\n       || gimple_code (stmt) == GIMPLE_SWITCH)\n     {\n       gcc_checking_assert (gsi_stmt (gsi_last_bb (bb)) == stmt);\n-      retval |= cleanup_control_expr_graph (bb, gsi, first_p);\n+      retval |= cleanup_control_expr_graph (bb, gsi);\n     }\n   else if (gimple_code (stmt) == GIMPLE_GOTO\n \t   && TREE_CODE (gimple_goto_dest (stmt)) == ADDR_EXPR\n@@ -732,6 +720,45 @@ cleanup_tree_cfg_bb (basic_block bb)\n   return false;\n }\n \n+/* Do cleanup_control_flow_bb in PRE order.  */\n+\n+static bool\n+cleanup_control_flow_pre ()\n+{\n+  bool retval = false;\n+\n+  auto_vec<edge_iterator, 20> stack (n_basic_blocks_for_fn (cfun) + 1);\n+  auto_sbitmap visited (last_basic_block_for_fn (cfun));\n+  bitmap_clear (visited);\n+\n+  stack.quick_push (ei_start (ENTRY_BLOCK_PTR_FOR_FN (cfun)->succs));\n+\n+  while (! stack.is_empty ())\n+    {\n+      /* Look at the edge on the top of the stack.  */\n+      edge_iterator ei = stack.last ();\n+      basic_block dest = ei_edge (ei)->dest;\n+\n+      if (dest != EXIT_BLOCK_PTR_FOR_FN (cfun)\n+\t  && ! bitmap_bit_p (visited, dest->index))\n+\t{\n+\t  bitmap_set_bit (visited, dest->index);\n+\t  retval |= cleanup_control_flow_bb (dest);\n+\t  if (EDGE_COUNT (dest->succs) > 0)\n+\t    stack.quick_push (ei_start (dest->succs));\n+\t}\n+      else\n+\t{\n+\t  if (!ei_one_before_end_p (ei))\n+\t    ei_next (&stack.last ());\n+\t  else\n+\t    stack.pop ();\n+\t}\n+    }\n+\n+  return retval;\n+}\n+\n /* Iterate the cfg cleanups, while anything changes.  */\n \n static bool\n@@ -752,17 +779,11 @@ cleanup_tree_cfg_1 (void)\n   /* We cannot use FOR_EACH_BB_FN for the BB iterations below\n      since the basic blocks may get removed.  */\n \n-  /* Start by iterating over all basic blocks looking for edge removal\n-     opportunities.  Do this first because incoming SSA form may be\n-     invalid and we want to avoid performing SSA related tasks such\n+  /* Start by iterating over all basic blocks in PRE order looking for\n+     edge removal opportunities.  Do this first because incoming SSA form\n+     may be invalid and we want to avoid performing SSA related tasks such\n      as propgating out a PHI node during BB merging in that state.  */\n-  n = last_basic_block_for_fn (cfun);\n-  for (i = NUM_FIXED_BLOCKS; i < n; i++)\n-    {\n-      bb = BASIC_BLOCK_FOR_FN (cfun, i);\n-      if (bb)\n-\tretval |= cleanup_control_flow_bb (bb, true);\n-    }\n+  retval |= cleanup_control_flow_pre ();\n \n   /* After doing the above SSA form should be valid (or an update SSA\n      should be required).  */\n@@ -789,7 +810,7 @@ cleanup_tree_cfg_1 (void)\n       if (!bb)\n \tcontinue;\n \n-      retval |= cleanup_control_flow_bb (bb, false);\n+      retval |= cleanup_control_flow_bb (bb);\n       retval |= cleanup_tree_cfg_bb (bb);\n     }\n "}]}