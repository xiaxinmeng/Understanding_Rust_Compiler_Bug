{"sha": "cbf4c36fa373f5c5c3d920098fe28b024a86a3ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JmNGMzNmZhMzczZjVjNWMzZDkyMDA5OGZlMjhiMDI0YTg2YTNlZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-11T00:53:45Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-11T00:53:45Z"}, "message": "extend.texi (Arrays and pointers implementation): Document behavior of pointer/integer conversion.\n\n        * doc/extend.texi (Arrays and pointers implementation): Document\n        behavior of pointer/integer conversion.\n\nFrom-SVN: r44784", "tree": {"sha": "4e4cb06b9473b885ca64022341f7098b7907955e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e4cb06b9473b885ca64022341f7098b7907955e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbf4c36fa373f5c5c3d920098fe28b024a86a3ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbf4c36fa373f5c5c3d920098fe28b024a86a3ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbf4c36fa373f5c5c3d920098fe28b024a86a3ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbf4c36fa373f5c5c3d920098fe28b024a86a3ed/comments", "author": null, "committer": null, "parents": [{"sha": "39ffd3cbfd3584e1d7452b742a197d246b710878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ffd3cbfd3584e1d7452b742a197d246b710878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39ffd3cbfd3584e1d7452b742a197d246b710878"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "9d9bbe1d4956a0b41183979f5a97640bf46dd202", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf4c36fa373f5c5c3d920098fe28b024a86a3ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf4c36fa373f5c5c3d920098fe28b024a86a3ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cbf4c36fa373f5c5c3d920098fe28b024a86a3ed", "patch": "@@ -1,3 +1,8 @@\n+2001-08-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* doc/extend.texi (Arrays and pointers implementation): Document\n+\tbehavior of pointer/integer conversion.\n+\n 2001-08-10  Ulrich Weigand  <uweigand@de.ibm.com>\n  \n  \t* glimits.h (__LONG_MAX__): Add s390x as 64-bit architecture."}, {"sha": "12b9e71bd5f84d74acf59bfa346c3d4dc90b890f", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf4c36fa373f5c5c3d920098fe28b024a86a3ed/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf4c36fa373f5c5c3d920098fe28b024a86a3ed/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=cbf4c36fa373f5c5c3d920098fe28b024a86a3ed", "patch": "@@ -201,6 +201,26 @@ IEC 60559 conformant implementation (F.9).}\n @cite{The result of converting a pointer to an integer or\n vice versa (6.3.2.3).}\n \n+A cast from pointer to integer discards most-significant bits if the\n+pointer representation is larger than the integer type, sign-extends\n+if the pointer representation is smaller than the integer type, otherwise\n+the bits are unchanged.\n+@c ??? We've always claimed that pointers were unsigned entities.\n+@c Shouldn't we therefore be doing zero-extension?  If so, the bug\n+@c is in convert_to_integer, where we call type_for_size and request\n+@c a signed integral type.  On the other hand, it might be most useful\n+@c for the target if we extend according to POINTERS_EXTEND_UNSIGNED.\n+\n+A cast from integer to pointer discards most-significant bits if the\n+pointer representation is smaller than the integer type, extends according\n+to the signedness of the integer type if the pointer representation\n+is larger than the integer type, otherwise the bits are unchanged.\n+\n+When casting from pointer to integer and back again, the resulting\n+pointer must reference the same object as the original pointer, otherwise\n+the behavior is undefined.  That is, one may not use integer arithmetic to\n+avoid the undefined behavior of pointer arithmetic as proscribed in 6.5.6/8.\n+\n @item\n @cite{The size of the result of subtracting two pointers to elements\n of the same array (6.5.6).}"}]}