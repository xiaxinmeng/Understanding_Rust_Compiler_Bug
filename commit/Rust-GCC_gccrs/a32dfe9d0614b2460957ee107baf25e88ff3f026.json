{"sha": "a32dfe9d0614b2460957ee107baf25e88ff3f026", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMyZGZlOWQwNjE0YjI0NjA5NTdlZTEwN2JhZjI1ZTg4ZmYzZjAyNg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-04-09T13:05:08Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-04-09T13:05:08Z"}, "message": "tree-vrp.c (simplify_cond_using_ranges): Simplify test of boolean when the boolean was created by converting a wider...\n\n       * tree-vrp.c (simplify_cond_using_ranges): Simplify test of boolean\n       when the boolean was created by converting a wider object which\n       had a boolean range.\n\n        * gcc.dg/tree-ssa/vrp87.c: New test\n\nFrom-SVN: r197631", "tree": {"sha": "4c26150320e73f69086aed708a6b834ab32644cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c26150320e73f69086aed708a6b834ab32644cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a32dfe9d0614b2460957ee107baf25e88ff3f026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a32dfe9d0614b2460957ee107baf25e88ff3f026", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a32dfe9d0614b2460957ee107baf25e88ff3f026", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a32dfe9d0614b2460957ee107baf25e88ff3f026/comments", "author": null, "committer": null, "parents": [{"sha": "ab4425be3016e8e144c9a4971ad78cb32bbbfa65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab4425be3016e8e144c9a4971ad78cb32bbbfa65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab4425be3016e8e144c9a4971ad78cb32bbbfa65"}], "stats": {"total": 132, "additions": 131, "deletions": 1}, "files": [{"sha": "cd67f96f7cd50913ad13eda428ffe7a3c1c8aaf8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32dfe9d0614b2460957ee107baf25e88ff3f026/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32dfe9d0614b2460957ee107baf25e88ff3f026/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a32dfe9d0614b2460957ee107baf25e88ff3f026", "patch": "@@ -1,3 +1,9 @@\n+2013-04-09  Jeff Law  <law@redhat.com>\n+\n+\t* tree-vrp.c (simplify_cond_using_ranges): Simplify test of boolean\n+\twhen the boolean was created by converting a wider object which\n+\thad a boolean range.\n+\n 2013-04-09  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vectorizer.h (slp_void_p): Remove.\n@@ -159,7 +165,7 @@\n 2013-04-08  Jeff Law  <law@redhat.com>\n \n \t* gimple.c (canonicalize_cond_expr_cond): Rewrite x ^ y into x != y.\n-\t\t        \n+\n 2013-04-08  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-pretty-print.c (debug_gimple_stmt): Do not print"}, {"sha": "ebdabc17e701beaff06bec780faef6d7d0972a94", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32dfe9d0614b2460957ee107baf25e88ff3f026/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32dfe9d0614b2460957ee107baf25e88ff3f026/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a32dfe9d0614b2460957ee107baf25e88ff3f026", "patch": "@@ -1,3 +1,7 @@\n+2013-04-09  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/vrp87.c: New test.\n+\n 2013-04-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/56854"}, {"sha": "7feff81dde7c56bf9c9b8d93efd9d1a480d74315", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp87.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32dfe9d0614b2460957ee107baf25e88ff3f026/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp87.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32dfe9d0614b2460957ee107baf25e88ff3f026/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp87.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp87.c?ref=a32dfe9d0614b2460957ee107baf25e88ff3f026", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp2-details -fdump-tree-cddce2-details\" } */\n+\n+struct bitmap_head_def;\n+typedef struct bitmap_head_def *bitmap;\n+typedef const struct bitmap_head_def *const_bitmap;\n+\n+\n+typedef unsigned long BITMAP_WORD;\n+typedef struct bitmap_element_def\n+{\n+  struct bitmap_element_def *next;\n+  unsigned int indx;\n+  BITMAP_WORD bits[((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u))];\n+} bitmap_element;\n+\n+\n+\n+\n+\n+\n+typedef struct bitmap_head_def\n+{\n+  bitmap_element *first;\n+\n+} bitmap_head;\n+\n+\n+\n+static __inline__ unsigned char\n+bitmap_elt_ior (bitmap dst, bitmap_element * dst_elt,\n+\t\tbitmap_element * dst_prev, const bitmap_element * a_elt,\n+\t\tconst bitmap_element * b_elt, unsigned char changed)\n+{\n+\n+  if (a_elt)\n+    {\n+\n+      if (!changed && dst_elt)\n+\t{\n+\t  changed = 1;\n+\t}\n+    }\n+  else\n+    {\n+      changed = 1;\n+    }\n+  return changed;\n+}\n+\n+unsigned char\n+bitmap_ior_into (bitmap a, const_bitmap b)\n+{\n+  bitmap_element *a_elt = a->first;\n+  const bitmap_element *b_elt = b->first;\n+  bitmap_element *a_prev = ((void *) 0);\n+  unsigned char changed = 0;\n+\n+  while (b_elt)\n+    {\n+\n+      if (!a_elt || a_elt->indx == b_elt->indx)\n+\tchanged = bitmap_elt_ior (a, a_elt, a_prev, a_elt, b_elt, changed);\n+      else if (a_elt->indx > b_elt->indx)\n+\tchanged = 1;\n+      b_elt = b_elt->next;\n+\n+\n+    }\n+\n+  return changed;\n+}\n+\n+/* Verify that VRP simplified an \"if\" statement.  */\n+/* { dg-final { scan-tree-dump \"Folded into: if.*\" \"vrp2\"} } */\n+/* Verify that DCE after VRP2 eliminates a dead conversion\n+   to a (Bool).  */\n+/* { dg-final { scan-tree-dump \"Deleting.*_Bool.*;\" \"cddce2\"} } */\n+/* { dg-final { cleanup-tree-dump \"vrp2\" } } */\n+/* { dg-final { cleanup-tree-dump \"cddce2\" } } */\n+"}, {"sha": "e1b88a9e138249dff6ce8d572c0ec453a01f96c1", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32dfe9d0614b2460957ee107baf25e88ff3f026/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32dfe9d0614b2460957ee107baf25e88ff3f026/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=a32dfe9d0614b2460957ee107baf25e88ff3f026", "patch": "@@ -8584,6 +8584,45 @@ simplify_cond_using_ranges (gimple stmt)\n \t}\n     }\n \n+  /* If we have a comparison of a SSA_NAME boolean against\n+     a constant (which obviously must be [0..1]), see if the\n+     SSA_NAME was set by a type conversion where the source\n+     of the conversion is another SSA_NAME with a range [0..1].\n+\n+     If so, we can replace the SSA_NAME in the comparison with\n+     the RHS of the conversion.  This will often make the type\n+     conversion dead code which DCE will clean up.  */\n+  if (TREE_CODE (op0) == SSA_NAME\n+      && (TREE_CODE (TREE_TYPE (op0)) == BOOLEAN_TYPE\n+\t  || (INTEGRAL_TYPE_P (TREE_TYPE (op0))\n+\t      && TYPE_PRECISION (TREE_TYPE (op0)) == 1))\n+      && TREE_CODE (op1) == INTEGER_CST)\n+    {\n+      gimple def_stmt = SSA_NAME_DEF_STMT (op0);\n+      tree innerop;\n+\n+      if (!is_gimple_assign (def_stmt)\n+\t  || !CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt)))\n+\treturn false;\n+\n+      innerop = gimple_assign_rhs1 (def_stmt);\n+\n+      if (TREE_CODE (innerop) == SSA_NAME)\n+\t{\n+\t  value_range_t *vr = get_value_range (innerop);\n+\n+\t  if (range_int_cst_p (vr)\n+\t      && operand_equal_p (vr->min, integer_zero_node, 0)\n+\t      && operand_equal_p (vr->max, integer_one_node, 0))\n+\t    {\n+\t      tree newconst = fold_convert (TREE_TYPE (innerop), op1);\n+\t      gimple_cond_set_lhs (stmt, innerop);\n+\t      gimple_cond_set_rhs (stmt, newconst);\n+\t      return true;\n+\t    }\n+\t}\n+    }\n+\n   return false;\n }\n "}]}