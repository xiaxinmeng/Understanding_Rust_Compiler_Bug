{"sha": "126b1483704fa2a2c1db26878467130b149e3fb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI2YjE0ODM3MDRmYTJhMmMxZGIyNjg3ODQ2NzEzMGIxNDllM2ZiOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-01-12T17:56:15Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-01-12T17:56:15Z"}, "message": "mn10300: Add delegitimize_address hook.\n\nThis suppresses warnings generated by the dwarf2 output\nroutines about uninterpretable addresses.\n\nFrom-SVN: r168724", "tree": {"sha": "1d25a059757a618d7e9bda7bdc570b24153f3ccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d25a059757a618d7e9bda7bdc570b24153f3ccb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/126b1483704fa2a2c1db26878467130b149e3fb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/126b1483704fa2a2c1db26878467130b149e3fb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/126b1483704fa2a2c1db26878467130b149e3fb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/126b1483704fa2a2c1db26878467130b149e3fb8/comments", "author": null, "committer": null, "parents": [{"sha": "f3d9d2e0600f84dec5608464c93f4f6f68649ee5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d9d2e0600f84dec5608464c93f4f6f68649ee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d9d2e0600f84dec5608464c93f4f6f68649ee5"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "70c69e3a565730a3b9b2ee8230f70da5764c24f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126b1483704fa2a2c1db26878467130b149e3fb8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126b1483704fa2a2c1db26878467130b149e3fb8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=126b1483704fa2a2c1db26878467130b149e3fb8", "patch": "@@ -1,5 +1,8 @@\n 2011-01-12  Richard Henderson  <rth@redhat.com>\n \n+\t* config/mn10300/mn10300.c (mn10300_delegitimize_address): New.\n+\t(TARGET_DELEGITIMIZE_ADDRESS): New.\n+\n \t* config/mn10300/mn10300.md (UNSPEC_BSCH): New.\n \t(clzsi2, *bsch): New patterns.\n "}, {"sha": "1cea6c291d9aaf2f331ac52f6beda147685b9003", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126b1483704fa2a2c1db26878467130b149e3fb8/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126b1483704fa2a2c1db26878467130b149e3fb8/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=126b1483704fa2a2c1db26878467130b149e3fb8", "patch": "@@ -2038,6 +2038,66 @@ mn10300_legitimate_constant_p (rtx x)\n   return true;\n }\n \n+/* Undo pic address legitimization for the benefit of debug info.  */\n+\n+static rtx\n+mn10300_delegitimize_address (rtx orig_x)\n+{\n+  rtx x = orig_x, ret, addend = NULL;\n+  bool need_mem;\n+\n+  if (MEM_P (x))\n+    x = XEXP (x, 0);\n+  if (GET_CODE (x) != PLUS || GET_MODE (x) != Pmode)\n+    return orig_x;\n+\n+  if (XEXP (x, 0) == pic_offset_table_rtx)\n+    ;\n+  /* With the REG+REG addressing of AM33, var-tracking can re-assemble\n+     some odd-looking \"addresses\" that were never valid in the first place.\n+     We need to look harder to avoid warnings being emitted.  */\n+  else if (GET_CODE (XEXP (x, 0)) == PLUS)\n+    {\n+      rtx x0 = XEXP (x, 0);\n+      rtx x00 = XEXP (x0, 0);\n+      rtx x01 = XEXP (x0, 1);\n+\n+      if (x00 == pic_offset_table_rtx)\n+\taddend = x01;\n+      else if (x01 == pic_offset_table_rtx)\n+\taddend = x00;\n+      else\n+\treturn orig_x;\n+\n+    }\n+  else\n+    return orig_x;\n+  x = XEXP (x, 1);\n+\n+  if (GET_CODE (x) != CONST)\n+    return orig_x;\n+  x = XEXP (x, 0);\n+  if (GET_CODE (x) != UNSPEC)\n+    return orig_x;\n+\n+  ret = XVECEXP (x, 0, 0);\n+  if (XINT (x, 1) == UNSPEC_GOTOFF)\n+    need_mem = false;\n+  else if (XINT (x, 1) == UNSPEC_GOT)\n+    need_mem = true;\n+  else\n+    return orig_x;\n+\n+  gcc_assert (GET_CODE (ret) == SYMBOL_REF);\n+  if (need_mem != MEM_P (orig_x))\n+    return orig_x;\n+  if (need_mem && addend)\n+    return orig_x;\n+  if (addend)\n+    ret = gen_rtx_PLUS (Pmode, addend, ret);\n+  return ret;\n+}\n+\n /* For addresses, costs are relative to \"MOV (Rm),Rn\".  For AM33 this is\n    the 3-byte fully general instruction; for MN103 this is the 2-byte form\n    with an address register.  */\n@@ -2722,6 +2782,8 @@ mn10300_conditional_register_usage (void)\n \n #undef  TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P\tmn10300_legitimate_address_p\n+#undef  TARGET_DELEGITIMIZE_ADDRESS\n+#define TARGET_DELEGITIMIZE_ADDRESS\tmn10300_delegitimize_address\n \n #undef  TARGET_PREFERRED_RELOAD_CLASS\n #define TARGET_PREFERRED_RELOAD_CLASS mn10300_preferred_reload_class"}]}