{"sha": "ffd8633682c0936947fc1cc8c6f18f7340eede2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZkODYzMzY4MmMwOTM2OTQ3ZmMxY2M4YzZmMThmNzM0MGVlZGUyZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-06-08T02:44:31Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-06-08T02:44:31Z"}, "message": "(MULTILIB_SELECT): Delete definition.\n\n(multilib_select): Delete static initializer.\n(multilib_obstack, multilib_raw): New global variables.\n(multilib.h): Include inside multilib_raw definition.\n(main): Set multilib_select from multilib_raw.\n\nFrom-SVN: r12239", "tree": {"sha": "755c7a8b4fa03b25ab4a974fa647df421ac6b612", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/755c7a8b4fa03b25ab4a974fa647df421ac6b612"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffd8633682c0936947fc1cc8c6f18f7340eede2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffd8633682c0936947fc1cc8c6f18f7340eede2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffd8633682c0936947fc1cc8c6f18f7340eede2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffd8633682c0936947fc1cc8c6f18f7340eede2e/comments", "author": null, "committer": null, "parents": [{"sha": "2d917903294885f0f65accf65a231e89a4b2778f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d917903294885f0f65accf65a231e89a4b2778f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d917903294885f0f65accf65a231e89a4b2778f"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "8ca931302f61ff216ba12598369a147006fb6fbe", "filename": "gcc/gcc.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffd8633682c0936947fc1cc8c6f18f7340eede2e/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffd8633682c0936947fc1cc8c6f18f7340eede2e/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=ffd8633682c0936947fc1cc8c6f18f7340eede2e", "patch": "@@ -56,9 +56,6 @@ int __spawnvp ();\n #endif\n #include <stdio.h>\n \n-/* Include multi-lib information.  */\n-#include \"multilib.h\"\n-\n #ifndef R_OK\n #define R_OK 4\n #define W_OK 2\n@@ -475,13 +472,6 @@ proper position among the other output files.  */\n #endif\n #endif\n \n-/* MULTILIB_SELECT comes from multilib.h.  It gives a\n-   string interpreted by set_multilib_dir to select a library\n-   subdirectory based on the compiler options.  */\n-#ifndef MULTILIB_SELECT\n-#define MULTILIB_SELECT \". ;\"\n-#endif\n-\n static char *cpp_spec = CPP_SPEC;\n static char *cpp_predefines = CPP_PREDEFINES;\n static char *cc1_spec = CC1_SPEC;\n@@ -495,7 +485,14 @@ static char *libgcc_spec = LIBGCC_SPEC;\n static char *endfile_spec = ENDFILE_SPEC;\n static char *startfile_spec = STARTFILE_SPEC;\n static char *switches_need_spaces = SWITCHES_NEED_SPACES;\n-static char *multilib_select = MULTILIB_SELECT;\n+\n+/* Some compilers have limits on line lengths, and the multilib_select\n+   string can be very long, so we build it at run time.  */\n+static struct obstack multilib_obstack;\n+static char *multilib_raw[] = {\n+#include \"multilib.h\"\n+};\n+static char *multilib_select;\n \n #ifdef EXTRA_SPECS\n static struct { char *name, *spec; } extra_specs[] = { EXTRA_SPECS };\n@@ -4201,6 +4198,19 @@ main (argc, argv)\n \n   obstack_init (&obstack);\n \n+  /* Build multilib_select from the separate lines that make up each multilib\n+     selection.  */\n+  {\n+    char **q = multilib_raw;\n+\n+    obstack_init (&multilib_obstack);\n+    while ((p = *q++) != (char *)0)\n+      obstack_grow (&multilib_obstack, p, strlen (p));\n+\n+    obstack_1grow (&multilib_obstack, 0);\n+    multilib_select = obstack_finish (&multilib_obstack);\n+  }\n+\n   /* Set up to remember the pathname of gcc and any options\n      needed for collect.  We use argv[0] instead of programname because\n      we need the complete pathname.  */"}]}