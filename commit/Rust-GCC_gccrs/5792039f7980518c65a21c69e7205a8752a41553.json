{"sha": "5792039f7980518c65a21c69e7205a8752a41553", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc5MjAzOWY3OTgwNTE4YzY1YTIxYzY5ZTcyMDVhODc1MmE0MTU1Mw==", "commit": {"author": {"name": "Daniel Kraft", "email": "d@domob.eu", "date": "2010-09-03T13:10:40Z"}, "committer": {"name": "Daniel Kraft", "email": "domob@gcc.gnu.org", "date": "2010-09-03T13:10:40Z"}, "message": "re PR fortran/34162 (F2008: Allow internal procedures as actual argument)\n\n2010-09-03  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/34162\n\t* resolve.c (resolve_actual_arglist): Allow internal procedure\n\tas actual argument with Fortran 2008.\n\n2010-09-03  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/34162\n\t* gfortran.dg/internal_dummy_1.f90: Add -std=f2003.\n\t* gfortran.dg/internal_dummy_2.f08: New test.\n\t* gfortran.dg/internal_dummy_3.f08: New test.\n\t* gfortran.dg/internal_dummy_4.f08: New test.\n\nFrom-SVN: r163813", "tree": {"sha": "dbe054b3977920f2dedac672087f0abf7f71c3ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbe054b3977920f2dedac672087f0abf7f71c3ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5792039f7980518c65a21c69e7205a8752a41553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5792039f7980518c65a21c69e7205a8752a41553", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5792039f7980518c65a21c69e7205a8752a41553", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5792039f7980518c65a21c69e7205a8752a41553/comments", "author": {"login": "domob1812", "id": 4943644, "node_id": "MDQ6VXNlcjQ5NDM2NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domob1812", "html_url": "https://github.com/domob1812", "followers_url": "https://api.github.com/users/domob1812/followers", "following_url": "https://api.github.com/users/domob1812/following{/other_user}", "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}", "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions", "organizations_url": "https://api.github.com/users/domob1812/orgs", "repos_url": "https://api.github.com/users/domob1812/repos", "events_url": "https://api.github.com/users/domob1812/events{/privacy}", "received_events_url": "https://api.github.com/users/domob1812/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c7b11d2a3e5dfb6e1b4e11f098bf4e42ffdf88f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c7b11d2a3e5dfb6e1b4e11f098bf4e42ffdf88f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c7b11d2a3e5dfb6e1b4e11f098bf4e42ffdf88f"}], "stats": {"total": 211, "additions": 208, "deletions": 3}, "files": [{"sha": "ad46b0aaede60c05e4973cdcf8f00d0852bb9e43", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5792039f7980518c65a21c69e7205a8752a41553/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5792039f7980518c65a21c69e7205a8752a41553/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5792039f7980518c65a21c69e7205a8752a41553", "patch": "@@ -1,3 +1,9 @@\n+2010-09-03  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/34162\n+\t* resolve.c (resolve_actual_arglist): Allow internal procedure\n+\tas actual argument with Fortran 2008.\n+\n 2010-09-03  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/44602"}, {"sha": "88f43cdfcbf142ff9fef52d52d1489309e21fc3f", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5792039f7980518c65a21c69e7205a8752a41553/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5792039f7980518c65a21c69e7205a8752a41553/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=5792039f7980518c65a21c69e7205a8752a41553", "patch": "@@ -1590,8 +1590,11 @@ resolve_actual_arglist (gfc_actual_arglist *arg, procedure_type ptype,\n \t  if (sym->attr.contained && !sym->attr.use_assoc\n \t      && sym->ns->proc_name->attr.flavor != FL_MODULE)\n \t    {\n-\t      gfc_error (\"Internal procedure '%s' is not allowed as an \"\n-\t\t\t \"actual argument at %L\", sym->name, &e->where);\n+\t      if (gfc_notify_std (GFC_STD_F2008,\n+\t\t\t\t  \"Fortran 2008: Internal procedure '%s' is\"\n+\t\t\t\t  \" used as actual argument at %L\",\n+\t\t\t\t  sym->name, &e->where) == FAILURE)\n+\t\treturn FAILURE;\n \t    }\n \n \t  if (sym->attr.elemental && !sym->attr.intrinsic)"}, {"sha": "d27f8695f4cf02d173bbcc39a45e4802847a47be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5792039f7980518c65a21c69e7205a8752a41553/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5792039f7980518c65a21c69e7205a8752a41553/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5792039f7980518c65a21c69e7205a8752a41553", "patch": "@@ -1,3 +1,11 @@\n+2010-09-03  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/34162\n+\t* gfortran.dg/internal_dummy_1.f90: Add -std=f2003.\n+\t* gfortran.dg/internal_dummy_2.f08: New test.\n+\t* gfortran.dg/internal_dummy_3.f08: New test.\n+\t* gfortran.dg/internal_dummy_4.f08: New test.\n+\n 2010-09-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/45500"}, {"sha": "28ca7a4b47a06e6b51bb8140e32dbd99fb9e214e", "filename": "gcc/testsuite/gfortran.dg/internal_dummy_1.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5792039f7980518c65a21c69e7205a8752a41553/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_dummy_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5792039f7980518c65a21c69e7205a8752a41553/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_dummy_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_dummy_1.f90?ref=5792039f7980518c65a21c69e7205a8752a41553", "patch": "@@ -1,10 +1,11 @@\n ! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n ! Tests the fix for 20861, in which internal procedures were permitted to\n ! be dummy arguments.\n !\n ! Contributed by Joost VandeVondele  <jv244@cam.ac.uk>\n !\n-CALL DD(TT) ! { dg-error \"is not allowed as an actual argument\" }\n+CALL DD(TT) ! { dg-error \"Fortran 2008: Internal procedure 'tt' is used as actual argument\" }\n CONTAINS\n SUBROUTINE DD(F)\n   INTERFACE"}, {"sha": "c6adcc57d7217adf9e679b8283a37364932fd8d9", "filename": "gcc/testsuite/gfortran.dg/internal_dummy_2.f08", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5792039f7980518c65a21c69e7205a8752a41553/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_dummy_2.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5792039f7980518c65a21c69e7205a8752a41553/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_dummy_2.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_dummy_2.f08?ref=5792039f7980518c65a21c69e7205a8752a41553", "patch": "@@ -0,0 +1,64 @@\n+! { dg-do run }\n+! [ dg-options \"-std=f2008\" }\n+\n+! PR fortran/34162\n+! Internal procedures as actual arguments (like restricted closures).\n+! Check it works basically.\n+\n+! Contributed by Daniel Kraft, d@domob.eu.\n+\n+MODULE m\n+  IMPLICIT NONE\n+\n+  ABSTRACT INTERFACE\n+    FUNCTION returnValue ()\n+      INTEGER :: returnValue\n+    END FUNCTION returnValue\n+\n+    SUBROUTINE doSomething ()\n+    END SUBROUTINE doSomething\n+  END INTERFACE\n+\n+CONTAINS\n+\n+  FUNCTION callIt (proc)\n+    PROCEDURE(returnValue) :: proc\n+    INTEGER :: callIt\n+\n+    callIt = proc ()\n+  END FUNCTION callIt\n+\n+  SUBROUTINE callSub (proc)\n+    PROCEDURE(doSomething) :: proc\n+\n+    CALL proc ()\n+  END SUBROUTINE callSub\n+\n+END MODULE m\n+\n+PROGRAM main\n+  USE :: m\n+  IMPLICIT NONE\n+\n+  INTEGER :: a\n+\n+  a = 42\n+  IF (callIt (myA) /= 42) CALL abort ()\n+\n+  CALL callSub (incA)\n+  IF (a /= 43) CALL abort ()\n+\n+CONTAINS\n+\n+  FUNCTION myA ()\n+    INTEGER :: myA\n+    myA = a\n+  END FUNCTION myA\n+\n+  SUBROUTINE incA ()\n+    a = a + 1\n+  END SUBROUTINE incA\n+\n+END PROGRAM main\n+\n+! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "b5a50ee6c6c6fbd6b2ebd36b00400add82c09b5a", "filename": "gcc/testsuite/gfortran.dg/internal_dummy_3.f08", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5792039f7980518c65a21c69e7205a8752a41553/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_dummy_3.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5792039f7980518c65a21c69e7205a8752a41553/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_dummy_3.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_dummy_3.f08?ref=5792039f7980518c65a21c69e7205a8752a41553", "patch": "@@ -0,0 +1,66 @@\n+! { dg-do run }\n+! [ dg-options \"-std=f2008\" }\n+\n+! PR fortran/34162\n+! Internal procedures as actual arguments (like restricted closures).\n+! More challenging test involving recursion.\n+\n+! Contributed by Daniel Kraft, d@domob.eu.\n+\n+MODULE m\n+  IMPLICIT NONE\n+\n+  ABSTRACT INTERFACE\n+    FUNCTION returnValue ()\n+      INTEGER :: returnValue\n+    END FUNCTION returnValue\n+  END INTERFACE\n+\n+  PROCEDURE(returnValue), POINTER :: first\n+\n+CONTAINS\n+\n+  RECURSIVE SUBROUTINE test (level, current, previous)\n+    INTEGER, INTENT(IN) :: level\n+    PROCEDURE(returnValue), OPTIONAL :: previous, current\n+\n+    IF (PRESENT (current)) THEN\n+      IF (current () /= level - 1) CALL abort ()\n+    END IF\n+\n+    IF (PRESENT (previous)) THEN\n+      IF (previous () /= level - 2) CALL abort ()\n+    END IF\n+\n+    IF (level == 1) THEN\n+      first => myLevel\n+    END IF\n+    IF (first () /= 1) CALL abort ()\n+\n+    IF (level == 10) RETURN\n+\n+    IF (PRESENT (current)) THEN\n+      CALL test (level + 1, myLevel, current)\n+    ELSE\n+      CALL test (level + 1, myLevel)\n+    END IF\n+\n+  CONTAINS\n+\n+    FUNCTION myLevel ()\n+      INTEGER :: myLevel\n+      myLevel = level\n+    END FUNCTION myLevel\n+    \n+  END SUBROUTINE test\n+\n+END MODULE m\n+\n+PROGRAM main\n+  USE :: m\n+  IMPLICIT NONE\n+\n+  CALL test (1)\n+END PROGRAM main\n+\n+! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "1d8b8b2288e0ca8713f6aa1f6b637951a237c5fe", "filename": "gcc/testsuite/gfortran.dg/internal_dummy_4.f08", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5792039f7980518c65a21c69e7205a8752a41553/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_dummy_4.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5792039f7980518c65a21c69e7205a8752a41553/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_dummy_4.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_dummy_4.f08?ref=5792039f7980518c65a21c69e7205a8752a41553", "patch": "@@ -0,0 +1,57 @@\n+! { dg-do run }\n+! PR fortran/34133\n+! PR fortran/34162\n+!\n+! Test of using internal bind(C) procedures as\n+! actual argument. Bind(c) on internal procedures and\n+! internal procedures are actual argument are\n+! Fortran 2008 (draft) extension.\n+!\n+module test_mod\n+  use iso_c_binding\n+  implicit none\n+contains\n+  subroutine test_sub(a, arg, res)\n+    interface\n+      subroutine a(x) bind(C)\n+        import\n+        integer(c_int), intent(inout) :: x\n+      end subroutine a\n+    end interface\n+    integer(c_int), intent(inout) :: arg\n+    integer(c_int), intent(in) :: res\n+    call a(arg)\n+    if(arg /= res) call abort()\n+  end subroutine test_sub\n+  subroutine test_func(a, arg, res)\n+    interface\n+      integer(c_int) function a(x) bind(C)\n+        import\n+        integer(c_int), intent(in) :: x\n+      end function a\n+    end interface\n+    integer(c_int), intent(in) :: arg\n+    integer(c_int), intent(in) :: res\n+    if(a(arg) /= res) call abort()\n+  end subroutine test_func\n+end module test_mod\n+\n+program main\n+  use test_mod\n+  implicit none\n+  integer :: a\n+  a = 33\n+  call test_sub (one, a, 7*33)\n+  a = 23\n+  call test_func(two, a, -123*23)\n+contains\n+  subroutine one(x) bind(c)\n+     integer(c_int),intent(inout) :: x\n+     x = 7*x\n+  end subroutine one\n+  integer(c_int) function two(y) bind(c)\n+     integer(c_int),intent(in) :: y\n+     two = -123*y\n+  end function two\n+end program main\n+! { dg-final { cleanup-modules \"test_mod\" } }"}]}