{"sha": "44fe2e801cd57019e45cb0e66fd9ba6e4a8e18b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRmZTJlODAxY2Q1NzAxOWU0NWNiMGU2NmZkOWJhNmU0YThlMThiMg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-12T02:40:53Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-12T02:40:53Z"}, "message": "entered into RCS\n\nFrom-SVN: r1565", "tree": {"sha": "8ccb94d7809bf22a61cb164d5bdcba68ae4b9411", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ccb94d7809bf22a61cb164d5bdcba68ae4b9411"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44fe2e801cd57019e45cb0e66fd9ba6e4a8e18b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44fe2e801cd57019e45cb0e66fd9ba6e4a8e18b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44fe2e801cd57019e45cb0e66fd9ba6e4a8e18b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44fe2e801cd57019e45cb0e66fd9ba6e4a8e18b2/comments", "author": null, "committer": null, "parents": [{"sha": "e2f2127c322fb176748f82991290c474b315d0c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2f2127c322fb176748f82991290c474b315d0c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2f2127c322fb176748f82991290c474b315d0c6"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "f691ce33c893bf5b0b9ecd8a53194384fdc24aa3", "filename": "gcc/halfpic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44fe2e801cd57019e45cb0e66fd9ba6e4a8e18b2/gcc%2Fhalfpic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44fe2e801cd57019e45cb0e66fd9ba6e4a8e18b2/gcc%2Fhalfpic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhalfpic.c?ref=44fe2e801cd57019e45cb0e66fd9ba6e4a8e18b2", "patch": "@@ -225,7 +225,7 @@ half_pic_encode (decl)\n #endif\n \n   /* If this is not an external reference, it can't be half-pic.  */\n-  if (!TREE_EXTERNAL (decl) && (code != VAR_DECL || !TREE_PUBLIC (decl)))\n+  if (!DECL_EXTERNAL (decl) && (code != VAR_DECL || !TREE_PUBLIC (decl)))\n     return;\n \n   ptr = half_pic_hash (IDENTIFIER_POINTER (asm_name),"}, {"sha": "1713cc3f0ef5bec7725864db3575bf5d07b21c8c", "filename": "gcc/stmt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44fe2e801cd57019e45cb0e66fd9ba6e4a8e18b2/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44fe2e801cd57019e45cb0e66fd9ba6e4a8e18b2/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=44fe2e801cd57019e45cb0e66fd9ba6e4a8e18b2", "patch": "@@ -895,12 +895,12 @@ fixup_gotos (thisblock, stack_level, cleanup_list, first_insn, dont_jump_in)\n \t      && (after_label == 0\n \t\t  || INSN_UID (first_insn) < INSN_UID (after_label))\n \t      && INSN_UID (first_insn) > INSN_UID (f->before_jump)\n-\t      && ! TREE_REGDECL (f->target))\n+\t      && ! DECL_REGISTER (f->target))\n \t    {\n \t      error_with_decl (f->target,\n \t\t\t       \"label `%s' used before containing binding contour\");\n \t      /* Prevent multiple errors for one label.  */\n-\t      TREE_REGDECL (f->target) = 1;\n+\t      DECL_REGISTER (f->target) = 1;\n \t    }\n \n \t  /* Execute cleanups for blocks this jump exits.  */\n@@ -2720,7 +2720,7 @@ expand_decl (decl)\n \n   if (TREE_CODE (decl) != VAR_DECL)\n     return;\n-  if (TREE_STATIC (decl) || TREE_EXTERNAL (decl))\n+  if (TREE_STATIC (decl) || DECL_EXTERNAL (decl))\n     return;\n \n   /* Create the RTL representation for the variable.  */\n@@ -2745,7 +2745,7 @@ expand_decl (decl)\n \t\t&& TREE_CODE (type) == REAL_TYPE)\n \t   && ! TREE_THIS_VOLATILE (decl)\n \t   && ! TREE_ADDRESSABLE (decl)\n-\t   && (TREE_REGDECL (decl) || ! obey_regdecls))\n+\t   && (DECL_REGISTER (decl) || ! obey_regdecls))\n     {\n       /* Automatic variable that can go in a register.  */\n       DECL_RTL (decl) = gen_reg_rtx (DECL_MODE (decl));"}, {"sha": "72148ee44a0bf24c5fc0bc6e93ab106d2ed73b9f", "filename": "gcc/varasm.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44fe2e801cd57019e45cb0e66fd9ba6e4a8e18b2/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44fe2e801cd57019e45cb0e66fd9ba6e4a8e18b2/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=44fe2e801cd57019e45cb0e66fd9ba6e4a8e18b2", "patch": "@@ -310,21 +310,21 @@ make_decl_rtl (decl, asmspec, top_level)\n       DECL_RTL (decl) = 0;\n \n       /* First detect errors in declaring global registers.  */\n-      if (TREE_REGDECL (decl) && reg_number == -1)\n+      if (DECL_REGISTER (decl) && reg_number == -1)\n \terror_with_decl (decl,\n \t\t\t \"register name not specified for `%s'\");\n-      else if (TREE_REGDECL (decl) && reg_number < 0)\n+      else if (DECL_REGISTER (decl) && reg_number < 0)\n \terror_with_decl (decl,\n \t\t\t \"invalid register name for `%s'\");\n-      else if ((reg_number >= 0 || reg_number == -3) && ! TREE_REGDECL (decl))\n+      else if ((reg_number >= 0 || reg_number == -3) && ! DECL_REGISTER (decl))\n \terror_with_decl (decl,\n \t\t\t \"register name given for non-register variable `%s'\");\n-      else if (TREE_REGDECL (decl) && TREE_CODE (decl) == FUNCTION_DECL)\n+      else if (DECL_REGISTER (decl) && TREE_CODE (decl) == FUNCTION_DECL)\n \terror (\"function declared `register'\");\n-      else if (TREE_REGDECL (decl) && TYPE_MODE (TREE_TYPE (decl)) == BLKmode)\n+      else if (DECL_REGISTER (decl) && TYPE_MODE (TREE_TYPE (decl)) == BLKmode)\n \terror_with_decl (decl, \"data type of `%s' isn't suitable for a register\");\n       /* Now handle properly declared static register variables.  */\n-      else if (TREE_REGDECL (decl))\n+      else if (DECL_REGISTER (decl))\n \t{\n \t  int nregs;\n #if 0 /* yylex should print the warning for this */\n@@ -361,7 +361,7 @@ make_decl_rtl (decl, asmspec, top_level)\n \t  /* Can't use just the variable's own name for a variable\n \t     whose scope is less than the whole file.\n \t     Concatenate a distinguishing number.  */\n-\t  if (!top_level && !TREE_EXTERNAL (decl) && asmspec == 0)\n+\t  if (!top_level && !DECL_EXTERNAL (decl) && asmspec == 0)\n \t    {\n \t      char *label;\n \n@@ -696,7 +696,7 @@ assemble_variable (decl, top_level, at_end)\n   /* Normally no need to say anything for external references,\n      since assembler considers all undefined symbols external.  */\n \n-  if (TREE_EXTERNAL (decl))\n+  if (DECL_EXTERNAL (decl))\n     return;\n \n   /* Output no assembler code for a function declaration.\n@@ -947,7 +947,7 @@ assemble_external (decl)\n {\n #ifdef ASM_OUTPUT_EXTERNAL\n   if (TREE_CODE_CLASS (TREE_CODE (decl)) == 'd'\n-      && TREE_EXTERNAL (decl) && TREE_PUBLIC (decl))\n+      && DECL_EXTERNAL (decl) && TREE_PUBLIC (decl))\n     {\n       rtx rtl = DECL_RTL (decl);\n "}]}