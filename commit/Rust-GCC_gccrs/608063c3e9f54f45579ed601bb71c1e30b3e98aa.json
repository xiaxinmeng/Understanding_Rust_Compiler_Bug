{"sha": "608063c3e9f54f45579ed601bb71c1e30b3e98aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA4MDYzYzNlOWY1NGY0NTU3OWVkNjAxYmI3MWMxZTMwYjNlOThhYQ==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2007-07-25T15:43:04Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2007-07-25T15:43:04Z"}, "message": "alpha.c (alpha_mangle_fundamental_type): Rename to...\n\n\tgcc/\n\t* config/alpha/alpha.c (alpha_mangle_fundamental_type): Rename to...\n\t(alpha_mangle_type): This.\n\t(TARGET_MANGLE_FUNDAMENTAL_TYPE): Don't define.\n\t(TARGET_MANGLE_TYPE): Define this instead.\n\t* config/arm/arm-protos.h (arm_mangle_type): Add prototype.\n\t* config/arm/arm.c (TARGET_MANGLE_TYPE): Define target hook.\n\t(arm_init_neon_builtins): Fix comment.\n\t(arm_mangle_map_entry): New.\n\t(arm_mangle_map): New.\n\t(arm_mangle_type): New.\n\t* config/i386/i386.c (ix86_mangle_fundamental_type): Rename to...\n\t(ix86_mangle_type): This. Use TYPE_MAIN_VARIANT and restrict\n\tmangled types to VOID_TYPE, BOOLEAN_TYPE, INTEGER_TYPE, REAL_TYPE.\n\t(TARGET_MANGLE_FUNDAMENTAL_TYPE): Don't define.\n\t(TARGET_MANGLE_TYPE): Define this instead.\n\t* config/ia64/ia64.c (ia64_mangle_fundamental_type): Rename to...\n\t(ia64_mangle_type): This. Use TYPE_MAIN_VARIANT  and restrict\n\tmangled types to VOID_TYPE, BOOLEAN_TYPE, INTEGER_TYPE, REAL_TYPE.\n\t(TARGET_MANGLE_FUNDAMENTAL_TYPE): Don't define.\n\t(TARGET_MANGLE_TYPE): Define this instead.\n\t* config/rs6000/rs6000.c (rs6000_mangle_fundamental_type): Rename\n\tto...\n\t(rs6000_mangle_type): This. Use TYPE_MAIN_VARIANT.\n\t(TARGET_MANGLE_FUNDAMENTAL_TYPE): Don't define.\n\t(TARGET_MANGLE_TYPE): Define this instead.\n\t* config/s390/s390.c (s390_mangle_fundamental_type): Rename to...\n\t(s390_mangle_type): This.\n\t(TARGET_MANGLE_FUNDAMENTAL_TYPE): Don't define.\n\t(TARGET_MANGLE_TYPE): Define this instead.\n\t* config/sparc/sparc.c (sparc_mangle_fundamental_type): Rename to...\n\t(sparc_mangle_type): This.\n\t(TARGET_MANGLE_FUNDAMENTAL_TYPE): Don't define.\n\t(TARGET_MANGLE_TYPE): Define this instead.\n\t* cp/mangle.c (write_type): Call mangle_type target hook on all\n\ttypes before mangling.  Use original type, not main variant, as\n\targument.\n\t* target-def.h (TARGET_MANGLE_FUNDAMENTAL_TYPE): Rename hook to...\n\t(TARGET_MANGLE_TYPE): This.\n\t* target.h (gcc_target): Rename mangle_fundamental_type to\n\tmangle_type.\n\t* doc/tm.texi (TARGET_MANGLE_FUNDAMENTAL_TYPE): Rename section to...\n\t(TARGET_MANGLE_TYPE): This. Note slightly different semantics.\n\n\nCo-Authored-By: Mark Shinwell <shinwell@codesourcery.com>\n\nFrom-SVN: r126917", "tree": {"sha": "0134a32da12d27e340838fbc13221a2c4fe20a54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0134a32da12d27e340838fbc13221a2c4fe20a54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/608063c3e9f54f45579ed601bb71c1e30b3e98aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/608063c3e9f54f45579ed601bb71c1e30b3e98aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/608063c3e9f54f45579ed601bb71c1e30b3e98aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/608063c3e9f54f45579ed601bb71c1e30b3e98aa/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18efbe51766315fbe4d23dd710f22eab09ee826a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18efbe51766315fbe4d23dd710f22eab09ee826a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18efbe51766315fbe4d23dd710f22eab09ee826a"}], "stats": {"total": 391, "additions": 268, "deletions": 123}, "files": [{"sha": "e891974313a66bd24d2585823f5d5c8dd34fbd38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=608063c3e9f54f45579ed601bb71c1e30b3e98aa", "patch": "@@ -1,3 +1,49 @@\n+2007-07-25  Julian Brown  <julian@codesourcery.com>\n+\t    Mark Shinwell  <shinwell@codesourcery.com>\n+\n+\t* config/alpha/alpha.c (alpha_mangle_fundamental_type): Rename to...\n+\t(alpha_mangle_type): This.\n+\t(TARGET_MANGLE_FUNDAMENTAL_TYPE): Don't define.\n+\t(TARGET_MANGLE_TYPE): Define this instead.\n+\t* config/arm/arm-protos.h (arm_mangle_type): Add prototype.\n+\t* config/arm/arm.c (TARGET_MANGLE_TYPE): Define target hook.\n+\t(arm_init_neon_builtins): Fix comment.\n+\t(arm_mangle_map_entry): New.\n+\t(arm_mangle_map): New.\n+\t(arm_mangle_type): New.\n+\t* config/i386/i386.c (ix86_mangle_fundamental_type): Rename to...\n+\t(ix86_mangle_type): This. Use TYPE_MAIN_VARIANT and restrict\n+\tmangled types to VOID_TYPE, BOOLEAN_TYPE, INTEGER_TYPE, REAL_TYPE.\n+\t(TARGET_MANGLE_FUNDAMENTAL_TYPE): Don't define.\n+\t(TARGET_MANGLE_TYPE): Define this instead.\n+\t* config/ia64/ia64.c (ia64_mangle_fundamental_type): Rename to...\n+\t(ia64_mangle_type): This. Use TYPE_MAIN_VARIANT  and restrict\n+\tmangled types to VOID_TYPE, BOOLEAN_TYPE, INTEGER_TYPE, REAL_TYPE.\n+\t(TARGET_MANGLE_FUNDAMENTAL_TYPE): Don't define.\n+\t(TARGET_MANGLE_TYPE): Define this instead.\n+\t* config/rs6000/rs6000.c (rs6000_mangle_fundamental_type): Rename\n+\tto...\n+\t(rs6000_mangle_type): This. Use TYPE_MAIN_VARIANT.\n+\t(TARGET_MANGLE_FUNDAMENTAL_TYPE): Don't define.\n+\t(TARGET_MANGLE_TYPE): Define this instead.\n+\t* config/s390/s390.c (s390_mangle_fundamental_type): Rename to...\n+\t(s390_mangle_type): This.\n+\t(TARGET_MANGLE_FUNDAMENTAL_TYPE): Don't define.\n+\t(TARGET_MANGLE_TYPE): Define this instead.\n+\t* config/sparc/sparc.c (sparc_mangle_fundamental_type): Rename to...\n+\t(sparc_mangle_type): This.\n+\t(TARGET_MANGLE_FUNDAMENTAL_TYPE): Don't define.\n+\t(TARGET_MANGLE_TYPE): Define this instead.\n+\t* cp/mangle.c (write_type): Call mangle_type target hook on all\n+\ttypes before mangling.  Use original type, not main variant, as\n+\targument.\n+\t* target-def.h (TARGET_MANGLE_FUNDAMENTAL_TYPE): Rename hook to...\n+\t(TARGET_MANGLE_TYPE): This.\n+\t* target.h (gcc_target): Rename mangle_fundamental_type to\n+\tmangle_type.\n+\t* doc/tm.texi (TARGET_MANGLE_FUNDAMENTAL_TYPE): Rename section to...\n+\t(TARGET_MANGLE_TYPE): This. Note slightly different semantics.\n+\n 2007-07-25  Julian Brown  <julian@codesourcery.com>\n \t    Paul Brook  <paul@codesourcery.com>\n \t    Joseph Myers  <joseph@codesourcery.com>"}, {"sha": "03edfee8af0dec4f0b12d7ddc76e64f73f6d7d2b", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=608063c3e9f54f45579ed601bb71c1e30b3e98aa", "patch": "@@ -238,10 +238,10 @@ alpha_handle_option (size_t code, const char *arg, int value)\n }\n \n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n-/* Implement TARGET_MANGLE_FUNDAMENTAL_TYPE.  */\n+/* Implement TARGET_MANGLE_TYPE.  */\n \n static const char *\n-alpha_mangle_fundamental_type (tree type)\n+alpha_mangle_type (tree type)\n {\n   if (TYPE_MAIN_VARIANT (type) == long_double_type_node\n       && TARGET_LONG_DOUBLE_128)\n@@ -10709,8 +10709,8 @@ alpha_init_libfuncs (void)\n #define TARGET_HANDLE_OPTION alpha_handle_option\n \n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n-#undef TARGET_MANGLE_FUNDAMENTAL_TYPE\n-#define TARGET_MANGLE_FUNDAMENTAL_TYPE alpha_mangle_fundamental_type\n+#undef TARGET_MANGLE_TYPE\n+#define TARGET_MANGLE_TYPE alpha_mangle_type\n #endif\n \n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "000775d7894be78536702433ba2b2274eaf401db", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=608063c3e9f54f45579ed601bb71c1e30b3e98aa", "patch": "@@ -211,4 +211,6 @@ extern void arm_pr_long_calls (struct cpp_reader *);\n extern void arm_pr_no_long_calls (struct cpp_reader *);\n extern void arm_pr_long_calls_off (struct cpp_reader *);\n \n+extern const char *arm_mangle_type (tree);\n+\n #endif /* ! GCC_ARM_PROTOS_H */"}, {"sha": "68aa89e49f506e5a49d5d0f16cfb0d9b538b7178", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=608063c3e9f54f45579ed601bb71c1e30b3e98aa", "patch": "@@ -382,6 +382,9 @@ static void arm_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM arm_cannot_force_const_mem\n \n+#undef TARGET_MANGLE_TYPE\n+#define TARGET_MANGLE_TYPE arm_mangle_type\n+\n #ifdef HAVE_AS_TLS\n #undef TARGET_ASM_OUTPUT_DWARF_DTPREL\n #define TARGET_ASM_OUTPUT_DWARF_DTPREL arm_output_dwarf_dtprel\n@@ -14846,7 +14849,7 @@ arm_init_neon_builtins (void)\n \n   /* Define typedefs which exactly correspond to the modes we are basing vector\n      types on.  If you change these names you'll need to change\n-     the table used by arm_mangle_vector_type too.  */\n+     the table used by arm_mangle_type too.  */\n   (*lang_hooks.types.register_builtin_type) (neon_intQI_type_node,\n \t\t\t\t\t     \"__builtin_neon_qi\");\n   (*lang_hooks.types.register_builtin_type) (neon_intHI_type_node,\n@@ -18850,4 +18853,69 @@ thumb2_output_casesi (rtx *operands)\n     }\n }\n \n+/* A table and a function to perform ARM-specific name mangling for\n+   NEON vector types in order to conform to the AAPCS (see \"Procedure\n+   Call Standard for the ARM Architecture\", Appendix A).  To qualify\n+   for emission with the mangled names defined in that document, a\n+   vector type must not only be of the correct mode but also be\n+   composed of NEON vector element types (e.g. __builtin_neon_qi).  */\n+typedef struct\n+{\n+  enum machine_mode mode;\n+  const char *element_type_name;\n+  const char *aapcs_name;\n+} arm_mangle_map_entry;\n+\n+static arm_mangle_map_entry arm_mangle_map[] = {\n+  /* 64-bit containerized types.  */\n+  { V8QImode,  \"__builtin_neon_qi\",     \"15__simd64_int8_t\" },\n+  { V8QImode,  \"__builtin_neon_uqi\",    \"16__simd64_uint8_t\" },\n+  { V4HImode,  \"__builtin_neon_hi\",     \"16__simd64_int16_t\" },\n+  { V4HImode,  \"__builtin_neon_uhi\",    \"17__simd64_uint16_t\" },\n+  { V2SImode,  \"__builtin_neon_si\",     \"16__simd64_int32_t\" },\n+  { V2SImode,  \"__builtin_neon_usi\",    \"17__simd64_uint32_t\" },\n+  { V2SFmode,  \"__builtin_neon_sf\",     \"18__simd64_float32_t\" },\n+  { V8QImode,  \"__builtin_neon_poly8\",  \"16__simd64_poly8_t\" },\n+  { V4HImode,  \"__builtin_neon_poly16\", \"17__simd64_poly16_t\" },\n+  /* 128-bit containerized types.  */\n+  { V16QImode, \"__builtin_neon_qi\",     \"16__simd128_int8_t\" },\n+  { V16QImode, \"__builtin_neon_uqi\",    \"17__simd128_uint8_t\" },\n+  { V8HImode,  \"__builtin_neon_hi\",     \"17__simd128_int16_t\" },\n+  { V8HImode,  \"__builtin_neon_uhi\",    \"18__simd128_uint16_t\" },\n+  { V4SImode,  \"__builtin_neon_si\",     \"17__simd128_int32_t\" },\n+  { V4SImode,  \"__builtin_neon_usi\",    \"18__simd128_uint32_t\" },\n+  { V4SFmode,  \"__builtin_neon_sf\",     \"19__simd128_float32_t\" },\n+  { V16QImode, \"__builtin_neon_poly8\",  \"17__simd128_poly8_t\" },\n+  { V8HImode,  \"__builtin_neon_poly16\", \"18__simd128_poly16_t\" },\n+  { VOIDmode, NULL, NULL }\n+};\n+\n+const char *\n+arm_mangle_type (tree type)\n+{\n+  arm_mangle_map_entry *pos = arm_mangle_map;\n+\n+  if (TREE_CODE (type) != VECTOR_TYPE)\n+    return NULL;\n+\n+  /* Check the mode of the vector type, and the name of the vector\n+     element type, against the table.  */\n+  while (pos->mode != VOIDmode)\n+    {\n+      tree elt_type = TREE_TYPE (type);\n+\n+      if (pos->mode == TYPE_MODE (type)\n+\t  && TREE_CODE (TYPE_NAME (elt_type)) == TYPE_DECL\n+\t  && !strcmp (IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (elt_type))),\n+\t\t      pos->element_type_name))\n+        return pos->aapcs_name;\n+\n+      pos++;\n+    }\n+\n+  /* Use the default mangling for unrecognized (possibly user-defined)\n+     vector types.  */\n+  return NULL;\n+}\n+\n #include \"gt-arm.h\""}, {"sha": "1ddd60de66e60d575b4a6221595ba949725e6f60", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=608063c3e9f54f45579ed601bb71c1e30b3e98aa", "patch": "@@ -22761,8 +22761,14 @@ i386_solaris_elf_named_section (const char *name, unsigned int flags,\n /* Return the mangling of TYPE if it is an extended fundamental type.  */\n \n static const char *\n-ix86_mangle_fundamental_type (tree type)\n+ix86_mangle_type (tree type)\n {\n+  type = TYPE_MAIN_VARIANT (type);\n+\n+  if (TREE_CODE (type) != VOID_TYPE && TREE_CODE (type) != BOOLEAN_TYPE\n+      && TREE_CODE (type) != INTEGER_TYPE && TREE_CODE (type) != REAL_TYPE)\n+    return NULL;\n+\n   switch (TYPE_MODE (type))\n     {\n     case TFmode:\n@@ -23593,8 +23599,8 @@ static const struct attribute_spec ix86_attribute_table[] =\n #define TARGET_INSERT_ATTRIBUTES SUBTARGET_INSERT_ATTRIBUTES\n #endif\n \n-#undef TARGET_MANGLE_FUNDAMENTAL_TYPE\n-#define TARGET_MANGLE_FUNDAMENTAL_TYPE ix86_mangle_fundamental_type\n+#undef TARGET_MANGLE_TYPE\n+#define TARGET_MANGLE_TYPE ix86_mangle_type\n \n #undef TARGET_STACK_PROTECT_FAIL\n #define TARGET_STACK_PROTECT_FAIL ix86_stack_protect_fail"}, {"sha": "a07374b1fa9644365922b46727adccedbe610ece", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=608063c3e9f54f45579ed601bb71c1e30b3e98aa", "patch": "@@ -279,7 +279,7 @@ static tree ia64_gimplify_va_arg (tree, tree, tree *, tree *);\n static bool ia64_scalar_mode_supported_p (enum machine_mode mode);\n static bool ia64_vector_mode_supported_p (enum machine_mode mode);\n static bool ia64_cannot_force_const_mem (rtx);\n-static const char *ia64_mangle_fundamental_type (tree);\n+static const char *ia64_mangle_type (tree);\n static const char *ia64_invalid_conversion (tree, tree);\n static const char *ia64_invalid_unary_op (int, tree);\n static const char *ia64_invalid_binary_op (int, tree, tree);\n@@ -476,8 +476,8 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM ia64_cannot_force_const_mem\n \n-#undef TARGET_MANGLE_FUNDAMENTAL_TYPE\n-#define TARGET_MANGLE_FUNDAMENTAL_TYPE ia64_mangle_fundamental_type\n+#undef TARGET_MANGLE_TYPE\n+#define TARGET_MANGLE_TYPE ia64_mangle_type\n \n #undef TARGET_INVALID_CONVERSION\n #define TARGET_INVALID_CONVERSION ia64_invalid_conversion\n@@ -9739,8 +9739,14 @@ ia64_profile_hook (int labelno)\n /* Return the mangling of TYPE if it is an extended fundamental type.  */\n \n static const char *\n-ia64_mangle_fundamental_type (tree type)\n+ia64_mangle_type (tree type)\n {\n+  type = TYPE_MAIN_VARIANT (type);\n+\n+  if (TREE_CODE (type) != VOID_TYPE && TREE_CODE (type) != BOOLEAN_TYPE\n+      && TREE_CODE (type) != INTEGER_TYPE && TREE_CODE (type) != REAL_TYPE)\n+    return NULL;\n+\n   /* On HP-UX, \"long double\" is mangled as \"e\" so __float128 is\n      mangled as \"e\".  */\n   if (!TARGET_HPUX && TYPE_MODE (type) == TFmode)"}, {"sha": "f2cb51fc551375d617d932d3721bbba5d0385a16", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=608063c3e9f54f45579ed601bb71c1e30b3e98aa", "patch": "@@ -710,7 +710,7 @@ static tree rs6000_handle_altivec_attribute (tree *, tree, tree, int, bool *);\n static bool rs6000_ms_bitfield_layout_p (tree);\n static tree rs6000_handle_struct_attribute (tree *, tree, tree, int, bool *);\n static void rs6000_eliminate_indexed_memrefs (rtx operands[2]);\n-static const char *rs6000_mangle_fundamental_type (tree);\n+static const char *rs6000_mangle_type (tree);\n extern const struct attribute_spec rs6000_attribute_table[];\n static void rs6000_set_default_type_attributes (tree);\n static bool rs6000_reg_live_or_pic_offset_p (int);\n@@ -1061,8 +1061,8 @@ static const char alt_reg_names[][8] =\n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN rs6000_expand_builtin\n \n-#undef TARGET_MANGLE_FUNDAMENTAL_TYPE\n-#define TARGET_MANGLE_FUNDAMENTAL_TYPE rs6000_mangle_fundamental_type\n+#undef TARGET_MANGLE_TYPE\n+#define TARGET_MANGLE_TYPE rs6000_mangle_type\n \n #undef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS rs6000_init_libfuncs\n@@ -18959,8 +18959,14 @@ rs6000_handle_altivec_attribute (tree *node,\n    elements; we must teach the compiler how to mangle them.  */\n \n static const char *\n-rs6000_mangle_fundamental_type (tree type)\n+rs6000_mangle_type (tree type)\n {\n+  type = TYPE_MAIN_VARIANT (type);\n+\n+  if (TREE_CODE (type) != VOID_TYPE && TREE_CODE (type) != BOOLEAN_TYPE\n+      && TREE_CODE (type) != INTEGER_TYPE && TREE_CODE (type) != REAL_TYPE)\n+    return NULL;\n+\n   if (type == bool_char_type_node) return \"U6__boolc\";\n   if (type == bool_short_type_node) return \"U6__bools\";\n   if (type == pixel_type_node) return \"u7__pixel\";"}, {"sha": "979c167ef7607723c1f15e878198adb85e402eaa", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=608063c3e9f54f45579ed601bb71c1e30b3e98aa", "patch": "@@ -4368,10 +4368,10 @@ s390_output_dwarf_dtprel (FILE *file, int size, rtx x)\n }\n \n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n-/* Implement TARGET_MANGLE_FUNDAMENTAL_TYPE.  */\n+/* Implement TARGET_MANGLE_TYPE.  */\n \n static const char *\n-s390_mangle_fundamental_type (tree type)\n+s390_mangle_type (tree type)\n {\n   if (TYPE_MAIN_VARIANT (type) == long_double_type_node\n       && TARGET_LONG_DOUBLE_128)\n@@ -9343,8 +9343,8 @@ s390_reorg (void)\n #endif\n \n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n-#undef TARGET_MANGLE_FUNDAMENTAL_TYPE\n-#define TARGET_MANGLE_FUNDAMENTAL_TYPE s390_mangle_fundamental_type\n+#undef TARGET_MANGLE_TYPE\n+#define TARGET_MANGLE_TYPE s390_mangle_type\n #endif\n \n #undef TARGET_SCALAR_MODE_SUPPORTED_P"}, {"sha": "05c754110af89ba28591a75b451c567e7a4aa52c", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=608063c3e9f54f45579ed601bb71c1e30b3e98aa", "patch": "@@ -396,7 +396,7 @@ static void sparc_dwarf_handle_frame_unspec (const char *, rtx, int);\n static void sparc_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n static void sparc_file_end (void);\n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n-static const char *sparc_mangle_fundamental_type (tree);\n+static const char *sparc_mangle_type (tree);\n #endif\n #ifdef SUBTARGET_ATTRIBUTE_TABLE\n const struct attribute_spec sparc_attribute_table[];\n@@ -558,8 +558,8 @@ static bool fpu_option_set = false;\n #define TARGET_ASM_FILE_END sparc_file_end\n \n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n-#undef TARGET_MANGLE_FUNDAMENTAL_TYPE\n-#define TARGET_MANGLE_FUNDAMENTAL_TYPE sparc_mangle_fundamental_type\n+#undef TARGET_MANGLE_TYPE\n+#define TARGET_MANGLE_TYPE sparc_mangle_type\n #endif\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n@@ -8888,10 +8888,10 @@ sparc_file_end (void)\n }\n \n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n-/* Implement TARGET_MANGLE_FUNDAMENTAL_TYPE.  */\n+/* Implement TARGET_MANGLE_TYPE.  */\n \n static const char *\n-sparc_mangle_fundamental_type (tree type)\n+sparc_mangle_type (tree type)\n {\n   if (!TARGET_64BIT\n       && TYPE_MAIN_VARIANT (type) == long_double_type_node"}, {"sha": "5452f6cce795220306dfb72d9f37c9e0a2a10366", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 88, "deletions": 83, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=608063c3e9f54f45579ed601bb71c1e30b3e98aa", "patch": "@@ -1575,103 +1575,108 @@ write_type (tree type)\n     write_array_type (type);\n   else\n     {\n+      tree type_orig = type;\n+\n       /* See through any typedefs.  */\n       type = TYPE_MAIN_VARIANT (type);\n \n       if (TYPE_PTRMEM_P (type))\n \twrite_pointer_to_member_type (type);\n-      else switch (TREE_CODE (type))\n-\t{\n-\tcase VOID_TYPE:\n-\tcase BOOLEAN_TYPE:\n-\tcase INTEGER_TYPE:  /* Includes wchar_t.  */\n-\tcase REAL_TYPE:\n-\t{\n+      else\n+        {\n \t  /* Handle any target-specific fundamental types.  */\n \t  const char *target_mangling\n-\t    = targetm.mangle_fundamental_type (type);\n+\t    = targetm.mangle_type (type_orig);\n \n \t  if (target_mangling)\n \t    {\n \t      write_string (target_mangling);\n \t      return;\n \t    }\n \n-\t  /* If this is a typedef, TYPE may not be one of\n-\t     the standard builtin type nodes, but an alias of one.  Use\n-\t     TYPE_MAIN_VARIANT to get to the underlying builtin type.  */\n-\t  write_builtin_type (TYPE_MAIN_VARIANT (type));\n-\t  ++is_builtin_type;\n-\t  break;\n-\t}\n-\n-\tcase COMPLEX_TYPE:\n-\t  write_char ('C');\n-\t  write_type (TREE_TYPE (type));\n-\t  break;\n-\n-\tcase FUNCTION_TYPE:\n-\tcase METHOD_TYPE:\n-\t  write_function_type (type);\n-\t  break;\n-\n-\tcase UNION_TYPE:\n-\tcase RECORD_TYPE:\n-\tcase ENUMERAL_TYPE:\n-\t  /* A pointer-to-member function is represented as a special\n-\t     RECORD_TYPE, so check for this first.  */\n-\t  if (TYPE_PTRMEMFUNC_P (type))\n-\t    write_pointer_to_member_type (type);\n-\t  else\n-\t    write_class_enum_type (type);\n-\t  break;\n-\n-\tcase TYPENAME_TYPE:\n-\tcase UNBOUND_CLASS_TEMPLATE:\n-\t  /* We handle TYPENAME_TYPEs and UNBOUND_CLASS_TEMPLATEs like\n-\t     ordinary nested names.  */\n-\t  write_nested_name (TYPE_STUB_DECL (type));\n-\t  break;\n-\n-\tcase POINTER_TYPE:\n-\t  write_char ('P');\n-\t  write_type (TREE_TYPE (type));\n-\t  break;\n-\n-\tcase REFERENCE_TYPE:\n-\t  if (TYPE_REF_IS_RVALUE (type))\n-            write_char('R');\n-\t  write_char ('R');\n-\t  write_type (TREE_TYPE (type));\n-\t  break;\n-\n-\tcase TEMPLATE_TYPE_PARM:\n-\tcase TEMPLATE_PARM_INDEX:\n-\t  write_template_param (type);\n-\t  break;\n-\n-\tcase TEMPLATE_TEMPLATE_PARM:\n-\t  write_template_template_param (type);\n-\t  break;\n-\n-\tcase BOUND_TEMPLATE_TEMPLATE_PARM:\n-\t  write_template_template_param (type);\n-\t  write_template_args\n-\t    (TI_ARGS (TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (type)));\n-\t  break;\n-\n-\tcase VECTOR_TYPE:\n-\t  write_string (\"U8__vector\");\n-\t  write_type (TREE_TYPE (type));\n-\t  break;\n-\n-        case TYPE_PACK_EXPANSION:\n-          write_string (\"U10__variadic\");\n-          write_type (PACK_EXPANSION_PATTERN (type));\n-          break;\n-\n-\tdefault:\n-\t  gcc_unreachable ();\n+\t  switch (TREE_CODE (type))\n+\t    {\n+\t    case VOID_TYPE:\n+\t    case BOOLEAN_TYPE:\n+\t    case INTEGER_TYPE:  /* Includes wchar_t.  */\n+\t    case REAL_TYPE:\n+\t      {\n+\t\t/* If this is a typedef, TYPE may not be one of\n+\t\t   the standard builtin type nodes, but an alias of one.  Use\n+\t\t   TYPE_MAIN_VARIANT to get to the underlying builtin type.  */\n+\t\twrite_builtin_type (TYPE_MAIN_VARIANT (type));\n+\t\t++is_builtin_type;\n+\t      }\n+\t      break;\n+\n+\t    case COMPLEX_TYPE:\n+\t      write_char ('C');\n+\t      write_type (TREE_TYPE (type));\n+\t      break;\n+\n+\t    case FUNCTION_TYPE:\n+\t    case METHOD_TYPE:\n+\t      write_function_type (type);\n+\t      break;\n+\n+\t    case UNION_TYPE:\n+\t    case RECORD_TYPE:\n+\t    case ENUMERAL_TYPE:\n+\t      /* A pointer-to-member function is represented as a special\n+\t\t RECORD_TYPE, so check for this first.  */\n+\t      if (TYPE_PTRMEMFUNC_P (type))\n+\t\twrite_pointer_to_member_type (type);\n+\t      else\n+\t\twrite_class_enum_type (type);\n+\t      break;\n+\n+\t    case TYPENAME_TYPE:\n+\t    case UNBOUND_CLASS_TEMPLATE:\n+\t      /* We handle TYPENAME_TYPEs and UNBOUND_CLASS_TEMPLATEs like\n+\t\t ordinary nested names.  */\n+\t      write_nested_name (TYPE_STUB_DECL (type));\n+\t      break;\n+\n+\t    case POINTER_TYPE:\n+\t      write_char ('P');\n+\t      write_type (TREE_TYPE (type));\n+\t      break;\n+\n+\t    case REFERENCE_TYPE:\n+\t      if (TYPE_REF_IS_RVALUE (type))\n+        \twrite_char('R');\n+\t      write_char ('R');\n+\t      write_type (TREE_TYPE (type));\n+\t      break;\n+\n+\t    case TEMPLATE_TYPE_PARM:\n+\t    case TEMPLATE_PARM_INDEX:\n+\t      write_template_param (type);\n+\t      break;\n+\n+\t    case TEMPLATE_TEMPLATE_PARM:\n+\t      write_template_template_param (type);\n+\t      break;\n+\n+\t    case BOUND_TEMPLATE_TEMPLATE_PARM:\n+\t      write_template_template_param (type);\n+\t      write_template_args\n+\t\t(TI_ARGS (TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (type)));\n+\t      break;\n+\n+\t    case VECTOR_TYPE:\n+\t      write_string (\"U8__vector\");\n+\t      write_type (TREE_TYPE (type));\n+\t      break;\n+\n+            case TYPE_PACK_EXPANSION:\n+              write_string (\"U10__variadic\");\n+              write_type (PACK_EXPANSION_PATTERN (type));\n+              break;\n+\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n \t}\n     }\n "}, {"sha": "a8bd0365fba2b50ed784817e07bec45a162c94ae", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=608063c3e9f54f45579ed601bb71c1e30b3e98aa", "patch": "@@ -1502,15 +1502,16 @@ may affect its placement.\n Returns true if the target supports decimal floating point.\n @end deftypefn\n \n-@deftypefn {Target Hook} {const char *} TARGET_MANGLE_FUNDAMENTAL_TYPE (tree @var{type})\n-If your target defines any fundamental types, define this hook to\n-return the appropriate encoding for these types as part of a C++\n-mangled name.  The @var{type} argument is the tree structure\n-representing the type to be mangled.  The hook may be applied to trees\n-which are not target-specific fundamental types; it should return\n-@code{NULL} for all such types, as well as arguments it does not\n-recognize.  If the return value is not @code{NULL}, it must point to\n-a statically-allocated string constant.\n+@deftypefn {Target Hook} {const char *} TARGET_MANGLE_TYPE (tree @var{type})\n+If your target defines any fundamental types, or any types your target\n+uses should be mangled differently from the default, define this hook\n+to return the appropriate encoding for these types as part of a C++\n+mangled name.  The @var{type} argument is the tree structure representing\n+the type to be mangled.  The hook may be applied to trees which are\n+not target-specific fundamental types; it should return @code{NULL}\n+for all such types, as well as arguments it does not recognize.  If the\n+return value is not @code{NULL}, it must point to a statically-allocated\n+string constant.\n \n Target-specific fundamental types might be new fundamental types or\n qualified versions of ordinary fundamental types.  Encode new\n@@ -1525,6 +1526,11 @@ code used to represent the unqualified version of this type.  (See\n codes.)  In both cases the spaces are for clarity; do not include any\n spaces in your string.\n \n+This hook is applied to types prior to typedef resolution.  If the mangled\n+name for a particular type depends only on that type's main variant, you\n+can perform typedef resolution yourself using @code{TYPE_MAIN_VARIANT}\n+before mangling.\n+\n The default version of this hook always returns @code{NULL}, which is\n appropriate for a target that does not define any new fundamental\n types."}, {"sha": "d549bc4e4d1503e51e5f283e2d514bb83b10a1f1", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=608063c3e9f54f45579ed601bb71c1e30b3e98aa", "patch": "@@ -468,7 +468,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n #define TARGET_ALIGN_ANON_BITFIELD hook_bool_void_false\n #define TARGET_NARROW_VOLATILE_BITFIELD hook_bool_void_false\n #define TARGET_RTX_COSTS hook_bool_rtx_int_int_intp_false\n-#define TARGET_MANGLE_FUNDAMENTAL_TYPE hook_constcharptr_tree_null\n+#define TARGET_MANGLE_TYPE hook_constcharptr_tree_null\n #define TARGET_ALLOCATE_INITIAL_VALUE NULL\n \n #ifndef TARGET_INIT_LIBFUNCS\n@@ -696,7 +696,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n   TARGET_RESOLVE_OVERLOADED_BUILTIN,\t\t\\\n   TARGET_FOLD_BUILTIN,\t\t\t\t\\\n   TARGET_BUILTIN_RECIPROCAL,\t\t\t\\\n-  TARGET_MANGLE_FUNDAMENTAL_TYPE,\t\t\\\n+  TARGET_MANGLE_TYPE,\t\t\t\t\\\n   TARGET_INIT_LIBFUNCS,\t\t\t\t\\\n   TARGET_SECTION_TYPE_FLAGS,\t\t\t\\\n   TARGET_CANNOT_MODIFY_JUMPS_P,\t\t\t\\"}, {"sha": "268af6cf69f80771fe1effe2c6b73bc0eb3bce58", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608063c3e9f54f45579ed601bb71c1e30b3e98aa/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=608063c3e9f54f45579ed601bb71c1e30b3e98aa", "patch": "@@ -505,10 +505,10 @@ struct gcc_target\n      reciprocal of the function, or NULL_TREE if not available.  */\n   tree (* builtin_reciprocal) (unsigned, bool, bool);\n \n-  /* For a vendor-specific fundamental TYPE, return a pointer to\n-     a statically-allocated string containing the C++ mangling for\n-     TYPE.  In all other cases, return NULL.  */\n-  const char * (* mangle_fundamental_type) (tree type);\n+  /* For a vendor-specific TYPE, return a pointer to a statically-allocated\n+     string containing the C++ mangling for TYPE.  In all other cases, return\n+     NULL.  */\n+  const char * (* mangle_type) (tree type);\n \n   /* Make any adjustments to libfunc names needed for this target.  */\n   void (* init_libfuncs) (void);"}]}