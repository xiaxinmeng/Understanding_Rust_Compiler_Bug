{"sha": "89167cad83a461fd0c74d6df3a96a5cd28507469", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkxNjdjYWQ4M2E0NjFmZDBjNzRkNmRmM2E5NmE1Y2QyODUwNzQ2OQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2005-03-15T16:12:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-03-15T16:12:36Z"}, "message": "sem_ch12.adb (Instantiate_Object): If the analysis of the actual parameter reported some error we immediately return.\n\n2005-03-08  Javier Miranda  <miranda@adacore.com>\n\t    Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Instantiate_Object): If the analysis of the actual\n\tparameter reported some error we immediately return. This improves the\n\tbehaviour of the frontend in case of errors.\n\t(Install_Parent, Remove_Parent): Introduce new flag\n\tParent_Unit_Visible, to preserve the proper visibility of the ultimate\n\tancestor of a generic child unit, when the child is being instantiated.\n\t(Inline_Instance_Body): If we are compiling the private\n\tpart or the body of a child unit, restore the proper visibility of the\n\tparents after compiling the instance body.\n\nFrom-SVN: r96503", "tree": {"sha": "3a23f1539efc3ed1acfe979864e4f48f83643ec3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a23f1539efc3ed1acfe979864e4f48f83643ec3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89167cad83a461fd0c74d6df3a96a5cd28507469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89167cad83a461fd0c74d6df3a96a5cd28507469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89167cad83a461fd0c74d6df3a96a5cd28507469", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89167cad83a461fd0c74d6df3a96a5cd28507469/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5905c0beb4325741c0f1cbcadbf1546b77a89dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5905c0beb4325741c0f1cbcadbf1546b77a89dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5905c0beb4325741c0f1cbcadbf1546b77a89dc"}], "stats": {"total": 213, "additions": 134, "deletions": 79}, "files": [{"sha": "53bb2579796ee99068ab662604426ff6b8ac1014", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 134, "deletions": 79, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89167cad83a461fd0c74d6df3a96a5cd28507469/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89167cad83a461fd0c74d6df3a96a5cd28507469/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=89167cad83a461fd0c74d6df3a96a5cd28507469", "patch": "@@ -255,7 +255,7 @@ package body Sem_Ch12 is\n    --  in-out, because in the case of an anonymous type the entity is\n    --  actually created in the procedure.\n \n-   --  The following procedures treat other kinds of formal parameters.\n+   --  The following procedures treat other kinds of formal parameters\n \n    procedure Analyze_Formal_Derived_Type\n      (N   : Node_Id;\n@@ -317,7 +317,7 @@ package body Sem_Ch12 is\n    --  On return, the node N has been rewritten with the actual body.\n \n    procedure Check_Formal_Packages (P_Id : Entity_Id);\n-   --  Apply the following to all formal packages in generic associations.\n+   --  Apply the following to all formal packages in generic associations\n \n    procedure Check_Formal_Package_Instance\n      (Formal_Pack : Entity_Id;\n@@ -475,11 +475,11 @@ package body Sem_Ch12 is\n    --  When compiling an instance of a child unit the parent (which is\n    --  itself an instance) is an enclosing scope that must be made\n    --  immediately visible. This procedure is also used to install the non-\n-   --  generic parent of a generic child unit when compiling its body, so that\n-   --  full views of types in the parent are made visible.\n+   --  generic parent of a generic child unit when compiling its body, so\n+   --  that full views of types in the parent are made visible.\n \n    procedure Remove_Parent (In_Body : Boolean := False);\n-   --  Reverse effect after instantiation of child is complete.\n+   --  Reverse effect after instantiation of child is complete\n \n    procedure Inline_Instance_Body\n      (N        : Node_Id;\n@@ -490,8 +490,11 @@ package body Sem_Ch12 is\n    --  that successive instantiations succeed.\n \n    --  The functions Instantiate_XXX perform various legality checks and build\n-   --  the declarations for instantiated generic parameters.\n-   --  Need to describe what the parameters are ???\n+   --  the declarations for instantiated generic parameters. In all of these\n+   --  Formal is the entity in the generic unit, Actual is the entity of\n+   --  expression in the generic associations, and Analyzed_Formal is the\n+   --  formal in the generic copy, which contains the semantic information to\n+   --  be used to validate the actual.\n \n    function Instantiate_Object\n      (Formal          : Node_Id;\n@@ -680,12 +683,19 @@ package body Sem_Ch12 is\n    --  that the visibility data structures be properly initialized. Once the\n    --  generic is unit is validated, Set_Instance_Env completes Save_Env.\n \n+   Parent_Unit_Visible : Boolean := False;\n+   --  Parent_Unit_Visible is used when the generic is a child unit, and\n+   --  indicates whether the ultimate parent of the generic is visible in the\n+   --  instantiation environment. It is used to reset the visiblity of the\n+   --  parent at the end of the instantiation (see Remove_Parent).\n+\n    type Instance_Env is record\n       Ada_Version         : Ada_Version_Type;\n       Instantiated_Parent : Assoc;\n       Exchanged_Views     : Elist_Id;\n       Hidden_Entities     : Elist_Id;\n       Current_Sem_Unit    : Unit_Number_Type;\n+      Parent_Unit_Visible : Boolean := False;\n    end record;\n \n    package Instance_Envs is new Table.Table (\n@@ -1512,7 +1522,7 @@ package body Sem_Ch12 is\n          Set_Ekind (Id, K);\n          Set_Etype (Id, T);\n \n-      --  Case of generic IN OUT parameter.\n+      --  Case of generic IN OUT parameter\n \n       else\n          --  If the formal has an unconstrained type, construct its\n@@ -1654,7 +1664,7 @@ package body Sem_Ch12 is\n          end if;\n       end if;\n \n-      --  Check for a formal package that is a package renaming.\n+      --  Check for a formal package that is a package renaming\n \n       if Present (Renamed_Object (Gen_Unit)) then\n          Gen_Unit := Renamed_Object (Gen_Unit);\n@@ -1773,7 +1783,7 @@ package body Sem_Ch12 is\n    begin\n       New_Private_Type (N, T, Def);\n \n-      --  Set the size to an arbitrary but legal value.\n+      --  Set the size to an arbitrary but legal value\n \n       Set_Size_Info (T, Standard_Integer);\n       Set_RM_Size   (T, RM_Size (Standard_Integer));\n@@ -1996,7 +2006,7 @@ package body Sem_Ch12 is\n             Defining_Identifier (First (Discriminant_Specifications (N))));\n       end if;\n \n-      --  Enter the new name, and branch to specific routine.\n+      --  Enter the new name, and branch to specific routine\n \n       case Nkind (Def) is\n          when N_Formal_Private_Type_Definition         =>\n@@ -2159,7 +2169,7 @@ package body Sem_Ch12 is\n       Id := Defining_Entity (N);\n       Generate_Definition (Id);\n \n-      --  Expansion is not applied to generic units.\n+      --  Expansion is not applied to generic units\n \n       Start_Generic;\n \n@@ -2385,7 +2395,7 @@ package body Sem_Ch12 is\n \n       Text_IO_Kludge (Name (N));\n \n-      --  Make node global for error reporting.\n+      --  Make node global for error reporting\n \n       Instantiation_Node := N;\n \n@@ -2467,15 +2477,15 @@ package body Sem_Ch12 is\n \n       Set_Entity (Gen_Id, Gen_Unit);\n \n-      --  If generic is a renaming, get original generic unit.\n+      --  If generic is a renaming, get original generic unit\n \n       if Present (Renamed_Object (Gen_Unit))\n         and then Ekind (Renamed_Object (Gen_Unit)) = E_Generic_Package\n       then\n          Gen_Unit := Renamed_Object (Gen_Unit);\n       end if;\n \n-      --  Verify that there are no circular instantiations.\n+      --  Verify that there are no circular instantiations\n \n       if In_Open_Scopes (Gen_Unit) then\n          Error_Msg_NE (\"instantiation of & within itself\", N, Gen_Unit);\n@@ -2505,7 +2515,7 @@ package body Sem_Ch12 is\n \n          Create_Instantiation_Source (N, Gen_Unit, False, S_Adjustment);\n \n-         --  Copy original generic tree, to produce text for instantiation.\n+         --  Copy original generic tree, to produce text for instantiation\n \n          Act_Tree :=\n            Copy_Generic_Node\n@@ -2812,13 +2822,15 @@ package body Sem_Ch12 is\n \n                Set_Cunit_Entity (Current_Sem_Unit, Act_Decl_Id);\n \n-               --  If this is the main unit, replace the main entity as well.\n+               --  If this is the main unit, replace the main entity as well\n \n                if Current_Sem_Unit = Main_Unit then\n                   Main_Unit_Entity := Act_Decl_Id;\n                end if;\n             end if;\n \n+            --  There is a problem with inlining here.\n+\n             Set_Unit (Parent (N), Act_Decl);\n             Set_Parent_Spec (Act_Decl, Parent_Spec (N));\n             Analyze (Act_Decl);\n@@ -3065,20 +3077,42 @@ package body Sem_Ch12 is\n                New_Scope (Curr_Scope);\n                Set_Is_Immediately_Visible (Curr_Scope);\n \n-               --  Finally, restore inner scopes as well.\n+               --  Finally, restore inner scopes as well\n \n                for J in reverse 1 .. Num_Inner loop\n                   New_Scope (Inner_Scopes (J));\n                end loop;\n             end if;\n \n             Restore_Scope_Stack (Handle_Use => False);\n+\n+            if Present (Curr_Scope)\n+              and then\n+                (In_Private_Part (Curr_Scope)\n+                  or else In_Package_Body (Curr_Scope))\n+            then\n+               --  Install private declaration of ancestor units, which\n+               --  are currently available. Restore_Scope_Stack and\n+               --  Install_Context only install the visible part of parents.\n+\n+               declare\n+                  Par : Entity_Id;\n+               begin\n+                  Par := Scope (Curr_Scope);\n+                  while (Present (Par))\n+                    and then Par /= Standard_Standard\n+                  loop\n+                     Install_Private_Declarations (Par);\n+                     Par := Scope (Par);\n+                  end loop;\n+               end;\n+            end if;\n          end if;\n \n-         --  Restore use clauses. For a child unit, use clauses in the\n-         --  parents are restored when installing the context, so only\n-         --  those in inner scopes (and those local to the child unit itself)\n-         --  need to be installed explicitly.\n+         --  Restore use clauses. For a child unit, use clauses in the parents\n+         --  are restored when installing the context, so only those in inner\n+         --  scopes (and those local to the child unit itself) need to be\n+         --  installed explicitly.\n \n          if Is_Child_Unit (Curr_Unit)\n            and then Removed\n@@ -3101,7 +3135,7 @@ package body Sem_Ch12 is\n             Set_Is_Generic_Instance (Instances (J), True);\n          end loop;\n \n-      --  If generic unit is in current unit, current context is correct.\n+      --  If generic unit is in current unit, current context is correct\n \n       else\n          Instantiate_Package_Body\n@@ -3280,7 +3314,7 @@ package body Sem_Ch12 is\n             Set_Cunit_Entity (Current_Sem_Unit, Pack_Id);\n          end if;\n \n-         --  The instance is not a freezing point for the new subprogram.\n+         --  The instance is not a freezing point for the new subprogram\n \n          Set_Is_Frozen (Act_Decl_Id, False);\n \n@@ -3309,7 +3343,7 @@ package body Sem_Ch12 is\n \n       Text_IO_Kludge (Gen_Id);\n \n-      --  Make node global for error reporting.\n+      --  Make node global for error reporting\n \n       Instantiation_Node := N;\n       Pre_Analyze_Actuals (N);\n@@ -3400,14 +3434,14 @@ package body Sem_Ch12 is\n \n          Set_Instance_Env (Gen_Unit, Empty);\n \n-         --  Initialize renamings map, for error checking.\n+         --  Initialize renamings map, for error checking\n \n          Generic_Renamings.Set_Last (0);\n          Generic_Renamings_HTable.Reset;\n \n          Create_Instantiation_Source (N, Gen_Unit, False, S_Adjustment);\n \n-         --  Copy original generic tree, to produce text for instantiation.\n+         --  Copy original generic tree, to produce text for instantiation\n \n          Act_Tree :=\n            Copy_Generic_Node\n@@ -3626,7 +3660,7 @@ package body Sem_Ch12 is\n       Set_Library_Unit  (Decl_Cunit, Body_Cunit);\n       Set_Library_Unit  (Body_Cunit, Decl_Cunit);\n \n-      --  Preserve the private nature of the package if needed.\n+      --  Preserve the private nature of the package if needed\n \n       Set_Private_Present (Decl_Cunit, Private_Present (Body_Cunit));\n \n@@ -3767,7 +3801,7 @@ package body Sem_Ch12 is\n         (E1, E2 : Entity_Id) return Boolean\n       is\n          function Original_Entity (E : Entity_Id) return Entity_Id;\n-         --  Follow chain of renamings to the ultimate ancestor.\n+         --  Follow chain of renamings to the ultimate ancestor\n \n          ---------------------\n          -- Original_Entity --\n@@ -4147,7 +4181,7 @@ package body Sem_Ch12 is\n       function Find_Generic_Child\n         (Scop : Entity_Id;\n          Id   : Node_Id) return Entity_Id;\n-      --  Search generic parent for possible child unit with the given name.\n+      --  Search generic parent for possible child unit with the given name\n \n       function In_Enclosing_Instance return Boolean;\n       --  Within an instance of the parent, the child unit may be denoted\n@@ -4314,7 +4348,7 @@ package body Sem_Ch12 is\n                Set_Entity (S, E);\n                Set_Etype (S, Etype (E));\n \n-               --  Indicate that this is a reference to the parent.\n+               --  Indicate that this is a reference to the parent\n \n                if In_Extended_Main_Source_Unit (Gen_Id) then\n                   Set_Is_Instantiated (Inst_Par);\n@@ -4630,7 +4664,7 @@ package body Sem_Ch12 is\n                Next_Elmt (Elmt);\n             end loop;\n \n-            --  Indicate that Inner is being instantiated within  Scop.\n+            --  Indicate that Inner is being instantiated within Scop\n \n             Append_Elmt (Inner, Inner_Instances (Scop));\n          end if;\n@@ -4664,15 +4698,15 @@ package body Sem_Ch12 is\n       --  value (Sloc, Uint, Char) in which case it need not be copied.\n \n       procedure Copy_Descendants;\n-      --  Common utility for various nodes.\n+      --  Common utility for various nodes\n \n       function Copy_Generic_Elist (E : Elist_Id) return Elist_Id;\n-      --  Make copy of element list.\n+      --  Make copy of element list\n \n       function Copy_Generic_List\n         (L         : List_Id;\n          Parent_Id : Node_Id) return List_Id;\n-      --  Apply Copy_Node recursively to the members of a node list.\n+      --  Apply Copy_Node recursively to the members of a node list\n \n       function In_Defining_Unit_Name (Nam : Node_Id) return Boolean;\n       --  True if an identifier is part of the defining program unit name\n@@ -5164,7 +5198,7 @@ package body Sem_Ch12 is\n \n          begin\n             if Present (T) then\n-               --  Retrieve the allocator node in the generic copy.\n+               --  Retrieve the allocator node in the generic copy\n \n                Acc_T := Etype (Parent (Parent (T)));\n                if Present (Acc_T)\n@@ -5387,7 +5421,7 @@ package body Sem_Ch12 is\n       --  node for it.\n \n       function True_Parent (N : Node_Id) return Node_Id;\n-      --  For a subunit, return parent of corresponding stub.\n+      --  For a subunit, return parent of corresponding stub\n \n       -------------\n       -- Earlier --\n@@ -5400,7 +5434,7 @@ package body Sem_Ch12 is\n          P2 : Node_Id := N2;\n \n          procedure Find_Depth (P : in out Node_Id; D : in out Integer);\n-         --  Find distance from given node to enclosing compilation unit.\n+         --  Find distance from given node to enclosing compilation unit\n \n          ----------------\n          -- Find_Depth --\n@@ -5785,6 +5819,7 @@ package body Sem_Ch12 is\n       Saved.Exchanged_Views     := Exchanged_Views;\n       Saved.Hidden_Entities     := Hidden_Entities;\n       Saved.Current_Sem_Unit    := Current_Sem_Unit;\n+      Saved.Parent_Unit_Visible := Parent_Unit_Visible;\n       Instance_Envs.Increment_Last;\n       Instance_Envs.Table (Instance_Envs.Last) := Saved;\n \n@@ -5980,15 +6015,15 @@ package body Sem_Ch12 is\n       Must_Delay : Boolean;\n \n       function Enclosing_Subp (Id : Entity_Id) return Entity_Id;\n-      --  Find subprogram (if any) that encloses instance and/or generic body.\n+      --  Find subprogram (if any) that encloses instance and/or generic body\n \n       function True_Sloc (N : Node_Id) return Source_Ptr;\n       --  If the instance is nested inside a generic unit, the Sloc of the\n       --  instance indicates the place of the original definition, not the\n       --  point of the current enclosing instance. Pending a better usage of\n       --  Slocs to indicate instantiation places, we determine the place of\n       --  origin of a node by finding the maximum sloc of any ancestor node.\n-      --  Why is this not equivalent fo Top_Level_Location ???\n+      --  Why is this not equivalent to Top_Level_Location ???\n \n       --------------------\n       -- Enclosing_Subp --\n@@ -6147,7 +6182,7 @@ package body Sem_Ch12 is\n       --  for the unit itself.\n \n       procedure Install_Noninstance_Specs (Par : Entity_Id);\n-      --  Install the scopes of noninstance parent units ending with Par.\n+      --  Install the scopes of noninstance parent units ending with Par\n \n       procedure Install_Spec (Par : Entity_Id);\n       --  The child unit is within the declarative part of the parent, so\n@@ -6162,13 +6197,11 @@ package body Sem_Ch12 is\n \n       begin\n          E := First_Entity (Par);\n-\n          while Present (E) loop\n-\n             if Ekind (E) = E_Package\n               and then Nkind (Parent (E)) = N_Package_Renaming_Declaration\n             then\n-               --  If this is the renaming for the parent instance, done.\n+               --  If this is the renaming for the parent instance, done\n \n                if Renamed_Object (E) = Par then\n                   exit;\n@@ -6215,6 +6248,10 @@ package body Sem_Ch12 is\n                   Specification (Unit_Declaration_Node (Par));\n \n       begin\n+         if not Is_Child_Unit (Par) then\n+            Parent_Unit_Visible := Is_Immediately_Visible (Par);\n+         end if;\n+\n          New_Scope (Par);\n          Set_Is_Immediately_Visible   (Par);\n          Install_Visible_Declarations (Par);\n@@ -6533,7 +6570,7 @@ package body Sem_Ch12 is\n          if No (Gen_Par) then\n             return False;\n \n-         --  Simplest case: the generic parent of the actual is the formal.\n+         --  Simplest case: the generic parent of the actual is the formal\n \n          elsif Gen_Par = Gen_Anc then\n             return True;\n@@ -6814,16 +6851,16 @@ package body Sem_Ch12 is\n       New_Spec   : Node_Id;\n \n       function From_Parent_Scope (Subp : Entity_Id) return Boolean;\n-      --  If the generic is a child unit, the parent has been installed\n-      --  on the scope stack, but a default subprogram cannot resolve to\n-      --  something on the parent because that parent is not really part\n-      --  of the visible context (it is there to resolve explicit local\n-      --  entities). If the default has resolved in this way, we remove\n-      --  the entity from immediate visibility and analyze the node again\n-      --  to emit an error message or find another visible candidate.\n+      --  If the generic is a child unit, the parent has been installed on the\n+      --  scope stack, but a default subprogram cannot resolve to something on\n+      --  the parent because that parent is not really part of the visible\n+      --  context (it is there to resolve explicit local entities). If the\n+      --  default has resolved in this way, we remove the entity from\n+      --  immediate visibility and analyze the node again to emit an error\n+      --  message or find another visible candidate.\n \n       procedure Valid_Actual_Subprogram (Act : Node_Id);\n-      --  Perform legality check and raise exception on failure.\n+      --  Perform legality check and raise exception on failure\n \n       -----------------------\n       -- From_Parent_Scope --\n@@ -6883,7 +6920,7 @@ package body Sem_Ch12 is\n    begin\n       New_Spec := New_Copy_Tree (Specification (Formal));\n \n-      --  Create new entity for the actual (New_Copy_Tree does not).\n+      --  Create new entity for the actual (New_Copy_Tree does not)\n \n       Set_Defining_Unit_Name\n         (New_Spec, Make_Defining_Identifier (Loc, Chars (Formal_Sub)));\n@@ -7075,7 +7112,8 @@ package body Sem_Ch12 is\n       Subt_Decl : Node_Id := Empty;\n \n    begin\n-      --  Sloc for error message on missing actual.\n+      --  Sloc for error message on missing actual\n+\n       Error_Msg_Sloc := Sloc (Scope (Defining_Identifier (Analyzed_Formal)));\n \n       if Get_Instance_Of (Formal_Id) /= Formal_Id then\n@@ -7088,12 +7126,12 @@ package body Sem_Ch12 is\n \n       if Out_Present (Formal) then\n \n-         --  An IN OUT generic actual must be a name. The instantiation is\n-         --  a renaming declaration. The actual is the name being renamed.\n-         --  We use the actual directly, rather than a copy, because it is not\n+         --  An IN OUT generic actual must be a name. The instantiation is a\n+         --  renaming declaration. The actual is the name being renamed. We\n+         --  use the actual directly, rather than a copy, because it is not\n          --  used further in the list of actuals, and because a copy or a use\n-         --  of relocate_node is incorrect if the instance is nested within\n-         --  a generic. In order to simplify ASIS searches, the Generic_Parent\n+         --  of relocate_node is incorrect if the instance is nested within a\n+         --  generic. In order to simplify ASIS searches, the Generic_Parent\n          --  field links the declaration to the generic association.\n \n          if No (Actual) then\n@@ -7121,6 +7159,12 @@ package body Sem_Ch12 is\n          Append (Decl_Node, List);\n          Analyze (Actual);\n \n+         --  Return if the analysis of the actual reported some error\n+\n+         if Etype (Actual) = Any_Type then\n+            return List;\n+         end if;\n+\n          --  This check is performed here because Analyze_Object_Renaming\n          --  will not check it when Comes_From_Source is False. Note\n          --  though that the check for the actual being the name of an\n@@ -7230,6 +7274,12 @@ package body Sem_Ch12 is\n \n             if Nkind (Actual) /= N_Allocator then\n                Analyze (Actual);\n+\n+               --  Return if the analysis of the actual reported some error\n+\n+               if Etype (Actual) = Any_Type then\n+                  return List;\n+               end if;\n             end if;\n \n             declare\n@@ -7240,9 +7290,9 @@ package body Sem_Ch12 is\n             begin\n                Freeze_Before (Instantiation_Node, Typ);\n \n-               --  If the actual is an aggregate, perform name resolution\n-               --  on its components (the analysis of an aggregate does not\n-               --  do it) to capture local names that may be hidden if the\n+               --  If the actual is an aggregate, perform name resolution on\n+               --  its components (the analysis of an aggregate does not do\n+               --  it) to capture local names that may be hidden if the\n                --  generic is a child unit.\n \n                if Nkind (Actual) = N_Aggregate then\n@@ -7252,7 +7302,7 @@ package body Sem_Ch12 is\n \n          elsif Present (Expression (Formal)) then\n \n-            --  Use default to construct declaration.\n+            --  Use default to construct declaration\n \n             Decl_Node :=\n               Make_Object_Declaration (Sloc (Formal),\n@@ -8302,19 +8352,20 @@ package body Sem_Ch12 is\n \n                   Formal_Subt := Get_Instance_Of (Etype (Formal_Discr));\n \n-                  --  access discriminants match if designated types do.\n+                  --  Access discriminants match if designated types do\n \n                   if Ekind (Base_Type (Formal_Subt)) = E_Anonymous_Access_Type\n-                    and then (Ekind (Base_Type (Etype (Actual_Discr))))\n-                      = E_Anonymous_Access_Type\n-                    and then Get_Instance_Of (\n-                      Designated_Type (Base_Type (Formal_Subt)))\n-                      = Designated_Type (Base_Type (Etype (Actual_Discr)))\n+                    and then (Ekind (Base_Type (Etype (Actual_Discr)))) =\n+                                E_Anonymous_Access_Type\n+                    and then\n+                      Get_Instance_Of\n+                        (Designated_Type (Base_Type (Formal_Subt))) =\n+                           Designated_Type (Base_Type (Etype (Actual_Discr)))\n                   then\n                      null;\n \n                   elsif Base_Type (Formal_Subt) /=\n-                                       Base_Type (Etype (Actual_Discr))\n+                          Base_Type (Etype (Actual_Discr))\n                   then\n                      Error_Msg_NE\n                        (\"types of actual discriminants must match formal\",\n@@ -8965,16 +9016,18 @@ package body Sem_Ch12 is\n                   Install_Private_Declarations (P);\n                end if;\n \n-            --  This looks incomplete: what about compilation units that\n-            --  were made visible by Install_Parent but should not remain\n-            --  visible??? Standard is on the scope stack.\n+            --  If the ultimate parent is a compilation unit, reset its\n+            --  visibility to what it was before instantiation.\n \n-            elsif not In_Open_Scopes (Scope (P)) then\n+            elsif not In_Open_Scopes (Scope (P))\n+              or else\n+               (not Is_Child_Unit (P) and then not Parent_Unit_Visible)\n+            then\n                Set_Is_Immediately_Visible (P, False);\n             end if;\n          end loop;\n \n-         --  Reset visibility of entities in the enclosing scope.\n+         --  Reset visibility of entities in the enclosing scope\n \n          Set_Is_Hidden_Open_Scope (Current_Scope, False);\n          Hidden := First_Elmt (Hidden_Entities);\n@@ -9020,6 +9073,7 @@ package body Sem_Ch12 is\n       Exchanged_Views              := Saved.Exchanged_Views;\n       Hidden_Entities              := Saved.Hidden_Entities;\n       Current_Sem_Unit             := Saved.Current_Sem_Unit;\n+      Parent_Unit_Visible          := Saved.Parent_Unit_Visible;\n \n       Instance_Envs.Decrement_Last;\n    end Restore_Env;\n@@ -9062,8 +9116,9 @@ package body Sem_Ch12 is\n                Set_Is_Hidden (Ent);\n                Set_Is_Potentially_Use_Visible (Ent, False);\n \n+               --  If package, then recurse\n+\n                if Ekind (Ent) = E_Package then\n-                  --  Recurse.\n                   Restore_Nested_Formal (Ent);\n                end if;\n \n@@ -9579,7 +9634,7 @@ package body Sem_Ch12 is\n             Next (Act2);\n          end loop;\n \n-         --  Find the associations added for default suprograms.\n+         --  Find the associations added for default suprograms\n \n          if Present (Act2) then\n             while Nkind (Act2) /= N_Generic_Association\n@@ -9848,7 +9903,7 @@ package body Sem_Ch12 is\n                   --  access to a composite type, or a parameterless function\n                   --  call that returns an access type.\n \n-                  --  Check whether corresponding entity in prefix is global.\n+                  --  Check whether corresponding entity in prefix is global\n \n                   if Is_Entity_Name (Prefix (N2))\n                     and then Present (Entity (Prefix (N2)))"}]}