{"sha": "38806cd3da0ec930cef1c80934a3aa9afc2c90c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg4MDZjZDNkYTBlYzkzMGNlZjFjODA5MzRhM2FhOWFmYzJjOTBjNQ==", "commit": {"author": {"name": "Patrick Bernardi", "email": "bernardi@adacore.com", "date": "2018-05-25T09:05:28Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-25T09:05:28Z"}, "message": "[Ada] Remove 2GB secondary stack limit for 64-bit processors\n\nThis patch removes the restriction introduced recently that limited the size\nof the secondary stack to 2GB. The size of the secondary stack is now limited\nto half of the size of the memory address space for the target.\n\n2018-05-25  Patrick Bernardi  <bernardi@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/s-parame.ads, libgnat/s-parame__vxworks.ads,\n\tlibgnat/s-parame__ae653.ads, libgnat/s-parame__hpux.ads (Size_Type):\n\tExpand range of type to match the address space of the target.\n\t(Task_Storage_Size): Remove unused type.\n\ngcc/testsuite/\n\n\t* gnat.dg/sec_stack1.adb: New testcase.\n\nFrom-SVN: r260742", "tree": {"sha": "58895590798a0894a31c11c8175435f3c3ba32bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58895590798a0894a31c11c8175435f3c3ba32bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38806cd3da0ec930cef1c80934a3aa9afc2c90c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38806cd3da0ec930cef1c80934a3aa9afc2c90c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38806cd3da0ec930cef1c80934a3aa9afc2c90c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38806cd3da0ec930cef1c80934a3aa9afc2c90c5/comments", "author": {"login": "burratoo", "id": 23646118, "node_id": "MDQ6VXNlcjIzNjQ2MTE4", "avatar_url": "https://avatars.githubusercontent.com/u/23646118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burratoo", "html_url": "https://github.com/burratoo", "followers_url": "https://api.github.com/users/burratoo/followers", "following_url": "https://api.github.com/users/burratoo/following{/other_user}", "gists_url": "https://api.github.com/users/burratoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/burratoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burratoo/subscriptions", "organizations_url": "https://api.github.com/users/burratoo/orgs", "repos_url": "https://api.github.com/users/burratoo/repos", "events_url": "https://api.github.com/users/burratoo/events{/privacy}", "received_events_url": "https://api.github.com/users/burratoo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17dd35f448a689e51e8cd17138c6e942a343f894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17dd35f448a689e51e8cd17138c6e942a343f894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17dd35f448a689e51e8cd17138c6e942a343f894"}], "stats": {"total": 89, "additions": 69, "deletions": 20}, "files": [{"sha": "4c6dd1fa1ecb2f36982ccff005bd35425164ba3a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38806cd3da0ec930cef1c80934a3aa9afc2c90c5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38806cd3da0ec930cef1c80934a3aa9afc2c90c5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=38806cd3da0ec930cef1c80934a3aa9afc2c90c5", "patch": "@@ -1,3 +1,10 @@\n+2018-05-25  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* libgnat/s-parame.ads, libgnat/s-parame__vxworks.ads,\n+\tlibgnat/s-parame__ae653.ads, libgnat/s-parame__hpux.ads (Size_Type):\n+\tExpand range of type to match the address space of the target.\n+\t(Task_Storage_Size): Remove unused type.\n+\n 2018-05-25  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_res.adb (Set_Mixed_Mode_Operand): If the operand is an expression"}, {"sha": "4e9e81fb45dc38c7578283ef5fa7b720d6609679", "filename": "gcc/ada/libgnat/s-parame.ads", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38806cd3da0ec930cef1c80934a3aa9afc2c90c5/gcc%2Fada%2Flibgnat%2Fs-parame.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38806cd3da0ec930cef1c80934a3aa9afc2c90c5/gcc%2Fada%2Flibgnat%2Fs-parame.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-parame.ads?ref=38806cd3da0ec930cef1c80934a3aa9afc2c90c5", "patch": "@@ -55,11 +55,14 @@ package System.Parameters is\n    -- Task And Stack Allocation Control --\n    ---------------------------------------\n \n-   type Task_Storage_Size is new Integer;\n-   --  Type used in tasking units for task storage size\n-\n-   type Size_Type is new Task_Storage_Size;\n-   --  Type used to provide task storage size to runtime\n+   type Size_Type is range\n+     -(2 ** (Integer'(Standard'Address_Size) - 1)) ..\n+     +(2 ** (Integer'(Standard'Address_Size) - 1)) - 1;\n+   --  Type used to provide task stack sizes to the runtime. Sized to permit\n+   --  stack sizes of up to half the total addressable memory space. This may\n+   --  seem excessively large (even for 32-bit systems), however there are many\n+   --  instances of users requiring large stack sizes (for example string\n+   --  processing).\n \n    Unspecified_Size : constant Size_Type := Size_Type'First;\n    --  Value used to indicate that no size type is set"}, {"sha": "e3acbad48c380d8bee06684483a11172ba49755d", "filename": "gcc/ada/libgnat/s-parame__ae653.ads", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38806cd3da0ec930cef1c80934a3aa9afc2c90c5/gcc%2Fada%2Flibgnat%2Fs-parame__ae653.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38806cd3da0ec930cef1c80934a3aa9afc2c90c5/gcc%2Fada%2Flibgnat%2Fs-parame__ae653.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-parame__ae653.ads?ref=38806cd3da0ec930cef1c80934a3aa9afc2c90c5", "patch": "@@ -53,11 +53,14 @@ package System.Parameters is\n    -- Task And Stack Allocation Control --\n    ---------------------------------------\n \n-   type Task_Storage_Size is new Integer;\n-   --  Type used in tasking units for task storage size\n-\n-   type Size_Type is new Task_Storage_Size;\n-   --  Type used to provide task storage size to runtime\n+   type Size_Type is range\n+     -(2 ** (Integer'(Standard'Address_Size) - 1)) ..\n+     +(2 ** (Integer'(Standard'Address_Size) - 1)) - 1;\n+   --  Type used to provide task stack sizes to the runtime. Sized to permit\n+   --  stack sizes of up to half the total addressable memory space. This may\n+   --  seem excessively large (even for 32-bit systems), however there are many\n+   --  instances of users requiring large stack sizes (for example string\n+   --  processing).\n \n    Unspecified_Size : constant Size_Type := Size_Type'First;\n    --  Value used to indicate that no size type is set"}, {"sha": "dfd0e086e6701c05815a1574435e1d4768023fa8", "filename": "gcc/ada/libgnat/s-parame__hpux.ads", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38806cd3da0ec930cef1c80934a3aa9afc2c90c5/gcc%2Fada%2Flibgnat%2Fs-parame__hpux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38806cd3da0ec930cef1c80934a3aa9afc2c90c5/gcc%2Fada%2Flibgnat%2Fs-parame__hpux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-parame__hpux.ads?ref=38806cd3da0ec930cef1c80934a3aa9afc2c90c5", "patch": "@@ -53,11 +53,14 @@ package System.Parameters is\n    -- Task And Stack Allocation Control --\n    ---------------------------------------\n \n-   type Task_Storage_Size is new Integer;\n-   --  Type used in tasking units for task storage size\n-\n-   type Size_Type is new Task_Storage_Size;\n-   --  Type used to provide task storage size to runtime\n+   type Size_Type is range\n+     -(2 ** (Integer'(Standard'Address_Size) - 1)) ..\n+     +(2 ** (Integer'(Standard'Address_Size) - 1)) - 1;\n+   --  Type used to provide task stack sizes to the runtime. Sized to permit\n+   --  stack sizes of up to half the total addressable memory space. This may\n+   --  seem excessively large (even for 32-bit systems), however there are many\n+   --  instances of users requiring large stack sizes (for example string\n+   --  processing).\n \n    Unspecified_Size : constant Size_Type := Size_Type'First;\n    --  Value used to indicate that no size type is set"}, {"sha": "cfab9f7772871c6f1452aa63f5df2f537de40a0c", "filename": "gcc/ada/libgnat/s-parame__vxworks.ads", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38806cd3da0ec930cef1c80934a3aa9afc2c90c5/gcc%2Fada%2Flibgnat%2Fs-parame__vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38806cd3da0ec930cef1c80934a3aa9afc2c90c5/gcc%2Fada%2Flibgnat%2Fs-parame__vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-parame__vxworks.ads?ref=38806cd3da0ec930cef1c80934a3aa9afc2c90c5", "patch": "@@ -53,11 +53,14 @@ package System.Parameters is\n    -- Task And Stack Allocation Control --\n    ---------------------------------------\n \n-   type Task_Storage_Size is new Integer;\n-   --  Type used in tasking units for task storage size\n-\n-   type Size_Type is new Task_Storage_Size;\n-   --  Type used to provide task storage size to runtime\n+   type Size_Type is range\n+     -(2 ** (Integer'(Standard'Address_Size) - 1)) ..\n+     +(2 ** (Integer'(Standard'Address_Size) - 1)) - 1;\n+   --  Type used to provide task stack sizes to the runtime. Sized to permit\n+   --  stack sizes of up to half the total addressable memory space. This may\n+   --  seem excessively large (even for 32-bit systems), however there are many\n+   --  instances of users requiring large stack sizes (for example string\n+   --  processing).\n \n    Unspecified_Size : constant Size_Type := Size_Type'First;\n    --  Value used to indicate that no size type is set"}, {"sha": "bcf7b51cee60c0e131d9189eb64ec290a5c4cc54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38806cd3da0ec930cef1c80934a3aa9afc2c90c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38806cd3da0ec930cef1c80934a3aa9afc2c90c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=38806cd3da0ec930cef1c80934a3aa9afc2c90c5", "patch": "@@ -1,3 +1,7 @@\n+2018-05-25  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* gnat.dg/sec_stack1.adb: New testcase.\n+\n 2018-05-25  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/fixedpnt4.adb: New testcase."}, {"sha": "4caeafedaea968ab17a48099588066ec112ef3d0", "filename": "gcc/testsuite/gnat.dg/sec_stack1.adb", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38806cd3da0ec930cef1c80934a3aa9afc2c90c5/gcc%2Ftestsuite%2Fgnat.dg%2Fsec_stack1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38806cd3da0ec930cef1c80934a3aa9afc2c90c5/gcc%2Ftestsuite%2Fgnat.dg%2Fsec_stack1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fsec_stack1.adb?ref=38806cd3da0ec930cef1c80934a3aa9afc2c90c5", "patch": "@@ -0,0 +1,26 @@\n+--  { dg-do run }\n+--\n+--  This test checks that we can allocate more than 2GB on systems with word\n+--  sizes larger than 32-bits\n+\n+with Ada.Strings.Fixed; use Ada.Strings.Fixed;\n+\n+procedure Sec_Stack1 is\n+   function Get_A_Big_String return String;\n+   --  Return a very close to 2GB string on the secondary stack that would\n+   --  overflow the secondary stack if we still had a 2GB limit.\n+\n+   function Get_A_Big_String return String is\n+      String_Size : constant Natural := Natural'Last;\n+   begin\n+      return String_Size * 'a';\n+   end Get_A_Big_String;\n+\n+begin\n+   --  This test only works on systems with more than 32-bits\n+   if Standard'Address_Size > 32 then\n+      declare\n+         R : String := Get_A_Big_String;\n+      begin null; end;\n+   end if;\n+end Sec_Stack1;"}]}