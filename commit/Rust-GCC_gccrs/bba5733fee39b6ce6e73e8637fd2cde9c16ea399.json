{"sha": "bba5733fee39b6ce6e73e8637fd2cde9c16ea399", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJhNTczM2ZlZTM5YjZjZTZlNzNlODYzN2ZkMmNkZTljMTZlYTM5OQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-10-10T19:20:35Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-10-10T19:20:35Z"}, "message": "re PR c/17881 (Incomplete type warning is issued even for prototypes)\n\n\tPR c/17881\n\t* c-decl.c (grokparms): Don't warn for parameters of incomplete\n\ttype in declarations that are not definitions except for the case\n\tof parameters of void type.\n\ntestsuite:\n\t* parm-incomplete-1.c: New test.\n\nFrom-SVN: r88850", "tree": {"sha": "d764821ea6513c2ad0e0c105e575f0906f409bf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d764821ea6513c2ad0e0c105e575f0906f409bf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bba5733fee39b6ce6e73e8637fd2cde9c16ea399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bba5733fee39b6ce6e73e8637fd2cde9c16ea399", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bba5733fee39b6ce6e73e8637fd2cde9c16ea399", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bba5733fee39b6ce6e73e8637fd2cde9c16ea399/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a780ad2f430e6aeb6e2c7b9dca9093ba5e2ff6e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a780ad2f430e6aeb6e2c7b9dca9093ba5e2ff6e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a780ad2f430e6aeb6e2c7b9dca9093ba5e2ff6e9"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "32049a0ae99b790e48cb2672dae6be0823373756", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba5733fee39b6ce6e73e8637fd2cde9c16ea399/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba5733fee39b6ce6e73e8637fd2cde9c16ea399/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bba5733fee39b6ce6e73e8637fd2cde9c16ea399", "patch": "@@ -1,3 +1,10 @@\n+2004-10-10  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/17881\n+\t* c-decl.c (grokparms): Don't warn for parameters of incomplete\n+\ttype in declarations that are not definitions except for the case\n+\tof parameters of void type.\n+\n 2004-10-10  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-cfg.c: Fix comment typos."}, {"sha": "4d6d24bcb7467587a29c925e78cc901125f29c88", "filename": "gcc/c-decl.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba5733fee39b6ce6e73e8637fd2cde9c16ea399/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba5733fee39b6ce6e73e8637fd2cde9c16ea399/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=bba5733fee39b6ce6e73e8637fd2cde9c16ea399", "patch": "@@ -4648,10 +4648,14 @@ grokparms (struct c_arg_info *arg_info, bool funcdef_flag)\n       tree parm, type, typelt;\n       unsigned int parmno;\n \n-      /* If the arg types are incomplete in a declaration, they must\n-\t include undefined tags.  These tags can never be defined in\n-\t the scope of the declaration, so the types can never be\n-\t completed, and no call can be compiled successfully.  */\n+      /* If there is a parameter of incomplete type in a definition,\n+\t this is an error.  In a declaration this is valid, and a\n+\t struct or union type may be completed later, before any calls\n+\t or definition of the function.  In the case where the tag was\n+\t first declared within the parameter list, a warning has\n+\t already been given.  If a parameter has void type, then\n+\t however the function cannot be defined or called, so\n+\t warn.  */\n \n       for (parm = arg_info->parms, typelt = arg_types, parmno = 1;\n \t   parm;\n@@ -4675,13 +4679,13 @@ grokparms (struct c_arg_info *arg_info, bool funcdef_flag)\n \t\t  TREE_VALUE (typelt) = error_mark_node;\n \t\t  TREE_TYPE (parm) = error_mark_node;\n \t\t}\n-\t      else\n+\t      else if (VOID_TYPE_P (type))\n \t\t{\n \t\t  if (DECL_NAME (parm))\n-\t\t    warning (\"%Jparameter %u (%qD) has incomplete type\",\n+\t\t    warning (\"%Jparameter %u (%qD) has void type\",\n \t\t\t     parm, parmno, parm);\n \t\t  else\n-\t\t    warning (\"%Jparameter %u has incomplete type\",\n+\t\t    warning (\"%Jparameter %u has void type\",\n \t\t\t     parm, parmno);\n \t\t}\n \t    }"}, {"sha": "28a26b2eb76542eb392f8a9c3ff3dcfd3345f8ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba5733fee39b6ce6e73e8637fd2cde9c16ea399/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba5733fee39b6ce6e73e8637fd2cde9c16ea399/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bba5733fee39b6ce6e73e8637fd2cde9c16ea399", "patch": "@@ -1,3 +1,8 @@\n+2004-10-10  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/17881\n+\t* parm-incomplete-1.c: New test.\n+\n 2004-10-09  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/17867"}, {"sha": "3ec713ed612a9147679aaf5069209e7944fcaa42", "filename": "gcc/testsuite/gcc.dg/parm-incomplete-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba5733fee39b6ce6e73e8637fd2cde9c16ea399/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-incomplete-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba5733fee39b6ce6e73e8637fd2cde9c16ea399/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-incomplete-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-incomplete-1.c?ref=bba5733fee39b6ce6e73e8637fd2cde9c16ea399", "patch": "@@ -0,0 +1,28 @@\n+/* Test warnings and errors for incomplete parameter types.  Should\n+   not be warned for in declarations that are not definitions: bug\n+   17881.  Void types may be a special case, especially for unnamed\n+   parameters and when qualified or with a storage class specifier;\n+   see C90 6.5.4.3, DR#017 Q14, C90 TC1, DR#157, C99 J.2 (referencing\n+   C99 6.7.5.3); the precise rules are unclear.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+struct s;\n+void f (struct s);\n+void (*g)(struct s);\n+struct t { void (*p)(struct s); };\n+\n+struct s { int b; };\n+void h (struct s x) { }\n+\n+void j(struct t2); /* { dg-warning \"warning: 'struct t2' declared inside parameter list\" } */\n+/* { dg-warning \"its scope is only\" \"explanation\" { target *-*-* } 19 } */\n+\n+union u;\n+\n+void v(union u x) { } /* { dg-error \"error: parameter 1 \\\\('x'\\\\) has incomplete type\" } */\n+\n+void p(void x); /* { dg-warning \"warning: parameter 1 \\\\('x'\\\\) has void type\" } */\n+\n+void q(const void x); /* { dg-warning \"warning: parameter 1 \\\\('x'\\\\) has void type\" } */"}]}