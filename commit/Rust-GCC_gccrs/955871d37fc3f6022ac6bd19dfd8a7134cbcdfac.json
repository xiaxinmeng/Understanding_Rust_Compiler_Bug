{"sha": "955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU1ODcxZDM3ZmMzZjYwMjJhYzZiZDE5ZGZkOGE3MTM0Y2JjZGZhYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T15:50:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T15:50:40Z"}, "message": "[multiple changes]\n\n2010-06-17  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.ads: Minor code reorganization (specs in alpha order).\n\n2010-06-17  Robert Dewar  <dewar@adacore.com>\n\n\t* debug.adb: New debug flag -gnatd.X to use Expression_With_Actions\n\tnode when expanding short circuit form with actions present for right\n\topnd.\n\t* exp_ch4.adb: Minor reformatting\n\t(Expand_Short_Circuit_Operator): Use new Expression_With_Actions node if\n\tright opeand has actions present, and debug flag -gnatd.X is set.\n\t* exp_util.adb (Insert_Actions): Handle case of Expression_With_Actions\n\tnode.\n\t* nlists.adb (Prepend_List): New procedure\n\t(Prepend_List_To): New procedure\n\t* nlists.ads (Prepend_List): New procedure\n\t(Prepend_List_To): New procedure\n\t* sem.adb: Add processing for Expression_With_Actions\n\t* sem_ch4.adb (Analyze_Expression_With_Actions): New procedure\n\t* sem_ch4.ads (Analyze_Expression_With_Actions): New procedure\n\t* sem_res.adb: Add processing for Expression_With_Actions.\n\t* sem_scil.adb: Add processing for Expression_With_Actions\n\t* sinfo.ads, sinfo.adb (N_Expression_With_Actions): New node.\n\t* sprint.ads, sprint.adb: Add processing for Expression_With_Actions\n\n2010-06-17  Doug Rupp  <rupp@adacore.com>\n\n\t* sem_intr.adb (Check_Intrinsic_Operator): Check that the types\n\tinvolved both have underlying integer types.\n\t* exp_intr.adb (Expand_Binary_Operator) New subprogram to expand a call\n\tto an intrinsic operator when the operand types or sizes are not\n\tidentical.\n\t* s-auxdec-vms_64.ads: Revert \"+\" \"-\" ops back to Address now that\n\t64/32 Address/Integer works.\n\nFrom-SVN: r160929", "tree": {"sha": "c9f3f6e4c77ca57ccafa67fbb4e7460cecb5e071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9f3f6e4c77ca57ccafa67fbb4e7460cecb5e071"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/comments", "author": null, "committer": null, "parents": [{"sha": "b53c1b9ce2c05a9c982bcbdb8434ae167f014161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b53c1b9ce2c05a9c982bcbdb8434ae167f014161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b53c1b9ce2c05a9c982bcbdb8434ae167f014161"}], "stats": {"total": 469, "additions": 387, "deletions": 82}, "files": [{"sha": "70105c9d2b3fad211c2862a865f2b4fe9eca1a54", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "patch": "@@ -1,3 +1,39 @@\n+2010-06-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.ads: Minor code reorganization (specs in alpha order).\n+\n+2010-06-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* debug.adb: New debug flag -gnatd.X to use Expression_With_Actions\n+\tnode when expanding short circuit form with actions present for right\n+\topnd.\n+\t* exp_ch4.adb: Minor reformatting\n+\t(Expand_Short_Circuit_Operator): Use new Expression_With_Actions node if\n+\tright opeand has actions present, and debug flag -gnatd.X is set.\n+\t* exp_util.adb (Insert_Actions): Handle case of Expression_With_Actions\n+\tnode.\n+\t* nlists.adb (Prepend_List): New procedure\n+\t(Prepend_List_To): New procedure\n+\t* nlists.ads (Prepend_List): New procedure\n+\t(Prepend_List_To): New procedure\n+\t* sem.adb: Add processing for Expression_With_Actions\n+\t* sem_ch4.adb (Analyze_Expression_With_Actions): New procedure\n+\t* sem_ch4.ads (Analyze_Expression_With_Actions): New procedure\n+\t* sem_res.adb: Add processing for Expression_With_Actions.\n+\t* sem_scil.adb: Add processing for Expression_With_Actions\n+\t* sinfo.ads, sinfo.adb (N_Expression_With_Actions): New node.\n+\t* sprint.ads, sprint.adb: Add processing for Expression_With_Actions\n+\n+2010-06-17  Doug Rupp  <rupp@adacore.com>\n+\n+\t* sem_intr.adb (Check_Intrinsic_Operator): Check that the types\n+\tinvolved both have underlying integer types.\n+\t* exp_intr.adb (Expand_Binary_Operator) New subprogram to expand a call\n+\tto an intrinsic operator when the operand types or sizes are not\n+\tidentical.\n+\t* s-auxdec-vms_64.ads: Revert \"+\" \"-\" ops back to Address now that\n+\t64/32 Address/Integer works.\n+\n 2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch12.adb (Mark_Context): Refine placement of Withed_Body flag, so"}, {"sha": "529fb33c64f5d35a9164709cf3d32bde5ffb6f50", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "patch": "@@ -141,7 +141,7 @@ package body Debug is\n    --  d.U\n    --  d.V\n    --  d.W  Print out debugging information for Walk_Library_Items\n-   --  d.X\n+   --  d.X  Use Expression_With_Actions for short-circuited forms\n    --  d.Y\n    --  d.Z\n \n@@ -579,6 +579,13 @@ package body Debug is\n    --       the order in which units are walked. This is primarily for SofCheck\n    --       Inspector.\n \n+   --  d.X  By default, the compiler uses an elaborate rewriting framework for\n+   --       short-circuited forms where the right hand condition generates\n+   --       actions to be inserted. Use of this switch causes the compiler to\n+   --       use the much simpler Expression_With_Actions node for this purpose.\n+   --       It is a debug flag to aid transitional implementation in gigi and\n+   --       the back end. As soon as that works fine, we will remove this flag.\n+\n    --  d1   Error messages have node numbers where possible. Normally error\n    --       messages have only source locations. This option is useful when\n    --       debugging errors caused by expanded code, where the source location"}, {"sha": "cb5c4c0db257b883fb005024847d1c3a2ade6654", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 84, "deletions": 63, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "patch": "@@ -323,25 +323,20 @@ package body Exp_Ch4 is\n          if Nkind (Op1) = N_Op_Not then\n             if Kind = N_Op_And then\n                Proc_Name := RTE (RE_Vector_Nor);\n-\n             elsif Kind = N_Op_Or then\n                Proc_Name := RTE (RE_Vector_Nand);\n-\n             else\n                Proc_Name := RTE (RE_Vector_Xor);\n             end if;\n \n          else\n             if Kind = N_Op_And then\n                Proc_Name := RTE (RE_Vector_And);\n-\n             elsif Kind = N_Op_Or then\n                Proc_Name := RTE (RE_Vector_Or);\n-\n             elsif Nkind (Op2) = N_Op_Not then\n                Proc_Name := RTE (RE_Vector_Nxor);\n                Arg2 := Right_Opnd (Op2);\n-\n             else\n                Proc_Name := RTE (RE_Vector_Xor);\n             end if;\n@@ -352,15 +347,15 @@ package body Exp_Ch4 is\n              Name => New_Occurrence_Of (Proc_Name, Loc),\n              Parameter_Associations => New_List (\n                Target,\n-                  Make_Attribute_Reference (Loc,\n-                    Prefix => Arg1,\n-                    Attribute_Name => Name_Address),\n-                  Make_Attribute_Reference (Loc,\n-                    Prefix => Arg2,\n-                    Attribute_Name => Name_Address),\n-                 Make_Attribute_Reference (Loc,\n-                   Prefix => Op1,\n-                    Attribute_Name => Name_Length)));\n+               Make_Attribute_Reference (Loc,\n+                 Prefix         => Arg1,\n+                 Attribute_Name => Name_Address),\n+               Make_Attribute_Reference (Loc,\n+                 Prefix         => Arg2,\n+                 Attribute_Name => Name_Address),\n+               Make_Attribute_Reference (Loc,\n+                 Prefix         => Op1,\n+                 Attribute_Name => Name_Length)));\n       end if;\n \n       Rewrite (N, Call_Node);\n@@ -8718,15 +8713,17 @@ package body Exp_Ch4 is\n    -- Expand_Short_Circuit_Operator --\n    -----------------------------------\n \n-   --  Expand into conditional expression if Actions present, and also deal\n-   --  with optimizing case of arguments being True or False.\n+   --  Deal with special expansion if actions are present for the right operand\n+   --  and deal with optimizing case of arguments being True or False. We also\n+   --  deal with the special case of non-standard boolean values.\n \n    procedure Expand_Short_Circuit_Operator (N : Node_Id) is\n       Loc     : constant Source_Ptr := Sloc (N);\n       Typ     : constant Entity_Id  := Etype (N);\n       Kind    : constant Node_Kind  := Nkind (N);\n       Left    : constant Node_Id    := Left_Opnd (N);\n       Right   : constant Node_Id    := Right_Opnd (N);\n+      LocR    : constant Source_Ptr := Sloc (Right);\n       Actlist : List_Id;\n \n       Shortcut_Value : constant Boolean := Nkind (N) = N_Or_Else;\n@@ -8800,63 +8797,88 @@ package body Exp_Ch4 is\n          return;\n       end if;\n \n-      --  If Actions are present, we expand\n+      --  If Actions are present for the right operand, we have to do some\n+      --  special processing. We can't just let these actions filter back into\n+      --  code preceding the short circuit (which is what would have happened\n+      --  if we had not trapped them in the short-circuit form), since they\n+      --  must only be executed if the right operand of the short circuit is\n+      --  executed and not otherwise.\n \n-      --     left AND THEN right\n+      --  the temporary variable C.\n \n-      --  into\n+      if Present (Actions (N)) then\n+         Actlist := Actions (N);\n \n-      --     C : Boolean := False;\n-      --     IF left THEN\n-      --        Actions;\n-      --        IF right THEN\n-      --           C := True;\n-      --        END IF;\n-      --     END IF;\n+         --  The old approach is to expand:\n \n-      --  and finally rewrite the operator into a reference to C. Similarly\n-      --  for left OR ELSE right, with negated values. Note that this rewriting\n-      --  preserves two invariants that traces-based coverage analysis depends\n-      --  upon:\n+         --     left AND THEN right\n \n-      --    - there is exactly one conditional jump for each operand;\n+         --  into\n \n-      --    - for each possible values of the expression, there is exactly\n-      --      one location in the generated code that is branched to\n-      --      (the inner assignment in one case, the point just past the\n-      --      outer END IF; in the other case).\n+         --     C : Boolean := False;\n+         --     IF left THEN\n+         --        Actions;\n+         --        IF right THEN\n+         --           C := True;\n+         --        END IF;\n+         --     END IF;\n \n-      if Present (Actions (N)) then\n-         Actlist := Actions (N);\n+         --  and finally rewrite the operator into a reference to C. Similarly\n+         --  for left OR ELSE right, with negated values. Note that this\n+         --  rewrite causes some difficulties for coverage analysis because\n+         --  of the introduction of the new variable C, which obscures the\n+         --  structure of the test.\n \n-         Op_Var := Make_Temporary (Loc, 'C', Related_Node => N);\n+         --  We use this \"old approach\" by default for now, unless the\n+         --  special debug switch gnatd.X is used.\n \n-         Insert_Action (N,\n-           Make_Object_Declaration (Loc,\n-             Defining_Identifier =>\n-               Op_Var,\n-             Object_Definition =>\n-               New_Occurrence_Of (Standard_Boolean, Loc),\n-             Expression =>\n-               New_Occurrence_Of (Shortcut_Ent, Loc)));\n-\n-         Append_To (Actlist,\n-           Make_Implicit_If_Statement (Right,\n-             Condition       => Make_Test_Expr (Right),\n-             Then_Statements => New_List (\n-               Make_Assignment_Statement (Sloc (Right),\n-                 Name =>\n-                   New_Occurrence_Of (Op_Var, Sloc (Right)),\n-                 Expression =>\n-                   New_Occurrence_Of\n-                     (Boolean_Literals (not Shortcut_Value), Sloc (Right))))));\n+         if not Debug_Flag_Dot_XX then\n+            Op_Var := Make_Temporary (Loc, 'C', Related_Node => N);\n \n-         Insert_Action (N,\n-           Make_Implicit_If_Statement (Left,\n-             Condition       => Make_Test_Expr (Left),\n-             Then_Statements => Actlist));\n+            Insert_Action (N,\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier =>\n+                  Op_Var,\n+                Object_Definition   =>\n+                  New_Occurrence_Of (Standard_Boolean, Loc),\n+                Expression          =>\n+                  New_Occurrence_Of (Shortcut_Ent, Loc)));\n+\n+            Append_To (Actlist,\n+              Make_Implicit_If_Statement (Right,\n+                Condition       => Make_Test_Expr (Right),\n+                Then_Statements => New_List (\n+                  Make_Assignment_Statement (LocR,\n+                    Name       => New_Occurrence_Of (Op_Var, LocR),\n+                    Expression =>\n+                      New_Occurrence_Of\n+                        (Boolean_Literals (not Shortcut_Value), LocR)))));\n \n-         Rewrite (N, New_Occurrence_Of (Op_Var, Loc));\n+            Insert_Action (N,\n+              Make_Implicit_If_Statement (Left,\n+                Condition       => Make_Test_Expr (Left),\n+                Then_Statements => Actlist));\n+\n+            Rewrite (N, New_Occurrence_Of (Op_Var, Loc));\n+            Analyze_And_Resolve (N, Standard_Boolean);\n+\n+         --  The new approach, activated for now by the use of debug flag\n+         --  -gnatd.X is to use the new Expression_With_Actions node for the\n+         --  right operand of the short-circuit form. This should solve the\n+         --  traceability problems for coverage analysis.\n+\n+         else\n+            Rewrite (Right,\n+              Make_Expression_With_Actions (LocR,\n+                Expression => Relocate_Node (Right),\n+                Actions    => Actlist));\n+            Analyze_And_Resolve (Right, Standard_Boolean);\n+         end if;\n+\n+         --  Special processing necessary for SCIL generation for AND THEN\n+         --  with a function call as the right operand.\n+\n+         --  What is this about, and is it needed for both cases above???\n \n          if Generate_SCIL\n            and then Kind = N_And_Then\n@@ -8865,7 +8887,6 @@ package body Exp_Ch4 is\n             Adjust_SCIL_Node (N, Right);\n          end if;\n \n-         Analyze_And_Resolve (N, Standard_Boolean);\n          Adjust_Result_Type (N, Typ);\n          return;\n       end if;"}, {"sha": "a91daf15c2d662b9df223b166ea79790ea0e4bbc", "filename": "gcc/ada/exp_ch4.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fexp_ch4.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fexp_ch4.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.ads?ref=955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "patch": "@@ -32,8 +32,8 @@ package Exp_Ch4 is\n    procedure Expand_N_Allocator                   (N : Node_Id);\n    procedure Expand_N_And_Then                    (N : Node_Id);\n    procedure Expand_N_Conditional_Expression      (N : Node_Id);\n-   procedure Expand_N_In                          (N : Node_Id);\n    procedure Expand_N_Explicit_Dereference        (N : Node_Id);\n+   procedure Expand_N_In                          (N : Node_Id);\n    procedure Expand_N_Indexed_Component           (N : Node_Id);\n    procedure Expand_N_Not_In                      (N : Node_Id);\n    procedure Expand_N_Null                        (N : Node_Id);"}, {"sha": "95a063c1f4f519dfb881a567a90021e303984b05", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "patch": "@@ -63,6 +63,10 @@ package body Exp_Intr is\n    -- Local Subprograms --\n    -----------------------\n \n+   procedure Expand_Binary_Operator_Call (N : Node_Id);\n+   --  Expand a call to an intrinsic arithmetic operator when the operand\n+   --  types or sizes are not identical.\n+\n    procedure Expand_Is_Negative (N : Node_Id);\n    --  Expand a call to the intrinsic Is_Negative function\n \n@@ -108,6 +112,44 @@ package body Exp_Intr is\n    --    Name_Source_Location  - expand string of form file:line\n    --    Name_Enclosing_Entity - expand string  with name of enclosing entity\n \n+   ---------------------------------\n+   -- Expand_Binary_Operator_Call --\n+   ---------------------------------\n+\n+   procedure Expand_Binary_Operator_Call (N : Node_Id) is\n+      T1  : constant Entity_Id := Underlying_Type (Left_Opnd  (N));\n+      T2  : constant Entity_Id := Underlying_Type (Right_Opnd (N));\n+      TR  : constant Entity_Id := Etype (N);\n+      T3  : Entity_Id;\n+      Res : Node_Id;\n+      Siz : Uint;\n+\n+   begin\n+      if Esize (T1) > Esize (T2) then\n+         Siz := Esize (T1);\n+      else\n+         Siz := Esize (T2);\n+      end if;\n+\n+      if Siz > 32 then\n+         T3 := RTE (RE_Unsigned_64);\n+      else\n+         T3 := RTE (RE_Unsigned_32);\n+      end if;\n+\n+      Res := New_Copy (N);\n+      Set_Etype (Res, Empty);\n+      Set_Entity (Res, Empty);\n+\n+      Set_Left_Opnd (Res,\n+         Unchecked_Convert_To (T3, Relocate_Node (Left_Opnd (N))));\n+      Set_Right_Opnd (Res,\n+         Unchecked_Convert_To (T3, Relocate_Node (Right_Opnd (N))));\n+\n+      Rewrite (N, Unchecked_Convert_To (TR, Res));\n+      Analyze_And_Resolve (N, TR);\n+   end Expand_Binary_Operator_Call;\n+\n    -----------------------------------------\n    -- Expand_Dispatching_Constructor_Call --\n    -----------------------------------------\n@@ -487,6 +529,9 @@ package body Exp_Intr is\n       elsif Present (Alias (E)) then\n          Expand_Intrinsic_Call (N,  Alias (E));\n \n+      elsif Nkind (N) in N_Binary_Op then\n+         Expand_Binary_Operator_Call (N);\n+\n          --  The only other case is where an external name was specified,\n          --  since this is the only way that an otherwise unrecognized\n          --  name could escape the checking in Sem_Prag. Nothing needs"}, {"sha": "634a03ff2af6db2e6cfb85e095cdd1a1b9921d63", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "patch": "@@ -2417,6 +2417,13 @@ package body Exp_Util is\n                   end if;\n                end;\n \n+            --  Case of appearing within an Expressions_With_Actions node. We\n+            --  prepend the actions to the list of actions already there.\n+\n+            when N_Expression_With_Actions =>\n+               Prepend_List (Ins_Actions, Actions (P));\n+               return;\n+\n             --  Case of appearing in the condition of a while expression or\n             --  elsif. We insert the actions into the Condition_Actions field.\n             --  They will be moved further out when the while loop or elsif"}, {"sha": "fe4d27c24c401798a59cd5dd87fff12ee4d79c91", "filename": "gcc/ada/nlists.adb", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fnlists.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fnlists.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnlists.adb?ref=955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "patch": "@@ -1055,6 +1055,77 @@ package body Nlists is\n       Set_List_Link (Node, To);\n    end Prepend;\n \n+   ------------------\n+   -- Prepend_List --\n+   ------------------\n+\n+   procedure Prepend_List (List : List_Id; To : List_Id) is\n+\n+      procedure Prepend_List_Debug;\n+      pragma Inline (Prepend_List_Debug);\n+      --  Output debug information if Debug_Flag_N set\n+\n+      ------------------------\n+      -- Prepend_List_Debug --\n+      ------------------------\n+\n+      procedure Prepend_List_Debug is\n+      begin\n+         if Debug_Flag_N then\n+            Write_Str (\"Prepend list \");\n+            Write_Int (Int (List));\n+            Write_Str (\" to list \");\n+            Write_Int (Int (To));\n+            Write_Eol;\n+         end if;\n+      end Prepend_List_Debug;\n+\n+   --  Start of processing for Prepend_List\n+\n+   begin\n+      if Is_Empty_List (List) then\n+         return;\n+\n+      else\n+         declare\n+            F : constant Node_Id := First (To);\n+            L : constant Node_Id := Last (List);\n+            N : Node_Id;\n+\n+         begin\n+            pragma Debug (Prepend_List_Debug);\n+\n+            N := L;\n+            loop\n+               Set_List_Link (N, To);\n+               N := Prev (N);\n+               exit when No (N);\n+            end loop;\n+\n+            if No (F) then\n+               Set_Last (To, L);\n+            else\n+               Set_Next (L, F);\n+            end if;\n+\n+            Set_Prev (F, L);\n+            Set_First (To, First (List));\n+\n+            Set_First (List, Empty);\n+            Set_Last  (List, Empty);\n+         end;\n+      end if;\n+   end Prepend_List;\n+\n+   ---------------------\n+   -- Prepend_List_To --\n+   ---------------------\n+\n+   procedure Prepend_List_To (To : List_Id; List : List_Id) is\n+   begin\n+      Prepend_List (List, To);\n+   end Prepend_List_To;\n+\n    ----------------\n    -- Prepend_To --\n    ----------------"}, {"sha": "cecf3a21db40e3e31b0ad8440d67ca956ca96fca", "filename": "gcc/ada/nlists.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fnlists.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fnlists.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnlists.ads?ref=955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "patch": "@@ -259,6 +259,14 @@ package Nlists is\n    pragma Inline (Prepend_To);\n    --  Like Prepend, but arguments are the other way round\n \n+   procedure Prepend_List (List : List_Id; To : List_Id);\n+   --  Prepends node list List to the start of node list To. On return,\n+   --  List is reset to be empty.\n+\n+   procedure Prepend_List_To (To : List_Id; List : List_Id);\n+   pragma Inline (Prepend_List_To);\n+   --  Like Prepend_List, but arguments are the other way round\n+\n    procedure Remove (Node : Node_Id);\n    --  Removes Node, which must be a node that is a member of a node list,\n    --  from this node list. The contents of Node are not otherwise affected."}, {"sha": "1480a441887b74a337953583438f1993b2df8037", "filename": "gcc/ada/s-auxdec-vms_64.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fs-auxdec-vms_64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fs-auxdec-vms_64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-auxdec-vms_64.ads?ref=955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "patch": "@@ -107,10 +107,10 @@ package System.Aux_DEC is\n    Address_Size       : constant := Standard'Address_Size;\n    Short_Address_Size : constant := 32;\n \n-   function \"+\" (Left : Short_Address; Right : Integer) return Short_Address;\n-   function \"+\" (Left : Integer; Right : Short_Address) return Short_Address;\n-   function \"-\" (Left : Short_Address; Right : Short_Address) return Integer;\n-   function \"-\" (Left : Short_Address; Right : Integer) return Short_Address;\n+   function \"+\" (Left : Address; Right : Integer) return Address;\n+   function \"+\" (Left : Integer; Right : Address) return Address;\n+   function \"-\" (Left : Address; Right : Address) return Integer;\n+   function \"-\" (Left : Address; Right : Integer) return Address;\n \n    pragma Import (Intrinsic, \"+\");\n    pragma Import (Intrinsic, \"-\");"}, {"sha": "30ed72342e1613dec22f0c66b3d45483cce91c63", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "patch": "@@ -221,6 +221,9 @@ package body Sem is\n          when N_Explicit_Dereference =>\n             Analyze_Explicit_Dereference (N);\n \n+         when N_Expression_With_Actions =>\n+            Analyze_Expression_With_Actions (N);\n+\n          when N_Extended_Return_Statement =>\n             Analyze_Extended_Return_Statement (N);\n \n@@ -1709,7 +1712,7 @@ package body Sem is\n \n          if Nkind (Unit (Withed_Unit)) = N_Package_Body\n            and then Is_Generic_Instance\n-             (Defining_Entity (Unit (Library_Unit (Withed_Unit))))\n+                      (Defining_Entity (Unit (Library_Unit (Withed_Unit))))\n          then\n             Do_Withed_Unit (Library_Unit (Withed_Unit));\n          end if;"}, {"sha": "946f7b837d29bd9be3dcd210dbec0c6824e11ce4", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "patch": "@@ -1589,6 +1589,25 @@ package body Sem_Ch4 is\n       Check_Parameterless_Call (N);\n    end Analyze_Expression;\n \n+   -------------------------------------\n+   -- Analyze_Expression_With_Actions --\n+   -------------------------------------\n+\n+   procedure Analyze_Expression_With_Actions (N : Node_Id) is\n+      A : Node_Id;\n+\n+   begin\n+      A := First (Actions (N));\n+      loop\n+         Analyze (A);\n+         Next (A);\n+         exit when No (A);\n+      end loop;\n+\n+      Analyze_Expression (Expression (N));\n+      Set_Etype (N, Etype (Expression (N)));\n+   end Analyze_Expression_With_Actions;\n+\n    ------------------------------------\n    -- Analyze_Indexed_Component_Form --\n    ------------------------------------\n@@ -6119,8 +6138,8 @@ package body Sem_Ch4 is\n          First_Actual : Node_Id;\n \n       begin\n-         --  Place the name of the operation, with its interpretations, on the\n-         --  rewritten call.\n+         --  Place the name of the operation, with its interpretations,\n+         --  on the rewritten call.\n \n          Set_Name (Call_Node, Subprog);\n "}, {"sha": "a6db3aa45502649e29c3a6c9539b0e17b04fa11b", "filename": "gcc/ada/sem_ch4.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsem_ch4.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsem_ch4.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.ads?ref=955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,6 +35,7 @@ package Sem_Ch4  is\n    procedure Analyze_Conditional_Expression             (N : Node_Id);\n    procedure Analyze_Equality_Op                        (N : Node_Id);\n    procedure Analyze_Explicit_Dereference               (N : Node_Id);\n+   procedure Analyze_Expression_With_Actions            (N : Node_Id);\n    procedure Analyze_Logical_Op                         (N : Node_Id);\n    procedure Analyze_Membership_Op                      (N : Node_Id);\n    procedure Analyze_Negation                           (N : Node_Id);"}, {"sha": "63cecbde2188419fe270facd81d15699c61d3bde", "filename": "gcc/ada/sem_intr.adb", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsem_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsem_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_intr.adb?ref=955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "patch": "@@ -54,7 +54,7 @@ package body Sem_Intr is\n \n    procedure Check_Intrinsic_Operator (E : Entity_Id; N : Node_Id);\n    --  Check that operator is one of the binary arithmetic operators, and\n-   --  that the types involved have the same size.\n+   --  that the types involved both have underlying integer types..\n \n    procedure Check_Shift (E : Entity_Id; N : Node_Id);\n    --  Check intrinsic shift subprogram, the two arguments are the same\n@@ -198,11 +198,24 @@ package body Sem_Intr is\n             T2 := Etype (Next_Formal (First_Formal (E)));\n          end if;\n \n-         if Root_Type (T1) /= Root_Type (T2)\n-           or else Root_Type (T1) /= Root_Type (Ret)\n+         if Root_Type (T1) = Root_Type (T2)\n+           or else Root_Type (T1) = Root_Type (Ret)\n+         then\n+            --  Same types, predefined operator will apply\n+\n+            null;\n+\n+         elsif Is_Integer_Type (Underlying_Type (T1))\n+           and then Is_Integer_Type (Underlying_Type (T2))\n+           and then Is_Integer_Type (Underlying_Type (Ret))\n          then\n+            --  Expansion will introduce conversions if sizes are not equal\n+\n+            null;\n+\n+         else\n             Errint\n-              (\"types of intrinsic operator must have the same size\", E, N);\n+              (\"types of intrinsic operator operands do not match\", E, N);\n          end if;\n \n       --  Comparison operators"}, {"sha": "eaaa26fd49a25b9a8e54c31460c088f2a2ef0608", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "patch": "@@ -163,9 +163,10 @@ package body Sem_Res is\n    procedure Resolve_Character_Literal         (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Comparison_Op             (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Conditional_Expression    (N : Node_Id; Typ : Entity_Id);\n+   procedure Resolve_Entity_Name               (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Equality_Op               (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Explicit_Dereference      (N : Node_Id; Typ : Entity_Id);\n-   procedure Resolve_Entity_Name               (N : Node_Id; Typ : Entity_Id);\n+   procedure Resolve_Expression_With_Actions   (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Indexed_Component         (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Integer_Literal           (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Logical_Op                (N : Node_Id; Typ : Entity_Id);\n@@ -1842,6 +1843,7 @@ package body Sem_Res is\n             --  Check that Typ is a remote access-to-subprogram type\n \n             if Is_Remote_Access_To_Subprogram_Type (Typ) then\n+\n                --  Prefix (N) must statically denote a remote subprogram\n                --  declared in a package specification.\n \n@@ -2542,12 +2544,15 @@ package body Sem_Res is\n             when N_Expanded_Name\n                              => Resolve_Entity_Name              (N, Ctx_Type);\n \n-            when N_Extension_Aggregate\n-                             => Resolve_Extension_Aggregate      (N, Ctx_Type);\n-\n             when N_Explicit_Dereference\n                              => Resolve_Explicit_Dereference     (N, Ctx_Type);\n \n+            when N_Expression_With_Actions\n+                             => Resolve_Expression_With_Actions  (N, Ctx_Type);\n+\n+            when N_Extension_Aggregate\n+                             => Resolve_Extension_Aggregate      (N, Ctx_Type);\n+\n             when N_Function_Call\n                              => Resolve_Call                     (N, Ctx_Type);\n \n@@ -6494,6 +6499,15 @@ package body Sem_Res is\n \n    end Resolve_Explicit_Dereference;\n \n+   -------------------------------------\n+   -- Resolve_Expression_With_Actions --\n+   -------------------------------------\n+\n+   procedure Resolve_Expression_With_Actions (N : Node_Id; Typ : Entity_Id) is\n+   begin\n+      Set_Etype (N, Typ);\n+   end Resolve_Expression_With_Actions;\n+\n    -------------------------------\n    -- Resolve_Indexed_Component --\n    -------------------------------"}, {"sha": "8436cf0135e8a2a74f696a3397c01206eb369e1a", "filename": "gcc/ada/sem_scil.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsem_scil.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsem_scil.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_scil.adb?ref=955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "patch": "@@ -544,6 +544,7 @@ package body Sem_SCIL is\n                N_Exception_Handler                      |\n                N_Expanded_Name                          |\n                N_Explicit_Dereference                   |\n+               N_Expression_With_Actions                |\n                N_Extension_Aggregate                    |\n                N_Floating_Point_Definition              |\n                N_Formal_Decimal_Fixed_Point_Definition  |"}, {"sha": "8a9d25308554a9c4d19405f0d135717de787e98d", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "patch": "@@ -147,6 +147,7 @@ package body Sinfo is\n       pragma Assert (False\n         or else NT (N).Nkind = N_And_Then\n         or else NT (N).Nkind = N_Compilation_Unit_Aux\n+        or else NT (N).Nkind = N_Expression_With_Actions\n         or else NT (N).Nkind = N_Freeze_Entity\n         or else NT (N).Nkind = N_Or_Else);\n       return List1 (N);\n@@ -1178,6 +1179,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Discriminant_Association\n         or else NT (N).Nkind = N_Discriminant_Specification\n         or else NT (N).Nkind = N_Exception_Declaration\n+        or else NT (N).Nkind = N_Expression_With_Actions\n         or else NT (N).Nkind = N_Free_Statement\n         or else NT (N).Nkind = N_Mod_Clause\n         or else NT (N).Nkind = N_Modular_Type_Definition\n@@ -3058,6 +3060,7 @@ package body Sinfo is\n       pragma Assert (False\n         or else NT (N).Nkind = N_And_Then\n         or else NT (N).Nkind = N_Compilation_Unit_Aux\n+        or else NT (N).Nkind = N_Expression_With_Actions\n         or else NT (N).Nkind = N_Freeze_Entity\n         or else NT (N).Nkind = N_Or_Else);\n       Set_List1_With_Parent (N, Val);\n@@ -4080,6 +4083,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Discriminant_Association\n         or else NT (N).Nkind = N_Discriminant_Specification\n         or else NT (N).Nkind = N_Exception_Declaration\n+        or else NT (N).Nkind = N_Expression_With_Actions\n         or else NT (N).Nkind = N_Free_Statement\n         or else NT (N).Nkind = N_Mod_Clause\n         or else NT (N).Nkind = N_Modular_Type_Definition"}, {"sha": "f6754a8aae78326905ef4695ba4f245d12967a7a", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "patch": "@@ -6611,6 +6611,38 @@ package Sinfo is\n       --  Has_Private_View (Flag11-Sem) set in generic units.\n       --  plus fields for expression\n \n+      -----------------------------\n+      -- Expression with Actions --\n+      -----------------------------\n+\n+      --  This node is created by the analyzer/expander to handle some\n+      --  expansion cases, notably short circuit forms where there are\n+      --  actions associated with the right hand operand.\n+\n+      --  The N_Expression_With_Actions node represents an expression with\n+      --  an associated set of actions (which are executable statements).\n+      --  The required semantics is that the set of actions is executed in\n+      --  the order in which it appears just before the expression is\n+      --  evaluated (and these actions must only be executed if the value\n+      --  of the expression is evaluated). The node is considered to be\n+      --  a subexpression, whose value is the value of the Expression after\n+      --  executing all the actions.\n+\n+      --  Sprint syntax:  do\n+      --                    action;\n+      --                    action;\n+      --                    ...\n+      --                    action;\n+      --                  in expression end\n+\n+      --  N_Expression_With_Actions\n+      --  Actions (List1)\n+      --  Expression (Node3)\n+      --  plus fields for expression\n+\n+      --  Note: the actions list is always non-null, since we would\n+      --  never have created this node if there weren't some actions.\n+\n       --------------------\n       -- Free Statement --\n       --------------------\n@@ -7195,6 +7227,7 @@ package Sinfo is\n \n       N_Conditional_Expression,\n       N_Explicit_Dereference,\n+      N_Expression_With_Actions,\n       N_Function_Call,\n       N_Indexed_Component,\n       N_Integer_Literal,\n@@ -10984,6 +11017,13 @@ package Sinfo is\n         4 => False,   --  Entity (Node4-Sem)\n         5 => False),  --  Etype (Node5-Sem)\n \n+     N_Expression_With_Actions =>\n+       (1 => True,    --  Actions (List1)\n+        2 => False,   --  unused\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n      N_Free_Statement =>\n        (1 => False,   --  Storage_Pool (Node1-Sem)\n         2 => False,   --  Procedure_To_Call (Node2-Sem)"}, {"sha": "aa8e8802246839b41e4635beb5d15693925ccfc0", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "patch": "@@ -1509,6 +1509,20 @@ package body Sprint is\n             Write_Char_Sloc ('.');\n             Write_Str_Sloc (\"all\");\n \n+         when N_Expression_With_Actions =>\n+            Indent_Begin;\n+            Write_Indent_Str_Sloc (\"do\");\n+            Indent_Begin;\n+            Write_Indent;\n+            Sprint_Node_List (Actions (Node));\n+            Indent_End;\n+            Write_Indent;\n+            Write_Str_With_Col_Check_Sloc (\"in \");\n+            Sprint_Node (Expression (Node));\n+            Write_Str_With_Col_Check (\" end\");\n+            Indent_End;\n+            Write_Indent;\n+\n          when N_Extended_Return_Statement =>\n             Write_Indent_Str_Sloc (\"return \");\n             Sprint_Node_List (Return_Object_Declarations (Node));"}, {"sha": "7c2b3cb0a2110d0dd4f0e9e81c00821f7e599177", "filename": "gcc/ada/sprint.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsprint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac/gcc%2Fada%2Fsprint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.ads?ref=955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "patch": "@@ -53,8 +53,8 @@ package Sprint is\n    --    Convert wi Rounded_Result           target@(source)\n    --    Divide wi Treat_Fixed_As_Integer    x #/ y\n    --    Divide wi Rounded_Result            x @/ y\n+   --    Expression with actions             do action; .. action; in expr end\n    --    Expression with range check         {expression}\n-   --    Operator with range check           {operator} (e.g. {+})\n    --    Free statement                      free expr [storage_pool = xxx]\n    --    Freeze entity with freeze actions   freeze entityname [ actions ]\n    --    Implicit call to run time routine   $routine-name\n@@ -69,6 +69,7 @@ package Sprint is\n    --    Multiple concatenation              expr && expr && expr ... && expr\n    --    Multiply wi Treat_Fixed_As_Integer  x #* y\n    --    Multiply wi Rounded_Result          x @* y\n+   --    Operator with range check           {operator} (e.g. {+})\n    --    Others choice for cleanup           when all others\n    --    Pop exception label                 %pop_xxx_exception_label\n    --    Push exception label                %push_xxx_exception_label (label)"}]}