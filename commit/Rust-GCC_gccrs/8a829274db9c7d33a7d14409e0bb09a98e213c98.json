{"sha": "8a829274db9c7d33a7d14409e0bb09a98e213c98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE4MjkyNzRkYjljN2QzM2E3ZDE0NDA5ZTBiYjA5YTk4ZTIxM2M5OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-05-14T10:36:23Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-05-14T10:36:23Z"}, "message": "cfgcleanup.c (try_forward_edges): Use location_t for locations.\n\n\t* cfgcleanup.c (try_forward_edges): Use location_t for locations.\n\t* cfgrtl.c (rtl_merge_blocks): Fix comment.\n\t(cfg_layout_merge_blocks): Likewise.\n\t* except.c (emit_to_new_bb_before): Remove prev_bb local variable.\n\nFrom-SVN: r210416", "tree": {"sha": "e17234d018b48620594f0fe21d40d1e47c16955d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e17234d018b48620594f0fe21d40d1e47c16955d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a829274db9c7d33a7d14409e0bb09a98e213c98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a829274db9c7d33a7d14409e0bb09a98e213c98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a829274db9c7d33a7d14409e0bb09a98e213c98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a829274db9c7d33a7d14409e0bb09a98e213c98/comments", "author": null, "committer": null, "parents": [{"sha": "112903088c98fc1995fbfbcaa1b86234b535b8b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/112903088c98fc1995fbfbcaa1b86234b535b8b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/112903088c98fc1995fbfbcaa1b86234b535b8b4"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "b4054c2d6e9be70e47eb8be936a5cc96d6310976", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a829274db9c7d33a7d14409e0bb09a98e213c98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a829274db9c7d33a7d14409e0bb09a98e213c98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a829274db9c7d33a7d14409e0bb09a98e213c98", "patch": "@@ -1,3 +1,10 @@\n+2014-05-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* cfgcleanup.c (try_forward_edges): Use location_t for locations.\n+\t* cfgrtl.c (rtl_merge_blocks): Fix comment.\n+\t(cfg_layout_merge_blocks): Likewise.\n+\t* except.c (emit_to_new_bb_before): Remove prev_bb local variable.\n+\n 2014-05-14  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/60901"}, {"sha": "291217630f4b56fa0c1c78bfdcd40a0cfa3a3e31", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a829274db9c7d33a7d14409e0bb09a98e213c98/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a829274db9c7d33a7d14409e0bb09a98e213c98/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=8a829274db9c7d33a7d14409e0bb09a98e213c98", "patch": "@@ -425,7 +425,8 @@ try_forward_edges (int mode, basic_block b)\n   for (ei = ei_start (b->succs); (e = ei_safe_edge (ei)); )\n     {\n       basic_block target, first;\n-      int counter, goto_locus;\n+      location_t goto_locus;\n+      int counter;\n       bool threaded = false;\n       int nthreaded_edges = 0;\n       bool may_thread = first_pass || (b->flags & BB_MODIFIED) != 0;\n@@ -477,8 +478,8 @@ try_forward_edges (int mode, basic_block b)\n \t\t{\n \t\t  /* When not optimizing, ensure that edges or forwarder\n \t\t     blocks with different locus are not optimized out.  */\n-\t\t  int new_locus = single_succ_edge (target)->goto_locus;\n-\t\t  int locus = goto_locus;\n+\t\t  location_t new_locus = single_succ_edge (target)->goto_locus;\n+\t\t  location_t locus = goto_locus;\n \n \t\t  if (new_locus != UNKNOWN_LOCATION\n \t\t      && locus != UNKNOWN_LOCATION"}, {"sha": "555fdf9ef15e5f6d235c9b5c35199f7ef3b1fbb0", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a829274db9c7d33a7d14409e0bb09a98e213c98/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a829274db9c7d33a7d14409e0bb09a98e213c98/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=8a829274db9c7d33a7d14409e0bb09a98e213c98", "patch": "@@ -889,7 +889,7 @@ rtl_merge_blocks (basic_block a, basic_block b)\n   BB_HEAD (b) = b_empty ? NULL_RTX : b_head;\n   delete_insn_chain (del_first, del_last, true);\n \n-  /* When not optimizing CFG and the edge is the only place in RTL which holds\n+  /* When not optimizing and the edge is the only place in RTL which holds\n      some unique locus, emit a nop with that locus in between.  */\n   if (!optimize)\n     {\n@@ -4564,7 +4564,7 @@ cfg_layout_merge_blocks (basic_block a, basic_block b)\n     try_redirect_by_replacing_jump (EDGE_SUCC (a, 0), b, true);\n   gcc_assert (!JUMP_P (BB_END (a)));\n \n-  /* When not optimizing CFG and the edge is the only place in RTL which holds\n+  /* When not optimizing and the edge is the only place in RTL which holds\n      some unique locus, emit a nop with that locus in between.  */\n   if (!optimize)\n     emit_nop_for_unique_locus_between (a, b);"}, {"sha": "dff0adee681b73ff01adbceae9603c96b0ac3929", "filename": "gcc/except.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a829274db9c7d33a7d14409e0bb09a98e213c98/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a829274db9c7d33a7d14409e0bb09a98e213c98/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=8a829274db9c7d33a7d14409e0bb09a98e213c98", "patch": "@@ -949,7 +949,7 @@ static basic_block\n emit_to_new_bb_before (rtx seq, rtx insn)\n {\n   rtx last;\n-  basic_block bb, prev_bb;\n+  basic_block bb;\n   edge e;\n   edge_iterator ei;\n \n@@ -964,8 +964,7 @@ emit_to_new_bb_before (rtx seq, rtx insn)\n   last = emit_insn_before (seq, insn);\n   if (BARRIER_P (last))\n     last = PREV_INSN (last);\n-  prev_bb = BLOCK_FOR_INSN (insn)->prev_bb;\n-  bb = create_basic_block (seq, last, prev_bb);\n+  bb = create_basic_block (seq, last, BLOCK_FOR_INSN (insn)->prev_bb);\n   update_bb_for_insn (bb);\n   bb->flags |= BB_SUPERBLOCK;\n   return bb;"}]}