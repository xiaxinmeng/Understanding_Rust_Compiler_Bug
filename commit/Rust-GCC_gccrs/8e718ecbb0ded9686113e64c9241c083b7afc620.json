{"sha": "8e718ecbb0ded9686113e64c9241c083b7afc620", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU3MThlY2JiMGRlZDk2ODYxMTNlNjRjOTI0MWMwODNiN2FmYzYyMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-04-15T04:02:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-04-15T04:02:49Z"}, "message": "re PR c++/70494 (Internal Compiler Error: Capturing an array of vectors in a lambda)\n\n\tPR c++/70494\n\n\t* decl.c (cxx_maybe_build_cleanup): Handle non-decls.\n\t* typeck2.c (split_nonconstant_init_1): Use it.\n\nFrom-SVN: r235003", "tree": {"sha": "c022add6edc574e3112a7cae9d0a261c7de1c0c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c022add6edc574e3112a7cae9d0a261c7de1c0c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e718ecbb0ded9686113e64c9241c083b7afc620", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e718ecbb0ded9686113e64c9241c083b7afc620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e718ecbb0ded9686113e64c9241c083b7afc620", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e718ecbb0ded9686113e64c9241c083b7afc620/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "26144dde3b68a331a8db86a9c8eaaa63d572bce9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26144dde3b68a331a8db86a9c8eaaa63d572bce9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26144dde3b68a331a8db86a9c8eaaa63d572bce9"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "2c51810d7dbbc25efb7085ad6d4c6e9fb87cbb73", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e718ecbb0ded9686113e64c9241c083b7afc620/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e718ecbb0ded9686113e64c9241c083b7afc620/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8e718ecbb0ded9686113e64c9241c083b7afc620", "patch": "@@ -1,5 +1,9 @@\n 2016-04-14  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/70494\n+\t* decl.c (cxx_maybe_build_cleanup): Handle non-decls.\n+\t* typeck2.c (split_nonconstant_init_1): Use it.\n+\n \tPR c++/70528\n \t* class.c (type_has_constexpr_default_constructor): Return true\n \tfor an implicitly declared constructor."}, {"sha": "38e6bd83a2a5cb1ea312e23b29b7ef7e1f2b5b08", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e718ecbb0ded9686113e64c9241c083b7afc620/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e718ecbb0ded9686113e64c9241c083b7afc620/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8e718ecbb0ded9686113e64c9241c083b7afc620", "patch": "@@ -15021,7 +15021,8 @@ complete_vars (tree type)\n \n /* If DECL is of a type which needs a cleanup, build and return an\n    expression to perform that cleanup here.  Return NULL_TREE if no\n-   cleanup need be done.  */\n+   cleanup need be done.  DECL can also be a _REF when called from\n+   split_nonconstant_init_1.  */\n \n tree\n cxx_maybe_build_cleanup (tree decl, tsubst_flags_t complain)\n@@ -15039,7 +15040,10 @@ cxx_maybe_build_cleanup (tree decl, tsubst_flags_t complain)\n   /* Handle \"__attribute__((cleanup))\".  We run the cleanup function\n      before the destructor since the destructor is what actually\n      terminates the lifetime of the object.  */\n-  attr = lookup_attribute (\"cleanup\", DECL_ATTRIBUTES (decl));\n+  if (DECL_P (decl))\n+    attr = lookup_attribute (\"cleanup\", DECL_ATTRIBUTES (decl));\n+  else\n+    attr = NULL_TREE;\n   if (attr)\n     {\n       tree id;\n@@ -15098,6 +15102,7 @@ cxx_maybe_build_cleanup (tree decl, tsubst_flags_t complain)\n   protected_set_expr_location (cleanup, UNKNOWN_LOCATION);\n \n   if (cleanup\n+      && DECL_P (decl)\n       && !lookup_attribute (\"warn_unused\", TYPE_ATTRIBUTES (TREE_TYPE (decl)))\n       /* Treat objects with destructors as used; the destructor may do\n \t something substantive.  */"}, {"sha": "e59ad51c3bd9857658997055d8c534ac69d02020", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e718ecbb0ded9686113e64c9241c083b7afc620/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e718ecbb0ded9686113e64c9241c083b7afc620/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=8e718ecbb0ded9686113e64c9241c083b7afc620", "patch": "@@ -688,14 +688,9 @@ split_nonconstant_init_1 (tree dest, tree init)\n \t\t  code = build_stmt (input_location, EXPR_STMT, code);\n \t\t  code = maybe_cleanup_point_expr_void (code);\n \t\t  add_stmt (code);\n-\t\t  if (type_build_dtor_call (inner_type))\n-\t\t    {\n-\t\t      code = (build_special_member_call\n-\t\t\t      (sub, complete_dtor_identifier, NULL, inner_type,\n-\t\t\t       LOOKUP_NORMAL, tf_warning_or_error));\n-\t\t      if (!TYPE_HAS_TRIVIAL_DESTRUCTOR (inner_type))\n-\t\t\tfinish_eh_cleanup (code);\n-\t\t    }\n+\t\t  if (tree cleanup\n+\t\t      = cxx_maybe_build_cleanup (sub, tf_warning_or_error))\n+\t\t    finish_eh_cleanup (cleanup);\n \t\t}\n \n \t      num_split_elts++;"}, {"sha": "d0063e11cbfe7316f971cb30bfaff13a17c8277f", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-array2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e718ecbb0ded9686113e64c9241c083b7afc620/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-array2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e718ecbb0ded9686113e64c9241c083b7afc620/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-array2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-array2.C?ref=8e718ecbb0ded9686113e64c9241c083b7afc620", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/70494\n+// { dg-do compile { target c++11 } }\n+\n+struct A { ~A(); };\n+\n+int main()\n+{\n+  A v[] = { A(), A() };\n+  auto lambda = [v]{};\n+}"}]}