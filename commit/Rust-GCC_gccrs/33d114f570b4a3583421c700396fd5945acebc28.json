{"sha": "33d114f570b4a3583421c700396fd5945acebc28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNkMTE0ZjU3MGI0YTM1ODM0MjFjNzAwMzk2ZmQ1OTQ1YWNlYmMyOA==", "commit": {"author": {"name": "Yang Yang", "email": "yangyang305@huawei.com", "date": "2020-06-30T10:04:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-06-30T13:54:07Z"}, "message": "tree-optimization/95855 - Add checks to avoid spoiling if-conversion if\n\nAdd some checks in pass_splits_paths, so that pass_split_paths can\nrecognize the missed if-conversion opportunity and do not duplicate the\ncorresponding block.\n\n2020-06-30 Yang Yang <yangyang305@huawei.com>\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/95855\n\t* gimple-ssa-split-paths.c (is_feasible_trace): Add extra\n\tchecks to recognize a missed if-conversion opportunity when\n\tjudging whether to duplicate a block.\n\ngcc/testsuite/ChangeLog\n\n\tPR tree-optimization/95855\n\t* gcc.dg/tree-ssa/split-path-12.c: New testcase.", "tree": {"sha": "807e0639ce6bd1f283439840d4778dac0d4c5e77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/807e0639ce6bd1f283439840d4778dac0d4c5e77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33d114f570b4a3583421c700396fd5945acebc28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d114f570b4a3583421c700396fd5945acebc28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33d114f570b4a3583421c700396fd5945acebc28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d114f570b4a3583421c700396fd5945acebc28/comments", "author": null, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d503e329911a9c7f6d4db3170f6ed6f5a0424ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d503e329911a9c7f6d4db3170f6ed6f5a0424ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d503e329911a9c7f6d4db3170f6ed6f5a0424ba"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "9c32da7636966ed21aaea45b418279c11aab72f4", "filename": "gcc/gimple-ssa-split-paths.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33d114f570b4a3583421c700396fd5945acebc28/gcc%2Fgimple-ssa-split-paths.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33d114f570b4a3583421c700396fd5945acebc28/gcc%2Fgimple-ssa-split-paths.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-split-paths.c?ref=33d114f570b4a3583421c700396fd5945acebc28", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\"\n+#include \"fold-const.h\"\n \n /* Given LATCH, the latch block in a loop, see if the shape of the\n    path reaching LATCH is suitable for being split by duplication.\n@@ -254,6 +255,44 @@ is_feasible_trace (basic_block bb)\n \t}\n     }\n \n+  /* Canonicalize the form.  */\n+  if (single_pred_p (pred1) && single_pred (pred1) == pred2\n+      && num_stmts_in_pred1 == 0)\n+    std::swap (pred1, pred2);\n+\n+  /* This is meant to catch another kind of cases that are likely opportunities\n+     for if-conversion.  After canonicalizing, PRED2 must be an empty block and\n+     PRED1 must be the only predecessor of PRED2.  Moreover, PRED1 is supposed\n+     to end with a cond_stmt which has the same args with the PHI in BB.  */\n+  if (single_pred_p (pred2) && single_pred (pred2) == pred1\n+      && num_stmts_in_pred2 == 0)\n+    {\n+      gimple *cond_stmt = last_stmt (pred1);\n+      if (cond_stmt && gimple_code (cond_stmt) == GIMPLE_COND)\n+\t{\n+\t  tree lhs = gimple_cond_lhs (cond_stmt);\n+\t  tree rhs = gimple_cond_rhs (cond_stmt);\n+\n+\t  gimple_stmt_iterator gsi;\n+\t  for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+\t    {\n+\t      gimple *phi = gsi_stmt (gsi);\n+\t      if ((operand_equal_p (gimple_phi_arg_def (phi, 0), lhs)\n+\t\t   && operand_equal_p (gimple_phi_arg_def (phi, 1), rhs))\n+\t\t  || (operand_equal_p (gimple_phi_arg_def (phi, 0), rhs)\n+\t\t      && (operand_equal_p (gimple_phi_arg_def (phi, 1), lhs))))\n+\t\t{\n+\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t    fprintf (dump_file,\n+\t\t\t     \"Block %d appears to be optimized to a join \"\n+\t\t\t     \"point for if-convertable half-diamond.\\n\",\n+\t\t\t     bb->index);\n+\t\t  return false;\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n   /* If the joiner has no PHIs with useful uses there is zero chance\n      of CSE/DCE/jump-threading possibilities exposed by duplicating it.  */\n   bool found_useful_phi = false;"}, {"sha": "19a130d9bf1f1eb5360ba4f7c12f578e36a5136b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/split-path-12.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33d114f570b4a3583421c700396fd5945acebc28/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33d114f570b4a3583421c700396fd5945acebc28/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-12.c?ref=33d114f570b4a3583421c700396fd5945acebc28", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fsplit-paths -fdump-tree-split-paths-details \" } */\n+\n+double\n+foo(double *d1, double *d2, double *d3, int num, double *ip)\n+{\n+  double dmax[3];\n+\n+  for (int i = 0; i < num; i++) {\n+    dmax[0] = d1[i] < dmax[0] ? dmax[0] : d1[i];\n+    dmax[1] = d2[i] < dmax[1] ? dmax[1] : d2[i];\n+    dmax[2] = d3[i] < dmax[2] ? dmax[2] : d3[i];\n+    ip[i] = dmax[2];\n+  }\n+\n+  return dmax[0] + dmax[1] + dmax[2];\n+}\n+\n+/* { dg-final { scan-tree-dump \"appears to be optimized to a join point for if-convertable half-diamond\" \"split-paths\" } } */"}]}