{"sha": "47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdlYjViMzI5YmY4ZTZhYjJlOTM5YTRjZWRmNTUzM2QwMmE2YzdmMQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2006-11-12T19:17:02Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2006-11-12T19:17:02Z"}, "message": "params.c (set_param_value): Initialize the \"set\" field.\n\n\t* params.c (set_param_value): Initialize the \"set\" field.\n\t* params.h (struct param_info): Add \"set\" field.\n\t(PARAM_SET_P): New macro.\n\t(PREFETCH_LATENCY, SIMULTANEOUS_PREFETCHES, L1_CACHE_SIZE,\n\tL1_CACHE_LINE_SIZE): New macros.\n\t* toplev.c (DEFPARAM): Initialize the \"set\" field.\n\t* tree-ssa-loop-prefetch.c (PREFETCH_LATENCY,\n\tSIMULTANEOUS_PREFETCHES): Removed.\n\t(PREFETCH_BLOCK): Use L1_CACHE_LINE_SIZE.\n\t(tree_ssa_prefetch_arrays): Dump the values of the parameters.\n\t* config/sparc/sparc.c: Include params.h.\n\t(sparc_override_options): Set SIMULTANEOUS_PREFETCHES and\n\tL1_CACHE_LINE_SIZE parameters.\n\t* config/sparc/sparc.h (PREFETCH_BLOCK, SIMULTANEOUS_PREFETCHES):\n\tRemoved.\n\t* config/i386/i386.h (PREFETCH_BLOCK, SIMULTANEOUS_PREFETCHES):\n\tRemoved.\n\t* config/i386/i386.c: Include params.h.\n\t(k8_cost): Change default value for SIMULTANEOUS_PREFETCHES.\n\t(override_options): Set SIMULTANEOUS_PREFETCHES and\n\tL1_CACHE_LINE_SIZE parameters.\n\t* config/sh/sh.h (SIMULTANEOUS_PREFETCHES): Removed.\n\t(OPTIMIZATION_OPTIONS): Set SIMULTANEOUS_PREFETCHES and\n\tL1_CACHE_LINE_SIZE parameters.\n\t* config/ia64/ia64.c (ia64_optimization_options): Set\n\tSIMULTANEOUS_PREFETCHES and L1_CACHE_LINE_SIZE parameters.\n\t* config/ia64/ia64.h (SIMULTANEOUS_PREFETCHES, PREFETCH_BLOCK):\n\tRemoved.\n\t* params.def (PARAM_PREFETCH_LATENCY, PARAM_SIMULTANEOUS_PREFETCHES,\n\tPARAM_L1_CACHE_SIZE, PARAM_L1_CACHE_LINE_SIZE): New params.\n\t* doc/invoke.texi: Document new params.\n\nFrom-SVN: r118728", "tree": {"sha": "3dfa782960185e45d610e396ad0016d74f247a11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dfa782960185e45d610e396ad0016d74f247a11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/comments", "author": null, "committer": null, "parents": [{"sha": "015e23f4005b00afaf87c90ef67db48b364fe70e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/015e23f4005b00afaf87c90ef67db48b364fe70e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/015e23f4005b00afaf87c90ef67db48b364fe70e"}], "stats": {"total": 206, "additions": 153, "deletions": 53}, "files": [{"sha": "d3363d1716996e356106b2c000578bfb48efd4fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1", "patch": "@@ -1,3 +1,37 @@\n+2006-11-12  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\t* params.c (set_param_value): Initialize the \"set\" field.\n+\t* params.h (struct param_info): Add \"set\" field.\n+\t(PARAM_SET_P): New macro.\n+\t(PREFETCH_LATENCY, SIMULTANEOUS_PREFETCHES, L1_CACHE_SIZE,\n+\tL1_CACHE_LINE_SIZE): New macros.\n+\t* toplev.c (DEFPARAM): Initialize the \"set\" field.\n+\t* tree-ssa-loop-prefetch.c (PREFETCH_LATENCY,\n+\tSIMULTANEOUS_PREFETCHES): Removed.\n+\t(PREFETCH_BLOCK): Use L1_CACHE_LINE_SIZE.\n+\t(tree_ssa_prefetch_arrays): Dump the values of the parameters.\n+\t* config/sparc/sparc.c: Include params.h.\n+\t(sparc_override_options): Set SIMULTANEOUS_PREFETCHES and\n+\tL1_CACHE_LINE_SIZE parameters.\n+\t* config/sparc/sparc.h (PREFETCH_BLOCK, SIMULTANEOUS_PREFETCHES):\n+\tRemoved.\n+\t* config/i386/i386.h (PREFETCH_BLOCK, SIMULTANEOUS_PREFETCHES):\n+\tRemoved.\n+\t* config/i386/i386.c: Include params.h.\n+\t(k8_cost): Change default value for SIMULTANEOUS_PREFETCHES.\n+\t(override_options): Set SIMULTANEOUS_PREFETCHES and\n+\tL1_CACHE_LINE_SIZE parameters.\n+\t* config/sh/sh.h (SIMULTANEOUS_PREFETCHES): Removed.\n+\t(OPTIMIZATION_OPTIONS): Set SIMULTANEOUS_PREFETCHES and\n+\tL1_CACHE_LINE_SIZE parameters.\n+\t* config/ia64/ia64.c (ia64_optimization_options): Set\n+\tSIMULTANEOUS_PREFETCHES and L1_CACHE_LINE_SIZE parameters.\n+\t* config/ia64/ia64.h (SIMULTANEOUS_PREFETCHES, PREFETCH_BLOCK):\n+\tRemoved.\n+\t* params.def (PARAM_PREFETCH_LATENCY, PARAM_SIMULTANEOUS_PREFETCHES,\n+\tPARAM_L1_CACHE_SIZE, PARAM_L1_CACHE_LINE_SIZE): New params.\n+\t* doc/invoke.texi: Document new params.\n+\n 2006-11-12  Roger Sayle  <roger@eyesopen.com>\n \n \tPR tree-optimization/13827"}, {"sha": "74af060dddad9252841075286ce269f64377c890", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1", "patch": "@@ -50,6 +50,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"tree-gimple.h\"\n #include \"dwarf2.h\"\n #include \"tm-constrs.h\"\n+#include \"params.h\"\n \n #ifndef CHECK_STACK_LIMIT\n #define CHECK_STACK_LIMIT (-1)\n@@ -536,7 +537,12 @@ struct processor_costs k8_cost = {\n \t\t\t\t\t   in SImode, DImode and TImode */\n   5,\t\t\t\t\t/* MMX or SSE register to integer */\n   64,\t\t\t\t\t/* size of prefetch block */\n-  6,\t\t\t\t\t/* number of parallel prefetches */\n+  /* New AMD processors neer drop prefetches; if they cannot be performed\n+     immediately, they are queued.  We set number of simultaneous prefetches\n+     to a large constant to reflect this (it probably is not a good idea not\n+     to limit number of prefetches at all, as their execution also takes some\n+     time).  */\n+  100,\t\t\t\t\t/* number of parallel prefetches */\n   5,\t\t\t\t\t/* Branch cost */\n   COSTS_N_INSNS (4),\t\t\t/* cost of FADD and FSUB insns.  */\n   COSTS_N_INSNS (4),\t\t\t/* cost of FMUL instruction.  */\n@@ -2063,6 +2069,12 @@ override_options (void)\n      so it won't slow down the compilation and make x87 code slower.  */\n   if (!TARGET_SCHEDULE)\n     flag_schedule_insns_after_reload = flag_schedule_insns = 0;\n+\n+  if (!PARAM_SET_P (PARAM_SIMULTANEOUS_PREFETCHES))\n+    set_param_value (\"simultaneous-prefetches\",\n+\t\t     ix86_cost->simultaneous_prefetches);\n+  if (!PARAM_SET_P (PARAM_L1_CACHE_LINE_SIZE))\n+    set_param_value (\"l1-cache-line-size\", ix86_cost->prefetch_block);\n }\n \f\n /* switch to the appropriate section for output of DECL."}, {"sha": "c711510985c95faa6ac16830de2ad3fbb713ef7c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1", "patch": "@@ -1739,12 +1739,6 @@ do {\t\t\t\t\t\t\t\\\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n \n-/* Number of bytes moved into a data cache for a single prefetch operation.  */\n-#define PREFETCH_BLOCK ix86_cost->prefetch_block\n-\n-/* Number of prefetch operations that can be done in parallel.  */\n-#define SIMULTANEOUS_PREFETCHES ix86_cost->simultaneous_prefetches\n-\n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 16"}, {"sha": "53d90d2424922fce2c9036acdcb84b4904a1d382", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1", "patch": "@@ -9798,6 +9798,11 @@ ia64_optimization_options (int level ATTRIBUTE_UNUSED,\n {\n   /* Let the scheduler form additional regions.  */\n   set_param_value (\"max-sched-extend-regions-iters\", 2);\n+\n+  /* Set the default values for cache-related parameters.  */\n+  set_param_value (\"simultaneous-prefetches\", 6);\n+  set_param_value (\"l1-cache-line-size\", 32);\n+\n }\n \n #include \"gt-ia64.h\""}, {"sha": "327a31365db4efaabaa7b9e444e78a9fee511fcf", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1", "patch": "@@ -1979,19 +1979,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    #pragma weak.  Note, #pragma weak will only be supported if SUPPORT_WEAK is\n    defined.  */\n \n-/* If this architecture supports prefetch, define this to be the number of\n-   prefetch commands that can be executed in parallel.\n-\n-   ??? This number is bogus and needs to be replaced before the value is\n-   actually used in optimizations.  */\n-\n-#define SIMULTANEOUS_PREFETCHES 6\n-\n-/* If this architecture supports prefetch, define this to be the size of\n-   the cache line that is prefetched.  */\n-\n-#define PREFETCH_BLOCK 32\n-\n #define HANDLE_SYSV_PRAGMA 1\n \n /* A C expression for the maximum number of instructions to execute via"}, {"sha": "5f8412fb935389c5bcd584fa19e70cd1d2e1d9dc", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1", "patch": "@@ -495,6 +495,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n      the user explicitly requested this to be on or off.  */\t\t\\\n   if (flag_schedule_insns > 0)\t\t\t\t\t\t\\\n     flag_schedule_insns = 2;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  set_param_value (\"simultaneous-prefetches\", 2);\t\t\t\\\n } while (0)\n \n #define ASSEMBLER_DIALECT assembler_dialect\n@@ -3467,8 +3469,6 @@ extern int current_function_interrupt;\n 2:\\n\" TEXT_SECTION_ASM_OP);\n #endif /* (defined CRT_BEGIN || defined CRT_END) && ! __SHMEDIA__ */\n \n-#define SIMULTANEOUS_PREFETCHES 2\n-\n /* FIXME: middle-end support for highpart optimizations is missing.  */\n #define high_life_started reload_in_progress\n "}, {"sha": "b26b59ba2ad02287af5fe76a846e032d4a1895e0", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1", "patch": "@@ -51,6 +51,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"cfglayout.h\"\n #include \"tree-gimple.h\"\n #include \"langhooks.h\"\n+#include \"params.h\"\n \n /* Processor costs */\n static const\n@@ -827,6 +828,20 @@ sparc_override_options (void)\n   if (!(target_flags_explicit & MASK_LONG_DOUBLE_128))\n     target_flags |= MASK_LONG_DOUBLE_128;\n #endif\n+\n+  if (!PARAM_SET_P (PARAM_SIMULTANEOUS_PREFETCHES))\n+    set_param_value (\"simultaneous-prefetches\",\n+\t\t     ((sparc_cpu == PROCESSOR_ULTRASPARC\n+\t\t       || sparc_cpu == PROCESSOR_NIAGARA)\n+\t\t      ? 2\n+\t\t      : (sparc_cpu == PROCESSOR_ULTRASPARC3\n+\t\t\t ? 8 : 3)));\n+  if (!PARAM_SET_P (PARAM_L1_CACHE_LINE_SIZE))\n+    set_param_value (\"l1-cache-line-size\", \n+\t\t     ((sparc_cpu == PROCESSOR_ULTRASPARC\n+\t\t       || sparc_cpu == PROCESSOR_ULTRASPARC3\n+\t\t       || sparc_cpu == PROCESSOR_NIAGARA)\n+\t\t      ? 64 : 32));\n }\n \f\n #ifdef SUBTARGET_ATTRIBUTE_TABLE"}, {"sha": "936fac861cfd1667609a5798af115111773f6e72", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1", "patch": "@@ -2175,19 +2175,6 @@ do {                                                                    \\\n \t : (sparc_cpu == PROCESSOR_NIAGARA \\\n \t    ? 4 \\\n \t : 3)))\n-\n-#define PREFETCH_BLOCK \\\n-\t((sparc_cpu == PROCESSOR_ULTRASPARC \\\n-          || sparc_cpu == PROCESSOR_ULTRASPARC3 \\\n-\t  || sparc_cpu == PROCESSOR_NIAGARA) \\\n-         ? 64 : 32)\n-\n-#define SIMULTANEOUS_PREFETCHES \\\n-\t((sparc_cpu == PROCESSOR_ULTRASPARC \\\n-\t  || sparc_cpu == PROCESSOR_NIAGARA) \\\n-         ? 2 \\\n-         : (sparc_cpu == PROCESSOR_ULTRASPARC3 \\\n-            ? 8 : 3))\n \f\n /* Control the assembler format that we output.  */\n "}, {"sha": "544467e074ab6a6daed8b5e4daa68bad78a00261", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1", "patch": "@@ -6329,6 +6329,21 @@ duplicated when threading jumps.\n Maximum number of fields in a structure we will treat in\n a field sensitive manner during pointer analysis.\n \n+@item prefetch-latency\n+Estimate on average number of instructions that are executed before\n+prefetch finishes.  The distance we prefetch ahead is proportional\n+to this constant.  Increasing this number may also lead to less\n+streams being prefetched (see @option{simultaneous-prefetches}).\n+\n+@item simultaneous-prefetches\n+Maximum number of prefetches that can run at the same time.\n+\n+@item l1-cache-line-size\n+The size of cache line in L1 cache, in bytes.\n+\n+@item l1-cache-size\n+The number of cache lines in L1 cache.\n+\n @end table\n @end table\n "}, {"sha": "fee0657cd59eeeb7f7e8054d3a54c53dc12dea37", "filename": "gcc/params.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fparams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fparams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.c?ref=47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1", "patch": "@@ -77,7 +77,10 @@ set_param_value (const char *name, int value)\n \t\t compiler_params[i].option,\n \t\t compiler_params[i].max_value);\n \telse\n-\t  compiler_params[i].value = value;\n+\t  {\n+\t    compiler_params[i].value = value;\n+\t    compiler_params[i].set = true;\n+\t  }\n \treturn;\n       }\n "}, {"sha": "764b3c41b3eceb0d8d5515e24c3b33327a04dc1d", "filename": "gcc/params.def", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1", "patch": "@@ -594,6 +594,37 @@ DEFPARAM(PARAM_MAX_SCHED_READY_INSNS,\n \t \"The maximum number of instructions ready to be issued to be considered by the scheduler during the first scheduling pass\",\n \t 100, 0, 0)\n \n+/* Prefetching and cache-optimizations related parameters.  Default values are\n+   usually set by machine description.  */\n+\n+/* The number of insns executed before prefetch is completed.  */\n+\n+DEFPARAM (PARAM_PREFETCH_LATENCY,\n+\t \"prefetch-latency\",\n+\t \"The number of insns executed before prefetch is completed\",\n+\t 200, 0, 0)\n+\n+/* The number of prefetches that can run at the same time.  */\n+\n+DEFPARAM (PARAM_SIMULTANEOUS_PREFETCHES,\n+\t  \"simultaneous-prefetches\",\n+\t  \"The number of prefetches that can run at the same time\",\n+\t  3, 0, 0)\n+\n+/* The size of L1 cache in number of cache lines.  */\n+\n+DEFPARAM (PARAM_L1_CACHE_SIZE,\n+\t  \"l1-cache-size\",\n+\t  \"The size of L1 cache\",\n+\t  1024, 0, 0)\n+\n+/* The size of L1 cache line in bytes.  */\n+\n+DEFPARAM (PARAM_L1_CACHE_LINE_SIZE,\n+\t  \"l1-cache-line-size\",\n+\t  \"The size of L1 cache line\",\n+\t  32, 0, 0)\n+\n /*\n Local variables:\n mode:c"}, {"sha": "0d99755d911e79f7410d85d7d5ae00964850c891", "filename": "gcc/params.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1", "patch": "@@ -49,6 +49,9 @@ typedef struct param_info\n   /* The associated value.  */\n   int value;\n \n+  /* True if the parameter was explicitly set.  */\n+  bool set;\n+\n   /* Minimum acceptable value.  */\n   int min_value;\n   \n@@ -88,6 +91,10 @@ typedef enum compiler_param\n #define PARAM_VALUE(ENUM) \\\n   (compiler_params[(int) ENUM].value)\n \n+/* True if the value of the parameter was explicitly changed.  */\n+#define PARAM_SET_P(ENUM) \\\n+  (compiler_params[(int) ENUM].set)\n+\n /* Macros for the various parameters.  */\n #define SALIAS_MAX_IMPLICIT_FIELDS \\\n   PARAM_VALUE (PARAM_SALIAS_MAX_IMPLICIT_FIELDS)\n@@ -151,4 +158,12 @@ typedef enum compiler_param\n   ((size_t) PARAM_VALUE (PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE))\n #define MAX_SCHED_READY_INSNS \\\n   PARAM_VALUE (PARAM_MAX_SCHED_READY_INSNS)\n+#define PREFETCH_LATENCY \\\n+  PARAM_VALUE (PARAM_PREFETCH_LATENCY)\n+#define SIMULTANEOUS_PREFETCHES \\\n+  PARAM_VALUE (PARAM_SIMULTANEOUS_PREFETCHES)\n+#define L1_CACHE_SIZE \\\n+  PARAM_VALUE (PARAM_L1_CACHE_SIZE)\n+#define L1_CACHE_LINE_SIZE \\\n+  PARAM_VALUE (PARAM_L1_CACHE_LINE_SIZE)\n #endif /* ! GCC_PARAMS_H */"}, {"sha": "b074a9f57b3e8fbc78c851bd0a4399f718a77db6", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1", "patch": "@@ -387,10 +387,10 @@ const char *user_label_prefix;\n \n static const param_info lang_independent_params[] = {\n #define DEFPARAM(ENUM, OPTION, HELP, DEFAULT, MIN, MAX) \\\n-  { OPTION, DEFAULT, MIN, MAX, HELP },\n+  { OPTION, DEFAULT, false, MIN, MAX, HELP },\n #include \"params.def\"\n #undef DEFPARAM\n-  { NULL, 0, 0, 0, NULL }\n+  { NULL, 0, false, 0, 0, NULL }\n };\n \n /* Output files for assembler code (real compiler output)"}, {"sha": "41ada264a04395bbefe39a3dcad2d756571ca83e", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=47eb5b329bf8e6ab2e939a4cedf5533d02a6c7f1", "patch": "@@ -115,19 +115,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Magic constants follow.  These should be replaced by machine specific\n    numbers.  */\n \n-/* A number that should roughly correspond to the number of instructions\n-   executed before the prefetch is completed.  */\n-\n-#ifndef PREFETCH_LATENCY\n-#define PREFETCH_LATENCY 200\n-#endif\n-\n-/* Number of prefetches that can run at the same time.  */\n-\n-#ifndef SIMULTANEOUS_PREFETCHES\n-#define SIMULTANEOUS_PREFETCHES 3\n-#endif\n-\n /* True if write can be prefetched by a read prefetch.  */\n \n #ifndef WRITE_CAN_USE_READ_PREFETCH\n@@ -140,10 +127,12 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define READ_CAN_USE_WRITE_PREFETCH 0\n #endif\n \n-/* Cache line size.  Assumed to be a power of two.  */\n+/* The size of the block loaded by a single prefetch.  Usually, this is\n+   the same as cache line size (at the moment, we only consider one level\n+   of cache hierarchy).  */\n \n #ifndef PREFETCH_BLOCK\n-#define PREFETCH_BLOCK 32\n+#define PREFETCH_BLOCK L1_CACHE_LINE_SIZE\n #endif\n \n /* Do we have a forward hardware sequential prefetching?  */\n@@ -1026,6 +1015,19 @@ tree_ssa_prefetch_arrays (struct loops *loops)\n       || PREFETCH_BLOCK == 0)\n     return 0;\n \n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"Prefetching parameters:\\n\");\n+      fprintf (dump_file, \"    simultaneous prefetches: %d\\n\",\n+\t       SIMULTANEOUS_PREFETCHES);\n+      fprintf (dump_file, \"    prefetch latency: %d\\n\", PREFETCH_LATENCY);\n+      fprintf (dump_file, \"    L1 cache size: %d (%d bytes)\\n\",\n+\t       L1_CACHE_SIZE, L1_CACHE_SIZE * L1_CACHE_LINE_SIZE);\n+      fprintf (dump_file, \"    L1 cache line size: %d\\n\", L1_CACHE_LINE_SIZE);\n+      fprintf (dump_file, \"    prefetch block size: %d\\n\", PREFETCH_BLOCK);\n+      fprintf (dump_file, \"\\n\");\n+    }\n+\n   initialize_original_copy_tables ();\n \n   if (!built_in_decls[BUILT_IN_PREFETCH])"}]}