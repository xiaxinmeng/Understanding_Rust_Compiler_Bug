{"sha": "6122336c832dc4dfedc49279549caddce86306ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEyMjMzNmM4MzJkYzRkZmVkYzQ5Mjc5NTQ5Y2FkZGNlODYzMDZmZg==", "commit": {"author": {"name": "Chris Manghane", "email": "cmang@google.com", "date": "2014-05-06T13:50:01Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-05-06T13:50:01Z"}, "message": "compiler: Store flags for division checks in Gogo object instead of using global variables.\n\n\t* go-c.h (go_create_gogo): Update declaration to add\n\tcheck_divide_zero and check_divide_overflow parameters.\n\t* go-lang.c (go_langhook_init): Pass new arguments to\n\tgo_create_gogo.\n\nFrom-SVN: r210109", "tree": {"sha": "cbfe6afa638ce0b18b2e51c55acff495e07956d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbfe6afa638ce0b18b2e51c55acff495e07956d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6122336c832dc4dfedc49279549caddce86306ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6122336c832dc4dfedc49279549caddce86306ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6122336c832dc4dfedc49279549caddce86306ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6122336c832dc4dfedc49279549caddce86306ff/comments", "author": null, "committer": null, "parents": [{"sha": "3134fb19432fbd54fe1be4315bf6f54e5b88868a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3134fb19432fbd54fe1be4315bf6f54e5b88868a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3134fb19432fbd54fe1be4315bf6f54e5b88868a"}], "stats": {"total": 60, "additions": 49, "deletions": 11}, "files": [{"sha": "b4267ab98737f06471862cbc965d5c6d74a8abf6", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6122336c832dc4dfedc49279549caddce86306ff/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6122336c832dc4dfedc49279549caddce86306ff/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=6122336c832dc4dfedc49279549caddce86306ff", "patch": "@@ -1,3 +1,10 @@\n+2014-05-06  Chris Manghane  <cmang@google.com>\n+\n+\t* go-c.h (go_create_gogo): Update declaration to add\n+\tcheck_divide_zero and check_divide_overflow parameters.\n+\t* go-lang.c (go_langhook_init): Pass new arguments to\n+\tgo_create_gogo.\n+\n 2014-05-05  Chris Manghane  <cmang@google.com>\n \n \t* go-gcc.cc (Gcc_backend::implicit_variable): Rename from"}, {"sha": "5f5ac0da9bc8286b4d01febe261f87bb37d2158f", "filename": "gcc/go/go-c.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6122336c832dc4dfedc49279549caddce86306ff/gcc%2Fgo%2Fgo-c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6122336c832dc4dfedc49279549caddce86306ff/gcc%2Fgo%2Fgo-c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-c.h?ref=6122336c832dc4dfedc49279549caddce86306ff", "patch": "@@ -34,7 +34,8 @@ extern void go_add_search_path (const char*);\n \n extern void go_create_gogo (int int_type_size, int pointer_size,\n \t\t\t    const char* pkgpath, const char *prefix,\n-\t\t\t    const char *relative_import_path);\n+\t\t\t    const char *relative_import_path,\n+\t\t\t    bool check_divide_zero, bool check_divide_overflow);\n \n extern void go_parse_input_files (const char**, unsigned int,\n \t\t\t\t  bool only_check_syntax,"}, {"sha": "f6e865e08cf79f7f6bcb3ea5a1a093cf7dd296ca", "filename": "gcc/go/go-lang.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6122336c832dc4dfedc49279549caddce86306ff/gcc%2Fgo%2Fgo-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6122336c832dc4dfedc49279549caddce86306ff/gcc%2Fgo%2Fgo-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-lang.c?ref=6122336c832dc4dfedc49279549caddce86306ff", "patch": "@@ -104,7 +104,8 @@ go_langhook_init (void)\n      build_common_builtin_nodes (because it calls, indirectly,\n      go_type_for_size).  */\n   go_create_gogo (INT_TYPE_SIZE, POINTER_SIZE, go_pkgpath, go_prefix,\n-\t\t  go_relative_import_path);\n+\t\t  go_relative_import_path, go_check_divide_zero,\n+\t\t  go_check_divide_overflow);\n \n   build_common_builtin_nodes ();\n "}, {"sha": "df3103b0d1d70c095c889b4b18ca60b87e8b76a8", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6122336c832dc4dfedc49279549caddce86306ff/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6122336c832dc4dfedc49279549caddce86306ff/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=6122336c832dc4dfedc49279549caddce86306ff", "patch": "@@ -5432,7 +5432,7 @@ Binary_expression::lower_compare_to_memcmp(Gogo*, Statement_inserter* inserter)\n }\n \n Expression*\n-Binary_expression::do_flatten(Gogo*, Named_object*,\n+Binary_expression::do_flatten(Gogo* gogo, Named_object*,\n                               Statement_inserter* inserter)\n {\n   Location loc = this->location();\n@@ -5462,11 +5462,9 @@ Binary_expression::do_flatten(Gogo*, Named_object*,\n                       left_type->integer_type() != NULL)\n                      || this->op_ == OPERATOR_MOD);\n \n-  // FIXME: go_check_divide_zero and go_check_divide_overflow are globals\n-  // defined in gcc/go/lang.opt.  These should be defined in go_create_gogo\n-  // and accessed from the Gogo* passed to do_flatten.\n   if (is_shift_op\n-      || (is_idiv_op && (go_check_divide_zero || go_check_divide_overflow)))\n+      || (is_idiv_op\n+\t  && (gogo->check_divide_by_zero() || gogo->check_divide_overflow())))\n     {\n       if (!this->left_->is_variable())\n         {\n@@ -6046,7 +6044,7 @@ Binary_expression::do_get_tree(Translate_context* context)\n   // Add checks for division by zero and division overflow as needed.\n   if (is_idiv_op)\n     {\n-      if (go_check_divide_zero)\n+      if (gogo->check_divide_by_zero())\n \t{\n \t  // right == 0\n           Bexpression* zero_expr =\n@@ -6065,7 +6063,7 @@ Binary_expression::do_get_tree(Translate_context* context)\n                                                         crash_expr, ret, loc);\n \t}\n \n-      if (go_check_divide_overflow)\n+      if (gogo->check_divide_overflow())\n \t{\n \t  // right == -1\n \t  // FIXME: It would be nice to say that this test is expected"}, {"sha": "222ea90ae01d801865e0583c32e874393da5ca62", "filename": "gcc/go/gofrontend/go.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6122336c832dc4dfedc49279549caddce86306ff/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6122336c832dc4dfedc49279549caddce86306ff/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgo.cc?ref=6122336c832dc4dfedc49279549caddce86306ff", "patch": "@@ -21,7 +21,8 @@ static Gogo* gogo;\n GO_EXTERN_C\n void\n go_create_gogo(int int_type_size, int pointer_size, const char *pkgpath,\n-\t       const char *prefix, const char *relative_import_path)\n+\t       const char *prefix, const char *relative_import_path,\n+\t       bool check_divide_by_zero, bool check_divide_overflow)\n {\n   go_assert(::gogo == NULL);\n   Linemap* linemap = go_get_linemap();\n@@ -34,6 +35,10 @@ go_create_gogo(int int_type_size, int pointer_size, const char *pkgpath,\n \n   if (relative_import_path != NULL)\n     ::gogo->set_relative_import_path(relative_import_path);\n+  if (check_divide_by_zero)\n+    ::gogo->set_check_divide_by_zero(check_divide_by_zero);\n+  if (check_divide_overflow)\n+    ::gogo->set_check_divide_overflow(check_divide_overflow);\n }\n \n // Parse the input files."}, {"sha": "f125201643f5f753579a8fa1883dd1b532be246c", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6122336c832dc4dfedc49279549caddce86306ff/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6122336c832dc4dfedc49279549caddce86306ff/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=6122336c832dc4dfedc49279549caddce86306ff", "patch": "@@ -215,7 +215,27 @@ class Gogo\n   // Set the relative import path from a command line option.\n   void\n   set_relative_import_path(const std::string& s)\n-  {this->relative_import_path_ = s; }\n+  { this->relative_import_path_ = s; }\n+\n+  // Return whether to check for division by zero in binary operations.\n+  bool\n+  check_divide_by_zero() const\n+  { return this->check_divide_by_zero_; }\n+\n+  // Set the option to check division by zero from a command line option.\n+  void\n+  set_check_divide_by_zero(bool b)\n+  { this->check_divide_by_zero_ = b; }\n+\n+  // Return whether to check for division overflow in binary operations.\n+  bool\n+  check_divide_overflow() const\n+  { return this->check_divide_overflow_; }\n+\n+  // Set the option to check division overflow from a command line option.\n+  void\n+  set_check_divide_overflow(bool b)\n+  { this->check_divide_overflow_ = b; }\n \n   // Return the priority to use for the package we are compiling.\n   // This is two more than the largest priority of any package we\n@@ -716,6 +736,12 @@ class Gogo\n   // The relative import path, from the -fgo-relative-import-path\n   // option.\n   std::string relative_import_path_;\n+  // Whether or not to check for division by zero, from the\n+  // -fgo-check-divide-zero option.\n+  bool check_divide_by_zero_;\n+  // Whether or not to check for division overflow, from the\n+  // -fgo-check-divide-overflow option.\n+  bool check_divide_overflow_;\n   // A list of types to verify.\n   std::vector<Type*> verify_types_;\n   // A list of interface types defined while parsing."}]}