{"sha": "63762cc243c643c10aca7e07dfd6abe9b78748f8", "node_id": "C_kwDOANBUbNoAKDYzNzYyY2MyNDNjNjQzYzEwYWNhN2UwN2RmZDZhYmU5Yjc4NzQ4Zjg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-05-23T14:28:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-23T14:28:23Z"}, "message": "Merge #1241\n\n1241: Implement name resolution for the IfLet expression. r=philberty a=antego\n\nAddresses #1177.\r\n\r\nGuidance from the ticket #1177:\r\n\r\n> You should be able to copy how we do name resolution for the if blocks from that file. Though if let statements add a new binding and scope level so you need to declare the pattern so you should be able to see how that is done from rust-ast-resolve-stmt.\r\n\r\nI don't understand how to modify the block expression resolution so that it can handle the `IfLet` expression. For now, I copied the code from the `MatchExpr` resolution. Not sure how to test it either and what is the desired expected result of the name resolution so I just hope that reviewers will spot the errors.\r\n\r\nI created this PR in order to get some guidance about how to proceed with it. Thanks!\r\n\r\n\n\nCo-authored-by: antego <antego@users.noreply.github.com>", "tree": {"sha": "1e453635c61d283bb56f30efe00331f87fbef715", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e453635c61d283bb56f30efe00331f87fbef715"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63762cc243c643c10aca7e07dfd6abe9b78748f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJii5oHCRBK7hj4Ov3rIwAAvW4IAF9GqTh3Zymlu0hVaii/nq6B\nYPdruUxUIFZz5cAs0QsjvA8HscHiO60E/ugr7Q6aHDvTg+ORXzirCqo6MaorywsS\njv6OMUKFlChYU1OAQHoWeZKd5KvgRuS398kGiEr6U3XeyMhPyBAK4tf0o5o8/mze\nQeO56TyJegqTKlhcsW9asLb4rWsYNHKRWS8b8ce23Zux2yCqG7W3bU+Zr1+cb0Wk\n6Mt4jfvDoxJHwnJUUiGQuVyWuw2mZQU/II9udLCRUDZxeBMacjQ1TX5POOohOOpe\nL1vh48tggvM7TVFSHKjxSWIEFO9gPQDM5hmw3PjUrXqRcy6HAY/U5MPsGPoL5e0=\n=TTRM\n-----END PGP SIGNATURE-----\n", "payload": "tree 1e453635c61d283bb56f30efe00331f87fbef715\nparent c7008d3e254786b5e752aa61e067f62c38042b81\nparent a91b138bbc26408d97bbe870553b4276f8bf1f71\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1653316103 +0000\ncommitter GitHub <noreply@github.com> 1653316103 +0000\n\nMerge #1241\n\n1241: Implement name resolution for the IfLet expression. r=philberty a=antego\n\nAddresses #1177.\r\n\r\nGuidance from the ticket #1177:\r\n\r\n> You should be able to copy how we do name resolution for the if blocks from that file. Though if let statements add a new binding and scope level so you need to declare the pattern so you should be able to see how that is done from rust-ast-resolve-stmt.\r\n\r\nI don't understand how to modify the block expression resolution so that it can handle the `IfLet` expression. For now, I copied the code from the `MatchExpr` resolution. Not sure how to test it either and what is the desired expected result of the name resolution so I just hope that reviewers will spot the errors.\r\n\r\nI created this PR in order to get some guidance about how to proceed with it. Thanks!\r\n\r\n\n\nCo-authored-by: antego <antego@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63762cc243c643c10aca7e07dfd6abe9b78748f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63762cc243c643c10aca7e07dfd6abe9b78748f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63762cc243c643c10aca7e07dfd6abe9b78748f8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7008d3e254786b5e752aa61e067f62c38042b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7008d3e254786b5e752aa61e067f62c38042b81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7008d3e254786b5e752aa61e067f62c38042b81"}, {"sha": "a91b138bbc26408d97bbe870553b4276f8bf1f71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a91b138bbc26408d97bbe870553b4276f8bf1f71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a91b138bbc26408d97bbe870553b4276f8bf1f71"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "402c0488277d1df1d977e77f9ea222811550d8da", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63762cc243c643c10aca7e07dfd6abe9b78748f8/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63762cc243c643c10aca7e07dfd6abe9b78748f8/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc?ref=63762cc243c643c10aca7e07dfd6abe9b78748f8", "patch": "@@ -198,6 +198,31 @@ ResolveExpr::visit (AST::IfExprConseqIf &expr)\n   resolve_expr (expr.get_conseq_if_expr ().get (), expr.get_node_id ());\n }\n \n+void\n+ResolveExpr::visit (AST::IfLetExpr &expr)\n+{\n+  resolve_expr (expr.get_value_expr ().get (), expr.get_node_id ());\n+\n+  NodeId scope_node_id = expr.get_node_id ();\n+  resolver->get_name_scope ().push (scope_node_id);\n+  resolver->get_type_scope ().push (scope_node_id);\n+  resolver->get_label_scope ().push (scope_node_id);\n+  resolver->push_new_name_rib (resolver->get_name_scope ().peek ());\n+  resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n+  resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n+\n+  for (auto &pattern : expr.get_patterns ())\n+    {\n+      PatternDeclaration::go (pattern.get (), expr.get_node_id ());\n+    }\n+\n+  resolve_expr (expr.get_if_block ().get (), expr.get_node_id ());\n+\n+  resolver->get_name_scope ().pop ();\n+  resolver->get_type_scope ().pop ();\n+  resolver->get_label_scope ().pop ();\n+}\n+\n void\n ResolveExpr::visit (AST::BlockExpr &expr)\n {"}, {"sha": "72e608532fda20b2485f54cfa1ab589cd1b0a149", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63762cc243c643c10aca7e07dfd6abe9b78748f8/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63762cc243c643c10aca7e07dfd6abe9b78748f8/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=63762cc243c643c10aca7e07dfd6abe9b78748f8", "patch": "@@ -69,6 +69,8 @@ class ResolveExpr : public ResolverBase\n \n   void visit (AST::IfExprConseqIf &expr) override;\n \n+  void visit (AST::IfLetExpr &expr) override;\n+\n   void visit (AST::BlockExpr &expr) override;\n \n   void visit (AST::UnsafeBlockExpr &expr) override;"}]}