{"sha": "134f7c941929b3d099322a89928c04e5ac69267e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM0ZjdjOTQxOTI5YjNkMDk5MzIyYTg5OTI4YzA0ZTVhYzY5MjY3ZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-06-12T23:33:23Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-06-24T15:12:38Z"}, "message": "x86: Remove brand ID check for Intel processors\n\nBrand ID was a feature that briefly existed in some Pentium III and\nPentium 4 CPUs.  The CPUs that had non-zero brand ID still have had\nvalid family/model.  Brand ID just gives a marketing name for the CPU.\nRemove the extra code for brand ID check.\n\ngcc/\n\n\tPR target/95660\n\t* common/config/i386/cpuinfo.h (get_intel_cpu): Remove brand_id.\n\t(cpu_indicator_init): Likewise.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Updated.\n\ngcc/testsuite/\n\n\tPR target/95660\n\t* gcc.target/i386/builtin_target.c (check_detailed): Updated.", "tree": {"sha": "56a35aef501d5b9b5fdbabdd9b45f0b31004242d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56a35aef501d5b9b5fdbabdd9b45f0b31004242d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/134f7c941929b3d099322a89928c04e5ac69267e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/134f7c941929b3d099322a89928c04e5ac69267e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/134f7c941929b3d099322a89928c04e5ac69267e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/134f7c941929b3d099322a89928c04e5ac69267e/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "403e166b974f53982d78efdd70938d05b6983b2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/403e166b974f53982d78efdd70938d05b6983b2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/403e166b974f53982d78efdd70938d05b6983b2a"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "3eda53240f67e45244f7de65f3dac50ec2305d95", "filename": "gcc/common/config/i386/cpuinfo.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134f7c941929b3d099322a89928c04e5ac69267e/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134f7c941929b3d099322a89928c04e5ac69267e/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h?ref=134f7c941929b3d099322a89928c04e5ac69267e", "patch": "@@ -254,13 +254,12 @@ get_amd_cpu (struct __processor_model *cpu_model,\n static inline const char *\n get_intel_cpu (struct __processor_model *cpu_model,\n \t       struct __processor_model2 *cpu_model2,\n-\t       unsigned int *cpu_features2,\n-\t       unsigned int brand_id)\n+\t       unsigned int *cpu_features2)\n {\n   const char *cpu = NULL;\n \n-  /* Parse family and model only for brand ID 0 and model 6. */\n-  if (brand_id != 0 || cpu_model2->__cpu_family != 0x6)\n+  /* Parse family and model only for model 6. */\n+  if (cpu_model2->__cpu_family != 0x6)\n     return cpu;\n \n   switch (cpu_model2->__cpu_model)\n@@ -758,7 +757,7 @@ cpu_indicator_init (struct __processor_model *cpu_model,\n \n   int max_level;\n   unsigned int vendor;\n-  unsigned int model, family, brand_id;\n+  unsigned int model, family;\n   unsigned int extended_model, extended_family;\n \n   /* This function needs to run just once.  */\n@@ -791,7 +790,6 @@ cpu_indicator_init (struct __processor_model *cpu_model,\n \n   model = (eax >> 4) & 0x0f;\n   family = (eax >> 8) & 0x0f;\n-  brand_id = ebx & 0xff;\n   extended_model = (eax >> 12) & 0xf0;\n   extended_family = (eax >> 20) & 0xff;\n \n@@ -813,7 +811,7 @@ cpu_indicator_init (struct __processor_model *cpu_model,\n       get_available_features (cpu_model, cpu_model2, cpu_features2,\n \t\t\t      ecx, edx);\n       /* Get CPU type.  */\n-      get_intel_cpu (cpu_model, cpu_model2, cpu_features2, brand_id);\n+      get_intel_cpu (cpu_model, cpu_model2, cpu_features2);\n       cpu_model->__cpu_vendor = VENDOR_INTEL;\n     }\n   else if (vendor == signature_AMD_ebx)"}, {"sha": "6da2a15c1b04c3c9b9d959492ef242dd3b3ea14a", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134f7c941929b3d099322a89928c04e5ac69267e/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134f7c941929b3d099322a89928c04e5ac69267e/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=134f7c941929b3d099322a89928c04e5ac69267e", "patch": "@@ -555,7 +555,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \tcpu = \"pentium\";\n       break;\n     case PROCESSOR_PENTIUMPRO:\n-      cpu = get_intel_cpu (&cpu_model, &cpu_model2, cpu_features2, 0);\n+      cpu = get_intel_cpu (&cpu_model, &cpu_model2, cpu_features2);\n       if (cpu == NULL)\n \t{\n \t  if (arch)"}, {"sha": "aa9680544d8f453b3aeed0e5adb3b9008ece9047", "filename": "gcc/testsuite/gcc.target/i386/builtin_target.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134f7c941929b3d099322a89928c04e5ac69267e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134f7c941929b3d099322a89928c04e5ac69267e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c?ref=134f7c941929b3d099322a89928c04e5ac69267e", "patch": "@@ -46,7 +46,7 @@ check_detailed ()\n     {\n     case VENDOR_INTEL:\n       assert (__builtin_cpu_is (\"intel\"));\n-      get_intel_cpu (&cpu_model, &cpu_model2, cpu_features2, 0);\n+      get_intel_cpu (&cpu_model, &cpu_model2, cpu_features2);\n       break;\n     case VENDOR_AMD:\n       assert (__builtin_cpu_is (\"amd\"));"}]}