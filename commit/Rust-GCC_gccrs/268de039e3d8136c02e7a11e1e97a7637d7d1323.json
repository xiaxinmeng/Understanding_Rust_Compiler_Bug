{"sha": "268de039e3d8136c02e7a11e1e97a7637d7d1323", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY4ZGUwMzllM2Q4MTM2YzAyZTdhMTFlMWU5N2E3NjM3ZDdkMTMyMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-10T20:43:09Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-10T20:43:09Z"}, "message": "cp-tree.h (build_new_function_call): Lose koenig_p arg.\n\n\t* cp-tree.h (build_new_function_call): Lose koenig_p arg.  Fix\n\tline breaking.\n\t* call.c (build_new_function_call): Lose koenig_p arg.  Remove\n\tkoenig_p handling here.\n\t* pt.c (push_template_decl_real): Unconditionally\n\tretrofit_lang_decl.\n\t(tsubst_omp_clauses): Likewise.\n\t(do_class_deduction): Adjust buld_new_function_call calls.\n\t* semantics.c (finish_call_expr): Likewise.\n\nFrom-SVN: r247860", "tree": {"sha": "e6b98650467f32ad2abfacd9502177ab66583f89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6b98650467f32ad2abfacd9502177ab66583f89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/268de039e3d8136c02e7a11e1e97a7637d7d1323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/268de039e3d8136c02e7a11e1e97a7637d7d1323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/268de039e3d8136c02e7a11e1e97a7637d7d1323", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/268de039e3d8136c02e7a11e1e97a7637d7d1323/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87c7063d68a79665ff480babc7ff06e6e2e0e1f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87c7063d68a79665ff480babc7ff06e6e2e0e1f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87c7063d68a79665ff480babc7ff06e6e2e0e1f8"}], "stats": {"total": 61, "additions": 27, "deletions": 34}, "files": [{"sha": "35dc539e86afab713e181e66725d7131c443f200", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/268de039e3d8136c02e7a11e1e97a7637d7d1323/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/268de039e3d8136c02e7a11e1e97a7637d7d1323/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=268de039e3d8136c02e7a11e1e97a7637d7d1323", "patch": "@@ -1,3 +1,14 @@\n+2017-05-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (build_new_function_call): Lose koenig_p arg.  Fix\n+\tline breaking.\n+\t* call.c (build_new_function_call): Lose koenig_p arg.  Remove\n+\tkoenig_p handling here.\n+\t* pt.c (push_template_decl_real): Unconditionally retrofit_lang_decl.\n+\t(tsubst_omp_clauses): Likewise.\n+\t(do_class_deduction): Adjust buld_new_function_call calls.\n+\t* semantics.c (finish_call_expr): Likewise.\n+\n 2017-05-10  Jason Merrill  <jason@redhat.com>\n \n \t* pt.c (unify_parameter_deduction_failure, unify_cv_qual_mismatch)"}, {"sha": "b9807cf1ec28149ec12f782e1ddde791aa46b410", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/268de039e3d8136c02e7a11e1e97a7637d7d1323/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/268de039e3d8136c02e7a11e1e97a7637d7d1323/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=268de039e3d8136c02e7a11e1e97a7637d7d1323", "patch": "@@ -4192,7 +4192,7 @@ print_error_for_call_failure (tree fn, vec<tree, va_gc> *args,\n    ARGS.  */\n \n tree\n-build_new_function_call (tree fn, vec<tree, va_gc> **args, bool koenig_p, \n+build_new_function_call (tree fn, vec<tree, va_gc> **args,\n \t\t\t tsubst_flags_t complain)\n {\n   struct z_candidate *candidates, *cand;\n@@ -4210,22 +4210,6 @@ build_new_function_call (tree fn, vec<tree, va_gc> **args, bool koenig_p,\n   if (flag_tm)\n     tm_malloc_replacement (fn);\n \n-  /* If this function was found without using argument dependent\n-     lookup, then we want to ignore any undeclared friend\n-     functions.  */\n-  if (!koenig_p)\n-    {\n-      tree orig_fn = fn;\n-\n-      fn = remove_hidden_names (fn);\n-      if (!fn)\n-\t{\n-\t  if (complain & tf_error)\n-\t    print_error_for_call_failure (orig_fn, *args, NULL);\n-\t  return error_mark_node;\n-\t}\n-    }\n-\n   /* Get the high-water mark for the CONVERSION_OBSTACK.  */\n   p = conversion_obstack_alloc (0);\n "}, {"sha": "09b136467ff58b9d0c91cc71c471ae425ec91fbd", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/268de039e3d8136c02e7a11e1e97a7637d7d1323/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/268de039e3d8136c02e7a11e1e97a7637d7d1323/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=268de039e3d8136c02e7a11e1e97a7637d7d1323", "patch": "@@ -5649,23 +5649,24 @@ extern tree type_decays_to\t\t\t(tree);\n extern tree extract_call_expr\t\t\t(tree);\n extern tree build_user_type_conversion\t\t(tree, tree, int,\n \t\t\t\t\t\t tsubst_flags_t);\n-extern tree build_new_function_call\t\t(tree, vec<tree, va_gc> **, bool, \n+extern tree build_new_function_call\t\t(tree, vec<tree, va_gc> **,\n \t\t\t\t\t\t tsubst_flags_t);\n-extern tree build_operator_new_call\t\t(tree, vec<tree, va_gc> **, tree *,\n-\t\t\t\t\t\t tree *, tree, tree, tree *,\n-\t\t\t\t\t\t tsubst_flags_t);\n-extern tree build_new_method_call\t\t(tree, tree, vec<tree, va_gc> **,\n-\t\t\t\t\t\t tree, int, tree *,\n-\t\t\t\t\t\t tsubst_flags_t);\n-extern tree build_special_member_call\t\t(tree, tree, vec<tree, va_gc> **,\n+extern tree build_operator_new_call\t\t(tree, vec<tree, va_gc> **,\n+\t\t\t\t\t\t tree *, tree *, tree, tree,\n+\t\t\t\t\t\t tree *, tsubst_flags_t);\n+extern tree build_new_method_call\t\t(tree, tree,\n+\t\t\t\t\t\t vec<tree, va_gc> **, tree,\n+\t\t\t\t\t\t int, tree *, tsubst_flags_t);\n+extern tree build_special_member_call\t\t(tree, tree,\n+\t\t\t\t\t\t vec<tree, va_gc> **,\n \t\t\t\t\t\t tree, int, tsubst_flags_t);\n extern tree build_new_op\t\t\t(location_t, enum tree_code,\n \t\t\t\t\t\t int, tree, tree, tree, tree *,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree build_op_call\t\t\t(tree, vec<tree, va_gc> **,\n \t\t\t\t\t\t tsubst_flags_t);\n extern bool aligned_allocation_fn_p\t\t(tree);\n-extern bool usual_deallocation_fn_p\t(tree);\n+extern bool usual_deallocation_fn_p\t\t(tree);\n extern tree build_op_delete_call\t\t(enum tree_code, tree, tree,\n \t\t\t\t\t\t bool, tree, tree,\n \t\t\t\t\t\t tsubst_flags_t);"}, {"sha": "05aa454418da7fef8c253aa5a6b3337165458099", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/268de039e3d8136c02e7a11e1e97a7637d7d1323/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/268de039e3d8136c02e7a11e1e97a7637d7d1323/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=268de039e3d8136c02e7a11e1e97a7637d7d1323", "patch": "@@ -5570,7 +5570,7 @@ template arguments to %qD do not match original template %qD\",\n     SET_TYPE_TEMPLATE_INFO (TREE_TYPE (tmpl), info);\n   else\n     {\n-      if (is_primary && !DECL_LANG_SPECIFIC (decl))\n+      if (is_primary)\n \tretrofit_lang_decl (decl);\n       if (DECL_LANG_SPECIFIC (decl))\n \tDECL_TEMPLATE_INFO (decl) = info;\n@@ -15253,8 +15253,7 @@ tsubst_omp_clauses (tree clauses, enum c_omp_region_type ort,\n \t\ttree decl = OMP_CLAUSE_DECL (nc);\n \t\tif (VAR_P (decl))\n \t\t  {\n-\t\t    if (!DECL_LANG_SPECIFIC (decl))\n-\t\t      retrofit_lang_decl (decl);\n+\t\t    retrofit_lang_decl (decl);\n \t\t    DECL_OMP_PRIVATIZED_MEMBER (decl) = 1;\n \t\t  }\n \t      }\n@@ -25250,14 +25249,12 @@ do_class_deduction (tree ptype, tree tmpl, tree init, int flags,\n     }\n \n   ++cp_unevaluated_operand;\n-  tree t = build_new_function_call (cands, &args, /*koenig*/false,\n-\t\t\t\t    tf_decltype);\n+  tree t = build_new_function_call (cands, &args, tf_decltype);\n \n   if (t == error_mark_node && (complain & tf_warning_or_error))\n     {\n       error (\"class template argument deduction failed:\");\n-      t = build_new_function_call (cands, &args, /*koenig*/false,\n-\t\t\t\t   complain | tf_decltype);\n+      t = build_new_function_call (cands, &args, complain | tf_decltype);\n       if (old_cands != cands)\n \tinform (input_location, \"explicit deduction guides not considered \"\n \t\t\"for copy-initialization\");"}, {"sha": "7b2c101302faa4849da5ecb9ffa5536dcf4d8637", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/268de039e3d8136c02e7a11e1e97a7637d7d1323/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/268de039e3d8136c02e7a11e1e97a7637d7d1323/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=268de039e3d8136c02e7a11e1e97a7637d7d1323", "patch": "@@ -2438,7 +2438,7 @@ finish_call_expr (tree fn, vec<tree, va_gc> **args, bool disallow_virtual,\n \t    }\n \n \t  /* A call to a namespace-scope function.  */\n-\t  result = build_new_function_call (fn, args, koenig_p, complain);\n+\t  result = build_new_function_call (fn, args, complain);\n \t}\n     }\n   else if (TREE_CODE (fn) == PSEUDO_DTOR_EXPR)"}]}