{"sha": "f10a665465304f407bd6ad159b07e52b515c9f5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEwYTY2NTQ2NTMwNGY0MDdiZDZhZDE1OWIwN2U1MmI1MTVjOWY1ZQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-02-19T09:26:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-02-19T09:26:09Z"}, "message": "re PR tree-optimization/19828 (LIM is pulling out a pure function even though there is something which can modify global memory)\n\n\tPR tree-optimization/19828\n\t* tree-ssa-loop-im.c: Add a TODO comment.\n\t(movement_possibility): Return MOVE_PRESERVE_EXECUTION for calls\n\twithout side-effects.\n\n\t* gcc.dg/tree-ssa/loop-7.c: New test.\n\t* gcc.c-torture/execute/20050218-1.c: New test.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r95275", "tree": {"sha": "2b023726d21f6bfcb73860fcbf31cc52aa54697e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b023726d21f6bfcb73860fcbf31cc52aa54697e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f10a665465304f407bd6ad159b07e52b515c9f5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10a665465304f407bd6ad159b07e52b515c9f5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f10a665465304f407bd6ad159b07e52b515c9f5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10a665465304f407bd6ad159b07e52b515c9f5e/comments", "author": null, "committer": null, "parents": [{"sha": "ad8228bd350b55db13960a809b9995ec9588605a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad8228bd350b55db13960a809b9995ec9588605a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad8228bd350b55db13960a809b9995ec9588605a"}], "stats": {"total": 123, "additions": 123, "deletions": 0}, "files": [{"sha": "25fc15a5b1162d5b9121c3375da2635494f8261b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a665465304f407bd6ad159b07e52b515c9f5e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a665465304f407bd6ad159b07e52b515c9f5e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f10a665465304f407bd6ad159b07e52b515c9f5e", "patch": "@@ -1,3 +1,11 @@\n+2005-02-19  Zdenek Dvorak  <dvorakz@suse.cz>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/19828\n+\t* tree-ssa-loop-im.c: Add a TODO comment.\n+\t(movement_possibility): Return MOVE_PRESERVE_EXECUTION for calls\n+\twithout side-effects.\n+\n 2005-02-18  James A. Morrison  <phython@gcc.gnu.org>\n \n \t* tree-ssa-ccp.c (widen_bitfield): Pass type to build_int_cst and don't"}, {"sha": "26cfd2587031152e2757fc7730b56cea2ae77343", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a665465304f407bd6ad159b07e52b515c9f5e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a665465304f407bd6ad159b07e52b515c9f5e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f10a665465304f407bd6ad159b07e52b515c9f5e", "patch": "@@ -1,3 +1,10 @@\n+2005-02-19  Zdenek Dvorak  <dvorakz@suse.cz>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/19828\n+\t* gcc.dg/tree-ssa/loop-7.c: New test.\n+\t* gcc.c-torture/execute/20050218-1.c: New test.\n+\n 2005-02-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/20043"}, {"sha": "104174f923a802bd0eda4561b9a365032dc3aae4", "filename": "gcc/testsuite/gcc.c-torture/execute/20050218-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a665465304f407bd6ad159b07e52b515c9f5e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050218-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a665465304f407bd6ad159b07e52b515c9f5e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050218-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050218-1.c?ref=f10a665465304f407bd6ad159b07e52b515c9f5e", "patch": "@@ -0,0 +1,30 @@\n+/* PR tree-optimization/19828 */\n+typedef __SIZE_TYPE__ size_t;\n+extern size_t strlen (const char *s);\n+extern int strncmp (const char *s1, const char *s2, size_t n);\n+extern void abort (void);\n+\n+const char *a[16] = { \"a\", \"bc\", \"de\", \"fgh\" };\n+\n+int\n+foo (char *x, const char *y, size_t n)\n+{\n+  size_t i, j = 0;\n+  for (i = 0; i < n; i++)\n+    {\n+      if (strncmp (x + j, a[i], strlen (a[i])) != 0)\n+        return 2;\n+      j += strlen (a[i]);\n+      if (y)\n+        j += strlen (y);\n+    }\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  if (foo (\"abcde\", (const char *) 0, 3) != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "e5a408321d7bfb13b6831d00fae5e3d165c67dfa", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-7.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a665465304f407bd6ad159b07e52b515c9f5e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a665465304f407bd6ad159b07e52b515c9f5e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-7.c?ref=f10a665465304f407bd6ad159b07e52b515c9f5e", "patch": "@@ -0,0 +1,34 @@\n+/* PR tree-optimization/19828 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-lim-details\" } */\n+\n+int cst_fun1 (int) __attribute__((__const__));\n+int cst_fun2 (int) __attribute__((__const__));\n+int pure_fun1 (int) __attribute__((__pure__));\n+int pure_fun2 (int) __attribute__((__pure__));\n+int foo (void);\n+\n+int xxx (void)\n+{\n+  int i, k = foo (), x = 0;\n+\n+  for (i = 0; i < 100; i++)\n+    {\n+      x += cst_fun1 (k);\n+      x += pure_fun1 (k);\n+\n+      if (k)\n+\t{\n+\t  x += cst_fun2 (k);\n+\t  x += pure_fun2 (k);\n+\t}\n+    }\n+\n+  return x;\n+}\n+\n+/* Calls to cst_fun1 and pure_fun1 may be moved out of the loop.\n+   Calls to cst_fun2 and pure_fun2 should not be, since calling\n+   with k = 0 may be invalid.  */\n+\n+/* { dg-final { scan-tree-dump-times \"Moving statement\" 2 \"lim\" } } */"}, {"sha": "770b71b12080a01390333eec82942b9330c68bdc", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a665465304f407bd6ad159b07e52b515c9f5e/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a665465304f407bd6ad159b07e52b515c9f5e/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=f10a665465304f407bd6ad159b07e52b515c9f5e", "patch": "@@ -38,6 +38,28 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tree-pass.h\"\n #include \"flags.h\"\n \n+/* TODO:  Support for predicated code motion.  I.e.\n+\n+   while (1)\n+     {\n+       if (cond)\n+\t {\n+\t   a = inv;\n+\t   something;\n+\t }\n+     }\n+\n+   Where COND and INV are is invariants, but evaluating INV may trap or be\n+   invalid from some other reason if !COND.  This may be transformed to\n+\n+   if (cond)\n+     a = inv;\n+   while (1)\n+     {\n+       if (cond)\n+\t something;\n+     }  */\n+\n /* A type for the list of statements that have to be moved in order to be able\n    to hoist an invariant computation.  */\n \n@@ -227,6 +249,28 @@ movement_possibility (tree stmt)\n       || tree_could_trap_p (rhs))\n     return MOVE_PRESERVE_EXECUTION;\n \n+  if (get_call_expr_in (stmt))\n+    {\n+      /* While pure or const call is guaranteed to have no side effects, we\n+\t cannot move it arbitrarily.  Consider code like\n+\n+\t char *s = something ();\n+\n+\t while (1)\n+\t   {\n+\t     if (s)\n+\t       t = strlen (s);\n+\t     else\n+\t       t = 0;\n+\t   }\n+\n+\t Here the strlen call cannot be moved out of the loop, even though\n+\t s is invariant.  In addition to possibly creating a call with\n+\t invalid arguments, moving out a function call that is not executed\n+\t may cause performance regressions in case the call is costly and\n+\t not executed at all.  */\n+      return MOVE_PRESERVE_EXECUTION;\n+    }\n   return MOVE_POSSIBLE;\n }\n "}]}