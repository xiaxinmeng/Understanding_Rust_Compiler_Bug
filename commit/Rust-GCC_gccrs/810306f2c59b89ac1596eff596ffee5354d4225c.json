{"sha": "810306f2c59b89ac1596eff596ffee5354d4225c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEwMzA2ZjJjNTliODlhYzE1OTZlZmY1OTZmZmVlNTM1NGQ0MjI1Yw==", "commit": {"author": {"name": "Erik Edelmann", "email": "eedelman@gcc.gnu.org", "date": "2006-01-25T20:46:29Z"}, "committer": {"name": "Erik Edelmann", "email": "eedelman@gcc.gnu.org", "date": "2006-01-25T20:46:29Z"}, "message": "re PR fortran/25716 (FAIL: gfortran.dg/char_result_11.f90  -O  (test for excess errors))\n\nfortran/\n2005-01-25  Erik Edelmann  <eedelman@gcc.gnu.org>\n\n        PR fortran/25716\n        * symbol.c (free_old_symbol): New function.\n        (gfc_commit_symbols): Use it.\n        (gfc_commit_symbol): New function.\n        (gfc_use_derived): Use it.\n        * gfortran.h: Add prototype for gfc_commit_symbol.\n        * intrinsic.c (gfc_find_function): Search in 'conversion'\n        if not found in 'functions'.\n        (gfc_convert_type_warn): Add a symtree to the new\n        expression node, and commit the new symtree->n.sym.\n        * resolve.c (gfc_resolve_index): Make sure typespec is\n        properly initialized.\n\ntestsuite/\n2005-01-25  Erik Edelmann  <eedelman@gcc.gnu.org>\n\n        PR fortran/25716\n        * gfortran.dg/char_result_11.f90: Make it sensitive to PR\n        25716 on 32-bit systems too.\n\nFrom-SVN: r110225", "tree": {"sha": "694499b865196daad78324da54b88dbc40acd07e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/694499b865196daad78324da54b88dbc40acd07e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/810306f2c59b89ac1596eff596ffee5354d4225c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/810306f2c59b89ac1596eff596ffee5354d4225c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/810306f2c59b89ac1596eff596ffee5354d4225c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/810306f2c59b89ac1596eff596ffee5354d4225c/comments", "author": null, "committer": null, "parents": [{"sha": "5c45cecb25efa7898108694021f221c46429347c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c45cecb25efa7898108694021f221c46429347c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c45cecb25efa7898108694021f221c46429347c"}], "stats": {"total": 115, "additions": 95, "deletions": 20}, "files": [{"sha": "a6904954f789c653b73fb576206b75c226d5428d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/810306f2c59b89ac1596eff596ffee5354d4225c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/810306f2c59b89ac1596eff596ffee5354d4225c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=810306f2c59b89ac1596eff596ffee5354d4225c", "patch": "@@ -1,3 +1,18 @@\n+2005-01-25  Erik Edelmann  <eedelman@gcc.gnu.org>\n+\n+\tPR fortran/25716\n+\t* symbol.c (free_old_symbol): New function.\n+\t(gfc_commit_symbols): Use it.\n+\t(gfc_commit_symbol): New function.\n+\t(gfc_use_derived): Use it.\n+\t* gfortran.h: Add prototype for gfc_commit_symbol.\n+\t* intrinsic.c (gfc_find_function): Search in 'conversion'\n+\tif not found in 'functions'.\n+\t(gfc_convert_type_warn): Add a symtree to the new\n+\texpression node, and commit the new symtree->n.sym.\n+\t* resolve.c (gfc_resolve_index): Make sure typespec is\n+\tproperly initialized.\n+\n 2005-01-23  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/25901"}, {"sha": "c14b04dac6d94b1744bc5bb16343de7243e67a0a", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/810306f2c59b89ac1596eff596ffee5354d4225c/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/810306f2c59b89ac1596eff596ffee5354d4225c/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=810306f2c59b89ac1596eff596ffee5354d4225c", "patch": "@@ -1771,6 +1771,7 @@ int gfc_symbols_could_alias (gfc_symbol *, gfc_symbol *);\n \n void gfc_undo_symbols (void);\n void gfc_commit_symbols (void);\n+void gfc_commit_symbol (gfc_symbol * sym);\n void gfc_free_namespace (gfc_namespace *);\n \n void gfc_symbol_init_2 (void);"}, {"sha": "cc63a5f66fc3a0ced9392af6b0b01c0b6316132d", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/810306f2c59b89ac1596eff596ffee5354d4225c/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/810306f2c59b89ac1596eff596ffee5354d4225c/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=810306f2c59b89ac1596eff596ffee5354d4225c", "patch": "@@ -711,8 +711,13 @@ find_sym (gfc_intrinsic_sym * start, int n, const char *name)\n gfc_intrinsic_sym *\n gfc_find_function (const char *name)\n {\n+  gfc_intrinsic_sym *sym;\n+\n+  sym = find_sym (functions, nfunc, name);\n+  if (!sym)\n+    sym = find_sym (conversion, nconv, name);\n \n-  return find_sym (functions, nfunc, name);\n+  return sym;\n }\n \n \n@@ -3415,6 +3420,16 @@ gfc_convert_type_warn (gfc_expr * expr, gfc_typespec * ts, int eflag,\n   new->rank = rank;\n   new->shape = gfc_copy_shape (shape, rank);\n \n+  gfc_get_ha_sym_tree (sym->name, &new->symtree);\n+  new->symtree->n.sym->ts = *ts;\n+  new->symtree->n.sym->attr.flavor = FL_PROCEDURE;\n+  new->symtree->n.sym->attr.function = 1;\n+  new->symtree->n.sym->attr.intrinsic = 1;\n+  new->symtree->n.sym->attr.elemental = 1;\n+  new->symtree->n.sym->attr.pure = 1;\n+  new->symtree->n.sym->attr.referenced = 1;\n+  gfc_commit_symbol (new->symtree->n.sym);\n+\n   *expr = *new;\n \n   gfc_free (new);"}, {"sha": "e94a92653306c7fe23a662e6f7d5e8341afe0969", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/810306f2c59b89ac1596eff596ffee5354d4225c/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/810306f2c59b89ac1596eff596ffee5354d4225c/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=810306f2c59b89ac1596eff596ffee5354d4225c", "patch": "@@ -2088,6 +2088,7 @@ gfc_resolve_index (gfc_expr * index, int check_scalar)\n   if (index->ts.kind != gfc_index_integer_kind\n       || index->ts.type != BT_INTEGER)\n     {\n+      gfc_clear_ts (&ts);\n       ts.type = BT_INTEGER;\n       ts.kind = gfc_index_integer_kind;\n "}, {"sha": "33af725d72e85da3a7afe16a211956774491ec79", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 51, "deletions": 16, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/810306f2c59b89ac1596eff596ffee5354d4225c/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/810306f2c59b89ac1596eff596ffee5354d4225c/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=810306f2c59b89ac1596eff596ffee5354d4225c", "patch": "@@ -1345,7 +1345,7 @@ switch_types (gfc_symtree * st, gfc_symbol * from, gfc_symbol * to)\n gfc_symbol *\n gfc_use_derived (gfc_symbol * sym)\n {\n-  gfc_symbol *s, *p;\n+  gfc_symbol *s;\n   gfc_typespec *t;\n   gfc_symtree *st;\n   int i;\n@@ -1379,15 +1379,7 @@ gfc_use_derived (gfc_symbol * sym)\n   s->refs++;\n \n   /* Unlink from list of modified symbols.  */\n-  if (changed_syms == sym)\n-    changed_syms = sym->tlink;\n-  else\n-    for (p = changed_syms; p; p = p->tlink)\n-      if (p->tlink == sym)\n-\t{\n-\t  p->tlink = sym->tlink;\n-\t  break;\n-\t}\n+  gfc_commit_symbol (sym);\n \n   switch_types (sym->ns->sym_root, sym, s);\n \n@@ -2238,6 +2230,26 @@ gfc_undo_symbols (void)\n }\n \n \n+/* Free sym->old_symbol.  sym->old_symbol is mostly a shallow copy of sym; but\n+   few components might have been given new values. */\n+\n+static void\n+free_old_symbol (gfc_symbol * sym)\n+{\n+  if (sym->old_symbol == NULL)\n+    return;\n+\n+  if (sym->old_symbol->as != sym->as) \n+    gfc_free_array_spec (sym->old_symbol->as);\n+\n+  if (sym->old_symbol->value != sym->value) \n+    gfc_free_expr (sym->old_symbol->value);\n+\n+  gfc_free (sym->old_symbol);\n+  sym->old_symbol = NULL;\n+}\n+\n+\n /* Makes the changes made in the current statement permanent-- gets\n    rid of undo information.  */\n \n@@ -2253,17 +2265,40 @@ gfc_commit_symbols (void)\n       p->mark = 0;\n       p->new = 0;\n \n-      if (p->old_symbol != NULL)\n-\t{\n-\t  gfc_free (p->old_symbol);\n-\t  p->old_symbol = NULL;\n-\t}\n+      free_old_symbol (p);\n     }\n-\n   changed_syms = NULL;\n }\n \n \n+/* Makes the changes made in one symbol permanent -- gets rid of undo\n+   information.  */\n+\n+void\n+gfc_commit_symbol (gfc_symbol * sym)\n+{\n+  gfc_symbol *p;\n+\n+  if (changed_syms == sym)\n+    changed_syms = sym->tlink;\n+  else\n+    {\n+      for (p = changed_syms; p; p = p->tlink)\n+        if (p->tlink == sym)\n+          {\n+            p->tlink = sym->tlink;\n+            break;\n+          }\n+    }\n+\n+  sym->tlink = NULL;\n+  sym->mark = 0;\n+  sym->new = 0;\n+\n+  free_old_symbol (sym);\n+}\n+\n+\n /* Recursive function that deletes an entire tree and all the common\n    head structures it points to.  */\n "}, {"sha": "2ef9cc82eeef98f7c65c717e2e14b33ed22ef419", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/810306f2c59b89ac1596eff596ffee5354d4225c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/810306f2c59b89ac1596eff596ffee5354d4225c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=810306f2c59b89ac1596eff596ffee5354d4225c", "patch": "@@ -1,3 +1,9 @@\n+2005-01-25  Erik Edelmann  <eedelman@gcc.gnu.org>\n+\n+\tPR fortran/25716\n+\t* gfortran.dg/char_result_11.f90: Make it sensitive to PR\n+\t25716 on 32-bit systems too.\n+\n 2006-01-25  Kazu Hirata  <kazu@codesourcery.com>\n \n \tPR testsuite/25590"}, {"sha": "19a5c9662fd8c4d94325347996f38169836adc01", "filename": "gcc/testsuite/gfortran.dg/char_result_11.f90", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/810306f2c59b89ac1596eff596ffee5354d4225c/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/810306f2c59b89ac1596eff596ffee5354d4225c/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_11.f90?ref=810306f2c59b89ac1596eff596ffee5354d4225c", "patch": "@@ -1,5 +1,6 @@\n-! { dg-do compile }\n-! PR 23675: Character function of module variable length\n+! { dg-do link }\n+! PR 23675: Character function of module-variable length\n+! PR 25716: Implicit kind conversions in in expressions written to *.mod-files.\n module cutils\n \n     implicit none\n@@ -11,7 +12,8 @@ module cutils\n     end type t\n \n     integer :: m1 = 25, m2 = 25, m3 = 25, m4 = 25, m5 = 25\n-    integer :: n1 = 3, n2 = 3, n3 = 3, n4 = 3, n5 = 3, n6 = 3, n7 = 3, n8 = 3, n9 = 3\n+    integer :: n5 = 3, n7 = 3, n9 = 3\n+    integer(1) :: n1 = 3, n2 = 3, n3 = 3, n4 = 3, n6 = 3, n8 = 3\n     character(10) :: s = \"abcdefghij\"\n     integer :: x(4) = (/ 30, 40, 50, 60 /)\n     type(t) :: tt1(5), tt2(5)"}]}