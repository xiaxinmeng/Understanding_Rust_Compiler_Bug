{"sha": "6bbd98101c27fc011dd778be8b0ec805dccf0e56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJiZDk4MTAxYzI3ZmMwMTFkZDc3OGJlOGIwZWM4MDVkY2NmMGU1Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2016-08-10T05:19:23Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-08-10T05:19:23Z"}, "message": "gccgo.texi (Invoking gccgo): Document -fgo-optimize-allocs and -fgo-debug-escae.\n\n\t* gccgo.texi (Invoking gccgo): Document -fgo-optimize-allocs and\n\t-fgo-debug-escae.\n\t(Compiler Directives): New chapter.\n\t(Function Names): Describe using //go:linkname.  Suggest using\n\t-fgo-pkgpath rather than -fgo-prefix.\n\nFrom-SVN: r239316", "tree": {"sha": "7cfd5b874362034a1b68f5a58fe47047bd6294de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cfd5b874362034a1b68f5a58fe47047bd6294de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bbd98101c27fc011dd778be8b0ec805dccf0e56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bbd98101c27fc011dd778be8b0ec805dccf0e56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bbd98101c27fc011dd778be8b0ec805dccf0e56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bbd98101c27fc011dd778be8b0ec805dccf0e56/comments", "author": null, "committer": null, "parents": [{"sha": "a36cb5b1d411315e2f2b565151e648056d0ae7bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a36cb5b1d411315e2f2b565151e648056d0ae7bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a36cb5b1d411315e2f2b565151e648056d0ae7bb"}], "stats": {"total": 100, "additions": 87, "deletions": 13}, "files": [{"sha": "dbe3943c2e73849462146453ffa22c7b3585be20", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bbd98101c27fc011dd778be8b0ec805dccf0e56/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bbd98101c27fc011dd778be8b0ec805dccf0e56/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=6bbd98101c27fc011dd778be8b0ec805dccf0e56", "patch": "@@ -1,3 +1,11 @@\n+2016-08-09  Ian Lance Taylor  <iant@google.com>\n+\n+\t* gccgo.texi (Invoking gccgo): Document -fgo-optimize-allocs and\n+\t-fgo-debug-escae.\n+\t(Compiler Directives): New chapter.\n+\t(Function Names): Describe using //go:linkname.  Suggest using\n+\t-fgo-pkgpath rather than -fgo-prefix.\n+\n 2016-08-08  Ian Lance Taylor  <iant@google.com>\n \n \tPR go/72814"}, {"sha": "6544b7981a53480def480f810972a999d6d1d67c", "filename": "gcc/go/gccgo.texi", "status": "modified", "additions": 79, "deletions": 13, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bbd98101c27fc011dd778be8b0ec805dccf0e56/gcc%2Fgo%2Fgccgo.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bbd98101c27fc011dd778be8b0ec805dccf0e56/gcc%2Fgo%2Fgccgo.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgccgo.texi?ref=6bbd98101c27fc011dd778be8b0ec805dccf0e56", "patch": "@@ -88,6 +88,7 @@ package documentation, see @uref{http://golang.org/}.\n                                 How you can share and copy this manual.\n * Invoking gccgo::              How to run gccgo.\n * Import and Export::           Importing and exporting package data.\n+* Compiler Directives::         Comments to control compilation.\n * C Interoperability::          Calling C from Go and vice-versa.\n * Index::                       Index.\n @end menu\n@@ -228,6 +229,16 @@ may be used.  Or the checks may be removed via\n by default, but in the future may be off by default on systems that do\n not require it.\n \n+@item -fgo-optimize-allocs\n+@cindex @option{-fgo-optimize-allocs}\n+Use escape analysis to allocate objects on the stack rather than the\n+heap when possible.  In the future this may be the default.\n+\n+@item -fgo-debug-escape@var{n}\n+@cindex @option{-fgo-debug-escape}\n+Output escape analysis debugging information.  Larger values of\n+@var{n} generate more information.\n+\n @item -g\n @cindex @option{-g for gccgo}\n This is the standard @command{gcc} option (@pxref{Debugging Options, ,\n@@ -286,6 +297,50 @@ At link time you must explicitly tell @command{gccgo} which files to\n link together into the executable, as is usual with @command{gcc}.\n This is different from the behavior of other Go compilers.\n \n+@node Compiler Directives\n+@chapter Compiler Directives\n+\n+The Go compiler supports a few compiler directives.  A compiler\n+directive uses a @code{//} comment at the start of a line.  There must\n+be no space between the @code{//} and the name of the directive.\n+\n+@table @code\n+@item //line @var{file}:@var{line}\n+The @code{//line} directive specifies that the source line that\n+follows should be recorded as having come from the given file path and\n+line number.  Successive lines are recorded using increasing line\n+numbers, until the next directive.  This directive typically appears\n+in machine-generated code, so that compilers and debuggers will show\n+lines in the original input to the generator.\n+\n+@item //extern @var{extern_name}\n+The @code{extern} directive sets the externally visible name of the\n+next function declaration.  See @ref{Function Names}.\n+\n+@item //go:compile @var{go_name} @var{extern_name}\n+The @code{go:compile} directives sets the externally visible name of a\n+function definition or declaration.  See @ref{Function Names}.\n+\n+@item //go:noescape\n+The @code{//go:noescape} directive specifies that the next declaration\n+in the file, which must be a func without a body (meaning that it has\n+an implementation not written in Go) does not allow any of the\n+pointers passed as arguments to escape into the heap or into the\n+values returned from the function. This information can be used during\n+the compiler's escape analysis of Go code calling the function.\n+\n+@item //go:nosplit\n+The @code{//go:nosplit} directive specifies that the next function\n+declared in the file must not include a stack overflow check. This is\n+most commonly used by low-level runtime sources invoked at times when\n+it is unsafe for the calling goroutine to be preempted.\n+\n+@item //go:noinline\n+The @code{//go:noinline} directive specifies that the next function\n+defined in the file may not be inlined.\n+\n+@end table\n+\n @node C Interoperability\n @chapter C Interoperability\n \n@@ -376,20 +431,31 @@ function is still using it.\n \n @cindex @code{extern}\n @cindex external names\n-Go code can call C functions directly using a Go extension implemented\n-in @command{gccgo}: a function declaration may be preceded by a\n-comment giving the external name.  The comment must be at the\n-beginning of the line and must start with @code{//extern}.  This must\n-be followed by a space and then the external name of the function.\n-The function declaration must be on the line immediately after the\n-comment.  For example, here is how the C function @code{open} can be\n-declared in Go:\n+Go code can call C functions directly using the @code{//extern} or\n+@code{//go:linkname} compiler directives.  An @code{//extern}\n+directive must be at the beginning of the line and must start with\n+@code{//extern}.  This must be followed by a space and then the\n+external name of the function.  The function declaration must be on\n+the line immediately after the comment.  For example, here is how the\n+C function @code{open} can be declared in Go:\n \n @smallexample\n //extern open\n func c_open(name *byte, mode int, perm int) int\n @end smallexample\n \n+You can do the same thing using the @code{//go:linkname} compiler\n+directive.  The @code{//go:linkname} directive must be at the start of\n+the line.  It is followed by whitespace, the name of the Go function,\n+more whitespace, and the external name of the function.  Unlike\n+@code{//extern}, @code{//go:linkname} does not need to appear\n+immediately adjacent to the function definition or declaration.\n+\n+@smallexample\n+//go:linkname c_open open\n+func c_open(name *byte, mode int, perm int) int\n+@end smallexample\n+\n The C function naturally expects a nul terminated string, which in Go\n is equivalent to a pointer to an array (not a slice!) of @code{byte}\n with a terminating zero byte.  So a sample call from Go would look\n@@ -405,14 +471,14 @@ use Go's @code{os.Open} function instead.\n \n The name of Go functions accessed from C is subject to change.  At\n present the name of a Go function that does not have a receiver is\n-@code{prefix.package.Functionname}.  The prefix is set by the\n-@option{-fgo-prefix} option used when the package is compiled; if the\n-option is not used, the default is simply @code{go}.  To call the\n-function from C you must set the name using the @command{gcc}\n+@code{pkgpath.Functionname}.  The @var{pkgpath} is set by the\n+@option{-fgo-pkgpath} option used when the package is compiled; if the\n+option is not used, the default is @code{go.@var{packagename}}.  To\n+call the function from C you must set the name using the @command{gcc}\n @code{__asm__} extension.\n \n @smallexample\n-extern int go_function(int) __asm__ (\"myprefix.mypackage.Function\");\n+extern int go_function(int) __asm__ (\"mypkgpath.Function\");\n @end smallexample\n \n @node Index"}]}