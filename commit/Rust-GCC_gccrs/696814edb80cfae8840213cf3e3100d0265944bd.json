{"sha": "696814edb80cfae8840213cf3e3100d0265944bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk2ODE0ZWRiODBjZmFlODg0MDIxM2NmM2UzMTAwZDAyNjU5NDRiZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-02-10T11:48:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-02-10T11:48:47Z"}, "message": "re PR tree-optimization/64909 (Missed vectorization with bdver1)\n\n2015-02-10  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/64909\n\t* tree-vect-loop.c (vect_estimate_min_profitable_iters): Properly\n\tpass a scalar-stmt count estimate to the cost model.\n\t* tree-vect-data-refs.c (vect_peeling_hash_get_lowest_cost): Likewise.\n\n\t* gcc.dg/vect/costmodel/x86_64/costmodel-pr64909.c: New testcase.\n\nFrom-SVN: r220580", "tree": {"sha": "23cfbb89274e498a827a4e773622710dfa8b4ded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23cfbb89274e498a827a4e773622710dfa8b4ded"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/696814edb80cfae8840213cf3e3100d0265944bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/696814edb80cfae8840213cf3e3100d0265944bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/696814edb80cfae8840213cf3e3100d0265944bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/696814edb80cfae8840213cf3e3100d0265944bd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "644a47612e7b5919bb36df5d6c0b28992d99ce5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/644a47612e7b5919bb36df5d6c0b28992d99ce5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/644a47612e7b5919bb36df5d6c0b28992d99ce5f"}], "stats": {"total": 49, "additions": 42, "deletions": 7}, "files": [{"sha": "7f3816c3e705d89d6e88a09eef15bac494da643e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696814edb80cfae8840213cf3e3100d0265944bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696814edb80cfae8840213cf3e3100d0265944bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=696814edb80cfae8840213cf3e3100d0265944bd", "patch": "@@ -1,3 +1,10 @@\n+2015-02-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/64909\n+\t* tree-vect-loop.c (vect_estimate_min_profitable_iters): Properly\n+\tpass a scalar-stmt count estimate to the cost model.\n+\t* tree-vect-data-refs.c (vect_peeling_hash_get_lowest_cost): Likewise.\n+\n 2015-02-10  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* doc/invoke.texi (-fvar-tracking-assignments): Clarify that VTA is"}, {"sha": "15d5e2d67cd8daec49044e40afa401905a397c07", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696814edb80cfae8840213cf3e3100d0265944bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696814edb80cfae8840213cf3e3100d0265944bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=696814edb80cfae8840213cf3e3100d0265944bd", "patch": "@@ -1,3 +1,8 @@\n+2015-02-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/64909\n+\t* gcc.dg/vect/costmodel/x86_64/costmodel-pr64909.c: New testcase.\n+\n 2015-02-10  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.dg/signbit-sa.c: New test."}, {"sha": "0f9feac6a3338aba69f864bbd56ab7bb6d0e2eca", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/x86_64/costmodel-pr64909.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696814edb80cfae8840213cf3e3100d0265944bd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr64909.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696814edb80cfae8840213cf3e3100d0265944bd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr64909.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr64909.c?ref=696814edb80cfae8840213cf3e3100d0265944bd", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"-mtune=bdver1\" } */\n+\n+unsigned short a[32];\n+unsigned int b[32];\n+void t()\n+{\n+  int i;\n+  for (i=0;i<12;i++)\n+    b[i]=a[i];\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops in function\" \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "2c74060d793a08ad41e687d6f94c4d35ba130274", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696814edb80cfae8840213cf3e3100d0265944bd/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696814edb80cfae8840213cf3e3100d0265944bd/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=696814edb80cfae8840213cf3e3100d0265944bd", "patch": "@@ -1184,10 +1184,13 @@ vect_peeling_hash_get_lowest_cost (_vect_peel_info **slot,\n     }\n \n   single_iter_cost = vect_get_single_scalar_iteration_cost (loop_vinfo);\n-  outside_cost += vect_get_known_peeling_cost (loop_vinfo, elem->npeel,\n-\t\t\t\t\t       &dummy, single_iter_cost,\n-\t\t\t\t\t       &prologue_cost_vec,\n-\t\t\t\t\t       &epilogue_cost_vec);\n+  outside_cost += vect_get_known_peeling_cost\n+    (loop_vinfo, elem->npeel, &dummy,\n+     /* ???  We use this cost as number of stmts with scalar_stmt cost,\n+\tthus divide by that.  This introduces rounding errors, thus better \n+\tintroduce a new cost kind (raw_cost?  scalar_iter_cost?). */\n+     single_iter_cost / vect_get_stmt_cost (scalar_stmt),\n+     &prologue_cost_vec, &epilogue_cost_vec);\n \n   /* Prologue and epilogue costs are added to the target model later.\n      These costs depend only on the scalar iteration cost, the"}, {"sha": "3e7c701e636b685d21ac2561348c98707350338f", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696814edb80cfae8840213cf3e3100d0265944bd/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696814edb80cfae8840213cf3e3100d0265944bd/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=696814edb80cfae8840213cf3e3100d0265944bd", "patch": "@@ -2834,6 +2834,11 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n      statements.  */\n \n   scalar_single_iter_cost = vect_get_single_scalar_iteration_cost (loop_vinfo);\n+  /* ???  Below we use this cost as number of stmts with scalar_stmt cost,\n+     thus divide by that.  This introduces rounding errors, thus better\n+     introduce a new cost kind (raw_cost?  scalar_iter_cost?). */\n+  int scalar_single_iter_stmts\n+    = scalar_single_iter_cost / vect_get_stmt_cost (scalar_stmt);\n \n   /* Add additional cost for the peeled instructions in prologue and epilogue\n      loop.\n@@ -2868,10 +2873,10 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n       /* FORNOW: Don't attempt to pass individual scalar instructions to\n \t the model; just assume linear cost for scalar iterations.  */\n       (void) add_stmt_cost (target_cost_data,\n-\t\t\t    peel_iters_prologue * scalar_single_iter_cost,\n+\t\t\t    peel_iters_prologue * scalar_single_iter_stmts,\n \t\t\t    scalar_stmt, NULL, 0, vect_prologue);\n       (void) add_stmt_cost (target_cost_data, \n-\t\t\t    peel_iters_epilogue * scalar_single_iter_cost,\n+\t\t\t    peel_iters_epilogue * scalar_single_iter_stmts,\n \t\t\t    scalar_stmt, NULL, 0, vect_epilogue);\n     }\n   else\n@@ -2887,7 +2892,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n \n       (void) vect_get_known_peeling_cost (loop_vinfo, peel_iters_prologue,\n \t\t\t\t\t  &peel_iters_epilogue,\n-\t\t\t\t\t  scalar_single_iter_cost,\n+\t\t\t\t\t  scalar_single_iter_stmts,\n \t\t\t\t\t  &prologue_cost_vec,\n \t\t\t\t\t  &epilogue_cost_vec);\n "}]}