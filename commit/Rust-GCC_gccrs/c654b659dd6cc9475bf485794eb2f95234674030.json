{"sha": "c654b659dd6cc9475bf485794eb2f95234674030", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY1NGI2NTlkZDZjYzk0NzViZjQ4NTc5NGViMmY5NTIzNDY3NDAzMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-05-26T10:22:30Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-05-26T10:22:30Z"}, "message": "gigi.h (gigi): Remove bogus ATTRIBUTE_UNUSED marker.\n\n\t* gigi.h (gigi): Remove bogus ATTRIBUTE_UNUSED marker.\n\t(builtin_decl_for): Likewise.\n\t* trans.c (gigi): Likewise.\n\t* utils.c (def_builtin_1): Fix formatting.\n\nFrom-SVN: r135911", "tree": {"sha": "5a4c23b38b1b39543b295ca6230d8804fca28ebc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a4c23b38b1b39543b295ca6230d8804fca28ebc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c654b659dd6cc9475bf485794eb2f95234674030", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c654b659dd6cc9475bf485794eb2f95234674030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c654b659dd6cc9475bf485794eb2f95234674030", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c654b659dd6cc9475bf485794eb2f95234674030/comments", "author": null, "committer": null, "parents": [{"sha": "68e92eab6f77d6969b81e12556568725d988ff9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e92eab6f77d6969b81e12556568725d988ff9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e92eab6f77d6969b81e12556568725d988ff9b"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "7929d702bb466ce712ffe0fdf45f8cef283d94cb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c654b659dd6cc9475bf485794eb2f95234674030/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c654b659dd6cc9475bf485794eb2f95234674030/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c654b659dd6cc9475bf485794eb2f95234674030", "patch": "@@ -1,3 +1,10 @@\n+2008-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gigi.h (gigi): Remove bogus ATTRIBUTE_UNUSED marker.\n+\t(builtin_decl_for): Likewise.\n+\t* trans.c (gigi): Likewise.\n+\t* utils.c (def_builtin_1): Fix formatting.\n+\n 2008-05-26  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch3.adb (Build_Init_Statements): Alphabetize local variables."}, {"sha": "4fc101a6ffbd14b009e2287b909a50b7ee206583", "filename": "gcc/ada/Makefile.in", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c654b659dd6cc9475bf485794eb2f95234674030/gcc%2Fada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c654b659dd6cc9475bf485794eb2f95234674030/gcc%2Fada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.in?ref=c654b659dd6cc9475bf485794eb2f95234674030", "patch": "@@ -62,7 +62,7 @@\n # Variables that exist for you to override.\n # See below for how to change them for certain systems.\n \n-# Various ways of specifying flags for compilations:  \n+# Various ways of specifying flags for compilations:\n # CFLAGS is for the user to override to, e.g., do a bootstrap with -O2.\n # BOOT_CFLAGS is the value of CFLAGS to pass\n # to the stage2 and stage3 compilations\n@@ -139,7 +139,7 @@ shext  =\n hyphen = -\n \n # Define this as & to perform parallel make on a Sequent.\n-# Note that this has some bugs, and it seems currently necessary \n+# Note that this has some bugs, and it seems currently necessary\n # to compile all the gen* files first by hand to avoid erroneous results.\n P =\n \n@@ -424,7 +424,7 @@ ifeq ($(strip $(filter-out m68k% wrs vx%,$(targ))),)\n     s-tratas.adb<s-tratas-default.adb \\\n     s-trafor.adb<s-trafor-default.adb \\\n     s-trafor.ads<s-trafor-default.ads \\\n-    s-tfsetr.adb<s-tfsetr-vxworks.adb \n+    s-tfsetr.adb<s-tfsetr-vxworks.adb\n   endif\n endif\n \n@@ -458,7 +458,7 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks,$(targ))),)\n     s-trafor.adb<s-trafor-default.adb \\\n     s-trafor.ads<s-trafor-default.ads \\\n     s-tratas.adb<s-tratas-default.adb \\\n-    s-tfsetr.adb<s-tfsetr-vxworks.adb \n+    s-tfsetr.adb<s-tfsetr-vxworks.adb\n   endif\n \n   ifeq ($(strip $(filter-out rtp,$(THREAD_KIND))),)\n@@ -761,7 +761,7 @@ ifeq ($(strip $(filter-out sparc% sun solaris%,$(targ))),)\n   else\n     LIBGNAT_TARGET_PAIRS = $(LIBGNAT_TARGET_PAIRS_64)\n   endif\n-  \n+\n   TOOLS_TARGET_PAIRS=mlib-tgt-specific.adb<mlib-tgt-specific-solaris.adb\n \n   EH_MECHANISM=-gcc\n@@ -1197,7 +1197,7 @@ LN_S = cp -p\n \n .SUFFIXES: .sym\n \n-.o.sym: \n+.o.sym:\n \t@ gnu:[bin]vmssymvec $<\n endif\n \n@@ -1752,9 +1752,9 @@ ADA_INCLUDE_SRCS =\\\n  machcode.ads text_io.ads unchconv.ads unchdeal.ads \\\n  sequenio.ads system.ads memtrack.adb \\\n  a-[a-o]*.adb a-[p-z]*.adb a-[a-o]*.ads a-[p-z]*.ads g-*.ad? i-*.ad? \\\n- s-[a-o]*.adb s-[p-z]*.adb s-[a-o]*.ads s-[p-z]*.ads  \n+ s-[a-o]*.adb s-[p-z]*.adb s-[a-o]*.ads s-[p-z]*.ads\n \n-LIBGNAT=../rts/libgnat.a \n+LIBGNAT=../rts/libgnat.a\n \n GCC_LINK=$(CC) -static-libgcc $(ADA_INCLUDES)\n \n@@ -1767,7 +1767,7 @@ ifeq ($(TOOLSCASE),native)\n   vpath %.h   ../rts ../\n endif\n \n-# in the cross tools case, everything is compiled with the native \n+# in the cross tools case, everything is compiled with the native\n # gnatmake/link. Therefore only -I needs to be modified in ADA_INCLUDES\n ifeq ($(TOOLSCASE),cross)\n   vpath %.ads ../\n@@ -1812,25 +1812,25 @@ common-tools:\n \n ../../vxaddr2line$(exeext): targext.o\n \t$(GNATMAKE) -c  $(ADA_INCLUDES) vxaddr2line --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n-\t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) vxaddr2line \n+\t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) vxaddr2line\n \t$(GNATLINK) -v vxaddr2line -o $@ --GCC=\"$(GCC_LINK)\" targext.o $(CLIB)\n \n gnatmake-re:  link.o targext.o\n \t$(GNATMAKE) $(ADA_INCLUDES) -u sdefault --GCC=\"$(CC) $(MOST_ADA_FLAGS)\"\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatmake --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n-\t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatmake \n+\t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatmake\n \t$(GNATLINK) -v gnatmake -o ../../gnatmake$(exeext) \\\n \t\t--GCC=\"$(GCC_LINK)\" $(TOOLS_LIBS)\n \n # Note the use of the \"mv\" command in order to allow gnatlink to be linked with\n # with the former version of gnatlink itself which cannot override itself.\n gnatlink-re:  link.o targext.o\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatlink --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n-\t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatlink \n+\t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatlink\n \t$(GNATLINK) -v gnatlink -o ../../gnatlinknew$(exeext) \\\n \t\t    --GCC=\"$(GCC_LINK)\" $(TOOLS_LIBS)\n \t$(MV)  ../../gnatlinknew$(exeext)  ../../gnatlink$(exeext)\n-  \n+\n # Needs to be built with CC=gcc\n # Since the RTL should be built with the latest compiler, remove the\n #  stamp target in the parent directory whenever gnat1 is rebuilt"}, {"sha": "68e5ebf141ed12d925b67add958b3caf3c42167f", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c654b659dd6cc9475bf485794eb2f95234674030/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c654b659dd6cc9475bf485794eb2f95234674030/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=c654b659dd6cc9475bf485794eb2f95234674030", "patch": "@@ -104,7 +104,7 @@ extern void add_decl_expr (tree gnu_decl, Entity_Id gnat_entity);\n \n /* Mark nodes rooted at *TP with TREE_VISITED and types as having their\n    sized gimplified.  We use this to indicate all variable sizes and\n-   positions in global types may not be shared by any subprograms.  */\n+   positions in global types may not be shared by any subprogram.  */\n extern void mark_visited (tree *);\n \n /* Finalize any From_With_Type incomplete types.  We do this after processing\n@@ -217,7 +217,7 @@ extern void gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n                   Char_Code *strings_chars_ptr,\n                   struct List_Header *list_headers_ptr,\n                   Nat number_file,\n-                  struct File_Info_Type *file_info_ptr ATTRIBUTE_UNUSED,\n+                  struct File_Info_Type *file_info_ptr,\n                   Entity_Id standard_integer,\n                   Entity_Id standard_long_long_float,\n                   Entity_Id standard_exception_type,\n@@ -852,7 +852,7 @@ extern tree gnat_builtin_function (tree decl);\n /* Search the chain of currently reachable declarations for a builtin\n    FUNCTION_DECL node corresponding to function NAME (an IDENTIFIER_NODE).\n    Return the first node found, if any, or NULL_TREE otherwise.  */\n-extern tree builtin_decl_for (tree name ATTRIBUTE_UNUSED);\n+extern tree builtin_decl_for (tree name);\n \n /* This function is called by the front end to enumerate all the supported\n    modes for the machine.  We pass a function which is called back with"}, {"sha": "dda85c5658c6c2c4d27b4994f758e3b17c2266f0", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c654b659dd6cc9475bf485794eb2f95234674030/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c654b659dd6cc9475bf485794eb2f95234674030/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=c654b659dd6cc9475bf485794eb2f95234674030", "patch": "@@ -221,14 +221,14 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n       struct Elist_Header *elists_ptr, struct Elmt_Item *elmts_ptr,\n       struct String_Entry *strings_ptr, Char_Code *string_chars_ptr,\n       struct List_Header *list_headers_ptr, Nat number_file,\n-      struct File_Info_Type *file_info_ptr ATTRIBUTE_UNUSED,\n+      struct File_Info_Type *file_info_ptr,\n       Entity_Id standard_integer, Entity_Id standard_long_long_float,\n       Entity_Id standard_exception_type, Int gigi_operating_mode)\n {\n   tree gnu_standard_long_long_float;\n   tree gnu_standard_exception_type;\n   struct elab_info *info;\n-  int i ATTRIBUTE_UNUSED;\n+  int i;\n \n   max_gnat_nodes = max_gnat_node;\n   number_names = number_name;"}, {"sha": "8dd445fd8cd735afd79158023454d6fd2a80d58b", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c654b659dd6cc9475bf485794eb2f95234674030/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c654b659dd6cc9475bf485794eb2f95234674030/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=c654b659dd6cc9475bf485794eb2f95234674030", "patch": "@@ -4763,8 +4763,8 @@ def_builtin_1 (enum built_in_function fncode,\n   if (both_p)\n     /* ??? This is normally further controlled by command-line options\n        like -fno-builtin, but we don't have them for Ada.  */\n-      add_builtin_function (libname, libtype, fncode, fnclass,\n-\t\t\t    NULL, fnattrs);\n+    add_builtin_function (libname, libtype, fncode, fnclass,\n+\t\t\t  NULL, fnattrs);\n \n   built_in_decls[(int) fncode] = decl;\n   if (implicit_p)"}]}