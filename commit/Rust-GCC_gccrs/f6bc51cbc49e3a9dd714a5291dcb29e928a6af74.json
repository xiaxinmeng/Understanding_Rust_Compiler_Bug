{"sha": "f6bc51cbc49e3a9dd714a5291dcb29e928a6af74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZiYzUxY2JjNDllM2E5ZGQ3MTRhNTI5MWRjYjI5ZTkyOGE2YWY3NA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2004-08-03T19:52:52Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2004-08-03T19:52:52Z"}, "message": "re PR target/16570 (missing _mm_malloc and _mm_free functions in xmmintrin.h)\n\ngcc/\n\n2004-08-03  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/16570\n\t* config.gcc (i[34567]86-*-* | x86_64-*-*): Add i386/t-gmm_malloc\n\tto tmake_file.\n\t(i[34567]86-*-linux*aout* | i[34567]86-*-linux*libc1): Likewise.\n\t(i[34567]86-*-linux* | x86_64-*-linux*): Add i386/t-pmm_malloc\n\tto tmake_file.\n\n\t* config/i386/t-gmm_malloc: New file.\n\t* config/i386/t-pmm_malloc: Likewise.\n\n\t* config/i386/xmmintrin.h: Include <mm_malloc.h>.\n\n2004-08-03  H.J. Lu  <hongjiu.lu@intel.com>\n\t    Tanguy Fautr\ufffd  <tfautre@pandora.be>\n\n\t* config/i386/pmm_malloc.h: New file.\n\n2004-08-03  Danny Smith  <dannysmith@users.sourceforge.net>\n\n\t* config/i386/gmm_malloc.h: New file.\n\ngcc/testsuite/\n\n2004-08-03  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/16570\n\t* gcc.dg/i386-sse-9.c: New test.\n\nFrom-SVN: r85496", "tree": {"sha": "9360d9558cf36d04f4ecdef44f7ff349f4e11160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9360d9558cf36d04f4ecdef44f7ff349f4e11160"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74/comments", "author": null, "committer": null, "parents": [{"sha": "ed69811298e1f257486c59df4d62953809a83b18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed69811298e1f257486c59df4d62953809a83b18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed69811298e1f257486c59df4d62953809a83b18"}], "stats": {"total": 224, "additions": 224, "deletions": 0}, "files": [{"sha": "9ac4825fce5f03dfe947502bf40549bbc0ea0322", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6bc51cbc49e3a9dd714a5291dcb29e928a6af74", "patch": "@@ -1,3 +1,26 @@\n+2004-08-03  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/16570\n+\t* config.gcc (i[34567]86-*-* | x86_64-*-*): Add i386/t-gmm_malloc\n+\tto tmake_file.\n+\t(i[34567]86-*-linux*aout* | i[34567]86-*-linux*libc1): Likewise.\n+\t(i[34567]86-*-linux* | x86_64-*-linux*): Add i386/t-pmm_malloc\n+\tto tmake_file.\n+\n+\t* config/i386/t-gmm_malloc: New file.\n+\t* config/i386/t-pmm_malloc: Likewise.\n+\t\n+\t* config/i386/xmmintrin.h: Include <mm_malloc.h>.\n+\n+2004-08-03  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Tanguy Fautr\ufffd  <tfautre@pandora.be>\n+\n+\t* config/i386/pmm_malloc.h: New file.\n+\n+2004-08-03  Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\t* config/i386/gmm_malloc.h: New file.\n+\n 2004-08-03  Dale Johannesen  <dalej@apple.com>\n \n \t* config/rs6000/rs6000.c (machopic_output_stub):  Align Darwin stubs."}, {"sha": "d20d3c5c3a1f79a6ea4e23ff3f4bff3b34e47751", "filename": "gcc/config.gcc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=f6bc51cbc49e3a9dd714a5291dcb29e928a6af74", "patch": "@@ -2122,6 +2122,18 @@ am33_2.0-*-linux*)\n \t;;\n esac\n \n+case ${target} in\n+i[34567]86-*-linux*aout* | i[34567]86-*-linux*libc1)\n+\ttmake_file=\"${tmake_file} i386/t-gmm_malloc\"\n+\t;;\n+i[34567]86-*-linux* | x86_64-*-linux*)\n+\ttmake_file=\"${tmake_file} i386/t-pmm_malloc\"\n+\t;;\n+i[34567]86-*-* | x86_64-*-*)\n+\ttmake_file=\"${tmake_file} i386/t-gmm_malloc\"\n+\t;;\n+esac\n+\n # Support for --with-cpu and related options (and a few unrelated options,\n # too).\n case ${with_cpu} in"}, {"sha": "c2454cdbfb2fba6ef31adfe4719c0ac0a05796ef", "filename": "gcc/config/i386/gmm_malloc.h", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74/gcc%2Fconfig%2Fi386%2Fgmm_malloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74/gcc%2Fconfig%2Fi386%2Fgmm_malloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgmm_malloc.h?ref=f6bc51cbc49e3a9dd714a5291dcb29e928a6af74", "patch": "@@ -0,0 +1,77 @@\n+/* Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you include this header file into source\n+   files compiled by GCC, this header file does not by itself cause\n+   the resulting executable to be covered by the GNU General Public\n+   License.  This exception does not however invalidate any other\n+   reasons why the executable file might be covered by the GNU General\n+   Public License.  */\n+\n+#ifndef _MM_MALLOC_H_INCLUDED\n+#define _MM_MALLOC_H_INCLUDED\n+\n+#include <stdlib.h>\n+#include <errno.h>\n+\n+static __inline__ void* \n+_mm_malloc (size_t size, size_t align)\n+{\n+  void * malloc_ptr;\n+  void * aligned_ptr;\n+\n+  /* Error if align is not a power of two.  */\n+  if (align & (align - 1))\n+    {\n+      errno = EINVAL;\n+      return ((void*) 0);\n+    }\n+\n+  if (size == 0)\n+    return ((void *) 0);\n+\n+ /* Assume malloc'd pointer is aligned at least to sizeof (void*).\n+    If necesary, add another sizeof (void*) to store the value\n+    returned by malloc. Effectively this enforces a minimum alignment\n+    of sizeof double. */     \n+    if (align < 2 * sizeof (void *))\n+      align = 2 * sizeof (void *);\n+\n+  malloc_ptr = malloc (size + align);\n+  if (!malloc_ptr)\n+    return ((void *) 0);\n+\n+  /* Align  We have at least sizeof (void *) space below malloc'd ptr. */\n+  aligned_ptr = (void *) (((size_t) malloc_ptr + align)\n+\t\t\t  & ~((size_t) (align) - 1));\n+\n+  /* Store the original pointer just before p.  */\t\n+  ((void **) aligned_ptr) [-1] = malloc_ptr;\n+\n+  return aligned_ptr;\n+}\n+\n+static __inline__ void\n+_mm_free (void * aligned_ptr)\n+{\n+  if (aligned_ptr)\n+    free (((void **) aligned_ptr) [-1]);\n+}\n+\n+#endif /* _MM_MALLOC_H_INCLUDED */"}, {"sha": "16a808c7d812e34831b02ebcee1dfc1123cd3686", "filename": "gcc/config/i386/pmm_malloc.h", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74/gcc%2Fconfig%2Fi386%2Fpmm_malloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74/gcc%2Fconfig%2Fi386%2Fpmm_malloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpmm_malloc.h?ref=f6bc51cbc49e3a9dd714a5291dcb29e928a6af74", "patch": "@@ -0,0 +1,56 @@\n+/* Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you include this header file into source\n+   files compiled by GCC, this header file does not by itself cause\n+   the resulting executable to be covered by the GNU General Public\n+   License.  This exception does not however invalidate any other\n+   reasons why the executable file might be covered by the GNU General\n+   Public License.  */\n+\n+#ifndef _MM_MALLOC_H_INCLUDED\n+#define _MM_MALLOC_H_INCLUDED\n+\n+#include <stdlib.h>\n+\n+/* We can't depend on <stdlib.h> since the prototype of posix_memalign\n+   may not be visible.  */\n+extern int posix_memalign (void **, size_t, size_t);\n+\n+static __inline void *\n+_mm_malloc (size_t size, size_t alignment)\n+{\n+  void *ptr;\n+  if (alignment == 1)\n+    return malloc (size);\n+  if (alignment == 2 || (sizeof (void *) == 8 && alignment == 4))\n+    alignment = sizeof (void *);\n+  if (posix_memalign (&ptr, alignment, size) == 0)\n+    return ptr;\n+  else\n+    return NULL;\n+}\n+\n+static __inline void\n+_mm_free (void * ptr)\n+{\n+  free (ptr);\n+}\n+\n+#endif /* _MM_MALLOC_H_INCLUDED */"}, {"sha": "c37f8a759858bcb789f0bfe4416db2f5f6957e33", "filename": "gcc/config/i386/t-gmm_malloc", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74/gcc%2Fconfig%2Fi386%2Ft-gmm_malloc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74/gcc%2Fconfig%2Fi386%2Ft-gmm_malloc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-gmm_malloc?ref=f6bc51cbc49e3a9dd714a5291dcb29e928a6af74", "patch": "@@ -0,0 +1,6 @@\n+# Install gmm_malloc.h as mm_malloc.h.\n+\n+EXTRA_HEADERS += mm_malloc.h\n+mm_malloc.h: $(srcdir)/config/i386/gmm_malloc.h\n+\trm -f $@\n+\tcat $^ > $@"}, {"sha": "109009fbfc5345cfcb6d5872fc5a78c515b5bf24", "filename": "gcc/config/i386/t-pmm_malloc", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74/gcc%2Fconfig%2Fi386%2Ft-pmm_malloc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74/gcc%2Fconfig%2Fi386%2Ft-pmm_malloc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-pmm_malloc?ref=f6bc51cbc49e3a9dd714a5291dcb29e928a6af74", "patch": "@@ -0,0 +1,6 @@\n+# Install pmm_malloc.h as mm_malloc.h.\n+\n+EXTRA_HEADERS += mm_malloc.h\n+mm_malloc.h: $(srcdir)/config/i386/pmm_malloc.h\n+\trm -f $@\n+\tcat $^ > $@"}, {"sha": "ae55c26fb5614585c5fde6e6f3e28b8c190ee29d", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=f6bc51cbc49e3a9dd714a5291dcb29e928a6af74", "patch": "@@ -37,6 +37,9 @@\n /* We need type definitions from the MMX header file.  */\n #include <mmintrin.h>\n \n+/* Get _mm_malloc () and _mm_free ().  */\n+#include <mm_malloc.h>\n+\n /* The data type intended for user use.  */\n typedef float __m128 __attribute__ ((vector_size (16)));\n "}, {"sha": "85dd35b19fbd39a9ee4cbf1a09836e70b5a807cc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f6bc51cbc49e3a9dd714a5291dcb29e928a6af74", "patch": "@@ -1,3 +1,8 @@\n+2004-08-03  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/16570\n+\t* gcc.dg/i386-sse-9.c: New test.\n+\n 2004-08-03  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcc.dg/array-7.c, gcc.dg/c99-tag-2.c: New tests."}, {"sha": "1fe7adac5421015a6cc0c2d6e3fbbb1cdd8eb307", "filename": "gcc/testsuite/gcc.dg/i386-sse-9.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bc51cbc49e3a9dd714a5291dcb29e928a6af74/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-9.c?ref=f6bc51cbc49e3a9dd714a5291dcb29e928a6af74", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse\" } */\n+#include <xmmintrin.h>\n+#include <stdlib.h>\n+#include <stddef.h>\n+#include <string.h>\n+\n+int\n+main()\n+{\n+  int alignment, n;\n+  void *ptr;\n+  int errors = 0;\n+  const char test [] = \"This is a test.\";\n+\n+  for (alignment = 1; alignment <= (1 << 20); alignment += alignment)\n+    {\n+      ptr = _mm_malloc (alignment, alignment);\n+      if (((ptrdiff_t) ptr) & (alignment - 1))\n+\tabort ();\n+      if (ptr)\n+\t{\n+\t  n = alignment > sizeof test ? sizeof test : alignment;\n+\t  memcpy (ptr, test, n);\n+\t  if (memcmp (ptr, test, n) != 0)\n+\t    errors++;\n+\t  _mm_free (ptr);\n+\t}\n+      else\n+\terrors++;\n+    }\n+   \n+  if (errors != 0)\n+    abort ();\n+  exit (0);\n+}"}]}