{"sha": "2bd112dee7f9786a0484d9281899a9bb0b2ae57d", "node_id": "C_kwDOANBUbNoAKDJiZDExMmRlZTdmOTc4NmEwNDg0ZDkyODE4OTlhOWJiMGIyYWU1N2Q", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-07T11:18:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-10T11:19:11Z"}, "message": "libstdc++: std::make_signed_t<cv bool> should be ill-formed\n\nCurrently we only reject std::make_signed_t<bool> but not cv bool.\nSimilarly for std::make_unsigned_t<cv bool>.\n\nAs well as making those ill-formed, this adds a requires-clause to the\nmake_signed and make_unsigned primary templates. This makes\nnon-integral, non-enum cases fail immediately with a clear error, rather\nthan giving an error about __make_signed_selector<T, false, false> being\nincomplete.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/type_traits (make_signed, make_unsigned): Add\n\tspecializations for cv bool. Add requires-clause for C++20 to\n\timprove diagnostics for non-integral, non-enum cases.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n\tCheck cv bool.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/24_iterators/range_access/range_access_cpp20_neg.cc:\n\tAdjust expected errors for C++20 and later.\n\t* testsuite/lib/prune.exp: Prune \"in requirements  [with ...]\"\n\tlines from diagnostics.", "tree": {"sha": "54752d194ff6bea23e463eaea83be6a1132ecf50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54752d194ff6bea23e463eaea83be6a1132ecf50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bd112dee7f9786a0484d9281899a9bb0b2ae57d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd112dee7f9786a0484d9281899a9bb0b2ae57d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bd112dee7f9786a0484d9281899a9bb0b2ae57d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd112dee7f9786a0484d9281899a9bb0b2ae57d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a99f511c57b5b02edfd5969148c580b4a8737ee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a99f511c57b5b02edfd5969148c580b4a8737ee8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a99f511c57b5b02edfd5969148c580b4a8737ee8"}], "stats": {"total": 74, "additions": 40, "deletions": 34}, "files": [{"sha": "6108b98aa6a6ce207fcc872fcb9a576e18673903", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd112dee7f9786a0484d9281899a9bb0b2ae57d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd112dee7f9786a0484d9281899a9bb0b2ae57d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=2bd112dee7f9786a0484d9281899a9bb0b2ae57d", "patch": "@@ -1802,12 +1802,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Primary template.\n   /// make_unsigned\n   template<typename _Tp>\n+#if __cpp_concepts\n+    requires is_integral<_Tp>::value || __is_enum(_Tp)\n+#endif\n     struct make_unsigned\n     { typedef typename __make_unsigned_selector<_Tp>::__type type; };\n \n   // Integral, but don't define.\n-  template<>\n-    struct make_unsigned<bool>;\n+  template<> struct make_unsigned<bool>;\n+  template<> struct make_unsigned<bool const>;\n+  template<> struct make_unsigned<bool volatile>;\n+  template<> struct make_unsigned<bool const volatile>;\n \n   /// @cond undocumented\n \n@@ -1932,12 +1937,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Primary template.\n   /// make_signed\n   template<typename _Tp>\n+#if __cpp_concepts\n+    requires is_integral<_Tp>::value || __is_enum(_Tp)\n+#endif\n     struct make_signed\n     { typedef typename __make_signed_selector<_Tp>::__type type; };\n \n   // Integral, but don't define.\n-  template<>\n-    struct make_signed<bool>;\n+  template<> struct make_signed<bool>;\n+  template<> struct make_signed<bool const>;\n+  template<> struct make_signed<bool volatile>;\n+  template<> struct make_signed<bool const volatile>;\n \n #if __cplusplus > 201103L\n   /// Alias template for make_signed"}, {"sha": "88b8ae887ef42fe9e4433c9ba491607e7c3968e9", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd112dee7f9786a0484d9281899a9bb0b2ae57d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd112dee7f9786a0484d9281899a9bb0b2ae57d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=2bd112dee7f9786a0484d9281899a9bb0b2ae57d", "patch": "@@ -20,31 +20,28 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_character.h>\n \n-enum test_enum { first_selection };\n+struct pod_class { };\n \n void test01()\n {\n   using std::make_signed;\n \n   // Negative tests.\n-  typedef make_signed<bool>::type     \ttest1_type;\n+  using T1 = make_signed<bool>::type; // { dg-error \"incomplete\" }\n+  using T2 = make_signed<const bool>::type; // { dg-error \"incomplete\" }\n+  using T3 = make_signed<volatile bool>::type; // { dg-error \"incomplete\" }\n+  using T4 = make_signed<const volatile bool>::type; // { dg-error \"incomplete\" }\n \n-  typedef make_signed<__gnu_test::pod_uint>::type     \ttest2_type;\n+  using T5 = make_signed<pod_class>::type; // { dg-error \"here\" }\n \n-  typedef make_signed<int[4]>::type     test3_type;\n+  using T6 = make_signed<int[4]>::type; // { dg-error \"here\" }\n \n-  typedef void (fn_type) ();\n-  typedef make_signed<fn_type>::type  \ttest4_type;\n+  using fn_type = void ();\n+  using T7 = make_signed<fn_type>::type; // { dg-error \"here\" }\n \n-  typedef make_signed<float>::type  \ttest5_type;\n+  using T8 = make_signed<float>::type; // { dg-error \"here\" }\n }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 32 }\n-// { dg-error \"required from here\" \"\" { target *-*-* } 34 }\n-// { dg-error \"required from here\" \"\" { target *-*-* } 36 }\n-// { dg-error \"required from here\" \"\" { target *-*-* } 39 }\n-// { dg-error \"required from here\" \"\" { target *-*-* } 41 }\n-\n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 0 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target c++17_down } 0 }\n+// { dg-error \"constraint failure\" \"\" { target c++20 } 0 }"}, {"sha": "50f15e7037c4dd18d76c86b97887c0cb5b17f6f8", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd112dee7f9786a0484d9281899a9bb0b2ae57d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd112dee7f9786a0484d9281899a9bb0b2ae57d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=2bd112dee7f9786a0484d9281899a9bb0b2ae57d", "patch": "@@ -21,30 +21,27 @@\n \n #include <type_traits>\n \n-enum test_enum { first_selection };\n struct pod_class { };\n \n void test01()\n {\n   using std::make_unsigned;\n \n   // Negative tests.\n-  typedef make_unsigned<bool>::type     \ttest1_type;\n+  using T1 = make_unsigned<bool>::type; // { dg-error \"incomplete\" }\n+  using T2 = make_unsigned<const bool>::type; // { dg-error \"incomplete\" }\n+  using T3 = make_unsigned<volatile bool>::type; // { dg-error \"incomplete\" }\n+  using T4 = make_unsigned<const volatile bool>::type; // { dg-error \"incomplete\" }\n \n-  typedef make_unsigned<pod_class>::type     \ttest2_type;\n+  using T5 = make_unsigned<pod_class>::type; // { dg-error \"here\" }\n \n-  typedef make_unsigned<int[4]>::type     test3_type;\n+  using T6 = make_unsigned<int[4]>::type; // { dg-error \"here\" }\n \n-  typedef void (fn_type) ();\n-  typedef make_unsigned<fn_type>::type  \ttest4_type;\n+  using fn_type = void ();\n+  using T7 = make_unsigned<fn_type>::type; // { dg-error \"here\" }\n \n-  typedef make_unsigned<float>::type  \t\ttest5_type;\n+  using T8 = make_unsigned<float>::type; // { dg-error \"here\" }\n }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 32 }\n-// { dg-error \"required from here\" \"\" { target *-*-* } 34 }\n-// { dg-error \"required from here\" \"\" { target *-*-* } 36 }\n-// { dg-error \"required from here\" \"\" { target *-*-* } 39 }\n-// { dg-error \"required from here\" \"\" { target *-*-* } 41 }\n-\n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 0 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target c++17_down } 0 }\n+// { dg-error \"constraint failure\" \"\" { target c++20 } 0 }"}, {"sha": "26c8ae0ee1e7a98b7876cb0b64842f5d880bad50", "filename": "libstdc++-v3/testsuite/24_iterators/range_access/range_access_cpp20_neg.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd112dee7f9786a0484d9281899a9bb0b2ae57d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access%2Frange_access_cpp20_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd112dee7f9786a0484d9281899a9bb0b2ae57d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access%2Frange_access_cpp20_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access%2Frange_access_cpp20_neg.cc?ref=2bd112dee7f9786a0484d9281899a9bb0b2ae57d", "patch": "@@ -46,4 +46,5 @@ test03()\n   C c;\n   std::ssize(c);  // { dg-error \"no matching function\" }\n }\n-// { dg-error \"incomplete type .*make_signed.*S\" \"\" { target *-*-* } 0 }\n+// { dg-error \"incomplete type .*make_signed.*S\" \"\" { target c++17_down } 0 }\n+// { dg-error \"constraint failure\" \"\" { target c++20 } 0 }"}, {"sha": "6d0b77a8ccd86a02d3a5d18a69a8b5cdd9ef7b52", "filename": "libstdc++-v3/testsuite/lib/prune.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd112dee7f9786a0484d9281899a9bb0b2ae57d/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd112dee7f9786a0484d9281899a9bb0b2ae57d/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fprune.exp?ref=2bd112dee7f9786a0484d9281899a9bb0b2ae57d", "patch": "@@ -51,6 +51,7 @@ proc libstdc++-dg-prune { system text } {\n     regsub -all \"(^|\\n)\\[^\\n\\]*:   (recursively )?required \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*:   . skipping \\[0-9\\]* instantiation contexts \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*:   in .constexpr. expansion \\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*:   in requirements  .with\\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)    inlined from \\[^\\n\\]*\" $text \"\" text\n     # Why doesn't GCC need these to strip header context?\n     regsub -all \"(^|\\n)In file included from \\[^\\n\\]*\" $text \"\" text"}]}