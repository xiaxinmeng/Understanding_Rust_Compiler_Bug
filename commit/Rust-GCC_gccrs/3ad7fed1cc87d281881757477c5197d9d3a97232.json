{"sha": "3ad7fed1cc87d281881757477c5197d9d3a97232", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FkN2ZlZDFjYzg3ZDI4MTg4MTc1NzQ3N2M1MTk3ZDlkM2E5NzIzMg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2019-03-20T15:28:38Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2019-03-20T15:28:38Z"}, "message": "S/390: Fix PR89775. Stackpointer save/restore instructions removed\n\nEven if a global register is being clobbered in a function we usually\ndo not save and restore it. However, we still have to do this if it is\na special register. Most of the places in the backend handle this\ncorrectly but not the prologue/epilogue optimization.\n\ngcc/ChangeLog:\n\n2019-03-20  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\tPR target/89775\n\t* config/s390/s390.c (global_not_special_regno_p): Move to make it\n\tavailable to ...\n\t(s390_optimize_register_info): Use global_not_special_regno_p to\n\tcheck for global regs.\n\n2019-03-20  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/89775\n\t* gcc.target/s390/pr89775-1.c: New test.\n\t* gcc.target/s390/pr89775-2.c: New test.\n\nFrom-SVN: r269823", "tree": {"sha": "ba232f7a2cef02750efc9fe2bced2ecbf161e80e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba232f7a2cef02750efc9fe2bced2ecbf161e80e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ad7fed1cc87d281881757477c5197d9d3a97232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ad7fed1cc87d281881757477c5197d9d3a97232", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ad7fed1cc87d281881757477c5197d9d3a97232", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ad7fed1cc87d281881757477c5197d9d3a97232/comments", "author": null, "committer": null, "parents": [{"sha": "a5b821e448e6debe73e1154128b4ea6f7f73fbdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b821e448e6debe73e1154128b4ea6f7f73fbdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5b821e448e6debe73e1154128b4ea6f7f73fbdd"}], "stats": {"total": 90, "additions": 74, "deletions": 16}, "files": [{"sha": "7774af878622c7866b4d607a75d74f1b7f875e69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad7fed1cc87d281881757477c5197d9d3a97232/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad7fed1cc87d281881757477c5197d9d3a97232/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ad7fed1cc87d281881757477c5197d9d3a97232", "patch": "@@ -1,3 +1,11 @@\n+2019-03-20  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR target/89775\n+\t* config/s390/s390.c (global_not_special_regno_p): Move to make it\n+\tavailable to ...\n+\t(s390_optimize_register_info): Use global_not_special_regno_p to\n+\tcheck for global regs.\n+\n 2019-03-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/89752"}, {"sha": "5f26437bed907e43c664c347cfc71ad2b3d4750c", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad7fed1cc87d281881757477c5197d9d3a97232/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad7fed1cc87d281881757477c5197d9d3a97232/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=3ad7fed1cc87d281881757477c5197d9d3a97232", "patch": "@@ -9588,6 +9588,21 @@ s390_register_info ()\n   s390_register_info_stdarg_gpr ();\n }\n \n+/* Return true if REGNO is a global register, but not one\n+   of the special ones that need to be saved/restored in anyway.  */\n+\n+static inline bool\n+global_not_special_regno_p (int regno)\n+{\n+  return (global_regs[regno]\n+\t  /* These registers are special and need to be\n+\t     restored in any case.  */\n+\t  && !(regno == STACK_POINTER_REGNUM\n+\t       || regno == RETURN_REGNUM\n+\t       || regno == BASE_REGNUM\n+\t       || (flag_pic && regno == (int)PIC_OFFSET_TABLE_REGNUM)));\n+}\n+\n /* This function is called by s390_optimize_prologue in order to get\n    rid of unnecessary GPR save/restore instructions.  The register info\n    for the GPRs is re-computed and the ranges are re-calculated.  */\n@@ -9602,8 +9617,10 @@ s390_optimize_register_info ()\n \n   s390_regs_ever_clobbered (clobbered_regs);\n \n+  /* Global registers do not need to be saved and restored unless it\n+     is one of our special regs.  (r12, r13, r14, or r15).  */\n   for (i = 0; i < 32; i++)\n-    clobbered_regs[i] = clobbered_regs[i] && !global_regs[i];\n+    clobbered_regs[i] = clobbered_regs[i] && !global_not_special_regno_p (i);\n \n   /* There is still special treatment needed for cases invisible to\n      s390_regs_ever_clobbered.  */\n@@ -10345,21 +10362,6 @@ restore_fpr (rtx base, int offset, int regnum)\n   return emit_move_insn (gen_rtx_REG (DFmode, regnum), addr);\n }\n \n-/* Return true if REGNO is a global register, but not one\n-   of the special ones that need to be saved/restored in anyway.  */\n-\n-static inline bool\n-global_not_special_regno_p (int regno)\n-{\n-  return (global_regs[regno]\n-\t  /* These registers are special and need to be\n-\t     restored in any case.  */\n-\t  && !(regno == STACK_POINTER_REGNUM\n-\t       || regno == RETURN_REGNUM\n-\t       || regno == BASE_REGNUM\n-\t       || (flag_pic && regno == (int)PIC_OFFSET_TABLE_REGNUM)));\n-}\n-\n /* Generate insn to save registers FIRST to LAST into\n    the register save area located at offset OFFSET\n    relative to register BASE.  */"}, {"sha": "00d0e9711e3f365ae0ae27843de886ff62616b6c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad7fed1cc87d281881757477c5197d9d3a97232/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad7fed1cc87d281881757477c5197d9d3a97232/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ad7fed1cc87d281881757477c5197d9d3a97232", "patch": "@@ -1,3 +1,9 @@\n+2019-03-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/89775\n+\t* gcc.target/s390/pr89775-1.c: New test.\n+\t* gcc.target/s390/pr89775-2.c: New test.\n+\n 2019-03-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/89752"}, {"sha": "2c0f6fd1f9b46ae0c69268fb0aa4b9f034b4fad2", "filename": "gcc/testsuite/gcc.target/s390/pr89775-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad7fed1cc87d281881757477c5197d9d3a97232/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr89775-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad7fed1cc87d281881757477c5197d9d3a97232/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr89775-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr89775-1.c?ref=3ad7fed1cc87d281881757477c5197d9d3a97232", "patch": "@@ -0,0 +1,17 @@\n+/* PR target/89775 */\n+/* { dg-do run } */\n+/* { dg-options \"-O0 -fomit-frame-pointer\" } */\n+/* { dg-additional-sources \"pr89775-2.c\" } */\n+\n+register void *sp __asm (\"15\");\n+\n+__attribute__((noipa)) int\n+foo (const char *a, const char *b)\n+{\n+  while (1)\n+    {\n+      char c = *a++;\n+      if (c != *b++) return 0;\n+      if (c == '\\0') return 1;\n+    }\n+}"}, {"sha": "645661e585218ba6016ff8cb425d4782695cecec", "filename": "gcc/testsuite/gcc.target/s390/pr89775-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad7fed1cc87d281881757477c5197d9d3a97232/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr89775-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad7fed1cc87d281881757477c5197d9d3a97232/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr89775-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr89775-2.c?ref=3ad7fed1cc87d281881757477c5197d9d3a97232", "patch": "@@ -0,0 +1,25 @@\n+/* PR target/89775 */\n+/* { dg-do compile } */\n+\n+extern int foo (const char *, const char *);\n+\n+__attribute__((noipa)) void\n+bar (const char *p)\n+{\n+  static const char *x;\n+  if (!x)\n+    x = p;\n+  else if (p != x)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  char a[8] = \"abcdefg\";\n+  bar (a);\n+  if (foo (a, a) != 1)\n+    __builtin_abort ();\n+  bar (a);\n+  return 0;\n+}"}]}