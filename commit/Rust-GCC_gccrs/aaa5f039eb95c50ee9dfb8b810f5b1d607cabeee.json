{"sha": "aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFhNWYwMzllYjk1YzUwZWU5ZGZiOGI4MTBmNWIxZDYwN2NhYmVlZQ==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2001-09-26T18:16:17Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2001-09-26T18:16:17Z"}, "message": "configure.in (MAKEINFO, PERL): Detect these.\n\n* configure.in (MAKEINFO, PERL): Detect these.\n(--enable-maintainer-mode): Add.\n* configure: Regenerate.\n* Makefile.in (MAKEINFO, PERL): Define.\n(libiberty.info, libiberty.dvi, libiberty.html): New.\n(CFILES): Add bsearch.c.\n(CONFIGURED_OFILES): New, list of objects configure might add.\n(maint-missing, maint-buildall): New, for maintainers only.\n(clean, mostlyclean): Add info/dvi/html files.\n* libiberty.texi, copying-lib.texi, obstacks.texi, functions.texi: New.\n* gather-docs: New, for maintainers.\n* maint-tool: New, for maintainers.\n* alloca.c, atexit.c, basename.c, bcmp.c, bcopy.c, bsearch.c,\nbzero.c, calloc.c, clock.c, configure.in, configure, getcwd.c,\ngetpagesize.c, getpwd.c, index.c, memchr.c, memcmp.c, memcpy.c,\nmemmove.c, memset.c, putenv.c, rename.c, rindex.c, setenv.c,\nsigsetmask.c, strcasecmp.c, strchr.c, strdup.c, strerror.c,\nstrncasecmp.c, strncmp.c, strrchr.c, strstr.c, strtod.c, strtol.c,\ntmpnam.c, vfork.c, vprintf.c, waitpid.c, xatexit.c, xexit.c,\nxmalloc.c, xmemdup.c, xstrdup.c, xstrerror.c: Add or update\ndocumentation.\n\nCo-Authored-By: Phil Edwards <pedwards@disaster.jaj.com>\n\nFrom-SVN: r45828", "tree": {"sha": "3731ea290c206f61394a41a0ef3959828587369f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3731ea290c206f61394a41a0ef3959828587369f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/comments", "author": null, "committer": null, "parents": [{"sha": "b8af0ca5c72a8663b3ea7b0d706cb7055d827aed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8af0ca5c72a8663b3ea7b0d706cb7055d827aed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8af0ca5c72a8663b3ea7b0d706cb7055d827aed"}], "stats": {"total": 3595, "additions": 3243, "deletions": 352}, "files": [{"sha": "034a492fcb52a85f2ca0faa327066552c8805470", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -1,3 +1,28 @@\n+2001-09-20  DJ Delorie  <dj@redhat.com>\n+\t    Phil Edwards  <pedwards@disaster.jaj.com>\n+\t\n+\t* configure.in (MAKEINFO, PERL): Detect these.\n+\t(--enable-maintainer-mode): Add.\n+\t* configure: Regenerate.\n+\t* Makefile.in (MAKEINFO, PERL): Define.\n+\t(libiberty.info, libiberty.dvi, libiberty.html): New.\n+\t(CFILES): Add bsearch.c.\n+\t(CONFIGURED_OFILES): New, list of objects configure might add.\n+\t(maint-missing, maint-buildall): New, for maintainers only.\n+\t(clean, mostlyclean): Add info/dvi/html files.\n+\t* libiberty.texi, copying-lib.texi, obstacks.texi, functions.texi: New.\n+\t* gather-docs: New, for maintainers.\n+\t* maint-tool: New, for maintainers.\n+\t* alloca.c, atexit.c, basename.c, bcmp.c, bcopy.c, bsearch.c,\n+\tbzero.c, calloc.c, clock.c, configure.in, configure, getcwd.c,\n+\tgetpagesize.c, getpwd.c, index.c, memchr.c, memcmp.c, memcpy.c,\n+\tmemmove.c, memset.c, putenv.c, rename.c, rindex.c, setenv.c,\n+\tsigsetmask.c, strcasecmp.c, strchr.c, strdup.c, strerror.c,\n+\tstrncasecmp.c, strncmp.c, strrchr.c, strstr.c, strtod.c, strtol.c,\n+\ttmpnam.c, vfork.c, vprintf.c, waitpid.c, xatexit.c, xexit.c,\n+\txmalloc.c, xmemdup.c, xstrdup.c, xstrerror.c: Add or update\n+\tdocumentation.\n+\t\n 2001-09-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* concat.c (reconcat): Fix for traditional C."}, {"sha": "393fa9fe3afe7bf499974104c4aee53e19f02e0d", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 61, "deletions": 7, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -1,6 +1,6 @@\n #\n # Makefile\n-#   Copyright (C) 1990, 91-99, 2000\n+#   Copyright (C) 1990, 91-99, 2000, 2001\n #   Free Software Foundation\n #\n # This file is part of the libiberty library.\n@@ -56,6 +56,8 @@ CC = @CC@\n CFLAGS = @CFLAGS@\n LIBCFLAGS = $(CFLAGS)\n RANLIB = @RANLIB@\n+MAKEINFO = @MAKEINFO@\n+PERL = @PERL@\n \n PICFLAG =\n \n@@ -94,6 +96,7 @@ FLAGS_TO_PASS = \\\n # Subdirectories to recurse into. We need to override this during cleaning\n SUBDIRS = testsuite\n \n+# FIXME: add @BUILD_INFO@ once we're sure it works for everyone.\n all: stamp-picdir $(TARGETLIB) needed-list required-list all-subdir\n \t@$(MULTIDO) $(FLAGS_TO_PASS) multi-do DO=all\n \n@@ -112,16 +115,11 @@ COMPILE.c = $(CC) -c @DEFS@ $(LIBCFLAGS) -I. -I$(INCDIR) $(HDEFINES) @ac_libiber\n \telse true; fi\n \t$(COMPILE.c) $<\n \n-info: info-subdir\n-install-info: install-info-subdir\n-clean-info: clean-info-subdir\n-dvi: dvi-subdir\n-\n # NOTE: If you add new files to the library, add them to this list\n # (alphabetical), and add them to REQUIRED_OFILES or funcs in\n # configure.in.\n CFILES = asprintf.c alloca.c argv.c atexit.c basename.c bcmp.c bcopy.c\t      \\\n-\tbzero.c calloc.c choose-temp.c clock.c concat.c cplus-dem.c\t      \\\n+\tbsearch.c bzero.c calloc.c choose-temp.c clock.c concat.c cplus-dem.c \\\n         cp-demangle.c dyn-string.c fdmatch.c fnmatch.c ffs.c getcwd.c\t      \\\n \tgetpwd.c getopt.c getopt1.c getpagesize.c getruntime.c\t\t      \\\n \tfloatformat.c hashtab.c hex.c index.c insque.c lbasename.c            \\\n@@ -144,12 +142,55 @@ REQUIRED_OFILES = argv.o alloca.o choose-temp.o concat.o cplus-dem.o          \\\n \tsplay-tree.o strerror.o strsignal.o xatexit.o xexit.o xmalloc.o       \\\n \txmemdup.o xstrdup.o xstrerror.o ternary.o fibheap.o\n \n+# These are all the objects that configure may add to the library via\n+# $funcs.  This list exists here only for \"make maint-missing\".\n+CONFIGURED_OFILES = asprintf.o atexit.o basename.o bcmp.o bcopy.o\t\\\n+\tbsearch.o bzero.o calloc.o clock.o ffs.o getcwd.o\t\t\\\n+\tgetpagesize.o index.o insque.o memchr.o memcmp.o memcpy.o\t\\\n+\tmemmove.o memset.o mkstemps.o putenv.o random.o rename.o\t\\\n+\trindex.o setenv.o sigsetmask.o strcasecmp.o strchr.o strdup.o\t\\\n+\tstrncasecmp.o strncmp.o strrchr.o strstr.o strtod.o strtol.o\t\\\n+\tstrtoul.o tmpnam.o vasprintf.o vfork.o vfprintf.o vprintf.o\t\\\n+\tvsprintf.o waitpid.o\n+\n $(TARGETLIB): $(REQUIRED_OFILES) $(EXTRA_OFILES) $(LIBOBJS)\n \t-rm -f $(TARGETLIB)\n \t$(AR) $(AR_FLAGS) $(TARGETLIB) \\\n \t  $(REQUIRED_OFILES) $(EXTRA_OFILES) $(LIBOBJS)\n \t$(RANLIB) $(TARGETLIB)\n \n+info: libiberty.info info-subdir\n+install-info: install-info-subdir\n+clean-info: clean-info-subdir\n+dvi: libiberty.dvi dvi-subdir\n+html: libiberty.html\n+\n+TEXISRC = \\\n+\t$(srcdir)/libiberty.texi \\\n+\t$(srcdir)/copying-lib.texi \\\n+\t$(srcdir)/obstacks.texi \\\n+\t$(srcdir)/functions.texi\n+\n+# Additional files that have texi snippets that need to be collected\n+# and sorted.\n+TEXIFILES = \n+\n+libiberty.info : $(srcdir)/libiberty.texi $(TEXISRC)\n+\t$(MAKEINFO) -I$(srcdir) $(srcdir)/libiberty.texi\n+\n+libiberty.dvi : $(srcdir)/libiberty.texi $(TEXISRC)\n+\ttexi2dvi $(srcdir)/libiberty.texi\n+\n+libiberty.html : $(srcdir)/libiberty.texi $(TEXISRC)\n+\t$(MAKEINFO) --html -I$(srcdir) $(srcdir)/libiberty.texi\n+\n+@MAINT@$(srcdir)/functions.texi : stamp-functions\n+@MAINT@\t@true\n+\n+@MAINT@stamp-functions : $(CFILES) $(TEXIFILES) $(srcdir)/gather-docs Makefile\n+@MAINT@@HAVE_PERL@\t$(PERL) $(srcdir)/gather-docs $(srcdir) $(srcdir)/functions.texi $(CFILES) $(TEXIFILES)\n+@MAINT@\techo stamp > stamp-functions\n+\n INSTALL_DEST = @INSTALL_DEST@\n install: install_to_$(INSTALL_DEST) install-subdir\n \n@@ -208,6 +249,14 @@ demangle:\n ls:\n \t@echo Makefile $(CFILES)\n \n+# Various targets for maintainers.\n+\n+maint-missing :\n+\t@$(PERL) $(srcdir)/maint-tool -s $(srcdir) missing $(CFILES) $(REQUIRED_OFILES) $(CONFIGURED_OFILES)\n+\n+maint-buildall : $(REQUIRED_OFILES) $(CONFIGURED_OFILES)\n+\t@true\n+\n # Need to deal with profiled libraries, too.\n \n # Cleaning has to be done carefully to ensure that we don't clean our SUBDIRS\n@@ -216,10 +265,15 @@ mostlyclean: mostlyclean-subdir\n \t-rm -rf *.o pic core errs \\#* *.E a.out\n \t-rm -f needed.awk needed2.awk errors dummy needed-list config.h stamp-*\n \t-rm -f $(CONFIG_H) $(NEEDED_LIST) stamp-picdir\n+\t-rm -f libiberty.aux libiberty.cp libiberty.cps libiberty.fn libiberty.ky\n+\t-rm -f libiberty.log libiberty.tmp libiberty.tps libiberty.pg\n+\t-rm -f libiberty.pgs libiberty.toc libiberty.tp libiberty.tpl libiberty.vr\n+\t-rm -f libtexi.stamp\n \t@$(MULTICLEAN) multi-clean DO=mostlyclean\n clean: clean-subdir\n \t$(MAKE) SUBDIRS=\"\" mostlyclean\n \t-rm -f *.a required-list tmpmulti.out\n+\t-rm -f libiberty.dvi libiberty.info* libiberty.html\n \t@$(MULTICLEAN) multi-clean DO=clean\n distclean: distclean-subdir\n \t$(MAKE) SUBDIRS=\"\" clean"}, {"sha": "9c07e0d481c22f9fff7cc9a23ab58ff4b0eb5e9e", "filename": "libiberty/alloca.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Falloca.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Falloca.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Falloca.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -21,6 +21,27 @@\n    allocating any.  It is a good idea to use alloca(0) in\n    your main control loop, etc. to force garbage collection.  */\n \n+/*\n+\n+@deftypefn Replacement void* alloca (size_t)\n+\n+This function allocates memory which will be automatically reclaimed\n+after the procedure exits.  The @libib{} implementation does not free\n+the memory immediately but will do so eventually during subsequent\n+calls to this function.  Memory is allocated using @code{xmalloc} under\n+normal circumstances.\n+\n+The header file @file{alloca-conf.h} can be used in conjunction with the\n+GNU Autoconf test @code{AC_FUNC_ALLOCA} to test for and properly make\n+available this function.  The @code{AC_FUNC_ALLOCA} test requires that\n+client code use a block of preprocessor code to be safe (see the Autoconf\n+manual for more); this header incorporates that logic and more, including\n+the possibility of a GCC builtin function.\n+\n+@end deftypefn\n+\n+*/\n+\n #ifdef HAVE_CONFIG_H\n #include <config.h>\n #endif"}, {"sha": "e14de29ab1d1c39d0fe509239d417f951eaf1bda", "filename": "libiberty/atexit.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fatexit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fatexit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fatexit.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -1,6 +1,16 @@\n /* Wrapper to implement ANSI C's atexit using SunOS's on_exit. */\n /* This function is in the public domain.  --Mike Stump. */\n \n+/*\n+\n+@deftypefn Supplemental int atexit (void (*@var{f})())\n+\n+Causes function @var{f} to be called at exit.  Returns 0.\n+\n+@end deftypefn\n+\n+*/\n+\n #include \"config.h\"\n \n #ifdef HAVE_ON_EXIT"}, {"sha": "69a982d7dca8f5795b69e361347bf84ec0ef0314", "filename": "libiberty/basename.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fbasename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fbasename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fbasename.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -2,20 +2,14 @@\n    This file is in the public domain. */\n \n /*\n-NAME\n-\tbasename -- return pointer to last component of a pathname\n \n-SYNOPSIS\n-\tchar *basename (const char *name)\n+@deftypefn Supplemental char* basename (const char *@var{name})\n \n-DESCRIPTION\n-\tGiven a pointer to a string containing a typical pathname\n-\t(/usr/src/cmd/ls/ls.c for example), returns a pointer to the\n-\tlast component of the pathname (\"ls.c\" in this case).\n+Returns a pointer to the last component of pathname @var{name}.\n+Behavior is undefined if the pathname ends in a directory separator.\n+\n+@end deftypefn\n \n-BUGS\n-\tPresumes a UNIX or DOS/Windows style path with UNIX or DOS/Windows \n-\tstyle separators.\n */\n \n #include \"ansidecl.h\""}, {"sha": "71bb7ae8ffdf28b29964ecdd5b1d1e1fc6f94064", "filename": "libiberty/bcmp.c", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fbcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fbcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fbcmp.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -3,28 +3,15 @@\n \n /*\n \n-NAME\n+@deftypefn Supplemental int bcmp (char *@var{x}, char *@var{y}, int @var{count})\n \n-\tbcmp -- compare two memory regions\n+Compares the first @var{count} bytes of two areas of memory.  Returns\n+zero if they are the same, non-zero otherwise.  Returns zero if\n+@var{count} is zero.  A non-zero result only indicates a difference,\n+it does not indicate any sorting order (say, by having a positive\n+result mean @var{x} sorts before @var{y}).\n \n-SYNOPSIS\n-\n-\tint bcmp (char *from, char *to, int count)\n-\n-DESCRIPTION\n-\n-\tCompare two memory regions and return zero if they are identical,\n-\tnon-zero otherwise.  If count is zero, return zero.\n-\n-NOTES\n-\n-\tNo guarantee is made about the non-zero returned value.  In\n-\tparticular, the results may be signficantly different than\n-\tstrcmp(), where the return value is guaranteed to be less than,\n-\tequal to, or greater than zero, according to lexicographical\n-\tsorting of the compared regions.\n-\n-BUGS\n+@end deftypefn\n \n */\n "}, {"sha": "70fa7e328cc68f558c638493c4c537621b8a088b", "filename": "libiberty/bcopy.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fbcopy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fbcopy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fbcopy.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -1,19 +1,11 @@\n /* bcopy -- copy memory regions of arbitary length\n \n-NAME\n-\tbcopy -- copy memory regions of arbitrary length\n+@deftypefn Supplemental void bcopy (char *@var{in}, char *@var{out}, int @var{length})\n \n-SYNOPSIS\n-\tvoid bcopy (char *in, char *out, int length)\n+Copies @var{length} bytes from memory region @var{in} to region\n+@var{out}.  The use of @code{bcopy} is deprecated in new programs.\n \n-DESCRIPTION\n-\tCopy LENGTH bytes from memory region pointed to by IN to memory\n-\tregion pointed to by OUT.\n-\n-BUGS\n-\tSignificant speed improvements can be made in some cases by\n-\timplementing copies of multiple bytes simultaneously, or unrolling\n-\tthe copy loop.\n+@end deftypefn\n \n */\n "}, {"sha": "b3283f9285fac3793e00a959676bbe9929758b52", "filename": "libiberty/bsearch.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fbsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fbsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fbsearch.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -28,6 +28,23 @@\n  * SUCH DAMAGE.\n  */\n \n+/*\n+\n+@deftypefn Supplemental void* bsearch (const void *@var{key}, const void *@var{base}, size_t @var{nmemb}, size_t @var{size}, int (*@var{compar})(const void *, const void *))\n+\n+Performs a search over an array of @var{nmemb} elements pointed to by\n+@var{base} for a member that matches the object pointed to by @var{key}.\n+The size of each member is specified by @var{size}.  The array contents\n+should be sorted in ascending order according to the @var{compar}\n+comparison function.  This routine should take two arguments pointing to\n+the @var{key} and to an array member, in that order, and should return an\n+integer less than, equal to, or greater than zero if the @var{key} object\n+is respectively less than, matching, or greater than the array member.\n+\n+@end deftypefn\n+\n+*/\n+\n #include \"config.h\"\n #include \"ansidecl.h\"\n #include <sys/types.h>\t\t/* size_t */"}, {"sha": "8874118698e4d826c4e86cc236746bce2d5d303a", "filename": "libiberty/bzero.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fbzero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fbzero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fbzero.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -2,19 +2,13 @@\n    This function is in the public domain.  */\n \n /*\n-NAME\n-\tbzero -- zero the contents of a specified memory region\n \n-SYNOPSIS\n-\tvoid bzero (char *to, int count)\n+@deftypefn Supplemental void bzero (char *@var{mem}, int @var{count})\n \n-DESCRIPTION\n-\tZero COUNT bytes of memory pointed to by TO.\n+Zeros @var{count} bytes starting at @var{mem}.  Use of this function\n+is deprecated in favor of @code{memset}.\n \n-BUGS\n-\tSignificant speed enhancements may be made in some environments\n-\tby zeroing more than a single byte at a time, or by unrolling the\n-\tloop.\n+@end deftypefn\n \n */\n "}, {"sha": "b342f6c1b3b54633cb53822cbd9e57368a54df75", "filename": "libiberty/calloc.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fcalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fcalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcalloc.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -1,5 +1,16 @@\n /* calloc -- allocate memory which has been initialized to zero.\n    This function is in the public domain. */\n+\n+/*\n+\n+@deftypefn Supplemental void* calloc (size_t @var{nelem}, size_t @var{elsize})\n+\n+Uses @code{malloc} to allocate storage for @var{nelem} objects of\n+@var{elsize} bytes each, then zeros the memory.\n+\n+@end deftypefn\n+\n+*/\n  \n #include \"ansidecl.h\"\n #include \"libiberty.h\""}, {"sha": "187af7049c21b1e25cb4d9e74898992606bfb094", "filename": "libiberty/clock.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fclock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fclock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fclock.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -22,6 +22,18 @@ the resulting executable to be covered by the GNU General Public License.\n This exception does not however invalidate any other reasons why\n the executable file might be covered by the GNU General Public License. */\n \n+/*\n+\n+@deftypefn Supplemental long clock ()\n+\n+Returns an approximation of the CPU time used by the process as a\n+@code{clock_t}; divide this number by @samp{CLOCKS_PER_SEC} to get the\n+number of seconds used.\n+\n+@end deftypefn\n+\n+*/\n+\n #include \"config.h\"\n \n #ifdef HAVE_GETRUSAGE"}, {"sha": "ee88f1c15456e6095f0f2026ebefe6d3d45547d5", "filename": "libiberty/configure", "status": "modified", "additions": 219, "deletions": 109, "changes": 328, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -17,6 +17,10 @@ ac_help=\"$ac_help\n   --with-cross-host=HOST           Configuring with a cross compiler\"\n ac_help=\"$ac_help\n   --with-newlib                    Configuring with newlib\"\n+ac_help=\"$ac_help\n+  --enable-maintainer-mode\n+                          enable make rules and dependencies not useful\n+                          (and sometimes confusing) to the casual installer\"\n \n # Initialize some variables set by options.\n # The variables have the same names as the options, with\n@@ -581,13 +585,113 @@ ac_configure=$ac_aux_dir/configure # This should be Cygnus configure.\n \n \n \n+echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n+echo \"configure:590: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+    # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n+if test \"${enable_maintainer_mode+set}\" = set; then\n+  enableval=\"$enable_maintainer_mode\"\n+  maintainer_mode=$enableval\n+else\n+  maintainer_mode=no\n+fi\n+\n+\n+echo \"$ac_t\"\"$maintainer_mode\" 1>&6\n+\n+if test \"$maintainer_mode\" = \"yes\"; then\n+  MAINT=''\n+  NOTMAINT='#'\n+else\n+  MAINT='#'\n+  NOTMAINT=''\n+fi\n+\n+# Do we have a single-tree copy of texinfo?\n+if test -f $srcdir/../texinfo/Makefile.in; then\n+  MAKEINFO='$(objdir)/../texinfo/makeinfo/makeinfo'\n+  echo \"$ac_t\"\"Using makeinfo from the unified source tree.\" 1>&6\n+else\n+  # Extract the first word of \"makeinfo\", so it can be a program name with args.\n+set dummy makeinfo; ac_word=$2\n+echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n+echo \"configure:618: checking for $ac_word\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_prog_MAKEINFO'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  if test -n \"$MAKEINFO\"; then\n+  ac_cv_prog_MAKEINFO=\"$MAKEINFO\" # Let the user override the test.\n+else\n+  IFS=\"${IFS= \t}\"; ac_save_ifs=\"$IFS\"; IFS=\":\"\n+  ac_dummy=\"$PATH\"\n+  for ac_dir in $ac_dummy; do\n+    test -z \"$ac_dir\" && ac_dir=.\n+    if test -f $ac_dir/$ac_word; then\n+      ac_cv_prog_MAKEINFO=\"makeinfo\"\n+      break\n+    fi\n+  done\n+  IFS=\"$ac_save_ifs\"\n+fi\n+fi\n+MAKEINFO=\"$ac_cv_prog_MAKEINFO\"\n+if test -n \"$MAKEINFO\"; then\n+  echo \"$ac_t\"\"$MAKEINFO\" 1>&6\n+else\n+  echo \"$ac_t\"\"no\" 1>&6\n+fi\n+\n+fi\n+if test x\"$MAKEINFO\" = x\"\"; then\n+  BUILD_INFO=\n+else\n+  BUILD_INFO=info\n+fi\n+\n+\n+# Extract the first word of \"perl\", so it can be a program name with args.\n+set dummy perl; ac_word=$2\n+echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n+echo \"configure:655: checking for $ac_word\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_prog_PERL'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  if test -n \"$PERL\"; then\n+  ac_cv_prog_PERL=\"$PERL\" # Let the user override the test.\n+else\n+  IFS=\"${IFS= \t}\"; ac_save_ifs=\"$IFS\"; IFS=\":\"\n+  ac_dummy=\"$PATH\"\n+  for ac_dir in $ac_dummy; do\n+    test -z \"$ac_dir\" && ac_dir=.\n+    if test -f $ac_dir/$ac_word; then\n+      ac_cv_prog_PERL=\"perl\"\n+      break\n+    fi\n+  done\n+  IFS=\"$ac_save_ifs\"\n+fi\n+fi\n+PERL=\"$ac_cv_prog_PERL\"\n+if test -n \"$PERL\"; then\n+  echo \"$ac_t\"\"$PERL\" 1>&6\n+else\n+  echo \"$ac_t\"\"no\" 1>&6\n+fi\n+\n+if test x\"$PERL\" = x\"\"; then\n+  HAVE_PERL='#'\n+else\n+  HAVE_PERL=''\n+fi\n+\n+\n+\n # Make sure we can run config.sub.\n if ${CONFIG_SHELL-/bin/sh} $ac_config_sub sun4 >/dev/null 2>&1; then :\n else { echo \"configure: error: can not run $ac_config_sub\" 1>&2; exit 1; }\n fi\n \n echo $ac_n \"checking host system type\"\"... $ac_c\" 1>&6\n-echo \"configure:591: checking host system type\" >&5\n+echo \"configure:695: checking host system type\" >&5\n \n host_alias=$host\n case \"$host_alias\" in\n@@ -610,7 +714,7 @@ echo \"$ac_t\"\"$host\" 1>&6\n \n \n echo $ac_n \"checking build system type\"\"... $ac_c\" 1>&6\n-echo \"configure:614: checking build system type\" >&5\n+echo \"configure:718: checking build system type\" >&5\n \n build_alias=$build\n case \"$build_alias\" in\n@@ -636,7 +740,7 @@ fi\n # Extract the first word of \"${ac_tool_prefix}ar\", so it can be a program name with args.\n set dummy ${ac_tool_prefix}ar; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:640: checking for $ac_word\" >&5\n+echo \"configure:744: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_AR'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -668,7 +772,7 @@ fi\n # Extract the first word of \"${ac_tool_prefix}ranlib\", so it can be a program name with args.\n set dummy ${ac_tool_prefix}ranlib; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:672: checking for $ac_word\" >&5\n+echo \"configure:776: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_RANLIB'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -700,7 +804,7 @@ if test -n \"$ac_tool_prefix\"; then\n   # Extract the first word of \"ranlib\", so it can be a program name with args.\n set dummy ranlib; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:704: checking for $ac_word\" >&5\n+echo \"configure:808: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_RANLIB'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -737,7 +841,7 @@ fi\n # Extract the first word of \"gcc\", so it can be a program name with args.\n set dummy gcc; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:741: checking for $ac_word\" >&5\n+echo \"configure:845: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CC'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -767,7 +871,7 @@ if test -z \"$CC\"; then\n   # Extract the first word of \"cc\", so it can be a program name with args.\n set dummy cc; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:771: checking for $ac_word\" >&5\n+echo \"configure:875: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CC'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -816,7 +920,7 @@ fi\n fi\n \n echo $ac_n \"checking whether we are using GNU C\"\"... $ac_c\" 1>&6\n-echo \"configure:820: checking whether we are using GNU C\" >&5\n+echo \"configure:924: checking whether we are using GNU C\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_gcc'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -825,7 +929,7 @@ else\n   yes;\n #endif\n EOF\n-if { ac_try='${CC-cc} -E conftest.c'; { (eval echo configure:829: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }; } | egrep yes >/dev/null 2>&1; then\n+if { ac_try='${CC-cc} -E conftest.c'; { (eval echo configure:933: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }; } | egrep yes >/dev/null 2>&1; then\n   ac_cv_prog_gcc=yes\n else\n   ac_cv_prog_gcc=no\n@@ -841,7 +945,7 @@ if test $ac_cv_prog_gcc = yes; then\n   ac_save_CFLAGS=\"$CFLAGS\"\n   CFLAGS=\n   echo $ac_n \"checking whether ${CC-cc} accepts -g\"\"... $ac_c\" 1>&6\n-echo \"configure:845: checking whether ${CC-cc} accepts -g\" >&5\n+echo \"configure:949: checking whether ${CC-cc} accepts -g\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_cc_g'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -872,7 +976,7 @@ fi\n \n \n echo $ac_n \"checking for POSIXized ISC\"\"... $ac_c\" 1>&6\n-echo \"configure:876: checking for POSIXized ISC\" >&5\n+echo \"configure:980: checking for POSIXized ISC\" >&5\n if test -d /etc/conf/kconfig.d &&\n   grep _POSIX_VERSION /usr/include/sys/unistd.h >/dev/null 2>&1\n then\n@@ -893,12 +997,12 @@ else\n fi\n \n echo $ac_n \"checking for working const\"\"... $ac_c\" 1>&6\n-echo \"configure:897: checking for working const\" >&5\n+echo \"configure:1001: checking for working const\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_c_const'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 902 \"configure\"\n+#line 1006 \"configure\"\n #include \"confdefs.h\"\n \n int main() {\n@@ -947,7 +1051,7 @@ ccp = (char const *const *) p;\n \n ; return 0; }\n EOF\n-if { (eval echo configure:951: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:1055: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   ac_cv_c_const=yes\n else\n@@ -968,21 +1072,21 @@ EOF\n fi\n \n echo $ac_n \"checking for inline\"\"... $ac_c\" 1>&6\n-echo \"configure:972: checking for inline\" >&5\n+echo \"configure:1076: checking for inline\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_c_inline'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   ac_cv_c_inline=no\n for ac_kw in inline __inline__ __inline; do\n   cat > conftest.$ac_ext <<EOF\n-#line 979 \"configure\"\n+#line 1083 \"configure\"\n #include \"confdefs.h\"\n \n int main() {\n } $ac_kw foo() {\n ; return 0; }\n EOF\n-if { (eval echo configure:986: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:1090: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   ac_cv_c_inline=$ac_kw; break\n else\n@@ -1025,7 +1129,7 @@ esac\n # SVR4 /usr/ucb/install, which tries to use the nonexistent group \"staff\"\n # ./install, which can be erroneously created by make from ./install.sh.\n echo $ac_n \"checking for a BSD compatible install\"\"... $ac_c\" 1>&6\n-echo \"configure:1029: checking for a BSD compatible install\" >&5\n+echo \"configure:1133: checking for a BSD compatible install\" >&5\n if test -z \"$INSTALL\"; then\n if eval \"test \\\"`echo '$''{'ac_cv_path_install'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n@@ -1086,7 +1190,7 @@ host_makefile_frag=${frag}\n # able to link anything, it had better be able to at least compile\n # something.\n echo $ac_n \"checking how to run the C preprocessor\"\"... $ac_c\" 1>&6\n-echo \"configure:1090: checking how to run the C preprocessor\" >&5\n+echo \"configure:1194: checking how to run the C preprocessor\" >&5\n # On Suns, sometimes $CPP names a directory.\n if test -n \"$CPP\" && test -d \"$CPP\"; then\n   CPP=\n@@ -1101,13 +1205,13 @@ else\n   # On the NeXT, cc -E runs the code through the compiler's parser,\n   # not just through cpp.\n   cat > conftest.$ac_ext <<EOF\n-#line 1105 \"configure\"\n+#line 1209 \"configure\"\n #include \"confdefs.h\"\n #include <assert.h>\n Syntax Error\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:1111: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:1215: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   :\n@@ -1118,13 +1222,13 @@ else\n   rm -rf conftest*\n   CPP=\"${CC-cc} -E -traditional-cpp\"\n   cat > conftest.$ac_ext <<EOF\n-#line 1122 \"configure\"\n+#line 1226 \"configure\"\n #include \"confdefs.h\"\n #include <assert.h>\n Syntax Error\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:1128: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:1232: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   :\n@@ -1135,13 +1239,13 @@ else\n   rm -rf conftest*\n   CPP=\"${CC-cc} -nologo -E\"\n   cat > conftest.$ac_ext <<EOF\n-#line 1139 \"configure\"\n+#line 1243 \"configure\"\n #include \"confdefs.h\"\n #include <assert.h>\n Syntax Error\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:1145: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:1249: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   :\n@@ -1169,17 +1273,17 @@ for ac_hdr in sys/file.h sys/param.h limits.h stdlib.h string.h unistd.h strings\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n-echo \"configure:1173: checking for $ac_hdr\" >&5\n+echo \"configure:1277: checking for $ac_hdr\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 1178 \"configure\"\n+#line 1282 \"configure\"\n #include \"confdefs.h\"\n #include <$ac_hdr>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:1183: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:1287: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -1206,12 +1310,12 @@ fi\n done\n \n echo $ac_n \"checking for sys/wait.h that is POSIX.1 compatible\"\"... $ac_c\" 1>&6\n-echo \"configure:1210: checking for sys/wait.h that is POSIX.1 compatible\" >&5\n+echo \"configure:1314: checking for sys/wait.h that is POSIX.1 compatible\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_sys_wait_h'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 1215 \"configure\"\n+#line 1319 \"configure\"\n #include \"confdefs.h\"\n #include <sys/types.h>\n #include <sys/wait.h>\n@@ -1227,7 +1331,7 @@ wait (&s);\n s = WIFEXITED (s) ? WEXITSTATUS (s) : 1;\n ; return 0; }\n EOF\n-if { (eval echo configure:1231: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:1335: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   ac_cv_header_sys_wait_h=yes\n else\n@@ -1248,12 +1352,12 @@ EOF\n fi\n \n echo $ac_n \"checking whether time.h and sys/time.h may both be included\"\"... $ac_c\" 1>&6\n-echo \"configure:1252: checking whether time.h and sys/time.h may both be included\" >&5\n+echo \"configure:1356: checking whether time.h and sys/time.h may both be included\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_time'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 1257 \"configure\"\n+#line 1361 \"configure\"\n #include \"confdefs.h\"\n #include <sys/types.h>\n #include <sys/time.h>\n@@ -1262,7 +1366,7 @@ int main() {\n struct tm *tp;\n ; return 0; }\n EOF\n-if { (eval echo configure:1266: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:1370: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   ac_cv_header_time=yes\n else\n@@ -1284,19 +1388,19 @@ fi\n \n \n echo $ac_n \"checking whether errno must be declared\"\"... $ac_c\" 1>&6\n-echo \"configure:1288: checking whether errno must be declared\" >&5\n+echo \"configure:1392: checking whether errno must be declared\" >&5\n if eval \"test \\\"`echo '$''{'libiberty_cv_declare_errno'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 1293 \"configure\"\n+#line 1397 \"configure\"\n #include \"confdefs.h\"\n #include <errno.h>\n int main() {\n int x = errno;\n ; return 0; }\n EOF\n-if { (eval echo configure:1300: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:1404: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   libiberty_cv_declare_errno=no\n else\n@@ -1374,12 +1478,12 @@ if test \"x\" = \"y\"; then\n   for ac_func in asprintf atexit basename bcmp bcopy bsearch bzero calloc clock\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:1378: checking for $ac_func\" >&5\n+echo \"configure:1482: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 1383 \"configure\"\n+#line 1487 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -1402,7 +1506,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:1406: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:1510: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -1429,12 +1533,12 @@ done\n   for ac_func in getcwd getpagesize index insque mkstemps memchr memcmp memcpy\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:1433: checking for $ac_func\" >&5\n+echo \"configure:1537: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 1438 \"configure\"\n+#line 1542 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -1457,7 +1561,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:1461: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:1565: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -1484,12 +1588,12 @@ done\n   for ac_func in memmove memset putenv random rename rindex sigsetmask\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:1488: checking for $ac_func\" >&5\n+echo \"configure:1592: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 1493 \"configure\"\n+#line 1597 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -1512,7 +1616,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:1516: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:1620: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -1539,12 +1643,12 @@ done\n   for ac_func in strcasecmp setenv strchr strdup strncasecmp strrchr strstr\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:1543: checking for $ac_func\" >&5\n+echo \"configure:1647: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 1548 \"configure\"\n+#line 1652 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -1567,7 +1671,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:1571: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:1675: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -1594,12 +1698,12 @@ done\n   for ac_func in strtod strtol strtoul tmpnam vasprintf vfprintf vprintf\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:1598: checking for $ac_func\" >&5\n+echo \"configure:1702: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 1603 \"configure\"\n+#line 1707 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -1622,7 +1726,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:1626: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:1730: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -1649,12 +1753,12 @@ done\n   for ac_func in vsprintf waitpid getrusage on_exit psignal strerror strsignal\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:1653: checking for $ac_func\" >&5\n+echo \"configure:1757: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 1658 \"configure\"\n+#line 1762 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -1677,7 +1781,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:1681: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:1785: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -1704,12 +1808,12 @@ done\n   for ac_func in sysconf times sbrk gettimeofday ffs\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:1708: checking for $ac_func\" >&5\n+echo \"configure:1812: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 1713 \"configure\"\n+#line 1817 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -1732,7 +1836,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:1736: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:1840: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -1929,7 +2033,7 @@ if test -z \"${setobjs}\"; then\n   # We haven't set the list of objects yet.  Use the standard autoconf\n   # tests.  This will only work if the compiler works.\n   echo $ac_n \"checking whether the C compiler ($CC $CFLAGS $LDFLAGS) works\"\"... $ac_c\" 1>&6\n-echo \"configure:1933: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) works\" >&5\n+echo \"configure:2037: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) works\" >&5\n \n ac_ext=c\n # CFLAGS is not in ac_cpp because -g, -O, etc. are not valid cpp options.\n@@ -1940,12 +2044,12 @@ cross_compiling=$ac_cv_prog_cc_cross\n \n cat > conftest.$ac_ext << EOF\n \n-#line 1944 \"configure\"\n+#line 2048 \"configure\"\n #include \"confdefs.h\"\n \n main(){return(0);}\n EOF\n-if { (eval echo configure:1949: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:2053: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   ac_cv_prog_cc_works=yes\n   # If we can't run a trivial program, we are probably using a cross compiler.\n   if (./conftest; exit) 2>/dev/null; then\n@@ -1971,19 +2075,19 @@ if test $ac_cv_prog_cc_works = no; then\n   { echo \"configure: error: installation or configuration problem: C compiler cannot create executables.\" 1>&2; exit 1; }\n fi\n echo $ac_n \"checking whether the C compiler ($CC $CFLAGS $LDFLAGS) is a cross-compiler\"\"... $ac_c\" 1>&6\n-echo \"configure:1975: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) is a cross-compiler\" >&5\n+echo \"configure:2079: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) is a cross-compiler\" >&5\n echo \"$ac_t\"\"$ac_cv_prog_cc_cross\" 1>&6\n cross_compiling=$ac_cv_prog_cc_cross\n \n   for ac_func in $funcs\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:1982: checking for $ac_func\" >&5\n+echo \"configure:2086: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 1987 \"configure\"\n+#line 2091 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -2006,7 +2110,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:2010: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:2114: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -2033,12 +2137,12 @@ done\n \n \n   echo $ac_n \"checking whether alloca needs Cray hooks\"\"... $ac_c\" 1>&6\n-echo \"configure:2037: checking whether alloca needs Cray hooks\" >&5\n+echo \"configure:2141: checking whether alloca needs Cray hooks\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_os_cray'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2042 \"configure\"\n+#line 2146 \"configure\"\n #include \"confdefs.h\"\n #if defined(CRAY) && ! defined(CRAY2)\n webecray\n@@ -2063,12 +2167,12 @@ echo \"$ac_t\"\"$ac_cv_os_cray\" 1>&6\n if test $ac_cv_os_cray = yes; then\n   for ac_func in _getb67 GETB67 getb67; do\n     echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:2067: checking for $ac_func\" >&5\n+echo \"configure:2171: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2072 \"configure\"\n+#line 2176 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -2091,7 +2195,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:2095: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:2199: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -2117,15 +2221,15 @@ fi\n fi\n \n echo $ac_n \"checking stack direction for C alloca\"\"... $ac_c\" 1>&6\n-echo \"configure:2121: checking stack direction for C alloca\" >&5\n+echo \"configure:2225: checking stack direction for C alloca\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_c_stack_direction'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   if test \"$cross_compiling\" = yes; then\n   ac_cv_c_stack_direction=0\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2129 \"configure\"\n+#line 2233 \"configure\"\n #include \"confdefs.h\"\n find_stack_direction ()\n {\n@@ -2144,7 +2248,7 @@ main ()\n   exit (find_stack_direction() < 0);\n }\n EOF\n-if { (eval echo configure:2148: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:2252: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   ac_cv_c_stack_direction=1\n else\n@@ -2165,20 +2269,20 @@ EOF\n \n \n   echo $ac_n \"checking for ANSI C header files\"\"... $ac_c\" 1>&6\n-echo \"configure:2169: checking for ANSI C header files\" >&5\n+echo \"configure:2273: checking for ANSI C header files\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_stdc'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2174 \"configure\"\n+#line 2278 \"configure\"\n #include \"confdefs.h\"\n #include <stdlib.h>\n #include <stdarg.h>\n #include <string.h>\n #include <float.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:2182: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:2286: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -2195,7 +2299,7 @@ rm -f conftest*\n if test $ac_cv_header_stdc = yes; then\n   # SunOS 4.x string.h does not declare mem*, contrary to ANSI.\n cat > conftest.$ac_ext <<EOF\n-#line 2199 \"configure\"\n+#line 2303 \"configure\"\n #include \"confdefs.h\"\n #include <string.h>\n EOF\n@@ -2213,7 +2317,7 @@ fi\n if test $ac_cv_header_stdc = yes; then\n   # ISC 2.0.2 stdlib.h does not declare free, contrary to ANSI.\n cat > conftest.$ac_ext <<EOF\n-#line 2217 \"configure\"\n+#line 2321 \"configure\"\n #include \"confdefs.h\"\n #include <stdlib.h>\n EOF\n@@ -2234,7 +2338,7 @@ if test \"$cross_compiling\" = yes; then\n   :\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2238 \"configure\"\n+#line 2342 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n #define ISLOWER(c) ('a' <= (c) && (c) <= 'z')\n@@ -2245,7 +2349,7 @@ if (XOR (islower (i), ISLOWER (i)) || toupper (i) != TOUPPER (i)) exit(2);\n exit (0); }\n \n EOF\n-if { (eval echo configure:2249: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:2353: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   :\n else\n@@ -2269,12 +2373,12 @@ EOF\n fi\n \n echo $ac_n \"checking for pid_t\"\"... $ac_c\" 1>&6\n-echo \"configure:2273: checking for pid_t\" >&5\n+echo \"configure:2377: checking for pid_t\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_type_pid_t'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2278 \"configure\"\n+#line 2382 \"configure\"\n #include \"confdefs.h\"\n #include <sys/types.h>\n #if STDC_HEADERS\n@@ -2303,17 +2407,17 @@ fi\n \n ac_safe=`echo \"vfork.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for vfork.h\"\"... $ac_c\" 1>&6\n-echo \"configure:2307: checking for vfork.h\" >&5\n+echo \"configure:2411: checking for vfork.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2312 \"configure\"\n+#line 2416 \"configure\"\n #include \"confdefs.h\"\n #include <vfork.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:2317: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:2421: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -2338,18 +2442,18 @@ else\n fi\n \n echo $ac_n \"checking for working vfork\"\"... $ac_c\" 1>&6\n-echo \"configure:2342: checking for working vfork\" >&5\n+echo \"configure:2446: checking for working vfork\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_vfork_works'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   if test \"$cross_compiling\" = yes; then\n   echo $ac_n \"checking for vfork\"\"... $ac_c\" 1>&6\n-echo \"configure:2348: checking for vfork\" >&5\n+echo \"configure:2452: checking for vfork\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_vfork'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2353 \"configure\"\n+#line 2457 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char vfork(); below.  */\n@@ -2372,7 +2476,7 @@ vfork();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:2376: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:2480: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_vfork=yes\"\n else\n@@ -2394,7 +2498,7 @@ fi\n ac_cv_func_vfork_works=$ac_cv_func_vfork\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2398 \"configure\"\n+#line 2502 \"configure\"\n #include \"confdefs.h\"\n /* Thanks to Paul Eggert for this test.  */\n #include <stdio.h>\n@@ -2489,7 +2593,7 @@ main() {\n   }\n }\n EOF\n-if { (eval echo configure:2493: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:2597: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   ac_cv_func_vfork_works=yes\n else\n@@ -2516,19 +2620,19 @@ fi\n   fi\n   for v in $vars; do\n     echo $ac_n \"checking for $v\"\"... $ac_c\" 1>&6\n-echo \"configure:2520: checking for $v\" >&5\n+echo \"configure:2624: checking for $v\" >&5\n     if eval \"test \\\"`echo '$''{'libiberty_cv_var_$v'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2525 \"configure\"\n+#line 2629 \"configure\"\n #include \"confdefs.h\"\n int *p;\n int main() {\n extern int $v; p = &$v;\n ; return 0; }\n EOF\n-if { (eval echo configure:2532: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:2636: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"libiberty_cv_var_$v=yes\"\n else\n@@ -2554,12 +2658,12 @@ EOF\n   for ac_func in $checkfuncs\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:2558: checking for $ac_func\" >&5\n+echo \"configure:2662: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2563 \"configure\"\n+#line 2667 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -2582,7 +2686,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:2586: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:2690: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -2612,17 +2716,17 @@ for ac_hdr in unistd.h\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n-echo \"configure:2616: checking for $ac_hdr\" >&5\n+echo \"configure:2720: checking for $ac_hdr\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2621 \"configure\"\n+#line 2725 \"configure\"\n #include \"confdefs.h\"\n #include <$ac_hdr>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:2626: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:2730: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -2651,12 +2755,12 @@ done\n for ac_func in getpagesize\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:2655: checking for $ac_func\" >&5\n+echo \"configure:2759: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2660 \"configure\"\n+#line 2764 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -2679,7 +2783,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:2683: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:2787: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -2704,15 +2808,15 @@ fi\n done\n \n echo $ac_n \"checking for working mmap\"\"... $ac_c\" 1>&6\n-echo \"configure:2708: checking for working mmap\" >&5\n+echo \"configure:2812: checking for working mmap\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_mmap_fixed_mapped'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   if test \"$cross_compiling\" = yes; then\n   ac_cv_func_mmap_fixed_mapped=no\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2716 \"configure\"\n+#line 2820 \"configure\"\n #include \"confdefs.h\"\n \n /* Thanks to Mike Haertel and Jim Avera for this test.\n@@ -2852,7 +2956,7 @@ main()\n }\n \n EOF\n-if { (eval echo configure:2856: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:2960: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   ac_cv_func_mmap_fixed_mapped=yes\n else\n@@ -2876,15 +2980,15 @@ fi\n \n \n echo $ac_n \"checking for working strncmp\"\"... $ac_c\" 1>&6\n-echo \"configure:2880: checking for working strncmp\" >&5\n+echo \"configure:2984: checking for working strncmp\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_strncmp_works'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   if test \"$cross_compiling\" = yes; then\n   ac_cv_func_strncmp_works=no\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2888 \"configure\"\n+#line 2992 \"configure\"\n #include \"confdefs.h\"\n \n /* Test by Jim Wilson and Kaveh Ghazi.\n@@ -2945,7 +3049,7 @@ main ()\n }\n \n EOF\n-if { (eval echo configure:2949: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:3053: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   ac_cv_func_strncmp_works=yes\n else\n@@ -3109,6 +3213,12 @@ s%@includedir@%$includedir%g\n s%@oldincludedir@%$oldincludedir%g\n s%@infodir@%$infodir%g\n s%@mandir@%$mandir%g\n+s%@MAINT@%$MAINT%g\n+s%@NOTMAINT@%$NOTMAINT%g\n+s%@MAKEINFO@%$MAKEINFO%g\n+s%@BUILD_INFO@%$BUILD_INFO%g\n+s%@PERL@%$PERL%g\n+s%@HAVE_PERL@%$HAVE_PERL%g\n s%@host@%$host%g\n s%@host_alias@%$host_alias%g\n s%@host_cpu@%$host_cpu%g"}, {"sha": "0f1427a4e93c42d79d54c333aaa741220ede9cee", "filename": "libiberty/configure.in", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.in?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -26,6 +26,51 @@ else\n fi\n AC_CONFIG_AUX_DIR($libiberty_topdir)\n \n+dnl Very limited version of automake's enable-maintainer-mode\n+\n+AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])\n+  dnl maintainer-mode is disabled by default\n+  AC_ARG_ENABLE(maintainer-mode,\n+[  --enable-maintainer-mode\n+                          enable make rules and dependencies not useful\n+                          (and sometimes confusing) to the casual installer],\n+      maintainer_mode=$enableval,\n+      maintainer_mode=no)\n+\n+AC_MSG_RESULT($maintainer_mode)\n+\n+if test \"$maintainer_mode\" = \"yes\"; then\n+  MAINT=''\n+  NOTMAINT='#'\n+else\n+  MAINT='#'\n+  NOTMAINT=''\n+fi\n+AC_SUBST(MAINT)dnl\n+AC_SUBST(NOTMAINT)dnl\n+\n+# Do we have a single-tree copy of texinfo?\n+if test -f $srcdir/../texinfo/Makefile.in; then\n+  MAKEINFO='$(objdir)/../texinfo/makeinfo/makeinfo'\n+  AC_MSG_RESULT([Using makeinfo from the unified source tree.])\n+else\n+  AC_CHECK_PROG(MAKEINFO, makeinfo, makeinfo, )\n+fi\n+if test x\"$MAKEINFO\" = x\"\"; then\n+  BUILD_INFO=\n+else\n+  BUILD_INFO=info\n+fi\n+AC_SUBST(BUILD_INFO)\n+\n+AC_CHECK_PROG(PERL, perl, perl, )\n+if test x\"$PERL\" = x\"\"; then\n+  HAVE_PERL='#'\n+else\n+  HAVE_PERL=''\n+fi\n+AC_SUBST(HAVE_PERL)\n+\n AC_CANONICAL_HOST\n \n dnl When we start using automake:"}, {"sha": "44dbd7df251bb93698263d455e6355f3985ae95b", "filename": "libiberty/copying-lib.texi", "status": "added", "additions": 565, "deletions": 0, "changes": 565, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fcopying-lib.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fcopying-lib.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcopying-lib.texi?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -0,0 +1,565 @@\n+@node Library Copying,,,Licenses\n+@appendixsec GNU LESSER GENERAL PUBLIC LICENSE\n+\n+@cindex LGPL, Lesser General Public License\n+@center Version 2.1, February 1999\n+\n+@display\n+Copyright @copyright{} 1991, 1999 Free Software Foundation, Inc.\n+59 Temple Place -- Suite 330, Boston, MA 02111-1307, USA\n+\n+Everyone is permitted to copy and distribute verbatim copies\n+of this license document, but changing it is not allowed.\n+\n+[This is the first released version of the Lesser GPL.  It also counts\n+as the successor of the GNU Library Public License, version 2, hence the\n+version number 2.1.]\n+@end display\n+\n+@appendixsubsec Preamble\n+\n+  The licenses for most software are designed to take away your\n+freedom to share and change it.  By contrast, the GNU General Public\n+Licenses are intended to guarantee your freedom to share and change\n+free software---to make sure the software is free for all its users.\n+\n+  This license, the Lesser General Public License, applies to some\n+specially designated software---typically libraries---of the Free\n+Software Foundation and other authors who decide to use it.  You can use\n+it too, but we suggest you first think carefully about whether this\n+license or the ordinary General Public License is the better strategy to\n+use in any particular case, based on the explanations below.\n+\n+  When we speak of free software, we are referring to freedom of use,\n+not price.  Our General Public Licenses are designed to make sure that\n+you have the freedom to distribute copies of free software (and charge\n+for this service if you wish); that you receive source code or can get\n+it if you want it; that you can change the software and use pieces of it\n+in new free programs; and that you are informed that you can do these\n+things.\n+\n+  To protect your rights, we need to make restrictions that forbid\n+distributors to deny you these rights or to ask you to surrender these\n+rights.  These restrictions translate to certain responsibilities for\n+you if you distribute copies of the library or if you modify it.\n+\n+  For example, if you distribute copies of the library, whether gratis\n+or for a fee, you must give the recipients all the rights that we gave\n+you.  You must make sure that they, too, receive or can get the source\n+code.  If you link other code with the library, you must provide\n+complete object files to the recipients, so that they can relink them\n+with the library after making changes to the library and recompiling\n+it.  And you must show them these terms so they know their rights.\n+\n+  We protect your rights with a two-step method: (1) we copyright the\n+library, and (2) we offer you this license, which gives you legal\n+permission to copy, distribute and/or modify the library.\n+\n+  To protect each distributor, we want to make it very clear that\n+there is no warranty for the free library.  Also, if the library is\n+modified by someone else and passed on, the recipients should know\n+that what they have is not the original version, so that the original\n+author's reputation will not be affected by problems that might be\n+introduced by others.\n+\n+  Finally, software patents pose a constant threat to the existence of\n+any free program.  We wish to make sure that a company cannot\n+effectively restrict the users of a free program by obtaining a\n+restrictive license from a patent holder.  Therefore, we insist that\n+any patent license obtained for a version of the library must be\n+consistent with the full freedom of use specified in this license.\n+\n+  Most GNU software, including some libraries, is covered by the\n+ordinary GNU General Public License.  This license, the GNU Lesser\n+General Public License, applies to certain designated libraries, and\n+is quite different from the ordinary General Public License.  We use\n+this license for certain libraries in order to permit linking those\n+libraries into non-free programs.\n+\n+  When a program is linked with a library, whether statically or using\n+a shared library, the combination of the two is legally speaking a\n+combined work, a derivative of the original library.  The ordinary\n+General Public License therefore permits such linking only if the\n+entire combination fits its criteria of freedom.  The Lesser General\n+Public License permits more lax criteria for linking other code with\n+the library.\n+\n+  We call this license the @dfn{Lesser} General Public License because it\n+does @emph{Less} to protect the user's freedom than the ordinary General\n+Public License.  It also provides other free software developers Less\n+of an advantage over competing non-free programs.  These disadvantages\n+are the reason we use the ordinary General Public License for many\n+libraries.  However, the Lesser license provides advantages in certain\n+special circumstances.\n+\n+  For example, on rare occasions, there may be a special need to\n+encourage the widest possible use of a certain library, so that it becomes\n+a de-facto standard.  To achieve this, non-free programs must be\n+allowed to use the library.  A more frequent case is that a free\n+library does the same job as widely used non-free libraries.  In this\n+case, there is little to gain by limiting the free library to free\n+software only, so we use the Lesser General Public License.\n+\n+  In other cases, permission to use a particular library in non-free\n+programs enables a greater number of people to use a large body of\n+free software.  For example, permission to use the GNU C Library in\n+non-free programs enables many more people to use the whole GNU\n+operating system, as well as its variant, the GNU/Linux operating\n+system.\n+\n+  Although the Lesser General Public License is Less protective of the\n+users' freedom, it does ensure that the user of a program that is\n+linked with the Library has the freedom and the wherewithal to run\n+that program using a modified version of the Library.\n+\n+  The precise terms and conditions for copying, distribution and\n+modification follow.  Pay close attention to the difference between a\n+``work based on the library'' and a ``work that uses the library''.  The\n+former contains code derived from the library, whereas the latter must\n+be combined with the library in order to run.\n+\n+@iftex\n+@appendixsubsec TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n+@end iftex\n+@ifinfo\n+@center GNU LESSER GENERAL PUBLIC LICENSE\n+@center TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n+@end ifinfo\n+\n+@enumerate 0\n+@item\n+This License Agreement applies to any software library or other program\n+which contains a notice placed by the copyright holder or other\n+authorized party saying it may be distributed under the terms of this\n+Lesser General Public License (also called ``this License'').  Each\n+licensee is addressed as ``you''.\n+\n+  A ``library'' means a collection of software functions and/or data\n+prepared so as to be conveniently linked with application programs\n+(which use some of those functions and data) to form executables.\n+\n+  The ``Library'', below, refers to any such software library or work\n+which has been distributed under these terms.  A ``work based on the\n+Library'' means either the Library or any derivative work under\n+copyright law: that is to say, a work containing the Library or a\n+portion of it, either verbatim or with modifications and/or translated\n+straightforwardly into another language.  (Hereinafter, translation is\n+included without limitation in the term ``modification''.)\n+\n+  ``Source code'' for a work means the preferred form of the work for\n+making modifications to it.  For a library, complete source code means\n+all the source code for all modules it contains, plus any associated\n+interface definition files, plus the scripts used to control compilation\n+and installation of the library.\n+\n+  Activities other than copying, distribution and modification are not\n+covered by this License; they are outside its scope.  The act of\n+running a program using the Library is not restricted, and output from\n+such a program is covered only if its contents constitute a work based\n+on the Library (independent of the use of the Library in a tool for\n+writing it).  Whether that is true depends on what the Library does\n+and what the program that uses the Library does.\n+\n+@item\n+You may copy and distribute verbatim copies of the Library's\n+complete source code as you receive it, in any medium, provided that\n+you conspicuously and appropriately publish on each copy an\n+appropriate copyright notice and disclaimer of warranty; keep intact\n+all the notices that refer to this License and to the absence of any\n+warranty; and distribute a copy of this License along with the\n+Library.\n+\n+  You may charge a fee for the physical act of transferring a copy,\n+and you may at your option offer warranty protection in exchange for a\n+fee.\n+\n+@item\n+You may modify your copy or copies of the Library or any portion\n+of it, thus forming a work based on the Library, and copy and\n+distribute such modifications or work under the terms of Section 1\n+above, provided that you also meet all of these conditions:\n+\n+@enumerate a\n+@item\n+The modified work must itself be a software library.\n+\n+@item\n+You must cause the files modified to carry prominent notices\n+stating that you changed the files and the date of any change.\n+\n+@item\n+You must cause the whole of the work to be licensed at no\n+charge to all third parties under the terms of this License.\n+\n+@item\n+If a facility in the modified Library refers to a function or a\n+table of data to be supplied by an application program that uses\n+the facility, other than as an argument passed when the facility\n+is invoked, then you must make a good faith effort to ensure that,\n+in the event an application does not supply such function or\n+table, the facility still operates, and performs whatever part of\n+its purpose remains meaningful.\n+\n+(For example, a function in a library to compute square roots has\n+a purpose that is entirely well-defined independent of the\n+application.  Therefore, Subsection 2d requires that any\n+application-supplied function or table used by this function must\n+be optional: if the application does not supply it, the square\n+root function must still compute square roots.)\n+@end enumerate\n+\n+These requirements apply to the modified work as a whole.  If\n+identifiable sections of that work are not derived from the Library,\n+and can be reasonably considered independent and separate works in\n+themselves, then this License, and its terms, do not apply to those\n+sections when you distribute them as separate works.  But when you\n+distribute the same sections as part of a whole which is a work based\n+on the Library, the distribution of the whole must be on the terms of\n+this License, whose permissions for other licensees extend to the\n+entire whole, and thus to each and every part regardless of who wrote\n+it.\n+\n+Thus, it is not the intent of this section to claim rights or contest\n+your rights to work written entirely by you; rather, the intent is to\n+exercise the right to control the distribution of derivative or\n+collective works based on the Library.\n+\n+In addition, mere aggregation of another work not based on the Library\n+with the Library (or with a work based on the Library) on a volume of\n+a storage or distribution medium does not bring the other work under\n+the scope of this License.\n+\n+@item\n+You may opt to apply the terms of the ordinary GNU General Public\n+License instead of this License to a given copy of the Library.  To do\n+this, you must alter all the notices that refer to this License, so\n+that they refer to the ordinary GNU General Public License, version 2,\n+instead of to this License.  (If a newer version than version 2 of the\n+ordinary GNU General Public License has appeared, then you can specify\n+that version instead if you wish.)  Do not make any other change in\n+these notices.\n+\n+  Once this change is made in a given copy, it is irreversible for\n+that copy, so the ordinary GNU General Public License applies to all\n+subsequent copies and derivative works made from that copy.\n+\n+  This option is useful when you wish to copy part of the code of\n+the Library into a program that is not a library.\n+\n+@item\n+You may copy and distribute the Library (or a portion or\n+derivative of it, under Section 2) in object code or executable form\n+under the terms of Sections 1 and 2 above provided that you accompany\n+it with the complete corresponding machine-readable source code, which\n+must be distributed under the terms of Sections 1 and 2 above on a\n+medium customarily used for software interchange.\n+\n+  If distribution of object code is made by offering access to copy\n+from a designated place, then offering equivalent access to copy the\n+source code from the same place satisfies the requirement to\n+distribute the source code, even though third parties are not\n+compelled to copy the source along with the object code.\n+\n+@item\n+A program that contains no derivative of any portion of the\n+Library, but is designed to work with the Library by being compiled or\n+linked with it, is called a ``work that uses the Library''.  Such a\n+work, in isolation, is not a derivative work of the Library, and\n+therefore falls outside the scope of this License.\n+\n+  However, linking a ``work that uses the Library'' with the Library\n+creates an executable that is a derivative of the Library (because it\n+contains portions of the Library), rather than a ``work that uses the\n+library''.  The executable is therefore covered by this License.\n+Section 6 states terms for distribution of such executables.\n+\n+  When a ``work that uses the Library'' uses material from a header file\n+that is part of the Library, the object code for the work may be a\n+derivative work of the Library even though the source code is not.\n+Whether this is true is especially significant if the work can be\n+linked without the Library, or if the work is itself a library.  The\n+threshold for this to be true is not precisely defined by law.\n+\n+  If such an object file uses only numerical parameters, data\n+structure layouts and accessors, and small macros and small inline\n+functions (ten lines or less in length), then the use of the object\n+file is unrestricted, regardless of whether it is legally a derivative\n+work.  (Executables containing this object code plus portions of the\n+Library will still fall under Section 6.)\n+\n+  Otherwise, if the work is a derivative of the Library, you may\n+distribute the object code for the work under the terms of Section 6.\n+Any executables containing that work also fall under Section 6,\n+whether or not they are linked directly with the Library itself.\n+\n+@item\n+As an exception to the Sections above, you may also combine or\n+link a ``work that uses the Library'' with the Library to produce a\n+work containing portions of the Library, and distribute that work\n+under terms of your choice, provided that the terms permit\n+modification of the work for the customer's own use and reverse\n+engineering for debugging such modifications.\n+\n+  You must give prominent notice with each copy of the work that the\n+Library is used in it and that the Library and its use are covered by\n+this License.  You must supply a copy of this License.  If the work\n+during execution displays copyright notices, you must include the\n+copyright notice for the Library among them, as well as a reference\n+directing the user to the copy of this License.  Also, you must do one\n+of these things:\n+\n+@enumerate a\n+@item\n+Accompany the work with the complete corresponding\n+machine-readable source code for the Library including whatever\n+changes were used in the work (which must be distributed under\n+Sections 1 and 2 above); and, if the work is an executable linked\n+with the Library, with the complete machine-readable ``work that\n+uses the Library'', as object code and/or source code, so that the\n+user can modify the Library and then relink to produce a modified\n+executable containing the modified Library.  (It is understood\n+that the user who changes the contents of definitions files in the\n+Library will not necessarily be able to recompile the application\n+to use the modified definitions.)\n+\n+@item\n+Use a suitable shared library mechanism for linking with the Library.  A\n+suitable mechanism is one that (1) uses at run time a copy of the\n+library already present on the user's computer system, rather than\n+copying library functions into the executable, and (2) will operate\n+properly with a modified version of the library, if the user installs\n+one, as long as the modified version is interface-compatible with the\n+version that the work was made with.\n+\n+@item\n+Accompany the work with a written offer, valid for at\n+least three years, to give the same user the materials\n+specified in Subsection 6a, above, for a charge no more\n+than the cost of performing this distribution.\n+\n+@item\n+If distribution of the work is made by offering access to copy\n+from a designated place, offer equivalent access to copy the above\n+specified materials from the same place.\n+\n+@item\n+Verify that the user has already received a copy of these\n+materials or that you have already sent this user a copy.\n+@end enumerate\n+\n+  For an executable, the required form of the ``work that uses the\n+Library'' must include any data and utility programs needed for\n+reproducing the executable from it.  However, as a special exception,\n+the materials to be distributed need not include anything that is\n+normally distributed (in either source or binary form) with the major\n+components (compiler, kernel, and so on) of the operating system on\n+which the executable runs, unless that component itself accompanies the\n+executable.\n+\n+  It may happen that this requirement contradicts the license\n+restrictions of other proprietary libraries that do not normally\n+accompany the operating system.  Such a contradiction means you cannot\n+use both them and the Library together in an executable that you\n+distribute.\n+\n+@item\n+You may place library facilities that are a work based on the\n+Library side-by-side in a single library together with other library\n+facilities not covered by this License, and distribute such a combined\n+library, provided that the separate distribution of the work based on\n+the Library and of the other library facilities is otherwise\n+permitted, and provided that you do these two things:\n+\n+@enumerate a\n+@item\n+Accompany the combined library with a copy of the same work\n+based on the Library, uncombined with any other library\n+facilities.  This must be distributed under the terms of the\n+Sections above.\n+\n+@item\n+Give prominent notice with the combined library of the fact\n+that part of it is a work based on the Library, and explaining\n+where to find the accompanying uncombined form of the same work.\n+@end enumerate\n+\n+@item\n+You may not copy, modify, sublicense, link with, or distribute\n+the Library except as expressly provided under this License.  Any\n+attempt otherwise to copy, modify, sublicense, link with, or\n+distribute the Library is void, and will automatically terminate your\n+rights under this License.  However, parties who have received copies,\n+or rights, from you under this License will not have their licenses\n+terminated so long as such parties remain in full compliance.\n+\n+@item\n+You are not required to accept this License, since you have not\n+signed it.  However, nothing else grants you permission to modify or\n+distribute the Library or its derivative works.  These actions are\n+prohibited by law if you do not accept this License.  Therefore, by\n+modifying or distributing the Library (or any work based on the\n+Library), you indicate your acceptance of this License to do so, and\n+all its terms and conditions for copying, distributing or modifying\n+the Library or works based on it.\n+\n+@item\n+Each time you redistribute the Library (or any work based on the\n+Library), the recipient automatically receives a license from the\n+original licensor to copy, distribute, link with or modify the Library\n+subject to these terms and conditions.  You may not impose any further\n+restrictions on the recipients' exercise of the rights granted herein.\n+You are not responsible for enforcing compliance by third parties with\n+this License.\n+\n+@item\n+If, as a consequence of a court judgment or allegation of patent\n+infringement or for any other reason (not limited to patent issues),\n+conditions are imposed on you (whether by court order, agreement or\n+otherwise) that contradict the conditions of this License, they do not\n+excuse you from the conditions of this License.  If you cannot\n+distribute so as to satisfy simultaneously your obligations under this\n+License and any other pertinent obligations, then as a consequence you\n+may not distribute the Library at all.  For example, if a patent\n+license would not permit royalty-free redistribution of the Library by\n+all those who receive copies directly or indirectly through you, then\n+the only way you could satisfy both it and this License would be to\n+refrain entirely from distribution of the Library.\n+\n+If any portion of this section is held invalid or unenforceable under any\n+particular circumstance, the balance of the section is intended to apply,\n+and the section as a whole is intended to apply in other circumstances.\n+\n+It is not the purpose of this section to induce you to infringe any\n+patents or other property right claims or to contest validity of any\n+such claims; this section has the sole purpose of protecting the\n+integrity of the free software distribution system which is\n+implemented by public license practices.  Many people have made\n+generous contributions to the wide range of software distributed\n+through that system in reliance on consistent application of that\n+system; it is up to the author/donor to decide if he or she is willing\n+to distribute software through any other system and a licensee cannot\n+impose that choice.\n+\n+This section is intended to make thoroughly clear what is believed to\n+be a consequence of the rest of this License.\n+\n+@item\n+If the distribution and/or use of the Library is restricted in\n+certain countries either by patents or by copyrighted interfaces, the\n+original copyright holder who places the Library under this License may add\n+an explicit geographical distribution limitation excluding those countries,\n+so that distribution is permitted only in or among countries not thus\n+excluded.  In such case, this License incorporates the limitation as if\n+written in the body of this License.\n+\n+@item\n+The Free Software Foundation may publish revised and/or new\n+versions of the Lesser General Public License from time to time.\n+Such new versions will be similar in spirit to the present version,\n+but may differ in detail to address new problems or concerns.\n+\n+Each version is given a distinguishing version number.  If the Library\n+specifies a version number of this License which applies to it and\n+``any later version'', you have the option of following the terms and\n+conditions either of that version or of any later version published by\n+the Free Software Foundation.  If the Library does not specify a\n+license version number, you may choose any version ever published by\n+the Free Software Foundation.\n+\n+@item\n+If you wish to incorporate parts of the Library into other free\n+programs whose distribution conditions are incompatible with these,\n+write to the author to ask for permission.  For software which is\n+copyrighted by the Free Software Foundation, write to the Free\n+Software Foundation; we sometimes make exceptions for this.  Our\n+decision will be guided by the two goals of preserving the free status\n+of all derivatives of our free software and of promoting the sharing\n+and reuse of software generally.\n+\n+@iftex\n+@heading NO WARRANTY\n+@end iftex\n+@ifinfo\n+@center NO WARRANTY\n+@end ifinfo\n+\n+@item\n+BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\n+WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\n+EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\n+OTHER PARTIES PROVIDE THE LIBRARY ``AS IS'' WITHOUT WARRANTY OF ANY\n+KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\n+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\n+LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\n+THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n+\n+@item\n+IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\n+WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\n+AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\n+FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\n+CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\n+LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\n+RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\n+FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\n+SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+DAMAGES.\n+@end enumerate\n+\n+@iftex\n+@heading END OF TERMS AND CONDITIONS\n+@end iftex\n+@ifinfo\n+@center END OF TERMS AND CONDITIONS\n+@end ifinfo\n+\n+@page\n+@appendixsubsec How to Apply These Terms to Your New Libraries\n+\n+  If you develop a new library, and you want it to be of the greatest\n+possible use to the public, we recommend making it free software that\n+everyone can redistribute and change.  You can do so by permitting\n+redistribution under these terms (or, alternatively, under the terms of the\n+ordinary General Public License).\n+\n+  To apply these terms, attach the following notices to the library.  It is\n+safest to attach them to the start of each source file to most effectively\n+convey the exclusion of warranty; and each file should have at least the\n+``copyright'' line and a pointer to where the full notice is found.\n+\n+@smallexample\n+@var{one line to give the library's name and an idea of what it does.}\n+Copyright (C) @var{year}  @var{name of author}\n+\n+This library is free software; you can redistribute it and/or modify it\n+under the terms of the GNU Lesser General Public License as published by\n+the Free Software Foundation; either version 2.1 of the License, or (at\n+your option) any later version.\n+\n+This library is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with this library; if not, write to the Free Software\n+Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,\n+USA.\n+@end smallexample\n+\n+Also add information on how to contact you by electronic and paper mail.\n+\n+You should also get your employer (if you work as a programmer) or your\n+school, if any, to sign a ``copyright disclaimer'' for the library, if\n+necessary.  Here is a sample; alter the names:\n+\n+@smallexample\n+Yoyodyne, Inc., hereby disclaims all copyright interest in the library\n+`Frob' (a library for tweaking knobs) written by James Random Hacker.\n+\n+@var{signature of Ty Coon}, 1 April 1990\n+Ty Coon, President of Vice\n+@end smallexample\n+\n+That's all there is to it!"}, {"sha": "e2ea020d2055bf520446bf33a36ab13cc69e626c", "filename": "libiberty/functions.texi", "status": "added", "additions": 515, "deletions": 0, "changes": 515, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -0,0 +1,515 @@\n+@c Automatically generated from *.c and others (the comments before\n+@c each entry tell you which file and where in that file).  DO NOT EDIT!\n+@c Edit the *.c files, configure with --enable-maintainer-mode,\n+@c and let gather-docs build you a new copy.\n+\n+@c alloca.c:26\n+@deftypefn Replacement void* alloca (size_t)\n+\n+This function allocates memory which will be automatically reclaimed\n+after the procedure exits.  The @libib{} implementation does not free\n+the memory immediately but will do so eventually during subsequent\n+calls to this function.  Memory is allocated using @code{xmalloc} under\n+normal circumstances.\n+\n+The header file @file{alloca-conf.h} can be used in conjunction with the\n+GNU Autoconf test @code{AC_FUNC_ALLOCA} to test for and properly make\n+available this function.  The @code{AC_FUNC_ALLOCA} test requires that\n+client code use a block of preprocessor code to be safe (see the Autoconf\n+manual for more); this header incorporates that logic and more, including\n+the possibility of a GCC builtin function.\n+\n+@end deftypefn\n+\n+@c atexit.c:6\n+@deftypefn Supplemental int atexit (void (*@var{f})())\n+\n+Causes function @var{f} to be called at exit.  Returns 0.\n+\n+@end deftypefn\n+\n+@c basename.c:6\n+@deftypefn Supplemental char* basename (const char *@var{name})\n+\n+Returns a pointer to the last component of pathname @var{name}.\n+Behavior is undefined if the pathname ends in a directory separator.\n+\n+@end deftypefn\n+\n+@c bcmp.c:6\n+@deftypefn Supplemental int bcmp (char *@var{x}, char *@var{y}, int @var{count})\n+\n+Compares the first @var{count} bytes of two areas of memory.  Returns\n+zero if they are the same, non-zero otherwise.  Returns zero if\n+@var{count} is zero.  A non-zero result only indicates a difference,\n+it does not indicate any sorting order (say, by having a positive\n+result mean @var{x} sorts before @var{y}).\n+\n+@end deftypefn\n+\n+@c bcopy.c:3\n+@deftypefn Supplemental void bcopy (char *@var{in}, char *@var{out}, int @var{length})\n+\n+Copies @var{length} bytes from memory region @var{in} to region\n+@var{out}.  The use of @code{bcopy} is deprecated in new programs.\n+\n+@end deftypefn\n+\n+@c bsearch.c:33\n+@deftypefn Supplemental void* bsearch (const void *@var{key}, const void *@var{base}, size_t @var{nmemb}, size_t @var{size}, int (*@var{compar})(const void *, const void *))\n+\n+Performs a search over an array of @var{nmemb} elements pointed to by\n+@var{base} for a member that matches the object pointed to by @var{key}.\n+The size of each member is specified by @var{size}.  The array contents\n+should be sorted in ascending order according to the @var{compar}\n+comparison function.  This routine should take two arguments pointing to\n+the @var{key} and to an array member, in that order, and should return an\n+integer less than, equal to, or greater than zero if the @var{key} object\n+is respecitively less than, matching, or greater than the array member.\n+\n+@end deftypefn\n+\n+@c bzero.c:6\n+@deftypefn Supplemental void bzero (char *@var{mem}, int @var{count})\n+\n+Zeros @var{count} bytes starting at @var{mem}.  Use if this function\n+is deprecated in favor of @code{memset}.\n+\n+@end deftypefn\n+\n+@c calloc.c:6\n+@deftypefn Supplemental void* calloc (size_t @var{nelem}, size_t @var{elsize})\n+\n+Uses @code{malloc} to allocate storage for @var{nelem} objects of\n+@var{elsize} bytes each, then zeros the memory.\n+\n+@end deftypefn\n+\n+@c clock.c:27\n+@deftypefn Supplemental long clock ()\n+\n+Returns an approximation of the CPU time used by the process as a\n+@code{clock_t}; divide this number by @samp{CLOCKS_PER_SEC} to get the\n+number of seconds used.\n+\n+@end deftypefn\n+\n+@c strerror.c:566\n+@deftypefn Replacement int errno_max (void)\n+\n+Returns the maximum @code{errno} value for which a corresponding\n+symbolic name or message is available.  Note that in the case where we\n+use the @code{sys_errlist} supplied by the system, it is possible for\n+there to be more symbolic names than messages, or vice versa.  In\n+fact, the manual page for @code{perror(3C)} explicitly warns that one\n+should check the size of the table (@code{sys_nerr}) before indexing\n+it, since new error codes may be added to the system before they are\n+added to the table.  Thus @code{sys_nerr} might be smaller than value\n+implied by the largest @code{errno} value defined in @file{errno.h}.\n+\n+We return the maximum value that can be used to obtain a meaningful\n+symbolic name or message.\n+\n+@end deftypefn\n+\n+@c getcwd.c:6\n+@deftypefn Supplemental char* getcwd (char *@var{pathname}, @var{len})\n+\n+Copy the absolute pathname for the current working directory into\n+@var{pathname}, which is assumed to point to a buffer of at least\n+@var{len} bytes, and return a pointer to the buffer.  If the current\n+directory's path doesn't fit in @var{len} characters, the result is\n+NULL and @var{errno} is set.  If @var{pathname} is a null pointer,\n+@code{getcwd} will obtain @var{len} bytes of space using\n+@code{malloc}.\n+\n+@end deftypefn\n+\n+@c getpagesize.c:5\n+@deftypefn Supplemental int getpagesize ()\n+\n+Returns the number of bytes in a page of memory.  This is the\n+granularity of many of the system memory management routines.  No\n+guarantee is made as to whether or not it is the same as the basic\n+memory management hardware page size.\n+\n+@end deftypefn\n+\n+@c getpwd.c:5\n+@deftypefn Supplemental char* getpwd ()\n+\n+Returns the current working directory.  This implementation caches the\n+result on the assumption that the process will not call @code{chdir}\n+between calls to @code{getpwd}.\n+\n+@end deftypefn\n+\n+@c index.c:5\n+@deftypefn Supplemental char* index (char *@var{s}, int @var{c})\n+\n+Returns a pointer to the first occurance of the character @var{c} in\n+the string @var{s}, or NULL if not found.  The use of @code{index} is\n+deprecated in new programs in favor of @code{strchr}.\n+\n+@end deftypefn\n+\n+@c memchr.c:3\n+@deftypefn Supplemental void* memchr (const void *@var{s}, int @var{c}, size_t @var{n})\n+\n+This function searches memory starting at @code{*}@var{src} for the\n+character @var{c}.  The search only ends with the first occurrence of\n+@var{c}, or after @var{length} characters; in particular, a null\n+character does not terminate the search.  If the character @var{c} is\n+found within @var{length} characters of @code{*}@var{src}, a pointer\n+to the character is returned. If @var{c} is not found, then NULL is\n+returned.\n+\n+@end deftypefn\n+\n+@c memcmp.c:6\n+@deftypefn Supplemental int memcmp (const void *@var{x}, const void *@var{y}, size_t @var{count})\n+\n+Compares the first @var{count} bytes of two areas of memory.  Returns\n+zero if they are the same, a value less than zero if @var{x} is\n+lexically less than @var{y}, or a value greater than zero if @var{x}\n+is lexically greater than @var{y}.  Note that lexical order is determined\n+as if comparing unsigned char arrays.\n+\n+@end deftypefn\n+\n+@c memcpy.c:6\n+@deftypefn Supplemental void* memcpy (void *@var{out}, const void *@var{in}, size_t @var{length})\n+\n+Copies @var{length} bytes from memory region @var{in} to region\n+@var{out}.  Returns a pointer to @var{out}.\n+\n+@end deftypefn\n+\n+@c memmove.c:6\n+@deftypefn Supplemental void* memmove (void *@var{from}, const void *@var{to}, size_t @var{count})\n+\n+Copies @var{count} bytes from memory area @var{from} to memory area\n+@var{to}, returning a pointer to @var{to}.\n+\n+@end deftypefn\n+\n+@c memset.c:6\n+@deftypefn Supplemental void* memset (void *@var{s}, int @var{c}, size_t @var{count})\n+\n+Sets the first @var{count} bytes of @var{s} to the constant byte\n+@var{c}, returning a pointer to @var{s}.\n+\n+@end deftypefn\n+\n+@c putenv.c:21\n+@deftypefn Supplemental int putenv (const char *@var{string})\n+\n+Uses @code{setenv} or @code{unsetenv} to put @var{string} into\n+the environment or remove it.  If @var{string} is of the form\n+@samp{name=value} the string is added; if no `=' is present the\n+name is unset/removed.\n+\n+@end deftypefn\n+\n+@c rename.c:6\n+@deftypefn Supplemental int rename (const char *@var{old}, const char *@var{new})\n+\n+Renames a file from @var{old} to @var{new}.  If @var{new} already\n+exists, it is removed.\n+\n+@end deftypefn\n+\n+@c rindex.c:5\n+@deftypefn Supplemental char* rindex (const char *@var{s}, int @var{c})\n+\n+Returns a pointer to the last occurance of the character @var{c} in\n+the string @var{s}, or NULL if not found.  The use of @code{rindex} is\n+deprecated in new programs in favor of @code{strrchr}.\n+\n+@end deftypefn\n+\n+@c setenv.c:22\n+@deftypefn Supplemental int setenv (const char *@var{name}, const char *@var{value}, int @var{overwrite})\n+@deftypefnx Supplemental void unsetenv (const char *@var{name})\n+\n+@code{setenv} adds @var{name} to the environment with value\n+@var{value}.  If the name was already present in the environment,\n+the new value will be stored only if @var{overwrite} is non-zero.\n+The companion @code{unsetenv} function removes @var{name} from the\n+environment.  This implementation is not safe for multithreaded code.\n+\n+@end deftypefn\n+\n+@c sigsetmask.c:8\n+@deftypefn Supplemental int sigsetmask (int @var{set})\n+\n+Sets the signal mask to the one provided in @var{set} and returns\n+the old mask (which, for libiberty's implementation, will always\n+be the value @code{1}).\n+\n+@end deftypefn\n+\n+@c strcasecmp.c:15\n+@deftypefn Supplemental int strcasecmp (const char *@var{s1}, const char *@var{s2})\n+\n+A case-insensitive @code{strcmp}.\n+\n+@end deftypefn\n+\n+@c strchr.c:6\n+@deftypefn Supplemental char* strchr (const char *@var{s}, int @var{c})\n+\n+Returns a pointer to the first occurance of the character @var{c} in\n+the string @var{s}, or NULL if not found.  If @var{c} is itself the\n+null character, the results are undefined.\n+\n+@end deftypefn\n+\n+@c strdup.c:3\n+@deftypefn Supplemental char* strdup (const char *@var{s})\n+\n+Returns a pointer to a copy of @var{s} in memory obtained from\n+@code{malloc}, or NULL if insufficient memory was available.\n+\n+@end deftypefn\n+\n+@c strerror.c:670\n+@deftypefn Replacement const char* strerrno (int @var{errnum})\n+\n+Given an error number returned from a system call (typically returned\n+in @code{errno}), returns a pointer to a string containing the\n+symbolic name of that error number, as found in @file{errno.h}.\n+\n+If the supplied error number is within the valid range of indices for\n+symbolic names, but no name is available for the particular error\n+number, then returns the string @samp{\"Error NUM\"}, where NUM is the\n+error number.\n+\n+If the supplied error number is not within the range of valid\n+indices, then returns NULL.\n+\n+The contents of the location pointed to are only guaranteed to be\n+valid until the next call to strerrno.\n+\n+@end deftypefn\n+\n+@c strerror.c:602\n+@deftypefn Replacement char* strerror (int @var{errnoval})\n+\n+Maps an @code{errno} number to an error message string, the contents\n+of which are implementation defined.  On systems which have the\n+external variables @code{sys_nerr} and @code{sys_errlist}, these\n+strings will be the same as the ones used by @code{perror}.\n+\n+If the supplied error number is within the valid range of indices for\n+the @code{sys_errlist}, but no message is available for the particular\n+error number, then returns the string @samp{\"Error NUM\"}, where NUM is\n+the error number.\n+\n+If the supplied error number is not a valid index into\n+@code{sys_errlist}, returns NULL.\n+\n+The returned string is only guaranteed to be valid only until the\n+next call to @code{strerror}.\n+\n+@end deftypefn\n+\n+@c strncasecmp.c:15\n+@deftypefn Supplemental int strncasecmp (const char *@var{s1}, const char *@var{s2})\n+\n+A case-insensitive @code{strncmp}.\n+\n+@end deftypefn\n+\n+@c strncmp.c:6\n+@deftypefn Supplemental int strncmp (const char *@var{s1}, const char *@var{s2}, size_t @var{n})\n+\n+Compares the first @var{n} bytes of two strings, returning a value as\n+@code{strcmp}.\n+\n+@end deftypefn\n+\n+@c strrchr.c:6\n+@deftypefn Supplemental char* strrchr (const char *@var{s}, int @var{c})\n+\n+Returns a pointer to the last occurance of the character @var{c} in\n+the string @var{s}, or NULL if not found.  If @var{c} is itself the\n+null character, the results are undefined.\n+\n+@end deftypefn\n+\n+@c strstr.c:6\n+@deftypefn Supplemental char* strstr (const char *@var{string}, const char *@var{sub})\n+\n+This function searches for the substring @var{sub} in the string\n+@var{string}, not including the terminating NUL characters.  A pointer\n+to the first occurance of @var{sub} is returned, or NULL if the\n+substring is absent.  If @var{sub} points to a string with zero\n+length, the function returns @var{string}.\n+\n+@end deftypefn\n+\n+@c strtod.c:27\n+@deftypefn Supplemental double strtod (const char *@var{string}, char **@var{endptr})\n+\n+This ANSI C function converts the initial portion of @var{string} to a\n+@code{double}.  If @var{endptr} is not NULL, a pointer to the\n+character after the last character used in the conversion is stored in\n+the location referenced by @var{endptr}.  If no conversion is\n+performed, zero is returned and the value of @var{string} is stored in\n+the location referenced by @var{endptr}.\n+\n+@end deftypefn\n+\n+@c strerror.c:730\n+@deftypefn Replacement int strtoerrno (const char *@var{name})\n+\n+Given the symbolic name of a error number (e.g., @code{EACCESS}), map it\n+to an errno value.  If no translation is found, returns 0.\n+\n+@end deftypefn\n+\n+@c strtol.c:33\n+@deftypefn Supplemental {long int} strtol (const char *@var{string}, char **@var{endptr}, int @var{base})\n+\n+The @code{strtol} function converts the string in @var{string} to a\n+long integer value according to the given @var{base}, which must be\n+between 2 and 36 inclusive, or be the special value 0.  If @var{base}\n+is 0, @code{strtol} will look for the prefixes @code{0} and @code{0x}\n+to indicate bases 8 and 16, respectively, else default to base 10.\n+When the base is 16 (either explicitly or implicitly), a prefix of\n+@code{0x} is allowed.  The handling of endptr is as that of\n+@code{strtod} above.\n+\n+@end deftypefn\n+\n+@c tmpnam.c:3\n+@deftypefn Supplemental char* tmpnam (char *@var{s})\n+\n+This function attempts to create a name for a temporary file, which\n+will be a valid file name yet not exist when @code{tmpnam} checks for\n+it.  @var{s} must point to a buffer of at least @code{L_tmpnam} bytes,\n+or be NULL.  Use of this function creates a security risk, and it must\n+not be used in new projects.  Use @code{mkstemp} instead.\n+\n+@end deftypefn\n+\n+@c vfork.c:6\n+@deftypefn Supplemental int vfork ()\n+\n+Emulates @code{vfork} by calling @code{fork} and returning its value.\n+\n+@end deftypefn\n+\n+@c vprintf.c:3\n+@deftypefn Supplemental int vprintf (const char *@var{format}, va_list @var{ap})\n+@deftypefnx Supplemental int vfprintf (FILE *@var{stream}, const char *@var{format}, va_list @var{ap})\n+@deftypefnx Supplemental int vsprintf (char *@var{str}, const char *@var{format}, va_list @var{ap})\n+\n+These functions are the same as @code{printf}, @code{fprintf}, and\n+@code{sprintf}, respectively, except that they are called with a\n+@code{va_list} instead of a variable number of arguments.  Note that\n+they do not call @code{va_end}; this is the application's\n+responsibility.  In @libib{} they are implemented in terms of the\n+nonstandard but common function @code{_doprnt}.\n+\n+@end deftypefn\n+\n+@c waitpid.c:3\n+@deftypefn Supplemental int waitpid (int @var{pid}, int *@var{status}, int)\n+\n+This is a wrapper around the @code{wait} function.  Any ``special''\n+values of @var{pid} depend on your implementation of @code{wait}, as\n+does the return value.  The third argument is unused in @libib{}.\n+\n+@end deftypefn\n+\n+@c xatexit.c:11\n+@deftypefun int xatexit (void (*@var{fn}) (void))\n+\n+Behaves as the standard @code{atexit} function, but with no limit on\n+the number of registered funtions.  Returns 0 on success, or -1 on\n+failure.  If you use @code{xatexit} to register functions, you must use\n+@code{xexit} to terminate your program.\n+\n+@end deftypefun\n+\n+@c xmalloc.c:37\n+@deftypefn Replacement void* xcalloc (size_t, size_t)\n+\n+Allocate memory without fail, and set it to zero.  This routine functions\n+like @code{calloc}, but will behave the same as @code{xmalloc} if memory\n+cannot be found.\n+\n+@end deftypefn\n+\n+@c xexit.c:22\n+@deftypefn Replacement void xexit (int @var{code})\n+\n+Terminates the program.  If any functions have been registered with\n+the @code{xatexit} rpelacement function, they will be called first.\n+Termination is handled via the system's normal @code{exit} call.\n+\n+@end deftypefn\n+\n+@c xmalloc.c:22\n+@deftypefn Replacement void* xmalloc (size_t)\n+\n+Allocate memory without fail.  If @code{malloc} fails, this will print\n+a message to stderr (using the name set by @code{xmalloc_set_program_name},\n+if any) and then call @code{xexit}.  Note that it is therefore safe for\n+a program to contain @code{#define malloc xmalloc} in its source.\n+\n+@end deftypefn\n+\n+@c xmalloc.c:52\n+@deftypefn Replacement void xmalloc_failed (size_t)\n+\n+This function is not meant to be called by client code, and is listed\n+here for completeness only.  If any of the allocation routines fail, this\n+function will be called to print an error message and terminate execution.\n+\n+@end deftypefn\n+\n+@c xmalloc.c:45\n+@deftypefn Replacement void xmalloc_set_program_name (const char *@var{name})\n+\n+You can use this to set the name of the program used by\n+@code{xmalloc_failed} when printing a failure message.\n+\n+@end deftypefn\n+\n+@c xmemdup.c:7\n+@deftypefn Replacement void* xmemdup (void *@var{input}, size_t @var{copy_size}, size_t @var{alloc_size})\n+\n+Duplicates a region of memory without fail.  First, @var{alloc_size} bytes\n+are allocated, then @var{copy_size} bytes from @var{input} are copied into\n+it, and the new memory is returned.  If fewer bytes are copied than were\n+allocated, the remaining memory is zeroed.\n+\n+@end deftypefn\n+\n+@c xmalloc.c:31\n+@deftypefn Replacement void* xrealloc (void*, size_t)\n+Reallocate memory without fail.  This routine functions like @code{realloc},\n+but will behave the same as @code{xmalloc} if memory cannot be found.\n+\n+@end deftypefn\n+\n+@c xstrdup.c:7\n+@deftypefn Replacement char* xstrdup (const char *@var{s})\n+\n+Duplicates a character string without fail, using @code{xmalloc} to\n+obtain memory.\n+\n+@end deftypefn\n+\n+@c xstrerror.c:7\n+@deftypefn Replacement char* xstrerror (int @var{errnum})\n+\n+Behaves exactly like the standard @code{strerror} function, but\n+will never return a NULL pointer.\n+\n+@end deftypefn\n+\n+"}, {"sha": "b272c02ef2a9f2fd51cd3d13ec7e77201aad47e2", "filename": "libiberty/gather-docs", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fgather-docs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fgather-docs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fgather-docs?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -0,0 +1,128 @@\n+#!/usr/bin/perl\n+# -*- perl -*-\n+\n+#   Copyright (C) 2001\n+#   Free Software Foundation\n+#\n+# This file is part of the libiberty library.\n+# Libiberty is free software; you can redistribute it and/or\n+# modify it under the terms of the GNU Library General Public\n+# License as published by the Free Software Foundation; either\n+# version 2 of the License, or (at your option) any later version.\n+#\n+# Libiberty is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+# Library General Public License for more details.\n+#\n+# You should have received a copy of the GNU Library General Public\n+# License along with libiberty; see the file COPYING.LIB.  If not,\n+# write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+# Boston, MA 02111-1307, USA.\n+#\n+# Originally written by DJ Delorie <dj@redhat.com>\n+\n+\n+\n+# This program looks for texinfo snippets in source files and other\n+# files, and builds per-category files with entries sorted in\n+# alphabetical order.\n+\n+# The syntax it looks for is lines starting with '@def' in *.c and\n+# other files (see TEXIFILES in Makefile.in).  Entries are terminated\n+# at the next @def* (which begins a new entry) or, for C files, a line\n+# that begins with '*/' without leading spaces (this assumes that the\n+# texinfo snippet is within a C-style /* */ comment).\n+\n+# \n+\n+\n+\n+if ($ARGV[0] eq \"-v\") {\n+    $verbose = 1;\n+    shift;\n+}\n+\n+$srcdir = shift;\n+$outfile = shift;\n+\n+if ($outfile !~ /\\S/ || ! -f \"$srcdir/Makefile.in\" ) {\n+    print STDERR \"Usage: gather-docs [-v] srcdir outfile.txi [files with snippets in them ...]\\n\";\n+    exit 1;\n+}\n+\n+$errors = 0;\n+\n+for $in (@ARGV) {\n+\n+    if (!open(IN, \"$srcdir/$in\")) {\n+\tprint STDERR \"Cannot open $srcdir/$in for reading: $!\\n\";\n+\t$errors ++;\n+\n+    } else {\n+\t$first = 1;\n+\t$pertinent = 0;\n+\t$man_mode = 0;\n+\t$line = 0;\n+\n+\twhile (<IN>) {\n+\t    $line ++;\n+\t    $pertinent = 1 if /^\\@def[a-z]*[a-wyz] /;\n+\t    $pertinent = 0 if /^\\*\\//;\n+\t    next unless $pertinent;\n+\n+\t    if (/^\\@def[a-z]*[a-wyz] /) {\n+\t\t\n+\t\t($name) = m/[^\\(]* ([^\\( \\t\\r\\n]+) *\\(/;\n+\t\t$name =~ s/[ \t]*$//;\n+\t\t$key = $name;\n+\t\t$key =~ tr/A-Z/a-z/;\n+\t\t$key =~ s/[^a-z0-9]+/ /g;\n+\t\t$name{$key} = $node;\n+\t\t$lines{$key} = '';\n+\t\t$src_file{$key} = $in;\n+\t\t$src_line{$key} = $line;\n+\t\tprint \"\\nReading $in :\" if $verbose && $first;\n+\t\t$first = 0;\n+\t\tprint \" $name\" if $verbose;\n+\t\t$node_lines{$key} .= $_;\n+\n+\t    } else {\n+\t\t$node_lines{$key} .= $_;\n+\t    }\n+\n+\t    $pertinent = 0 if /^\\@end def/;\n+\t}\n+\tclose (IN);\n+    }\n+}\n+\n+print \"\\n\" if $verbose;\n+exit $errors if $errors;\n+\n+if (!open (OUT, \"> $outfile\")) {\n+    print STDERR \"Cannot open $outfile for writing: $!\\n\";\n+    $errors ++;\n+    next;\n+}\n+print \"Writing $outfile\\n\" if $verbose;\n+\n+print OUT \"\\@c Automatically generated from *.c and others (the comments before\\n\";\n+print OUT \"\\@c each entry tell you which file and where in that file).  DO NOT EDIT!\\n\";\n+print OUT \"\\@c Edit the *.c files, configure with --enable-maintainer-mode,\\n\";\n+print OUT \"\\@c and let gather-docs build you a new copy.\\n\\n\";\n+\n+for $key (sort keys %name) {\n+    print OUT \"\\@c $src_file{$key}:$src_line{$key}\\n\";\n+    print OUT $node_lines{$key};\n+    print OUT \"\\n\";\n+}\n+\n+if (! print OUT \"\\n\") {\n+    print STDERR \"Disk full writing $srcdir/$cat.texi\\n\";\n+    $errors ++;\n+}\n+\n+close (OUT);\n+\n+exit $errors;"}, {"sha": "8c7c04ceb4e873c242f4bea171faf36d45041c03", "filename": "libiberty/getcwd.c", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fgetcwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fgetcwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fgetcwd.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -2,24 +2,18 @@\n    This function is in the public domain. */\n \n /*\n-NAME\n-\tgetcwd -- get absolute pathname for current working directory\n \n-SYNOPSIS\n-\tchar *getcwd (char pathname[len], len)\n+@deftypefn Supplemental char* getcwd (char *@var{pathname}, @var{len})\n \n-DESCRIPTION\n-\tCopy the absolute pathname for the current working directory into\n-\tthe supplied buffer and return a pointer to the buffer.  If the \n-\tcurrent directory's path doesn't fit in LEN characters, the result\n-\tis NULL and errno is set.\n+Copy the absolute pathname for the current working directory into\n+@var{pathname}, which is assumed to point to a buffer of at least\n+@var{len} bytes, and return a pointer to the buffer.  If the current\n+directory's path doesn't fit in @var{len} characters, the result is\n+NULL and @var{errno} is set.  If @var{pathname} is a null pointer,\n+@code{getcwd} will obtain @var{len} bytes of space using\n+@code{malloc}.\n \n-\tIf pathname is a null pointer, getcwd() will obtain size bytes of\n-\tspace using malloc.\n-\n-BUGS\n-\tEmulated via the getwd() call, which is reasonable for most\n-\tsystems that do not have getcwd().\n+@end deftypefn\n \n */\n "}, {"sha": "05b8110ad3ca6576a5652556a6c32f0ad50912bc", "filename": "libiberty/getpagesize.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fgetpagesize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fgetpagesize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fgetpagesize.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -2,20 +2,14 @@\n \n /*\n \n-NAME\n+@deftypefn Supplemental int getpagesize ()\n \n-\tgetpagesize -- return the number of bytes in page of memory\n+Returns the number of bytes in a page of memory.  This is the\n+granularity of many of the system memory management routines.  No\n+guarantee is made as to whether or not it is the same as the basic\n+memory management hardware page size.\n \n-SYNOPSIS\n-\n-\tint getpagesize (void)\n-\n-DESCRIPTION\n-\n-\tReturns the number of bytes in a page of memory.  This is the\n-\tgranularity of many of the system memory management routines.\n-\tNo guarantee is made as to whether or not it is the same as the\n-\tbasic memory management hardware page size.\n+@end deftypefn\n \n BUGS\n "}, {"sha": "c5408794a2764983612d889da11dc65593d51041", "filename": "libiberty/getpwd.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fgetpwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fgetpwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fgetpwd.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -1,5 +1,17 @@\n /* getpwd.c - get the working directory */\n \n+/*\n+\n+@deftypefn Supplemental char* getpwd ()\n+\n+Returns the current working directory.  This implementation caches the\n+result on the assumption that the process will not call @code{chdir}\n+between calls to @code{getpwd}.\n+\n+@end deftypefn\n+\n+*/\n+\n #ifdef HAVE_CONFIG_H\n #include \"config.h\"\n #endif"}, {"sha": "9c2ea8266127c61bfa27599a25018a4c7fe3a33c", "filename": "libiberty/index.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Findex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Findex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Findex.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -1,5 +1,17 @@\n /* Stub implementation of (obsolete) index(). */\n \n+/*\n+\n+@deftypefn Supplemental char* index (char *@var{s}, int @var{c})\n+\n+Returns a pointer to the first occurance of the character @var{c} in\n+the string @var{s}, or NULL if not found.  The use of @code{index} is\n+deprecated in new programs in favor of @code{strchr}.\n+\n+@end deftypefn\n+\n+*/\n+\n extern char * strchr();\n \n char *"}, {"sha": "9181b0f4621fc82c6403b3e1adecc526a79f8492", "filename": "libiberty/libiberty.texi", "status": "added", "additions": 316, "deletions": 0, "changes": 316, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Flibiberty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Flibiberty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Flibiberty.texi?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -0,0 +1,316 @@\n+\\input texinfo  @c -*-texinfo-*-\n+@c %**start of header\n+@setfilename libiberty.info\n+@settitle @sc{gnu} libiberty\n+@c %**end of header\n+\n+@syncodeindex fn cp\n+@syncodeindex vr cp\n+\n+@macro libib\n+@code{libiberty}\n+@end macro\n+\n+@c The edition date is written in three locations.  Search for 'thedate'.\n+@ifinfo\n+This manual describes the GNU @libib library of utility subroutines.\n+This edition accompanies GCC 3, September 2001.\n+\n+Copyright @copyright{} 2001 Free Software Foundation, Inc.\n+\n+      Permission is granted to copy, distribute and/or modify this document\n+      under the terms of the GNU Free Documentation License, Version 1.1\n+      or any later version published by the Free Software Foundation;\n+      with no Invariant Sections, with no Front-Cover Texts, and with no\n+      Back-Cover Texts.  A copy of the license is included in the\n+      section entitled ``GNU Free Documentation License''.\n+\n+@ignore\n+Permission is granted to process this file through TeX and print the\n+results, provided the printed document carries a copying permission\n+notice identical to this one except for the removal of this paragraph\n+(this paragraph not being relevant to the printed manual).\n+\n+@end ignore\n+@end ifinfo\n+\n+\n+@c The edition date is written in three locations.  Search for 'thedate'.\n+@titlepage\n+@title @sc{gnu} libiberty\n+@subtitle September 2001\n+@subtitle for GCC 3\n+@author Phil Edwards et al.\n+@page\n+\n+\n+@vskip 0pt plus 1filll\n+Copyright @copyright{} 2001 Free Software Foundation, Inc.\n+\n+      Permission is granted to copy, distribute and/or modify this document\n+      under the terms of the GNU Free Documentation License, Version 1.1\n+      or any later version published by the Free Software Foundation;\n+      with no Invariant Sections, with no Front-Cover Texts, and with no\n+      Back-Cover Texts.  A copy of the license is included in the\n+      section entitled ``GNU Free Documentation License''.\n+\n+@end titlepage\n+\n+\n+@ifnottex\n+@node    Top,Using,,\n+@top     Introduction\n+\n+The @libib{} library is a collection of subroutines used by various\n+GNU programs.  It is available under the Library General Public\n+License; for more information, see @ref{Library Copying}.\n+\n+@c The edition date is written in three locations.  Search for 'thedate'.\n+This edition accompanies GCC 3, September 2001.\n+\n+@end ifnottex\n+\n+@menu\n+* Using::              How to use libiberty in your code.\n+\n+* Overview::           Overview of available function groups.\n+\n+* Functions::          Available functions, macros, and global variables.\n+\n+* Obstacks::           Object Stacks.\n+\n+* Licenses::           The various licenses under which libiberty sources are\n+                       distributed.\n+\n+* Index::              Index of functions and categories.\n+@end menu\n+\n+@node Using,Overview,Top,Top\n+@chapter Using\n+@cindex using libiberty\n+@cindex libiberty usage\n+@cindex how to use\n+\n+@c THIS SECTION IS CRAP AND NEEDS REWRITING BADLY.\n+\n+To date, @libib{} is generally not installed on its own.  It has evolved\n+over years but does not have its own version number nor release schedule.\n+\n+Possibly the easiest way to use @libib{} in your projects is to drop the\n+@libib{} code into your project's sources, and to build the library along\n+with your own sources; the library would then be linked in at the end.  This\n+prevents any possible version mismatches with other copies of libiberty\n+elsewhere on the system.\n+\n+Passing @option{--enable-install-libiberty} to the @command{configure}\n+script when building @libib{} causes the header files and archive library\n+to be installed when @samp{make install} is run.  This option also takes\n+an (optional) argument to specify the installation location, in the same\n+manner as @option{--prefix}.\n+\n+For your own projects, an approach which offers stability and flexibility\n+is to include @libib{} with your code, but allow the end user to optionally\n+choose to use a previously-installed version instead.  In this way the\n+user may choose (for example) to install @libib{} as part of GCC, and use\n+that version for all software built with that compiler.  (This approach\n+has proven useful with software using the GNU @code{readline} library.)\n+\n+Making use of @libib{} code usually requires that you include one or more\n+header files from the @libib{} distribution.  (They will be named as\n+necessary in the function descriptions.)  At link time, you will need to\n+add @option{-liberty} to your link command invocation.\n+\n+\n+@node Overview,Functions,Using,Top\n+@chapter Overview\n+\n+Functions contained in @libib{} can be divided into three general categories.\n+\n+\n+@menu\n+* Supplemental Functions::       Providing functions which don't exist\n+                                 on older operating systems.\n+\n+* Replacement Functions::        These functions are sometimes buggy or\n+                                 unpredictable on some operating systems.\n+\n+* Extensions::                   Functions which provide useful extensions\n+                                 or safety wrappers around existing code.\n+@end menu\n+\n+@node Supplemental Functions,Replacement Functions,,Overview\n+@section Supplemental Functions\n+@cindex supplemental functions\n+@cindex functions, supplemental\n+@cindex functions, missing\n+\n+Certain operating systems do not provide functions which have since\n+become standardized, or at least common.  For example, the Single\n+Unix Specification Version 2 requires that the @code{basename}\n+function be provided, but an OS which predates that specification\n+might not have this function.  This should not prevent well-written\n+code from running on such a system.\n+\n+Similarly, some functions exist only among a particular ``flavor''\n+or ``family'' of operating systems.  As an example, the @code{bzero}\n+function is often not present on systems outside the BSD-derived\n+family of systems.\n+\n+Many such functions are provided in @libib{}.  They are quickly\n+listed here with little description, as systems which lack them\n+become less and less common.  Each function @var{foo} is implemented\n+in @file{foo.c} but not declared in any @libib{} header file; more\n+comments and caveats for each function's implementation are often\n+available in the source file.  Generally, the function can simply\n+be declared as @code{extern}.\n+\n+\n+\n+@node Replacement Functions,Extensions,Supplemental Functions,Overview\n+@section Replacement Functions\n+@cindex replacement functions\n+@cindex functions, replacement\n+\n+Some functions have extremely limited implementations on different\n+platforms.  Other functions are tedious to use correctly; for example,\n+proper use of @code{malloc} calls for the return value to be checked and\n+appropriate action taken if memory has been exhausted.  A group of\n+``replacement functions'' is available in @libib{} to address these issues\n+for some of the most commonly used subroutines.\n+\n+All of these functions are declared in the @file{libiberty.h} header\n+file.  Many of the implementations will use preprocessor macros set by\n+GNU Autoconf, if you decide to make use of that program.  Some of these\n+functions may call one another.\n+\n+\n+@menu\n+* Memory Allocation::            Testing and handling failed memory\n+                                   requests automatically.\n+* Exit Handlers::                Calling routines on program exit.\n+* Error Reporting::              Mapping errno and signal numbers to\n+                                   more useful string formats.\n+@end menu\n+\n+@node Memory Allocation\n+@subsection Memory Allocation\n+@cindex memory allocation\n+\n+The functions beginning with the letter `x' are wrappers around\n+standard functions; the functions provided by the system environment\n+are called and their results checked before the results are passed back\n+to client code.  If the standard functions fail, these wrappers will\n+terminate the program.  Thus, these versions can be used with impunity.\n+\n+\n+@node Exit Handlers\n+@subsection Exit Handlers\n+@cindex exit handlers\n+\n+The existence and implementation of the @code{atexit} routine varies\n+amongst the flavors of Unix.  @libib{} provides an unvarying dependable\n+implementation via @code{xatexit} and @code{xexit}.\n+\n+\n+@node Error Reporting\n+@subsection Error Reporting\n+@cindex error reporting\n+\n+These are a set of routines to facilitate programming with the system\n+@code{errno} interface.  The @libib{} source file @file{strerror.c}\n+contains a good deal of documentation for these functions.\n+\n+@c signal stuff\n+\n+\n+@node Extensions,,Replacement Functions,Overview\n+@section Extensions\n+@cindex extensions\n+@cindex functions, extension\n+\n+@libib{} includes additional functionality above and beyond standard\n+functions, which has proven generically useful in GNU programs, such as\n+obstacks and regex.  These functions are often copied from other\n+projects as they gain popularity, and are included here to provide a\n+central location from which to use, maintain, and distribute them.\n+\n+@menu\n+* Obstacks::                     Stacks of arbitrary objects.\n+@end menu\n+\n+\n+@node Functions,Obstacks,Overview,Top\n+@chapter Function, Variable, and Macro Listing.\n+@include functions.texi\n+\n+@c This is generated from the glibc manual using a make-obstacks-texi.sh\n+@c script of Phil's.  Hope it's accurate.\n+@include obstacks.texi\n+\n+\n+@node Licenses,Index,Obstacks,Top\n+@appendix Licenses\n+\n+@menu\n+\n+* Library Copying::   The GNU Libary General Public License\n+* BSD::               Regents of the University of California\n+\n+@end menu\n+\n+@c This takes care of Library Copying.  It is the copying-lib.texi from the\n+@c GNU website, with its @node line altered to make makeinfo shut up.\n+@include copying-lib.texi\n+\n+@page\n+@node BSD,,,Licenses\n+@appendixsec BSD\n+\n+Copyright @copyright{} 1990 Regents of the University of California.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions\n+are met:\n+\n+@enumerate\n+\n+@item\n+Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+\n+@item\n+Redistributions in binary form must reproduce the above copyright\n+notice, this list of conditions and the following disclaimer in the\n+documentation and/or other materials provided with the distribution.\n+\n+@item\n+[rescinded 22 July 1999]\n+\n+@item\n+Neither the name of the University nor the names of its contributors\n+may be used to endorse or promote products derived from this software\n+without specific prior written permission.\n+\n+@end enumerate\n+\n+THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+SUCH DAMAGE.\n+\n+@node    Index,,Licenses,Top\n+@unnumbered Index\n+\n+@printindex cp\n+\n+@contents\n+@bye\n+"}, {"sha": "97088009f8df955c7b335a3092c8ed471e551bff", "filename": "libiberty/maint-tool", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fmaint-tool", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fmaint-tool", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmaint-tool?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -0,0 +1,75 @@\n+#!/usr/bin/perl\n+# -*- perl -*-\n+\n+#   Copyright (C) 2001\n+#   Free Software Foundation\n+#\n+# This file is part of the libiberty library.\n+# Libiberty is free software; you can redistribute it and/or\n+# modify it under the terms of the GNU Library General Public\n+# License as published by the Free Software Foundation; either\n+# version 2 of the License, or (at your option) any later version.\n+#\n+# Libiberty is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+# Library General Public License for more details.\n+#\n+# You should have received a copy of the GNU Library General Public\n+# License along with libiberty; see the file COPYING.LIB.  If not,\n+# write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+# Boston, MA 02111-1307, USA.\n+#\n+# Originally written by DJ Delorie <dj@redhat.com>\n+\n+\n+# This is a trivial script which checks the lists of C and O files in\n+# the Makefile for consistency.\n+\n+$mode = shift;\n+$srcdir = \".\";\n+\n+if ($mode eq \"-s\") {\n+    $srcdir = shift;\n+    $mode = shift;\n+}\n+\n+&missing() if $mode eq \"missing\";\n+\n+exit 0;\n+\n+######################################################################\n+\n+sub missing {\n+\n+    opendir(S, $srcdir);\n+    while ($f = readdir S) {\n+\t$have{$f} = 1;\n+    }\n+    closedir(S);\n+    opendir(S, \".\");\n+    while ($f = readdir S) {\n+\t$have{$f} = 1;\n+    }\n+    closedir(S);\n+\n+    for $a (@ARGV) {\n+\t$listed{$a} = 1;\n+\t$have{$a} = 0;\n+    }\n+\n+    for $f (sort keys %have) {\n+\tnext unless $have{$f};\n+\tif ($f =~ /\\.c$/) {\n+\t    print \"S $f\\n\";\n+\t}\n+    }\n+    for $f (sort keys %listed) {\n+\tif ($f =~ /(.*)\\.c$/) {\n+\t    $base = $1;\n+\t    if (! $listed{\"$base.o\"}) {\n+\t\tprint \"O $f\\n\";\n+\t    }\n+\t}\n+    }\n+}"}, {"sha": "f053be71dc593c8ff3257e766af06c667cb2c8dd", "filename": "libiberty/memchr.c", "status": "modified", "additions": 9, "deletions": 30, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fmemchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fmemchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmemchr.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -1,37 +1,16 @@\n /*\n-FUNCTION\n-\t<<memchr>>---find character in memory\n \n-INDEX\n-\tmemchr\n+@deftypefn Supplemental void* memchr (const void *@var{s}, int @var{c}, size_t @var{n})\n \n-ANSI_SYNOPSIS\n-\t#include <string.h>\n-\tvoid *memchr(const void *<[src]>, int <[c]>, size_t <[length]>);\n+This function searches memory starting at @code{*}@var{src} for the\n+character @var{c}.  The search only ends with the first occurrence of\n+@var{c}, or after @var{length} characters; in particular, a null\n+character does not terminate the search.  If the character @var{c} is\n+found within @var{length} characters of @code{*}@var{src}, a pointer\n+to the character is returned. If @var{c} is not found, then NULL is\n+returned.\n \n-TRAD_SYNOPSIS\n-\t#include <string.h>\n-\tvoid *memchr(<[src]>, <[c]>, <[length]>)\n-\tvoid *<[src]>;\n-\tvoid *<[c]>;\n-\tsize_t <[length]>;\n-\n-DESCRIPTION\n-\tThis function searches memory starting at <<*<[src]>>> for the\n-\tcharacter <[c]>.  The search only ends with the first\n-\toccurrence of <[c]>, or after <[length]> characters; in\n-\tparticular, <<NULL>> does not terminate the search.\n-\n-RETURNS\n-\tIf the character <[c]> is found within <[length]> characters\n-\tof <<*<[src]>>>, a pointer to the character is returned. If\n-\t<[c]> is not found, then <<NULL>> is returned. \t\n-\n-PORTABILITY\n-<<memchr>>  requires no supporting OS subroutines.\n-\n-QUICKREF\n-\tmemchr ansi pure\n+@end deftypefn\n \n */\n "}, {"sha": "d8d3997d0661c9ff52f37e53f12c907505f30072", "filename": "libiberty/memcmp.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fmemcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fmemcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmemcmp.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -2,16 +2,17 @@\n    This function is in the public domain.  */\n \n /*\n-NAME\n-\tmemcmp -- compare two memory regions\n \n-SYNOPSIS\n-\tint memcmp (const void *from, const void *to, size_t count)\n+@deftypefn Supplemental int memcmp (const void *@var{x}, const void *@var{y}, size_t @var{count})\n+\n+Compares the first @var{count} bytes of two areas of memory.  Returns\n+zero if they are the same, a value less than zero if @var{x} is\n+lexically less than @var{y}, or a value greater than zero if @var{x}\n+is lexically greater than @var{y}.  Note that lexical order is determined\n+as if comparing unsigned char arrays.\n+\n+@end deftypefn\n \n-DESCRIPTION\n-\tCompare two memory regions and return less than,\n-\tequal to, or greater than zero, according to lexicographical\n-\tordering of the compared regions.\n */\n \n #include <ansidecl.h>"}, {"sha": "0f2bac7ac2c8a28fe9035587e9a18b9967dee3cb", "filename": "libiberty/memcpy.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fmemcpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fmemcpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmemcpy.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -2,15 +2,14 @@\n    This function is in the public domain.  */\n \n /*\n-NAME\n-\tmemcpy -- copy memory regions of arbitary length\n \n-SYNOPSIS\n-\tvoid* memcpy (void *out, const void *in, size_t n);\n+@deftypefn Supplemental void* memcpy (void *@var{out}, const void *@var{in}, size_t @var{length})\n+\n+Copies @var{length} bytes from memory region @var{in} to region\n+@var{out}.  Returns a pointer to @var{out}.\n+\n+@end deftypefn\n \n-DESCRIPTION\n-\tCopy LENGTH bytes from memory region pointed to by IN to memory\n-\tregion pointed to by OUT.\n */\n \n #include <ansidecl.h>"}, {"sha": "3ec73208ca7314287455b2ac94461fa2cd252da9", "filename": "libiberty/memmove.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fmemmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fmemmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmemmove.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -1,5 +1,17 @@\n /* Wrapper to implement ANSI C's memmove using BSD's bcopy. */\n /* This function is in the public domain.  --Per Bothner. */\n+\n+/*\n+\n+@deftypefn Supplemental void* memmove (void *@var{from}, const void *@var{to}, size_t @var{count})\n+\n+Copies @var{count} bytes from memory area @var{from} to memory area\n+@var{to}, returning a pointer to @var{to}.\n+\n+@end deftypefn\n+\n+*/\n+\n #include <ansidecl.h>\n #ifdef __STDC__\n #include <stddef.h>"}, {"sha": "489ca1748157c034d17c376d7cf725c8c4ed784b", "filename": "libiberty/memset.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fmemset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fmemset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmemset.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -1,6 +1,17 @@\n /* memset\n    This implementation is in the public domain.  */\n \n+/*\n+\n+@deftypefn Supplemental void* memset (void *@var{s}, int @var{c}, size_t @var{count})\n+\n+Sets the first @var{count} bytes of @var{s} to the constant byte\n+@var{c}, returning a pointer to @var{s}.\n+\n+@end deftypefn\n+\n+*/\n+\n #include <ansidecl.h>\n #ifdef __STDC__\n #include <stddef.h>"}, {"sha": "9bddf7caf30bff28d58c0534d69f27f6cd770621", "filename": "libiberty/obstacks.texi", "status": "added", "additions": 758, "deletions": 0, "changes": 758, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fobstacks.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fobstacks.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fobstacks.texi?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -0,0 +1,758 @@\n+@node Obstacks,Licenses,Functions,Top\n+@chapter Obstacks\n+@cindex obstacks\n+\n+An @dfn{obstack} is a pool of memory containing a stack of objects.  You\n+can create any number of separate obstacks, and then allocate objects in\n+specified obstacks.  Within each obstack, the last object allocated must\n+always be the first one freed, but distinct obstacks are independent of\n+each other.\n+\n+Aside from this one constraint of order of freeing, obstacks are totally\n+general: an obstack can contain any number of objects of any size.  They\n+are implemented with macros, so allocation is usually very fast as long as\n+the objects are usually small.  And the only space overhead per object is\n+the padding needed to start each object on a suitable boundary.\n+\n+@menu\n+* Creating Obstacks::\t\tHow to declare an obstack in your program.\n+* Preparing for Obstacks::\tPreparations needed before you can\n+\t\t\t\t use obstacks.\n+* Allocation in an Obstack::    Allocating objects in an obstack.\n+* Freeing Obstack Objects::     Freeing objects in an obstack.\n+* Obstack Functions::\t\tThe obstack functions are both\n+\t\t\t\t functions and macros.\n+* Growing Objects::             Making an object bigger by stages.\n+* Extra Fast Growing::\t\tExtra-high-efficiency (though more\n+\t\t\t\t complicated) growing objects.\n+* Status of an Obstack::        Inquiries about the status of an obstack.\n+* Obstacks Data Alignment::     Controlling alignment of objects in obstacks.\n+* Obstack Chunks::              How obstacks obtain and release chunks;\n+\t\t\t\t efficiency considerations.\n+* Summary of Obstacks::\n+@end menu\n+\n+@node Creating Obstacks\n+@section Creating Obstacks\n+\n+The utilities for manipulating obstacks are declared in the header\n+file @file{obstack.h}.\n+@pindex obstack.h\n+\n+@comment obstack.h\n+@comment GNU\n+@deftp {Data Type} {struct obstack}\n+An obstack is represented by a data structure of type @code{struct\n+obstack}.  This structure has a small fixed size; it records the status\n+of the obstack and how to find the space in which objects are allocated.\n+It does not contain any of the objects themselves.  You should not try\n+to access the contents of the structure directly; use only the functions\n+described in this chapter.\n+@end deftp\n+\n+You can declare variables of type @code{struct obstack} and use them as\n+obstacks, or you can allocate obstacks dynamically like any other kind\n+of object.  Dynamic allocation of obstacks allows your program to have a\n+variable number of different stacks.  (You can even allocate an\n+obstack structure in another obstack, but this is rarely useful.)\n+\n+All the functions that work with obstacks require you to specify which\n+obstack to use.  You do this with a pointer of type @code{struct obstack\n+*}.  In the following, we often say ``an obstack'' when strictly\n+speaking the object at hand is such a pointer.\n+\n+The objects in the obstack are packed into large blocks called\n+@dfn{chunks}.  The @code{struct obstack} structure points to a chain of\n+the chunks currently in use.\n+\n+The obstack library obtains a new chunk whenever you allocate an object\n+that won't fit in the previous chunk.  Since the obstack library manages\n+chunks automatically, you don't need to pay much attention to them, but\n+you do need to supply a function which the obstack library should use to\n+get a chunk.  Usually you supply a function which uses @code{malloc}\n+directly or indirectly.  You must also supply a function to free a chunk.\n+These matters are described in the following section.\n+\n+@node Preparing for Obstacks\n+@section Preparing for Using Obstacks\n+\n+Each source file in which you plan to use the obstack functions\n+must include the header file @file{obstack.h}, like this:\n+\n+@smallexample\n+#include <obstack.h>\n+@end smallexample\n+\n+@findex obstack_chunk_alloc\n+@findex obstack_chunk_free\n+Also, if the source file uses the macro @code{obstack_init}, it must\n+declare or define two functions or macros that will be called by the\n+obstack library.  One, @code{obstack_chunk_alloc}, is used to allocate\n+the chunks of memory into which objects are packed.  The other,\n+@code{obstack_chunk_free}, is used to return chunks when the objects in\n+them are freed.  These macros should appear before any use of obstacks\n+in the source file.\n+\n+Usually these are defined to use @code{malloc} via the intermediary\n+@code{xmalloc} (@pxref{Unconstrained Allocation, , , libc, The GNU C Library Reference Manual}).  This is done with\n+the following pair of macro definitions:\n+\n+@smallexample\n+#define obstack_chunk_alloc xmalloc\n+#define obstack_chunk_free free\n+@end smallexample\n+\n+@noindent\n+Though the memory you get using obstacks really comes from @code{malloc},\n+using obstacks is faster because @code{malloc} is called less often, for\n+larger blocks of memory.  @xref{Obstack Chunks}, for full details.\n+\n+At run time, before the program can use a @code{struct obstack} object\n+as an obstack, it must initialize the obstack by calling\n+@code{obstack_init}.\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun int obstack_init (struct obstack *@var{obstack-ptr})\n+Initialize obstack @var{obstack-ptr} for allocation of objects.  This\n+function calls the obstack's @code{obstack_chunk_alloc} function.  If\n+allocation of memory fails, the function pointed to by\n+@code{obstack_alloc_failed_handler} is called.  The @code{obstack_init}\n+function always returns 1 (Compatibility notice: Former versions of\n+obstack returned 0 if allocation failed).\n+@end deftypefun\n+\n+Here are two examples of how to allocate the space for an obstack and\n+initialize it.  First, an obstack that is a static variable:\n+\n+@smallexample\n+static struct obstack myobstack;\n+@dots{}\n+obstack_init (&myobstack);\n+@end smallexample\n+\n+@noindent\n+Second, an obstack that is itself dynamically allocated:\n+\n+@smallexample\n+struct obstack *myobstack_ptr\n+  = (struct obstack *) xmalloc (sizeof (struct obstack));\n+\n+obstack_init (myobstack_ptr);\n+@end smallexample\n+\n+@comment obstack.h\n+@comment GNU\n+@defvar obstack_alloc_failed_handler\n+The value of this variable is a pointer to a function that\n+@code{obstack} uses when @code{obstack_chunk_alloc} fails to allocate\n+memory.  The default action is to print a message and abort.\n+You should supply a function that either calls @code{exit}\n+(@pxref{Program Termination, , , libc, The GNU C Library Reference Manual}) or @code{longjmp} (@pxref{Non-Local\n+Exits, , , libc, The GNU C Library Reference Manual}) and doesn't return.\n+\n+@smallexample\n+void my_obstack_alloc_failed (void)\n+@dots{}\n+obstack_alloc_failed_handler = &my_obstack_alloc_failed;\n+@end smallexample\n+\n+@end defvar\n+\n+@node Allocation in an Obstack\n+@section Allocation in an Obstack\n+@cindex allocation (obstacks)\n+\n+The most direct way to allocate an object in an obstack is with\n+@code{obstack_alloc}, which is invoked almost like @code{malloc}.\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun {void *} obstack_alloc (struct obstack *@var{obstack-ptr}, int @var{size})\n+This allocates an uninitialized block of @var{size} bytes in an obstack\n+and returns its address.  Here @var{obstack-ptr} specifies which obstack\n+to allocate the block in; it is the address of the @code{struct obstack}\n+object which represents the obstack.  Each obstack function or macro\n+requires you to specify an @var{obstack-ptr} as the first argument.\n+\n+This function calls the obstack's @code{obstack_chunk_alloc} function if\n+it needs to allocate a new chunk of memory; it calls\n+@code{obstack_alloc_failed_handler} if allocation of memory by\n+@code{obstack_chunk_alloc} failed.\n+@end deftypefun\n+\n+For example, here is a function that allocates a copy of a string @var{str}\n+in a specific obstack, which is in the variable @code{string_obstack}:\n+\n+@smallexample\n+struct obstack string_obstack;\n+\n+char *\n+copystring (char *string)\n+@{\n+  size_t len = strlen (string) + 1;\n+  char *s = (char *) obstack_alloc (&string_obstack, len);\n+  memcpy (s, string, len);\n+  return s;\n+@}\n+@end smallexample\n+\n+To allocate a block with specified contents, use the function\n+@code{obstack_copy}, declared like this:\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun {void *} obstack_copy (struct obstack *@var{obstack-ptr}, void *@var{address}, int @var{size})\n+This allocates a block and initializes it by copying @var{size}\n+bytes of data starting at @var{address}.  It calls\n+@code{obstack_alloc_failed_handler} if allocation of memory by\n+@code{obstack_chunk_alloc} failed.\n+@end deftypefun\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun {void *} obstack_copy0 (struct obstack *@var{obstack-ptr}, void *@var{address}, int @var{size})\n+Like @code{obstack_copy}, but appends an extra byte containing a null\n+character.  This extra byte is not counted in the argument @var{size}.\n+@end deftypefun\n+\n+The @code{obstack_copy0} function is convenient for copying a sequence\n+of characters into an obstack as a null-terminated string.  Here is an\n+example of its use:\n+\n+@smallexample\n+char *\n+obstack_savestring (char *addr, int size)\n+@{\n+  return obstack_copy0 (&myobstack, addr, size);\n+@}\n+@end smallexample\n+\n+@noindent\n+Contrast this with the previous example of @code{savestring} using\n+@code{malloc} (@pxref{Basic Allocation, , , libc, The GNU C Library Reference Manual}).\n+\n+@node Freeing Obstack Objects\n+@section Freeing Objects in an Obstack\n+@cindex freeing (obstacks)\n+\n+To free an object allocated in an obstack, use the function\n+@code{obstack_free}.  Since the obstack is a stack of objects, freeing\n+one object automatically frees all other objects allocated more recently\n+in the same obstack.\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun void obstack_free (struct obstack *@var{obstack-ptr}, void *@var{object})\n+If @var{object} is a null pointer, everything allocated in the obstack\n+is freed.  Otherwise, @var{object} must be the address of an object\n+allocated in the obstack.  Then @var{object} is freed, along with\n+everything allocated in @var{obstack} since @var{object}.\n+@end deftypefun\n+\n+Note that if @var{object} is a null pointer, the result is an\n+uninitialized obstack.  To free all memory in an obstack but leave it\n+valid for further allocation, call @code{obstack_free} with the address\n+of the first object allocated on the obstack:\n+\n+@smallexample\n+obstack_free (obstack_ptr, first_object_allocated_ptr);\n+@end smallexample\n+\n+Recall that the objects in an obstack are grouped into chunks.  When all\n+the objects in a chunk become free, the obstack library automatically\n+frees the chunk (@pxref{Preparing for Obstacks}).  Then other\n+obstacks, or non-obstack allocation, can reuse the space of the chunk.\n+\n+@node Obstack Functions\n+@section Obstack Functions and Macros\n+@cindex macros\n+\n+The interfaces for using obstacks may be defined either as functions or\n+as macros, depending on the compiler.  The obstack facility works with\n+all C compilers, including both @w{ISO C} and traditional C, but there are\n+precautions you must take if you plan to use compilers other than GNU C.\n+\n+If you are using an old-fashioned @w{non-ISO C} compiler, all the obstack\n+``functions'' are actually defined only as macros.  You can call these\n+macros like functions, but you cannot use them in any other way (for\n+example, you cannot take their address).\n+\n+Calling the macros requires a special precaution: namely, the first\n+operand (the obstack pointer) may not contain any side effects, because\n+it may be computed more than once.  For example, if you write this:\n+\n+@smallexample\n+obstack_alloc (get_obstack (), 4);\n+@end smallexample\n+\n+@noindent\n+you will find that @code{get_obstack} may be called several times.\n+If you use @code{*obstack_list_ptr++} as the obstack pointer argument,\n+you will get very strange results since the incrementation may occur\n+several times.\n+\n+In @w{ISO C}, each function has both a macro definition and a function\n+definition.  The function definition is used if you take the address of the\n+function without calling it.  An ordinary call uses the macro definition by\n+default, but you can request the function definition instead by writing the\n+function name in parentheses, as shown here:\n+\n+@smallexample\n+char *x;\n+void *(*funcp) ();\n+/* @r{Use the macro}.  */\n+x = (char *) obstack_alloc (obptr, size);\n+/* @r{Call the function}.  */\n+x = (char *) (obstack_alloc) (obptr, size);\n+/* @r{Take the address of the function}.  */\n+funcp = obstack_alloc;\n+@end smallexample\n+\n+@noindent\n+This is the same situation that exists in @w{ISO C} for the standard library\n+functions.  @xref{Macro Definitions, , , libc, The GNU C Library Reference Manual}.\n+\n+@strong{Warning:} When you do use the macros, you must observe the\n+precaution of avoiding side effects in the first operand, even in @w{ISO C}.\n+\n+If you use the GNU C compiler, this precaution is not necessary, because\n+various language extensions in GNU C permit defining the macros so as to\n+compute each argument only once.\n+\n+@node Growing Objects\n+@section Growing Objects\n+@cindex growing objects (in obstacks)\n+@cindex changing the size of a block (obstacks)\n+\n+Because memory in obstack chunks is used sequentially, it is possible to\n+build up an object step by step, adding one or more bytes at a time to the\n+end of the object.  With this technique, you do not need to know how much\n+data you will put in the object until you come to the end of it.  We call\n+this the technique of @dfn{growing objects}.  The special functions\n+for adding data to the growing object are described in this section.\n+\n+You don't need to do anything special when you start to grow an object.\n+Using one of the functions to add data to the object automatically\n+starts it.  However, it is necessary to say explicitly when the object is\n+finished.  This is done with the function @code{obstack_finish}.\n+\n+The actual address of the object thus built up is not known until the\n+object is finished.  Until then, it always remains possible that you will\n+add so much data that the object must be copied into a new chunk.\n+\n+While the obstack is in use for a growing object, you cannot use it for\n+ordinary allocation of another object.  If you try to do so, the space\n+already added to the growing object will become part of the other object.\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun void obstack_blank (struct obstack *@var{obstack-ptr}, int @var{size})\n+The most basic function for adding to a growing object is\n+@code{obstack_blank}, which adds space without initializing it.\n+@end deftypefun\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun void obstack_grow (struct obstack *@var{obstack-ptr}, void *@var{data}, int @var{size})\n+To add a block of initialized space, use @code{obstack_grow}, which is\n+the growing-object analogue of @code{obstack_copy}.  It adds @var{size}\n+bytes of data to the growing object, copying the contents from\n+@var{data}.\n+@end deftypefun\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun void obstack_grow0 (struct obstack *@var{obstack-ptr}, void *@var{data}, int @var{size})\n+This is the growing-object analogue of @code{obstack_copy0}.  It adds\n+@var{size} bytes copied from @var{data}, followed by an additional null\n+character.\n+@end deftypefun\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun void obstack_1grow (struct obstack *@var{obstack-ptr}, char @var{c})\n+To add one character at a time, use the function @code{obstack_1grow}.\n+It adds a single byte containing @var{c} to the growing object.\n+@end deftypefun\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun void obstack_ptr_grow (struct obstack *@var{obstack-ptr}, void *@var{data})\n+Adding the value of a pointer one can use the function\n+@code{obstack_ptr_grow}.  It adds @code{sizeof (void *)} bytes\n+containing the value of @var{data}.\n+@end deftypefun\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun void obstack_int_grow (struct obstack *@var{obstack-ptr}, int @var{data})\n+A single value of type @code{int} can be added by using the\n+@code{obstack_int_grow} function.  It adds @code{sizeof (int)} bytes to\n+the growing object and initializes them with the value of @var{data}.\n+@end deftypefun\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun {void *} obstack_finish (struct obstack *@var{obstack-ptr})\n+When you are finished growing the object, use the function\n+@code{obstack_finish} to close it off and return its final address.\n+\n+Once you have finished the object, the obstack is available for ordinary\n+allocation or for growing another object.\n+\n+This function can return a null pointer under the same conditions as\n+@code{obstack_alloc} (@pxref{Allocation in an Obstack}).\n+@end deftypefun\n+\n+When you build an object by growing it, you will probably need to know\n+afterward how long it became.  You need not keep track of this as you grow\n+the object, because you can find out the length from the obstack just\n+before finishing the object with the function @code{obstack_object_size},\n+declared as follows:\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun int obstack_object_size (struct obstack *@var{obstack-ptr})\n+This function returns the current size of the growing object, in bytes.\n+Remember to call this function @emph{before} finishing the object.\n+After it is finished, @code{obstack_object_size} will return zero.\n+@end deftypefun\n+\n+If you have started growing an object and wish to cancel it, you should\n+finish it and then free it, like this:\n+\n+@smallexample\n+obstack_free (obstack_ptr, obstack_finish (obstack_ptr));\n+@end smallexample\n+\n+@noindent\n+This has no effect if no object was growing.\n+\n+@cindex shrinking objects\n+You can use @code{obstack_blank} with a negative size argument to make\n+the current object smaller.  Just don't try to shrink it beyond zero\n+length---there's no telling what will happen if you do that.\n+\n+@node Extra Fast Growing\n+@section Extra Fast Growing Objects\n+@cindex efficiency and obstacks\n+\n+The usual functions for growing objects incur overhead for checking\n+whether there is room for the new growth in the current chunk.  If you\n+are frequently constructing objects in small steps of growth, this\n+overhead can be significant.\n+\n+You can reduce the overhead by using special ``fast growth''\n+functions that grow the object without checking.  In order to have a\n+robust program, you must do the checking yourself.  If you do this checking\n+in the simplest way each time you are about to add data to the object, you\n+have not saved anything, because that is what the ordinary growth\n+functions do.  But if you can arrange to check less often, or check\n+more efficiently, then you make the program faster.\n+\n+The function @code{obstack_room} returns the amount of room available\n+in the current chunk.  It is declared as follows:\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun int obstack_room (struct obstack *@var{obstack-ptr})\n+This returns the number of bytes that can be added safely to the current\n+growing object (or to an object about to be started) in obstack\n+@var{obstack} using the fast growth functions.\n+@end deftypefun\n+\n+While you know there is room, you can use these fast growth functions\n+for adding data to a growing object:\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun void obstack_1grow_fast (struct obstack *@var{obstack-ptr}, char @var{c})\n+The function @code{obstack_1grow_fast} adds one byte containing the\n+character @var{c} to the growing object in obstack @var{obstack-ptr}.\n+@end deftypefun\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun void obstack_ptr_grow_fast (struct obstack *@var{obstack-ptr}, void *@var{data})\n+The function @code{obstack_ptr_grow_fast} adds @code{sizeof (void *)}\n+bytes containing the value of @var{data} to the growing object in\n+obstack @var{obstack-ptr}.\n+@end deftypefun\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun void obstack_int_grow_fast (struct obstack *@var{obstack-ptr}, int @var{data})\n+The function @code{obstack_int_grow_fast} adds @code{sizeof (int)} bytes\n+containing the value of @var{data} to the growing object in obstack\n+@var{obstack-ptr}.\n+@end deftypefun\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun void obstack_blank_fast (struct obstack *@var{obstack-ptr}, int @var{size})\n+The function @code{obstack_blank_fast} adds @var{size} bytes to the\n+growing object in obstack @var{obstack-ptr} without initializing them.\n+@end deftypefun\n+\n+When you check for space using @code{obstack_room} and there is not\n+enough room for what you want to add, the fast growth functions\n+are not safe.  In this case, simply use the corresponding ordinary\n+growth function instead.  Very soon this will copy the object to a\n+new chunk; then there will be lots of room available again.\n+\n+So, each time you use an ordinary growth function, check afterward for\n+sufficient space using @code{obstack_room}.  Once the object is copied\n+to a new chunk, there will be plenty of space again, so the program will\n+start using the fast growth functions again.\n+\n+Here is an example:\n+\n+@smallexample\n+@group\n+void\n+add_string (struct obstack *obstack, const char *ptr, int len)\n+@{\n+  while (len > 0)\n+    @{\n+      int room = obstack_room (obstack);\n+      if (room == 0)\n+        @{\n+          /* @r{Not enough room. Add one character slowly,}\n+             @r{which may copy to a new chunk and make room.}  */\n+          obstack_1grow (obstack, *ptr++);\n+          len--;\n+        @}\n+      else\n+        @{\n+          if (room > len)\n+            room = len;\n+          /* @r{Add fast as much as we have room for.} */\n+          len -= room;\n+          while (room-- > 0)\n+            obstack_1grow_fast (obstack, *ptr++);\n+        @}\n+    @}\n+@}\n+@end group\n+@end smallexample\n+\n+@node Status of an Obstack\n+@section Status of an Obstack\n+@cindex obstack status\n+@cindex status of obstack\n+\n+Here are functions that provide information on the current status of\n+allocation in an obstack.  You can use them to learn about an object while\n+still growing it.\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun {void *} obstack_base (struct obstack *@var{obstack-ptr})\n+This function returns the tentative address of the beginning of the\n+currently growing object in @var{obstack-ptr}.  If you finish the object\n+immediately, it will have that address.  If you make it larger first, it\n+may outgrow the current chunk---then its address will change!\n+\n+If no object is growing, this value says where the next object you\n+allocate will start (once again assuming it fits in the current\n+chunk).\n+@end deftypefun\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun {void *} obstack_next_free (struct obstack *@var{obstack-ptr})\n+This function returns the address of the first free byte in the current\n+chunk of obstack @var{obstack-ptr}.  This is the end of the currently\n+growing object.  If no object is growing, @code{obstack_next_free}\n+returns the same value as @code{obstack_base}.\n+@end deftypefun\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefun int obstack_object_size (struct obstack *@var{obstack-ptr})\n+This function returns the size in bytes of the currently growing object.\n+This is equivalent to\n+\n+@smallexample\n+obstack_next_free (@var{obstack-ptr}) - obstack_base (@var{obstack-ptr})\n+@end smallexample\n+@end deftypefun\n+\n+@node Obstacks Data Alignment\n+@section Alignment of Data in Obstacks\n+@cindex alignment (in obstacks)\n+\n+Each obstack has an @dfn{alignment boundary}; each object allocated in\n+the obstack automatically starts on an address that is a multiple of the\n+specified boundary.  By default, this boundary is 4 bytes.\n+\n+To access an obstack's alignment boundary, use the macro\n+@code{obstack_alignment_mask}, whose function prototype looks like\n+this:\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefn Macro int obstack_alignment_mask (struct obstack *@var{obstack-ptr})\n+The value is a bit mask; a bit that is 1 indicates that the corresponding\n+bit in the address of an object should be 0.  The mask value should be one\n+less than a power of 2; the effect is that all object addresses are\n+multiples of that power of 2.  The default value of the mask is 3, so that\n+addresses are multiples of 4.  A mask value of 0 means an object can start\n+on any multiple of 1 (that is, no alignment is required).\n+\n+The expansion of the macro @code{obstack_alignment_mask} is an lvalue,\n+so you can alter the mask by assignment.  For example, this statement:\n+\n+@smallexample\n+obstack_alignment_mask (obstack_ptr) = 0;\n+@end smallexample\n+\n+@noindent\n+has the effect of turning off alignment processing in the specified obstack.\n+@end deftypefn\n+\n+Note that a change in alignment mask does not take effect until\n+@emph{after} the next time an object is allocated or finished in the\n+obstack.  If you are not growing an object, you can make the new\n+alignment mask take effect immediately by calling @code{obstack_finish}.\n+This will finish a zero-length object and then do proper alignment for\n+the next object.\n+\n+@node Obstack Chunks\n+@section Obstack Chunks\n+@cindex efficiency of chunks\n+@cindex chunks\n+\n+Obstacks work by allocating space for themselves in large chunks, and\n+then parceling out space in the chunks to satisfy your requests.  Chunks\n+are normally 4096 bytes long unless you specify a different chunk size.\n+The chunk size includes 8 bytes of overhead that are not actually used\n+for storing objects.  Regardless of the specified size, longer chunks\n+will be allocated when necessary for long objects.\n+\n+The obstack library allocates chunks by calling the function\n+@code{obstack_chunk_alloc}, which you must define.  When a chunk is no\n+longer needed because you have freed all the objects in it, the obstack\n+library frees the chunk by calling @code{obstack_chunk_free}, which you\n+must also define.\n+\n+These two must be defined (as macros) or declared (as functions) in each\n+source file that uses @code{obstack_init} (@pxref{Creating Obstacks}).\n+Most often they are defined as macros like this:\n+\n+@smallexample\n+#define obstack_chunk_alloc malloc\n+#define obstack_chunk_free free\n+@end smallexample\n+\n+Note that these are simple macros (no arguments).  Macro definitions with\n+arguments will not work!  It is necessary that @code{obstack_chunk_alloc}\n+or @code{obstack_chunk_free}, alone, expand into a function name if it is\n+not itself a function name.\n+\n+If you allocate chunks with @code{malloc}, the chunk size should be a\n+power of 2.  The default chunk size, 4096, was chosen because it is long\n+enough to satisfy many typical requests on the obstack yet short enough\n+not to waste too much memory in the portion of the last chunk not yet used.\n+\n+@comment obstack.h\n+@comment GNU\n+@deftypefn Macro int obstack_chunk_size (struct obstack *@var{obstack-ptr})\n+This returns the chunk size of the given obstack.\n+@end deftypefn\n+\n+Since this macro expands to an lvalue, you can specify a new chunk size by\n+assigning it a new value.  Doing so does not affect the chunks already\n+allocated, but will change the size of chunks allocated for that particular\n+obstack in the future.  It is unlikely to be useful to make the chunk size\n+smaller, but making it larger might improve efficiency if you are\n+allocating many objects whose size is comparable to the chunk size.  Here\n+is how to do so cleanly:\n+\n+@smallexample\n+if (obstack_chunk_size (obstack_ptr) < @var{new-chunk-size})\n+  obstack_chunk_size (obstack_ptr) = @var{new-chunk-size};\n+@end smallexample\n+\n+@node Summary of Obstacks\n+@section Summary of Obstack Functions\n+\n+Here is a summary of all the functions associated with obstacks.  Each\n+takes the address of an obstack (@code{struct obstack *}) as its first\n+argument.\n+\n+@table @code\n+@item void obstack_init (struct obstack *@var{obstack-ptr})\n+Initialize use of an obstack.  @xref{Creating Obstacks}.\n+\n+@item void *obstack_alloc (struct obstack *@var{obstack-ptr}, int @var{size})\n+Allocate an object of @var{size} uninitialized bytes.\n+@xref{Allocation in an Obstack}.\n+\n+@item void *obstack_copy (struct obstack *@var{obstack-ptr}, void *@var{address}, int @var{size})\n+Allocate an object of @var{size} bytes, with contents copied from\n+@var{address}.  @xref{Allocation in an Obstack}.\n+\n+@item void *obstack_copy0 (struct obstack *@var{obstack-ptr}, void *@var{address}, int @var{size})\n+Allocate an object of @var{size}+1 bytes, with @var{size} of them copied\n+from @var{address}, followed by a null character at the end.\n+@xref{Allocation in an Obstack}.\n+\n+@item void obstack_free (struct obstack *@var{obstack-ptr}, void *@var{object})\n+Free @var{object} (and everything allocated in the specified obstack\n+more recently than @var{object}).  @xref{Freeing Obstack Objects}.\n+\n+@item void obstack_blank (struct obstack *@var{obstack-ptr}, int @var{size})\n+Add @var{size} uninitialized bytes to a growing object.\n+@xref{Growing Objects}.\n+\n+@item void obstack_grow (struct obstack *@var{obstack-ptr}, void *@var{address}, int @var{size})\n+Add @var{size} bytes, copied from @var{address}, to a growing object.\n+@xref{Growing Objects}.\n+\n+@item void obstack_grow0 (struct obstack *@var{obstack-ptr}, void *@var{address}, int @var{size})\n+Add @var{size} bytes, copied from @var{address}, to a growing object,\n+and then add another byte containing a null character.  @xref{Growing\n+Objects}.\n+\n+@item void obstack_1grow (struct obstack *@var{obstack-ptr}, char @var{data-char})\n+Add one byte containing @var{data-char} to a growing object.\n+@xref{Growing Objects}.\n+\n+@item void *obstack_finish (struct obstack *@var{obstack-ptr})\n+Finalize the object that is growing and return its permanent address.\n+@xref{Growing Objects}.\n+\n+@item int obstack_object_size (struct obstack *@var{obstack-ptr})\n+Get the current size of the currently growing object.  @xref{Growing\n+Objects}.\n+\n+@item void obstack_blank_fast (struct obstack *@var{obstack-ptr}, int @var{size})\n+Add @var{size} uninitialized bytes to a growing object without checking\n+that there is enough room.  @xref{Extra Fast Growing}.\n+\n+@item void obstack_1grow_fast (struct obstack *@var{obstack-ptr}, char @var{data-char})\n+Add one byte containing @var{data-char} to a growing object without\n+checking that there is enough room.  @xref{Extra Fast Growing}.\n+\n+@item int obstack_room (struct obstack *@var{obstack-ptr})\n+Get the amount of room now available for growing the current object.\n+@xref{Extra Fast Growing}.\n+\n+@item int obstack_alignment_mask (struct obstack *@var{obstack-ptr})\n+The mask used for aligning the beginning of an object.  This is an\n+lvalue.  @xref{Obstacks Data Alignment}.\n+\n+@item int obstack_chunk_size (struct obstack *@var{obstack-ptr})\n+The size for allocating chunks.  This is an lvalue.  @xref{Obstack Chunks}.\n+\n+@item void *obstack_base (struct obstack *@var{obstack-ptr})\n+Tentative starting address of the currently growing object.\n+@xref{Status of an Obstack}.\n+\n+@item void *obstack_next_free (struct obstack *@var{obstack-ptr})\n+Address just after the end of the currently growing object.\n+@xref{Status of an Obstack}.\n+@end table\n+"}, {"sha": "a655b59f8e354129a2d50742a2e83bd31cb0f693", "filename": "libiberty/putenv.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fputenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fputenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fputenv.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -16,6 +16,19 @@\n    write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n    Boston, MA 02111-1307, USA.  */\n \n+/*\n+\n+@deftypefn Supplemental int putenv (const char *@var{string})\n+\n+Uses @code{setenv} or @code{unsetenv} to put @var{string} into\n+the environment or remove it.  If @var{string} is of the form\n+@samp{name=value} the string is added; if no `=' is present the\n+name is unset/removed.\n+\n+@end deftypefn\n+\n+*/\n+\n #if defined (_AIX) && !defined (__GNUC__)\n  #pragma alloca\n #endif"}, {"sha": "05630629c1fa8ddf5bae328fbd6d9b03d51a447f", "filename": "libiberty/rename.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Frename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Frename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Frename.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -1,7 +1,16 @@\n /* rename -- rename a file\n    This function is in the public domain. */\n \n-/* Rename a file.  */\n+/*\n+\n+@deftypefn Supplemental int rename (const char *@var{old}, const char *@var{new})\n+\n+Renames a file from @var{old} to @var{new}.  If @var{new} already\n+exists, it is removed.\n+\n+@end deftypefn\n+\n+*/\n \n #ifdef HAVE_CONFIG_H\n #include \"config.h\""}, {"sha": "ce397cc6029ea746098ad4d0ecbf63c11f176526", "filename": "libiberty/rindex.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Frindex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Frindex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Frindex.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -1,5 +1,17 @@\n /* Stub implementation of (obsolete) rindex(). */\n \n+/*\n+\n+@deftypefn Supplemental char* rindex (const char *@var{s}, int @var{c})\n+\n+Returns a pointer to the last occurance of the character @var{c} in\n+the string @var{s}, or NULL if not found.  The use of @code{rindex} is\n+deprecated in new programs in favor of @code{strrchr}.\n+\n+@end deftypefn\n+\n+*/\n+\n extern char *strrchr ();\n \n char *"}, {"sha": "dcf84e1106d2cd496a357ce68f7fcbba06a56b40", "filename": "libiberty/setenv.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fsetenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fsetenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsetenv.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -16,6 +16,22 @@\n    write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n    Boston, MA 02111-1307, USA.  */\n \n+\n+/*\n+\n+@deftypefn Supplemental int setenv (const char *@var{name}, const char *@var{value}, int @var{overwrite})\n+@deftypefnx Supplemental void unsetenv (const char *@var{name})\n+\n+@code{setenv} adds @var{name} to the environment with value\n+@var{value}.  If the name was already present in the environment,\n+the new value will be stored only if @var{overwrite} is non-zero.\n+The companion @code{unsetenv} function removes @var{name} from the\n+environment.  This implementation is not safe for multithreaded code.\n+\n+@end deftypefn\n+\n+*/\n+\n #if HAVE_CONFIG_H\n # include <config.h>\n #endif"}, {"sha": "f705fbb2df2b02c7964ea1f8f39fff56d1e3a377", "filename": "libiberty/sigsetmask.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fsigsetmask.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fsigsetmask.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsigsetmask.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -3,8 +3,17 @@\n    Contributed by Cygnus Support.\n    This file is in the public doamin. */\n \n-/* Set the current signal mask to the set provided, and return the \n-   previous value */\n+/*\n+\n+@deftypefn Supplemental int sigsetmask (int @var{set})\n+\n+Sets the signal mask to the one provided in @var{set} and returns\n+the old mask (which, for libiberty's implementation, will always\n+be the value @code{1}).\n+\n+@end deftypefn\n+\n+*/\n \n #define _POSIX_SOURCE\n #include <ansidecl.h>"}, {"sha": "dcfa407e5b5d552af5ae47bf7a5910704a60fa8c", "filename": "libiberty/strcasecmp.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrcasecmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrcasecmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrcasecmp.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -10,6 +10,16 @@\n  * is provided ``as is'' without express or implied warranty.\n  */\n \n+/*\n+  \n+@deftypefn Supplemental int strcasecmp (const char *@var{s1}, const char *@var{s2})\n+\n+A case-insensitive @code{strcmp}.\n+\n+@end deftypefn\n+\n+*/\n+\n #if defined(LIBC_SCCS) && !defined(lint)\n static char sccsid[] = \"@(#)strcasecmp.c\t5.5 (Berkeley) 11/24/87\";\n #endif /* LIBC_SCCS and not lint */"}, {"sha": "c1306dcea81dbde197eaead2ff26a3e8908929df", "filename": "libiberty/strchr.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrchr.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -2,19 +2,15 @@\n    This function is in the public domain.  */\n \n /*\n-NAME\n-\tstrchr -- return pointer to first occurance of a character\n \n-SYNOPSIS\n-\tchar *strchr (const char *s, int c)\n+@deftypefn Supplemental char* strchr (const char *@var{s}, int @var{c})\n+\n+Returns a pointer to the first occurance of the character @var{c} in\n+the string @var{s}, or NULL if not found.  If @var{c} is itself the\n+null character, the results are undefined.\n+\n+@end deftypefn\n \n-DESCRIPTION\n-\tReturns a pointer to the first occurance of character C in\n-\tstring S, or a NULL pointer if no occurance is found.\n-\t\n-BUGS\n-\tBehavior when character is the null character is implementation\n-\tdependent.\n */\n \n #include <ansidecl.h>"}, {"sha": "a01cedfbee03359de1dda64646283dba5f7f0acc", "filename": "libiberty/strdup.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrdup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrdup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrdup.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -1,3 +1,14 @@\n+/*\n+\n+@deftypefn Supplemental char* strdup (const char *@var{s})\n+\n+Returns a pointer to a copy of @var{s} in memory obtained from\n+@code{malloc}, or NULL if insufficient memory was available.\n+\n+@end deftypefn\n+\n+*/\n+\n char *\n strdup(s)\n      char *s;"}, {"sha": "dbc29a30f34070d2af960d402916a3a2fe628855", "filename": "libiberty/strerror.c", "status": "modified", "additions": 44, "deletions": 69, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrerror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrerror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrerror.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -562,28 +562,23 @@ init_error_tables ()\n \n /*\n \n-NAME\n-\n-\terrno_max -- return the max errno value\n \n-SYNOPSIS\n+@deftypefn Replacement int errno_max (void)\n \n-\tint errno_max ();\n+Returns the maximum @code{errno} value for which a corresponding\n+symbolic name or message is available.  Note that in the case where we\n+use the @code{sys_errlist} supplied by the system, it is possible for\n+there to be more symbolic names than messages, or vice versa.  In\n+fact, the manual page for @code{perror(3C)} explicitly warns that one\n+should check the size of the table (@code{sys_nerr}) before indexing\n+it, since new error codes may be added to the system before they are\n+added to the table.  Thus @code{sys_nerr} might be smaller than value\n+implied by the largest @code{errno} value defined in @file{errno.h}.\n \n-DESCRIPTION\n+We return the maximum value that can be used to obtain a meaningful\n+symbolic name or message.\n \n-\tReturns the maximum errno value for which a corresponding symbolic\n-\tname or message is available.  Note that in the case where\n-\twe use the sys_errlist supplied by the system, it is possible for\n-\tthere to be more symbolic names than messages, or vice versa.\n-\tIn fact, the manual page for perror(3C) explicitly warns that one\n-\tshould check the size of the table (sys_nerr) before indexing it,\n-\tsince new error codes may be added to the system before they are\n-\tadded to the table.  Thus sys_nerr might be smaller than value\n-\timplied by the largest errno value defined in <errno.h>.\n-\n-\tWe return the maximum value that can be used to obtain a meaningful\n-\tsymbolic name or message.\n+@end deftypefn\n \n */\n \n@@ -604,31 +599,25 @@ errno_max ()\n \n /*\n \n-NAME\n+@deftypefn Replacement char* strerror (int @var{errnoval})\n \n-\tstrerror -- map an error number to an error message string\n+Maps an @code{errno} number to an error message string, the contents\n+of which are implementation defined.  On systems which have the\n+external variables @code{sys_nerr} and @code{sys_errlist}, these\n+strings will be the same as the ones used by @code{perror}.\n \n-SYNOPSIS\n+If the supplied error number is within the valid range of indices for\n+the @code{sys_errlist}, but no message is available for the particular\n+error number, then returns the string @samp{\"Error NUM\"}, where NUM is\n+the error number.\n \n-\tchar *strerror (int errnoval)\n+If the supplied error number is not a valid index into\n+@code{sys_errlist}, returns NULL.\n \n-DESCRIPTION\n-\n-\tMaps an errno number to an error message string, the contents of\n-\twhich are implementation defined.  On systems which have the external\n-\tvariables sys_nerr and sys_errlist, these strings will be the same\n-\tas the ones used by perror().\n-\n-\tIf the supplied error number is within the valid range of indices\n-\tfor the sys_errlist, but no message is available for the particular\n-\terror number, then returns the string \"Error NUM\", where NUM is the\n-\terror number.\n+The returned string is only guaranteed to be valid only until the\n+next call to @code{strerror}.\n \n-\tIf the supplied error number is not a valid index into sys_errlist,\n-\treturns NULL.\n-\n-\tThe returned string is only guaranteed to be valid only until the\n-\tnext call to strerror.\n+@end deftypefn\n \n */\n \n@@ -678,32 +667,24 @@ strerror (errnoval)\n \n /*\n \n-NAME\n+@deftypefn Replacement const char* strerrno (int @var{errnum})\n \n-\tstrerrno -- map an error number to a symbolic name string\n+Given an error number returned from a system call (typically returned\n+in @code{errno}), returns a pointer to a string containing the\n+symbolic name of that error number, as found in @file{errno.h}.\n \n-SYNOPSIS\n+If the supplied error number is within the valid range of indices for\n+symbolic names, but no name is available for the particular error\n+number, then returns the string @samp{\"Error NUM\"}, where NUM is the\n+error number.\n \n-\tconst char *strerrno (int errnoval)\n+If the supplied error number is not within the range of valid\n+indices, then returns NULL.\n \n-DESCRIPTION\n-\n-\tGiven an error number returned from a system call (typically\n-\treturned in errno), returns a pointer to a string containing the\n-\tsymbolic name of that error number, as found in <errno.h>.\n-\n-\tIf the supplied error number is within the valid range of indices\n-\tfor symbolic names, but no name is available for the particular\n-\terror number, then returns the string \"Error NUM\", where NUM is\n-\tthe error number.\n-\n-\tIf the supplied error number is not within the range of valid\n-\tindices, then returns NULL.\n-\n-BUGS\n+The contents of the location pointed to are only guaranteed to be\n+valid until the next call to strerrno.\n \n-\tThe contents of the location pointed to are only guaranteed to be\n-\tvalid until the next call to strerrno.\n+@end deftypefn\n \n */\n \n@@ -746,18 +727,12 @@ strerrno (errnoval)\n \n /*\n \n-NAME\n-\n-\tstrtoerrno -- map a symbolic errno name to a numeric value\n-\n-SYNOPSIS\n-\n-\tint strtoerrno (char *name)\n+@deftypefn Replacement int strtoerrno (const char *@var{name})\n \n-DESCRIPTION\n+Given the symbolic name of a error number (e.g., @code{EACCESS}), map it\n+to an errno value.  If no translation is found, returns 0.\n \n-\tGiven the symbolic name of a error number, map it to an errno value.\n-\tIf no translation is found, returns 0.\n+@end deftypefn\n \n */\n "}, {"sha": "8ff06edefc44155beddc045c459c6aa9e3e3c7f6", "filename": "libiberty/strncasecmp.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrncasecmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrncasecmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrncasecmp.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -10,6 +10,16 @@\n  * is provided ``as is'' without express or implied warranty.\n  */\n \n+/*\n+  \n+@deftypefn Supplemental int strncasecmp (const char *@var{s1}, const char *@var{s2})\n+\n+A case-insensitive @code{strncmp}.\n+\n+@end deftypefn\n+\n+*/\n+\n #if defined(LIBC_SCCS) && !defined(lint)\n static char sccsid[] = \"@(#)strcasecmp.c\t5.5 (Berkeley) 11/24/87\";\n #endif /* LIBC_SCCS and not lint */"}, {"sha": "819cea6cb58be2a9fd5f0f96ae4245514e091837", "filename": "libiberty/strncmp.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrncmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrncmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrncmp.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -1,6 +1,17 @@\n /* strncmp -- compare two strings, stop after n bytes.\n    This function is in the public domain.  */\n \n+/*\n+\n+@deftypefn Supplemental int strncmp (const char *@var{s1}, const char *@var{s2}, size_t @var{n})\n+\n+Compares the first @var{n} bytes of two strings, returning a value as\n+@code{strcmp}.\n+\n+@end deftypefn\n+\n+*/\n+\n #include <ansidecl.h>\n #ifdef __STDC__\n #include <stddef.h>"}, {"sha": "704180094247ba5540ecb7e568d5997ccf277d71", "filename": "libiberty/strrchr.c", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrrchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrrchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrrchr.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -2,19 +2,15 @@\n    This function is in the public domain. */\n \n /*\n-NAME\n-\tstrrchr -- return pointer to last occurance of a character\n-\n-SYNOPSIS\n-\tchar *strrchr (const char *s, int c)\n-\n-DESCRIPTION\n-\tReturns a pointer to the last occurance of character C in\n-\tstring S, or a NULL pointer if no occurance is found.\n-\t\n-BUGS\n-\tBehavior when character is the null character is implementation\n-\tdependent.\n+\n+@deftypefn Supplemental char* strrchr (const char *@var{s}, int @var{c})\n+\n+Returns a pointer to the last occurance of the character @var{c} in\n+the string @var{s}, or NULL if not found.  If @var{c} is itself the\n+null character, the results are undefined.\n+\n+@end deftypefn\n+\n */\n \n #include <ansidecl.h>"}, {"sha": "e7360341bc02be061948cfba4bd31616b136eea2", "filename": "libiberty/strstr.c", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrstr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrstr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrstr.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -3,24 +3,16 @@\n \n /*\n \n-NAME\n+@deftypefn Supplemental char* strstr (const char *@var{string}, const char *@var{sub})\n \n-\tstrstr -- locate first occurance of a substring\n+This function searches for the substring @var{sub} in the string\n+@var{string}, not including the terminating NUL characters.  A pointer\n+to the first occurance of @var{sub} is returned, or NULL if the\n+substring is absent.  If @var{sub} points to a string with zero\n+length, the function returns @var{string}.\n \n-SYNOPSIS\n+@end deftypefn\n \n-\t#include <string.h>\n-\n-\tchar *strstr (char *s1, char *s2)\n-\n-DESCRIPTION\n-\n-\tLocates the first occurance in the string pointed to by S1 of\n-\tthe string pointed to by S2.  Returns a pointer to the substring\n-\tfound, or a NULL pointer if not found.  If S2 points to a string\n-\twith zero length, the function returns S1.\n-\t\n-BUGS\n \n */\n "}, {"sha": "2f0a0762fc36b45a0cce1f8cb5629c7b154f82a7", "filename": "libiberty/strtod.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrtod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrtod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrtod.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -22,6 +22,21 @@ the resulting executable to be covered by the GNU General Public License.\n This exception does not however invalidate any other reasons why\n the executable file might be covered by the GNU General Public License. */\n \n+/*\n+\n+@deftypefn Supplemental double strtod (const char *@var{string}, char **@var{endptr})\n+\n+This ANSI C function converts the initial portion of @var{string} to a\n+@code{double}.  If @var{endptr} is not NULL, a pointer to the\n+character after the last character used in the conversion is stored in\n+the location referenced by @var{endptr}.  If no conversion is\n+performed, zero is returned and the value of @var{string} is stored in\n+the location referenced by @var{endptr}.\n+\n+@end deftypefn\n+\n+*/\n+\n #include \"ansidecl.h\"\n #include \"safe-ctype.h\"\n "}, {"sha": "028d6101dfdfb1a9d171b7a76da0a678d27eb364", "filename": "libiberty/strtol.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrtol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fstrtol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrtol.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -28,6 +28,23 @@\n  * SUCH DAMAGE.\n  */\n \n+/*\n+\n+@deftypefn Supplemental {long int} strtol (const char *@var{string}, char **@var{endptr}, int @var{base})\n+\n+The @code{strtol} function converts the string in @var{string} to a\n+long integer value according to the given @var{base}, which must be\n+between 2 and 36 inclusive, or be the special value 0.  If @var{base}\n+is 0, @code{strtol} will look for the prefixes @code{0} and @code{0x}\n+to indicate bases 8 and 16, respectively, else default to base 10.\n+When the base is 16 (either explicitly or implicitly), a prefix of\n+@code{0x} is allowed.  The handling of endptr is as that of\n+@code{strtod} above.\n+\n+@end deftypefn\n+\n+*/\n+\n #ifdef HAVE_CONFIG_H\n #include \"config.h\"\n #endif"}, {"sha": "99615df7fe5d7454db7a542a725dd7cdff247787", "filename": "libiberty/tmpnam.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Ftmpnam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Ftmpnam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftmpnam.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -1,3 +1,17 @@\n+/*\n+\n+@deftypefn Supplemental char* tmpnam (char *@var{s})\n+\n+This function attempts to create a name for a temporary file, which\n+will be a valid file name yet not exist when @code{tmpnam} checks for\n+it.  @var{s} must point to a buffer of at least @code{L_tmpnam} bytes,\n+or be NULL.  Use of this function creates a security risk, and it must\n+not be used in new projects.  Use @code{mkstemp} instead.\n+\n+@end deftypefn\n+\n+*/\n+\n #include <stdio.h>\n \n #ifndef L_tmpnam"}, {"sha": "7df7a22626066bee874fee80ef350a882c6a0719", "filename": "libiberty/vfork.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fvfork.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fvfork.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvfork.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -1,6 +1,16 @@\n /* Emulate vfork using just plain fork, for systems without a real vfork.\n    This function is in the public domain. */\n \n+/*\n+\n+@deftypefn Supplemental int vfork ()\n+\n+Emulates @code{vfork} by calling @code{fork} and returning its value.\n+\n+@end deftypefn\n+\n+*/\n+\n #include \"ansidecl.h\"\n \n extern int fork PARAMS ((void));"}, {"sha": "c57c3e4f318431ebafa54e412407d4f72b97e13b", "filename": "libiberty/vprintf.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fvprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fvprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvprintf.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -1,3 +1,20 @@\n+/*\n+\n+@deftypefn Supplemental int vprintf (const char *@var{format}, va_list @var{ap})\n+@deftypefnx Supplemental int vfprintf (FILE *@var{stream}, const char *@var{format}, va_list @var{ap})\n+@deftypefnx Supplemental int vsprintf (char *@var{str}, const char *@var{format}, va_list @var{ap})\n+\n+These functions are the same as @code{printf}, @code{fprintf}, and\n+@code{sprintf}, respectively, except that they are called with a\n+@code{va_list} instead of a variable number of arguments.  Note that\n+they do not call @code{va_end}; this is the application's\n+responsibility.  In @libib{} they are implemented in terms of the\n+nonstandard but common function @code{_doprnt}.\n+\n+@end deftypefn\n+\n+*/\n+\n #ifdef __STDC__\n #include <stdarg.h>\n #else"}, {"sha": "703b8a6def21321146ce7c4083923a12bcd59932", "filename": "libiberty/waitpid.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fwaitpid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fwaitpid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fwaitpid.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -1,3 +1,15 @@\n+/*\n+\n+@deftypefn Supplemental int waitpid (int @var{pid}, int *@var{status}, int)\n+\n+This is a wrapper around the @code{wait} function.  Any ``special''\n+values of @var{pid} depend on your implementation of @code{wait}, as\n+does the return value.  The third argument is unused in @libib{}.\n+\n+@end deftypefn\n+\n+*/\n+\n #ifdef HAVE_CONFIG_H\n #include \"config.h\"\n #endif"}, {"sha": "f5d315032893d1f74f79d33e7c13b2e983d529ad", "filename": "libiberty/xatexit.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fxatexit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fxatexit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxatexit.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -5,6 +5,20 @@\n  * %sccs.include.redist.c%\n  */\n \n+\n+/*\n+\n+@deftypefun int xatexit (void (*@var{fn}) (void))\n+\n+Behaves as the standard @code{atexit} function, but with no limit on\n+the number of registered funtions.  Returns 0 on success, or -1 on\n+failure.  If you use @code{xatexit} to register functions, you must use\n+@code{xexit} to terminate your program.\n+\n+@end deftypefun\n+\n+*/\n+\n /* Adapted from newlib/libc/stdlib/{,at}exit.[ch].\n    If you use xatexit, you must call xexit instead of exit.  */\n "}, {"sha": "55ca55a7d6702f2bfcdf5b2de5b7d0bd35c43e83", "filename": "libiberty/xexit.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fxexit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fxexit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxexit.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -17,6 +17,18 @@ License along with libiberty; see the file COPYING.LIB.  If not, write\n to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+/*\n+\n+@deftypefn Replacement void xexit (int @var{code})\n+\n+Terminates the program.  If any functions have been registered with\n+the @code{xatexit} rpelacement function, they will be called first.\n+Termination is handled via the system's normal @code{exit} call.\n+\n+@end deftypefn\n+\n+*/\n+\n #ifdef HAVE_CONFIG_H\n #include \"config.h\"\n #endif"}, {"sha": "cb923d96f64824da62607da2ed1294028f193467", "filename": "libiberty/xmalloc.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fxmalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fxmalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxmalloc.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -17,6 +17,48 @@ License along with libiberty; see the file COPYING.LIB.  If\n not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+/*\n+\n+@deftypefn Replacement void* xmalloc (size_t)\n+\n+Allocate memory without fail.  If @code{malloc} fails, this will print\n+a message to stderr (using the name set by @code{xmalloc_set_program_name},\n+if any) and then call @code{xexit}.  Note that it is therefore safe for\n+a program to contain @code{#define malloc xmalloc} in its source.\n+\n+@end deftypefn\n+\n+@deftypefn Replacement void* xrealloc (void*, size_t)\n+Reallocate memory without fail.  This routine functions like @code{realloc},\n+but will behave the same as @code{xmalloc} if memory cannot be found.\n+\n+@end deftypefn\n+\n+@deftypefn Replacement void* xcalloc (size_t, size_t)\n+\n+Allocate memory without fail, and set it to zero.  This routine functions\n+like @code{calloc}, but will behave the same as @code{xmalloc} if memory\n+cannot be found.\n+\n+@end deftypefn\n+\n+@deftypefn Replacement void xmalloc_set_program_name (const char *@var{name})\n+\n+You can use this to set the name of the program used by\n+@code{xmalloc_failed} when printing a failure message.\n+\n+@end deftypefn\n+\n+@deftypefn Replacement void xmalloc_failed (size_t)\n+\n+This function is not meant to be called by client code, and is listed\n+here for completeness only.  If any of the allocation routines fail, this\n+function will be called to print an error message and terminate execution.\n+\n+@end deftypefn\n+\n+*/\n+\n #ifdef HAVE_CONFIG_H\n #include \"config.h\"\n #endif"}, {"sha": "9e9d66b715dbccafcef28f11a368af2ef64a3f1c", "filename": "libiberty/xmemdup.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fxmemdup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fxmemdup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxmemdup.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -2,6 +2,19 @@\n    This trivial function is in the public domain.\n    Jeff Garzik, September 1999.  */\n \n+/*\n+\n+@deftypefn Replacement void* xmemdup (void *@var{input}, size_t @var{copy_size}, size_t @var{alloc_size})\n+\n+Duplicates a region of memory without fail.  First, @var{alloc_size} bytes\n+are allocated, then @var{copy_size} bytes from @var{input} are copied into\n+it, and the new memory is returned.  If fewer bytes are copied than were\n+allocated, the remaining memory is zeroed.\n+\n+@end deftypefn\n+\n+*/\n+\n #ifdef HAVE_CONFIG_H\n #include \"config.h\"\n #endif"}, {"sha": "5aa084a768791c413d9405da227fa6f317ec6524", "filename": "libiberty/xstrdup.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fxstrdup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fxstrdup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxstrdup.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -2,6 +2,17 @@\n    This trivial function is in the public domain.\n    Ian Lance Taylor, Cygnus Support, December 1995.  */\n \n+/*\n+\n+@deftypefn Replacement char* xstrdup (const char *@var{s})\n+\n+Duplicates a character string without fail, using @code{xmalloc} to\n+obtain memory.\n+\n+@end deftypefn\n+\n+*/\n+\n #include <sys/types.h>\n #ifdef HAVE_CONFIG_H\n #include \"config.h\""}, {"sha": "5e57f158202a6e6505650cdf0345f68d740e4ed8", "filename": "libiberty/xstrerror.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fxstrerror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee/libiberty%2Fxstrerror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxstrerror.c?ref=aaa5f039eb95c50ee9dfb8b810f5b1d607cabeee", "patch": "@@ -2,6 +2,17 @@\n    Fri Jun 16 18:30:00 1995  Pat Rankin  <rankin@eql.caltech.edu>\n    This code is in the public domain.  */\n \n+/*\n+\n+@deftypefn Replacement char* xstrerror (int @var{errnum})\n+\n+Behaves exactly like the standard @code{strerror} function, but\n+will never return a NULL pointer.\n+\n+@end deftypefn\n+\n+*/\n+\n #include <stdio.h>\n \n #include \"libiberty.h\""}]}