{"sha": "32c69a56981bd72a52b7d234a2936020f97909d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJjNjlhNTY5ODFiZDcyYTUyYjdkMjM0YTI5MzYwMjBmOTc5MDlkMQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2020-08-12T21:34:29Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2020-08-12T21:34:29Z"}, "message": "PR target/96558: Only call ix86_expand_clear with GENERAL_REGS.\n\nThe following patch tightens the predicates of the peephole2 from my recent\n\"Integer min/max improvements patch\" to only hoist clearing a register when\nthat register is a general register.  Calling ix86_expand_clear with regs\nother than GENERAL_REGS is not supported.\n\n2020-08-12  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog\n\tPR target/96558\n\t* config/i386/i386.md (peephole2): Only reorder register clearing\n\tinstructions to allow use of xor for general registers.\n\ngcc/testsuite/ChangeLog\n\tPR target/96558\n\t* gcc.dg/pr96558.c: New test.", "tree": {"sha": "79477263f2452f353475f7bc4d3d2c012fcd2985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79477263f2452f353475f7bc4d3d2c012fcd2985"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32c69a56981bd72a52b7d234a2936020f97909d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32c69a56981bd72a52b7d234a2936020f97909d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32c69a56981bd72a52b7d234a2936020f97909d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32c69a56981bd72a52b7d234a2936020f97909d1/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86f8741485600457bc03d33692c5e5044b7bb479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86f8741485600457bc03d33692c5e5044b7bb479", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86f8741485600457bc03d33692c5e5044b7bb479"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "9d4e669e03b30b91987f8c8635874e36e0393ede", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32c69a56981bd72a52b7d234a2936020f97909d1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32c69a56981bd72a52b7d234a2936020f97909d1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=32c69a56981bd72a52b7d234a2936020f97909d1", "patch": "@@ -18938,7 +18938,7 @@\n ;; i.e. prefer \"xorl %eax,%eax; test/cmp\" over \"test/cmp; movl $0, %eax\".\n (define_peephole2\n   [(set (reg FLAGS_REG) (match_operand 0))\n-   (set (match_operand:SWI 1 \"register_operand\") (const_int 0))]\n+   (set (match_operand:SWI 1 \"general_reg_operand\") (const_int 0))]\n   \"peep2_regno_dead_p (0, FLAGS_REG)\n    && !reg_overlap_mentioned_p (operands[1], operands[0])\"\n    [(set (match_dup 2) (match_dup 0))]"}, {"sha": "2f5739e9e6eac0690e6e571135d976340702b175", "filename": "gcc/testsuite/gcc.dg/pr96558.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32c69a56981bd72a52b7d234a2936020f97909d1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96558.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32c69a56981bd72a52b7d234a2936020f97909d1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96558.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96558.c?ref=32c69a56981bd72a52b7d234a2936020f97909d1", "patch": "@@ -0,0 +1,32 @@\n+/* PR target/96558 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -fno-expensive-optimizations -fno-gcse\" } */\n+\n+int ky;\n+long int h1;\n+__int128 f1;\n+\n+int\n+sd (void);\n+\n+int __attribute__ ((simd))\n+i8 (void)\n+{\n+  __int128 vh;\n+\n+  if (sd () == 0)\n+    h1 = 0;\n+\n+  do\n+    {\n+      long int lf = (long int) f1 ? h1 : 0;\n+\n+      ky += lf;\n+      vh = lf | f1;\n+      f1 = 1;\n+    }\n+  while (vh < (f1 ^ 2));\n+\n+  return 0;\n+}\n+"}]}