{"sha": "844fa2de7b4d6d3b058dd9492c0a62e72e759979", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ0ZmEyZGU3YjRkNmQzYjA1OGRkOTQ5MmMwYTYyZTcyZTc1OTk3OQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-07-21T16:40:36Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-07-31T16:43:23Z"}, "message": "d: Split up the grouped compilable and runnable tests.\n\nThe majority of tests in runnable are really compilable/ICE tests, and\nhave have dg-do adjusted where necessary.  Tests that had a dependency\non Phobos have also been reproduced and reduced with all imports\nstripped from the test.\n\nThe end result is a collection of tests that only check the compiler bug\nthat was being fixed, rather than the library, and a reduction in time\nspent running all tests.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/compilable.d: Removed.\n\t* gdc.dg/gdc108.d: New test.\n\t* gdc.dg/gdc115.d: New test.\n\t* gdc.dg/gdc121.d: New test.\n\t* gdc.dg/gdc122.d: New test.\n\t* gdc.dg/gdc127.d: New test.\n\t* gdc.dg/gdc131.d: New test.\n\t* gdc.dg/gdc133.d: New test.\n\t* gdc.dg/gdc141.d: New test.\n\t* gdc.dg/gdc142.d: New test.\n\t* gdc.dg/gdc15.d: New test.\n\t* gdc.dg/gdc17.d: New test.\n\t* gdc.dg/gdc170.d: New test.\n\t* gdc.dg/gdc171.d: New test.\n\t* gdc.dg/gdc179.d: New test.\n\t* gdc.dg/gdc183.d: New test.\n\t* gdc.dg/gdc186.d: New test.\n\t* gdc.dg/gdc187.d: New test.\n\t* gdc.dg/gdc19.d: New test.\n\t* gdc.dg/gdc191.d: New test.\n\t* gdc.dg/gdc194.d: New test.\n\t* gdc.dg/gdc196.d: New test.\n\t* gdc.dg/gdc198.d: New test.\n\t* gdc.dg/gdc200.d: New test.\n\t* gdc.dg/gdc204.d: New test.\n\t* gdc.dg/gdc210.d: New test.\n\t* gdc.dg/gdc212.d: New test.\n\t* gdc.dg/gdc213.d: New test.\n\t* gdc.dg/gdc218.d: New test.\n\t* gdc.dg/gdc223.d: New test.\n\t* gdc.dg/gdc231.d: New test.\n\t* gdc.dg/gdc239.d: New test.\n\t* gdc.dg/gdc24.d: New test.\n\t* gdc.dg/gdc240.d: New test.\n\t* gdc.dg/gdc241.d: New test.\n\t* gdc.dg/gdc242a.d: New test.\n\t* gdc.dg/gdc242b.d: New test.\n\t* gdc.dg/gdc248.d: New test.\n\t* gdc.dg/gdc250.d: New test.\n\t* gdc.dg/gdc251.d: New test.\n\t* gdc.dg/gdc253a.d: New test.\n\t* gdc.dg/gdc253b.d: New test.\n\t* gdc.dg/gdc255.d: New test.\n\t* gdc.dg/gdc256.d: New test.\n\t* gdc.dg/gdc261.d: New test.\n\t* gdc.dg/gdc27.d: New test.\n\t* gdc.dg/gdc273.d: New test.\n\t* gdc.dg/gdc280.d: New test.\n\t* gdc.dg/gdc284.d: New test.\n\t* gdc.dg/gdc285.d: New test.\n\t* gdc.dg/gdc286.d: New test.\n\t* gdc.dg/gdc300.d: New test.\n\t* gdc.dg/gdc309.d: New test.\n\t* gdc.dg/gdc31.d: New test.\n\t* gdc.dg/gdc35.d: New test.\n\t* gdc.dg/gdc36.d: New test.\n\t* gdc.dg/gdc37.d: New test.\n\t* gdc.dg/gdc4.d: New test.\n\t* gdc.dg/gdc43.d: New test.\n\t* gdc.dg/gdc47.d: New test.\n\t* gdc.dg/gdc51.d: New test.\n\t* gdc.dg/gdc57.d: New test.\n\t* gdc.dg/gdc66.d: New test.\n\t* gdc.dg/gdc67.d: New test.\n\t* gdc.dg/gdc71.d: New test.\n\t* gdc.dg/gdc77.d: New test.\n\t* gdc.dg/imports/gdc239.d: Remove phobos dependency.\n\t* gdc.dg/imports/gdc241a.d: Updated imports.\n\t* gdc.dg/imports/gdc241b.d: Likewise.\n\t* gdc.dg/imports/gdc251a.d: Likewise.\n\t* gdc.dg/imports/gdc253.d: Rename to...\n\t* gdc.dg/imports/gdc253a.d: ...this.\n\t* gdc.dg/imports/gdc253b.d: New.\n\t* gdc.dg/imports/gdc36.d: New.\n\t* gdc.dg/imports/runnable.d: Removed.\n\t* gdc.dg/link.d: Removed.\n\t* gdc.dg/runnable.d: Removed.\n\t* gdc.dg/runnable2.d: Removed.\n\t* gdc.dg/simd.d: Remove phobos dependency.", "tree": {"sha": "830a9718f0038e0fcdc3d4c089eae74dfb48c669", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/830a9718f0038e0fcdc3d4c089eae74dfb48c669"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/844fa2de7b4d6d3b058dd9492c0a62e72e759979", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/844fa2de7b4d6d3b058dd9492c0a62e72e759979", "html_url": "https://github.com/Rust-GCC/gccrs/commit/844fa2de7b4d6d3b058dd9492c0a62e72e759979", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/844fa2de7b4d6d3b058dd9492c0a62e72e759979/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "239724956d4ef29dcaa7f1b378cc76f5f6a7ad5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/239724956d4ef29dcaa7f1b378cc76f5f6a7ad5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/239724956d4ef29dcaa7f1b378cc76f5f6a7ad5b"}], "stats": {"total": 4067, "additions": 1939, "deletions": 2128}, "files": [{"sha": "3f92f9b2957403c989fde48b18b43be6ef8a5e75", "filename": "gcc/testsuite/gdc.dg/compilable.d", "status": "removed", "additions": 0, "deletions": 444, "changes": 444, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239724956d4ef29dcaa7f1b378cc76f5f6a7ad5b/gcc%2Ftestsuite%2Fgdc.dg%2Fcompilable.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239724956d4ef29dcaa7f1b378cc76f5f6a7ad5b/gcc%2Ftestsuite%2Fgdc.dg%2Fcompilable.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fcompilable.d?ref=239724956d4ef29dcaa7f1b378cc76f5f6a7ad5b", "patch": "@@ -1,444 +0,0 @@\n-// { dg-options \"-I $srcdir/gdc.dg -I $srcdir/gdc.dg/imports -Wno-psabi\" }\n-// { dg-additional-sources \"imports/gdc27.d imports/gdc231.d\" }\n-// { dg-do compile }\n-\n-import core.simd;\n-import gcc.attribute;\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=27\n-\n-import imports.gdc27;\n-\n-interface I_B : I_A\n-{\n-    void b();\n-}\n-\n-abstract class C_B : C_A, I_B\n-{\n-    abstract void b();\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=108\n-\n-@attribute(\"forceinline\")\n-void forceinline108()\n-{\n-}\n-\n-@attribute(\"noinline\")\n-void noinline108()\n-{\n-}\n-\n-@attribute(\"flatten\")\n-void flatten108()\n-{\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=170\n-\n-import imports.gdc170;\n-\n-void test170()\n-{\n-    foo!void.foo1!void();\n-    foo!void.foo2!void();\n-    foo!void.foo3();\n-    foo!void.foo3!void();\n-    foo!void.foo4();\n-    foo!void.foo4!void();\n-    foo!void.foo5!void(null);\n-    foo!void.foo6!void(null);\n-    foo!void.foo7(null);\n-    foo!void.foo7!void(null);\n-    foo!void.foo8(null);\n-    foo!void.foo8!void(null);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=212\n-\n-template hasElaborateAssign212(S)\n-{\n-    enum hasElaborateAssign212 = is(typeof(S.init.opAssign(rvalueOf212!S))) ||\n-        is(typeof(lvalueOf212!S)) ;\n-}\n-\n-T rvalueOf212(T)();\n-\n-T lvalueOf212(T)();\n-\n-\n-template TypeTuple212(TList...)\n-{\n-    alias TypeTuple212 = TList;\n-}\n-\n-template Tuple212()\n-{\n-    struct Tuple212\n-    {\n-        void opAssign(R)(R)\n-        {\n-            if (hasElaborateAssign212!R)\n-            {\n-            }\n-        }\n-    }\n-}\n-\n-ref emplaceRef212()\n-{\n-    static if (!hasElaborateAssign212!(Tuple212!()))\n-        chunk;\n-}\n-\n-class TaskPool212\n-{\n-    void reduce()\n-    {\n-        Tuple212!() seed = void;\n-        Tuple212!()[] results;\n-        foreach(i; TypeTuple212!(0, 1))\n-            results[i] = seed;\n-    }\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=213\n-\n-struct S213\n-{\n-    int4 vec;\n-}\n-\n-void test213()\n-{\n-    S213 s, b;\n-\n-    assert(s == b);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=218\n-\n-struct S218a\n-{\n-    this(int* pdata_)\n-    {\n-        pdata = pdata_;\n-    }\n-\n-    void opIndexAssign(int, size_t) { }\n-    int* pdata;\n-};\n-\n-struct S218\n-{\n-    S218a getS218a()\n-    {\n-        return S218a(data.ptr);\n-    }\n-\n-    int[] data;\n-    int[] tab2;\n-};\n-\n-S218 f()\n-{\n-    S218 r;\n-\n-    for(int i = 0; i < 1; ++i)\n-        r.getS218a()[0] = 0;\n-\n-    return r;\n-}\n-\n-S218 var;\n-\n-static this()\n-{\n-    var = f();\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=223\n-\n-struct S223\n-{\n-    long[8] field;\n-}\n-\n-class C223\n-{\n-    long[8] field;\n-}\n-\n-S223 test223_1();\n-real test223_2();\n-string[long[8]] test223_3();\n-C223 test223_4();\n-long test223_5();\n-long[] test223_6();\n-long[8] test223_7();\n-C223[8] test223_8();\n-void delegate() test223_9();\n-\n-bool test223()\n-{\n-    return test223_1() == test223_1() &&\n-           test223_1() is test223_1() &&\n-           test223_2() == test223_2() &&\n-           test223_2() is test223_2() &&\n-           test223_3() == test223_3() &&\n-           test223_3() is test223_3() &&\n-           test223_4() == test223_4() &&\n-           test223_4() is test223_4() &&\n-           test223_5() == test223_5() &&\n-           test223_5() is test223_5() &&\n-           test223_6() == test223_6() &&\n-           test223_6() is test223_6() &&\n-           test223_7() == test223_7() &&\n-           test223_7() is test223_7() &&\n-           test223_8() == test223_8() &&\n-           test223_8() is test223_8() &&\n-           test223_9() == test223_9() &&\n-           test223_9() is test223_9();\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=231\n-\n-import imports.gdc231;\n-\n-class Range231 : Widget231\n-{\n-    override void* getStruct()\n-    {\n-        return null;\n-    }\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=239\n-\n-import imports.gdc239;\n-\n-class C239\n-{\n-    C239a *foo;\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=240\n-\n-interface I204\n-{\n-      void f();\n-}\n-\n-class C204 : I204\n-{\n-      void f();\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=241\n-\n-import imports.gdc241a;\n-public import imports.gdc241b : S241, C241, E241, N241;\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=242\n-\n-struct S242a\n-{\n-    enum M = S242a();\n-    void iter() { }\n-}\n-\n-void test242a()\n-{\n-    return S242a.M.iter;\n-}\n-\n-struct S242b\n-{\n-    enum M = S242b();\n-    void iter() { }\n-}\n-\n-void test242b()\n-{\n-    S242b.M.iter;\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=251\n-\n-import imports.gdc251a;\n-import imports.gdc251b : C251;\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=253\n-\n-import imports.gdc253;\n-\n-class C253 : C253a\n-{\n-    void test253() { }\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=255\n-\n-class C255\n-{\n-    void f2()\n-    {\n-        class C1\n-        {\n-            void f1()\n-            {\n-                void f0()\n-                {\n-                    class C0\n-                    {\n-                        void test255()\n-                        {\n-                            f2();\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-class C255a\n-{\n-    void f3()\n-    {\n-        class C1\n-        {\n-            void f2()\n-            {\n-                void f1()\n-                {\n-                    void f0()\n-                    {\n-                        class C0\n-                        {\n-                            void test255a()\n-                            {\n-                                f3();\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-class C255b\n-{\n-    void f4()\n-    {\n-        class C2\n-        {\n-            void f3()\n-            {\n-                void f2()\n-                {\n-                    class C1\n-                    {\n-                        void f1()\n-                        {\n-                            void f0()\n-                            {\n-                                class C0\n-                                {\n-                                    void test255b()\n-                                    {\n-                                        f4();\n-                                    }\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=256\n-\n-import imports.gdcpkg256 : gdc256;\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=261\n-\n-void test261()\n-{\n-    class C1\n-    {\n-        void f1()\n-        {\n-            class C2\n-            {\n-                void f2()\n-                {\n-                    auto v = &f1;\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=280\n-\n-struct RBNode280\n-{\n-    RBNode280* _parent;\n-\n-    @property left(RBNode280*)\n-    {\n-        _parent = &this;\n-    }\n-}\n-\n-class RedBlackTree280\n-{\n-    RBNode280* _end;\n-    RBNode280* _begin;\n-\n-    this(int[] elems...)\n-    {\n-        _end = new RBNode280;\n-\n-        foreach (e; elems)\n-        {\n-            _end.left = _begin;\n-        }\n-    }\n-}\n-\n-__gshared s = new RedBlackTree280('h');\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=284\n-\n-alias v284 = __vector(int[2]);\n-\n-v284 test284(v284 a, ...)\n-{\n-    return a + a;\n-}"}, {"sha": "dc214e4b57e4fdde498c5e2ff9f1bcd1f2152b45", "filename": "gcc/testsuite/gdc.dg/gdc108.d", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc108.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc108.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc108.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,19 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=108\n+// { dg-do compile }\n+\n+import gcc.attribute;\n+\n+@attribute(\"forceinline\")\n+void forceinline108()\n+{\n+}\n+\n+@attribute(\"noinline\")\n+void noinline108()\n+{\n+}\n+\n+@attribute(\"flatten\")\n+void flatten108()\n+{\n+}"}, {"sha": "8eca2eb19c2b2a028b9a147b8851a5e3de4f712d", "filename": "gcc/testsuite/gdc.dg/gdc115.d", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc115.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc115.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc115.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,16 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=115\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+void main()\n+{\n+    union U\n+    {\n+        float f;\n+        uint i;\n+    }\n+    float a = 123.0;\n+    const l = U(a);\n+\n+    assert(l.i == U(a).i);\n+}"}, {"sha": "a04a2646dc555f6532a39a6000194a2b12cc35cf", "filename": "gcc/testsuite/gdc.dg/gdc121.d", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc121.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc121.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc121.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,4 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=121\n+// { dg-do compile }\n+\n+immutable char C121 = void; // ICE"}, {"sha": "0f2feef30c9d8791953dff5cd6deb50c0b17da62", "filename": "gcc/testsuite/gdc.dg/gdc122.d", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc122.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc122.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc122.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,36 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=122\n+// { dg-do compile }\n+\n+struct map(alias fun)\n+{\n+    @property run()\n+    {\n+    }\n+}\n+\n+struct Task(Args)\n+{\n+    Args _args;\n+}\n+\n+class TaskPool\n+{\n+    template reduce(functions...)\n+    {\n+        auto reduce(Args)(Args args)\n+        {\n+            alias RTask = Task!(typeof(args));\n+            auto task = RTask();\n+        }\n+    }\n+}\n+\n+TaskPool taskPool() {\n+    return new TaskPool;\n+}\n+\n+void test122()\n+{\n+    enum delta = 1;\n+    taskPool.reduce!\"a + b\"(map!({ immutable x = delta; })());\n+}"}, {"sha": "9de85aa5a0a47750f8a14c584f51912635722d72", "filename": "gcc/testsuite/gdc.dg/gdc127.d", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc127.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc127.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc127.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,6 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=127\n+// { dg-do compile }\n+\n+int[0] test127a;     // OK\n+int[1][0] test127b;  // OK\n+int[0][1] test127c;  // ICE"}, {"sha": "394a90998e2f73e535fd18b42246aa51fcd308e6", "filename": "gcc/testsuite/gdc.dg/gdc131.d", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc131.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc131.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc131.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,15 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=131\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+struct S131\n+{\n+    this(string ) { }\n+    string opAssign(string v) { return v; }\n+}\n+\n+void main()\n+{\n+    S131[string] s;\n+    s[\"foo\"] = \"bar\";\n+}"}, {"sha": "c694db6a83583a7c75241620e8c8908563d54e5d", "filename": "gcc/testsuite/gdc.dg/gdc133.d", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc133.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc133.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc133.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,16 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=133\n+// { dg-do compile }\n+\n+void delegate()[] D133;\n+\n+void test133a(void delegate() dg)\n+{\n+    D133 ~= dg;\n+}\n+\n+void test133()\n+{\n+    void nested()\n+    {}\n+    test133a(&nested);\n+}"}, {"sha": "9a3d5c56c3e94979aea91ce8d416a80f503f7b8c", "filename": "gcc/testsuite/gdc.dg/gdc141.d", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc141.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc141.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc141.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,14 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=141\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+bool test141(int a)\n+{\n+    return a > (a + 1);\n+}\n+\n+void main()\n+{\n+    assert(test141(int.min) == false);\n+    assert(test141(int.max) == true);\n+}"}, {"sha": "92cf5051b210a9a1a3f49cc09942378e7cd9805f", "filename": "gcc/testsuite/gdc.dg/gdc142.d", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc142.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc142.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc142.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,15 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=142\n+// { dg-do compile }\n+\n+import gcc.attribute;\n+\n+@attribute(\"noinline\")\n+int test142a()()\n+{\n+    return 142;\n+}\n+\n+void test142()\n+{\n+    enum E142 = test142a();\n+}"}, {"sha": "935a42871f93fb8097dbdf2fa1be22f227c8f224", "filename": "gcc/testsuite/gdc.dg/gdc15.d", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc15.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc15.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc15.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,35 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=15\n+// { dg-do compile }\n+\n+template map(fun...)\n+{\n+    auto map(Range)(Range r)\n+    {\n+        return MapResult!(fun, Range)(r);\n+    }\n+}\n+\n+private struct MapResult(alias fun, Range)\n+{\n+    Range _input;\n+\n+    this(Range input)\n+    {\n+        _input = input;\n+    }\n+}\n+\n+class B\n+{\n+    class A { }\n+    A a;\n+}\n+\n+class C\n+{\n+    void visit(B b)\n+    {\n+        auto as = [b.a];\n+        map!((d) { return d; })(as);\n+    }\n+}"}, {"sha": "0fd58479835d368ced6125826a81eb7280918ba6", "filename": "gcc/testsuite/gdc.dg/gdc17.d", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc17.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc17.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc17.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,37 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=17\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+/**\n+ * Parameters are not copied into a frame to be accessed from\n+ * the method's __require function.\n+ */\n+void contractTest(string path)\n+{\n+    assert(path[0] == 't');\n+    assert(path.length == 9);\n+    assert(path[8] == 'i');\n+}\n+\n+interface ModuleSaver\n+{\n+    void save(string str)\n+    in\n+    {\n+        contractTest(str);\n+    }\n+}\n+\n+class ModuleWriter : ModuleSaver\n+{\n+    void save (string str)\n+    in {}\n+    do\n+    {\n+    }\n+}\n+\n+void main()\n+{\n+  (new ModuleWriter()).save (\"test.0.mci\");\n+}"}, {"sha": "a63db31b8fba3130efc9a6e0982f29c11e2195e5", "filename": "gcc/testsuite/gdc.dg/gdc170.d", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc170.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc170.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc170.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,21 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=170\n+// { dg-options \"-I $srcdir/gdc.dg\" }\n+// { dg-do compile }\n+\n+import imports.gdc170;\n+\n+void test170()\n+{\n+    foo!void.foo1!void();\n+    foo!void.foo2!void();\n+    foo!void.foo3();\n+    foo!void.foo3!void();\n+    foo!void.foo4();\n+    foo!void.foo4!void();\n+    foo!void.foo5!void(null);\n+    foo!void.foo6!void(null);\n+    foo!void.foo7(null);\n+    foo!void.foo7!void(null);\n+    foo!void.foo8(null);\n+    foo!void.foo8!void(null);\n+}"}, {"sha": "f8b7fde70a6e374096d589a3db632ff0062195cb", "filename": "gcc/testsuite/gdc.dg/gdc171.d", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc171.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc171.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc171.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,38 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=171\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+void test171a()\n+{\n+    int count = 0;\n+    short a = -1;\n+    while (a != 0)\n+    {\n+        a >>>= 1;\n+        count++;\n+        assert(count <= 16);\n+    }\n+}\n+\n+void test171b()\n+{\n+    uint[3] lhs = [99, 201, 300],\n+            rhs = [-1, 0, 0];\n+    long t = 0;\n+\n+    for (int i = 0; i < 3; i++)\n+    {\n+        t += lhs[i];\n+        t -= rhs[i];\n+        lhs[i] = cast(uint) t;\n+        t >>= uint.sizeof * 8;\n+    }\n+\n+    assert(lhs == [100, 200, 300]);\n+}\n+\n+void main()\n+{\n+    test171a();\n+    test171b();\n+}"}, {"sha": "72fe0b74e4b1d4bbde2d5bf21d038093047e98ce", "filename": "gcc/testsuite/gdc.dg/gdc179.d", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc179.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc179.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc179.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,32 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=179\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+import core.stdc.stdio;\n+\n+struct S179a\n+{\n+    @disable this(this);\n+}\n+\n+struct S179b\n+{\n+    S179a s1;\n+    void connect() { printf(\"this=%p\\n\", &this); }\n+}\n+\n+class C179\n+{\n+    private S179b s2;\n+    ref S179b value() @property\n+    {\n+        printf(\"this=%p\\n\", &s2);\n+        return s2;\n+    }\n+}\n+\n+void main()\n+{\n+    C179 a = new C179;\n+    a.value.connect();\n+}"}, {"sha": "aa8a79c53e549461f00b8ca28bb88b9dd9b49028", "filename": "gcc/testsuite/gdc.dg/gdc183.d", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc183.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc183.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc183.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,60 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=183\n+// { dg-do compile }\n+\n+struct S183a\n+{\n+    union I183a\n+    {\n+        struct\n+        {\n+            double x, y, z;\n+        }\n+        struct\n+        {\n+            double a, b, c;\n+        }\n+    }\n+\n+    I183a inner;\n+\n+    this(double x, double y, double z)\n+    {\n+        this.inner.x = x;\n+        this.inner.y = y;\n+        this.inner.z = z;\n+    }\n+}\n+\n+struct S183b\n+{\n+    @property get()\n+    {\n+        union Buf\n+        {\n+            void[0] result;\n+        }\n+        const Buf buf = { };\n+        return buf.result;\n+    }\n+}\n+\n+struct S183c\n+{\n+    @property get()\n+    {\n+        union Buf\n+        {\n+            TypeInfo info;\n+            void[0] result;\n+        }\n+        const Buf buf = { };\n+        return buf.result;\n+    }\n+}\n+\n+void test183()\n+{\n+    auto v1 = S183a(0, 0, 0);\n+    auto v2 = S183b().get;\n+    auto v3 = S183c().get;\n+}"}, {"sha": "4a1a91a709c832730a5a84ab20327cf4383f7e46", "filename": "gcc/testsuite/gdc.dg/gdc186.d", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc186.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc186.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc186.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,60 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=186\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+struct S186\n+{\n+    union\n+    {\n+        struct\n+        {\n+            ubyte fieldA;\n+            byte  fieldB = -1;\n+            byte fieldC = -1;\n+        }\n+        size_t _complete;\n+    }\n+\n+    this(size_t complete)\n+    {\n+        this._complete = complete;\n+    }\n+}\n+\n+static if (size_t.sizeof == 8)\n+    enum checkval = 0x0200000000000002;\n+else\n+    enum checkval = 0x02000002;\n+\n+void check186(in S186 obj, byte fieldB)\n+{\n+    assert(obj.fieldA == 2);\n+    assert(obj.fieldB == 0);\n+    assert(obj.fieldC == 0);\n+    assert(obj._complete == checkval);\n+    assert(fieldB == 0);\n+}\n+\n+void test186(size_t val)\n+{\n+    S186 obj = S186(val);\n+    check186(obj, obj.fieldB);\n+\n+    assert(obj.fieldA == 2);\n+    assert(obj.fieldB == 0);\n+    assert(obj.fieldC == 0);\n+    assert(obj._complete == checkval);\n+\n+    obj = S186(val);\n+    check186(obj, obj.fieldB);\n+\n+    assert(obj.fieldA == 2);\n+    assert(obj.fieldB == 0);\n+    assert(obj.fieldC == 0);\n+    assert(obj._complete == checkval);\n+}\n+\n+void main()\n+{\n+    test186(checkval);\n+}"}, {"sha": "2f469ad81f68af7811de3dcd022add8960eeac46", "filename": "gcc/testsuite/gdc.dg/gdc187.d", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc187.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc187.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc187.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,40 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=187\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+align(1) struct S187b\n+{\n+    align(1)\n+    {\n+        uint unpaddedA;\n+        ushort unpaddedB;\n+    }\n+}\n+\n+struct S187a\n+{\n+    S187b[3] unpaddedArray;\n+    ubyte wontInitialize = ubyte.init;\n+}\n+\n+struct S187\n+{\n+    S187a interesting;\n+}\n+\n+\n+void prepareStack()\n+{\n+    byte[255] stackGarbage;\n+    foreach(i, ref b; stackGarbage)\n+    {\n+        b  = cast(byte)(-i);\n+    }\n+}\n+\n+void main()\n+{\n+    prepareStack();\n+    auto a = S187(S187a());\n+    assert(a.interesting.wontInitialize == 0);\n+}"}, {"sha": "c461e9f144883cca18c6862a56f739509a797cc6", "filename": "gcc/testsuite/gdc.dg/gdc19.d", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc19.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc19.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc19.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,8 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=19\n+// { dg-do compile }\n+\n+void test19()\n+{\n+   byte b;\n+   --b = b;\n+}"}, {"sha": "4d2ca9df0ca40d59045056680e204d351ce2c95e", "filename": "gcc/testsuite/gdc.dg/gdc191.d", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc191.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc191.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc191.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,201 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=191\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+class C191\n+{\n+    int count = 0;\n+\n+    void testA()\n+    {\n+        class Inner\n+        {\n+            void test()\n+            {\n+                void localFunction()\n+                {\n+                    if (++count != 5)\n+                        testA();\n+                }\n+                localFunction();\n+            }\n+        }\n+        scope ic = new Inner();\n+        ic.test();\n+    }\n+\n+    void testB()\n+    {\n+        class Inner\n+        {\n+            void test()\n+            {\n+                void localFunction()\n+                {\n+                    void anotherLocalFunction()\n+                    {\n+                        if (++count != 10)\n+                            testB();\n+                    }\n+                    anotherLocalFunction();\n+                }\n+                localFunction();\n+            }\n+        }\n+        scope ic = new Inner();\n+        ic.test();\n+    }\n+\n+    void testC()\n+    {\n+        class Inner\n+        {\n+            int a = 1;\n+\n+            void test()\n+            {\n+                void localFunction()\n+                {\n+                    count += a;\n+                    if (count != 15)\n+                        testC();\n+                    assert(a == 1);\n+                }\n+                localFunction();\n+            }\n+        }\n+        scope ic = new Inner();\n+        ic.test();\n+    }\n+\n+    void testD()\n+    {\n+        class Inner\n+        {\n+            void test()\n+            {\n+                int a = 1;\n+\n+                void localFunction()\n+                {\n+                    count += a;\n+                    if (count != 20)\n+                        testD();\n+                    assert(a == 1);\n+                }\n+                localFunction();\n+            }\n+        }\n+        scope ic = new Inner();\n+        ic.test();\n+    }\n+\n+    void testE()\n+    {\n+        class Inner\n+        {\n+            int a = 1;\n+\n+            void test()\n+            {\n+                void localFunction()\n+                {\n+                    void anotherLocalFunction()\n+                    {\n+                        count += a;\n+                        if (count != 25)\n+                            testE();\n+                        assert(a == 1);\n+                    }\n+\n+                    anotherLocalFunction();\n+                }\n+\n+                localFunction();\n+            }\n+        }\n+        scope ic = new Inner();\n+        ic.test();\n+    }\n+\n+    void testF()\n+    {\n+        class Inner\n+        {\n+            void test()\n+            {\n+                int a = 1;\n+\n+                void localFunction()\n+                {\n+                    void anotherLocalFunction()\n+                    {\n+                        count += a;\n+                        if (count != 30)\n+                            testF();\n+                        assert(a == 1);\n+                    }\n+\n+                    anotherLocalFunction();\n+                }\n+\n+                localFunction();\n+            }\n+        }\n+        scope ic = new Inner();\n+        ic.test();\n+    }\n+\n+    void testG()\n+    {\n+        class Inner\n+        {\n+            void test()\n+            {\n+                void localFunction()\n+                {\n+                    int a = 1;\n+\n+                    void anotherLocalFunction()\n+                    {\n+                        count += a;\n+                        if (count != 35)\n+                            testG();\n+                        assert(a == 1);\n+                    }\n+\n+                    anotherLocalFunction();\n+                }\n+\n+                localFunction();\n+            }\n+        }\n+        scope ic = new Inner();\n+        ic.test();\n+    }\n+}\n+\n+void main()\n+{\n+    scope oc = new C191();\n+    oc.testA();\n+    assert(oc.count == 5);\n+\n+    oc.testB();\n+    assert(oc.count == 10);\n+\n+    oc.testC();\n+    assert(oc.count == 15);\n+\n+    oc.testD();\n+    assert(oc.count == 20);\n+\n+    oc.testE();\n+    assert(oc.count == 25);\n+\n+    oc.testF();\n+    assert(oc.count == 30);\n+\n+    oc.testG();\n+    assert(oc.count == 35);\n+}"}, {"sha": "6802895c769dd7577f23665eded8bd621489107f", "filename": "gcc/testsuite/gdc.dg/gdc194.d", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc194.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc194.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc194.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,9 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=194\n+// { dg-do compile }\n+\n+auto test194(ref bool overflow)\n+{\n+    import core.checkedint;\n+\n+    return adds(1, 1, overflow);\n+}"}, {"sha": "750cef81c970eceec6c4c198c7c5b6c056c3879b", "filename": "gcc/testsuite/gdc.dg/gdc196.d", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc196.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc196.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc196.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,21 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=196\n+// { dg-do assemble }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+class C196\n+{\n+    int a;\n+}\n+\n+struct S196\n+{\n+    int a;\n+}\n+\n+void test196()\n+{\n+    __gshared c = new C196();\n+    __gshared s = new S196(0);\n+    c.a = 1;\n+    s.a = 1;\n+}"}, {"sha": "09daf85045dc7ae4c6bb3485bb0adb8d64312ee0", "filename": "gcc/testsuite/gdc.dg/gdc198.d", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc198.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc198.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc198.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,71 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=198\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+struct S198a\n+{\n+    union\n+    {\n+        float[3] v;\n+        struct\n+        {\n+            float x;\n+            float y;\n+            float z;\n+        }\n+    }\n+\n+    this(float x_, float y_, float z_)\n+    {\n+        x = x_;\n+        y = y_;\n+        z = z_;\n+    }\n+\n+    ref S198a opOpAssign(string op)(S198a operand)\n+    if (op == \"+\")\n+    {\n+        x += operand.x;\n+        y += operand.y;\n+        z += operand.z;\n+        return this;\n+    }\n+}\n+\n+struct S198b\n+{\n+    @property get()\n+    {\n+        union Buf\n+        {\n+            void[0] result;\n+        }\n+        const Buf buf = { };\n+        return buf.result;\n+    }\n+}\n+\n+struct S198c\n+{\n+    @property get()\n+    {\n+        union Buf\n+        {\n+            TypeInfo info;\n+            void[0] result;\n+        }\n+        const Buf buf = { };\n+        return buf.result;\n+    }\n+}\n+\n+\n+void main()\n+{\n+    S198a sum = S198a(0, 0, 0);\n+\n+    foreach(size_t v; 0 .. 3)\n+        sum += S198a(1, 2, 3);\n+\n+    assert(sum.v == [3, 6, 9]);\n+}"}, {"sha": "585d60fe76347392359b87d1e1c3358b33c0f74f", "filename": "gcc/testsuite/gdc.dg/gdc200.d", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc200.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc200.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc200.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,16 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=200\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+void test200a(double x, double y)\n+{\n+  const double y2 = x + 1.0;\n+  assert(y == y2);\n+}\n+\n+void main()\n+{\n+  const double x = .012;\n+  const double y = x + 1.0;\n+  test200a(x, y);\n+}"}, {"sha": "5c7554f64097e9c709a0c2046cd75eb490efc2ed", "filename": "gcc/testsuite/gdc.dg/gdc204.d", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc204.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc204.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc204.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,12 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=204\n+// { dg-do compile }\n+\n+interface I204\n+{\n+      void f();\n+}\n+\n+class C204 : I204\n+{\n+      void f();\n+}"}, {"sha": "0f560731b22d41d599ca92a430e35def4971f1a5", "filename": "gcc/testsuite/gdc.dg/gdc210.d", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc210.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc210.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc210.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,62 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=210\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+struct S210\n+{\n+    ubyte a;\n+    uint b;\n+}\n+\n+union U210\n+{\n+    S210 a;\n+    uint b;\n+}\n+\n+S210 test210a()\n+{\n+    S210 s = S210(1, 2);\n+    return s;\n+}\n+\n+S210[2] test210b()\n+{\n+    S210[2] s = [S210(1, 2), S210(3, 4)];\n+    return s;\n+}\n+\n+U210 test210c()\n+{\n+    U210 s = U210(S210(1, 2));\n+    return s;\n+}\n+\n+U210[2] test210d()\n+{\n+    U210[2] s = [U210(S210(1, 2)), U210(S210(3, 4))];\n+    return s;\n+}\n+\n+void main()\n+{\n+    S210 a = S210(1, 2);\n+    assert(a == S210(1, 2));\n+    assert(a == test210a());\n+    assert(a != S210(2, 1));\n+\n+    S210[2] b = [S210(1, 2), S210(3, 4)];\n+    assert(b == [S210(1, 2), S210(3, 4)]);\n+    assert(b == test210b());\n+    assert(b != [S210(2, 1), S210(3, 4)]);\n+\n+    U210 c = U210(S210(1, 2));\n+    assert(c == U210(S210(1, 2)));\n+    assert(c == test210c());\n+    assert(c != U210(S210(2, 1)));\n+\n+    U210[2] d = [U210(S210(1, 2)), U210(S210(3, 4))];\n+    assert(d == [U210(S210(1, 2)), U210(S210(3, 4))]);\n+    assert(d == test210d());\n+    assert(d != [U210(S210(2, 1)), U210(S210(3, 4))]);\n+}"}, {"sha": "417c1fc8f54220db63695928863b5cee9e9a0690", "filename": "gcc/testsuite/gdc.dg/gdc212.d", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc212.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc212.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc212.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,48 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=212\n+// { dg-do compile }\n+\n+template hasElaborateAssign212(S)\n+{\n+    enum hasElaborateAssign212 = is(typeof(S.init.opAssign(rvalueOf212!S))) ||\n+        is(typeof(lvalueOf212!S)) ;\n+}\n+\n+T rvalueOf212(T)();\n+\n+T lvalueOf212(T)();\n+\n+\n+template TypeTuple212(TList...)\n+{\n+    alias TypeTuple212 = TList;\n+}\n+\n+template Tuple212()\n+{\n+    struct Tuple212\n+    {\n+        void opAssign(R)(R)\n+        {\n+            if (hasElaborateAssign212!R)\n+            {\n+            }\n+        }\n+    }\n+}\n+\n+ref emplaceRef212()\n+{\n+    static if (!hasElaborateAssign212!(Tuple212!()))\n+        chunk;\n+}\n+\n+class TaskPool212\n+{\n+    void reduce()\n+    {\n+        Tuple212!() seed = void;\n+        Tuple212!()[] results;\n+        foreach(i; TypeTuple212!(0, 1))\n+            results[i] = seed;\n+    }\n+}"}, {"sha": "11e5c63f9e3e4eb466117aba503a4a6216dff393", "filename": "gcc/testsuite/gdc.dg/gdc213.d", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc213.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc213.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc213.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,17 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=213\n+// { dg-options \"-Wno-psabi\" }\n+// { dg-do compile }\n+\n+import core.simd;\n+\n+struct S213\n+{\n+    int4 vec;\n+}\n+\n+void test213()\n+{\n+    S213 s, b;\n+\n+    assert(s == b);\n+}"}, {"sha": "3e7eb16940aa28a997fa3ce42ec1721873550f48", "filename": "gcc/testsuite/gdc.dg/gdc218.d", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc218.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc218.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc218.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,41 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=218\n+// { dg-do compile }\n+\n+struct S218a\n+{\n+    this(int* pdata_)\n+    {\n+        pdata = pdata_;\n+    }\n+\n+    void opIndexAssign(int, size_t) { }\n+    int* pdata;\n+};\n+\n+struct S218\n+{\n+    S218a getS218a()\n+    {\n+        return S218a(data.ptr);\n+    }\n+\n+    int[] data;\n+    int[] tab2;\n+};\n+\n+S218 f()\n+{\n+    S218 r;\n+\n+    for(int i = 0; i < 1; ++i)\n+        r.getS218a()[0] = 0;\n+\n+    return r;\n+}\n+\n+S218 var;\n+\n+static this()\n+{\n+    var = f();\n+}"}, {"sha": "a5a9dccbe465255cf3c068fd0b83a606f30e95eb", "filename": "gcc/testsuite/gdc.dg/gdc223.d", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc223.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc223.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc223.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,43 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=223\n+// { dg-do compile }\n+\n+struct S223\n+{\n+    long[8] field;\n+}\n+\n+class C223\n+{\n+    long[8] field;\n+}\n+\n+S223 test223_1();\n+real test223_2();\n+string[long[8]] test223_3();\n+C223 test223_4();\n+long test223_5();\n+long[] test223_6();\n+long[8] test223_7();\n+C223[8] test223_8();\n+void delegate() test223_9();\n+\n+bool test223()\n+{\n+    return test223_1() == test223_1() &&\n+           test223_1() is test223_1() &&\n+           test223_2() == test223_2() &&\n+           test223_2() is test223_2() &&\n+           test223_3() == test223_3() &&\n+           test223_3() is test223_3() &&\n+           test223_4() == test223_4() &&\n+           test223_4() is test223_4() &&\n+           test223_5() == test223_5() &&\n+           test223_5() is test223_5() &&\n+           test223_6() == test223_6() &&\n+           test223_6() is test223_6() &&\n+           test223_7()[] is test223_7()[] &&\n+           test223_8() == test223_8() &&\n+           test223_8()[] is test223_8()[] &&\n+           test223_9() == test223_9() &&\n+           test223_9() is test223_9();\n+}"}, {"sha": "f029fc0212c1eb586b95616877abc236ea527174", "filename": "gcc/testsuite/gdc.dg/gdc231.d", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc231.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc231.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc231.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,13 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=231\n+// { dg-additional-sources \"imports/gdc231.d\" }\n+// { dg-do compile }\n+\n+import imports.gdc231;\n+\n+class Range231 : Widget231\n+{\n+    override void* getStruct()\n+    {\n+        return null;\n+    }\n+}"}, {"sha": "0fcc82e87fa5150b49cd2813e1bebcc848385e34", "filename": "gcc/testsuite/gdc.dg/gdc239.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc239.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc239.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc239.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,10 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=239\n+// { dg-options \"-I $srcdir/gdc.dg\" }\n+// { dg-do compile }\n+\n+import imports.gdc239;\n+\n+class C239\n+{\n+    C239a *foo;\n+}"}, {"sha": "b61aae47d923702f8d7ad43f6a8ef2f8b2713732", "filename": "gcc/testsuite/gdc.dg/gdc24.d", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc24.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc24.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc24.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,15 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=24\n+// { dg-do compile }\n+\n+void test24()\n+{\n+    struct S24\n+    {\n+        char[1] b;\n+    }\n+\n+    S24 a;\n+\n+    if (*a.b.ptr)\n+        return;\n+}"}, {"sha": "76f6dcf8db7502bc7fb4df9028ecdae3597a5d69", "filename": "gcc/testsuite/gdc.dg/gdc240.d", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc240.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc240.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc240.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,16 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=240\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+void test240(int a, int b)\n+{\n+    assert(a == 0);\n+    assert(b == 0);\n+}\n+\n+void main()\n+{\n+    int a = 0;\n+    test240(a, a++);\n+    assert(a == 1);\n+}"}, {"sha": "964d81e8ac30e179ca99529a98f767e8741fd269", "filename": "gcc/testsuite/gdc.dg/gdc241.d", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc241.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc241.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc241.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,6 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=241\n+// { dg-options \"-I $srcdir/gdc.dg\" }\n+// { dg-do compile }\n+\n+import imports.gdc241a;\n+public import imports.gdc241b : S241, C241, E241, N241;"}, {"sha": "14486828e3ffd2481767b1b8920ce23c46a3d4ab", "filename": "gcc/testsuite/gdc.dg/gdc242a.d", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc242a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc242a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc242a.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,24 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=242\n+// { dg-do compile }\n+\n+struct S242a\n+{\n+    enum M = S242a();\n+    void iter() { }\n+}\n+\n+void test242a()\n+{\n+    return S242a.M.iter;\n+}\n+\n+struct S242b\n+{\n+    enum M = S242b();\n+    void iter() { }\n+}\n+\n+void test242b()\n+{\n+    S242b.M.iter;\n+}"}, {"sha": "cfba4b484b345f79e7da3220baa7a5a2f99c4c52", "filename": "gcc/testsuite/gdc.dg/gdc242b.d", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc242b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc242b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc242b.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,25 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=242\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+struct S242\n+{\n+    enum M = S242();\n+    int a = 42;\n+\n+    auto iter()\n+    {\n+        this.a = 24;\n+        return this;\n+    }\n+}\n+\n+S242 test242()\n+{\n+    return S242.M.iter;\n+}\n+\n+void main()\n+{\n+    assert(test242() == S242(24));\n+}"}, {"sha": "0fd0277bd468a123d1f911e8aedf80c332686c43", "filename": "gcc/testsuite/gdc.dg/gdc248.d", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc248.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc248.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc248.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,44 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=248\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+class C248b\n+{\n+    bool isintegral()\n+    {\n+        return false;\n+    }\n+}\n+\n+class C248a\n+{\n+    int count = 0;\n+\n+    C248b getMemtype()\n+    {\n+        count++;\n+        return new C248b();\n+    }\n+}\n+\n+class C248\n+{\n+    C248a sym;\n+\n+    this()\n+    {\n+        this.sym = new C248a();\n+    }\n+\n+    bool isintegral()\n+    {\n+        return sym.getMemtype().isintegral();\n+    }\n+}\n+\n+void main()\n+{\n+    C248 e = new C248();\n+    e.isintegral();\n+    assert(e.sym.count == 1);\n+}"}, {"sha": "c8182da8bb149c3fc92c866779c81c34deda4b83", "filename": "gcc/testsuite/gdc.dg/gdc250.d", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc250.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc250.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc250.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,18 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=250\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+void main()\n+{\n+    struct S\n+    {\n+        string data;\n+    }\n+\n+    auto a = S(\"hello\");\n+    auto b = S(\"hello\".dup);\n+\n+    assert(a.data == b.data);\n+    assert(a == b);\n+    assert([a] == [b]);\n+}"}, {"sha": "2e9f18c9c484edf8ba4d406c96aed56c53849266", "filename": "gcc/testsuite/gdc.dg/gdc251.d", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc251.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc251.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc251.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,6 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=251\n+// { dg-options \"-I $srcdir/gdc.dg\" }\n+// { dg-do compile }\n+\n+import imports.gdc251a;\n+import imports.gdc251b : C251;"}, {"sha": "2439721ff1e6197cbd3c50fa70b940a5b8a9256d", "filename": "gcc/testsuite/gdc.dg/gdc253a.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc253a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc253a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc253a.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,10 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=253\n+// { dg-additional-sources \"imports/gdc253a.d\" }\n+// { dg-do compile }\n+\n+import imports.gdc253a;\n+\n+class C253 : C253a\n+{\n+    void test253() { }\n+}"}, {"sha": "916932d0ea0125f652b49ee184434548f2b84482", "filename": "gcc/testsuite/gdc.dg/gdc253b.d", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc253b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc253b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc253b.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,19 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=253\n+// { dg-additional-sources \"imports/gdc253b.d\" }\n+// { dg-options \"-I $srcdir/gdc.dg\" }\n+// { dg-do compile }\n+\n+import imports.gdc253b;\n+\n+interface A253\n+{\n+    void test253(int[int]);\n+}\n+\n+interface C253 : A253\n+{\n+}\n+\n+class D253 : B253, C253\n+{\n+}"}, {"sha": "8070f8e6b5c4517c73c665abbfbd1e5c2bf7aa5c", "filename": "gcc/testsuite/gdc.dg/gdc255.d", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc255.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc255.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc255.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,83 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=255\n+// { dg-do compile }\n+\n+class C255\n+{\n+    void f2()\n+    {\n+        class C1\n+        {\n+            void f1()\n+            {\n+                void f0()\n+                {\n+                    class C0\n+                    {\n+                        void test255()\n+                        {\n+                            f2();\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+class C255a\n+{\n+    void f3()\n+    {\n+        class C1\n+        {\n+            void f2()\n+            {\n+                void f1()\n+                {\n+                    void f0()\n+                    {\n+                        class C0\n+                        {\n+                            void test255a()\n+                            {\n+                                f3();\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+class C255b\n+{\n+    void f4()\n+    {\n+        class C2\n+        {\n+            void f3()\n+            {\n+                void f2()\n+                {\n+                    class C1\n+                    {\n+                        void f1()\n+                        {\n+                            void f0()\n+                            {\n+                                class C0\n+                                {\n+                                    void test255b()\n+                                    {\n+                                        f4();\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "89b1aadd36e7cbb860df98f6a242c3cbd3ad8f1a", "filename": "gcc/testsuite/gdc.dg/gdc256.d", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc256.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc256.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc256.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,5 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=256\n+// { dg-options \"-I $srcdir/gdc.dg\" }\n+// { dg-do compile }\n+\n+import imports.gdcpkg256 : gdc256;"}, {"sha": "593e5feff9c923ea7af0fcf8463ef66042d64a7c", "filename": "gcc/testsuite/gdc.dg/gdc261.d", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc261.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc261.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc261.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,19 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=261\n+// { dg-do compile }\n+\n+void test261()\n+{\n+    class C1\n+    {\n+        void f1()\n+        {\n+            class C2\n+            {\n+                void f2()\n+                {\n+                    auto v = &f1;\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "d0ff61e8e1dc76116eed9015c4b04a859d75b99a", "filename": "gcc/testsuite/gdc.dg/gdc27.d", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc27.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc27.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc27.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,18 @@\n+// { dg-options \"-I $srcdir/gdc.dg/imports\" }\n+// { dg-additional-sources \"imports/gdc27.d\" }\n+// { dg-do compile }\n+\n+/******************************************/\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=27\n+\n+import imports.gdc27;\n+\n+interface I_B : I_A\n+{\n+    void b();\n+}\n+\n+abstract class C_B : C_A, I_B\n+{\n+    abstract void b();\n+}"}, {"sha": "b5d2b10359324fbde028e377d9ffbd0c24b733b6", "filename": "gcc/testsuite/gdc.dg/gdc273.d", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc273.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc273.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc273.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,19 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=273\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+class B273\n+{\n+    B273[] members;\n+}\n+\n+class D273 : B273\n+{\n+}\n+\n+void main()\n+{\n+    auto noPointers = ClassInfo.ClassFlags.noPointers;\n+    assert((B273.classinfo.m_flags & noPointers) == 0);\n+    assert((D273.classinfo.m_flags & noPointers) == 0);\n+}"}, {"sha": "5be3af7dfff128d9657999c980fd243d1303c84e", "filename": "gcc/testsuite/gdc.dg/gdc280.d", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc280.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc280.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc280.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,30 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=280\n+// { dg-do compile }\n+\n+struct RBNode280\n+{\n+    RBNode280* _parent;\n+\n+    @property left(RBNode280*)\n+    {\n+        _parent = &this;\n+    }\n+}\n+\n+class RedBlackTree280\n+{\n+    RBNode280* _end;\n+    RBNode280* _begin;\n+\n+    this(int[] elems...)\n+    {\n+        _end = new RBNode280;\n+\n+        foreach (e; elems)\n+        {\n+            _end.left = _begin;\n+        }\n+    }\n+}\n+\n+__gshared s = new RedBlackTree280('h');"}, {"sha": "c8854287911f2b33118dcb25c2bd5c63b975b6c5", "filename": "gcc/testsuite/gdc.dg/gdc284.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc284.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc284.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc284.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,10 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=284\n+// { dg-options \"-Wno-psabi\" }\n+// { dg-do compile }\n+\n+alias v284 = __vector(int[2]);\n+\n+v284 test284(v284 a, ...)\n+{\n+    return a + a;\n+}"}, {"sha": "f94ffb5f15235f51999a8119148c69b7a7e0cc08", "filename": "gcc/testsuite/gdc.dg/gdc285.d", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc285.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc285.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc285.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,15 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=285\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+inout(char)[] test285(inout(char)* s) @nogc @system pure nothrow\n+{\n+    import core.stdc.string : strlen;\n+    return s ? s[0 .. strlen(s)] : null;\n+}\n+\n+void main()\n+{\n+    assert(test285(null) == null);\n+    assert(test285(\"foo\") == \"foo\");\n+}"}, {"sha": "2536ef6e26a5e0ca58b08765266a49779c8e628c", "filename": "gcc/testsuite/gdc.dg/gdc286.d", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc286.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc286.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc286.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,37 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=286\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+void main()\n+{\n+    struct K286\n+    {\n+        int count;\n+        this(this)\n+        {\n+            count++;\n+        }\n+    }\n+\n+    struct S286\n+    {\n+        int data;\n+        this(K286 key)\n+        {\n+            data = key.count;\n+        }\n+    }\n+\n+    S286 getData(K286 key)\n+    {\n+        static S286[K286] getCache;\n+        auto p = key in getCache;\n+        if (p)\n+            return *p;\n+        return (getCache[key] = S286(key));\n+    }\n+\n+    auto s = getData(K286());\n+    if (s.data == 0)\n+        assert(0);\n+}"}, {"sha": "d1aae5933876547b8911aa7110c977e50e3542db", "filename": "gcc/testsuite/gdc.dg/gdc300.d", "status": "renamed", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc300.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc300.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc300.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -1,16 +1,6 @@\n-// { dg-do link { target d_runtime_has_std_library } }\n-\n-/******************************************/\n-\n-class C1()\n-{\n-    static struct S1 { A1 a; }\n-}\n-\n-enum E1 = is(C1!());\n-\n-/******************************************/\n // https://bugzilla.gdcproject.org/show_bug.cgi?id=300\n+// { dg-additional-options \"-fmain\" }\n+// { dg-do link { target d_runtime_has_std_library } }\n \n struct S300(Range)\n {\n@@ -33,7 +23,3 @@ void link300()\n     auto sample = link300a(I());\n     sample.test(5);\n }\n-\n-/******************************************/\n-\n-void main() {}", "previous_filename": "gcc/testsuite/gdc.dg/link.d"}, {"sha": "bbcb6e7a41292e0678cccd2584a39fb3f812704c", "filename": "gcc/testsuite/gdc.dg/gdc309.d", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc309.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc309.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc309.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,41 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=309\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+void main()\n+{\n+    creal f1 = +0.0 + 0.0i;\n+    creal f2 = +0.0 - 0.0i;\n+    creal f3 = -0.0 + 0.0i;\n+    creal f4 = +0.0 + 0.0i;\n+\n+    assert(f1 !is f2);\n+    assert(f1 !is f3);\n+    assert(f2 !is f3);\n+    assert(f1 is f4);\n+\n+    assert(!(f1 is f2));\n+    assert(!(f1 is f3));\n+    assert(!(f2 is f3));\n+    assert(!(f1 !is f4));\n+\n+    struct CReal\n+    {\n+        creal value;\n+    }\n+\n+    CReal s1 = CReal(+0.0 + 0.0i);\n+    CReal s2 = CReal(+0.0 - 0.0i);\n+    CReal s3 = CReal(-0.0 + 0.0i);\n+    CReal s4 = CReal(+0.0 + 0.0i);\n+\n+    assert(s1 !is s2);\n+    assert(s1 !is s3);\n+    assert(s2 !is s3);\n+    assert(s1 is s4);\n+\n+    assert(!(s1 is s2));\n+    assert(!(s1 is s3));\n+    assert(!(s2 is s3));\n+    assert(!(s1 !is s4));\n+}"}, {"sha": "97dc88d551e19634ee0b2ff4817d285c5c192101", "filename": "gcc/testsuite/gdc.dg/gdc31.d", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc31.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc31.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc31.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,25 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=31\n+// { dg-do compile }\n+\n+class RedBlackTree(T, alias less)\n+{\n+    struct Range\n+    {\n+        @property empty() { }\n+    }\n+\n+    Range opSlice()\n+    {\n+        return Range();\n+    }\n+}\n+\n+auto redBlackTree(alias less, E)()\n+{\n+    return new RedBlackTree!(E, less);\n+}\n+\n+void test31()\n+{\n+    redBlackTree!((a){}, double)();\n+}"}, {"sha": "773a78a73f52a11c42b05f55af0ff9d33b0f5cac", "filename": "gcc/testsuite/gdc.dg/gdc35.d", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc35.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc35.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc35.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,73 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=35\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+/**\n+ * Here the BinaryHeap instance uses an alias parameter and therefore\n+ * the instance's functions (percolateDown) need to be generated in\n+ * topNIndex->BinaryHeap scope and not in the declaration scope\n+ * (module->BinaryHeap).\n+ */\n+void topNIndex()()\n+{\n+    bool indirectLess(int a, int b)\n+    {\n+        return a > b;\n+    }\n+\n+    auto a = BinaryHeap!(indirectLess)();\n+}\n+\n+struct BinaryHeap(alias less)\n+{\n+    void percolateDown()\n+    {\n+        less(0, 1);\n+    }\n+}\n+\n+void test35a()\n+{\n+    topNIndex();\n+}\n+\n+/*\n+ * Similar as test35a but with an additional indirection.\n+ * The nested function chain for percolateDown should look like this:\n+ * topNIndex2->BinaryHeap2->percolateDown.\n+ */\n+void topNIndex2()()\n+{\n+    bool indirectLess(int a, int b)\n+    {\n+        return a > b;\n+    }\n+    auto a = BinaryHeap2!(S35b!(indirectLess)())();\n+}\n+\n+struct S35b(alias a)\n+{\n+    void foo()\n+    {\n+        a(0, 0);\n+    }\n+}\n+\n+struct BinaryHeap2(alias less)\n+{\n+    void percolateDown()\n+    {\n+        less.foo();\n+    }\n+}\n+\n+void test35b()\n+{\n+    topNIndex2();\n+}\n+\n+void main()\n+{\n+    test35a();\n+    test35b();\n+}"}, {"sha": "fbb876c28b33a5a8df99843c5c950d17ed40e493", "filename": "gcc/testsuite/gdc.dg/gdc36.d", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc36.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc36.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc36.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,125 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=36\n+// { dg-additional-sources \"imports/gdc36.d\" }\n+// { dg-options \"-I $srcdir/gdc.dg\" }\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+module gdc36;\n+\n+import imports.gdc36;\n+\n+/**\n+ * Here getChar is a function in a template where template.isnested == false\n+ * but getChar still is a nested function and needs to get a static chain\n+ * containing test36a.\n+ */\n+void test36a()(char val)\n+{\n+    void error()\n+    {\n+    }\n+\n+    void getChar()()\n+    {\n+        error();\n+    }\n+\n+    void parseString()\n+    {\n+        getChar();\n+    }\n+}\n+\n+/**\n+ * Similar as test36a, but a little more complicated:\n+ * Here getChar is nested in a struct template which is nested in a function.\n+ * getChar's static chain still needs to contain test36b.\n+ */\n+void test36b()(char val)\n+{\n+    void error()\n+    {\n+    }\n+\n+    struct S(T)\n+    {\n+        void getChar()\n+        {\n+            error();\n+        }\n+    }\n+\n+\n+    void parseString()\n+    {\n+        S!(int)().getChar();\n+    }\n+}\n+\n+/**\n+ * If g had accessed a, the frontend would have generated a closure.\n+ *\n+ * As we do not access it, there's no closure. We have to be careful\n+ * not to set a static chain for g containing test36c_1 though,\n+ * as g can be called from outside (here from test1c). In the end\n+ * we have to treat this as if everything in test36c_1 was declared\n+ * at module scope.\n+ */\n+auto test36c_1()\n+{\n+    int a;\n+    void c() {}\n+    class Result\n+    {\n+        int b;\n+        void g() { c(); /*a = 42;*/ }\n+    }\n+\n+    return new Result();\n+}\n+\n+void test36c()\n+{\n+    test36c_1().g();\n+}\n+\n+/**\n+ * empty is a (private) function which is nested in lightPostprocess.\n+ * At the same time it's a template instance, so it has to be declared as\n+ * weak or otherwise one-only. imports/gdc36.d creates another instance\n+ * of Regex!char to verify that.\n+ */\n+struct Parser(R)\n+{\n+    @property program()\n+    {\n+        return Regex!char();\n+    }\n+}\n+\n+struct Regex(Char)\n+{\n+    @trusted lightPostprocess()\n+    {\n+        struct FixedStack(T)\n+        {\n+            @property empty() { return false; }\n+        }\n+        auto counterRange = FixedStack!uint();\n+    }\n+}\n+\n+void test36d()\n+{\n+    auto parser = Parser!(char[])();\n+    imports.gdc36.test36d_1;\n+}\n+\n+void main()\n+{\n+  test36a('n');\n+  test36b('n');\n+  test36c();\n+  test36d();\n+}\n+"}, {"sha": "171ace527a0bccde1fd6b9b685edafe11f28a8fc", "filename": "gcc/testsuite/gdc.dg/gdc37.d", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc37.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc37.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc37.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,16 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=37\n+// { dg-do compile }\n+\n+struct S37\n+{\n+    int bar(const S37 s)\n+    {\n+        return 0;\n+    }\n+}\n+\n+int test37()\n+{\n+    S37 s;\n+    return s.bar(s);\n+}"}, {"sha": "9a7499a1490b949a2fe98109bd771d9d77a96b43", "filename": "gcc/testsuite/gdc.dg/gdc4.d", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc4.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc4.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc4.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,9 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=4\n+// { dg-do compile }\n+\n+void test4()\n+{\n+    string str = \"allo\";\n+    static assert(!__traits(compiles, str.reverse));\n+    static assert(!__traits(compiles, str.sort));\n+}"}, {"sha": "e0d44a21b4eeb3f282eb23eca31be7a049d07ef0", "filename": "gcc/testsuite/gdc.dg/gdc43.d", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc43.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc43.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc43.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,29 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=43\n+// { dg-do compile }\n+\n+void main()\n+{\n+    import core.vararg;\n+    import core.stdc.stdio;\n+\n+    void formatArray(ref va_list argptr)\n+    {\n+        auto a = va_arg!(const(float)[])(argptr);\n+        foreach(f; a)\n+        {\n+            printf(\"%f\\n\", f);\n+        }\n+    }\n+\n+    void doFormat(TypeInfo[] arguments, va_list argptr)\n+    {\n+        formatArray(argptr);\n+    }\n+\n+    void format(...)\n+    {\n+        doFormat(_arguments, _argptr);\n+    }\n+\n+    format([1.0f, 2.0f, 3.0f]);\n+}"}, {"sha": "e85451af1acf2f6dbb3f9c4024a59849cb358f5f", "filename": "gcc/testsuite/gdc.dg/gdc47.d", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc47.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc47.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc47.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,12 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=47\n+// { dg-do compile }\n+\n+template Foo47()\n+{\n+    void test47()\n+    {\n+        asm { \"nop\"; }\n+    }\n+}\n+\n+mixin Foo47!();"}, {"sha": "e6ffbd470b07e2eb18ea2caf544dc4eaf88db298", "filename": "gcc/testsuite/gdc.dg/gdc51.d", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc51.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc51.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc51.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,29 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=51\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+struct S51\n+{\n+    int x;\n+    int pad;\n+\n+    this(this)\n+    {\n+        ++x;\n+    }\n+}\n+\n+void main()\n+{\n+    S51 s;\n+    auto sarr = new S51[1];\n+    auto sarr2 = sarr;\n+\n+    // postblit all fields.\n+    sarr2 ~= s;\n+\n+    assert (sarr2[0].x == 1);\n+    assert (sarr2[1].x == 1);\n+    assert (sarr[0].x == 0);\n+    assert (s.x == 0);\n+}"}, {"sha": "b378286066a816f9a3cf811d4a4c363b4e4f7c98", "filename": "gcc/testsuite/gdc.dg/gdc57.d", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc57.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc57.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc57.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,21 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=57\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+struct S57\n+{\n+    int a;\n+    long b;\n+    // Doesn't happen for bigger structs\n+}\n+\n+S57 bar57()\n+{\n+    return S57(4, 42);\n+}\n+\n+void main()\n+{\n+    S57 s = bar57();\n+    assert (s is S57(4, 42));\n+}"}, {"sha": "f499c8352af8d568b0fb9307adbf880d824c2484", "filename": "gcc/testsuite/gdc.dg/gdc66.d", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc66.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc66.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc66.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,14 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=66\n+// { dg-do run { target hw } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+void main()\n+{\n+    int pos = 0;\n+\n+    foreach(x; 0 .. 64)\n+    {\n+        ++pos %= 4;\n+        assert (pos != 4);\n+    }\n+}"}, {"sha": "9289abfadc71be9c541f4fff3448b0078144fda0", "filename": "gcc/testsuite/gdc.dg/gdc67.d", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc67.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc67.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc67.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,4 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=67\n+// { dg-do compile }\n+\n+__vector(float[4])[2] d;  // ICE"}, {"sha": "c2eb2dd3b7b52e5c4b417fa5a1f49940a23cd93e", "filename": "gcc/testsuite/gdc.dg/gdc71.d", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc71.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc71.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc71.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,27 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=71\n+// { dg-do compile }\n+\n+struct CanonicalHuffman\n+{\n+    int[] table;\n+\n+    void print()\n+    {\n+        table.sort!(a => a);\n+    }\n+}\n+\n+struct SortedRange(alias pred )\n+{\n+    auto trisect() { }\n+}\n+\n+auto assumeSorted(alias pred , R)(R )\n+{\n+    return SortedRange!pred();\n+}\n+\n+SortedRange!(less) sort(alias less, Range)(Range r)\n+{\n+    return assumeSorted!less(r);\n+}"}, {"sha": "6c081753a9156131445c81e8e41edd18014d5a35", "filename": "gcc/testsuite/gdc.dg/gdc77.d", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc77.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc77.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc77.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,11 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=77\n+// { dg-do compile }\n+\n+void fun(size_t n)(ubyte[n] val)\n+{\n+}\n+\n+void test77(ubyte[3] buf)\n+{\n+    fun(buf[0..2]);\n+}"}, {"sha": "11d2bae9aa18b502c77a80ded31640aa438b89fa", "filename": "gcc/testsuite/gdc.dg/imports/gdc239.d", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc239.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc239.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc239.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -1,9 +1,27 @@\n-import std.path : buildNormalizedPath;\n+module imports.gdc239;\n \n class C239a\n {\n     auto bar()\n     {\n-        auto path = buildNormalizedPath(\"/\", \"foo\");\n+        chainPath();\n     }\n }\n+\n+auto chainPath()\n+{\n+    struct OnlyResult { }\n+    chain([], OnlyResult(), []);\n+}\n+\n+auto chain(Ranges...)(Ranges rs)\n+{\n+    static struct Result\n+    {\n+        Ranges source;\n+        this(Ranges)\n+        {\n+        }\n+    }\n+    Result(rs);\n+}"}, {"sha": "0ed851383a61b109cffa1434a2b07a580cf89cbc", "filename": "gcc/testsuite/gdc.dg/imports/gdc241a.d", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc241a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc241a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc241a.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -1,4 +1,6 @@\n-import compilable;\n+module imports.gdc241a;\n+\n+import gdc241;\n \n S241 *s241;     // Use indirectly imported struct\n C241 *c241;     // Use indirectly imported class"}, {"sha": "c49a04716ca933a49b21c38f63c63f6f70798b47", "filename": "gcc/testsuite/gdc.dg/imports/gdc241b.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc241b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc241b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc241b.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -1,3 +1,4 @@\n+module imports.gdc241b;\n \n class C241 { }\n "}, {"sha": "4ba927f91a7e195d19bf73d1466285bed8ba78a3", "filename": "gcc/testsuite/gdc.dg/imports/gdc251a.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc251a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc251a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc251a.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -1,6 +1,6 @@\n module imports.gdc251a;\n \n import imports.gdc251b;\n-import compilable;\n+import gdc251;\n \n C251 config;"}, {"sha": "8e629102aa3c234a3b26e479508e38328983eef4", "filename": "gcc/testsuite/gdc.dg/imports/gdc253a.d", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc253a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc253a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc253a.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -1,4 +1,4 @@\n-module imports.gdc253;\n+module imports.gdc253a;\n \n interface I253a\n {", "previous_filename": "gcc/testsuite/gdc.dg/imports/gdc253.d"}, {"sha": "996b0bf582c115923daf24aeee0973adfb03ea73", "filename": "gcc/testsuite/gdc.dg/imports/gdc253b.d", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc253b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc253b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc253b.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,12 @@\n+module imports.gdc253b;\n+\n+import gdc253b;\n+\n+class B253 : A253\n+{\n+    void test253(int[int] a)\n+    {\n+        if (a.get(0, 1))\n+            return;\n+    }\n+}"}, {"sha": "a22fd6f4f6adaadba630d0610da80d20745285bf", "filename": "gcc/testsuite/gdc.dg/imports/gdc36.d", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc36.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc36.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Fgdc36.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -0,0 +1,8 @@\n+module imports.gdc36;\n+\n+private import gdc36;\n+\n+void test36d_1()\n+{\n+    auto parser = Parser!(char[])();\n+}"}, {"sha": "f28ccdf5b65bdfa43fa12c9e438bce737c0ef49c", "filename": "gcc/testsuite/gdc.dg/imports/runnable.d", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239724956d4ef29dcaa7f1b378cc76f5f6a7ad5b/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Frunnable.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239724956d4ef29dcaa7f1b378cc76f5f6a7ad5b/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Frunnable.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fimports%2Frunnable.d?ref=239724956d4ef29dcaa7f1b378cc76f5f6a7ad5b", "patch": "@@ -1,23 +0,0 @@\n-module imports.runnable;\n-\n-private import runnable;\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=36\n-\n-void test36d_1()\n-{\n-    auto parser = Parser!(char[])();\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=253\n-\n-class B253 : A253\n-{\n-    void test253(int[int] a)\n-    {\n-        if (a.get(0, 1))\n-            return;\n-    }\n-}"}, {"sha": "d974bda8c58fb5dfc4fb797a8d526955cf17a077", "filename": "gcc/testsuite/gdc.dg/runnable.d", "status": "removed", "additions": 0, "deletions": 1394, "changes": 1394, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239724956d4ef29dcaa7f1b378cc76f5f6a7ad5b/gcc%2Ftestsuite%2Fgdc.dg%2Frunnable.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239724956d4ef29dcaa7f1b378cc76f5f6a7ad5b/gcc%2Ftestsuite%2Fgdc.dg%2Frunnable.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Frunnable.d?ref=239724956d4ef29dcaa7f1b378cc76f5f6a7ad5b", "patch": "@@ -1,1394 +0,0 @@\n-// { dg-additional-sources \"imports/runnable.d\" }\n-// { dg-do run { target hw } }\n-// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n-\n-module runnable;\n-\n-import imports.runnable;\n-import core.stdc.stdio;\n-import gcc.attribute;\n-\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=4\n-\n-void test4()\n-{\n-    string str = \"allo\";\n-    static assert(!__traits(compiles, str.reverse));\n-    static assert(!__traits(compiles, str.sort));\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=17\n-\n-/**\n- * Parameters are not copied into a frame to be accessed from\n- * the method's __require function.\n- */\n-void contractTest(string path)\n-{\n-    assert(path[0] == 't');\n-    assert(path.length == 9);\n-    assert(path[8] == 'i');\n-}\n-\n-interface ModuleSaver\n-{\n-    void save(string str)\n-    in\n-    {\n-        contractTest(str);\n-    }\n-}\n-\n-class ModuleWriter : ModuleSaver\n-{\n-    void save (string str)\n-    in {}\n-    body\n-    {\n-    }\n-}\n-\n-void test17()\n-{\n-  (new ModuleWriter()).save (\"test.0.mci\");\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=19\n-\n-void test19()\n-{\n-   byte b;\n-   --b = b;\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=24\n-\n-void test24()\n-{\n-    struct S24\n-    {\n-        char[1] b;\n-    }\n-\n-    S24 a;\n-\n-    if (*a.b.ptr)\n-        return;\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=31\n-\n-class RedBlackTree(T, alias less)\n-{\n-    struct Range\n-    {\n-        @property empty() { }\n-    }\n-\n-    Range opSlice()\n-    {\n-        return Range();\n-    }\n-}\n-\n-auto redBlackTree(alias less, E)()\n-{\n-    return new RedBlackTree!(E, less);\n-}\n-\n-void test31()\n-{\n-    redBlackTree!((a){}, double)();\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=35\n-\n-/**\n- * Here the BinaryHeap instance uses an alias parameter and therefore\n- * the instance's functions (percolateDown) need to be generated in\n- * topNIndex->BinaryHeap scope and not in the declaration scope\n- * (module->BinaryHeap).\n- */\n-void topNIndex()()\n-{\n-    bool indirectLess(int a, int b)\n-    {\n-        return a > b;\n-    }\n-\n-    auto a = BinaryHeap!(indirectLess)();\n-}\n-\n-struct BinaryHeap(alias less)\n-{\n-    void percolateDown()\n-    {\n-        less(0, 1);\n-    }\n-}\n-\n-void test35a()\n-{\n-    topNIndex();\n-}\n-\n-/*\n- * Similar as test35a but with an additional indirection.\n- * The nested function chain for percolateDown should look like this:\n- * topNIndex2->BinaryHeap2->percolateDown.\n- */\n-void topNIndex2()()\n-{\n-    bool indirectLess(int a, int b)\n-    {\n-        return a > b;\n-    }\n-    auto a = BinaryHeap2!(S35b!(indirectLess)())();\n-}\n-\n-struct S35b(alias a)\n-{\n-    void foo()\n-    {\n-        a(0, 0);\n-    }\n-}\n-\n-struct BinaryHeap2(alias less)\n-{\n-    void percolateDown()\n-    {\n-        less.foo();\n-    }\n-}\n-\n-void test35b()\n-{\n-    topNIndex2();\n-}\n-\n-void test35()\n-{\n-    test35a();\n-    test35b();\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=36\n-\n-/**\n- * Here getChar is a function in a template where template.isnested == false\n- * but getChar still is a nested function and needs to get a static chain\n- * containing test36a.\n- */\n-void test36a()(char val)\n-{\n-    void error()\n-    {\n-    }\n-\n-    void getChar()()\n-    {\n-        error();\n-    }\n-\n-    void parseString()\n-    {\n-        getChar();\n-    }\n-}\n-\n-/**\n- * Similar as test36a, but a little more complicated:\n- * Here getChar is nested in a struct template which is nested in a function.\n- * getChar's static chain still needs to contain test36b.\n- */\n-void test36b()(char val)\n-{\n-    void error()\n-    {\n-    }\n-\n-    struct S(T)\n-    {\n-        void getChar()\n-        {\n-            error();\n-        }\n-    }\n-\n-\n-    void parseString()\n-    {\n-        S!(int)().getChar();\n-    }\n-}\n-\n-/**\n- * If g had accessed a, the frontend would have generated a closure.\n- *\n- * As we do not access it, there's no closure. We have to be careful\n- * not to set a static chain for g containing test36c_1 though,\n- * as g can be called from outside (here from test1c). In the end\n- * we have to treat this as if everything in test36c_1 was declared\n- * at module scope.\n- */\n-auto test36c_1()\n-{\n-    int a;\n-    void c() {}\n-    class Result\n-    {\n-        int b;\n-        void g() { c(); /*a = 42;*/ }\n-    }\n-\n-    return new Result();\n-}\n-\n-void test36c()\n-{\n-    test36c_1().g();\n-}\n-\n-/**\n- * empty is a (private) function which is nested in lightPostprocess.\n- * At the same time it's a template instance, so it has to be declared as\n- * weak or otherwise one-only. imports/runnable.d creates another instance\n- * of Regex!char to verify that.\n- */\n-struct Parser(R)\n-{\n-    @property program()\n-    {\n-        return Regex!char();\n-    }\n-}\n-\n-struct Regex(Char)\n-{\n-    @trusted lightPostprocess()\n-    {\n-        struct FixedStack(T)\n-        {\n-            @property empty() { return false; }\n-        }\n-        auto counterRange = FixedStack!uint();\n-    }\n-}\n-\n-void test36d()\n-{\n-    auto parser = Parser!(char[])();\n-    imports.runnable.test36d_1;\n-}\n-\n-void test36()\n-{\n-  test36a('n');\n-  test36b('n');\n-  test36c();\n-  test36d();\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=37\n-\n-struct S37\n-{\n-    int bar(const S37 s)\n-    {\n-        return 0;\n-    }\n-}\n-\n-int test37()\n-{\n-    S37 s;\n-    return s.bar(s);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=43\n-\n-void test43()\n-{\n-    import core.vararg;\n-    import core.stdc.stdio;\n-\n-    void formatArray(ref va_list argptr)\n-    {\n-        auto a = va_arg!(const(float)[])(argptr);\n-        foreach(f; a)\n-        {\n-            printf(\"%f\\n\", f);\n-        }\n-    }\n-\n-    void doFormat(TypeInfo[] arguments, va_list argptr)\n-    {\n-        formatArray(argptr);\n-    }\n-\n-    void format(...)\n-    {\n-        doFormat(_arguments, _argptr);\n-    }\n-\n-    format([1.0f, 2.0f, 3.0f]);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=47\n-\n-template Foo47()\n-{\n-    void test47()\n-    {\n-        asm { \"nop\"; }\n-    }\n-}\n-\n-mixin Foo47!();\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=51\n-\n-struct S51\n-{\n-    int x;\n-    int pad;\n-\n-    this(this)\n-    {\n-        ++x;\n-    }\n-}\n-\n-void test51()\n-{\n-    S51 s;\n-    auto sarr = new S51[1];\n-    auto sarr2 = sarr;\n-\n-    // postblit all fields.\n-    sarr2 ~= s;\n-\n-    assert (sarr2[0].x == 1);\n-    assert (sarr2[1].x == 1);\n-    assert (sarr[0].x == 0);\n-    assert (s.x == 0);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=57\n-\n-struct S57\n-{\n-    int a;\n-    long b;\n-    // Doesn't happen for bigger structs\n-}\n-\n-S57 bar57()\n-{\n-    return S57(4, 42);\n-}\n-\n-void test57()\n-{\n-    S57 s = bar57();\n-    assert (s is S57(4, 42));\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=66\n-\n-void test66()\n-{\n-    int pos = 0;\n-\n-    foreach(x; 0 .. 64)\n-    {\n-        ++pos %= 4;\n-        assert (pos != 4);\n-    }\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=67\n-\n-__vector(float[4]) d[2];  // ICE\n-\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=115\n-\n-void test115()\n-{\n-    union U\n-    {\n-        float f;\n-        uint i;\n-    }\n-    float a = 123.0;\n-    const l = U(a);\n-\n-    assert(l.i == U(a).i);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=121\n-\n-immutable char C121 = void; // ICE\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=127\n-\n-int[0] test127a;     // OK\n-int[1][0] test127b;  // OK\n-int[0][1] test127c;  // ICE\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=131\n-\n-struct S131\n-{\n-    this(string ) { }\n-    string opAssign(string v) { return v; }\n-}\n-\n-void test131()\n-{\n-    S131[string] s;\n-    s[\"foo\"] = \"bar\";\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=133\n-\n-void delegate()[] D133;\n-\n-void test133a(void delegate() dg)\n-{\n-    D133 ~= dg;\n-}\n-\n-void test133()\n-{\n-    void nested()\n-    {}\n-    test133a(&nested);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=141\n-\n-bool test141a(int a)\n-{\n-    return a > (a + 1);\n-}\n-\n-void test141()\n-{\n-    assert(test141a(int.min) == false);\n-    assert(test141a(int.max) == true);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=142\n-\n-@attribute(\"noinline\")\n-int test142a()()\n-{\n-    return 142;\n-}\n-\n-void test142()\n-{\n-    enum E142 = test142a();\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=171\n-\n-void test171a()\n-{\n-    int count = 0;\n-    short a = -1;\n-    while (a != 0)\n-    {\n-        a >>>= 1;\n-        count++;\n-        assert(count <= 16);\n-    }\n-}\n-\n-void test171b()\n-{\n-    uint[3] lhs = [99, 201, 300],\n-            rhs = [-1, 0, 0];\n-    long t = 0;\n-\n-    for (int i = 0; i < 3; i++)\n-    {\n-        t += lhs[i];\n-        t -= rhs[i];\n-        lhs[i] = cast(uint) t;\n-        t >>= uint.sizeof * 8;\n-    }\n-\n-    assert(lhs == [100, 200, 300]);\n-}\n-\n-void test171()\n-{\n-    test171a();\n-    test171b();\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=179\n-\n-struct S179a\n-{\n-    @disable this(this);\n-}\n-\n-struct S179b\n-{\n-    S179a s1;\n-    void connect() { printf(\"this=%p\\n\", &this); }\n-}\n-\n-class C179\n-{\n-    private S179b s2;\n-    ref S179b value() @property\n-    {\n-        printf(\"this=%p\\n\", &s2);\n-        return s2;\n-    }\n-}\n-\n-void test179()\n-{\n-    C179 a = new C179;\n-    a.value.connect();\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=183\n-\n-struct S183a\n-{\n-    union I183a\n-    {\n-        struct\n-        {\n-            double x, y, z;\n-        }\n-        struct\n-        {\n-            double a, b, c;\n-        }\n-    }\n-\n-    I183a inner;\n-\n-    this(double x, double y, double z)\n-    {\n-        this.inner.x = x;\n-        this.inner.y = y;\n-        this.inner.z = z;\n-    }\n-}\n-\n-struct S183b\n-{\n-    @property get()\n-    {\n-        union Buf\n-        {\n-            void[0] result;\n-        }\n-        const Buf buf = { };\n-        return buf.result;\n-    }\n-}\n-\n-struct S183c\n-{\n-    @property get()\n-    {\n-        union Buf\n-        {\n-            TypeInfo info;\n-            void[0] result;\n-        }\n-        const Buf buf = { };\n-        return buf.result;\n-    }\n-}\n-\n-void test183()\n-{\n-    auto v1 = S183a(0, 0, 0);\n-    auto v2 = S183b().get;\n-    auto v3 = S183c().get;\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=186\n-\n-struct S186\n-{\n-    union\n-    {\n-        struct\n-        {\n-            ubyte fieldA;\n-            byte  fieldB = -1;\n-            byte fieldC = -1;\n-        }\n-        size_t _complete;\n-    }\n-\n-    this(size_t complete)\n-    {\n-        this._complete = complete;\n-    }\n-}\n-\n-static if (size_t.sizeof == 8)\n-    enum checkval = 0x0200000000000002;\n-else\n-    enum checkval = 0x02000002;\n-\n-void check186(in S186 obj, byte fieldB)\n-{\n-    assert(obj.fieldA == 2);\n-    assert(obj.fieldB == 0);\n-    assert(obj.fieldC == 0);\n-    assert(obj._complete == checkval);\n-    assert(fieldB == 0);\n-}\n-\n-void test186a(size_t val)\n-{\n-    S186 obj = S186(val);\n-    check186(obj, obj.fieldB);\n-\n-    assert(obj.fieldA == 2);\n-    assert(obj.fieldB == 0);\n-    assert(obj.fieldC == 0);\n-    assert(obj._complete == checkval);\n-\n-    obj = S186(val);\n-    check186(obj, obj.fieldB);\n-\n-    assert(obj.fieldA == 2);\n-    assert(obj.fieldB == 0);\n-    assert(obj.fieldC == 0);\n-    assert(obj._complete == checkval);\n-}\n-\n-void test186()\n-{\n-    test186a(checkval);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=187\n-\n-align(1) struct S187b\n-{\n-    align(1)\n-    {\n-        uint unpaddedA;\n-        ushort unpaddedB;\n-    }\n-}\n-\n-struct S187a\n-{\n-    S187b[3] unpaddedArray;\n-    ubyte wontInitialize = ubyte.init;\n-}\n-\n-struct S187\n-{\n-    S187a interesting;\n-}\n-\n-\n-void prepareStack()\n-{\n-    byte[255] stackGarbage;\n-    foreach(i, ref b; stackGarbage)\n-    {\n-        b  = cast(byte)(-i);\n-    }\n-}\n-\n-void test187()\n-{\n-    prepareStack();\n-    auto a = S187(S187a());\n-    assert(a.interesting.wontInitialize == 0);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=191\n-\n-class C191\n-{\n-    int count = 0;\n-\n-    void testA()\n-    {\n-        class Inner\n-        {\n-            void test()\n-            {\n-                void localFunction()\n-                {\n-                    if (++count != 5)\n-                        testA();\n-                }\n-                localFunction();\n-            }\n-        }\n-        scope ic = new Inner();\n-        ic.test();\n-    }\n-\n-    void testB()\n-    {\n-        class Inner\n-        {\n-            void test()\n-            {\n-                void localFunction()\n-                {\n-                    void anotherLocalFunction()\n-                    {\n-                        if (++count != 10)\n-                            testB();\n-                    }\n-                    anotherLocalFunction();\n-                }\n-                localFunction();\n-            }\n-        }\n-        scope ic = new Inner();\n-        ic.test();\n-    }\n-\n-    void testC()\n-    {\n-        class Inner\n-        {\n-            int a = 1;\n-\n-            void test()\n-            {\n-                void localFunction()\n-                {\n-                    count += a;\n-                    if (count != 15)\n-                        testC();\n-                    assert(a == 1);\n-                }\n-                localFunction();\n-            }\n-        }\n-        scope ic = new Inner();\n-        ic.test();\n-    }\n-\n-    void testD()\n-    {\n-        class Inner\n-        {\n-            void test()\n-            {\n-                int a = 1;\n-\n-                void localFunction()\n-                {\n-                    count += a;\n-                    if (count != 20)\n-                        testD();\n-                    assert(a == 1);\n-                }\n-                localFunction();\n-            }\n-        }\n-        scope ic = new Inner();\n-        ic.test();\n-    }\n-\n-    void testE()\n-    {\n-        class Inner\n-        {\n-            int a = 1;\n-\n-            void test()\n-            {\n-                void localFunction()\n-                {\n-                    void anotherLocalFunction()\n-                    {\n-                        count += a;\n-                        if (count != 25)\n-                            testE();\n-                        assert(a == 1);\n-                    }\n-\n-                    anotherLocalFunction();\n-                }\n-\n-                localFunction();\n-            }\n-        }\n-        scope ic = new Inner();\n-        ic.test();\n-    }\n-\n-    void testF()\n-    {\n-        class Inner\n-        {\n-            void test()\n-            {\n-                int a = 1;\n-\n-                void localFunction()\n-                {\n-                    void anotherLocalFunction()\n-                    {\n-                        count += a;\n-                        if (count != 30)\n-                            testF();\n-                        assert(a == 1);\n-                    }\n-\n-                    anotherLocalFunction();\n-                }\n-\n-                localFunction();\n-            }\n-        }\n-        scope ic = new Inner();\n-        ic.test();\n-    }\n-\n-    void testG()\n-    {\n-        class Inner\n-        {\n-            void test()\n-            {\n-                void localFunction()\n-                {\n-                    int a = 1;\n-\n-                    void anotherLocalFunction()\n-                    {\n-                        count += a;\n-                        if (count != 35)\n-                            testG();\n-                        assert(a == 1);\n-                    }\n-\n-                    anotherLocalFunction();\n-                }\n-\n-                localFunction();\n-            }\n-        }\n-        scope ic = new Inner();\n-        ic.test();\n-    }\n-}\n-\n-void test191()\n-{\n-    scope oc = new C191();\n-    oc.testA();\n-    assert(oc.count == 5);\n-\n-    oc.testB();\n-    assert(oc.count == 10);\n-\n-    oc.testC();\n-    assert(oc.count == 15);\n-\n-    oc.testD();\n-    assert(oc.count == 20);\n-\n-    oc.testE();\n-    assert(oc.count == 25);\n-\n-    oc.testF();\n-    assert(oc.count == 30);\n-\n-    oc.testG();\n-    assert(oc.count == 35);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=194\n-\n-auto test194(ref bool overflow)\n-{\n-    import core.checkedint;\n-\n-    return adds(1, 1, overflow);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=196\n-\n-class C196\n-{\n-    int a;\n-}\n-\n-struct S196\n-{\n-    int a;\n-}\n-\n-void test196()\n-{\n-    __gshared c = new C196();\n-    __gshared s = new S196(0);\n-    c.a = 1;\n-    s.a = 1;\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=198\n-\n-struct S198a\n-{\n-    union\n-    {\n-        float[3] v;\n-        struct\n-        {\n-            float x;\n-            float y;\n-            float z;\n-        }\n-    }\n-\n-    this(float x_, float y_, float z_)\n-    {\n-        x = x_;\n-        y = y_;\n-        z = z_;\n-    }\n-\n-    ref S198a opOpAssign(string op)(S198a operand)\n-    if (op == \"+\")\n-    {\n-        x += operand.x;\n-        y += operand.y;\n-        z += operand.z;\n-        return this;\n-    }\n-}\n-\n-struct S198b\n-{\n-    @property get()\n-    {\n-        union Buf\n-        {\n-            void[0] result;\n-        }\n-        const Buf buf = { };\n-        return buf.result;\n-    }\n-}\n-\n-struct S198c\n-{\n-    @property get()\n-    {\n-        union Buf\n-        {\n-            TypeInfo info;\n-            void[0] result;\n-        }\n-        const Buf buf = { };\n-        return buf.result;\n-    }\n-}\n-\n-\n-auto test198()\n-{\n-    S198a sum = S198a(0, 0, 0);\n-\n-    foreach(size_t v; 0 .. 3)\n-        sum += S198a(1, 2, 3);\n-\n-    assert(sum.v == [3, 6, 9]);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=200\n-\n-void test200a(double x, double y)\n-{\n-  const double y2 = x + 1.0;\n-  assert(y == y2);\n-}\n-\n-void test200()\n-{\n-  const double x = .012;\n-  const double y = x + 1.0;\n-  test200a(x, y);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=210\n-\n-struct S210\n-{\n-    ubyte a;\n-    uint b;\n-}\n-\n-union U210\n-{\n-    S210 a;\n-    uint b;\n-}\n-\n-S210 test210a()\n-{\n-    S210 s = S210(1, 2);\n-    return s;\n-}\n-\n-S210[2] test210b()\n-{\n-    S210[2] s = [S210(1, 2), S210(3, 4)];\n-    return s;\n-}\n-\n-U210 test210c()\n-{\n-    U210 s = U210(S210(1, 2));\n-    return s;\n-}\n-\n-U210[2] test210d()\n-{\n-    U210[2] s = [U210(S210(1, 2)), U210(S210(3, 4))];\n-    return s;\n-}\n-\n-void test210()\n-{\n-    S210 a = S210(1, 2);\n-    assert(a == S210(1, 2));\n-    assert(a == test210a());\n-    assert(a != S210(2, 1));\n-\n-    S210[2] b = [S210(1, 2), S210(3, 4)];\n-    assert(b == [S210(1, 2), S210(3, 4)]);\n-    assert(b == test210b());\n-    assert(b != [S210(2, 1), S210(3, 4)]);\n-\n-    U210 c = U210(S210(1, 2));\n-    assert(c == U210(S210(1, 2)));\n-    assert(c == test210c());\n-    assert(c != U210(S210(2, 1)));\n-\n-    U210[2] d = [U210(S210(1, 2)), U210(S210(3, 4))];\n-    assert(d == [U210(S210(1, 2)), U210(S210(3, 4))]);\n-    assert(d == test210d());\n-    assert(d != [U210(S210(2, 1)), U210(S210(3, 4))]);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=240\n-\n-void test240a(int a, int b)\n-{\n-    assert(a == 0);\n-    assert(b == 0);\n-}\n-\n-void test240()\n-{\n-    int a = 0;\n-    test240a(a, a++);\n-    assert(a == 1);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=242\n-\n-struct S242\n-{\n-    enum M = S242();\n-    int a = 42;\n-\n-    auto iter()\n-    {\n-        this.a = 24;\n-        return this;\n-    }\n-}\n-\n-S242 test242a()\n-{\n-    return S242.M.iter;\n-}\n-\n-void test242()\n-{\n-    assert(test242a() == S242(24));\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=248\n-\n-class C248b\n-{\n-    bool isintegral()\n-    {\n-        return false;\n-    }\n-}\n-\n-class C248a\n-{\n-    int count = 0;\n-\n-    C248b getMemtype()\n-    {\n-        count++;\n-        return new C248b();\n-    }\n-}\n-\n-class C248\n-{\n-    C248a sym;\n-\n-    this()\n-    {\n-        this.sym = new C248a();\n-    }\n-\n-    bool isintegral()\n-    {\n-        return sym.getMemtype().isintegral();\n-    }\n-}\n-\n-void test248()\n-{\n-    C248 e = new C248();\n-    e.isintegral();\n-    assert(e.sym.count == 1);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=250\n-\n-void test250()\n-{\n-    struct S\n-    {\n-        string data;\n-    }\n-\n-    auto a = S(\"hello\");\n-    auto b = S(\"hello\".dup);\n-\n-    assert(a.data == b.data);\n-    assert(a == b);\n-    assert([a] == [b]);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=253\n-\n-interface A253\n-{\n-    void test253(int[int]);\n-}\n-\n-interface C253 : A253\n-{\n-}\n-\n-class D253 : B253, C253\n-{\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=273\n-\n-class B273\n-{\n-    B273[] members;\n-}\n-\n-class D273 : B273\n-{\n-}\n-\n-void test273()\n-{\n-    auto noPointers = ClassInfo.ClassFlags.noPointers;\n-    assert((B273.classinfo.m_flags & noPointers) == 0);\n-    assert((D273.classinfo.m_flags & noPointers) == 0);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=285\n-\n-inout(char)[] test285a(inout(char)* s) @nogc @system pure nothrow\n-{\n-    import core.stdc.string : strlen;\n-    return s ? s[0 .. strlen(s)] : null;\n-}\n-\n-void test285()\n-{\n-    assert(test285a(null) == null);\n-    assert(test285a(\"foo\") == \"foo\");\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=286\n-\n-void test286()\n-{\n-    struct K286\n-    {\n-        int count;\n-        this(this)\n-        {\n-            count++;\n-        }\n-    }\n-\n-    struct S286\n-    {\n-        int data;\n-        this(K286 key)\n-        {\n-            data = key.count;\n-        }\n-    }\n-\n-    S286 getData(K286 key)\n-    {\n-        static S286[K286] getCache;\n-        auto p = key in getCache;\n-        if (p)\n-            return *p;\n-        return (getCache[key] = S286(key));\n-    }\n-\n-    auto s = getData(K286());\n-    if (s.data == 0)\n-        assert(0);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=309\n-\n-void test309()\n-{\n-    creal f1 = +0.0 + 0.0i;\n-    creal f2 = +0.0 - 0.0i;\n-    creal f3 = -0.0 + 0.0i;\n-    creal f4 = +0.0 + 0.0i;\n-\n-    assert(f1 !is f2);\n-    assert(f1 !is f3);\n-    assert(f2 !is f3);\n-    assert(f1 is f4);\n-\n-    assert(!(f1 is f2));\n-    assert(!(f1 is f3));\n-    assert(!(f2 is f3));\n-    assert(!(f1 !is f4));\n-\n-    struct CReal\n-    {\n-        creal value;\n-    }\n-\n-    CReal s1 = CReal(+0.0 + 0.0i);\n-    CReal s2 = CReal(+0.0 - 0.0i);\n-    CReal s3 = CReal(-0.0 + 0.0i);\n-    CReal s4 = CReal(+0.0 + 0.0i);\n-\n-    assert(s1 !is s2);\n-    assert(s1 !is s3);\n-    assert(s2 !is s3);\n-    assert(s1 is s4);\n-\n-    assert(!(s1 is s2));\n-    assert(!(s1 is s3));\n-    assert(!(s2 is s3));\n-    assert(!(s1 !is s4));\n-}\n-\n-/******************************************/\n-\n-void main()\n-{\n-    test4();\n-    test17();\n-    test35();\n-    test36();\n-    test43();\n-    test51();\n-    test57();\n-    test66();\n-    test115();\n-    test131();\n-    test133();\n-    test141();\n-    test179();\n-    test186();\n-    test187();\n-    test191();\n-    test196();\n-    test198();\n-    test200();\n-    test210();\n-    test240();\n-    test242();\n-    test248();\n-    test250();\n-    test273();\n-    test285();\n-    test286();\n-    test309();\n-\n-    printf(\"Success!\\n\");\n-}"}, {"sha": "d9463e337c15d6494743b9fe6397f9963503b323", "filename": "gcc/testsuite/gdc.dg/runnable2.d", "status": "removed", "additions": 0, "deletions": 244, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239724956d4ef29dcaa7f1b378cc76f5f6a7ad5b/gcc%2Ftestsuite%2Fgdc.dg%2Frunnable2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239724956d4ef29dcaa7f1b378cc76f5f6a7ad5b/gcc%2Ftestsuite%2Fgdc.dg%2Frunnable2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Frunnable2.d?ref=239724956d4ef29dcaa7f1b378cc76f5f6a7ad5b", "patch": "@@ -1,244 +0,0 @@\n-// { dg-do run { target { hw && d_runtime_has_std_library } } }\n-\n-module runnable;\n-\n-import core.stdc.stdio;\n-import gcc.attribute;\n-\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=2\n-\n-struct S\n-{\n-    string toString() { return \"foo\"; }\n-}\n-\n-void test2()\n-{\n-    import std.string : format;\n-    assert(format(\"%s\", S()) == \"foo\");\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=15\n-\n-class B\n-{\n-    class A { }\n-    A a;\n-}\n-\n-class C\n-{\n-    void visit(B b)\n-    {\n-        import std.algorithm : map;\n-        auto as = [b.a];\n-        as.map!(d => d);\n-    }\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=16\n-\n-void test16()\n-{\n-    import std.parallelism : taskPool;\n-\n-    taskPool.reduce!\"a+b\"([0, 1, 2, 3]);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=18\n-\n-class C18\n-{\n-    struct Link\n-    {\n-        int x;\n-        int y;\n-    }\n-\n-    void sort_links()\n-    {\n-        import std.algorithm : sort;\n-        import std.array : empty;\n-        import std.exception : enforce;\n-\n-        enforce(!_link.empty);\n-\n-        bool lt(Link a, Link b)\n-        {\n-            if(a.x > b.x)\n-                return false;\n-            if(a.x < b.x)\n-                return true;\n-            if(a.y >= b.y)\n-                return false;\n-            else\n-                return true;\n-        }\n-        sort!(lt)(_link);\n-    }\n-\n-    this()\n-    {\n-        _link ~= Link(8, 3);\n-        _link ~= Link(4, 7);\n-        _link ~= Link(4, 6);\n-        _link ~= Link(3, 7);\n-        _link ~= Link(2, 7);\n-        _link ~= Link(2, 2);\n-        _link ~= Link(4, 1);\n-    }\n-\n-    Link[] _link;\n-}\n-\n-void test18()\n-{\n-    C18 foo = new C18;\n-    foo.sort_links();\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=29\n-\n-void test29()\n-{\n-    import std.string : format;\n-    import std.conv : text;\n-\n-    string s;\n-    for (auto i = 0; i < 100000; i++)\n-    {\n-        s = format(\"%d\", i);\n-        s = text(i);\n-    }\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=52\n-\n-class C52\n-{\n-    C52 a;\n-\n-    this()\n-    {\n-        printf(\"Construct: this=%p\\n\", cast(void*)this);\n-        a = this;\n-    }\n-\n-    bool check()\n-    {\n-        printf(\"Check: this=%p a=%p\\n\", cast(void*)this, cast(void*)a);\n-        return this is a;\n-    }\n-}\n-\n-auto test52a()\n-{\n-    import std.conv, std.traits;\n-\n-    struct Scoped\n-    {\n-        void[__traits (classInstanceSize, C52) ] Scoped_store = void;\n-\n-        inout(C52) Scoped_payload() inout\n-        {\n-            void* alignedStore = cast(void*) Scoped_store.ptr;\n-            return cast(inout (C52)) alignedStore;\n-        }\n-        alias Scoped_payload this;\n-    }\n-\n-    Scoped result;\n-    emplace!(Unqual!C52)(result.Scoped_store);\n-    assert(result.Scoped_payload().check);\n-    return result;\n-}\n-\n-void test52()\n-{\n-    auto a1 = test52a();\n-    assert(a1.Scoped_payload().check);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=71\n-\n-struct Leaf\n-{\n-    ubyte symbol;\n-    ubyte codeLen;\n-}\n-\n-struct CanonicalHuffman\n-{\n-    Leaf[] table;\n-\n-    void print()\n-    {\n-        import std.algorithm;\n-        import std.range;\n-\n-        auto list = zip(iota(table.length), table.dup).array\n-            .sort!((a, b) => a[1].symbol < b[1].symbol)\n-            .uniq!((a, b) => (a[0] & (1 << a[1].codeLen) - 1) == (b[0] & (1 << b[1].codeLen) - 1));\n-    }\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=77\n-\n-void fun(ubyte[3] buf)\n-{\n-    import std.bitmanip : bigEndianToNative;\n-    bigEndianToNative!ushort(buf[0..2]);\n-}\n-\n-void test77()\n-{\n-    fun([1,2,3]);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=108\n-\n-@attribute(\"forceinline\")\n-void test108()\n-{\n-    import std.stdio : writeln;\n-    writeln(\"Here\");\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=122\n-\n-void test122()\n-{\n-    import std.algorithm : map;\n-    import std.parallelism : taskPool;\n-    import std.range : iota;\n-\n-    immutable n = 10000;\n-    enum delta = 1.0 / n;       // XBUG: was 'immutable delta' https://issues.dlang.org/show_bug.cgi?id=17092\n-    immutable pi = 4.0 * delta * taskPool.reduce!\"a + b\"(\n-        map!((int i) { immutable x = (i - 0.5) * delta; return 1.0 / (1.0 + x * x); })(iota(n)));\n-}\n-\n-/******************************************/\n-\n-void main()\n-{\n-    test2();\n-    test16();\n-    test18();\n-    test52();\n-    test77();\n-    test108();\n-\n-    printf(\"Success!\\n\");\n-}"}, {"sha": "40d5b5700c31bb7902429141583cfde0ad23a4ad", "filename": "gcc/testsuite/gdc.dg/simd.d", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844fa2de7b4d6d3b058dd9492c0a62e72e759979/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd.d?ref=844fa2de7b4d6d3b058dd9492c0a62e72e759979", "patch": "@@ -2,7 +2,6 @@\n // { dg-do run { target hw } }\n import core.simd;\n import core.stdc.string;\n-import std.stdio;\n \n alias TypeTuple(T...) = T;\n \n@@ -1143,7 +1142,6 @@ float4 foo9304(float4 a)\n void test9304()\n {\n     auto a = foo9304([0, 1, 2, 3]);\n-    //writeln(a.array);\n     assert(a.array == [0,-1,-2,-3]);\n }\n "}]}