{"sha": "37a580360c3df196e8dc6e075ba1bd24d83bbefc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdhNTgwMzYwYzNkZjE5NmU4ZGM2ZTA3NWJhMWJkMjRkODNiYmVmYw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-05-04T14:36:39Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-05-04T14:36:39Z"}, "message": "i386.c (ix86_emit_restore_regs_using_mov, [...]): Change `bool' parameter to `int'.\n\n\t* i386.c (ix86_emit_restore_regs_using_mov, ix86_save_reg): Change\n\t`bool' parameter to `int'.\n\n\t* hash.c (hash_lookup): Likewise.\n\n\t* hash.h (hash_lookup): Likewise.\n\n\t* tlink.c (symbol_hash_lookup, demangled_hash_lookup): Likewise.\n\nFrom-SVN: r41829", "tree": {"sha": "ba85310e2284133248625e5c9e0d515894ec9cf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba85310e2284133248625e5c9e0d515894ec9cf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37a580360c3df196e8dc6e075ba1bd24d83bbefc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37a580360c3df196e8dc6e075ba1bd24d83bbefc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37a580360c3df196e8dc6e075ba1bd24d83bbefc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37a580360c3df196e8dc6e075ba1bd24d83bbefc/comments", "author": null, "committer": null, "parents": [{"sha": "e7a4892c2053d5e7ac33639a7a44f7990cd3cafa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a4892c2053d5e7ac33639a7a44f7990cd3cafa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7a4892c2053d5e7ac33639a7a44f7990cd3cafa"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "96ef02766e860c49d4de2e1547ff17c24513527d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a580360c3df196e8dc6e075ba1bd24d83bbefc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a580360c3df196e8dc6e075ba1bd24d83bbefc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37a580360c3df196e8dc6e075ba1bd24d83bbefc", "patch": "@@ -1,3 +1,14 @@\n+2001-05-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* i386.c (ix86_emit_restore_regs_using_mov, ix86_save_reg): Change\n+\t`bool' parameter to `int'.\n+\n+\t* hash.c (hash_lookup): Likewise.\n+\t\n+\t* hash.h (hash_lookup): Likewise.\n+\n+\t* tlink.c (symbol_hash_lookup, demangled_hash_lookup): Likewise.\n+\n Fri May  4 13:10:03 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.c (x86_initialize_trampoline): Fix mode of constant."}, {"sha": "3c31c49d3e68db1fe0fe7f77e4c57e354c0df21c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a580360c3df196e8dc6e075ba1bd24d83bbefc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a580360c3df196e8dc6e075ba1bd24d83bbefc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=37a580360c3df196e8dc6e075ba1bd24d83bbefc", "patch": "@@ -559,7 +559,7 @@ static int ix86_split_to_parts PARAMS ((rtx, rtx *, enum machine_mode));\n static int ix86_safe_length_prefix PARAMS ((rtx));\n static int ix86_nsaved_regs PARAMS((void));\n static void ix86_emit_save_regs PARAMS((void));\n-static void ix86_emit_restore_regs_using_mov PARAMS ((rtx, int, bool));\n+static void ix86_emit_restore_regs_using_mov PARAMS ((rtx, int, int));\n static void ix86_emit_epilogue_esp_adjustment PARAMS((int));\n static void ix86_set_move_mem_attrs_1 PARAMS ((rtx, rtx, rtx, rtx, rtx));\n static void ix86_sched_reorder_pentium PARAMS((rtx *, rtx *));\n@@ -599,7 +599,7 @@ static int ix86_fp_comparison_arithmetics_cost PARAMS ((enum rtx_code code));\n static int ix86_fp_comparison_fcomi_cost PARAMS ((enum rtx_code code));\n static int ix86_fp_comparison_sahf_cost PARAMS ((enum rtx_code code));\n static int ix86_fp_comparison_cost PARAMS ((enum rtx_code code));\n-static int ix86_save_reg PARAMS ((int, bool));\n+static int ix86_save_reg PARAMS ((int, int));\n static void ix86_compute_frame_layout PARAMS ((struct ix86_frame *));\n \f\n /* Sometimes certain combinations of command options do not make\n@@ -2268,7 +2268,7 @@ gen_push (arg)\n static int\n ix86_save_reg (regno, maybe_eh_return)\n      int regno;\n-     bool maybe_eh_return;\n+     int maybe_eh_return;\n {\n   if (flag_pic\n       && ! TARGET_64BIT\n@@ -2573,7 +2573,7 @@ static void\n ix86_emit_restore_regs_using_mov (pointer, offset, maybe_eh_return)\n      rtx pointer;\n      int offset;\n-     bool maybe_eh_return;\n+     int maybe_eh_return;\n {\n   int regno;\n "}, {"sha": "1cf6b685c64d2d2e9b33f7e95ab886e570e66049", "filename": "gcc/hash.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a580360c3df196e8dc6e075ba1bd24d83bbefc/gcc%2Fhash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a580360c3df196e8dc6e075ba1bd24d83bbefc/gcc%2Fhash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash.c?ref=37a580360c3df196e8dc6e075ba1bd24d83bbefc", "patch": "@@ -87,7 +87,7 @@ struct hash_entry *\n hash_lookup (table, key, create, copy)\n      struct hash_table *table;\n      hash_table_key key;\n-     bool create;\n+     int create;\n      hash_table_key (*copy) PARAMS ((struct obstack* memory, \n \t\t\t\t     hash_table_key key));\n {"}, {"sha": "bd75f94c6f9a07efeea0a877a9dff101b7000505", "filename": "gcc/hash.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a580360c3df196e8dc6e075ba1bd24d83bbefc/gcc%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a580360c3df196e8dc6e075ba1bd24d83bbefc/gcc%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash.h?ref=37a580360c3df196e8dc6e075ba1bd24d83bbefc", "patch": "@@ -96,7 +96,7 @@ extern void hash_table_free PARAMS ((struct hash_table *));\n    COPY is non-NULL, it is used to copy the KEY before storing it in\n    the hash table.  */\n extern struct hash_entry *hash_lookup\n-  PARAMS ((struct hash_table *, hash_table_key key, bool create,\n+  PARAMS ((struct hash_table *, hash_table_key key, int create,\n \t   hash_table_key (*copy)(struct obstack*, hash_table_key)));\n \n /* Base method for creating a hash table entry.  */"}, {"sha": "8b8ca0c46989faea96e70578184ce61a03a41a27", "filename": "gcc/tlink.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a580360c3df196e8dc6e075ba1bd24d83bbefc/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a580360c3df196e8dc6e075ba1bd24d83bbefc/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=37a580360c3df196e8dc6e075ba1bd24d83bbefc", "patch": "@@ -72,7 +72,7 @@ static struct hash_entry * symbol_hash_newfunc PARAMS ((struct hash_entry *,\n \t\t\t\t\t\t\tstruct hash_table *,\n \t\t\t\t\t\t\thash_table_key));\n static struct symbol_hash_entry * symbol_hash_lookup PARAMS ((const char *,\n-\t\t\t\t\t\t\t      bool));\n+\t\t\t\t\t\t\t      int));\n static struct hash_entry * file_hash_newfunc PARAMS ((struct hash_entry *,\n \t\t\t\t\t\t      struct hash_table *,\n \t\t\t\t\t\t      hash_table_key));\n@@ -81,7 +81,7 @@ static struct hash_entry * demangled_hash_newfunc PARAMS ((struct hash_entry *,\n \t\t\t\t\t\t\t   struct hash_table *,\n \t\t\t\t\t\t\t   hash_table_key));\n static struct demangled_hash_entry *\n-  demangled_hash_lookup PARAMS ((const char *, bool));\n+  demangled_hash_lookup PARAMS ((const char *, int));\n static void symbol_push PARAMS ((symbol *));\n static symbol * symbol_pop PARAMS ((void));\n static void file_push PARAMS ((file *));\n@@ -129,7 +129,7 @@ symbol_hash_newfunc (entry, table, string)\n static struct symbol_hash_entry *\n symbol_hash_lookup (string, create)\n      const char *string;\n-     bool create;\n+     int create;\n {\n   return ((struct symbol_hash_entry *)\n \t  hash_lookup (&symbol_table, (const hash_table_key) string, \n@@ -201,7 +201,7 @@ demangled_hash_newfunc (entry, table, string)\n static struct demangled_hash_entry *\n demangled_hash_lookup (string, create)\n      const char *string;\n-     bool create;\n+     int create;\n {\n   return ((struct demangled_hash_entry *)\n \t  hash_lookup (&demangled_table, (const hash_table_key) string, "}]}