{"sha": "c12176d716a0121cafc296c36bc256ea79700d1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEyMTc2ZDcxNmEwMTIxY2FmYzI5NmMzNmJjMjU2ZWE3OTcwMGQxZQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-11-03T09:15:45Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-11-03T09:15:45Z"}, "message": "tree-vect-loop.c (destroy_loop_vec_info): Handle cond_expr.\n\n\t* tree-vect-loop.c (destroy_loop_vec_info): Handle cond_expr.\n\t(vect_is_simple_reduction): Swap cond_reduction by inversion.\n\nFrom-SVN: r241810", "tree": {"sha": "dd7ba7b87bf92a6cff5d18d238818c8cff11bc53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd7ba7b87bf92a6cff5d18d238818c8cff11bc53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c12176d716a0121cafc296c36bc256ea79700d1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c12176d716a0121cafc296c36bc256ea79700d1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c12176d716a0121cafc296c36bc256ea79700d1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c12176d716a0121cafc296c36bc256ea79700d1e/comments", "author": null, "committer": null, "parents": [{"sha": "f03f023275d9799b21fb9a030ffeb0295487c88d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f03f023275d9799b21fb9a030ffeb0295487c88d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f03f023275d9799b21fb9a030ffeb0295487c88d"}], "stats": {"total": 90, "additions": 67, "deletions": 23}, "files": [{"sha": "98e1cb282776691663874b9c81fbaadf70444e38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12176d716a0121cafc296c36bc256ea79700d1e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12176d716a0121cafc296c36bc256ea79700d1e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c12176d716a0121cafc296c36bc256ea79700d1e", "patch": "@@ -1,3 +1,8 @@\n+2016-11-03  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-vect-loop.c (destroy_loop_vec_info): Handle cond_expr.\n+\t(vect_is_simple_reduction): Swap cond_reduction by inversion.\n+\n 2016-11-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_init_libfuncs): New.  Call"}, {"sha": "1cd9c7221b0c77bb22648661a18bd99de88c27ce", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 62, "deletions": 23, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12176d716a0121cafc296c36bc256ea79700d1e/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12176d716a0121cafc296c36bc256ea79700d1e/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=c12176d716a0121cafc296c36bc256ea79700d1e", "patch": "@@ -1225,6 +1225,27 @@ destroy_loop_vec_info (loop_vec_info loop_vinfo, bool clean_stmts)\n \t\tswap_ssa_operands (stmt,\n \t\t\t\t   gimple_assign_rhs1_ptr (stmt),\n \t\t\t\t   gimple_assign_rhs2_ptr (stmt));\n+\t      else if (code == COND_EXPR\n+\t\t       && CONSTANT_CLASS_P (gimple_assign_rhs2 (stmt)))\n+\t\t{\n+\t\t  tree cond_expr = gimple_assign_rhs1 (stmt);\n+\t\t  enum tree_code cond_code = TREE_CODE (cond_expr);\n+\n+\t\t  if (TREE_CODE_CLASS (cond_code) == tcc_comparison)\n+\t\t    {\n+\t\t      bool honor_nans = HONOR_NANS (TREE_OPERAND (cond_expr,\n+\t\t\t\t\t\t\t\t  0));\n+\t\t      cond_code = invert_tree_comparison (cond_code,\n+\t\t\t\t\t\t\t  honor_nans);\n+\t\t      if (cond_code != ERROR_MARK)\n+\t\t\t{\n+\t\t\t  TREE_SET_CODE (cond_expr, cond_code);\n+\t\t\t  swap_ssa_operands (stmt,\n+\t\t\t\t\t     gimple_assign_rhs2_ptr (stmt),\n+\t\t\t\t\t     gimple_assign_rhs3_ptr (stmt));\n+\t\t\t}\n+\t\t    }\n+\t\t}\n \t    }\n \n \t  /* Free stmt_vec_info.  */\n@@ -3006,38 +3027,56 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n       && (code == COND_EXPR\n \t  || !def2 || gimple_nop_p (def2)\n \t  || !flow_bb_inside_loop_p (loop, gimple_bb (def2))\n-          || (def2 && flow_bb_inside_loop_p (loop, gimple_bb (def2))\n- \t      && (is_gimple_assign (def2)\n+\t  || (def2 && flow_bb_inside_loop_p (loop, gimple_bb (def2))\n+\t      && (is_gimple_assign (def2)\n \t\t  || is_gimple_call (def2)\n-\t          || STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def2))\n-                      == vect_induction_def\n- \t          || (gimple_code (def2) == GIMPLE_PHI\n+\t\t  || STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def2))\n+\t\t       == vect_induction_def\n+\t\t  || (gimple_code (def2) == GIMPLE_PHI\n \t\t      && STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def2))\n-                          == vect_internal_def\n+\t\t\t   == vect_internal_def\n \t\t      && !is_loop_header_bb_p (gimple_bb (def2)))))))\n     {\n-      if (check_reduction\n-\t  && orig_code != MINUS_EXPR)\n-        {\n+      if (check_reduction && orig_code != MINUS_EXPR)\n+\t{\n+\t  /* Check if we can swap operands (just for simplicity - so that\n+\t     the rest of the code can assume that the reduction variable\n+\t     is always the last (second) argument).  */\n \t  if (code == COND_EXPR)\n \t    {\n-\t      /* No current known use where this case would be useful.  */\n-\t      if (dump_enabled_p ())\n-\t\treport_vect_op (MSG_NOTE, def_stmt,\n-\t\t\t\t\"detected reduction: cannot currently swap \"\n-\t\t\t\t\"operands for cond_expr\");\n-\t      return NULL;\n+\t      /* Swap cond_expr by inverting the condition.  */\n+\t      tree cond_expr = gimple_assign_rhs1 (def_stmt);\n+\t      enum tree_code invert_code = ERROR_MARK;\n+\t      enum tree_code cond_code = TREE_CODE (cond_expr);\n+\n+\t      if (TREE_CODE_CLASS (cond_code) == tcc_comparison)\n+\t\t{\n+\t\t  bool honor_nans = HONOR_NANS (TREE_OPERAND (cond_expr, 0));\n+\t\t  invert_code = invert_tree_comparison (cond_code, honor_nans);\n+\t\t}\n+\t      if (invert_code != ERROR_MARK)\n+\t\t{\n+\t\t  TREE_SET_CODE (cond_expr, invert_code);\n+\t\t  swap_ssa_operands (def_stmt,\n+\t\t\t\t     gimple_assign_rhs2_ptr (def_stmt),\n+\t\t\t\t     gimple_assign_rhs3_ptr (def_stmt));\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  if (dump_enabled_p ())\n+\t\t    report_vect_op (MSG_NOTE, def_stmt,\n+\t\t\t\t    \"detected reduction: cannot swap operands \"\n+\t\t\t\t    \"for cond_expr\");\n+\t\t  return NULL;\n+\t\t}\n \t    }\n+\t  else\n+\t    swap_ssa_operands (def_stmt, gimple_assign_rhs1_ptr (def_stmt),\n+\t\t\t       gimple_assign_rhs2_ptr (def_stmt));\n \n-          /* Swap operands (just for simplicity - so that the rest of the code\n-\t     can assume that the reduction variable is always the last (second)\n-\t     argument).  */\n-          if (dump_enabled_p ())\n+\t  if (dump_enabled_p ())\n \t    report_vect_op (MSG_NOTE, def_stmt,\n-\t  \t            \"detected reduction: need to swap operands: \");\n-\n-          swap_ssa_operands (def_stmt, gimple_assign_rhs1_ptr (def_stmt),\n- \t\t\t     gimple_assign_rhs2_ptr (def_stmt));\n+\t\t\t    \"detected reduction: need to swap operands: \");\n \n \t  if (CONSTANT_CLASS_P (gimple_assign_rhs1 (def_stmt)))\n \t    LOOP_VINFO_OPERANDS_SWAPPED (loop_info) = true;"}]}