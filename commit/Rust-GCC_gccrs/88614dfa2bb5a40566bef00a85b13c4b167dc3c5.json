{"sha": "88614dfa2bb5a40566bef00a85b13c4b167dc3c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg2MTRkZmEyYmI1YTQwNTY2YmVmMDBhODViMTNjNGIxNjdkYzNjNQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-07-03T08:36:35Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-07-03T08:36:35Z"}, "message": "Add .gnu.lto_.lto section.\n\n2019-07-03  Martin Liska  <mliska@suse.cz>\n\n\t* lto-section-in.c (lto_get_section_data): Add \"lto\" section.\n\t* lto-section-out.c (lto_destroy_simple_output_block): Never\n\tcompress LTO_section_lto section.\n\t* lto-streamer-out.c (produce_asm): Do not set major_version\n\tand minor_version.\n\t(lto_output_toplevel_asms): Likewise.\n\t(produce_lto_section): New function.\n\t(lto_output): Call produce_lto_section.\n\t(lto_write_mode_table): Do not set major_version and\n\tminor_version.\n\t(produce_asm_for_decls): Likewise.\n\t* lto-streamer.h (enum lto_section_type): Add LTO_section_lto\n\ttype.\n\t(struct lto_header): Remove.\n\t(struct lto_section): New struct.\n\t(struct lto_simple_header): Do not inherit from lto_header.\n\t(struct lto_file_decl_data): Add lto_section_header field.\n2019-07-03  Martin Liska  <mliska@suse.cz>\n\n\t* lto-common.c: Read LTO section and verify header.\n\nFrom-SVN: r272995", "tree": {"sha": "c8eb33857108931389e2e1062444b2deb45e6a29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8eb33857108931389e2e1062444b2deb45e6a29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88614dfa2bb5a40566bef00a85b13c4b167dc3c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88614dfa2bb5a40566bef00a85b13c4b167dc3c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88614dfa2bb5a40566bef00a85b13c4b167dc3c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88614dfa2bb5a40566bef00a85b13c4b167dc3c5/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1"}], "stats": {"total": 115, "additions": 88, "deletions": 27}, "files": [{"sha": "3eadae23cb00c0e6b2e387273490d12f7b92fd39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88614dfa2bb5a40566bef00a85b13c4b167dc3c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88614dfa2bb5a40566bef00a85b13c4b167dc3c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88614dfa2bb5a40566bef00a85b13c4b167dc3c5", "patch": "@@ -1,3 +1,23 @@\n+2019-07-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-section-in.c (lto_get_section_data): Add \"lto\" section.\n+\t* lto-section-out.c (lto_destroy_simple_output_block): Never\n+\tcompress LTO_section_lto section.\n+\t* lto-streamer-out.c (produce_asm): Do not set major_version\n+\tand minor_version.\n+\t(lto_output_toplevel_asms): Likewise.\n+\t(produce_lto_section): New function.\n+\t(lto_output): Call produce_lto_section.\n+\t(lto_write_mode_table): Do not set major_version and\n+\tminor_version.\n+\t(produce_asm_for_decls): Likewise.\n+\t* lto-streamer.h (enum lto_section_type): Add LTO_section_lto\n+\ttype.\n+\t(struct lto_header): Remove.\n+\t(struct lto_section): New struct.\n+\t(struct lto_simple_header): Do not inherit from lto_header.\n+\t(struct lto_file_decl_data): Add lto_section_header field.\n+\n 2019-07-03  Martin Liska  <mliska@suse.cz>\n \n \t* lra-eliminations.c (eliminate_regs_in_insn): Remove"}, {"sha": "4e7d1181f2372b362ad9f6814f506c9fb847954e", "filename": "gcc/lto-section-in.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88614dfa2bb5a40566bef00a85b13c4b167dc3c5/gcc%2Flto-section-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88614dfa2bb5a40566bef00a85b13c4b167dc3c5/gcc%2Flto-section-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-in.c?ref=88614dfa2bb5a40566bef00a85b13c4b167dc3c5", "patch": "@@ -52,10 +52,10 @@ const char *lto_section_name[LTO_N_SECTION_TYPES] =\n   \"icf\",\n   \"offload_table\",\n   \"mode_table\",\n-  \"hsa\"\n+  \"hsa\",\n+  \"lto\"\n };\n \n-\n /* Hooks so that the ipa passes can call into the lto front end to get\n    sections.  */\n \n@@ -146,7 +146,7 @@ lto_get_section_data (struct lto_file_decl_data *file_data,\n   /* WPA->ltrans streams are not compressed with exception of function bodies\n      and variable initializers that has been verbatim copied from earlier\n      compilations.  */\n-  if (!flag_ltrans || decompress)\n+  if ((!flag_ltrans || decompress) && section_type != LTO_section_lto)\n     {\n       /* Create a mapping header containing the underlying data and length,\n \t and prepend this to the uncompression buffer.  The uncompressed data\n@@ -167,9 +167,6 @@ lto_get_section_data (struct lto_file_decl_data *file_data,\n       data = buffer.data + header_length;\n     }\n \n-  lto_check_version (((const lto_header *)data)->major_version,\n-\t\t     ((const lto_header *)data)->minor_version,\n-\t\t     file_data->file_name);\n   return data;\n }\n "}, {"sha": "7ae102164eff25e2528c22aee894210c97b2c1b9", "filename": "gcc/lto-section-out.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88614dfa2bb5a40566bef00a85b13c4b167dc3c5/gcc%2Flto-section-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88614dfa2bb5a40566bef00a85b13c4b167dc3c5/gcc%2Flto-section-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-out.c?ref=88614dfa2bb5a40566bef00a85b13c4b167dc3c5", "patch": "@@ -285,8 +285,6 @@ lto_destroy_simple_output_block (struct lto_simple_output_block *ob)\n   /* Write the header which says how to decode the pieces of the\n      t.  */\n   memset (&header, 0, sizeof (struct lto_simple_header));\n-  header.major_version = LTO_major_version;\n-  header.minor_version = LTO_minor_version;\n   header.main_size = ob->main_stream->total_size;\n   lto_write_data (&header, sizeof header);\n "}, {"sha": "7dee770aa112985b785d0e5eba9ca581b87cd7d1", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88614dfa2bb5a40566bef00a85b13c4b167dc3c5/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88614dfa2bb5a40566bef00a85b13c4b167dc3c5/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=88614dfa2bb5a40566bef00a85b13c4b167dc3c5", "patch": "@@ -1974,10 +1974,6 @@ produce_asm (struct output_block *ob, tree fn)\n   /* The entire header is stream computed here.  */\n   memset (&header, 0, sizeof (struct lto_function_header));\n \n-  /* Write the header.  */\n-  header.major_version = LTO_major_version;\n-  header.minor_version = LTO_minor_version;\n-\n   if (section_type == LTO_section_function_body)\n     header.cfg_size = ob->cfg_stream->total_size;\n   header.main_size = ob->main_stream->total_size;\n@@ -2270,10 +2266,6 @@ lto_output_toplevel_asms (void)\n   /* The entire header stream is computed here.  */\n   memset (&header, 0, sizeof (header));\n \n-  /* Write the header.  */\n-  header.major_version = LTO_major_version;\n-  header.minor_version = LTO_minor_version;\n-\n   header.main_size = ob->main_stream->total_size;\n   header.string_size = ob->string_stream->total_size;\n   lto_write_data (&header, sizeof header);\n@@ -2390,6 +2382,29 @@ prune_offload_funcs (void)\n     DECL_PRESERVE_P (fn_decl) = 1;\n }\n \n+/* Produce LTO section that contains global information\n+   about LTO bytecode.  */\n+\n+static void\n+produce_lto_section ()\n+{\n+  /* Stream LTO meta section.  */\n+  output_block *ob = create_output_block (LTO_section_lto);\n+\n+  char * section_name = lto_get_section_name (LTO_section_lto, NULL, NULL);\n+  lto_begin_section (section_name, false);\n+  free (section_name);\n+\n+  lto_compression compression = ZLIB;\n+\n+  bool slim_object = flag_generate_lto && !flag_fat_lto_objects;\n+  lto_section s\n+    = { LTO_major_version, LTO_minor_version, slim_object, compression, 0 };\n+  lto_write_data (&s, sizeof s);\n+  lto_end_section ();\n+  destroy_output_block (ob);\n+}\n+\n /* Main entry point from the pass manager.  */\n \n void\n@@ -2412,6 +2427,8 @@ lto_output (void)\n   /* Initialize the streamer.  */\n   lto_streamer_init ();\n \n+  produce_lto_section ();\n+\n   n_nodes = lto_symtab_encoder_size (encoder);\n   /* Process only the functions with bodies.  */\n   for (i = 0; i < n_nodes; i++)\n@@ -2827,10 +2844,6 @@ lto_write_mode_table (void)\n   struct lto_simple_header_with_strings header;\n   memset (&header, 0, sizeof (header));\n \n-  /* Write the header.  */\n-  header.major_version = LTO_major_version;\n-  header.minor_version = LTO_minor_version;\n-\n   header.main_size = ob->main_stream->total_size;\n   header.string_size = ob->string_stream->total_size;\n   lto_write_data (&header, sizeof header);\n@@ -2901,9 +2914,6 @@ produce_asm_for_decls (void)\n       lto_output_decl_state_streams (ob, fn_out_state);\n     }\n \n-  header.major_version = LTO_major_version;\n-  header.minor_version = LTO_minor_version;\n-\n   /* Currently not used.  This field would allow us to preallocate\n      the globals vector, so that it need not be resized as it is extended.  */\n   header.num_nodes = -1;"}, {"sha": "f1593d64c7120aea3ddf2cc7221171bf6485fc9c", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88614dfa2bb5a40566bef00a85b13c4b167dc3c5/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88614dfa2bb5a40566bef00a85b13c4b167dc3c5/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=88614dfa2bb5a40566bef00a85b13c4b167dc3c5", "patch": "@@ -234,6 +234,7 @@ enum lto_section_type\n   LTO_section_offload_table,\n   LTO_section_mode_table,\n   LTO_section_ipa_hsa,\n+  LTO_section_lto,\n   LTO_N_SECTION_TYPES\t\t/* Must be last.  */\n };\n \n@@ -378,18 +379,31 @@ class lto_input_block\n   unsigned int len;\n };\n \n+/* Compression algorithm used for compression of LTO bytecode.  */\n \n-/* The is the first part of the record for a function or constructor\n-   in the .o file.  */\n-struct lto_header\n+enum lto_compression\n+{\n+  ZLIB,\n+  ZSTD\n+};\n+\n+/* Structure that represents LTO ELF section with information\n+   about the format.  */\n+\n+struct lto_section\n {\n   int16_t major_version;\n   int16_t minor_version;\n+  unsigned char slim_object: 1;\n+  lto_compression compression: 4;\n+  int32_t reserved0: 27;\n };\n \n+STATIC_ASSERT (sizeof (lto_section) == 8);\n+\n /* The is the first part of the record in an LTO file for many of the\n    IPA passes.  */\n-struct lto_simple_header : lto_header\n+struct lto_simple_header\n {\n   /* Size of main gimple body of function.  */\n   int32_t main_size;\n@@ -589,6 +603,9 @@ struct GTY(()) lto_file_decl_data\n \n   /* Mode translation table.  */\n   const unsigned char *mode_table;\n+\n+  /* Read LTO section.  */\n+  lto_section lto_section_header;\n };\n \n typedef struct lto_file_decl_data *lto_file_decl_data_ptr;"}, {"sha": "23ad84ecc75af4863ac9f2edfdbe5f24f6085681", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88614dfa2bb5a40566bef00a85b13c4b167dc3c5/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88614dfa2bb5a40566bef00a85b13c4b167dc3c5/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=88614dfa2bb5a40566bef00a85b13c4b167dc3c5", "patch": "@@ -1,3 +1,7 @@\n+2019-07-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-common.c: Read LTO section and verify header.\n+\n 2019-06-27  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-common.c (lto_register_canonical_types_for_odr_types):"}, {"sha": "bc8c2b403877784a6b2747aacf8b0286185663cf", "filename": "gcc/lto/lto-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88614dfa2bb5a40566bef00a85b13c4b167dc3c5/gcc%2Flto%2Flto-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88614dfa2bb5a40566bef00a85b13c4b167dc3c5/gcc%2Flto%2Flto-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-common.c?ref=88614dfa2bb5a40566bef00a85b13c4b167dc3c5", "patch": "@@ -2189,6 +2189,21 @@ lto_file_finalize (struct lto_file_decl_data *file_data, lto_file *file)\n #else\n   file_data->mode_table = lto_mode_identity_table;\n #endif\n+\n+  /* Read and verify LTO section.  */\n+  data = lto_get_section_data (file_data, LTO_section_lto, NULL, &len, false);\n+  if (data == NULL)\n+    {\n+      fatal_error (input_location, \"bytecode stream in file %qs generated \"\n+\t\t   \"with GCC compiler older than 10.0\", file_data->file_name);\n+      return;\n+    }\n+\n+  file_data->lto_section_header = *(const lto_section *)data;\n+  lto_check_version (file_data->lto_section_header.major_version,\n+\t\t     file_data->lto_section_header.minor_version,\n+\t\t     file_data->file_name);\n+\n   data = lto_get_section_data (file_data, LTO_section_decls, NULL, &len);\n   if (data == NULL)\n     {"}]}