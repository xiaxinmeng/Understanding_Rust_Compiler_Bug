{"sha": "40de9f7604b99da9e0b9e3eed7df9a3c34c7e1da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBkZTlmNzYwNGI5OWRhOWUwYjllM2VlZDdkZjlhM2MzNGM3ZTFkYQ==", "commit": {"author": {"name": "Per Bothner", "email": "pbothner@apple.com", "date": "2003-10-02T07:30:34Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2003-10-02T07:30:34Z"}, "message": "cpplib.c (_cpp_pop_buffer): Do generate a _cpp_do_file_change callback even when popping the main file.\n\n\n\t* cpplib.c (_cpp_pop_buffer):  Do generate a _cpp_do_file_change\n\tcallback even when popping the main file.\n\n\t* cpplib.c (cpp_push_buffer):  Since we no longer set return_at_eof,\n\tremove the unused return_at_eof parameter.\n\t* cppfiles.c, cpplib.c, cppmacro.c, cpppch.c, fix-header.c:\n\tUpdate callers of cpp_push_buffer.\n\nFrom-SVN: r72016", "tree": {"sha": "c20dbb16aaad4d46e1efbbdb072fa9eb2e5cb387", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c20dbb16aaad4d46e1efbbdb072fa9eb2e5cb387"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40de9f7604b99da9e0b9e3eed7df9a3c34c7e1da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40de9f7604b99da9e0b9e3eed7df9a3c34c7e1da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40de9f7604b99da9e0b9e3eed7df9a3c34c7e1da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40de9f7604b99da9e0b9e3eed7df9a3c34c7e1da/comments", "author": null, "committer": null, "parents": [{"sha": "31703a61a7f15e58788363c4c110421b44610743", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31703a61a7f15e58788363c4c110421b44610743", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31703a61a7f15e58788363c4c110421b44610743"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "a65f89666e859c2a8d6b67640d93de6aec247463", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40de9f7604b99da9e0b9e3eed7df9a3c34c7e1da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40de9f7604b99da9e0b9e3eed7df9a3c34c7e1da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40de9f7604b99da9e0b9e3eed7df9a3c34c7e1da", "patch": "@@ -5,6 +5,8 @@\n \t(get_non_padding_token):  We no longer need to compensate for the\n \t\"horrible things\" the C++ front-end does with the current line number,\n \n+\t* cpplib.c (_cpp_pop_buffer):  Do generate a _cpp_do_file_change\n+\tcallback even when popping the main file.\n \t* c-lex.c (fe_file_change):  Handle a NULL new_map.\n \t* fix-header.c (cb_file_change):  Likewise.\n \t* c-ppoutput.c (pp_file_change):  Likewise.\n@@ -40,6 +42,11 @@\n \n \t* cpplex.c (_cpp_get_fresh_line):  Return value now just depends on\n \twhether pfile->buffer is NULL after pop, ignoring return_at_eof.\n+\t* cpphash.h (struct cpp_buffer):  Remove unused return_at_eof field.\n+\t* cpplib.c (cpp_push_buffer):  Since we no longer set return_at_eof,\n+\tremove the unused return_at_eof parameter.\n+\t* cppfiles.c, cpplib.c, cppmacro.c, cpppch.c, fix-header.c:\n+\tUpdate callers of cpp_push_buffer.\n \n 2003-10-01  Zack Weinberg  <zack@codesourcery.com>\n "}, {"sha": "7fba1f3e96b0b3c5e0a6c1e674d021b6ec9cf12f", "filename": "gcc/cpplib.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40de9f7604b99da9e0b9e3eed7df9a3c34c7e1da/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40de9f7604b99da9e0b9e3eed7df9a3c34c7e1da/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=40de9f7604b99da9e0b9e3eed7df9a3c34c7e1da", "patch": "@@ -438,7 +438,7 @@ static void\n run_directive (cpp_reader *pfile, int dir_no, const char *buf, size_t count)\n {\n   cpp_push_buffer (pfile, (const uchar *) buf, count,\n-\t\t   /* from_stage3 */ true, 1);\n+\t\t   /* from_stage3 */ true);\n   /* Disgusting hack.  */\n   if (dir_no == T_PRAGMA)\n     pfile->buffer->file = pfile->buffer->prev->file;\n@@ -1911,7 +1911,7 @@ cpp_set_callbacks (cpp_reader *pfile, cpp_callbacks *cb)\n    is the responsibility of the caller.  */\n cpp_buffer *\n cpp_push_buffer (cpp_reader *pfile, const uchar *buffer, size_t len,\n-\t\t int from_stage3, int return_at_eof)\n+\t\t int from_stage3)\n {\n   cpp_buffer *new = xobnew (&pfile->buffer_ob, cpp_buffer);\n \n@@ -1922,7 +1922,6 @@ cpp_push_buffer (cpp_reader *pfile, const uchar *buffer, size_t len,\n   new->rlimit = buffer + len;\n   new->from_stage3 = from_stage3;\n   new->prev = pfile->buffer;\n-  new->return_at_eof = return_at_eof;\n   new->need_line = true;\n \n   pfile->buffer = new;\n@@ -1960,9 +1959,7 @@ _cpp_pop_buffer (cpp_reader *pfile)\n     {\n       _cpp_pop_file_buffer (pfile, inc);\n \n-      /* Don't generate a callback for popping the main file.  */\n-      if (pfile->buffer)\n-\t_cpp_do_file_change (pfile, LC_LEAVE, 0, 0, 0);\n+      _cpp_do_file_change (pfile, LC_LEAVE, 0, 0, 0);\n     }\n }\n "}, {"sha": "43f688ab7a0febeaf3766658f571cb499882e8c5", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40de9f7604b99da9e0b9e3eed7df9a3c34c7e1da/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40de9f7604b99da9e0b9e3eed7df9a3c34c7e1da/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=40de9f7604b99da9e0b9e3eed7df9a3c34c7e1da", "patch": "@@ -270,7 +270,7 @@ builtin_macro (cpp_reader *pfile, cpp_hashnode *node)\n   memcpy (nbuf, buf, len);\n   nbuf[len]='\\n';\n \n-  cpp_push_buffer (pfile, (uchar *) nbuf, len, /* from_stage3 */ true, 1);\n+  cpp_push_buffer (pfile, (uchar *) nbuf, len, /* from_stage3 */ true);\n   _cpp_clean_line (pfile);\n \n   /* Set pfile->cur_token as required by _cpp_lex_direct.  */\n@@ -426,7 +426,7 @@ paste_tokens (cpp_reader *pfile, const cpp_token **plhs, const cpp_token *rhs)\n   end = cpp_spell_token (pfile, rhs, end);\n   *end = '\\n';\n \n-  cpp_push_buffer (pfile, buf, end - buf, /* from_stage3 */ true, 1);\n+  cpp_push_buffer (pfile, buf, end - buf, /* from_stage3 */ true);\n   _cpp_clean_line (pfile);\n \n   /* Set pfile->cur_token as required by _cpp_lex_direct.  */\n@@ -1136,10 +1136,6 @@ cpp_sys_macro_p (cpp_reader *pfile)\n void\n cpp_scan_nooutput (cpp_reader *pfile)\n {\n-  /* Request a CPP_EOF token at the end of this file, rather than\n-     transparently continuing with the including file.  */\n-  pfile->buffer->return_at_eof = true;\n-\n   if (CPP_OPTION (pfile, traditional))\n     while (_cpp_read_logical_line_trad (pfile))\n       ;"}, {"sha": "71c7aae98dd96fa1fdd0352b3a8c1e5d0e215e77", "filename": "gcc/cpppch.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40de9f7604b99da9e0b9e3eed7df9a3c34c7e1da/gcc%2Fcpppch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40de9f7604b99da9e0b9e3eed7df9a3c34c7e1da/gcc%2Fcpppch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpppch.c?ref=40de9f7604b99da9e0b9e3eed7df9a3c34c7e1da", "patch": "@@ -686,8 +686,8 @@ cpp_read_state (cpp_reader *r, const char *name, FILE *f,\n       else if (m.name_length != m.definition_length)\n \t{\n \t  if (cpp_push_buffer (r, defn + m.name_length, \n-\t\t\t       m.definition_length - m.name_length, \n-\t\t\t       true, 1) != NULL)\n+\t\t\t       m.definition_length - m.name_length, true)\n+\t      != NULL)\n \t    {\n \t      _cpp_clean_line (r);\n \t      if (!_cpp_create_definition (r, h))"}]}