{"sha": "8001f59c82b98c4348e00183fe83621d649dafca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAwMWY1OWM4MmI5OGM0MzQ4ZTAwMTgzZmU4MzYyMWQ2NDlkYWZjYQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-03-23T17:59:51Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-03-24T20:53:16Z"}, "message": "[testsuite,arm] target-supports.exp: Add arm_fp_dp_ok effective-target\n\nSome tests require double-precision support, but the existing\narm_fp_ok effective-target only checks if hardware floating-point is\navailable, not what level. So this patch adds a new arm_fp_dp_ok\neffective-target to check that double-precision is supported.\n\n2020-03-24  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* doc/sourcebuild.texi (ARM-specific attributes): Add\n\tarm_fp_dp_ok.\n\t(Features for dg-add-options): Add arm_fp_dp.\n\n\tgcc/testsuite/\n\t* lib/target-supports.exp\n\t(check_effective_target_arm_fp_dp_ok_nocache): New.\n\t(check_effective_target_arm_fp_dp_ok): New.\n\t(add_options_for_arm_fp_dp): New.", "tree": {"sha": "54d5e273d09f5d6a7106a7f3e7b8f5b21999f236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54d5e273d09f5d6a7106a7f3e7b8f5b21999f236"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8001f59c82b98c4348e00183fe83621d649dafca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8001f59c82b98c4348e00183fe83621d649dafca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8001f59c82b98c4348e00183fe83621d649dafca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8001f59c82b98c4348e00183fe83621d649dafca/comments", "author": null, "committer": null, "parents": [{"sha": "04099157691ec6ff25d8d32e30b04eec89dcf94b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04099157691ec6ff25d8d32e30b04eec89dcf94b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04099157691ec6ff25d8d32e30b04eec89dcf94b"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "4edf2128efb20281f00810ddb99d18c714d45687", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8001f59c82b98c4348e00183fe83621d649dafca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8001f59c82b98c4348e00183fe83621d649dafca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8001f59c82b98c4348e00183fe83621d649dafca", "patch": "@@ -1,3 +1,9 @@\n+2020-03-24  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* doc/sourcebuild.texi (ARM-specific attributes): Add\n+\tarm_fp_dp_ok.\n+\t(Features for dg-add-options): Add arm_fp_dp.\n+\n 2020-03-24  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR lto/94249"}, {"sha": "91b46cc654ba9a28cf941a2adbebcd99f19a6ba5", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8001f59c82b98c4348e00183fe83621d649dafca/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8001f59c82b98c4348e00183fe83621d649dafca/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=8001f59c82b98c4348e00183fe83621d649dafca", "patch": "@@ -1733,6 +1733,12 @@ ARM target defines @code{__ARM_FP} using @code{-mfloat-abi=softfp} or\n equivalent options.  Some multilibs may be incompatible with these\n options.\n \n+@item arm_fp_dp_ok\n+@anchor{arm_fp_dp_ok}\n+ARM target defines @code{__ARM_FP} with double-precision support using\n+@code{-mfloat-abi=softfp} or equivalent options.  Some multilibs may\n+be incompatible with these options.\n+\n @item arm_hf_eabi\n ARM target adheres to the VFP and Advanced SIMD Register Arguments\n variant of the ABI for the ARM Architecture (as selected with\n@@ -2504,6 +2510,11 @@ are:\n in certain modes; see the @ref{arm_fp_ok,,arm_fp_ok effective target\n keyword}.\n \n+@item arm_fp_dp\n+@code{__ARM_FP} definition with double-precision support.  Only ARM\n+targets support this feature, and only then in certain modes; see the\n+@ref{arm_fp_dp_ok,,arm_fp_dp_ok effective target keyword}.\n+\n @item arm_neon\n NEON support.  Only ARM targets support this feature, and only then\n in certain modes; see the @ref{arm_neon_ok,,arm_neon_ok effective target"}, {"sha": "adce8ede3b3262a9789dee063c2c9b53fac3d727", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8001f59c82b98c4348e00183fe83621d649dafca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8001f59c82b98c4348e00183fe83621d649dafca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8001f59c82b98c4348e00183fe83621d649dafca", "patch": "@@ -1,3 +1,10 @@\n+2020-03-24  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_fp_dp_ok_nocache): New.\n+\t(check_effective_target_arm_fp_dp_ok): New.\n+\t(add_options_for_arm_fp_dp): New.\n+\n 2020-03-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94286\n@@ -18,7 +25,7 @@\n \tPR target/94238\n \t* gcc.c-torture/compile/pr94144.c: New test.\n \t* gcc.c-torture/compile/pr94238.c: New test.\n-\t\n+\n 2020-03-23  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/93805"}, {"sha": "f9794b6688f5ed284dde196f9709433bd1c2140e", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8001f59c82b98c4348e00183fe83621d649dafca/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8001f59c82b98c4348e00183fe83621d649dafca/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=8001f59c82b98c4348e00183fe83621d649dafca", "patch": "@@ -3679,6 +3679,50 @@ proc add_options_for_arm_fp { flags } {\n     return \"$flags $et_arm_fp_flags\"\n }\n \n+# Return 1 if this is an ARM target defining __ARM_FP with\n+# double-precision support. We may need -mfloat-abi=softfp or\n+# equivalent options.  Some multilibs may be incompatible with these\n+# options.  Also set et_arm_fp_dp_flags to the best options to add.\n+\n+proc check_effective_target_arm_fp_dp_ok_nocache { } {\n+    global et_arm_fp_dp_flags\n+    set et_arm_fp_dp_flags \"\"\n+    if { [check_effective_target_arm32] } {\n+\tforeach flags {\"\" \"-mfloat-abi=softfp\" \"-mfloat-abi=hard\"} {\n+\t    if { [check_no_compiler_messages_nocache arm_fp_dp_ok object {\n+\t\t#ifndef __ARM_FP\n+\t\t#error __ARM_FP not defined\n+\t\t#endif\n+\t\t#if ((__ARM_FP & 8) == 0)\n+\t\t#error __ARM_FP indicates that double-precision is not supported\n+\t\t#endif\n+\t    } \"$flags\"] } {\n+\t\tset et_arm_fp_dp_flags $flags\n+\t\treturn 1\n+\t    }\n+\t}\n+    }\n+\n+    return 0\n+}\n+\n+proc check_effective_target_arm_fp_dp_ok { } {\n+    return [check_cached_effective_target arm_fp_dp_ok \\\n+\t\tcheck_effective_target_arm_fp_dp_ok_nocache]\n+}\n+\n+# Add the options needed to define __ARM_FP with double-precision\n+# support.  We need either -mfloat-abi=softfp or -mfloat-abi=hard, but\n+# if one is already specified by the multilib, use it.\n+\n+proc add_options_for_arm_fp_dp { flags } {\n+    if { ! [check_effective_target_arm_fp_dp_ok] } {\n+\treturn \"$flags\"\n+    }\n+    global et_arm_fp_dp_flags\n+    return \"$flags $et_arm_fp_dp_flags\"\n+}\n+\n # Return 1 if this is an ARM target that supports DSP multiply with\n # current multilib flags.\n "}]}