{"sha": "4de09b857ea83e17912dad82a2dddc1047376d41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRlMDliODU3ZWE4M2UxNzkxMmRhZDgyYTJkZGRjMTA0NzM3NmQ0MQ==", "commit": {"author": {"name": "Dehao Chen", "email": "dehao@google.com", "date": "2013-06-15T16:56:01Z"}, "committer": {"name": "Dehao Chen", "email": "dehao@gcc.gnu.org", "date": "2013-06-15T16:56:01Z"}, "message": "tree-flow.h (gimple_check_call_matching_types): Add new argument.\n\n2013-06-15  Dehao Chen  <dehao@google.com>\n\n\t* tree-flow.h (gimple_check_call_matching_types): Add new argument.\n\t* gimple-low.c (gimple_check_call_matching_types): Likewise.\n\t(gimple_check_call_args): Likewise.\n\t* value-prof.c (check_ic_target): Likewise.\n\t* ipa-inline.c (early_inliner): Likewise.\n\t* ipa-prop.c (update_indirect_edges_after_inlining): Likewise.\n\t* cgraph.c (cgraph_create_edge_1): Likewise.\n\t(cgraph_make_edge_direct): Likewise.\n\nFrom-SVN: r200125", "tree": {"sha": "0d27f935f2366cda4b8120bd06b4c6a9c25ca62d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d27f935f2366cda4b8120bd06b4c6a9c25ca62d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4de09b857ea83e17912dad82a2dddc1047376d41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de09b857ea83e17912dad82a2dddc1047376d41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4de09b857ea83e17912dad82a2dddc1047376d41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de09b857ea83e17912dad82a2dddc1047376d41/comments", "author": {"login": "danielcdh", "id": 694263, "node_id": "MDQ6VXNlcjY5NDI2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/694263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielcdh", "html_url": "https://github.com/danielcdh", "followers_url": "https://api.github.com/users/danielcdh/followers", "following_url": "https://api.github.com/users/danielcdh/following{/other_user}", "gists_url": "https://api.github.com/users/danielcdh/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielcdh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielcdh/subscriptions", "organizations_url": "https://api.github.com/users/danielcdh/orgs", "repos_url": "https://api.github.com/users/danielcdh/repos", "events_url": "https://api.github.com/users/danielcdh/events{/privacy}", "received_events_url": "https://api.github.com/users/danielcdh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "58aee036e81d53cfb0c9de70369270633a042c42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58aee036e81d53cfb0c9de70369270633a042c42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58aee036e81d53cfb0c9de70369270633a042c42"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "d4a354623844c496a3d13b666ab7804342f35cbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de09b857ea83e17912dad82a2dddc1047376d41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de09b857ea83e17912dad82a2dddc1047376d41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4de09b857ea83e17912dad82a2dddc1047376d41", "patch": "@@ -1,3 +1,14 @@\n+2013-06-15  Dehao Chen  <dehao@google.com>\n+\n+\t* tree-flow.h (gimple_check_call_matching_types): Add new argument.\n+\t* gimple-low.c (gimple_check_call_matching_types): Likewise.\n+\t(gimple_check_call_args): Likewise.\n+\t* value-prof.c (check_ic_target): Likewise.\n+\t* ipa-inline.c (early_inliner): Likewise.\n+\t* ipa-prop.c (update_indirect_edges_after_inlining): Likewise.\n+\t* cgraph.c (cgraph_create_edge_1): Likewise.\n+\t(cgraph_make_edge_direct): Likewise.\n+\n 2013-06-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/57615"}, {"sha": "a2ec60221e9b1d85feb644e1ee8de4c59adb88b3", "filename": "gcc/cgraph.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de09b857ea83e17912dad82a2dddc1047376d41/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de09b857ea83e17912dad82a2dddc1047376d41/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=4de09b857ea83e17912dad82a2dddc1047376d41", "patch": "@@ -818,7 +818,8 @@ cgraph_create_edge_1 (struct cgraph_node *caller, struct cgraph_node *callee,\n   pop_cfun ();\n   if (call_stmt\n       && callee && callee->symbol.decl\n-      && !gimple_check_call_matching_types (call_stmt, callee->symbol.decl))\n+      && !gimple_check_call_matching_types (call_stmt, callee->symbol.decl,\n+\t\t\t\t\t    false))\n     edge->call_stmt_cannot_inline_p = true;\n   else\n     edge->call_stmt_cannot_inline_p = false;\n@@ -1018,7 +1019,8 @@ cgraph_make_edge_direct (struct cgraph_edge *edge, struct cgraph_node *callee)\n \n   if (edge->call_stmt)\n     edge->call_stmt_cannot_inline_p\n-      = !gimple_check_call_matching_types (edge->call_stmt, callee->symbol.decl);\n+      = !gimple_check_call_matching_types (edge->call_stmt, callee->symbol.decl,\n+\t\t\t\t\t   false);\n \n   /* We need to re-determine the inlining status of the edge.  */\n   initialize_inline_failed (edge);"}, {"sha": "64cc031785d3722246252eb4d80b98319b6d6d3a", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de09b857ea83e17912dad82a2dddc1047376d41/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de09b857ea83e17912dad82a2dddc1047376d41/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=4de09b857ea83e17912dad82a2dddc1047376d41", "patch": "@@ -204,7 +204,7 @@ struct gimple_opt_pass pass_lower_cf =\n    return false.  */\n \n static bool\n-gimple_check_call_args (gimple stmt, tree fndecl)\n+gimple_check_call_args (gimple stmt, tree fndecl, bool args_count_match)\n {\n   tree parms, p;\n   unsigned int i, nargs;\n@@ -243,6 +243,8 @@ gimple_check_call_args (gimple stmt, tree fndecl)\n \t\t  && !fold_convertible_p (DECL_ARG_TYPE (p), arg)))\n             return false;\n \t}\n+      if (args_count_match && p)\n+\treturn false;\n     }\n   else if (parms)\n     {\n@@ -271,11 +273,13 @@ gimple_check_call_args (gimple stmt, tree fndecl)\n }\n \n /* Verify if the type of the argument and lhs of CALL_STMT matches\n-   that of the function declaration CALLEE.\n+   that of the function declaration CALLEE. If ARGS_COUNT_MATCH is\n+   true, the arg count needs to be the same.\n    If we cannot verify this or there is a mismatch, return false.  */\n \n bool\n-gimple_check_call_matching_types (gimple call_stmt, tree callee)\n+gimple_check_call_matching_types (gimple call_stmt, tree callee,\n+\t\t\t\t  bool args_count_match)\n {\n   tree lhs;\n \n@@ -285,7 +289,7 @@ gimple_check_call_matching_types (gimple call_stmt, tree callee)\n        && !useless_type_conversion_p (TREE_TYPE (DECL_RESULT (callee)),\n                                       TREE_TYPE (lhs))\n        && !fold_convertible_p (TREE_TYPE (DECL_RESULT (callee)), lhs))\n-      || !gimple_check_call_args (call_stmt, callee))\n+      || !gimple_check_call_args (call_stmt, callee, args_count_match))\n     return false;\n   return true;\n }"}, {"sha": "5d50bb436048011fab812e969b2cf3cf16cb705d", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de09b857ea83e17912dad82a2dddc1047376d41/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de09b857ea83e17912dad82a2dddc1047376d41/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=4de09b857ea83e17912dad82a2dddc1047376d41", "patch": "@@ -2054,8 +2054,8 @@ early_inliner (void)\n \t      es->call_stmt_time\n \t\t= estimate_num_insns (edge->call_stmt, &eni_time_weights);\n \t      if (edge->callee->symbol.decl\n-\t\t  && !gimple_check_call_matching_types (edge->call_stmt,\n-\t\t\t\t\t\t\tedge->callee->symbol.decl))\n+\t\t  && !gimple_check_call_matching_types (\n+\t\t      edge->call_stmt, edge->callee->symbol.decl, false))\n \t\tedge->call_stmt_cannot_inline_p = true;\n \t    }\n \t  timevar_pop (TV_INTEGRATION);"}, {"sha": "a65adbbe331ca6d0ad8585c4d26edc8bf821a341", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de09b857ea83e17912dad82a2dddc1047376d41/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de09b857ea83e17912dad82a2dddc1047376d41/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=4de09b857ea83e17912dad82a2dddc1047376d41", "patch": "@@ -2468,8 +2468,9 @@ update_indirect_edges_after_inlining (struct cgraph_edge *cs,\n \t  new_direct_edge->indirect_inlining_edge = 1;\n \t  if (new_direct_edge->call_stmt)\n \t    new_direct_edge->call_stmt_cannot_inline_p\n-\t      = !gimple_check_call_matching_types (new_direct_edge->call_stmt,\n-\t\t\t\t\t\t   new_direct_edge->callee->symbol.decl);\n+\t      = !gimple_check_call_matching_types (\n+\t\t  new_direct_edge->call_stmt,\n+\t\t  new_direct_edge->callee->symbol.decl, false);\n \t  if (new_edges)\n \t    {\n \t      new_edges->safe_push (new_direct_edge);"}, {"sha": "caa8d7457fbf54eb0b582c42e5bf21e21619cf3c", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de09b857ea83e17912dad82a2dddc1047376d41/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de09b857ea83e17912dad82a2dddc1047376d41/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=4de09b857ea83e17912dad82a2dddc1047376d41", "patch": "@@ -464,7 +464,7 @@ extern void record_vars_into (tree, tree);\n extern void record_vars (tree);\n extern bool gimple_seq_may_fallthru (gimple_seq);\n extern bool gimple_stmt_may_fallthru (gimple);\n-extern bool gimple_check_call_matching_types (gimple, tree);\n+extern bool gimple_check_call_matching_types (gimple, tree, bool);\n \n \n /* In tree-ssa.c  */"}, {"sha": "67bc2c8ea8e86423ed877d435280d724c3fa418a", "filename": "gcc/value-prof.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de09b857ea83e17912dad82a2dddc1047376d41/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de09b857ea83e17912dad82a2dddc1047376d41/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=4de09b857ea83e17912dad82a2dddc1047376d41", "patch": "@@ -1231,7 +1231,7 @@ static bool\n check_ic_target (gimple call_stmt, struct cgraph_node *target)\n {\n    location_t locus;\n-   if (gimple_check_call_matching_types (call_stmt, target->symbol.decl))\n+   if (gimple_check_call_matching_types (call_stmt, target->symbol.decl, true))\n      return true;\n \n    locus =  gimple_location (call_stmt);"}]}