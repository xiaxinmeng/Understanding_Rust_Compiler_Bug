{"sha": "5c4e8e5cd4c246e9d5c4dcecdc7cd77d0477584b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM0ZThlNWNkNGMyNDZlOWQ1YzRkY2VjZGM3Y2Q3N2QwNDc3NTg0Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-07-09T17:50:11Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-07-09T17:50:11Z"}, "message": "cp-tree.h (struct cp_parameter_declarator): Rename ellipsis_p to template_parameter_pack_p.\n\n\t* cp-tree.h (struct cp_parameter_declarator): Rename ellipsis_p to\n\ttemplate_parameter_pack_p.\n\t* parser.c (declarator_can_be_parameter_pack): False if\n\tparameter_pack_p is set.\n\t(make_parameter_declarator): Add template_parameter_pack_p parm.\n\t(cp_parser_template_parameter): Remove parameter pack parsing.\n\t(cp_parser_parameter_declaration): Handle all parameter packs.\n\tTweak default argument permerror.\n\nFrom-SVN: r225621", "tree": {"sha": "848228dc41d77265fce72478044b985321dbf536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/848228dc41d77265fce72478044b985321dbf536"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c4e8e5cd4c246e9d5c4dcecdc7cd77d0477584b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c4e8e5cd4c246e9d5c4dcecdc7cd77d0477584b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c4e8e5cd4c246e9d5c4dcecdc7cd77d0477584b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c4e8e5cd4c246e9d5c4dcecdc7cd77d0477584b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2cc6d90e2d74a1bd0f97bf7106a86c1b85f70d8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc6d90e2d74a1bd0f97bf7106a86c1b85f70d8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cc6d90e2d74a1bd0f97bf7106a86c1b85f70d8f"}], "stats": {"total": 122, "additions": 43, "deletions": 79}, "files": [{"sha": "8ebe307efc9a5a24ed53896b1f795e7b1ee9fcd3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4e8e5cd4c246e9d5c4dcecdc7cd77d0477584b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4e8e5cd4c246e9d5c4dcecdc7cd77d0477584b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5c4e8e5cd4c246e9d5c4dcecdc7cd77d0477584b", "patch": "@@ -1,3 +1,14 @@\n+2015-07-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (struct cp_parameter_declarator): Rename ellipsis_p to\n+\ttemplate_parameter_pack_p.\n+\t* parser.c (declarator_can_be_parameter_pack): False if\n+\tparameter_pack_p is set.\n+\t(make_parameter_declarator): Add template_parameter_pack_p parm.\n+\t(cp_parser_template_parameter): Remove parameter pack parsing.\n+\t(cp_parser_parameter_declaration): Handle all parameter packs.\n+\tTweak default argument permerror.\n+\n 2015-07-09  Andrew Sutton  <andrew.n.sutton@gmail.com>\n \n \t* parser.c (cp_parser_default_type_template_argument)"}, {"sha": "d3836123643693313483f722514f47d828c6b1f9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4e8e5cd4c246e9d5c4dcecdc7cd77d0477584b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4e8e5cd4c246e9d5c4dcecdc7cd77d0477584b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5c4e8e5cd4c246e9d5c4dcecdc7cd77d0477584b", "patch": "@@ -5042,9 +5042,8 @@ struct cp_parameter_declarator {\n   cp_declarator *declarator;\n   /* The default-argument expression, or NULL_TREE, if none.  */\n   tree default_argument;\n-  /* True iff this is the first parameter in the list and the\n-     parameter sequence ends with an ellipsis.  */\n-  bool ellipsis_p;\n+  /* True iff this is is a template parameter pack.  */\n+  bool template_parameter_pack_p;\n };\n \n /* A declarator.  */"}, {"sha": "491109652125799e3a93404d9b1a43ea013b1fdc", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 30, "deletions": 76, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4e8e5cd4c246e9d5c4dcecdc7cd77d0477584b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4e8e5cd4c246e9d5c4dcecdc7cd77d0477584b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5c4e8e5cd4c246e9d5c4dcecdc7cd77d0477584b", "patch": "@@ -1349,8 +1349,6 @@ static cp_declarator *make_pointer_declarator\n   (cp_cv_quals, cp_declarator *, tree);\n static cp_declarator *make_reference_declarator\n   (cp_cv_quals, cp_declarator *, bool, tree);\n-static cp_parameter_declarator *make_parameter_declarator\n-  (cp_decl_specifier_seq *, cp_declarator *, tree);\n static cp_declarator *make_ptrmem_declarator\n   (cp_cv_quals, tree, cp_declarator *, tree);\n \n@@ -1575,6 +1573,10 @@ make_array_declarator (cp_declarator *element, tree bounds)\n static bool \n declarator_can_be_parameter_pack (cp_declarator *declarator)\n {\n+  if (declarator && declarator->parameter_pack_p)\n+    /* We already saw an ellipsis.  */\n+    return false;\n+\n   /* Search for a declarator name, or any other declarator that goes\n      after the point where the ellipsis could appear in a parameter\n      pack. If we find any of these, then this declarator can not be\n@@ -1609,7 +1611,8 @@ cp_parameter_declarator *no_parameters;\n cp_parameter_declarator *\n make_parameter_declarator (cp_decl_specifier_seq *decl_specifiers,\n \t\t\t   cp_declarator *declarator,\n-\t\t\t   tree default_argument)\n+\t\t\t   tree default_argument,\n+\t\t\t   bool template_parameter_pack_p = false)\n {\n   cp_parameter_declarator *parameter;\n \n@@ -1622,7 +1625,7 @@ make_parameter_declarator (cp_decl_specifier_seq *decl_specifiers,\n     clear_decl_specs (&parameter->decl_specifiers);\n   parameter->declarator = declarator;\n   parameter->default_argument = default_argument;\n-  parameter->ellipsis_p = false;\n+  parameter->template_parameter_pack_p = template_parameter_pack_p;\n \n   return parameter;\n }\n@@ -13411,7 +13414,6 @@ cp_parser_template_parameter (cp_parser* parser, bool *is_non_type,\n {\n   cp_token *token;\n   cp_parameter_declarator *parameter_declarator;\n-  cp_declarator *id_declarator;\n   tree parm;\n \n   /* Assume it is a type parameter or a template parameter.  */\n@@ -13472,15 +13474,9 @@ cp_parser_template_parameter (cp_parser* parser, bool *is_non_type,\n     return error_mark_node;\n \n   /* If the parameter declaration is marked as a parameter pack, set\n-     *IS_PARAMETER_PACK to notify the caller. Also, unmark the\n-     declarator's PACK_EXPANSION_P, otherwise we'll get errors from\n-     grokdeclarator. */\n-  if (parameter_declarator->declarator\n-      && parameter_declarator->declarator->parameter_pack_p)\n-    {\n-      *is_parameter_pack = true;\n-      parameter_declarator->declarator->parameter_pack_p = false;\n-    }\n+   *IS_PARAMETER_PACK to notify the caller.  */\n+  if (parameter_declarator->template_parameter_pack_p)\n+    *is_parameter_pack = true;\n \n   if (parameter_declarator->default_argument)\n     {\n@@ -13489,55 +13485,6 @@ cp_parser_template_parameter (cp_parser* parser, bool *is_non_type,\n \t/* Consume the `...' for better error recovery.  */\n \tcp_lexer_consume_token (parser->lexer);\n     }\n-  /* If the next token is an ellipsis, and we don't already have it\n-     marked as a parameter pack, then we have a parameter pack (that\n-     has no declarator).  */\n-  else if (!*is_parameter_pack\n-\t   && cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS)\n-\t   && (declarator_can_be_parameter_pack\n-\t       (parameter_declarator->declarator)))\n-    {\n-      /* Consume the `...'.  */\n-      cp_lexer_consume_token (parser->lexer);\n-      maybe_warn_variadic_templates ();\n-      \n-      *is_parameter_pack = true;\n-    }\n-  /* We might end up with a pack expansion as the type of the non-type\n-     template parameter, in which case this is a non-type template\n-     parameter pack.  */\n-  else if (parameter_declarator->decl_specifiers.type\n-\t   && PACK_EXPANSION_P (parameter_declarator->decl_specifiers.type))\n-    {\n-      *is_parameter_pack = true;\n-      parameter_declarator->decl_specifiers.type = \n-\tPACK_EXPANSION_PATTERN (parameter_declarator->decl_specifiers.type);\n-    }\n-\n-  if (*is_parameter_pack && cp_lexer_next_token_is (parser->lexer, CPP_EQ))\n-    {\n-      /* Parameter packs cannot have default arguments.  However, a\n-\t user may try to do so, so we'll parse them and give an\n-\t appropriate diagnostic here.  */\n-\n-      cp_token *start_token = cp_lexer_peek_token (parser->lexer);\n-      \n-      /* Find the name of the parameter pack.  */     \n-      id_declarator = parameter_declarator->declarator;\n-      while (id_declarator && id_declarator->kind != cdk_id)\n-\tid_declarator = id_declarator->declarator;\n-      \n-      if (id_declarator && id_declarator->kind == cdk_id)\n-\terror_at (start_token->location,\n-\t\t  \"template parameter pack %qD cannot have a default argument\",\n-\t\t  id_declarator->u.id.unqualified_name);\n-      else\n-\terror_at (start_token->location,\n-\t\t  \"template parameter pack cannot have a default argument\");\n-      \n-      /* Parse the default argument, but throw away the result.  */\n-      cp_parser_default_argument (parser, /*template_parm_p=*/true);\n-    }\n \n   parm = grokdeclarator (parameter_declarator->declarator,\n \t\t\t &parameter_declarator->decl_specifiers,\n@@ -19039,6 +18986,7 @@ cp_parser_parameter_declaration (cp_parser *parser,\n   tree default_argument;\n   cp_token *token = NULL, *declarator_token_start = NULL;\n   const char *saved_message;\n+  bool template_parameter_pack_p = false;\n \n   /* In a template parameter, `>' is not an operator.\n \n@@ -19124,6 +19072,15 @@ cp_parser_parameter_declaration (cp_parser *parser,\n       decl_specifiers.attributes\n \t= chainon (decl_specifiers.attributes,\n \t\t   cp_parser_attributes_opt (parser));\n+\n+      /* If the declarator is a template parameter pack, remember that and\n+\t clear the flag in the declarator itself so we don't get errors\n+\t from grokdeclarator.  */\n+      if (template_parm_p && declarator && declarator->parameter_pack_p)\n+\t{\n+\t  declarator->parameter_pack_p = false;\n+\t  template_parameter_pack_p = true;\n+\t}\n     }\n \n   /* If the next token is an ellipsis, and we have not seen a\n@@ -19142,15 +19099,16 @@ cp_parser_parameter_declaration (cp_parser *parser,\n       if (type\n \t  && TREE_CODE (type) != TYPE_PACK_EXPANSION\n \t  && declarator_can_be_parameter_pack (declarator)\n-          && (!declarator || !declarator->parameter_pack_p)\n-          && uses_parameter_packs (type))\n+          && (template_parm_p || uses_parameter_packs (type)))\n         {\n \t  /* Consume the `...'. */\n \t  cp_lexer_consume_token (parser->lexer);\n \t  maybe_warn_variadic_templates ();\n \t  \n \t  /* Build a pack expansion type */\n-\t  if (declarator)\n+\t  if (template_parm_p)\n+\t    template_parameter_pack_p = true;\n+\t  else if (declarator)\n \t    declarator->parameter_pack_p = true;\n \t  else\n \t    decl_specifiers.type = make_pack_expansion (type);\n@@ -19179,17 +19137,12 @@ cp_parser_parameter_declaration (cp_parser *parser,\n \n       if (!parser->default_arg_ok_p)\n \t{\n-\t  if (flag_permissive)\n-\t    warning (0, \"deprecated use of default argument for parameter of non-function\");\n-\t  else\n-\t    {\n-\t      error_at (token->location,\n-\t\t\t\"default arguments are only \"\n-\t\t\t\"permitted for function parameters\");\n-\t      default_argument = NULL_TREE;\n-\t    }\n+\t  permerror (token->location,\n+\t\t     \"default arguments are only \"\n+\t\t     \"permitted for function parameters\");\n \t}\n       else if ((declarator && declarator->parameter_pack_p)\n+\t       || template_parameter_pack_p\n \t       || (decl_specifiers.type\n \t\t   && PACK_EXPANSION_P (decl_specifiers.type)))\n \t{\n@@ -19222,7 +19175,8 @@ cp_parser_parameter_declaration (cp_parser *parser,\n \n   return make_parameter_declarator (&decl_specifiers,\n \t\t\t\t    declarator,\n-\t\t\t\t    default_argument);\n+\t\t\t\t    default_argument,\n+\t\t\t\t    template_parameter_pack_p);\n }\n \n /* Parse a default argument and return it."}]}