{"sha": "41e3db05d697405256b6002d8432955a93d249f1", "node_id": "C_kwDOANBUbNoAKDQxZTNkYjA1ZDY5NzQwNTI1NmI2MDAyZDg0MzI5NTVhOTNkMjQ5ZjE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-02T10:01:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-02T11:16:59Z"}, "message": "tree-optimization/104240 - SLP discovery with swapped comparisons\n\nThe following extends SLP discovery to handle swapped operands\nin comparisons.\n\n2022-05-02  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104240\n\t* tree-vect-slp.cc (op1_op0_map): New.\n\t(vect_get_operand_map): Handle compares.\n\t(vect_build_slp_tree_1): Support swapped operands for\n\ttcc_comparison.\n\n\t* gcc.dg/vect/bb-slp-pr104240.c: New testcase.", "tree": {"sha": "40b90a111fceeacd1629f52b7d936c8713ff767e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40b90a111fceeacd1629f52b7d936c8713ff767e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41e3db05d697405256b6002d8432955a93d249f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e3db05d697405256b6002d8432955a93d249f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e3db05d697405256b6002d8432955a93d249f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e3db05d697405256b6002d8432955a93d249f1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86d821ddf5615e693ead667b2580898f46de8eb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86d821ddf5615e693ead667b2580898f46de8eb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86d821ddf5615e693ead667b2580898f46de8eb9"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "78905a468e0b244cd434469226579bf9d247031f", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-pr104240.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e3db05d697405256b6002d8432955a93d249f1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr104240.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e3db05d697405256b6002d8432955a93d249f1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr104240.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr104240.c?ref=41e3db05d697405256b6002d8432955a93d249f1", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_cond_mixed } */\n+\n+void foo (int *c, float *x, float *y)\n+{\n+  c[0] = x[0] < y[0];\n+  c[1] = y[1] > x[1];\n+  c[2] = x[2] < y[2];\n+  c[3] = x[3] < y[3];\n+}\n+\n+/* { dg-final { scan-tree-dump \"optimized: basic block\" \"slp2\" } } */"}, {"sha": "2685bc103473875e5f9443beb2a3fee3caeaf8af", "filename": "gcc/tree-vect-slp.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e3db05d697405256b6002d8432955a93d249f1/gcc%2Ftree-vect-slp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e3db05d697405256b6002d8432955a93d249f1/gcc%2Ftree-vect-slp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.cc?ref=41e3db05d697405256b6002d8432955a93d249f1", "patch": "@@ -462,6 +462,7 @@ static const int cond_expr_maps[3][5] = {\n static const int arg1_map[] = { 1, 1 };\n static const int arg2_map[] = { 1, 2 };\n static const int arg1_arg4_map[] = { 2, 1, 4 };\n+static const int op1_op0_map[] = { 2, 1, 0 };\n \n /* For most SLP statements, there is a one-to-one mapping between\n    gimple arguments and child nodes.  If that is not true for STMT,\n@@ -482,6 +483,9 @@ vect_get_operand_map (const gimple *stmt, unsigned char swap = 0)\n       if (gimple_assign_rhs_code (assign) == COND_EXPR\n \t  && COMPARISON_CLASS_P (gimple_assign_rhs1 (assign)))\n \treturn cond_expr_maps[swap];\n+      if (TREE_CODE_CLASS (gimple_assign_rhs_code (assign)) == tcc_comparison\n+\t  && swap)\n+\treturn op1_op0_map;\n     }\n   gcc_assert (!swap);\n   if (auto call = dyn_cast<const gcall *> (stmt))\n@@ -1116,6 +1120,12 @@ vect_build_slp_tree_1 (vec_info *vinfo, unsigned char *swap,\n \t\t    && (alt_stmt_code == PLUS_EXPR\n \t\t\t|| alt_stmt_code == MINUS_EXPR)\n \t\t    && rhs_code == alt_stmt_code)\n+\t       && !(first_stmt_code.is_tree_code ()\n+\t\t    && rhs_code.is_tree_code ()\n+\t\t    && (TREE_CODE_CLASS (tree_code (first_stmt_code))\n+\t\t\t== tcc_comparison)\n+\t\t    && (swap_tree_comparison (tree_code (first_stmt_code))\n+\t\t\t== tree_code (rhs_code)))\n \t       && !(STMT_VINFO_GROUPED_ACCESS (stmt_info)\n \t\t    && (first_stmt_code == ARRAY_REF\n \t\t\t|| first_stmt_code == BIT_FIELD_REF\n@@ -1313,6 +1323,12 @@ vect_build_slp_tree_1 (vec_info *vinfo, unsigned char *swap,\n \t\t  continue;\n \t\t}\n \t    }\n+\n+\t  if (rhs_code.is_tree_code ()\n+\t      && TREE_CODE_CLASS ((tree_code)rhs_code) == tcc_comparison\n+\t      && (swap_tree_comparison ((tree_code)first_stmt_code)\n+\t\t  == (tree_code)rhs_code))\n+\t    swap[i] = 1;\n \t}\n \n       matches[i] = true;\n@@ -1326,7 +1342,8 @@ vect_build_slp_tree_1 (vec_info *vinfo, unsigned char *swap,\n      with the permute we are going to use.  */\n   if (alt_stmt_code != ERROR_MARK\n       && (!alt_stmt_code.is_tree_code ()\n-\t  || TREE_CODE_CLASS (tree_code (alt_stmt_code)) != tcc_reference))\n+\t  || (TREE_CODE_CLASS (tree_code (alt_stmt_code)) != tcc_reference\n+\t      && TREE_CODE_CLASS (tree_code (alt_stmt_code)) != tcc_comparison)))\n     {\n       *two_operators = true;\n     }"}]}