{"sha": "79bdca32d42fcd1a77fbb94826d22f020dca8829", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzliZGNhMzJkNDJmY2QxYTc3ZmJiOTQ4MjZkMjJmMDIwZGNhODgyOQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-07-08T09:57:36Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-07-08T09:57:36Z"}, "message": "alias.h: Do not include coretypes.h in header files.\n\ngcc/\n\t* alias.h: Do not include coretypes.h in header files.\n\t* cppbuiltin.h: Likewise.\n\t* double-int.h: Likewise.\n\t* gimple-fold.h: Likewise.\n\t* flags.h: Likewise.\n\t* tree-ssa-alias.h: Likewise.\n\t* gengtype.h (obstack_chunk_alloc, obstack_chunk_free,\n\tOBSTACK_CHUNK_SIZE): Define here to avoid dependency on coretypes.h.\n\t* Makefile.in (RTL_BASE_H): Depend on coretypes.h.\n\t(TREE_H): Likewise.\n\t(ALIAS_H): Do not depend on coretypes.h.\n\t(FLAGS_H): Likewise.\n\t(realmpfr.o): Depend on coretypes.h.\n\njava/\n\t* verify.h: Do not include system.h and coretypes.h here.\n\t* verify-impl.c: Include them here instead.\n\nFrom-SVN: r189358", "tree": {"sha": "1f889da1ddbeefc98575d8857f4c77a4196d001a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f889da1ddbeefc98575d8857f4c77a4196d001a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79bdca32d42fcd1a77fbb94826d22f020dca8829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79bdca32d42fcd1a77fbb94826d22f020dca8829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79bdca32d42fcd1a77fbb94826d22f020dca8829", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79bdca32d42fcd1a77fbb94826d22f020dca8829/comments", "author": null, "committer": null, "parents": [{"sha": "953bee7c4a084245ae19ffb3b56e8a4685548a36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953bee7c4a084245ae19ffb3b56e8a4685548a36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/953bee7c4a084245ae19ffb3b56e8a4685548a36"}], "stats": {"total": 55, "additions": 34, "deletions": 21}, "files": [{"sha": "e6bbdc3353cadf73aed514fbd626ef00ec60a4dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79bdca32d42fcd1a77fbb94826d22f020dca8829", "patch": "@@ -1,3 +1,19 @@\n+2012-07-08  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* alias.h: Do not include coretypes.h in header files.\n+\t* cppbuiltin.h: Likewise.\n+\t* double-int.h: Likewise.\n+\t* gimple-fold.h: Likewise.\n+\t* flags.h: Likewise.\n+\t* tree-ssa-alias.h: Likewise.\n+\t* gengtype.h (obstack_chunk_alloc, obstack_chunk_free,\n+\tOBSTACK_CHUNK_SIZE): Define here to avoid dependency on coretypes.h.\n+\t* Makefile.in (RTL_BASE_H): Depend on coretypes.h.\n+\t(TREE_H): Likewise.\n+\t(ALIAS_H): Do not depend on coretypes.h.\n+\t(FLAGS_H): Likewise.\n+\t(realmpfr.o): Depend on coretypes.h.\n+\n 2012-07-08  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* Makefile.in (gengtype-lex.o, gengtype-parse.o, gengtype-state.o,"}, {"sha": "deb76282fc7fb5bad236f2c09e572162610ef906", "filename": "gcc/Makefile.in", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=79bdca32d42fcd1a77fbb94826d22f020dca8829", "patch": "@@ -855,9 +855,9 @@ C_TARGET_DEF_H = c-family/c-target-def.h c-family/c-target-hooks-def.h \\\n   $(TREE_H) $(C_COMMON_H) $(HOOKS_H) common/common-targhooks.h\n COMMON_TARGET_DEF_H = common/common-target-def.h \\\n   common/common-target-hooks-def.h $(HOOKS_H)\n-RTL_BASE_H = rtl.h rtl.def $(MACHMODE_H) reg-notes.def insn-notes.def \\\n-  $(INPUT_H) $(REAL_H) statistics.h $(VEC_H) $(FIXED_VALUE_H) alias.h \\\n-  $(HASHTAB_H)\n+RTL_BASE_H = coretypes.h rtl.h rtl.def $(MACHMODE_H) reg-notes.def \\\n+  insn-notes.def $(INPUT_H) $(REAL_H) statistics.h $(VEC_H) \\\n+  $(FIXED_VALUE_H) alias.h $(HASHTAB_H)\n FIXED_VALUE_H = fixed-value.h $(MACHMODE_H) double-int.h\n RTL_H = $(RTL_BASE_H) genrtl.h vecir.h\n RTL_ERROR_H = rtl-error.h $(RTL_H) $(DIAGNOSTIC_CORE_H)\n@@ -867,7 +867,7 @@ BUILTINS_DEF = builtins.def sync-builtins.def omp-builtins.def \\\n \tgtm-builtins.def\n INTERNAL_FN_DEF = internal-fn.def\n INTERNAL_FN_H = internal-fn.h $(INTERNAL_FN_DEF)\n-TREE_H = tree.h all-tree.def tree.def c-family/c-common.def \\\n+TREE_H = coretypes.h tree.h all-tree.def tree.def c-family/c-common.def \\\n \t$(lang_tree_files) $(MACHMODE_H) tree-check.h $(BUILTINS_DEF) \\\n \t$(INPUT_H) statistics.h $(VEC_H) treestruct.def $(HASHTAB_H) \\\n \tdouble-int.h alias.h $(SYMTAB_H) $(FLAGS_H) vecir.h \\\n@@ -882,9 +882,9 @@ GCOV_IO_H = gcov-io.h gcov-iov.h auto-host.h\n COVERAGE_H = coverage.h $(GCOV_IO_H)\n DEMANGLE_H = $(srcdir)/../include/demangle.h\n RECOG_H = recog.h\n-ALIAS_H = alias.h coretypes.h\n+ALIAS_H = alias.h\n EMIT_RTL_H = emit-rtl.h\n-FLAGS_H = flags.h coretypes.h flag-types.h $(OPTIONS_H)\n+FLAGS_H = flags.h flag-types.h $(OPTIONS_H)\n OPTIONS_H = options.h flag-types.h $(OPTIONS_H_EXTRA)\n FUNCTION_H = function.h $(TREE_H) $(HASHTAB_H) vecprim.h $(TM_H) hard-reg-set.h\n EXPR_H = expr.h insn-config.h $(FUNCTION_H) $(RTL_H) $(FLAGS_H) $(TREE_H) $(MACHMODE_H) $(EMIT_RTL_H)\n@@ -2822,7 +2822,7 @@ emit-rtl.o : emit-rtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(DF_H) $(PARAMS_H) $(TARGET_H)\n real.o : real.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(DIAGNOSTIC_CORE_H) $(TM_P_H) $(REAL_H) dfp.h realmpfr.h\n-realmpfr.o : realmpfr.c realmpfr.h $(CONFIG_H) $(SYSTEM_H) $(REAL_H) $(TREE_H)\n+realmpfr.o : realmpfr.c realmpfr.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(REAL_H) $(TREE_H)\n dfp.o : dfp.c dfp.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t$(TREE_H) \\\n    $(TM_P_H) $(REAL_H) $(DECNUM_H)\n fixed-value.o: fixed-value.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\"}, {"sha": "026dbe603cd8c132a954f53dc840c7610cb7539d", "filename": "gcc/alias.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Falias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Falias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.h?ref=79bdca32d42fcd1a77fbb94826d22f020dca8829", "patch": "@@ -21,8 +21,6 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_ALIAS_H\n #define GCC_ALIAS_H\n \n-#include \"coretypes.h\"\n-\n /* The type of an alias set.  Code currently assumes that variables of\n    this type can take the values 0 (the alias set which aliases\n    everything) and -1 (sometimes indicating that the alias set is"}, {"sha": "8e0e5883625609dfc59dd3c8433cf6407438b595", "filename": "gcc/cppbuiltin.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Fcppbuiltin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Fcppbuiltin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppbuiltin.h?ref=79bdca32d42fcd1a77fbb94826d22f020dca8829", "patch": "@@ -21,9 +21,6 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_CPPBUILTIN_H\n #define GCC_CPPBUILTIN_H\n \n-#include \"coretypes.h\"\n-\n-\n /* Parse a BASEVER version string of the format \"major.minor.patchlevel\"\n    or \"major.minor\" to extract its components.  */\n extern void parse_basever (int *, int *, int *);"}, {"sha": "50a9bda5d6ac3c7cff367e104d03b17a97ec7e6a", "filename": "gcc/double-int.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Fdouble-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Fdouble-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.h?ref=79bdca32d42fcd1a77fbb94826d22f020dca8829", "patch": "@@ -23,7 +23,6 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GENERATOR_FILE\n #include <gmp.h>\n #endif\n-#include \"coretypes.h\"\n \n /* A large integer is currently represented as a pair of HOST_WIDE_INTs.\n    It therefore represents a number with precision of"}, {"sha": "b996c03dd5dcb46ce2adde6ca176d4f2137b4734", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=79bdca32d42fcd1a77fbb94826d22f020dca8829", "patch": "@@ -22,7 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_FLAGS_H\n #define GCC_FLAGS_H\n \n-#include \"coretypes.h\"\n #include \"flag-types.h\"\n #include \"options.h\"\n "}, {"sha": "560f7f3de1b460c2ec4d2dded5604bc3a56c8a13", "filename": "gcc/gengtype.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Fgengtype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Fgengtype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.h?ref=79bdca32d42fcd1a77fbb94826d22f020dca8829", "patch": "@@ -21,6 +21,10 @@\n #ifndef GCC_GENGTYPE_H\n #define GCC_GENGTYPE_H\n \n+#define obstack_chunk_alloc    ((void *(*) (long)) xmalloc)\n+#define obstack_chunk_free     ((void (*) (void *)) free)\n+#define OBSTACK_CHUNK_SIZE     0\n+\n /* Sets of accepted source languages like C, C++, Ada... are\n    represented by a bitmap.  */\n typedef unsigned lang_bitmap;"}, {"sha": "e6821a9bd45a4bdcf889221016c893563562140d", "filename": "gcc/gimple-fold.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Fgimple-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Fgimple-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.h?ref=79bdca32d42fcd1a77fbb94826d22f020dca8829", "patch": "@@ -22,8 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_GIMPLE_FOLD_H\n #define GCC_GIMPLE_FOLD_H\n \n-#include \"coretypes.h\"\n-\n tree fold_const_aggregate_ref_1 (tree, tree (*) (tree));\n tree fold_const_aggregate_ref (tree);\n "}, {"sha": "5da41f69254cb4e278b824c5fd61e8b2c7650139", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=79bdca32d42fcd1a77fbb94826d22f020dca8829", "patch": "@@ -1,3 +1,8 @@\n+2012-07-08  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* verify.h: Do not include system.h and coretypes.h here.\n+\t* verify-impl.c: Include them here instead.\n+\n 2012-07-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* jcf-io.c (read_zip_member): Initialize d_stream."}, {"sha": "8841da1e3c7d113eb35f6a031471d99d9689a595", "filename": "gcc/java/verify-impl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Fjava%2Fverify-impl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Fjava%2Fverify-impl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify-impl.c?ref=79bdca32d42fcd1a77fbb94826d22f020dca8829", "patch": "@@ -13,6 +13,8 @@ details.  */\n /* #define VERIFY_DEBUG */\n \n #include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n \n #include \"verify.h\"\n "}, {"sha": "d7e01ee2916a246abefb2df1288d6523df8deaf4", "filename": "gcc/java/verify.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Fjava%2Fverify.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Fjava%2Fverify.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.h?ref=79bdca32d42fcd1a77fbb94826d22f020dca8829", "patch": "@@ -27,8 +27,6 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #ifndef GCC_VERIFY_H\n #define GCC_VERIFY_H\n \n-#include \"system.h\"\n-#include \"coretypes.h\"\n #include \"jcf.h\"\n #include \"tree.h\"\n #include \"java-tree.h\""}, {"sha": "f3505432793d549eb92be179223a22ff6b2e4021", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bdca32d42fcd1a77fbb94826d22f020dca8829/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=79bdca32d42fcd1a77fbb94826d22f020dca8829", "patch": "@@ -21,9 +21,6 @@\n #ifndef TREE_SSA_ALIAS_H\n #define TREE_SSA_ALIAS_H\n \n-#include \"coretypes.h\"\n-\n-\n /* The points-to solution.\n \n    The points-to solution is a union of pt_vars and the abstract"}]}