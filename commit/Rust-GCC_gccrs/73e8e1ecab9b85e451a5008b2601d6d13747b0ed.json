{"sha": "73e8e1ecab9b85e451a5008b2601d6d13747b0ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNlOGUxZWNhYjliODVlNDUxYTUwMDhiMjYwMWQ2ZDEzNzQ3YjBlZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-24T19:22:11Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-24T19:22:11Z"}, "message": "(BYTECODE_LABEL, BYTECODE_OFFSET, BYTECODE_BC_LABEL):\n\n(BYTECODE_UID): New macros.\n(struct rtx_def): Delete elements label, offset, bc_label, uid.\n\nFrom-SVN: r5446", "tree": {"sha": "7084f81741434a61862b1369b8aa7db37c0f9352", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7084f81741434a61862b1369b8aa7db37c0f9352"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73e8e1ecab9b85e451a5008b2601d6d13747b0ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e8e1ecab9b85e451a5008b2601d6d13747b0ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73e8e1ecab9b85e451a5008b2601d6d13747b0ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e8e1ecab9b85e451a5008b2601d6d13747b0ed/comments", "author": null, "committer": null, "parents": [{"sha": "ff32812a4744c908eabf8ca2cc09f4d9d6fc3eef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff32812a4744c908eabf8ca2cc09f4d9d6fc3eef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff32812a4744c908eabf8ca2cc09f4d9d6fc3eef"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "c65afba9f73e040526ce1d4f50ff10cf80af303a", "filename": "gcc/rtl.h", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e8e1ecab9b85e451a5008b2601d6d13747b0ed/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e8e1ecab9b85e451a5008b2601d6d13747b0ed/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=73e8e1ecab9b85e451a5008b2601d6d13747b0ed", "patch": "@@ -139,24 +139,9 @@ typedef struct rtx_def\n      The number of operands and their types are controlled\n      by the `code' field, according to rtl.def.  */\n   rtunion fld[1];\n-\n-  /* The rest is used instead of the above if bytecode is being output */\n-\n-  /* For static or external objects.  */\n-  char *label;\n-\n-  /* From the named label, or the local variable pointer or the\n-     argument pointer, depending on context.  */\n-\n-  int offset;\n-\n-  /* For goto labels inside bytecode functions.  */\n-  struct bc_label *bc_label;\n-\n-  /* A unique identifier */\n-  int uid;\n } *rtx;\n \n+\n /* Add prototype support.  */\n #ifndef PROTO\n #if defined (USE_PROTOTYPES) ? USE_PROTOTYPES : defined (__STDC__)\n@@ -434,6 +419,17 @@ extern char *note_insn_name[];\n    of LABEL_REFs that point at it, so unused labels can be deleted.  */\n #define LABEL_NUSES(LABEL) ((LABEL)->fld[5].rtint)\n \n+/* The rest is used instead of the above, in a CODE_LABEL,\n+   if bytecode is being output.\n+   We make the slightly klugy assumption that a LABEL has enough slots\n+   to hold these things.  That happens to be true.  */\n+\n+/* For static or external objects.  */\n+#define BYTECODE_LABEL(X) (XEXP ((X), 0))\n+\n+/* For goto labels inside bytecode functions.  */\n+#define BYTECODE_BC_LABEL(X) (*(struct bc_label **) &XEXP ((X), 1))\n+\n /* In jump.c, each JUMP_INSN can point to a label that it can jump to,\n    so that if the JUMP_INSN is deleted, the label's LABEL_NUSES can\n    be decremented and possibly the label can be deleted.  */"}]}