{"sha": "62041cfc096feb6e4e4a9bf5bbeab906dad708fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIwNDFjZmMwOTZmZWI2ZTRlNGE5YmY1YmJlYWI5MDZkYWQ3MDhmYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-01-22T23:14:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-01-22T23:14:27Z"}, "message": "re PR other/69432 (ICE in connect_traces, at dwarf2cfi.c with -O3 -m32 -minline-stringops-dynamically)\n\n\tPR target/69432\n\t* config/i386/i386.c: Include dojump.h.\n\t(expand_small_movmem_or_setmem,\n\texpand_set_or_movmem_prologue_epilogue_by_misaligned_moves): Spelling\n\tfixes.\n\t(ix86_expand_set_or_movmem): Call do_pending_stack_adjust () early\n\tif dynamic_check != -1.\n\n\t* g++.dg/opt/pr69432.C: New test.\n\nFrom-SVN: r232754", "tree": {"sha": "716f6f2730dc130c33b02e1dbd3f1feda7fdc850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/716f6f2730dc130c33b02e1dbd3f1feda7fdc850"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62041cfc096feb6e4e4a9bf5bbeab906dad708fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62041cfc096feb6e4e4a9bf5bbeab906dad708fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62041cfc096feb6e4e4a9bf5bbeab906dad708fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62041cfc096feb6e4e4a9bf5bbeab906dad708fa/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d403fc9a7b069eb27229796569ef654a5600e562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d403fc9a7b069eb27229796569ef654a5600e562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d403fc9a7b069eb27229796569ef654a5600e562"}], "stats": {"total": 91, "additions": 88, "deletions": 3}, "files": [{"sha": "9712574301cbfd5b10b7516cc7cf3f642a634a7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62041cfc096feb6e4e4a9bf5bbeab906dad708fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62041cfc096feb6e4e4a9bf5bbeab906dad708fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62041cfc096feb6e4e4a9bf5bbeab906dad708fa", "patch": "@@ -1,3 +1,13 @@\n+2016-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/69432\n+\t* config/i386/i386.c: Include dojump.h.\n+\t(expand_small_movmem_or_setmem,\n+\texpand_set_or_movmem_prologue_epilogue_by_misaligned_moves): Spelling\n+\tfixes.\n+\t(ix86_expand_set_or_movmem): Call do_pending_stack_adjust () early\n+\tif dynamic_check != -1.\n+\n 2016-01-21  Jeff Law  <law@redhat.com>\n \n \tPR middle-end/69347"}, {"sha": "34b57a4266080bd97926356e8ba159c00c2ec8f5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62041cfc096feb6e4e4a9bf5bbeab906dad708fa/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62041cfc096feb6e4e4a9bf5bbeab906dad708fa/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=62041cfc096feb6e4e4a9bf5bbeab906dad708fa", "patch": "@@ -75,6 +75,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dbgcnt.h\"\n #include \"case-cfn-macros.h\"\n #include \"regrename.h\"\n+#include \"dojump.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -25700,7 +25701,7 @@ expand_small_movmem_or_setmem (rtx destmem, rtx srcmem,\n        if (DYNAMIC_CHECK)\n \t Round COUNT down to multiple of SIZE\n        << optional caller supplied zero size guard is here >>\n-       << optional caller suppplied dynamic check is here >>\n+       << optional caller supplied dynamic check is here >>\n        << caller supplied main copy loop is here >>\n      }\n    done_label:\n@@ -25875,8 +25876,8 @@ expand_set_or_movmem_prologue_epilogue_by_misaligned_moves (rtx destmem, rtx src\n       else\n \t*min_size = 0;\n \n-      /* Our loops always round down the bock size, but for dispatch to library\n-\t we need precise value.  */\n+      /* Our loops always round down the block size, but for dispatch to\n+         library we need precise value.  */\n       if (dynamic_check)\n \t*count = expand_simple_binop (GET_MODE (*count), AND, *count,\n \t\t\t\t      GEN_INT (-size), *count, 1, OPTAB_DIRECT);\n@@ -26469,6 +26470,13 @@ ix86_expand_set_or_movmem (rtx dst, rtx src, rtx count_exp, rtx val_exp,\n   size_needed = GET_MODE_SIZE (move_mode) * unroll_factor;\n   epilogue_size_needed = size_needed;\n \n+  /* If we are going to call any library calls conditionally, make sure any\n+     pending stack adjustment happen before the first conditional branch,\n+     otherwise they will be emitted before the library call only and won't\n+     happen from the other branches.  */\n+  if (dynamic_check != -1)\n+    do_pending_stack_adjust ();\n+\n   desired_align = decide_alignment (align, alg, expected_size, move_mode);\n   if (!TARGET_ALIGN_STRINGOPS || noalign)\n     align = desired_align;"}, {"sha": "7cb07394bfcf27e1a95ba358bb4a51c47a8104b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62041cfc096feb6e4e4a9bf5bbeab906dad708fa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62041cfc096feb6e4e4a9bf5bbeab906dad708fa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62041cfc096feb6e4e4a9bf5bbeab906dad708fa", "patch": "@@ -1,3 +1,8 @@\n+2016-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/69432\n+\t* g++.dg/opt/pr69432.C: New test.\n+\n 2016-01-22  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/pr63354c: Adjust target selector to include"}, {"sha": "1f23f2cedd6113726eccf8a85b9f734d3779dd6a", "filename": "gcc/testsuite/g++.dg/opt/pr69432.C", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62041cfc096feb6e4e4a9bf5bbeab906dad708fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr69432.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62041cfc096feb6e4e4a9bf5bbeab906dad708fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr69432.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr69432.C?ref=62041cfc096feb6e4e4a9bf5bbeab906dad708fa", "patch": "@@ -0,0 +1,62 @@\n+// PR target/69432\n+// { dg-do compile }\n+// { dg-options \"-O3\" }\n+// { dg-additional-options \"-minline-stringops-dynamically\" { target i?86-*-* x86_64-*-* } }\n+\n+template <typename S, typename T, typename U>\n+void\n+f1 (S x, T y, U z)\n+{\n+  for (; y; --y, ++x)\n+    *x = z;\n+}\n+\n+template <typename S, typename T, typename U>\n+void f2 (S x, T y, U z)\n+{\n+  f1 (x, y, z);\n+}\n+\n+struct A {};\n+struct B { static char f3 (A, unsigned); };\n+\n+template <typename S, typename U>\n+void f4 (S, U);\n+\n+struct C\n+{\n+  template <typename S, typename T, typename U>\n+  static S f5 (S x, T y, U z) { f2 (x, y, z); }\n+};\n+\n+template <typename S, typename T, typename U>\n+void f6 (S x, T y, U z) { C::f5 (x, y, z); }\n+\n+template <typename S, typename T, typename U, typename V>\n+void f7 (S x, T y, U z, V) { f6 (x, y, z); }\n+\n+struct E\n+{\n+  struct D : A { char e; D (A); };\n+  A f;\n+  E (int x) : g(f) { f8 (x); }\n+  ~E ();\n+  D g;\n+  void f9 (int x) { x ? B::f3 (g, x) : char (); }\n+  void f8 (int x) { f9 (x); }\n+};\n+\n+struct F : E\n+{\n+  F (int x) : E(x) { f10 (x); f4 (this, 0); }\n+  char h;\n+  void f10 (int x) { f7 (&g.e, x, h, 0); }\n+};\n+\n+long a;\n+\n+void\n+test ()\n+{\n+  F b(a);\n+}"}]}