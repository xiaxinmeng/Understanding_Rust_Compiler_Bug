{"sha": "e4d2305adf4e9d11e396c1c5e5ae6214340cbcc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRkMjMwNWFkZjRlOWQxMWUzOTZjMWM1ZTVhZTYyMTQzNDBjYmNjMg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-08-31T17:15:21Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-08-31T17:15:21Z"}, "message": "Disable gcc_rich_location copying and assignment.\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_selection_statement): Use direct initialization\n\tinstead of copy.\n\ngcc/ChangeLog:\n\n\t* gcc-rich-location.h (gcc_rich_location): Make ctor explicit.\n\nlibcpp/ChangeLog:\n\n\t* include/line-map.h (class rich_location): Disable copying and\n\tassignment.", "tree": {"sha": "3a10a3da027bbc6875b65d69769465063591a1bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a10a3da027bbc6875b65d69769465063591a1bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4d2305adf4e9d11e396c1c5e5ae6214340cbcc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4d2305adf4e9d11e396c1c5e5ae6214340cbcc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4d2305adf4e9d11e396c1c5e5ae6214340cbcc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4d2305adf4e9d11e396c1c5e5ae6214340cbcc2/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e45d5b6bf1bcf9fd16c3ecfadb9bde69f890b28d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45d5b6bf1bcf9fd16c3ecfadb9bde69f890b28d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e45d5b6bf1bcf9fd16c3ecfadb9bde69f890b28d"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "1e2a4b121eaf742a071b8ca531ef94cb8d4d2e07", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d2305adf4e9d11e396c1c5e5ae6214340cbcc2/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d2305adf4e9d11e396c1c5e5ae6214340cbcc2/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e4d2305adf4e9d11e396c1c5e5ae6214340cbcc2", "patch": "@@ -12848,7 +12848,7 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \t    IF_STMT_CONSTEVAL_P (statement) = true;\n \t    condition = finish_if_stmt_cond (boolean_false_node, statement);\n \n-\t    gcc_rich_location richloc = tok->location;\n+\t    gcc_rich_location richloc (tok->location);\n \t    bool non_compound_stmt_p = false;\n \t    if (cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_BRACE))\n \t      {\n@@ -12876,7 +12876,7 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \t\t\t\t\t\tRID_ELSE))\n \t      {\n \t\tcp_token *else_tok = cp_lexer_peek_token (parser->lexer);\n-\t\tgcc_rich_location else_richloc = else_tok->location;\n+\t\tgcc_rich_location else_richloc (else_tok->location);\n \t\tguard_tinfo = get_token_indent_info (else_tok);\n \t\t/* Consume the `else' keyword.  */\n \t\tcp_lexer_consume_token (parser->lexer);"}, {"sha": "2a9e5db65d5199a5b58ebf49de9991483c81305c", "filename": "gcc/gcc-rich-location.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d2305adf4e9d11e396c1c5e5ae6214340cbcc2/gcc%2Fgcc-rich-location.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d2305adf4e9d11e396c1c5e5ae6214340cbcc2/gcc%2Fgcc-rich-location.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-rich-location.h?ref=e4d2305adf4e9d11e396c1c5e5ae6214340cbcc2", "patch": "@@ -21,14 +21,16 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_RICH_LOCATION_H\n \n /* A gcc_rich_location is libcpp's rich_location with additional\n-   helper methods for working with gcc's types.  */\n+   helper methods for working with gcc's types.  The class is not\n+   copyable or assignable because rich_location isn't. */\n+\n class gcc_rich_location : public rich_location\n {\n  public:\n   /* Constructors.  */\n \n   /* Constructing from a location.  */\n-  gcc_rich_location (location_t loc, const range_label *label = NULL)\n+  explicit gcc_rich_location (location_t loc, const range_label *label = NULL)\n   : rich_location (line_table, loc, label)\n   {\n   }"}, {"sha": "464494bfb5bc96112c3e9fa51298a2b61ca4d0e2", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d2305adf4e9d11e396c1c5e5ae6214340cbcc2/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d2305adf4e9d11e396c1c5e5ae6214340cbcc2/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=e4d2305adf4e9d11e396c1c5e5ae6214340cbcc2", "patch": "@@ -1670,6 +1670,12 @@ class rich_location\n   /* Destructor.  */\n   ~rich_location ();\n \n+  /* The class manages the memory pointed to by the elements of\n+     the M_FIXIT_HINTS vector and is not meant to be copied or\n+     assigned.  */\n+  rich_location (const rich_location &) = delete;\n+  void operator= (const rich_location &) = delete;\n+\n   /* Accessors.  */\n   location_t get_loc () const { return get_loc (0); }\n   location_t get_loc (unsigned int idx) const;"}]}