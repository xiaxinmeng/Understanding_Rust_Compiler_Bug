{"sha": "4c2b2d7916bef81ed7d2e7ebe8a657635306fa15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMyYjJkNzkxNmJlZjgxZWQ3ZDJlN2ViZThhNjU3NjM1MzA2ZmExNQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2013-12-13T20:47:19Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2013-12-13T20:47:19Z"}, "message": "ira.h (struct ira_reg_equiv): Rename to ira_reg_equiv_s.\n\n2013-12-13  Vladimir Makarov  <vmakarov@redhat.com>\n\n\t* ira.h (struct ira_reg_equiv): Rename to ira_reg_equiv_s.\n\t* ira.c: Ditto.\n\t* lra-int.h (lra_init_equiv): New prototype.\n\t* lra-constraints.c (lra_init_equiv, update_equiv): New functions.\n\t(loc_equivalence_callback): Use the 3rd arg.\n\t(lra_constraints): Update equivalences.  Pass curr_insn to\n\tsimplify_replace_fn_rtx.\n\t* lra.c (lra): Call lra_init_equiv.\n\nFrom-SVN: r205974", "tree": {"sha": "c4ae803ddb3a378c23de07993d4ac2fadf41169e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4ae803ddb3a378c23de07993d4ac2fadf41169e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c2b2d7916bef81ed7d2e7ebe8a657635306fa15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c2b2d7916bef81ed7d2e7ebe8a657635306fa15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c2b2d7916bef81ed7d2e7ebe8a657635306fa15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c2b2d7916bef81ed7d2e7ebe8a657635306fa15/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7424147986e3c898ed50e411657c8357764aa3f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7424147986e3c898ed50e411657c8357764aa3f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7424147986e3c898ed50e411657c8357764aa3f8"}], "stats": {"total": 75, "additions": 65, "deletions": 10}, "files": [{"sha": "4f7b79a3cc85acaa39e8b1a3aef5e85873e2452c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2b2d7916bef81ed7d2e7ebe8a657635306fa15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2b2d7916bef81ed7d2e7ebe8a657635306fa15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c2b2d7916bef81ed7d2e7ebe8a657635306fa15", "patch": "@@ -1,3 +1,14 @@\n+2013-12-13  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\t* ira.h (struct ira_reg_equiv): Rename to ira_reg_equiv_s.\n+\t* ira.c: Ditto.\n+\t* lra-int.h (lra_init_equiv): New prototype.\n+\t* lra-constraints.c (lra_init_equiv, update_equiv): New functions.\n+\t(loc_equivalence_callback): Use the 3rd arg.\n+\t(lra_constraints): Update equivalences.  Pass curr_insn to\n+\tsimplify_replace_fn_rtx.\n+\t* lra.c (lra): Call lra_init_equiv.\n+\n 2013-12-13  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \n \t* genmodes.c (emit_max_int): Fixed missing parens."}, {"sha": "18e2634dda0e6a1816b7c81e579bbc7a1562999f", "filename": "gcc/ira.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2b2d7916bef81ed7d2e7ebe8a657635306fa15/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2b2d7916bef81ed7d2e7ebe8a657635306fa15/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=4c2b2d7916bef81ed7d2e7ebe8a657635306fa15", "patch": "@@ -2976,7 +2976,7 @@ mark_elimination (int from, int to)\n int ira_reg_equiv_len;\n \n /* Info about equiv. info for each register.  */\n-struct ira_reg_equiv *ira_reg_equiv;\n+struct ira_reg_equiv_s *ira_reg_equiv;\n \n /* Expand ira_reg_equiv if necessary.  */\n void\n@@ -2988,12 +2988,12 @@ ira_expand_reg_equiv (void)\n     return;\n   ira_reg_equiv_len = max_reg_num () * 3 / 2 + 1;\n   ira_reg_equiv\n-    = (struct ira_reg_equiv *) xrealloc (ira_reg_equiv,\n+    = (struct ira_reg_equiv_s *) xrealloc (ira_reg_equiv,\n \t\t\t\t\t ira_reg_equiv_len\n-\t\t\t\t\t * sizeof (struct ira_reg_equiv));\n+\t\t\t\t\t * sizeof (struct ira_reg_equiv_s));\n   gcc_assert (old < ira_reg_equiv_len);\n   memset (ira_reg_equiv + old, 0,\n-\t  sizeof (struct ira_reg_equiv) * (ira_reg_equiv_len - old));\n+\t  sizeof (struct ira_reg_equiv_s) * (ira_reg_equiv_len - old));\n }\n \n static void"}, {"sha": "49acc4a45572a495a560ed265c3c72bc40a908f6", "filename": "gcc/ira.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2b2d7916bef81ed7d2e7ebe8a657635306fa15/gcc%2Fira.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2b2d7916bef81ed7d2e7ebe8a657635306fa15/gcc%2Fira.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.h?ref=4c2b2d7916bef81ed7d2e7ebe8a657635306fa15", "patch": "@@ -154,7 +154,7 @@ extern struct target_ira *this_target_ira;\n   (this_target_ira->x_ira_no_alloc_regs)\n \n /* Major structure describing equivalence info for a pseudo.  */\n-struct ira_reg_equiv\n+struct ira_reg_equiv_s\n {\n   /* True if we can use this equivalence.  */\n   bool defined_p;\n@@ -173,7 +173,7 @@ struct ira_reg_equiv\n extern int ira_reg_equiv_len;\n \n /* Info about equiv. info for each register.  */\n-extern struct ira_reg_equiv *ira_reg_equiv;\n+extern struct ira_reg_equiv_s *ira_reg_equiv;\n \n extern void ira_init_once (void);\n extern void ira_init (void);"}, {"sha": "7d09204eb8db2f1edd445f1c2fac7c34805acae2", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2b2d7916bef81ed7d2e7ebe8a657635306fa15/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2b2d7916bef81ed7d2e7ebe8a657635306fa15/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=4c2b2d7916bef81ed7d2e7ebe8a657635306fa15", "patch": "@@ -317,6 +317,44 @@ in_mem_p (int regno)\n   return get_reg_class (regno) == NO_REGS;\n }\n \n+/* Initiate equivalences for LRA.  As we keep original equivalences\n+   before any elimination, we need to make copies otherwise any change\n+   in insns might change the equivalences.  */\n+void\n+lra_init_equiv (void)\n+{\n+  ira_expand_reg_equiv ();\n+  for (int i = FIRST_PSEUDO_REGISTER; i < max_reg_num (); i++)\n+    {\n+      rtx res;\n+\n+      if ((res = ira_reg_equiv[i].memory) != NULL_RTX)\n+\tira_reg_equiv[i].memory = copy_rtx (res);\n+      if ((res = ira_reg_equiv[i].invariant) != NULL_RTX)\n+\tira_reg_equiv[i].invariant = copy_rtx (res);\n+    }\n+}\n+\n+static rtx loc_equivalence_callback (rtx, const_rtx, void *);\n+\n+/* Update equivalence for REGNO.  We need to this as the equivalence\n+   might contain other pseudos which are changed by their\n+   equivalences.  */\n+static void\n+update_equiv (int regno)\n+{\n+  rtx x;\n+  \n+  if ((x = ira_reg_equiv[regno].memory) != NULL_RTX)\n+    ira_reg_equiv[regno].memory\n+      = simplify_replace_fn_rtx (x, NULL_RTX, loc_equivalence_callback,\n+\t\t\t\t NULL_RTX);\n+  if ((x = ira_reg_equiv[regno].invariant) != NULL_RTX)\n+    ira_reg_equiv[regno].invariant\n+      = simplify_replace_fn_rtx (x, NULL_RTX, loc_equivalence_callback,\n+\t\t\t\t NULL_RTX);\n+}\n+\n /* If we have decided to substitute X with another value, return that\n    value, otherwise return X.  */\n static rtx\n@@ -3694,14 +3732,16 @@ loc_equivalence_change_p (rtx *loc)\n }\n \n /* Similar to loc_equivalence_change_p, but for use as\n-   simplify_replace_fn_rtx callback.  */\n+   simplify_replace_fn_rtx callback.  DATA is insn for which the\n+   elimination is done.  If it null we don't do the elimination.  */\n static rtx\n-loc_equivalence_callback (rtx loc, const_rtx, void *)\n+loc_equivalence_callback (rtx loc, const_rtx, void *data)\n {\n   if (!REG_P (loc))\n     return NULL_RTX;\n \n-  rtx subst = get_equiv_with_elimination (loc, curr_insn);\n+  rtx subst = (data == NULL\n+\t       ? get_equiv (loc) : get_equiv_with_elimination (loc, (rtx) data));\n   if (subst != loc)\n     return subst;\n \n@@ -3946,6 +3986,8 @@ lra_constraints (bool first_p)\n \t      bitmap_ior_into (&equiv_insn_bitmap, &lra_reg_info[i].insn_bitmap);\n \t  }\n       }\n+  for (i = FIRST_PSEUDO_REGISTER; i < new_regno_start; i++)\n+    update_equiv (i);\n   /* We should add all insns containing pseudos which should be\n      substituted by their equivalences.  */\n   EXECUTE_IF_SET_IN_BITMAP (&equiv_insn_bitmap, 0, uid, bi)\n@@ -3984,7 +4026,7 @@ lra_constraints (bool first_p)\n \t      rtx old = *curr_id->operand_loc[0];\n \t      *curr_id->operand_loc[0]\n \t\t= simplify_replace_fn_rtx (old, NULL_RTX,\n-\t\t\t\t\t   loc_equivalence_callback, NULL);\n+\t\t\t\t\t   loc_equivalence_callback, curr_insn);\n \t      if (old != *curr_id->operand_loc[0])\n \t\t{\n \t\t  lra_update_insn_regno_info (curr_insn);"}, {"sha": "22968e18da372e87c26ae12491d7ab9ae172f484", "filename": "gcc/lra-int.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2b2d7916bef81ed7d2e7ebe8a657635306fa15/gcc%2Flra-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2b2d7916bef81ed7d2e7ebe8a657635306fa15/gcc%2Flra-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-int.h?ref=4c2b2d7916bef81ed7d2e7ebe8a657635306fa15", "patch": "@@ -319,6 +319,7 @@ extern int lra_constraint_new_insn_uid_start;\n \n /* lra-constraints.c: */\n \n+extern void lra_init_equiv (void);\n extern int lra_constraint_offset (int, enum machine_mode);\n \n extern int lra_constraint_iter;"}, {"sha": "1491fc78fc5427947b765a42816558f7b617c2c4", "filename": "gcc/lra.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2b2d7916bef81ed7d2e7ebe8a657635306fa15/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2b2d7916bef81ed7d2e7ebe8a657635306fa15/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=4c2b2d7916bef81ed7d2e7ebe8a657635306fa15", "patch": "@@ -2321,6 +2321,7 @@ lra (FILE *f)\n        may be a part of the offset computation for register\n        elimination.  */\n     assign_stack_local (BLKmode, 0, crtl->stack_alignment_needed);\n+  lra_init_equiv ();\n   for (;;)\n     {\n       for (;;)"}]}