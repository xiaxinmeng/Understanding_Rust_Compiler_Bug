{"sha": "74270a546cf75aad5e2db642b4715728d4da7904", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQyNzBhNTQ2Y2Y3NWFhZDVlMmRiNjQyYjQ3MTU3MjhkNGRhNzkwNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-02T12:29:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-02T12:29:00Z"}, "message": "libstdc++: Fix null pointer dereferences in __gnu_cxx::rope\n\nThis fixes UBsan errors like:\n\n/usr/include/c++/10/ext/ropeimpl.h:593:9: runtime error: member access within null pointer of type 'struct _RopeRep'\n/usr/include/c++/10/ext/ropeimpl.h:593:9: runtime error: member call on null pointer of type 'struct _Rope_rep_base'\n/usr/include/c++/10/ext/rope:556:17: runtime error: reference binding to null pointer of type 'struct allocator_type'\n/usr/include/c++/10/ext/ropeimpl.h:593:9: runtime error: reference binding to null pointer of type 'struct allocator_type'\n/usr/include/c++/10/ext/rope:1700:30: runtime error: member call on null pointer of type 'struct new_allocator'\n/usr/include/c++/10/ext/new_allocator.h:105:29: runtime error: member call on null pointer of type 'struct new_allocator'\n/usr/include/c++/10/ext/rope:1702:26: runtime error: reference binding to null pointer of type 'const struct allocator'\n/usr/include/c++/10/bits/allocator.h:148:34: runtime error: reference binding to null pointer of type 'const struct new_allocator'\n/usr/include/c++/10/ext/rope:1664:39: runtime error: reference binding to null pointer of type 'const struct allocator'\n/usr/include/c++/10/ext/rope:1665:9: runtime error: reference binding to null pointer of type 'const struct allocator_type'\n/usr/include/c++/10/ext/rope:725:36: runtime error: reference binding to null pointer of type 'const struct allocator_type'\n/usr/include/c++/10/ext/rope:614:64: runtime error: reference binding to null pointer of type 'const struct allocator_type'\n\nThe problem is calling r->_M_get_allocator() when r is null.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/ext/rope (rope::_S_concat_char_iter)\n\t(rope::_S_destr_concat_char_iter): Add allocator parameter.\n\t(rope::push_back, rope::append, rope::insert, operator+):\n\tPass allocator.\n\t* include/ext/ropeimpl.h (rope::_S_concat_char_iter)\n\t(rope::_S_destr_concat_char_iter): Add allocator parameter\n\tand use it.\n\t(_Rope_char_ref_proxy::operator=(_CharT)): Pass allocator.", "tree": {"sha": "9d52348504820169d34120da0c74b0528f39d94e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d52348504820169d34120da0c74b0528f39d94e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74270a546cf75aad5e2db642b4715728d4da7904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74270a546cf75aad5e2db642b4715728d4da7904", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74270a546cf75aad5e2db642b4715728d4da7904", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74270a546cf75aad5e2db642b4715728d4da7904/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d38fbb5a863dfc00631c74a525a908cef620e149", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d38fbb5a863dfc00631c74a525a908cef620e149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d38fbb5a863dfc00631c74a525a908cef620e149"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "de6ecdd524fad0b0e85d5f8ef9b9f82809468266", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74270a546cf75aad5e2db642b4715728d4da7904/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74270a546cf75aad5e2db642b4715728d4da7904/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=74270a546cf75aad5e2db642b4715728d4da7904", "patch": "@@ -1612,19 +1612,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static _RopeRep* _S_concat_char_iter(_RopeRep* __r,\n \t\t\t\t\t   const _CharT* __iter,\n-\t\t\t\t\t   size_type __slen);\n-      // Concatenate rope and char ptr, copying __s.\n+\t\t\t\t\t   size_type __slen,\n+\t\t\t\t\t   allocator_type& __a);\n+      // Concatenate rope and char ptr, copying __iter.\n       // Should really take an arbitrary iterator.\n       // Result is counted in refcount.\n       static _RopeRep* _S_destr_concat_char_iter(_RopeRep* __r,\n \t\t\t\t\t\t const _CharT* __iter,\n-\t\t\t\t\t\t size_type __slen)\n+\t\t\t\t\t\t size_type __slen,\n+\t\t\t\t\t\t allocator_type& __a)\n \t// As above, but one reference to __r is about to be\n \t// destroyed.  Thus the pieces may be recycled if all\n \t// relevant reference counts are 1.\n #ifdef __GC\n \t// We can't really do anything since refcounts are unavailable.\n-      { return _S_concat_char_iter(__r, __iter, __slen); }\n+      { return _S_concat_char_iter(__r, __iter, __slen, __a); }\n #else\n       ;\n #endif\n@@ -1913,9 +1915,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       push_back(_CharT __x)\n       {\n+\tallocator_type __a = _M_get_allocator();\n \t_RopeRep* __old = this->_M_tree_ptr;\n \tthis->_M_tree_ptr\n-\t  = _S_destr_concat_char_iter(this->_M_tree_ptr, &__x, 1);\n+\t  = _S_destr_concat_char_iter(this->_M_tree_ptr, &__x, 1, __a);\n \t_S_unref(__old);\n       }\n \n@@ -2115,8 +2118,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       rope&\n       append(const _CharT* __iter, size_type __n)\n       {\n+\tallocator_type __a = _M_get_allocator();\n \t_RopeRep* __result =\n-\t  _S_destr_concat_char_iter(this->_M_tree_ptr, __iter, __n);\n+\t  _S_destr_concat_char_iter(this->_M_tree_ptr, __iter, __n, __a);\n \t_S_unref(this->_M_tree_ptr);\n \tthis->_M_tree_ptr = __result;\n \treturn *this;\n@@ -2133,8 +2137,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       rope&\n       append(const _CharT* __s, const _CharT* __e)\n       {\n+\tallocator_type __a = _M_get_allocator();\n \t_RopeRep* __result =\n-\t  _S_destr_concat_char_iter(this->_M_tree_ptr, __s, __e - __s);\n+\t  _S_destr_concat_char_iter(this->_M_tree_ptr, __s, __e - __s, __a);\n \t_S_unref(this->_M_tree_ptr);\n \tthis->_M_tree_ptr = __result;\n \treturn *this;\n@@ -2156,8 +2161,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       rope&\n       append(_CharT __c)\n       {\n+\tallocator_type __a = _M_get_allocator();\n \t_RopeRep* __result =\n-\t  _S_destr_concat_char_iter(this->_M_tree_ptr, &__c, 1);\n+\t  _S_destr_concat_char_iter(this->_M_tree_ptr, &__c, 1, __a);\n \t_S_unref(this->_M_tree_ptr);\n \tthis->_M_tree_ptr = __result;\n \treturn *this;\n@@ -2239,7 +2245,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_Self_destruct_ptr __left(_S_substring(this->_M_tree_ptr, 0, __p));\n \t_Self_destruct_ptr __right(_S_substring(this->_M_tree_ptr,\n \t\t\t\t\t\t__p, size()));\n-\t_Self_destruct_ptr __left_result(_S_concat_char_iter(__left, __i, __n));\n+\t_Self_destruct_ptr __left_result(_S_concat_char_iter(__left, __i, __n,\n+\t\t\t\t\t\t\t     _M_get_allocator()));\n \t// _S_ destr_concat_char_iter should be safe here.\n \t// But as it stands it's probably not a win, since __left\n \t// is likely to have additional references.\n@@ -2843,8 +2850,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef rope<_CharT, _Alloc> rope_type;\n       std::size_t __rlen = rope_type::_S_char_ptr_len(__right);\n+      _Alloc __a = __left.get_allocator();\n       return rope_type(rope_type::_S_concat_char_iter(__left._M_tree_ptr,\n-\t\t\t\t\t\t      __right, __rlen));\n+\t\t\t\t\t\t      __right, __rlen, __a));\n     }\n \n   template <class _CharT, class _Alloc>\n@@ -2861,8 +2869,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator+(const rope<_CharT, _Alloc>& __left, _CharT __right)\n     {\n       typedef rope<_CharT, _Alloc> rope_type;\n+      _Alloc __a = __left.get_allocator();\n       return rope_type(rope_type::_S_concat_char_iter(__left._M_tree_ptr,\n-\t\t\t\t\t\t      &__right, 1));\n+\t\t\t\t\t\t      &__right, 1, __a));\n     }\n \n   template <class _CharT, class _Alloc>"}, {"sha": "e571847d2c55fc5db5a1813a078d16d2474f707a", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74270a546cf75aad5e2db642b4715728d4da7904/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74270a546cf75aad5e2db642b4715728d4da7904/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=74270a546cf75aad5e2db642b4715728d4da7904", "patch": "@@ -524,7 +524,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <class _CharT, class _Alloc>\n     typename rope<_CharT, _Alloc>::_RopeRep*\n     rope<_CharT, _Alloc>::\n-    _S_concat_char_iter(_RopeRep* __r, const _CharT*__s, std::size_t __slen)\n+    _S_concat_char_iter(_RopeRep* __r, const _CharT*__s, std::size_t __slen,\n+\t\t\tallocator_type& __a)\n     {\n       using std::size_t;\n       _RopeRep* __result;\n@@ -534,8 +535,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return __r;\n \t}\n       if (0 == __r)\n-\treturn __STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen,\n-\t\t\t\t\t\t__r->_M_get_allocator());\n+\treturn __STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen, __a);\n       if (__r->_M_tag == __detail::_S_leaf\n \t  && __r->_M_size + __slen <= size_t(_S_copy_max))\n \t{\n@@ -564,8 +564,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      return __result;\n \t    }\n \t}\n-      _RopeRep* __nright =\n-\t__STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen, __r->_M_get_allocator());\n+      _RopeRep* __nright = __STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen, __a);\n       __try\n \t{\n \t  __r->_M_ref_nonnil();\n@@ -585,17 +584,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     typename rope<_CharT,_Alloc>::_RopeRep*\n     rope<_CharT,_Alloc>::\n     _S_destr_concat_char_iter(_RopeRep* __r, const _CharT* __s,\n-\t\t\t      std::size_t __slen)\n+\t\t\t      std::size_t __slen, allocator_type& __a)\n     {\n       using std::size_t;\n       _RopeRep* __result;\n       if (0 == __r)\n-\treturn __STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen,\n-\t\t\t\t\t\t__r->_M_get_allocator());\n+\treturn __STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen, __a);\n       size_t __count = __r->_M_ref_count;\n       size_t __orig_size = __r->_M_size;\n       if (__count > 1)\n-\treturn _S_concat_char_iter(__r, __s, __slen);\n+\treturn _S_concat_char_iter(__r, __s, __slen, __a);\n       if (0 == __slen)\n \t{\n \t  __r->_M_ref_count = 2;      // One more than before\n@@ -632,8 +630,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      return __r;\n \t    }\n \t}\n-      _RopeRep* __right =\n-\t__STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen, __r->_M_get_allocator());\n+      _RopeRep* __right = __STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen, __a);\n       __r->_M_ref_nonnil();\n       __try\n \t{ __result = _S_tree_concat(__r, __right); }\n@@ -1500,9 +1497,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Self_destruct_ptr __left(_My_rope::_S_substring(__old, 0, _M_pos));\n       _Self_destruct_ptr __right(_My_rope::_S_substring(__old, _M_pos + 1,\n \t\t\t\t\t\t\t__old->_M_size));\n+      typename _RopeRep::allocator_type __a = _M_root->_M_get_allocator();\n       _Self_destruct_ptr __result_left(_My_rope::\n \t\t\t\t       _S_destr_concat_char_iter(__left,\n-\t\t\t\t\t\t\t\t &__c, 1));\n+\t\t\t\t\t\t\t\t &__c, 1,\n+\t\t\t\t\t\t\t\t __a));\n \n       _RopeRep* __result = _My_rope::_S_concat(__result_left, __right);\n #ifndef __GC"}]}