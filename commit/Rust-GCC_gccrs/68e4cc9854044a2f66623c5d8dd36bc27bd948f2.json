{"sha": "68e4cc9854044a2f66623c5d8dd36bc27bd948f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhlNGNjOTg1NDA0NGEyZjY2NjIzYzVkOGRkMzZiYzI3YmQ5NDhmMg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-08-12T09:01:48Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-12T09:01:48Z"}, "message": "[Ada] Missing check on outbound parameter of a non-null access type\n\nThis patch adds code to generate proper post-call checks when an actual\nfor an in-out or out parameter has a non-null access type. No\nconstraints are applied to an inbound access parameter, but on exit a\nnot-null check must be performed if the type of the actual requires it.\n\n2019-08-12  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch6.adb (Expand_Actuals. Add_Call_By_Copy_Code): Add code\n\tto generate proper checks when an actual for an in-out or out\n\tparameter has a non-null access type.  No constraints are\n\tapplied to an inbound access parameter, but on exit a not-null\n\tcheck must be performed if the type of the actual requires it.\n\ngcc/testsuite/\n\n\t* gnat.dg/null_check.adb: New testcase.\n\nFrom-SVN: r274306", "tree": {"sha": "64f745c46e52948df67f3708e126e95652f6684a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64f745c46e52948df67f3708e126e95652f6684a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68e4cc9854044a2f66623c5d8dd36bc27bd948f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e4cc9854044a2f66623c5d8dd36bc27bd948f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e4cc9854044a2f66623c5d8dd36bc27bd948f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e4cc9854044a2f66623c5d8dd36bc27bd948f2/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e4ca4fcffbe6d3855f67cd02e0bb2a40d62fa10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e4ca4fcffbe6d3855f67cd02e0bb2a40d62fa10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e4ca4fcffbe6d3855f67cd02e0bb2a40d62fa10"}], "stats": {"total": 64, "additions": 61, "deletions": 3}, "files": [{"sha": "c62e621b96d0e243eecefe340f06c02cce4ed2b0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e4cc9854044a2f66623c5d8dd36bc27bd948f2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e4cc9854044a2f66623c5d8dd36bc27bd948f2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=68e4cc9854044a2f66623c5d8dd36bc27bd948f2", "patch": "@@ -1,3 +1,11 @@\n+2019-08-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Actuals. Add_Call_By_Copy_Code): Add code\n+\tto generate proper checks when an actual for an in-out or out\n+\tparameter has a non-null access type.  No constraints are\n+\tapplied to an inbound access parameter, but on exit a not-null\n+\tcheck must be performed if the type of the actual requires it.\n+\n 2019-08-12  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_util.adb (Is_Expaned_Priority_Attribute): Check whether"}, {"sha": "8d5a70dbe97c6573c2f65aeb566026dc5b7c2e7c", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e4cc9854044a2f66623c5d8dd36bc27bd948f2/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e4cc9854044a2f66623c5d8dd36bc27bd948f2/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=68e4cc9854044a2f66623c5d8dd36bc27bd948f2", "patch": "@@ -1406,6 +1406,16 @@ package body Exp_Ch6 is\n                Init := New_Occurrence_Of (Var, Loc);\n             end if;\n \n+         --  Access types are passed in without checks, but if a copy-back is\n+         --  required for a null-excluding check on an in-out or out parameter,\n+         --  then the initial value is that of the actual.\n+\n+         elsif Is_Access_Type (E_Formal)\n+           and then Can_Never_Be_Null (Etype (Actual))\n+           and then not Can_Never_Be_Null (E_Formal)\n+         then\n+            Init := New_Occurrence_Of (Var, Loc);\n+\n          else\n             Init := Empty;\n          end if;\n@@ -1544,6 +1554,19 @@ package body Exp_Ch6 is\n                         Type_Access_Level (E_Formal))));\n \n                else\n+                  if Is_Access_Type (E_Formal)\n+                    and then Can_Never_Be_Null (Etype (Actual))\n+                    and then not Can_Never_Be_Null (E_Formal)\n+                  then\n+                     Append_To (Post_Call,\n+                       Make_Raise_Constraint_Error (Loc,\n+                         Condition =>\n+                           Make_Op_Eq (Loc,\n+                             Left_Opnd  => New_Occurrence_Of (Temp, Loc),\n+                             Right_Opnd => Make_Null (Loc)),\n+                         Reason => CE_Access_Check_Failed));\n+                  end if;\n+\n                   Append_To (Post_Call,\n                     Make_Assignment_Statement (Loc,\n                       Name       => Lhs,\n@@ -1942,7 +1965,8 @@ package body Exp_Ch6 is\n             Apply_Constraint_Check (Actual, E_Formal);\n \n          --  Out parameter case. No constraint checks on access type\n-         --  RM 6.4.1 (13)\n+         --  RM 6.4.1 (13), but on return a null-excluding check may be\n+         --  required (see below).\n \n          elsif Is_Access_Type (E_Formal) then\n             null;\n@@ -2049,11 +2073,14 @@ package body Exp_Ch6 is\n             --  formal subtype are not the same, requiring a check.\n \n             --  It is necessary to exclude tagged types because of \"downward\n-            --  conversion\" errors.\n+            --  conversion\" errors, but null-excluding checks on return may be\n+            --  required.\n \n             elsif Is_Access_Type (E_Formal)\n-              and then not Same_Type (E_Formal, E_Actual)\n               and then not Is_Tagged_Type (Designated_Type (E_Formal))\n+              and then (not Same_Type (E_Formal, E_Actual)\n+                or else (Can_Never_Be_Null (E_Actual)\n+                          and then not Can_Never_Be_Null (E_Formal)))\n             then\n                Add_Call_By_Copy_Code;\n "}, {"sha": "d5267a84cfaf1ccc8496e3ffa9bdb567172b95f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e4cc9854044a2f66623c5d8dd36bc27bd948f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e4cc9854044a2f66623c5d8dd36bc27bd948f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=68e4cc9854044a2f66623c5d8dd36bc27bd948f2", "patch": "@@ -1,3 +1,7 @@\n+2019-08-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/null_check.adb: New testcase.\n+\n 2019-08-12  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/renaming15.adb: New testcase."}, {"sha": "c335c067161f3b63b5c79ffab8a3859405290bd8", "filename": "gcc/testsuite/gnat.dg/null_check.adb", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e4cc9854044a2f66623c5d8dd36bc27bd948f2/gcc%2Ftestsuite%2Fgnat.dg%2Fnull_check.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e4cc9854044a2f66623c5d8dd36bc27bd948f2/gcc%2Ftestsuite%2Fgnat.dg%2Fnull_check.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fnull_check.adb?ref=68e4cc9854044a2f66623c5d8dd36bc27bd948f2", "patch": "@@ -0,0 +1,19 @@\n+--  { dg-do run }\n+\n+procedure Null_Check with SPARK_Mode is\n+   type Int_Ptr is access Integer;\n+   subtype Not_Null_Int_Ptr is not null Int_Ptr;\n+\n+   procedure Set_To_Null (X : out Int_Ptr) with Global => null is\n+   begin\n+      X := null;\n+   end Set_To_Null;\n+\n+   X : Not_Null_Int_Ptr := new Integer'(12);\n+begin\n+   Set_To_Null (X);\n+   raise Program_Error;\n+exception\n+   when Constraint_Error =>\n+      null;\n+end Null_Check;"}]}