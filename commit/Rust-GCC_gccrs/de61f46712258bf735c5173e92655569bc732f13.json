{"sha": "de61f46712258bf735c5173e92655569bc732f13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU2MWY0NjcxMjI1OGJmNzM1YzUxNzNlOTI2NTU1NjliYzczMmYxMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-05-10T16:00:40Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-05-10T16:00:40Z"}, "message": "Makefile.in (cgraphbuild.o): Add dependency on except.h.\n\n\n\t* Makefile.in (cgraphbuild.o): Add dependency on except.h.\n\t* cgraphbuild.c: Include except.h\n\t(record_type_list, record_eh_tables): New function.\n\t(build_cgraph_edges, rebuild_cgraph_edges): Use it.\n\nFrom-SVN: r159229", "tree": {"sha": "f7e49649a6ef304a1c8069f6323f65c3834d89ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7e49649a6ef304a1c8069f6323f65c3834d89ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de61f46712258bf735c5173e92655569bc732f13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de61f46712258bf735c5173e92655569bc732f13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de61f46712258bf735c5173e92655569bc732f13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de61f46712258bf735c5173e92655569bc732f13/comments", "author": null, "committer": null, "parents": [{"sha": "e4fa83d33b14ba533cebf4590b9cccaf71013a6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4fa83d33b14ba533cebf4590b9cccaf71013a6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4fa83d33b14ba533cebf4590b9cccaf71013a6b"}], "stats": {"total": 92, "additions": 91, "deletions": 1}, "files": [{"sha": "5e7c6de39fbb424069840f5d488946c193c7793f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de61f46712258bf735c5173e92655569bc732f13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de61f46712258bf735c5173e92655569bc732f13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de61f46712258bf735c5173e92655569bc732f13", "patch": "@@ -1,3 +1,10 @@\n+2010-05-10  Jan Hubicka  <jh@suse.cz>\n+\n+\t* Makefile.in (cgraphbuild.o): Add dependency on except.h.\n+\t* cgraphbuild.c: Include except.h\n+\t(record_type_list, record_eh_tables): New function.\n+\t(build_cgraph_edges, rebuild_cgraph_edges): Use it.\n+\n 2010-05-10  Jan Hubicka  <jh@suse.cz>\n \n \t* crtstuff.c (force_to_data, __do_global_dtors_aux_fini_array_entry,"}, {"sha": "d919261f59a957902ecaf07a1c00887685365f25", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de61f46712258bf735c5173e92655569bc732f13/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de61f46712258bf735c5173e92655569bc732f13/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=de61f46712258bf735c5173e92655569bc732f13", "patch": "@@ -2892,7 +2892,7 @@ cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    gt-cgraphunit.h tree-iterator.h $(COVERAGE_H) $(TREE_DUMP_H)\n cgraphbuild.o : cgraphbuild.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(CGRAPH_H) intl.h pointer-set.h $(GIMPLE_H) \\\n-   $(TREE_FLOW_H) $(TREE_PASS_H) $(IPA_UTILS_H)\n+   $(TREE_FLOW_H) $(TREE_PASS_H) $(IPA_UTILS_H) $(EXCEPT_H)\n varpool.o : varpool.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(CGRAPH_H) langhooks.h $(DIAGNOSTIC_H) $(HASHTAB_H) \\\n    $(GGC_H) $(TIMEVAR_H) debug.h $(TARGET_H) output.h $(GIMPLE_H) \\"}, {"sha": "246be20df2ef283f0f9530836b580f37727a57e7", "filename": "gcc/cgraphbuild.c", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de61f46712258bf735c5173e92655569bc732f13/gcc%2Fcgraphbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de61f46712258bf735c5173e92655569bc732f13/gcc%2Fcgraphbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphbuild.c?ref=de61f46712258bf735c5173e92655569bc732f13", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"tree-pass.h\"\n #include \"ipa-utils.h\"\n+#include \"except.h\"\n \n /* Context of record_reference.  */\n struct record_reference_ctx\n@@ -105,6 +106,86 @@ record_reference (tree *tp, int *walk_subtrees, void *data)\n   return NULL_TREE;\n }\n \n+/* Record references to typeinfos in the type list LIST.  */\n+\n+static void\n+record_type_list (struct cgraph_node *node, tree list)\n+{\n+  for (; list; list = TREE_CHAIN (list))\n+    {\n+      tree type = TREE_VALUE (list);\n+      \n+      if (TYPE_P (type))\n+\ttype = lookup_type_for_runtime (type);\n+      STRIP_NOPS (type);\n+      if (TREE_CODE (type) == ADDR_EXPR)\n+\t{\n+\t  type = TREE_OPERAND (type, 0);\n+\t  if (TREE_CODE (type) == VAR_DECL)\n+\t    {\n+\t      struct varpool_node *vnode = varpool_node (type);\n+\t      varpool_mark_needed_node (vnode);\n+\t      ipa_record_reference (node, NULL,\n+\t\t\t\t    NULL, vnode,\n+\t\t\t\t    IPA_REF_ADDR, NULL);\n+\t    }\n+\t}\n+    }\n+}\n+\n+/* Record all references we will introduce by producing EH tables\n+   for NODE.  */\n+\n+static void\n+record_eh_tables (struct cgraph_node *node, struct function *fun)\n+{\n+  eh_region i;\n+\n+  i = fun->eh->region_tree;\n+  if (!i)\n+    return;\n+\n+  while (1)\n+    {\n+      switch (i->type)\n+\t{\n+\tcase ERT_CLEANUP:\n+\tcase ERT_MUST_NOT_THROW:\n+\t  break;\n+\n+\tcase ERT_TRY:\n+\t  {\n+\t    eh_catch c;\n+\t    for (c = i->u.eh_try.first_catch; c; c = c->next_catch)\n+\t      record_type_list (node, c->type_list);\n+\t  }\n+\t  break;\n+\n+\tcase ERT_ALLOWED_EXCEPTIONS:\n+\t  record_type_list (node, i->u.allowed.type_list);\n+\t  break;\n+\t}\n+      /* If there are sub-regions, process them.  */\n+      if (i->inner)\n+\ti = i->inner;\n+      /* If there are peers, process them.  */\n+      else if (i->next_peer)\n+\ti = i->next_peer;\n+      /* Otherwise, step back up the tree to the next peer.  */\n+      else\n+\t{\n+\t  do\n+\t    {\n+\t      i = i->outer;\n+\t      if (i == NULL)\n+\t\treturn;\n+\t    }\n+\t  while (i->next_peer == NULL);\n+\t  i = i->next_peer;\n+\t}\n+    }\n+}\n+\n /* Reset inlining information of all incoming call edges of NODE.  */\n \n void\n@@ -297,6 +378,7 @@ build_cgraph_edges (void)\n \t  && (TREE_STATIC (decl) && !DECL_EXTERNAL (decl)))\n \tvarpool_finalize_decl (decl);\n     }\n+  record_eh_tables (node, cfun);\n \n   pointer_set_destroy (visited_nodes);\n   return 0;\n@@ -375,6 +457,7 @@ rebuild_cgraph_edges (void)\n \twalk_stmt_load_store_addr_ops (gsi_stmt (gsi), node,\n \t\t\t\t       mark_load, mark_store, mark_address);\n     }\n+  record_eh_tables (node, cfun);\n   gcc_assert (!node->global.inlined_to);\n \n   return 0;"}]}