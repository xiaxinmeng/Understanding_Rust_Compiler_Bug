{"sha": "4476e1a0be33ffe20597498e0e2549331ebbb2f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ3NmUxYTBiZTMzZmZlMjA1OTc0OThlMGUyNTQ5MzMxZWJiYjJmOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-07-05T07:52:32Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-07-05T07:52:32Z"}, "message": "gcc/\n\t* target-insns.def (restore_stack_block, restore_stack_function)\n\t(restore_stack_nonlocal, save_stack_block, save_stack_function)\n\t(save_stack_nonlocal): New targetm instruction patterns.\n\t* builtins.c (expand_builtin_apply): Use them instead of\n\tHAVE_*/gen_* interface.\n\t* explow.c (emit_stack_save, emit_stack_restore): Likewise.\n\nFrom-SVN: r225426", "tree": {"sha": "1bd85710447de0b17fabb16103093265b42a2709", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bd85710447de0b17fabb16103093265b42a2709"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4476e1a0be33ffe20597498e0e2549331ebbb2f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4476e1a0be33ffe20597498e0e2549331ebbb2f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4476e1a0be33ffe20597498e0e2549331ebbb2f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4476e1a0be33ffe20597498e0e2549331ebbb2f9/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb6f47fb90994bc9021b42119a51f56aa706fe14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb6f47fb90994bc9021b42119a51f56aa706fe14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb6f47fb90994bc9021b42119a51f56aa706fe14"}], "stats": {"total": 63, "additions": 31, "deletions": 32}, "files": [{"sha": "0185b6a987e5c6f8068f309d5b0095b6fa98d103", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4476e1a0be33ffe20597498e0e2549331ebbb2f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4476e1a0be33ffe20597498e0e2549331ebbb2f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4476e1a0be33ffe20597498e0e2549331ebbb2f9", "patch": "@@ -1,3 +1,12 @@\n+2015-07-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* target-insns.def (restore_stack_block, restore_stack_function)\n+\t(restore_stack_nonlocal, save_stack_block, save_stack_function)\n+\t(save_stack_nonlocal): New targetm instruction patterns.\n+\t* builtins.c (expand_builtin_apply): Use them instead of\n+\tHAVE_*/gen_* interface.\n+\t* explow.c (emit_stack_save, emit_stack_restore): Likewise.\n+\n 2015-07-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* target-insns.def (trap): New targetm instruction pattern."}, {"sha": "3110d0ae30fd613145c2e989d26e348741aa2589", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4476e1a0be33ffe20597498e0e2549331ebbb2f9/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4476e1a0be33ffe20597498e0e2549331ebbb2f9/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=4476e1a0be33ffe20597498e0e2549331ebbb2f9", "patch": "@@ -1611,11 +1611,9 @@ expand_builtin_apply (rtx function, rtx arguments, rtx argsize)\n   NO_DEFER_POP;\n \n   /* Save the stack with nonlocal if available.  */\n-#ifdef HAVE_save_stack_nonlocal\n-  if (HAVE_save_stack_nonlocal)\n+  if (targetm.have_save_stack_nonlocal ())\n     emit_stack_save (SAVE_NONLOCAL, &old_stack_level);\n   else\n-#endif\n     emit_stack_save (SAVE_BLOCK, &old_stack_level);\n \n   /* Allocate a block of memory onto the stack and copy the memory\n@@ -1732,11 +1730,9 @@ expand_builtin_apply (rtx function, rtx arguments, rtx argsize)\n   add_function_usage_to (call_insn, call_fusage);\n \n   /* Restore the stack.  */\n-#ifdef HAVE_save_stack_nonlocal\n-  if (HAVE_save_stack_nonlocal)\n+  if (targetm.have_save_stack_nonlocal ())\n     emit_stack_restore (SAVE_NONLOCAL, old_stack_level);\n   else\n-#endif\n     emit_stack_restore (SAVE_BLOCK, old_stack_level);\n   fixup_args_size_notes (call_insn, get_last_insn (), 0);\n "}, {"sha": "c64a3ee95d0f52a6a961158def7352ecb18b5333", "filename": "gcc/explow.c", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4476e1a0be33ffe20597498e0e2549331ebbb2f9/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4476e1a0be33ffe20597498e0e2549331ebbb2f9/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=4476e1a0be33ffe20597498e0e2549331ebbb2f9", "patch": "@@ -973,30 +973,24 @@ emit_stack_save (enum save_level save_level, rtx *psave)\n {\n   rtx sa = *psave;\n   /* The default is that we use a move insn and save in a Pmode object.  */\n-  rtx (*fcn) (rtx, rtx) = gen_move_insn_uncast;\n+  rtx_insn *(*fcn) (rtx, rtx) = gen_move_insn;\n   machine_mode mode = STACK_SAVEAREA_MODE (save_level);\n \n   /* See if this machine has anything special to do for this kind of save.  */\n   switch (save_level)\n     {\n-#ifdef HAVE_save_stack_block\n     case SAVE_BLOCK:\n-      if (HAVE_save_stack_block)\n-\tfcn = gen_save_stack_block;\n+      if (targetm.have_save_stack_block ())\n+\tfcn = targetm.gen_save_stack_block;\n       break;\n-#endif\n-#ifdef HAVE_save_stack_function\n     case SAVE_FUNCTION:\n-      if (HAVE_save_stack_function)\n-\tfcn = gen_save_stack_function;\n+      if (targetm.have_save_stack_function ())\n+\tfcn = targetm.gen_save_stack_function;\n       break;\n-#endif\n-#ifdef HAVE_save_stack_nonlocal\n     case SAVE_NONLOCAL:\n-      if (HAVE_save_stack_nonlocal)\n-\tfcn = gen_save_stack_nonlocal;\n+      if (targetm.have_save_stack_nonlocal ())\n+\tfcn = targetm.gen_save_stack_nonlocal;\n       break;\n-#endif\n     default:\n       break;\n     }\n@@ -1028,7 +1022,7 @@ void\n emit_stack_restore (enum save_level save_level, rtx sa)\n {\n   /* The default is that we use a move insn.  */\n-  rtx (*fcn) (rtx, rtx) = gen_move_insn_uncast;\n+  rtx_insn *(*fcn) (rtx, rtx) = gen_move_insn;\n \n   /* If stack_realign_drap, the x86 backend emits a prologue that aligns both\n      STACK_POINTER and HARD_FRAME_POINTER.\n@@ -1047,24 +1041,18 @@ emit_stack_restore (enum save_level save_level, rtx sa)\n   /* See if this machine has anything special to do for this kind of save.  */\n   switch (save_level)\n     {\n-#ifdef HAVE_restore_stack_block\n     case SAVE_BLOCK:\n-      if (HAVE_restore_stack_block)\n-\tfcn = gen_restore_stack_block;\n+      if (targetm.have_restore_stack_block ())\n+\tfcn = targetm.gen_restore_stack_block;\n       break;\n-#endif\n-#ifdef HAVE_restore_stack_function\n     case SAVE_FUNCTION:\n-      if (HAVE_restore_stack_function)\n-\tfcn = gen_restore_stack_function;\n+      if (targetm.have_restore_stack_function ())\n+\tfcn = targetm.gen_restore_stack_function;\n       break;\n-#endif\n-#ifdef HAVE_restore_stack_nonlocal\n     case SAVE_NONLOCAL:\n-      if (HAVE_restore_stack_nonlocal)\n-\tfcn = gen_restore_stack_nonlocal;\n+      if (targetm.have_restore_stack_nonlocal ())\n+\tfcn = targetm.gen_restore_stack_nonlocal;\n       break;\n-#endif\n     default:\n       break;\n     }"}, {"sha": "12994d36ed40826316441b8cbeca0cf64d1b1cff", "filename": "gcc/target-insns.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4476e1a0be33ffe20597498e0e2549331ebbb2f9/gcc%2Ftarget-insns.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4476e1a0be33ffe20597498e0e2549331ebbb2f9/gcc%2Ftarget-insns.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-insns.def?ref=4476e1a0be33ffe20597498e0e2549331ebbb2f9", "patch": "@@ -46,7 +46,13 @@ DEF_TARGET_INSN (nonlocal_goto, (rtx x0, rtx x1, rtx x2, rtx x3))\n DEF_TARGET_INSN (nonlocal_goto_receiver, (void))\n DEF_TARGET_INSN (prefetch, (rtx x0, rtx x1, rtx x2))\n DEF_TARGET_INSN (prologue, (void))\n+DEF_TARGET_INSN (restore_stack_block, (rtx x0, rtx x1))\n+DEF_TARGET_INSN (restore_stack_function, (rtx x0, rtx x1))\n+DEF_TARGET_INSN (restore_stack_nonlocal, (rtx x0, rtx x1))\n DEF_TARGET_INSN (return, (void))\n+DEF_TARGET_INSN (save_stack_block, (rtx x0, rtx x1))\n+DEF_TARGET_INSN (save_stack_function, (rtx x0, rtx x1))\n+DEF_TARGET_INSN (save_stack_nonlocal, (rtx x0, rtx x1))\n DEF_TARGET_INSN (sibcall_epilogue, (void))\n DEF_TARGET_INSN (simple_return, (void))\n DEF_TARGET_INSN (store_multiple, (rtx x0, rtx x1, rtx x2))"}]}