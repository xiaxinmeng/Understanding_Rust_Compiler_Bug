{"sha": "793f847ba7dbe7638f1c27178868edbefd3a8108", "node_id": "C_kwDOANBUbNoAKDc5M2Y4NDdiYTdkYmU3NjM4ZjFjMjcxNzg4NjhlZGJlZmQzYTgxMDg", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-24T14:15:12Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-24T14:15:12Z"}, "message": "PR tree-optimization/105668: Provide vcond_mask_v1tiv1ti pattern.\n\nThis patch is an alternate/supplementary fix to PR tree-optimization/105668\nthat provides a vcond_mask_v1titi optab/define_expand to the i386 backend.\nAn undocumented feature/bug of GCC's vectorization is that any target that\nprovides a vec_cmpeq<mode><mode> has to also provide a matching\nvcond_mask<mode><mode>.  This backend patch preserves the status quo,\nrather than fixes the underlying problem.\n\nOne aspect of this clean-up is that ix86_expand_sse_movcc provides\nfallback implementations using pand/pandn/por that effectively make\nV2DImode and V1TImode vcond_mask available on any TARGET_SSE2, not\njust TARGET_SSE4_2.  This allows a simplification as V2DI mode can\nbe handled by using a VI_128 mode iterator instead of a VI124_128\nmode iterator, and instead this define_expand is effectively renamed\nto provide a V1TImode vcond_mask expander (as V1TI isn't in VI_128).\n\n2022-05-24  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR tree-optimization/105668\n\t* config/i386/i386-expand.cc (ix86_expand_sse_movcc): Support\n\tV1TImode, just like V2DImode.\n\t* config/i386/sse.md (vcond_mask_<mode><sseintvecmodelower>):\n\tUse VI_128 mode iterator instead of VI124_128 to include V2DI.\n\t(vcond_mask_v2div2di): Delete.\n\t(vcond_mask_v1tiv1ti): New define_expand.\n\ngcc/testsuite/ChangeLog\n\tPR tree-optimization/105668\n\t* gcc.target/i386/pr105668.c: New test case.", "tree": {"sha": "9b59d1ee0fea0edd8dc22d6d1da6801af08960fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b59d1ee0fea0edd8dc22d6d1da6801af08960fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/793f847ba7dbe7638f1c27178868edbefd3a8108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793f847ba7dbe7638f1c27178868edbefd3a8108", "html_url": "https://github.com/Rust-GCC/gccrs/commit/793f847ba7dbe7638f1c27178868edbefd3a8108", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793f847ba7dbe7638f1c27178868edbefd3a8108/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e7a0e42a15eb53850496e91f2e484ed74ac3617", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e7a0e42a15eb53850496e91f2e484ed74ac3617", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e7a0e42a15eb53850496e91f2e484ed74ac3617"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "e3bd661470b0a536c931a544c573182df2adc215", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793f847ba7dbe7638f1c27178868edbefd3a8108/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793f847ba7dbe7638f1c27178868edbefd3a8108/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=793f847ba7dbe7638f1c27178868edbefd3a8108", "patch": "@@ -4026,6 +4026,7 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n     case E_V8HFmode:\n     case E_V4SImode:\n     case E_V2DImode:\n+    case E_V1TImode:\n       if (TARGET_SSE4_1)\n \t{\n \t  gen = gen_sse4_1_pblendvb;"}, {"sha": "f261ff60d1cfbaa7d28d882ae57783cd351e2ca0", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793f847ba7dbe7638f1c27178868edbefd3a8108/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793f847ba7dbe7638f1c27178868edbefd3a8108/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=793f847ba7dbe7638f1c27178868edbefd3a8108", "patch": "@@ -4579,10 +4579,10 @@\n })\n \n (define_expand \"vcond_mask_<mode><sseintvecmodelower>\"\n-  [(set (match_operand:VI124_128 0 \"register_operand\")\n-\t(vec_merge:VI124_128\n-\t  (match_operand:VI124_128 1 \"vector_operand\")\n-\t  (match_operand:VI124_128 2 \"nonimm_or_0_operand\")\n+  [(set (match_operand:VI_128 0 \"register_operand\")\n+\t(vec_merge:VI_128\n+\t  (match_operand:VI_128 1 \"vector_operand\")\n+\t  (match_operand:VI_128 2 \"nonimm_or_0_operand\")\n \t  (match_operand:<sseintvecmode> 3 \"register_operand\")))]\n   \"TARGET_SSE2\"\n {\n@@ -4591,13 +4591,13 @@\n   DONE;\n })\n \n-(define_expand \"vcond_mask_v2div2di\"\n-  [(set (match_operand:V2DI 0 \"register_operand\")\n-\t(vec_merge:V2DI\n-\t  (match_operand:V2DI 1 \"vector_operand\")\n-\t  (match_operand:V2DI 2 \"nonimm_or_0_operand\")\n-\t  (match_operand:V2DI 3 \"register_operand\")))]\n-  \"TARGET_SSE4_2\"\n+(define_expand \"vcond_mask_v1tiv1ti\"\n+  [(set (match_operand:V1TI 0 \"register_operand\")\n+\t(vec_merge:V1TI\n+\t  (match_operand:V1TI 1 \"vector_operand\")\n+\t  (match_operand:V1TI 2 \"nonimm_or_0_operand\")\n+\t  (match_operand:V1TI 3 \"register_operand\")))]\n+  \"TARGET_SSE2\"\n {\n   ix86_expand_sse_movcc (operands[0], operands[3],\n \t\t\t operands[1], operands[2]);"}, {"sha": "359c2b677a3b4c2b172d3451aad64d7c3d47f11a", "filename": "gcc/testsuite/gcc.target/i386/pr105668.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793f847ba7dbe7638f1c27178868edbefd3a8108/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105668.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793f847ba7dbe7638f1c27178868edbefd3a8108/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105668.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105668.c?ref=793f847ba7dbe7638f1c27178868edbefd3a8108", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O -ftracer -fno-tree-fre\" } */\n+\n+typedef __int128 __attribute__((__vector_size__ (16))) V;\n+\n+int i;\n+\n+V\n+foo (_Complex float f)\n+{\n+  (void) __builtin_atanhf (i);\n+  V v = i != (V) { };\n+  i ^= f && 8;\n+  v %= 5;\n+  return v;\n+}"}]}