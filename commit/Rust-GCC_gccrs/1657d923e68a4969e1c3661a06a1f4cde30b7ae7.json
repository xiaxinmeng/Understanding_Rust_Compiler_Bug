{"sha": "1657d923e68a4969e1c3661a06a1f4cde30b7ae7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY1N2Q5MjNlNjhhNDk2OWUxYzM2NjFhMDZhMWY0Y2RlMzBiN2FlNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-05-30T17:18:25Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-05-30T17:18:25Z"}, "message": "re PR target/80833 (32-bit x86 causes store-forwarding stalls for int64_t -> xmm)\n\n\tPR target/80833\n\t* config/i386/constraints.md (Yd): New constraint.\n\t(Ye): Ditto.\n\t* config/i386/i386.md (*movti_internal): Add (?r, Ye)\n\tand (?Yd, r) alternatives.  Update insn attributes.\n\t* config/i386/i386.md (*movti_internal): Add (?r, *Ye)\n\tand (?*Yd, r) alternatives.  Update insn attributes.\n\t(double-mode inter-unit splitters): Add new GR<->XMM splitters.\n\ntestsuite/ChangeLog:\n\n\tPR target/80833\n\t* gcc.target/i386/pr80833-1.c: New test.\n\t* gcc.target/i386/pr80833-2.c: Ditto.\n\nFrom-SVN: r248691", "tree": {"sha": "f12efd36a58a9af8380bfbc533ceb787e1f9949d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f12efd36a58a9af8380bfbc533ceb787e1f9949d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1657d923e68a4969e1c3661a06a1f4cde30b7ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1657d923e68a4969e1c3661a06a1f4cde30b7ae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1657d923e68a4969e1c3661a06a1f4cde30b7ae7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1657d923e68a4969e1c3661a06a1f4cde30b7ae7/comments", "author": null, "committer": null, "parents": [{"sha": "0a37d40c9ceee7b502a06214037346884debf4e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a37d40c9ceee7b502a06214037346884debf4e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a37d40c9ceee7b502a06214037346884debf4e6"}], "stats": {"total": 141, "additions": 126, "deletions": 15}, "files": [{"sha": "f94e274358b92725703839e39c771620274a5b6c", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1657d923e68a4969e1c3661a06a1f4cde30b7ae7/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1657d923e68a4969e1c3661a06a1f4cde30b7ae7/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=1657d923e68a4969e1c3661a06a1f4cde30b7ae7", "patch": "@@ -102,18 +102,24 @@\n ;;  c\tSSE inter-unit conversions enabled\n ;;  i\tSSE2 inter-unit moves to SSE register enabled\n ;;  j\tSSE2 inter-unit moves from SSE register enabled\n+;;  d\tany EVEX encodable SSE register for AVX512BW target or any SSE register\n+;;\tfor SSE4_1 target, when inter-unit moves to SSE register are enabled\n+;;  e\tany EVEX encodable SSE register for AVX512BW target or any SSE register\n+;;\tfor SSE4_1 target, when inter-unit moves from SSE register are enabled\n ;;  m\tMMX inter-unit moves to MMX register enabled\n ;;  n\tMMX inter-unit moves from MMX register enabled\n+;;  p\tInteger register when TARGET_PARTIAL_REG_STALL is disabled\n ;;  a\tInteger register when zero extensions with AND are disabled\n ;;  b\tAny register that can be used as the GOT base when calling\n ;;\t___tls_get_addr: that is, any general register except EAX\n ;;\tand ESP, for -fno-plt if linker supports it.  Otherwise,\n ;;\tEBX.\n-;;  p\tInteger register when TARGET_PARTIAL_REG_STALL is disabled\n ;;  f\tx87 register when 80387 floating point arithmetic is enabled\n ;;  r\tSSE regs not requiring REX prefix when prefixes avoidance is enabled\n ;;\tand all SSE regs otherwise\n-;;  h   EVEX encodable SSE register with number factor of four\n+;;  v\tany EVEX encodable SSE register for AVX512VL target,\n+;;\totherwise any SSE register\n+;;  h\tEVEX encodable SSE register with number factor of four\n \n (define_register_constraint \"Yz\" \"TARGET_SSE ? SSE_FIRST_REG : NO_REGS\"\n  \"First SSE register (@code{%xmm0}).\")\n@@ -130,6 +136,22 @@\n  \"TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_FROM_VEC ? ALL_SSE_REGS : NO_REGS\"\n  \"@internal Any SSE register, when SSE2 and inter-unit moves from vector registers are enabled.\")\n \n+(define_register_constraint \"Yd\"\n+ \"TARGET_INTER_UNIT_MOVES_TO_VEC\n+  ? (TARGET_AVX512BW\n+     ? ALL_SSE_REGS\n+     : (TARGET_SSE4_1 ? SSE_REGS : NO_REGS))\n+  : NO_REGS\"\n+ \"@internal Any EVEX encodable SSE register (@code{%xmm0-%xmm31}) for AVX512BW target or any SSE register for SSE4_1 target, when inter-unit moves to vector registers are enabled.\")\n+\n+(define_register_constraint \"Ye\"\n+ \"TARGET_INTER_UNIT_MOVES_FROM_VEC\n+  ? (TARGET_AVX512BW\n+     ? ALL_SSE_REGS\n+     : (TARGET_SSE4_1 ? SSE_REGS : NO_REGS))\n+  : NO_REGS\"\n+ \"@internal Any EVEX encodable SSE register (@code{%xmm0-%xmm31}) for AVX512BW target or any SSE register for SSE4_1 target, when inter-unit moves from vector registers are enabled.\")\n+\n (define_register_constraint \"Ym\"\n  \"TARGET_MMX && TARGET_INTER_UNIT_MOVES_TO_VEC ? MMX_REGS : NO_REGS\"\n  \"@internal Any MMX register, when inter-unit moves to vector registers are enabled.\")"}, {"sha": "d6f7e639cb116b70ce4224b97e05b5792fbe3338", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 78, "deletions": 13, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1657d923e68a4969e1c3661a06a1f4cde30b7ae7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1657d923e68a4969e1c3661a06a1f4cde30b7ae7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1657d923e68a4969e1c3661a06a1f4cde30b7ae7", "patch": "@@ -2074,8 +2074,8 @@\n \t      (const_string \"OI\")))])\n \n (define_insn \"*movti_internal\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=!r ,o ,v,v ,v ,m\")\n-\t(match_operand:TI 1 \"general_operand\"\t   \"riFo,re,C,BC,vm,v\"))]\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=!r ,o ,v,v ,v ,m,?r,?Yd\")\n+\t(match_operand:TI 1 \"general_operand\"\t   \"riFo,re,C,BC,vm,v,Ye,r\"))]\n   \"(TARGET_64BIT\n     && !(MEM_P (operands[0]) && MEM_P (operands[1])))\n    || (TARGET_SSE\n@@ -2118,8 +2118,20 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"isa\" \"x64,x64,*,sse2,*,*\")\n-   (set_attr \"type\" \"multi,multi,sselog1,sselog1,ssemov,ssemov\")\n+  [(set (attr \"isa\")\n+     (cond [(eq_attr \"alternative\" \"0,1,6,7\")\n+\t      (const_string \"x64\")\n+\t    (eq_attr \"alternative\" \"3\")\n+\t      (const_string \"sse2\")\n+\t   ]\n+\t   (const_string \"*\")))\n+   (set (attr \"type\")\n+     (cond [(eq_attr \"alternative\" \"0,1,6,7\")\n+\t      (const_string \"multi\")\n+\t    (eq_attr \"alternative\" \"2,3\")\n+\t      (const_string \"sselog1\")\n+\t   ]\n+\t   (const_string \"ssemov\")))\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"type\" \"sselog1,ssemov\")\n        (const_string \"maybe_vex\")\n@@ -2145,11 +2157,29 @@\n \t       ]\n \t       (const_string \"TI\")))])\n \n+(define_split\n+  [(set (match_operand:TI 0 \"sse_reg_operand\")\n+        (match_operand:TI 1 \"general_reg_operand\"))]\n+  \"TARGET_64BIT && TARGET_SSE4_1 && TARGET_INTER_UNIT_MOVES_TO_VEC\n+   && reload_completed\"\n+  [(set (match_dup 2)\n+  \t(vec_merge:V2DI\n+\t  (vec_duplicate:V2DI (match_dup 3))\n+\t  (match_dup 2)\n+\t  (const_int 2)))]\n+{\n+  operands[2] = lowpart_subreg (V2DImode, operands[0], TImode);\n+  operands[3] = gen_highpart (DImode, operands[1]);\n+\n+  emit_move_insn (gen_lowpart (DImode, operands[0]),\n+  \t\t  gen_lowpart (DImode, operands[1]));\n+})\n+\n (define_insn \"*movdi_internal\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-    \"=r  ,o  ,r,r  ,r,m ,*y,*y,?*y,?m,?r ,?*Ym,*v,*v,*v,m ,m,?r ,?*Yi,?*Ym,?*Yi,*k,*k ,*r,*m\")\n+    \"=r  ,o  ,r,r  ,r,m ,*y,*y,?*y,?m,?r ,?*Ym,*v,*v,*v,m ,m,?r ,?*Yd,?r ,?*Yi,?*Ym,?*Yi,*k,*k ,*r,*m\")\n \t(match_operand:DI 1 \"general_operand\"\n-    \"riFo,riF,Z,rem,i,re,C ,*y,m  ,*y,*Yn,r   ,C ,*v,m ,*v,v,*Yj,r   ,*Yj ,*Yn ,*r,*km,*k,*k\"))]\n+    \"riFo,riF,Z,rem,i,re,C ,*y,m  ,*y,*Yn,r   ,C ,*v,m ,*v,v,*Ye,r   ,*Yj,r   ,*Yj ,*Yn ,*r,*km,*k,*k\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -2222,26 +2252,26 @@\n     }\n }\n   [(set (attr \"isa\")\n-     (cond [(eq_attr \"alternative\" \"0,1\")\n+     (cond [(eq_attr \"alternative\" \"0,1,17,18\")\n \t      (const_string \"nox64\")\n-\t    (eq_attr \"alternative\" \"2,3,4,5,10,11,17,18,21,23\")\n+\t    (eq_attr \"alternative\" \"2,3,4,5,10,11,19,20,23,25\")\n \t      (const_string \"x64\")\n \t   ]\n \t   (const_string \"*\")))\n    (set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"0,1\")\n+     (cond [(eq_attr \"alternative\" \"0,1,17,18\")\n \t      (const_string \"multi\")\n \t    (eq_attr \"alternative\" \"6\")\n \t      (const_string \"mmx\")\n \t    (eq_attr \"alternative\" \"7,8,9,10,11\")\n \t      (const_string \"mmxmov\")\n \t    (eq_attr \"alternative\" \"12\")\n \t      (const_string \"sselog1\")\n-\t    (eq_attr \"alternative\" \"13,14,15,16,17,18\")\n+\t    (eq_attr \"alternative\" \"13,14,15,16,19,20\")\n \t      (const_string \"ssemov\")\n-\t    (eq_attr \"alternative\" \"19,20\")\n+\t    (eq_attr \"alternative\" \"21,22\")\n \t      (const_string \"ssecvt\")\n-\t    (eq_attr \"alternative\" \"21,22,23,24\")\n+\t    (eq_attr \"alternative\" \"23,24,25,26\")\n \t      (const_string \"mskmov\")\n \t    (and (match_operand 0 \"register_operand\")\n \t\t (match_operand 1 \"pic_32bit_operand\"))\n@@ -2260,7 +2290,7 @@\n        (const_string \"*\")))\n    (set (attr \"prefix_rex\")\n      (if_then_else\n-       (eq_attr \"alternative\" \"10,11,17,18\")\n+       (eq_attr \"alternative\" \"10,11,19,20\")\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set (attr \"prefix\")\n@@ -2307,13 +2337,48 @@\n \t   ]\n \t   (const_string \"*\")))])\n \n+(define_split\n+  [(set (match_operand:<DWI> 0 \"general_reg_operand\")\n+        (match_operand:<DWI> 1 \"sse_reg_operand\"))]\n+  \"TARGET_SSE4_1 && TARGET_INTER_UNIT_MOVES_FROM_VEC\n+   && reload_completed\"\n+  [(set (match_dup 2)\n+  \t(vec_select:DWIH\n+\t  (match_dup 3)\n+\t  (parallel [(const_int 1)])))]\n+{\n+  operands[2] = gen_highpart (<MODE>mode, operands[0]);\n+  operands[3] = lowpart_subreg (<ssevecmode>mode, operands[1], <DWI>mode);\n+\n+  emit_move_insn (gen_lowpart (<MODE>mode, operands[0]),\n+  \t\t  gen_lowpart (<MODE>mode, operands[1]));\n+})\n+\n (define_split\n   [(set (match_operand:DWI 0 \"nonimmediate_gr_operand\")\n         (match_operand:DWI 1 \"general_gr_operand\"))]\n   \"reload_completed\"\n   [(const_int 0)]\n   \"ix86_split_long_move (operands); DONE;\")\n \n+(define_split\n+  [(set (match_operand:DI 0 \"sse_reg_operand\")\n+        (match_operand:DI 1 \"general_reg_operand\"))]\n+  \"!TARGET_64BIT && TARGET_SSE4_1 && TARGET_INTER_UNIT_MOVES_TO_VEC\n+   && reload_completed\"\n+  [(set (match_dup 2)\n+  \t(vec_merge:V4SI\n+\t  (vec_duplicate:V4SI (match_dup 3))\n+\t  (match_dup 2)\n+\t  (const_int 2)))]\n+{\n+  operands[2] = lowpart_subreg (V4SImode, operands[0], DImode);\n+  operands[3] = gen_highpart (SImode, operands[1]);\n+\n+  emit_move_insn (gen_lowpart (SImode, operands[0]),\n+  \t\t  gen_lowpart (SImode, operands[1]));\n+})\n+\n (define_insn \"*movsi_internal\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n     \"=r,m ,*y,*y,?*y,?m,?r ,?*Ym,*v,*v,*v,m ,?r ,?*Yi,*k,*k ,*rm\")"}, {"sha": "3f702fb0a54dc9f17c394ac00a7f9915660b9018", "filename": "gcc/testsuite/gcc.target/i386/pr80833-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1657d923e68a4969e1c3661a06a1f4cde30b7ae7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80833-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1657d923e68a4969e1c3661a06a1f4cde30b7ae7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80833-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80833-1.c?ref=1657d923e68a4969e1c3661a06a1f4cde30b7ae7", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse4.1 -mtune=intel -mregparm=2\" } */\n+/* { dg-require-effective-target ia32 } */\n+\n+long long test (long long a)\n+{\n+  asm (\"\" : \"+x\" (a));\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"pinsrd\" } } */\n+/* { dg-final { scan-assembler \"pextrd\" } } */"}, {"sha": "8136a60f5194d4a0fe6ba93412c1d6514b2e3622", "filename": "gcc/testsuite/gcc.target/i386/pr80833-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1657d923e68a4969e1c3661a06a1f4cde30b7ae7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80833-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1657d923e68a4969e1c3661a06a1f4cde30b7ae7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80833-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80833-2.c?ref=1657d923e68a4969e1c3661a06a1f4cde30b7ae7", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse4.1 -mtune=intel\" } */\n+/* { dg-require-effective-target int128 } */\n+\n+__int128 test (__int128 a)\n+{\n+  asm (\"\" : \"+x\" (a));\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"pinsrq\" } } */\n+/* { dg-final { scan-assembler \"pextrq\" } } */"}]}