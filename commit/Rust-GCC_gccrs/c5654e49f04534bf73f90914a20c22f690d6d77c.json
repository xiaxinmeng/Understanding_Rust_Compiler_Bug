{"sha": "c5654e49f04534bf73f90914a20c22f690d6d77c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU2NTRlNDlmMDQ1MzRiZjczZjkwOTE0YTIwYzIyZjY5MGQ2ZDc3Yw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-09-14T20:37:25Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-09-14T20:37:25Z"}, "message": "base.h (__gnu_parallel::less<Tp>): Add partial specialization for one argument.\n\n2007-09-14  Benjamin Kosnik  <bkoz@redhat.com>\n        \n\t* include/parallel/base.h (__gnu_parallel::less<Tp>): Add partial\n        specialization for one argument. \n\t(__gnu_parallel::less): Add operator.\n\n\t* include/parallel/multiway_merge.h: Use __builtin_alloca. \n\t* include/parallel/partial_sum.h: Same.\n\t* include/parallel/find.h: Same.\n\nFrom-SVN: r128505", "tree": {"sha": "26f05138b61e05ef2389f8db9262bc89b05296ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26f05138b61e05ef2389f8db9262bc89b05296ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5654e49f04534bf73f90914a20c22f690d6d77c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5654e49f04534bf73f90914a20c22f690d6d77c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5654e49f04534bf73f90914a20c22f690d6d77c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5654e49f04534bf73f90914a20c22f690d6d77c/comments", "author": null, "committer": null, "parents": [{"sha": "3f225aabc78b0a112ba168254c7c498c5fcda25b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f225aabc78b0a112ba168254c7c498c5fcda25b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f225aabc78b0a112ba168254c7c498c5fcda25b"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "575055ea692d38a454e5d3de7eb14650a5dbf19e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5654e49f04534bf73f90914a20c22f690d6d77c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5654e49f04534bf73f90914a20c22f690d6d77c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c5654e49f04534bf73f90914a20c22f690d6d77c", "patch": "@@ -1,4 +1,14 @@\n-2007-09-10  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+2007-09-14  Benjamin Kosnik  <bkoz@redhat.com>\n+        \n+\t* include/parallel/base.h (__gnu_parallel::less<Tp>): Add partial\n+        specialization for one argument. \n+\t(__gnu_parallel::less): Add operator.\n+\n+\t* include/parallel/multiway_merge.h: Use __builtin_alloca. \n+\t* include/parallel/partial_sum.h: Same.\n+\t* include/parallel/find.h: Same.\t\n+\t\n+2007-09-14  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/tr1_impl/boost_shared_ptr.h: (__weak_ptr::lock()): Add\n \tmissing template argument."}, {"sha": "3074188e2324f0bae249eae9c4ca8bad891519c2", "filename": "libstdc++-v3/include/parallel/base.h", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5654e49f04534bf73f90914a20c22f690d6d77c/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5654e49f04534bf73f90914a20c22f690d6d77c/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h?ref=c5654e49f04534bf73f90914a20c22f690d6d77c", "patch": "@@ -163,7 +163,10 @@ namespace __gnu_parallel\n       { return op(value, __x); }\n     };\n \n-  /** @brief Similar to std::binder2nd, but giving the argument types explicitly. */\n+  /** \n+   *  @brief Similar to std::binder2nd, but giving the argument types\n+   *  explicitly. \n+   */\n   template<typename _Operation, typename first_argument_type, typename second_argument_type, typename result_type>\n     class binder2nd\n     : public std::unary_function<first_argument_type, result_type>\n@@ -192,10 +195,23 @@ namespace __gnu_parallel\n   template<typename T1, typename T2>\n   struct less : std::binary_function<T1, T2, bool>\n   {\n-    bool operator()(const T1& t1, const T2& t2) const\n+    bool \n+    operator()(const T1& t1, const T2& t2) const\n     { return t1 < t2; }\n+\n+    bool \n+    operator()(const T2& t2, const T1& t1) const\n+    { return t2 < t1; }\n   };\n \n+  // Partial specialization for one type. Same as std::less.\n+  template<typename _Tp>\n+  struct less<_Tp, _Tp> : public std::binary_function<_Tp, _Tp, bool>\n+    {\n+      bool\n+      operator()(const _Tp& __x, const _Tp& __y) const\n+      { return __x < __y; }\n+    };\n \n   template<typename T, typename _DifferenceTp>\n   class pseudo_sequence;\n@@ -268,7 +284,9 @@ namespace __gnu_parallel\n \n   public:\n     typedef _DifferenceTp difference_type;\n-    typedef pseudo_sequence_iterator<T, uint64> iterator;\t//better case down to uint64, than up to _DifferenceTp\n+\n+    // Better case down to uint64, than up to _DifferenceTp.\n+    typedef pseudo_sequence_iterator<T, uint64> iterator;\n \n     /** @brief Constructor.\n      *  @param val Element of the sequence."}, {"sha": "0dbf119c7bfaa18fda5f3b17319f95a7c2b297d1", "filename": "libstdc++-v3/include/parallel/find.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5654e49f04534bf73f90914a20c22f690d6d77c/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5654e49f04534bf73f90914a20c22f690d6d77c/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffind.h?ref=c5654e49f04534bf73f90914a20c22f690d6d77c", "patch": "@@ -105,8 +105,8 @@ namespace __gnu_parallel\n \n     const thread_index_t num_threads = get_max_threads();\n \n-    // XXX VLA error.\n-    difference_type borders[num_threads + 1];\n+    difference_type* borders = static_cast<difference_type*>(__builtin_alloca(sizeof(difference_type) * (num_threads + 1)));\n+\n     equally_split(length, num_threads, borders);\n \n #pragma omp parallel shared(result) num_threads(num_threads)"}, {"sha": "2a6c38a5a4f0751d3d26a1c31113523ecac26772", "filename": "libstdc++-v3/include/parallel/multiway_merge.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5654e49f04534bf73f90914a20c22f690d6d77c/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5654e49f04534bf73f90914a20c22f690d6d77c/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h?ref=c5654e49f04534bf73f90914a20c22f690d6d77c", "patch": "@@ -1457,7 +1457,7 @@ namespace __gnu_parallel\n \n \tcopy(seqs_begin, seqs_end, se.begin());\n \n-\tdifference_type borders[num_threads + 1];\n+\tdifference_type* borders = static_cast<difference_type*>(__builtin_alloca(sizeof(difference_type) * (num_threads + 1)));\n \tequally_split(length, num_threads, borders);\n \n \tfor (int s = 0; s < (num_threads - 1); s++)\n@@ -1470,7 +1470,8 @@ namespace __gnu_parallel\n \t    if (!tight)\n \t      {\n \t\toffsets[num_threads - 1].resize(k);\n-\t\tmultiseq_partition(se.begin(), se.end(), (difference_type)length,\n+\t\tmultiseq_partition(se.begin(), se.end(), \n+\t\t\t\t   difference_type(length), \n \t\t\t\t   offsets[num_threads - 1].begin(),  comp);\n \t      }\n \t  }"}, {"sha": "c5bc9c955a94c154321900f72fc4f0fa760bb8bb", "filename": "libstdc++-v3/include/parallel/partial_sum.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5654e49f04534bf73f90914a20c22f690d6d77c/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5654e49f04534bf73f90914a20c22f690d6d77c/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h?ref=c5654e49f04534bf73f90914a20c22f690d6d77c", "patch": "@@ -103,7 +103,7 @@ namespace __gnu_parallel\n \treturn parallel_partial_sum_basecase(begin + 1, end, result + 1, bin_op, *begin);\n       }\n \n-    difference_type* borders = __builtin_alloca(sizeof(difference_type) * (num_threads + 2));\n+    difference_type* borders = static_cast<difference_type*>(__builtin_alloca(sizeof(difference_type) * (num_threads + 2)));\n \n     if (Settings::partial_sum_dilatation == 1.0f)\n       equally_split(n, num_threads + 1, borders);"}]}