{"sha": "bdaa131bd0509fc849ea589e103c6339c45118e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRhYTEzMWJkMDUwOWZjODQ5ZWE1ODllMTAzYzYzMzljNDUxMThlOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-03-18T04:10:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-03-18T04:10:45Z"}, "message": "re PR c++/10091 ([parisc] ICE in cp_expr_size, at cp/cp-lang.c:307)\n\n        PR c++/10091\n        * expr.c (expand_expr) [ADDR_EXPR]: Disallow taking the address of\n        an unaligned member of TREE_ADDRESSABLE type.\n        * cp/typeck.c (build_class_member_access_expr): Compare\n        TYPE_MAIN_VARIANTs.\n\nFrom-SVN: r64520", "tree": {"sha": "6e3aaa141d1542f5a0f87593b7c67daea843b1d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e3aaa141d1542f5a0f87593b7c67daea843b1d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdaa131bd0509fc849ea589e103c6339c45118e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdaa131bd0509fc849ea589e103c6339c45118e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdaa131bd0509fc849ea589e103c6339c45118e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdaa131bd0509fc849ea589e103c6339c45118e8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ffcfcb5fd9058825f8a4be55adbd70c0841b0d22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffcfcb5fd9058825f8a4be55adbd70c0841b0d22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffcfcb5fd9058825f8a4be55adbd70c0841b0d22"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "c2a1825ea61139b75fca873fdfef12325a1407a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaa131bd0509fc849ea589e103c6339c45118e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaa131bd0509fc849ea589e103c6339c45118e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdaa131bd0509fc849ea589e103c6339c45118e8", "patch": "@@ -1,3 +1,9 @@\n+2003-03-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/10091\n+\t* expr.c (expand_expr) [ADDR_EXPR]: Disallow taking the address of\n+\tan unaligned member of TREE_ADDRESSABLE type.\n+\n 2003-03-18  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/linux64.h (MASK_PROFILE_KERNEL): Define."}, {"sha": "d6efa61c6e106717f02899540e38548594964e87", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaa131bd0509fc849ea589e103c6339c45118e8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaa131bd0509fc849ea589e103c6339c45118e8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bdaa131bd0509fc849ea589e103c6339c45118e8", "patch": "@@ -1,3 +1,9 @@\n+2003-03-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/10091\n+\t* typeck.c (build_class_member_access_expr): Compare \n+\tTYPE_MAIN_VARIANTs.\n+\n 2003-03-17  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/9639"}, {"sha": "142b128d17f714510493587782ed7621d943d7e8", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaa131bd0509fc849ea589e103c6339c45118e8/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaa131bd0509fc849ea589e103c6339c45118e8/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=bdaa131bd0509fc849ea589e103c6339c45118e8", "patch": "@@ -1941,7 +1941,8 @@ build_class_member_access_expr (tree object, tree member,\n \t\t       && integer_zerop (TREE_OPERAND (object, 0)));\n \n       /* Convert OBJECT to the type of MEMBER.  */\n-      if (!same_type_p (object_type, member_scope))\n+      if (!same_type_p (TYPE_MAIN_VARIANT (object_type),\n+\t\t\tTYPE_MAIN_VARIANT (member_scope)))\n \t{\n \t  tree binfo;\n \t  base_kind kind;\n@@ -1951,7 +1952,7 @@ build_class_member_access_expr (tree object, tree member,\n \t  if (binfo == error_mark_node)\n \t    return error_mark_node;\n \n-\t  /* It is invalid to use to try to get to a virtual base of a\n+\t  /* It is invalid to try to get to a virtual base of a\n \t     NULL object.  The most common cause is invalid use of\n \t     offsetof macro.  */\n \t  if (null_object_p && kind == bk_via_virtual)"}, {"sha": "926a18eb0734199ea0af1b822d8179f07273a58e", "filename": "gcc/expr.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaa131bd0509fc849ea589e103c6339c45118e8/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaa131bd0509fc849ea589e103c6339c45118e8/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=bdaa131bd0509fc849ea589e103c6339c45118e8", "patch": "@@ -9243,21 +9243,30 @@ expand_expr (exp, target, tmode, modifier)\n \t      && MEM_ALIGN (op0) < BIGGEST_ALIGNMENT)\n \t    {\n \t      tree inner_type = TREE_TYPE (TREE_OPERAND (exp, 0));\n-\t      rtx new\n-\t\t= assign_stack_temp_for_type\n-\t\t  (TYPE_MODE (inner_type),\n-\t\t   MEM_SIZE (op0) ? INTVAL (MEM_SIZE (op0))\n-\t\t   : int_size_in_bytes (inner_type),\n-\t\t   1, build_qualified_type (inner_type,\n-\t\t\t\t\t    (TYPE_QUALS (inner_type)\n-\t\t\t\t\t     | TYPE_QUAL_CONST)));\n+\t      rtx new;\n \n \t      if (TYPE_ALIGN_OK (inner_type))\n \t\tabort ();\n \n+\t      if (TREE_ADDRESSABLE (inner_type))\n+\t\t{\n+\t\t  /* We can't make a bitwise copy of this object, so fail.  */\n+\t\t  error (\"cannot take the address of an unaligned member\");\n+\t\t  return const0_rtx;\n+\t\t}\n+\n+\t      new = assign_stack_temp_for_type\n+\t\t(TYPE_MODE (inner_type),\n+\t\t MEM_SIZE (op0) ? INTVAL (MEM_SIZE (op0))\n+\t\t : int_size_in_bytes (inner_type),\n+\t\t 1, build_qualified_type (inner_type,\n+\t\t\t\t\t  (TYPE_QUALS (inner_type)\n+\t\t\t\t\t   | TYPE_QUAL_CONST)));\n+\n \t      emit_block_move (new, op0, expr_size (TREE_OPERAND (exp, 0)),\n \t\t\t       (modifier == EXPAND_STACK_PARM\n \t\t\t\t? BLOCK_OP_CALL_PARM : BLOCK_OP_NORMAL));\n+\n \t      op0 = new;\n \t    }\n "}]}