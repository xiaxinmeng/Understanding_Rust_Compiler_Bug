{"sha": "27fb79ad58913a5a6e7f65013c027bb13ad9b36b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdmYjc5YWQ1ODkxM2E1YTZlN2Y2NTAxM2MwMjdiYjEzYWQ5YjM2Yg==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-08-09T16:58:42Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-08-09T16:58:42Z"}, "message": "timevar.def (TV_CPROP1, [...]): New timers.\n\n\t* timevar.def (TV_CPROP1, TV_CPROP2, TV_PRE, TV_HOIST, TV_LSM):\n\tNew timers.\n\t* gcse.c: Include timevar.h.\n\t(const_prop_count, copy_prop_count): Rename to global_const_prop_count\n\tand global_copy_prop_count.\n\t(local_const_prop_count, local_copy_prop_count): New static globals.\n\t(gcse_main): Set the right timevar for each pass.\n\t(cprop_jump): Increment global_const_prop_count when a constant is\n\tpropagated.  Add \"GLOBAL\" to dump output.\n\t(cprop_insn): Increment global_const_prop_count when a constant is\n\tpropagated, or global_copy_prop_count when a copy is propagated.\n\t(do_local_cprop): Likewise for local_const_prop_count and\n\tlocal_copy_prop_count.\n\t(one_cprop_pass): Initialize const/cprop counters to zero.\n\tPrint out results of local and global const/cprop separately.\n\t(bypass_block): Break over-length line.\n\nFrom-SVN: r85718", "tree": {"sha": "6acad3c2863017816a499859e6818fdc7225e212", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6acad3c2863017816a499859e6818fdc7225e212"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27fb79ad58913a5a6e7f65013c027bb13ad9b36b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27fb79ad58913a5a6e7f65013c027bb13ad9b36b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27fb79ad58913a5a6e7f65013c027bb13ad9b36b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27fb79ad58913a5a6e7f65013c027bb13ad9b36b/comments", "author": null, "committer": null, "parents": [{"sha": "883c9d4d1237863941b95b3e7b8dba71fb49a78e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/883c9d4d1237863941b95b3e7b8dba71fb49a78e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/883c9d4d1237863941b95b3e7b8dba71fb49a78e"}], "stats": {"total": 100, "additions": 72, "deletions": 28}, "files": [{"sha": "3a7866cab8a35b3bb8ee372e39d904c5b25af684", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27fb79ad58913a5a6e7f65013c027bb13ad9b36b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27fb79ad58913a5a6e7f65013c027bb13ad9b36b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27fb79ad58913a5a6e7f65013c027bb13ad9b36b", "patch": "@@ -1,3 +1,22 @@\n+2004-08-09  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* timevar.def (TV_CPROP1, TV_CPROP2, TV_PRE, TV_HOIST, TV_LSM):\n+\tNew timers.\n+\t* gcse.c: Include timevar.h.\n+\t(const_prop_count, copy_prop_count): Rename to global_const_prop_count\n+\tand global_copy_prop_count.\n+\t(local_const_prop_count, local_copy_prop_count): New static globals.\n+\t(gcse_main): Set the right timevar for each pass.\n+\t(cprop_jump): Increment global_const_prop_count when a constant is\n+\tpropagated.  Add \"GLOBAL\" to dump output.\n+\t(cprop_insn): Increment global_const_prop_count when a constant is\n+\tpropagated, or global_copy_prop_count when a copy is propagated.\n+\t(do_local_cprop): Likewise for local_const_prop_count and\n+\tlocal_copy_prop_count.\n+\t(one_cprop_pass): Initialize const/cprop counters to zero.\n+\tPrint out results of local and global const/cprop separately.\n+\t(bypass_block): Break over-length line.\n+\n 2004-08-09  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* Makefile.in (GTFILES): Remove stmt.c\n@@ -152,13 +171,13 @@\n \n 2004-08-06  Roman Zippel  <zippel@linux-m68k.org>\n  \n-        * config/m68k/m68k.c (post_inc_operand,pre_dec_operand): New.\n-        * config/m68k/m68k.h (PREDICATE_CODES): add post_inc_operand,\n-        pre_dec_operand.\n-        * config/m68k/m68k.md (zero_extend*2): delay the splitting of the\n-        pattern until reload is finished to allow better code generation\n-        and split them completely into separate instrunctions.\n-        (*andsi3_split): New pattern.\n+\t* config/m68k/m68k.c (post_inc_operand,pre_dec_operand): New.\n+\t* config/m68k/m68k.h (PREDICATE_CODES): add post_inc_operand,\n+\tpre_dec_operand.\n+\t* config/m68k/m68k.md (zero_extend*2): delay the splitting of the\n+\tpattern until reload is finished to allow better code generation\n+\tand split them completely into separate instrunctions.\n+\t(*andsi3_split): New pattern.\n \n 2004-08-05  Mark Mitchell  <mark@codesourcery.com>\n "}, {"sha": "8f33f93f6cfc2a3d4ec38bb5db33974bdfaa37d3", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27fb79ad58913a5a6e7f65013c027bb13ad9b36b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27fb79ad58913a5a6e7f65013c027bb13ad9b36b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=27fb79ad58913a5a6e7f65013c027bb13ad9b36b", "patch": "@@ -1901,7 +1901,7 @@ web.o : web.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n gcse.o : gcse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h $(FLAGS_H) real.h insn-config.h $(GGC_H) $(RECOG_H) $(EXPR_H) \\\n    $(BASIC_BLOCK_H) function.h output.h toplev.h $(TM_P_H) $(PARAMS_H) \\\n-   except.h gt-gcse.h $(TREE_H) cselib.h\n+   except.h gt-gcse.h $(TREE_H) cselib.h $(TIMEVAR_H)\n resource.o : resource.c $(CONFIG_H) $(RTL_H) hard-reg-set.h $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(BASIC_BLOCK_H) $(REGS_H) $(FLAGS_H) output.h $(RESOURCE_H) function.h toplev.h \\\n    $(INSN_ATTR_H) except.h $(PARAMS_H) $(TM_P_H)\n@@ -2106,10 +2106,10 @@ predict.o: predict.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE\n    $(PARAMS_H) $(TARGET_H) $(CFGLOOP_H) $(COVERAGE_H)\n lists.o: lists.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h $(RTL_H) $(GGC_H)\n bb-reorder.o : bb-reorder.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(RTL_H) $(BASIC_BLOCK_H) $(FLAGS_H) timevar.h output.h $(CFGLAYOUT_H) $(FIBHEAP_H) \\\n+   $(RTL_H) $(BASIC_BLOCK_H) $(FLAGS_H) $(TIMEVAR_H) output.h $(CFGLAYOUT_H) $(FIBHEAP_H) \\\n    $(TARGET_H)\n tracer.o : tracer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n-   $(BASIC_BLOCK_H) hard-reg-set.h output.h $(CFGLAYOUT_H) $(FLAGS_H) timevar.h \\\n+   $(BASIC_BLOCK_H) hard-reg-set.h output.h $(CFGLAYOUT_H) $(FLAGS_H) $(TIMEVAR_H) \\\n    $(PARAMS_H) $(COVERAGE_H)\n cfglayout.o : cfglayout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) insn-config.h $(BASIC_BLOCK_H) hard-reg-set.h output.h \\"}, {"sha": "b9a7874c348e7fbe0e5a0bb1f530bc10daf7f360", "filename": "gcc/gcse.c", "status": "modified", "additions": 37, "deletions": 17, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27fb79ad58913a5a6e7f65013c027bb13ad9b36b/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27fb79ad58913a5a6e7f65013c027bb13ad9b36b/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=27fb79ad58913a5a6e7f65013c027bb13ad9b36b", "patch": "@@ -168,6 +168,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"cselib.h\"\n #include \"intl.h\"\n #include \"obstack.h\"\n+#include \"timevar.h\"\n \n /* Propagate flow information through back edges and thus enable PRE's\n    moving loop invariant calculations out of loops.\n@@ -510,10 +511,14 @@ static int bytes_used;\n static int gcse_subst_count;\n /* Number of copy instructions created.  */\n static int gcse_create_count;\n-/* Number of constants propagated.  */\n-static int const_prop_count;\n-/* Number of copys propagated.  */\n-static int copy_prop_count;\n+/* Number of local constants propagated.  */\n+static int local_const_prop_count;\n+/* Number of local copys propagated.  */\n+static int local_copy_prop_count;\n+/* Number of global constants propagated.  */\n+static int global_const_prop_count;\n+/* Number of global copys propagated.  */\n+static int global_copy_prop_count;\n \f\n /* For available exprs */\n static sbitmap *ae_kill, *ae_gen;\n@@ -746,12 +751,15 @@ gcse_main (rtx f, FILE *file)\n \n       /* Don't allow constant propagation to modify jumps\n \t during this pass.  */\n+      timevar_push (TV_CPROP1);\n       changed = one_cprop_pass (pass + 1, 0, 0);\n+      timevar_pop (TV_CPROP1);\n \n       if (optimize_size)\n \t/* Do nothing.  */ ;\n       else\n \t{\n+\t  timevar_push (TV_PRE);\n \t  changed |= one_pre_gcse_pass (pass + 1);\n \t  /* We may have just created new basic blocks.  Release and\n \t     recompute various things which are sized on the number of\n@@ -766,6 +774,7 @@ gcse_main (rtx f, FILE *file)\n \t  alloc_reg_set_mem (max_reg_num ());\n \t  compute_sets (f);\n \t  run_jump_opt_after_gcse = 1;\n+\t  timevar_pop (TV_PRE);\n \t}\n \n       if (max_pass_bytes < bytes_used)\n@@ -783,13 +792,15 @@ gcse_main (rtx f, FILE *file)\n \t for space, we don't run the partial redundancy algorithms).  */\n       if (optimize_size)\n \t{\n+\t  timevar_push (TV_HOIST);\n \t  max_gcse_regno = max_reg_num ();\n \t  alloc_gcse_mem (f);\n \t  changed |= one_code_hoisting_pass ();\n \t  free_gcse_mem ();\n \n \t  if (max_pass_bytes < bytes_used)\n \t    max_pass_bytes = bytes_used;\n+\t  timevar_pop (TV_HOIST);\n \t}\n \n       if (file)\n@@ -808,7 +819,9 @@ gcse_main (rtx f, FILE *file)\n   max_gcse_regno = max_reg_num ();\n   alloc_gcse_mem (f);\n   /* This time, go ahead and allow cprop to alter jumps.  */\n+  timevar_push (TV_CPROP2);\n   one_cprop_pass (pass + 1, 1, 0);\n+  timevar_pop (TV_CPROP2);\n   free_gcse_mem ();\n \n   if (file)\n@@ -827,7 +840,11 @@ gcse_main (rtx f, FILE *file)\n   allocate_reg_info (max_reg_num (), FALSE, FALSE);\n \n   if (!optimize_size && flag_gcse_sm)\n-    store_motion ();\n+    {\n+      timevar_push (TV_LSM);\n+      store_motion ();\n+      timevar_pop (TV_LSM);\n+    }\n \n   /* Record where pseudo-registers are set.  */\n   return run_jump_opt_after_gcse;\n@@ -3260,11 +3277,11 @@ cprop_jump (basic_block bb, rtx setcc, rtx jump, rtx from, rtx src)\n \n   run_jump_opt_after_gcse = 1;\n \n-  const_prop_count++;\n+  global_const_prop_count++;\n   if (gcse_file != NULL)\n     {\n       fprintf (gcse_file,\n-\t       \"CONST-PROP: Replacing reg %d in jump_insn %d with constant \",\n+\t       \"GLOBAL CONST-PROP: Replacing reg %d in jump_insn %d with constant \",\n \t       REGNO (from), INSN_UID (jump));\n       print_rtl (gcse_file, src);\n       fprintf (gcse_file, \"\\n\");\n@@ -3366,7 +3383,7 @@ cprop_insn (rtx insn, int alter_jumps)\n           if (constprop_register (insn, reg_used->reg_rtx, src, alter_jumps))\n \t    {\n \t      changed = 1;\n-\t      const_prop_count++;\n+\t      global_const_prop_count++;\n \t      if (gcse_file != NULL)\n \t\t{\n \t\t  fprintf (gcse_file, \"GLOBAL CONST-PROP: Replacing reg %d in \", regno);\n@@ -3385,7 +3402,7 @@ cprop_insn (rtx insn, int alter_jumps)\n \t  if (try_replace_reg (reg_used->reg_rtx, src, insn))\n \t    {\n \t      changed = 1;\n-\t      copy_prop_count++;\n+\t      global_copy_prop_count++;\n \t      if (gcse_file != NULL)\n \t\t{\n \t\t  fprintf (gcse_file, \"GLOBAL COPY-PROP: Replacing reg %d in insn %d\",\n@@ -3508,7 +3525,7 @@ do_local_cprop (rtx x, rtx insn, int alter_jumps, rtx *libcall_sp)\n \t      print_rtl (gcse_file, newcnst);\n \t      fprintf (gcse_file, \"\\n\");\n \t    }\n-\t  const_prop_count++;\n+\t  local_const_prop_count++;\n \t  return true;\n \t}\n       else if (newreg && newreg != x && try_replace_reg (x, newreg, insn))\n@@ -3521,7 +3538,7 @@ do_local_cprop (rtx x, rtx insn, int alter_jumps, rtx *libcall_sp)\n \t\t       REGNO (x), INSN_UID (insn));\n \t      fprintf (gcse_file, \" with reg %d\\n\", REGNO (newreg));\n \t    }\n-\t  copy_prop_count++;\n+\t  local_copy_prop_count++;\n \t  return true;\n \t}\n     }\n@@ -3783,8 +3800,8 @@ one_cprop_pass (int pass, int cprop_jumps, int bypass_jumps)\n {\n   int changed = 0;\n \n-  const_prop_count = 0;\n-  copy_prop_count = 0;\n+  global_const_prop_count = local_const_prop_count = 0;\n+  global_copy_prop_count = local_copy_prop_count = 0;\n \n   local_cprop_pass (cprop_jumps);\n \n@@ -3817,8 +3834,10 @@ one_cprop_pass (int pass, int cprop_jumps, int bypass_jumps)\n     {\n       fprintf (gcse_file, \"CPROP of %s, pass %d: %d bytes needed, \",\n \t       current_function_name (), pass, bytes_used);\n-      fprintf (gcse_file, \"%d const props, %d copy props\\n\\n\",\n-\t       const_prop_count, copy_prop_count);\n+      fprintf (gcse_file, \"%d local const props, %d local copy props\\n\\n\",\n+\t       local_const_prop_count, local_copy_prop_count);\n+      fprintf (gcse_file, \"%d global const props, %d global copy props\\n\\n\",\n+\t       global_const_prop_count, global_copy_prop_count);\n     }\n   /* Global analysis may get into infinite loops for unreachable blocks.  */\n   if (changed && cprop_jumps)\n@@ -4034,7 +4053,8 @@ bypass_block (basic_block bb, rtx setcc, rtx jump)\n \n \t      if (gcse_file != NULL)\n \t\t{\n-\t\t  fprintf (gcse_file, \"JUMP-BYPASS: Proved reg %d in jump_insn %d equals constant \",\n+\t\t  fprintf (gcse_file, \"JUMP-BYPASS: Proved reg %d \"\n+\t\t\t\t      \"in jump_insn %d equals constant \",\n \t\t\t   regno, INSN_UID (jump));\n \t\t  print_rtl (gcse_file, SET_SRC (set->expr));\n \t\t  fprintf (gcse_file, \"\\nBypass edge from %d->%d to %d\\n\",\n@@ -6865,7 +6885,7 @@ bypass_jumps (FILE *file)\n \n   max_gcse_regno = max_reg_num ();\n   alloc_gcse_mem (get_insns ());\n-  changed = one_cprop_pass (1, 1, 1);\n+  changed = one_cprop_pass (MAX_GCSE_PASSES + 2, 1, 1);\n   free_gcse_mem ();\n \n   if (file)"}, {"sha": "e3567103683ff3f992f35d32ab65b71aa6c2b927", "filename": "gcc/timevar.def", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27fb79ad58913a5a6e7f65013c027bb13ad9b36b/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27fb79ad58913a5a6e7f65013c027bb13ad9b36b/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=27fb79ad58913a5a6e7f65013c027bb13ad9b36b", "patch": "@@ -98,8 +98,13 @@ DEFTIMEVAR (TV_EXPAND\t\t     , \"expand\")\n DEFTIMEVAR (TV_VARCONST              , \"varconst\")\n DEFTIMEVAR (TV_JUMP                  , \"jump\")\n DEFTIMEVAR (TV_CSE                   , \"CSE\")\n-DEFTIMEVAR (TV_GCSE                  , \"global CSE\")\n DEFTIMEVAR (TV_LOOP                  , \"loop analysis\")\n+DEFTIMEVAR (TV_GCSE                  , \"global CSE\")\n+DEFTIMEVAR (TV_CPROP1                , \"CPROP 1\")\n+DEFTIMEVAR (TV_PRE                   , \"PRE\")\n+DEFTIMEVAR (TV_HOIST                 , \"code hoisting\")\n+DEFTIMEVAR (TV_CPROP2                , \"CPROP 2\")\n+DEFTIMEVAR (TV_LSM                   , \"LSM\")\n DEFTIMEVAR (TV_BYPASS                , \"bypass jumps\")\n DEFTIMEVAR (TV_TRACER                , \"tracer\")\n DEFTIMEVAR (TV_WEB                   , \"web\")"}]}