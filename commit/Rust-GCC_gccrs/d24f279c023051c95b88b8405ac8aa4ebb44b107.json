{"sha": "d24f279c023051c95b88b8405ac8aa4ebb44b107", "node_id": "C_kwDOANBUbNoAKGQyNGYyNzljMDIzMDUxYzk1Yjg4Yjg0MDVhYzhhYTRlYmI0NGIxMDc", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-10-17T19:49:22Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-07T08:36:35Z"}, "message": "ada: Use named notation in calls to Expand_Composite_Equality\n\nUse named notation in calls to Expand_Composite_Equality.\n\ngcc/ada/\n\n\t* exp_ch4.adb\n\t(Component_Equality, Expand_Array_Equality)\n\t(Expand_Record_Equality): Use named notation.", "tree": {"sha": "5937f136ca442cc3b56ed11f6f708a707083bda2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5937f136ca442cc3b56ed11f6f708a707083bda2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d24f279c023051c95b88b8405ac8aa4ebb44b107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24f279c023051c95b88b8405ac8aa4ebb44b107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d24f279c023051c95b88b8405ac8aa4ebb44b107", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24f279c023051c95b88b8405ac8aa4ebb44b107/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "0a104cd8e23ab9743b169c0feafabab1b0907d71", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24f279c023051c95b88b8405ac8aa4ebb44b107/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24f279c023051c95b88b8405ac8aa4ebb44b107/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=d24f279c023051c95b88b8405ac8aa4ebb44b107", "patch": "@@ -1725,7 +1725,8 @@ package body Exp_Ch4 is\n              Expressions => Index_List2);\n \n          Test := Expand_Composite_Equality\n-           (Typ, Nod, Component_Type (Typ), L, R);\n+           (Outer_Type => Typ, Nod => Nod, Comp_Type => Component_Type (Typ),\n+            Lhs => L, Rhs => R);\n \n          --  If some (sub)component is an unchecked_union, the whole operation\n          --  will raise program error.\n@@ -2013,7 +2014,9 @@ package body Exp_Ch4 is\n                 Prefix      => New_Copy_Tree (New_Rhs),\n                 Expressions => New_List (New_Copy_Tree (Low_B)));\n \n-            TestL := Expand_Composite_Equality (Ltyp, Nod, Ctyp, L, R);\n+            TestL := Expand_Composite_Equality\n+              (Outer_Type => Ltyp, Nod => Nod, Comp_Type => Ctyp,\n+               Lhs => L, Rhs => R);\n \n             L :=\n               Make_Indexed_Component (Loc,\n@@ -2025,7 +2028,9 @@ package body Exp_Ch4 is\n                 Prefix      => New_Rhs,\n                 Expressions => New_List (New_Copy_Tree (High_B)));\n \n-            TestH := Expand_Composite_Equality (Ltyp, Nod, Ctyp, L, R);\n+            TestH := Expand_Composite_Equality\n+              (Outer_Type => Ltyp, Nod => Nod, Comp_Type => Ctyp,\n+               Lhs => L, Rhs => R);\n \n             return\n               Make_And_Then (Loc, Left_Opnd => TestL, Right_Opnd => TestH);\n@@ -13380,15 +13385,16 @@ package body Exp_Ch4 is\n             end if;\n \n             Check :=\n-              Expand_Composite_Equality (Typ, Nod, Etype (C),\n-               Lhs =>\n-                 Make_Selected_Component (Loc,\n-                   Prefix        => New_Lhs,\n-                   Selector_Name => New_Occurrence_Of (C, Loc)),\n-               Rhs =>\n-                 Make_Selected_Component (Loc,\n-                   Prefix        => New_Rhs,\n-                   Selector_Name => New_Occurrence_Of (C, Loc)));\n+              Expand_Composite_Equality\n+                (Outer_Type => Typ, Nod => Nod, Comp_Type => Etype (C),\n+                 Lhs =>\n+                   Make_Selected_Component (Loc,\n+                     Prefix        => New_Lhs,\n+                     Selector_Name => New_Occurrence_Of (C, Loc)),\n+                 Rhs =>\n+                   Make_Selected_Component (Loc,\n+                     Prefix        => New_Rhs,\n+                     Selector_Name => New_Occurrence_Of (C, Loc)));\n \n             --  If some (sub)component is an unchecked_union, the whole\n             --  operation will raise program error."}]}