{"sha": "30ff82528b56f75cec222ac3d2c381e711123c0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBmZjgyNTI4YjU2Zjc1Y2VjMjIyYWMzZDJjMzgxZTcxMTEyM2MwYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "1999-08-03T14:24:07Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "1999-08-03T14:24:07Z"}, "message": "decl.c (start_enum): Show location of previous definition.\n\n        * decl.c (start_enum): Show location of previous definition.\n        * parse.y (enumlist_opt): New reduction.\n        (structsp): Simplify enum rules to use enumlist_opt.\n\nFrom-SVN: r28471", "tree": {"sha": "c4991aad2813a901237a27dba87875a30ccf0535", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4991aad2813a901237a27dba87875a30ccf0535"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30ff82528b56f75cec222ac3d2c381e711123c0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30ff82528b56f75cec222ac3d2c381e711123c0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30ff82528b56f75cec222ac3d2c381e711123c0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30ff82528b56f75cec222ac3d2c381e711123c0a/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f124f84ab03b1294d54070e60fc593ab7bcace09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f124f84ab03b1294d54070e60fc593ab7bcace09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f124f84ab03b1294d54070e60fc593ab7bcace09"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "94d0b96c25ef48ee02a99f4d6b8150bf72dc825f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ff82528b56f75cec222ac3d2c381e711123c0a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ff82528b56f75cec222ac3d2c381e711123c0a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=30ff82528b56f75cec222ac3d2c381e711123c0a", "patch": "@@ -1,3 +1,9 @@\n+1999-08-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* decl.c (start_enum): Show location of previous definition.\n+\t* parse.y (enumlist_opt): New reduction.\n+\t(structsp): Simplify enum rules to use enumlist_opt.\n+\n 1999-08-03  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* lex.c (yyprint): Handle PFUNCNAME."}, {"sha": "498384b0ae6d968a812b5e8aad121e0b931ae3f7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ff82528b56f75cec222ac3d2c381e711123c0a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ff82528b56f75cec222ac3d2c381e711123c0a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=30ff82528b56f75cec222ac3d2c381e711123c0a", "patch": "@@ -12642,7 +12642,10 @@ start_enum (name)\n     enumtype = lookup_tag (ENUMERAL_TYPE, name, b, 1);\n \n   if (enumtype != NULL_TREE && TREE_CODE (enumtype) == ENUMERAL_TYPE)\n-    cp_error (\"multiple definition of `%#T'\", enumtype);\n+    {\n+      cp_error (\"multiple definition of `%#T'\", enumtype);\n+      cp_error_at (\"previous definition here\", enumtype);\n+    }\n   else\n     {\n       enumtype = make_node (ENUMERAL_TYPE);"}, {"sha": "9551c15d7dd170c0a19d550e340b7a9bc19f1fc9", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ff82528b56f75cec222ac3d2c381e711123c0a/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ff82528b56f75cec222ac3d2c381e711123c0a/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=30ff82528b56f75cec222ac3d2c381e711123c0a", "patch": "@@ -211,7 +211,7 @@ empty_parms ()\n %type <ttype> component_declarator component_declarator0\n %type <ttype> notype_component_declarator notype_component_declarator0\n %type <ttype> after_type_component_declarator after_type_component_declarator0\n-%type <ttype> enumlist enumerator\n+%type <ttype> enumlist_opt enumlist enumerator\n %type <ttype> absdcl cv_qualifiers\n %type <ttype> direct_abstract_declarator conversion_declarator\n %type <ttype> new_declarator direct_new_declarator\n@@ -2104,32 +2104,24 @@ structsp:\n \t\t{ $<itype>3 = suspend_momentary ();\n \t\t  $<ttype>$ = current_enum_type;\n \t\t  current_enum_type = start_enum ($2); }\n-\t  enumlist maybecomma_warn '}'\n+\t  enumlist_opt '}'\n \t\t{ TYPE_VALUES (current_enum_type) = $5;\n \t\t  $$.t = finish_enum (current_enum_type);\n \t\t  $$.new_type_flag = 1;\n \t\t  current_enum_type = $<ttype>4;\n \t\t  resume_momentary ((int) $<itype>3);\n \t\t  check_for_missing_semicolon ($$.t); }\n-\t| ENUM identifier '{' '}'\n-\t\t{ $$.t = finish_enum (start_enum ($2));\n-\t\t  $$.new_type_flag = 1;\n-\t\t  check_for_missing_semicolon ($$.t); }\n \t| ENUM '{'\n \t\t{ $<itype>2 = suspend_momentary ();\n \t\t  $<ttype>$ = current_enum_type;\n \t\t  current_enum_type = start_enum (make_anon_name ()); }\n-\t  enumlist maybecomma_warn '}'\n+\t  enumlist_opt '}'\n                 { TYPE_VALUES (current_enum_type) = $4;\n \t\t  $$.t = finish_enum (current_enum_type);\n \t\t  $$.new_type_flag = 1;\n \t\t  current_enum_type = $<ttype>3;\n \t\t  resume_momentary ((int) $<itype>1);\n \t\t  check_for_missing_semicolon ($$.t); }\n-\t| ENUM '{' '}'\n-\t\t{ $$.t = finish_enum (start_enum (make_anon_name()));\n-\t\t  $$.new_type_flag = 1;\n-\t\t  check_for_missing_semicolon ($$.t); }\n \t| ENUM identifier\n \t\t{ $$.t = xref_tag (enum_type_node, $2, 1); \n \t\t  $$.new_type_flag = 0; }\n@@ -2681,6 +2673,12 @@ notype_component_declarator:\n \t\t  cplus_decl_attributes ($$, $3, prefix_attributes); }\n \t;\n \n+enumlist_opt:\n+\t  enumlist maybecomma_warn\n+\t| maybecomma_warn\n+\t  { $$ = NULL_TREE; }\n+\t;\n+\n /* We chain the enumerators in reverse order.\n    Because of the way enums are built, the order is\n    insignificant.  Take advantage of this fact.  */"}]}