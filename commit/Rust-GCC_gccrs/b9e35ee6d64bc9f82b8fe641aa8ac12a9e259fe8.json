{"sha": "b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjllMzVlZTZkNjRiYzlmODJiOGZlNjQxYWE4YWMxMmE5ZTI1OWZlOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-16T11:34:52Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-16T13:31:04Z"}, "message": "libstdc++: Revert final/non-addressable changes to ranges CPOs\n\nIn r12-1489-g8b93548778a487f31f21e0c6afe7e0bde9711fc4 I made the\n[range.access] CPO types final and non-addressable. Tim Song pointed out\nthis is wrong. Only the [range.iter.ops] functions should be final and\nnon-addressable. Revert the changes to the [range.access] objects.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_base.h (ranges::begin, ranges::end)\n\t(ranges::cbegin, ranges::cend, ranges::rbeing, ranges::rend)\n\t(ranges::crbegin, ranges::crend, ranges::size, ranges::ssize)\n\t(ranges::empty, ranges::data, ranges::cdata): Remove final\n\tkeywords and deleted operator& overloads.\n\t* testsuite/24_iterators/customization_points/iter_move.cc: Use\n\tnew is_customization_point_object function.\n\t* testsuite/24_iterators/customization_points/iter_swap.cc:\n\tLikewise.\n\t* testsuite/std/concepts/concepts.lang/concept.swappable/swap.cc:\n\tLikewise.\n\t* testsuite/std/ranges/access/begin.cc: Likewise.\n\t* testsuite/std/ranges/access/cbegin.cc: Likewise.\n\t* testsuite/std/ranges/access/cdata.cc: Likewise.\n\t* testsuite/std/ranges/access/cend.cc: Likewise.\n\t* testsuite/std/ranges/access/crbegin.cc: Likewise.\n\t* testsuite/std/ranges/access/crend.cc: Likewise.\n\t* testsuite/std/ranges/access/data.cc: Likewise.\n\t* testsuite/std/ranges/access/empty.cc: Likewise.\n\t* testsuite/std/ranges/access/end.cc: Likewise.\n\t* testsuite/std/ranges/access/rbegin.cc: Likewise.\n\t* testsuite/std/ranges/access/rend.cc: Likewise.\n\t* testsuite/std/ranges/access/size.cc: Likewise.\n\t* testsuite/std/ranges/access/ssize.cc: Likewise.\n\t* testsuite/util/testsuite_iterators.h\n\t(is_customization_point_object): New function.", "tree": {"sha": "4f44fcf71f94347f8653faf5803b3a53336c75cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f44fcf71f94347f8653faf5803b3a53336c75cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbfc149b639342a9555c60aa9ee787fb3d009316", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbfc149b639342a9555c60aa9ee787fb3d009316", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbfc149b639342a9555c60aa9ee787fb3d009316"}], "stats": {"total": 106, "additions": 68, "deletions": 38}, "files": [{"sha": "25af4b742a632f81c6562e60bf307d0e5014db22", "filename": "libstdc++-v3/include/bits/ranges_base.h", "status": "modified", "additions": 12, "deletions": 38, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h?ref=b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "patch": "@@ -91,7 +91,7 @@ namespace ranges\n     using std::ranges::__detail::__maybe_borrowed_range;\n     using std::__detail::__range_iter_t;\n \n-    struct _Begin final\n+    struct _Begin\n     {\n     private:\n       template<typename _Tp>\n@@ -106,8 +106,6 @@ namespace ranges\n \t    return noexcept(__decay_copy(begin(std::declval<_Tp&>())));\n \t}\n \n-      void operator&() const = delete;\n-\n     public:\n       template<__maybe_borrowed_range _Tp>\n \trequires is_array_v<remove_reference_t<_Tp>> || __member_begin<_Tp>\n@@ -144,7 +142,7 @@ namespace ranges\n \t  { __decay_copy(end(__t)) } -> sentinel_for<__range_iter_t<_Tp>>;\n \t};\n \n-    struct _End final\n+    struct _End\n     {\n     private:\n       template<typename _Tp>\n@@ -159,8 +157,6 @@ namespace ranges\n \t    return noexcept(__decay_copy(end(std::declval<_Tp&>())));\n \t}\n \n-      void operator&() const = delete;\n-\n     public:\n       template<__maybe_borrowed_range _Tp>\n \trequires is_bounded_array_v<remove_reference_t<_Tp>>\n@@ -193,7 +189,7 @@ namespace ranges\n \t  return static_cast<const _Tp&&>(__t);\n       }\n \n-    struct _CBegin final\n+    struct _CBegin\n     {\n       template<typename _Tp>\n \tconstexpr auto\n@@ -203,8 +199,6 @@ namespace ranges\n \t{\n \t  return _Begin{}(__cust_access::__as_const<_Tp>(__e));\n \t}\n-\n-      void operator&() const = delete;\n     };\n \n     struct _CEnd final\n@@ -217,8 +211,6 @@ namespace ranges\n \t{\n \t  return _End{}(__cust_access::__as_const<_Tp>(__e));\n \t}\n-\n-      void operator&() const = delete;\n     };\n \n     template<typename _Tp>\n@@ -244,7 +236,7 @@ namespace ranges\n \t  { _End{}(__t) } -> same_as<decltype(_Begin{}(__t))>;\n \t};\n \n-    struct _RBegin final\n+    struct _RBegin\n     {\n     private:\n       template<typename _Tp>\n@@ -268,8 +260,6 @@ namespace ranges\n \t    }\n \t}\n \n-      void operator&() const = delete;\n-\n     public:\n       template<__maybe_borrowed_range _Tp>\n \trequires __member_rbegin<_Tp> || __adl_rbegin<_Tp> || __reversable<_Tp>\n@@ -304,7 +294,7 @@ namespace ranges\n \t    -> sentinel_for<decltype(_RBegin{}(std::forward<_Tp>(__t)))>;\n \t};\n \n-    struct _REnd final\n+    struct _REnd\n     {\n     private:\n       template<typename _Tp>\n@@ -328,8 +318,6 @@ namespace ranges\n \t    }\n \t}\n \n-      void operator&() const = delete;\n-\n     public:\n       template<__maybe_borrowed_range _Tp>\n \trequires __member_rend<_Tp> || __adl_rend<_Tp> || __reversable<_Tp>\n@@ -346,7 +334,7 @@ namespace ranges\n \t}\n     };\n \n-    struct _CRBegin final\n+    struct _CRBegin\n     {\n       template<typename _Tp>\n \tconstexpr auto\n@@ -356,11 +344,9 @@ namespace ranges\n \t{\n \t  return _RBegin{}(__cust_access::__as_const<_Tp>(__e));\n \t}\n-\n-      void operator&() const = delete;\n     };\n \n-    struct _CREnd final\n+    struct _CREnd\n     {\n       template<typename _Tp>\n \tconstexpr auto\n@@ -370,8 +356,6 @@ namespace ranges\n \t{\n \t  return _REnd{}(__cust_access::__as_const<_Tp>(__e));\n \t}\n-\n-      void operator&() const = delete;\n     };\n \n     template<typename _Tp>\n@@ -402,7 +386,7 @@ namespace ranges\n \t  __detail::__to_unsigned_like(_End{}(__t) - _Begin{}(__t));\n \t};\n \n-    struct _Size final\n+    struct _Size\n     {\n     private:\n       template<typename _Tp>\n@@ -420,8 +404,6 @@ namespace ranges\n \t\t\t    - _Begin{}(std::declval<_Tp&>()));\n \t}\n \n-      void operator&() const = delete;\n-\n     public:\n       template<typename _Tp>\n \trequires is_bounded_array_v<remove_reference_t<_Tp>>\n@@ -440,7 +422,7 @@ namespace ranges\n \t}\n     };\n \n-    struct _SSize final\n+    struct _SSize\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 3403. Domain of ranges::ssize(E) doesn't match ranges::size(E)\n@@ -469,8 +451,6 @@ namespace ranges\n \t  else // Must be one of __max_diff_type or __max_size_type.\n \t    return __detail::__max_diff_type(__size);\n \t}\n-\n-      void operator&() const = delete;\n     };\n \n     template<typename _Tp>\n@@ -487,7 +467,7 @@ namespace ranges\n \t  bool(_Begin{}(__t) == _End{}(__t));\n \t};\n \n-    struct _Empty final\n+    struct _Empty\n     {\n     private:\n       template<typename _Tp>\n@@ -503,8 +483,6 @@ namespace ranges\n \t\t== _End{}(std::declval<_Tp&>())));\n \t}\n \n-      void operator&() const = delete;\n-\n     public:\n       template<typename _Tp>\n \trequires __member_empty<_Tp> || __size0_empty<_Tp>\n@@ -534,7 +512,7 @@ namespace ranges\n     template<typename _Tp>\n       concept __begin_data = contiguous_iterator<__range_iter_t<_Tp>>;\n \n-    struct _Data final\n+    struct _Data\n     {\n     private:\n       template<typename _Tp>\n@@ -547,8 +525,6 @@ namespace ranges\n \t    return noexcept(_Begin{}(std::declval<_Tp&>()));\n \t}\n \n-      void operator&() const = delete;\n-\n     public:\n       template<__maybe_borrowed_range _Tp>\n \trequires __member_data<_Tp> || __begin_data<_Tp>\n@@ -562,7 +538,7 @@ namespace ranges\n \t}\n     };\n \n-    struct _CData final\n+    struct _CData\n     {\n       template<typename _Tp>\n \tconstexpr auto\n@@ -572,8 +548,6 @@ namespace ranges\n \t{\n \t  return _Data{}(__cust_access::__as_const<_Tp>(__e));\n \t}\n-\n-      void operator&() const = delete;\n     };\n \n   } // namespace __cust_access"}, {"sha": "a43448581f304d74d0994b8efb149c8f5a64407c", "filename": "libstdc++-v3/testsuite/24_iterators/customization_points/iter_move.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcustomization_points%2Fiter_move.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcustomization_points%2Fiter_move.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcustomization_points%2Fiter_move.cc?ref=b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "patch": "@@ -20,6 +20,9 @@\n \n #include <iterator>\n #include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+static_assert(__gnu_test::is_customization_point_object(std::ranges::iter_move));\n \n struct X\n {"}, {"sha": "f170e177d3027ccd352056ecef45eb4c10ea6de6", "filename": "libstdc++-v3/testsuite/24_iterators/customization_points/iter_swap.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcustomization_points%2Fiter_swap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcustomization_points%2Fiter_swap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcustomization_points%2Fiter_swap.cc?ref=b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "patch": "@@ -20,6 +20,9 @@\n \n #include <iterator>\n #include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+static_assert(__gnu_test::is_customization_point_object(std::ranges::iter_swap));\n \n struct X\n {"}, {"sha": "ea469e953b24b8cba410039306bab00cf45721f3", "filename": "libstdc++-v3/testsuite/std/concepts/concepts.lang/concept.swappable/swap.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.swappable%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.swappable%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.swappable%2Fswap.cc?ref=b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "patch": "@@ -19,6 +19,10 @@\n // { dg-do compile { target c++2a } }\n \n #include <concepts>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+static_assert(__gnu_test::is_customization_point_object(std::ranges::swap));\n \n namespace nu\n {"}, {"sha": "a08ad37fd34db4abff5dac0abe7abcc644768757", "filename": "libstdc++-v3/testsuite/std/ranges/access/begin.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fbegin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fbegin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fbegin.cc?ref=b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "patch": "@@ -22,6 +22,8 @@\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n \n+static_assert(__gnu_test::is_customization_point_object(std::ranges::begin));\n+\n using std::same_as;\n \n void"}, {"sha": "ed80af589cfe07d59bbfa0d456a7f235772c84fe", "filename": "libstdc++-v3/testsuite/std/ranges/access/cbegin.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcbegin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcbegin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcbegin.cc?ref=b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "patch": "@@ -20,6 +20,10 @@\n \n #include <ranges>\n #include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+static_assert(__gnu_test::is_customization_point_object(std::ranges::cbegin));\n+\n using std::same_as;\n \n void"}, {"sha": "d51ff1d32eb566980af45a0fa46c095bff57ea19", "filename": "libstdc++-v3/testsuite/std/ranges/access/cdata.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcdata.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcdata.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcdata.cc?ref=b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "patch": "@@ -20,6 +20,9 @@\n \n #include <ranges>\n #include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+static_assert(__gnu_test::is_customization_point_object(std::ranges::cdata));\n \n template<typename T>\n   concept has_cdata"}, {"sha": "3e685ae9ce23dc8af8a4fe5181c140533d6242ed", "filename": "libstdc++-v3/testsuite/std/ranges/access/cend.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcend.cc?ref=b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "patch": "@@ -20,6 +20,9 @@\n \n #include <ranges>\n #include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+static_assert(__gnu_test::is_customization_point_object(std::ranges::cend));\n \n using std::same_as;\n "}, {"sha": "6b02b478a151c8a52a2363d3132996dcff64c127", "filename": "libstdc++-v3/testsuite/std/ranges/access/crbegin.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcrbegin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcrbegin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcrbegin.cc?ref=b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "patch": "@@ -22,6 +22,8 @@\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n \n+static_assert(__gnu_test::is_customization_point_object(std::ranges::crbegin));\n+\n struct R1\n {\n   int i = 0;"}, {"sha": "eb010d9d477945f1e7dfb982208e98f88a356133", "filename": "libstdc++-v3/testsuite/std/ranges/access/crend.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcrend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcrend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcrend.cc?ref=b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "patch": "@@ -22,6 +22,8 @@\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n \n+static_assert(__gnu_test::is_customization_point_object(std::ranges::crend));\n+\n struct R1\n {\n   int i = 0;"}, {"sha": "b2083d1890e7764650dea76582985ea585fbd837", "filename": "libstdc++-v3/testsuite/std/ranges/access/data.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fdata.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fdata.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fdata.cc?ref=b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "patch": "@@ -22,6 +22,8 @@\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n \n+static_assert(__gnu_test::is_customization_point_object(std::ranges::data));\n+\n template<typename T>\n   concept has_data\n     = requires (T&& t) { std::ranges::data(std::forward<T>(t)); };"}, {"sha": "3cad47401240438d34ef11715150d02939e6cae5", "filename": "libstdc++-v3/testsuite/std/ranges/access/empty.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fempty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fempty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fempty.cc?ref=b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "patch": "@@ -22,6 +22,8 @@\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n \n+static_assert(__gnu_test::is_customization_point_object(std::ranges::empty));\n+\n using std::same_as;\n \n void"}, {"sha": "25f21c75afc4bf891f746a8f6eb088e71333c48d", "filename": "libstdc++-v3/testsuite/std/ranges/access/end.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend.cc?ref=b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "patch": "@@ -22,6 +22,8 @@\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n \n+static_assert(__gnu_test::is_customization_point_object(std::ranges::end));\n+\n using std::same_as;\n \n void"}, {"sha": "0006f89d4c56f89dba0612cce41e673735ef2dd9", "filename": "libstdc++-v3/testsuite/std/ranges/access/rbegin.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Frbegin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Frbegin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Frbegin.cc?ref=b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "patch": "@@ -22,6 +22,8 @@\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n \n+static_assert(__gnu_test::is_customization_point_object(std::ranges::rbegin));\n+\n struct R1\n {\n   int i = 0;"}, {"sha": "0ac86bc8d4bb3c647a43f00dd9eb63ab386fda74", "filename": "libstdc++-v3/testsuite/std/ranges/access/rend.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Frend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Frend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Frend.cc?ref=b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "patch": "@@ -22,6 +22,8 @@\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n \n+static_assert(__gnu_test::is_customization_point_object(std::ranges::rend));\n+\n struct R1\n {\n   int i = 0;"}, {"sha": "c7e4f78f96a24960f93c7dbcb91632e7ace903e8", "filename": "libstdc++-v3/testsuite/std/ranges/access/size.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fsize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fsize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fsize.cc?ref=b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "patch": "@@ -22,6 +22,8 @@\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n \n+static_assert(__gnu_test::is_customization_point_object(std::ranges::size));\n+\n void\n test01()\n {"}, {"sha": "7337f626a25ef192fdfa50c9aa76f010873438c5", "filename": "libstdc++-v3/testsuite/std/ranges/access/ssize.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fssize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fssize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fssize.cc?ref=b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "patch": "@@ -22,6 +22,8 @@\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n \n+static_assert(__gnu_test::is_customization_point_object(std::ranges::ssize));\n+\n using std::ptrdiff_t;\n \n void"}, {"sha": "6b835ac475eeef3e252424cc2f06ee878eea3d46", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=b9e35ee6d64bc9f82b8fe641aa8ac12a9e259fe8", "patch": "@@ -894,6 +894,22 @@ namespace __gnu_test\n // This is also true for test_container, although only when it has forward\n // iterators (because output_iterator_wrapper and input_iterator_wrapper are\n // not default constructible so do not model std::input_or_output_iterator).\n+\n+\n+  // Test for basic properties of C++20 16.3.3.6 [customization.point.object].\n+  template<typename T>\n+    constexpr bool\n+    is_customization_point_object(T& obj) noexcept\n+    {\n+      // A [CPO] is a function object with a literal class type.\n+      static_assert( std::is_class_v<T> || std::is_union_v<T> );\n+      static_assert( __is_literal_type(T) );\n+      // The type of a [CPO], ignoring cv-qualifiers, shall model semiregular.\n+      static_assert( std::semiregular<std::remove_cv_t<T>> );\n+\n+      return true;\n+    }\n+\n #endif // C++20\n } // namespace __gnu_test\n #endif // _TESTSUITE_ITERATORS"}]}