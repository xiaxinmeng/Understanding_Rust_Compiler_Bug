{"sha": "27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdkOGZmOWI4MzQ5ZWM2NGViZWViN2NjYzZjNDUxNjU4MGJmM2E4MQ==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2006-08-04T20:34:02Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2006-08-04T20:34:02Z"}, "message": "VMFrame.java: Update to Classpath 0.91.\n\n        * gnu/classpath/jdwp/VMFrame.java: Update to Classpath 0.91.\n        * gnu/classpath/jdwp/VMIdManager.java: Likewise.\n        * gnu/classpath/jdwp/VMMethod.java: Likewise.\n        * gnu/classpath/jdwp/VMVirtualMachine: Likewise.\n        * gnu/classpath/jdwp/natVMFrame.java: New file.\n        * gnu/classpath/jdwp/natVMMethod.java: New file.\n        * gnu/classpath/jdwp/natVMVirtualMachine.java: New file.\n        * Makefile.am (nat_source_files): Add new filles.\n        * Makefile.in: Regenerated.\n\nFrom-SVN: r115934", "tree": {"sha": "6eb4caac232c45b7f3bfb8d655d8ded27ab7c1f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6eb4caac232c45b7f3bfb8d655d8ded27ab7c1f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc011e7f12afb47a0487e9645bc125681b8b136f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc011e7f12afb47a0487e9645bc125681b8b136f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc011e7f12afb47a0487e9645bc125681b8b136f"}], "stats": {"total": 470, "additions": 419, "deletions": 51}, "files": [{"sha": "485aa7fe11f216fa406ceb09474187acbf37854b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81", "patch": "@@ -1,3 +1,15 @@\n+2006-08-01  Keith Seitz  <keiths@redhat.com>\n+\n+\t* gnu/classpath/jdwp/VMFrame.java: Update to Classpath 0.91.\n+\t* gnu/classpath/jdwp/VMIdManager.java: Likewise.\n+\t* gnu/classpath/jdwp/VMMethod.java: Likewise.\n+\t* gnu/classpath/jdwp/VMVirtualMachine: Likewise.\n+\t* gnu/classpath/jdwp/natVMFrame.java: New file.\n+\t* gnu/classpath/jdwp/natVMMethod.java: New file.\n+\t* gnu/classpath/jdwp/natVMVirtualMachine.java: New file.\n+\t* Makefile.am (nat_source_files): Add new filles.\n+\t* Makefile.in: Regenerated.\n+\n 2006-08-03  Tom Tromey  <tromey@redhat.com>\n \n \t* jvmti.cc (REQUIRE_PHASE): New macro."}, {"sha": "bf9f7a01a0e2bf0b6a6bb2dae09f50f92cc08482", "filename": "libjava/Makefile.am", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81", "patch": "@@ -771,6 +771,9 @@ gkeytool_DEPENDENCIES = libgcj-tools.la\n ## This lists all the C++ source files in subdirectories.\n nat_source_files = \\\n gnu/classpath/natSystemProperties.cc \\\n+gnu/classpath/jdwp/natVMFrame.cc \\\n+gnu/classpath/jdwp/natVMMethod.cc \\\n+gnu/classpath/jdwp/natVMVirtualMachine.cc \\\n gnu/gcj/natCore.cc \\\n gnu/gcj/convert/JIS0208_to_Unicode.cc \\\n gnu/gcj/convert/JIS0212_to_Unicode.cc \\"}, {"sha": "57649f0875b432783fefb94a7d9fa9327eae9c1f", "filename": "libjava/Makefile.in", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81", "patch": "@@ -252,7 +252,10 @@ am__DEPENDENCIES_4 =\n am__libgcj_la_SOURCES_DIST = prims.cc jni.cc jvmti.cc exception.cc \\\n \tstacktrace.cc link.cc defineclass.cc interpret.cc verify.cc \\\n \tjava/lang/Class.java java/lang/Object.java \\\n-\tgnu/classpath/natSystemProperties.cc gnu/gcj/natCore.cc \\\n+\tgnu/classpath/natSystemProperties.cc \\\n+\tgnu/classpath/jdwp/natVMFrame.cc \\\n+\tgnu/classpath/jdwp/natVMMethod.cc \\\n+\tgnu/classpath/jdwp/natVMVirtualMachine.cc gnu/gcj/natCore.cc \\\n \tgnu/gcj/convert/JIS0208_to_Unicode.cc \\\n \tgnu/gcj/convert/JIS0212_to_Unicode.cc \\\n \tgnu/gcj/convert/Unicode_to_JIS.cc gnu/gcj/convert/natIconv.cc \\\n@@ -295,7 +298,10 @@ am__libgcj_la_SOURCES_DIST = prims.cc jni.cc jvmti.cc exception.cc \\\n \tboehm.cc nogc.cc posix.cc win32.cc darwin.cc posix-threads.cc \\\n \twin32-threads.cc no-threads.cc\n am__objects_2 = gnu/classpath/natSystemProperties.lo \\\n-\tgnu/gcj/natCore.lo gnu/gcj/convert/JIS0208_to_Unicode.lo \\\n+\tgnu/classpath/jdwp/natVMFrame.lo \\\n+\tgnu/classpath/jdwp/natVMMethod.lo \\\n+\tgnu/classpath/jdwp/natVMVirtualMachine.lo gnu/gcj/natCore.lo \\\n+\tgnu/gcj/convert/JIS0208_to_Unicode.lo \\\n \tgnu/gcj/convert/JIS0212_to_Unicode.lo \\\n \tgnu/gcj/convert/Unicode_to_JIS.lo gnu/gcj/convert/natIconv.lo \\\n \tgnu/gcj/convert/natInput_EUCJIS.lo \\\n@@ -618,7 +624,6 @@ bindir = @bindir@\n build = @build@\n build_alias = @build_alias@\n build_cpu = @build_cpu@\n-build_libsubdir = @build_libsubdir@\n build_os = @build_os@\n build_subdir = @build_subdir@\n build_vendor = @build_vendor@\n@@ -7085,6 +7090,9 @@ gkeytool_LDADD = -L$(here)/.libs libgcj-tools.la\n gkeytool_DEPENDENCIES = libgcj-tools.la\n nat_source_files = \\\n gnu/classpath/natSystemProperties.cc \\\n+gnu/classpath/jdwp/natVMFrame.cc \\\n+gnu/classpath/jdwp/natVMMethod.cc \\\n+gnu/classpath/jdwp/natVMVirtualMachine.cc \\\n gnu/gcj/natCore.cc \\\n gnu/gcj/convert/JIS0208_to_Unicode.cc \\\n gnu/gcj/convert/JIS0212_to_Unicode.cc \\\n@@ -7417,6 +7425,19 @@ gnu/classpath/$(DEPDIR)/$(am__dirstamp):\n \t@: > gnu/classpath/$(DEPDIR)/$(am__dirstamp)\n gnu/classpath/natSystemProperties.lo: gnu/classpath/$(am__dirstamp) \\\n \tgnu/classpath/$(DEPDIR)/$(am__dirstamp)\n+gnu/classpath/jdwp/$(am__dirstamp):\n+\t@$(mkdir_p) gnu/classpath/jdwp\n+\t@: > gnu/classpath/jdwp/$(am__dirstamp)\n+gnu/classpath/jdwp/$(DEPDIR)/$(am__dirstamp):\n+\t@$(mkdir_p) gnu/classpath/jdwp/$(DEPDIR)\n+\t@: > gnu/classpath/jdwp/$(DEPDIR)/$(am__dirstamp)\n+gnu/classpath/jdwp/natVMFrame.lo: gnu/classpath/jdwp/$(am__dirstamp) \\\n+\tgnu/classpath/jdwp/$(DEPDIR)/$(am__dirstamp)\n+gnu/classpath/jdwp/natVMMethod.lo: gnu/classpath/jdwp/$(am__dirstamp) \\\n+\tgnu/classpath/jdwp/$(DEPDIR)/$(am__dirstamp)\n+gnu/classpath/jdwp/natVMVirtualMachine.lo:  \\\n+\tgnu/classpath/jdwp/$(am__dirstamp) \\\n+\tgnu/classpath/jdwp/$(DEPDIR)/$(am__dirstamp)\n gnu/gcj/$(am__dirstamp):\n \t@$(mkdir_p) gnu/gcj\n \t@: > gnu/gcj/$(am__dirstamp)\n@@ -7781,6 +7802,12 @@ mostlyclean-compile:\n \t-rm -f *.$(OBJEXT)\n \t-rm -f classpath/tools/libgcj_tools_la-tools.$(OBJEXT)\n \t-rm -f classpath/tools/libgcj_tools_la-tools.lo\n+\t-rm -f gnu/classpath/jdwp/natVMFrame.$(OBJEXT)\n+\t-rm -f gnu/classpath/jdwp/natVMFrame.lo\n+\t-rm -f gnu/classpath/jdwp/natVMMethod.$(OBJEXT)\n+\t-rm -f gnu/classpath/jdwp/natVMMethod.lo\n+\t-rm -f gnu/classpath/jdwp/natVMVirtualMachine.$(OBJEXT)\n+\t-rm -f gnu/classpath/jdwp/natVMVirtualMachine.lo\n \t-rm -f gnu/classpath/natSystemProperties.$(OBJEXT)\n \t-rm -f gnu/classpath/natSystemProperties.lo\n \t-rm -f gnu/gcj/convert/JIS0208_to_Unicode.$(OBJEXT)\n@@ -7976,6 +8003,9 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/win32.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@classpath/tools/$(DEPDIR)/libgcj_tools_la-tools.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/classpath/$(DEPDIR)/natSystemProperties.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/classpath/jdwp/$(DEPDIR)/natVMFrame.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/classpath/jdwp/$(DEPDIR)/natVMMethod.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/classpath/jdwp/$(DEPDIR)/natVMVirtualMachine.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/$(DEPDIR)/natCore.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/convert/$(DEPDIR)/JIS0208_to_Unicode.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/convert/$(DEPDIR)/JIS0212_to_Unicode.Plo@am__quote@\n@@ -8313,6 +8343,7 @@ clean-libtool:\n \t-rm -rf .libs _libs\n \t-rm -rf classpath/tools/.libs classpath/tools/_libs\n \t-rm -rf gnu/classpath/.libs gnu/classpath/_libs\n+\t-rm -rf gnu/classpath/jdwp/.libs gnu/classpath/jdwp/_libs\n \t-rm -rf gnu/gcj/.libs gnu/gcj/_libs\n \t-rm -rf gnu/gcj/convert/.libs gnu/gcj/convert/_libs\n \t-rm -rf gnu/gcj/io/.libs gnu/gcj/io/_libs\n@@ -8716,6 +8747,8 @@ distclean-generic:\n \t-rm -f classpath/tools/$(am__dirstamp)\n \t-rm -f gnu/classpath/$(DEPDIR)/$(am__dirstamp)\n \t-rm -f gnu/classpath/$(am__dirstamp)\n+\t-rm -f gnu/classpath/jdwp/$(DEPDIR)/$(am__dirstamp)\n+\t-rm -f gnu/classpath/jdwp/$(am__dirstamp)\n \t-rm -f gnu/gcj/$(DEPDIR)/$(am__dirstamp)\n \t-rm -f gnu/gcj/$(am__dirstamp)\n \t-rm -f gnu/gcj/convert/$(DEPDIR)/$(am__dirstamp)\n@@ -8777,7 +8810,7 @@ clean-am: clean-binPROGRAMS clean-dbexecLTLIBRARIES clean-generic \\\n \n distclean: distclean-recursive\n \t-rm -f $(am__CONFIG_DISTCLEAN_FILES)\n-\t-rm -rf ./$(DEPDIR) classpath/tools/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/security/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/zip/$(DEPDIR)\n+\t-rm -rf ./$(DEPDIR) classpath/tools/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/classpath/jdwp/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/security/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/zip/$(DEPDIR)\n \t-rm -f Makefile\n distclean-am: clean-am distclean-compile distclean-generic \\\n \tdistclean-libtool distclean-local distclean-tags\n@@ -8808,7 +8841,7 @@ installcheck-am:\n maintainer-clean: maintainer-clean-recursive\n \t-rm -f $(am__CONFIG_DISTCLEAN_FILES)\n \t-rm -rf $(top_srcdir)/autom4te.cache\n-\t-rm -rf ./$(DEPDIR) classpath/tools/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/security/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/zip/$(DEPDIR)\n+\t-rm -rf ./$(DEPDIR) classpath/tools/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/classpath/jdwp/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/security/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/zip/$(DEPDIR)\n \t-rm -f Makefile\n maintainer-clean-am: distclean-am maintainer-clean-generic\n "}, {"sha": "cd213025a72477073c33714beef9079655cd4bab", "filename": "libjava/gnu/classpath/jdwp/VMFrame.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.java?ref=27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81", "patch": "@@ -76,14 +76,14 @@ public Location getLocation()\n    * \n    * @param slot the slot containing the variable\n    */\n-  public Object getValue(int slot) { return null; }\n+  public native Object getValue(int slot);\n \n   /**\n    * Assigns the given variable to the given value. \n    * @param slot The slot which contains the variable\n    * @param value The value to assign the variable to\n    */\n-  public void setValue(int slot, Object value) { }\n+  public native void setValue(int slot, Object value);\n \n   /**\n    * Get the object which is represented by 'this' in the context of the frame,"}, {"sha": "8d423e9b0d66a2a44cd4d0e6a61c59e130878498", "filename": "libjava/gnu/classpath/jdwp/VMIdManager.java", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMIdManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMIdManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMIdManager.java?ref=27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81", "patch": "@@ -1,7 +1,7 @@\n /* VMIdManager.java -- A reference/example implementation of a manager for\n    JDWP object/reference type IDs\n \n-   Copyright (C) 2005 Free Software Foundation\n+   Copyright (C) 2005, 2006 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -48,11 +48,9 @@\n import java.lang.ref.Reference;\n import java.lang.ref.ReferenceQueue;\n import java.lang.ref.SoftReference;\n-import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.HashMap;\n import java.util.Hashtable;\n-import java.util.Iterator;\n \n /**\n  * This class manages objects and referencetypes that are reported\n@@ -76,6 +74,10 @@\n  * <b>NOTE:</b> All IDs handled by the ID manager (all object and reference\n  * type IDs) are assumed to be of type <code>long</code>.\n  *\n+ * <b>NOTE:</b> This class does not manage virtual machine-specific types,\n+ * like methods, fields, and frames. These already have unique IDs within\n+ * the virtual machine and do not need further abstraction here.\n+ *\n  * @author Keith Seitz  (keiths@redhat.com)\n  */\n public class VMIdManager\n@@ -99,9 +101,6 @@\n       // ObjectId and ArrayId are special cases. See newObjectId.\n       _idList.put (ClassLoaderId.typeClass, ClassLoaderId.class);\n       _idList.put (ClassObjectId.typeClass, ClassObjectId.class);\n-      //_idList.put (FieldId.typeClass, FieldId.class);\n-      //_idList.put (FrameId.typeClass, FrameId.class);\n-      //_idList.put (MethodId.typeClass, MethodId.class);\n       _idList.put (StringId.typeClass, StringId.class);\n       _idList.put (ThreadId.typeClass, ThreadId.class);\n       _idList.put (ThreadGroupId.typeClass, ThreadGroupId.class);\n@@ -110,7 +109,7 @@\n     /**\n      * Returns a new id for the given object\n      *\n-     * @param object  the object for which an id is desired\n+     * @param obj  SoftReference of the object for which an id is desired\n      * @returns a suitable object id\n      */\n     public static ObjectId newObjectId (SoftReference obj)\n@@ -170,7 +169,7 @@ public static ObjectId newObjectId (SoftReference obj)\n     /**\n      * Returns a new reference type id for the given class\n      *\n-     * @param clazz  the <code>Class</code> for which an id is desired\n+     * @param ref  SoftReference to the desired type\n      * @returns a suitable reference type id or null when the\n      * reference is cleared.\n      */\n@@ -187,6 +186,7 @@ else if (clazz.isInterface ())\n \tid = new InterfaceReferenceTypeId ();\n       else\n \tid = new ClassReferenceTypeId ();\n+      id.setReference (ref);\n       synchronized (_ridLock)\n \t{\n \t  id.setId (++_lastRid);"}, {"sha": "d345bc1b515cec75dd09bac7a380f5b2209ede75", "filename": "libjava/gnu/classpath/jdwp/VMMethod.java", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMMethod.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMMethod.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMMethod.java?ref=27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81", "patch": "@@ -103,17 +103,17 @@ public Class getDeclaringClass()\n   /**\n    * Returns the name of this method\n    */\n-  public String getName() { return null; }\n+  public native String getName();\n \n   /**\n    * Returns the signature of this method\n    */\n-  public String getSignature() { return null; }\n+  public native String getSignature();\n \n   /**\n    * Returns the method's modifier flags\n    */\n-  public int getModifiers() { return -1; }\n+  public native int getModifiers();\n \n   /**\n    * \"Returns line number information for the method, if present. The line\n@@ -125,8 +125,8 @@ public Class getDeclaringClass()\n    * @return the line table\n    * @throws JdwpException\n    */\n-  public LineTable getLineTable()\n-  { return null; }\n+  public native LineTable getLineTable()\n+    throws JdwpException;\n \n   /**\n    * \"Returns variable information for the method. The variable table\n@@ -137,8 +137,8 @@ public LineTable getLineTable()\n    * @return the variable table\n    * @throws JdwpException\n    */\n-  public VariableTable getVariableTable()\n-  { return null; }\n+  public native VariableTable getVariableTable()\n+    throws JdwpException;\n \n   /**\n    * Returns a string representation of this method (not"}, {"sha": "d4985bf2f2ec80b33439fa0b48b5be4ea1c37a3d", "filename": "libjava/gnu/classpath/jdwp/VMVirtualMachine.java", "status": "modified", "additions": 36, "deletions": 29, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.java?ref=27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81", "patch": "@@ -62,7 +62,8 @@\n    *\n    * @param  thread  the thread to suspend\n    */\n-  public static void suspendThread (Thread thread) { }\n+  public static native void suspendThread (Thread thread)\n+    throws JdwpException;\n \n   /**\n    * Suspend all threads\n@@ -114,7 +115,8 @@ public static void suspendAllThreads ()\n    *\n    * @param  thread  the thread to resume\n    */\n-  public static void resumeThread (Thread thread) { }\n+  public static native void resumeThread (Thread thread)\n+    throws JdwpException;\n \n   /**\n    * Resume all threads. This simply decrements the thread's\n@@ -164,17 +166,20 @@ public static void resumeAllThreads ()\n    * @param  thread  the thread whose suspend count is desired\n    * @return the number of times the thread has been suspended\n    */\n-  public static int getSuspendCount (Thread thread) { return -1; }\n+  public static native int getSuspendCount (Thread thread)\n+    throws JdwpException;\n  \n   /**\n    * Returns a count of the number of loaded classes in the VM\n    */\n-  public static int getAllLoadedClassesCount () { return -1; }\n+  public static native int getAllLoadedClassesCount ()\n+    throws JdwpException;\n \n   /**\n    * Returns an iterator over all the loaded classes in the VM\n    */\n-  public static Iterator getAllLoadedClasses () { return null; }\n+  public static native Iterator getAllLoadedClasses ()\n+    throws JdwpException;\n \n   /**\n    * Returns the status of the given class\n@@ -183,7 +188,8 @@ public static void resumeAllThreads ()\n    * @return a flag containing the class's status\n    * @see JdwpConstants.ClassStatus\n    */\n-  public static int getClassStatus (Class clazz) { return -1; }\n+  public static native int getClassStatus (Class clazz)\n+    throws JdwpException;\n \n   /**\n    * Returns all of the methods defined in the given class. This\n@@ -192,8 +198,8 @@ public static void resumeAllThreads ()\n    * @param  klass  the class whose methods are desired\n    * @return an array of virtual machine methods\n    */\n-  public static VMMethod[] getAllClassMethods (Class klass)\n-  { return null; }\n+  public static native VMMethod[] getAllClassMethods (Class klass)\n+    throws JdwpException;\n \n   /**\n    * A factory method for getting valid virtual machine methods\n@@ -206,8 +212,8 @@ public static VMMethod[] getAllClassMethods (Class klass)\n    *           in the class\n    * @throws JdwpException for any other error\n    */\n-  public static VMMethod getClassMethod(Class klass, long id)\n-  { return null; }\n+  public static native VMMethod getClassMethod(Class klass, long id)\n+    throws JdwpException;\n \n   /**\n    * Returns the thread's call stack\n@@ -217,9 +223,9 @@ public static VMMethod getClassMethod(Class klass, long id)\n    * @param  length  number of frames to return (-1 for all frames)\n    * @return a list of frames\n    */\n-  public static ArrayList getFrames (Thread thread, int strart,\n+  public static native ArrayList getFrames (Thread thread, int start,\n \t\t\t\t\t    int length)\n-  { return null; }\n+    throws JdwpException;\n \n   /**\n    * Returns the frame for a given thread with the frame ID in\n@@ -231,17 +237,17 @@ public static ArrayList getFrames (Thread thread, int strart,\n    * @param  bb      buffer containing the frame's ID\n    * @return the desired frame\n    */\n-  public static VMFrame getFrame (Thread thread, ByteBuffer bb)\n-  { return null; }\n+  public static native VMFrame getFrame (Thread thread, ByteBuffer bb)\n+    throws JdwpException;\n \n   /**\n    * Returns the number of frames in the thread's stack\n    *\n    * @param  thread  the thread for which to get a frame count\n    * @return the number of frames in the thread's stack\n    */\n-  public static int getFrameCount (Thread thread)\n-  { return -1; }\n+  public static native int getFrameCount (Thread thread)\n+    throws JdwpException;\n \n \n   /**\n@@ -251,8 +257,8 @@ public static int getFrameCount (Thread thread)\n    * @return integer status of the thread\n    * @see JdwpConstants.ThreadStatus\n    */\n-  public static int getThreadStatus (Thread thread)\n-  { return -1; }\n+  public static native int getThreadStatus (Thread thread)\n+    throws JdwpException;\n \n   /**\n    * Returns a list of all classes which this class loader has been\n@@ -261,8 +267,8 @@ public static int getThreadStatus (Thread thread)\n    * @param  cl  the class loader\n    * @return a list of all visible classes\n    */\n-  public static ArrayList getLoadRequests (ClassLoader cl)\n-  { return null; }\n+  public static native ArrayList getLoadRequests (ClassLoader cl)\n+    throws JdwpException;\n \n   /**\n    * Executes a method in the virtual machine\n@@ -276,11 +282,11 @@ public static ArrayList getLoadRequests (ClassLoader cl)\n    *                     (instance methods only) \"\n    * @return a result object containing the results of the invocation\n    */\n-  public static MethodResult executeMethod (Object obj, Thread thread,\n+  public static native MethodResult executeMethod (Object obj, Thread thread,\n \t\t\t\t\t    Class clazz, Method method,\n \t\t\t\t\t    Object[] values,\n \t\t\t\t\t    boolean nonVirtual)\n-  { return null; }\n+    throws JdwpException;\n \n   /**\n    * \"Returns the name of source file in which a reference type was declared\"\n@@ -289,8 +295,8 @@ public static MethodResult executeMethod (Object obj, Thread thread,\n    * @return a string containing the source file name; \"no path information\n    *         for the file is included\"\n    */\n-  public static String getSourceFile (Class clazz)\n-  { return null; }\n+  public static native String getSourceFile (Class clazz)\n+    throws JdwpException;\n \n   /**\n    * Register a request from the debugger\n@@ -301,22 +307,23 @@ public static String getSourceFile (Class clazz)\n    * or do some internal work to set up the event notification (useful for\n    * execution-related events like breakpoints, single-stepping, etc.).\n    */\n-  public static void registerEvent (EventRequest request)\n-  { }\n+  public static native void registerEvent (EventRequest request)\n+    throws JdwpException;\n \n   /**\n    * Unregisters the given request\n    *\n    * @param  request  the request to unregister\n    */\n-  public static void unregisterEvent (EventRequest request)\n-  { }\n+  public static native void unregisterEvent (EventRequest request)\n+    throws JdwpException;\n \n \n   /**\n    * Clear all events of the given kind\n    *\n    * @param  kind  the type of events to clear\n    */\n-  public static void clearEvents (byte kind) { }\n+  public static native void clearEvents (byte kind)\n+    throws JdwpException;\n }"}, {"sha": "de3b844f4a4c521043d86b9778d0aa23eaae915e", "filename": "libjava/gnu/classpath/jdwp/natVMFrame.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMFrame.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMFrame.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMFrame.cc?ref=27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81", "patch": "@@ -0,0 +1,26 @@\n+// natFrame.cc -- native support for VMFrame.java\n+\n+/* Copyright (C) 2006 Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License. Please consult the file \"LIBGCJ_LICENSE\" for\n+details. */\n+\n+#include <gcj/cni.h>\n+\n+#include <gnu/classpath/jdwp/VMFrame.h>\n+\n+using namespace java::lang;\n+\n+Object*\n+gnu::classpath::jdwp::VMFrame::getValue (jint slot)\n+{\n+  return 0;\n+}\n+\n+void\n+gnu::classpath::jdwp::VMFrame::setValue (jint slot, Object* value)\n+{\n+}"}, {"sha": "eb1d6fda0c2443b1c1a461fd156a536a26d14d12", "filename": "libjava/gnu/classpath/jdwp/natVMMethod.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMMethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMMethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMMethod.cc?ref=27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81", "patch": "@@ -0,0 +1,47 @@\n+// natVMMethod.cc -- native support for VMMethod\n+\n+/* Copyright (C) 2006 Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+#include <gcj/cni.h>\n+\n+#include <gnu/classpath/jdwp/VMMethod.h>\n+#include <gnu/classpath/jdwp/util/LineTable.h>\n+#include <gnu/classpath/jdwp/util/VariableTable.h>\n+\n+java::lang::String*\n+gnu::classpath::jdwp::VMMethod::getName ()\n+{\n+  return NULL;\n+}\n+\n+java::lang::String*\n+gnu::classpath::jdwp::VMMethod::getSignature ()\n+{\n+  return NULL;\n+}\n+\n+jint\n+gnu::classpath::jdwp::VMMethod::getModifiers ()\n+{\n+  return 0;\n+}\n+\n+gnu::classpath::jdwp::util::LineTable*\n+gnu::classpath::jdwp::VMMethod::getLineTable ()\n+{\n+  return NULL;\n+}\n+\n+\n+gnu::classpath::jdwp::util::VariableTable*\n+gnu::classpath::jdwp::VMMethod::getVariableTable ()\n+{\n+  return NULL;\n+}"}, {"sha": "ef4605bedbfb088893b669bf292fb51e31659400", "filename": "libjava/gnu/classpath/jdwp/natVMVirtualMachine.cc", "status": "added", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc?ref=27d8ff9b8349ec64ebeeb7ccc6c4516580bf3a81", "patch": "@@ -0,0 +1,240 @@\n+// natVMVirtualMachine.cc - native support for VMVirtualMachine\n+\n+/* Copyright (C) 2006 Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License. Please consult the file \"LIBGCJ_LICENSE\" for\n+details. */\n+\n+#include <config.h>\n+#include <gcj/cni.h>\n+\n+#include <java/lang/Class.h>\n+#include <java/lang/ClassLoader.h>\n+#include <java/lang/Thread.h>\n+#include <java/nio/ByteBuffer.h>\n+#include <java/util/ArrayList.h>\n+#include <java/util/Iterator.h>\n+\n+#include <gnu/classpath/jdwp/VMFrame.h>\n+#include <gnu/classpath/jdwp/VMMethod.h>\n+#include <gnu/classpath/jdwp/VMVirtualMachine.h>\n+#include <gnu/classpath/jdwp/event/EventRequest.h>\n+#include <gnu/classpath/jdwp/util/MethodResult.h>\n+\n+using namespace java::lang;\n+using namespace gnu::classpath::jdwp::event;\n+using namespace gnu::classpath::jdwp::util;\n+\n+void\n+gnu::classpath::jdwp::VMVirtualMachine ::suspendThread (Thread *thread)\n+{\n+}\n+\n+void\n+gnu::classpath::jdwp::VMVirtualMachine::resumeThread (Thread *thread)\n+{\n+}\n+\n+jint\n+gnu::classpath::jdwp::VMVirtualMachine::getSuspendCount (Thread *thread)\n+{\n+  return 0;\n+}\n+\n+void\n+gnu::classpath::jdwp::VMVirtualMachine::registerEvent (EventRequest *request)\n+{\n+  switch (request->getEventKind ())\n+    {\n+    case EventRequest::EVENT_SINGLE_STEP:\n+      break;\n+\n+    case EventRequest::EVENT_BREAKPOINT:\n+      break;\n+\n+    case EventRequest::EVENT_FRAME_POP:\n+      break;\n+\n+    case EventRequest::EVENT_EXCEPTION:\n+      break;\n+\n+    case EventRequest::EVENT_USER_DEFINED:\n+      break;\n+\n+    case EventRequest::EVENT_THREAD_START:\n+      break;\n+\n+    case EventRequest::EVENT_THREAD_END:\n+      break;\n+\n+    case EventRequest::EVENT_CLASS_PREPARE:\n+      break;\n+\n+    case EventRequest::EVENT_CLASS_LOAD:\n+      break;\n+\n+    case EventRequest::EVENT_CLASS_UNLOAD:\n+      break;\n+\n+    case EventRequest::EVENT_FIELD_ACCESS:\n+      break;\n+\n+    case EventRequest::EVENT_FIELD_MODIFY:\n+      break;\n+\n+    case EventRequest::EVENT_METHOD_ENTRY:\n+      break;\n+\n+    case EventRequest::EVENT_METHOD_EXIT:\n+      break;\n+\n+    case EventRequest::EVENT_VM_INIT:\n+      break;\n+      \n+    case EventRequest::EVENT_VM_DEATH:\n+      break;\n+    }\n+}\n+\n+void\n+gnu::classpath::jdwp::VMVirtualMachine::unregisterEvent (EventRequest *request)\n+{\n+  switch (request->getEventKind ())\n+    {\n+    case EventRequest::EVENT_SINGLE_STEP:\n+      break;\n+\n+    case EventRequest::EVENT_BREAKPOINT:\n+      break;\n+\n+    case EventRequest::EVENT_FRAME_POP:\n+      break;\n+\n+    case EventRequest::EVENT_EXCEPTION:\n+      break;\n+\n+    case EventRequest::EVENT_USER_DEFINED:\n+      break;\n+\n+    case EventRequest::EVENT_THREAD_START:\n+      break;\n+\n+    case EventRequest::EVENT_THREAD_END:\n+      break;\n+\t\n+    case EventRequest::EVENT_CLASS_PREPARE:\n+      break;\n+\n+    case EventRequest::EVENT_CLASS_LOAD:\n+      break;\n+\n+    case EventRequest::EVENT_CLASS_UNLOAD:\n+      break;\n+\n+    case EventRequest::EVENT_FIELD_ACCESS:\n+      break;\n+\n+    case EventRequest::EVENT_FIELD_MODIFY:\n+      break;\n+\n+    case EventRequest::EVENT_METHOD_ENTRY:\n+      break;\n+\n+    case EventRequest::EVENT_METHOD_EXIT:\n+      break;\n+\n+    case EventRequest::EVENT_VM_INIT:\n+      break;\n+      \n+    case EventRequest::EVENT_VM_DEATH:\n+      break;\n+    }\n+}\n+\n+void\n+gnu::classpath::jdwp::VMVirtualMachine::clearEvents (jbyte kind)\n+{\n+}\n+\n+jint\n+gnu::classpath::jdwp::VMVirtualMachine::getAllLoadedClassesCount (void)\n+{\n+  return 0;\n+}\n+\n+java::util::Iterator *\n+gnu::classpath::jdwp::VMVirtualMachine::getAllLoadedClasses (void)\n+{\n+  return NULL;\n+}\n+\n+jint\n+gnu::classpath::jdwp::VMVirtualMachine::getClassStatus (jclass klass)\n+{\n+  return 0;\n+}\n+\n+JArray<gnu::classpath::jdwp::VMMethod *> *\n+gnu::classpath::jdwp::VMVirtualMachine::getAllClassMethods (jclass klass)\n+{\n+  return NULL;\n+}\n+\n+gnu::classpath::jdwp::VMMethod *\n+gnu::classpath::jdwp::VMVirtualMachine::getClassMethod (jclass klass, jlong id)\n+{\n+  return NULL;\n+}\n+\n+java::util::ArrayList *\n+gnu::classpath::jdwp::VMVirtualMachine::getFrames (Thread *thread,\n+\t\t\t\t\t\t   jint start,\n+\t\t\t\t\t\t   jint length)\n+{\n+  return NULL;\n+}\n+\n+gnu::classpath::jdwp::VMFrame *\n+gnu::classpath::jdwp::VMVirtualMachine::getFrame (Thread *thread,\n+\t\t\t\t\t\t  ::java::nio::ByteBuffer *bb)\n+{\n+  return NULL;\n+}\n+\n+jint\n+gnu::classpath::jdwp::VMVirtualMachine::getFrameCount (Thread *thread)\n+{\n+  return 0;\n+}\n+\n+jint\n+gnu::classpath::jdwp::VMVirtualMachine::getThreadStatus (Thread *thread)\n+{\n+  return 0;\n+}\n+\n+java::util::ArrayList *\n+gnu::classpath::jdwp::VMVirtualMachine::getLoadRequests (ClassLoader *cl)\n+{\n+  return NULL;\n+}\n+\n+MethodResult *\n+gnu::classpath::jdwp::VMVirtualMachine::executeMethod (jobject obj,\n+\t\t\t\t\t\t       Thread *thread,\n+\t\t\t\t\t\t       jclass clazz,\n+\t\t\t\t\t\t       reflect::Method *method,\n+\t\t\t\t\t\t       jobjectArray values,\n+\t\t\t\t\t\t       jboolean nonVirtual)\n+{\n+  return NULL;\n+}\n+\n+jstring\n+gnu::classpath::jdwp::VMVirtualMachine::getSourceFile (jclass clazz)\n+{\n+  return NULL;\n+}"}]}