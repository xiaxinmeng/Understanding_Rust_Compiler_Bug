{"sha": "9b9e81a0a9cef8e9053339f92f9f1be3a13890ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI5ZTgxYTBhOWNlZjhlOTA1MzMzOWY5MmY5ZjFiZTNhMTM4OTBlYQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2011-07-23T03:17:11Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2011-07-23T03:17:11Z"}, "message": "move.h (move, forward): Mark constexpr.\n\n2011-07-22  Benjamin Kosnik  <bkoz@redhat.com>\n\t    Daniel Krugler  <daniel.kruegler@googlemail.com>\n\n\t* include/bits/move.h (move, forward): Mark constexpr.\n\t* include/bits/stl_pair.h (pair): Mark move ctors constexpr.\n\t* testsuite/20_util/pair/make_pair/constexpr.cc: New.\n\t* testsuite/20_util/pair/cons/constexpr.cc: Add tests.\n\n\nCo-Authored-By: Daniel Krugler <daniel.kruegler@googlemail.com>\n\nFrom-SVN: r176672", "tree": {"sha": "91438aa522099078f99fff44746880494507cf5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91438aa522099078f99fff44746880494507cf5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b9e81a0a9cef8e9053339f92f9f1be3a13890ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b9e81a0a9cef8e9053339f92f9f1be3a13890ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b9e81a0a9cef8e9053339f92f9f1be3a13890ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b9e81a0a9cef8e9053339f92f9f1be3a13890ea/comments", "author": null, "committer": null, "parents": [{"sha": "15c2ccbac51d3e17c4524946bbf1ee44c6e7f811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c2ccbac51d3e17c4524946bbf1ee44c6e7f811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15c2ccbac51d3e17c4524946bbf1ee44c6e7f811"}], "stats": {"total": 94, "additions": 80, "deletions": 14}, "files": [{"sha": "d76a2daecaffa4c0f260183b6a9059444547f917", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b9e81a0a9cef8e9053339f92f9f1be3a13890ea/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b9e81a0a9cef8e9053339f92f9f1be3a13890ea/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9b9e81a0a9cef8e9053339f92f9f1be3a13890ea", "patch": "@@ -1,3 +1,11 @@\n+2011-07-22  Benjamin Kosnik  <bkoz@redhat.com>\n+\t    Daniel Krugler  <daniel.kruegler@googlemail.com>\n+\n+\t* include/bits/move.h (move, forward): Mark constexpr.\n+\t* include/bits/stl_pair.h (pair): Mark move ctors constexpr.\n+\t* testsuite/20_util/pair/make_pair/constexpr.cc: New.\n+\t* testsuite/20_util/pair/cons/constexpr.cc: Add tests.\n+\n 2011-07-22  Ian Lance Taylor  <iant@google.com>\n \n \t* fragment.am (CONFIG_CXXFLAGS): Add -frandom-seed."}, {"sha": "28d2ae1b3ae6daeac929b83820c5cbd7dbf0ae15", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b9e81a0a9cef8e9053339f92f9f1be3a13890ea/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b9e81a0a9cef8e9053339f92f9f1be3a13890ea/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=9b9e81a0a9cef8e9053339f92f9f1be3a13890ea", "patch": "@@ -58,12 +58,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   \n   /// forward (as per N3143)\n   template<typename _Tp>\n-    inline _Tp&&\n+    inline constexpr _Tp&&\n     forward(typename std::remove_reference<_Tp>::type& __t) noexcept\n     { return static_cast<_Tp&&>(__t); }\n \n   template<typename _Tp>\n-    inline _Tp&&\n+    inline constexpr _Tp&&\n     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept\n     {\n       static_assert(!std::is_lvalue_reference<_Tp>::value, \"template argument\"\n@@ -78,7 +78,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @return Same, moved.\n   */\n   template<typename _Tp>\n-    inline typename std::remove_reference<_Tp>::type&&\n+    inline constexpr typename std::remove_reference<_Tp>::type&&\n     move(_Tp&& __t) noexcept\n     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n "}, {"sha": "abd8bd81587eeaa7c94abe3bee194c5a98d686ae", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b9e81a0a9cef8e9053339f92f9f1be3a13890ea/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b9e81a0a9cef8e9053339f92f9f1be3a13890ea/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=9b9e81a0a9cef8e9053339f92f9f1be3a13890ea", "patch": "@@ -128,24 +128,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // DR 811.\n       template<class _U1, class = typename\n \t       enable_if<is_convertible<_U1, _T1>::value>::type>\n-\tpair(_U1&& __x, const _T2& __y)\n+\tconstexpr pair(_U1&& __x, const _T2& __y)\n \t: first(std::forward<_U1>(__x)), second(__y) { }\n \n       template<class _U2, class = typename\n \t       enable_if<is_convertible<_U2, _T2>::value>::type>\n-\tpair(const _T1& __x, _U2&& __y)\n+\tconstexpr pair(const _T1& __x, _U2&& __y)\n \t: first(__x), second(std::forward<_U2>(__y)) { }\n \n       template<class _U1, class _U2, class = typename\n \t       enable_if<__and_<is_convertible<_U1, _T1>,\n \t\t\t\tis_convertible<_U2, _T2>>::value>::type>\n-\tpair(_U1&& __x, _U2&& __y)\n+\tconstexpr pair(_U1&& __x, _U2&& __y)\n \t: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }\n \n       template<class _U1, class _U2, class = typename\n \t       enable_if<__and_<is_convertible<_U1, _T1>,\n \t\t\t\tis_convertible<_U2, _T2>>::value>::type>\n-\tpair(pair<_U1, _U2>&& __p)\n+\tconstexpr pair(pair<_U1, _U2>&& __p)\n \t: first(std::forward<_U1>(__p.first)),\n \t  second(std::forward<_U2>(__p.second)) { }\n \n@@ -275,8 +275,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   // NB: DR 706.\n   template<class _T1, class _T2>\n-    inline pair<typename __decay_and_strip<_T1>::__type,\n-\t\ttypename __decay_and_strip<_T2>::__type>\n+    inline constexpr pair<typename __decay_and_strip<_T1>::__type,\n+\t\t\t  typename __decay_and_strip<_T2>::__type>\n     make_pair(_T1&& __x, _T2&& __y)\n     {\n       typedef typename __decay_and_strip<_T1>::__type __ds_type1;"}, {"sha": "9b812390d99482033a10fe769f4965d89c28c5ed", "filename": "libstdc++-v3/testsuite/20_util/pair/cons/constexpr.cc", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b9e81a0a9cef8e9053339f92f9f1be3a13890ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b9e81a0a9cef8e9053339f92f9f1be3a13890ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fconstexpr.cc?ref=9b9e81a0a9cef8e9053339f92f9f1be3a13890ea", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,17 +23,33 @@\n \n int main()\n {\n+  typedef std::pair<int, int> pair_type;\n+\n   __gnu_test::constexpr_default_constructible test1;\n-  test1.operator()<std::pair<int, int>>();\n+  test1.operator()<pair_type>();\n \n   __gnu_test::constexpr_single_value_constructible test2;\n-  test2.operator()<std::pair<int, int>, std::pair<int, int>>();\n-  test2.operator()<std::pair<int, int>, std::pair<short, short>>();\n+  test2.operator()<pair_type, pair_type>();\n+  test2.operator()<pair_type, std::pair<short, short>>();\n \n   // test 3\n   const int i1(129);\n   const int i2(6);\n-  constexpr std::pair<int, int> p3(i1, i2);\n+  constexpr pair_type p0(i1, i2);\n+\n+  // test 4\n+  constexpr int i(999);\n+  constexpr pair_type p1 { 44, 90 };\n+  constexpr pair_type p2 { std::move(p1.first),  i };\n+  constexpr pair_type p3 { i, std::move(p1.second) };\n+\n+  constexpr pair_type p5 { 444, 904 };\n+  constexpr pair_type p6 { std::move(p5.first), std::move(p5.second) };\n+\n+  constexpr std::pair<char, char> p8 { 'a', 'z' };\n+  constexpr pair_type p9(std::move(p8));\n+\n+  constexpr pair_type p10(std::move(p0));\n \n   return 0;\n }"}, {"sha": "4d26f50cb016d68bb19bfe446ebcdb8e8d22ed8c", "filename": "libstdc++-v3/testsuite/20_util/pair/make_pair/constexpr.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b9e81a0a9cef8e9053339f92f9f1be3a13890ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fmake_pair%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b9e81a0a9cef8e9053339f92f9f1be3a13890ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fmake_pair%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fmake_pair%2Fconstexpr.cc?ref=9b9e81a0a9cef8e9053339f92f9f1be3a13890ea", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on pair, and also vector. If the implementation \n+// changes this test may begin to fail.\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+void\n+test1()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::pair<int, float> pair_type;\n+  constexpr pair_type p1 = std::make_pair(22, 22.222);\n+}\n+\n+int \n+main() \n+{\n+  test1();\n+  return 0;\n+}"}]}