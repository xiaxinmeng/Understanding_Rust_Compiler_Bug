{"sha": "9335d80ab9e0ebdf8a380445a1b28613bbb37e1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMzNWQ4MGFiOWUwZWJkZjhhMzgwNDQ1YTFiMjg2MTNiYmIzN2UxZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-06-10T19:27:12Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-06-10T19:27:12Z"}, "message": "fstream.tcc (overflow): According to 27.5.2.4.5, overflow() returns not_eof(eof()).\n\n2003-06-10  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/fstream.tcc (overflow): According to\n\t27.5.2.4.5, overflow() returns not_eof(eof()).\n\t* testsuite/27_io/basic_filebuf/overflow/char/2.cc: New.\n\t* testsuite/27_io/basic_filebuf/overflow/char/2-unbuf.cc: Ditto.\n\n2003-06-10  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/fstream.tcc (_M_underflow): Check overflow return\n\tvalue; tweak slightly.\n\nFrom-SVN: r67726", "tree": {"sha": "5d928134ddd43b2d1cd1ab110cf0effb3cd36eec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d928134ddd43b2d1cd1ab110cf0effb3cd36eec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9335d80ab9e0ebdf8a380445a1b28613bbb37e1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9335d80ab9e0ebdf8a380445a1b28613bbb37e1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9335d80ab9e0ebdf8a380445a1b28613bbb37e1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9335d80ab9e0ebdf8a380445a1b28613bbb37e1e/comments", "author": null, "committer": null, "parents": [{"sha": "346eeb157eed29835cbe240fcd0f68c58f3decce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346eeb157eed29835cbe240fcd0f68c58f3decce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/346eeb157eed29835cbe240fcd0f68c58f3decce"}], "stats": {"total": 133, "additions": 126, "deletions": 7}, "files": [{"sha": "f0f89ca0848df1b6c8dc3d6ba9038cf07f7ab1e2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9335d80ab9e0ebdf8a380445a1b28613bbb37e1e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9335d80ab9e0ebdf8a380445a1b28613bbb37e1e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9335d80ab9e0ebdf8a380445a1b28613bbb37e1e", "patch": "@@ -1,3 +1,15 @@\n+2003-06-10  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/fstream.tcc (overflow): According to\n+\t27.5.2.4.5, overflow() returns not_eof(eof()).\n+\t* testsuite/27_io/basic_filebuf/overflow/char/2.cc: New.\n+\t* testsuite/27_io/basic_filebuf/overflow/char/2-unbuf.cc: Ditto.\n+\n+2003-06-10  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/fstream.tcc (_M_underflow): Check overflow return\n+\tvalue; tweak slightly.\n+\n 2003-06-09  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* include/bits/fstream.tcc (_M_underflow): Do not special"}, {"sha": "46dbdb2170da76820208e11efc80ebc62b436cc9", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9335d80ab9e0ebdf8a380445a1b28613bbb37e1e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9335d80ab9e0ebdf8a380445a1b28613bbb37e1e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=9335d80ab9e0ebdf8a380445a1b28613bbb37e1e", "patch": "@@ -193,9 +193,6 @@ namespace std\n \t  // fileops happen...\n \t  _M_destroy_pback();\n \n-\t  const size_t __buflen = this->_M_buf_size > 1\n-\t                          ? this->_M_buf_size - 1 : 1;\n-\n \t  if (this->_M_in_cur < this->_M_in_end)\n \t    {\n \t      __ret = traits_type::to_int_type(*this->_M_in_cur);\n@@ -205,10 +202,13 @@ namespace std\n \t    }\n \n \t  // Sync internal and external buffers.\n-\t  if (__testout && this->_M_out_beg < this->_M_out_lim)\n-\t    this->overflow();\n+\t  if (__testout && this->_M_out_beg < this->_M_out_lim\n+\t      && traits_type::eq_int_type(this->overflow(), __ret))\n+\t    return __ret;\n \t  \n \t  // Get and convert input sequence.\n+\t  const size_t __buflen = this->_M_buf_size > 1\n+\t                          ? this->_M_buf_size - 1 : 1;\n \t  streamsize __elen = 0;\n \t  streamsize __ilen = 0;\n \t  if (__check_facet(_M_codecvt).always_noconv())\n@@ -348,8 +348,8 @@ namespace std\n \t    {\n \t      // Unbuffered.\n \t      char_type __conv = traits_type::to_char_type(__c);\n-\t      if (!__testeof && _M_convert_to_external(&__conv, 1))\n-\t\t__ret = __c;\n+\t      if (__testeof || _M_convert_to_external(&__conv, 1))\n+\t\t__ret = traits_type::not_eof(__c);\n \t    }\n \t}\n       _M_last_overflowed = true;\t"}, {"sha": "9c5da4485cf65fa7c558fdd893ba6cc9783db836", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/overflow/char/2-unbuf.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9335d80ab9e0ebdf8a380445a1b28613bbb37e1e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F2-unbuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9335d80ab9e0ebdf8a380445a1b28613bbb37e1e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F2-unbuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F2-unbuf.cc?ref=9335d80ab9e0ebdf8a380445a1b28613bbb37e1e", "patch": "@@ -0,0 +1,54 @@\n+// 2003-06-10  Paolo Carlini  <pcarlini@unitus.it>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char name_08[] = \"filebuf_virtuals-8.txt\"; // empty file, need to create\n+\n+class OverBuf : public std::filebuf\n+{\n+public:\n+  int_type pub_overflow(int_type c = traits_type::eof())\n+  { return std::filebuf::overflow(c); }\n+};\n+\n+// According to 27.5.2.4.5 filebuf::overflow() returns not_eof(eof()).\n+void test01()\n+{\n+  using namespace std;\n+  bool test = true;\n+  typedef OverBuf::traits_type  traits_type;\n+\n+  OverBuf fb;\n+  fb.pubsetbuf(0, 0);\n+  fb.open(name_08, ios_base::out | ios_base::trunc);\n+  \n+  VERIFY( fb.pub_overflow() == traits_type::not_eof(traits_type::eof()) );\n+  fb.close();\n+}\n+\n+main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4984602703aab9320a2b34cf9c478ba1ff5eb3d1", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/overflow/char/2.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9335d80ab9e0ebdf8a380445a1b28613bbb37e1e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9335d80ab9e0ebdf8a380445a1b28613bbb37e1e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fchar%2F2.cc?ref=9335d80ab9e0ebdf8a380445a1b28613bbb37e1e", "patch": "@@ -0,0 +1,53 @@\n+// 2003-06-10  Paolo Carlini  <pcarlini@unitus.it>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char name_08[] = \"filebuf_virtuals-8.txt\"; // empty file, need to create\n+\n+class OverBuf : public std::filebuf\n+{\n+public:\n+  int_type pub_overflow(int_type c = traits_type::eof())\n+  { return std::filebuf::overflow(c); }\n+};\n+\n+// According to 27.5.2.4.5 filebuf::overflow() returns not_eof(eof()).\n+void test01()\n+{\n+  using namespace std;\n+  bool test = true;\n+  typedef OverBuf::traits_type  traits_type;\n+\n+  OverBuf fb;\n+  fb.open(name_08, ios_base::out | ios_base::trunc);\n+  \n+  VERIFY( fb.pub_overflow() == traits_type::not_eof(traits_type::eof()) );\n+  fb.close();\n+}\n+\n+main() \n+{\n+  test01();\n+  return 0;\n+}"}]}