{"sha": "39a6a24334f95e047dcd7e0b27c2f27f6340bdc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlhNmEyNDMzNGY5NWUwNDdkY2Q3ZTBiMjdjMmYyN2Y2MzQwYmRjNg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-07-19T10:47:23Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-07-19T10:47:23Z"}, "message": "i386: Change indirect_return to function type attribute\n\nIn\n\nstruct ucontext;\ntypedef struct ucontext ucontext_t;\n\nextern int (*bar) (ucontext_t *__restrict __oucp,\n                   const ucontext_t *__restrict __ucp)\n  __attribute__((__indirect_return__));\n\nextern int res;\n\nvoid\nfoo (ucontext_t *oucp, ucontext_t *ucp)\n{\n  res = bar (oucp, ucp);\n}\n\nbar() may return via indirect branch.  This patch changes indirect_return\nto type attribute to allow indirect_return attribute on variable or type\nof function pointer so that ENDBR can be inserted after call to bar().\n\ngcc/\n\n\tPR target/86560\n\t* config/i386/i386.c (rest_of_insert_endbranch): Lookup\n\tindirect_return as function type attribute.\n\t(ix86_attribute_table): Change indirect_return to function\n\ttype attribute.\n\t* doc/extend.texi: Update indirect_return attribute.\n\ngcc/testsuite/\n\n\tPR target/86560\n\t* gcc.target/i386/pr86560-1.c: New test.\n\t* gcc.target/i386/pr86560-2.c: Likewise.\n\t* gcc.target/i386/pr86560-3.c: Likewise.\n\nFrom-SVN: r262877", "tree": {"sha": "f141ecfb1fd3de14a2fdecf3ec8f06e0d7e8793b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f141ecfb1fd3de14a2fdecf3ec8f06e0d7e8793b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39a6a24334f95e047dcd7e0b27c2f27f6340bdc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a6a24334f95e047dcd7e0b27c2f27f6340bdc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39a6a24334f95e047dcd7e0b27c2f27f6340bdc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a6a24334f95e047dcd7e0b27c2f27f6340bdc6/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e0c27d52dd783affbc95bdb53630b35ae044e620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c27d52dd783affbc95bdb53630b35ae044e620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0c27d52dd783affbc95bdb53630b35ae044e620"}], "stats": {"total": 93, "additions": 83, "deletions": 10}, "files": [{"sha": "78b8d39ab2b7a215888a4ffb70c3a75649a9211d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a6a24334f95e047dcd7e0b27c2f27f6340bdc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a6a24334f95e047dcd7e0b27c2f27f6340bdc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39a6a24334f95e047dcd7e0b27c2f27f6340bdc6", "patch": "@@ -1,3 +1,12 @@\n+2018-07-19  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/86560\n+\t* config/i386/i386.c (rest_of_insert_endbranch): Lookup\n+\tindirect_return as function type attribute.\n+\t(ix86_attribute_table): Change indirect_return to function\n+\ttype attribute.\n+\t* doc/extend.texi: Update indirect_return attribute.\n+\n 2018-07-19  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* wide-int.h (widest2_int): New."}, {"sha": "ee409cfe7e486c2524266c4ef14ef6e3de87a7ba", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a6a24334f95e047dcd7e0b27c2f27f6340bdc6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a6a24334f95e047dcd7e0b27c2f27f6340bdc6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=39a6a24334f95e047dcd7e0b27c2f27f6340bdc6", "patch": "@@ -2635,16 +2635,23 @@ rest_of_insert_endbranch (void)\n \t\t{\n \t\t  rtx call = get_call_rtx_from (insn);\n \t\t  rtx fnaddr = XEXP (call, 0);\n+\t\t  tree fndecl = NULL_TREE;\n \n \t\t  /* Also generate ENDBRANCH for non-tail call which\n \t\t     may return via indirect branch.  */\n-\t\t  if (MEM_P (fnaddr)\n-\t\t      && GET_CODE (XEXP (fnaddr, 0)) == SYMBOL_REF)\n+\t\t  if (GET_CODE (XEXP (fnaddr, 0)) == SYMBOL_REF)\n+\t\t    fndecl = SYMBOL_REF_DECL (XEXP (fnaddr, 0));\n+\t\t  if (fndecl == NULL_TREE)\n+\t\t    fndecl = MEM_EXPR (fnaddr);\n+\t\t  if (fndecl\n+\t\t      && TREE_CODE (TREE_TYPE (fndecl)) != FUNCTION_TYPE\n+\t\t      && TREE_CODE (TREE_TYPE (fndecl)) != METHOD_TYPE)\n+\t\t    fndecl = NULL_TREE;\n+\t\t  if (fndecl && TYPE_ARG_TYPES (TREE_TYPE (fndecl)))\n \t\t    {\n-\t\t      tree fndecl = SYMBOL_REF_DECL (XEXP (fnaddr, 0));\n-\t\t      if (fndecl\n-\t\t\t  && lookup_attribute (\"indirect_return\",\n-\t\t\t\t\t       DECL_ATTRIBUTES (fndecl)))\n+\t\t      tree fntype = TREE_TYPE (fndecl);\n+\t\t      if (lookup_attribute (\"indirect_return\",\n+\t\t\t\t\t    TYPE_ATTRIBUTES (fntype)))\n \t\t\tneed_endbr = true;\n \t\t    }\n \t\t}\n@@ -45920,8 +45927,8 @@ static const struct attribute_spec ix86_attribute_table[] =\n     ix86_handle_fndecl_attribute, NULL },\n   { \"function_return\", 1, 1, true, false, false, false,\n     ix86_handle_fndecl_attribute, NULL },\n-  { \"indirect_return\", 0, 0, true, false, false, false,\n-    ix86_handle_fndecl_attribute, NULL },\n+  { \"indirect_return\", 0, 0, false, true, true, false,\n+    NULL, NULL },\n \n   /* End element.  */\n   { NULL, 0, 0, false, false, false, false, NULL, NULL }"}, {"sha": "7b471ec40f701ade4dc8f15a0303885e697eb789", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a6a24334f95e047dcd7e0b27c2f27f6340bdc6/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a6a24334f95e047dcd7e0b27c2f27f6340bdc6/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=39a6a24334f95e047dcd7e0b27c2f27f6340bdc6", "patch": "@@ -5889,8 +5889,9 @@ foo (void)\n @item indirect_return\n @cindex @code{indirect_return} function attribute, x86\n \n-The @code{indirect_return} attribute on a function is used to inform\n-the compiler that the function may return via indirect branch.\n+The @code{indirect_return} attribute can be applied to a function,\n+as well as variable or type of function pointer to inform the\n+compiler that the function may return via indirect branch.\n \n @end table\n "}, {"sha": "8c60524cdee100cc2fcd4b173be4b8e779b03903", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a6a24334f95e047dcd7e0b27c2f27f6340bdc6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a6a24334f95e047dcd7e0b27c2f27f6340bdc6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=39a6a24334f95e047dcd7e0b27c2f27f6340bdc6", "patch": "@@ -1,3 +1,10 @@\n+2018-07-19  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/86560\n+\t* gcc.target/i386/pr86560-1.c: New test.\n+\t* gcc.target/i386/pr86560-2.c: Likewise.\n+\t* gcc.target/i386/pr86560-3.c: Likewise.\n+\n 2018-07-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gfortran.dg/max_fmax_aarch64.f90: New test."}, {"sha": "a2b702695c54efcf13dfdc7a9730b359f8389940", "filename": "gcc/testsuite/gcc.target/i386/pr86560-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a6a24334f95e047dcd7e0b27c2f27f6340bdc6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86560-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a6a24334f95e047dcd7e0b27c2f27f6340bdc6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86560-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86560-1.c?ref=39a6a24334f95e047dcd7e0b27c2f27f6340bdc6", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection\" } */\n+/* { dg-final { scan-assembler-times {\\mendbr} 2 } } */\n+\n+struct ucontext;\n+\n+extern int (*bar) (struct ucontext *)\n+  __attribute__((__indirect_return__));\n+\n+extern int res;\n+\n+void\n+foo (struct ucontext *oucp)\n+{\n+  res = bar (oucp);\n+}"}, {"sha": "6f01b385afd150cd1c93f60182f99f068335bbc1", "filename": "gcc/testsuite/gcc.target/i386/pr86560-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a6a24334f95e047dcd7e0b27c2f27f6340bdc6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86560-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a6a24334f95e047dcd7e0b27c2f27f6340bdc6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86560-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86560-2.c?ref=39a6a24334f95e047dcd7e0b27c2f27f6340bdc6", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection\" } */\n+/* { dg-final { scan-assembler-times {\\mendbr} 2 } } */\n+\n+struct ucontext;\n+\n+typedef int (*bar_p) (struct ucontext *)\n+  __attribute__((__indirect_return__));\n+\n+extern int res;\n+\n+void\n+foo (bar_p bar, struct ucontext *oucp)\n+{\n+  res = bar (oucp);\n+}"}, {"sha": "05328e24509a9012dbe1e12b9cfc7195be7c6b86", "filename": "gcc/testsuite/gcc.target/i386/pr86560-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a6a24334f95e047dcd7e0b27c2f27f6340bdc6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86560-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a6a24334f95e047dcd7e0b27c2f27f6340bdc6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86560-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86560-3.c?ref=39a6a24334f95e047dcd7e0b27c2f27f6340bdc6", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection\" } */\n+/* { dg-final { scan-assembler-times {\\mendbr} 2 } } */\n+\n+struct ucontext;\n+\n+extern int (*bar) (struct ucontext *);\n+\n+extern int res;\n+\n+void\n+foo (struct ucontext *oucp)\n+{\n+  int (*f) (struct ucontext *) __attribute__((__indirect_return__))\n+    = bar;\n+  res = f (oucp);\n+}"}]}