{"sha": "4a1d48f6e51ae470ce65372fdff3d674ea5e3ac2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGExZDQ4ZjZlNTFhZTQ3MGNlNjUzNzJmZGZmM2Q2NzRlYTVlM2FjMg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2001-02-07T10:42:15Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2001-02-07T10:42:15Z"}, "message": "Document MD_INIT_BUILTINS, MD_EXPAND_BUILTIN\n\nFrom-SVN: r39516", "tree": {"sha": "285b886f45e73c3d04653ff73b80ed4d5a89ae1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/285b886f45e73c3d04653ff73b80ed4d5a89ae1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a1d48f6e51ae470ce65372fdff3d674ea5e3ac2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a1d48f6e51ae470ce65372fdff3d674ea5e3ac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a1d48f6e51ae470ce65372fdff3d674ea5e3ac2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a1d48f6e51ae470ce65372fdff3d674ea5e3ac2/comments", "author": null, "committer": null, "parents": [{"sha": "bcd7edfe5ee015bf0975d934a7a9924041be7b0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcd7edfe5ee015bf0975d934a7a9924041be7b0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcd7edfe5ee015bf0975d934a7a9924041be7b0f"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "a5aaf89ac159305897f75ebc20cbe31a3ee65810", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a1d48f6e51ae470ce65372fdff3d674ea5e3ac2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a1d48f6e51ae470ce65372fdff3d674ea5e3ac2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a1d48f6e51ae470ce65372fdff3d674ea5e3ac2", "patch": "@@ -3,6 +3,8 @@\n \t* builtins.c (expand_builtin_setjmp_receiver): Emit an ASM_INPUT as\n \ta scheduling barrier at the end.\n \n+\t* tm.texi (MD_INIT_BUILTINS, MD_EXPAND_BUILTIN): Document.\n+\n 2001-02-07  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/sh/sh.md (reload_outsf): Removed."}, {"sha": "b8af796d067ccf1688f91fb52d811f2e28e9cde7", "filename": "gcc/tm.texi", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a1d48f6e51ae470ce65372fdff3d674ea5e3ac2/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a1d48f6e51ae470ce65372fdff3d674ea5e3ac2/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=4a1d48f6e51ae470ce65372fdff3d674ea5e3ac2", "patch": "@@ -8377,4 +8377,33 @@ converting code to conditional execution in the basic blocks\n A C expression to cancel any machine dependent modifications in\n converting code to conditional execution in the basic blocks\n @code{TEST_BB}, @code{THEN_BB}, @code{ELSE_BB}, and @code{JOIN_BB}.\n+\n+@findex MD_INIT_BUILTINS\n+@item MD_INIT_BUILTINS\n+Define this macro if you have any machine-specific builtin functions that\n+need to be defined.  It should be a C expression that performs the\n+necessary setup.\n+\n+Machine specific builtins can be useful to expand special machine\n+instructions that would otherwise not normally be generated because\n+they have no equivalent in the source language (for example, SIMD vector\n+instructions or prefetch instructions).\n+\n+To create a builtin function, call the function @code{builtin_function}\n+which is defined by the language frontend.  You can use any type nodes set\n+up by @code{build_common_tree_nodes} and @code{build_common_tree_nodes_2};\n+only language frontends that use these two functions will use\n+@samp{MD_INIT_BUILTINS}.\n+\n+@findex MD_EXPAND_BUILTIN\n+@item MD_EXPAND_BUILTIN(@var{exp}, @var{target}, @var{subtarget}, @var{mode}, @var{ignore})\n+\n+Expand a call to a machine specific builtin that was set up by\n+@samp{MD_INIT_BUILTINS}.  @var{exp} is the expression for the function call;\n+the result should go to @var{target} if that is convenient, and have mode\n+@var{mode} if that is convenient.  @var{subtarget} may be used as the target\n+for computing one of @var{exp}'s operands. @var{ignore} is nonzero if the value\n+is to be ignored.\n+This macro should return the result of the call to the builtin.\n+\n @end table"}]}