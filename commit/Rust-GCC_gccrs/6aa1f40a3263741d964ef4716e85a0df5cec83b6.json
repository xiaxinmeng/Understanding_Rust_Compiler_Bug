{"sha": "6aa1f40a3263741d964ef4716e85a0df5cec83b6", "node_id": "C_kwDOANBUbNoAKDZhYTFmNDBhMzI2Mzc0MWQ5NjRlZjQ3MTZlODVhMGRmNWNlYzgzYjY", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2023-03-02T21:37:14Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2023-03-05T20:10:39Z"}, "message": "Fortran: fix CLASS attribute handling [PR106856]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/106856\n\t* class.cc (gfc_build_class_symbol): Handle update of attributes of\n\texisting class container.\n\t(gfc_find_derived_vtab): Fix several memory leaks.\n\t(find_intrinsic_vtab): Ditto.\n\t* decl.cc (attr_decl1): Manage update of symbol attributes from\n\tCLASS attributes.\n\t* primary.cc (gfc_variable_attr): OPTIONAL shall not be taken or\n\tupdated from the class container.\n\t* symbol.cc (free_old_symbol): Adjust management of symbol versions\n\tto not prematurely free array specs while working on the declation\n\tof CLASS variables.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/106856\n\t* gfortran.dg/interface_41.f90: Remove dg-pattern from valid testcase.\n\t* gfortran.dg/class_74.f90: New test.\n\t* gfortran.dg/class_75.f90: New test.\n\nCo-authored-by: Tobias Burnus  <tobias@codesourcery.com>", "tree": {"sha": "4ee01f9ce824da43fcad405312812ffd318ef782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ee01f9ce824da43fcad405312812ffd318ef782"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6aa1f40a3263741d964ef4716e85a0df5cec83b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa1f40a3263741d964ef4716e85a0df5cec83b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aa1f40a3263741d964ef4716e85a0df5cec83b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa1f40a3263741d964ef4716e85a0df5cec83b6/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca27d765f1d88a0f9d625b3519b6a8b1f8b19cc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca27d765f1d88a0f9d625b3519b6a8b1f8b19cc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca27d765f1d88a0f9d625b3519b6a8b1f8b19cc7"}], "stats": {"total": 265, "additions": 229, "deletions": 36}, "files": [{"sha": "52235ab83e3a5a4bd4c53d7ae85896e2ce70458d", "filename": "gcc/fortran/class.cc", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa1f40a3263741d964ef4716e85a0df5cec83b6/gcc%2Ffortran%2Fclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa1f40a3263741d964ef4716e85a0df5cec83b6/gcc%2Ffortran%2Fclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.cc?ref=6aa1f40a3263741d964ef4716e85a0df5cec83b6", "patch": "@@ -638,6 +638,7 @@ gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n {\n   char tname[GFC_MAX_SYMBOL_LEN+1];\n   char *name;\n+  gfc_typespec *orig_ts = ts;\n   gfc_symbol *fclass;\n   gfc_symbol *vtab;\n   gfc_component *c;\n@@ -646,9 +647,21 @@ gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n \n   gcc_assert (as);\n \n-  if (attr->class_ok)\n-    /* Class container has already been built.  */\n+  /* Class container has already been built with same name.  */\n+  if (attr->class_ok\n+      && ts->u.derived->components->attr.dimension >= attr->dimension\n+      && ts->u.derived->components->attr.codimension >= attr->codimension\n+      && ts->u.derived->components->attr.class_pointer >= attr->pointer\n+      && ts->u.derived->components->attr.allocatable >= attr->allocatable)\n     return true;\n+  if (attr->class_ok)\n+    {\n+      attr->dimension |= ts->u.derived->components->attr.dimension;\n+      attr->codimension |= ts->u.derived->components->attr.codimension;\n+      attr->pointer |= ts->u.derived->components->attr.class_pointer;\n+      attr->allocatable |= ts->u.derived->components->attr.allocatable;\n+      ts = &ts->u.derived->components->ts;\n+    }\n \n   attr->class_ok = attr->dummy || attr->pointer || attr->allocatable\n \t\t   || attr->select_type_temporary || attr->associate_var;\n@@ -790,7 +803,7 @@ gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n     }\n \n   fclass->attr.is_class = 1;\n-  ts->u.derived = fclass;\n+  orig_ts->u.derived = fclass;\n   attr->allocatable = attr->pointer = attr->dimension = attr->codimension = 0;\n   (*as) = NULL;\n   free (name);\n@@ -2344,6 +2357,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t  vtab->attr.vtab = 1;\n \t  vtab->attr.access = ACCESS_PUBLIC;\n \t  gfc_set_sym_referenced (vtab);\n+\t  free (name);\n \t  name = xasprintf (\"__vtype_%s\", tname);\n \n \t  gfc_find_symbol (name, ns, 0, &vtype);\n@@ -2447,6 +2461,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t      else\n \t\t{\n \t\t  /* Construct default initialization variable.  */\n+\t\t  free (name);\n \t\t  name = xasprintf (\"__def_init_%s\", tname);\n \t\t  gfc_get_symbol (name, ns, &def_init);\n \t\t  def_init->attr.target = 1;\n@@ -2480,6 +2495,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t\t  ns->contained = sub_ns;\n \t\t  sub_ns->resolved = 1;\n \t\t  /* Set up procedure symbol.  */\n+\t\t  free (name);\n \t\t  name = xasprintf (\"__copy_%s\", tname);\n \t\t  gfc_get_symbol (name, sub_ns, &copy);\n \t\t  sub_ns->proc_name = copy;\n@@ -2558,6 +2574,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t\t  ns->contained = sub_ns;\n \t\t  sub_ns->resolved = 1;\n \t\t  /* Set up procedure symbol.  */\n+\t\t  free (name);\n \t\t  name = xasprintf (\"__deallocate_%s\", tname);\n \t\t  gfc_get_symbol (name, sub_ns, &dealloc);\n \t\t  sub_ns->proc_name = dealloc;\n@@ -2723,6 +2740,7 @@ find_intrinsic_vtab (gfc_typespec *ts)\n \t  vtab->attr.vtab = 1;\n \t  vtab->attr.access = ACCESS_PUBLIC;\n \t  gfc_set_sym_referenced (vtab);\n+\t  free (name);\n \t  name = xasprintf (\"__vtype_%s\", tname);\n \n \t  gfc_find_symbol (name, ns, 0, &vtype);\n@@ -2801,6 +2819,7 @@ find_intrinsic_vtab (gfc_typespec *ts)\n \t      c->tb = XCNEW (gfc_typebound_proc);\n \t      c->tb->ppc = 1;\n \n+\t      free (name);\n \t      if (ts->type != BT_CHARACTER)\n \t\tname = xasprintf (\"__copy_%s\", tname);\n \t      else"}, {"sha": "c8f0bb83c2c6103a9bdf81a021493389c1ac58b1", "filename": "gcc/fortran/decl.cc", "status": "modified", "additions": 26, "deletions": 30, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa1f40a3263741d964ef4716e85a0df5cec83b6/gcc%2Ffortran%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa1f40a3263741d964ef4716e85a0df5cec83b6/gcc%2Ffortran%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.cc?ref=6aa1f40a3263741d964ef4716e85a0df5cec83b6", "patch": "@@ -8740,45 +8740,23 @@ attr_decl1 (void)\n \t}\n     }\n \n-  /* Update symbol table.  DIMENSION attribute is set in\n-     gfc_set_array_spec().  For CLASS variables, this must be applied\n-     to the first component, or '_data' field.  */\n   if (sym->ts.type == BT_CLASS\n       && sym->ts.u.derived\n       && sym->ts.u.derived->attr.is_class)\n     {\n-      /* gfc_set_array_spec sets sym->attr not CLASS_DATA(sym)->attr.  Check\n-\t for duplicate attribute here.  */\n-      if (CLASS_DATA(sym)->attr.dimension == 1 && as)\n-\t{\n-\t  gfc_error (\"Duplicate DIMENSION attribute at %C\");\n-\t  m = MATCH_ERROR;\n-\t  goto cleanup;\n-\t}\n-\n-      if (!gfc_copy_attr (&CLASS_DATA(sym)->attr, &current_attr, &var_locus))\n-\t{\n-\t  m = MATCH_ERROR;\n-\t  goto cleanup;\n-\t}\n+      sym->attr.pointer = CLASS_DATA(sym)->attr.class_pointer;\n+      sym->attr.allocatable = CLASS_DATA(sym)->attr.allocatable;\n+      sym->attr.dimension = CLASS_DATA(sym)->attr.dimension;\n+      sym->attr.codimension = CLASS_DATA(sym)->attr.codimension;\n+      if (CLASS_DATA (sym)->as)\n+\tsym->as = gfc_copy_array_spec (CLASS_DATA (sym)->as);\n     }\n-  else\n-    {\n-      if (current_attr.dimension == 0 && current_attr.codimension == 0\n-\t  && !gfc_copy_attr (&sym->attr, &current_attr, &var_locus))\n-\t{\n-\t  m = MATCH_ERROR;\n-\t  goto cleanup;\n-\t}\n-    }\n-\n-  if (sym->ts.type == BT_CLASS\n-      && !gfc_build_class_symbol (&sym->ts, &sym->attr, &sym->as))\n+  if (current_attr.dimension == 0 && current_attr.codimension == 0\n+      && !gfc_copy_attr (&sym->attr, &current_attr, &var_locus))\n     {\n       m = MATCH_ERROR;\n       goto cleanup;\n     }\n-\n   if (!gfc_set_array_spec (sym, as, &var_locus))\n     {\n       m = MATCH_ERROR;\n@@ -8807,6 +8785,24 @@ attr_decl1 (void)\n       goto cleanup;\n     }\n \n+  if (sym->ts.type == BT_CLASS && sym->ts.u.derived->attr.is_class\n+      && !as && !current_attr.pointer && !current_attr.allocatable\n+      && !current_attr.external)\n+    {\n+      sym->attr.pointer = 0;\n+      sym->attr.allocatable = 0;\n+      sym->attr.dimension = 0;\n+      sym->attr.codimension = 0;\n+      gfc_free_array_spec (sym->as);\n+      sym->as = NULL;\n+    }\n+  else if (sym->ts.type == BT_CLASS\n+      && !gfc_build_class_symbol (&sym->ts, &sym->attr, &sym->as))\n+    {\n+      m = MATCH_ERROR;\n+      goto cleanup;\n+    }\n+\n   add_hidden_procptr_result (sym);\n \n   return MATCH_YES;"}, {"sha": "00d35a717708582aa6fc4589ef4662ba53345f2a", "filename": "gcc/fortran/primary.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa1f40a3263741d964ef4716e85a0df5cec83b6/gcc%2Ffortran%2Fprimary.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa1f40a3263741d964ef4716e85a0df5cec83b6/gcc%2Ffortran%2Fprimary.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.cc?ref=6aa1f40a3263741d964ef4716e85a0df5cec83b6", "patch": "@@ -2640,7 +2640,6 @@ gfc_variable_attr (gfc_expr *expr, gfc_typespec *ts)\n       codimension = CLASS_DATA (sym)->attr.codimension;\n       pointer = CLASS_DATA (sym)->attr.class_pointer;\n       allocatable = CLASS_DATA (sym)->attr.allocatable;\n-      optional |= CLASS_DATA (sym)->attr.optional;\n     }\n   else\n     {"}, {"sha": "221165d6daccd977c032c4575f4a76e7741702e4", "filename": "gcc/fortran/symbol.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa1f40a3263741d964ef4716e85a0df5cec83b6/gcc%2Ffortran%2Fsymbol.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa1f40a3263741d964ef4716e85a0df5cec83b6/gcc%2Ffortran%2Fsymbol.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.cc?ref=6aa1f40a3263741d964ef4716e85a0df5cec83b6", "patch": "@@ -3761,7 +3761,11 @@ free_old_symbol (gfc_symbol *sym)\n   if (sym->old_symbol == NULL)\n     return;\n \n-  if (sym->old_symbol->as != sym->as)\n+  if (sym->old_symbol->as != NULL\n+      && sym->old_symbol->as != sym->as\n+      && !(sym->ts.type == BT_CLASS\n+\t   && sym->ts.u.derived->attr.is_class\n+\t   && sym->old_symbol->as == CLASS_DATA (sym)->as))\n     gfc_free_array_spec (sym->old_symbol->as);\n \n   if (sym->old_symbol->value != sym->value)"}, {"sha": "2394ed918fc8896f341774e78e20fc1cf4b82da3", "filename": "gcc/testsuite/gfortran.dg/class_74.f90", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa1f40a3263741d964ef4716e85a0df5cec83b6/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_74.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa1f40a3263741d964ef4716e85a0df5cec83b6/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_74.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_74.f90?ref=6aa1f40a3263741d964ef4716e85a0df5cec83b6", "patch": "@@ -0,0 +1,151 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fcoarray=single\" }\n+!\n+! PR fortran/106856\n+!\n+! Contributed by G. Steinmetz \n+!\n+subroutine foo\n+  interface\n+    subroutine bar(x)\n+      type(*) :: x\n+    end subroutine bar\n+  end interface\n+  class(*) :: x, y\n+  allocatable :: x\n+  dimension :: x(:), y(:,:)\n+  codimension :: x[:]\n+  pointer :: y\n+  y => null()\n+  if (allocated(x)) then\n+    call bar(x(2)[1])\n+  end if\n+  if (associated(y)) then\n+    call bar(y(2,2))\n+  end if\n+end subroutine foo\n+\n+\n+program p\n+  class(*), allocatable :: x, y\n+  y = 'abc'\n+  call s1(x, y)\n+contains\n+  subroutine s1(x, y)\n+    class(*) :: x, y\n+  end\n+  subroutine s2(x, y)\n+    class(*), allocatable :: x, y\n+    optional :: x\n+  end\n+end\n+\n+\n+subroutine s1 (x)\n+  class(*)    :: x\n+  allocatable :: x\n+  dimension   :: x(:)\n+  if (allocated (x)) print *, size (x)\n+end\n+\n+subroutine s2 (x)\n+  class(*)    :: x\n+  allocatable :: x(:)\n+  if (allocated (x)) print *, size (x)\n+end\n+\n+subroutine s3 (x)\n+  class(*)    :: x(:)\n+  allocatable :: x\n+  if (allocated (x)) print *, size (x)\n+end\n+\n+subroutine s4 (x)\n+  class(*)    :: x\n+  dimension   :: x(:)\n+  allocatable :: x\n+  if (allocated (x)) print *, size (x)\n+end\n+\n+\n+subroutine c0 (x)\n+  class(*)    :: x\n+  allocatable :: x\n+  codimension :: x[:]\n+  dimension   :: x(:)\n+  if (allocated (x)) print *, size (x)\n+end\n+\n+subroutine c1 (x)\n+  class(*)    :: x(:)\n+  allocatable :: x[:]\n+  if (allocated (x)) print *, size (x)\n+end\n+\n+subroutine c2 (x)\n+  class(*)    :: x[:]\n+  allocatable :: x(:)\n+  if (allocated (x)) print *, size (x)\n+end\n+\n+subroutine c3 (x)\n+  class(*)    :: x(:)[:]\n+  allocatable :: x\n+  if (allocated (x)) print *, size (x)\n+end\n+\n+subroutine c4 (x)\n+  class(*)    :: x\n+  dimension   :: x(:)\n+  codimension :: x[:]\n+  allocatable :: x\n+  if (allocated (x)) print *, size (x)\n+end\n+\n+\n+subroutine p1 (x)\n+  class(*)    :: x\n+  pointer     :: x\n+  dimension   :: x(:)\n+  if (associated (x)) print *, size (x)\n+end\n+\n+subroutine p2 (x)\n+  class(*)    :: x\n+  pointer     :: x(:)\n+  if (associated (x)) print *, size (x)\n+end\n+\n+subroutine p3 (x)\n+  class(*)    :: x(:)\n+  pointer     :: x\n+  if (associated (x)) print *, size (x)\n+end\n+\n+subroutine p4 (x)\n+  class(*)    :: x\n+  dimension   :: x(:)\n+  pointer     :: x\n+  if (associated (x)) print *, size (x)\n+end\n+\n+\n+! Testcase by Mikael Morin\n+subroutine mm ()\n+  pointer   :: y\n+  dimension :: y(:,:)\n+  class(*)  :: y\n+  if (associated (y)) print *, size (y)\n+end\n+\n+! Testcase from pr53951\n+subroutine pr53951 ()\n+  type t\n+  end type t\n+  class(t), pointer :: C\n+  TARGET :: A\n+  class(t), allocatable :: A, B\n+  TARGET :: B\n+  C => A ! Valid\n+  C => B ! Valid, but was rejected\n+end"}, {"sha": "eb29ad51c85b329258d0f39959c20d9eff535244", "filename": "gcc/testsuite/gfortran.dg/class_75.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa1f40a3263741d964ef4716e85a0df5cec83b6/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_75.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa1f40a3263741d964ef4716e85a0df5cec83b6/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_75.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_75.f90?ref=6aa1f40a3263741d964ef4716e85a0df5cec83b6", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fcoarray=single\" }\n+!\n+! PR fortran/106856\n+!\n+!\n+!\n+subroutine foo(x,y)\n+  class(*), optional :: x, y\n+  optional    :: x    ! { dg-error \"Duplicate OPTIONAL attribute\" }\n+  target      :: x\n+  allocatable :: x\n+  target      :: x    ! { dg-error \"Duplicate TARGET attribute\" }\n+  allocatable :: x    ! { dg-error \"Duplicate ALLOCATABLE attribute\" }\n+  pointer     :: y\n+  contiguous  :: y\n+  pointer     :: y    ! { dg-error \"Duplicate POINTER attribute\" }\n+  contiguous  :: y    ! { dg-error \"Duplicate CONTIGUOUS attribute\" }\n+  codimension :: x[:]\n+  dimension   :: x(:,:)\n+  dimension   :: y(:,:,:)\n+  codimension :: x[:] ! { dg-error \"Duplicate CODIMENSION attribute\" }\n+  dimension   :: y(:) ! { dg-error \"Duplicate DIMENSION attribute\" }\n+end"}, {"sha": "2fec01e3cf9a3e8899310036af8ad99b1985e516", "filename": "gcc/testsuite/gfortran.dg/interface_41.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa1f40a3263741d964ef4716e85a0df5cec83b6/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_41.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa1f40a3263741d964ef4716e85a0df5cec83b6/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_41.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_41.f90?ref=6aa1f40a3263741d964ef4716e85a0df5cec83b6", "patch": "@@ -14,6 +14,6 @@ real function f(x)\n    subroutine s\n       type(t) :: x(2)\n       real :: z\n-      z = f(x)     ! { dg-error \"Rank mismatch in argument\" }\n+      z = f(x)\n    end\n end"}]}