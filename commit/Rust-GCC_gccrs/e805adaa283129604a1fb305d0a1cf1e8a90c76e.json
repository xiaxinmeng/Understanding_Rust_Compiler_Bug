{"sha": "e805adaa283129604a1fb305d0a1cf1e8a90c76e", "node_id": "C_kwDOANBUbNoAKGU4MDVhZGFhMjgzMTI5NjA0YTFmYjMwNWQwYTFjZjFlOGE5MGM3NmU", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-10-28T19:58:08Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-11-09T19:51:56Z"}, "message": "Fortran: ordering of hidden procedure arguments [PR107441]\n\nThe gfortran ABI specifies the order of given and hidden procedure arguments,\nwhere the hidden presence status flags of optional+value scalar arguments\nshall come before character length, coarray token and offset.  Respect that.\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/107441\n\t* trans-decl.cc (create_function_arglist): Adjust the ordering of\n\tautomatically generated hidden procedure arguments to match the\n\tdocumented ABI for gfortran.\n\t* trans-types.cc (gfc_get_function_type): Separate hidden parameters\n\tso that the presence flag for optional+value arguments come before\n\tstring length, coarray token and offset, as required.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/107441\n\t* gfortran.dg/coarray/pr107441-caf.f90: New test.\n\t* gfortran.dg/optional_absent_6.f90: New test.\n\t* gfortran.dg/optional_absent_7.f90: New test.", "tree": {"sha": "55607d4e9c73577f962629a15d020a504460963e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55607d4e9c73577f962629a15d020a504460963e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e805adaa283129604a1fb305d0a1cf1e8a90c76e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e805adaa283129604a1fb305d0a1cf1e8a90c76e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e805adaa283129604a1fb305d0a1cf1e8a90c76e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e805adaa283129604a1fb305d0a1cf1e8a90c76e/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f5aa130fa61637baec476119e72849f7e3f8c67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f5aa130fa61637baec476119e72849f7e3f8c67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f5aa130fa61637baec476119e72849f7e3f8c67"}], "stats": {"total": 152, "additions": 145, "deletions": 7}, "files": [{"sha": "94988b8690eda1127c70847434e47bce6a7012e2", "filename": "gcc/fortran/trans-decl.cc", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e805adaa283129604a1fb305d0a1cf1e8a90c76e/gcc%2Ffortran%2Ftrans-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e805adaa283129604a1fb305d0a1cf1e8a90c76e/gcc%2Ffortran%2Ftrans-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.cc?ref=e805adaa283129604a1fb305d0a1cf1e8a90c76e", "patch": "@@ -2507,8 +2507,8 @@ create_function_arglist (gfc_symbol * sym)\n {\n   tree fndecl;\n   gfc_formal_arglist *f;\n-  tree typelist, hidden_typelist;\n-  tree arglist, hidden_arglist;\n+  tree typelist, hidden_typelist, optval_typelist;\n+  tree arglist, hidden_arglist, optval_arglist;\n   tree type;\n   tree parm;\n \n@@ -2518,6 +2518,7 @@ create_function_arglist (gfc_symbol * sym)\n      the new FUNCTION_DECL node.  */\n   arglist = NULL_TREE;\n   hidden_arglist = NULL_TREE;\n+  optval_arglist = NULL_TREE;\n   typelist = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n \n   if (sym->attr.entry_master)\n@@ -2619,6 +2620,15 @@ create_function_arglist (gfc_symbol * sym)\n     if (f->sym != NULL)\t/* Ignore alternate returns.  */\n       hidden_typelist = TREE_CHAIN (hidden_typelist);\n \n+  /* Advance hidden_typelist over optional+value argument presence flags.  */\n+  optval_typelist = hidden_typelist;\n+  for (f = gfc_sym_get_dummy_args (sym); f; f = f->next)\n+    if (f->sym != NULL\n+\t&& f->sym->attr.optional && f->sym->attr.value\n+\t&& !f->sym->attr.dimension && f->sym->ts.type != BT_CLASS\n+\t&& !gfc_bt_struct (f->sym->ts.type))\n+      hidden_typelist = TREE_CHAIN (hidden_typelist);\n+\n   for (f = gfc_sym_get_dummy_args (sym); f; f = f->next)\n     {\n       char name[GFC_MAX_SYMBOL_LEN + 2];\n@@ -2712,14 +2722,16 @@ create_function_arglist (gfc_symbol * sym)\n \t\t\t    PARM_DECL, get_identifier (name),\n \t\t\t    boolean_type_node);\n \n-          hidden_arglist = chainon (hidden_arglist, tmp);\n+\t  optval_arglist = chainon (optval_arglist, tmp);\n           DECL_CONTEXT (tmp) = fndecl;\n           DECL_ARTIFICIAL (tmp) = 1;\n           DECL_ARG_TYPE (tmp) = boolean_type_node;\n           TREE_READONLY (tmp) = 1;\n           gfc_finish_decl (tmp);\n \n-\t  hidden_typelist = TREE_CHAIN (hidden_typelist);\n+\t  /* The presence flag must be boolean.  */\n+\t  gcc_assert (TREE_VALUE (optval_typelist) == boolean_type_node);\n+\t  optval_typelist = TREE_CHAIN (optval_typelist);\n \t}\n \n       /* For non-constant length array arguments, make sure they use\n@@ -2863,6 +2875,9 @@ create_function_arglist (gfc_symbol * sym)\n       typelist = TREE_CHAIN (typelist);\n     }\n \n+  /* Add hidden present status for optional+value arguments.  */\n+  arglist = chainon (arglist, optval_arglist);\n+\n   /* Add the hidden string length parameters, unless the procedure\n      is bind(C).  */\n   if (!sym->attr.is_bind_c)"}, {"sha": "42907becd277fe6f9ef6b2353ba37f4904b552c6", "filename": "gcc/fortran/trans-types.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e805adaa283129604a1fb305d0a1cf1e8a90c76e/gcc%2Ffortran%2Ftrans-types.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e805adaa283129604a1fb305d0a1cf1e8a90c76e/gcc%2Ffortran%2Ftrans-types.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.cc?ref=e805adaa283129604a1fb305d0a1cf1e8a90c76e", "patch": "@@ -3105,6 +3105,7 @@ gfc_get_function_type (gfc_symbol * sym, gfc_actual_arglist *actual_args,\n {\n   tree type;\n   vec<tree, va_gc> *typelist = NULL;\n+  vec<tree, va_gc> *hidden_typelist = NULL;\n   gfc_formal_arglist *f;\n   gfc_symbol *arg;\n   int alternate_return = 0;\n@@ -3222,7 +3223,7 @@ gfc_get_function_type (gfc_symbol * sym, gfc_actual_arglist *actual_args,\n \t       so that the value can be returned.  */\n \t    type = build_pointer_type (gfc_charlen_type_node);\n \n-\t  vec_safe_push (typelist, type);\n+\t  vec_safe_push (hidden_typelist, type);\n \t}\n       /* For noncharacter scalar intrinsic types, VALUE passes the value,\n \t hence, the optional status cannot be transferred via a NULL pointer.\n@@ -3245,11 +3246,15 @@ gfc_get_function_type (gfc_symbol * sym, gfc_actual_arglist *actual_args,\n \t\t  && CLASS_DATA (arg)->attr.codimension\n \t\t  && !CLASS_DATA (arg)->attr.allocatable)))\n \t{\n-\t  vec_safe_push (typelist, pvoid_type_node);  /* caf_token.  */\n-\t  vec_safe_push (typelist, gfc_array_index_type);  /* caf_offset.  */\n+\t  vec_safe_push (hidden_typelist, pvoid_type_node);  /* caf_token.  */\n+\t  vec_safe_push (hidden_typelist, gfc_array_index_type);  /* caf_offset.  */\n \t}\n     }\n \n+  /* Put hidden character length, caf_token, caf_offset at the end.  */\n+  vec_safe_reserve (typelist, vec_safe_length (hidden_typelist));\n+  vec_safe_splice (typelist, hidden_typelist);\n+\n   if (!vec_safe_is_empty (typelist)\n       || sym->attr.is_main_program\n       || sym->attr.if_source != IFSRC_UNKNOWN)"}, {"sha": "23b2242e217e466ce4d35ea46da5c6a7de329c66", "filename": "gcc/testsuite/gfortran.dg/coarray/pr107441-caf.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e805adaa283129604a1fb305d0a1cf1e8a90c76e/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fpr107441-caf.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e805adaa283129604a1fb305d0a1cf1e8a90c76e/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fpr107441-caf.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fpr107441-caf.f90?ref=e805adaa283129604a1fb305d0a1cf1e8a90c76e", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do run }\n+!\n+! PR fortran/107441\n+! Check that with -fcoarray=lib, coarray metadata arguments are passed\n+! in the right order to procedures.\n+!\n+! Contributed by M.Morin\n+\n+program p\n+  integer :: ci[*]\n+  ci = 17\n+  call s(1, ci, \"abcd\")\n+contains\n+  subroutine s(ra, ca, c)\n+    integer :: ra, ca[*]\n+    character(*) :: c\n+    ca[1] = 13\n+    if (ra /= 1) stop 1\n+    if (this_image() == 1) then\n+      if (ca /= 13) stop 2\n+    else\n+      if (ca /= 17) stop 3\n+    end if\n+    if (len(c) /= 4) stop 4\n+    if (c /= \"abcd\") stop 5\n+  end subroutine s\n+end program p"}, {"sha": "b8abb06980a110af64fcf1a3e18688e846a57186", "filename": "gcc/testsuite/gfortran.dg/optional_absent_6.f90", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e805adaa283129604a1fb305d0a1cf1e8a90c76e/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_absent_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e805adaa283129604a1fb305d0a1cf1e8a90c76e/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_absent_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_absent_6.f90?ref=e805adaa283129604a1fb305d0a1cf1e8a90c76e", "patch": "@@ -0,0 +1,60 @@\n+! { dg-do run }\n+! PR fortran/107441\n+!\n+! Test VALUE + OPTIONAL for integer/real/...\n+! in the presence of non-optional character dummies\n+\n+program bugdemo\n+  implicit none\n+  character :: s = 'a'\n+  integer   :: t\n+\n+  t = testoptional(s)\n+  call test2 (s)\n+  call test3 (s)\n+  call test4 (w='123',x=42)\n+\n+contains\n+\n+  function testoptional (w, x) result(t)\n+    character, intent(in)                  :: w\n+    integer,   intent(in), value, optional :: x\n+    integer :: t\n+    print *, 'present(x) is', present(x)\n+    t = 0\n+    if (present (x)) stop 1\n+  end function testoptional\n+\n+  subroutine test2 (w, x)\n+    character, intent(in)                  :: w\n+    integer,   intent(in), value, optional :: x\n+    print*, 'present(x) is', present(x)\n+    if (present (x)) stop 2\n+  end subroutine test2\n+\n+  subroutine test3 (w, x)\n+    character, intent(in),        optional :: w\n+    integer,   intent(in), value, optional :: x\n+    print *, 'present(w) is', present(w)\n+    print *, 'present(x) is', present(x)\n+    if (.not. present (w)) stop 3\n+    if (present (x)) stop 4\n+  end subroutine test3\n+\n+  subroutine test4 (r, w, x)\n+    real,                     value, optional :: r\n+    character(*), intent(in),        optional :: w\n+    integer,                  value, optional :: x\n+    print *, 'present(r) is', present(r)\n+    print *, 'present(w) is', present(w)\n+    print *, 'present(x) is', present(x)\n+    if (present (r)) stop 5\n+    if (.not. present (w)) stop 6\n+    if (.not. present (x)) stop 7\n+    print *, 'x=', x\n+    print *, 'len(w)=', len(w)\n+    if (len(w) /= 3) stop 8\n+    if (x /= 42) stop 9\n+  end subroutine test4\n+\n+end program bugdemo"}, {"sha": "1be981c88f624892cc57343c9a0f658e8d8154f5", "filename": "gcc/testsuite/gfortran.dg/optional_absent_7.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e805adaa283129604a1fb305d0a1cf1e8a90c76e/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_absent_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e805adaa283129604a1fb305d0a1cf1e8a90c76e/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_absent_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_absent_7.f90?ref=e805adaa283129604a1fb305d0a1cf1e8a90c76e", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/107441\n+! Check that procedure types and procedure decls match when the procedure\n+! has both character-typed and optional value args.\n+!\n+! Contributed by M.Morin\n+\n+program p\n+  interface\n+    subroutine i(c, o)\n+      character(*) :: c\n+      integer, optional, value :: o\n+    end subroutine i\n+  end interface\n+  procedure(i), pointer :: pp\n+  pp => s\n+  call pp(\"abcd\")\n+contains\n+  subroutine s(c, o)\n+    character(*) :: c\n+    integer, optional, value :: o\n+    if (present(o)) stop 1\n+    if (len(c) /= 4) stop 2\n+    if (c /= \"abcd\") stop 3\n+  end subroutine s\n+end program p\n+\n+! { dg-final { scan-tree-dump \"void s .* c, .* o, logical.* _o, integer.* _c\" \"original\" } }\n+! { dg-final { scan-tree-dump \", integer.*, logical.*, integer.* pp\" \"original\" } }"}]}