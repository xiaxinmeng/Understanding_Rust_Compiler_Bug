{"sha": "ae0b51efbd5205a07efcc1d0f7e210445f8cabcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUwYjUxZWZiZDUyMDVhMDdlZmNjMWQwZjdlMjEwNDQ1ZjhjYWJjZg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-10-13T23:41:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-10-13T23:41:11Z"}, "message": "rtl.h: Delete duplicate prototypes.\n\n        * rtl.h: Delete duplicate prototypes.  Add some missing\n        prototypes.\n        * rtlanal.c: (for_each_rtx): Formatting tweak.\n\nFrom-SVN: r23069", "tree": {"sha": "656d1072d377bbc8152512dc99896194e515b257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/656d1072d377bbc8152512dc99896194e515b257"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae0b51efbd5205a07efcc1d0f7e210445f8cabcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae0b51efbd5205a07efcc1d0f7e210445f8cabcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae0b51efbd5205a07efcc1d0f7e210445f8cabcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae0b51efbd5205a07efcc1d0f7e210445f8cabcf/comments", "author": null, "committer": null, "parents": [{"sha": "1d118f17e9f5896193756650ab0285dc43a12f88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d118f17e9f5896193756650ab0285dc43a12f88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d118f17e9f5896193756650ab0285dc43a12f88"}], "stats": {"total": 45, "additions": 16, "deletions": 29}, "files": [{"sha": "6334e89bbc0a856d4e82103d5195a50097b74658", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0b51efbd5205a07efcc1d0f7e210445f8cabcf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0b51efbd5205a07efcc1d0f7e210445f8cabcf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae0b51efbd5205a07efcc1d0f7e210445f8cabcf", "patch": "@@ -1,3 +1,9 @@\n+Wed Oct 14 00:38:40 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* rtl.h: Delete duplicate prototypes.  Add some missing\n+\tprototypes.\n+\t* rtlanal.c: (for_each_rtx): Formatting tweak.\n+\n 1998-10-13 Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n \n \t* Makefile.in (USER_H): Add va-c4x.h to definition."}, {"sha": "3c78edc4277e256cf25942d5bb851b36007d1fe9", "filename": "gcc/rtl.h", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0b51efbd5205a07efcc1d0f7e210445f8cabcf/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0b51efbd5205a07efcc1d0f7e210445f8cabcf/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=ae0b51efbd5205a07efcc1d0f7e210445f8cabcf", "patch": "@@ -955,14 +955,6 @@ extern rtx gen_mem_addressof\t\tPROTO((rtx, union tree_node *));\n extern rtx eliminate_constant_term\tPROTO((rtx, rtx *));\n extern rtx expand_complex_abs\t\tPROTO((enum machine_mode, rtx, rtx, int));\n extern enum machine_mode choose_hard_reg_mode PROTO((int, int));\n-extern int rtx_varies_p\t\tPROTO((rtx));\n-extern int may_trap_p\t\tPROTO((rtx));\n-extern int side_effects_p\tPROTO((rtx));\n-extern int volatile_refs_p\tPROTO((rtx));\n-extern int volatile_insn_p\tPROTO((rtx));\n-extern void remove_note\t\tPROTO((rtx, rtx));\n-extern int refers_to_regno_p\tPROTO((int, int, rtx, rtx *));\n-extern int reg_overlap_mentioned_p PROTO((rtx, rtx));\n \n /* Functions in rtlanal.c */\n \n@@ -984,7 +976,6 @@ extern rtx single_set\t\t\tPROTO((rtx));\n extern rtx find_last_value\t\tPROTO((rtx, rtx *, rtx));\n extern int refers_to_regno_p\t\tPROTO((int, int, rtx, rtx *));\n extern int reg_overlap_mentioned_p\tPROTO((rtx, rtx));\n-extern rtx find_use_as_address\t\tPROTO((rtx, rtx, HOST_WIDE_INT));\n extern void note_stores\t\t\tPROTO((rtx, void (*)()));\n extern rtx reg_set_last\t\t\tPROTO((rtx, rtx));\n extern int rtx_equal_p\t\t\tPROTO((rtx, rtx));\n@@ -999,19 +990,26 @@ extern int side_effects_p\t\tPROTO((rtx));\n extern int volatile_refs_p\t\tPROTO((rtx));\n extern int volatile_insn_p\t\tPROTO((rtx));\n extern int may_trap_p\t\t\tPROTO((rtx));\n-extern int inequality_comparison_p\tPROTO((rtx));\n+extern int inequality_comparisons_p\tPROTO ((rtx));\n extern rtx replace_rtx\t\t\tPROTO((rtx, rtx, rtx));\n extern rtx replace_regs\t\t\tPROTO((rtx, rtx *, int, int));\n extern int computed_jump_p\t\tPROTO((rtx));\n typedef int (*rtx_function)             PROTO((rtx *, void *));\n extern int for_each_rtx                 PROTO((rtx *, rtx_function, void *));\n \n+/* flow.c */\n+\n+extern rtx find_use_as_address\t\tPROTO((rtx, rtx, HOST_WIDE_INT));\n+\n+/* regclass.c */\n+\n /* Maximum number of parallel sets and clobbers in any insn in this fn.\n    Always at least 3, since the combiner could put that many togetherm\n    and we want this to remain correct for all the remaining passes.  */\n \n extern int max_parallel;\n \n+/* recog.c */\n extern int asm_noperands\t\tPROTO((rtx));\n extern char *decode_asm_operands\tPROTO((rtx, rtx *, rtx **, char **, enum machine_mode *));\n \n@@ -1218,24 +1216,6 @@ extern char *regno_pointer_align;\n \n extern int rtx_to_tree_code\tPROTO((enum rtx_code));\n \n-/* In rtlanal.c */\n-extern int reg_set_p\t\t\tPROTO ((rtx, rtx));\n-extern int reg_mentioned_p\t\tPROTO ((rtx, rtx));\n-extern int reg_referenced_p\t\tPROTO ((rtx, rtx));\n-extern int reg_used_between_p\t\tPROTO ((rtx, rtx, rtx));\n-extern int reg_set_p\t\t\tPROTO ((rtx, rtx));\n-extern int reg_referenced_between_p\tPROTO ((rtx, rtx, rtx));\n-extern int reg_set_between_p\t\tPROTO ((rtx, rtx, rtx));\n-extern int rtx_unstable_p\t\tPROTO ((rtx));\n-extern int rtx_addr_varies_p\t\tPROTO ((rtx));\n-extern int rtx_equal_p\t\t\tPROTO ((rtx, rtx));\n-extern int inequality_comparisons_p\tPROTO ((rtx));\n-extern int dead_or_set_p\t\tPROTO ((rtx, rtx));\n-extern int dead_or_set_regno_p\t\tPROTO ((rtx, int));\n-extern int no_labels_between_p\t\tPROTO ((rtx, rtx));\n-extern int modified_between_p\t\tPROTO ((rtx, rtx, rtx));\n-extern int modified_in_p\t\tPROTO ((rtx, rtx));\n-\n /* In tree.c */\n extern void obfree\t\t\tPROTO ((char *));\n struct obstack;"}, {"sha": "15151783875090ed0a51b34d888a837fd23cf098", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0b51efbd5205a07efcc1d0f7e210445f8cabcf/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0b51efbd5205a07efcc1d0f7e210445f8cabcf/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=ae0b51efbd5205a07efcc1d0f7e210445f8cabcf", "patch": "@@ -2058,7 +2058,8 @@ computed_jump_p (insn)\n    This routine is very general, and could (should?) be used to\n    implement many of the other routines in this file.  */\n \n-int for_each_rtx (x, f, data)\n+int\n+for_each_rtx (x, f, data)\n      rtx* x;\n      rtx_function f;\n      void* data;"}]}