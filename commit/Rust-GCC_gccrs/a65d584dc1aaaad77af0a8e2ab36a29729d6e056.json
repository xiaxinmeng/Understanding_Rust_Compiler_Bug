{"sha": "a65d584dc1aaaad77af0a8e2ab36a29729d6e056", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY1ZDU4NGRjMWFhYWFkNzdhZjBhOGUyYWIzNmEyOTcyOWQ2ZTA1Ng==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-12-09T09:00:42Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-12-09T09:00:42Z"}, "message": "Come up with constructors of symtab_node, cgraph_node and varpool_node.\n\n2019-12-09  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/92737\n\t* cgraph.c (symbol_table_test::symbol_table_test): Fix\n\tcoding style.\n\t* cgraph.h (symtab_node::symtab_node): New constructor.\n\t(cgraph_node::cgraph_node): Likewise.\n\t(varpool_node::varpool_node): Likewise.\n\t(symbol_table::allocate_cgraph_symbol): Use newly\n\tcreated constructor.\n\t(symbol_table::allocate_cgraph_symbol): Remove.\n\t* cgraphunit.c (symtab_terminator): Likewise.\n\t* varpool.c (varpool_node::create_empty): Use newly\n\tcreated constructor.\n\nFrom-SVN: r279109", "tree": {"sha": "6f7bf76913286dec5edeaaf3fd0e6dedbbb51f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f7bf76913286dec5edeaaf3fd0e6dedbbb51f74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a65d584dc1aaaad77af0a8e2ab36a29729d6e056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a65d584dc1aaaad77af0a8e2ab36a29729d6e056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a65d584dc1aaaad77af0a8e2ab36a29729d6e056", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a65d584dc1aaaad77af0a8e2ab36a29729d6e056/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4383959047812511798e397511c9f4904eafe23d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4383959047812511798e397511c9f4904eafe23d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4383959047812511798e397511c9f4904eafe23d"}], "stats": {"total": 98, "additions": 65, "deletions": 33}, "files": [{"sha": "0d421ca00b3a2c0e77936236dc1c1370bb728c0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a65d584dc1aaaad77af0a8e2ab36a29729d6e056/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a65d584dc1aaaad77af0a8e2ab36a29729d6e056/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a65d584dc1aaaad77af0a8e2ab36a29729d6e056", "patch": "@@ -1,3 +1,18 @@\n+2019-12-09  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/92737\n+\t* cgraph.c (symbol_table_test::symbol_table_test): Fix\n+\tcoding style.\n+\t* cgraph.h (symtab_node::symtab_node): New constructor.\n+\t(cgraph_node::cgraph_node): Likewise.\n+\t(varpool_node::varpool_node): Likewise.\n+\t(symbol_table::allocate_cgraph_symbol): Use newly\n+\tcreated constructor.\n+\t(symbol_table::allocate_cgraph_symbol): Remove.\n+\t* cgraphunit.c (symtab_terminator): Likewise.\n+\t* varpool.c (varpool_node::create_empty): Use newly\n+\tcreated constructor.\n+\n 2019-12-09  Hongtao Liu  <hongtao.liu@intel.com>\n \n \tPR target/92686"}, {"sha": "5c7a03d61be077395db8dbad04fa60361b9029a2", "filename": "gcc/cgraph.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a65d584dc1aaaad77af0a8e2ab36a29729d6e056/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a65d584dc1aaaad77af0a8e2ab36a29729d6e056/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=a65d584dc1aaaad77af0a8e2ab36a29729d6e056", "patch": "@@ -283,14 +283,8 @@ symbol_table::initialize (void)\n cgraph_node *\n symbol_table::create_empty (void)\n {\n-  cgraph_node *node = allocate_cgraph_symbol ();\n-\n-  node->type = SYMTAB_FUNCTION;\n-  node->frequency = NODE_FREQUENCY_NORMAL;\n-  node->count_materialization_scale = REG_BR_PROB_BASE;\n   cgraph_count++;\n-\n-  return node;\n+  return new (ggc_alloc<cgraph_node> ()) cgraph_node (cgraph_max_uid++);\n }\n \n /* Register HOOK to be called with DATA on each removed edge.  */\n@@ -510,8 +504,6 @@ cgraph_node::create (tree decl)\n \n   node->decl = decl;\n \n-  node->count = profile_count::uninitialized ();\n-\n   if ((flag_openacc || flag_openmp)\n       && lookup_attribute (\"omp declare target\", DECL_ATTRIBUTES (decl)))\n     {\n@@ -3750,7 +3742,7 @@ symbol_table_test::symbol_table_test ()\n {\n   gcc_assert (saved_symtab == NULL);\n   saved_symtab = symtab;\n-  symtab = new (ggc_alloc <symbol_table> ()) symbol_table ();\n+  symtab = new (ggc_alloc<symbol_table> ()) symbol_table ();\n }\n \n /* Destructor.  Restore the old value of symtab.  */"}, {"sha": "cdeea4d9953114717d3ab56760e29f47183543cf", "filename": "gcc/cgraph.h", "status": "modified", "additions": 45, "deletions": 18, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a65d584dc1aaaad77af0a8e2ab36a29729d6e056/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a65d584dc1aaaad77af0a8e2ab36a29729d6e056/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=a65d584dc1aaaad77af0a8e2ab36a29729d6e056", "patch": "@@ -109,6 +109,23 @@ struct GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n public:\n   friend class symbol_table;\n \n+  /* Constructor.  */\n+  explicit symtab_node (symtab_type t)\n+    : type (t), resolution (LDPR_UNKNOWN), definition (false), alias (false),\n+      transparent_alias (false), weakref (false), cpp_implicit_alias (false),\n+      symver (false), analyzed (false), writeonly (false),\n+      refuse_visibility_changes (false), externally_visible (false),\n+      no_reorder (false), force_output (false), forced_by_abi (false),\n+      unique_name (false), implicit_section (false), body_removed (false),\n+      used_from_other_partition (false), in_other_partition (false),\n+      address_taken (false), in_init_priority_hash (false),\n+      need_lto_streaming (false), offloadable (false), ifunc_resolver (false),\n+      order (false), next_sharing_asm_name (NULL),\n+      previous_sharing_asm_name (NULL), same_comdat_group (NULL), ref_list (),\n+      alias_target (NULL), lto_file_data (NULL), aux (NULL),\n+      x_comdat_group (NULL_TREE), x_section (NULL)\n+  {}\n+\n   /* Return name.  */\n   const char *name () const;\n \n@@ -901,6 +918,28 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node\n {\n   friend class symbol_table;\n \n+  /* Constructor.  */\n+  explicit cgraph_node (int uid)\n+    : symtab_node (SYMTAB_FUNCTION), callees (NULL), callers (NULL),\n+      indirect_calls (NULL), origin (NULL), nested (NULL), next_nested (NULL),\n+      next_sibling_clone (NULL), prev_sibling_clone (NULL), clones (NULL),\n+      clone_of (NULL), call_site_hash (NULL), former_clone_of (NULL),\n+      simdclone (NULL), simd_clones (NULL), ipa_transforms_to_apply (vNULL),\n+      inlined_to (NULL), rtl (NULL), clone (), thunk (),\n+      count (profile_count::uninitialized ()), tp_first_run (false),\n+      count_materialization_scale (REG_BR_PROB_BASE), profile_id (0),\n+      unit_id (0), used_as_abstract_origin (false),\n+      lowered (false), process (false), frequency (NODE_FREQUENCY_NORMAL),\n+      only_called_at_startup (false), only_called_at_exit (false),\n+      tm_clone (false), dispatcher_function (false), calls_comdat_local (false),\n+      icf_merged (false), nonfreeing_fn (false), merged_comdat (false),\n+      merged_extern_inline (false), parallelized_function (false),\n+      split_part (false), indirect_call_target (false), local (false),\n+      versionable (false), can_change_signature (false),\n+      redefined_extern_inline (false), tm_may_enter_irr (false),\n+      ipcp_clone (false), m_uid (uid), m_summary_id (-1)\n+  {}\n+\n   /* Remove the node from cgraph and all inline clones inlined into it.\n      Skip however removal of FORBIDDEN_NODE and return true if it needs to be\n      removed.  This allows to call the function from outer loop walking clone\n@@ -1877,6 +1916,12 @@ class GTY((chain_next (\"%h.next_caller\"), chain_prev (\"%h.prev_caller\"),\n \n struct GTY((tag (\"SYMTAB_VARIABLE\"))) varpool_node : public symtab_node\n {\n+  /* Constructor.  */\n+  explicit varpool_node ()\n+    : symtab_node (SYMTAB_VARIABLE), output (0), dynamically_initialized (0),\n+      tls_model (TLS_MODEL_NONE), used_by_single_function (0)\n+  {}\n+\n   /* Dump given varpool node to F.  */\n   void dump (FILE *f);\n \n@@ -2389,9 +2434,6 @@ class GTY((tag (\"SYMTAB\"))) symbol_table\n   hash_set <const cgraph_node *> GTY ((skip)) cloned_nodes;\n \n private:\n-  /* Allocate new callgraph node.  */\n-  inline cgraph_node * allocate_cgraph_symbol (void);\n-\n   /* Allocate a cgraph_edge structure and fill it with data according to the\n      parameters of which only CALLEE can be NULL (when creating an indirect\n      call edge).  CLONING_P should be set if properties that are copied from an\n@@ -2717,21 +2759,6 @@ symbol_table::release_symbol (cgraph_node *node)\n   ggc_free (node);\n }\n \n-/* Allocate new callgraph node.  */\n-\n-inline cgraph_node *\n-symbol_table::allocate_cgraph_symbol (void)\n-{\n-  cgraph_node *node;\n-\n-  node = ggc_cleared_alloc<cgraph_node> ();\n-  node->type = SYMTAB_FUNCTION;\n-  node->m_summary_id = -1;\n-  node->m_uid = cgraph_max_uid++;\n-  return node;\n-}\n-\n-\n /* Return first static symbol with definition.  */\n inline symtab_node *\n symbol_table::first_symbol (void)"}, {"sha": "e630a4f5b497008f0b96b7b22d9c32b28cff8f3a", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a65d584dc1aaaad77af0a8e2ab36a29729d6e056/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a65d584dc1aaaad77af0a8e2ab36a29729d6e056/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=a65d584dc1aaaad77af0a8e2ab36a29729d6e056", "patch": "@@ -274,7 +274,7 @@ symtab_node::needed_p (void)\n /* Head and terminator of the queue of nodes to be processed while building\n    callgraph.  */\n \n-static symtab_node symtab_terminator;\n+static symtab_node symtab_terminator (SYMTAB_SYMBOL);\n static symtab_node *queued_nodes = &symtab_terminator;\n \n /* Add NODE to queue starting at QUEUED_NODES. "}, {"sha": "25a26b213412147f5f6e5e201c0c7bdeeb2809ba", "filename": "gcc/varpool.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a65d584dc1aaaad77af0a8e2ab36a29729d6e056/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a65d584dc1aaaad77af0a8e2ab36a29729d6e056/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=a65d584dc1aaaad77af0a8e2ab36a29729d6e056", "patch": "@@ -133,10 +133,8 @@ symbol_table::call_varpool_insertion_hooks (varpool_node *node)\n \n varpool_node *\n varpool_node::create_empty (void)\n-{   \n-  varpool_node *node = ggc_cleared_alloc<varpool_node> ();\n-  node->type = SYMTAB_VARIABLE;\n-  return node;\n+{\n+  return new (ggc_alloc<varpool_node> ()) varpool_node ();\n }   \n \n /* Return varpool node assigned to DECL.  Create new one when needed.  */"}]}