{"sha": "3c72114c42aa6c7778f264579c16ad168753648b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M3MjExNGM0MmFhNmM3Nzc4ZjI2NDU3OWMxNmFkMTY4NzUzNjQ4Yg==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2011-12-14T21:49:52Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2011-12-14T21:49:52Z"}, "message": "PR c++/51475 - ICE with invalid initializer-list\n\ngcc/cp/\n\n\tPR c++/51475\n\t* call.c (struct conversion)<u.next>: Update comment.\n\t(next_conversion): New static function.\n\t(convert_like_real): Use it.\n\ngcc/testsuite/\n\n\tPR c++/51475\n\t* g++.dg/cpp0x/initlist63.C: New test.\n\nFrom-SVN: r182343", "tree": {"sha": "6f239f05a4cd79d20efa42e2886eab944a2c64f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f239f05a4cd79d20efa42e2886eab944a2c64f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c72114c42aa6c7778f264579c16ad168753648b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c72114c42aa6c7778f264579c16ad168753648b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c72114c42aa6c7778f264579c16ad168753648b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c72114c42aa6c7778f264579c16ad168753648b/comments", "author": null, "committer": null, "parents": [{"sha": "a13780a6664dd04eb52be6e0de63b12c08a78bc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a13780a6664dd04eb52be6e0de63b12c08a78bc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a13780a6664dd04eb52be6e0de63b12c08a78bc5"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "2c20ae28207388f22f29f8c93855f47ee0e51118", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c72114c42aa6c7778f264579c16ad168753648b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c72114c42aa6c7778f264579c16ad168753648b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3c72114c42aa6c7778f264579c16ad168753648b", "patch": "@@ -1,5 +1,10 @@\n 2011-12-14  Dodji Seketeli  <dodji@redhat.com>\n \n+\tPR c++/51475\n+\t* call.c (struct conversion)<u.next>: Update comment.\n+    \t(next_conversion): New static function.\n+    \t(convert_like_real): Use it.\n+\n \tPR c++/51476\n \t* pt.c (convert_nontype_argument): Don't call maybe_constant_value\n \tfor PTRMEM_CST nodes."}, {"sha": "dd716a40e3beb6d19003ddd373f585b3c88aaa6b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c72114c42aa6c7778f264579c16ad168753648b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c72114c42aa6c7778f264579c16ad168753648b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3c72114c42aa6c7778f264579c16ad168753648b", "patch": "@@ -111,12 +111,15 @@ struct conversion {\n     /* The next conversion in the chain.  Since the conversions are\n        arranged from outermost to innermost, the NEXT conversion will\n        actually be performed before this conversion.  This variant is\n-       used only when KIND is neither ck_identity nor ck_ambig.  */\n+       used only when KIND is neither ck_identity, ck_ambig nor\n+       ck_list.  Please use the next_conversion function instead\n+       of using this field directly.  */\n     conversion *next;\n     /* The expression at the beginning of the conversion chain.  This\n        variant is used only if KIND is ck_identity or ck_ambig.  */\n     tree expr;\n-    /* The array of conversions for an initializer_list.  */\n+    /* The array of conversions for an initializer_list, so this\n+       variant is used only when KIN D is ck_list.  */\n     conversion **list;\n   } u;\n   /* The function candidate corresponding to this conversion\n@@ -193,6 +196,7 @@ static conversion *standard_conversion (tree, tree, tree, bool, int);\n static conversion *reference_binding (tree, tree, tree, bool, int);\n static conversion *build_conv (conversion_kind, tree, conversion *);\n static conversion *build_list_conv (tree, tree, int);\n+static conversion *next_conversion (conversion *);\n static bool is_subseq (conversion *, conversion *);\n static conversion *maybe_handle_ref_bind (conversion **);\n static void maybe_handle_implicit_object (conversion **);\n@@ -833,6 +837,21 @@ build_list_conv (tree type, tree ctor, int flags)\n   return t;\n }\n \n+/* Return the next conversion of the conversion chain (if applicable),\n+   or NULL otherwise.  Please use this function instead of directly\n+   accessing fields of struct conversion.  */\n+\n+static conversion *\n+next_conversion (conversion *conv)\n+{\n+  if (conv == NULL\n+      || conv->kind == ck_identity\n+      || conv->kind == ck_ambig\n+      || conv->kind == ck_list)\n+    return NULL;\n+  return conv->u.next;\n+}\n+\n /* Subroutine of build_aggr_conv: check whether CTOR, a braced-init-list,\n    is a valid aggregate initializer for array type ATYPE.  */\n \n@@ -5603,7 +5622,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t  && BRACE_ENCLOSED_INITIALIZER_P (CONSTRUCTOR_ELT (expr, 0)->value))\n \tpermerror (input_location, \"too many braces around initializer for %qT\", totype);\n \n-      for (; t; t = t->u.next)\n+      for (; t ; t = next_conversion (t))\n \t{\n \t  if (t->kind == ck_user && t->cand->reason)\n \t    {"}, {"sha": "ab5cca091f109c6e1b3336414def73f6dcdc9bfd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c72114c42aa6c7778f264579c16ad168753648b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c72114c42aa6c7778f264579c16ad168753648b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c72114c42aa6c7778f264579c16ad168753648b", "patch": "@@ -1,3 +1,8 @@\n+2011-12-14  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/51475\n+\t* g++.dg/cpp0x/initlist63.C: New test.\n+\n 2011-12-14  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/50931"}, {"sha": "a72c0ab99226ba9028a1729640dc93aec91b710a", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist63.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c72114c42aa6c7778f264579c16ad168753648b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist63.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c72114c42aa6c7778f264579c16ad168753648b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist63.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist63.C?ref=3c72114c42aa6c7778f264579c16ad168753648b", "patch": "@@ -0,0 +1,16 @@\n+// Origin PR c++/51475\n+// { dg-options -std=c++11 }\n+\n+#include <initializer_list>\n+\n+struct A\n+{\n+    A(int*);\n+};\n+\n+struct B\n+{\n+    const std::initializer_list<A>& x;\n+};\n+\n+B b = {{1}}; // { dg-error \"invalid conversion|cannot convert\" }"}]}