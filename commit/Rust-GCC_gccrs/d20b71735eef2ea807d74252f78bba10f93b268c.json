{"sha": "d20b71735eef2ea807d74252f78bba10f93b268c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIwYjcxNzM1ZWVmMmVhODA3ZDc0MjUyZjc4YmJhMTBmOTNiMjY4Yw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-07T12:41:54Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-07T17:25:14Z"}, "message": "c++: Fix spelling of non-static\n\nI was looking at DR 296 and noticed that we say \"nonstatic\" instead of\n\"non-static\", which is the version the standard uses.  So this patch\nfixes the spelling throughout the front end.  Did not check e.g.\nnon-dependent or any other.\n\n\t* decl.c (grok_op_properties): Fix spelling of non-static.\n\t* typeck.c (build_class_member_access_expr): Likewise.\n\n\t* g++.dg/other/operator1.C: Adjust expected message.\n\t* g++.dg/overload/operator2.C: Likewise.\n\t* g++.dg/template/error30.C: Likewise.\n\t* g++.old-deja/g++.jason/operator.C: Likewise.", "tree": {"sha": "eb5c3b943d6fbc298618abd928027021198b857d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb5c3b943d6fbc298618abd928027021198b857d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d20b71735eef2ea807d74252f78bba10f93b268c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d20b71735eef2ea807d74252f78bba10f93b268c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d20b71735eef2ea807d74252f78bba10f93b268c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d20b71735eef2ea807d74252f78bba10f93b268c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5438a28a050f8ecea1352134047efeff5111b603", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5438a28a050f8ecea1352134047efeff5111b603", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5438a28a050f8ecea1352134047efeff5111b603"}], "stats": {"total": 56, "additions": 34, "deletions": 22}, "files": [{"sha": "c60b8bf01b6c283e0a993041a1efba1cbbb399a1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d20b71735eef2ea807d74252f78bba10f93b268c", "patch": "@@ -1,3 +1,8 @@\n+2020-05-07  Marek Polacek  <polacek@redhat.com>\n+\n+\t* decl.c (grok_op_properties): Fix spelling of non-static.\n+\t* typeck.c (build_class_member_access_expr): Likewise.\n+\n 2020-05-07  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/94703"}, {"sha": "dbce3866fd86eb9e10e36c8762fa4551738805ee", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=d20b71735eef2ea807d74252f78bba10f93b268c", "patch": "@@ -8697,7 +8697,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t      (DECL_CONTEXT (fn), BINFO_TYPE (cand->conversion_path)))) \n \tflags |= LOOKUP_NONVIRTUAL;\n \n-      /* [class.mfct.nonstatic]: If a nonstatic member function of a class\n+      /* [class.mfct.non-static]: If a non-static member function of a class\n \t X is called for an object that is not of type X, or of a type\n \t derived from X, the behavior is undefined.\n "}, {"sha": "b66b8d4725d8b90ba52dee585549d3ca7d825d32", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=d20b71735eef2ea807d74252f78bba10f93b268c", "patch": "@@ -3661,7 +3661,7 @@ check_field_decls (tree t, tree *access_decls,\n \t    {\n \t      /* ARM $12.6.2: [A member initializer list] (or, for an\n \t\t aggregate, initialization by a brace-enclosed list) is the\n-\t\t only way to initialize nonstatic const and reference\n+\t\t only way to initialize non-static const and reference\n \t\t members.  */\n \t      TYPE_HAS_COMPLEX_COPY_ASSIGN (t) = 1;\n \t      TYPE_HAS_COMPLEX_MOVE_ASSIGN (t) = 1;\n@@ -3784,7 +3784,7 @@ check_field_decls (tree t, tree *access_decls,\n \t    {\n \t      /* ARM $12.6.2: [A member initializer list] (or, for an\n \t\t aggregate, initialization by a brace-enclosed list) is the\n-\t\t only way to initialize nonstatic const and reference\n+\t\t only way to initialize non-static const and reference\n \t\t members.  */\n \t      TYPE_HAS_COMPLEX_COPY_ASSIGN (t) = 1;\n \t      TYPE_HAS_COMPLEX_MOVE_ASSIGN (t) = 1;\n@@ -3799,7 +3799,7 @@ check_field_decls (tree t, tree *access_decls,\n \t    | CLASSTYPE_READONLY_FIELDS_NEED_INIT (type));\n \t}\n \n-      /* Core issue 80: A nonstatic data member is required to have a\n+      /* Core issue 80: A non-static data member is required to have a\n \t different name from the class iff the class has a\n \t user-declared constructor.  */\n       if (constructor_name_p (DECL_NAME (field), t)\n@@ -8106,7 +8106,7 @@ resolve_address_of_overloaded_function (tree target_type,\n        member functions match targets of type \"pointer-to-member\n        function;\" the function type of the pointer to member is used to\n        select the member function from the set of overloaded member\n-       functions.  If a nonstatic member function is selected, the\n+       functions.  If a non-static member function is selected, the\n        reference to the overloaded function name is required to have the\n        form of a pointer to member as described in 5.3.1.\n "}, {"sha": "188462a79e7179e49a741500f1d21939e292ad23", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=d20b71735eef2ea807d74252f78bba10f93b268c", "patch": "@@ -1534,7 +1534,7 @@ pp_cxx_parameter_declaration_clause (cxx_pretty_printer *pp, tree t)\n     }\n   bool first = true;\n \n-  /* Skip artificial parameter for nonstatic member functions.  */\n+  /* Skip artificial parameter for non-static member functions.  */\n   if (TREE_CODE (t) == METHOD_TYPE)\n     types = TREE_CHAIN (types);\n "}, {"sha": "cc12e0051543b0af22bb240a8bb32e8168941105", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d20b71735eef2ea807d74252f78bba10f93b268c", "patch": "@@ -14391,7 +14391,7 @@ grok_op_properties (tree decl, bool complain)\n \t  || operator_code == ARRAY_REF\n \t  || operator_code == NOP_EXPR)\n \t{\n-\t  error_at (loc, \"%qD must be a nonstatic member function\", decl);\n+\t  error_at (loc, \"%qD must be a non-static member function\", decl);\n \t  return false;\n \t}\n "}, {"sha": "e2e547afd963726d49b48805b4730654fb885e7e", "filename": "gcc/cp/init.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=d20b71735eef2ea807d74252f78bba10f93b268c", "patch": "@@ -160,7 +160,7 @@ build_zero_init_1 (tree type, tree nelts, bool static_storage_p,\n      -- if T is a scalar type, the storage is set to the value of zero\n \tconverted to T.\n \n-     -- if T is a non-union class type, the storage for each nonstatic\n+     -- if T is a non-union class type, the storage for each non-static\n \tdata member and each base-class subobject is zero-initialized.\n \n      -- if T is a union type, the storage for its first data member is\n@@ -2221,17 +2221,17 @@ build_offset_ref (tree type, tree member, bool address_p,\n       /* If MEMBER is non-static, then the program has fallen afoul of\n \t [expr.prim]:\n \n-\t   An id-expression that denotes a nonstatic data member or\n-\t   nonstatic member function of a class can only be used:\n+\t   An id-expression that denotes a non-static data member or\n+\t   non-static member function of a class can only be used:\n \n \t   -- as part of a class member access (_expr.ref_) in which the\n \t   object-expression refers to the member's class or a class\n \t   derived from that class, or\n \n \t   -- to form a pointer to member (_expr.unary.op_), or\n \n-\t   -- in the body of a nonstatic member function of that class or\n-\t   of a class derived from that class (_class.mfct.nonstatic_), or\n+\t   -- in the body of a non-static member function of that class or\n+\t   of a class derived from that class (_class.mfct.non-static_), or\n \n \t   -- in a mem-initializer for a constructor for that class or for\n \t   a class derived from that class (_class.base.init_).  */"}, {"sha": "d9a2d748428e5b3afc22a4b0bbe9021a4b131af7", "filename": "gcc/cp/search.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=d20b71735eef2ea807d74252f78bba10f93b268c", "patch": "@@ -631,7 +631,7 @@ protected_accessible_p (tree decl, tree derived, tree type, tree otype)\n   /* [class.protected]\n \n      When a friend or a member function of a derived class references\n-     a protected nonstatic member of a base class, an access check\n+     a protected non-static member of a base class, an access check\n      applies in addition to those described earlier in clause\n      _class.access_) Except when forming a pointer to member\n      (_expr.unary.op_), the access must be through a pointer to,\n@@ -921,11 +921,11 @@ struct lookup_field_info {\n    of that class.\n \n    [class.member.lookup]:If the resulting set of declarations are not all\n-   from sub-objects of the same type, or the set has a  nonstatic  member\n+   from sub-objects of the same type, or the set has a non-static member\n    and  includes members from distinct sub-objects, there is an ambiguity\n    and the program is ill-formed.\n \n-   This function checks that T contains no nonstatic members.  */\n+   This function checks that T contains no non-static members.  */\n \n int\n shared_member_p (tree t)"}, {"sha": "39f5187a7f4d9b65ef32d7a960a3f8c02c60df44", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d20b71735eef2ea807d74252f78bba10f93b268c", "patch": "@@ -2512,7 +2512,7 @@ build_class_member_access_expr (cp_expr object, tree member,\n       if (complain & tf_error)\n \t{\n \t  if (TREE_CODE (member) == FIELD_DECL)\n-\t    error (\"invalid use of nonstatic data member %qE\", member);\n+\t    error (\"invalid use of non-static data member %qE\", member);\n \t  else\n \t    error (\"%qD is not a member of %qT\", member, object_type);\n \t}"}, {"sha": "f7c018853ca64dfae1920dc5542fcdbecbe235fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d20b71735eef2ea807d74252f78bba10f93b268c", "patch": "@@ -1,3 +1,10 @@\n+2020-05-07  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/other/operator1.C: Adjust expected message.\n+\t* g++.dg/overload/operator2.C: Likewise.\n+\t* g++.dg/template/error30.C: Likewise.\n+\t* g++.old-deja/g++.jason/operator.C: Likewise.\n+\n 2020-05-07  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/94703"}, {"sha": "121c106ad18ef4598088f1163a59ccbec33a637c", "filename": "gcc/testsuite/g++.dg/other/operator1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foperator1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foperator1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foperator1.C?ref=d20b71735eef2ea807d74252f78bba10f93b268c", "patch": "@@ -1,7 +1,7 @@\n // PR c++/27547\n // { dg-do compile }\n \n-int operator=(int);  // { dg-error \"5:.int operator=\\\\(int\\\\). must be a nonstatic member function\" }\n+int operator=(int);  // { dg-error \"5:.int operator=\\\\(int\\\\). must be a non-static member function\" }\n \n void foo()\n {"}, {"sha": "64640b6cfe063e0a14b8c0846ec4670ef2e7fcb3", "filename": "gcc/testsuite/g++.dg/overload/operator2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator2.C?ref=d20b71735eef2ea807d74252f78bba10f93b268c", "patch": "@@ -3,12 +3,12 @@\n \n struct A\n {\n-  static operator int(); // { dg-error \"10:.static A::operator int\\\\(\\\\). must be a nonstatic member function\" }\n+  static operator int(); // { dg-error \"10:.static A::operator int\\\\(\\\\). must be a non-static member function\" }\n };\n \n struct B\n {\n   static int operator*(); // { dg-error \"14:.static int B::operator\\\\*\\\\(\\\\). must be either a non-static member function or a non-member function\" }\n };\n \n-static operator int(); // { dg-error \"8:.operator int\\\\(\\\\). must be a nonstatic member function\" }\n+static operator int(); // { dg-error \"8:.operator int\\\\(\\\\). must be a non-static member function\" }"}, {"sha": "3a87872d526a62dfa6a4115dcbc30551650dce0b", "filename": "gcc/testsuite/g++.dg/template/error30.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror30.C?ref=d20b71735eef2ea807d74252f78bba10f93b268c", "patch": "@@ -2,4 +2,4 @@\n \n template<int> struct A;\n \n-template<template<typename> class B> A<B<int>::x> operator() (); // { dg-error \"51:.A<B<int>::x> operator\\\\(\\\\)\\\\(\\\\). must be a nonstatic member function\" }\n+template<template<typename> class B> A<B<int>::x> operator() (); // { dg-error \"51:.A<B<int>::x> operator\\\\(\\\\)\\\\(\\\\). must be a non-static member function\" }"}, {"sha": "79c1932a3530d5f5f6e63d2a2fbf17238154d61d", "filename": "gcc/testsuite/g++.old-deja/g++.jason/operator.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foperator.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20b71735eef2ea807d74252f78bba10f93b268c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foperator.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foperator.C?ref=d20b71735eef2ea807d74252f78bba10f93b268c", "patch": "@@ -6,7 +6,7 @@ typedef __SIZE_TYPE__ size_t;\n \n struct A {\n   int operator?:(int a, int b);\t   // { dg-error \"prohibits overloading\" } \n-  static int operator()(int a);\t   // { dg-error \"14:.static int A::operator\\\\(\\\\)\\\\(int\\\\). must be a nonstatic member function\" }\n+  static int operator()(int a);\t   // { dg-error \"14:.static int A::operator\\\\(\\\\)\\\\(int\\\\). must be a non-static member function\" }\n   static int operator+(A,A);\t   // { dg-error \"14:.static int A::operator\\\\+\\\\(A, A\\\\). must be either a non-static member function or a non-member function\" } \n   int operator+(int a, int b = 1); // { dg-error \"7:.int A::operator\\\\+\\\\(int, int\\\\). must have either zero or one argument\" }\n   int operator++(char);\t\t   // { dg-error \"7:postfix .int A::operator\\\\+\\\\+\\\\(char\\\\). must have .int. as its argument\" }\n@@ -29,4 +29,4 @@ void * operator new (A a);\t// { dg-error \".operator new. takes type .size_t.\" }\n void operator delete (A a);\t// { dg-error \".operator delete. takes type .void\\\\*. as first parameter\" }\n \n char * operator char * (int);\t// { dg-error \"return type\" \"ret\" }\n-// { dg-error \"8:.operator char\\\\*\\\\*\\\\(int\\\\). must be a nonstatic member function\" \"mem\" { target *-*-* } .-1 }\n+// { dg-error \"8:.operator char\\\\*\\\\*\\\\(int\\\\). must be a non-static member function\" \"mem\" { target *-*-* } .-1 }"}]}