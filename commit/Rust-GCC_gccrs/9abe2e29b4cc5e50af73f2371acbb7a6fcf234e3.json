{"sha": "9abe2e29b4cc5e50af73f2371acbb7a6fcf234e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFiZTJlMjliNGNjNWU1MGFmNzNmMjM3MWFjYmI3YTZmY2YyMzRlMw==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2002-02-23T00:15:49Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2002-02-23T00:15:49Z"}, "message": "URL.java (getPath): New JDK 1.3 method.\n\n\n\t* java/net/URL.java (getPath):  New JDK 1.3 method.\n\n\t* java/net/URLStreamHandler.java (parseURL):\n\tIt is wrong to prepend '/' to the file part of a relative url.\n\n\t* java/net/URLStreamHandler.java (parseURL):\n\tMinor optizations - append '/' rather than \"/\".\n\n\t* java/net/URLStreamHandler.java (parseURL):\n\tDon't canonicalize \"xx/..\" or \"./\" URLs - JDK doesn't.\n\tWe probably should canonicalize for a context-relative url, though.\n\t* java/net/URL.java (sameFile):  Delegate to URLStreamHandler.\n\t* java/net/URLStreamHandler.java (canonicalizeFilename):  New helper.\n\t(sameFile):  New method.  Uses canonicalizeFilename.\n\nFrom-SVN: r49980", "tree": {"sha": "81ce5a31be0e237c815380e8e7563a5b5edde010", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81ce5a31be0e237c815380e8e7563a5b5edde010"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9abe2e29b4cc5e50af73f2371acbb7a6fcf234e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9abe2e29b4cc5e50af73f2371acbb7a6fcf234e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9abe2e29b4cc5e50af73f2371acbb7a6fcf234e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9abe2e29b4cc5e50af73f2371acbb7a6fcf234e3/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43710f9f8933a7925b6fe656513a75c8fe6016d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43710f9f8933a7925b6fe656513a75c8fe6016d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43710f9f8933a7925b6fe656513a75c8fe6016d1"}], "stats": {"total": 78, "additions": 59, "deletions": 19}, "files": [{"sha": "168abd05f769ddbb5a7b0d0a6541eedd6f7bb662", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9abe2e29b4cc5e50af73f2371acbb7a6fcf234e3/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9abe2e29b4cc5e50af73f2371acbb7a6fcf234e3/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9abe2e29b4cc5e50af73f2371acbb7a6fcf234e3", "patch": "@@ -1,3 +1,20 @@\n+2002-02-20  Per Bothner  <per@bothner.com>\n+\n+\t* java/net/URL.java (getPath):  New JDK 1.3 method.\n+\n+\t* java/net/URLStreamHandler.java (parseURL):\n+\tIt is wrong to prepend '/' to the file part of a relative url.\n+\n+\t* java/net/URLStreamHandler.java (parseURL):\n+\tMinor optizations - append '/' rather than \"/\".\n+\n+\t* java/net/URLStreamHandler.java (parseURL):\n+\tDon't canonicalize \"xx/..\" or \"./\" URLs - JDK doesn't.\n+\tWe probably should canonicalize for a context-relative url, though.\n+\t* java/net/URL.java (sameFile):  Delegate to URLStreamHandler.\n+\t* java/net/URLStreamHandler.java (canonicalizeFilename):  New helper.\n+\t(sameFile):  New method.  Uses canonicalizeFilename.\n+\n 2002-02-22  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/natSystem.cc (init_properties): Include the `Inc.' in"}, {"sha": "a3e9d784cef2553d59459e438ea88070ea4e168c", "filename": "libjava/java/net/URL.java", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9abe2e29b4cc5e50af73f2371acbb7a6fcf234e3/libjava%2Fjava%2Fnet%2FURL.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9abe2e29b4cc5e50af73f2371acbb7a6fcf234e3/libjava%2Fjava%2Fnet%2FURL.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURL.java?ref=9abe2e29b4cc5e50af73f2371acbb7a6fcf234e3", "patch": "@@ -1,6 +1,6 @@\n // URL.java - A Uniform Resource Locator.\n \n-/* Copyright (C) 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -219,6 +219,12 @@ public String getFile()\n     return file;\n   }\n \n+  public String getPath()\n+  {\n+    int quest = file.indexOf('?');\n+    return quest < 0 ? file : file.substring(0, quest);\n+  }\n+\n   public String getHost()\n   {\n     return host;\n@@ -274,16 +280,7 @@ public final InputStream openStream() throws IOException\n \n   public boolean sameFile(URL other)\n   {\n-    // This comparison is very conservative.  It assumes that any\n-    // field can be null.\n-    return (other != null \n-\t    && port == other.port\n-\t    && ((protocol == null && other.protocol == null)\n-\t\t|| (protocol != null && protocol.equals(other.protocol)))\n-\t    && ((host == null && other.host == null)\n-\t\t|| (host != null && host.equals(other.host)))\n-\t    && ((file == null && other.file == null)\n-\t\t|| (file != null && file.equals(other.file))));\n+    return handler.sameFile(this, other);\n   }\n \n   protected void set(String protocol, String host, int port, String file,"}, {"sha": "bb3d8e802e15a9372cf3e1cfbc637380c57b674d", "filename": "libjava/java/net/URLStreamHandler.java", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9abe2e29b4cc5e50af73f2371acbb7a6fcf234e3/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9abe2e29b4cc5e50af73f2371acbb7a6fcf234e3/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLStreamHandler.java?ref=9abe2e29b4cc5e50af73f2371acbb7a6fcf234e3", "patch": "@@ -1,6 +1,6 @@\n // URLStreamHandler.java - Superclass of all stream protocol handlers.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -84,17 +84,20 @@ else if (host == null)\n     else if (file == null || file.length() <= 0)\n       {\n \t// No file context available; just spec for file.\n-\tfile = \"/\" + spec.substring(start, limit);\n+\tfile = spec.substring(start, limit);\n       }\n     else if (start < limit)\n       {\n \t// Context is available, but only override it if there is a new file.\n-        // FIXME: unsure to what extent `/` and File.separatorChar\n-\t//        can mix in URLs.  Ignore File.separatorChar for now.\n \tfile = file.substring(0, file.lastIndexOf('/'))\n-\t\t+ \"/\" + spec.substring(start, limit);\n+\t\t+ '/' + spec.substring(start, limit);\n       }\n \n+    u.set(u.getProtocol(), host, port, file, u.getRef());\n+  }\n+  \n+  private static String canonicalizeFilename(String file)\n+  {\n     int index;\n \n     // Replace \"/./\" with \"/\".  This probably isn't very efficient in\n@@ -113,10 +116,33 @@ else if (start < limit)\n \telse\n \t  break;\n       }\n-    \n-    u.set(u.getProtocol(), host, port, file, u.getRef());\n+    return file; \n   }\n-  \n+\n+  public boolean sameFile(URL url1, URL url2)\n+  {\n+    if (url1 == url2)\n+      return true;\n+    // This comparison is very conservative.  It assumes that any\n+    // field can be null.\n+    if (url1 == null || url2 == null || url1.getPort() != url2.getPort())\n+      return false;\n+    String s1, s2;\n+    s1 = url1.getProtocol();\n+    s2 = url2.getProtocol();\n+    if (s1 != s2 && (s1 == null || ! s1.equals(s2)))\n+      return false;\n+    s1 = url1.getHost();\n+    s2 = url2.getHost();\n+    if (s1 != s2 && (s1 == null || ! s1.equals(s2)))\n+      return false;\n+    s1 = canonicalizeFilename(url1.getFile());\n+    s2 = canonicalizeFilename(url2.getFile());\n+    if (s1 != s2 && (s1 == null || ! s1.equals(s2)))\n+      return false;\n+    return true;\n+  }\n+\n   protected void setURL(URL u, String protocol, String host, int port,\n \t\t\tString file, String ref)\n   {"}]}