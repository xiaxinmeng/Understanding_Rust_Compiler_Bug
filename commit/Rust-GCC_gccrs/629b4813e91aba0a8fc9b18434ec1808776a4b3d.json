{"sha": "629b4813e91aba0a8fc9b18434ec1808776a4b3d", "node_id": "C_kwDOANBUbNoAKDYyOWI0ODEzZTkxYWJhMGE4ZmM5YjE4NDM0ZWMxODA4Nzc2YTRiM2Q", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-10-06T19:46:49Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-10-06T19:46:49Z"}, "message": "analyzer: fix another ICE in PR 107158\n\nI overreduced PR analyzer/107158 in r13-3096-gef878564140cbc, and there\nwas another ICE in the original reproducer, which this patch fixes.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/107158\n\t* store.cc (store::replay_call_summary_cluster): Eliminate\n\tspecial-casing of RK_HEAP_ALLOCATED in favor of sharing code with\n\tRK_DECL, avoiding an ICE due to attempting to bind a\n\tcompound_svalue into a binding_cluster when an svalue in the\n\tsummary cluster converts to a compound_svalue in the caller.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/107158\n\t* gcc.dg/analyzer/call-summaries-pr107158-2.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "d37f1e060492fa031abf1dab55e2463db7a79924", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d37f1e060492fa031abf1dab55e2463db7a79924"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/629b4813e91aba0a8fc9b18434ec1808776a4b3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/629b4813e91aba0a8fc9b18434ec1808776a4b3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/629b4813e91aba0a8fc9b18434ec1808776a4b3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/629b4813e91aba0a8fc9b18434ec1808776a4b3d/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30d6356773a838366f6272f7e9900bacb31c44de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d6356773a838366f6272f7e9900bacb31c44de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30d6356773a838366f6272f7e9900bacb31c44de"}], "stats": {"total": 142, "additions": 114, "deletions": 28}, "files": [{"sha": "2631ea255593c18625cb66ec9880663916fbafcd", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629b4813e91aba0a8fc9b18434ec1808776a4b3d/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629b4813e91aba0a8fc9b18434ec1808776a4b3d/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=629b4813e91aba0a8fc9b18434ec1808776a4b3d", "patch": "@@ -3238,6 +3238,8 @@ store::replay_call_summary_cluster (call_summary_replay &r,\n \t\t   caller_sval, NULL /* uncertainty_t * */);\n       }\n       break;\n+\n+    case RK_HEAP_ALLOCATED:\n     case RK_DECL:\n       {\n \tconst region *caller_dest_reg\n@@ -3246,6 +3248,10 @@ store::replay_call_summary_cluster (call_summary_replay &r,\n \t  return;\n \tconst svalue *summary_sval\n \t  = summary.get_any_binding (mgr, summary_base_reg);\n+\tif (!summary_sval)\n+\t  summary_sval = reg_mgr->get_or_create_compound_svalue\n+\t    (summary_base_reg->get_type (),\n+\t     summary_cluster->get_map ());\n \tconst svalue *caller_sval\n \t  = r.convert_svalue_from_summary (summary_sval);\n \tif (!caller_sval)\n@@ -3255,34 +3261,6 @@ store::replay_call_summary_cluster (call_summary_replay &r,\n \t\t   caller_sval, NULL /* uncertainty_t * */);\n       }\n       break;\n-    case RK_HEAP_ALLOCATED:\n-      {\n-\tconst region *caller_dest_reg\n-\t  = r.convert_region_from_summary (summary_base_reg);\n-\tgcc_assert (caller_dest_reg);\n-\tbinding_cluster *caller_cluster\n-\t  = get_or_create_cluster (caller_dest_reg);\n-\tauto_vec <const binding_key *> summary_keys;\n-\tfor (auto kv : *summary_cluster)\n-\t  summary_keys.safe_push (kv.first);\n-\tsummary_keys.qsort (binding_key::cmp_ptrs);\n-\tfor (auto summary_key : summary_keys)\n-\t  {\n-\t    const binding_key *caller_key\n-\t      = r.convert_key_from_summary (summary_key);\n-\t    if (!caller_key)\n-\t      continue;\n-\t    const svalue *summary_sval\n-\t      = summary_cluster->get_map ().get (summary_key);\n-\t    const svalue *caller_sval\n-\t      = r.convert_svalue_from_summary (summary_sval);\n-\t    if (!caller_sval)\n-\t      caller_sval = reg_mgr->get_or_create_unknown_svalue\n-\t\t(summary_sval->get_type ());\n-\t    caller_cluster->bind_key (caller_key, caller_sval);\n-\t  }\n-      }\n-      break;\n \n     case RK_ALLOCA:\n       /* Ignore bindings of alloca regions in the summary.  */"}, {"sha": "c2e9e2ba9f2674c4eff3716944f6ecf2283b2f80", "filename": "gcc/testsuite/gcc.dg/analyzer/call-summaries-pr107158-2.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629b4813e91aba0a8fc9b18434ec1808776a4b3d/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcall-summaries-pr107158-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629b4813e91aba0a8fc9b18434ec1808776a4b3d/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcall-summaries-pr107158-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcall-summaries-pr107158-2.c?ref=629b4813e91aba0a8fc9b18434ec1808776a4b3d", "patch": "@@ -0,0 +1,108 @@\n+/* { dg-additional-options \"-fanalyzer-call-summaries -Wno-analyzer-too-complex\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+typedef struct _IO_FILE FILE;\n+extern char *fgets(char *__restrict __s, int __n, FILE *__restrict __stream)\n+    __attribute__((__access__(__write_only__, 1, 2)));\n+extern void perror(const char *__s);\n+enum {\n+  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),\n+};\n+extern const unsigned short int **__ctype_b_loc(void)\n+    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));\n+extern void *malloc(size_t __size) __attribute__((__nothrow__, __leaf__))\n+__attribute__((__malloc__)) __attribute__((__alloc_size__(1)));\n+extern void exit(int __status) __attribute__((__nothrow__, __leaf__))\n+__attribute__((__noreturn__));\n+extern char *strcpy(char *__restrict __dest, const char *__restrict __src)\n+    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));\n+extern size_t strlen(const char *__s) __attribute__((__nothrow__, __leaf__))\n+__attribute__((__pure__)) __attribute__((__nonnull__(1)));\n+\n+struct mydata {\n+  struct mydata *link;\n+  char *name;\n+  char *type;\n+};\n+\n+static struct mydata *all_data;\n+static int line_no;\n+\n+_Noreturn static void failed(const char *message) {\n+  perror(message);\n+  exit(1);\n+}\n+\n+static char *string_dup(const char *string) {\n+  char *buf;\n+\n+  if ((buf = malloc(strlen(string) + 1)) == ((void *)0))\n+    failed(\"malloc() failed\");\n+\n+  return strcpy(buf, string);\n+}\n+\n+static void store_data(const char *name, const char *type) {\n+  struct mydata *p, *q;\n+\n+  if ((p = (struct mydata *)malloc(sizeof(struct mydata))) == ((void *)0))\n+    failed(\"malloc() failed\");\n+\n+  p->link = ((void *)0);\n+  p->name = string_dup(name);\n+  p->type = string_dup(type);\n+\n+  if ((q = all_data) == ((void *)0))\n+    all_data = p;\n+  else {\n+    while (q->link != ((void *)0))\n+      q = q->link;\n+    q->link = p;\n+  }\n+}\n+\n+static void parse_tbl(char *buffer) {\n+  char *s = buffer;\n+  char *t = s + strlen(s);\n+\n+  do {\n+    t--;\n+    if (((*__ctype_b_loc())[(int)(((int)*t))] & (unsigned short int)_ISspace))\n+      *t = '\\0';\n+    else\n+      break;\n+  } while (t > s);\n+  while (((*__ctype_b_loc())[(int)(((int)*s))] & (unsigned short int)_ISspace))\n+    s++;\n+  buffer = s;\n+\n+  line_no++;\n+  if (*buffer != ';' && *buffer != '\\0') {\n+    if (*buffer == '#') {\n+      store_data(buffer, \"\"); /* { dg-bogus \"leak\" \"PR analyzer/107158\" { xfail *-*-* } } */\n+    } else {\n+\n+      while (*s && !((*__ctype_b_loc())[(int)(((int)*s))] &\n+                     (unsigned short int)_ISspace))\n+        s++;\n+      while (\n+          ((*__ctype_b_loc())[(int)(((int)*s))] & (unsigned short int)_ISspace))\n+        *s++ = '\\0';\n+      store_data(buffer, s); /* { dg-bogus \"leak\" \"PR analyzer/107158\" { xfail *-*-* } } */\n+    }\n+  }\n+}\n+\n+/* [...snip...] */\n+\n+static void makecfg(FILE *ifp, FILE *ofp, FILE *ofp2) {\n+  char buffer[8192];\n+\n+  /* [...snip...] */\n+\n+  line_no = 0;\n+  while (fgets(buffer, sizeof(buffer) - 1, ifp))\n+    parse_tbl(buffer);\n+\n+  /* [...snip...] */\n+}"}]}