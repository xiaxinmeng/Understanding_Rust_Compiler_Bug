{"sha": "9e5a6ee7c81968a13169634a16aef746e540c679", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU1YTZlZTdjODE5NjhhMTMxNjk2MzRhMTZhZWY3NDZlNTQwYzY3OQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2014-07-30T15:06:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T15:06:40Z"}, "message": "lib-load.ads: Minor reformatting.\n\n2014-07-30  Thomas Quinot  <quinot@adacore.com>\n\n\t* lib-load.ads: Minor reformatting.\n\t* sinfo.ads (Library_Unit): Update comment.\n\t* lib.ads (Notes): Simplify. The Unit component in Notes_Entry\n\tis redundant. Instead used the pragma Node_Id directly as the\n\telement type.\n\n2014-07-30  Thomas Quinot  <quinot@adacore.com>\n\n\t* lib.adb (Store_Note): Store only notes that do not come from\n\tan instance, and that are in the extended main source unit.\n\t* lib-writ (Write_Unit_Information): Annotations from subunits\n\tmust be emitted along with those for the main unit, and they\n\tmust carry a specific file name.\n\t* ali.ads (Notes_Record): Use a File_Name_Type instead of a\n\tUnit_Id for the source file containing the pragma, as in the\n\tcase of annotations from subunits we might not have a readily\n\tavailable unit id.\n\t* ali.adb (Scan_ALI): Account for above change in data structure.\n\nFrom-SVN: r213295", "tree": {"sha": "46db6c49f7ba8ac1fa6a4df8a2f682e1e8fccfed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46db6c49f7ba8ac1fa6a4df8a2f682e1e8fccfed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e5a6ee7c81968a13169634a16aef746e540c679", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e5a6ee7c81968a13169634a16aef746e540c679", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e5a6ee7c81968a13169634a16aef746e540c679", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e5a6ee7c81968a13169634a16aef746e540c679/comments", "author": null, "committer": null, "parents": [{"sha": "3ea8f61e9fcdc8e9b558d5c03cafdec439de0147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ea8f61e9fcdc8e9b558d5c03cafdec439de0147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ea8f61e9fcdc8e9b558d5c03cafdec439de0147"}], "stats": {"total": 106, "additions": 82, "deletions": 24}, "files": [{"sha": "febc9a8283bb03e8a149fecabb5e97d5243dfe87", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5a6ee7c81968a13169634a16aef746e540c679/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5a6ee7c81968a13169634a16aef746e540c679/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9e5a6ee7c81968a13169634a16aef746e540c679", "patch": "@@ -1,3 +1,24 @@\n+2014-07-30  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* lib-load.ads: Minor reformatting.\n+\t* sinfo.ads (Library_Unit): Update comment.\n+\t* lib.ads (Notes): Simplify. The Unit component in Notes_Entry\n+\tis redundant. Instead used the pragma Node_Id directly as the\n+\telement type.\n+\n+2014-07-30  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* lib.adb (Store_Note): Store only notes that do not come from\n+\tan instance, and that are in the extended main source unit.\n+\t* lib-writ (Write_Unit_Information): Annotations from subunits\n+\tmust be emitted along with those for the main unit, and they\n+\tmust carry a specific file name.\n+\t* ali.ads (Notes_Record): Use a File_Name_Type instead of a\n+\tUnit_Id for the source file containing the pragma, as in the\n+\tcase of annotations from subunits we might not have a readily\n+\tavailable unit id.\n+\t* ali.adb (Scan_ALI): Account for above change in data structure.\n+\n 2014-07-30  Vincent Celier  <celier@adacore.com>\n \n \t* makeutl.adb (Insert_Project_Sources): When the library project"}, {"sha": "a899ca7468192d76bf5dec9b6895cb396ff21981", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5a6ee7c81968a13169634a16aef746e540c679/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5a6ee7c81968a13169634a16aef746e540c679/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=9e5a6ee7c81968a13169634a16aef746e540c679", "patch": "@@ -2185,20 +2185,30 @@ package body ALI is\n                Notes.Table (Notes.Last).Pragma_Line := Get_Nat;\n                Checkc (':');\n                Notes.Table (Notes.Last).Pragma_Col  := Get_Nat;\n-               Notes.Table (Notes.Last).Unit        := Units.Last;\n+\n+               if not At_Eol and then Nextc = ':' then\n+                  Checkc (':');\n+                  Notes.Table (Notes.Last).Pragma_Source_File :=\n+                    Get_File_Name (Lower => True);\n+               else\n+                  Notes.Table (Notes.Last).Pragma_Source_File :=\n+                    Units.Table (Units.Last).Sfile;\n+               end if;\n \n                if At_Eol then\n                   Notes.Table (Notes.Last).Pragma_Args := No_Name;\n \n                else\n+                  --  Note: can't use Get_Name here as the remainder of the\n+                  --  line is unstructured text whose syntax depends on the\n+                  --  particular pragma used.\n+\n                   Checkc (' ');\n \n                   Name_Len := 0;\n                   while not At_Eol loop\n                      Add_Char_To_Name_Buffer (Getc);\n                   end loop;\n-\n-                  Notes.Table (Notes.Last).Pragma_Args := Name_Enter;\n                end if;\n \n                Skip_Eol;"}, {"sha": "130284b41f08448500c11f61d643e165492ffe5e", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5a6ee7c81968a13169634a16aef746e540c679/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5a6ee7c81968a13169634a16aef746e540c679/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=9e5a6ee7c81968a13169634a16aef746e540c679", "patch": "@@ -669,8 +669,8 @@ package ALI is\n       Pragma_Col : Nat;\n       --  Column number of pragma\n \n-      Unit : Unit_Id;\n-      --  Unit_Id for the entry\n+      Pragma_Source_File : File_Name_Type;\n+      --  Source file of pragma\n \n       Pragma_Args : Name_Id;\n       --  Pragma arguments. No_Name if no arguments, otherwise a single"}, {"sha": "a8f779d67da75e65afc678a7cec778369a12a2f5", "filename": "gcc/ada/lib-load.ads", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5a6ee7c81968a13169634a16aef746e540c679/gcc%2Fada%2Flib-load.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5a6ee7c81968a13169634a16aef746e540c679/gcc%2Fada%2Flib-load.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.ads?ref=9e5a6ee7c81968a13169634a16aef746e540c679", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -103,14 +103,14 @@ package Lib.Load is\n    --  and then closed on return.\n \n    function Load_Unit\n-     (Load_Name         : Unit_Name_Type;\n-      Required          : Boolean;\n-      Error_Node        : Node_Id;\n-      Subunit           : Boolean;\n-      Corr_Body         : Unit_Number_Type := No_Unit;\n-      Renamings         : Boolean          := False;\n-      With_Node         : Node_Id          := Empty;\n-      PMES              : Boolean          := False) return Unit_Number_Type;\n+     (Load_Name  : Unit_Name_Type;\n+      Required   : Boolean;\n+      Error_Node : Node_Id;\n+      Subunit    : Boolean;\n+      Corr_Body  : Unit_Number_Type := No_Unit;\n+      Renamings  : Boolean          := False;\n+      With_Node  : Node_Id          := Empty;\n+      PMES       : Boolean          := False) return Unit_Number_Type;\n    --  This function loads and parses the unit specified by Load_Name (or\n    --  returns the unit number for the previously constructed units table\n    --  entry if this is not the first call for this unit). Required indicates"}, {"sha": "92c43247e0518313334da9ea47172b26a1b5e4f2", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5a6ee7c81968a13169634a16aef746e540c679/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5a6ee7c81968a13169634a16aef746e540c679/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=9e5a6ee7c81968a13169634a16aef746e540c679", "patch": "@@ -647,13 +647,26 @@ package body Lib.Writ is\n \n          for J in 1 .. Notes.Last loop\n             declare\n-               N : constant Node_Id          := Notes.Table (J).Pragma_Node;\n+               N : constant Node_Id          := Notes.Table (J);\n                L : constant Source_Ptr       := Sloc (N);\n-               U : constant Unit_Number_Type := Notes.Table (J).Unit;\n+               U : constant Unit_Number_Type :=\n+                     Unit (Get_Source_File_Index (L));\n                C : Character;\n \n+               Note_Unit : Unit_Number_Type;\n+               --  The unit in whose U section this note must be emitted:\n+               --  notes for subunits are emitted along with the main unit;\n+               --  all other notes are emitted as part of the enclosing\n+               --  compilation unit.\n+\n             begin\n-               if U = Unit_Num then\n+               if Nkind (Unit (Cunit (U))) = N_Subunit then\n+                  Note_Unit := Main_Unit;\n+               else\n+                  Note_Unit := U;\n+               end if;\n+\n+               if Note_Unit = Unit_Num then\n                   Write_Info_Initiate ('N');\n                   Write_Info_Char (' ');\n \n@@ -677,6 +690,15 @@ package body Lib.Writ is\n                   Write_Info_Char (':');\n                   Write_Info_Int (Int (Get_Column_Number (L)));\n \n+                  --  Indicate source file of annotation if different from\n+                  --  compilation unit source file (case of annotation coming\n+                  --  from a separate).\n+\n+                  if Get_Source_File_Index (L) /= Source_Index (Unit_Num) then\n+                     Write_Info_Char (':');\n+                     Write_Info_Name (File_Name (Get_Source_File_Index (L)));\n+                  end if;\n+\n                   declare\n                      A : Node_Id;\n "}, {"sha": "04a0d397bdf9da5818521ab8a062216a99b0f1ce", "filename": "gcc/ada/lib.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5a6ee7c81968a13169634a16aef746e540c679/gcc%2Fada%2Flib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5a6ee7c81968a13169634a16aef746e540c679/gcc%2Fada%2Flib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.adb?ref=9e5a6ee7c81968a13169634a16aef746e540c679", "patch": "@@ -1046,8 +1046,16 @@ package body Lib is\n    ----------------\n \n    procedure Store_Note (N : Node_Id) is\n+      Sfile : constant Source_File_Index := Get_Source_File_Index (Sloc (N));\n    begin\n-      Notes.Append ((Pragma_Node => N, Unit => Current_Sem_Unit));\n+      --  Notes for a generic are emitted when processing the template, never\n+      --  in instances.\n+\n+      if In_Extended_Main_Code_Unit (N)\n+        and then Instance (Sfile) = No_Instance_Id\n+      then\n+         Notes.Append (N);\n+      end if;\n    end Store_Note;\n \n    -------------------------------"}, {"sha": "a2a2410f5a7b948525e89471c9dc1857c76c012c", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5a6ee7c81968a13169634a16aef746e540c679/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5a6ee7c81968a13169634a16aef746e540c679/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=9e5a6ee7c81968a13169634a16aef746e540c679", "patch": "@@ -826,13 +826,8 @@ private\n \n    --  The following table stores references to pragmas that generate Notes\n \n-   type Notes_Entry is record\n-      Pragma_Node : Node_Id;\n-      Unit        : Unit_Number_Type;\n-   end record;\n-\n    package Notes is new Table.Table (\n-     Table_Component_Type => Notes_Entry,\n+     Table_Component_Type => Node_Id,\n      Table_Index_Type     => Integer,\n      Table_Low_Bound      => 1,\n      Table_Initial        => Alloc.Notes_Initial,"}, {"sha": "211e0094c116f7ce22a1ab3a75e931ba03bf0474", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5a6ee7c81968a13169634a16aef746e540c679/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5a6ee7c81968a13169634a16aef746e540c679/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=9e5a6ee7c81968a13169634a16aef746e540c679", "patch": "@@ -1685,6 +1685,8 @@ package Sinfo is\n    --\n    --     For a subunit, Library_Unit points to the compilation unit node of\n    --     the parent body.\n+   --     ??? not (always) true, in (at least some, maybe all?) cases it points\n+   --     to the corresponding spec for the parent body.\n    --\n    --    Note that this field is not used to hold the parent pointer for child\n    --    unit (which might in any case need to use it for some other purpose as"}]}