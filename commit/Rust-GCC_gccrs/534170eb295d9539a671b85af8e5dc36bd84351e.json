{"sha": "534170eb295d9539a671b85af8e5dc36bd84351e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM0MTcwZWIyOTVkOTUzOWE2NzFiODVhZjhlNWRjMzZiZDg0MzUxZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-01-25T06:33:06Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-01-25T06:33:06Z"}, "message": "class.c (layout_class_type): Put the fields required to make a class non-empty at the end...\n\n\t* class.c (layout_class_type): Put the fields required to make a\n\tclass non-empty at the end, not the beginning, of the TYPE_FIELDs\n\tlist.\n\nFrom-SVN: r31603", "tree": {"sha": "2ba18959240138c87e11f18d4468626dd645f739", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ba18959240138c87e11f18d4468626dd645f739"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/534170eb295d9539a671b85af8e5dc36bd84351e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/534170eb295d9539a671b85af8e5dc36bd84351e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/534170eb295d9539a671b85af8e5dc36bd84351e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/534170eb295d9539a671b85af8e5dc36bd84351e/comments", "author": null, "committer": null, "parents": [{"sha": "1865dbb5e2cac2bdcbfdc136b57ef079a1b3adff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1865dbb5e2cac2bdcbfdc136b57ef079a1b3adff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1865dbb5e2cac2bdcbfdc136b57ef079a1b3adff"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "7e23bcea9b53f0e56e62a86f32955315df0d5802", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/534170eb295d9539a671b85af8e5dc36bd84351e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/534170eb295d9539a671b85af8e5dc36bd84351e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=534170eb295d9539a671b85af8e5dc36bd84351e", "patch": "@@ -1,3 +1,9 @@\n+2000-01-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* class.c (layout_class_type): Put the fields required to make a\n+\tclass non-empty at the end, not the beginning, of the TYPE_FIELDs\n+\tlist.\n+\n 2000-01-24  Jason Merrill  <jason@casey.cygnus.com>\n \n \t* pt.c (maybe_fold_nontype_arg): Do nothing if we're not in a"}, {"sha": "aaa90cc429e9a4109c87b626d9870447aa37a2f4", "filename": "gcc/cp/class.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/534170eb295d9539a671b85af8e5dc36bd84351e/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/534170eb295d9539a671b85af8e5dc36bd84351e/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=534170eb295d9539a671b85af8e5dc36bd84351e", "patch": "@@ -4688,6 +4688,8 @@ layout_class_type (t, empty_p, has_virtual_p,\n      tree *new_virtuals_p;\n      tree *overridden_virtuals_p;\n {\n+  tree padding = NULL_TREE;\n+\n   /* If possible, we reuse the virtual function table pointer from one\n      of our base classes.  */\n   determine_primary_base (t, has_virtual_p);\n@@ -4712,15 +4714,17 @@ layout_class_type (t, empty_p, has_virtual_p,\n      have non-zero size.  The field that we add here is fake, in the\n      sense that, for example, we don't want people to be able to\n      initialize it later.  So, we add it just long enough to let the\n-     back-end lay out the type, and then remove it.  */\n+     back-end lay out the type, and then remove it.  In the new ABI,\n+     the class may be empty even if it has basetypes.  Therefore, we\n+     add the fake field at the end of the fields list; if there are\n+     already FIELD_DECLs on the list, their offsets will not be\n+     disturbed.  */\n   if (*empty_p)\n     {\n-      tree decl = build_lang_decl\n-\t(FIELD_DECL, NULL_TREE, char_type_node);\n-      TREE_CHAIN (decl) = TYPE_FIELDS (t);\n-      TYPE_FIELDS (t) = decl;\n+      padding = build_lang_decl (FIELD_DECL, NULL_TREE, char_type_node);\n+      TYPE_FIELDS (t) = chainon (TYPE_FIELDS (t), padding);\n       TYPE_NONCOPIED_PARTS (t) \n-\t= tree_cons (NULL_TREE, decl, TYPE_NONCOPIED_PARTS (t));\n+\t= tree_cons (NULL_TREE, padding, TYPE_NONCOPIED_PARTS (t));\n       TREE_STATIC (TYPE_NONCOPIED_PARTS (t)) = 1;\n     }\n \n@@ -4734,7 +4738,14 @@ layout_class_type (t, empty_p, has_virtual_p,\n   /* If we added an extra field to make this class non-empty, remove\n      it now.  */\n   if (*empty_p)\n-    TYPE_FIELDS (t) = TREE_CHAIN (TYPE_FIELDS (t));\n+    {\n+      tree *declp;\n+\n+      declp = &TYPE_FIELDS (t);\n+      while (*declp != padding)\n+\tdeclp = &TREE_CHAIN (*declp);\n+      *declp = TREE_CHAIN (*declp);\n+    }\n \n   /* Delete all zero-width bit-fields from the list of fields.  Now\n      that the type is laid out they are no longer important.  */"}]}