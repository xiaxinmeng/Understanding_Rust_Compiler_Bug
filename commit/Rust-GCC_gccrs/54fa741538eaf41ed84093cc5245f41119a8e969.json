{"sha": "54fa741538eaf41ed84093cc5245f41119a8e969", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRmYTc0MTUzOGVhZjQxZWQ4NDA5M2NjNTI0NWY0MTExOWE4ZTk2OQ==", "commit": {"author": {"name": "Steven King", "email": "sxking@uswest.net", "date": "2000-06-06T20:26:13Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-06-06T20:26:13Z"}, "message": "acconfig.h: Added defines for HAVE_BUILTIN math functs for float, double and long double.\n\n\n\n2000-06-06  Steven King <sxking@uswest.net>\n\n        * acconfig.h: Added defines for HAVE_BUILTIN math functs for float,\n        double and long double.  Added defines for HAVE libm math functs for\n        float and long double.\n        * aclocal.m4: Added configure checks for builtin math funcs and libm\n        support for float and long double versions of the math functions.\n        * config.h.in: Added undefs for math functs.\n        * configure: Regenerate.\n        * math/mathconf: Changed the _GLIBCPP_HAS_BUILTIN_* to\n        _GLIBCPP_HAVE_BUILTIN_*.\n        * bits/std_cmath.h: Added long double support.  Use builtins for\n        float, double and long if available, otherwise, use libm versions if\n        availible, otherwise, punt.\n        * shadow/bits/std_cmath.h: ditto\n\nFrom-SVN: r34436", "tree": {"sha": "f2a58b50b7ee8a544992b80f3a50a2195923ba43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2a58b50b7ee8a544992b80f3a50a2195923ba43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54fa741538eaf41ed84093cc5245f41119a8e969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54fa741538eaf41ed84093cc5245f41119a8e969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54fa741538eaf41ed84093cc5245f41119a8e969", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54fa741538eaf41ed84093cc5245f41119a8e969/comments", "author": null, "committer": null, "parents": [{"sha": "764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/764dbbf2ddb0b5602ae03f0ecb2c8078587e41dd"}], "stats": {"total": 6404, "additions": 5618, "deletions": 786}, "files": [{"sha": "961e57a77f9a09aa33fda54e6fc62907b522db99", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=54fa741538eaf41ed84093cc5245f41119a8e969", "patch": "@@ -1,3 +1,19 @@\n+2000-06-06  Steven King  <sxking@uswest.net>\n+\n+\t* acconfig.h: Added defines for HAVE_BUILTIN math functs for float,\n+\tdouble and long double.  Added defines for HAVE libm math functs for\n+\tfloat and long double.\n+\t* aclocal.m4: Added configure checks for builtin math funcs and libm\n+\tsupport for float and long double versions of the math functions.\n+\t* config.h.in: Added undefs for math functs.\n+\t* configure: Regenerate.\n+\t* math/mathconf: Changed the _GLIBCPP_HAS_BUILTIN_* to\n+\t_GLIBCPP_HAVE_BUILTIN_*.\n+\t* bits/std_cmath.h: Added long double support.  Use builtins for\n+\tfloat, double and long if available, otherwise, use libm versions if\n+\tavailible, otherwise, punt.\n+\t* shadow/bits/std_cmath.h: ditto\n+\n 2000-06-02  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* bits/locale_facets.h: Tweak."}, {"sha": "510465d65599ea1849fa7f3bc6b3d3b72e27b0d5", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 355, "deletions": 13, "changes": 368, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=54fa741538eaf41ed84093cc5245f41119a8e969", "patch": "@@ -12,17 +12,194 @@\n // Define if code specialized for wchar_t should be used.\n #undef _GLIBCPP_USE_WCHAR_T\n \n-// Define if the compiler/host combination has __builtin_sinf defined.\n-#undef _GLIBCPP_HAS_BUILTIN_SINF\n+// Define if the compiler/host combination has __builtin_acos\n+#undef HAVE_BUILTIN_ACOS\n \n-// Define if the compiler/host combination has __builtin_cosf defined.\n-#undef _GLIBCPP_HAS_BUILTIN_COSF\n+// Define if the compiler/host combination has __builtin_acosf\n+#undef HAVE_BUILTIN_ACOSF\n \n-// Define if the compiler/host combination has __builtin_fabsf defined.\n-#undef _GLIBCPP_HAS_BUILTIN_FABSF\n+// Define if the compiler/host combination has __builtin_acosl\n+#undef HAVE_BUILTIN_ACOSL\n \n-// Define if the compiler/host combination has __builtin_fabsf defined.\n-#undef _GLIBCPP_HAS_BUILTIN_SQRTF\n+// Define if the compiler/host combination has __builtin_asin\n+#undef HAVE_BUILTIN_ASIN\n+\n+// Define if the compiler/host combination has __builtin_asinf\n+#undef HAVE_BUILTIN_ASINF\n+\n+// Define if the compiler/host combination has __builtin_asinl\n+#undef HAVE_BUILTIN_ASINL\n+\n+// Define if the compiler/host combination has __builtin_atan\n+#undef HAVE_BUILTIN_ATAN\n+\n+// Define if the compiler/host combination has __builtin_atanf\n+#undef HAVE_BUILTIN_ATANF\n+\n+// Define if the compiler/host combination has __builtin_atanl\n+#undef HAVE_BUILTIN_ATANL\n+\n+// Define if the compiler/host combination has __builtin_atan2\n+#undef HAVE_BUILTIN_ATAN2\n+\n+// Define if the compiler/host combination has __builtin_atan2f\n+#undef HAVE_BUILTIN_ATAN2F\n+\n+// Define if the compiler/host combination has __builtin_atan2l\n+#undef HAVE_BUILTIN_ATAN2L\n+\n+// Define if the compiler/host combination has __builtin_ceil\n+#undef HAVE_BUILTIN_CEIL\n+\n+// Define if the compiler/host combination has __builtin_ceilf\n+#undef HAVE_BUILTIN_CEILF\n+\n+// Define if the compiler/host combination has __builtin_ceill\n+#undef HAVE_BUILTIN_CEILL\n+\n+// Define if the compiler/host combination has __builtin_cos\n+#undef HAVE_BUILTIN_COS\n+\n+// Define if the compiler/host combination has __builtin_cosf\n+#undef HAVE_BUILTIN_COSF\n+\n+// Define if the compiler/host combination has __builtin_cosl\n+#undef HAVE_BUILTIN_COSL\n+\n+// Define if the compiler/host combination has __builtin_cosh\n+#undef HAVE_BUILTIN_COSH\n+\n+// Define if the compiler/host combination has __builtin_coshf\n+#undef HAVE_BUILTIN_COSHF\n+\n+// Define if the compiler/host combination has __builtin_coshl\n+#undef HAVE_BUILTIN_COSHL\n+\n+// Define if the compiler/host combination has __builtin_exp\n+#undef HAVE_BUILTIN_EXP\n+\n+// Define if the compiler/host combination has __builtin_expf\n+#undef HAVE_BUILTIN_EXPF\n+\n+// Define if the compiler/host combination has __builtin_expl\n+#undef HAVE_BUILTIN_EXPL\n+\n+// Define if the compiler/host combination has __builtin_fabs\n+#undef HAVE_BUILTIN_FABS\n+\n+// Define if the compiler/host combination has __builtin_fabsf\n+#undef HAVE_BUILTIN_FABSF\n+\n+// Define if the compiler/host combination has __builtin_fabsl\n+#undef HAVE_BUILTIN_FABSL\n+\n+// Define if the compiler/host combination has __builtin_floor\n+#undef HAVE_BUILTIN_FLOOR\n+\n+// Define if the compiler/host combination has __builtin_floorf\n+#undef HAVE_BUILTIN_FLOORF\n+\n+// Define if the compiler/host combination has __builtin_floorl\n+#undef HAVE_BUILTIN_FLOORL\n+\n+// Define if the compiler/host combination has __builtin_frexp\n+#undef HAVE_BUILTIN_FREXP\n+\n+// Define if the compiler/host combination has __builtin_frexpf\n+#undef HAVE_BUILTIN_FREXPF\n+\n+// Define if the compiler/host combination has __builtin_frexpl\n+#undef HAVE_BUILTIN_FREXPL\n+\n+// Define if the compiler/host combination has __builtin_ldexp\n+#undef HAVE_BUILTIN_LDEXP\n+\n+// Define if the compiler/host combination has __builtin_ldexpf\n+#undef HAVE_BUILTIN_LDEXPF\n+\n+// Define if the compiler/host combination has __builtin_ldexpl\n+#undef HAVE_BUILTIN_LDEXPL\n+\n+// Define if the compiler/host combination has __builtin_log\n+#undef HAVE_BUILTIN_LOG\n+\n+// Define if the compiler/host combination has __builtin_logf\n+#undef HAVE_BUILTIN_LOGF\n+\n+// Define if the compiler/host combination has __builtin_logl\n+#undef HAVE_BUILTIN_LOGL\n+\n+// Define if the compiler/host combination has __builtin_log10\n+#undef HAVE_BUILTIN_LOG10\n+\n+// Define if the compiler/host combination has __builtin_log10f\n+#undef HAVE_BUILTIN_LOG10F\n+\n+// Define if the compiler/host combination has __builtin_log10l\n+#undef HAVE_BUILTIN_LOG10L\n+\n+// Define if the compiler/host combination has __builtin_modf\n+#undef HAVE_BUILTIN_MODF\n+\n+// Define if the compiler/host combination has __builtin_modff\n+#undef HAVE_BUILTIN_MODFF\n+\n+// Define if the compiler/host combination has __builtin_modfl\n+#undef HAVE_BUILTIN_MODFL\n+\n+// Define if the compiler/host combination has __builtin_pow\n+#undef HAVE_BUILTIN_POW\n+\n+// Define if the compiler/host combination has __builtin_powf\n+#undef HAVE_BUILTIN_POWF\n+\n+// Define if the compiler/host combination has __builtin_powl\n+#undef HAVE_BUILTIN_POWL\n+\n+// Define if the compiler/host combination has __builtin_sin\n+#undef HAVE_BUILTIN_SIN\n+\n+// Define if the compiler/host combination has __builtin_sinf\n+#undef HAVE_BUILTIN_SINF\n+\n+// Define if the compiler/host combination has __builtin_sinl\n+#undef HAVE_BUILTIN_SINL\n+\n+// Define if the compiler/host combination has __builtin_sinh\n+#undef HAVE_BUILTIN_SINH\n+\n+// Define if the compiler/host combination has __builtin_sinhf\n+#undef HAVE_BUILTIN_SINHF\n+\n+// Define if the compiler/host combination has __builtin_sinhl\n+#undef HAVE_BUILTIN_SINHL\n+\n+// Define if the compiler/host combination has __builtin_sqrt\n+#undef HAVE_BUILTIN_SQRT\n+\n+// Define if the compiler/host combination has __builtin_sqrtf\n+#undef HAVE_BUILTIN_SQRTF\n+\n+// Define if the compiler/host combination has __builtin_sqrtl\n+#undef HAVE_BUILTIN_SQRTL\n+\n+// Define if the compiler/host combination has __builtin_tan\n+#undef HAVE_BUILTIN_TAN\n+\n+// Define if the compiler/host combination has __builtin_tanf\n+#undef HAVE_BUILTIN_TANF\n+\n+// Define if the compiler/host combination has __builtin_tanl\n+#undef HAVE_BUILTIN_TANL\n+\n+// Define if the compiler/host combination has __builtin_tanh\n+#undef HAVE_BUILTIN_TANH\n+\n+// Define if the compiler/host combination has __builtin_tanhf\n+#undef HAVE_BUILTIN_TANHF\n+\n+// Define if the compiler/host combination has __builtin_tanhl\n+#undef HAVE_BUILTIN_TANHL\n \n // Define if GCC support for __complex__ float is buggy.\n #undef _GLIBCPP_BUGGY_FLOAT_COMPLEX\n@@ -90,66 +267,221 @@\n # define cosf _cosf\n #endif\n \n+#if defined (HAVE__ACOSF) && ! defined (HAVE_ACOSF)\n+# define HAVE_ACOSF 1\n+# define acosf _acosf\n+#endif\n+\n+#if defined (HAVE__ACOSL) && ! defined (HAVE_ACOSL)\n+# define HAVE_ACOSL 1\n+# define acosl _acosl\n+#endif\n+\n+#if defined (HAVE__ASINF) && ! defined (HAVE_ASINF)\n+# define HAVE_ASINF 1\n+# define asinf _asinf\n+#endif\n+\n+#if defined (HAVE__ASINL) && ! defined (HAVE_ASINL)\n+# define HAVE_ASINL 1\n+# define asinl _asinl\n+#endif\n+\n+#if defined (HAVE__ATANF) && ! defined (HAVE_ATANF)\n+# define HAVE_ATANF 1\n+# define atanf _atanf\n+#endif\n+\n+#if defined (HAVE__ATANL) && ! defined (HAVE_ATANL)\n+# define HAVE_ATANL 1\n+# define atanl _atanl\n+#endif\n+\n+#if defined (HAVE__CEILF) && ! defined (HAVE_CEILF)\n+# define HAVE_CEILF 1\n+# define aceil _ceilf\n+#endif\n+\n+#if defined (HAVE__CEILL) && ! defined (HAVE_CEILL)\n+# define HAVE_CEILL 1\n+# define aceil _ceill\n+#endif\n+\n #if defined (HAVE__COSHF) && ! defined (HAVE_COSHF)\n # define HAVE_COSHF 1\n # define coshf _coshf\n #endif\n \n+#if defined (HAVE__COSL) && ! defined (HAVE_COSL)\n+# define HAVE_COSL 1\n+# define cosl _cosl\n+#endif\n+\n #if defined (HAVE__LOGF) && ! defined (HAVE_LOGF)\n # define HAVE_LOGF 1\n # define logf _logf\n #endif\n \n+#if defined (HAVE__COSHL) && ! defined (HAVE_COSHL)\n+# define HAVE_COSHL 1\n+# define coshl _coshl\n+#endif\n+\n+#if defined (HAVE__EXPF) && ! defined (HAVE_EXPF)\n+# define HAVE_EXPF 1\n+# define expf _expf\n+#endif\n+\n+#if defined (HAVE__EXPL) && ! defined (HAVE_EXPL)\n+# define HAVE_EXPL 1\n+# define expl _expl\n+#endif\n+\n+#if defined (HAVE__FABSF) && ! defined (HAVE_FABSF)\n+# define HAVE_FABSF 1\n+# define fabsf _fabsf\n+#endif\n+\n+#if defined (HAVE__FABSL) && ! defined (HAVE_FABSL)\n+# define HAVE_FABSL 1\n+# define fabsl _fabsl\n+#endif\n+\n+#if defined (HAVE__FLOORF) && ! defined (HAVE_FLOORF)\n+# define HAVE_FLOORF 1\n+# define floorf _floorf\n+#endif\n+\n+#if defined (HAVE__FLOORL) && ! defined (HAVE_FLOORL)\n+# define HAVE_FLOORL 1\n+# define floorl _floorl\n+#endif\n+\n+#if defined (HAVE__FMODF) && ! defined (HAVE_FMODF)\n+# define HAVE_FMODF 1\n+# define fmodf _fmodf\n+#endif\n+\n+#if defined (HAVE__FMODL) && ! defined (HAVE_FMODL)\n+# define HAVE_FMODL 1\n+# define fmodl _fmodl\n+#endif\n+\n+#if defined (HAVE__FREXPF) && ! defined (HAVE_FREXPF)\n+# define HAVE_FREXPF 1\n+# define frexpf _frexpf\n+#endif\n+\n+#if defined (HAVE__FREXPL) && ! defined (HAVE_FREXPL)\n+# define HAVE_FREXPL 1\n+# define frexpl _frexpl\n+#endif\n+\n+#if defined (HAVE__LDEXPF) && ! defined (HAVE_LDEXPF)\n+# define HAVE_LDEXPF 1\n+# define ldexpf _ldexpf\n+#endif\n+\n+#if defined (HAVE__LDEXPL) && ! defined (HAVE_LDEXPL)\n+# define HAVE_LDEXPL 1\n+# define ldexpl _ldexpl\n+#endif\n+\n #if defined (HAVE__LOG10F) && ! defined (HAVE_LOG10F)\n # define HAVE_LOG10F 1\n # define log10f _log10f\n #endif\n \n+#if defined (HAVE__LOGL) && ! defined (HAVE_LOGL)\n+# define HAVE_LOGL 1\n+# define logl _logl\n+#endif\n+\n #if defined (HAVE__POWF) && ! defined (HAVE_POWF)\n # define HAVE_POWF 1\n # define powf _powf\n #endif\n \n+#if defined (HAVE__LOG10L) && ! defined (HAVE_LOG10L)\n+# define HAVE_LOG10L 1\n+# define log10l _log10l\n+#endif\n+\n+#if defined (HAVE__MODF) && ! defined (HAVE_MODF)\n+# define HAVE_MODF 1\n+# define modf _modf\n+#endif\n+\n+#if defined (HAVE__MODL) && ! defined (HAVE_MODL)\n+# define HAVE_MODL 1\n+# define modl _modl\n+#endif\n+\n #if defined (HAVE__SINF) && ! defined (HAVE_SINF)\n # define HAVE_SINF 1\n # define sinf _sinf\n #endif\n \n+#if defined (HAVE__POWL) && ! defined (HAVE_POWL)\n+# define HAVE_POWL 1\n+# define powl _powl\n+#endif\n+\n #if defined (HAVE__SINHF) && ! defined (HAVE_SINHF)\n # define HAVE_SINHF 1\n # define sinhf _sinhf\n #endif\n \n+#if defined (HAVE__SINL) && ! defined (HAVE_SINL)\n+# define HAVE_SINL 1\n+# define sinl _sinl\n+#endif\n+\n #if defined (HAVE__SQRTF) && ! defined (HAVE_SQRTF)\n # define HAVE_SQRTF 1\n # define sqrtf _sqrtf\n #endif\n \n+#if defined (HAVE__SINHL) && ! defined (HAVE_SINHL)\n+# define HAVE_SINHL 1\n+# define sinhl _sinhl\n+#endif\n+\n #if defined (HAVE__TANF) && ! defined (HAVE_TANF)\n # define HAVE_TANF 1\n # define tanf _tanf\n #endif\n \n+#if defined (HAVE__SQRTL) && ! defined (HAVE_SQRTL)\n+# define HAVE_SQRTL 1\n+# define sqrtl _sqrtl\n+#endif\n+\n #if defined (HAVE__TANHF) && ! defined (HAVE_TANHF)\n # define HAVE_TANHF 1\n # define tanhf _tanhf\n #endif\n \n+#if defined (HAVE__TANL) && ! defined (HAVE_TANL)\n+# define HAVE_TANF 1\n+# define tanf _tanf\n+#endif\n+\n #if defined (HAVE__STRTOF) && ! defined (HAVE_STRTOF)\n # define HAVE_STRTOF 1\n # define strtof _strtof\n #endif\n \n+#if defined (HAVE__TANHL) && ! defined (HAVE_TANHL)\n+# define HAVE_TANHL 1\n+# define tanhl _tanhl\n+#endif\n+\n #if defined (HAVE__STRTOLD) && ! defined (HAVE_STRTOLD)\n # define HAVE_STRTOLD 1\n # define strtold _strtold\n #endif\n \n-#if defined (HAVE__FABSF) && ! defined (HAVE_FABSF)\n-# define HAVE_FABSF 1\n-# define fabsf _fabsf\n-#endif\n-\n #if defined (HAVE__SINCOS) && ! defined (HAVE_SINCOS)\n # define HAVE_SINCOS 1\n # define sincos _sincos\n@@ -170,6 +502,16 @@\n # define finite _finite\n #endif\n \n+#if defined (HAVE__FINITEF) && ! defined (HAVE_FINITEF)\n+# define HAVE_FINITEF 1\n+# define finitef _finitef\n+#endif\n+\n+#if defined (HAVE__FINITEL) && ! defined (HAVE_FINITEL)\n+# define HAVE_FINITEL 1\n+# define finitel _finitel\n+#endif\n+\n #if defined (HAVE__QFINITE) && ! defined (HAVE_QFINITE)\n # define HAVE_QFINITE 1\n # define qfinite _qfinite"}, {"sha": "bbea099065d36e1ed46f1d8656ff893192426cab", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 566, "deletions": 30, "changes": 596, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=54fa741538eaf41ed84093cc5245f41119a8e969", "patch": "@@ -223,56 +223,586 @@ AC_DEFUN(GLIBCPP_CHECK_COMPILER_VERSION, [\n   AC_SUBST(FMTFLAGS)\n ])\n \n-\n dnl\n dnl Check to see what builtin math functions are supported\n dnl\n-dnl Define _GLIBCPP_HAS_BUILTIN_SINF if __builtin_sinf\n-dnl Define _GLIBCPP_HAS_BUILTIN_COSF if __builtin_cosf\n-dnl Define _GLIBCPP_HAS_BUILTIN_FABSF if __builtin_fabsf\n-dnl Define _GLIBCPP_HAS_BUILTIN_SQRTF if __builtin_sqrtf\n-dnl\n+dnl check for __builtin_acos\n+dnl check for __builtin_acosf\n+dnl check for __builtin_acosl\n+dnl check for __builtin_asin\n+dnl check for __builtin_asinf\n+dnl check for __builtin_asinl\n+dnl check for __builtin_atan\n+dnl check for __builtin_atanf\n+dnl check for __builtin_atanl\n+dnl check for __builtin_atan2\n+dnl check for __builtin_atan2f\n+dnl check for __builtin_atan2l\n+dnl check for __builtin_ceil\n+dnl check for __builtin_ceilf\n+dnl check for __builtin_ceill\n+dnl check for __builtin_cos\n+dnl check for __builtin_cosf\n+dnl check for __builtin_cosl\n+dnl check for __builtin_cosh\n+dnl check for __builtin_coshf\n+dnl check for __builtin_coshl\n+dnl check for __builtin_exp\n+dnl check for __builtin_expf\n+dnl check for __builtin_expl\n+dnl check for __builtin_fabs\n+dnl check for __builtin_fabsf\n+dnl check for __builtin_fabsl\n+dnl check for __builtin_floor\n+dnl check for __builtin_floorf\n+dnl check for __builtin_floorl\n+dnl check for __builtin_frexp\n+dnl check for __builtin_frexpf\n+dnl check for __builtin_frexpl\n+dnl check for __builtin_ldexp\n+dnl check for __builtin_ldexpf\n+dnl check for __builtin_ldexpl\n+dnl check for __builtin_log\n+dnl check for __builtin_logf\n+dnl check for __builtin_logl\n+dnl check for __builtin_log10\n+dnl check for __builtin_log10f\n+dnl check for __builtin_log10l\n+dnl check for __builtin_modf\n+dnl check for __builtin_modff\n+dnl check for __builtin_modfl\n+dnl check for __builtin_pow\n+dnl check for __builtin_powf\n+dnl check for __builtin_powl\n+dnl check for __builtin_sin\n+dnl check for __builtin_sinf\n+dnl check for __builtin_sinl\n+dnl check for __builtin_sinh\n+dnl check for __builtin_sinhf\n+dnl check for __builtin_sinhl\n+dnl check for __builtin_sqrt\n+dnl check for __builtin_sqrtf\n+dnl check for __builtin_sqrtl\n+dnl check for __builtin_tan\n+dnl check for __builtin_tanf\n+dnl check for __builtin_tanl\n+dnl check for __builtin_tanh\n+dnl check for __builtin_tanhf\n+dnl check for __builtin_tanhl\n dnl GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT, [\n   dnl Test for builtin math functions.\n-  AC_MSG_CHECKING([for __builtin_sinf])\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_MSG_CHECKING([for __builtin_acos])\n   AC_TRY_COMPILE([#include <math.h>], \n-  [float foo(void) { __builtin_sinf(0.0); }], \n-  use_builtin_sinf=yes, use_builtin_sinf=no)\n-  AC_MSG_RESULT($use_builtin_sinf)\n-  if test $use_builtin_sinf = \"yes\"; then\n-    AC_DEFINE(_GLIBCPP_HAS_BUILTIN_SINF)\n+  [ __builtin_acos(0.0);], \n+  use_builtin_acos=yes, use_builtin_acos=no)\n+  AC_MSG_RESULT($use_builtin_acos)\n+  if test $use_builtin_acos = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ACOS)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_acosf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_acosf(0.0);], \n+  use_builtin_acosf=yes, use_builtin_acosf=no)\n+  AC_MSG_RESULT($use_builtin_acosf)\n+  if test $use_builtin_acosf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ACOSF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_acosl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_acosl(0.0);], \n+  use_builtin_acosl=yes, use_builtin_acosl=no)\n+  AC_MSG_RESULT($use_builtin_acosl)\n+  if test $use_builtin_acosl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ACOSL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_asin])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_asin(0.0);], \n+  use_builtin_asin=yes, use_builtin_asin=no)\n+  AC_MSG_RESULT($use_builtin_asin)\n+  if test $use_builtin_asin = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ASIN)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_asinf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_asinf(0.0);], \n+  use_builtin_asinf=yes, use_builtin_asinf=no)\n+  AC_MSG_RESULT($use_builtin_asinf)\n+  if test $use_builtin_asinf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ASINF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_asinl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_asinl(0.0);], \n+  use_builtin_asinl=yes, use_builtin_asinl=no)\n+  AC_MSG_RESULT($use_builtin_asinl)\n+  if test $use_builtin_asinl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ASINL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_atan])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_atan(0.0);], \n+  use_builtin_atan=yes, use_builtin_atan=no)\n+  AC_MSG_RESULT($use_builtin_atan)\n+  if test $use_builtin_atan = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ATAN)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_atanf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_atanf(0.0);], \n+  use_builtin_atanf=yes, use_builtin_atanf=no)\n+  AC_MSG_RESULT($use_builtin_atanf)\n+  if test $use_builtin_atanf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ATANF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_atanl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_atanl(0.0);], \n+  use_builtin_atanl=yes, use_builtin_atanl=no)\n+  AC_MSG_RESULT($use_builtin_atanl)\n+  if test $use_builtin_atanl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ATANL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_atan2])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_atan2(0.0);], \n+  use_builtin_atan2=yes, use_builtin_atan2=no)\n+  AC_MSG_RESULT($use_builtin_atan2)\n+  if test $use_builtin_atan2 = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ATAN2)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_atan2f])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_atan2f(0.0);], \n+  use_builtin_atan2f=yes, use_builtin_atan2f=no)\n+  AC_MSG_RESULT($use_builtin_atan2f)\n+  if test $use_builtin_atan2f = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ATAN2F)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_atan2l])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_atan2l(0.0);], \n+  use_builtin_atan2l=yes, use_builtin_atan2l=no)\n+  AC_MSG_RESULT($use_builtin_atan2l)\n+  if test $use_builtin_atan2l = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ATAN2L)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_ceil])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_fceil(0.0);], \n+  use_builtin_ceil=yes, use_builtin_ceil=no)\n+  AC_MSG_RESULT($use_builtin_ceil)\n+  if test $use_builtin_ceil = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_CEIL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_ceilf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_ceilf(0.0);], \n+  use_builtin_ceilf=yes, use_builtin_ceilf=no)\n+  AC_MSG_RESULT($use_builtin_ceilf)\n+  if test $use_builtin_ceilf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_CEILF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_ceill])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_ceill(0.0);], \n+  use_builtin_ceill=yes, use_builtin_ceill=no)\n+  AC_MSG_RESULT($use_builtin_ceill)\n+  if test $use_builtin_ceill = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_CEILL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_cos])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_cos(0.0);], \n+  use_builtin_cos=yes, use_builtin_cos=no)\n+  AC_MSG_RESULT($use_builtin_cos)\n+  if test $use_builtin_cos = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_COS)\n   fi\n-\n   AC_MSG_CHECKING([for __builtin_cosf])\n   AC_TRY_COMPILE([#include <math.h>], \n-  [float foo(void) { __builtin_cosf(0.0); }], \n+  [ __builtin_cosf(0.0);], \n   use_builtin_cosf=yes, use_builtin_cosf=no)\n   AC_MSG_RESULT($use_builtin_cosf)\n   if test $use_builtin_cosf = \"yes\"; then\n-    AC_DEFINE(_GLIBCPP_HAS_BUILTIN_COSF)\n+    AC_DEFINE(HAVE_BUILTIN_COSF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_cosl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_cosl(0.0);], \n+  use_builtin_cosl=yes, use_builtin_cosl=no)\n+  AC_MSG_RESULT($use_builtin_cosl)\n+  if test $use_builtin_cosl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_COSL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_cosh])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_cosh(0.0);], \n+  use_builtin_cosh=yes, use_builtin_cosh=no)\n+  AC_MSG_RESULT($use_builtin_cosh)\n+  if test $use_builtin_cosh = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_COSH)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_coshf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_coshf(0.0);], \n+  use_builtin_coshf=yes, use_builtin_coshf=no)\n+  AC_MSG_RESULT($use_builtin_coshf)\n+  if test $use_builtin_coshf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_COSHF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_coshl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_coshl(0.0);], \n+  use_builtin_coshl=yes, use_builtin_coshl=no)\n+  AC_MSG_RESULT($use_builtin_coshl)\n+  if test $use_builtin_coshl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_COSHL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_exp])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_exp(0.0);], \n+  use_builtin_exp=yes, use_builtin_exp=no)\n+  AC_MSG_RESULT($use_builtin_exp)\n+  if test $use_builtin_exp = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_EXP)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_expf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_expf(0.0);], \n+  use_builtin_expf=yes, use_builtin_expf=no)\n+  AC_MSG_RESULT($use_builtin_expf)\n+  if test $use_builtin_expf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_EXPF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_expl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_expl(0.0);], \n+  use_builtin_expl=yes, use_builtin_expl=no)\n+  AC_MSG_RESULT($use_builtin_expl)\n+  if test $use_builtin_expl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_EXPL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_fabs])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_fabs(0.0);], \n+  use_builtin_fabs=yes, use_builtin_fabs=no)\n+  AC_MSG_RESULT($use_builtin_fabs)\n+  if test $use_builtin_fabs = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_FABS)\n   fi\n-\n   AC_MSG_CHECKING([for __builtin_fabsf])\n   AC_TRY_COMPILE([#include <math.h>], \n-  [float foo(void) { __builtin_fabsf(0.0); }], \n+  [ __builtin_fabsf(0.0);], \n   use_builtin_fabsf=yes, use_builtin_fabsf=no)\n   AC_MSG_RESULT($use_builtin_fabsf)\n   if test $use_builtin_fabsf = \"yes\"; then\n-    AC_DEFINE(_GLIBCPP_HAS_BUILTIN_FABSF)\n+    AC_DEFINE(HAVE_BUILTIN_FABSF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_fabsl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_fabsl(0.0);], \n+  use_builtin_fabsl=yes, use_builtin_fabsl=no)\n+  AC_MSG_RESULT($use_builtin_fabsl)\n+  if test $use_builtin_fabsl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_FABSL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_floor])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_ffloor(0.0);], \n+  use_builtin_floor=yes, use_builtin_floor=no)\n+  AC_MSG_RESULT($use_builtin_floor)\n+  if test $use_builtin_floor = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_FLOOR)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_floorf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_floorf(0.0);], \n+  use_builtin_floorf=yes, use_builtin_floorf=no)\n+  AC_MSG_RESULT($use_builtin_floorf)\n+  if test $use_builtin_floorf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_FLOORF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_floorl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_floorl(0.0);], \n+  use_builtin_floorl=yes, use_builtin_floorl=no)\n+  AC_MSG_RESULT($use_builtin_floorl)\n+  if test $use_builtin_floorl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_FLOORL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_frexp])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_frexp(0.0);], \n+  use_builtin_frexp=yes, use_builtin_frexp=no)\n+  AC_MSG_RESULT($use_builtin_frexp)\n+  if test $use_builtin_frexp = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_FREXP)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_frexpf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_frexpf(0.0);], \n+  use_builtin_frexpf=yes, use_builtin_frexpf=no)\n+  AC_MSG_RESULT($use_builtin_frexpf)\n+  if test $use_builtin_frexpf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_FREXPF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_frexpl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_frexpl(0.0);], \n+  use_builtin_frexpl=yes, use_builtin_frexpl=no)\n+  AC_MSG_RESULT($use_builtin_frexpl)\n+  if test $use_builtin_frexpl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_FREXPL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_ldexp])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_ldexp(0.0);], \n+  use_builtin_ldexp=yes, use_builtin_ldexp=no)\n+  AC_MSG_RESULT($use_builtin_ldexp)\n+  if test $use_builtin_ldexp = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_LDEXP)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_ldexpf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_ldexpf(0.0);], \n+  use_builtin_ldexpf=yes, use_builtin_ldexpf=no)\n+  AC_MSG_RESULT($use_builtin_ldexpf)\n+  if test $use_builtin_ldexpf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_LDEXPF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_ldexpl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_ldexpl(0.0);], \n+  use_builtin_ldexpl=yes, use_builtin_ldexpl=no)\n+  AC_MSG_RESULT($use_builtin_ldexpl)\n+  if test $use_builtin_ldexpl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_LDEXPL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_log])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_log(0.0);], \n+  use_builtin_log=yes, use_builtin_log=no)\n+  AC_MSG_RESULT($use_builtin_log)\n+  if test $use_builtin_log = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_LOG)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_logf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_logf(0.0);], \n+  use_builtin_logf=yes, use_builtin_logf=no)\n+  AC_MSG_RESULT($use_builtin_logf)\n+  if test $use_builtin_logf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_LOGF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_logl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_logl(0.0);], \n+  use_builtin_logl=yes, use_builtin_logl=no)\n+  AC_MSG_RESULT($use_builtin_logl)\n+  if test $use_builtin_logl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_LOGL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_log10])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_log10(0.0);], \n+  use_builtin_log10=yes, use_builtin_log10=no)\n+  AC_MSG_RESULT($use_builtin_log10)\n+  if test $use_builtin_log10 = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_LOG10)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_log10f])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_log10f(0.0);], \n+  use_builtin_log10f=yes, use_builtin_log10f=no)\n+  AC_MSG_RESULT($use_builtin_log10f)\n+  if test $use_builtin_log10f = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_LOG10F)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_log10l])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_log10l(0.0);], \n+  use_builtin_log10l=yes, use_builtin_log10l=no)\n+  AC_MSG_RESULT($use_builtin_log10l)\n+  if test $use_builtin_log10l = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_LOG10L)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_modf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_modf(0.0);], \n+  use_builtin_modf=yes, use_builtin_modf=no)\n+  AC_MSG_RESULT($use_builtin_modf)\n+  if test $use_builtin_modf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_MODF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_modff])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_modff(0.0);], \n+  use_builtin_modff=yes, use_builtin_modff=no)\n+  AC_MSG_RESULT($use_builtin_modff)\n+  if test $use_builtin_modff = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_MODFF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_modfl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_modfl(0.0);], \n+  use_builtin_modfl=yes, use_builtin_modfl=no)\n+  AC_MSG_RESULT($use_builtin_modfl)\n+  if test $use_builtin_modfl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_MODFL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_pow])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_pow(0.0);], \n+  use_builtin_pow=yes, use_builtin_pow=no)\n+  AC_MSG_RESULT($use_builtin_pow)\n+  if test $use_builtin_pow = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_POW)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_powf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_powf(0.0);], \n+  use_builtin_powf=yes, use_builtin_powf=no)\n+  AC_MSG_RESULT($use_builtin_powf)\n+  if test $use_builtin_powf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_POWF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_powl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_powl(0.0);], \n+  use_builtin_powl=yes, use_builtin_powl=no)\n+  AC_MSG_RESULT($use_builtin_powl)\n+  if test $use_builtin_powl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_POWL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_sin])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_sin(0.0);], \n+  use_builtin_sin=yes, use_builtin_sin=no)\n+  AC_MSG_RESULT($use_builtin_sin)\n+  if test $use_builtin_sin = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_SIN)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_sinf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_sinf(0.0);], \n+  use_builtin_sinf=yes, use_builtin_sinf=no)\n+  AC_MSG_RESULT($use_builtin_sinf)\n+  if test $use_builtin_sinf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_SINF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_sinl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_sinl(0.0);], \n+  use_builtin_sinl=yes, use_builtin_sinl=no)\n+  AC_MSG_RESULT($use_builtin_sinl)\n+  if test $use_builtin_sinl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_SINL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_sinh])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_sinh(0.0);], \n+  use_builtin_sinh=yes, use_builtin_sinh=no)\n+  AC_MSG_RESULT($use_builtin_sinh)\n+  if test $use_builtin_sinh = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_SINH)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_sinhf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_sinhf(0.0);], \n+  use_builtin_sinhf=yes, use_builtin_sinhf=no)\n+  AC_MSG_RESULT($use_builtin_sinhf)\n+  if test $use_builtin_sinhf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_SINHF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_sinhl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_sinhl(0.0);], \n+  use_builtin_sinhl=yes, use_builtin_sinhl=no)\n+  AC_MSG_RESULT($use_builtin_sinhl)\n+  if test $use_builtin_sinhl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_SINHL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_sqrt])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_fsqrt(0.0);], \n+  use_builtin_sqrt=yes, use_builtin_sqrt=no)\n+  AC_MSG_RESULT($use_builtin_sqrt)\n+  if test $use_builtin_sqrt = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_SQRT)\n   fi\n-\n   AC_MSG_CHECKING([for __builtin_sqrtf])\n   AC_TRY_COMPILE([#include <math.h>], \n-  [float foo(void) { __builtin_sqrtf(0.0); }], \n+  [ __builtin_sqrtf(0.0);], \n   use_builtin_sqrtf=yes, use_builtin_sqrtf=no)\n   AC_MSG_RESULT($use_builtin_sqrtf)\n   if test $use_builtin_sqrtf = \"yes\"; then\n-    AC_DEFINE(_GLIBCPP_HAS_BUILTIN_SQRTF)\n+    AC_DEFINE(HAVE_BUILTIN_SQRTF)\n   fi\n+  AC_MSG_CHECKING([for __builtin_sqrtl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_sqrtl(0.0);], \n+  use_builtin_sqrtl=yes, use_builtin_sqrtl=no)\n+  AC_MSG_RESULT($use_builtin_sqrtl)\n+  if test $use_builtin_sqrtl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_SQRTL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_tan])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_tan(0.0);], \n+  use_builtin_tan=yes, use_builtin_tan=no)\n+  AC_MSG_RESULT($use_builtin_tan)\n+  if test $use_builtin_tan = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_TAN)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_tanf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_tanf(0.0);], \n+  use_builtin_tanf=yes, use_builtin_tanf=no)\n+  AC_MSG_RESULT($use_builtin_tanf)\n+  if test $use_builtin_tanf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_TANF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_tanl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_tanl(0.0);], \n+  use_builtin_tanl=yes, use_builtin_tanl=no)\n+  AC_MSG_RESULT($use_builtin_tanl)\n+  if test $use_builtin_tanl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_TANL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_tanh])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_tanh(0.0);], \n+  use_builtin_tanh=yes, use_builtin_tanh=no)\n+  AC_MSG_RESULT($use_builtin_tanh)\n+  if test $use_builtin_tanh = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_TANH)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_tanhf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_tanhf(0.0);], \n+  use_builtin_tanhf=yes, use_builtin_tanhf=no)\n+  AC_MSG_RESULT($use_builtin_tanhf)\n+  if test $use_builtin_tanhf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_TANHF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_tanhl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_tanhl(0.0);], \n+  use_builtin_tanhl=yes, use_builtin_tanhl=no)\n+  AC_MSG_RESULT($use_builtin_tanhl)\n+  if test $use_builtin_tanhl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_TANHL)\n+  fi\n+  AC_LANG_RESTORE\n ])\n \n \n+\n dnl Check to see what architecture we are compiling for. If it's\n dnl supported, use special hand-crafted routines to provide thread\n dnl primitives. Also, if architecture-specific flags are required for \n@@ -496,20 +1026,26 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   csqrtl ctanhl ctanl cargl hypotl signbitl c_logl clog10l))\n   AC_SUBST(USE_LONG_DOUBLE)\n \n-  dnl Check to see if basic C math functions have faster float versions.\n-  AC_CHECK_FUNCS(modf isnan isnanf isnanl isinf isinff isinfl copysign \\\n-  copysignl cosf coshf logf log10f powf sinf sinhf sqrtf tanf tanhf \\\n-  strtof strtold fabsf sincos sincosf sincosl finite finite fqfinite \\\n-  fpclass qfpclass)\n+  dnl Check to see if basic C math functions have float, long double versions.\n+  AC_CHECK_FUNCS(isnan isnanf isnanl isinf isinff isinfl copysign copysignl \\\n+  acosf acosl asinf asinl atanf atanl atan2f atan2l ceilf ceill cosf cosl \\\n+  coshf coshl expf expl fabsf fabsl floorf floorl frexpf frexpl ldexpf \\\n+  ldexpl logf logl log10f log10l modf modff modfl powf powl sinf sinl sinhf \\\n+  sinhl sqrtf sqrtl tanf tanl tanhf tanhl strtof strtold sincos sincosf \\\n+  sincosl finite finitef finitel fqfinite fpclass qfpclass)\n \n #Some runtimes have these functions with a preceding underscore. Please\n # keep this sync'd with the one above. And if you add any new symbol,\n # please add the corresponding block in the @BOTTOM@ section of\n # acconfig.h.\n-AC_CHECK_FUNCS(_modf _isnan _isnanf _isnanl _isinf _isinff _isinfl _copysign \\\n-_copysignl _cosf _coshf _logf _log10f _powf _sinf _sinhf _sqrtf _tanf _tanhf \\\n-_strtof _strtold _fabsf _sincos _sincosf _sincosl _finite _finitef _qfinite \\\n-_fpclass _qfpclass)\n+\n+  AC_CHECK_FUNCS(_isnan _isnanf _isnanl _isinf _isinff _isinfl _copysign \\\n+  _copysignl _acosf _acosl _asinf _asinl _atanf _atanl _atan2f _atan2l \\\n+  _ceilf _ceill _cosf _cosl _coshf _coshl _expf _expl _fabsf _fabsl \\\n+  _floorf _floorl _frexpf _frexpl _ldexpf _ldexpl _logf _logl _log10f \\\n+  _log10l _modf _modff _modfl _powf _powl _sinf _sinl _sinhf _sinhl _sqrtf \\\n+  _sqrtl _tanf _tanl _tanhf _tanhl _strtof _strtold _sincos _sincosf _sincosl \\\n+  _finite _finitef _finitel _fqfinite _fpclass _qfpclass)\n \n LIBS=\"$save_LIBS\"\n ])"}, {"sha": "a1984a2f6e47dc38a0d9e2314f8adf7c723d7016", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 566, "deletions": 30, "changes": 596, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=54fa741538eaf41ed84093cc5245f41119a8e969", "patch": "@@ -235,56 +235,586 @@ AC_DEFUN(GLIBCPP_CHECK_COMPILER_VERSION, [\n   AC_SUBST(FMTFLAGS)\n ])\n \n-\n dnl\n dnl Check to see what builtin math functions are supported\n dnl\n-dnl Define _GLIBCPP_HAS_BUILTIN_SINF if __builtin_sinf\n-dnl Define _GLIBCPP_HAS_BUILTIN_COSF if __builtin_cosf\n-dnl Define _GLIBCPP_HAS_BUILTIN_FABSF if __builtin_fabsf\n-dnl Define _GLIBCPP_HAS_BUILTIN_SQRTF if __builtin_sqrtf\n-dnl\n+dnl check for __builtin_acos\n+dnl check for __builtin_acosf\n+dnl check for __builtin_acosl\n+dnl check for __builtin_asin\n+dnl check for __builtin_asinf\n+dnl check for __builtin_asinl\n+dnl check for __builtin_atan\n+dnl check for __builtin_atanf\n+dnl check for __builtin_atanl\n+dnl check for __builtin_atan2\n+dnl check for __builtin_atan2f\n+dnl check for __builtin_atan2l\n+dnl check for __builtin_ceil\n+dnl check for __builtin_ceilf\n+dnl check for __builtin_ceill\n+dnl check for __builtin_cos\n+dnl check for __builtin_cosf\n+dnl check for __builtin_cosl\n+dnl check for __builtin_cosh\n+dnl check for __builtin_coshf\n+dnl check for __builtin_coshl\n+dnl check for __builtin_exp\n+dnl check for __builtin_expf\n+dnl check for __builtin_expl\n+dnl check for __builtin_fabs\n+dnl check for __builtin_fabsf\n+dnl check for __builtin_fabsl\n+dnl check for __builtin_floor\n+dnl check for __builtin_floorf\n+dnl check for __builtin_floorl\n+dnl check for __builtin_frexp\n+dnl check for __builtin_frexpf\n+dnl check for __builtin_frexpl\n+dnl check for __builtin_ldexp\n+dnl check for __builtin_ldexpf\n+dnl check for __builtin_ldexpl\n+dnl check for __builtin_log\n+dnl check for __builtin_logf\n+dnl check for __builtin_logl\n+dnl check for __builtin_log10\n+dnl check for __builtin_log10f\n+dnl check for __builtin_log10l\n+dnl check for __builtin_modf\n+dnl check for __builtin_modff\n+dnl check for __builtin_modfl\n+dnl check for __builtin_pow\n+dnl check for __builtin_powf\n+dnl check for __builtin_powl\n+dnl check for __builtin_sin\n+dnl check for __builtin_sinf\n+dnl check for __builtin_sinl\n+dnl check for __builtin_sinh\n+dnl check for __builtin_sinhf\n+dnl check for __builtin_sinhl\n+dnl check for __builtin_sqrt\n+dnl check for __builtin_sqrtf\n+dnl check for __builtin_sqrtl\n+dnl check for __builtin_tan\n+dnl check for __builtin_tanf\n+dnl check for __builtin_tanl\n+dnl check for __builtin_tanh\n+dnl check for __builtin_tanhf\n+dnl check for __builtin_tanhl\n dnl GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT, [\n   dnl Test for builtin math functions.\n-  AC_MSG_CHECKING([for __builtin_sinf])\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_MSG_CHECKING([for __builtin_acos])\n   AC_TRY_COMPILE([#include <math.h>], \n-  [float foo(void) { __builtin_sinf(0.0); }], \n-  use_builtin_sinf=yes, use_builtin_sinf=no)\n-  AC_MSG_RESULT($use_builtin_sinf)\n-  if test $use_builtin_sinf = \"yes\"; then\n-    AC_DEFINE(_GLIBCPP_HAS_BUILTIN_SINF)\n+  [ __builtin_acos(0.0);], \n+  use_builtin_acos=yes, use_builtin_acos=no)\n+  AC_MSG_RESULT($use_builtin_acos)\n+  if test $use_builtin_acos = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ACOS)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_acosf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_acosf(0.0);], \n+  use_builtin_acosf=yes, use_builtin_acosf=no)\n+  AC_MSG_RESULT($use_builtin_acosf)\n+  if test $use_builtin_acosf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ACOSF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_acosl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_acosl(0.0);], \n+  use_builtin_acosl=yes, use_builtin_acosl=no)\n+  AC_MSG_RESULT($use_builtin_acosl)\n+  if test $use_builtin_acosl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ACOSL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_asin])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_asin(0.0);], \n+  use_builtin_asin=yes, use_builtin_asin=no)\n+  AC_MSG_RESULT($use_builtin_asin)\n+  if test $use_builtin_asin = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ASIN)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_asinf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_asinf(0.0);], \n+  use_builtin_asinf=yes, use_builtin_asinf=no)\n+  AC_MSG_RESULT($use_builtin_asinf)\n+  if test $use_builtin_asinf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ASINF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_asinl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_asinl(0.0);], \n+  use_builtin_asinl=yes, use_builtin_asinl=no)\n+  AC_MSG_RESULT($use_builtin_asinl)\n+  if test $use_builtin_asinl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ASINL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_atan])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_atan(0.0);], \n+  use_builtin_atan=yes, use_builtin_atan=no)\n+  AC_MSG_RESULT($use_builtin_atan)\n+  if test $use_builtin_atan = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ATAN)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_atanf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_atanf(0.0);], \n+  use_builtin_atanf=yes, use_builtin_atanf=no)\n+  AC_MSG_RESULT($use_builtin_atanf)\n+  if test $use_builtin_atanf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ATANF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_atanl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_atanl(0.0);], \n+  use_builtin_atanl=yes, use_builtin_atanl=no)\n+  AC_MSG_RESULT($use_builtin_atanl)\n+  if test $use_builtin_atanl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ATANL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_atan2])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_atan2(0.0);], \n+  use_builtin_atan2=yes, use_builtin_atan2=no)\n+  AC_MSG_RESULT($use_builtin_atan2)\n+  if test $use_builtin_atan2 = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ATAN2)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_atan2f])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_atan2f(0.0);], \n+  use_builtin_atan2f=yes, use_builtin_atan2f=no)\n+  AC_MSG_RESULT($use_builtin_atan2f)\n+  if test $use_builtin_atan2f = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ATAN2F)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_atan2l])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_atan2l(0.0);], \n+  use_builtin_atan2l=yes, use_builtin_atan2l=no)\n+  AC_MSG_RESULT($use_builtin_atan2l)\n+  if test $use_builtin_atan2l = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_ATAN2L)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_ceil])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_fceil(0.0);], \n+  use_builtin_ceil=yes, use_builtin_ceil=no)\n+  AC_MSG_RESULT($use_builtin_ceil)\n+  if test $use_builtin_ceil = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_CEIL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_ceilf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_ceilf(0.0);], \n+  use_builtin_ceilf=yes, use_builtin_ceilf=no)\n+  AC_MSG_RESULT($use_builtin_ceilf)\n+  if test $use_builtin_ceilf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_CEILF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_ceill])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_ceill(0.0);], \n+  use_builtin_ceill=yes, use_builtin_ceill=no)\n+  AC_MSG_RESULT($use_builtin_ceill)\n+  if test $use_builtin_ceill = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_CEILL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_cos])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_cos(0.0);], \n+  use_builtin_cos=yes, use_builtin_cos=no)\n+  AC_MSG_RESULT($use_builtin_cos)\n+  if test $use_builtin_cos = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_COS)\n   fi\n-\n   AC_MSG_CHECKING([for __builtin_cosf])\n   AC_TRY_COMPILE([#include <math.h>], \n-  [float foo(void) { __builtin_cosf(0.0); }], \n+  [ __builtin_cosf(0.0);], \n   use_builtin_cosf=yes, use_builtin_cosf=no)\n   AC_MSG_RESULT($use_builtin_cosf)\n   if test $use_builtin_cosf = \"yes\"; then\n-    AC_DEFINE(_GLIBCPP_HAS_BUILTIN_COSF)\n+    AC_DEFINE(HAVE_BUILTIN_COSF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_cosl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_cosl(0.0);], \n+  use_builtin_cosl=yes, use_builtin_cosl=no)\n+  AC_MSG_RESULT($use_builtin_cosl)\n+  if test $use_builtin_cosl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_COSL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_cosh])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_cosh(0.0);], \n+  use_builtin_cosh=yes, use_builtin_cosh=no)\n+  AC_MSG_RESULT($use_builtin_cosh)\n+  if test $use_builtin_cosh = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_COSH)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_coshf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_coshf(0.0);], \n+  use_builtin_coshf=yes, use_builtin_coshf=no)\n+  AC_MSG_RESULT($use_builtin_coshf)\n+  if test $use_builtin_coshf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_COSHF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_coshl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_coshl(0.0);], \n+  use_builtin_coshl=yes, use_builtin_coshl=no)\n+  AC_MSG_RESULT($use_builtin_coshl)\n+  if test $use_builtin_coshl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_COSHL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_exp])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_exp(0.0);], \n+  use_builtin_exp=yes, use_builtin_exp=no)\n+  AC_MSG_RESULT($use_builtin_exp)\n+  if test $use_builtin_exp = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_EXP)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_expf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_expf(0.0);], \n+  use_builtin_expf=yes, use_builtin_expf=no)\n+  AC_MSG_RESULT($use_builtin_expf)\n+  if test $use_builtin_expf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_EXPF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_expl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_expl(0.0);], \n+  use_builtin_expl=yes, use_builtin_expl=no)\n+  AC_MSG_RESULT($use_builtin_expl)\n+  if test $use_builtin_expl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_EXPL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_fabs])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_fabs(0.0);], \n+  use_builtin_fabs=yes, use_builtin_fabs=no)\n+  AC_MSG_RESULT($use_builtin_fabs)\n+  if test $use_builtin_fabs = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_FABS)\n   fi\n-\n   AC_MSG_CHECKING([for __builtin_fabsf])\n   AC_TRY_COMPILE([#include <math.h>], \n-  [float foo(void) { __builtin_fabsf(0.0); }], \n+  [ __builtin_fabsf(0.0);], \n   use_builtin_fabsf=yes, use_builtin_fabsf=no)\n   AC_MSG_RESULT($use_builtin_fabsf)\n   if test $use_builtin_fabsf = \"yes\"; then\n-    AC_DEFINE(_GLIBCPP_HAS_BUILTIN_FABSF)\n+    AC_DEFINE(HAVE_BUILTIN_FABSF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_fabsl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_fabsl(0.0);], \n+  use_builtin_fabsl=yes, use_builtin_fabsl=no)\n+  AC_MSG_RESULT($use_builtin_fabsl)\n+  if test $use_builtin_fabsl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_FABSL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_floor])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_ffloor(0.0);], \n+  use_builtin_floor=yes, use_builtin_floor=no)\n+  AC_MSG_RESULT($use_builtin_floor)\n+  if test $use_builtin_floor = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_FLOOR)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_floorf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_floorf(0.0);], \n+  use_builtin_floorf=yes, use_builtin_floorf=no)\n+  AC_MSG_RESULT($use_builtin_floorf)\n+  if test $use_builtin_floorf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_FLOORF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_floorl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_floorl(0.0);], \n+  use_builtin_floorl=yes, use_builtin_floorl=no)\n+  AC_MSG_RESULT($use_builtin_floorl)\n+  if test $use_builtin_floorl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_FLOORL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_frexp])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_frexp(0.0);], \n+  use_builtin_frexp=yes, use_builtin_frexp=no)\n+  AC_MSG_RESULT($use_builtin_frexp)\n+  if test $use_builtin_frexp = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_FREXP)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_frexpf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_frexpf(0.0);], \n+  use_builtin_frexpf=yes, use_builtin_frexpf=no)\n+  AC_MSG_RESULT($use_builtin_frexpf)\n+  if test $use_builtin_frexpf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_FREXPF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_frexpl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_frexpl(0.0);], \n+  use_builtin_frexpl=yes, use_builtin_frexpl=no)\n+  AC_MSG_RESULT($use_builtin_frexpl)\n+  if test $use_builtin_frexpl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_FREXPL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_ldexp])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_ldexp(0.0);], \n+  use_builtin_ldexp=yes, use_builtin_ldexp=no)\n+  AC_MSG_RESULT($use_builtin_ldexp)\n+  if test $use_builtin_ldexp = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_LDEXP)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_ldexpf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_ldexpf(0.0);], \n+  use_builtin_ldexpf=yes, use_builtin_ldexpf=no)\n+  AC_MSG_RESULT($use_builtin_ldexpf)\n+  if test $use_builtin_ldexpf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_LDEXPF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_ldexpl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_ldexpl(0.0);], \n+  use_builtin_ldexpl=yes, use_builtin_ldexpl=no)\n+  AC_MSG_RESULT($use_builtin_ldexpl)\n+  if test $use_builtin_ldexpl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_LDEXPL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_log])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_log(0.0);], \n+  use_builtin_log=yes, use_builtin_log=no)\n+  AC_MSG_RESULT($use_builtin_log)\n+  if test $use_builtin_log = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_LOG)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_logf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_logf(0.0);], \n+  use_builtin_logf=yes, use_builtin_logf=no)\n+  AC_MSG_RESULT($use_builtin_logf)\n+  if test $use_builtin_logf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_LOGF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_logl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_logl(0.0);], \n+  use_builtin_logl=yes, use_builtin_logl=no)\n+  AC_MSG_RESULT($use_builtin_logl)\n+  if test $use_builtin_logl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_LOGL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_log10])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_log10(0.0);], \n+  use_builtin_log10=yes, use_builtin_log10=no)\n+  AC_MSG_RESULT($use_builtin_log10)\n+  if test $use_builtin_log10 = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_LOG10)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_log10f])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_log10f(0.0);], \n+  use_builtin_log10f=yes, use_builtin_log10f=no)\n+  AC_MSG_RESULT($use_builtin_log10f)\n+  if test $use_builtin_log10f = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_LOG10F)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_log10l])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_log10l(0.0);], \n+  use_builtin_log10l=yes, use_builtin_log10l=no)\n+  AC_MSG_RESULT($use_builtin_log10l)\n+  if test $use_builtin_log10l = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_LOG10L)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_modf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_modf(0.0);], \n+  use_builtin_modf=yes, use_builtin_modf=no)\n+  AC_MSG_RESULT($use_builtin_modf)\n+  if test $use_builtin_modf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_MODF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_modff])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_modff(0.0);], \n+  use_builtin_modff=yes, use_builtin_modff=no)\n+  AC_MSG_RESULT($use_builtin_modff)\n+  if test $use_builtin_modff = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_MODFF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_modfl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_modfl(0.0);], \n+  use_builtin_modfl=yes, use_builtin_modfl=no)\n+  AC_MSG_RESULT($use_builtin_modfl)\n+  if test $use_builtin_modfl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_MODFL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_pow])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_pow(0.0);], \n+  use_builtin_pow=yes, use_builtin_pow=no)\n+  AC_MSG_RESULT($use_builtin_pow)\n+  if test $use_builtin_pow = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_POW)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_powf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_powf(0.0);], \n+  use_builtin_powf=yes, use_builtin_powf=no)\n+  AC_MSG_RESULT($use_builtin_powf)\n+  if test $use_builtin_powf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_POWF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_powl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_powl(0.0);], \n+  use_builtin_powl=yes, use_builtin_powl=no)\n+  AC_MSG_RESULT($use_builtin_powl)\n+  if test $use_builtin_powl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_POWL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_sin])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_sin(0.0);], \n+  use_builtin_sin=yes, use_builtin_sin=no)\n+  AC_MSG_RESULT($use_builtin_sin)\n+  if test $use_builtin_sin = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_SIN)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_sinf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_sinf(0.0);], \n+  use_builtin_sinf=yes, use_builtin_sinf=no)\n+  AC_MSG_RESULT($use_builtin_sinf)\n+  if test $use_builtin_sinf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_SINF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_sinl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_sinl(0.0);], \n+  use_builtin_sinl=yes, use_builtin_sinl=no)\n+  AC_MSG_RESULT($use_builtin_sinl)\n+  if test $use_builtin_sinl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_SINL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_sinh])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_sinh(0.0);], \n+  use_builtin_sinh=yes, use_builtin_sinh=no)\n+  AC_MSG_RESULT($use_builtin_sinh)\n+  if test $use_builtin_sinh = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_SINH)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_sinhf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_sinhf(0.0);], \n+  use_builtin_sinhf=yes, use_builtin_sinhf=no)\n+  AC_MSG_RESULT($use_builtin_sinhf)\n+  if test $use_builtin_sinhf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_SINHF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_sinhl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_sinhl(0.0);], \n+  use_builtin_sinhl=yes, use_builtin_sinhl=no)\n+  AC_MSG_RESULT($use_builtin_sinhl)\n+  if test $use_builtin_sinhl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_SINHL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_sqrt])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_fsqrt(0.0);], \n+  use_builtin_sqrt=yes, use_builtin_sqrt=no)\n+  AC_MSG_RESULT($use_builtin_sqrt)\n+  if test $use_builtin_sqrt = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_SQRT)\n   fi\n-\n   AC_MSG_CHECKING([for __builtin_sqrtf])\n   AC_TRY_COMPILE([#include <math.h>], \n-  [float foo(void) { __builtin_sqrtf(0.0); }], \n+  [ __builtin_sqrtf(0.0);], \n   use_builtin_sqrtf=yes, use_builtin_sqrtf=no)\n   AC_MSG_RESULT($use_builtin_sqrtf)\n   if test $use_builtin_sqrtf = \"yes\"; then\n-    AC_DEFINE(_GLIBCPP_HAS_BUILTIN_SQRTF)\n+    AC_DEFINE(HAVE_BUILTIN_SQRTF)\n   fi\n+  AC_MSG_CHECKING([for __builtin_sqrtl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_sqrtl(0.0);], \n+  use_builtin_sqrtl=yes, use_builtin_sqrtl=no)\n+  AC_MSG_RESULT($use_builtin_sqrtl)\n+  if test $use_builtin_sqrtl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_SQRTL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_tan])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_tan(0.0);], \n+  use_builtin_tan=yes, use_builtin_tan=no)\n+  AC_MSG_RESULT($use_builtin_tan)\n+  if test $use_builtin_tan = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_TAN)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_tanf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_tanf(0.0);], \n+  use_builtin_tanf=yes, use_builtin_tanf=no)\n+  AC_MSG_RESULT($use_builtin_tanf)\n+  if test $use_builtin_tanf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_TANF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_tanl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_tanl(0.0);], \n+  use_builtin_tanl=yes, use_builtin_tanl=no)\n+  AC_MSG_RESULT($use_builtin_tanl)\n+  if test $use_builtin_tanl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_TANL)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_tanh])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_tanh(0.0);], \n+  use_builtin_tanh=yes, use_builtin_tanh=no)\n+  AC_MSG_RESULT($use_builtin_tanh)\n+  if test $use_builtin_tanh = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_TANH)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_tanhf])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_tanhf(0.0);], \n+  use_builtin_tanhf=yes, use_builtin_tanhf=no)\n+  AC_MSG_RESULT($use_builtin_tanhf)\n+  if test $use_builtin_tanhf = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_TANHF)\n+  fi\n+  AC_MSG_CHECKING([for __builtin_tanhl])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ __builtin_tanhl(0.0);], \n+  use_builtin_tanhl=yes, use_builtin_tanhl=no)\n+  AC_MSG_RESULT($use_builtin_tanhl)\n+  if test $use_builtin_tanhl = \"yes\"; then\n+    AC_DEFINE(HAVE_BUILTIN_TANHL)\n+  fi\n+  AC_LANG_RESTORE\n ])\n \n \n+\n dnl Check to see what architecture we are compiling for. If it's\n dnl supported, use special hand-crafted routines to provide thread\n dnl primitives. Also, if architecture-specific flags are required for \n@@ -508,20 +1038,26 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   csqrtl ctanhl ctanl cargl hypotl signbitl c_logl clog10l))\n   AC_SUBST(USE_LONG_DOUBLE)\n \n-  dnl Check to see if basic C math functions have faster float versions.\n-  AC_CHECK_FUNCS(modf isnan isnanf isnanl isinf isinff isinfl copysign \\\n-  copysignl cosf coshf logf log10f powf sinf sinhf sqrtf tanf tanhf \\\n-  strtof strtold fabsf sincos sincosf sincosl finite finite fqfinite \\\n-  fpclass qfpclass)\n+  dnl Check to see if basic C math functions have float, long double versions.\n+  AC_CHECK_FUNCS(isnan isnanf isnanl isinf isinff isinfl copysign copysignl \\\n+  acosf acosl asinf asinl atanf atanl atan2f atan2l ceilf ceill cosf cosl \\\n+  coshf coshl expf expl fabsf fabsl floorf floorl frexpf frexpl ldexpf \\\n+  ldexpl logf logl log10f log10l modf modff modfl powf powl sinf sinl sinhf \\\n+  sinhl sqrtf sqrtl tanf tanl tanhf tanhl strtof strtold sincos sincosf \\\n+  sincosl finite finitef finitel fqfinite fpclass qfpclass)\n \n #Some runtimes have these functions with a preceding underscore. Please\n # keep this sync'd with the one above. And if you add any new symbol,\n # please add the corresponding block in the @BOTTOM@ section of\n # acconfig.h.\n-AC_CHECK_FUNCS(_modf _isnan _isnanf _isnanl _isinf _isinff _isinfl _copysign \\\n-_copysignl _cosf _coshf _logf _log10f _powf _sinf _sinhf _sqrtf _tanf _tanhf \\\n-_strtof _strtold _fabsf _sincos _sincosf _sincosl _finite _finitef _qfinite \\\n-_fpclass _qfpclass)\n+\n+  AC_CHECK_FUNCS(_isnan _isnanf _isnanl _isinf _isinff _isinfl _copysign \\\n+  _copysignl _acosf _acosl _asinf _asinl _atanf _atanl _atan2f _atan2l \\\n+  _ceilf _ceill _cosf _cosl _coshf _coshl _expf _expl _fabsf _fabsl \\\n+  _floorf _floorl _frexpf _frexpl _ldexpf _ldexpl _logf _logl _log10f \\\n+  _log10l _modf _modff _modfl _powf _powl _sinf _sinl _sinhf _sinhl _sqrtf \\\n+  _sqrtl _tanf _tanl _tanhf _tanhl _strtof _strtold _sincos _sincosf _sincosl \\\n+  _finite _finitef _finitel _fqfinite _fpclass _qfpclass)\n \n LIBS=\"$save_LIBS\"\n ])"}, {"sha": "80cd18abf2eef99929ac5a8d10eefd828f8b216e", "filename": "libstdc++-v3/bits/std_cmath.h", "status": "modified", "additions": 582, "deletions": 137, "changes": 719, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fstd_cmath.h?ref=54fa741538eaf41ed84093cc5245f41119a8e969", "patch": "@@ -39,207 +39,652 @@\n # include_next <math.h>\n # include_next <stdlib.h>\n \n-#include <bits/c++config.h>\n+# include <bits/c++config.h>\n \n namespace std {\n \n-  inline long\n-  abs(long __l) { return ::labs(__l); }\n+    //\n+    // float\n+    //\n \n-  inline ldiv_t\n-  div(long __a, long __b) { return ::ldiv(__a, __b); }\n+#if _GLIBCPP_HAVE_BUILTIN_FABSF\n+    inline float abs(float __x)\n+      { return __builtin_fabsf(__x); }\n+#elif _GLIBCPP_HAVE_FABSF\n+    inline float abs(float __x)\n+      { return ::fabsf(__x); }\n+#else\n+    inline float abs(float __x)\n+      { return ::fabs(static_cast<double>(__x)); }\n+#endif\n \n-  // double\n-  inline double\n-  abs(double __x) { return ::fabs(__x); }\n+#if _GLIBCPP_HAVE_BUILTIN_ACOSF\n+    inline float acos(float __x)\n+      { return __builtin_acosf(__x); }\n+#elif _GLIBCPP_HAVE_ACOSF\n+    inline float acos(float __x)\n+      { return ::acosf(__x); }\n+#else\n+    inline float acos(float __x)\n+      { return ::acos(static_cast<double>(__x)); }\n+#endif\n \n-  double\n-  pow(double, int);\n+#if _GLIBCPP_HAVE_BUILTIN_ASINF\n+    inline float asin(float __x)\n+      { return __builtin_asinf(__x); }\n+#elif _GLIBCPP_HAVE_ASINF\n+    inline float asin(float __x)\n+      { return ::asinf(__x); }\n+#else\n+    inline float asin(float __x)\n+      { return ::asin(static_cast<double>(__x)); }\n+#endif\n \n-  // float\n-  inline float\n-  ceil(float __x) { return ::ceil(static_cast<double>(__x)); }\n+#if _GLIBCPP_HAVE_BUILTIN_ATANF\n+    inline float atan(float __x)\n+      { return __builtin_atanf(__x); }\n+#elif _GLIBCPP_HAVE_ATANF\n+    inline float atan(float __x)\n+      { return ::atanf(__x); }\n+#else\n+    inline float atan(float __x)\n+      { return ::atan(static_cast<double>(__x)); }\n+#endif\n \n-  inline float\n-  floor(float __x) { return ::floor(static_cast<double>(__x)); }\n+#if _GLIBCPP_HAVE_BUILTIN_ATAN2F\n+    inline float atan2(float __y, float __x)\n+      { return __builtin_atan2f(__y, __x); }\n+#elif _GLIBCPP_HAVE_ATAN2F\n+    inline float atan2(float __y, float __x)\n+      { return ::atan2f(__y, __x); }\n+#else\n+    inline float atan2(float __y, float __x)\n+      { return ::atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n+#endif\n \n-  inline float\n-  fmod(float __x, float __y) \n-  { return ::fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n+#if _GLIBCPP_HAVE_BUILTIN_CEILF\n+    inline float ceil(float __x)\n+      { return __builtin_ceilf(__x); }\n+#elif _GLIBCPP_HAVE_CEILF\n+    inline float ceil(float __x)\n+      { return ::ceilf(__x); }\n+#else\n+    inline float ceil(float __x)\n+      { return ::ceil(static_cast<double>(__x)); }\n+#endif\n \n-  inline float\n-  frexp(float __x, int* __p) \n-  { return ::frexp(static_cast<double>(__x), __p); }\n+#if _GLIBCPP_HAVE_BUILTIN_COSF\n+    inline float cos(float __x)\n+      { return __builtin_cosf(__x); }\n+#elif _GLIBCPP_HAVE_COSF\n+    inline float cos(float __x)\n+      { return ::cosf(__x); }\n+#else\n+    inline float cos(float __x)\n+      { return ::cos(static_cast<double>(__x)); }\n+#endif\n \n-  inline float\n-  ldexp(float __x, int __i) \n-  { return ::ldexp(static_cast<double>(__x), __i); }\n+#if _GLIBCPP_HAVE_BUILTIN_COSHF\n+    inline float cosh(float __x)\n+      { return __builtin_coshf(__x); }\n+#elif _GLIBCPP_HAVE_COSHF\n+    inline float cosh(float __x)\n+      { return ::coshf(__x); }\n+#else\n+    inline float cosh(float __x)\n+      { return ::cosh(static_cast<double>(__x)); }\n+#endif\n \n-  inline float\n-  pow(float __x, float __y) \n-  { return ::pow(static_cast<double>(__x), static_cast<double>(__y)); }\n+#if _GLIBCPP_HAVE_BUILTIN_EXPF\n+    inline float exp(float __x)\n+      { return __builtin_expf(__x); }\n+#elif _GLIBCPP_HAVE_EXPF\n+    inline float exp(float __x)\n+      { return ::expf(__x); }\n+#else\n+    inline float exp(float __x)\n+      { return ::exp(static_cast<double>(__x)); }\n+#endif\n \n-  float\n-  pow(float, int); \n+#if _GLIBCPP_HAVE_BUILTIN_FABSF\n+    inline float fabs(float __x)\n+      { return __builtin_fabsf(__x); }\n+#elif _GLIBCPP_HAVE_FABSF\n+    inline float fabs(float __x)\n+      { return ::fabsf(__x); }\n+#else\n+    inline float fabs(float __x)\n+      { return ::fabs(static_cast<double>(__x)); }\n+#endif\n \n-#if _GLIBCPP_HAVE_ABSF\n-  inline float\n-  abs(float __x) { return ::absf(__x); }\n+#if _GLIBCPP_HAVE_BUILTIN_FLOORF\n+    inline float floor(float __x)\n+      { return __builtin_floorf(__x); }\n+#elif _GLIBCPP_HAVE_FLOORF\n+    inline float floor(float __x)\n+      { return ::floorf(__x); }\n #else\n-  inline float\n-  abs(float __x) { return ::fabs(static_cast<double>(__x)); }\n+    inline float floor(float __x)\n+      { return ::floor(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_ACOSF\n-  inline float\n-  acos(float __x) { return ::acosf(__x); }\n+#if _GLIBCPP_HAVE_BUILTIN_FMODFF\n+    inline float fmod(float __x, float __y)\n+      { return __builtin_fmodf(__x, __y); }\n+#elif _GLIBCPP_HAVE_FMODFF\n+    inline float fmod(float __x, float __y)\n+      { return ::fmodf(__x, __y); }\n #else\n-  inline float\n-  acos(float __x) { return ::acos(static_cast<double>(__x)); }\n+    inline float fmod(float __x, float __y)\n+      { return ::fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n-#if _GLIBCPP_HAVE_ASINF\n-  inline float\n-  asin(float __x) { return ::asinf(__x); }\n+#if _GLIBCPP_HAVE_BUILTIN_FREXPF\n+    inline float frexp(float __x, int* __exp)\n+      { return __builtin_frexpf(__x, __exp); }\n+#elif _GLIBCPP_HAVE_FREXPF\n+    inline float frexp(float __x, int* __exp)\n+      { return ::frexpf(__x, __exp); }\n #else\n-  inline float\n-  asin(float __x) { return ::asin(static_cast<double>(__x)); }\n+    inline float frexp(float __x, int* __exp)\n+      { return ::frexp(__x, __exp); }\n #endif\n \n-#if _GLIBCPP_HAVE_ATANF\n-  inline float\n-  atan(float __x) { return ::atanf(__x); }\n+#if _GLIBCPP_HAVE_BUILTIN_LDEXPF\n+    inline float ldexp(float __x, int __exp)\n+      { return __builtin_ldexpf(__x, __exp); }\n+#elif _GLIBCPP_HAVE_LDEXPF\n+    inline float ldexp(float __x, int __exp)\n+      { return ::ldexpf(__x, __exp); }\n #else\n-  inline float\n-  atan(float __x) { return ::atan(static_cast<double>(__x)); }\n+    inline float ldexp(float __x, int __exp)\n+      { return ::ldexp(static_cast<double>(__x), __exp); }\n #endif\n \n-#if _GLIBCPP_HAVE_ATAN2F\n-  inline float\n-  atan2(float __x, float __y) { return ::atan2f(__x, __y); }\n+#if _GLIBCPP_HAVE_BUILTIN_LOGF\n+    inline float log(float __x)\n+      { return __builtin_logf(__x); }\n+#elif _GLIBCPP_HAVE_LOGF\n+    inline float log(float __x)\n+      { return ::logf(__x); }\n #else\n-  inline float\n-  atan2(float __x, float __y) \n-  { return ::atan2(static_cast<double>(__x), static_cast<double>(__y)); }\n+    inline float log(float __x)\n+      { return ::log(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_TANF\n-  inline float\n-  tan(float __x) { return ::tanf(__x); }\n+#if _GLIBCPP_HAVE_BUILTIN_LOG10F\n+    inline float log10(float __x)\n+      { return __builtin_log10f(__x); }\n+#elif _GLIBCPP_HAVE_LOG10F\n+    inline float log10(float __x)\n+      { return ::log10f(__x); }\n #else\n-  inline float\n-  tan(float __x) { return ::tan(static_cast<double>(__x)); }\n+    inline float log10(float __x)\n+      { return ::log10(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_SINHF\n-  inline float\n-  sinh(float __x) { return ::sinhf(__x); }\n+#if _GLIBCPP_HAVE_BUILTIN_MODF\n+    inline float modf(float __x, float* __iptr)\n+      { return __builtin_modff(__x, __iptr); }\n+#elif _GLIBCPP_HAVE_MODF\n+    inline float modf(float __x, float* __iptr)\n+      { return ::modff(__x, __iptr); }\n #else\n-  inline float\n-  sinh(float __x) { return ::sinh(static_cast<double>(__x)); }\n+    inline float modf(float __x, float* __iptr)\n+    {\n+       double __tmp;\n+       double __res = _C_legacy::modf(static_cast<double>(__x), &__tmp);\n+       *__iptr = static_cast<float> (__tmp);\n+       return __res;\n+    }\n #endif\n \n-#if _GLIBCPP_HAVE_TANHF\n-  inline float\n-  tanh(float __x) { return ::tanhf(__x); }\n+#if _GLIBCPP_HAVE_BUILTIN_POWF\n+    inline float pow(float __x, float __y)\n+      { return __builtin_powf(__x, __y); }\n+#elif _GLIBCPP_HAVE_POWF\n+    inline float pow(float __x, float __y)\n+      { return ::powf(__x, __y); }\n #else\n-  inline float\n-  tanh(float __x) { return ::tanh(static_cast<double>(__x)); }\n+    inline float pow(float __x, float __y)\n+      { return ::pow(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n-#if _GLIBCPP_HAVE_COSHF\n-  inline float\n-  cosh(float __x) { return ::coshf(__x); }\n+    float pow (float, int);\n+\n+#if _GLIBCPP_HAVE_BUILTIN_SINF\n+    inline float sin(float __x)\n+      { return __builtin_sinf(__x); }\n+#elif _GLIBCPP_HAVE_SINF\n+    inline float sin(float __x)\n+      { return ::sinf(__x); }\n #else\n-  inline float\n-  cosh(float __x) { return ::cosh(static_cast<double>(__x)); }\n+    inline float sin(float __x)\n+      { return ::sin(static_cast<double>(__x)); }\n #endif\n- \n-#if _GLIBCPP_HAVE_EXPF\n-  inline float\n-  exp(float __x) { return ::expf(__x); }\n+\n+#if _GLIBCPP_HAVE_BUILTIN_SINHF\n+    inline float sinh(float __x)\n+      { return __builtin_sinhf(__x); }\n+#elif _GLIBCPP_HAVE_SINHF\n+    inline float sinh(float __x)\n+      { return ::sinhf(__x); }\n #else\n-  inline float\n-  exp(float __x) { return ::exp(static_cast<double>(__x)); }\n+    inline float sinh(float __x)\n+      { return ::sinh(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_LOGF\n-  inline float\n-  log(float __x) { return ::logf(__x); }\n+#if _GLIBCPP_HAVE_BUILTIN_SQRTF\n+    inline float sqrt(float __x)\n+      { return __builtin_sqrtf(__x); }\n+#elif _GLIBCPP_HAVE_SQRTF\n+    inline float sqrt(float __x)\n+      { return ::sqrtf(__x); }\n #else\n-  inline float\n-  log(float __x) { return ::log(static_cast<double>(__x)); }\n+    inline float sqrt(float __x)\n+      { return ::sqrt(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_LOG10F\n-  inline float\n-  log10(float __x) { return ::log10f(__x); }\n+#if _GLIBCPP_HAVE_BUILTIN_TANF\n+    inline float tan(float __x)\n+      { return __builtin_tanf(__x); }\n+#elif _GLIBCPP_HAVE_TANF\n+    inline float tan(float __x)\n+      { return ::tanf(__x); }\n #else\n-  inline float\n-  log10(float __x) { return ::log10(static_cast<double>(__x)); }\n+    inline float tan(float __x)\n+      { return ::tan(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_MODFF\n-  inline float\n-  modf(float __x, float* __p) { return ::modff(__x, __p); }\n+#if _GLIBCPP_HAVE_BUILTIN_TANHF\n+    inline float tanh(float __x)\n+      { return __builtin_tanhf(__x); }\n+#elif _GLIBCPP_HAVE_TANHF\n+    inline float tanh(float __x)\n+      { return ::tanhf(__x); }\n #else\n-  inline float\n-  modf(float __x, float* __p) \n-  {\n-    double __tmp;\n-    double __res = ::modf(static_cast<double>(__x), &__tmp);\n-    *__p = static_cast<float> (__tmp);\n-    return __res;\n-  }\n+    inline float tanh(float __x)\n+      { return ::tanh(static_cast<double>(__x)); }\n #endif\n \n-#if GLIBCPP_HAS_BUILTIN_SINF\n-  inline float\n-  sin(float __x) { return __builtin_sinf(__x); }\n-#elif _GLIBCPP_HAVE_SINF\n-  inline float\n-  sin(float __x) { return ::sinf(__x); }\n+    //\n+    // double\n+    //\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FABS\n+    inline double abs(double __x)\n+      { return __builtin_fabs(__x); }\n #else\n-  inline float\n-  sin(float __x) { return ::sin(static_cast<double>(__x)); }\n+    inline double abs(double __x)\n+      { return ::fabs(__x); }\n #endif\n \n-#if GLIBCPP_HAS_BUILTIN_COSF\n-  inline float\n-  cos(float __x) { return __builtin_cosf(__x); }\n-#elif _GLIBCPP_HAVE_COSF\n-  inline float\n-  cos(float __x) { return ::cosf(__x); }\n+#if _GLIBCPP_HAVE_BUILTIN_ACOS\n+    inline double acos(double __x)\n+      { return __builtin_acos(__x); }\n #else\n-  inline float\n-  cos(float __x) { return ::cos(static_cast<double>(__x)); }\n+    inline double acos(double __x)\n+      { return ::acos(__x); }\n #endif\n \n-#if GLIBCPP_HAS_BUILTIN_FABSF\n-  inline float\n-  fabs(float __x) { return __builtin_fabsf(__x); }\n-#elif _GLIBCPP_HAVE_FABSF\n-  inline float\n-  fabs(float __x) { return ::fabsf(__x); }\n+#if _GLIBCPP_HAVE_BUILTIN_ASIN\n+    inline double asin(double __x)\n+      { return __builtin_asin(__x); }\n #else\n-  inline float\n-  fabs(float __x) { return ::fabs(static_cast<double>(__x)); }\n+    inline double asin(double __x)\n+      { return ::asin(__x); }\n #endif\n \n-#if GLIBCPP_HAS_BUILTIN_SQRTF\n-  inline float\n-  sqrt(float __x) { return __builtin_sqrtf(__x); }\n-#elif _GLIBCPP_HAVE_SQRTF\n-  inline float\n-  sqrt(float __x) { return ::sqrtf(__x); }\n+#if _GLIBCPP_HAVE_BUILTIN_ATAN\n+    inline double atan(double __x)\n+      { return __builtin_atan(__x); }\n+#else\n+    inline double atan(double __x)\n+      { return ::atan(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_ATAN2\n+    inline double atan2(double __y, double __x)\n+      { return __builtin_atan2(__y, __x); }\n+#else\n+    inline double atan2(double __y, double __x)\n+      { return ::atan2(__y, __x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_CEIL\n+    inline double ceil(double __x)\n+      { return __builtin_fceil(__x); }\n+#else\n+    inline double ceil(double __x)\n+      { return ::ceil(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_COS\n+    inline double cos(double __x)\n+      { return __builtin_cos(__x); }\n+#else\n+    inline double cos(double __x)\n+      { return ::cos(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_COSH\n+    inline double cosh(double __x)\n+      { return __builtin_cosh(__x); }\n+#else\n+    inline double cosh(double __x)\n+      { return ::cosh(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_EXP\n+    inline double exp(double __x)\n+      { return __builtin_exp(__x); }\n+#else\n+    inline double exp(double __x)\n+      { return ::exp(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FABS\n+    inline double fabs(double __x)\n+      { return __builtin_fabs(__x); }\n+#else\n+    inline double fabs(double __x)\n+      { return ::fabs(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FLOOR\n+    inline double floor(double __x)\n+      { return __builtin_ffloor(__x); }\n+#else\n+    inline double floor(double __x)\n+      { return ::floor(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FMOD\n+    inline double fmod(double __x, double __y)\n+      { return __builtin_fmod(__x, __y); }\n+#else\n+    inline double fmod(double __x, double __y)\n+      { return ::fmod(__x, __y); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FREXP\n+    inline double frexp(double __x, int* __exp)\n+      { return __builtin_frexp(__x, __exp); }\n+#else\n+    inline double frexp(double __x, int* __exp)\n+      { return ::frexp(__x, __exp); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_LDEXP\n+    inline double ldexp(double __x, int __exp)\n+      { return __builtin_ldexp(__x, __exp); }\n+#else\n+    inline double ldexp(double __x, int __exp)\n+      { return ::ldexp(__x, __exp); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_LOG\n+    inline double log(double __x)\n+      { return __builtin_log(__x); }\n+#else\n+    inline double log(double __x)\n+      { return ::log(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_LOG10\n+    inline double log10(double __x)\n+      { return __builtin_log10(__x); }\n #else\n-  inline float\n-  sqrt(float __x) { return ::sqrt(static_cast<double>(__x)); }\n+    inline double log10(double __x)\n+      { return ::log10(__x); }\n #endif\n \n-  // XXX long double\n-  long double\n-  pow(long double, int);\n+#if _GLIBCPP_HAVE_BUILTIN_MODF\n+    inline double modf(double __x, double* __iptr)\n+      { return __builtin_modf(__x, __iptr); }\n+#else\n+    inline double modf(double __x, double* __iptr)\n+      { return ::modf(__x, __iptr); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_POW\n+    inline double pow(double __x, double __y)\n+      { return __builtin_pow(__x, static_cast<double>(__y)); }\n+#else\n+    inline double pow(double __x, double __y)\n+      { return ::pow(__x, __y); }\n+#endif\n+\n+    double pow (double, int);\n+\n+#if _GLIBCPP_HAVE_BUILTIN_SIN\n+    inline double sin(double __x)\n+      { return __builtin_sin(__x); }\n+#else\n+    inline double sin(double __x)\n+      { return ::sin(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_SINH\n+    inline double sinh(double __x)\n+      { return __builtin_sinh(__x); }\n+#else\n+    inline double sinh(double __x)\n+      { return ::sinh(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_SQRT\n+    inline double sqrt(double __x)\n+      { return __builtin_fsqrt(__x); }\n+#else\n+    inline double sqrt(double __x)\n+      { return ::sqrt(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_TAN\n+    inline double tan(double __x)\n+      { return __builtin_tan(__x); }\n+#else\n+    inline double tan(double __x)\n+      { return ::tan(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_TANH\n+    inline double tanh(double __x)\n+      { return __builtin_tanh(__x); }\n+#else\n+    inline double tanh(double __x)\n+      { return ::tanh(__x); }\n+#endif\n+\n+    //\n+    // long double\n+    //\n+#if _GLIBCPP_HAVE_BUILTIN_FABSL\n+    inline long double abs(long double __x)\n+      { return __builtin_fabsl(__x); }\n+#elif _GLIBCPP_HAVE_FABSL\n+    inline long double abs(long double __x)\n+      { return ::fabsl(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_ACOSL\n+    inline long double acos(long double __x)\n+      { return __builtin_acosl(__x); }\n+#elif _GLIBCPP_HAVE_ACOSL\n+    inline long double acos(long double __x)\n+      { return ::acosl(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_ASINL\n+    inline long double asin(long double __x)\n+      { return __builtin_asinl(__x); }\n+#elif _GLIBCPP_HAVE_ASINL\n+    inline long double asin(long double __x)\n+      { return ::asinl(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_ATANL\n+    inline long double atan(long double __x)\n+      { return __builtin_atanl(__x); }\n+#elif _GLIBCPP_HAVE_ATANL\n+    inline long double atan(long double __x)\n+      { return ::atanl(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_ATAN2L\n+    inline long double atan2(long double __y, long double __x)\n+      { return __builtin_atan2l(__y, __x); }\n+#elif _GLIBCPP_HAVE_ATAN2L\n+    inline long double atan2(long double __y, long double __x)\n+      { return ::atan2l(__y, __x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_CEILL\n+    inline long double ceil(long double __x)\n+      { return __builtin_ceill(__x); }\n+#elif _GLIBCPP_HAVE_CEILL\n+    inline long double ceil(long double __x)\n+      { return ::ceill(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_COSL\n+    inline long double cos(long double __x)\n+      { return __builtin_cosl(__x); }\n+#elif _GLIBCPP_HAVE_COSL\n+    inline long double cos(long double __x)\n+      { return ::cosl(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_COSHL\n+    inline long double cosh(long double __x)\n+      { return __builtin_coshl(__x); }\n+#elif _GLIBCPP_HAVE_COSHL\n+    inline long double cosh(long double __x)\n+      { return ::coshl(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_EXPL\n+    inline long double exp(long double __x)\n+      { return __builtin_expl(__x); }\n+#elif _GLIBCPP_HAVE_EXPL\n+    inline long double exp(long double __x)\n+      { return ::expl(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FABSL\n+    inline long double fabs(long double __x)\n+      { return __builtin_fabsl(__x); }\n+#elif _GLIBCPP_HAVE_FABSL\n+    inline long double fabs(long double __x)\n+      { return ::fabsl(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FLOORL\n+    inline long double floor(long double __x)\n+      { return __builtin_floorl(__x); }\n+#elif _GLIBCPP_HAVE_FLOORL\n+    inline long double floor(long double __x)\n+      { return ::floorl(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FMODL\n+    inline long double fmod(long double __x, long double __y)\n+      { return __builtin_fmodl(__x, __y); }\n+#elif _GLIBCPP_HAVE_FMODL\n+    inline long double fmod(long double __x, long double __y)\n+      { return ::fmodl(__x, __y); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FREXPL\n+    inline long double frexp(long double __x, int* __exp)\n+      { return __builtin_frexpl(__x, __exp); }\n+#elif _GLIBCPP_HAVE_FREXPL\n+    inline long double frexp(long double __x, int* __exp)\n+      { return ::frexpl(__x, __exp); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_LDEXPL\n+    inline long double ldexp(long double __x, int __exp)\n+      { return __builtin_ldexpl(__x, __exp); }\n+#elif _GLIBCPP_HAVE_LDEXPL\n+    inline long double ldexp(long double __x, int __exp)\n+      { return ::ldexpl(__x, __exp); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_LOGL\n+    inline long double log(long double __x)\n+      { return __builtin_logl(__x); }\n+#elif _GLIBCPP_HAVE_LOGL\n+    inline long double log(long double __x)\n+      { return ::logl(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_LOG10L\n+    inline long double log10(long double __x)\n+      { return __builtin_log10l(__x); }\n+#elif _GLIBCPP_HAVE_LOG10L\n+    inline long double log10(long double __x)\n+      { return ::log10l(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_MODFL\n+    inline long double mod(long double __x, long double* __iptr)\n+      { return __builtin_modfl(__x, __iptr); }\n+#elif _GLIBCPP_HAVE_MODFL\n+    inline long double modf(long double __x, long double* __iptr)\n+      { return ::modfl(__x, __iptr); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_POWL\n+    inline long double pow(long double __x, long double __y)\n+      { return __builtin_powl(__x, __y); }\n+#elif _GLIBCPP_HAVE_POWL\n+    inline long double pow(long double __x, long double __y)\n+      { return ::powl(__x, __y); }\n+#endif\n+\n+    long double pow(long double, int);\n+\n+#if _GLIBCPP_HAVE_BUILTIN_SINL\n+    inline long double sin(long double __x)\n+      { return __builtin_sinl(__x); }\n+#elif _GLIBCPP_HAVE_SINL\n+    inline long double sin(long double __x)\n+      { return ::sinl(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_SINHL\n+    inline long double sinh(long double __x)\n+      { return __builtin_sinhl(__x); }\n+#elif _GLIBCPP_HAVE_SINHL\n+    inline long double sinh(long double __x)\n+      { return ::sinhl(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_SQRTL\n+    inline long double sqrt(long double __x)\n+      { return __builtin_sqrtl(__x); }\n+#elif _GLIBCPP_HAVE_SQRTL\n+    inline long double sqrt(long double __x)\n+      { return ::sqrtl(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_TANL\n+    inline long double tan(long double __x)\n+      { return __builtin_tanl(__x); }\n+#elif _GLIBCPP_HAVE_TANL\n+    inline long double tan(long double __x)\n+      { return ::tanl(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_TANHL\n+    inline long double tanh(long double __x)\n+      { return __builtin_tanhl(__x); }\n+#elif _GLIBCPP_HAVE_TANHL\n+    inline long double tanh(long double __x)\n+      { return ::tanhl(__x); }\n+#endif\n \n } // std\n "}, {"sha": "8549b5a13ad9f0b65d7e7f512ac3040e8ac808e4", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 546, "deletions": 15, "changes": 561, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=54fa741538eaf41ed84093cc5245f41119a8e969", "patch": "@@ -15,17 +15,194 @@\n // Define if code specialized for wchar_t should be used.\n #undef _GLIBCPP_USE_WCHAR_T\n \n-// Define if the compiler/host combination has __builtin_sinf defined.\n-#undef _GLIBCPP_HAS_BUILTIN_SINF\n+// Define if the compiler/host combination has __builtin_acos\n+#undef HAVE_BUILTIN_ACOS\n \n-// Define if the compiler/host combination has __builtin_cosf defined.\n-#undef _GLIBCPP_HAS_BUILTIN_COSF\n+// Define if the compiler/host combination has __builtin_acosf\n+#undef HAVE_BUILTIN_ACOSF\n \n-// Define if the compiler/host combination has __builtin_fabsf defined.\n-#undef _GLIBCPP_HAS_BUILTIN_FABSF\n+// Define if the compiler/host combination has __builtin_acosl\n+#undef HAVE_BUILTIN_ACOSL\n \n-// Define if the compiler/host combination has __builtin_fabsf defined.\n-#undef _GLIBCPP_HAS_BUILTIN_SQRTF\n+// Define if the compiler/host combination has __builtin_asin\n+#undef HAVE_BUILTIN_ASIN\n+\n+// Define if the compiler/host combination has __builtin_asinf\n+#undef HAVE_BUILTIN_ASINF\n+\n+// Define if the compiler/host combination has __builtin_asinl\n+#undef HAVE_BUILTIN_ASINL\n+\n+// Define if the compiler/host combination has __builtin_atan\n+#undef HAVE_BUILTIN_ATAN\n+\n+// Define if the compiler/host combination has __builtin_atanf\n+#undef HAVE_BUILTIN_ATANF\n+\n+// Define if the compiler/host combination has __builtin_atanl\n+#undef HAVE_BUILTIN_ATANL\n+\n+// Define if the compiler/host combination has __builtin_atan2\n+#undef HAVE_BUILTIN_ATAN2\n+\n+// Define if the compiler/host combination has __builtin_atan2f\n+#undef HAVE_BUILTIN_ATAN2F\n+\n+// Define if the compiler/host combination has __builtin_atan2l\n+#undef HAVE_BUILTIN_ATAN2L\n+\n+// Define if the compiler/host combination has __builtin_ceil\n+#undef HAVE_BUILTIN_CEIL\n+\n+// Define if the compiler/host combination has __builtin_ceilf\n+#undef HAVE_BUILTIN_CEILF\n+\n+// Define if the compiler/host combination has __builtin_ceill\n+#undef HAVE_BUILTIN_CEILL\n+\n+// Define if the compiler/host combination has __builtin_cos\n+#undef HAVE_BUILTIN_COS\n+\n+// Define if the compiler/host combination has __builtin_cosf\n+#undef HAVE_BUILTIN_COSF\n+\n+// Define if the compiler/host combination has __builtin_cosl\n+#undef HAVE_BUILTIN_COSL\n+\n+// Define if the compiler/host combination has __builtin_cosh\n+#undef HAVE_BUILTIN_COSH\n+\n+// Define if the compiler/host combination has __builtin_coshf\n+#undef HAVE_BUILTIN_COSHF\n+\n+// Define if the compiler/host combination has __builtin_coshl\n+#undef HAVE_BUILTIN_COSHL\n+\n+// Define if the compiler/host combination has __builtin_exp\n+#undef HAVE_BUILTIN_EXP\n+\n+// Define if the compiler/host combination has __builtin_expf\n+#undef HAVE_BUILTIN_EXPF\n+\n+// Define if the compiler/host combination has __builtin_expl\n+#undef HAVE_BUILTIN_EXPL\n+\n+// Define if the compiler/host combination has __builtin_fabs\n+#undef HAVE_BUILTIN_FABS\n+\n+// Define if the compiler/host combination has __builtin_fabsf\n+#undef HAVE_BUILTIN_FABSF\n+\n+// Define if the compiler/host combination has __builtin_fabsl\n+#undef HAVE_BUILTIN_FABSL\n+\n+// Define if the compiler/host combination has __builtin_floor\n+#undef HAVE_BUILTIN_FLOOR\n+\n+// Define if the compiler/host combination has __builtin_floorf\n+#undef HAVE_BUILTIN_FLOORF\n+\n+// Define if the compiler/host combination has __builtin_floorl\n+#undef HAVE_BUILTIN_FLOORL\n+\n+// Define if the compiler/host combination has __builtin_frexp\n+#undef HAVE_BUILTIN_FREXP\n+\n+// Define if the compiler/host combination has __builtin_frexpf\n+#undef HAVE_BUILTIN_FREXPF\n+\n+// Define if the compiler/host combination has __builtin_frexpl\n+#undef HAVE_BUILTIN_FREXPL\n+\n+// Define if the compiler/host combination has __builtin_ldexp\n+#undef HAVE_BUILTIN_LDEXP\n+\n+// Define if the compiler/host combination has __builtin_ldexpf\n+#undef HAVE_BUILTIN_LDEXPF\n+\n+// Define if the compiler/host combination has __builtin_ldexpl\n+#undef HAVE_BUILTIN_LDEXPL\n+\n+// Define if the compiler/host combination has __builtin_log\n+#undef HAVE_BUILTIN_LOG\n+\n+// Define if the compiler/host combination has __builtin_logf\n+#undef HAVE_BUILTIN_LOGF\n+\n+// Define if the compiler/host combination has __builtin_logl\n+#undef HAVE_BUILTIN_LOGL\n+\n+// Define if the compiler/host combination has __builtin_log10\n+#undef HAVE_BUILTIN_LOG10\n+\n+// Define if the compiler/host combination has __builtin_log10f\n+#undef HAVE_BUILTIN_LOG10F\n+\n+// Define if the compiler/host combination has __builtin_log10l\n+#undef HAVE_BUILTIN_LOG10L\n+\n+// Define if the compiler/host combination has __builtin_modf\n+#undef HAVE_BUILTIN_MODF\n+\n+// Define if the compiler/host combination has __builtin_modff\n+#undef HAVE_BUILTIN_MODFF\n+\n+// Define if the compiler/host combination has __builtin_modfl\n+#undef HAVE_BUILTIN_MODFL\n+\n+// Define if the compiler/host combination has __builtin_pow\n+#undef HAVE_BUILTIN_POW\n+\n+// Define if the compiler/host combination has __builtin_powf\n+#undef HAVE_BUILTIN_POWF\n+\n+// Define if the compiler/host combination has __builtin_powl\n+#undef HAVE_BUILTIN_POWL\n+\n+// Define if the compiler/host combination has __builtin_sin\n+#undef HAVE_BUILTIN_SIN\n+\n+// Define if the compiler/host combination has __builtin_sinf\n+#undef HAVE_BUILTIN_SINF\n+\n+// Define if the compiler/host combination has __builtin_sinl\n+#undef HAVE_BUILTIN_SINL\n+\n+// Define if the compiler/host combination has __builtin_sinh\n+#undef HAVE_BUILTIN_SINH\n+\n+// Define if the compiler/host combination has __builtin_sinhf\n+#undef HAVE_BUILTIN_SINHF\n+\n+// Define if the compiler/host combination has __builtin_sinhl\n+#undef HAVE_BUILTIN_SINHL\n+\n+// Define if the compiler/host combination has __builtin_sqrt\n+#undef HAVE_BUILTIN_SQRT\n+\n+// Define if the compiler/host combination has __builtin_sqrtf\n+#undef HAVE_BUILTIN_SQRTF\n+\n+// Define if the compiler/host combination has __builtin_sqrtl\n+#undef HAVE_BUILTIN_SQRTL\n+\n+// Define if the compiler/host combination has __builtin_tan\n+#undef HAVE_BUILTIN_TAN\n+\n+// Define if the compiler/host combination has __builtin_tanf\n+#undef HAVE_BUILTIN_TANF\n+\n+// Define if the compiler/host combination has __builtin_tanl\n+#undef HAVE_BUILTIN_TANL\n+\n+// Define if the compiler/host combination has __builtin_tanh\n+#undef HAVE_BUILTIN_TANH\n+\n+// Define if the compiler/host combination has __builtin_tanhf\n+#undef HAVE_BUILTIN_TANHF\n+\n+// Define if the compiler/host combination has __builtin_tanhl\n+#undef HAVE_BUILTIN_TANHL\n \n // Define if GCC support for __complex__ float is buggy.\n #undef _GLIBCPP_BUGGY_FLOAT_COMPLEX\n@@ -42,6 +219,36 @@\n // Define if modf is present in <math.h>\n #undef HAVE_MODF\n \n+/* Define if you have the _acosf function.  */\n+#undef HAVE__ACOSF\n+\n+/* Define if you have the _acosl function.  */\n+#undef HAVE__ACOSL\n+\n+/* Define if you have the _asinf function.  */\n+#undef HAVE__ASINF\n+\n+/* Define if you have the _asinl function.  */\n+#undef HAVE__ASINL\n+\n+/* Define if you have the _atan2f function.  */\n+#undef HAVE__ATAN2F\n+\n+/* Define if you have the _atan2l function.  */\n+#undef HAVE__ATAN2L\n+\n+/* Define if you have the _atanf function.  */\n+#undef HAVE__ATANF\n+\n+/* Define if you have the _atanl function.  */\n+#undef HAVE__ATANL\n+\n+/* Define if you have the _ceilf function.  */\n+#undef HAVE__CEILF\n+\n+/* Define if you have the _ceill function.  */\n+#undef HAVE__CEILL\n+\n /* Define if you have the _copysign function.  */\n #undef HAVE__COPYSIGN\n \n@@ -54,18 +261,51 @@\n /* Define if you have the _coshf function.  */\n #undef HAVE__COSHF\n \n+/* Define if you have the _coshl function.  */\n+#undef HAVE__COSHL\n+\n+/* Define if you have the _cosl function.  */\n+#undef HAVE__COSL\n+\n+/* Define if you have the _expf function.  */\n+#undef HAVE__EXPF\n+\n+/* Define if you have the _expl function.  */\n+#undef HAVE__EXPL\n+\n /* Define if you have the _fabsf function.  */\n #undef HAVE__FABSF\n \n+/* Define if you have the _fabsl function.  */\n+#undef HAVE__FABSL\n+\n /* Define if you have the _finite function.  */\n #undef HAVE__FINITE\n \n /* Define if you have the _finitef function.  */\n #undef HAVE__FINITEF\n \n+/* Define if you have the _finitel function.  */\n+#undef HAVE__FINITEL\n+\n+/* Define if you have the _floorf function.  */\n+#undef HAVE__FLOORF\n+\n+/* Define if you have the _floorl function.  */\n+#undef HAVE__FLOORL\n+\n /* Define if you have the _fpclass function.  */\n #undef HAVE__FPCLASS\n \n+/* Define if you have the _fqfinite function.  */\n+#undef HAVE__FQFINITE\n+\n+/* Define if you have the _frexpf function.  */\n+#undef HAVE__FREXPF\n+\n+/* Define if you have the _frexpl function.  */\n+#undef HAVE__FREXPL\n+\n /* Define if you have the _isinf function.  */\n #undef HAVE__ISINF\n \n@@ -84,20 +324,38 @@\n /* Define if you have the _isnanl function.  */\n #undef HAVE__ISNANL\n \n+/* Define if you have the _ldexpf function.  */\n+#undef HAVE__LDEXPF\n+\n+/* Define if you have the _ldexpl function.  */\n+#undef HAVE__LDEXPL\n+\n /* Define if you have the _log10f function.  */\n #undef HAVE__LOG10F\n \n+/* Define if you have the _log10l function.  */\n+#undef HAVE__LOG10L\n+\n /* Define if you have the _logf function.  */\n #undef HAVE__LOGF\n \n+/* Define if you have the _logl function.  */\n+#undef HAVE__LOGL\n+\n /* Define if you have the _modf function.  */\n #undef HAVE__MODF\n \n+/* Define if you have the _modff function.  */\n+#undef HAVE__MODFF\n+\n+/* Define if you have the _modfl function.  */\n+#undef HAVE__MODFL\n+\n /* Define if you have the _powf function.  */\n #undef HAVE__POWF\n \n-/* Define if you have the _qfinite function.  */\n-#undef HAVE__QFINITE\n+/* Define if you have the _powl function.  */\n+#undef HAVE__POWL\n \n /* Define if you have the _qfpclass function.  */\n #undef HAVE__QFPCLASS\n@@ -117,9 +375,18 @@\n /* Define if you have the _sinhf function.  */\n #undef HAVE__SINHF\n \n+/* Define if you have the _sinhl function.  */\n+#undef HAVE__SINHL\n+\n+/* Define if you have the _sinl function.  */\n+#undef HAVE__SINL\n+\n /* Define if you have the _sqrtf function.  */\n #undef HAVE__SQRTF\n \n+/* Define if you have the _sqrtl function.  */\n+#undef HAVE__SQRTL\n+\n /* Define if you have the _strtof function.  */\n #undef HAVE__STRTOF\n \n@@ -132,9 +399,36 @@\n /* Define if you have the _tanhf function.  */\n #undef HAVE__TANHF\n \n+/* Define if you have the _tanhl function.  */\n+#undef HAVE__TANHL\n+\n+/* Define if you have the _tanl function.  */\n+#undef HAVE__TANL\n+\n+/* Define if you have the acosf function.  */\n+#undef HAVE_ACOSF\n+\n+/* Define if you have the acosl function.  */\n+#undef HAVE_ACOSL\n+\n+/* Define if you have the asinf function.  */\n+#undef HAVE_ASINF\n+\n+/* Define if you have the asinl function.  */\n+#undef HAVE_ASINL\n+\n /* Define if you have the atan2f function.  */\n #undef HAVE_ATAN2F\n \n+/* Define if you have the atan2l function.  */\n+#undef HAVE_ATAN2L\n+\n+/* Define if you have the atanf function.  */\n+#undef HAVE_ATANF\n+\n+/* Define if you have the atanl function.  */\n+#undef HAVE_ATANL\n+\n /* Define if you have the c_log function.  */\n #undef HAVE_C_LOG\n \n@@ -171,6 +465,12 @@\n /* Define if you have the ccosl function.  */\n #undef HAVE_CCOSL\n \n+/* Define if you have the ceilf function.  */\n+#undef HAVE_CEILF\n+\n+/* Define if you have the ceill function.  */\n+#undef HAVE_CEILL\n+\n /* Define if you have the cexp function.  */\n #undef HAVE_CEXP\n \n@@ -204,6 +504,12 @@\n /* Define if you have the coshf function.  */\n #undef HAVE_COSHF\n \n+/* Define if you have the coshl function.  */\n+#undef HAVE_COSHL\n+\n+/* Define if you have the cosl function.  */\n+#undef HAVE_COSL\n+\n /* Define if you have the cpow function.  */\n #undef HAVE_CPOW\n \n@@ -261,18 +567,42 @@\n /* Define if you have the expf function.  */\n #undef HAVE_EXPF\n \n+/* Define if you have the expl function.  */\n+#undef HAVE_EXPL\n+\n /* Define if you have the fabsf function.  */\n #undef HAVE_FABSF\n \n+/* Define if you have the fabsl function.  */\n+#undef HAVE_FABSL\n+\n /* Define if you have the finite function.  */\n #undef HAVE_FINITE\n \n+/* Define if you have the finitef function.  */\n+#undef HAVE_FINITEF\n+\n+/* Define if you have the finitel function.  */\n+#undef HAVE_FINITEL\n+\n+/* Define if you have the floorf function.  */\n+#undef HAVE_FLOORF\n+\n+/* Define if you have the floorl function.  */\n+#undef HAVE_FLOORL\n+\n /* Define if you have the fpclass function.  */\n #undef HAVE_FPCLASS\n \n /* Define if you have the fqfinite function.  */\n #undef HAVE_FQFINITE\n \n+/* Define if you have the frexpf function.  */\n+#undef HAVE_FREXPF\n+\n+/* Define if you have the frexpl function.  */\n+#undef HAVE_FREXPL\n+\n /* Define if you have the getpagesize function.  */\n #undef HAVE_GETPAGESIZE\n \n@@ -312,21 +642,42 @@\n /* Define if you have the isnanl function.  */\n #undef HAVE_ISNANL\n \n+/* Define if you have the ldexpf function.  */\n+#undef HAVE_LDEXPF\n+\n+/* Define if you have the ldexpl function.  */\n+#undef HAVE_LDEXPL\n+\n /* Define if you have the log10f function.  */\n #undef HAVE_LOG10F\n \n+/* Define if you have the log10l function.  */\n+#undef HAVE_LOG10L\n+\n /* Define if you have the logf function.  */\n #undef HAVE_LOGF\n \n+/* Define if you have the logl function.  */\n+#undef HAVE_LOGL\n+\n /* Define if you have the modf function.  */\n #undef HAVE_MODF\n \n+/* Define if you have the modff function.  */\n+#undef HAVE_MODFF\n+\n+/* Define if you have the modfl function.  */\n+#undef HAVE_MODFL\n+\n /* Define if you have the nan function.  */\n #undef HAVE_NAN\n \n /* Define if you have the powf function.  */\n #undef HAVE_POWF\n \n+/* Define if you have the powl function.  */\n+#undef HAVE_POWL\n+\n /* Define if you have the qfpclass function.  */\n #undef HAVE_QFPCLASS\n \n@@ -348,9 +699,18 @@\n /* Define if you have the sinhf function.  */\n #undef HAVE_SINHF\n \n+/* Define if you have the sinhl function.  */\n+#undef HAVE_SINHL\n+\n+/* Define if you have the sinl function.  */\n+#undef HAVE_SINL\n+\n /* Define if you have the sqrtf function.  */\n #undef HAVE_SQRTF\n \n+/* Define if you have the sqrtl function.  */\n+#undef HAVE_SQRTL\n+\n /* Define if you have the strtof function.  */\n #undef HAVE_STRTOF\n \n@@ -363,6 +723,12 @@\n /* Define if you have the tanhf function.  */\n #undef HAVE_TANHF\n \n+/* Define if you have the tanhl function.  */\n+#undef HAVE_TANHL\n+\n+/* Define if you have the tanl function.  */\n+#undef HAVE_TANL\n+\n /* Define if you have the wcslen function.  */\n #undef HAVE_WCSLEN\n \n@@ -476,66 +842,221 @@\n # define cosf _cosf\n #endif\n \n+#if defined (HAVE__ACOSF) && ! defined (HAVE_ACOSF)\n+# define HAVE_ACOSF 1\n+# define acosf _acosf\n+#endif\n+\n+#if defined (HAVE__ACOSL) && ! defined (HAVE_ACOSL)\n+# define HAVE_ACOSL 1\n+# define acosl _acosl\n+#endif\n+\n+#if defined (HAVE__ASINF) && ! defined (HAVE_ASINF)\n+# define HAVE_ASINF 1\n+# define asinf _asinf\n+#endif\n+\n+#if defined (HAVE__ASINL) && ! defined (HAVE_ASINL)\n+# define HAVE_ASINL 1\n+# define asinl _asinl\n+#endif\n+\n+#if defined (HAVE__ATANF) && ! defined (HAVE_ATANF)\n+# define HAVE_ATANF 1\n+# define atanf _atanf\n+#endif\n+\n+#if defined (HAVE__ATANL) && ! defined (HAVE_ATANL)\n+# define HAVE_ATANL 1\n+# define atanl _atanl\n+#endif\n+\n+#if defined (HAVE__CEILF) && ! defined (HAVE_CEILF)\n+# define HAVE_CEILF 1\n+# define aceil _ceilf\n+#endif\n+\n+#if defined (HAVE__CEILL) && ! defined (HAVE_CEILL)\n+# define HAVE_CEILL 1\n+# define aceil _ceill\n+#endif\n+\n #if defined (HAVE__COSHF) && ! defined (HAVE_COSHF)\n # define HAVE_COSHF 1\n # define coshf _coshf\n #endif\n \n+#if defined (HAVE__COSL) && ! defined (HAVE_COSL)\n+# define HAVE_COSL 1\n+# define cosl _cosl\n+#endif\n+\n #if defined (HAVE__LOGF) && ! defined (HAVE_LOGF)\n # define HAVE_LOGF 1\n # define logf _logf\n #endif\n \n+#if defined (HAVE__COSHL) && ! defined (HAVE_COSHL)\n+# define HAVE_COSHL 1\n+# define coshl _coshl\n+#endif\n+\n+#if defined (HAVE__EXPF) && ! defined (HAVE_EXPF)\n+# define HAVE_EXPF 1\n+# define expf _expf\n+#endif\n+\n+#if defined (HAVE__EXPL) && ! defined (HAVE_EXPL)\n+# define HAVE_EXPL 1\n+# define expl _expl\n+#endif\n+\n+#if defined (HAVE__FABSF) && ! defined (HAVE_FABSF)\n+# define HAVE_FABSF 1\n+# define fabsf _fabsf\n+#endif\n+\n+#if defined (HAVE__FABSL) && ! defined (HAVE_FABSL)\n+# define HAVE_FABSL 1\n+# define fabsl _fabsl\n+#endif\n+\n+#if defined (HAVE__FLOORF) && ! defined (HAVE_FLOORF)\n+# define HAVE_FLOORF 1\n+# define floorf _floorf\n+#endif\n+\n+#if defined (HAVE__FLOORL) && ! defined (HAVE_FLOORL)\n+# define HAVE_FLOORL 1\n+# define floorl _floorl\n+#endif\n+\n+#if defined (HAVE__FMODF) && ! defined (HAVE_FMODF)\n+# define HAVE_FMODF 1\n+# define fmodf _fmodf\n+#endif\n+\n+#if defined (HAVE__FMODL) && ! defined (HAVE_FMODL)\n+# define HAVE_FMODL 1\n+# define fmodl _fmodl\n+#endif\n+\n+#if defined (HAVE__FREXPF) && ! defined (HAVE_FREXPF)\n+# define HAVE_FREXPF 1\n+# define frexpf _frexpf\n+#endif\n+\n+#if defined (HAVE__FREXPL) && ! defined (HAVE_FREXPL)\n+# define HAVE_FREXPL 1\n+# define frexpl _frexpl\n+#endif\n+\n+#if defined (HAVE__LDEXPF) && ! defined (HAVE_LDEXPF)\n+# define HAVE_LDEXPF 1\n+# define ldexpf _ldexpf\n+#endif\n+\n+#if defined (HAVE__LDEXPL) && ! defined (HAVE_LDEXPL)\n+# define HAVE_LDEXPL 1\n+# define ldexpl _ldexpl\n+#endif\n+\n #if defined (HAVE__LOG10F) && ! defined (HAVE_LOG10F)\n # define HAVE_LOG10F 1\n # define log10f _log10f\n #endif\n \n+#if defined (HAVE__LOGL) && ! defined (HAVE_LOGL)\n+# define HAVE_LOGL 1\n+# define logl _logl\n+#endif\n+\n #if defined (HAVE__POWF) && ! defined (HAVE_POWF)\n # define HAVE_POWF 1\n # define powf _powf\n #endif\n \n+#if defined (HAVE__LOG10L) && ! defined (HAVE_LOG10L)\n+# define HAVE_LOG10L 1\n+# define log10l _log10l\n+#endif\n+\n+#if defined (HAVE__MODF) && ! defined (HAVE_MODF)\n+# define HAVE_MODF 1\n+# define modf _modf\n+#endif\n+\n+#if defined (HAVE__MODL) && ! defined (HAVE_MODL)\n+# define HAVE_MODL 1\n+# define modl _modl\n+#endif\n+\n #if defined (HAVE__SINF) && ! defined (HAVE_SINF)\n # define HAVE_SINF 1\n # define sinf _sinf\n #endif\n \n+#if defined (HAVE__POWL) && ! defined (HAVE_POWL)\n+# define HAVE_POWL 1\n+# define powl _powl\n+#endif\n+\n #if defined (HAVE__SINHF) && ! defined (HAVE_SINHF)\n # define HAVE_SINHF 1\n # define sinhf _sinhf\n #endif\n \n+#if defined (HAVE__SINL) && ! defined (HAVE_SINL)\n+# define HAVE_SINL 1\n+# define sinl _sinl\n+#endif\n+\n #if defined (HAVE__SQRTF) && ! defined (HAVE_SQRTF)\n # define HAVE_SQRTF 1\n # define sqrtf _sqrtf\n #endif\n \n+#if defined (HAVE__SINHL) && ! defined (HAVE_SINHL)\n+# define HAVE_SINHL 1\n+# define sinhl _sinhl\n+#endif\n+\n #if defined (HAVE__TANF) && ! defined (HAVE_TANF)\n # define HAVE_TANF 1\n # define tanf _tanf\n #endif\n \n+#if defined (HAVE__SQRTL) && ! defined (HAVE_SQRTL)\n+# define HAVE_SQRTL 1\n+# define sqrtl _sqrtl\n+#endif\n+\n #if defined (HAVE__TANHF) && ! defined (HAVE_TANHF)\n # define HAVE_TANHF 1\n # define tanhf _tanhf\n #endif\n \n+#if defined (HAVE__TANL) && ! defined (HAVE_TANL)\n+# define HAVE_TANF 1\n+# define tanf _tanf\n+#endif\n+\n #if defined (HAVE__STRTOF) && ! defined (HAVE_STRTOF)\n # define HAVE_STRTOF 1\n # define strtof _strtof\n #endif\n \n+#if defined (HAVE__TANHL) && ! defined (HAVE_TANHL)\n+# define HAVE_TANHL 1\n+# define tanhl _tanhl\n+#endif\n+\n #if defined (HAVE__STRTOLD) && ! defined (HAVE_STRTOLD)\n # define HAVE_STRTOLD 1\n # define strtold _strtold\n #endif\n \n-#if defined (HAVE__FABSF) && ! defined (HAVE_FABSF)\n-# define HAVE_FABSF 1\n-# define fabsf _fabsf\n-#endif\n-\n #if defined (HAVE__SINCOS) && ! defined (HAVE_SINCOS)\n # define HAVE_SINCOS 1\n # define sincos _sincos\n@@ -556,6 +1077,16 @@\n # define finite _finite\n #endif\n \n+#if defined (HAVE__FINITEF) && ! defined (HAVE_FINITEF)\n+# define HAVE_FINITEF 1\n+# define finitef _finitef\n+#endif\n+\n+#if defined (HAVE__FINITEL) && ! defined (HAVE_FINITEL)\n+# define HAVE_FINITEL 1\n+# define finitel _finitel\n+#endif\n+\n #if defined (HAVE__QFINITE) && ! defined (HAVE_QFINITE)\n # define HAVE_QFINITE 1\n # define qfinite _qfinite"}, {"sha": "a9939eafb61d986c61719e22ac294c0bb3eb5189", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 2061, "deletions": 439, "changes": 2500, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=54fa741538eaf41ed84093cc5245f41119a8e969"}, {"sha": "c82b27cbc76a347a86b1aa006fc19bfc2c3a26b0", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=54fa741538eaf41ed84093cc5245f41119a8e969", "patch": "@@ -116,19 +116,17 @@ includes =\n libio_headers = \\\n         libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \\\n-@GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = @GLIBCPP_NEED_LIBIO_TRUE@\\\n @GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c cleanup.c\n-@GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \\\n+@GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n \n EXTRA_DIST = iostreamP.h\n \n libio_la_LIBADD = $(LIBIO_SRCS) \n libio_la_DEPENDENCIES = $(libio_la_LIBADD)\n libio_la_SOURCES = $(LIBIO_SRCS)\n-@GLIBCPP_NEED_LIBIO_CONFIG_H_TRUE@LIBIO_CONFIG_H = \\\n-@GLIBCPP_NEED_LIBIO_CONFIG_H_TRUE@_G_config.h\n-@GLIBCPP_NEED_LIBIO_CONFIG_H_FALSE@LIBIO_CONFIG_H = \\\n+@GLIBCPP_NEED_LIBIO_CONFIG_H_TRUE@LIBIO_CONFIG_H = @GLIBCPP_NEED_LIBIO_CONFIG_H_TRUE@_G_config.h\n+@GLIBCPP_NEED_LIBIO_CONFIG_H_FALSE@LIBIO_CONFIG_H = \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "35f88d41b03896d3553cacc1251c8d437b7083d8", "filename": "libstdc++-v3/math/mathconf.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Fmath%2Fmathconf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Fmath%2Fmathconf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fmathconf.h?ref=54fa741538eaf41ed84093cc5245f41119a8e969", "patch": "@@ -328,10 +328,10 @@ do {                                                            \\\n \n \n /* Replacement for non-existing float functions.  */\n-#if !defined(_GLIBCPP_HAVE_FABSF) && !defined(_GLIBCPP_HAS_BUILTIN_FABSF)\n+#if !defined(_GLIBCPP_HAVE_FABSF) && !defined(_GLIBCPP_HAVE_BUILTIN_FABSF)\n # define fabsf(x) fabs (x)\n #endif\n-#if !defined(_GLIBCPP_HAVE_COSF) && !defined(_GLIBCPP_HAS_BUILTIN_COSF)\n+#if !defined(_GLIBCPP_HAVE_COSF) && !defined(_GLIBCPP_HAVE_BUILTIN_COSF)\n # define cosf(x) cos (x)\n #endif\n #ifndef _GLIBCPP_HAVE_COSHF\n@@ -349,13 +349,13 @@ do {                                                            \\\n #ifndef _GLIBCPP_HAVE_POWF\n # define powf(x, y) pow (x, y)\n #endif\n-#if !defined(_GLIBCPP_HAVE_SINF) && !defined(_GLIBCPP_HAS_BUILTIN_SINF)\n+#if !defined(_GLIBCPP_HAVE_SINF) && !defined(_GLIBCPP_HAVE_BUILTIN_SINF)\n # define sinf(x) sin (x)\n #endif\n #ifndef _GLIBCPP_HAVE_SINHF\n # define sinhf(x) sinh (x)\n #endif\n-#if !defined(_GLIBCPP_HAVE_SQRTF) && !defined(_GLIBCPP_HAS_BUILTIN_SQRTF)\n+#if !defined(_GLIBCPP_HAVE_SQRTF) && !defined(_GLIBCPP_HAVE_BUILTIN_SQRTF)\n # define sqrtf(x) sqrt (x)\n #endif\n #ifndef _GLIBCPP_HAVE_TANF"}, {"sha": "d233dd151e6034cac99da9306a9df6d8a6e1940c", "filename": "libstdc++-v3/shadow/bits/std_cmath.h", "status": "modified", "additions": 911, "deletions": 100, "changes": 1011, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cmath.h?ref=54fa741538eaf41ed84093cc5245f41119a8e969", "patch": "@@ -34,144 +34,955 @@\n #ifndef _CPP_CMATH\n #define _CPP_CMATH 1\n \n+# include <bits/c++config.h>\n+\n   namespace _C_legacy {\n     extern \"C\" {\n #     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <math.h>\n     }\n     inline double _CPP_HUGE_VAL_capture()        { return HUGE_VAL; }\n-    inline double _CPP_acos_capture(double __x)  { return acos(__x); }\n-    inline double _CPP_asin_capture(double __x)  { return asin(__x); }\n-    inline double _CPP_atan_capture(double __x)  { return atan(__x); }\n-    inline double _CPP_atan2_capture(double __y, double __x) \n-      { return atan2(__y,__x); }\n-    inline double _CPP_cos_capture(double __x)   { return cos(__x); }\n-    inline double _CPP_sin_capture(double __x)   { return sin(__x); }\n-    inline double _CPP_tan_capture(double __x)   { return tan(__x); }\n-    inline double _CPP_cosh_capture(double __x)  { return cosh(__x); }\n-    inline double _CPP_sinh_capture(double __x)  { return sinh(__x); }\n-    inline double _CPP_tanh_capture(double __x)  { return tanh(__x); }\n-    inline double _CPP_exp_capture(double __x)   { return exp(__x); }\n-    inline double _CPP_frexp_capture(double __x, int* __exp) \n+#if _GLIBCPP_HAVE_BUILTIN_ACOSF\n+    inline float _CPP_acos_capture(float __x)\n+      { return __builtin_acosf(__x); }\n+#elif _GLIBCPP_HAVE_ACOSF\n+    inline float _CPP_acos_capture(float __x)\n+      { return acosf(__x); }\n+#else\n+    inline float _CPP_acos_capture(float __x)\n+      { return acos(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_ASINF\n+    inline float _CPP_asin_capture(float __x)\n+      { return __builtin_asinf(__x); }\n+#elif _GLIBCPP_HAVE_ASINF\n+    inline float _CPP_asin_capture(float __x)\n+      { return asinf(__x); }\n+#else\n+    inline float _CPP_asin_capture(float __x)\n+      { return asin(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_ATANF\n+    inline float _CPP_atan_capture(float __x)\n+      { return __builtin_atanf(__x); }\n+#elif _GLIBCPP_HAVE_ATANF\n+    inline float _CPP_atan_capture(float __x)\n+      { return atanf(__x); }\n+#else\n+    inline float _CPP_atan_capture(float __x)\n+      { return atan(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_ATAN2F\n+    inline float _CPP_atan2_capture(float __y, float __x)\n+      { return __builtin_atan2f(__y, __x); }\n+#elif _GLIBCPP_HAVE_ATAN2F\n+    inline float _CPP_atan2_capture(float __y, float __x)\n+      { return atan2f(__y, __x); }\n+#else\n+    inline float _CPP_atan2_capture(float __y, float __x)\n+      { return atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_CEILF\n+    inline float _CPP_ceil_capture(float __x)\n+      { return __builtin_ceilf(__x); }\n+#elif _GLIBCPP_HAVE_CEILF\n+    inline float _CPP_ceil_capture(float __x)\n+      { return ceilf(__x); }\n+#else\n+    inline float _CPP_ceil_capture(float __x)\n+      { return ceil(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_COSF\n+    inline float _CPP_cos_capture(float __x)\n+      { return __builtin_cosf(__x); }\n+#elif _GLIBCPP_HAVE_COSF\n+    inline float _CPP_cos_capture(float __x)\n+      { return cosf(__x); }\n+#else\n+    inline float _CPP_cos_capture(float __x)\n+      { return cos(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_COSHF\n+    inline float _CPP_cosh_capture(float __x)\n+      { return __builtin_coshf(__x); }\n+#elif _GLIBCPP_HAVE_COSHF\n+    inline float _CPP_cosh_capture(float __x)\n+      { return coshf(__x); }\n+#else\n+    inline float _CPP_cosh_capture(float __x)\n+      { return cosh(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_EXPF\n+    inline float _CPP_exp_capture(float __x)\n+      { return __builtin_expf(__x); }\n+#elif _GLIBCPP_HAVE_EXPF\n+    inline float _CPP_exp_capture(float __x)\n+      { return expf(__x); }\n+#else\n+    inline float _CPP_exp_capture(float __x)\n+      { return exp(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FABSF\n+    inline float _CPP_fabs_capture(float __x)\n+      { return __builtin_fabsf(__x); }\n+#elif _GLIBCPP_HAVE_FABSF\n+    inline float _CPP_fabs_capture(float __x)\n+      { return fabsf(__x); }\n+#else\n+    inline float _CPP_fabs_capture(float __x)\n+      { return fabs(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FLOORF\n+    inline float _CPP_floor_capture(float __x)\n+      { return __builtin_floorf(__x); }\n+#elif _GLIBCPP_HAVE_FLOORF\n+    inline float _CPP_floor_capture(float __x)\n+      { return floorf(__x); }\n+#else\n+    inline float _CPP_floor_capture(float __x)\n+      { return floor(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FMODFF\n+    inline float _CPP_fmod_capture(float __x, float __y)\n+      { return __builtin_fmodf(__x, __y); }\n+#elif _GLIBCPP_HAVE_FMODFF\n+    inline float _CPP_fmod_capture(float __x, float __y)\n+      { return fmodf(__x, __y); }\n+#else\n+    inline float _CPP_fmod_capture(float __x, float __y)\n+      { return fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FREXPF\n+    inline float _CPP_frexp_capture(float __x, int* __exp)\n+      { return __builtin_frexpf(__x, __exp); }\n+#elif _GLIBCPP_HAVE_FREXPF\n+    inline float _CPP_frexp_capture(float __x, int* __exp)\n+      { return frexpf(__x, __exp); }\n+#else\n+    inline float _CPP_frexp_capture(float __x, int* __exp)\n+      { return frexp(__x, __exp); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_LDEXPF\n+    inline float _CPP_ldexp_capture(float __x, int __exp)\n+      { return __builtin_ldexpf(__x, __exp); }\n+#elif _GLIBCPP_HAVE_LDEXPF\n+    inline float _CPP_ldexp_capture(float __x, int __exp)\n+      { return ldexpf(__x, __exp); }\n+#else\n+    inline float _CPP_ldexp_capture(float __x, int __exp)\n+      { return ldexp(static_cast<double>(__x), __exp); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_LOGF\n+    inline float _CPP_log_capture(float __x)\n+      { return __builtin_logf(__x); }\n+#elif _GLIBCPP_HAVE_LOGF\n+    inline float _CPP_log_capture(float __x)\n+      { return logf(__x); }\n+#else\n+    inline float _CPP_log_capture(float __x)\n+      { return log(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_LOG10F\n+    inline float _CPP_log10_capture(float __x)\n+      { return __builtin_log10f(__x); }\n+#elif _GLIBCPP_HAVE_LOG10F\n+    inline float _CPP_log10_capture(float __x)\n+      { return log10f(__x); }\n+#else\n+    inline float _CPP_log10_capture(float __x)\n+      { return log10(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_MODFF\n+    inline float _CPP_modf_capture(float __x, float* __iptr)\n+      { return __builtin_modff(__x, __iptr); }\n+#elif _GLIBCPP_HAVE_MODFF\n+    inline float _CPP_modf_capture(float __x, float* __iptr)\n+      { return modff(__x, __iptr); }\n+#else\n+    inline float _CPP_modf_capture(float __x, float* __iptr)\n+    {\n+       double __tmp;\n+       double __res = _C_legacy::modf(static_cast<double>(__x), &__tmp);\n+       *__iptr = static_cast<float> (__tmp);\n+       return __res;\n+    }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_POWF\n+    inline float _CPP_pow_capture(float __x, float __y)\n+      { return __builtin_powf(__x, __y); }\n+#elif _GLIBCPP_HAVE_POWF\n+    inline float _CPP_pow_capture(float __x, float __y)\n+      { return powf(__x, __y); }\n+#else\n+    inline float _CPP_pow_capture(float __x, float __y)\n+      { return pow(static_cast<double>(__x), static_cast<double>(__y)); }\n+#endif\n+\n+    float pow(float, int);\n+\n+#if _GLIBCPP_HAVE_BUILTIN_SINF\n+    inline float _CPP_sin_capture(float __x)\n+      { return __builtin_sinf(__x); }\n+#elif _GLIBCPP_HAVE_SINF\n+    inline float _CPP_sin_capture(float __x)\n+      { return sinf(__x); }\n+#else\n+    inline float _CPP_sin_capture(float __x)\n+      { return sin(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_SINHF\n+    inline float _CPP_sinh_capture(float __x)\n+      { return __builtin_sinhf(__x); }\n+#elif _GLIBCPP_HAVE_SINHF\n+    inline float _CPP_sinh_capture(float __x)\n+      { return sinhf(__x); }\n+#else\n+    inline float _CPP_sinh_capture(float __x)\n+      { return sinh(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_SQRTF\n+    inline float _CPP_sqrt_capture(float __x)\n+      { return __builtin_sqrtf(__x); }\n+#elif _GLIBCPP_HAVE_SQRTF\n+    inline float _CPP_sqrt_capture(float __x)\n+      { return sqrtf(__x); }\n+#else\n+    inline float _CPP_sqrt_capture(float __x)\n+      { return sqrt(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_TANF\n+    inline float _CPP_tan_capture(float __x)\n+      { return __builtin_tanf(__x); }\n+#elif _GLIBCPP_HAVE_TANF\n+    inline float _CPP_tan_capture(float __x)\n+      { return tanf(__x); }\n+#else\n+    inline float _CPP_tan_capture(float __x)\n+      { return tan(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_TANHF\n+    inline float _CPP_tanh_capture(float __x)\n+      { return __builtin_tanhf(__x); }\n+#elif _GLIBCPP_HAVE_TANHF\n+    inline float _CPP_tanh_capture(float __x)\n+      { return tanhf(__x); }\n+#else\n+    inline float _CPP_tanh_capture(float __x)\n+      { return tanh(static_cast<double>(__x)); }\n+#endif\n+\n+    //\n+    // double\n+    //\n+\n+#if _GLIBCPP_HAVE_BUILTIN_ACOS\n+    inline double _CPP_acos_capture(double __x)\n+      { return __builtin_acos(__x); }\n+#else\n+    inline double _CPP_acos_capture(double __x)\n+      { return acos(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_ASIN\n+    inline double _CPP_asin_capture(double __x)\n+      { return __builtin_asin(__x); }\n+#else\n+    inline double _CPP_asin_capture(double __x)\n+      { return asin(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_ATAN\n+    inline double _CPP_atan_capture(double __x)\n+      { return __builtin_atan(__x); }\n+#else\n+    inline double _CPP_atan_capture(double __x)\n+      { return atan(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_ATAN2\n+    inline double _CPP_atan2_capture(double __y, double __x)\n+      { return __builtin_atan2(__y, __x); }\n+#else\n+    inline double _CPP_atan2_capture(double __y, double __x)\n+      { return atan2(__y, __x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_CEIL\n+    inline double _CPP_ceil_capture(double __x)\n+      { return __builtin_fceil(__x); }\n+#else\n+    inline double _CPP_ceil_capture(double __x)\n+      { return ceil(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_COS\n+    inline double _CPP_cos_capture(double __x)\n+      { return __builtin_cos(__x); }\n+#else\n+    inline double _CPP_cos_capture(double __x)\n+      { return cos(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_COSH\n+    inline double _CPP_cosh_capture(double __x)\n+      { return __builtin_cosh(__x); }\n+#else\n+    inline double _CPP_cosh_capture(double __x)\n+      { return cosh(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_EXP\n+    inline double _CPP_exp_capture(double __x)\n+      { return __builtin_exp(__x); }\n+#else\n+    inline double _CPP_exp_capture(double __x)\n+      { return exp(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FABS\n+    inline double _CPP_fabs_capture(double __x)\n+      { return __builtin_fabs(__x); }\n+#else\n+    inline double _CPP_fabs_capture(double __x)\n+      { return fabs(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FLOOR\n+    inline double _CPP_floor_capture(double __x)\n+      { return __builtin_ffloor(__x); }\n+#else\n+    inline double _CPP_floor_capture(double __x)\n+      { return floor(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FMOD\n+    inline double _CPP_fmod_capture(double __x, double __y)\n+      { return __builtin_fmod(__x, __y); }\n+#else\n+    inline double _CPP_fmod_capture(double __x, double __y)\n+      { return fmod(__x, __y); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FREXP\n+    inline double _CPP_frexp_capture(double __x, int* __exp)\n+      { return __builtin_frexp(__x, __exp); }\n+#else\n+    inline double _CPP_frexp_capture(double __x, int* __exp)\n       { return frexp(__x, __exp); }\n-    inline double _CPP_ldexp_capture(double __x, int __exp) \n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_LDEXP\n+    inline double _CPP_ldexp_capture(double __x, int __exp)\n+      { return __builtin_ldexp(__x, __exp); }\n+#else\n+    inline double _CPP_ldexp_capture(double __x, int __exp)\n       { return ldexp(__x, __exp); }\n-    inline double _CPP_log_capture(double __x)   { return log(__x); }\n-    inline double _CPP_log10_capture(double __x) { return log10(__x); }\n-    inline double _CPP_modf_capture(double __x, double* __iptr) \n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_LOG\n+    inline double _CPP_log_capture(double __x)\n+      { return __builtin_log(__x); }\n+#else\n+    inline double _CPP_log_capture(double __x)\n+      { return log(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_LOG10\n+    inline double _CPP_log10_capture(double __x)\n+      { return __builtin_log10(__x); }\n+#else\n+    inline double _CPP_log10_capture(double __x)\n+      { return log10(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_MODF\n+    inline double _CPP_modf_capture(double __x, double* __iptr)\n+      { return __builtin_modf(__x, __iptr); }\n+#else\n+    inline double _CPP_modf_capture(double __x, double* __iptr)\n       { return modf(__x, __iptr); }\n-    inline double _CPP_pow_capture(double __x, double __y) \n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_POW\n+    inline double _CPP_pow_capture(double __x, double __y)\n+      { return __builtin_pow(__x, static_cast<double>(__y)); }\n+#else\n+    inline double _CPP_pow_capture(double __x, double __y)\n       { return pow(__x, __y); }\n-    inline double _CPP_sqrt_capture(double __x)  { return sqrt(__x); }\n-    inline double _CPP_ceil_capture(double __x)  { return ceil(__x); }\n-    inline double _CPP_fabs_capture(double __x)  { return fabs(__x); }\n-    inline double _CPP_floor_capture(double __x) { return floor(__x); }\n-    inline double _CPP_fmod_capture(double __x, double __y) \n-      { return fmod(__x, __y); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_SIN\n+    inline double _CPP_sin_capture(double __x)\n+      { return __builtin_sin(__x); }\n+#else\n+    inline double _CPP_sin_capture(double __x)\n+      { return sin(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_SINH\n+    inline double _CPP_sinh_capture(double __x)\n+      { return __builtin_sinh(__x); }\n+#else\n+    inline double _CPP_sinh_capture(double __x)\n+      { return sinh(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_SQRT\n+    inline double _CPP_sqrt_capture(double __x)\n+      { return __builtin_fsqrt(__x); }\n+#else\n+    inline double _CPP_sqrt_capture(double __x)\n+      { return sqrt(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_TAN\n+    inline double _CPP_tan_capture(double __x)\n+      { return __builtin_tan(__x); }\n+#else\n+    inline double _CPP_tan_capture(double __x)\n+      { return tan(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_TANH\n+    inline double _CPP_tanh_capture(double __x)\n+      { return __builtin_tanh(__x); }\n+#else\n+    inline double _CPP_tanh_capture(double __x)\n+      { return tanh(__x); }\n+#endif\n+\n+    //\n+    // long double\n+    //\n+\n+#if _GLIBCPP_HAVE_BUILTIN_ACOSL\n+    inline long double _CPP_acos_capture(long double __x)\n+      { return __builtin_acosl(__x); }\n+#elif _GLIBCPP_HAVE_ACOSL\n+    inline long double _CPP_acos_capture(long double __x)\n+      { return acosl(__x); }\n+#else\n+    inline long double _CPP_acos_capture(long double __x)\n+      { return acos(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_ASINL\n+    inline long double _CPP_asin_capture(long double __x)\n+      { return __builtin_asinl(__x); }\n+#elif _GLIBCPP_HAVE_ASINL\n+    inline long double _CPP_asin_capture(long double __x)\n+      { return asinl(__x); }\n+#else\n+    inline long double _CPP_asin_capture(long double __x)\n+      { return asin(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_ATANL\n+    inline long double _CPP_atan_capture(long double __x)\n+      { return __builtin_atanl(__x); }\n+#elif _GLIBCPP_HAVE_ATANL\n+    inline long double _CPP_atan_capture(long double __x)\n+      { return atanl(__x); }\n+#else\n+    inline long double _CPP_atan_capture(long double __x)\n+      { return atan(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_ATAN2L\n+    inline long double _CPP_atan2_capture(long double __y, long double __x)\n+      { return __builtin_atan2l(__y, __x); }\n+#elif _GLIBCPP_HAVE_ATAN2L\n+    inline long double _CPP_atan2_capture(long double __y, long double __x)\n+      { return atan2l(__y, __x); }\n+#else\n+    inline long double _CPP_atan2_capture(long double __y, long double __x)\n+      { return atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_CEILL\n+    inline long double _CPP_ceil_capture(long double __x)\n+      { return __builtin_ceill(__x); }\n+#elif _GLIBCPP_HAVE_CEILL\n+    inline long double _CPP_ceil_capture(long double __x)\n+      { return ceill(__x); }\n+#else\n+    inline long double _CPP_ceil_capture(long double __x)\n+      { return ceil(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_COSL\n+    inline long double _CPP_cos_capture(long double __x)\n+      { return __builtin_cosl(__x); }\n+#elif _GLIBCPP_HAVE_COSL\n+    inline long double _CPP_cos_capture(long double __x)\n+      { return cosl(__x); }\n+#else\n+    inline long double _CPP_cos_capture(long double __x)\n+      { return cos(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_COSHL\n+    inline long double _CPP_cosh_capture(long double __x)\n+      { return __builtin_coshl(__x); }\n+#elif _GLIBCPP_HAVE_COSHL\n+    inline long double _CPP_cosh_capture(long double __x)\n+      { return coshl(__x); }\n+#else\n+    inline long double _CPP_cosh_capture(long double __x)\n+      { return cosh(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_EXPL\n+    inline long double _CPP_exp_capture(long double __x)\n+      { return __builtin_expl(__x); }\n+#elif _GLIBCPP_HAVE_EXPL\n+    inline long double _CPP_exp_capture(long double __x)\n+      { return expl(__x); }\n+#else\n+    inline long double _CPP_exp_capture(long double __x)\n+      { return exp(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FABSL\n+    inline long double _CPP_fabs_capture(long double __x)\n+      { return __builtin_fabsl(__x); }\n+#elif _GLIBCPP_HAVE_FABSL\n+    inline long double _CPP_fabs_capture(long double __x)\n+      { return fabsl(__x); }\n+#else\n+    inline long double _CPP_fabs_capture(long double __x)\n+      { return fabs(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FLOORL\n+    inline long double _CPP_floor_capture(long double __x)\n+      { return __builtin_floorl(__x); }\n+#elif _GLIBCPP_HAVE_FLOORL\n+    inline long double _CPP_floor_capture(long double __x)\n+      { return floorl(__x); }\n+#else\n+    inline long double _CPP_floor_capture(long double __x)\n+      { return floor(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FMODL\n+    inline long double _CPP_fmod_capture(long double __x, long double __y)\n+      { return __builtin_fmodl(__x, __y); }\n+#elif _GLIBCPP_HAVE_FMODL\n+    inline long double _CPP_fmod_capture(long double __x, long double __y)\n+      { return fmodl(__x, __y); }\n+#else\n+    inline long double _CPP_fmod_capture(long double __x, long double __y)\n+      { return fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_FREXPL\n+    inline long double _CPP_frexp_capture(long double __x, int* __exp)\n+      { return __builtin_frexpl(__x, __exp); }\n+#elif _GLIBCPP_HAVE_FREXPL\n+    inline long double _CPP_frexp_capture(long double __x, int* __exp)\n+      { return frexpl(__x, __exp); }\n+#else\n+    inline long double _CPP_frexp_capture(long double __x, int* __exp)\n+      { return frexp(static_cast<double>(__x), __exp); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_LDEXPL\n+    inline long double _CPP_ldexp_capture(long double __x, int __exp)\n+      { return __builtin_ldexpl(__x, __exp); }\n+#elif _GLIBCPP_HAVE_LDEXPL\n+    inline long double _CPP_ldexp_capture(long double __x, int __exp)\n+      { return ldexpl(__x, __exp); }\n+#else\n+    inline long double _CPP_ldexp_capture(long double __x, int __exp)\n+      { return ldexp(static_cast<double>(__x), __exp); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_LOGL\n+    inline long double _CPP_log_capture(long double __x)\n+      { return __builtin_logl(__x); }\n+#elif _GLIBCPP_HAVE_LOGL\n+    inline long double _CPP_log_capture(long double __x)\n+      { return logl(__x); }\n+#else\n+    inline long double _CPP_log_capture(long double __x)\n+      { return log(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_LOG10L\n+    inline long double _CPP_log10_capture(long double __x)\n+      { return __builtin_log10l(__x); }\n+#elif _GLIBCPP_HAVE_LOG10L\n+    inline long double _CPP_log10_capture(long double __x)\n+      { return log10l(__x); }\n+#else\n+    inline long double _CPP_log10_capture(long double __x)\n+      { return log10(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_MODFL\n+    inline long double _CPP_mod_capture(long double __x, long double* __iptr)\n+      { return __builtin_modfl(__x, __iptr); }\n+#elif _GLIBCPP_HAVE_MODFL\n+    inline long double _CPP_modf_capture(long double __x, long double* __iptr)\n+      { return modfl(__x, __iptr); }\n+#else\n+    inline long double _CPP_modf_capture(long double __x, long double* __iptr)\n+    {\n+       double __tmp;\n+       double __res = _C_legacy::modf(static_cast<double>(__x), &__tmp);\n+       *__iptr = static_cast<long double> (__tmp);\n+       return __res;\n+    }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_POWL\n+    inline long double _CPP_pow_capture(long double __x, long double __y)\n+      { return __builtin_powl(__x, __y); }\n+#elif _GLIBCPP_HAVE_POWL\n+    inline long double _CPP_pow_capture(long double __x, long double __y)\n+      { return powl(__x, __y); }\n+#else\n+    inline long double _CPP_pow_capture(long double __x, long double __y)\n+      { return pow(static_cast<double>(__x), static_cast<double>(__y)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_SINL\n+    inline long double _CPP_sin_capture(long double __x)\n+      { return __builtin_sinl(__x); }\n+#elif _GLIBCPP_HAVE_SINL\n+    inline long double _CPP_sin_capture(long double __x)\n+      { return sinl(__x); }\n+#else\n+    inline long double _CPP_sin_capture(long double __x)\n+      { return sin(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_SINHL\n+    inline long double _CPP_sinh_capture(long double __x)\n+      { return __builtin_sinhl(__x); }\n+#elif _GLIBCPP_HAVE_SINHL\n+    inline long double _CPP_sinh_capture(long double __x)\n+      { return sinhl(__x); }\n+#else\n+    inline long double _CPP_sinh_capture(long double __x)\n+      { return sinh(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_SQRTL\n+    inline long double _CPP_sqrt_capture(long double __x)\n+      { return __builtin_sqrtl(__x); }\n+#elif _GLIBCPP_HAVE_SQRTL\n+    inline long double _CPP_sqrt_capture(long double __x)\n+      { return sqrtl(__x); }\n+#else\n+    inline long double _CPP_sqrt_capture(long double __x)\n+      { return sqrt(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_TANL\n+    inline long double _CPP_tan_capture(long double __x)\n+      { return __builtin_tanl(__x); }\n+#elif _GLIBCPP_HAVE_TANL\n+    inline long double _CPP_tan_capture(long double __x)\n+      { return tanl(__x); }\n+#else\n+    inline long double _CPP_tan_capture(long double __x)\n+      { return tan(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_BUILTIN_TANHL\n+    inline long double _CPP_tanh_capture(long double __x)\n+      { return __builtin_tanhl(__x); }\n+#elif _GLIBCPP_HAVE_TANHL\n+    inline long double _CPP_tanh_capture(long double __x)\n+      { return tanhl(__x); }\n+#else\n+    inline long double _CPP_tanh_capture(long double __x)\n+      { return tanh(static_cast<double>(__x)); }\n+#endif\n+\n \n     namespace _C_shadow { }\n   } // close namespace ::_C_legacy::\n \n # undef HUGE_VAL\n # define HUGE_VAL ::_C_legacy::_CPP_HUGE_VAL_capture()\n+# undef abs\n # undef acos\n # undef asin\n # undef atan\n # undef atan2\n+# undef ceil\n # undef cos\n-# undef sin\n-# undef tan\n # undef cosh\n-# undef sinh\n-# undef tanh\n # undef exp\n+# undef fabs\n+# undef floor\n+# undef fmod\n # undef frexp\n # undef ldexp\n # undef log\n # undef log10\n # undef modf\n # undef pow\n+# undef sin\n+# undef sinh\n # undef sqrt\n-# undef ceil\n-# undef fabs\n-# undef floor\n-# undef fmod\n+# undef tan\n+# undef tanh\n \n   namespace _C_legacy {\n     namespace _C_shadow {\n-      inline double acos(double __x)\n-        { return ::_C_legacy::_CPP_acos_capture(__x); }\n-      inline double asin(double __x)\n-        { return ::_C_legacy::_CPP_asin_capture(__x); }\n-      inline double atan(double __x)\n-        { return ::_C_legacy::_CPP_atan_capture(__x); }\n-      inline double atan2(double __y, double __x)\n-      \t{ return ::_C_legacy::_CPP_atan2_capture(__y,__x); }\n-      inline double cos(double __x)\n-        { return ::_C_legacy::_CPP_cos_capture(__x); }\n-      inline double sin(double __x)\n-        { return ::_C_legacy::_CPP_sin_capture(__x); }\n-      inline double tan(double __x)\n-        { return ::_C_legacy::_CPP_tan_capture(__x); }\n-      inline double cosh(double __x)\n-        { return ::_C_legacy::_CPP_cosh_capture(__x); }\n-      inline double sinh(double __x)\n-        { return ::_C_legacy::_CPP_sinh_capture(__x); }\n-      inline double tanh(double __x)\n-        { return ::_C_legacy::_CPP_tanh_capture(__x); }\n-      inline double exp(double __x)\n-        { return ::_C_legacy::_CPP_exp_capture(__x); }\n-      inline double frexp(double __x, int* __exp)\n-      \t{ return ::_C_legacy::_CPP_frexp_capture(__x, __exp); }\n-      inline double ldexp(double __x, int __exp)\n-      \t{ return ::_C_legacy::_CPP_ldexp_capture(__x, __exp); }\n-      inline double log(double __x)\n-        { return ::_C_legacy::_CPP_log_capture(__x); }\n-      inline double log10(double __x)\n-        { return ::_C_legacy::_CPP_log10_capture(__x); }\n-      inline double modf(double __x, double* __iptr)\n-      \t{ return ::_C_legacy::_CPP_modf_capture(__x, __iptr); }\n-      inline double pow(double __x, double __y)\n-      \t{ return ::_C_legacy::_CPP_pow_capture(__x, __y); }\n-      inline double sqrt(double __x)\n-        { return ::_C_legacy::_CPP_sqrt_capture(__x); }\n-      inline double ceil(double __x)\n-        { return ::_C_legacy::_CPP_ceil_capture(__x); }\n-      inline double fabs(double __x)\n-        { return ::_C_legacy::_CPP_fabs_capture(__x); }\n-      inline double floor(double __x)\n-        { return ::_C_legacy::_CPP_floor_capture(__x); }\n-      inline double fmod(double __x, double __y)\n-      \t{ return ::_C_legacy::_CPP_fmod_capture(__x, __y); }\n-\n     }\n   }\n   namespace std {\n \n-    // Adopt C names into std::\n-    using ::_C_legacy::_C_shadow::acos;\n-    using ::_C_legacy::_C_shadow::asin;\n-    using ::_C_legacy::_C_shadow::atan;\n-    using ::_C_legacy::_C_shadow::atan2;\n-    using ::_C_legacy::_C_shadow::cos;\n-    using ::_C_legacy::_C_shadow::sin;\n-    using ::_C_legacy::_C_shadow::tan;\n-    using ::_C_legacy::_C_shadow::cosh;\n-    using ::_C_legacy::_C_shadow::sinh;\n-    using ::_C_legacy::_C_shadow::tanh;\n-    using ::_C_legacy::_C_shadow::exp;\n-    using ::_C_legacy::_C_shadow::frexp;\n-    using ::_C_legacy::_C_shadow::ldexp;\n-    using ::_C_legacy::_C_shadow::log;\n-    using ::_C_legacy::_C_shadow::log10;\n-    using ::_C_legacy::_C_shadow::modf;\n-    using ::_C_legacy::_C_shadow::pow;\n-    using ::_C_legacy::_C_shadow::sqrt;\n-    using ::_C_legacy::_C_shadow::ceil;\n-    using ::_C_legacy::_C_shadow::fabs;\n-    using ::_C_legacy::_C_shadow::floor;\n-    using ::_C_legacy::_C_shadow::fmod;\n+    //\n+    // float\n+    //\n+\n+    inline float abs(float __x)\n+      { return ::_C_legacy::_CPP_fabs_capture(__x); }\n+\n+    inline float acos(float __x)\n+      { return ::_C_legacy::_CPP_acos_capture(__x); }\n+\n+    inline float asin(float __x)\n+      { return ::_C_legacy::_CPP_asin_capture(__x); }\n+\n+    inline float atan(float __x)\n+      { return ::_C_legacy::_CPP_atan_capture(__x); }\n+\n+    inline float atan2(float __y, float __x)\n+      { return ::_C_legacy::_CPP_atan2_capture(__y, __x); }\n+\n+    inline float ceil(float __x)\n+      { return ::_C_legacy::_CPP_ceil_capture(__x); }\n+\n+    inline float cos(float __x)\n+      { return ::_C_legacy::_CPP_cos_capture(__x); }\n+\n+    inline float cosh(float __x)\n+      { return ::_C_legacy::_CPP_cosh_capture(__x); }\n+\n+    inline float exp(float __x)\n+      { return ::_C_legacy::_CPP_exp_capture(__x); }\n+\n+    inline float fabs(float __x)\n+      { return ::_C_legacy::_CPP_fabs_capture(__x); }\n+\n+    inline float floor(float __x)\n+      { return ::_C_legacy::_CPP_floor_capture(__x); }\n+\n+    inline float fmod(float __x, float __y)\n+      { return ::_C_legacy::_CPP_fmod_capture(__x, __y); }\n+\n+    inline float frexp(float __x, int* __exp)\n+      { return ::_C_legacy::_CPP_frexp_capture(__x, __exp); }\n+\n+    inline float ldexp(float __x, int __exp)\n+      { return ::_C_legacy::_CPP_ldexp_capture(__x, __exp); }\n+\n+    inline float log(float __x)\n+      { return ::_C_legacy::_CPP_log_capture(__x); }\n+\n+    inline float log10(float __x)\n+      { return ::_C_legacy::_CPP_log10_capture(__x); }\n+\n+    inline float modf(float __x, float* __iptr)\n+      { return ::_C_legacy::_CPP_modf_capture(__x, __iptr); }\n+\n+    inline float pow(float __x, float __y)\n+      { return ::_C_legacy::_CPP_pow_capture(__x, __y); }\n+\n+    float pow(float, int);\n+\n+    inline float sin(float __x)\n+      { return ::_C_legacy::_CPP_sin_capture(__x); }\n+\n+    inline float sinh(float __x)\n+      { return ::_C_legacy::_CPP_sinh_capture(__x); }\n+\n+    inline float sqrt(float __x)\n+      { return ::_C_legacy::_CPP_sqrt_capture(__x); }\n+\n+    inline float tan(float __x)\n+      { return ::_C_legacy::_CPP_tan_capture(__x); }\n+\n+    inline float tanh(float __x)\n+      { return ::_C_legacy::_CPP_tanh_capture(__x); }\n+\n+    //\n+    // double\n+    //\n+\n+    inline double abs(double __x)\n+      { return ::_C_legacy::_CPP_fabs_capture(__x); }\n+\n+    inline double acos(double __x)\n+      { return ::_C_legacy::_CPP_acos_capture(__x); }\n+\n+    inline double asin(double __x)\n+      { return ::_C_legacy::_CPP_asin_capture(__x); }\n+\n+    inline double atan(double __x)\n+      { return ::_C_legacy::_CPP_atan_capture(__x); }\n+\n+    inline double atan2(double __y, double __x)\n+      { return ::_C_legacy::_CPP_atan2_capture(__y, __x); }\n+\n+    inline double ceil(double __x)\n+      { return ::_C_legacy::_CPP_ceil_capture(__x); }\n+\n+    inline double cos(double __x)\n+      { return ::_C_legacy::_CPP_cos_capture(__x); }\n+\n+    inline double cosh(double __x)\n+      { return ::_C_legacy::_CPP_cosh_capture(__x); }\n+\n+    inline double exp(double __x)\n+      { return ::_C_legacy::_CPP_exp_capture(__x); }\n+\n+    inline double fabs(double __x)\n+      { return ::_C_legacy::_CPP_fabs_capture(__x); }\n+\n+    inline double floor(double __x)\n+      { return ::_C_legacy::_CPP_floor_capture(__x); }\n+\n+    inline double fmod(double __x, double __y)\n+      { return ::_C_legacy::_CPP_fmod_capture(__x, __y); }\n+\n+    inline double frexp(double __x, int* __exp)\n+      { return ::_C_legacy::_CPP_frexp_capture(__x, __exp); }\n+\n+    inline double ldexp(double __x, int __exp)\n+      { return ::_C_legacy::_CPP_ldexp_capture(__x, __exp); }\n+\n+    inline double log(double __x)\n+      { return ::_C_legacy::_CPP_log_capture(__x); }\n+\n+    inline double log10(double __x)\n+      { return ::_C_legacy::_CPP_log10_capture(__x); }\n+\n+    inline double modf(double __x, double* __iptr)\n+      { return ::_C_legacy::_CPP_modf_capture(__x, __iptr); }\n+\n+    inline double pow(double __x, double __y)\n+      { return ::_C_legacy::_CPP_pow_capture(__x, __y); }\n+\n+    double pow (double, int);\n+\n+    inline double sin(double __x)\n+      { return ::_C_legacy::_CPP_sin_capture(__x); }\n+\n+    inline double sinh(double __x)\n+      { return ::_C_legacy::_CPP_sinh_capture(__x); }\n+\n+    inline double sqrt(double __x)\n+      { return ::_C_legacy::_CPP_sqrt_capture(__x); }\n+\n+    inline double tan(double __x)\n+      { return ::_C_legacy::_CPP_tan_capture(__x); }\n+\n+    inline double tanh(double __x)\n+      { return ::_C_legacy::_CPP_tanh_capture(__x); }\n+\n+    //\n+    // long double\n+    //\n+    inline long double abs(long double __x)\n+      { return ::_C_legacy::_CPP_fabs_capture(__x); }\n+\n+    inline long double acos(long double __x)\n+      { return ::_C_legacy::_CPP_acos_capture(__x); }\n+\n+    inline long double asin(long double __x)\n+      { return ::_C_legacy::_CPP_asin_capture(__x); }\n+\n+    inline long double atan(long double __x)\n+      { return ::_C_legacy::_CPP_atan_capture(__x); }\n+\n+    inline long double atan2(long double __y, long double __x)\n+      { return ::_C_legacy::_CPP_atan2_capture(__y, __x); }\n+\n+    inline long double ceil(long double __x)\n+      { return ::_C_legacy::_CPP_ceil_capture(__x); }\n+\n+    inline long double cos(long double __x)\n+      { return ::_C_legacy::_CPP_cos_capture(__x); }\n+\n+    inline long double cosh(long double __x)\n+      { return ::_C_legacy::_CPP_cosh_capture(__x); }\n+\n+    inline long double exp(long double __x)\n+      { return ::_C_legacy::_CPP_exp_capture(__x); }\n+\n+    inline long double fabs(long double __x)\n+      { return ::_C_legacy::_CPP_fabs_capture(__x); }\n+\n+    inline long double floor(long double __x)\n+      { return ::_C_legacy::_CPP_floor_capture(__x); }\n+\n+    inline long double fmod(long double __x, long double __y)\n+      { return ::_C_legacy::_CPP_fmod_capture(__x, __y); }\n+\n+    inline long double frexp(long double __x, int* __exp)\n+      { return ::_C_legacy::_CPP_frexp_capture(__x, __exp); }\n+\n+    inline long double ldexp(long double __x, int __exp)\n+      { return ::_C_legacy::_CPP_ldexp_capture(__x, __exp); }\n+\n+    inline long double log(long double __x)\n+      { return ::_C_legacy::_CPP_log_capture(__x); }\n+\n+    inline long double log10(long double __x)\n+      { return ::_C_legacy::_CPP_log10_capture(__x); }\n+\n+    inline long double modf(long double __x, long double* __iptr)\n+      { return ::_C_legacy::_CPP_modf_capture(__x, __iptr); }\n+\n+    inline long double pow(long double __x, long double __y)\n+      { return ::_C_legacy::_CPP_pow_capture(__x, __y); }\n+\n+    long double pow (long double, int);\n+\n+    inline long double sin(long double __x)\n+      { return ::_C_legacy::_CPP_sin_capture(__x); }\n+\n+    inline long double sinh(long double __x)\n+      { return ::_C_legacy::_CPP_sinh_capture(__x); }\n+\n+    inline long double sqrt(long double __x)\n+      { return ::_C_legacy::_CPP_sqrt_capture(__x); }\n+\n+    inline long double tan(long double __x)\n+      { return ::_C_legacy::_CPP_tan_capture(__x); }\n+\n+    inline long double tanh(long double __x)\n+      { return ::_C_legacy::_CPP_tanh_capture(__x); }\n+\n \n   } // close namespace std::\n   "}, {"sha": "c4fa9ede4a49e5468a6c8bf643c9fba9562f8094", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fa741538eaf41ed84093cc5245f41119a8e969/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=54fa741538eaf41ed84093cc5245f41119a8e969", "patch": "@@ -105,12 +105,9 @@ libinst_wstring_la = @libinst_wstring_la@\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n-@USE_LIBDIR_TRUE@toolexeclibdir = \\\n-@USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = \\\n-@USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = \\\n-@USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@USE_LIBDIR_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n \n toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n@@ -256,10 +253,9 @@ std_headers = \\\n \tmap memory new numeric ostream queue set sstream stack stdexcept \\\n \tstreambuf string strstream typeinfo utility valarray vector \n \n-@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \\\n-@GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = @GLIBCPP_NEED_LIBIO_TRUE@\\\n @GLIBCPP_NEED_LIBIO_TRUE@\t$(top_builddir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n-@GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \\\n+@GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n generated_headers = \\\n \t $(top_builddir)/bits/std_limits.h $(top_builddir)/bits/c++config.h \\\n@@ -338,9 +334,8 @@ libstdc___la_LIBADD = \\\n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm\n \n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = \\\n-@GLIBCPP_USE_CSHADOW_TRUE@$(top_builddir)/stamp-cshadow\n-@GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \\\n+@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = @GLIBCPP_USE_CSHADOW_TRUE@$(top_builddir)/stamp-cshadow\n+@GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \n \n # We cannot use the default rules to install headers since we cannot\n # statically decide which headers to install.  So we have our own special"}]}