{"sha": "52e4e221bd6355b1c40173724e927a0d5be6c254", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJlNGUyMjFiZDYzNTViMWM0MDE3MzcyNGU5MjdhMGQ1YmU2YzI1NA==", "commit": {"author": {"name": "Fabien Ch\u00eane", "email": "fabien@gcc.gnu.org", "date": "2011-11-18T18:44:23Z"}, "committer": {"name": "Fabien Ch\u00eane", "email": "fabien@gcc.gnu.org", "date": "2011-11-18T18:44:23Z"}, "message": "re PR c++/51141 (rev181359 causes Chromium build failure)\n\ngcc/testsuite/ChangeLog\n\n2011-11-18  Fabien Chene  <fabien@gcc.gnu.org>\n\n\tPR c++/51141\n\t* g++.dg/lookup/using46.C: New.\n\t* g++.dg/lookup/using47.C: New.\n\t* g++.dg/lookup/using48.C: New.\n\t* g++.dg/lookup/using49.C: New.\n\t* g++.dg/lookup/using50.C: New.\n\ngcc/cp/ChangeLog\n\n2011-11-18  Fabien Chene  <fabien@gcc.gnu.org>\n\n\tPR c++/51141\n\t* search.c (lookup_field_1): Handle USING_DECLs for the storted\n\tcase.\n\nFrom-SVN: r181490", "tree": {"sha": "ab52e6bc930608e5ee2b4bf6ef3c6ad0fcd7f4c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab52e6bc930608e5ee2b4bf6ef3c6ad0fcd7f4c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52e4e221bd6355b1c40173724e927a0d5be6c254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e4e221bd6355b1c40173724e927a0d5be6c254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52e4e221bd6355b1c40173724e927a0d5be6c254", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e4e221bd6355b1c40173724e927a0d5be6c254/comments", "author": null, "committer": null, "parents": [{"sha": "4a0051e4db55a7de184bc51f9d2a03b352d16420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a0051e4db55a7de184bc51f9d2a03b352d16420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a0051e4db55a7de184bc51f9d2a03b352d16420"}], "stats": {"total": 179, "additions": 179, "deletions": 0}, "files": [{"sha": "88199d6bed380d56a7355ff4377bbdf5ac782024", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e4e221bd6355b1c40173724e927a0d5be6c254/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e4e221bd6355b1c40173724e927a0d5be6c254/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=52e4e221bd6355b1c40173724e927a0d5be6c254", "patch": "@@ -1,3 +1,9 @@\n+2011-11-18  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n+\n+\tPR c++/51141\n+\t* search.c (lookup_field_1): Handle USING_DECLs for the storted\n+\tcase.\n+\n 2011-11-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51150"}, {"sha": "3894c6858842a37369db94906b6079f9e15a3994", "filename": "gcc/cp/search.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e4e221bd6355b1c40173724e927a0d5be6c254/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e4e221bd6355b1c40173724e927a0d5be6c254/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=52e4e221bd6355b1c40173724e927a0d5be6c254", "patch": "@@ -436,6 +436,14 @@ lookup_field_1 (tree type, tree name, bool want_type)\n \t\t    field = fields[i++];\n \t\t  while (i < hi && DECL_NAME (fields[i]) == name);\n \t\t}\n+\n+\t      if (field)\n+\t      \t{\n+\t      \t  field = strip_using_decl (field);\n+\t      \t  if (is_overloaded_fn (field))\n+\t      \t    field = NULL_TREE;\n+\t      \t}\n+\n \t      return field;\n \t    }\n \t}"}, {"sha": "ce066cd241360d4ffc06dea68b891d63437446b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e4e221bd6355b1c40173724e927a0d5be6c254/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e4e221bd6355b1c40173724e927a0d5be6c254/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52e4e221bd6355b1c40173724e927a0d5be6c254", "patch": "@@ -1,3 +1,12 @@\n+2011-11-18  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n+\n+\tPR c++/51141\n+\t* g++.dg/lookup/using46.C: New.\n+\t* g++.dg/lookup/using47.C: New.\n+\t* g++.dg/lookup/using48.C: New.\n+\t* g++.dg/lookup/using49.C: New.\n+\t* g++.dg/lookup/using50.C: New.\n+\n 2011-11-18  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* gcc.c-torture/compile/pr44707.c: Do not assume assembler"}, {"sha": "8f73d37ffa0939e37cdd87ec88a81419fd0ab7cc", "filename": "gcc/testsuite/g++.dg/debug/using6.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e4e221bd6355b1c40173724e927a0d5be6c254/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fusing6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e4e221bd6355b1c40173724e927a0d5be6c254/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fusing6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fusing6.C?ref=52e4e221bd6355b1c40173724e927a0d5be6c254", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/51189\n+// { dg-do compile }\n+\n+struct A\n+{\n+  int i1, i2, i3, i4, i5, i6;\n+};\n+\n+struct B : A\n+{\n+  using A::i1;\n+  using A::i2;\n+  using A::i3;\n+  using A::i4;\n+  using A::i5;\n+  using A::i6;\n+};\n+\n+struct C : B\n+{\n+  using B::i1;\n+};"}, {"sha": "6f0f5bca09022a0c2e9b5ca6d15cda5543f73104", "filename": "gcc/testsuite/g++.dg/lookup/using46.C", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e4e221bd6355b1c40173724e927a0d5be6c254/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e4e221bd6355b1c40173724e927a0d5be6c254/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing46.C?ref=52e4e221bd6355b1c40173724e927a0d5be6c254", "patch": "@@ -0,0 +1,62 @@\n+// PR c++/51141\n+// { dg-do compile }\n+// { dg-options \"-fpermissive -w -Werror\" }\n+\n+typedef int size_t;\n+template < size_t, size_t > struct AlignedBuffer {};\n+\n+template < typename > class VectorBufferBase\n+{\n+public:\n+    allocateBuffer (size_t) {\n+    }\n+    buffer () {\n+    }\n+    *m_buffer;\n+    size_t m_capacity;\n+};\n+\n+template < typename T, size_t > class VectorBuffer:VectorBufferBase < T >\n+{\n+    typedef VectorBufferBase < T > Base;\n+\n+public:\n+    VectorBuffer () {\n+    }\n+    allocateBuffer (size_t) {\n+        m_capacity = 0;\n+    }\n+    Base::buffer;\n+    Base::m_buffer;\n+    Base::m_capacity;\n+    size_t m_inlineBufferSize;\n+\n+    AlignedBuffer < 0, __alignof__ (T) > m_inlineBuffer;\n+};\n+\n+template < typename T, size_t > class Vector\n+{\n+    typedef VectorBuffer < T,\n+            0 > Buffer;\n+public:\n+    void shrinkCapacity (size_t);\n+\n+    clear () {\n+        shrinkCapacity (0);\n+    }\n+    Buffer m_buffer;\n+};\n+\n+template < typename T, size_t inlineCapacity > void Vector < T,\n+         inlineCapacity >::shrinkCapacity (size_t)\n+{\n+    m_buffer.allocateBuffer (0);\n+}\n+\n+struct PatternDisjunction;\n+struct YarrPattern {\n+    reset () {\n+        m_disjunctions.clear ();\n+    }\n+    Vector < PatternDisjunction *, 0 > m_disjunctions;\n+};"}, {"sha": "c81864705c49ec78e88c8720c2ee7fd95b4ee6ea", "filename": "gcc/testsuite/g++.dg/lookup/using47.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e4e221bd6355b1c40173724e927a0d5be6c254/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing47.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e4e221bd6355b1c40173724e927a0d5be6c254/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing47.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing47.C?ref=52e4e221bd6355b1c40173724e927a0d5be6c254", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/51152\n+// { dg-do compile }\n+\n+struct A\n+{\n+    int a;\n+};\n+\n+struct B\n+{\n+    int b1;\n+    int b2;\n+    A b3;\n+};\n+\n+struct C : B\n+{\n+    typedef int R;\n+    typedef int S;\n+    typedef int T;\n+    using B::b1;\n+    using B::b2;\n+    using B::b3;\n+    void f()\n+    {\n+        b3.a;\n+\tb3.~A();\n+    }\n+};"}, {"sha": "e6dc3fab77ce5b1300ad8655cae26d9d73c6ee60", "filename": "gcc/testsuite/g++.dg/lookup/using48.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e4e221bd6355b1c40173724e927a0d5be6c254/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing48.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e4e221bd6355b1c40173724e927a0d5be6c254/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing48.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing48.C?ref=52e4e221bd6355b1c40173724e927a0d5be6c254", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/51190\n+// { dg-do compile }\n+\n+struct A\n+{\n+  int i;\n+};\n+\n+template<typename> struct B\n+{\n+  A* p;\n+};\n+\n+template<typename T> struct C : B<T>\n+{\n+  using B<T>::p;\n+\n+  C() { p->i; }\n+\n+  int i1, i2, i3, i4, i5;\n+};\n+\n+C<A> c;"}, {"sha": "391476ac4727720a9c579707498f7cb75e8d41bd", "filename": "gcc/testsuite/g++.dg/lookup/using49.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e4e221bd6355b1c40173724e927a0d5be6c254/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing49.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e4e221bd6355b1c40173724e927a0d5be6c254/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing49.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing49.C?ref=52e4e221bd6355b1c40173724e927a0d5be6c254", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/51188\n+// { dg-do compile }\n+\n+#include <utility>\n+class XBase {\n+public:\n+   virtual ~XBase() = 0;\n+   enum ImpMode { Imp1, Imp2, Imp3 };\n+};\n+class X : public XBase {\n+   class XBlock {};\n+   using XBase::ImpMode;\n+   using XBase::Imp3;\n+   using XBase::Imp1;\n+   using XBase::Imp2;\n+   int _XBlocked;\n+   std::pair<int,int> getImp(void) const {\n+      return (std::make_pair(0, static_cast<int>(X::Imp1)));\n+   }\n+};"}]}