{"sha": "25b9575bc2665d873a16ddc30e7829bcdadf4dec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjViOTU3NWJjMjY2NWQ4NzNhMTZkZGMzMGU3ODI5YmNkYWRmNGRlYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-04-27T17:02:34Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-04-27T17:02:34Z"}, "message": "fp-bit.c (abort): Add noreturn attribute.\n\n\t* config/fp-bit.c (abort): Add noreturn attribute.\n\n\t* config/avr/avr.c (avr_naked_function_p): Use gcc_assert and\n\tgcc_unreachable as appropriate.\n\t(ptrreg_to_str, cond_string, avr_normalize_condition): Likewise.\n\t* config/avr/avr.h (ASM_OUTPUT_REG_PUSH,\n\tASM_OUTPUT_REG_POP): Likewise.\n\nFrom-SVN: r98854", "tree": {"sha": "30e323b7641ccb2d5e86f769e0887fcde7b0ef52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30e323b7641ccb2d5e86f769e0887fcde7b0ef52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25b9575bc2665d873a16ddc30e7829bcdadf4dec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b9575bc2665d873a16ddc30e7829bcdadf4dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25b9575bc2665d873a16ddc30e7829bcdadf4dec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b9575bc2665d873a16ddc30e7829bcdadf4dec/comments", "author": null, "committer": null, "parents": [{"sha": "dd248a9aafac30bfca5e909ea00894cb3f9b241f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd248a9aafac30bfca5e909ea00894cb3f9b241f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd248a9aafac30bfca5e909ea00894cb3f9b241f"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "a7ef1e3d3485d7d3f8aa7a67f2a3915ff7052b2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b9575bc2665d873a16ddc30e7829bcdadf4dec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b9575bc2665d873a16ddc30e7829bcdadf4dec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25b9575bc2665d873a16ddc30e7829bcdadf4dec", "patch": "@@ -1,3 +1,13 @@\n+2005-04-27  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* config/fp-bit.c (abort): Add noreturn attribute.\n+\n+\t* config/avr/avr.c (avr_naked_function_p): Use gcc_assert and\n+\tgcc_unreachable as appropriate.\n+\t(ptrreg_to_str, cond_string, avr_normalize_condition): Likewise.\n+\t* config/avr/avr.h (ASM_OUTPUT_REG_PUSH,\n+\tASM_OUTPUT_REG_POP): Likewise.\n+\n 2005-04-27  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* tree-complex.c (expand_vector_operations_1): Do not build"}, {"sha": "668d4cc6a2b3124fc8b2c17edafe0594834872fa", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b9575bc2665d873a16ddc30e7829bcdadf4dec/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b9575bc2665d873a16ddc30e7829bcdadf4dec/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=25b9575bc2665d873a16ddc30e7829bcdadf4dec", "patch": "@@ -380,8 +380,7 @@ avr_naked_function_p (tree func)\n {\n   tree a;\n \n-  if (TREE_CODE (func) != FUNCTION_DECL)\n-    abort ();\n+  gcc_assert (TREE_CODE (func) == FUNCTION_DECL);\n   \n   a = lookup_attribute (\"naked\", DECL_ATTRIBUTES (func));\n   return a != NULL_TREE;\n@@ -1030,7 +1029,7 @@ ptrreg_to_str (int regno)\n     case REG_Y: return \"Y\";\n     case REG_Z: return \"Z\";\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n   return NULL;\n }\n@@ -1062,7 +1061,7 @@ cond_string (enum rtx_code code)\n     case LTU:\n       return \"lo\";\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n \n@@ -5534,7 +5533,7 @@ avr_normalize_condition (RTX_CODE condition)\n     case LEU:\n       return LTU;\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n "}, {"sha": "5b7c73dfac6932ae62a98623e00bca87936b8b65", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b9575bc2665d873a16ddc30e7829bcdadf4dec/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b9575bc2665d873a16ddc30e7829bcdadf4dec/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=25b9575bc2665d873a16ddc30e7829bcdadf4dec", "patch": "@@ -668,15 +668,13 @@ sprintf (STRING, \"*.%s%lu\", PREFIX, (unsigned long)(NUM))\n \n #define ASM_OUTPUT_REG_PUSH(STREAM, REGNO)\t\\\n {\t\t\t\t\t\t\\\n-  if (REGNO > 31)\t\t\t\t\\\n-    abort ();\t\t\t\t\t\\\n+  gcc_assert (REGNO < 32);\t\t\t\\\n   fprintf (STREAM, \"\\tpush\\tr%d\", REGNO);\t\\\n }\n \n #define ASM_OUTPUT_REG_POP(STREAM, REGNO)\t\\\n {\t\t\t\t\t\t\\\n-  if (REGNO > 31)\t\t\t\t\\\n-    abort ();\t\t\t\t\t\\\n+  gcc_assert (REGNO < 32);\t\t\t\\\n   fprintf (STREAM, \"\\tpop\\tr%d\", REGNO);\t\\\n }\n "}, {"sha": "1229bf7e6b8b2a2868a4d70028a45b0f3f0bea0b", "filename": "gcc/config/fp-bit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b9575bc2665d873a16ddc30e7829bcdadf4dec/gcc%2Fconfig%2Ffp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b9575bc2665d873a16ddc30e7829bcdadf4dec/gcc%2Fconfig%2Ffp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffp-bit.c?ref=25b9575bc2665d873a16ddc30e7829bcdadf4dec", "patch": "@@ -81,7 +81,7 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n #ifdef EXTENDED_FLOAT_STUBS\n-extern void abort (void);\n+extern __attribute__ ((__noreturn__)) void abort (void);\n void __extendsfxf2 (void) { abort(); }\n void __extenddfxf2 (void) { abort(); }\n void __truncxfdf2 (void) { abort(); }"}]}