{"sha": "5f302518627efd04b04a0da3269541fdfa2d7388", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYzMDI1MTg2MjdlZmQwNGIwNGEwZGEzMjY5NTQxZmRmYTJkNzM4OA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-04-10T14:36:09Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-04-10T14:36:09Z"}, "message": "PR libstdc++/85222 allow catching iostream errors as gcc4-compatible ios::failure\n\nDefine a new exception type derived from std::ios::failure[abi:cxx11]\nwhich also aggregates an object of the gcc4-compatible ios::failure\ntype. Make __throw_ios_failure throw this new type for iostream errors\nthat raise exceptions. Provide custom type info for the new type so that\nit can be caught by handlers for the gcc4-compatible ios::failure type\nas well as handlers for ios::failure[abi:cxx11] and its bases.\n\n\tPR libstdc++/85222\n\t* src/c++11/Makefile.am [ENABLE_DUAL_ABI]: Add special rules for\n\tcxx11-ios_failure.cc to rewrite type info for __ios_failure.\n\t* src/c++11/Makefile.in: Regenerate.\n\t* src/c++11/cxx11-ios_failure.cc (__ios_failure, __iosfail_type_info):\n\tNew types.\n\t[_GLIBCXX_USE_DUAL_ABI] (__throw_ios_failure): Define here.\n\t* src/c++11/ios.cc (__throw_ios_failure): Remove definition.\n\t* src/c++98/ios_failure.cc (__construct_ios_failure)\n\t(__destroy_ios_failure, is_ios_failure_handler): New functions.\n\t[!_GLIBCXX_USE_DUAL_ABI] (__throw_ios_failure): Define here.\n\t* testsuite/27_io/ios_base/failure/dual_abi.cc: New.\n\t* testsuite/27_io/basic_ios/copyfmt/char/1.cc: Revert changes to\n\thandler types, to always catch std::ios_base::failure.\n\t* testsuite/27_io/basic_ios/exceptions/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/\n\texceptions_failbit.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n\texceptions_failbit.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_other/char/\n\texceptions_null.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n\texceptions_null.cc: Likewise.\n\t* testsuite/27_io/basic_istream/sentry/char/12297.cc: Likewise.\n\t* testsuite/27_io/basic_istream/sentry/wchar_t/12297.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/char/\n\texceptions_null.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n\texceptions_null.cc: Likewise.\n\t* testsuite/27_io/ios_base/storage/2.cc: Likewise.\n\nFrom-SVN: r259281", "tree": {"sha": "61827d3ab46d9b1ce75aff26b727ee20233f7475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61827d3ab46d9b1ce75aff26b727ee20233f7475"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f302518627efd04b04a0da3269541fdfa2d7388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f302518627efd04b04a0da3269541fdfa2d7388", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f302518627efd04b04a0da3269541fdfa2d7388", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f302518627efd04b04a0da3269541fdfa2d7388/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e6b73b1c00c7025b344af2796539aef61ef5474", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e6b73b1c00c7025b344af2796539aef61ef5474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e6b73b1c00c7025b344af2796539aef61ef5474"}], "stats": {"total": 411, "additions": 308, "deletions": 103}, "files": [{"sha": "d9e790da8992f5fefc557612005cac28b2dd254c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5f302518627efd04b04a0da3269541fdfa2d7388", "patch": "@@ -1,3 +1,36 @@\n+2018-04-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/85222\n+\t* src/c++11/Makefile.am [ENABLE_DUAL_ABI]: Add special rules for\n+\tcxx11-ios_failure.cc to rewrite type info for __ios_failure.\n+\t* src/c++11/Makefile.in: Regenerate.\n+\t* src/c++11/cxx11-ios_failure.cc (__ios_failure, __iosfail_type_info):\n+\tNew types.\n+\t[_GLIBCXX_USE_DUAL_ABI] (__throw_ios_failure): Define here.\n+\t* src/c++11/ios.cc (__throw_ios_failure): Remove definition.\n+\t* src/c++98/ios_failure.cc (__construct_ios_failure)\n+\t(__destroy_ios_failure, is_ios_failure_handler): New functions.\n+\t[!_GLIBCXX_USE_DUAL_ABI] (__throw_ios_failure): Define here.\n+\t* testsuite/27_io/ios_base/failure/dual_abi.cc: New.\n+\t* testsuite/27_io/basic_ios/copyfmt/char/1.cc: Revert changes to\n+\thandler types, to always catch std::ios_base::failure.\n+\t* testsuite/27_io/basic_ios/exceptions/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/\n+\texceptions_failbit.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n+\texceptions_failbit.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/char/\n+\texceptions_null.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n+\texceptions_null.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/sentry/char/12297.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/sentry/wchar_t/12297.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/\n+\texceptions_null.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n+\texceptions_null.cc: Likewise.\n+\t* testsuite/27_io/ios_base/storage/2.cc: Likewise.\n+\n 2018-04-05  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/variant (_VARIANT_RELATION_FUNCTION_TEMPLATE): Qualify"}, {"sha": "6f49f0d55d391acacc4e29ed6d1c349c0880160f", "filename": "libstdc++-v3/src/c++11/Makefile.am", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am?ref=5f302518627efd04b04a0da3269541fdfa2d7388", "patch": "@@ -126,6 +126,29 @@ hashtable_c++0x.lo: hashtable_c++0x.cc\n hashtable_c++0x.o: hashtable_c++0x.cc\n \t$(CXXCOMPILE) -fimplicit-templates -c $<\n \n+if ENABLE_DUAL_ABI\n+# Rewrite the type info for __dual_abi_ios_failure.\n+rewrite_ios_failure_typeinfo = sed -e '/^_ZTISt13__ios_failure:$$/{' \\\n+\t-e 'n' \\\n+\t-e 's/_ZTVN10__cxxabiv120__si_class_type_infoE/_ZTVSt19__iosfail_type_info/' \\\n+\t-e '}'\n+\n+cxx11-ios_failure-lt.s: cxx11-ios_failure.cc\n+\t$(LTCXXCOMPILE) -S $< -o tmp-cxx11-ios_failure-lt.s\n+\t-test -f tmp-cxx11-ios_failure-lt.o && mv -f tmp-cxx11-ios_failure-lt.o tmp-cxx11-ios_failure-lt.s\n+\t$(rewrite_ios_failure_typeinfo) tmp-$@ > $@\n+\t-rm -f tmp-$@\n+cxx11-ios_failure.s: cxx11-ios_failure.cc\n+\t$(CXXCOMPILE) -S $< -o tmp-$@\n+\t$(rewrite_ios_failure_typeinfo) tmp-$@ > $@\n+\t-rm -f tmp-$@\n+\n+cxx11-ios_failure.lo: cxx11-ios_failure-lt.s\n+\t$(LTCXXCOMPILE) -c $< -o $@\n+cxx11-ios_failure.o: cxx11-ios_failure.s\n+\t$(CXXCOMPILE) -c $<\n+endif\n+\n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after"}, {"sha": "26833b04b424638b8c301fd47bd2077ef7b6f156", "filename": "libstdc++-v3/src/c++11/Makefile.in", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in?ref=5f302518627efd04b04a0da3269541fdfa2d7388", "patch": "@@ -434,6 +434,13 @@ sources = \\\n \n libc__11convenience_la_SOURCES = $(sources)  $(inst_sources)\n \n+# Rewrite the type info for __dual_abi_ios_failure.\n+@ENABLE_DUAL_ABI_TRUE@rewrite_ios_failure_typeinfo = sed -e '/^_ZTISt13__ios_failure:$$/{' \\\n+@ENABLE_DUAL_ABI_TRUE@\t-e 'n' \\\n+@ENABLE_DUAL_ABI_TRUE@\t-e 's/_ZTVN10__cxxabiv120__si_class_type_infoE/_ZTVSt19__iosfail_type_info/' \\\n+@ENABLE_DUAL_ABI_TRUE@\t-e '}'\n+\n+\n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n@@ -749,6 +756,21 @@ hashtable_c++0x.lo: hashtable_c++0x.cc\n hashtable_c++0x.o: hashtable_c++0x.cc\n \t$(CXXCOMPILE) -fimplicit-templates -c $<\n \n+@ENABLE_DUAL_ABI_TRUE@cxx11-ios_failure-lt.s: cxx11-ios_failure.cc\n+@ENABLE_DUAL_ABI_TRUE@\t$(LTCXXCOMPILE) -S $< -o tmp-cxx11-ios_failure-lt.s\n+@ENABLE_DUAL_ABI_TRUE@\t-test -f tmp-cxx11-ios_failure-lt.o && mv -f tmp-cxx11-ios_failure-lt.o tmp-cxx11-ios_failure-lt.s\n+@ENABLE_DUAL_ABI_TRUE@\t$(rewrite_ios_failure_typeinfo) tmp-$@ > $@\n+@ENABLE_DUAL_ABI_TRUE@\t-rm -f tmp-$@\n+@ENABLE_DUAL_ABI_TRUE@cxx11-ios_failure.s: cxx11-ios_failure.cc\n+@ENABLE_DUAL_ABI_TRUE@\t$(CXXCOMPILE) -S $< -o tmp-$@\n+@ENABLE_DUAL_ABI_TRUE@\t$(rewrite_ios_failure_typeinfo) tmp-$@ > $@\n+@ENABLE_DUAL_ABI_TRUE@\t-rm -f tmp-$@\n+\n+@ENABLE_DUAL_ABI_TRUE@cxx11-ios_failure.lo: cxx11-ios_failure-lt.s\n+@ENABLE_DUAL_ABI_TRUE@\t$(LTCXXCOMPILE) -c $< -o $@\n+@ENABLE_DUAL_ABI_TRUE@cxx11-ios_failure.o: cxx11-ios_failure.s\n+@ENABLE_DUAL_ABI_TRUE@\t$(CXXCOMPILE) -c $<\n+\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "847b5946234b8ac9f106b73908a074b8953c7e08", "filename": "libstdc++-v3/src/c++11/cxx11-ios_failure.cc", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-ios_failure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-ios_failure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-ios_failure.cc?ref=5f302518627efd04b04a0da3269541fdfa2d7388", "patch": "@@ -28,6 +28,15 @@\n \n #define _GLIBCXX_USE_CXX11_ABI 1\n #include <ios>\n+#include <bits/functexcept.h>\n+#include <cxxabi.h>\n+\n+#ifdef _GLIBCXX_USE_NLS\n+# include <libintl.h>\n+# define _(msgid)   gettext (msgid)\n+#else\n+# define _(msgid)   (msgid)\n+#endif\n \n #if ! _GLIBCXX_USE_DUAL_ABI\n # error This file should not be compiled for this configuration.\n@@ -91,5 +100,66 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ios_base::failure::what() const throw()\n   { return runtime_error::what(); }\n \n+#if __cpp_rtti\n+  // These functions are defined in src/c++98/ios_failure.cc\n+  extern void __construct_ios_failure(void*, const char*);\n+  extern void __destroy_ios_failure(void*);\n+  extern bool __is_ios_failure_handler(const __cxxabiv1::__class_type_info*);\n+\n+  // The type thrown to report errors during stream buffer operations.\n+  // In addition to the ios::failure[abi:cxx11] base class it also has a\n+  // member of the gcc4-compatible ios::failure type (in an opaque buffer).\n+  struct __ios_failure : std::ios::failure\n+  {\n+    __ios_failure(const char* s) : failure(s)\n+    { __construct_ios_failure(buf, runtime_error::what()); }\n+\n+    ~__ios_failure()\n+    { __destroy_ios_failure(buf); }\n+\n+    // Use std::runtime_error as a proxy for the gcc4-compatible ios::failure\n+    // (which can't be declared here because _GLIBCXX_USE_CXX11_ABI == 1).\n+    // There are assertions in src/c++98/ios_failure.cc to ensure the size\n+    // and alignment assumptions are valid.\n+    alignas(runtime_error) unsigned char buf[sizeof(runtime_error)];\n+  };\n+\n+  // Custom type info for __ios_failure.\n+  class __iosfail_type_info : __cxxabiv1::__si_class_type_info\n+  {\n+    ~__iosfail_type_info();\n+\n+    bool\n+    __do_upcast (const __class_type_info *dst_type,\n+\t\t void **obj_ptr) const override;\n+  };\n+\n+  __iosfail_type_info::~__iosfail_type_info() = default;\n+\n+  // This function gets called to see if an exception of type\n+  // __ios_failure can be upcast to the type in a catch handler.\n+  bool\n+  __iosfail_type_info::__do_upcast(const __class_type_info *dst_type,\n+\t\t\t        void **obj_ptr) const\n+  {\n+    // If the handler is for the gcc4-compatible ios::failure type then\n+    // catch the object stored in __ios_failure::buf instead of\n+    // the __ios_failure exception object itself.\n+    if (__is_ios_failure_handler(dst_type))\n+      {\n+\t*obj_ptr = static_cast<__ios_failure*>(*obj_ptr)->buf;\n+\treturn true;\n+      }\n+    // Otherwise proceeed as normal to see if the handler matches.\n+    return __class_type_info::__do_upcast(dst_type, obj_ptr);\n+  }\n+#else // ! __cpp_rtti\n+  using __ios_failure = ios::failure;\n+#endif\n+\n+  void\n+  __throw_ios_failure(const char* __s __attribute__((unused)))\n+  { _GLIBCXX_THROW_OR_ABORT(__ios_failure(_(__s))); }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "e928c5941496d75d7ea6ebea972b214bdc813040", "filename": "libstdc++-v3/src/c++11/ios.cc", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios.cc?ref=5f302518627efd04b04a0da3269541fdfa2d7388", "patch": "@@ -32,23 +32,11 @@\n \n #include <ios>\n #include <limits>\n-#include <bits/functexcept.h>\n-\n-#ifdef _GLIBCXX_USE_NLS\n-# include <libintl.h>\n-# define _(msgid)   gettext (msgid)\n-#else\n-# define _(msgid)   (msgid)\n-#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  void\n-  __throw_ios_failure(const char* __s __attribute__((unused)))\n-  { _GLIBCXX_THROW_OR_ABORT(ios_base::failure(_(__s))); }\n-\n   // Definitions for static const members of ios_base.\n   const ios_base::fmtflags ios_base::boolalpha;\n   const ios_base::fmtflags ios_base::dec;"}, {"sha": "a2fc5593e15ef94dc0fe2ee61d0c568e8bf0f016", "filename": "libstdc++-v3/src/c++98/ios_failure.cc", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fios_failure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fios_failure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fios_failure.cc?ref=5f302518627efd04b04a0da3269541fdfa2d7388", "patch": "@@ -29,6 +29,18 @@\n #define _GLIBCXX_USE_CXX11_ABI 0\n #include <ios>\n \n+#if _GLIBCXX_USE_DUAL_ABI && __cpp_rtti\n+#include <cxxabi.h>\n+#include <typeinfo>\n+#endif\n+\n+#ifdef _GLIBCXX_USE_NLS\n+# include <libintl.h>\n+# define _(msgid)   gettext (msgid)\n+#else\n+# define _(msgid)   (msgid)\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -43,5 +55,40 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ios_base::failure::what() const throw()\n   { return _M_msg.c_str(); }\n \n+#if _GLIBCXX_USE_DUAL_ABI\n+  // When the dual ABI is enabled __throw_ios_failure() is defined in\n+  // src/c++11/ios_failure.cc\n+#if __cpp_rtti\n+  // If RTTI is enabled the exception type thrown will use these functions to\n+  // construct/destroy a gcc4-compatible ios::failure object in a buffer,\n+  // and to catch that object via a handler of the gcc4-compatible type.\n+  void\n+  __construct_ios_failure(void* buf, const char* msg)\n+  { ::new(buf) ios_base::failure(msg); }\n+\n+  void\n+  __destroy_ios_failure(void* buf)\n+  { static_cast<ios_base::failure*>(buf)->~failure(); }\n+\n+  bool\n+  __is_ios_failure_handler(const __cxxabiv1::__class_type_info* type)\n+  { return *type == typeid(ios::failure); }\n+\n+  namespace {\n+  // C++98-style static assertions to ensure ios::failure fits in a buffer\n+  // with the same size and alignment as runtime_error:\n+  typedef char S[1 / (sizeof(ios::failure) <= sizeof(runtime_error))];\n+  typedef char A[1 / (__alignof(ios::failure) <= __alignof(runtime_error))];\n+  }\n+#endif // __cpp_rtti\n+\n+#else // ! _GLIBCXX_USE_DUAL_ABI\n+\n+  void\n+  __throw_ios_failure(const char* __s __attribute__((unused)))\n+  { _GLIBCXX_THROW_OR_ABORT(ios::failure(_(__s))); }\n+\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "8bcd875b563ea027949fa704f65beea3c549d91d", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/copyfmt/char/1.cc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F1.cc?ref=5f302518627efd04b04a0da3269541fdfa2d7388", "patch": "@@ -46,13 +46,6 @@ void test02()\n   }\n \n   {\n-    // The library throws the new definition of std::ios::failure\n-#if _GLIBCXX_USE_CXX11_ABI\n-    typedef std::ios_base::failure exception_type;\n-#else\n-    typedef std::exception exception_type;\n-#endif\n-\n     std::ios ios_01(0);\n     std::ios ios_02(0);\n     ios_01.clear(std::ios_base::eofbit);\n@@ -62,7 +55,7 @@ void test02()\n       ios_01.copyfmt(ios_02);\n       VERIFY( false );\n     }\n-    catch(exception_type&) {\n+    catch(std::ios_base::failure&) {\n       VERIFY( true );\n     }\n     catch(...) {"}, {"sha": "960ae2767b66715ce5492f49ba036af3cd3e9a32", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/exceptions/char/1.cc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fexceptions%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fexceptions%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fexceptions%2Fchar%2F1.cc?ref=5f302518627efd04b04a0da3269541fdfa2d7388", "patch": "@@ -50,20 +50,13 @@ void test01()\n   }\n \n   {\n-    // The library throws the new definition of std::ios::failure\n-#if _GLIBCXX_USE_CXX11_ABI\n-    typedef std::ios_base::failure exception_type;\n-#else\n-    typedef std::exception exception_type;\n-#endif\n-\n     std::ios ios_01(0);\n     ios_01.clear(std::ios_base::eofbit);\n     try {\n       ios_01.exceptions(std::ios_base::eofbit);\n       VERIFY( false );\n     }\n-    catch(exception_type&) {\n+    catch(std::ios_base::failure&) {\n       iostate02 = ios_01.exceptions();\n       VERIFY( static_cast<bool>(iostate02 & std::ios_base::eofbit) );\n     }"}, {"sha": "584c278a47b729b80641f65e17d646acbb449515", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/exceptions_failbit.cc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_failbit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_failbit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_failbit.cc?ref=5f302518627efd04b04a0da3269541fdfa2d7388", "patch": "@@ -27,20 +27,13 @@ void test_failbit()\n   istringstream stream(\"jaylib - champion sound\");\n   stream.exceptions(ios_base::failbit);\n \n-  // The library throws the new definition of std::ios::failure\n-#if _GLIBCXX_USE_CXX11_ABI\n-    typedef std::ios_base::failure exception_type;\n-#else\n-    typedef std::exception exception_type;\n-#endif\n-\n   try\n     {\n       T i;\n       stream >> i;\n       VERIFY( false );\n     }\n-  catch (const exception_type&)\n+  catch (const std::ios_base::failure&)\n     {\n       // stream should set failbit and throw ios_base::failure.\n       VERIFY( stream.fail() );"}, {"sha": "ca0e8b1086ed32c6341e76227b60bf36a4551923", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/exceptions_failbit.cc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fexceptions_failbit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fexceptions_failbit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fexceptions_failbit.cc?ref=5f302518627efd04b04a0da3269541fdfa2d7388", "patch": "@@ -27,20 +27,13 @@ void test_failbit()\n   wistringstream stream(L\"jaylib - champion sound\");\n   stream.exceptions(ios_base::failbit);\n \n-  // The library throws the new definition of std::ios::failure\n-#if _GLIBCXX_USE_CXX11_ABI\n-    typedef std::ios_base::failure exception_type;\n-#else\n-    typedef std::exception exception_type;\n-#endif\n-\n   try\n     {\n       T i;\n       stream >> i;\n       VERIFY( false );\n     }\n-  catch (const exception_type&)\n+  catch (const std::ios_base::failure&)\n     {\n       // stream should set failbit and throw ios_base::failure.\n       VERIFY( stream.fail() );"}, {"sha": "498ab21b0e9d2253878699f0b7f907fddd17ece7", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/char/exceptions_null.cc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_null.cc?ref=5f302518627efd04b04a0da3269541fdfa2d7388", "patch": "@@ -35,19 +35,12 @@ void test4()\n   istringstream stream;\n   stream.exceptions(ios_base::failbit);\n \n-  // The library throws the new definition of std::ios::failure\n-#if _GLIBCXX_USE_CXX11_ABI\n-    typedef std::ios_base::failure exception_type;\n-#else\n-    typedef std::exception exception_type;\n-#endif\n-\n   try\n     {\n       stream >> static_cast<streambuf*>(0);\n       VERIFY(false);\n     }\n-  catch (exception_type&)\n+  catch (std::ios_base::failure&)\n     {\n     }\n "}, {"sha": "0c10ec628aadc312a0283f211a0bc5d7dac5dcc2", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/wchar_t/exceptions_null.cc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_null.cc?ref=5f302518627efd04b04a0da3269541fdfa2d7388", "patch": "@@ -35,19 +35,12 @@ void test4()\n   wistringstream stream;\n   stream.exceptions(ios_base::failbit);\n \n-  // The library throws the new definition of std::ios::failure\n-#if _GLIBCXX_USE_CXX11_ABI\n-    typedef std::ios_base::failure exception_type;\n-#else\n-    typedef std::exception exception_type;\n-#endif\n-\n   try\n     {\n       stream >> static_cast<wstreambuf*>(0);\n       VERIFY( false );\n     }\n-  catch (exception_type&)\n+  catch (std::ios_base::failure&)\n     {\n     }\n "}, {"sha": "c808cb705ac621c7eda4939cfcb8808048124a35", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/sentry/char/12297.cc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F12297.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F12297.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F12297.cc?ref=5f302518627efd04b04a0da3269541fdfa2d7388", "patch": "@@ -26,19 +26,12 @@ int main()\n   istringstream stream;\n   stream.exceptions(ios_base::eofbit);\n \n-  // The library throws the new definition of std::ios::failure\n-#if _GLIBCXX_USE_CXX11_ABI\n-    typedef std::ios_base::failure exception_type;\n-#else\n-    typedef std::exception exception_type;\n-#endif\n-\n   try\n     {\n       istream::sentry sentry(stream, false);\n       VERIFY( false );\n     }\n-  catch (exception_type&)\n+  catch (std::ios_base::failure&)\n     {\n       VERIFY( stream.rdstate() == (ios_base::eofbit | ios_base::failbit) );\n     }"}, {"sha": "a5e03ae5cdaf246a6d457c2e9ef9cca62cab63f5", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/sentry/wchar_t/12297.cc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fwchar_t%2F12297.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fwchar_t%2F12297.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fwchar_t%2F12297.cc?ref=5f302518627efd04b04a0da3269541fdfa2d7388", "patch": "@@ -26,19 +26,12 @@ int main()\n   wistringstream stream;\n   stream.exceptions(ios_base::eofbit);\n \n-  // The library throws the new definition of std::ios::failure\n-#if _GLIBCXX_USE_CXX11_ABI\n-    typedef std::ios_base::failure exception_type;\n-#else\n-    typedef std::exception exception_type;\n-#endif\n-\n   try\n     {\n       wistream::sentry sentry(stream, false);\n       VERIFY( false );\n     }\n-  catch (exception_type&)\n+  catch (std::ios_base::failure&)\n     {\n       VERIFY( stream.rdstate() == (ios_base::eofbit | ios_base::failbit) );\n     }"}, {"sha": "515c6beb04c05c66851e5b5bd652e0a70d4a5422", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/exceptions_null.cc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_null.cc?ref=5f302518627efd04b04a0da3269541fdfa2d7388", "patch": "@@ -37,19 +37,12 @@ void test3()\n   ostringstream stream;\n   stream.exceptions(ios_base::badbit);\n \n-  // The library throws the new definition of std::ios::failure\n-#if _GLIBCXX_USE_CXX11_ABI\n-    typedef std::ios_base::failure exception_type;\n-#else\n-    typedef std::exception exception_type;\n-#endif\n-\n   try\n     {\n       stream << static_cast<streambuf*>(0);\n       VERIFY( false );\n     }\n-  catch (exception_type&)\n+  catch (std::ios_base::failure&)\n     {\n     }\n "}, {"sha": "25dfa307e8b72b498c90c184694f7ec03ec40fdd", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/exceptions_null.cc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_null.cc?ref=5f302518627efd04b04a0da3269541fdfa2d7388", "patch": "@@ -37,19 +37,12 @@ void test3()\n   wostringstream stream;\n   stream.exceptions(ios_base::badbit);\n \n-  // The library throws the new definition of std::ios::failure\n-#if _GLIBCXX_USE_CXX11_ABI\n-    typedef std::ios_base::failure exception_type;\n-#else\n-    typedef std::exception exception_type;\n-#endif\n-\n   try\n     {\n       stream << static_cast<wstreambuf*>(0);\n       VERIFY( false );\n     }\n-  catch (exception_type&)\n+  catch (std::ios_base::failure&)\n     {\n     }\n "}, {"sha": "9bd72a1baf9cf539c370ce00d04102f12ad41daf", "filename": "libstdc++-v3/testsuite/27_io/ios_base/failure/dual_abi.cc", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fdual_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fdual_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fdual_abi.cc?ref=5f302518627efd04b04a0da3269541fdfa2d7388", "patch": "@@ -0,0 +1,99 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=0\" }\n+// { dg-do run { target c++11 } }\n+\n+#include <fstream>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using std::ios;\n+  bool caught_ios_failure = false;\n+  bool rethrown = false;\n+  bool caught_system_error = false;\n+  try {\n+    std::ifstream f;\n+    f.exceptions(ios::failbit | ios::badbit | ios::eofbit);\n+    try {\n+      f.get();\n+    }\n+    catch (const ios::failure&) // catch as old ABI type\n+    {\n+      caught_ios_failure = true;\n+#if _GLIBCXX_USE_DUAL_ABI || _GLIBCXX_USE_CXX11_ABI == 1\n+      rethrown = true;\n+      throw; // re-throw, to catch as new ABI type\n+#endif\n+    }\n+  }\n+  catch (const std::system_error& e)\n+  {\n+    caught_system_error = true;\n+  }\n+\n+  VERIFY( caught_ios_failure );\n+  if (rethrown)\n+    VERIFY( caught_system_error );\n+}\n+\n+void\n+test02()\n+{\n+  using std::ios;\n+  const std::exception* p = nullptr;\n+  bool caught_ios_failure = false;\n+  bool caught_exception = false;\n+  try {\n+    std::ifstream f;\n+    f.exceptions(ios::failbit | ios::badbit | ios::eofbit);\n+    try {\n+      f.get();\n+    }\n+    catch (const std::exception& e1)\n+    {\n+      caught_exception = true;\n+      p = &e1;\n+      throw;\n+    }\n+  }\n+  catch (const ios::failure& e2)\n+  {\n+    caught_ios_failure = true;\n+#if _GLIBCXX_USE_DUAL_ABI\n+    // If the Dual ABI is active the library throws the new type,\n+    // so e1 was an object of that new type and so &e1 != &e2.\n+    VERIFY( p != &e2 );\n+#else\n+    // Otherwise there's only one type of ios::failure, so &e1 == &e2.\n+    VERIFY( p == &e2 );\n+#endif\n+  }\n+\n+  VERIFY( caught_exception );\n+  VERIFY( caught_ios_failure );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "6a064e26977e05938064c587c3490f35face85b7", "filename": "libstdc++-v3/testsuite/27_io/ios_base/storage/2.cc", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f302518627efd04b04a0da3269541fdfa2d7388/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F2.cc?ref=5f302518627efd04b04a0da3269541fdfa2d7388", "patch": "@@ -50,18 +50,11 @@ void test02()\n   ios.pword(1) = v;\n   VERIFY( ios.pword(1) == v );\n \n-  // The library throws the new definition of std::ios::failure\n-#if _GLIBCXX_USE_CXX11_ABI\n-    typedef std::ios_base::failure exception_type;\n-#else\n-    typedef std::exception exception_type;\n-#endif\n-\n   try\n     {\n       v = ios.pword(max);\n     }\n-  catch(exception_type&)\n+  catch(std::ios_base::failure&)\n     {\n       // Ok.\n       VERIFY( ios.bad() );\n@@ -80,7 +73,7 @@ void test02()\n     {\n       v = ios.pword(std::numeric_limits<int>::max());\n     }\n-  catch(exception_type&)\n+  catch(std::ios_base::failure&)\n     {\n       // Ok.\n       VERIFY( ios.bad() );\n@@ -99,7 +92,7 @@ void test02()\n     {\n       l = ios.iword(max);\n     }\n-  catch(exception_type&)\n+  catch(std::ios_base::failure&)\n     {\n       // Ok.\n       VERIFY( ios.bad() );\n@@ -118,7 +111,7 @@ void test02()\n     {\n       l = ios.iword(std::numeric_limits<int>::max());\n     }\n-  catch(exception_type&)\n+  catch(std::ios_base::failure&)\n     {\n       // Ok.\n       VERIFY( ios.bad() );"}]}