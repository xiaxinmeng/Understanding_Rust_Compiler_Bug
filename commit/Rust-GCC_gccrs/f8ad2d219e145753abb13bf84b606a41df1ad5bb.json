{"sha": "f8ad2d219e145753abb13bf84b606a41df1ad5bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhhZDJkMjE5ZTE0NTc1M2FiYjEzYmY4NGI2MDZhNDFkZjFhZDViYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-08-24T16:06:22Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-08-24T16:06:22Z"}, "message": "re PR c++/16889 (ambiguity is not detected)\n\ncp:\n\tPR c++/16889\n\t* (is_subobject_of_p): Resurrect & optimize.\n\t(lookup_field_r): Use it.\ntestsuite:\n\tPR c++/16889\n\t* g++.dg/lookup/ambig[12].C: New.\n\nFrom-SVN: r86488", "tree": {"sha": "86fd999adb0b2315ae129f8e8afc5084c8e45778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86fd999adb0b2315ae129f8e8afc5084c8e45778"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8ad2d219e145753abb13bf84b606a41df1ad5bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ad2d219e145753abb13bf84b606a41df1ad5bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8ad2d219e145753abb13bf84b606a41df1ad5bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ad2d219e145753abb13bf84b606a41df1ad5bb/comments", "author": null, "committer": null, "parents": [{"sha": "97dc04b39a0435315f95512f5214d22cabe67e16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97dc04b39a0435315f95512f5214d22cabe67e16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97dc04b39a0435315f95512f5214d22cabe67e16"}], "stats": {"total": 73, "additions": 70, "deletions": 3}, "files": [{"sha": "cc0a9618942b805a5d16c38b4502a42540261cdc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ad2d219e145753abb13bf84b606a41df1ad5bb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ad2d219e145753abb13bf84b606a41df1ad5bb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f8ad2d219e145753abb13bf84b606a41df1ad5bb", "patch": "@@ -1,3 +1,9 @@\n+2004-08-24  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/16889\n+\t* (is_subobject_of_p): Resurrect & optimize.\n+\t(lookup_field_r): Use it.\n+\n 2004-08-24  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/16706"}, {"sha": "4aadf78adf8f0aff816e19822c9bf4a72142d0c1", "filename": "gcc/cp/search.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ad2d219e145753abb13bf84b606a41df1ad5bb/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ad2d219e145753abb13bf84b606a41df1ad5bb/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=f8ad2d219e145753abb13bf84b606a41df1ad5bb", "patch": "@@ -45,6 +45,7 @@ struct vbase_info\n   tree inits;\n };\n \n+static int is_subobject_of_p (tree, tree);\n static tree dfs_check_overlap (tree, void *);\n static tree dfs_no_overlap_yet (tree, int, void *);\n static base_kind lookup_base_r (tree, tree, base_access, bool, tree *);\n@@ -1018,7 +1019,6 @@ template_self_reference_p (tree type, tree decl)\n \t   && DECL_NAME (decl) == constructor_name (type));\n }\n \n-\n /* Nonzero for a class member means that it is shared between all objects\n    of that class.\n \n@@ -1048,6 +1048,26 @@ shared_member_p (tree t)\n   return 0;\n }\n \n+/* Routine to see if the sub-object denoted by the binfo PARENT can be\n+   found as a base class and sub-object of the object denoted by\n+   BINFO.  */\n+\n+static int\n+is_subobject_of_p (tree parent, tree binfo)\n+{\n+  tree probe;\n+  \n+  for (probe = parent; probe; probe = BINFO_INHERITANCE_CHAIN (probe))\n+    {\n+      if (probe == binfo)\n+\treturn 1;\n+      if (BINFO_VIRTUAL_P (probe))\n+\treturn (binfo_for_vbase (BINFO_TYPE (probe), BINFO_TYPE (binfo))\n+\t\t!= NULL_TREE);\n+    }\n+  return 0;\n+}\n+\n /* DATA is really a struct lookup_field_info.  Look for a field with\n    the name indicated there in BINFO.  If this function returns a\n    non-NULL value it is the result of the lookup.  Called from\n@@ -1115,12 +1135,14 @@ lookup_field_r (tree binfo, void *data)\n \n   /* If the lookup already found a match, and the new value doesn't\n      hide the old one, we might have an ambiguity.  */\n-  if (lfi->rval_binfo && !original_binfo (lfi->rval_binfo, binfo))\n+  if (lfi->rval_binfo\n+      && !is_subobject_of_p (lfi->rval_binfo, binfo))\n+    \n     {\n       if (nval == lfi->rval && shared_member_p (nval))\n \t/* The two things are really the same.  */\n \t;\n-      else if (original_binfo (binfo, lfi->rval_binfo))\n+      else if (is_subobject_of_p (binfo, lfi->rval_binfo))\n \t/* The previous value hides the new one.  */\n \t;\n       else"}, {"sha": "313d5a2166e31ac890364e886503d94a5586d970", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ad2d219e145753abb13bf84b606a41df1ad5bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ad2d219e145753abb13bf84b606a41df1ad5bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8ad2d219e145753abb13bf84b606a41df1ad5bb", "patch": "@@ -1,3 +1,8 @@\n+2004-08-24  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/16889\n+\t* g++.dg/lookup/ambig[12].C: New.\n+\n 2004-08-24  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/16706"}, {"sha": "1cf9ab4f0a2cc19df7c7ebb01e278a2f7cf46d58", "filename": "gcc/testsuite/g++.dg/lookup/ambig1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ad2d219e145753abb13bf84b606a41df1ad5bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fambig1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ad2d219e145753abb13bf84b606a41df1ad5bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fambig1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fambig1.C?ref=f8ad2d219e145753abb13bf84b606a41df1ad5bb", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 24 Aug 2004 <nathan@codesourcery.com>\n+// Origin: Wolfgang Bangerth  <bangerth@dealii.org>\n+\n+// Bug 16889:Undetected ambiguity.\n+\n+struct B { \n+  int f(); // { dg-error \"int B::f\" \"\" }\n+}; \n+ \n+struct B1 : virtual B {}; \n+struct B2 : B {}; \n+struct BB : B1, B2 {}; \n+ \n+int i = BB().f();  // { dg-error \"ambiguous\" \"\" }"}, {"sha": "4d423d1706978a9d75ae4aa77effcd36c61301fe", "filename": "gcc/testsuite/g++.dg/lookup/ambig2.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ad2d219e145753abb13bf84b606a41df1ad5bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fambig2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ad2d219e145753abb13bf84b606a41df1ad5bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fambig2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fambig2.C?ref=f8ad2d219e145753abb13bf84b606a41df1ad5bb", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 24 Aug 2004 <nathan@codesourcery.com>\n+// Origin: Wolfgang Bangerth  <bangerth@dealii.org>\n+\n+// Bug 16889:Undetected ambiguity.\n+\n+struct B { \n+  int i; // { dg-error \"int B::i\" \"\" }\n+}; \n+ \n+struct B1 : virtual B {}; \n+struct B2 : B {}; \n+struct BB : B1, B2 {}; \n+ \n+int i = BB().i;  // { dg-error \"ambiguous\" \"\" }"}]}