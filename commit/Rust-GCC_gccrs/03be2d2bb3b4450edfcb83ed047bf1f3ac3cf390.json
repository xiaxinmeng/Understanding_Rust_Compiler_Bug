{"sha": "03be2d2bb3b4450edfcb83ed047bf1f3ac3cf390", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNiZTJkMmJiM2I0NDUwZWRmY2I4M2VkMDQ3YmYxZjNhYzNjZjM5MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-07-30T07:28:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-07-30T07:28:22Z"}, "message": "re PR middle-end/91216 (OpenMP ICE starting with r265930)\n\n\tPR middle-end/91216\n\t* omp-low.c (global_nonaddressable_vars): New variable.\n\t(use_pointer_for_field): For global decls, if they are non-addressable,\n\tremember it in the global_nonaddressable_vars bitmap, if they are\n\taddressable and in the global_nonaddressable_vars bitmap, ignore their\n\tTREE_ADDRESSABLE bit.\n\t(omp_copy_decl_2): Clear TREE_ADDRESSABLE also on private copies of\n\tvars in global_nonaddressable_vars bitmap.\n\t(execute_lower_omp): Free global_nonaddressable_vars bitmap.\n\n\t* gcc.dg/gomp/pr91216.c: New test.\n\nFrom-SVN: r273898", "tree": {"sha": "9e93a785ae954a54867af71157ce4639c7c7576d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e93a785ae954a54867af71157ce4639c7c7576d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03be2d2bb3b4450edfcb83ed047bf1f3ac3cf390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03be2d2bb3b4450edfcb83ed047bf1f3ac3cf390", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03be2d2bb3b4450edfcb83ed047bf1f3ac3cf390", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03be2d2bb3b4450edfcb83ed047bf1f3ac3cf390/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa2987ed8db073b9d59688363e2dfb6c60f47d70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2987ed8db073b9d59688363e2dfb6c60f47d70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa2987ed8db073b9d59688363e2dfb6c60f47d70"}], "stats": {"total": 62, "additions": 59, "deletions": 3}, "files": [{"sha": "f69542dc536e973aa39f32c81cf5c3217cf56af1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03be2d2bb3b4450edfcb83ed047bf1f3ac3cf390/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03be2d2bb3b4450edfcb83ed047bf1f3ac3cf390/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03be2d2bb3b4450edfcb83ed047bf1f3ac3cf390", "patch": "@@ -1,5 +1,15 @@\n 2019-07-30  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/91216\n+\t* omp-low.c (global_nonaddressable_vars): New variable.\n+\t(use_pointer_for_field): For global decls, if they are non-addressable,\n+\tremember it in the global_nonaddressable_vars bitmap, if they are\n+\taddressable and in the global_nonaddressable_vars bitmap, ignore their\n+\tTREE_ADDRESSABLE bit.\n+\t(omp_copy_decl_2): Clear TREE_ADDRESSABLE also on private copies of\n+\tvars in global_nonaddressable_vars bitmap.\n+\t(execute_lower_omp): Free global_nonaddressable_vars bitmap.\n+\n \tPR target/91150\n \t* config/i386/i386-expand.c (expand_vec_perm_blend): Change mask type\n \tfrom unsigned to unsigned HOST_WIDE_INT.  For E_V64QImode cast"}, {"sha": "5d1b88c76ed1e6708b22264c816ba90450f1522f", "filename": "gcc/omp-low.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03be2d2bb3b4450edfcb83ed047bf1f3ac3cf390/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03be2d2bb3b4450edfcb83ed047bf1f3ac3cf390/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=03be2d2bb3b4450edfcb83ed047bf1f3ac3cf390", "patch": "@@ -162,6 +162,7 @@ static splay_tree all_contexts;\n static int taskreg_nesting_level;\n static int target_nesting_level;\n static bitmap task_shared_vars;\n+static bitmap global_nonaddressable_vars;\n static vec<omp_context *> taskreg_contexts;\n \n static void scan_omp (gimple_seq *, omp_context *);\n@@ -426,7 +427,26 @@ use_pointer_for_field (tree decl, omp_context *shared_ctx)\n \n       /* Do not use copy-in/copy-out for variables that have their\n \t address taken.  */\n-      if (TREE_ADDRESSABLE (decl))\n+      if (is_global_var (decl))\n+\t{\n+\t  /* For file scope vars, track whether we've seen them as\n+\t     non-addressable initially and in that case, keep the same\n+\t     answer for the duration of the pass, even when they are made\n+\t     addressable later on e.g. through reduction expansion.  Global\n+\t     variables which weren't addressable before the pass will not\n+\t     have their privatized copies address taken.  See PR91216.  */\n+\t  if (!TREE_ADDRESSABLE (decl))\n+\t    {\n+\t      if (!global_nonaddressable_vars)\n+\t\tglobal_nonaddressable_vars = BITMAP_ALLOC (NULL);\n+\t      bitmap_set_bit (global_nonaddressable_vars, DECL_UID (decl));\n+\t    }\n+\t  else if (!global_nonaddressable_vars\n+\t\t   || !bitmap_bit_p (global_nonaddressable_vars,\n+\t\t\t\t     DECL_UID (decl)))\n+\t    return true;\n+\t}\n+      else if (TREE_ADDRESSABLE (decl))\n \treturn true;\n \n       /* lower_send_shared_vars only uses copy-in, but not copy-out\n@@ -504,8 +524,10 @@ omp_copy_decl_2 (tree var, tree name, tree type, omp_context *ctx)\n      it's address.  But we don't need to take address of privatizations\n      from that var.  */\n   if (TREE_ADDRESSABLE (var)\n-      && task_shared_vars\n-      && bitmap_bit_p (task_shared_vars, DECL_UID (var)))\n+      && ((task_shared_vars\n+\t   && bitmap_bit_p (task_shared_vars, DECL_UID (var)))\n+\t  || (global_nonaddressable_vars\n+\t      && bitmap_bit_p (global_nonaddressable_vars, DECL_UID (var)))))\n     TREE_ADDRESSABLE (copy) = 0;\n   ctx->block_vars = copy;\n \n@@ -12730,6 +12752,7 @@ execute_lower_omp (void)\n       all_contexts = NULL;\n     }\n   BITMAP_FREE (task_shared_vars);\n+  BITMAP_FREE (global_nonaddressable_vars);\n \n   /* If current function is a method, remove artificial dummy VAR_DECL created\n      for non-static data member privatization, they aren't needed for"}, {"sha": "2a4893779d6d0731b6c89acf803ad541eb0ddb26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03be2d2bb3b4450edfcb83ed047bf1f3ac3cf390/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03be2d2bb3b4450edfcb83ed047bf1f3ac3cf390/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=03be2d2bb3b4450edfcb83ed047bf1f3ac3cf390", "patch": "@@ -1,5 +1,8 @@\n 2019-07-30  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/91216\n+\t* gcc.dg/gomp/pr91216.c: New test.\n+\n \tPR target/91150\n \t* gcc.target/i386/avx512bw-pr91150.c: New test.\n "}, {"sha": "3fcc1355568ebf1b3f7756cd658190424374244a", "filename": "gcc/testsuite/gcc.dg/gomp/pr91216.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03be2d2bb3b4450edfcb83ed047bf1f3ac3cf390/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr91216.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03be2d2bb3b4450edfcb83ed047bf1f3ac3cf390/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr91216.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr91216.c?ref=03be2d2bb3b4450edfcb83ed047bf1f3ac3cf390", "patch": "@@ -0,0 +1,20 @@\n+/* PR middle-end/91216 */\n+\n+int r;\n+\n+void\n+foo (int *a)\n+{\n+  int i;\n+  #pragma omp for reduction(+:r)\n+  for (i = 0; i < 64; i++)\n+    a[i] = i;\n+  #pragma omp for private (r)\n+  for (i = 0; i < 64; i++)\n+    {\n+      r = 0;\n+      #pragma omp parallel shared(r)\n+      #pragma omp master\n+      r = r + 1;\n+    }\n+}"}]}