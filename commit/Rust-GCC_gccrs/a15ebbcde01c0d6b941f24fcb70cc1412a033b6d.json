{"sha": "a15ebbcde01c0d6b941f24fcb70cc1412a033b6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE1ZWJiY2RlMDFjMGQ2Yjk0MWYyNGZjYjcwY2MxNDEyYTAzM2I2ZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-10-12T10:50:40Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-10-12T10:50:40Z"}, "message": "Add a helper function: create_tmp_reg_or_ssa_name\n\n\t* gimple-fold.c (create_tmp_reg_or_ssa_name): New function.\n\t(gimple_fold_builtin_memory_op): Use the function.\n\t(gimple_fold_builtin_strchr): Likewise.\n\t(gimple_fold_builtin_strcat): Likewise.\n\t(gimple_build): Likewise.\n\nFrom-SVN: r241030", "tree": {"sha": "c5392269e6ebc2d13dfcd311c85f5de6462d2d78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5392269e6ebc2d13dfcd311c85f5de6462d2d78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a15ebbcde01c0d6b941f24fcb70cc1412a033b6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15ebbcde01c0d6b941f24fcb70cc1412a033b6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a15ebbcde01c0d6b941f24fcb70cc1412a033b6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15ebbcde01c0d6b941f24fcb70cc1412a033b6d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b4c1029596a33d420738c3ef7bc547edd924321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b4c1029596a33d420738c3ef7bc547edd924321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b4c1029596a33d420738c3ef7bc547edd924321"}], "stats": {"total": 75, "additions": 34, "deletions": 41}, "files": [{"sha": "4441f06fca709a81e39783614b8fb938212cadfc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15ebbcde01c0d6b941f24fcb70cc1412a033b6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15ebbcde01c0d6b941f24fcb70cc1412a033b6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a15ebbcde01c0d6b941f24fcb70cc1412a033b6d", "patch": "@@ -1,3 +1,11 @@\n+2016-10-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* gimple-fold.c (create_tmp_reg_or_ssa_name): New function.\n+\t(gimple_fold_builtin_memory_op): Use the function.\n+\t(gimple_fold_builtin_strchr): Likewise.\n+\t(gimple_fold_builtin_strcat): Likewise.\n+\t(gimple_build): Likewise.\n+\n 2016-10-12  Nathan Sidwell  <nathan@acm.org>\n \n \t* diagnostic.c (diagnostc_report_diagnostic): Fix formatting."}, {"sha": "1836927e28903b613bce3b3626eceac319667c69", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 26, "deletions": 41, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15ebbcde01c0d6b941f24fcb70cc1412a033b6d/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15ebbcde01c0d6b941f24fcb70cc1412a033b6d/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=a15ebbcde01c0d6b941f24fcb70cc1412a033b6d", "patch": "@@ -171,6 +171,19 @@ can_refer_decl_in_current_unit_p (tree decl, tree from_decl)\n   return !node || !node->global.inlined_to;\n }\n \n+/* Create a temporary for TYPE for a statement STMT.  If the current function\n+   is in SSA form, a SSA name is created.  Otherwise a temporary register\n+   is made.  */\n+\n+static tree\n+create_tmp_reg_or_ssa_name (tree type, gimple *stmt = NULL)\n+{\n+  if (gimple_in_ssa_p (cfun))\n+    return make_ssa_name (type, stmt);\n+  else\n+    return create_tmp_reg (type);\n+}\n+\n /* CVAL is value taken from DECL_INITIAL of variable.  Try to transform it into\n    acceptable form for is_gimple_min_invariant.\n    FROM_DECL (if non-NULL) specify variable whose constructor contains CVAL.  */\n@@ -747,11 +760,9 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n \t\t      if (is_gimple_reg_type (TREE_TYPE (srcmem)))\n \t\t\t{\n \t\t\t  new_stmt = gimple_build_assign (NULL_TREE, srcmem);\n-\t\t\t  if (gimple_in_ssa_p (cfun))\n-\t\t\t    srcmem = make_ssa_name (TREE_TYPE (srcmem),\n-\t\t\t\t\t\t    new_stmt);\n-\t\t\t  else\n-\t\t\t    srcmem = create_tmp_reg (TREE_TYPE (srcmem));\n+\t\t\t  srcmem\n+\t\t\t    = create_tmp_reg_or_ssa_name (TREE_TYPE (srcmem),\n+\t\t\t\t\t\t\t  new_stmt);\n \t\t\t  gimple_assign_set_lhs (new_stmt, srcmem);\n \t\t\t  gimple_set_vuse (new_stmt, gimple_vuse (stmt));\n \t\t\t  gsi_insert_before (gsi, new_stmt, GSI_SAME_STMT);\n@@ -1038,10 +1049,8 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n \t  if (! is_gimple_min_invariant (srcvar))\n \t    {\n \t      new_stmt = gimple_build_assign (NULL_TREE, srcvar);\n-\t      if (gimple_in_ssa_p (cfun))\n-\t\tsrcvar = make_ssa_name (TREE_TYPE (srcvar), new_stmt);\n-\t      else\n-\t\tsrcvar = create_tmp_reg (TREE_TYPE (srcvar));\n+\t      srcvar = create_tmp_reg_or_ssa_name (TREE_TYPE (srcvar),\n+\t\t\t\t\t\t   new_stmt);\n \t      gimple_assign_set_lhs (new_stmt, srcvar);\n \t      gimple_set_vuse (new_stmt, gimple_vuse (stmt));\n \t      gsi_insert_before (gsi, new_stmt, GSI_SAME_STMT);\n@@ -1535,10 +1544,7 @@ gimple_fold_builtin_strchr (gimple_stmt_iterator *gsi, bool is_strrchr)\n   gimple_seq stmts = NULL;\n   gimple *new_stmt = gimple_build_call (strlen_fn, 1, str);\n   gimple_set_location (new_stmt, loc);\n-  if (gimple_in_ssa_p (cfun))\n-    len = make_ssa_name (size_type_node);\n-  else\n-    len = create_tmp_reg (size_type_node);\n+  len = create_tmp_reg_or_ssa_name (size_type_node);\n   gimple_call_set_lhs (new_stmt, len);\n   gimple_seq_add_stmt_without_update (&stmts, new_stmt);\n \n@@ -1611,10 +1617,7 @@ gimple_fold_builtin_strcat (gimple_stmt_iterator *gsi, tree dst, tree src)\n   gimple_seq stmts = NULL, stmts2;\n   gimple *repl = gimple_build_call (strlen_fn, 1, dst);\n   gimple_set_location (repl, loc);\n-  if (gimple_in_ssa_p (cfun))\n-    newdst = make_ssa_name (size_type_node);\n-  else\n-    newdst = create_tmp_reg (size_type_node);\n+  newdst = create_tmp_reg_or_ssa_name (size_type_node);\n   gimple_call_set_lhs (repl, newdst);\n   gimple_seq_add_stmt_without_update (&stmts, repl);\n \n@@ -6376,10 +6379,7 @@ gimple_build (gimple_seq *seq, location_t loc,\n   tree res = gimple_simplify (code, type, op0, seq, gimple_build_valueize);\n   if (!res)\n     {\n-      if (gimple_in_ssa_p (cfun))\n-\tres = make_ssa_name (type);\n-      else\n-\tres = create_tmp_reg (type);\n+      res = create_tmp_reg_or_ssa_name (type);\n       gimple *stmt;\n       if (code == REALPART_EXPR\n \t  || code == IMAGPART_EXPR\n@@ -6405,10 +6405,7 @@ gimple_build (gimple_seq *seq, location_t loc,\n   tree res = gimple_simplify (code, type, op0, op1, seq, gimple_build_valueize);\n   if (!res)\n     {\n-      if (gimple_in_ssa_p (cfun))\n-\tres = make_ssa_name (type);\n-      else\n-\tres = create_tmp_reg (type);\n+      res = create_tmp_reg_or_ssa_name (type);\n       gimple *stmt = gimple_build_assign (res, code, op0, op1);\n       gimple_set_location (stmt, loc);\n       gimple_seq_add_stmt_without_update (seq, stmt);\n@@ -6429,10 +6426,7 @@ gimple_build (gimple_seq *seq, location_t loc,\n \t\t\t      seq, gimple_build_valueize);\n   if (!res)\n     {\n-      if (gimple_in_ssa_p (cfun))\n-\tres = make_ssa_name (type);\n-      else\n-\tres = create_tmp_reg (type);\n+      res = create_tmp_reg_or_ssa_name (type);\n       gimple *stmt;\n       if (code == BIT_FIELD_REF)\n \tstmt = gimple_build_assign (res, code,\n@@ -6462,10 +6456,7 @@ gimple_build (gimple_seq *seq, location_t loc,\n       gimple *stmt = gimple_build_call (decl, 1, arg0);\n       if (!VOID_TYPE_P (type))\n \t{\n-\t  if (gimple_in_ssa_p (cfun))\n-\t    res = make_ssa_name (type);\n-\t  else\n-\t    res = create_tmp_reg (type);\n+\t  res = create_tmp_reg_or_ssa_name (type);\n \t  gimple_call_set_lhs (stmt, res);\n \t}\n       gimple_set_location (stmt, loc);\n@@ -6491,10 +6482,7 @@ gimple_build (gimple_seq *seq, location_t loc,\n       gimple *stmt = gimple_build_call (decl, 2, arg0, arg1);\n       if (!VOID_TYPE_P (type))\n \t{\n-\t  if (gimple_in_ssa_p (cfun))\n-\t    res = make_ssa_name (type);\n-\t  else\n-\t    res = create_tmp_reg (type);\n+\t  res = create_tmp_reg_or_ssa_name (type);\n \t  gimple_call_set_lhs (stmt, res);\n \t}\n       gimple_set_location (stmt, loc);\n@@ -6522,10 +6510,7 @@ gimple_build (gimple_seq *seq, location_t loc,\n       gimple *stmt = gimple_build_call (decl, 3, arg0, arg1, arg2);\n       if (!VOID_TYPE_P (type))\n \t{\n-\t  if (gimple_in_ssa_p (cfun))\n-\t    res = make_ssa_name (type);\n-\t  else\n-\t    res = create_tmp_reg (type);\n+\t  res = create_tmp_reg_or_ssa_name (type);\n \t  gimple_call_set_lhs (stmt, res);\n \t}\n       gimple_set_location (stmt, loc);"}]}