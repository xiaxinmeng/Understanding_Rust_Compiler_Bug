{"sha": "f4e7200b1df3dde7d2d9cec8861c6567356db40f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRlNzIwMGIxZGYzZGRlN2QyZDljZWM4ODYxYzY1NjczNTZkYjQwZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-21T22:21:40Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-21T22:21:40Z"}, "message": "runtime: inline and remove eqtype\n    \n    Now that type equality is just a pointer equality, write it\n    inlined and remove the eqtype function.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/182978\n\nFrom-SVN: r272578", "tree": {"sha": "0228f7d9bd47636d53adb5a8e0cc2ec7f110184a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0228f7d9bd47636d53adb5a8e0cc2ec7f110184a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4e7200b1df3dde7d2d9cec8861c6567356db40f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e7200b1df3dde7d2d9cec8861c6567356db40f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e7200b1df3dde7d2d9cec8861c6567356db40f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e7200b1df3dde7d2d9cec8861c6567356db40f/comments", "author": null, "committer": null, "parents": [{"sha": "0514cb33749fefd2542e7294a35d0ef0ccae30b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0514cb33749fefd2542e7294a35d0ef0ccae30b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0514cb33749fefd2542e7294a35d0ef0ccae30b3"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "13e366a78c12b8c6f708fb6b73ca336826f0ade6", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e7200b1df3dde7d2d9cec8861c6567356db40f/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e7200b1df3dde7d2d9cec8861c6567356db40f/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=f4e7200b1df3dde7d2d9cec8861c6567356db40f", "patch": "@@ -1,4 +1,4 @@\n-5bca69ab3b41df535193474baecc3a8a4c0b3dbe\n+fdf0af774aabb31ba8a62f358b7b40dfe8b35da9\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "ec951e38cf51cabfab3b6ae5c88a0fff8dd03687", "filename": "libgo/go/runtime/alg.go", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e7200b1df3dde7d2d9cec8861c6567356db40f/libgo%2Fgo%2Fruntime%2Falg.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e7200b1df3dde7d2d9cec8861c6567356db40f/libgo%2Fgo%2Fruntime%2Falg.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Falg.go?ref=f4e7200b1df3dde7d2d9cec8861c6567356db40f", "patch": "@@ -205,7 +205,7 @@ func nilinterequal(p, q unsafe.Pointer) bool {\n }\n func efaceeq(x, y eface) bool {\n \tt := x._type\n-\tif !eqtype(t, y._type) {\n+\tif t != y._type {\n \t\treturn false\n \t}\n \tif t == nil {\n@@ -229,7 +229,7 @@ func ifaceeq(x, y iface) bool {\n \t\treturn false\n \t}\n \tt := *(**_type)(xtab)\n-\tif !eqtype(t, *(**_type)(y.tab)) {\n+\tif t != *(**_type)(y.tab) {\n \t\treturn false\n \t}\n \teq := t.equalfn\n@@ -247,7 +247,7 @@ func ifacevaleq(x iface, t *_type, p unsafe.Pointer) bool {\n \t\treturn false\n \t}\n \txt := *(**_type)(x.tab)\n-\tif !eqtype(xt, t) {\n+\tif xt != t {\n \t\treturn false\n \t}\n \teq := t.equalfn\n@@ -268,7 +268,7 @@ func ifaceefaceeq(x iface, y eface) bool {\n \t\treturn false\n \t}\n \txt := *(**_type)(x.tab)\n-\tif !eqtype(xt, y._type) {\n+\tif xt != y._type {\n \t\treturn false\n \t}\n \teq := xt.equalfn\n@@ -285,7 +285,7 @@ func efacevaleq(x eface, t *_type, p unsafe.Pointer) bool {\n \tif x._type == nil {\n \t\treturn false\n \t}\n-\tif !eqtype(x._type, t) {\n+\tif x._type != t {\n \t\treturn false\n \t}\n \teq := t.equalfn"}, {"sha": "d434f9e0afc1c74f5a9716ccd37a05c0011199dc", "filename": "libgo/go/runtime/iface.go", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e7200b1df3dde7d2d9cec8861c6567356db40f/libgo%2Fgo%2Fruntime%2Fiface.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e7200b1df3dde7d2d9cec8861c6567356db40f/libgo%2Fgo%2Fruntime%2Fiface.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fiface.go?ref=f4e7200b1df3dde7d2d9cec8861c6567356db40f", "patch": "@@ -233,7 +233,7 @@ func (m *itab) init() string {\n \t\t\tri++\n \t\t}\n \n-\t\tif !eqtype(lhsMethod.typ, rhsMethod.mtyp) {\n+\t\tif lhsMethod.typ != rhsMethod.mtyp {\n \t\t\tm.methods[1] = nil\n \t\t\treturn *lhsMethod.name\n \t\t}\n@@ -406,7 +406,7 @@ func ifaceI2I2(inter *_type, i iface) (iface, bool) {\n \n // Convert an empty interface to a pointer non-interface type.\n func ifaceE2T2P(t *_type, e eface) (unsafe.Pointer, bool) {\n-\tif !eqtype(t, e._type) {\n+\tif t != e._type {\n \t\treturn nil, false\n \t} else {\n \t\treturn e.data, true\n@@ -415,7 +415,7 @@ func ifaceE2T2P(t *_type, e eface) (unsafe.Pointer, bool) {\n \n // Convert a non-empty interface to a pointer non-interface type.\n func ifaceI2T2P(t *_type, i iface) (unsafe.Pointer, bool) {\n-\tif i.tab == nil || !eqtype(t, *(**_type)(i.tab)) {\n+\tif i.tab == nil || t != *(**_type)(i.tab) {\n \t\treturn nil, false\n \t} else {\n \t\treturn i.data, true\n@@ -424,7 +424,7 @@ func ifaceI2T2P(t *_type, i iface) (unsafe.Pointer, bool) {\n \n // Convert an empty interface to a non-pointer non-interface type.\n func ifaceE2T2(t *_type, e eface, ret unsafe.Pointer) bool {\n-\tif !eqtype(t, e._type) {\n+\tif t != e._type {\n \t\ttypedmemclr(t, ret)\n \t\treturn false\n \t} else {\n@@ -439,7 +439,7 @@ func ifaceE2T2(t *_type, e eface, ret unsafe.Pointer) bool {\n \n // Convert a non-empty interface to a non-pointer non-interface type.\n func ifaceI2T2(t *_type, i iface, ret unsafe.Pointer) bool {\n-\tif i.tab == nil || !eqtype(t, *(**_type)(i.tab)) {\n+\tif i.tab == nil || t != *(**_type)(i.tab) {\n \t\ttypedmemclr(t, ret)\n \t\treturn false\n \t} else {\n@@ -485,7 +485,7 @@ func ifaceT2Ip(to, from *_type) bool {\n \t\t\tri++\n \t\t}\n \n-\t\tif !eqtype(fromMethod.mtyp, toMethod.typ) {\n+\t\tif fromMethod.mtyp != toMethod.typ {\n \t\t\treturn false\n \t\t}\n "}, {"sha": "8af6246367257367defcaee40d7020b1e5ede50a", "filename": "libgo/go/runtime/type.go", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e7200b1df3dde7d2d9cec8861c6567356db40f/libgo%2Fgo%2Fruntime%2Ftype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e7200b1df3dde7d2d9cec8861c6567356db40f/libgo%2Fgo%2Fruntime%2Ftype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Ftype.go?ref=f4e7200b1df3dde7d2d9cec8861c6567356db40f", "patch": "@@ -48,11 +48,6 @@ func (t *_type) pkgpath() string {\n \treturn \"\"\n }\n \n-// Return whether two type descriptors are equal.\n-func eqtype(t1, t2 *_type) bool {\n-\treturn t1 == t2\n-}\n-\n type method struct {\n \tname    *string\n \tpkgPath *string"}]}