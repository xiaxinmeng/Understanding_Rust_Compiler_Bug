{"sha": "5c162a8a5cdbf16e6e98b45426f2c06e8958ff06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMxNjJhOGE1Y2RiZjE2ZTZlOThiNDU0MjZmMmMwNmU4OTU4ZmYwNg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-10-18T04:14:19Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-10-18T04:14:19Z"}, "message": "pa.md (reload_insi, [...]): Expanders deleted.\n\n\t* pa.md (reload_insi, reload_outsi): Expanders deleted.\n\t(reload_indf, reload_outdf, reload_indi, reload_outdi): Likewise.\n\t(reload_insf, reload_outsf): Likewise.\n\nFrom-SVN: r8298", "tree": {"sha": "a48d1b2f09b4591441b875812b6cc0f8e5390d2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a48d1b2f09b4591441b875812b6cc0f8e5390d2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c162a8a5cdbf16e6e98b45426f2c06e8958ff06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c162a8a5cdbf16e6e98b45426f2c06e8958ff06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c162a8a5cdbf16e6e98b45426f2c06e8958ff06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c162a8a5cdbf16e6e98b45426f2c06e8958ff06/comments", "author": null, "committer": null, "parents": [{"sha": "bccef0116a25e141fe7e8e145b000de73895368b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bccef0116a25e141fe7e8e145b000de73895368b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bccef0116a25e141fe7e8e145b000de73895368b"}], "stats": {"total": 129, "additions": 0, "deletions": 129}, "files": [{"sha": "74fcbf0e9c6951f1cfcfb86a98ad29a6a28890e9", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 0, "deletions": 129, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c162a8a5cdbf16e6e98b45426f2c06e8958ff06/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c162a8a5cdbf16e6e98b45426f2c06e8958ff06/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=5c162a8a5cdbf16e6e98b45426f2c06e8958ff06", "patch": "@@ -951,39 +951,6 @@\n     DONE;\n }\")\n \n-;; Reloading an SImode or DImode value requires a scratch register if\n-;; going in to or out of float point registers.\n-\n-(define_expand \"reload_insi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=Z\")\n-\t(match_operand:SI 1 \"general_operand\" \"\"))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"=&r\"))]\n-  \"\"\n-  \"\n-{\n-  if (emit_move_sequence (operands, SImode, operands[2]))\n-    DONE;\n-\n-  /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx (SET, VOIDmode, operands[0], operands[1]));\n-  DONE;\n-}\")\n-\n-(define_expand \"reload_outsi\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"\")\n-\t(match_operand:SI 1  \"register_operand\" \"Z\"))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"=&r\"))]\n-  \"\"\n-  \"\n-{\n-  if (emit_move_sequence (operands, SImode, operands[2]))\n-    DONE;\n-\n-  /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx (SET, VOIDmode, operands[0], operands[1]));\n-  DONE;\n-}\")\n-\n ;;; pic symbol references\n \n (define_insn \"\"\n@@ -1480,39 +1447,6 @@\n     DONE;\n }\")\n \n-;; Reloading an SImode or DImode value requires a scratch register if\n-;; going in to or out of float point registers.\n-\n-(define_expand \"reload_indf\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=Z\")\n-\t(match_operand:DF 1 \"general_operand\" \"\"))\n-   (clobber (match_operand:DF 2 \"register_operand\" \"=&r\"))]\n-  \"\"\n-  \"\n-{\n-  if (emit_move_sequence (operands, DFmode, operands[2]))\n-    DONE;\n-\n-  /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx (SET, VOIDmode, operands[0], operands[1]));\n-  DONE;\n-}\")\n-\n-(define_expand \"reload_outdf\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"\")\n-\t(match_operand:DF 1  \"register_operand\" \"Z\"))\n-   (clobber (match_operand:DF 2 \"register_operand\" \"=&r\"))]\n-  \"\"\n-  \"\n-{\n-  if (emit_move_sequence (operands, DFmode, operands[2]))\n-    DONE;\n-\n-  /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx (SET, VOIDmode, operands[0], operands[1]));\n-  DONE;\n-}\")\n-\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"reg_or_nonsymb_mem_operand\"\n \t\t\t  \"=f,*r,Q,?o,?Q,f,*&r,*&r\")\n@@ -1618,36 +1552,6 @@\n     DONE;\n }\")\n \n-(define_expand \"reload_indi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n-\t(match_operand:DI 1 \"general_operand\" \"\"))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"=&r\"))]\n-  \"\"\n-  \"\n-{\n-  if (emit_move_sequence (operands, DImode, operands[2]))\n-    DONE;\n-\n-  /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx (SET, VOIDmode, operands[0], operands[1]));\n-  DONE;\n-}\")\n-\n-(define_expand \"reload_outdi\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"\")\n-\t(match_operand:DI 1 \"register_operand\" \"f\"))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"=&r\"))]\n-  \"\"\n-  \"\n-{\n-  if (emit_move_sequence (operands, DImode, operands[2]))\n-    DONE;\n-\n-  /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx (SET, VOIDmode, operands[0], operands[1]));\n-  DONE;\n-}\")\n-\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(high:DI (match_operand 1 \"\" \"\")))]\n@@ -1753,39 +1657,6 @@\n     DONE;\n }\")\n \n-;; Reloading an SImode or DImode value requires a scratch register if\n-;; going in to or out of float point registers.\n-\n-(define_expand \"reload_insf\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=Z\")\n-\t(match_operand:SF 1 \"general_operand\" \"\"))\n-   (clobber (match_operand:SF 2 \"register_operand\" \"=&r\"))]\n-  \"\"\n-  \"\n-{\n-  if (emit_move_sequence (operands, SFmode, operands[2]))\n-    DONE;\n-\n-  /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx (SET, VOIDmode, operands[0], operands[1]));\n-  DONE;\n-}\")\n-\n-(define_expand \"reload_outsf\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"\")\n-\t(match_operand:SF 1  \"register_operand\" \"Z\"))\n-   (clobber (match_operand:SF 2 \"register_operand\" \"=&r\"))]\n-  \"\"\n-  \"\n-{\n-  if (emit_move_sequence (operands, SFmode, operands[2]))\n-    DONE;\n-\n-  /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx (SET, VOIDmode, operands[0], operands[1]));\n-  DONE;\n-}\")\n-\n (define_insn \"\"\n   [(set (match_operand:SF 0 \"reg_or_nonsymb_mem_operand\"\n \t\t\t  \"=f,r,f,r,Q,Q\")"}]}