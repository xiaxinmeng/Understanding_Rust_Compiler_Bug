{"sha": "d0e4cdb48b75434f27e6874c5b7c386eb167f340", "node_id": "C_kwDOANBUbNoAKGQwZTRjZGI0OGI3NTQzNGYyN2U2ODc0YzViN2MzODZlYjE2N2YzNDA", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-23T00:17:30Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-23T00:17:30Z"}, "message": "Daily bump.", "tree": {"sha": "f0eb61aee9cb51bf6ff14bfef4429b1f77e99d26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0eb61aee9cb51bf6ff14bfef4429b1f77e99d26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0e4cdb48b75434f27e6874c5b7c386eb167f340", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e4cdb48b75434f27e6874c5b7c386eb167f340", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e4cdb48b75434f27e6874c5b7c386eb167f340", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e4cdb48b75434f27e6874c5b7c386eb167f340/comments", "author": null, "committer": null, "parents": [{"sha": "ee86077c2c2e38376cb5a575af62e9187c98e8df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee86077c2c2e38376cb5a575af62e9187c98e8df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee86077c2c2e38376cb5a575af62e9187c98e8df"}], "stats": {"total": 468, "additions": 467, "deletions": 1}, "files": [{"sha": "4e377b4a91c54bbe5ec7cfbf216e8f690f7d594a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e4cdb48b75434f27e6874c5b7c386eb167f340/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e4cdb48b75434f27e6874c5b7c386eb167f340/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0e4cdb48b75434f27e6874c5b7c386eb167f340", "patch": "@@ -1,3 +1,109 @@\n+2022-11-22  Jeff Law  <jlaw@ventanamicro.com>\n+\n+\t* tree-ssa-dom.cc (record_edge_info): Fix thinko in last commit.\n+\n+2022-11-22  Jeff Law  <jlaw@ventanamicro.com>\n+\n+\t* tree-ssa-dom.cc (record_edge_info): Fix comment typos.\n+\n+2022-11-22  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* config/riscv/riscv.cc (riscv_get_separate_components): Do not\n+\tdo shrink-wrapping for a frame with a variable size.\n+\n+2022-11-22  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\t* tree-object-size.cc (todo): New variable.\n+\t(object_sizes_execute): Use it.\n+\t(strdup_object_size): New function.\n+\t(call_object_size): Use it.\n+\n+2022-11-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-loop-distribution.cc (loop_distribution::classify_builtin_ldst):\n+\tBail out if source and destination do not have the same storage order.\n+\n+2022-11-22  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-sra.cc (ipa_sra_dump_all_summaries): Dump edge summaries even\n+\tfor non-candidates.\n+\n+2022-11-22  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-cp.cc (push_agg_values_from_edge): Do not consider constants\n+\tin unused aggregate parameters.\n+\n+2022-11-22  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-param-manipulation.h (ipa_param_body_adjustments): Removed\n+\tmember m_split_modifications_p.\n+\t* ipa-param-manipulation.cc\n+\t(ipa_param_body_adjustments::common_initialization): Do not set\n+\tm_split_modifications_p.\n+\t(ipa_param_body_adjustments::ipa_param_body_adjustments): Remove\n+\tinitializations of m_split_modifications_p.\n+\t(ipa_param_body_adjustments::modify_call_stmt): Check that\n+\tm_replacements is empty instead of m_split_modifications_p.\n+\n+2022-11-22  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/107661\n+\t* ipa-cp.cc (push_agg_values_from_edge): New parameter\n+\toptimize_self_recursion, use it to decide whether to pass interim to\n+\tthe helper function.\n+\t(find_aggregate_values_for_callers_subset): Pass true in the new\n+\tparameter of push_agg_values_from_edge.\n+\t(cgraph_edge_brings_all_agg_vals_for_node): Pass false in the new\n+\tparameter of push_agg_values_from_edge.\n+\n+2022-11-22  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-builtins.def (FIRST_CALL_THIS_THREAD_P,\n+\tGET_STACK_LIMIT): Add new builtins.\n+\t* config/gcn/gcn.cc (gcn_expand_builtin_1): Expand them.\n+\t* config/gcn/gcn.md (prologue_use): Add \"register_operand\" as\n+\targ to match_operand.\n+\t(prologue_use_di): New; DI insn_and_split variant of the former.\n+\n+2022-11-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107803\n+\t* tree-ssa-propagate.cc (substitute_and_fold_dom_walker): Add\n+\tneed_ab_cleanup member.\n+\t(substitute_and_fold_dom_walker::before_dom_children): When\n+\ta stmt can no longer transfer control flow abnormally set\n+\tneed_ab_cleanup.\n+\t(substitute_and_fold_engine::substitute_and_fold): Cleanup\n+\tabnormal control flow.\n+\n+2022-11-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107672\n+\t* tree-vect-stmts.cc (supportable_widening_operation): Avoid\n+\ttype_for_mode on vector modes.\n+\n+2022-11-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107766\n+\t* tree-vect-slp-patterns.cc (complex_mul_pattern::matches):\n+\tUse *node to check for FP vector types.\n+\n+2022-11-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/mmx.md (*mov<mode>_internal): Add\n+\tix86_hard_reg_move_ok to condition.\n+\n+2022-11-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/i386.cc (ix86_can_change_mode_class): Also guard\n+\tsize of TO.\n+\t(ix86_hard_regno_mode_ok): Remove VALID_AVX512FP16_SCALAR_MODE\n+\t* config/i386/i386.h (VALID_AVX512FP16_SCALAR_MODE): Merged to\n+\t..\n+\t(VALID_AVX512F_SCALAR_MODE): .. this, also add HImode.\n+\t(VALID_SSE_REG_MODE): Add DI/HImode.\n+\n 2022-11-21  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* config/rtems.h (SUBTARGET_CC1_SPEC): Undef and define."}, {"sha": "e3e7816b4eafd845c12799cd9bd2232693f211ab", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e4cdb48b75434f27e6874c5b7c386eb167f340/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e4cdb48b75434f27e6874c5b7c386eb167f340/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=d0e4cdb48b75434f27e6874c5b7c386eb167f340", "patch": "@@ -1 +1 @@\n-20221122\n+20221123"}, {"sha": "cc7e3288fbad4fd1e87910cbd96f96d7bbb9863a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e4cdb48b75434f27e6874c5b7c386eb167f340/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e4cdb48b75434f27e6874c5b7c386eb167f340/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d0e4cdb48b75434f27e6874c5b7c386eb167f340", "patch": "@@ -1,3 +1,30 @@\n+2022-11-22  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Depends_Global): Accept aspects on\n+\tabstract subprograms.\n+\n+2022-11-22  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* frontend.adb (Frontend): Re-enable Validate_Subprogram_Calls.\n+\t* exp_ch6.adb (Check_BIP_Actuals): When in CodePeer mode, do not\n+\tattempt to validate procedures coming from an\n+\tElab_Spec/Elab_Body/Elab_Subp_Body procedure.\n+\n+2022-11-22  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* errout.adb (To_Be_Removed): Decrease total number of errors when\n+\tremoving a warning that has been escalated into error.\n+\t* erroutc.adb (dmsg): Print Warn_Runtime_Raise flag.\n+\n+2022-11-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Make_Tag_Assignment): Fix formatting glitches.\n+\n+2022-11-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* contracts.adb (Build_Subprogram_Contract_Wrapper): Do not fiddle\n+\twith the Was_Expression_Function flag. Move a few lines around.\n+\n 2022-11-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Constant>: Revert"}, {"sha": "d134b0bdffc1d717ca800a79e4f82971ac1aa0d7", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e4cdb48b75434f27e6874c5b7c386eb167f340/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e4cdb48b75434f27e6874c5b7c386eb167f340/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=d0e4cdb48b75434f27e6874c5b7c386eb167f340", "patch": "@@ -1,3 +1,198 @@\n+2022-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107788\n+\t* known-function-manager.cc (known_function_manager::get_match):\n+\tDon't look up fndecls by name when they're not in the root\n+\tnamespace.\n+\n+2022-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107783\n+\t* sm-fd.cc (fd_state_machine::check_for_new_socket_fd): Don't\n+\tcomplain when old state is \"fd-constant\".\n+\t(fd_state_machine::on_listen): Likewise.\n+\t(fd_state_machine::on_accept): Likewise.\n+\n+2022-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107807\n+\t* region-model-impl-calls.cc (register_known_functions): Register\n+\t\"___errno\" and \"__error\" as synonyms  for \"__errno_location\".\n+\n+2022-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.h (class internal_known_function): New.\n+\t(register_varargs_builtins): New decl.\n+\t* engine.cc (exploded_node::on_stmt_pre): Remove\n+\t\"out_terminate_path\" param from call to region_model::on_stmt_pre.\n+\t(feasibility_state::maybe_update_for_edge): Likewise.\n+\t* known-function-manager.cc: Include \"basic-block.h\", \"gimple.h\",\n+\tand \"analyzer/region-model.h\".\n+\t(known_function_manager::known_function_manager): Initialize\n+\tm_combined_fns_arr.\n+\t(known_function_manager::~known_function_manager): Clean up\n+\tm_combined_fns_arr.\n+\t(known_function_manager::get_by_identifier): Make const.\n+\t(known_function_manager::add): New overloaded definitions for\n+\tenum built_in_function and enum internal_fn.\n+\t(known_function_manager::get_by_fndecl): Delete.\n+\t(known_function_manager::get_match): New.\n+\t(known_function_manager::get_internal_fn): New.\n+\t(known_function_manager::get_normal_builtin): New.\n+\t* known-function-manager.h\n+\t(known_function_manager::get_by_identifier): Make private and\n+\tadd const qualifier.\n+\t(known_function_manager::get_by_fndecl): Delete.\n+\t(known_function_manager::add): Add overloaded decls for\n+\tenum built_in_function name and enum internal_fn.\n+\t(known_function_manager::get_match): New decl.\n+\t(known_function_manager::get_internal_fn): New decl.\n+\t(known_function_manager::get_normal_builtin): New decl.\n+\t(known_function_manager::m_combined_fns_arr): New field.\n+\t* region-model-impl-calls.cc (call_details::arg_is_size_p): New.\n+\t(class kf_alloca): New.\n+\t(region_model::impl_call_alloca): Convert to...\n+\t(kf_alloca::impl_call_pre): ...this.\n+\t(kf_analyzer_dump_capacity::matches_call_types_p): Rewrite check\n+\tto use call_details::arg_is_pointer_p.\n+\t(region_model::impl_call_builtin_expect): Convert to...\n+\t(class kf_expect): ...this.\n+\t(class kf_calloc): New, adding check that both arguments are\n+\tsize_t.\n+\t(region_model::impl_call_calloc): Convert to...\n+\t(kf_calloc::impl_call_pre): ...this.\n+\t(kf_connect::matches_call_types_p): Rewrite check to use\n+\tcall_details::arg_is_pointer_p.\n+\t(region_model::impl_call_error): Convert to...\n+\t(class kf_error): ...this, and...\n+\t(kf_error::impl_call_pre): ...this.\n+\t(class kf_fgets): New, adding checks that args 0 and 2 are\n+\tpointers.\n+\t(region_model::impl_call_fgets): Convert to...\n+\t(kf_fgets::impl_call_pre): ...this.\n+\t(class kf_fread): New, adding checks on the argument types.\n+\t(region_model::impl_call_fread): Convert to...\n+\t(kf_fread::impl_call_pre): ...this.\n+\t(class kf_free): New, adding check that the argument is a pointer.\n+\t(region_model::impl_call_free): Convert to...\n+\t(kf_free::impl_call_post): ...this.\n+\t(class kf_getchar): New.\n+\t(class kf_malloc): New, adding check that the argument is a\n+\tsize_t.\n+\t(region_model::impl_call_malloc): Convert to...\n+\t(kf_malloc::impl_call_pre): ...this.\n+\t(class kf_memcpy): New, adding checks on arguments.\n+\t(region_model::impl_call_memcpy): Convert to...\n+\t(kf_memcpy::impl_call_pre): ...this.\n+\t(class kf_memset): New.\n+\t(region_model::impl_call_memset): Convert to...\n+\t(kf_memset::impl_call_pre): ...this.\n+\t(kf_pipe::matches_call_types_p): Rewrite check to use\n+\tcall_details::arg_is_pointer_p.\n+\t(kf_putenv::matches_call_types_p): Likewise.\n+\t(class kf_realloc): New, adding checks on the argument types.\n+\t(region_model::impl_call_realloc): Convert to...\n+\t(kf_realloc::impl_call_post): ...this.\n+\t(class kf_strchr): New.\n+\t(region_model::impl_call_strchr): Convert to...\n+\t(kf_strchr::impl_call_post): ...this.\n+\t(class kf_stack_restore): New.\n+\t(class kf_stack_save): New.\n+\t(class kf_stdio_output_fn): New.\n+\t(class kf_strcpy): New,\n+\t(region_model::impl_call_strcpy): Convert to...\n+\t(kf_strcpy::impl_call_pre): ...this.\n+\t(class kf_strlen): New.\n+\t(region_model::impl_call_strlen): Convert to...\n+\t(kf_strlen::impl_call_pre): ...this.\n+\t(class kf_ubsan_bounds): New.\n+\t(region_model::impl_deallocation_call): Reimplement to avoid call\n+\tto impl_call_free.\n+\t(register_known_functions): Add handlers for IFN_BUILTIN_EXPECT\n+\tand IFN_UBSAN_BOUNDS.  Add handlers for BUILT_IN_ALLOCA,\n+\tBUILT_IN_ALLOCA_WITH_ALIGN, BUILT_IN_CALLOC, BUILT_IN_EXPECT,\n+\tBUILT_IN_EXPECT_WITH_PROBABILITY, BUILT_IN_FPRINTF,\n+\tBUILT_IN_FPRINTF_UNLOCKED, BUILT_IN_FPUTC,\n+\tBUILT_IN_FPUTC_UNLOCKED, BUILT_IN_FPUTS, BUILT_IN_FPUTS_UNLOCKED,\n+\tBUILT_IN_FREE, BUILT_IN_FWRITE, BUILT_IN_FWRITE_UNLOCKED,\n+\tBUILT_IN_MALLOC, BUILT_IN_MEMCPY, BUILT_IN_MEMCPY_CHK,\n+\tBUILT_IN_MEMSET, BUILT_IN_MEMSET_CHK, BUILT_IN_PRINTF,\n+\tBUILT_IN_PRINTF_UNLOCKED, BUILT_IN_PUTC, BUILT_IN_PUTCHAR,\n+\tBUILT_IN_PUTCHAR_UNLOCKED, BUILT_IN_PUTC_UNLOCKED, BUILT_IN_PUTS,\n+\tBUILT_IN_PUTS_UNLOCKED, BUILT_IN_REALLOC, BUILT_IN_STACK_RESTORE,\n+\tBUILT_IN_STACK_SAVE, BUILT_IN_STRCHR, BUILT_IN_STRCPY,\n+\tBUILT_IN_STRCPY_CHK, BUILT_IN_STRLEN, BUILT_IN_VFPRINTF, and\n+\tBUILT_IN_VPRINTF. Call register_varargs_builtins.  Add handlers\n+\tfor \"getchar\", \"memset\", \"fgets\", \"fgets_unlocked\", \"fread\",\n+\t\"error\", and \"error_at_line\".\n+\t* region-model.cc (region_model::on_stmt_pre): Drop\n+\t\"out_terminate_path\" param.\n+\t(region_model::get_known_function): Reimplement by calling\n+\tknown_function_manager::get_match, passing new \"cd\" param.\n+\tAdd overload taking enum internal_fn.\n+\t(region_model::on_call_pre): Drop \"out_terminate_path\" param.\n+\tRemove special-case handling of internal fns IFN_BUILTIN_EXPECT,\n+\tIFN_UBSAN_BOUNDS, and IFN_VA_ARG, of built-in fns BUILT_IN_ALLOCA,\n+\tBUILT_IN_ALLOCA_WITH_ALIGN, BUILT_IN_CALLOC, BUILT_IN_EXPECT,\n+\tBUILT_IN_EXPECT_WITH_PROBABILITY, BUILT_IN_FREE, BUILT_IN_MALLOC,\n+\tBUILT_IN_MEMCPY, BUILT_IN_MEMCPY_CHK, BUILT_IN_MEMSET,\n+\tBUILT_IN_MEMSET_CHK, BUILT_IN_REALLOC, BUILT_IN_STRCHR,\n+\tBUILT_IN_STRCPY, BUILT_IN_STRCPY_CHK, BUILT_IN_STRLEN,\n+\tBUILT_IN_STACK_SAVE, BUILT_IN_STACK_RESTORE, BUILT_IN_FPRINTF,\n+\tBUILT_IN_FPRINTF_UNLOCKED, BUILT_IN_PUTC, BUILT_IN_PUTC_UNLOCKED,\n+\tBUILT_IN_FPUTC, BUILT_IN_FPUTC_UNLOCKED, BUILT_IN_FPUTS,\n+\tBUILT_IN_FPUTS_UNLOCKED, BUILT_IN_FWRITE,\n+\tBUILT_IN_FWRITE_UNLOCKED, BUILT_IN_PRINTF,\n+\tBUILT_IN_PRINTF_UNLOCKED, BUILT_IN_PUTCHAR,\n+\tBUILT_IN_PUTCHAR_UNLOCKED, BUILT_IN_PUTS, BUILT_IN_PUTS_UNLOCKED,\n+\tBUILT_IN_VFPRINTF, BUILT_IN_VPRINTF, BUILT_IN_VA_START, and\n+\tBUILT_IN_VA_COPY, and of named functions \"malloc\", \"calloc\",\n+\t\"alloca\", \"realloc\", \"error\", \"error_at_line\", \"fgets\",\n+\t\"fgets_unlocked\", \"fread\", \"getchar\", \"memset\", \"strchr\", and\n+\t\"strlen\".  Replace all this special-casing with calls to\n+\tget_known_function for internal fns and for fn decls.\n+\t(region_model::on_call_post): Remove special-casing handling for\n+\t\"free\" and \"strchr\", and for BUILT_IN_REALLOC, BUILT_IN_STRCHR,\n+\tand BUILT_IN_VA_END.  Replace by consolidating on usage of\n+\tget_known_function.\n+\t* region-model.h (call_details::arg_is_size_p): New.\n+\t(region_model::on_stmt_pre): Drop \"out_terminate_path\" param.\n+\t(region_model::on_call_pre): Likewise.\n+\t(region_model::impl_call_alloca): Delete.\n+\t(region_model::impl_call_builtin_expect): Delete.\n+\t(region_model::impl_call_calloc): Delete.\n+\t(region_model::impl_call_error): Delete.\n+\t(region_model::impl_call_fgets): Delete.\n+\t(region_model::impl_call_fread): Delete.\n+\t(region_model::impl_call_free): Delete.\n+\t(region_model::impl_call_malloc): Delete.\n+\t(region_model::impl_call_memcpy): Delete.\n+\t(region_model::impl_call_memset): Delete.\n+\t(region_model::impl_call_realloc): Delete.\n+\t(region_model::impl_call_strchr): Delete.\n+\t(region_model::impl_call_strcpy): Delete.\n+\t(region_model::impl_call_strlen): Delete.\n+\t(region_model::impl_call_va_start): Delete.\n+\t(region_model::impl_call_va_copy): Delete.\n+\t(region_model::impl_call_va_arg): Delete.\n+\t(region_model::impl_call_va_end): Delete.\n+\t(region_model::check_region_for_write): Public.\n+\t(region_model::get_known_function): Add \"cd\" param.  Add\n+\toverloaded decl taking enum internal_fn.\n+\t* sm-malloc.cc: Update comments.\n+\t* varargs.cc (class kf_va_start): New.\n+\t(region_model::impl_call_va_start): Convert to...\n+\t(kf_va_start::impl_call_pre): ...this.\n+\t(class kf_va_copy): New.\n+\t(region_model::impl_call_va_copy): Convert to...\n+\t(kf_va_copy::impl_call_pre): ...this.\n+\t(class kf_va_arg): New.\n+\t(region_model::impl_call_va_arg): Convert to...\n+\t(kf_va_arg::impl_call_pre): ...this.\n+\t(class kf_va_end): New.\n+\t(region_model::impl_call_va_end): Delete.\n+\t(register_varargs_builtins): New.\n+\n 2022-11-22  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/107788"}, {"sha": "a8c08ca48a830a973cf7f4158ea179c09b2a3c2f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e4cdb48b75434f27e6874c5b7c386eb167f340/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e4cdb48b75434f27e6874c5b7c386eb167f340/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d0e4cdb48b75434f27e6874c5b7c386eb167f340", "patch": "@@ -1,3 +1,16 @@\n+2022-11-22  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/107781\n+\t* contracts.cc (role_name_equal): Use strcspn instead\n+\tof strchrnul.\n+\n+2022-11-22  Jason Merrill  <jason@redhat.com>\n+\n+\t* contracts.cc (build_contract_condition_function):\n+\tSet DECL_ARTIFICIAL on return value parm.\n+\t* g++spec.cc (lang_specific_driver): Add -lstdc++exp\n+\tjust before -lstdc++.\n+\n 2022-11-20  Patrick Palka  <ppalka@redhat.com>\n \n \t* constraint.cc (struct norm_entry): Define."}, {"sha": "792dd07778283e280e3dc6d2675fc3a646ea3b52", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e4cdb48b75434f27e6874c5b7c386eb167f340/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e4cdb48b75434f27e6874c5b7c386eb167f340/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0e4cdb48b75434f27e6874c5b7c386eb167f340", "patch": "@@ -1,3 +1,108 @@\n+2022-11-22  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\t* gcc.dg/builtin-dynamic-object-size-0.c (test_strdup,\n+\ttest_strndup, test_strdup_min, test_strndup_min): New tests.\n+\t(main): Call them.\n+\t* gcc.dg/builtin-dynamic-object-size-1.c: Silence overread\n+\twarnings.\n+\t* gcc.dg/builtin-dynamic-object-size-2.c: Likewise.\n+\t* gcc.dg/builtin-dynamic-object-size-3.c: Likewise.\n+\t* gcc.dg/builtin-dynamic-object-size-4.c: Likewise.\n+\t* gcc.dg/builtin-object-size-1.c: Silence overread warnings.\n+\tDeclare free, strdup and strndup.\n+\t(test11): New test.\n+\t(main): Call it.\n+\t* gcc.dg/builtin-object-size-2.c: Silence overread warnings.\n+\tDeclare free, strdup and strndup.\n+\t(test9): New test.\n+\t(main): Call it.\n+\t* gcc.dg/builtin-object-size-3.c: Silence overread warnings.\n+\tDeclare free, strdup and strndup.\n+\t(test11): New test.\n+\t(main): Call it.\n+\t* gcc.dg/builtin-object-size-4.c: Silence overread warnings.\n+\tDeclare free, strdup and strndup.\n+\t(test9): New test.\n+\t(main): Call it.\n+\n+2022-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107788\n+\t* g++.dg/analyzer/named-functions.C: New test.\n+\n+2022-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107783\n+\t* gcc.dg/analyzer/fd-accept.c (test_accept_on_constant): New.\n+\t* gcc.dg/analyzer/fd-bind.c (test_bind_on_constant): New.\n+\t* gcc.dg/analyzer/fd-connect.c (test_connect_on_constant): New.\n+\t* gcc.dg/analyzer/fd-listen.c (test_listen_on_connected_socket):\n+\tFix typo.\n+\t(test_listen_on_constant): New.\n+\n+2022-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107807\n+\t* gcc.dg/analyzer/errno-___errno.c: New test.\n+\t* gcc.dg/analyzer/errno-__error.c: New test.\n+\t* gcc.dg/analyzer/errno-global-var.c: New test.\n+\n+2022-11-22  Maciej W. Rozycki  <macro@embecosm.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_mpaired_single): Add `args' argument and\n+\tpass it to `check_no_compiler_messages' replacing\n+\t`-mpaired-single'.\n+\t(add_options_for_mips_loongson_mmi): Add `args' argument and\n+\tpass it to `check_no_compiler_messages'.\n+\t(check_effective_target_mips_msa): Add `args' argument and pass\n+\tit to `check_no_compiler_messages' replacing `-mmsa'.\n+\t(check_effective_target_mpaired_single_runtime)\n+\t(add_options_for_mpaired_single): Pass `-mpaired-single' to\n+\t`check_effective_target_mpaired_single'.\n+\t(check_effective_target_mips_loongson_mmi_runtime)\n+\t(add_options_for_mips_loongson_mmi): Pass `-mloongson-mmi' to\n+\t`check_effective_target_mips_loongson_mmi'.\n+\t(check_effective_target_mips_msa_runtime)\n+\t(add_options_for_mips_msa): Pass `-mmsa' to\n+\t`check_effective_target_mips_msa'.\n+\t(et-is-effective-target): Verify that EFFECTIVE_TARGETS exists\n+\tand if not, just check if the current compilation environment\n+\tsupports the target feature requested.\n+\t(check_vect_support_and_set_flags): Pass `-mpaired-single',\n+\t`-mloongson-mmi', and `-mmsa' to the respective target feature\n+\tchecks.\n+\n+2022-11-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/sso18.adb: New test.\n+\n+2022-11-22  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/107661\n+\t* g++.dg/ipa/pr107661.C: New test.\n+\n+2022-11-22  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\tPR target/107604\n+\t* gcc.target/aarch64/aapcs64/test_dfp_17.c: Fix for big-endian.\n+\n+2022-11-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107803\n+\t* g++.dg/pr107803.C: New testcase.\n+\n+2022-11-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107766\n+\t* g++.dg/vect/pr107766.cc: New testcase.\n+\n+2022-11-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pieces-memset-3.c: Remove xfail.\n+\t* gcc.target/i386/pieces-memset-37.c: Remove xfail.\n+\t* gcc.target/i386/pieces-memset-39.c: Remove xfail.\n+\n 2022-11-22  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/107788"}, {"sha": "bb81f2cf3c77ad2a36f4dc34f9b3192c38e5e878", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e4cdb48b75434f27e6874c5b7c386eb167f340/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e4cdb48b75434f27e6874c5b7c386eb167f340/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d0e4cdb48b75434f27e6874c5b7c386eb167f340", "patch": "@@ -1,3 +1,23 @@\n+2022-11-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/107817\n+\t* include/std/charconv (__from_chars_alnum_to_val): Add\n+\tconstexpr for C++20.\n+\t* include/std/format (__is_digit, __is_xdigit): New functions.\n+\t(_Spec::_S_parse_width_or_precision): Use __is_digit.\n+\t(__formatter_fp::parse): Use __is_xdigit.\n+\n+2022-11-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/106201\n+\t* testsuite/27_io/filesystem/iterators/106201.cc: New test.\n+\n+2022-11-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/107801\n+\t* src/c++17/memory_resource.cc (pool_sizes): Disable large pools\n+\tfor targets with 16-bit int.\n+\n 2022-11-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/functional (_Bind_front0): New class template."}]}