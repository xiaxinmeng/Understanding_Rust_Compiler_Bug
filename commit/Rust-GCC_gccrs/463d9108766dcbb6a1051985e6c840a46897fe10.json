{"sha": "463d9108766dcbb6a1051985e6c840a46897fe10", "node_id": "C_kwDOANBUbNoAKDQ2M2Q5MTA4NzY2ZGNiYjZhMTA1MTk4NWU2Yzg0MGE0Njg5N2ZlMTA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-17T12:39:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-17T12:39:05Z"}, "message": "widening_mul, i386: Improve spaceship expansion on x86 [PR103973]\n\nC++20:\n #include <compare>\n auto cmp4way(double a, double b)\n {\n   return a <=> b;\n }\nexpands to:\n        ucomisd %xmm1, %xmm0\n        jp      .L8\n        movl    $0, %eax\n        jne     .L8\n.L2:\n        ret\n        .p2align 4,,10\n        .p2align 3\n.L8:\n        comisd  %xmm0, %xmm1\n        movl    $-1, %eax\n        ja      .L2\n        ucomisd %xmm1, %xmm0\n        setbe   %al\n        addl    $1, %eax\n        ret\nThat is 3 comparisons of the same operands.\nThe following patch improves it to just one comparison:\n        comisd  %xmm1, %xmm0\n        jp      .L4\n        seta    %al\n        movl    $0, %edx\n        leal    -1(%rax,%rax), %eax\n        cmove   %edx, %eax\n        ret\n.L4:\n        movl    $2, %eax\n        ret\nWhile a <=> b expands to a == b ? 0 : a < b ? -1 : a > b ? 1 : 2\nwhere the first comparison is equality and this shouldn't raise\nexceptions on qNaN operands, if the operands aren't equal (which\nincludes unordered cases), then it immediately performs < or >\ncomparison and that raises exceptions even on qNaNs, so we can just\nperform a single comparison that raises exceptions on qNaN.\nAs the 4 different cases are encoded as\nZF CF PF\n1  1  1  a unordered b\n0  0  0  a > b\n0  1  0  a < b\n1  0  0  a == b\nwe can emit optimal sequence of comparions, first jp\nfor the unordered case, then je for the == case and finally jb\nfor the < case.\n\nThe patch pattern recognizes spaceship-like comparisons during\nwidening_mul if the spaceship optab is implemented, and replaces\nthose comparisons with comparisons of .SPACESHIP ifn which returns\n-1/0/1/2 based on the comparison.  This seems to work well both for the\ncase of just returning the -1/0/1/2 (when we have just a common\nsuccessor with a PHI) or when the different cases are handled with\nvarious other basic blocks.  The testcases cover both of those cases,\nthe latter with different function calls in those.\n\n2022-01-17  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/103973\n\t* tree-cfg.h (cond_only_block_p): Declare.\n\t* tree-ssa-phiopt.c (cond_only_block_p): Move function to ...\n\t* tree-cfg.c (cond_only_block_p): ... here.  No longer static.\n\t* optabs.def (spaceship_optab): New optab.\n\t* internal-fn.def (SPACESHIP): New internal function.\n\t* internal-fn.h (expand_SPACESHIP): Declare.\n\t* internal-fn.c (expand_PHI): Formatting fix.\n\t(expand_SPACESHIP): New function.\n\t* tree-ssa-math-opts.c (optimize_spaceship): New function.\n\t(math_opts_dom_walker::after_dom_children): Use it.\n\t* config/i386/i386.md (spaceship<mode>3): New define_expand.\n\t* config/i386/i386-protos.h (ix86_expand_fp_spaceship): Declare.\n\t* config/i386/i386-expand.c (ix86_expand_fp_spaceship): New function.\n\t* doc/md.texi (spaceship@var{m}3): Document.\n\n\t* gcc.target/i386/pr103973-1.c: New test.\n\t* gcc.target/i386/pr103973-2.c: New test.\n\t* gcc.target/i386/pr103973-3.c: New test.\n\t* gcc.target/i386/pr103973-4.c: New test.\n\t* gcc.target/i386/pr103973-5.c: New test.\n\t* gcc.target/i386/pr103973-6.c: New test.\n\t* gcc.target/i386/pr103973-7.c: New test.\n\t* gcc.target/i386/pr103973-8.c: New test.\n\t* gcc.target/i386/pr103973-9.c: New test.\n\t* gcc.target/i386/pr103973-10.c: New test.\n\t* gcc.target/i386/pr103973-11.c: New test.\n\t* gcc.target/i386/pr103973-12.c: New test.\n\t* gcc.target/i386/pr103973-13.c: New test.\n\t* gcc.target/i386/pr103973-14.c: New test.\n\t* gcc.target/i386/pr103973-15.c: New test.\n\t* gcc.target/i386/pr103973-16.c: New test.\n\t* gcc.target/i386/pr103973-17.c: New test.\n\t* gcc.target/i386/pr103973-18.c: New test.\n\t* gcc.target/i386/pr103973-19.c: New test.\n\t* gcc.target/i386/pr103973-20.c: New test.\n\t* g++.target/i386/pr103973-1.C: New test.\n\t* g++.target/i386/pr103973-2.C: New test.\n\t* g++.target/i386/pr103973-3.C: New test.\n\t* g++.target/i386/pr103973-4.C: New test.\n\t* g++.target/i386/pr103973-5.C: New test.\n\t* g++.target/i386/pr103973-6.C: New test.\n\t* g++.target/i386/pr103973-7.C: New test.\n\t* g++.target/i386/pr103973-8.C: New test.\n\t* g++.target/i386/pr103973-9.C: New test.\n\t* g++.target/i386/pr103973-10.C: New test.\n\t* g++.target/i386/pr103973-11.C: New test.\n\t* g++.target/i386/pr103973-12.C: New test.\n\t* g++.target/i386/pr103973-13.C: New test.\n\t* g++.target/i386/pr103973-14.C: New test.\n\t* g++.target/i386/pr103973-15.C: New test.\n\t* g++.target/i386/pr103973-16.C: New test.\n\t* g++.target/i386/pr103973-17.C: New test.\n\t* g++.target/i386/pr103973-18.C: New test.\n\t* g++.target/i386/pr103973-19.C: New test.\n\t* g++.target/i386/pr103973-20.C: New test.", "tree": {"sha": "5e83cb1ed249317106bf8059c1eb133fdf0cb84f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e83cb1ed249317106bf8059c1eb133fdf0cb84f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/463d9108766dcbb6a1051985e6c840a46897fe10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/463d9108766dcbb6a1051985e6c840a46897fe10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/463d9108766dcbb6a1051985e6c840a46897fe10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/463d9108766dcbb6a1051985e6c840a46897fe10/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4152e4ad3f3a67ce30f5e0e01d5eba03fcff10b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4152e4ad3f3a67ce30f5e0e01d5eba03fcff10b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4152e4ad3f3a67ce30f5e0e01d5eba03fcff10b8"}], "stats": {"total": 1246, "additions": 1220, "deletions": 26}, "files": [{"sha": "5fae4228df21bd30ff73bcdc484efdf15c874532", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -2879,6 +2879,55 @@ ix86_expand_setcc (rtx dest, enum rtx_code code, rtx op0, rtx op1)\n   emit_insn (gen_rtx_SET (dest, ret));\n }\n \n+/* Expand floating point op0 <=> op1, i.e.\n+   dest = op0 == op1 ? 0 : op0 < op1 ? -1 : op0 > op1 ? 1 : 2.  */\n+\n+void\n+ix86_expand_fp_spaceship (rtx dest, rtx op0, rtx op1)\n+{\n+  gcc_checking_assert (ix86_fp_comparison_strategy (GT) != IX86_FPCMP_ARITH);\n+  rtx gt = ix86_expand_fp_compare (GT, op0, op1);\n+  rtx l0 = gen_label_rtx ();\n+  rtx l1 = gen_label_rtx ();\n+  rtx l2 = TARGET_IEEE_FP ? gen_label_rtx () : NULL_RTX;\n+  rtx lend = gen_label_rtx ();\n+  rtx tmp;\n+  rtx_insn *jmp;\n+  if (l2)\n+    {\n+      rtx un = gen_rtx_fmt_ee (UNORDERED, VOIDmode,\n+\t\t\t       gen_rtx_REG (CCFPmode, FLAGS_REG), const0_rtx);\n+      tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, un,\n+\t\t\t\t  gen_rtx_LABEL_REF (VOIDmode, l2), pc_rtx);\n+      jmp = emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n+      add_reg_br_prob_note (jmp, profile_probability:: very_unlikely ());\n+    }\n+  rtx eq = gen_rtx_fmt_ee (UNEQ, VOIDmode,\n+\t\t\t   gen_rtx_REG (CCFPmode, FLAGS_REG), const0_rtx);\n+  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, eq,\n+\t\t\t      gen_rtx_LABEL_REF (VOIDmode, l0), pc_rtx);\n+  jmp = emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n+  add_reg_br_prob_note (jmp, profile_probability::unlikely ());\n+  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, gt,\n+\t\t\t      gen_rtx_LABEL_REF (VOIDmode, l1), pc_rtx);\n+  jmp = emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n+  add_reg_br_prob_note (jmp, profile_probability::even ());\n+  emit_move_insn (dest, constm1_rtx);\n+  emit_jump (lend);\n+  emit_label (l0);\n+  emit_move_insn (dest, const0_rtx);\n+  emit_jump (lend);\n+  emit_label (l1);\n+  emit_move_insn (dest, const1_rtx);\n+  emit_jump (lend);\n+  if (l2)\n+    {\n+      emit_label (l2);\n+      emit_move_insn (dest, const2_rtx);\n+    }\n+  emit_label (lend);\n+}\n+\n /* Expand comparison setting or clearing carry flag.  Return true when\n    successful and set pop for the operation.  */\n static bool"}, {"sha": "a697dd2414226e9c0b07d3a0ea5ae9a4dfcbf541", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -150,6 +150,7 @@ extern bool ix86_expand_int_vec_cmp (rtx[]);\n extern bool ix86_expand_fp_vec_cmp (rtx[]);\n extern void ix86_expand_sse_movcc (rtx, rtx, rtx, rtx);\n extern void ix86_expand_sse_unpack (rtx, rtx, bool, bool);\n+extern void ix86_expand_fp_spaceship (rtx, rtx, rtx);\n extern bool ix86_expand_int_addcc (rtx[]);\n extern rtx_insn *ix86_expand_call (rtx, rtx, rtx, rtx, rtx, bool);\n extern bool ix86_call_use_plt_p (rtx);"}, {"sha": "a2f095eb5c7b8437549e406007c18fe0b41ddf55", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -23886,6 +23886,28 @@\n   [(set_attr \"type\" \"other\")\n    (set_attr \"length\" \"4\")])\n \n+;; Spaceship optimization\n+(define_expand \"spaceship<mode>3\"\n+  [(match_operand:SI 0 \"register_operand\")\n+   (match_operand:MODEF 1 \"cmp_fp_expander_operand\")\n+   (match_operand:MODEF 2 \"cmp_fp_expander_operand\")]\n+  \"(TARGET_80387 || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH))\n+   && (TARGET_CMOVE || (TARGET_SAHF && TARGET_USE_SAHF))\"\n+{\n+  ix86_expand_fp_spaceship (operands[0], operands[1], operands[2]);\n+  DONE;\n+})\n+\n+(define_expand \"spaceshipxf3\"\n+  [(match_operand:SI 0 \"register_operand\")\n+   (match_operand:XF 1 \"nonmemory_operand\")\n+   (match_operand:XF 2 \"nonmemory_operand\")]\n+  \"TARGET_80387 && (TARGET_CMOVE || (TARGET_SAHF && TARGET_USE_SAHF))\"\n+{\n+  ix86_expand_fp_spaceship (operands[0], operands[1], operands[2]);\n+  DONE;\n+})\n+\n (include \"mmx.md\")\n (include \"sse.md\")\n (include \"sync.md\")"}, {"sha": "4dea8bb230401a76689c2f81809b80e90dd865ee", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -8055,6 +8055,15 @@ inclusive and operand 1 exclusive.\n If this pattern is not defined, a call to the library function\n @code{__clear_cache} is used.\n \n+@cindex @code{spaceship@var{m}3} instruction pattern\n+@item @samp{spaceship@var{m}3}\n+Initialize output operand 0 with mode of integer type to -1, 0, 1 or 2\n+if operand 1 with mode @var{m} compares less than operand 2, equal to\n+operand 2, greater than operand 2 or is unordered with operand 2.\n+@var{m} should be a scalar floating point mode.\n+\n+This pattern is not allowed to @code{FAIL}.\n+\n @end table\n \n @end ifset"}, {"sha": "e7f6302aad46150de5f978e39365a6e5abd341ec", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -4425,5 +4425,27 @@ expand_SHUFFLEVECTOR (internal_fn, gcall *)\n void\n expand_PHI (internal_fn, gcall *)\n {\n-    gcc_unreachable ();\n+  gcc_unreachable ();\n+}\n+\n+void\n+expand_SPACESHIP (internal_fn, gcall *stmt)\n+{\n+  tree lhs = gimple_call_lhs (stmt);\n+  tree rhs1 = gimple_call_arg (stmt, 0);\n+  tree rhs2 = gimple_call_arg (stmt, 1);\n+  tree type = TREE_TYPE (rhs1);\n+\n+  rtx target = expand_expr (lhs, NULL_RTX, VOIDmode, EXPAND_WRITE);\n+  rtx op1 = expand_normal (rhs1);\n+  rtx op2 = expand_normal (rhs2);\n+\n+  class expand_operand ops[3];\n+  create_output_operand (&ops[0], target, TYPE_MODE (TREE_TYPE (lhs)));\n+  create_input_operand (&ops[1], op1, TYPE_MODE (type));\n+  create_input_operand (&ops[2], op2, TYPE_MODE (type));\n+  insn_code icode = optab_handler (spaceship_optab, TYPE_MODE (type));\n+  expand_insn (icode, 3, ops);\n+  if (!rtx_equal_p (target, ops[0].value))\n+    emit_move_insn (target, ops[0].value);\n }"}, {"sha": "d2d550d358606022b1cb44fa842f06e0be507bc3", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -430,6 +430,9 @@ DEF_INTERNAL_FN (NOP, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n /* Temporary vehicle for __builtin_shufflevector.  */\n DEF_INTERNAL_FN (SHUFFLEVECTOR, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n \n+/* <=> optimization.  */\n+DEF_INTERNAL_FN (SPACESHIP, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n+\n #undef DEF_INTERNAL_INT_FN\n #undef DEF_INTERNAL_FLT_FN\n #undef DEF_INTERNAL_FLT_FLOATN_FN"}, {"sha": "23c014a963c4d72da92c763db87ee486a2adb485", "filename": "gcc/internal-fn.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Finternal-fn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Finternal-fn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.h?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -241,6 +241,7 @@ extern void expand_internal_call (gcall *);\n extern void expand_internal_call (internal_fn, gcall *);\n extern void expand_PHI (internal_fn, gcall *);\n extern void expand_SHUFFLEVECTOR (internal_fn, gcall *);\n+extern void expand_SPACESHIP (internal_fn, gcall *);\n \n extern bool vectorized_internal_fn_supported_p (internal_fn, tree);\n "}, {"sha": "bb46083b904e8dc92199a3f13fbe7e6442436615", "filename": "gcc/optabs.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -259,6 +259,7 @@ OPTAB_D (usubv4_optab, \"usubv$I$a4\")\n OPTAB_D (umulv4_optab, \"umulv$I$a4\")\n OPTAB_D (negv3_optab, \"negv$I$a3\")\n OPTAB_D (addptr3_optab, \"addptr$a3\")\n+OPTAB_D (spaceship_optab, \"spaceship$a3\")\n \n OPTAB_D (smul_highpart_optab, \"smul$a3_highpart\")\n OPTAB_D (umul_highpart_optab, \"umul$a3_highpart\")"}, {"sha": "77f8b4ea325b7dc99307cafa4677f19fc8255f15", "filename": "gcc/testsuite/g++.target/i386/pr103973-1.C", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-1.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,71 @@\n+// PR target/103973\n+// { dg-do run }\n+// { dg-options \"-O2 -std=c++20 -save-temps\" }\n+// { dg-final { scan-assembler-not \"'\\tucomisd\" { target { ! ia32 } } } }\n+// { dg-final { scan-assembler-times \"\\tcomisd\" 2 { target { ! ia32 } } } }\n+\n+#include <compare>\n+\n+#ifndef double_type\n+#define double_type double\n+#endif\n+\n+__attribute__((noipa)) auto\n+foo (double_type a, double_type b)\n+{\n+  return a <=> b;\n+}\n+\n+__attribute__((noipa)) int\n+bar (double_type a, double_type b)\n+{\n+  auto c = foo (a, b);\n+  if (c == std::partial_ordering::less)\n+    return -1;\n+  if (c == std::partial_ordering::equivalent)\n+    return 0;\n+  if (c == std::partial_ordering::greater)\n+    return 1;\n+  return 2;\n+}\n+\n+__attribute__((noipa)) auto\n+baz (double_type a)\n+{\n+  return a <=> 0.0f;\n+}\n+\n+__attribute__((noipa)) int\n+qux (double_type a)\n+{\n+  auto c = baz (a);\n+  if (c == std::partial_ordering::less)\n+    return -1;\n+  if (c == std::partial_ordering::equivalent)\n+    return 0;\n+  if (c == std::partial_ordering::greater)\n+    return 1;\n+  return 2;\n+}\n+\n+int\n+main ()\n+{\n+  double_type m5 = -5.0;\n+  double_type p5 = 5.0;\n+  volatile double_type p0 = 0.0;\n+  double_type nan = p0 / p0;\n+  if (bar (p5, p5) != 0 || bar (m5, m5) != 0)\n+    __builtin_abort ();\n+  if (bar (m5, p5) != -1 || bar (p5, m5) != 1)\n+    __builtin_abort ();\n+  if (bar (m5, nan) != 2 || bar (nan, p5) != 2)\n+    __builtin_abort ();\n+  if (bar (nan, nan) != 2)\n+    __builtin_abort ();\n+  if (qux (p0) != 0 || qux (nan) != 2)\n+    __builtin_abort ();\n+  if (qux (m5) != -1 || qux (p5) != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "53352f7d0c5df43c4b7fa0193e27b4b6d3465527", "filename": "gcc/testsuite/g++.target/i386/pr103973-10.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-10.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,7 @@\n+// PR target/103973\n+// { dg-do compile { target ia32 } }\n+// { dg-options \"-O2 -march=i686 -mfpmath=387 -std=c++20\" }\n+// { dg-final { scan-assembler-not \"'\\tfucom\" } }\n+// { dg-final { scan-assembler-times \"\\tfcom\" 2 } }\n+\n+#include \"pr103973-9.C\""}, {"sha": "549c1cc002767850b49bb99add277e25c9c56c06", "filename": "gcc/testsuite/g++.target/i386/pr103973-11.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-11.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+// PR target/103973\n+// { dg-do run }\n+// { dg-options \"-O2 -save-temps -std=c++20\" }\n+// { dg-final { scan-assembler-not \"'\\tucomiss\" { target { ! ia32 } } } }\n+// { dg-final { scan-assembler-times \"\\tcomiss\" 2 { target { ! ia32 } } } }\n+\n+#define double_type float\n+#include \"pr103973-9.C\""}, {"sha": "0fefd039f7eb568dc3c3d800998624a899afd6a0", "filename": "gcc/testsuite/g++.target/i386/pr103973-12.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-12.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+// PR target/103973\n+// { dg-do compile { target ia32 } }\n+// { dg-options \"-O2 -march=i686 -mfpmath=387 -std=c++20\" }\n+// { dg-final { scan-assembler-not \"'\\tfucom\" } }\n+// { dg-final { scan-assembler-times \"\\tfcom\" 2 } }\n+\n+#define double_type float\n+#include \"pr103973-9.C\""}, {"sha": "fdd13b99795bbce3909fdacd3b0dadc868e01646", "filename": "gcc/testsuite/g++.target/i386/pr103973-13.C", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-13.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,62 @@\n+// PR target/103973\n+// { dg-do run }\n+// { dg-options \"-O2 -ffast-math -std=c++20 -save-temps\" }\n+// { dg-final { scan-assembler-not \"'\\tucomisd\" { target { ! ia32 } } } }\n+// { dg-final { scan-assembler-times \"\\tcomisd\" 2 { target { ! ia32 } } } }\n+\n+#include <compare>\n+\n+#ifndef double_type\n+#define double_type double\n+#endif\n+\n+__attribute__((noipa)) auto\n+foo (double_type a, double_type b)\n+{\n+  return a <=> b;\n+}\n+\n+__attribute__((noipa)) int\n+bar (double_type a, double_type b)\n+{\n+  auto c = foo (a, b);\n+  if (c == std::partial_ordering::less)\n+    return -1;\n+  if (c == std::partial_ordering::equivalent)\n+    return 0;\n+  return 1;\n+}\n+\n+__attribute__((noipa)) auto\n+baz (double_type a)\n+{\n+  return a <=> 0.0f;\n+}\n+\n+__attribute__((noipa)) int\n+qux (double_type a)\n+{\n+  auto c = baz (a);\n+  if (c == std::partial_ordering::greater)\n+    return 1;\n+  if (c == std::partial_ordering::equivalent)\n+    return 0;\n+  return -1;\n+}\n+\n+int\n+main ()\n+{\n+  double_type m5 = -5.0;\n+  double_type p5 = 5.0;\n+  double_type p0 = 0.0;\n+  if (bar (p5, p5) != 0 || bar (m5, m5) != 0)\n+    __builtin_abort ();\n+  if (bar (m5, p5) != -1 || bar (p5, m5) != 1)\n+    __builtin_abort ();\n+  if (qux (p0) != 0)\n+    __builtin_abort ();\n+  if (qux (m5) != -1 || qux (p5) != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "b4fc6fed79b0ab96173bf414f1292896670ac416", "filename": "gcc/testsuite/g++.target/i386/pr103973-14.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-14.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,7 @@\n+// PR target/103973\n+// { dg-do compile { target ia32 } }\n+// { dg-options \"-O2 -ffast-math -march=i686 -mfpmath=387 -std=c++20\" }\n+// { dg-final { scan-assembler-not \"'\\tfucom\" } }\n+// { dg-final { scan-assembler-times \"\\tfcom\" 2 } }\n+\n+#include \"pr103973-13.C\""}, {"sha": "1b20b12f9348ad28ff153908970a6b845bfde2e7", "filename": "gcc/testsuite/g++.target/i386/pr103973-15.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-15.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+// PR target/103973\n+// { dg-do run }\n+// { dg-options \"-O2 -ffast-math -save-temps -std=c++20\" }\n+// { dg-final { scan-assembler-not \"'\\tucomiss\" { target { ! ia32 } } } }\n+// { dg-final { scan-assembler-times \"\\tcomiss\" 2 { target { ! ia32 } } } }\n+\n+#define double_type float\n+#include \"pr103973-13.C\""}, {"sha": "95b6967eecf5ef7a418d7d711ad846f2531d76d8", "filename": "gcc/testsuite/g++.target/i386/pr103973-16.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-16.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+// PR target/103973\n+// { dg-do compile { target ia32 } }\n+// { dg-options \"-O2 -ffast-math -march=i686 -mfpmath=387 -std=c++20\" }\n+// { dg-final { scan-assembler-not \"'\\tfucom\" } }\n+// { dg-final { scan-assembler-times \"\\tfcom\" 2 } }\n+\n+#define double_type float\n+#include \"pr103973-13.C\""}, {"sha": "f84b5523cce48f98a1b0a930c712068ea2ec91b5", "filename": "gcc/testsuite/g++.target/i386/pr103973-17.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-17.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+// PR target/103973\n+// { dg-do run { target large_long_double } }\n+// { dg-options \"-O2 -std=c++20 -save-temps\" }\n+// { dg-final { scan-assembler-not \"'\\tfucom\" } }\n+// { dg-final { scan-assembler-times \"\\tfcom\" 2 } }\n+\n+#define double_type long double\n+#include \"pr103973-1.C\""}, {"sha": "57ff1f2c8594a0d7ceb3708f92c6498e16e0b394", "filename": "gcc/testsuite/g++.target/i386/pr103973-18.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-18.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+// PR target/103973\n+// { dg-do run { target large_long_double } }\n+// { dg-options \"-O2 -ffast-math -std=c++20 -save-temps\" }\n+// { dg-final { scan-assembler-not \"'\\tfucom\" } }\n+// { dg-final { scan-assembler-times \"\\tfcom\" 2 } }\n+\n+#define double_type long double\n+#include \"pr103973-5.C\""}, {"sha": "b94bcfd704636dff7e5671fb0ae6f17081fc2b95", "filename": "gcc/testsuite/g++.target/i386/pr103973-19.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-19.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+// PR target/103973\n+// { dg-do run { target large_long_double } }\n+// { dg-options \"-O2 -std=c++20 -save-temps\" }\n+// { dg-final { scan-assembler-not \"'\\tfucom\" } }\n+// { dg-final { scan-assembler-times \"\\tfcom\" 2 } }\n+\n+#define double_type long double\n+#include \"pr103973-9.C\""}, {"sha": "be8978e6ddfc5131589bee835f80312e30104c11", "filename": "gcc/testsuite/g++.target/i386/pr103973-2.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-2.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,7 @@\n+// PR target/103973\n+// { dg-do compile { target ia32 } }\n+// { dg-options \"-O2 -march=i686 -mfpmath=387 -std=c++20\" }\n+// { dg-final { scan-assembler-not \"'\\tfucom\" } }\n+// { dg-final { scan-assembler-times \"\\tfcom\" 2 } }\n+\n+#include \"pr103973-1.C\""}, {"sha": "8d5d91943eb8f4872517d95505869c4285c8e913", "filename": "gcc/testsuite/g++.target/i386/pr103973-20.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-20.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+// PR target/103973\n+// { dg-do run { target large_long_double } }\n+// { dg-options \"-O2 -ffast-math -std=c++20 -save-temps\" }\n+// { dg-final { scan-assembler-not \"'\\tfucom\" } }\n+// { dg-final { scan-assembler-times \"\\tfcom\" 2 } }\n+\n+#define double_type long double\n+#include \"pr103973-13.C\""}, {"sha": "3d4476cbc1754b1c51cfff481204677d5a875bb9", "filename": "gcc/testsuite/g++.target/i386/pr103973-3.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-3.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+// PR target/103973\n+// { dg-do run }\n+// { dg-options \"-O2 -save-temps -std=c++20\" }\n+// { dg-final { scan-assembler-not \"'\\tucomiss\" { target { ! ia32 } } } }\n+// { dg-final { scan-assembler-times \"\\tcomiss\" 2 { target { ! ia32 } } } }\n+\n+#define double_type float\n+#include \"pr103973-1.C\""}, {"sha": "5fec7c9713ad289a0b7a221225cd2a8637b0337e", "filename": "gcc/testsuite/g++.target/i386/pr103973-4.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-4.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+// PR target/103973\n+// { dg-do compile { target ia32 } }\n+// { dg-options \"-O2 -march=i686 -mfpmath=387 -std=c++20\" }\n+// { dg-final { scan-assembler-not \"'\\tfucom\" } }\n+// { dg-final { scan-assembler-times \"\\tfcom\" 2 } }\n+\n+#define double_type float\n+#include \"pr103973-1.C\""}, {"sha": "b198fe6ad2c28f1e2deed8e21a79762b112820dd", "filename": "gcc/testsuite/g++.target/i386/pr103973-5.C", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-5.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,66 @@\n+// PR target/103973\n+// { dg-do run }\n+// { dg-options \"-O2 -ffast-math -std=c++20 -save-temps\" }\n+// { dg-final { scan-assembler-not \"'\\tucomisd\" { target { ! ia32 } } } }\n+// { dg-final { scan-assembler-times \"\\tcomisd\" 2 { target { ! ia32 } } } }\n+\n+#include <compare>\n+\n+#ifndef double_type\n+#define double_type double\n+#endif\n+\n+__attribute__((noipa)) auto\n+foo (double_type a, double_type b)\n+{\n+  return a <=> b;\n+}\n+\n+__attribute__((noipa)) int\n+bar (double_type a, double_type b)\n+{\n+  auto c = foo (a, b);\n+  if (c == std::partial_ordering::less)\n+    return -1;\n+  if (c == std::partial_ordering::equivalent)\n+    return 0;\n+  if (c == std::partial_ordering::greater)\n+    return 1;\n+  return 2;\n+}\n+\n+__attribute__((noipa)) auto\n+baz (double_type a)\n+{\n+  return a <=> 0.0f;\n+}\n+\n+__attribute__((noipa)) int\n+qux (double_type a)\n+{\n+  auto c = baz (a);\n+  if (c == std::partial_ordering::less)\n+    return -1;\n+  if (c == std::partial_ordering::equivalent)\n+    return 0;\n+  if (c == std::partial_ordering::greater)\n+    return 1;\n+  return 2;\n+}\n+\n+int\n+main ()\n+{\n+  double_type m5 = -5.0;\n+  double_type p5 = 5.0;\n+  double_type p0 = 0.0;\n+  if (bar (p5, p5) != 0 || bar (m5, m5) != 0)\n+    __builtin_abort ();\n+  if (bar (m5, p5) != -1 || bar (p5, m5) != 1)\n+    __builtin_abort ();\n+  if (qux (p0) != 0)\n+    __builtin_abort ();\n+  if (qux (m5) != -1 || qux (p5) != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "e50fe094305b5666bbcd9f7255f333b52b731dba", "filename": "gcc/testsuite/g++.target/i386/pr103973-6.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-6.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,7 @@\n+// PR target/103973\n+// { dg-do compile { target ia32 } }\n+// { dg-options \"-O2 -ffast-math -march=i686 -mfpmath=387 -std=c++20\" }\n+// { dg-final { scan-assembler-not \"'\\tfucom\" } }\n+// { dg-final { scan-assembler-times \"\\tfcom\" 2 } }\n+\n+#include \"pr103973-5.C\""}, {"sha": "17579610475e8b02e1c57f0e036cd9f03a3b661f", "filename": "gcc/testsuite/g++.target/i386/pr103973-7.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-7.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+// PR target/103973\n+// { dg-do run }\n+// { dg-options \"-O2 -ffast-math -save-temps -std=c++20\" }\n+// { dg-final { scan-assembler-not \"'\\tucomiss\" { target { ! ia32 } } } }\n+// { dg-final { scan-assembler-times \"\\tcomiss\" 2 { target { ! ia32 } } } }\n+\n+#define double_type float\n+#include \"pr103973-5.C\""}, {"sha": "1150d289a8a9d6178c091b95f890a2ff00287a60", "filename": "gcc/testsuite/g++.target/i386/pr103973-8.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-8.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+// PR target/103973\n+// { dg-do compile { target ia32 } }\n+// { dg-options \"-O2 -ffast-math -march=i686 -mfpmath=387 -std=c++20\" }\n+// { dg-final { scan-assembler-not \"'\\tfucom\" } }\n+// { dg-final { scan-assembler-times \"\\tfcom\" 2 } }\n+\n+#define double_type float\n+#include \"pr103973-5.C\""}, {"sha": "deb48f93d9b5d6cef2cf98e5c291a8cadb3874bc", "filename": "gcc/testsuite/g++.target/i386/pr103973-9.C", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103973-9.C?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,67 @@\n+// PR target/103973\n+// { dg-do run }\n+// { dg-options \"-O2 -std=c++20 -save-temps\" }\n+// { dg-final { scan-assembler-not \"'\\tucomisd\" { target { ! ia32 } } } }\n+// { dg-final { scan-assembler-times \"\\tcomisd\" 2 { target { ! ia32 } } } }\n+\n+#include <compare>\n+\n+#ifndef double_type\n+#define double_type double\n+#endif\n+\n+__attribute__((noipa)) auto\n+foo (double_type a, double_type b)\n+{\n+  return a <=> b;\n+}\n+\n+__attribute__((noipa)) int\n+bar (double_type a, double_type b)\n+{\n+  auto c = foo (a, b);\n+  if (c == std::partial_ordering::less)\n+    return -1;\n+  if (c == std::partial_ordering::equivalent)\n+    return 0;\n+  return 1;\n+}\n+\n+__attribute__((noipa)) auto\n+baz (double_type a)\n+{\n+  return a <=> 0.0f;\n+}\n+\n+__attribute__((noipa)) int\n+qux (double_type a)\n+{\n+  auto c = baz (a);\n+  if (c == std::partial_ordering::less)\n+    return -1;\n+  if (c == std::partial_ordering::equivalent)\n+    return 0;\n+  return 1;\n+}\n+\n+int\n+main ()\n+{\n+  double_type m5 = -5.0;\n+  double_type p5 = 5.0;\n+  volatile double_type p0 = 0.0;\n+  double_type nan = p0 / p0;\n+  if (bar (p5, p5) != 0 || bar (m5, m5) != 0)\n+    __builtin_abort ();\n+  if (bar (m5, p5) != -1 || bar (p5, m5) != 1)\n+    __builtin_abort ();\n+  if (bar (m5, nan) != 1 || bar (nan, p5) != 1)\n+    __builtin_abort ();\n+  if (bar (nan, nan) != 1)\n+    __builtin_abort ();\n+  if (qux (p0) != 0 || qux (nan) != 1)\n+    __builtin_abort ();\n+  if (qux (m5) != -1 || qux (p5) != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "d0a3bc2339b83ca2d2aef18359bcb7649fddea17", "filename": "gcc/testsuite/gcc.target/i386/pr103973-1.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-1.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,98 @@\n+/* PR target/103973 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -save-temps\" } */\n+/* { dg-final { scan-assembler-not \"'\\tucomisd\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"\\tcomisd\" 4 { target { ! ia32 } } } } */\n+\n+__attribute__((noipa)) int m1 (void) { return -1; }\n+__attribute__((noipa)) int p0 (void) { return 0; }\n+__attribute__((noipa)) int p1 (void) { return 1; }\n+__attribute__((noipa)) int p2 (void) { return 2; }\n+\n+__attribute__((noipa)) int\n+foo (double a, double b)\n+{\n+  if (a == b)\n+    return 0;\n+  if (a < b)\n+    return -1;\n+  if (a > b)\n+    return 1;\n+  return 2;\n+}\n+\n+__attribute__((noipa)) int\n+bar (double a, double b)\n+{\n+  if (a == b)\n+    return p0 ();\n+  if (a < b)\n+    return m1 ();\n+  if (a > b)\n+    return p1 ();\n+  return p2 ();\n+}\n+\n+__attribute__((noipa)) int\n+baz (double a, double b)\n+{\n+  if (a == b)\n+    return p0 ();\n+  if (b < a)\n+    return p1 ();\n+  if (a < b)\n+    return m1 ();\n+  return p2 ();\n+}\n+\n+__attribute__((noipa)) int\n+qux (double a)\n+{\n+  if (a != 0.0f)\n+    {\n+      if (a <= 0.0f)\n+\treturn -1;\n+      if (a >= 0.0f)\n+\treturn 1;\n+      return 2;\n+    }\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  double m5 = -5.0f;\n+  double p5 = 5.0f;\n+  volatile double p0 = 0.0f;\n+  double nan = p0 / p0;\n+  if (foo (p5, p5) != 0 || foo (m5, m5) != 0)\n+    __builtin_abort ();\n+  if (foo (m5, p5) != -1 || foo (p5, m5) != 1)\n+    __builtin_abort ();\n+  if (foo (m5, nan) != 2 || foo (nan, p5) != 2)\n+    __builtin_abort ();\n+  if (foo (nan, nan) != 2)\n+    __builtin_abort ();\n+  if (bar (p5, p5) != 0 || bar (m5, m5) != 0)\n+    __builtin_abort ();\n+  if (bar (m5, p5) != -1 || bar (p5, m5) != 1)\n+    __builtin_abort ();\n+  if (bar (m5, nan) != 2 || bar (nan, p5) != 2)\n+    __builtin_abort ();\n+  if (bar (nan, nan) != 2)\n+    __builtin_abort ();\n+  if (baz (p5, p5) != 0 || baz (m5, m5) != 0)\n+    __builtin_abort ();\n+  if (baz (m5, p5) != -1 || baz (p5, m5) != 1)\n+    __builtin_abort ();\n+  if (baz (m5, nan) != 2 || baz (nan, p5) != 2)\n+    __builtin_abort ();\n+  if (baz (nan, nan) != 2)\n+    __builtin_abort ();\n+  if (qux (p0) != 0 || qux (nan) != 2)\n+    __builtin_abort ();\n+  if (qux (m5) != -1 || qux (p5) != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "afca4214b8b114ca87651d1075a8edddd8c66bc6", "filename": "gcc/testsuite/gcc.target/i386/pr103973-10.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-10.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,7 @@\n+/* PR target/103973 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -march=i686 -mfpmath=387\" } */\n+/* { dg-final { scan-assembler-not \"'\\tfucom\" } } */\n+/* { dg-final { scan-assembler-times \"\\tfcom\" 4 } } */\n+\n+#include \"pr103973-9.c\""}, {"sha": "a906d140e48b1ee435fb14eda858074d19c370ee", "filename": "gcc/testsuite/gcc.target/i386/pr103973-11.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-11.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+/* PR target/103973 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -save-temps\" } */\n+/* { dg-final { scan-assembler-not \"'\\tucomiss\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"\\tcomiss\" 4 { target { ! ia32 } } } } */\n+\n+#define double float\n+#include \"pr103973-9.c\""}, {"sha": "7990f427073bee05bf1371ef1d45bd316b22cb9e", "filename": "gcc/testsuite/gcc.target/i386/pr103973-12.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-12.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+/* PR target/103973 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -march=i686 -mfpmath=387\" } */\n+/* { dg-final { scan-assembler-not \"'\\tfucom\" } } */\n+/* { dg-final { scan-assembler-times \"\\tfcom\" 4 } } */\n+\n+#define double float\n+#include \"pr103973-9.c\""}, {"sha": "7e6dc4043cb5849ca58f17a0e673695bc3f6c2f7", "filename": "gcc/testsuite/gcc.target/i386/pr103973-13.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-13.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,76 @@\n+/* PR target/103973 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -save-temps\" } */\n+/* { dg-final { scan-assembler-not \"'\\tucomisd\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"\\tcomisd\" 4 { target { ! ia32 } } } } */\n+\n+__attribute__((noipa)) int m1 (void) { return -1; }\n+__attribute__((noipa)) int p0 (void) { return 0; }\n+__attribute__((noipa)) int p1 (void) { return 1; }\n+\n+__attribute__((noipa)) int\n+foo (double a, double b)\n+{\n+  if (a == b)\n+    return 0;\n+  if (a < b)\n+    return -1;\n+  return 1;\n+}\n+\n+__attribute__((noipa)) int\n+bar (double a, double b)\n+{\n+  if (a == b)\n+    return p0 ();\n+  if (a < b)\n+    return m1 ();\n+  return p1 ();\n+}\n+\n+__attribute__((noipa)) int\n+baz (double a, double b)\n+{\n+  if (a == b)\n+    return p0 ();\n+  if (b < a)\n+    return p1 ();\n+  return m1 ();\n+}\n+\n+__attribute__((noipa)) int\n+qux (double a)\n+{\n+  if (a != 0.0f)\n+    {\n+      if (a <= 0.0f)\n+\treturn -1;\n+      return 1;\n+    }\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  double m5 = -5.0f;\n+  double p5 = 5.0f;\n+  double p0 = 0.0f;\n+  if (foo (p5, p5) != 0 || foo (m5, m5) != 0)\n+    __builtin_abort ();\n+  if (foo (m5, p5) != -1 || foo (p5, m5) != 1)\n+    __builtin_abort ();\n+  if (bar (p5, p5) != 0 || bar (m5, m5) != 0)\n+    __builtin_abort ();\n+  if (bar (m5, p5) != -1 || bar (p5, m5) != 1)\n+    __builtin_abort ();\n+  if (baz (p5, p5) != 0 || baz (m5, m5) != 0)\n+    __builtin_abort ();\n+  if (baz (m5, p5) != -1 || baz (p5, m5) != 1)\n+    __builtin_abort ();\n+  if (qux (p0) != 0)\n+    __builtin_abort ();\n+  if (qux (m5) != -1 || qux (p5) != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "3d1d831df4e03709443cdbcaf94898f320e5e192", "filename": "gcc/testsuite/gcc.target/i386/pr103973-14.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-14.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,7 @@\n+/* PR target/103973 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -ffast-math -march=i686 -mfpmath=387\" } */\n+/* { dg-final { scan-assembler-not \"'\\tfucom\" } } */\n+/* { dg-final { scan-assembler-times \"\\tfcom\" 4 } } */\n+\n+#include \"pr103973-13.c\""}, {"sha": "3b65a131ea5974564a33f4d76d3ca39856338de7", "filename": "gcc/testsuite/gcc.target/i386/pr103973-15.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-15.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+/* PR target/103973 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -save-temps\" } */\n+/* { dg-final { scan-assembler-not \"'\\tucomiss\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"\\tcomiss\" 4 { target { ! ia32 } } } } */\n+\n+#define double float\n+#include \"pr103973-13.c\""}, {"sha": "9be4e947d7805aa7e37d72dca81429c7388e6712", "filename": "gcc/testsuite/gcc.target/i386/pr103973-16.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-16.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+/* PR target/103973 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -ffast-math -march=i686 -mfpmath=387\" } */\n+/* { dg-final { scan-assembler-not \"'\\tfucom\" } } */\n+/* { dg-final { scan-assembler-times \"\\tfcom\" 4 } } */\n+\n+#define double float\n+#include \"pr103973-13.c\""}, {"sha": "1a148256ae8722508d43f4c6fbbe4b24879fead1", "filename": "gcc/testsuite/gcc.target/i386/pr103973-17.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-17.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+/* PR target/103973 */\n+/* { dg-do run { target large_long_double } } */\n+/* { dg-options \"-O2 -save-temps\" } */\n+/* { dg-final { scan-assembler-not \"'\\tfucom\" } } */\n+/* { dg-final { scan-assembler-times \"\\tfcom\" 4 } } */\n+\n+#define double long double\n+#include \"pr103973-1.c\""}, {"sha": "d268eaa237c82322c48b49abc212fce47d667d93", "filename": "gcc/testsuite/gcc.target/i386/pr103973-18.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-18.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+/* PR target/103973 */\n+/* { dg-do run { target large_long_double } } */\n+/* { dg-options \"-O2 -ffast-math -save-temps\" } */\n+/* { dg-final { scan-assembler-not \"'\\tfucom\" } } */\n+/* { dg-final { scan-assembler-times \"\\tfcom\" 4 } } */\n+\n+#define double long double\n+#include \"pr103973-5.c\""}, {"sha": "ad6bddc43edf52e6a3657eefc035fe08b3c0b9a6", "filename": "gcc/testsuite/gcc.target/i386/pr103973-19.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-19.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+/* PR target/103973 */\n+/* { dg-do run { target large_long_double } } */\n+/* { dg-options \"-O2 -save-temps\" } */\n+/* { dg-final { scan-assembler-not \"'\\tfucom\" } } */\n+/* { dg-final { scan-assembler-times \"\\tfcom\" 4 } } */\n+\n+#define double long double\n+#include \"pr103973-9.c\""}, {"sha": "2bd2c11d5c42b93daf34bc69ad8467aac53e32b6", "filename": "gcc/testsuite/gcc.target/i386/pr103973-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-2.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,7 @@\n+/* PR target/103973 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -march=i686 -mfpmath=387\" } */\n+/* { dg-final { scan-assembler-not \"'\\tfucom\" } } */\n+/* { dg-final { scan-assembler-times \"\\tfcom\" 4 } } */\n+\n+#include \"pr103973-1.c\""}, {"sha": "447dac305e006b85666a74578098680cc077be6b", "filename": "gcc/testsuite/gcc.target/i386/pr103973-20.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-20.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+/* PR target/103973 */\n+/* { dg-do run { target large_long_double } } */\n+/* { dg-options \"-O2 -ffast-math -save-temps\" } */\n+/* { dg-final { scan-assembler-not \"'\\tfucom\" } } */\n+/* { dg-final { scan-assembler-times \"\\tfcom\" 4 } } */\n+\n+#define double long double\n+#include \"pr103973-13.c\""}, {"sha": "2b9124e998c7e5d542e159f54966704ae0873b99", "filename": "gcc/testsuite/gcc.target/i386/pr103973-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-3.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+/* PR target/103973 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -save-temps\" } */\n+/* { dg-final { scan-assembler-not \"'\\tucomiss\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"\\tcomiss\" 4 { target { ! ia32 } } } } */\n+\n+#define double float\n+#include \"pr103973-1.c\""}, {"sha": "764e2e480539ab509bd281a67cb9ecf1e7493cec", "filename": "gcc/testsuite/gcc.target/i386/pr103973-4.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-4.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+/* PR target/103973 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -march=i686 -mfpmath=387\" } */\n+/* { dg-final { scan-assembler-not \"'\\tfucom\" } } */\n+/* { dg-final { scan-assembler-times \"\\tfcom\" 4 } } */\n+\n+#define double float\n+#include \"pr103973-1.c\""}, {"sha": "9ee6ca23ee0ec4ec462711525dc2593ada20c147", "filename": "gcc/testsuite/gcc.target/i386/pr103973-5.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-5.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,85 @@\n+/* PR target/103973 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -save-temps\" } */\n+/* { dg-final { scan-assembler-not \"'\\tucomisd\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"\\tcomisd\" 4 { target { ! ia32 } } } } */\n+\n+__attribute__((noipa)) int m1 (void) { return -1; }\n+__attribute__((noipa)) int p0 (void) { return 0; }\n+__attribute__((noipa)) int p1 (void) { return 1; }\n+__attribute__((noipa)) int p2 (void) { return 2; }\n+\n+__attribute__((noipa)) int\n+foo (double a, double b)\n+{\n+  if (a == b)\n+    return 0;\n+  if (a < b)\n+    return -1;\n+  if (a > b)\n+    return 1;\n+  return 2;\n+}\n+\n+__attribute__((noipa)) int\n+bar (double a, double b)\n+{\n+  if (a == b)\n+    return p0 ();\n+  if (a < b)\n+    return m1 ();\n+  if (a > b)\n+    return p1 ();\n+  return p2 ();\n+}\n+\n+__attribute__((noipa)) int\n+baz (double a, double b)\n+{\n+  if (a == b)\n+    return p0 ();\n+  if (b < a)\n+    return p1 ();\n+  if (a < b)\n+    return m1 ();\n+  return p2 ();\n+}\n+\n+__attribute__((noipa)) int\n+qux (double a)\n+{\n+  if (a != 0.0f)\n+    {\n+      if (a <= 0.0f)\n+\treturn -1;\n+      if (a >= 0.0f)\n+\treturn 1;\n+      return 2;\n+    }\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  double m5 = -5.0f;\n+  double p5 = 5.0f;\n+  double p0 = 0.0f;\n+  if (foo (p5, p5) != 0 || foo (m5, m5) != 0)\n+    __builtin_abort ();\n+  if (foo (m5, p5) != -1 || foo (p5, m5) != 1)\n+    __builtin_abort ();\n+  if (bar (p5, p5) != 0 || bar (m5, m5) != 0)\n+    __builtin_abort ();\n+  if (bar (m5, p5) != -1 || bar (p5, m5) != 1)\n+    __builtin_abort ();\n+  if (baz (p5, p5) != 0 || baz (m5, m5) != 0)\n+    __builtin_abort ();\n+  if (baz (m5, p5) != -1 || baz (p5, m5) != 1)\n+    __builtin_abort ();\n+  if (qux (p0) != 0)\n+    __builtin_abort ();\n+  if (qux (m5) != -1 || qux (p5) != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "4c1418496b0c8b86d3613ebcf6f37b46c6e23268", "filename": "gcc/testsuite/gcc.target/i386/pr103973-6.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-6.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,7 @@\n+/* PR target/103973 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -ffast-math -march=i686 -mfpmath=387\" } */\n+/* { dg-final { scan-assembler-not \"'\\tfucom\" } } */\n+/* { dg-final { scan-assembler-times \"\\tfcom\" 4 } } */\n+\n+#include \"pr103973-5.c\""}, {"sha": "b883f8c5307307d86c4f1ec295bdf942d948dfac", "filename": "gcc/testsuite/gcc.target/i386/pr103973-7.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-7.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+/* PR target/103973 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -save-temps\" } */\n+/* { dg-final { scan-assembler-not \"'\\tucomiss\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"\\tcomiss\" 4 { target { ! ia32 } } } } */\n+\n+#define double float\n+#include \"pr103973-5.c\""}, {"sha": "5f490c810d4d5b387c2fdc7cdecbc2b041eb9b56", "filename": "gcc/testsuite/gcc.target/i386/pr103973-8.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-8.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,8 @@\n+/* PR target/103973 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -ffast-math -march=i686 -mfpmath=387\" } */\n+/* { dg-final { scan-assembler-not \"'\\tfucom\" } } */\n+/* { dg-final { scan-assembler-times \"\\tfcom\" 4 } } */\n+\n+#define double float\n+#include \"pr103973-5.c\""}, {"sha": "cc583c0e28675b7c26a51c7cc00fbcb9cccb29ab", "filename": "gcc/testsuite/gcc.target/i386/pr103973-9.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103973-9.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -0,0 +1,89 @@\n+/* PR target/103973 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -save-temps\" } */\n+/* { dg-final { scan-assembler-not \"'\\tucomisd\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"\\tcomisd\" 4 { target { ! ia32 } } } } */\n+\n+__attribute__((noipa)) int m1 (void) { return -1; }\n+__attribute__((noipa)) int p0 (void) { return 0; }\n+__attribute__((noipa)) int p1 (void) { return 1; }\n+\n+__attribute__((noipa)) int\n+foo (double a, double b)\n+{\n+  if (a == b)\n+    return 0;\n+  if (a < b)\n+    return -1;\n+  return 1;\n+}\n+\n+__attribute__((noipa)) int\n+bar (double a, double b)\n+{\n+  if (a == b)\n+    return p0 ();\n+  if (a < b)\n+    return m1 ();\n+  return p1 ();\n+}\n+\n+__attribute__((noipa)) int\n+baz (double a, double b)\n+{\n+  if (a == b)\n+    return p0 ();\n+  if (b < a)\n+    return p1 ();\n+  return m1 ();\n+}\n+\n+__attribute__((noipa)) int\n+qux (double a)\n+{\n+  if (a != 0.0f)\n+    {\n+      if (a <= 0.0f)\n+\treturn -1;\n+      return 1;\n+    }\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  double m5 = -5.0f;\n+  double p5 = 5.0f;\n+  volatile double p0 = 0.0f;\n+  double nan = p0 / p0;\n+  if (foo (p5, p5) != 0 || foo (m5, m5) != 0)\n+    __builtin_abort ();\n+  if (foo (m5, p5) != -1 || foo (p5, m5) != 1)\n+    __builtin_abort ();\n+  if (foo (m5, nan) != 1 || foo (nan, p5) != 1)\n+    __builtin_abort ();\n+  if (foo (nan, nan) != 1)\n+    __builtin_abort ();\n+  if (bar (p5, p5) != 0 || bar (m5, m5) != 0)\n+    __builtin_abort ();\n+  if (bar (m5, p5) != -1 || bar (p5, m5) != 1)\n+    __builtin_abort ();\n+  if (bar (m5, nan) != 1 || bar (nan, p5) != 1)\n+    __builtin_abort ();\n+  if (bar (nan, nan) != 1)\n+    __builtin_abort ();\n+  if (baz (p5, p5) != 0 || baz (m5, m5) != 0)\n+    __builtin_abort ();\n+  if (baz (m5, p5) != -1 || baz (p5, m5) != 1)\n+    __builtin_abort ();\n+  if (baz (m5, nan) != -1 || baz (nan, p5) != -1)\n+    __builtin_abort ();\n+  if (baz (nan, nan) != -1)\n+    __builtin_abort ();\n+  if (qux (p0) != 0 || qux (nan) != 1)\n+    __builtin_abort ();\n+  if (qux (m5) != -1 || qux (p5) != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "14f121d8e82bd1259f3d8b542ae9b065e7b4cd52", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -9410,6 +9410,31 @@ gimple_switch_default_edge (function *ifun, gswitch *gs)\n   return gimple_switch_edge (ifun, gs, 0);\n }\n \n+/* Return true if the only executable statement in BB is a GIMPLE_COND.  */\n+\n+bool\n+cond_only_block_p (basic_block bb)\n+{\n+  /* BB must have no executable statements.  */\n+  gimple_stmt_iterator gsi = gsi_after_labels (bb);\n+  if (phi_nodes (bb))\n+    return false;\n+  while (!gsi_end_p (gsi))\n+    {\n+      gimple *stmt = gsi_stmt (gsi);\n+      if (is_gimple_debug (stmt))\n+\t;\n+      else if (gimple_code (stmt) == GIMPLE_NOP\n+\t       || gimple_code (stmt) == GIMPLE_PREDICT\n+\t       || gimple_code (stmt) == GIMPLE_COND)\n+\t;\n+      else\n+\treturn false;\n+      gsi_next (&gsi);\n+    }\n+  return true;\n+}\n+\n \n /* Emit return warnings.  */\n "}, {"sha": "cb67cdf87ac8df9c8ec1ea866308bffdc63c1043", "filename": "gcc/tree-cfg.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftree-cfg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftree-cfg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.h?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -111,6 +111,7 @@ extern basic_block gimple_switch_label_bb (function *, gswitch *, unsigned);\n extern basic_block gimple_switch_default_bb (function *, gswitch *);\n extern edge gimple_switch_edge (function *, gswitch *, unsigned);\n extern edge gimple_switch_default_edge (function *, gswitch *);\n+extern bool cond_only_block_p (basic_block);\n \n /* Return true if the LHS of a call should be removed.  */\n "}, {"sha": "e3c3bd84f4970fc87d8aadb0195ad94182610eda", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 223, "deletions": 0, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -4637,6 +4637,227 @@ convert_mult_to_highpart (gassign *stmt, gimple_stmt_iterator *gsi)\n   return true;\n }\n \n+/* If target has spaceship<MODE>3 expander, pattern recognize\n+   <bb 2> [local count: 1073741824]:\n+   if (a_2(D) == b_3(D))\n+     goto <bb 6>; [34.00%]\n+   else\n+     goto <bb 3>; [66.00%]\n+\n+   <bb 3> [local count: 708669601]:\n+   if (a_2(D) < b_3(D))\n+     goto <bb 6>; [1.04%]\n+   else\n+     goto <bb 4>; [98.96%]\n+\n+   <bb 4> [local count: 701299439]:\n+   if (a_2(D) > b_3(D))\n+     goto <bb 5>; [48.89%]\n+   else\n+     goto <bb 6>; [51.11%]\n+\n+   <bb 5> [local count: 342865295]:\n+\n+   <bb 6> [local count: 1073741824]:\n+   and turn it into:\n+   <bb 2> [local count: 1073741824]:\n+   _1 = .SPACESHIP (a_2(D), b_3(D));\n+   if (_1 == 0)\n+     goto <bb 6>; [34.00%]\n+   else\n+     goto <bb 3>; [66.00%]\n+\n+   <bb 3> [local count: 708669601]:\n+   if (_1 == -1)\n+     goto <bb 6>; [1.04%]\n+   else\n+     goto <bb 4>; [98.96%]\n+\n+   <bb 4> [local count: 701299439]:\n+   if (_1 == 1)\n+     goto <bb 5>; [48.89%]\n+   else\n+     goto <bb 6>; [51.11%]\n+\n+   <bb 5> [local count: 342865295]:\n+\n+   <bb 6> [local count: 1073741824]:\n+   so that the backend can emit optimal comparison and\n+   conditional jump sequence.  */\n+\n+static void\n+optimize_spaceship (gimple *stmt)\n+{\n+  enum tree_code code = gimple_cond_code (stmt);\n+  if (code != EQ_EXPR && code != NE_EXPR)\n+    return;\n+  tree arg1 = gimple_cond_lhs (stmt);\n+  tree arg2 = gimple_cond_rhs (stmt);\n+  if (!SCALAR_FLOAT_TYPE_P (TREE_TYPE (arg1))\n+      || optab_handler (spaceship_optab,\n+\t\t\tTYPE_MODE (TREE_TYPE (arg1))) == CODE_FOR_nothing\n+      || operand_equal_p (arg1, arg2, 0))\n+    return;\n+\n+  basic_block bb0 = gimple_bb (stmt), bb1, bb2 = NULL;\n+  edge em1 = NULL, e1 = NULL, e2 = NULL;\n+  bb1 = EDGE_SUCC (bb0, 1)->dest;\n+  if (((EDGE_SUCC (bb0, 0)->flags & EDGE_TRUE_VALUE) != 0) ^ (code == EQ_EXPR))\n+    bb1 = EDGE_SUCC (bb0, 0)->dest;\n+\n+  gimple *g = last_stmt (bb1);\n+  if (g == NULL\n+      || gimple_code (g) != GIMPLE_COND\n+      || !single_pred_p (bb1)\n+      || (operand_equal_p (gimple_cond_lhs (g), arg1, 0)\n+\t  ? !operand_equal_p (gimple_cond_rhs (g), arg2, 0)\n+\t  : (!operand_equal_p (gimple_cond_lhs (g), arg2, 0)\n+\t     || !operand_equal_p (gimple_cond_rhs (g), arg1, 0)))\n+      || !cond_only_block_p (bb1))\n+    return;\n+\n+  enum tree_code ccode = (operand_equal_p (gimple_cond_lhs (g), arg1, 0)\n+\t\t\t  ? LT_EXPR : GT_EXPR);\n+  switch (gimple_cond_code (g))\n+    {\n+    case LT_EXPR:\n+    case LE_EXPR:\n+      break;\n+    case GT_EXPR:\n+    case GE_EXPR:\n+      ccode = ccode == LT_EXPR ? GT_EXPR : LT_EXPR;\n+      break;\n+    default:\n+      return;\n+    }\n+\n+  for (int i = 0; i < 2; ++i)\n+    {\n+      /* With NaNs, </<=/>/>= are false, so we need to look for the\n+\t third comparison on the false edge from whatever non-equality\n+\t comparison the second comparison is.  */\n+      if (HONOR_NANS (TREE_TYPE (arg1))\n+\t  && (EDGE_SUCC (bb1, i)->flags & EDGE_TRUE_VALUE) != 0)\n+\tcontinue;\n+\n+      bb2 = EDGE_SUCC (bb1, i)->dest;\n+      g = last_stmt (bb2);\n+      if (g == NULL\n+\t  || gimple_code (g) != GIMPLE_COND\n+\t  || !single_pred_p (bb2)\n+\t  || (operand_equal_p (gimple_cond_lhs (g), arg1, 0)\n+\t      ? !operand_equal_p (gimple_cond_rhs (g), arg2, 0)\n+\t      : (!operand_equal_p (gimple_cond_lhs (g), arg2, 0)\n+\t\t || !operand_equal_p (gimple_cond_rhs (g), arg1, 0)))\n+\t  || !cond_only_block_p (bb2)\n+\t  || EDGE_SUCC (bb2, 0)->dest == EDGE_SUCC (bb2, 1)->dest)\n+\tcontinue;\n+\n+      enum tree_code ccode2\n+\t= (operand_equal_p (gimple_cond_lhs (g), arg1, 0) ? LT_EXPR : GT_EXPR);\n+      switch (gimple_cond_code (g))\n+\t{\n+\tcase LT_EXPR:\n+\tcase LE_EXPR:\n+\t  break;\n+\tcase GT_EXPR:\n+\tcase GE_EXPR:\n+\t  ccode2 = ccode2 == LT_EXPR ? GT_EXPR : LT_EXPR;\n+\t  break;\n+\tdefault:\n+\t  continue;\n+\t}\n+      if (HONOR_NANS (TREE_TYPE (arg1)) && ccode == ccode2)\n+\tcontinue;\n+\n+      if ((ccode == LT_EXPR)\n+\t  ^ ((EDGE_SUCC (bb1, i)->flags & EDGE_TRUE_VALUE) != 0))\n+\t{\n+\t  em1 = EDGE_SUCC (bb1, 1 - i);\n+\t  e1 = EDGE_SUCC (bb2, 0);\n+\t  e2 = EDGE_SUCC (bb2, 1);\n+\t  if ((ccode2 == LT_EXPR) ^ ((e1->flags & EDGE_TRUE_VALUE) == 0))\n+\t    std::swap (e1, e2);\n+\t}\n+      else\n+\t{\n+\t  e1 = EDGE_SUCC (bb1, 1 - i);\n+\t  em1 = EDGE_SUCC (bb2, 0);\n+\t  e2 = EDGE_SUCC (bb2, 1);\n+\t  if ((ccode2 != LT_EXPR) ^ ((em1->flags & EDGE_TRUE_VALUE) == 0))\n+\t    std::swap (em1, e2);\n+\t}\n+      break;\n+    }\n+\n+  if (em1 == NULL)\n+    {\n+      if ((ccode == LT_EXPR)\n+\t  ^ ((EDGE_SUCC (bb1, 0)->flags & EDGE_TRUE_VALUE) != 0))\n+\t{\n+\t  em1 = EDGE_SUCC (bb1, 1);\n+\t  e1 = EDGE_SUCC (bb1, 0);\n+\t  e2 = (e1->flags & EDGE_TRUE_VALUE) ? em1 : e1;\n+\t}\n+      else\n+\t{\n+\t  em1 = EDGE_SUCC (bb1, 0);\n+\t  e1 = EDGE_SUCC (bb1, 1);\n+\t  e2 = (e1->flags & EDGE_TRUE_VALUE) ? em1 : e1;\n+\t}\n+    }\n+\n+  g = gimple_build_call_internal (IFN_SPACESHIP, 2, arg1, arg2);\n+  tree lhs = make_ssa_name (integer_type_node);\n+  gimple_call_set_lhs (g, lhs);\n+  gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n+  gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n+\n+  gcond *cond = as_a <gcond *> (stmt);\n+  gimple_cond_set_lhs (cond, lhs);\n+  gimple_cond_set_rhs (cond, integer_zero_node);\n+  update_stmt (stmt);\n+\n+  g = last_stmt (bb1);\n+  cond = as_a <gcond *> (g);\n+  gimple_cond_set_lhs (cond, lhs);\n+  if (em1->src == bb1 && e2 != em1)\n+    {\n+      gimple_cond_set_rhs (cond, integer_minus_one_node);\n+      gimple_cond_set_code (cond, (em1->flags & EDGE_TRUE_VALUE)\n+\t\t\t\t  ? EQ_EXPR : NE_EXPR);\n+    }\n+  else\n+    {\n+      gcc_assert (e1->src == bb1 && e2 != e1);\n+      gimple_cond_set_rhs (cond, integer_one_node);\n+      gimple_cond_set_code (cond, (e1->flags & EDGE_TRUE_VALUE)\n+\t\t\t\t  ? EQ_EXPR : NE_EXPR);\n+    }\n+  update_stmt (g);\n+\n+  if (e2 != e1 && e2 != em1)\n+    {\n+      g = last_stmt (bb2);\n+      cond = as_a <gcond *> (g);\n+      gimple_cond_set_lhs (cond, lhs);\n+      if (em1->src == bb2)\n+\tgimple_cond_set_rhs (cond, integer_minus_one_node);\n+      else\n+\t{\n+\t  gcc_assert (e1->src == bb2);\n+\t  gimple_cond_set_rhs (cond, integer_one_node);\n+\t}\n+      gimple_cond_set_code (cond,\n+\t\t\t    (e2->flags & EDGE_TRUE_VALUE) ? NE_EXPR : EQ_EXPR);\n+      update_stmt (g);\n+    }\n+\n+  wide_int wm1 = wi::minus_one (TYPE_PRECISION (integer_type_node));\n+  wide_int w2 = wi::two (TYPE_PRECISION (integer_type_node));\n+  set_range_info (lhs, VR_RANGE, wm1, w2);\n+}\n+\n \n /* Find integer multiplications where the operands are extended from\n    smaller types, and replace the MULT_EXPR with a WIDEN_MULT_EXPR\n@@ -4798,6 +5019,8 @@ math_opts_dom_walker::after_dom_children (basic_block bb)\n \t      break;\n \t    }\n \t}\n+      else if (gimple_code (stmt) == GIMPLE_COND)\n+\toptimize_spaceship (stmt);\n       gsi_next (&gsi);\n     }\n   if (fma_state.m_deferring_p"}, {"sha": "562468b7f02a9ffe2713318add551902c14f89c3", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463d9108766dcbb6a1051985e6c840a46897fe10/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=463d9108766dcbb6a1051985e6c840a46897fe10", "patch": "@@ -1958,31 +1958,6 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n   return true;\n }\n \n-/* Return true if the only executable statement in BB is a GIMPLE_COND.  */\n-\n-static bool\n-cond_only_block_p (basic_block bb)\n-{\n-  /* BB must have no executable statements.  */\n-  gimple_stmt_iterator gsi = gsi_after_labels (bb);\n-  if (phi_nodes (bb))\n-    return false;\n-  while (!gsi_end_p (gsi))\n-    {\n-      gimple *stmt = gsi_stmt (gsi);\n-      if (is_gimple_debug (stmt))\n-\t;\n-      else if (gimple_code (stmt) == GIMPLE_NOP\n-\t       || gimple_code (stmt) == GIMPLE_PREDICT\n-\t       || gimple_code (stmt) == GIMPLE_COND)\n-\t;\n-      else\n-\treturn false;\n-      gsi_next (&gsi);\n-    }\n-  return true;\n-}\n-\n /* Attempt to optimize (x <=> y) cmp 0 and similar comparisons.\n    For strong ordering <=> try to match something like:\n     <bb 2> :  // cond3_bb (== cond2_bb)"}]}