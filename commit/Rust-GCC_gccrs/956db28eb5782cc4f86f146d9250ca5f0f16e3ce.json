{"sha": "956db28eb5782cc4f86f146d9250ca5f0f16e3ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU2ZGIyOGViNTc4MmNjNGY4NmYxNDZkOTI1MGNhNWYwZjE2ZTNjZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-09-09T08:41:41Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-09-09T08:41:41Z"}, "message": "[ARM][3/3] Expand mod by power of 2\n\n\t* config/arm/arm.md (*subsi3_compare0): Rename to...\n\t(subsi3_compare0): ... This.\n\t(modsi3): New define_expand.\n\t* config/arm/arm.c (arm_new_rtx_costs, MOD case): Handle case\n\twhen operand is power of 2.\n\n\t* gcc.target/aarch64/mod_2.x: New file.\n\t* gcc.target/aarch64/mod_256.x: Likewise.\n\t* gcc.target/arm/mod_2.c: New test.\n\t* gcc.target/arm/mod_256.c: Likewise.\n\t* gcc.target/aarch64/mod_2.c: Likewise.\n\t* gcc.target/aarch64/mod_256.c: Likewise.\n\nFrom-SVN: r227586", "tree": {"sha": "0c03de8ce8a7cae4d68322f00c6d68e7ced44bb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c03de8ce8a7cae4d68322f00c6d68e7ced44bb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/956db28eb5782cc4f86f146d9250ca5f0f16e3ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/956db28eb5782cc4f86f146d9250ca5f0f16e3ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/956db28eb5782cc4f86f146d9250ca5f0f16e3ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f58fe36c141c2a328b6081be7d9cdf203cf2fcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f58fe36c141c2a328b6081be7d9cdf203cf2fcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f58fe36c141c2a328b6081be7d9cdf203cf2fcf"}], "stats": {"total": 145, "additions": 144, "deletions": 1}, "files": [{"sha": "618bbe63abc271a8a576acb75dfe4579791466ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=956db28eb5782cc4f86f146d9250ca5f0f16e3ce", "patch": "@@ -1,3 +1,11 @@\n+2015-09-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm.md (*subsi3_compare0): Rename to...\n+\t(subsi3_compare0): ... This.\n+\t(modsi3): New define_expand.\n+\t* config/arm/arm.c (arm_new_rtx_costs, MOD case): Handle case\n+\twhen operand is power of 2.\n+\n 2015-09-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.md (mod<mode>3): New define_expand."}, {"sha": "5f3180d38ce4f64828b41737cc2408e62302b4e7", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=956db28eb5782cc4f86f146d9250ca5f0f16e3ce", "patch": "@@ -9580,6 +9580,24 @@ arm_new_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer_code,\n       return false;\t/* All arguments must be in registers.  */\n \n     case MOD:\n+      /* MOD by a power of 2 can be expanded as:\n+\t rsbs    r1, r0, #0\n+\t and     r0, r0, #(n - 1)\n+\t and     r1, r1, #(n - 1)\n+\t rsbpl   r0, r1, #0.  */\n+      if (CONST_INT_P (XEXP (x, 1))\n+\t  && exact_log2 (INTVAL (XEXP (x, 1))) > 0\n+\t  && mode == SImode)\n+\t{\n+\t  *cost += COSTS_N_INSNS (3);\n+\n+\t  if (speed_p)\n+\t    *cost += 2 * extra_cost->alu.logical\n+\t\t     + extra_cost->alu.arith;\n+\t  return true;\n+\t}\n+\n+    /* Fall-through.  */\n     case UMOD:\n       *cost = LIBCALL_COST (2);\n       return false;\t/* All arguments must be in registers.  */"}, {"sha": "775ca25d81671885a12529dd070e2d1af0acab2b", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 70, "deletions": 1, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=956db28eb5782cc4f86f146d9250ca5f0f16e3ce", "patch": "@@ -1229,7 +1229,7 @@\n   \"\"\n )\n \n-(define_insn \"*subsi3_compare0\"\n+(define_insn \"subsi3_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV\n \t (minus:SI (match_operand:SI 1 \"arm_rhs_operand\" \"r,r,I\")\n@@ -11142,6 +11142,75 @@\n   \"\"\n )\n \n+;; ARM-specific expansion of signed mod by power of 2\n+;; using conditional negate.\n+;; For r0 % n where n is a power of 2 produce:\n+;; rsbs    r1, r0, #0\n+;; and     r0, r0, #(n - 1)\n+;; and     r1, r1, #(n - 1)\n+;; rsbpl   r0, r1, #0\n+\n+(define_expand \"modsi3\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"register_operand\" \"\")\n+   (match_operand:SI 2 \"const_int_operand\" \"\")]\n+  \"TARGET_32BIT\"\n+  {\n+    HOST_WIDE_INT val = INTVAL (operands[2]);\n+\n+    if (val <= 0\n+       || exact_log2 (val) <= 0)\n+      FAIL;\n+\n+    rtx mask = GEN_INT (val - 1);\n+\n+    /* In the special case of x0 % 2 we can do the even shorter:\n+\tcmp     r0, #0\n+\tand     r0, r0, #1\n+\trsblt   r0, r0, #0.  */\n+\n+    if (val == 2)\n+      {\n+\trtx cc_reg = arm_gen_compare_reg (LT,\n+\t\t\t\t\t  operands[1], const0_rtx, NULL_RTX);\n+\trtx cond = gen_rtx_LT (SImode, cc_reg, const0_rtx);\n+\trtx masked = gen_reg_rtx (SImode);\n+\n+\temit_insn (gen_andsi3 (masked, operands[1], mask));\n+\temit_move_insn (operands[0],\n+\t\t\tgen_rtx_IF_THEN_ELSE (SImode, cond,\n+\t\t\t\t\t      gen_rtx_NEG (SImode,\n+\t\t\t\t\t\t\t   masked),\n+\t\t\t\t\t      masked));\n+\tDONE;\n+      }\n+\n+    rtx neg_op = gen_reg_rtx (SImode);\n+    rtx_insn *insn = emit_insn (gen_subsi3_compare0 (neg_op, const0_rtx,\n+\t\t\t\t\t\t      operands[1]));\n+\n+    /* Extract the condition register and mode.  */\n+    rtx cmp = XVECEXP (PATTERN (insn), 0, 0);\n+    rtx cc_reg = SET_DEST (cmp);\n+    rtx cond = gen_rtx_GE (SImode, cc_reg, const0_rtx);\n+\n+    emit_insn (gen_andsi3 (operands[0], operands[1], mask));\n+\n+    rtx masked_neg = gen_reg_rtx (SImode);\n+    emit_insn (gen_andsi3 (masked_neg, neg_op, mask));\n+\n+    /* We want a conditional negate here, but emitting COND_EXEC rtxes\n+       during expand does not always work.  Do an IF_THEN_ELSE instead.  */\n+    emit_move_insn (operands[0],\n+\t\t    gen_rtx_IF_THEN_ELSE (SImode, cond,\n+\t\t\t\t\t  gen_rtx_NEG (SImode, masked_neg),\n+\t\t\t\t\t  operands[0]));\n+\n+\n+    DONE;\n+  }\n+)\n+\n (define_expand \"bswapsi2\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n   \t(bswap:SI (match_operand:SI 1 \"s_register_operand\" \"r\")))]"}, {"sha": "360fe70b8d09a7f10c2d5c44f10ed6417497182b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=956db28eb5782cc4f86f146d9250ca5f0f16e3ce", "patch": "@@ -1,3 +1,12 @@\n+2015-09-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/mod_2.x: New file.\n+\t* gcc.target/aarch64/mod_256.x: Likewise.\n+\t* gcc.target/arm/mod_2.c: New test.\n+\t* gcc.target/arm/mod_256.c: Likewise.\n+\t* gcc.target/aarch64/mod_2.c: Likewise.\n+\t* gcc.target/aarch64/mod_256.c: Likewise.\n+\n 2015-09-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/67504"}, {"sha": "2645c18e7419ff96517ab799fa45f1f35c639653", "filename": "gcc/testsuite/gcc.target/aarch64/mod_2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmod_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmod_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmod_2.c?ref=956db28eb5782cc4f86f146d9250ca5f0f16e3ce", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=cortex-a57 -save-temps\" } */\n+\n+#include \"mod_2.x\"\n+\n+/* { dg-final { scan-assembler \"csneg\\t\\[wx\\]\\[0-9\\]*\" } } */\n+/* { dg-final { scan-assembler-times \"and\\t\\[wx\\]\\[0-9\\]*\" 1 } } */"}, {"sha": "2b079a4b883dc5f591859f33b668bae3acff20e8", "filename": "gcc/testsuite/gcc.target/aarch64/mod_2.x", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmod_2.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmod_2.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmod_2.x?ref=956db28eb5782cc4f86f146d9250ca5f0f16e3ce", "patch": "@@ -0,0 +1,5 @@\n+int\n+f (int x)\n+{\n+  return x % 2;\n+}"}, {"sha": "567332c04e1973d9a8553fe646572d6d296aa1ec", "filename": "gcc/testsuite/gcc.target/aarch64/mod_256.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmod_256.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmod_256.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmod_256.c?ref=956db28eb5782cc4f86f146d9250ca5f0f16e3ce", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=cortex-a57 -save-temps\" } */\n+\n+#include \"mod_256.x\"\n+\n+/* { dg-final { scan-assembler \"csneg\\t\\[wx\\]\\[0-9\\]*\" } } */"}, {"sha": "c1de42ce389b18d9306911b3f3673f947313c914", "filename": "gcc/testsuite/gcc.target/aarch64/mod_256.x", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmod_256.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmod_256.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmod_256.x?ref=956db28eb5782cc4f86f146d9250ca5f0f16e3ce", "patch": "@@ -0,0 +1,5 @@\n+int\n+f (int x)\n+{\n+  return x % 256;\n+}"}, {"sha": "93017a10683d4b2f87cd1eb71b8076d4b62f6bfb", "filename": "gcc/testsuite/gcc.target/arm/mod_2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmod_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmod_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmod_2.c?ref=956db28eb5782cc4f86f146d9250ca5f0f16e3ce", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-options \"-O2 -mcpu=cortex-a57 -save-temps\" } */\n+\n+#include \"../aarch64/mod_2.x\"\n+\n+/* { dg-final { scan-assembler \"rsblt\\tr\\[0-9\\]*\" } } */\n+/* { dg-final { scan-assembler-times \"and\\tr\\[0-9\\].*1\" 1 } } */"}, {"sha": "ccb7f3cf68df2563723d6dbe8a4cc4581db4ce9d", "filename": "gcc/testsuite/gcc.target/arm/mod_256.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmod_256.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956db28eb5782cc4f86f146d9250ca5f0f16e3ce/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmod_256.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmod_256.c?ref=956db28eb5782cc4f86f146d9250ca5f0f16e3ce", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-options \"-O2 -mcpu=cortex-a57 -save-temps\" } */\n+\n+#include \"../aarch64/mod_256.x\"\n+\n+/* { dg-final { scan-assembler \"rsbpl\\tr\\[0-9\\]*\" } } */\n+"}]}