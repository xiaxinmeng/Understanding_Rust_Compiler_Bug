{"sha": "76ca8d0f4a9873953244792b20e5ca51f4a88c65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZjYThkMGY0YTk4NzM5NTMyNDQ3OTJiMjBlNWNhNTFmNGE4OGM2NQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2019-01-23T22:43:42Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2019-01-23T22:43:42Z"}, "message": "re PR target/85711 (ICE in aarch64_classify_address, at config/aarch64/aarch64.c:5678)\n\n2019-01-23  Bin Cheng  <bin.cheng@arm.com>\n\t    Steve Ellcey <sellcey@marvell.com>\n\n\tPR target/85711\n\t* recog.c (address_operand): Return false on wrong mode for address.\n\t(constrain_operands): Check for mode with 'p' constraint.\n\nCo-Authored-By: Steve Ellcey <sellcey@marvell.com>\n\nFrom-SVN: r268219", "tree": {"sha": "997761802a06d812dcfe86b678ee46cf61e26e82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/997761802a06d812dcfe86b678ee46cf61e26e82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76ca8d0f4a9873953244792b20e5ca51f4a88c65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76ca8d0f4a9873953244792b20e5ca51f4a88c65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76ca8d0f4a9873953244792b20e5ca51f4a88c65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76ca8d0f4a9873953244792b20e5ca51f4a88c65/comments", "author": null, "committer": null, "parents": [{"sha": "6395ba73f84930d5ebcf692a3bd570da600f9da9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6395ba73f84930d5ebcf692a3bd570da600f9da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6395ba73f84930d5ebcf692a3bd570da600f9da9"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "094bee4622971842ed46a494a1f2a305fc00b64c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76ca8d0f4a9873953244792b20e5ca51f4a88c65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76ca8d0f4a9873953244792b20e5ca51f4a88c65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76ca8d0f4a9873953244792b20e5ca51f4a88c65", "patch": "@@ -1,3 +1,10 @@\n+2019-01-23  Bin Cheng  <bin.cheng@arm.com>\n+\t    Steve Ellcey <sellcey@marvell.com>\n+\n+\tPR target/85711\n+\t* recog.c (address_operand): Return false on wrong mode for address.\n+\t(constrain_operands): Check for mode with 'p' constraint.\n+\n 2019-01-23  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/88998"}, {"sha": "a9f584bc0dc54e8eaea4b2211e59915fd0023da7", "filename": "gcc/recog.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76ca8d0f4a9873953244792b20e5ca51f4a88c65/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76ca8d0f4a9873953244792b20e5ca51f4a88c65/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=76ca8d0f4a9873953244792b20e5ca51f4a88c65", "patch": "@@ -1070,6 +1070,11 @@ general_operand (rtx op, machine_mode mode)\n int\n address_operand (rtx op, machine_mode mode)\n {\n+  /* Wrong mode for an address expr.  */\n+  if (GET_MODE (op) != VOIDmode\n+      && ! SCALAR_INT_MODE_P (GET_MODE (op)))\n+    return false;\n+\n   return memory_address_p (mode, op);\n }\n \n@@ -2696,10 +2701,13 @@ constrain_operands (int strict, alternative_mask alternatives)\n \t\t/* p is used for address_operands.  When we are called by\n \t\t   gen_reload, no one will have checked that the address is\n \t\t   strictly valid, i.e., that all pseudos requiring hard regs\n-\t\t   have gotten them.  */\n-\t\tif (strict <= 0\n-\t\t    || (strict_memory_address_p (recog_data.operand_mode[opno],\n-\t\t\t\t\t\t op)))\n+\t\t   have gotten them.  We also want to make sure we have a\n+\t\t   valid mode.  */\n+\t\tif ((GET_MODE (op) == VOIDmode\n+\t\t     || SCALAR_INT_MODE_P (GET_MODE (op)))\n+\t\t    && (strict <= 0\n+\t\t\t|| (strict_memory_address_p\n+\t\t\t     (recog_data.operand_mode[opno], op))))\n \t\t  win = 1;\n \t\tbreak;\n "}]}