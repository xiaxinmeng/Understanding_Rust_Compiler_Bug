{"sha": "abbc45464b1be9895a4842903a5c75b6dd085b9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJiYzQ1NDY0YjFiZTk4OTVhNDg0MjkwM2E1Yzc1YjZkZDA4NWI5YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-07-08T08:13:30Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-08T08:13:30Z"}, "message": "[Ada] Fix crash on extension of private type with -gnatRj\n\nThis fixes a crash (or an assertion failure) during the processing done\nfor -gnatRj on the declaration of an extension of a private type.\nGenerally speaking, extension declarations are delicate in this context\nbecause the front-end does not duplicate the structure of the parent\ntype, so the processing required to output the structural layout needs\nto go up to the declaration of the parent type, which may or may not be\navailable or usable.\n\nThe change also makes the processing more robust by falling back to the\nflat layout if the declaration of the parent type cannot be processed.\n\n2019-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* repinfo.adb (List_Record_Info): Declare Incomplete_Layout and\n\tNot_In_Extended_Main local exceptions.\n\t(List_Structural_Record_Layout): For an extension, raise the\n\tformer if the parent subtype has not been built and the latter\n\tif it is not declared in the main source unit.  Fall back to the\n\tflat layout if either exception has been raised.\n\nFrom-SVN: r273206", "tree": {"sha": "e419d133430fef5bf2d148f717b982d56df03305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e419d133430fef5bf2d148f717b982d56df03305"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abbc45464b1be9895a4842903a5c75b6dd085b9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abbc45464b1be9895a4842903a5c75b6dd085b9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abbc45464b1be9895a4842903a5c75b6dd085b9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abbc45464b1be9895a4842903a5c75b6dd085b9a/comments", "author": null, "committer": null, "parents": [{"sha": "4962dc441d317b6f28ab4ee3bf6b0d83f7c61837", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4962dc441d317b6f28ab4ee3bf6b0d83f7c61837", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4962dc441d317b6f28ab4ee3bf6b0d83f7c61837"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "198db54e7a5f826f93e38ff318f5e61f9a9386e9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abbc45464b1be9895a4842903a5c75b6dd085b9a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abbc45464b1be9895a4842903a5c75b6dd085b9a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=abbc45464b1be9895a4842903a5c75b6dd085b9a", "patch": "@@ -1,3 +1,12 @@\n+2019-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* repinfo.adb (List_Record_Info): Declare Incomplete_Layout and\n+\tNot_In_Extended_Main local exceptions.\n+\t(List_Structural_Record_Layout): For an extension, raise the\n+\tformer if the parent subtype has not been built and the latter\n+\tif it is not declared in the main source unit.  Fall back to the\n+\tflat layout if either exception has been raised.\n+\n 2019-07-08  Ed Schonberg  <schonberg@adacore.com>\n \n \t* libgnat/a-strfix.adb (Delete): The RM describes the semantics"}, {"sha": "4bf33516468a981640914d2e4b1e4f7dbb58ec75", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abbc45464b1be9895a4842903a5c75b6dd085b9a/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abbc45464b1be9895a4842903a5c75b6dd085b9a/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=abbc45464b1be9895a4842903a5c75b6dd085b9a", "patch": "@@ -1125,6 +1125,12 @@ package body Repinfo is\n          Indent    : Natural := 0);\n       --  Internal recursive procedure to display the structural layout\n \n+      Incomplete_Layout : exception;\n+      --  Exception raised if the layout is incomplete in -gnatc mode\n+\n+      Not_In_Extended_Main : exception;\n+      --  Exception raised when an ancestor is not declared in the main unit\n+\n       Max_Name_Length : Natural := 0;\n       Max_Spos_Length : Natural := 0;\n \n@@ -1564,14 +1570,29 @@ package body Repinfo is\n \n                Disc        : Entity_Id;\n                Listed_Disc : Entity_Id;\n+               Parent_Type : Entity_Id;\n \n             begin\n                --  If this is an extension, first list the layout of the parent\n                --  and then proceed to the extension part, if any.\n \n                if Is_Extension then\n-                  List_Structural_Record_Layout\n-                    (Base_Type (Parent_Subtype (Ent)), Outer_Ent);\n+                  Parent_Type := Parent_Subtype (Ent);\n+                  if No (Parent_Type) then\n+                     raise Incomplete_Layout;\n+                  end if;\n+\n+                  if Is_Private_Type (Parent_Type) then\n+                     Parent_Type := Full_View (Parent_Type);\n+                     pragma Assert (Present (Parent_Type));\n+                  end if;\n+\n+                  Parent_Type := Base_Type (Parent_Type);\n+                  if not In_Extended_Main_Source_Unit (Parent_Type) then\n+                     raise Not_In_Extended_Main;\n+                  end if;\n+\n+                  List_Structural_Record_Layout (Parent_Type, Outer_Ent);\n                   First := False;\n \n                   if Present (Record_Extension_Part (Definition)) then\n@@ -1733,8 +1754,23 @@ package body Repinfo is\n          Write_Line (\",\");\n          Write_Str (\"  \"\"record\"\": [\");\n \n+         --  ??? We can output structural layout only for base types fully\n+         --  declared in the extended main source unit for the time being,\n+         --  because otherwise declarations might not be processed at all.\n+\n          if Is_Base_Type (Ent) then\n-            List_Structural_Record_Layout (Ent, Ent);\n+            begin\n+               List_Structural_Record_Layout (Ent, Ent);\n+\n+            exception\n+               when Incomplete_Layout\n+                  | Not_In_Extended_Main\n+               =>\n+                  List_Record_Layout (Ent);\n+\n+               when others =>\n+                  raise Program_Error;\n+            end;\n          else\n             List_Record_Layout (Ent);\n          end if;"}]}