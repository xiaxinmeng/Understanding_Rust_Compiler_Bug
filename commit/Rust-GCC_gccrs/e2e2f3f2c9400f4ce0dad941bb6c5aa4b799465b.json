{"sha": "e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJlMmYzZjJjOTQwMGY0Y2UwZGFkOTQxYmI2YzVhYTRiNzk5NDY1Yg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-01-05T18:36:26Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-01-05T18:36:26Z"}, "message": "c++: Fix deduction from the type of an NTTP\n\nIn the testcase nontype-auto17.C below, the calls to f and g are invalid\nbecause neither deduction nor defaulting of the template parameter T\nyields a valid specialization.  Deducing T doesn't work because T is\nused only in a non-deduced context, and defaulting T doesn't work\nbecause its default argument makes the type of M invalid.\n\nBut with -std=c++17 or later, we incorrectly accept both calls.\nStarting with C++17 (specifically P0127R2), during deduction we're\nallowed to try to deduce T from the argument '42' that's been\ntentatively deduced for M.  The problem is that when unify walks into\nthe type of M (a TYPENAME_TYPE), it immediately gives up without\nperforming any new unifications (so the type of M is still unknown) --\nand then we go on to unify M with '42' anyway.  Later in\ntype_unification_real, we complete the template argument vector using\nT's default template argument, and end up forming the bogus\nspecializations f<void, 42> and g<S, 42>.\n\nThis patch fixes this issue by checking whether the type of an NTTP is\nstill dependent after walking into its type during unification.  If it\nis, it means we couldn't deduce all the template parameters used in its\ntype, and so we shouldn't yet unify the NTTP.\n\n(The new testcase ttp33.C demonstrates the need for the TEMPLATE_PARM_LEVEL\ncheck; without it, we would ICE on this testcase from the call to tsubst.)\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (unify) <case TEMPLATE_PARM_INDEX>: After walking into\n\tthe type of the NTTP, substitute into the type again.  If the\n\ttype is still dependent, don't unify the NTTP.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/partial5.C: Adjust directives to expect the\n\tsame errors across all dialects.\n\t* g++.dg/cpp1z/nontype-auto17.C: New test.\n\t* g++.dg/cpp1z/nontype-auto18.C: New test.\n\t* g++.dg/template/ttp33.C: New test.", "tree": {"sha": "8c285987ef9295d8b39730e0fd5da8636d13712f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c285987ef9295d8b39730e0fd5da8636d13712f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b/comments", "author": null, "committer": null, "parents": [{"sha": "5de7bf5bc98ec9edc6838a443521204d0eca7605", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5de7bf5bc98ec9edc6838a443521204d0eca7605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5de7bf5bc98ec9edc6838a443521204d0eca7605"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "beabcc4b027c91737f5394ed7fd630de189a5051", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b", "patch": "@@ -23584,13 +23584,21 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t  /* We haven't deduced the type of this parameter yet.  */\n \t  if (cxx_dialect >= cxx17\n \t      /* We deduce from array bounds in try_array_deduction.  */\n-\t      && !(strict & UNIFY_ALLOW_INTEGER))\n+\t      && !(strict & UNIFY_ALLOW_INTEGER)\n+\t      && TEMPLATE_PARM_LEVEL (parm) <= TMPL_ARGS_DEPTH (targs))\n \t    {\n \t      /* Deduce it from the non-type argument.  */\n \t      tree atype = TREE_TYPE (arg);\n \t      RECUR_AND_CHECK_FAILURE (tparms, targs,\n \t\t\t\t       tparm, atype,\n \t\t\t\t       UNIFY_ALLOW_NONE, explain_p);\n+\t      /* Now check whether the type of this parameter is still\n+\t\t dependent, and give up if so.  */\n+\t      ++processing_template_decl;\n+\t      tparm = tsubst (tparm, targs, tf_none, NULL_TREE);\n+\t      --processing_template_decl;\n+\t      if (uses_template_parms (tparm))\n+\t\treturn unify_success (explain_p);\n \t    }\n \t  else\n \t    /* Try again later.  */"}, {"sha": "509eb0e98e3e6e736ab8926852c8f9a1db802945", "filename": "gcc/testsuite/g++.dg/cpp1z/nontype-auto17.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype-auto17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype-auto17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype-auto17.C?ref=e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile { target c++11 } }\n+\n+template <int> struct K { };\n+\n+template <class T = void, typename T::type M> int f(K<M>); // { dg-error \"void\" }\n+int a = f(K<42>{}); // { dg-error \"no match\" }\n+\n+struct S { using type = void; };\n+template <class T = S, typename T::type M> int g(K<M>); // { dg-message \"deduction\" }\n+int b = g(K<42>{}); // { dg-error \"no match\" }"}, {"sha": "936c841ce31e9217c051821e77e12bdb0ac57147", "filename": "gcc/testsuite/g++.dg/cpp1z/nontype-auto18.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype-auto18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype-auto18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype-auto18.C?ref=e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile { target c++11 } }\n+\n+template <int> struct K { };\n+\n+struct S { using type = int; };\n+template <class T = S, typename T::type M> int g(K<M>);\n+int a = g(K<42>{});"}, {"sha": "40d8c45b087954f809ba9045b9d0b573950ae953", "filename": "gcc/testsuite/g++.dg/template/partial5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial5.C?ref=e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b", "patch": "@@ -14,7 +14,7 @@ template<typename T, typename T::foo V>\n struct Y { };\n \n template<typename T, typename U, U v>\n-struct Y<T, v> { }; // { dg-error \"\" \"\" { target { ! c++17 } } }\n+struct Y<T, v> { }; // { dg-error \"\" }\n \n \n template<typename T, T V>"}, {"sha": "cd0de8ca64126afda4af9ef124e7368130cd68fc", "filename": "gcc/testsuite/g++.dg/template/ttp33.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp33.C?ref=e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b", "patch": "@@ -0,0 +1,10 @@\n+// A slight variation of ttp31.C.\n+// { dg-do compile { target c++11 } }\n+\n+template<class TA,\n+\t template<typename TA::type...> class TTA, TA... VA>\n+struct A { };\n+\n+template<class UC, class TC,\n+\t template<typename TC::type...> class TTC, TC... VC>\n+struct C : A<TC, TTC, VC...> { };"}]}