{"sha": "8ffe5488225da983a577c994ae92a986f7ce1a80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZmZTU0ODgyMjVkYTk4M2E1NzdjOTk0YWU5MmE5ODZmN2NlMWE4MA==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2006-03-06T20:39:05Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2006-03-06T20:39:05Z"}, "message": "equiv_1.f90: Replace tab(s) with spaces.\n\n2006-03-06  Steven G. Kargl  <kargls@comcast.net>\n\n    * gfortran.dg/equiv_1.f90: Replace tab(s) with spaces.\n    * gfortran.dg/arrayio_1.f90: Ditto. \n    * gfortran.dg/pr25603.f: Ditto.\n    * gfortran.dg/assumed_dummy_2.f90: Ditto.\n    * gfortran.dg/equiv_2.f90: Ditto.\n    * gfortran.dg/arrayio_2.f90: Ditto.\n    * gfortran.dg/namelist_14.f90: Ditto.\n    * gfortran.dg/g77/cpp6.f: Ditto.\n    * gfortran.dg/g77/cpp5inc.h: Ditto.\n    * gfortran.dg/g77/cpp5.F: Ditto.\n    * gfortran.dg/g77/cpp5.h: Ditto.\n    * gfortran.dg/namelist_15.f90: Ditto.\n    * gfortran.dg/badline.f: Ditto.\n    * gfortran.dg/sibling_dummy_procedure_1.f90: Ditto.\n    * gfortran.dg/sibling_dummy_procedure_2.f90: Ditto.\n    * gfortran.dg/backspace_6.f: Ditto.\n    * gfortran.dg/altreturn_1.f90: Ditto.\n    * gfortran.dg/entry_4.f90: Ditto.\n    * gfortran.dg/implicit_5.f90: Ditto.\n\nFrom-SVN: r111790", "tree": {"sha": "e31e13d82530dd5099a7c4076aeb5babfdf98547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e31e13d82530dd5099a7c4076aeb5babfdf98547"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ffe5488225da983a577c994ae92a986f7ce1a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ffe5488225da983a577c994ae92a986f7ce1a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ffe5488225da983a577c994ae92a986f7ce1a80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ffe5488225da983a577c994ae92a986f7ce1a80/comments", "author": null, "committer": null, "parents": [{"sha": "e3dfd6d5558ea8f9e0834f843803812955ba3c25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3dfd6d5558ea8f9e0834f843803812955ba3c25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3dfd6d5558ea8f9e0834f843803812955ba3c25"}], "stats": {"total": 172, "additions": 97, "deletions": 75}, "files": [{"sha": "14a14695f6e9cff58a3959574ff39590e89ee9ff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -1,3 +1,25 @@\n+2006-03-06  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* gfortran.dg/equiv_1.f90: Replace tab(s) with spaces.\n+\t* gfortran.dg/arrayio_1.f90: Ditto.\n+\t* gfortran.dg/pr25603.f: Ditto.\n+\t* gfortran.dg/assumed_dummy_2.f90: Ditto.\n+\t* gfortran.dg/equiv_2.f90: Ditto.\n+\t* gfortran.dg/arrayio_2.f90: Ditto.\n+\t* gfortran.dg/namelist_14.f90: Ditto.\n+\t* gfortran.dg/g77/cpp6.f: Ditto.\n+\t* gfortran.dg/g77/cpp5inc.h: Ditto.\n+\t* gfortran.dg/g77/cpp5.F: Ditto.\n+\t* gfortran.dg/g77/cpp5.h: Ditto.\n+\t* gfortran.dg/namelist_15.f90: Ditto.\n+\t* gfortran.dg/badline.f: Ditto.\n+\t* gfortran.dg/sibling_dummy_procedure_1.f90: Ditto.\n+\t* gfortran.dg/sibling_dummy_procedure_2.f90: Ditto.\n+\t* gfortran.dg/backspace_6.f: Ditto.\n+\t* gfortran.dg/altreturn_1.f90: Ditto.\n+\t* gfortran.dg/entry_4.f90: Ditto.\n+\t* gfortran.dg/implicit_5.f90: Ditto.\n+\n 2006-03-06  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/15759"}, {"sha": "c0ae15f9a6b20b42c26596295d07b2acc010fd37", "filename": "gcc/testsuite/gfortran.dg/altreturn_1.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_1.f90?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do compile }\n-\tsubroutine foo (a)\n-\treal t, a, baz\n-\tcall bar (*10)\n-\tt = 2 * baz ()\n-\tIF (t.gt.0) t = baz ()\n-10\tEND\n+       subroutine foo (a)\n+       real t, a, baz\n+       call bar (*10)\n+       t = 2 * baz ()\n+       IF (t.gt.0) t = baz ()\n+10     END"}, {"sha": "7b40d65734e2aef3009f1b84ad4fa6929ae18996", "filename": "gcc/testsuite/gfortran.dg/arrayio_1.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_1.f90?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -14,11 +14,11 @@ program arrayio_1\n       read(r,'(3(2x,i4/)/3(3x,i6/))') i\n       if (any(i.ne.(/(j,j=1,6)/))) call abort()\n       do j=1,12\n-\tdo k=1,2\n-\t  if ((j.gt.8.and.k.eq.1).or.(k.eq.2)) then\n-\t    if (r(j,k).ne.'0123456789AB') call abort()\n-\t  end if\n-\tend do\n+         do k=1,2\n+            if ((j.gt.8.and.k.eq.1).or.(k.eq.2)) then\n+              if (r(j,k).ne.'0123456789AB') call abort()\n+            end if\n+         end do\n       end do\n \n  ! Write to a portion of a character array      "}, {"sha": "00b96bf41c65f6400342e58fabf55c209b7baf98", "filename": "gcc/testsuite/gfortran.dg/arrayio_2.f90", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_2.f90?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -17,12 +17,12 @@ program arrayio_2\n      write(r((i-1):(i+1),i), f)\n \n      if ( r(1,1).ne.'hello       ' .or. &\n-\t  r(2,1).ne.'world       ' .or. &\n-\t  r(3,1).ne.'0123456789ab' .or. &\n-\t  r(4,1).ne.'0123456789ab' .or. &\n-\t  r(1,2).ne.'HELLO !     ' .or. &\n-\t  r(2,2).ne.'WORLD       ' .or. &\n-\t  r(3,2).ne.'0123456789ab' .or. &\n-\t  r(4,2).ne.'0123456789ab') call abort()\n+          r(2,1).ne.'world       ' .or. &\n+          r(3,1).ne.'0123456789ab' .or. &\n+          r(4,1).ne.'0123456789ab' .or. &\n+          r(1,2).ne.'HELLO !     ' .or. &\n+          r(2,2).ne.'WORLD       ' .or. &\n+          r(3,2).ne.'0123456789ab' .or. &\n+          r(4,2).ne.'0123456789ab') call abort()\n \n      end program arrayio_2 "}, {"sha": "092941db9e704f2bf97f7ee8d4107156b8607b2f", "filename": "gcc/testsuite/gfortran.dg/assumed_dummy_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_dummy_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_dummy_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_dummy_2.f90?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -9,7 +9,7 @@ subroutine foo (arr)\n   end subroutine foo\n   subroutine bar (arr)\n     double precision :: arr(5,*)\n-    call foo (arr)\t! { dg-error \"cannot be an assumed-size array\" }\n+    call foo (arr)   ! { dg-error \"cannot be an assumed-size array\" }\n     call foo (arr (:, :8))\n   end subroutine\n end"}, {"sha": "51470d595b585372e580ef3ba6c1e3c9931d4a1f", "filename": "gcc/testsuite/gfortran.dg/backspace_6.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_6.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_6.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_6.f?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -27,7 +27,7 @@ program test\n        backspace 11\n        read(11,end=        1004 )idata\n        if(idata(1).ne.-2 .or.idata(datasize).ne.-3) call abort()\n-       stop\t\n+       stop\n  1004  continue\n        end\n-       \n\\ No newline at end of file\n+       "}, {"sha": "59f22e7c37ecae1a766f31fd9290c509a567326f", "filename": "gcc/testsuite/gfortran.dg/badline.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fbadline.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fbadline.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbadline.f?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -1,4 +1,4 @@\n-\tsubroutine foo \n+        subroutine foo \n # 18 \"src/badline.F\" 2\n-\tend\n+        end\n ! { dg-warning \"left but not entered\" \"\" { target *-*-* } 2 }"}, {"sha": "9a3b89a620eaa7228a3510d3ff6658a11310834e", "filename": "gcc/testsuite/gfortran.dg/entry_4.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_4.f90?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile { target i?86-*-* x86_64-*-* } }\n-function f1 () result (r)\t\t! { dg-error \"can't be a POINTER\" }\n+function f1 () result (r)      ! { dg-error \"can't be a POINTER\" }\n integer, pointer :: r\n real e1\n allocate (r)\n@@ -11,14 +11,14 @@ function f1 () result (r)\t\t! { dg-error \"can't be a POINTER\" }\n e1a = 13\n end function\n function f2 ()\n-integer, dimension (2, 7, 6) :: e2\t! { dg-error \"can't be an array\" }\n+integer, dimension (2, 7, 6) :: e2   ! { dg-error \"can't be an array\" }\n f2 = 6\n return\n entry e2 ()\n e2 (:, :, :) = 2\n end function\n-integer(kind=8) function f3 ()\t\t! { dg-error \"can't be of type\" }\n-complex(kind=8) e3\t\t        ! { dg-error \"can't be of type\" }\n+integer(kind=8) function f3 ()      ! { dg-error \"can't be of type\" }\n+complex(kind=8) e3              ! { dg-error \"can't be of type\" }\n f3 = 1\n return\n entry e3 ()"}, {"sha": "e9e44153606b27d38bde70204948c380d4742720", "filename": "gcc/testsuite/gfortran.dg/equiv_1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_1.f90?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -1,9 +1,9 @@\n       program broken_equiv\n-      real d (2)\t! { dg-error \"Inconsistent equivalence rules\" \"d\" }\n-      real e\t\t! { dg-error \"Inconsistent equivalence rules\" \"e\" }\n+      real d (2)   ! { dg-error \"Inconsistent equivalence rules\" \"d\" }\n+      real e      ! { dg-error \"Inconsistent equivalence rules\" \"e\" }\n       equivalence (d (1), e), (d (2), e)\n \n-      real f (2)\t! { dg-error \"Inconsistent equivalence rules\" \"f\" }\n+      real f (2)   ! { dg-error \"Inconsistent equivalence rules\" \"f\" }\n       double precision g (2) ! { dg-error \"Inconsistent equivalence rules\" \"g\" }\n       equivalence (f (1), g (1)), (f (2), g (2)) ! Not standard conforming\n       end"}, {"sha": "c827aecb89aa70d393fdd436163254fa4c127f4c", "filename": "gcc/testsuite/gfortran.dg/equiv_2.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_2.f90?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -1,17 +1,17 @@\n       subroutine broken_equiv1\n       character*4 h\n       character*3 i\n-      equivalence (h(1:3), i(2:1))\t! { dg-error \"has length zero\" }\n+      equivalence (h(1:3), i(2:1))    ! { dg-error \"has length zero\" }\n       end subroutine\n \n       subroutine broken_equiv2\n       character*4 j\n       character*2 k\n-      equivalence (j(2:3), k(1:5))\t! { dg-error \"out of bounds\" }\n+      equivalence (j(2:3), k(1:5))    ! { dg-error \"out of bounds\" }\n       end subroutine\n \n       subroutine broken_equiv3\n       character*4 l\n       character*2 m\n-      equivalence (l(2:3:4), m(1:2))\t! { dg-error \"\\[Ss\\]yntax error\" }\n+      equivalence (l(2:3:4), m(1:2))    ! { dg-error \"\\[Ss\\]yntax error\" }\n       end subroutine"}, {"sha": "9b8d15bd79f6e1e0ecd789c9d6e665fdb65a3cb3", "filename": "gcc/testsuite/gfortran.dg/g77/cpp5.F", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcpp5.F", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcpp5.F", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcpp5.F?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -1,4 +1,4 @@\n-\t! { dg-do run }\n+        ! { dg-do run }\n #include \"cpp5.h\"\n-\tIF (FOO().NE.1) CALL ABORT ()\n-\tEND\n+        IF (FOO().NE.1) CALL ABORT ()\n+        END"}, {"sha": "bb6d1927c4a7f811d317b940230f8506be794d96", "filename": "gcc/testsuite/gfortran.dg/g77/cpp5.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcpp5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcpp5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcpp5.h?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -1,3 +1,3 @@\n-\tFUNCTION FOO()\n+        FUNCTION FOO()\n #include \"cpp5inc.h\"\n-\tEND FUNCTION\n+        END FUNCTION"}, {"sha": "9a2a1588531248d62523048c4d4b785cdf4c8c40", "filename": "gcc/testsuite/gfortran.dg/g77/cpp5inc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcpp5inc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcpp5inc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcpp5inc.h?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -1 +1 @@\n-\tFOO = 1\n+        FOO = 1"}, {"sha": "4160cfea17b9df7573e71c49f463fbaeefb0f2e5", "filename": "gcc/testsuite/gfortran.dg/g77/cpp6.f", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcpp6.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcpp6.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcpp6.f?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -2,7 +2,7 @@\n # 1 \"<built-in>\"\n # 1 \"<command line>\"\n # 1 \"test.F\"\n-\t! { dg-do compile }\n+! { dg-do compile }\n \n # 1 \"A234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\" 1\n \n@@ -11,10 +11,10 @@\n # 1 \"C234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\" 1\n \n # 1 \"D234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\" 1\n-\tPARAMETER (I=1)\n+       PARAMETER (I=1)\n \n # 2 \"C234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\" 2\n # 2 \"B234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\" 2\n # 2 \"A234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\" 2\n # 3 \"test.F\" 2\n-\tEND\n+       END"}, {"sha": "fcfb6944d8f58d2fe909768f0814274bb2bb50be", "filename": "gcc/testsuite/gfortran.dg/implicit_5.f90", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_5.f90?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -1,22 +1,22 @@\n ! PR fortran/21729\n ! { dg-do compile }\n-function f1 ()\t! { dg-error \"has no IMPLICIT type\" \"f1\" }\n-\timplicit none\n+function f1 ()   ! { dg-error \"has no IMPLICIT type\" \"f1\" }\n+   implicit none\n end function f1\n function f2 () result (r2) ! { dg-error \"has no IMPLICIT type\" \"r2\" }\n-\timplicit none\n+   implicit none\n end function f2\n-function f3 ()\t! { dg-error \"has no IMPLICIT type\" \"f3\" }\n-\timplicit none\n-entry e3 ()\t! { dg-error \"has no IMPLICIT type\" \"e3\" }\n+function f3 ()   ! { dg-error \"has no IMPLICIT type\" \"f3\" }\n+   implicit none\n+entry e3 ()   ! { dg-error \"has no IMPLICIT type\" \"e3\" }\n end function f3\n function f4 ()\n-\timplicit none\n-\treal f4\n-entry e4 ()\t! { dg-error \"has no IMPLICIT type\" \"e4\" }\n+   implicit none\n+   real f4\n+entry e4 ()   ! { dg-error \"has no IMPLICIT type\" \"e4\" }\n end function f4\n-function f5 ()\t! { dg-error \"has no IMPLICIT type\" \"f5\" }\n-\timplicit none\n+function f5 ()   ! { dg-error \"has no IMPLICIT type\" \"f5\" }\n+   implicit none\n entry e5 ()\n-\treal e5\n+   real e5\n end function f5"}, {"sha": "b8d7e9bc6e77c0e52242d83a9f7b9a00a2330de8", "filename": "gcc/testsuite/gfortran.dg/namelist_14.f90", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_14.f90?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -77,18 +77,18 @@ subroutine foo (i, dt, pi, chs, cha)\n     close (10)\n \n     if (.not.(dttest (dt(1),  mt ((/99,999,9999,99999/))) .and.  &\n-\t      dttest (dt(2),  mt ((/99,999,9999,99999/))) .and.  &\n-\t      dttest (dtl(1), mt ((/41, 42, 43, 44/))) .and.     &\n-\t      dttest (dtl(2), mt ((/41, 42, 43, 44/))) .and.     &\n-\t      dttest (dts, mt ((/1, 2, 3, 4/))) .and.            &\n-\t      dttest (cdt, mt ((/-99,-999,-9999,-99999/))) .and. &\n-\t      all (j ==(/21, 21/)) .and.                         &\n-\t      all (i ==(/101, 201/)) .and.                       &\n-\t      (pi == 3.14159_8) .and.                            &\n-\t      (chs == \"singleton\") .and.                         &\n-\t      (chl == \"abcdefg\") .and.                           &\n-\t      (cha(1)(1:10) == \"first    \") .and.                &\n-\t      (cha(2)(1:10) == \"second    \"))) call abort ()\n+          dttest (dt(2),  mt ((/99,999,9999,99999/))) .and.  &\n+          dttest (dtl(1), mt ((/41, 42, 43, 44/))) .and.     &\n+          dttest (dtl(2), mt ((/41, 42, 43, 44/))) .and.     &\n+          dttest (dts, mt ((/1, 2, 3, 4/))) .and.            &\n+          dttest (cdt, mt ((/-99,-999,-9999,-99999/))) .and. &\n+          all (j ==(/21, 21/)) .and.                         &\n+          all (i ==(/101, 201/)) .and.                       &\n+          (pi == 3.14159_8) .and.                            &\n+          (chs == \"singleton\") .and.                         &\n+          (chl == \"abcdefg\") .and.                           &\n+          (cha(1)(1:10) == \"first    \") .and.                &\n+          (cha(2)(1:10) == \"second    \"))) call abort ()\n \n     end subroutine foo\n end program namelist_14 "}, {"sha": "a6d449b4879f4ec7c7d50a75e9736e4873c25528", "filename": "gcc/testsuite/gfortran.dg/namelist_15.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_15.f90?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -46,14 +46,14 @@ program namelist_15\n   if (.not. ((x(1)%i(1) == 3)          .and. &\n              (x(1)%i(2) == 4)          .and. &\n              (x(1)%m(1)%ch(1) == \"dz\") .and. &\n-\t     (x(1)%m(1)%ch(2) == \"ez\") .and. &\n+             (x(1)%m(1)%ch(2) == \"ez\") .and. &\n              (x(1)%m(2)%ch(1) == \"fz\") .and. &\n-\t     (x(1)%m(2)%ch(2) == \"gz\") .and. &\n+             (x(1)%m(2)%ch(2) == \"gz\") .and. &\n              (x(2)%i(1) == -3)         .and. &\n              (x(2)%i(2) == -4)         .and. &\n              (x(2)%m(1)%ch(1) == \"hz\") .and. &\n-\t     (x(2)%m(1)%ch(2) == \"qz\") .and. &\n+             (x(2)%m(1)%ch(2) == \"qz\") .and. &\n              (x(2)%m(2)%ch(1) == \"wz\") .and. &\n-\t     (x(2)%m(2)%ch(2) == \"kz\"))) call abort ()\n+             (x(2)%m(2)%ch(2) == \"kz\"))) call abort ()\n \n end program namelist_15"}, {"sha": "a818d5d29f9db21bd55042bdab4724fbbd332f72", "filename": "gcc/testsuite/gfortran.dg/pr25603.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr25603.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr25603.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr25603.f?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -41,7 +41,7 @@ SUBROUTINE BAR1(NX,NY,NZ,NT,NTIME,NWINDX,NWINDY,NSINKS,NFILT,\n       DIMENSION  WORK(*)\n \n       if (XSTART .NE. 201.0) then\n-\tcall abort\n+       call abort\n       endif\n \n       CALL BAR2(NX,NY,NZ,NT,NTIME,NWINDX,NWINDY,NSINKS,NFILT,XSTART,"}, {"sha": "2c7acbe1ba505e7dd760abbfa44b3516c3e5a7e2", "filename": "gcc/testsuite/gfortran.dg/sibling_dummy_procedure_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fsibling_dummy_procedure_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fsibling_dummy_procedure_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsibling_dummy_procedure_1.f90?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -15,15 +15,15 @@ module foo\n    subroutine bar(self, z)\n       interface\n          function self(z) result(res)\n-\t    real z\n+        real z\n             real(kind=kind(1.0d0)) :: res\n          end function\n       end interface\n    end subroutine\n    subroutine xxx(self,z)\n       interface\n          function self(z) result(res)\n-\t    real z\n+        real z\n             real(kind=kind(1.0d0)) :: res\n          end function\n       end interface"}, {"sha": "042666016f79c182e748d0893e54319410481cdf", "filename": "gcc/testsuite/gfortran.dg/sibling_dummy_procedure_2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fsibling_dummy_procedure_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe5488225da983a577c994ae92a986f7ce1a80/gcc%2Ftestsuite%2Fgfortran.dg%2Fsibling_dummy_procedure_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsibling_dummy_procedure_2.f90?ref=8ffe5488225da983a577c994ae92a986f7ce1a80", "patch": "@@ -15,15 +15,15 @@ module foo\n    subroutine bar(self, z)\n       interface\n          function self(z) result(res)\n-\t    real z\n+        real z\n             real(kind=kind(1.0d0)) :: res\n          end function\n       end interface\n    end subroutine\n    subroutine xxx(self,z)\n       interface\n          function self(z) result(res)\n-\t    real z\n+        real z\n             real(kind=kind(1.0d0)) :: res\n          end function\n       end interface"}]}