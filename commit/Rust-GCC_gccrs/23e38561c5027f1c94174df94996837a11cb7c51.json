{"sha": "23e38561c5027f1c94174df94996837a11cb7c51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNlMzg1NjFjNTAyN2YxYzk0MTc0ZGY5NDk5NjgzN2ExMWNiN2M1MQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-05-18T09:19:20Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-05-18T09:19:20Z"}, "message": "re PR fortran/36947 (Attributes not fully checked comparing actual vs dummy procedure)\n\n2009-05-18  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/36947\n\tPR fortran/40039\n\t* expr.c (gfc_check_pointer_assign): Check intents when comparing\n\tinterfaces.\n\t* gfortran.h (typedef struct gfc_intrinsic_arg): Add 'intent' member.\n\t(gfc_compare_interfaces): Additional argument.\n\t* interface.c (operator_correspondence): Add check for equality of\n\tintents, and new argument 'intent_check'.\n\t(gfc_compare_interfaces): New argument 'intent_check', which is passed\n\ton to operator_correspondence.\n\t(check_interface1): Don't check intents when comparing interfaces.\n\t(compare_parameter): Do check intents when comparing interfaces.\n\t* intrinsic.c (add_sym): Add intents for arguments of intrinsic\n\tprocedures.\n\t(add_sym_1,add_sym_1s,add_sym_1m,add_sym_2,add_sym_2s,add_sym_3,\n\tadd_sym_3ml,add_sym_3red,add_sym_3s,add_sym_4): Use INTENT_IN by\n\tdefault.\n\t(add_sym_1_intent,add_sym_1s_intent,add_sym_2s_intent,add_sym_3s_intent)\n\t: New functions to add intrinsic symbols, specifying custom intents.\n\t(add_sym_4s,add_sym_5s): Add new arguments to specify intents.\n\t(add_functions,add_subroutines): Add intents for various intrinsics.\n\t* resolve.c (check_generic_tbp_ambiguity): Don't check intents when\n\tcomparing interfaces.\n\t* symbol.c (gfc_copy_formal_args_intr): Copy intent.\n\n\n2009-05-18  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/36947\n\tPR fortran/40039\n\t* gfortran.dg/interface_27.f90: New.\n\t* gfortran.dg/interface_28.f90: New.\n\t* gfortran.dg/proc_ptr_11.f90: Fixing invalid test case.\n\t* gfortran.dg/proc_ptr_result_1.f90: Ditto.\n\nFrom-SVN: r147655", "tree": {"sha": "d8f5a5199d69060ee64ad6792b13388fc7249fdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8f5a5199d69060ee64ad6792b13388fc7249fdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23e38561c5027f1c94174df94996837a11cb7c51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23e38561c5027f1c94174df94996837a11cb7c51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23e38561c5027f1c94174df94996837a11cb7c51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23e38561c5027f1c94174df94996837a11cb7c51/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75df395f15f2641bfcae7f1179d3ef963771379c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75df395f15f2641bfcae7f1179d3ef963771379c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75df395f15f2641bfcae7f1179d3ef963771379c"}], "stats": {"total": 492, "additions": 379, "deletions": 113}, "files": [{"sha": "a47a3eeb7f7c29ef8019cb18f0ce742982fecfc5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=23e38561c5027f1c94174df94996837a11cb7c51", "patch": "@@ -1,3 +1,30 @@\n+2009-05-18  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/36947\n+\tPR fortran/40039\n+\t* expr.c (gfc_check_pointer_assign): Check intents when comparing\n+\tinterfaces.\n+\t* gfortran.h (typedef struct gfc_intrinsic_arg): Add 'intent' member.\n+\t(gfc_compare_interfaces): Additional argument.\n+\t* interface.c (operator_correspondence): Add check for equality of\n+\tintents, and new argument 'intent_check'.\n+\t(gfc_compare_interfaces): New argument 'intent_check', which is passed\n+\ton to operator_correspondence.\n+\t(check_interface1): Don't check intents when comparing interfaces.\n+\t(compare_parameter): Do check intents when comparing interfaces.\n+\t* intrinsic.c (add_sym): Add intents for arguments of intrinsic\n+\tprocedures.\n+\t(add_sym_1,add_sym_1s,add_sym_1m,add_sym_2,add_sym_2s,add_sym_3,\n+\tadd_sym_3ml,add_sym_3red,add_sym_3s,add_sym_4): Use INTENT_IN by\n+\tdefault.\n+\t(add_sym_1_intent,add_sym_1s_intent,add_sym_2s_intent,add_sym_3s_intent)\n+\t: New functions to add intrinsic symbols, specifying custom intents.\n+\t(add_sym_4s,add_sym_5s): Add new arguments to specify intents.\n+\t(add_functions,add_subroutines): Add intents for various intrinsics.\n+\t* resolve.c (check_generic_tbp_ambiguity): Don't check intents when\n+\tcomparing interfaces.\n+\t* symbol.c (gfc_copy_formal_args_intr): Copy intent.\n+\n 2009-05-17  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* iso-fortran-env.def: Define INT8, INT16, INT32, INT64, REAL32,"}, {"sha": "2c70ba6bb98a16957ac539547b89293710ac81cd", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=23e38561c5027f1c94174df94996837a11cb7c51", "patch": "@@ -3176,7 +3176,7 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n \treturn SUCCESS;\n       if (rvalue->expr_type == EXPR_VARIABLE\n \t  && !gfc_compare_interfaces (lvalue->symtree->n.sym,\n-\t\t\t\t      rvalue->symtree->n.sym, 0))\n+\t\t\t\t      rvalue->symtree->n.sym, 0, 1))\n \t{\n \t  gfc_error (\"Interfaces don't match \"\n \t\t     \"in procedure pointer assignment at %L\", &rvalue->where);"}, {"sha": "8ed05f2d6dd4a483fd0ab19288504799f1186cb0", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=23e38561c5027f1c94174df94996837a11cb7c51", "patch": "@@ -1445,6 +1445,7 @@ typedef struct gfc_intrinsic_arg\n \n   gfc_typespec ts;\n   int optional;\n+  ENUM_BITFIELD (sym_intent) intent:2;\n   gfc_actual_arglist *actual;\n \n   struct gfc_intrinsic_arg *next;\n@@ -2566,7 +2567,7 @@ gfc_try gfc_ref_dimen_size (gfc_array_ref *, int dimen, mpz_t *);\n void gfc_free_interface (gfc_interface *);\n int gfc_compare_derived_types (gfc_symbol *, gfc_symbol *);\n int gfc_compare_types (gfc_typespec *, gfc_typespec *);\n-int gfc_compare_interfaces (gfc_symbol*, gfc_symbol*, int);\n+int gfc_compare_interfaces (gfc_symbol*, gfc_symbol*, int, int);\n void gfc_check_interfaces (gfc_namespace *);\n void gfc_procedure_use (gfc_symbol *, gfc_actual_arglist **, locus *);\n gfc_symbol *gfc_search_interface (gfc_interface *, int,"}, {"sha": "48c026cb2fece78882fd20e5b859357cc4283c4b", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=23e38561c5027f1c94174df94996837a11cb7c51", "patch": "@@ -873,23 +873,32 @@ count_types_test (gfc_formal_arglist *f1, gfc_formal_arglist *f2)\n    which makes this test much easier than that for generic tests.\n \n    This subroutine is also used when comparing a formal and actual\n-   argument list when an actual parameter is a dummy procedure.  At\n-   that point, two formal interfaces must be compared for equality\n-   which is what happens here.  */\n+   argument list when an actual parameter is a dummy procedure, and in\n+   procedure pointer assignments. In these cases, two formal interfaces must be\n+   compared for equality which is what happens here. 'intent_flag' specifies\n+   whether the intents of the arguments are required to match, which is not the\n+   case for ambiguity checks.  */\n \n static int\n-operator_correspondence (gfc_formal_arglist *f1, gfc_formal_arglist *f2)\n+operator_correspondence (gfc_formal_arglist *f1, gfc_formal_arglist *f2,\n+\t\t\t int intent_flag)\n {\n   for (;;)\n     {\n+      /* Check existence.  */\n       if (f1 == NULL && f2 == NULL)\n \tbreak;\n       if (f1 == NULL || f2 == NULL)\n \treturn 1;\n \n+      /* Check type and rank.  */\n       if (!compare_type_rank (f1->sym, f2->sym))\n \treturn 1;\n \n+      /* Check intent.  */\n+      if (intent_flag && (f1->sym->attr.intent != f2->sym->attr.intent))\n+       return 1;\n+\n       f1 = f1->next;\n       f2 = f2->next;\n     }\n@@ -961,7 +970,8 @@ generic_correspondence (gfc_formal_arglist *f1, gfc_formal_arglist *f2)\n    would be ambiguous between the two interfaces, zero otherwise.  */\n \n int\n-gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, int generic_flag)\n+gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, int generic_flag,\n+\t\t\tint intent_flag)\n {\n   gfc_formal_arglist *f1, *f2;\n \n@@ -1001,7 +1011,7 @@ gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, int generic_flag)\n     }\n   else\n     {\n-      if (operator_correspondence (f1, f2))\n+      if (operator_correspondence (f1, f2, intent_flag))\n \treturn 0;\n     }\n \n@@ -1080,7 +1090,7 @@ check_interface1 (gfc_interface *p, gfc_interface *q0,\n \tif (p->sym->name == q->sym->name && p->sym->module == q->sym->module)\n \t  continue;\n \n-\tif (gfc_compare_interfaces (p->sym, q->sym, generic_flag))\n+\tif (gfc_compare_interfaces (p->sym, q->sym, generic_flag, 0))\n \t  {\n \t    if (referenced)\n \t      {\n@@ -1362,7 +1372,7 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \t  || actual->symtree->n.sym->attr.external)\n \treturn 1;\t\t/* Assume match.  */\n \n-      if (!gfc_compare_interfaces (formal, actual->symtree->n.sym, 0))\n+      if (!gfc_compare_interfaces (formal, actual->symtree->n.sym, 0, 1))\n \tgoto proc_fail;\n \n       return 1;"}, {"sha": "5d2747a15265bde476441c5520cee39460947f0f", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 234, "deletions": 98, "changes": 332, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=23e38561c5027f1c94174df94996837a11cb7c51", "patch": "@@ -227,11 +227,12 @@ do_check (gfc_intrinsic_sym *specific, gfc_actual_arglist *arg)\n       simplify   pointer to simplification function\n       resolve    pointer to resolution function\n \n-   Optional arguments come in multiples of four:\n-      char *    name of argument\n-      bt\ttype of argument\n-      int       kind of argument\n-      int       arg optional flag (1=optional, 0=required)\n+   Optional arguments come in multiples of five:\n+      char *      name of argument\n+      bt          type of argument\n+      int         kind of argument\n+      int         arg optional flag (1=optional, 0=required)\n+      sym_intent  intent of argument\n \n    The sequence is terminated by a NULL name.\n \n@@ -249,6 +250,7 @@ add_sym (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt type\n {\n   char buf[GFC_MAX_SYMBOL_LEN + 11]; /* 10 for '_gfortran_', 1 for '\\0'  */\n   int optional, first_flag;\n+  sym_intent intent;\n   va_list argp;\n \n   switch (sizing)\n@@ -301,6 +303,7 @@ add_sym (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt type\n       type = (bt) va_arg (argp, int);\n       kind = va_arg (argp, int);\n       optional = va_arg (argp, int);\n+      intent = va_arg (argp, int);\n \n       if (sizing != SZ_NOTHING)\n \tnargs++;\n@@ -319,6 +322,7 @@ add_sym (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt type\n \t  next_arg->ts.type = type;\n \t  next_arg->ts.kind = kind;\n \t  next_arg->optional = optional;\n+\t  next_arg->intent = intent;\n \t}\n     }\n \n@@ -390,7 +394,7 @@ add_sym_1 (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt ty\n   rf.f1 = resolve;\n \n   add_sym (name, id, cl, actual_ok, type, kind, standard, cf, sf, rf,\n-\t   a1, type1, kind1, optional1,\n+\t   a1, type1, kind1, optional1, INTENT_IN,\n \t   (void *) 0);\n }\n \n@@ -414,7 +418,59 @@ add_sym_1s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind,\n   rf.s1 = resolve;\n \n   add_sym (name, id, cl, ACTUAL_NO, type, kind, standard, cf, sf, rf,\n-\t   a1, type1, kind1, optional1,\n+\t   a1, type1, kind1, optional1, INTENT_IN,\n+\t   (void *) 0);\n+}\n+\n+\n+/* Add a symbol to the function list where the function takes\n+   1 arguments, specifying the intent of the argument.  */\n+\n+static void\n+add_sym_1_intent (const char *name, gfc_isym_id id, enum klass cl,\n+\t\t  int actual_ok, bt type, int kind, int standard,\n+\t\t  gfc_try (*check) (gfc_expr *),\n+\t\t  gfc_expr *(*simplify) (gfc_expr *),\n+\t\t  void (*resolve) (gfc_expr *, gfc_expr *),\n+\t\t  const char *a1, bt type1, int kind1, int optional1,\n+\t\t  sym_intent intent1)\n+{\n+  gfc_check_f cf;\n+  gfc_simplify_f sf;\n+  gfc_resolve_f rf;\n+\n+  cf.f1 = check;\n+  sf.f1 = simplify;\n+  rf.f1 = resolve;\n+\n+  add_sym (name, id, cl, actual_ok, type, kind, standard, cf, sf, rf,\n+\t   a1, type1, kind1, optional1, intent1,\n+\t   (void *) 0);\n+}\n+\n+\n+/* Add a symbol to the subroutine list where the subroutine takes\n+   1 arguments, specifying the intent of the argument.  */\n+\n+static void\n+add_sym_1s_intent (const char *name, gfc_isym_id id, enum klass cl, bt type,\n+\t\t   int kind, int standard,\n+\t\t   gfc_try (*check) (gfc_expr *),\n+\t\t   gfc_expr *(*simplify) (gfc_expr *),\n+\t\t   void (*resolve) (gfc_code *),\n+\t\t   const char *a1, bt type1, int kind1, int optional1,\n+\t\t   sym_intent intent1)\n+{\n+  gfc_check_f cf;\n+  gfc_simplify_f sf;\n+  gfc_resolve_f rf;\n+\n+  cf.f1 = check;\n+  sf.f1 = simplify;\n+  rf.s1 = resolve;\n+\n+  add_sym (name, id, cl, ACTUAL_NO, type, kind, standard, cf, sf, rf,\n+\t   a1, type1, kind1, optional1, intent1,\n \t   (void *) 0);\n }\n \n@@ -440,8 +496,8 @@ add_sym_1m (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt t\n   rf.f1m = resolve;\n \n   add_sym (name, id, cl, actual_ok, type, kind, standard, cf, sf, rf,\n-\t   a1, type1, kind1, optional1,\n-\t   a2, type2, kind2, optional2,\n+\t   a1, type1, kind1, optional1, INTENT_IN,\n+\t   a2, type2, kind2, optional2, INTENT_IN,\n \t   (void *) 0);\n }\n \n@@ -467,8 +523,8 @@ add_sym_2 (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt ty\n   rf.f2 = resolve;\n \n   add_sym (name, id, cl, actual_ok, type, kind, standard, cf, sf, rf,\n-\t   a1, type1, kind1, optional1,\n-\t   a2, type2, kind2, optional2,\n+\t   a1, type1, kind1, optional1, INTENT_IN,\n+\t   a2, type2, kind2, optional2, INTENT_IN,\n \t   (void *) 0);\n }\n \n@@ -493,8 +549,36 @@ add_sym_2s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind,\n   rf.s1 = resolve;\n \n   add_sym (name, id, cl, ACTUAL_NO, type, kind, standard, cf, sf, rf,\n-\t   a1, type1, kind1, optional1,\n-\t   a2, type2, kind2, optional2,\n+\t   a1, type1, kind1, optional1, INTENT_IN,\n+\t   a2, type2, kind2, optional2, INTENT_IN,\n+\t   (void *) 0);\n+}\n+\n+\n+/* Add a symbol to the subroutine list where the subroutine takes\n+   2 arguments, specifying the intent of the arguments.  */\n+\n+static void\n+add_sym_2s_intent (const char *name, gfc_isym_id id, enum klass cl, bt type,\n+\t\t   int kind, int standard,\n+\t\t   gfc_try (*check) (gfc_expr *, gfc_expr *),\n+\t\t   gfc_expr *(*simplify) (gfc_expr *, gfc_expr *),\n+\t\t   void (*resolve) (gfc_code *),\n+\t\t   const char *a1, bt type1, int kind1, int optional1,\n+\t\t   sym_intent intent1, const char *a2, bt type2, int kind2,\n+\t\t   int optional2, sym_intent intent2)\n+{\n+  gfc_check_f cf;\n+  gfc_simplify_f sf;\n+  gfc_resolve_f rf;\n+\n+  cf.f2 = check;\n+  sf.f2 = simplify;\n+  rf.s1 = resolve;\n+\n+  add_sym (name, id, cl, ACTUAL_NO, type, kind, standard, cf, sf, rf,\n+\t   a1, type1, kind1, optional1, intent1,\n+\t   a2, type2, kind2, optional2, intent2,\n \t   (void *) 0);\n }\n \n@@ -521,9 +605,9 @@ add_sym_3 (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt ty\n   rf.f3 = resolve;\n \n   add_sym (name, id, cl, actual_ok, type, kind, standard, cf, sf, rf,\n-\t   a1, type1, kind1, optional1,\n-\t   a2, type2, kind2, optional2,\n-\t   a3, type3, kind3, optional3,\n+\t   a1, type1, kind1, optional1, INTENT_IN,\n+\t   a2, type2, kind2, optional2, INTENT_IN,\n+\t   a3, type3, kind3, optional3, INTENT_IN,\n \t   (void *) 0);\n }\n \n@@ -550,9 +634,9 @@ add_sym_3ml (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt\n   rf.f3 = resolve;\n \n   add_sym (name, id, cl, actual_ok, type, kind, standard, cf, sf, rf,\n-\t   a1, type1, kind1, optional1,\n-\t   a2, type2, kind2, optional2,\n-\t   a3, type3, kind3, optional3,\n+\t   a1, type1, kind1, optional1, INTENT_IN,\n+\t   a2, type2, kind2, optional2, INTENT_IN,\n+\t   a3, type3, kind3, optional3, INTENT_IN,\n \t   (void *) 0);\n }\n \n@@ -579,9 +663,9 @@ add_sym_3red (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt\n   rf.f3 = resolve;\n \n   add_sym (name, id, cl, actual_ok, type, kind, standard, cf, sf, rf,\n-\t   a1, type1, kind1, optional1,\n-\t   a2, type2, kind2, optional2,\n-\t   a3, type3, kind3, optional3,\n+\t   a1, type1, kind1, optional1, INTENT_IN,\n+\t   a2, type2, kind2, optional2, INTENT_IN,\n+\t   a3, type3, kind3, optional3, INTENT_IN,\n \t   (void *) 0);\n }\n \n@@ -607,9 +691,39 @@ add_sym_3s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind,\n   rf.s1 = resolve;\n \n   add_sym (name, id, cl, ACTUAL_NO, type, kind, standard, cf, sf, rf,\n-\t   a1, type1, kind1, optional1,\n-\t   a2, type2, kind2, optional2,\n-\t   a3, type3, kind3, optional3,\n+\t   a1, type1, kind1, optional1, INTENT_IN,\n+\t   a2, type2, kind2, optional2, INTENT_IN,\n+\t   a3, type3, kind3, optional3, INTENT_IN,\n+\t   (void *) 0);\n+}\n+\n+\n+/* Add a symbol to the subroutine list where the subroutine takes\n+   3 arguments, specifying the intent of the arguments.  */\n+\n+static void\n+add_sym_3s_intent (const char *name, gfc_isym_id id, enum klass cl, bt type,\n+\t\t   int kind, int standard,\n+\t\t   gfc_try (*check) (gfc_expr *, gfc_expr *, gfc_expr *),\n+\t\t   gfc_expr *(*simplify) (gfc_expr *, gfc_expr *, gfc_expr *),\n+\t\t   void (*resolve) (gfc_code *),\n+\t\t   const char *a1, bt type1, int kind1, int optional1,\n+\t\t   sym_intent intent1, const char *a2, bt type2, int kind2,\n+\t\t   int optional2, sym_intent intent2, const char *a3, bt type3,\n+\t\t   int kind3, int optional3, sym_intent intent3)\n+{\n+  gfc_check_f cf;\n+  gfc_simplify_f sf;\n+  gfc_resolve_f rf;\n+\n+  cf.f3 = check;\n+  sf.f3 = simplify;\n+  rf.s1 = resolve;\n+\n+  add_sym (name, id, cl, ACTUAL_NO, type, kind, standard, cf, sf, rf,\n+\t   a1, type1, kind1, optional1, intent1,\n+\t   a2, type2, kind2, optional2, intent2,\n+\t   a3, type3, kind3, optional3, intent3,\n \t   (void *) 0);\n }\n \n@@ -639,10 +753,10 @@ add_sym_4 (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt ty\n   rf.f4 = resolve;\n \n   add_sym (name, id, cl, actual_ok, type, kind, standard, cf, sf, rf,\n-\t   a1, type1, kind1, optional1,\n-\t   a2, type2, kind2, optional2,\n-\t   a3, type3, kind3, optional3,\n-\t   a4, type4, kind4, optional4,\n+\t   a1, type1, kind1, optional1, INTENT_IN,\n+\t   a2, type2, kind2, optional2, INTENT_IN,\n+\t   a3, type3, kind3, optional3, INTENT_IN,\n+\t   a4, type4, kind4, optional4, INTENT_IN,\n \t   (void *) 0);\n }\n \n@@ -651,15 +765,17 @@ add_sym_4 (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt ty\n    4 arguments.  */\n \n static void\n-add_sym_4s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind, int standard,\n+add_sym_4s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind,\n+\t    int standard,\n \t    gfc_try (*check) (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *),\n \t    gfc_expr *(*simplify) (gfc_expr *, gfc_expr *, gfc_expr *,\n \t\t\t\t   gfc_expr *),\n \t    void (*resolve) (gfc_code *),\n \t    const char *a1, bt type1, int kind1, int optional1,\n-\t    const char *a2, bt type2, int kind2, int optional2,\n-\t    const char *a3, bt type3, int kind3, int optional3,\n-\t    const char *a4, bt type4, int kind4, int optional4)\n+\t    sym_intent intent1, const char *a2, bt type2, int kind2,\n+\t    int optional2, sym_intent intent2, const char *a3, bt type3,\n+\t    int kind3, int optional3, sym_intent intent3, const char *a4,\n+\t    bt type4, int kind4, int optional4, sym_intent intent4)\n {\n   gfc_check_f cf;\n   gfc_simplify_f sf;\n@@ -670,10 +786,10 @@ add_sym_4s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind,\n   rf.s1 = resolve;\n \n   add_sym (name, id, cl, ACTUAL_NO, type, kind, standard, cf, sf, rf,\n-\t   a1, type1, kind1, optional1,\n-\t   a2, type2, kind2, optional2,\n-\t   a3, type3, kind3, optional3,\n-\t   a4, type4, kind4, optional4,\n+\t   a1, type1, kind1, optional1, intent1,\n+\t   a2, type2, kind2, optional2, intent2,\n+\t   a3, type3, kind3, optional3, intent3,\n+\t   a4, type4, kind4, optional4, intent4,\n \t   (void *) 0);\n }\n \n@@ -682,17 +798,20 @@ add_sym_4s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind,\n    5 arguments.  */\n \n static void\n-add_sym_5s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind, int standard,\n+add_sym_5s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind,\n+\t    int standard,\n \t    gfc_try (*check) (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *,\n \t\t\t  gfc_expr *),\n \t    gfc_expr *(*simplify) (gfc_expr *, gfc_expr *, gfc_expr *,\n \t\t\t\t   gfc_expr *, gfc_expr *),\n \t    void (*resolve) (gfc_code *),\n \t    const char *a1, bt type1, int kind1, int optional1,\n-\t    const char *a2, bt type2, int kind2, int optional2,\n-\t    const char *a3, bt type3, int kind3, int optional3,\n-\t    const char *a4, bt type4, int kind4, int optional4,\n-\t    const char *a5, bt type5, int kind5, int optional5) \n+\t    sym_intent intent1, const char *a2, bt type2, int kind2,\n+\t    int optional2, sym_intent intent2, const char *a3, bt type3,\n+\t    int kind3, int optional3, sym_intent intent3, const char *a4,\n+\t    bt type4, int kind4, int optional4, sym_intent intent4,\n+\t    const char *a5, bt type5, int kind5, int optional5,\n+\t    sym_intent intent5) \n {\n   gfc_check_f cf;\n   gfc_simplify_f sf;\n@@ -703,11 +822,11 @@ add_sym_5s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind,\n   rf.s1 = resolve;\n \n   add_sym (name, id, cl, ACTUAL_NO, type, kind, standard, cf, sf, rf,\n-\t   a1, type1, kind1, optional1,\n-\t   a2, type2, kind2, optional2,\n-\t   a3, type3, kind3, optional3,\n-\t   a4, type4, kind4, optional4,\n-\t   a5, type5, kind5, optional5,\n+\t   a1, type1, kind1, optional1, intent1,\n+\t   a2, type2, kind2, optional2, intent2,\n+\t   a3, type3, kind3, optional3, intent3,\n+\t   a4, type4, kind4, optional4, intent4,\n+\t   a5, type5, kind5, optional5, intent5,\n \t   (void *) 0);\n }\n \n@@ -2102,9 +2221,9 @@ add_functions (void)\n \n   make_generic (\"precision\", GFC_ISYM_PRECISION, GFC_STD_F95);\n \n-  add_sym_1 (\"present\", GFC_ISYM_PRESENT, CLASS_INQUIRY, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_F95,\n-\t     gfc_check_present, NULL, NULL,\n-\t     a, BT_REAL, dr, REQUIRED);\n+  add_sym_1_intent (\"present\", GFC_ISYM_PRESENT, CLASS_INQUIRY, ACTUAL_NO,\n+\t\t    BT_LOGICAL, dl, GFC_STD_F95, gfc_check_present, NULL, NULL,\n+\t\t    a, BT_REAL, dr, REQUIRED, INTENT_UNKNOWN);\n \n   make_generic (\"present\", GFC_ISYM_PRESENT, GFC_STD_F95);\n \n@@ -2508,9 +2627,10 @@ add_subroutines (void)\n \n   make_noreturn();\n \n-  add_sym_1s (\"cpu_time\", GFC_ISYM_CPU_TIME, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_F95,\n-\t      gfc_check_cpu_time, NULL, gfc_resolve_cpu_time,\n-\t      tm, BT_REAL, dr, REQUIRED);\n+  add_sym_1s_intent (\"cpu_time\", GFC_ISYM_CPU_TIME, NO_CLASS, BT_UNKNOWN, 0,\n+\t\t     GFC_STD_F95, gfc_check_cpu_time, NULL,\n+\t\t     gfc_resolve_cpu_time,\n+\t\t     tm, BT_REAL, dr, REQUIRED, INTENT_OUT);\n \n   /* More G77 compatibility garbage.  */\n   add_sym_2s (\"ctime\", GFC_ISYM_CTIME, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n@@ -2546,10 +2666,12 @@ add_subroutines (void)\n \t      name, BT_CHARACTER, dc, REQUIRED, md, BT_CHARACTER, dc, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_4s (\"date_and_time\", GFC_ISYM_DATE_AND_TIME, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_F95,\n-\t      gfc_check_date_and_time, NULL, NULL,\n-\t      dt, BT_CHARACTER, dc, OPTIONAL, tm, BT_CHARACTER, dc, OPTIONAL,\n-\t      zn, BT_CHARACTER, dc, OPTIONAL, vl, BT_INTEGER, di, OPTIONAL);\n+  add_sym_4s (\"date_and_time\", GFC_ISYM_DATE_AND_TIME, NO_CLASS, BT_UNKNOWN, 0,\n+\t      GFC_STD_F95, gfc_check_date_and_time, NULL, NULL,\n+\t      dt, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT,\n+\t      tm, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT,\n+\t      zn, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT,\n+\t      vl, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   /* More G77 compatibility garbage.  */\n   add_sym_2s (\"etime\", GFC_ISYM_ETIME, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n@@ -2587,46 +2709,56 @@ add_subroutines (void)\n \n   /* F2003 commandline routines.  */\n \n-  add_sym_3s (\"get_command\", GFC_ISYM_GET_COMMAND, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_F2003,\n-\t      NULL, NULL, gfc_resolve_get_command,\n-\t      com, BT_CHARACTER, dc, OPTIONAL,\n-\t      length, BT_INTEGER, di, OPTIONAL,\n-\t      st, BT_INTEGER, di, OPTIONAL);\n+  add_sym_3s_intent (\"get_command\", GFC_ISYM_GET_COMMAND, NO_CLASS, BT_UNKNOWN,\n+\t\t     0, GFC_STD_F2003, NULL, NULL, gfc_resolve_get_command,\n+\t\t     com, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT,\n+\t\t     length, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n+\t\t     st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n-  add_sym_4s (\"get_command_argument\", GFC_ISYM_GET_COMMAND_ARGUMENT, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_F2003,\n-\t      NULL, NULL, gfc_resolve_get_command_argument,\n-\t      num, BT_INTEGER, di, REQUIRED, val, BT_CHARACTER, dc, OPTIONAL,\n-\t      length, BT_INTEGER, di, OPTIONAL, st, BT_INTEGER, di, OPTIONAL);\n+  add_sym_4s (\"get_command_argument\", GFC_ISYM_GET_COMMAND_ARGUMENT, NO_CLASS,\n+\t      BT_UNKNOWN, 0, GFC_STD_F2003, NULL, NULL,\n+\t      gfc_resolve_get_command_argument,\n+\t      num, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      val, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT,\n+\t      length, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   /* F2003 subroutine to get environment variables.  */\n \n-  add_sym_5s (\"get_environment_variable\", GFC_ISYM_GET_ENVIRONMENT_VARIABLE, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_F2003,\n+  add_sym_5s (\"get_environment_variable\", GFC_ISYM_GET_ENVIRONMENT_VARIABLE,\n+\t      NO_CLASS, BT_UNKNOWN, 0, GFC_STD_F2003,\n \t      NULL, NULL, gfc_resolve_get_environment_variable,\n-\t      name, BT_CHARACTER, dc, REQUIRED,\n-\t      val, BT_CHARACTER, dc, OPTIONAL,\n-\t      length, BT_INTEGER, di, OPTIONAL, st, BT_INTEGER, di, OPTIONAL,\n-\t      trim_name, BT_LOGICAL, dl, OPTIONAL);\n-\n-  add_sym_2s (\"move_alloc\", GFC_ISYM_MOVE_ALLOC, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_F2003,\n-\t      gfc_check_move_alloc, NULL, NULL,\n-\t      f, BT_UNKNOWN, 0, REQUIRED,\n-\t      t, BT_UNKNOWN, 0, REQUIRED);\n-\n-  add_sym_5s (\"mvbits\", GFC_ISYM_MVBITS, CLASS_ELEMENTAL, BT_UNKNOWN, 0, GFC_STD_F95,\n-\t      gfc_check_mvbits, gfc_simplify_mvbits, gfc_resolve_mvbits,\n-\t      f, BT_INTEGER, di, REQUIRED, fp, BT_INTEGER, di, REQUIRED,\n-\t      ln, BT_INTEGER, di, REQUIRED, t, BT_INTEGER, di, REQUIRED,\n-\t      tp, BT_INTEGER, di, REQUIRED);\n-\n-  add_sym_1s (\"random_number\", GFC_ISYM_RANDOM_NUMBER, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_F95,\n-\t      gfc_check_random_number, NULL, gfc_resolve_random_number,\n-\t      h, BT_REAL, dr, REQUIRED);\n-\n-  add_sym_3s (\"random_seed\", GFC_ISYM_RANDOM_SEED, NO_CLASS,\n-\t      BT_UNKNOWN, 0, GFC_STD_F95,\n-\t      gfc_check_random_seed, NULL, gfc_resolve_random_seed,\n-\t      sz, BT_INTEGER, di, OPTIONAL, pt, BT_INTEGER, di, OPTIONAL,\n-\t      gt, BT_INTEGER, di, OPTIONAL);\n+\t      name, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      val, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT,\n+\t      length, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n+\t      trim_name, BT_LOGICAL, dl, OPTIONAL, INTENT_IN);\n+\n+  add_sym_2s_intent (\"move_alloc\", GFC_ISYM_MOVE_ALLOC, NO_CLASS, BT_UNKNOWN, 0,\n+\t\t     GFC_STD_F2003, gfc_check_move_alloc, NULL, NULL,\n+\t\t     f, BT_UNKNOWN, 0, REQUIRED, INTENT_INOUT,\n+\t\t     t, BT_UNKNOWN, 0, REQUIRED, INTENT_OUT);\n+\n+  add_sym_5s (\"mvbits\", GFC_ISYM_MVBITS, CLASS_ELEMENTAL, BT_UNKNOWN, 0,\n+\t      GFC_STD_F95, gfc_check_mvbits, gfc_simplify_mvbits,\n+\t      gfc_resolve_mvbits,\n+\t      f, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      fp, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      ln, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      t, BT_INTEGER, di, REQUIRED, INTENT_INOUT,\n+\t      tp, BT_INTEGER, di, REQUIRED, INTENT_IN);\n+\n+  add_sym_1s_intent (\"random_number\", GFC_ISYM_RANDOM_NUMBER, NO_CLASS,\n+\t\t     BT_UNKNOWN, 0, GFC_STD_F95, gfc_check_random_number, NULL,\n+\t\t     gfc_resolve_random_number,\n+\t\t     h, BT_REAL, dr, REQUIRED, INTENT_OUT);\n+\n+  add_sym_3s_intent (\"random_seed\", GFC_ISYM_RANDOM_SEED, NO_CLASS,\n+\t\t     BT_UNKNOWN, 0, GFC_STD_F95,\n+\t\t     gfc_check_random_seed, NULL, gfc_resolve_random_seed,\n+\t\t     sz, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n+\t\t     pt, BT_INTEGER, di, OPTIONAL, INTENT_IN,\n+\t\t     gt, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   /* More G77 compatibility garbage.  */\n   add_sym_3s (\"alarm\", GFC_ISYM_ALARM, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n@@ -2672,8 +2804,10 @@ add_subroutines (void)\n \n   add_sym_4s (\"fseek\", GFC_ISYM_FSEEK, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n               gfc_check_fseek_sub, NULL, gfc_resolve_fseek_sub,\n-              ut, BT_INTEGER, di, REQUIRED, of, BT_INTEGER, di, REQUIRED,\n-              whence, BT_INTEGER, di, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n+              ut, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      of, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+              whence, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_2s (\"ftell\", GFC_ISYM_FTELL, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_ftell_sub, NULL, gfc_resolve_ftell_sub,\n@@ -2734,10 +2868,12 @@ add_subroutines (void)\n \t      NULL, NULL, gfc_resolve_system_sub,\n \t      com, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"system_clock\", GFC_ISYM_SYSTEM_CLOCK, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_F95,\n-\t      gfc_check_system_clock, NULL, gfc_resolve_system_clock,\n-\t      c, BT_INTEGER, di, OPTIONAL, cr, BT_INTEGER, di, OPTIONAL,\n-\t      cm, BT_INTEGER, di, OPTIONAL);\n+  add_sym_3s_intent (\"system_clock\", GFC_ISYM_SYSTEM_CLOCK, NO_CLASS,\n+\t\t     BT_UNKNOWN, 0, GFC_STD_F95,\n+\t\t     gfc_check_system_clock, NULL, gfc_resolve_system_clock,\n+\t\t     c, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n+\t\t     cr, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n+\t\t     cm, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_2s (\"ttynam\", GFC_ISYM_TTYNAM, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_ttynam_sub, NULL, gfc_resolve_ttynam_sub,"}, {"sha": "d3097c4ef7f6342a2f7f042e979388d8f9fe5ac6", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=23e38561c5027f1c94174df94996837a11cb7c51", "patch": "@@ -8585,7 +8585,7 @@ check_generic_tbp_ambiguity (gfc_tbp_generic* t1, gfc_tbp_generic* t2,\n     }\n \n   /* Compare the interfaces.  */\n-  if (gfc_compare_interfaces (sym1, sym2, 1))\n+  if (gfc_compare_interfaces (sym1, sym2, 1, 0))\n     {\n       gfc_error (\"'%s' and '%s' for GENERIC '%s' at %L are ambiguous\",\n \t\t sym1->name, sym2->name, generic_name, &where);"}, {"sha": "326d73e3ebfac11b905e31f432a8170ca8f70a76", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=23e38561c5027f1c94174df94996837a11cb7c51", "patch": "@@ -3914,6 +3914,7 @@ gfc_copy_formal_args_intr (gfc_symbol *dest, gfc_intrinsic_sym *src)\n       /* May need to copy more info for the symbol.  */\n       formal_arg->sym->ts = curr_arg->ts;\n       formal_arg->sym->attr.optional = curr_arg->optional;\n+      formal_arg->sym->attr.intent = curr_arg->intent;\n       formal_arg->sym->attr.flavor = FL_VARIABLE;\n       formal_arg->sym->attr.dummy = 1;\n "}, {"sha": "b79f8c0a778bd12ba1bc0e2947b36c7f4e90cd49", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=23e38561c5027f1c94174df94996837a11cb7c51", "patch": "@@ -1,3 +1,12 @@\n+2009-05-18  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/36947\n+\tPR fortran/40039\n+\t* gfortran.dg/interface_27.f90: New.\n+\t* gfortran.dg/interface_28.f90: New.\n+\t* gfortran.dg/proc_ptr_11.f90: Fixing invalid test case.\n+\t* gfortran.dg/proc_ptr_result_1.f90: Ditto.\n+\n 2009-05-18  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* gcc.target/m68k/tls-ie.c: New test."}, {"sha": "a3f1e4b26208bce6d27de991dc46aca891f1b415", "filename": "gcc/testsuite/gfortran.dg/interface_27.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_27.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_27.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_27.f90?ref=23e38561c5027f1c94174df94996837a11cb7c51", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do compile }\n+!\n+! PR 40039: Procedures as actual arguments: Check intent of arguments\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+module m\n+\n+contains\n+\n+subroutine a(x,f)\n+  real :: x\n+  interface\n+    real function f(y)\n+      real,intent(in) :: y\n+    end function\n+  end interface\n+  print *,f(x)\n+end subroutine\n+\n+real function func(z)\n+  real,intent(inout) :: z\n+  func = z**2\n+end function\n+\n+subroutine caller\n+  interface\n+    real function p(y)\n+      real,intent(in) :: y\n+    end function\n+  end interface\n+  pointer :: p\n+\n+  call a(4.3,func)  ! { dg-error \"Type/rank mismatch in argument\" }\n+  p => func         ! { dg-error \"Interfaces don't match in procedure pointer assignment\" }\n+end subroutine\n+\n+end module \n+\n+! { dg-final { cleanup-modules \"m\" } }\n+"}, {"sha": "53495a443483aa05066aecf5975503cbec0d1fa2", "filename": "gcc/testsuite/gfortran.dg/interface_28.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_28.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_28.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_28.f90?ref=23e38561c5027f1c94174df94996837a11cb7c51", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do compile }\n+!\n+! PR 36947: Attributes not fully checked comparing actual vs dummy procedure\n+!\n+! Contributed by Walter Spector <w6ws@earthlink.net>\n+\n+module testsub\n+  contains\n+  subroutine test(sub)\n+    interface\n+      subroutine sub(x)\n+        integer, intent(in), optional:: x\n+      end subroutine\n+    end interface\n+    print *, \"In test(), about to call sub()\"\n+    call sub()\n+  end subroutine\n+end module\n+\n+module sub\n+  contains\n+  subroutine subActual(x)\n+    ! actual subroutine's argment is different in intent and optional\n+    integer, intent(inout):: x\n+    print *, \"In subActual():\", x\n+  end subroutine\n+end module\n+\n+program interfaceCheck\n+  use testsub\n+  use sub\n+\n+  integer :: a\n+\n+  call test(subActual)  ! { dg-error \"Type/rank mismatch in argument\" }\n+end program\n+\n+! { dg-final { cleanup-modules \"sub testsub\" } }\n+"}, {"sha": "92d65423157eb4e72d755aa7c3c48f032ce7a455", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_11.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90?ref=23e38561c5027f1c94174df94996837a11cb7c51", "patch": "@@ -23,6 +23,7 @@ end subroutine up\n   interface\n     function p3(x)\n       real(8) :: p3,x\n+      intent(in) :: x\n     end function p3\n   end interface\n "}, {"sha": "f3f7252a6ad5d807c3ce7edca1145201ddcd70cc", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_result_1.f90", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e38561c5027f1c94174df94996837a11cb7c51/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_1.f90?ref=23e38561c5027f1c94174df94996837a11cb7c51", "patch": "@@ -114,7 +114,7 @@ function f()\n     pointer :: f\n     interface\n       integer function f(x)\n-        integer :: x\n+        integer,intent(in) :: x\n       end function\n     end interface\n     f => iabs\n@@ -123,7 +123,7 @@ integer function f(x)\n   function g()\n     interface\n       integer function g(x)\n-        integer :: x\n+        integer,intent(in) :: x\n       end function g\n     end interface\n     pointer :: g\n@@ -133,13 +133,13 @@ end function g\n   function h(arg)\n     interface\n       subroutine arg(b)\n-        integer :: b\n+        integer,intent(inout) :: b\n       end subroutine arg\n     end interface\n     pointer :: h\n     interface\n       subroutine h(a)\n-        integer :: a\n+        integer,intent(inout) :: a\n       end subroutine h\n     end interface\n     h => arg\n@@ -150,6 +150,7 @@ function i()\n     interface\n       function i(x)\n         integer :: i,x\n+        intent(in) :: x\n       end function i\n     end interface\n     i => iabs"}]}