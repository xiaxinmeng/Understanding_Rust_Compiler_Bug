{"sha": "d5d618b5da3494c1e8037863b626f57ebb78975c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVkNjE4YjVkYTM0OTRjMWU4MDM3ODYzYjYyNmY1N2ViYjc4OTc1Yw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2014-01-28T16:22:45Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2014-01-28T16:22:45Z"}, "message": "Add -m16 support for x86\n\nThe .code16gcc directive was added to binutils back in 1999:\n\n---\n   '.code16gcc' provides experimental support for generating 16-bit code\nfrom gcc, and differs from '.code16' in that 'call', 'ret', 'enter',\n'leave', 'push', 'pop', 'pusha', 'popa', 'pushf', and 'popf'\ninstructions default to 32-bit size.  This is so that the stack pointer\nis manipulated in the same way over function calls, allowing access to\nfunction parameters at the same stack offsets as in 32-bit mode.\n'.code16gcc' also automatically adds address size prefixes where\nnecessary to use the 32-bit addressing modes that gcc generates.\n---\n\nIt encodes 32-bit assembly instructions generated by GCC in 16-bit format\nso that GCC can be used to generate 16-bit instructions.  To do that, the\n.code16gcc directive must be placed at the very beginning of the assembly\ncode.  This patch adds -m16 to x86 backend by:\n\n1. Add -m16 and make it mutually exclusive with -m32, -m64 and -mx32.\n2. Treat -m16 like -m32 so that --32 is passed to assembler.\n3. Output .code16gcc at the very beginning of the assembly code.\n4. Turn off 64-bit ISA when -m16 is used.\n\n\tPR target/59672\n\t* config/i386/gnu-user64.h (SPEC_32): Add \"m16|\" to \"m32\".\n\t(SPEC_X32): Likewise.\n\t(SPEC_64): Likewise.\n\t* config/i386/i386.c (ix86_option_override_internal): Turn off\n\tOPTION_MASK_ISA_64BIT, OPTION_MASK_ABI_X32 and OPTION_MASK_ABI_64\n\tfor TARGET_16BIT.\n\t(x86_file_start): Output .code16gcc for TARGET_16BIT.\n\t* config/i386/i386.h (TARGET_16BIT): New macro.\n\t(TARGET_16BIT_P): Likewise.\n\t* config/i386/i386.opt: Add m16.\n\t* doc/invoke.texi: Document -m16.\n\nFrom-SVN: r207196", "tree": {"sha": "d86108b40847d07754fd8a2b4ab989d8309feee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d86108b40847d07754fd8a2b4ab989d8309feee8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5d618b5da3494c1e8037863b626f57ebb78975c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d618b5da3494c1e8037863b626f57ebb78975c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5d618b5da3494c1e8037863b626f57ebb78975c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d618b5da3494c1e8037863b626f57ebb78975c/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "367c82866e7c439004f283bb45fdbe09479c0d7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/367c82866e7c439004f283bb45fdbe09479c0d7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/367c82866e7c439004f283bb45fdbe09479c0d7f"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "d2c9b7aafb030666240f92abe8bdb0ed68d854b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d618b5da3494c1e8037863b626f57ebb78975c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d618b5da3494c1e8037863b626f57ebb78975c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5d618b5da3494c1e8037863b626f57ebb78975c", "patch": "@@ -1,3 +1,18 @@\n+2014-01-28  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/59672\n+\t* config/i386/gnu-user64.h (SPEC_32): Add \"m16|\" to \"m32\".\n+\t(SPEC_X32): Likewise.\n+\t(SPEC_64): Likewise.\n+\t* config/i386/i386.c (ix86_option_override_internal): Turn off\n+\tOPTION_MASK_ISA_64BIT, OPTION_MASK_ABI_X32 and OPTION_MASK_ABI_64\n+\tfor TARGET_16BIT.\n+\t(x86_file_start): Output .code16gcc for TARGET_16BIT.\n+\t* config/i386/i386.h (TARGET_16BIT): New macro.\n+\t(TARGET_16BIT_P): Likewise.\n+\t* config/i386/i386.opt: Add m16.\n+\t* doc/invoke.texi: Document -m16.\n+\n 2014-01-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/59935"}, {"sha": "1c72b41e43ed02e815c2a201e0772a58706d2a0d", "filename": "gcc/config/i386/gnu-user64.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d618b5da3494c1e8037863b626f57ebb78975c/gcc%2Fconfig%2Fi386%2Fgnu-user64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d618b5da3494c1e8037863b626f57ebb78975c/gcc%2Fconfig%2Fi386%2Fgnu-user64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu-user64.h?ref=d5d618b5da3494c1e8037863b626f57ebb78975c", "patch": "@@ -32,12 +32,12 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    done.  */\n \n #if TARGET_64BIT_DEFAULT\n-#define SPEC_32 \"m32\"\n+#define SPEC_32 \"m16|m32\"\n #if TARGET_BI_ARCH == 2\n #define SPEC_64 \"m64\"\n-#define SPEC_X32 \"m32|m64:;\"\n+#define SPEC_X32 \"m16|m32|m64:;\"\n #else\n-#define SPEC_64 \"m32|mx32:;\"\n+#define SPEC_64 \"m16|m32|mx32:;\"\n #define SPEC_X32 \"mx32\"\n #endif\n #else"}, {"sha": "1e65743f0dd6cccefda395c332b34c759f1da2ec", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d618b5da3494c1e8037863b626f57ebb78975c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d618b5da3494c1e8037863b626f57ebb78975c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d5d618b5da3494c1e8037863b626f57ebb78975c", "patch": "@@ -3342,6 +3342,10 @@ ix86_option_override_internal (bool main_args_p,\n       opts->x_ix86_isa_flags |= OPTION_MASK_ISA_64BIT;\n       opts->x_ix86_isa_flags &= ~OPTION_MASK_ABI_64;\n     }\n+  else if (TARGET_16BIT_P (opts->x_ix86_isa_flags))\n+    opts->x_ix86_isa_flags &= ~(OPTION_MASK_ISA_64BIT\n+\t\t\t\t| OPTION_MASK_ABI_X32\n+\t\t\t\t| OPTION_MASK_ABI_64);\n   else if (TARGET_LP64_P (opts->x_ix86_isa_flags))\n     {\n       /* Always turn on OPTION_MASK_ISA_64BIT and turn off\n@@ -38892,6 +38896,8 @@ static void\n x86_file_start (void)\n {\n   default_file_start ();\n+  if (TARGET_16BIT)\n+    fputs (\"\\t.code16gcc\\n\", asm_out_file);\n #if TARGET_MACHO\n   darwin_file_start ();\n #endif"}, {"sha": "bfb6dc6436fd2fcbb210c629fcd3cffaa1c2cedb", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d618b5da3494c1e8037863b626f57ebb78975c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d618b5da3494c1e8037863b626f57ebb78975c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=d5d618b5da3494c1e8037863b626f57ebb78975c", "patch": "@@ -135,6 +135,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_LP64_P(x)\tTARGET_ABI_64_P(x)\n #define TARGET_X32\tTARGET_ABI_X32\n #define TARGET_X32_P(x)\tTARGET_ABI_X32_P(x)\n+#define TARGET_16BIT\tTARGET_CODE16\n+#define TARGET_16BIT_P(x)\tTARGET_CODE16_P(x)\n \n /* SSE4.1 defines round instructions */\n #define\tOPTION_MASK_ISA_ROUND\tOPTION_MASK_ISA_SSE4_1"}, {"sha": "485ed2ad633760a5359fb42b0124da841a208345", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d618b5da3494c1e8037863b626f57ebb78975c/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d618b5da3494c1e8037863b626f57ebb78975c/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=d5d618b5da3494c1e8037863b626f57ebb78975c", "patch": "@@ -558,9 +558,13 @@ Target RejectNegative Negative(mx32) Report Mask(ABI_64) Var(ix86_isa_flags) Sav\n Generate 64bit x86-64 code\n \n mx32\n-Target RejectNegative Negative(m32) Report Mask(ABI_X32) Var(ix86_isa_flags) Save\n+Target RejectNegative Negative(m16) Report Mask(ABI_X32) Var(ix86_isa_flags) Save\n Generate 32bit x86-64 code\n \n+m16\n+Target RejectNegative Negative(m32) Report Mask(CODE16) InverseMask(ISA_64BIT) Var(ix86_isa_flags) Save\n+Generate 16bit i386 code\n+\n mmmx\n Target Report Mask(ISA_MMX) Var(ix86_isa_flags) Save\n Support MMX built-in functions"}, {"sha": "c87f08bc9db25c2526a0141716e2ed086ad252c8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d618b5da3494c1e8037863b626f57ebb78975c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d618b5da3494c1e8037863b626f57ebb78975c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d5d618b5da3494c1e8037863b626f57ebb78975c", "patch": "@@ -680,7 +680,7 @@ Objective-C and Objective-C++ Dialects}.\n -mpc32 -mpc64 -mpc80 -mstackrealign @gol\n -momit-leaf-frame-pointer  -mno-red-zone -mno-tls-direct-seg-refs @gol\n -mcmodel=@var{code-model} -mabi=@var{name} -maddress-mode=@var{mode} @gol\n--m32 -m64 -mx32 -mlarge-data-threshold=@var{num} @gol\n+-m32 -m64 -mx32 -m16 -mlarge-data-threshold=@var{num} @gol\n -msse2avx -mfentry -m8bit-idiv @gol\n -mavx256-split-unaligned-load -mavx256-split-unaligned-store @gol\n -mstack-protector-guard=@var{guard}}\n@@ -15635,10 +15635,12 @@ on x86-64 processors in 64-bit environments.\n @item -m32\n @itemx -m64\n @itemx -mx32\n+@itemx -m16\n @opindex m32\n @opindex m64\n @opindex mx32\n-Generate code for a 32-bit or 64-bit environment.\n+@opindex m16\n+Generate code for a 16-bit, 32-bit or 64-bit environment.\n The @option{-m32} option sets @code{int}, @code{long}, and pointer types\n to 32 bits, and\n generates code that runs on any i386 system.\n@@ -15652,6 +15654,10 @@ The @option{-mx32} option sets @code{int}, @code{long}, and pointer types\n to 32 bits, and\n generates code for the x86-64 architecture.\n \n+The @option{-m16} option is the same as @option{-m32}, except for that\n+it outputs the @code{.code16gcc} assembly directive at the beginning of\n+the assembly output so that the binary can run in 16-bit mode.\n+\n @item -mno-red-zone\n @opindex mno-red-zone\n Do not use a so-called ``red zone'' for x86-64 code.  The red zone is mandated"}]}