{"sha": "ed2b519e02eac99fadfa51adc7b11f8854c24575", "node_id": "C_kwDOANBUbNoAKGVkMmI1MTllMDJlYWM5OWZhZGZhNTFhZGM3YjExZjg4NTRjMjQ1NzU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-02-03T14:15:29Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-02-03T14:15:29Z"}, "message": "c++: ICE on unviable/ambiguous constrained dtors [PR96745]\n\nHere we're crashing from check_bases_and_members due to\nCLASSTYPE_DESTRUCTOR being an OVERLOAD which, due to the pruning\nperformed by add_method, should only happen if there is no viable\ndestructor or the destructor is ambiguous because of unsatisfied\nor ambiguous constraints.\n\nThis patch fixes this by making check_bases_and_members naturally handle\nCLASSTYPE_DESTRUCTOR being an OVERLOAD.  It's then convenient to prune\nthe OVERLOAD after effectively diagnosing the overload resolution\nfailure in check_methods.\n\n\tPR c++/96745\n\ngcc/cp/ChangeLog:\n\n\t* class.cc (check_methods): Diagnose an unviable OVERLOAD\n\tset for CLASSTYPE_DESTRUCTOR differently from an ambiguous one.\n\tThen prune the OVERLOAD to a single function.\n\t(check_bases_and_members): Handle CLASSTYPE_DESTRUCTOR being\n\tan OVERLOAD when calling deduce_noexcept_on_destructor.\n\tDocument why it has to be called before check_methods.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-dtor1.C: New test.", "tree": {"sha": "ce8bb184a383d8d5b228d7c220ba95b3875223aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce8bb184a383d8d5b228d7c220ba95b3875223aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed2b519e02eac99fadfa51adc7b11f8854c24575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2b519e02eac99fadfa51adc7b11f8854c24575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed2b519e02eac99fadfa51adc7b11f8854c24575", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2b519e02eac99fadfa51adc7b11f8854c24575/comments", "author": null, "committer": null, "parents": [{"sha": "e7930c6750d03b28d922ebbbace20ba9d8622c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7930c6750d03b28d922ebbbace20ba9d8622c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7930c6750d03b28d922ebbbace20ba9d8622c6a"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "27a798297372eb1543122157228386b59373c3e0", "filename": "gcc/cp/class.cc", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2b519e02eac99fadfa51adc7b11f8854c24575/gcc%2Fcp%2Fclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2b519e02eac99fadfa51adc7b11f8854c24575/gcc%2Fcp%2Fclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.cc?ref=ed2b519e02eac99fadfa51adc7b11f8854c24575", "patch": "@@ -4808,9 +4808,23 @@ check_methods (tree t)\n \t     in that class with an empty argument list to select the destructor\n \t     for the class, also known as the selected destructor. The program\n \t     is ill-formed if overload resolution fails. */\n+\t  int viable = 0;\n+\t  for (tree fn : ovl_range (dtor))\n+\t    if (constraints_satisfied_p (fn))\n+\t      ++viable;\n+\t  gcc_checking_assert (viable != 1);\n+\n \t  auto_diagnostic_group d;\n-\t  error_at (location_of (t), \"destructor for %qT is ambiguous\", t);\n+\t  if (viable == 0)\n+\t    error_at (location_of (t), \"no viable destructor for %qT\", t);\n+\t  else\n+\t    error_at (location_of (t), \"destructor for %qT is ambiguous\", t);\n \t  print_candidates (dtor);\n+\n+\t  /* Arbitrarily prune the overload set to a single function for\n+\t     sake of error recovery.  */\n+\t  tree *slot = find_member_slot (t, dtor_identifier);\n+\t  *slot = get_first_fn (dtor);\n \t}\n       else if (user_provided_p (dtor))\n \tTYPE_HAS_NONTRIVIAL_DESTRUCTOR (t) = true;\n@@ -6048,10 +6062,12 @@ check_bases_and_members (tree t)\n   check_bases (t, &cant_have_const_ctor, &no_const_asn_ref);\n \n   /* Deduce noexcept on destructor.  This needs to happen after we've set\n-     triviality flags appropriately for our bases.  */\n+     triviality flags appropriately for our bases, and before checking\n+     overriden virtual functions via check_methods.  */\n   if (cxx_dialect >= cxx11)\n     if (tree dtor = CLASSTYPE_DESTRUCTOR (t))\n-      deduce_noexcept_on_destructor (dtor);\n+      for (tree fn : ovl_range (dtor))\n+\tdeduce_noexcept_on_destructor (fn);\n \n   /* Check all the method declarations.  */\n   check_methods (t);"}, {"sha": "b1f3b4e579f1800454841a14a2e3bb4edba19553", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-dtor1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2b519e02eac99fadfa51adc7b11f8854c24575/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-dtor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2b519e02eac99fadfa51adc7b11f8854c24575/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-dtor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-dtor1.C?ref=ed2b519e02eac99fadfa51adc7b11f8854c24575", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/96745\n+// { dg-do compile { target c++20 } }\n+\n+template<class T>\n+struct A { // { dg-error \"destructor for 'A<int>' is ambiguous\" }\n+  ~A() requires true;\n+  ~A() requires (!!true);\n+};\n+\n+A<int> a;\n+\n+template<class T>\n+struct B { // { dg-error \"no viable destructor for 'B<int>'\" }\n+  ~B() requires false;\n+  ~B() requires (!!false);\n+};\n+\n+B<int> b;"}]}