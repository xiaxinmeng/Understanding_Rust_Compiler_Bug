{"sha": "417b11de06fd86a2c9efd6ab5572c498baf65b58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE3YjExZGUwNmZkODZhMmM5ZWZkNmFiNTU3MmM0OThiYWY2NWI1OA==", "commit": {"author": {"name": "Hartmut Penner", "email": "hpenner@de.ibm.com", "date": "2004-01-08T07:27:09Z"}, "committer": {"name": "Hartmut Penner", "email": "hpenner@gcc.gnu.org", "date": "2004-01-08T07:27:09Z"}, "message": "* gcc.dg/altivec-11.c: New test.\n\nFrom-SVN: r75535", "tree": {"sha": "dfca3b627a8fd5f1cdd65bae8f3c814edd1f7241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfca3b627a8fd5f1cdd65bae8f3c814edd1f7241"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/417b11de06fd86a2c9efd6ab5572c498baf65b58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/417b11de06fd86a2c9efd6ab5572c498baf65b58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/417b11de06fd86a2c9efd6ab5572c498baf65b58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/417b11de06fd86a2c9efd6ab5572c498baf65b58/comments", "author": null, "committer": null, "parents": [{"sha": "ce1f50b212408a151c9171eb0ac9c5ef0ac10439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce1f50b212408a151c9171eb0ac9c5ef0ac10439", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce1f50b212408a151c9171eb0ac9c5ef0ac10439"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "778a82ebc5eaf693294bb38508f224b93a7d8b46", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417b11de06fd86a2c9efd6ab5572c498baf65b58/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417b11de06fd86a2c9efd6ab5572c498baf65b58/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=417b11de06fd86a2c9efd6ab5572c498baf65b58", "patch": "@@ -1,3 +1,7 @@\n+2004-01-08  Hartmut Penner  <hpenner@de.ibm.com>\n+\n+\t* gcc.dg/altivec-11.c: New test.\n+\n 2004-01-07  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.dg/abi/vbase10.C: Use -mstructure-size-boundary=8 on ARM."}, {"sha": "3b71f2a1a74c954f3303067ab75e6acafd16789c", "filename": "gcc/testsuite/gcc.dg/altivec-11.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417b11de06fd86a2c9efd6ab5572c498baf65b58/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417b11de06fd86a2c9efd6ab5572c498baf65b58/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-11.c?ref=417b11de06fd86a2c9efd6ab5572c498baf65b58", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -maltivec -mabi=altivec\" } */\n+/* { dg-final { scan-assembler-not \"lvx\" } } */\n+#include <altivec.h>\n+\n+void foo (vector int);\n+void foo_s (vector short);\n+void foo_c (vector char);\n+\n+/* All constants should be loaded into vector register without\n+   load from memory.  */\n+void\n+bar (void) \n+{\n+  foo ((vector int) {0, 0, 0, 0});\n+  foo ((vector int) {1, 1, 1, 1});\n+  foo ((vector int) {15, 15, 15, 15});\n+  foo ((vector int) {-16, -16, -16, -16});\n+  foo ((vector int) {0x10001, 0x10001, 0x10001, 0x10001});\n+  foo ((vector int) {0xf000f, 0xf000f, 0xf000f, 0xf000f});\n+  foo ((vector int) {0xfff0fff0, 0xfff0fff0, 0xfff0fff0, 0xfff0fff0});\n+  foo ((vector int) {0x1010101, 0x1010101, 0x1010101, 0x1010101});  \n+  foo ((vector int) {0xf0f0f0f, 0xf0f0f0f, 0xf0f0f0f, 0xf0f0f0f});  \n+  foo ((vector int) {0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0});\n+  foo ((vector int) {0x10, 0x10, 0x10, 0x10});\n+  foo ((vector int) {0x1e, 0x1e, 0x1e, 0x1e});\n+\n+  foo_s ((vector short int) {0, 0, 0, 0, 0, 0, 0, 0});\n+  foo_s ((vector short int) {1, 1, 1, 1, 1, 1, 1, 1});\n+  foo_s ((vector short int) {15, 15, 15, 15, 15, 15, 15, 15});\n+  foo_s ((vector short int) {-16, -16, -16, -16, -16, -16, -16, -16});\n+  foo_s ((vector short int) {0xf0f0, 0xf0f0, 0xf0f0, 0xf0f0, \n+\t\t\t       0xf0f0, 0xf0f0, 0xf0f0, 0xf0f0});\n+  foo_s ((vector short int) {0xf0f, 0xf0f, 0xf0f, 0xf0f, \n+\t\t\t       0xf0f, 0xf0f, 0xf0f, 0xf0f});\n+\n+  foo_c ((vector char) {0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t  0, 0, 0, 0, 0, 0, 0, 0});\n+  foo_c ((vector char) {1, 1, 1, 1, 1, 1, 1, 1, \n+\t\t\t  1, 1, 1, 1, 1, 1, 1, 1});\n+  foo_c ((vector char) {15, 15, 15, 15, 15, 15, 15, 15,\n+\t\t\t  15, 15, 15, 15, 15, 15, 15, 15});\n+  foo_c ((vector char) {-16, -16, -16, -16, -16, -16, -16, -16,\n+\t\t\t  -16, -16, -16, -16, -16, -16, -16, -16});\n+}"}]}