{"sha": "9be3684bdd98f40b323958bc5f083c62846fc45b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJlMzY4NGJkZDk4ZjQwYjMyMzk1OGJjNWYwODNjNjI4NDZmYzQ1Yg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-01-10T00:11:18Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-01-10T00:11:18Z"}, "message": "re PR fortran/38765 (ICE in check_host_association)\n\n2009-01-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/38765\n\t* resolve.c (check_host_association): Use the symtree name to\n\tsearch for a potential contained procedure, since this is the\n\tname by which it would be referenced.\n\n2009-01-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/38765\n\t* gfortran.dg/host_assoc_function_6.f90: New test.\n\nFrom-SVN: r143237", "tree": {"sha": "b072b2ba7152e78d40188108776d2150ce04ea35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b072b2ba7152e78d40188108776d2150ce04ea35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9be3684bdd98f40b323958bc5f083c62846fc45b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9be3684bdd98f40b323958bc5f083c62846fc45b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9be3684bdd98f40b323958bc5f083c62846fc45b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9be3684bdd98f40b323958bc5f083c62846fc45b/comments", "author": null, "committer": null, "parents": [{"sha": "8b791297bfc5e1dd776fab8ee7b772143838f03a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b791297bfc5e1dd776fab8ee7b772143838f03a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b791297bfc5e1dd776fab8ee7b772143838f03a"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "b7d1b99f693ad72913b5a8149fbc23504eb76ee4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9be3684bdd98f40b323958bc5f083c62846fc45b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9be3684bdd98f40b323958bc5f083c62846fc45b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9be3684bdd98f40b323958bc5f083c62846fc45b", "patch": "@@ -1,3 +1,10 @@\n+2009-01-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/38765\n+\t* resolve.c (check_host_association): Use the symtree name to\n+\tsearch for a potential contained procedure, since this is the\n+\tname by which it would be referenced.\n+\n 2009-01-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/38220"}, {"sha": "3148b0de9ff57e061bceb1d82d69159d4104dc7e", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9be3684bdd98f40b323958bc5f083c62846fc45b/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9be3684bdd98f40b323958bc5f083c62846fc45b/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=9be3684bdd98f40b323958bc5f083c62846fc45b", "patch": "@@ -1,5 +1,5 @@\n /* Perform type resolution on the various structures.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n@@ -4313,7 +4313,7 @@ check_host_association (gfc_expr *e)\n   if (gfc_current_ns->parent\n \t&& old_sym->ns != gfc_current_ns)\n     {\n-      gfc_find_symbol (old_sym->name, gfc_current_ns, 1, &sym);\n+      gfc_find_symbol (e->symtree->name, gfc_current_ns, 1, &sym);\n       if (sym && old_sym != sym\n \t      && sym->ts.type == old_sym->ts.type\n \t      && sym->attr.flavor == FL_PROCEDURE"}, {"sha": "cadac67aa3b1ad0c38bae867ce12c8a591397e59", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9be3684bdd98f40b323958bc5f083c62846fc45b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9be3684bdd98f40b323958bc5f083c62846fc45b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9be3684bdd98f40b323958bc5f083c62846fc45b", "patch": "@@ -1,3 +1,8 @@\n+2009-01-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/38765\n+\t* gfortran.dg/host_assoc_function_6.f90: New test.\n+\n 2009-01-09  Joel Sherrill <joel.sherrill@oarcorp.com>\n \n \t* lib/target-supports.exp: Add method to determine if the effective"}, {"sha": "28cd7c83699613e36e18bfd5506880a8c815b940", "filename": "gcc/testsuite/gfortran.dg/host_assoc_function_6.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9be3684bdd98f40b323958bc5f083c62846fc45b/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_function_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9be3684bdd98f40b323958bc5f083c62846fc45b/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_function_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_function_6.f90?ref=9be3684bdd98f40b323958bc5f083c62846fc45b", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+! Tests the fix for PR38765 in which the use associated symbol\n+! 'fun' was confused with the contained function in 'mod_b'\n+! because the real name was being used instead of the 'use'\n+! name..\n+!\n+! Contributed by Paul Thomas  <pault@gcc.gnu.org>\n+! from a report by Marco Restelli.\n+!\n+module mod_a\n+  implicit none\n+  public :: fun\n+  private\n+contains\n+  pure function fun(x) result(mu)\n+    real, intent(in) :: x(:,:)\n+    real :: mu(2,2,size(x,2))\n+    mu = 2.0\n+  end function fun\n+end module mod_a\n+\n+module mod_b\n+  use mod_a, only: &\n+  a_fun => fun\n+  implicit none\n+  private\n+contains\n+  pure function fun(x) result(mu)\n+    real, intent(in) :: x(:,:)\n+    real :: mu(2,2,size(x,2))\n+    mu = a_fun(x)\n+  end function fun\n+end module mod_b\n+\n+! { dg-final { cleanup-modules \"mod_a mod_b\" } }"}]}