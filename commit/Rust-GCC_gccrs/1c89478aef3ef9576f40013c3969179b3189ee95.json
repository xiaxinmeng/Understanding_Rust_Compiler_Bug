{"sha": "1c89478aef3ef9576f40013c3969179b3189ee95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM4OTQ3OGFlZjNlZjk1NzZmNDAwMTNjMzk2OTE3OWIzMTg5ZWU5NQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-02-27T22:06:03Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-02-27T22:06:03Z"}, "message": "PR translation/84207 - Hard coded plural in gimple-fold.c\n\ngcc/ChangeLog:\n\n\tPR translation/84207\n\t* diagnostic-core.h (warning_n, error_n, inform_n): Change\n\tn argument to unsigned HOST_WIDE_INT.\n\t* diagnostic.c (warning_n, error_n, inform_n): Ditto.\n\t(diagnostic_n_impl): Ditto.  Handle arguments in excess of LONG_MAX.\n\t* gimple-ssa-sprintf.c (format_directive): Simplify inform_n call.\n\t* tree-ssa-strlen.c (maybe_diag_stxncpy_trunc): Use warning_n.\n\nFrom-SVN: r258044", "tree": {"sha": "8c1be1842ced105c7f3ce3afef09764b30ff037a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c1be1842ced105c7f3ce3afef09764b30ff037a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c89478aef3ef9576f40013c3969179b3189ee95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c89478aef3ef9576f40013c3969179b3189ee95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c89478aef3ef9576f40013c3969179b3189ee95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c89478aef3ef9576f40013c3969179b3189ee95/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76bd270a7df7dbf5a02046072947802365bb67f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76bd270a7df7dbf5a02046072947802365bb67f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76bd270a7df7dbf5a02046072947802365bb67f6"}], "stats": {"total": 109, "additions": 64, "deletions": 45}, "files": [{"sha": "292bf8559a602037e1e2cd9bdb0a3a764406023e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c89478aef3ef9576f40013c3969179b3189ee95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c89478aef3ef9576f40013c3969179b3189ee95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c89478aef3ef9576f40013c3969179b3189ee95", "patch": "@@ -1,3 +1,13 @@\n+2018-02-27  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR translation/84207\n+\t* diagnostic-core.h (warning_n, error_n, inform_n): Change\n+\tn argument to unsigned HOST_WIDE_INT.\n+\t* diagnostic.c (warning_n, error_n, inform_n): Ditto.\n+\t(diagnostic_n_impl): Ditto.  Handle arguments in excess of LONG_MAX.\n+\t* gimple-ssa-sprintf.c (format_directive): Simplify inform_n call.\n+\t* tree-ssa-strlen.c (maybe_diag_stxncpy_trunc): Use warning_n.\n+\n 2018-02-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/84512"}, {"sha": "aa5807e17e02a19d4d8f84b5fa742d8e79e6cd8d", "filename": "gcc/diagnostic-core.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c89478aef3ef9576f40013c3969179b3189ee95/gcc%2Fdiagnostic-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c89478aef3ef9576f40013c3969179b3189ee95/gcc%2Fdiagnostic-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-core.h?ref=1c89478aef3ef9576f40013c3969179b3189ee95", "patch": "@@ -59,17 +59,19 @@ extern void internal_error_no_backtrace (const char *, ...)\n      ATTRIBUTE_GCC_DIAG(1,2) ATTRIBUTE_NORETURN;\n /* Pass one of the OPT_W* from options.h as the first parameter.  */\n extern bool warning (int, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n-extern bool warning_n (location_t, int, int, const char *, const char *, ...)\n+extern bool warning_n (location_t, int, unsigned HOST_WIDE_INT,\n+\t\t       const char *, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(4,6) ATTRIBUTE_GCC_DIAG(5,6);\n-extern bool warning_n (rich_location *, int, int, const char *,\n-\t\t       const char *, ...)\n+extern bool warning_n (rich_location *, int, unsigned HOST_WIDE_INT,\n+\t\t       const char *, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(4, 6) ATTRIBUTE_GCC_DIAG(5, 6);\n extern bool warning_at (location_t, int, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);\n extern bool warning_at (rich_location *, int, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);\n extern void error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n-extern void error_n (location_t, int, const char *, const char *, ...)\n+extern void error_n (location_t, unsigned HOST_WIDE_INT, const char *,\n+\t\t     const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,5) ATTRIBUTE_GCC_DIAG(4,5);\n extern void error_at (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n extern void error_at (rich_location *, const char *, ...)\n@@ -87,7 +89,8 @@ extern bool permerror (rich_location *, const char *,\n extern void sorry (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern void inform (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n extern void inform (rich_location *, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n-extern void inform_n (location_t, int, const char *, const char *, ...)\n+extern void inform_n (location_t, unsigned HOST_WIDE_INT, const char *,\n+\t\t      const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,5) ATTRIBUTE_GCC_DIAG(4,5);\n extern void verbatim (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern bool emit_diagnostic (diagnostic_t, location_t, int,"}, {"sha": "e22c17bc02cf8b105416eea60981d5b9e4f77f7c", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c89478aef3ef9576f40013c3969179b3189ee95/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c89478aef3ef9576f40013c3969179b3189ee95/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=1c89478aef3ef9576f40013c3969179b3189ee95", "patch": "@@ -51,8 +51,8 @@ along with GCC; see the file COPYING3.  If not see\n /* Prototypes.  */\n static bool diagnostic_impl (rich_location *, int, const char *,\n \t\t\t     va_list *, diagnostic_t) ATTRIBUTE_GCC_DIAG(3,0);\n-static bool diagnostic_n_impl (rich_location *, int, int, const char *,\n-\t\t\t       const char *, va_list *,\n+static bool diagnostic_n_impl (rich_location *, int, unsigned HOST_WIDE_INT,\n+\t\t\t       const char *, const char *, va_list *,\n \t\t\t       diagnostic_t) ATTRIBUTE_GCC_DIAG(5,0);\n \n static void error_recursion (diagnostic_context *) ATTRIBUTE_NORETURN;\n@@ -1111,15 +1111,24 @@ diagnostic_impl (rich_location *richloc, int opt,\n /* Implement inform_n, warning_n, and error_n, as documented and\n    defined below.  */\n static bool\n-diagnostic_n_impl (rich_location *richloc, int opt, int n,\n+diagnostic_n_impl (rich_location *richloc, int opt, unsigned HOST_WIDE_INT n,\n \t\t   const char *singular_gmsgid,\n \t\t   const char *plural_gmsgid,\n \t\t   va_list *ap, diagnostic_t kind)\n {\n   diagnostic_info diagnostic;\n-  diagnostic_set_info_translated (&diagnostic,\n-                                  ngettext (singular_gmsgid, plural_gmsgid, n),\n-                                  ap, richloc, kind);\n+  unsigned long gtn;\n+\n+  if (sizeof n <= sizeof gtn)\n+    gtn = n;\n+  else\n+    /* Use the largest number ngettext can handle, otherwise\n+       preserve the six least significant decimal digits for\n+       languages where the plural form depends on them.  */\n+    gtn = n <= ULONG_MAX ? n : n % 1000000LU + 1000000LU;\n+\n+  const char *text = ngettext (singular_gmsgid, plural_gmsgid, gtn);\n+  diagnostic_set_info_translated (&diagnostic, text, ap, richloc, kind);\n   if (kind == DK_WARNING)\n     diagnostic.option_index = opt;\n   return diagnostic_report_diagnostic (global_dc, &diagnostic);\n@@ -1176,8 +1185,8 @@ inform (rich_location *richloc, const char *gmsgid, ...)\n /* An informative note at LOCATION.  Use this for additional details on an\n    error message.  */\n void\n-inform_n (location_t location, int n, const char *singular_gmsgid,\n-          const char *plural_gmsgid, ...)\n+inform_n (location_t location, unsigned HOST_WIDE_INT n,\n+\t  const char *singular_gmsgid, const char *plural_gmsgid, ...)\n {\n   va_list ap;\n   va_start (ap, plural_gmsgid);\n@@ -1233,7 +1242,7 @@ warning_at (rich_location *richloc, int opt, const char *gmsgid, ...)\n /* Same as warning_n plural variant below, but using RICHLOC.  */\n \n bool\n-warning_n (rich_location *richloc, int opt, int n,\n+warning_n (rich_location *richloc, int opt, unsigned HOST_WIDE_INT n,\n \t   const char *singular_gmsgid, const char *plural_gmsgid, ...)\n {\n   gcc_assert (richloc);\n@@ -1252,8 +1261,8 @@ warning_n (rich_location *richloc, int opt, int n,\n    Returns true if the warning was printed, false if it was inhibited.  */\n \n bool\n-warning_n (location_t location, int opt, int n, const char *singular_gmsgid,\n-\t   const char *plural_gmsgid, ...)\n+warning_n (location_t location, int opt, unsigned HOST_WIDE_INT n,\n+\t   const char *singular_gmsgid, const char *plural_gmsgid, ...)\n {\n   va_list ap;\n   va_start (ap, plural_gmsgid);\n@@ -1350,8 +1359,8 @@ error (const char *gmsgid, ...)\n /* A hard error: the code is definitely ill-formed, and an object file\n    will not be produced.  */\n void\n-error_n (location_t location, int n, const char *singular_gmsgid,\n-         const char *plural_gmsgid, ...)\n+error_n (location_t location, unsigned HOST_WIDE_INT n,\n+\t const char *singular_gmsgid, const char *plural_gmsgid, ...)\n {\n   va_list ap;\n   va_start (ap, plural_gmsgid);"}, {"sha": "83d71f0d64468087609b3ac2dee24777aaa31cf3", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c89478aef3ef9576f40013c3969179b3189ee95/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c89478aef3ef9576f40013c3969179b3189ee95/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=1c89478aef3ef9576f40013c3969179b3189ee95", "patch": "@@ -2952,10 +2952,7 @@ format_directive (const sprintf_dom_walker::call_info &info,\n       && fmtres.range.likely < fmtres.range.max)\n     /* Some languages have special plural rules even for large values,\n        but it is periodic with period of 10, 100, 1000 etc.  */\n-    inform_n (info.fmtloc,\n-\t      fmtres.range.likely > INT_MAX\n-\t      ? (fmtres.range.likely % 1000000) + 1000000\n-\t      : fmtres.range.likely,\n+    inform_n (info.fmtloc, fmtres.range.likely,\n \t      \"assuming directive output of %wu byte\",\n \t      \"assuming directive output of %wu bytes\",\n \t      fmtres.range.likely);"}, {"sha": "1266f399373205df7633885f541ecc9b367921fc", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c89478aef3ef9576f40013c3969179b3189ee95/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c89478aef3ef9576f40013c3969179b3189ee95/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=1c89478aef3ef9576f40013c3969179b3189ee95", "patch": "@@ -1943,27 +1943,27 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n       gcall *call = as_a <gcall *> (stmt);\n \n       if (lenrange[0] == cntrange[1] && cntrange[0] == cntrange[1])\n-\treturn warning_at (callloc, OPT_Wstringop_truncation,\n-\t\t\t   (integer_onep (cnt)\n-\t\t\t    ? G_(\"%G%qD output truncated before terminating \"\n-\t\t\t\t \"nul copying %E byte from a string of the \"\n-\t\t\t\t \"same length\")\n-\t\t\t    : G_(\"%G%qD output truncated before terminating nul \"\n-\t\t\t\t \"copying %E bytes from a string of the same \"\n-\t\t\t\t \"length\")),\n-\t\t\t   call, func, cnt);\n+\treturn warning_n (callloc, OPT_Wstringop_truncation,\n+\t\t\t  cntrange[0].to_uhwi (),\n+\t\t\t  \"%G%qD output truncated before terminating \"\n+\t\t\t  \"nul copying %E byte from a string of the \"\n+\t\t\t  \"same length\",\n+\t\t\t  \"%G%qD output truncated before terminating nul \"\n+\t\t\t  \"copying %E bytes from a string of the same \"\n+\t\t\t  \"length\",\n+\t\t\t  call, func, cnt);\n       else if (wi::geu_p (lenrange[0], cntrange[1]))\n \t{\n \t  /* The shortest string is longer than the upper bound of\n \t     the count so the truncation is certain.  */\n \t  if (cntrange[0] == cntrange[1])\n-\t    return warning_at (callloc, OPT_Wstringop_truncation,\n-\t\t\t       integer_onep (cnt)\n-\t\t\t       ? G_(\"%G%qD output truncated copying %E byte \"\n-\t\t\t\t    \"from a string of length %wu\")\n-\t\t\t       : G_(\"%G%qD output truncated copying %E bytes \"\n-\t\t\t\t    \"from a string of length %wu\"),\n-\t\t\t       call, func, cnt, lenrange[0].to_uhwi ());\n+\t    return warning_n (callloc, OPT_Wstringop_truncation,\n+\t\t\t      cntrange[0].to_uhwi (),\n+\t\t\t      \"%G%qD output truncated copying %E byte \"\n+\t\t\t      \"from a string of length %wu\",\n+\t\t\t      \"%G%qD output truncated copying %E bytes \"\n+\t\t\t      \"from a string of length %wu\",\n+\t\t\t      call, func, cnt, lenrange[0].to_uhwi ());\n \n \t  return warning_at (callloc, OPT_Wstringop_truncation,\n \t\t\t     \"%G%qD output truncated copying between %wu \"\n@@ -1976,13 +1976,13 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n \t  /* The longest string is longer than the upper bound of\n \t     the count so the truncation is possible.  */\n \t  if (cntrange[0] == cntrange[1])\n-\t    return warning_at (callloc, OPT_Wstringop_truncation,\n-\t\t\t       integer_onep (cnt)\n-\t\t\t       ? G_(\"%G%qD output may be truncated copying %E \"\n-\t\t\t\t    \"byte from a string of length %wu\")\n-\t\t\t       : G_(\"%G%qD output may be truncated copying %E \"\n-\t\t\t\t    \"bytes from a string of length %wu\"),\n-\t\t\t       call, func, cnt, lenrange[1].to_uhwi ());\n+\t    return warning_n (callloc, OPT_Wstringop_truncation,\n+\t\t\t      cntrange[0].to_uhwi (),\n+\t\t\t      \"%G%qD output may be truncated copying %E \"\n+\t\t\t      \"byte from a string of length %wu\",\n+\t\t\t      \"%G%qD output may be truncated copying %E \"\n+\t\t\t      \"bytes from a string of length %wu\",\n+\t\t\t      call, func, cnt, lenrange[1].to_uhwi ());\n \n \t  return warning_at (callloc, OPT_Wstringop_truncation,\n \t\t\t     \"%G%qD output may be truncated copying between %wu \""}]}