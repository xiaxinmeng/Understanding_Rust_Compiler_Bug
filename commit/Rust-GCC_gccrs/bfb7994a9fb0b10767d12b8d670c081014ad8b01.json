{"sha": "bfb7994a9fb0b10767d12b8d670c081014ad8b01", "node_id": "C_kwDOANBUbNoAKGJmYjc5OTRhOWZiMGIxMDc2N2QxMmI4ZDY3MGMwODEwMTRhZDhiMDE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-27T08:24:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-27T08:24:45Z"}, "message": "c++: Fix excess precision related ICE on invalid binop [PR107382, PR107383]\n\nThe following tests ICE in the gcc_assert (common); in cp_build_binary_op.\nI've missed that while for * common is set always, while for +, - and /\nit is in some cases not.\nIf it is not, then\n  if (!result_type\n      && arithmetic_types_p\n      && (shorten || common || short_compare))\ncondition is false, then the following\n  if (may_need_excess_precision\n      && (orig_type0 != type0 || orig_type1 != type1)\n      && build_type == NULL_TREE)\nwould fail the assertion there and if there wouldn't be excess precision,\n  if (code == SPACESHIP_EXPR)\nwould be false (for SPACESHIP_EXPR we always have build_type set like for\nother comparisons) and then trigger\n  if (!result_type)\n    {\n      if (complain & tf_error)\n        {\n          binary_op_rich_location richloc (location,\n                                           orig_op0, orig_op1, true);\n          error_at (&richloc,\n                    \"invalid operands of types %qT and %qT to binary %qO\",\n                    TREE_TYPE (orig_op0), TREE_TYPE (orig_op1), code);\n        }\n      return error_mark_node;\n    }\nSo, if result_type is NULL, we don't really need to compute\nsemantic_result_type because nothing will use it anyway and can get\nfall through into the error/return error_mark_node; case.\n\n2022-10-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/107382\n\tPR c++/107383\n\t* typeck.cc (cp_build_binary_op): Don't compute semantic_result_type\n\tif result_type is NULL.\n\n\t* g++.dg/diagnostic/bad-binary-ops2.C: New test.", "tree": {"sha": "8b773de99527a8b9d6fe5bfe7ed5d253e07d5538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b773de99527a8b9d6fe5bfe7ed5d253e07d5538"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfb7994a9fb0b10767d12b8d670c081014ad8b01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfb7994a9fb0b10767d12b8d670c081014ad8b01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfb7994a9fb0b10767d12b8d670c081014ad8b01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfb7994a9fb0b10767d12b8d670c081014ad8b01/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e1d704243a4f3c4ded47cd0d02427bb7efef069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1d704243a4f3c4ded47cd0d02427bb7efef069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e1d704243a4f3c4ded47cd0d02427bb7efef069"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "2e0fd8fbf1709c33494875323b55a62f2d646879", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfb7994a9fb0b10767d12b8d670c081014ad8b01/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfb7994a9fb0b10767d12b8d670c081014ad8b01/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=bfb7994a9fb0b10767d12b8d670c081014ad8b01", "patch": "@@ -6179,7 +6179,8 @@ cp_build_binary_op (const op_location_t &location,\n     }\n   if (may_need_excess_precision\n       && (orig_type0 != type0 || orig_type1 != type1)\n-      && build_type == NULL_TREE)\n+      && build_type == NULL_TREE\n+      && result_type)\n     {\n       gcc_assert (common);\n       semantic_result_type = cp_common_type (orig_type0, orig_type1);"}, {"sha": "627e8a573f100d324d18d4954517af288b555fc3", "filename": "gcc/testsuite/g++.dg/diagnostic/bad-binary-ops2.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfb7994a9fb0b10767d12b8d670c081014ad8b01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fbad-binary-ops2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfb7994a9fb0b10767d12b8d670c081014ad8b01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fbad-binary-ops2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fbad-binary-ops2.C?ref=bfb7994a9fb0b10767d12b8d670c081014ad8b01", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/107382\n+// PR c++/107383\n+// { dg-do compile }\n+// { dg-options \"-O2 -fexcess-precision=standard\" }\n+\n+void\n+foo ()\n+{\n+  float t[2] = { 1, 2 };\n+  int const *s = 0;\n+  t[1] / s;\t// { dg-error \"invalid operands of types 'float' and 'const int\\\\\\*' to binary 'operator/'\" }\n+}\n+\n+void\n+bar ()\n+{\n+  float t[2] = { 1, 2 };\n+  int const *s[2] = { 0, 0 };\n+  t[1] / s[0];\t// { dg-error \"invalid operands of types 'float' and 'const int\\\\\\*' to binary 'operator/'\" }\n+}\n+\n+void\n+baz (float a, int* b)\n+{\n+  a -= b;\t// { dg-error \"invalid operands of types 'float' and 'int\\\\\\*' to binary 'operator-'\" }\n+}"}]}