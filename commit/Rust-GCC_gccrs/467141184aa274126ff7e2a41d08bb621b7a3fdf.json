{"sha": "467141184aa274126ff7e2a41d08bb621b7a3fdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY3MTQxMTg0YWEyNzQxMjZmZjdlMmE0MWQwOGJiNjIxYjdhM2ZkZg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-12-24T21:26:26Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-12-25T18:23:22Z"}, "message": "Implement constant expressions", "tree": {"sha": "f15fd81fb434787967d3837651891bfaa73fee80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f15fd81fb434787967d3837651891bfaa73fee80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/467141184aa274126ff7e2a41d08bb621b7a3fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467141184aa274126ff7e2a41d08bb621b7a3fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/467141184aa274126ff7e2a41d08bb621b7a3fdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467141184aa274126ff7e2a41d08bb621b7a3fdf/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d34ac3c1602d8506ae4b65d92075be86f5a6c9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d34ac3c1602d8506ae4b65d92075be86f5a6c9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d34ac3c1602d8506ae4b65d92075be86f5a6c9a"}], "stats": {"total": 110, "additions": 109, "deletions": 1}, "files": [{"sha": "10888425ce53301b01aef6e21036173a780f15b4", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=467141184aa274126ff7e2a41d08bb621b7a3fdf", "patch": "@@ -2531,6 +2531,8 @@ class ConstantItem : public VisItem,\n     return type;\n   }\n \n+  std::string get_identifier () const { return identifier; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */"}, {"sha": "288dbda4b85489ba9a57256b8d8940cd6ee69951", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=467141184aa274126ff7e2a41d08bb621b7a3fdf", "patch": "@@ -141,6 +141,21 @@ class Context\n     return true;\n   }\n \n+  void insert_const_decl (HirId id, ::Bexpression *expr)\n+  {\n+    compiled_consts[id] = expr;\n+  }\n+\n+  bool lookup_const_decl (HirId id, ::Bexpression **expr)\n+  {\n+    auto it = compiled_consts.find (id);\n+    if (it == compiled_consts.end ())\n+      return false;\n+\n+    *expr = it->second;\n+    return true;\n+  }\n+\n   void push_fn (::Bfunction *fn, ::Bvariable *ret_addr)\n   {\n     fn_stack.push_back (fncontext{fn, ret_addr});\n@@ -183,6 +198,7 @@ class Context\n   std::map<HirId, ::Bvariable *> compiled_var_decls;\n   std::map<HirId, ::Btype *> compiled_type_map;\n   std::map<HirId, ::Bfunction *> compiled_fn_map;\n+  std::map<HirId, ::Bexpression *> compiled_consts;\n   std::vector< ::std::vector<Bstatement *> > statements;\n   std::vector< ::Bblock *> scope_stack;\n "}, {"sha": "871b4ba8c0d61a4f9a303a41ff97fe8bf4ea656e", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=467141184aa274126ff7e2a41d08bb621b7a3fdf", "patch": "@@ -105,6 +105,11 @@ class CompileExpr : public HIRCompileBase\n \treturn;\n       }\n \n+    // this could be a constant reference\n+    if (ctx->lookup_const_decl (ref, &translated))\n+      return;\n+\n+    // must be an identifier\n     Bvariable *var = nullptr;\n     if (!ctx->lookup_var_decl (ref, &var))\n       {"}, {"sha": "10bdce065a328288e74272eb41f5ffa22fc1bb52", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=467141184aa274126ff7e2a41d08bb621b7a3fdf", "patch": "@@ -23,6 +23,7 @@\n #include \"rust-compile-tyty.h\"\n #include \"rust-compile-var-decl.h\"\n #include \"rust-compile-stmt.h\"\n+#include \"rust-compile-expr.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -38,6 +39,24 @@ class CompileItem : public HIRCompileBase\n \n   virtual ~CompileItem () {}\n \n+  void visit (HIR::ConstantItem &constant)\n+  {\n+    TyTy::TyBase *resolved_type = nullptr;\n+    bool ok\n+      = ctx->get_tyctx ()->lookup_type (constant.get_mappings ().get_hirid (),\n+\t\t\t\t\t&resolved_type);\n+    rust_assert (ok);\n+\n+    ::Btype *type = TyTyResolveCompile::compile (ctx, resolved_type);\n+    Bexpression *value = CompileExpr::Compile (constant.get_expr (), ctx);\n+\n+    Bexpression *const_expr = ctx->get_backend ()->named_constant_expression (\n+      type, constant.get_identifier (), value, constant.get_locus ());\n+\n+    ctx->push_const (const_expr);\n+    ctx->insert_const_decl (constant.get_mappings ().get_hirid (), const_expr);\n+  }\n+\n   void visit (HIR::Function &function)\n   {\n     // items can be forward compiled which means we may not need to invoke this"}, {"sha": "97223900f047271ee1ac14bdf3d28dfba2fc0e59", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=467141184aa274126ff7e2a41d08bb621b7a3fdf", "patch": "@@ -24,6 +24,7 @@\n #include \"rust-ast-lower-base.h\"\n #include \"rust-ast-lower-type.h\"\n #include \"rust-ast-lower-stmt.h\"\n+#include \"rust-ast-lower-expr.h\"\n #include \"rust-ast-lower-pattern.h\"\n #include \"rust-ast-lower-block.h\"\n \n@@ -42,6 +43,31 @@ class ASTLoweringItem : public ASTLoweringBase\n \n   virtual ~ASTLoweringItem () {}\n \n+  void visit (AST::ConstantItem &constant)\n+  {\n+    std::vector<HIR::Attribute> outer_attrs;\n+    HIR::Visibility vis = HIR::Visibility::create_public ();\n+\n+    HIR::Type *type = ASTLoweringType::translate (constant.get_type ().get ());\n+    HIR::Expr *expr = ASTLoweringExpr::translate (constant.get_expr ().get ());\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, constant.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n+    translated = new HIR::ConstantItem (mapping, constant.get_identifier (),\n+\t\t\t\t\tvis, std::unique_ptr<HIR::Type> (type),\n+\t\t\t\t\tstd::unique_ptr<HIR::Expr> (expr),\n+\t\t\t\t\touter_attrs, constant.get_locus ());\n+\n+    mappings->insert_defid_mapping (mapping.get_defid (), translated);\n+    mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       translated);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       constant.get_locus ());\n+  }\n+\n   void visit (AST::Function &function)\n   {\n     // ignore for now and leave empty"}, {"sha": "b961a6cbfaad3d8fd876d271484ad209d3a3e26f", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=467141184aa274126ff7e2a41d08bb621b7a3fdf", "patch": "@@ -2055,6 +2055,12 @@ class ConstantItem : public VisItem,\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  Type *get_type () { return type.get (); }\n+\n+  Expr *get_expr () { return const_expr.get (); }\n+\n+  std::string get_identifier () { return identifier; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */"}, {"sha": "eca52dcecfc3fc2081823dafc8338d9a44b0b02d", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=467141184aa274126ff7e2a41d08bb621b7a3fdf", "patch": "@@ -39,6 +39,12 @@ class ResolveItem : public ResolverBase\n \n   ~ResolveItem () {}\n \n+  void visit (AST::ConstantItem &constant)\n+  {\n+    ResolveType::go (constant.get_type ().get (), constant.get_node_id ());\n+    ResolveExpr::go (constant.get_expr ().get (), constant.get_node_id ());\n+  }\n+\n   void visit (AST::Function &function)\n   {\n     if (function.has_return_type ())"}, {"sha": "0b6256e89659ca5b2287f74eedccbf97837aeea0", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=467141184aa274126ff7e2a41d08bb621b7a3fdf", "patch": "@@ -36,6 +36,15 @@ class ResolveTopLevel : public ResolverBase\n \n   ~ResolveTopLevel () {}\n \n+  void visit (AST::ConstantItem &constant)\n+  {\n+    resolver->get_name_scope ().insert (constant.get_identifier (),\n+\t\t\t\t\tconstant.get_node_id ());\n+    resolver->insert_new_definition (constant.get_node_id (),\n+\t\t\t\t     Definition{constant.get_node_id (),\n+\t\t\t\t\t\tconstant.get_node_id ()});\n+  }\n+\n   void visit (AST::Function &function)\n   {\n     // function_names are simple std::String identifiers so this can be a"}, {"sha": "85cfe92b6027923261ddaeba32feaf1da6a85038", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=467141184aa274126ff7e2a41d08bb621b7a3fdf", "patch": "@@ -22,6 +22,7 @@\n #include \"rust-hir-type-check-base.h\"\n #include \"rust-hir-full.h\"\n #include \"rust-hir-type-check-type.h\"\n+#include \"rust-hir-type-check-expr.h\"\n #include \"rust-tyty.h\"\n \n namespace Rust {\n@@ -36,6 +37,15 @@ class TypeCheckTopLevel : public TypeCheckBase\n     item->accept_vis (resolver);\n   }\n \n+  void visit (HIR::ConstantItem &constant)\n+  {\n+    TyTy::TyBase *type = TypeCheckType::Resolve (constant.get_type ());\n+    TyTy::TyBase *expr_type = TypeCheckExpr::Resolve (constant.get_expr ());\n+\n+    context->insert_type (constant.get_mappings ().get_hirid (),\n+\t\t\t  type->combine (expr_type));\n+  }\n+\n   void visit (HIR::Function &function)\n   {\n     TyTy::TyBase *ret_type = nullptr;"}, {"sha": "8ff4c447e4f39381a2fb854236281d7f8a2e0d97", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=467141184aa274126ff7e2a41d08bb621b7a3fdf", "patch": "@@ -87,7 +87,8 @@ class TypeCheckType : public TypeCheckBase\n     if (!resolver->lookup_resolved_type (path.get_mappings ().get_nodeid (),\n \t\t\t\t\t &ref))\n       {\n-\trust_error_at (path.get_locus (), \"Type was not resolved\");\n+\trust_fatal_error (path.get_locus (),\n+\t\t\t  \"Failed to resolve node id to HIR\");\n \treturn;\n       }\n "}, {"sha": "e8ef96b206d456e1cab5a3880ec4267654ea45c7", "filename": "gcc/testsuite/rust.test/compilable/constant1.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fconstant1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467141184aa274126ff7e2a41d08bb621b7a3fdf/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fconstant1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fconstant1.rs?ref=467141184aa274126ff7e2a41d08bb621b7a3fdf", "patch": "@@ -0,0 +1,8 @@\n+const TEST_CONST:i32 = 10;\n+\n+fn main() {\n+    let mut x = TEST_CONST;\n+    x = x + 1;\n+\n+    let mut y = x + TEST_CONST;\n+}"}]}