{"sha": "6d0ef01e47ee5fa08d471d5801417942ecfdb3f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQwZWYwMWU0N2VlNWZhMDhkNDcxZDU4MDE0MTc5NDJlY2ZkYjNmOQ==", "commit": {"author": {"name": "Hartmut Penner", "email": "hpenner@de.ibm.com", "date": "2004-02-11T09:00:08Z"}, "committer": {"name": "Hartmut Penner", "email": "hpenner@gcc.gnu.org", "date": "2004-02-11T09:00:08Z"}, "message": "* gcc/config/rs6000/rs6000.c (rs6000_override_options)\n       Set AltiVec ABI and vrsave as default for ppc64 linux.\n       (init_cumulative_args): Post error, if try to return\n       value in AltiVec register without enable AltiVec.\n       (function_arg_advance): Ditto for passing arguments.\n\nFrom-SVN: r77642", "tree": {"sha": "0af995a584d4fcb00fec8ad9c65d9a334be7d977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0af995a584d4fcb00fec8ad9c65d9a334be7d977"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d0ef01e47ee5fa08d471d5801417942ecfdb3f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0ef01e47ee5fa08d471d5801417942ecfdb3f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d0ef01e47ee5fa08d471d5801417942ecfdb3f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0ef01e47ee5fa08d471d5801417942ecfdb3f9/comments", "author": null, "committer": null, "parents": [{"sha": "7537fc907c7f1137ae49a7012cba15db6e8ddcff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7537fc907c7f1137ae49a7012cba15db6e8ddcff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7537fc907c7f1137ae49a7012cba15db6e8ddcff"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "ea05ce02789d544e27fd32758335a657ac9ddebe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0ef01e47ee5fa08d471d5801417942ecfdb3f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0ef01e47ee5fa08d471d5801417942ecfdb3f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d0ef01e47ee5fa08d471d5801417942ecfdb3f9", "patch": "@@ -1,3 +1,11 @@\n+2004-02-11  Hartmut Penner  <hpenner@de.ibm.com>\n+\n+\t* gcc/config/rs6000/rs6000.c (rs6000_override_options)\n+\tSet AltiVec ABI and vrsave as default for ppc64 linux.\n+\t(init_cumulative_args): Post error, if try to return\n+\tvalue in AltiVec register without enable AltiVec.\n+\t(function_arg_advance): Ditto for passing arguments. \n+\n 2004-02-11  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* emit-rtl.c (mark_label_nuses): Check that a LABEL_REF refers to"}, {"sha": "59cd62366872b653f5d6c68b292244ff5b9ac7a0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0ef01e47ee5fa08d471d5801417942ecfdb3f9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0ef01e47ee5fa08d471d5801417942ecfdb3f9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6d0ef01e47ee5fa08d471d5801417942ecfdb3f9", "patch": "@@ -836,6 +836,13 @@ rs6000_override_options (const char *default_cpu)\n \trs6000_long_double_type_size = size;\n     }\n \n+  /* Set Altivec ABI as default for powerpc64 linux.  */\n+  if (TARGET_ELF && TARGET_64BIT)\n+    {\n+      rs6000_altivec_abi = 1;\n+      rs6000_altivec_vrsave = 1;\n+    }\n+\n   /* Handle -mabi= options.  */\n   rs6000_parse_abi_options ();\n \n@@ -3836,6 +3843,16 @@ init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype,\n       fprintf (stderr, \" proto = %d, nargs = %d\\n\",\n \t       cum->prototype, cum->nargs_prototype);\n     }\n+  \n+    if (fntype \n+\t&& !TARGET_ALTIVEC \n+\t&& TARGET_ALTIVEC_ABI\n+        && ALTIVEC_VECTOR_MODE (TYPE_MODE (TREE_TYPE (fntype))))\n+      {\n+\terror (\"Cannot return value in vector register because\"\n+\t       \" altivec instructions are disabled, use -maltivec\"\n+\t       \" to enable them.\");\n+      }\n }\n \f\n /* If defined, a C expression which determines whether, and in which\n@@ -3928,8 +3945,13 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   if (TARGET_ALTIVEC_ABI && ALTIVEC_VECTOR_MODE (mode))\n     {\n       if (USE_ALTIVEC_FOR_ARG_P (cum, mode, type, named))\n-\tcum->vregno++;\n-      \n+        {\n+\t  cum->vregno++;\n+\t  if (!TARGET_ALTIVEC)\n+\t    error (\"Cannot pass argument in vector register because\"\n+\t\t   \" altivec instructions are disabled, use -maltivec\"\n+\t\t   \" to enable them.\");\n+\t}\n       /* PowerPC64 Linux and AIX allocates GPRs for a vector argument\n \t even if it is going to be passed in a vector register.  \n \t Darwin does the same for variable-argument functions.  */"}, {"sha": "d49569a3833c57f30a5e46fc02b597e662fb8b5c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0ef01e47ee5fa08d471d5801417942ecfdb3f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0ef01e47ee5fa08d471d5801417942ecfdb3f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d0ef01e47ee5fa08d471d5801417942ecfdb3f9", "patch": "@@ -1,3 +1,7 @@\n+2004-02-11  Hartmut Penner  <hpenner@de.ibm.com>\n+\n+        * gcc.dg/ppc64-abi-3.c: New test.\n+\n 2004-02-10  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR c/14092"}, {"sha": "58f161dae6c6050c33f1074fa295839972758087", "filename": "gcc/testsuite/gcc.dg/ppc64-abi-3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0ef01e47ee5fa08d471d5801417942ecfdb3f9/gcc%2Ftestsuite%2Fgcc.dg%2Fppc64-abi-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0ef01e47ee5fa08d471d5801417942ecfdb3f9/gcc%2Ftestsuite%2Fgcc.dg%2Fppc64-abi-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fppc64-abi-3.c?ref=6d0ef01e47ee5fa08d471d5801417942ecfdb3f9", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile { target powerpc64-*-linux* } } */\n+/* { dg-options \"-Wall\" } */\n+/* Testcase to check for ABI compliance of parameter passing\n+   for the PowerPC64 ABI.  */\n+\n+typedef int __attribute__((mode(V4SI))) v4si;\n+typedef int __attribute__((mode(V2SI))) v2si;\n+\n+v4si \n+f(v4si v)\n+{ /* { dg-error \"altivec instructions are disabled\" } */\n+    return v;\n+}\n+\n+v2si \n+g(v2si v)\n+{\n+    return v;\n+}\n+\n+int \n+main()\n+{\n+    v4si v;\n+    v2si w;\n+    v = f (v); /* { dg-error \"altivec instructions are disabled\" } */\n+    w = g (w);\n+}"}]}