{"sha": "c5d725c0a8da3b2227d119871e881d8a6e1bf600", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVkNzI1YzBhOGRhM2IyMjI3ZDExOTg3MWU4ODFkOGE2ZTFiZjYwMA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-08-17T12:04:13Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-08-17T12:04:13Z"}, "message": "[PATCH] Move cpp_macro to cpplib.h\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-08/msg01016.html\n\tlibcpp/\n\t* cpp-id-data.h (uchar, UC): Move to internal.h\n\t(struct cpp_macro): Move to cpplib.h.\n\t* internal.h (uchar, UC): From cpp-id-data.h.\n\t* include/cpplib.h (struct cpp_macro): From cpp-id-data.h.\n\tgcc/c-family/\n\t* c-ada-spec.c: Don't #include \"cpp-id-data.h\"\n\t* c-cppbuiltin.c: Likewise.\n\tgcc/\n\t* cppbuiltin.c: Include \"cpplib.h\", not \"cpp-id-data.h\".\n\nFrom-SVN: r263618", "tree": {"sha": "7350722280ba05e1042b098c9c42984d9569f9a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7350722280ba05e1042b098c9c42984d9569f9a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5d725c0a8da3b2227d119871e881d8a6e1bf600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5d725c0a8da3b2227d119871e881d8a6e1bf600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5d725c0a8da3b2227d119871e881d8a6e1bf600", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5d725c0a8da3b2227d119871e881d8a6e1bf600/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0138492e7bdbb4949c940a501415b7bbf5ffb9b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0138492e7bdbb4949c940a501415b7bbf5ffb9b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0138492e7bdbb4949c940a501415b7bbf5ffb9b4"}], "stats": {"total": 133, "additions": 74, "deletions": 59}, "files": [{"sha": "17545dc78cd4553b5ab6169f0b1f7ed6db5bf8bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d725c0a8da3b2227d119871e881d8a6e1bf600/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d725c0a8da3b2227d119871e881d8a6e1bf600/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5d725c0a8da3b2227d119871e881d8a6e1bf600", "patch": "@@ -1,3 +1,7 @@\n+2018-08-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cppbuiltin.c: Include \"cpplib.h\", not \"cpp-id-data.h\".\n+\n 2018-08-17  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/86841"}, {"sha": "93b1ba1478d47883b39e6e023c501291d725fbde", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d725c0a8da3b2227d119871e881d8a6e1bf600/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d725c0a8da3b2227d119871e881d8a6e1bf600/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c5d725c0a8da3b2227d119871e881d8a6e1bf600", "patch": "@@ -1,3 +1,8 @@\n+2018-08-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-ada-spec.c: Don't #include \"cpp-id-data.h\"\n+\t* c-cppbuiltin.c: Likewise.\n+\n 2018-08-17  Martin Liska  <mliska@suse.cz>\n \n \t* c.opt: Remove Warn, Init and Report for options with"}, {"sha": "0352932c03973e5916e1772362f6aa10be017700", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d725c0a8da3b2227d119871e881d8a6e1bf600/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d725c0a8da3b2227d119871e881d8a6e1bf600/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=c5d725c0a8da3b2227d119871e881d8a6e1bf600", "patch": "@@ -27,7 +27,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-ada-spec.h\"\n #include \"fold-const.h\"\n #include \"c-pragma.h\"\n-#include \"cpp-id-data.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n "}, {"sha": "85d79dcc1a56360a60c26c702120e4787d69cdc2", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d725c0a8da3b2227d119871e881d8a6e1bf600/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d725c0a8da3b2227d119871e881d8a6e1bf600/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=c5d725c0a8da3b2227d119871e881d8a6e1bf600", "patch": "@@ -31,7 +31,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"output.h\"\t\t/* For user_label_prefix.  */\n #include \"debug.h\"\t\t/* For dwarf2out_do_cfi_asm.  */\n #include \"common/common-target.h\"\n-#include \"cpp-id-data.h\"\n #include \"cppbuiltin.h\"\n \n #ifndef TARGET_OS_CPP_BUILTINS"}, {"sha": "759122907191f4bbcd7a7ff5ae7821c9b47b0d9f", "filename": "gcc/cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d725c0a8da3b2227d119871e881d8a6e1bf600/gcc%2Fcppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d725c0a8da3b2227d119871e881d8a6e1bf600/gcc%2Fcppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppbuiltin.c?ref=c5d725c0a8da3b2227d119871e881d8a6e1bf600", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"version.h\"\n #include \"flags.h\"\n-#include \"cpp-id-data.h\"\n+#include \"cpplib.h\"\n #include \"cppbuiltin.h\"\n \n "}, {"sha": "978b32e37c627c296cf387dfb6c5774026523760", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d725c0a8da3b2227d119871e881d8a6e1bf600/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d725c0a8da3b2227d119871e881d8a6e1bf600/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=c5d725c0a8da3b2227d119871e881d8a6e1bf600", "patch": "@@ -1,3 +1,10 @@\n+2018-08-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cpp-id-data.h (uchar, UC): Move to internal.h\n+\t(struct cpp_macro): Move to cpplib.h.\n+\t* internal.h (uchar, UC): From cpp-id-data.h.\n+\t* include/cpplib.h (struct cpp_macro): From cpp-id-data.h.\n+\n 2018-08-16  Nathan Sidwell  <nathan@acm.org>\n \n \t* internal.h (_cpp_save_parameter): Take parmno, not macro."}, {"sha": "fb073faacced74cd723d1b79983ea646871f122e", "filename": "libcpp/include/cpp-id-data.h", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d725c0a8da3b2227d119871e881d8a6e1bf600/libcpp%2Finclude%2Fcpp-id-data.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d725c0a8da3b2227d119871e881d8a6e1bf600/libcpp%2Finclude%2Fcpp-id-data.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpp-id-data.h?ref=c5d725c0a8da3b2227d119871e881d8a6e1bf600", "patch": "@@ -17,66 +17,10 @@ along with this program; see the file COPYING3.  If not see\n \n #include \"cpplib.h\"\n \n-#if !defined (HAVE_UCHAR) && !defined (IN_GCC)\n-typedef unsigned char uchar;\n-#endif\n-\n-#define UC (const unsigned char *)  /* Intended use: UC\"string\" */\n-\n /* Chained list of answers to an assertion.  */\n struct GTY(()) answer {\n   struct answer *next;\n   unsigned int count;\n   cpp_token GTY ((length (\"%h.count\"))) first[1];\n };\n \n-/* Each macro definition is recorded in a cpp_macro structure.\n-   Variadic macros cannot occur with traditional cpp.  */\n-struct GTY(()) cpp_macro {\n-  /* Parameters, if any.  If parameter names use extended identifiers,\n-     the original spelling of those identifiers, not the canonical\n-     UTF-8 spelling, goes here.  */\n-  cpp_hashnode ** GTY ((nested_ptr (union tree_node,\n-\t\t\"%h ? CPP_HASHNODE (GCC_IDENT_TO_HT_IDENT (%h)) : NULL\",\n-\t\t\t\"%h ? HT_IDENT_TO_GCC_IDENT (HT_NODE (%h)) : NULL\"),\n-\t\t\tlength (\"%h.paramc\")))\n-    params;\n-\n-  /* Replacement tokens (ISO) or replacement text (traditional).  See\n-     comment at top of cpptrad.c for how traditional function-like\n-     macros are encoded.  */\n-  union cpp_macro_u\n-  {\n-    cpp_token * GTY ((tag (\"0\"), length (\"%0.count\"))) tokens;\n-    const unsigned char * GTY ((tag (\"1\"))) text;\n-  } GTY ((desc (\"%1.traditional\"))) exp;\n-\n-  /* Definition line number.  */\n-  source_location line;\n-\n-  /* Number of tokens in expansion, or bytes for traditional macros.  */\n-  unsigned int count;\n-\n-  /* Number of parameters.  */\n-  unsigned short paramc;\n-\n-  /* If a function-like macro.  */\n-  unsigned int fun_like : 1;\n-\n-  /* If a variadic macro.  */\n-  unsigned int variadic : 1;\n-\n-  /* If macro defined in system header.  */\n-  unsigned int syshdr   : 1;\n-\n-  /* Nonzero if it has been expanded or had its existence tested.  */\n-  unsigned int used     : 1;\n-\n-  /* Indicate which field of 'exp' is in use.  */\n-  unsigned int traditional : 1;\n-\n-  /* Indicate whether the tokens include extra CPP_PASTE tokens at the\n-     end to track invalid redefinitions with consecutive CPP_PASTE\n-     tokens.  */\n-  unsigned int extra_tokens : 1;\n-};"}, {"sha": "2b3440d251d80af842baadb1890386a3317ec716", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d725c0a8da3b2227d119871e881d8a6e1bf600/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d725c0a8da3b2227d119871e881d8a6e1bf600/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=c5d725c0a8da3b2227d119871e881d8a6e1bf600", "patch": "@@ -671,6 +671,57 @@ struct cpp_dir\n   dev_t dev;\n };\n \n+/* Each macro definition is recorded in a cpp_macro structure.\n+   Variadic macros cannot occur with traditional cpp.  */\n+struct GTY(()) cpp_macro {\n+  /* Parameters, if any.  If parameter names use extended identifiers,\n+     the original spelling of those identifiers, not the canonical\n+     UTF-8 spelling, goes here.  */\n+  cpp_hashnode ** GTY ((nested_ptr (union tree_node,\n+\t\t\"%h ? CPP_HASHNODE (GCC_IDENT_TO_HT_IDENT (%h)) : NULL\",\n+\t\t\t\"%h ? HT_IDENT_TO_GCC_IDENT (HT_NODE (%h)) : NULL\"),\n+\t\t\tlength (\"%h.paramc\")))\n+    params;\n+\n+  /* Replacement tokens (ISO) or replacement text (traditional).  See\n+     comment at top of cpptrad.c for how traditional function-like\n+     macros are encoded.  */\n+  union cpp_macro_u\n+  {\n+    cpp_token * GTY ((tag (\"0\"), length (\"%0.count\"))) tokens;\n+    const unsigned char * GTY ((tag (\"1\"))) text;\n+  } GTY ((desc (\"%1.traditional\"))) exp;\n+\n+  /* Definition line number.  */\n+  source_location line;\n+\n+  /* Number of tokens in expansion, or bytes for traditional macros.  */\n+  unsigned int count;\n+\n+  /* Number of parameters.  */\n+  unsigned short paramc;\n+\n+  /* If a function-like macro.  */\n+  unsigned int fun_like : 1;\n+\n+  /* If a variadic macro.  */\n+  unsigned int variadic : 1;\n+\n+  /* If macro defined in system header.  */\n+  unsigned int syshdr   : 1;\n+\n+  /* Nonzero if it has been expanded or had its existence tested.  */\n+  unsigned int used     : 1;\n+\n+  /* Indicate which field of 'exp' is in use.  */\n+  unsigned int traditional : 1;\n+\n+  /* Indicate whether the tokens include extra CPP_PASTE tokens at the\n+     end to track invalid redefinitions with consecutive CPP_PASTE\n+     tokens.  */\n+  unsigned int extra_tokens : 1;\n+};\n+\n /* The structure of a node in the hash table.  The hash table has\n    entries for all identifiers: either macros defined by #define\n    commands (type NT_MACRO), assertions created with #assert"}, {"sha": "0c2395a2dcd1a7c03daac2ac3d4e4bd6e6de859f", "filename": "libcpp/internal.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d725c0a8da3b2227d119871e881d8a6e1bf600/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d725c0a8da3b2227d119871e881d8a6e1bf600/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=c5d725c0a8da3b2227d119871e881d8a6e1bf600", "patch": "@@ -602,6 +602,12 @@ extern const unsigned char _cpp_trigraph_map[UCHAR_MAX + 1];\n extern unsigned char _cpp_trigraph_map[UCHAR_MAX + 1];\n #endif\n \n+#if !defined (HAVE_UCHAR) && !defined (IN_GCC)\n+typedef unsigned char uchar;\n+#endif\n+\n+#define UC (const uchar *)  /* Intended use: UC\"string\" */\n+\n /* Macros.  */\n \n static inline int cpp_in_system_header (cpp_reader *);"}]}