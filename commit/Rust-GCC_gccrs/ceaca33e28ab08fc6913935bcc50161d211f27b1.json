{"sha": "ceaca33e28ab08fc6913935bcc50161d211f27b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VhY2EzM2UyOGFiMDhmYzY5MTM5MzViY2M1MDE2MWQyMTFmMjdiMQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2013-02-18T15:21:32Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2013-02-18T15:21:32Z"}, "message": "re PR target/56214 (FAIL: gcc.c-torture/execute/20050121-1.c compilation, ICE)\n\n\tPR target/56214\n\t* config/pa/predicates.md (base14_operand): Except for BLKmode, QImode\n\tand HImode, require all displacements to be an integer multiple of the\n\tmode size.\n\t* config/pa/pa.c (pa_legitimate_address_p): For REG+BASE addresses,\n\tonly allow QImode and HImode when reload is in progress and strict is\n\ttrue.  Likewise for symbolic addresses.  Use base14_operand to check\n\tdisplacements in REG+BASE addresses.\n\nFrom-SVN: r196122", "tree": {"sha": "8ba0ef49d9742b4adcda26a5026f5f7d2948ba36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ba0ef49d9742b4adcda26a5026f5f7d2948ba36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceaca33e28ab08fc6913935bcc50161d211f27b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceaca33e28ab08fc6913935bcc50161d211f27b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceaca33e28ab08fc6913935bcc50161d211f27b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceaca33e28ab08fc6913935bcc50161d211f27b1/comments", "author": null, "committer": null, "parents": [{"sha": "fe0b4796ad3fe8ec17de328a628d39a100b17d7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0b4796ad3fe8ec17de328a628d39a100b17d7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe0b4796ad3fe8ec17de328a628d39a100b17d7c"}], "stats": {"total": 54, "additions": 24, "deletions": 30}, "files": [{"sha": "4b53af801b00699805c35254fe771d21bbe93f77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceaca33e28ab08fc6913935bcc50161d211f27b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceaca33e28ab08fc6913935bcc50161d211f27b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ceaca33e28ab08fc6913935bcc50161d211f27b1", "patch": "@@ -1,3 +1,14 @@\n+2013-02-18  John David Anglin  <dave.anglin@nrc-cnrc.ca>\n+\n+\tPR target/56214\n+\t* config/pa/predicates.md (base14_operand): Except for BLKmode, QImode\n+\tand HImode, require all displacements to be an integer multiple of their\n+\tmode size.\n+\t* config/pa/pa.c (pa_legitimate_address_p): For REG+BASE addresses,\n+\tonly allow QImode and HImode when reload is in progress and strict is\n+\ttrue.  Likewise for symbolic addresses.  Use base14_operand to check\n+\tdisplacements in REG+BASE addresses.\n+\n 2013-02-18  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/56366"}, {"sha": "0d39483d908ec1250e97f6833891ac7e46da1886", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceaca33e28ab08fc6913935bcc50161d211f27b1/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceaca33e28ab08fc6913935bcc50161d211f27b1/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=ceaca33e28ab08fc6913935bcc50161d211f27b1", "patch": "@@ -10517,21 +10517,13 @@ pa_legitimate_address_p (enum machine_mode mode, rtx x, bool strict)\n \t     the majority of accesses will use floating point instructions\n \t     that don't support 14-bit offsets.  */\n \t  if (!INT14_OK_STRICT\n-\t      && (GET_MODE_CLASS (mode) == MODE_FLOAT\n-\t\t  || (reload_in_progress\n-\t\t      && strict\n-\t\t      && (mode == SImode || mode == DImode))))\n-\t   return false;\n-\n-\t  if (INT_14_BITS (index)\n-\t      && (mode == BLKmode\n-\t\t  || mode == QImode\n-\t\t  || mode == HImode\n-\t\t  /* Displacement must be a multiple of its size.  */\n-\t\t  || (INTVAL (index) % GET_MODE_SIZE (mode)) == 0))\n-\t    return true;\n+\t      && reload_in_progress\n+\t      && strict\n+\t      && mode != QImode\n+\t      && mode != HImode)\n+\t    return false;\n \n-\t  return false;\n+\t  return base14_operand (index, mode);\n \t}\n \n       if (!TARGET_DISABLE_INDEXING\n@@ -10586,11 +10578,11 @@ pa_legitimate_address_p (enum machine_mode mode, rtx x, bool strict)\n \t    return true;\n \n \t  if (!INT14_OK_STRICT\n-\t      && (GET_MODE_CLASS (mode) == MODE_FLOAT\n-\t\t  || (reload_in_progress\n-\t\t      && strict\n-\t\t      && (mode == SImode || mode == DImode))))\n-\t   return false;\n+\t      && reload_in_progress\n+\t      && strict\n+\t      && mode != QImode\n+\t      && mode != HImode)\n+\t    return false;\n \n \t  if (CONSTANT_P (XEXP (x, 1)))\n \t    return true;"}, {"sha": "ba105f2e8ccdc62eed0089d36ed35f5d2a73d1c4", "filename": "gcc/config/pa/predicates.md", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceaca33e28ab08fc6913935bcc50161d211f27b1/gcc%2Fconfig%2Fpa%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceaca33e28ab08fc6913935bcc50161d211f27b1/gcc%2Fconfig%2Fpa%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpredicates.md?ref=ceaca33e28ab08fc6913935bcc50161d211f27b1", "patch": "@@ -272,22 +272,13 @@\n      assumed in the instruction encoding.  */\n   switch (mode)\n     {\n+    case BLKmode:\n     case QImode:\n     case HImode:\n       return true;\n \n-    case SImode:\n-    case SFmode:\n-    case SCmode:\n-      return (INTVAL (op) % 4) == 0;\n-\n-    case DImode:\n-    case DFmode:\n-    case DCmode:\n-      return (INTVAL (op) % 8) == 0;\n-\n     default:\n-      break;\n+      return (INTVAL (op) % GET_MODE_SIZE (mode)) == 0;\n     }\n \n   return false;"}]}