{"sha": "02a8fe00b562ef74f504e32dd2371dfe2e288c69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJhOGZlMDBiNTYyZWY3NGY1MDRlMzJkZDIzNzFkZmUyZTI4OGM2OQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2011-07-29T04:09:17Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-07-29T04:09:17Z"}, "message": "Add x32 support to config/i386/morestack.S.\n\n2011-07-28  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/morestack.S (X86_64_SAVE_NEW_STACK_BOUNDARY): New.\n\tUse X86_64_SAVE_NEW_STACK_BOUNDARY to save the new stack boundary\n\tfor x86-64.  Properly check __x86_64__ and __LP64__.\n\nFrom-SVN: r176912", "tree": {"sha": "b316a55b1d6f43e5ae37241b51034ae22879ddf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b316a55b1d6f43e5ae37241b51034ae22879ddf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02a8fe00b562ef74f504e32dd2371dfe2e288c69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a8fe00b562ef74f504e32dd2371dfe2e288c69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a8fe00b562ef74f504e32dd2371dfe2e288c69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a8fe00b562ef74f504e32dd2371dfe2e288c69/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "154516d9d2011112deeb5becd98819d63397b2b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/154516d9d2011112deeb5becd98819d63397b2b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/154516d9d2011112deeb5becd98819d63397b2b1"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "d0b6d7deb71d7f47fe8f3e0fb72ebb613212f96d", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a8fe00b562ef74f504e32dd2371dfe2e288c69/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a8fe00b562ef74f504e32dd2371dfe2e288c69/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=02a8fe00b562ef74f504e32dd2371dfe2e288c69", "patch": "@@ -1,3 +1,9 @@\n+2011-07-28  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/morestack.S (X86_64_SAVE_NEW_STACK_BOUNDARY): New.\n+\tUse X86_64_SAVE_NEW_STACK_BOUNDARY to save the new stack boundary\n+\tfor x86-64.  Properly check __x86_64__ and __LP64__.\n+\n 2010-07-28  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/64/sfp-machine.h (_FP_W_TYPE): Always use _WIN64"}, {"sha": "b09ac76d0601f76eea9b03a0ef1842cd301bfb57", "filename": "libgcc/config/i386/morestack.S", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a8fe00b562ef74f504e32dd2371dfe2e288c69/libgcc%2Fconfig%2Fi386%2Fmorestack.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a8fe00b562ef74f504e32dd2371dfe2e288c69/libgcc%2Fconfig%2Fi386%2Fmorestack.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fmorestack.S?ref=02a8fe00b562ef74f504e32dd2371dfe2e288c69", "patch": "@@ -353,7 +353,13 @@ __morestack:\n \t# FIXME: The offset must match\n \t# TARGET_THREAD_SPLIT_STACK_OFFSET in\n \t# gcc/config/i386/linux64.h.\n-\tmovq\t%rax,%fs:0x70\t\t# Save the new stack boundary.\n+\t# Macro to save the new stack boundary.\n+#ifdef __LP64__\n+#define X86_64_SAVE_NEW_STACK_BOUNDARY(reg)\tmovq\t%r##reg,%fs:0x70\n+#else\n+#define X86_64_SAVE_NEW_STACK_BOUNDARY(reg)\tmovl\t%e##reg,%fs:0x40\n+#endif\n+\tX86_64_SAVE_NEW_STACK_BOUNDARY (ax)\n \n \tcall\t__morestack_unblock_signals\n \n@@ -391,7 +397,7 @@ __morestack:\n \tsubq\t0(%rsp),%rax\t\t# Subtract available space.\n \taddq\t$BACKOFF,%rax\t\t# Back off 1024 bytes.\n .LEHE0:\n-\tmovq\t%rax,%fs:0x70\t\t# Save the new stack boundary.\n+\tX86_64_SAVE_NEW_STACK_BOUNDARY (ax)\n \n \taddq\t$16,%rsp\t\t# Remove values from stack.\n \n@@ -433,7 +439,7 @@ __morestack:\n \tmovq\t%rbp,%rcx\t\t# Get the stack pointer.\n \tsubq\t%rax,%rcx\t\t# Subtract available space.\n \taddq\t$BACKOFF,%rcx\t\t# Back off 1024 bytes.\n-\tmovq\t%rcx,%fs:0x70\t\t# Save new stack boundary.\n+\tX86_64_SAVE_NEW_STACK_BOUNDARY (cx)\n \tmovq\t(%rsp),%rdi\t\t# Restore exception data for call.\n #ifdef __PIC__\n \tcall\t_Unwind_Resume@PLT\t# Resume unwinding.\n@@ -493,7 +499,7 @@ __x86.get_pc_thunk.bx:\n \t.section .data.DW.ref.__gcc_personality_v0,\"awG\",@progbits,DW.ref.__gcc_personality_v0,comdat\n \t.type\tDW.ref.__gcc_personality_v0, @object\n DW.ref.__gcc_personality_v0:\n-#ifndef __x86_64\n+#ifndef __LP64__\n \t.align 4\n \t.size\tDW.ref.__gcc_personality_v0, 4\n \t.long\t__gcc_personality_v0\n@@ -504,7 +510,7 @@ DW.ref.__gcc_personality_v0:\n #endif\n #endif\n \n-#ifdef __x86_64__\n+#if defined __x86_64__ && defined __LP64__\n \n # This entry point is used for the large model.  With this entry point\n # the upper 32 bits of %r10 hold the argument size and the lower 32\n@@ -537,7 +543,7 @@ __morestack_large_model:\n        .size\t__morestack_large_model, . - __morestack_large_model\n #endif\n \n-#endif /* __x86_64__ */\n+#endif /* __x86_64__ && __LP64__ */\n \n # Initialize the stack test value when the program starts or when a\n # new thread starts.  We don't know how large the main stack is, so we\n@@ -570,7 +576,7 @@ __stack_split_initialize:\n #else /* defined(__x86_64__) */\n \n \tleaq\t-16000(%rsp),%rax\t# We should have at least 16K.\n-\tmovq\t%rax,%fs:0x70\n+\tX86_64_SAVE_NEW_STACK_BOUNDARY (ax)\n \tmovq\t%rsp,%rdi\n \tmovq\t$16000,%rsi\n #ifdef __PIC__\n@@ -592,7 +598,7 @@ __stack_split_initialize:\n \n \t.section\t.ctors.65535,\"aw\",@progbits\n \n-#ifndef __x86_64__\n+#ifndef __LP64__\n \t.align\t4\n \t.long\t__stack_split_initialize\n \t.long\t__morestack_load_mmap"}]}