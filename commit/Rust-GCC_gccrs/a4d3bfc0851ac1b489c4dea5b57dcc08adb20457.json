{"sha": "a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRkM2JmYzA4NTFhYzFiNDg5YzRkZWE1YjU3ZGNjMDhhZGIyMDQ1Nw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-04T21:23:27Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-05T14:49:26Z"}, "message": "analyzer: add enode status and revamp __analyzer_dump_exploded_nodes\n\nThe analyzer recognizes __analyzer_dump_exploded_nodes as a \"magic\"\nfunction for use in DejaGnu tests: at the end of the pass, it issues\na warning at each such call, dumping the count of exploded nodes seen at\nthe call, which can be checked in test cases via dg-warning directives,\nalong with the IDs of the enodes (which is helpful when debugging).\n\nMy intent was to give a way of testing the results of the state-merging\ncode.\n\nThe state-merging code can generate duplicate exploded nodes at a point\nwhen state merging occurs, taking a pair of enodes from the worklist\nthat share a program_point and sufficiently similar state.  For these\ncases it generates a merged state, and adds edges from those enodes to\nthe merged-state enode (potentially a new or a pre-existing enode); the\ninput enodes don't have process_node called on them.\n\nThis means that at a CFG join point there can be an unpredictable number\nof enodes that we don't care about, where the precise number depends on\nthe details of the state-merger code, immediately followed by a more\npredictable number that we do care about.\n\nI've been papering over this in the analyzer DejaGnu tests somewhat\nby adding pairs of __analyzer_dump_exploded_nodes calls at CFG join\npoints, where the output at the first call is somewhat arbitrary, and\nthe second has the number we care about; the first number tends to\nchange \"at random\" as I tweak the state merging code, in ways that\naren't interesting, but require the tests to be updated.\n\nSee e.g. gcc.dg/analyzer/paths-6.c which had:\n\n  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n  // FIXME: the above can vary between 2 and 3 exploded nodes\n  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n\nThis patch remedies this situation by tracking which enodes are\nprocessed, and which are merely \"merger\" enodes.  It updates the\noutput for __analyzer_dump_exploded_nodes so that count of enodes\nonly includes the *processed* enodes, and that the IDs are split\ninto \"processed\" and \"merger\" enodes.\n\nThe patch simplifies the testsuite by eliminating the redundant calls\ndescribed above; the example above becomes:\n\n  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n\nwhere the output in question is now:\n\n  warning: 1 processed enode: [EN: 94] merger(s): [EN: 93]\n\nThe patch also adds various checks on the status of enodes, to ensure\ne.g. that each enode is processed at most once.\n\ngcc/analyzer/ChangeLog:\n\t* engine.cc (exploded_node::dump_dot): Show merger enodes.\n\t(worklist::add_node): Assert that the node's m_status is\n\tSTATUS_WORKLIST.\n\t(exploded_graph::process_worklist): Likewise for nodes from the\n\tworklist.  Set status of merged nodes to STATUS_MERGER.\n\t(exploded_graph::process_node): Set status of node to\n\tSTATUS_PROCESSED.\n\t(exploded_graph::dump_exploded_nodes): Rework handling of\n\t\"__analyzer_dump_exploded_nodes\", splitting enodes by status into\n\t\"processed\" and \"merger\", showing the count of just the processed\n\tenodes at the call, rather than the count of all enodes.\n\t* exploded-graph.h (exploded_node::status): New enum.\n\t(exploded_node::exploded_node): Initialize m_status to\n\tSTATUS_WORKLIST.\n\t(exploded_node::get_status): New getter.\n\t(exploded_node::set_status): New setter.\n\t(exploded_node::m_status): New field.\n\ngcc/ChangeLog:\n\t* doc/analyzer.texi\n\t(Special Functions for Debugging the Analyzer): Update description\n\tof __analyzer_dump_exploded_nodes.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/data-model-1.c: Update for changed output to\n\t__analyzer_dump_exploded_nodes, dropping redundant call at merger.\n\t* gcc.dg/analyzer/data-model-7.c: Likewise.\n\t* gcc.dg/analyzer/loop-2.c: Update for changed output format.\n\t* gcc.dg/analyzer/loop-2a.c: Likewise.\n\t* gcc.dg/analyzer/loop-4.c: Likewise.\n\t* gcc.dg/analyzer/loop.c: Likewise.\n\t* gcc.dg/analyzer/malloc-paths-10.c: Likewise; drop redundant\n\tcall at merger.\n\t* gcc.dg/analyzer/malloc-vs-local-1a.c: Likewise.\n\t* gcc.dg/analyzer/malloc-vs-local-1b.c: Likewise.\n\t* gcc.dg/analyzer/malloc-vs-local-2.c: Likewise.\n\t* gcc.dg/analyzer/malloc-vs-local-3.c: Likewise.\n\t* gcc.dg/analyzer/paths-1.c: Likewise.\n\t* gcc.dg/analyzer/paths-1a.c: Likewise.\n\t* gcc.dg/analyzer/paths-2.c: Likewise.\n\t* gcc.dg/analyzer/paths-3.c: Likewise.\n\t* gcc.dg/analyzer/paths-4.c: Update for changed output format.\n\t* gcc.dg/analyzer/paths-5.c: Likewise.\n\t* gcc.dg/analyzer/paths-6.c: Likewise; drop redundant calls\n\tat merger.\n\t* gcc.dg/analyzer/paths-7.c: Likewise.\n\t* gcc.dg/analyzer/torture/conditionals-2.c: Update for changed\n\toutput format.\n\t* gcc.dg/analyzer/zlib-1.c: Likewise; drop redundant calls.\n\t* gcc.dg/analyzer/zlib-5.c: Update for changed output format.", "tree": {"sha": "14f711db4f537bd3f7ffef85afca7e235ac3a5e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14f711db4f537bd3f7ffef85afca7e235ac3a5e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7b3378f91c0641f2ef4d88db22af62a571c9359", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7b3378f91c0641f2ef4d88db22af62a571c9359", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7b3378f91c0641f2ef4d88db22af62a571c9359"}], "stats": {"total": 391, "additions": 246, "deletions": 145}, "files": [{"sha": "1b0dd3ce7e9cef39a4051b811425afe717070230", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -1,3 +1,9 @@\n+2020-02-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/analyzer.texi\n+\t(Special Functions for Debugging the Analyzer): Update description\n+\tof __analyzer_dump_exploded_nodes.\n+\n 2020-02-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/92190"}, {"sha": "0666d0028c6a9b3e4cf0aafb5d0a1dc3d1f9ac94", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -1,3 +1,22 @@\n+2020-02-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* engine.cc (exploded_node::dump_dot): Show merger enodes.\n+\t(worklist::add_node): Assert that the node's m_status is\n+\tSTATUS_WORKLIST.\n+\t(exploded_graph::process_worklist): Likewise for nodes from the\n+\tworklist.  Set status of merged nodes to STATUS_MERGER.\n+\t(exploded_graph::process_node): Set status of node to\n+\tSTATUS_PROCESSED.\n+\t(exploded_graph::dump_exploded_nodes): Rework handling of\n+\t\"__analyzer_dump_exploded_nodes\", splitting enodes by status into\n+\t\"processed\" and \"merger\", showing the count of just the processed\n+\tenodes at the call, rather than the count of all enodes.\n+\t* exploded-graph.h (exploded_node::status): New enum.\n+\t(exploded_node::exploded_node): Initialize m_status to\n+\tSTATUS_WORKLIST.\n+\t(exploded_node::get_status): New getter.\n+\t(exploded_node::set_status): New setter.\n+\n 2020-02-04  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93543"}, {"sha": "63579da953a94d9d745d8a03ffa0efdeb37e7efa", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 56, "deletions": 13, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -827,6 +827,8 @@ exploded_node::dump_dot (graphviz_out *gv, const dump_args_t &args) const\n   pp_write_text_to_stream (pp);\n \n   pp_printf (pp, \"EN: %i\", m_index);\n+  if (m_status == STATUS_MERGER)\n+    pp_string (pp, \" (merger)\");\n   pp_newline (pp);\n \n   format f (true);\n@@ -1638,6 +1640,7 @@ worklist::peek_next ()\n void\n worklist::add_node (exploded_node *enode)\n {\n+  gcc_assert (enode->get_status () == exploded_node::STATUS_WORKLIST);\n   m_queue.insert (key_t (*this, enode), enode);\n }\n \n@@ -2124,6 +2127,7 @@ exploded_graph::process_worklist ()\n   while (m_worklist.length () > 0)\n     {\n       exploded_node *node = m_worklist.take_next ();\n+      gcc_assert (node->get_status () == exploded_node::STATUS_WORKLIST);\n       gcc_assert (node->m_succs.length () == 0\n \t\t  || node == m_origin);\n \n@@ -2136,6 +2140,8 @@ exploded_graph::process_worklist ()\n       if (flag_analyzer_state_merge && node != m_origin)\n \tif (exploded_node *node_2 = m_worklist.peek_next ())\n \t  {\n+\t    gcc_assert (node_2->get_status ()\n+\t\t\t== exploded_node::STATUS_WORKLIST);\n \t    gcc_assert (node->m_succs.length () == 0);\n \t    gcc_assert (node_2->m_succs.length () == 0);\n \n@@ -2181,6 +2187,7 @@ exploded_graph::process_worklist ()\n \n \t\t\t/* Remove node_2 from the worklist.  */\n \t\t\tm_worklist.take_next ();\n+\t\t\tnode_2->set_status (exploded_node::STATUS_MERGER);\n \n \t\t\t/* Continue processing \"node\" below.  */\n \t\t      }\n@@ -2190,6 +2197,7 @@ exploded_graph::process_worklist ()\n \t\t\t   in the worklist, to be processed on the next\n \t\t\t   iteration.  */\n \t\t\tadd_edge (node, node_2, NULL, change);\n+\t\t\tnode->set_status (exploded_node::STATUS_MERGER);\n \t\t\tcontinue;\n \t\t      }\n \t\t    else\n@@ -2232,12 +2240,18 @@ exploded_graph::process_worklist ()\n \t\t\tif (merged_enode == node)\n \t\t\t  m_worklist.add_node (merged_enode);\n \t\t\telse\n-\t\t\t  add_edge (node, merged_enode, NULL, change);\n+\t\t\t  {\n+\t\t\t    add_edge (node, merged_enode, NULL, change);\n+\t\t\t    node->set_status (exploded_node::STATUS_MERGER);\n+\t\t\t  }\n \n \t\t\tif (merged_enode == node_2)\n \t\t\t  m_worklist.add_node (merged_enode);\n \t\t\telse\n-\t\t\t  add_edge (node_2, merged_enode, NULL, change);\n+\t\t\t  {\n+\t\t\t    add_edge (node_2, merged_enode, NULL, change);\n+\t\t\t    node_2->set_status (exploded_node::STATUS_MERGER);\n+\t\t\t  }\n \n \t\t\tcontinue;\n \t\t      }\n@@ -2320,6 +2334,8 @@ exploded_graph::process_node (exploded_node *node)\n   logger * const logger = get_logger ();\n   LOG_FUNC_1 (logger, \"EN: %i\", node->m_index);\n \n+  node->set_status (exploded_node::STATUS_PROCESSED);\n+\n   const program_point &point = node->get_point ();\n \n   /* Update cfun and input_location in case of an ICE: make it easier to\n@@ -3180,8 +3196,16 @@ exploded_graph::dump_exploded_nodes () const\n     }\n \n   /* Emit a warning at any call to \"__analyzer_dump_exploded_nodes\",\n-     giving the number of exploded nodes for \"before-stmt\", and their\n-     IDs.  */\n+     giving the number of processed exploded nodes for \"before-stmt\",\n+     and the IDs of processed and merger enodes.\n+\n+     We highlight the count of *processed* enodes since this is of most\n+     interest in DejaGnu tests for ensuring that state merger has\n+     happened.\n+\n+     We don't show the count of merger enodes, as this is more of an\n+     implementation detail of the merging that we don't want to bake\n+     into our expected DejaGnu messages.  */\n \n   unsigned i;\n   exploded_node *enode;\n@@ -3199,25 +3223,43 @@ exploded_graph::dump_exploded_nodes () const\n \t      if (seen.contains (stmt))\n \t\tcontinue;\n \n+\t      auto_vec<exploded_node *> processed_enodes;\n+\t      auto_vec<exploded_node *> merger_enodes;\n \t      /* This is O(N^2).  */\n \t      unsigned j;\n-\t      auto_vec<exploded_node *> enodes;\n \t      exploded_node *other_enode;\n \t      FOR_EACH_VEC_ELT (m_nodes, j, other_enode)\n \t\t{\n \t\t  if (other_enode->get_point ().get_kind () != PK_BEFORE_STMT)\n \t\t    continue;\n \t\t  if (other_enode->get_stmt () == stmt)\n-\t\t    enodes.safe_push (other_enode);\n+\t\t    switch (other_enode->get_status ())\n+\t\t      {\n+\t\t      default:\n+\t\t\tgcc_unreachable ();\n+\t\t      case exploded_node::STATUS_PROCESSED:\n+\t\t\tprocessed_enodes.safe_push (other_enode);\n+\t\t\tbreak;\n+\t\t      case exploded_node::STATUS_MERGER:\n+\t\t\tmerger_enodes.safe_push (other_enode);\n+\t\t\tbreak;\n+\t\t      }\n \t\t}\n \n \t      pretty_printer pp;\n-\t      print_enode_indices (&pp, enodes);\n+\t      pp_character (&pp, '[');\n+\t      print_enode_indices (&pp, processed_enodes);\n+\t      if (merger_enodes.length () > 0)\n+\t\t{\n+\t\t  pp_string (&pp, \"] merger(s): [\");\n+\t\t  print_enode_indices (&pp, merger_enodes);\n+\t\t}\n+\t      pp_character (&pp, ']');\n \n-\t      warning_n (stmt->location, 0, enodes.length (),\n-\t\t\t \"%i exploded node: %s\",\n-\t\t\t \"%i exploded nodes: %s\",\n-\t\t\t enodes.length (), pp_formatted_text (&pp));\n+\t      warning_n (stmt->location, 0, processed_enodes.length (),\n+\t\t\t \"%i processed enode: %s\",\n+\t\t\t \"%i processed enodes: %s\",\n+\t\t\t processed_enodes.length (), pp_formatted_text (&pp));\n \t      seen.add (stmt);\n \n \t      /* If the argument is non-zero, then print all of the states\n@@ -3233,10 +3275,11 @@ exploded_graph::dump_exploded_nodes () const\n \t      if (i_arg)\n \t\t{\n \t\t  exploded_node *other_enode;\n-\t\t  FOR_EACH_VEC_ELT (enodes, j, other_enode)\n+\t\t  FOR_EACH_VEC_ELT (processed_enodes, j, other_enode)\n \t\t    {\n \t\t      fprintf (stderr, \"%i of %i: EN %i:\\n\",\n-\t\t\t       j + 1, enodes.length (), other_enode->m_index);\n+\t\t\t       j + 1, processed_enodes.length (),\n+\t\t\t       other_enode->m_index);\n \t\t      other_enode->dump_succs_and_preds (stderr);\n \t\t      /* Dump state.  */\n \t\t      other_enode->get_state ().dump (m_ext_state, false);"}, {"sha": "e47816a5b6ef83e12e0dd43f87b3ab1c68a5ffa6", "filename": "gcc/analyzer/exploded-graph.h", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Fanalyzer%2Fexploded-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Fanalyzer%2Fexploded-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fexploded-graph.h?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -151,9 +151,26 @@ struct eg_traits\n class exploded_node : public dnode<eg_traits>\n {\n  public:\n+  /* Has this enode had exploded_graph::process_node called on it?\n+     This allows us to distinguish enodes that were merged during\n+     worklist-handling, and thus never had process_node called on them\n+     (in favor of processing the merged node).  */\n+  enum status\n+  {\n+    /* Node is in the worklist.  */\n+    STATUS_WORKLIST,\n+\n+    /* Node has had exploded_graph::process_node called on it.  */\n+    STATUS_PROCESSED,\n+\n+    /* Node was left unprocessed due to merger; it won't have had\n+       exploded_graph::process_node called on it.  */\n+    STATUS_MERGER\n+  };\n+\n   exploded_node (point_and_state ps,\n \t\t int index)\n-  : m_ps (ps), m_index (index)\n+  : m_ps (ps), m_status (STATUS_WORKLIST), m_index (index)\n   {\n     gcc_checking_assert (ps.get_state ().m_region_model->canonicalized_p ());\n   }\n@@ -240,6 +257,13 @@ class exploded_node : public dnode<eg_traits>\n \n   void dump_succs_and_preds (FILE *outf) const;\n \n+  enum status get_status () const { return m_status; }\n+  void set_status (enum status status)\n+  {\n+    gcc_assert (m_status == STATUS_WORKLIST);\n+    m_status = status;\n+  }\n+\n private:\n   DISABLE_COPY_AND_ASSIGN (exploded_node);\n \n@@ -249,6 +273,8 @@ class exploded_node : public dnode<eg_traits>\n      is immutable once the exploded_node has been created.  */\n   const point_and_state m_ps;\n \n+  enum status m_status;\n+\n public:\n   /* The index of this exploded_node.  */\n   const int m_index;"}, {"sha": "4bd1c59d8b661bc9679cde9841b06292eeaafed7", "filename": "gcc/doc/analyzer.texi", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Fdoc%2Fanalyzer.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Fdoc%2Fanalyzer.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fanalyzer.texi?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -469,20 +469,28 @@ __analyzer_dump_path ();\n will emit a placeholder ``note'' diagnostic with a path to that call site,\n if the analyzer finds a feasible path to it.\n \n-The builtin @code{__analyzer_dump_exploded_nodes} will dump information\n-after analysis on all of the exploded nodes at that program point:\n+The builtin @code{__analyzer_dump_exploded_nodes} will emit a warning\n+after analysis containing information on all of the exploded nodes at that\n+program point:\n \n @smallexample\n   __analyzer_dump_exploded_nodes (0);\n @end smallexample\n \n-will dump just the number of nodes, and their IDs.\n+will output the number of ``processed'' nodes, and the IDs of\n+both ``processed'' and ``merger'' nodes, such as:\n+\n+@smallexample\n+warning: 2 processed enodes: [EN: 56, EN: 58] merger(s): [EN: 54-55, EN: 57, EN: 59]\n+@end smallexample\n+\n+With a non-zero argument\n \n @smallexample\n   __analyzer_dump_exploded_nodes (1);\n @end smallexample\n \n-will also dump all of the states within those nodes.\n+it will also dump all of the states within the ``processed'' nodes.\n \n @smallexample\n    __analyzer_dump_region_model ();"}, {"sha": "f6291df9795641c4fb7b83c09bcdab4ea2e18973", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -1,3 +1,32 @@\n+2020-02-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/data-model-1.c: Update for changed output to\n+\t__analyzer_dump_exploded_nodes, dropping redundant call at merger.\n+\t* gcc.dg/analyzer/data-model-7.c: Likewise.\n+\t* gcc.dg/analyzer/loop-2.c: Update for changed output format.\n+\t* gcc.dg/analyzer/loop-2a.c: Likewise.\n+\t* gcc.dg/analyzer/loop-4.c: Likewise.\n+\t* gcc.dg/analyzer/loop.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-paths-10.c: Likewise; drop redundant\n+\tcall at merger.\n+\t* gcc.dg/analyzer/malloc-vs-local-1a.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-vs-local-1b.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-vs-local-2.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-vs-local-3.c: Likewise.\n+\t* gcc.dg/analyzer/paths-1.c: Likewise.\n+\t* gcc.dg/analyzer/paths-1a.c: Likewise.\n+\t* gcc.dg/analyzer/paths-2.c: Likewise.\n+\t* gcc.dg/analyzer/paths-3.c: Likewise.\n+\t* gcc.dg/analyzer/paths-4.c: Update for changed output format.\n+\t* gcc.dg/analyzer/paths-5.c: Likewise.\n+\t* gcc.dg/analyzer/paths-6.c: Likewise; drop redundant calls\n+\tat merger.\n+\t* gcc.dg/analyzer/paths-7.c: Likewise.\n+\t* gcc.dg/analyzer/torture/conditionals-2.c: Update for changed\n+\toutput format.\n+\t* gcc.dg/analyzer/zlib-1.c: Likewise; drop redundant calls.\n+\t* gcc.dg/analyzer/zlib-5.c: Update for changed output format.\n+\n 2020-02-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/92190"}, {"sha": "e2bd1f9cd3626cd2fab3c50594d5cdb56019097c", "filename": "gcc/testsuite/gcc.dg/analyzer/data-model-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -895,8 +895,7 @@ int test_40 (int flag)\n     i = 17;\n \n   /* With state-merging, we lose the relationship between 'flag' and 'i'.  */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   if (flag)\n     __analyzer_eval (i == 43); /* { dg-warning \"UNKNOWN\" } */"}, {"sha": "cb0b33e66c8292013e25952be29303f8900924e7", "filename": "gcc/testsuite/gcc.dg/analyzer/data-model-7.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-7.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -10,8 +10,7 @@ int test_40 (int flag)\n     i = 17;\n \n   /* Without state-merging, we retain the relationship between 'flag' and 'i'.  */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   if (flag)\n     __analyzer_eval (i == 43); /* { dg-warning \"TRUE\" } */"}, {"sha": "f106722c247417ff03bac6c4ade5c2e9e6c9d572", "filename": "gcc/testsuite/gcc.dg/analyzer/loop-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-2.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -10,14 +10,14 @@ void test(void)\n {\n   struct s s;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n \n   for (s.i=0; s.i<256; s.i++) {\n     __analyzer_eval (s.i < 256); /* { dg-warning \"TRUE\" } */\n       /* (should report TRUE twice). */\n \n-    __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+    __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n     //__analyzer_eval (s.i == 0); /* { d-todo-g-warning \"UNKNOWN\" \"\" { xfail *-*-* } } */\n       /* { d-todo-g-warning \"TRUE\" \"\" { target *-*-* } .-1 } */\n@@ -33,5 +33,5 @@ void test(void)\n   /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   /* TODO(xfail^^^): ideally it should figure out i == 256 at exit.  */\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n }"}, {"sha": "a392ffc1a63bb7f85a23df1a6d793e56d6ff603d", "filename": "gcc/testsuite/gcc.dg/analyzer/loop-2a.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-2a.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -10,7 +10,7 @@ void test(void)\n {\n   union u u;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n \n   for (u.i=0; u.i<256; u.i++) {\n@@ -19,7 +19,7 @@ void test(void)\n     /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-2 } */\n     /* (should report TRUE twice). */\n \n-    __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+    __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n     //__analyzer_eval (u.i == 0); /* { d-todo-g-warning \"UNKNOWN\" \"\" { xfail *-*-* } } */\n       /* { d-todo-g-warning \"TRUE\" \"\" { target *-*-* } .-1 } */\n@@ -36,5 +36,5 @@ void test(void)\n   /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   /* TODO(xfail^^^): ideally it should figure out i == 256 at exit.  */\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n }"}, {"sha": "e5767de1f965d1c020742169ea9ad8a0f18f9c4a", "filename": "gcc/testsuite/gcc.dg/analyzer/loop-4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-4.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -9,7 +9,7 @@ void test(void)\n {\n   int i, j, k;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   for (i=0; i<256; i++) {\n \n@@ -25,7 +25,7 @@ void test(void)\n \n       __analyzer_eval (j < 256); /* { dg-warning \"TRUE\" } */\n \n-      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 exploded nodes\" } */\n+      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 processed enodes\" } */\n \n       for (k=0; k<256; k++) {\n \n@@ -34,10 +34,10 @@ void test(void)\n \n \t__analyzer_eval (k < 256); /* { dg-warning \"TRUE\" } */\n \n-\t__analyzer_dump_exploded_nodes (0); /* { dg-warning \"4 exploded nodes\" } */\n+\t__analyzer_dump_exploded_nodes (0); /* { dg-warning \"4 processed enodes\" } */\n       }\n     }\n   }\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n }"}, {"sha": "37b757bf8f42eb979d435986968f377220f106e3", "filename": "gcc/testsuite/gcc.dg/analyzer/loop.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -6,7 +6,7 @@ void test(void)\n {\n   int i;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   for (i=0; i<256; i++) {\n       __analyzer_eval (i < 256); /* { dg-warning \"TRUE\" } */\n@@ -22,7 +22,7 @@ void test(void)\n       /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-2 } */\n       /* TODO(xfail^^^): ideally we ought to figure out i >= 0 for all iterations.  */\n \n-      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n   }\n \n   __analyzer_eval (i >= 256); /* { dg-warning \"TRUE\" } */\n@@ -31,5 +31,5 @@ void test(void)\n   /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */\n   /* TODO(xfail^^^): it only figures out i >= 256, rather than i == 256.  */\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n }"}, {"sha": "ef88388267ba13254c6d0ceda3c0f15d9cc001f0", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-paths-10.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-10.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -10,8 +10,7 @@ int test (int flag)\n     other_flag = 0;\n \n   /* With state-merging, we lose the relationship between 'flag' and 'other_flag'.  */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   if (other_flag)\n     __analyzer_eval (flag); /* { dg-warning \"UNKNOWN\" } */"}, {"sha": "d47dfa8b2c00c03b576ebf4042134f1b8290e20a", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-vs-local-1a.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-vs-local-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-vs-local-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-vs-local-1a.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -44,14 +44,13 @@ int test_repeated_predicate_1 (int n)\n   else\n     ptr = buf;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   result = do_stuff (ptr, n);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 processed enodes\" } */\n   // FIXME: why 3 here?\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 processed enodes\" } */\n   // FIXME: why 3 here?\n \n   if (n > 10)\n@@ -73,11 +72,11 @@ int test_repeated_predicate_2 (int n)\n   else\n     ptr = buf;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   result = do_stuff_2 (ptr, n);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   if (n > 10)\n     free (ptr); /* { dg-bogus \"not on the heap\" } */\n@@ -102,11 +101,11 @@ int test_explicit_flag (int n)\n   else\n     ptr = buf;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   result = do_stuff (ptr, n);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 processed enodes\" } */\n   // FIXME: why 3 here?\n \n   if (need_to_free)\n@@ -128,11 +127,11 @@ int test_pointer_comparison (int n)\n   else\n     ptr = buf;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   result = do_stuff (ptr, n);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 processed enodes\" } */\n   // FIXME: why 3 here?\n \n   if (ptr != buf)\n@@ -159,19 +158,18 @@ int test_initial_flag (int n)\n   /* Due to state-merging, we lose the relationship between 'n > 10'\n      and 'on_heap' here; we have to rely on feasibility-checking\n      in the diagnostic_manager to reject the false warnings.  */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   if (on_heap)\n     ptr = (int *)malloc (sizeof (int) * n);\n   else\n     ptr = buf;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   result = do_stuff (ptr, n);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"5 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"5 processed enodes\" } */\n   // FIXME: why 5 here?\n \n   if (n > 10)"}, {"sha": "a30b8c0e08060be880e7fc433db0597f11580d8f", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-vs-local-1b.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-vs-local-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-vs-local-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-vs-local-1b.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -44,13 +44,11 @@ int test_repeated_predicate_1 (int n)\n   else\n     ptr = buf;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   result = do_stuff (ptr, n);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   if (n > 10)\n     free (ptr); /* { dg-bogus \"not on the heap\" } */\n@@ -71,11 +69,11 @@ int test_repeated_predicate_2 (int n)\n   else\n     ptr = buf;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   result = do_stuff_2 (ptr, n);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   if (n > 10)\n     free (ptr); /* { dg-bogus \"not on the heap\" } */\n@@ -100,11 +98,11 @@ int test_explicit_flag (int n)\n   else\n     ptr = buf;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   result = do_stuff (ptr, n);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   if (need_to_free)\n     free (ptr); /* { dg-bogus \"not on the heap\" } */\n@@ -125,11 +123,11 @@ int test_pointer_comparison (int n)\n   else\n     ptr = buf;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   result = do_stuff (ptr, n);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   if (ptr != buf)\n     free (ptr); /* { dg-bogus \"not on the heap\" } */\n@@ -155,19 +153,18 @@ int test_initial_flag (int n)\n   /* Due to state-merging, we lose the relationship between 'n > 10'\n      and 'on_heap' here; we have to rely on feasibility-checking\n      in the diagnostic_manager to reject the false warnings.  */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   if (on_heap)\n     ptr = (int *)malloc (sizeof (int) * n);\n   else\n     ptr = buf;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   result = do_stuff (ptr, n);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   if (n > 10)\n     free (ptr); /* { dg-bogus \"not on the heap\" } */"}, {"sha": "89bd511549f37be841e9e478dde6f1d8e023c9b1", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-vs-local-2.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-vs-local-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-vs-local-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-vs-local-2.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -24,8 +24,7 @@ int test_repeated_predicate_1 (int n)\n   else\n     ptr = buf;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   {\n     int *p = ptr;\n@@ -38,8 +37,7 @@ int test_repeated_predicate_1 (int n)\n     result = sum;\n   }\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 processed enodes\" } */\n \n   if (n > 10)\n     free (ptr); /* { dg-bogus \"not on the heap\" } */\n@@ -60,8 +58,7 @@ int test_repeated_predicate_1a (int n)\n   else\n     ptr = buf;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   {\n     int *p = ptr;\n@@ -72,8 +69,7 @@ int test_repeated_predicate_1a (int n)\n     result = sum;\n   }\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 processed enodes\" } */\n \n   if (n > 10)\n     free (ptr); /* { dg-bogus \"not on the heap\" } */\n@@ -94,11 +90,11 @@ int test_repeated_predicate_2 (int n)\n   else\n     ptr = buf;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   result = do_stuff_2 (ptr, n);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   if (n > 10)\n     free (ptr); /* { dg-bogus \"not on the heap\" } */\n@@ -123,7 +119,7 @@ int test_explicit_flag (int n)\n   else\n     ptr = buf;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   {\n     int *p = ptr;\n@@ -136,7 +132,7 @@ int test_explicit_flag (int n)\n     result = sum;\n   }\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 processed enodes\" } */\n \n   if (need_to_free)\n     free (ptr); /* { dg-bogus \"not on the heap\" } */\n@@ -157,7 +153,7 @@ int test_pointer_comparison (int n)\n   else\n     ptr = buf;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   {\n     int *p = ptr;\n@@ -170,7 +166,7 @@ int test_pointer_comparison (int n)\n     result = sum;\n   }\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 processed enodes\" } */\n \n   if (ptr != buf)\n     free (ptr); /* { dg-bogus \"not on the heap\" } */"}, {"sha": "d20a2753bb8628e7d544b55b4490852cf608f198", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-vs-local-3.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-vs-local-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-vs-local-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-vs-local-3.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -23,8 +23,7 @@ int test_1 (int n)\n   else\n     ptr = buf;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   {\n     int *p = ptr;\n@@ -37,7 +36,7 @@ int test_1 (int n)\n     result = sum;\n   }\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 processed enodes\" } */\n \n   return result; /* { dg-message \"leak of 'p'\" } */\n   /* FIXME: should this be 'ptr'?  */\n@@ -56,11 +55,11 @@ int test_2 (int n)\n   else\n     ptr = buf;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   result = do_stuff_2 (ptr, n);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   return result; /* { dg-message \"leak of 'ptr'\" } */\n }"}, {"sha": "df5b3a660844e75d11980af27817e97be0cf67e4", "filename": "gcc/testsuite/gcc.dg/analyzer/paths-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-1.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -13,6 +13,5 @@ void test (struct foo *pf)\n     bar (0);\n   else\n     bar (1);\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n }"}, {"sha": "a1b842ff54fb248705e26ba2c6e8a5a30a36196f", "filename": "gcc/testsuite/gcc.dg/analyzer/paths-1a.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-1a.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -13,6 +13,5 @@ void test (union foo *pf)\n     bar (0);\n   else\n     bar (1);\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n }"}, {"sha": "3efc053ade1b21a6954ca555db7d0c16a89d1980", "filename": "gcc/testsuite/gcc.dg/analyzer/paths-2.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-2.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -6,9 +6,7 @@ int test (int a)\n     return (-2);\n   }\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 exploded nodes\" } */\n-\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   return 0;\n }\n@@ -19,9 +17,7 @@ int test_2 (int a)\n     return (-2);\n   }\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"4 exploded nodes\" } */\n-\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   return 0;\n }"}, {"sha": "9bd303016904daf8d70a4b7918044bdd7526884e", "filename": "gcc/testsuite/gcc.dg/analyzer/paths-3.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-3.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -13,13 +13,12 @@ int test_1 (int a, int b)\n     else\n       p = malloc (32);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"4 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   if (a > 5)\n     {\n       free (p);\n-      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n     }\n \n   return 0; /* { dg-bogus \"leak\" } */\n@@ -35,13 +34,12 @@ int test_2 (int a, int b)\n     else\n       p = malloc (32);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"4 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   if (a > 6) /* different condition */\n     {\n       free (p);\n-      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n     }\n \n   return 0; /* { dg-warning \"leak of 'p'\" } */"}, {"sha": "2f58763886cf22e57a9a69d28e48a9bb2af3adc1", "filename": "gcc/testsuite/gcc.dg/analyzer/paths-4.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-4.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -10,41 +10,43 @@ extern void do_stuff (struct state *, int);\n \n int test_1 (struct state *s)\n {\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n   while (1)\n     {\n-      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n-      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n+      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n+      /* TODO: why does the above need an extra stmt to merge state?  */\n       do_stuff (s, s->mode);\n     }\n }\n \n int test_2 (struct state *s)\n {\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n   while (1)\n     {\n-      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 exploded nodes\" } */\n-      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 processed enodes\" } */\n+      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n+      /* TODO: why does the above need an extra stmt to merge state?  */\n       switch (s->mode)\n \t{\n \tcase 0:\n-\t  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+\t  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \t  do_stuff (s, 0);\n \t  break;\n \tcase 1:\n-\t  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+\t  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \t  do_stuff (s, 17);\n \t  break;\n \tcase 2:\n-\t  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+\t  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \t  do_stuff (s, 5);\n \t  break;\n \tcase 3:\n-\t  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+\t  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \t  return 42;\n \tcase 4:\n-\t  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+\t  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \t  return -3;\n \t}\n     }"}, {"sha": "21aa23067c1a2ac259beccfa8e209324772dc1d0", "filename": "gcc/testsuite/gcc.dg/analyzer/paths-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-5.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -3,10 +3,10 @@\n void test (int *p, int n)\n {\n   int i;\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n   for (i = 0; i < n; i++)\n     {\n       p[i] = i; /* { dg-bogus \"uninitialized\" } */\n-      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n     }\n }"}, {"sha": "8220b8eff82d83faa92d240f4d2e70a3dd9e1361", "filename": "gcc/testsuite/gcc.dg/analyzer/paths-6.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-6.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -19,9 +19,7 @@ void test_1 (int flag)\n       a = 3;\n     }\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n-  // FIXME: the above can vary between 2 and 3 exploded nodes\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n   __analyzer_eval (a == 3); /* { dg-warning \"TRUE\" } */\n   __analyzer_eval (b == 4); /* { dg-warning \"TRUE\" } */\n }\n@@ -42,8 +40,7 @@ void test_2 (int flag)\n       f = 3;\n     }\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n   __analyzer_eval (f == 3); /* { dg-warning \"TRUE\" } */\n   __analyzer_eval (g == 4); /* { dg-warning \"TRUE\" } */\n }\n@@ -92,8 +89,7 @@ void test_3 (int i)\n       break;\n     }\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"6 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enode\" } */\n   __analyzer_eval (f == 3); /* { dg-warning \"TRUE\" } */\n   __analyzer_eval (g == 4); /* { dg-warning \"TRUE\" } */\n   __analyzer_eval (h == 5); /* { dg-warning \"TRUE\" } */\n@@ -112,8 +108,7 @@ void test_4 (int flag)\n       q = malloc (256);\n       p = malloc (256);\n     }\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n   free (p);\n   free (q);\n }"}, {"sha": "243b9635364baad7999074cb200e54d10a74dfe7", "filename": "gcc/testsuite/gcc.dg/analyzer/paths-7.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-7.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -9,20 +9,20 @@ int test (int flag, void *ptr, int *p, int n)\n   int sum = 0;\n   int i;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   if (flag)\n     free (ptr);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   for (i = 0; i < n; i++)\n     p[i] = i;\n   for (i = 0; i < n; i++)\n     sum += foo (p[i]); /* { dg-bogus \"uninitialized\" } */\n   result = sum;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   if (flag)\n     free (ptr); /* { dg-warning \"double-'free' of 'ptr'\" } */\n@@ -37,21 +37,20 @@ int test_2 (int flag, int *p, int n)\n \n   void *ptr = malloc (16);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   if (flag)\n     free (ptr);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n \n   for (i = 0; i < n; i++)\n     p[i] = i;\n   for (i = 0; i < n; i++)\n     sum += foo (p[i]); /* { dg-bogus \"uninitialized\" } */\n   result = sum;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"5 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"5 exploded nodes\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"5 processed enodes\" } */\n   // FIXME: why 5 here?\n \n   free (ptr); /* { dg-warning \"double-'free' of 'ptr'\" } */"}, {"sha": "35b0a05f64942c17becb7ff5b42c7627ccbf73c2", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/conditionals-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fconditionals-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fconditionals-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fconditionals-2.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -7,7 +7,7 @@\n static void __attribute__((noinline))\n test_1_callee (void *p, void *q)\n {\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   __analyzer_eval (p == Z_NULL); /* { dg-warning \"FALSE\" } */\n   __analyzer_eval (p != Z_NULL); /* { dg-warning \"TRUE\" } */\n@@ -27,7 +27,7 @@ void test_1 (void *p, void *q)\n static void __attribute__((noinline))\n test_2_callee (void *p, void *q)\n {\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   __analyzer_eval (p == Z_NULL); /* { dg-warning \"FALSE\" } */\n   __analyzer_eval (p != Z_NULL); /* { dg-warning \"TRUE\" } */"}, {"sha": "171af3d6852e03d51ccd282bbaeb99cadeca264b", "filename": "gcc/testsuite/gcc.dg/analyzer/zlib-1.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fzlib-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fzlib-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fzlib-1.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -21,49 +21,44 @@ int deflateEnd(z_stream *strm)\n {\n   int status;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   if (strm == 0 || strm->state == 0)\n     return (-2);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   status = strm->state->status;\n   if (status != 42 && status != 113 && status != 666) {\n     return (-2);\n   }\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"4 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   if (strm->state->pending_buf)\n     (*(strm->zfree))(strm->opaque, (void *)(strm->state->pending_buf));\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   if (strm->state->head)\n       (*(strm->zfree))(strm->opaque, (void *)(strm->state->head));\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   if (strm->state->prev)\n     (*(strm->zfree))(strm->opaque, (void *)(strm->state->prev));\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   if (strm->state->window)\n     (*(strm->zfree))(strm->opaque, (void *)(strm->state->window));\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 exploded nodes\" } */\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   (*(strm->zfree))(strm->opaque, (void *)(strm->state));\n   strm->state = 0;\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   return status == 113 ? (-3) : 0;\n }"}, {"sha": "afb6102333053832a0d0b0e0c8ea63fa95e96b57", "filename": "gcc/testsuite/gcc.dg/analyzer/zlib-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fzlib-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fzlib-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fzlib-5.c?ref=a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "patch": "@@ -42,7 +42,7 @@ int main(int argc, char *argv[]) {\n   if (compr == 0 || uncompr == 0)\n     exit(1);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 exploded node\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n   test_compress(compr, comprLen, uncompr, uncomprLen);\n "}]}