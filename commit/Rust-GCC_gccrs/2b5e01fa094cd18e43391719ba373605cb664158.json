{"sha": "2b5e01fa094cd18e43391719ba373605cb664158", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI1ZTAxZmEwOTRjZDE4ZTQzMzkxNzE5YmEzNzM2MDVjYjY2NDE1OA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2019-01-14T10:38:00Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-01-14T10:38:00Z"}, "message": "[D] Merge upstream dmd cd2034cd7\n\nOne fix in the asm statement parser to stop parsing if the end of the\nstatement has been reached, and moves all inline asm tests to gdc.dg.\nThese being adjusted where necessary to test the GCC style instead.\n\ngcc/testsuite/ChangeLog:\n\n2019-01-14  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\t* gdc.dg/asm1.d: New test.\n\t* gdc.dg/asm2.d: New test.\n\t* gdc.dg/asm3.d: New test.\n\t* gdc.dg/asm4.d: New test.\n\t* lib/gdc.exp (gdc_init): Set gcc_error_prefix and gcc_warning_prefix.\n\nFrom-SVN: r267913", "tree": {"sha": "70ba7ea0f6d4311fc3762600e9bbe2da4245ede2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70ba7ea0f6d4311fc3762600e9bbe2da4245ede2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b5e01fa094cd18e43391719ba373605cb664158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b5e01fa094cd18e43391719ba373605cb664158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b5e01fa094cd18e43391719ba373605cb664158", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b5e01fa094cd18e43391719ba373605cb664158/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c5f89006fa4b64c77997f660554a12315f4ac1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5f89006fa4b64c77997f660554a12315f4ac1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c5f89006fa4b64c77997f660554a12315f4ac1d"}], "stats": {"total": 1093, "additions": 216, "deletions": 877}, "files": [{"sha": "a3b2db74af4c2b47437769fdcd4f376ba8a2739e", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=2b5e01fa094cd18e43391719ba373605cb664158", "patch": "@@ -1,4 +1,4 @@\n-6d5b853d30908638d49210ebe600917296b8ab9b\n+cd2034cd7b157dd8f3e94c684061bb1aa630b2b6\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "cecbdefe41a0abda6cd8520ed1fe588c9f35cc62", "filename": "gcc/d/dmd/iasmgcc.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Fd%2Fdmd%2Fiasmgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Fd%2Fdmd%2Fiasmgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fiasmgcc.c?ref=2b5e01fa094cd18e43391719ba373605cb664158", "patch": "@@ -224,7 +224,7 @@ static Identifiers *parseExtAsmGotoLabels(Parser *p)\n static GccAsmStatement *parseGccAsm(Parser *p, GccAsmStatement *s)\n {\n     s->insn = p->parseExpression();\n-    if (p->token.value == TOKsemicolon)\n+    if (p->token.value == TOKsemicolon || p->token.value == TOKeof)\n         goto Ldone;\n \n     // No semicolon followed after instruction template, treat as extended asm.\n@@ -254,7 +254,7 @@ static GccAsmStatement *parseGccAsm(Parser *p, GccAsmStatement *s)\n                 assert(0);\n         }\n \n-        if (p->token.value == TOKsemicolon)\n+        if (p->token.value == TOKsemicolon || p->token.value == TOKeof)\n             goto Ldone;\n     }\n Ldone:\n@@ -288,6 +288,7 @@ Statement *gccAsmSemantic(GccAsmStatement *s, Scope *sc)\n         *ptoklist = NULL;\n     }\n     p.token = *toklist;\n+    p.scanloc = s->loc;\n \n     // Parse the gcc asm statement.\n     s = parseGccAsm(&p, s);"}, {"sha": "373f39d2a8b2bc1c4b1de426ff98cdbf690eb787", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b5e01fa094cd18e43391719ba373605cb664158", "patch": "@@ -1,3 +1,11 @@\n+2019-01-14  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/asm1.d: New test.\n+\t* gdc.dg/asm2.d: New test.\n+\t* gdc.dg/asm3.d: New test.\n+\t* gdc.dg/asm4.d: New test.\n+\t* lib/gdc.exp (gdc_init): Set gcc_error_prefix and gcc_warning_prefix.\n+\n 2019-01-13  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/88776"}, {"sha": "7b00e4d54ec89a0fb8d2776b508c763df0b125c3", "filename": "gcc/testsuite/gdc.dg/asm1.d", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Fgdc.dg%2Fasm1.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Fgdc.dg%2Fasm1.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fasm1.d?ref=2b5e01fa094cd18e43391719ba373605cb664158", "patch": "@@ -0,0 +1,82 @@\n+// { dg-do compile }\n+module asm1;\n+\n+void parse1()\n+{\n+    asm\n+    {\n+        \"\"h;    // { dg-error \"found 'h' when expecting ':'\" }\n+    }\n+}\n+\n+void parse2()\n+{\n+    asm \n+    {\n+        \"\" : : \"g\" 1 ? 2 : 3;\n+        \"\" : : \"g\" 1 ? 2 : : 3;\n+        // { dg-error \"expression expected, not ':'\" \"\" { target *-*-* } .-1 }\n+        // { dg-error \"expected constant string constraint for operand\" \"\" { target *-*-* } .-2 }\n+    }\n+}\n+\n+void parse3()\n+{\n+    asm { \"\" [; }\n+    // { dg-error \"expression expected, not ';'\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"found 'EOF' when expecting ','\" \"\" { target *-*-* } .-2 }\n+    // { dg-error \"found 'EOF' when expecting ']'\" \"\" { target *-*-* } .-3 }\n+    // { dg-error \"found 'EOF' when expecting ';'\" \"\" { target *-*-* } .-4 }\n+}\n+\n+void semantic1()\n+{\n+    {\n+        int one;\n+    L1:\n+        ;\n+    }\n+    asm { \"\" : : : : L1, L2; }\n+    // { dg-error \"goto skips declaration of variable asm1.semantic1.one\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"goto skips declaration of variable asm1.semantic1.two\" \"\" { target *-*-* } .-2 }\n+    {\n+        int two;\n+    L2:\n+        ;\n+    }\n+}\n+\n+void semantic2a(X...)(X expr)\n+{\n+    alias X[0] var1;\n+    asm { \"%0\" : \"=m\" var1; }   // { dg-error \"double 'double' is a type, not an lvalue\" }\n+}\n+\n+void semantic2()\n+{\n+   semantic2a(3.6);     // { dg-error \"template instance asm1.semantic2a!double error instantiating\" }\n+}\n+\n+void semantic3()\n+{\n+    asm \n+    {\n+        unknown;        // { dg-error \"undefined identifier\" }\n+    }\n+}\n+\n+struct S4\n+{\n+    template opDispatch(string Name, P...)\n+    {\n+        static void opDispatch(P) {}\n+    }\n+}\n+\n+void semantic4()\n+{\n+    asm\n+    {\n+        \"%0\" : : \"m\" S4.foo;    // { dg-error \"template instance opDispatch!\\\"foo\\\" has no value\" }\n+    }\n+}"}, {"sha": "bce0e41a60fbecd54e5d274cd40d34ccb7546acd", "filename": "gcc/testsuite/gdc.dg/asm2.d", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Fgdc.dg%2Fasm2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Fgdc.dg%2Fasm2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fasm2.d?ref=2b5e01fa094cd18e43391719ba373605cb664158", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile }\n+module asm2;\n+\n+void test()\n+{\n+    asm const shared { }    // { dg-error \"const/immutable/shared/inout attributes are not allowed on asm blocks\" }\n+}\n+"}, {"sha": "333d83ec99b7fbdb11b3f1168bd09b1313dd67a6", "filename": "gcc/testsuite/gdc.dg/asm3.d", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Fgdc.dg%2Fasm3.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Fgdc.dg%2Fasm3.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fasm3.d?ref=2b5e01fa094cd18e43391719ba373605cb664158", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile }\n+// { dg-options \"-Wall -Wdeprecated -Werror\" }\n+module asm3;\n+\n+void test1() nothrow    // { dg-error \"nothrow function 'asm3.test1' may throw\" }\n+{\n+    asm { }             // { dg-error \"asm statement is assumed to throw - mark it with 'nothrow' if it does not\" }\n+}\n+\n+void test2() pure\n+{\n+    asm { }             // { dg-error \"asm statement is assumed to be impure - mark it with 'pure' if it is not\" }\n+}\n+\n+void test3() @nogc\n+{\n+    asm { }             // { dg-error \"asm statement is assumed to use the GC - mark it with '@nogc' if it does not\" }\n+}\n+\n+void test4() @safe\n+{\n+    asm { }             // { dg-error \"asm statement is assumed to be @system - mark it with '@trusted' if it is not\" }\n+}\n+"}, {"sha": "e243c0820ac8ef001ca92c0126203a1a7578c023", "filename": "gcc/testsuite/gdc.dg/asm4.d", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Fgdc.dg%2Fasm4.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Fgdc.dg%2Fasm4.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fasm4.d?ref=2b5e01fa094cd18e43391719ba373605cb664158", "patch": "@@ -0,0 +1,40 @@\n+// https://issues.dlang.org/show_bug.cgi?id=12979\n+// { dg-do compile }\n+// { dg-options \"-Wall -Wdeprecated -Werror\" }\n+module asm4;\n+\n+void test1()\n+{\n+    asm pure nothrow @nogc @trusted {}\n+    asm @safe {}\n+}\n+\n+void test2() pure nothrow @nogc @safe\n+{\n+    asm pure nothrow @nogc @trusted {}\n+}\n+\n+void test3()()\n+{\n+    asm pure nothrow @nogc @trusted {}\n+}\n+\n+static assert(__traits(compiles, () pure nothrow @nogc @safe => test3()));\n+\n+void test4()()\n+{\n+    asm {}\n+}\n+\n+// wait for deprecation of asm pure inference\n+// static assert(!__traits(compiles, () pure => test4()));\n+static assert(!__traits(compiles, () nothrow => test4()));\n+// wait for deprecation of asm @nogc inference\n+// static assert(!__traits(compiles, () @nogc => test4()));\n+static assert(!__traits(compiles, () @safe => test4()));\n+\n+@safe\n+void test5()\n+{\n+    static assert(!__traits(compiles, { asm { \"\"; } }() ));\n+}"}, {"sha": "afe919af13d07a7794a5808067fbc8403d8e28e0", "filename": "gcc/testsuite/gdc.test/compilable/deprecate12979a.d", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdeprecate12979a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdeprecate12979a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdeprecate12979a.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,27 +0,0 @@\n-// REQUIRED_ARGS: -dw\n-// PERMUTE_ARGS:\n-\n-/*\n-TEST_OUTPUT:\n----\n-compilable/deprecate12979a.d(13): Deprecation: asm statement is assumed to throw - mark it with `nothrow` if it does not\n----\n-*/\n-\n-void foo() nothrow\n-{\n-    version(GNU)\n-    {\n-        asm\n-        {\n-            \"\";\n-        }\n-    }\n-    else\n-    {\n-        asm\n-        {\n-            ret;\n-        }\n-    }\n-}"}, {"sha": "f88fd16511a83b5a647170ffbc3805dea9e7d602", "filename": "gcc/testsuite/gdc.test/compilable/iasm_labeloperand.d", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fiasm_labeloperand.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fiasm_labeloperand.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fiasm_labeloperand.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,48 +0,0 @@\n-\n-version (D_InlineAsm_X86)\n-    version = TestInlineAsm;\n-else version (D_InlineAsm_X86_64)\n-    version = TestInlineAsm;\n-else version (GNU)\n-    version = TestInlineAsm;\n-else\n-    pragma(msg, \"Inline asm not supported, not testing.\");\n-\n-version (TestInlineAsm)\n-{\n-    void testInlineAsm()\n-    {\n-        version (GNU)\n-        {\n-        L1:\n-            asm { \"\"; }\n-            asm { \"\" : : : : L1, L2; }\n-        L2:\n-            asm { \"\"; }\n-        }\n-        else\n-        {\n-            asm\n-            {\n-\t\tL1:\n-\t\t\tnop;\n-\t\t\tnop;\n-\t\t\tnop;\n-\t\t\tnop;\n-\t\t\t\n-\t\t\tmov EAX, dword ptr L1; // Check back references\n-\t\t\tmov EAX, dword ptr L2; // Check forward references\n-\t\t\tmov EAX, dword ptr DS:L1; // Not really useful in standard use, but who knows.\n-\t\t\tmov EAX, dword ptr FS:L2; // Once again, not really useful, but it is valid.\n-\t\t\tmov EAX, dword ptr CS:L1; // This is what the first test case should implicitly be.\n-\t\t\t\n-\t\tL2:\n-\t\t\tnop;\n-\t\t\tnop;\n-\t\t\tnop;\n-\t\t\tnop;\n-\t\t\t\n-            }\n-        }\n-    }\n-}"}, {"sha": "1df7e80f20a7bdc41658b3321e6199caf4182a23", "filename": "gcc/testsuite/gdc.test/compilable/test11471.d", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest11471.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest11471.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest11471.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,10 +0,0 @@\n-// REQUIRED_ARGS: -profile\n-\n-void main() nothrow\n-{\n-    // Error: asm statements are assumed to throw\n-    version(GNU)\n-        asm { \"\"; }\n-    else\n-        asm { nop; }\n-}"}, {"sha": "14ca6efc0eedf33744110ba674ddc0da7d30b2ef", "filename": "gcc/testsuite/gdc.test/compilable/test12979a.d", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12979a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12979a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12979a.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,5 +0,0 @@\n-void parse()\n-{\n-    asm pure nothrow @nogc @trusted {}\n-    asm @safe {}\n-}"}, {"sha": "41c76a251e81b34d0c3de59dda1a8df1505f8962", "filename": "gcc/testsuite/gdc.test/compilable/test12979b.d", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12979b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12979b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12979b.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,64 +0,0 @@\n-// REQUIRED_ARGS: -w -de\n-\n-void foo() pure nothrow @nogc @safe\n-{\n-    version(GNU)\n-    {\n-        asm pure nothrow @nogc @trusted\n-        {\n-            \"\";\n-        }\n-    }\n-    else\n-    {\n-        asm pure nothrow @nogc @trusted\n-        {\n-            ret;\n-        }\n-    }\n-}\n-\n-void bar()()\n-{\n-    version(GNU)\n-    {\n-        asm pure nothrow @nogc @trusted\n-        {\n-            \"\";\n-        }\n-    }\n-    else\n-    {\n-        asm pure nothrow @nogc @trusted\n-        {\n-            ret;\n-        }\n-    }\n-}\n-\n-static assert(__traits(compiles, () pure nothrow @nogc @safe => bar()));\n-\n-void baz()()\n-{\n-    version(GNU)\n-    {\n-        asm\n-        {\n-            \"\";\n-        }\n-    }\n-    else\n-    {\n-        asm\n-        {\n-            ret;\n-        }\n-    }\n-}\n-\n-// wait for deprecation of asm pure inference\n-// static assert(!__traits(compiles, () pure => baz()));\n-static assert(!__traits(compiles, () nothrow => baz()));\n-// wait for deprecation of asm @nogc inference\n-// static assert(!__traits(compiles, () @nogc => baz()));\n-static assert(!__traits(compiles, () @safe => baz()));"}, {"sha": "5b2cd56c9f96a5f45da9b343edf36d43c96ce1bc", "filename": "gcc/testsuite/gdc.test/fail_compilation/deprecate12979a.d", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdeprecate12979a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdeprecate12979a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdeprecate12979a.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,18 +0,0 @@\n-// REQUIRED_ARGS: -de\n-// PERMUTE_ARGS:\n-\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/deprecate12979a.d(14): Deprecation: asm statement is assumed to throw - mark it with `nothrow` if it does not\n-fail_compilation/deprecate12979a.d(12): Error: nothrow function `deprecate12979a.foo` may throw\n----\n-*/\n-\n-void foo() nothrow\n-{\n-    asm\n-    {\n-        ret;\n-    }\n-}"}, {"sha": "0d675cb558feff89e8f79cfa868f9546a2264cfb", "filename": "gcc/testsuite/gdc.test/fail_compilation/deprecate12979b.d", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdeprecate12979b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdeprecate12979b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdeprecate12979b.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,17 +0,0 @@\n-// REQUIRED_ARGS: -de\n-// PERMUTE_ARGS:\n-\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/deprecate12979b.d(13): Deprecation: asm statement is assumed to be impure - mark it with 'pure' if it is not\n----\n-*/\n-\n-void foo() pure\n-{\n-    asm\n-    {\n-        ret;\n-    }\n-}"}, {"sha": "782700469cdbd69fa02a505b4eb18f51ac525c3c", "filename": "gcc/testsuite/gdc.test/fail_compilation/deprecate12979c.d", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdeprecate12979c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdeprecate12979c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdeprecate12979c.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,17 +0,0 @@\n-// REQUIRED_ARGS: -de\n-// PERMUTE_ARGS:\n-\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/deprecate12979c.d(13): Deprecation: asm statement is assumed to use the GC - mark it with '@nogc' if it does not\n----\n-*/\n-\n-void foo() @nogc\n-{\n-    asm\n-    {\n-        ret;\n-    }\n-}"}, {"sha": "afff5671027a13896dcf2e2c6831584fdaf7200a", "filename": "gcc/testsuite/gdc.test/fail_compilation/deprecate12979d.d", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdeprecate12979d.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdeprecate12979d.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdeprecate12979d.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,16 +0,0 @@\n-// PERMUTE_ARGS:\n-\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/deprecate12979d.d(12): Error: asm statement is assumed to be @system - mark it with '@trusted' if it is not\n----\n-*/\n-\n-void foo() @safe\n-{\n-    asm\n-    {\n-        ret;\n-    }\n-}"}, {"sha": "fe30f898293c48831c0026ed9e5bc8459174b8a9", "filename": "gcc/testsuite/gdc.test/fail_compilation/diag6717.d", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag6717.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag6717.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag6717.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,14 +0,0 @@\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/diag6717.d(12): Error: end of instruction expected, not 'h'\n----\n-*/\n-\n-void main()\n-{\n-    asm\n-    {\n-        mov AX, 12h ;\n-    }\n-}"}, {"sha": "b00cc47b3009184e58e89b89b0b8b26624a5a058", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail12635.d", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail12635.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail12635.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail12635.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,21 +0,0 @@\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/fail12635.d(19): Error: Cannot generate a segment prefix for a branching instruction\n----\n-*/\n-\n-void foo()\n-{\n-    enum NOP = 0x9090_9090_9090_9090;\n-\n-    asm\n-    {\n-    L1:\n-        dq NOP,NOP,NOP,NOP;    //  32\n-        dq NOP,NOP,NOP,NOP;    //  64\n-        dq NOP,NOP,NOP,NOP;    //  96\n-        dq NOP,NOP,NOP,NOP;    // 128\n-        jmp DS:L1;\n-    }\n-}"}, {"sha": "bd18ef2808f5d2042c08f3cb89a2e298760e933c", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail13938.d", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail13938.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail13938.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail13938.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,16 +0,0 @@\n-// REQUIRED_ARGS: -o-\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/fail13938.d(14): Error: cannot directly load TLS variable 'val'\n----\n-*/\n-\n-void test1()\n-{\n-    static int val;\n-    asm\n-    {\n-        mov EAX, val;\n-    }\n-}"}, {"sha": "074c22c89aab0fa951d7cac99b27d1d32f826e28", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail13939.d", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail13939.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail13939.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail13939.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,17 +0,0 @@\n-// REQUIRED_ARGS: -o- -fPIC\n-// DISABLED: win32 win64\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/fail13939.d(15): Error: cannot directly load global variable 'val' with PIC code\n----\n-*/\n-version(Windows) static assert(0);\n-void test1()\n-{\n-    __gshared int val;\n-    asm\n-    {\n-        mov EAX, val;\n-    }\n-}"}, {"sha": "84f72c27f391551d34747517f4ae9bff33b62011", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail14009.d", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail14009.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail14009.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail14009.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,14 +0,0 @@\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/fail14009.d(12): Error: expression expected not :\n----\n-*/\n-\n-void main()\n-{\n-    asm {\n-      mov EAX, FS: 1 ? 2 : 3;     // accepted\n-      mov EAX, FS: 1 ? 2 : : 3;   // rejected\n-    }\n-}"}, {"sha": "60cf4ce2782e6cd152e5d7b80b65783872bf6e44", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail152.d", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail152.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail152.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail152.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,29 +0,0 @@\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/fail152.d(15): Error: cannot use type double as an operand\n----\n-*/\n-\n-// 1028 Segfault using tuple inside asm code.\n-\n-void a(X...)(X expr)\n-{\n-    alias X[0] var1;\n-    version(GNU)\n-    {\n-        version(X86) asm {\"fstpd %0;\" : \"=m\" (var1) : : ;}\n-        else version(X86_64) asm {\"fstpd %0;\" : \"=m\" (var1) : : ;}\n-        else static assert(false, \"ASM code not implemented for this architecture\");\n-    }\n-    else asm {\n-        //fld double ptr X[0];   // (1) segfaults\n-        fstp double ptr var1;    // (2) ICE\n-    }\n-}\n-\n-void main()\n-{\n-   a(3.6);\n-}\n-"}, {"sha": "deb0ceb6a3216a4dd2fe8dfe93f792fea47b0e8a", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail2350.d", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail2350.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail2350.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail2350.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,15 +0,0 @@\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/fail2350.d(8): Error: function fail2350.test2350 naked assembly functions with contracts are not supported\n----\n-*/\n-\n-void test2350()\n-in\n-{\n-}\n-body\n-{\n-\tasm { naked; }\n-}"}, {"sha": "5fa55962d18f15a12fcb91d6405dac253f31c9ef", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail274.d", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail274.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail274.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail274.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,11 +0,0 @@\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/fail274.d(10): Error: expression expected not ;\n----\n-*/\n-\n-void main()\n-{\n-    asm { inc [; }\n-}"}, {"sha": "ab872357bac08589c4a6100ecba11b888ad676da", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail327.d", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail327.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail327.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail327.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,17 +0,0 @@\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/fail327.d(10): Error: asm statement is assumed to be @system - mark it with '@trusted' if it is not\n----\n-*/\n-\n-@safe void foo()\n-{\n-    version(GNU)\n-    {\n-        version(X86) asm {\"xor %%EAX,%%EAX\" : : : ;}\n-        else version(X86_64) asm {\"xor %%EAX,%%EAX\" : : : ;}\n-        else static assert(false, \"ASM code not implemented for this architecture\");\n-    }\n-    else asm { xor EAX,EAX; }\n-}"}, {"sha": "bcf6368c4217b6e5c97187ff8a2cdc699b4c1998", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail3354.d", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail3354.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail3354.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail3354.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,12 +0,0 @@\n-\n-void main()\n-{\n-    version(D_InlineAsm_X86) {}\n-    else version(D_InlineAsm_X64) {}\n-    else static assert(0);\n-\n-    asm {\n-        fldz ST(0), ST(1), ST(2), ST(3);\n-        fld ST(0), ST(1), ST(2), ST(3);\n-    }\n-}"}, {"sha": "56cda779d9faed9278e6ee67b0e5b3b711a90235", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail353.d", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail353.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail353.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail353.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,42 +0,0 @@\n-/*\n-TEST_OUTPUT:\n----\n-block displacement of -130 exceeds the maximum offset of -128 to 127.\n----\n-*/\n-\n-void foo()\n-{\n-    enum NOP = 0x9090_9090_9090_9090;\n-\n-    version(GNU)\n-    {\n-        version(X86) asm {\n-            \"L1:\"\n-            \"dq %0,%0,%0,%0;\"\n-            \"dq %0,%0,%0,%0;\"\n-            \"dq %0,%0,%0,%0;\"\n-            \"dq %0,%0,%0,%0;\"\n-            \"loop L1;\" : \"n\" (NOP) : : ;\n-        }\n-        else version(X86_64) asm {\n-            \"L1:\"\n-            \"dq %0,%0,%0,%0;\"\n-            \"dq %0,%0,%0,%0;\"\n-            \"dq %0,%0,%0,%0;\"\n-            \"dq %0,%0,%0,%0;\"\n-            \"loop L1;\" : \"n\" (NOP) : : ;\n-        }\n-        else static assert(false, \"ASM code not implemented for this architecture\");\n-    }\n-    else asm\n-    {\n-    L1:\n-        dq NOP,NOP,NOP,NOP;    //  32\n-        dq NOP,NOP,NOP,NOP;    //  64\n-        dq NOP,NOP,NOP,NOP;    //  96\n-        dq NOP,NOP,NOP,NOP;    // 128\n-        // unnoticed signed underflow of rel8 with DMD2.056\n-        loop L1;\n-    }\n-}"}, {"sha": "ed1c307d4bc8631a27f4f6b3f4f59efa009d9fe4", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail8168.d", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail8168.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail8168.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail8168.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,6 +0,0 @@\n-void main() {\n-    asm {\n-        unknown; // wrong opcode\n-    }\n-}\n-"}, {"sha": "6512d858c1720d970463eca27f91b436ce098919", "filename": "gcc/testsuite/gdc.test/fail_compilation/ice15239.d", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice15239.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice15239.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice15239.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,23 +0,0 @@\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/ice15239.d(21): Error: cannot interpret opDispatch!\"foo\" at compile time\n-fail_compilation/ice15239.d(21): Error: bad type/size of operands '__error'\n----\n-*/\n-\n-struct T\n-{\n-    template opDispatch(string Name, P...)\n-    {\n-        static void opDispatch(P) {}\n-    }\n-}\n-\n-void main()\n-{\n-    asm\n-    {\n-        call T.foo;\n-    }\n-}"}, {"sha": "95cd3aae1e1aa520284e418fa40edd1849d96573", "filename": "gcc/testsuite/gdc.test/fail_compilation/test12979.d", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest12979.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest12979.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest12979.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,16 +0,0 @@\n-// PERMUTE_ARGS:\n-\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/test12979.d(13): Error: const/immutable/shared/inout attributes are not allowed on `asm` blocks\n----\n-*/\n-\n-void foo()\n-{\n-    asm const shared\n-    {\n-        ret;\n-    }\n-}"}, {"sha": "44d627005cc99b04652f40154ea15044046e1192", "filename": "gcc/testsuite/gdc.test/runnable/argufilem.d", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fargufilem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fargufilem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fargufilem.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,22 +0,0 @@\n-// EXTRA_SOURCES: imports/argufile.d\n-\n-// NOTE: The bug only works when main.d and argufile.d are put in\n-//                      separate files and compiled like 'dmd main.d argufile.d'\n-//                      Also, I'm sure writefln is causing the crash cause when I\n-//                      use printf(), it doesn't crash.\n-\n-// main.d -------------------------------------------------------\n-\n-import argufile;\n-\n-int main(string[] args)\n-{\n-        string message = arguments(\"bob is \", 7, \" years old\");\n-\n-        writefln(message);\n-\n-        argufile.useargs(); // will crash here\n-\n-        return 0;\n-}\n-"}, {"sha": "b193d3b1e028701d6a9fb8462a253aef0ac31ff9", "filename": "gcc/testsuite/gdc.test/runnable/ctorpowtests.d", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fctorpowtests.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fctorpowtests.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fctorpowtests.d?ref=2b5e01fa094cd18e43391719ba373605cb664158", "patch": "@@ -5,18 +5,8 @@ int magicVariable()\n   if (__ctfe)\n    return 3;\n \n-  version(GNU)\n-  {\n-    version(X86)\n-      asm { \"nop\"; }\n-    else version(X86_64)\n-      asm { \"nop\"; }\n-    else\n-      static assert(\"\");\n-  }\n-  else\n-      asm { nop; }\n-  return 2;\n+  shared int var = 2;\n+  return var;\n }\n \n static assert(magicVariable()==3);\n@@ -122,20 +112,14 @@ struct StructWithCtor\n     float x;\n }\n \n-int containsAsm() {\n-       version(GNU)\n-       {\n-         version(X86)\n-           asm { \"nop\"; }\n-         else version(X86_64)\n-           asm { \"nop\"; }\n-         else\n-           static assert(\"\");\n-       }\n-       else\n-          asm { nop; }\n-       return 0;\n-    }\n+int containsAsm()\n+{\n+    version (D_InlineAsm_X86)\n+        asm { nop; }\n+    else version (D_InlineAsm_X86_64)\n+        asm { nop; }\n+    return 0;\n+}\n \n enum A = StructWithCtor(1);\n enum B = StructWithCtor(7, 2.3);"}, {"sha": "2a85547d8ab48499de41fafbfc5d7973786a9e16", "filename": "gcc/testsuite/gdc.test/runnable/imports/argufile.d", "status": "removed", "additions": 0, "deletions": 146, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fimports%2Fargufile.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fimports%2Fargufile.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fimports%2Fargufile.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,146 +0,0 @@\n-// argufile.d ----------------------------------------------------\n-\n-public:\n-\n-import core.vararg;\n-import std.stdio;\n-import std.utf;\n-\n-dstring formatstring(TypeInfo[] arguments, va_list argptr)\n-{\n-\n-\tdstring message = null;\n-\n-\tvoid putc(dchar c)\n-\t{\n-\t\tmessage ~= c;\n-\t}\n-\n-\n-\tdoFormat(&putc, arguments, argptr);\n-\n-\n-\treturn message;\n-}\n-\n-string arguments(...) // turns a bunch of arguments into a formatted char[] string\n-{\n-\treturn std.utf.toUTF8(formatstring(_arguments, _argptr));\n-}\n-\n-void useargs(...)\n-{\n-\tstring crashage = arguments(\"why is 8 scared of 7? because\", 7,8,9);\n-\n-\t//printf(\"%.*s\\n\", crashage);\n-\twritefln(crashage);\n-}\n-\n-\n-// dustmited version of the deprecated doFormat.\n-// See the full file at:\n-// https://github.com/dlang/undeaD/blob/master/src/undead/doformat.d\n-void doFormat(void delegate(dchar) putc, TypeInfo[] arguments, va_list ap)\n-{\n-    import core.stdc.stdlib : alloca, malloc;\n-    import std.format ;\n-\n-    size_t bufLength = 1024;\n-    void* argBuffer = malloc(bufLength);\n-    size_t bufUsed ;\n-    foreach (ti; arguments)\n-    {\n-        auto pos = bufUsed;\n-        // Align to next word boundary\n-        bufUsed += ti.tsize + size_t.sizeof - 1;\n-        bufUsed -= bufUsed& size_t.sizeof - 1;\n-        // Copy argument into buffer\n-        va_arg(ap, ti, argBuffer + pos);\n-    }\n-\n-    auto argptr = argBuffer;\n-    void* skipArg(TypeInfo ti)\n-    {\n-        auto p = argptr;\n-        // Align to next word boundary\n-        argptr += ti.tsize + size_t.sizeof - 1;\n-        argptr -= cast(size_t)argptr & size_t.sizeof - 1;\n-        return p;\n-    }\n-    auto getArg(T)()\n-    {\n-        return *cast(T*)skipArg(typeid(T));\n-    }\n-\n-    TypeInfo ti;\n-    Mangle m;\n-    void formatArg()\n-    {\n-        ulong vnumber;\n-        char vchar;\n-        Mangle m2;\n-        int signed ;\n-        string s;\n-\n-        void putstr(const char[] s)\n-        {\n-            foreach (c; s)\n-                putc(c);\n-\n-        }\n-\n-        //printf(\"formatArg(fc = '%c', m = '%c')\\n\", fc, m);\n-        int mi;\n-        switch (m)\n-        {\n-            L2:\n-                putstr((&vchar)[0 .. 1]);\n-                return;\n-\n-            case Mangle.Tint:\n-                signed = 1;\n-                vnumber = getArg!int;\n-                goto Lnumber;\n-\n-            case Mangle.Tarray:\n-                mi = 10;\n-while (1)\n-                {\n-                    m2 = cast(Mangle)typeid(ti).name[mi];\n-                    switch (m2)\n-                    {\n-                        case Mangle.Tchar:\n-                            s = getArg!string;\n-                            putstr(s);\n-                            break;\n-\n-                        case Mangle.Timmutable:\n-                            mi++;\n-                            continue;\n-\n-                        default:\n-                            {}\n-                    }\n-                    return;\n-                }\n-            default:\n-                {}\n-        }\n-\n-    Lnumber:\n-;\n-vchar = cast(char)('0' + vnumber);\n-                goto L2;\n-    }\n-\n-    for (int j ; j < arguments.length; )\n-    {\n-        ti = arguments[j++];\n-        int mi = 9;\n-        do\n-            m = cast(Mangle)typeid(ti).name[mi++];\n-while (m == Mangle.Tconst );\n-\n-            formatArg;\n-    }\n-}"}, {"sha": "ee17be0b00fe9c3b8575cb88cf6ea6043214e268", "filename": "gcc/testsuite/gdc.test/runnable/test23.d", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest23.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest23.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest23.d?ref=2b5e01fa094cd18e43391719ba373605cb664158", "patch": "@@ -357,43 +357,33 @@ void test16()\n \n void test17()\n {\n+    version(D_InlineAsm_X86_64)\n+        enum AsmX86 = true;\n+    else version(D_InlineAsm_X86)\n+        enum AsmX86 = true;\n+    else\n+        enum AsmX86 = false;\n+\n     version (OSX)\n     {\n     }\n     else\n     {\n-        /*const*/ float f = 1.2f;\n+        const f = 1.2f;\n         float g = void;\n \n-\n-        version(D_SoftFloat)\n-        {\n-            g = f;\n-        }\n-        else version(GNU)\n-        {\n-            version(X86) asm\n-            {\n-                \"flds %1; fstps %0;\" : \"=m\" (g) : \"m\" (f) : ;\n-            }\n-            else version(X86_64) asm\n-            {\n-                \"flds %1; fstps %0;\" : \"=m\" (g) : \"m\" (f) : ;\n-            }\n-            else version(ARM) asm\n-            {\n-                \"vldr d0, %1; vstr d0, %0;\" : \"=m\" (g) : \"m\" (f), : \"d0\";\n-            }\n-            else static assert(false, \"ASM code not implemented for this architecture\");\n-        }\n-        else\n+        static if (AsmX86)\n         {\n             asm\n             {\n                 fld f;  // doesn't work with PIC\n                 fstp g;\n             }\n         }\n+        else\n+        {\n+            g = f;\n+        }\n         assert(g == 1.2f);\n     }\n }"}, {"sha": "5c28d0f8252424d5038d08d0e6acb632005f6fd0", "filename": "gcc/testsuite/gdc.test/runnable/test34.d", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest34.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest34.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest34.d?ref=2b5e01fa094cd18e43391719ba373605cb664158", "patch": "@@ -707,24 +707,7 @@ void foo35()\n         c = 3;\n \n         xxx = cast(typeof(xxx))(a + b);\n-        version(GNU)\n-        {\n-            version(X86) asm\n-            {\n-                \"int $3;\" : : : ;\n-            }\n-            else version(X86_64) asm\n-            {\n-                \"int $3;\" : : : ;\n-            }\n-            else\n-            {\n-                import gcc.builtins;\n-                __builtin_trap();\n-            }\n-        }\n-        else\n-            asm { int 3; }\n+        throw new Exception(\"xxx\");\n         xxx( 4, 5, 6 );\n }\n "}, {"sha": "9f5b140127d88e81fa01c4b12751b6ddc985143e", "filename": "gcc/testsuite/gdc.test/runnable/test36.d", "status": "removed", "additions": 0, "deletions": 109, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest36.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest36.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest36.d?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,109 +0,0 @@\n-// PERMUTE_ARGS:\n-\n-import std.stdio;\n-interface IUnknown{\n-        extern(Windows):\n-        void func();\n-}\n-class ComObject :IUnknown\n-{\n-extern (Windows):\n-        void func()\n-        {writefln(`comobject`);\n-        }\n-}\n-interface IDataObject: IUnknown\n-{\n-        extern(Windows):\n-        void method();\n-}\n-package class invarianttest:ComObject, IDataObject\n-{\n-        invariant()\n-        {\n-                writefln(`hello invariant`);\n-        }\n-\n-extern (Windows):\n-        override void func()\n-        {\n-        int esp;\n-        version(GNU)\n-        {\n-            version(X86) asm\n-            {\n-                \"mov %%ESP,%0\" : \"=r\" esp : : ;\n-            }\n-            else version(X86_64) asm\n-            {\n-                \"mov %%ESP,%0\" : \"=r\" esp : : ;\n-            }\n-            else version(ARM) asm\n-            {\n-                \"str sp,%0\" : \"=m\" esp : : ;\n-            }\n-            else static assert(false, \"ASM code not implemented for this architecture\");\n-        }\n-        else asm\n-        {\n-                mov esp,ESP;\n-        }\n-        printf(\"\\n%d\",esp);\n-        printf(`func`);\n-        }\n-        void method()\n-        {\n-                writefln(`method`);\n-        }\n-}\n-int main()\n-{\n-        auto inst= new invarianttest;\n-        int esp;\n-        version(GNU)\n-        {\n-            version(X86) asm\n-            {\n-                \"mov %%ESP,%0\" : \"=r\" esp : : ;\n-            }\n-            else version(X86_64) asm\n-            {\n-                \"mov %%ESP,%0\" : \"=r\" esp : : ;\n-            }\n-            else version(ARM) asm\n-            {\n-                \"str sp,%0\" : \"=m\" esp : : ;\n-            }\n-            else static assert(false, \"ASM code not implemented for this architecture\");\n-        }\n-        else asm\n-        {\n-                mov esp,ESP;\n-        }\n-        inst.func();\n-        inst.method();\n-        writefln(\"\\n%d\",esp);\n-        version(GNU)\n-        {\n-            version(X86) asm\n-            {\n-                \"mov %%ESP,%0\" : \"=r\" esp : : ;\n-            }\n-            else version(X86_64) asm\n-            {\n-                \"mov %%ESP,%0\" : \"=r\" esp : : ;\n-            }\n-            else version(ARM) asm\n-            {\n-                \"str sp,%0\" : \"=m\" esp : : ;\n-            }\n-            else static assert(false, \"ASM code not implemented for this architecture\");\n-        }\n-        else asm\n-        {\n-                mov esp,ESP;\n-        }\n-        writefln(\"\\n%d\",esp);\n-        return 0;\n-}\n-"}, {"sha": "b9619c992ff15ea360409b99b0122723f6cb61d7", "filename": "gcc/testsuite/gdc.test/runnable/test42.d", "status": "modified", "additions": 18, "deletions": 43, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest42.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest42.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest42.d?ref=2b5e01fa094cd18e43391719ba373605cb664158", "patch": "@@ -2469,40 +2469,21 @@ bool foo150()\n void crash(int x)\n {\n     if (x==200) return;\n-\n-    version(GNU)\n-    {\n-        version(X86) asm\n-        {\n-            \"int $3;\" : :  :;\n-        }\n-        else version(X86_64) asm\n-        {\n-            \"int $3;\" : : :;\n-        }\n-        else\n-        {\n-            import gcc.builtins;\n-            __builtin_trap();\n-        }\n-    }\n-    else\n-    {\n-        asm { int 3; }\n-    }\n+    assert(0);\n }\n \n void test151()\n {\n-   int x;\n-   bug3521(&x);\n+    int x;\n+    bug3521(&x);\n }\n \n-void bug3521(int *a){\n+void bug3521(int *a)\n+{\n     int c = 0;\n     *a = 0;\n     if ( *a || (*a != (c = 200)) )\n-       crash(c);\n+        crash(c);\n }\n \n /***************************************************/\n@@ -4236,28 +4217,22 @@ void oddity4001()\n }\n \n /***************************************************/\n+// https://issues.dlang.org/show_bug.cgi?id=3809\n \n int bug3809()\n {\n-    version(GNU)\n-    {\n-        version(X86)\n-            asm { \"nop\"; }\n-        else version(X86_64)\n-            asm { \"nop\"; }\n-        else version(ARM)\n-            asm { \"nop\"; }\n-        else\n-            static assert(false, \"ASM code not implemented for this architecture\");\n-    }\n-    else\n-    {\n-        asm { nop; }\n-    }\n-    return 0;\n+    static int a = 0;\n+    return a;\n }\n-struct BUG3809 { int xx; }\n-void bug3809b() {\n+\n+struct BUG3809\n+{\n+    int xx;\n+}\n+\n+void bug3809b()\n+{\n+    BUG3809 b = { bug3809() };\n }\n \n /***************************************************/"}, {"sha": "cec4c0f7fa435b21582cd2d2f7a9be6aff5b9614", "filename": "gcc/testsuite/gdc.test/runnable/testsafe.d", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftestsafe.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftestsafe.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftestsafe.d?ref=2b5e01fa094cd18e43391719ba373605cb664158", "patch": "@@ -207,18 +207,9 @@ void safeexception()\n @safe\n void inlineasm()\n {\n-    version(GNU)\n-    {\n-        version(X86)\n-            static assert(!__traits(compiles, { asm { \"nop\"; } }() ));\n-        else version(X86_64)\n-            static assert(!__traits(compiles, { asm { \"nop\"; } }() ));\n-        else version(ARM)\n-            static assert(!__traits(compiles, { asm { \"nop\"; } }() ));\n-        else\n-            static assert(false, \"ASM code not implemented for this architecture\");\n-    }\n-    else\n+    version (D_InlineAsm_X86)\n+        static assert(!__traits(compiles, { asm { int 3; } }() ));\n+    else version (D_InlineAsm_X86_64)\n         static assert(!__traits(compiles, { asm { int 3; } }() ));\n }\n "}, {"sha": "c749c4c055d6584d1e59de143ea9810a66ad9a2a", "filename": "gcc/testsuite/lib/gdc.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Flib%2Fgdc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5e01fa094cd18e43391719ba373605cb664158/gcc%2Ftestsuite%2Flib%2Fgdc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgdc.exp?ref=2b5e01fa094cd18e43391719ba373605cb664158", "patch": "@@ -192,6 +192,8 @@ proc gdc_init { args } {\n     global GDC_UNDER_TEST\n     global TESTING_IN_BUILD_TREE\n     global TEST_ALWAYS_FLAGS\n+    global gcc_warning_prefix\n+    global gcc_error_prefix\n \n     # We set LC_ALL and LANG to C so that we get the same error messages as expected.\n     setenv LC_ALL C\n@@ -250,6 +252,9 @@ proc gdc_init { args } {\n \n     verbose -log \"ALWAYS_DFLAGS set to $ALWAYS_DFLAGS\"\n \n+    set gcc_warning_prefix \"warning:\"\n+    set gcc_error_prefix \"(fatal )?error:\"\n+\n     verbose \"gdc is initialized\" 3\n }\n "}]}