{"sha": "507de5ee23efdc8a16d6b0b6488e118055c711cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA3ZGU1ZWUyM2VmZGM4YTE2ZDZiMGI2NDg4ZTExODA1NWM3MTFjZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-15T16:52:18Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-17T09:20:24Z"}, "message": "gimplifier: handle POLY_INT_CST-sized TARGET_EXPRs\n\nIf a TARGET_EXPR has poly-int size, the gimplifier would treat it\nlike a VLA and use gimplify_vla_decl.  gimplify_vla_decl in turn\nwould use an alloca and expect all references to be gimplified\nvia the DECL_VALUE_EXPR.  This caused confusion later in\ngimplify_var_or_parm_decl_1 when we (correctly) had direct rather\nthan indirect references.\n\nFor completeness, the patch also fixes similar tests in the RETURN_EXPR\nhandling and OpenMP depend clauses.\n\n2020-01-17  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* gimplify.c (gimplify_return_expr): Use poly_int_tree_p rather\n\tthan testing directly for INTEGER_CST.\n\t(gimplify_target_expr, gimplify_omp_depend): Likewise.\n\ngcc/testsuite/\n\t* g++.target/aarch64/sve/acle/general-c++/gimplify_1.C: New test.", "tree": {"sha": "e7235c4e9347a06ba96dddc8c2eac472a2f51d0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7235c4e9347a06ba96dddc8c2eac472a2f51d0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/507de5ee23efdc8a16d6b0b6488e118055c711cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/507de5ee23efdc8a16d6b0b6488e118055c711cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/507de5ee23efdc8a16d6b0b6488e118055c711cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/507de5ee23efdc8a16d6b0b6488e118055c711cd/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4a5f73449d7352ba8128fecbc9a9570d746abdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4a5f73449d7352ba8128fecbc9a9570d746abdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4a5f73449d7352ba8128fecbc9a9570d746abdb"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "423899d398839ce701b388658a602bca023d475d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/507de5ee23efdc8a16d6b0b6488e118055c711cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/507de5ee23efdc8a16d6b0b6488e118055c711cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=507de5ee23efdc8a16d6b0b6488e118055c711cd", "patch": "@@ -1,3 +1,9 @@\n+2020-01-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gimplify.c (gimplify_return_expr): Use poly_int_tree_p rather\n+\tthan testing directly for INTEGER_CST.\n+\t(gimplify_target_expr, gimplify_omp_depend): Likewise.\n+\n 2020-01-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/93292"}, {"sha": "e50be5706c762a8d08f67a606ee83e90c2de6758", "filename": "gcc/gimplify.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/507de5ee23efdc8a16d6b0b6488e118055c711cd/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/507de5ee23efdc8a16d6b0b6488e118055c711cd/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=507de5ee23efdc8a16d6b0b6488e118055c711cd", "patch": "@@ -1632,7 +1632,7 @@ gimplify_return_expr (tree stmt, gimple_seq *pre_p)\n     result = NULL_TREE;\n   else if (aggregate_value_p (result_decl, TREE_TYPE (current_function_decl)))\n     {\n-      if (TREE_CODE (DECL_SIZE (result_decl)) != INTEGER_CST)\n+      if (!poly_int_tree_p (DECL_SIZE (result_decl)))\n \t{\n \t  if (!TYPE_SIZES_GIMPLIFIED (TREE_TYPE (result_decl)))\n \t    gimplify_type_sizes (TREE_TYPE (result_decl), pre_p);\n@@ -6714,7 +6714,7 @@ gimplify_target_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \n       /* TARGET_EXPR temps aren't part of the enclosing block, so add it\n \t to the temps list.  Handle also variable length TARGET_EXPRs.  */\n-      if (TREE_CODE (DECL_SIZE (temp)) != INTEGER_CST)\n+      if (!poly_int_tree_p (DECL_SIZE (temp)))\n \t{\n \t  if (!TYPE_SIZES_GIMPLIFIED (TREE_TYPE (temp)))\n \t    gimplify_type_sizes (TREE_TYPE (temp), pre_p);\n@@ -7921,7 +7921,7 @@ gimplify_omp_depend (tree *list_p, gimple_seq *pre_p)\n   tree type = build_array_type (ptr_type_node, build_index_type (totalpx));\n   tree array = create_tmp_var_raw (type);\n   TREE_ADDRESSABLE (array) = 1;\n-  if (TREE_CODE (totalpx) != INTEGER_CST)\n+  if (!poly_int_tree_p (totalpx))\n     {\n       if (!TYPE_SIZES_GIMPLIFIED (TREE_TYPE (array)))\n \tgimplify_type_sizes (TREE_TYPE (array), pre_p);"}, {"sha": "a4290eead8e05081d4a8c8cb07e643e8bd48aa91", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/507de5ee23efdc8a16d6b0b6488e118055c711cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/507de5ee23efdc8a16d6b0b6488e118055c711cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=507de5ee23efdc8a16d6b0b6488e118055c711cd", "patch": "@@ -1,3 +1,7 @@\n+2020-01-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* g++.target/aarch64/sve/acle/general-c++/gimplify_1.C: New test.\n+\n 2020-01-17  Mark Eggleston  <mark.eggleston@codethink.com>\n \tTobias Burnus  <burnus@gcc.gnu.org>\n "}, {"sha": "06ee7eae029c8c4f240fd2c026ea5d3e6b2efe58", "filename": "gcc/testsuite/g++.target/aarch64/sve/acle/general-c++/gimplify_1.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/507de5ee23efdc8a16d6b0b6488e118055c711cd/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fgimplify_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/507de5ee23efdc8a16d6b0b6488e118055c711cd/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fgimplify_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fgimplify_1.C?ref=507de5ee23efdc8a16d6b0b6488e118055c711cd", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-additional-options \"-flax-vector-conversions\" } */\n+\n+inline void foo (const __SVInt32_t &foo) {}\n+void bar (__SVUint32_t x) { foo(x); }"}]}