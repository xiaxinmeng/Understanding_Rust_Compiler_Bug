{"sha": "c844c4028f5e8e1370f889db18042caeb83518fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg0NGM0MDI4ZjVlOGUxMzcwZjg4OWRiMTgwNDJjYWViODM1MThmYw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2018-12-07T17:02:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-12-07T17:02:11Z"}, "message": "gimple-ssa-evrp-analyze.h (class evrp_range_analyzer): Add m_update_global_ranges member.\n\n\t* gimple-ssa-evrp-analyze.h (class evrp_range_analyzer): Add\n\tm_update_global_ranges member.  Add corresponding argument to ctor.\n\t* gimple-ssa-evrp-analyze.c\n\t(evrp_range_analyzer::evrp_range_analyzer): Add new argument and\n\tinitialize m_update_global_ranges.\n\t(evrp_range_analyzer::set_ssa_range_info): Assert that we are\n\tupdating global ranges.\n\t(evrp_range_analyzer::record_ranges_from_incoming_edge): Only\n\tupdate global ranges if explicitly requested.\n\t(evrp_range_analyzer::record_ranges_from_phis): Similarly.\n\t(evrp_range_analyzer::record_ranges_from_stmt): Similarly.\n\t* gimple-ssa-evrp.c (evrp_dom_walker): Pass new argument to\n\tevrp_range_analyzer ctor.\n\t* gimple-ssa-sprintf.c (sprintf_dom_walker): Similarly.\n\t* tree-ssa-dom.c (dom_opt_dom_walker): Similarly.\n\n\t* gcc.c-torture/builtins/strnlen.x: New file to filter -Og from\n\toptions to test.\n\nFrom-SVN: r266897", "tree": {"sha": "8570edae2b3779923ff6623d759669b0ebda0147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8570edae2b3779923ff6623d759669b0ebda0147"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c844c4028f5e8e1370f889db18042caeb83518fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c844c4028f5e8e1370f889db18042caeb83518fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c844c4028f5e8e1370f889db18042caeb83518fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c844c4028f5e8e1370f889db18042caeb83518fc/comments", "author": null, "committer": null, "parents": [{"sha": "2d56d6ba9c2ebceb8865a65c0fd2657773abf76b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d56d6ba9c2ebceb8865a65c0fd2657773abf76b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d56d6ba9c2ebceb8865a65c0fd2657773abf76b"}], "stats": {"total": 62, "additions": 57, "deletions": 5}, "files": [{"sha": "9ee432d2260489705dfa0a67f766111d5b75637b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c844c4028f5e8e1370f889db18042caeb83518fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c844c4028f5e8e1370f889db18042caeb83518fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c844c4028f5e8e1370f889db18042caeb83518fc", "patch": "@@ -1,3 +1,22 @@\n+2018-12-07  Jeff Law  <law@redhat.com>\n+\n+\tPR middle-end/87813\n+\t* gimple-ssa-evrp-analyze.h (class evrp_range_analyzer): Add\n+\tm_update_global_ranges member.  Add corresponding argument to ctor.\n+\t* gimple-ssa-evrp-analyze.c\n+\t(evrp_range_analyzer::evrp_range_analyzer): Add new argument and\n+\tinitialize m_update_global_ranges.\n+\t(evrp_range_analyzer::set_ssa_range_info): Assert that we are\n+\tupdating global ranges.\n+\t(evrp_range_analyzer::record_ranges_from_incoming_edge): Only\n+\tupdate global ranges if explicitly requested.\n+\t(evrp_range_analyzer::record_ranges_from_phis): Similarly.\n+\t(evrp_range_analyzer::record_ranges_from_stmt): Similarly.\n+\t* gimple-ssa-evrp.c (evrp_dom_walker): Pass new argument to\n+\tevrp_range_analyzer ctor.\n+\t* gimple-ssa-sprintf.c (sprintf_dom_walker): Similarly.\n+\t* tree-ssa-dom.c (dom_opt_dom_walker): Similarly.\n+\n 2018-12-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64-opts.h (aarch64_sve_vector_bits_enum):"}, {"sha": "3efaca1a994f3b0ab95df565810e1ff3dabe8f00", "filename": "gcc/gimple-ssa-evrp-analyze.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c844c4028f5e8e1370f889db18042caeb83518fc/gcc%2Fgimple-ssa-evrp-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c844c4028f5e8e1370f889db18042caeb83518fc/gcc%2Fgimple-ssa-evrp-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp-analyze.c?ref=c844c4028f5e8e1370f889db18042caeb83518fc", "patch": "@@ -42,7 +42,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"vr-values.h\"\n #include \"gimple-ssa-evrp-analyze.h\"\n \n-evrp_range_analyzer::evrp_range_analyzer () : stack (10)\n+evrp_range_analyzer::evrp_range_analyzer (bool update_global_ranges)\n+  : stack (10), m_update_global_ranges (update_global_ranges)\n {\n   edge e;\n   edge_iterator ei;\n@@ -107,6 +108,8 @@ evrp_range_analyzer::try_find_new_range (tree name,\n void\n evrp_range_analyzer::set_ssa_range_info (tree lhs, value_range *vr)\n {\n+  gcc_assert (m_update_global_ranges);\n+\n   /* Set the SSA with the value range.  */\n   if (INTEGRAL_TYPE_P (TREE_TYPE (lhs)))\n     {\n@@ -213,6 +216,7 @@ evrp_range_analyzer::record_ranges_from_incoming_edge (basic_block bb)\n \t\tcontinue;\n \t      push_value_range (vrs[i].first, vrs[i].second);\n \t      if (is_fallthru\n+\t\t  && m_update_global_ranges\n \t\t  && all_uses_feed_or_dominated_by_stmt (vrs[i].first, stmt))\n \t\t{\n \t\t  set_ssa_range_info (vrs[i].first, vrs[i].second);\n@@ -267,7 +271,8 @@ evrp_range_analyzer::record_ranges_from_phis (basic_block bb)\n       vr_values->update_value_range (lhs, &vr_result);\n \n       /* Set the SSA with the value range.  */\n-      set_ssa_range_info (lhs, &vr_result);\n+      if (m_update_global_ranges)\n+\tset_ssa_range_info (lhs, &vr_result);\n     }\n }\n \n@@ -309,7 +314,8 @@ evrp_range_analyzer::record_ranges_from_stmt (gimple *stmt, bool temporary)\n \t      /* Case one.  We can just update the underlying range\n \t\t information as well as the global information.  */\n \t      vr_values->update_value_range (output, &vr);\n-\t      set_ssa_range_info (output, &vr);\n+\t      if (m_update_global_ranges)\n+\t\tset_ssa_range_info (output, &vr);\n \t    }\n \t  else\n \t    {"}, {"sha": "01942f063629dd88906811a443418c5c8746ac16", "filename": "gcc/gimple-ssa-evrp-analyze.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c844c4028f5e8e1370f889db18042caeb83518fc/gcc%2Fgimple-ssa-evrp-analyze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c844c4028f5e8e1370f889db18042caeb83518fc/gcc%2Fgimple-ssa-evrp-analyze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp-analyze.h?ref=c844c4028f5e8e1370f889db18042caeb83518fc", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n class evrp_range_analyzer\n {\n  public:\n-  evrp_range_analyzer (void);\n+  evrp_range_analyzer (bool update_global_ranges);\n   ~evrp_range_analyzer (void)\n   {\n     delete vr_values;\n@@ -70,6 +70,9 @@ class evrp_range_analyzer\n \n   /* STACK holds the old VR.  */\n   auto_vec<std::pair <tree, value_range*> > stack;\n+\n+  /* True if we are updating global ranges, false otherwise.  */\n+  bool m_update_global_ranges;\n };\n \n #endif /* GCC_GIMPLE_SSA_EVRP_ANALYZE_H */"}, {"sha": "9900980aecfd90b5c2dc42676dc5597a31f4c778", "filename": "gcc/gimple-ssa-evrp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c844c4028f5e8e1370f889db18042caeb83518fc/gcc%2Fgimple-ssa-evrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c844c4028f5e8e1370f889db18042caeb83518fc/gcc%2Fgimple-ssa-evrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp.c?ref=c844c4028f5e8e1370f889db18042caeb83518fc", "patch": "@@ -70,6 +70,7 @@ class evrp_dom_walker : public dom_walker\n public:\n   evrp_dom_walker ()\n     : dom_walker (CDI_DOMINATORS),\n+      evrp_range_analyzer (true),\n       evrp_folder (evrp_range_analyzer.get_vr_values ())\n     {\n       need_eh_cleanup = BITMAP_ALLOC (NULL);"}, {"sha": "00485d9a0735a3ca6aae48a6010dddcc353d558c", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c844c4028f5e8e1370f889db18042caeb83518fc/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c844c4028f5e8e1370f889db18042caeb83518fc/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=c844c4028f5e8e1370f889db18042caeb83518fc", "patch": "@@ -121,7 +121,9 @@ struct format_result;\n class sprintf_dom_walker : public dom_walker\n {\n  public:\n-  sprintf_dom_walker () : dom_walker (CDI_DOMINATORS) {}\n+  sprintf_dom_walker ()\n+    : dom_walker (CDI_DOMINATORS),\n+      evrp_range_analyzer (false) {}\n   ~sprintf_dom_walker () {}\n \n   edge before_dom_children (basic_block) FINAL OVERRIDE;"}, {"sha": "8f63e819e8bf041e4a80f5f79487b9f5bd0d9285", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c844c4028f5e8e1370f889db18042caeb83518fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c844c4028f5e8e1370f889db18042caeb83518fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c844c4028f5e8e1370f889db18042caeb83518fc", "patch": "@@ -1,3 +1,9 @@\n+2018-12-07  Jeff Law  <law@redhat.com>\n+\n+\tPR middle-end/87813\n+\t* gcc.c-torture/builtins/strnlen.x: New file to filter -Og from\n+\toptions to test.\n+\n 2018-12-07  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/88349"}, {"sha": "9ee8a52baab86a623ffb56c0324049115b90f1af", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strnlen.x", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c844c4028f5e8e1370f889db18042caeb83518fc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrnlen.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c844c4028f5e8e1370f889db18042caeb83518fc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrnlen.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrnlen.x?ref=c844c4028f5e8e1370f889db18042caeb83518fc", "patch": "@@ -0,0 +1,14 @@\n+# At -Og no pass records the global range information\n+# necessary to optimize the strnlen calls down to\n+# a constant.  The framework assumes that the test\n+# will never call strnlen when the optimizer is\n+# enabled.  So we filter out the -Og run here.\n+\n+set torture_eval_before_compile {\n+  if {[string match {*-Og*} \"$option\"]} {\n+    continue\n+  }\n+}\n+\n+return 0\n+"}, {"sha": "e3e009a0e63a89e6495b9f70ef05d663c316da9e", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c844c4028f5e8e1370f889db18042caeb83518fc/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c844c4028f5e8e1370f889db18042caeb83518fc/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=c844c4028f5e8e1370f889db18042caeb83518fc", "patch": "@@ -578,6 +578,7 @@ class dom_opt_dom_walker : public dom_walker\n     : dom_walker (direction, REACHABLE_BLOCKS),\n       m_const_and_copies (const_and_copies),\n       m_avail_exprs_stack (avail_exprs_stack),\n+      evrp_range_analyzer (true),\n       m_dummy_cond (dummy_cond) { }\n \n   virtual edge before_dom_children (basic_block);"}]}