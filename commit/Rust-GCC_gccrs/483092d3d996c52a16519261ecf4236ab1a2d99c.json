{"sha": "483092d3d996c52a16519261ecf4236ab1a2d99c", "node_id": "C_kwDOANBUbNoAKDQ4MzA5MmQzZDk5NmM1MmExNjUxOTI2MWVjZjQyMzZhYjFhMmQ5OWM", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-19T00:16:34Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-19T00:16:34Z"}, "message": "Daily bump.", "tree": {"sha": "86b22a69b9c88f22bcbec52d38f8e941f4146b83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86b22a69b9c88f22bcbec52d38f8e941f4146b83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/483092d3d996c52a16519261ecf4236ab1a2d99c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/483092d3d996c52a16519261ecf4236ab1a2d99c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/483092d3d996c52a16519261ecf4236ab1a2d99c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/483092d3d996c52a16519261ecf4236ab1a2d99c/comments", "author": null, "committer": null, "parents": [{"sha": "d6ec661e3931773e2f571ed4f6dd8b0402d8687d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ec661e3931773e2f571ed4f6dd8b0402d8687d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6ec661e3931773e2f571ed4f6dd8b0402d8687d"}], "stats": {"total": 403, "additions": 402, "deletions": 1}, "files": [{"sha": "6059931127e75d84fdc7fce39ffe6d51b16ca593", "filename": "gcc/ChangeLog", "status": "modified", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483092d3d996c52a16519261ecf4236ab1a2d99c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483092d3d996c52a16519261ecf4236ab1a2d99c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=483092d3d996c52a16519261ecf4236ab1a2d99c", "patch": "@@ -1,3 +1,180 @@\n+2021-11-18  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/predicates.md (current_file_function_operand):\n+\tAdd flag_semantic_interposition to call of decl_replaceable_p.\n+\n+2021-11-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* ipa-modref.c (analyze_function): Do not execute the code\n+\tonly if dump_file != NULL.\n+\n+2021-11-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* ipa-modref.c (analyze_function): Use fnode instead of repeated\n+\tcgraph_node::get (current_function_decl).\n+\n+2021-11-18  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* cgraph.c (cgraph_node::get_availability): Update call of\n+\tdecl_replaceable_p.\n+\t(cgraph_node::verify_node): Verify that semantic_interposition flag\n+\tis set correclty.\n+\t* cgraph.h: (symtab_node): Add semantic_interposition flag.\n+\t* cgraphclones.c (set_new_clone_decl_and_node_flags): Clear\n+\tsemantic_interposition flag.\n+\t* cgraphunit.c (cgraph_node::finalize_function): Set\n+\tsemantic_interposition flag.\n+\t(cgraph_node::add_new_function): Likewise.\n+\t(varpool_node::finalize_decl): Likewise.\n+\t(cgraph_node::create_wrapper): Likewise.\n+\t* common.opt (fsemantic-interposition): Turn to optimization node.\n+\t* lto-cgraph.c (lto_output_node): Stream semantic_interposition.\n+\t(lto_output_varpool_node): Likewise.\n+\t(input_overwrite_node): Likewise.\n+\t(input_varpool_node): Likewise.\n+\t* symtab.c (symtab_node::dump_base): Dump new flag.\n+\t* varasm.c (decl_replaceable_p): Add semantic_interposition_p\n+\tparameter.\n+\t* varasm.h (decl_replaceable_p): Update declaration.\n+\t* varpool.c (varpool_node::ctor_useable_for_folding_p):\n+\tUse semantic_interposition flag.\n+\t(varpool_node::get_availability): Likewise.\n+\t(varpool_node::create_alias): Copy semantic_interposition flag.\n+\n+2021-11-18  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/103266\n+\t* ipa-modref.c (modref_eaf_analysis::merge_call_lhs_flags): Unused\n+\tparameter may still be returned.\n+\t(modref_eaf_analysis::analyze_ssa_name): Call merge_call_lhs_flags\n+\teven for unused function args.\n+\n+2021-11-18  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/103311\n+\t* tree-vect-slp-patterns.c (complex_mul_pattern::matches,\n+\tcomplex_fms_pattern::matches): Check for multiplications.\n+\n+2021-11-18  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/102952\n+\t* config/i386/i386.c (ix86_output_jmp_thunk_or_indirect): Emit\n+\tCS prefix for -mindirect-branch-cs-prefix.\n+\t(ix86_output_indirect_branch_via_reg): Likewise.\n+\t* config/i386/i386.opt: Add -mindirect-branch-cs-prefix.\n+\t* doc/invoke.texi: Document -mindirect-branch-cs-prefix.\n+\n+2021-11-18  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/driver-rs6000.c (detect_processor_aix): Add\n+\tpower10.\n+\n+2021-11-18  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/103253\n+\t* tree-ssa-math-opts.c (convert_mult_to_fma): Check for LHS.\n+\n+2021-11-18  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* doc/extend.texi: Document __builtin_assoc_barrier.\n+\n+2021-11-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* cfgexpand.c (pass_expand::execute): Use option directly.\n+\t* function.c (allocate_struct_function): Likewise.\n+\t* gimple-low.c (lower_function_body): Likewise.\n+\t(lower_stmt): Likewise.\n+\t* gimple-ssa-backprop.c (backprop::prepare_change): Likewise.\n+\t* ipa-param-manipulation.c (ipa_param_adjustments::modify_call): Likewise.\n+\t* ipa-split.c (split_function): Likewise.\n+\t* lto-streamer-in.c (input_function): Likewise.\n+\t* sese.c (sese_insert_phis_for_liveouts): Likewise.\n+\t* ssa-iterators.h (num_imm_uses): Likewise.\n+\t* tree-cfg.c (make_blocks): Likewise.\n+\t(gimple_merge_blocks): Likewise.\n+\t* tree-inline.c (tree_function_versioning): Likewise.\n+\t* tree-loop-distribution.c (generate_loops_for_partition): Likewise.\n+\t* tree-sra.c (analyze_access_subtree): Likewise.\n+\t* tree-ssa-dce.c (remove_dead_stmt): Likewise.\n+\t* tree-ssa-loop-ivopts.c (remove_unused_ivs): Likewise.\n+\t* tree-ssa-phiopt.c (spaceship_replacement): Likewise.\n+\t* tree-ssa-reassoc.c (reassoc_remove_stmt): Likewise.\n+\t* tree-ssa-tail-merge.c (tail_merge_optimize): Likewise.\n+\t* tree-ssa-threadedge.c (propagate_threaded_block_debug_into): Likewise.\n+\t* tree-ssa.c (gimple_replace_ssa_lhs): Likewise.\n+\t(target_for_debug_bind): Likewise.\n+\t(insert_debug_temp_for_var_def): Likewise.\n+\t(insert_debug_temps_for_defs): Likewise.\n+\t(reset_debug_uses): Likewise.\n+\t* tree-ssanames.c (release_ssa_name_fn): Likewise.\n+\t* tree-vect-loop-manip.c (adjust_vec_debug_stmts): Likewise.\n+\t(adjust_debug_stmts): Likewise.\n+\t(adjust_phi_and_debug_stmts): Likewise.\n+\t(vect_do_peeling): Likewise.\n+\t* tree-vect-loop.c (vect_transform_loop_stmt): Likewise.\n+\t(vect_transform_loop): Likewise.\n+\t* tree.h (MAY_HAVE_DEBUG_MARKER_STMTS): Remove\n+\t(MAY_HAVE_DEBUG_BIND_STMTS): Remove.\n+\t(MAY_HAVE_DEBUG_STMTS): Use options directly.\n+\n+2021-11-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103277\n+\t* tree-ssa-dse.c (need_ab_cleanup): New.\n+\t(dse_optimize_redundant_stores): Adjust.\n+\t(delete_dead_or_redundant_assignment): Get extra\n+\tneed_ab_cleanup argument and set when abnormal cleanup is\n+\tneeded.\n+\t(dse_optimize_call): Adjust.\n+\t(dse_optimize_stmt): Likewise.\n+\t(pass_dse::execute): Allocate and deallocate need_ab_cleanup.\n+\tPerform abnormal cleanup.\n+\t* tree-ssa-dse.h (delete_dead_or_redundant_assignment): Adjust.\n+\n+2021-11-18  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* config/i386/i386-expand.c (ix86_expand_atomic_fetch_op_loop):\n+\tAdjust generated cfg to avoid infinite loop.\n+\n+2021-11-18  konglin1  <lingling.kong@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_mm512_mul_pch): Add alias for _mm512_fmul_pch.\n+\t(_mm512_mask_mul_pch): Likewise.\n+\t(_mm512_maskz_mul_pch): Likewise.\n+\t(_mm512_mul_round_pch): Likewise.\n+\t(_mm512_mask_mul_round_pch): Likewise.\n+\t(_mm512_maskz_mul_round_pch): Likewise.\n+\t(_mm512_cmul_pch): Likewise.\n+\t(_mm512_mask_cmul_pch): Likewise.\n+\t(_mm512_maskz_cmul_pch): Likewise.\n+\t(_mm512_cmul_round_pch): Likewise.\n+\t(_mm512_mask_cmul_round_pch): Likewise.\n+\t(_mm512_maskz_cmul_round_pch): Likewise.\n+\t(_mm_mul_sch): Likewise.\n+\t(_mm_mask_mul_sch): Likewise.\n+\t(_mm_maskz_mul_sch): Likewise.\n+\t(_mm_mul_round_sch): Likewise.\n+\t(_mm_mask_mul_round_sch): Likewise.\n+\t(_mm_maskz_mul_round_sch): Likewise.\n+\t(_mm_cmul_sch): Likewise.\n+\t(_mm_mask_cmul_sch): Likewise.\n+\t(_mm_maskz_cmul_sch): Likewise.\n+\t(_mm_cmul_round_sch): Likewise.\n+\t(_mm_mask_cmul_round_sch): Likewise.\n+\t(_mm_maskz_cmul_round_sch): Likewise.\n+\t* config/i386/avx512fp16vlintrin.h (_mm_mul_pch): Likewise.\n+\t(_mm_mask_mul_pch): Likewise.\n+\t(_mm_maskz_mul_pch): Likewise.\n+\t(_mm256_mul_pch): Likewise.\n+\t(_mm256_mask_mul_pch): Likewise.\n+\t(_mm256_maskz_mul_pch): Likewise.\n+\t(_mm_cmul_pch): Likewise.\n+\t(_mm_mask_cmul_pch): Likewise.\n+\t(_mm_maskz_cmul_pch): Likewise.\n+\t(_mm256_cmul_pch): Likewise.\n+\t(_mm256_mask_cmul_pch): Likewise.\n+\t(_mm256_maskz_cmul_pch): Likewise.\n+\n 2021-11-17  Andrew Pinski  <apinski@marvell.com>\n \n \tPR tree-optimization/103228"}, {"sha": "f09aab359f472f02690defc6c25d2e3f32157203", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483092d3d996c52a16519261ecf4236ab1a2d99c/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483092d3d996c52a16519261ecf4236ab1a2d99c/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=483092d3d996c52a16519261ecf4236ab1a2d99c", "patch": "@@ -1 +1 @@\n-20211118\n+20211119"}, {"sha": "1c54782f6300a7dd77cffe9a12c2423f3f2b86c5", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483092d3d996c52a16519261ecf4236ab1a2d99c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483092d3d996c52a16519261ecf4236ab1a2d99c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=483092d3d996c52a16519261ecf4236ab1a2d99c", "patch": "@@ -1,3 +1,12 @@\n+2021-11-18  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* c-common.c (c_common_reswords): Add __builtin_assoc_barrier.\n+\t* c-common.h (enum rid): Add RID_BUILTIN_ASSOC_BARRIER.\n+\n+2021-11-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-gimplify.c (genericize_c_loop): Use option directly.\n+\n 2021-11-17  Martin Uecker  <uecker@gcc.gnu.org>\n \n \tPR c/91038"}, {"sha": "2728c59918e92252d06d509f0968392bb202762a", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483092d3d996c52a16519261ecf4236ab1a2d99c/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483092d3d996c52a16519261ecf4236ab1a2d99c/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=483092d3d996c52a16519261ecf4236ab1a2d99c", "patch": "@@ -1,3 +1,12 @@\n+2021-11-18  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* c-decl.c (names_builtin_p): Handle RID_BUILTIN_ASSOC_BARRIER.\n+\t* c-parser.c (c_parser_postfix_expression): Likewise.\n+\n+2021-11-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-parser.c (add_debug_begin_stmt): Use option directly.\n+\n 2021-11-17  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/101702"}, {"sha": "f07ae26403c13fa9a828c9196f0c4855dd81c6b3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483092d3d996c52a16519261ecf4236ab1a2d99c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483092d3d996c52a16519261ecf4236ab1a2d99c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=483092d3d996c52a16519261ecf4236ab1a2d99c", "patch": "@@ -1,3 +1,56 @@\n+2021-11-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/103049\n+\t* semantics.c (finish_compound_literal): Accept C++23 auto{x}.\n+\t* typeck2.c (build_functional_cast_1): Accept C++23 auto(x).\n+\n+2021-11-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* pt.c (tsubst_copy_and_build) <case CALL_EXPR>: Disable the\n+\t-fpermissive fallback for C++20 template-id ADL, but keep the\n+\tdiagnostic.\n+\n+2021-11-18  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* decl.c (finish_function): Update use of decl_replaceable_p.\n+\n+2021-11-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99911\n+\t* pt.c (tsubst_copy_and_build) <case CALL_EXPR>: Don't diagnose\n+\tname lookup failure if the arguments to an unresolved template\n+\tname are still dependent.\n+\n+2021-11-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/102670\n+\t* pt.c (tsubst_copy_and_build) <case CALL_EXPR>: When looking\n+\tfor an identifier callee in the koenig_p case, also look through\n+\tTEMPLATE_ID_EXPR.  Use tsubst_copy to substitute through the\n+\ttemplate arguments of the template-id.\n+\n+2021-11-18  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* constexpr.c (cxx_eval_constant_expression): Handle PAREN_EXPR\n+\tvia cxx_eval_constant_expression.\n+\t* cp-objcp-common.c (names_builtin_p): Handle\n+\tRID_BUILTIN_ASSOC_BARRIER.\n+\t* cp-tree.h: Adjust TREE_LANG_FLAG documentation to include\n+\tPAREN_EXPR in REF_PARENTHESIZED_P.\n+\t(REF_PARENTHESIZED_P): Add PAREN_EXPR.\n+\t* parser.c (cp_parser_postfix_expression): Handle\n+\tRID_BUILTIN_ASSOC_BARRIER.\n+\t* pt.c (tsubst_copy_and_build): If the PAREN_EXPR is not a\n+\tparenthesized initializer, build a new PAREN_EXPR.\n+\t* semantics.c (force_paren_expr): Simplify conditionals. Set\n+\tREF_PARENTHESIZED_P on PAREN_EXPR.\n+\t(maybe_undo_parenthesized_ref): Test PAREN_EXPR for\n+\tREF_PARENTHESIZED_P.\n+\n+2021-11-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* parser.c (add_debug_begin_stmt): Use option directly.\n+\n 2021-11-16  Jason Merrill  <jason@redhat.com>\n \n \t* ptree.c (cxx_print_xnode): Handle PTRMEM_CST."}, {"sha": "d04102a2b98146b8427ac532011195d1ded43fc0", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483092d3d996c52a16519261ecf4236ab1a2d99c/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483092d3d996c52a16519261ecf4236ab1a2d99c/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=483092d3d996c52a16519261ecf4236ab1a2d99c", "patch": "@@ -1,3 +1,8 @@\n+2021-11-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* decl.cc (d_finish_decl): Use HOST_WIDE_INT for type size\n+\ttemporaries.\n+\n 2021-10-22  Eric Gallager  <egallager@gcc.gnu.org>\n \n \tPR other/102663"}, {"sha": "de5d4de6fd90a68584050ecd3220c3ee42791a09", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483092d3d996c52a16519261ecf4236ab1a2d99c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483092d3d996c52a16519261ecf4236ab1a2d99c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=483092d3d996c52a16519261ecf4236ab1a2d99c", "patch": "@@ -1,3 +1,10 @@\n+2021-11-18  Harald Anlauf  <anlauf@gmx.de>\n+\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/101329\n+\t* check.c (is_c_interoperable): Reject NULL() as it is not\n+\tinteroperable.\n+\n 2021-11-16  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/103286"}, {"sha": "580a631bc1ce1a5bfa284eb3eafa2682b7fd51f4", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483092d3d996c52a16519261ecf4236ab1a2d99c/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483092d3d996c52a16519261ecf4236ab1a2d99c/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=483092d3d996c52a16519261ecf4236ab1a2d99c", "patch": "@@ -1,3 +1,7 @@\n+2021-11-18  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto-partition.c (promote_symbol): Clear semantic_interposition flag.\n+\n 2021-11-06  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/103070"}, {"sha": "18340f6db9c277bb739ef625f6f54df3468e41b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483092d3d996c52a16519261ecf4236ab1a2d99c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483092d3d996c52a16519261ecf4236ab1a2d99c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=483092d3d996c52a16519261ecf4236ab1a2d99c", "patch": "@@ -1,3 +1,97 @@\n+2021-11-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/103049\n+\t* g++.dg/cpp0x/auto25.C: Adjust dg-error.\n+\t* g++.dg/cpp0x/auto9.C: Likewise.\n+\t* g++.dg/cpp2a/concepts-pr84979-2.C: Likewise.\n+\t* g++.dg/cpp2a/concepts-pr84979-3.C: Likewise.\n+\t* g++.dg/cpp23/auto-fncast1.C: New test.\n+\t* g++.dg/cpp23/auto-fncast2.C: New test.\n+\t* g++.dg/cpp23/auto-fncast3.C: New test.\n+\t* g++.dg/cpp23/auto-fncast4.C: New test.\n+\t* g++.dg/cpp23/auto-fncast5.C: New test.\n+\t* g++.dg/cpp23/auto-fncast6.C: New test.\n+\n+2021-11-18  Harald Anlauf  <anlauf@gmx.de>\n+\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/101329\n+\t* gfortran.dg/pr101329.f90: New test.\n+\n+2021-11-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/cpp2a/fn-template25.C: New test.\n+\n+2021-11-18  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/lto/semantic-interposition-1_0.c: New test.\n+\t* gcc.dg/lto/semantic-interposition-1_1.c: New test.\n+\n+2021-11-18  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/103266\n+\t* g++.dg/torture/pr103266.C: New test.\n+\n+2021-11-18  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/103311\n+\t* gcc.target/aarch64/pr103311.c: New test.\n+\n+2021-11-18  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/102952\n+\t* gcc.target/i386/indirect-thunk-cs-prefix-1.c: New test.\n+\t* gcc.target/i386/indirect-thunk-cs-prefix-2.c: Likewise.\n+\n+2021-11-18  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* gcc.target/mips/octeon-bbit-1.c (f3): Add noipa attribute.\n+\n+2021-11-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99911\n+\t* g++.dg/cpp2a/fn-template24.C: New test.\n+\n+2021-11-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/102670\n+\t* g++.dg/cpp2a/concepts-recursive-sat1.C: Adjust to use ADL\n+\tproper.\n+\t* g++.dg/cpp2a/fn-template23.C: New test.\n+\n+2021-11-18  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/103253\n+\t* gcc.dg/vect/pr103253.c: New test.\n+\n+2021-11-18  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* c-c++-common/builtin-assoc-barrier-1.c: New test.\n+\n+2021-11-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/103278\n+\t* gcc.dg/tree-ssa/if-to-switch-3.c: Supply\n+\t--param case-values-threshold=4.\n+\n+2021-11-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103277\n+\t* gcc.dg/pr103277.c: New testcase.\n+\n+2021-11-18  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/pr103069-2.c: Adjust.\n+\n+2021-11-18  konglin1  <lingling.kong@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-vfcmulcph-1a.c: Add new test for alias.\n+\t* gcc.target/i386/avx512fp16-vfcmulcsh-1a.c: Likewise.\n+\t* gcc.target/i386/avx512fp16-vfmulcph-1a.c: Likewise.\n+\t* gcc.target/i386/avx512fp16-vfmulcsh-1a.c: Likewise.\n+\t* gcc.target/i386/avx512fp16vl-vfcmulcph-1a.c: Likewise.\n+\t* gcc.target/i386/avx512fp16vl-vfmulcph-1a.c: Likewise.\n+\n 2021-11-17  Andrew Pinski  <apinski@marvell.com>\n \n \tPR tree-optimization/103228"}, {"sha": "b5bacda4176c07957c01fca7ff83daebe35f6057", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483092d3d996c52a16519261ecf4236ab1a2d99c/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483092d3d996c52a16519261ecf4236ab1a2d99c/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=483092d3d996c52a16519261ecf4236ab1a2d99c", "patch": "@@ -1,3 +1,27 @@\n+2021-11-18  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* alloc.c (gomp_aligned_alloc): Fix typo.\n+\n+2021-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/102838\n+\t* libgomp.h (GOMP_USE_ALIGNED_WORK_SHARES): Define if\n+\tGOMP_HAVE_EFFICIENT_ALIGNED_ALLOC is defined and __AMDGCN__ is not.\n+\t(struct gomp_work_share): Use GOMP_USE_ALIGNED_WORK_SHARES instead of\n+\tGOMP_HAVE_EFFICIENT_ALIGNED_ALLOC.\n+\t* work.c (alloc_work_share, gomp_work_share_start): Likewise.\n+\t* team.c (gomp_new_team): If GOMP_USE_ALIGNED_WORK_SHARES, use\n+\tgomp_aligned_alloc instead of team_malloc.\n+\n+2021-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/102838\n+\t* alloc.c (gomp_aligned_alloc): Prefer _aligned_alloc over\n+\tmemalign over posix_memalign over aligned_alloc over fallback\n+\twith malloc instead of aligned_alloc over _aligned_alloc over\n+\tposix_memalign over memalign over fallback with malloc.  For\n+\taligned_alloc, round up size up to multiple of al.\n+\n 2021-11-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* libgomp.texi (OpenMP 5.1): Mark thread_limit clause to target"}, {"sha": "67bd3fd94fd81b65df7a3bfb0d1bb5a63df7d9ef", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483092d3d996c52a16519261ecf4236ab1a2d99c/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483092d3d996c52a16519261ecf4236ab1a2d99c/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=483092d3d996c52a16519261ecf4236ab1a2d99c", "patch": "@@ -1,3 +1,10 @@\n+2021-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/102675\n+\t* sanitizer_common/Makefile.am: Use -DUSE_SYSTEM_MD5 in AM_CXXFLAGS\n+\tof sanitizer_platform_limits_freebsd.cpp.\n+\t* sanitizer_common/Makefile.in: Regenerated.\n+\n 2021-11-13  H.J. Lu  <hjl.tools@gmail.com>\n \n \t* LOCAL_PATCHES: Update to the corresponding revision."}, {"sha": "e414be086fe8247c7b16decd80524f10f6749f00", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483092d3d996c52a16519261ecf4236ab1a2d99c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483092d3d996c52a16519261ecf4236ab1a2d99c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=483092d3d996c52a16519261ecf4236ab1a2d99c", "patch": "@@ -1,3 +1,15 @@\n+2021-11-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/char_traits.h (__gnu_cxx::char_traits::move):\n+\tDo not compare unrelated pointers during constant evaluation.\n+\t* testsuite/21_strings/char_traits/requirements/constexpr_functions_c++20.cc:\n+\tImprove tests for char_traits::move.\n+\n+2021-11-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* acinclude.m4: Replace AC_CACHE_VAL with AC_CACHE_CHECK.\n+\t* configure: Regenerate.\n+\n 2021-11-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/experimental/internet (address): Use std::_Construct"}]}