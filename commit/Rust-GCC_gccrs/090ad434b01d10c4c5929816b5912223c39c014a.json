{"sha": "090ad434b01d10c4c5929816b5912223c39c014a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkwYWQ0MzRiMDFkMTBjNGM1OTI5ODE2YjU5MTIyMjNjMzljMDE0YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-07-16T09:42:22Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-07-16T09:42:22Z"}, "message": "class.c (finish_struct_bits): Use for loop.\n\n\t* class.c (finish_struct_bits): Use for loop.\n\t(propagate_binfo_offsets): Do primary binfo outside of loop.\n\nFrom-SVN: r84815", "tree": {"sha": "775bbc4ea3eb5ffad74f598d56aa8d3a17f5f121", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/775bbc4ea3eb5ffad74f598d56aa8d3a17f5f121"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/090ad434b01d10c4c5929816b5912223c39c014a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/090ad434b01d10c4c5929816b5912223c39c014a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/090ad434b01d10c4c5929816b5912223c39c014a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/090ad434b01d10c4c5929816b5912223c39c014a/comments", "author": null, "committer": null, "parents": [{"sha": "d811830ea7655b3a2a01f1f5b55c4b0c1083dccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d811830ea7655b3a2a01f1f5b55c4b0c1083dccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d811830ea7655b3a2a01f1f5b55c4b0c1083dccf"}], "stats": {"total": 49, "additions": 20, "deletions": 29}, "files": [{"sha": "f34b38ece3c8d4784edb2eb4559dca189ac97328", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/090ad434b01d10c4c5929816b5912223c39c014a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/090ad434b01d10c4c5929816b5912223c39c014a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=090ad434b01d10c4c5929816b5912223c39c014a", "patch": "@@ -1,5 +1,8 @@\n 2004-07-16  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* class.c (finish_struct_bits): Use for loop.\n+\t(propagate_binfo_offsets): Do primary binfo outside of loop.\n+\n \tPR c++/16583\n \t* dump.c (cp_dump_tree): Don't dump the bases if there's no\n \tbinfo."}, {"sha": "c916d5fba219db563f8a0e7a17f0c5260eb05888", "filename": "gcc/cp/class.c", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/090ad434b01d10c4c5929816b5912223c39c014a/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/090ad434b01d10c4c5929816b5912223c39c014a/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=090ad434b01d10c4c5929816b5912223c39c014a", "patch": "@@ -1414,10 +1414,12 @@ static void\n finish_struct_bits (tree t)\n {\n   int n_baseclasses = BINFO_N_BASE_BINFOS (TYPE_BINFO (t));\n-\n+  tree variants;\n+  \n   /* Fix up variants (if any).  */\n-  tree variants = TYPE_NEXT_VARIANT (t);\n-  while (variants)\n+  for (variants = TYPE_NEXT_VARIANT (t);\n+       variants;\n+       variants = TYPE_NEXT_VARIANT (variants))\n     {\n       /* These fields are in the _TYPE part of the node, not in\n \t the TYPE_LANG_SPECIFIC component, so they are not shared.  */\n@@ -1430,7 +1432,8 @@ finish_struct_bits (tree t)\n       TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (variants) \n \t= TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (t);\n       TYPE_POLYMORPHIC_P (variants) = TYPE_POLYMORPHIC_P (t);\n-      TYPE_USES_VIRTUAL_BASECLASSES (variants) = TYPE_USES_VIRTUAL_BASECLASSES (t);\n+      TYPE_USES_VIRTUAL_BASECLASSES (variants)\n+\t= TYPE_USES_VIRTUAL_BASECLASSES (t);\n       \n       TYPE_BINFO (variants) = TYPE_BINFO (t);\n \n@@ -1440,8 +1443,6 @@ finish_struct_bits (tree t)\n       TYPE_FIELDS (variants) = TYPE_FIELDS (t);\n       TYPE_SIZE (variants) = TYPE_SIZE (t);\n       TYPE_SIZE_UNIT (variants) = TYPE_SIZE_UNIT (t);\n-      \n-      variants = TYPE_NEXT_VARIANT (variants);\n     }\n \n   if (n_baseclasses && TYPE_POLYMORPHIC_P (t))\n@@ -4290,33 +4291,20 @@ propagate_binfo_offsets (tree binfo, tree offset)\n   /* Find the primary base class.  */\n   primary_binfo = get_primary_binfo (binfo);\n \n+  if (primary_binfo && BINFO_PRIMARY_BASE_OF (primary_binfo) == binfo)\n+    propagate_binfo_offsets (primary_binfo, offset);\n+  \n   /* Scan all of the bases, pushing the BINFO_OFFSET adjust\n      downwards.  */\n-  for (i = -1; i < BINFO_N_BASE_BINFOS (binfo); ++i)\n+  for (i = 0; i < BINFO_N_BASE_BINFOS (binfo); ++i)\n     {\n-      tree base_binfo;\n-\n-      /* On the first time through the loop, do the primary base.\n-\t Because the primary base need not be an immediate base, we\n-\t must handle the primary base specially.  */\n-      if (i == -1) \n-\t{\n-\t  if (!primary_binfo) \n-\t    continue;\n-\n-\t  base_binfo = primary_binfo;\n-\t}\n-      else\n-\t{\n-\t  base_binfo = BINFO_BASE_BINFO (binfo, i);\n-\t  /* Don't do the primary base twice.  */\n-\t  if (base_binfo == primary_binfo)\n-\t    continue;\n-\t}\n+      tree base_binfo = BINFO_BASE_BINFO (binfo, i);\n+      \n+      /* Don't do the primary base twice.  */\n+      if (base_binfo == primary_binfo)\n+\tcontinue;\n \n-      /* Skip virtual bases that aren't our canonical primary base.  */\n-      if (BINFO_VIRTUAL_P (base_binfo)\n-\t  && BINFO_PRIMARY_BASE_OF (base_binfo) != binfo)\n+      if (BINFO_VIRTUAL_P (base_binfo))\n \tcontinue;\n \n       propagate_binfo_offsets (base_binfo, offset);"}]}