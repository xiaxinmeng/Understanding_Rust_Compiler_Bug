{"sha": "5c3703c552d12e7e62febf4fe5deb837a1305f78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMzNzAzYzU1MmQxMmU3ZTYyZmViZjRmZTVkZWI4MzdhMTMwNWY3OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-03-22T14:42:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-03-22T14:42:57Z"}, "message": "re PR c++/60702 (thread_local initialization)\n\n\tPR c++/60702\n\t* cp-tree.h (get_tls_wrapper_fn): Remove declaration.\n\t(maybe_get_tls_wrapper_call): Declare.\n\t* decl2.c (get_tls_wrapper_fn): Make static.\n\t(maybe_get_tls_wrapper_call): New function.\n\t* typeck.c (build_class_member_access_expr): Handle accesses to TLS\n\tvariables.\n\t* semantics.c (finish_qualified_id_expr): Likewise.\n\t(finish_id_expression_1): Use maybe_get_tls_wrapper_call.\n\t* pt.c (tsubst_copy_and_build): Likewise.\n\n\t* g++.dg/tls/thread_local11.C: New test.\n\t* g++.dg/tls/thread_local11.h: New test.\n\t* g++.dg/tls/thread_local12a.C: New test.\n\t* g++.dg/tls/thread_local12b.C: New test.\n\t* g++.dg/tls/thread_local12c.C: New test.\n\t* g++.dg/tls/thread_local12d.C: New test.\n\t* g++.dg/tls/thread_local12e.C: New test.\n\t* g++.dg/tls/thread_local12f.C: New test.\n\t* g++.dg/tls/thread_local12g.C: New test.\n\t* g++.dg/tls/thread_local12h.C: New test.\n\t* g++.dg/tls/thread_local12i.C: New test.\n\t* g++.dg/tls/thread_local12j.C: New test.\n\t* g++.dg/tls/thread_local12k.C: New test.\n\t* g++.dg/tls/thread_local12l.C: New test.\n\nFrom-SVN: r269875", "tree": {"sha": "34ce504ac15714e9dbd07318be4a9cfce6c3c7b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34ce504ac15714e9dbd07318be4a9cfce6c3c7b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c3703c552d12e7e62febf4fe5deb837a1305f78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c3703c552d12e7e62febf4fe5deb837a1305f78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c3703c552d12e7e62febf4fe5deb837a1305f78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c3703c552d12e7e62febf4fe5deb837a1305f78/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a15ffa22b5b541a385e509649dc39db59492bcdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15ffa22b5b541a385e509649dc39db59492bcdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a15ffa22b5b541a385e509649dc39db59492bcdb"}], "stats": {"total": 304, "additions": 279, "deletions": 25}, "files": [{"sha": "16f1b8e1aaedf0dfd8aac7fc8d829ae1c0f91bce", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -1,5 +1,16 @@\n 2019-03-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/60702\n+\t* cp-tree.h (get_tls_wrapper_fn): Remove declaration.\n+\t(maybe_get_tls_wrapper_call): Declare.\n+\t* decl2.c (get_tls_wrapper_fn): Make static.\n+\t(maybe_get_tls_wrapper_call): New function.\n+\t* typeck.c (build_class_member_access_expr): Handle accesses to TLS\n+\tvariables.\n+\t* semantics.c (finish_qualified_id_expr): Likewise.\n+\t(finish_id_expression_1): Use maybe_get_tls_wrapper_call.\n+\t* pt.c (tsubst_copy_and_build): Likewise.\n+\n \tPR c++/87481\n \t* constexpr.c (struct constexpr_ctx): Add constexpr_ops_count member.\n \t(cxx_eval_constant_expression): When not skipping, not constant class"}, {"sha": "3fe91ad216089f12fce8e2b5499b4644186c8709", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -6513,7 +6513,7 @@ extern tree cp_build_parm_decl\t\t\t(tree, tree, tree);\n extern tree get_guard\t\t\t\t(tree);\n extern tree get_guard_cond\t\t\t(tree, bool);\n extern tree set_guard\t\t\t\t(tree);\n-extern tree get_tls_wrapper_fn\t\t\t(tree);\n+extern tree maybe_get_tls_wrapper_call\t\t(tree);\n extern void mark_needed\t\t\t\t(tree);\n extern bool decl_needed_p\t\t\t(tree);\n extern void note_vague_linkage_fn\t\t(tree);"}, {"sha": "6f23ee1cd3fe853a13840f3b68ca11f823b4f86e", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -3442,7 +3442,7 @@ get_tls_init_fn (tree var)\n    VAR and then returns a reference to VAR.  The wrapper function is used\n    in place of VAR everywhere VAR is mentioned.  */\n \n-tree\n+static tree\n get_tls_wrapper_fn (tree var)\n {\n   /* Only C++11 TLS vars need this wrapper fn.  */\n@@ -3496,6 +3496,22 @@ get_tls_wrapper_fn (tree var)\n   return fn;\n }\n \n+/* If EXPR is a thread_local variable that should be wrapped by init\n+   wrapper function, return a call to that function, otherwise return\n+   NULL.  */\n+\n+tree\n+maybe_get_tls_wrapper_call (tree expr)\n+{\n+  if (VAR_P (expr)\n+      && !processing_template_decl\n+      && !cp_unevaluated_operand\n+      && CP_DECL_THREAD_LOCAL_P (expr))\n+    if (tree wrap = get_tls_wrapper_fn (expr))\n+      return build_cxx_call (wrap, 0, NULL, tf_warning_or_error);\n+  return NULL;\n+}\n+\n /* At EOF, generate the definition for the TLS wrapper function FN:\n \n    T& var_wrapper() {"}, {"sha": "afb7ece57d1193f036970af3852cfdce5b6946dc", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -19403,17 +19403,10 @@ tsubst_copy_and_build (tree t,\n       {\n \ttree r = tsubst_copy (t, args, complain, in_decl);\n \t/* ??? We're doing a subset of finish_id_expression here.  */\n-\tif (VAR_P (r)\n-\t    && !processing_template_decl\n-\t    && !cp_unevaluated_operand\n-\t    && (TREE_STATIC (r) || DECL_EXTERNAL (r))\n-\t    && CP_DECL_THREAD_LOCAL_P (r))\n-\t  {\n-\t    if (tree wrap = get_tls_wrapper_fn (r))\n-\t      /* Replace an evaluated use of the thread_local variable with\n-\t\t a call to its wrapper.  */\n-\t      r = build_cxx_call (wrap, 0, NULL, tf_warning_or_error);\n-\t  }\n+\tif (tree wrap = maybe_get_tls_wrapper_call (r))\n+\t  /* Replace an evaluated use of the thread_local variable with\n+\t     a call to its wrapper.  */\n+\t  r = wrap;\n \telse if (outer_automatic_var_p (r))\n \t  r = process_outer_var_ref (r, complain);\n "}, {"sha": "15b766d644d5ea80e42da5303547922742a71a9f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -2143,6 +2143,8 @@ finish_qualified_id_expr (tree qualifying_class,\n \texpr = build_qualified_name (TREE_TYPE (expr),\n \t\t\t\t     qualifying_class, expr,\n \t\t\t\t     template_p);\n+      else if (tree wrap = maybe_get_tls_wrapper_call (expr))\n+\texpr = wrap;\n \n       expr = convert_from_reference (expr);\n     }\n@@ -3788,18 +3790,10 @@ finish_id_expression_1 (tree id_expression,\n \t  *non_integral_constant_expression_p = true;\n \t}\n \n-      tree wrap;\n-      if (VAR_P (decl)\n-\t  && !cp_unevaluated_operand\n-\t  && !processing_template_decl\n-\t  && (TREE_STATIC (decl) || DECL_EXTERNAL (decl))\n-\t  && CP_DECL_THREAD_LOCAL_P (decl)\n-\t  && (wrap = get_tls_wrapper_fn (decl)))\n-\t{\n-\t  /* Replace an evaluated use of the thread_local variable with\n-\t     a call to its wrapper.  */\n-\t  decl = build_cxx_call (wrap, 0, NULL, tf_warning_or_error);\n-\t}\n+      if (tree wrap = maybe_get_tls_wrapper_call (decl))\n+\t/* Replace an evaluated use of the thread_local variable with\n+\t   a call to its wrapper.  */\n+\tdecl = wrap;\n       else if (TREE_CODE (decl) == TEMPLATE_ID_EXPR\n \t       && !dependent_p\n \t       && variable_template_p (TREE_OPERAND (decl, 0)))"}, {"sha": "e2c5fc22ce4275754baff9eeb18bdded061191d1", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -2443,6 +2443,12 @@ build_class_member_access_expr (cp_expr object, tree member,\n       /* A static data member.  */\n       result = member;\n       mark_exp_read (object);\n+\n+      if (tree wrap = maybe_get_tls_wrapper_call (result))\n+\t/* Replace an evaluated use of the thread_local variable with\n+\t   a call to its wrapper.  */\n+\tresult = wrap;\n+\n       /* If OBJECT has side-effects, they are supposed to occur.  */\n       if (TREE_SIDE_EFFECTS (object))\n \tresult = build2 (COMPOUND_EXPR, TREE_TYPE (result), object, result);"}, {"sha": "8324702d242ac9cab625a30bb203e65a9569a0b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -1,5 +1,21 @@\n 2019-03-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/60702\n+\t* g++.dg/tls/thread_local11.C: New test.\n+\t* g++.dg/tls/thread_local11.h: New test.\n+\t* g++.dg/tls/thread_local12a.C: New test.\n+\t* g++.dg/tls/thread_local12b.C: New test.\n+\t* g++.dg/tls/thread_local12c.C: New test.\n+\t* g++.dg/tls/thread_local12d.C: New test.\n+\t* g++.dg/tls/thread_local12e.C: New test.\n+\t* g++.dg/tls/thread_local12f.C: New test.\n+\t* g++.dg/tls/thread_local12g.C: New test.\n+\t* g++.dg/tls/thread_local12h.C: New test.\n+\t* g++.dg/tls/thread_local12i.C: New test.\n+\t* g++.dg/tls/thread_local12j.C: New test.\n+\t* g++.dg/tls/thread_local12k.C: New test.\n+\t* g++.dg/tls/thread_local12l.C: New test.\n+\n \tPR c++/87481\n \t* g++.dg/cpp1y/constexpr-87481.C: New test.\n "}, {"sha": "036d91ac41e0801dd53b53718a66b4f69b311b3a", "filename": "gcc/testsuite/g++.dg/tls/thread_local11.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local11.C?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -0,0 +1,48 @@\n+// PR c++/60702\n+// { dg-do compile { target c++11 } }\n+// { dg-add-options tls }\n+// { dg-require-effective-target tls_runtime }\n+// { dg-additional-options \"-fdump-tree-gimple\" }\n+// { dg-final { scan-tree-dump-times \"_ZTW2s1\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTW2s2\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTW2s3\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTW2s4\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTWN1T2u1E\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTWN1T2u2E\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTWN1T2u3E\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTWN1T2u4E\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTWN1T2u5E\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTWN1T2u6E\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTWN1T2u7E\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTWN1T2u8E\" 2 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTH2s1\" 1 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTH2s2\" 1 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTH2s3\" 1 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTH2s4\" 1 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTHN1T2u1E\" 1 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTHN1T2u2E\" 1 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTHN1T2u3E\" 1 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTHN1T2u4E\" 1 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTHN1T2u5E\" 1 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTHN1T2u6E\" 1 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTHN1T2u7E\" 1 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"_ZTHN1T2u8E\" 1 \"gimple\" } }\n+\n+#include \"thread_local11.h\"\n+\n+void\n+foo ()\n+{\n+  f1 ();\n+  f2 ();\n+  f3 ();\n+  f4 ();\n+  f5 ();\n+  f6 ();\n+  f7<0> ();\n+  f8<0> ();\n+  f9<0> ();\n+  f10<0> ();\n+  f11<0> ();\n+  f12<0> ();\n+}"}, {"sha": "761b42dfe60ab2ec64da605ba3275b7a04ffc7ae", "filename": "gcc/testsuite/g++.dg/tls/thread_local11.h", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local11.h?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/60702\n+\n+extern \"C\" void abort ();\n+struct S { S () { i = 42; }; int i; };\n+thread_local S s1, s2, s3, s4;\n+struct T { static thread_local S u1, u2, u3, u4, u5, u6, u7, u8; int i; } t;\n+thread_local S T::u1, T::u2, T::u3, T::u4, T::u5, T::u6, T::u7, T::u8;\n+\n+S *f1 () { return &s1; }\n+int *f2 () { return &s2.i; }\n+S *f3 () { return &t.u1; }\n+int *f4 () { return &t.u2.i; }\n+S *f5 () { return &T::u3; }\n+int *f6 () { return &T::u4.i; }\n+template <int N>\n+S *f7 () { return &s3; }\n+template <int N>\n+int *f8 () { return &s4.i; }\n+template <int N>\n+S *f9 () { return &t.u5; }\n+template <int N>\n+int *f10 () { return &t.u6.i; }\n+template <int N>\n+S *f11 () { return &T::u7; }\n+template <int N>\n+int *f12 () { return &T::u8.i; }"}, {"sha": "87a17160d0a185dd2ea8a95fe87d9cf108be70b1", "filename": "gcc/testsuite/g++.dg/tls/thread_local12a.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12a.C?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/60702\n+// { dg-do run { target c++11 } }\n+// { dg-add-options tls }\n+// { dg-require-effective-target tls_runtime }\n+\n+#include \"thread_local11.h\"\n+\n+int\n+main ()\n+{\n+  if (f1 ()->i != 42) abort ();\n+}"}, {"sha": "498bacec99ae9823d3e0898bc4393f988e76a28c", "filename": "gcc/testsuite/g++.dg/tls/thread_local12b.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12b.C?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/60702\n+// { dg-do run { target c++11 } }\n+// { dg-add-options tls }\n+// { dg-require-effective-target tls_runtime }\n+\n+#include \"thread_local11.h\"\n+\n+int\n+main ()\n+{\n+  if (*f2 () != 42) abort ();\n+}"}, {"sha": "92add8f7db93e19bce96c602d39c457fed8b6c08", "filename": "gcc/testsuite/g++.dg/tls/thread_local12c.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12c.C?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/60702\n+// { dg-do run { target c++11 } }\n+// { dg-add-options tls }\n+// { dg-require-effective-target tls_runtime }\n+\n+#include \"thread_local11.h\"\n+\n+int\n+main ()\n+{\n+  if (f3 ()->i != 42) abort ();\n+}"}, {"sha": "78631366ba419f06b1d0d9fefa7be960d72a4115", "filename": "gcc/testsuite/g++.dg/tls/thread_local12d.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12d.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12d.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12d.C?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/60702\n+// { dg-do run { target c++11 } }\n+// { dg-add-options tls }\n+// { dg-require-effective-target tls_runtime }\n+\n+#include \"thread_local11.h\"\n+\n+int\n+main ()\n+{\n+  if (*f4 () != 42) abort ();\n+}"}, {"sha": "95c44f76a05d524780a5d67ac3648a96495ea5a5", "filename": "gcc/testsuite/g++.dg/tls/thread_local12e.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12e.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12e.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12e.C?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/60702\n+// { dg-do run { target c++11 } }\n+// { dg-add-options tls }\n+// { dg-require-effective-target tls_runtime }\n+\n+#include \"thread_local11.h\"\n+\n+int\n+main ()\n+{\n+  if (f5 ()->i != 42) abort ();\n+}"}, {"sha": "e7795dc060b393bfc5ad75498da60d1fb15bec41", "filename": "gcc/testsuite/g++.dg/tls/thread_local12f.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12f.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12f.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12f.C?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/60702\n+// { dg-do run { target c++11 } }\n+// { dg-add-options tls }\n+// { dg-require-effective-target tls_runtime }\n+\n+#include \"thread_local11.h\"\n+\n+int\n+main ()\n+{\n+  if (*f6 () != 42) abort ();\n+}"}, {"sha": "c7c964a053d985d8770d011bd3587bc42f8eeb6e", "filename": "gcc/testsuite/g++.dg/tls/thread_local12g.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12g.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12g.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12g.C?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/60702\n+// { dg-do run { target c++11 } }\n+// { dg-add-options tls }\n+// { dg-require-effective-target tls_runtime }\n+\n+#include \"thread_local11.h\"\n+\n+int\n+main ()\n+{\n+  if (f7<0> ()->i != 42) abort ();\n+}"}, {"sha": "32b6841d6b8e51440bedda48ac07bb07c16ac455", "filename": "gcc/testsuite/g++.dg/tls/thread_local12h.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12h.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12h.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12h.C?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/60702\n+// { dg-do run { target c++11 } }\n+// { dg-add-options tls }\n+// { dg-require-effective-target tls_runtime }\n+\n+#include \"thread_local11.h\"\n+\n+int\n+main ()\n+{\n+  if (*f8<0> () != 42) abort ();\n+}"}, {"sha": "815e14eaa69fc4afcd21323ced350c852980c5fa", "filename": "gcc/testsuite/g++.dg/tls/thread_local12i.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12i.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12i.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12i.C?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/60702\n+// { dg-do run { target c++11 } }\n+// { dg-add-options tls }\n+// { dg-require-effective-target tls_runtime }\n+\n+#include \"thread_local11.h\"\n+\n+int\n+main ()\n+{\n+  if (f9<0> ()->i != 42) abort ();\n+}"}, {"sha": "0009de15e0eb006ba4c1657d26c909f5a5bee875", "filename": "gcc/testsuite/g++.dg/tls/thread_local12j.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12j.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12j.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12j.C?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/60702\n+// { dg-do run { target c++11 } }\n+// { dg-add-options tls }\n+// { dg-require-effective-target tls_runtime }\n+\n+#include \"thread_local11.h\"\n+\n+int\n+main ()\n+{\n+  if (*f10<0> () != 42) abort ();\n+}"}, {"sha": "589e87226ab8629709b420580314b02026590c7d", "filename": "gcc/testsuite/g++.dg/tls/thread_local12k.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12k.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12k.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12k.C?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/60702\n+// { dg-do run { target c++11 } }\n+// { dg-add-options tls }\n+// { dg-require-effective-target tls_runtime }\n+\n+#include \"thread_local11.h\"\n+\n+int\n+main ()\n+{\n+  if (f11<0> ()->i != 42) abort ();\n+}"}, {"sha": "273e1be020d7b06cb53a69d07d874ba24e1dd6fe", "filename": "gcc/testsuite/g++.dg/tls/thread_local12l.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12l.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3703c552d12e7e62febf4fe5deb837a1305f78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12l.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local12l.C?ref=5c3703c552d12e7e62febf4fe5deb837a1305f78", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/60702\n+// { dg-do run { target c++11 } }\n+// { dg-add-options tls }\n+// { dg-require-effective-target tls_runtime }\n+\n+#include \"thread_local11.h\"\n+\n+int\n+main ()\n+{\n+  if (*f12<0> () != 42) abort ();\n+}"}]}