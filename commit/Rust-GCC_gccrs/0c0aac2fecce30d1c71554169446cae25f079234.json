{"sha": "0c0aac2fecce30d1c71554169446cae25f079234", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMwYWFjMmZlY2NlMzBkMWM3MTU1NDE2OTQ0NmNhZTI1ZjA3OTIzNA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-03-27T17:33:36Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-03-27T17:33:36Z"}, "message": "cp-tree.h (add_friend): Declare.\n\n\t* cp-tree.h (add_friend): Declare.\n\t(add_friends): Likewise.\n\t* friend.c (add_friend): Make it global.  Don't add to\n\tDECL_BEFRIENDING_CLASSES if the befriending class is a template.\n\t(add_friends): Make it global.\n\t(make_friend_class): Don't add to DECL_BEFRIENDING_CLASSES if the\n\tbefriending class is a template.\n\t* parse.y (component_decl_1): Fix typo in comment.\n\t* parse.c: Regenerated.\n\t* pt.c (instantiate_class_template): Use add_friend and\n\tadd_friends rather that duplicating some of their functionality\n\there.\n\nFrom-SVN: r26020", "tree": {"sha": "60ca8cc353fd96a0c775f1b61e4833ed942c36b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60ca8cc353fd96a0c775f1b61e4833ed942c36b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c0aac2fecce30d1c71554169446cae25f079234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c0aac2fecce30d1c71554169446cae25f079234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c0aac2fecce30d1c71554169446cae25f079234", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c0aac2fecce30d1c71554169446cae25f079234/comments", "author": null, "committer": null, "parents": [{"sha": "f099f336d1933243103b460498b49c7b7314d2be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f099f336d1933243103b460498b49c7b7314d2be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f099f336d1933243103b460498b49c7b7314d2be"}], "stats": {"total": 90, "additions": 52, "deletions": 38}, "files": [{"sha": "96970ed736ea65ba71d7074501242842cb8b7e4a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0aac2fecce30d1c71554169446cae25f079234/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0aac2fecce30d1c71554169446cae25f079234/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0c0aac2fecce30d1c71554169446cae25f079234", "patch": "@@ -1,3 +1,18 @@\n+1999-03-27  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (add_friend): Declare.\n+\t(add_friends): Likewise.\n+\t* friend.c (add_friend): Make it global.  Don't add to\n+\tDECL_BEFRIENDING_CLASSES if the befriending class is a template.\n+\t(add_friends): Make it global.\n+\t(make_friend_class): Don't add to DECL_BEFRIENDING_CLASSES if the\n+\tbefriending class is a template.\n+\t* parse.y (component_decl_1): Fix typo in comment.\n+\t* parse.c: Regenerated.\n+\t* pt.c (instantiate_class_template): Use add_friend and\n+\tadd_friends rather that duplicating some of their functionality\n+\there.\n+\t\n 1999-03-27  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* call.c (build_field_call): Unify 'this' and non-'this' cases."}, {"sha": "9bbf39ee3d5a58c41273b813064b0472c1725f24", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0aac2fecce30d1c71554169446cae25f079234/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0aac2fecce30d1c71554169446cae25f079234/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0c0aac2fecce30d1c71554169446cae25f079234", "patch": "@@ -3028,6 +3028,8 @@ extern void do_case\t\t\t\tPROTO((tree, tree));\n /* friend.c */\n extern int is_friend\t\t\t\tPROTO((tree, tree));\n extern void make_friend_class\t\t\tPROTO((tree, tree));\n+extern void add_friend                          PROTO((tree, tree));\n+extern void add_friends                         PROTO((tree, tree, tree));\n extern tree do_friend\t\t\t\tPROTO((tree, tree, tree, tree, enum overload_flags, tree, int));\n \n /* in init.c */"}, {"sha": "285432f5ccd64d9694359f03952bc620509e5e7d", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0aac2fecce30d1c71554169446cae25f079234/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0aac2fecce30d1c71554169446cae25f079234/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=0c0aac2fecce30d1c71554169446cae25f079234", "patch": "@@ -27,9 +27,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"toplev.h\"\n \n-static void add_friend PROTO((tree, tree));\n-static void add_friends PROTO((tree, tree, tree));\n-\n /* Friend data structures are described in cp-tree.h.  */\n \n /* Returns non-zero if SUPPLICANT is a friend of TYPE.  */\n@@ -140,7 +137,7 @@ is_friend (type, supplicant)\n /* Add a new friend to the friends of the aggregate type TYPE.\n    DECL is the FUNCTION_DECL of the friend being added.  */\n \n-static void\n+void\n add_friend (type, decl)\n      tree type, decl;\n {\n@@ -176,15 +173,16 @@ add_friend (type, decl)\n   DECL_FRIENDLIST (typedecl)\n     = tree_cons (DECL_NAME (decl), build_tree_list (error_mark_node, decl),\n \t\t DECL_FRIENDLIST (typedecl));\n-  DECL_BEFRIENDING_CLASSES (decl) \n-    = tree_cons (NULL_TREE, type,\n-\t\t DECL_BEFRIENDING_CLASSES (decl));\n+  if (!uses_template_parms (type))\n+    DECL_BEFRIENDING_CLASSES (decl) \n+      = tree_cons (NULL_TREE, type,\n+\t\t   DECL_BEFRIENDING_CLASSES (decl));\n }\n \n /* Declare that every member function NAME in FRIEND_TYPE\n    (which may be NULL_TREE) is a friend of type TYPE.  */\n \n-static void\n+void\n add_friends (type, name, friend_type)\n      tree type, name, friend_type;\n {\n@@ -298,9 +296,10 @@ make_friend_class (type, friend_type)\n \t= tree_cons (NULL_TREE, friend_type, CLASSTYPE_FRIEND_CLASSES (type));\n       if (is_template_friend)\n \tfriend_type = TREE_TYPE (friend_type);\n-      CLASSTYPE_BEFRIENDING_CLASSES (friend_type)\n-\t= tree_cons (NULL_TREE, type, \n-\t\t     CLASSTYPE_BEFRIENDING_CLASSES (friend_type)); \n+      if (!uses_template_parms (type))\n+\tCLASSTYPE_BEFRIENDING_CLASSES (friend_type)\n+\t  = tree_cons (NULL_TREE, type, \n+\t\t       CLASSTYPE_BEFRIENDING_CLASSES (friend_type)); \n     }\n }\n "}, {"sha": "7ef6984b93104972f63af8a5a8cd58b9f24461b0", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0aac2fecce30d1c71554169446cae25f079234/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0aac2fecce30d1c71554169446cae25f079234/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=0c0aac2fecce30d1c71554169446cae25f079234", "patch": "@@ -2483,7 +2483,7 @@ component_decl_1:\n \t\t     Therefore, the rules for components take care of\n \t\t     this processing.  To avoid registering the\n \t\t     components more than once, we send NULL_TREE up\n-\t\t     here; that lets finish_member_declaration now\n+\t\t     here; that lets finish_member_declaration know\n \t\t     that there is nothing to do.  */\n \t\t  if (!$2)\n \t\t    grok_x_components ($1.t);"}, {"sha": "8855efa311e4f30381d3745a77249c4c33787934", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 23, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0aac2fecce30d1c71554169446cae25f079234/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0aac2fecce30d1c71554169446cae25f079234/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0c0aac2fecce30d1c71554169446cae25f079234", "patch": "@@ -4961,32 +4961,19 @@ instantiate_class_template (type)\n     {\n       tree friends;\n \n-      DECL_FRIENDLIST (typedecl)\n-\t= tree_cons (TREE_PURPOSE (t), NULL_TREE, \n-\t\t     DECL_FRIENDLIST (typedecl));\n-\n       for (friends = TREE_VALUE (t);\n \t   friends != NULL_TREE;\n \t   friends = TREE_CHAIN (friends))\n-\t{\n-\t  if (TREE_PURPOSE (friends) == error_mark_node)\n-\t    {\n-\t      TREE_VALUE (DECL_FRIENDLIST (typedecl))\n-\t\t= tree_cons (error_mark_node, \n-\t\t\t     tsubst_friend_function (TREE_VALUE (friends),\n-\t\t\t\t\t\t     args),\n-\t\t\t     TREE_VALUE (DECL_FRIENDLIST (typedecl)));\n-\t    }\n-\t  else\n-\t    {\n-\t      TREE_VALUE (DECL_FRIENDLIST (typedecl))\n-\t\t= tree_cons (tsubst (TREE_PURPOSE (friends), args, \n-\t\t\t\t     /*complain=*/1, NULL_TREE),\n-\t\t\t     NULL_TREE,\n-\t\t\t     TREE_VALUE (DECL_FRIENDLIST (typedecl)));\n-\n-\t    }\n-\t}\n+\tif (TREE_PURPOSE (friends) == error_mark_node)\n+\t  add_friend (type, \n+\t\t      tsubst_friend_function (TREE_VALUE (friends),\n+\t\t\t\t\t      args));\n+\telse\n+\t  add_friends (type, \n+\t\t       tsubst_copy (TREE_PURPOSE (t), args,\n+\t\t\t\t    /*complain=*/1, NULL_TREE),\n+\t\t       tsubst (TREE_PURPOSE (friends), args,\n+\t\t\t       /*complain=*/1, NULL_TREE));\n     }\n \n   for (t = CLASSTYPE_FRIEND_CLASSES (pattern);"}, {"sha": "68cf4df6fb220ba0a5b6dfc122a578e39ac47b9f", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash32.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0aac2fecce30d1c71554169446cae25f079234/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0aac2fecce30d1c71554169446cae25f079234/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash32.C?ref=0c0aac2fecce30d1c71554169446cae25f079234", "patch": "@@ -0,0 +1,13 @@\n+// Build don't link:\n+// Origin: Jason Merrill <jason@cygnus.com>\n+\n+template <class T> struct A\n+{\n+  struct B;\n+};\n+\n+template<class T> struct C\n+{\n+  friend typename A<T>::B;\n+};\n+"}, {"sha": "e3a6a060ef6afd2da2c57c037ffca3d3f61e1e1b", "filename": "gcc/testsuite/g++.old-deja/g++.pt/friend38.C", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0aac2fecce30d1c71554169446cae25f079234/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0aac2fecce30d1c71554169446cae25f079234/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend38.C?ref=0c0aac2fecce30d1c71554169446cae25f079234", "patch": "@@ -2,9 +2,7 @@\n \n // Overly simplified from testcase by \"B. K. Oxley\" <binkley@bigfoot.com>\n \n-// crash test - XFAIL *-*-*\n-\n template<class P> struct foo {\n   typedef P parent_type;\n-  friend parent_type; // ERROR - template parameters cannot be friends\n+  friend parent_type; // ERROR - template parameters cannot be friends - XFAIL *-*-*\n };"}]}