{"sha": "3e0cef6dddb0eeba482ef43bbca8eeac4b57666a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UwY2VmNmRkZGIwZWViYTQ4MmVmNDNiYmNhOGVlYWM0YjU3NjY2YQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-09-13T09:23:36Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-09-13T09:23:36Z"}, "message": "re PR target/50358 (AVR: Implement [u]maddqihi4 [u]msubqihi4 patterns on the enhanced core)\n\n\t\n\tPR target/50358\n\t* config/avr/predicates.md (const_1_to_6_operand): New predicate.\n\t* config/avr/avr.md: (extend_s): New code attribute.\n\t(mul_r_d): New code attribute.\n\t(*maddqihi4, *umaddqihi4): New insns.\n\t(*msubqihi4, *umsubqihi4): New insns.\n\t(*usmaddqihi4, *sumaddqihi4): New insns.\n\t(*usmsubqihi4, *susubdqihi4): New insns.\n\t(*umaddqihi4.uconst, *maddqihi4.sconst): New insn-and-splits.\n\t(*umsubqihi4.uconst, *msubqihi4.sconst): New insn-and-splits.\n\t(*umsubqihi4.uconst.ashift): New insn-and-split.\n\t(*msubqihi4.sconst.ashift): New insn-and-split.\n\t(*sumaddqihi4.uconst): New insn-and-split.\n\t(*sumsubqihi4.uconst): New insn-and-split.\n\t* config/avr/avr.c (avr_rtx_costs): Report costs of above in case\n\tPLUS:HI and MINUS:HI.\n\nFrom-SVN: r178806", "tree": {"sha": "4753f1bd05a672d00fe04c453c30ce8891c225c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4753f1bd05a672d00fe04c453c30ce8891c225c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e0cef6dddb0eeba482ef43bbca8eeac4b57666a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e0cef6dddb0eeba482ef43bbca8eeac4b57666a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e0cef6dddb0eeba482ef43bbca8eeac4b57666a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e0cef6dddb0eeba482ef43bbca8eeac4b57666a/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9fb4f13b1c0bb0d3687eb552123c413a28d2ee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9fb4f13b1c0bb0d3687eb552123c413a28d2ee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9fb4f13b1c0bb0d3687eb552123c413a28d2ee3"}], "stats": {"total": 315, "additions": 315, "deletions": 0}, "files": [{"sha": "020e8483dd32dfede18359c7941254bab5291b85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0cef6dddb0eeba482ef43bbca8eeac4b57666a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0cef6dddb0eeba482ef43bbca8eeac4b57666a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e0cef6dddb0eeba482ef43bbca8eeac4b57666a", "patch": "@@ -1,3 +1,22 @@\n+2011-09-13  Georg-Johann Lay  <avr@gjlay.de>\n+\t\n+\tPR target/50358\n+\t* config/avr/predicates.md (const_1_to_6_operand): New predicate.\n+\t* config/avr/avr.md: (extend_s): New code attribute.\n+\t(mul_r_d): New code attribute.\n+\t(*maddqihi4, *umaddqihi4): New insns.\n+\t(*msubqihi4, *umsubqihi4): New insns.\n+\t(*usmaddqihi4, *sumaddqihi4): New insns.\n+\t(*usmsubqihi4, *susubdqihi4): New insns.\n+\t(*umaddqihi4.uconst, *maddqihi4.sconst): New insn-and-splits.\n+\t(*umsubqihi4.uconst, *msubqihi4.sconst): New insn-and-splits.\n+\t(*umsubqihi4.uconst.ashift): New insn-and-split.\n+\t(*msubqihi4.sconst.ashift): New insn-and-split.\n+\t(*sumaddqihi4.uconst): New insn-and-split.\n+\t(*sumsubqihi4.uconst): New insn-and-split.\n+\t* config/avr/avr.c (avr_rtx_costs): Report costs of above in case\n+\tPLUS:HI and MINUS:HI.\n+\n 2011-09-13  Revital Eres  <revital.eres@linaro.org>\n \n \tmodulo-sched.c (remove_node_from_ps): Return void instead of bool."}, {"sha": "773aec2442dde67b8d45db50246aea7109634d71", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0cef6dddb0eeba482ef43bbca8eeac4b57666a/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0cef6dddb0eeba482ef43bbca8eeac4b57666a/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=3e0cef6dddb0eeba482ef43bbca8eeac4b57666a", "patch": "@@ -5576,6 +5576,16 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED,\n \t  break;\n \n \tcase HImode:\n+          if (AVR_HAVE_MUL\n+              && (MULT == GET_CODE (XEXP (x, 0))\n+                  || ASHIFT == GET_CODE (XEXP (x, 0)))\n+              && register_operand (XEXP (x, 1), HImode)\n+              && (ZERO_EXTEND == GET_CODE (XEXP (XEXP (x, 0), 0))\n+                  || SIGN_EXTEND == GET_CODE (XEXP (XEXP (x, 0), 0))))\n+            {\n+              *total = COSTS_N_INSNS (speed ? 5 : 4);\n+              return true;\n+            }\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (2);\n@@ -5608,6 +5618,17 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED,\n       return true;\n \n     case MINUS:\n+      if (AVR_HAVE_MUL\n+          && HImode == mode\n+          && register_operand (XEXP (x, 0), HImode)\n+          && (MULT == GET_CODE (XEXP (x, 1))\n+              || ASHIFT == GET_CODE (XEXP (x, 1)))\n+          && (ZERO_EXTEND == GET_CODE (XEXP (XEXP (x, 1), 0))\n+              || SIGN_EXTEND == GET_CODE (XEXP (XEXP (x, 1), 0))))\n+        {\n+          *total = COSTS_N_INSNS (speed ? 5 : 4);\n+          return true;\n+        }\n     case AND:\n     case IOR:\n       *total = COSTS_N_INSNS (GET_MODE_SIZE (mode));"}, {"sha": "8721314e73b3a4d7bad230a18c60732498983719", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 270, "deletions": 0, "changes": 270, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0cef6dddb0eeba482ef43bbca8eeac4b57666a/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0cef6dddb0eeba482ef43bbca8eeac4b57666a/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=3e0cef6dddb0eeba482ef43bbca8eeac4b57666a", "patch": "@@ -150,6 +150,15 @@\n   [(sign_extend \"\")\n    (zero_extend \"u\")])\n \n+(define_code_attr extend_s\n+  [(sign_extend \"s\")\n+   (zero_extend \"\")])\n+\n+;; Constrain input operand of widening multiply, i.e. MUL resp. MULS.\n+(define_code_attr mul_r_d\n+  [(zero_extend \"r\")\n+   (sign_extend \"d\")])\n+\n \n ;;========================================================================\n ;; The following is used by nonlocal_goto and setjmp.\n@@ -1128,6 +1137,267 @@\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")])\n \n+;******************************************************************************\n+; multiply-add/sub HI: $0 = $3 +/- $1*$2  with 8-bit values $1, $2\n+;******************************************************************************\n+\n+;; We don't use standard insns/expanders as they lead to cumbersome code for,\n+;; e.g,\n+;;\n+;;     int foo (unsigned char z)\n+;;     {\n+;;       extern int aInt[];\n+;;       return aInt[3*z+2];\n+;;     }\n+;;\n+;; because the constant +4 then is added explicitely instead of consuming it\n+;; with the aInt symbol.  Therefore, we rely on insn combine which takes costs\n+;; into account more accurately and doesn't do burte-force multiply-add/sub.\n+;; The implementational effort is the same so we are fine with that approach.\n+\n+\n+;; \"*maddqihi4\"\n+;; \"*umaddqihi4\"\n+(define_insn \"*<extend_u>maddqihi4\"\n+  [(set (match_operand:HI 0 \"register_operand\"                                  \"=r\")\n+        (plus:HI (mult:HI (any_extend:HI (match_operand:QI 1 \"register_operand\" \"<mul_r_d>\"))\n+                          (any_extend:HI (match_operand:QI 2 \"register_operand\" \"<mul_r_d>\")))\n+                 (match_operand:HI 3 \"register_operand\"                         \"0\")))]\n+  \n+  \"AVR_HAVE_MUL\"\n+  \"mul<extend_s> %1,%2\n+\tadd %A0,r0\n+\tadc %B0,r1\n+\tclr __zero_reg__\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n+;; \"*msubqihi4\"\n+;; \"*umsubqihi4\"\n+(define_insn \"*<extend_u>msubqihi4\"\n+  [(set (match_operand:HI 0 \"register_operand\"                                  \"=r\")\n+        (minus:HI (match_operand:HI 3 \"register_operand\"                         \"0\")\n+                  (mult:HI (any_extend:HI (match_operand:QI 1 \"register_operand\" \"<mul_r_d>\"))\n+                           (any_extend:HI (match_operand:QI 2 \"register_operand\" \"<mul_r_d>\")))))]\n+  \"AVR_HAVE_MUL\"\n+  \"mul<extend_s> %1,%2\n+\tsub %A0,r0\n+\tsbc %B0,r1\n+\tclr __zero_reg__\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n+;; \"*usmaddqihi4\"\n+;; \"*sumaddqihi4\"\n+(define_insn \"*<any_extend:extend_su><any_extend2:extend_su>msubqihi4\"\n+  [(set (match_operand:HI 0 \"register_operand\"                                  \"=r\")\n+        (plus:HI (mult:HI (any_extend:HI  (match_operand:QI 1 \"register_operand\" \"a\"))\n+                          (any_extend2:HI (match_operand:QI 2 \"register_operand\" \"a\")))\n+                 (match_operand:HI 3 \"register_operand\"                          \"0\")))]\n+  \"AVR_HAVE_MUL\n+   && reload_completed\n+   && <any_extend:CODE> != <any_extend2:CODE>\"\n+  {\n+    output_asm_insn (<any_extend:CODE> == SIGN_EXTEND\n+                     ? \"mulsu %1,%2\" : \"mulsu %2,%1\", operands);\n+\n+    return \"add %A0,r0\\;adc %B0,r1\\;clr __zero_reg__\";\n+  }\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n+;; \"*usmsubqihi4\"\n+;; \"*sumsubqihi4\"\n+(define_insn \"*<any_extend:extend_su><any_extend2:extend_su>msubqihi4\"\n+  [(set (match_operand:HI 0 \"register_operand\"                                   \"=r\")\n+        (minus:HI (match_operand:HI 3 \"register_operand\"                          \"0\")\n+                  (mult:HI (any_extend:HI  (match_operand:QI 1 \"register_operand\" \"a\"))\n+                           (any_extend2:HI (match_operand:QI 2 \"register_operand\" \"a\")))))]\n+  \"AVR_HAVE_MUL\n+   && reload_completed\n+   && <any_extend:CODE> != <any_extend2:CODE>\"\n+  {\n+    output_asm_insn (<any_extend:CODE> == SIGN_EXTEND\n+                     ? \"mulsu %1,%2\" : \"mulsu %2,%1\", operands);\n+\n+    return \"sub %A0,r0\\;sbc %B0,r1\\;clr __zero_reg__\";\n+  }\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n+;; Handle small constants\n+\n+(define_insn_and_split \"*umaddqihi4.uconst\"\n+  [(set (match_operand:HI 0 \"register_operand\"                                   \"=r\")\n+        (plus:HI (mult:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\"  \"r\"))\n+                          (match_operand:HI 2 \"u8_operand\"                        \"M\"))\n+                 (match_operand:HI 3 \"register_operand\"                           \"0\")))\n+   (clobber (match_scratch:QI 4                                                 \"=&d\"))]\n+  \"AVR_HAVE_MUL\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 4)\n+        (match_dup 2))\n+   ; *umaddqihi4\n+   (set (match_dup 0)\n+        (plus:HI (mult:HI (zero_extend:HI (match_dup 1))\n+                          (zero_extend:HI (match_dup 4)))\n+                 (match_dup 3)))]\n+  {\n+    operands[2] = gen_int_mode (INTVAL (operands[2]), QImode);\n+  })\n+\n+(define_insn_and_split \"*umsubqihi4.uconst\"\n+  [(set (match_operand:HI 0 \"register_operand\"                                   \"=r\")\n+        (minus:HI (match_operand:HI 3 \"register_operand\"                          \"0\")\n+                  (mult:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"r\"))\n+                           (match_operand:HI 2 \"u8_operand\"                       \"M\"))))\n+   (clobber (match_scratch:QI 4                                                 \"=&d\"))]\n+  \"AVR_HAVE_MUL\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 4)\n+        (match_dup 2))\n+   ; *umsubqihi4\n+   (set (match_dup 0)\n+        (minus:HI (match_dup 3)\n+                  (mult:HI (zero_extend:HI (match_dup 1))\n+                           (zero_extend:HI (match_dup 4)))))]\n+  {\n+    operands[2] = gen_int_mode (INTVAL (operands[2]), QImode);\n+  })\n+\n+;; Same as the insn above, but combiner tries versions canonicalized to ASHIFT\n+;; for MULT with power of 2 and skips trying MULT insn above.\n+\n+(define_insn_and_split \"*umsubqihi4.uconst.ashift\"\n+  [(set (match_operand:HI 0 \"register_operand\"                                     \"=r\")\n+        (minus:HI (match_operand:HI 3 \"register_operand\"                            \"0\")\n+                  (ashift:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"r\"))\n+                             (match_operand:HI 2 \"const_2_to_7_operand\"             \"n\"))))\n+   (clobber (match_scratch:QI 4                                                   \"=&d\"))]\n+  \"AVR_HAVE_MUL\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 4)\n+        (match_dup 2))\n+   ; *umsubqihi4\n+   (set (match_dup 0)\n+        (minus:HI (match_dup 3)\n+                  (mult:HI (zero_extend:HI (match_dup 1))\n+                           (zero_extend:HI (match_dup 4)))))]\n+  {\n+    operands[2] = gen_int_mode (1 << INTVAL (operands[2]), QImode);\n+  })\n+\n+(define_insn_and_split \"*maddqihi4.sconst\"\n+  [(set (match_operand:HI 0 \"register_operand\"                                  \"=r\")\n+        (plus:HI (mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"d\"))\n+                          (match_operand:HI 2 \"s8_operand\"                       \"n\"))\n+                 (match_operand:HI 3 \"register_operand\"                          \"0\")))\n+   (clobber (match_scratch:QI 4                                                \"=&d\"))]\n+  \"AVR_HAVE_MUL\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 4)\n+        (match_dup 2))\n+   ; *maddqihi4\n+   (set (match_dup 0)\n+        (plus:HI (mult:HI (sign_extend:HI (match_dup 1))\n+                          (sign_extend:HI (match_dup 4)))\n+                 (match_dup 3)))]\n+  {\n+    operands[2] = gen_int_mode (INTVAL (operands[2]), QImode);\n+  })\n+\n+(define_insn_and_split \"*msubqihi4.sconst\"\n+  [(set (match_operand:HI 0 \"register_operand\"                                   \"=r\")\n+        (minus:HI (match_operand:HI 3 \"register_operand\"                          \"0\")\n+                  (mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"d\"))\n+                           (match_operand:HI 2 \"s8_operand\"                       \"M\"))))\n+   (clobber (match_scratch:QI 4                                                 \"=&d\"))]\n+  \"AVR_HAVE_MUL\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 4)\n+        (match_dup 2))\n+   ; *smsubqihi4\n+   (set (match_dup 0)\n+        (minus:HI (match_dup 3)\n+                  (mult:HI (sign_extend:HI (match_dup 1))\n+                           (sign_extend:HI (match_dup 4)))))]\n+  {\n+    operands[2] = gen_int_mode (INTVAL (operands[2]), QImode);\n+  })\n+\n+;; Same as the insn above, but combiner tries versions canonicalized to ASHIFT\n+;; for MULT with power of 2 and skips trying MULT insn above.  We omit 128\n+;; because this would require an extra pattern for just one value.\n+\n+(define_insn_and_split \"*msubqihi4.sconst.ashift\"\n+  [(set (match_operand:HI 0 \"register_operand\"                                     \"=r\")\n+        (minus:HI (match_operand:HI 3 \"register_operand\"                            \"0\")\n+                  (ashift:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"d\"))\n+                             (match_operand:HI 2 \"const_1_to_6_operand\"             \"M\"))))\n+   (clobber (match_scratch:QI 4                                                   \"=&d\"))]\n+  \"AVR_HAVE_MUL\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 4)\n+        (match_dup 2))\n+   ; *smsubqihi4\n+   (set (match_dup 0)\n+        (minus:HI (match_dup 3)\n+                  (mult:HI (sign_extend:HI (match_dup 1))\n+                           (sign_extend:HI (match_dup 4)))))]\n+  {\n+    operands[2] = gen_int_mode (1 << INTVAL (operands[2]), QImode);\n+  })\n+\n+;; For signed/unsigned combinations that require narrow constraint \"a\"\n+;; just provide a pattern if signed/unsigned combination is actually needed.\n+\n+(define_insn_and_split \"*sumaddqihi4.uconst\"\n+  [(set (match_operand:HI 0 \"register_operand\"                                  \"=r\")\n+        (plus:HI (mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"a\"))\n+                          (match_operand:HI 2 \"u8_operand\"                       \"M\"))\n+                 (match_operand:HI 3 \"register_operand\"                          \"0\")))\n+   (clobber (match_scratch:QI 4                                                \"=&a\"))]\n+  \"AVR_HAVE_MUL\n+   && !s8_operand (operands[2], VOIDmode)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 4)\n+        (match_dup 2))\n+   ; *sumaddqihi4\n+   (set (match_dup 0)\n+        (plus:HI (mult:HI (sign_extend:HI (match_dup 1))\n+                          (zero_extend:HI (match_dup 4)))\n+                 (match_dup 3)))]\n+  {\n+    operands[2] = gen_int_mode (INTVAL (operands[2]), QImode);\n+  })\n+\n+(define_insn_and_split \"*sumsubqihi4.uconst\"\n+  [(set (match_operand:HI 0 \"register_operand\"                                   \"=r\")\n+        (minus:HI (match_operand:HI 3 \"register_operand\"                          \"0\")\n+                  (mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"a\"))\n+                           (match_operand:HI 2 \"u8_operand\"                       \"M\"))))\n+   (clobber (match_scratch:QI 4                                                 \"=&a\"))]\n+  \"AVR_HAVE_MUL\n+   && !s8_operand (operands[2], VOIDmode)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 4)\n+        (match_dup 2))\n+   ; *sumsubqihi4\n+   (set (match_dup 0)\n+        (minus:HI (match_dup 3)\n+                  (mult:HI (sign_extend:HI (match_dup 1))\n+                           (zero_extend:HI (match_dup 4)))))]\n+  {\n+    operands[2] = gen_int_mode (INTVAL (operands[2]), QImode);\n+  })\n \n ;******************************************************************************\n ; mul HI: $1 = sign/zero-extend, $2 = small constant"}, {"sha": "1881e8b5162aa1e00f74ae3627dadf0daa294935", "filename": "gcc/config/avr/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0cef6dddb0eeba482ef43bbca8eeac4b57666a/gcc%2Fconfig%2Favr%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0cef6dddb0eeba482ef43bbca8eeac4b57666a/gcc%2Fconfig%2Favr%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fpredicates.md?ref=3e0cef6dddb0eeba482ef43bbca8eeac4b57666a", "patch": "@@ -78,6 +78,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 2, 7)\")))\n \n+;; Return 1 if OP is constant integer 1..6 for MODE.\n+(define_predicate \"const_1_to_6_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 1, 6)\")))\n+\n ;; Return 1 if OP is constant integer 2..6 for MODE.\n (define_predicate \"const_2_to_6_operand\"\n   (and (match_code \"const_int\")"}]}