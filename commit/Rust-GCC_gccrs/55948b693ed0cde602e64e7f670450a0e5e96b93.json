{"sha": "55948b693ed0cde602e64e7f670450a0e5e96b93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU5NDhiNjkzZWQwY2RlNjAyZTY0ZTdmNjcwNDUwYTBlNWU5NmI5Mw==", "commit": {"author": {"name": "Bud Davis", "email": "bdavis9659@comcast.net", "date": "2004-08-27T07:59:30Z"}, "committer": {"name": "Bud Davis", "email": "bdavis@gcc.gnu.org", "date": "2004-08-27T07:59:30Z"}, "message": "re PR libfortran/16597 (gfortran: bug in unformatted I/O on scratch files)\n\n2004-08-27  Bud Davis  <bdavis9659@comcast.net>\n\n        PR fortran/16597\n        * io/io.h: created typedef for unit_mode.\n        * io/io.h (gfc_unit): added mode to unit structure.\n        * io/transfer.c (data_transfer_init): flush if a write then\n        read is done on a unit (direct access files).\n        * io/rewind.c (st_rewind): Used unit mode instead of global.\n\n        * gfortran.dg/pr16597.f90: New test.\n\nFrom-SVN: r86654", "tree": {"sha": "4050f4a405b432378b98cbcd6661afa4a1f0be61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4050f4a405b432378b98cbcd6661afa4a1f0be61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55948b693ed0cde602e64e7f670450a0e5e96b93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55948b693ed0cde602e64e7f670450a0e5e96b93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55948b693ed0cde602e64e7f670450a0e5e96b93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55948b693ed0cde602e64e7f670450a0e5e96b93/comments", "author": null, "committer": null, "parents": [{"sha": "dc700f497caaf7c36db7220ab6f827b8dcf6a7e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc700f497caaf7c36db7220ab6f827b8dcf6a7e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc700f497caaf7c36db7220ab6f827b8dcf6a7e6"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "18f803758a67f3be07661a2aaffd686866d4c416", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55948b693ed0cde602e64e7f670450a0e5e96b93/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55948b693ed0cde602e64e7f670450a0e5e96b93/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=55948b693ed0cde602e64e7f670450a0e5e96b93", "patch": "@@ -1,3 +1,8 @@\n+2004-08-27  Bud Davis  <bdavis9659@comcast.net>\n+\n+\tPR fortran/16597\n+\t* gfortran.dg/pr16597.f90: New test.\n+\n 2004-08-26  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \tPR c/13801"}, {"sha": "ff1dcb838ae25070211497cc2ea0af7c2b92c455", "filename": "gcc/testsuite/gfortran.dg/pr16597.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55948b693ed0cde602e64e7f670450a0e5e96b93/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr16597.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55948b693ed0cde602e64e7f670450a0e5e96b93/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr16597.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr16597.f90?ref=55948b693ed0cde602e64e7f670450a0e5e96b93", "patch": "@@ -0,0 +1,27 @@\n+! pr 16597\n+! libgfortran\n+! reading a direct access record after it was written did\n+! not always return the correct data.\n+\n+      program gfbug4\n+      implicit none\n+\n+      integer      strlen\n+      parameter    (strlen = 4)\n+\n+      integer      iunit \n+      character    string *4\n+\n+      iunit = 99\n+      open (UNIT=iunit,FORM='unformatted',ACCESS='direct',RECL=strlen)\n+      write (iunit, rec=1) 'ABCD'\n+      read (iunit, rec=1) string\n+      close (iunit)\n+      if (string.ne.'ABCD') call abort\n+\n+      open (UNIT=iunit,FORM='unformatted',ACCESS='direct',STATUS='scratch',RECL=strlen)\n+      write (iunit, rec=1) 'ABCD'\n+      read (iunit, rec=1) string\n+      close (iunit)\n+      if (string.ne.'ABCD') call abort\n+      end"}, {"sha": "e0039ec0ac98f4b17574cb0ee4511115b8ef7f9b", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55948b693ed0cde602e64e7f670450a0e5e96b93/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55948b693ed0cde602e64e7f670450a0e5e96b93/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=55948b693ed0cde602e64e7f670450a0e5e96b93", "patch": "@@ -1,3 +1,12 @@\n+2004-08-27  Bud Davis  <bdavis9659@comcast.net>\n+\n+\tPR fortran/16597\n+\t* io/io.h: created typedef for unit_mode.\n+\t* io/io.h (gfc_unit): added mode to unit structure.\n+\t* io/transfer.c (data_transfer_init): flush if a write then\n+\tread is done on a unit (direct access files).\n+\t* io/rewind.c (st_rewind): Used unit mode instead of global.\n+\n 2004-08-24  Bud Davis  <bdavis9659@comcast.net>\n \n \tPR fortran/17143\t"}, {"sha": "d2c15af7ec76621e11e0c8ac8b8dd9a85c659e05", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55948b693ed0cde602e64e7f670450a0e5e96b93/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55948b693ed0cde602e64e7f670450a0e5e96b93/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=55948b693ed0cde602e64e7f670450a0e5e96b93", "patch": "@@ -144,7 +144,9 @@ typedef enum\n { ADVANCE_YES, ADVANCE_NO, ADVANCE_UNSPECIFIED }\n unit_advance;\n \n-\n+typedef enum\n+{READING, WRITING}\n+unit_mode;\n \n /* Statement parameters.  These are all the things that can appear in\n    an I/O statement.  Some are inputs and some are outputs, but none\n@@ -271,6 +273,7 @@ typedef struct gfc_unit\n   { NO_ENDFILE, AT_ENDFILE, AFTER_ENDFILE }\n   endfile;\n \n+  unit_mode  mode;\n   unit_flags flags;\n   gfc_offset recl, last_record, maxrec, bytes_left;\n \n@@ -299,7 +302,7 @@ typedef struct\n   gfc_unit *unit_root;\n   int seen_dollar;\n \n-  enum {READING, WRITING} mode;\n+  unit_mode  mode;\n \n   unit_blank blank_status;\n   enum {SIGN_S, SIGN_SS, SIGN_SP} sign_status;"}, {"sha": "d9758a6d5ec8c6b4921ee0b77c0c3d3ab646d215", "filename": "libgfortran/io/rewind.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55948b693ed0cde602e64e7f670450a0e5e96b93/libgfortran%2Fio%2Frewind.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55948b693ed0cde602e64e7f670450a0e5e96b93/libgfortran%2Fio%2Frewind.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Frewind.c?ref=55948b693ed0cde602e64e7f670450a0e5e96b93", "patch": "@@ -40,7 +40,7 @@ st_rewind (void)\n \t\t\t\"Cannot REWIND a file opened for DIRECT access\");\n       else\n \t{\n-          if (g.mode==WRITING)\n+          if (u->mode==WRITING)\n             struncate(u->s);\n \t  u->last_record = 0;\n \t  if (sseek (u->s, 0) == FAILURE)"}, {"sha": "3800d0b90cb750bd9ce915c93614d65c39614482", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55948b693ed0cde602e64e7f670450a0e5e96b93/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55948b693ed0cde602e64e7f670450a0e5e96b93/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=55948b693ed0cde602e64e7f670450a0e5e96b93", "patch": "@@ -1044,13 +1044,19 @@ data_transfer_init (int read_flag)\n \t  return;\n \t}\n \n-      /* Position the file.  */\n+      /* Check to see if we might be reading what we wrote before  */\n+\n+      if (g.mode == READING && current_unit->mode  == WRITING)\n+         flush(current_unit->s);\n \n+      /* Position the file.  */\n       if (sseek (current_unit->s,\n                (ioparm.rec - 1) * current_unit->recl) == FAILURE)\n \tgenerate_error (ERROR_OS, NULL);\n     }\n \n+  current_unit->mode = g.mode;\n+\n   /* Set the initial value of flags.  */\n \n   g.blank_status = current_unit->flags.blank;"}]}