{"sha": "e34d07f25561ccf841f1e1d3f13aa412525ea999", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM0ZDA3ZjI1NTYxY2NmODQxZjFlMWQzZjEzYWE0MTI1MjVlYTk5OQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-05-17T22:21:35Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-05-17T22:21:35Z"}, "message": "builtins.c (validate_arglist): Eliminate libiberty VA_ macros, always use stdarg.\n\ngcc:\n\t* builtins.c (validate_arglist): Eliminate libiberty VA_ macros,\n\talways use stdarg.\n\t* c-errors.c (pedwarn_c99): Likewise.\n\t* c-format.c (status_warning): Likewise.\n\t* c-semantics.c (build_stmt): Likewise.\n\t* calls.c (emit_library_call, emit_library_call_value): Likewise.\n\t* collect2.c (notice, fatal_perror, fatal, error): Likewise.\n\t* cpperror.c (cpp_error, cpp_error_with_line): Likewise.\n\t* diagnostic.c (build_message_string, output_printf,\n\toutput_verbatim, verbatim, inform, warning, pedwarn, error, sorry,\n\tfatal_error, internal_error, warning_with_decl, pedwarn_with_decl,\n\terror_with_decl, fnotice): Likewise.\n\t* dwarf2asm.c (dw2_asm_output_data, dw2_asm_output_delta,\n\tdw2_asm_output_offset, dw2_asm_output_pcrel, dw2_asm_output_addr,\n\tdw2_asm_output_addr_rtx, dw2_asm_output_nstring,\n\tdw2_asm_output_data_uleb128, dw2_asm_output_data_sleb128,\n\tdw2_asm_output_delta_uleb128, dw2_asm_output_delta_sleb128,\n\tdw2_asm_output_encoded_addr_rtx): Likewise.\n\t* emit-rtl.c (gen_rtx, gen_rtvec): Likewise.\n\t* errors.c (warning, error, fatal, internal_error): Likewise.\n\t* final.c (output_operand_lossage, asm_fprintf): Likewise.\n\t* fix-header.c (fatal): Likewise.\n\t* gcc.c (fatal, error, notice): Likewise.\n\t* gcov.c (fnotice): Likewise.\n\t* genattrtab.c (attr_rtx, attr_printf): Likewise.\n\t* gengtype.c (error_at_line, xasprintf, oprintf): Likewise.\n\t* gensupport.c (message_with_line): Likewise.\n\t* mips-tfile.c (fatal, error): Likewise.\n\t* protoize.c (notice): Likewise.\n\t* ra-debug.c (ra_debug_msg): Likewise.\n\t* read-rtl.c (fatal_with_file_and_line): Likewise.\n\t* rtl-error.c (error_for_asm, warning_for_asm): Likewise.\n\t* tree.c (build, build_nt, build_function_type_list): Likewise.\n\ncp:\n\t* error.c (cp_error_at, cp_warning_at, cp_pedwarn_at): Eliminate\n\tlibiberty VA_ macros, always use stdarg.\n\t* rtti.c (create_pseudo_type_info): Likewise.\n\t* tree.c (build_min_nt, build_min): Likewise.\n\nFrom-SVN: r66919", "tree": {"sha": "719ac752ade2a25c0a0f01395e94e785860a6b61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/719ac752ade2a25c0a0f01395e94e785860a6b61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e34d07f25561ccf841f1e1d3f13aa412525ea999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e34d07f25561ccf841f1e1d3f13aa412525ea999", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e34d07f25561ccf841f1e1d3f13aa412525ea999", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e34d07f25561ccf841f1e1d3f13aa412525ea999/comments", "author": null, "committer": null, "parents": [{"sha": "7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3"}], "stats": {"total": 830, "additions": 408, "deletions": 422}, "files": [{"sha": "bd643b501ab0cda7d612dcbeb3748b280180b829", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -1,3 +1,39 @@\n+2003-05-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (validate_arglist): Eliminate libiberty VA_ macros,\n+\talways use stdarg.\n+\t* c-errors.c (pedwarn_c99): Likewise.\n+\t* c-format.c (status_warning): Likewise.\n+\t* c-semantics.c (build_stmt): Likewise.\n+\t* calls.c (emit_library_call, emit_library_call_value): Likewise.\n+\t* collect2.c (notice, fatal_perror, fatal, error): Likewise.\n+\t* cpperror.c (cpp_error, cpp_error_with_line): Likewise.\n+\t* diagnostic.c (build_message_string, output_printf,\n+\toutput_verbatim, verbatim, inform, warning, pedwarn, error, sorry,\n+\tfatal_error, internal_error, warning_with_decl, pedwarn_with_decl,\n+\terror_with_decl, fnotice): Likewise.\n+\t* dwarf2asm.c (dw2_asm_output_data, dw2_asm_output_delta,\n+\tdw2_asm_output_offset, dw2_asm_output_pcrel, dw2_asm_output_addr,\n+\tdw2_asm_output_addr_rtx, dw2_asm_output_nstring,\n+\tdw2_asm_output_data_uleb128, dw2_asm_output_data_sleb128,\n+\tdw2_asm_output_delta_uleb128, dw2_asm_output_delta_sleb128,\n+\tdw2_asm_output_encoded_addr_rtx): Likewise.\n+\t* emit-rtl.c (gen_rtx, gen_rtvec): Likewise.\n+\t* errors.c (warning, error, fatal, internal_error): Likewise.\n+\t* final.c (output_operand_lossage, asm_fprintf): Likewise.\n+\t* fix-header.c (fatal): Likewise.\n+\t* gcc.c (fatal, error, notice): Likewise.\n+\t* gcov.c (fnotice): Likewise.\n+\t* genattrtab.c (attr_rtx, attr_printf): Likewise.\n+\t* gengtype.c (error_at_line, xasprintf, oprintf): Likewise.\n+\t* gensupport.c (message_with_line): Likewise.\n+\t* mips-tfile.c (fatal, error): Likewise.\n+\t* protoize.c (notice): Likewise.\n+\t* ra-debug.c (ra_debug_msg): Likewise.\n+\t* read-rtl.c (fatal_with_file_and_line): Likewise.\n+\t* rtl-error.c (error_for_asm, warning_for_asm): Likewise.\n+\t* tree.c (build, build_nt, build_function_type_list): Likewise.\n+\n 2003-05-17  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* defaults.h (TARGET_CPU_CPP_BUILTINS, CPP_PREDEFINES): Remove."}, {"sha": "c3965e927ecddc9406033edbbdfd0fb05a949ac2", "filename": "gcc/builtins.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -5368,13 +5368,13 @@ build_function_call_expr (fn, arglist)\n    ellipses, otherwise the last specifier must be a VOID_TYPE.  */\n \n static int\n-validate_arglist VPARAMS ((tree arglist, ...))\n+validate_arglist (tree arglist, ...)\n {\n   enum tree_code code;\n   int res = 0;\n-\n-  VA_OPEN (ap, arglist);\n-  VA_FIXEDARG (ap, tree, arglist);\n+  va_list ap;\n+  \n+  va_start (ap, arglist);\n \n   do\n     {\n@@ -5406,7 +5406,7 @@ validate_arglist VPARAMS ((tree arglist, ...))\n   /* We need gotos here since we can only have one VA_CLOSE in a\n      function.  */\n  end: ;\n-  VA_CLOSE (ap);\n+  va_end (ap);\n \n   return res;\n }"}, {"sha": "de24a04afc6fe01cb77d2b5d60faf95169edb6f5", "filename": "gcc/c-errors.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fc-errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fc-errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-errors.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -32,14 +32,14 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Issue an ISO C99 pedantic warning MSGID.  */\n \n void\n-pedwarn_c99 VPARAMS ((const char *msgid, ...))\n+pedwarn_c99 (const char *msgid, ...)\n {\n   diagnostic_info diagnostic;\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n+  va_list ap;\n+  \n+  va_start (ap, msgid);\n   diagnostic_set_info (&diagnostic, msgid, &ap, input_filename, input_line,\n                        flag_isoc99 ? pedantic_error_kind () : DK_WARNING);\n   report_diagnostic (&diagnostic);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }"}, {"sha": "fd9b200398a9429a333c630d51d3afcf8e75b064", "filename": "gcc/c-format.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -996,13 +996,12 @@ check_function_format (status, attrs, params)\n    it warns as usual by replicating the innards of the warning\n    function from diagnostic.c.  */\n static void\n-status_warning VPARAMS ((int *status, const char *msgid, ...))\n+status_warning (int *status, const char *msgid, ...)\n {\n   diagnostic_info diagnostic ;\n-\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, int *, status);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_list ap;\n+  \n+  va_start (ap, msgid);\n \n   if (status)\n     *status = 1;\n@@ -1014,7 +1013,7 @@ status_warning VPARAMS ((int *status, const char *msgid, ...))\n       report_diagnostic (&diagnostic);\n     }\n \n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* Variables used by the checking of $ operand number formats.  */"}, {"sha": "a5cf7754a60d79e4592e74aebcfa9295cade9161", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -193,14 +193,14 @@ finish_stmt_tree (t)\n    in the grammar.  */\n \n tree\n-build_stmt VPARAMS ((enum tree_code code, ...))\n+build_stmt (enum tree_code code, ...)\n {\n   tree t;\n   int length;\n   int i;\n-\n-  VA_OPEN (p, code);\n-  VA_FIXEDARG (p, enum tree_code, code);\n+  va_list p;\n+  \n+  va_start (p, code);\n \n   t = make_node (code);\n   length = TREE_CODE_LENGTH (code);\n@@ -209,7 +209,7 @@ build_stmt VPARAMS ((enum tree_code code, ...))\n   for (i = 0; i < length; i++)\n     TREE_OPERAND (t, i) = va_arg (p, tree);\n \n-  VA_CLOSE (p);\n+  va_end (p);\n   return t;\n }\n "}, {"sha": "5b4fbc9b94f1e410bd51c84c1008a325bfb3a2d0", "filename": "gcc/calls.c", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -4171,18 +4171,14 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n    or other LCT_ value for other types of library calls.  */\n \n void\n-emit_library_call VPARAMS((rtx orgfun, enum libcall_type fn_type,\n-\t\t\t   enum machine_mode outmode, int nargs, ...))\n+emit_library_call (rtx orgfun, enum libcall_type fn_type,\n+\t\t   enum machine_mode outmode, int nargs, ...)\n {\n-  VA_OPEN (p, nargs);\n-  VA_FIXEDARG (p, rtx, orgfun);\n-  VA_FIXEDARG (p, int, fn_type);\n-  VA_FIXEDARG (p, enum machine_mode, outmode);\n-  VA_FIXEDARG (p, int, nargs);\n-\n+  va_list p;\n+  \n+  va_start (p, nargs);\n   emit_library_call_value_1 (0, orgfun, NULL_RTX, fn_type, outmode, nargs, p);\n-\n-  VA_CLOSE (p);\n+  va_end (p);\n }\n \f\n /* Like emit_library_call except that an extra argument, VALUE,\n@@ -4194,23 +4190,17 @@ emit_library_call VPARAMS((rtx orgfun, enum libcall_type fn_type,\n    If VALUE is nonzero, VALUE is returned.  */\n \n rtx\n-emit_library_call_value VPARAMS((rtx orgfun, rtx value,\n-\t\t\t\t enum libcall_type fn_type,\n-\t\t\t\t enum machine_mode outmode, int nargs, ...))\n+emit_library_call_value (rtx orgfun, rtx value,\n+\t\t\t enum libcall_type fn_type,\n+\t\t\t enum machine_mode outmode, int nargs, ...)\n {\n   rtx result;\n+  va_list p;\n   \n-  VA_OPEN (p, nargs);\n-  VA_FIXEDARG (p, rtx, orgfun);\n-  VA_FIXEDARG (p, rtx, value);\n-  VA_FIXEDARG (p, int, fn_type);\n-  VA_FIXEDARG (p, enum machine_mode, outmode);\n-  VA_FIXEDARG (p, int, nargs);\n-\n+  va_start (p, nargs);\n   result = emit_library_call_value_1 (1, orgfun, value, fn_type, outmode,\n \t\t\t\t      nargs, p);\n-\n-  VA_CLOSE (p);\n+  va_end (p);\n \n   return result;\n }"}, {"sha": "71229be5cc9ab8c326564cd08e9c25ae4dc7457e", "filename": "gcc/collect2.c", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -360,61 +360,60 @@ collect_exit (status)\n \f\n /* Notify user of a non-error.  */\n void\n-notice VPARAMS ((const char *msgid, ...))\n+notice (const char *msgid, ...)\n {\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n+  va_list ap;\n+  \n+  va_start (ap, msgid);\n   vfprintf (stderr, _(msgid), ap);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* Die when sys call fails.  */\n \n void\n-fatal_perror VPARAMS ((const char * msgid, ...))\n+fatal_perror (const char * msgid, ...)\n {\n   int e = errno;\n-\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n+  va_list ap;\n+  \n+  va_start (ap, msgid);\n   fprintf (stderr, \"collect2: \");\n   vfprintf (stderr, _(msgid), ap);\n   fprintf (stderr, \": %s\\n\", xstrerror (e));\n-  VA_CLOSE (ap);\n+  va_end (ap);\n \n   collect_exit (FATAL_EXIT_CODE);\n }\n \n /* Just die.  */\n \n void\n-fatal VPARAMS ((const char * msgid, ...))\n+fatal (const char * msgid, ...)\n {\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_list ap;\n   \n+  va_start (ap, msgid);\n   fprintf (stderr, \"collect2: \");\n   vfprintf (stderr, _(msgid), ap);\n   fprintf (stderr, \"\\n\");\n-  VA_CLOSE (ap);\n+  va_end (ap);\n \n   collect_exit (FATAL_EXIT_CODE);\n }\n \n /* Write error message.  */\n \n void\n-error VPARAMS ((const char * msgid, ...))\n+error (const char * msgid, ...)\n {\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n+  va_list ap;\n+  \n+  va_start (ap, msgid);\n   fprintf (stderr, \"collect2: \");\n   vfprintf (stderr, _(msgid), ap);\n   fprintf (stderr, \"\\n\");\n-  VA_CLOSE(ap);\n+  va_end(ap);\n }\n \n /* In case obstack is linked in, and abort is defined to fancy_abort,"}, {"sha": "b269645f4b4bfc4758bd104da8ded70f657374bd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -1,3 +1,10 @@\n+2003-05-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* error.c (cp_error_at, cp_warning_at, cp_pedwarn_at): Eliminate\n+\tlibiberty VA_ macros, always use stdarg.\n+\t* rtti.c (create_pseudo_type_info): Likewise.\n+\t* tree.c (build_min_nt, build_min): Likewise.\n+\n 2003-05-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* ptree.c (cxx_print_type, cxx_print_xnode): Use string"}, {"sha": "21a87d851d345400a9cbbc5fe7419b7021a801ee", "filename": "gcc/cp/error.c", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -2607,62 +2607,56 @@ locate_error (const char *msgid, va_list ap)\n \n \n void\n-cp_error_at VPARAMS ((const char *msgid, ...))\n+cp_error_at (const char *msgid, ...)\n {\n   tree here;\n   diagnostic_info diagnostic;\n+  va_list ap;\n \n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_start (ap, msgid);\n   here = locate_error (msgid, ap);\n-  VA_CLOSE (ap);\n-\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_end (ap);\n \n+  va_start (ap, msgid);\n   diagnostic_set_info (&diagnostic, msgid, &ap,\n                        cp_file_of (here), cp_line_of (here), DK_ERROR);\n   report_diagnostic (&diagnostic);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n void\n-cp_warning_at VPARAMS ((const char *msgid, ...))\n+cp_warning_at (const char *msgid, ...)\n {\n   tree here;\n   diagnostic_info diagnostic;\n+  va_list ap;\n \n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_start (ap, msgid);\n   here = locate_error (msgid, ap);\n-  VA_CLOSE (ap);\n-\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_end (ap);\n \n+  va_start (ap, msgid);\n   diagnostic_set_info (&diagnostic, msgid, &ap,\n                        cp_file_of (here), cp_line_of (here), DK_WARNING);\n   report_diagnostic (&diagnostic);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n void\n-cp_pedwarn_at VPARAMS ((const char *msgid, ...))\n+cp_pedwarn_at (const char *msgid, ...)\n {\n   tree here;\n   diagnostic_info diagnostic;\n+  va_list ap;\n \n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_start (ap, msgid);\n   here = locate_error (msgid, ap);\n-  VA_CLOSE (ap);\n-\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_end (ap);\n \n+  va_start (ap, msgid);\n   diagnostic_set_info (&diagnostic, msgid, &ap,\n                        cp_file_of (here), cp_line_of (here),\n                        pedantic_error_kind());\n   report_diagnostic (&diagnostic);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }"}, {"sha": "930036351b5ec198e449d6863a4ce23d35a5397b", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -1124,10 +1124,9 @@ create_pseudo_type_info (const char *real_name, int ident, ...)\n   tree fields;\n   tree field_decl;\n   tree result;\n+  va_list ap;\n \n-  VA_OPEN (ap, ident);\n-  VA_FIXEDARG (ap, const char *, real_name);\n-  VA_FIXEDARG (ap, int, ident);\n+  va_start (ap, ident);\n \n   /* Generate the pseudo type name.  */\n   pseudo_name = (char *)alloca (strlen (real_name) + 30);\n@@ -1156,7 +1155,7 @@ create_pseudo_type_info (const char *real_name, int ident, ...)\n   TINFO_PSEUDO_TYPE (result) =\n     cp_build_qualified_type (pseudo_type, TYPE_QUAL_CONST);\n   \n-  VA_CLOSE (ap);\n+  va_end (ap);\n   return result;\n }\n "}, {"sha": "5ce3500915a3fa60394d092ce2b1ed480c6a7a2e", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -1500,14 +1500,14 @@ break_out_target_exprs (t)\n    current line number.  */\n \n tree\n-build_min_nt VPARAMS ((enum tree_code code, ...))\n+build_min_nt (enum tree_code code, ...)\n {\n   register tree t;\n   register int length;\n   register int i;\n+  va_list p;\n \n-  VA_OPEN (p, code);\n-  VA_FIXEDARG (p, enum tree_code, code);\n+  va_start (p, code);\n \n   t = make_node (code);\n   length = TREE_CODE_LENGTH (code);\n@@ -1519,23 +1519,22 @@ build_min_nt VPARAMS ((enum tree_code code, ...))\n       TREE_OPERAND (t, i) = x;\n     }\n \n-  VA_CLOSE (p);\n+  va_end (p);\n   return t;\n }\n \n /* Similar to `build', except we set TREE_COMPLEXITY to the current\n    line-number.  */\n \n tree\n-build_min VPARAMS ((enum tree_code code, tree tt, ...))\n+build_min (enum tree_code code, tree tt, ...)\n {\n   register tree t;\n   register int length;\n   register int i;\n+  va_list p;\n \n-  VA_OPEN (p, tt);\n-  VA_FIXEDARG (p, enum tree_code, code);\n-  VA_FIXEDARG (p, tree, tt);\n+  va_start (p, tt);\n \n   t = make_node (code);\n   length = TREE_CODE_LENGTH (code);\n@@ -1548,7 +1547,7 @@ build_min VPARAMS ((enum tree_code code, tree tt, ...))\n       TREE_OPERAND (t, i) = x;\n     }\n \n-  VA_CLOSE (p);\n+  va_end (p);\n   return t;\n }\n "}, {"sha": "9f5a5397f44ccea6f1daf8f11c31652e946a7fab", "filename": "gcc/cpperror.c", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -128,14 +128,12 @@ _cpp_begin_message (pfile, code, line, column)\n \n /* Print an error at the location of the previously lexed token.  */\n void\n-cpp_error VPARAMS ((cpp_reader * pfile, int level, const char *msgid, ...))\n+cpp_error (cpp_reader * pfile, int level, const char *msgid, ...)\n {\n   unsigned int line, column;\n-\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, cpp_reader *, pfile);\n-  VA_FIXEDARG (ap, int, level);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_list ap;\n+  \n+  va_start (ap, msgid);\n \n   if (pfile->buffer)\n     {\n@@ -159,26 +157,23 @@ cpp_error VPARAMS ((cpp_reader * pfile, int level, const char *msgid, ...))\n   if (_cpp_begin_message (pfile, level, line, column))\n     v_message (msgid, ap);\n \n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* Print an error at a specific location.  */\n void\n-cpp_error_with_line VPARAMS ((cpp_reader *pfile, int level,\n-\t\t\t      unsigned int line, unsigned int column,\n-\t\t\t      const char *msgid, ...))\n+cpp_error_with_line (cpp_reader *pfile, int level,\n+\t\t     unsigned int line, unsigned int column,\n+\t\t     const char *msgid, ...)\n {\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, cpp_reader *, pfile);\n-  VA_FIXEDARG (ap, int, level);\n-  VA_FIXEDARG (ap, unsigned int, line);\n-  VA_FIXEDARG (ap, unsigned int, column);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_list ap;\n+  \n+  va_start (ap, msgid);\n \n   if (_cpp_begin_message (pfile, level, line, column))\n     v_message (msgid, ap);\n \n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n void"}, {"sha": "6d254337ce740908653261423ed2ae253cbe2918", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 62, "deletions": 74, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -636,16 +636,14 @@ output_format (buffer, text)\n /* Return a malloc'd string containing MSG formatted a la printf.  The\n    caller is responsible for freeing the memory.  */\n static char *\n-build_message_string VPARAMS ((const char *msg, ...))\n+build_message_string (const char *msg, ...)\n {\n   char *str;\n+  va_list ap;\n \n-  VA_OPEN (ap, msg);\n-  VA_FIXEDARG (ap, const char *, msg);\n-\n+  va_start (ap, msg);\n   vasprintf (&str, msg, ap);\n-\n-  VA_CLOSE (ap);\n+  va_end (ap);\n \n   return str;\n }\n@@ -660,18 +658,17 @@ file_name_as_prefix (f)\n \n /* Format a message into BUFFER a la printf.  */\n void\n-output_printf VPARAMS ((struct output_buffer *buffer, const char *msgid, ...))\n+output_printf (struct output_buffer *buffer, const char *msgid, ...)\n {\n   text_info text;\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, output_buffer *, buffer);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_list ap;\n \n+  va_start (ap, msgid);\n   text.err_no = errno;\n   text.args_ptr = &ap;\n   text.format_spec = _(msgid);\n   output_format (buffer, &text);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* Print a message relevant to the given DECL.  */\n@@ -756,18 +753,17 @@ output_do_verbatim (buffer, text)\n \n /* Output MESSAGE verbatim into BUFFER.  */\n void\n-output_verbatim VPARAMS ((output_buffer *buffer, const char *msgid, ...))\n+output_verbatim (output_buffer *buffer, const char *msgid, ...)\n {\n   text_info text;\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, output_buffer *, buffer);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_list ap;\n \n+  va_start (ap, msgid);\n   text.err_no = errno;\n   text.args_ptr = &ap;\n   text.format_spec = _(msgid);\n   output_do_verbatim (buffer, &text);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n \f\n@@ -1184,50 +1180,48 @@ trim_filename (name)\n /* Text to be emitted verbatim to the error message stream; this\n    produces no prefix and disables line-wrapping.  Use rarely.  */\n void\n-verbatim VPARAMS ((const char *msgid, ...))\n+verbatim (const char *msgid, ...)\n {\n   text_info text;\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_list ap;\n \n+  va_start (ap, msgid);\n   text.err_no = errno;\n   text.args_ptr = &ap;\n   text.format_spec = _(msgid);\n   output_do_verbatim (&global_dc->buffer, &text);\n   output_buffer_to_stream (&global_dc->buffer);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* An informative note.  Use this for additional details on an error\n    message.  */\n void\n-inform VPARAMS ((const char *msgid, ...))\n+inform (const char *msgid, ...)\n {\n   diagnostic_info diagnostic;\n+  va_list ap;\n \n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n+  va_start (ap, msgid);\n   diagnostic_set_info (&diagnostic, msgid, &ap, input_filename, input_line,\n                        DK_NOTE);\n   report_diagnostic (&diagnostic);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* A warning.  Use this for code which is correct according to the\n    relevant language specification but is likely to be buggy anyway.  */\n void\n-warning VPARAMS ((const char *msgid, ...))\n+warning (const char *msgid, ...)\n {\n   diagnostic_info diagnostic;\n+  va_list ap;\n \n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n+  va_start (ap, msgid);\n   diagnostic_set_info (&diagnostic, msgid, &ap, input_filename, input_line,\n                        DK_WARNING);\n   report_diagnostic (&diagnostic);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* A \"pedantic\" warning: issues a warning unless -pedantic-errors was\n@@ -1239,66 +1233,63 @@ warning VPARAMS ((const char *msgid, ...))\n    of the -pedantic command-line switch.  To get a warning enabled\n    only with that switch, write \"if (pedantic) pedwarn (...);\"  */\n void\n-pedwarn VPARAMS ((const char *msgid, ...))\n+pedwarn (const char *msgid, ...)\n {\n   diagnostic_info diagnostic;\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_list ap;\n \n+  va_start (ap, msgid);\n   diagnostic_set_info (&diagnostic, msgid, &ap, input_filename, input_line,\n                        pedantic_error_kind ());\n   report_diagnostic (&diagnostic);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* A hard error: the code is definitely ill-formed, and an object file\n    will not be produced.  */\n void\n-error VPARAMS ((const char *msgid, ...))\n+error (const char *msgid, ...)\n {\n   diagnostic_info diagnostic;\n+  va_list ap;\n \n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n+  va_start (ap, msgid);\n   diagnostic_set_info (&diagnostic, msgid, &ap, input_filename, input_line,\n                        DK_ERROR);\n   report_diagnostic (&diagnostic);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* \"Sorry, not implemented.\"  Use for a language feature which is\n    required by the relevant specification but not implemented by GCC.\n    An object file will not be produced.  */\n void\n-sorry VPARAMS ((const char *msgid, ...))\n+sorry (const char *msgid, ...)\n {\n   diagnostic_info diagnostic;\n+  va_list ap;\n \n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n+  va_start (ap, msgid);\n   diagnostic_set_info (&diagnostic, msgid, &ap, input_filename, input_line,\n \t\t       DK_SORRY);\n   report_diagnostic (&diagnostic);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* An error which is severe enough that we make no attempt to\n    continue.  Do not use this for internal consistency checks; that's\n    internal_error.  Use of this function should be rare.  */\n void\n-fatal_error VPARAMS ((const char *msgid, ...))\n+fatal_error (const char *msgid, ...)\n {\n   diagnostic_info diagnostic;\n+  va_list ap;\n \n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n+  va_start (ap, msgid);\n   diagnostic_set_info (&diagnostic, msgid, &ap, input_filename, input_line,\n                        DK_FATAL);\n   report_diagnostic (&diagnostic);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n \n   /* NOTREACHED */\n   real_abort ();\n@@ -1309,17 +1300,16 @@ fatal_error VPARAMS ((const char *msgid, ...))\n    a more specific message, or some other good reason, you should use\n    abort () instead of calling this function directly.  */\n void\n-internal_error VPARAMS ((const char *msgid, ...))\n+internal_error (const char *msgid, ...)\n {\n   diagnostic_info diagnostic;\n+  va_list ap;\n \n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n+  va_start (ap, msgid);\n   diagnostic_set_info (&diagnostic, msgid, &ap, input_filename, input_line,\n                        DK_ICE);\n   report_diagnostic (&diagnostic);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n \n   /* NOTREACHED */\n   real_abort ();\n@@ -1329,12 +1319,12 @@ internal_error VPARAMS ((const char *msgid, ...))\n    DECL node.  These are deprecated.  */\n \n void\n-warning_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n+warning_with_decl (tree decl, const char *msgid, ...)\n {\n   diagnostic_info diagnostic;\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, tree, decl);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_list ap;\n+\n+  va_start (ap, msgid);\n \n   /* Do not issue a warning about a decl which came from a system header,\n      unless -Wsystem-headers.  */\n@@ -1345,16 +1335,16 @@ warning_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n                        DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl),\n                        DK_WARNING);\n   diagnostic_for_decl (global_dc, &diagnostic, decl);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n void\n-pedwarn_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n+pedwarn_with_decl (tree decl, const char *msgid, ...)\n {\n   diagnostic_info diagnostic;\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, tree, decl);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_list ap;\n+\n+  va_start (ap, msgid);\n \n   /* Do not issue a warning about a decl which came from a system header,\n      unless -Wsystem-headers.  */\n@@ -1366,22 +1356,21 @@ pedwarn_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n                        pedantic_error_kind ());\n   diagnostic_for_decl (global_dc, &diagnostic, decl);\n \n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n void\n-error_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n+error_with_decl (tree decl, const char *msgid, ...)\n {\n   diagnostic_info diagnostic;\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, tree, decl);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_list ap;\n \n+  va_start (ap, msgid);\n   diagnostic_set_info (&diagnostic, msgid, &ap,\n                        DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl),\n                        DK_ERROR);\n   diagnostic_for_decl (global_dc, &diagnostic, decl);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \f\n /* Special case error functions.  Most are implemented in terms of the\n@@ -1390,14 +1379,13 @@ error_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n /* Print a diagnostic MSGID on FILE.  This is just fprintf, except it\n    runs its second argument through gettext.  */\n void\n-fnotice VPARAMS ((FILE *file, const char *msgid, ...))\n+fnotice (FILE *file, const char *msgid, ...)\n {\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, FILE *, file);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_list ap;\n \n+  va_start (ap, msgid);\n   vfprintf (file, _(msgid), ap);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* Warn about a use of an identifier which was marked deprecated.  */"}, {"sha": "c2ca9166f460ca699359d31044fda5ab49b8ec7b", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 74, "deletions": 88, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -67,13 +67,12 @@ dw2_assemble_integer (size, x)\n /* Output an immediate constant in a given size.  */\n \n void\n-dw2_asm_output_data VPARAMS ((int size, unsigned HOST_WIDE_INT value,\n-\t\t\t      const char *comment, ...))\n+dw2_asm_output_data (int size, unsigned HOST_WIDE_INT value,\n+\t\t     const char *comment, ...)\n {\n-  VA_OPEN (ap, comment);\n-  VA_FIXEDARG (ap, int, size);\n-  VA_FIXEDARG (ap, unsigned HOST_WIDE_INT, value);\n-  VA_FIXEDARG (ap, const char *, comment);\n+  va_list ap;\n+  \n+  va_start (ap, comment);\n \n   if (size * 8 < HOST_BITS_PER_WIDE_INT)\n     value &= ~(~(unsigned HOST_WIDE_INT) 0 << (size * 8));\n@@ -87,7 +86,7 @@ dw2_asm_output_data VPARAMS ((int size, unsigned HOST_WIDE_INT value,\n     }\n   fputc ('\\n', asm_out_file);\n \n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* Output the difference between two symbols in a given size.  */\n@@ -97,14 +96,12 @@ dw2_asm_output_data VPARAMS ((int size, unsigned HOST_WIDE_INT value,\n    symbol must appear after both symbols are defined.  */\n \n void\n-dw2_asm_output_delta VPARAMS ((int size, const char *lab1, const char *lab2,\n-\t\t\t       const char *comment, ...))\n+dw2_asm_output_delta (int size, const char *lab1, const char *lab2,\n+\t\t      const char *comment, ...)\n {\n-  VA_OPEN (ap, comment);\n-  VA_FIXEDARG (ap, int, size);\n-  VA_FIXEDARG (ap, const char *, lab1);\n-  VA_FIXEDARG (ap, const char *, lab2);\n-  VA_FIXEDARG (ap, const char *, comment);\n+  va_list ap;\n+  \n+  va_start (ap, comment);\n \n #ifdef ASM_OUTPUT_DWARF_DELTA\n   ASM_OUTPUT_DWARF_DELTA (asm_out_file, size, lab1, lab2);\n@@ -121,7 +118,7 @@ dw2_asm_output_delta VPARAMS ((int size, const char *lab1, const char *lab2,\n     }\n   fputc ('\\n', asm_out_file);\n \n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* Output a section-relative reference to a label.  In general this\n@@ -131,13 +128,12 @@ dw2_asm_output_delta VPARAMS ((int size, const char *lab1, const char *lab2,\n    Some targets have special relocations for this that we must use.  */\n \n void\n-dw2_asm_output_offset VPARAMS ((int size, const char *label,\n-\t\t\t       const char *comment, ...))\n+dw2_asm_output_offset (int size, const char *label,\n+\t\t       const char *comment, ...)\n {\n-  VA_OPEN (ap, comment);\n-  VA_FIXEDARG (ap, int, size);\n-  VA_FIXEDARG (ap, const char *, label);\n-  VA_FIXEDARG (ap, const char *, comment);\n+  va_list ap;\n+  \n+  va_start (ap, comment);\n \n #ifdef ASM_OUTPUT_DWARF_OFFSET\n   ASM_OUTPUT_DWARF_OFFSET (asm_out_file, size, label);\n@@ -152,21 +148,20 @@ dw2_asm_output_offset VPARAMS ((int size, const char *label,\n     }\n   fputc ('\\n', asm_out_file);\n \n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* Output a self-relative reference to a label, possibly in a\n    different section or object file.  */\n \n void\n-dw2_asm_output_pcrel VPARAMS ((int size ATTRIBUTE_UNUSED,\n-\t\t\t       const char *label ATTRIBUTE_UNUSED,\n-\t\t\t       const char *comment, ...))\n+dw2_asm_output_pcrel (int size ATTRIBUTE_UNUSED,\n+\t\t      const char *label ATTRIBUTE_UNUSED,\n+\t\t      const char *comment, ...)\n {\n-  VA_OPEN (ap, comment);\n-  VA_FIXEDARG (ap, int, size);\n-  VA_FIXEDARG (ap, const char *, label);\n-  VA_FIXEDARG (ap, const char *, comment);\n+  va_list ap;\n+  \n+  va_start (ap, comment);\n \n #ifdef ASM_OUTPUT_DWARF_PCREL\n   ASM_OUTPUT_DWARF_PCREL (asm_out_file, size, label);\n@@ -184,19 +179,18 @@ dw2_asm_output_pcrel VPARAMS ((int size ATTRIBUTE_UNUSED,\n     }\n   fputc ('\\n', asm_out_file);\n \n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* Output an absolute reference to a label.  */\n \n void\n-dw2_asm_output_addr VPARAMS ((int size, const char *label,\n-\t\t\t      const char *comment, ...))\n+dw2_asm_output_addr (int size, const char *label,\n+\t\t     const char *comment, ...)\n {\n-  VA_OPEN (ap, comment);\n-  VA_FIXEDARG (ap, int, size);\n-  VA_FIXEDARG (ap, const char *, label);\n-  VA_FIXEDARG (ap, const char *, comment);\n+  va_list ap;\n+  \n+  va_start (ap, comment);\n \n   dw2_assemble_integer (size, gen_rtx_SYMBOL_REF (Pmode, label));\n \n@@ -207,19 +201,18 @@ dw2_asm_output_addr VPARAMS ((int size, const char *label,\n     }\n   fputc ('\\n', asm_out_file);\n \n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* Similar, but use an RTX expression instead of a text label.  */\n \n void\n-dw2_asm_output_addr_rtx VPARAMS ((int size, rtx addr,\n-\t\t\t\t  const char *comment, ...))\n+dw2_asm_output_addr_rtx (int size, rtx addr,\n+\t\t\t const char *comment, ...)\n {\n-  VA_OPEN (ap, comment);\n-  VA_FIXEDARG (ap, int, size);\n-  VA_FIXEDARG (ap, rtx, addr);\n-  VA_FIXEDARG (ap, const char *, comment);\n+  va_list ap;\n+  \n+  va_start (ap, comment);\n \n   dw2_assemble_integer (size, addr);\n \n@@ -230,19 +223,17 @@ dw2_asm_output_addr_rtx VPARAMS ((int size, rtx addr,\n     }\n   fputc ('\\n', asm_out_file);\n \n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n void\n-dw2_asm_output_nstring VPARAMS ((const char *str, size_t orig_len,\n-\t\t\t\t const char *comment, ...))\n+dw2_asm_output_nstring (const char *str, size_t orig_len,\n+\t\t\tconst char *comment, ...)\n {\n   size_t i, len;\n+  va_list ap;\n \n-  VA_OPEN (ap, comment);\n-  VA_FIXEDARG (ap, const char *, str);\n-  VA_FIXEDARG (ap, size_t, orig_len);\n-  VA_FIXEDARG (ap, const char *, comment);\n+  va_start (ap, comment);\n \n   len = orig_len;\n \n@@ -277,7 +268,7 @@ dw2_asm_output_nstring VPARAMS ((const char *str, size_t orig_len,\n \tassemble_integer (const0_rtx, 1, BITS_PER_UNIT, 1);\n     }\n \n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \f\n \n@@ -506,12 +497,12 @@ eh_data_format_name (format)\n /* Output an unsigned LEB128 quantity.  */\n \n void\n-dw2_asm_output_data_uleb128 VPARAMS ((unsigned HOST_WIDE_INT value,\n-\t\t\t\t      const char *comment, ...))\n+dw2_asm_output_data_uleb128 (unsigned HOST_WIDE_INT value,\n+\t\t\t     const char *comment, ...)\n {\n-  VA_OPEN (ap, comment);\n-  VA_FIXEDARG (ap, unsigned HOST_WIDE_INT, value);\n-  VA_FIXEDARG (ap, const char *, comment);\n+  va_list ap;\n+  \n+  va_start (ap, comment);\n \n #ifdef HAVE_AS_LEB128\n   fprintf (asm_out_file, \"\\t.uleb128 \" HOST_WIDE_INT_PRINT_HEX , value);\n@@ -561,18 +552,18 @@ dw2_asm_output_data_uleb128 VPARAMS ((unsigned HOST_WIDE_INT value,\n #endif\n   fputc ('\\n', asm_out_file);\n \n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* Output a signed LEB128 quantity.  */\n \n void\n-dw2_asm_output_data_sleb128 VPARAMS ((HOST_WIDE_INT value,\n-\t\t\t\t      const char *comment, ...))\n+dw2_asm_output_data_sleb128 (HOST_WIDE_INT value,\n+\t\t\t     const char *comment, ...)\n {\n-  VA_OPEN (ap, comment);\n-  VA_FIXEDARG (ap, HOST_WIDE_INT, value);\n-  VA_FIXEDARG (ap, const char *, comment);\n+  va_list ap;\n+  \n+  va_start (ap, comment);\n \n #ifdef HAVE_AS_LEB128\n   fprintf (asm_out_file, \"\\t.sleb128 \" HOST_WIDE_INT_PRINT_DEC, value);\n@@ -625,18 +616,17 @@ dw2_asm_output_data_sleb128 VPARAMS ((HOST_WIDE_INT value,\n #endif\n   fputc ('\\n', asm_out_file);\n \n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n void\n-dw2_asm_output_delta_uleb128 VPARAMS ((const char *lab1 ATTRIBUTE_UNUSED,\n-\t\t\t\t       const char *lab2 ATTRIBUTE_UNUSED,\n-\t\t\t\t       const char *comment, ...))\n+dw2_asm_output_delta_uleb128 (const char *lab1 ATTRIBUTE_UNUSED,\n+\t\t\t      const char *lab2 ATTRIBUTE_UNUSED,\n+\t\t\t      const char *comment, ...)\n {\n-  VA_OPEN (ap, comment);\n-  VA_FIXEDARG (ap, const char *, lab1);\n-  VA_FIXEDARG (ap, const char *, lab2);\n-  VA_FIXEDARG (ap, const char *, comment);\n+  va_list ap;\n+\n+  va_start (ap, comment);\n \n #ifdef HAVE_AS_LEB128\n   fputs (\"\\t.uleb128 \", asm_out_file);\n@@ -654,18 +644,17 @@ dw2_asm_output_delta_uleb128 VPARAMS ((const char *lab1 ATTRIBUTE_UNUSED,\n     }\n   fputc ('\\n', asm_out_file);\n \n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n void\n-dw2_asm_output_delta_sleb128 VPARAMS ((const char *lab1 ATTRIBUTE_UNUSED,\n-\t\t\t\t       const char *lab2 ATTRIBUTE_UNUSED,\n-\t\t\t\t       const char *comment, ...))\n+dw2_asm_output_delta_sleb128 (const char *lab1 ATTRIBUTE_UNUSED,\n+\t\t\t      const char *lab2 ATTRIBUTE_UNUSED,\n+\t\t\t      const char *comment, ...)\n {\n-  VA_OPEN (ap, comment);\n-  VA_FIXEDARG (ap, const char *, lab1);\n-  VA_FIXEDARG (ap, const char *, lab2);\n-  VA_FIXEDARG (ap, const char *, comment);\n+  va_list ap;\n+  \n+  va_start (ap, comment);\n \n #ifdef HAVE_AS_LEB128\n   fputs (\"\\t.sleb128 \", asm_out_file);\n@@ -683,7 +672,7 @@ dw2_asm_output_delta_sleb128 VPARAMS ((const char *lab1 ATTRIBUTE_UNUSED,\n     }\n   fputc ('\\n', asm_out_file);\n \n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \f\n static rtx dw2_force_const_mem PARAMS ((rtx));\n@@ -795,16 +784,13 @@ dw2_output_indirect_constants ()\n /* Like dw2_asm_output_addr_rtx, but encode the pointer as directed.  */\n \n void\n-dw2_asm_output_encoded_addr_rtx VPARAMS ((int encoding,\n-\t\t\t\t\t  rtx addr,\n-\t\t\t\t\t  const char *comment, ...))\n+dw2_asm_output_encoded_addr_rtx (int encoding, rtx addr,\n+\t\t\t\t const char *comment, ...)\n {\n   int size;\n-\n-  VA_OPEN (ap, comment);\n-  VA_FIXEDARG (ap, int, encoding);\n-  VA_FIXEDARG (ap, rtx, addr);\n-  VA_FIXEDARG (ap, const char *, comment);\n+  va_list ap;\n+  \n+  va_start (ap, comment);\n \n   size = size_of_encoded_value (encoding);\n \n@@ -878,7 +864,7 @@ dw2_asm_output_encoded_addr_rtx VPARAMS ((int encoding,\n     }\n   fputc ('\\n', asm_out_file);\n \n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n #include \"gt-dwarf2asm.h\""}, {"sha": "1df50a75fec983725ea7284400f6d073985aadc0", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -713,15 +713,14 @@ gen_lowpart_SUBREG (mode, reg)\n \n /*VARARGS2*/\n rtx\n-gen_rtx VPARAMS ((enum rtx_code code, enum machine_mode mode, ...))\n+gen_rtx (enum rtx_code code, enum machine_mode mode, ...)\n {\n   int i;\t\t/* Array indices...\t\t\t*/\n   const char *fmt;\t/* Current rtx's format...\t\t*/\n   rtx rt_val;\t\t/* RTX to return to caller...\t\t*/\n+  va_list p;\n \n-  VA_OPEN (p, mode);\n-  VA_FIXEDARG (p, enum rtx_code, code);\n-  VA_FIXEDARG (p, enum machine_mode, mode);\n+  va_start (p, mode);\n \n   switch (code)\n     {\n@@ -795,7 +794,7 @@ gen_rtx VPARAMS ((enum rtx_code code, enum machine_mode mode, ...))\n       break;\n     }\n \n-  VA_CLOSE (p);\n+  va_end (p);\n   return rt_val;\n }\n \n@@ -807,13 +806,13 @@ gen_rtx VPARAMS ((enum rtx_code code, enum machine_mode mode, ...))\n \n /*VARARGS1*/\n rtvec\n-gen_rtvec VPARAMS ((int n, ...))\n+gen_rtvec (int n, ...)\n {\n   int i, save_n;\n   rtx *vector;\n+  va_list p;\n \n-  VA_OPEN (p, n);\n-  VA_FIXEDARG (p, int, n);\n+  va_start (p, n);\n \n   if (n == 0)\n     return NULL_RTVEC;\t\t/* Don't allocate an empty rtvec...\t*/\n@@ -825,7 +824,7 @@ gen_rtvec VPARAMS ((int n, ...))\n \n   /* The definition of VA_* in K&R C causes `n' to go out of scope.  */\n   save_n = n;\n-  VA_CLOSE (p);\n+  va_end (p);\n \n   return gen_rtvec_v (save_n, vector);\n }"}, {"sha": "4147b3fcf0ab300015433bf91a64e71771fd556e", "filename": "gcc/errors.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ferrors.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -39,29 +39,29 @@ int have_error = 0;\n /* Print a warning message - output produced, but there may be problems.  */\n \n void\n-warning VPARAMS ((const char *format, ...))\n+warning (const char *format, ...)\n {\n-  VA_OPEN (ap, format);\n-  VA_FIXEDARG (ap, const char *, format);\n-\n+  va_list ap;\n+  \n+  va_start (ap, format);\n   fprintf (stderr, \"%s: warning: \", progname);\n   vfprintf (stderr, format, ap);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n   fputc('\\n', stderr);\n }\n \n \n /* Print an error message - we keep going but the output is unusable.  */\n \n void\n-error VPARAMS ((const char *format, ...))\n+error (const char *format, ...)\n {\n-  VA_OPEN (ap, format);\n-  VA_FIXEDARG (ap, const char *, format);\n-\n+  va_list ap;\n+  \n+  va_start (ap, format);\n   fprintf (stderr, \"%s: \", progname);\n   vfprintf (stderr, format, ap);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n   fputc('\\n', stderr);\n \n   have_error = 1;\n@@ -71,29 +71,29 @@ error VPARAMS ((const char *format, ...))\n /* Fatal error - terminate execution immediately.  Does not return.  */\n \n void\n-fatal VPARAMS ((const char *format, ...))\n+fatal (const char *format, ...)\n {\n-  VA_OPEN (ap, format);\n-  VA_FIXEDARG (ap, const char *, format);\n-\n+  va_list ap;\n+  \n+  va_start (ap, format);\n   fprintf (stderr, \"%s: \", progname);\n   vfprintf (stderr, format, ap);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n   fputc('\\n', stderr);\n   exit (FATAL_EXIT_CODE);\n }\n \n /* Similar, but say we got an internal error.  */\n \n void\n-internal_error VPARAMS ((const char *format, ...))\n+internal_error (const char *format, ...)\n {\n-  VA_OPEN (ap, format);\n-  VA_FIXEDARG (ap, const char *, format);\n-\n+  va_list ap;\n+  \n+  va_start (ap, format);\n   fprintf (stderr, \"%s: Internal error: \", progname);\n   vfprintf (stderr, format, ap);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n   fputc ('\\n', stderr);\n   exit (FATAL_EXIT_CODE);\n }"}, {"sha": "1dc66c5400f5922943c25cda78d906f774ac4084", "filename": "gcc/final.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -2835,13 +2835,14 @@ alter_cond (cond)\n    In an `asm', it's the user's fault; otherwise, the compiler's fault.  */\n \n void\n-output_operand_lossage VPARAMS ((const char *msgid, ...))\n+output_operand_lossage (const char *msgid, ...)\n {\n   char *fmt_string;\n   char *new_message;\n   const char *pfx_str;\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_list ap;\n+  \n+  va_start (ap, msgid);\n \n   pfx_str = this_is_asm_operands ? _(\"invalid `asm': \") : \"output_operand: \";\n   asprintf (&fmt_string, \"%s%s\", pfx_str, _(msgid));\n@@ -2854,7 +2855,7 @@ output_operand_lossage VPARAMS ((const char *msgid, ...))\n \n   free (fmt_string);\n   free (new_message);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \f\n /* Output of assembler code from a template, and its subroutines.  */\n@@ -3376,14 +3377,13 @@ output_addr_const (file, x)\n    We handle alternate assembler dialects here, just like output_asm_insn.  */\n \n void\n-asm_fprintf VPARAMS ((FILE *file, const char *p, ...))\n+asm_fprintf (FILE *file, const char *p, ...)\n {\n   char buf[10];\n   char *q, c;\n-\n-  VA_OPEN (argptr, p);\n-  VA_FIXEDARG (argptr, FILE *, file);\n-  VA_FIXEDARG (argptr, const char *, p);\n+  va_list argptr;\n+  \n+  va_start (argptr, p);\n \n   buf[0] = '%';\n \n@@ -3531,7 +3531,7 @@ asm_fprintf VPARAMS ((FILE *file, const char *p, ...))\n       default:\n \tfputc (c, file);\n       }\n-  VA_CLOSE (argptr);\n+  va_end (argptr);\n }\n \f\n /* Split up a CONST_DOUBLE or integer constant rtx"}, {"sha": "6ec7851dc720626b59da5293fefb5651c809a8fa", "filename": "gcc/fix-header.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -1355,11 +1355,11 @@ v_fatal (str, ap)\n }\n \n static void\n-fatal VPARAMS ((const char *str, ...))\n+fatal (const char *str, ...)\n {\n-  VA_OPEN (ap, str);\n-  VA_FIXEDARG (ap, const char *, str);\n-\n+  va_list ap;\n+  \n+  va_start (ap, str);\n   v_fatal (str, ap);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }"}, {"sha": "a44ca213d6e2bf5bad9743e8111679697e0d8cc2", "filename": "gcc/gcc.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -6514,40 +6514,41 @@ fancy_abort ()\n /* Output an error message and exit */\n \n void\n-fatal VPARAMS ((const char *msgid, ...))\n+fatal (const char *msgid, ...)\n {\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n+  va_list ap;\n+  \n+  va_start (ap, msgid);\n \n   fprintf (stderr, \"%s: \", programname);\n   vfprintf (stderr, _(msgid), ap);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n   fprintf (stderr, \"\\n\");\n   delete_temp_files ();\n   exit (1);\n }\n \n void\n-error VPARAMS ((const char *msgid, ...))\n+error (const char *msgid, ...)\n {\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n+  va_list ap;\n+  \n+  va_start (ap, msgid);\n   fprintf (stderr, \"%s: \", programname);\n   vfprintf (stderr, _(msgid), ap);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n \n   fprintf (stderr, \"\\n\");\n }\n \n static void\n-notice VPARAMS ((const char *msgid, ...))\n+notice (const char *msgid, ...)\n {\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n+  va_list ap;\n+  \n+  va_start (ap, msgid);\n   vfprintf (stderr, _(msgid), ap);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \f\n static inline void"}, {"sha": "3a7de61d3f4bbfcf2a05a6d78d2292b82819f8f5", "filename": "gcc/gcov.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -362,14 +362,13 @@ main (argc, argv)\n }\n \n static void\n-fnotice VPARAMS ((FILE *file, const char *msgid, ...))\n+fnotice (FILE *file, const char *msgid, ...)\n {\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, FILE *, file);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n+  va_list ap;\n+  \n+  va_start (ap, msgid);\n   vfprintf (file, _(msgid), ap);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* More 'friendly' abort that prints the line and file."}, {"sha": "f757a4d96fe6839eaec6e75e589b539ba0d46f2a", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -719,14 +719,14 @@ attr_rtx_1 (code, p)\n }\n \n static rtx\n-attr_rtx VPARAMS ((enum rtx_code code, ...))\n+attr_rtx (enum rtx_code code, ...)\n {\n   rtx result;\n+  va_list p;\n   \n-  VA_OPEN (p, code);\n-  VA_FIXEDARG (p, enum rtx_code, code);\n+  va_start (p, code);\n   result = attr_rtx_1 (code, p);\n-  VA_CLOSE (p);\n+  va_end (p);\n   return result;\n }\n \n@@ -736,19 +736,18 @@ attr_rtx VPARAMS ((enum rtx_code code, ...))\n    rtx attr_printf (len, format, [arg1, ..., argn])  */\n \n char *\n-attr_printf VPARAMS ((unsigned int len, const char *fmt, ...))\n+attr_printf (unsigned int len, const char *fmt, ...)\n {\n   char str[256];\n-\n-  VA_OPEN (p, fmt);\n-  VA_FIXEDARG (p, unsigned int, len);\n-  VA_FIXEDARG (p, const char *, fmt);\n+  va_list p;\n+  \n+  va_start (p, fmt);\n   \n   if (len > sizeof str - 1) /* Leave room for \\0.  */\n     abort ();\n \n   vsprintf (str, fmt, p);\n-  VA_CLOSE (p);\n+  va_end (p);\n \n   return attr_string (str, strlen (str));\n }"}, {"sha": "1ad3e05d3504eca83af57cf90ecaf6b37ba739b6", "filename": "gcc/gengtype.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -40,18 +40,18 @@ static void close_output_files PARAMS ((void));\n /* Report an error at POS, printing MSG.  */\n \n void\n-error_at_line VPARAMS ((struct fileloc *pos, const char *msg, ...))\n+error_at_line (struct fileloc *pos, const char *msg, ...)\n {\n-  VA_OPEN (ap, msg);\n-  VA_FIXEDARG (ap, struct fileloc *, pos);\n-  VA_FIXEDARG (ap, const char *, msg);\n+  va_list ap;\n+  \n+  va_start (ap, msg);\n \n   fprintf (stderr, \"%s:%d: \", pos->file, pos->line);\n   vfprintf (stderr, msg, ap);\n   fputc ('\\n', stderr);\n   hit_error = 1;\n \n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* vasprintf, but produces fatal message on out-of-memory.  */\n@@ -72,13 +72,14 @@ xvasprintf (result, format, args)\n \n /* Wrapper for xvasprintf.  */\n char *\n-xasprintf VPARAMS ((const char *format, ...))\n+xasprintf (const char *format, ...)\n {\n   char *result;\n-  VA_OPEN (ap, format);\n-  VA_FIXEDARG (ap, const char *, format);\n+  va_list ap;\n+  \n+  va_start (ap, format);\n   xvasprintf (&result, format, ap);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n   return result;\n }\n \n@@ -1088,14 +1089,13 @@ create_file (name, oname)\n \n /* Print, like fprintf, to O.  */\n void \n-oprintf VPARAMS ((outf_p o, const char *format, ...))\n+oprintf (outf_p o, const char *format, ...)\n {\n   char *s;\n   size_t slength;\n+  va_list ap;\n   \n-  VA_OPEN (ap, format);\n-  VA_FIXEDARG (ap, outf_p, o);\n-  VA_FIXEDARG (ap, const char *, format);\n+  va_start (ap, format);\n   slength = xvasprintf (&s, format, ap);\n \n   if (o->bufused + slength > o->buflength)\n@@ -1112,7 +1112,7 @@ oprintf VPARAMS ((outf_p o, const char *format, ...))\n   memcpy (o->buf + o->bufused, s, slength);\n   o->bufused += slength;\n   free (s);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* Open the global header file and the language-specific header files.  */"}, {"sha": "9c46ded7922068cbc5770ac592c01038becc6194", "filename": "gcc/gensupport.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -107,17 +107,17 @@ static void process_include PARAMS ((rtx, int));\n static char *save_string PARAMS ((const char *, int));\n \f\n void\n-message_with_line VPARAMS ((int lineno, const char *msg, ...))\n+message_with_line (int lineno, const char *msg, ...)\n {\n-  VA_OPEN (ap, msg);\n-  VA_FIXEDARG (ap, int, lineno);\n-  VA_FIXEDARG (ap, const char *, msg);\n+  va_list ap;\n+  \n+  va_start (ap, msg);\n \n   fprintf (stderr, \"%s:%d: \", read_rtx_filename, lineno);\n   vfprintf (stderr, msg, ap);\n   fputc ('\\n', stderr);\n \n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n /* Make a version of gen_rtx_CONST_INT so that GEN_INT can be used in"}, {"sha": "45b8717d933b2d7b4af2eef124129d78d4425c75", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -5512,20 +5512,20 @@ free_thead (ptr)\n \f\n /* Output an error message and exit */\n \n-/*VARARGS*/\n void\n-fatal VPARAMS ((const char *format, ...))\n+fatal (const char *format, ...)\n {\n-  VA_OPEN (ap, format);\n-  VA_FIXEDARG (ap, const char *, format);\n+  va_list ap;\n+  \n+  va_start (ap, format);\n \n   if (line_number > 0)\n     fprintf (stderr, \"%s, %s:%ld \", progname, input_name, line_number);\n   else\n     fprintf (stderr, \"%s:\", progname);\n \n   vfprintf (stderr, format, ap);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n   fprintf (stderr, \"\\n\");\n   if (line_number > 0)\n     fprintf (stderr, \"line:\\t%s\\n\", cur_line_start);\n@@ -5534,12 +5534,12 @@ fatal VPARAMS ((const char *format, ...))\n   exit (1);\n }\n \n-/*VARARGS*/\n void\n-error VPARAMS ((const char *format, ...))\n+error (const char *format, ...)\n {\n-  VA_OPEN (ap, format);\n-  VA_FIXEDARG (ap, char *, format);\n+  va_list ap;\n+  \n+  va_start (ap, format);\n \n   if (line_number > 0)\n     fprintf (stderr, \"%s, %s:%ld \", progname, input_name, line_number);\n@@ -5552,7 +5552,7 @@ error VPARAMS ((const char *format, ...))\n     fprintf (stderr, \"line:\\t%s\\n\", cur_line_start);\n \n   had_errors++;\n-  VA_CLOSE (ap);\n+  va_end (ap);\n \n   saber_stop ();\n }"}, {"sha": "a83add6db7217538ab2e43bb7cd415ebfa7207ae", "filename": "gcc/protoize.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -513,13 +513,13 @@ static char * saved_repl_write_ptr;\n \f\n /* Translate and output an error message.  */\n static void\n-notice VPARAMS ((const char *msgid, ...))\n+notice (const char *msgid, ...)\n {\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n+  va_list ap;\n+  \n+  va_start (ap, msgid);\n   vfprintf (stderr, _(msgid), ap);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n \f"}, {"sha": "17d89b469eeb2e94fde9423f06a0719e64d649cd", "filename": "gcc/ra-debug.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fra-debug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fra-debug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-debug.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -48,14 +48,14 @@ static const char *const reg_class_names[] = REG_CLASS_NAMES;\n    have any bits in common.  */\n \n void\n-ra_debug_msg VPARAMS ((unsigned int level, const char *format, ...))\n+ra_debug_msg (unsigned int level, const char *format, ...)\n {\n-  VA_OPEN (ap, format);\n-  VA_FIXEDARG (ap, unsigned int, level);\n-  VA_FIXEDARG (ap, const char *, format);\n+  va_list ap;\n+  \n+  va_start (ap, format);\n   if ((debug_new_regalloc & level) != 0 && rtl_dump_file != NULL)\n     vfprintf (rtl_dump_file, format, ap);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n "}, {"sha": "5b4a6c44b18d6dfc745e3dfa1def98caa0a09d6a", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -51,15 +51,14 @@ int read_rtx_lineno = 1;\n const char *read_rtx_filename = \"<unknown>\";\n \n static void\n-fatal_with_file_and_line VPARAMS ((FILE *infile, const char *msg, ...))\n+fatal_with_file_and_line (FILE *infile, const char *msg, ...)\n {\n   char context[64];\n   size_t i;\n   int c;\n+  va_list ap;\n \n-  VA_OPEN (ap, msg);\n-  VA_FIXEDARG (ap, FILE *, infile);\n-  VA_FIXEDARG (ap, const char *, msg);\n+  va_start (ap, msg);\n \n   fprintf (stderr, \"%s:%d: \", read_rtx_filename, read_rtx_lineno);\n   vfprintf (stderr, msg, ap);\n@@ -80,7 +79,7 @@ fatal_with_file_and_line VPARAMS ((FILE *infile, const char *msg, ...))\n   fprintf (stderr, \"%s:%d: following context is `%s'\\n\",\n \t   read_rtx_filename, read_rtx_lineno, context);\n \n-  VA_CLOSE (ap);\n+  va_end (ap);\n   exit (1);\n }\n "}, {"sha": "d5efc762d873ed01a35fa4976aa881630ed7b400", "filename": "gcc/rtl-error.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Frtl-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Frtl-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-error.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -92,25 +92,23 @@ diagnostic_for_asm (insn, msg, args_ptr, kind)\n }\n \n void\n-error_for_asm VPARAMS ((rtx insn, const char *msgid, ...))\n+error_for_asm (rtx insn, const char *msgid, ...)\n {\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, rtx, insn);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n+  va_list ap;\n+  \n+  va_start (ap, msgid);\n   diagnostic_for_asm (insn, msgid, &ap, DK_ERROR);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n void\n-warning_for_asm VPARAMS ((rtx insn, const char *msgid, ...))\n+warning_for_asm (rtx insn, const char *msgid, ...)\n {\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, rtx, insn);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n+  va_list ap;\n+  \n+  va_start (ap, msgid);\n   diagnostic_for_asm (insn, msgid, &ap, DK_WARNING);\n-  VA_CLOSE (ap);\n+  va_end (ap);\n }\n \n void"}, {"sha": "7c04b3d01fd4336a4791c083fa7e7cd6ed72014e", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34d07f25561ccf841f1e1d3f13aa412525ea999/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=e34d07f25561ccf841f1e1d3f13aa412525ea999", "patch": "@@ -2247,17 +2247,16 @@ stabilize_reference_1 (e)\n    Constants, decls, types and misc nodes cannot be.  */\n \n tree\n-build VPARAMS ((enum tree_code code, tree tt, ...))\n+build (enum tree_code code, tree tt, ...)\n {\n   tree t;\n   int length;\n   int i;\n   int fro;\n   int constant;\n+  va_list p;\n \n-  VA_OPEN (p, tt);\n-  VA_FIXEDARG (p, enum tree_code, code);\n-  VA_FIXEDARG (p, tree, tt);\n+  va_start (p, tt);\n \n   t = make_node (code);\n   length = TREE_CODE_LENGTH (code);\n@@ -2334,7 +2333,7 @@ build VPARAMS ((enum tree_code code, tree tt, ...))\n \t    }\n \t}\n     }\n-  VA_CLOSE (p);\n+  va_end (p);\n \n   TREE_CONSTANT (t) = constant;\n   return t;\n@@ -2435,22 +2434,22 @@ build1 (code, type, node)\n    or even garbage if their values do not matter.  */\n \n tree\n-build_nt VPARAMS ((enum tree_code code, ...))\n+build_nt (enum tree_code code, ...)\n {\n   tree t;\n   int length;\n   int i;\n+  va_list p;\n \n-  VA_OPEN (p, code);\n-  VA_FIXEDARG (p, enum tree_code, code);\n+  va_start (p, code);\n \n   t = make_node (code);\n   length = TREE_CODE_LENGTH (code);\n \n   for (i = 0; i < length; i++)\n     TREE_OPERAND (t, i) = va_arg (p, tree);\n \n-  VA_CLOSE (p);\n+  va_end (p);\n   return t;\n }\n \f\n@@ -3838,12 +3837,12 @@ build_function_type (value_type, arg_types)\n    be terminated by NULL_TREE.  */\n \n tree\n-build_function_type_list VPARAMS ((tree return_type, ...))\n+build_function_type_list (tree return_type, ...)\n {\n   tree t, args, last;\n+  va_list p;\n \n-  VA_OPEN (p, return_type);\n-  VA_FIXEDARG (p, tree, return_type);\n+  va_start (p, return_type);\n \n   t = va_arg (p, tree);\n   for (args = NULL_TREE; t != NULL_TREE; t = va_arg (p, tree))\n@@ -3854,7 +3853,7 @@ build_function_type_list VPARAMS ((tree return_type, ...))\n   TREE_CHAIN (last) = void_list_node;\n   args = build_function_type (return_type, args);\n \n-  VA_CLOSE (p);\n+  va_end (p);\n   return args;\n }\n "}]}