{"sha": "29be38356740af75026c65c627f78d46fee2554d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjliZTM4MzU2NzQwYWY3NTAyNmM2NWM2MjdmNzhkNDZmZWUyNTU0ZA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2010-06-16T12:21:56Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2010-06-16T12:21:56Z"}, "message": "re PR tree-optimization/43905 (duplicate __PRETTY_FUNCTION__ symbol for functions differing in const-ness)\n\n2010-06-16  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/43905\n\t* tree-sra.c: Include tree-inline.h.\n\t(create_abstract_origin): Removed.\n\t(modify_function): Version the call graph node instead of creating\n\tabstract origins and dealing with same_body aliases.\n\t* tree-sra.c (ipa_sra_preliminary_function_checks): Check whether the\n\tfunction is versionable.\n\t* Makefile.in (tree-sra.o): Add TREE_INLINE_H to dependencies.\n\n\t* testsuite/g++.dg/torture/pr43905.C: New test.\n\nFrom-SVN: r160832", "tree": {"sha": "8882f58ec40664507726bf4b62641267712f9828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8882f58ec40664507726bf4b62641267712f9828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29be38356740af75026c65c627f78d46fee2554d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29be38356740af75026c65c627f78d46fee2554d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29be38356740af75026c65c627f78d46fee2554d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29be38356740af75026c65c627f78d46fee2554d/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "584bd1cfca25313643c5295908f248c2460022d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/584bd1cfca25313643c5295908f248c2460022d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/584bd1cfca25313643c5295908f248c2460022d5"}], "stats": {"total": 90, "additions": 61, "deletions": 29}, "files": [{"sha": "449b824e9035cf2c992f6a89c982b32210d7fe56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29be38356740af75026c65c627f78d46fee2554d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29be38356740af75026c65c627f78d46fee2554d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29be38356740af75026c65c627f78d46fee2554d", "patch": "@@ -1,3 +1,14 @@\n+2010-06-16  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/43905\n+\t* tree-sra.c: Include tree-inline.h.\n+\t(create_abstract_origin): Removed.\n+\t(modify_function): Version the call graph node instead of creating\n+\tabstract origins and dealing with same_body aliases.\n+\t* tree-sra.c (ipa_sra_preliminary_function_checks): Check whether the\n+\tfunction is versionable.\n+\t* Makefile.in (tree-sra.o): Add TREE_INLINE_H to dependencies.\n+\n 2010-06-16  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* config/mips/linux64.h (BIONIC_DYNAMIC_LINKERN32): Define."}, {"sha": "4c952c485c4c942545f820f6ed1bb7c5e0d0d63d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29be38356740af75026c65c627f78d46fee2554d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29be38356740af75026c65c627f78d46fee2554d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=29be38356740af75026c65c627f78d46fee2554d", "patch": "@@ -3118,7 +3118,8 @@ tree-ssa-ccp.o : tree-ssa-ccp.c $(TREE_FLOW_H) $(CONFIG_H) \\\n tree-sra.o : tree-sra.c $(CONFIG_H) $(SYSTEM_H) coretypes.h alloc-pool.h \\\n    $(TM_H) $(TREE_H) $(GIMPLE_H) $(CGRAPH_H) $(TREE_FLOW_H) $(IPA_PROP_H) \\\n    $(DIAGNOSTIC_H) statistics.h $(TREE_DUMP_H) $(TIMEVAR_H) $(PARAMS_H) \\\n-   $(TARGET_H) $(FLAGS_H) $(EXPR_H) tree-pretty-print.h $(DBGCNT_H)\n+   $(TARGET_H) $(FLAGS_H) $(EXPR_H) tree-pretty-print.h $(DBGCNT_H) \\\n+   $(TREE_INLINE_H)\n tree-switch-conversion.o : tree-switch-conversion.c $(CONFIG_H) $(SYSTEM_H) \\\n     $(TREE_H) $(TM_P_H) $(TREE_FLOW_H) $(DIAGNOSTIC_H) $(TREE_INLINE_H) \\\n     $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) $(GIMPLE_H) \\"}, {"sha": "3c80394e66116e532d7e02d2c4396642822a0134", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29be38356740af75026c65c627f78d46fee2554d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29be38356740af75026c65c627f78d46fee2554d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29be38356740af75026c65c627f78d46fee2554d", "patch": "@@ -1,3 +1,7 @@\n+2010-06-16  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* g++.dg/torture/pr43905.C: New test.\n+\n 2010-06-16  Mikael Pettersson  <mikpe@it.uu.se>\n \n \tPR testsuite/44538"}, {"sha": "0e49a32a1dd5d9d4a25f3108edafbf204960c448", "filename": "gcc/testsuite/g++.dg/torture/pr43905.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29be38356740af75026c65c627f78d46fee2554d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr43905.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29be38356740af75026c65c627f78d46fee2554d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr43905.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr43905.C?ref=29be38356740af75026c65c627f78d46fee2554d", "patch": "@@ -0,0 +1,13 @@\n+extern void sf ( __const char *);\n+struct Matrix{\n+  int operator[](int n){\n+    sf ( __PRETTY_FUNCTION__);\n+  }\n+  int operator[](int n)const{\n+    sf ( __PRETTY_FUNCTION__);\n+  }\n+};\n+void calcmy(Matrix const &b, Matrix &c, int k){\n+  b[k];\n+  c[k];\n+}"}, {"sha": "47d0e50174e077d7afee32f0054ecdaa347cc569", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29be38356740af75026c65c627f78d46fee2554d/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29be38356740af75026c65c627f78d46fee2554d/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=29be38356740af75026c65c627f78d46fee2554d", "patch": "@@ -89,6 +89,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"flags.h\"\n #include \"dbgcnt.h\"\n+#include \"tree-inline.h\"\n \n /* Enumeration of all aggregate reductions we can do.  */\n enum sra_mode { SRA_MODE_EARLY_IPA,   /* early call regularization */\n@@ -4225,43 +4226,38 @@ convert_callers (struct cgraph_node *node, ipa_parm_adjustment_vec adjustments)\n   return;\n }\n \n-/* Create an abstract origin declaration for OLD_DECL and make it an abstract\n-   origin of the provided decl so that there are preserved parameters for debug\n-   information.  */\n-\n-static void\n-create_abstract_origin (tree old_decl)\n-{\n-  if (!DECL_ABSTRACT_ORIGIN (old_decl))\n-    {\n-      tree new_decl = copy_node (old_decl);\n-\n-      DECL_ABSTRACT (new_decl) = 1;\n-      SET_DECL_ASSEMBLER_NAME (new_decl, NULL_TREE);\n-      SET_DECL_RTL (new_decl, NULL);\n-      DECL_STRUCT_FUNCTION (new_decl) = NULL;\n-      DECL_ARTIFICIAL (old_decl) = 1;\n-      DECL_ABSTRACT_ORIGIN (old_decl) = new_decl;\n-    }\n-}\n-\n /* Perform all the modification required in IPA-SRA for NODE to have parameters\n    as given in ADJUSTMENTS.  */\n \n static void\n modify_function (struct cgraph_node *node, ipa_parm_adjustment_vec adjustments)\n {\n-  struct cgraph_node *alias;\n-  for (alias = node->same_body; alias; alias = alias->next)\n-    ipa_modify_formal_parameters (alias->decl, adjustments, \"ISRA\");\n-  /* current_function_decl must be handled last, after same_body aliases,\n-     as following functions will use what it computed.  */\n-  create_abstract_origin (current_function_decl);\n+  struct cgraph_node *new_node;\n+  struct cgraph_edge *cs;\n+  VEC (cgraph_edge_p, heap) * redirect_callers;\n+  int node_callers;\n+\n+  node_callers = 0;\n+  for (cs = node->callers; cs != NULL; cs = cs->next_caller)\n+    node_callers++;\n+  redirect_callers = VEC_alloc (cgraph_edge_p, heap, node_callers);\n+  for (cs = node->callers; cs != NULL; cs = cs->next_caller)\n+    VEC_quick_push (cgraph_edge_p, redirect_callers, cs);\n+\n+  rebuild_cgraph_edges ();\n+  pop_cfun ();\n+  current_function_decl = NULL_TREE;\n+\n+  new_node = cgraph_function_versioning (node, redirect_callers, NULL, NULL,\n+\t\t\t\t\t NULL, NULL, \"isra\");\n+  current_function_decl = new_node->decl;\n+  push_cfun (DECL_STRUCT_FUNCTION (new_node->decl));\n+\n   ipa_modify_formal_parameters (current_function_decl, adjustments, \"ISRA\");\n   ipa_sra_modify_function_body (adjustments);\n   sra_ipa_reset_debug_stmts (adjustments);\n-  convert_callers (node, adjustments);\n-  cgraph_make_node_local (node);\n+  convert_callers (new_node, adjustments);\n+  cgraph_make_node_local (new_node);\n   return;\n }\n \n@@ -4279,6 +4275,13 @@ ipa_sra_preliminary_function_checks (struct cgraph_node *node)\n       return false;\n     }\n \n+  if (!tree_versionable_function_p (node->decl))\n+    {\n+      if (dump_file)\n+\tfprintf (dump_file, \"Function not local to this compilation unit.\\n\");\n+      return false;\n+    }\n+\n   if (DECL_VIRTUAL_P (current_function_decl))\n     {\n       if (dump_file)"}]}