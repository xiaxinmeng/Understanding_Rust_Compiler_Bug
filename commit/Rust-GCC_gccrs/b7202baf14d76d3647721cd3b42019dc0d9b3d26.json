{"sha": "b7202baf14d76d3647721cd3b42019dc0d9b3d26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcyMDJiYWYxNGQ3NmQzNjQ3NzIxY2QzYjQyMDE5ZGMwZDliM2QyNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-01-16T23:56:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-01-16T23:56:00Z"}, "message": "PR libstdc++/55043 (again)\n\n\tPR libstdc++/55043 (again)\n\t* include/bits/alloc_traits.h (allocator_traits::construct): Disable\n\tunless construction would be well-formed.\n\t(__allow_copy_cons, __check_copy_constructible): Define.\n\t* include/bits/unordered_map.h (__check_copy_constructible): Use as\n\tbase class so copy constructor will be deleted if appropriate.\n\t(is_copy_constructible): Remove specialization.\n\t* include/bits/unordered_set.h: Likewise.\n\t* include/debug/unordered_map.h: Undo previous commit. Default copy\n\tand move constructors.\n\t* include/debug/unordered_set.h: Likewise.\n\t* include/profile/unordered_map.h: Undo previous commit.\n\t* include/profile/unordered_set.h: Likewise.\n\t* testsuite/23_containers/unordered_map/55043.cc: Fix test.\n\t* testsuite/23_containers/unordered_multimap/55043.cc: Likewise.\n\t* testsuite/23_containers/unordered_multiset/55043.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/55043.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/requirements/53339.cc: XFAIL,\n\tcannot support incomplete types.\n\t* testsuite/23_containers/unordered_multimap/requirements/53339.cc:\n\tLikewise.\n\nFrom-SVN: r195253", "tree": {"sha": "9dc2e2bab905cf6f9951684712378f6af4f9ff90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dc2e2bab905cf6f9951684712378f6af4f9ff90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7202baf14d76d3647721cd3b42019dc0d9b3d26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7202baf14d76d3647721cd3b42019dc0d9b3d26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7202baf14d76d3647721cd3b42019dc0d9b3d26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7202baf14d76d3647721cd3b42019dc0d9b3d26/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b940c6dd781581de1493d658182be58d2b4a93d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b940c6dd781581de1493d658182be58d2b4a93d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b940c6dd781581de1493d658182be58d2b4a93d"}], "stats": {"total": 236, "additions": 71, "deletions": 165}, "files": [{"sha": "39fe5877382bf6155da536658d204bec774c2ff2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b7202baf14d76d3647721cd3b42019dc0d9b3d26", "patch": "@@ -1,3 +1,27 @@\n+2013-01-16  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/55043 (again)\n+\t* include/bits/alloc_traits.h (allocator_traits::construct): Disable\n+\tunless construction would be well-formed.\n+\t(__allow_copy_cons, __check_copy_constructible): Define.\n+\t* include/bits/unordered_map.h (__check_copy_constructible): Use as\n+\tbase class so copy constructor will be deleted if appropriate.\n+\t(is_copy_constructible): Remove specialization.\n+\t* include/bits/unordered_set.h: Likewise.\n+\t* include/debug/unordered_map.h: Undo previous commit. Default copy\n+\tand move constructors.\n+\t* include/debug/unordered_set.h: Likewise.\n+\t* include/profile/unordered_map.h: Undo previous commit.\n+\t* include/profile/unordered_set.h: Likewise.\n+\t* testsuite/23_containers/unordered_map/55043.cc: Fix test.\n+\t* testsuite/23_containers/unordered_multimap/55043.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/55043.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/55043.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/requirements/53339.cc: XFAIL,\n+\tcannot support incomplete types.\n+\t* testsuite/23_containers/unordered_multimap/requirements/53339.cc:\n+\tLikewise.\n+\n 2013-01-16  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/55043"}, {"sha": "26c64f257b5c00353882ab3e192891c11bc4de9a", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=b7202baf14d76d3647721cd3b42019dc0d9b3d26", "patch": "@@ -257,7 +257,8 @@ _GLIBCXX_ALLOC_TR_NESTED_TYPE(propagate_on_container_swap,\n \n       template<typename _Tp, typename... _Args>\n \tstatic typename\n-       \tenable_if<!__construct_helper<_Tp, _Args...>::value, void>::type\n+\tenable_if<__and_<__not_<__construct_helper<_Tp, _Args...>>,\n+\t\t\t is_constructible<_Tp, _Args...>>::value, void>::type\n        \t_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)\n \t{ ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }\n \n@@ -389,7 +390,8 @@ _GLIBCXX_ALLOC_TR_NESTED_TYPE(propagate_on_container_swap,\n        *  arguments @a __args...\n       */\n       template<typename _Tp, typename... _Args>\n-\tstatic void construct(_Alloc& __a, _Tp* __p, _Args&&... __args)\n+\tstatic auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)\n+\t-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))\n \t{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }\n \n       /**\n@@ -526,9 +528,10 @@ _GLIBCXX_ALLOC_TR_NESTED_TYPE(propagate_on_container_swap,\n \t_M_select(...);\n \n     public:\n-\ttypedef decltype(_M_select<typename _Alloc::value_type>(0)) type;\n+      typedef decltype(_M_select<typename _Alloc::value_type>(0)) type;\n     };\n \n+  // true if _Alloc::value_type is CopyInsertable into containers using _Alloc\n   template<typename _Alloc>\n     struct __is_copy_insertable\n     : __is_copy_insertable_impl<_Alloc>::type\n@@ -540,9 +543,23 @@ _GLIBCXX_ALLOC_TR_NESTED_TYPE(propagate_on_container_swap,\n     : is_copy_constructible<_Tp>\n     { };\n \n-  template<typename _Container>\n-    using __has_copy_insertable_val\n-      = __is_copy_insertable<typename _Container::allocator_type>;\n+  // Used to allow copy construction of unordered containers\n+  template<bool> struct __allow_copy_cons { };\n+\n+  // Used to delete copy constructor of unordered containers\n+  template<>\n+    struct __allow_copy_cons<false>\n+    {\n+      __allow_copy_cons() = default;\n+      __allow_copy_cons(const __allow_copy_cons&) = delete;\n+      __allow_copy_cons(__allow_copy_cons&&) = default;\n+      __allow_copy_cons& operator=(const __allow_copy_cons&) = default;\n+      __allow_copy_cons& operator=(__allow_copy_cons&&) = default;\n+    };\n+\n+  template<typename _Alloc>\n+    using __check_copy_constructible\n+      = __allow_copy_cons<__is_copy_insertable<_Alloc>::value>;\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "be213e04a79e087a6552107c622ff17794240425", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=b7202baf14d76d3647721cd3b42019dc0d9b3d26", "patch": "@@ -94,7 +94,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t   class _Hash = hash<_Key>,\n \t   class _Pred = std::equal_to<_Key>,\n \t   class _Alloc = std::allocator<std::pair<const _Key, _Tp> > >\n-    class unordered_map\n+    class unordered_map : __check_copy_constructible<_Alloc>\n     {\n       typedef __umap_hashtable<_Key, _Tp, _Hash, _Pred, _Alloc>  _Hashtable;\n       _Hashtable _M_h;\n@@ -775,7 +775,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t   class _Hash = hash<_Key>,\n \t   class _Pred = std::equal_to<_Key>,\n \t   class _Alloc = std::allocator<std::pair<const _Key, _Tp> > >\n-    class unordered_multimap\n+    class unordered_multimap : __check_copy_constructible<_Alloc>\n     {\n       typedef __ummap_hashtable<_Key, _Tp, _Hash, _Pred, _Alloc>  _Hashtable;\n       _Hashtable _M_h;\n@@ -1408,26 +1408,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     { return !(__x == __y); }\n \n _GLIBCXX_END_NAMESPACE_CONTAINER\n-\n-  template<typename _Key, typename _Tp, typename _Hash, typename _Pred,\n-\t   typename _Alloc>\n-    struct\n-    is_copy_constructible<_GLIBCXX_STD_C::unordered_map<_Key, _Tp, _Hash,\n-\t\t\t\t\t\t\t_Pred, _Alloc>>\n-    : __has_copy_insertable_val<_GLIBCXX_STD_C::unordered_map<_Key, _Tp, _Hash,\n-\t\t\t\t\t\t\t      _Pred, _Alloc>>\n-    { };\n-\n-  template<typename _Key, typename _Tp, typename _Hash, typename _Pred,\n-\t   typename _Alloc>\n-    struct\n-    is_copy_constructible<_GLIBCXX_STD_C::unordered_multimap<_Key, _Tp, _Hash,\n-\t\t\t\t\t\t\t     _Pred, _Alloc>>\n-    : __has_copy_insertable_val<_GLIBCXX_STD_C::unordered_multimap<_Key, _Tp,\n-\t\t\t\t\t\t\t\t   _Hash, _Pred,\n-\t\t\t\t\t\t\t\t   _Alloc>>\n-    { };\n-\n } // namespace std\n \n #endif /* _UNORDERED_MAP_H */"}, {"sha": "50c233d0595f042112035222961e41a867a8be3f", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=b7202baf14d76d3647721cd3b42019dc0d9b3d26", "patch": "@@ -90,7 +90,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t   class _Hash = hash<_Value>,\n \t   class _Pred = std::equal_to<_Value>,\n \t   class _Alloc = std::allocator<_Value> >\n-    class unordered_set\n+    class unordered_set : __check_copy_constructible<_Alloc>\n     {\n       typedef __uset_hashtable<_Value, _Hash, _Pred, _Alloc>  _Hashtable;\n       _Hashtable _M_h;\n@@ -695,7 +695,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t   class _Hash = hash<_Value>,\n \t   class _Pred = std::equal_to<_Value>,\n \t   class _Alloc = std::allocator<_Value> >\n-    class unordered_multiset\n+    class unordered_multiset : __check_copy_constructible<_Alloc>\n     {\n       typedef __umset_hashtable<_Value, _Hash, _Pred, _Alloc>  _Hashtable;\n       _Hashtable _M_h;\n@@ -1291,23 +1291,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     { return !(__x == __y); }\n \n _GLIBCXX_END_NAMESPACE_CONTAINER\n-\n-  template<typename _Key, typename _Hash, typename _Pred, typename _Alloc>\n-    struct is_copy_constructible<_GLIBCXX_STD_C::unordered_set<_Key, _Hash,\n-\t\t\t\t\t\t\t       _Pred, _Alloc>>\n-    : __has_copy_insertable_val<_GLIBCXX_STD_C::unordered_set<_Key, _Hash,\n-\t\t\t\t\t\t\t      _Pred, _Alloc>>\n-    { };\n-\n-  template<typename _Key, typename _Hash, typename _Pred, typename _Alloc>\n-    struct\n-    is_copy_constructible<_GLIBCXX_STD_C::unordered_multiset<_Key, _Hash,\n-\t\t\t\t\t\t\t     _Pred, _Alloc>>\n-    : __has_copy_insertable_val<_GLIBCXX_STD_C::unordered_multiset<_Key, _Hash,\n-\t\t\t\t\t\t\t\t   _Pred,\n-\t\t\t\t\t\t\t\t   _Alloc>>\n-    { };\n-\n } // namespace std\n \n #endif /* _UNORDERED_SET_H */"}, {"sha": "284450fc7d8d749f4f2723cf8ea2a5b43b396d64", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 4, "deletions": 32, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=b7202baf14d76d3647721cd3b42019dc0d9b3d26", "patch": "@@ -96,14 +96,12 @@ namespace __debug\n \t\t__gnu_debug::__base(__last), __n,\n \t\t__hf, __eql, __a) { }\n \n-      unordered_map(const unordered_map& __x) \n-      : _Base(__x) { }\n+      unordered_map(const unordered_map& __x) = default;\n \n       unordered_map(const _Base& __x)\n       : _Base(__x) { }\n \n-      unordered_map(unordered_map&& __x)\n-      : _Base(std::move(__x)) { }\n+      unordered_map(unordered_map&& __x) = default;\n \n       unordered_map(initializer_list<value_type> __l,\n \t\t    size_type __n = 0,\n@@ -547,14 +545,12 @@ namespace __debug\n \t\t__gnu_debug::__base(__last), __n,\n \t\t__hf, __eql, __a) { }\n \n-      unordered_multimap(const unordered_multimap& __x) \n-      : _Base(__x) { }\n+      unordered_multimap(const unordered_multimap& __x) = default;\n \n       unordered_multimap(const _Base& __x) \n       : _Base(__x) { }\n \n-      unordered_multimap(unordered_multimap&& __x)\n-      : _Base(std::move(__x)) { }\n+      unordered_multimap(unordered_multimap&& __x) = default;\n \n       unordered_multimap(initializer_list<value_type> __l,\n \t\t\t size_type __n = 0,\n@@ -938,30 +934,6 @@ namespace __debug\n     { return !(__x == __y); }\n \n } // namespace __debug\n-\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  template<typename _Key, typename _Tp, typename _Hash, typename _Pred,\n-\t   typename _Alloc>\n-    struct\n-    is_copy_constructible<__debug::unordered_map<_Key, _Tp, _Hash, _Pred,\n-\t\t\t\t\t\t _Alloc>>\n-    : is_copy_constructible< _GLIBCXX_STD_C::unordered_map<_Key, _Tp,\n-\t\t\t\t\t\t\t   _Hash, _Pred,\n-\t\t\t\t\t\t\t   _Alloc> >\n-    { };\n-\n-  template<typename _Key, typename _Tp, typename _Hash, typename _Pred,\n-\t   typename _Alloc>\n-    struct\n-    is_copy_constructible<__debug::unordered_multimap<_Key, _Tp, _Hash, _Pred,\n-\t\t\t\t\t\t      _Alloc>>\n-    : is_copy_constructible< _GLIBCXX_STD_C::unordered_multimap<_Key, _Tp,\n-\t\t\t\t\t\t\t\t_Hash, _Pred,\n-\t\t\t\t\t\t\t\t_Alloc> >\n-    { };\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++11"}, {"sha": "2fe71e4bb07c0020e3b2b77f24ee707002fa0ade", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=b7202baf14d76d3647721cd3b42019dc0d9b3d26", "patch": "@@ -96,14 +96,12 @@ namespace __debug\n \t\t__gnu_debug::__base(__last), __n,\n \t\t__hf, __eql, __a) { }\n \n-      unordered_set(const unordered_set& __x) \n-      : _Base(__x) { }\n+      unordered_set(const unordered_set& __x) = default;\n \n       unordered_set(const _Base& __x) \n       : _Base(__x) { }\n \n-      unordered_set(unordered_set&& __x)\n-      : _Base(std::move(__x)) { }\n+      unordered_set(unordered_set&& __x) = default;\n \n       unordered_set(initializer_list<value_type> __l,\n \t\t    size_type __n = 0,\n@@ -542,14 +540,12 @@ namespace __debug\n \t\t__gnu_debug::__base(__last), __n,\n \t\t__hf, __eql, __a) { }\n \n-      unordered_multiset(const unordered_multiset& __x) \n-      : _Base(__x) { }\n+      unordered_multiset(const unordered_multiset& __x) = default;\n \n       unordered_multiset(const _Base& __x) \n       : _Base(__x) { }\n \n-      unordered_multiset(unordered_multiset&& __x)\n-      : _Base(std::move(__x)) { }\n+      unordered_multiset(unordered_multiset&& __x) = default;\n \n       unordered_multiset(initializer_list<value_type> __l,\n \t\t\t size_type __n = 0,\n@@ -920,27 +916,6 @@ namespace __debug\n     { return !(__x == __y); }\n \n } // namespace __debug\n-\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  template<typename _Key, typename _Hash, typename _Pred, typename _Alloc>\n-    struct\n-    is_copy_constructible<__debug::unordered_set<_Key, _Hash, _Pred, _Alloc>>\n-    : is_copy_constructible< _GLIBCXX_STD_C::unordered_set<_Key,\n-\t\t\t\t\t\t\t   _Hash, _Pred,\n-\t\t\t\t\t\t\t   _Alloc> >\n-    { };\n-\n-  template<typename _Key, typename _Hash, typename _Pred, typename _Alloc>\n-    struct\n-    is_copy_constructible<__debug::unordered_multiset<_Key, _Hash, _Pred,\n-\t\t\t\t\t\t      _Alloc>>\n-    : is_copy_constructible< _GLIBCXX_STD_C::unordered_multiset<_Key,\n-\t\t\t\t\t\t\t\t_Hash, _Pred,\n-\t\t\t\t\t\t\t\t_Alloc> >\n-    { };\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++11"}, {"sha": "0fee176e14a3873e066d08ddfe84d4af457beb5c", "filename": "libstdc++-v3/include/profile/unordered_map", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map?ref=b7202baf14d76d3647721cd3b42019dc0d9b3d26", "patch": "@@ -339,25 +339,11 @@ namespace __profile\n \t       const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n     { return !(__x == __y); }\n \n-} // namespace __profile\n-\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-  template<typename _Key, typename _Tp, typename _Hash, typename _Pred,\n-\t   typename _Alloc>\n-    struct\n-    is_copy_constructible<__profile::unordered_map<_Key, _Tp, _Hash,\n-\t\t\t\t\t\t   _Pred, _Alloc>>\n-    : is_copy_constructible< _GLIBCXX_STD_BASE >\n-    { };\n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n #undef _GLIBCXX_BASE\n #undef _GLIBCXX_STD_BASE\n #define _GLIBCXX_BASE unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>\n #define _GLIBCXX_STD_BASE _GLIBCXX_STD_C::_GLIBCXX_BASE\n \n-namespace __profile\n-{\n   /// Class std::unordered_multimap wrapper with performance instrumentation.\n   template<typename _Key, typename _Tp,\n \t   typename _Hash  = std::hash<_Key>,\n@@ -623,18 +609,6 @@ namespace __profile\n     { return !(__x == __y); }\n \n } // namespace __profile\n-\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  template<typename _Key, typename _Tp, typename _Hash, typename _Pred,\n-\t   typename _Alloc>\n-    struct\n-    is_copy_constructible<__profile::unordered_multimap<_Key, _Tp, _Hash,\n-\t\t\t\t\t\t\t_Pred, _Alloc>>\n-    : is_copy_constructible< _GLIBCXX_STD_BASE >\n-    { };\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #undef _GLIBCXX_BASE"}, {"sha": "737b6ec6b96f8745ce5aa318aeaf28f5fe939db6", "filename": "libstdc++-v3/include/profile/unordered_set", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set?ref=b7202baf14d76d3647721cd3b42019dc0d9b3d26", "patch": "@@ -305,23 +305,11 @@ namespace __profile\n \t       const unordered_set<_Key, _Hash, _Pred, _Alloc>& __y)\n     { return !(__x == __y); }\n \n-} // namespace __profile\n-\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-  template<typename _Key, typename _Hash, typename _Pred, typename _Alloc>\n-    struct\n-    is_copy_constructible<__profile::unordered_set<_Key, _Hash, _Pred, _Alloc>>\n-    : is_copy_constructible< _GLIBCXX_STD_BASE >\n-    { };\n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n #undef _GLIBCXX_BASE\n #undef _GLIBCXX_STD_BASE\n #define _GLIBCXX_STD_BASE _GLIBCXX_STD_C::_GLIBCXX_BASE\n #define _GLIBCXX_BASE unordered_multiset<_Value, _Hash, _Pred, _Alloc>\n \n-namespace __profile\n-{\n   /** @brief Unordered_multiset wrapper with performance instrumentation.  */\n   template<typename _Value,\n        typename _Hash  = std::hash<_Value>,\n@@ -580,17 +568,6 @@ namespace __profile\n     { return !(__x == __y); }\n \n } // namespace __profile\n-\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  template<typename _Value, typename _Hash, typename _Pred, typename _Alloc>\n-    struct\n-    is_copy_constructible<__profile::unordered_multiset<_Value, _Hash,\n-\t\t\t\t\t\t\t_Pred, _Alloc>>\n-    : is_copy_constructible< _GLIBCXX_STD_BASE >\n-    { };\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #undef _GLIBCXX_BASE"}, {"sha": "50e5437044c7d70ca32626c095f331a3788cc212", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/55043.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F55043.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F55043.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F55043.cc?ref=b7202baf14d76d3647721cd3b42019dc0d9b3d26", "patch": "@@ -63,7 +63,7 @@ struct Alloc : std::allocator<T>\n \n // verify is_copy_constructible depends on allocator\n typedef test_type<Alloc<MoveOnly, true>> uim_rval;\n-static_assert(std::is_copy_constructible<uim_rval>::value, \"is not copyable\");\n+static_assert(!std::is_copy_constructible<uim_rval>::value, \"is not copyable\");\n \n typedef test_type<Alloc<MoveOnly, false>> uim_lval;\n static_assert(std::is_copy_constructible<uim_lval>::value, \"is copyable\");"}, {"sha": "10404ce08146c4eafd07670f5ad48d77fde0400b", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/53339.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2F53339.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2F53339.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2F53339.cc?ref=b7202baf14d76d3647721cd3b42019dc0d9b3d26", "patch": "@@ -1,7 +1,9 @@\n-// { dg-do compile }\n+// XFAIL because of PR libstdc++/55043 fix\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n // { dg-options \"-std=gnu++11\" }\n \n-// Copyright (C) 2012 Free Software Foundation, Inc.\n+// Copyright (C) 2012-2013 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the"}, {"sha": "afeecaad0ab44150039b0b5db6efae6b8376e23a", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/55043.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F55043.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F55043.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F55043.cc?ref=b7202baf14d76d3647721cd3b42019dc0d9b3d26", "patch": "@@ -63,7 +63,7 @@ struct Alloc : std::allocator<T>\n \n // verify is_copy_constructible depends on allocator\n typedef test_type<Alloc<MoveOnly, true>> uim_rval;\n-static_assert(std::is_copy_constructible<uim_rval>::value, \"is not copyable\");\n+static_assert(!std::is_copy_constructible<uim_rval>::value, \"is not copyable\");\n \n typedef test_type<Alloc<MoveOnly, false>> uim_lval;\n static_assert(std::is_copy_constructible<uim_lval>::value, \"is copyable\");"}, {"sha": "cccd2a89513427a21508153bde33432bac7ab902", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/53339.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2F53339.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2F53339.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2F53339.cc?ref=b7202baf14d76d3647721cd3b42019dc0d9b3d26", "patch": "@@ -1,7 +1,9 @@\n-// { dg-do compile }\n+// XFAIL because of PR libstdc++/55043 fix\n+// { dg-do compile { xfail *-*-* } }\n+// { dg-excess-errors \"\" }\n // { dg-options \"-std=gnu++11\" }\n \n-// Copyright (C) 2012 Free Software Foundation, Inc.\n+// Copyright (C) 2012-2013 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the"}, {"sha": "445e4e48bc3c017c9630ecaf49c3185df5b06fb9", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/55043.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F55043.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F55043.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F55043.cc?ref=b7202baf14d76d3647721cd3b42019dc0d9b3d26", "patch": "@@ -67,7 +67,7 @@ struct Alloc : std::allocator<T>\n \n // verify is_copy_constructible depends on allocator\n typedef test_type<Alloc<MoveOnly, true>> uim_rval;\n-static_assert(std::is_copy_constructible<uim_rval>::value, \"is not copyable\");\n+static_assert(!std::is_copy_constructible<uim_rval>::value, \"is not copyable\");\n \n typedef test_type<Alloc<MoveOnly, false>> uim_lval;\n static_assert(std::is_copy_constructible<uim_lval>::value, \"is copyable\");"}, {"sha": "e5ba065f5d570a65a32191b6bb87b698a3c565c7", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/55043.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F55043.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7202baf14d76d3647721cd3b42019dc0d9b3d26/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F55043.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F55043.cc?ref=b7202baf14d76d3647721cd3b42019dc0d9b3d26", "patch": "@@ -67,7 +67,7 @@ struct Alloc : std::allocator<T>\n \n // verify is_copy_constructible depends on allocator\n typedef test_type<Alloc<MoveOnly, true>> uim_rval;\n-static_assert(std::is_copy_constructible<uim_rval>::value, \"is not copyable\");\n+static_assert(!std::is_copy_constructible<uim_rval>::value, \"is not copyable\");\n \n typedef test_type<Alloc<MoveOnly, false>> uim_lval;\n static_assert(std::is_copy_constructible<uim_lval>::value, \"is copyable\");"}]}