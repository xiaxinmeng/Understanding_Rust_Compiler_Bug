{"sha": "f56d48b2471c388401174029324e1f4c4b84fcdb", "node_id": "C_kwDOANBUbNoAKGY1NmQ0OGIyNDcxYzM4ODQwMTE3NDAyOTMyNGUxZjRjNGI4NGZjZGI", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2022-10-17T08:36:42Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-10-21T03:56:21Z"}, "message": "RISC-V: Add RVV vsetvl/vsetvlmax intrinsics and tests.\n\ngcc/ChangeLog:\n\n\t* config.gcc: Add riscv-vector-builtins-bases.o and riscv-vector-builtins-shapes.o\n\t* config/riscv/riscv-vector-builtins.cc (DEF_RVV_I_OPS): New macro.\n\t(DEF_RVV_FUNCTION): Ditto.\n\t(handle_pragma_vector): Add intrinsic framework.\n\t* config/riscv/riscv.cc (riscv_print_operand): Add operand print for vsetvl/vsetvlmax.\n\t* config/riscv/riscv.md: include vector.md.\n\t* config/riscv/t-riscv: Add riscv-vector-builtins-bases.o and riscv-vector-builtins-shapes.o\n\t* config/riscv/riscv-vector-builtins-bases.cc: New file.\n\t* config/riscv/riscv-vector-builtins-bases.h: New file.\n\t* config/riscv/riscv-vector-builtins-functions.def: New file.\n\t* config/riscv/riscv-vector-builtins-shapes.cc: New file.\n\t* config/riscv/riscv-vector-builtins-shapes.h: New file.\n\t* config/riscv/riscv-vector-builtins-types.def: New file.\n\t* config/riscv/vector.md: New file.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vsetvl-1.c: New test.", "tree": {"sha": "86ef65fb9129a3b6deb076a687bbdfa2ed93ad45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86ef65fb9129a3b6deb076a687bbdfa2ed93ad45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f56d48b2471c388401174029324e1f4c4b84fcdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f56d48b2471c388401174029324e1f4c4b84fcdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f56d48b2471c388401174029324e1f4c4b84fcdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f56d48b2471c388401174029324e1f4c4b84fcdb/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbd505700e09cfea8bdaa93ad6bd0514372e9034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbd505700e09cfea8bdaa93ad6bd0514372e9034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbd505700e09cfea8bdaa93ad6bd0514372e9034"}], "stats": {"total": 1302, "additions": 1300, "deletions": 2}, "files": [{"sha": "a3d336e1f18f3efee51eb5dc28a41be5a594c557", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=f56d48b2471c388401174029324e1f4c4b84fcdb", "patch": "@@ -517,7 +517,7 @@ pru-*-*)\n riscv*)\n \tcpu_type=riscv\n \textra_objs=\"riscv-builtins.o riscv-c.o riscv-sr.o riscv-shorten-memrefs.o riscv-selftests.o\"\n-\textra_objs=\"${extra_objs} riscv-vector-builtins.o\"\n+\textra_objs=\"${extra_objs} riscv-vector-builtins.o riscv-vector-builtins-shapes.o riscv-vector-builtins-bases.o\"\n \td_target_objs=\"riscv-d.o\"\n \textra_headers=\"riscv_vector.h\"\n \ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/riscv/riscv-vector-builtins.cc\""}, {"sha": "8582c0cae4cbf203fa16b5068dbf28644ce2bfef", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=f56d48b2471c388401174029324e1f4c4b84fcdb", "patch": "@@ -0,0 +1,104 @@\n+/* function_base implementation for RISC-V 'V' Extension for GNU compiler.\n+   Copyright (C) 2022-2022 Free Software Foundation, Inc.\n+   Contributed by Ju-Zhe Zhong (juzhe.zhong@rivai.ai), RiVAI Technologies Ltd.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tree.h\"\n+#include \"rtl.h\"\n+#include \"tm_p.h\"\n+#include \"memmodel.h\"\n+#include \"insn-codes.h\"\n+#include \"optabs.h\"\n+#include \"recog.h\"\n+#include \"expr.h\"\n+#include \"basic-block.h\"\n+#include \"function.h\"\n+#include \"fold-const.h\"\n+#include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimplify.h\"\n+#include \"explow.h\"\n+#include \"emit-rtl.h\"\n+#include \"tree-vector-builder.h\"\n+#include \"rtx-vector-builder.h\"\n+#include \"riscv-vector-builtins.h\"\n+#include \"riscv-vector-builtins-shapes.h\"\n+#include \"riscv-vector-builtins-bases.h\"\n+\n+using namespace riscv_vector;\n+\n+namespace riscv_vector {\n+\n+/* Implements vsetvl<mode> && vsetvlmax<mode>.  */\n+template<bool VLMAX_P>\n+class vsetvl : public function_base\n+{\n+public:\n+  unsigned int call_properties (const function_instance &) const\n+  {\n+    return CP_READ_CSR | CP_WRITE_CSR;\n+  }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    if (VLMAX_P)\n+      e.add_input_operand (Pmode, gen_rtx_REG (Pmode, 0));\n+    else\n+      e.add_input_operand (0);\n+\n+    tree type = builtin_types[e.type.index].vector;\n+    machine_mode mode = TYPE_MODE (type);\n+    machine_mode inner_mode = GET_MODE_INNER (mode);\n+    /* SEW.  */\n+    e.add_input_operand (Pmode,\n+\t\t\t gen_int_mode (GET_MODE_BITSIZE (inner_mode), Pmode));\n+\n+    /* LMUL. Define the bitmap rule as follows:\n+       |      4       | 3 2 1 0 |\n+       | fractional_p | factor  |\n+    */\n+    bool fractional_p = known_lt (GET_MODE_SIZE (mode), BYTES_PER_RISCV_VECTOR);\n+    unsigned int factor\n+      = fractional_p ? exact_div (BYTES_PER_RISCV_VECTOR, GET_MODE_SIZE (mode))\n+\t\t\t .to_constant ()\n+\t\t     : exact_div (GET_MODE_SIZE (mode), BYTES_PER_RISCV_VECTOR)\n+\t\t\t .to_constant ();\n+    e.add_input_operand (Pmode,\n+\t\t\t gen_int_mode ((fractional_p << 4) | factor, Pmode));\n+\n+    /* TA.  */\n+    e.add_input_operand (Pmode, gen_int_mode (1, Pmode));\n+\n+    /* MU.  */\n+    e.add_input_operand (Pmode, gen_int_mode (0, Pmode));\n+    return e.generate_insn (code_for_vsetvl (Pmode));\n+  }\n+};\n+\n+static CONSTEXPR const vsetvl<false> vsetvl_obj;\n+static CONSTEXPR const vsetvl<true> vsetvlmax_obj;\n+namespace bases {\n+const function_base *const vsetvl = &vsetvl_obj;\n+const function_base *const vsetvlmax = &vsetvlmax_obj;\n+}\n+\n+} // end namespace riscv_vector"}, {"sha": "a0ae18eef03c3e473090dfea496f9dcc816ea0b8", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.h", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h?ref=f56d48b2471c388401174029324e1f4c4b84fcdb", "patch": "@@ -0,0 +1,33 @@\n+/* function_base declaration for RISC-V 'V' Extension for GNU compiler.\n+   Copyright (C) 2022-2022 Free Software Foundation, Inc.\n+   Contributed by Ju-Zhe Zhong (juzhe.zhong@rivai.ai), RiVAI Technologies Ltd.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_RISCV_VECTOR_BUILTINS_BASES_H\n+#define GCC_RISCV_VECTOR_BUILTINS_BASES_H\n+\n+namespace riscv_vector {\n+\n+namespace bases {\n+extern const function_base *const vsetvl;\n+extern const function_base *const vsetvlmax;\n+}\n+\n+} // end namespace riscv_vector\n+\n+#endif"}, {"sha": "dc41537865e271221a8ca84311d7785dbde8ad44", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=f56d48b2471c388401174029324e1f4c4b84fcdb", "patch": "@@ -0,0 +1,43 @@\n+/* Intrinsic define macros for RISC-V 'V' Extension for GNU compiler.\n+   Copyright (C) 2022-2022 Free Software Foundation, Inc.\n+   Contributed by Juzhe Zhong (juzhe.zhong@rivai.ai), RiVAI Technologies Ltd.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3. If not see\n+<http://www.gnu.org/licenses/>. */\n+\n+/* Use \"DEF_RVV_FUNCTION\" macro to define RVV intrinsic functions.\n+\n+     - NAME not only describes the base_name of the functions\n+       but also point to the name of the function_base class.\n+\n+     - SHAPE point to the function_shape class.\n+\n+     - PREDS describes the predication types that are supported in the\n+       functions.\n+\n+     - OPS_INFO describes all information of return type and each\n+       argument type.\n+\n+*/\n+#ifndef DEF_RVV_FUNCTION\n+#define DEF_RVV_FUNCTION(NAME, SHAPE, PREDS, OPS_INFO)\n+#endif\n+\n+/* 6. Configuration-Setting Instructions.  */\n+DEF_RVV_FUNCTION (vsetvl, vsetvl, none_preds, i_none_size_size_ops)\n+DEF_RVV_FUNCTION (vsetvlmax, vsetvlmax, none_preds, i_none_size_void_ops)\n+\n+#undef DEF_RVV_FUNCTION"}, {"sha": "24fc1c02341015b739471b73d98e7745b02b463a", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.cc", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc?ref=f56d48b2471c388401174029324e1f4c4b84fcdb", "patch": "@@ -0,0 +1,104 @@\n+/* function_shape implementation for RISC-V 'V' Extension for GNU compiler.\n+   Copyright (C) 2022-2022 Free Software Foundation, Inc.\n+   Contributed by Ju-Zhe Zhong (juzhe.zhong@rivai.ai), RiVAI Technologies Ltd.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tree.h\"\n+#include \"rtl.h\"\n+#include \"tm_p.h\"\n+#include \"memmodel.h\"\n+#include \"insn-codes.h\"\n+#include \"optabs.h\"\n+#include \"riscv-vector-builtins.h\"\n+#include \"riscv-vector-builtins-shapes.h\"\n+\n+namespace riscv_vector {\n+\n+/* Add one function instance for GROUP, using operand suffix at index OI,\n+   mode suffix at index PAIR && bi and predication suffix at index pred_idx.  */\n+static void\n+build_one (function_builder &b, const function_group_info &group,\n+\t   unsigned int pred_idx, unsigned int vec_type_idx)\n+{\n+  /* Byte forms of non-tuple vlxusegei take 21 arguments.  */\n+  auto_vec<tree, 21> argument_types;\n+  function_instance function_instance (group.base_name, *group.base,\n+\t\t\t\t       *group.shape,\n+\t\t\t\t       group.ops_infos.types[vec_type_idx],\n+\t\t\t\t       group.preds[pred_idx], &group.ops_infos);\n+  tree return_type = group.ops_infos.ret.get_tree_type (\n+    group.ops_infos.types[vec_type_idx].index);\n+  b.allocate_argument_types (function_instance, argument_types);\n+  b.add_unique_function (function_instance, (*group.shape), return_type,\n+\t\t\t argument_types);\n+}\n+\n+/* Add a function instance for every operand && predicate && args\n+   combination in GROUP.  Take the function base name from GROUP && operand\n+   suffix from operand_suffixes && mode suffix from type_suffixes && predication\n+   suffix from predication_suffixes. Use apply_predication to add in\n+   the predicate.  */\n+static void\n+build_all (function_builder &b, const function_group_info &group)\n+{\n+  for (unsigned int pred_idx = 0; group.preds[pred_idx] != NUM_PRED_TYPES;\n+       ++pred_idx)\n+    for (unsigned int vec_type_idx = 0;\n+\t group.ops_infos.types[vec_type_idx].index != NUM_VECTOR_TYPES;\n+\t ++vec_type_idx)\n+      build_one (b, group, pred_idx, vec_type_idx);\n+}\n+\n+/* Declare the function shape NAME, pointing it to an instance\n+   of class <NAME>_def.  */\n+#define SHAPE(DEF, VAR) \\\n+  static CONSTEXPR const DEF##_def VAR##_obj; \\\n+  namespace shapes { const function_shape *const VAR = &VAR##_obj; }\n+\n+/* Base class for for build.  */\n+struct build_base : public function_shape\n+{\n+  void build (function_builder &b,\n+\t      const function_group_info &group) const override\n+  {\n+    build_all (b, group);\n+  }\n+};\n+\n+/* vsetvl_def class.  */\n+struct vsetvl_def : public build_base\n+{\n+  char *get_name (function_builder &b, const function_instance &instance,\n+\t\t  bool overloaded_p) const override\n+  {\n+    /* vsetvl* instruction doesn't have C++ overloaded functions.  */\n+    if (overloaded_p)\n+      return nullptr;\n+    b.append_name (instance.base_name);\n+    b.append_name (type_suffixes[instance.type.index].vsetvl);\n+    return b.finish_name ();\n+  }\n+};\n+SHAPE(vsetvl, vsetvl)\n+SHAPE(vsetvl, vsetvlmax)\n+\n+} // end namespace riscv_vector"}, {"sha": "f2d876fb1334add797817adf402608898314e7fc", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.h", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h?ref=f56d48b2471c388401174029324e1f4c4b84fcdb", "patch": "@@ -0,0 +1,33 @@\n+/* function_shape declaration for RISC-V 'V' Extension for GNU compiler.\n+   Copyright (C) 2022-2022 Free Software Foundation, Inc.\n+   Contributed by Ju-Zhe Zhong (juzhe.zhong@rivai.ai), RiVAI Technologies Ltd.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_RISCV_VECTOR_BUILTINS_SHAPES_H\n+#define GCC_RISCV_VECTOR_BUILTINS_SHAPES_H\n+\n+namespace riscv_vector {\n+\n+namespace shapes {\n+extern const function_shape *const vsetvl;\n+extern const function_shape *const vsetvlmax;\n+}\n+\n+} // end namespace riscv_vector\n+\n+#endif"}, {"sha": "f282a5e7654aaeb6849a9cf89704f685336df147", "filename": "gcc/config/riscv/riscv-vector-builtins-types.def", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def?ref=f56d48b2471c388401174029324e1f4c4b84fcdb", "patch": "@@ -0,0 +1,50 @@\n+/* Intrinsic type iterators for RISC-V 'V' Extension for GNU compiler.\n+   Copyright (C) 2022-2022 Free Software Foundation, Inc.\n+   Contributed by Juzhe Zhong (juzhe.zhong@rivai.ai), RiVAI Technologies Ltd.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3. If not see\n+<http://www.gnu.org/licenses/>. */\n+\n+/* Use \"DEF_ALL_SIGNED_INTEGER\" macro include all signed integer which will be\n+   iterated and registered as intrinsic functions.  */\n+#ifndef DEF_RVV_I_OPS\n+#define DEF_RVV_I_OPS(TYPE, REQUIRE)\n+#endif\n+\n+DEF_RVV_I_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_I_OPS (vint8mf4_t, 0)\n+DEF_RVV_I_OPS (vint8mf2_t, 0)\n+DEF_RVV_I_OPS (vint8m1_t, 0)\n+DEF_RVV_I_OPS (vint8m2_t, 0)\n+DEF_RVV_I_OPS (vint8m4_t, 0)\n+DEF_RVV_I_OPS (vint8m8_t, 0)\n+DEF_RVV_I_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_I_OPS (vint16mf2_t, 0)\n+DEF_RVV_I_OPS (vint16m1_t, 0)\n+DEF_RVV_I_OPS (vint16m2_t, 0)\n+DEF_RVV_I_OPS (vint16m4_t, 0)\n+DEF_RVV_I_OPS (vint16m8_t, 0)\n+DEF_RVV_I_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_I_OPS (vint32m1_t, 0)\n+DEF_RVV_I_OPS (vint32m2_t, 0)\n+DEF_RVV_I_OPS (vint32m4_t, 0)\n+DEF_RVV_I_OPS (vint32m8_t, 0)\n+DEF_RVV_I_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_I_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_I_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_I_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n+\n+#undef DEF_RVV_I_OPS"}, {"sha": "dc410788c99893e3e8d3a485e519e61a724b1297", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=f56d48b2471c388401174029324e1f4c4b84fcdb", "patch": "@@ -45,6 +45,8 @@\n #include \"targhooks.h\"\n #include \"regs.h\"\n #include \"riscv-vector-builtins.h\"\n+#include \"riscv-vector-builtins-shapes.h\"\n+#include \"riscv-vector-builtins-bases.h\"\n \n using namespace riscv_vector;\n \n@@ -115,6 +117,49 @@ const char *const predication_suffixes[NUM_PRED_TYPES] = {\n #include \"riscv-vector-builtins.def\"\n };\n \n+/* A list of all signed integer will be registered for intrinsic functions.  */\n+static const rvv_type_info i_ops[] = {\n+#define DEF_RVV_I_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n+static CONSTEXPR const rvv_arg_type_info rvv_arg_type_info_end\n+  = rvv_arg_type_info (NUM_BASE_TYPES);\n+\n+/* A list of args for size_t func (void) function.  */\n+static CONSTEXPR const rvv_arg_type_info void_args[]\n+  = {rvv_arg_type_info (RVV_BASE_void), rvv_arg_type_info_end};\n+\n+/* A list of args for size_t func (size_t) function.  */\n+static CONSTEXPR const rvv_arg_type_info size_args[]\n+  = {rvv_arg_type_info (RVV_BASE_size), rvv_arg_type_info_end};\n+\n+/* A list of none preds that will be registered for intrinsic functions.  */\n+static CONSTEXPR const predication_type_index none_preds[]\n+  = {PRED_TYPE_none, NUM_PRED_TYPES};\n+\n+/* A static operand information for size_t func (void) function registration. */\n+static CONSTEXPR const rvv_op_info i_none_size_void_ops\n+  = {i_ops,\t\t\t\t/* Types */\n+     OP_TYPE_none,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_size), /* Return type */\n+     void_args /* Args */};\n+\n+/* A static operand information for size_t func (size_t) function registration.\n+ */\n+static CONSTEXPR const rvv_op_info i_none_size_size_ops\n+  = {i_ops,\t\t\t\t/* Types */\n+     OP_TYPE_none,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_size), /* Return type */\n+     size_args /* Args */};\n+\n+/* A list of all RVV intrinsic functions.  */\n+static function_group_info function_groups[] = {\n+#define DEF_RVV_FUNCTION(NAME, SHAPE, PREDS, OPS_INFO)                         \\\n+  {#NAME, &bases::NAME, &shapes::SHAPE, PREDS, OPS_INFO},\n+#include \"riscv-vector-builtins-functions.def\"\n+};\n+\n /* The RVV types, with their built-in\n    \"__rvv..._t\" name.  Allow an index of NUM_VECTOR_TYPES, which always\n    yields a null tree.  */\n@@ -787,11 +832,22 @@ verify_type_context (location_t loc, type_context_kind context, const_tree type,\n void\n handle_pragma_vector ()\n {\n+  if (function_table)\n+    {\n+      error (\"duplicate definition of %qs\", \"riscv_vector.h\");\n+      return;\n+    }\n   rvv_switcher rvv;\n \n   /* Define the vector and tuple types.  */\n   for (unsigned int type_i = 0; type_i < NUM_VECTOR_TYPES; ++type_i)\n     register_vector_type ((enum vector_type_index) type_i);\n+\n+  /* Define the functions.  */\n+  function_table = new hash_table<registered_function_hasher> (1023);\n+  function_builder builder;\n+  for (unsigned int i = 0; i < ARRAY_SIZE (function_groups); ++i)\n+    builder.register_function_group (function_groups[i]);\n }\n \n /* Return the function decl with RVV function subcode CODE, or error_mark_node"}, {"sha": "90a39047dd7644bca4a83a229a369d4594e24d46", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=f56d48b2471c388401174029324e1f4c4b84fcdb", "patch": "@@ -4135,6 +4135,32 @@ riscv_print_operand (FILE *file, rtx op, int letter)\n \n   switch (letter)\n     {\n+      case 'm': {\n+\tif (code == CONST_INT)\n+\t  {\n+\t    /* LMUL. Define the bitmap rule as follows:\n+\t       |      4       | 3 2 1 0 |\n+\t       | fractional_p | factor  |\n+\t    */\n+\t    bool fractional_p = (UINTVAL (op) >> 4) & 0x1;\n+\t    unsigned int factor = UINTVAL (op) & 0xf;\n+\t    asm_fprintf (file, \"%s%d\", fractional_p ? \"mf\" : \"m\", factor);\n+\t  }\n+\telse\n+\t  output_operand_lossage (\"invalid vector constant\");\n+\tbreak;\n+      }\n+      case 'p': {\n+\tif (code == CONST_INT)\n+\t  {\n+\t    /* Tail && Mask policy.  */\n+\t    bool agnostic_p = UINTVAL (op) & 0x1;\n+\t    asm_fprintf (file, \"%s\", agnostic_p ? \"a\" : \"u\");\n+\t  }\n+\telse\n+\t  output_operand_lossage (\"invalid vector constant\");\n+\tbreak;\n+      }\n     case 'h':\n       if (code == HIGH)\n \top = XEXP (op, 0);"}, {"sha": "b3654915fde0e970f77eba9589914a767260ab31", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=f56d48b2471c388401174029324e1f4c4b84fcdb", "patch": "@@ -2999,3 +2999,4 @@\n (include \"pic.md\")\n (include \"generic.md\")\n (include \"sifive-7.md\")\n+(include \"vector.md\")"}, {"sha": "8f67676cad7a78dbfdbd1f81ccb45deea0396994", "filename": "gcc/config/riscv/t-riscv", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Ft-riscv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Ft-riscv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Ft-riscv?ref=f56d48b2471c388401174029324e1f4c4b84fcdb", "patch": "@@ -11,10 +11,36 @@ riscv-vector-builtins.o: $(srcdir)/config/riscv/riscv-vector-builtins.cc \\\n   $(FUNCTION_H) fold-const.h gimplify.h explow.h stor-layout.h $(REGS_H) \\\n   alias.h langhooks.h attribs.h stringpool.h \\\n   $(srcdir)/config/riscv/riscv-vector-builtins.h \\\n-  $(srcdir)/config/riscv/riscv-vector-builtins.def\n+  $(srcdir)/config/riscv/riscv-vector-builtins-shapes.h \\\n+  $(srcdir)/config/riscv/riscv-vector-builtins-bases.h \\\n+  $(srcdir)/config/riscv/riscv-vector-builtins.def \\\n+  $(srcdir)/config/riscv/riscv-vector-builtins-types.def \\\n+  $(srcdir)/config/riscv/riscv-vector-builtins-functions.def\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/riscv/riscv-vector-builtins.cc\n \n+riscv-vector-builtins-shapes.o: \\\n+  $(srcdir)/config/riscv/riscv-vector-builtins-shapes.cc \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n+  $(TM_P_H) memmodel.h insn-codes.h $(OPTABS_H) \\\n+  $(srcdir)/config/riscv/riscv-vector-builtins.h \\\n+  $(srcdir)/config/riscv/riscv-vector-builtins-shapes.h\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t\t$(srcdir)/config/riscv/riscv-vector-builtins-shapes.cc\n+\n+riscv-vector-builtins-bases.o: \\\n+  $(srcdir)/config/riscv/riscv-vector-builtins-bases.cc \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n+  $(TM_P_H) memmodel.h insn-codes.h $(OPTABS_H) $(RECOG_H) \\\n+  $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) fold-const.h $(GIMPLE_H) \\\n+  gimple-iterator.h gimplify.h explow.h $(EMIT_RTL_H) tree-vector-builder.h \\\n+  rtx-vector-builder.h \\\n+  $(srcdir)/config/riscv/riscv-vector-builtins.h \\\n+  $(srcdir)/config/riscv/riscv-vector-builtins-shapes.h \\\n+  $(srcdir)/config/riscv/riscv-vector-builtins-bases.h\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t\t$(srcdir)/config/riscv/riscv-vector-builtins-bases.cc\n+\n riscv-sr.o: $(srcdir)/config/riscv/riscv-sr.cc $(CONFIG_H) \\\n   $(SYSTEM_H) $(TM_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\"}, {"sha": "82ce902c0fb17d2250c57ddd27d28ccd1940a89d", "filename": "gcc/config/riscv/vector.md", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=f56d48b2471c388401174029324e1f4c4b84fcdb", "patch": "@@ -0,0 +1,72 @@\n+;; Machine description for RISC-V 'V' Extension for GNU compiler.\n+;; Copyright (C) 2022-2022 Free Software Foundation, Inc.\n+;; Contributed by Juzhe Zhong (juzhe.zhong@rivai.ai), RiVAI Technologies Ltd.\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; This file describes the RISC-V 'V' Extension, Version 1.0.\n+;;\n+;; This file include :\n+;;\n+;; - Intrinsics (https://github.com/riscv/rvv-intrinsic-doc)\n+;; - Auto-vectorization (TBD)\n+;; - Combine optimization (TBD)\n+\n+(define_c_enum \"unspec\" [\n+  UNSPEC_VSETVL\n+])\n+\n+;; -----------------------------------------------------------------\n+;; ---- 6. Configuration-Setting Instructions\n+;; -----------------------------------------------------------------\n+;; Includes:\n+;; - 6.1 vsetvli/vsetivl/vsetvl instructions\n+;; -----------------------------------------------------------------\n+\n+;; we dont't define vsetvli as unspec_volatile which has side effects.\n+;; This instruction can be scheduled by the instruction scheduler.\n+;; This means these instructions will be deleted when\n+;; there is no instructions using vl or vtype in the following.\n+;; rd  | rs1 | AVL value | Effect on vl\n+;; -   | !x0 | x[rs1]    | Normal stripmining\n+;; !x0 | x0  | ~0        | Set vl to VLMAX\n+;; operands[0]: VL.\n+;; operands[1]: AVL.\n+;; operands[2]: SEW\n+;; operands[3]: LMUL\n+;; operands[4]: Tail policy 0 or 1 (undisturbed/agnostic)\n+;; operands[5]: Mask policy 0 or 1 (undisturbed/agnostic)\n+(define_insn \"@vsetvl<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r,r\")\n+\t(unspec:P [(match_operand:P 1 \"csr_operand\" \"r,K\")\n+\t\t   (match_operand 2 \"const_int_operand\" \"i,i\")\n+\t\t   (match_operand 3 \"const_int_operand\" \"i,i\")\n+\t\t   (match_operand 4 \"const_int_operand\" \"i,i\")\n+\t\t   (match_operand 5 \"const_int_operand\" \"i,i\")] UNSPEC_VSETVL))\n+   (set (reg:SI VL_REGNUM)\n+\t(unspec:SI [(match_dup 1)\n+\t\t    (match_dup 2)\n+\t\t    (match_dup 3)] UNSPEC_VSETVL))\n+   (set (reg:SI VTYPE_REGNUM)\n+\t(unspec:SI [(match_dup 2)\n+\t\t    (match_dup 3)\n+\t\t    (match_dup 4)\n+\t\t    (match_dup 5)] UNSPEC_VSETVL))]\n+  \"TARGET_VECTOR\"\n+  \"vset%i1vli\\t%0,%1,e%2,%m3,t%p4,m%p5\"\n+  [(set_attr \"type\" \"vsetvl\")\n+   (set_attr \"mode\" \"<MODE>\")])"}, {"sha": "661f2c9170e207a32484e28917c21c525bb9d71d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsetvl-1.c", "status": "added", "additions": 750, "deletions": 0, "changes": 750, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsetvl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56d48b2471c388401174029324e1f4c4b84fcdb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsetvl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsetvl-1.c?ref=f56d48b2471c388401174029324e1f4c4b84fcdb", "patch": "@@ -0,0 +1,750 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+\n+#include <stddef.h>\n+#include <riscv_vector.h>\n+\n+size_t test_vsetvl_e8mf8_imm0()\n+{\n+  size_t vl = vsetvl_e8mf8(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8mf8_imm31()\n+{\n+  size_t vl = vsetvl_e8mf8(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8mf8_imm32()\n+{\n+  size_t vl = vsetvl_e8mf8(32);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8mf8(size_t avl)\n+{\n+  size_t vl = vsetvl_e8mf8(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e8mf8()\n+{\n+  size_t vl = vsetvlmax_e8mf8();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8mf4_imm0()\n+{\n+  size_t vl = vsetvl_e8mf4(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8mf4_imm31()\n+{\n+  size_t vl = vsetvl_e8mf4(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8mf4_imm32()\n+{\n+  size_t vl = vsetvl_e8mf4(32);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8mf4(size_t avl)\n+{\n+  size_t vl = vsetvl_e8mf4(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e8mf4()\n+{\n+  size_t vl = vsetvlmax_e8mf4();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8mf2_imm0()\n+{\n+  size_t vl = vsetvl_e8mf2(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8mf2_imm31()\n+{\n+  size_t vl = vsetvl_e8mf2(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8mf2_imm32()\n+{\n+  size_t vl = vsetvl_e8mf2(32);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8mf2(size_t avl)\n+{\n+  size_t vl = vsetvl_e8mf2(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e8mf2()\n+{\n+  size_t vl = vsetvlmax_e8mf2();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8m1_imm0()\n+{\n+  size_t vl = vsetvl_e8m1(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8m1_imm31()\n+{\n+  size_t vl = vsetvl_e8m1(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8m1_imm32()\n+{\n+  size_t vl = vsetvl_e8m1(32);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8m1(size_t avl)\n+{\n+  size_t vl = vsetvl_e8m1(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e8m1()\n+{\n+  size_t vl = vsetvlmax_e8m1();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8m2_imm0()\n+{\n+  size_t vl = vsetvl_e8m2(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8m2_imm31()\n+{\n+  size_t vl = vsetvl_e8m2(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8m2_imm32()\n+{\n+  size_t vl = vsetvl_e8m2(32);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8m2(size_t avl)\n+{\n+  size_t vl = vsetvl_e8m2(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e8m2()\n+{\n+  size_t vl = vsetvlmax_e8m2();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8m4_imm0()\n+{\n+  size_t vl = vsetvl_e8m4(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8m4_imm31()\n+{\n+  size_t vl = vsetvl_e8m4(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8m4_imm32()\n+{\n+  size_t vl = vsetvl_e8m4(32);\n+  return vl;\n+}\n+size_t test_vsetvl_e8m4(size_t avl)\n+{\n+  size_t vl = vsetvl_e8m4(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e8m4()\n+{\n+  size_t vl = vsetvlmax_e8m4();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8m8_imm0()\n+{\n+  size_t vl = vsetvl_e8m8(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8m8_imm31()\n+{\n+  size_t vl = vsetvl_e8m8(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8m8_imm32()\n+{\n+  size_t vl = vsetvl_e8m8(32);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e8m8(size_t avl)\n+{\n+  size_t vl = vsetvl_e8m8(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e8m8()\n+{\n+  size_t vl = vsetvlmax_e8m8();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16mf4_imm0()\n+{\n+  size_t vl = vsetvl_e16mf4(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16mf4_imm31()\n+{\n+  size_t vl = vsetvl_e16mf4(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16mf4_imm32()\n+{\n+  size_t vl = vsetvl_e16mf4(32);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16mf4(size_t avl)\n+{\n+  size_t vl = vsetvl_e16mf4(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e16mf4()\n+{\n+  size_t vl = vsetvlmax_e16mf4();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16mf2_imm0()\n+{\n+  size_t vl = vsetvl_e16mf2(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16mf2_imm31()\n+{\n+  size_t vl = vsetvl_e16mf2(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16mf2_imm32()\n+{\n+  size_t vl = vsetvl_e16mf2(32);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16mf2(size_t avl)\n+{\n+  size_t vl = vsetvl_e16mf2(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e16mf2()\n+{\n+  size_t vl = vsetvlmax_e16mf2();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16m1_imm0()\n+{\n+  size_t vl = vsetvl_e16m1(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16m1_imm31()\n+{\n+  size_t vl = vsetvl_e16m1(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16m1_imm32()\n+{\n+  size_t vl = vsetvl_e16m1(32);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16m1(size_t avl)\n+{\n+  size_t vl = vsetvl_e16m1(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e16m1()\n+{\n+  size_t vl = vsetvlmax_e16m1();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16m2_imm0()\n+{\n+  size_t vl = vsetvl_e16m2(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16m2_imm31()\n+{\n+  size_t vl = vsetvl_e16m2(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16m2_imm32()\n+{\n+  size_t vl = vsetvl_e16m2(32);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16m2(size_t avl)\n+{\n+  size_t vl = vsetvl_e16m2(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e16m2()\n+{\n+  size_t vl = vsetvlmax_e16m2();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16m4_imm0()\n+{\n+  size_t vl = vsetvl_e16m4(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16m4_imm31()\n+{\n+  size_t vl = vsetvl_e16m4(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16m4_imm32()\n+{\n+  size_t vl = vsetvl_e16m4(32);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16m4(size_t avl)\n+{\n+  size_t vl = vsetvl_e16m4(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e16m4()\n+{\n+  size_t vl = vsetvlmax_e16m4();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16m8_imm0()\n+{\n+  size_t vl = vsetvl_e16m8(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16m8_imm31()\n+{\n+  size_t vl = vsetvl_e16m8(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16m8_imm32()\n+{\n+  size_t vl = vsetvl_e16m8(32);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e16m8(size_t avl)\n+{\n+  size_t vl = vsetvl_e16m8(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e16m8()\n+{\n+  size_t vl = vsetvlmax_e16m8();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e32mf2_imm0()\n+{\n+  size_t vl = vsetvl_e32mf2(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e32mf2_imm31()\n+{\n+  size_t vl = vsetvl_e32mf2(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e32mf2_imm32()\n+{\n+  size_t vl = vsetvl_e32mf2(32);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e32mf2(size_t avl)\n+{\n+  size_t vl = vsetvl_e32mf2(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e32mf2()\n+{\n+  size_t vl = vsetvlmax_e32mf2();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e32m1_imm0()\n+{\n+  size_t vl = vsetvl_e32m1(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e32m1_imm31()\n+{\n+  size_t vl = vsetvl_e32m1(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e32m1_imm32()\n+{\n+  size_t vl = vsetvl_e32m1(32);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e32m1(size_t avl)\n+{\n+  size_t vl = vsetvl_e32m1(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e32m1()\n+{\n+  size_t vl = vsetvlmax_e32m1();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e32m2_imm0()\n+{\n+  size_t vl = vsetvl_e32m2(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e32m2_imm31()\n+{\n+  size_t vl = vsetvl_e32m2(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e32m2_imm32()\n+{\n+  size_t vl = vsetvl_e32m2(32);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e32m2(size_t avl)\n+{\n+  size_t vl = vsetvl_e32m2(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e32m2()\n+{\n+  size_t vl = vsetvlmax_e32m2();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e32m4_imm0()\n+{\n+  size_t vl = vsetvl_e32m4(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e32m4_imm31()\n+{\n+  size_t vl = vsetvl_e32m4(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e32m4_imm32()\n+{\n+  size_t vl = vsetvl_e32m4(32);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e32m4(size_t avl)\n+{\n+  size_t vl = vsetvl_e32m4(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e32m4()\n+{\n+  size_t vl = vsetvlmax_e32m4();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e32m8_imm0()\n+{\n+  size_t vl = vsetvl_e32m8(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e32m8_imm31()\n+{\n+  size_t vl = vsetvl_e32m8(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e32m8_imm32()\n+{\n+  size_t vl = vsetvl_e32m8(32);\n+  return vl;\n+}\n+size_t test_vsetvl_e32m8(size_t avl)\n+{\n+  size_t vl = vsetvl_e32m8(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e32m8()\n+{\n+  size_t vl = vsetvlmax_e32m8();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e64m1_imm0()\n+{\n+  size_t vl = vsetvl_e64m1(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e64m1_imm31()\n+{\n+  size_t vl = vsetvl_e64m1(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e64m1_imm32()\n+{\n+  size_t vl = vsetvl_e64m1(32);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e64m1(size_t avl)\n+{\n+  size_t vl = vsetvl_e64m1(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e64m1()\n+{\n+  size_t vl = vsetvlmax_e64m1();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e64m2_imm0()\n+{\n+  size_t vl = vsetvl_e64m2(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e64m2_imm31()\n+{\n+  size_t vl = vsetvl_e64m2(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e64m2_imm32()\n+{\n+  size_t vl = vsetvl_e64m2(32);\n+  return vl;\n+}\n+size_t test_vsetvl_e64m2(size_t avl)\n+{\n+  size_t vl = vsetvl_e64m2(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e64m2()\n+{\n+  size_t vl = vsetvlmax_e64m2();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e64m4_imm0()\n+{\n+  size_t vl = vsetvl_e64m4(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e64m4_imm31()\n+{\n+  size_t vl = vsetvl_e64m4(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e64m4_imm32()\n+{\n+  size_t vl = vsetvl_e64m4(32);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e64m4(size_t avl)\n+{\n+  size_t vl = vsetvl_e64m4(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e64m4()\n+{\n+  size_t vl = vsetvlmax_e64m4();\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e64m8_imm0()\n+{\n+  size_t vl = vsetvl_e64m8(0);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e64m8_imm31()\n+{\n+  size_t vl = vsetvl_e64m8(31);\n+  return vl;\n+}\n+\n+size_t test_vsetvl_e64m8_imm32()\n+{\n+  size_t vl = vsetvl_e64m8(32);\n+  return vl;\n+}\n+size_t test_vsetvl_e64m8(size_t avl)\n+{\n+  size_t vl = vsetvl_e64m8(avl);\n+  return vl;\n+}\n+\n+size_t test_vsetvlmax_e64m8()\n+{\n+  size_t vl = vsetvlmax_e64m8();\n+  return vl;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e8,\\s*mf8,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e8,\\s*mf8,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e8,\\s*mf8,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e8,\\s*mf8,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e8,\\s*mf4,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e8,\\s*mf4,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e8,\\s*mf4,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e8,\\s*mf4,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e8,\\s*mf2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e8,\\s*mf2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e8,\\s*mf2,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e8,\\s*mf2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e8,\\s*m1,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e8,\\s*m1,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e8,\\s*m1,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e8,\\s*m1,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e8,\\s*m2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e8,\\s*m2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e8,\\s*m2,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e8,\\s*m2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e8,\\s*m4,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e8,\\s*m4,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e8,\\s*m4,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e8,\\s*m4,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e8,\\s*m8,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e8,\\s*m8,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e8,\\s*m8,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e8,\\s*m8,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e16,\\s*mf4,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e16,\\s*mf4,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e16,\\s*mf4,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e16,\\s*mf4,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e16,\\s*mf2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e16,\\s*mf2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e16,\\s*mf2,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e16,\\s*mf2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e16,\\s*m1,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e16,\\s*m1,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e16,\\s*m1,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e16,\\s*m1,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e16,\\s*m2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e16,\\s*m2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e16,\\s*m2,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e16,\\s*m2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e16,\\s*m4,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e16,\\s*m4,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e16,\\s*m4,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e16,\\s*m4,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e16,\\s*m8,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e16,\\s*m8,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e16,\\s*m8,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e16,\\s*m8,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e32,\\s*mf2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e32,\\s*mf2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e32,\\s*mf2,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e32,\\s*mf2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e32,\\s*m1,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e32,\\s*m1,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e32,\\s*m1,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e32,\\s*m1,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e32,\\s*m2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e32,\\s*m2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e32,\\s*m2,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e32,\\s*m2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e32,\\s*m4,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e32,\\s*m4,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e32,\\s*m4,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e32,\\s*m4,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e32,\\s*m8,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e32,\\s*m8,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e32,\\s*m8,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e32,\\s*m8,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e64,\\s*m1,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e64,\\s*m1,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e64,\\s*m1,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e64,\\s*m1,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e64,\\s*m2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e64,\\s*m2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e64,\\s*m2,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e64,\\s*m2,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e64,\\s*m4,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e64,\\s*m4,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e64,\\s*m4,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e64,\\s*m4,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*0,\\s*e64,\\s*m8,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*31,\\s*e64,\\s*m8,\\s*ta,\\s*mu} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*e64,\\s*m8,\\s*ta,\\s*mu} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+(?:ra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7]),\\s*zero,\\s*e64,\\s*m8,\\s*ta,\\s*mu} 1 } } */"}]}