{"sha": "b21f7d53095b253753c5622f99809e9c82fd3009", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIxZjdkNTMwOTViMjUzNzUzYzU2MjJmOTk4MDllOWM4MmZkMzAwOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T10:53:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T10:53:10Z"}, "message": "[AArch64] Add SVE conditional floating-point unary patterns\n\nThis patch adds patterns to match conditional unary operations\non floating-point modes.  At the moment we rely on combine to merge\nseparate arithmetic and vcond_mask operations, and since the latter\ndoesn't accept zero operands, we miss out on the opportunity to use\nthe movprfx /z alternative.  (This alternative is tested by the ACLE\npatches though.)\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md\n\t(*cond_<SVE_COND_FP_UNARY:optab><SVE_F:mode>_2): New pattern.\n\t(*cond_<SVE_COND_FP_UNARY:optab><SVE_F:mode>_any): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cond_unary_1.c: Add tests for\n\tfloating-point types.\n\t* gcc.target/aarch64/sve/cond_unary_2.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_unary_3.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_unary_4.c: Likewise.\n\nCo-Authored-By: Kugan Vivekanandarajah <kuganv@linaro.org>\n\nFrom-SVN: r274477", "tree": {"sha": "0cade0fa05ef4856de9276a27402a575a3f99d30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cade0fa05ef4856de9276a27402a575a3f99d30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b21f7d53095b253753c5622f99809e9c82fd3009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b21f7d53095b253753c5622f99809e9c82fd3009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b21f7d53095b253753c5622f99809e9c82fd3009", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b21f7d53095b253753c5622f99809e9c82fd3009/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c9f496337f754f7c22afb46b017871db5844a97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9f496337f754f7c22afb46b017871db5844a97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c9f496337f754f7c22afb46b017871db5844a97"}], "stats": {"total": 181, "additions": 158, "deletions": 23}, "files": [{"sha": "bab95eb1e2ab7867a5db9ec35d918fd084341d8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21f7d53095b253753c5622f99809e9c82fd3009/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21f7d53095b253753c5622f99809e9c82fd3009/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b21f7d53095b253753c5622f99809e9c82fd3009", "patch": "@@ -1,3 +1,10 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* config/aarch64/aarch64-sve.md\n+\t(*cond_<SVE_COND_FP_UNARY:optab><SVE_F:mode>_2): New pattern.\n+\t(*cond_<SVE_COND_FP_UNARY:optab><SVE_F:mode>_any): Likewise.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "da49899b0f77b3e4285e2e8e5ddea4035e4f5ad3", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21f7d53095b253753c5622f99809e9c82fd3009/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21f7d53095b253753c5622f99809e9c82fd3009/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=b21f7d53095b253753c5622f99809e9c82fd3009", "patch": "@@ -1624,6 +1624,62 @@\n   \"<sve_fp_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n )\n \n+;; Predicated floating-point unary arithmetic, merging with the first input.\n+(define_insn_and_rewrite \"*cond_<optab><mode>_2\"\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_F\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (unspec:SVE_F\n+\t     [(match_operand 3)\n+\t      (match_operand:SI 4 \"aarch64_sve_gp_strictness\")\n+\t      (match_operand:SVE_F 2 \"register_operand\" \"0, w\")]\n+\t     SVE_COND_FP_UNARY)\n+\t   (match_dup 2)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE && aarch64_sve_pred_dominates_p (&operands[3], operands[1])\"\n+  \"@\n+   <sve_fp_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>\n+   movprfx\\t%0, %2\\;<sve_fp_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n+  \"&& !rtx_equal_p (operands[1], operands[3])\"\n+  {\n+    operands[3] = copy_rtx (operands[1]);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Predicated floating-point unary arithmetic, merging with an independent\n+;; value.\n+;;\n+;; The earlyclobber isn't needed for the first alternative, but omitting\n+;; it would only help the case in which operands 2 and 3 are the same,\n+;; which is handled above rather than here.  Marking all the alternatives\n+;; as earlyclobber helps to make the instruction more regular to the\n+;; register allocator.\n+(define_insn_and_rewrite \"*cond_<optab><mode>_any\"\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=&w, ?&w, ?&w\")\n+\t(unspec:SVE_F\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (unspec:SVE_F\n+\t     [(match_operand 4)\n+\t      (match_operand:SI 5 \"aarch64_sve_gp_strictness\")\n+\t      (match_operand:SVE_F 2 \"register_operand\" \"w, w, w\")]\n+\t     SVE_COND_FP_UNARY)\n+\t   (match_operand:SVE_F 3 \"aarch64_simd_reg_or_zero\" \"0, Dz, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\n+   && !rtx_equal_p (operands[2], operands[3])\n+   && aarch64_sve_pred_dominates_p (&operands[4], operands[1])\"\n+  \"@\n+   <sve_fp_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;<sve_fp_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\n+   movprfx\\t%0, %3\\;<sve_fp_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n+  \"&& !rtx_equal_p (operands[1], operands[4])\"\n+  {\n+    operands[4] = copy_rtx (operands[1]);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes,yes\")]\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [PRED] Inverse\n ;; -------------------------------------------------------------------------"}, {"sha": "8d23fffac9306a58a75a8b061500a941b5201b42", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21f7d53095b253753c5622f99809e9c82fd3009/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21f7d53095b253753c5622f99809e9c82fd3009/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b21f7d53095b253753c5622f99809e9c82fd3009", "patch": "@@ -1,3 +1,12 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* gcc.target/aarch64/sve/cond_unary_1.c: Add tests for\n+\tfloating-point types.\n+\t* gcc.target/aarch64/sve/cond_unary_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_unary_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_unary_4.c: Likewise.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "2b5f9c345ab7b4cbcfe33b8621e8eaad52f0b3bd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_1.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21f7d53095b253753c5622f99809e9c82fd3009/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21f7d53095b253753c5622f99809e9c82fd3009/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_1.c?ref=b21f7d53095b253753c5622f99809e9c82fd3009", "patch": "@@ -15,15 +15,22 @@\n       r[i] = pred[i] ? OP (a[i]) : a[i];\t\t\t\\\n   }\n \n-#define TEST_TYPE(T, TYPE) \\\n+#define TEST_INT_TYPE(T, TYPE) \\\n   T (TYPE, abs) \\\n   T (TYPE, neg)\n \n+#define TEST_FLOAT_TYPE(T, TYPE, SUFFIX) \\\n+  T (TYPE, __builtin_fabs##SUFFIX) \\\n+  T (TYPE, neg)\n+\n #define TEST_ALL(T) \\\n-  TEST_TYPE (T, int8_t) \\\n-  TEST_TYPE (T, int16_t) \\\n-  TEST_TYPE (T, int32_t) \\\n-  TEST_TYPE (T, int64_t)\n+  TEST_INT_TYPE (T, int8_t) \\\n+  TEST_INT_TYPE (T, int16_t) \\\n+  TEST_INT_TYPE (T, int32_t) \\\n+  TEST_INT_TYPE (T, int64_t) \\\n+  TEST_FLOAT_TYPE (T, _Float16, f16) \\\n+  TEST_FLOAT_TYPE (T, float, f) \\\n+  TEST_FLOAT_TYPE (T, double, )\n \n TEST_ALL (DEF_LOOP)\n \n@@ -37,6 +44,14 @@ TEST_ALL (DEF_LOOP)\n /* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n \n+/* { dg-final { scan-assembler-times {\\tfabs\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabs\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabs\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfneg\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfneg\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfneg\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n /* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n /* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n /* XFAILed because the ?: gets canonicalized so that the operation is in"}, {"sha": "adf828398bba67c810d015fcf7126511b5140f83", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_2.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21f7d53095b253753c5622f99809e9c82fd3009/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21f7d53095b253753c5622f99809e9c82fd3009/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_2.c?ref=b21f7d53095b253753c5622f99809e9c82fd3009", "patch": "@@ -16,15 +16,22 @@\n       r[i] = pred[i] ? OP (a[i]) : b[i];\t\t\t\\\n   }\n \n-#define TEST_TYPE(T, TYPE) \\\n+#define TEST_INT_TYPE(T, TYPE) \\\n   T (TYPE, abs) \\\n   T (TYPE, neg)\n \n+#define TEST_FLOAT_TYPE(T, TYPE, SUFFIX) \\\n+  T (TYPE, __builtin_fabs##SUFFIX) \\\n+  T (TYPE, neg)\n+\n #define TEST_ALL(T) \\\n-  TEST_TYPE (T, int8_t) \\\n-  TEST_TYPE (T, int16_t) \\\n-  TEST_TYPE (T, int32_t) \\\n-  TEST_TYPE (T, int64_t)\n+  TEST_INT_TYPE (T, int8_t) \\\n+  TEST_INT_TYPE (T, int16_t) \\\n+  TEST_INT_TYPE (T, int32_t) \\\n+  TEST_INT_TYPE (T, int64_t) \\\n+  TEST_FLOAT_TYPE (T, _Float16, f16) \\\n+  TEST_FLOAT_TYPE (T, float, f) \\\n+  TEST_FLOAT_TYPE (T, double, )\n \n TEST_ALL (DEF_LOOP)\n \n@@ -38,6 +45,17 @@ TEST_ALL (DEF_LOOP)\n /* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n \n+/* { dg-final { scan-assembler-times {\\tfabs\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabs\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabs\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfneg\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfneg\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfneg\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n /* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n-/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* At the moment we don't manage to avoid using MOVPRFX for the\n+   floating-point functions.  */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\t} 6 } } */\n /* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "dde0fdd92952d8223c652a7d8ea9190337e2bc7e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_3.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21f7d53095b253753c5622f99809e9c82fd3009/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21f7d53095b253753c5622f99809e9c82fd3009/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_3.c?ref=b21f7d53095b253753c5622f99809e9c82fd3009", "patch": "@@ -15,15 +15,22 @@\n       r[i] = pred[i] ? OP (a[i]) : 5;\t\t\t\t\\\n   }\n \n-#define TEST_TYPE(T, TYPE) \\\n+#define TEST_INT_TYPE(T, TYPE) \\\n   T (TYPE, abs) \\\n   T (TYPE, neg)\n \n+#define TEST_FLOAT_TYPE(T, TYPE, SUFFIX) \\\n+  T (TYPE, __builtin_fabs##SUFFIX) \\\n+  T (TYPE, neg)\n+\n #define TEST_ALL(T) \\\n-  TEST_TYPE (T, int8_t) \\\n-  TEST_TYPE (T, int16_t) \\\n-  TEST_TYPE (T, int32_t) \\\n-  TEST_TYPE (T, int64_t)\n+  TEST_INT_TYPE (T, int8_t) \\\n+  TEST_INT_TYPE (T, int16_t) \\\n+  TEST_INT_TYPE (T, int32_t) \\\n+  TEST_INT_TYPE (T, int64_t) \\\n+  TEST_FLOAT_TYPE (T, _Float16, f16) \\\n+  TEST_FLOAT_TYPE (T, float, f) \\\n+  TEST_FLOAT_TYPE (T, double, )\n \n TEST_ALL (DEF_LOOP)\n \n@@ -37,7 +44,15 @@ TEST_ALL (DEF_LOOP)\n /* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n \n-/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+, z[0-9]+\\n} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tfabs\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabs\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabs\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfneg\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfneg\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfneg\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+, z[0-9]+\\n} 14 } } */\n \n /* { dg-final { scan-assembler-not {\\tmov\\tz[^\\n]*z} } } */\n /* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "4604365fbef050a16abebdedbb18c14f3c29165e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_4.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21f7d53095b253753c5622f99809e9c82fd3009/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21f7d53095b253753c5622f99809e9c82fd3009/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_4.c?ref=b21f7d53095b253753c5622f99809e9c82fd3009", "patch": "@@ -15,15 +15,22 @@\n       r[i] = pred[i] ? OP (a[i]) : 0;\t\t\t\t\\\n   }\n \n-#define TEST_TYPE(T, TYPE) \\\n+#define TEST_INT_TYPE(T, TYPE) \\\n   T (TYPE, abs) \\\n   T (TYPE, neg)\n \n+#define TEST_FLOAT_TYPE(T, TYPE, SUFFIX) \\\n+  T (TYPE, __builtin_fabs##SUFFIX) \\\n+  T (TYPE, neg)\n+\n #define TEST_ALL(T) \\\n-  TEST_TYPE (T, int8_t) \\\n-  TEST_TYPE (T, int16_t) \\\n-  TEST_TYPE (T, int32_t) \\\n-  TEST_TYPE (T, int64_t)\n+  TEST_INT_TYPE (T, int8_t) \\\n+  TEST_INT_TYPE (T, int16_t) \\\n+  TEST_INT_TYPE (T, int32_t) \\\n+  TEST_INT_TYPE (T, int64_t) \\\n+  TEST_FLOAT_TYPE (T, _Float16, f16) \\\n+  TEST_FLOAT_TYPE (T, float, f) \\\n+  TEST_FLOAT_TYPE (T, double, )\n \n TEST_ALL (DEF_LOOP)\n \n@@ -37,11 +44,19 @@ TEST_ALL (DEF_LOOP)\n /* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n \n+/* { dg-final { scan-assembler-times {\\tfabs\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabs\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabs\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfneg\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfneg\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfneg\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n /* Really we should be able to use MOVPRFX /z here, but at the moment\n    we're relying on combine to merge a SEL and an arithmetic operation,\n    and the SEL doesn't allow the \"false\" value to be zero when the \"true\"\n    value is a register.  */\n-/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+, z[0-9]+\\n} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+, z[0-9]+\\n} 14 } } */\n \n /* { dg-final { scan-assembler-not {\\tmov\\tz[^\\n]*z} } } */\n /* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}]}