{"sha": "94ada647bf35c727c17ade60d06af6803a7e5668", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRhZGE2NDdiZjM1YzcyN2MxN2FkZTYwZDA2YWY2ODAzYTdlNTY2OA==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-07-05T19:27:51Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-07-05T19:27:51Z"}, "message": "Remove has_utf8bom flag from AST and HIR Crate classes\n\nThe lexer deals with the UTF-8 BOM and the parser cannot detect\nwhether there is or isn't a BOM at the start of a file. The flag isn't\nrelevant or useful in the AST and HIR Crate classes.", "tree": {"sha": "6e3a1c42920a2dd59c1509c92dba376e51a1ffa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e3a1c42920a2dd59c1509c92dba376e51a1ffa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94ada647bf35c727c17ade60d06af6803a7e5668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ada647bf35c727c17ade60d06af6803a7e5668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94ada647bf35c727c17ade60d06af6803a7e5668", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ada647bf35c727c17ade60d06af6803a7e5668/comments", "author": null, "committer": null, "parents": [{"sha": "29192293fdce8b3cf4888bbe0d5f504655e26cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29192293fdce8b3cf4888bbe0d5f504655e26cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29192293fdce8b3cf4888bbe0d5f504655e26cd5"}], "stats": {"total": 43, "additions": 9, "deletions": 34}, "files": [{"sha": "dd55e1ddbd2ad5b60e9a71b4bdb31af14db7631d", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ada647bf35c727c17ade60d06af6803a7e5668/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ada647bf35c727c17ade60d06af6803a7e5668/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=94ada647bf35c727c17ade60d06af6803a7e5668", "patch": "@@ -172,9 +172,6 @@ Crate::as_string () const\n   rust_debug (\"beginning crate recursive as-string\");\n \n   std::string str (\"Crate: \");\n-  // add utf8bom\n-  if (has_utf8bom)\n-    str += \"\\n has utf8bom\";\n \n   // inner attributes\n   str += append_attributes (inner_attrs, INNER);"}, {"sha": "75b08f8aa66c56b7268085245bcff082f7d96023", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ada647bf35c727c17ade60d06af6803a7e5668/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ada647bf35c727c17ade60d06af6803a7e5668/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=94ada647bf35c727c17ade60d06af6803a7e5668", "patch": "@@ -1550,8 +1550,6 @@ class MacroInvocationSemi : public MacroItem,\n // A crate AST object - holds all the data for a single compilation unit\n struct Crate\n {\n-  bool has_utf8bom;\n-\n   std::vector<Attribute> inner_attrs;\n   // dodgy spacing required here\n   /* TODO: is it better to have a vector of items here or a module (implicit\n@@ -1563,16 +1561,14 @@ struct Crate\n public:\n   // Constructor\n   Crate (std::vector<std::unique_ptr<Item> > items,\n-\t std::vector<Attribute> inner_attrs, bool has_utf8bom = false)\n-    : has_utf8bom (has_utf8bom), inner_attrs (std::move (inner_attrs)),\n-      items (std::move (items)),\n+\t std::vector<Attribute> inner_attrs)\n+    : inner_attrs (std::move (inner_attrs)), items (std::move (items)),\n       node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n \n   // Copy constructor with vector clone\n   Crate (Crate const &other)\n-    : has_utf8bom (other.has_utf8bom), inner_attrs (other.inner_attrs),\n-      node_id (other.node_id)\n+    : inner_attrs (other.inner_attrs), node_id (other.node_id)\n   {\n     items.reserve (other.items.size ());\n     for (const auto &e : other.items)\n@@ -1585,7 +1581,6 @@ struct Crate\n   Crate &operator= (Crate const &other)\n   {\n     inner_attrs = other.inner_attrs;\n-    has_utf8bom = other.has_utf8bom;\n     node_id = other.node_id;\n \n     items.reserve (other.items.size ());"}, {"sha": "01abd84627ba4e8e17428636e5051319556e4894", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ada647bf35c727c17ade60d06af6803a7e5668/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ada647bf35c727c17ade60d06af6803a7e5668/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=94ada647bf35c727c17ade60d06af6803a7e5668", "patch": "@@ -40,7 +40,6 @@ HIR::Crate\n ASTLowering::go ()\n {\n   std::vector<std::unique_ptr<HIR::Item> > items;\n-  bool has_utf8bom = false;\n \n   for (auto it = astCrate.items.begin (); it != astCrate.items.end (); it++)\n     {\n@@ -55,8 +54,7 @@ ASTLowering::go ()\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n \t\t\t\t UNKNOWN_LOCAL_DEFID);\n \n-  return HIR::Crate (std::move (items), astCrate.get_inner_attrs (), mapping,\n-\t\t     has_utf8bom);\n+  return HIR::Crate (std::move (items), astCrate.get_inner_attrs (), mapping);\n }\n \n // rust-ast-lower-block.h"}, {"sha": "05c75e0640390b898d8315da64d8f44825a29c90", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ada647bf35c727c17ade60d06af6803a7e5668/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ada647bf35c727c17ade60d06af6803a7e5668/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=94ada647bf35c727c17ade60d06af6803a7e5668", "patch": "@@ -73,11 +73,6 @@ std::string\n Crate::as_string () const\n {\n   std::string str (\"HIR::Crate: \");\n-  // add utf8bom\n-  if (has_utf8bom)\n-    {\n-      str += \"\\n has utf8bom\";\n-    }\n \n   // inner attributes\n   str += \"\\n inner attributes: \";"}, {"sha": "1819d17b585eb354d49ef3abc051e9aa5b6ee9ec", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ada647bf35c727c17ade60d06af6803a7e5668/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ada647bf35c727c17ade60d06af6803a7e5668/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=94ada647bf35c727c17ade60d06af6803a7e5668", "patch": "@@ -678,8 +678,6 @@ class ImplItem\n // A crate HIR object - holds all the data for a single compilation unit\n struct Crate\n {\n-  bool has_utf8bom;\n-\n   AST::AttrVec inner_attrs;\n   // dodgy spacing required here\n   /* TODO: is it better to have a vector of items here or a module (implicit\n@@ -691,15 +689,14 @@ struct Crate\n public:\n   // Constructor\n   Crate (std::vector<std::unique_ptr<Item> > items, AST::AttrVec inner_attrs,\n-\t Analysis::NodeMapping mappings, bool has_utf8bom = false)\n-    : has_utf8bom (has_utf8bom), inner_attrs (std::move (inner_attrs)),\n-      items (std::move (items)), mappings (mappings)\n+\t Analysis::NodeMapping mappings)\n+    : inner_attrs (std::move (inner_attrs)), items (std::move (items)),\n+      mappings (mappings)\n   {}\n \n   // Copy constructor with vector clone\n   Crate (Crate const &other)\n-    : has_utf8bom (other.has_utf8bom), inner_attrs (other.inner_attrs),\n-      mappings (other.mappings)\n+    : inner_attrs (other.inner_attrs), mappings (other.mappings)\n   {\n     items.reserve (other.items.size ());\n     for (const auto &e : other.items)\n@@ -712,7 +709,6 @@ struct Crate\n   Crate &operator= (Crate const &other)\n   {\n     inner_attrs = other.inner_attrs;\n-    has_utf8bom = other.has_utf8bom;\n     mappings = other.mappings;\n \n     items.reserve (other.items.size ());"}, {"sha": "a8597fa401ef8a3625f1feccbb51d8e152b626e0", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ada647bf35c727c17ade60d06af6803a7e5668/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ada647bf35c727c17ade60d06af6803a7e5668/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=94ada647bf35c727c17ade60d06af6803a7e5668", "patch": "@@ -393,12 +393,6 @@ template <typename ManagedTokenSource>\n AST::Crate\n Parser<ManagedTokenSource>::parse_crate ()\n {\n-  /* TODO: determine if has utf8bom. Currently, is eliminated\n-   * by the lexing phase. Not useful for the compiler anyway, so maybe a\n-   * better idea would be to eliminate\n-   * the has_utf8bom variable from the crate data structure. */\n-  bool has_utf8bom = false;\n-\n   // parse inner attributes\n   AST::AttrVec inner_attrs = parse_inner_attributes ();\n \n@@ -429,7 +423,7 @@ Parser<ManagedTokenSource>::parse_crate ()\n   for (const auto &error : error_table)\n     error.emit_error ();\n \n-  return AST::Crate (std::move (items), std::move (inner_attrs), has_utf8bom);\n+  return AST::Crate (std::move (items), std::move (inner_attrs));\n }\n \n // Parse a contiguous block of inner attributes."}]}