{"sha": "63100c54335ac179337b6efff89243c75124b1a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMxMDBjNTQzMzVhYzE3OTMzN2I2ZWZmZjg5MjQzYzc1MTI0YjFhMw==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2018-11-11T22:20:19Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2018-11-11T22:20:19Z"}, "message": "re PR libstdc++/54005 (Use __atomic_always_lock_free in libstdc++ is_lock_free instead of __atomic_is_lock_free)\n\n\tPR libstdc++-v3/54005\n\t* include/bits/atomic_base.h (__atomic_base<_TTp>::is_lock_free(),\n\t__atomic_base<_PTp*>::is_lock_free()): Call __atomic_always_lock_free\n\twith the type-derived _S_alignment instead of __alignof the object.\n\t* include/std/atomic (atomic<T>::is_lock_free()): Likewise.\n\nFrom-SVN: r266018", "tree": {"sha": "ab9e784bb5df4f4654a2660d7fc40012ea892d22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab9e784bb5df4f4654a2660d7fc40012ea892d22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63100c54335ac179337b6efff89243c75124b1a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63100c54335ac179337b6efff89243c75124b1a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63100c54335ac179337b6efff89243c75124b1a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63100c54335ac179337b6efff89243c75124b1a3/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6157c37500dd889e46ded9a8eb357de9a71de0eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6157c37500dd889e46ded9a8eb357de9a71de0eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6157c37500dd889e46ded9a8eb357de9a71de0eb"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "4742ea41f8dd4b78609d144d43fd538486720548", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63100c54335ac179337b6efff89243c75124b1a3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63100c54335ac179337b6efff89243c75124b1a3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=63100c54335ac179337b6efff89243c75124b1a3", "patch": "@@ -1,3 +1,11 @@\n+2018-11-11  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR libstdc++-v3/54005\n+\t* include/bits/atomic_base.h (__atomic_base<_TTp>::is_lock_free(),\n+\t__atomic_base<_PTp*>::is_lock_free()): Call __atomic_always_lock_free\n+\twith the type-derived _S_alignment instead of __alignof the object.\n+\t* include/std/atomic (atomic<T>::is_lock_free()): Likewise.\n+\n 2018-11-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \tImplement P0318R1 unwrap_ref_decay and unwrap_reference"}, {"sha": "57d51bf3fad454d94639ea26fd482026471f0d38", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63100c54335ac179337b6efff89243c75124b1a3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63100c54335ac179337b6efff89243c75124b1a3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=63100c54335ac179337b6efff89243c75124b1a3", "patch": "@@ -355,15 +355,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \t// Use a fake, minimally aligned pointer.\n \treturn __atomic_is_lock_free(sizeof(_M_i),\n-\t    reinterpret_cast<void *>(-__alignof(_M_i)));\n+\t    reinterpret_cast<void *>(-_S_alignment));\n       }\n \n       bool\n       is_lock_free() const volatile noexcept\n       {\n \t// Use a fake, minimally aligned pointer.\n \treturn __atomic_is_lock_free(sizeof(_M_i),\n-\t    reinterpret_cast<void *>(-__alignof(_M_i)));\n+\t    reinterpret_cast<void *>(-_S_alignment));\n       }\n \n       _GLIBCXX_ALWAYS_INLINE void"}, {"sha": "83206dc63a067af9c1815f47227f6a807ba3a156", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63100c54335ac179337b6efff89243c75124b1a3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63100c54335ac179337b6efff89243c75124b1a3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=63100c54335ac179337b6efff89243c75124b1a3", "patch": "@@ -222,15 +222,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \t// Produce a fake, minimally aligned pointer.\n \treturn __atomic_is_lock_free(sizeof(_M_i),\n-\t    reinterpret_cast<void *>(-__alignof(_M_i)));\n+\t    reinterpret_cast<void *>(-_S_alignment));\n       }\n \n       bool\n       is_lock_free() const volatile noexcept\n       {\n \t// Produce a fake, minimally aligned pointer.\n \treturn __atomic_is_lock_free(sizeof(_M_i),\n-\t    reinterpret_cast<void *>(-__alignof(_M_i)));\n+\t    reinterpret_cast<void *>(-_S_alignment));\n       }\n \n #if __cplusplus >= 201703L"}]}