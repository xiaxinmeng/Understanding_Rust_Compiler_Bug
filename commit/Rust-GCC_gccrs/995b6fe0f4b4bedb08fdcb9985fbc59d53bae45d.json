{"sha": "995b6fe0f4b4bedb08fdcb9985fbc59d53bae45d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk1YjZmZTBmNGI0YmVkYjA4ZmRjYjk5ODVmYmM1OWQ1M2JhZTQ1ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-01-18T09:14:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-01-18T09:14:14Z"}, "message": "re PR tree-optimization/69170 (ICE (segfault) in find_uses_to_rename_use)\n\n2016-01-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/69170\n\t* tree-vect-slp.c (vect_build_slp_tree): Verify we are not\n\tbuilding a vector from scalar results of a pattern stmt.\n\n\t* gcc.dg/torture/pr69170.c: New testcase.\n\nFrom-SVN: r232496", "tree": {"sha": "a73c4b1458167194cea1922da58e5334140bbfd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a73c4b1458167194cea1922da58e5334140bbfd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/995b6fe0f4b4bedb08fdcb9985fbc59d53bae45d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/995b6fe0f4b4bedb08fdcb9985fbc59d53bae45d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/995b6fe0f4b4bedb08fdcb9985fbc59d53bae45d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/995b6fe0f4b4bedb08fdcb9985fbc59d53bae45d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "99e18f02b63c84747f602abe3ae2b1cb9fb009d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e18f02b63c84747f602abe3ae2b1cb9fb009d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99e18f02b63c84747f602abe3ae2b1cb9fb009d3"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "1cc9288a91da657833b492715a35e47462ab7c58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/995b6fe0f4b4bedb08fdcb9985fbc59d53bae45d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/995b6fe0f4b4bedb08fdcb9985fbc59d53bae45d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=995b6fe0f4b4bedb08fdcb9985fbc59d53bae45d", "patch": "@@ -1,3 +1,9 @@\n+2016-01-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69170\n+\t* tree-vect-slp.c (vect_build_slp_tree): Verify we are not\n+\tbuilding a vector from scalar results of a pattern stmt.\n+\n 2016-01-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* haifa-sched.c (autopref_multipass_init): Work around"}, {"sha": "90160933069336aa3865317f3ba58aac359d80fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/995b6fe0f4b4bedb08fdcb9985fbc59d53bae45d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/995b6fe0f4b4bedb08fdcb9985fbc59d53bae45d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=995b6fe0f4b4bedb08fdcb9985fbc59d53bae45d", "patch": "@@ -1,3 +1,8 @@\n+2016-01-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69170\n+\t* gcc.dg/torture/pr69170.c: New testcase.\n+\n 2016-01-17 John David Anglin  <danglin@gcc.gnu.org>\n \n \t* gcc.dg/torture/builtin-integral-1.c: Require c99_runtime."}, {"sha": "2af0bde7dad089e141cf5100d1334467c51dc5b8", "filename": "gcc/testsuite/gcc.dg/torture/pr69170.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/995b6fe0f4b4bedb08fdcb9985fbc59d53bae45d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69170.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/995b6fe0f4b4bedb08fdcb9985fbc59d53bae45d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69170.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69170.c?ref=995b6fe0f4b4bedb08fdcb9985fbc59d53bae45d", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+\n+typedef long sha2_word_t;\n+typedef struct {\n+    sha2_word_t length_upper, length_lower;\n+    char buf[];\n+} hash_state;\n+int a;\n+hash_state b;\n+void fn1()\n+{\n+  a = 0;\n+  for (; a < 8; a++)\n+    b.buf[a + 1024 / 8] = b.length_upper >> (1 - a) * 5;\n+  a = 0;\n+  for (; a < 8; a++)\n+    b.buf[a + 1024 / 8 + 8] = b.length_lower >> (1 - a) * 5;\n+}"}, {"sha": "d5bd92ec031334b1e5627810b54a73b2e22606f6", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/995b6fe0f4b4bedb08fdcb9985fbc59d53bae45d/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/995b6fe0f4b4bedb08fdcb9985fbc59d53bae45d/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=995b6fe0f4b4bedb08fdcb9985fbc59d53bae45d", "patch": "@@ -966,7 +966,12 @@ vect_build_slp_tree (vec_info *vinfo,\n \t{\n \t  /* If we have all children of child built up from scalars then just\n \t     throw that away and build it up this node from scalars.  */\n-\t  if (!SLP_TREE_CHILDREN (child).is_empty ())\n+\t  if (!SLP_TREE_CHILDREN (child).is_empty ()\n+\t      /* ???  Rejecting patterns this way doesn't work.  We'd have to\n+\t\t do extra work to cancel the pattern so the uses see the\n+\t\t scalar version.  */\n+\t      && !is_pattern_stmt_p\n+\t            (vinfo_for_stmt (SLP_TREE_SCALAR_STMTS (child)[0])))\n \t    {\n \t      slp_tree grandchild;\n \n@@ -1110,7 +1115,12 @@ vect_build_slp_tree (vec_info *vinfo,\n \n \t      /* If we have all children of child built up from scalars then\n \t\t just throw that away and build it up this node from scalars.  */\n-\t      if (!SLP_TREE_CHILDREN (child).is_empty ())\n+\t      if (!SLP_TREE_CHILDREN (child).is_empty ()\n+\t\t  /* ???  Rejecting patterns this way doesn't work.  We'd have\n+\t\t     to do extra work to cancel the pattern so the uses see the\n+\t\t     scalar version.  */\n+\t\t  && !is_pattern_stmt_p\n+\t\t\t(vinfo_for_stmt (SLP_TREE_SCALAR_STMTS (child)[0])))\n \t\t{\n \t\t  unsigned int j;\n \t\t  slp_tree grandchild;"}]}