{"sha": "dc4f537942ee67079526e06528a9f0823ee81bf1", "node_id": "C_kwDOANBUbNoAKGRjNGY1Mzc5NDJlZTY3MDc5NTI2ZTA2NTI4YTlmMDgyM2VlODFiZjE", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-16T17:33:07Z"}, "committer": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T11:52:30Z"}, "message": "libproc_macro: Add TokenTree implementation\n\nAdd most parts of TokenTree type implementation.\n\nChangeLog:\n\n\t* librust/proc_macro/rust/lib.rs: Add TokenTree implementation.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "7b4bf3f8ec18b289ab205d1aff83c3d88a0ea4d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b4bf3f8ec18b289ab205d1aff83c3d88a0ea4d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc4f537942ee67079526e06528a9f0823ee81bf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4f537942ee67079526e06528a9f0823ee81bf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc4f537942ee67079526e06528a9f0823ee81bf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4f537942ee67079526e06528a9f0823ee81bf1/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "896533bfff4b29042000d7b4813e6fa3cf30a1c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896533bfff4b29042000d7b4813e6fa3cf30a1c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/896533bfff4b29042000d7b4813e6fa3cf30a1c6"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "48e1bcd76799c4facd435e56e083ef45db9548e1", "filename": "librust/proc_macro/rust/lib.rs", "status": "modified", "additions": 35, "deletions": 15, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4f537942ee67079526e06528a9f0823ee81bf1/librust%2Fproc_macro%2Frust%2Flib.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4f537942ee67079526e06528a9f0823ee81bf1/librust%2Fproc_macro%2Frust%2Flib.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Flib.rs?ref=dc4f537942ee67079526e06528a9f0823ee81bf1", "patch": "@@ -37,52 +37,72 @@ pub enum TokenTree {\n impl TokenTree {\n     /// Get the [`Span`] for this TokenTree.\n     pub fn span(&self) -> Span {\n-        todo!(\"Implement this function\")\n+        match self {\n+            TokenTree::Group(group) => group.span(),\n+            TokenTree::Ident(ident) => ident.span(),\n+            TokenTree::Punct(punct) => punct.span(),\n+            TokenTree::Literal(literal) => literal.span(),\n+        }\n     }\n \n     /// Set the span for this TokenTree.\n     ///\n     /// # Arguments\n     ///\n     /// * `span` - The new span value.\n-    pub fn set_span(&mut self, _span: Span) {\n-        todo!(\"Implement this function\")\n+    pub fn set_span(&mut self, span: Span) {\n+        match self {\n+            TokenTree::Group(group) => group.set_span(span),\n+            TokenTree::Ident(ident) => ident.set_span(span),\n+            TokenTree::Punct(punct) => punct.set_span(span),\n+            TokenTree::Literal(literal) => literal.set_span(span),\n+        }\n     }\n }\n \n impl fmt::Debug for TokenTree {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        todo!(\"Implement this function\")\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            TokenTree::Group(group) => group.fmt(f),\n+            TokenTree::Ident(ident) => ident.fmt(f),\n+            TokenTree::Punct(punct) => punct.fmt(f),\n+            TokenTree::Literal(literal) => literal.fmt(f),\n+        }\n     }\n }\n \n impl fmt::Display for TokenTree {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        todo!(\"Implement this function\")\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            TokenTree::Group(group) => group.fmt(f),\n+            TokenTree::Ident(ident) => ident.fmt(f),\n+            TokenTree::Punct(punct) => punct.fmt(f),\n+            TokenTree::Literal(literal) => literal.fmt(f),\n+        }\n     }\n }\n \n impl From<Group> for TokenTree {\n-    fn from(_g: Group) -> Self {\n-        todo!(\"Implement this function\")\n+    fn from(g: Group) -> Self {\n+        TokenTree::Group(g)\n     }\n }\n \n impl From<Ident> for TokenTree {\n-    fn from(_i: Ident) -> Self {\n-        todo!(\"Implement this function\")\n+    fn from(i: Ident) -> Self {\n+        TokenTree::Ident(i)\n     }\n }\n \n impl From<Punct> for TokenTree {\n-    fn from(_p: Punct) -> Self {\n-        todo!(\"Implement this function\")\n+    fn from(p: Punct) -> Self {\n+        TokenTree::Punct(p)\n     }\n }\n \n impl From<Literal> for TokenTree {\n-    fn from(_l: Literal) -> Self {\n-        todo!(\"Implement this function\")\n+    fn from(l: Literal) -> Self {\n+        TokenTree::Literal(l)\n     }\n }\n "}]}