{"sha": "72938a4c3a475ab3fc3c137d75faef113276aa4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI5MzhhNGMzYTQ3NWFiM2ZjM2MxMzdkNzVmYWVmMTEzMjc2YWE0ZQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1997-11-20T13:53:42Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1997-11-20T13:53:42Z"}, "message": "Add missing @item\n\nFrom-SVN: r16597", "tree": {"sha": "951fdfb3b9b29f06bd79ee72892b23a8c3fcc4c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/951fdfb3b9b29f06bd79ee72892b23a8c3fcc4c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72938a4c3a475ab3fc3c137d75faef113276aa4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72938a4c3a475ab3fc3c137d75faef113276aa4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72938a4c3a475ab3fc3c137d75faef113276aa4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72938a4c3a475ab3fc3c137d75faef113276aa4e/comments", "author": null, "committer": null, "parents": [{"sha": "dd5e269d22880a0a5cfc965865f826fef4d9059b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd5e269d22880a0a5cfc965865f826fef4d9059b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd5e269d22880a0a5cfc965865f826fef4d9059b"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "ab8981667f9c63b0bceba050617d466be614890e", "filename": "gcc/md.texi", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72938a4c3a475ab3fc3c137d75faef113276aa4e/gcc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72938a4c3a475ab3fc3c137d75faef113276aa4e/gcc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmd.texi?ref=72938a4c3a475ab3fc3c137d75faef113276aa4e", "patch": "@@ -174,7 +174,9 @@ Operand numbers must be chosen consecutively counting from zero in\n each instruction pattern.  There may be only one @code{match_operand}\n expression in the pattern for each operand number.  Usually operands\n are numbered in the order of appearance in @code{match_operand}\n-expressions.\n+expressions.  In the case of a @code{define_expand}, any operand numbers\n+used only in @code{match_dup} expressions have higher values than all\n+other operand numbers.\n \n @var{predicate} is a string that is the name of a C function that accepts two\n arguments, an expression and a machine mode.  During matching, the\n@@ -2390,9 +2392,17 @@ nonlocal gotos and a @code{reg} in the other two cases.\n \n @cindex @code{allocate_stack} instruction pattern\n @item @samp{allocate_stack}\n-Subtract (or add if @code{STACK_GROWS_DOWNWARD} is undefined) operand 0 from\n+Subtract (or add if @code{STACK_GROWS_DOWNWARD} is undefined) operand 1 from\n the stack pointer to create space for dynamically allocated data.\n \n+Store the resultant pointer to this space into operand 0.  If you\n+are allocating space from the main stack, do this by emitting a\n+move insn to copy @code{virtual_stack_dynamic_rtx} to operand 0.\n+If you are allocating the space elsewhere, generate code to copy the\n+location of the space to operand 0.  In the latter case, you must\n+ensure this space gets freed when the correspoinding space on the main\n+stack is free.\n+\n Do not define this pattern if all that must be done is the subtraction.\n Some machines require other operations such as stack probes or\n maintaining the back chain.  Define this pattern to emit those\n@@ -2730,6 +2740,7 @@ converted into the appropriate multiplication by a power of two.\n @cindex @code{ior}, canonicalization of\n @cindex @code{and}, canonicalization of\n @cindex De Morgan's law\n+@item\n De`Morgan's Law is used to move bitwise negation inside a bitwise\n logical-and or logical-or operation.  If this results in only one\n operand being a @code{not} expression, it will be the first one."}]}