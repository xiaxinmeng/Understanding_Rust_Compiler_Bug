{"sha": "07523e7c080b44354836524f09f1c9a11f2a1679", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc1MjNlN2MwODBiNDQzNTQ4MzY1MjRmMDlmMWM5YTExZjJhMTY3OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2008-12-10T22:11:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-12-10T22:11:44Z"}, "message": "re PR c++/35319 (ICE throwing fixed-point types)\n\n        PR c++/35319\n        * mangle.c (write_builtin_type): Add mangling for decimal floating\n        point and fixed point types.\n        (write_type): Pass FIXED_POINT_TYPE along.\n        * cp-demangle.c (cplus_demangle_type): Support fixed-point types.\n        (d_print_comp, d_dump): Likewise.\n\nFrom-SVN: r142661", "tree": {"sha": "262e40a0acb4385f32e278194a774e3b2f7f60a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/262e40a0acb4385f32e278194a774e3b2f7f60a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07523e7c080b44354836524f09f1c9a11f2a1679", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07523e7c080b44354836524f09f1c9a11f2a1679", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07523e7c080b44354836524f09f1c9a11f2a1679", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07523e7c080b44354836524f09f1c9a11f2a1679/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "615cb001bb90ef2acb21c011918b456c59ddb5de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/615cb001bb90ef2acb21c011918b456c59ddb5de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/615cb001bb90ef2acb21c011918b456c59ddb5de"}], "stats": {"total": 128, "additions": 128, "deletions": 0}, "files": [{"sha": "4b33059287f92cdcaa9a859659086bff60fe96a6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07523e7c080b44354836524f09f1c9a11f2a1679/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07523e7c080b44354836524f09f1c9a11f2a1679/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=07523e7c080b44354836524f09f1c9a11f2a1679", "patch": "@@ -1,3 +1,10 @@\n+2008-12-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/35319\n+\t* mangle.c (write_builtin_type): Add mangling for decimal floating \n+\tpoint and fixed point types.\n+\t(write_type): Pass FIXED_POINT_TYPE along.\n+\n 2008-12-09  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/37971"}, {"sha": "36b984e321407103d6e142102a76e24169365261", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07523e7c080b44354836524f09f1c9a11f2a1679/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07523e7c080b44354836524f09f1c9a11f2a1679/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=07523e7c080b44354836524f09f1c9a11f2a1679", "patch": "@@ -1598,6 +1598,7 @@ write_type (tree type)\n \t    case BOOLEAN_TYPE:\n \t    case INTEGER_TYPE:  /* Includes wchar_t.  */\n \t    case REAL_TYPE:\n+\t    case FIXED_POINT_TYPE:\n \t      {\n \t\t/* If this is a typedef, TYPE may not be one of\n \t\t   the standard builtin type nodes, but an alias of one.  Use\n@@ -1852,6 +1853,59 @@ write_builtin_type (tree type)\n \tgcc_unreachable ();\n       break;\n \n+    case FIXED_POINT_TYPE:\n+      write_string (\"DF\");\n+      if (GET_MODE_IBIT (TYPE_MODE (type)) > 0)\n+\twrite_unsigned_number (GET_MODE_IBIT (TYPE_MODE (type)));\n+      if (type == fract_type_node\n+\t  || type == sat_fract_type_node\n+\t  || type == accum_type_node\n+\t  || type == sat_accum_type_node)\n+\twrite_char ('i');\n+      else if (type == unsigned_fract_type_node\n+\t       || type == sat_unsigned_fract_type_node\n+\t       || type == unsigned_accum_type_node\n+\t       || type == sat_unsigned_accum_type_node)\n+\twrite_char ('j');\n+      else if (type == short_fract_type_node\n+\t       || type == sat_short_fract_type_node\n+\t       || type == short_accum_type_node\n+\t       || type == sat_short_accum_type_node)\n+\twrite_char ('s');\n+      else if (type == unsigned_short_fract_type_node\n+\t       || type == sat_unsigned_short_fract_type_node\n+\t       || type == unsigned_short_accum_type_node\n+\t       || type == sat_unsigned_short_accum_type_node)\n+\twrite_char ('t');\n+      else if (type == long_fract_type_node\n+\t       || type == sat_long_fract_type_node\n+\t       || type == long_accum_type_node\n+\t       || type == sat_long_accum_type_node)\n+\twrite_char ('l');\n+      else if (type == unsigned_long_fract_type_node\n+\t       || type == sat_unsigned_long_fract_type_node\n+\t       || type == unsigned_long_accum_type_node\n+\t       || type == sat_unsigned_long_accum_type_node)\n+\twrite_char ('m');\n+      else if (type == long_long_fract_type_node\n+\t       || type == sat_long_long_fract_type_node\n+\t       || type == long_long_accum_type_node\n+\t       || type == sat_long_long_accum_type_node)\n+\twrite_char ('x');\n+      else if (type == unsigned_long_long_fract_type_node\n+\t       || type == sat_unsigned_long_long_fract_type_node\n+\t       || type == unsigned_long_long_accum_type_node\n+\t       || type == sat_unsigned_long_long_accum_type_node)\n+\twrite_char ('y');\n+      else\n+\tsorry (\"mangling unknown fixed point type\");\n+      write_unsigned_number (GET_MODE_FBIT (TYPE_MODE (type)));\n+      if (TYPE_SATURATING (type))\n+\twrite_char ('s');\n+      else\n+\twrite_char ('n');\n+      break;\n+\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "f8a447f32420a72bed70960b60948ed94a999f88", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07523e7c080b44354836524f09f1c9a11f2a1679/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07523e7c080b44354836524f09f1c9a11f2a1679/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07523e7c080b44354836524f09f1c9a11f2a1679", "patch": "@@ -1,3 +1,8 @@\n+2008-12-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/35319\n+\t* g++.dg/ext/fixed2.C: New test.\n+\n 2008-12-10  Daniel Berlin  <dberlin@dberlin.org>\n \n \tPR tree-optimization/36792"}, {"sha": "a4766eb794cf619be12e7408f859ba0671098b30", "filename": "gcc/testsuite/g++.dg/ext/fixed2.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07523e7c080b44354836524f09f1c9a11f2a1679/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ffixed2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07523e7c080b44354836524f09f1c9a11f2a1679/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ffixed2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ffixed2.C?ref=07523e7c080b44354836524f09f1c9a11f2a1679", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/35319\n+// { dg-options \"\" }\n+\n+void foo()\n+{\n+  throw 0r;\n+}"}, {"sha": "a07e075f713420733eb774353a81498b2b797582", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07523e7c080b44354836524f09f1c9a11f2a1679/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07523e7c080b44354836524f09f1c9a11f2a1679/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=07523e7c080b44354836524f09f1c9a11f2a1679", "patch": "@@ -1,3 +1,8 @@\n+2008-12-10  Jason Merrill  <jason@redhat.com>\n+\n+\t* demangle.h (enum demangle_component_type): Add \n+\tDEMANGLE_COMPONENT_FIXED_TYPE.\n+\n 2008-11-19  Bob Wilson  <bob.wilson@acm.org>\n \t\n \t* xtensa-config.h (XCHAL_HAVE_MUL16, XCHAL_HAVE_MUL32, XCHAL_HAVE_DIV32)"}, {"sha": "28c69f5e78c4e291bf17a8bf2ed7b4d5984c987a", "filename": "include/demangle.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07523e7c080b44354836524f09f1c9a11f2a1679/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07523e7c080b44354836524f09f1c9a11f2a1679/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=07523e7c080b44354836524f09f1c9a11f2a1679", "patch": "@@ -319,6 +319,8 @@ enum demangle_component_type\n      and the right subtree is the member type.  CV-qualifiers appear\n      on the latter.  */\n   DEMANGLE_COMPONENT_PTRMEM_TYPE,\n+  /* A fixed-point type.  */\n+  DEMANGLE_COMPONENT_FIXED_TYPE,\n   /* An argument list.  The left subtree is the current argument, and\n      the right subtree is either NULL or another ARGLIST node.  */\n   DEMANGLE_COMPONENT_ARGLIST,\n@@ -419,6 +421,17 @@ struct demangle_component\n       struct demangle_component *name;\n     } s_extended_operator;\n \n+    /* For DEMANGLE_COMPONENT_FIXED_TYPE.  */\n+    struct\n+    {\n+      /* The length, indicated by a C integer type name.  */\n+      struct demangle_component *length;\n+      /* _Accum or _Fract?  */\n+      short accum;\n+      /* Saturating or not?  */\n+      short sat;\n+    } s_fixed;\n+\n     /* For DEMANGLE_COMPONENT_CTOR.  */\n     struct\n     {"}, {"sha": "a6721bf906d81e91531520e93d25288e6ab28fe4", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07523e7c080b44354836524f09f1c9a11f2a1679/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07523e7c080b44354836524f09f1c9a11f2a1679/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=07523e7c080b44354836524f09f1c9a11f2a1679", "patch": "@@ -1,3 +1,8 @@\n+2008-12-10  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-demangle.c (cplus_demangle_type): Support fixed-point types.\n+\t(d_print_comp, d_dump): Likewise.\n+\n 2008-10-22  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* Makefile.in (CPPFLAGS): Define."}, {"sha": "de0d9f7610eaea73ad937ca0e41e828348f25c46", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07523e7c080b44354836524f09f1c9a11f2a1679/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07523e7c080b44354836524f09f1c9a11f2a1679/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=07523e7c080b44354836524f09f1c9a11f2a1679", "patch": "@@ -621,6 +621,9 @@ d_dump (struct demangle_component *dc, int indent)\n     case DEMANGLE_COMPONENT_PTRMEM_TYPE:\n       printf (\"pointer to member type\\n\");\n       break;\n+    case DEMANGLE_COMPONENT_FIXED_TYPE:\n+      printf (\"fixed-point type\\n\");\n+      break;\n     case DEMANGLE_COMPONENT_ARGLIST:\n       printf (\"argument list\\n\");\n       break;\n@@ -2115,6 +2118,19 @@ cplus_demangle_type (struct d_info *di)\n \t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[31]);\n \t  di->expansion += ret->u.s_builtin.type->len;\n \t  break;\n+\n+\tcase 'F':\n+\t  /* Fixed point types. DF<int bits><length><fract bits><sat>  */\n+\t  ret = d_make_empty (di);\n+\t  ret->type = DEMANGLE_COMPONENT_FIXED_TYPE;\n+\t  if ((ret->u.s_fixed.accum = IS_DIGIT (d_peek_char (di))))\n+\t    /* For demangling we don't care about the bits.  */\n+\t    d_number (di);\n+\t  ret->u.s_fixed.length = cplus_demangle_type (di);\n+\t  d_number (di);\n+\t  peek = d_next_char (di);\n+\t  ret->u.s_fixed.sat = (peek == 's');\n+\t  break;\n \t}\n       break;\n \n@@ -3725,6 +3741,22 @@ d_print_comp (struct d_print_info *dpi,\n \treturn;\n       }\n \n+    case DEMANGLE_COMPONENT_FIXED_TYPE:\n+      if (dc->u.s_fixed.sat)\n+\td_append_string (dpi, \"_Sat \");\n+      /* Don't print \"int _Accum\".  */\n+      if (dc->u.s_fixed.length->u.s_builtin.type\n+\t  != &cplus_demangle_builtin_types['i'-'a'])\n+\t{\n+\t  d_print_comp (dpi, dc->u.s_fixed.length);\n+\t  d_append_char (dpi, ' ');\n+\t}\n+      if (dc->u.s_fixed.accum)\n+\td_append_string (dpi, \"_Accum\");\n+      else\n+\td_append_string (dpi, \"_Fract\");\n+      return;\n+\n     case DEMANGLE_COMPONENT_ARGLIST:\n     case DEMANGLE_COMPONENT_TEMPLATE_ARGLIST:\n       if (d_left (dc) != NULL)"}]}