{"sha": "e766449f221f0449cbade182ba5344eafe7c7876", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc2NjQ0OWYyMjFmMDQ0OWNiYWRlMTgyYmE1MzQ0ZWFmZTdjNzg3Ng==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-09-10T11:23:43Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-09-17T23:24:39Z"}, "message": "[testsuite] Introduce effective target non_strict_prototype\n\nConsider test-case gcc.c-torture/compile/pr71109.c.\n\nIt contains a prototype-less declaration of foo:\n...\nstatic void foo ();\n...\nfollowed by a call to foo\n...\n      foo (bar, a);\n...\nfollowed by the definition of foo:\n...\nstatic inline void\nfoo (int x, struct S y, struct T z)\n...\n\nThe test-case has undefined behaviour, but for the nvptx target it doesn't even\nassemble:\n...\n$ gcc src/gcc/testsuite/gcc.c-torture/compile/pr71109.c -c\nptxas pr71109.o, line 196; error   : Type of argument does not match \\\n  formal parameter '%in_ar0'\nptxas pr71109.o, line 196; error   : Alignment of argument does not match \\\n  formal parameter '%in_ar0'\nptxas pr71109.o, line 196; error   : Call has wrong number of parameters\nptxas fatal   : Ptx assembly aborted due to errors\nnvptx-as: ptxas returned 255 exit status\n...\n\nThe problem is that this call:\n...\n   191  {\n   192  .param .u64 %out_arg1;\n   193  st.param.u64 [%out_arg1],%r23;\n   194  .param .u64 %out_arg2;\n   195  st.param.u64 [%out_arg2],%r32;\n   196  call foo,(%out_arg1,%out_arg2);\n   197  }\n...\ndoes not match the preceding declaration:\n...\n     6  // BEGIN FUNCTION DECL: foo\n     7  .func foo (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);\n...\nwhich is a PTX error.\n\nIntroduce an effective target non_strict_prototype that returns 0 for nvptx,\nand use it in this and similar test-cases.\n\nTested on nvptx.\n\ngcc/testsuite/ChangeLog:\n\n\t* lib/target-supports.exp (check_effective_target_non_strict_prototype):\n\tNew proc.\n\t* gcc.c-torture/compile/pr71109.c: Require effective target\n\tnon_strict_prototype.\n\t* gcc.c-torture/compile/pr83051-2.c: Same.\n\t* gcc.c-torture/compile/pr89663-1.c: Same.\n\t* gcc.c-torture/compile/pr89663-2.c: Same.\n\t* gcc.c-torture/compile/pr96796.c: Same.", "tree": {"sha": "cd92faa397c02c0156dc0f9ccc16adfac0e12eee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd92faa397c02c0156dc0f9ccc16adfac0e12eee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e766449f221f0449cbade182ba5344eafe7c7876", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e766449f221f0449cbade182ba5344eafe7c7876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e766449f221f0449cbade182ba5344eafe7c7876", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e766449f221f0449cbade182ba5344eafe7c7876/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f234870e1ca68ee793a3094cb9b2ab89addf8d43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f234870e1ca68ee793a3094cb9b2ab89addf8d43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f234870e1ca68ee793a3094cb9b2ab89addf8d43"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "b44ba07123ee0b4ed82ddfc15a49e59d7a85a21b", "filename": "gcc/testsuite/gcc.c-torture/compile/pr71109.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e766449f221f0449cbade182ba5344eafe7c7876/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr71109.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e766449f221f0449cbade182ba5344eafe7c7876/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr71109.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr71109.c?ref=e766449f221f0449cbade182ba5344eafe7c7876", "patch": "@@ -1,4 +1,5 @@\n /* PR tree-optimization/71109 */\n+/* { dg-require-effective-target non_strict_prototype } */\n \n struct S { int g, h; signed char i; int j; signed char k; int l[4]; } a, c;\n struct T { signed char g; } e;"}, {"sha": "4718a276bdba0545df13ae9ee85ab49db0802c59", "filename": "gcc/testsuite/gcc.c-torture/compile/pr83051-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e766449f221f0449cbade182ba5344eafe7c7876/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr83051-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e766449f221f0449cbade182ba5344eafe7c7876/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr83051-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr83051-2.c?ref=e766449f221f0449cbade182ba5344eafe7c7876", "patch": "@@ -1,4 +1,6 @@\n /* { dg-options \"-fno-early-inlining\" } */\n+/* { dg-require-effective-target non_strict_prototype } */\n+\n void\n bar ()\n {"}, {"sha": "659925d6c87d122e7fbccc9a5868b79fa39fe0a0", "filename": "gcc/testsuite/gcc.c-torture/compile/pr89663-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e766449f221f0449cbade182ba5344eafe7c7876/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr89663-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e766449f221f0449cbade182ba5344eafe7c7876/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr89663-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr89663-1.c?ref=e766449f221f0449cbade182ba5344eafe7c7876", "patch": "@@ -1,4 +1,5 @@\n /* PR middle-end/89663 */\n+/* { dg-require-effective-target non_strict_prototype } */\n \n int irint ();\n long lrint ();"}, {"sha": "eeb5beb47eb493c06a34523ddb1fdc257c7fa964", "filename": "gcc/testsuite/gcc.c-torture/compile/pr89663-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e766449f221f0449cbade182ba5344eafe7c7876/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr89663-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e766449f221f0449cbade182ba5344eafe7c7876/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr89663-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr89663-2.c?ref=e766449f221f0449cbade182ba5344eafe7c7876", "patch": "@@ -1,5 +1,6 @@\n /* PR middle-end/89663 */\n /* { dg-require-effective-target indirect_calls } */\n+/* { dg-require-effective-target non_strict_prototype } */\n \n int irint (double);\n long lrint (double);"}, {"sha": "82c7512f88b1c9e53d4285b541a8a67010dae844", "filename": "gcc/testsuite/gcc.c-torture/compile/pr96796.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e766449f221f0449cbade182ba5344eafe7c7876/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr96796.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e766449f221f0449cbade182ba5344eafe7c7876/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr96796.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr96796.c?ref=e766449f221f0449cbade182ba5344eafe7c7876", "patch": "@@ -1,4 +1,5 @@\n /* { dg-additional-options \"-fcommon\" } */\n+/* { dg-require-effective-target non_strict_prototype } */\n \n struct S0 {\n   signed f0 : 8;"}, {"sha": "5cbe32ffbd65755c747e80dd5b7f42bd7c46a3ad", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e766449f221f0449cbade182ba5344eafe7c7876/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e766449f221f0449cbade182ba5344eafe7c7876/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=e766449f221f0449cbade182ba5344eafe7c7876", "patch": "@@ -10486,6 +10486,18 @@ proc check_effective_target_large_initializer { } {\n \n     return 1\n }\n+\n+# Return 1 if the target allows function prototype mismatches\n+# in the assembly.\n+\n+proc check_effective_target_non_strict_prototype { } {\n+    if { [istarget nvptx*-*-*] } {\n+\treturn 0\n+    }\n+\n+    return 1\n+}\n+\n # Returns 1 if the target toolchain supports extended\n # syntax of .symver directive, 0 otherwise.\n "}]}