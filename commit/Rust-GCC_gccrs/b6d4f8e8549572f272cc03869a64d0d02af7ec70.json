{"sha": "b6d4f8e8549572f272cc03869a64d0d02af7ec70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZkNGY4ZTg1NDk1NzJmMjcyY2MwMzg2OWE2NGQwZDAyYWY3ZWM3MA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2016-05-29T08:05:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2016-05-29T08:05:30Z"}, "message": "re PR c++/71105 (lambdas with default captures improperly have function pointer conversions)\n\n/cp\n2016-05-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/71105\n\t* lambda.c (maybe_add_lambda_conv_op): Early return also when\n\tLAMBDA_EXPR_DEFAULT_CAPTURE_MODE != CPLD_NONE.\n\n/testsuite\n2016-05-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/71105\n\t* g++.dg/cpp0x/lambda/lambda-conv11.C: New.\n\t* g++.dg/cpp1y/lambda-conv1.C: Likewise.\n\t* g++.dg/cpp1y/lambda-conv2.C: Likewise.\n\nFrom-SVN: r236859", "tree": {"sha": "16034ed40b4135172a59cea525d3cd58ed21093e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16034ed40b4135172a59cea525d3cd58ed21093e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6d4f8e8549572f272cc03869a64d0d02af7ec70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d4f8e8549572f272cc03869a64d0d02af7ec70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6d4f8e8549572f272cc03869a64d0d02af7ec70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d4f8e8549572f272cc03869a64d0d02af7ec70/comments", "author": null, "committer": null, "parents": [{"sha": "4acc363412b717f54359c2edbea369a008ec0f53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4acc363412b717f54359c2edbea369a008ec0f53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4acc363412b717f54359c2edbea369a008ec0f53"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "7857e7fdce8c56327e0944edc8bfb8c740801b34", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d4f8e8549572f272cc03869a64d0d02af7ec70/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d4f8e8549572f272cc03869a64d0d02af7ec70/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6d4f8e8549572f272cc03869a64d0d02af7ec70", "patch": "@@ -1,3 +1,10 @@\n+2016-05-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/71105\n+\t* g++.dg/cpp0x/lambda/lambda-conv11.C: New.\n+\t* g++.dg/cpp1y/lambda-conv1.C: Likewise.\n+\t* g++.dg/cpp1y/lambda-conv2.C: Likewise.\n+\n 2016-05-27  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc.dg/tree-ssa/prefetch-5.c: Remove xfail."}, {"sha": "4b8d6487f5ce1895c38654a754acf54b7ccf225b", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-conv11.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d4f8e8549572f272cc03869a64d0d02af7ec70/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d4f8e8549572f272cc03869a64d0d02af7ec70/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv11.C?ref=b6d4f8e8549572f272cc03869a64d0d02af7ec70", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/71105\n+// { dg-do compile { target c++11 } }\n+\n+void foo()\n+{\n+  int i;\n+  static_cast<void(*)()>([i]{});  // { dg-error \"invalid static_cast\" }\n+  static_cast<void(*)()>([=]{});  // { dg-error \"invalid static_cast\" }\n+  static_cast<void(*)()>([&]{});  // { dg-error \"invalid static_cast\" }\n+}"}, {"sha": "2e4ec4964d5b6e24570ae1cccedc9571dbaffdf6", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-conv1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d4f8e8549572f272cc03869a64d0d02af7ec70/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-conv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d4f8e8549572f272cc03869a64d0d02af7ec70/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-conv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-conv1.C?ref=b6d4f8e8549572f272cc03869a64d0d02af7ec70", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/71105\n+// { dg-do compile { target c++14 } }\n+\n+void foo()\n+{\n+  int i;\n+  static_cast<void(*)(int)>([i](auto){});  // { dg-error \"invalid static_cast\" }\n+  static_cast<void(*)(int)>([=](auto){});  // { dg-error \"invalid static_cast\" }\n+  static_cast<void(*)(int)>([&](auto){});  // { dg-error \"invalid static_cast\" }\n+  static_cast<float(*)(float)>([i](auto x){ return x; });  // { dg-error \"invalid static_cast\" }\n+  static_cast<float(*)(float)>([=](auto x){ return x; });  // { dg-error \"invalid static_cast\" }\n+  static_cast<float(*)(float)>([&](auto x){ return x; });  // { dg-error \"invalid static_cast\" }\n+}"}, {"sha": "45c0f3fe1860c929c6927043f7268394614850a4", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-conv2.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d4f8e8549572f272cc03869a64d0d02af7ec70/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-conv2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d4f8e8549572f272cc03869a64d0d02af7ec70/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-conv2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-conv2.C?ref=b6d4f8e8549572f272cc03869a64d0d02af7ec70", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/71105\n+// { dg-do compile { target c++14 } }\n+\n+template <typename T> T declval();\n+template <typename, typename> struct is_same\n+{ static constexpr bool value = false; };\n+template <typename T> struct is_same<T, T>\n+{ static constexpr bool value = true; };\n+\n+template <class F>\n+struct indirected : F {\n+  indirected(F f) : F(f) {}\n+  template <class I>\n+  auto operator()(I i) -> decltype(declval<F&>()(*i)) {\n+    return static_cast<F&>(*this)(*i);\n+  }\n+};\n+\n+int main() {\n+  auto f = [=](auto i) { return i + i; };\n+  auto i = indirected<decltype(f)>{f};\n+  static_assert(is_same<decltype(i(declval<int*>())), int>::value, \"\");\n+}"}]}