{"sha": "ef8623b378150fe2470f7791a81c91616b702600", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY4NjIzYjM3ODE1MGZlMjQ3MGY3NzkxYTgxYzkxNjE2YjcwMjYwMA==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@google.com", "date": "2011-03-18T19:54:32Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2011-03-18T19:54:32Z"}, "message": "mixed-mode-arith_neg.cc: Rename from mixed-mode_neg.cc\n\n\t* mixed-mode-arith_neg.cc: Rename from mixed-mode_neg.cc\n\t* mixed-mode-cmp_neg.cc: Factor out of mixed-mode-arith_neg.cc\n\nFrom-SVN: r171161", "tree": {"sha": "0ac01ef0f4ff25706e6dc3d3dc70ad4c3db2d9b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ac01ef0f4ff25706e6dc3d3dc70ad4c3db2d9b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef8623b378150fe2470f7791a81c91616b702600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8623b378150fe2470f7791a81c91616b702600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef8623b378150fe2470f7791a81c91616b702600", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8623b378150fe2470f7791a81c91616b702600/comments", "author": {"login": "dnovillo", "id": 7295335, "node_id": "MDQ6VXNlcjcyOTUzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7295335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnovillo", "html_url": "https://github.com/dnovillo", "followers_url": "https://api.github.com/users/dnovillo/followers", "following_url": "https://api.github.com/users/dnovillo/following{/other_user}", "gists_url": "https://api.github.com/users/dnovillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnovillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnovillo/subscriptions", "organizations_url": "https://api.github.com/users/dnovillo/orgs", "repos_url": "https://api.github.com/users/dnovillo/repos", "events_url": "https://api.github.com/users/dnovillo/events{/privacy}", "received_events_url": "https://api.github.com/users/dnovillo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41446fecb6d6e59e4a023702cb14dac2af9a4a6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41446fecb6d6e59e4a023702cb14dac2af9a4a6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41446fecb6d6e59e4a023702cb14dac2af9a4a6d"}], "stats": {"total": 187, "additions": 116, "deletions": 71}, "files": [{"sha": "4eb500d296bfd0199db6c5e0cdf71022bd7b707d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8623b378150fe2470f7791a81c91616b702600/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8623b378150fe2470f7791a81c91616b702600/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ef8623b378150fe2470f7791a81c91616b702600", "patch": "@@ -1,3 +1,8 @@\n+2011-03-18  Diego Novillo  <dnovillo@google.com>\n+\n+\t* mixed-mode-arith_neg.cc: Rename from mixed-mode_neg.cc\n+\t* mixed-mode-cmp_neg.cc: Factor out of mixed-mode-arith_neg.cc\n+\n 2011-03-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/util/testsuite_random.h: New."}, {"sha": "5cc67fbec7f1eab5449b2600bfcb61e4de9deda4", "filename": "libstdc++-v3/testsuite/decimal/mixed-mode-arith_neg.cc", "status": "renamed", "additions": 5, "deletions": 71, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8623b378150fe2470f7791a81c91616b702600/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmixed-mode-arith_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8623b378150fe2470f7791a81c91616b702600/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmixed-mode-arith_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmixed-mode-arith_neg.cc?ref=ef8623b378150fe2470f7791a81c91616b702600", "patch": "@@ -18,11 +18,11 @@\n // { dg-do compile }\n // { dg-require-effective-target dfp }\n \n-// Test that binary operators do not accept mixed decimal and generic\n-// floating-point operands.  This isn't explicity prohibited in\n-// ISO/IEC TR 24733 but it is prohibited in C, and in C++ there should\n-// not be an implicit conversion from a decimal floating-point type to\n-// a generic floating-point type.\n+// Test that binary arithmetic operators do not accept mixed decimal\n+// and generic floating-point operands.  This isn't explicity\n+// prohibited in ISO/IEC TR 24733 but it is prohibited in C, and in C++\n+// there should not be an implicit conversion from a decimal\n+// floating-point type to a generic floating-point type.\n \n #include <decimal/decimal>\n #include <testsuite_hooks.h>\n@@ -81,72 +81,6 @@ bad_divide (void)\n   a128 = d / b128;\t// { dg-error \"error\" }\n }\n \n-void\n-bad_eq (void)\n-{\n-  b1 = b32 == f;\t// { dg-error \"error\" }\n-  b2 = ld == b32;\t// { dg-error \"error\" }\n-  b3 = b64 == d;\t// { dg-error \"error\" }\n-  b4 = ld == b64;\t// { dg-error \"error\" }\n-  b5 = b128 == ld;\t// { dg-error \"error\" }\n-  b6 = d == b128;\t// { dg-error \"error\" }\n-}\n-\n-void\n-bad_ne (void)\n-{\n-  b1 = b32 != f;\t// { dg-error \"error\" }\n-  b2 = ld != b32;\t// { dg-error \"error\" }\n-  b3 = b64 != d;\t// { dg-error \"error\" }\n-  b4 = ld != b64;\t// { dg-error \"error\" }\n-  b5 = b128 != ld;\t// { dg-error \"error\" }\n-  b6 = d != b128;\t// { dg-error \"error\" }\n-}\n-\n-void\n-bad_lt (void)\n-{\n-  b1 = b32 < f;\t\t// { dg-error \"error\" }\n-  b2 = ld < b32;\t// { dg-error \"error\" }\n-  b3 = b64 < d;\t\t// { dg-error \"error\" }\n-  b4 = ld < b64;\t// { dg-error \"error\" }\n-  b5 = b128 < ld;\t// { dg-error \"error\" }\n-  b6 = d < b128;\t// { dg-error \"error\" }\n-}\n-\n-void\n-bad_le (void)\n-{\n-  b1 = b32 <= f;\t// { dg-error \"error\" }\n-  b2 = ld <= b32;\t// { dg-error \"error\" }\n-  b3 = b64 <= d;\t// { dg-error \"error\" }\n-  b4 = ld <= b64;\t// { dg-error \"error\" }\n-  b5 = b128 <= ld;\t// { dg-error \"error\" }\n-  b6 = d <= b128;\t// { dg-error \"error\" }\n-}\n-\n-void\n-bad_gt (void)\n-{\n-  b1 = b32 > f;\t\t// { dg-error \"error\" }\n-  b2 = ld > b32;\t// { dg-error \"error\" }\n-  b3 = b64 > d;\t\t// { dg-error \"error\" }\n-  b4 = ld > b64;\t// { dg-error \"error\" }\n-  b5 = b128 > ld;\t// { dg-error \"error\" }\n-  b6 = d > b128;\t// { dg-error \"error\" }\n-}\n-\n-void\n-bad_ge (void)\n-{\n-  b1 = b32 >= f;\t// { dg-error \"error\" }\n-  b2 = ld >= b32;\t// { dg-error \"error\" }\n-  b3 = b64 >= d;\t// { dg-error \"error\" }\n-  b4 = ld >= b64;\t// { dg-error \"error\" }\n-  b5 = b128 >= ld;\t// { dg-error \"error\" }\n-  b6 = d >= b128;\t// { dg-error \"error\" }\n-}\n-\n void\n bad_pluseq (void)\n {", "previous_filename": "libstdc++-v3/testsuite/decimal/mixed-mode_neg.cc"}, {"sha": "46a38acd3ed870af05ba620d34ba0f914d678822", "filename": "libstdc++-v3/testsuite/decimal/mixed-mode-cmp_neg.cc", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8623b378150fe2470f7791a81c91616b702600/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmixed-mode-cmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8623b378150fe2470f7791a81c91616b702600/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmixed-mode-cmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmixed-mode-cmp_neg.cc?ref=ef8623b378150fe2470f7791a81c91616b702600", "patch": "@@ -0,0 +1,106 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-require-effective-target dfp }\n+\n+// Test that binary comparison operators do not accept mixed decimal\n+// and generic floating-point operands.  This isn't explicity prohibited\n+// in ISO/IEC TR 24733 but it is prohibited in C, and in C++ there should\n+// not be an implicit conversion from a decimal floating-point type to a\n+// generic floating-point type.\n+\n+#include <decimal/decimal>\n+#include <testsuite_hooks.h>\n+\n+using namespace std::decimal;\n+\n+decimal32 a32, b32, c32;\n+decimal64 a64, b64, c64;\n+decimal128 a128, b128, c128;\n+float f;\n+double d;\n+long double ld;\n+bool b1, b2, b3, b4, b5, b6;\n+\n+void\n+bad_eq (void)\n+{\n+  b1 = b32 == f;\t// { dg-error \"error\" }\n+  b2 = ld == b32;\t// { dg-error \"error\" }\n+  b3 = b64 == d;\t// { dg-error \"error\" }\n+  b4 = ld == b64;\t// { dg-error \"error\" }\n+  b5 = b128 == ld;\t// { dg-error \"error\" }\n+  b6 = d == b128;\t// { dg-error \"error\" }\n+}\n+\n+void\n+bad_ne (void)\n+{\n+  b1 = b32 != f;\t// { dg-error \"error\" }\n+  b2 = ld != b32;\t// { dg-error \"error\" }\n+  b3 = b64 != d;\t// { dg-error \"error\" }\n+  b4 = ld != b64;\t// { dg-error \"error\" }\n+  b5 = b128 != ld;\t// { dg-error \"error\" }\n+  b6 = d != b128;\t// { dg-error \"error\" }\n+}\n+\n+void\n+bad_lt (void)\n+{\n+  b1 = b32 < f;\t\t// { dg-error \"error\" }\n+  b2 = ld < b32;\t// { dg-error \"error\" }\n+  b3 = b64 < d;\t\t// { dg-error \"error\" }\n+  b4 = ld < b64;\t// { dg-error \"error\" }\n+  b5 = b128 < ld;\t// { dg-error \"error\" }\n+  b6 = d < b128;\t// { dg-error \"error\" }\n+}\n+\n+void\n+bad_le (void)\n+{\n+  b1 = b32 <= f;\t// { dg-error \"error\" }\n+  b2 = ld <= b32;\t// { dg-error \"error\" }\n+  b3 = b64 <= d;\t// { dg-error \"error\" }\n+  b4 = ld <= b64;\t// { dg-error \"error\" }\n+  b5 = b128 <= ld;\t// { dg-error \"error\" }\n+  b6 = d <= b128;\t// { dg-error \"error\" }\n+}\n+\n+void\n+bad_gt (void)\n+{\n+  b1 = b32 > f;\t\t// { dg-error \"error\" }\n+  b2 = ld > b32;\t// { dg-error \"error\" }\n+  b3 = b64 > d;\t\t// { dg-error \"error\" }\n+  b4 = ld > b64;\t// { dg-error \"error\" }\n+  b5 = b128 > ld;\t// { dg-error \"error\" }\n+  b6 = d > b128;\t// { dg-error \"error\" }\n+}\n+\n+void\n+bad_ge (void)\n+{\n+  b1 = b32 >= f;\t// { dg-error \"error\" }\n+  b2 = ld >= b32;\t// { dg-error \"error\" }\n+  b3 = b64 >= d;\t// { dg-error \"error\" }\n+  b4 = ld >= b64;\t// { dg-error \"error\" }\n+  b5 = b128 >= ld;\t// { dg-error \"error\" }\n+  b6 = d >= b128;\t// { dg-error \"error\" }\n+}\n+\n+// { dg-excess-errors \"notes about candidates\" }"}]}