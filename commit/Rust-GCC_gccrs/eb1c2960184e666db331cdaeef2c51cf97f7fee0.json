{"sha": "eb1c2960184e666db331cdaeef2c51cf97f7fee0", "node_id": "C_kwDOANBUbNoAKGViMWMyOTYwMTg0ZTY2NmRiMzMxY2RhZWVmMmM1MWNmOTdmN2ZlZTA", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-27T23:26:08Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-28T03:16:50Z"}, "message": "RISC-V: Add vlse/vsse intrinsics support\n\ngcc/ChangeLog:\n\n\t* config/riscv/predicates.md (pmode_reg_or_0_operand): New predicate.\n\t* config/riscv/riscv-vector-builtins-bases.cc (class loadstore):\n\tSupport vlse/vsse.\n\t(BASE): Ditto.\n\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n\t* config/riscv/riscv-vector-builtins-functions.def (vlse): New class.\n\t(vsse): New class.\n\t* config/riscv/riscv-vector-builtins.cc\n\t(function_expander::use_contiguous_load_insn): Support vlse/vsse.\n\t* config/riscv/vector.md (@pred_strided_load<mode>): New md pattern.\n\t(@pred_strided_store<mode>): Ditto.", "tree": {"sha": "ca153975c459fe3c9cf64017565c6fc0be4e66d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca153975c459fe3c9cf64017565c6fc0be4e66d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb1c2960184e666db331cdaeef2c51cf97f7fee0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1c2960184e666db331cdaeef2c51cf97f7fee0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb1c2960184e666db331cdaeef2c51cf97f7fee0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1c2960184e666db331cdaeef2c51cf97f7fee0/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43122c45607afb1d599a2c81484cdbc7d28ac830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43122c45607afb1d599a2c81484cdbc7d28ac830", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43122c45607afb1d599a2c81484cdbc7d28ac830"}], "stats": {"total": 157, "additions": 143, "deletions": 14}, "files": [{"sha": "f9013bbf8bb1582c393e3cf28e7f6dceea406fac", "filename": "gcc/config/riscv/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1c2960184e666db331cdaeef2c51cf97f7fee0/gcc%2Fconfig%2Friscv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1c2960184e666db331cdaeef2c51cf97f7fee0/gcc%2Fconfig%2Friscv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fpredicates.md?ref=eb1c2960184e666db331cdaeef2c51cf97f7fee0", "patch": "@@ -286,6 +286,10 @@\n \t    (match_test \"GET_CODE (op) == UNSPEC\n \t\t\t && (XINT (op, 1) == UNSPEC_VUNDEF)\"))))\n \n+(define_special_predicate \"pmode_reg_or_0_operand\"\n+  (ior (match_operand 0 \"const_0_operand\")\n+       (match_operand 0 \"pmode_register_operand\")))\n+\n ;; The scalar operand can be directly broadcast by RVV instructions.\n (define_predicate \"direct_broadcast_operand\"\n   (ior (match_operand 0 \"register_operand\")"}, {"sha": "f9a16c68e07983c7873fe76c6704612c581b2d77", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1c2960184e666db331cdaeef2c51cf97f7fee0/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1c2960184e666db331cdaeef2c51cf97f7fee0/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=eb1c2960184e666db331cdaeef2c51cf97f7fee0", "patch": "@@ -84,8 +84,8 @@ class vsetvl : public function_base\n   }\n };\n \n-/* Implements vle.v/vse.v/vlm.v/vsm.v codegen.  */\n-template <bool STORE_P>\n+/* Implements vle.v/vse.v/vlm.v/vsm.v/vlse.v/vsse.v codegen.  */\n+template <bool STORE_P, bool STRIDED_P = false>\n class loadstore : public function_base\n {\n   unsigned int call_properties (const function_instance &) const override\n@@ -106,9 +106,23 @@ class loadstore : public function_base\n   rtx expand (function_expander &e) const override\n   {\n     if (STORE_P)\n-      return e.use_contiguous_store_insn (code_for_pred_store (e.vector_mode ()));\n+      {\n+\tif (STRIDED_P)\n+\t  return e.use_contiguous_store_insn (\n+\t    code_for_pred_strided_store (e.vector_mode ()));\n+\telse\n+\t  return e.use_contiguous_store_insn (\n+\t    code_for_pred_store (e.vector_mode ()));\n+      }\n     else\n-      return e.use_contiguous_load_insn (code_for_pred_mov (e.vector_mode ()));\n+      {\n+\tif (STRIDED_P)\n+\t  return e.use_contiguous_load_insn (\n+\t    code_for_pred_strided_load (e.vector_mode ()));\n+\telse\n+\t  return e.use_contiguous_load_insn (\n+\t    code_for_pred_mov (e.vector_mode ()));\n+      }\n   }\n };\n \n@@ -118,6 +132,8 @@ static CONSTEXPR const loadstore<false> vle_obj;\n static CONSTEXPR const loadstore<true> vse_obj;\n static CONSTEXPR const loadstore<false> vlm_obj;\n static CONSTEXPR const loadstore<true> vsm_obj;\n+static CONSTEXPR const loadstore<false, true> vlse_obj;\n+static CONSTEXPR const loadstore<true, true> vsse_obj;\n \n /* Declare the function base NAME, pointing it to an instance\n    of class <NAME>_obj.  */\n@@ -130,5 +146,7 @@ BASE (vle)\n BASE (vse)\n BASE (vlm)\n BASE (vsm)\n+BASE (vlse)\n+BASE (vsse)\n \n } // end namespace riscv_vector"}, {"sha": "93999e2cbee8e0bce301656a3f983b51a6c6f585", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1c2960184e666db331cdaeef2c51cf97f7fee0/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1c2960184e666db331cdaeef2c51cf97f7fee0/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h?ref=eb1c2960184e666db331cdaeef2c51cf97f7fee0", "patch": "@@ -30,6 +30,8 @@ extern const function_base *const vle;\n extern const function_base *const vse;\n extern const function_base *const vlm;\n extern const function_base *const vsm;\n+extern const function_base *const vlse;\n+extern const function_base *const vsse;\n }\n \n } // end namespace riscv_vector"}, {"sha": "1ddde7b9d76aa9ada2b4fa9f540cac96b53330f8", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1c2960184e666db331cdaeef2c51cf97f7fee0/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1c2960184e666db331cdaeef2c51cf97f7fee0/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=eb1c2960184e666db331cdaeef2c51cf97f7fee0", "patch": "@@ -44,5 +44,7 @@ DEF_RVV_FUNCTION (vle, loadstore, full_preds, all_v_scalar_const_ptr_ops)\n DEF_RVV_FUNCTION (vse, loadstore, none_m_preds, all_v_scalar_ptr_ops)\n DEF_RVV_FUNCTION (vlm, loadstore, none_preds, b_v_scalar_const_ptr_ops)\n DEF_RVV_FUNCTION (vsm, loadstore, none_preds, b_v_scalar_ptr_ops)\n+DEF_RVV_FUNCTION (vlse, loadstore, full_preds, all_v_scalar_const_ptr_ptrdiff_ops)\n+DEF_RVV_FUNCTION (vsse, loadstore, none_m_preds, all_v_scalar_ptr_ptrdiff_ops)\n \n #undef DEF_RVV_FUNCTION"}, {"sha": "593a5f08e69ab287300ed24aecd4330928d0bcfa", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1c2960184e666db331cdaeef2c51cf97f7fee0/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1c2960184e666db331cdaeef2c51cf97f7fee0/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=eb1c2960184e666db331cdaeef2c51cf97f7fee0", "patch": "@@ -167,6 +167,19 @@ static CONSTEXPR const rvv_arg_type_info scalar_ptr_args[]\n   = {rvv_arg_type_info (RVV_BASE_scalar_ptr),\n      rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info_end};\n \n+/* A list of args for vector_type func (const scalar_type *, ptrdiff_t)\n+ * function.  */\n+static CONSTEXPR const rvv_arg_type_info scalar_const_ptr_ptrdiff_args[]\n+  = {rvv_arg_type_info (RVV_BASE_scalar_const_ptr),\n+     rvv_arg_type_info (RVV_BASE_ptrdiff), rvv_arg_type_info_end};\n+\n+/* A list of args for void func (scalar_type *, ptrdiff_t, vector_type)\n+ * function.  */\n+static CONSTEXPR const rvv_arg_type_info scalar_ptr_ptrdiff_args[]\n+  = {rvv_arg_type_info (RVV_BASE_scalar_ptr),\n+     rvv_arg_type_info (RVV_BASE_ptrdiff), rvv_arg_type_info (RVV_BASE_vector),\n+     rvv_arg_type_info_end};\n+\n /* A list of none preds that will be registered for intrinsic functions.  */\n static CONSTEXPR const predication_type_index none_preds[]\n   = {PRED_TYPE_none, NUM_PRED_TYPES};\n@@ -227,6 +240,22 @@ static CONSTEXPR const rvv_op_info b_v_scalar_ptr_ops\n      rvv_arg_type_info (RVV_BASE_void), /* Return type */\n      scalar_ptr_args /* Args */};\n \n+/* A static operand information for vector_type func (const scalar_type *,\n+ * ptrdiff_t) function registration. */\n+static CONSTEXPR const rvv_op_info all_v_scalar_const_ptr_ptrdiff_ops\n+  = {all_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_v,\t\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     scalar_const_ptr_ptrdiff_args /* Args */};\n+\n+/* A static operand information for void func (scalar_type *, ptrdiff_t,\n+ * vector_type) function registration. */\n+static CONSTEXPR const rvv_op_info all_v_scalar_ptr_ptrdiff_ops\n+  = {all_ops,\t\t\t\t/* Types */\n+     OP_TYPE_v,\t\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_void), /* Return type */\n+     scalar_ptr_ptrdiff_args /* Args */};\n+\n /* A list of all RVV intrinsic functions.  */\n static function_group_info function_groups[] = {\n #define DEF_RVV_FUNCTION(NAME, SHAPE, PREDS, OPS_INFO)                         \\\n@@ -921,7 +950,9 @@ function_expander::use_contiguous_load_insn (insn_code icode)\n       add_input_operand (Pmode, get_tail_policy_for_pred (pred));\n       add_input_operand (Pmode, get_mask_policy_for_pred (pred));\n     }\n-  add_input_operand (Pmode, get_avl_type_rtx (avl_type::NONVLMAX));\n+\n+  if (opno != insn_data[icode].n_generator_args)\n+    add_input_operand (Pmode, get_avl_type_rtx (avl_type::NONVLMAX));\n \n   return generate_insn (icode);\n }"}, {"sha": "1453be116a95f8989edfa970847289bc483af881", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 81, "deletions": 9, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1c2960184e666db331cdaeef2c51cf97f7fee0/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1c2960184e666db331cdaeef2c51cf97f7fee0/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=eb1c2960184e666db331cdaeef2c51cf97f7fee0", "patch": "@@ -33,6 +33,7 @@\n   UNSPEC_VUNDEF\n   UNSPEC_VPREDICATE\n   UNSPEC_VLMAX\n+  UNSPEC_STRIDED\n ])\n \n (define_constants [\n@@ -204,28 +205,56 @@\n \n ;; The index of operand[] to get the avl op.\n (define_attr \"vl_op_idx\" \"\"\n-\t(cond [(eq_attr \"type\" \"vlde,vste,vimov,vfmov,vldm,vstm,vlds,vmalu\")\n-\t (const_int 4)]\n-\t(const_int INVALID_ATTRIBUTE)))\n+  (cond [(eq_attr \"type\" \"vlde,vste,vimov,vfmov,vldm,vstm,vmalu,vsts\")\n+\t   (const_int 4)\n+\n+\t ;; If operands[3] of \"vlds\" is not vector mode, it is pred_broadcast.\n+\t ;; wheras it is pred_strided_load if operands[3] is vector mode.\n+         (eq_attr \"type\" \"vlds\")\n+\t   (if_then_else (match_test \"VECTOR_MODE_P (GET_MODE (operands[3]))\")\n+             (const_int 5)\n+             (const_int 4))]\n+  (const_int INVALID_ATTRIBUTE)))\n \n ;; The tail policy op value.\n (define_attr \"ta\" \"\"\n-  (cond [(eq_attr \"type\" \"vlde,vimov,vfmov,vlds\")\n-\t   (symbol_ref \"riscv_vector::get_ta(operands[5])\")]\n+  (cond [(eq_attr \"type\" \"vlde,vimov,vfmov\")\n+\t   (symbol_ref \"riscv_vector::get_ta(operands[5])\")\n+\n+\t ;; If operands[3] of \"vlds\" is not vector mode, it is pred_broadcast.\n+\t ;; wheras it is pred_strided_load if operands[3] is vector mode.\n+\t (eq_attr \"type\" \"vlds\")\n+\t   (if_then_else (match_test \"VECTOR_MODE_P (GET_MODE (operands[3]))\")\n+\t     (symbol_ref \"riscv_vector::get_ta(operands[6])\")\n+\t     (symbol_ref \"riscv_vector::get_ta(operands[5])\"))]\n \t(const_int INVALID_ATTRIBUTE)))\n \n ;; The mask policy op value.\n (define_attr \"ma\" \"\"\n-  (cond [(eq_attr \"type\" \"vlde,vlds\")\n-\t   (symbol_ref \"riscv_vector::get_ma(operands[6])\")]\n+  (cond [(eq_attr \"type\" \"vlde\")\n+\t   (symbol_ref \"riscv_vector::get_ma(operands[6])\")\n+\n+\t ;; If operands[3] of \"vlds\" is not vector mode, it is pred_broadcast.\n+\t ;; wheras it is pred_strided_load if operands[3] is vector mode.\n+\t (eq_attr \"type\" \"vlds\")\n+\t   (if_then_else (match_test \"VECTOR_MODE_P (GET_MODE (operands[3]))\")\n+\t     (symbol_ref \"riscv_vector::get_ma(operands[7])\")\n+\t     (symbol_ref \"riscv_vector::get_ma(operands[6])\"))]\n \t(const_int INVALID_ATTRIBUTE)))\n \n ;; The avl type value.\n (define_attr \"avl_type\" \"\"\n-  (cond [(eq_attr \"type\" \"vlde,vlde,vste,vimov,vimov,vimov,vfmov,vlds,vlds\")\n+  (cond [(eq_attr \"type\" \"vlde,vlde,vste,vimov,vimov,vimov,vfmov\")\n \t   (symbol_ref \"INTVAL (operands[7])\")\n \t (eq_attr \"type\" \"vldm,vstm,vimov,vmalu,vmalu\")\n-\t   (symbol_ref \"INTVAL (operands[5])\")]\n+\t   (symbol_ref \"INTVAL (operands[5])\")\n+\n+\t ;; If operands[3] of \"vlds\" is not vector mode, it is pred_broadcast.\n+\t ;; wheras it is pred_strided_load if operands[3] is vector mode.\n+\t (eq_attr \"type\" \"vlds\")\n+\t   (if_then_else (match_test \"VECTOR_MODE_P (GET_MODE (operands[3]))\")\n+\t     (const_int INVALID_ATTRIBUTE)\n+\t     (symbol_ref \"INTVAL (operands[7])\"))]\n \t(const_int INVALID_ATTRIBUTE)))\n \n ;; -----------------------------------------------------------------\n@@ -760,3 +789,46 @@\n    vlse<sew>.v\\t%0,%3,zero\"\n   [(set_attr \"type\" \"vimov,vfmov,vlds,vlds\")\n    (set_attr \"mode\" \"<MODE>\")])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated Strided loads/stores\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - 7.5. Vector Strided Instructions\n+;; -------------------------------------------------------------------------------\n+\n+(define_insn \"@pred_strided_load<mode>\"\n+  [(set (match_operand:V 0 \"register_operand\"              \"=vr,    vr,    vd\")\n+\t(if_then_else:V\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \"vmWc1,   Wc1,    vm\")\n+\t     (match_operand 5 \"vector_length_operand\"    \"   rK,    rK,    rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"    i,     i,     i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"    i,     i,     i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:V\n+\t    [(match_operand:V 3 \"memory_operand\"         \"    m,     m,     m\")\n+\t     (match_operand 4 \"pmode_reg_or_0_operand\"   \"   rJ,    rJ,    rJ\")] UNSPEC_STRIDED)\n+\t  (match_operand:V 2 \"vector_merge_operand\"      \"    0,    vu,    vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vlse<sew>.v\\t%0,%3,%z4%p1\"\n+  [(set_attr \"type\" \"vlds\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_strided_store<mode>\"\n+  [(set (match_operand:V 0 \"memory_operand\"                 \"+m\")\n+\t(if_then_else:V\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \"vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"    \"   rK\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:V\n+\t    [(match_operand 2 \"pmode_reg_or_0_operand\"   \"   rJ\")\n+\t     (match_operand:V 3 \"register_operand\"       \"   vr\")] UNSPEC_STRIDED)\n+\t  (match_dup 0)))]\n+  \"TARGET_VECTOR\"\n+  \"vsse<sew>.v\\t%3,%0,%z2%p1\"\n+  [(set_attr \"type\" \"vsts\")\n+   (set_attr \"mode\" \"<MODE>\")])"}]}