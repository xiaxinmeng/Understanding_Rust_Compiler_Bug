{"sha": "64c7b4c0c9bfd876bab126e7bc1861d1a39f1dbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRjN2I0YzBjOWJmZDg3NmJhYjEyNmU3YmMxODYxZDFhMzlmMWRiZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-11-11T17:49:10Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-11-11T17:49:10Z"}, "message": "compiler: Support Go 1.2 nil checks.\n\nFrom-SVN: r204679", "tree": {"sha": "8b4f326394f2f25564ed77844fae26c6a03636e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b4f326394f2f25564ed77844fae26c6a03636e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64c7b4c0c9bfd876bab126e7bc1861d1a39f1dbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c7b4c0c9bfd876bab126e7bc1861d1a39f1dbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64c7b4c0c9bfd876bab126e7bc1861d1a39f1dbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c7b4c0c9bfd876bab126e7bc1861d1a39f1dbe/comments", "author": null, "committer": null, "parents": [{"sha": "d368135f692652e33e4f9c7269935613d4e00f14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d368135f692652e33e4f9c7269935613d4e00f14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d368135f692652e33e4f9c7269935613d4e00f14"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "e26bf353e00f0bb888382cf8239ead7cf5eabe97", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c7b4c0c9bfd876bab126e7bc1861d1a39f1dbe/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c7b4c0c9bfd876bab126e7bc1861d1a39f1dbe/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=64c7b4c0c9bfd876bab126e7bc1861d1a39f1dbe", "patch": "@@ -3633,7 +3633,8 @@ class Unary_expression : public Expression\n  public:\n   Unary_expression(Operator op, Expression* expr, Location location)\n     : Expression(EXPRESSION_UNARY, location),\n-      op_(op), escapes_(true), create_temp_(false), expr_(expr)\n+      op_(op), escapes_(true), create_temp_(false), expr_(expr),\n+      issue_nil_check_(false)\n   { }\n \n   // Return the operator.\n@@ -3719,6 +3720,10 @@ class Unary_expression : public Expression\n   void\n   do_dump_expression(Ast_dump_context*) const;\n \n+  void\n+  do_issue_nil_check()\n+  { this->issue_nil_check_ = (this->op_ == OPERATOR_MULT); }\n+\n  private:\n   // The unary operator to apply.\n   Operator op_;\n@@ -3730,6 +3735,9 @@ class Unary_expression : public Expression\n   bool create_temp_;\n   // The operand.\n   Expression* expr_;\n+  // Whether or not to issue a nil check for this expression if its address\n+  // is being taken.\n+  bool issue_nil_check_;\n };\n \n // If we are taking the address of a composite literal, and the\n@@ -4107,7 +4115,10 @@ Unary_expression::do_check_types(Gogo*)\n \t    this->report_error(_(\"invalid operand for unary %<&%>\"));\n \t}\n       else\n-\tthis->expr_->address_taken(this->escapes_);\n+        {\n+          this->expr_->address_taken(this->escapes_);\n+          this->expr_->issue_nil_check();\n+        }\n       break;\n \n     case OPERATOR_MULT:\n@@ -4277,12 +4288,13 @@ Unary_expression::do_get_tree(Translate_context* context)\n \t// If we are dereferencing the pointer to a large struct, we\n \t// need to check for nil.  We don't bother to check for small\n \t// structs because we expect the system to crash on a nil\n-\t// pointer dereference.\n+\t// pointer dereference.\t However, if we know the address of this\n+\t// expression is being taken, we must always check for nil.\n \ttree target_type_tree = TREE_TYPE(TREE_TYPE(expr));\n \tif (!VOID_TYPE_P(target_type_tree))\n \t  {\n \t    HOST_WIDE_INT s = int_size_in_bytes(target_type_tree);\n-\t    if (s == -1 || s >= 4096)\n+\t    if (s == -1 || s >= 4096 || this->issue_nil_check_)\n \t      {\n \t\tif (!DECL_P(expr))\n \t\t  expr = save_expr(expr);\n@@ -10402,6 +10414,10 @@ class Array_index_expression : public Expression\n   do_address_taken(bool escapes)\n   { this->array_->address_taken(escapes); }\n \n+  void\n+  do_issue_nil_check()\n+  { this->array_->issue_nil_check(); }\n+\n   tree\n   do_get_tree(Translate_context*);\n "}, {"sha": "47ce4c0a1e5f71e2bec843f95cd2fd4a25091398", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c7b4c0c9bfd876bab126e7bc1861d1a39f1dbe/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c7b4c0c9bfd876bab126e7bc1861d1a39f1dbe/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=64c7b4c0c9bfd876bab126e7bc1861d1a39f1dbe", "patch": "@@ -613,6 +613,11 @@ class Expression\n   address_taken(bool escapes)\n   { this->do_address_taken(escapes); }\n \n+  // Note that a nil check must be issued for this expression.\n+  void\n+  issue_nil_check()\n+  { this->do_issue_nil_check(); }\n+\n   // Return whether this expression must be evaluated in order\n   // according to the order of evaluation rules.  This is basically\n   // true of all expressions with side-effects.\n@@ -742,6 +747,11 @@ class Expression\n   do_address_taken(bool)\n   { }\n \n+  // Child class implements issuing a nil check if the address is taken.\n+  virtual void\n+  do_issue_nil_check()\n+  { }\n+\n   // Child class implements whether this expression must be evaluated\n   // in order.\n   virtual bool\n@@ -1721,6 +1731,9 @@ class Index_expression : public Parser_expression\n   void\n   do_dump_expression(Ast_dump_context*) const;\n \n+  void\n+  do_issue_nil_check()\n+  { this->left_->issue_nil_check(); }\n  private:\n   // The expression being indexed.\n   Expression* left_;\n@@ -2011,6 +2024,10 @@ class Field_reference_expression : public Expression\n   do_address_taken(bool escapes)\n   { this->expr_->address_taken(escapes); }\n \n+  void\n+  do_issue_nil_check()\n+  { this->expr_->issue_nil_check(); }\n+\n   tree\n   do_get_tree(Translate_context*);\n "}, {"sha": "551e97a7b6d4f07af7d2ab4a5e469fd4047ef873", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c7b4c0c9bfd876bab126e7bc1861d1a39f1dbe/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c7b4c0c9bfd876bab126e7bc1861d1a39f1dbe/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=64c7b4c0c9bfd876bab126e7bc1861d1a39f1dbe", "patch": "@@ -8847,8 +8847,7 @@ Type::add_local_methods_for_type(const Named_type* nt,\n       bool is_value_method = (is_embedded_pointer\n \t\t\t      || !Type::method_expects_pointer(no));\n       Method* m = new Named_method(no, field_indexes, depth, is_value_method,\n-\t\t\t\t   (needs_stub_method\n-\t\t\t\t    || (depth > 0 && is_value_method)));\n+\t\t\t\t   (needs_stub_method || depth > 0));\n       if (!(*methods)->insert(no->name(), m))\n \tdelete m;\n     }"}]}