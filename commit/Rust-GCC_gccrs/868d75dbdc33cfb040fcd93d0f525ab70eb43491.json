{"sha": "868d75dbdc33cfb040fcd93d0f525ab70eb43491", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY4ZDc1ZGJkYzMzY2ZiMDQwZmNkOTNkMGY1MjVhYjcwZWI0MzQ5MQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2007-03-15T12:39:47Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-03-15T12:39:47Z"}, "message": "gfortran.h (gfc_option_t): Add flag_backtrace field.\n\n\t* gfortran.h (gfc_option_t): Add flag_backtrace field.\n\t* lang.opt: Add -fbacktrace option.\n\t* invoke.texi: Document the new option.\n\t* trans-decl.c (gfc_build_builtin_function_decls): Add new\n\toption to the call to set_std.\n\t* options.c (gfc_init_options, gfc_handle_option): Handle the\n\tnew option.\n\n\t* runtime/backtrace.c: New file.\n\t* runtime/environ.c (variable_table): New GFORTRAN_ERROR_BACKTRACE\n\tenvironment variable.\n\t* runtime/compile_options.c (set_std): Add new argument.\n\t* runtime/main.c (store_exe_path, full_exe_path): New functions.\n\t* runtime/error.c (sys_exit): Add call to show_backtrace.\n\t* libgfortran.h (options_t): New backtrace field.\n\t(store_exe_path, full_exe_path, show_backtrace): New prototypes.\n\t* configure.ac: Add checks for execinfo.h, execvp, pipe, dup2,\n\tclose, fdopen, strcasestr, getrlimit, backtrace, backtrace_symbols\n\tand getppid.\n\t* Makefile.am: Add runtime/backtrace.c.\n\t* fmain.c (main): Add call to store_exe_path.\n\t* Makefile.in: Renegerate.\n\t* config.h.in: Renegerate.\n\t* configure: Regenerate.\n\nFrom-SVN: r122954", "tree": {"sha": "62c7c06768cd766d8d1a1c1c50f8a53ec3cebf53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62c7c06768cd766d8d1a1c1c50f8a53ec3cebf53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/868d75dbdc33cfb040fcd93d0f525ab70eb43491", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/868d75dbdc33cfb040fcd93d0f525ab70eb43491", "html_url": "https://github.com/Rust-GCC/gccrs/commit/868d75dbdc33cfb040fcd93d0f525ab70eb43491", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/868d75dbdc33cfb040fcd93d0f525ab70eb43491/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "419452fe7e8ca4c132a89258863f4443d408b8a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/419452fe7e8ca4c132a89258863f4443d408b8a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/419452fe7e8ca4c132a89258863f4443d408b8a6"}], "stats": {"total": 723, "additions": 707, "deletions": 16}, "files": [{"sha": "a738975aa31324159e16eff2b4e5d6bceb0ec9ee", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868d75dbdc33cfb040fcd93d0f525ab70eb43491/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868d75dbdc33cfb040fcd93d0f525ab70eb43491/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=868d75dbdc33cfb040fcd93d0f525ab70eb43491", "patch": "@@ -1,3 +1,13 @@\n+2007-03-15  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* gfortran.h (gfc_option_t): Add flag_backtrace field.\n+\t* lang.opt: Add -fbacktrace option.\n+\t* invoke.texi: Document the new option.\n+\t* trans-decl.c (gfc_build_builtin_function_decls): Add new\n+\toption to the call to set_std.\n+\t* options.c (gfc_init_options, gfc_handle_option): Handle the\n+\tnew option.\n+\n 2007-03-15  Tobias Burnus  <burnus@gcc.gnu.org>\n \t    Paul Thomas  <pault@gcc.gnu.org>\n "}, {"sha": "b806f18cea9d0328e000092bbafdae578fdce8d4", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868d75dbdc33cfb040fcd93d0f525ab70eb43491/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868d75dbdc33cfb040fcd93d0f525ab70eb43491/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=868d75dbdc33cfb040fcd93d0f525ab70eb43491", "patch": "@@ -1659,6 +1659,7 @@ typedef struct\n   int flag_f2c;\n   int flag_automatic;\n   int flag_backslash;\n+  int flag_backtrace;\n   int flag_allow_leading_underscore;\n   int flag_dump_core;\n   int flag_external_blas;"}, {"sha": "ef9825cbd7ee5a9590691c4299b4c43f8b374303", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868d75dbdc33cfb040fcd93d0f525ab70eb43491/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868d75dbdc33cfb040fcd93d0f525ab70eb43491/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=868d75dbdc33cfb040fcd93d0f525ab70eb43491", "patch": "@@ -134,8 +134,8 @@ and Warnings}.\n \n @item Debugging Options\n @xref{Debugging Options,,Options for Debugging Your Program or GCC}.\n-@gccoptlist{-fdump-parse-tree  -ffpe-trap=@var{list}\n--fdump-core}\n+@gccoptlist{-fdump-parse-tree  -ffpe-trap=@var{list} @gol\n+-fdump-core -fbacktrace}\n \n @item Directory Options\n @xref{Directory Options,,Options for Directory Search}.\n@@ -562,6 +562,15 @@ zero), @samp{overflow} (overflow in a floating point operation),\n @samp{precision} (loss of precision during operation) and @samp{denormal}\n (operation produced a denormal value).\n \n+@cindex -fbacktrace option\n+@cindex options, -fbacktrace\n+@item -fbacktrace\n+@cindex backtrace\n+@cindex trace\n+Specify that, when a runtime error is encountered, the Fortran runtime\n+library should output a backtrace of the error.  This option\n+only has influence for compilation of the Fortran main program.\n+\n @cindex -fdump-core option\n @cindex options, -fdump-core\n @item -fdump-core"}, {"sha": "c1697fccb104ea9039bd771890f4e5f82f416a25", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868d75dbdc33cfb040fcd93d0f525ab70eb43491/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868d75dbdc33cfb040fcd93d0f525ab70eb43491/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=868d75dbdc33cfb040fcd93d0f525ab70eb43491", "patch": "@@ -93,6 +93,10 @@ fbackslash\n Fortran\n Specify that backslash in string introduces an escape character\n \n+fbacktrace\n+Fortran\n+Produce a backtrace when a runtime error is encountered\n+\n fblas-matmul-limit=\n Fortran RejectNegative Joined UInteger\n -fblas-matmul-limit=<n>        Size of the smallest matrix for which matmul will use BLAS"}, {"sha": "96bedabffb1b5177eaa01cdbe994ce2810899a9e", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868d75dbdc33cfb040fcd93d0f525ab70eb43491/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868d75dbdc33cfb040fcd93d0f525ab70eb43491/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=868d75dbdc33cfb040fcd93d0f525ab70eb43491", "patch": "@@ -94,6 +94,7 @@ gfc_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n   gfc_option.flag_preprocessed = 0;\n   gfc_option.flag_automatic = 1;\n   gfc_option.flag_backslash = 1;\n+  gfc_option.flag_backtrace = 0;\n   gfc_option.flag_allow_leading_underscore = 0;\n   gfc_option.flag_dump_core = 0;\n   gfc_option.flag_external_blas = 0;\n@@ -474,6 +475,10 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       gfc_option.flag_backslash = value;\n       break;\n       \n+    case OPT_fbacktrace:\n+      gfc_option.flag_backtrace = value;\n+      break;\n+      \n     case OPT_fdump_core:\n       gfc_option.flag_dump_core = value;\n       break;"}, {"sha": "a98b11ce5ddeebe36df88c863bee02fde91f4cd4", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868d75dbdc33cfb040fcd93d0f525ab70eb43491/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868d75dbdc33cfb040fcd93d0f525ab70eb43491/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=868d75dbdc33cfb040fcd93d0f525ab70eb43491", "patch": "@@ -2378,7 +2378,8 @@ gfc_build_builtin_function_decls (void)\n   gfor_fndecl_set_std =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"set_std\")),\n \t\t\t\t    void_type_node,\n-\t\t\t\t    4,\n+\t\t\t\t    5,\n+\t\t\t\t    gfc_int4_type_node,\n \t\t\t\t    gfc_int4_type_node,\n \t\t\t\t    gfc_int4_type_node,\n \t\t\t\t    gfc_int4_type_node,\n@@ -3144,7 +3145,9 @@ gfc_generate_function_code (gfc_namespace * ns)\n \t\t\t     build_int_cst (gfc_int4_type_node,\n \t\t\t\t\t    pedantic),\n \t\t\t     build_int_cst (gfc_int4_type_node,\n-\t\t\t\t\t    gfc_option.flag_dump_core));\n+\t\t\t\t\t    gfc_option.flag_dump_core),\n+\t\t\t     build_int_cst (gfc_int4_type_node,\n+\t\t\t\t\t    gfc_option.flag_backtrace));\n       gfc_add_expr_to_block (&body, tmp);\n     }\n "}, {"sha": "70cdf75faadf12a995295f89d654d85935b66263", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=868d75dbdc33cfb040fcd93d0f525ab70eb43491", "patch": "@@ -1,3 +1,22 @@\n+2007-03-15  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* runtime/backtrace.c: New file.\n+\t* runtime/environ.c (variable_table): New GFORTRAN_ERROR_BACKTRACE\n+\tenvironment variable.\n+\t* runtime/compile_options.c (set_std): Add new argument.\n+\t* runtime/main.c (store_exe_path, full_exe_path): New functions.\n+\t* runtime/error.c (sys_exit): Add call to show_backtrace.\n+\t* libgfortran.h (options_t): New backtrace field.\n+\t(store_exe_path, full_exe_path, show_backtrace): New prototypes.\n+\t* configure.ac: Add checks for execinfo.h, execvp, pipe, dup2,\n+\tclose, fdopen, strcasestr, getrlimit, backtrace, backtrace_symbols\n+\tand getppid.\n+\t* Makefile.am: Add runtime/backtrace.c.\n+\t* fmain.c (main): Add call to store_exe_path.\n+\t* Makefile.in: Renegerate.\n+\t* config.h.in: Renegerate.\n+\t* configure: Regenerate.\n+\n 2007-03-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/31051"}, {"sha": "2338b9b8c4ddfbd757605fb8584575b032beeef6", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=868d75dbdc33cfb040fcd93d0f525ab70eb43491", "patch": "@@ -97,6 +97,7 @@ runtime/in_pack_generic.c \\\n runtime/in_unpack_generic.c\n \n gfor_src= \\\n+runtime/backtrace.c \\\n runtime/compile_options.c \\\n runtime/environ.c \\\n runtime/error.c \\"}, {"sha": "8e10976943e68ef3e409afd2e8fe9a575cefbc5a", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=868d75dbdc33cfb040fcd93d0f525ab70eb43491", "patch": "@@ -71,8 +71,8 @@ myexeclibLTLIBRARIES_INSTALL = $(INSTALL)\n toolexeclibLTLIBRARIES_INSTALL = $(INSTALL)\n LTLIBRARIES = $(myexeclib_LTLIBRARIES) $(toolexeclib_LTLIBRARIES)\n libgfortran_la_LIBADD =\n-am__objects_1 = compile_options.lo environ.lo error.lo fpu.lo main.lo \\\n-\tmemory.lo pause.lo stop.lo string.lo select.lo\n+am__objects_1 = backtrace.lo compile_options.lo environ.lo error.lo \\\n+\tfpu.lo main.lo memory.lo pause.lo stop.lo string.lo select.lo\n am__objects_2 = all_l4.lo all_l8.lo all_l16.lo\n am__objects_3 = any_l4.lo any_l8.lo any_l16.lo\n am__objects_4 = count_4_l4.lo count_8_l4.lo count_16_l4.lo \\\n@@ -476,6 +476,7 @@ runtime/in_pack_generic.c \\\n runtime/in_unpack_generic.c\n \n gfor_src = \\\n+runtime/backtrace.c \\\n runtime/compile_options.c \\\n runtime/environ.c \\\n runtime/error.c \\\n@@ -1141,6 +1142,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/any_l8.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/args.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/associated.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/backtrace.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/c99_functions.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/chdir.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/chmod.Plo@am__quote@\n@@ -1942,6 +1944,13 @@ f2c_specifics.lo: intrinsics/f2c_specifics.F90\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LTCOMPILE) -c -o $@ $<\n \n+backtrace.lo: runtime/backtrace.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT backtrace.lo -MD -MP -MF \"$(DEPDIR)/backtrace.Tpo\" -c -o backtrace.lo `test -f 'runtime/backtrace.c' || echo '$(srcdir)/'`runtime/backtrace.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/backtrace.Tpo\" \"$(DEPDIR)/backtrace.Plo\"; else rm -f \"$(DEPDIR)/backtrace.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/backtrace.c' object='backtrace.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o backtrace.lo `test -f 'runtime/backtrace.c' || echo '$(srcdir)/'`runtime/backtrace.c\n+\n compile_options.lo: runtime/compile_options.c\n @am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT compile_options.lo -MD -MP -MF \"$(DEPDIR)/compile_options.Tpo\" -c -o compile_options.lo `test -f 'runtime/compile_options.c' || echo '$(srcdir)/'`runtime/compile_options.c; \\\n @am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/compile_options.Tpo\" \"$(DEPDIR)/compile_options.Plo\"; else rm -f \"$(DEPDIR)/compile_options.Tpo\"; exit 1; fi"}, {"sha": "216adba6e82b42c2ad61b619ea34c20d2c256172", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=868d75dbdc33cfb040fcd93d0f525ab70eb43491", "patch": "@@ -81,6 +81,12 @@\n /* Define to 1 if the target supports __attribute__((visibility(...))). */\n #undef HAVE_ATTRIBUTE_VISIBILITY\n \n+/* Define to 1 if you have the `backtrace' function. */\n+#undef HAVE_BACKTRACE\n+\n+/* Define to 1 if you have the `backtrace_symbols' function. */\n+#undef HAVE_BACKTRACE_SYMBOLS\n+\n /* Define if fpclassify is broken. */\n #undef HAVE_BROKEN_FPCLASSIFY\n \n@@ -171,6 +177,9 @@\n /* libm includes clogl */\n #undef HAVE_CLOGL\n \n+/* Define to 1 if you have the `close' function. */\n+#undef HAVE_CLOSE\n+\n /* complex.h exists */\n #undef HAVE_COMPLEX_H\n \n@@ -261,6 +270,9 @@\n /* Define to 1 if you have the `ctime' function. */\n #undef HAVE_CTIME\n \n+/* Define to 1 if you have the `dup2' function. */\n+#undef HAVE_DUP2\n+\n /* libm includes erf */\n #undef HAVE_ERF\n \n@@ -279,9 +291,15 @@\n /* libm includes erfl */\n #undef HAVE_ERFL\n \n+/* Define to 1 if you have the <execinfo.h> header file. */\n+#undef HAVE_EXECINFO_H\n+\n /* Define to 1 if you have the `execl' function. */\n #undef HAVE_EXECL\n \n+/* Define to 1 if you have the `execvp' function. */\n+#undef HAVE_EXECVP\n+\n /* libm includes exp */\n #undef HAVE_EXP\n \n@@ -300,6 +318,9 @@\n /* libm includes fabsl */\n #undef HAVE_FABSL\n \n+/* Define to 1 if you have the `fdopen' function. */\n+#undef HAVE_FDOPEN\n+\n /* libm includes feenableexcept */\n #undef HAVE_FEENABLEEXCEPT\n \n@@ -372,15 +393,15 @@\n /* libc includes getpid */\n #undef HAVE_GETPID\n \n+/* libc includes getppid */\n+#undef HAVE_GETPPID\n+\n /* Define to 1 if you have the `getrlimit' function. */\n #undef HAVE_GETRLIMIT\n \n /* Define to 1 if you have the `getrusage' function. */\n #undef HAVE_GETRUSAGE\n \n-/* Define to 1 if you have the `gettimeofday' function. */\n-#undef HAVE_GETTIMEOFDAY\n-\n /* libc includes getuid */\n #undef HAVE_GETUID\n \n@@ -486,6 +507,9 @@\n /* Define to 1 if you have the `perror' function. */\n #undef HAVE_PERROR\n \n+/* Define to 1 if you have the `pipe' function. */\n+#undef HAVE_PIPE\n+\n /* libm includes pow */\n #undef HAVE_POW\n \n@@ -567,6 +591,9 @@\n /* Define to 1 if you have the <stdlib.h> header file. */\n #undef HAVE_STDLIB_H\n \n+/* Define to 1 if you have the `strcasestr' function. */\n+#undef HAVE_STRCASESTR\n+\n /* Define to 1 if you have the `strerror' function. */\n #undef HAVE_STRERROR\n "}, {"sha": "3ef0bed4abf0d4745b677743368c596b7d6e2c58", "filename": "libgfortran/configure", "status": "modified", "additions": 195, "deletions": 2, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=868d75dbdc33cfb040fcd93d0f525ab70eb43491", "patch": "@@ -6575,7 +6575,8 @@ done\n \n \n \n-for ac_header in fenv.h fptrap.h float.h\n+\n+for ac_header in fenv.h fptrap.h float.h execinfo.h\n do\n as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n@@ -10398,7 +10399,122 @@ done\n \n \n \n-for ac_func in wait setmode getrlimit gettimeofday\n+\n+\n+\n+\n+\n+for ac_func in wait setmode execvp pipe dup2 close fdopen strcasestr getrlimit\n+do\n+as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n+echo \"$as_me:$LINENO: checking for $ac_func\" >&5\n+echo $ECHO_N \"checking for $ac_func... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_var+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+/* Define $ac_func to an innocuous variant, in case <limits.h> declares $ac_func.\n+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */\n+#define $ac_func innocuous_$ac_func\n+\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char $ac_func (); below.\n+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n+    <limits.h> exists even on freestanding compilers.  */\n+\n+#ifdef __STDC__\n+# include <limits.h>\n+#else\n+# include <assert.h>\n+#endif\n+\n+#undef $ac_func\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char $ac_func ();\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined (__stub_$ac_func) || defined (__stub___$ac_func)\n+choke me\n+#else\n+char (*f) () = $ac_func;\n+#endif\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+int\n+main ()\n+{\n+return f != $ac_func;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  eval \"$as_ac_var=yes\"\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+eval \"$as_ac_var=no\"\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_var'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_var'}'`\" >&6\n+if test `eval echo '${'$as_ac_var'}'` = yes; then\n+  cat >>confdefs.h <<_ACEOF\n+#define `echo \"HAVE_$ac_func\" | $as_tr_cpp` 1\n+_ACEOF\n+\n+fi\n+done\n+\n+\n+# Check for glibc backtrace functions\n+\n+\n+for ac_func in backtrace backtrace_symbols\n do\n as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n echo \"$as_me:$LINENO: checking for $ac_func\" >&5\n@@ -10727,6 +10843,83 @@ _ACEOF\n \n fi\n \n+echo \"$as_me:$LINENO: checking for getppid in -lc\" >&5\n+echo $ECHO_N \"checking for getppid in -lc... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_c_getppid+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lc  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char getppid ();\n+int\n+main ()\n+{\n+getppid ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_c_getppid=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_c_getppid=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_c_getppid\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_c_getppid\" >&6\n+if test $ac_cv_lib_c_getppid = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_GETPPID 1\n+_ACEOF\n+\n+fi\n+\n echo \"$as_me:$LINENO: checking for getuid in -lc\" >&5\n echo $ECHO_N \"checking for getuid in -lc... $ECHO_C\" >&6\n if test \"${ac_cv_lib_c_getuid+set}\" = set; then"}, {"sha": "256a631f7781af5933b201e7993489eec8faddde", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=868d75dbdc33cfb040fcd93d0f525ab70eb43491", "patch": "@@ -164,7 +164,7 @@ AC_HEADER_TIME\n AC_HAVE_HEADERS(stdlib.h stdio.h string.h stddef.h math.h unistd.h signal.h)\n AC_CHECK_HEADERS(time.h sys/params.h sys/time.h sys/times.h sys/resource.h)\n AC_CHECK_HEADERS(sys/types.h sys/stat.h sys/wait.h floatingpoint.h ieeefp.h)\n-AC_CHECK_HEADERS(fenv.h fptrap.h float.h)\n+AC_CHECK_HEADERS(fenv.h fptrap.h float.h execinfo.h)\n AC_CHECK_HEADER([complex.h],[AC_DEFINE([HAVE_COMPLEX_H], [1], [complex.h exists])])\n GCC_HEADER_STDINT(gstdint.h)\n \n@@ -176,14 +176,18 @@ AC_CHECK_MEMBERS([struct stat.st_rdev])\n AC_CHECK_FUNCS(getrusage times mkstemp strtof strtold snprintf ftruncate chsize)\n AC_CHECK_FUNCS(chdir strerror getlogin gethostname kill link symlink perror)\n AC_CHECK_FUNCS(sleep time ttyname signal alarm ctime clock access fork execl)\n-AC_CHECK_FUNCS(wait setmode getrlimit gettimeofday)\n+AC_CHECK_FUNCS(wait setmode execvp pipe dup2 close fdopen strcasestr getrlimit)\n+\n+# Check for glibc backtrace functions\n+AC_CHECK_FUNCS(backtrace backtrace_symbols)\n \n # Check for types\n AC_CHECK_TYPES([intptr_t])\n \n # Check libc for getgid, getpid, getuid\n AC_CHECK_LIB([c],[getgid],[AC_DEFINE([HAVE_GETGID],[1],[libc includes getgid])])\n AC_CHECK_LIB([c],[getpid],[AC_DEFINE([HAVE_GETPID],[1],[libc includes getpid])])\n+AC_CHECK_LIB([c],[getppid],[AC_DEFINE([HAVE_GETPPID],[1],[libc includes getppid])])\n AC_CHECK_LIB([c],[getuid],[AC_DEFINE([HAVE_GETUID],[1],[libc includes getuid])])\n \n # Check for C99 (and other IEEE) math functions"}, {"sha": "397f17bdcf5bccadf693559caf958fb181f75ea6", "filename": "libgfortran/fmain.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Ffmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Ffmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Ffmain.c?ref=868d75dbdc33cfb040fcd93d0f525ab70eb43491", "patch": "@@ -10,9 +10,13 @@ void MAIN__ (void);\n int\n main (int argc, char *argv[])\n {\n+  /* Store the path of the executable file.  */\n+  store_exe_path (argv[0]);\n+\n   /* Set up the runtime environment.  */\n   set_args (argc, argv);\n \n+\n   /* Call the Fortran main program.  Internally this is a function\n      called MAIN__ */\n   MAIN__ ();"}, {"sha": "3703949d17a5c56fefdb15279e7e83d9368de9e2", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=868d75dbdc33cfb040fcd93d0f525ab70eb43491", "patch": "@@ -361,7 +361,7 @@ typedef struct\n   int fpu_round, fpu_precision, fpe;\n \n   int sighup, sigint;\n-  int dump_core;\n+  int dump_core, backtrace;\n }\n options_t;\n \n@@ -378,6 +378,7 @@ typedef struct\n   int pedantic;\n   int convert;\n   int dump_core;\n+  int backtrace;\n   size_t record_marker;\n   int max_subrecord_length;\n }\n@@ -550,6 +551,17 @@ export_proto(set_args);\n extern void get_args (int *, char ***);\n internal_proto(get_args);\n \n+extern void store_exe_path (const char *);\n+export_proto(store_exe_path);\n+\n+extern char * full_exe_path (void);\n+internal_proto(full_exe_path);\n+\n+/* backtrace.c */\n+\n+extern void show_backtrace (void);\n+internal_proto(show_backtrace);\n+\n /* error.c */\n \n #define GFC_ITOA_BUF_SIZE (sizeof (GFC_INTEGER_LARGEST) * 3 + 2)"}, {"sha": "3b17a3950bf8e24ec35783b5078c4f4ff4c79e58", "filename": "libgfortran/runtime/backtrace.c", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Fruntime%2Fbacktrace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Fruntime%2Fbacktrace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fbacktrace.c?ref=868d75dbdc33cfb040fcd93d0f525ab70eb43491", "patch": "@@ -0,0 +1,333 @@\n+/* Copyright (C) 2006 Free Software Foundation, Inc.\n+   Contributed by Fran\u00e7ois-Xavier Coudert\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with libgfortran; see the file COPYING.  If not, write to\n+the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+\n+#include \"config.h\"\n+#include <stdio.h>\n+#include <string.h>\n+\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n+#ifdef HAVE_INTTYPES_H\n+#include <inttypes.h>\n+#endif\n+\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+\n+#ifdef HAVE_INTPTR_T\n+# define INTPTR_T intptr_t\n+#else\n+# define INTPTR_T int\n+#endif\n+\n+#ifdef HAVE_EXECINFO_H\n+#include <execinfo.h>\n+#endif\n+\n+#ifdef HAVE_SYS_WAIT_H\n+#include <sys/wait.h>\n+#endif\n+\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n+\n+#include <ctype.h>\n+\n+#include \"libgfortran.h\"\n+\n+\n+\n+#ifndef HAVE_STRCASESTR\n+#define HAVE_STRCASESTR 1\n+static char *\n+strcasestr (const char *s1, const char *s2)\n+{\n+  const char *p = s1;\n+  const size_t len = strlen (s2);\n+  const char u = *s2, v = isupper((int) *s2) ? tolower((int) *s2)\n+\t\t\t\t  : (islower((int) *s2) ? toupper((int) *s2)\n+\t\t\t\t\t\t\t: *s2);\n+\n+  while (1)\n+    {\n+      while (*p != u && *p != v && *p)\n+\tp++;\n+      if (*p == 0)\n+\treturn NULL;\n+      if (strncasecmp (p, s2, len) == 0)\n+\treturn (char *)p;\n+    }\n+}\n+#endif\n+\n+#define CAN_FORK (defined(HAVE_FORK) && defined(HAVE_EXECVP) \\\n+\t\t  && defined(HAVE_WAIT))\n+#define GLIBC_BACKTRACE (defined(HAVE_BACKTRACE) \\\n+\t\t\t && defined(HAVE_BACKTRACE_SYMBOLS))\n+#define CAN_PIPE (CAN_FORK && defined(HAVE_PIPE) \\\n+\t\t  && defined(HAVE_DUP2) && defined(HAVE_FDOPEN) \\\n+\t\t  && defined(HAVE_CLOSE))\n+\n+\n+#if GLIBC_BACKTRACE\n+static void\n+dump_glibc_backtrace (int depth, char *str[])\n+{\n+  int i;\n+\n+  for (i = 0; i < depth; i++)\n+    st_printf (\"  + %s\\n\", str[i]);\n+\n+  free (str);\n+}\n+#endif\n+\n+/* show_backtrace displays the backtrace, currently obtained by means of\n+   the glibc backtrace* functions.  */\n+void\n+show_backtrace (void)\n+{\n+#if GLIBC_BACKTRACE\n+\n+#define DEPTH 50\n+#define BUFSIZE 1024\n+\n+  void *trace[DEPTH];\n+  char **str;\n+  int depth;\n+\n+  depth = backtrace (trace, DEPTH);\n+  if (depth <= 0)\n+    return;\n+\n+  str = backtrace_symbols (trace, depth);\n+\n+#if CAN_PIPE\n+\n+#ifndef STDIN_FILENO\n+#define STDIN_FILENO 0\n+#endif\n+\n+#ifndef STDOUT_FILENO\n+#define STDOUT_FILENO 1\n+#endif\n+\n+#ifndef STDERR_FILENO\n+#define STDERR_FILENO 2\n+#endif\n+\n+  /* We attempt to extract file and line information from addr2line.  */\n+  do\n+  {\n+    /* Local variables.  */\n+    int f[2], pid, line, i;\n+    FILE *output;\n+    char addr_buf[DEPTH][GFC_XTOA_BUF_SIZE], func[BUFSIZE], file[BUFSIZE];\n+    char *p, *end;\n+    const char *addr[DEPTH];\n+\n+    /* Write the list of addresses in hexadecimal format.  */\n+    for (i = 0; i < depth; i++)\n+      addr[i] = xtoa ((GFC_UINTEGER_LARGEST) (INTPTR_T) trace[i], addr_buf[i],\n+\t\t      sizeof (addr_buf[i]));\n+\n+    /* Don't output an error message if something goes wrong, we'll simply\n+       fall back to the pstack and glibc backtraces.  */\n+    if (pipe (f) != 0)\n+      break;\n+    if ((pid = fork ()) == -1)\n+      break;\n+\n+    if (pid == 0)\n+      {\n+\t/* Child process.  */\n+#define NUM_FIXEDARGS 5\n+\tchar *arg[DEPTH+NUM_FIXEDARGS+1];\n+\n+\tclose (f[0]);\n+\tclose (STDIN_FILENO);\n+\tclose (STDERR_FILENO);\n+\n+\tif (dup2 (f[1], STDOUT_FILENO) == -1)\n+\t  _exit (0);\n+\tclose (f[1]);\n+\n+\targ[0] = (char *) \"addr2line\";\n+\targ[1] = (char *) \"-e\";\n+\targ[2] = full_exe_path ();\n+\targ[3] = (char *) \"-f\";\n+\targ[4] = (char *) \"-s\";\n+\tfor (i = 0; i < depth; i++)\n+\t  arg[NUM_FIXEDARGS+i] = (char *) addr[i];\n+\targ[NUM_FIXEDARGS+depth] = NULL;\n+\texecvp (arg[0], arg);\n+\t_exit (0);\n+#undef NUM_FIXEDARGS\n+      }\n+\n+    /* Father process.  */\n+    close (f[1]);\n+    wait (NULL);\n+    output = fdopen (f[0], \"r\");\n+    i = -1;\n+\n+    if (fgets (func, sizeof(func), output))\n+      {\n+\tst_printf (\"\\nBacktrace for this error:\\n\");\n+\n+\tdo\n+\t  {\n+\t    if (! fgets (file, sizeof(file), output))\n+\t      goto fallback;\n+\n+\t    i++;\n+\n+\t    for (p = func; *p != '\\n' && *p != '\\r'; p++)\n+\t      ;\n+\n+\t    *p = '\\0';\n+\n+\t    /* Try to recognize the internal libgfortran functions.  */\n+\t    if (strncasecmp (func, \"*_gfortran\", 10) == 0\n+\t\t|| strncasecmp (func, \"_gfortran\", 9) == 0\n+\t\t|| strcmp (func, \"main\") == 0 || strcmp (func, \"_start\") == 0)\n+\t      continue;\n+\n+\t    if (strcasestr (str[i], \"libgfortran.so\") != NULL\n+\t\t|| strcasestr (str[i], \"libgfortran.dylib\") != NULL\n+\t\t|| strcasestr (str[i], \"libgfortran.a\") != NULL)\n+\t      continue;\n+\n+\t    /* If we only have the address, use the glibc backtrace.  */\n+\t    if (func[0] == '?' && func[1] == '?' && file[0] == '?'\n+\t\t&& file[1] == '?')\n+\t      {\n+\t        st_printf (\"  + %s\\n\", str[i]);\n+\t        continue;\n+\t      }\n+\n+\t    /* Extract the line number.  */\n+\t    for (end = NULL, p = file; *p; p++)\n+\t      if (*p == ':')\n+\t\tend = p;\n+\t    if (end != NULL)\n+\t      {\n+\t\t*end = '\\0';\n+\t\tline = atoi (++end);\n+\t      }\n+\t    else\n+\t      line = -1;\n+\n+\t    if (strcmp (func, \"MAIN__\") == 0)\n+\t      st_printf (\"  + in the main program\\n\");\n+\t    else\n+\t      st_printf (\"  + function %s (0x%s)\\n\", func, addr[i]);\n+\n+\t    if (line <= 0 && strcmp (file, \"??\") == 0)\n+\t      continue;\n+\n+\t    if (line <= 0)\n+\t      st_printf (\"    from file %s\\n\", file);\n+\t    else\n+\t      st_printf (\"    at line %d of file %s\\n\", line, file);\n+\t  }\n+\twhile (fgets (func, sizeof(func), output));\n+\n+\tfree (str);\n+\treturn;\n+\n+fallback:\n+\tst_printf (\"** Something went wrong while running addr2line. **\\n\"\n+\t\t   \"** Falling back  to a simpler  backtrace scheme. **\\n\");\n+      }\n+    }\n+  while (0);\n+\n+#undef DEPTH\n+#undef BUFSIZE\n+\n+#endif\n+#endif\n+\n+#if CAN_FORK && defined(HAVE_GETPPID)\n+  /* Try to call pstack.  */\n+  do\n+  {\n+    /* Local variables.  */\n+    int pid;\n+\n+    /* Don't output an error message if something goes wrong, we'll simply\n+       fall back to the pstack and glibc backtraces.  */\n+    if ((pid = fork ()) == -1)\n+      break;\n+\n+    if (pid == 0)\n+      {\n+\t/* Child process.  */\n+#define NUM_ARGS 2\n+\tchar *arg[NUM_ARGS+1];\n+\tchar buf[20];\n+\n+\tst_printf (\"\\nBacktrace for this error:\\n\");\n+\targ[0] = (char *) \"pstack\";\n+\tsnprintf (buf, sizeof(buf), \"%d\", (int) getppid ());\n+\targ[1] = buf;\n+\targ[2] = NULL;\n+\texecvp (arg[0], arg);\n+#undef NUM_ARGS\n+\n+\t/* pstack didn't work, so we fall back to dumping the glibc\n+\t   backtrace if we can.  */\n+#if GLIBC_BACKTRACE\n+\tdump_glibc_backtrace (depth, str);\n+#else\n+\tst_printf (\"  unable to produce a backtrace, sorry!\\n\");\n+#endif\n+\n+\t_exit (0);\n+      }\n+\n+    /* Father process.  */\n+    wait (NULL);\n+    return;\n+  }\n+  while(0);\n+#endif\n+\n+#if GLIBC_BACKTRACE\n+  /* Fallback to the glibc backtrace.  */\n+  st_printf (\"\\nBacktrace for this error:\\n\");\n+  dump_glibc_backtrace (depth, str);\n+#endif\n+}"}, {"sha": "dc404da7b53302ef3b4962c470b9f4680304cbcd", "filename": "libgfortran/runtime/compile_options.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Fruntime%2Fcompile_options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Fruntime%2Fcompile_options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fcompile_options.c?ref=868d75dbdc33cfb040fcd93d0f525ab70eb43491", "patch": "@@ -38,18 +38,20 @@ compile_options_t compile_options;\n \n /* Prototypes */\n extern void set_std (GFC_INTEGER_4, GFC_INTEGER_4, GFC_INTEGER_4,\n-\t\t     GFC_INTEGER_4);\n+\t\t     GFC_INTEGER_4, GFC_INTEGER_4);\n export_proto(set_std);\n \n \n void\n set_std (GFC_INTEGER_4 warn_std, GFC_INTEGER_4 allow_std,\n-\t GFC_INTEGER_4 pedantic, GFC_INTEGER_4 dump_core)\n+\t GFC_INTEGER_4 pedantic, GFC_INTEGER_4 dump_core,\n+\t GFC_INTEGER_4 backtrace)\n {\n   compile_options.pedantic = pedantic;\n   compile_options.warn_std = warn_std;\n   compile_options.allow_std = allow_std;\n   compile_options.dump_core = dump_core;\n+  compile_options.backtrace = backtrace;\n }\n \n \n@@ -64,6 +66,7 @@ init_compile_options (void)\n     | GFC_STD_F2003 | GFC_STD_F95 | GFC_STD_F77 | GFC_STD_GNU | GFC_STD_LEGACY;\n   compile_options.pedantic = 0;\n   compile_options.dump_core = 0;\n+  compile_options.backtrace = 0;\n }\n \n /* Function called by the front-end to tell us the"}, {"sha": "c9c1e27f3a27d85e7991e3f76ff8ab1428d7a7a1", "filename": "libgfortran/runtime/environ.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Fruntime%2Fenviron.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Fruntime%2Fenviron.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fenviron.c?ref=868d75dbdc33cfb040fcd93d0f525ab70eb43491", "patch": "@@ -542,6 +542,10 @@ static variable variable_table[] = {\n     init_boolean, show_boolean,\n     \"Dump a core file (if possible) on runtime error\", -1},\n \n+  {\"GFORTRAN_ERROR_BACKTRACE\", -1, &options.backtrace,\n+    init_boolean, show_boolean,\n+    \"Print out a backtrace (if possible) on runtime error\", -1},\n+\n   {NULL, 0, NULL, NULL, NULL, NULL, 0}\n };\n "}, {"sha": "93b81c10721e60e51aabab4e064063f457062beb", "filename": "libgfortran/runtime/error.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Fruntime%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Fruntime%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Ferror.c?ref=868d75dbdc33cfb040fcd93d0f525ab70eb43491", "patch": "@@ -71,6 +71,12 @@ Boston, MA 02110-1301, USA.  */\n void\n sys_exit (int code)\n {\n+  /* Show error backtrace if possible.  */\n+  if (code != 0 && code != 4\n+      && (options.backtrace == 1\n+\t  || (options.backtrace == -1 && compile_options.backtrace == 1)))\n+    show_backtrace ();\n+\n   /* Dump core if requested.  */\n   if (code != 0\n       && (options.dump_core == 1"}, {"sha": "76e4aef724cc2338b5d7b7fe09dea1002c96d42e", "filename": "libgfortran/runtime/main.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Fruntime%2Fmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868d75dbdc33cfb040fcd93d0f525ab70eb43491/libgfortran%2Fruntime%2Fmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmain.c?ref=868d75dbdc33cfb040fcd93d0f525ab70eb43491", "patch": "@@ -32,9 +32,15 @@ Boston, MA 02110-1301, USA.  */\n #include <string.h>\n #include <math.h>\n #include <stddef.h>\n+#include <limits.h>\n \n+#include \"config.h\"\n #include \"libgfortran.h\"\n \n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+\n /* Stupid function to be sure the constructor is always linked in, even\n    in the case of static linking.  See PR libfortran/22298 for details.  */\n void\n@@ -92,6 +98,44 @@ get_args (int *argc, char ***argv)\n }\n \n \n+static const char *exe_path;\n+\n+/* Save the path under which the program was called, for use in the\n+   backtrace routines.  */\n+void\n+store_exe_path (const char * argv0)\n+{\n+#ifndef PATH_MAX\n+#define PATH_MAX 1024\n+#endif\n+\n+#ifndef DIR_SEPARATOR   \n+#define DIR_SEPARATOR '/'\n+#endif\n+\n+  char buf[PATH_MAX], *cwd, *path;\n+\n+  if (argv0[0] == '/')\n+    {\n+      exe_path = argv0;\n+      return;\n+    }\n+\n+  cwd = getcwd (buf, sizeof (buf));\n+\n+  /* exe_path will be cwd + \"/\" + argv[0] + \"\\0\" */\n+  path = malloc (strlen (cwd) + 1 + strlen (argv0) + 1);\n+  st_sprintf (path, \"%s%c%s\", cwd, DIR_SEPARATOR, argv0);\n+  exe_path = path;\n+}\n+\n+/* Return the full path of the executable.  */\n+char *\n+full_exe_path (void)\n+{\n+  return (char *) exe_path;\n+}\n+\n /* Initialize the runtime library.  */\n \n static void __attribute__((constructor))"}]}