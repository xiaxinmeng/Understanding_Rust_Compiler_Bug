{"sha": "6a071b2d40a1078b4029c2b77ef29ffca4e7050c", "node_id": "C_kwDOANBUbNoAKDZhMDcxYjJkNDBhMTA3OGI0MDI5YzJiNzdlZjI5ZmZjYTRlNzA1MGM", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-11-25T14:08:03Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-12-09T16:46:46Z"}, "message": "c++: Handle auto(x) in parameter-declaration-clause [PR103401]\n\nIn C++23, auto(x) is valid, so decltype(auto(x)) should also be valid,\nso\n\n  void f(decltype(auto(0)));\n\nshould be just as\n\n  void f(int);\n\nbut currently, everytime we see 'auto' in a parameter-declaration-clause,\nwe try to synthesize_implicit_template_parm for it, creating a new template\nparameter list.  The code above actually has us calling s_i_t_p twice;\nonce from cp_parser_decltype_expr -> cp_parser_postfix_expression which\nfails and then again from cp_parser_decltype_expr -> cp_parser_expression.\nSo it looks like we have f<auto, auto> and we accept ill-formed code.\n\nThis shows that we need to be more careful about synthesizing the\nimplicit template parameter.  [dcl.spec.auto.general] says that \"A\nplaceholder-type-specifier of the form type-constraintopt auto can be\nused as a decl-specifier of the decl-specifier-seq of a\nparameter-declaration of a function declaration or lambda-expression...\"\nso this patch turns off auto_is_... after we've parsed the decl-specifier-seq.\n\nThat doesn't quite cut it yet though, because we also need to handle an\nauto nested in the decl-specifier:\n\n  void f(decltype(new auto{0}));\n\ntherefore the cp_parser_decltype change.\n\nTo accept \"sizeof(auto{10})\", the cp_parser_type_id_1 hunk only gives a\nhard error when we're not parsing tentatively.\n\nThe cp_parser_parameter_declaration hunk broke lambda-generic-85713-2.C but\nI think the error we issue with this patch is in fact correct, and clang++\nagrees.\n\nThe r11-1913 change is OK: we need to make sure that we see '(auto)' after\ndecltype to go ahead with 'decltype(auto)'.\n\n\tPR c++/103401\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_decltype): Clear\n\tauto_is_implicit_function_template_parm_p.\n\t(cp_parser_type_id_1): Give errors only when !cp_parser_simulate_error.\n\t(cp_parser_parameter_declaration): Clear\n\tauto_is_implicit_function_template_parm_p after parsing the\n\tdecl-specifier-seq.\n\t(cp_parser_sizeof_operand): Clear\n\tauto_is_implicit_function_template_parm_p.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1y/lambda-generic-85713-2.C: Add dg-error.\n\t* g++.dg/cpp1y/pr60054.C: Adjust dg-error.\n\t* g++.dg/cpp1y/pr60332.C: Likewise.\n\t* g++.dg/cpp2a/concepts-pr84979-2.C: Likewise.\n\t* g++.dg/cpp2a/concepts-pr84979-3.C: Likewise.\n\t* g++.dg/cpp2a/concepts-pr84979.C: Likewise.\n\t* g++.dg/cpp23/auto-fncast7.C: New test.\n\t* g++.dg/cpp23/auto-fncast8.C: New test.\n\t* g++.dg/cpp23/auto-fncast9.C: New test.", "tree": {"sha": "4a762a6e737036f28f7e2b6768cfc7dd4a4069d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a762a6e737036f28f7e2b6768cfc7dd4a4069d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a071b2d40a1078b4029c2b77ef29ffca4e7050c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a071b2d40a1078b4029c2b77ef29ffca4e7050c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a071b2d40a1078b4029c2b77ef29ffca4e7050c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2766448c5cc3efc491fd9670f60b6b141ac3b456", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2766448c5cc3efc491fd9670f60b6b141ac3b456", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2766448c5cc3efc491fd9670f60b6b141ac3b456"}], "stats": {"total": 141, "additions": 116, "deletions": 25}, "files": [{"sha": "de464afdb549363142475084be2676764a8d598b", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6a071b2d40a1078b4029c2b77ef29ffca4e7050c", "patch": "@@ -16432,6 +16432,16 @@ cp_parser_decltype (cp_parser *parser)\n \t= parser->greater_than_is_operator_p;\n       parser->greater_than_is_operator_p = true;\n \n+      /* Don't synthesize an implicit template type parameter here.  This\n+\t could happen with C++23 code like\n+\n+\t   void f(decltype(new auto{0}));\n+\n+\t where we want to deduce the auto right away so that the parameter\n+\t is of type 'int *'.  */\n+      auto cleanup = make_temp_override\n+\t(parser->auto_is_implicit_function_template_parm_p, false);\n+\n       /* Do not actually evaluate the expression.  */\n       ++cp_unevaluated_operand;\n \n@@ -24144,22 +24154,22 @@ cp_parser_type_id_1 (cp_parser *parser, cp_parser_flags flags,\n \t  /* OK */;\n \telse\n \t  {\n-\t    location_t loc = type_specifier_seq.locations[ds_type_spec];\n-\t    if (tree tmpl = CLASS_PLACEHOLDER_TEMPLATE (auto_node))\n+\t    if (!cp_parser_simulate_error (parser))\n \t      {\n-\t\tif (!cp_parser_simulate_error (parser))\n+\t\tlocation_t loc = type_specifier_seq.locations[ds_type_spec];\n+\t\tif (tree tmpl = CLASS_PLACEHOLDER_TEMPLATE (auto_node))\n \t\t  {\n \t\t    error_at (loc, \"missing template arguments after %qT\",\n \t\t\t      auto_node);\n \t\t    inform (DECL_SOURCE_LOCATION (tmpl), \"%qD declared here\",\n \t\t\t    tmpl);\n \t\t  }\n+\t\telse if (parser->in_template_argument_list_p)\n+\t\t  error_at (loc, \"%qT not permitted in template argument\",\n+\t\t\t    auto_node);\n+\t\telse\n+\t\t  error_at (loc, \"invalid use of %qT\", auto_node);\n \t      }\n-\t    else if (parser->in_template_argument_list_p)\n-\t      error_at (loc, \"%qT not permitted in template argument\",\n-\t\t\tauto_node);\n-\t    else\n-\t      error_at (loc, \"invalid use of %qT\", auto_node);\n \t    return error_mark_node;\n \t  }\n       }\n@@ -24668,6 +24678,15 @@ cp_parser_parameter_declaration (cp_parser *parser,\n \t\t\t\t&decl_specifiers,\n \t\t\t\t&declares_class_or_enum);\n \n+  /* [dcl.spec.auto.general]: \"A placeholder-type-specifier of the form\n+     type-constraint opt auto can be used as a decl-specifier of the\n+     decl-specifier-seq of a parameter-declaration of a function declaration\n+     or lambda-expression...\" but we must not synthesize an implicit template\n+     type parameter in its declarator.  That is, in \"void f(auto[auto{10}]);\"\n+     we want to synthesize only the first auto.  */\n+  auto cleanup = make_temp_override\n+    (parser->auto_is_implicit_function_template_parm_p, false);\n+\n   /* Complain about missing 'typename' or other invalid type names.  */\n   if (!decl_specifiers.any_type_specifiers_p\n       && cp_parser_parse_and_diagnose_invalid_type_name (parser))\n@@ -32369,6 +32388,9 @@ cp_parser_sizeof_operand (cp_parser* parser, enum rid keyword)\n     = parser->non_integral_constant_expression_p;\n   parser->integral_constant_expression_p = false;\n \n+  auto cleanup = make_temp_override\n+    (parser->auto_is_implicit_function_template_parm_p, false);\n+\n   /* Do not actually evaluate the expression.  */\n   ++cp_unevaluated_operand;\n   ++c_inhibit_evaluation_warnings;"}, {"sha": "dbc9e8c732c7a1b592adac7228744e73a9673799", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-85713-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-85713-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-85713-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-85713-2.C?ref=6a071b2d40a1078b4029c2b77ef29ffca4e7050c", "patch": "@@ -2,6 +2,6 @@\n // { dg-do compile { target c++14 } }\n \n auto l4 = [](auto v, auto (&array (int)) [5]) -> int { return v + array[0]; };\n-auto l5 = [](auto v, auto (&array (auto)) [5]) -> int { return v + array[0]; };\n+auto l5 = [](auto v, auto (&array (auto)) [5]) -> int { return v + array[0]; };\t    // { dg-error \".auto. parameter not permitted in this context\" }\n auto l6 = [](auto v, auto (&array (int int)) [5]) -> int { return v + array[0]; };  // { dg-error \"two or more data types\" }\n auto l7 = [](auto v, auto (&array (int auto)) [5]) -> int { return v + array[0]; };  // { dg-error \"two or more data types\" }"}, {"sha": "0d4925afbf29356b7b21a1ca15b2d313c0d885e4", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60054.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60054.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60054.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60054.C?ref=6a071b2d40a1078b4029c2b77ef29ffca4e7050c", "patch": "@@ -6,6 +6,6 @@ template<typename T> decltype(T{}) fooB(T);\n \n void bar()\n {\n-  fooA((auto*)0);  // { dg-error \"invalid use\" }\n-  fooB((auto*)0);  // { dg-error \"invalid use\" }\n+  fooA((auto*)0);  // { dg-error \"expected\" }\n+  fooB((auto*)0);  // { dg-error \"expected\" }\n }"}, {"sha": "f3a7980b3808fb21fbb3a5a17eec13644437d98b", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60332.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60332.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60332.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60332.C?ref=6a071b2d40a1078b4029c2b77ef29ffca4e7050c", "patch": "@@ -3,4 +3,5 @@\n \n void foo();\n \n-auto f = (auto(*)())(&foo);  // { dg-error \"invalid\" }\n+auto f = (auto(*)())(&foo);  // { dg-error \"expected\" }\n+// { dg-error \"only available\" \"\" { target c++20_down } .-1 }"}, {"sha": "763164f3e5ba58d5f64289d698e6868fef42dc5f", "filename": "gcc/testsuite/g++.dg/cpp23/auto-fncast7.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast7.C?ref=6a071b2d40a1078b4029c2b77ef29ffca4e7050c", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/103401\n+// { dg-do compile { target c++23 } }\n+\n+void f(decltype(auto(0))) { }\n+\n+int main()\n+{\n+  f<int,int>(0); // { dg-error \"no matching function\" }\n+}"}, {"sha": "9fb7b9c2516902756083c6272320b478e7cc69d4", "filename": "gcc/testsuite/g++.dg/cpp23/auto-fncast8.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast8.C?ref=6a071b2d40a1078b4029c2b77ef29ffca4e7050c", "patch": "@@ -0,0 +1,42 @@\n+// PR c++/103401\n+// { dg-do compile { target c++23 } }\n+\n+void f1 (decltype(auto(0)));\n+void f2 (decltype(auto{0}));\n+void f3 (int = auto(42));\n+void f4 (int = auto{42});\n+void f5 (decltype(auto(0)) = auto(42));\n+void f6 (auto (x));\n+void f7 (int[auto(10)]);\n+void f8 (int[auto{10}]);\n+void f9 (auto[auto{10}]);\n+void f10 (auto);\n+void f11 (int x, decltype(x) y);\n+void f12 (int[sizeof(auto{10})]);\n+void f13 (int[sizeof(auto(10))]);\n+void f14 (int[__extension__ alignof(auto{10})]);\n+void f15 (int[__extension__ alignof(auto(10))]);\n+\n+void\n+g ()\n+{\n+  int a[2];\n+  f1 (1);\n+  f2 (1);\n+  f3 ();\n+  f3 (1);\n+  f4 ();\n+  f4 (1);\n+  f5 ();\n+  f5 (1);\n+  f6 ('a');\n+  f7 (&a[0]);\n+  f8 (&a[0]);\n+  f9 (&a[0]);\n+  f10 (1);\n+  f11 (1, 2);\n+  f12 (&a[0]);\n+  f13 (&a[0]);\n+  f14 (&a[0]);\n+  f15 (&a[0]);\n+}"}, {"sha": "12a0dcece7597afe5ecb749b2ad4ebc0f29a7645", "filename": "gcc/testsuite/g++.dg/cpp23/auto-fncast9.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast9.C?ref=6a071b2d40a1078b4029c2b77ef29ffca4e7050c", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/103401\n+// { dg-do compile { target c++23 } }\n+\n+void f1(decltype(new auto{0}));\n+void f2(decltype(new int{0}));\n+\n+void\n+g ()\n+{\n+  int i;\n+  void f3(decltype(new auto{0}));\n+  void f4(decltype(new int{0}));\n+  f1 (&i);\n+  f2 (&i);\n+  f3 (&i);\n+  f4 (&i);\n+}"}, {"sha": "75f8e40ca585e1249b6d8692836490b2e0f6c59b", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr84979-2.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979-2.C?ref=6a071b2d40a1078b4029c2b77ef29ffca4e7050c", "patch": "@@ -4,9 +4,9 @@\n template <typename T>\n void foo1(T& t) {\n   typename T::template C<void> tcv = t;\n-  typename T::template C<auto> u = tcv; // { dg-error \"not permitted\" \"\" { target c++20 } }\n-  T::template C<auto>::f (tcv, u); // { dg-error \"incomplete|not permitted\" }\n-  (typename T::template D<auto> (t)); // { dg-error \"invalid|not permitted|unable\" }\n+  typename T::template C<auto> u = tcv; // { dg-error \"\" \"\" { target c++20 } }\n+  T::template C<auto>::f (tcv, u); // { dg-error \"\" }\n+  (typename T::template D<auto> (t)); // { dg-error \"\" }\n // { dg-warning \"only available\" \"\" { target c++17_down } .-1 }\n }\n \n@@ -23,9 +23,9 @@ struct T1 {\n template <typename T>\n void foo2(T& t) {\n   typename T::template C<void> tcv = t;\n-  typename T::template C<auto> u = tcv; // { dg-error \"not permitted\" \"\" { target c++20 } }\n-  T::template C<auto>::f (tcv, u); // { dg-error \"incomplete|not permitted\" }\n-  T::template D<auto> (t); // { dg-error \"invalid|not permitted\" }\n+  typename T::template C<auto> u = tcv; // { dg-error \"\" \"\" { target c++20 } }\n+  T::template C<auto>::f (tcv, u); // { dg-error \"\" }\n+  T::template D<auto> (t); // { dg-error \"\" }\n }\n \n struct T2 {"}, {"sha": "1c1a41c0fa20dad4713ef993d4fd9dbbfaf7ac67", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr84979-3.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979-3.C?ref=6a071b2d40a1078b4029c2b77ef29ffca4e7050c", "patch": "@@ -8,9 +8,9 @@\n template <typename T>\n void foo1(T& t) {\n   typename T::template C<void> tcv = t;\n-  typename T::template C<auto> u = tcv; // { dg-error \"not permitted\" \"\" { target c++20 } }\n-  T::template C<auto>::f (tcv, u); // { dg-error \"incomplete|not permitted\" }\n-  (typename T::template D<auto> (t)); // { dg-error \"invalid|not permitted|no class\" }\n+  typename T::template C<auto> u = tcv; // { dg-error \"\" \"\" { target c++20 } }\n+  T::template C<auto>::f (tcv, u); // { dg-error \"\" }\n+  (typename T::template D<auto> (t)); // { dg-error \"\" }\n // { dg-warning \"only available\" \"\" { target c++17_down } .-1 }\n }\n \n@@ -27,9 +27,9 @@ struct T1 {\n template <typename T>\n void foo2(T& t) {\n   typename T::template C<void> tcv = t;\n-  typename T::template C<auto> u = tcv; // { dg-error \"not permitted\" \"\" { target c++20 } }\n-  T::template C<auto>::f (tcv, u); // { dg-error \"incomplete|not permitted\" }\n-  T::template D<auto> (t); // { dg-error \"yields a type|not permitted\" }\n+  typename T::template C<auto> u = tcv; // { dg-error \"\" \"\" { target c++20 } }\n+  T::template C<auto>::f (tcv, u); // { dg-error \"\" }\n+  T::template D<auto> (t); // { dg-error \"\" }\n }\n \n struct T2 {"}, {"sha": "a83601527bb3806efef70216b156e26b4cb215dc", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr84979.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a071b2d40a1078b4029c2b77ef29ffca4e7050c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979.C?ref=6a071b2d40a1078b4029c2b77ef29ffca4e7050c", "patch": "@@ -5,5 +5,5 @@ template<typename> void foo() {}\n \n void bar()\n {\n-  foo<auto>(); // { dg-error \"not permitted|invalid|no matching function\" }\n+  foo<auto>(); // { dg-error \"\" }\n }"}]}