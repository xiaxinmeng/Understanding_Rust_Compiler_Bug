{"sha": "91e4938b8c0f979f84c2b66d1ff5370e83e00eb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFlNDkzOGI4YzBmOTc5Zjg0YzJiNjZkMWZmNTM3MGU4M2UwMGViMA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@normalesup.org", "date": "2011-05-04T23:23:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-04T23:23:54Z"}, "message": "PR libstdc++/47913 (again)\n\n2011-05-04  Marc Glisse  <marc.glisse@normalesup.org>\n\n\tPR libstdc++/47913 (again)\n\t* include/std/ratio (ratio_add, ratio_less): Rewrite.\n\t* testsuite/20_util/ratio/operations/47913.cc: Extend.\n\t* testsuite/20_util/ratio/cons/cons_overflow_neg.cc: Adjust dg-error\n\tline numbers.\n\t* testsuite/20_util/ratio/operations/ops_overflow_neg.cc: Likewise.\n\nFrom-SVN: r173400", "tree": {"sha": "fd6a5836bbfa70f6b6737c0c7a08cb7384cc2330", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd6a5836bbfa70f6b6737c0c7a08cb7384cc2330"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91e4938b8c0f979f84c2b66d1ff5370e83e00eb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91e4938b8c0f979f84c2b66d1ff5370e83e00eb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91e4938b8c0f979f84c2b66d1ff5370e83e00eb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91e4938b8c0f979f84c2b66d1ff5370e83e00eb0/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40fda55b4060ddc9f5d5bebe39cd409d63af9388", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40fda55b4060ddc9f5d5bebe39cd409d63af9388", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40fda55b4060ddc9f5d5bebe39cd409d63af9388"}], "stats": {"total": 401, "additions": 284, "deletions": 117}, "files": [{"sha": "7b766dc339369623002015db84bb0ac1317d3391", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e4938b8c0f979f84c2b66d1ff5370e83e00eb0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e4938b8c0f979f84c2b66d1ff5370e83e00eb0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=91e4938b8c0f979f84c2b66d1ff5370e83e00eb0", "patch": "@@ -1,3 +1,12 @@\n+2011-05-04  Marc Glisse  <marc.glisse@normalesup.org>\n+\n+\tPR libstdc++/47913 (again)\n+\t* include/std/ratio (ratio_add, ratio_less): Rewrite.\n+\t* testsuite/20_util/ratio/operations/47913.cc: Extend.\n+\t* testsuite/20_util/ratio/cons/cons_overflow_neg.cc: Adjust dg-error\n+\tline numbers.\n+\t* testsuite/20_util/ratio/operations/ops_overflow_neg.cc: Likewise.\n+\n 2011-05-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/48848"}, {"sha": "a9cbfe246e3eac52d395ed1ca9b89dcabbde8609", "filename": "libstdc++-v3/include/std/ratio", "status": "modified", "additions": 245, "deletions": 108, "changes": 353, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e4938b8c0f979f84c2b66d1ff5370e83e00eb0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e4938b8c0f979f84c2b66d1ff5370e83e00eb0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio?ref=91e4938b8c0f979f84c2b66d1ff5370e83e00eb0", "patch": "@@ -98,41 +98,154 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static const uintmax_t __b1 = __static_abs<_Qn>::value / __c;\n \n       static_assert(__a1 == 0 || __b1 == 0, \n-        \"overflow in multiplication\");\n+\t\t    \"overflow in multiplication\");\n       static_assert(__a0 * __b1 + __b0 * __a1 < (__c >> 1), \n-        \"overflow in multiplication\");\n+\t\t    \"overflow in multiplication\");\n       static_assert(__b0 * __a0 <= __INTMAX_MAX__, \n-        \"overflow in multiplication\");\n-      static_assert((__a0 * __b1 + __b0 * __a1) * __c <= \n-        __INTMAX_MAX__ -  __b0 * __a0, \"overflow in multiplication\");\n+\t\t    \"overflow in multiplication\");\n+      static_assert((__a0 * __b1 + __b0 * __a1) * __c\n+\t\t    <= __INTMAX_MAX__ -  __b0 * __a0,\n+\t\t    \"overflow in multiplication\");\n \n     public:\n       static const intmax_t value = _Pn * _Qn;\n     };\n \n-  // Helpers for __safe_add\n-  template<intmax_t _Pn, intmax_t _Qn, bool>\n-    struct __add_overflow_check_impl\n-    : integral_constant<bool, (_Pn <= __INTMAX_MAX__ - _Qn)>\n+  // Some double-precision utilities, where numbers are represented as\n+  // __hi*2^(8*sizeof(uintmax_t)) + __lo.\n+  template<uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2>\n+    struct __big_less\n+    : integral_constant<bool, (__hi1 < __hi2\n+\t\t\t       || (__hi1 == __hi2 && __lo1 < __lo2))>\n     { };\n \n-  template<intmax_t _Pn, intmax_t _Qn>\n-    struct __add_overflow_check_impl<_Pn, _Qn, false>\n-    : integral_constant<bool, (_Pn >= -__INTMAX_MAX__ - _Qn)>\n-    { };\n+  template<uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2>\n+    struct __big_add\n+    {\n+      static constexpr uintmax_t __lo = __lo1 + __lo2;\n+      static constexpr uintmax_t __hi = (__hi1 + __hi2 +\n+\t\t\t\t\t (__lo1 + __lo2 < __lo1)); // carry\n+    };\n \n-  template<intmax_t _Pn, intmax_t _Qn>\n-    struct __add_overflow_check\n-    : __add_overflow_check_impl<_Pn, _Qn, (_Qn >= 0)>\n-    { };\n+  // Subtract a number from a bigger one.\n+  template<uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2>\n+    struct __big_sub\n+    {\n+      static_assert(!__big_less<__hi1, __lo1, __hi2, __lo2>::value,\n+\t\t    \"Internal library error\");\n+      static constexpr uintmax_t __lo = __lo1 - __lo2;\n+      static constexpr uintmax_t __hi = (__hi1 - __hi2 -\n+\t\t\t\t\t (__lo1 < __lo2)); // carry\n+    };\n \n-  template<intmax_t _Pn, intmax_t _Qn>\n-    struct __safe_add\n+  // Same principle as __safe_multiply.\n+  template<uintmax_t __x, uintmax_t __y>\n+    struct __big_mul\n+    {\n+    private:\n+      static constexpr uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);\n+      static constexpr uintmax_t __x0 = __x % __c;\n+      static constexpr uintmax_t __x1 = __x / __c;\n+      static constexpr uintmax_t __y0 = __y % __c;\n+      static constexpr uintmax_t __y1 = __y / __c;\n+      static constexpr uintmax_t __x0y0 = __x0 * __y0;\n+      static constexpr uintmax_t __x0y1 = __x0 * __y1;\n+      static constexpr uintmax_t __x1y0 = __x1 * __y0;\n+      static constexpr uintmax_t __x1y1 = __x1 * __y1;\n+      static constexpr uintmax_t __mix = __x0y1 + __x1y0; // possible carry...\n+      static constexpr uintmax_t __mix_lo = __mix * __c;\n+      static constexpr uintmax_t __mix_hi\n+      = __mix / __c + ((__mix < __x0y1) ? __c : 0); // ... added here\n+      typedef __big_add<__mix_hi, __mix_lo, __x1y1, __x0y0> _Res;\n+    public:\n+      static constexpr uintmax_t __hi = _Res::__hi;\n+      static constexpr uintmax_t __lo = _Res::__lo;\n+    };\n+\n+  // Adapted from __udiv_qrnnd_c in longlong.h\n+  // This version assumes that the high bit of __d is 1.\n+  template<uintmax_t __n1, uintmax_t __n0, uintmax_t __d>\n+    struct __big_div_impl\n+    {\n+    private:\n+      static_assert(__d >= (uintmax_t(1) << (sizeof(intmax_t) * 8 - 1)),\n+\t\t    \"Internal library error\");\n+      static_assert(__n1 < __d, \"Internal library error\");\n+      static constexpr uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);\n+      static constexpr uintmax_t __d1 = __d / __c;\n+      static constexpr uintmax_t __d0 = __d % __c;\n+\n+      static constexpr uintmax_t __q1x = __n1 / __d1;\n+      static constexpr uintmax_t __r1x = __n1 % __d1;\n+      static constexpr uintmax_t __m = __q1x * __d0;\n+      static constexpr uintmax_t __r1y = __r1x * __c + __n0 / __c;\n+      static constexpr uintmax_t __r1z = __r1y + __d;\n+      static constexpr uintmax_t __r1\n+      = ((__r1y < __m) ? ((__r1z >= __d) && (__r1z < __m))\n+\t ? (__r1z + __d) : __r1z : __r1y) - __m;\n+      static constexpr uintmax_t __q1\n+      = __q1x - ((__r1y < __m)\n+\t\t ? ((__r1z >= __d) && (__r1z < __m)) ? 2 : 1 : 0);\n+      static constexpr uintmax_t __q0x = __r1 / __d1;\n+      static constexpr uintmax_t __r0x = __r1 % __d1;\n+      static constexpr uintmax_t __n = __q0x * __d0;\n+      static constexpr uintmax_t __r0y = __r0x * __c + __n0 % __c;\n+      static constexpr uintmax_t __r0z = __r0y + __d;\n+      static constexpr uintmax_t __r0\n+      = ((__r0y < __n) ? ((__r0z >= __d) && (__r0z < __n))\n+\t ? (__r0z + __d) : __r0z : __r0y) - __n;\n+      static constexpr uintmax_t __q0\n+      = __q0x - ((__r0y < __n) ? ((__r0z >= __d)\n+\t\t\t\t  && (__r0z < __n)) ? 2 : 1 : 0);\n+\n+    public:\n+      static constexpr uintmax_t __quot = __q1 * __c + __q0;\n+      static constexpr uintmax_t __rem = __r0;\n+\n+    private:\n+      typedef __big_mul<__quot, __d> _Prod;\n+      typedef __big_add<_Prod::__hi, _Prod::__lo, 0, __rem> _Sum;\n+      static_assert(_Sum::__hi == __n1 && _Sum::__lo == __n0,\n+\t\t    \"Internal library error\");\n+  };\n+\n+  template<uintmax_t __n1, uintmax_t __n0, uintmax_t __d>\n+    struct __big_div\n     {\n-      static_assert(__add_overflow_check<_Pn, _Qn>::value != 0, \n-        \"overflow in addition\");\n+    private:\n+      static_assert(__d != 0, \"Internal library error\");\n+      static_assert(sizeof (uintmax_t) == sizeof (unsigned long long),\n+\t\t    \"This library calls __builtin_clzll on uintmax_t, which \"\n+\t\t    \"is unsafe on your platform. Please complain to \"\n+\t\t    \"http://gcc.gnu.org/bugzilla/\");\n+      static constexpr int __shift = __builtin_clzll(__d);\n+      static constexpr int __coshift_ = sizeof(uintmax_t) * 8 - __shift;\n+      static constexpr int __coshift = (__shift != 0) ? __coshift_ : 0;\n+      static constexpr uintmax_t __c1 = uintmax_t(1) << __shift;\n+      static constexpr uintmax_t __c2 = uintmax_t(1) << __coshift;\n+      static constexpr uintmax_t __new_d = __d * __c1;\n+      static constexpr uintmax_t __new_n0 = __n0 * __c1;\n+      static constexpr uintmax_t __n1_shifted = (__n1 % __d) * __c1;\n+      static constexpr uintmax_t __n0_top = (__shift != 0) ? (__n0 / __c2) : 0;\n+      static constexpr uintmax_t __new_n1 = __n1_shifted + __n0_top;\n+      typedef __big_div_impl<__new_n1, __new_n0, __new_d> _Res;\n+\n+    public:\n+      static constexpr uintmax_t __quot_hi = __n1 / __d;\n+      static constexpr uintmax_t __quot_lo = _Res::__quot;\n+      static constexpr uintmax_t __rem = _Res::__rem / __c1;\n \n-      static const intmax_t value = _Pn + _Qn;\n+    private:\n+      typedef __big_mul<__quot_lo, __d> _P0;\n+      typedef __big_mul<__quot_hi, __d> _P1;\n+      typedef __big_add<_P0::__hi, _P0::__lo, _P1::__lo, __rem> _Sum;\n+      // No overflow.\n+      static_assert(_P1::__hi == 0, \"Internal library error\");\n+      static_assert(_Sum::__hi >= _P0::__hi, \"Internal library error\");\n+      // Matches the input data.\n+      static_assert(_Sum::__hi == __n1 && _Sum::__lo == __n0,\n+\t\t    \"Internal library error\");\n+      static_assert(__rem < __d, \"Internal library error\");\n     };\n \n   /**\n@@ -172,53 +285,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<intmax_t _Num, intmax_t _Den>\n     constexpr intmax_t ratio<_Num, _Den>::den;\n \n-  /// ratio_add\n-  template<typename _R1, typename _R2>\n-    struct ratio_add\n-    {\n-    private:\n-      static constexpr intmax_t __gcd =\n-        __static_gcd<_R1::den, _R2::den>::value;\n-      static constexpr intmax_t __n = __safe_add<\n-        __safe_multiply<_R1::num, (_R2::den / __gcd)>::value,\n-        __safe_multiply<_R2::num, (_R1::den / __gcd)>::value>::value;\n-\n-      // The new numerator may have common factors with the denominator,\n-      // but they have to also be factors of __gcd.\n-      static constexpr intmax_t __gcd2 = __static_gcd<__n, __gcd>::value;\n-      \n-    public:\n-      typedef ratio<__n / __gcd2,\n-        __safe_multiply<_R1::den / __gcd2, _R2::den / __gcd>::value> type;\n-\n-      static constexpr intmax_t num = type::num;\n-      static constexpr intmax_t den = type::den;\n-    };\n-\n-  template<typename _R1, typename _R2>\n-    constexpr intmax_t ratio_add<_R1, _R2>::num;\n-\n-  template<typename _R1, typename _R2>\n-    constexpr intmax_t ratio_add<_R1, _R2>::den;\n-\n-  /// ratio_subtract\n-  template<typename _R1, typename _R2>\n-    struct ratio_subtract\n-    {\n-      typedef typename ratio_add<\n-        _R1,\n-        ratio<-_R2::num, _R2::den>>::type type;\n-\n-      static constexpr intmax_t num = type::num;\n-      static constexpr intmax_t den = type::den;\n-    };\n-\n-  template<typename _R1, typename _R2>\n-    constexpr intmax_t ratio_subtract<_R1, _R2>::num;\n-\n-  template<typename _R1, typename _R2>\n-    constexpr intmax_t ratio_subtract<_R1, _R2>::den;\n-\n   /// ratio_multiply\n   template<typename _R1, typename _R2>\n     struct ratio_multiply\n@@ -278,45 +344,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : integral_constant<bool, !ratio_equal<_R1, _R2>::value>\n     { };\n \n-  // 0 <= _Ri < 1\n-  // If one is 0, conclude\n-  // Otherwise, x < y iff 1/y < 1/x\n-  template<typename _R1, typename _R2>\n-    struct __ratio_less_impl_2;\n-\n-  // _Ri > 0\n-  // Compare the integral parts, and remove them if they are equal\n-  template<typename _R1, typename _R2, intmax_t __q1 = _R1::num / _R1::den,\n-           intmax_t __q2 = _R2::num / _R2::den, bool __eq = (__q1 == __q2)>\n+  // Both numbers are positive.\n+  template<typename _R1, typename _R2,\n+           typename _Left = __big_mul<_R1::num,_R2::den>,\n+           typename _Right = __big_mul<_R2::num,_R1::den> >\n     struct __ratio_less_impl_1\n-    : __ratio_less_impl_2<ratio<_R1::num % _R1::den, _R1::den>,\n-           ratio<_R2::num % _R2::den, _R2::den> >::type\n-    { }; \n-\n-  template<typename _R1, typename _R2, intmax_t __q1, intmax_t __q2>\n-    struct __ratio_less_impl_1<_R1, _R2, __q1, __q2, false>\n-    : integral_constant<bool, (__q1 < __q2) >\n-    { };\n-\n-  template<typename _R1, typename _R2>\n-    struct __ratio_less_impl_2\n-    : __ratio_less_impl_1<ratio<_R2::den, _R2::num>,\n-           ratio<_R1::den, _R1::num> >::type\n-    { }; \n-\n-  template<intmax_t __d1, typename _R2>\n-    struct __ratio_less_impl_2<ratio<0, __d1>, _R2>\n-    : integral_constant<bool, true>\n-    { }; \n-\n-  template<typename _R1, intmax_t __d2>\n-    struct __ratio_less_impl_2<_R1, ratio<0, __d2> >\n-    : integral_constant<bool, false>\n-    { }; \n-\n-  template<intmax_t __d1, intmax_t __d2>\n-    struct __ratio_less_impl_2<ratio<0, __d1>, ratio<0, __d2> >\n-    : integral_constant<bool, false>\n+    : integral_constant<bool, __big_less<_Left::__hi, _Left::__lo,\n+           _Right::__hi, _Right::__lo>::value>\n     { }; \n \n   template<typename _R1, typename _R2,\n@@ -341,7 +375,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n   /// ratio_less\n-  // using a continued fraction expansion\n   template<typename _R1, typename _R2>\n     struct ratio_less\n     : __ratio_less_impl<_R1, _R2>::type\n@@ -365,6 +398,110 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : integral_constant<bool, !ratio_less<_R1, _R2>::value>\n     { };\n \n+  template<typename _R1, typename _R2,\n+      bool = (_R1::num >= 0),\n+      bool = (_R2::num >= 0),\n+      bool = ratio_less<ratio<__static_abs<_R1::num>::value, _R1::den>,\n+        ratio<__static_abs<_R2::num>::value, _R2::den> >::value>\n+    struct __ratio_add_impl\n+    {\n+    private:\n+      typedef typename __ratio_add_impl<\n+        ratio<-_R1::num, _R1::den>,\n+        ratio<-_R2::num, _R2::den> >::type __t;\n+    public:\n+      typedef ratio<-__t::num, __t::den> type;\n+    };\n+\n+  // True addition of nonnegative numbers.\n+  template<typename _R1, typename _R2, bool __b>\n+    struct __ratio_add_impl<_R1, _R2, true, true, __b>\n+    {\n+    private:\n+      static constexpr uintmax_t __g = __static_gcd<_R1::den, _R2::den>::value;\n+      static constexpr uintmax_t __d2 = _R2::den / __g;\n+      typedef __big_mul<_R1::den, __d2> __d;\n+      typedef __big_mul<_R1::num, _R2::den / __g> __x;\n+      typedef __big_mul<_R2::num, _R1::den / __g> __y;\n+      typedef __big_add<__x::__hi, __x::__lo, __y::__hi, __y::__lo> __n;\n+      static_assert(__n::__hi >= __x::__hi, \"Internal library error\");\n+      typedef __big_div<__n::__hi, __n::__lo, __g> __ng;\n+      static constexpr uintmax_t __g2 = __static_gcd<__ng::__rem, __g>::value;\n+      typedef __big_div<__n::__hi, __n::__lo, __g2> __n_final;\n+      static_assert(__n_final::__rem == 0, \"Internal library error\");\n+      static_assert(__n_final::__quot_hi == 0 &&\n+        __n_final::__quot_lo <= __INTMAX_MAX__, \"overflow in addition\");\n+      typedef __big_mul<_R1::den / __g2, __d2> __d_final;\n+      static_assert(__d_final::__hi == 0 &&\n+        __d_final::__lo <= __INTMAX_MAX__, \"overflow in addition\");\n+    public:\n+      typedef ratio<__n_final::__quot_lo, __d_final::__lo> type;\n+    };\n+\n+  template<typename _R1, typename _R2>\n+    struct __ratio_add_impl<_R1, _R2, false, true, true>\n+    : __ratio_add_impl<_R2, _R1>\n+    { };\n+\n+  // True subtraction of nonnegative numbers yielding a nonnegative result.\n+  template<typename _R1, typename _R2>\n+    struct __ratio_add_impl<_R1, _R2, true, false, false>\n+    {\n+    private:\n+      static constexpr uintmax_t __g = __static_gcd<_R1::den, _R2::den>::value;\n+      static constexpr uintmax_t __d2 = _R2::den / __g;\n+      typedef __big_mul<_R1::den, __d2> __d;\n+      typedef __big_mul<_R1::num, _R2::den / __g> __x;\n+      typedef __big_mul<-_R2::num, _R1::den / __g> __y;\n+      typedef __big_sub<__x::__hi, __x::__lo, __y::__hi, __y::__lo> __n;\n+      typedef __big_div<__n::__hi, __n::__lo, __g> __ng;\n+      static constexpr uintmax_t __g2 = __static_gcd<__ng::__rem, __g>::value;\n+      typedef __big_div<__n::__hi, __n::__lo, __g2> __n_final;\n+      static_assert(__n_final::__rem == 0, \"Internal library error\");\n+      static_assert(__n_final::__quot_hi == 0 &&\n+        __n_final::__quot_lo <= __INTMAX_MAX__, \"overflow in addition\");\n+      typedef __big_mul<_R1::den / __g2, __d2> __d_final;\n+      static_assert(__d_final::__hi == 0 &&\n+        __d_final::__lo <= __INTMAX_MAX__, \"overflow in addition\");\n+    public:\n+      typedef ratio<__n_final::__quot_lo, __d_final::__lo> type;\n+    };\n+\n+  /// ratio_add\n+  template<typename _R1, typename _R2>\n+    struct ratio_add\n+    {\n+      typedef typename __ratio_add_impl<_R1, _R2>::type type;\n+      static constexpr intmax_t num = type::num;\n+      static constexpr intmax_t den = type::den;\n+    };\n+\n+  template<typename _R1, typename _R2>\n+    constexpr intmax_t ratio_add<_R1, _R2>::num;\n+\n+  template<typename _R1, typename _R2>\n+    constexpr intmax_t ratio_add<_R1, _R2>::den;\n+\n+  /// ratio_subtract\n+  template<typename _R1, typename _R2>\n+    struct ratio_subtract\n+    {\n+      typedef typename ratio_add<\n+        _R1,\n+        ratio<-_R2::num, _R2::den>>::type type;\n+\n+      static constexpr intmax_t num = type::num;\n+      static constexpr intmax_t den = type::den;\n+    };\n+\n+  template<typename _R1, typename _R2>\n+    constexpr intmax_t ratio_subtract<_R1, _R2>::num;\n+\n+  template<typename _R1, typename _R2>\n+    constexpr intmax_t ratio_subtract<_R1, _R2>::den;\n+\n+\n+\n   typedef ratio<1,       1000000000000000000> atto;\n   typedef ratio<1,          1000000000000000> femto;\n   typedef ratio<1,             1000000000000> pico;"}, {"sha": "14076a2d121da8b2d5a0b94baa42314bfb602041", "filename": "libstdc++-v3/testsuite/20_util/ratio/cons/cons_overflow_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e4938b8c0f979f84c2b66d1ff5370e83e00eb0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e4938b8c0f979f84c2b66d1ff5370e83e00eb0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc?ref=91e4938b8c0f979f84c2b66d1ff5370e83e00eb0", "patch": "@@ -49,6 +49,6 @@ test04()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 34 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 46 }\n-// { dg-error \"denominator cannot be zero\" \"\" { target *-*-* } 155 }\n-// { dg-error \"out of range\" \"\" { target *-*-* } 156 }\n+// { dg-error \"denominator cannot be zero\" \"\" { target *-*-* } 268 }\n+// { dg-error \"out of range\" \"\" { target *-*-* } 269 }\n // { dg-error \"overflow in constant expression\" \"\" { target *-*-* } 99 }"}, {"sha": "aa8739469246c28f4a7c5dd511707fc01c9336f5", "filename": "libstdc++-v3/testsuite/20_util/ratio/operations/47913.cc", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e4938b8c0f979f84c2b66d1ff5370e83e00eb0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2F47913.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e4938b8c0f979f84c2b66d1ff5370e83e00eb0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2F47913.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2F47913.cc?ref=91e4938b8c0f979f84c2b66d1ff5370e83e00eb0", "patch": "@@ -19,6 +19,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <ratio>\n+#include <limits>\n #include <testsuite_hooks.h>\n \n // libstdc++/47913\n@@ -27,12 +28,32 @@ void test01()\n   bool test __attribute__((unused)) = true;\n   using namespace std;\n \n-  const intmax_t m = (intmax_t)1 << (4 * sizeof(intmax_t) - 1);\n-  typedef ratio_add<ratio<1, (m - 1) * (m - 2)>,\n-                    ratio<1, (m - 3) * (m - 2)> > ra_type;\n-\n-  VERIFY( ra_type::num == 2 );\n-  VERIFY( ra_type::den == (m - 1) * (m - 3) );\n+  const intmax_t m1 = (intmax_t)1 << (4 * sizeof(intmax_t) - 1);\n+  typedef ratio_add<ratio<1, (m1 - 1) * (m1 - 2)>,\n+                    ratio<1, (m1 - 3) * (m1 - 2)> > ra_type1;\n+  VERIFY( ra_type1::num == 2 );\n+  VERIFY( ra_type1::den == (m1 - 1) * (m1 - 3) );\n+\n+  const intmax_t m2 = numeric_limits<intmax_t>::max();\n+  typedef ratio_add<ratio<m2, 2>,\n+                    ratio<-m2, 3> > ra_type2;\n+  VERIFY( ra_type2::num == m2 );\n+  VERIFY( ra_type2::den == 6 );\n+\n+  typedef ratio_add<ratio<m2 / 7 * 5 - 1, 5>,\n+                    ratio<-m2 + 2, 7> > ra_type3;\n+  ra_type3();\n+\n+  const intmax_t m3 = numeric_limits<intmax_t>::max() - 1;\n+  typedef ratio_add<ratio<-m3 / 7 * 5 - 1, 5>,\n+                    ratio<m3, 7> > ra_type4;\n+  ra_type4();\n+\n+  const intmax_t m4 = numeric_limits<intmax_t>::max() / 2;\n+  typedef ratio_add<ratio<m4 - 5, 15>,\n+                    ratio<m4, 35> > ra_type5;\n+  VERIFY( ra_type5::num == (2 * m4 - 7) );\n+  VERIFY( ra_type5::den == 21 );\n }\n \n int main()"}, {"sha": "f1da21978ec470223c7f3e1f0378cb2655e0ecdd", "filename": "libstdc++-v3/testsuite/20_util/ratio/operations/ops_overflow_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e4938b8c0f979f84c2b66d1ff5370e83e00eb0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e4938b8c0f979f84c2b66d1ff5370e83e00eb0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow_neg.cc?ref=91e4938b8c0f979f84c2b66d1ff5370e83e00eb0", "patch": "@@ -39,7 +39,7 @@ test02()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 29 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 35 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 36 }\n-// { dg-error \"overflow in addition\" \"\" { target *-*-* } 132 }\n+// { dg-error \"overflow in addition\" \"\" { target *-*-* } 432 }\n // { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 104 }\n // { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 100 }\n // { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 102 }"}]}