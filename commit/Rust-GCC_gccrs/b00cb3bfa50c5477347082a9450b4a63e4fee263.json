{"sha": "b00cb3bfa50c5477347082a9450b4a63e4fee263", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAwY2IzYmZhNTBjNTQ3NzM0NzA4MmE5NDUwYjRhNjNlNGZlZTI2Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-02T18:27:35Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-02T18:27:35Z"}, "message": "Use ssizetype selectors for autovectorised VEC_PERM_EXPRs\n\nThe previous patches mean that there's no reason that constant\nVEC_PERM_EXPRs need to have the same shape as the data inputs.\nThis patch makes the autovectoriser use sizetype elements instead,\nso that indices don't get truncated for large or variable-length\nvectors.\n\n2018-01-02  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* tree-cfg.c (verify_gimple_assign_ternary): Allow the size of\n\tthe selector elements to be different from the data elements\n\tif the selector is a VECTOR_CST.\n\t* tree-vect-stmts.c (vect_gen_perm_mask_any): Use a vector of\n\tssizetype for the selector.\n\nFrom-SVN: r256100", "tree": {"sha": "963d6682878902655fb09b1a218b3b9537b7b594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/963d6682878902655fb09b1a218b3b9537b7b594"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b00cb3bfa50c5477347082a9450b4a63e4fee263", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b00cb3bfa50c5477347082a9450b4a63e4fee263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b00cb3bfa50c5477347082a9450b4a63e4fee263", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b00cb3bfa50c5477347082a9450b4a63e4fee263/comments", "author": null, "committer": null, "parents": [{"sha": "d3867483044ae00bac6daaeac6274e95254fb991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3867483044ae00bac6daaeac6274e95254fb991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3867483044ae00bac6daaeac6274e95254fb991"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "00effd0d15e600f4873cbced79c7bc466fcc5682", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b00cb3bfa50c5477347082a9450b4a63e4fee263/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b00cb3bfa50c5477347082a9450b4a63e4fee263/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b00cb3bfa50c5477347082a9450b4a63e4fee263", "patch": "@@ -1,3 +1,11 @@\n+2018-01-02  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* tree-cfg.c (verify_gimple_assign_ternary): Allow the size of\n+\tthe selector elements to be different from the data elements\n+\tif the selector is a VECTOR_CST.\n+\t* tree-vect-stmts.c (vect_gen_perm_mask_any): Use a vector of\n+\tssizetype for the selector.\n+\n 2018-01-02  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* optabs.c (shift_amt_for_vec_perm_mask): Try using series_p"}, {"sha": "96b638f67543918c5b05a4c51dd6ef873ea3b80c", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b00cb3bfa50c5477347082a9450b4a63e4fee263/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b00cb3bfa50c5477347082a9450b4a63e4fee263/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=b00cb3bfa50c5477347082a9450b4a63e4fee263", "patch": "@@ -4428,8 +4428,11 @@ verify_gimple_assign_ternary (gassign *stmt)\n \t}\n \n       if (TREE_CODE (TREE_TYPE (rhs3_type)) != INTEGER_TYPE\n-\t  || GET_MODE_BITSIZE (SCALAR_INT_TYPE_MODE (TREE_TYPE (rhs3_type)))\n-\t     != GET_MODE_BITSIZE (SCALAR_TYPE_MODE (TREE_TYPE (rhs1_type))))\n+\t  || (TREE_CODE (rhs3) != VECTOR_CST\n+\t      && (GET_MODE_BITSIZE (SCALAR_INT_TYPE_MODE\n+\t\t\t\t    (TREE_TYPE (rhs3_type)))\n+\t\t  != GET_MODE_BITSIZE (SCALAR_TYPE_MODE\n+\t\t\t\t       (TREE_TYPE (rhs1_type))))))\n \t{\n \t  error (\"invalid mask type in vector permute expression\");\n \t  debug_generic_expr (lhs_type);"}, {"sha": "8d1dc0425ccd639982448e82213b09ded23a8147", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b00cb3bfa50c5477347082a9450b4a63e4fee263/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b00cb3bfa50c5477347082a9450b4a63e4fee263/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=b00cb3bfa50c5477347082a9450b4a63e4fee263", "patch": "@@ -6535,11 +6535,12 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n tree\n vect_gen_perm_mask_any (tree vectype, const vec_perm_indices &sel)\n {\n-  tree mask_elt_type, mask_type;\n+  tree mask_type;\n+\n+  unsigned int nunits = sel.length ();\n+  gcc_assert (nunits == TYPE_VECTOR_SUBPARTS (vectype));\n \n-  mask_elt_type = lang_hooks.types.type_for_mode\n-    (int_mode_for_mode (TYPE_MODE (TREE_TYPE (vectype))).require (), 1);\n-  mask_type = get_vectype_for_scalar_type (mask_elt_type);\n+  mask_type = build_vector_type (ssizetype, nunits);\n   return vec_perm_indices_to_tree (mask_type, sel);\n }\n "}]}