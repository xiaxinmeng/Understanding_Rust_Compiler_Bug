{"sha": "26fcb35ae229b69189f35637125952fa2eabd0a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZmY2IzNWFlMjI5YjY5MTg5ZjM1NjM3MTI1OTUyZmEyZWFiZDBhMA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-20T02:45:03Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-20T02:45:03Z"}, "message": "(expand_expr, NOP_EXPR case): If EXPAND_INITIALIZER,\n\ngenerate ZERO_EXTEND or SIGN_EXTEND; don't emit insns.\n\n(expand_expr): Set LABEL_REF_NONLOCAL_P for nonlocal labels.\n\nFrom-SVN: r1636", "tree": {"sha": "41742ddd7905d1965045ad43d20c4479ed7ad5eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41742ddd7905d1965045ad43d20c4479ed7ad5eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26fcb35ae229b69189f35637125952fa2eabd0a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26fcb35ae229b69189f35637125952fa2eabd0a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26fcb35ae229b69189f35637125952fa2eabd0a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26fcb35ae229b69189f35637125952fa2eabd0a0/comments", "author": null, "committer": null, "parents": [{"sha": "16bae307a6e7d48d6787c671c3a269a71f08b899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16bae307a6e7d48d6787c671c3a269a71f08b899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16bae307a6e7d48d6787c671c3a269a71f08b899"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "1e4191f9bb0b1fe391771d9a1a233243665fc9f1", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26fcb35ae229b69189f35637125952fa2eabd0a0/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26fcb35ae229b69189f35637125952fa2eabd0a0/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=26fcb35ae229b69189f35637125952fa2eabd0a0", "patch": "@@ -3073,6 +3073,7 @@ fixed_type_p (exp)\n \n    EXPAND_INITIALIZER is much like EXPAND_SUM except that\n    it also marks a label as absolutely required (it can't be dead).\n+   It also makes a ZERO_EXTEND or SIGN_EXTEND instead of emitting extend insns.\n    This is used for outputting expressions used in initializers.  */\n \n rtx\n@@ -3146,8 +3147,11 @@ expand_expr (exp, target, tmode, modifier)\n \telse if (modifier == EXPAND_INITIALIZER)\n \t  forced_labels = gen_rtx (EXPR_LIST, VOIDmode,\n \t\t\t\t   label_rtx (exp), forced_labels);\n-\treturn gen_rtx (MEM, FUNCTION_MODE,\n+\ttemp = gen_rtx (MEM, FUNCTION_MODE,\n \t\t\tgen_rtx (LABEL_REF, Pmode, label_rtx (exp)));\n+\tif (function != current_function_decl && function != 0)\n+\t  LABEL_REF_NONLOCAL_P (XEXP (temp, 0)) = 1;\n+\treturn temp;\n       }\n \n     case PARM_DECL:\n@@ -3782,9 +3786,11 @@ expand_expr (exp, target, tmode, modifier)\n \t  /* Return the entire union.  */\n \t  return target;\n \t}\n-      op0 = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, mode, 0);\n+      op0 = expand_expr (TREE_OPERAND (exp, 0), 0, mode, modifier);\n       if (GET_MODE (op0) == mode || GET_MODE (op0) == VOIDmode)\n \treturn op0;\n+      if (modifier == EXPAND_INITIALIZER)\n+\treturn gen_rtx (unsignedp ? ZERO_EXTEND : SIGN_EXTEND, mode, op0);\n       if (flag_force_mem && GET_CODE (op0) == MEM)\n \top0 = copy_to_reg (op0);\n "}]}