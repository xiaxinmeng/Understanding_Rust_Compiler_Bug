{"sha": "bcbe14db192f03018ea74cf6eb24c04a110ecac0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNiZTE0ZGIxOTJmMDMwMThlYTc0Y2Y2ZWIyNGMwNGExMTBlY2FjMA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-09-26T09:17:16Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-09-26T09:17:16Z"}, "message": "[Ada] Missing predicate check on return value\n\nThe semantics of the return statement includes an implicit conversion of\nthe value to the return type of the funcction. This conversion, as\nelsewhere, entails a predicate check if the return type has a predicate\naspect.\n\nWe do not apply the check to a case expression because in the context of\na return statement it will be expanded into a series of return\nstatements, each of which will receive a predicate check.\n\n2018-09-26  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch6.adb (Analyze_Function_Return): If the return type has\n\ta dynamic_predicate, apply a Predicate_Check to the expression,\n\tgiven that it is implicitly converted to the return type.\n\tExclude case expressions from the check, because in this context\n\tthe expression is expanded into individual return statements.\n\ngcc/testsuite/\n\n\t* gnat.dg/predicate3.adb, gnat.dg/predicate3_pkg.ads: New\n\ttestcase.\n\nFrom-SVN: r264611", "tree": {"sha": "6f0259bd94fa7634186de098bbb969e0fec3564d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f0259bd94fa7634186de098bbb969e0fec3564d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcbe14db192f03018ea74cf6eb24c04a110ecac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcbe14db192f03018ea74cf6eb24c04a110ecac0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcbe14db192f03018ea74cf6eb24c04a110ecac0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcbe14db192f03018ea74cf6eb24c04a110ecac0/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4453a8221c65f386ae361670fa932643521374d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4453a8221c65f386ae361670fa932643521374d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4453a8221c65f386ae361670fa932643521374d7"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "9db27470fe0e4df8c555af416a9e244cea747040", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcbe14db192f03018ea74cf6eb24c04a110ecac0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcbe14db192f03018ea74cf6eb24c04a110ecac0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bcbe14db192f03018ea74cf6eb24c04a110ecac0", "patch": "@@ -1,3 +1,11 @@\n+2018-09-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Function_Return): If the return type has\n+\ta dynamic_predicate, apply a Predicate_Check to the expression,\n+\tgiven that it is implicitly converted to the return type.\n+\tExclude case expressions from the check, because in this context\n+\tthe expression is expanded into individual return statements.\n+\n 2018-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Task_Type>: In"}, {"sha": "d0617fe50b9f4a36053c13141ace089fe0655155", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcbe14db192f03018ea74cf6eb24c04a110ecac0/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcbe14db192f03018ea74cf6eb24c04a110ecac0/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=bcbe14db192f03018ea74cf6eb24c04a110ecac0", "patch": "@@ -1060,6 +1060,16 @@ package body Sem_Ch6 is\n \n          Apply_Constraint_Check (Expr, R_Type);\n \n+         --  The return value is converted to the return type of the function,\n+         --  which implies a predicate check if the return type is predicated.\n+         --  We do not apply the check to a case expression because it will\n+         --  be expanded into a series of return statements, each of which\n+         --  will receive a predicate check.\n+\n+         if Nkind (Expr) /= N_Case_Expression then\n+            Apply_Predicate_Check (Expr, R_Type);\n+         end if;\n+\n          --  Ada 2005 (AI-318-02): When the result type is an anonymous access\n          --  type, apply an implicit conversion of the expression to that type\n          --  to force appropriate static and run-time accessibility checks."}, {"sha": "3c954322f59c28c3e414c11da61bf75d2bf865f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcbe14db192f03018ea74cf6eb24c04a110ecac0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcbe14db192f03018ea74cf6eb24c04a110ecac0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bcbe14db192f03018ea74cf6eb24c04a110ecac0", "patch": "@@ -1,3 +1,8 @@\n+2018-09-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/predicate3.adb, gnat.dg/predicate3_pkg.ads: New\n+\ttestcase.\n+\n 2018-09-26  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/67656"}, {"sha": "0d649edcedfd5e8dd85fefa59e952159ea6a70b1", "filename": "gcc/testsuite/gnat.dg/predicate3.adb", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcbe14db192f03018ea74cf6eb24c04a110ecac0/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcbe14db192f03018ea74cf6eb24c04a110ecac0/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate3.adb?ref=bcbe14db192f03018ea74cf6eb24c04a110ecac0", "patch": "@@ -0,0 +1,39 @@\n+--  { dg-do run }\n+--  { dg-options \"-gnata\" }\n+\n+with Ada.Assertions, Ada.Text_IO;\n+use  Ada.Assertions, Ada.Text_IO;\n+\n+with Predicate3_Pkg;\n+use  Predicate3_Pkg;\n+\n+procedure Predicate3 is\n+   Got_Assertion : Boolean := False;\n+begin\n+\n+   begin\n+      Put_Line (Good (C)'Image);\n+   exception\n+      when Assertion_Error =>\n+         Got_Assertion := True;\n+   end;\n+\n+   if not Got_Assertion then\n+      raise Program_Error;\n+   end if;\n+\n+   Got_Assertion := False;\n+   declare\n+      X: Priv;\n+   begin\n+      X := Wrong;\n+   exception\n+      when Assertion_Error =>\n+         Got_Assertion := True;\n+   end;\n+\n+   if not Got_Assertion then\n+      raise Program_Error;\n+   end if;\n+\n+end Predicate3;"}, {"sha": "a5c2e4cae0e5188097ad953d4c94c68aa5cbf336", "filename": "gcc/testsuite/gnat.dg/predicate3_pkg.ads", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcbe14db192f03018ea74cf6eb24c04a110ecac0/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate3_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcbe14db192f03018ea74cf6eb24c04a110ecac0/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate3_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate3_pkg.ads?ref=bcbe14db192f03018ea74cf6eb24c04a110ecac0", "patch": "@@ -0,0 +1,22 @@\n+package Predicate3_Pkg is\n+ \n+   type Priv is private;\n+   C: constant Priv;\n+ \n+   function Test (X: Priv) return Boolean;\n+   subtype Subt is Priv with Dynamic_Predicate => (Test (Subt));\n+ \n+   function Wrong return Subt;\n+   function Good (X: Subt) return Boolean;\n+ \n+private\n+ \n+   type Priv is new Integer;\n+   C: constant Priv := -1;\n+ \n+   function Test (X: Priv) return Boolean is (X > 0);\n+ \n+   function Wrong return Subt is (-1);\n+   function Good (X: Subt) return Boolean is (True);\n+ \n+end Predicate3_Pkg;"}]}