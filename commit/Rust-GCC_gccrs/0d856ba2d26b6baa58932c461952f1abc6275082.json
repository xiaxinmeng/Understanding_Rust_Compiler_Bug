{"sha": "0d856ba2d26b6baa58932c461952f1abc6275082", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ4NTZiYTJkMjZiNmJhYTU4OTMyYzQ2MTk1MmYxYWJjNjI3NTA4Mg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2004-02-21T02:58:24Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-02-21T02:58:24Z"}, "message": "target-supports.exp (check_profiling_available): Check argument to determine whether we support a profiling type.\n\n\t* lib/target-supports.exp (check_profiling_available): Check\n\targument to determine whether we support a profiling type.\n\t* lib/gcc-dg.exp (dg-require-profiling): Pass argument to\n\tcheck_profiling_available.\n\t* g++.dg/bprob/bprob.exp: Likewise\n\t* g77.dg/bprob/bprob.exp: Likewise.\n\t* gcc.misc-tests/bprob.exp: Likewise.\n\t* g++.old-deja/g++.law/profile1.C: Pass profiling type to\n\tdg-require-profiling and delete expected error handling.\n\t* gcc.dg/20021014-1.c: Likewise.\n\t* gcc.dg/nest.c: Likewise.\n\nFrom-SVN: r78206", "tree": {"sha": "79aa17e9554a7a4348ad6284dbfbb90359769fe9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79aa17e9554a7a4348ad6284dbfbb90359769fe9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d856ba2d26b6baa58932c461952f1abc6275082", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d856ba2d26b6baa58932c461952f1abc6275082", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d856ba2d26b6baa58932c461952f1abc6275082", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d856ba2d26b6baa58932c461952f1abc6275082/comments", "author": null, "committer": null, "parents": [{"sha": "d220de0ed226524460e398c80a580e0dc74b420f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d220de0ed226524460e398c80a580e0dc74b420f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d220de0ed226524460e398c80a580e0dc74b420f"}], "stats": {"total": 66, "additions": 46, "deletions": 20}, "files": [{"sha": "bad926b8ac9bf2553ae334c54c64e22734e21ec2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d856ba2d26b6baa58932c461952f1abc6275082/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d856ba2d26b6baa58932c461952f1abc6275082/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d856ba2d26b6baa58932c461952f1abc6275082", "patch": "@@ -1,3 +1,17 @@\n+2004-02-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* lib/target-supports.exp (check_profiling_available): Check\n+\targument to determine whether we support a profiling type.\n+\t* lib/gcc-dg.exp (dg-require-profiling): Pass argument to\n+\tcheck_profiling_available.\n+\t* g++.dg/bprob/bprob.exp: Likewise\n+\t* g77.dg/bprob/bprob.exp: Likewise.\n+\t* gcc.misc-tests/bprob.exp: Likewise.\n+\t* g++.old-deja/g++.law/profile1.C: Pass profiling type to\n+\tdg-require-profiling and delete expected error handling.\n+\t* gcc.dg/20021014-1.c: Likewise.\n+\t* gcc.dg/nest.c: Likewise.\n+\n 2004-02-20  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR c++/12007"}, {"sha": "ea458fa17979be9ba45d781c697652f4358df0ec", "filename": "gcc/testsuite/g++.dg/bprob/bprob.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d856ba2d26b6baa58932c461952f1abc6275082/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fbprob.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d856ba2d26b6baa58932c461952f1abc6275082/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fbprob.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fbprob.exp?ref=0d856ba2d26b6baa58932c461952f1abc6275082", "patch": "@@ -21,7 +21,7 @@ load_lib target-supports.exp\n \n # Some targets don't have any implementation of __bb_init_func or are\n # missing other needed machinery.\n-if { ![check_profiling_available] } {\n+if { ![check_profiling_available \"-fprofile-arcs\"] } {\n     return\n }\n "}, {"sha": "2fa633ba17e8af06689c8e8f2aa8478fb0dad72b", "filename": "gcc/testsuite/g++.old-deja/g++.law/profile1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d856ba2d26b6baa58932c461952f1abc6275082/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fprofile1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d856ba2d26b6baa58932c461952f1abc6275082/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fprofile1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fprofile1.C?ref=0d856ba2d26b6baa58932c461952f1abc6275082", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { xfail mips*-*-* i[3456]86-*-sco3.2v5* } }\n-// { dg-require-profiling \"\" }\n+// { dg-do run { xfail i[3456]86-*-sco3.2v5* } }\n+// { dg-require-profiling \"-pg\" }\n // { dg-options \"-pg\" }\n // { dg-options \"-pg -static\" { target hppa*-*-hpux* } }\n // GROUPS passed profiling"}, {"sha": "e453f4e66f882777c45696d89628a628040f0ea0", "filename": "gcc/testsuite/g77.dg/bprob/bprob.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d856ba2d26b6baa58932c461952f1abc6275082/gcc%2Ftestsuite%2Fg77.dg%2Fbprob%2Fbprob.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d856ba2d26b6baa58932c461952f1abc6275082/gcc%2Ftestsuite%2Fg77.dg%2Fbprob%2Fbprob.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.dg%2Fbprob%2Fbprob.exp?ref=0d856ba2d26b6baa58932c461952f1abc6275082", "patch": "@@ -21,7 +21,7 @@ load_lib target-supports.exp\n \n # Some targets don't have any implementation of __bb_init_func or are\n # missing other needed machinery.\n-if { ![check_profiling_available] } {\n+if { ![check_profiling_available \"-fprofile-arcs\"] } {\n     return\n }\n "}, {"sha": "67f88ae2f6b7d727e30b549cb26dbe193747fcf9", "filename": "gcc/testsuite/gcc.dg/20021014-1.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d856ba2d26b6baa58932c461952f1abc6275082/gcc%2Ftestsuite%2Fgcc.dg%2F20021014-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d856ba2d26b6baa58932c461952f1abc6275082/gcc%2Ftestsuite%2Fgcc.dg%2F20021014-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20021014-1.c?ref=0d856ba2d26b6baa58932c461952f1abc6275082", "patch": "@@ -1,17 +1,9 @@\n /* { dg-do run } */\n-/* { dg-require-profiling \"\" } */\n+/* { dg-require-profiling \"-p\" } */\n /* { dg-options \"-O2 -p\" } */\n /* { dg-options \"-O2 -p -static\" { target hppa*-*-hpux* } } */\n /* { dg-error \"profiler\" \"No profiler support\" { target xstormy16-*-* } 0 } */\n /* { dg-error \"\" \"consider using `-pg' instead of `-p' with gprof(1)\" { target *-*-freebsd* } 0 } */\n-/* Support for -p on solaris2 relies on mcrt1.o which comes with the\n-   vendor compiler.  We cannot reiably predict the directory where the\n-   vendor compiler (and thus mcrt1.o) is installed so we can't\n-   necessarily find mcrt1.o even if we have it.  */\n-/* { dg-error \"mcrt1.o\" \"Optional vendor profiler support missing\" { target *-*-solaris2* } 0 } */\n-/* Support for -p on irix relies on libprof1.a which doesn't appear to\n-   exist on any irix6 system currently posting testsuite results.  */\n-/* { dg-error \"libprof1.a\" \"Profiler support missing\" { target mips*-*-irix* } 0 } */\n \n extern void abort (void);\n extern void exit (int);"}, {"sha": "264dde26f05f81543d0f0eb108c04352f3ec696c", "filename": "gcc/testsuite/gcc.dg/nest.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d856ba2d26b6baa58932c461952f1abc6275082/gcc%2Ftestsuite%2Fgcc.dg%2Fnest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d856ba2d26b6baa58932c461952f1abc6275082/gcc%2Ftestsuite%2Fgcc.dg%2Fnest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnest.c?ref=0d856ba2d26b6baa58932c461952f1abc6275082", "patch": "@@ -1,12 +1,9 @@\n /* PR 5967, PR 7114 */\n /* { dg-do run } */\n-/* { dg-require-profiling \"\" } */\n+/* { dg-require-profiling \"-pg\" } */\n /* { dg-options \"-O2 -pg\" } */\n /* { dg-options \"-O2 -pg -static\" { target hppa*-*-hpux* } } */\n /* { dg-error \"profiler\" \"No profiler support\" { target xstormy16-*-* } 0 } */\n-/* Support for -pg on irix relies on gcrt1.o which doesn't exist yet.\n-   See: http://gcc.gnu.org/ml/gcc/2002-10/msg00169.html */\n-/* { dg-error \"gcrt1.o\" \"Profiler support missing\" { target mips*-*-irix* } 0 } */\n /* { dg-error \"-pg not supported\" \"Profiler support missing\" { target *-*-sco3.2v5* } 0 } */\n \n long foo (long x)"}, {"sha": "8fde6829f837be284847d8f4085d329191b75147", "filename": "gcc/testsuite/gcc.misc-tests/bprob.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d856ba2d26b6baa58932c461952f1abc6275082/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fbprob.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d856ba2d26b6baa58932c461952f1abc6275082/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fbprob.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fbprob.exp?ref=0d856ba2d26b6baa58932c461952f1abc6275082", "patch": "@@ -21,7 +21,7 @@ load_lib target-supports.exp\n \n # Some targets don't have any implementation of __bb_init_func or are\n # missing other needed machinery.\n-if { ![check_profiling_available] } {\n+if { ![check_profiling_available \"-fprofile-arcs\"] } {\n     return\n }\n "}, {"sha": "c5f589eea2709a11f45b1661aa1dc3c3f35f8e20", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d856ba2d26b6baa58932c461952f1abc6275082/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d856ba2d26b6baa58932c461952f1abc6275082/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=0d856ba2d26b6baa58932c461952f1abc6275082", "patch": "@@ -324,7 +324,7 @@ proc dg-require-gc-sections { args } {\n # If this target does not support profiling, skip this test.\n \n proc dg-require-profiling { args } {\n-    if { ![ check_profiling_available ] } {\n+    if { ![ check_profiling_available ${args} ] } {\n \tupvar dg-do-what dg-do-what\n \tset dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n \treturn"}, {"sha": "173ce6128d38c428058df3a608ebfd573e538fca", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d856ba2d26b6baa58932c461952f1abc6275082/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d856ba2d26b6baa58932c461952f1abc6275082/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=0d856ba2d26b6baa58932c461952f1abc6275082", "patch": "@@ -166,9 +166,32 @@ proc check_gc_sections_available { } {\n \n # Return true if profiling is supported on the target.\n \n-proc check_profiling_available { } {\n+proc check_profiling_available { test_what } {\n     global profiling_available_saved\n \n+    verbose \"Profiling argument is <$test_what>\" 1\n+\n+    # These conditions depend on the argument so examine them before\n+    # looking at the cache variable.\n+\n+    # Support for -p on solaris2 relies on mcrt1.o which comes with the\n+    # vendor compiler.  We cannot reliably predict the directory where the\n+    # vendor compiler (and thus mcrt1.o) is installed so we can't\n+    # necessarily find mcrt1.o even if we have it.\n+    if { [istarget *-*-solaris2*] && [lindex $test_what 1] == \"-p\" } {\n+\treturn 0\n+    }\n+\n+    # Support for -p on irix relies on libprof1.a which doesn't appear to\n+    # exist on any irix6 system currently posting testsuite results.\n+    # Support for -pg on irix relies on gcrt1.o which doesn't exist yet.\n+    # See: http://gcc.gnu.org/ml/gcc/2002-10/msg00169.html\n+    if { [istarget mips*-*-irix*] \n+    && ([lindex $test_what 1] == \"-p\" || [lindex $test_what 1] == \"-pg\") } {\n+\treturn 0\n+    }\n+\n+    # Now examine the cache variable.\n     if {![info exists profiling_available_saved]} {\n \t# Some targets don't have any implementation of __bb_init_func or are\n \t# missing other needed machinery."}]}