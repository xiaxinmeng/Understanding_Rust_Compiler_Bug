{"sha": "000034eb46b0c429f01982212bf4879de0fec964", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAwMDM0ZWI0NmIwYzQyOWYwMTk4MjIxMmJmNDg3OWRlMGZlYzk2NA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "1999-06-19T00:04:59Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-06-19T00:04:59Z"}, "message": "rs6000.c (find_addr_reg): New function.\n\n        * rs6000.c (find_addr_reg): New function.\n        * rs6000.h (find_addr_reg): Declare.\n        (offsettable_addr_operand): Delete.\n        * rs6000.md (movdf_hardfloat32): Handle non-offsettable loads\n        from and stores to GPRs.\n\nFrom-SVN: r27602", "tree": {"sha": "def29f9c267c1b96504516880ff25f2d567c6a29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/def29f9c267c1b96504516880ff25f2d567c6a29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/000034eb46b0c429f01982212bf4879de0fec964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000034eb46b0c429f01982212bf4879de0fec964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/000034eb46b0c429f01982212bf4879de0fec964", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000034eb46b0c429f01982212bf4879de0fec964/comments", "author": null, "committer": null, "parents": [{"sha": "0b8a1e58d95a80ce908f20a5337080106dd74385", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8a1e58d95a80ce908f20a5337080106dd74385", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b8a1e58d95a80ce908f20a5337080106dd74385"}], "stats": {"total": 110, "additions": 95, "deletions": 15}, "files": [{"sha": "46f9d17617ef8fcb4c6f7823def7c203949349a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000034eb46b0c429f01982212bf4879de0fec964/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000034eb46b0c429f01982212bf4879de0fec964/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=000034eb46b0c429f01982212bf4879de0fec964", "patch": "@@ -1,3 +1,11 @@\n+Fri Jun 18 23:47:06 1999  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* rs6000.c (find_addr_reg): New function.\n+\t* rs6000.h (find_addr_reg): Declare.\n+\t(offsettable_addr_operand): Delete.\n+\t* rs6000.md (movdf_hardfloat32): Handle non-offsettable loads\n+\tfrom and stores to GPRs.\n+\n Fri Jun 18 15:44:18 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha.c (alpha_expand_block_move): Use get_insns rather than"}, {"sha": "7d6faf5cb6c5b681796a96f262882d6dfc2b2790", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000034eb46b0c429f01982212bf4879de0fec964/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000034eb46b0c429f01982212bf4879de0fec964/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=000034eb46b0c429f01982212bf4879de0fec964", "patch": "@@ -5681,7 +5681,33 @@ rs6000_encode_section_info (decl)\n }\n \n #endif /* USING_SVR4_H */\n+\n \f\n+/* Return a REG that occurs in ADDR with coefficient 1.\n+   ADDR can be effectively incremented by incrementing REG.  */\n+\n+struct rtx_def *\n+find_addr_reg (addr)\n+     rtx addr;\n+{\n+  while (GET_CODE (addr) == PLUS)\n+    {\n+      if (GET_CODE (XEXP (addr, 0)) == REG)\n+\taddr = XEXP (addr, 0);\n+      else if (GET_CODE (XEXP (addr, 1)) == REG)\n+\taddr = XEXP (addr, 1);\n+      else if (CONSTANT_P (XEXP (addr, 0)))\n+\taddr = XEXP (addr, 1);\n+      else if (CONSTANT_P (XEXP (addr, 1)))\n+\taddr = XEXP (addr, 0);\n+      else\n+\tabort ();\n+    }\n+  if (GET_CODE (addr) == REG)\n+    return addr;\n+  abort ();\n+}\n+\n void\n rs6000_fatal_bad_address (op)\n   rtx op;"}, {"sha": "4e221314e42ee9f37b29c164d6c46390c38ea681", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000034eb46b0c429f01982212bf4879de0fec964/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000034eb46b0c429f01982212bf4879de0fec964/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=000034eb46b0c429f01982212bf4879de0fec964", "patch": "@@ -3224,13 +3224,13 @@ extern int flag_expensive_optimizations;\n extern int frame_pointer_needed;\n \n /* Declare functions in rs6000.c */\n-extern int offsettable_mem_operand ();\n extern void optimization_options ();\n extern void output_options ();\n extern void rs6000_override_options ();\n extern void rs6000_file_start ();\n extern struct rtx_def *rs6000_float_const ();\n extern struct rtx_def *rs6000_got_register ();\n+extern struct rtx_def *find_addr_reg();\n extern int direct_return ();\n extern int get_issue_rate ();\n extern int any_operand ();\n@@ -3249,7 +3249,7 @@ extern int got_no_const_operand ();\n extern int num_insns_constant ();\n extern int easy_fp_constant ();\n extern int volatile_mem_operand ();\n-extern int offsettable_addr_operand ();\n+extern int offsettable_mem_operand ();\n extern int mem_or_easy_const_operand ();\n extern int add_operand ();\n extern int non_add_cint_operand ();"}, {"sha": "4286d89ccc06bb46e95edb00c6d1ffdb5631010c", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 59, "deletions": 13, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000034eb46b0c429f01982212bf4879de0fec964/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000034eb46b0c429f01982212bf4879de0fec964/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=000034eb46b0c429f01982212bf4879de0fec964", "patch": "@@ -6307,8 +6307,8 @@\n ;; The \"??\" is a kludge until we can figure out a more reasonable way\n ;; of handling these non-offsettable values.\n (define_insn \"*movdf_hardfloat32\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=!r,??r,o,!r,!r,!r,f,f,m\")\n-\t(match_operand:DF 1 \"input_operand\" \"r,o,r,G,H,F,f,m,f\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=!r,??r,m,!r,!r,!r,f,f,m\")\n+\t(match_operand:DF 1 \"input_operand\" \"r,m,r,G,H,F,f,m,f\"))]\n   \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT\n    && (gpc_reg_operand (operands[0], DFmode)\n        || gpc_reg_operand (operands[1], DFmode))\"\n@@ -6320,24 +6320,70 @@\n       abort ();\n     case 0:\n       /* We normally copy the low-numbered register first.  However, if\n-\t the first register operand 0 is the same as the second register of\n-\t operand 1, we must copy in the opposite order.  */\n+\t the first register operand 0 is the same as the second register\n+\t of operand 1, we must copy in the opposite order.  */\n       if (REGNO (operands[0]) == REGNO (operands[1]) + 1)\n \treturn \\\"mr %L0,%L1\\;mr %0,%1\\\";\n       else\n \treturn \\\"mr %0,%1\\;mr %L0,%L1\\\";\n     case 1:\n-      /* If the low-address word is used in the address, we must load it\n-\t last.  Otherwise, load it first.  Note that we cannot have\n-\t auto-increment in that case since the address register is known to be\n-\t dead.  */\n-      if (refers_to_regno_p (REGNO (operands[0]), REGNO (operands[0]) + 1,\n-\t\t\t     operands [1], 0))\n-\treturn \\\"{l|lwz} %L0,%L1\\;{l|lwz} %0,%1\\\";\n+      if (offsettable_memref_p (operands[1]))\n+\t{\n+\t  /* If the low-address word is used in the address, we must load\n+\t     it last.  Otherwise, load it first.  Note that we cannot have\n+\t     auto-increment in that case since the address register is\n+\t     known to be dead.  */\n+\t  if (refers_to_regno_p (REGNO (operands[0]), REGNO (operands[0]) + 1,\n+\t\t\t\t operands[1], 0))\n+\t    return \\\"{l|lwz} %L0,%L1\\;{l|lwz} %0,%1\\\";\n+\t  else\n+\t    return \\\"{l%U1|lwz%U1} %0,%1\\;{l|lwz} %L0,%L1\\\";\n+\t}\n       else\n-\treturn \\\"{l%U1|lwz%U1} %0,%1\\;{l|lwz} %L0,%L1\\\";\n+\t{\n+\t  rtx addreg;\n+\n+\t  if (GET_CODE (XEXP (operands[1], 0)) == PRE_INC\n+\t      || GET_CODE (XEXP (operands[1], 0)) == PRE_DEC)\n+\t    abort ();\n+\n+\t  addreg = find_addr_reg (XEXP (operands[1], 0));\n+\t  if (refers_to_regno_p (REGNO (operands[0]),\n+\t\t\t\t REGNO (operands[0]) + 1,\n+\t\t\t\t operands[1], 0))\n+\t    {\n+\t      output_asm_insn (\\\"{cal|la} %0,4(%0)\\\", &addreg);\n+\t      output_asm_insn (\\\"{lx|lwzx} %L0,%1\\\", operands);\n+\t      output_asm_insn (\\\"{cal|la} %0,-4(%0)\\\", &addreg);\n+\t      return \\\"{lx|lwzx} %0,%1\\\";\n+\t    }\n+\t  else\n+\t    {\n+\t      output_asm_insn (\\\"{lx|lwzx} %0,%1\\\", operands);\n+\t      output_asm_insn (\\\"{cal|la} %0,4(%0)\\\", &addreg);\n+\t      output_asm_insn (\\\"{lx|lwzx} %L0,%1\\\", operands);\n+\t      output_asm_insn (\\\"{cal|la} %0,-4(%0)\\\", &addreg);\n+\t      return \\\"\\\";\n+\t    }\n+\t}\n     case 2:\n-      return \\\"{st%U0|stw%U0} %1,%0\\;{st|stw} %L1,%L0\\\";\n+      if (offsettable_memref_p (operands[0]))\n+\treturn \\\"{st%U0|stw%U0} %1,%0\\;{st|stw} %L1,%L0\\\";\n+      else\n+\t{\n+\t  rtx addreg;\n+\n+\t  if (GET_CODE (XEXP (operands[1], 0)) == PRE_INC\n+\t      || GET_CODE (XEXP (operands[1], 0)) == PRE_DEC)\n+\t    abort ();\n+\n+\t  addreg = find_addr_reg (XEXP (operands[0], 0));\n+\t  output_asm_insn (\\\"{stx|stwx} %1,%0\\\", operands);\n+\t  output_asm_insn (\\\"{cal|la} %0,4(%0)\\\", &addreg);\n+\t  output_asm_insn (\\\"{stx|stwx} %L1,%0\\\", operands);\n+\t  output_asm_insn (\\\"{cal|la} %0,-4(%0)\\\", &addreg);\n+\t  return \\\"\\\";\n+\t}\n     case 3:\n     case 4:\n     case 5:"}]}