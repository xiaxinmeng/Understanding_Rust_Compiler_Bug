{"sha": "fae08a0507beef27fba062422451020299f27984", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFlMDhhMDUwN2JlZWYyN2ZiYTA2MjQyMjQ1MTAyMDI5OWYyNzk4NA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2019-11-14T17:51:31Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2019-11-14T17:51:31Z"}, "message": "Remove range_intersect, range_invert, and range_union.\n\nFrom-SVN: r278258", "tree": {"sha": "901e5ab3cc4a6bb0246108495d31b92f7244b78d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/901e5ab3cc4a6bb0246108495d31b92f7244b78d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fae08a0507beef27fba062422451020299f27984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae08a0507beef27fba062422451020299f27984", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fae08a0507beef27fba062422451020299f27984", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae08a0507beef27fba062422451020299f27984/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "270082a7e126f727437c99ab8403185e9f29244c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/270082a7e126f727437c99ab8403185e9f29244c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/270082a7e126f727437c99ab8403185e9f29244c"}], "stats": {"total": 106, "additions": 34, "deletions": 72}, "files": [{"sha": "4266f6b16556b4665c937ff8dde90f84e5d4a449", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae08a0507beef27fba062422451020299f27984/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae08a0507beef27fba062422451020299f27984/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fae08a0507beef27fba062422451020299f27984", "patch": "@@ -1,3 +1,16 @@\n+2019-11-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op.cc (*operator*::*range): Remove calls to\n+\trange_intersect, range_invert, and range_union in favor of calling\n+\tthe in-place API methods.\n+\t(range_tests): Same.\n+\t* range.cc (range_intersect): Remove.\n+\t(range_union): Remove.\n+\t(range_invert): Remove.\n+\t* range.h (range_intersect): Remove.\n+\t(range_union): Remove.\n+\t(range_intersect): Remove.\n+\n 2019-11-14  Ilya Leoshkevich  <iii@linux.ibm.com>\n \n \tPR rtl-optimization/92430"}, {"sha": "4a23cca3dbb10dd29f89b197421d76981919caa7", "filename": "gcc/range-op.cc", "status": "modified", "additions": 21, "deletions": 45, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae08a0507beef27fba062422451020299f27984/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae08a0507beef27fba062422451020299f27984/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=fae08a0507beef27fba062422451020299f27984", "patch": "@@ -396,7 +396,8 @@ operator_equal::fold_range (value_range &r, tree type,\n     {\n       // If ranges do not intersect, we know the range is not equal,\n       // otherwise we don't know anything for sure.\n-      r = range_intersect (op1, op2);\n+      r = op1;\n+      r.intersect (op2);\n       if (r.undefined_p ())\n \tr = range_false (type);\n       else\n@@ -415,7 +416,10 @@ operator_equal::op1_range (value_range &r, tree type,\n       // If the result is false, the only time we know anything is\n       // if OP2 is a constant.\n       if (wi::eq_p (op2.lower_bound(), op2.upper_bound()))\n-\tr = range_invert (op2);\n+\t{\n+\t  r = op2;\n+\t  r.invert ();\n+\t}\n       else\n \tr.set_varying (type);\n       break;\n@@ -476,7 +480,8 @@ operator_not_equal::fold_range (value_range &r, tree type,\n     {\n       // If ranges do not intersect, we know the range is not equal,\n       // otherwise we don't know anything for sure.\n-      r = range_intersect (op1, op2);\n+      r = op1;\n+      r.intersect (op2);\n       if (r.undefined_p ())\n \tr = range_true (type);\n       else\n@@ -495,7 +500,10 @@ operator_not_equal::op1_range (value_range &r, tree type,\n       // If the result is true, the only time we know anything is if\n       // OP2 is a constant.\n       if (wi::eq_p (op2.lower_bound(), op2.upper_bound()))\n-\tr = range_invert (op2);\n+\t{\n+\t  r = op2;\n+\t  r.invert ();\n+\t}\n       else\n \tr.set_varying (type);\n       break;\n@@ -1974,7 +1982,8 @@ operator_logical_or::fold_range (value_range &r, tree type ATTRIBUTE_UNUSED,\n   if (empty_range_check (r, lh, rh))\n     return;\n \n-  r = range_union (lh, rh);\n+  r = lh;\n+  r.union_ (rh);\n }\n \n bool\n@@ -2221,7 +2230,10 @@ operator_logical_not::fold_range (value_range &r, tree type,\n   if (lh.varying_p () || lh.undefined_p ())\n     r = lh;\n   else\n-    r = range_invert (lh);\n+    {\n+      r = lh;\n+      r.invert ();\n+    }\n   gcc_checking_assert (lh.type() == type);\n   return;\n }\n@@ -2232,10 +2244,9 @@ operator_logical_not::op1_range (value_range &r,\n \t\t\t\t const value_range &lhs,\n \t\t\t\t const value_range &op2 ATTRIBUTE_UNUSED) const\n {\n-  if (lhs.varying_p () || lhs.undefined_p ())\n-    r = lhs;\n-  else\n-    r = range_invert (lhs);\n+  r = lhs;\n+  if (!lhs.varying_p () && !lhs.undefined_p ())\n+    r.invert ();\n   return true;\n }\n \n@@ -3033,13 +3044,6 @@ range_tests ()\n   r1.union_ (r2);\n   ASSERT_TRUE (r0 == r1);\n \n-  // [10,20] U [30,40] ==> [10,20][30,40].\n-  r0 = value_range (INT (10), INT (20));\n-  r1 = value_range (INT (30), INT (40));\n-  r0.union_ (r1);\n-  ASSERT_TRUE (r0 == range_union (value_range (INT (10), INT (20)),\n-\t\t\t\t  value_range (INT (30), INT (40))));\n-\n   // Make sure NULL and non-NULL of pointer types work, and that\n   // inverses of them are consistent.\n   tree voidp = build_pointer_type (void_type_node);\n@@ -3049,27 +3053,12 @@ range_tests ()\n   r0.invert ();\n   ASSERT_TRUE (r0 == r1);\n \n-  // [10,20][30,40] U [25,70] => [10,70].\n-  r0 = range_union (value_range (INT (10), INT (20)),\n-\t\t     value_range (INT (30), INT (40)));\n-  r1 = value_range (INT (25), INT (70));\n-  r0.union_ (r1);\n-  ASSERT_TRUE (r0 == range_union (value_range (INT (10), INT (20)),\n-\t\t\t\t  value_range (INT (25), INT (70))));\n-\n   // [10,20] U [15, 30] => [10, 30].\n   r0 = value_range (INT (10), INT (20));\n   r1 = value_range (INT (15), INT (30));\n   r0.union_ (r1);\n   ASSERT_TRUE (r0 == value_range (INT (10), INT (30)));\n \n-  // [10,20] U [25,25] => [10,20][25,25].\n-  r0 = value_range (INT (10), INT (20));\n-  r1 = value_range (INT (25), INT (25));\n-  r0.union_ (r1);\n-  ASSERT_TRUE (r0 == range_union (value_range (INT (10), INT (20)),\n-\t\t\t\t  value_range (INT (25), INT (25))));\n-\n   // [15,40] U [] => [15,40].\n   r0 = value_range (INT (15), INT (40));\n   r1.set_undefined ();\n@@ -3094,19 +3083,6 @@ range_tests ()\n   r0.intersect (r1);\n   ASSERT_TRUE (r0 == value_range (INT (15), INT (20)));\n \n-  // [10,20][30,40] ^ [40,50] => [40,40].\n-  r0 = range_union (value_range (INT (10), INT (20)),\n-\t\t     value_range (INT (30), INT (40)));\n-  r1 = value_range (INT (40), INT (50));\n-  r0.intersect (r1);\n-  ASSERT_TRUE (r0 == value_range (INT (40), INT (40)));\n-\n-  // Test non-destructive intersection.\n-  r0 = rold = value_range (INT (10), INT (20));\n-  ASSERT_FALSE (range_intersect (r0, value_range (INT (15),\n-\t\t\t\t\t     INT (30))).undefined_p ());\n-  ASSERT_TRUE (r0 == rold);\n-\n   // Test the internal sanity of wide_int's wrt HWIs.\n   ASSERT_TRUE (wi::max_value (TYPE_PRECISION (boolean_type_node),\n \t\t\t      TYPE_SIGN (boolean_type_node))"}, {"sha": "6eff6c0a38f8237ada0afded4e1d11ba9a491c32", "filename": "gcc/range.cc", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae08a0507beef27fba062422451020299f27984/gcc%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae08a0507beef27fba062422451020299f27984/gcc%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange.cc?ref=fae08a0507beef27fba062422451020299f27984", "patch": "@@ -29,30 +29,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ssa.h\"\n #include \"range.h\"\n \n-value_range\n-range_intersect (const value_range &r1, const value_range &r2)\n-{\n-  value_range tmp (r1);\n-  tmp.intersect (r2);\n-  return tmp;\n-}\n-\n-value_range\n-range_invert (const value_range &r1)\n-{\n-  value_range tmp (r1);\n-  tmp.invert ();\n-  return tmp;\n-}\n-\n-value_range\n-range_union (const value_range &r1, const value_range &r2)\n-{\n-  value_range tmp (r1);\n-  tmp.union_ (r2);\n-  return tmp;\n-}\n-\n value_range\n range_zero (tree type)\n {"}, {"sha": "6efec1699e3ff93397179a4bb7024ceb766db398", "filename": "gcc/range.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae08a0507beef27fba062422451020299f27984/gcc%2Frange.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae08a0507beef27fba062422451020299f27984/gcc%2Frange.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange.h?ref=fae08a0507beef27fba062422451020299f27984", "patch": "@@ -23,9 +23,6 @@ along with GCC; see the file COPYING3.  If not see\n \n value_range range_zero (tree type);\n value_range range_nonzero (tree type);\n-value_range range_intersect (const value_range &, const value_range &);\n-value_range range_union (const value_range &, const value_range &);\n-value_range range_invert (const value_range &);\n value_range range_positives (tree type);\n value_range range_negatives (tree type);\n #endif // GCC_RANGE_H"}]}