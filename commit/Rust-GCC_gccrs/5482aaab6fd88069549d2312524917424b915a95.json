{"sha": "5482aaab6fd88069549d2312524917424b915a95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ4MmFhYWI2ZmQ4ODA2OTU0OWQyMzEyNTI0OTE3NDI0YjkxNWE5NQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-06-13T05:41:02Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-06-13T05:41:02Z"}, "message": "gcc-dg.exp (dg-require-dll): New function.\n\n\t* lib/gcc-dg.exp (dg-require-dll): New function.\n\t(dg-xfail-if): Likewise.\n\t* gcc.c-torture/compile/compile.exp: Use dg rather than c-torture\n\tdriver.\n\n\t* gcc.c-torture/compile/20000804-1.c: Convert to dg format.\n\t* gcc.c-torture/compile/20001205-1.c: Likewise.\n\t* gcc.c-torture/compile/20001226-1.c: Likewise.\n\t* gcc.c-torture/compile/20010518-2.c: Likewise.\n\t* gcc.c-torture/compile/20020312-1.c: Likewise.\n\t* gcc.c-torture/compile/20020604-1.c: Likewise.\n\t* gcc.c-torture/compile/920501-12.c: Likewise.\n\t* gcc.c-torture/compile/920501-4.c: Likewise.\n\t* gcc.c-torture/compile/920520-1.c: Likewise.\n\t* gcc.c-torture/compile/920521-1.c: Likewise.\n\t* gcc.c-torture/compile/920625-1.c: Likewise.\n\t* gcc.c-torture/compile/961203-1.c: Likewise.\n\t* gcc.c-torture/compile/980506-1.c: Likewise.\n\t* gcc.c-torture/compile/981006-1.c: Likewise.\n\t* gcc.c-torture/compile/981022-1.c: Likewise.\n\t* gcc.c-torture/compile/981223-1.c: Likewise.\n\t* gcc.c-torture/compile/990617-1.c: Likewise.\n\t* gcc.c-torture/compile/dll.c: Likewise.\n\t* gcc.c-torture/compile/labels-3.c: Likewise.\n\t* gcc.c-torture/compile/mipscop-1.c: Likewise.\n\t* gcc.c-torture/compile/mipscop-2.c: Likewise.\n\t* gcc.c-torture/compile/mipscop-3.c: Likewise.\n\t* gcc.c-torture/compile/mipscop-4.c: Likewise.\n\t* gcc.c-torture/compile/simd-5.c: Likewise.\n\t* gcc.c-torture/compile/20000804-1.x: Remove.\n\t* gcc.c-torture/compile/20001205-1.x: Likewise.\n\t* gcc.c-torture/compile/20001226-1.x: Likewise.\n\t* gcc.c-torture/compile/20010518-2.x: Likewise.\n\t* gcc.c-torture/compile/20020312-1.x: Likewise.\n\t* gcc.c-torture/compile/20020604-1.x: Likewise.\n\t* gcc.c-torture/compile/920501-12.x: Likewise.\n\t* gcc.c-torture/compile/920501-4.x: Likewise.\n\t* gcc.c-torture/compile/920520-1.x: Likewise.\n\t* gcc.c-torture/compile/920521-1.x: Likewise.\n\t* gcc.c-torture/compile/920625-1.x: Likewise.\n\t* gcc.c-torture/compile/961203-1.x: Likewise.\n\t* gcc.c-torture/compile/980506-1.x: Likewise.\n\t* gcc.c-torture/compile/981006-1.x: Likewise.\n\t* gcc.c-torture/compile/981022-1.x: Likewise.\n\t* gcc.c-torture/compile/981223-1.x: Likewise.\n\t* gcc.c-torture/compile/990617-1.x: Likewise.\n\t* gcc.c-torture/compile/mipscop-1.x: Likewise.\n\t* gcc.c-torture/compile/mipscop-2.x: Likewise.\n\t* gcc.c-torture/compile/mipscop-3.x: Likewise.\n\t* gcc.c-torture/compile/mipscop-4.x: Likewise.\n\t* gcc.c-torture/compile/simd-5.x: Likewise.\n\n\t* gcc.c-torture/compile/20021205-1.c: Remove bogus dg commands.\n\nFrom-SVN: r67881", "tree": {"sha": "3de8323e98b3f8f1ea738dd044d51167d33f28aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3de8323e98b3f8f1ea738dd044d51167d33f28aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5482aaab6fd88069549d2312524917424b915a95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5482aaab6fd88069549d2312524917424b915a95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5482aaab6fd88069549d2312524917424b915a95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5482aaab6fd88069549d2312524917424b915a95/comments", "author": null, "committer": null, "parents": [{"sha": "2ac29877a520a877d4674320fcc487190b8b4cfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ac29877a520a877d4674320fcc487190b8b4cfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ac29877a520a877d4674320fcc487190b8b4cfa"}], "stats": {"total": 480, "additions": 195, "deletions": 285}, "files": [{"sha": "a0af90a3ebeb5237c1851feb38779927693047fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,59 @@\n+2003-06-12  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* lib/gcc-dg.exp (dg-require-dll): New function.\n+\t(dg-xfail-if): Likewise.\n+\t* gcc.c-torture/compile/compile.exp: Use dg rather than c-torture\n+\tdriver.\n+\t\n+\t* gcc.c-torture/compile/20000804-1.c: Convert to dg format.\n+\t* gcc.c-torture/compile/20001205-1.c: Likewise.\n+\t* gcc.c-torture/compile/20001226-1.c: Likewise.\n+\t* gcc.c-torture/compile/20010518-2.c: Likewise.\n+\t* gcc.c-torture/compile/20020312-1.c: Likewise.\n+\t* gcc.c-torture/compile/20020604-1.c: Likewise.\n+\t* gcc.c-torture/compile/920501-12.c: Likewise.\n+\t* gcc.c-torture/compile/920501-4.c: Likewise.\n+\t* gcc.c-torture/compile/920520-1.c: Likewise.\n+\t* gcc.c-torture/compile/920521-1.c: Likewise.\n+\t* gcc.c-torture/compile/920625-1.c: Likewise.\n+\t* gcc.c-torture/compile/961203-1.c: Likewise.\n+\t* gcc.c-torture/compile/980506-1.c: Likewise.\n+\t* gcc.c-torture/compile/981006-1.c: Likewise.\n+\t* gcc.c-torture/compile/981022-1.c: Likewise.\n+\t* gcc.c-torture/compile/981223-1.c: Likewise.\n+\t* gcc.c-torture/compile/990617-1.c: Likewise.\n+\t* gcc.c-torture/compile/dll.c: Likewise.\n+\t* gcc.c-torture/compile/labels-3.c: Likewise.\n+\t* gcc.c-torture/compile/mipscop-1.c: Likewise.\n+\t* gcc.c-torture/compile/mipscop-2.c: Likewise.\n+\t* gcc.c-torture/compile/mipscop-3.c: Likewise.\n+\t* gcc.c-torture/compile/mipscop-4.c: Likewise.\n+\t* gcc.c-torture/compile/simd-5.c: Likewise.\n+\t* gcc.c-torture/compile/20000804-1.x: Remove.\n+\t* gcc.c-torture/compile/20001205-1.x: Likewise.\n+\t* gcc.c-torture/compile/20001226-1.x: Likewise.\n+\t* gcc.c-torture/compile/20010518-2.x: Likewise.\n+\t* gcc.c-torture/compile/20020312-1.x: Likewise.\n+\t* gcc.c-torture/compile/20020604-1.x: Likewise.\n+\t* gcc.c-torture/compile/920501-12.x: Likewise.\n+\t* gcc.c-torture/compile/920501-4.x: Likewise.\n+\t* gcc.c-torture/compile/920520-1.x: Likewise.\n+\t* gcc.c-torture/compile/920521-1.x: Likewise.\n+\t* gcc.c-torture/compile/920625-1.x: Likewise.\n+\t* gcc.c-torture/compile/961203-1.x: Likewise.\n+\t* gcc.c-torture/compile/980506-1.x: Likewise.\n+\t* gcc.c-torture/compile/981006-1.x: Likewise.\n+\t* gcc.c-torture/compile/981022-1.x: Likewise.\n+\t* gcc.c-torture/compile/981223-1.x: Likewise.\n+\t* gcc.c-torture/compile/990617-1.x: Likewise.\n+\t* gcc.c-torture/compile/mipscop-1.x: Likewise.\n+\t* gcc.c-torture/compile/mipscop-2.x: Likewise.\n+\t* gcc.c-torture/compile/mipscop-3.x: Likewise.\n+\t* gcc.c-torture/compile/mipscop-4.x: Likewise.\n+\t* gcc.c-torture/compile/simd-5.x: Likewise.\n+\n+\t* gcc.c-torture/compile/20021205-1.c: Remove bogus dg commands.\n+\n 2003-06-13  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.c-torture/execute/20030611-1.c: New test."}, {"sha": "782764b31bb340bb757663bac2c078b4b07bcd8a", "filename": "gcc/testsuite/gcc.c-torture/compile/20000804-1.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,4 +1,8 @@\n-/* Copyright (C) 2000 Free Software Foundation */\n+/* This does not work on m68hc11 or h8300 due to the use of an asm\n+   statement to force a 'long long' (64-bits) to go in a register.  */\n+/* { dg-do assemble { xfail m6811-*-* m6812-*-* h8300-*-* } } */\n+\n+/* Copyright (C) 2000, 2003 Free Software Foundation */\n __complex__ long long f ()\n {\n   int i[99];"}, {"sha": "8c3618b795f86ec060f2edc004e0c3c4f0b95392", "filename": "gcc/testsuite/gcc.c-torture/compile/20000804-1.x", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,10 +0,0 @@\n-# This does not work on m68hc11 or h8300 due to the use of an asm statement\n-# to force a 'long long' (64-bits) to go in a register.\n-\n-if { [istarget \"m6811-*-*\"]\n-     || [istarget \"m6812-*-*\"]\n-     || [istarget \"h8300-*-*\"] } {\n-      return 1\n-}\n-\n-return 0"}, {"sha": "4a917a2e2d79b093d95bfed46196d6d71d1e13ed", "filename": "gcc/testsuite/gcc.c-torture/compile/20001205-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001205-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001205-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001205-1.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,7 @@\n+/* This does not work on m68hc11 due to the asm statement which forces\n+   two 'long' (32-bits) variables to go in registers.  */\n+/* { dg-do assemble { xfail m6811-*-* m6812-*-* } } */\n+\n static inline unsigned long rdfpcr(void)\n {\n         unsigned long tmp, ret;"}, {"sha": "134cdf109fefa96f40469b91f372cf4543a21a72", "filename": "gcc/testsuite/gcc.c-torture/compile/20001205-1.x", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001205-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001205-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001205-1.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,7 +0,0 @@\n-# This does not work on m68hc11 due to the asm statement which\n-# forces two 'long' (32-bits) variables to go in registers.\n-\n-if { [istarget \"m6811-*-*\"] || [istarget \"m6812-*-*\"] } {\n-      return 1\n-}\n-return 0"}, {"sha": "0e71b1445ee917d16f3dd81957df8fa2df349b48", "filename": "gcc/testsuite/gcc.c-torture/compile/20001226-1.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,8 @@\n+/* This does not assemble on m68hc11 because the function is larger\n+   than 64K.  */\n+/* { dg-do assemble { xfail m6811-*-* m6812-*-* } } */\n+/* { dg-xfail-if \"jump beyond 128K not supported\" \"xtensa-*-*\" \"-O0\" \"\" } */\n+\n /* This testcase exposed two branch shortening bugs on powerpc.  */\n \n #define C(a,b) \\"}, {"sha": "6e46f46724e2ad58c964c9378eb6f32598656bc1", "filename": "gcc/testsuite/gcc.c-torture/compile/20001226-1.x", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,22 +0,0 @@\n-# This does not assemble on m68hc11 because the function is larger\n-# than 64K.\n-\n-global target_triplet\n-if { [istarget \"m6811-*-*\"] || [istarget \"m6812-*-*\"] } {\n-      return 1\n-}\n-\n-# It doesn't work on Xtensa with -O0 because the function is larger\n-# than the range of a jump instruction (+- 128K) and the assembler\n-# does not yet relax jumps to indirect jumps.\n-\n-set torture_eval_before_compile {\n-    set compiler_conditional_xfail_data {\n-        \"jump beyond 128K not supported\" \\\n-        \"xtensa-*-*\" \\\n-        { \"-O0\" } \\\n-        { \"\" }\n-    }\n-}\n-\n-return 0"}, {"sha": "f35d7c6b96d9f062cb7f8926bda99bbb3b3fbfb4", "filename": "gcc/testsuite/gcc.c-torture/compile/20010518-2.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010518-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010518-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010518-2.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,10 @@\n+/* { dg-do compile } */\n+\n+/* This test fails on HC11/HC12 when it is compiled without -mshort because \n+   the array is too large (INT_MAX/2 > 64K).  Force to use 16-bit ints\n+   for it.  */\n+/* { dg-options \"-w -mshort\" { target m6811-*-* m6812-*-* } } */\n+\n /* Large static storage.  */\n \n #include <limits.h>"}, {"sha": "1bd6f8fd46430e0932c12522fceefe51a46263cd", "filename": "gcc/testsuite/gcc.c-torture/compile/20010518-2.x", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010518-2.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010518-2.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010518-2.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,8 +0,0 @@\n-# This test fails on HC11/HC12 when it is compiled without -mshort because \n-# the array is too large (INT_MAX/2 > 64K).  Force to use 16-bit ints for it.\n-if { [istarget \"m6811-*-*\"] || [istarget \"m6812-*-*\"] } {\n-\tset options \"-S -mshort\"\n-} else {\n-\tset options \"-S\"\n-}\n-return 0"}, {"sha": "c50e4919a2b192c00aec4f85cca1e8c538b0bed4", "filename": "gcc/testsuite/gcc.c-torture/compile/20020312-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020312-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020312-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020312-1.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,7 @@\n+/* This does not compile on HC11/HC12 due to the asm which requires\n+   two 32-bit registers.  */\n+/* { dg-do assemble { xfail m6811-*-* m6812-*-* } } */\n+\n /* PR optimization/5892 */\n typedef struct { unsigned long a; unsigned int b, c; } A;\n typedef struct { unsigned long a; A *b; int c; } B;"}, {"sha": "105f2516474d61d1fdceee4ca2013c1cb0ac3972", "filename": "gcc/testsuite/gcc.c-torture/compile/20020312-1.x", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020312-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020312-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020312-1.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,6 +0,0 @@\n-# This does not compile on HC11/HC12 due to the asm which requires\n-# two 32-bit registers.\n-if { [istarget \"m6811-*-*\"] || [istarget \"m6812-*-*\"] } {\n-\treturn 1\n-}\n-return 0"}, {"sha": "fca4a53589364222ec3f989bbd4769482e7a6227", "filename": "gcc/testsuite/gcc.c-torture/compile/20020604-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020604-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020604-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020604-1.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,6 @@\n+/* The array is too big. */\n+/* { dg-do assemble { xfail h8300-*-* m6811-*-* m6812-*-* } } */\n+\n /* PR c/6957\n    This testcase ICEd at -O2 on IA-32, because\n    (insn 141 139 142 (set (subreg:SF (reg:QI 72) 0)"}, {"sha": "bced22f0f44c72a3566f0f0199e7a520c2cee4f4", "filename": "gcc/testsuite/gcc.c-torture/compile/20020604-1.x", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020604-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020604-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020604-1.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,10 +0,0 @@\n-# The array is too big.\n-if { [istarget \"h8300-*-*\"] } {\n-        return 1;\n-}\n-\n-if { [istarget \"m6811-*-*\"] || [istarget \"m6812-*-*\"] } {\n-        return 1;\n-}\n-\n-return 0"}, {"sha": "73648e94951512caa851544859bef13f31d0aa9a", "filename": "gcc/testsuite/gcc.c-torture/compile/20021205-1.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20021205-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20021205-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20021205-1.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,5 +1,3 @@\n-/* dg-do compile */\n-/* dg-options \"-O3\" */\n typedef struct x x;\n extern void *baz(char *);\n struct x { char * (*bar) (int); };"}, {"sha": "61ff947270f480e468a141c513b218806acabb61", "filename": "gcc/testsuite/gcc.c-torture/compile/920501-12.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920501-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920501-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920501-12.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,7 @@\n+/* This test fails on HC11/HC12 when it is compiled without -mshort because \n+   the stack arrays are too large.  Force to use 16-bit ints for it.  */\n+/* { dg-do assemble { xfail m6811-*-* m6812-*-* } } */\n+\n x(x){            return 3 + x;}\n a(x){int y[994]; return 3 + x;}\n b(x){int y[999]; return 2*(x + 3);}"}, {"sha": "61ba34933fb0a493cc1b1040cf0ff2652b152778", "filename": "gcc/testsuite/gcc.c-torture/compile/920501-12.x", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920501-12.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920501-12.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920501-12.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,6 +0,0 @@\n-# This test fails on HC11/HC12 when it is compiled without -mshort because \n-# the stack arrays are too large.  Force to use 16-bit ints for it.\n-if { [istarget \"m6811-*-*\"] || [istarget \"m6812-*-*\"] } {\n-\tset options \"-mshort\"\n-}\n-return 0"}, {"sha": "f6ddb19b57d59c9f700e52796fe011123a3e4c2e", "filename": "gcc/testsuite/gcc.c-torture/compile/920501-4.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920501-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920501-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920501-4.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,7 @@\n+/* This test fails on HC11/HC12 when it is compiled without -mshort because \n+   the 'r0' array is too large.  Force to use 16-bit ints for it.  */\n+/* { dg-do assemble { xfail m6811-*-* m6812-*-* } } */\n+\n foo ()\n {\n   int r0[8186 ];"}, {"sha": "cf60af9be6762a0b7a491c3d3f6eeeeb0638c7ec", "filename": "gcc/testsuite/gcc.c-torture/compile/920501-4.x", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920501-4.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920501-4.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920501-4.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,6 +0,0 @@\n-# This test fails on HC11/HC12 when it is compiled without -mshort because \n-# the 'r0' array is too large.  Force to use 16-bit ints for it.\n-if { [istarget \"m6811-*-*\"] || [istarget \"m6812-*-*\"] } {\n-\tset options \"-mshort\"\n-}\n-return 0"}, {"sha": "6837524fdb4b23395785227262b9eb01da5b54fa", "filename": "gcc/testsuite/gcc.c-torture/compile/920520-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920520-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920520-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920520-1.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1 +1,3 @@\n+/* { dg-do compile { xfail m6811-*-* m6812-*-* } } */\n+\n f(){asm(\"%0\"::\"r\"(1.5F));}g(){asm(\"%0\"::\"r\"(1.5));}"}, {"sha": "3687bf6145d7dc81fa74cf113a38e98cae6b1b11", "filename": "gcc/testsuite/gcc.c-torture/compile/920520-1.x", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920520-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920520-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920520-1.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,9 +0,0 @@\n-set options \"-S\"\n-\n-# This does not work on m68hc11 due to the asm which forces a\n-# float or a double to go in a register.\n-\n-if { [istarget \"m6811-*-*\"] || [istarget \"m6812-*-*\"] } {\n-      return 1\n-}\n-return 0"}, {"sha": "6c4c99d70f66188fd46a165c11b0f0550af754ba", "filename": "gcc/testsuite/gcc.c-torture/compile/920521-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920521-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920521-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920521-1.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1 +1,3 @@\n+/* { dg-do compile } */\n+\n f(){asm(\"f\":::\"cc\");}g(x,y){asm(\"g\"::\"%r\"(x), \"r\"(y));}"}, {"sha": "4cfce33b2dc56d575dd4e469fa9caf2d1cb4e9ba", "filename": "gcc/testsuite/gcc.c-torture/compile/920521-1.x", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920521-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920521-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920521-1.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,2 +0,0 @@\n-set options \"-S\"\n-return 0"}, {"sha": "137e0dc1f17f1216b6d512aedfb00c36fc6ff05f", "filename": "gcc/testsuite/gcc.c-torture/compile/920625-1.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920625-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920625-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920625-1.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,18 @@\n+/* The problem on IA-64 is that if-conversion creates a sequence\n+\n+\t (p17) cmp.geu p6, p7 = r48, r15\n+\t (p16) cmp.gtu p6, p7 = r48, r15\n+\n+   where p16 and p17 are complemenary, but the assembler DV validation\n+   code doesn't recognize that p6 and p7 are complimentary, and so\n+   we end up warning for a later use\n+\n+\t (p6) addl r14 = 1, r0\n+\t (p7) mov r14 = r0\n+\n+   that appears to be a WAW violation. */\n+/* { dg-xfail-if \"missing .pred.rel.mutex directive\" \"ia64-*-*\" { \"-O1\" \"-O2\" \"-O3\" \"-Os\" } { \"\" } } */\n+\n typedef unsigned long int unsigned_word;\n typedef signed long int signed_word;\n typedef unsigned_word word;"}, {"sha": "08a5f6771c7752e3b8d95b8f5044ba2f071c320c", "filename": "gcc/testsuite/gcc.c-torture/compile/920625-1.x", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920625-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920625-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920625-1.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,25 +0,0 @@\n-# The problem on IA-64 is that if-conversion creates a sequence\n-#\n-#\t(p17) cmp.geu p6, p7 = r48, r15\n-#\t(p16) cmp.gtu p6, p7 = r48, r15\n-#\n-# where p16 and p17 are complemenary, but the assembler DV validation\n-# code doesn't recognize that p6 and p7 are complimentary, and so\n-# we end up warning for a later use\n-#\n-#\t(p6) addl r14 = 1, r0\n-#\t(p7) mov r14 = r0\n-#\n-# that appears to be a WAW violation.\n-\n-set torture_eval_before_compile {\n-\n-    set compiler_conditional_xfail_data {\n-        \"missing .pred.rel.mutex directive\" \\\n-        \"ia64-*-*\" \\\n-        { \"-O1\" \"-O2\" \"-O3\" \"-Os\" } \\\n-        { \"\" }\n-    }\n-}\n-\n-return 0"}, {"sha": "12aba52e7e0fcf431803ed6c89aa21180bf15d31", "filename": "gcc/testsuite/gcc.c-torture/compile/961203-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F961203-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F961203-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F961203-1.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,7 @@\n+/* The structure is too large for the xstormy16 - won't fit in 16\n+   bits.  */\n+/* { dg-do assemble { xfail xstormy16-*-* h8300-*-* m6811-*-* m6812-*-* } } */\n+\n struct s {\n   char a[0x32100000];\n   int x:30, y:30;"}, {"sha": "e705ffe167a6cea80f517660fbcddb1304c0f6ad", "filename": "gcc/testsuite/gcc.c-torture/compile/961203-1.x", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F961203-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F961203-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F961203-1.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,17 +0,0 @@\n-# The structure is too large for the xstormy16 - won't fit in 16 bits.\n-\n-if { [istarget \"xstormy16-*-*\"] } {\n-        return 1;\n-}\n-\n-if { [istarget \"h8300-*-*\"] } {\n-\treturn 1\n-}\n-\n-# Array 'a' in this test is too large to fit in 64K.\n-\n-if { [istarget \"m6811-*-*\"] || [istarget \"m6812-*-*\"]} {\n-\treturn 1\n-}\n-\n-return 0"}, {"sha": "834137244f903cc5faace8e11d0d3808ad710dea", "filename": "gcc/testsuite/gcc.c-torture/compile/980506-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980506-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980506-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980506-1.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,6 @@\n+/* The arrays are too large for the xstormy16 - won't fit in 16 bits. */\n+/* { dg-do assemble { xfail xstormy16-*-* h8300-*-* m6811-*-* m6812-*-* } } */\n+\n unsigned char\tTIFFFax2DMode[20][256];\n unsigned char\tTIFFFax2DNextState[20][256];\n unsigned char\tTIFFFaxUncompAction[20][256];"}, {"sha": "133ed24d9446f21818bcc5f58aa0c48f3b460c16", "filename": "gcc/testsuite/gcc.c-torture/compile/980506-1.x", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980506-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980506-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980506-1.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,13 +0,0 @@\n-# The arrays are too large for the xstormy16 - won't fit in 16 bits.\n-if { [istarget \"xstormy16-*-*\"] } {\n-        return 1;\n-}\n-\n-if { [istarget \"h8300-*-*\"] } {\n-        return 1;\n-}\n-\n-if { [istarget \"m6811-*-*\"] || [istarget \"m6812-*-*\"] } {\n-      return 1\n-}\n-return 0"}, {"sha": "d71637328dbae50079e6dacfd93d066296886ba4", "filename": "gcc/testsuite/gcc.c-torture/compile/981006-1.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981006-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981006-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981006-1.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -3,7 +3,10 @@\n    used uninitialized.\n \n    This is broken in egcs 1998/10/06 for mips in pic mode.  */\n-/* { dg-do compile } */\n+/* { dg-do assemble } */\n+/* For MIPS at least, pic is needed to trigger the problem. */\n+/* { dg-options \"-w -Wuninitialized -Werror -fpic\" } */\n+/* { dg-options \"-w -Wuninitialized -Werror\" { target rs6000-*-aix* powerpc*-*-aix* arm*-*-* xscale*-*-* strongarm*-*-* fr30-*-* sh-*-hms sh-*-coff h8300*-*-* mn10200*-*-* cris-*-elf* cris-*-aout* mmix-*-* } } */\n \n int foo (int a, int b)\n {"}, {"sha": "a27a67bcaee2540a3735fe3759df18d34d831b61", "filename": "gcc/testsuite/gcc.c-torture/compile/981006-1.x", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981006-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981006-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981006-1.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,20 +0,0 @@\n-# For MIPS at least, pic is needed to trigger the problem.\n-if { [istarget rs6000-*-aix*]\n-     || [istarget powerpc*-*-aix*]\n-     || [istarget arm*-*-*]\n-     || [istarget xscale-*-*]\n-     || [istarget strongarm*-*-*]\n-     || [istarget fr30-*-*]\n-     || [istarget sh-*-hms]\n-     || [istarget sh-*-coff]\n-     || [istarget h8300*-*-*]\n-     || [istarget mn10200*-*-*]\n-     || [istarget cris-*-elf*]\n-     || [istarget cris-*-aout*]\n-     || [istarget mmix-*-*]\n-} {\n-    set options \"-Wuninitialized -Werror\"\n-} else {\n-    set options \"-Wuninitialized -Werror -fpic\"\n-}\n-return 0"}, {"sha": "46369fc81815327010a4c3149ccb9d26f3b3ca09", "filename": "gcc/testsuite/gcc.c-torture/compile/981022-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981022-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981022-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981022-1.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -4,6 +4,6 @@ int x, y;\n \n int main ()\n {\n-  (x ?: y) = 0;\n+  (x ?: y) = 0; /* { dg-bogus \"lvalue\" \"\" { xfail *-*-* } } */\n   return 0;\n }"}, {"sha": "f41cdc299131fe2004a420da7b21ab80c72e860e", "filename": "gcc/testsuite/gcc.c-torture/compile/981022-1.x", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981022-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981022-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981022-1.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,2 +0,0 @@\n-set torture_compile_xfail \"*-*-*\"\n-return 0"}, {"sha": "d0939f62eaf963a6006cda890f53c74821f8550c", "filename": "gcc/testsuite/gcc.c-torture/compile/981223-1.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981223-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981223-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981223-1.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,12 @@\n+/* The problem on IA-64 is that the assembler emits\n+\n+   Warning: Additional NOP may be necessary to workaround Itanium\n+   processor A/B step errata\n+\n+   This can be fixed by adding \"-mb-step\" to the command line, which\n+   does in fact add the extra nop. */\n+/* { dg-options \"-w -mb-step\" { target ia64-*-* } } */\n+\n __complex__ float\n func (__complex__ float x)\n {"}, {"sha": "f8d2aa6f938a9f822d41f578185192e09df5c77c", "filename": "gcc/testsuite/gcc.c-torture/compile/981223-1.x", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981223-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981223-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981223-1.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,20 +0,0 @@\n-# The problem on IA-64 is that the assembler emits\n-#\n-# Warning: Additional NOP may be necessary to workaround Itanium\n-# processor A/B step errata\n-#\n-# This can be fixed by adding \"-mb-step\" to the command line, which\n-# does in fact add the extra nop, if someone can tell me how to do\n-# that for a c-torture compile test.\n-\n-set torture_eval_before_compile {\n-\n-    set compiler_conditional_xfail_data {\n-        \"need -mb-step\" \\\n-        \"ia64-*-*\" \\\n-        { \"-O2\" \"-O3\" \"-Os\" } \\\n-        { \"\" }\n-    }\n-}\n-\n-return 0"}, {"sha": "78a3ec132f56036059250d04d4ebc9fa093cb4d8", "filename": "gcc/testsuite/gcc.c-torture/compile/990617-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F990617-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F990617-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F990617-1.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,6 @@\n+/* 0x70000000 is too large a constant to become a pointer on\n+   xstormy16. */\n+/* { dg-do assemble { xfail xstormy16-*-* } } */\n \n int main()\n {"}, {"sha": "b326395523bf0d3f888ceb3c08f76bd390b6e24c", "filename": "gcc/testsuite/gcc.c-torture/compile/990617-1.x", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F990617-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F990617-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F990617-1.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,7 +0,0 @@\n-# 0x70000000 is too large a constant to become a pointer on xstormy16.\n-\n-if { [istarget \"xstormy16-*-*\"] } {\n-        return 1;\n-}\n-\n-return 0"}, {"sha": "c873ed1280debef3f95756f4e59e7e61d0cff4ea", "filename": "gcc/testsuite/gcc.c-torture/compile/compile.exp", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fcompile.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fcompile.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fcompile.exp?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,5 +1,5 @@\n # Expect driver script for GCC Regression Tests\n-# Copyright (C) 1993, 1995, 1997 Free Software Foundation\n+# Copyright (C) 1993, 1995, 1997, 2003 Free Software Foundation\n #\n # This file is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -18,18 +18,17 @@\n # These tests come from Torbjorn Granlund's (tege@cygnus.com)\n # C torture test suite, and other contributors.\n \n-if $tracelevel then {\n-    strace $tracelevel\n-}\n+# Load support procs.\n+load_lib gcc-dg.exp\n \n-# load support procs\n-load_lib c-torture.exp\n+# Initialize `dg'.\n+dg-init\n \n-foreach testcase [glob -nocomplain $srcdir/$subdir/*.c] {\n-    # If we're only testing specific files and this isn't one of them, skip it.\n-    if ![runtest_file_p $runtests $testcase] then {\n-\tcontinue\n-    }\n+# Main loop.\n+set saved-dg-do-what-default ${dg-do-what-default}\n+set dg-do-what-default \"assemble\"\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \"-w\"\n+set dg-do-what-default ${saved-dg-do-what-default}\n \n-    c-torture $testcase\n-}\n+# All done.\n+dg-finish"}, {"sha": "7f7bfcee55c6a030626d014fe3e00a4b7f074f65", "filename": "gcc/testsuite/gcc.c-torture/compile/dll.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fdll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fdll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fdll.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-require-dll \"\" } */\n+\n __declspec (dllimport) int foo;\n extern int (* import) (void) __attribute__((dllimport));\n int func2 (void) __attribute__((dllexport));"}, {"sha": "14eb9522f6807e37505047a35347f918f8249c8b", "filename": "gcc/testsuite/gcc.c-torture/compile/labels-3.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flabels-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flabels-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flabels-3.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,9 @@\n+/* This test does not compile on mips-irix6 using the native assembler,\n+   though it does work with gas.  See PR6200.  Since we cannot (???)\n+   distinguish which assembler is being used, always pass -S for\n+   irix.  */\n+/* { dg-options \"-w -S\" { target mips*-*-irix* } } */\n+\n /* Verify that we can narrow the storage associated with label diffs.  */\n \n int foo (int a)"}, {"sha": "e9b4118ff444763e971f165fbd7ef53b755b5584", "filename": "gcc/testsuite/gcc.c-torture/compile/labels-3.x", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flabels-3.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flabels-3.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flabels-3.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,7 +0,0 @@\n-# This test does not compile on mips-irix6 using the native assembler,\n-# though it does work with gas.  See PR6200.  Since we cannot (???)\n-# distinguish which assembler is being used, always pass -S for irix.\n-\n-if { [istarget \"mips*-*-irix*\"] } { set options \"-S\" }\n-\n-return 0"}, {"sha": "478b423e2d78d62c01629500ab07c572c3971a19", "filename": "gcc/testsuite/gcc.c-torture/compile/mipscop-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-1.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-do assemble {target *mips*-*-* } } */\n+\n register unsigned int cp0count asm (\"$c0r1\");\n \n int"}, {"sha": "66601ea91f17b2fd9bb534a8c1fc9e369567a6ed", "filename": "gcc/testsuite/gcc.c-torture/compile/mipscop-1.x", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-1.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,10 +0,0 @@\n-global target_triplet\n-\n-if { ![istarget \"*mips*\"] } {\n-\treturn 1\n-} else {\n-\tset torture_compile_xfail \"$target_triplet\"\n-}\n-\n-return 0\n-"}, {"sha": "0ba5610b623033e62a64bfb1f97b48c273f665d4", "filename": "gcc/testsuite/gcc.c-torture/compile/mipscop-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-2.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-do assemble {target *mips*-*-* } } */\n+\n register unsigned int c3r1 asm (\"$c3r1\");\n \n extern unsigned int b, c;"}, {"sha": "66601ea91f17b2fd9bb534a8c1fc9e369567a6ed", "filename": "gcc/testsuite/gcc.c-torture/compile/mipscop-2.x", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-2.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-2.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-2.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,10 +0,0 @@\n-global target_triplet\n-\n-if { ![istarget \"*mips*\"] } {\n-\treturn 1\n-} else {\n-\tset torture_compile_xfail \"$target_triplet\"\n-}\n-\n-return 0\n-"}, {"sha": "3a4250cc358deed0cf7d1166f0429fbe4550ec45", "filename": "gcc/testsuite/gcc.c-torture/compile/mipscop-3.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-3.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-do assemble {target *mips*-*-* } } */\n+\n register unsigned int c3r1 asm (\"$c3r1\"), c3r2 asm (\"$c3r2\");\n \n extern unsigned int b, c;"}, {"sha": "66601ea91f17b2fd9bb534a8c1fc9e369567a6ed", "filename": "gcc/testsuite/gcc.c-torture/compile/mipscop-3.x", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-3.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-3.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-3.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,10 +0,0 @@\n-global target_triplet\n-\n-if { ![istarget \"*mips*\"] } {\n-\treturn 1\n-} else {\n-\tset torture_compile_xfail \"$target_triplet\"\n-}\n-\n-return 0\n-"}, {"sha": "a30146224c1f68e395c1d3d7e7e7abb1b363d2b1", "filename": "gcc/testsuite/gcc.c-torture/compile/mipscop-4.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-4.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-do assemble {target *mips*-*-* } } */\n+\n register unsigned long c3r1 asm (\"$c3r1\"), c3r2 asm (\"$c3r2\");\n \n extern unsigned long b, c;"}, {"sha": "66601ea91f17b2fd9bb534a8c1fc9e369567a6ed", "filename": "gcc/testsuite/gcc.c-torture/compile/mipscop-4.x", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-4.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-4.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fmipscop-4.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,10 +0,0 @@\n-global target_triplet\n-\n-if { ![istarget \"*mips*\"] } {\n-\treturn 1\n-} else {\n-\tset torture_compile_xfail \"$target_triplet\"\n-}\n-\n-return 0\n-"}, {"sha": "35b511879c3896006b9721af3a22d5e179655df5", "filename": "gcc/testsuite/gcc.c-torture/compile/simd-5.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-5.c?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -1,3 +1,11 @@\n+/* h8300 does not have long long */\n+/* PowerPC-64 doesn't handle this; see PR target/9680 */\n+/* { dg-do assemble { xfail h8300-*-* powerpc64-*-* } } */\n+/* On SPARC64/SPARC-V9 it fails, except with -m32. */\n+/* { dg-xfail-if \"PR target/9200\" { \"sparc64-*-*\" \"sparcv9-*-*\" } { \"*\" } { \"-m32\" } } */\n+/* On regular SPARC it doesn't fail, except with -m64. */\n+/* { dg-xfail-if \"PR target/9200\" { \"sparc*-*-*\" } { \"-m64\" } { \"\" } } */\n+\n #define vector64 __attribute__((vector_size(8)))\n \n main(){"}, {"sha": "28f7e8761231f9bff252c2c8a9627325dd7694bd", "filename": "gcc/testsuite/gcc.c-torture/compile/simd-5.x", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-5.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac29877a520a877d4674320fcc487190b8b4cfa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-5.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-5.x?ref=2ac29877a520a877d4674320fcc487190b8b4cfa", "patch": "@@ -1,30 +0,0 @@\n-# h8300 does not have long long\n-if { [istarget \"h8300-*-*\"] } {\n-    return 1;\n-}\n-\n-if { [istarget \"sparc64-*-*\"] || [istarget \"sparcv9-*-*\"] } {\n-    # On SPARC64/SPARC-V9 it fails, except with -m32.\n-    set torture_eval_before_compile {\n-        global compiler_conditional_xfail_data\n-        set compiler_conditional_xfail_data {\n-            \"PR target/9200\" \\\n-            { \"*-*-*\" } \\\n-            { \"*\" } \\\n-            { \"-m32\" }\n-        }\n-    }\n-} elseif { [istarget \"sparc-*-*\"] } {\n-    # On regular SPARC it doesn't fail, except with -m64.\n-    set torture_eval_before_compile {\n-        global compiler_conditional_xfail_data\n-        set compiler_conditional_xfail_data {\n-            \"PR target/9200\" \\\n-            { \"*-*-*\" } \\\n-            { \"-m64\" } \\\n-            { \"\" }\n-        }\n-    }\n-}\n-\n-return 0"}, {"sha": "69cf6fb2379819c8b9be1c9b002ee435d7ca41c7", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5482aaab6fd88069549d2312524917424b915a95/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=5482aaab6fd88069549d2312524917424b915a95", "patch": "@@ -295,6 +295,30 @@ proc dg-require-gc-sections { args } {\n     }\n }\n \n+# If this target does not support DLL attributes skip this test.\n+\n+proc dg-require-dll { args } { \n+    global target_triplet\n+    # As a special case, the mcore-*-elf supports dllimport/dllexport.\n+    if { [string match \"mcore-*-elf\" $target_triplet] } {\n+\treturn\n+    }\n+    # PE/COFF targets support dllimport/dllexport.\n+    if { [gcc_target_object_format] == \"pe\" } {\n+\treturn\n+    }\n+\n+    upvar dg-do-what dg-do-what\n+    set dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n+}\n+\n+# Like check_conditional_xfail, but callable from a dg test.\n+\n+proc dg-xfail-if { args } {\n+    eval check_conditional_xfail $args\n+}\n+\n+\n # We need to make sure that additional_files and additional_sources\n # are both cleared out after every test.  It is not enough to clear\n # them out *before* the next test run because gcc-target-compile gets"}]}