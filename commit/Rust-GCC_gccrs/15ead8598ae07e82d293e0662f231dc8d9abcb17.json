{"sha": "15ead8598ae07e82d293e0662f231dc8d9abcb17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVlYWQ4NTk4YWUwN2U4MmQyOTNlMDY2MmYyMzFkYzhkOWFiY2IxNw==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-10-27T00:54:20Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-10-27T00:54:20Z"}, "message": "re PR fortran/33162 (INTRINSIC functions as ACTUAL argument)\n\n2007-10-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/33162\n\t* intrinsic.h: Add prototypes for four new functions, gfc_check_datan2,\n\tgfc_check_dprod, gfc_check_fn_d, and gfc_check_x_yd.\n\t* intrinsic.c (add_functions): Add double precision checks for dabs,\n\tdacos, dacosh, dasin, dasinh, datan, datanh, datan2, dbesj0, dbesj1,\n\tdbesy0, dbesy1, dcos, dcosh, ddim, derf, derfc, dexp, dgamma,\n\tdlgama, dlog, dlog10, dmod, dsign, dsin, dsinh, dsqrt, dtan, and dtanh.\n\tAdd real check dprod.\n\t* check.c (gfc_check_datan2): New function to check for double precision\n\targumants. (gfc_check_dprod, gfc_check_fn_d, and gfc_check_x_yd): Ditto.\n\nFrom-SVN: r129673", "tree": {"sha": "83255419889936e21ab5a66d417c59c62a29859d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83255419889936e21ab5a66d417c59c62a29859d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15ead8598ae07e82d293e0662f231dc8d9abcb17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ead8598ae07e82d293e0662f231dc8d9abcb17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15ead8598ae07e82d293e0662f231dc8d9abcb17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ead8598ae07e82d293e0662f231dc8d9abcb17/comments", "author": null, "committer": null, "parents": [{"sha": "61fcb9fb0c6d18cb89d163b2228124af7173d54f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fcb9fb0c6d18cb89d163b2228124af7173d54f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61fcb9fb0c6d18cb89d163b2228124af7173d54f"}], "stats": {"total": 132, "additions": 102, "deletions": 30}, "files": [{"sha": "6bfe792db87ec477a96077b0e2a03c4efd9483fc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ead8598ae07e82d293e0662f231dc8d9abcb17/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ead8598ae07e82d293e0662f231dc8d9abcb17/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=15ead8598ae07e82d293e0662f231dc8d9abcb17", "patch": "@@ -1,3 +1,16 @@\n+2007-10-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/33162\n+\t* intrinsic.h: Add prototypes for four new functions, gfc_check_datan2,\n+\tgfc_check_dprod, gfc_check_fn_d, and gfc_check_x_yd.\n+\t* intrinsic.c (add_functions): Add double precision checks for dabs,\n+\tdacos, dacosh, dasin, dasinh, datan, datanh, datan2, dbesj0, dbesj1,\n+\tdbesy0, dbesy1, dcos, dcosh, ddim, derf, derfc, dexp, dgamma,\n+\tdlgama, dlog, dlog10, dmod, dsign, dsin, dsinh, dsqrt, dtan, and dtanh.\n+\tAdd real check dprod.\n+\t* check.c (gfc_check_datan2): New function to check for double precision\n+\targumants. (gfc_check_dprod, gfc_check_fn_d, and gfc_check_x_yd): Ditto.\n+\n 2007-10-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \t* invoke.texi: Fix typo in -fmax-errors=."}, {"sha": "96ddfcdff859600f24655c3ffd298e396f4517b8", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ead8598ae07e82d293e0662f231dc8d9abcb17/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ead8598ae07e82d293e0662f231dc8d9abcb17/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=15ead8598ae07e82d293e0662f231dc8d9abcb17", "patch": "@@ -574,6 +574,16 @@ gfc_check_a_p (gfc_expr *a, gfc_expr *p)\n }\n \n \n+try\n+gfc_check_x_yd (gfc_expr *x, gfc_expr *y)\n+{\n+  if (double_check (x, 0) == FAILURE || double_check (y, 1) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n try\n gfc_check_associated (gfc_expr *pointer, gfc_expr *target)\n {\n@@ -881,6 +891,14 @@ gfc_check_ctime (gfc_expr *time)\n }\n \n \n+try gfc_check_datan2 (gfc_expr *y, gfc_expr *x)\n+{\n+  if (double_check (y, 0) == FAILURE || double_check (x, 1) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n try\n gfc_check_dcmplx (gfc_expr *x, gfc_expr *y)\n {\n@@ -967,6 +985,33 @@ gfc_check_dot_product (gfc_expr *vector_a, gfc_expr *vector_b)\n }\n \n \n+try\n+gfc_check_dprod (gfc_expr *x, gfc_expr *y)\n+{\n+  if (type_check (x, 0, BT_REAL) == FAILURE\n+      || type_check (y, 1, BT_REAL) == FAILURE)\n+    return FAILURE;\n+\n+  if (x->ts.kind != gfc_default_real_kind)\n+    {\n+      gfc_error (\"'%s' argument of '%s' intrinsic at %L must be default \"\n+\t\t \"real\", gfc_current_intrinsic_arg[0],\n+\t\t gfc_current_intrinsic, &x->where);\n+      return FAILURE;\n+    }\n+\n+  if (y->ts.kind != gfc_default_real_kind)\n+    {\n+      gfc_error (\"'%s' argument of '%s' intrinsic at %L must be default \"\n+\t\t \"real\", gfc_current_intrinsic_arg[1],\n+\t\t gfc_current_intrinsic, &y->where);\n+      return FAILURE;\n+    }\n+\n+  return SUCCESS;\n+}\n+\n+\n try\n gfc_check_eoshift (gfc_expr *array, gfc_expr *shift, gfc_expr *boundary,\n \t\t   gfc_expr *dim)\n@@ -1026,6 +1071,16 @@ gfc_check_fn_r (gfc_expr *a)\n   return SUCCESS;\n }\n \n+/* A single double argument.  */\n+\n+try\n+gfc_check_fn_d (gfc_expr *a)\n+{\n+  if (double_check (a, 0) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n \n /* A single real or complex argument.  */\n "}, {"sha": "a67ec70b7e4aa75191a33c967805d4f593b5c516", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ead8598ae07e82d293e0662f231dc8d9abcb17/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ead8598ae07e82d293e0662f231dc8d9abcb17/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=15ead8598ae07e82d293e0662f231dc8d9abcb17", "patch": "@@ -923,7 +923,7 @@ add_functions (void)\n \t     a, BT_INTEGER, di, REQUIRED);\n \n   add_sym_1 (\"dabs\", GFC_ISYM_ABS, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_abs, gfc_resolve_abs,\n+\t     gfc_check_fn_d, gfc_simplify_abs, gfc_resolve_abs,\n \t     a, BT_REAL, dd, REQUIRED);\n \n   add_sym_1 (\"cabs\", GFC_ISYM_ABS, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n@@ -958,7 +958,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dacos\", GFC_ISYM_ACOS, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_acos, gfc_resolve_acos,\n+\t     gfc_check_fn_d, gfc_simplify_acos, gfc_resolve_acos,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"acos\", GFC_ISYM_ACOS, GFC_STD_F77);\n@@ -968,7 +968,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dacosh\", GFC_ISYM_ACOSH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_GNU,\n-\t     NULL, gfc_simplify_acosh, gfc_resolve_acosh,\n+\t     gfc_check_fn_d, gfc_simplify_acosh, gfc_resolve_acosh,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"acosh\", GFC_ISYM_ACOSH, GFC_STD_GNU);\n@@ -1041,7 +1041,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dasin\", GFC_ISYM_ASIN, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_asin, gfc_resolve_asin,\n+\t     gfc_check_fn_d, gfc_simplify_asin, gfc_resolve_asin,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"asin\", GFC_ISYM_ASIN, GFC_STD_F77);\n@@ -1051,7 +1051,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dasinh\", GFC_ISYM_ASINH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_GNU,\n-\t     NULL, gfc_simplify_asinh, gfc_resolve_asinh,\n+\t     gfc_check_fn_d, gfc_simplify_asinh, gfc_resolve_asinh,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"asinh\", GFC_ISYM_ASINH, GFC_STD_GNU);\n@@ -1067,7 +1067,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"datan\", GFC_ISYM_ATAN, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_atan, gfc_resolve_atan,\n+\t     gfc_check_fn_d, gfc_simplify_atan, gfc_resolve_atan,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"atan\", GFC_ISYM_ATAN, GFC_STD_F77);\n@@ -1077,7 +1077,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"datanh\", GFC_ISYM_ATANH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_GNU,\n-\t     NULL, gfc_simplify_atanh, gfc_resolve_atanh,\n+\t     gfc_check_fn_d, gfc_simplify_atanh, gfc_resolve_atanh,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"atanh\", GFC_ISYM_ATANH, GFC_STD_GNU);\n@@ -1087,7 +1087,7 @@ add_functions (void)\n \t     y, BT_REAL, dr, REQUIRED, x, BT_REAL, dr, REQUIRED);\n \n   add_sym_2 (\"datan2\", GFC_ISYM_ATAN2, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_atan2, gfc_resolve_atan2,\n+\t     gfc_check_datan2, gfc_simplify_atan2, gfc_resolve_atan2,\n \t     y, BT_REAL, dd, REQUIRED, x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"atan2\", GFC_ISYM_ATAN2, GFC_STD_F77);\n@@ -1098,7 +1098,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dbesj0\", GFC_ISYM_J0, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n-\t     gfc_check_fn_r, NULL, gfc_resolve_g77_math1,\n+\t     gfc_check_fn_d, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"besj0\", GFC_ISYM_J0, GFC_STD_GNU);\n@@ -1108,7 +1108,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dbesj1\", GFC_ISYM_J1, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n-\t     gfc_check_fn_r, NULL, gfc_resolve_g77_math1,\n+\t     gfc_check_fn_d, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"besj1\", GFC_ISYM_J1, GFC_STD_GNU);\n@@ -1128,7 +1128,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dbesy0\", GFC_ISYM_Y0, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n-\t     gfc_check_fn_r, NULL, gfc_resolve_g77_math1,\n+\t     gfc_check_fn_d, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"besy0\", GFC_ISYM_Y0, GFC_STD_GNU);\n@@ -1138,7 +1138,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dbesy1\", GFC_ISYM_Y1, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n-\t     gfc_check_fn_r, NULL, gfc_resolve_g77_math1,\n+\t     gfc_check_fn_d, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"besy1\", GFC_ISYM_Y1, GFC_STD_GNU);\n@@ -1232,7 +1232,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dcos\", GFC_ISYM_COS, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n-\t     gfc_check_fn_rc, gfc_simplify_cos, gfc_resolve_cos,\n+\t     gfc_check_fn_d, gfc_simplify_cos, gfc_resolve_cos,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   add_sym_1 (\"ccos\", GFC_ISYM_COS, CLASS_ELEMENTAL, ACTUAL_YES, BT_COMPLEX, dz, GFC_STD_F77,\n@@ -1252,7 +1252,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dcosh\", GFC_ISYM_COSH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_cosh, gfc_resolve_cosh,\n+\t     gfc_check_fn_d, gfc_simplify_cosh, gfc_resolve_cosh,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"cosh\", GFC_ISYM_COSH, GFC_STD_F77);\n@@ -1301,7 +1301,7 @@ add_functions (void)\n \t     x, BT_INTEGER, di, REQUIRED, y, BT_INTEGER, di, REQUIRED);\n \n   add_sym_2 (\"ddim\", GFC_ISYM_DIM, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_dim, gfc_resolve_dim,\n+\t     gfc_check_x_yd, gfc_simplify_dim, gfc_resolve_dim,\n \t     x, BT_REAL, dd, REQUIRED, y, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"dim\", GFC_ISYM_DIM, GFC_STD_F77);\n@@ -1313,7 +1313,7 @@ add_functions (void)\n   make_generic (\"dot_product\", GFC_ISYM_DOT_PRODUCT, GFC_STD_F95);\n \n   add_sym_2 (\"dprod\", GFC_ISYM_DPROD,CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_dprod, gfc_resolve_dprod,\n+\t     gfc_check_dprod, gfc_simplify_dprod, gfc_resolve_dprod,\n \t     x, BT_REAL, dr, REQUIRED, y, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"dprod\", GFC_ISYM_DPROD, GFC_STD_F77);\n@@ -1343,7 +1343,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"derf\", GFC_ISYM_ERF, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n-\t     gfc_check_fn_r, NULL, gfc_resolve_g77_math1,\n+\t     gfc_check_fn_d, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"erf\", GFC_ISYM_ERF, GFC_STD_GNU);\n@@ -1353,7 +1353,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"derfc\", GFC_ISYM_ERFC, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n-\t     gfc_check_fn_r, NULL, gfc_resolve_g77_math1,\n+\t     gfc_check_fn_d, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"erfc\", GFC_ISYM_ERFC, GFC_STD_GNU);\n@@ -1372,7 +1372,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dexp\", GFC_ISYM_EXP, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_exp, gfc_resolve_exp,\n+\t     gfc_check_fn_d, gfc_simplify_exp, gfc_resolve_exp,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   add_sym_1 (\"cexp\", GFC_ISYM_EXP, CLASS_ELEMENTAL, ACTUAL_YES, BT_COMPLEX, dz, GFC_STD_F77,\n@@ -1458,7 +1458,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dgamma\", GFC_ISYM_GAMMA, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n-\t     gfc_check_fn_r, gfc_simplify_gamma, gfc_resolve_gamma,\n+\t     gfc_check_fn_d, gfc_simplify_gamma, gfc_resolve_gamma,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"gamma\", GFC_ISYM_GAMMA, GFC_STD_GNU);\n@@ -1721,7 +1721,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dlgama\", GFC_ISYM_LGAMMA, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n-\t     gfc_check_fn_r, gfc_simplify_lgamma, gfc_resolve_lgamma,\n+\t     gfc_check_fn_d, gfc_simplify_lgamma, gfc_resolve_lgamma,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"lgamma\", GFC_ISYM_LGAMMA, GFC_STD_GNU);\n@@ -1766,7 +1766,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dlog\", GFC_ISYM_LOG, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_log, gfc_resolve_log,\n+\t     gfc_check_fn_d, gfc_simplify_log, gfc_resolve_log,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   add_sym_1 (\"clog\", GFC_ISYM_LOG, CLASS_ELEMENTAL, ACTUAL_YES, BT_COMPLEX, dz, GFC_STD_F77,\n@@ -1790,7 +1790,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dlog10\", GFC_ISYM_LOG10, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_log10, gfc_resolve_log10,\n+\t     gfc_check_fn_d, gfc_simplify_log10, gfc_resolve_log10,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"log10\", GFC_ISYM_LOG10, GFC_STD_F77);\n@@ -1943,7 +1943,7 @@ add_functions (void)\n \t     a, BT_REAL, dr, REQUIRED, p, BT_REAL, dr, REQUIRED);\n \n   add_sym_2 (\"dmod\", GFC_ISYM_MOD, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_mod, gfc_resolve_mod,\n+\t     gfc_check_x_yd, gfc_simplify_mod, gfc_resolve_mod,\n \t     a, BT_REAL, dd, REQUIRED, p, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"mod\", GFC_ISYM_MOD, GFC_STD_F77);\n@@ -2143,7 +2143,7 @@ add_functions (void)\n \t     a, BT_INTEGER, di, REQUIRED, b, BT_INTEGER, di, REQUIRED);\n \n   add_sym_2 (\"dsign\", GFC_ISYM_SIGN, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_sign, gfc_resolve_sign,\n+\t     gfc_check_x_yd, gfc_simplify_sign, gfc_resolve_sign,\n \t     a, BT_REAL, dd, REQUIRED, b, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"sign\", GFC_ISYM_SIGN, GFC_STD_F77);\n@@ -2159,7 +2159,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dsin\", GFC_ISYM_SIN, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_sin, gfc_resolve_sin,\n+\t     gfc_check_fn_d, gfc_simplify_sin, gfc_resolve_sin,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   add_sym_1 (\"csin\", GFC_ISYM_SIN, CLASS_ELEMENTAL, ACTUAL_YES, BT_COMPLEX, dz, GFC_STD_F77,\n@@ -2179,7 +2179,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dsinh\", GFC_ISYM_SINH,CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_sinh, gfc_resolve_sinh,\n+\t     gfc_check_fn_d, gfc_simplify_sinh, gfc_resolve_sinh,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"sinh\", GFC_ISYM_SINH, GFC_STD_F77);\n@@ -2216,7 +2216,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dsqrt\", GFC_ISYM_SQRT, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_sqrt, gfc_resolve_sqrt,\n+\t     gfc_check_fn_d, gfc_simplify_sqrt, gfc_resolve_sqrt,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   add_sym_1 (\"csqrt\", GFC_ISYM_SQRT, CLASS_ELEMENTAL, ACTUAL_YES, BT_COMPLEX, dz, GFC_STD_F77,\n@@ -2261,7 +2261,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dtan\", GFC_ISYM_TAN, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_tan, gfc_resolve_tan,\n+\t     gfc_check_fn_d, gfc_simplify_tan, gfc_resolve_tan,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"tan\", GFC_ISYM_TAN, GFC_STD_F77);\n@@ -2271,7 +2271,7 @@ add_functions (void)\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dtanh\", GFC_ISYM_TANH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_tanh, gfc_resolve_tanh,\n+\t     gfc_check_fn_d, gfc_simplify_tanh, gfc_resolve_tanh,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"tanh\", GFC_ISYM_TANH, GFC_STD_F77);"}, {"sha": "59cdfb14eeb333b3db57fb448fe6173d345437d5", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ead8598ae07e82d293e0662f231dc8d9abcb17/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ead8598ae07e82d293e0662f231dc8d9abcb17/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=15ead8598ae07e82d293e0662f231dc8d9abcb17", "patch": "@@ -29,6 +29,7 @@ extern gfc_expr gfc_bad_expr;\n try gfc_check_a_ikind (gfc_expr *, gfc_expr *);\n try gfc_check_a_xkind (gfc_expr *, gfc_expr *);\n try gfc_check_a_p (gfc_expr *, gfc_expr *);\n+try gfc_check_x_yd (gfc_expr *, gfc_expr *);\n \n try gfc_check_abs (gfc_expr *);\n try gfc_check_access_func (gfc_expr *, gfc_expr *);\n@@ -47,17 +48,20 @@ try gfc_check_complex (gfc_expr *, gfc_expr *);\n try gfc_check_count (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_cshift (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_ctime (gfc_expr *);\n+try gfc_check_datan2 (gfc_expr *, gfc_expr *);\n try gfc_check_dcmplx (gfc_expr *, gfc_expr *);\n try gfc_check_dble (gfc_expr *);\n try gfc_check_digits (gfc_expr *);\n try gfc_check_dot_product (gfc_expr *, gfc_expr *);\n+try gfc_check_dprod (gfc_expr *, gfc_expr *);\n try gfc_check_eoshift (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_etime (gfc_expr *);\n try gfc_check_fgetputc (gfc_expr *, gfc_expr *);\n try gfc_check_fgetput (gfc_expr *);\n try gfc_check_fstat (gfc_expr *, gfc_expr *);\n try gfc_check_ftell (gfc_expr *);\n try gfc_check_fn_c (gfc_expr *);\n+try gfc_check_fn_d (gfc_expr *);\n try gfc_check_fn_r (gfc_expr *);\n try gfc_check_fn_rc (gfc_expr *);\n try gfc_check_fnum (gfc_expr *);"}]}