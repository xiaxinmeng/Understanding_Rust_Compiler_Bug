{"sha": "bbc8fb000beb5e5308d4bd9f4a76ac63db7d09f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJjOGZiMDAwYmViNWU1MzA4ZDRiZDlmNGE3NmFjNjNkYjdkMDlmNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-01-15T04:10:54Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-01-15T04:10:54Z"}, "message": "explow.c (copy_all_reg, stabilize): Remove.\n\n\t* explow.c (copy_all_reg, stabilize): Remove.\n\t* expr.h: Remove the corresponding prototypes.\n\nFrom-SVN: r93683", "tree": {"sha": "c7b3ab1210534dd92e64e99073c22a00c3da9193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7b3ab1210534dd92e64e99073c22a00c3da9193"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbc8fb000beb5e5308d4bd9f4a76ac63db7d09f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbc8fb000beb5e5308d4bd9f4a76ac63db7d09f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbc8fb000beb5e5308d4bd9f4a76ac63db7d09f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbc8fb000beb5e5308d4bd9f4a76ac63db7d09f4/comments", "author": null, "committer": null, "parents": [{"sha": "165a5bad872543b77cd9519127d96d0c18e93e11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/165a5bad872543b77cd9519127d96d0c18e93e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/165a5bad872543b77cd9519127d96d0c18e93e11"}], "stats": {"total": 67, "additions": 5, "deletions": 62}, "files": [{"sha": "25b2a9bb921eaf448896aa82514237d84a4898dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbc8fb000beb5e5308d4bd9f4a76ac63db7d09f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbc8fb000beb5e5308d4bd9f4a76ac63db7d09f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbc8fb000beb5e5308d4bd9f4a76ac63db7d09f4", "patch": "@@ -1,3 +1,8 @@\n+2005-01-15  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* explow.c (copy_all_reg, stabilize): Remove.\n+\t* expr.h: Remove the corresponding prototypes.\n+\n 2005-01-14  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.c (rs6k_nonimmediate_operand): Rename"}, {"sha": "6460bb9bbd72b22cabd1bfce7d4d21e4f6919014", "filename": "gcc/explow.c", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbc8fb000beb5e5308d4bd9f4a76ac63db7d09f4/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbc8fb000beb5e5308d4bd9f4a76ac63db7d09f4/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=bbc8fb000beb5e5308d4bd9f4a76ac63db7d09f4", "patch": "@@ -390,44 +390,6 @@ convert_memory_address (enum machine_mode to_mode ATTRIBUTE_UNUSED,\n \t\t\tx, POINTERS_EXTEND_UNSIGNED);\n #endif /* defined(POINTERS_EXTEND_UNSIGNED) */\n }\n-\n-/* Given a memory address or facsimile X, construct a new address,\n-   currently equivalent, that is stable: future stores won't change it.\n-\n-   X must be composed of constants, register and memory references\n-   combined with addition, subtraction and multiplication:\n-   in other words, just what you can get from expand_expr if sum_ok is 1.\n-\n-   Works by making copies of all regs and memory locations used\n-   by X and combining them the same way X does.\n-   You could also stabilize the reference to this address\n-   by copying the address to a register with copy_to_reg;\n-   but then you wouldn't get indexed addressing in the reference.  */\n-\n-rtx\n-copy_all_regs (rtx x)\n-{\n-  if (REG_P (x))\n-    {\n-      if (REGNO (x) != FRAME_POINTER_REGNUM\n-#if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n-\t  && REGNO (x) != HARD_FRAME_POINTER_REGNUM\n-#endif\n-\t  )\n-\tx = copy_to_reg (x);\n-    }\n-  else if (MEM_P (x))\n-    x = copy_to_reg (x);\n-  else if (GET_CODE (x) == PLUS || GET_CODE (x) == MINUS\n-\t   || GET_CODE (x) == MULT)\n-    {\n-      rtx op0 = copy_all_regs (XEXP (x, 0));\n-      rtx op1 = copy_all_regs (XEXP (x, 1));\n-      if (op0 != XEXP (x, 0) || op1 != XEXP (x, 1))\n-\tx = gen_rtx_fmt_ee (GET_CODE (x), Pmode, op0, op1);\n-    }\n-  return x;\n-}\n \f\n /* Return something equivalent to X but valid as a memory address\n    for something of mode MODE.  When X is not itself valid, this\n@@ -576,22 +538,6 @@ validize_mem (rtx ref)\n   return replace_equiv_address (ref, XEXP (ref, 0));\n }\n \f\n-/* Return a modified copy of X with its memory address copied\n-   into a temporary register to protect it from side effects.\n-   If X is not a MEM, it is returned unchanged (and not copied).\n-   Perhaps even if it is a MEM, if there is no need to change it.  */\n-\n-rtx\n-stabilize (rtx x)\n-{\n-  if (!MEM_P (x)\n-      || ! rtx_unstable_p (XEXP (x, 0)))\n-    return x;\n-\n-  return\n-    replace_equiv_address (x, force_reg (Pmode, copy_all_regs (XEXP (x, 0))));\n-}\n-\f\n /* Copy the value or contents of X to a new temp reg and return that reg.  */\n \n rtx"}, {"sha": "b624413e080fb7af5cf7b10f11cf0bea4e127d51", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbc8fb000beb5e5308d4bd9f4a76ac63db7d09f4/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbc8fb000beb5e5308d4bd9f4a76ac63db7d09f4/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=bbc8fb000beb5e5308d4bd9f4a76ac63db7d09f4", "patch": "@@ -642,14 +642,6 @@ extern void set_mem_attributes_minus_bitpos (rtx, tree, int, HOST_WIDE_INT);\n /* Assemble the static constant template for function entry trampolines.  */\n extern rtx assemble_trampoline_template (void);\n \n-/* Given rtx, return new rtx whose address won't be affected by\n-   any side effects.  It has been copied to a new temporary reg.  */\n-extern rtx stabilize (rtx);\n-\n-/* Given an rtx, copy all regs it refers to into new temps\n-   and return a modified copy that refers to the new temps.  */\n-extern rtx copy_all_regs (rtx);\n-\n /* Copy given rtx to a new temp reg and return that.  */\n extern rtx copy_to_reg (rtx);\n "}]}