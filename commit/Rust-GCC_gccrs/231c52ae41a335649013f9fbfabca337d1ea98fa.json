{"sha": "231c52ae41a335649013f9fbfabca337d1ea98fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMxYzUyYWU0MWEzMzU2NDkwMTNmOWZiZmFiY2EzMzdkMWVhOThmYQ==", "commit": {"author": {"name": "Sam Tebbs", "email": "sam.tebbs@arm.com", "date": "2018-09-13T09:46:55Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-09-13T09:46:55Z"}, "message": "[Aarch64] Exploiting BFXIL when OR-ing two AND-operations with appropriate bitmasks\n\n2018-09-13  Sam Tebbs  <sam.tebbs@arm.com>\n\n\tPR target/85628\n\t* config/aarch64/aarch64.md (*aarch64_bfxil):\n\tDefine.\n\t* config/aarch64/constraints.md (Ulc): Define.\n\t* config/aarch64/aarch64-protos.h (aarch64_high_bits_all_ones_p):\n\tDefine.\n\t* config/aarch64/aarch64.c (aarch64_high_bits_all_ones_p):\n\tNew function.\n\n\t* gcc.target/aarch64/combine_bfxil.c: New file.\n\t* gcc.target/aarch64/combine_bfxil_2.c: New file.\n\nFrom-SVN: r264264", "tree": {"sha": "9948e709e928eeb72cdc570996803a9b6ddce0a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9948e709e928eeb72cdc570996803a9b6ddce0a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/231c52ae41a335649013f9fbfabca337d1ea98fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231c52ae41a335649013f9fbfabca337d1ea98fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/231c52ae41a335649013f9fbfabca337d1ea98fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231c52ae41a335649013f9fbfabca337d1ea98fa/comments", "author": null, "committer": null, "parents": [{"sha": "0795f659b09677e0c51832ecaef0680863049424", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0795f659b09677e0c51832ecaef0680863049424", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0795f659b09677e0c51832ecaef0680863049424"}], "stats": {"total": 172, "additions": 172, "deletions": 0}, "files": [{"sha": "99b894bb3672de86a6a3603b50086c9530ff66f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231c52ae41a335649013f9fbfabca337d1ea98fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231c52ae41a335649013f9fbfabca337d1ea98fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=231c52ae41a335649013f9fbfabca337d1ea98fa", "patch": "@@ -1,3 +1,14 @@\n+2018-09-13  Sam Tebbs  <sam.tebbs@arm.com>\n+\n+\tPR target/85628\n+\t* config/aarch64/aarch64.md (*aarch64_bfxil):\n+\tDefine.\n+\t* config/aarch64/constraints.md (Ulc): Define.\n+\t* config/aarch64/aarch64-protos.h (aarch64_high_bits_all_ones_p):\n+\tDefine.\n+\t* config/aarch64/aarch64.c (aarch64_high_bits_all_ones_p):\n+\tNew function.\n+\n 2018-09-13  Vlad Lazar  <vlad.lazar@arm.com>\n \n \t* config/aarch64/aarch64.h (TARGET_COMPUTE_FRAME_LAYOUT): Define."}, {"sha": "b26e46f81a414bf71762527f84fd9ac38b81b829", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231c52ae41a335649013f9fbfabca337d1ea98fa/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231c52ae41a335649013f9fbfabca337d1ea98fa/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=231c52ae41a335649013f9fbfabca337d1ea98fa", "patch": "@@ -624,4 +624,6 @@ rtl_opt_pass *make_pass_tag_collision_avoidance (gcc::context *);\n \n poly_uint64 aarch64_regmode_natural_size (machine_mode);\n \n+bool aarch64_high_bits_all_ones_p (HOST_WIDE_INT);\n+\n #endif /* GCC_AARCH64_PROTOS_H */"}, {"sha": "8cc738c11f0581fdad0c14385826392eeb1816ad", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231c52ae41a335649013f9fbfabca337d1ea98fa/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231c52ae41a335649013f9fbfabca337d1ea98fa/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=231c52ae41a335649013f9fbfabca337d1ea98fa", "patch": "@@ -1432,6 +1432,13 @@ aarch64_hard_regno_caller_save_mode (unsigned regno, unsigned,\n     return SImode;\n }\n \n+/* Return true if I's bits are consecutive ones from the MSB.  */\n+bool\n+aarch64_high_bits_all_ones_p (HOST_WIDE_INT i)\n+{\n+  return exact_log2 (-i) != HOST_WIDE_INT_M1;\n+}\n+\n /* Implement TARGET_CONSTANT_ALIGNMENT.  Make strings word-aligned so\n    that strcpy from constants will be faster.  */\n "}, {"sha": "88f66104db31320389f05cdd5d161db9992a77b8", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231c52ae41a335649013f9fbfabca337d1ea98fa/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231c52ae41a335649013f9fbfabca337d1ea98fa/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=231c52ae41a335649013f9fbfabca337d1ea98fa", "patch": "@@ -5336,6 +5336,31 @@\n   [(set_attr \"type\" \"rev\")]\n )\n \n+(define_insn \"*aarch64_bfxil<mode>\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r,r\")\n+    (ior:GPI (and:GPI (match_operand:GPI 1 \"register_operand\" \"r,0\")\n+\t\t    (match_operand:GPI 3 \"const_int_operand\" \"n, Ulc\"))\n+\t    (and:GPI (match_operand:GPI 2 \"register_operand\" \"0,r\")\n+\t\t    (match_operand:GPI 4 \"const_int_operand\" \"Ulc, n\"))))]\n+  \"(INTVAL (operands[3]) == ~INTVAL (operands[4]))\n+  && (aarch64_high_bits_all_ones_p (INTVAL (operands[3]))\n+    || aarch64_high_bits_all_ones_p (INTVAL (operands[4])))\"\n+  {\n+    switch (which_alternative)\n+    {\n+      case 0:\n+\toperands[3] = GEN_INT (ctz_hwi (~INTVAL (operands[3])));\n+\treturn \"bfxil\\\\t%<w>0, %<w>1, 0, %3\";\n+      case 1:\n+\toperands[3] = GEN_INT (ctz_hwi (~INTVAL (operands[4])));\n+\treturn \"bfxil\\\\t%<w>0, %<w>2, 0, %3\";\n+      default:\n+\tgcc_unreachable ();\n+    }\n+  }\n+  [(set_attr \"type\" \"bfm\")]\n+)\n+\n ;; There are no canonicalisation rules for the position of the lshiftrt, ashift\n ;; operations within an IOR/AND RTX, therefore we have two patterns matching\n ;; each valid permutation."}, {"sha": "31fc3eafd8bba03cc773e226223a6293c6dde8d4", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231c52ae41a335649013f9fbfabca337d1ea98fa/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231c52ae41a335649013f9fbfabca337d1ea98fa/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=231c52ae41a335649013f9fbfabca337d1ea98fa", "patch": "@@ -172,6 +172,13 @@\n   A constraint that matches the immediate constant -1.\"\n   (match_test \"op == constm1_rtx\"))\n \n+(define_constraint \"Ulc\"\n+ \"@internal\n+ A constraint that matches a constant integer whose bits are consecutive ones\n+ from the MSB.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"aarch64_high_bits_all_ones_p (ival)\")))\n+\n (define_constraint \"Usv\"\n   \"@internal\n    A constraint that matches a VG-based constant that can be loaded by"}, {"sha": "08915bbd5a341109b60b31076cfd16696b215ca7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231c52ae41a335649013f9fbfabca337d1ea98fa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231c52ae41a335649013f9fbfabca337d1ea98fa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=231c52ae41a335649013f9fbfabca337d1ea98fa", "patch": "@@ -1,3 +1,9 @@\n+2018-09-13  Sam Tebbs  <sam.tebbs@arm.com>\n+\n+\tPR target/85628\n+\t* gcc.target/aarch64/combine_bfxil.c: New file.\n+\t* gcc.target/aarch64/combine_bfxil_2.c: New file.\n+\n 2018-09-13  Jakub Jelinek  <jakub@redhat.com>\n \t    Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n "}, {"sha": "adb0582ed9d8207f7b52c8912d03345369747448", "filename": "gcc/testsuite/gcc.target/aarch64/combine_bfxil.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231c52ae41a335649013f9fbfabca337d1ea98fa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcombine_bfxil.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231c52ae41a335649013f9fbfabca337d1ea98fa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcombine_bfxil.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcombine_bfxil.c?ref=231c52ae41a335649013f9fbfabca337d1ea98fa", "patch": "@@ -0,0 +1,98 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+\n+extern void abort (void);\n+\n+unsigned long long\n+combine_balanced (unsigned long long a, unsigned long long b)\n+{\n+  return (a & 0xffffffff00000000ll) | (b & 0x00000000ffffffffll);\n+}\n+\n+unsigned long long\n+combine_minimal (unsigned long long a, unsigned long long b)\n+{\n+  return (a & 0xfffffffffffffffe) | (b & 0x0000000000000001);\n+}\n+\n+unsigned long long\n+combine_unbalanced (unsigned long long a, unsigned long long b)\n+{\n+  return (a & 0xffffffffff000000ll) | (b & 0x0000000000ffffffll);\n+}\n+\n+unsigned int\n+combine_balanced_int (unsigned int a, unsigned int b)\n+{\n+  return (a & 0xffff0000ll) | (b & 0x0000ffffll);\n+}\n+\n+unsigned int\n+combine_unbalanced_int (unsigned int a, unsigned int b)\n+{\n+  return (a & 0xffffff00ll) | (b & 0x000000ffll);\n+}\n+\n+__attribute__ ((noinline)) void\n+foo (unsigned long long a, unsigned long long b, unsigned long long *c,\n+  unsigned long long *d)\n+{\n+  *c = combine_minimal (a, b);\n+  *d = combine_minimal (b, a);\n+}\n+\n+__attribute__ ((noinline)) void\n+foo2 (unsigned long long a, unsigned long long b, unsigned long long *c,\n+  unsigned long long *d)\n+{\n+  *c = combine_balanced (a, b);\n+  *d = combine_balanced (b, a);\n+}\n+\n+__attribute__ ((noinline)) void\n+foo3 (unsigned long long a, unsigned long long b, unsigned long long *c,\n+  unsigned long long *d)\n+{\n+  *c = combine_unbalanced (a, b);\n+  *d = combine_unbalanced (b, a);\n+}\n+\n+void\n+foo4 (unsigned int a, unsigned int b, unsigned int *c, unsigned int *d)\n+{\n+  *c = combine_balanced_int (a, b);\n+  *d = combine_balanced_int (b, a);\n+}\n+\n+void\n+foo5 (unsigned int a, unsigned int b, unsigned int *c, unsigned int *d)\n+{\n+  *c = combine_unbalanced_int (a, b);\n+  *d = combine_unbalanced_int (b, a);\n+}\n+\n+int\n+main (void)\n+{\n+  unsigned long long a = 0x0123456789ABCDEF, b = 0xFEDCBA9876543210, c, d;\n+  foo3 (a, b, &c, &d);\n+  if (c != 0x0123456789543210) abort ();\n+  if (d != 0xfedcba9876abcdef) abort ();\n+  foo2 (a, b, &c, &d);\n+  if (c != 0x0123456776543210) abort ();\n+  if (d != 0xfedcba9889abcdef) abort ();\n+  foo (a, b, &c, &d);\n+  if (c != 0x0123456789abcdee) abort ();\n+  if (d != 0xfedcba9876543211) abort ();\n+\n+  unsigned int a2 = 0x01234567, b2 = 0xFEDCBA98, c2, d2;\n+  foo4 (a2, b2, &c2, &d2);\n+  if (c2 != 0x0123ba98) abort ();\n+  if (d2 != 0xfedc4567) abort ();\n+  foo5 (a2, b2, &c2, &d2);\n+  if (c2 != 0x01234598) abort ();\n+  if (d2 != 0xfedcba67) abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bfxil\\\\t\" 10 } } */"}, {"sha": "0fc140443bc67bcf12b93d72b7970e095620021e", "filename": "gcc/testsuite/gcc.target/aarch64/combine_bfxil_2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231c52ae41a335649013f9fbfabca337d1ea98fa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcombine_bfxil_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231c52ae41a335649013f9fbfabca337d1ea98fa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcombine_bfxil_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcombine_bfxil_2.c?ref=231c52ae41a335649013f9fbfabca337d1ea98fa", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned long long\n+combine_non_consecutive (unsigned long long a, unsigned long long b)\n+{\n+  return (a & 0xfffffff200f00000ll) | (b & 0x00001000ffffffffll);\n+}\n+\n+void\n+foo4 (unsigned long long a, unsigned long long b, unsigned long long *c,\n+  unsigned long long *d) {\n+  /* { dg-final { scan-assembler-not \"bfxil\\\\t\" } } */\n+  *c = combine_non_consecutive (a, b);\n+  *d = combine_non_consecutive (b, a);\n+}"}]}