{"sha": "a0bed689af362730fc12c06706035d679d7c4a69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBiZWQ2ODlhZjM2MjczMGZjMTJjMDY3MDYwMzVkNjc5ZDdjNGE2OQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2002-10-11T21:10:00Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2002-10-11T21:10:00Z"}, "message": "cfganal.c (dfs_enumerate_from): Use PARAMS.\n\n\t* cfganal.c (dfs_enumerate_from): Use PARAMS.\n\t* genautomata.c (output_insn_code_cases): Likewise.\n\t* real.c (real_format): Likewise.\n\t* tree.c (tree_size): Revise expressions using TREE_CODE_LENGTH to\n\tensure value is promoted before doing subtraction.\n\nFrom-SVN: r58064", "tree": {"sha": "70e569fabd7c20b1d482290090569a1e037d0fb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70e569fabd7c20b1d482290090569a1e037d0fb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0bed689af362730fc12c06706035d679d7c4a69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0bed689af362730fc12c06706035d679d7c4a69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0bed689af362730fc12c06706035d679d7c4a69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0bed689af362730fc12c06706035d679d7c4a69/comments", "author": null, "committer": null, "parents": [{"sha": "db6556348d92709dfaa930251b5aa0fd5cb740c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db6556348d92709dfaa930251b5aa0fd5cb740c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db6556348d92709dfaa930251b5aa0fd5cb740c3"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "618f7a294b51881d5deda5f0149529c832c9e52d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bed689af362730fc12c06706035d679d7c4a69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bed689af362730fc12c06706035d679d7c4a69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0bed689af362730fc12c06706035d679d7c4a69", "patch": "@@ -1,3 +1,11 @@\n+2002-10-11  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* cfganal.c (dfs_enumerate_from): Use PARAMS.\n+\t* genautomata.c (output_insn_code_cases): Likewise.\n+\t* real.c (real_format): Likewise.\n+\t* tree.c (tree_size): Revise expressions using TREE_CODE_LENGTH to\n+\tensure value is promoted before doing subtraction.\n+\n Fri Oct 11 22:22:38 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* calls.c (expand_call): Simplify noreturn call."}, {"sha": "7aeef93accd3b3e0b77defc04a131606537740e9", "filename": "gcc/cfganal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bed689af362730fc12c06706035d679d7c4a69/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bed689af362730fc12c06706035d679d7c4a69/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=a0bed689af362730fc12c06706035d679d7c4a69", "patch": "@@ -1134,7 +1134,7 @@ int\n dfs_enumerate_from (bb, reverse, predicate, rslt, rslt_max, data)\n      basic_block bb;\n      int reverse;\n-     bool (*predicate) (basic_block, void *);\n+     bool (*predicate) PARAMS ((basic_block, void *));\n      basic_block *rslt;\n      int rslt_max;\n      void *data;"}, {"sha": "206b7eee58a63440e687f8ae377b21740fc33062", "filename": "gcc/genautomata.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bed689af362730fc12c06706035d679d7c4a69/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bed689af362730fc12c06706035d679d7c4a69/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=a0bed689af362730fc12c06706035d679d7c4a69", "patch": "@@ -7990,7 +7990,7 @@ output_max_insn_queue_index_def ()\n    function *output_automata_list_code.  */\n static void\n output_insn_code_cases (output_automata_list_code)\n-     void (*output_automata_list_code) (automata_list_el_t);\n+     void (*output_automata_list_code) PARAMS ((automata_list_el_t));\n {\n   decl_t decl, decl2;\n   int i, j;"}, {"sha": "59340f7d905cbe9547e57f779e2e0bf38147ddc3", "filename": "gcc/real.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bed689af362730fc12c06706035d679d7c4a69/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bed689af362730fc12c06706035d679d7c4a69/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=a0bed689af362730fc12c06706035d679d7c4a69", "patch": "@@ -104,8 +104,10 @@ extern char test_real_width\n struct real_format\n {\n   /* Move to and from the target bytes.  */\n-  void (*encode) (const struct real_format *, long *, const REAL_VALUE_TYPE *);\n-  void (*decode) (const struct real_format *, REAL_VALUE_TYPE *, const long *);\n+  void (*encode) PARAMS ((const struct real_format *, long *,\n+\t\t\t  const REAL_VALUE_TYPE *));\n+  void (*decode) PARAMS ((const struct real_format *, REAL_VALUE_TYPE *,\n+\t\t\t  const long *));\n \n   /* The radix of the exponent and digits of the significand.  */\n   int b;"}, {"sha": "dac15adaa7138296b640dd29876eac46ea36c463", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bed689af362730fc12c06706035d679d7c4a69/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bed689af362730fc12c06706035d679d7c4a69/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a0bed689af362730fc12c06706035d679d7c4a69", "patch": "@@ -177,7 +177,7 @@ tree_size (node)\n     case '1':  /* a unary arithmetic expression */\n     case '2':  /* a binary arithmetic expression */\n       return (sizeof (struct tree_exp)\n-\t      + (TREE_CODE_LENGTH (code) - 1) * sizeof (char *));\n+\t      + TREE_CODE_LENGTH (code) * sizeof (char *) - sizeof (char *));\n \n     case 'c':  /* a constant */\n       /* We can't use TREE_CODE_LENGTH for INTEGER_CST, since the number of\n@@ -199,7 +199,7 @@ tree_size (node)\n \tlength = (sizeof (struct tree_common)\n \t\t  + TREE_CODE_LENGTH (code) * sizeof (char *));\n \tif (code == TREE_VEC)\n-\t  length += (TREE_VEC_LENGTH (node) - 1) * sizeof (char *);\n+\t  length += TREE_VEC_LENGTH (node) * sizeof (char *) - sizeof (char *);\n \treturn length;\n       }\n "}]}