{"sha": "e228f7eed275e585d48c92dc87bde3dd0784e4d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIyOGY3ZWVkMjc1ZTU4NWQ0OGM5MmRjODdiZGUzZGQwNzg0ZTRkMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-04-02T09:19:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-04-02T09:19:30Z"}, "message": "[multiple changes]\n\n2012-04-02  Yannick Moy  <moy@adacore.com>\n\n\t* lib-xref-alfa.adb: Code clean up.\n\n2012-04-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Analyze_Subprogram_Instantiation): Do not suppress\n\tstyle checks, because the subprogram instance itself may contain\n\tviolations of syle rules.\n\t* style.adb (Missing_Overriding): Check for missing overriding\n\tindicator on a subprogram instance.\n\n2012-04-02  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch6.adb (Last_Implicit_Declaration): New routine.\n\t(Process_PPCs): Insert the body of _postconditions after the\n\tlast internally generated declaration. This ensures that actual\n\tsubtypes created for formal parameters are visible and properly\n\tfrozen as _postconditions may reference them.\n\nFrom-SVN: r186070", "tree": {"sha": "a214a8cf48a012e0c7fbd60901426ba6143aedaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a214a8cf48a012e0c7fbd60901426ba6143aedaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e228f7eed275e585d48c92dc87bde3dd0784e4d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e228f7eed275e585d48c92dc87bde3dd0784e4d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e228f7eed275e585d48c92dc87bde3dd0784e4d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e228f7eed275e585d48c92dc87bde3dd0784e4d2/comments", "author": null, "committer": null, "parents": [{"sha": "99fc068ee807cc43779d775a3dda705f5f37c4f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99fc068ee807cc43779d775a3dda705f5f37c4f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99fc068ee807cc43779d775a3dda705f5f37c4f5"}], "stats": {"total": 189, "additions": 129, "deletions": 60}, "files": [{"sha": "904c9cc3b002768bb85c61f24a175c2191830eb0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e228f7eed275e585d48c92dc87bde3dd0784e4d2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e228f7eed275e585d48c92dc87bde3dd0784e4d2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e228f7eed275e585d48c92dc87bde3dd0784e4d2", "patch": "@@ -1,3 +1,23 @@\n+2012-04-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* lib-xref-alfa.adb: Code clean up.\n+\n+2012-04-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Subprogram_Instantiation): Do not suppress\n+\tstyle checks, because the subprogram instance itself may contain\n+\tviolations of syle rules.\n+\t* style.adb (Missing_Overriding): Check for missing overriding\n+\tindicator on a subprogram instance.\n+\n+2012-04-02  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch6.adb (Last_Implicit_Declaration): New routine.\n+\t(Process_PPCs): Insert the body of _postconditions after the\n+\tlast internally generated declaration. This ensures that actual\n+\tsubtypes created for formal parameters are visible and properly\n+\tfrozen as _postconditions may reference them.\n+\n 2012-04-02  Robert Dewar  <dewar@adacore.com>\n \n \t* einfo.adb (First_Component_Or_Discriminant) Now applies to"}, {"sha": "c9ab1e03b1013a34d4898691c0fa65c839337472", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 47, "deletions": 46, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e228f7eed275e585d48c92dc87bde3dd0784e4d2/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e228f7eed275e585d48c92dc87bde3dd0784e4d2/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=e228f7eed275e585d48c92dc87bde3dd0784e4d2", "patch": "@@ -570,67 +570,68 @@ package body Alfa is\n          elsif T1.Def /= T2.Def then\n             return T1.Def < T2.Def;\n \n-         --  The following should be commented, it sure looks like a test,\n-         --  but it sits uncommented between the \"third test\" and the \"fourth\n-         --  test! ??? Shouldn't this in any case be an assertion ???\n+         else\n+            --  Both entities must be equal at this point\n \n-         elsif T1.Key.Ent /= T2.Key.Ent then\n-            raise Program_Error;\n+            pragma Assert (T1.Key.Ent = T2.Key.Ent);\n \n-         --  Fourth test: if reference is in same unit as entity definition,\n-         --  sort first.\n+            --  Fourth test: if reference is in same unit as entity definition,\n+            --  sort first.\n \n-         elsif T1.Key.Lun /= T2.Key.Lun\n-           and then T1.Ent_Scope_File = T1.Key.Lun\n-         then\n-            return True;\n+            if T1.Key.Lun /= T2.Key.Lun\n+              and then T1.Ent_Scope_File = T1.Key.Lun\n+            then\n+               return True;\n \n-         elsif T1.Key.Lun /= T2.Key.Lun\n-           and then T2.Ent_Scope_File = T2.Key.Lun\n-         then\n-            return False;\n+            elsif T1.Key.Lun /= T2.Key.Lun\n+              and then T2.Ent_Scope_File = T2.Key.Lun\n+            then\n+               return False;\n \n-         --  Fifth test: if reference is in same unit and same scope as entity\n-         --  definition, sort first.\n+            --  Fifth test: if reference is in same unit and same scope as\n+            --  entity definition, sort first.\n \n-         elsif T1.Ent_Scope_File = T1.Key.Lun\n-           and then T1.Key.Ref_Scope /= T2.Key.Ref_Scope\n-           and then T1.Key.Ent_Scope = T1.Key.Ref_Scope\n-         then\n-            return True;\n+            elsif T1.Ent_Scope_File = T1.Key.Lun\n+              and then T1.Key.Ref_Scope /= T2.Key.Ref_Scope\n+              and then T1.Key.Ent_Scope = T1.Key.Ref_Scope\n+            then\n+               return True;\n \n-         elsif T2.Ent_Scope_File = T2.Key.Lun\n-           and then T1.Key.Ref_Scope /= T2.Key.Ref_Scope\n-           and then T2.Key.Ent_Scope = T2.Key.Ref_Scope\n-         then\n-            return False;\n+            elsif T2.Ent_Scope_File = T2.Key.Lun\n+              and then T1.Key.Ref_Scope /= T2.Key.Ref_Scope\n+              and then T2.Key.Ent_Scope = T2.Key.Ref_Scope\n+            then\n+               return False;\n \n-         --  Sixth test: for same entity, sort by reference location unit\n+            --  Sixth test: for same entity, sort by reference location unit\n \n-         elsif T1.Key.Lun /= T2.Key.Lun then\n-            return Dependency_Num (T1.Key.Lun) < Dependency_Num (T2.Key.Lun);\n+            elsif T1.Key.Lun /= T2.Key.Lun then\n+               return Dependency_Num (T1.Key.Lun) <\n+                      Dependency_Num (T2.Key.Lun);\n \n-         --  Seventh test: for same entity, sort by reference location scope\n+            --  Seventh test: for same entity, sort by reference location scope\n \n-         elsif Get_Scope_Num (T1.Key.Ref_Scope) /=\n-               Get_Scope_Num (T2.Key.Ref_Scope)\n-         then\n-            return Get_Scope_Num (T1.Key.Ref_Scope) <\n-              Get_Scope_Num (T2.Key.Ref_Scope);\n+            elsif Get_Scope_Num (T1.Key.Ref_Scope) /=\n+                  Get_Scope_Num (T2.Key.Ref_Scope)\n+            then\n+               return Get_Scope_Num (T1.Key.Ref_Scope) <\n+                      Get_Scope_Num (T2.Key.Ref_Scope);\n \n-         --  Eighth test: order of location within referencing unit\n+            --  Eighth test: order of location within referencing unit\n \n-         elsif T1.Key.Loc /= T2.Key.Loc then\n-            return T1.Key.Loc < T2.Key.Loc;\n+            elsif T1.Key.Loc /= T2.Key.Loc then\n+               return T1.Key.Loc < T2.Key.Loc;\n \n-         --  Finally, for two locations at the same address prefer the one that\n-         --  does NOT have the type 'r', so that a modification or extension\n-         --  takes preference, when there are more than one reference at the\n-         --  same location. As a result, in the case of entities that are\n-         --  in-out actuals, the read reference follows the modify reference.\n+            --  Finally, for two locations at the same address prefer the one\n+            --  that does NOT have the type 'r', so that a modification or\n+            --  extension takes preference, when there are more than one\n+            --  reference at the same location. As a result, in the case of\n+            --  entities that are in-out actuals, the read reference follows\n+            --  the modify reference.\n \n-         else\n-            return T2.Key.Typ = 'r';\n+            else\n+               return T2.Key.Typ = 'r';\n+            end if;\n          end if;\n       end Lt;\n "}, {"sha": "e516ec0dc9948d683085866aa7c0ba7c856edfb8", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e228f7eed275e585d48c92dc87bde3dd0784e4d2/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e228f7eed275e585d48c92dc87bde3dd0784e4d2/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=e228f7eed275e585d48c92dc87bde3dd0784e4d2", "patch": "@@ -4404,9 +4404,6 @@ package body Sem_Ch12 is\n       Parent_Installed : Boolean := False;\n       Renaming_List    : List_Id;\n \n-      Save_Style_Check : constant Boolean := Style_Check;\n-      --  Save style check mode for restore on exit\n-\n       procedure Analyze_Instance_And_Renamings;\n       --  The instance must be analyzed in a context that includes the mappings\n       --  of generic parameters into actuals. We create a package declaration\n@@ -4587,11 +4584,13 @@ package body Sem_Ch12 is\n \n       Instantiation_Node := N;\n \n-      --  Turn off style checking in instances. If the check is enabled on the\n-      --  generic unit, a warning in an instance would just be noise. If not\n-      --  enabled on the generic, then a warning in an instance is just wrong.\n+      --  For package instantiations we turn off style checks, because they\n+      --  will have been emitted in the generic. For subprogram instantiations\n+      --  we want to apply at least the check on overriding indicators so we\n+      --  do not modify the style check status.\n \n-      Style_Check := False;\n+      --  The renaming declarations for the actuals do not come from source and\n+      --  will not generate spurious warnings.\n \n       Preanalyze_Actuals (N);\n \n@@ -4859,8 +4858,6 @@ package body Sem_Ch12 is\n          Generic_Renamings_HTable.Reset;\n       end if;\n \n-      Style_Check := Save_Style_Check;\n-\n    <<Leave>>\n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, Act_Decl_Id);\n@@ -4875,8 +4872,6 @@ package body Sem_Ch12 is\n          if Env_Installed then\n             Restore_Env;\n          end if;\n-\n-         Style_Check := Save_Style_Check;\n    end Analyze_Subprogram_Instantiation;\n \n    -------------------------"}, {"sha": "f9259053389170ab188aa895f5c98185d9b150f0", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e228f7eed275e585d48c92dc87bde3dd0784e4d2/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e228f7eed275e585d48c92dc87bde3dd0784e4d2/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=e228f7eed275e585d48c92dc87bde3dd0784e4d2", "patch": "@@ -11057,6 +11057,9 @@ package body Sem_Ch6 is\n       --  that an invariant check is required (for an IN OUT parameter, or\n       --  the returned value of a function.\n \n+      function Last_Implicit_Declaration return Node_Id;\n+      --  Return the last internally-generated declaration of N\n+\n       -------------\n       -- Grab_CC --\n       -------------\n@@ -11307,6 +11310,50 @@ package body Sem_Ch6 is\n          end if;\n       end Is_Public_Subprogram_For;\n \n+      -------------------------------\n+      -- Last_Implicit_Declaration --\n+      -------------------------------\n+\n+      function Last_Implicit_Declaration return Node_Id is\n+         Loc   : constant Source_Ptr := Sloc (N);\n+         Decls : List_Id := Declarations (N);\n+         Decl  : Node_Id;\n+         Succ  : Node_Id;\n+\n+      begin\n+         if No (Decls) then\n+            Decls := New_List (Make_Null_Statement (Loc));\n+            Set_Declarations (N, Decls);\n+\n+         elsif Is_Empty_List (Declarations (N)) then\n+            Append_To (Decls, Make_Null_Statement (Loc));\n+         end if;\n+\n+         --  Implicit and source declarations may be interspersed. Search for\n+         --  the last implicit declaration which is either succeeded by a\n+         --  source construct or is the last node in the declarative list.\n+\n+         Decl := First (Declarations (N));\n+         while Present (Decl) loop\n+            Succ := Next (Decl);\n+\n+            --  The current declaration is the last one, do not return Empty\n+\n+            if No (Succ) then\n+               exit;\n+\n+            --  The successor is a source construct\n+\n+            elsif Comes_From_Source (Succ) then\n+               exit;\n+            end if;\n+\n+            Next (Decl);\n+         end loop;\n+\n+         return Decl;\n+      end Last_Implicit_Declaration;\n+\n    --  Start of processing for Process_PPCs\n \n    begin\n@@ -11712,7 +11759,7 @@ package body Sem_Ch6 is\n             --  The entity for the _Postconditions procedure\n \n          begin\n-            Prepend_To (Declarations (N),\n+            Insert_After (Last_Implicit_Declaration,\n               Make_Subprogram_Body (Loc,\n                 Specification =>\n                   Make_Procedure_Specification (Loc,"}, {"sha": "b60370231b1982d3a111419435b16fe43b21c6d2", "filename": "gcc/ada/style.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e228f7eed275e585d48c92dc87bde3dd0784e4d2/gcc%2Fada%2Fstyle.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e228f7eed275e585d48c92dc87bde3dd0784e4d2/gcc%2Fada%2Fstyle.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyle.adb?ref=e228f7eed275e585d48c92dc87bde3dd0784e4d2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -236,7 +236,13 @@ package body Style is\n \n    procedure Missing_Overriding (N : Node_Id; E : Entity_Id) is\n    begin\n-      if Style_Check_Missing_Overriding and then Comes_From_Source (N) then\n+\n+      --  Perform the check on source subprograms and on subprogram instances,\n+      --  because these can be primitives of untagged types.\n+\n+      if Style_Check_Missing_Overriding\n+        and then (Comes_From_Source (N) or else Is_Generic_Instance (E))\n+      then\n          if Nkind (N) = N_Subprogram_Body then\n             Error_Msg_NE -- CODEFIX\n               (\"(style) missing OVERRIDING indicator in body of&\", N, E);"}]}