{"sha": "444dd946c86cf87a35e1cc6f1350182f339871a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ0ZGQ5NDZjODZjZjg3YTM1ZTFjYzZmMTM1MDE4MmYzMzk4NzFhNg==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2006-11-01T18:20:19Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2006-11-01T18:20:19Z"}, "message": "Location.java: New file.\n\n        * gnu/gcj/jvmti/Location.java: New file.\n        * gnu/gcj/jvmti/BreakpointManager.java: New file.\n        * jvmti.cc (_Jv_JVMTI_SetBreakpoint): New function.\n        (_Jv_JVMTI_ClearBreakpoint): New function.\n        (_Jv_JVMTI_Interface): Define SetBreakpoint and ClearBreakpoint.\n        * sources.am: Regenerated.\n        * Makefile.in: Regenerated.\n\nFrom-SVN: r118391", "tree": {"sha": "643906a19a9e931c1606a2d77b09af272b5296de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/643906a19a9e931c1606a2d77b09af272b5296de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/444dd946c86cf87a35e1cc6f1350182f339871a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/444dd946c86cf87a35e1cc6f1350182f339871a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/444dd946c86cf87a35e1cc6f1350182f339871a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/444dd946c86cf87a35e1cc6f1350182f339871a6/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5812d1e465a56fdf5caf31cbde5356a832d69d44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5812d1e465a56fdf5caf31cbde5356a832d69d44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5812d1e465a56fdf5caf31cbde5356a832d69d44"}], "stats": {"total": 228, "additions": 224, "deletions": 4}, "files": [{"sha": "8c3d985097a2f71f532add3c180b5bc5129acc13", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444dd946c86cf87a35e1cc6f1350182f339871a6/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444dd946c86cf87a35e1cc6f1350182f339871a6/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=444dd946c86cf87a35e1cc6f1350182f339871a6", "patch": "@@ -1,3 +1,13 @@\n+2006-11-01  Keith Seitz  <keiths@redhat.com>\n+\n+\t* gnu/gcj/jvmti/Location.java: New file.\n+\t* gnu/gcj/jvmti/BreakpointManager.java: New file.\n+\t* jvmti.cc (_Jv_JVMTI_SetBreakpoint): New function.\n+\t(_Jv_JVMTI_ClearBreakpoint): New function.\n+\t(_Jv_JVMTI_Interface): Define SetBreakpoint and ClearBreakpoint.\n+\t* sources.am: Regenerated.\n+\t* Makefile.in: Regenerated.\n+\n 2006-10-28  Keith Seitz  <keiths@redhat.com>\n \n \t* Makefile.am (nat_source_files): Add natBreakpoint.cc."}, {"sha": "d7692ac0949dda6451e19dd83cfd1a3497e0769a", "filename": "libjava/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444dd946c86cf87a35e1cc6f1350182f339871a6/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444dd946c86cf87a35e1cc6f1350182f339871a6/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=444dd946c86cf87a35e1cc6f1350182f339871a6", "patch": "@@ -1216,7 +1216,9 @@ gnu/gcj/io/SimpleSHSStream.java\n \n gnu_gcj_io_header_files = $(patsubst %.java,%.h,$(gnu_gcj_io_source_files))\n gnu_gcj_jvmti_source_files = \\\n-gnu/gcj/jvmti/Breakpoint.java\n+gnu/gcj/jvmti/Breakpoint.java \\\n+gnu/gcj/jvmti/BreakpointManager.java \\\n+gnu/gcj/jvmti/Location.java\n \n gnu_gcj_jvmti_header_files = $(patsubst %.java,%.h,$(gnu_gcj_jvmti_source_files))\n gnu_gcj_runtime_source_files = \\"}, {"sha": "205bf6d8a5bea7b22a4bb77a64783d6deaee2c07", "filename": "libjava/gnu/gcj/jvmti/BreakpointManager.java", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444dd946c86cf87a35e1cc6f1350182f339871a6/libjava%2Fgnu%2Fgcj%2Fjvmti%2FBreakpointManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444dd946c86cf87a35e1cc6f1350182f339871a6/libjava%2Fgnu%2Fgcj%2Fjvmti%2FBreakpointManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fjvmti%2FBreakpointManager.java?ref=444dd946c86cf87a35e1cc6f1350182f339871a6", "patch": "@@ -0,0 +1,76 @@\n+// BreakpointManager.java - A convenience class for dealing with breakpoints\n+\n+/* Copyright (C) 2006  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.jvmti;\n+\n+import java.util.Hashtable;\n+\n+/**\n+ * A class which manages breakpoints in the VM interpreter engine.\n+ *\n+ * BreakpointManager is a location manager that the interpreter\n+ * uses to lookup the original instruction for any given installed\n+ * breakpoint. JVMTI does not allow multiple breakpoints to be set\n+ * at any given location.\n+ *\n+ * @author Keith Seitz (keiths@redhat.com)\n+ */\n+public class BreakpointManager\n+{\n+  private static BreakpointManager _instance = new BreakpointManager ();\n+\n+  // List of breakpoints indexed by Location\n+  private Hashtable _breakpoints;\n+\n+  private BreakpointManager ()\n+  {\n+    _breakpoints = new Hashtable ();\n+  }\n+\n+  /**\n+   * Creates a new breakpoint. SetBreakpoint will verify the validity\n+   * of the arguments.\n+   *\n+   * @param method  method in which to set breakpoint (a jmethodID)\n+   * @param location index where the breakpoint is to be set (a jlocation)\n+   */\n+  public static Breakpoint newBreakpoint (long method, long location)\n+  {\n+    Breakpoint bp = new Breakpoint (method, location);\n+    Location loc = new Location (method, location);\n+    _instance._breakpoints.put (loc, bp);\n+    return bp;\n+  }\n+\n+  /**\n+   * Deletes the breakpoint at the given Location\n+   *\n+   * @param method method in which to clear breakpoint\n+   * @param location index of breakpoint in method\n+   */\n+  public static void deleteBreakpoint (long method, long location)\n+  {\n+    Location loc = new Location (method, location);\n+    _instance._breakpoints.remove (loc);\n+  }\n+\n+  /**\n+   * Returns the breakpoint at the given location or null if none installed\n+   * at location\n+   *\n+   * @param method the jmethodID of the breakpoint location\n+   * @param location the index in the method\n+   */\n+  public static Breakpoint getBreakpoint (long method, long location)\n+  {\n+    Location loc = new Location (method, location);\n+    return (Breakpoint) _instance._breakpoints.get (loc);\n+  }\n+}"}, {"sha": "8fae4dde7fc35f9a6898fe1950efe0ace13d0559", "filename": "libjava/gnu/gcj/jvmti/Location.java", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444dd946c86cf87a35e1cc6f1350182f339871a6/libjava%2Fgnu%2Fgcj%2Fjvmti%2FLocation.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444dd946c86cf87a35e1cc6f1350182f339871a6/libjava%2Fgnu%2Fgcj%2Fjvmti%2FLocation.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fjvmti%2FLocation.java?ref=444dd946c86cf87a35e1cc6f1350182f339871a6", "patch": "@@ -0,0 +1,60 @@\n+// Location.java - a wrapper class for breakpoint locations in JVMTI\n+\n+/* Copyright (C) 2006  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.jvmti;\n+\n+import java.lang.Long;\n+\n+/**\n+ * This class represents a breakpoint location (pair<jmethodID,jlocation>).\n+ * BreakpointManager uses this class as a key in the Map of installed\n+ * breakpoints.\n+ *\n+ * @author Keith Seitz (keiths@redhat.com)\n+ */\n+public class Location\n+{\n+  // method (a jmethodID in JVMTI)\n+  private long method;\n+\n+  // index (a jlocation in JVMTI)\n+  private long location;\n+\n+  /**\n+   * Constructor\n+   *\n+   * @param method   the method defined by this location (a jmethodID)\n+   * @param location the integer index of the insn in the method (a jlocation)\n+   */\n+  public Location (long method, long location)\n+  {\n+    this.method = method;\n+    this.location = location;\n+  }\n+\n+  public int hashCode ()\n+  {\n+    return toString ().hashCode ();\n+  }\n+\n+  public boolean equals (Object obj)\n+  {\n+    Location loc = (Location) obj;\n+    return (loc.method == method && loc.location == location);\n+  }\n+\n+  /**\n+   * Converts the Location to a String\n+   */\n+  public String toString ()\n+  {\n+    return Long.toHexString (method) + \".\" + Long.toString (location);\n+  }\n+}"}, {"sha": "5569551c2a30573bf5f92ee23125af8410a01b22", "filename": "libjava/jvmti.cc", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444dd946c86cf87a35e1cc6f1350182f339871a6/libjava%2Fjvmti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444dd946c86cf87a35e1cc6f1350182f339871a6/libjava%2Fjvmti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjvmti.cc?ref=444dd946c86cf87a35e1cc6f1350182f339871a6", "patch": "@@ -14,13 +14,17 @@ details.  */\n #include <jvm.h>\n #include <java-threads.h>\n #include <java-gc.h>\n+#include <java-interp.h>\n #include <jvmti.h>\n #include \"jvmti-int.h\"\n \n #include <gcj/method.h>\n \n #include <gnu/classpath/SystemProperties.h>\n #include <gnu/gcj/runtime/BootClassLoader.h>\n+#include <gnu/gcj/jvmti/Breakpoint.h>\n+#include <gnu/gcj/jvmti/BreakpointManager.h>\n+\n #include <java/lang/Class.h>\n #include <java/lang/ClassLoader.h>\n #include <java/lang/Object.h>\n@@ -279,6 +283,72 @@ _Jv_JVMTI_RawMonitorNotifyAll (MAYBE_UNUSED jvmtiEnv *env,\n   return JVMTI_ERROR_NONE;\n }\n \n+static jvmtiError JNICALL\n+_Jv_JVMTI_SetBreakpoint (jvmtiEnv *env, jmethodID method, jlocation location)\n+{\n+  REQUIRE_PHASE (env, JVMTI_PHASE_LIVE);\n+\n+  using namespace gnu::gcj::jvmti;\n+  Breakpoint *bp\n+    = BreakpointManager::getBreakpoint (reinterpret_cast<jlong> (method),\n+\t\t\t\t\tlocation);\n+  if (bp == NULL)\n+    {\n+      jclass klass;\n+      jvmtiError err = env->GetMethodDeclaringClass (method, &klass);\n+      if (err != JVMTI_ERROR_NONE)\n+\treturn err;\n+\n+      if (!_Jv_IsInterpretedClass (klass))\n+\treturn JVMTI_ERROR_INVALID_CLASS;\n+\n+      _Jv_MethodBase *base = _Jv_FindInterpreterMethod (klass, method);\n+      if (base == NULL)\n+\treturn JVMTI_ERROR_INVALID_METHODID;\n+\n+      jint flags;\n+      err = env->GetMethodModifiers (method, &flags);\n+      if (err != JVMTI_ERROR_NONE)\n+\treturn err;\n+\n+      if (flags & java::lang::reflect::Modifier::NATIVE)\n+\treturn JVMTI_ERROR_NATIVE_METHOD;\n+\n+      _Jv_InterpMethod *imeth = reinterpret_cast<_Jv_InterpMethod *> (base);\n+      if (imeth->get_insn (location) == NULL)\n+\treturn JVMTI_ERROR_INVALID_LOCATION;\n+\n+      // Now the breakpoint can be safely installed\n+      bp = BreakpointManager::newBreakpoint (reinterpret_cast<jlong> (method),\n+\t\t\t\t\t     location);\n+    }\n+  else\n+    {\n+      // Duplicate breakpoints are not permitted by JVMTI\n+      return JVMTI_ERROR_DUPLICATE;\n+    }\n+\n+  return JVMTI_ERROR_NONE;\n+}\n+\n+static jvmtiError JNICALL\n+_Jv_JVMTI_ClearBreakpoint (MAYBE_UNUSED jvmtiEnv *env, jmethodID method,\n+\t\t\t   jlocation location)\n+{\n+  REQUIRE_PHASE (env, JVMTI_PHASE_LIVE);\n+\n+  using namespace gnu::gcj::jvmti;\n+\n+  Breakpoint *bp\n+    = BreakpointManager::getBreakpoint (reinterpret_cast<jlong> (method),\n+\t\t\t\t\tlocation);\n+  if (bp == NULL)\n+    return JVMTI_ERROR_NOT_FOUND;\n+\n+  BreakpointManager::deleteBreakpoint (reinterpret_cast<jlong> (method), location);\n+  return JVMTI_ERROR_NONE;\n+}\n+\n static jvmtiError JNICALL\n _Jv_JVMTI_Allocate (MAYBE_UNUSED jvmtiEnv *env, jlong size,\n \t\t    unsigned char **result)\n@@ -1278,8 +1348,8 @@ struct _Jv_jvmtiEnv _Jv_JVMTI_Interface =\n   _Jv_JVMTI_RawMonitorWait,\t// RawMonitorWait\n   _Jv_JVMTI_RawMonitorNotify,\t// RawMonitorNotify\n   _Jv_JVMTI_RawMonitorNotifyAll, // RawMonitorNotifyAll\n-  UNIMPLEMENTED,\t\t// SetBreakpoint\n-  UNIMPLEMENTED,\t\t// ClearBreakpoint\n+  _Jv_JVMTI_SetBreakpoint,\t// SetBreakpoint\n+  _Jv_JVMTI_ClearBreakpoint,\t// ClearBreakpoint\n   RESERVED,\t\t\t// reserved40\n   UNIMPLEMENTED,\t\t// SetFieldAccessWatch\n   UNIMPLEMENTED,\t\t// ClearFieldAccessWatch"}, {"sha": "7cd9e26a59e4e835c163c0b6c8a29e9532dbb614", "filename": "libjava/sources.am", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444dd946c86cf87a35e1cc6f1350182f339871a6/libjava%2Fsources.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444dd946c86cf87a35e1cc6f1350182f339871a6/libjava%2Fsources.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsources.am?ref=444dd946c86cf87a35e1cc6f1350182f339871a6", "patch": "@@ -566,7 +566,9 @@ gnu/gcj/io.list: $(gnu_gcj_io_source_files)\n \n \n gnu_gcj_jvmti_source_files = \\\n-gnu/gcj/jvmti/Breakpoint.java\n+gnu/gcj/jvmti/Breakpoint.java \\\n+gnu/gcj/jvmti/BreakpointManager.java \\\n+gnu/gcj/jvmti/Location.java\n \n gnu_gcj_jvmti_header_files = $(patsubst %.java,%.h,$(gnu_gcj_jvmti_source_files))\n "}]}