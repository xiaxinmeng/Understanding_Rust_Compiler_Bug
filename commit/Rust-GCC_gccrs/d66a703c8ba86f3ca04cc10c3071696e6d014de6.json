{"sha": "d66a703c8ba86f3ca04cc10c3071696e6d014de6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY2YTcwM2M4YmE4NmYzY2EwNGNjMTBjMzA3MTY5NmU2ZDAxNGRlNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-07T07:25:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-07T07:25:37Z"}, "message": "tree-inline: Fix up __builtin_va_arg_pack handling [PR100898]\n\nThe following testcase ICEs, because gimple_call_arg_ptr (..., 0)\nasserts that there is at least one argument, while we were using\nit even if we didn't copy anything just to get a pointer from/to which\nthe zero arguments should be copied.\n\nFixed by guarding the memcpy calls.  Also, the code was calling\ngimple_call_num_args too many times - 5 times instead of 2, so the patch\nadds two temporaries for those.\n\n2021-06-07  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/100898\n\t* tree-inline.c (copy_bb): Only use gimple_call_arg_ptr if memcpy\n\tshould copy any arguments.  Don't call gimple_call_num_args\n\ton id->call_stmt or call_stmt more than once.\n\n\t* g++.dg/ext/va-arg-pack-3.C: New test.", "tree": {"sha": "b7aa12a7dde48a53c2a6b9dac21df6ca2531cadb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7aa12a7dde48a53c2a6b9dac21df6ca2531cadb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d66a703c8ba86f3ca04cc10c3071696e6d014de6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d66a703c8ba86f3ca04cc10c3071696e6d014de6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d66a703c8ba86f3ca04cc10c3071696e6d014de6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d66a703c8ba86f3ca04cc10c3071696e6d014de6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be5efe9c12cb852c788f74f8555e6ab8d755479b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be5efe9c12cb852c788f74f8555e6ab8d755479b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be5efe9c12cb852c788f74f8555e6ab8d755479b"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "0e8203ca173ae362fcacc39b0bdc6e573d10c7a0", "filename": "gcc/testsuite/g++.dg/ext/va-arg-pack-3.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66a703c8ba86f3ca04cc10c3071696e6d014de6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fva-arg-pack-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66a703c8ba86f3ca04cc10c3071696e6d014de6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fva-arg-pack-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fva-arg-pack-3.C?ref=d66a703c8ba86f3ca04cc10c3071696e6d014de6", "patch": "@@ -0,0 +1,18 @@\n+// PR middle-end/100898\n+\n+int a;\n+int bar (int, ...);\n+\n+static inline __attribute__((always_inline)) int\n+foo (...)\n+{\n+  while (a)\n+    return bar (0, __builtin_va_arg_pack ());\n+  return 0;\n+}\n+\n+void\n+baz (void)\n+{\n+  foo ();\n+}"}, {"sha": "4250fd86487f34cebc973d9d0562d45da35db4af", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66a703c8ba86f3ca04cc10c3071696e6d014de6/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66a703c8ba86f3ca04cc10c3071696e6d014de6/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=d66a703c8ba86f3ca04cc10c3071696e6d014de6", "patch": "@@ -2090,27 +2090,29 @@ copy_bb (copy_body_data *id, basic_block bb,\n \t      tree p;\n \t      gcall *new_call;\n \t      vec<tree> argarray;\n-\t      size_t nargs = gimple_call_num_args (id->call_stmt);\n-\t      size_t n;\n+\t      size_t nargs_caller = gimple_call_num_args (id->call_stmt);\n+\t      size_t nargs = nargs_caller;\n \n \t      for (p = DECL_ARGUMENTS (id->src_fn); p; p = DECL_CHAIN (p))\n \t\tnargs--;\n \n \t      /* Create the new array of arguments.  */\n-\t      n = nargs + gimple_call_num_args (call_stmt);\n+\t      size_t nargs_callee = gimple_call_num_args (call_stmt);\n+\t      size_t n = nargs + nargs_callee;\n \t      argarray.create (n);\n \t      argarray.safe_grow_cleared (n, true);\n \n \t      /* Copy all the arguments before '...'  */\n-\t      memcpy (argarray.address (),\n-\t\t      gimple_call_arg_ptr (call_stmt, 0),\n-\t\t      gimple_call_num_args (call_stmt) * sizeof (tree));\n+\t      if (nargs_callee)\n+\t\tmemcpy (argarray.address (),\n+\t\t\tgimple_call_arg_ptr (call_stmt, 0),\n+\t\t\tnargs_callee * sizeof (tree));\n \n \t      /* Append the arguments passed in '...'  */\n-\t      memcpy (argarray.address () + gimple_call_num_args (call_stmt),\n-\t\t      gimple_call_arg_ptr (id->call_stmt, 0)\n-\t\t      + (gimple_call_num_args (id->call_stmt) - nargs),\n-\t\t      nargs * sizeof (tree));\n+\t      if (nargs)\n+\t\tmemcpy (argarray.address () + nargs_callee,\n+\t\t\tgimple_call_arg_ptr (id->call_stmt, 0)\n+\t\t\t+ (nargs_caller - nargs), nargs * sizeof (tree));\n \n \t      new_call = gimple_build_call_vec (gimple_call_fn (call_stmt),\n \t\t\t\t\t\targarray);"}]}