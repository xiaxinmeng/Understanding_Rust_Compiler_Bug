{"sha": "feb675e4087d78e3a3a47d57a220773d80a6d747", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmViNjc1ZTQwODdkNzhlM2EzYTQ3ZDU3YTIyMDc3M2Q4MGE2ZDc0Nw==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-02-15T15:18:47Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-02-15T15:18:47Z"}, "message": "pa.c (pa_secondary_reload): Request a secondary reload for all floading point loads and stores except those...\n\n\t* config/pa/pa.c (pa_secondary_reload): Request a secondary reload\n\tfor all floading point loads and stores except those using a register\n\tindex address.\n\t* config/pa/pa.md: Add new patterns to load a lo_sum DLT operand\n\tto a register.\n\nFrom-SVN: r220716", "tree": {"sha": "468ceea4174a24c448ee4a2c7af0da90d6d9046d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/468ceea4174a24c448ee4a2c7af0da90d6d9046d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/feb675e4087d78e3a3a47d57a220773d80a6d747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feb675e4087d78e3a3a47d57a220773d80a6d747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feb675e4087d78e3a3a47d57a220773d80a6d747", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feb675e4087d78e3a3a47d57a220773d80a6d747/comments", "author": null, "committer": null, "parents": [{"sha": "dbf73e6e286d145ad3032c6efe0c9c35abd6ce63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbf73e6e286d145ad3032c6efe0c9c35abd6ce63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbf73e6e286d145ad3032c6efe0c9c35abd6ce63"}], "stats": {"total": 50, "additions": 39, "deletions": 11}, "files": [{"sha": "71822aa73a407a6fb01b4c228a8b730712a75ac4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feb675e4087d78e3a3a47d57a220773d80a6d747/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feb675e4087d78e3a3a47d57a220773d80a6d747/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=feb675e4087d78e3a3a47d57a220773d80a6d747", "patch": "@@ -1,3 +1,11 @@\n+2015-02-15  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/pa.c (pa_secondary_reload): Request a secondary reload\n+\tfor all floading point loads and stores except those using a register\n+\tindex address.\n+\t* config/pa/pa.md: Add new patterns to load a lo_sum DLT operand\n+\tto a register.\n+\n 2015-02-14  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline-analysis.c (growth_data): Add uninlinable field."}, {"sha": "15913dc9a7c9913c3bafb0341f47f5fbe50cb26c", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feb675e4087d78e3a3a47d57a220773d80a6d747/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feb675e4087d78e3a3a47d57a220773d80a6d747/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=feb675e4087d78e3a3a47d57a220773d80a6d747", "patch": "@@ -6031,18 +6031,15 @@ pa_secondary_reload (bool in_p, rtx x, reg_class_t rclass_i,\n \t{\n \t  x = XEXP (x, 0);\n \n-\t  /* We don't need an intermediate for indexed and LO_SUM DLT\n-\t     memory addresses.  When INT14_OK_STRICT is true, it might\n-\t     appear that we could directly allow register indirect\n-\t     memory addresses.  However, this doesn't work because we\n-\t     don't support SUBREGs in floating-point register copies\n-\t     and reload doesn't tell us when it's going to use a SUBREG.  */\n-\t  if (IS_INDEX_ADDR_P (x)\n-\t      || IS_LO_SUM_DLT_ADDR_P (x))\n+\t  /* We don't need a secondary reload for indexed memory addresses.\n+\n+\t     When INT14_OK_STRICT is true, it might appear that we could\n+\t     directly allow register indirect memory addresses.  However,\n+\t     this doesn't work because we don't support SUBREGs in\n+\t     floating-point register copies and reload doesn't tell us\n+\t     when it's going to use a SUBREG.  */\n+\t  if (IS_INDEX_ADDR_P (x))\n \t    return NO_REGS;\n-\n-\t  /* Request intermediate general register.  */\n-\t  return GENERAL_REGS;\n \t}\n \n       /* Request a secondary reload with a general scratch register"}, {"sha": "2fd2059fafe71c7a43e97fb82845cb323526c5c3", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feb675e4087d78e3a3a47d57a220773d80a6d747/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feb675e4087d78e3a3a47d57a220773d80a6d747/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=feb675e4087d78e3a3a47d57a220773d80a6d747", "patch": "@@ -2673,6 +2673,29 @@\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"4\")])\n \n+(define_insn \"\"\n+ [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+       (lo_sum:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t  (unspec:SI [(match_operand 2 \"\" \"\")] UNSPEC_DLTIND14R)))]\n+  \"symbolic_operand (operands[2], Pmode)\n+   && ! function_label_operand (operands[2], Pmode)\n+   && flag_pic\"\n+  \"ldo RT'%G2(%1),%0\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"\"\n+ [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+       (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t  (unspec:DI [(match_operand 2 \"\" \"\")] UNSPEC_DLTIND14R)))]\n+  \"symbolic_operand (operands[2], Pmode)\n+   && ! function_label_operand (operands[2], Pmode)\n+   && TARGET_64BIT\n+   && flag_pic\"\n+  \"ldo RT'%G2(%1),%0\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"4\")])\n+\n ;; Always use addil rather than ldil;add sequences.  This allows the\n ;; HP linker to eliminate the dp relocation if the symbolic operand\n ;; lives in the TEXT space."}]}