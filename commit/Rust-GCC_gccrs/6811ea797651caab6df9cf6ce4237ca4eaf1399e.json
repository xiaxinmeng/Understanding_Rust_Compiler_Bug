{"sha": "6811ea797651caab6df9cf6ce4237ca4eaf1399e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgxMWVhNzk3NjUxY2FhYjZkZjljZjZjZTQyMzdjYTRlYWYxMzk5ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-09-21T07:38:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-09-21T07:38:33Z"}, "message": "re PR tree-optimization/77648 (Setting conversion to a integer to double to 0 3/4 through a loop)\n\n2016-09-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/77648\n\t* tree-ssa-structalias.c (process_constraint): Handle all DEREF\n\twith complex RHS.\n\t(make_transitive_closure_constraints): Adjust comment.\n\t(make_any_offset_constraints): New function.\n\t(handle_rhs_call): Make sure to first expand a pointer to all\n\tsubfields before transitively closing it.\n\t(handle_const_call): Likewise.  Properly expand returned\n\tpointers as well.\n\t(handle_pure_call): Likewise.\n\n\t* gcc.dg/torture/pr77648-1.c: New testcase.\n\t* gcc.dg/torture/pr77648-2.c: Likewise.\n\nFrom-SVN: r240303", "tree": {"sha": "36c2c41787ff92e38461f73aa58c90f4c18f8a37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36c2c41787ff92e38461f73aa58c90f4c18f8a37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6811ea797651caab6df9cf6ce4237ca4eaf1399e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6811ea797651caab6df9cf6ce4237ca4eaf1399e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6811ea797651caab6df9cf6ce4237ca4eaf1399e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6811ea797651caab6df9cf6ce4237ca4eaf1399e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f955c4c4837a491a8e8c3962867f276a94125dde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f955c4c4837a491a8e8c3962867f276a94125dde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f955c4c4837a491a8e8c3962867f276a94125dde"}], "stats": {"total": 123, "additions": 107, "deletions": 16}, "files": [{"sha": "7fe08476e546b980274fa6ad7b4c6c616f930b81", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6811ea797651caab6df9cf6ce4237ca4eaf1399e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6811ea797651caab6df9cf6ce4237ca4eaf1399e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6811ea797651caab6df9cf6ce4237ca4eaf1399e", "patch": "@@ -1,3 +1,16 @@\n+2016-09-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/77648\n+\t* tree-ssa-structalias.c (process_constraint): Handle all DEREF\n+\twith complex RHS.\n+\t(make_transitive_closure_constraints): Adjust comment.\n+\t(make_any_offset_constraints): New function.\n+\t(handle_rhs_call): Make sure to first expand a pointer to all\n+\tsubfields before transitively closing it.\n+\t(handle_const_call): Likewise.  Properly expand returned\n+\tpointers as well.\n+\t(handle_pure_call): Likewise.\n+\n 2016-09-21  Richard Biener  <rguenther@suse.de>\n \tJakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "1444019a7d31dc38b51371d07d82d68c23fbe60d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6811ea797651caab6df9cf6ce4237ca4eaf1399e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6811ea797651caab6df9cf6ce4237ca4eaf1399e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6811ea797651caab6df9cf6ce4237ca4eaf1399e", "patch": "@@ -1,3 +1,9 @@\n+2016-09-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/77648\n+\t* gcc.dg/torture/pr77648-1.c: New testcase.\n+\t* gcc.dg/torture/pr77648-2.c: Likewise.\n+\n 2016-09-21  Richard Biener  <rguenther@suse.de>\n \tJakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "3597e2ed4567e48b9cd8d92c7b4cd57a8e2a4918", "filename": "gcc/testsuite/gcc.dg/torture/pr77648-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6811ea797651caab6df9cf6ce4237ca4eaf1399e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77648-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6811ea797651caab6df9cf6ce4237ca4eaf1399e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77648-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77648-1.c?ref=6811ea797651caab6df9cf6ce4237ca4eaf1399e", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+\n+struct S { int *p; int *q; };\n+\n+int **__attribute__((noinline,noclone,pure)) foo (struct S *s)\n+{\n+  int tem;\n+  __asm__ (\"\" : \"=g\" (tem) : \"g\" (s->p));\n+  return &s->q;\n+}\n+\n+int main()\n+{\n+  struct S s;\n+  int i = 1, j = 2;\n+  int **x;\n+  s.p = &i;\n+  s.q = &j;\n+  x = foo (&s);\n+  **x = 7;\n+  if (j != 7)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "1c3734d34d8b3166d9c71fda2674df09f929cb74", "filename": "gcc/testsuite/gcc.dg/torture/pr77648-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6811ea797651caab6df9cf6ce4237ca4eaf1399e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77648-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6811ea797651caab6df9cf6ce4237ca4eaf1399e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77648-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77648-2.c?ref=6811ea797651caab6df9cf6ce4237ca4eaf1399e", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+\n+struct S { int *p; int *q; };\n+\n+int **__attribute__((noinline,noclone,const)) foo (struct S *s)\n+{\n+  return &s->q;\n+}\n+\n+int main()\n+{\n+  struct S s;\n+  int i = 1, j = 2;\n+  int **x;\n+  s.p = &i;\n+  s.q = &j;\n+  x = foo (&s);\n+  **x = 7;\n+  if (j != 7)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "be892fd947232641716ce851f4cc7f53d7cca453", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6811ea797651caab6df9cf6ce4237ca4eaf1399e/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6811ea797651caab6df9cf6ce4237ca4eaf1399e/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=6811ea797651caab6df9cf6ce4237ca4eaf1399e", "patch": "@@ -3010,7 +3010,7 @@ process_constraint (constraint_t t)\n       process_constraint (new_constraint (tmplhs, rhs));\n       process_constraint (new_constraint (lhs, tmplhs));\n     }\n-  else if (rhs.type == ADDRESSOF && lhs.type == DEREF)\n+  else if ((rhs.type != SCALAR || rhs.offset != 0) && lhs.type == DEREF)\n     {\n       /* Split into tmp = &rhs, *lhs = tmp */\n       struct constraint_expr tmplhs;\n@@ -3747,7 +3747,7 @@ make_transitive_closure_constraints (varinfo_t vi)\n {\n   struct constraint_expr lhs, rhs;\n \n-  /* VAR = *VAR;  */\n+  /* VAR = *(VAR + UNKNOWN);  */\n   lhs.type = SCALAR;\n   lhs.var = vi->id;\n   lhs.offset = 0;\n@@ -3757,6 +3757,23 @@ make_transitive_closure_constraints (varinfo_t vi)\n   process_constraint (new_constraint (lhs, rhs));\n }\n \n+/* Add constraints to that the solution of VI has all subvariables added.  */\n+\n+static void\n+make_any_offset_constraints (varinfo_t vi)\n+{\n+  struct constraint_expr lhs, rhs;\n+\n+  /* VAR = VAR + UNKNOWN;  */\n+  lhs.type = SCALAR;\n+  lhs.var = vi->id;\n+  lhs.offset = 0;\n+  rhs.type = SCALAR;\n+  rhs.var = vi->id;\n+  rhs.offset = UNKNOWN_OFFSET;\n+  process_constraint (new_constraint (lhs, rhs));\n+}\n+\n /* Temporary storage for fake var decls.  */\n struct obstack fake_var_decl_obstack;\n \n@@ -3902,15 +3919,12 @@ handle_rhs_call (gcall *stmt, vec<ce_s> *results)\n \t   && (flags & EAF_NOESCAPE))\n \t{\n \t  varinfo_t uses = get_call_use_vi (stmt);\n+\t  varinfo_t tem = new_var_info (NULL_TREE, \"callarg\", true);\n+\t  make_constraint_to (tem->id, arg);\n+\t  make_any_offset_constraints (tem);\n \t  if (!(flags & EAF_DIRECT))\n-\t    {\n-\t      varinfo_t tem = new_var_info (NULL_TREE, \"callarg\", true);\n-\t      make_constraint_to (tem->id, arg);\n-\t      make_transitive_closure_constraints (tem);\n-\t      make_copy_constraint (uses, tem->id);\n-\t    }\n-\t  else\n-\t    make_constraint_to (uses->id, arg);\n+\t    make_transitive_closure_constraints (tem);\n+\t  make_copy_constraint (uses, tem->id);\n \t  returns_uses = true;\n \t}\n       else if (flags & EAF_NOESCAPE)\n@@ -3920,6 +3934,7 @@ handle_rhs_call (gcall *stmt, vec<ce_s> *results)\n \t  varinfo_t clobbers = get_call_clobber_vi (stmt);\n \t  varinfo_t tem = new_var_info (NULL_TREE, \"callarg\", true);\n \t  make_constraint_to (tem->id, arg);\n+\t  make_any_offset_constraints (tem);\n \t  if (!(flags & EAF_DIRECT))\n \t    make_transitive_closure_constraints (tem);\n \t  make_copy_constraint (uses, tem->id);\n@@ -3945,7 +3960,7 @@ handle_rhs_call (gcall *stmt, vec<ce_s> *results)\n   if (returns_uses)\n     {\n       rhsc.var = get_call_use_vi (stmt)->id;\n-      rhsc.offset = 0;\n+      rhsc.offset = UNKNOWN_OFFSET;\n       rhsc.type = SCALAR;\n       results->safe_push (rhsc);\n     }\n@@ -4054,6 +4069,7 @@ handle_const_call (gcall *stmt, vec<ce_s> *results)\n   if (gimple_call_chain (stmt))\n     {\n       varinfo_t uses = get_call_use_vi (stmt);\n+      make_any_offset_constraints (uses);\n       make_transitive_closure_constraints (uses);\n       make_constraint_to (uses->id, gimple_call_chain (stmt));\n       rhsc.var = uses->id;\n@@ -4062,16 +4078,24 @@ handle_const_call (gcall *stmt, vec<ce_s> *results)\n       results->safe_push (rhsc);\n     }\n \n-  /* May return arguments.  */\n+  /* May return offsetted arguments.  */\n+  varinfo_t tem = NULL;\n+  if (gimple_call_num_args (stmt) != 0)\n+    tem = new_var_info (NULL_TREE, \"callarg\", true);\n   for (k = 0; k < gimple_call_num_args (stmt); ++k)\n     {\n       tree arg = gimple_call_arg (stmt, k);\n       auto_vec<ce_s> argc;\n-      unsigned i;\n-      struct constraint_expr *argp;\n       get_constraint_for_rhs (arg, &argc);\n-      FOR_EACH_VEC_ELT (argc, i, argp)\n-\tresults->safe_push (*argp);\n+      make_constraints_to (tem->id, argc);\n+    }\n+  if (tem)\n+    {\n+      ce_s ce;\n+      ce.type = SCALAR;\n+      ce.var = tem->id;\n+      ce.offset = UNKNOWN_OFFSET;\n+      results->safe_push (ce);\n     }\n \n   /* May return addresses of globals.  */\n@@ -4098,6 +4122,7 @@ handle_pure_call (gcall *stmt, vec<ce_s> *results)\n       if (!uses)\n \t{\n \t  uses = get_call_use_vi (stmt);\n+\t  make_any_offset_constraints (uses);\n \t  make_transitive_closure_constraints (uses);\n \t}\n       make_constraint_to (uses->id, arg);\n@@ -4109,6 +4134,7 @@ handle_pure_call (gcall *stmt, vec<ce_s> *results)\n       if (!uses)\n \t{\n \t  uses = get_call_use_vi (stmt);\n+\t  make_any_offset_constraints (uses);\n \t  make_transitive_closure_constraints (uses);\n \t}\n       make_constraint_to (uses->id, gimple_call_chain (stmt));"}]}