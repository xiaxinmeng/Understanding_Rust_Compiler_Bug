{"sha": "8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQzM2EyNWUyYTdlZDZkZjBmOWJlOWNiODlhMjc0OGQ3NzY4ZjJkNw==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@TechFak.Uni-Bielefeld.DE", "date": "2002-06-20T11:03:40Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2002-06-20T11:03:40Z"}, "message": "sol2.h: New file.\n\n\t* config/sol2.h: New file.\n\t* config.gcc (i?86-*-solaris2*): Include it before i386/sol2.h.\n\t(sparc64-wrs-vxworks*): Include it before sparc/sol2.h.\n\t(sparc-*-chorusos*): Likewise.\n\t(sparc-*-elf*): Likewise.\n\t(sparc-*-rtems*, sparc-*-rtemself*): Likewise.\n\t(sparc64-*-solaris2*, sparcv9-*-solaris2*): Likewise.\n\t(sparc-hal-solaris2*): Likewise.\n\t(sparc-*-solaris2*): Likewise.\n\t(sparclite-*-elf*): Likewise.\n\t(sparc86x-*-elf*): Likewise.\n\t(sparc64-*-elf*): Likewise.\n\n\t* config/i386/sol2.h (PREFERRED_DEBUGGING_TYPE): Moved to\n\tconfig/sol2.h.\n\t(ASM_SPEC): Override config/sol2.h version for now.\n\tRemoved obsolete GAS_REJECTS_MINUS_S variant.\n\t(WINT_TYPE, WINT_TYPE_SIZE): Moved to config/sol2.h.\n\t(HANDLE_PRAGMA_REDEFINE_EXTNAME): Likewise.\n\t(TARGET_OS_CPP_BUILTINS): Likewise.\n\tAssert system=unix.\n\t(CPP_SPEC): Simplified using new CPP_SUBTARGET_SPEC.\n\t(LIB_SPEC, ENDFILE_SPEC, STARTFILE_SPEC, LINK_SPEC): Moved to\n\tconfig/sol2.h.\n\t(SWITCH_TAKES_ARG, STDC_0_IN_SYSTEM_HEADERS): Likewise.\n\t(ASM_CPU_SPEC): Define.\n\t(SUBTARGET_EXTRA_SPECS): Define.\n\n\t* config/sparc/sol2-bi.h (LONG_DOUBLE_TYPE_SIZE): Removed, already\n\tin config/sparc/sol2.h.\n\t(ASM_SPEC): Moved to config/sol2.h.\n\t(CPP_CPU_SPEC): Simplified.\n\t(STARTFILE_SPEC32): Likewise, renamed to STARTFILE_ARCH32_SPEC for\n\tconsistency.\n\t(STARTFILE_SPEC64): Renamed to STARTFILE_ARCH64_SPEC.\n\t(STARTFILE_ARCH_SPEC): Use new names STARTFILE_ARCH32_SPEC,\n\tSTARTFILE_ARCH64_SPEC.\n\t(STARTFILE_SPEC): Moved to config/sol2.h\n\t(SUBTARGET_EXTRA_SPECS): Add startfile_arch.\n\t(LINK_ARCH32_SPEC): Moved to config/sol2.h.\n\t(LINK_ARCH64_SPEC): Simplified.\n\t(LINK_ARCH_SPEC): Redefined config/sol2.h version for 64-bit support.\n\t(LINK_SPEC): Moved to config/sol2.h\n\n\t* config/sparc/sol2.h (WCHAR_TYPE, WCHAR_TYPE_SIZE): Moved to\n\tconfig/sol2.h.\n\tUse BITS_PER_WORD for size.\n\t(WINT_TYPE, WINT_TYPE_SIZE): Likewise.\n\t(HANDLE_PRAGMA_REDEFINE_EXTNAME): Likewise.\n\t(CPP_PREDEFINES): Removed OS-specific part handled by\n\tTARGET_OS_CPP_BUILTINS.\n\t(CPP_SUBTARGET_SPEC): Moved to config/sol2.h.\n\t(CPLUSPLUS_CPP_SPEC): Removed, handled by TARGET_OS_CPP_BUILTINS.\n\t(ASM_SPEC): Moved to config/sol2.h.\n\t(PREFERRED_DEBUGGING_TYPE): Likewise.\n\t(STARTFILE_SPEC, LIB_SPEC, LINK_SPEC): Likewise.\n\t(SWITCH_TAKES_ARG, STDC_0_IN_SYSTEM_HEADERS): Likewise.\n\t(TARGET_DEFAULT): Reordered to match config/sparc/sol2-bi.h version.\n\t(TRANSFER_FROM_TRAMPOLINE): Moved to config/sol2.h\n\n\t* config.gcc (i?86-*-solaris2*): Removed obsolete gas support.\n\t* config/i386/sol2gas.h: Removed.\n\nFrom-SVN: r54827", "tree": {"sha": "747c1ea3be674ad1a8e00aa85b25281ee017bc51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/747c1ea3be674ad1a8e00aa85b25281ee017bc51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7/comments", "author": null, "committer": null, "parents": [{"sha": "b6bb1d561836b8939f3b289f596348f0ea4ab06d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6bb1d561836b8939f3b289f596348f0ea4ab06d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6bb1d561836b8939f3b289f596348f0ea4ab06d"}], "stats": {"total": 698, "additions": 323, "deletions": 375}, "files": [{"sha": "e421e41ffbbb44ccef3cbc89ee133df590db64ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7", "patch": "@@ -1,3 +1,68 @@\n+2002-06-20  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\t* config/sol2.h: New file.\n+\t* config.gcc (i?86-*-solaris2*): Include it before i386/sol2.h.\n+\t(sparc64-wrs-vxworks*): Include it before sparc/sol2.h.\n+\t(sparc-*-chorusos*): Likewise.\n+\t(sparc-*-elf*): Likewise.\n+\t(sparc-*-rtems*, sparc-*-rtemself*): Likewise.\n+\t(sparc64-*-solaris2*, sparcv9-*-solaris2*): Likewise.\n+\t(sparc-hal-solaris2*): Likewise.\n+\t(sparc-*-solaris2*): Likewise.\n+\t(sparclite-*-elf*): Likewise.\n+\t(sparc86x-*-elf*): Likewise.\n+\t(sparc64-*-elf*): Likewise.\n+\t\n+\t* config/i386/sol2.h (PREFERRED_DEBUGGING_TYPE): Moved to\n+\tconfig/sol2.h.\n+\t(ASM_SPEC): Override config/sol2.h version for now.\n+\tRemoved obsolete GAS_REJECTS_MINUS_S variant.\n+\t(WINT_TYPE, WINT_TYPE_SIZE): Moved to config/sol2.h.\n+\t(HANDLE_PRAGMA_REDEFINE_EXTNAME): Likewise.\n+\t(TARGET_OS_CPP_BUILTINS): Likewise.\n+\tAssert system=unix.\n+\t(CPP_SPEC): Simplified using new CPP_SUBTARGET_SPEC.\n+\t(LIB_SPEC, ENDFILE_SPEC, STARTFILE_SPEC, LINK_SPEC): Moved to\n+\tconfig/sol2.h.\n+\t(SWITCH_TAKES_ARG, STDC_0_IN_SYSTEM_HEADERS): Likewise.\n+\t(ASM_CPU_SPEC): Define.\n+\t(SUBTARGET_EXTRA_SPECS): Define.\n+\t\n+\t* config/sparc/sol2-bi.h (LONG_DOUBLE_TYPE_SIZE): Removed, already\n+\tin config/sparc/sol2.h.\n+\t(ASM_SPEC): Moved to config/sol2.h.\n+\t(CPP_CPU_SPEC): Simplified.\n+\t(STARTFILE_SPEC32): Likewise, renamed to STARTFILE_ARCH32_SPEC for\n+\tconsistency.\n+\t(STARTFILE_SPEC64): Renamed to STARTFILE_ARCH64_SPEC.\n+\t(STARTFILE_ARCH_SPEC): Use new names STARTFILE_ARCH32_SPEC,\n+\tSTARTFILE_ARCH64_SPEC.\n+\t(STARTFILE_SPEC): Moved to config/sol2.h\n+\t(SUBTARGET_EXTRA_SPECS): Add startfile_arch.\n+\t(LINK_ARCH32_SPEC): Moved to config/sol2.h.\n+\t(LINK_ARCH64_SPEC): Simplified.\n+\t(LINK_ARCH_SPEC): Redefined config/sol2.h version for 64-bit support.\n+\t(LINK_SPEC): Moved to config/sol2.h\n+\t\n+\t* config/sparc/sol2.h (WCHAR_TYPE, WCHAR_TYPE_SIZE): Moved to\n+\tconfig/sol2.h.\n+\tUse BITS_PER_WORD for size.\n+\t(WINT_TYPE, WINT_TYPE_SIZE): Likewise.\n+\t(HANDLE_PRAGMA_REDEFINE_EXTNAME): Likewise.\n+\t(CPP_PREDEFINES): Removed OS-specific part handled by\n+\tTARGET_OS_CPP_BUILTINS.\n+\t(CPP_SUBTARGET_SPEC): Moved to config/sol2.h.\n+\t(CPLUSPLUS_CPP_SPEC): Removed, handled by TARGET_OS_CPP_BUILTINS.\n+\t(ASM_SPEC): Moved to config/sol2.h.\n+\t(PREFERRED_DEBUGGING_TYPE): Likewise.\n+\t(STARTFILE_SPEC, LIB_SPEC, LINK_SPEC): Likewise.\n+\t(SWITCH_TAKES_ARG, STDC_0_IN_SYSTEM_HEADERS): Likewise.\n+\t(TARGET_DEFAULT): Reordered to match config/sparc/sol2-bi.h version.\n+\t(TRANSFER_FROM_TRAMPOLINE): Moved to config/sol2.h\n+\t\n+\t* config.gcc (i?86-*-solaris2*): Removed obsolete gas support.\n+\t* config/i386/sol2gas.h: Removed.\n+\n Thu Jun 20 12:14:01 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (xorqi_1_slp, xorqi_2_slp): New patterns."}, {"sha": "8b81ac2e6a5f1746adeb608c0626bb00447ea25b", "filename": "gcc/config.gcc", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7", "patch": "@@ -1190,10 +1190,7 @@ i[34567]86-*-sco3.2v5*)\t# 80386 running SCO Open Server 5\n \t;;\n i[34567]86-*-solaris2*)\n \txm_defines=\"POSIX SMALL_ARG_MAX\"\n-\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h svr4.h i386/sysv4.h i386/sol2.h\"\n-\tif test x$gas = xyes; then\n-\t\ttm_file=\"i386/sol2gas.h ${tm_file}\"\n-\tfi\n+\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h svr4.h i386/sysv4.h sol2.h i386/sol2.h\"\n \ttmake_file=\"i386/t-sol2 t-svr4\"\n \tif test x$gnu_ld = xyes; then\n \t\ttmake_file=\"$tmake_file t-slibgcc-elf-ver\"\n@@ -2313,7 +2310,7 @@ sparc-tti-*)\n \txm_defines=POSIX\n \t;;\n sparc64-wrs-vxworks*)\n-        tm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/elf.h sparc/biarch64.h gofast.h sparc/vxsparc64.h\"\n+        tm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/elf.h sparc/biarch64.h gofast.h sparc/vxsparc64.h\"\n         tmake_file=\"sparc/t-vxsparc64 sparc/t-crtfm\"\n         use_collect2=yes\n         ;;\n@@ -2353,7 +2350,7 @@ sparc-*-bsd*)\n \ttm_file=\"${tm_file} sparc/bsd.h\"\n \t;;\n sparc-*-chorusos*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/elf.h chorus.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/elf.h chorus.h\"\n \ttmake_file=\"sparc/t-chorus-elf sparc/t-crtfm\"\n \textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \tfloat_format=i64\n@@ -2364,7 +2361,7 @@ sparc-*-chorusos*)\n \tesac\n \t;;\n sparc-*-elf*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/elf.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/elf.h\"\n \ttmake_file=\"sparc/t-elf sparc/t-crtfm\"\n \textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \t#float_format=i128\n@@ -2406,7 +2403,7 @@ sparc-*-rtemsaout*)\t# would otherwise be caught by sparc-*-rtems*\n \t;;\n sparc-*-rtems*)\n \txm_defines=POSIX\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/elf.h sparc/rtemself.h rtems.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/elf.h sparc/rtemself.h rtems.h\"\n \ttmake_file=\"sparc/t-elf sparc/t-crtfm t-rtems\"\n \textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \t#float_format=i128\n@@ -2416,7 +2413,7 @@ sparc-*-rtems*)\n \tfi\n \t;;\n sparc64-*-solaris2* | sparcv9-*-solaris2*)\n-\ttm_file=\"sparc/biarch64.h ${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/sol2-64.h sparc/sol2-bi.h\"\n+\ttm_file=\"sparc/biarch64.h ${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/sol2-64.h sparc/sol2-bi.h\"\n \tif test x$gnu_ld = xyes; then\n \t\ttm_file=\"${tm_file} sparc/sol2-gld.h sparc/sol2-gld-bi.h\"\n \tfi\n@@ -2448,7 +2445,7 @@ sparc64-*-solaris2* | sparcv9-*-solaris2*)\n \t;;\n sparc-hal-solaris2*)\n         xm_defines=POSIX\n-        tm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/hal.h\"\n+        tm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/hal.h\"\n         tmake_file=\"sparc/t-halos sparc/t-sol2 sparc/t-crtfm\"\n \tif test x$gnu_ld = xyes; then\n \t\ttm_file=\"${tm_file} sparc/sol2-gld.h\"\n@@ -2461,7 +2458,7 @@ sparc-hal-solaris2*)\n \tthread_file='solaris'\n         ;;\n sparc-*-solaris2*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sol2.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h\"\n \tif test x$gnu_ld = xyes; then\n \t\ttm_file=\"${tm_file} sparc/sol2-gld.h\"\n \tfi\n@@ -2545,7 +2542,7 @@ sparclite-*-aout*)\n \ttmake_file=sparc/t-sparclite\n \t;;\n sparclite-*-elf*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/elf.h gofast.h sparc/liteelf.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/elf.h gofast.h sparc/liteelf.h\"\n \ttmake_file=\"sparc/t-sparclite sparc/t-crtfm\"\n         extra_parts=\"crtbegin.o crtend.o\"\n \t;;\n@@ -2554,15 +2551,15 @@ sparc86x-*-aout*)\n \ttmake_file=sparc/t-sp86x\n \t;;\n sparc86x-*-elf*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/elf.h gofast.h sparc/sp86x-elf.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/elf.h gofast.h sparc/sp86x-elf.h\"\n \ttmake_file=\"sparc/t-sp86x sparc/t-crtfm\"\n         extra_parts=\"crtbegin.o crtend.o\"\n \t;;\n sparc64-*-aout*)\n \ttm_file=\"sparc/sparc.h aoutos.h sparc/aout.h sparc/sp64-aout.h\"\n \t;;\n sparc64-*-elf*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/sp64-elf.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/sp64-elf.h\"\n \ttmake_file=\"${tmake_file} sparc/t-crtfm\"\n \textra_parts=\"crtbegin.o crtend.o\"\n \t;;"}, {"sha": "fb5a184d65bfa4f0078042d00b68016fff25fcd5", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 17, "deletions": 117, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7", "patch": "@@ -20,36 +20,8 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-\n-/* We use stabs-in-elf for debugging, because that is what the native\n-   toolchain uses.  */\n-#undef PREFERRED_DEBUGGING_TYPE\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n-\n-#if ! GAS_REJECTS_MINUS_S\n-\n-/*\n-  Changed from config/svr4.h in the following ways:\n-\n-  - Removed -Yd (neither the sun bundled assembler nor gas accept it).\n-  - Added \"-s\" so that stabs are not discarded.\n-*/\n-\n-#undef ASM_SPEC\n-#define ASM_SPEC \\\n-  \"%{v:-V} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s\"\n-\n #define CMOV_SUN_AS_SYNTAX 1\n \n-#else /* GAS_REJECTS_MINUS_S */\n-\n-/* Same as above, except for -s, unsupported by GNU as.  */\n-#undef ASM_SPEC\n-#define ASM_SPEC \\\n-  \"%{v:-V} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Wa,*:%*}\"\n-\n-#endif /* GAS_REJECTS_MINUS_S */\n-\n /* The Solaris 2.0 x86 linker botches alignment of code sections.\n    It tries to align to a 16 byte boundary by padding with 0x00000090\n    ints, rather than 0x90 bytes (nop).  This generates trash in the\n@@ -68,98 +40,26 @@ Boston, MA 02111-1307, USA.  */\n   (flag_pic ? (GLOBAL ? DW_EH_PE_indirect : 0) | DW_EH_PE_datarel\t\\\n    : DW_EH_PE_absptr)\n \n-/* Solaris 2/Intel uses a wint_t different from the default, as on SPARC.  */\n-#undef\tWINT_TYPE\n-#define\tWINT_TYPE \"long int\"\n-\n-#undef\tWINT_TYPE_SIZE\n-#define\tWINT_TYPE_SIZE BITS_PER_WORD\n-\n-#define HANDLE_PRAGMA_REDEFINE_EXTNAME 1\n-\n-#define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-\tbuiltin_define_std (\"unix\");\t\t\t\\\n-\tbuiltin_define_std (\"sun\");\t\t\t\\\n-\tbuiltin_define (\"__svr4__\");\t\t\t\\\n-\tbuiltin_define (\"__SVR4\");\t\t\t\\\n-\tbuiltin_define (\"__PRAGMA_REDEFINE_EXTNAME\");\t\\\n-\tbuiltin_assert (\"system=svr4\");\t\t\t\\\n-\t/* For C++ we must add some additional macros\t\\\n-\t   required by the C++ standard library.  */\t\\\n-\tif (c_language == clk_cplusplus)\t\t\\\n-\t  {\t\t\t\t\t\t\\\n-\t    builtin_define (\"_XOPEN_SOURCE=500\");\t\\\n-\t    builtin_define (\"_LARGEFILE_SOURCE=1\");\t\\\n-\t    builtin_define (\"_LARGEFILE64_SOURCE=1\");\t\\\n-\t    builtin_define (\"-D__EXTENSIONS__\");\t\\\n-\t  }\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)\n-\n /* Solaris 2/Intel as chokes on #line directives.  */\n #undef CPP_SPEC\n-#define CPP_SPEC \\\n-  \"%{.S:-P} \\\n-   %{pthreads:-D_REENTRANT -D_PTHREADS} \\\n-   %{!pthreads:%{threads:-D_REENTRANT -D_SOLARIS_THREADS}} \\\n-   %{compat-bsd:-iwithprefixbefore ucbinclude -I/usr/ucbinclude}\"\n-\n-#undef LIB_SPEC\n-#define LIB_SPEC \\\n-  \"%{compat-bsd:-lucb -lsocket -lnsl -lelf -laio} \\\n-   %{!shared:\\\n-     %{!symbolic:\\\n-       %{pthreads:-lpthread} \\\n-       %{!pthreads:%{threads:-lthread}} \\\n-       -lc}}\"\n+#define CPP_SPEC \"%{.S:-P} %(cpp_subtarget)\"\n \n-#undef  ENDFILE_SPEC\n-#define ENDFILE_SPEC \"crtend.o%s %{pg:crtn.o%s}%{!pg:crtn.o%s}\"\n-\n-#undef\tSTARTFILE_SPEC\n-#define STARTFILE_SPEC \"%{!shared: \\\n-\t\t\t %{!symbolic: \\\n-\t\t\t  %{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s}%{!p:crt1.o%s}}}}\\\n-\t\t\t%{pg:gmon.o%s} crti.o%s \\\n-\t\t\t%{ansi:values-Xc.o%s} \\\n-\t\t\t%{!ansi:values-Xa.o%s} \\\n- \t\t\tcrtbegin.o%s\"\n-  \n-/* This should be the same as in svr4.h, except with -R added.  */\n-#undef LINK_SPEC\n-#define LINK_SPEC \\\n-  \"%{h*} %{v:-V} \\\n-   %{b} %{Wl,*:%*} \\\n-   %{static:-dn -Bstatic} \\\n-   %{shared:-G -dy %{!mimpure-text:-z text}} \\\n-   %{symbolic:-Bsymbolic -G -dy -z text} \\\n-   %{G:-G} \\\n-   %{YP,*} \\\n-   %{R*} \\\n-   %{compat-bsd: \\\n-     %{!YP,*:%{pg:-Y P,/usr/ucblib:/usr/ccs/lib/libp:/usr/lib/libp:/usr/ccs/lib:/usr/lib} \\\n-             %{!pg:%{p:-Y P,/usr/ucblib:/usr/ccs/lib/libp:/usr/lib/libp:/usr/ccs/lib:/usr/lib} \\\n-                   %{!p:-Y P,/usr/ucblib:/usr/ccs/lib:/usr/lib}}} \\\n-             -R /usr/ucblib} \\\n-   %{!compat-bsd: \\\n-     %{!YP,*:%{pg:-Y P,/usr/ccs/lib/libp:/usr/lib/libp:/usr/ccs/lib:/usr/lib} \\\n-             %{!pg:%{p:-Y P,/usr/ccs/lib/libp:/usr/lib/libp:/usr/ccs/lib:/usr/lib} \\\n-                   %{!p:-Y P,/usr/ccs/lib:/usr/lib}}}} \\\n-   %{Qy:} %{!Qn:-Qy}\"\n-\n-/* This defines which switch letters take arguments.\n-   It is as in svr4.h but with -R added.  */\n-\n-#undef SWITCH_TAKES_ARG\n-#define SWITCH_TAKES_ARG(CHAR) \\\n-  (DEFAULT_SWITCH_TAKES_ARG(CHAR) \\\n-   || (CHAR) == 'R' \\\n-   || (CHAR) == 'h' \\\n-   || (CHAR) == 'z')\n-\n-#define STDC_0_IN_SYSTEM_HEADERS 1\n+/* FIXME: Removed -K PIC from generic Solaris 2 ASM_SPEC: the native assembler\n+   gives many warnings: R_386_32 relocation is used for symbol \".text\".  */\n+#undef ASM_SPEC\n+#define ASM_SPEC \"\\\n+%{v:-V} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s \\\n+%(asm_cpu) \\\n+\"\n+\n+#define ASM_CPU_SPEC \"\"\n+ \n+#undef SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS \\\n+  { \"cpp_subtarget\",\tCPP_SUBTARGET_SPEC },\t\\\n+  { \"asm_cpu\",\t\tASM_CPU_SPEC },\t\t\\\n+  { \"startfile_arch\",\tSTARTFILE_ARCH_SPEC },\t\\\n+  { \"link_arch\",\tLINK_ARCH_SPEC }\n \n #undef LOCAL_LABEL_PREFIX\n #define LOCAL_LABEL_PREFIX \".\""}, {"sha": "f8ca103f8e1c327c142f471ce20dd28bcd73d80c", "filename": "gcc/config/i386/sol2gas.h", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bb1d561836b8939f3b289f596348f0ea4ab06d/gcc%2Fconfig%2Fi386%2Fsol2gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bb1d561836b8939f3b289f596348f0ea4ab06d/gcc%2Fconfig%2Fi386%2Fsol2gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2gas.h?ref=b6bb1d561836b8939f3b289f596348f0ea4ab06d", "patch": "@@ -1,11 +0,0 @@\n-/* Definitions of target machine for GNU compiler, for SPARC running\n-   Solaris 2 with GNU as up to 2.9.5.0.12.\n-   \n-   Copyright (C) 1999 Free Software Foundation, Inc.\n-*/\n-\n-#ifndef GAS_REJECTS_MINUS_S\n-#define GAS_REJECTS_MINUS_S 1\n-#endif\n-\n-/* Assume sol2.h will be included afterwards.  */"}, {"sha": "c5980fbe16896a744a6a7d16065382ceaedffe47", "filename": "gcc/config/sol2.h", "status": "added", "additions": 207, "deletions": 0, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7", "patch": "@@ -0,0 +1,207 @@\n+/* Operating system specific defines to be used when targeting GCC for any\n+   Solaris 2 system.\n+   Copyright 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* We use stabs-in-elf for debugging, because that is what the native\n+   toolchain uses.  */\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+\n+/* Solaris 2 (at least as of 2.5.1) uses a 32-bit wchar_t.  */\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"long int\"\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE BITS_PER_WORD\n+\n+/* Solaris 2 uses a wint_t different from the default. This is required\n+   by the SCD 2.4.1, p. 6-83, Figure 6-66.  */\n+#undef\tWINT_TYPE\n+#define\tWINT_TYPE \"long int\"\n+\n+#undef\tWINT_TYPE_SIZE\n+#define\tWINT_TYPE_SIZE BITS_PER_WORD\n+\n+#define HANDLE_PRAGMA_REDEFINE_EXTNAME 1\n+\n+/* ??? Note: in order for -compat-bsd to work fully,\n+   we must somehow arrange to fixincludes /usr/ucbinclude\n+   and put the result in $(libsubdir)/ucbinclude.  */\n+\n+#undef CPP_SUBTARGET_SPEC\n+#define CPP_SUBTARGET_SPEC \"\\\n+%{pthreads:-D_REENTRANT -D_PTHREADS} \\\n+%{!pthreads:%{threads:-D_REENTRANT -D_SOLARIS_THREADS}} \\\n+%{compat-bsd:-iwithprefixbefore ucbinclude -I/usr/ucbinclude} \\\n+\"\n+\n+/* Names to predefine in the preprocessor for this target machine.  */\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n+    do {\t\t\t\t\t\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\t\\\n+\tbuiltin_define_std (\"sun\");\t\t\t\\\n+\tbuiltin_define (\"__svr4__\");\t\t\t\\\n+\tbuiltin_define (\"__SVR4\");\t\t\t\\\n+\tbuiltin_define (\"__PRAGMA_REDEFINE_EXTNAME\");\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\t\\\n+\tbuiltin_assert (\"system=svr4\");\t\t\t\\\n+\t/* For C++ we need to add some additional macro \\\n+\t   definitions required by the C++ standard\t\\\n+\t   library.  */\t\t\t\t\t\\\n+\tif (c_language == clk_cplusplus)\t\t\\\n+\t  {\t\t\t\t\t\t\\\n+\t    builtin_define (\"_XOPEN_SOURCE=500\");\t\\\n+\t    builtin_define (\"_LARGEFILE_SOURCE=1\");\t\\\n+\t    builtin_define (\"_LARGEFILE64_SOURCE=1\");\t\\\n+\t    builtin_define (\"__EXTENSIONS__\");\t\t\\\n+\t  }\t\t\t\t\t\t\\\n+    } while (0)\n+\n+/* The sun bundled assembler doesn't accept -Yd, (and neither does gas).\n+   It's safe to pass -s always, even if -g is not used.  */\n+#undef ASM_SPEC\n+#define ASM_SPEC \"\\\n+%{v:-V} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s \\\n+%{fpic:-K PIC} %{fPIC:-K PIC} \\\n+%(asm_cpu) \\\n+\"\n+\n+/* We don't use the standard LIB_SPEC only because we don't yet support c++.  */\n+#undef LIB_SPEC\n+#define LIB_SPEC \\\n+  \"%{compat-bsd:-lucb -lsocket -lnsl -lelf -laio} \\\n+   %{!shared:\\\n+     %{!symbolic:\\\n+       %{pthreads:-lpthread} \\\n+       %{!pthreads:%{threads:-lthread}} \\\n+       %{p|pg:-ldl} -lc}}\"\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \"crtend.o%s crtn.o%s\"\n+\n+/* We don't use the standard svr4 STARTFILE_SPEC because it's wrong for us.  */\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"%{!shared: \\\n+\t\t\t %{!symbolic: \\\n+\t\t\t  %{p:mcrt1.o%s} \\\n+                          %{!p: \\\n+\t                    %{pg:gcrt1.o%s gmon.o%s} \\\n+                            %{!pg:crt1.o%s}}}} \\\n+\t\t\tcrti.o%s %(startfile_arch) \\\n+\t\t\tcrtbegin.o%s\"\n+\n+#undef STARTFILE_ARCH32_SPEC\n+#define STARTFILE_ARCH32_SPEC \"%{ansi:values-Xc.o%s} \\\n+\t\t\t    %{!ansi:values-Xa.o%s}\"\n+\n+#undef STARTFILE_ARCH_SPEC\n+#define STARTFILE_ARCH_SPEC STARTFILE_ARCH32_SPEC\n+\n+#undef LINK_ARCH32_SPEC\n+#define LINK_ARCH32_SPEC \\\n+  \"%{G:-G} \\\n+   %{YP,*} \\\n+   %{R*} \\\n+   %{compat-bsd: \\\n+     %{!YP,*:%{p|pg:-Y P,/usr/ucblib:/usr/ccs/lib/libp:/usr/lib/libp:/usr/ccs/lib:/usr/lib} \\\n+             %{!p:%{!pg:-Y P,/usr/ucblib:/usr/ccs/lib:/usr/lib}}} \\\n+             -R /usr/ucblib} \\\n+   %{!compat-bsd: \\\n+     %{!YP,*:%{p|pg:-Y P,/usr/ccs/lib/libp:/usr/lib/libp:/usr/ccs/lib:/usr/lib} \\\n+             %{!p:%{!pg:-Y P,/usr/ccs/lib:/usr/lib}}}}\"\n+\n+#undef LINK_ARCH_SPEC\n+#define LINK_ARCH_SPEC LINK_ARCH32_SPEC\n+\n+/* This should be the same as in svr4.h, except with -R added.  */\n+#undef  LINK_SPEC\n+#define LINK_SPEC \\\n+  \"%{h*} %{v:-V} \\\n+   %{b} %{Wl,*:%*} \\\n+   %{static:-dn -Bstatic} \\\n+   %{shared:-G -dy %{!mimpure-text:-z text}} \\\n+   %{symbolic:-Bsymbolic -G -dy -z text} \\\n+   %(link_arch) \\\n+   %{Qy:} %{!Qn:-Qy}\"\n+\n+/* This defines which switch letters take arguments.\n+   It is as in svr4.h but with -R added.  */\n+#undef SWITCH_TAKES_ARG\n+#define SWITCH_TAKES_ARG(CHAR) \\\n+  (DEFAULT_SWITCH_TAKES_ARG(CHAR) \\\n+   || (CHAR) == 'R' \\\n+   || (CHAR) == 'h' \\\n+   || (CHAR) == 'z')\n+\n+#define STDC_0_IN_SYSTEM_HEADERS 1\n+\f\n+/*\n+ * Attempt to turn on access permissions for the stack.\n+ *\n+ * This code must be defined when compiling gcc but not when compiling\n+ * libgcc2.a, unless we're generating code for 64-bit SPARC\n+ *\n+ * _SC_STACK_PROT is only defined for post 2.6, but we want this code\n+ * to run always.  2.6 can change the stack protection but has no way to\n+ * query it.\n+ *\n+ */\n+\n+/* This declares mprotect (used in TRANSFER_FROM_TRAMPOLINE) for\n+   libgcc2.c.  */\n+/* We don't want to include this because sys/mman.h is not present on\n+   some non-Solaris configurations that use sol2.h.  */\n+#if 0 /* def L_trampoline */\n+#include <sys/mman.h>\n+#endif\n+\n+#define TRANSFER_FROM_TRAMPOLINE\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+/* #define STACK_PROT_RWX (PROT_READ | PROT_WRITE | PROT_EXEC) */\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+static int need_enable_exec_stack;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+static void check_enabling(void) __attribute__ ((constructor));\t\t\\\n+static void check_enabling(void)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  extern long sysconf(int);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  int prot = (int) sysconf(515 /* _SC_STACK_PROT */);\t\t\t\\\n+  if (prot != 7 /* STACK_PROT_RWX */)\t\t\t\t\t\\\n+    need_enable_exec_stack = 1;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+extern void __enable_execute_stack (void *);\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+__enable_execute_stack (addr)\t\t\t\t\t\t\\\n+     void *addr;\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (!need_enable_exec_stack)\t\t\t\t\t\t\\\n+    return;\t\t\t\t\t\t\t\t\\\n+  else {\t\t\t\t\t\t\t\t\\\n+    long size = getpagesize ();\t\t\t\t\t\t\\\n+    long mask = ~(size-1);\t\t\t\t\t\t\\\n+    char *page = (char *) (((long) addr) & mask); \t\t\t\\\n+    char *end  = (char *) ((((long) (addr + TRAMPOLINE_SIZE)) & mask) + size); \\\n+\t\t\t\t\t\t\t\t\t\\\n+    if (mprotect (page, end - page, 7 /* STACK_PROT_RWX */) < 0)\t\\\n+      perror (\"mprotect of trampoline code\");\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+}"}, {"sha": "1ba52606aa3bc1dbe23d63fe7f400f040d3571be", "filename": "gcc/config/sparc/sol2-bi.h", "status": "modified", "additions": 21, "deletions": 69, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7/gcc%2Fconfig%2Fsparc%2Fsol2-bi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7/gcc%2Fconfig%2Fsparc%2Fsol2-bi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-bi.h?ref=8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7", "patch": "@@ -5,9 +5,6 @@\n #undef SPARC_DEFAULT_CMODEL\n #define SPARC_DEFAULT_CMODEL CM_MEDANY\n \n-#undef LONG_DOUBLE_TYPE_SIZE\n-#define LONG_DOUBLE_TYPE_SIZE 128\n-\n #define AS_SPARC64_FLAG\t\"-xarch=v9\"\n \n #undef ASM_CPU32_DEFAULT_SPEC\n@@ -30,15 +27,6 @@\n #define ASM_CPU64_DEFAULT_SPEC AS_SPARC64_FLAG \"a\"\n #endif\n \n-/* The sun bundled assembler doesn't accept -Yd, (and neither does gas).\n-   It's safe to pass -s always, even if -g is not used.  */\n-#undef ASM_SPEC\n-#define ASM_SPEC \"\\\n-%{v:-V} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s \\\n-%{fpic:-K PIC} %{fPIC:-K PIC} \\\n-%(asm_cpu)\\\n-\"\n-\n #if DEFAULT_ARCH32_P\n #define DEF_ARCH32_SPEC(__str) \"%{!m64:\" __str \"}\"\n #define DEF_ARCH64_SPEC(__str) \"%{m64:\" __str \"}\"\n@@ -50,17 +38,14 @@\n #undef CPP_CPU_SPEC\n #define CPP_CPU_SPEC \"\\\n %{mcypress:} \\\n-%{msparclite:-D__sparclite__} \\\n-%{mf930:-D__sparclite__} %{mf934:-D__sparclite__} \\\n+%{msparclite|mf930|mf934:-D__sparclite__} \\\n %{mv8:\" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n %{msupersparc:-D__supersparc__ \" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n-%{mcpu=sparclet:-D__sparclet__} %{mcpu=tsc701:-D__sparclet__} \\\n-%{mcpu=sparclite:-D__sparclite__} \\\n-%{mcpu=f930:-D__sparclite__} %{mcpu=f934:-D__sparclite__} \\\n+%{mcpu=sparclet|mcpu=tsc701:-D__sparclet__} \\\n+%{mcpu=sparclite|mcpu-f930|mcpu=f934:-D__sparclite__} \\\n %{mcpu=v8:\" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n %{mcpu=supersparc:-D__supersparc__ \" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n-%{mcpu=v9:\" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n-%{mcpu=ultrasparc:\" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n+%{mcpu=v9|mcpu=ultrasparc:\" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n %{!mcpu*:%{!mcypress:%{!msparclite:%{!mf930:%{!mf934:%{!mv8:%{!msupersparc:%(cpp_cpu_default)}}}}}}} \\\n \"\n \n@@ -72,36 +57,24 @@\n %{!mcpu*:%(asm_cpu_default)} \\\n \"\n \n-#define STARTFILE_SPEC32 \"\\\n-%{ansi:values-Xc.o%s} \\\n-%{!ansi:values-Xa.o%s}\"\n-\n-#define STARTFILE_SPEC64 \"\\\n+#define STARTFILE_ARCH64_SPEC \"\\\n %{ansi:/usr/lib/sparcv9/values-Xc.o%s} \\\n %{!ansi:/usr/lib/sparcv9/values-Xa.o%s}\"\n  \n+#undef STARTFILE_ARCH_SPEC\n+\n #if DEFAULT_ARCH32_P\n #define STARTFILE_ARCH_SPEC \"\\\n-%{m32:\" STARTFILE_SPEC32 \"} \\\n-%{m64:\" STARTFILE_SPEC64 \"} \\\n-%{!m32:%{!m64:\" STARTFILE_SPEC32 \"}}\"\n+%{m32:\" STARTFILE_ARCH32_SPEC \"} \\\n+%{m64:\" STARTFILE_ARCH64_SPEC \"} \\\n+%{!m32:%{!m64:\" STARTFILE_ARCH32_SPEC \"}}\"\n #else\n #define STARTFILE_ARCH_SPEC \"\\\n-%{m32:\" STARTFILE_SPEC32 \"} \\\n-%{m64:\" STARTFILE_SPEC64 \"} \\\n-%{!m32:%{!m64:\" STARTFILE_SPEC64 \"}}\"\n+%{m32:\" STARTFILE_ARCH32_SPEC \"} \\\n+%{m64:\" STARTFILE_ARCH64_SPEC \"} \\\n+%{!m32:%{!m64:\" STARTFILE_ARCH64_SPEC \"}}\"\n #endif\n \n-#undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \"%{!shared: \\\n-\t\t\t %{!symbolic: \\\n-\t\t\t  %{p:mcrt1.o%s} \\\n-                          %{!p: \\\n-\t                    %{pg:gcrt1.o%s gmon.o%s} \\\n-                            %{!pg:crt1.o%s}}}} \\\n-\t\t\tcrti.o%s \" STARTFILE_ARCH_SPEC \" \\\n-\t\t\tcrtbegin.o%s\"\n-\n #undef CPP_CPU_DEFAULT_SPEC\n #define CPP_CPU_DEFAULT_SPEC \\\n (DEFAULT_ARCH32_P ? \"\\\n@@ -170,41 +143,30 @@\n \n #undef SUBTARGET_EXTRA_SPECS\n #define SUBTARGET_EXTRA_SPECS \\\n+  { \"startfile_arch\",\t STARTFILE_ARCH_SPEC },\t\t  \\\n   { \"link_arch32\",       LINK_ARCH32_SPEC },              \\\n   { \"link_arch64\",       LINK_ARCH64_SPEC },              \\\n   { \"link_arch_default\", LINK_ARCH_DEFAULT_SPEC },\t  \\\n   { \"link_arch\",\t LINK_ARCH_SPEC },\n     \n-/* This should be the same as in svr4.h, except with -R added.  */\n-#define LINK_ARCH32_SPEC \\\n-  \"%{G:-G} \\\n-   %{YP,*} \\\n-   %{R*} \\\n-   %{compat-bsd: \\\n-     %{!YP,*:%{p:-Y P,/usr/ucblib:/usr/ccs/lib/libp:/usr/lib/libp:/usr/ccs/lib:/usr/lib} \\\n-       %{pg:-Y P,/usr/ucblib:/usr/ccs/lib/libp:/usr/lib/libp:/usr/ccs/lib:/usr/lib} \\\n-       %{!p:%{!pg:-Y P,/usr/ucblib:/usr/ccs/lib:/usr/lib}}} \\\n-     -R /usr/ucblib} \\\n-   %{!compat-bsd: \\\n-     %{!YP,*:%{p:-Y P,/usr/ccs/lib/libp:/usr/lib/libp:/usr/ccs/lib:/usr/lib} \\\n-       %{pg:-Y P,/usr/ccs/lib/libp:/usr/lib/libp:/usr/ccs/lib:/usr/lib} \\\n-       %{!p:%{!pg:-Y P,/usr/ccs/lib:/usr/lib}}}}\"\n-\n+/*\n+ * This should be the same as in sol2.h, except with \"/sparcv9\"\n+ * appended to the paths and /usr/ccs/lib is no longer necessary\n+ */\n #define LINK_ARCH64_SPEC \\\n   \"%{mcmodel=medlow:-M /usr/lib/ld/sparcv9/map.below4G} \\\n    %{G:-G} \\\n    %{YP,*} \\\n    %{R*} \\\n    %{compat-bsd: \\\n-     %{!YP,*:%{p:-Y P,/usr/ucblib/sparcv9:/usr/lib/libp/sparcv9:/usr/lib/sparcv9} \\\n-       %{pg:-Y P,/usr/ucblib/sparcv9:/usr/lib/libp/sparcv9:/usr/lib/sparcv9} \\\n+     %{!YP,*:%{p|pg:-Y P,/usr/ucblib/sparcv9:/usr/lib/libp/sparcv9:/usr/lib/sparcv9} \\\n        %{!p:%{!pg:-Y P,/usr/ucblib/sparcv9:/usr/lib/sparcv9}}} \\\n      -R /usr/ucblib} \\\n    %{!compat-bsd: \\\n-     %{!YP,*:%{p:-Y P,/usr/lib/libp/sparcv9:/usr/lib/sparcv9} \\\n-       %{pg:-Y P,/usr/lib/libp/sparcv9:/usr/lib/sparcv9} \\\n+     %{!YP,*:%{p|pg:-Y P,/usr/lib/libp/sparcv9:/usr/lib/sparcv9} \\\n        %{!p:%{!pg:-Y P,/usr/lib/sparcv9}}}}\"\n \n+#undef LINK_ARCH_SPEC\n #define LINK_ARCH_SPEC \"\\\n %{m32:%(link_arch32)} \\\n %{m64:%(link_arch64)} \\\n@@ -214,16 +176,6 @@\n #define LINK_ARCH_DEFAULT_SPEC \\\n (DEFAULT_ARCH32_P ? LINK_ARCH32_SPEC : LINK_ARCH64_SPEC)\n \n-#undef  LINK_SPEC\n-#define LINK_SPEC \\\n-  \"%{h*} %{v:-V} \\\n-   %{b} %{Wl,*:%*} \\\n-   %{static:-dn -Bstatic} \\\n-   %{shared:-G -dy %{!mimpure-text:-z text}} \\\n-   %{symbolic:-Bsymbolic -G -dy -z text} \\\n-   %(link_arch) \\\n-   %{Qy:} %{!Qn:-Qy}\"\n-\n #undef\tCC1_SPEC\n #if DEFAULT_ARCH32_P\n #define CC1_SPEC \"\\"}, {"sha": "728774d49be623e094501770dfceb15383ac3c83", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 2, "deletions": 164, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=8433a25e2a7ed6df0f9be9cb89a2748d7768f2d7", "patch": "@@ -23,51 +23,8 @@ Boston, MA 02111-1307, USA.  */\n \n /* Supposedly the same as vanilla sparc svr4, except for the stuff below: */\n \n-/* Solaris 2 (at least as of 2.5.1) uses a 32-bit wchar_t.  */\n-#undef WCHAR_TYPE\n-#define WCHAR_TYPE \"long int\"\n-\n-#undef WCHAR_TYPE_SIZE\n-#define WCHAR_TYPE_SIZE 32\n-\n-/* Solaris 2 uses a wint_t different from the default. This is required\n-   by the SCD 2.4.1, p. 6-83, Figure 6-66.  */\n-#undef\tWINT_TYPE\n-#define\tWINT_TYPE \"long int\"\n-\n-#undef\tWINT_TYPE_SIZE\n-#define\tWINT_TYPE_SIZE 32\n-\n-#define HANDLE_PRAGMA_REDEFINE_EXTNAME 1\n-\n #undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \\\n-\"-Dsparc -Dsun -Dunix -D__svr4__ -D__SVR4 -D__PRAGMA_REDEFINE_EXTNAME \\\n--Asystem=unix -Asystem=svr4\"\n-\n-#undef CPP_SUBTARGET_SPEC\n-#define CPP_SUBTARGET_SPEC \"\\\n-%{pthreads:-D_REENTRANT -D_PTHREADS} \\\n-%{!pthreads:%{threads:-D_REENTRANT -D_SOLARIS_THREADS}} \\\n-%{compat-bsd:-iwithprefixbefore ucbinclude -I/usr/ucbinclude} \\\n-\"\n-\n-/* For C++ we need to add some additional macro definitions required\n-   by the C++ standard library.  */\n-#define CPLUSPLUS_CPP_SPEC \"\\\n--D_XOPEN_SOURCE=500 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 \\\n--D__EXTENSIONS__ \\\n-%(cpp) \\\n-\"\n-\n-/* The sun bundled assembler doesn't accept -Yd, (and neither does gas).\n-   It's safe to pass -s always, even if -g is not used.  */\n-#undef ASM_SPEC\n-#define ASM_SPEC \"\\\n-%{v:-V} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s \\\n-%{fpic:-K PIC} %{fPIC:-K PIC} \\\n-%(asm_cpu) \\\n-\"\n+#define CPP_PREDEFINES \"-Dsparc\"\n \n /* This is here rather than in sparc.h because it's not known what\n    other assemblers will accept.  */\n@@ -98,11 +55,6 @@ Boston, MA 02111-1307, USA.  */\n #define DBX_REGISTER_NUMBER(REGNO) \\\n   (TARGET_FLAT && (REGNO) == HARD_FRAME_POINTER_REGNUM ? 31 : REGNO)\n \n-/* We use stabs-in-elf by default, because that is what the native\n-   toolchain uses.  */\n-#undef PREFERRED_DEBUGGING_TYPE\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n-\n /* The Solaris 2 assembler uses .skip, not .zero, so put this back.  */\n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n@@ -135,72 +87,12 @@ Boston, MA 02111-1307, USA.  */\n   sprintf ((LABEL), \"*.L%s%ld\", (PREFIX), (long)(NUM))\n \n \f\n-/* We don't use the standard svr4 STARTFILE_SPEC because it's wrong for us.\n-   We don't use the standard LIB_SPEC only because we don't yet support c++ */\n-\n-#undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \"%{!shared: \\\n-\t\t\t %{!symbolic: \\\n-\t\t\t  %{p:mcrt1.o%s} \\\n-                          %{!p: \\\n-\t                    %{pg:gcrt1.o%s gmon.o%s} \\\n-                            %{!pg:crt1.o%s}}}} \\\n-\t\t\tcrti.o%s \\\n-\t\t\t%{ansi:values-Xc.o%s} \\\n-\t\t\t%{!ansi:values-Xa.o%s} \\\n-\t\t\tcrtbegin.o%s\"\n-\n-/* ??? Note: in order for -compat-bsd to work fully,\n-   we must somehow arrange to fixincludes /usr/ucbinclude\n-   and put the result in $(libsubdir)/ucbinclude.  */\n-\n-#undef LIB_SPEC\n-#define LIB_SPEC \\\n-  \"%{compat-bsd:-lucb -lsocket -lnsl -lelf -laio} \\\n-   %{!shared:\\\n-     %{!symbolic:\\\n-       %{pthreads:-lpthread} \\\n-       %{!pthreads:%{threads:-lthread}} \\\n-       %{p|pg:-ldl} -lc}}\"\n \n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \\\n   \"%{ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n    crtend.o%s crtn.o%s\"\n \n-/* This should be the same as in svr4.h, except with -R added.  */\n-#undef LINK_SPEC\n-#define LINK_SPEC \\\n-  \"%{h*} %{v:-V} \\\n-   %{b} %{Wl,*:%*} \\\n-   %{static:-dn -Bstatic} \\\n-   %{shared:-G -dy %{!mimpure-text:-z text}} \\\n-   %{symbolic:-Bsymbolic -G -dy -z text} \\\n-   %{G:-G} \\\n-   %{YP,*} \\\n-   %{R*} \\\n-   %{compat-bsd: \\\n-     %{!YP,*:%{pg:-Y P,/usr/ucblib:/usr/ccs/lib/libp:/usr/lib/libp:/usr/ccs/lib:/usr/lib} \\\n-             %{!pg:%{p:-Y P,/usr/ucblib:/usr/ccs/lib/libp:/usr/lib/libp:/usr/ccs/lib:/usr/lib} \\\n-                   %{!p:-Y P,/usr/ucblib:/usr/ccs/lib:/usr/lib}}} \\\n-             -R /usr/ucblib} \\\n-   %{!compat-bsd: \\\n-     %{!YP,*:%{pg:-Y P,/usr/ccs/lib/libp:/usr/lib/libp:/usr/ccs/lib:/usr/lib} \\\n-             %{!pg:%{p:-Y P,/usr/ccs/lib/libp:/usr/lib/libp:/usr/ccs/lib:/usr/lib} \\\n-                   %{!p:-Y P,/usr/ccs/lib:/usr/lib}}}} \\\n-   %{Qy:} %{!Qn:-Qy}\"\n-\n-/* This defines which switch letters take arguments.\n-   It is as in svr4.h but with -R added.  */\n-\n-#undef SWITCH_TAKES_ARG\n-#define SWITCH_TAKES_ARG(CHAR) \\\n-  (DEFAULT_SWITCH_TAKES_ARG(CHAR) \\\n-   || (CHAR) == 'R' \\\n-   || (CHAR) == 'h' \\\n-   || (CHAR) == 'x' \\\n-   || (CHAR) == 'z')\n-\n /* Select a format to encode pointers in exception handling data.  CODE\n    is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n    true if the symbol may be affected by dynamic relocations.\n@@ -221,8 +113,6 @@ Boston, MA 02111-1307, USA.  */\n /* But indicate that it isn't supported by the hardware.  */\n #define WIDEST_HARDWARE_FP_SIZE 64\n \n-#define STDC_0_IN_SYSTEM_HEADERS 1\n-\n #define MULDI3_LIBCALL \"__mul64\"\n #define DIVDI3_LIBCALL \"__div64\"\n #define UDIVDI3_LIBCALL \"__udiv64\"\n@@ -249,56 +139,4 @@ Boston, MA 02111-1307, USA.  */\n /* Solaris allows 64 bit out and global registers in 32 bit mode.\n    sparc_override_options will disable V8+ if not generating V9 code.  */\n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_FPU + MASK_V8PLUS + MASK_LONG_DOUBLE_128)\n-\f\n-/*\n- * Attempt to turn on access permissions for the stack.\n- *\n- * This code must be defined when compiling gcc but not when compiling\n- * libgcc2.a, unless we're generating code for 64 bits SPARC\n- *\n- * _SC_STACK_PROT is only defined for post 2.6, but we want this code\n- * to run always.  2.6 can change the stack protection but has no way to\n- * query it.\n- *\n- */\n-\n-/* This declares mprotect (used in TRANSFER_FROM_TRAMPOLINE) for\n-   libgcc2.c.  */\n-/* We don't want to include this because sys/mman.h is not present on\n-   some non-Solaris configurations that use sol2.h.  */\n-#if 0 /* def L_trampoline */\n-#include <sys/mman.h>\n-#endif\n-\n-#define TRANSFER_FROM_TRAMPOLINE\t\t\t\t\t\\\n-static int need_enable_exec_stack;\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-static void check_enabling(void) __attribute__ ((constructor));\t\t\\\n-static void check_enabling(void)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  extern long sysconf(int);\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  int prot = (int) sysconf(515 /*_SC_STACK_PROT */);\t\t\t\\\n-  if (prot != 7)\t\t\t\t\t\t\t\\\n-    need_enable_exec_stack = 1;\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-extern void __enable_execute_stack (void *);\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-__enable_execute_stack (addr)\t\t\t\t\t\t\\\n-     void *addr;\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (!need_enable_exec_stack)\t\t\t\t\t\t\\\n-    return;\t\t\t\t\t\t\t\t\\\n-  else {\t\t\t\t\t\t\t\t\\\n-    long size = getpagesize ();\t\t\t\t\t\t\\\n-    long mask = ~(size-1);\t\t\t\t\t\t\\\n-    char *page = (char *) (((long) addr) & mask); \t\t\t\\\n-    char *end  = (char *) ((((long) (addr + TRAMPOLINE_SIZE)) & mask) + size); \\\n-\t\t\t\t\t\t\t\t\t\\\n-    /* 7 is PROT_READ | PROT_WRITE | PROT_EXEC */ \t\t\t\\\n-    if (mprotect (page, end - page, 7) < 0)\t\t\t\t\\\n-      perror (\"mprotect of trampoline code\");\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-}\n+#define TARGET_DEFAULT (MASK_V8PLUS + MASK_FPU + MASK_LONG_DOUBLE_128)"}]}