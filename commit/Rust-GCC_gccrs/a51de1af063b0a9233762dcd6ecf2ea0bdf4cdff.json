{"sha": "a51de1af063b0a9233762dcd6ecf2ea0bdf4cdff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUxZGUxYWYwNjNiMGE5MjMzNzYyZGNkNmVjZjJlYTBiZGY0Y2RmZg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-07-07T21:09:42Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-07-08T13:13:39Z"}, "message": "c++: Better diagnostic for decltype(auto) in C++11 [PR96103]\n\nIf you try to use decltype(auto) in C++11, we emit obscure\n\n  error: expected primary-expression before 'auto'\n\ngiving the user no hint as to what's wrong.  This patch improves that\ndiagnostic.  Since we've been giving an error, I'm also using error().\n\ngcc/cp/ChangeLog:\n\n\tPR c++/96103\n\t* parser.c (cp_parser_decltype): Print error about using decltype(auto)\n\tin C++11.  Check that the token following \"auto\" is \")\".\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/96103\n\t* g++.dg/cpp0x/decltype77.C: New test.", "tree": {"sha": "b7722f9e5c4e47e8e1ce9a6a0523c207e60d532a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7722f9e5c4e47e8e1ce9a6a0523c207e60d532a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a51de1af063b0a9233762dcd6ecf2ea0bdf4cdff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51de1af063b0a9233762dcd6ecf2ea0bdf4cdff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a51de1af063b0a9233762dcd6ecf2ea0bdf4cdff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51de1af063b0a9233762dcd6ecf2ea0bdf4cdff/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4070208f2384df01798d23e6ecba7b30296aa588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4070208f2384df01798d23e6ecba7b30296aa588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4070208f2384df01798d23e6ecba7b30296aa588"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "528b41b717096b07590174003b8a9eeb760f500c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51de1af063b0a9233762dcd6ecf2ea0bdf4cdff/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51de1af063b0a9233762dcd6ecf2ea0bdf4cdff/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a51de1af063b0a9233762dcd6ecf2ea0bdf4cdff", "patch": "@@ -14894,11 +14894,11 @@ cp_parser_decltype_expr (cp_parser *parser,\n   return expr;\n }\n \n-/* Parse a `decltype' type. Returns the type.\n+/* Parse a `decltype' type.  Returns the type.\n \n-   simple-type-specifier:\n+   decltype-specifier:\n      decltype ( expression )\n-   C++14 proposal:\n+   C++14:\n      decltype ( auto )  */\n \n static tree\n@@ -14938,10 +14938,19 @@ cp_parser_decltype (cp_parser *parser)\n \n   tree expr = NULL_TREE;\n \n-  if (cxx_dialect >= cxx14\n-      && cp_lexer_next_token_is_keyword (parser->lexer, RID_AUTO))\n-    /* decltype (auto) */\n-    cp_lexer_consume_token (parser->lexer);\n+  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_AUTO)\n+      && cp_lexer_nth_token_is (parser->lexer, 2, CPP_CLOSE_PAREN))\n+    {\n+      /* decltype (auto) */\n+      cp_lexer_consume_token (parser->lexer);\n+      if (cxx_dialect < cxx14)\n+\t{\n+\t  error_at (start_token->location,\n+\t\t    \"%<decltype(auto)%> type specifier only available with \"\n+\t\t    \"%<-std=c++14%> or %<-std=gnu++14%>\");\n+\t  expr = error_mark_node;\n+\t}\n+    }\n   else\n     {\n       /* decltype (expression)  */"}, {"sha": "ffd59d4188cbadf5b40526f1cc08b7b93ef083ab", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype77.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51de1af063b0a9233762dcd6ecf2ea0bdf4cdff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype77.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51de1af063b0a9233762dcd6ecf2ea0bdf4cdff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype77.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype77.C?ref=a51de1af063b0a9233762dcd6ecf2ea0bdf4cdff", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/96103\n+// { dg-do compile { target c++11_only } }\n+\n+decltype(auto) foo () { return 4; } // { dg-error \".decltype\\\\(auto\\\\). type specifier only available\" }\n+\n+void\n+bar ()\n+{\n+  decltype(auto) i = 0; // { dg-error \".decltype\\\\(auto\\\\). type specifier only available\" }\n+}"}]}