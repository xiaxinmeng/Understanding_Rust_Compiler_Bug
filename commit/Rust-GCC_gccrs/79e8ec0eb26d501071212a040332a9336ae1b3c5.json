{"sha": "79e8ec0eb26d501071212a040332a9336ae1b3c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzllOGVjMGViMjZkNTAxMDcxMjEyYTA0MDMzMmE5MzM2YWUxYjNjNQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-08-28T04:55:48Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-08-28T04:55:48Z"}, "message": "(forgot in last checkin)\nUse VA_OPEN/VA_CLOSE/VA_FIXEDARG throughout.\n\nFrom-SVN: r45223", "tree": {"sha": "ae1cdd68d97bedc6d90accdf935007abc21d003c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae1cdd68d97bedc6d90accdf935007abc21d003c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79e8ec0eb26d501071212a040332a9336ae1b3c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e8ec0eb26d501071212a040332a9336ae1b3c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79e8ec0eb26d501071212a040332a9336ae1b3c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e8ec0eb26d501071212a040332a9336ae1b3c5/comments", "author": null, "committer": null, "parents": [{"sha": "c23bb84bd333c756c82c53c076befae20804b6cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c23bb84bd333c756c82c53c076befae20804b6cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c23bb84bd333c756c82c53c076befae20804b6cb"}], "stats": {"total": 321, "additions": 82, "deletions": 239}, "files": [{"sha": "275ca1d53f5378ead38ac6107d54db9daf75fdbc", "filename": "gcc/calls.c", "status": "modified", "additions": 13, "deletions": 36, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e8ec0eb26d501071212a040332a9336ae1b3c5/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e8ec0eb26d501071212a040332a9336ae1b3c5/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=79e8ec0eb26d501071212a040332a9336ae1b3c5", "patch": "@@ -4203,26 +4203,15 @@ void\n emit_library_call VPARAMS((rtx orgfun, enum libcall_type fn_type,\n \t\t\t   enum machine_mode outmode, int nargs, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  rtx orgfun;\n-  int fn_type;\n-  enum machine_mode outmode;\n-  int nargs;\n-#endif\n-  va_list p;\n-\n-  VA_START (p, nargs);\n-\n-#ifndef ANSI_PROTOTYPES\n-  orgfun = va_arg (p, rtx);\n-  fn_type = va_arg (p, int);\n-  outmode = va_arg (p, enum machine_mode);\n-  nargs = va_arg (p, int);\n-#endif\n+  VA_OPEN (p, nargs);\n+  VA_FIXEDARG (p, rtx, orgfun);\n+  VA_FIXEDARG (p, int, fn_type);\n+  VA_FIXEDARG (p, enum machine_mode, outmode);\n+  VA_FIXEDARG (p, int, nargs);\n \n   emit_library_call_value_1 (0, orgfun, NULL_RTX, fn_type, outmode, nargs, p);\n \n-  va_end (p);\n+  VA_CLOSE (p);\n }\n \f\n /* Like emit_library_call except that an extra argument, VALUE,\n@@ -4238,28 +4227,16 @@ emit_library_call_value VPARAMS((rtx orgfun, rtx value,\n \t\t\t\t enum libcall_type fn_type,\n \t\t\t\t enum machine_mode outmode, int nargs, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  rtx orgfun;\n-  rtx value;\n-  int fn_type;\n-  enum machine_mode outmode;\n-  int nargs;\n-#endif\n-  va_list p;\n-\n-  VA_START (p, nargs);\n-\n-#ifndef ANSI_PROTOTYPES\n-  orgfun = va_arg (p, rtx);\n-  value = va_arg (p, rtx);\n-  fn_type = va_arg (p, int);\n-  outmode = va_arg (p, enum machine_mode);\n-  nargs = va_arg (p, int);\n-#endif\n+  VA_OPEN (p, nargs);\n+  VA_FIXEDARG (p, rtx, orgfun);\n+  VA_FIXEDARG (p, rtx, value);\n+  VA_FIXEDARG (p, int, fn_type);\n+  VA_FIXEDARG (p, enum machine_mode, outmode);\n+  VA_FIXEDARG (p, int, nargs);\n \n   value = emit_library_call_value_1 (1, orgfun, value, fn_type, outmode, nargs, p);\n \n-  va_end (p);\n+  VA_CLOSE (p);\n \n   return value;\n }"}, {"sha": "700dd310473fffc9596bed28653673c235982300", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 69, "deletions": 203, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e8ec0eb26d501071212a040332a9336ae1b3c5/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e8ec0eb26d501071212a040332a9336ae1b3c5/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=79e8ec0eb26d501071212a040332a9336ae1b3c5", "patch": "@@ -757,21 +757,14 @@ vbuild_message_string (msg, ap)\n static char *\n build_message_string VPARAMS ((const char *msg, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msg;\n-#endif\n-  va_list ap;\n   char *str;\n \n-  VA_START (ap, msg);\n-\n-#ifndef ANSI_PROTOTYPES\n-  msg = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msg);\n+  VA_FIXEDARG (ap, const char *, msg);\n \n   str = vbuild_message_string (msg, ap);\n \n-  va_end (ap);\n+  VA_CLOSE (ap);\n \n   return str;\n }\n@@ -830,23 +823,17 @@ output_do_printf (buffer, msg)\n void\n output_printf VPARAMS ((struct output_buffer *buffer, const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  struct output_buffer *buffer;\n-  const char *msgid;\n-#endif\n-  va_list ap;\n   va_list *old_args;\n \n-  VA_START (ap, msgid);\n-#ifndef ANSI_PROTOTYPES\n-  buffer = va_arg (ap, output_buffer *);\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, output_buffer *, buffer);\n+  VA_FIXEDARG (ap, const char *, msgid);\n+\n   old_args = output_buffer_ptr_to_format_args (buffer);\n   output_buffer_ptr_to_format_args (buffer) = &ap;\n   output_do_printf (buffer, _(msgid));\n   output_buffer_ptr_to_format_args (buffer) = old_args;\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n /* Print a message relevant to the given DECL.  */\n@@ -966,21 +953,12 @@ count_error (warningp)\n void\n fnotice VPARAMS ((FILE *file, const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  FILE *file;\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  file = va_arg (ap, FILE *);\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, FILE *, file);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   vfprintf (file, _(msgid), ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n \n@@ -990,26 +968,20 @@ fnotice VPARAMS ((FILE *file, const char *msgid, ...))\n void\n fatal_io_error VPARAMS ((const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-#endif\n-  va_list ap;\n   output_state os;\n \n-  os = output_buffer_state (diagnostic_buffer);\n-  VA_START (ap, msgid);\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  os = output_buffer_state (diagnostic_buffer);\n \n   output_printf (diagnostic_buffer, \"%s: %s: \", progname, xstrerror (errno));\n   output_buffer_ptr_to_format_args (diagnostic_buffer) = &ap;\n   output_buffer_text_cursor (diagnostic_buffer) = _(msgid);\n   output_format (diagnostic_buffer);\n   diagnostic_finish ((output_buffer *)global_dc);\n   output_buffer_state (diagnostic_buffer) = os;\n-  va_end (ap);\n+  VA_CLOSE (ap);\n   exit (FATAL_EXIT_CODE);\n }\n \n@@ -1018,41 +990,26 @@ fatal_io_error VPARAMS ((const char *msgid, ...))\n void\n pedwarn VPARAMS ((const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-#endif\n-  va_list ap;\n   diagnostic_context dc;\n \n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   set_diagnostic_context\n     (&dc, msgid, &ap, input_filename, lineno, !flag_pedantic_errors);\n   report_diagnostic (&dc);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n /* Issue a pedantic waring about DECL.  */\n \n void\n pedwarn_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  tree decl;\n-  const char *msgid;\n-#endif\n-  va_list ap;\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, tree, decl);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  decl = va_arg (ap, tree);\n-  msgid = va_arg (ap, const char *);\n-#endif\n   /* We don't want -pedantic-errors to cause the compilation to fail from\n      \"errors\" in system header files.  Sometimes fixincludes can't fix what's\n      broken (eg: unsigned char bitfields - fixing it may change the alignment\n@@ -1061,7 +1018,7 @@ pedwarn_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n      warning either, it's just unnecessary noise.  */\n   if (!DECL_IN_SYSTEM_HEADER (decl))\n     diagnostic_for_decl (decl, msgid, &ap, !flag_pedantic_errors);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n /* Same as above but within the context FILE and LINE.  */\n@@ -1070,44 +1027,30 @@ void\n pedwarn_with_file_and_line VPARAMS ((const char *file, int line,\n \t\t\t\t     const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *file;\n-  int line;\n-  const char *msgid;\n-#endif\n-  va_list ap;\n   diagnostic_context dc;\n \n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  file = va_arg (ap, const char *);\n-  line = va_arg (ap, int);\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, file);\n+  VA_FIXEDARG (ap, int, line);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   set_diagnostic_context (&dc, msgid, &ap, file, line, !flag_pedantic_errors);\n   report_diagnostic (&dc);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n /* Just apologize with MSGID.  */\n \n void\n sorry VPARAMS ((const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-#endif\n-  va_list ap;\n   output_state os;\n \n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n+\n   os = output_buffer_state (diagnostic_buffer);\n-  VA_START (ap, msgid);\n \n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n   ++sorrycount;\n   output_set_prefix\n     (diagnostic_buffer, context_as_prefix (input_filename, lineno, 0));\n@@ -1117,7 +1060,7 @@ sorry VPARAMS ((const char *msgid, ...))\n   output_format (diagnostic_buffer);\n   diagnostic_finish ((output_buffer *)global_dc);\n   output_buffer_state (diagnostic_buffer) = os;\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n /* Called when the start of a function definition is parsed,\n@@ -1193,45 +1136,27 @@ void\n error_with_file_and_line VPARAMS ((const char *file, int line,\n \t\t\t\t   const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *file;\n-  int line;\n-  const char *msgid;\n-#endif\n-  va_list ap;\n   diagnostic_context dc;\n \n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  file = va_arg (ap, const char *);\n-  line = va_arg (ap, int);\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, file);\n+  VA_FIXEDARG (ap, int, line);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   set_diagnostic_context (&dc, msgid, &ap, file, line, /* warn = */ 0);\n   report_diagnostic (&dc);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n void\n error_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  tree decl;\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  decl = va_arg (ap, tree);\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, tree, decl);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   diagnostic_for_decl (decl, msgid, &ap, /* warn = */ 0);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n \n@@ -1240,22 +1165,15 @@ error_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n void\n error VPARAMS ((const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-#endif\n-  va_list ap;\n   diagnostic_context dc;\n \n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   set_diagnostic_context\n     (&dc, msgid, &ap, input_filename, lineno, /* warn = */ 0);\n   report_diagnostic (&dc);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n /* Likewise, except that the compilation is terminated after printing the\n@@ -1264,22 +1182,15 @@ error VPARAMS ((const char *msgid, ...))\n void\n fatal_error VPARAMS ((const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-#endif\n-  va_list ap;\n   diagnostic_context dc;\n \n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   set_diagnostic_context\n     (&dc, msgid, &ap, input_filename, lineno, /* warn = */ 0);\n   report_diagnostic (&dc);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n \n   fnotice (stderr, \"compilation terminated.\\n\");\n   exit (FATAL_EXIT_CODE);\n@@ -1302,17 +1213,10 @@ set_internal_error_function (f)\n void\n internal_error VPARAMS ((const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-#endif\n-  va_list ap;\n   diagnostic_context dc;\n \n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   if (diagnostic_lock)\n     error_recursion ();\n@@ -1330,7 +1234,7 @@ internal_error VPARAMS ((const char *msgid, ...))\n   set_diagnostic_context\n     (&dc, msgid, &ap, input_filename, lineno, /* warn = */0);\n   report_diagnostic (&dc);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n \n   fnotice (stderr,\n \"Please submit a full bug report,\\n\\\n@@ -1343,66 +1247,41 @@ void\n warning_with_file_and_line VPARAMS ((const char *file, int line,\n \t\t\t\t     const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *file;\n-  int line;\n-  const char *msgid;\n-#endif\n-  va_list ap;\n   diagnostic_context dc;\n \n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  file = va_arg (ap, const char *);\n-  line = va_arg (ap, int);\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, file);\n+  VA_FIXEDARG (ap, int, line);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   set_diagnostic_context (&dc, msgid, &ap, file, line, /* warn = */ 1);\n   report_diagnostic (&dc);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n void\n warning_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  tree decl;\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  decl = va_arg (ap, tree);\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, tree, decl);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   diagnostic_for_decl (decl, msgid, &ap, /* warn = */ 1);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n void\n warning VPARAMS ((const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-#endif\n-  va_list ap;\n   diagnostic_context dc;\n \n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   set_diagnostic_context\n     (&dc, msgid, &ap, input_filename, lineno, /* warn = */ 1);\n   report_diagnostic (&dc);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n /* Flush diagnostic_buffer content on stderr.  */\n@@ -1443,38 +1322,25 @@ output_do_verbatim (buffer, msgid, args_ptr)\n void\n output_verbatim VPARAMS ((output_buffer *buffer, const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  output_buffer *buffer;\n-  const char *msgid;\n-#endif\n-  va_list ap;\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, output_buffer *, buffer);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n-  VA_START (ap, msgid);\n-#ifndef ANSI_PROTOTYPES\n-  buffer = va_arg (ap, output_buffer *);\n-  msg = va_arg (ap, const char *);\n-#endif\n   output_do_verbatim (buffer, msgid, &ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n /* Same as above but use diagnostic_buffer.  */\n \n void\n verbatim VPARAMS ((const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-#endif\n-  va_list ap;\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n-  VA_START (ap, msgid);\n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n   output_do_verbatim (diagnostic_buffer, msgid, &ap);\n   output_buffer_to_stream (diagnostic_buffer);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n /* Report a diagnostic message (an error or a warning) as specified by"}]}