{"sha": "1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYzOWZjZDY1MWIzMzM0ZTdiMTJiMzVmN2U4MjJjYTZjNGI1NzM3Ng==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2018-05-29T09:41:02Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-29T09:41:02Z"}, "message": "[Ada] Tighten crtbegin files for VxWorks\n\nEnforce a more explicit distinction of crtbegin objects holding\neither functions with ctor/dtor attributes or _ctors/_dtors arrays,\nor none of the two (no array, no attributes). Then allow/enforce\ndifferent linking strategies for VxWorks 7.\n\n2018-05-29  Olivier Hainque  <hainque@adacore.com>\n\ngcc/ada/\n\n\t* vx_crtbegin.inc: Use a consistent naming convention for the\n\tregistration/deregistration functions across RTP or kernel.  Remove the\n\tctor/dtor attribute setting based on RTP/kernel, expect the optional\n\tattribute extension to be provided by includers instead.\n\t* vx_crtbegin.c: Mere inclusion of vx_crtbegin.inc with empty attribute\n\textension for the registration/deregistration functions.\n\t* vx_crtbegin_attr.c: New file. Include vx_crtbegin.inc with explicit\n\tconstructor/destructor attribute extensions.\n\t* vx_crtbegin_array.c: New file. Include vx_crtbegin.inc with empty\n\tattribute extensions and declare _ctors/_dtors arrays.\n\t* vx_crtbegin_auto.c: Remove.\n\t* libgnat/system-vxworks7-aarch64-rtp-smp.ads: Use\n\tvxworks7-gnat-crtbe-link.spec.\n\t* libgnat/system-vxworks7-aarch64.ads: Likewise.\n\t* libgnat/system-vxworks7-e500-rtp-smp.ads: Likewise.\n\t* libgnat/system-vxworks7-ppc-rtp-smp.ads: Likewise.\n\t* libgnat/system-vxworks7-ppc64-rtp-smp.ads: Likewise.\n\t* libgnat/system-vxworks7-x86-kernel.ads: Likewise.\n\t* libgnat/system-vxworks7-x86-rtp-smp.ads: Likewise.\n\t* libgnat/system-vxworks7-x86_64-kernel.ads: Likewise.\n\t* libgnat/system-vxworks7-x86_64-rtp-smp.ads: Likewise.\n\nFrom-SVN: r260876", "tree": {"sha": "985fe7a6d4ee2c3b8cc794c84f41a3ef891b88e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/985fe7a6d4ee2c3b8cc794c84f41a3ef891b88e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f1edbd3ac32fe45d5bd48fd1fa42a17aee6e14d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f1edbd3ac32fe45d5bd48fd1fa42a17aee6e14d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f1edbd3ac32fe45d5bd48fd1fa42a17aee6e14d"}], "stats": {"total": 135, "additions": 95, "deletions": 40}, "files": [{"sha": "0539fd2c4722dd11d54b530d40e62933e9a37174", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "patch": "@@ -1,3 +1,27 @@\n+2018-05-29  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* vx_crtbegin.inc: Use a consistent naming convention for the\n+\tregistration/deregistration functions across RTP or kernel.  Remove the\n+\tctor/dtor attribute setting based on RTP/kernel, expect the optional\n+\tattribute extension to be provided by includers instead.\n+\t* vx_crtbegin.c: Mere inclusion of vx_crtbegin.inc with empty attribute\n+\textension for the registration/deregistration functions.\n+\t* vx_crtbegin_attr.c: New file. Include vx_crtbegin.inc with explicit\n+\tconstructor/destructor attribute extensions.\n+\t* vx_crtbegin_array.c: New file. Include vx_crtbegin.inc with empty\n+\tattribute extensions and declare _ctors/_dtors arrays.\n+\t* vx_crtbegin_auto.c: Remove.\n+\t* libgnat/system-vxworks7-aarch64-rtp-smp.ads: Use\n+\tvxworks7-gnat-crtbe-link.spec.\n+\t* libgnat/system-vxworks7-aarch64.ads: Likewise.\n+\t* libgnat/system-vxworks7-e500-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks7-ppc-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks7-ppc64-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks7-x86-kernel.ads: Likewise.\n+\t* libgnat/system-vxworks7-x86-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks7-x86_64-kernel.ads: Likewise.\n+\t* libgnat/system-vxworks7-x86_64-rtp-smp.ads: Likewise.\n+\n 2018-05-29  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* ali.adb: Minor reformatting."}, {"sha": "4fcc8d4afbc84582022601b6e06909df93dbd56e", "filename": "gcc/ada/libgnat/system-vxworks7-aarch64-rtp-smp.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-aarch64-rtp-smp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-aarch64-rtp-smp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-aarch64-rtp-smp.ads?ref=1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "patch": "@@ -120,7 +120,7 @@ package System is\n \n private\n \n-   pragma Linker_Options (\"--specs=vxworks-gnat-crtbe-link.spec\");\n+   pragma Linker_Options (\"--specs=vxworks7-gnat-crtbe-link.spec\");\n    --  Pull in crtbegin/crtend objects and register exceptions for ZCX.\n    --  This is commented out by our Makefile for SJLJ runtimes.\n "}, {"sha": "c53a6099bcdc4efdd92744e624da9d11518ad598", "filename": "gcc/ada/libgnat/system-vxworks7-aarch64.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-aarch64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-aarch64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-aarch64.ads?ref=1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "patch": "@@ -120,7 +120,7 @@ package System is\n \n private\n \n-   pragma Linker_Options (\"--specs=vxworks-gnat-crtbe-link.spec\");\n+   pragma Linker_Options (\"--specs=vxworks7-gnat-crtbe-link.spec\");\n    --  Pull in crtbegin/crtend objects and register exceptions for ZCX.\n    --  This is commented out by our Makefile for SJLJ runtimes.\n "}, {"sha": "fca69e646523f2306aac389f9135c5f48859bc22", "filename": "gcc/ada/libgnat/system-vxworks7-e500-rtp-smp.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-e500-rtp-smp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-e500-rtp-smp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-e500-rtp-smp.ads?ref=1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "patch": "@@ -120,7 +120,7 @@ package System is\n \n private\n \n-   pragma Linker_Options (\"--specs=vxworks-gnat-crtbe-link.spec\");\n+   pragma Linker_Options (\"--specs=vxworks7-gnat-crtbe-link.spec\");\n    --  Pull in crtbegin/crtend objects and register exceptions for ZCX.\n    --  This is commented out by our Makefile for SJLJ runtimes.\n "}, {"sha": "66dc1391b39ea9ebab77a4a4c88aebf67a45d504", "filename": "gcc/ada/libgnat/system-vxworks7-ppc-rtp-smp.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-ppc-rtp-smp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-ppc-rtp-smp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-ppc-rtp-smp.ads?ref=1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "patch": "@@ -120,7 +120,7 @@ package System is\n \n private\n \n-   pragma Linker_Options (\"--specs=vxworks-gnat-crtbe-link.spec\");\n+   pragma Linker_Options (\"--specs=vxworks7-gnat-crtbe-link.spec\");\n    --  Pull in crtbegin/crtend objects and register exceptions for ZCX.\n    --  This is commented out by our Makefile for SJLJ runtimes.\n "}, {"sha": "dd2830988b5a66e61ec093f81fb5d70915d882c3", "filename": "gcc/ada/libgnat/system-vxworks7-ppc64-rtp-smp.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-ppc64-rtp-smp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-ppc64-rtp-smp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-ppc64-rtp-smp.ads?ref=1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "patch": "@@ -120,7 +120,7 @@ package System is\n \n private\n \n-   pragma Linker_Options (\"--specs=vxworks-gnat-crtbe-link.spec\");\n+   pragma Linker_Options (\"--specs=vxworks7-gnat-crtbe-link.spec\");\n    --  Pull in crtbegin/crtend objects and register exceptions for ZCX.\n    --  This is commented out by our Makefile for SJLJ runtimes.\n "}, {"sha": "d325ba39671b74b91176bc24d26912d32c0e612c", "filename": "gcc/ada/libgnat/system-vxworks7-x86-kernel.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-x86-kernel.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-x86-kernel.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-x86-kernel.ads?ref=1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "patch": "@@ -118,7 +118,7 @@ package System is\n \n private\n \n-   pragma Linker_Options (\"--specs=vxworks-gnat-crtbe-link.spec\");\n+   pragma Linker_Options (\"--specs=vxworks7-gnat-crtbe-link.spec\");\n    --  Pull in crtbegin/crtend objects and register exceptions for ZCX.\n    --  This is commented out by our Makefile for SJLJ runtimes.\n "}, {"sha": "bafd8f6d529d203dfb40424c0d7b468cbd8bba1c", "filename": "gcc/ada/libgnat/system-vxworks7-x86-rtp-smp.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-x86-rtp-smp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-x86-rtp-smp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-x86-rtp-smp.ads?ref=1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "patch": "@@ -118,7 +118,7 @@ package System is\n \n private\n \n-   pragma Linker_Options (\"--specs=vxworks-gnat-crtbe-link.spec\");\n+   pragma Linker_Options (\"--specs=vxworks7-gnat-crtbe-link.spec\");\n    --  Pull in crtbegin/crtend objects and register exceptions for ZCX.\n    --  This is commented out by our Makefile for SJLJ runtimes.\n "}, {"sha": "39d6fb097814668dee5f243f59d43a7d6c09db81", "filename": "gcc/ada/libgnat/system-vxworks7-x86_64-kernel.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-x86_64-kernel.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-x86_64-kernel.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-x86_64-kernel.ads?ref=1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "patch": "@@ -118,7 +118,7 @@ package System is\n \n private\n \n-   pragma Linker_Options (\"--specs=vxworks-gnat-crtbe-link.spec\");\n+   pragma Linker_Options (\"--specs=vxworks7-gnat-crtbe-link.spec\");\n    --  Pull in crtbegin/crtend objects and register exceptions for ZCX.\n    --  This is commented out by our Makefile for SJLJ runtimes.\n "}, {"sha": "145b6eeb99cb0df7938a47856347a6d01820d3cf", "filename": "gcc/ada/libgnat/system-vxworks7-x86_64-rtp-smp.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-x86_64-rtp-smp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-x86_64-rtp-smp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-x86_64-rtp-smp.ads?ref=1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "patch": "@@ -118,7 +118,7 @@ package System is\n \n private\n \n-   pragma Linker_Options (\"--specs=vxworks-gnat-crtbe-link.spec\");\n+   pragma Linker_Options (\"--specs=vxworks7-gnat-crtbe-link.spec\");\n    --  Pull in crtbegin/crtend objects and register exceptions for ZCX.\n    --  This is commented out by our Makefile for SJLJ runtimes.\n "}, {"sha": "b52bdade996d4d8608e4eb698e7dabd2c6bb339e", "filename": "gcc/ada/vx_crtbegin.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Fvx_crtbegin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Fvx_crtbegin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvx_crtbegin.c?ref=1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "patch": "@@ -30,10 +30,10 @@\n  ****************************************************************************/\n \n /* crtbegin kind of file for ehframe registration/deregistration\n-   purposes on VxWorks.  This variant exposes the ctor/dtor functions\n-   as visible entities so they're picked by the WRS muncher.  */\n-\n-#define CDTOR_VISIBILITY\n-#include \"vx_crtbegin.inc\"\n+   purposes on VxWorks.  This variant exposes just the ctor/dtor functions\n+   without any particular attribute.  */\n \n+#define CTOR_ATTRIBUTE\n+#define DTOR_ATTRIBUTE\n \n+#include \"vx_crtbegin.inc\""}, {"sha": "ad3df31cad5abe980cabcdc6b33df980f98f0422", "filename": "gcc/ada/vx_crtbegin.inc", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Fvx_crtbegin.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Fvx_crtbegin.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvx_crtbegin.inc?ref=1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "patch": "@@ -39,37 +39,29 @@\n #include \"tm.h\"\n #include \"unwind-dw2-fde.h\"\n \n-/* Pick names that the VxWorks muncher will get if involved.\n-   Note: ppc64-vx7 diab uses \"_STI_15...\" for C++ in kernel mode,\n-   not \"_GLOBAL__{I,D}...\". ???  */\n+/* Pick names that the VxWorks muncher will get if involved and leave the\n+   symbols with public visibility.  Hiding by default is pointless and even\n+   problematic in some configurations.  When the presence of these\n+   constructors is an issue, best is not to include the crt object files at\n+   all.  */\n \n-#ifdef __RTP__\n-/* 101 is the highest user level priority allowed by VxWorks.  */\n-#define CTOR_NAME _STI__101____crtbe_register_frame\n-#define DTOR_NAME _STI__101____crtbe_deregister_frame\n-#define CTOR_ATTRIBUTE __attribute__((constructor(101)))\n-#define DTOR_ATTRIBUTE __attribute__((destructor(101)))\n-#else\n-#define CTOR_NAME _GLOBAL__I___crtbe_register_frame\n-#define DTOR_NAME _GLOBAL__D___crtbe_deregister_frame\n-#define CTOR_ATTRIBUTE __attribute__((unused))\n-#define DTOR_ATTRIBUTE __attribute__((unused))\n-#endif\n+#define CTOR_NAME _STI__101___crtbe_register_frame\n+#define DTOR_NAME _STD__101___crtbe_deregister_frame\n \n-CDTOR_VISIBILITY void CTOR_NAME (void) CTOR_ATTRIBUTE;\n-CDTOR_VISIBILITY void DTOR_NAME (void) DTOR_ATTRIBUTE;\n+void CTOR_NAME (void) CTOR_ATTRIBUTE;\n+void DTOR_NAME (void) DTOR_ATTRIBUTE;\n \n static const char __EH_FRAME_BEGIN__[]\n __attribute__((section(EH_FRAME_SECTION_NAME), aligned(4)))\n   = { };\n \n-CDTOR_VISIBILITY void CTOR_NAME (void)\n+void CTOR_NAME (void)\n {\n   static struct object object;\n   __register_frame_info (__EH_FRAME_BEGIN__, &object);\n }\n \n-CDTOR_VISIBILITY void DTOR_NAME (void)\n+void DTOR_NAME (void)\n {\n   __deregister_frame_info (__EH_FRAME_BEGIN__);\n }"}, {"sha": "b2740ae4406dc584fc44f657ee5ccb906717433e", "filename": "gcc/ada/vx_crtbegin_array.c", "status": "renamed", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Fvx_crtbegin_array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Fvx_crtbegin_array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvx_crtbegin_array.c?ref=1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "patch": "@@ -33,15 +33,12 @@\n    purposes on VxWorks.  This variant provides _ctors and _dtors\n    arrays that the kernel module loader knows to process when it has\n    been configured for this purpose (c++ constructor strategy set to\n-   automatic).  The ctor/dtor functions need not be visible in this\n-   case.  */\n+   automatic).  */\n \n-#define CDTOR_VISIBILITY static\n-#include \"vx_crtbegin.inc\"\n+#define CTOR_ATTRIBUTE\n+#define DTOR_ATTRIBUTE\n \n-/* Diab C++ for ppc64-vx7 crtbegin wants to declare a\n-   char dso_handle = 0;\n-   here. ???  */\n+#include \"vx_crtbegin.inc\"\n \n typedef void (*func_ptr) (void);\n func_ptr _dtors [] = {DTOR_NAME, 0};", "previous_filename": "gcc/ada/vx_crtbegin_auto.c"}, {"sha": "19fbe6061bb9ca83784da241f0fddfafebad0711", "filename": "gcc/ada/vx_crtbegin_attr.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Fvx_crtbegin_attr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f39fcd651b3334e7b12b35f7e822ca6c4b57376/gcc%2Fada%2Fvx_crtbegin_attr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvx_crtbegin_attr.c?ref=1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "patch": "@@ -0,0 +1,42 @@\n+/****************************************************************************\n+ *                                                                          *\n+ *                         GNAT COMPILER COMPONENTS                         *\n+ *                                                                          *\n+ *                          V X _ C R T B E G I N                           *\n+ *                                                                          *\n+ *                          C Implementation File                           *\n+ *                                                                          *\n+ *              Copyright (C) 2016-2018, Free Software Foundation, Inc.     *\n+ *                                                                          *\n+ * GNAT is free software;  you can  redistribute it  and/or modify it under *\n+ * terms of the  GNU General Public License as published  by the Free Soft- *\n+ * ware  Foundation;  either version 3,  or (at your option) any later ver- *\n+ * sion.  GNAT is distributed in the hope that it will be useful, but WITH- *\n+ * OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY *\n+ * or FITNESS FOR A PARTICULAR PURPOSE.                                     *\n+ *                                                                          *\n+ * As a special exception under Section 7 of GPL version 3, you are granted *\n+ * additional permissions described in the GCC Runtime Library Exception,   *\n+ * version 3.1, as published by the Free Software Foundation.               *\n+ *                                                                          *\n+ * You should have received a copy of the GNU General Public License and    *\n+ * a copy of the GCC Runtime Library Exception along with this program;     *\n+ * see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    *\n+ * <http://www.gnu.org/licenses/>.                                          *\n+ *                                                                          *\n+ * GNAT was originally developed  by the GNAT team at  New York University. *\n+ * Extensive contributions were provided by Ada Core Technologies Inc.      *\n+ *                                                                          *\n+ ****************************************************************************/\n+\n+/* crtbegin kind of file for ehframe registration/deregistration\n+   purposes on VxWorks.  This variant exposes the ctor/dtor functions\n+   as explicit constructors, expected to be placed in a .ctors/.dtors\n+   section.  */\n+\n+/* 101 is the highest user level priority allowed by VxWorks.  */\n+\n+#define CTOR_ATTRIBUTE __attribute__((constructor(101)))\n+#define DTOR_ATTRIBUTE __attribute__((destructor(101)))\n+\n+#include \"vx_crtbegin.inc\""}]}