{"sha": "f5da225ef4db99f6efa1a5f81a820a00a57cc12f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVkYTIyNWVmNGRiOTlmNmVmYTFhNWY4MWE4MjBhMDBhNTdjYzEyZg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-04-21T19:56:11Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-04-21T19:56:11Z"}, "message": "(mem_aligned_8): Don't assume addresses with\nMEM_IN_STRUCT_P set are 8 byte aligned.\n\nFrom-SVN: r7128", "tree": {"sha": "13c3fac533019e8fd567a08e5f82fde82b522428", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13c3fac533019e8fd567a08e5f82fde82b522428"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5da225ef4db99f6efa1a5f81a820a00a57cc12f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5da225ef4db99f6efa1a5f81a820a00a57cc12f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5da225ef4db99f6efa1a5f81a820a00a57cc12f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5da225ef4db99f6efa1a5f81a820a00a57cc12f/comments", "author": null, "committer": null, "parents": [{"sha": "9db8b14a27423427cff86b0d399ece20a5e36965", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9db8b14a27423427cff86b0d399ece20a5e36965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9db8b14a27423427cff86b0d399ece20a5e36965"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "7b909974b97eed57e967ad3f6b35075eedb1d9db", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da225ef4db99f6efa1a5f81a820a00a57cc12f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da225ef4db99f6efa1a5f81a820a00a57cc12f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=f5da225ef4db99f6efa1a5f81a820a00a57cc12f", "patch": "@@ -1032,10 +1032,13 @@ mem_aligned_8 (mem)\n     }\n   /* Anything else we know is properly aligned unless TARGET_UNALIGNED_DOUBLES\n      is true, in which case we can only assume that an access is aligned if\n-     it is to an aggregate, it is to a constant address, or the address\n-     involves a LO_SUM.  */\n-  else if (! TARGET_UNALIGNED_DOUBLES || MEM_IN_STRUCT_P (mem)\n-\t   || CONSTANT_P (addr) || GET_CODE (addr) == LO_SUM)\n+     it is to a constant address, or the address involves a LO_SUM.\n+\n+     We used to assume an address was aligned if MEM_IN_STRUCT_P was true.\n+     That assumption was deleted so that gcc generated code can be used with\n+     memory allocators that only guarantee 4 byte alignment.  */\n+  else if (! TARGET_UNALIGNED_DOUBLES || CONSTANT_P (addr)\n+\t   || GET_CODE (addr) == LO_SUM)\n     return 1;\n \n   /* An obviously unaligned address.  */"}]}