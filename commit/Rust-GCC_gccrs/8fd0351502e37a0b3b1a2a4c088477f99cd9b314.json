{"sha": "8fd0351502e37a0b3b1a2a4c088477f99cd9b314", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZkMDM1MTUwMmUzN2EwYjNiMWEyYTRjMDg4NDc3Zjk5Y2Q5YjMxNA==", "commit": {"author": {"name": "Xinyu Qi", "email": "xyqi@marvell.com", "date": "2012-06-13T07:28:51Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2012-06-13T07:28:51Z"}, "message": "arm.c (FL_IWMMXT2): New define.\n\n\t* config/arm/arm.c (FL_IWMMXT2): New define.\n\t(arm_arch_iwmmxt2): New variable.\n\t(arm_option_override): Enable use of iWMMXt with VFP.\n\tDisable use of iWMMXt with NEON. Disable use of iWMMXt under\n\tThumb mode. Set arm_arch_iwmmxt2.\n\t(arm_expand_binop_builtin): Accept VOIDmode op.\n\t(enum arm_builtins): Revise built-in fcode.\n\t(IWMMXT2_BUILTIN): New define.\n\t(IWMMXT2_BUILTIN2): Likewise.\n\t(iwmmx2_mbuiltin): Likewise.\n\t(builtin_description bdesc_2arg): Revise built in declaration.\n\t(builtin_description bdesc_1arg): Likewise.\n\t(arm_init_iwmmxt_builtins): Revise built in initialization.\n\t(arm_expand_builtin): Revise built in expansion.\n\t(arm_output_iwmmxt_shift_immediate): New function.\n\t(arm_output_iwmmxt_tinsr): Likewise.\n\t* config/arm/arm-protos.h (arm_output_iwmmxt_shift_immediate): Declare.\n\t(arm_output_iwmmxt_tinsr): Likewise.\n\t* config/arm/iwmmxt.md (WCGR0, WCGR1, WCGR2, WCGR3): New constant.\n\t(iwmmxt_psadbw, iwmmxt_walign, iwmmxt_tmrc, iwmmxt_tmcr): Delete.\n\t(rorv4hi3, rorv2si3, rordi3): Likewise.\n\t(rorv4hi3_di, rorv2si3_di, rordi3_di): Likewise.\n\t(ashrv4hi3_di, ashrv2si3_di, ashrdi3_di): Likewise.\n\t(lshrv4hi3_di, lshrv2si3_di, lshrdi3_di): Likewise.\n\t(ashlv4hi3_di, ashlv2si3_di, ashldi3_di): Likewise.\n\t(iwmmxt_tbcstqi, iwmmxt_tbcsthi, iwmmxt_tbcstsi): Likewise\n\t(*iwmmxt_clrv8qi, *iwmmxt_clrv4hi, *iwmmxt_clrv2si): Likewise.\n\t(tbcstv8qi, tbcstv4hi, tbsctv2si): New pattern.\n\t(iwmmxt_clrv8qi, iwmmxt_clrv4hi, iwmmxt_clrv2si): Likewise.\n\t(*and<mode>3_iwmmxt, *ior<mode>3_iwmmxt, *xor<mode>3_iwmmxt): Likewise.\n\t(ror<mode>3, ror<mode>3_di): Likewise.\n\t(ashr<mode>3_di, lshr<mode>3_di, ashl<mode>3_di): Likewise.\n\t(ashli<mode>3_iwmmxt, iwmmxt_waligni, iwmmxt_walignr): Likewise.\n\t(iwmmxt_walignr0, iwmmxt_walignr1): Likewise.\n\t(iwmmxt_walignr2, iwmmxt_walignr3): Likewise.\n\t(iwmmxt_setwcgr0, iwmmxt_setwcgr1): Likewise.\n\t(iwmmxt_setwcgr2, iwmmxt_setwcgr3): Likewise.\n\t(iwmmxt_getwcgr0, iwmmxt_getwcgr1): Likewise.\n\t(iwmmxt_getwcgr2, iwmmxt_getwcgr3): Likewise.\n\t(All instruction patterns): Add wtype attribute.\n\t(*iwmmxt_arm_movdi, *iwmmxt_movsi_insn): iWMMXt coexist with vfp.\n\t(iwmmxt_uavgrndv8qi3, iwmmxt_uavgrndv4hi3): Revise the pattern.\n\t(iwmmxt_uavgv8qi3, iwmmxt_uavgv4hi3): Likewise.\n\t(ashr<mode>3_iwmmxt, ashl<mode>3_iwmmxt, lshr<mode>3_iwmmxt): Likewise.\n\t(iwmmxt_tinsrb, iwmmxt_tinsrh, iwmmxt_tinsrw):Likewise.\n\t(eqv8qi3, eqv4hi3, eqv2si3, gtuv8qi3): Likewise.\n\t(gtuv4hi3, gtuv2si3, gtv8qi3, gtv4hi3, gtv2si3): Likewise.\n\t(iwmmxt_wunpckihh, iwmmxt_wunpckihw, iwmmxt_wunpckilh): Likewise.\n\t(iwmmxt_wunpckilw, iwmmxt_wunpckehub, iwmmxt_wunpckehuh): Likewise.\n\t(iwmmxt_wunpckehuw, iwmmxt_wunpckehsb, iwmmxt_wunpckehsh): Likewise.\n\t(iwmmxt_wunpckehsw, iwmmxt_wunpckelub, iwmmxt_wunpckeluh): Likewise.\n\t(iwmmxt_wunpckeluw, iwmmxt_wunpckelsb, iwmmxt_wunpckelsh): Likewise.\n\t(iwmmxt_wunpckelsw, iwmmxt_wmadds, iwmmxt_wmaddu): Likewise.\n\t(iwmmxt_wsadb, iwmmxt_wsadh, iwmmxt_wsadbz, iwmmxt_wsadhz): Likewise.\n\t(iwmmxt2.md): Include.\n\t* config/arm/arm.h (TARGET_CPU_CPP_BUILTINS): Define __IWMMXT2__.\n\t(TARGET_IWMMXT2): New define.\n\t(TARGET_REALLY_IWMMXT2): Likewise.\n\t(arm_arch_iwmmxt2): Declare.\n\t* config/arm/mmintrin.h: Use __IWMMXT__ to enable iWMMXt intrinsics.\n\tUse __IWMMXT2__ to enable iWMMXt2 intrinsics.\n\tUse C name-mangling for intrinsics.\n\t(__v8qi): Redefine.\n\t(_mm_cvtsi32_si64, _mm_andnot_si64, _mm_sad_pu8): Revise.\n\t(_mm_sad_pu16, _mm_align_si64, _mm_setwcx, _mm_getwcx): Likewise.\n\t(_m_from_int): Likewise.\n\t(_mm_sada_pu8, _mm_sada_pu16): New intrinsic.\n\t(_mm_alignr0_si64, _mm_alignr1_si64, _mm_alignr2_si64): Likewise.\n\t(_mm_alignr3_si64, _mm_tandcb, _mm_tandch, _mm_tandcw): Likewise.\n\t(_mm_textrcb, _mm_textrch, _mm_textrcw, _mm_torcb): Likewise.\n\t(_mm_torch, _mm_torcw, _mm_tbcst_pi8, _mm_tbcst_pi16): Likewise.\n\t(_mm_tbcst_pi32): Likewise.\n\t(_mm_abs_pi8, _mm_abs_pi16, _mm_abs_pi32): New iWMMXt2 intrinsic.\n\t(_mm_addsubhx_pi16, _mm_absdiff_pu8, _mm_absdiff_pu16): Likewise.\n\t(_mm_absdiff_pu32, _mm_addc_pu16, _mm_addc_pu32): Likewise.\n\t(_mm_avg4_pu8, _mm_avg4r_pu8, _mm_maddx_pi16, _mm_maddx_pu16): Likewise.\n\t(_mm_msub_pi16, _mm_msub_pu16, _mm_mulhi_pi32): Likewise.\n\t(_mm_mulhi_pu32, _mm_mulhir_pi16, _mm_mulhir_pi32): Likewise.\n\t(_mm_mulhir_pu16, _mm_mulhir_pu32, _mm_mullo_pi32): Likewise.\n\t(_mm_qmulm_pi16, _mm_qmulm_pi32, _mm_qmulmr_pi16): Likewise.\n\t(_mm_qmulmr_pi32, _mm_subaddhx_pi16, _mm_addbhusl_pu8): Likewise.\n\t(_mm_addbhusm_pu8, _mm_qmiabb_pi32, _mm_qmiabbn_pi32): Likewise.\n\t(_mm_qmiabt_pi32, _mm_qmiabtn_pi32, _mm_qmiatb_pi32): Likewise.\n\t(_mm_qmiatbn_pi32, _mm_qmiatt_pi32, _mm_qmiattn_pi32): Likewise.\n\t(_mm_wmiabb_si64, _mm_wmiabbn_si64, _mm_wmiabt_si64): Likewise.\n\t(_mm_wmiabtn_si64, _mm_wmiatb_si64, _mm_wmiatbn_si64): Likewise.\n\t(_mm_wmiatt_si64, _mm_wmiattn_si64, _mm_wmiawbb_si64): Likewise.\n\t(_mm_wmiawbbn_si64, _mm_wmiawbt_si64, _mm_wmiawbtn_si64): Likewise.\n\t(_mm_wmiawtb_si64, _mm_wmiawtbn_si64, _mm_wmiawtt_si64): Likewise.\n\t(_mm_wmiawttn_si64, _mm_merge_si64): Likewise.\n\t(_mm_torvscb, _mm_torvsch, _mm_torvscw): Likewise.\n\t(_m_to_int): New define.\n\t* config/arm/arm-cores.def (iwmmxt2): Add FL_IWMMXT2.\n\t* config/arm/arm-arches.def (iwmmxt2): Likewise.\n\t* config/arm/t-arm (MD_INCLUDES): Add marvell-f-iwmmxt.md and\n\tiwmmxt2.md.\n\t* config/arm/arm.md (marvell-f-iwmmxt.md): Include.\n\t(arch): Add \"iwmmxt2\".\n\t(arch_enabled): Handle \"iwmmxt2\".\n\t(wtype): New attribute.\n\t(UNSPEC_WMADDS, UNSPEC_WMADDU): Delete.\n\t(UNSPEC_WALIGNI): New unspec.\n\t* config/arm/predicates.md (imm_or_reg_operand): New predicate.\n\t* config/arm/iterators.md (VMMX2): New mode_iterator.\n\t* config/arm/marvell-f-iwmmxt.md: New file.\n\t* config/arm/iwmmxt2.md: New file.\n\nFrom-SVN: r188497", "tree": {"sha": "cf9ecf54584657a5da36878a6106053ca8f75dee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf9ecf54584657a5da36878a6106053ca8f75dee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fd0351502e37a0b3b1a2a4c088477f99cd9b314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd0351502e37a0b3b1a2a4c088477f99cd9b314", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fd0351502e37a0b3b1a2a4c088477f99cd9b314", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/comments", "author": null, "committer": null, "parents": [{"sha": "73b5b93a594570a013c1a082bed1e3da51785f76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73b5b93a594570a013c1a082bed1e3da51785f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73b5b93a594570a013c1a082bed1e3da51785f76"}], "stats": {"total": 4394, "additions": 3622, "deletions": 772}, "files": [{"sha": "caa88ba0f45b3db2ae99b30b86a03a47995e06e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fd0351502e37a0b3b1a2a4c088477f99cd9b314", "patch": "@@ -1,3 +1,112 @@\n+2012-06-13  Xinyu Qi <xyqi@marvell.com>\n+\n+\t* config/arm/arm.c (FL_IWMMXT2): New define.\n+\t(arm_arch_iwmmxt2): New variable.\n+\t(arm_option_override): Enable use of iWMMXt with VFP.\n+\tDisable use of iWMMXt with NEON. Disable use of iWMMXt under\n+\tThumb mode. Set arm_arch_iwmmxt2.\n+\t(arm_expand_binop_builtin): Accept VOIDmode op.\n+\t(enum arm_builtins): Revise built-in fcode.\n+\t(IWMMXT2_BUILTIN): New define.\n+\t(IWMMXT2_BUILTIN2): Likewise.\n+\t(iwmmx2_mbuiltin): Likewise.\n+\t(builtin_description bdesc_2arg): Revise built in declaration.\n+\t(builtin_description bdesc_1arg): Likewise.\n+\t(arm_init_iwmmxt_builtins): Revise built in initialization.\n+\t(arm_expand_builtin): Revise built in expansion.\n+\t(arm_output_iwmmxt_shift_immediate): New function.\n+\t(arm_output_iwmmxt_tinsr): Likewise.\n+\t* config/arm/arm-protos.h (arm_output_iwmmxt_shift_immediate): Declare.\n+\t(arm_output_iwmmxt_tinsr): Likewise.\n+\t* config/arm/iwmmxt.md (WCGR0, WCGR1, WCGR2, WCGR3): New constant.\n+\t(iwmmxt_psadbw, iwmmxt_walign, iwmmxt_tmrc, iwmmxt_tmcr): Delete.\n+\t(rorv4hi3, rorv2si3, rordi3): Likewise.\n+\t(rorv4hi3_di, rorv2si3_di, rordi3_di): Likewise.\n+\t(ashrv4hi3_di, ashrv2si3_di, ashrdi3_di): Likewise.\n+\t(lshrv4hi3_di, lshrv2si3_di, lshrdi3_di): Likewise.\n+\t(ashlv4hi3_di, ashlv2si3_di, ashldi3_di): Likewise.\n+\t(iwmmxt_tbcstqi, iwmmxt_tbcsthi, iwmmxt_tbcstsi): Likewise\n+\t(*iwmmxt_clrv8qi, *iwmmxt_clrv4hi, *iwmmxt_clrv2si): Likewise.\n+\t(tbcstv8qi, tbcstv4hi, tbsctv2si): New pattern.\n+\t(iwmmxt_clrv8qi, iwmmxt_clrv4hi, iwmmxt_clrv2si): Likewise.\n+\t(*and<mode>3_iwmmxt, *ior<mode>3_iwmmxt, *xor<mode>3_iwmmxt): Likewise.\n+\t(ror<mode>3, ror<mode>3_di): Likewise.\n+\t(ashr<mode>3_di, lshr<mode>3_di, ashl<mode>3_di): Likewise.\n+\t(ashli<mode>3_iwmmxt, iwmmxt_waligni, iwmmxt_walignr): Likewise.\n+\t(iwmmxt_walignr0, iwmmxt_walignr1): Likewise.\n+\t(iwmmxt_walignr2, iwmmxt_walignr3): Likewise.\n+\t(iwmmxt_setwcgr0, iwmmxt_setwcgr1): Likewise.\n+\t(iwmmxt_setwcgr2, iwmmxt_setwcgr3): Likewise.\n+\t(iwmmxt_getwcgr0, iwmmxt_getwcgr1): Likewise.\n+\t(iwmmxt_getwcgr2, iwmmxt_getwcgr3): Likewise.\n+\t(All instruction patterns): Add wtype attribute.\n+\t(*iwmmxt_arm_movdi, *iwmmxt_movsi_insn): iWMMXt coexist with vfp.\n+\t(iwmmxt_uavgrndv8qi3, iwmmxt_uavgrndv4hi3): Revise the pattern.\n+\t(iwmmxt_uavgv8qi3, iwmmxt_uavgv4hi3): Likewise.\n+\t(ashr<mode>3_iwmmxt, ashl<mode>3_iwmmxt, lshr<mode>3_iwmmxt): Likewise.\n+\t(iwmmxt_tinsrb, iwmmxt_tinsrh, iwmmxt_tinsrw):Likewise.\n+\t(eqv8qi3, eqv4hi3, eqv2si3, gtuv8qi3): Likewise.\n+\t(gtuv4hi3, gtuv2si3, gtv8qi3, gtv4hi3, gtv2si3): Likewise.\n+\t(iwmmxt_wunpckihh, iwmmxt_wunpckihw, iwmmxt_wunpckilh): Likewise.\n+\t(iwmmxt_wunpckilw, iwmmxt_wunpckehub, iwmmxt_wunpckehuh): Likewise.\n+\t(iwmmxt_wunpckehuw, iwmmxt_wunpckehsb, iwmmxt_wunpckehsh): Likewise.\n+\t(iwmmxt_wunpckehsw, iwmmxt_wunpckelub, iwmmxt_wunpckeluh): Likewise.\n+\t(iwmmxt_wunpckeluw, iwmmxt_wunpckelsb, iwmmxt_wunpckelsh): Likewise.\n+\t(iwmmxt_wunpckelsw, iwmmxt_wmadds, iwmmxt_wmaddu): Likewise.\n+\t(iwmmxt_wsadb, iwmmxt_wsadh, iwmmxt_wsadbz, iwmmxt_wsadhz): Likewise.\n+\t(iwmmxt2.md): Include.\n+\t* config/arm/arm.h (TARGET_CPU_CPP_BUILTINS): Define __IWMMXT2__.\n+\t(TARGET_IWMMXT2): New define.\n+\t(TARGET_REALLY_IWMMXT2): Likewise.\n+\t(arm_arch_iwmmxt2): Declare.\n+\t* config/arm/mmintrin.h: Use __IWMMXT__ to enable iWMMXt intrinsics.\n+\tUse __IWMMXT2__ to enable iWMMXt2 intrinsics.\n+\tUse C name-mangling for intrinsics.\n+\t(__v8qi): Redefine.\n+\t(_mm_cvtsi32_si64, _mm_andnot_si64, _mm_sad_pu8): Revise.\n+\t(_mm_sad_pu16, _mm_align_si64, _mm_setwcx, _mm_getwcx): Likewise.\n+\t(_m_from_int): Likewise.\n+\t(_mm_sada_pu8, _mm_sada_pu16): New intrinsic.\n+\t(_mm_alignr0_si64, _mm_alignr1_si64, _mm_alignr2_si64): Likewise.\n+\t(_mm_alignr3_si64, _mm_tandcb, _mm_tandch, _mm_tandcw): Likewise.\n+\t(_mm_textrcb, _mm_textrch, _mm_textrcw, _mm_torcb): Likewise.\n+\t(_mm_torch, _mm_torcw, _mm_tbcst_pi8, _mm_tbcst_pi16): Likewise.\n+\t(_mm_tbcst_pi32): Likewise.\n+\t(_mm_abs_pi8, _mm_abs_pi16, _mm_abs_pi32): New iWMMXt2 intrinsic.\n+\t(_mm_addsubhx_pi16, _mm_absdiff_pu8, _mm_absdiff_pu16): Likewise.\n+\t(_mm_absdiff_pu32, _mm_addc_pu16, _mm_addc_pu32): Likewise.\n+\t(_mm_avg4_pu8, _mm_avg4r_pu8, _mm_maddx_pi16, _mm_maddx_pu16): Likewise.\n+\t(_mm_msub_pi16, _mm_msub_pu16, _mm_mulhi_pi32): Likewise.\n+\t(_mm_mulhi_pu32, _mm_mulhir_pi16, _mm_mulhir_pi32): Likewise.\n+\t(_mm_mulhir_pu16, _mm_mulhir_pu32, _mm_mullo_pi32): Likewise.\n+\t(_mm_qmulm_pi16, _mm_qmulm_pi32, _mm_qmulmr_pi16): Likewise.\n+\t(_mm_qmulmr_pi32, _mm_subaddhx_pi16, _mm_addbhusl_pu8): Likewise.\n+\t(_mm_addbhusm_pu8, _mm_qmiabb_pi32, _mm_qmiabbn_pi32): Likewise.\n+\t(_mm_qmiabt_pi32, _mm_qmiabtn_pi32, _mm_qmiatb_pi32): Likewise.\n+\t(_mm_qmiatbn_pi32, _mm_qmiatt_pi32, _mm_qmiattn_pi32): Likewise.\n+\t(_mm_wmiabb_si64, _mm_wmiabbn_si64, _mm_wmiabt_si64): Likewise.\n+\t(_mm_wmiabtn_si64, _mm_wmiatb_si64, _mm_wmiatbn_si64): Likewise.\n+\t(_mm_wmiatt_si64, _mm_wmiattn_si64, _mm_wmiawbb_si64): Likewise.\n+\t(_mm_wmiawbbn_si64, _mm_wmiawbt_si64, _mm_wmiawbtn_si64): Likewise.\n+\t(_mm_wmiawtb_si64, _mm_wmiawtbn_si64, _mm_wmiawtt_si64): Likewise.\n+\t(_mm_wmiawttn_si64, _mm_merge_si64): Likewise.\n+\t(_mm_torvscb, _mm_torvsch, _mm_torvscw): Likewise.\n+\t(_m_to_int): New define.\n+\t* config/arm/arm-cores.def (iwmmxt2): Add FL_IWMMXT2.\n+\t* config/arm/arm-arches.def (iwmmxt2): Likewise.\n+\t* config/arm/t-arm (MD_INCLUDES): Add marvell-f-iwmmxt.md and\n+\tiwmmxt2.md.\n+\t* config/arm/arm.md (marvell-f-iwmmxt.md): Include.\n+\t(arch): Add \"iwmmxt2\".\n+\t(arch_enabled): Handle \"iwmmxt2\".\n+\t(wtype): New attribute.\n+\t(UNSPEC_WMADDS, UNSPEC_WMADDU): Delete.\n+\t(UNSPEC_WALIGNI): New unspec.\n+\t* config/arm/predicates.md (imm_or_reg_operand): New predicate.\n+\t* config/arm/iterators.md (VMMX2): New mode_iterator.\n+\t* config/arm/marvell-f-iwmmxt.md: New file.\n+\t* config/arm/iwmmxt2.md: New file.\n+\n 2012-06-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/53532"}, {"sha": "fc62e51e268d6d4eb687afdb129d333df8c05ee6", "filename": "gcc/config/arm/arm-arches.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Farm-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Farm-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-arches.def?ref=8fd0351502e37a0b3b1a2a4c088477f99cd9b314", "patch": "@@ -1,6 +1,6 @@\n /* ARM CPU architectures.\n    Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n-   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -57,4 +57,4 @@ ARM_ARCH(\"armv7-m\", cortexm3,\t7M,  FL_CO_PROC |\t      FL_FOR_ARCH7M)\n ARM_ARCH(\"armv7e-m\", cortexm4,  7EM, FL_CO_PROC |\t      FL_FOR_ARCH7EM)\n ARM_ARCH(\"ep9312\",  ep9312,     4T,  FL_LDSCHED | FL_CIRRUS | FL_FOR_ARCH4)\n ARM_ARCH(\"iwmmxt\",  iwmmxt,     5TE, FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT)\n-ARM_ARCH(\"iwmmxt2\", iwmmxt2,    5TE, FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT)\n+ARM_ARCH(\"iwmmxt2\", iwmmxt2,    5TE, FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2)"}, {"sha": "140777109ee7bad641f6891fdf3a8fa9b99ce9c8", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=8fd0351502e37a0b3b1a2a4c088477f99cd9b314", "patch": "@@ -1,5 +1,5 @@\n /* ARM CPU Cores\n-   Copyright (C) 2003, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2003, 2005, 2006, 2007, 2008, 2009, 2010, 2012\n    Free Software Foundation, Inc.\n    Written by CodeSourcery, LLC\n \n@@ -105,7 +105,7 @@ ARM_CORE(\"arm1020e\",      arm1020e,\t5TE,\t\t\t\t FL_LDSCHED, fastmul)\n ARM_CORE(\"arm1022e\",      arm1022e,\t5TE,\t\t\t\t FL_LDSCHED, fastmul)\n ARM_CORE(\"xscale\",        xscale,\t5TE,\t                         FL_LDSCHED | FL_STRONG | FL_XSCALE, xscale)\n ARM_CORE(\"iwmmxt\",        iwmmxt,\t5TE,\t                         FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT, xscale)\n-ARM_CORE(\"iwmmxt2\",       iwmmxt2,\t5TE,\t                         FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT, xscale)\n+ARM_CORE(\"iwmmxt2\",       iwmmxt2,\t5TE,\t                         FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2, xscale)\n ARM_CORE(\"fa606te\",       fa606te,      5TE,                             FL_LDSCHED, 9e)\n ARM_CORE(\"fa626te\",       fa626te,      5TE,                             FL_LDSCHED, 9e)\n ARM_CORE(\"fmp626\",        fmp626,       5TE,                             FL_LDSCHED, 9e)"}, {"sha": "955f3241ade82a4f5700f41df422bf78cef2bbb9", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=8fd0351502e37a0b3b1a2a4c088477f99cd9b314", "patch": "@@ -159,6 +159,8 @@ extern const char *vfp_output_fstmd (rtx *);\n extern void arm_set_return_address (rtx, rtx);\n extern int arm_eliminable_register (rtx);\n extern const char *arm_output_shift(rtx *, int);\n+extern const char *arm_output_iwmmxt_shift_immediate (const char *, rtx *, bool);\n+extern const char *arm_output_iwmmxt_tinsr (rtx *);\n extern unsigned int arm_sync_loop_insns (rtx , rtx *);\n extern int arm_attr_length_push_multi(rtx, rtx);\n extern void arm_expand_compare_and_swap (rtx op[]);"}, {"sha": "1fc18b6add6c2afab016e747337842ab91619263", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 665, "deletions": 69, "changes": 734, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=8fd0351502e37a0b3b1a2a4c088477f99cd9b314", "patch": "@@ -684,6 +684,7 @@ static int thumb_call_reg_needed;\n #define FL_ARM_DIV    (1 << 23)\t      /* Hardware divide (ARM mode).  */\n \n #define FL_IWMMXT     (1 << 29)\t      /* XScale v2 or \"Intel Wireless MMX technology\".  */\n+#define FL_IWMMXT2    (1 << 30)       /* \"Intel Wireless MMX2 technology\".  */\n \n /* Flags that only effect tuning, not available instructions.  */\n #define FL_TUNE\t\t(FL_WBUF | FL_VFPV2 | FL_STRONG | FL_LDSCHED \\\n@@ -765,6 +766,9 @@ int arm_arch_cirrus = 0;\n /* Nonzero if this chip supports Intel Wireless MMX technology.  */\n int arm_arch_iwmmxt = 0;\n \n+/* Nonzero if this chip supports Intel Wireless MMX2 technology.  */\n+int arm_arch_iwmmxt2 = 0;\n+\n /* Nonzero if this chip is an XScale.  */\n int arm_arch_xscale = 0;\n \n@@ -1716,6 +1720,7 @@ arm_option_override (void)\n   arm_tune_wbuf = (tune_flags & FL_WBUF) != 0;\n   arm_tune_xscale = (tune_flags & FL_XSCALE) != 0;\n   arm_arch_iwmmxt = (insn_flags & FL_IWMMXT) != 0;\n+  arm_arch_iwmmxt2 = (insn_flags & FL_IWMMXT2) != 0;\n   arm_arch_thumb_hwdiv = (insn_flags & FL_THUMB_DIV) != 0;\n   arm_arch_arm_hwdiv = (insn_flags & FL_ARM_DIV) != 0;\n   arm_tune_cortex_a9 = (arm_tune == cortexa9) != 0;\n@@ -1816,14 +1821,17 @@ arm_option_override (void)\n     }\n \n   /* FPA and iWMMXt are incompatible because the insn encodings overlap.\n-     VFP and iWMMXt can theoretically coexist, but it's unlikely such silicon\n-     will ever exist.  GCC makes no attempt to support this combination.  */\n-  if (TARGET_IWMMXT && !TARGET_SOFT_FLOAT)\n-    sorry (\"iWMMXt and hardware floating point\");\n+     VFP and iWMMXt however can coexist.  */\n+  if (TARGET_IWMMXT && TARGET_HARD_FLOAT && !TARGET_VFP)\n+    error (\"iWMMXt and non-VFP floating point unit are incompatible\");\n+\n+  /* iWMMXt and NEON are incompatible.  */\n+  if (TARGET_IWMMXT && TARGET_NEON)\n+    error (\"iWMMXt and NEON are incompatible\");\n \n-  /* ??? iWMMXt insn patterns need auditing for Thumb-2.  */\n-  if (TARGET_THUMB2 && TARGET_IWMMXT)\n-    sorry (\"Thumb-2 iWMMXt\");\n+  /* iWMMXt unsupported under Thumb mode.  */\n+  if (TARGET_THUMB && TARGET_IWMMXT)\n+    error (\"iWMMXt unsupported under Thumb mode\");\n \n   /* __fp16 support currently assumes the core has ldrh.  */\n   if (!arm_arch4 && arm_fp16_format != ARM_FP16_FORMAT_NONE)\n@@ -19628,8 +19636,15 @@ static neon_builtin_datum neon_builtin_data[] =\n    FIXME?  */\n enum arm_builtins\n {\n-  ARM_BUILTIN_GETWCX,\n-  ARM_BUILTIN_SETWCX,\n+  ARM_BUILTIN_GETWCGR0,\n+  ARM_BUILTIN_GETWCGR1,\n+  ARM_BUILTIN_GETWCGR2,\n+  ARM_BUILTIN_GETWCGR3,\n+\n+  ARM_BUILTIN_SETWCGR0,\n+  ARM_BUILTIN_SETWCGR1,\n+  ARM_BUILTIN_SETWCGR2,\n+  ARM_BUILTIN_SETWCGR3,\n \n   ARM_BUILTIN_WZERO,\n \n@@ -19652,7 +19667,11 @@ enum arm_builtins\n   ARM_BUILTIN_WSADH,\n   ARM_BUILTIN_WSADHZ,\n \n-  ARM_BUILTIN_WALIGN,\n+  ARM_BUILTIN_WALIGNI,\n+  ARM_BUILTIN_WALIGNR0,\n+  ARM_BUILTIN_WALIGNR1,\n+  ARM_BUILTIN_WALIGNR2,\n+  ARM_BUILTIN_WALIGNR3,\n \n   ARM_BUILTIN_TMIA,\n   ARM_BUILTIN_TMIAPH,\n@@ -19788,6 +19807,81 @@ enum arm_builtins\n   ARM_BUILTIN_WUNPCKELUH,\n   ARM_BUILTIN_WUNPCKELUW,\n \n+  ARM_BUILTIN_WABSB,\n+  ARM_BUILTIN_WABSH,\n+  ARM_BUILTIN_WABSW,\n+\n+  ARM_BUILTIN_WADDSUBHX,\n+  ARM_BUILTIN_WSUBADDHX,\n+\n+  ARM_BUILTIN_WABSDIFFB,\n+  ARM_BUILTIN_WABSDIFFH,\n+  ARM_BUILTIN_WABSDIFFW,\n+\n+  ARM_BUILTIN_WADDCH,\n+  ARM_BUILTIN_WADDCW,\n+\n+  ARM_BUILTIN_WAVG4,\n+  ARM_BUILTIN_WAVG4R,\n+\n+  ARM_BUILTIN_WMADDSX,\n+  ARM_BUILTIN_WMADDUX,\n+\n+  ARM_BUILTIN_WMADDSN,\n+  ARM_BUILTIN_WMADDUN,\n+\n+  ARM_BUILTIN_WMULWSM,\n+  ARM_BUILTIN_WMULWUM,\n+\n+  ARM_BUILTIN_WMULWSMR,\n+  ARM_BUILTIN_WMULWUMR,\n+\n+  ARM_BUILTIN_WMULWL,\n+\n+  ARM_BUILTIN_WMULSMR,\n+  ARM_BUILTIN_WMULUMR,\n+\n+  ARM_BUILTIN_WQMULM,\n+  ARM_BUILTIN_WQMULMR,\n+\n+  ARM_BUILTIN_WQMULWM,\n+  ARM_BUILTIN_WQMULWMR,\n+\n+  ARM_BUILTIN_WADDBHUSM,\n+  ARM_BUILTIN_WADDBHUSL,\n+\n+  ARM_BUILTIN_WQMIABB,\n+  ARM_BUILTIN_WQMIABT,\n+  ARM_BUILTIN_WQMIATB,\n+  ARM_BUILTIN_WQMIATT,\n+\n+  ARM_BUILTIN_WQMIABBN,\n+  ARM_BUILTIN_WQMIABTN,\n+  ARM_BUILTIN_WQMIATBN,\n+  ARM_BUILTIN_WQMIATTN,\n+\n+  ARM_BUILTIN_WMIABB,\n+  ARM_BUILTIN_WMIABT,\n+  ARM_BUILTIN_WMIATB,\n+  ARM_BUILTIN_WMIATT,\n+\n+  ARM_BUILTIN_WMIABBN,\n+  ARM_BUILTIN_WMIABTN,\n+  ARM_BUILTIN_WMIATBN,\n+  ARM_BUILTIN_WMIATTN,\n+\n+  ARM_BUILTIN_WMIAWBB,\n+  ARM_BUILTIN_WMIAWBT,\n+  ARM_BUILTIN_WMIAWTB,\n+  ARM_BUILTIN_WMIAWTT,\n+\n+  ARM_BUILTIN_WMIAWBBN,\n+  ARM_BUILTIN_WMIAWBTN,\n+  ARM_BUILTIN_WMIAWTBN,\n+  ARM_BUILTIN_WMIAWTTN,\n+\n+  ARM_BUILTIN_WMERGE,\n+\n   ARM_BUILTIN_THREAD_POINTER,\n \n   ARM_BUILTIN_NEON_BASE,\n@@ -20320,6 +20414,10 @@ static const struct builtin_description bdesc_2arg[] =\n   { FL_IWMMXT, CODE_FOR_##code, \"__builtin_arm_\" string, \\\n     ARM_BUILTIN_##builtin, UNKNOWN, 0 },\n \n+#define IWMMXT2_BUILTIN(code, string, builtin) \\\n+  { FL_IWMMXT2, CODE_FOR_##code, \"__builtin_arm_\" string, \\\n+    ARM_BUILTIN_##builtin, UNKNOWN, 0 },\n+\n   IWMMXT_BUILTIN (addv8qi3, \"waddb\", WADDB)\n   IWMMXT_BUILTIN (addv4hi3, \"waddh\", WADDH)\n   IWMMXT_BUILTIN (addv2si3, \"waddw\", WADDW)\n@@ -20376,44 +20474,45 @@ static const struct builtin_description bdesc_2arg[] =\n   IWMMXT_BUILTIN (iwmmxt_wunpckihb, \"wunpckihb\", WUNPCKIHB)\n   IWMMXT_BUILTIN (iwmmxt_wunpckihh, \"wunpckihh\", WUNPCKIHH)\n   IWMMXT_BUILTIN (iwmmxt_wunpckihw, \"wunpckihw\", WUNPCKIHW)\n-  IWMMXT_BUILTIN (iwmmxt_wmadds, \"wmadds\", WMADDS)\n-  IWMMXT_BUILTIN (iwmmxt_wmaddu, \"wmaddu\", WMADDU)\n+  IWMMXT2_BUILTIN (iwmmxt_waddsubhx, \"waddsubhx\", WADDSUBHX)\n+  IWMMXT2_BUILTIN (iwmmxt_wsubaddhx, \"wsubaddhx\", WSUBADDHX)\n+  IWMMXT2_BUILTIN (iwmmxt_wabsdiffb, \"wabsdiffb\", WABSDIFFB)\n+  IWMMXT2_BUILTIN (iwmmxt_wabsdiffh, \"wabsdiffh\", WABSDIFFH)\n+  IWMMXT2_BUILTIN (iwmmxt_wabsdiffw, \"wabsdiffw\", WABSDIFFW)\n+  IWMMXT2_BUILTIN (iwmmxt_avg4, \"wavg4\", WAVG4)\n+  IWMMXT2_BUILTIN (iwmmxt_avg4r, \"wavg4r\", WAVG4R)\n+  IWMMXT2_BUILTIN (iwmmxt_wmulwsm, \"wmulwsm\", WMULWSM)\n+  IWMMXT2_BUILTIN (iwmmxt_wmulwum, \"wmulwum\", WMULWUM)\n+  IWMMXT2_BUILTIN (iwmmxt_wmulwsmr, \"wmulwsmr\", WMULWSMR)\n+  IWMMXT2_BUILTIN (iwmmxt_wmulwumr, \"wmulwumr\", WMULWUMR)\n+  IWMMXT2_BUILTIN (iwmmxt_wmulwl, \"wmulwl\", WMULWL)\n+  IWMMXT2_BUILTIN (iwmmxt_wmulsmr, \"wmulsmr\", WMULSMR)\n+  IWMMXT2_BUILTIN (iwmmxt_wmulumr, \"wmulumr\", WMULUMR)\n+  IWMMXT2_BUILTIN (iwmmxt_wqmulm, \"wqmulm\", WQMULM)\n+  IWMMXT2_BUILTIN (iwmmxt_wqmulmr, \"wqmulmr\", WQMULMR)\n+  IWMMXT2_BUILTIN (iwmmxt_wqmulwm, \"wqmulwm\", WQMULWM)\n+  IWMMXT2_BUILTIN (iwmmxt_wqmulwmr, \"wqmulwmr\", WQMULWMR)\n+  IWMMXT_BUILTIN (iwmmxt_walignr0, \"walignr0\", WALIGNR0)\n+  IWMMXT_BUILTIN (iwmmxt_walignr1, \"walignr1\", WALIGNR1)\n+  IWMMXT_BUILTIN (iwmmxt_walignr2, \"walignr2\", WALIGNR2)\n+  IWMMXT_BUILTIN (iwmmxt_walignr3, \"walignr3\", WALIGNR3)\n \n #define IWMMXT_BUILTIN2(code, builtin) \\\n   { FL_IWMMXT, CODE_FOR_##code, NULL, ARM_BUILTIN_##builtin, UNKNOWN, 0 },\n \n+#define IWMMXT2_BUILTIN2(code, builtin) \\\n+  { FL_IWMMXT2, CODE_FOR_##code, NULL, ARM_BUILTIN_##builtin, UNKNOWN, 0 },\n+\n+  IWMMXT2_BUILTIN2 (iwmmxt_waddbhusm, WADDBHUSM)\n+  IWMMXT2_BUILTIN2 (iwmmxt_waddbhusl, WADDBHUSL)\n   IWMMXT_BUILTIN2 (iwmmxt_wpackhss, WPACKHSS)\n   IWMMXT_BUILTIN2 (iwmmxt_wpackwss, WPACKWSS)\n   IWMMXT_BUILTIN2 (iwmmxt_wpackdss, WPACKDSS)\n   IWMMXT_BUILTIN2 (iwmmxt_wpackhus, WPACKHUS)\n   IWMMXT_BUILTIN2 (iwmmxt_wpackwus, WPACKWUS)\n   IWMMXT_BUILTIN2 (iwmmxt_wpackdus, WPACKDUS)\n-  IWMMXT_BUILTIN2 (ashlv4hi3_di,    WSLLH)\n-  IWMMXT_BUILTIN2 (ashlv4hi3_iwmmxt, WSLLHI)\n-  IWMMXT_BUILTIN2 (ashlv2si3_di,    WSLLW)\n-  IWMMXT_BUILTIN2 (ashlv2si3_iwmmxt, WSLLWI)\n-  IWMMXT_BUILTIN2 (ashldi3_di,      WSLLD)\n-  IWMMXT_BUILTIN2 (ashldi3_iwmmxt,  WSLLDI)\n-  IWMMXT_BUILTIN2 (lshrv4hi3_di,    WSRLH)\n-  IWMMXT_BUILTIN2 (lshrv4hi3_iwmmxt, WSRLHI)\n-  IWMMXT_BUILTIN2 (lshrv2si3_di,    WSRLW)\n-  IWMMXT_BUILTIN2 (lshrv2si3_iwmmxt, WSRLWI)\n-  IWMMXT_BUILTIN2 (lshrdi3_di,      WSRLD)\n-  IWMMXT_BUILTIN2 (lshrdi3_iwmmxt,  WSRLDI)\n-  IWMMXT_BUILTIN2 (ashrv4hi3_di,    WSRAH)\n-  IWMMXT_BUILTIN2 (ashrv4hi3_iwmmxt, WSRAHI)\n-  IWMMXT_BUILTIN2 (ashrv2si3_di,    WSRAW)\n-  IWMMXT_BUILTIN2 (ashrv2si3_iwmmxt, WSRAWI)\n-  IWMMXT_BUILTIN2 (ashrdi3_di,      WSRAD)\n-  IWMMXT_BUILTIN2 (ashrdi3_iwmmxt,  WSRADI)\n-  IWMMXT_BUILTIN2 (rorv4hi3_di,     WRORH)\n-  IWMMXT_BUILTIN2 (rorv4hi3,        WRORHI)\n-  IWMMXT_BUILTIN2 (rorv2si3_di,     WRORW)\n-  IWMMXT_BUILTIN2 (rorv2si3,        WRORWI)\n-  IWMMXT_BUILTIN2 (rordi3_di,       WRORD)\n-  IWMMXT_BUILTIN2 (rordi3,          WRORDI)\n-  IWMMXT_BUILTIN2 (iwmmxt_wmacuz,   WMACUZ)\n-  IWMMXT_BUILTIN2 (iwmmxt_wmacsz,   WMACSZ)\n+  IWMMXT_BUILTIN2 (iwmmxt_wmacuz, WMACUZ)\n+  IWMMXT_BUILTIN2 (iwmmxt_wmacsz, WMACSZ)\n };\n \n static const struct builtin_description bdesc_1arg[] =\n@@ -20436,6 +20535,12 @@ static const struct builtin_description bdesc_1arg[] =\n   IWMMXT_BUILTIN (iwmmxt_wunpckelsb, \"wunpckelsb\", WUNPCKELSB)\n   IWMMXT_BUILTIN (iwmmxt_wunpckelsh, \"wunpckelsh\", WUNPCKELSH)\n   IWMMXT_BUILTIN (iwmmxt_wunpckelsw, \"wunpckelsw\", WUNPCKELSW)\n+  IWMMXT2_BUILTIN (iwmmxt_wabsv8qi3, \"wabsb\", WABSB)\n+  IWMMXT2_BUILTIN (iwmmxt_wabsv4hi3, \"wabsh\", WABSH)\n+  IWMMXT2_BUILTIN (iwmmxt_wabsv2si3, \"wabsw\", WABSW)\n+  IWMMXT_BUILTIN (tbcstv8qi, \"tbcstb\", TBCSTB)\n+  IWMMXT_BUILTIN (tbcstv4hi, \"tbcsth\", TBCSTH)\n+  IWMMXT_BUILTIN (tbcstv2si, \"tbcstw\", TBCSTW)\n };\n \n /* Set up all the iWMMXt builtins.  This is not called if\n@@ -20451,9 +20556,6 @@ arm_init_iwmmxt_builtins (void)\n   tree V4HI_type_node = build_vector_type_for_mode (intHI_type_node, V4HImode);\n   tree V8QI_type_node = build_vector_type_for_mode (intQI_type_node, V8QImode);\n \n-  tree int_ftype_int\n-    = build_function_type_list (integer_type_node,\n-\t\t\t\tinteger_type_node, NULL_TREE);\n   tree v8qi_ftype_v8qi_v8qi_int\n     = build_function_type_list (V8QI_type_node,\n \t\t\t\tV8QI_type_node, V8QI_type_node,\n@@ -20515,6 +20617,9 @@ arm_init_iwmmxt_builtins (void)\n   tree v4hi_ftype_v2si_v2si\n     = build_function_type_list (V4HI_type_node,\n \t\t\t\tV2SI_type_node, V2SI_type_node, NULL_TREE);\n+  tree v8qi_ftype_v4hi_v8qi\n+    = build_function_type_list (V8QI_type_node,\n+\t                        V4HI_type_node, V8QI_type_node, NULL_TREE);\n   tree v2si_ftype_v4hi_v4hi\n     = build_function_type_list (V2SI_type_node,\n \t\t\t\tV4HI_type_node, V4HI_type_node, NULL_TREE);\n@@ -20529,12 +20634,10 @@ arm_init_iwmmxt_builtins (void)\n     = build_function_type_list (V2SI_type_node,\n \t\t\t\tV2SI_type_node, long_long_integer_type_node,\n \t\t\t\tNULL_TREE);\n-  tree void_ftype_int_int\n-    = build_function_type_list (void_type_node,\n-\t\t\t\tinteger_type_node, integer_type_node,\n-\t\t\t\tNULL_TREE);\n   tree di_ftype_void\n     = build_function_type_list (long_long_unsigned_type_node, NULL_TREE);\n+  tree int_ftype_void\n+    = build_function_type_list (integer_type_node, NULL_TREE);\n   tree di_ftype_v8qi\n     = build_function_type_list (long_long_integer_type_node,\n \t\t\t\tV8QI_type_node, NULL_TREE);\n@@ -20550,6 +20653,15 @@ arm_init_iwmmxt_builtins (void)\n   tree v4hi_ftype_v8qi\n     = build_function_type_list (V4HI_type_node,\n \t\t\t\tV8QI_type_node, NULL_TREE);\n+  tree v8qi_ftype_v8qi\n+    = build_function_type_list (V8QI_type_node,\n+\t                        V8QI_type_node, NULL_TREE);\n+  tree v4hi_ftype_v4hi\n+    = build_function_type_list (V4HI_type_node,\n+\t                        V4HI_type_node, NULL_TREE);\n+  tree v2si_ftype_v2si\n+    = build_function_type_list (V2SI_type_node,\n+\t                        V2SI_type_node, NULL_TREE);\n \n   tree di_ftype_di_v4hi_v4hi\n     = build_function_type_list (long_long_unsigned_type_node,\n@@ -20562,6 +20674,48 @@ arm_init_iwmmxt_builtins (void)\n \t\t\t\tV4HI_type_node,V4HI_type_node,\n \t\t\t\tNULL_TREE);\n \n+  tree v2si_ftype_v2si_v4hi_v4hi\n+    = build_function_type_list (V2SI_type_node,\n+                                V2SI_type_node, V4HI_type_node,\n+                                V4HI_type_node, NULL_TREE);\n+\n+  tree v2si_ftype_v2si_v8qi_v8qi\n+    = build_function_type_list (V2SI_type_node,\n+                                V2SI_type_node, V8QI_type_node,\n+                                V8QI_type_node, NULL_TREE);\n+\n+  tree di_ftype_di_v2si_v2si\n+     = build_function_type_list (long_long_unsigned_type_node,\n+                                 long_long_unsigned_type_node,\n+                                 V2SI_type_node, V2SI_type_node,\n+                                 NULL_TREE);\n+\n+   tree di_ftype_di_di_int\n+     = build_function_type_list (long_long_unsigned_type_node,\n+                                 long_long_unsigned_type_node,\n+                                 long_long_unsigned_type_node,\n+                                 integer_type_node, NULL_TREE);\n+\n+   tree void_ftype_void\n+     = build_function_type_list (void_type_node,\n+                                 NULL_TREE);\n+\n+   tree void_ftype_int\n+     = build_function_type_list (void_type_node,\n+                                 integer_type_node, NULL_TREE);\n+\n+   tree v8qi_ftype_char\n+     = build_function_type_list (V8QI_type_node,\n+                                 signed_char_type_node, NULL_TREE);\n+\n+   tree v4hi_ftype_short\n+     = build_function_type_list (V4HI_type_node,\n+                                 short_integer_type_node, NULL_TREE);\n+\n+   tree v2si_ftype_int\n+     = build_function_type_list (V2SI_type_node,\n+                                 integer_type_node, NULL_TREE);\n+\n   /* Normal vector binops.  */\n   tree v8qi_ftype_v8qi_v8qi\n     = build_function_type_list (V8QI_type_node,\n@@ -20619,9 +20773,19 @@ arm_init_iwmmxt_builtins (void)\n   def_mbuiltin (FL_IWMMXT, \"__builtin_arm_\" NAME, (TYPE),\t\\\n \t\tARM_BUILTIN_ ## CODE)\n \n+#define iwmmx2_mbuiltin(NAME, TYPE, CODE)                      \\\n+  def_mbuiltin (FL_IWMMXT2, \"__builtin_arm_\" NAME, (TYPE),     \\\n+               ARM_BUILTIN_ ## CODE)\n+\n   iwmmx_mbuiltin (\"wzero\", di_ftype_void, WZERO);\n-  iwmmx_mbuiltin (\"setwcx\", void_ftype_int_int, SETWCX);\n-  iwmmx_mbuiltin (\"getwcx\", int_ftype_int, GETWCX);\n+  iwmmx_mbuiltin (\"setwcgr0\", void_ftype_int, SETWCGR0);\n+  iwmmx_mbuiltin (\"setwcgr1\", void_ftype_int, SETWCGR1);\n+  iwmmx_mbuiltin (\"setwcgr2\", void_ftype_int, SETWCGR2);\n+  iwmmx_mbuiltin (\"setwcgr3\", void_ftype_int, SETWCGR3);\n+  iwmmx_mbuiltin (\"getwcgr0\", int_ftype_void, GETWCGR0);\n+  iwmmx_mbuiltin (\"getwcgr1\", int_ftype_void, GETWCGR1);\n+  iwmmx_mbuiltin (\"getwcgr2\", int_ftype_void, GETWCGR2);\n+  iwmmx_mbuiltin (\"getwcgr3\", int_ftype_void, GETWCGR3);\n \n   iwmmx_mbuiltin (\"wsllh\", v4hi_ftype_v4hi_di, WSLLH);\n   iwmmx_mbuiltin (\"wsllw\", v2si_ftype_v2si_di, WSLLW);\n@@ -20653,8 +20817,14 @@ arm_init_iwmmxt_builtins (void)\n \n   iwmmx_mbuiltin (\"wshufh\", v4hi_ftype_v4hi_int, WSHUFH);\n \n-  iwmmx_mbuiltin (\"wsadb\", v2si_ftype_v8qi_v8qi, WSADB);\n-  iwmmx_mbuiltin (\"wsadh\", v2si_ftype_v4hi_v4hi, WSADH);\n+  iwmmx_mbuiltin (\"wsadb\", v2si_ftype_v2si_v8qi_v8qi, WSADB);\n+  iwmmx_mbuiltin (\"wsadh\", v2si_ftype_v2si_v4hi_v4hi, WSADH);\n+  iwmmx_mbuiltin (\"wmadds\", v2si_ftype_v4hi_v4hi, WMADDS);\n+  iwmmx2_mbuiltin (\"wmaddsx\", v2si_ftype_v4hi_v4hi, WMADDSX);\n+  iwmmx2_mbuiltin (\"wmaddsn\", v2si_ftype_v4hi_v4hi, WMADDSN);\n+  iwmmx_mbuiltin (\"wmaddu\", v2si_ftype_v4hi_v4hi, WMADDU);\n+  iwmmx2_mbuiltin (\"wmaddux\", v2si_ftype_v4hi_v4hi, WMADDUX);\n+  iwmmx2_mbuiltin (\"wmaddun\", v2si_ftype_v4hi_v4hi, WMADDUN);\n   iwmmx_mbuiltin (\"wsadbz\", v2si_ftype_v8qi_v8qi, WSADBZ);\n   iwmmx_mbuiltin (\"wsadhz\", v2si_ftype_v4hi_v4hi, WSADHZ);\n \n@@ -20676,6 +20846,9 @@ arm_init_iwmmxt_builtins (void)\n   iwmmx_mbuiltin (\"tmovmskh\", int_ftype_v4hi, TMOVMSKH);\n   iwmmx_mbuiltin (\"tmovmskw\", int_ftype_v2si, TMOVMSKW);\n \n+  iwmmx2_mbuiltin (\"waddbhusm\", v8qi_ftype_v4hi_v8qi, WADDBHUSM);\n+  iwmmx2_mbuiltin (\"waddbhusl\", v8qi_ftype_v4hi_v8qi, WADDBHUSL);\n+\n   iwmmx_mbuiltin (\"wpackhss\", v8qi_ftype_v4hi_v4hi, WPACKHSS);\n   iwmmx_mbuiltin (\"wpackhus\", v8qi_ftype_v4hi_v4hi, WPACKHUS);\n   iwmmx_mbuiltin (\"wpackwus\", v4hi_ftype_v2si_v2si, WPACKWUS);\n@@ -20701,15 +20874,56 @@ arm_init_iwmmxt_builtins (void)\n   iwmmx_mbuiltin (\"wmacu\", di_ftype_di_v4hi_v4hi, WMACU);\n   iwmmx_mbuiltin (\"wmacuz\", di_ftype_v4hi_v4hi, WMACUZ);\n \n-  iwmmx_mbuiltin (\"walign\", v8qi_ftype_v8qi_v8qi_int, WALIGN);\n+  iwmmx_mbuiltin (\"walign\", v8qi_ftype_v8qi_v8qi_int, WALIGNI);\n   iwmmx_mbuiltin (\"tmia\", di_ftype_di_int_int, TMIA);\n   iwmmx_mbuiltin (\"tmiaph\", di_ftype_di_int_int, TMIAPH);\n   iwmmx_mbuiltin (\"tmiabb\", di_ftype_di_int_int, TMIABB);\n   iwmmx_mbuiltin (\"tmiabt\", di_ftype_di_int_int, TMIABT);\n   iwmmx_mbuiltin (\"tmiatb\", di_ftype_di_int_int, TMIATB);\n   iwmmx_mbuiltin (\"tmiatt\", di_ftype_di_int_int, TMIATT);\n \n+  iwmmx2_mbuiltin (\"wabsb\", v8qi_ftype_v8qi, WABSB);\n+  iwmmx2_mbuiltin (\"wabsh\", v4hi_ftype_v4hi, WABSH);\n+  iwmmx2_mbuiltin (\"wabsw\", v2si_ftype_v2si, WABSW);\n+\n+  iwmmx2_mbuiltin (\"wqmiabb\", v2si_ftype_v2si_v4hi_v4hi, WQMIABB);\n+  iwmmx2_mbuiltin (\"wqmiabt\", v2si_ftype_v2si_v4hi_v4hi, WQMIABT);\n+  iwmmx2_mbuiltin (\"wqmiatb\", v2si_ftype_v2si_v4hi_v4hi, WQMIATB);\n+  iwmmx2_mbuiltin (\"wqmiatt\", v2si_ftype_v2si_v4hi_v4hi, WQMIATT);\n+\n+  iwmmx2_mbuiltin (\"wqmiabbn\", v2si_ftype_v2si_v4hi_v4hi, WQMIABBN);\n+  iwmmx2_mbuiltin (\"wqmiabtn\", v2si_ftype_v2si_v4hi_v4hi, WQMIABTN);\n+  iwmmx2_mbuiltin (\"wqmiatbn\", v2si_ftype_v2si_v4hi_v4hi, WQMIATBN);\n+  iwmmx2_mbuiltin (\"wqmiattn\", v2si_ftype_v2si_v4hi_v4hi, WQMIATTN);\n+\n+  iwmmx2_mbuiltin (\"wmiabb\", di_ftype_di_v4hi_v4hi, WMIABB);\n+  iwmmx2_mbuiltin (\"wmiabt\", di_ftype_di_v4hi_v4hi, WMIABT);\n+  iwmmx2_mbuiltin (\"wmiatb\", di_ftype_di_v4hi_v4hi, WMIATB);\n+  iwmmx2_mbuiltin (\"wmiatt\", di_ftype_di_v4hi_v4hi, WMIATT);\n+\n+  iwmmx2_mbuiltin (\"wmiabbn\", di_ftype_di_v4hi_v4hi, WMIABBN);\n+  iwmmx2_mbuiltin (\"wmiabtn\", di_ftype_di_v4hi_v4hi, WMIABTN);\n+  iwmmx2_mbuiltin (\"wmiatbn\", di_ftype_di_v4hi_v4hi, WMIATBN);\n+  iwmmx2_mbuiltin (\"wmiattn\", di_ftype_di_v4hi_v4hi, WMIATTN);\n+\n+  iwmmx2_mbuiltin (\"wmiawbb\", di_ftype_di_v2si_v2si, WMIAWBB);\n+  iwmmx2_mbuiltin (\"wmiawbt\", di_ftype_di_v2si_v2si, WMIAWBT);\n+  iwmmx2_mbuiltin (\"wmiawtb\", di_ftype_di_v2si_v2si, WMIAWTB);\n+  iwmmx2_mbuiltin (\"wmiawtt\", di_ftype_di_v2si_v2si, WMIAWTT);\n+\n+  iwmmx2_mbuiltin (\"wmiawbbn\", di_ftype_di_v2si_v2si, WMIAWBBN);\n+  iwmmx2_mbuiltin (\"wmiawbtn\", di_ftype_di_v2si_v2si, WMIAWBTN);\n+  iwmmx2_mbuiltin (\"wmiawtbn\", di_ftype_di_v2si_v2si, WMIAWTBN);\n+  iwmmx2_mbuiltin (\"wmiawttn\", di_ftype_di_v2si_v2si, WMIAWTTN);\n+\n+  iwmmx2_mbuiltin (\"wmerge\", di_ftype_di_di_int, WMERGE);\n+\n+  iwmmx_mbuiltin (\"tbcstb\", v8qi_ftype_char, TBCSTB);\n+  iwmmx_mbuiltin (\"tbcsth\", v4hi_ftype_short, TBCSTH);\n+  iwmmx_mbuiltin (\"tbcstw\", v2si_ftype_int, TBCSTW);\n+\n #undef iwmmx_mbuiltin\n+#undef iwmmx2_mbuiltin\n }\n \n static void\n@@ -20866,7 +21080,8 @@ arm_expand_binop_builtin (enum insn_code icode,\n       || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n     target = gen_reg_rtx (tmode);\n \n-  gcc_assert (GET_MODE (op0) == mode0 && GET_MODE (op1) == mode1);\n+  gcc_assert ((GET_MODE (op0) == mode0 || GET_MODE (op0) == VOIDmode)\n+\t      && (GET_MODE (op1) == mode1 || GET_MODE (op1) == VOIDmode));\n \n   if (! (*insn_data[icode].operand[1].predicate) (op0, mode0))\n     op0 = copy_to_mode_reg (mode0, op0);\n@@ -21365,6 +21580,10 @@ arm_expand_builtin (tree exp,\n   enum machine_mode mode0;\n   enum machine_mode mode1;\n   enum machine_mode mode2;\n+  int opint;\n+  int selector;\n+  int mask;\n+  int imm;\n \n   if (fcode >= ARM_BUILTIN_NEON_BASE)\n     return arm_expand_neon_builtin (fcode, exp, target);\n@@ -21399,6 +21618,24 @@ arm_expand_builtin (tree exp,\n \t  error (\"selector must be an immediate\");\n \t  return gen_reg_rtx (tmode);\n \t}\n+\n+      opint = INTVAL (op1);\n+      if (fcode == ARM_BUILTIN_TEXTRMSB || fcode == ARM_BUILTIN_TEXTRMUB)\n+\t{\n+\t  if (opint > 7 || opint < 0)\n+\t    error (\"the range of selector should be in 0 to 7\");\n+\t}\n+      else if (fcode == ARM_BUILTIN_TEXTRMSH || fcode == ARM_BUILTIN_TEXTRMUH)\n+\t{\n+\t  if (opint > 3 || opint < 0)\n+\t    error (\"the range of selector should be in 0 to 3\");\n+\t}\n+      else /* ARM_BUILTIN_TEXTRMSW || ARM_BUILTIN_TEXTRMUW.  */\n+\t{\n+\t  if (opint > 1 || opint < 0)\n+\t    error (\"the range of selector should be in 0 to 1\");\n+\t}\n+\n       if (target == 0\n \t  || GET_MODE (target) != tmode\n \t  || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n@@ -21409,11 +21646,61 @@ arm_expand_builtin (tree exp,\n       emit_insn (pat);\n       return target;\n \n+    case ARM_BUILTIN_WALIGNI:\n+      /* If op2 is immediate, call walighi, else call walighr.  */\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      arg1 = CALL_EXPR_ARG (exp, 1);\n+      arg2 = CALL_EXPR_ARG (exp, 2);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n+      op2 = expand_normal (arg2);\n+      if (GET_CODE (op2) == CONST_INT)\n+        {\n+\t  icode = CODE_FOR_iwmmxt_waligni;\n+          tmode = insn_data[icode].operand[0].mode;\n+\t  mode0 = insn_data[icode].operand[1].mode;\n+\t  mode1 = insn_data[icode].operand[2].mode;\n+\t  mode2 = insn_data[icode].operand[3].mode;\n+          if (!(*insn_data[icode].operand[1].predicate) (op0, mode0))\n+\t    op0 = copy_to_mode_reg (mode0, op0);\n+          if (!(*insn_data[icode].operand[2].predicate) (op1, mode1))\n+\t    op1 = copy_to_mode_reg (mode1, op1);\n+          gcc_assert ((*insn_data[icode].operand[3].predicate) (op2, mode2));\n+\t  selector = INTVAL (op2);\n+\t  if (selector > 7 || selector < 0)\n+\t    error (\"the range of selector should be in 0 to 7\");\n+\t}\n+      else\n+        {\n+\t  icode = CODE_FOR_iwmmxt_walignr;\n+          tmode = insn_data[icode].operand[0].mode;\n+\t  mode0 = insn_data[icode].operand[1].mode;\n+\t  mode1 = insn_data[icode].operand[2].mode;\n+\t  mode2 = insn_data[icode].operand[3].mode;\n+          if (!(*insn_data[icode].operand[1].predicate) (op0, mode0))\n+\t    op0 = copy_to_mode_reg (mode0, op0);\n+          if (!(*insn_data[icode].operand[2].predicate) (op1, mode1))\n+\t    op1 = copy_to_mode_reg (mode1, op1);\n+          if (!(*insn_data[icode].operand[3].predicate) (op2, mode2))\n+\t    op2 = copy_to_mode_reg (mode2, op2);\n+\t}\n+      if (target == 0\n+\t  || GET_MODE (target) != tmode\n+\t  || !(*insn_data[icode].operand[0].predicate) (target, tmode))\n+\ttarget = gen_reg_rtx (tmode);\n+      pat = GEN_FCN (icode) (target, op0, op1, op2);\n+      if (!pat)\n+\treturn 0;\n+      emit_insn (pat);\n+      return target;\n+\n     case ARM_BUILTIN_TINSRB:\n     case ARM_BUILTIN_TINSRH:\n     case ARM_BUILTIN_TINSRW:\n+    case ARM_BUILTIN_WMERGE:\n       icode = (fcode == ARM_BUILTIN_TINSRB ? CODE_FOR_iwmmxt_tinsrb\n \t       : fcode == ARM_BUILTIN_TINSRH ? CODE_FOR_iwmmxt_tinsrh\n+\t       : fcode == ARM_BUILTIN_WMERGE ? CODE_FOR_iwmmxt_wmerge\n \t       : CODE_FOR_iwmmxt_tinsrw);\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       arg1 = CALL_EXPR_ARG (exp, 1);\n@@ -21432,10 +21719,30 @@ arm_expand_builtin (tree exp,\n \top1 = copy_to_mode_reg (mode1, op1);\n       if (! (*insn_data[icode].operand[3].predicate) (op2, mode2))\n \t{\n-\t  /* @@@ better error message */\n \t  error (\"selector must be an immediate\");\n \t  return const0_rtx;\n \t}\n+      if (icode == CODE_FOR_iwmmxt_wmerge)\n+\t{\n+\t  selector = INTVAL (op2);\n+\t  if (selector > 7 || selector < 0)\n+\t    error (\"the range of selector should be in 0 to 7\");\n+\t}\n+      if ((icode == CODE_FOR_iwmmxt_tinsrb)\n+\t  || (icode == CODE_FOR_iwmmxt_tinsrh)\n+\t  || (icode == CODE_FOR_iwmmxt_tinsrw))\n+        {\n+\t  mask = 0x01;\n+\t  selector= INTVAL (op2);\n+\t  if (icode == CODE_FOR_iwmmxt_tinsrb && (selector < 0 || selector > 7))\n+\t    error (\"the range of selector should be in 0 to 7\");\n+\t  else if (icode == CODE_FOR_iwmmxt_tinsrh && (selector < 0 ||selector > 3))\n+\t    error (\"the range of selector should be in 0 to 3\");\n+\t  else if (icode == CODE_FOR_iwmmxt_tinsrw && (selector < 0 ||selector > 1))\n+\t    error (\"the range of selector should be in 0 to 1\");\n+\t  mask <<= selector;\n+\t  op2 = gen_rtx_CONST_INT (SImode, mask);\n+\t}\n       if (target == 0\n \t  || GET_MODE (target) != tmode\n \t  || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n@@ -21446,19 +21753,42 @@ arm_expand_builtin (tree exp,\n       emit_insn (pat);\n       return target;\n \n-    case ARM_BUILTIN_SETWCX:\n+    case ARM_BUILTIN_SETWCGR0:\n+    case ARM_BUILTIN_SETWCGR1:\n+    case ARM_BUILTIN_SETWCGR2:\n+    case ARM_BUILTIN_SETWCGR3:\n+      icode = (fcode == ARM_BUILTIN_SETWCGR0 ? CODE_FOR_iwmmxt_setwcgr0\n+\t       : fcode == ARM_BUILTIN_SETWCGR1 ? CODE_FOR_iwmmxt_setwcgr1\n+\t       : fcode == ARM_BUILTIN_SETWCGR2 ? CODE_FOR_iwmmxt_setwcgr2\n+\t       : CODE_FOR_iwmmxt_setwcgr3);\n       arg0 = CALL_EXPR_ARG (exp, 0);\n-      arg1 = CALL_EXPR_ARG (exp, 1);\n-      op0 = force_reg (SImode, expand_normal (arg0));\n-      op1 = expand_normal (arg1);\n-      emit_insn (gen_iwmmxt_tmcr (op1, op0));\n+      op0 = expand_normal (arg0);\n+      mode0 = insn_data[icode].operand[0].mode;\n+      if (!(*insn_data[icode].operand[0].predicate) (op0, mode0))\n+        op0 = copy_to_mode_reg (mode0, op0);\n+      pat = GEN_FCN (icode) (op0);\n+      if (!pat)\n+\treturn 0;\n+      emit_insn (pat);\n       return 0;\n \n-    case ARM_BUILTIN_GETWCX:\n-      arg0 = CALL_EXPR_ARG (exp, 0);\n-      op0 = expand_normal (arg0);\n-      target = gen_reg_rtx (SImode);\n-      emit_insn (gen_iwmmxt_tmrc (target, op0));\n+    case ARM_BUILTIN_GETWCGR0:\n+    case ARM_BUILTIN_GETWCGR1:\n+    case ARM_BUILTIN_GETWCGR2:\n+    case ARM_BUILTIN_GETWCGR3:\n+      icode = (fcode == ARM_BUILTIN_GETWCGR0 ? CODE_FOR_iwmmxt_getwcgr0\n+\t       : fcode == ARM_BUILTIN_GETWCGR1 ? CODE_FOR_iwmmxt_getwcgr1\n+\t       : fcode == ARM_BUILTIN_GETWCGR2 ? CODE_FOR_iwmmxt_getwcgr2\n+\t       : CODE_FOR_iwmmxt_getwcgr3);\n+      tmode = insn_data[icode].operand[0].mode;\n+      if (target == 0\n+\t  || GET_MODE (target) != tmode\n+\t  || !(*insn_data[icode].operand[0].predicate) (target, tmode))\n+        target = gen_reg_rtx (tmode);\n+      pat = GEN_FCN (icode) (target);\n+      if (!pat)\n+        return 0;\n+      emit_insn (pat);\n       return target;\n \n     case ARM_BUILTIN_WSHUFH:\n@@ -21475,10 +21805,12 @@ arm_expand_builtin (tree exp,\n \top0 = copy_to_mode_reg (mode1, op0);\n       if (! (*insn_data[icode].operand[2].predicate) (op1, mode2))\n \t{\n-\t  /* @@@ better error message */\n \t  error (\"mask must be an immediate\");\n \t  return const0_rtx;\n \t}\n+      selector = INTVAL (op1);\n+      if (selector < 0 || selector > 255)\n+\terror (\"the range of mask should be in 0 to 255\");\n       if (target == 0\n \t  || GET_MODE (target) != tmode\n \t  || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n@@ -21489,10 +21821,18 @@ arm_expand_builtin (tree exp,\n       emit_insn (pat);\n       return target;\n \n-    case ARM_BUILTIN_WSADB:\n-      return arm_expand_binop_builtin (CODE_FOR_iwmmxt_wsadb, exp, target);\n-    case ARM_BUILTIN_WSADH:\n-      return arm_expand_binop_builtin (CODE_FOR_iwmmxt_wsadh, exp, target);\n+    case ARM_BUILTIN_WMADDS:\n+      return arm_expand_binop_builtin (CODE_FOR_iwmmxt_wmadds, exp, target);\n+    case ARM_BUILTIN_WMADDSX:\n+      return arm_expand_binop_builtin (CODE_FOR_iwmmxt_wmaddsx, exp, target);\n+    case ARM_BUILTIN_WMADDSN:\n+      return arm_expand_binop_builtin (CODE_FOR_iwmmxt_wmaddsn, exp, target);\n+    case ARM_BUILTIN_WMADDU:\n+      return arm_expand_binop_builtin (CODE_FOR_iwmmxt_wmaddu, exp, target);\n+    case ARM_BUILTIN_WMADDUX:\n+      return arm_expand_binop_builtin (CODE_FOR_iwmmxt_wmaddux, exp, target);\n+    case ARM_BUILTIN_WMADDUN:\n+      return arm_expand_binop_builtin (CODE_FOR_iwmmxt_wmaddun, exp, target);\n     case ARM_BUILTIN_WSADBZ:\n       return arm_expand_binop_builtin (CODE_FOR_iwmmxt_wsadbz, exp, target);\n     case ARM_BUILTIN_WSADHZ:\n@@ -21501,13 +21841,38 @@ arm_expand_builtin (tree exp,\n       /* Several three-argument builtins.  */\n     case ARM_BUILTIN_WMACS:\n     case ARM_BUILTIN_WMACU:\n-    case ARM_BUILTIN_WALIGN:\n     case ARM_BUILTIN_TMIA:\n     case ARM_BUILTIN_TMIAPH:\n     case ARM_BUILTIN_TMIATT:\n     case ARM_BUILTIN_TMIATB:\n     case ARM_BUILTIN_TMIABT:\n     case ARM_BUILTIN_TMIABB:\n+    case ARM_BUILTIN_WQMIABB:\n+    case ARM_BUILTIN_WQMIABT:\n+    case ARM_BUILTIN_WQMIATB:\n+    case ARM_BUILTIN_WQMIATT:\n+    case ARM_BUILTIN_WQMIABBN:\n+    case ARM_BUILTIN_WQMIABTN:\n+    case ARM_BUILTIN_WQMIATBN:\n+    case ARM_BUILTIN_WQMIATTN:\n+    case ARM_BUILTIN_WMIABB:\n+    case ARM_BUILTIN_WMIABT:\n+    case ARM_BUILTIN_WMIATB:\n+    case ARM_BUILTIN_WMIATT:\n+    case ARM_BUILTIN_WMIABBN:\n+    case ARM_BUILTIN_WMIABTN:\n+    case ARM_BUILTIN_WMIATBN:\n+    case ARM_BUILTIN_WMIATTN:\n+    case ARM_BUILTIN_WMIAWBB:\n+    case ARM_BUILTIN_WMIAWBT:\n+    case ARM_BUILTIN_WMIAWTB:\n+    case ARM_BUILTIN_WMIAWTT:\n+    case ARM_BUILTIN_WMIAWBBN:\n+    case ARM_BUILTIN_WMIAWBTN:\n+    case ARM_BUILTIN_WMIAWTBN:\n+    case ARM_BUILTIN_WMIAWTTN:\n+    case ARM_BUILTIN_WSADB:\n+    case ARM_BUILTIN_WSADH:\n       icode = (fcode == ARM_BUILTIN_WMACS ? CODE_FOR_iwmmxt_wmacs\n \t       : fcode == ARM_BUILTIN_WMACU ? CODE_FOR_iwmmxt_wmacu\n \t       : fcode == ARM_BUILTIN_TMIA ? CODE_FOR_iwmmxt_tmia\n@@ -21516,7 +21881,32 @@ arm_expand_builtin (tree exp,\n \t       : fcode == ARM_BUILTIN_TMIABT ? CODE_FOR_iwmmxt_tmiabt\n \t       : fcode == ARM_BUILTIN_TMIATB ? CODE_FOR_iwmmxt_tmiatb\n \t       : fcode == ARM_BUILTIN_TMIATT ? CODE_FOR_iwmmxt_tmiatt\n-\t       : CODE_FOR_iwmmxt_walign);\n+\t       : fcode == ARM_BUILTIN_WQMIABB ? CODE_FOR_iwmmxt_wqmiabb\n+\t       : fcode == ARM_BUILTIN_WQMIABT ? CODE_FOR_iwmmxt_wqmiabt\n+\t       : fcode == ARM_BUILTIN_WQMIATB ? CODE_FOR_iwmmxt_wqmiatb\n+\t       : fcode == ARM_BUILTIN_WQMIATT ? CODE_FOR_iwmmxt_wqmiatt\n+\t       : fcode == ARM_BUILTIN_WQMIABBN ? CODE_FOR_iwmmxt_wqmiabbn\n+\t       : fcode == ARM_BUILTIN_WQMIABTN ? CODE_FOR_iwmmxt_wqmiabtn\n+\t       : fcode == ARM_BUILTIN_WQMIATBN ? CODE_FOR_iwmmxt_wqmiatbn\n+\t       : fcode == ARM_BUILTIN_WQMIATTN ? CODE_FOR_iwmmxt_wqmiattn\n+\t       : fcode == ARM_BUILTIN_WMIABB ? CODE_FOR_iwmmxt_wmiabb\n+\t       : fcode == ARM_BUILTIN_WMIABT ? CODE_FOR_iwmmxt_wmiabt\n+\t       : fcode == ARM_BUILTIN_WMIATB ? CODE_FOR_iwmmxt_wmiatb\n+\t       : fcode == ARM_BUILTIN_WMIATT ? CODE_FOR_iwmmxt_wmiatt\n+\t       : fcode == ARM_BUILTIN_WMIABBN ? CODE_FOR_iwmmxt_wmiabbn\n+\t       : fcode == ARM_BUILTIN_WMIABTN ? CODE_FOR_iwmmxt_wmiabtn\n+\t       : fcode == ARM_BUILTIN_WMIATBN ? CODE_FOR_iwmmxt_wmiatbn\n+\t       : fcode == ARM_BUILTIN_WMIATTN ? CODE_FOR_iwmmxt_wmiattn\n+\t       : fcode == ARM_BUILTIN_WMIAWBB ? CODE_FOR_iwmmxt_wmiawbb\n+\t       : fcode == ARM_BUILTIN_WMIAWBT ? CODE_FOR_iwmmxt_wmiawbt\n+\t       : fcode == ARM_BUILTIN_WMIAWTB ? CODE_FOR_iwmmxt_wmiawtb\n+\t       : fcode == ARM_BUILTIN_WMIAWTT ? CODE_FOR_iwmmxt_wmiawtt\n+\t       : fcode == ARM_BUILTIN_WMIAWBBN ? CODE_FOR_iwmmxt_wmiawbbn\n+\t       : fcode == ARM_BUILTIN_WMIAWBTN ? CODE_FOR_iwmmxt_wmiawbtn\n+\t       : fcode == ARM_BUILTIN_WMIAWTBN ? CODE_FOR_iwmmxt_wmiawtbn\n+\t       : fcode == ARM_BUILTIN_WMIAWTTN ? CODE_FOR_iwmmxt_wmiawttn\n+\t       : fcode == ARM_BUILTIN_WSADB ? CODE_FOR_iwmmxt_wsadb\n+\t       : CODE_FOR_iwmmxt_wsadh);\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       arg1 = CALL_EXPR_ARG (exp, 1);\n       arg2 = CALL_EXPR_ARG (exp, 2);\n@@ -21549,6 +21939,123 @@ arm_expand_builtin (tree exp,\n       emit_insn (gen_iwmmxt_clrdi (target));\n       return target;\n \n+    case ARM_BUILTIN_WSRLHI:\n+    case ARM_BUILTIN_WSRLWI:\n+    case ARM_BUILTIN_WSRLDI:\n+    case ARM_BUILTIN_WSLLHI:\n+    case ARM_BUILTIN_WSLLWI:\n+    case ARM_BUILTIN_WSLLDI:\n+    case ARM_BUILTIN_WSRAHI:\n+    case ARM_BUILTIN_WSRAWI:\n+    case ARM_BUILTIN_WSRADI:\n+    case ARM_BUILTIN_WRORHI:\n+    case ARM_BUILTIN_WRORWI:\n+    case ARM_BUILTIN_WRORDI:\n+    case ARM_BUILTIN_WSRLH:\n+    case ARM_BUILTIN_WSRLW:\n+    case ARM_BUILTIN_WSRLD:\n+    case ARM_BUILTIN_WSLLH:\n+    case ARM_BUILTIN_WSLLW:\n+    case ARM_BUILTIN_WSLLD:\n+    case ARM_BUILTIN_WSRAH:\n+    case ARM_BUILTIN_WSRAW:\n+    case ARM_BUILTIN_WSRAD:\n+    case ARM_BUILTIN_WRORH:\n+    case ARM_BUILTIN_WRORW:\n+    case ARM_BUILTIN_WRORD:\n+      icode = (fcode == ARM_BUILTIN_WSRLHI ? CODE_FOR_lshrv4hi3_iwmmxt\n+\t       : fcode == ARM_BUILTIN_WSRLWI ? CODE_FOR_lshrv2si3_iwmmxt\n+\t       : fcode == ARM_BUILTIN_WSRLDI ? CODE_FOR_lshrdi3_iwmmxt\n+\t       : fcode == ARM_BUILTIN_WSLLHI ? CODE_FOR_ashlv4hi3_iwmmxt\n+\t       : fcode == ARM_BUILTIN_WSLLWI ? CODE_FOR_ashlv2si3_iwmmxt\n+\t       : fcode == ARM_BUILTIN_WSLLDI ? CODE_FOR_ashldi3_iwmmxt\n+\t       : fcode == ARM_BUILTIN_WSRAHI ? CODE_FOR_ashrv4hi3_iwmmxt\n+\t       : fcode == ARM_BUILTIN_WSRAWI ? CODE_FOR_ashrv2si3_iwmmxt\n+\t       : fcode == ARM_BUILTIN_WSRADI ? CODE_FOR_ashrdi3_iwmmxt\n+\t       : fcode == ARM_BUILTIN_WRORHI ? CODE_FOR_rorv4hi3\n+\t       : fcode == ARM_BUILTIN_WRORWI ? CODE_FOR_rorv2si3\n+\t       : fcode == ARM_BUILTIN_WRORDI ? CODE_FOR_rordi3\n+\t       : fcode == ARM_BUILTIN_WSRLH  ? CODE_FOR_lshrv4hi3_di\n+\t       : fcode == ARM_BUILTIN_WSRLW  ? CODE_FOR_lshrv2si3_di\n+\t       : fcode == ARM_BUILTIN_WSRLD  ? CODE_FOR_lshrdi3_di\n+\t       : fcode == ARM_BUILTIN_WSLLH  ? CODE_FOR_ashlv4hi3_di\n+\t       : fcode == ARM_BUILTIN_WSLLW  ? CODE_FOR_ashlv2si3_di\n+\t       : fcode == ARM_BUILTIN_WSLLD  ? CODE_FOR_ashldi3_di\n+\t       : fcode == ARM_BUILTIN_WSRAH  ? CODE_FOR_ashrv4hi3_di\n+\t       : fcode == ARM_BUILTIN_WSRAW  ? CODE_FOR_ashrv2si3_di\n+\t       : fcode == ARM_BUILTIN_WSRAD  ? CODE_FOR_ashrdi3_di\n+\t       : fcode == ARM_BUILTIN_WRORH  ? CODE_FOR_rorv4hi3_di\n+\t       : fcode == ARM_BUILTIN_WRORW  ? CODE_FOR_rorv2si3_di\n+\t       : fcode == ARM_BUILTIN_WRORD  ? CODE_FOR_rordi3_di\n+\t       : CODE_FOR_nothing);\n+      arg1 = CALL_EXPR_ARG (exp, 1);\n+      op1 = expand_normal (arg1);\n+      if (GET_MODE (op1) == VOIDmode)\n+\t{\n+\t  imm = INTVAL (op1);\n+\t  if ((fcode == ARM_BUILTIN_WRORHI || fcode == ARM_BUILTIN_WRORWI\n+\t       || fcode == ARM_BUILTIN_WRORH || fcode == ARM_BUILTIN_WRORW)\n+\t      && (imm < 0 || imm > 32))\n+\t    {\n+\t      if (fcode == ARM_BUILTIN_WRORHI)\n+\t\terror (\"the range of count should be in 0 to 32.  please check the intrinsic _mm_rori_pi16 in code.\");\n+\t      else if (fcode == ARM_BUILTIN_WRORWI)\n+\t\terror (\"the range of count should be in 0 to 32.  please check the intrinsic _mm_rori_pi32 in code.\");\n+\t      else if (fcode == ARM_BUILTIN_WRORH)\n+\t\terror (\"the range of count should be in 0 to 32.  please check the intrinsic _mm_ror_pi16 in code.\");\n+\t      else\n+\t\terror (\"the range of count should be in 0 to 32.  please check the intrinsic _mm_ror_pi32 in code.\");\n+\t    }\n+\t  else if ((fcode == ARM_BUILTIN_WRORDI || fcode == ARM_BUILTIN_WRORD)\n+\t\t   && (imm < 0 || imm > 64))\n+\t    {\n+\t      if (fcode == ARM_BUILTIN_WRORDI)\n+\t\terror (\"the range of count should be in 0 to 64.  please check the intrinsic _mm_rori_si64 in code.\");\n+\t      else\n+\t\terror (\"the range of count should be in 0 to 64.  please check the intrinsic _mm_ror_si64 in code.\");\n+\t    }\n+\t  else if (imm < 0)\n+\t    {\n+\t      if (fcode == ARM_BUILTIN_WSRLHI)\n+\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_srli_pi16 in code.\");\n+\t      else if (fcode == ARM_BUILTIN_WSRLWI)\n+\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_srli_pi32 in code.\");\n+\t      else if (fcode == ARM_BUILTIN_WSRLDI)\n+\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_srli_si64 in code.\");\n+\t      else if (fcode == ARM_BUILTIN_WSLLHI)\n+\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_slli_pi16 in code.\");\n+\t      else if (fcode == ARM_BUILTIN_WSLLWI)\n+\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_slli_pi32 in code.\");\n+\t      else if (fcode == ARM_BUILTIN_WSLLDI)\n+\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_slli_si64 in code.\");\n+\t      else if (fcode == ARM_BUILTIN_WSRAHI)\n+\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_srai_pi16 in code.\");\n+\t      else if (fcode == ARM_BUILTIN_WSRAWI)\n+\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_srai_pi32 in code.\");\n+\t      else if (fcode == ARM_BUILTIN_WSRADI)\n+\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_srai_si64 in code.\");\n+\t      else if (fcode == ARM_BUILTIN_WSRLH)\n+\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_srl_pi16 in code.\");\n+\t      else if (fcode == ARM_BUILTIN_WSRLW)\n+\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_srl_pi32 in code.\");\n+\t      else if (fcode == ARM_BUILTIN_WSRLD)\n+\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_srl_si64 in code.\");\n+\t      else if (fcode == ARM_BUILTIN_WSLLH)\n+\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_sll_pi16 in code.\");\n+\t      else if (fcode == ARM_BUILTIN_WSLLW)\n+\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_sll_pi32 in code.\");\n+\t      else if (fcode == ARM_BUILTIN_WSLLD)\n+\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_sll_si64 in code.\");\n+\t      else if (fcode == ARM_BUILTIN_WSRAH)\n+\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_sra_pi16 in code.\");\n+\t      else if (fcode == ARM_BUILTIN_WSRAW)\n+\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_sra_pi32 in code.\");\n+\t      else\n+\t\terror (\"the count should be no less than 0.  please check the intrinsic _mm_sra_si64 in code.\");\n+\t    }\n+\t}\n+      return arm_expand_binop_builtin (icode, exp, target);\n+\n     case ARM_BUILTIN_THREAD_POINTER:\n       return arm_load_tp (target);\n \n@@ -24641,6 +25148,95 @@ arm_output_shift(rtx * operands, int set_flags)\n   return \"\";\n }\n \n+/* Output assembly for a WMMX immediate shift instruction.  */\n+const char *\n+arm_output_iwmmxt_shift_immediate (const char *insn_name, rtx *operands, bool wror_or_wsra)\n+{\n+  int shift = INTVAL (operands[2]);\n+  char templ[50];\n+  enum machine_mode opmode = GET_MODE (operands[0]);\n+\n+  gcc_assert (shift >= 0);\n+\n+  /* If the shift value in the register versions is > 63 (for D qualifier),\n+     31 (for W qualifier) or 15 (for H qualifier).  */\n+  if (((opmode == V4HImode) && (shift > 15))\n+\t|| ((opmode == V2SImode) && (shift > 31))\n+\t|| ((opmode == DImode) && (shift > 63)))\n+  {\n+    if (wror_or_wsra)\n+      {\n+        sprintf (templ, \"%s\\t%%0, %%1, #%d\", insn_name, 32);\n+        output_asm_insn (templ, operands);\n+        if (opmode == DImode)\n+          {\n+\t    sprintf (templ, \"%s\\t%%0, %%0, #%d\", insn_name, 32);\n+\t    output_asm_insn (templ, operands);\n+          }\n+      }\n+    else\n+      {\n+        /* The destination register will contain all zeros.  */\n+        sprintf (templ, \"wzero\\t%%0\");\n+        output_asm_insn (templ, operands);\n+      }\n+    return \"\";\n+  }\n+\n+  if ((opmode == DImode) && (shift > 32))\n+    {\n+      sprintf (templ, \"%s\\t%%0, %%1, #%d\", insn_name, 32);\n+      output_asm_insn (templ, operands);\n+      sprintf (templ, \"%s\\t%%0, %%0, #%d\", insn_name, shift - 32);\n+      output_asm_insn (templ, operands);\n+    }\n+  else\n+    {\n+      sprintf (templ, \"%s\\t%%0, %%1, #%d\", insn_name, shift);\n+      output_asm_insn (templ, operands);\n+    }\n+  return \"\";\n+}\n+\n+/* Output assembly for a WMMX tinsr instruction.  */\n+const char *\n+arm_output_iwmmxt_tinsr (rtx *operands)\n+{\n+  int mask = INTVAL (operands[3]);\n+  int i;\n+  char templ[50];\n+  int units = mode_nunits[GET_MODE (operands[0])];\n+  gcc_assert ((mask & (mask - 1)) == 0);\n+  for (i = 0; i < units; ++i)\n+    {\n+      if ((mask & 0x01) == 1)\n+        {\n+          break;\n+        }\n+      mask >>= 1;\n+    }\n+  gcc_assert (i < units);\n+  {\n+    switch (GET_MODE (operands[0]))\n+      {\n+      case V8QImode:\n+\tsprintf (templ, \"tinsrb%%?\\t%%0, %%2, #%d\", i);\n+\tbreak;\n+      case V4HImode:\n+\tsprintf (templ, \"tinsrh%%?\\t%%0, %%2, #%d\", i);\n+\tbreak;\n+      case V2SImode:\n+\tsprintf (templ, \"tinsrw%%?\\t%%0, %%2, #%d\", i);\n+\tbreak;\n+      default:\n+\tgcc_unreachable ();\n+\tbreak;\n+      }\n+    output_asm_insn (templ, operands);\n+  }\n+  return \"\";\n+}\n+\n /* Output a Thumb-1 casesi dispatch sequence.  */\n const char *\n thumb1_output_casesi (rtx *operands)"}, {"sha": "c51bce9451825a4ec6f34ad640f572c92d30e9bc", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=8fd0351502e37a0b3b1a2a4c088477f99cd9b314", "patch": "@@ -97,6 +97,8 @@ extern char arm_arch_name[];\n \t  builtin_define (\"__XSCALE__\");\t\t\\\n \tif (arm_arch_iwmmxt)\t\t\t\t\\\n \t  builtin_define (\"__IWMMXT__\");\t\t\\\n+\tif (arm_arch_iwmmxt2)\t\t\t\t\\\n+\t  builtin_define (\"__IWMMXT2__\");\t\t\\\n \tif (TARGET_AAPCS_BASED)\t\t\t\t\\\n \t  {\t\t\t\t\t\t\\\n \t    if (arm_pcs_default == ARM_PCS_AAPCS_VFP)\t\\\n@@ -194,7 +196,9 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n #define TARGET_MAVERICK\t\t(arm_fpu_desc->model == ARM_FP_MODEL_MAVERICK)\n #define TARGET_VFP\t\t(arm_fpu_desc->model == ARM_FP_MODEL_VFP)\n #define TARGET_IWMMXT\t\t\t(arm_arch_iwmmxt)\n+#define TARGET_IWMMXT2\t\t\t(arm_arch_iwmmxt2)\n #define TARGET_REALLY_IWMMXT\t\t(TARGET_IWMMXT && TARGET_32BIT)\n+#define TARGET_REALLY_IWMMXT2\t\t(TARGET_IWMMXT2 && TARGET_32BIT)\n #define TARGET_IWMMXT_ABI (TARGET_32BIT && arm_abi == ARM_ABI_IWMMXT)\n #define TARGET_ARM                      (! TARGET_THUMB)\n #define TARGET_EITHER\t\t\t1 /* (TARGET_ARM | TARGET_THUMB) */\n@@ -410,6 +414,9 @@ extern int arm_arch_cirrus;\n /* Nonzero if this chip supports Intel XScale with Wireless MMX technology.  */\n extern int arm_arch_iwmmxt;\n \n+/* Nonzero if this chip supports Intel Wireless MMX2 technology.  */\n+extern int arm_arch_iwmmxt2;\n+\n /* Nonzero if this chip is an XScale.  */\n extern int arm_arch_xscale;\n "}, {"sha": "002ca60b173dd6b84de6636fb7fe2c1eb8c5a953", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=8fd0351502e37a0b3b1a2a4c088477f99cd9b314", "patch": "@@ -62,6 +62,7 @@\n ;; UNSPEC Usage:\n ;; Note: sin and cos are no-longer used.\n ;; Unspec enumerators for Neon are defined in neon.md.\n+;; Unspec enumerators for iwmmxt2 are defined in iwmmxt2.md\n \n (define_c_enum \"unspec\" [\n   UNSPEC_SIN            ; `sin' operation (MODE_FLOAT):\n@@ -98,8 +99,7 @@\n   UNSPEC_WMACSZ         ; Used by the intrinsic form of the iWMMXt WMACSZ instruction.\n   UNSPEC_WMACUZ         ; Used by the intrinsic form of the iWMMXt WMACUZ instruction.\n   UNSPEC_CLRDI          ; Used by the intrinsic form of the iWMMXt CLRDI instruction.\n-  UNSPEC_WMADDS         ; Used by the intrinsic form of the iWMMXt WMADDS instruction.\n-  UNSPEC_WMADDU         ; Used by the intrinsic form of the iWMMXt WMADDU instruction.\n+  UNSPEC_WALIGNI        ; Used by the intrinsic form of the iWMMXt WALIGN instruction.\n   UNSPEC_TLS            ; A symbol that has been treated properly for TLS usage.\n   UNSPEC_PIC_LABEL      ; A label used for PIC access that does not appear in the\n                         ; instruction stream.\n@@ -197,7 +197,7 @@\n ; for ARM or Thumb-2 with arm_arch6, and nov6 for ARM without\n ; arm_arch6.  This attribute is used to compute attribute \"enabled\",\n ; use type \"any\" to enable an alternative in all cases.\n-(define_attr \"arch\" \"any,a,t,32,t1,t2,v6,nov6,onlya8,neon_onlya8,nota8,neon_nota8\"\n+(define_attr \"arch\" \"any,a,t,32,t1,t2,v6,nov6,onlya8,neon_onlya8,nota8,neon_nota8,iwmmxt,iwmmxt2\"\n   (const_string \"any\"))\n \n (define_attr \"arch_enabled\" \"no,yes\"\n@@ -248,7 +248,12 @@\n \t (and (eq_attr \"arch\" \"neon_nota8\")\n \t      (not (eq_attr \"tune\" \"cortexa8\"))\n \t      (match_test \"TARGET_NEON\"))\n+\t (const_string \"yes\")\n+\n+\t (and (eq_attr \"arch\" \"iwmmxt2\")\n+\t      (match_test \"TARGET_REALLY_IWMMXT2\"))\n \t (const_string \"yes\")]\n+\n \t(const_string \"no\")))\n \n ; Allows an insn to disable certain alternatives for reasons other than\n@@ -362,6 +367,10 @@\n \t       (const_string \"yes\")\n \t       (const_string \"no\")))\n \n+; wtype for WMMX insn scheduling purposes.\n+(define_attr \"wtype\"\n+        \"none,wor,wxor,wand,wandn,wmov,tmcrr,tmrrc,wldr,wstr,tmcr,tmrc,wadd,wsub,wmul,wmac,wavg2,tinsr,textrm,wshufh,wcmpeq,wcmpgt,wmax,wmin,wpack,wunpckih,wunpckil,wunpckeh,wunpckel,wror,wsra,wsrl,wsll,wmadd,tmia,tmiaph,tmiaxy,tbcst,tmovmsk,wacc,waligni,walignr,tandc,textrc,torc,torvsc,wsad,wabs,wabsdiff,waddsubhx,wsubaddhx,wavg4,wmulw,wqmulm,wqmulwm,waddbhus,wqmiaxy,wmiaxy,wmiawxy,wmerge\" (const_string \"none\"))\n+\n ; Load scheduling, set from the arm_ld_sched variable\n ; initialized by arm_option_override()\n (define_attr \"ldsched\" \"no,yes\" (const (symbol_ref \"arm_ld_sched\")))\n@@ -538,6 +547,7 @@\n \t  (const_string \"yes\")\n \t  (const_string \"no\"))))\n \n+(include \"marvell-f-iwmmxt.md\")\n (include \"arm-generic.md\")\n (include \"arm926ejs.md\")\n (include \"arm1020e.md\")"}, {"sha": "795a5ee16345b5686a562141f939484fccec583b", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=8fd0351502e37a0b3b1a2a4c088477f99cd9b314", "patch": "@@ -1,5 +1,5 @@\n ;; Code and mode itertator and attribute definitions for the ARM backend\n-;; Copyright (C) 2010 Free Software Foundation, Inc.\n+;; Copyright (C) 2010, 2012 Free Software Foundation, Inc.\n ;; Contributed by ARM Ltd.\n ;;\n ;; This file is part of GCC.\n@@ -45,6 +45,8 @@\n ;; Integer element sizes implemented by IWMMXT.\n (define_mode_iterator VMMX [V2SI V4HI V8QI])\n \n+(define_mode_iterator VMMX2 [V4HI V2SI])\n+\n ;; Integer element sizes for shifts.\n (define_mode_iterator VSHFT [V4HI V2SI DI])\n "}, {"sha": "81117914ff530d6bf200e31f3ab7d1608b4d37b1", "filename": "gcc/config/arm/iwmmxt.md", "status": "modified", "additions": 1100, "deletions": 655, "changes": 1755, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Fiwmmxt.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Fiwmmxt.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiwmmxt.md?ref=8fd0351502e37a0b3b1a2a4c088477f99cd9b314", "patch": "@@ -1,6 +1,5 @@\n-;; ??? This file needs auditing for thumb2\n ;; Patterns for the Intel Wireless MMX technology architecture.\n-;; Copyright (C) 2003, 2004, 2005, 2007, 2008, 2010\n+;; Copyright (C) 2003, 2004, 2005, 2007, 2008, 2010, 2012\n ;; Free Software Foundation, Inc.\n ;; Contributed by Red Hat.\n \n@@ -20,6 +19,41 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n+;; Register numbers\n+(define_constants\n+  [(WCGR0           43)\n+   (WCGR1           44)\n+   (WCGR2           45)\n+   (WCGR3           46)\n+  ]\n+)\n+\n+(define_insn \"tbcstv8qi\"\n+  [(set (match_operand:V8QI                   0 \"register_operand\" \"=y\")\n+        (vec_duplicate:V8QI (match_operand:QI 1 \"s_register_operand\" \"r\")))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"tbcstb%?\\\\t%0, %1\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"tbcst\")]\n+)\n+\n+(define_insn \"tbcstv4hi\"\n+  [(set (match_operand:V4HI                   0 \"register_operand\" \"=y\")\n+        (vec_duplicate:V4HI (match_operand:HI 1 \"s_register_operand\" \"r\")))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"tbcsth%?\\\\t%0, %1\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"tbcst\")]\n+)\n+\n+(define_insn \"tbcstv2si\"\n+  [(set (match_operand:V2SI                   0 \"register_operand\" \"=y\")\n+        (vec_duplicate:V2SI (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"tbcstw%?\\\\t%0, %1\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"tbcst\")]\n+)\n \n (define_insn \"iwmmxt_iordi3\"\n   [(set (match_operand:DI         0 \"register_operand\" \"=y,?&r,?&r\")\n@@ -31,7 +65,9 @@\n    #\n    #\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"length\" \"4,8,8\")])\n+   (set_attr \"length\" \"4,8,8\")\n+   (set_attr \"wtype\" \"wor,none,none\")]\n+)\n \n (define_insn \"iwmmxt_xordi3\"\n   [(set (match_operand:DI         0 \"register_operand\" \"=y,?&r,?&r\")\n@@ -43,7 +79,9 @@\n    #\n    #\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"length\" \"4,8,8\")])\n+   (set_attr \"length\" \"4,8,8\")\n+   (set_attr \"wtype\" \"wxor,none,none\")]\n+)\n \n (define_insn \"iwmmxt_anddi3\"\n   [(set (match_operand:DI         0 \"register_operand\" \"=y,?&r,?&r\")\n@@ -55,72 +93,106 @@\n    #\n    #\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"length\" \"4,8,8\")])\n+   (set_attr \"length\" \"4,8,8\")\n+   (set_attr \"wtype\" \"wand,none,none\")]\n+)\n \n (define_insn \"iwmmxt_nanddi3\"\n   [(set (match_operand:DI                 0 \"register_operand\" \"=y\")\n         (and:DI (match_operand:DI         1 \"register_operand\"  \"y\")\n \t\t(not:DI (match_operand:DI 2 \"register_operand\"  \"y\"))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wandn%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wandn\")]\n+)\n \n (define_insn \"*iwmmxt_arm_movdi\"\n-  [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r, r, m,y,y,yr,y,yrUy\")\n-\t(match_operand:DI 1 \"di_operand\"              \"rIK,mi,r,y,yr,y,yrUy,y\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r, r, r, r, m,y,y,yr,y,yrUy,*w, r,*w,*w, *Uv\")\n+        (match_operand:DI 1 \"di_operand\"              \"rDa,Db,Dc,mi,r,y,yr,y,yrUy,y, r,*w,*w,*Uvi,*w\"))]\n   \"TARGET_REALLY_IWMMXT\n    && (   register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode))\"\n   \"*\n-{\n   switch (which_alternative)\n     {\n-    default:\n-      return output_move_double (operands, true, NULL);\n     case 0:\n+    case 1:\n+    case 2:\n       return \\\"#\\\";\n-    case 3:\n+    case 3: case 4:\n+      return output_move_double (operands, true, NULL);\n+    case 5:\n       return \\\"wmov%?\\\\t%0,%1\\\";\n-    case 4:\n+    case 6:\n       return \\\"tmcrr%?\\\\t%0,%Q1,%R1\\\";\n-    case 5:\n+    case 7:\n       return \\\"tmrrc%?\\\\t%Q0,%R0,%1\\\";\n-    case 6:\n+    case 8:\n       return \\\"wldrd%?\\\\t%0,%1\\\";\n-    case 7:\n+    case 9:\n       return \\\"wstrd%?\\\\t%1,%0\\\";\n+    case 10:\n+      return \\\"fmdrr%?\\\\t%P0, %Q1, %R1\\\\t%@ int\\\";\n+    case 11:\n+      return \\\"fmrrd%?\\\\t%Q0, %R0, %P1\\\\t%@ int\\\";\n+    case 12:\n+      if (TARGET_VFP_SINGLE)\n+\treturn \\\"fcpys%?\\\\t%0, %1\\\\t%@ int\\;fcpys%?\\\\t%p0, %p1\\\\t%@ int\\\";\n+      else\n+\treturn \\\"fcpyd%?\\\\t%P0, %P1\\\\t%@ int\\\";\n+    case 13: case 14:\n+      return output_move_vfp (operands);\n+    default:\n+      gcc_unreachable ();\n     }\n-}\"\n-  [(set_attr \"length\"         \"8,8,8,4,4,4,4,4\")\n-   (set_attr \"type\"           \"*,load1,store2,*,*,*,*,*\")\n-   (set_attr \"pool_range\"     \"*,1020,*,*,*,*,*,*\")\n-   (set_attr \"neg_pool_range\" \"*,1012,*,*,*,*,*,*\")]\n+  \"\n+  [(set (attr \"length\") (cond [(eq_attr \"alternative\" \"0,3,4\") (const_int 8)\n+                              (eq_attr \"alternative\" \"1\") (const_int 12)\n+                              (eq_attr \"alternative\" \"2\") (const_int 16)\n+                              (eq_attr \"alternative\" \"12\")\n+                               (if_then_else\n+                                 (eq (symbol_ref \"TARGET_VFP_SINGLE\") (const_int 1))\n+                                 (const_int 8)\n+                                 (const_int 4))]\n+                              (const_int 4)))\n+   (set_attr \"type\" \"*,*,*,load2,store2,*,*,*,*,*,r_2_f,f_2_r,ffarithd,f_loadd,f_stored\")\n+   (set_attr \"arm_pool_range\" \"*,*,*,1020,*,*,*,*,*,*,*,*,*,1020,*\")\n+   (set_attr \"arm_neg_pool_range\" \"*,*,*,1008,*,*,*,*,*,*,*,*,*,1008,*\")\n+   (set_attr \"wtype\" \"*,*,*,*,*,wmov,tmcrr,tmrrc,wldr,wstr,*,*,*,*,*\")]\n )\n \n (define_insn \"*iwmmxt_movsi_insn\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,r,rk, m,z,r,?z,Uy,z\")\n-\t(match_operand:SI 1 \"general_operand\"      \"rk, I,K,mi,rk,r,z,Uy,z, z\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,r,r,rk, m,z,r,?z,?Uy,*t, r,*t,*t  ,*Uv\")\n+\t(match_operand:SI 1 \"general_operand\"      \" rk,I,K,j,mi,rk,r,z,Uy,  z, r,*t,*t,*Uvi, *t\"))]\n   \"TARGET_REALLY_IWMMXT\n    && (   register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n   \"*\n    switch (which_alternative)\n-   {\n-   case 0: return \\\"mov\\\\t%0, %1\\\";\n-   case 1: return \\\"mov\\\\t%0, %1\\\";\n-   case 2: return \\\"mvn\\\\t%0, #%B1\\\";\n-   case 3: return \\\"ldr\\\\t%0, %1\\\";\n-   case 4: return \\\"str\\\\t%1, %0\\\";\n-   case 5: return \\\"tmcr\\\\t%0, %1\\\";\n-   case 6: return \\\"tmrc\\\\t%0, %1\\\";\n-   case 7: return arm_output_load_gr (operands);\n-   case 8: return \\\"wstrw\\\\t%1, %0\\\";\n-   default:return \\\"wstrw\\\\t%1, [sp, #-4]!\\;wldrw\\\\t%0, [sp], #4\\\\t@move CG reg\\\";\n-  }\"\n-  [(set_attr \"type\"           \"*,*,*,load1,store1,*,*,load1,store1,*\")\n-   (set_attr \"length\"         \"*,*,*,*,        *,*,*,  16,     *,8\")\n-   (set_attr \"pool_range\"     \"*,*,*,4096,     *,*,*,1024,     *,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,4084,     *,*,*,   *,  1012,*\")\n+     {\n+     case 0: return \\\"mov\\\\t%0, %1\\\";\n+     case 1: return \\\"mov\\\\t%0, %1\\\";\n+     case 2: return \\\"mvn\\\\t%0, #%B1\\\";\n+     case 3: return \\\"movw\\\\t%0, %1\\\";\n+     case 4: return \\\"ldr\\\\t%0, %1\\\";\n+     case 5: return \\\"str\\\\t%1, %0\\\";\n+     case 6: return \\\"tmcr\\\\t%0, %1\\\";\n+     case 7: return \\\"tmrc\\\\t%0, %1\\\";\n+     case 8: return arm_output_load_gr (operands);\n+     case 9: return \\\"wstrw\\\\t%1, %0\\\";\n+     case 10:return \\\"fmsr\\\\t%0, %1\\\";\n+     case 11:return \\\"fmrs\\\\t%0, %1\\\";\n+     case 12:return \\\"fcpys\\\\t%0, %1\\\\t%@ int\\\";\n+     case 13: case 14:\n+       return output_move_vfp (operands);\n+     default:\n+       gcc_unreachable ();\n+     }\"\n+  [(set_attr \"type\"           \"*,*,*,*,load1,store1,*,*,*,*,r_2_f,f_2_r,fcpys,f_loads,f_stores\")\n+   (set_attr \"length\"         \"*,*,*,*,*,        *,*,*,  16,     *,*,*,*,*,*\")\n+   (set_attr \"pool_range\"     \"*,*,*,*,4096,     *,*,*,1024,     *,*,*,*,1020,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,*,4084,     *,*,*,   *,  1012,*,*,*,1008,*\")\n    ;; Note - the \"predicable\" attribute is not allowed to have alternatives.\n    ;; Since the wSTRw wCx instruction is not predicable, we cannot support\n    ;; predicating any of the alternatives in this template.  Instead,\n@@ -129,7 +201,8 @@\n    ;; Also - we have to pretend that these insns clobber the condition code\n    ;; bits as otherwise arm_final_prescan_insn() will try to conditionalize\n    ;; them.\n-   (set_attr \"conds\" \"clob\")]\n+   (set_attr \"conds\" \"clob\")\n+   (set_attr \"wtype\" \"*,*,*,*,*,*,tmcr,tmrc,wldr,wstr,*,*,*,*,*\")]\n )\n \n ;; Because iwmmxt_movsi_insn is not predicable, we provide the\n@@ -177,187 +250,318 @@\n    }\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"length\"         \"4,     4,   4,4,4,8,   8,8\")\n-   (set_attr \"type\"           \"*,store1,load1,*,*,*,load1,store1\")\n+   (set_attr \"type\"           \"*,*,*,*,*,*,load1,store1\")\n    (set_attr \"pool_range\"     \"*,     *, 256,*,*,*, 256,*\")\n-   (set_attr \"neg_pool_range\" \"*,     *, 244,*,*,*, 244,*\")])\n+   (set_attr \"neg_pool_range\" \"*,     *, 244,*,*,*, 244,*\")\n+   (set_attr \"wtype\"          \"wmov,wstr,wldr,tmrrc,tmcrr,*,*,*\")]\n+)\n+\n+(define_expand \"iwmmxt_setwcgr0\"\n+  [(set (reg:SI WCGR0)\n+\t(match_operand:SI 0 \"register_operand\"  \"\"))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  {}\n+)\n+\n+(define_expand \"iwmmxt_setwcgr1\"\n+  [(set (reg:SI WCGR1)\n+\t(match_operand:SI 0 \"register_operand\"  \"\"))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  {}\n+)\n+\n+(define_expand \"iwmmxt_setwcgr2\"\n+  [(set (reg:SI WCGR2)\n+\t(match_operand:SI 0 \"register_operand\"  \"\"))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  {}\n+)\n+\n+(define_expand \"iwmmxt_setwcgr3\"\n+  [(set (reg:SI WCGR3)\n+\t(match_operand:SI 0 \"register_operand\"  \"\"))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  {}\n+)\n+\n+(define_expand \"iwmmxt_getwcgr0\"\n+  [(set (match_operand:SI 0 \"register_operand\"  \"\")\n+        (reg:SI WCGR0))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  {}\n+)\n+\n+(define_expand \"iwmmxt_getwcgr1\"\n+  [(set (match_operand:SI 0 \"register_operand\"  \"\")\n+        (reg:SI WCGR1))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  {}\n+)\n+\n+(define_expand \"iwmmxt_getwcgr2\"\n+  [(set (match_operand:SI 0 \"register_operand\"  \"\")\n+        (reg:SI WCGR2))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  {}\n+)\n+\n+(define_expand \"iwmmxt_getwcgr3\"\n+  [(set (match_operand:SI 0 \"register_operand\"  \"\")\n+        (reg:SI WCGR3))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  {}\n+)\n+\n+(define_insn \"*and<mode>3_iwmmxt\"\n+  [(set (match_operand:VMMX           0 \"register_operand\" \"=y\")\n+        (and:VMMX (match_operand:VMMX 1 \"register_operand\"  \"y\")\n+\t          (match_operand:VMMX 2 \"register_operand\"  \"y\")))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wand\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wand\")]\n+)\n+\n+(define_insn \"*ior<mode>3_iwmmxt\"\n+  [(set (match_operand:VMMX           0 \"register_operand\" \"=y\")\n+        (ior:VMMX (match_operand:VMMX 1 \"register_operand\"  \"y\")\n+\t          (match_operand:VMMX 2 \"register_operand\"  \"y\")))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wor\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wor\")]\n+)\n+\n+(define_insn \"*xor<mode>3_iwmmxt\"\n+  [(set (match_operand:VMMX           0 \"register_operand\" \"=y\")\n+        (xor:VMMX (match_operand:VMMX 1 \"register_operand\"  \"y\")\n+\t          (match_operand:VMMX 2 \"register_operand\"  \"y\")))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wxor\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wxor\")]\n+)\n+\n \n ;; Vector add/subtract\n \n (define_insn \"*add<mode>3_iwmmxt\"\n   [(set (match_operand:VMMX            0 \"register_operand\" \"=y\")\n-        (plus:VMMX (match_operand:VMMX 1 \"register_operand\"  \"y\")\n-\t           (match_operand:VMMX 2 \"register_operand\"  \"y\")))]\n+        (plus:VMMX (match_operand:VMMX 1 \"register_operand\" \"y\")\n+\t           (match_operand:VMMX 2 \"register_operand\" \"y\")))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wadd<MMX_char>%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wadd\")]\n+)\n \n (define_insn \"ssaddv8qi3\"\n   [(set (match_operand:V8QI               0 \"register_operand\" \"=y\")\n         (ss_plus:V8QI (match_operand:V8QI 1 \"register_operand\"  \"y\")\n \t\t      (match_operand:V8QI 2 \"register_operand\"  \"y\")))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"waddbss%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wadd\")]\n+)\n \n (define_insn \"ssaddv4hi3\"\n   [(set (match_operand:V4HI               0 \"register_operand\" \"=y\")\n         (ss_plus:V4HI (match_operand:V4HI 1 \"register_operand\"  \"y\")\n \t\t      (match_operand:V4HI 2 \"register_operand\"  \"y\")))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"waddhss%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wadd\")]\n+)\n \n (define_insn \"ssaddv2si3\"\n   [(set (match_operand:V2SI               0 \"register_operand\" \"=y\")\n         (ss_plus:V2SI (match_operand:V2SI 1 \"register_operand\"  \"y\")\n \t\t      (match_operand:V2SI 2 \"register_operand\"  \"y\")))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"waddwss%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wadd\")]\n+)\n \n (define_insn \"usaddv8qi3\"\n   [(set (match_operand:V8QI               0 \"register_operand\" \"=y\")\n         (us_plus:V8QI (match_operand:V8QI 1 \"register_operand\"  \"y\")\n \t\t      (match_operand:V8QI 2 \"register_operand\"  \"y\")))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"waddbus%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wadd\")]\n+)\n \n (define_insn \"usaddv4hi3\"\n   [(set (match_operand:V4HI               0 \"register_operand\" \"=y\")\n         (us_plus:V4HI (match_operand:V4HI 1 \"register_operand\"  \"y\")\n \t\t      (match_operand:V4HI 2 \"register_operand\"  \"y\")))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"waddhus%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wadd\")]\n+)\n \n (define_insn \"usaddv2si3\"\n   [(set (match_operand:V2SI               0 \"register_operand\" \"=y\")\n         (us_plus:V2SI (match_operand:V2SI 1 \"register_operand\"  \"y\")\n \t\t      (match_operand:V2SI 2 \"register_operand\"  \"y\")))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"waddwus%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wadd\")]\n+)\n \n (define_insn \"*sub<mode>3_iwmmxt\"\n   [(set (match_operand:VMMX             0 \"register_operand\" \"=y\")\n         (minus:VMMX (match_operand:VMMX 1 \"register_operand\"  \"y\")\n \t\t    (match_operand:VMMX 2 \"register_operand\"  \"y\")))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wsub<MMX_char>%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wsub\")]\n+)\n \n (define_insn \"sssubv8qi3\"\n   [(set (match_operand:V8QI                0 \"register_operand\" \"=y\")\n         (ss_minus:V8QI (match_operand:V8QI 1 \"register_operand\"  \"y\")\n \t\t       (match_operand:V8QI 2 \"register_operand\"  \"y\")))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wsubbss%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wsub\")]\n+)\n \n (define_insn \"sssubv4hi3\"\n   [(set (match_operand:V4HI                0 \"register_operand\" \"=y\")\n         (ss_minus:V4HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n \t\t       (match_operand:V4HI 2 \"register_operand\" \"y\")))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wsubhss%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wsub\")]\n+)\n \n (define_insn \"sssubv2si3\"\n   [(set (match_operand:V2SI                0 \"register_operand\" \"=y\")\n         (ss_minus:V2SI (match_operand:V2SI 1 \"register_operand\" \"y\")\n \t\t       (match_operand:V2SI 2 \"register_operand\" \"y\")))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wsubwss%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wsub\")]\n+)\n \n (define_insn \"ussubv8qi3\"\n   [(set (match_operand:V8QI                0 \"register_operand\" \"=y\")\n         (us_minus:V8QI (match_operand:V8QI 1 \"register_operand\" \"y\")\n \t\t       (match_operand:V8QI 2 \"register_operand\" \"y\")))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wsubbus%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wsub\")]\n+)\n \n (define_insn \"ussubv4hi3\"\n   [(set (match_operand:V4HI                0 \"register_operand\" \"=y\")\n         (us_minus:V4HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n \t\t       (match_operand:V4HI 2 \"register_operand\" \"y\")))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wsubhus%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wsub\")]\n+)\n \n (define_insn \"ussubv2si3\"\n   [(set (match_operand:V2SI                0 \"register_operand\" \"=y\")\n         (us_minus:V2SI (match_operand:V2SI 1 \"register_operand\" \"y\")\n \t\t       (match_operand:V2SI 2 \"register_operand\" \"y\")))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wsubwus%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wsub\")]\n+)\n \n (define_insn \"*mulv4hi3_iwmmxt\"\n   [(set (match_operand:V4HI            0 \"register_operand\" \"=y\")\n         (mult:V4HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n \t\t   (match_operand:V4HI 2 \"register_operand\" \"y\")))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wmulul%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmul\")]\n+)\n \n (define_insn \"smulv4hi3_highpart\"\n-  [(set (match_operand:V4HI                                0 \"register_operand\" \"=y\")\n-\t(truncate:V4HI\n-\t (lshiftrt:V4SI\n-\t  (mult:V4SI (sign_extend:V4SI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n-\t\t     (sign_extend:V4SI (match_operand:V4HI 2 \"register_operand\" \"y\")))\n-\t  (const_int 16))))]\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+\t  (truncate:V4HI\n+\t    (lshiftrt:V4SI\n+\t      (mult:V4SI (sign_extend:V4SI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n+\t                 (sign_extend:V4SI (match_operand:V4HI 2 \"register_operand\" \"y\")))\n+\t      (const_int 16))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wmulsm%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmul\")]\n+)\n \n (define_insn \"umulv4hi3_highpart\"\n-  [(set (match_operand:V4HI                                0 \"register_operand\" \"=y\")\n-\t(truncate:V4HI\n-\t (lshiftrt:V4SI\n-\t  (mult:V4SI (zero_extend:V4SI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n-\t\t     (zero_extend:V4SI (match_operand:V4HI 2 \"register_operand\" \"y\")))\n-\t  (const_int 16))))]\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+\t  (truncate:V4HI\n+\t    (lshiftrt:V4SI\n+\t      (mult:V4SI (zero_extend:V4SI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n+\t                 (zero_extend:V4SI (match_operand:V4HI 2 \"register_operand\" \"y\")))\n+\t      (const_int 16))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wmulum%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmul\")]\n+)\n \n (define_insn \"iwmmxt_wmacs\"\n   [(set (match_operand:DI               0 \"register_operand\" \"=y\")\n \t(unspec:DI [(match_operand:DI   1 \"register_operand\" \"0\")\n-\t\t    (match_operand:V4HI 2 \"register_operand\" \"y\")\n-\t\t    (match_operand:V4HI 3 \"register_operand\" \"y\")] UNSPEC_WMACS))]\n+\t            (match_operand:V4HI 2 \"register_operand\" \"y\")\n+\t            (match_operand:V4HI 3 \"register_operand\" \"y\")] UNSPEC_WMACS))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wmacs%?\\\\t%0, %2, %3\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmac\")]\n+)\n \n (define_insn \"iwmmxt_wmacsz\"\n   [(set (match_operand:DI               0 \"register_operand\" \"=y\")\n \t(unspec:DI [(match_operand:V4HI 1 \"register_operand\" \"y\")\n-\t\t    (match_operand:V4HI 2 \"register_operand\" \"y\")] UNSPEC_WMACSZ))]\n+\t            (match_operand:V4HI 2 \"register_operand\" \"y\")] UNSPEC_WMACSZ))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wmacsz%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmac\")]\n+)\n \n (define_insn \"iwmmxt_wmacu\"\n   [(set (match_operand:DI               0 \"register_operand\" \"=y\")\n \t(unspec:DI [(match_operand:DI   1 \"register_operand\" \"0\")\n-\t\t    (match_operand:V4HI 2 \"register_operand\" \"y\")\n-\t\t    (match_operand:V4HI 3 \"register_operand\" \"y\")] UNSPEC_WMACU))]\n+\t            (match_operand:V4HI 2 \"register_operand\" \"y\")\n+\t            (match_operand:V4HI 3 \"register_operand\" \"y\")] UNSPEC_WMACU))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wmacu%?\\\\t%0, %2, %3\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmac\")]\n+)\n \n (define_insn \"iwmmxt_wmacuz\"\n   [(set (match_operand:DI               0 \"register_operand\" \"=y\")\n \t(unspec:DI [(match_operand:V4HI 1 \"register_operand\" \"y\")\n-\t\t    (match_operand:V4HI 2 \"register_operand\" \"y\")] UNSPEC_WMACUZ))]\n+\t            (match_operand:V4HI 2 \"register_operand\" \"y\")] UNSPEC_WMACUZ))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wmacuz%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmac\")]\n+)\n \n ;; Same as xordi3, but don't show input operands so that we don't think\n ;; they are live.\n@@ -366,168 +570,207 @@\n         (unspec:DI [(const_int 0)] UNSPEC_CLRDI))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wxor%?\\\\t%0, %0, %0\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wxor\")]\n+)\n \n ;; Seems like cse likes to generate these, so we have to support them.\n \n-(define_insn \"*iwmmxt_clrv8qi\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n+(define_insn \"iwmmxt_clrv8qi\"\n+  [(set (match_operand:V8QI 0 \"s_register_operand\" \"=y\")\n         (const_vector:V8QI [(const_int 0) (const_int 0)\n \t\t\t    (const_int 0) (const_int 0)\n \t\t\t    (const_int 0) (const_int 0)\n \t\t\t    (const_int 0) (const_int 0)]))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wxor%?\\\\t%0, %0, %0\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wxor\")]\n+)\n \n-(define_insn \"*iwmmxt_clrv4hi\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+(define_insn \"iwmmxt_clrv4hi\"\n+  [(set (match_operand:V4HI 0 \"s_register_operand\" \"=y\")\n         (const_vector:V4HI [(const_int 0) (const_int 0)\n \t\t\t    (const_int 0) (const_int 0)]))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wxor%?\\\\t%0, %0, %0\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wxor\")]\n+)\n \n-(define_insn \"*iwmmxt_clrv2si\"\n+(define_insn \"iwmmxt_clrv2si\"\n   [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n         (const_vector:V2SI [(const_int 0) (const_int 0)]))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wxor%?\\\\t%0, %0, %0\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wxor\")]\n+)\n \n ;; Unsigned averages/sum of absolute differences\n \n (define_insn \"iwmmxt_uavgrndv8qi3\"\n-  [(set (match_operand:V8QI              0 \"register_operand\" \"=y\")\n-        (ashiftrt:V8QI\n-\t (plus:V8QI (plus:V8QI\n-\t\t     (match_operand:V8QI 1 \"register_operand\" \"y\")\n-\t\t     (match_operand:V8QI 2 \"register_operand\" \"y\"))\n-\t\t    (const_vector:V8QI [(const_int 1)\n-\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t(const_int 1)]))\n-\t (const_int 1)))]\n+  [(set (match_operand:V8QI                                    0 \"register_operand\" \"=y\")\n+        (truncate:V8QI\n+\t  (lshiftrt:V8HI\n+\t    (plus:V8HI\n+\t      (plus:V8HI (zero_extend:V8HI (match_operand:V8QI 1 \"register_operand\" \"y\"))\n+\t                 (zero_extend:V8HI (match_operand:V8QI 2 \"register_operand\" \"y\")))\n+\t      (const_vector:V8HI [(const_int 1)\n+\t                          (const_int 1)\n+\t                          (const_int 1)\n+\t                          (const_int 1)\n+\t                          (const_int 1)\n+\t                          (const_int 1)\n+\t                          (const_int 1)\n+\t                          (const_int 1)]))\n+\t    (const_int 1))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wavg2br%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wavg2\")]\n+)\n \n (define_insn \"iwmmxt_uavgrndv4hi3\"\n-  [(set (match_operand:V4HI              0 \"register_operand\" \"=y\")\n-        (ashiftrt:V4HI\n-\t (plus:V4HI (plus:V4HI\n-\t\t     (match_operand:V4HI 1 \"register_operand\" \"y\")\n-\t\t     (match_operand:V4HI 2 \"register_operand\" \"y\"))\n-\t\t    (const_vector:V4HI [(const_int 1)\n-\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t(const_int 1)]))\n-\t (const_int 1)))]\n+  [(set (match_operand:V4HI                                    0 \"register_operand\" \"=y\")\n+        (truncate:V4HI\n+\t  (lshiftrt:V4SI\n+            (plus:V4SI\n+\t      (plus:V4SI (zero_extend:V4SI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n+\t                 (zero_extend:V4SI (match_operand:V4HI 2 \"register_operand\" \"y\")))\n+\t      (const_vector:V4SI [(const_int 1)\n+\t                          (const_int 1)\n+\t                          (const_int 1)\n+\t                          (const_int 1)]))\n+\t    (const_int 1))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wavg2hr%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n-\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wavg2\")]\n+)\n \n (define_insn \"iwmmxt_uavgv8qi3\"\n-  [(set (match_operand:V8QI                 0 \"register_operand\" \"=y\")\n-        (ashiftrt:V8QI (plus:V8QI\n-\t\t\t(match_operand:V8QI 1 \"register_operand\" \"y\")\n-\t\t\t(match_operand:V8QI 2 \"register_operand\" \"y\"))\n-\t\t       (const_int 1)))]\n+  [(set (match_operand:V8QI                                  0 \"register_operand\" \"=y\")\n+        (truncate:V8QI\n+\t  (lshiftrt:V8HI\n+\t    (plus:V8HI (zero_extend:V8HI (match_operand:V8QI 1 \"register_operand\" \"y\"))\n+\t               (zero_extend:V8HI (match_operand:V8QI 2 \"register_operand\" \"y\")))\n+\t    (const_int 1))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wavg2b%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wavg2\")]\n+)\n \n (define_insn \"iwmmxt_uavgv4hi3\"\n-  [(set (match_operand:V4HI                 0 \"register_operand\" \"=y\")\n-        (ashiftrt:V4HI (plus:V4HI\n-\t\t\t(match_operand:V4HI 1 \"register_operand\" \"y\")\n-\t\t\t(match_operand:V4HI 2 \"register_operand\" \"y\"))\n-\t\t       (const_int 1)))]\n+  [(set (match_operand:V4HI                                  0 \"register_operand\" \"=y\")\n+        (truncate:V4HI\n+\t  (lshiftrt:V4SI\n+\t    (plus:V4SI (zero_extend:V4SI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n+\t               (zero_extend:V4SI (match_operand:V4HI 2 \"register_operand\" \"y\")))\n+\t    (const_int 1))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wavg2h%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n-\n-(define_insn \"iwmmxt_psadbw\"\n-  [(set (match_operand:V8QI                       0 \"register_operand\" \"=y\")\n-        (abs:V8QI (minus:V8QI (match_operand:V8QI 1 \"register_operand\" \"y\")\n-\t\t\t      (match_operand:V8QI 2 \"register_operand\" \"y\"))))]\n-  \"TARGET_REALLY_IWMMXT\"\n-  \"psadbw%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n-\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wavg2\")]\n+)\n \n ;; Insert/extract/shuffle\n \n (define_insn \"iwmmxt_tinsrb\"\n-  [(set (match_operand:V8QI                             0 \"register_operand\"    \"=y\")\n-        (vec_merge:V8QI (match_operand:V8QI             1 \"register_operand\"     \"0\")\n-\t\t\t(vec_duplicate:V8QI\n-\t\t\t (truncate:QI (match_operand:SI 2 \"nonimmediate_operand\" \"r\")))\n-\t\t\t(match_operand:SI               3 \"immediate_operand\"    \"i\")))]\n+  [(set (match_operand:V8QI                0 \"register_operand\" \"=y\")\n+        (vec_merge:V8QI\n+\t  (vec_duplicate:V8QI\n+\t    (truncate:QI (match_operand:SI 2 \"nonimmediate_operand\" \"r\")))\n+\t  (match_operand:V8QI              1 \"register_operand\"     \"0\")\n+\t  (match_operand:SI                3 \"immediate_operand\"    \"i\")))]\n   \"TARGET_REALLY_IWMMXT\"\n-  \"tinsrb%?\\\\t%0, %2, %3\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  \"*\n+   {\n+     return arm_output_iwmmxt_tinsr (operands);\n+   }\n+   \"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"tinsr\")]\n+)\n \n (define_insn \"iwmmxt_tinsrh\"\n-  [(set (match_operand:V4HI                             0 \"register_operand\"    \"=y\")\n-        (vec_merge:V4HI (match_operand:V4HI             1 \"register_operand\"     \"0\")\n-\t\t\t(vec_duplicate:V4HI\n-\t\t\t (truncate:HI (match_operand:SI 2 \"nonimmediate_operand\" \"r\")))\n-\t\t\t(match_operand:SI               3 \"immediate_operand\"    \"i\")))]\n+  [(set (match_operand:V4HI                0 \"register_operand\"    \"=y\")\n+        (vec_merge:V4HI\n+          (vec_duplicate:V4HI\n+            (truncate:HI (match_operand:SI 2 \"nonimmediate_operand\" \"r\")))\n+\t  (match_operand:V4HI              1 \"register_operand\"     \"0\")\n+\t  (match_operand:SI                3 \"immediate_operand\"    \"i\")))]\n   \"TARGET_REALLY_IWMMXT\"\n-  \"tinsrh%?\\\\t%0, %2, %3\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  \"*\n+   {\n+     return arm_output_iwmmxt_tinsr (operands);\n+   }\n+   \"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"tinsr\")]\n+)\n \n (define_insn \"iwmmxt_tinsrw\"\n-  [(set (match_operand:V2SI                 0 \"register_operand\"    \"=y\")\n-        (vec_merge:V2SI (match_operand:V2SI 1 \"register_operand\"     \"0\")\n-\t\t\t(vec_duplicate:V2SI\n-\t\t\t (match_operand:SI  2 \"nonimmediate_operand\" \"r\"))\n-\t\t\t(match_operand:SI   3 \"immediate_operand\"    \"i\")))]\n+  [(set (match_operand:V2SI   0 \"register_operand\"    \"=y\")\n+        (vec_merge:V2SI\n+          (vec_duplicate:V2SI\n+            (match_operand:SI 2 \"nonimmediate_operand\" \"r\"))\n+          (match_operand:V2SI 1 \"register_operand\"     \"0\")\n+          (match_operand:SI   3 \"immediate_operand\"    \"i\")))]\n   \"TARGET_REALLY_IWMMXT\"\n-  \"tinsrw%?\\\\t%0, %2, %3\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  \"*\n+   {\n+     return arm_output_iwmmxt_tinsr (operands);\n+   }\n+   \"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"tinsr\")]\n+)\n \n (define_insn \"iwmmxt_textrmub\"\n-  [(set (match_operand:SI                                  0 \"register_operand\" \"=r\")\n-        (zero_extend:SI (vec_select:QI (match_operand:V8QI 1 \"register_operand\" \"y\")\n-\t\t\t\t       (parallel\n-\t\t\t\t\t[(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n+  [(set (match_operand:SI                                   0 \"register_operand\" \"=r\")\n+        (zero_extend:SI (vec_select:QI (match_operand:V8QI  1 \"register_operand\" \"y\")\n+\t\t                       (parallel\n+\t\t\t\t         [(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"textrmub%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"textrm\")]\n+)\n \n (define_insn \"iwmmxt_textrmsb\"\n-  [(set (match_operand:SI                                  0 \"register_operand\" \"=r\")\n-        (sign_extend:SI (vec_select:QI (match_operand:V8QI 1 \"register_operand\" \"y\")\n+  [(set (match_operand:SI                                   0 \"register_operand\" \"=r\")\n+        (sign_extend:SI (vec_select:QI (match_operand:V8QI  1 \"register_operand\" \"y\")\n \t\t\t\t       (parallel\n-\t\t\t\t\t[(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n+\t\t\t\t         [(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"textrmsb%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"textrm\")]\n+)\n \n (define_insn \"iwmmxt_textrmuh\"\n-  [(set (match_operand:SI                                  0 \"register_operand\" \"=r\")\n-        (zero_extend:SI (vec_select:HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n+  [(set (match_operand:SI                                   0 \"register_operand\" \"=r\")\n+        (zero_extend:SI (vec_select:HI (match_operand:V4HI  1 \"register_operand\" \"y\")\n \t\t\t\t       (parallel\n-\t\t\t\t\t[(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n+\t\t\t\t         [(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"textrmuh%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"textrm\")]\n+)\n \n (define_insn \"iwmmxt_textrmsh\"\n-  [(set (match_operand:SI                                  0 \"register_operand\" \"=r\")\n-        (sign_extend:SI (vec_select:HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n+  [(set (match_operand:SI                                   0 \"register_operand\" \"=r\")\n+        (sign_extend:SI (vec_select:HI (match_operand:V4HI  1 \"register_operand\" \"y\")\n \t\t\t\t       (parallel\n-\t\t\t\t\t[(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n+\t\t\t\t         [(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"textrmsh%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"textrm\")]\n+)\n \n ;; There are signed/unsigned variants of this instruction, but they are\n ;; pointless.\n@@ -537,15 +780,19 @@\n \t\t       (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")])))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"textrmsw%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"textrm\")]\n+)\n \n (define_insn \"iwmmxt_wshufh\"\n   [(set (match_operand:V4HI               0 \"register_operand\" \"=y\")\n         (unspec:V4HI [(match_operand:V4HI 1 \"register_operand\" \"y\")\n \t\t      (match_operand:SI   2 \"immediate_operand\" \"i\")] UNSPEC_WSHUFH))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wshufh%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wshufh\")]\n+)\n \n ;; Mask-generating comparisons\n ;;\n@@ -557,92 +804,106 @@\n ;; into the entire destination vector, (with the '1' going into the least\n ;; significant element of the vector).  This is not how these instructions\n ;; behave.\n-;;\n-;; Unfortunately the current patterns are illegal.  They are SET insns\n-;; without a SET in them.  They work in most cases for ordinary code\n-;; generation, but there are circumstances where they can cause gcc to fail.\n-;; XXX - FIXME.\n \n (define_insn \"eqv8qi3\"\n-  [(unspec_volatile [(match_operand:V8QI 0 \"register_operand\" \"=y\")\n-\t\t     (match_operand:V8QI 1 \"register_operand\"  \"y\")\n-\t\t     (match_operand:V8QI 2 \"register_operand\"  \"y\")]\n-\t\t    VUNSPEC_WCMP_EQ)]\n+  [(set (match_operand:V8QI                        0 \"register_operand\" \"=y\")\n+\t(unspec_volatile:V8QI [(match_operand:V8QI 1 \"register_operand\"  \"y\")\n+\t                       (match_operand:V8QI 2 \"register_operand\"  \"y\")]\n+\t                      VUNSPEC_WCMP_EQ))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wcmpeqb%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wcmpeq\")]\n+)\n \n (define_insn \"eqv4hi3\"\n-  [(unspec_volatile [(match_operand:V4HI 0 \"register_operand\" \"=y\")\n-\t\t     (match_operand:V4HI 1 \"register_operand\"  \"y\")\n-\t\t     (match_operand:V4HI 2 \"register_operand\"  \"y\")]\n-\t\t    VUNSPEC_WCMP_EQ)]\n+  [(set (match_operand:V4HI                        0 \"register_operand\" \"=y\")\n+\t(unspec_volatile:V4HI [(match_operand:V4HI 1 \"register_operand\"  \"y\")\n+\t\t               (match_operand:V4HI 2 \"register_operand\"  \"y\")]\n+\t                       VUNSPEC_WCMP_EQ))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wcmpeqh%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wcmpeq\")]\n+)\n \n (define_insn \"eqv2si3\"\n-  [(unspec_volatile:V2SI [(match_operand:V2SI 0 \"register_operand\" \"=y\")\n-\t\t\t  (match_operand:V2SI 1 \"register_operand\"  \"y\")\n-\t\t\t  (match_operand:V2SI 2 \"register_operand\"  \"y\")]\n-\t\t\t VUNSPEC_WCMP_EQ)]\n+  [(set (match_operand:V2SI    0 \"register_operand\" \"=y\")\n+\t(unspec_volatile:V2SI\n+\t  [(match_operand:V2SI 1 \"register_operand\"  \"y\")\n+\t   (match_operand:V2SI 2 \"register_operand\"  \"y\")]\n+           VUNSPEC_WCMP_EQ))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wcmpeqw%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wcmpeq\")]\n+)\n \n (define_insn \"gtuv8qi3\"\n-  [(unspec_volatile [(match_operand:V8QI 0 \"register_operand\" \"=y\")\n-\t\t     (match_operand:V8QI 1 \"register_operand\"  \"y\")\n-\t\t     (match_operand:V8QI 2 \"register_operand\"  \"y\")]\n-\t\t    VUNSPEC_WCMP_GTU)]\n+  [(set (match_operand:V8QI                        0 \"register_operand\" \"=y\")\n+\t(unspec_volatile:V8QI [(match_operand:V8QI 1 \"register_operand\"  \"y\")\n+\t                       (match_operand:V8QI 2 \"register_operand\"  \"y\")]\n+\t                       VUNSPEC_WCMP_GTU))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wcmpgtub%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wcmpgt\")]\n+)\n \n (define_insn \"gtuv4hi3\"\n-  [(unspec_volatile [(match_operand:V4HI 0 \"register_operand\" \"=y\")\n-\t\t     (match_operand:V4HI 1 \"register_operand\"  \"y\")\n-\t\t     (match_operand:V4HI 2 \"register_operand\"  \"y\")]\n-\t\t    VUNSPEC_WCMP_GTU)]\n+  [(set (match_operand:V4HI                        0 \"register_operand\" \"=y\")\n+        (unspec_volatile:V4HI [(match_operand:V4HI 1 \"register_operand\"  \"y\")\n+                               (match_operand:V4HI 2 \"register_operand\"  \"y\")]\n+                               VUNSPEC_WCMP_GTU))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wcmpgtuh%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wcmpgt\")]\n+)\n \n (define_insn \"gtuv2si3\"\n-  [(unspec_volatile [(match_operand:V2SI 0 \"register_operand\" \"=y\")\n-\t\t     (match_operand:V2SI 1 \"register_operand\"  \"y\")\n-\t\t     (match_operand:V2SI 2 \"register_operand\"  \"y\")]\n-\t\t    VUNSPEC_WCMP_GTU)]\n+  [(set (match_operand:V2SI                        0 \"register_operand\" \"=y\")\n+\t(unspec_volatile:V2SI [(match_operand:V2SI 1 \"register_operand\"  \"y\")\n+\t                       (match_operand:V2SI 2 \"register_operand\"  \"y\")]\n+\t                       VUNSPEC_WCMP_GTU))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wcmpgtuw%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wcmpgt\")]\n+)\n \n (define_insn \"gtv8qi3\"\n-  [(unspec_volatile [(match_operand:V8QI 0 \"register_operand\" \"=y\")\n-\t\t     (match_operand:V8QI 1 \"register_operand\"  \"y\")\n-\t\t     (match_operand:V8QI 2 \"register_operand\"  \"y\")]\n-\t\t    VUNSPEC_WCMP_GT)]\n+  [(set (match_operand:V8QI                        0 \"register_operand\" \"=y\")\n+\t(unspec_volatile:V8QI [(match_operand:V8QI 1 \"register_operand\"  \"y\")\n+\t                       (match_operand:V8QI 2 \"register_operand\"  \"y\")]\n+\t                       VUNSPEC_WCMP_GT))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wcmpgtsb%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wcmpgt\")]\n+)\n \n (define_insn \"gtv4hi3\"\n-  [(unspec_volatile [(match_operand:V4HI 0 \"register_operand\" \"=y\")\n-\t\t     (match_operand:V4HI 1 \"register_operand\"  \"y\")\n-\t\t     (match_operand:V4HI 2 \"register_operand\"  \"y\")]\n-\t\t    VUNSPEC_WCMP_GT)]\n+  [(set (match_operand:V4HI                        0 \"register_operand\" \"=y\")\n+\t(unspec_volatile:V4HI [(match_operand:V4HI 1 \"register_operand\"  \"y\")\n+\t                       (match_operand:V4HI 2 \"register_operand\"  \"y\")]\n+\t                       VUNSPEC_WCMP_GT))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wcmpgtsh%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wcmpgt\")]\n+)\n \n (define_insn \"gtv2si3\"\n-  [(unspec_volatile [(match_operand:V2SI 0 \"register_operand\" \"=y\")\n-\t\t     (match_operand:V2SI 1 \"register_operand\"  \"y\")\n-\t\t     (match_operand:V2SI 2 \"register_operand\"  \"y\")]\n-\t\t    VUNSPEC_WCMP_GT)]\n+  [(set (match_operand:V2SI                        0 \"register_operand\" \"=y\")\n+\t(unspec_volatile:V2SI [(match_operand:V2SI 1 \"register_operand\"  \"y\")\n+\t                       (match_operand:V2SI 2 \"register_operand\"  \"y\")]\n+\t                       VUNSPEC_WCMP_GT))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wcmpgtsw%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wcmpgt\")]\n+)\n \n ;; Max/min insns\n \n@@ -652,681 +913,865 @@\n \t\t   (match_operand:VMMX 2 \"register_operand\" \"y\")))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wmaxs<MMX_char>%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmax\")]\n+)\n \n (define_insn \"*umax<mode>3_iwmmxt\"\n   [(set (match_operand:VMMX            0 \"register_operand\" \"=y\")\n         (umax:VMMX (match_operand:VMMX 1 \"register_operand\" \"y\")\n \t\t   (match_operand:VMMX 2 \"register_operand\" \"y\")))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wmaxu<MMX_char>%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmax\")]\n+)\n \n (define_insn \"*smin<mode>3_iwmmxt\"\n   [(set (match_operand:VMMX            0 \"register_operand\" \"=y\")\n         (smin:VMMX (match_operand:VMMX 1 \"register_operand\" \"y\")\n \t\t   (match_operand:VMMX 2 \"register_operand\" \"y\")))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wmins<MMX_char>%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmin\")]\n+)\n \n (define_insn \"*umin<mode>3_iwmmxt\"\n   [(set (match_operand:VMMX            0 \"register_operand\" \"=y\")\n         (umin:VMMX (match_operand:VMMX 1 \"register_operand\" \"y\")\n \t\t   (match_operand:VMMX 2 \"register_operand\" \"y\")))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wminu<MMX_char>%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmin\")]\n+)\n \n ;; Pack/unpack insns.\n \n (define_insn \"iwmmxt_wpackhss\"\n-  [(set (match_operand:V8QI                    0 \"register_operand\" \"=y\")\n+  [(set (match_operand:V8QI                     0 \"register_operand\" \"=y\")\n \t(vec_concat:V8QI\n-\t (ss_truncate:V4QI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n-\t (ss_truncate:V4QI (match_operand:V4HI 2 \"register_operand\" \"y\"))))]\n+\t  (ss_truncate:V4QI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n+\t  (ss_truncate:V4QI (match_operand:V4HI 2 \"register_operand\" \"y\"))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wpackhss%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wpack\")]\n+)\n \n (define_insn \"iwmmxt_wpackwss\"\n-  [(set (match_operand:V4HI                    0 \"register_operand\" \"=y\")\n-\t(vec_concat:V4HI\n-\t (ss_truncate:V2HI (match_operand:V2SI 1 \"register_operand\" \"y\"))\n-\t (ss_truncate:V2HI (match_operand:V2SI 2 \"register_operand\" \"y\"))))]\n+  [(set (match_operand:V4HI                     0 \"register_operand\" \"=y\")\n+        (vec_concat:V4HI\n+\t  (ss_truncate:V2HI (match_operand:V2SI 1 \"register_operand\" \"y\"))\n+\t  (ss_truncate:V2HI (match_operand:V2SI 2 \"register_operand\" \"y\"))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wpackwss%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wpack\")]\n+)\n \n (define_insn \"iwmmxt_wpackdss\"\n-  [(set (match_operand:V2SI                0 \"register_operand\" \"=y\")\n+  [(set (match_operand:V2SI                 0 \"register_operand\" \"=y\")\n \t(vec_concat:V2SI\n-\t (ss_truncate:SI (match_operand:DI 1 \"register_operand\" \"y\"))\n-\t (ss_truncate:SI (match_operand:DI 2 \"register_operand\" \"y\"))))]\n+\t  (ss_truncate:SI (match_operand:DI 1 \"register_operand\" \"y\"))\n+\t  (ss_truncate:SI (match_operand:DI 2 \"register_operand\" \"y\"))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wpackdss%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wpack\")]\n+)\n \n (define_insn \"iwmmxt_wpackhus\"\n-  [(set (match_operand:V8QI                    0 \"register_operand\" \"=y\")\n+  [(set (match_operand:V8QI                     0 \"register_operand\" \"=y\")\n \t(vec_concat:V8QI\n-\t (us_truncate:V4QI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n-\t (us_truncate:V4QI (match_operand:V4HI 2 \"register_operand\" \"y\"))))]\n+\t  (us_truncate:V4QI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n+\t  (us_truncate:V4QI (match_operand:V4HI 2 \"register_operand\" \"y\"))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wpackhus%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wpack\")]\n+)\n \n (define_insn \"iwmmxt_wpackwus\"\n-  [(set (match_operand:V4HI                    0 \"register_operand\" \"=y\")\n+  [(set (match_operand:V4HI                     0 \"register_operand\" \"=y\")\n \t(vec_concat:V4HI\n-\t (us_truncate:V2HI (match_operand:V2SI 1 \"register_operand\" \"y\"))\n-\t (us_truncate:V2HI (match_operand:V2SI 2 \"register_operand\" \"y\"))))]\n+\t  (us_truncate:V2HI (match_operand:V2SI 1 \"register_operand\" \"y\"))\n+\t  (us_truncate:V2HI (match_operand:V2SI 2 \"register_operand\" \"y\"))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wpackwus%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wpack\")]\n+)\n \n (define_insn \"iwmmxt_wpackdus\"\n-  [(set (match_operand:V2SI                0 \"register_operand\" \"=y\")\n+  [(set (match_operand:V2SI                 0 \"register_operand\" \"=y\")\n \t(vec_concat:V2SI\n-\t (us_truncate:SI (match_operand:DI 1 \"register_operand\" \"y\"))\n-\t (us_truncate:SI (match_operand:DI 2 \"register_operand\" \"y\"))))]\n+\t  (us_truncate:SI (match_operand:DI 1 \"register_operand\" \"y\"))\n+\t  (us_truncate:SI (match_operand:DI 2 \"register_operand\" \"y\"))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wpackdus%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n-\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wpack\")]\n+)\n \n (define_insn \"iwmmxt_wunpckihb\"\n-  [(set (match_operand:V8QI                   0 \"register_operand\" \"=y\")\n+  [(set (match_operand:V8QI                                      0 \"register_operand\" \"=y\")\n \t(vec_merge:V8QI\n-\t (vec_select:V8QI (match_operand:V8QI 1 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 4)\n-\t\t\t\t     (const_int 0)\n-\t\t\t\t     (const_int 5)\n-\t\t\t\t     (const_int 1)\n-\t\t\t\t     (const_int 6)\n-\t\t\t\t     (const_int 2)\n-\t\t\t\t     (const_int 7)\n-\t\t\t\t     (const_int 3)]))\n-\t (vec_select:V8QI (match_operand:V8QI 2 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 0)\n-\t\t\t\t     (const_int 4)\n-\t\t\t\t     (const_int 1)\n-\t\t\t\t     (const_int 5)\n-\t\t\t\t     (const_int 2)\n-\t\t\t\t     (const_int 6)\n-\t\t\t\t     (const_int 3)\n-\t\t\t\t     (const_int 7)]))\n-\t (const_int 85)))]\n+\t  (vec_select:V8QI (match_operand:V8QI 1 \"register_operand\" \"y\")\n+\t\t           (parallel [(const_int 4)\n+\t\t\t              (const_int 0)\n+\t\t\t              (const_int 5)\n+\t\t\t              (const_int 1)\n+\t\t\t              (const_int 6)\n+\t\t\t              (const_int 2)\n+\t\t\t              (const_int 7)\n+\t\t\t              (const_int 3)]))\n+          (vec_select:V8QI (match_operand:V8QI 2 \"register_operand\" \"y\")\n+\t\t\t   (parallel [(const_int 0)\n+\t\t\t              (const_int 4)\n+\t\t\t              (const_int 1)\n+\t\t\t              (const_int 5)\n+\t\t\t              (const_int 2)\n+\t\t\t              (const_int 6)\n+\t\t\t              (const_int 3)\n+\t\t\t              (const_int 7)]))\n+          (const_int 85)))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wunpckihb%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wunpckih\")]\n+)\n \n (define_insn \"iwmmxt_wunpckihh\"\n-  [(set (match_operand:V4HI                   0 \"register_operand\" \"=y\")\n+  [(set (match_operand:V4HI                                      0 \"register_operand\" \"=y\")\n \t(vec_merge:V4HI\n-\t (vec_select:V4HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 0)\n-\t\t\t\t     (const_int 2)\n-\t\t\t\t     (const_int 1)\n-\t\t\t\t     (const_int 3)]))\n-\t (vec_select:V4HI (match_operand:V4HI 2 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 2)\n-\t\t\t\t     (const_int 0)\n-\t\t\t\t     (const_int 3)\n-\t\t\t\t     (const_int 1)]))\n-\t (const_int 5)))]\n+\t  (vec_select:V4HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n+\t\t           (parallel [(const_int 2)\n+\t\t\t              (const_int 0)\n+\t\t\t              (const_int 3)\n+\t\t\t              (const_int 1)]))\n+\t  (vec_select:V4HI (match_operand:V4HI 2 \"register_operand\" \"y\")\n+\t\t           (parallel [(const_int 0)\n+\t\t\t              (const_int 2)\n+\t\t\t              (const_int 1)\n+\t\t\t              (const_int 3)]))\n+          (const_int 5)))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wunpckihh%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wunpckih\")]\n+)\n \n (define_insn \"iwmmxt_wunpckihw\"\n-  [(set (match_operand:V2SI                   0 \"register_operand\" \"=y\")\n+  [(set (match_operand:V2SI                    0 \"register_operand\" \"=y\")\n \t(vec_merge:V2SI\n-\t (vec_select:V2SI (match_operand:V2SI 1 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 0)\n-\t\t\t\t     (const_int 1)]))\n-\t (vec_select:V2SI (match_operand:V2SI 2 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 1)\n-\t\t\t\t     (const_int 0)]))\n-\t (const_int 1)))]\n+\t  (vec_select:V2SI (match_operand:V2SI 1 \"register_operand\" \"y\")\n+\t\t           (parallel [(const_int 1)\n+\t\t                      (const_int 0)]))\n+          (vec_select:V2SI (match_operand:V2SI 2 \"register_operand\" \"y\")\n+\t\t           (parallel [(const_int 0)\n+\t\t\t              (const_int 1)]))\n+          (const_int 1)))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wunpckihw%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wunpckih\")]\n+)\n \n (define_insn \"iwmmxt_wunpckilb\"\n-  [(set (match_operand:V8QI                   0 \"register_operand\" \"=y\")\n+  [(set (match_operand:V8QI                                      0 \"register_operand\" \"=y\")\n \t(vec_merge:V8QI\n-\t (vec_select:V8QI (match_operand:V8QI 1 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 0)\n-\t\t\t\t     (const_int 4)\n-\t\t\t\t     (const_int 1)\n-\t\t\t\t     (const_int 5)\n-\t\t\t\t     (const_int 2)\n-\t\t\t\t     (const_int 6)\n-\t\t\t\t     (const_int 3)\n-\t\t\t\t     (const_int 7)]))\n-\t (vec_select:V8QI (match_operand:V8QI 2 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 4)\n-\t\t\t\t     (const_int 0)\n-\t\t\t\t     (const_int 5)\n-\t\t\t\t     (const_int 1)\n-\t\t\t\t     (const_int 6)\n-\t\t\t\t     (const_int 2)\n-\t\t\t\t     (const_int 7)\n-\t\t\t\t     (const_int 3)]))\n-\t (const_int 85)))]\n+\t  (vec_select:V8QI (match_operand:V8QI 1 \"register_operand\" \"y\")\n+\t\t           (parallel [(const_int 0)\n+\t\t\t              (const_int 4)\n+\t\t\t              (const_int 1)\n+\t\t\t              (const_int 5)\n+\t\t                      (const_int 2)\n+\t\t\t\t      (const_int 6)\n+\t\t\t\t      (const_int 3)\n+\t\t\t\t      (const_int 7)]))\n+\t  (vec_select:V8QI (match_operand:V8QI 2 \"register_operand\" \"y\")\n+\t\t           (parallel [(const_int 4)\n+\t\t\t              (const_int 0)\n+\t\t\t              (const_int 5)\n+\t\t\t              (const_int 1)\n+\t\t\t              (const_int 6)\n+\t\t\t              (const_int 2)\n+\t\t\t              (const_int 7)\n+\t\t\t              (const_int 3)]))\n+\t  (const_int 85)))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wunpckilb%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wunpckil\")]\n+)\n \n (define_insn \"iwmmxt_wunpckilh\"\n-  [(set (match_operand:V4HI                   0 \"register_operand\" \"=y\")\n+  [(set (match_operand:V4HI                                      0 \"register_operand\" \"=y\")\n \t(vec_merge:V4HI\n-\t (vec_select:V4HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 2)\n-\t\t\t\t     (const_int 0)\n-\t\t\t\t     (const_int 3)\n-\t\t\t\t     (const_int 1)]))\n-\t (vec_select:V4HI (match_operand:V4HI 2 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 0)\n-\t\t\t\t     (const_int 2)\n-\t\t\t\t     (const_int 1)\n-\t\t\t\t     (const_int 3)]))\n-\t (const_int 5)))]\n+\t  (vec_select:V4HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n+\t\t           (parallel [(const_int 0)\n+\t\t\t              (const_int 2)\n+\t\t\t              (const_int 1)\n+\t\t\t              (const_int 3)]))\n+\t  (vec_select:V4HI (match_operand:V4HI 2 \"register_operand\" \"y\")\n+\t\t\t   (parallel [(const_int 2)\n+\t\t\t              (const_int 0)\n+\t\t\t              (const_int 3)\n+\t\t\t              (const_int 1)]))\n+\t  (const_int 5)))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wunpckilh%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wunpckil\")]\n+)\n \n (define_insn \"iwmmxt_wunpckilw\"\n-  [(set (match_operand:V2SI                   0 \"register_operand\" \"=y\")\n+  [(set (match_operand:V2SI                    0 \"register_operand\" \"=y\")\n \t(vec_merge:V2SI\n-\t (vec_select:V2SI (match_operand:V2SI 1 \"register_operand\" \"y\")\n-\t\t\t   (parallel [(const_int 1)\n-\t\t\t\t      (const_int 0)]))\n-\t (vec_select:V2SI (match_operand:V2SI 2 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 0)\n-\t\t\t\t     (const_int 1)]))\n-\t (const_int 1)))]\n+\t  (vec_select:V2SI (match_operand:V2SI 1 \"register_operand\" \"y\")\n+\t\t           (parallel [(const_int 0)\n+\t\t\t\t      (const_int 1)]))\n+\t  (vec_select:V2SI (match_operand:V2SI 2 \"register_operand\" \"y\")\n+\t\t           (parallel [(const_int 1)\n+\t\t\t              (const_int 0)]))\n+\t  (const_int 1)))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wunpckilw%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wunpckil\")]\n+)\n \n (define_insn \"iwmmxt_wunpckehub\"\n-  [(set (match_operand:V4HI                   0 \"register_operand\" \"=y\")\n-\t(zero_extend:V4HI\n-\t (vec_select:V4QI (match_operand:V8QI 1 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 4) (const_int 5)\n-\t\t\t\t     (const_int 6) (const_int 7)]))))]\n+  [(set (match_operand:V4HI                     0 \"register_operand\" \"=y\")\n+\t(vec_select:V4HI\n+\t  (zero_extend:V8HI (match_operand:V8QI 1 \"register_operand\" \"y\"))\n+\t  (parallel [(const_int 4) (const_int 5)\n+\t             (const_int 6) (const_int 7)])))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wunpckehub%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wunpckeh\")]\n+)\n \n (define_insn \"iwmmxt_wunpckehuh\"\n-  [(set (match_operand:V2SI                   0 \"register_operand\" \"=y\")\n-\t(zero_extend:V2SI\n-\t (vec_select:V2HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 2) (const_int 3)]))))]\n+  [(set (match_operand:V2SI                     0 \"register_operand\" \"=y\")\n+\t(vec_select:V2SI\n+\t  (zero_extend:V4SI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n+\t  (parallel [(const_int 2) (const_int 3)])))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wunpckehuh%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wunpckeh\")]\n+)\n \n (define_insn \"iwmmxt_wunpckehuw\"\n-  [(set (match_operand:DI                   0 \"register_operand\" \"=y\")\n-\t(zero_extend:DI\n-\t (vec_select:SI (match_operand:V2SI 1 \"register_operand\" \"y\")\n-\t\t\t(parallel [(const_int 1)]))))]\n+  [(set (match_operand:DI                       0 \"register_operand\" \"=y\")\n+\t(vec_select:DI\n+\t  (zero_extend:V2DI (match_operand:V2SI 1 \"register_operand\" \"y\"))\n+\t  (parallel [(const_int 1)])))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wunpckehuw%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wunpckeh\")]\n+)\n \n (define_insn \"iwmmxt_wunpckehsb\"\n-  [(set (match_operand:V4HI                   0 \"register_operand\" \"=y\")\n-\t(sign_extend:V4HI\n-\t (vec_select:V4QI (match_operand:V8QI 1 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 4) (const_int 5)\n-\t\t\t\t     (const_int 6) (const_int 7)]))))]\n+  [(set (match_operand:V4HI                     0 \"register_operand\" \"=y\")\n+        (vec_select:V4HI\n+\t  (sign_extend:V8HI (match_operand:V8QI 1 \"register_operand\" \"y\"))\n+\t  (parallel [(const_int 4) (const_int 5)\n+\t             (const_int 6) (const_int 7)])))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wunpckehsb%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wunpckeh\")]\n+)\n \n (define_insn \"iwmmxt_wunpckehsh\"\n-  [(set (match_operand:V2SI                   0 \"register_operand\" \"=y\")\n-\t(sign_extend:V2SI\n-\t (vec_select:V2HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 2) (const_int 3)]))))]\n+  [(set (match_operand:V2SI                     0 \"register_operand\" \"=y\")\n+\t(vec_select:V2SI\n+\t  (sign_extend:V4SI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n+\t  (parallel [(const_int 2) (const_int 3)])))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wunpckehsh%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wunpckeh\")]\n+)\n \n (define_insn \"iwmmxt_wunpckehsw\"\n-  [(set (match_operand:DI                   0 \"register_operand\" \"=y\")\n-\t(sign_extend:DI\n-\t (vec_select:SI (match_operand:V2SI 1 \"register_operand\" \"y\")\n-\t\t\t(parallel [(const_int 1)]))))]\n+  [(set (match_operand:DI                       0 \"register_operand\" \"=y\")\n+\t(vec_select:DI\n+\t  (sign_extend:V2DI (match_operand:V2SI 1 \"register_operand\" \"y\"))\n+\t  (parallel [(const_int 1)])))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wunpckehsw%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wunpckeh\")]\n+)\n \n (define_insn \"iwmmxt_wunpckelub\"\n-  [(set (match_operand:V4HI                   0 \"register_operand\" \"=y\")\n-\t(zero_extend:V4HI\n-\t (vec_select:V4QI (match_operand:V8QI 1 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 0) (const_int 1)\n-\t\t\t\t     (const_int 2) (const_int 3)]))))]\n+  [(set (match_operand:V4HI                     0 \"register_operand\" \"=y\")\n+\t(vec_select:V4HI\n+\t  (zero_extend:V8HI (match_operand:V8QI 1 \"register_operand\" \"y\"))\n+\t  (parallel [(const_int 0) (const_int 1)\n+\t\t     (const_int 2) (const_int 3)])))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wunpckelub%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wunpckel\")]\n+)\n \n (define_insn \"iwmmxt_wunpckeluh\"\n-  [(set (match_operand:V2SI                   0 \"register_operand\" \"=y\")\n-\t(zero_extend:V2SI\n-\t (vec_select:V2HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 0) (const_int 1)]))))]\n+  [(set (match_operand:V2SI                     0 \"register_operand\" \"=y\")\n+\t(vec_select:V2SI\n+\t  (zero_extend:V4SI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n+\t  (parallel [(const_int 0) (const_int 1)])))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wunpckeluh%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wunpckel\")]\n+)\n \n (define_insn \"iwmmxt_wunpckeluw\"\n-  [(set (match_operand:DI                   0 \"register_operand\" \"=y\")\n-\t(zero_extend:DI\n-\t (vec_select:SI (match_operand:V2SI 1 \"register_operand\" \"y\")\n-\t\t\t(parallel [(const_int 0)]))))]\n+  [(set (match_operand:DI                       0 \"register_operand\" \"=y\")\n+\t(vec_select:DI\n+\t  (zero_extend:V2DI (match_operand:V2SI 1 \"register_operand\" \"y\"))\n+\t  (parallel [(const_int 0)])))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wunpckeluw%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wunpckel\")]\n+)\n \n (define_insn \"iwmmxt_wunpckelsb\"\n-  [(set (match_operand:V4HI                   0 \"register_operand\" \"=y\")\n-\t(sign_extend:V4HI\n-\t (vec_select:V4QI (match_operand:V8QI 1 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 0) (const_int 1)\n-\t\t\t\t     (const_int 2) (const_int 3)]))))]\n+  [(set (match_operand:V4HI                     0 \"register_operand\" \"=y\")\n+\t(vec_select:V4HI\n+\t  (sign_extend:V8HI (match_operand:V8QI 1 \"register_operand\" \"y\"))\n+\t  (parallel [(const_int 0) (const_int 1)\n+\t\t     (const_int 2) (const_int 3)])))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wunpckelsb%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wunpckel\")]\n+)\n \n (define_insn \"iwmmxt_wunpckelsh\"\n-  [(set (match_operand:V2SI                   0 \"register_operand\" \"=y\")\n-\t(sign_extend:V2SI\n-\t (vec_select:V2HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 0) (const_int 1)]))))]\n+  [(set (match_operand:V2SI                     0 \"register_operand\" \"=y\")\n+\t(vec_select:V2SI\n+\t  (sign_extend:V4SI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n+\t  (parallel [(const_int 0) (const_int 1)])))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wunpckelsh%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wunpckel\")]\n+)\n \n (define_insn \"iwmmxt_wunpckelsw\"\n-  [(set (match_operand:DI                   0 \"register_operand\" \"=y\")\n-\t(sign_extend:DI\n-\t (vec_select:SI (match_operand:V2SI 1 \"register_operand\" \"y\")\n-\t\t\t(parallel [(const_int 0)]))))]\n+  [(set (match_operand:DI                       0 \"register_operand\" \"=y\")\n+        (vec_select:DI\n+\t  (sign_extend:V2DI (match_operand:V2SI 1 \"register_operand\" \"y\"))\n+\t  (parallel [(const_int 0)])))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wunpckelsw%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wunpckel\")]\n+)\n \n ;; Shifts\n \n-(define_insn \"rorv4hi3\"\n-  [(set (match_operand:V4HI                0 \"register_operand\" \"=y\")\n-        (rotatert:V4HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n-\t\t       (match_operand:SI   2 \"register_operand\" \"z\")))]\n-  \"TARGET_REALLY_IWMMXT\"\n-  \"wrorhg%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n-\n-(define_insn \"rorv2si3\"\n-  [(set (match_operand:V2SI                0 \"register_operand\" \"=y\")\n-        (rotatert:V2SI (match_operand:V2SI 1 \"register_operand\" \"y\")\n-\t\t       (match_operand:SI   2 \"register_operand\" \"z\")))]\n-  \"TARGET_REALLY_IWMMXT\"\n-  \"wrorwg%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n-\n-(define_insn \"rordi3\"\n-  [(set (match_operand:DI              0 \"register_operand\" \"=y\")\n-\t(rotatert:DI (match_operand:DI 1 \"register_operand\" \"y\")\n-\t\t   (match_operand:SI   2 \"register_operand\" \"z\")))]\n+(define_insn \"ror<mode>3\"\n+  [(set (match_operand:VSHFT                 0 \"register_operand\" \"=y,y\")\n+        (rotatert:VSHFT (match_operand:VSHFT 1 \"register_operand\" \"y,y\")\n+\t\t        (match_operand:SI    2 \"imm_or_reg_operand\" \"z,i\")))]\n   \"TARGET_REALLY_IWMMXT\"\n-  \"wrordg%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  \"*\n+  switch  (which_alternative)\n+    {\n+    case 0:\n+      return \\\"wror<MMX_char>g%?\\\\t%0, %1, %2\\\";\n+    case 1:\n+      return arm_output_iwmmxt_shift_immediate (\\\"wror<MMX_char>\\\", operands, true);\n+    default:\n+      gcc_unreachable ();\n+    }\n+  \"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"arch\" \"*, iwmmxt2\")\n+   (set_attr \"wtype\" \"wror, wror\")]\n+)\n \n (define_insn \"ashr<mode>3_iwmmxt\"\n-  [(set (match_operand:VSHFT                 0 \"register_operand\" \"=y\")\n-        (ashiftrt:VSHFT (match_operand:VSHFT 1 \"register_operand\" \"y\")\n-\t\t\t(match_operand:SI    2 \"register_operand\" \"z\")))]\n+  [(set (match_operand:VSHFT                 0 \"register_operand\" \"=y,y\")\n+        (ashiftrt:VSHFT (match_operand:VSHFT 1 \"register_operand\" \"y,y\")\n+\t\t\t(match_operand:SI    2 \"imm_or_reg_operand\" \"z,i\")))]\n   \"TARGET_REALLY_IWMMXT\"\n-  \"wsra<MMX_char>g%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  \"*\n+  switch  (which_alternative)\n+    {\n+    case 0:\n+      return \\\"wsra<MMX_char>g%?\\\\t%0, %1, %2\\\";\n+    case 1:\n+      return arm_output_iwmmxt_shift_immediate (\\\"wsra<MMX_char>\\\", operands, true);\n+    default:\n+      gcc_unreachable ();\n+    }\n+  \"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"arch\" \"*, iwmmxt2\")\n+   (set_attr \"wtype\" \"wsra, wsra\")]\n+)\n \n (define_insn \"lshr<mode>3_iwmmxt\"\n-  [(set (match_operand:VSHFT                 0 \"register_operand\" \"=y\")\n-        (lshiftrt:VSHFT (match_operand:VSHFT 1 \"register_operand\" \"y\")\n-\t\t\t(match_operand:SI    2 \"register_operand\" \"z\")))]\n+  [(set (match_operand:VSHFT                 0 \"register_operand\" \"=y,y\")\n+        (lshiftrt:VSHFT (match_operand:VSHFT 1 \"register_operand\" \"y,y\")\n+\t\t\t(match_operand:SI    2 \"imm_or_reg_operand\" \"z,i\")))]\n   \"TARGET_REALLY_IWMMXT\"\n-  \"wsrl<MMX_char>g%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  \"*\n+  switch  (which_alternative)\n+    {\n+    case 0:\n+      return \\\"wsrl<MMX_char>g%?\\\\t%0, %1, %2\\\";\n+    case 1:\n+      return arm_output_iwmmxt_shift_immediate (\\\"wsrl<MMX_char>\\\", operands, false);\n+    default:\n+      gcc_unreachable ();\n+    }\n+  \"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"arch\" \"*, iwmmxt2\")\n+   (set_attr \"wtype\" \"wsrl, wsrl\")]\n+)\n \n (define_insn \"ashl<mode>3_iwmmxt\"\n-  [(set (match_operand:VSHFT               0 \"register_operand\" \"=y\")\n-        (ashift:VSHFT (match_operand:VSHFT 1 \"register_operand\" \"y\")\n-\t\t      (match_operand:SI    2 \"register_operand\" \"z\")))]\n-  \"TARGET_REALLY_IWMMXT\"\n-  \"wsll<MMX_char>g%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n-\n-(define_insn \"rorv4hi3_di\"\n-  [(set (match_operand:V4HI                0 \"register_operand\" \"=y\")\n-        (rotatert:V4HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n-\t\t       (match_operand:DI   2 \"register_operand\" \"y\")))]\n-  \"TARGET_REALLY_IWMMXT\"\n-  \"wrorh%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n-\n-(define_insn \"rorv2si3_di\"\n-  [(set (match_operand:V2SI                0 \"register_operand\" \"=y\")\n-        (rotatert:V2SI (match_operand:V2SI 1 \"register_operand\" \"y\")\n-\t\t       (match_operand:DI   2 \"register_operand\" \"y\")))]\n+  [(set (match_operand:VSHFT               0 \"register_operand\" \"=y,y\")\n+        (ashift:VSHFT (match_operand:VSHFT 1 \"register_operand\" \"y,y\")\n+\t\t      (match_operand:SI    2 \"imm_or_reg_operand\" \"z,i\")))]\n   \"TARGET_REALLY_IWMMXT\"\n-  \"wrorw%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n-\n-(define_insn \"rordi3_di\"\n-  [(set (match_operand:DI              0 \"register_operand\" \"=y\")\n-\t(rotatert:DI (match_operand:DI 1 \"register_operand\" \"y\")\n-\t\t   (match_operand:DI   2 \"register_operand\" \"y\")))]\n-  \"TARGET_REALLY_IWMMXT\"\n-  \"wrord%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n-\n-(define_insn \"ashrv4hi3_di\"\n-  [(set (match_operand:V4HI                0 \"register_operand\" \"=y\")\n-        (ashiftrt:V4HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n-\t\t       (match_operand:DI   2 \"register_operand\" \"y\")))]\n-  \"TARGET_REALLY_IWMMXT\"\n-  \"wsrah%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n-\n-(define_insn \"ashrv2si3_di\"\n-  [(set (match_operand:V2SI                0 \"register_operand\" \"=y\")\n-        (ashiftrt:V2SI (match_operand:V2SI 1 \"register_operand\" \"y\")\n-\t\t       (match_operand:DI   2 \"register_operand\" \"y\")))]\n-  \"TARGET_REALLY_IWMMXT\"\n-  \"wsraw%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n-\n-(define_insn \"ashrdi3_di\"\n-  [(set (match_operand:DI              0 \"register_operand\" \"=y\")\n-\t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"y\")\n-\t\t   (match_operand:DI   2 \"register_operand\" \"y\")))]\n-  \"TARGET_REALLY_IWMMXT\"\n-  \"wsrad%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n-\n-(define_insn \"lshrv4hi3_di\"\n-  [(set (match_operand:V4HI                0 \"register_operand\" \"=y\")\n-        (lshiftrt:V4HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n-\t\t       (match_operand:DI   2 \"register_operand\" \"y\")))]\n-  \"TARGET_REALLY_IWMMXT\"\n-  \"wsrlh%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n-\n-(define_insn \"lshrv2si3_di\"\n-  [(set (match_operand:V2SI                0 \"register_operand\" \"=y\")\n-        (lshiftrt:V2SI (match_operand:V2SI 1 \"register_operand\" \"y\")\n-\t\t       (match_operand:DI   2 \"register_operand\" \"y\")))]\n-  \"TARGET_REALLY_IWMMXT\"\n-  \"wsrlw%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  \"*\n+  switch  (which_alternative)\n+    {\n+    case 0:\n+      return \\\"wsll<MMX_char>g%?\\\\t%0, %1, %2\\\";\n+    case 1:\n+      return arm_output_iwmmxt_shift_immediate (\\\"wsll<MMX_char>\\\", operands, false);\n+    default:\n+      gcc_unreachable ();\n+    }\n+  \"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"arch\" \"*, iwmmxt2\")\n+   (set_attr \"wtype\" \"wsll, wsll\")]\n+)\n \n-(define_insn \"lshrdi3_di\"\n-  [(set (match_operand:DI              0 \"register_operand\" \"=y\")\n-\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"y\")\n-\t\t     (match_operand:DI 2 \"register_operand\" \"y\")))]\n+(define_insn \"ror<mode>3_di\"\n+  [(set (match_operand:VSHFT                 0 \"register_operand\" \"=y,y\")\n+        (rotatert:VSHFT (match_operand:VSHFT 1 \"register_operand\" \"y,y\")\n+\t\t        (match_operand:DI    2 \"imm_or_reg_operand\" \"y,i\")))]\n   \"TARGET_REALLY_IWMMXT\"\n-  \"wsrld%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  \"*\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return \\\"wror<MMX_char>%?\\\\t%0, %1, %2\\\";\n+    case 1:\n+      return arm_output_iwmmxt_shift_immediate (\\\"wror<MMX_char>\\\", operands, true);\n+    default:\n+      gcc_unreachable ();\n+    }\n+  \"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"arch\" \"*, iwmmxt2\")\n+   (set_attr \"wtype\" \"wror, wror\")]\n+)\n \n-(define_insn \"ashlv4hi3_di\"\n-  [(set (match_operand:V4HI              0 \"register_operand\" \"=y\")\n-        (ashift:V4HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n-\t\t     (match_operand:DI   2 \"register_operand\" \"y\")))]\n+(define_insn \"ashr<mode>3_di\"\n+  [(set (match_operand:VSHFT                 0 \"register_operand\" \"=y,y\")\n+        (ashiftrt:VSHFT (match_operand:VSHFT 1 \"register_operand\" \"y,y\")\n+\t\t        (match_operand:DI    2 \"imm_or_reg_operand\" \"y,i\")))]\n   \"TARGET_REALLY_IWMMXT\"\n-  \"wsllh%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  \"*\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return \\\"wsra<MMX_char>%?\\\\t%0, %1, %2\\\";\n+    case 1:\n+      return arm_output_iwmmxt_shift_immediate (\\\"wsra<MMX_char>\\\", operands, true);\n+    default:\n+      gcc_unreachable ();\n+    }\n+  \"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"arch\" \"*, iwmmxt2\")\n+   (set_attr \"wtype\" \"wsra, wsra\")]\n+)\n \n-(define_insn \"ashlv2si3_di\"\n-  [(set (match_operand:V2SI              0 \"register_operand\" \"=y\")\n-        (ashift:V2SI (match_operand:V2SI 1 \"register_operand\" \"y\")\n-\t\t       (match_operand:DI 2 \"register_operand\" \"y\")))]\n+(define_insn \"lshr<mode>3_di\"\n+  [(set (match_operand:VSHFT                 0 \"register_operand\" \"=y,y\")\n+        (lshiftrt:VSHFT (match_operand:VSHFT 1 \"register_operand\" \"y,y\")\n+\t\t        (match_operand:DI    2 \"register_operand\" \"y,i\")))]\n   \"TARGET_REALLY_IWMMXT\"\n-  \"wsllw%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  \"*\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return \\\"wsrl<MMX_char>%?\\\\t%0, %1, %2\\\";\n+    case 1:\n+      return arm_output_iwmmxt_shift_immediate (\\\"wsrl<MMX_char>\\\", operands, false);\n+    default:\n+      gcc_unreachable ();\n+    }\n+  \"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"arch\" \"*, iwmmxt2\")\n+   (set_attr \"wtype\" \"wsrl, wsrl\")]\n+)\n \n-(define_insn \"ashldi3_di\"\n-  [(set (match_operand:DI            0 \"register_operand\" \"=y\")\n-\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"y\")\n-\t\t   (match_operand:DI 2 \"register_operand\" \"y\")))]\n+(define_insn \"ashl<mode>3_di\"\n+  [(set (match_operand:VSHFT               0 \"register_operand\" \"=y,y\")\n+        (ashift:VSHFT (match_operand:VSHFT 1 \"register_operand\" \"y,y\")\n+\t\t      (match_operand:DI    2 \"imm_or_reg_operand\" \"y,i\")))]\n   \"TARGET_REALLY_IWMMXT\"\n-  \"wslld%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  \"*\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return \\\"wsll<MMX_char>%?\\\\t%0, %1, %2\\\";\n+    case 1:\n+      return arm_output_iwmmxt_shift_immediate (\\\"wsll<MMX_char>\\\", operands, false);\n+    default:\n+      gcc_unreachable ();\n+    }\n+  \"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"arch\" \"*, iwmmxt2\")\n+   (set_attr \"wtype\" \"wsll, wsll\")]\n+)\n \n (define_insn \"iwmmxt_wmadds\"\n-  [(set (match_operand:V4HI               0 \"register_operand\" \"=y\")\n-        (unspec:V4HI [(match_operand:V4HI 1 \"register_operand\" \"y\")\n-\t\t      (match_operand:V4HI 2 \"register_operand\" \"y\")] UNSPEC_WMADDS))]\n+  [(set (match_operand:V2SI                                        0 \"register_operand\" \"=y\")\n+\t(plus:V2SI\n+\t  (mult:V2SI\n+\t    (vec_select:V2SI (sign_extend:V4SI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n+\t                     (parallel [(const_int 1) (const_int 3)]))\n+\t    (vec_select:V2SI (sign_extend:V4SI (match_operand:V4HI 2 \"register_operand\" \"y\"))\n+\t                     (parallel [(const_int 1) (const_int 3)])))\n+\t  (mult:V2SI\n+\t    (vec_select:V2SI (sign_extend:V4SI (match_dup 1))\n+\t                     (parallel [(const_int 0) (const_int 2)]))\n+\t    (vec_select:V2SI (sign_extend:V4SI (match_dup 2))\n+\t                     (parallel [(const_int 0) (const_int 2)])))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wmadds%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmadd\")]\n+)\n \n (define_insn \"iwmmxt_wmaddu\"\n-  [(set (match_operand:V4HI               0 \"register_operand\" \"=y\")\n-        (unspec:V4HI [(match_operand:V4HI 1 \"register_operand\" \"y\")\n-\t\t      (match_operand:V4HI 2 \"register_operand\" \"y\")] UNSPEC_WMADDU))]\n+  [(set (match_operand:V2SI               0 \"register_operand\" \"=y\")\n+\t(plus:V2SI\n+\t  (mult:V2SI\n+\t    (vec_select:V2SI (zero_extend:V4SI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n+\t                     (parallel [(const_int 1) (const_int 3)]))\n+\t    (vec_select:V2SI (zero_extend:V4SI (match_operand:V4HI 2 \"register_operand\" \"y\"))\n+\t                     (parallel [(const_int 1) (const_int 3)])))\n+\t  (mult:V2SI\n+\t    (vec_select:V2SI (zero_extend:V4SI (match_dup 1))\n+\t                     (parallel [(const_int 0) (const_int 2)]))\n+\t    (vec_select:V2SI (zero_extend:V4SI (match_dup 2))\n+\t                     (parallel [(const_int 0) (const_int 2)])))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wmaddu%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmadd\")]\n+)\n \n (define_insn \"iwmmxt_tmia\"\n-  [(set (match_operand:DI                    0 \"register_operand\" \"=y\")\n-\t(plus:DI (match_operand:DI           1 \"register_operand\" \"0\")\n+  [(set (match_operand:DI                     0 \"register_operand\" \"=y\")\n+\t(plus:DI (match_operand:DI            1 \"register_operand\" \"0\")\n \t\t (mult:DI (sign_extend:DI\n-\t\t\t   (match_operand:SI 2 \"register_operand\" \"r\"))\n+\t\t\t    (match_operand:SI 2 \"register_operand\" \"r\"))\n \t\t\t  (sign_extend:DI\n-\t\t\t   (match_operand:SI 3 \"register_operand\" \"r\")))))]\n+\t\t\t    (match_operand:SI 3 \"register_operand\" \"r\")))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"tmia%?\\\\t%0, %2, %3\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"tmia\")]\n+)\n \n (define_insn \"iwmmxt_tmiaph\"\n-  [(set (match_operand:DI          0 \"register_operand\" \"=y\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+  [(set (match_operand:DI                                    0 \"register_operand\" \"=y\")\n+\t(plus:DI (match_operand:DI                           1 \"register_operand\" \"0\")\n \t\t (plus:DI\n-\t\t  (mult:DI (sign_extend:DI\n-\t\t\t    (truncate:HI (match_operand:SI 2 \"register_operand\" \"r\")))\n-\t\t\t   (sign_extend:DI\n-\t\t\t    (truncate:HI (match_operand:SI 3 \"register_operand\" \"r\"))))\n-\t\t  (mult:DI (sign_extend:DI\n-\t\t\t    (truncate:HI (ashiftrt:SI (match_dup 2) (const_int 16))))\n-\t\t\t   (sign_extend:DI\n-\t\t\t    (truncate:HI (ashiftrt:SI (match_dup 3) (const_int 16))))))))]\n+\t\t   (mult:DI (sign_extend:DI\n+\t\t\t      (truncate:HI (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t\t\t    (sign_extend:DI\n+\t\t\t      (truncate:HI (match_operand:SI 3 \"register_operand\" \"r\"))))\n+\t\t   (mult:DI (sign_extend:DI\n+\t\t\t      (truncate:HI (ashiftrt:SI (match_dup 2) (const_int 16))))\n+\t\t\t    (sign_extend:DI\n+\t\t\t      (truncate:HI (ashiftrt:SI (match_dup 3) (const_int 16))))))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"tmiaph%?\\\\t%0, %2, %3\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"tmiaph\")]\n+)\n \n (define_insn \"iwmmxt_tmiabb\"\n-  [(set (match_operand:DI          0 \"register_operand\" \"=y\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+  [(set (match_operand:DI                                  0 \"register_operand\" \"=y\")\n+\t(plus:DI (match_operand:DI                         1 \"register_operand\" \"0\")\n \t\t (mult:DI (sign_extend:DI\n-\t\t\t   (truncate:HI (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t\t\t    (truncate:HI (match_operand:SI 2 \"register_operand\" \"r\")))\n \t\t\t  (sign_extend:DI\n-\t\t\t   (truncate:HI (match_operand:SI 3 \"register_operand\" \"r\"))))))]\n+\t\t\t    (truncate:HI (match_operand:SI 3 \"register_operand\" \"r\"))))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"tmiabb%?\\\\t%0, %2, %3\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"tmiaxy\")]\n+)\n \n (define_insn \"iwmmxt_tmiatb\"\n-  [(set (match_operand:DI          0 \"register_operand\" \"=y\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+  [(set (match_operand:DI                         0 \"register_operand\" \"=y\")\n+\t(plus:DI (match_operand:DI                1 \"register_operand\" \"0\")\n \t\t (mult:DI (sign_extend:DI\n-\t\t\t   (truncate:HI (ashiftrt:SI\n-\t\t\t\t\t (match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t (const_int 16))))\n+\t\t\t    (truncate:HI\n+\t\t\t      (ashiftrt:SI\n+\t\t\t\t(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t(const_int 16))))\n \t\t\t  (sign_extend:DI\n-\t\t\t   (truncate:HI (match_operand:SI 3 \"register_operand\" \"r\"))))))]\n+\t\t\t    (truncate:HI\n+\t\t\t      (match_operand:SI   3 \"register_operand\" \"r\"))))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"tmiatb%?\\\\t%0, %2, %3\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"tmiaxy\")]\n+)\n \n (define_insn \"iwmmxt_tmiabt\"\n-  [(set (match_operand:DI          0 \"register_operand\" \"=y\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+  [(set (match_operand:DI                         0 \"register_operand\" \"=y\")\n+\t(plus:DI (match_operand:DI                1 \"register_operand\" \"0\")\n \t\t (mult:DI (sign_extend:DI\n-\t\t\t   (truncate:HI (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t\t\t    (truncate:HI\n+\t\t\t      (match_operand:SI   2 \"register_operand\" \"r\")))\n \t\t\t  (sign_extend:DI\n-\t\t\t   (truncate:HI (ashiftrt:SI\n-\t\t\t\t\t (match_operand:SI 3 \"register_operand\" \"r\")\n-\t\t\t\t\t (const_int 16)))))))]\n+\t\t\t    (truncate:HI\n+\t\t\t      (ashiftrt:SI\n+\t\t\t\t(match_operand:SI 3 \"register_operand\" \"r\")\n+\t\t\t\t(const_int 16)))))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"tmiabt%?\\\\t%0, %2, %3\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"tmiaxy\")]\n+)\n \n (define_insn \"iwmmxt_tmiatt\"\n   [(set (match_operand:DI          0 \"register_operand\" \"=y\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"0\")\n \t\t (mult:DI (sign_extend:DI\n-\t\t\t   (truncate:HI (ashiftrt:SI\n-\t\t\t\t\t (match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t (const_int 16))))\n+\t\t\t    (truncate:HI\n+\t\t\t      (ashiftrt:SI\n+\t\t\t\t(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t(const_int 16))))\n \t\t\t  (sign_extend:DI\n-\t\t\t   (truncate:HI (ashiftrt:SI\n-\t\t\t\t\t (match_operand:SI 3 \"register_operand\" \"r\")\n-\t\t\t\t\t (const_int 16)))))))]\n+\t\t\t    (truncate:HI\n+\t\t\t      (ashiftrt:SI\n+\t\t\t\t(match_operand:SI 3 \"register_operand\" \"r\")\n+\t\t\t\t(const_int 16)))))))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"tmiatt%?\\\\t%0, %2, %3\"\n-  [(set_attr \"predicable\" \"yes\")])\n-\n-(define_insn \"iwmmxt_tbcstqi\"\n-  [(set (match_operand:V8QI                   0 \"register_operand\" \"=y\")\n-\t(vec_duplicate:V8QI (match_operand:QI 1 \"register_operand\" \"r\")))]\n-  \"TARGET_REALLY_IWMMXT\"\n-  \"tbcstb%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n-\n-(define_insn \"iwmmxt_tbcsthi\"\n-  [(set (match_operand:V4HI                   0 \"register_operand\" \"=y\")\n-\t(vec_duplicate:V4HI (match_operand:HI 1 \"register_operand\" \"r\")))]\n-  \"TARGET_REALLY_IWMMXT\"\n-  \"tbcsth%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n-\n-(define_insn \"iwmmxt_tbcstsi\"\n-  [(set (match_operand:V2SI                   0 \"register_operand\" \"=y\")\n-\t(vec_duplicate:V2SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n-  \"TARGET_REALLY_IWMMXT\"\n-  \"tbcstw%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"tmiaxy\")]\n+)\n \n (define_insn \"iwmmxt_tmovmskb\"\n   [(set (match_operand:SI               0 \"register_operand\" \"=r\")\n \t(unspec:SI [(match_operand:V8QI 1 \"register_operand\" \"y\")] UNSPEC_TMOVMSK))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"tmovmskb%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"tmovmsk\")]\n+)\n \n (define_insn \"iwmmxt_tmovmskh\"\n   [(set (match_operand:SI               0 \"register_operand\" \"=r\")\n \t(unspec:SI [(match_operand:V4HI 1 \"register_operand\" \"y\")] UNSPEC_TMOVMSK))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"tmovmskh%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"tmovmsk\")]\n+)\n \n (define_insn \"iwmmxt_tmovmskw\"\n   [(set (match_operand:SI               0 \"register_operand\" \"=r\")\n \t(unspec:SI [(match_operand:V2SI 1 \"register_operand\" \"y\")] UNSPEC_TMOVMSK))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"tmovmskw%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"tmovmsk\")]\n+)\n \n (define_insn \"iwmmxt_waccb\"\n   [(set (match_operand:DI               0 \"register_operand\" \"=y\")\n \t(unspec:DI [(match_operand:V8QI 1 \"register_operand\" \"y\")] UNSPEC_WACC))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"waccb%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wacc\")]\n+)\n \n (define_insn \"iwmmxt_wacch\"\n   [(set (match_operand:DI               0 \"register_operand\" \"=y\")\n \t(unspec:DI [(match_operand:V4HI 1 \"register_operand\" \"y\")] UNSPEC_WACC))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wacch%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wacc\")]\n+)\n \n (define_insn \"iwmmxt_waccw\"\n   [(set (match_operand:DI               0 \"register_operand\" \"=y\")\n \t(unspec:DI [(match_operand:V2SI 1 \"register_operand\" \"y\")] UNSPEC_WACC))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"waccw%?\\\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wacc\")]\n+)\n \n-(define_insn \"iwmmxt_walign\"\n-  [(set (match_operand:V8QI                           0 \"register_operand\" \"=y,y\")\n+;; use unspec here to prevent 8 * imm to be optimized by cse\n+(define_insn \"iwmmxt_waligni\"\n+  [(set (match_operand:V8QI                                0 \"register_operand\" \"=y\")\n+\t(unspec:V8QI [(subreg:V8QI\n+\t\t        (ashiftrt:TI\n+\t\t          (subreg:TI (vec_concat:V16QI\n+\t\t\t\t       (match_operand:V8QI 1 \"register_operand\" \"y\")\n+\t\t\t\t       (match_operand:V8QI 2 \"register_operand\" \"y\")) 0)\n+\t\t          (mult:SI\n+\t\t            (match_operand:SI              3 \"immediate_operand\" \"i\")\n+\t\t            (const_int 8))) 0)] UNSPEC_WALIGNI))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"waligni%?\\\\t%0, %1, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"waligni\")]\n+)\n+\n+(define_insn \"iwmmxt_walignr\"\n+  [(set (match_operand:V8QI                           0 \"register_operand\" \"=y\")\n \t(subreg:V8QI (ashiftrt:TI\n-\t\t      (subreg:TI (vec_concat:V16QI\n-\t\t\t\t  (match_operand:V8QI 1 \"register_operand\" \"y,y\")\n-\t\t\t\t  (match_operand:V8QI 2 \"register_operand\" \"y,y\")) 0)\n-\t\t      (mult:SI\n-\t\t       (match_operand:SI              3 \"nonmemory_operand\" \"i,z\")\n-\t\t       (const_int 8))) 0))]\n-  \"TARGET_REALLY_IWMMXT\"\n-  \"@\n-   waligni%?\\\\t%0, %1, %2, %3\n-   walignr%U3%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+\t\t       (subreg:TI (vec_concat:V16QI\n+\t\t\t\t    (match_operand:V8QI 1 \"register_operand\" \"y\")\n+\t\t\t\t    (match_operand:V8QI 2 \"register_operand\" \"y\")) 0)\n+\t\t       (mult:SI\n+\t\t         (zero_extract:SI (match_operand:SI 3 \"register_operand\" \"z\") (const_int 3) (const_int 0))\n+\t\t         (const_int 8))) 0))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"walignr%U3%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"walignr\")]\n+)\n \n-(define_insn \"iwmmxt_tmrc\"\n-  [(set (match_operand:SI                      0 \"register_operand\" \"=r\")\n-\t(unspec_volatile:SI [(match_operand:SI 1 \"immediate_operand\" \"i\")]\n-\t\t\t    VUNSPEC_TMRC))]\n-  \"TARGET_REALLY_IWMMXT\"\n-  \"tmrc%?\\\\t%0, %w1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+(define_insn \"iwmmxt_walignr0\"\n+  [(set (match_operand:V8QI                           0 \"register_operand\" \"=y\")\n+\t(subreg:V8QI (ashiftrt:TI\n+\t\t       (subreg:TI (vec_concat:V16QI\n+\t\t\t\t    (match_operand:V8QI 1 \"register_operand\" \"y\")\n+\t\t\t\t    (match_operand:V8QI 2 \"register_operand\" \"y\")) 0)\n+\t\t       (mult:SI\n+\t\t         (zero_extract:SI (reg:SI WCGR0) (const_int 3) (const_int 0))\n+\t\t         (const_int 8))) 0))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"walignr0%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"walignr\")]\n+)\n \n-(define_insn \"iwmmxt_tmcr\"\n-  [(unspec_volatile:SI [(match_operand:SI 0 \"immediate_operand\" \"i\")\n-\t\t\t(match_operand:SI 1 \"register_operand\"  \"r\")]\n-\t\t       VUNSPEC_TMCR)]\n-  \"TARGET_REALLY_IWMMXT\"\n-  \"tmcr%?\\\\t%w0, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+(define_insn \"iwmmxt_walignr1\"\n+  [(set (match_operand:V8QI                           0 \"register_operand\" \"=y\")\n+\t(subreg:V8QI (ashiftrt:TI\n+\t\t       (subreg:TI (vec_concat:V16QI\n+\t\t\t\t    (match_operand:V8QI 1 \"register_operand\" \"y\")\n+\t\t\t\t    (match_operand:V8QI 2 \"register_operand\" \"y\")) 0)\n+\t\t       (mult:SI\n+\t\t         (zero_extract:SI (reg:SI WCGR1) (const_int 3) (const_int 0))\n+\t\t         (const_int 8))) 0))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"walignr1%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"walignr\")]\n+)\n+\n+(define_insn \"iwmmxt_walignr2\"\n+  [(set (match_operand:V8QI                           0 \"register_operand\" \"=y\")\n+\t(subreg:V8QI (ashiftrt:TI\n+\t\t       (subreg:TI (vec_concat:V16QI\n+\t\t\t\t    (match_operand:V8QI 1 \"register_operand\" \"y\")\n+\t\t\t\t    (match_operand:V8QI 2 \"register_operand\" \"y\")) 0)\n+\t\t       (mult:SI\n+\t\t         (zero_extract:SI (reg:SI WCGR2) (const_int 3) (const_int 0))\n+\t\t         (const_int 8))) 0))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"walignr2%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"walignr\")]\n+)\n+\n+(define_insn \"iwmmxt_walignr3\"\n+  [(set (match_operand:V8QI                           0 \"register_operand\" \"=y\")\n+\t(subreg:V8QI (ashiftrt:TI\n+\t\t       (subreg:TI (vec_concat:V16QI\n+\t\t\t\t    (match_operand:V8QI 1 \"register_operand\" \"y\")\n+\t\t\t\t    (match_operand:V8QI 2 \"register_operand\" \"y\")) 0)\n+\t\t       (mult:SI\n+\t\t         (zero_extract:SI (reg:SI WCGR3) (const_int 3) (const_int 0))\n+\t\t         (const_int 8))) 0))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"walignr3%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"walignr\")]\n+)\n \n (define_insn \"iwmmxt_wsadb\"\n-  [(set (match_operand:V8QI               0 \"register_operand\" \"=y\")\n-        (unspec:V8QI [(match_operand:V8QI 1 \"register_operand\" \"y\")\n-\t\t      (match_operand:V8QI 2 \"register_operand\" \"y\")] UNSPEC_WSAD))]\n+  [(set (match_operand:V2SI               0 \"register_operand\" \"=y\")\n+        (unspec:V2SI [\n+\t\t      (match_operand:V2SI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V8QI 2 \"register_operand\" \"y\")\n+\t\t      (match_operand:V8QI 3 \"register_operand\" \"y\")] UNSPEC_WSAD))]\n   \"TARGET_REALLY_IWMMXT\"\n-  \"wsadb%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  \"wsadb%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wsad\")]\n+)\n \n (define_insn \"iwmmxt_wsadh\"\n-  [(set (match_operand:V4HI               0 \"register_operand\" \"=y\")\n-        (unspec:V4HI [(match_operand:V4HI 1 \"register_operand\" \"y\")\n-\t\t      (match_operand:V4HI 2 \"register_operand\" \"y\")] UNSPEC_WSAD))]\n+  [(set (match_operand:V2SI               0 \"register_operand\" \"=y\")\n+        (unspec:V2SI [\n+\t\t      (match_operand:V2SI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V4HI 2 \"register_operand\" \"y\")\n+\t\t      (match_operand:V4HI 3 \"register_operand\" \"y\")] UNSPEC_WSAD))]\n   \"TARGET_REALLY_IWMMXT\"\n-  \"wsadh%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  \"wsadh%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wsad\")]\n+)\n \n (define_insn \"iwmmxt_wsadbz\"\n-  [(set (match_operand:V8QI               0 \"register_operand\" \"=y\")\n-        (unspec:V8QI [(match_operand:V8QI 1 \"register_operand\" \"y\")\n+  [(set (match_operand:V2SI               0 \"register_operand\" \"=y\")\n+        (unspec:V2SI [(match_operand:V8QI 1 \"register_operand\" \"y\")\n \t\t      (match_operand:V8QI 2 \"register_operand\" \"y\")] UNSPEC_WSADZ))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wsadbz%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wsad\")]\n+)\n \n (define_insn \"iwmmxt_wsadhz\"\n-  [(set (match_operand:V4HI               0 \"register_operand\" \"=y\")\n-        (unspec:V4HI [(match_operand:V4HI 1 \"register_operand\" \"y\")\n+  [(set (match_operand:V2SI               0 \"register_operand\" \"=y\")\n+        (unspec:V2SI [(match_operand:V4HI 1 \"register_operand\" \"y\")\n \t\t      (match_operand:V4HI 2 \"register_operand\" \"y\")] UNSPEC_WSADZ))]\n   \"TARGET_REALLY_IWMMXT\"\n   \"wsadhz%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wsad\")]\n+)\n \n+(include \"iwmmxt2.md\")"}, {"sha": "c06fece4cf9ce15aae7f7f6fc56a6d9efa8ba079", "filename": "gcc/config/arm/iwmmxt2.md", "status": "added", "additions": 918, "deletions": 0, "changes": 918, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Fiwmmxt2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Fiwmmxt2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiwmmxt2.md?ref=8fd0351502e37a0b3b1a2a4c088477f99cd9b314", "patch": "@@ -0,0 +1,918 @@\n+;; Patterns for the Intel Wireless MMX technology architecture.\n+;; Copyright (C) 2011, 2012 Free Software Foundation, Inc.\n+;; Written by Marvell, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_c_enum \"unspec\" [\n+  UNSPEC_WADDC\t\t; Used by the intrinsic form of the iWMMXt WADDC instruction.\n+  UNSPEC_WABS\t\t; Used by the intrinsic form of the iWMMXt WABS instruction.\n+  UNSPEC_WQMULWMR\t; Used by the intrinsic form of the iWMMXt WQMULWMR instruction.\n+  UNSPEC_WQMULMR\t; Used by the intrinsic form of the iWMMXt WQMULMR instruction.\n+  UNSPEC_WQMULWM\t; Used by the intrinsic form of the iWMMXt WQMULWM instruction.\n+  UNSPEC_WQMULM\t\t; Used by the intrinsic form of the iWMMXt WQMULM instruction.\n+  UNSPEC_WQMIAxyn\t; Used by the intrinsic form of the iWMMXt WMIAxyn instruction.\n+  UNSPEC_WQMIAxy\t; Used by the intrinsic form of the iWMMXt WMIAxy instruction.\n+  UNSPEC_TANDC\t\t; Used by the intrinsic form of the iWMMXt TANDC instruction.\n+  UNSPEC_TORC\t\t; Used by the intrinsic form of the iWMMXt TORC instruction.\n+  UNSPEC_TORVSC\t\t; Used by the intrinsic form of the iWMMXt TORVSC instruction.\n+  UNSPEC_TEXTRC\t\t; Used by the intrinsic form of the iWMMXt TEXTRC instruction.\n+])\n+\n+(define_insn \"iwmmxt_wabs<mode>3\"\n+  [(set (match_operand:VMMX               0 \"register_operand\" \"=y\")\n+        (unspec:VMMX [(match_operand:VMMX 1 \"register_operand\"  \"y\")] UNSPEC_WABS))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wabs<MMX_char>%?\\\\t%0, %1\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wabs\")]\n+)\n+\n+(define_insn \"iwmmxt_wabsdiffb\"\n+  [(set (match_operand:V8QI                          0 \"register_operand\" \"=y\")\n+\t(truncate:V8QI\n+\t  (abs:V8HI\n+\t    (minus:V8HI\n+\t      (zero_extend:V8HI (match_operand:V8QI  1 \"register_operand\"  \"y\"))\n+\t      (zero_extend:V8HI (match_operand:V8QI  2 \"register_operand\"  \"y\"))))))]\n+ \"TARGET_REALLY_IWMMXT\"\n+ \"wabsdiffb%?\\\\t%0, %1, %2\"\n+ [(set_attr \"predicable\" \"yes\")\n+  (set_attr \"wtype\" \"wabsdiff\")]\n+)\n+\n+(define_insn \"iwmmxt_wabsdiffh\"\n+  [(set (match_operand:V4HI                          0 \"register_operand\" \"=y\")\n+        (truncate: V4HI\n+          (abs:V4SI\n+            (minus:V4SI\n+              (zero_extend:V4SI (match_operand:V4HI  1 \"register_operand\"  \"y\"))\n+\t      (zero_extend:V4SI (match_operand:V4HI  2 \"register_operand\"  \"y\"))))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wabsdiffh%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wabsdiff\")]\n+)\n+\n+(define_insn \"iwmmxt_wabsdiffw\"\n+  [(set (match_operand:V2SI                          0 \"register_operand\" \"=y\")\n+        (truncate: V2SI\n+\t  (abs:V2DI\n+\t    (minus:V2DI\n+\t      (zero_extend:V2DI (match_operand:V2SI  1 \"register_operand\"  \"y\"))\n+\t      (zero_extend:V2DI (match_operand:V2SI  2 \"register_operand\"  \"y\"))))))]\n+ \"TARGET_REALLY_IWMMXT\"\n+ \"wabsdiffw%?\\\\t%0, %1, %2\"\n+ [(set_attr \"predicable\" \"yes\")\n+  (set_attr \"wtype\" \"wabsdiff\")]\n+)\n+\n+(define_insn \"iwmmxt_waddsubhx\"\n+  [(set (match_operand:V4HI                                        0 \"register_operand\" \"=y\")\n+\t(vec_merge:V4HI\n+\t  (ss_minus:V4HI\n+\t    (match_operand:V4HI                                    1 \"register_operand\" \"y\")\n+\t    (vec_select:V4HI (match_operand:V4HI 2 \"register_operand\" \"y\")\n+\t                     (parallel [(const_int 1) (const_int 0) (const_int 3) (const_int 2)])))\n+\t  (ss_plus:V4HI\n+\t    (match_dup 1)\n+\t    (vec_select:V4HI (match_dup 2)\n+\t                     (parallel [(const_int 1) (const_int 0) (const_int 3) (const_int 2)])))\n+\t  (const_int 10)))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"waddsubhx%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"waddsubhx\")]\n+)\n+\n+(define_insn \"iwmmxt_wsubaddhx\"\n+  [(set (match_operand:V4HI                                        0 \"register_operand\" \"=y\")\n+\t(vec_merge:V4HI\n+\t  (ss_plus:V4HI\n+\t    (match_operand:V4HI                                    1 \"register_operand\" \"y\")\n+\t    (vec_select:V4HI (match_operand:V4HI 2 \"register_operand\" \"y\")\n+\t                     (parallel [(const_int 1) (const_int 0) (const_int 3) (const_int 2)])))\n+\t  (ss_minus:V4HI\n+\t    (match_dup 1)\n+\t    (vec_select:V4HI (match_dup 2)\n+\t                     (parallel [(const_int 1) (const_int 0) (const_int 3) (const_int 2)])))\n+\t  (const_int 10)))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wsubaddhx%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wsubaddhx\")]\n+)\n+\n+(define_insn \"addc<mode>3\"\n+  [(set (match_operand:VMMX2      0 \"register_operand\" \"=y\")\n+\t(unspec:VMMX2\n+          [(plus:VMMX2\n+             (match_operand:VMMX2 1 \"register_operand\"  \"y\")\n+\t     (match_operand:VMMX2 2 \"register_operand\"  \"y\"))] UNSPEC_WADDC))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wadd<MMX_char>c%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wadd\")]\n+)\n+\n+(define_insn \"iwmmxt_avg4\"\n+[(set (match_operand:V8QI                                 0 \"register_operand\" \"=y\")\n+      (truncate:V8QI\n+        (vec_select:V8HI\n+\t  (vec_merge:V8HI\n+\t    (lshiftrt:V8HI\n+\t      (plus:V8HI\n+\t        (plus:V8HI\n+\t\t  (plus:V8HI\n+\t            (plus:V8HI\n+\t\t      (zero_extend:V8HI (match_operand:V8QI 1 \"register_operand\" \"y\"))\n+\t\t      (zero_extend:V8HI (match_operand:V8QI 2 \"register_operand\" \"y\")))\n+\t\t    (vec_select:V8HI (zero_extend:V8HI (match_dup 1))\n+\t\t                     (parallel [(const_int 7) (const_int 0) (const_int 1) (const_int 2)\n+\t\t\t\t                (const_int 3) (const_int 4) (const_int 5) (const_int 6)])))\n+\t\t  (vec_select:V8HI (zero_extend:V8HI (match_dup 2))\n+\t\t                   (parallel [(const_int 7) (const_int 0) (const_int 1) (const_int 2)\n+\t\t\t\t              (const_int 3) (const_int 4) (const_int 5) (const_int 6)])))\n+\t        (const_vector:V8HI [(const_int 1) (const_int 1) (const_int 1) (const_int 1)\n+\t                            (const_int 1) (const_int 1) (const_int 1) (const_int 1)]))\n+\t      (const_int 2))\n+\t    (const_vector:V8HI [(const_int 0) (const_int 0) (const_int 0) (const_int 0)\n+\t                        (const_int 0) (const_int 0) (const_int 0) (const_int 0)])\n+\t    (const_int 254))\n+\t  (parallel [(const_int 1) (const_int 2) (const_int 3) (const_int 4)\n+\t             (const_int 5) (const_int 6) (const_int 7) (const_int 0)]))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wavg4%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wavg4\")]\n+)\n+\n+(define_insn \"iwmmxt_avg4r\"\n+  [(set (match_operand:V8QI                                   0 \"register_operand\" \"=y\")\n+\t(truncate:V8QI\n+\t  (vec_select:V8HI\n+\t    (vec_merge:V8HI\n+\t      (lshiftrt:V8HI\n+\t        (plus:V8HI\n+\t\t  (plus:V8HI\n+\t\t    (plus:V8HI\n+\t\t      (plus:V8HI\n+\t\t        (zero_extend:V8HI (match_operand:V8QI 1 \"register_operand\" \"y\"))\n+\t\t        (zero_extend:V8HI (match_operand:V8QI 2 \"register_operand\" \"y\")))\n+\t\t      (vec_select:V8HI (zero_extend:V8HI (match_dup 1))\n+\t\t                       (parallel [(const_int 7) (const_int 0) (const_int 1) (const_int 2)\n+\t\t\t\t                  (const_int 3) (const_int 4) (const_int 5) (const_int 6)])))\n+\t\t    (vec_select:V8HI (zero_extend:V8HI (match_dup 2))\n+\t\t                     (parallel [(const_int 7) (const_int 0) (const_int 1) (const_int 2)\n+\t\t\t\t                (const_int 3) (const_int 4) (const_int 5) (const_int 6)])))\n+\t\t  (const_vector:V8HI [(const_int 2) (const_int 2) (const_int 2) (const_int 2)\n+\t\t                      (const_int 2) (const_int 2) (const_int 2) (const_int 2)]))\n+\t        (const_int 2))\n+\t      (const_vector:V8HI [(const_int 0) (const_int 0) (const_int 0) (const_int 0)\n+\t                          (const_int 0) (const_int 0) (const_int 0) (const_int 0)])\n+\t      (const_int 254))\n+\t    (parallel [(const_int 1) (const_int 2) (const_int 3) (const_int 4)\n+\t               (const_int 5) (const_int 6) (const_int 7) (const_int 0)]))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wavg4r%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wavg4\")]\n+)\n+\n+(define_insn \"iwmmxt_wmaddsx\"\n+  [(set (match_operand:V2SI                                        0 \"register_operand\" \"=y\")\n+\t(plus:V2SI\n+\t  (mult:V2SI\n+\t    (vec_select:V2SI (sign_extend:V4SI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n+\t                     (parallel [(const_int 1) (const_int 3)]))\n+\t    (vec_select:V2SI (sign_extend:V4SI (match_operand:V4HI 2 \"register_operand\" \"y\"))\n+\t                     (parallel [(const_int 0) (const_int 2)])))\n+\t  (mult:V2SI\n+\t    (vec_select:V2SI (sign_extend:V4SI (match_dup 1))\n+\t                     (parallel [(const_int 0) (const_int 2)]))\n+\t    (vec_select:V2SI (sign_extend:V4SI (match_dup 2))\n+\t                     (parallel [(const_int 1) (const_int 3)])))))]\n+ \"TARGET_REALLY_IWMMXT\"\n+  \"wmaddsx%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+\t(set_attr \"wtype\" \"wmadd\")]\n+)\n+\n+(define_insn \"iwmmxt_wmaddux\"\n+  [(set (match_operand:V2SI                                        0 \"register_operand\" \"=y\")\n+\t(plus:V2SI\n+\t  (mult:V2SI\n+\t    (vec_select:V2SI (zero_extend:V4SI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n+\t                     (parallel [(const_int 1) (const_int 3)]))\n+\t    (vec_select:V2SI (zero_extend:V4SI (match_operand:V4HI 2 \"register_operand\" \"y\"))\n+\t                     (parallel [(const_int 0) (const_int 2)])))\n+\t  (mult:V2SI\n+\t    (vec_select:V2SI (zero_extend:V4SI (match_dup 1))\n+\t                     (parallel [(const_int 0) (const_int 2)]))\n+\t    (vec_select:V2SI (zero_extend:V4SI (match_dup 2))\n+\t                     (parallel [(const_int 1) (const_int 3)])))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmaddux%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmadd\")]\n+)\n+\n+(define_insn \"iwmmxt_wmaddsn\"\n+ [(set (match_operand:V2SI                                     0 \"register_operand\" \"=y\")\n+    (minus:V2SI\n+      (mult:V2SI\n+        (vec_select:V2SI (sign_extend:V4SI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n+\t                 (parallel [(const_int 0) (const_int 2)]))\n+        (vec_select:V2SI (sign_extend:V4SI (match_operand:V4HI 2 \"register_operand\" \"y\"))\n+\t                 (parallel [(const_int 0) (const_int 2)])))\n+      (mult:V2SI\n+        (vec_select:V2SI (sign_extend:V4SI (match_dup 1))\n+\t                 (parallel [(const_int 1) (const_int 3)]))\n+        (vec_select:V2SI (sign_extend:V4SI (match_dup 2))\n+\t                 (parallel [(const_int 1) (const_int 3)])))))]\n+ \"TARGET_REALLY_IWMMXT\"\n+ \"wmaddsn%?\\\\t%0, %1, %2\"\n+ [(set_attr \"predicable\" \"yes\")\n+  (set_attr \"wtype\" \"wmadd\")]\n+)\n+\n+(define_insn \"iwmmxt_wmaddun\"\n+  [(set (match_operand:V2SI                                        0 \"register_operand\" \"=y\")\n+\t(minus:V2SI\n+\t  (mult:V2SI\n+\t    (vec_select:V2SI (zero_extend:V4SI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n+\t                     (parallel [(const_int 0) (const_int 2)]))\n+\t    (vec_select:V2SI (zero_extend:V4SI (match_operand:V4HI 2 \"register_operand\" \"y\"))\n+\t                     (parallel [(const_int 0) (const_int 2)])))\n+\t  (mult:V2SI\n+\t    (vec_select:V2SI (zero_extend:V4SI (match_dup 1))\n+\t                     (parallel [(const_int 1) (const_int 3)]))\n+\t    (vec_select:V2SI (zero_extend:V4SI (match_dup 2))\n+\t                     (parallel [(const_int 1) (const_int 3)])))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmaddun%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmadd\")]\n+)\n+\n+(define_insn \"iwmmxt_wmulwsm\"\n+  [(set (match_operand:V2SI                         0 \"register_operand\" \"=y\")\n+\t(truncate:V2SI\n+\t  (ashiftrt:V2DI\n+\t    (mult:V2DI\n+\t      (sign_extend:V2DI (match_operand:V2SI 1 \"register_operand\" \"y\"))\n+\t      (sign_extend:V2DI (match_operand:V2SI 2 \"register_operand\" \"y\")))\n+\t    (const_int 32))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmulwsm%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmulw\")]\n+)\n+\n+(define_insn \"iwmmxt_wmulwum\"\n+  [(set (match_operand:V2SI                         0 \"register_operand\" \"=y\")\n+\t(truncate:V2SI\n+          (lshiftrt:V2DI\n+\t    (mult:V2DI\n+\t      (zero_extend:V2DI (match_operand:V2SI 1 \"register_operand\" \"y\"))\n+\t      (zero_extend:V2DI (match_operand:V2SI 2 \"register_operand\" \"y\")))\n+\t    (const_int 32))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmulwum%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmulw\")]\n+)\n+\n+(define_insn \"iwmmxt_wmulsmr\"\n+  [(set (match_operand:V4HI                           0 \"register_operand\" \"=y\")\n+\t(truncate:V4HI\n+\t  (ashiftrt:V4SI\n+\t    (plus:V4SI\n+\t      (mult:V4SI\n+\t        (sign_extend:V4SI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n+\t\t(sign_extend:V4SI (match_operand:V4HI 2 \"register_operand\" \"y\")))\n+\t      (const_vector:V4SI [(const_int 32768)\n+\t                          (const_int 32768)\n+\t\t\t\t  (const_int 32768)]))\n+\t    (const_int 16))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmulsmr%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmul\")]\n+)\n+\n+(define_insn \"iwmmxt_wmulumr\"\n+  [(set (match_operand:V4HI                           0 \"register_operand\" \"=y\")\n+\t(truncate:V4HI\n+\t  (lshiftrt:V4SI\n+\t    (plus:V4SI\n+\t      (mult:V4SI\n+\t        (zero_extend:V4SI (match_operand:V4HI 1 \"register_operand\" \"y\"))\n+\t\t(zero_extend:V4SI (match_operand:V4HI 2 \"register_operand\" \"y\")))\n+\t      (const_vector:V4SI [(const_int 32768)\n+\t\t\t\t  (const_int 32768)\n+\t\t\t\t  (const_int 32768)\n+\t\t\t\t  (const_int 32768)]))\n+\t  (const_int 16))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmulumr%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmul\")]\n+)\n+\n+(define_insn \"iwmmxt_wmulwsmr\"\n+  [(set (match_operand:V2SI                           0 \"register_operand\" \"=y\")\n+\t(truncate:V2SI\n+\t  (ashiftrt:V2DI\n+\t    (plus:V2DI\n+\t      (mult:V2DI\n+\t        (sign_extend:V2DI (match_operand:V2SI 1 \"register_operand\" \"y\"))\n+\t\t(sign_extend:V2DI (match_operand:V2SI 2 \"register_operand\" \"y\")))\n+\t      (const_vector:V2DI [(const_int 2147483648)\n+\t\t\t\t  (const_int 2147483648)]))\n+\t    (const_int 32))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmulwsmr%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmul\")]\n+)\n+\n+(define_insn \"iwmmxt_wmulwumr\"\n+  [(set (match_operand:V2SI                           0 \"register_operand\" \"=y\")\n+\t(truncate:V2SI\n+\t  (lshiftrt:V2DI\n+\t    (plus:V2DI\n+\t      (mult:V2DI\n+\t        (zero_extend:V2DI (match_operand:V2SI 1 \"register_operand\" \"y\"))\n+\t\t(zero_extend:V2DI (match_operand:V2SI 2 \"register_operand\" \"y\")))\n+\t      (const_vector:V2DI [(const_int 2147483648)\n+\t\t\t          (const_int 2147483648)]))\n+\t    (const_int 32))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmulwumr%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmulw\")]\n+)\n+\n+(define_insn \"iwmmxt_wmulwl\"\n+  [(set (match_operand:V2SI   0 \"register_operand\" \"=y\")\n+        (mult:V2SI\n+          (match_operand:V2SI 1 \"register_operand\" \"y\")\n+\t  (match_operand:V2SI 2 \"register_operand\" \"y\")))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmulwl%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmulw\")]\n+)\n+\n+(define_insn \"iwmmxt_wqmulm\"\n+  [(set (match_operand:V4HI            0 \"register_operand\" \"=y\")\n+        (unspec:V4HI [(match_operand:V4HI 1 \"register_operand\" \"y\")\n+\t\t      (match_operand:V4HI 2 \"register_operand\" \"y\")] UNSPEC_WQMULM))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wqmulm%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wqmulm\")]\n+)\n+\n+(define_insn \"iwmmxt_wqmulwm\"\n+  [(set (match_operand:V2SI               0 \"register_operand\" \"=y\")\n+\t(unspec:V2SI [(match_operand:V2SI 1 \"register_operand\" \"y\")\n+\t\t      (match_operand:V2SI 2 \"register_operand\" \"y\")] UNSPEC_WQMULWM))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wqmulwm%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wqmulwm\")]\n+)\n+\n+(define_insn \"iwmmxt_wqmulmr\"\n+  [(set (match_operand:V4HI               0 \"register_operand\" \"=y\")\n+\t(unspec:V4HI [(match_operand:V4HI 1 \"register_operand\" \"y\")\n+\t\t      (match_operand:V4HI 2 \"register_operand\" \"y\")] UNSPEC_WQMULMR))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wqmulmr%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wqmulm\")]\n+)\n+\n+(define_insn \"iwmmxt_wqmulwmr\"\n+  [(set (match_operand:V2SI            0 \"register_operand\" \"=y\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"register_operand\" \"y\")\n+\t\t      (match_operand:V2SI 2 \"register_operand\" \"y\")] UNSPEC_WQMULWMR))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wqmulwmr%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wqmulwm\")]\n+)\n+\n+(define_insn \"iwmmxt_waddbhusm\"\n+  [(set (match_operand:V8QI                          0 \"register_operand\" \"=y\")\n+\t(vec_concat:V8QI\n+\t  (const_vector:V4QI [(const_int 0) (const_int 0) (const_int 0) (const_int 0)])\n+\t  (us_truncate:V4QI\n+\t    (ss_plus:V4HI\n+\t      (match_operand:V4HI                    1 \"register_operand\" \"y\")\n+\t      (zero_extend:V4HI\n+\t        (vec_select:V4QI (match_operand:V8QI 2 \"register_operand\" \"y\")\n+\t                         (parallel [(const_int 4) (const_int 5) (const_int 6) (const_int 7)])))))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"waddbhusm%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"waddbhus\")]\n+)\n+\n+(define_insn \"iwmmxt_waddbhusl\"\n+  [(set (match_operand:V8QI                          0 \"register_operand\" \"=y\")\n+\t(vec_concat:V8QI\n+\t  (us_truncate:V4QI\n+\t    (ss_plus:V4HI\n+\t      (match_operand:V4HI                    1 \"register_operand\" \"y\")\n+\t      (zero_extend:V4HI\n+\t\t(vec_select:V4QI (match_operand:V8QI 2 \"register_operand\" \"y\")\n+\t\t                 (parallel [(const_int 0) (const_int 1) (const_int 2) (const_int 3)])))))\n+\t  (const_vector:V4QI [(const_int 0) (const_int 0) (const_int 0) (const_int 0)])))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"waddbhusl%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"waddbhus\")]\n+)\n+\n+(define_insn \"iwmmxt_wqmiabb\"\n+  [(set (match_operand:V2SI\t                             0 \"register_operand\" \"=y\")\n+\t(unspec:V2SI [(match_operand:V2SI                    1 \"register_operand\" \"0\")\n+\t\t      (zero_extract:V4HI (match_operand:V4HI 2 \"register_operand\" \"y\") (const_int 16) (const_int 0))\n+\t\t      (zero_extract:V4HI (match_dup 2) (const_int 16) (const_int 32))\n+\t\t      (zero_extract:V4HI (match_operand:V4HI 3 \"register_operand\" \"y\") (const_int 16) (const_int 0))\n+\t\t      (zero_extract:V4HI (match_dup 3) (const_int 16) (const_int 32))] UNSPEC_WQMIAxy))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wqmiabb%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wqmiaxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wqmiabt\"\n+  [(set (match_operand:V2SI\t                             0 \"register_operand\" \"=y\")\n+\t(unspec:V2SI [(match_operand:V2SI                    1 \"register_operand\" \"0\")\n+\t              (zero_extract:V4HI (match_operand:V4HI 2 \"register_operand\" \"y\") (const_int 16) (const_int 0))\n+\t\t      (zero_extract:V4HI (match_dup 2) (const_int 16) (const_int 32))\n+\t\t      (zero_extract:V4HI (match_operand:V4HI 3 \"register_operand\" \"y\") (const_int 16) (const_int 16))\n+\t\t      (zero_extract:V4HI (match_dup 3) (const_int 16) (const_int 48))] UNSPEC_WQMIAxy))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wqmiabt%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wqmiaxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wqmiatb\"\n+  [(set (match_operand:V2SI                                  0 \"register_operand\" \"=y\")\n+        (unspec:V2SI [(match_operand:V2SI                    1 \"register_operand\" \"0\")\n+\t              (zero_extract:V4HI (match_operand:V4HI 2 \"register_operand\" \"y\") (const_int 16) (const_int 16))\n+\t              (zero_extract:V4HI (match_dup 2) (const_int 16) (const_int 48))\n+\t              (zero_extract:V4HI (match_operand:V4HI 3 \"register_operand\" \"y\") (const_int 16) (const_int 0))\n+\t              (zero_extract:V4HI (match_dup 3) (const_int 16) (const_int 32))] UNSPEC_WQMIAxy))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wqmiatb%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wqmiaxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wqmiatt\"\n+  [(set (match_operand:V2SI                                  0 \"register_operand\" \"=y\")\n+        (unspec:V2SI [(match_operand:V2SI                    1 \"register_operand\" \"0\")\n+\t              (zero_extract:V4HI (match_operand:V4HI 2 \"register_operand\" \"y\") (const_int 16) (const_int 16))\n+\t              (zero_extract:V4HI (match_dup 2) (const_int 16) (const_int 48))\n+\t              (zero_extract:V4HI (match_operand:V4HI 3 \"register_operand\" \"y\") (const_int 16) (const_int 16))\n+\t              (zero_extract:V4HI (match_dup 3) (const_int 16) (const_int 48))] UNSPEC_WQMIAxy))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wqmiatt%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wqmiaxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wqmiabbn\"\n+  [(set (match_operand:V2SI                                  0 \"register_operand\" \"=y\")\n+        (unspec:V2SI [(match_operand:V2SI                    1 \"register_operand\" \"0\")\n+                      (zero_extract:V4HI (match_operand:V4HI 2 \"register_operand\" \"y\") (const_int 16) (const_int 0))\n+\t              (zero_extract:V4HI (match_dup 2) (const_int 16) (const_int 32))\n+\t              (zero_extract:V4HI (match_operand:V4HI 3 \"register_operand\" \"y\") (const_int 16) (const_int 0))\n+\t              (zero_extract:V4HI (match_dup 3) (const_int 16) (const_int 32))] UNSPEC_WQMIAxyn))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wqmiabbn%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wqmiaxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wqmiabtn\"\n+  [(set (match_operand:V2SI                                  0 \"register_operand\" \"=y\")\n+        (unspec:V2SI [(match_operand:V2SI                    1 \"register_operand\" \"0\")\n+                      (zero_extract:V4HI (match_operand:V4HI 2 \"register_operand\" \"y\") (const_int 16) (const_int 0))\n+\t              (zero_extract:V4HI (match_dup 2) (const_int 16) (const_int 32))\n+\t              (zero_extract:V4HI (match_operand:V4HI 3 \"register_operand\" \"y\") (const_int 16) (const_int 16))\n+\t              (zero_extract:V4HI (match_dup 3) (const_int 16) (const_int 48))] UNSPEC_WQMIAxyn))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wqmiabtn%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wqmiaxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wqmiatbn\"\n+  [(set (match_operand:V2SI                                  0 \"register_operand\" \"=y\")\n+        (unspec:V2SI [(match_operand:V2SI                    1 \"register_operand\" \"0\")\n+                      (zero_extract:V4HI (match_operand:V4HI 2 \"register_operand\" \"y\") (const_int 16) (const_int 16))\n+\t              (zero_extract:V4HI (match_dup 2) (const_int 16) (const_int 48))\n+\t              (zero_extract:V4HI (match_operand:V4HI 3 \"register_operand\" \"y\") (const_int 16) (const_int 0))\n+\t              (zero_extract:V4HI (match_dup 3) (const_int 16) (const_int 32))] UNSPEC_WQMIAxyn))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wqmiatbn%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wqmiaxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wqmiattn\"\n+ [(set (match_operand:V2SI                                  0 \"register_operand\" \"=y\")\n+       (unspec:V2SI [(match_operand:V2SI                    1 \"register_operand\" \"0\")\n+                     (zero_extract:V4HI (match_operand:V4HI 2 \"register_operand\" \"y\") (const_int 16) (const_int 16))\n+\t             (zero_extract:V4HI (match_dup 2) (const_int 16) (const_int 48))\n+\t             (zero_extract:V4HI (match_operand:V4HI 3 \"register_operand\" \"y\") (const_int 16) (const_int 16))\n+\t             (zero_extract:V4HI (match_dup 3) (const_int 16) (const_int 48))] UNSPEC_WQMIAxyn))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wqmiattn%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wqmiaxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wmiabb\"\n+  [(set\t(match_operand:DI\t                          0 \"register_operand\" \"=y\")\n+\t(plus:DI (match_operand:DI\t                  1 \"register_operand\" \"0\")\n+\t\t (plus:DI\n+\t\t   (mult:DI\n+\t\t     (sign_extend:DI\n+\t\t       (vec_select:HI (match_operand:V4HI 2 \"register_operand\" \"y\")\n+\t\t\t\t      (parallel [(const_int 0)])))\n+\t\t     (sign_extend:DI\n+\t\t       (vec_select:HI (match_operand:V4HI 3 \"register_operand\" \"y\")\n+\t\t\t\t      (parallel [(const_int 0)]))))\n+\t\t   (mult:DI\n+\t\t     (sign_extend:DI\n+\t\t       (vec_select:HI (match_dup 2)\n+\t\t\t              (parallel [(const_int 2)])))\n+\t\t     (sign_extend:DI\n+\t\t       (vec_select:HI (match_dup 3)\n+\t\t\t\t      (parallel [(const_int 2)])))))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmiabb%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmiaxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wmiabt\"\n+  [(set\t(match_operand:DI\t                          0 \"register_operand\" \"=y\")\n+\t(plus:DI (match_operand:DI\t                  1 \"register_operand\" \"0\")\n+\t\t (plus:DI\n+\t\t   (mult:DI\n+\t\t     (sign_extend:DI\n+\t\t       (vec_select:HI (match_operand:V4HI 2 \"register_operand\" \"y\")\n+\t\t\t\t      (parallel [(const_int 0)])))\n+\t\t     (sign_extend:DI\n+\t\t       (vec_select:HI (match_operand:V4HI 3 \"register_operand\" \"y\")\n+\t\t\t\t      (parallel [(const_int 1)]))))\n+\t\t   (mult:DI\n+\t\t     (sign_extend:DI\n+\t\t       (vec_select:HI (match_dup 2)\n+\t\t\t\t      (parallel [(const_int 2)])))\n+\t\t     (sign_extend:DI\n+\t\t       (vec_select:HI (match_dup 3)\n+\t\t\t\t      (parallel [(const_int 3)])))))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmiabt%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmiaxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wmiatb\"\n+  [(set\t(match_operand:DI\t                          0 \"register_operand\" \"=y\")\n+\t(plus:DI (match_operand:DI\t                  1 \"register_operand\" \"0\")\n+\t\t (plus:DI\n+\t\t   (mult:DI\n+\t\t     (sign_extend:DI\n+\t\t       (vec_select:HI (match_operand:V4HI 2 \"register_operand\" \"y\")\n+\t\t\t\t      (parallel [(const_int 1)])))\n+\t\t     (sign_extend:DI\n+\t\t       (vec_select:HI (match_operand:V4HI 3 \"register_operand\" \"y\")\n+\t\t\t\t      (parallel [(const_int 0)]))))\n+\t\t   (mult:DI\n+\t\t     (sign_extend:DI\n+\t\t       (vec_select:HI (match_dup 2)\n+\t\t\t\t      (parallel [(const_int 3)])))\n+\t\t     (sign_extend:DI\n+\t\t       (vec_select:HI (match_dup 3)\n+\t\t\t\t      (parallel [(const_int 2)])))))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmiatb%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmiaxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wmiatt\"\n+  [(set\t(match_operand:DI\t                   0 \"register_operand\" \"=y\")\n+        (plus:DI (match_operand:DI\t           1 \"register_operand\" \"0\")\n+          (plus:DI\n+            (mult:DI\n+              (sign_extend:DI\n+                (vec_select:HI (match_operand:V4HI 2 \"register_operand\" \"y\")\n+\t                       (parallel [(const_int 1)])))\n+\t      (sign_extend:DI\n+\t        (vec_select:HI (match_operand:V4HI 3 \"register_operand\" \"y\")\n+\t                       (parallel [(const_int 1)]))))\n+            (mult:DI\n+\t      (sign_extend:DI\n+                (vec_select:HI (match_dup 2)\n+\t                       (parallel [(const_int 3)])))\n+              (sign_extend:DI\n+                (vec_select:HI (match_dup 3)\n+\t                       (parallel [(const_int 3)])))))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmiatt%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmiaxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wmiabbn\"\n+  [(set\t(match_operand:DI\t                           0 \"register_operand\" \"=y\")\n+\t(minus:DI (match_operand:DI\t                   1 \"register_operand\" \"0\")\n+\t\t  (plus:DI\n+\t\t    (mult:DI\n+\t\t      (sign_extend:DI\n+\t\t\t(vec_select:HI (match_operand:V4HI 2 \"register_operand\" \"y\")\n+\t\t\t\t       (parallel [(const_int 0)])))\n+\t\t      (sign_extend:DI\n+\t\t        (vec_select:HI (match_operand:V4HI 3 \"register_operand\" \"y\")\n+\t\t\t\t       (parallel [(const_int 0)]))))\n+\t\t    (mult:DI\n+\t\t      (sign_extend:DI\n+\t\t\t(vec_select:HI (match_dup 2)\n+\t\t\t\t       (parallel [(const_int 2)])))\n+\t\t      (sign_extend:DI\n+\t\t        (vec_select:HI (match_dup 3)\n+\t\t\t\t       (parallel [(const_int 2)])))))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmiabbn%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmiaxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wmiabtn\"\n+  [(set\t(match_operand:DI\t                           0 \"register_operand\" \"=y\")\n+\t(minus:DI (match_operand:DI\t                   1 \"register_operand\" \"0\")\n+\t\t  (plus:DI\n+\t\t    (mult:DI\n+\t\t      (sign_extend:DI\n+\t\t\t(vec_select:HI (match_operand:V4HI 2 \"register_operand\" \"y\")\n+\t\t\t\t       (parallel [(const_int 0)])))\n+\t\t      (sign_extend:DI\n+\t\t        (vec_select:HI (match_operand:V4HI 3 \"register_operand\" \"y\")\n+\t\t\t\t       (parallel [(const_int 1)]))))\n+\t\t    (mult:DI\n+\t\t      (sign_extend:DI\n+\t\t        (vec_select:HI (match_dup 2)\n+\t\t\t\t       (parallel [(const_int 2)])))\n+\t\t      (sign_extend:DI\n+\t\t\t(vec_select:HI (match_dup 3)\n+\t\t\t\t       (parallel [(const_int 3)])))))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmiabtn%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmiaxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wmiatbn\"\n+  [(set (match_operand:DI\t                           0 \"register_operand\" \"=y\")\n+\t(minus:DI (match_operand:DI\t                   1 \"register_operand\" \"0\")\n+\t\t  (plus:DI\n+\t\t    (mult:DI\n+\t\t      (sign_extend:DI\n+\t\t\t(vec_select:HI (match_operand:V4HI 2 \"register_operand\" \"y\")\n+\t\t\t\t       (parallel [(const_int 1)])))\n+\t\t      (sign_extend:DI\n+\t\t        (vec_select:HI (match_operand:V4HI 3 \"register_operand\" \"y\")\n+\t\t\t\t       (parallel [(const_int 0)]))))\n+\t\t    (mult:DI\n+\t\t      (sign_extend:DI\n+\t\t        (vec_select:HI (match_dup 2)\n+\t\t\t\t       (parallel [(const_int 3)])))\n+\t\t      (sign_extend:DI\n+\t\t\t(vec_select:HI (match_dup 3)\n+\t\t\t\t       (parallel [(const_int 2)])))))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmiatbn%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmiaxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wmiattn\"\n+  [(set (match_operand:DI\t                           0 \"register_operand\" \"=y\")\n+\t(minus:DI (match_operand:DI\t                   1 \"register_operand\" \"0\")\n+\t\t  (plus:DI\n+\t\t    (mult:DI\n+\t\t      (sign_extend:DI\n+\t\t\t(vec_select:HI (match_operand:V4HI 2 \"register_operand\" \"y\")\n+\t\t\t\t       (parallel [(const_int 1)])))\n+\t\t      (sign_extend:DI\n+\t\t\t(vec_select:HI (match_operand:V4HI 3 \"register_operand\" \"y\")\n+\t\t\t\t       (parallel [(const_int 1)]))))\n+\t\t    (mult:DI\n+\t\t      (sign_extend:DI\n+\t\t\t(vec_select:HI (match_dup 2)\n+\t\t\t\t       (parallel [(const_int 3)])))\n+\t\t      (sign_extend:DI\n+\t\t\t(vec_select:HI (match_dup 3)\n+\t\t\t\t       (parallel [(const_int 3)])))))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmiattn%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmiaxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wmiawbb\"\n+  [(set (match_operand:DI\t0 \"register_operand\" \"=y\")\n+\t(plus:DI\n+\t  (match_operand:DI      1 \"register_operand\" \"0\")\n+\t  (mult:DI\n+\t    (sign_extend:DI (vec_select:SI (match_operand:V2SI 2 \"register_operand\" \"y\") (parallel [(const_int 0)])))\n+\t    (sign_extend:DI (vec_select:SI (match_operand:V2SI 3 \"register_operand\" \"y\") (parallel [(const_int 0)]))))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmiawbb%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmiawxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wmiawbt\"\n+  [(set (match_operand:DI\t                               0 \"register_operand\" \"=y\")\n+\t(plus:DI\n+\t  (match_operand:DI                                    1 \"register_operand\" \"0\")\n+\t  (mult:DI\n+\t    (sign_extend:DI (vec_select:SI (match_operand:V2SI 2 \"register_operand\" \"y\") (parallel [(const_int 0)])))\n+\t    (sign_extend:DI (vec_select:SI (match_operand:V2SI 3 \"register_operand\" \"y\") (parallel [(const_int 1)]))))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmiawbt%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmiawxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wmiawtb\"\n+  [(set (match_operand:DI\t                               0 \"register_operand\" \"=y\")\n+\t(plus:DI\n+\t  (match_operand:DI                                    1 \"register_operand\" \"0\")\n+\t  (mult:DI\n+\t    (sign_extend:DI (vec_select:SI (match_operand:V2SI 2 \"register_operand\" \"y\") (parallel [(const_int 1)])))\n+\t    (sign_extend:DI (vec_select:SI (match_operand:V2SI 3 \"register_operand\" \"y\") (parallel [(const_int 0)]))))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmiawtb%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmiawxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wmiawtt\"\n+[(set (match_operand:DI\t                                     0 \"register_operand\" \"=y\")\n+      (plus:DI\n+\t(match_operand:DI                                    1 \"register_operand\" \"0\")\n+\t(mult:DI\n+\t  (sign_extend:DI (vec_select:SI (match_operand:V2SI 2 \"register_operand\" \"y\") (parallel [(const_int 1)])))\n+\t  (sign_extend:DI (vec_select:SI (match_operand:V2SI 3 \"register_operand\" \"y\") (parallel [(const_int 1)]))))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmiawtt%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmiawxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wmiawbbn\"\n+  [(set (match_operand:DI\t                               0 \"register_operand\" \"=y\")\n+\t(minus:DI\n+\t  (match_operand:DI                                    1 \"register_operand\" \"0\")\n+\t  (mult:DI\n+\t    (sign_extend:DI (vec_select:SI (match_operand:V2SI 2 \"register_operand\" \"y\") (parallel [(const_int 0)])))\n+\t    (sign_extend:DI (vec_select:SI (match_operand:V2SI 3 \"register_operand\" \"y\") (parallel [(const_int 0)]))))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmiawbbn%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmiawxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wmiawbtn\"\n+  [(set (match_operand:DI\t                               0 \"register_operand\" \"=y\")\n+\t(minus:DI\n+\t  (match_operand:DI                                    1 \"register_operand\" \"0\")\n+\t  (mult:DI\n+\t    (sign_extend:DI (vec_select:SI (match_operand:V2SI 2 \"register_operand\" \"y\") (parallel [(const_int 0)])))\n+\t    (sign_extend:DI (vec_select:SI (match_operand:V2SI 3 \"register_operand\" \"y\") (parallel [(const_int 1)]))))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmiawbtn%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmiawxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wmiawtbn\"\n+  [(set (match_operand:DI\t                               0 \"register_operand\" \"=y\")\n+\t(minus:DI\n+\t  (match_operand:DI                                    1 \"register_operand\" \"0\")\n+\t  (mult:DI\n+\t    (sign_extend:DI (vec_select:SI (match_operand:V2SI 2 \"register_operand\" \"y\") (parallel [(const_int 1)])))\n+\t    (sign_extend:DI (vec_select:SI (match_operand:V2SI 3 \"register_operand\" \"y\") (parallel [(const_int 0)]))))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmiawtbn%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmiawxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wmiawttn\"\n+  [(set (match_operand:DI\t                               0 \"register_operand\" \"=y\")\n+\t(minus:DI\n+\t  (match_operand:DI                                    1 \"register_operand\" \"0\")\n+\t  (mult:DI\n+\t    (sign_extend:DI (vec_select:SI (match_operand:V2SI 2 \"register_operand\" \"y\") (parallel [(const_int 1)])))\n+\t    (sign_extend:DI (vec_select:SI (match_operand:V2SI 3 \"register_operand\" \"y\") (parallel [(const_int 1)]))))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmiawttn%?\\\\t%0, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmiawxy\")]\n+)\n+\n+(define_insn \"iwmmxt_wmerge\"\n+  [(set (match_operand:DI         0 \"register_operand\" \"=y\")\n+\t(ior:DI\n+\t  (ashift:DI\n+\t    (match_operand:DI     2 \"register_operand\" \"y\")\n+\t    (minus:SI\n+\t      (const_int 64)\n+\t      (mult:SI\n+\t        (match_operand:SI 3 \"immediate_operand\" \"i\")\n+\t\t(const_int 8))))\n+\t  (lshiftrt:DI\n+\t    (ashift:DI\n+\t      (match_operand:DI   1 \"register_operand\" \"y\")\n+\t      (mult:SI\n+\t        (match_dup 3)\n+\t\t(const_int 8)))\n+\t    (mult:SI\n+\t      (match_dup 3)\n+\t      (const_int 8)))))]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"wmerge%?\\\\t%0, %1, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"wmerge\")]\n+)\n+\n+(define_insn \"iwmmxt_tandc<mode>3\"\n+  [(set (reg:CC CC_REGNUM)\n+\t(subreg:CC (unspec:VMMX [(const_int 0)] UNSPEC_TANDC) 0))\n+   (unspec:CC [(reg:SI 15)] UNSPEC_TANDC)]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"tandc<MMX_char>%?\\\\t r15\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"tandc\")]\n+)\n+\n+(define_insn \"iwmmxt_torc<mode>3\"\n+  [(set (reg:CC CC_REGNUM)\n+\t(subreg:CC (unspec:VMMX [(const_int 0)] UNSPEC_TORC) 0))\n+   (unspec:CC [(reg:SI 15)] UNSPEC_TORC)]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"torc<MMX_char>%?\\\\t r15\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"torc\")]\n+)\n+\n+(define_insn \"iwmmxt_torvsc<mode>3\"\n+  [(set (reg:CC CC_REGNUM)\n+\t(subreg:CC (unspec:VMMX [(const_int 0)] UNSPEC_TORVSC) 0))\n+   (unspec:CC [(reg:SI 15)] UNSPEC_TORVSC)]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"torvsc<MMX_char>%?\\\\t r15\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"torvsc\")]\n+)\n+\n+(define_insn \"iwmmxt_textrc<mode>3\"\n+  [(set (reg:CC CC_REGNUM)\n+\t(subreg:CC (unspec:VMMX [(const_int 0)\n+\t\t                 (match_operand:SI 0 \"immediate_operand\" \"i\")] UNSPEC_TEXTRC) 0))\n+   (unspec:CC [(reg:SI 15)] UNSPEC_TEXTRC)]\n+  \"TARGET_REALLY_IWMMXT\"\n+  \"textrc<MMX_char>%?\\\\t r15, %0\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"wtype\" \"textrc\")]\n+)"}, {"sha": "1d20f3eddf2497f6ec14ebb11a7d581fe3a798a0", "filename": "gcc/config/arm/marvell-f-iwmmxt.md", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Fmarvell-f-iwmmxt.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Fmarvell-f-iwmmxt.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmarvell-f-iwmmxt.md?ref=8fd0351502e37a0b3b1a2a4c088477f99cd9b314", "patch": "@@ -0,0 +1,179 @@\n+;; Marvell WMMX2 pipeline description\n+;; Copyright (C) 2011, 2012 Free Software Foundation, Inc.\n+;; Written by Marvell, Inc.\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+\n+(define_automaton \"marvell_f_iwmmxt\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; Pipelines\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+;; This is a 7-stage pipelines:\n+;;\n+;;    MD | MI | ME1 | ME2 | ME3 | ME4 | MW\n+;;\n+;; There are various bypasses modelled to a greater or lesser extent.\n+;;\n+;; Latencies in this file correspond to the number of cycles after\n+;; the issue stage that it takes for the result of the instruction to\n+;; be computed, or for its side-effects to occur.\n+\n+(define_cpu_unit \"mf_iwmmxt_MD\" \"marvell_f_iwmmxt\")\n+(define_cpu_unit \"mf_iwmmxt_MI\" \"marvell_f_iwmmxt\")\n+(define_cpu_unit \"mf_iwmmxt_ME1\" \"marvell_f_iwmmxt\")\n+(define_cpu_unit \"mf_iwmmxt_ME2\" \"marvell_f_iwmmxt\")\n+(define_cpu_unit \"mf_iwmmxt_ME3\" \"marvell_f_iwmmxt\")\n+(define_cpu_unit \"mf_iwmmxt_ME4\" \"marvell_f_iwmmxt\")\n+(define_cpu_unit \"mf_iwmmxt_MW\" \"marvell_f_iwmmxt\")\n+\n+(define_reservation \"mf_iwmmxt_ME\"\n+      \"mf_iwmmxt_ME1,mf_iwmmxt_ME2,mf_iwmmxt_ME3,mf_iwmmxt_ME4\"\n+)\n+\n+(define_reservation \"mf_iwmmxt_pipeline\"\n+      \"mf_iwmmxt_MD, mf_iwmmxt_MI, mf_iwmmxt_ME, mf_iwmmxt_MW\"\n+)\n+\n+;; An attribute to indicate whether our reservations are applicable.\n+(define_attr \"marvell_f_iwmmxt\" \"yes,no\"\n+  (const (if_then_else (symbol_ref \"arm_arch_iwmmxt\")\n+                       (const_string \"yes\") (const_string \"no\"))))\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; instruction classes\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+;; An attribute appended to instructions for classification\n+\n+(define_attr \"wmmxt_shift\" \"yes,no\"\n+  (if_then_else (eq_attr \"wtype\" \"wror, wsll, wsra, wsrl\")\n+\t\t(const_string \"yes\") (const_string \"no\"))\n+)\n+\n+(define_attr \"wmmxt_pack\" \"yes,no\"\n+  (if_then_else (eq_attr \"wtype\" \"waligni, walignr, wmerge, wpack, wshufh, wunpckeh, wunpckih, wunpckel, wunpckil\")\n+\t\t(const_string \"yes\") (const_string \"no\"))\n+)\n+\n+(define_attr \"wmmxt_mult_c1\" \"yes,no\"\n+  (if_then_else (eq_attr \"wtype\" \"wmac, wmadd, wmiaxy, wmiawxy, wmulw, wqmiaxy, wqmulwm\")\n+\t\t(const_string \"yes\") (const_string \"no\"))\n+)\n+\n+(define_attr \"wmmxt_mult_c2\" \"yes,no\"\n+  (if_then_else (eq_attr \"wtype\" \"wmul, wqmulm\")\n+\t\t(const_string \"yes\") (const_string \"no\"))\n+)\n+\n+(define_attr \"wmmxt_alu_c1\" \"yes,no\"\n+  (if_then_else (eq_attr \"wtype\" \"wabs, wabsdiff, wand, wandn, wmov, wor, wxor\")\n+\t        (const_string \"yes\") (const_string \"no\"))\n+)\n+\n+(define_attr \"wmmxt_alu_c2\" \"yes,no\"\n+  (if_then_else (eq_attr \"wtype\" \"wacc, wadd, waddsubhx, wavg2, wavg4, wcmpeq, wcmpgt, wmax, wmin, wsub, waddbhus, wsubaddhx\")\n+\t\t(const_string \"yes\") (const_string \"no\"))\n+)\n+\n+(define_attr \"wmmxt_alu_c3\" \"yes,no\"\n+  (if_then_else (eq_attr \"wtype\" \"wsad\")\n+\t        (const_string \"yes\") (const_string \"no\"))\n+)\n+\n+(define_attr \"wmmxt_transfer_c1\" \"yes,no\"\n+  (if_then_else (eq_attr \"wtype\" \"tbcst, tinsr, tmcr, tmcrr\")\n+                (const_string \"yes\") (const_string \"no\"))\n+)\n+\n+(define_attr \"wmmxt_transfer_c2\" \"yes,no\"\n+  (if_then_else (eq_attr \"wtype\" \"textrm, tmovmsk, tmrc, tmrrc\")\n+\t        (const_string \"yes\") (const_string \"no\"))\n+)\n+\n+(define_attr \"wmmxt_transfer_c3\" \"yes,no\"\n+  (if_then_else (eq_attr \"wtype\" \"tmia, tmiaph, tmiaxy\")\n+\t        (const_string \"yes\") (const_string \"no\"))\n+)\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; Main description\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn_reservation \"marvell_f_iwmmxt_alu_c1\" 1\n+  (and (eq_attr \"marvell_f_iwmmxt\" \"yes\")\n+       (eq_attr \"wmmxt_alu_c1\" \"yes\"))\n+  \"mf_iwmmxt_pipeline\")\n+\n+(define_insn_reservation \"marvell_f_iwmmxt_pack\" 1\n+  (and (eq_attr \"marvell_f_iwmmxt\" \"yes\")\n+       (eq_attr \"wmmxt_pack\" \"yes\"))\n+  \"mf_iwmmxt_pipeline\")\n+\n+(define_insn_reservation \"marvell_f_iwmmxt_shift\" 1\n+  (and (eq_attr \"marvell_f_iwmmxt\" \"yes\")\n+       (eq_attr \"wmmxt_shift\" \"yes\"))\n+  \"mf_iwmmxt_pipeline\")\n+\n+(define_insn_reservation \"marvell_f_iwmmxt_transfer_c1\" 1\n+  (and (eq_attr \"marvell_f_iwmmxt\" \"yes\")\n+       (eq_attr \"wmmxt_transfer_c1\" \"yes\"))\n+  \"mf_iwmmxt_pipeline\")\n+\n+(define_insn_reservation \"marvell_f_iwmmxt_transfer_c2\" 5\n+  (and (eq_attr \"marvell_f_iwmmxt\" \"yes\")\n+       (eq_attr \"wmmxt_transfer_c2\" \"yes\"))\n+  \"mf_iwmmxt_pipeline\")\n+\n+(define_insn_reservation \"marvell_f_iwmmxt_alu_c2\" 2\n+  (and (eq_attr \"marvell_f_iwmmxt\" \"yes\")\n+       (eq_attr \"wmmxt_alu_c2\" \"yes\"))\n+  \"mf_iwmmxt_pipeline\")\n+\n+(define_insn_reservation \"marvell_f_iwmmxt_alu_c3\" 3\n+  (and (eq_attr \"marvell_f_iwmmxt\" \"yes\")\n+       (eq_attr \"wmmxt_alu_c3\" \"yes\"))\n+  \"mf_iwmmxt_pipeline\")\n+\n+(define_insn_reservation \"marvell_f_iwmmxt_transfer_c3\" 4\n+  (and (eq_attr \"marvell_f_iwmmxt\" \"yes\")\n+       (eq_attr \"wmmxt_transfer_c3\" \"yes\"))\n+  \"mf_iwmmxt_pipeline\")\n+\n+(define_insn_reservation \"marvell_f_iwmmxt_mult_c1\" 4\n+  (and (eq_attr \"marvell_f_iwmmxt\" \"yes\")\n+       (eq_attr \"wmmxt_mult_c1\" \"yes\"))\n+  \"mf_iwmmxt_pipeline\")\n+\n+;There is a forwarding path from ME3 stage\n+(define_insn_reservation \"marvell_f_iwmmxt_mult_c2\" 3\n+  (and (eq_attr \"marvell_f_iwmmxt\" \"yes\")\n+       (eq_attr \"wmmxt_mult_c2\" \"yes\"))\n+  \"mf_iwmmxt_pipeline\")\n+\n+(define_insn_reservation \"marvell_f_iwmmxt_wstr\" 0\n+  (and (eq_attr \"marvell_f_iwmmxt\" \"yes\")\n+       (eq_attr \"wtype\" \"wstr\"))\n+  \"mf_iwmmxt_pipeline\")\n+\n+;There is a forwarding path from MW stage\n+(define_insn_reservation \"marvell_f_iwmmxt_wldr\" 5\n+  (and (eq_attr \"marvell_f_iwmmxt\" \"yes\")\n+       (eq_attr \"wtype\" \"wldr\"))\n+  \"mf_iwmmxt_pipeline\")"}, {"sha": "4df221cc591451e35c968c4e34606c7f4b040b14", "filename": "gcc/config/arm/mmintrin.h", "status": "modified", "additions": 613, "deletions": 38, "changes": 651, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Fmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Fmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmmintrin.h?ref=8fd0351502e37a0b3b1a2a4c088477f99cd9b314", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002, 2003, 2004, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 2002, 2003, 2004, 2009, 2012 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -24,13 +24,23 @@\n #ifndef _MMINTRIN_H_INCLUDED\n #define _MMINTRIN_H_INCLUDED\n \n+#ifndef __IWMMXT__\n+#error mmintrin.h included without enabling WMMX/WMMX2 instructions (e.g. -march=iwmmxt or -march=iwmmxt2)\n+#endif\n+\n+\n+#if defined __cplusplus\n+extern \"C\" {\n+/* Intrinsics use C name-mangling.  */\n+#endif /* __cplusplus */\n+\n /* The data type intended for user use.  */\n typedef unsigned long long __m64, __int64;\n \n /* Internal data types for implementing the intrinsics.  */\n typedef int __v2si __attribute__ ((vector_size (8)));\n typedef short __v4hi __attribute__ ((vector_size (8)));\n-typedef char __v8qi __attribute__ ((vector_size (8)));\n+typedef signed char __v8qi __attribute__ ((vector_size (8)));\n \n /* Provided for source compatibility with MMX.  */\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -39,7 +49,7 @@ _mm_empty (void)\n }\n \n /* \"Convert\" __m64 and __int64 into each other.  */\n-static __inline __m64 \n+static __inline __m64\n _mm_cvtsi64_m64 (__int64 __i)\n {\n   return __i;\n@@ -60,7 +70,7 @@ _mm_cvtsi64_si32 (__int64 __i)\n static __inline __int64\n _mm_cvtsi32_si64 (int __i)\n {\n-  return __i;\n+  return (__i & 0xffffffff);\n }\n \n /* Pack the four 16-bit values from M1 into the lower four 8-bit values of\n@@ -609,7 +619,7 @@ _mm_and_si64 (__m64 __m1, __m64 __m2)\n static __inline __m64\n _mm_andnot_si64 (__m64 __m1, __m64 __m2)\n {\n-  return __builtin_arm_wandn (__m1, __m2);\n+  return __builtin_arm_wandn (__m2, __m1);\n }\n \n /* Bit-wise inclusive OR the 64-bit values in M1 and M2.  */\n@@ -941,7 +951,13 @@ _mm_avg2_pu16 (__m64 __A, __m64 __B)\n static __inline __m64\n _mm_sad_pu8 (__m64 __A, __m64 __B)\n {\n-  return (__m64) __builtin_arm_wsadb ((__v8qi)__A, (__v8qi)__B);\n+  return (__m64) __builtin_arm_wsadbz ((__v8qi)__A, (__v8qi)__B);\n+}\n+\n+static __inline __m64\n+_mm_sada_pu8 (__m64 __A, __m64 __B, __m64 __C)\n+{\n+  return (__m64) __builtin_arm_wsadb ((__v2si)__A, (__v8qi)__B, (__v8qi)__C);\n }\n \n /* Compute the sum of the absolute differences of the unsigned 16-bit\n@@ -950,9 +966,16 @@ _mm_sad_pu8 (__m64 __A, __m64 __B)\n static __inline __m64\n _mm_sad_pu16 (__m64 __A, __m64 __B)\n {\n-  return (__m64) __builtin_arm_wsadh ((__v4hi)__A, (__v4hi)__B);\n+  return (__m64) __builtin_arm_wsadhz ((__v4hi)__A, (__v4hi)__B);\n }\n \n+static __inline __m64\n+_mm_sada_pu16 (__m64 __A, __m64 __B, __m64 __C)\n+{\n+  return (__m64) __builtin_arm_wsadh ((__v2si)__A, (__v4hi)__B, (__v4hi)__C);\n+}\n+\n+\n /* Compute the sum of the absolute differences of the unsigned 8-bit\n    values in A and B.  Return the value in the lower 16-bit word; the\n    upper words are cleared.  */\n@@ -971,11 +994,8 @@ _mm_sadz_pu16 (__m64 __A, __m64 __B)\n   return (__m64) __builtin_arm_wsadhz ((__v4hi)__A, (__v4hi)__B);\n }\n \n-static __inline __m64\n-_mm_align_si64 (__m64 __A, __m64 __B, int __C)\n-{\n-  return (__m64) __builtin_arm_walign ((__v8qi)__A, (__v8qi)__B, __C);\n-}\n+#define _mm_align_si64(__A,__B, N) \\\n+  (__m64) __builtin_arm_walign ((__v8qi) (__A),(__v8qi) (__B), (N))\n \n /* Creates a 64-bit zero.  */\n static __inline __m64\n@@ -993,42 +1013,76 @@ _mm_setwcx (const int __value, const int __regno)\n {\n   switch (__regno)\n     {\n-    case 0:  __builtin_arm_setwcx (__value, 0); break;\n-    case 1:  __builtin_arm_setwcx (__value, 1); break;\n-    case 2:  __builtin_arm_setwcx (__value, 2); break;\n-    case 3:  __builtin_arm_setwcx (__value, 3); break;\n-    case 8:  __builtin_arm_setwcx (__value, 8); break;\n-    case 9:  __builtin_arm_setwcx (__value, 9); break;\n-    case 10: __builtin_arm_setwcx (__value, 10); break;\n-    case 11: __builtin_arm_setwcx (__value, 11); break;\n-    default: break;\n+    case 0:\n+      __asm __volatile (\"tmcr wcid, %0\" :: \"r\"(__value));\n+      break;\n+    case 1:\n+      __asm __volatile (\"tmcr wcon, %0\" :: \"r\"(__value));\n+      break;\n+    case 2:\n+      __asm __volatile (\"tmcr wcssf, %0\" :: \"r\"(__value));\n+      break;\n+    case 3:\n+      __asm __volatile (\"tmcr wcasf, %0\" :: \"r\"(__value));\n+      break;\n+    case 8:\n+      __builtin_arm_setwcgr0 (__value);\n+      break;\n+    case 9:\n+      __builtin_arm_setwcgr1 (__value);\n+      break;\n+    case 10:\n+      __builtin_arm_setwcgr2 (__value);\n+      break;\n+    case 11:\n+      __builtin_arm_setwcgr3 (__value);\n+      break;\n+    default:\n+      break;\n     }\n }\n \n static __inline int\n _mm_getwcx (const int __regno)\n {\n+  int __value;\n   switch (__regno)\n     {\n-    case 0:  return __builtin_arm_getwcx (0);\n-    case 1:  return __builtin_arm_getwcx (1);\n-    case 2:  return __builtin_arm_getwcx (2);\n-    case 3:  return __builtin_arm_getwcx (3);\n-    case 8:  return __builtin_arm_getwcx (8);\n-    case 9:  return __builtin_arm_getwcx (9);\n-    case 10: return __builtin_arm_getwcx (10);\n-    case 11: return __builtin_arm_getwcx (11);\n-    default: return 0;\n+    case 0:\n+      __asm __volatile (\"tmrc %0, wcid\" : \"=r\"(__value));\n+      break;\n+    case 1:\n+      __asm __volatile (\"tmrc %0, wcon\" : \"=r\"(__value));\n+      break;\n+    case 2:\n+      __asm __volatile (\"tmrc %0, wcssf\" : \"=r\"(__value));\n+      break;\n+    case 3:\n+      __asm __volatile (\"tmrc %0, wcasf\" : \"=r\"(__value));\n+      break;\n+    case 8:\n+      return __builtin_arm_getwcgr0 ();\n+    case 9:\n+      return __builtin_arm_getwcgr1 ();\n+    case 10:\n+      return __builtin_arm_getwcgr2 ();\n+    case 11:\n+      return __builtin_arm_getwcgr3 ();\n+    default:\n+      break;\n     }\n+  return __value;\n }\n \n /* Creates a vector of two 32-bit values; I0 is least significant.  */\n static __inline __m64\n _mm_set_pi32 (int __i1, int __i0)\n {\n-  union {\n+  union\n+  {\n     __m64 __q;\n-    struct {\n+    struct\n+    {\n       unsigned int __i0;\n       unsigned int __i1;\n     } __s;\n@@ -1044,10 +1098,10 @@ _mm_set_pi32 (int __i1, int __i0)\n static __inline __m64\n _mm_set_pi16 (short __w3, short __w2, short __w1, short __w0)\n {\n-  unsigned int __i1 = (unsigned short)__w3 << 16 | (unsigned short)__w2;\n-  unsigned int __i0 = (unsigned short)__w1 << 16 | (unsigned short)__w0;\n+  unsigned int __i1 = (unsigned short) __w3 << 16 | (unsigned short) __w2;\n+  unsigned int __i0 = (unsigned short) __w1 << 16 | (unsigned short) __w0;\n+\n   return _mm_set_pi32 (__i1, __i0);\n-\t\t       \n }\n \n /* Creates a vector of eight 8-bit values; B0 is least significant.  */\n@@ -1114,11 +1168,526 @@ _mm_set1_pi8 (char __b)\n   return _mm_set1_pi32 (__i);\n }\n \n-/* Convert an integer to a __m64 object.  */\n+#ifdef __IWMMXT2__\n+static __inline __m64\n+_mm_abs_pi8 (__m64 m1)\n+{\n+  return (__m64) __builtin_arm_wabsb ((__v8qi)m1);\n+}\n+\n+static __inline __m64\n+_mm_abs_pi16 (__m64 m1)\n+{\n+  return (__m64) __builtin_arm_wabsh ((__v4hi)m1);\n+\n+}\n+\n+static __inline __m64\n+_mm_abs_pi32 (__m64 m1)\n+{\n+  return (__m64) __builtin_arm_wabsw ((__v2si)m1);\n+\n+}\n+\n+static __inline __m64\n+_mm_addsubhx_pi16 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_waddsubhx ((__v4hi)a, (__v4hi)b);\n+}\n+\n+static __inline __m64\n+_mm_absdiff_pu8 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wabsdiffb ((__v8qi)a, (__v8qi)b);\n+}\n+\n+static __inline __m64\n+_mm_absdiff_pu16 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wabsdiffh ((__v4hi)a, (__v4hi)b);\n+}\n+\n+static __inline __m64\n+_mm_absdiff_pu32 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wabsdiffw ((__v2si)a, (__v2si)b);\n+}\n+\n+static __inline __m64\n+_mm_addc_pu16 (__m64 a, __m64 b)\n+{\n+  __m64 result;\n+  __asm__ __volatile__ (\"waddhc\t%0, %1, %2\" : \"=y\" (result) : \"y\" (a),  \"y\" (b));\n+  return result;\n+}\n+\n+static __inline __m64\n+_mm_addc_pu32 (__m64 a, __m64 b)\n+{\n+  __m64 result;\n+  __asm__ __volatile__ (\"waddwc\t%0, %1, %2\" : \"=y\" (result) : \"y\" (a),  \"y\" (b));\n+  return result;\n+}\n+\n+static __inline __m64\n+_mm_avg4_pu8 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wavg4 ((__v8qi)a, (__v8qi)b);\n+}\n+\n+static __inline __m64\n+_mm_avg4r_pu8 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wavg4r ((__v8qi)a, (__v8qi)b);\n+}\n+\n+static __inline __m64\n+_mm_maddx_pi16 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wmaddsx ((__v4hi)a, (__v4hi)b);\n+}\n+\n+static __inline __m64\n+_mm_maddx_pu16 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wmaddux ((__v4hi)a, (__v4hi)b);\n+}\n+\n+static __inline __m64\n+_mm_msub_pi16 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wmaddsn ((__v4hi)a, (__v4hi)b);\n+}\n+\n+static __inline __m64\n+_mm_msub_pu16 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wmaddun ((__v4hi)a, (__v4hi)b);\n+}\n+\n+static __inline __m64\n+_mm_mulhi_pi32 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wmulwsm ((__v2si)a, (__v2si)b);\n+}\n+\n+static __inline __m64\n+_mm_mulhi_pu32 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wmulwum ((__v2si)a, (__v2si)b);\n+}\n+\n+static __inline __m64\n+_mm_mulhir_pi16 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wmulsmr ((__v4hi)a, (__v4hi)b);\n+}\n+\n+static __inline __m64\n+_mm_mulhir_pi32 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wmulwsmr ((__v2si)a, (__v2si)b);\n+}\n+\n+static __inline __m64\n+_mm_mulhir_pu16 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wmulumr ((__v4hi)a, (__v4hi)b);\n+}\n+\n+static __inline __m64\n+_mm_mulhir_pu32 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wmulwumr ((__v2si)a, (__v2si)b);\n+}\n+\n+static __inline __m64\n+_mm_mullo_pi32 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wmulwl ((__v2si)a, (__v2si)b);\n+}\n+\n+static __inline __m64\n+_mm_qmulm_pi16 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wqmulm ((__v4hi)a, (__v4hi)b);\n+}\n+\n+static __inline __m64\n+_mm_qmulm_pi32 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wqmulwm ((__v2si)a, (__v2si)b);\n+}\n+\n+static __inline __m64\n+_mm_qmulmr_pi16 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wqmulmr ((__v4hi)a, (__v4hi)b);\n+}\n+\n+static __inline __m64\n+_mm_qmulmr_pi32 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wqmulwmr ((__v2si)a, (__v2si)b);\n+}\n+\n+static __inline __m64\n+_mm_subaddhx_pi16 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_wsubaddhx ((__v4hi)a, (__v4hi)b);\n+}\n+\n+static __inline __m64\n+_mm_addbhusl_pu8 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_waddbhusl ((__v4hi)a, (__v8qi)b);\n+}\n+\n+static __inline __m64\n+_mm_addbhusm_pu8 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_waddbhusm ((__v4hi)a, (__v8qi)b);\n+}\n+\n+#define _mm_qmiabb_pi32(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wqmiabb ((__v2si)_acc, (__v4hi)_m1, (__v4hi)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_qmiabbn_pi32(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wqmiabbn ((__v2si)_acc, (__v4hi)_m1, (__v4hi)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_qmiabt_pi32(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wqmiabt ((__v2si)_acc, (__v4hi)_m1, (__v4hi)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_qmiabtn_pi32(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc=acc;\\\n+   __m64 _m1=m1;\\\n+   __m64 _m2=m2;\\\n+   _acc = (__m64) __builtin_arm_wqmiabtn ((__v2si)_acc, (__v4hi)_m1, (__v4hi)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_qmiatb_pi32(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wqmiatb ((__v2si)_acc, (__v4hi)_m1, (__v4hi)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_qmiatbn_pi32(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wqmiatbn ((__v2si)_acc, (__v4hi)_m1, (__v4hi)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_qmiatt_pi32(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wqmiatt ((__v2si)_acc, (__v4hi)_m1, (__v4hi)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_qmiattn_pi32(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wqmiattn ((__v2si)_acc, (__v4hi)_m1, (__v4hi)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_wmiabb_si64(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wmiabb (_acc, (__v4hi)_m1, (__v4hi)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_wmiabbn_si64(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wmiabbn (_acc, (__v4hi)_m1, (__v4hi)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_wmiabt_si64(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wmiabt (_acc, (__v4hi)_m1, (__v4hi)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_wmiabtn_si64(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wmiabtn (_acc, (__v4hi)_m1, (__v4hi)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_wmiatb_si64(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wmiatb (_acc, (__v4hi)_m1, (__v4hi)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_wmiatbn_si64(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wmiatbn (_acc, (__v4hi)_m1, (__v4hi)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_wmiatt_si64(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wmiatt (_acc, (__v4hi)_m1, (__v4hi)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_wmiattn_si64(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wmiattn (_acc, (__v4hi)_m1, (__v4hi)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_wmiawbb_si64(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wmiawbb (_acc, (__v2si)_m1, (__v2si)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_wmiawbbn_si64(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wmiawbbn (_acc, (__v2si)_m1, (__v2si)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_wmiawbt_si64(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wmiawbt (_acc, (__v2si)_m1, (__v2si)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_wmiawbtn_si64(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wmiawbtn (_acc, (__v2si)_m1, (__v2si)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_wmiawtb_si64(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wmiawtb (_acc, (__v2si)_m1, (__v2si)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_wmiawtbn_si64(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wmiawtbn (_acc, (__v2si)_m1, (__v2si)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_wmiawtt_si64(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wmiawtt (_acc, (__v2si)_m1, (__v2si)_m2);\\\n+   _acc;\\\n+   })\n+\n+#define _mm_wmiawttn_si64(acc, m1, m2) \\\n+  ({\\\n+   __m64 _acc = acc;\\\n+   __m64 _m1 = m1;\\\n+   __m64 _m2 = m2;\\\n+   _acc = (__m64) __builtin_arm_wmiawttn (_acc, (__v2si)_m1, (__v2si)_m2);\\\n+   _acc;\\\n+   })\n+\n+/* The third arguments should be an immediate.  */\n+#define _mm_merge_si64(a, b, n) \\\n+  ({\\\n+   __m64 result;\\\n+   result = (__m64) __builtin_arm_wmerge ((__m64) (a), (__m64) (b), (n));\\\n+   result;\\\n+   })\n+#endif  /* __IWMMXT2__ */\n+\n+static __inline __m64\n+_mm_alignr0_si64 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_walignr0 ((__v8qi) a, (__v8qi) b);\n+}\n+\n+static __inline __m64\n+_mm_alignr1_si64 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_walignr1 ((__v8qi) a, (__v8qi) b);\n+}\n+\n+static __inline __m64\n+_mm_alignr2_si64 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_walignr2 ((__v8qi) a, (__v8qi) b);\n+}\n+\n+static __inline __m64\n+_mm_alignr3_si64 (__m64 a, __m64 b)\n+{\n+  return (__m64) __builtin_arm_walignr3 ((__v8qi) a, (__v8qi) b);\n+}\n+\n+static __inline void\n+_mm_tandcb ()\n+{\n+  __asm __volatile (\"tandcb r15\");\n+}\n+\n+static __inline void\n+_mm_tandch ()\n+{\n+  __asm __volatile (\"tandch r15\");\n+}\n+\n+static __inline void\n+_mm_tandcw ()\n+{\n+  __asm __volatile (\"tandcw r15\");\n+}\n+\n+#define _mm_textrcb(n) \\\n+  ({\\\n+   __asm__ __volatile__ (\\\n+     \"textrcb r15, %0\" : : \"i\" (n));\\\n+   })\n+\n+#define _mm_textrch(n) \\\n+  ({\\\n+   __asm__ __volatile__ (\\\n+     \"textrch r15, %0\" : : \"i\" (n));\\\n+   })\n+\n+#define _mm_textrcw(n) \\\n+  ({\\\n+   __asm__ __volatile__ (\\\n+     \"textrcw r15, %0\" : : \"i\" (n));\\\n+   })\n+\n+static __inline void\n+_mm_torcb ()\n+{\n+  __asm __volatile (\"torcb r15\");\n+}\n+\n+static __inline void\n+_mm_torch ()\n+{\n+  __asm __volatile (\"torch r15\");\n+}\n+\n+static __inline void\n+_mm_torcw ()\n+{\n+  __asm __volatile (\"torcw r15\");\n+}\n+\n+#ifdef __IWMMXT2__\n+static __inline void\n+_mm_torvscb ()\n+{\n+  __asm __volatile (\"torvscb r15\");\n+}\n+\n+static __inline void\n+_mm_torvsch ()\n+{\n+  __asm __volatile (\"torvsch r15\");\n+}\n+\n+static __inline void\n+_mm_torvscw ()\n+{\n+  __asm __volatile (\"torvscw r15\");\n+}\n+#endif\n+\n+static __inline __m64\n+_mm_tbcst_pi8 (int value)\n+{\n+  return (__m64) __builtin_arm_tbcstb ((signed char) value);\n+}\n+\n+static __inline __m64\n+_mm_tbcst_pi16 (int value)\n+{\n+  return (__m64) __builtin_arm_tbcsth ((short) value);\n+}\n+\n static __inline __m64\n-_m_from_int (int __a)\n+_mm_tbcst_pi32 (int value)\n {\n-  return (__m64)__a;\n+  return (__m64) __builtin_arm_tbcstw (value);\n }\n \n #define _m_empty _mm_empty\n@@ -1257,5 +1826,11 @@ _m_from_int (int __a)\n #define _m_paligniq _mm_align_si64\n #define _m_cvt_si2pi _mm_cvtsi64_m64\n #define _m_cvt_pi2si _mm_cvtm64_si64\n+#define _m_from_int _mm_cvtsi32_si64\n+#define _m_to_int _mm_cvtsi64_si32\n \n+#if defined __cplusplus\n+}; /* End \"C\" */\n+#endif /* __cplusplus */\n+#endif /* __IWMMXT__ */\n #endif /* _MMINTRIN_H_INCLUDED */"}, {"sha": "67c7a1e30db2ee01764a40182f7284912e78b160", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=8fd0351502e37a0b3b1a2a4c088477f99cd9b314", "patch": "@@ -1,5 +1,5 @@\n ;; Predicate definitions for ARM and Thumb\n-;; Copyright (C) 2004, 2007, 2008, 2010 Free Software Foundation, Inc.\n+;; Copyright (C) 2004, 2007, 2008, 2010, 2012 Free Software Foundation, Inc.\n ;; Contributed by ARM Ltd.\n \n ;; This file is part of GCC.\n@@ -493,6 +493,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"((unsigned HOST_WIDE_INT) INTVAL (op)) < 64\")))\n \n+;; iWMMXt predicates\n+\n+(define_predicate \"imm_or_reg_operand\"\n+  (ior (match_operand 0 \"immediate_operand\")\n+       (match_operand 0 \"register_operand\")))\n \n ;; Neon predicates\n "}, {"sha": "a5664a9753e8d2d3114fd37bfe1a0409a93bdec8", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd0351502e37a0b3b1a2a4c088477f99cd9b314/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=8fd0351502e37a0b3b1a2a4c088477f99cd9b314", "patch": "@@ -1,6 +1,6 @@\n # Rules common to all arm targets\n #\n-# Copyright (C) 2004, 2005, 2007, 2008, 2009, 2010, 2011\n+# Copyright (C) 2004, 2005, 2007, 2008, 2009, 2010, 2011, 2012\n # Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n@@ -49,7 +49,9 @@ MD_INCLUDES=\t$(srcdir)/config/arm/arm1020e.md \\\n \t\t$(srcdir)/config/arm/fpa.md \\\n \t\t$(srcdir)/config/arm/iterators.md \\\n \t\t$(srcdir)/config/arm/iwmmxt.md \\\n+\t\t$(srcdir)/config/arm/iwmmxt2.md \\\n \t\t$(srcdir)/config/arm/ldmstm.md \\\n+\t\t$(srcdir)/config/arm/marvell-f-iwmmxt.md \\\n \t\t$(srcdir)/config/arm/neon.md \\\n \t\t$(srcdir)/config/arm/predicates.md \\\n \t\t$(srcdir)/config/arm/sync.md \\"}]}