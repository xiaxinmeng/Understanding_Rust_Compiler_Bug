{"sha": "1ee3b380dfb479b335f3b50039ce26abcbffe59a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVlM2IzODBkZmI0NzliMzM1ZjNiNTAwMzljZTI2YWJjYmZmZTU5YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-25T17:18:51Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-28T10:56:50Z"}, "message": "forwprop: Tweak choice of VEC_PERM_EXPR filler [PR92822]\n\nFor the 2s failures in the PR, we have a V4SF VEC_PERM_EXPR in\nwhich the first two elements are duplicates of one element and\nthe other two are don't-care:\n\n    v4sf_b = VEC_PERM_EXPR <v4sf_a, v4sf_a, { 1, 1, ?, ? }>;\n\nThe heuristic was to extend this with a blend:\n\n    v4sf_b = VEC_PERM_EXPR <v4sf_a, v4sf_a, { 1, 1, 2, 3 }>;\n\nbut it seems better to extend a partial duplicate to a full duplicate:\n\n    v4sf_b = VEC_PERM_EXPR <v4sf_a, v4sf_a, { 1, 1, 1, 1 }>;\n\nObviously this is still just a heuristic though.\n\nI wondered whether to restrict this to two elements or more\nbut couldn't find any examples in which it made a difference.\nEither way should be fine for the purposes of fixing this PR.\n\n2020-01-28  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR tree-optimization/92822\n\t* tree-ssa-forwprop.c (simplify_vector_constructor): When filling\n\tout the don't-care elements of a vector whose significant elements\n\tare duplicates, make the don't-care elements duplicates too.", "tree": {"sha": "dfaa126fdbc1ce9d2c920920e45dfe3409f57ebe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfaa126fdbc1ce9d2c920920e45dfe3409f57ebe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ee3b380dfb479b335f3b50039ce26abcbffe59a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ee3b380dfb479b335f3b50039ce26abcbffe59a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ee3b380dfb479b335f3b50039ce26abcbffe59a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ee3b380dfb479b335f3b50039ce26abcbffe59a/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cedf5d8e23c862db147e71d5767ca57e6b4f433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cedf5d8e23c862db147e71d5767ca57e6b4f433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cedf5d8e23c862db147e71d5767ca57e6b4f433"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "8f5ec7086fc33cecfa958f6e296727b1e379d049", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ee3b380dfb479b335f3b50039ce26abcbffe59a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ee3b380dfb479b335f3b50039ce26abcbffe59a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ee3b380dfb479b335f3b50039ce26abcbffe59a", "patch": "@@ -1,3 +1,10 @@\n+2020-01-28  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/92822\n+\t* tree-ssa-forwprop.c (simplify_vector_constructor): When filling\n+\tout the don't-care elements of a vector whose significant elements\n+\tare duplicates, make the don't-care elements duplicates too.\n+\n 2020-01-28  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/93434"}, {"sha": "5203891950a435fa251a2e0ea68db6c0da79a56e", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ee3b380dfb479b335f3b50039ce26abcbffe59a/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ee3b380dfb479b335f3b50039ce26abcbffe59a/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=1ee3b380dfb479b335f3b50039ce26abcbffe59a", "patch": "@@ -2455,16 +2455,26 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t it and its source indexes to make the permutation supported.\n \t For now it mimics a blend.  */\n       vec_perm_builder sel (refnelts, refnelts, 1);\n+      bool all_same_p = true;\n       for (i = 0; i < elts.length (); ++i)\n-\tsel.quick_push (elts[i].second + elts[i].first * refnelts);\n+\t{\n+\t  sel.quick_push (elts[i].second + elts[i].first * refnelts);\n+\t  all_same_p &= known_eq (sel[i], sel[0]);\n+\t}\n       /* And fill the tail with \"something\".  It's really don't care,\n          and ideally we'd allow VEC_PERM to have a smaller destination\n-\t vector.  As heuristic try to preserve a uniform orig[0] which\n-\t facilitates later pattern-matching VEC_PERM_EXPR to a\n-\t BIT_INSERT_EXPR.  */\n+\t vector.  As a heuristic:\n+\n+\t (a) if what we have so far duplicates a single element, make the\n+\t     tail do the same\n+\n+\t (b) otherwise preserve a uniform orig[0].  This facilitates\n+\t     later pattern-matching of VEC_PERM_EXPR to a BIT_INSERT_EXPR.  */\n       for (; i < refnelts; ++i)\n-\tsel.quick_push ((elts[0].second == 0 && elts[0].first == 0\n-\t\t\t ? 0 : refnelts) + i);\n+\tsel.quick_push (all_same_p\n+\t\t\t? sel[0]\n+\t\t\t: (elts[0].second == 0 && elts[0].first == 0\n+\t\t\t   ? 0 : refnelts) + i);\n       vec_perm_indices indices (sel, orig[1] ? 2 : 1, refnelts);\n       if (!can_vec_perm_const_p (TYPE_MODE (perm_type), indices))\n \treturn false;"}]}