{"sha": "4888ec5d53eb1207f199f6dd6c152abb61ec9258", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg4OGVjNWQ1M2ViMTIwN2YxOTlmNmRkNmMxNTJhYmI2MWVjOTI1OA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2003-01-22T16:56:45Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2003-01-22T16:56:45Z"}, "message": "s390-protos.h (preferred_la_operand_p): Remove second parameter.\n\n\t* config/s390/s390-protos.h (preferred_la_operand_p):\n\tRemove second parameter.\n\t* config/s390/s390.c (preferred_la_operand_p): Likewise.\n\t* config/s390/s390.h (FRAME_REGNO_P, FRAME_REG_P): New macros.\n\t(HARD_REGNO_MODE_OK): Use FRAME_REGNO_P.\n\t* config/s390/s390.md (\"*la_cc_64\", \"*la_cc_31\", splitters): Remove.\n\tAdd peepholes to transform ADD to LOAD ADDRESS.\n\nFrom-SVN: r61594", "tree": {"sha": "108ce3af63a4ea68163385e7c751bbb0bb623c4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/108ce3af63a4ea68163385e7c751bbb0bb623c4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4888ec5d53eb1207f199f6dd6c152abb61ec9258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4888ec5d53eb1207f199f6dd6c152abb61ec9258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4888ec5d53eb1207f199f6dd6c152abb61ec9258", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4888ec5d53eb1207f199f6dd6c152abb61ec9258/comments", "author": null, "committer": null, "parents": [{"sha": "e66868131bdd695a33e058a00ce1375bc04a1f94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66868131bdd695a33e058a00ce1375bc04a1f94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e66868131bdd695a33e058a00ce1375bc04a1f94"}], "stats": {"total": 118, "additions": 72, "deletions": 46}, "files": [{"sha": "65ff19c499d86e1f0ce51bf3299ee4aaa9742e41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4888ec5d53eb1207f199f6dd6c152abb61ec9258/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4888ec5d53eb1207f199f6dd6c152abb61ec9258/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4888ec5d53eb1207f199f6dd6c152abb61ec9258", "patch": "@@ -1,3 +1,13 @@\n+2003-01-22  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390-protos.h (preferred_la_operand_p):\n+\tRemove second parameter.\n+\t* config/s390/s390.c (preferred_la_operand_p): Likewise.\n+\t* config/s390/s390.h (FRAME_REGNO_P, FRAME_REG_P): New macros.\n+\t(HARD_REGNO_MODE_OK): Use FRAME_REGNO_P.\n+\t* config/s390/s390.md (\"*la_cc_64\", \"*la_cc_31\", splitters): Remove.\n+\tAdd peepholes to transform ADD to LOAD ADDRESS.\n+\n 2003-01-22  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.c (arm_address_register_rtx_p): New function."}, {"sha": "0784a16b39fd7c5d0aa22c36f5aa91f0cd7ef10c", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4888ec5d53eb1207f199f6dd6c152abb61ec9258/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4888ec5d53eb1207f199f6dd6c152abb61ec9258/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=4888ec5d53eb1207f199f6dd6c152abb61ec9258", "patch": "@@ -49,7 +49,7 @@ extern enum machine_mode s390_tm_ccmode PARAMS ((rtx, rtx, int));\n extern enum machine_mode s390_select_ccmode PARAMS ((enum rtx_code, rtx, rtx));\n extern int symbolic_reference_mentioned_p PARAMS ((rtx));\n extern int legitimate_la_operand_p PARAMS ((rtx));\n-extern int preferred_la_operand_p PARAMS ((rtx, int));\n+extern int preferred_la_operand_p PARAMS ((rtx));\n extern int legitimate_pic_operand_p PARAMS ((rtx));\n extern int legitimate_constant_p PARAMS ((rtx));\n extern int legitimate_reload_constant_p PARAMS ((rtx));"}, {"sha": "8bea2edcd9d1715d45bc0a1f560750ef0c4c140f", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4888ec5d53eb1207f199f6dd6c152abb61ec9258/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4888ec5d53eb1207f199f6dd6c152abb61ec9258/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=4888ec5d53eb1207f199f6dd6c152abb61ec9258", "patch": "@@ -1875,14 +1875,11 @@ legitimate_la_operand_p (op)\n }\n \n /* Return 1 if OP is a valid operand for the LA instruction,\n-   and we prefer to use LA over addition to compute it.\n-   If STRICT is true, only accept operands that will never\n-   change to something we cannot recognize as preferred.  */\n+   and we prefer to use LA over addition to compute it.  */\n    \n int\n-preferred_la_operand_p (op, strict)\n+preferred_la_operand_p (op)\n      register rtx op;\n-     int strict;\n {\n   struct s390_address addr;\n   if (!s390_decompose_address (op, &addr))\n@@ -1894,10 +1891,9 @@ preferred_la_operand_p (op, strict)\n   if (addr.pointer)\n     return TRUE;\n \n-  if (!strict) \n-    if ((addr.base && REG_P (addr.base) && REG_POINTER (addr.base))\n-        || (addr.indx && REG_P (addr.indx) && REG_POINTER (addr.indx)))\n-      return TRUE;\n+  if ((addr.base && REG_P (addr.base) && REG_POINTER (addr.base))\n+      || (addr.indx && REG_P (addr.indx) && REG_POINTER (addr.indx)))\n+    return TRUE;\n \n   return FALSE;\n }"}, {"sha": "51e1940395cd9169d96c0d3a6b0472a07cc7878a", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4888ec5d53eb1207f199f6dd6c152abb61ec9258/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4888ec5d53eb1207f199f6dd6c152abb61ec9258/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=4888ec5d53eb1207f199f6dd6c152abb61ec9258", "patch": "@@ -235,11 +235,13 @@ if (INTEGRAL_MODE_P (MODE) &&\t        \t    \t\\\n #define ADDR_REGNO_P(N)\t\t((N) >= 1 && (N) < 16)\n #define FP_REGNO_P(N)\t\t((N) >= 16 && (N) < (TARGET_IEEE_FLOAT? 32 : 20))\n #define CC_REGNO_P(N)\t\t((N) == 33)\n+#define FRAME_REGNO_P(N)\t((N) == 32 || (N) == 34)\n \n #define GENERAL_REG_P(X)\t(REG_P (X) && GENERAL_REGNO_P (REGNO (X)))\n #define ADDR_REG_P(X)\t\t(REG_P (X) && ADDR_REGNO_P (REGNO (X)))\n #define FP_REG_P(X)\t\t(REG_P (X) && FP_REGNO_P (REGNO (X)))\n #define CC_REG_P(X)\t\t(REG_P (X) && CC_REGNO_P (REGNO (X)))\n+#define FRAME_REG_P(X)\t\t(REG_P (X) && FRAME_REGNO_P (REGNO (X)))\n \n #define BASE_REGISTER 13\n #define RETURN_REGNUM 14\n@@ -354,6 +356,8 @@ do\t\t\t\t\t\t\t\t\\\n     (HARD_REGNO_NREGS(REGNO, MODE) == 1 || !((REGNO) & 1)) :        \\\n    CC_REGNO_P(REGNO)?                                               \\\n      GET_MODE_CLASS (MODE) == MODE_CC :                             \\\n+   FRAME_REGNO_P(REGNO)?                                            \\\n+     (MODE) == Pmode :                                              \\\n    0)\n \n #define MODES_TIEABLE_P(MODE1, MODE2)\t\t\\"}, {"sha": "8f72baffad87c78a46d2f4769a53765a0582ce60", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 52, "deletions": 36, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4888ec5d53eb1207f199f6dd6c152abb61ec9258/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4888ec5d53eb1207f199f6dd6c152abb61ec9258/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=4888ec5d53eb1207f199f6dd6c152abb61ec9258", "patch": "@@ -2902,24 +2902,6 @@\n ; adddi3 instruction pattern(s).\n ;\n \n-(define_insn \"*la_64_cc\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (match_operand:QI 1 \"address_operand\"  \"p\"))\n-   (clobber (reg:CC 33))]\n-  \"TARGET_64BIT\n-   && preferred_la_operand_p (operands[1], 1)\"\n-  \"#\"\n-  [(set_attr \"op_type\"  \"RX\")\n-   (set_attr \"type\"     \"la\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (match_operand:QI 1 \"address_operand\" \"\"))\n-   (clobber (reg:CC 33))]\n-  \"TARGET_64BIT && reload_completed\n-   && preferred_la_operand_p (operands[1], 0)\"\n-  [(set (match_dup 0) (match_dup 1))])\n-\n (define_insn \"*adddi3_sign\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n         (plus:DI (sign_extend:DI (match_operand:SI 2 \"general_operand\" \"d,m\"))\n@@ -3079,6 +3061,32 @@\n   [(set_attr \"op_type\" \"RX\")\n    (set_attr \"type\"    \"la\")])\n \n+(define_peephole2\n+  [(parallel\n+    [(set (match_operand:DI 0 \"register_operand\" \"\")\n+          (match_operand:QI 1 \"address_operand\" \"\"))\n+     (clobber (reg:CC 33))])]\n+  \"TARGET_64BIT\n+   && strict_memory_address_p (VOIDmode, operands[1])\n+   && preferred_la_operand_p (operands[1])\"\n+  [(set (match_dup 0) (match_dup 1))]\n+  \"\")\n+\n+(define_peephole2\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+        (match_operand:DI 1 \"register_operand\" \"\"))\n+   (parallel\n+    [(set (match_dup 0)\n+          (plus:DI (match_dup 0)\n+                   (match_operand:DI 2 \"nonmemory_operand\" \"\")))\n+     (clobber (reg:CC 33))])]\n+  \"TARGET_64BIT\n+   && !reg_overlap_mentioned_p (operands[0], operands[2])\n+   && strict_memory_address_p (VOIDmode, gen_rtx_PLUS (DImode, operands[1], operands[2]))\n+   && preferred_la_operand_p (gen_rtx_PLUS (DImode, operands[1], operands[2]))\"\n+  [(set (match_dup 0) (plus:DI (match_dup 1) (match_dup 2)))]\n+  \"\")\n+\n (define_expand \"reload_indi\"\n   [(parallel [(match_operand:DI 0 \"register_operand\" \"=a\")\n               (match_operand:DI 1 \"s390_plus_operand\" \"\")\n@@ -3095,24 +3103,6 @@\n ; addsi3 instruction pattern(s).\n ;\n \n-(define_insn \"*la_31_cc\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (match_operand:QI 1 \"address_operand\"  \"p\"))\n-   (clobber (reg:CC 33))]\n-  \"!TARGET_64BIT\n-   && preferred_la_operand_p (operands[1], 1)\"\n-  \"#\"\n-  [(set_attr \"op_type\"  \"RX\")\n-   (set_attr \"type\"     \"la\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (match_operand:QI 1 \"address_operand\" \"\"))\n-   (clobber (reg:CC 33))]\n-  \"!TARGET_64BIT && reload_completed\n-   && preferred_la_operand_p (operands[1], 0)\"\n-  [(set (match_dup 0) (match_dup 1))])\n-\n (define_insn \"*addsi3_imm_cc\"\n   [(set (reg 33) \n         (compare (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n@@ -3249,6 +3239,32 @@\n   [(set_attr \"op_type\"  \"RX\")\n    (set_attr \"type\"     \"la\")])\n \n+(define_peephole2\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\" \"\")\n+          (match_operand:QI 1 \"address_operand\" \"\"))\n+     (clobber (reg:CC 33))])]\n+  \"!TARGET_64BIT\n+   && strict_memory_address_p (VOIDmode, operands[1])\n+   && preferred_la_operand_p (operands[1])\"\n+  [(set (match_dup 0) (match_dup 1))]\n+  \"\")\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+        (match_operand:SI 1 \"register_operand\" \"\"))\n+   (parallel\n+    [(set (match_dup 0)\n+          (plus:SI (match_dup 0)\n+                   (match_operand:SI 2 \"nonmemory_operand\" \"\")))\n+     (clobber (reg:CC 33))])]\n+  \"!TARGET_64BIT\n+   && !reg_overlap_mentioned_p (operands[0], operands[2])\n+   && strict_memory_address_p (VOIDmode, gen_rtx_PLUS (SImode, operands[1], operands[2]))\n+   && preferred_la_operand_p (gen_rtx_PLUS (SImode, operands[1], operands[2]))\"\n+  [(set (match_dup 0) (plus:DI (match_dup 1) (match_dup 2)))]\n+  \"\")\n+\n (define_insn \"*la_31_and\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (and:SI (match_operand:QI 1 \"address_operand\" \"p\")"}]}