{"sha": "7d8930a046c5d5c80f990eef73c278b4c124b6f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q4OTMwYTA0NmM1ZDVjODBmOTkwZWVmNzNjMjc4YjRjMTI0YjZmNA==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2010-05-06T06:42:51Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2010-05-06T06:42:51Z"}, "message": "re PR middle-end/43901 (FAIL: gcc.c-torture/compile/pr42196-2.c)\n\n\n\tPR tree-optimization/43901\n\t* tree-vect-stmts.c (vectorizable_call): Assert that vector\n\ttype is not NULL if it's transformation phase, and return\n\tFALSE if it's analysis.\n\t(vectorizable_conversion, vectorizable_operation, \n\tvectorizable_type_demotion, vectorizable_type_promotion):\n\tLikewise.\n\nFrom-SVN: r159095", "tree": {"sha": "eebabaf3b382d7f69d7df3097aee582981e9c25b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eebabaf3b382d7f69d7df3097aee582981e9c25b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d8930a046c5d5c80f990eef73c278b4c124b6f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8930a046c5d5c80f990eef73c278b4c124b6f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d8930a046c5d5c80f990eef73c278b4c124b6f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8930a046c5d5c80f990eef73c278b4c124b6f4/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9876df2e7f515f7fcf386baea4de735b5dd0903b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9876df2e7f515f7fcf386baea4de735b5dd0903b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9876df2e7f515f7fcf386baea4de735b5dd0903b"}], "stats": {"total": 71, "additions": 68, "deletions": 3}, "files": [{"sha": "cfc162937bae6d2554a9b0b5ee12d8fcae3055b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8930a046c5d5c80f990eef73c278b4c124b6f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8930a046c5d5c80f990eef73c278b4c124b6f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d8930a046c5d5c80f990eef73c278b4c124b6f4", "patch": "@@ -1,3 +1,13 @@\n+2010-05-06  Ira Rosen  <irar@il.ibm.com>\n+\n+\tPR tree-optimization/43901\n+\t* tree-vect-stmts.c (vectorizable_call): Assert that vector\n+\ttype is not NULL if it's transformation phase, and return\n+\tFALSE if it's analysis.\n+\t(vectorizable_conversion, vectorizable_operation, \n+\tvectorizable_type_demotion, vectorizable_type_promotion):\n+\tLikewise.\n+\n 2010-05-05  Andrew Pinski  <andrew.pinski@caviumnetworks.com>\n \n \t* config/mips/mips.h (TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P):"}, {"sha": "a2c2e203fe7d7c1e7ffe6a9df8522a27e81bf73e", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 58, "deletions": 3, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8930a046c5d5c80f990eef73c278b4c124b6f4/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8930a046c5d5c80f990eef73c278b4c124b6f4/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=7d8930a046c5d5c80f990eef73c278b4c124b6f4", "patch": "@@ -1304,6 +1304,18 @@ vectorizable_call (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt)\n      the same size as the output vector type.  */\n   if (!vectype_in)\n     vectype_in = get_same_sized_vectype (rhs_type, vectype_out);\n+  if (vec_stmt)\n+    gcc_assert (vectype_in);\n+  if (!vectype_in)\n+    {\n+      if (vect_print_dump_info (REPORT_DETAILS))\n+        {\n+          fprintf (vect_dump, \"no vectype for scalar type \");\n+          print_generic_expr (vect_dump, rhs_type, TDF_SLIM);\n+        }\n+\n+      return false;\n+    }\n \n   /* FORNOW */\n   nunits_in = TYPE_VECTOR_SUBPARTS (vectype_in);\n@@ -1606,6 +1618,18 @@ vectorizable_conversion (gimple stmt, gimple_stmt_iterator *gsi,\n      the same size as the output vector type.  */\n   if (!vectype_in)\n     vectype_in = get_same_sized_vectype (rhs_type, vectype_out);\n+  if (vec_stmt)\n+    gcc_assert (vectype_in);\n+  if (!vectype_in)\n+    {\n+      if (vect_print_dump_info (REPORT_DETAILS))\n+        {\n+          fprintf (vect_dump, \"no vectype for scalar type \");\n+          print_generic_expr (vect_dump, rhs_type, TDF_SLIM);\n+        }\n+\n+      return false;\n+    }\n \n   /* FORNOW */\n   nunits_in = TYPE_VECTOR_SUBPARTS (vectype_in);\n@@ -1986,7 +2010,18 @@ vectorizable_operation (gimple stmt, gimple_stmt_iterator *gsi,\n      the same size as the output vector type.  */\n   if (!vectype)\n     vectype = get_same_sized_vectype (TREE_TYPE (op0), vectype_out);\n-  gcc_assert (vectype);\n+  if (vec_stmt)\n+    gcc_assert (vectype);\n+  if (!vectype)\n+    {\n+      if (vect_print_dump_info (REPORT_DETAILS))\n+        {\n+          fprintf (vect_dump, \"no vectype for scalar type \");\n+          print_generic_expr (vect_dump, TREE_TYPE (op0), TDF_SLIM);\n+        }\n+\n+      return false;\n+    }\n \n   nunits_out = TYPE_VECTOR_SUBPARTS (vectype_out);\n   nunits_in = TYPE_VECTOR_SUBPARTS (vectype);\n@@ -2449,8 +2484,18 @@ vectorizable_type_demotion (gimple stmt, gimple_stmt_iterator *gsi,\n      same size as the output vector type if possible.  */\n   if (!vectype_in)\n     vectype_in = get_same_sized_vectype (TREE_TYPE (op0), vectype_out);\n+  if (vec_stmt)\n+    gcc_assert (vectype_in);\n   if (!vectype_in)\n-    return false;\n+    {\n+      if (vect_print_dump_info (REPORT_DETAILS))\n+        {\n+          fprintf (vect_dump, \"no vectype for scalar type \");\n+          print_generic_expr (vect_dump, TREE_TYPE (op0), TDF_SLIM);\n+        }\n+\n+      return false;\n+    }\n \n   nunits_in = TYPE_VECTOR_SUBPARTS (vectype_in);\n   nunits_out = TYPE_VECTOR_SUBPARTS (vectype_out);\n@@ -2718,8 +2763,18 @@ vectorizable_type_promotion (gimple stmt, gimple_stmt_iterator *gsi,\n      the same size as the output vector type.  */\n   if (!vectype_in)\n     vectype_in = get_same_sized_vectype (TREE_TYPE (op0), vectype_out);\n+  if (vec_stmt)\n+    gcc_assert (vectype_in);\n   if (!vectype_in)\n-    return false;\n+    {\n+      if (vect_print_dump_info (REPORT_DETAILS))\n+        {\n+          fprintf (vect_dump, \"no vectype for scalar type \");\n+          print_generic_expr (vect_dump, TREE_TYPE (op0), TDF_SLIM);\n+        }\n+\n+      return false;\n+    }\n \n   nunits_in = TYPE_VECTOR_SUBPARTS (vectype_in);\n   nunits_out = TYPE_VECTOR_SUBPARTS (vectype_out);"}]}