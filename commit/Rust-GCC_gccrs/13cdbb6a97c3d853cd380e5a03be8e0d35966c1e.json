{"sha": "13cdbb6a97c3d853cd380e5a03be8e0d35966c1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNjZGJiNmE5N2MzZDg1M2NkMzgwZTVhMDNiZThlMGQzNTk2NmMxZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-08-01T15:02:24Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-08-01T15:02:24Z"}, "message": "Cap frequency of recursive calls by 90%\n\n\t* predict.c (estimate_bb_frequencies): Cap recursive calls by 90%.", "tree": {"sha": "55d99999374dc0f56f0da39c15f51d626179f0a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55d99999374dc0f56f0da39c15f51d626179f0a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13cdbb6a97c3d853cd380e5a03be8e0d35966c1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13cdbb6a97c3d853cd380e5a03be8e0d35966c1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13cdbb6a97c3d853cd380e5a03be8e0d35966c1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13cdbb6a97c3d853cd380e5a03be8e0d35966c1e/comments", "author": null, "committer": null, "parents": [{"sha": "7d599ad27b9bcf5165f87710f1abc64bbabd06ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d599ad27b9bcf5165f87710f1abc64bbabd06ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d599ad27b9bcf5165f87710f1abc64bbabd06ae"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "0a317a7a4ac4a9701aa01d3ab9226d5573d707f1", "filename": "gcc/predict.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13cdbb6a97c3d853cd380e5a03be8e0d35966c1e/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13cdbb6a97c3d853cd380e5a03be8e0d35966c1e/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=13cdbb6a97c3d853cd380e5a03be8e0d35966c1e", "patch": "@@ -3892,7 +3892,30 @@ estimate_bb_frequencies (bool force)\n       cfun->cfg->count_max = profile_count::uninitialized ();\n       FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR_FOR_FN (cfun), NULL, next_bb)\n \t{\n-\t  sreal tmp = BLOCK_INFO (bb)->frequency * freq_max + sreal (1, -1);\n+\t  sreal tmp = BLOCK_INFO (bb)->frequency;\n+\t  if (tmp >= 1)\n+\t    {\n+\t      gimple_stmt_iterator gsi;\n+\t      tree decl;\n+\n+\t      /* Self recursive calls can not have frequency greater than 1\n+\t\t or program will never terminate.  This will result in an\n+\t\t inconsistent bb profile but it is better than greatly confusing\n+\t\t IPA cost metrics.  */\n+\t      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+\t\tif (is_gimple_call (gsi_stmt (gsi))\n+\t\t    && (decl = gimple_call_fndecl (gsi_stmt (gsi))) != NULL\n+\t\t    && recursive_call_p (current_function_decl, decl))\n+\t\t  {\n+\t\t    if (dump_file)\n+\t\t      fprintf (dump_file, \"Dropping frequency of recursive call\"\n+\t\t\t       \" in bb %i from %f\\n\", bb->index,\n+\t\t\t       tmp.to_double ());\n+\t\t    tmp = (sreal)9 / (sreal)10;\n+\t\t    break;\n+\t\t  }\n+\t    }\n+\t  tmp = tmp * freq_max + sreal (1, -1);\n \t  profile_count count = profile_count::from_gcov_type (tmp.to_int ());\t\n \n \t  /* If we have profile feedback in which this function was never"}]}