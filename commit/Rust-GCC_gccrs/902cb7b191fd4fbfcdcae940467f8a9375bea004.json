{"sha": "902cb7b191fd4fbfcdcae940467f8a9375bea004", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAyY2I3YjE5MWZkNGZiZmNkY2FlOTQwNDY3ZjhhOTM3NWJlYTAwNA==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2016-10-18T19:31:38Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2016-10-18T19:31:38Z"}, "message": "vec-all-ne-0.c: New test.\n\ngcc/testsuite/ChangeLog:\n\n2016-10-18  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/vsu/vec-all-ne-0.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-ne-1.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-ne-10.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-ne-11.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-ne-12.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-ne-13.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-ne-14.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-ne-2.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-ne-3.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-ne-4.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-ne-5.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-ne-6.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-ne-7.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-ne-8.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-ne-9.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-nez-1.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-nez-2.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-nez-3.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-nez-4.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-nez-5.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-nez-6.c: New test.\n\t* gcc.target/powerpc/vsu/vec-all-nez-7.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eq-0.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eq-1.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eq-10.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eq-11.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eq-12.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eq-13.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eq-14.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eq-2.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eq-3.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eq-4.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eq-5.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eq-6.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eq-7.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eq-8.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eq-9.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eqz-1.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eqz-2.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eqz-3.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eqz-4.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eqz-5.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eqz-6.c: New test.\n\t* gcc.target/powerpc/vsu/vec-any-eqz-7.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cmpne-0.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cmpne-1.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cmpne-2.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cmpne-3.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cmpne-4.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cmpne-5.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cmpne-6.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cmpne-8.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cmpne-9.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cmpnez-1.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cmpnez-2.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cmpnez-3.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cmpnez-4.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cmpnez-5.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cmpnez-6.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cmpnez-7.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cntlz-lsbb-0.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cntlz-lsbb-1.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cntlz-lsbb-2.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cnttz-lsbb-0.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cnttz-lsbb-1.c: New test.\n\t* gcc.target/powerpc/vsu/vec-cnttz-lsbb-2.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xl-len-0.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xl-len-1.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xl-len-10.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xl-len-11.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xl-len-12.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xl-len-13.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xl-len-2.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xl-len-3.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xl-len-4.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xl-len-5.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xl-len-6.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xl-len-7.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xl-len-8.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xl-len-9.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xlx-0.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xlx-1.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xlx-2.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xlx-3.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xlx-4.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xlx-5.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xlx-6.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xlx-7.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xrx-0.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xrx-1.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xrx-2.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xrx-3.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xrx-4.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xrx-5.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xrx-6.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xrx-7.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xst-len-0.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xst-len-1.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xst-len-10.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xst-len-11.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xst-len-12.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xst-len-13.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xst-len-2.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xst-len-3.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xst-len-4.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xst-len-5.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xst-len-6.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xst-len-7.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xst-len-8.c: New test.\n\t* gcc.target/powerpc/vsu/vec-xst-len-9.c: New test.\n\t* gcc.target/powerpc/vsu/vsu.exp: New file.\n\ngcc/ChangeLog:\n\n2016-10-18  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/altivec.h (vec_xl_len): New macro.\n\t(vec_xst_len): New macro.\n\t(vec_cmpnez): New macro.\n\t(vec_cntlz_lsbb): New macro.\n\t(vec_cnttz_lsbb): New macro.\n\t(vec_xlx): New macro.\n\t(vec_xrx): New macro.\n\t(vec_all_nez): New C++ predicate template.\n\t(vec_any_eqz): New C++ predicate template.\n\t(vec_all_ne): Revised C++ predicate template under _ARCH_PWR9\n\tconditional compilation.\n\t(vec_any_eq): Revised C++ predicate template under _ARCH_PWR9\n\tconditional compilation.\n\t(vec_all_nez): New macro.\n\t(vec_any_eqz): New macro.\n\t(vec_all_ne): Revised macro under _ARCH_PWR9 conditional\n\tcompilation.\n\t(vec_any_eq): Revised macro under _ARCH_PWR9 conditional\n\tcompilation.\n\t* config/rs6000/vector.md (VI): Moved this mode iterator\n\tdefinition from altivec.md to vector.md.\n\t(UNSPEC_NEZ_P): New value.\n\t(vector_ne_<mode>_p): New expansion for implementation of\n\tvec_all_ne and vec_any_eq built-in functions.\n\t(vector_nez_<mode>_p): New expansion for implementation of\n\tvec_all_nez and vec_any_eqz built-in functions.\n\t(vector_ne_v2di_p): New expansion for implementation of vec_all_ne\n\tand vec_any_eq built-in function.\n\t(cr6_test_for_zero): New commentary to explain this expansion.\n\t(cr6_test_for_zero_reverse): New commentary to explain this expansion.\n\t(cr6_test_for_lt): New commentary to explain this expansion.\n\t(cr6_test_for_lt_reverse): New commentary to explain this\n\texpansion.\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n\toverloaded function prototypes for vec_all_ne, vec_all_nez,\n\tvec_any_eq, vec_any_eqz, vec_cmpnez, vec_cntlz_lsbb,\n\tvec_cnttz_lsbb, vec_xl_len, vec_xst_len, vec_xlx, and vec_xrx\n\tbuilt-in functions.\n\t(altivec_resolve_overloaded_builtin): Modify the handling of\n\tALTIVEC_BUILTIN_VEC_CMPNE to use the Power9 instructions when\n\tthe compiler is configured to support TARGET_P9_VECTOR.\n\t* config/rs6000/rs6000-builtin.def (BU_ALTIVEC_P): Add commentary\n\tto explain the special processing that is given to predicate\n\tbuilt-ins introduced using this macro.\n\t(BU_ALTIVEC_OVERLOAD_P): Add commentary to alert maintainers to\n\tthe special processing given to predicate built-ins introduced\n\tusing this macro.\n\t(BU_VSX_P): Likewise.\n\t(BU_P8V_AV_P): Likewise.\n\t(BU_P9V_AV_P): Likewise.\n\t(BU_P9V_AV_X): New macro.\n\t(BU_P9V_64BIT_AV_X): New macro.\n\t(BU_P9V_VSX_3): New macro.\n\t(BU_P9V_OVERLOAD_P): New macro.\n\t(LXVL): New BU_P9V_64BIT_VSX_2.\n\t(VEXTUBLX): New BU_P9V_AV_2.\n\t(VEXTUBRX): Likewise.\n\t(VEXTUHLX): Likewise.\n\t(VEXTUHRX): Likewise.\n\t(VEXTUWLX): Likewise.\n\t(VEXTUWRX): Likewise.\n\t(STXVL): New BU_P9V_64BIT_AV_X.\n\t(VCLZLSBB): New BU_P9V_AV_1.\n\t(VCTZLSBB): Likewise.\n\t(CMPNEB): New BU_P9V_AV_2.\n\t(CMPNEH): Likewise.\n\t(CMPNEW): Likewise.\n\t(CMPNEF): Likewise.\n\t(CMPNED): Likewise.\n\t(VCMPNEB_P): New BU_P9V_AV_P.\n\t(VCMPNEH_P): Likewise.\n\t(VCMPNEW_P): Likewise.\n\t(VCMPNED_P): Likewise.\n\t(VCMPNEFP_P): Likewise.\n\t(VCMPNEDP_P): Likewise.\n\t(CMPNEZB): New BU_P9V_AV_2.\n\t(CMPNEZH): Likewise.\n\t(CMPNEZW): Likewise.\n\t(VCMPNEZB_P): New BU_P9V_AV_P.\n\t(VCMPNEZH_P): Likewise.\n\t(VCMPNEZW_P): Likewise.\n\t(LXVL): New BU_P9V_OVERLOAD_2.\n\t(STXVL): New BU_P9V_OVERLOAD_3.\n\t(VEXTULX): New BU_P9V_OVERLOAD_2.\n\t(VEXTURX): Likewise.\n\t(CMPNEZ): Likewise.\n\t(VCMPNEZ_P): New BU_P9V_OVERLOAD_P.\n\t(VCMPNE_P): Likewise.\n\t(VCLZLSBB): New BU_P9V_OVERLOAD_1.\n\t(VCTZLSBB): Likewise.\n\t* config/rs6000/rs6000.c (altivec_expand_predicate_builtin): Add\n\tcomment to explain mode used for scratch register.\n\t(altivec_expand_stxvl_builtin): New function.\n\t(altivec_expand_builtin): Add case for new constant P9V_BUILTIN_STXVL.\n\t(altivec_init_builtins): Add initialized variable\n\tvoid_ftype_v16qi_pvoid_long and use this type to define the\n\tbuilt-in function __builtin_altivec_stxvl.\n\t* config/rs6000/vsx.md (UNSPEC_LXVL): New value.\n\t(UNSPEC_STXVL): New value.\n\t(UNSPEC_VCLZLSBB): New value.\n\t(UNSPEC_VCTZLSBB): New value.\n\t(UNSPEC_VEXTUBLX): New value.\n\t(UNSPEC_VEXTUHLX): New value.\n\t(UNSPEC_VEXTUWLX): New value.\n\t(UNSPEC_VEXTUBRX): New value.\n\t(UNSPEC_VEXTUHRX): New value.\n\t(UNSPEC_VEXTUWRX): New value.\n\t(UNSPEC_VCMPNEB): New value.\n\t(UNSPEC_VCMPNEZB): New value.\n\t(UNSPEC_VCMPNEH): New value.\n\t(UNSPEC_VCMPNEZH): New value.\n\t(UNSPEC_VCMPNEW): New value.\n\t(UNSPEC_VCMPNEZW): New value.\n\t(*vsx_ne_<mode>_p): New insn for vector test all not equal with\n\tvector of integer modes.\n\t(*vsx_ne_<mode>_p): New insn for vector test all not equal with\n\tvector of float or double modes.\n\t(*vector_nez_<mode>_p): New insn for vector test all not equal or\n\tzero.\n\t(lxvl): New expand for load VSX vector with length.\n\t(*lxvl): New insn for load VSX vector with length.\n\t(stxvl): New expand for store VSX vector with length.\n\t(*stxvl): New insn for store VSX vector with length.\n\t(vcmpneb): New insn for vector of byte compare not equal.\n\t(vcmpnezb): New insn for vector of byte compare not equal or zero.\n\t(vcmpneh): New insn for vector of half word compare not equal.\n\t(vcmpnezh): New insn for vector of half word compare not equal or\n\tzero.\n\t(vcmpnew): New insn for vector of word compare not equal.\n\t(vcmpne<VSs>): New insn for vector of float or double compare not\n\tequal.\n\t(vcmpnezw): New insn for vector of word compare not equal or zero.\n\t(vclzlsbb): New insn for vector count leading zero\n\tleast-significant bits byte.\n\t(vctzlsbb): New insn for vector count trailing zero least\n\tsignficant bits byte.\n\t(vextublx): New insn for vector extract unsigned byte left\n\tindexed.\n\t(vextubrx): New insn for vector extract unsigned byte right\n\tindexed.\n\t(vextuhlx): New insn for vector extract unsigned half word left\n\tindexed.\n\t(vextuhrx): New insn for vector extract unsigned half word right\n\tindexed.\n\t(vextuwlx): New insn for vector extract unsigned word left\n\tindexed.\n\t(vextuwrx): New insn for vector extract unsigned word right\n\tindexed.\n\t* config/rs6000/rs6000.h (RS6000_BTC_CONST): Enhance comment to\n\tclarify intent of this constant.\n\t* config/rs6000/altivec.md (VI): Move this mode iterator to vsx.md.\n\t* doc/extend.texi (PowerPC Altivec Built-in Functions): Add\n\tdocumentation for vec_all_nez, vec_any_eqz, vec_cmpnez,\n\tvec_cntlz_lsbb, vec_cnttz_lsbb, vec_xl_len, vec_xst_len, vec_xlx,\n\tand vec_xrx functions.\n\nFrom-SVN: r241314", "tree": {"sha": "98cfcb2955599293e2973f60bf60e0c60c79ea9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98cfcb2955599293e2973f60bf60e0c60c79ea9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/902cb7b191fd4fbfcdcae940467f8a9375bea004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/902cb7b191fd4fbfcdcae940467f8a9375bea004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/902cb7b191fd4fbfcdcae940467f8a9375bea004", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/902cb7b191fd4fbfcdcae940467f8a9375bea004/comments", "author": null, "committer": null, "parents": [{"sha": "2a26adf1d8bb511bfea14abefc5cd538d695e51e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a26adf1d8bb511bfea14abefc5cd538d695e51e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a26adf1d8bb511bfea14abefc5cd538d695e51e"}], "stats": {"total": 3350, "additions": 3307, "deletions": 43}, "files": [{"sha": "4922809f54a5ead26adc907b584fac4cd4569b19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -1,3 +1,161 @@\n+2016-10-18  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/altivec.h (vec_xl_len): New macro.\n+\t(vec_xst_len): New macro.\n+\t(vec_cmpnez): New macro.\n+\t(vec_cntlz_lsbb): New macro.\n+\t(vec_cnttz_lsbb): New macro.\n+\t(vec_xlx): New macro.\n+\t(vec_xrx): New macro.\n+\t(vec_all_nez): New C++ predicate template.\n+\t(vec_any_eqz): New C++ predicate template.\n+\t(vec_all_ne): Revised C++ predicate template under _ARCH_PWR9\n+\tconditional compilation.\n+\t(vec_any_eq): Revised C++ predicate template under _ARCH_PWR9\n+\tconditional compilation.\n+\t(vec_all_nez): New macro.\n+\t(vec_any_eqz): New macro.\n+\t(vec_all_ne): Revised macro under _ARCH_PWR9 conditional\n+\tcompilation.\n+\t(vec_any_eq): Revised macro under _ARCH_PWR9 conditional\n+\tcompilation.\n+\t* config/rs6000/vector.md (VI): Moved this mode iterator\n+\tdefinition from altivec.md to vector.md.\n+\t(UNSPEC_NEZ_P): New value.\n+\t(vector_ne_<mode>_p): New expansion for implementation of\n+\tvec_all_ne and vec_any_eq built-in functions.\n+\t(vector_nez_<mode>_p): New expansion for implementation of\n+\tvec_all_nez and vec_any_eqz built-in functions.\n+\t(vector_ne_v2di_p): New expansion for implementation of vec_all_ne\n+\tand vec_any_eq built-in function.\n+\t(cr6_test_for_zero): New commentary to explain this expansion.\n+\t(cr6_test_for_zero_reverse): New commentary to explain this expansion.\n+\t(cr6_test_for_lt): New commentary to explain this expansion.\n+\t(cr6_test_for_lt_reverse): New commentary to explain this\n+\texpansion.\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n+\toverloaded function prototypes for vec_all_ne, vec_all_nez,\n+\tvec_any_eq, vec_any_eqz, vec_cmpnez, vec_cntlz_lsbb,\n+\tvec_cnttz_lsbb, vec_xl_len, vec_xst_len, vec_xlx, and vec_xrx\n+\tbuilt-in functions.\n+\t(altivec_resolve_overloaded_builtin): Modify the handling of\n+\tALTIVEC_BUILTIN_VEC_CMPNE to use the Power9 instructions when\n+\tthe compiler is configured to support TARGET_P9_VECTOR.\n+\t* config/rs6000/rs6000-builtin.def (BU_ALTIVEC_P): Add commentary\n+\tto explain the special processing that is given to predicate\n+\tbuilt-ins introduced using this macro.\n+\t(BU_ALTIVEC_OVERLOAD_P): Add commentary to alert maintainers to\n+\tthe special processing given to predicate built-ins introduced\n+\tusing this macro.\n+\t(BU_VSX_P): Likewise.\n+\t(BU_P8V_AV_P): Likewise.\n+\t(BU_P9V_AV_P): Likewise.\n+\t(BU_P9V_AV_X): New macro.\n+\t(BU_P9V_64BIT_AV_X): New macro.\n+\t(BU_P9V_VSX_3): New macro.\n+\t(BU_P9V_OVERLOAD_P): New macro.\n+\t(LXVL): New BU_P9V_64BIT_VSX_2.\n+\t(VEXTUBLX): New BU_P9V_AV_2.\n+\t(VEXTUBRX): Likewise.\n+\t(VEXTUHLX): Likewise.\n+\t(VEXTUHRX): Likewise.\n+\t(VEXTUWLX): Likewise.\n+\t(VEXTUWRX): Likewise.\n+\t(STXVL): New BU_P9V_64BIT_AV_X.\n+\t(VCLZLSBB): New BU_P9V_AV_1.\n+\t(VCTZLSBB): Likewise.\n+\t(CMPNEB): New BU_P9V_AV_2.\n+\t(CMPNEH): Likewise.\n+\t(CMPNEW): Likewise.\n+\t(CMPNEF): Likewise.\n+\t(CMPNED): Likewise.\n+\t(VCMPNEB_P): New BU_P9V_AV_P.\n+\t(VCMPNEH_P): Likewise.\n+\t(VCMPNEW_P): Likewise.\n+\t(VCMPNED_P): Likewise.\n+\t(VCMPNEFP_P): Likewise.\n+\t(VCMPNEDP_P): Likewise.\n+\t(CMPNEZB): New BU_P9V_AV_2.\n+\t(CMPNEZH): Likewise.\n+\t(CMPNEZW): Likewise.\n+\t(VCMPNEZB_P): New BU_P9V_AV_P.\n+\t(VCMPNEZH_P): Likewise.\n+\t(VCMPNEZW_P): Likewise.\n+\t(LXVL): New BU_P9V_OVERLOAD_2.\n+\t(STXVL): New BU_P9V_OVERLOAD_3.\n+\t(VEXTULX): New BU_P9V_OVERLOAD_2.\n+\t(VEXTURX): Likewise.\n+\t(CMPNEZ): Likewise.\n+\t(VCMPNEZ_P): New BU_P9V_OVERLOAD_P.\n+\t(VCMPNE_P): Likewise.\n+\t(VCLZLSBB): New BU_P9V_OVERLOAD_1.\n+\t(VCTZLSBB): Likewise.\n+\t* config/rs6000/rs6000.c (altivec_expand_predicate_builtin): Add\n+\tcomment to explain mode used for scratch register.\n+\t(altivec_expand_stxvl_builtin): New function.\n+\t(altivec_expand_builtin): Add case for new constant P9V_BUILTIN_STXVL.\n+\t(altivec_init_builtins): Add initialized variable\n+\tvoid_ftype_v16qi_pvoid_long and use this type to define the\n+\tbuilt-in function __builtin_altivec_stxvl.\n+\t* config/rs6000/vsx.md (UNSPEC_LXVL): New value.\n+\t(UNSPEC_STXVL): New value.\n+\t(UNSPEC_VCLZLSBB): New value.\n+\t(UNSPEC_VCTZLSBB): New value.\n+\t(UNSPEC_VEXTUBLX): New value.\n+\t(UNSPEC_VEXTUHLX): New value.\n+\t(UNSPEC_VEXTUWLX): New value.\n+\t(UNSPEC_VEXTUBRX): New value.\n+\t(UNSPEC_VEXTUHRX): New value.\n+\t(UNSPEC_VEXTUWRX): New value.\n+\t(UNSPEC_VCMPNEB): New value.\n+\t(UNSPEC_VCMPNEZB): New value.\n+\t(UNSPEC_VCMPNEH): New value.\n+\t(UNSPEC_VCMPNEZH): New value.\n+\t(UNSPEC_VCMPNEW): New value.\n+\t(UNSPEC_VCMPNEZW): New value.\n+\t(*vsx_ne_<mode>_p): New insn for vector test all not equal with\n+\tvector of integer modes.\n+\t(*vsx_ne_<mode>_p): New insn for vector test all not equal with\n+\tvector of float or double modes.\n+\t(*vector_nez_<mode>_p): New insn for vector test all not equal or\n+\tzero.\n+\t(lxvl): New expand for load VSX vector with length.\n+\t(*lxvl): New insn for load VSX vector with length.\n+\t(stxvl): New expand for store VSX vector with length.\n+\t(*stxvl): New insn for store VSX vector with length.\n+\t(vcmpneb): New insn for vector of byte compare not equal.\n+\t(vcmpnezb): New insn for vector of byte compare not equal or zero.\n+\t(vcmpneh): New insn for vector of half word compare not equal.\n+\t(vcmpnezh): New insn for vector of half word compare not equal or\n+\tzero.\n+\t(vcmpnew): New insn for vector of word compare not equal.\n+\t(vcmpne<VSs>): New insn for vector of float or double compare not\n+\tequal.\n+\t(vcmpnezw): New insn for vector of word compare not equal or zero.\n+\t(vclzlsbb): New insn for vector count leading zero\n+\tleast-significant bits byte.\n+\t(vctzlsbb): New insn for vector count trailing zero least\n+\tsignficant bits byte.\n+\t(vextublx): New insn for vector extract unsigned byte left\n+\tindexed.\n+\t(vextubrx): New insn for vector extract unsigned byte right\n+\tindexed.\n+\t(vextuhlx): New insn for vector extract unsigned half word left\n+\tindexed.\n+\t(vextuhrx): New insn for vector extract unsigned half word right\n+\tindexed.\n+\t(vextuwlx): New insn for vector extract unsigned word left\n+\tindexed.\n+\t(vextuwrx): New insn for vector extract unsigned word right\n+\tindexed.\n+\t* config/rs6000/rs6000.h (RS6000_BTC_CONST): Enhance comment to\n+\tclarify intent of this constant.\n+\t* config/rs6000/altivec.md (VI): Move this mode iterator to vsx.md.\n+\t* doc/extend.texi (PowerPC Altivec Built-in Functions): Add\n+\tdocumentation for vec_all_nez, vec_any_eqz, vec_cmpnez,\n+\tvec_cntlz_lsbb, vec_cnttz_lsbb, vec_xl_len, vec_xst_len, vec_xlx,\n+\tand vec_xrx functions.\n+\n 2016-10-18  Andrew Pinski  <apinski@cavium.com>\n \n \tPR tree-opt/65950"}, {"sha": "f8984d9902e62394c53a4bbef3dd52e5e7d0fc64", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -426,6 +426,18 @@\n #define scalar_cmp_exp_eq __builtin_vec_scalar_cmp_exp_eq\n #define scalar_cmp_exp_unordered __builtin_vec_scalar_cmp_exp_unordered\n \n+#ifdef _ARCH_PPC64\n+#define vec_xl_len __builtin_vec_lxvl\n+#define vec_xst_len __builtin_vec_stxvl\n+#endif\n+\n+#define vec_cmpnez __builtin_vec_vcmpnez\n+\n+#define vec_cntlz_lsbb __builtin_vec_vclzlsbb\n+#define vec_cnttz_lsbb __builtin_vec_vctzlsbb\n+\n+#define vec_xlx __builtin_vec_vextulx\n+#define vec_xrx __builtin_vec_vexturx\n #endif\n \n /* Predicates.\n@@ -489,10 +501,23 @@ __altivec_unary_pred(vec_any_numeric,\n \n __altivec_scalar_pred(vec_all_eq,\n   __builtin_vec_vcmpeq_p (__CR6_LT, a1, a2))\n+\n+#ifndef _ARCH_PWR9\n __altivec_scalar_pred(vec_all_ne,\n   __builtin_vec_vcmpeq_p (__CR6_EQ, a1, a2))\n __altivec_scalar_pred(vec_any_eq,\n   __builtin_vec_vcmpeq_p (__CR6_EQ_REV, a1, a2))\n+#else\n+__altivec_scalar_pred(vec_all_nez,\n+  __builtin_vec_vcmpnez_p (__CR6_LT, a1, a2))\n+__altivec_scalar_pred(vec_any_eqz,\n+  __builtin_vec_vcmpnez_p (__CR6_LT_REV, a1, a2))\n+__altivec_scalar_pred(vec_all_ne,\n+  __builtin_vec_vcmpne_p (__CR6_LT, a1, a2))\n+__altivec_scalar_pred(vec_any_eq,\n+  __builtin_vec_vcmpne_p (__CR6_LT_REV, a1, a2))\n+#endif\n+\n __altivec_scalar_pred(vec_any_ne,\n   __builtin_vec_vcmpeq_p (__CR6_LT_REV, a1, a2))\n \n@@ -552,8 +577,17 @@ __altivec_scalar_pred(vec_any_nle,\n #define vec_any_numeric(a1) __builtin_vec_vcmpeq_p (__CR6_EQ_REV, (a1), (a1))\n \n #define vec_all_eq(a1, a2) __builtin_vec_vcmpeq_p (__CR6_LT, (a1), (a2))\n+\n+#ifdef _ARCH_PWR9\n+#define vec_all_nez(a1, a2) __builtin_vec_vcmpnez_p (__CR6_LT, (a1), (a2))\n+#define vec_any_eqz(a1, a2) __builtin_vec_vcmpnez_p (__CR6_LT_REV, (a1), (a2))\n+#define vec_all_ne(a1, a2) __builtin_vec_vcmpne_p (__CR6_LT, (a1), (a2))\n+#define vec_any_eq(a1, a2) __builtin_vec_vcmpne_p (__CR6_LT_REV, (a1), (a2))\n+#else\n #define vec_all_ne(a1, a2) __builtin_vec_vcmpeq_p (__CR6_EQ, (a1), (a2))\n #define vec_any_eq(a1, a2) __builtin_vec_vcmpeq_p (__CR6_EQ_REV, (a1), (a2))\n+#endif\n+\n #define vec_any_ne(a1, a2) __builtin_vec_vcmpeq_p (__CR6_LT_REV, (a1), (a2))\n \n #define vec_all_gt(a1, a2) __builtin_vec_vcmpgt_p (__CR6_LT, (a1), (a2))"}, {"sha": "5cac839da28430ef8344e1c0725dc550cd5d9ec9", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -163,9 +163,7 @@\n    UNSPECV_DSS\n   ])\n \n-;; Vec int modes\n-(define_mode_iterator VI [V4SI V8HI V16QI])\n-;; Like VI, but add ISA 2.07 integer vector ops\n+;; Like VI, defined in vector.md, but add ISA 2.07 integer vector ops\n (define_mode_iterator VI2 [V4SI V8HI V16QI V2DI])\n ;; Short vec in modes\n (define_mode_iterator VIshort [V8HI V16QI])"}, {"sha": "d21f27580a78c3541a21fb65b316e7ee7a26c01f", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -137,6 +137,32 @@\n \t\t     | RS6000_BTC_DST),\t\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n+/* All builtins defined with the RS6000_BUILTIN_P macro expect three\n+   arguments, the first of which is an integer constant that clarifies\n+   the implementation's use of CR6 flags.  The integer constant\n+   argument may have four values: __CR6_EQ (0) means the predicate is\n+   considered true if the equality-test flag of the CR6 condition\n+   register is true following execution of the code identified by the\n+   ICODE pattern, __CR_EQ_REV (1) means the predicate is considered\n+   true if the equality-test flag is false, __CR6_LT (2) means the\n+   predicate is considered true if the less-than-test flag is true, and\n+   __CR6_LT_REV (3) means the predicate is considered true if the\n+   less-than-test flag is false.  For all builtins defined by this\n+   macro, the pattern selected by ICODE expects three operands, a\n+   target and two inputs and is presumed to overwrite the flags of\n+   condition register CR6 as a side effect of computing a result into\n+   the target register.  However, the built-in invocation provides\n+   four operands, a target, an integer constant mode, and two inputs.\n+   The second and third operands of the built-in function's invocation\n+   are automatically mapped into operands 1 and 2 of the pattern\n+   identifed by the ICODE argument and additional code is emitted,\n+   depending on the value of the constant integer first argument.\n+   This special processing happens within the implementation of\n+   altivec_expand_predicate_builtin(), which is defined within\n+   rs6000.c.  The implementation of altivec_expand_predicate_builtin()\n+   allocates a scratch register having the same mode as operand 0 to hold\n+   the result produced by evaluating ICODE.  */\n+\n #define BU_ALTIVEC_P(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n   RS6000_BUILTIN_P (ALTIVEC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_altivec_\" NAME,\t\t/* NAME */\t\\\n@@ -203,6 +229,7 @@\n \t\t     | RS6000_BTC_DST),\t\t\t\t\t\\\n \t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n \n+/* See the comment on BU_ALTIVEC_P.  */\n #define BU_ALTIVEC_OVERLOAD_P(ENUM, NAME)\t\t\t\t\\\n   RS6000_BUILTIN_P (ALTIVEC_BUILTIN_VEC_ ## ENUM,\t/* ENUM */\t\\\n \t\t    \"__builtin_vec_\" NAME,\t\t/* NAME */\t\\\n@@ -252,6 +279,7 @@\n \t\t     | RS6000_BTC_ABS),\t\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n+/* See the comment on BU_ALTIVEC_P.  */\n #define BU_VSX_P(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n   RS6000_BUILTIN_P (VSX_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_vsx_\" NAME,\t\t/* NAME */\t\\\n@@ -338,6 +366,7 @@\n \t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n+/* See the comment on BU_ALTIVEC_P.  */\n #define BU_P8V_AV_P(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n   RS6000_BUILTIN_P (P8V_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_altivec_\" NAME,\t\t/* NAME */\t\\\n@@ -781,6 +810,7 @@\n \t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n+/* See the comment on BU_ALTIVEC_P.  */\n #define BU_P9V_AV_P(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n   RS6000_BUILTIN_P (P9V_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_altivec_\" NAME,\t\t/* NAME */\t\\\n@@ -789,6 +819,23 @@\n \t\t     | RS6000_BTC_PREDICATE),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n+#define BU_P9V_AV_X(ENUM, NAME, ATTR)\t\t\t\t\t\\\n+  RS6000_BUILTIN_X (P9V_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_altivec_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_P9_VECTOR,\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_SPECIAL),\t\t\t\t\\\n+\t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n+\n+#define BU_P9V_64BIT_AV_X(ENUM, NAME, ATTR)\t\t\t\t\\\n+  RS6000_BUILTIN_X (P9V_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_altivec_\" NAME,\t\t/* NAME */\t\\\n+\t\t    (RS6000_BTM_P9_VECTOR\t\t\t\t\\\n+\t\t     | RS6000_BTM_64BIT),\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_SPECIAL),\t\t\t\t\\\n+\t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n+\n /* For the instructions encoded as VSX instructions use __builtin_vsx as the\n    builtin name.  */\n #define BU_P9V_VSX_1(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n@@ -825,6 +872,23 @@\n \t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n+#define BU_P9V_VSX_3(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_3 (P9V_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_vsx_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_P9_VECTOR,\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+/* See the comment on BU_ALTIVEC_P.  */\n+#define BU_P9V_OVERLOAD_P(ENUM, NAME)\t\t\t\t\t\\\n+  RS6000_BUILTIN_P (P9V_BUILTIN_VEC_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_vec_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_ALTIVEC,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_OVERLOADED\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_PREDICATE),\t\t\t\t\\\n+\t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n+\n #define BU_P9V_OVERLOAD_1(ENUM, NAME)\t\t\t\t\t\\\n   RS6000_BUILTIN_1 (P9V_BUILTIN_VEC_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_vec_\" NAME,\t\t/* NAME */\t\\\n@@ -1893,6 +1957,74 @@ BU_P9V_OVERLOAD_2 (VIE,\t\t\"insert_exp\")\n BU_P9V_OVERLOAD_2 (VIEDP,\t\"insert_exp_dp\")\n BU_P9V_OVERLOAD_2 (VIESP,\t\"insert_exp_sp\")\n \n+/* 2 argument vector functions added in ISA 3.0 (power9).  */\n+BU_P9V_64BIT_VSX_2 (LXVL,\t\"lxvl\",\t\tCONST,\tlxvl)\n+\n+BU_P9V_AV_2 (VEXTUBLX, \"vextublx\",\t\tCONST,\tvextublx)\n+BU_P9V_AV_2 (VEXTUBRX, \"vextubrx\",\t\tCONST,\tvextubrx)\n+BU_P9V_AV_2 (VEXTUHLX, \"vextuhlx\",\t\tCONST,\tvextuhlx)\n+BU_P9V_AV_2 (VEXTUHRX, \"vextuhrx\",\t\tCONST,\tvextuhrx)\n+BU_P9V_AV_2 (VEXTUWLX, \"vextuwlx\",\t\tCONST,\tvextuwlx)\n+BU_P9V_AV_2 (VEXTUWRX, \"vextuwrx\",\t\tCONST,\tvextuwrx)\n+\n+/* 3 argument vector functions returning void, treated as SPECIAL,\n+   added in ISA 3.0 (power9).  */\n+BU_P9V_64BIT_AV_X (STXVL,\t\"stxvl\",\tMISC)\n+\n+/* 1 argument vector functions added in ISA 3.0 (power9). */\n+BU_P9V_AV_1 (VCLZLSBB, \"vclzlsbb\",\t\tCONST,\tvclzlsbb)\n+BU_P9V_AV_1 (VCTZLSBB, \"vctzlsbb\",\t\tCONST,\tvctzlsbb)\n+\n+/* Built-in support for Power9 \"VSU option\" string operations includes\n+   new awareness of the \"vector compare not equal\" (vcmpneb, vcmpneb.,\n+   vcmpneh, vcmpneh., vcmpnew, vcmpnew.) and \"vector compare\n+   not equal or zero\" (vcmpnezb, vcmpnezb., vcmpnezh, vcmpnezh.,\n+   vcmpnezw, vcmpnezw.) instructions.  For consistency with existing\n+   infrastructure, this new awareness is integrated in the style of\n+   earlier implementations of the __builtin_vec_cmpne and\n+   __builtin_vec_cmpeq_p functions. */\n+\n+BU_P9V_AV_2 (CMPNEB,\t\"vcmpneb\",\tCONST,\tvcmpneb)\n+BU_P9V_AV_2 (CMPNEH,\t\"vcmpneh\",\tCONST,\tvcmpneh)\n+BU_P9V_AV_2 (CMPNEW,\t\"vcmpnew\",\tCONST,\tvcmpnew)\n+BU_P9V_AV_2 (CMPNEF,\t\"vcmpnef\",\tCONST,\tvcmpnesp)\n+BU_P9V_AV_2 (CMPNED,\t\"vcmpned\",\tCONST,\tvcmpnedp)\n+\n+BU_P9V_AV_P (VCMPNEB_P,\t\"vcmpneb_p\",\tCONST,\tvector_ne_v16qi_p)\n+BU_P9V_AV_P (VCMPNEH_P,\t\"vcmpneh_p\",\tCONST,\tvector_ne_v8hi_p)\n+BU_P9V_AV_P (VCMPNEW_P,\t\"vcmpnew_p\",\tCONST,\tvector_ne_v4si_p)\n+BU_P9V_AV_P (VCMPNED_P,\t\"vcmpned_p\",\tCONST,\tvector_ne_v2di_p)\n+\n+BU_P9V_AV_P (VCMPNEFP_P,\t\"vcmpnefp_p\",\tCONST,\tvector_ne_v4sf_p)\n+BU_P9V_AV_P (VCMPNEDP_P,\t\"vcmpnedp_p\",\tCONST,\tvector_ne_v2df_p)\n+\n+BU_P9V_AV_2 (CMPNEZB,\t\"vcmpnezb\",\tCONST,\tvcmpnezb)\n+BU_P9V_AV_2 (CMPNEZH,\t\"vcmpnezh\",\tCONST,\tvcmpnezh)\n+BU_P9V_AV_2 (CMPNEZW,\t\"vcmpnezw\",\tCONST,\tvcmpnezw)\n+\n+BU_P9V_AV_P (VCMPNEZB_P,\t\"vcmpnezb_p\",\tCONST,\tvector_nez_v16qi_p)\n+BU_P9V_AV_P (VCMPNEZH_P,\t\"vcmpnezh_p\",\tCONST,\tvector_nez_v8hi_p)\n+BU_P9V_AV_P (VCMPNEZW_P,\t\"vcmpnezw_p\",\tCONST,\tvector_nez_v4si_p)\n+\n+/* ISA 3.0 Vector scalar overloaded 2 argument functions */\n+BU_P9V_OVERLOAD_2 (LXVL,\t\"lxvl\")\n+\n+/* ISA 3.0 Vector scalar overloaded 3 argument functions */\n+BU_P9V_OVERLOAD_3 (STXVL,\t\"stxvl\")\n+\n+BU_P9V_OVERLOAD_2 (VEXTULX,\t\"vextulx\")\n+BU_P9V_OVERLOAD_2 (VEXTURX,\t\"vexturx\")\n+\n+/* Overloaded CMPNE support was implemented prior to Power 9,\n+   so is not mentioned here.  */\n+BU_P9V_OVERLOAD_2 (CMPNEZ,\t\"vcmpnez\")\n+\n+BU_P9V_OVERLOAD_P (VCMPNEZ_P,\t\"vcmpnez_p\")\n+BU_P9V_OVERLOAD_P (VCMPNE_P,\t\"vcmpne_p\")\n+\n+/* ISA 3.0 Vector scalar overloaded 1 argument functions */\n+BU_P9V_OVERLOAD_1 (VCLZLSBB,\t\"vclzlsbb\")\n+BU_P9V_OVERLOAD_1 (VCTZLSBB,\t\"vctzlsbb\")\n \f\n /* 2 argument extended divide functions added in ISA 2.06.  */\n BU_P7_MISC_2 (DIVWE,\t\t\"divwe\",\tCONST,\tdive_si)"}, {"sha": "4bba2934e1d7484bcb63702b2772a09e34abd756", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 372, "deletions": 38, "changes": 410, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -4391,6 +4391,330 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P9V_BUILTIN_VEC_VSCEDPUO, P9V_BUILTIN_VSCEDPUO,\n     RS6000_BTI_INTSI, RS6000_BTI_double, RS6000_BTI_double, 0 },\n \n+  { P9V_BUILTIN_VEC_LXVL, P9V_BUILTIN_LXVL,\n+    RS6000_BTI_V16QI, ~RS6000_BTI_INTQI,\n+    RS6000_BTI_unsigned_long_long, 0 },\n+  { P9V_BUILTIN_VEC_LXVL, P9V_BUILTIN_LXVL,\n+    RS6000_BTI_unsigned_V16QI, ~RS6000_BTI_UINTQI,\n+    RS6000_BTI_unsigned_long_long, 0 },\n+\n+  { P9V_BUILTIN_VEC_LXVL, P9V_BUILTIN_LXVL,\n+    RS6000_BTI_V4SI, ~RS6000_BTI_INTSI,\n+    RS6000_BTI_unsigned_long_long, 0 },\n+  { P9V_BUILTIN_VEC_LXVL, P9V_BUILTIN_LXVL,\n+    RS6000_BTI_unsigned_V4SI, ~RS6000_BTI_UINTSI,\n+    RS6000_BTI_unsigned_long_long, 0 },\n+\n+  { P9V_BUILTIN_VEC_LXVL, P9V_BUILTIN_LXVL,\n+    RS6000_BTI_V1TI, ~RS6000_BTI_INTTI,\n+    RS6000_BTI_unsigned_long_long, 0 },\n+  { P9V_BUILTIN_VEC_LXVL, P9V_BUILTIN_LXVL,\n+    RS6000_BTI_unsigned_V1TI, ~RS6000_BTI_UINTTI,\n+    RS6000_BTI_unsigned_long_long, 0 },\n+\n+  { P9V_BUILTIN_VEC_LXVL, P9V_BUILTIN_LXVL,\n+    RS6000_BTI_V2DI, ~RS6000_BTI_long_long,\n+    RS6000_BTI_unsigned_long_long, 0 },\n+  { P9V_BUILTIN_VEC_LXVL, P9V_BUILTIN_LXVL,\n+    RS6000_BTI_unsigned_V2DI, ~RS6000_BTI_unsigned_long_long,\n+    RS6000_BTI_unsigned_long_long, 0 },\n+\n+  { P9V_BUILTIN_VEC_LXVL, P9V_BUILTIN_LXVL,\n+    RS6000_BTI_V8HI, ~RS6000_BTI_INTHI,\n+    RS6000_BTI_unsigned_long_long, 0 },\n+  { P9V_BUILTIN_VEC_LXVL, P9V_BUILTIN_LXVL,\n+    RS6000_BTI_unsigned_V8HI, ~RS6000_BTI_UINTHI,\n+    RS6000_BTI_unsigned_long_long, 0 },\n+\n+  { P9V_BUILTIN_VEC_LXVL, P9V_BUILTIN_LXVL,\n+    RS6000_BTI_V2DF, ~RS6000_BTI_double,\n+    RS6000_BTI_unsigned_long_long, 0 },\n+  { P9V_BUILTIN_VEC_LXVL, P9V_BUILTIN_LXVL,\n+    RS6000_BTI_V4SF, ~RS6000_BTI_float,\n+    RS6000_BTI_unsigned_long_long, 0 },\n+  /* At an appropriate future time, add support for the\n+     RS6000_BTI_Float16 (exact name to be determined) type here.  */\n+\n+  { P9V_BUILTIN_VEC_STXVL, P9V_BUILTIN_STXVL,\n+    RS6000_BTI_void, RS6000_BTI_V16QI, ~RS6000_BTI_INTQI,\n+    RS6000_BTI_unsigned_long_long },\n+  { P9V_BUILTIN_VEC_STXVL, P9V_BUILTIN_STXVL,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, ~RS6000_BTI_UINTQI,\n+    RS6000_BTI_unsigned_long_long },\n+\n+  { P9V_BUILTIN_VEC_STXVL, P9V_BUILTIN_STXVL,\n+    RS6000_BTI_void, RS6000_BTI_V4SI, ~RS6000_BTI_INTSI,\n+    RS6000_BTI_unsigned_long_long },\n+  { P9V_BUILTIN_VEC_STXVL, P9V_BUILTIN_STXVL,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V4SI, ~RS6000_BTI_UINTSI,\n+    RS6000_BTI_unsigned_long_long },\n+\n+  { P9V_BUILTIN_VEC_STXVL, P9V_BUILTIN_STXVL,\n+    RS6000_BTI_void, RS6000_BTI_V1TI, ~RS6000_BTI_INTTI,\n+    RS6000_BTI_unsigned_long_long },\n+  { P9V_BUILTIN_VEC_STXVL, P9V_BUILTIN_STXVL,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V1TI, ~RS6000_BTI_UINTTI,\n+    RS6000_BTI_unsigned_long_long },\n+\n+  { P9V_BUILTIN_VEC_STXVL, P9V_BUILTIN_STXVL,\n+    RS6000_BTI_void, RS6000_BTI_V2DI, ~RS6000_BTI_long_long,\n+    RS6000_BTI_unsigned_long_long },\n+  { P9V_BUILTIN_VEC_STXVL, P9V_BUILTIN_STXVL,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V2DI, ~RS6000_BTI_unsigned_long_long,\n+    RS6000_BTI_unsigned_long_long },\n+\n+  { P9V_BUILTIN_VEC_STXVL, P9V_BUILTIN_STXVL,\n+    RS6000_BTI_void, RS6000_BTI_V8HI, ~RS6000_BTI_INTHI,\n+    RS6000_BTI_unsigned_long_long },\n+  { P9V_BUILTIN_VEC_STXVL, P9V_BUILTIN_STXVL,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V8HI, ~RS6000_BTI_UINTHI,\n+    RS6000_BTI_unsigned_long_long },\n+\n+  { P9V_BUILTIN_VEC_STXVL, P9V_BUILTIN_STXVL,\n+    RS6000_BTI_void, RS6000_BTI_V2DF, ~RS6000_BTI_double,\n+    RS6000_BTI_unsigned_long_long },\n+  { P9V_BUILTIN_VEC_STXVL, P9V_BUILTIN_STXVL,\n+    RS6000_BTI_void, RS6000_BTI_V4SF, ~RS6000_BTI_float,\n+    RS6000_BTI_unsigned_long_long },\n+  /* At an appropriate future time, add support for the\n+     RS6000_BTI_Float16 (exact name to be determined) type here.  */\n+\n+  { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEB,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI,\n+    RS6000_BTI_bool_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEB,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_V16QI,\n+    RS6000_BTI_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEB,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, 0 },\n+\n+  { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEH,\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V8HI,\n+    RS6000_BTI_bool_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEH,\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_V8HI,\n+    RS6000_BTI_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEH,\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_unsigned_V8HI, 0 },\n+\n+  { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEW,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI,\n+    RS6000_BTI_bool_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEW,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_V4SI,\n+    RS6000_BTI_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEW,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, 0 },\n+\n+  { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEF,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNED,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0 },\n+\n+  /* The following 2 entries have been deprecated.  */\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEB_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V16QI,\n+    RS6000_BTI_unsigned_V16QI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEB_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_bool_V16QI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEB_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI },\n+\n+  /* The following 2 entries have been deprecated.  */\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEB_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V16QI,\n+    RS6000_BTI_V16QI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEB_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V16QI,\n+    RS6000_BTI_bool_V16QI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEB_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V16QI, RS6000_BTI_V16QI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEB_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V16QI,\n+    RS6000_BTI_bool_V16QI },\n+\n+  /* The following 2 entries have been deprecated.  */\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEH_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V8HI,\n+    RS6000_BTI_unsigned_V8HI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEH_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_bool_V8HI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEH_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_unsigned_V8HI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEH_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V8HI, RS6000_BTI_V8HI },\n+\n+  /* The following 2 entries have been deprecated.  */\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEH_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V8HI,\n+    RS6000_BTI_V8HI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEH_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V8HI,\n+    RS6000_BTI_bool_V8HI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEH_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V8HI,\n+    RS6000_BTI_bool_V8HI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEH_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_pixel_V8HI,\n+    RS6000_BTI_pixel_V8HI },\n+\n+  /* The following 2 entries have been deprecated.  */\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEW_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI,\n+    RS6000_BTI_unsigned_V4SI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEW_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_bool_V4SI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEW_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI },\n+\n+  /* The following 2 entries have been deprecated.  */\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEW_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI,\n+    RS6000_BTI_V4SI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEW_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SI,\n+    RS6000_BTI_bool_V4SI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEW_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SI, RS6000_BTI_V4SI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEW_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI,\n+    RS6000_BTI_bool_V4SI },\n+\n+  /* The following 2 entries have been deprecated.  */\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNED_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V2DI,\n+    RS6000_BTI_unsigned_V2DI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNED_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V2DI,\n+      RS6000_BTI_bool_V2DI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNED_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_unsigned_V2DI },\n+\n+  /* The following 2 entries have been deprecated.  */\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNED_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V2DI,\n+    RS6000_BTI_V2DI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNED_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V2DI,\n+    RS6000_BTI_bool_V2DI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNED_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V2DI, RS6000_BTI_V2DI },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNED_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V2DI,\n+    RS6000_BTI_bool_V2DI },\n+\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEFP_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SF, RS6000_BTI_V4SF },\n+  { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEDP_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V2DF, RS6000_BTI_V2DF },\n+\n+  { P9V_BUILTIN_VEC_VCMPNEZ_P, P9V_BUILTIN_VCMPNEZB_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI },\n+  { P9V_BUILTIN_VEC_VCMPNEZ_P, P9V_BUILTIN_VCMPNEZB_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V16QI, RS6000_BTI_V16QI },\n+\n+  { P9V_BUILTIN_VEC_VCMPNEZ_P, P9V_BUILTIN_VCMPNEZH_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_unsigned_V8HI },\n+  { P9V_BUILTIN_VEC_VCMPNEZ_P, P9V_BUILTIN_VCMPNEZH_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V8HI, RS6000_BTI_V8HI },\n+\n+  { P9V_BUILTIN_VEC_VCMPNEZ_P, P9V_BUILTIN_VCMPNEZW_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI },\n+  { P9V_BUILTIN_VEC_VCMPNEZ_P, P9V_BUILTIN_VCMPNEZW_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SI, RS6000_BTI_V4SI },\n+\n+  { P9V_BUILTIN_VEC_CMPNEZ, P9V_BUILTIN_CMPNEZB,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_V16QI,\n+    RS6000_BTI_V16QI, 0 },\n+  { P9V_BUILTIN_VEC_CMPNEZ, P9V_BUILTIN_CMPNEZB,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, 0 },\n+\n+  { P9V_BUILTIN_VEC_CMPNEZ, P9V_BUILTIN_CMPNEZH,\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_V8HI,\n+    RS6000_BTI_V8HI, 0 },\n+  { P9V_BUILTIN_VEC_CMPNEZ, P9V_BUILTIN_CMPNEZH,\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_unsigned_V8HI, 0 },\n+\n+  { P9V_BUILTIN_VEC_CMPNEZ, P9V_BUILTIN_CMPNEZW,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_V4SI,\n+    RS6000_BTI_V4SI, 0 },\n+  { P9V_BUILTIN_VEC_CMPNEZ, P9V_BUILTIN_CMPNEZW,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, 0 },\n+\n+  { P9V_BUILTIN_VEC_VCLZLSBB, P9V_BUILTIN_VCLZLSBB,\n+    RS6000_BTI_INTSI, RS6000_BTI_V16QI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VCLZLSBB, P9V_BUILTIN_VCLZLSBB,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n+\n+  { P9V_BUILTIN_VEC_VCTZLSBB, P9V_BUILTIN_VCTZLSBB,\n+    RS6000_BTI_INTSI, RS6000_BTI_V16QI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VCTZLSBB, P9V_BUILTIN_VCTZLSBB,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n+\n+  { P9V_BUILTIN_VEC_VEXTULX, P9V_BUILTIN_VEXTUBLX,\n+    RS6000_BTI_INTQI, RS6000_BTI_UINTSI,\n+    RS6000_BTI_V16QI, 0 },\n+  { P9V_BUILTIN_VEC_VEXTULX, P9V_BUILTIN_VEXTUBLX,\n+    RS6000_BTI_UINTQI, RS6000_BTI_UINTSI,\n+    RS6000_BTI_unsigned_V16QI, 0 },\n+\n+  { P9V_BUILTIN_VEC_VEXTULX, P9V_BUILTIN_VEXTUHLX,\n+    RS6000_BTI_INTHI, RS6000_BTI_UINTSI,\n+    RS6000_BTI_V8HI, 0 },\n+  { P9V_BUILTIN_VEC_VEXTULX, P9V_BUILTIN_VEXTUHLX,\n+    RS6000_BTI_UINTHI, RS6000_BTI_UINTSI,\n+    RS6000_BTI_unsigned_V8HI, 0 },\n+\n+  { P9V_BUILTIN_VEC_VEXTULX, P9V_BUILTIN_VEXTUWLX,\n+    RS6000_BTI_INTSI, RS6000_BTI_UINTSI,\n+    RS6000_BTI_V4SI, 0 },\n+  { P9V_BUILTIN_VEC_VEXTULX, P9V_BUILTIN_VEXTUWLX,\n+    RS6000_BTI_UINTSI, RS6000_BTI_UINTSI,\n+    RS6000_BTI_unsigned_V4SI, 0 },\n+  { P9V_BUILTIN_VEC_VEXTULX, P9V_BUILTIN_VEXTUWLX,\n+    RS6000_BTI_float, RS6000_BTI_UINTSI,\n+    RS6000_BTI_V4SF, 0 },\n+\n+  { P9V_BUILTIN_VEC_VEXTURX, P9V_BUILTIN_VEXTUBRX,\n+    RS6000_BTI_INTQI, RS6000_BTI_UINTSI,\n+    RS6000_BTI_V16QI, 0 },\n+  { P9V_BUILTIN_VEC_VEXTURX, P9V_BUILTIN_VEXTUBRX,\n+    RS6000_BTI_UINTQI, RS6000_BTI_UINTSI,\n+    RS6000_BTI_unsigned_V16QI, 0 },\n+\n+  { P9V_BUILTIN_VEC_VEXTURX, P9V_BUILTIN_VEXTUHRX,\n+    RS6000_BTI_INTHI, RS6000_BTI_UINTSI,\n+    RS6000_BTI_V8HI, 0 },\n+  { P9V_BUILTIN_VEC_VEXTURX, P9V_BUILTIN_VEXTUHRX,\n+    RS6000_BTI_UINTHI, RS6000_BTI_UINTSI,\n+    RS6000_BTI_unsigned_V8HI, 0 },\n+\n+  { P9V_BUILTIN_VEC_VEXTURX, P9V_BUILTIN_VEXTUWRX,\n+    RS6000_BTI_INTSI, RS6000_BTI_UINTSI,\n+    RS6000_BTI_V4SI, 0 },\n+  { P9V_BUILTIN_VEC_VEXTURX, P9V_BUILTIN_VEXTUWRX,\n+    RS6000_BTI_UINTSI, RS6000_BTI_UINTSI,\n+    RS6000_BTI_unsigned_V4SI, 0 },\n+  { P9V_BUILTIN_VEC_VEXTURX, P9V_BUILTIN_VEXTUWRX,\n+    RS6000_BTI_float, RS6000_BTI_UINTSI,\n+    RS6000_BTI_V4SF, 0 },\n+\n   { P8V_BUILTIN_VEC_VGBBD, P8V_BUILTIN_VGBBD,\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0, 0 },\n   { P8V_BUILTIN_VEC_VGBBD, P8V_BUILTIN_VGBBD,\n@@ -4895,47 +5219,57 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n       tree arg1 = (*arglist)[1];\n       tree arg1_type = TREE_TYPE (arg1);\n \n-      /* Both arguments must be vectors and the types must match.  */\n-      if (arg0_type != arg1_type)\n-\tgoto bad;\n-      if (TREE_CODE (arg0_type) != VECTOR_TYPE)\n-\tgoto bad;\n-\n-      switch (TYPE_MODE (TREE_TYPE (arg0_type)))\n+      /* Power9 instructions provide the most efficient implementation of\n+\t ALTIVEC_BUILTIN_VEC_CMPNE if the mode is not DImode or TImode.  */\n+      if (!TARGET_P9_VECTOR\n+\t  || (TYPE_MODE (TREE_TYPE (arg0_type)) == DImode)\n+\t  || (TYPE_MODE (TREE_TYPE (arg0_type)) == TImode))\n \t{\n-\t  /* vec_cmpneq (va, vb) == vec_nor (vec_cmpeq (va, vb),\n-\t\t\t\t\t     vec_cmpeq (va, vb)).  */\n-\t  /* Note:  vec_nand also works but opt changes vec_nand's to vec_nor's\n-\t     anyway.  */\n-\t  case QImode:\n-\t  case HImode:\n-\t  case SImode:\n-\t  case DImode:\n-\t  case TImode:\n- \t  case SFmode:\n-\t  case DFmode:\n-\t   {\n-\t      /* call = vec_cmpeq (va, vb)\n-\t\t result = vec_nor (call, call).  */\n-\t      vec<tree, va_gc> *params = make_tree_vector ();\n-\t      vec_safe_push (params, arg0);\n-\t      vec_safe_push (params, arg1);\n-\t      tree call = altivec_resolve_overloaded_builtin\n-\t\t(loc, rs6000_builtin_decls[ALTIVEC_BUILTIN_VEC_CMPEQ], params);\n- \t      /* Use save_expr to ensure that operands used more than once\n-\t\t that may have side effects (like calls) are only evaluated\n-\t\t once.  */\n-\t      call = save_expr (call);\n-\t      params = make_tree_vector ();\n-\t      vec_safe_push (params, call);\n-\t      vec_safe_push (params, call);\n-\t      return altivec_resolve_overloaded_builtin\n-\t\t(loc, rs6000_builtin_decls[ALTIVEC_BUILTIN_VEC_NOR], params);\n-\t    }\n-\t  /* Other types are errors.  */\n-\t  default:\n+\t  /* Both arguments must be vectors and the types must match.  */\n+\t  if (arg0_type != arg1_type)\n+\t    goto bad;\n+\t  if (TREE_CODE (arg0_type) != VECTOR_TYPE)\n \t    goto bad;\n+\n+\n+\t  switch (TYPE_MODE (TREE_TYPE (arg0_type)))\n+\t    {\n+\t      /* vec_cmpneq (va, vb) == vec_nor (vec_cmpeq (va, vb),\n+\t\t vec_cmpeq (va, vb)).  */\n+\t      /* Note:  vec_nand also works but opt changes vec_nand's\n+\t\t to vec_nor's anyway.  */\n+\t    case QImode:\n+\t    case HImode:\n+\t    case SImode:\n+\t    case DImode:\n+\t    case TImode:\n+\t    case SFmode:\n+\t    case DFmode:\n+\t      {\n+\t\t/* call = vec_cmpeq (va, vb)\n+\t\t   result = vec_nor (call, call).  */\n+\t\tvec<tree, va_gc> *params = make_tree_vector ();\n+\t\tvec_safe_push (params, arg0);\n+\t\tvec_safe_push (params, arg1);\n+\t\ttree call = altivec_resolve_overloaded_builtin\n+\t\t  (loc, rs6000_builtin_decls[ALTIVEC_BUILTIN_VEC_CMPEQ],\n+\t\t   params);\n+\t\t/* Use save_expr to ensure that operands used more than once\n+\t\t   that may have side effects (like calls) are only evaluated\n+\t\t   once.  */\n+\t\tcall = save_expr (call);\n+\t\tparams = make_tree_vector ();\n+\t\tvec_safe_push (params, call);\n+\t\tvec_safe_push (params, call);\n+\t\treturn altivec_resolve_overloaded_builtin\n+\t\t  (loc, rs6000_builtin_decls[ALTIVEC_BUILTIN_VEC_NOR], params);\n+\t      }\n+\t      /* Other types are errors.  */\n+\t    default:\n+\t      goto bad;\n+\t    }\n \t}\n+      /* else, fall through and process the Power9 alternative below */\n     }\n \n   if (fcode == ALTIVEC_BUILTIN_VEC_ADDE)"}, {"sha": "93cb41b21a04351efb9c7d15566463cdcc4fe013", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -14169,6 +14169,11 @@ altivec_expand_predicate_builtin (enum insn_code icode, tree exp, rtx target)\n   if (! (*insn_data[icode].operand[2].predicate) (op1, mode1))\n     op1 = copy_to_mode_reg (mode1, op1);\n \n+  /* Note that for many of the relevant operations (e.g. cmpne or\n+     cmpeq) with float or double operands, it makes more sense for the\n+     mode of the allocated scratch register to select a vector of\n+     integer.  But the choice to copy the mode of operand 0 was made\n+     long ago and there are no plans to change it.  */\n   scratch = gen_reg_rtx (mode0);\n \n   pat = GEN_FCN (icode) (scratch, op0, op1);\n@@ -14503,6 +14508,44 @@ paired_expand_stv_builtin (enum insn_code icode, tree exp)\n   return NULL_RTX;\n }\n \n+static rtx\n+altivec_expand_stxvl_builtin (enum insn_code icode, tree exp)\n+{\n+  rtx pat;\n+  tree arg0 = CALL_EXPR_ARG (exp, 0);\n+  tree arg1 = CALL_EXPR_ARG (exp, 1);\n+  tree arg2 = CALL_EXPR_ARG (exp, 2);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n+  rtx op2 = expand_normal (arg2);\n+  machine_mode mode0 = insn_data[icode].operand[0].mode;\n+  machine_mode mode1 = insn_data[icode].operand[1].mode;\n+  machine_mode mode2 = insn_data[icode].operand[2].mode;\n+\n+  if (icode == CODE_FOR_nothing)\n+    /* Builtin not supported on this processor.  */\n+    return NULL_RTX;\n+\n+  /* If we got invalid arguments bail out before generating bad rtl.  */\n+  if (arg0 == error_mark_node\n+      || arg1 == error_mark_node\n+      || arg2 == error_mark_node)\n+    return NULL_RTX;\n+\n+  if (! (*insn_data[icode].operand[1].predicate) (op0, mode0))\n+    op0 = copy_to_mode_reg (mode0, op0);\n+  if (! (*insn_data[icode].operand[2].predicate) (op1, mode1))\n+    op1 = copy_to_mode_reg (mode1, op1);\n+  if (! (*insn_data[icode].operand[3].predicate) (op2, mode2))\n+    op2 = copy_to_mode_reg (mode2, op2);\n+\n+  pat = GEN_FCN (icode) (op0, op1, op2);\n+  if (pat)\n+    emit_insn (pat);\n+\n+  return NULL_RTX;\n+}\n+\n static rtx\n altivec_expand_stv_builtin (enum insn_code icode, tree exp)\n {\n@@ -15463,6 +15506,9 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n     case ALTIVEC_BUILTIN_STVRXL:\n       return altivec_expand_stv_builtin (CODE_FOR_altivec_stvrxl, exp);\n \n+    case P9V_BUILTIN_STXVL:\n+      return altivec_expand_stxvl_builtin (CODE_FOR_stxvl, exp);\n+\n     case VSX_BUILTIN_STXVD2X_V1TI:\n       return altivec_expand_stv_builtin (CODE_FOR_vsx_store_v1ti, exp);\n     case VSX_BUILTIN_STXVD2X_V2DF:\n@@ -17210,6 +17256,12 @@ altivec_init_builtins (void)\n     = build_function_type_list (void_type_node,\n \t\t\t\tV16QI_type_node, long_integer_type_node,\n \t\t\t\tpvoid_type_node, NULL_TREE);\n+\n+  tree void_ftype_v16qi_pvoid_long\n+    = build_function_type_list (void_type_node,\n+\t\t\t\tV16QI_type_node, pvoid_type_node,\n+\t\t\t\tlong_integer_type_node, NULL_TREE);\n+\n   tree void_ftype_v8hi_long_pvoid\n     = build_function_type_list (void_type_node,\n \t\t\t\tV8HI_type_node, long_integer_type_node,\n@@ -17448,6 +17500,9 @@ altivec_init_builtins (void)\n   def_builtin (\"__builtin_vec_stvrx\",  void_ftype_v16qi_long_pvoid, ALTIVEC_BUILTIN_VEC_STVRX);\n   def_builtin (\"__builtin_vec_stvrxl\", void_ftype_v16qi_long_pvoid, ALTIVEC_BUILTIN_VEC_STVRXL);\n \n+  def_builtin (\"__builtin_altivec_stxvl\", void_ftype_v16qi_pvoid_long,\n+\t       P9V_BUILTIN_STXVL);\n+\n   /* Add the DST variants.  */\n   d = bdesc_dst;\n   for (i = 0; i < ARRAY_SIZE (bdesc_dst); i++, d++)"}, {"sha": "ee0f1053bf743ad2850eec2e0735448a4531f931", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -2694,7 +2694,8 @@ extern int frame_pointer_needed;\n #define RS6000_BTC_TYPE_MASK\t0x0000000f\t/* Mask to isolate types */\n \n #define RS6000_BTC_MISC\t\t0x00000000\t/* No special attributes.  */\n-#define RS6000_BTC_CONST\t0x00000100\t/* uses no global state.  */\n+#define RS6000_BTC_CONST\t0x00000100\t/* Neither uses, nor\n+\t\t\t\t\t\t   modifies global state.  */\n #define RS6000_BTC_PURE\t\t0x00000200\t/* reads global\n \t\t\t\t\t\t   state/mem and does\n \t\t\t\t\t\t   not modify global state.  */"}, {"sha": "7240345bce0eed250d51a32e70998592092a65ce", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -61,6 +61,9 @@\n ;; Vector modes for 64-bit base types\n (define_mode_iterator VEC_64 [V2DI V2DF])\n \n+;; Vector integer modes\n+(define_mode_iterator VI [V4SI V8HI V16QI])\n+\n ;; Base type from vector mode\n (define_mode_attr VEC_base [(V16QI \"QI\")\n \t\t\t    (V8HI  \"HI\")\n@@ -80,7 +83,8 @@\n \n ;; constants for unspec\n (define_c_enum \"unspec\" [UNSPEC_PREDICATE\n-\t\t\t UNSPEC_REDUC])\n+\t\t\t UNSPEC_REDUC\n+\t\t\t UNSPEC_NEZ_P])\n \n ;; Vector reduction code iterators\n (define_code_iterator VEC_reduc [plus smin smax])\n@@ -680,6 +684,75 @@\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n+;; This expansion handles the V16QI, V8HI, and V4SI modes in the\n+;; implementation of the vec_all_ne and vec_any_eq built-in functions\n+;; on Power9.\n+(define_expand \"vector_ne_<mode>_p\"\n+  [(parallel\n+    [(set (reg:CC CR6_REGNO)\n+\t  (unspec:CC [(ne:CC (match_operand:VI 1 \"vlogical_operand\")\n+\t\t\t     (match_operand:VI 2 \"vlogical_operand\"))]\n+\t   UNSPEC_PREDICATE))\n+     (set (match_operand:VI 0 \"vlogical_operand\")\n+\t  (ne:VI (match_dup 1)\n+\t\t (match_dup 2)))])]\n+  \"TARGET_P9_VECTOR\"\n+  \"\")\n+\n+;; This expansion handles the V16QI, V8HI, and V4SI modes in the\n+;; implementation of the vec_all_nez and vec_any_eqz built-in\n+;; functions on Power9.\n+(define_expand \"vector_nez_<mode>_p\"\n+  [(parallel\n+    [(set (reg:CC CR6_REGNO)\n+\t  (unspec:CC [(unspec:VI\n+\t\t       [(match_operand:VI 1 \"vlogical_operand\")\n+\t\t\t(match_operand:VI 2 \"vlogical_operand\")]\n+\t\t       UNSPEC_NEZ_P)]\n+\t   UNSPEC_PREDICATE))\n+     (set (match_operand:VI 0 \"vlogical_operand\")\n+\t  (unspec:VI [(match_dup 1)\n+\t\t      (match_dup 2)]\n+\t   UNSPEC_NEZ_P))])]\n+  \"TARGET_P9_VECTOR\"\n+  \"\")\n+\n+;; This expansion handles the V4DI mode in the implementation of the\n+;; vec_all_ne and vec_any_eq built-in function on Power9.\n+;;\n+;; Since the \"xvcmpne<mode>.\" instruction does not support DImode,\n+;; we'll use a V4SI comparison, which will set the values of the CR6\n+;; flags to be the same as if we had performed a DImode comparison.\n+;; (All of the entries in a V2DI vector are not equal iff all of the\n+;; entries in the same vector, interpeted as V4SI are not equal, and\n+;; likewise in the test for \"any equal\".)\n+(define_expand \"vector_ne_v2di_p\"\n+  [(parallel\n+    [(set (reg:CC CR6_REGNO)\n+\t  (unspec:CC [(ne:CC (match_operand:V4SI 1 \"vlogical_operand\")\n+\t\t\t     (match_operand:V4SI 2 \"vlogical_operand\"))]\n+\t   UNSPEC_PREDICATE))\n+     (set (match_operand:V4SI 0 \"vlogical_operand\")\n+\t  (ne:V4SI (match_dup 1)\n+\t\t   (match_dup 2)))])]\n+  \"TARGET_P9_VECTOR\"\n+  \"\")\n+\n+;; This expansion handles the V4SF and V2DF modes in the Power9\n+;; implementation of the vec_all_ne and vec_any_eq built-in\n+;; functions.\n+(define_expand \"vector_ne_<mode>_p\"\n+  [(parallel\n+    [(set (reg:CC CR6_REGNO)\n+\t  (unspec:CC [(ne:CC (match_operand:VEC_F 1 \"vlogical_operand\")\n+\t\t\t     (match_operand:VEC_F 2 \"vlogical_operand\"))]\n+\t   UNSPEC_PREDICATE))\n+     (set (match_operand:VEC_F 0 \"vlogical_operand\")\n+\t  (ne:VEC_F (match_dup 1)\n+\t\t    (match_dup 2)))])]\n+  \"TARGET_P9_VECTOR\"\n+  \"\")\n+\n (define_expand \"vector_gt_<mode>_p\"\n   [(parallel\n     [(set (reg:CC CR6_REGNO)\n@@ -718,13 +791,21 @@\n \n ;; AltiVec/VSX predicates.\n \n+;; This expansion is triggered during expansion of predicate built-in\n+;; functions (built-ins defined with the RS6000_BUILTIN_P macro) by the\n+;; altivec_expand_predicate_builtin() function when the value of the\n+;; integer constant first argument equals zero (aka __CR6_EQ in altivec.h).\n (define_expand \"cr6_test_for_zero\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(eq:SI (reg:CC CR6_REGNO)\n \t       (const_int 0)))]\n   \"TARGET_ALTIVEC || TARGET_VSX\"\n   \"\")\n \n+;; This expansion is triggered during expansion of predicate built-in\n+;; functions (built-ins defined with the RS6000_BUILTIN_P macro) by the\n+;; altivec_expand_predicate_builtin() function when the value of the\n+;; integer constant first argument equals one (aka __CR6_EQ_REV in altivec.h).\n (define_expand \"cr6_test_for_zero_reverse\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(eq:SI (reg:CC CR6_REGNO)\n@@ -735,13 +816,22 @@\n   \"TARGET_ALTIVEC || TARGET_VSX\"\n   \"\")\n \n+;; This expansion is triggered during expansion of predicate built-in\n+;; functions (built-ins defined with the RS6000_BUILTIN_P macro) by the\n+;; altivec_expand_predicate_builtin() function when the value of the\n+;; integer constant first argument equals two (aka __CR6_LT in altivec.h).\n (define_expand \"cr6_test_for_lt\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(lt:SI (reg:CC CR6_REGNO)\n \t       (const_int 0)))]\n   \"TARGET_ALTIVEC || TARGET_VSX\"\n   \"\")\n \n+;; This expansion is triggered during expansion of predicate built-in\n+;; functions (built-ins defined with the RS6000_BUILTIN_P macro) by the\n+;; altivec_expand_predicate_builtin() function when the value of the\n+;; integer constant first argument equals three\n+;; (aka __CR6_LT_REV in altivec.h).\n (define_expand \"cr6_test_for_lt_reverse\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(lt:SI (reg:CC CR6_REGNO)"}, {"sha": "36567e4ea36bae329cb8585d8d689f4e8701407f", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 278, "deletions": 0, "changes": 278, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -269,6 +269,10 @@\n ;; Iterator for ISA 3.0 vector extract/insert of integer vectors\n (define_mode_iterator VSX_EXTRACT_I [V16QI V8HI V4SI])\n \n+(define_mode_attr VSX_EXTRACT_WIDTH [(V16QI \"b\")\n+\t\t  \t\t     (V8HI \"h\")\n+\t\t\t\t     (V4SI \"w\")])\n+\n ;; Mode attribute to give the correct predicate for ISA 3.0 vector extract and\n ;; insert to validate the operand number.\n (define_mode_attr VSX_EXTRACT_PREDICATE [(V16QI \"const_0_to_15_operand\")\n@@ -334,6 +338,22 @@\n    UNSPEC_VSX_VIEXP\n    UNSPEC_VSX_VTSTDC\n    UNSPEC_VSX_VEC_INIT\n+   UNSPEC_LXVL\n+   UNSPEC_STXVL\n+   UNSPEC_VCLZLSBB\n+   UNSPEC_VCTZLSBB\n+   UNSPEC_VEXTUBLX\n+   UNSPEC_VEXTUHLX\n+   UNSPEC_VEXTUWLX\n+   UNSPEC_VEXTUBRX\n+   UNSPEC_VEXTUHRX\n+   UNSPEC_VEXTUWRX\n+   UNSPEC_VCMPNEB\n+   UNSPEC_VCMPNEZB\n+   UNSPEC_VCMPNEH\n+   UNSPEC_VCMPNEZH\n+   UNSPEC_VCMPNEW\n+   UNSPEC_VCMPNEZW\n   ])\n \n ;; VSX moves\n@@ -3224,3 +3244,261 @@\n   \"TARGET_P9_VECTOR\"\n   \"xvtstdc<VSs> %x0,%x1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n+\n+;; ISA 3.0 String Operations Support\n+\n+;; Compare vectors producing a vector result and a predicate, setting CR6\n+;; to indicate a combined status.  This pattern matches v16qi, v8hi, and\n+;; v4si modes.  It does not match v2df, v4sf, or v2di modes.  There's no\n+;; need to match the v2di mode because that is expanded into v4si.\n+(define_insn \"*vsx_ne_<mode>_p\"\n+  [(set (reg:CC CR6_REGNO)\n+\t(unspec:CC\n+\t [(ne:CC (match_operand:VSX_EXTRACT_I 1 \"gpc_reg_operand\" \"v\")\n+\t\t (match_operand:VSX_EXTRACT_I 2 \"gpc_reg_operand\" \"v\"))]\n+\t UNSPEC_PREDICATE))\n+   (set (match_operand:VSX_EXTRACT_I 0 \"gpc_reg_operand\" \"=v\")\n+\t(ne:VSX_EXTRACT_I (match_dup 1)\n+\t\t\t  (match_dup 2)))]\n+  \"TARGET_P9_VECTOR\"\n+  \"xvcmpne<VSX_EXTRACT_WIDTH>. %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; Compare vectors producing a vector result and a predicate, setting CR6\n+;; to indicate a combined status, for v4sf and v2df operands.\n+(define_insn \"*vsx_ne_<mode>_p\"\n+  [(set (reg:CC CR6_REGNO)\n+\t(unspec:CC [(ne:CC\n+\t\t     (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n+\t\t     (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\"))]\n+\t UNSPEC_PREDICATE))\n+   (set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n+\t(ne:VSX_F (match_dup 1)\n+\t\t  (match_dup 2)))]\n+  \"TARGET_P9_VECTOR\"\n+  \"xvcmpne<VSs>. %x0,%x1,%x2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"*vector_nez_<mode>_p\"\n+  [(set (reg:CC CR6_REGNO)\n+\t(unspec:CC [(unspec:VI\n+\t\t     [(match_operand:VI 1 \"gpc_reg_operand\" \"v\")\n+\t\t      (match_operand:VI 2 \"gpc_reg_operand\" \"v\")]\n+\t\t     UNSPEC_NEZ_P)]\n+\t UNSPEC_PREDICATE))\n+   (set (match_operand:VI 0 \"gpc_reg_operand\" \"=v\")\n+\t(unspec:VI [(match_dup 1)\n+\t\t    (match_dup 2)]\n+\t UNSPEC_NEZ_P))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vcmpnez<VSX_EXTRACT_WIDTH>. %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; Load VSX Vector with Length\n+(define_expand \"lxvl\"\n+  [(set (match_dup 3)\n+        (match_operand:DI 2 \"register_operand\"))\n+   (set (match_operand:V16QI 0 \"vsx_register_operand\")\n+\t(unspec:V16QI\n+\t [(match_operand:DI 1 \"gpc_reg_operand\")\n+\t  (match_dup 3)]\n+\t UNSPEC_LXVL))]\n+  \"TARGET_P9_VECTOR && TARGET_64BIT\"\n+{\n+  operands[3] = gen_reg_rtx (DImode);\n+})\n+\n+(define_insn \"*lxvl\"\n+  [(set (match_operand:V16QI 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:V16QI\n+\t [(match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n+\t  (match_operand:DI 2 \"register_operand\" \"+r\")]\n+\t UNSPEC_LXVL))]\n+  \"TARGET_P9_VECTOR && TARGET_64BIT\"\n+  \"sldi %2,%2, 56\\; lxvl %x0,%1,%2\"\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"vecload\")])\n+\n+;; Store VSX Vector with Length\n+(define_expand \"stxvl\"\n+  [(set (match_dup 3)\n+\t(match_operand:DI 2 \"register_operand\"))\n+   (set (mem:V16QI (match_operand:DI 1 \"gpc_reg_operand\"))\n+\t(unspec:V16QI\n+\t [(match_operand:V16QI 0 \"vsx_register_operand\")\n+\t  (match_dup 3)]\n+\t UNSPEC_STXVL))]\n+  \"TARGET_P9_VECTOR && TARGET_64BIT\"\n+{\n+  operands[3] = gen_reg_rtx (DImode);\n+})\n+\n+(define_insn \"*stxvl\"\n+  [(set (mem:V16QI (match_operand:DI 1 \"gpc_reg_operand\" \"b\"))\n+\t(unspec:V16QI\n+\t [(match_operand:V16QI 0 \"vsx_register_operand\" \"wa\")\n+\t  (match_operand:DI 2 \"register_operand\" \"+r\")]\n+\t UNSPEC_STXVL))]\n+  \"TARGET_P9_VECTOR && TARGET_64BIT\"\n+  \"sldi %2,%2\\;stxvl %x0,%1,%2\"\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"vecstore\")])\n+\n+;; Vector Compare Not Equal Byte\n+(define_insn \"vcmpneb\"\n+  [(set (match_operand:V16QI 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"altivec_register_operand\" \"v\")\n+\t\t       (match_operand:V16QI 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_VCMPNEB))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vcmpneb %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; Vector Compare Not Equal or Zero Byte\n+(define_insn \"vcmpnezb\"\n+  [(set (match_operand:V16QI 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:V16QI\n+\t [(match_operand:V16QI 1 \"altivec_register_operand\" \"v\")\n+\t  (match_operand:V16QI 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_VCMPNEZB))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vcmpnezb %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; Vector Compare Not Equal Half Word\n+(define_insn \"vcmpneh\"\n+  [(set (match_operand:V8HI 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:V8HI [(match_operand:V8HI 1 \"altivec_register_operand\" \"v\")\n+\t\t      (match_operand:V8HI 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_VCMPNEH))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vcmpneh %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; Vector Compare Not Equal or Zero Half Word\n+(define_insn \"vcmpnezh\"\n+  [(set (match_operand:V8HI 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:V8HI [(match_operand:V8HI 1 \"altivec_register_operand\" \"v\")\n+\t\t      (match_operand:V8HI 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_VCMPNEZH))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vcmpnezh %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; Vector Compare Not Equal Word\n+(define_insn \"vcmpnew\"\n+  [(set (match_operand:V4SI 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:V4SI\n+\t [(match_operand:V4SI 1 \"altivec_register_operand\" \"v\")\n+\t  (match_operand:V4SI 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_VCMPNEH))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vcmpnew %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; Vector Compare Not Equal Float or Double\n+(define_insn \"vcmpne<VSs>\"\n+  [(set (match_operand:<VSI> 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:<VSI>\n+\t [(match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n+\t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")]\n+\t UNSPEC_VCMPNEH))]\n+  \"TARGET_P9_VECTOR\"\n+  \"xvcmpne<VSs> %x0,%x1,%x2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; Vector Compare Not Equal or Zero Word\n+(define_insn \"vcmpnezw\"\n+  [(set (match_operand:V4SI 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"altivec_register_operand\" \"v\")\n+\t\t      (match_operand:V4SI 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_VCMPNEZW))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vcmpnezw %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; Vector Count Leading Zero Least-Significant Bits Byte\n+(define_insn \"vclzlsbb\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI\n+\t [(match_operand:V16QI 1 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_VCLZLSBB))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vclzlsbb %0,%1\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; Vector Count Trailing Zero Least-Significant Bits Byte\n+(define_insn \"vctzlsbb\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI\n+\t [(match_operand:V16QI 1 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_VCTZLSBB))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vctzlsbb %0,%1\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; Vector Extract Unsigned Byte Left-Indexed\n+(define_insn \"vextublx\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI\n+\t [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t  (match_operand:V16QI 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_VEXTUBLX))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vextublx %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; Vector Extract Unsigned Byte Right-Indexed\n+(define_insn \"vextubrx\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI\n+\t [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t  (match_operand:V16QI 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_VEXTUBRX))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vextubrx %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; Vector Extract Unsigned Half Word Left-Indexed\n+(define_insn \"vextuhlx\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI\n+\t [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t  (match_operand:V16QI 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_VEXTUHLX))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vextuhlx %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; Vector Extract Unsigned Half Word Right-Indexed\n+(define_insn \"vextuhrx\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI\n+\t [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t  (match_operand:V16QI 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_VEXTUHRX))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vextuhrx %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; Vector Extract Unsigned Word Left-Indexed\n+(define_insn \"vextuwlx\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI\n+\t [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t  (match_operand:V16QI 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_VEXTUWLX))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vextuwlx %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; Vector Extract Unsigned Word Right-Indexed\n+(define_insn \"vextuwrx\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI\n+\t [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t  (match_operand:V16QI 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_VEXTUWRX))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vextuwrx %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])"}, {"sha": "62a5f2963db51ce59ebf078531e24780fd5c2cfb", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -15137,6 +15137,139 @@ The @code{__builtin_dfp_dtstsfi_ov_dd} and\n require that the type of the @code{value} argument be\n @code{__Decimal64} and @code{__Decimal128} respectively.\n \n+The following built-in functions are also available for the PowerPC family\n+of processors, starting with ISA 3.0 or later\n+(@option{-mcpu=power9}).  These string functions are described\n+separately in order to group the descriptions closer to the function\n+prototypes:\n+@smallexample\n+int vec_all_nez (vector signed char, vector signed char);\n+int vec_all_nez (vector unsigned char, vector unsigned char);\n+int vec_all_nez (vector signed short, vector signed short);\n+int vec_all_nez (vector unsigned short, vector unsigned short);\n+int vec_all_nez (vector signed int, vector signed int);\n+int vec_all_nez (vector unsigned int, vector unsigned int);\n+\n+int vec_any_eqz (vector signed char, vector signed char);\n+int vec_any_eqz (vector unsigned char, vector unsigned char);\n+int vec_any_eqz (vector signed short, vector signed short);\n+int vec_any_eqz (vector unsigned short, vector unsigned short);\n+int vec_any_eqz (vector signed int, vector signed int);\n+int vec_any_eqz (vector unsigned int, vector unsigned int);\n+\n+vector bool char vec_cmpnez (vector signed char arg1, vector signed char arg2);\n+vector bool char vec_cmpnez (vector unsigned char arg1, vector unsigned char arg2);\n+vector bool short vec_cmpnez (vector signed short arg1, vector signed short arg2);\n+vector bool short vec_cmpnez (vector unsigned short arg1, vector unsigned short arg2);\n+vector bool int vec_cmpnez (vector signed int arg1, vector signed int arg2);\n+vector bool int vec_cmpnez (vector unsigned int, vector unsigned int);\n+\n+signed int vec_cntlz_lsbb (vector signed char);\n+signed int vec_cntlz_lsbb (vector unsigned char);\n+\n+signed int vec_cnttz_lsbb (vector signed char);\n+signed int vec_cnttz_lsbb (vector unsigned char);\n+\n+vector signed char vec_xl_len (signed char *addr, size_t len);\n+vector unsigned char vec_xl_len (unsigned char *addr, size_t len);\n+vector signed int vec_xl_len (signed int *addr, size_t len);\n+vector unsigned int vec_xl_len (unsigned int *addr, size_t len);\n+vector signed __int128 vec_xl_len (signed __int128 *addr, size_t len);\n+vector unsigned __int128 vec_xl_len (unsigned __int128 *addr, size_t len);\n+vector signed long long vec_xl_len (signed long long *addr, size_t len);\n+vector unsigned long long vec_xl_len (unsigned long long *addr, size_t len);\n+vector signed short vec_xl_len (signed short *addr, size_t len);\n+vector unsigned short vec_xl_len (unsigned short *addr, size_t len);\n+vector double vec_xl_len (double *addr, size_t len);\n+vector float vec_xl_len (float *addr, size_t len);\n+\n+void vec_xst_len (vector signed char data, signed char *addr, size_t len);\n+void vec_xst_len (vector unsigned char data, unsigned char *addr, size_t len);\n+void vec_xst_len (vector signed int data, signed int *addr, size_t len);\n+void vec_xst_len (vector unsigned int data, unsigned int *addr, size_t len);\n+void vec_xst_len (vector unsigned __int128 data, unsigned __int128 *addr, size_t len);\n+void vec_xst_len (vector signed long long data, signed long long *addr, size_t len);\n+void vec_xst_len (vector unsigned long long data, unsigned long long *addr, size_t len);\n+void vec_xst_len (vector signed short data, signed short *addr, size_t len);\n+void vec_xst_len (vector unsigned short data, unsigned short *addr, size_t len);\n+void vec_xst_len (vector signed __int128 data, signed __int128 *addr, size_t len);\n+void vec_xst_len (vector double data, double *addr, size_t len);\n+void vec_xst_len (vector float data, float *addr, size_t len);\n+\n+signed char vec_xlx (unsigned int index, vector signed char data);\n+unsigned char vec_xlx (unsigned int index, vector unsigned char data);\n+signed short vec_xlx (unsigned int index, vector signed short data);\n+unsigned short vec_xlx (unsigned int index, vector unsigned short data);\n+signed int vec_xlx (unsigned int index, vector signed int data);\n+unsigned int vec_xlx (unsigned int index, vector unsigned int data);\n+float vec_xlx (unsigned int index, vector float data);\n+\n+signed char vec_xrx (unsigned int index, vector signed char data);\n+unsigned char vec_xrx (unsigned int index, vector unsigned char data);\n+signed short vec_xrx (unsigned int index, vector signed short data);\n+unsigned short vec_xrx (unsigned int index, vector unsigned short data);\n+signed int vec_xrx (unsigned int index, vector signed int data);\n+unsigned int vec_xrx (unsigned int index, vector unsigned int data);\n+float vec_xrx (unsigned int index, vector float data);\n+@end smallexample\n+\n+The @code{vec_all_nez}, @code{vec_any_eqz}, and @code{vec_cmpnez}\n+perform pairwise comparisons between the elements at the same\n+positions within their two vector arguments.\n+The @code{vec_all_nez} function returns a\n+non-zero value if and only if all pairwise comparisons are not\n+equal and no element of either vector argument contains a zero.\n+The @code{vec_any_eqz} function returns a\n+non-zero value if and only if at least one pairwise comparison is equal\n+or if at least one element of either vector argument contains a zero.\n+The @code{vec_cmpnez} function returns a vector of the same type as\n+its two arguments, within which each element consists of all ones to\n+denote that either the corresponding elements of the incoming arguments are\n+not equal or that at least one of the corresponding elements contains\n+zero.  Otherwise, the element of the returned vector contains all zeros.\n+\n+The @code{vec_cntlz_lsbb} function returns the count of the number of\n+consecutive leading byte elements (starting from position 0 within the\n+supplied vector argument) for which the least-significant bit\n+equals zero.  The @code{vec_cnttz_lsbb} function returns the count of\n+the number of consecutive trailing byte elements (starting from\n+position 15 and counting backwards within the supplied vector\n+argument) for which the least-significant bit equals zero.\n+\n+The @code{vec_xl_len} and @code{vec_xst_len} functions require a\n+64-bit environment supporting ISA 3.0 or later.  The @code{vec_xl_len}\n+function loads a variable length vector from memory.  The\n+@code{vec_xst_len} function stores a variable length vector to memory.\n+With both the @code{vec_xl_len} and @code{vec_xst_len} functions, the\n+@code{addr} argument represents the memory address to or from which\n+data will be transferred, and the\n+@code{len} argument represents the number of bytes to be\n+transferred, as computed by the C expression @code{min((len & 0xff), 16)}.\n+If this expression's value is not a multiple of the vector element's\n+size, the behavior of this function is undefined.\n+In the case that the underlying computer is configured to run in\n+big-endian mode, the data transfer moves bytes 0 to @code{(len - 1)} of\n+the corresponding vector.  In little-endian mode, the data transfer\n+moves bytes @code{(16 - len)} to @code{15} of the corresponding\n+vector.  For the load function, any bytes of the result vector that\n+are not loaded from memory are set to zero.\n+The value of the @code{addr} argument need not be aligned on a\n+multiple of the vector's element size.\n+\n+The @code{vec_xlx} and @code{vec_xrx} functions extract the single\n+element selected by the @code{index} argument from the vector\n+represented by the @code{data} argument.  The @code{index} argument\n+always specifies a byte offset, regardless of the size of the vector\n+element.  With @code{vec_xlx}, @code{index} is the offset of the first\n+byte of the element to be extracted.  With @code{vec_xrx}, @code{index}\n+represents the last byte of the element to be extracted, measured\n+from the right end of the vector.  In other words, the last byte of\n+the element to be extracted is found at position @code{(15 - index)}.\n+There is no requirement that @code{index} be a multiple of the vector\n+element size.  However, if the size of the vector element added to\n+@code{index} is greater than 15, the content of the returned value is\n+undefined.\n+\n The following built-in functions are available for the PowerPC family\n of processors when hardware decimal floating point\n (@option{-mhard-dfp}) is available:"}, {"sha": "f80bc500a745b055425b888e73d6660f48b6291a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -1,3 +1,117 @@\n+2016-10-18  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/vsu/vec-all-ne-0.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-ne-1.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-ne-10.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-ne-11.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-ne-12.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-ne-13.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-ne-14.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-ne-2.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-ne-3.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-ne-4.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-ne-5.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-ne-6.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-ne-7.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-ne-8.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-ne-9.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-nez-1.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-nez-2.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-nez-3.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-nez-4.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-nez-5.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-nez-6.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-all-nez-7.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-0.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-1.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-10.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-11.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-12.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-13.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-14.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-2.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-3.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-4.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-5.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-6.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-7.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-8.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-9.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eqz-1.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eqz-2.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eqz-3.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eqz-4.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eqz-5.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eqz-6.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-any-eqz-7.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cmpne-0.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cmpne-1.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cmpne-2.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cmpne-3.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cmpne-4.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cmpne-5.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cmpne-6.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cmpne-8.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cmpne-9.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cmpnez-1.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cmpnez-2.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cmpnez-3.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cmpnez-4.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cmpnez-5.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cmpnez-6.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cmpnez-7.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cntlz-lsbb-0.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cntlz-lsbb-1.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cntlz-lsbb-2.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cnttz-lsbb-0.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cnttz-lsbb-1.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-cnttz-lsbb-2.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xl-len-0.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xl-len-1.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xl-len-10.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xl-len-11.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xl-len-12.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xl-len-13.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xl-len-2.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xl-len-3.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xl-len-4.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xl-len-5.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xl-len-6.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xl-len-7.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xl-len-8.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xl-len-9.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xlx-0.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xlx-1.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xlx-2.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xlx-3.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xlx-4.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xlx-5.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xlx-6.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xlx-7.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xrx-0.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xrx-1.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xrx-2.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xrx-3.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xrx-4.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xrx-5.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xrx-6.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xrx-7.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xst-len-0.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xst-len-1.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xst-len-10.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xst-len-11.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xst-len-12.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xst-len-13.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xst-len-2.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xst-len-3.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xst-len-4.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xst-len-5.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xst-len-6.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xst-len-7.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xst-len-8.c: New test.\n+\t* gcc.target/powerpc/vsu/vec-xst-len-9.c: New test.\n+\t* gcc.target/powerpc/vsu/vsu.exp: New file.\n+\n 2016-10-18  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/77991"}, {"sha": "120cb9b4d96f3f752fe2efc3609bc555e18ff439", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-0.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-0.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal (vector bool char *arg1_p, vector bool char *arg2_p)\n+{\n+  vector bool char arg_1 = *arg1_p;\n+  vector bool char arg_2 = *arg2_p;\n+\n+  return vec_all_ne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpneb.\" } } */"}, {"sha": "4647023199355a90efe128c2a1e2923d9be30b8b", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-1.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal (vector signed char *arg1_p, vector signed char *arg2_p)\n+{\n+  vector signed char arg_1 = *arg1_p;\n+  vector signed char arg_2 = *arg2_p;\n+\n+  return vec_all_ne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpneb.\" } } */"}, {"sha": "b3dfee75f670c4d84a1d6cad1cae0763d710073c", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-10.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-10.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal (vector unsigned long long *arg1_p,\n+\t\t    vector unsigned long long *arg2_p)\n+{\n+  vector unsigned long long arg_1 = *arg1_p;\n+  vector unsigned long long arg_2 = *arg2_p;\n+\n+  return vec_all_ne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnew.\" } } */"}, {"sha": "3a484896cca1c4de461e7ddec22ab714e8bb9e15", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-11.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-11.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal (vector pixel *arg1_p, vector pixel *arg2_p)\n+{\n+  vector pixel arg_1 = *arg1_p;\n+  vector pixel arg_2 = *arg2_p;\n+\n+  return vec_all_ne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpneh.\" } } */"}, {"sha": "752a2de18ee0f3a6bc5dfaa97e9220302bb60d74", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-12.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-12.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal (vector bool short *arg1_p, vector bool short *arg2_p)\n+{\n+  vector bool short arg_1 = *arg1_p;\n+  vector bool short arg_2 = *arg2_p;\n+\n+  return vec_all_ne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpneh.\" } } */"}, {"sha": "7ee0ab1f544a36f5c86830e2ee93d7a867223e94", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-13.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-13.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal (vector bool int *arg1_p, vector bool int *arg2_p)\n+{\n+  vector bool int arg_1 = *arg1_p;\n+  vector bool int arg_2 = *arg2_p;\n+\n+  return vec_all_ne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnew.\" } } */"}, {"sha": "555aaf570a731ec51e71d7c806384d5353159fdd", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-14.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-14.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal (vector bool long long *arg1_p, vector bool long long *arg2_p)\n+{\n+  vector bool long long arg_1 = *arg1_p;\n+  vector bool long long arg_2 = *arg2_p;\n+\n+  return vec_all_ne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnew.\" } } */"}, {"sha": "9f150c33d19309b685e057492fad30abbecbccf0", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-2.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal (vector unsigned char *arg1_p, vector unsigned char *arg2_p)\n+{\n+  vector unsigned char arg_1 = *arg1_p;\n+  vector unsigned char arg_2 = *arg2_p;\n+\n+  return vec_all_ne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpneb.\" } } */"}, {"sha": "1077aa9b976c2a7d0621515d05e79da78fef3487", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-3.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal (vector signed short *arg1_p, vector signed short *arg2_p)\n+{\n+  vector signed short arg_1 = *arg1_p;\n+  vector signed short arg_2 = *arg2_p;\n+\n+  return vec_all_ne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpneh.\" } } */"}, {"sha": "bbaa507814f080dfa5eb840dfc6c0a46cafe0f48", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-4.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal (vector unsigned short *arg1_p,\n+\t\t    vector unsigned short *arg2_p)\n+{\n+  vector unsigned short arg_1 = *arg1_p;\n+  vector unsigned short arg_2 = *arg2_p;\n+\n+  return vec_all_ne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpneh.\" } } */"}, {"sha": "e7dddbb5cadf9bc87325f8a8c62a7dd3fd682f00", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-5.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal (vector signed int *arg1_p, vector signed int *arg2_p)\n+{\n+  vector signed int arg_1 = *arg1_p;\n+  vector signed int arg_2 = *arg2_p;\n+\n+  return vec_all_ne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnew.\" } } */"}, {"sha": "7780bfbe924ff0ce07064dc78867af12ca637b28", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-6.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal (vector unsigned int *arg1_p, vector unsigned int *arg2_p)\n+{\n+  vector unsigned int arg_1 = *arg1_p;\n+  vector unsigned int arg_2 = *arg2_p;\n+\n+  return vec_all_ne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnew.\" } } */"}, {"sha": "e07bdd52e846f5099ff8641b39cc80b8d2ab0fa2", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-7.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-7.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal (vector float *arg1_p, vector float *arg2_p)\n+{\n+  vector float arg_1 = *arg1_p;\n+  vector float arg_2 = *arg2_p;\n+\n+  return vec_all_ne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"xvcmpnesp.\" } } */"}, {"sha": "2a07d9f5aea59e7594f4f1a7b8b378d9af9f7177", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-8.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-8.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal (vector double *arg1_p, vector double *arg2_p)\n+{\n+  vector double arg_1 = *arg1_p;\n+  vector double arg_2 = *arg2_p;\n+\n+  return vec_all_ne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"xvcmpnedp.\" } } */"}, {"sha": "138f5b2cc769ca8f1632b393361995a1914cff48", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-9.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-9.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal (vector long long *arg1_p, vector long long *arg2_p)\n+{\n+  vector long long arg_1 = *arg1_p;\n+  vector long long arg_2 = *arg2_p;\n+\n+  return vec_all_ne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnew.\" } } */"}, {"sha": "fffc16fef2be3d63ab143e3ee48d3f08278ced51", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-nez-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-1.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal_and_not_zero (vector signed char *arg1_p,\n+\t\t\t\t vector signed char *arg2_p)\n+{\n+  vector signed char arg_1 = *arg1_p;\n+  vector signed char arg_2 = *arg2_p;\n+\n+  return vec_all_nez (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnezb.\" } } */"}, {"sha": "69e13687c8303b4ddfa197b1753209350474d698", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-nez-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-2.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal_and_not_zero (vector unsigned char *arg1_p,\n+\t\t\t\t vector unsigned char *arg2_p)\n+{\n+  vector unsigned char arg_1 = *arg1_p;\n+  vector unsigned char arg_2 = *arg2_p;\n+\n+  return vec_all_nez (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnezb.\" } } */"}, {"sha": "e6efae9954dc5b96fec34ef12cbd3cfde070ef20", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-nez-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-3.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal_and_not_zero (vector signed short *arg1_p,\n+\t\t\t\t vector signed short *arg2_p)\n+{\n+  vector signed short arg_1 = *arg1_p;\n+  vector signed short arg_2 = *arg2_p;\n+\n+  return vec_all_nez (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnezh.\" } } */"}, {"sha": "8f85a39fa102e15323d90a753211cfcc896e76f8", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-nez-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-4.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal_and_not_zero (vector unsigned short *arg1_p,\n+\t\t\t\t vector unsigned short *arg2_p)\n+{\n+  vector unsigned short arg_1 = *arg1_p;\n+  vector unsigned short arg_2 = *arg2_p;\n+\n+  return vec_all_nez (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnezh.\" } } */"}, {"sha": "59d90cf346cc573f2b9bb453e2a945ff7702284a", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-nez-5.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-5.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal_and_not_zero (vector signed int *arg1_p,\n+\t\t\t\t vector signed int *arg2_p)\n+{\n+  vector signed int arg_1 = *arg1_p;\n+  vector signed int arg_2 = *arg2_p;\n+\n+  return vec_all_nez (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnezw.\" } } */"}, {"sha": "96a725d60eea3f5d7185c66bdc618af3a1c37286", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-nez-6.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-6.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal_and_not_zero (vector unsigned int *arg1_p,\n+\t\t\t\t vector unsigned int *arg2_p)\n+{\n+  vector unsigned int arg_1 = *arg1_p;\n+  vector unsigned int arg_2 = *arg2_p;\n+\n+  return vec_all_nez (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnezw.\" } } */"}, {"sha": "0939861fff814f8c7ff6f3755fa68baa8a3425ea", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-nez-7.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-7.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_all_not_equal_and_not_zero (vector unsigned short *arg1_p,\n+\t\t\t\t vector unsigned short *arg2_p)\n+{\n+  vector unsigned short arg_1 = *arg1_p;\n+  vector unsigned short arg_2 = *arg2_p;\n+\n+  return __builtin_vec_vcmpnez_p (__CR6_LT, arg_1, arg_2);\t/* { dg-error \"Builtin function __builtin_altivec_vcmpnezh_p requires\" } */\n+}"}, {"sha": "c3528e02ace6b6f5efbaa786955f9197efada655", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-0.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-0.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal (vector bool char *arg1_p, vector bool char *arg2_p)\n+{\n+  vector bool char arg_1 = *arg1_p;\n+  vector bool char arg_2 = *arg2_p;\n+\n+  return vec_any_eq (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpneb.\" } } */"}, {"sha": "fd2fd2eea875a1cb7e24cc7c823eb26ad5121416", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-1.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal (vector signed char *arg1_p, vector signed char *arg2_p)\n+{\n+  vector signed char arg_1 = *arg1_p;\n+  vector signed char arg_2 = *arg2_p;\n+\n+  return vec_any_eq (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpneb.\" } } */"}, {"sha": "f7a26eff0ed1a6193272acab1f7a024a8c9d88b2", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-10.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-10.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal (vector unsigned long long *arg1_p,\n+\t\tvector unsigned long long *arg2_p)\n+{\n+  vector unsigned long long arg_1 = *arg1_p;\n+  vector unsigned long long arg_2 = *arg2_p;\n+\n+  return vec_any_eq (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnew.\" } } */"}, {"sha": "8ec9e53210149f8d158f196f66adf4d8be6fa926", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-11.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-11.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal (vector pixel *arg1_p, vector pixel *arg2_p)\n+{\n+  vector pixel arg_1 = *arg1_p;\n+  vector pixel arg_2 = *arg2_p;\n+\n+  return vec_any_eq (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpneh.\" } } */"}, {"sha": "54584fef7d3a7da14ed427f7a2271b7677f07545", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-12.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-12.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal (vector bool short *arg1_p, vector bool short *arg2_p)\n+{\n+  vector bool short arg_1 = *arg1_p;\n+  vector bool short arg_2 = *arg2_p;\n+\n+  return vec_any_eq (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpneh.\" } } */"}, {"sha": "1fe9d5feee0459a4c5e0b118ad0c88c6ef838c10", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-13.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-13.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal (vector bool int *arg1_p, vector bool int *arg2_p)\n+{\n+  vector bool int arg_1 = *arg1_p;\n+  vector bool int arg_2 = *arg2_p;\n+\n+  return vec_any_eq (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnew.\" } } */"}, {"sha": "9f4f6576ab3c5dcb07347df2a608226d6e4abc8f", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-14.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-14.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal (vector bool long long *arg1_p, vector bool long long *arg2_p)\n+{\n+  vector bool long long arg_1 = *arg1_p;\n+  vector bool long long arg_2 = *arg2_p;\n+\n+  return vec_any_eq (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnew.\" } } */"}, {"sha": "333220d80b84591ba87d464910d38fd7a67f4c9f", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-2.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal (vector unsigned char *arg1_p, vector unsigned char *arg2_p)\n+{\n+  vector unsigned char arg_1 = *arg1_p;\n+  vector unsigned char arg_2 = *arg2_p;\n+\n+  return vec_any_eq (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpneb.\" } } */"}, {"sha": "7ce47179b1575c9fecb9b8cc23736f491ce1db5d", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-3.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal (vector signed short *arg1_p, vector signed short *arg2_p)\n+{\n+  vector signed short arg_1 = *arg1_p;\n+  vector signed short arg_2 = *arg2_p;\n+\n+  return vec_any_eq (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpneh.\" } } */"}, {"sha": "d53f449bd8a48fb62fd38fa2c407c0502a8781be", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-4.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal (vector unsigned short *arg1_p,\n+\t\tvector unsigned short *arg2_p)\n+{\n+  vector unsigned short arg_1 = *arg1_p;\n+  vector unsigned short arg_2 = *arg2_p;\n+\n+  return vec_any_eq (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpneh.\" } } */"}, {"sha": "72f9d413143e6965e7bc3302146bbbe4b29e7119", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-5.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal (vector signed int *arg1_p, vector signed int *arg2_p)\n+{\n+  vector signed int arg_1 = *arg1_p;\n+  vector signed int arg_2 = *arg2_p;\n+\n+  return vec_any_eq (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnew.\" } } */"}, {"sha": "6b2c4fd03f216549a5ec18855bd4e7d23053e257", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-6.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal (vector unsigned int *arg1_p, vector unsigned int *arg2_p)\n+{\n+  vector unsigned int arg_1 = *arg1_p;\n+  vector unsigned int arg_2 = *arg2_p;\n+\n+  return vec_any_eq (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnew.\" } } */"}, {"sha": "19f420f66446e34364e07d13ecbc496dfc8a5b94", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-7.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-7.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal (vector float *arg1_p, vector float *arg2_p)\n+{\n+  vector float arg_1 = *arg1_p;\n+  vector float arg_2 = *arg2_p;\n+\n+  return vec_any_eq (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"xvcmpnesp.\" } } */"}, {"sha": "fba9a1fbea0491a534c282e0091e4586c6f9fd67", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-8.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-8.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal (vector double *arg1_p, vector double *arg2_p)\n+{\n+  vector double arg_1 = *arg1_p;\n+  vector double arg_2 = *arg2_p;\n+\n+  return vec_any_eq (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"xvcmpnedp.\" } } */"}, {"sha": "a6ca0ac8d72568eef0d8f24a6f5c5c53c0d553a0", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-9.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-9.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal (vector long long *arg1_p, vector long long *arg2_p)\n+{\n+  vector long long arg_1 = *arg1_p;\n+  vector long long arg_2 = *arg2_p;\n+\n+  return vec_any_eq (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnew.\" } } */"}, {"sha": "569b56931890fc3c354bdf4a25a2cce75c1f7dbb", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eqz-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-1.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal_or_zero (vector signed char *arg1_p, vector signed char *arg2_p)\n+{\n+  vector signed char arg_1 = *arg1_p;\n+  vector signed char arg_2 = *arg2_p;\n+\n+  return vec_any_eqz (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnezb.\" } } */"}, {"sha": "884c646753cd6e5be2434e828cc430f72d12f2aa", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eqz-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-2.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal_or_zero (vector unsigned char *arg1_p,\n+\t\t\tvector unsigned char *arg2_p)\n+{\n+  vector unsigned char arg_1 = *arg1_p;\n+  vector unsigned char arg_2 = *arg2_p;\n+\n+  return vec_any_eqz (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnezb.\" } } */"}, {"sha": "5046712f03296ef486cb721b566facece6c975ba", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eqz-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-3.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal_or_zero (vector signed short *arg1_p,\n+\t\t\tvector signed short *arg2_p)\n+{\n+  vector signed short arg_1 = *arg1_p;\n+  vector signed short arg_2 = *arg2_p;\n+\n+  return vec_any_eqz (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnezh.\" } } */"}, {"sha": "f8aa11ea2d8ed2b99c88c624ae8163fe163e95f1", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eqz-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-4.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal_or_zero (vector unsigned short *arg1_p,\n+\t\t\tvector unsigned short *arg2_p)\n+{\n+  vector unsigned short arg_1 = *arg1_p;\n+  vector unsigned short arg_2 = *arg2_p;\n+\n+  return vec_any_eqz (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnezh.\" } } */"}, {"sha": "eb4c258b3b714ecf088ad643e1d2f6abb1846f4c", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eqz-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-5.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal_or_zero (vector signed int *arg1_p, vector signed int *arg2_p)\n+{\n+  vector signed int arg_1 = *arg1_p;\n+  vector signed int arg_2 = *arg2_p;\n+\n+  return vec_any_eqz (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnezw.\" } } */"}, {"sha": "47da90281da6a3144ac671c8f9cc51baec01c9b5", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eqz-6.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-6.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal_or_zero (vector unsigned int *arg1_p,\n+\t\t\tvector unsigned int *arg2_p)\n+{\n+  vector unsigned int arg_1 = *arg1_p;\n+  vector unsigned int arg_2 = *arg2_p;\n+\n+  return vec_any_eqz (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnezw.\" } } */"}, {"sha": "6ea69ece57fcfb1d73c9e09d909de81c8b635cc8", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eqz-7.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-7.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int\n+test_any_equal (vector unsigned int *arg1_p, vector unsigned int *arg2_p)\n+{\n+  vector unsigned int arg_1 = *arg1_p;\n+  vector unsigned int arg_2 = *arg2_p;\n+\n+  return __builtin_vec_vcmpnez_p (__CR6_LT_REV, arg_1, arg_2);\t/* { dg-error \"Builtin function __builtin_altivec_vcmpnezw_p requires\" } */\n+}"}, {"sha": "8e036e3e2c930583ca33f6ea3ef5b90453ec00dd", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpne-0.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-0.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+vector bool char\n+fetch_data (vector bool char *arg1_p, vector bool char *arg2_p)\n+{\n+  vector bool char arg_1 = *arg1_p;\n+  vector bool char arg_2 = *arg2_p;\n+\n+  return vec_cmpne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpneb\" } } */"}, {"sha": "e510a448a81a1749ec829f56cadedc33cde04e15", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpne-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-1.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+vector bool char\n+fetch_data (vector signed char *arg1_p, vector signed char *arg2_p)\n+{\n+  vector signed char arg_1 = *arg1_p;\n+  vector signed char arg_2 = *arg2_p;\n+\n+  return vec_cmpne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpneb\" } } */"}, {"sha": "0ea5aa79dc6af0d2d2e0234699580f6725ba4530", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpne-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-2.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+vector bool char\n+fetch_data (vector unsigned char *arg1_p, vector unsigned char *arg2_p)\n+{\n+  vector unsigned char arg_1 = *arg1_p;\n+  vector unsigned char arg_2 = *arg2_p;\n+\n+  return vec_cmpne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpneb\" } } */"}, {"sha": "6bb5ebe24e48637ec3ba520eb8a3c046de3b6224", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpne-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-3.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+vector bool short\n+fetch_data (vector signed short *arg1_p, vector signed short *arg2_p)\n+{\n+  vector signed short arg_1 = *arg1_p;\n+  vector signed short arg_2 = *arg2_p;\n+\n+  return vec_cmpne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpneh\" } } */"}, {"sha": "a8d3f1753783c959cfcd4a340bcd1680e67807b4", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpne-4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-4.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+vector bool short\n+fetch_data (vector unsigned short *arg1_p, vector unsigned short *arg2_p)\n+{\n+  vector unsigned short arg_1 = *arg1_p;\n+  vector unsigned short arg_2 = *arg2_p;\n+\n+  return vec_cmpne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpneh\" } } */"}, {"sha": "dae3e2291e21e44d57a91ef5e6415126429686a9", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpne-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-5.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+vector bool int\n+fetch_data (vector signed int *arg1_p, vector signed int *arg2_p)\n+{\n+  vector signed int arg_1 = *arg1_p;\n+  vector signed int arg_2 = *arg2_p;\n+\n+  return vec_cmpne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnew\" } } */"}, {"sha": "550a3531afdeb550e272cf6f94bd2f55844c8b06", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpne-6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-6.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+vector bool int\n+fetch_data (vector unsigned int *arg1_p, vector unsigned int *arg2_p)\n+{\n+  vector unsigned int arg_1 = *arg1_p;\n+  vector unsigned int arg_2 = *arg2_p;\n+\n+  return vec_cmpne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnew\" } } */"}, {"sha": "5196ef0e9d98d9566810ca50601853a554301c92", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpne-8.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-8.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+vector bool int\n+fetch_data (vector float *arg1_p, vector float *arg2_p)\n+{\n+  vector float arg_1 = *arg1_p;\n+  vector float arg_2 = *arg2_p;\n+\n+  return vec_cmpne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"xvcmpnesp\" } } */"}, {"sha": "48682f08499cfa78e31c34e22143bf0420fcf97a", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpne-9.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-9.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+vector bool long long\n+fetch_data (vector double *arg1_p, vector double *arg2_p)\n+{\n+  vector double arg_1 = *arg1_p;\n+  vector double arg_2 = *arg2_p;\n+\n+  return vec_cmpne (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"xvcmpnedp\" } } */"}, {"sha": "04e0ded99c83c9dff3fd20ff02a414ad315fd8e2", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpnez-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-1.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+vector bool char\n+fetch_data (vector signed char *arg1_p, vector signed char *arg2_p)\n+{\n+  vector signed char arg_1 = *arg1_p;\n+  vector signed char arg_2 = *arg2_p;\n+\n+  return vec_cmpnez (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnezb\" } } */"}, {"sha": "1ed428c1d3f5786a2b4fd4ddcb32433ae8698f1a", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpnez-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-2.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+vector bool char\n+fetch_data (vector unsigned char *arg1_p, vector unsigned char *arg2_p)\n+{\n+  vector unsigned char arg_1 = *arg1_p;\n+  vector unsigned char arg_2 = *arg2_p;\n+\n+  return vec_cmpnez (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnezb\" } } */"}, {"sha": "d2dae513cbc02bbf5bd932151dc6fe34a69a8202", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpnez-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-3.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+vector bool short\n+fetch_data (vector signed short *arg1_p, vector signed short *arg2_p)\n+{\n+  vector signed short arg_1 = *arg1_p;\n+  vector signed short arg_2 = *arg2_p;\n+\n+  return vec_cmpnez (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnezh\" } } */"}, {"sha": "99bd61d62f73a407e8a6f659ee4e31190753ad11", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpnez-4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-4.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+vector bool short\n+fetch_data (vector unsigned short *arg1_p, vector unsigned short *arg2_p)\n+{\n+  vector unsigned short arg_1 = *arg1_p;\n+  vector unsigned short arg_2 = *arg2_p;\n+\n+  return vec_cmpnez (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnezh\" } } */"}, {"sha": "bbc52bdef9029f8230e8ed09f30110f66444ddd5", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpnez-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-5.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+vector bool int\n+fetch_data (vector signed int *arg1_p, vector signed int *arg2_p)\n+{\n+  vector signed int arg_1 = *arg1_p;\n+  vector signed int arg_2 = *arg2_p;\n+\n+  return vec_cmpnez (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnezw\" } } */"}, {"sha": "64423359e5177691348c1393ef4e0af2ae145dbe", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpnez-6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-6.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+vector bool int\n+fetch_data (vector unsigned int *arg1_p, vector unsigned int *arg2_p)\n+{\n+  vector unsigned int arg_1 = *arg1_p;\n+  vector unsigned int arg_2 = *arg2_p;\n+\n+  return vec_cmpnez (arg_1, arg_2);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmpnezw\" } } */"}, {"sha": "06eb8d7cec613ddb41423b4eae07c6b77f488617", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpnez-7.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-7.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+vector bool int\n+fetch_data (vector unsigned int *arg1_p, vector unsigned int *arg2_p)\n+{\n+  vector unsigned int arg_1 = *arg1_p;\n+  vector unsigned int arg_2 = *arg2_p;\n+\n+  return __builtin_vec_vcmpnez (arg_1, arg_2);\t/* { dg-error \"Builtin function __builtin_altivec_vcmpnezw requires the -mcpu=power9 option\" } */\n+}"}, {"sha": "f1c2739157ef3a84339eec3e697265e106e8d576", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cntlz-lsbb-0.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cntlz-lsbb-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cntlz-lsbb-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cntlz-lsbb-0.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+count_leading_zero_byte_bits (vector signed char *arg1_p)\n+{\n+  vector signed char arg_1 = *arg1_p;\n+\n+  return vec_cntlz_lsbb (arg_1);\n+}\n+\n+/* { dg-final { scan-assembler \"vclzlsbb\" } } */"}, {"sha": "5d3c1b5877e5acfd85ee43a62119268b08f17f1d", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cntlz-lsbb-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cntlz-lsbb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cntlz-lsbb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cntlz-lsbb-1.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+count_leading_zero_byte_bits (vector unsigned char *arg1_p)\n+{\n+  vector unsigned char arg_1 = *arg1_p;\n+\n+  return vec_cntlz_lsbb (arg_1);\n+}\n+\n+/* { dg-final { scan-assembler \"vclzlsbb\" } } */"}, {"sha": "f1f30092bd3735576382d1a6ad68e2e95dc29a93", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cntlz-lsbb-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cntlz-lsbb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cntlz-lsbb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cntlz-lsbb-2.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int\n+count_leading_zero_byte_bits (vector unsigned char *arg1_p)\n+{\n+  vector unsigned char arg_1 = *arg1_p;\n+\n+  return __builtin_vec_vclzlsbb (arg_1);\t/* { dg-error \"Builtin function __builtin_altivec_vclzlsbb requires the -mcpu=power9 option\" } */\n+}"}, {"sha": "01bea9eee8773d46081a52be4a04a33e8c2e98f4", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cnttz-lsbb-0.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cnttz-lsbb-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cnttz-lsbb-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cnttz-lsbb-0.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+count_trailing_zero_byte_bits (vector signed char *arg1_p)\n+{\n+  vector signed char arg_1 = *arg1_p;\n+\n+  return vec_cnttz_lsbb (arg_1);\n+}\n+\n+/* { dg-final { scan-assembler \"vctzlsbb\" } } */"}, {"sha": "ba04eb9da2e0c9b972e53354c4b2ce5c4169e7b0", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cnttz-lsbb-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cnttz-lsbb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cnttz-lsbb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cnttz-lsbb-1.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int\n+count_trailing_zero_byte_bits (vector unsigned char *arg1_p)\n+{\n+  vector unsigned char arg_1 = *arg1_p;\n+\n+  return vec_cnttz_lsbb (arg_1);\n+}\n+\n+/* { dg-final { scan-assembler \"vctzlsbb\" } } */"}, {"sha": "4d6182b02c7c3fc812835722ed6ea2691cdc0f22", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cnttz-lsbb-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cnttz-lsbb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cnttz-lsbb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cnttz-lsbb-2.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int\n+count_trailing_zero_byte_bits (vector unsigned char *arg1_p)\n+{\n+  vector unsigned char arg_1 = *arg1_p;\n+\n+  return __builtin_vec_vctzlsbb (arg_1);\t/* { dg-error \"Builtin function __builtin_altivec_vctzlsbb requires the -mcpu=power9 option\" } */\n+}"}, {"sha": "36c937fc94469596de57cbf0bd80f5718691e21c", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xl-len-0.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-0.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+__vector signed char\n+fetch_data (signed char *address, size_t length)\n+{\n+  return vec_xl_len (address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"lxvl\" } } */"}, {"sha": "8c68d134ecaeab208ea66e95ebfc6d0b1c2abada", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xl-len-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-1.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+__vector unsigned char\n+fetch_data (unsigned char *address, size_t length)\n+{\n+  return vec_xl_len (address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"lxvl\" } } */"}, {"sha": "dc95c02e21a08c80090c086f607a5c5833e9d0fa", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xl-len-10.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-10.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+__vector double\n+fetch_data (double *address, size_t length)\n+{\n+  return vec_xl_len (address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"lxvl\" } } */"}, {"sha": "7745278fb7cbadca1d32bece2edb6e9ddbc21e37", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xl-len-11.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-11.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+__vector float\n+fetch_data (float *address, size_t length)\n+{\n+  return vec_xl_len (address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"lxvl\" } } */"}, {"sha": "6e81b38393621360b81ccd1f9e3187fc4d65f21c", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xl-len-12.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-12.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+/* The vec_xl_len() function is not available on power8 configurations.  */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+__vector float\n+fetch_data (float *address, size_t length)\n+{\n+  return __builtin_vec_lxvl (address, length); /* { dg-error \"Builtin function __builtin_vsx_lxvl requires\" } */\n+}"}, {"sha": "58d364131ba3f2a77912feeebddd63c3c833b2cc", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xl-len-13.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-13.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+/* This test only runs on 32-bit configurations, where a compiler\n+   error should be issued because this built-in function is not\n+   available on 32-bit configurations. */\n+\n+__vector float\n+fetch_data (float *address, size_t length)\n+{\n+  return __builtin_vec_lxvl (address, length);\t/* { dg-error \"Builtin function __builtin_vec_lxvl not supported in this compiler configuration\" } */\n+}"}, {"sha": "cb265a429f3659cac780290a97fac508146ec09f", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xl-len-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-2.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+__vector signed int\n+fetch_data (signed int *address, size_t length)\n+{\n+  return vec_xl_len (address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"lxvl\" } } */"}, {"sha": "f3241e39868808f9f866ae93dc8ab57c47b31228", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xl-len-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-3.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+__vector unsigned int\n+fetch_data (unsigned int *address, size_t length)\n+{\n+  return vec_xl_len (address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"lxvl\" } } */"}, {"sha": "4f3d003e788cd8882da9e90e754d9b55a4ee2406", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xl-len-4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-4.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+__vector signed __int128\n+fetch_data (signed __int128 *address, size_t length)\n+{\n+  return vec_xl_len (address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"lxvl\" } } */"}, {"sha": "ba313f63d2582035fcea62f5afa96b66643ff279", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xl-len-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-5.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+__vector unsigned __int128\n+fetch_data (unsigned __int128 *address, size_t length)\n+{\n+  return vec_xl_len (address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"lxvl\" } } */"}, {"sha": "4fae8956ee91a97a3e40489ec55f77a7adbe5647", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xl-len-6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-6.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+__vector signed long long\n+fetch_data (signed long long *address, size_t length)\n+{\n+  return vec_xl_len (address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"lxvl\" } } */"}, {"sha": "1b155ec899254ff9e9f0d1bb5ba4bfcb9a69ac02", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xl-len-7.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-7.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+__vector unsigned long long\n+fetch_data (unsigned long long *address, size_t length)\n+{\n+  return vec_xl_len (address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"lxvl\" } } */"}, {"sha": "2edc5c6409ee804308c373c447d9ab0c8c50dd6c", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xl-len-8.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-8.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+__vector signed short\n+fetch_data (signed short *address, size_t length)\n+{\n+  return vec_xl_len (address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"lxvl\" } } */"}, {"sha": "0d19a6f379f2d4d5f9612c5ac6ea111dc843960a", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xl-len-9.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-9.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+__vector unsigned short\n+fetch_data (unsigned short *address, size_t length)\n+{\n+  return vec_xl_len (address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"lxvl\" } } */"}, {"sha": "2107a3f6da479ae25e920d835aabe87c497479b4", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xlx-0.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-0.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+signed char\n+fetch_data (unsigned int offset, vector signed char *datap)\n+{\n+  vector signed char data = *datap;\n+\n+  return vec_xlx (offset, data);\n+}\n+\n+/* { dg-final { scan-assembler \"vextublx\" } } */"}, {"sha": "1bbdafa73b389b04f3f9f2a6a82a874c49a146b5", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xlx-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-1.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+unsigned char\n+fetch_data (unsigned int offset, vector unsigned char *datap)\n+{\n+  vector unsigned char data = *datap;\n+\n+  return vec_xlx (offset, data);\n+}\n+\n+/* { dg-final { scan-assembler \"vextublx\" } } */"}, {"sha": "4d417481ed6139cccc364e3ad7e512099533269a", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xlx-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-2.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+signed short\n+fetch_data (unsigned int offset, vector signed short *datap)\n+{\n+  vector signed short data = *datap;\n+\n+  return vec_xlx (offset, data);\n+}\n+\n+/* { dg-final { scan-assembler \"vextuhlx\" } } */"}, {"sha": "d34c0606dc9c821b6555f641d5a463c7f8ce8af3", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xlx-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-3.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+unsigned short\n+fetch_data (unsigned int offset, vector unsigned short *datap)\n+{\n+  vector unsigned short data = *datap;\n+\n+  return vec_xlx (offset, data);\n+}\n+\n+/* { dg-final { scan-assembler \"vextuhlx\" } } */"}, {"sha": "47b86baf375a3576529f45834aef04139af0adcb", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xlx-4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-4.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+signed int\n+fetch_data (unsigned int offset, vector signed int *datap)\n+{\n+  vector signed int data = *datap;\n+\n+  return vec_xlx (offset, data);\n+}\n+\n+/* { dg-final { scan-assembler \"vextuwlx\" } } */"}, {"sha": "2c7147ef15813173cedd5ecfc423fce26ef3fbd9", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xlx-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-5.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+unsigned int\n+fetch_data (unsigned int offset, vector unsigned int *datap)\n+{\n+  vector unsigned int data = *datap;\n+\n+  return vec_xlx (offset, data);\n+}\n+\n+/* { dg-final { scan-assembler \"vextuwlx\" } } */"}, {"sha": "a2b810013821105e3812aff12f5c69b2b022378e", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xlx-6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-6.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+float\n+fetch_data (unsigned int offset, vector float *datap)\n+{\n+  vector float data = *datap;\n+\n+  return vec_xlx (offset, data);\n+}\n+\n+/* { dg-final { scan-assembler \"vextuwlx\" } } */"}, {"sha": "2fc5567b043f00362ad9f0bb477636d8bfffa829", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xlx-7.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xlx-7.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+signed int\n+fetch_data (unsigned int offset, vector signed int *datap)\n+{\n+  vector signed int data = *datap;\n+\n+  return __builtin_vec_vextulx (offset, data);\t/* { dg-error \"Builtin function __builtin_altivec_vextuwlx requires\" } */\n+}"}, {"sha": "b4e57815ac86416d71d3551e4c52fd4f2f80a01d", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xrx-0.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-0.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+signed char\n+fetch_data (unsigned int offset, vector signed char *datap)\n+{\n+  vector signed char data = *datap;\n+\n+  return vec_xrx (offset, data);\n+}\n+\n+/* { dg-final { scan-assembler \"vextubrx\" } } */"}, {"sha": "8165d16de9c80943793437ff4a7bb0c964e55599", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xrx-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-1.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+unsigned char\n+fetch_data (unsigned int offset, vector unsigned char *datap)\n+{\n+  vector unsigned char data = *datap;\n+\n+  return vec_xrx (offset, data);\n+}\n+\n+/* { dg-final { scan-assembler \"vextubrx\" } } */"}, {"sha": "928cfc65f852e303f8f0927cd299005e76175dd4", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xrx-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-2.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+signed short\n+fetch_data (unsigned int offset, vector signed short *datap)\n+{\n+  vector signed short data = *datap;\n+\n+  return vec_xrx (offset, data);\n+}\n+\n+/* { dg-final { scan-assembler \"vextuhrx\" } } */"}, {"sha": "e96300524bf0e8c20406993f9b78b92884e93ef5", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xrx-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-3.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+unsigned short\n+fetch_data (unsigned int offset, vector unsigned short *datap)\n+{\n+  vector unsigned short data = *datap;\n+\n+  return vec_xrx (offset, data);\n+}\n+\n+/* { dg-final { scan-assembler \"vextuhrx\" } } */"}, {"sha": "2b74f07a3fb4e95ffce4b299fd7b425235c348b4", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xrx-4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-4.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+signed int\n+fetch_data (unsigned int offset, vector signed int *datap)\n+{\n+  vector signed int data = *datap;\n+\n+  return vec_xrx (offset, data);\n+}\n+\n+/* { dg-final { scan-assembler \"vextuwrx\" } } */"}, {"sha": "f58c9bad3af9f521eb9c12766073d6421c8f5536", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xrx-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-5.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+unsigned int\n+fetch_data (unsigned int offset, vector unsigned int *datap)\n+{\n+  vector unsigned int data = *datap;\n+\n+  return vec_xrx (offset, data);\n+}\n+\n+/* { dg-final { scan-assembler \"vextuwrx\" } } */"}, {"sha": "ae88f8c22eacead64f379e3c6b8e0658af555dbe", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xrx-6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-6.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+float\n+fetch_data (unsigned int offset, vector float *datap)\n+{\n+  vector float data = *datap;\n+\n+  return vec_xrx (offset, data);\n+}\n+\n+/* { dg-final { scan-assembler \"vextuwrx\" } } */"}, {"sha": "fb82157ca10320dc0960b68e0d9317aff543a1fc", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xrx-7.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xrx-7.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+signed short\n+fetch_data (unsigned short offset, vector signed short *datap)\n+{\n+  vector signed short data = *datap;\n+\n+  return __builtin_vec_vexturx (offset, data);\t/* { dg-error \"Builtin function __builtin_altivec_vextuhrx requires\" } */\n+}"}, {"sha": "835b6830e7e3a8d99d4f0c4c822d59d9712996ad", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xst-len-0.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-0.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+void\n+store_data (vector signed char *datap, signed char *address, size_t length)\n+{\n+  vector signed char data = *datap;\n+\n+  vec_xst_len (data, address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"stxvl\" } } */"}, {"sha": "40c17d32ea4dd811d16d484a4e6d8927ac198ac5", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xst-len-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-1.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+void\n+store_data (vector unsigned char *datap, unsigned char *address, size_t length)\n+{\n+  vector unsigned char data = *datap;\n+\n+  vec_xst_len (data, address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"stxvl\" } } */"}, {"sha": "62516e68961a74729e80d1c0d8f7e846d7acc50f", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xst-len-10.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-10.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+void\n+store_data (vector double *datap, double *address, size_t length)\n+{\n+  vector double data = *datap;\n+\n+  vec_xst_len (data, address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"stxvl\" } } */"}, {"sha": "d52161a04efce346aa24004753a965e3ce425fc6", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xst-len-11.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-11.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+void\n+store_data (vector float *datap, float *address, size_t length)\n+{\n+  vector float data = *datap;\n+\n+  vec_xst_len (data, address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"stxvl\" } } */"}, {"sha": "ad8fa703917a024208d77fc7dd8b9c6489818cc0", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xst-len-12.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-12.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+/* The vec_xst_len() function is not available on power8 configurations.  */\n+\n+void\n+store_data (vector double *datap, double *address, size_t length)\n+{\n+  vector double data = *datap;\n+\n+  __builtin_vec_stxvl (data, address, length); /* { dg-error \"Builtin function __builtin_altivec_stxvl requires\" } */\n+}"}, {"sha": "cc07b3a7f640da15d4c2022d600ad3fc7a12a65f", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xst-len-13.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-13.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+/* This test only runs on 32-bit configurations, where a compiler\n+   error should be issued because this built-in function is not\n+   available on 32-bit configurations. */\n+void\n+store_data (vector double *datap, double *address, size_t length)\n+{\n+  vector double data = *datap;\n+\n+  __builtin_vec_stxvl (data, address, length); /* { dg-error \"Builtin function __builtin_altivec_stxvl requires\" } */\n+}"}, {"sha": "7171161a458f8076099fb6382d7692c3a1867956", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xst-len-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-2.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+void\n+store_data (vector signed int *datap, signed int *address, size_t length)\n+{\n+  vector signed int data = *datap;\n+\n+  vec_xst_len (data, address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"stxvl\" } } */"}, {"sha": "5feb672c26b8af0bf6734bcbda3a3da1da7802cb", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xst-len-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-3.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+void\n+store_data (vector unsigned int *datap, unsigned int *address, size_t length)\n+{\n+  vector unsigned int data = *datap;\n+\n+  vec_xst_len (data, address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"stxvl\" } } */"}, {"sha": "d3210072037bc162dd3e9e080b98f84d4631cbb3", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xst-len-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-4.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+void\n+store_data (vector signed __int128 *datap, signed __int128 *address,\n+\t    size_t length)\n+{\n+  vector signed __int128 data = *datap;\n+\n+  vec_xst_len (data, address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"stxvl\" } } */"}, {"sha": "9acc7df172f06ed057d433efaaf69dc962f7571c", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xst-len-5.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-5.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+void\n+store_data (vector unsigned __int128 *datap, unsigned __int128 *address,\n+\t    size_t length)\n+{\n+  vector unsigned __int128 data = *datap;\n+\n+  vec_xst_len (data, address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"stxvl\" } } */"}, {"sha": "f27fe095edfbe8199cdeb2d8f8177c7d5aede1fb", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xst-len-6.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-6.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+void\n+store_data (vector signed long long *datap, signed long long *address,\n+\t    size_t length)\n+{\n+  vector signed long long data = *datap;\n+\n+  vec_xst_len (data, address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"stxvl\" } } */"}, {"sha": "a91c9b29cca32afadbcef301554e3bd688401ace", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xst-len-7.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-7.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+void\n+store_data (vector unsigned long long *datap, unsigned long long *address,\n+\t    size_t length)\n+{\n+  vector unsigned long long data = *datap;\n+\n+  vec_xst_len (data, address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"stxvl\" } } */"}, {"sha": "f76bdd33d4f192957582a17d7681309a5cdb6460", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xst-len-8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-8.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+void\n+store_data (vector signed short *datap, signed short *address,  size_t length)\n+{\n+  vector signed short data = *datap;\n+\n+  vec_xst_len (data, address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"stxvl\" } } */"}, {"sha": "9aabeddf7764c49b48027827327d4b672795916f", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xst-len-9.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-9.c?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+void\n+store_data (vector unsigned short *datap, unsigned short *address,\n+\t    size_t length)\n+{\n+  vector unsigned short data = *datap;\n+\n+  vec_xst_len (data, address, length);\n+}\n+\n+/* { dg-final { scan-assembler \"sldi\" } } */\n+/* { dg-final { scan-assembler \"stxvl\" } } */"}, {"sha": "fcce6961a11f1b4967a6b6ade9503fc8e62f3dac", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vsu.exp", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvsu.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cb7b191fd4fbfcdcae940467f8a9375bea004/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvsu.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvsu.exp?ref=902cb7b191fd4fbfcdcae940467f8a9375bea004", "patch": "@@ -0,0 +1,40 @@\n+# Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Exit immediately if this isn't a PowerPC target or if the target is aix.\n+if { (![istarget powerpc*-*-*] && ![istarget rs6000-*-*])\n+     || [istarget \"powerpc*-*-aix*\"] } then {\n+  return\n+}\n+\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+  set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+load_lib torture-options.exp\n+\n+# Initialize.\n+dg-init\n+\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.c*]] \"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}]}