{"sha": "bf561f2ba32d1a67ff832688a0117ece05578034", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY1NjFmMmJhMzJkMWE2N2ZmODMyNjg4YTAxMTdlY2UwNTU3ODAzNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-17T07:02:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-17T07:02:51Z"}, "message": "[multiple changes]\n\n2014-07-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch9.adb (Buid_Protected_Subprogram_Call): Preserve type\n\tof function call for later use when shared passive objects\n\tare involved.\n\n2014-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* par-ch13.adb (Get_Aspect_Specifications):\n\tCatch a case where the argument of SPARK aspect Refined_State\n\tis not properly parenthesized.\n\n2014-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch6.adb (Expand_Ctrl_Function_Call): Do not extend\n\tthe lifetime of a reference to an Ada 2012 container element.\n\t(Is_Element_Reference): New routine.\n\n2014-07-17  Robert Dewar  <dewar@adacore.com>\n\n\t* ali.ads: Minor comment fix.\n\t* lib-writ.adb: Minor reformatting.\n\n2014-07-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch10.adb (Analyze_Proper_Body): When analyzing a subunit\n\tin ASIS mode, load another subunit only if it a subunit of the\n\tcurrent one, not a sibling that has been reached through the\n\tanalysis of an ancestor. This allows the construction of the\n\tASIS tree for the subunit even when sibling subunits have errors.\n\n2014-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Declarations): Remove the guard which\n\tprevents the analysis of various contracts when the associated\n\tconstruct is erroneous.\n\t* sem_util.adb (Save_SPARK_Mode_And_Set): Do not query the\n\tSPARK_Pragma of an illegal or a partially decorated construct.\n\nFrom-SVN: r212734", "tree": {"sha": "a13d5654db0cdbd543772cd26442fcdfa1c46754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a13d5654db0cdbd543772cd26442fcdfa1c46754"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf561f2ba32d1a67ff832688a0117ece05578034", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf561f2ba32d1a67ff832688a0117ece05578034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf561f2ba32d1a67ff832688a0117ece05578034", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf561f2ba32d1a67ff832688a0117ece05578034/comments", "author": null, "committer": null, "parents": [{"sha": "8a5e4b2a8ab7536be83e5a3b9715a02527cb08dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5e4b2a8ab7536be83e5a3b9715a02527cb08dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a5e4b2a8ab7536be83e5a3b9715a02527cb08dc"}], "stats": {"total": 173, "additions": 146, "deletions": 27}, "files": [{"sha": "cb09d4807c70717bd6a0fc07b6ac8e4877db7526", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf561f2ba32d1a67ff832688a0117ece05578034/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf561f2ba32d1a67ff832688a0117ece05578034/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bf561f2ba32d1a67ff832688a0117ece05578034", "patch": "@@ -1,3 +1,42 @@\n+2014-07-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch9.adb (Buid_Protected_Subprogram_Call): Preserve type\n+\tof function call for later use when shared passive objects\n+\tare involved.\n+\n+2014-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* par-ch13.adb (Get_Aspect_Specifications):\n+\tCatch a case where the argument of SPARK aspect Refined_State\n+\tis not properly parenthesized.\n+\n+2014-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Ctrl_Function_Call): Do not extend\n+\tthe lifetime of a reference to an Ada 2012 container element.\n+\t(Is_Element_Reference): New routine.\n+\n+2014-07-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* ali.ads: Minor comment fix.\n+\t* lib-writ.adb: Minor reformatting.\n+\n+2014-07-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch10.adb (Analyze_Proper_Body): When analyzing a subunit\n+\tin ASIS mode, load another subunit only if it a subunit of the\n+\tcurrent one, not a sibling that has been reached through the\n+\tanalysis of an ancestor. This allows the construction of the\n+\tASIS tree for the subunit even when sibling subunits have errors.\n+\n+2014-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Declarations): Remove the guard which\n+\tprevents the analysis of various contracts when the associated\n+\tconstruct is erroneous.\n+\t* sem_util.adb (Save_SPARK_Mode_And_Set): Do not query the\n+\tSPARK_Pragma of an illegal or a partially decorated construct.\n+\n 2014-07-17  Robert Dewar  <dewar@adacore.com>\n \n \t* s-imguns.ads: Minor reformatting."}, {"sha": "d95d01d2e34c57181305b8160e600fcd4d392ced", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf561f2ba32d1a67ff832688a0117ece05578034/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf561f2ba32d1a67ff832688a0117ece05578034/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=bf561f2ba32d1a67ff832688a0117ece05578034", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -289,7 +289,7 @@ package ALI is\n       Set_Elab_Entity : Boolean;\n       --  Indicates presence of EE parameter for a unit which has an\n       --  elaboration entity which must be set true as part of the\n-      --  elaboration of the entity.\n+      --  elaboration of the unit.\n \n       Has_RACW : Boolean;\n       --  Indicates presence of RA parameter for a package that declares at"}, {"sha": "4c8e94876f41ebb96dfe0a7e08d37d71f22696ff", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf561f2ba32d1a67ff832688a0117ece05578034/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf561f2ba32d1a67ff832688a0117ece05578034/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=bf561f2ba32d1a67ff832688a0117ece05578034", "patch": "@@ -4195,6 +4195,33 @@ package body Exp_Ch6 is\n    -------------------------------\n \n    procedure Expand_Ctrl_Function_Call (N : Node_Id) is\n+      function Is_Element_Reference (N : Node_Id) return Boolean;\n+      --  Determine whether node N denotes a reference to an Ada 2012 container\n+      --  element.\n+\n+      --------------------------\n+      -- Is_Element_Reference --\n+      --------------------------\n+\n+      function Is_Element_Reference (N : Node_Id) return Boolean is\n+         Ref : constant Node_Id := Original_Node (N);\n+\n+      begin\n+         --  Analysis marks an element reference by setting the generalized\n+         --  indexing attribute of an indexed component before the component\n+         --  is rewritten into a function call.\n+\n+         return\n+           Nkind (Ref) = N_Indexed_Component\n+             and then Present (Generalized_Indexing (Ref));\n+      end Is_Element_Reference;\n+\n+      --  Local variables\n+\n+      Is_Elem_Ref : constant Boolean := Is_Element_Reference (N);\n+\n+   --  Start of processing for Expand_Ctrl_Function_Call\n+\n    begin\n       --  Optimization, if the returned value (which is on the sec-stack) is\n       --  returned again, no need to copy/readjust/finalize, we can just pass\n@@ -4216,12 +4243,17 @@ package body Exp_Ch6 is\n \n       Remove_Side_Effects (N);\n \n-      --  When the temporary function result appears inside a case or an if\n-      --  expression, its lifetime must be extended to match that of the\n-      --  context. If not, the function result would be finalized prematurely\n-      --  and the evaluation of the expression could yield the wrong result.\n-\n-      if Within_Case_Or_If_Expression (N)\n+      --  When the temporary function result appears inside a case expression\n+      --  or an if expression, its lifetime must be extended to match that of\n+      --  the context. If not, the function result will be finalized too early\n+      --  and the evaluation of the expression could yield incorrect result. An\n+      --  exception to this rule are references to Ada 2012 container elements.\n+      --  Such references must be finalized at the end of each iteration of the\n+      --  related quantified expression, otherwise the container will remain\n+      --  busy.\n+\n+      if not Is_Elem_Ref\n+        and then Within_Case_Or_If_Expression (N)\n         and then Nkind (N) = N_Explicit_Dereference\n       then\n          Set_Is_Processed_Transient (Entity (Prefix (N)));"}, {"sha": "8faf3347ba375f9e96e2527344f819970601f3b9", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf561f2ba32d1a67ff832688a0117ece05578034/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf561f2ba32d1a67ff832688a0117ece05578034/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=bf561f2ba32d1a67ff832688a0117ece05578034", "patch": "@@ -4379,6 +4379,12 @@ package body Exp_Ch9 is\n            Make_Function_Call (Loc,\n              Name                   => New_Sub,\n              Parameter_Associations => Params));\n+\n+         --  Preserve type of call for subsequent processing (required for\n+         --  call to Wrap_Transient_Expression in the case of a shared passive\n+         --  protected).\n+\n+         Set_Etype (N, Etype (New_Sub));\n       end if;\n \n       if External"}, {"sha": "44dc4150c62d579e46bb37a8a7a4093880890834", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf561f2ba32d1a67ff832688a0117ece05578034/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf561f2ba32d1a67ff832688a0117ece05578034/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=bf561f2ba32d1a67ff832688a0117ece05578034", "patch": "@@ -428,10 +428,8 @@ package body Lib.Writ is\n          --  If this is a spec ...\n \n          if (Is_Subprogram (Uent)\n-               or else\n-             Ekind (Uent) = E_Package\n-               or else\n-             Is_Generic_Unit (Uent))\n+               or else Ekind (Uent) = E_Package\n+               or else Is_Generic_Unit (Uent))\n \n             --  and an elaboration entity was declared ...\n "}, {"sha": "387c83ef83913d71987bd3c04dde520223985550", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf561f2ba32d1a67ff832688a0117ece05578034/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf561f2ba32d1a67ff832688a0117ece05578034/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=bf561f2ba32d1a67ff832688a0117ece05578034", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -308,8 +308,8 @@ package body Ch13 is\n                end if;\n \n                --  Detect a common error where the non-null definition of\n-               --  aspect Depends, Global, Refined_Depends or Refined_Global\n-               --  must be enclosed in parentheses.\n+               --  aspect Depends, Global, Refined_Depends, Refined_Global\n+               --  or Refined_State lacks enclosing parentheses.\n \n                if Token /= Tok_Left_Paren and then Token /= Tok_Null then\n \n@@ -400,6 +400,48 @@ package body Ch13 is\n                            Restore_Scan_State (Scan_State);\n                         end if;\n                      end;\n+\n+                  --  Refined_State\n+\n+                  elsif A_Id = Aspect_Refined_State then\n+                     if Token = Tok_Identifier then\n+                        declare\n+                           Scan_State : Saved_Scan_State;\n+\n+                        begin\n+                           Save_Scan_State (Scan_State);\n+                           Scan;  --  past state\n+\n+                           --  The refinement contains a constituent, the whole\n+                           --  argument of Refined_State must be parenthesized.\n+\n+                           --    with Refined_State => State => Constit\n+\n+                           if Token = Tok_Arrow then\n+                              Restore_Scan_State (Scan_State);\n+                              Error_Msg_SC -- CODEFIX\n+                                (\"missing \"\"(\"\"\");\n+                              Resync_Past_Malformed_Aspect;\n+\n+                              --  Return when the current aspect is the last\n+                              --  in the list of specifications and the list\n+                              --  applies to a body.\n+\n+                              if Token = Tok_Is then\n+                                 return Aspects;\n+                              end if;\n+\n+                           --  The refinement lacks constituents. Do not flag\n+                           --  this case as the error would be misleading. The\n+                           --  diagnostic is left to the analysis.\n+\n+                           --    with Refined_State => State\n+\n+                           else\n+                              Restore_Scan_State (Scan_State);\n+                           end if;\n+                        end;\n+                     end if;\n                   end if;\n                end if;\n "}, {"sha": "8330c427da133e25be3834f942fb46eca22991db", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf561f2ba32d1a67ff832688a0117ece05578034/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf561f2ba32d1a67ff832688a0117ece05578034/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=bf561f2ba32d1a67ff832688a0117ece05578034", "patch": "@@ -1703,12 +1703,16 @@ package body Sem_Ch10 is\n       --  If the main unit is a subunit, then we are just performing semantic\n       --  analysis on that subunit, and any other subunits of any parent unit\n       --  should be ignored, except that if we are building trees for ASIS\n-      --  usage we want to annotate the stub properly.\n+      --  usage we want to annotate the stub properly. If the main unit is\n+      --  itself a subunit, another subunit is irrelevant unless it is a\n+      --  subunit of the current one.\n \n       elsif Nkind (Unit (Cunit (Main_Unit))) = N_Subunit\n         and then Subunit_Name /= Unit_Name (Main_Unit)\n       then\n-         if ASIS_Mode then\n+         if ASIS_Mode\n+           and then Scope (Defining_Entity (N)) = Cunit_Entity (Main_Unit)\n+         then\n             Optional_Subunit;\n          end if;\n "}, {"sha": "1a02abf2ffcb037c5d36ad75b45fc875585f163a", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf561f2ba32d1a67ff832688a0117ece05578034/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf561f2ba32d1a67ff832688a0117ece05578034/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=bf561f2ba32d1a67ff832688a0117ece05578034", "patch": "@@ -2366,14 +2366,11 @@ package body Sem_Ch3 is\n \n       --  Analyze the contracts of subprogram declarations, subprogram bodies\n       --  and variables now due to the delayed visibility requirements of their\n-      --  aspects. Skip analysis if the declaration already has an error.\n+      --  aspects.\n \n       Decl := First (L);\n       while Present (Decl) loop\n-         if Error_Posted (Decl) then\n-            null;\n-\n-         elsif Nkind (Decl) = N_Object_Declaration then\n+         if Nkind (Decl) = N_Object_Declaration then\n             Analyze_Object_Contract (Defining_Entity (Decl));\n \n          elsif Nkind_In (Decl, N_Abstract_Subprogram_Declaration,"}, {"sha": "709a548ef14faf01894541f7d978a52daa4f972c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf561f2ba32d1a67ff832688a0117ece05578034/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf561f2ba32d1a67ff832688a0117ece05578034/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=bf561f2ba32d1a67ff832688a0117ece05578034", "patch": "@@ -15672,17 +15672,18 @@ package body Sem_Util is\n      (Context : Entity_Id;\n       Mode    : out SPARK_Mode_Type)\n    is\n-      Prag : constant Node_Id := SPARK_Pragma (Context);\n-\n    begin\n       --  Save the current mode in effect\n \n       Mode := SPARK_Mode;\n \n-      --  Set the mode of the context as the current SPARK mode\n+      --  Do not consider illegal or partially decorated constructs\n+\n+      if Ekind (Context) = E_Void or else Error_Posted (Context) then\n+         null;\n \n-      if Present (Prag) then\n-         SPARK_Mode := Get_SPARK_Mode_From_Pragma (Prag);\n+      elsif Present (SPARK_Pragma (Context)) then\n+         SPARK_Mode := Get_SPARK_Mode_From_Pragma (SPARK_Pragma (Context));\n       end if;\n    end Save_SPARK_Mode_And_Set;\n "}]}