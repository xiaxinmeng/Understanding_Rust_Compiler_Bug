{"sha": "81c356975fc26ab5f9306bd9c596ef7232287fcb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFjMzU2OTc1ZmMyNmFiNWY5MzA2YmQ5YzU5NmVmNzIzMjI4N2ZjYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-04-03T10:10:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-16T13:07:13Z"}, "message": "[Ada] ACATS 4.1K - B452001 - No errors detected\n\n2020-06-16  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch4.adb (Analyze_Membership_Op): Reset entity of equality\n\tnodes for membership tests with singletons.\n\t(Analyze_User_Defined_Binary_Op): Always perform the analysis\n\tsince nodes coming from the expander also may refer to non\n\tstandard operators as part of membership expansion.\n\t* exp_ch4.adb (Expand_Set_Membership.Make_Cond): Reset entity of\n\tequality node.\n\t* sem_type.ads: Fix typo in comment.", "tree": {"sha": "d2d0dbb6868a162bce0b13e3b950be6520258efb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2d0dbb6868a162bce0b13e3b950be6520258efb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81c356975fc26ab5f9306bd9c596ef7232287fcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81c356975fc26ab5f9306bd9c596ef7232287fcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81c356975fc26ab5f9306bd9c596ef7232287fcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81c356975fc26ab5f9306bd9c596ef7232287fcb/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29b82c7d55c818bd25b98e0f9469cbe6adec0e34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29b82c7d55c818bd25b98e0f9469cbe6adec0e34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29b82c7d55c818bd25b98e0f9469cbe6adec0e34"}], "stats": {"total": 101, "additions": 50, "deletions": 51}, "files": [{"sha": "f5ad90a4111858d56893aa8e580752ec645471de", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81c356975fc26ab5f9306bd9c596ef7232287fcb/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81c356975fc26ab5f9306bd9c596ef7232287fcb/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=81c356975fc26ab5f9306bd9c596ef7232287fcb", "patch": "@@ -12716,6 +12716,11 @@ package body Exp_Ch4 is\n               Make_Op_Eq (Sloc (Alt),\n                 Left_Opnd  => L,\n                 Right_Opnd => R);\n+\n+            --  We reset the Entity since we do not want to bypass the operator\n+            --  resolution.\n+\n+            Set_Entity (Cond, Empty);\n          end if;\n \n          return Cond;"}, {"sha": "445122fd91eb35c7d6deddd67d317b9af2d8ca3c", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 44, "deletions": 50, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81c356975fc26ab5f9306bd9c596ef7232287fcb/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81c356975fc26ab5f9306bd9c596ef7232287fcb/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=81c356975fc26ab5f9306bd9c596ef7232287fcb", "patch": "@@ -2965,6 +2965,8 @@ package body Sem_Ch4 is\n          end if;\n       end Analyze_Set_Membership;\n \n+      Op : Node_Id;\n+\n    --  Start of processing for Analyze_Membership_Op\n \n    begin\n@@ -3011,17 +3013,16 @@ package body Sem_Ch4 is\n            and then Has_Compatible_Type (R, Etype (L))\n          then\n             if Nkind (N) = N_In then\n-               Rewrite (N,\n-                 Make_Op_Eq (Loc,\n-                   Left_Opnd  => L,\n-                   Right_Opnd => R));\n+               Op := Make_Op_Eq (Loc, Left_Opnd  => L, Right_Opnd => R);\n             else\n-               Rewrite (N,\n-                 Make_Op_Ne (Loc,\n-                   Left_Opnd  => L,\n-                   Right_Opnd => R));\n+               Op := Make_Op_Ne (Loc, Left_Opnd  => L, Right_Opnd => R);\n             end if;\n \n+            --  We reset the Entity since we do not want to bypass the operator\n+            --  resolution.\n+\n+            Set_Entity (Op, Empty);\n+            Rewrite (N, Op);\n             Analyze (N);\n             return;\n \n@@ -5595,54 +5596,47 @@ package body Sem_Ch4 is\n \n    procedure Analyze_User_Defined_Binary_Op\n      (N     : Node_Id;\n-      Op_Id : Entity_Id)\n-   is\n+      Op_Id : Entity_Id) is\n    begin\n-      --  Only do analysis if the operator Comes_From_Source, since otherwise\n-      --  the operator was generated by the expander, and all such operators\n-      --  always refer to the operators in package Standard.\n-\n-      if Comes_From_Source (N) then\n-         declare\n-            F1 : constant Entity_Id := First_Formal (Op_Id);\n-            F2 : constant Entity_Id := Next_Formal (F1);\n-\n-         begin\n-            --  Verify that Op_Id is a visible binary function. Note that since\n-            --  we know Op_Id is overloaded, potentially use visible means use\n-            --  visible for sure (RM 9.4(11)).\n+      declare\n+         F1 : constant Entity_Id := First_Formal (Op_Id);\n+         F2 : constant Entity_Id := Next_Formal (F1);\n \n-            if Ekind (Op_Id) = E_Function\n-              and then Present (F2)\n-              and then (Is_Immediately_Visible (Op_Id)\n-                         or else Is_Potentially_Use_Visible (Op_Id))\n-              and then Has_Compatible_Type (Left_Opnd (N), Etype (F1))\n-              and then Has_Compatible_Type (Right_Opnd (N), Etype (F2))\n-            then\n-               Add_One_Interp (N, Op_Id, Etype (Op_Id));\n+      begin\n+         --  Verify that Op_Id is a visible binary function. Note that since\n+         --  we know Op_Id is overloaded, potentially use visible means use\n+         --  visible for sure (RM 9.4(11)).\n+\n+         if Ekind (Op_Id) = E_Function\n+           and then Present (F2)\n+           and then (Is_Immediately_Visible (Op_Id)\n+                      or else Is_Potentially_Use_Visible (Op_Id))\n+           and then Has_Compatible_Type (Left_Opnd (N), Etype (F1))\n+           and then Has_Compatible_Type (Right_Opnd (N), Etype (F2))\n+         then\n+            Add_One_Interp (N, Op_Id, Etype (Op_Id));\n \n-               --  If the left operand is overloaded, indicate that the current\n-               --  type is a viable candidate. This is redundant in most cases,\n-               --  but for equality and comparison operators where the context\n-               --  does not impose a type on the operands, setting the proper\n-               --  type is necessary to avoid subsequent ambiguities during\n-               --  resolution, when both user-defined and predefined operators\n-               --  may be candidates.\n+            --  If the left operand is overloaded, indicate that the current\n+            --  type is a viable candidate. This is redundant in most cases,\n+            --  but for equality and comparison operators where the context\n+            --  does not impose a type on the operands, setting the proper\n+            --  type is necessary to avoid subsequent ambiguities during\n+            --  resolution, when both user-defined and predefined operators\n+            --  may be candidates.\n \n-               if Is_Overloaded (Left_Opnd (N)) then\n-                  Set_Etype (Left_Opnd (N), Etype (F1));\n-               end if;\n+            if Is_Overloaded (Left_Opnd (N)) then\n+               Set_Etype (Left_Opnd (N), Etype (F1));\n+            end if;\n \n-               if Debug_Flag_E then\n-                  Write_Str (\"user defined operator \");\n-                  Write_Name (Chars (Op_Id));\n-                  Write_Str (\" on node \");\n-                  Write_Int (Int (N));\n-                  Write_Eol;\n-               end if;\n+            if Debug_Flag_E then\n+               Write_Str (\"user defined operator \");\n+               Write_Name (Chars (Op_Id));\n+               Write_Str (\" on node \");\n+               Write_Int (Int (N));\n+               Write_Eol;\n             end if;\n-         end;\n-      end if;\n+         end if;\n+      end;\n    end Analyze_User_Defined_Binary_Op;\n \n    -----------------------------------"}, {"sha": "6c6d5eb7fb550db9d550f3f77e7932ba67de5a4c", "filename": "gcc/ada/sem_type.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81c356975fc26ab5f9306bd9c596ef7232287fcb/gcc%2Fada%2Fsem_type.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81c356975fc26ab5f9306bd9c596ef7232287fcb/gcc%2Fada%2Fsem_type.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.ads?ref=81c356975fc26ab5f9306bd9c596ef7232287fcb", "patch": "@@ -196,7 +196,7 @@ package Sem_Type is\n    --  a compatible one.\n \n    function Hides_Op (F : Entity_Id; Op : Entity_Id) return Boolean;\n-   --  A user-defined function hides a predefined operator if it is matches the\n+   --  A user-defined function hides a predefined operator if it matches the\n    --  signature of the operator, and is declared in an open scope, or in the\n    --  scope of the result type.\n "}]}