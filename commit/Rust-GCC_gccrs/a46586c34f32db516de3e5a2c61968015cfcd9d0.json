{"sha": "a46586c34f32db516de3e5a2c61968015cfcd9d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ2NTg2YzM0ZjMyZGI1MTZkZTNlNWEyYzYxOTY4MDE1Y2ZjZDlkMA==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2017-03-08T14:28:38Z"}, "committer": {"name": "Markus Trippelsdorf", "email": "trippels@gcc.gnu.org", "date": "2017-03-08T14:28:38Z"}, "message": "Fix PR demangler/70909 and 67264 (endless demangler recursion)\n\nChangeLog:\n\n       PR demangler/70909\n       PR demangler/67264\n       * include/demangle.h: Add d_printing to struct demangle_component\n       and pass struct demangle_component as non const.\n\nlibiberty/ChangeLog:\n\n       PR demangler/70909\n       PR demangler/67264\n       * cp-demangle.c: Fix endless recursion. Pass\n       struct demangle_component as non const.\n       (d_make_empty): Initialize variable.\n       (d_print_comp_inner): Limit recursion.\n       (d_print_comp): Decrement variable.\n       * cp-demint.c (cplus_demangle_fill_component): Initialize\n       variable.\n       (cplus_demangle_fill_builtin_type): Likewise.\n       (cplus_demangle_fill_operator): Likewise.\n       * testsuite/demangle-expected: Add tests.\n\nFrom-SVN: r245978", "tree": {"sha": "1d24f195851c031e0d3f5a1d72300583d1befa25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d24f195851c031e0d3f5a1d72300583d1befa25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a46586c34f32db516de3e5a2c61968015cfcd9d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46586c34f32db516de3e5a2c61968015cfcd9d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a46586c34f32db516de3e5a2c61968015cfcd9d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46586c34f32db516de3e5a2c61968015cfcd9d0/comments", "author": null, "committer": null, "parents": [{"sha": "121eb024c878d3b2474a3715d5250227af9613f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/121eb024c878d3b2474a3715d5250227af9613f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/121eb024c878d3b2474a3715d5250227af9613f7"}], "stats": {"total": 124, "additions": 97, "deletions": 27}, "files": [{"sha": "27168c89e62858835e6f7f7e3394af9d29fdf01c", "filename": "ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46586c34f32db516de3e5a2c61968015cfcd9d0/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46586c34f32db516de3e5a2c61968015cfcd9d0/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=a46586c34f32db516de3e5a2c61968015cfcd9d0", "patch": "@@ -1,3 +1,10 @@\n+2017-03-08  Mark Wielaard  <mark@klomp.org>\n+\n+\tPR demangler/70909\n+\tPR demangler/67264\n+\t* include/demangle.h: Add d_printing to struct demangle_component\n+\tand pass struct demangle_component as non const.\n+\n 2017-02-26  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* MAINTAINERS: Remove Neil Booth as option handling maintainer."}, {"sha": "996203b2d786570e5a481a670f9bef774cb1f985", "filename": "include/demangle.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46586c34f32db516de3e5a2c61968015cfcd9d0/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46586c34f32db516de3e5a2c61968015cfcd9d0/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=a46586c34f32db516de3e5a2c61968015cfcd9d0", "patch": "@@ -494,6 +494,11 @@ struct demangle_component\n   /* The type of this component.  */\n   enum demangle_component_type type;\n \n+  /* Guard against recursive component printing.\n+     Initialize to zero.  Private to d_print_comp.\n+     All other fields are final after initialization.  */\n+  int d_printing;\n+\n   union\n   {\n     /* For DEMANGLE_COMPONENT_NAME.  */\n@@ -688,7 +693,7 @@ cplus_demangle_v3_components (const char *mangled, int options, void **mem);\n \n extern char *\n cplus_demangle_print (int options,\n-                      const struct demangle_component *tree,\n+                      struct demangle_component *tree,\n                       int estimated_length,\n                       size_t *p_allocated_size);\n \n@@ -708,7 +713,7 @@ cplus_demangle_print (int options,\n \n extern int\n cplus_demangle_print_callback (int options,\n-                               const struct demangle_component *tree,\n+                               struct demangle_component *tree,\n                                demangle_callbackref callback, void *opaque);\n \n #ifdef __cplusplus"}, {"sha": "e93e327749dab56ec6c1b8cab9980289e3a22c1d", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46586c34f32db516de3e5a2c61968015cfcd9d0/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46586c34f32db516de3e5a2c61968015cfcd9d0/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=a46586c34f32db516de3e5a2c61968015cfcd9d0", "patch": "@@ -1,3 +1,18 @@\n+2017-03-08  Mark Wielaard  <mark@klomp.org>\n+\n+\tPR demangler/70909\n+\tPR demangler/67264\n+\t* cp-demangle.c: Fix endless recursion. Pass\n+\tstruct demangle_component as non const.\n+\t(d_make_empty): Initialize variable.\n+\t(d_print_comp_inner): Limit recursion.\n+\t(d_print_comp): Decrement variable.\n+\t* cp-demint.c (cplus_demangle_fill_component): Initialize\n+\tvariable.\n+\t(cplus_demangle_fill_builtin_type): Likewise.\n+\t(cplus_demangle_fill_operator): Likewise.\n+\t* testsuite/demangle-expected: Add tests.\n+\n 2017-01-18  Markus Trippelsdorf  <markus@trippelsdorf.de>\n \n \tPR PR c++/70182"}, {"sha": "341a4182c0b69148052c6aa104a29415aca015d3", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46586c34f32db516de3e5a2c61968015cfcd9d0/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46586c34f32db516de3e5a2c61968015cfcd9d0/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=a46586c34f32db516de3e5a2c61968015cfcd9d0", "patch": "@@ -172,10 +172,10 @@ static struct demangle_component *d_mangled_name (struct d_info *, int);\n static struct demangle_component *d_type (struct d_info *);\n \n #define cplus_demangle_print d_print\n-static char *d_print (int, const struct demangle_component *, int, size_t *);\n+static char *d_print (int, struct demangle_component *, int, size_t *);\n \n #define cplus_demangle_print_callback d_print_callback\n-static int d_print_callback (int, const struct demangle_component *,\n+static int d_print_callback (int, struct demangle_component *,\n                              demangle_callbackref, void *);\n \n #define cplus_demangle_init_info d_init_info\n@@ -264,7 +264,7 @@ struct d_print_mod\n      in which they appeared in the mangled string.  */\n   struct d_print_mod *next;\n   /* The modifier.  */\n-  const struct demangle_component *mod;\n+  struct demangle_component *mod;\n   /* Whether this modifier was printed.  */\n   int printed;\n   /* The list of templates which applies to this modifier.  */\n@@ -530,7 +530,7 @@ static inline void d_append_string (struct d_print_info *, const char *);\n static inline char d_last_char (struct d_print_info *);\n \n static void\n-d_print_comp (struct d_print_info *, int, const struct demangle_component *);\n+d_print_comp (struct d_print_info *, int, struct demangle_component *);\n \n static void\n d_print_java_identifier (struct d_print_info *, const char *, int);\n@@ -539,25 +539,25 @@ static void\n d_print_mod_list (struct d_print_info *, int, struct d_print_mod *, int);\n \n static void\n-d_print_mod (struct d_print_info *, int, const struct demangle_component *);\n+d_print_mod (struct d_print_info *, int, struct demangle_component *);\n \n static void\n d_print_function_type (struct d_print_info *, int,\n-                       const struct demangle_component *,\n+                       struct demangle_component *,\n                        struct d_print_mod *);\n \n static void\n d_print_array_type (struct d_print_info *, int,\n-                    const struct demangle_component *,\n+                    struct demangle_component *,\n                     struct d_print_mod *);\n \n static void\n-d_print_expr_op (struct d_print_info *, int, const struct demangle_component *);\n+d_print_expr_op (struct d_print_info *, int, struct demangle_component *);\n \n static void d_print_cast (struct d_print_info *, int,\n-\t\t\t  const struct demangle_component *);\n+\t\t\t  struct demangle_component *);\n static void d_print_conversion (struct d_print_info *, int,\n-\t\t\t\tconst struct demangle_component *);\n+\t\t\t\tstruct demangle_component *);\n \n static int d_demangle_callback (const char *, int,\n                                 demangle_callbackref, void *);\n@@ -923,6 +923,7 @@ d_make_empty (struct d_info *di)\n   if (di->next_comp >= di->num_comps)\n     return NULL;\n   p = &di->comps[di->next_comp];\n+  p->d_printing = 0;\n   ++di->next_comp;\n   return p;\n }\n@@ -4249,7 +4250,7 @@ d_last_char (struct d_print_info *dpi)\n CP_STATIC_IF_GLIBCPP_V3\n int\n cplus_demangle_print_callback (int options,\n-                               const struct demangle_component *dc,\n+                               struct demangle_component *dc,\n                                demangle_callbackref callback, void *opaque)\n {\n   struct d_print_info dpi;\n@@ -4292,7 +4293,7 @@ cplus_demangle_print_callback (int options,\n \n CP_STATIC_IF_GLIBCPP_V3\n char *\n-cplus_demangle_print (int options, const struct demangle_component *dc,\n+cplus_demangle_print (int options, struct demangle_component *dc,\n                       int estimate, size_t *palc)\n {\n   struct d_growable_string dgs;\n@@ -4452,7 +4453,7 @@ d_args_length (struct d_print_info *dpi, const struct demangle_component *dc)\n \n static void\n d_print_subexpr (struct d_print_info *dpi, int options,\n-\t\t const struct demangle_component *dc)\n+\t\t struct demangle_component *dc)\n {\n   int simple = 0;\n   if (dc->type == DEMANGLE_COMPONENT_NAME\n@@ -4528,9 +4529,9 @@ d_get_saved_scope (struct d_print_info *dpi,\n \n static int\n d_maybe_print_fold_expression (struct d_print_info *dpi, int options,\n-\t\t\t       const struct demangle_component *dc)\n+\t\t\t       struct demangle_component *dc)\n {\n-  const struct demangle_component *ops, *operator_, *op1, *op2;\n+  struct demangle_component *ops, *operator_, *op1, *op2;\n   int save_idx;\n \n   const char *fold_code = d_left (dc)->u.s_operator.op->code;\n@@ -4591,11 +4592,11 @@ d_maybe_print_fold_expression (struct d_print_info *dpi, int options,\n \n static void\n d_print_comp_inner (struct d_print_info *dpi, int options,\n-\t\t    const struct demangle_component *dc)\n+\t\t    struct demangle_component *dc)\n {\n   /* Magic variable to let reference smashing skip over the next modifier\n      without needing to modify *dc.  */\n-  const struct demangle_component *mod_inner = NULL;\n+  struct demangle_component *mod_inner = NULL;\n \n   /* Variable used to store the current templates while a previously\n      captured scope is used.  */\n@@ -4980,7 +4981,7 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n     case DEMANGLE_COMPONENT_RVALUE_REFERENCE:\n       {\n \t/* Handle reference smashing: & + && = &.  */\n-\tconst struct demangle_component *sub = d_left (dc);\n+\tstruct demangle_component *sub = d_left (dc);\n \tif (!dpi->is_lambda_arg\n \t    && sub->type == DEMANGLE_COMPONENT_TEMPLATE_PARAM)\n \t  {\n@@ -5683,9 +5684,16 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n \n static void\n d_print_comp (struct d_print_info *dpi, int options,\n-\t      const struct demangle_component *dc)\n+\t      struct demangle_component *dc)\n {\n   struct d_component_stack self;\n+  if (dc == NULL || dc->d_printing > 1)\n+    {\n+      d_print_error (dpi);\n+      return;\n+    }\n+  else\n+    dc->d_printing++;\n \n   self.dc = dc;\n   self.parent = dpi->component_stack;\n@@ -5694,6 +5702,7 @@ d_print_comp (struct d_print_info *dpi, int options,\n   d_print_comp_inner (dpi, options, dc);\n \n   dpi->component_stack = self.parent;\n+  dc->d_printing--;\n }\n \n /* Print a Java dentifier.  For Java we try to handle encoded extended\n@@ -5835,7 +5844,7 @@ d_print_mod_list (struct d_print_info *dpi, int options,\n \n static void\n d_print_mod (struct d_print_info *dpi, int options,\n-             const struct demangle_component *mod)\n+             struct demangle_component *mod)\n {\n   switch (mod->type)\n     {\n@@ -5927,7 +5936,7 @@ d_print_mod (struct d_print_info *dpi, int options,\n \n static void\n d_print_function_type (struct d_print_info *dpi, int options,\n-                       const struct demangle_component *dc,\n+                       struct demangle_component *dc,\n                        struct d_print_mod *mods)\n {\n   int need_paren;\n@@ -6005,7 +6014,7 @@ d_print_function_type (struct d_print_info *dpi, int options,\n \n static void\n d_print_array_type (struct d_print_info *dpi, int options,\n-                    const struct demangle_component *dc,\n+                    struct demangle_component *dc,\n                     struct d_print_mod *mods)\n {\n   int need_space;\n@@ -6059,7 +6068,7 @@ d_print_array_type (struct d_print_info *dpi, int options,\n \n static void\n d_print_expr_op (struct d_print_info *dpi, int options,\n-                 const struct demangle_component *dc)\n+                 struct demangle_component *dc)\n {\n   if (dc->type == DEMANGLE_COMPONENT_OPERATOR)\n     d_append_buffer (dpi, dc->u.s_operator.op->name,\n@@ -6072,7 +6081,7 @@ d_print_expr_op (struct d_print_info *dpi, int options,\n \n static void\n d_print_cast (struct d_print_info *dpi, int options,\n-\t\t    const struct demangle_component *dc)\n+\t      struct demangle_component *dc)\n {\n   d_print_comp (dpi, options, d_left (dc));\n }\n@@ -6081,7 +6090,7 @@ d_print_cast (struct d_print_info *dpi, int options,\n \n static void\n d_print_conversion (struct d_print_info *dpi, int options,\n-\t\t    const struct demangle_component *dc)\n+\t\t    struct demangle_component *dc)\n {\n   struct d_print_template dpt;\n "}, {"sha": "13a71d96dec1eaf414695a6d8fb55be18f06cfee", "filename": "libiberty/cp-demint.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46586c34f32db516de3e5a2c61968015cfcd9d0/libiberty%2Fcp-demint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46586c34f32db516de3e5a2c61968015cfcd9d0/libiberty%2Fcp-demint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demint.c?ref=a46586c34f32db516de3e5a2c61968015cfcd9d0", "patch": "@@ -123,6 +123,7 @@ cplus_demangle_fill_component (struct demangle_component *p,\n   p->type = type;\n   p->u.s_binary.left = left;\n   p->u.s_binary.right = right;\n+  p->d_printing = 0;\n \n   return 1;\n }\n@@ -146,6 +147,7 @@ cplus_demangle_fill_builtin_type (struct demangle_component *p,\n \t{\n \t  p->type = DEMANGLE_COMPONENT_BUILTIN_TYPE;\n \t  p->u.s_builtin.type = &cplus_demangle_builtin_types[i];\n+\t  p->d_printing = 0;\n \t  return 1;\n \t}\n     }\n@@ -172,6 +174,7 @@ cplus_demangle_fill_operator (struct demangle_component *p,\n \t{\n \t  p->type = DEMANGLE_COMPONENT_OPERATOR;\n \t  p->u.s_operator.op = &cplus_demangle_operators[i];\n+\t  p->d_printing = 0;\n \t  return 1;\n \t}\n     }"}, {"sha": "45c572268b3be4b6dcc7b630659ddd86e1a0f313", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46586c34f32db516de3e5a2c61968015cfcd9d0/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46586c34f32db516de3e5a2c61968015cfcd9d0/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=a46586c34f32db516de3e5a2c61968015cfcd9d0", "patch": "@@ -4689,3 +4689,34 @@ void g<A>(S<&A::operator+>)\n \n _Z1gI1AEv1SIXadsrT_plEE\n void g<A>(S<&A::operator+>)\n+\n+#\n+# Test recursion PR67264\n+_Z1KIStcvT_E\n+_Z1KIStcvT_E\n+\n+_ZcvT_IIS0_EE\n+_ZcvT_IIS0_EE\n+\n+_ZcvT_IZcvT_E1fE\n+_ZcvT_IZcvT_E1fE\n+\n+_Z1gINcvT_EE\n+_Z1gINcvT_EE\n+\n+_ZcvT_ILZcvDTT_EEE\n+_ZcvT_ILZcvDTT_EEE\n+\n+_Z1gIJOOT_EEOT_c\n+_Z1gIJOOT_EEOT_c\n+\n+_Z1KMMMMMMMMMMMMMMMA_xooooooooooooooo\n+_Z1KMMMMMMMMMMMMMMMA_xooooooooooooooo\n+\n+_ZdvMMMMMMMMMMMMMrrrrA_DTdvfp_fp_Eededilfdfdfdfd\n+_ZdvMMMMMMMMMMMMMrrrrA_DTdvfp_fp_Eededilfdfdfdfd\n+#\n+# Test for Infinite Recursion PR70909\n+\n+_Z1MA_aMMMMA_MMA_MMMMMMMMSt1MS_o11T0000000000t2M0oooozoooo\n+_Z1MA_aMMMMA_MMA_MMMMMMMMSt1MS_o11T0000000000t2M0oooozoooo"}]}