{"sha": "327f73c19ef091381ecc8a57dd0bb696732c3f0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI3ZjczYzE5ZWYwOTEzODFlY2M4YTU3ZGQwYmI2OTY3MzJjM2YwZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-01-16T16:48:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-01-16T16:48:59Z"}, "message": "quadmath.h (__quadmath_throw, [...]): Define.\n\n\t* quadmath.h (__quadmath_throw, __quadmath_nth): Define.\n\tUse it for all prototypes.\n\nFrom-SVN: r168855", "tree": {"sha": "7f4a149cb8d5f13909e5b4ab2461569bbbeeeb0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f4a149cb8d5f13909e5b4ab2461569bbbeeeb0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/327f73c19ef091381ecc8a57dd0bb696732c3f0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/327f73c19ef091381ecc8a57dd0bb696732c3f0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/327f73c19ef091381ecc8a57dd0bb696732c3f0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/327f73c19ef091381ecc8a57dd0bb696732c3f0f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df"}], "stats": {"total": 199, "additions": 105, "deletions": 94}, "files": [{"sha": "da2045598adb8aac1fe99d4c0628d5bbee12e5b4", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/327f73c19ef091381ecc8a57dd0bb696732c3f0f/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/327f73c19ef091381ecc8a57dd0bb696732c3f0f/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=327f73c19ef091381ecc8a57dd0bb696732c3f0f", "patch": "@@ -1,5 +1,8 @@\n 2011-01-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* quadmath.h (__quadmath_throw, __quadmath_nth): Define.\n+\tUse it for all prototypes.\n+\n \tPR fortran/46416\n \t* quadmath.h (cbrtq, finiteq, isnanq, signbitq, sqrtq): Remove\n \tconst from prototype argument."}, {"sha": "95fab71d9985277b6dd5eb04d552fa7f39f157c6", "filename": "libquadmath/quadmath.h", "status": "modified", "additions": 102, "deletions": 94, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/327f73c19ef091381ecc8a57dd0bb696732c3f0f/libquadmath%2Fquadmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/327f73c19ef091381ecc8a57dd0bb696732c3f0f/libquadmath%2Fquadmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath.h?ref=327f73c19ef091381ecc8a57dd0bb696732c3f0f", "patch": "@@ -27,105 +27,113 @@ Boston, MA 02110-1301, USA.  */\n // (\"_Complex __float128\" is not allowed)\n typedef _Complex float __attribute__((mode(TC))) __complex128;\n \n+#ifdef __cplusplus\n+# define __quadmath_throw throw ()\n+# define __quadmath_nth(fct) fct throw ()\n+#else\n+# define __quadmath_throw __attribute__((__nothrow__))\n+# define __quadmath_nth(fct) __attribute__((__nothrow__)) fct\n+#endif\n \n // Prototypes for real functions\n-extern __float128 acosq (__float128);\n-extern __float128 acoshq (__float128);\n-extern __float128 asinq (__float128);\n-extern __float128 asinhq (__float128);\n-extern __float128 atanq (__float128);\n-extern __float128 atanhq (__float128);\n-extern __float128 atan2q (__float128, __float128);\n-extern __float128 cbrtq (__float128);\n-extern __float128 ceilq (__float128);\n-extern __float128 copysignq (__float128, __float128);\n-extern __float128 coshq (__float128);\n-extern __float128 cosq (__float128);\n-extern __float128 erfq (__float128);\n-extern __float128 erfcq (__float128);\n-extern __float128 expq (__float128);\n-extern __float128 expm1q (__float128);\n-extern __float128 fabsq (__float128);\n-extern __float128 fdimq (__float128, __float128);\n-extern int finiteq (__float128);\n-extern __float128 floorq (__float128);\n-extern __float128 fmaq (__float128, __float128, __float128);\n-extern __float128 fmaxq (__float128, __float128);\n-extern __float128 fminq (__float128, __float128);\n-extern __float128 fmodq (__float128, __float128);\n-extern __float128 frexpq (__float128, int *);\n-extern __float128 hypotq (__float128, __float128);\n-extern int isinfq (__float128);\n-extern int ilogbq (__float128);\n-extern int isnanq (__float128);\n-extern __float128 j0q (__float128);\n-extern __float128 j1q (__float128);\n-extern __float128 jnq (int, __float128);\n-extern __float128 ldexpq (__float128, int);\n-extern __float128 lgammaq (__float128);\n-extern long long int llrintq (__float128);\n-extern long long int llroundq (__float128);\n-extern __float128 logq (__float128);\n-extern __float128 log10q (__float128);\n-extern __float128 log2q (__float128);\n-extern __float128 log1pq (__float128);\n-extern long int lrintq (__float128);\n-extern long int lroundq (__float128);\n-extern __float128 modfq (__float128, __float128 *);\n-extern __float128 nanq (const char *);\n-extern __float128 nearbyintq (__float128);\n-extern __float128 nextafterq (__float128, __float128);\n-extern __float128 powq (__float128, __float128);\n-extern __float128 remainderq (__float128, __float128);\n-extern __float128 remquoq (__float128, __float128, int *);\n-extern __float128 rintq (__float128);\n-extern __float128 roundq (__float128);\n-extern __float128 scalblnq (__float128, long int);\n-extern __float128 scalbnq (__float128, int);\n-extern int signbitq (__float128);\n-extern void sincosq (__float128, __float128 *, __float128 *);\n-extern __float128 sinhq (__float128);\n-extern __float128 sinq (__float128);\n-extern __float128 sqrtq (__float128);\n-extern __float128 tanq (__float128);\n-extern __float128 tanhq (__float128);\n-extern __float128 tgammaq (__float128);\n-extern __float128 truncq (__float128);\n-extern __float128 y0q (__float128);\n-extern __float128 y1q (__float128);\n-extern __float128 ynq (int, __float128);\n+extern __float128 acosq (__float128) __quadmath_throw;\n+extern __float128 acoshq (__float128) __quadmath_throw;\n+extern __float128 asinq (__float128) __quadmath_throw;\n+extern __float128 asinhq (__float128) __quadmath_throw;\n+extern __float128 atanq (__float128) __quadmath_throw;\n+extern __float128 atanhq (__float128) __quadmath_throw;\n+extern __float128 atan2q (__float128, __float128) __quadmath_throw;\n+extern __float128 cbrtq (__float128) __quadmath_throw;\n+extern __float128 ceilq (__float128) __quadmath_throw;\n+extern __float128 copysignq (__float128, __float128) __quadmath_throw;\n+extern __float128 coshq (__float128) __quadmath_throw;\n+extern __float128 cosq (__float128) __quadmath_throw;\n+extern __float128 erfq (__float128) __quadmath_throw;\n+extern __float128 erfcq (__float128) __quadmath_throw;\n+extern __float128 expq (__float128) __quadmath_throw;\n+extern __float128 expm1q (__float128) __quadmath_throw;\n+extern __float128 fabsq (__float128) __quadmath_throw;\n+extern __float128 fdimq (__float128, __float128) __quadmath_throw;\n+extern int finiteq (__float128) __quadmath_throw;\n+extern __float128 floorq (__float128) __quadmath_throw;\n+extern __float128 fmaq (__float128, __float128, __float128) __quadmath_throw;\n+extern __float128 fmaxq (__float128, __float128) __quadmath_throw;\n+extern __float128 fminq (__float128, __float128) __quadmath_throw;\n+extern __float128 fmodq (__float128, __float128) __quadmath_throw;\n+extern __float128 frexpq (__float128, int *) __quadmath_throw;\n+extern __float128 hypotq (__float128, __float128) __quadmath_throw;\n+extern int isinfq (__float128) __quadmath_throw;\n+extern int ilogbq (__float128) __quadmath_throw;\n+extern int isnanq (__float128) __quadmath_throw;\n+extern __float128 j0q (__float128) __quadmath_throw;\n+extern __float128 j1q (__float128) __quadmath_throw;\n+extern __float128 jnq (int, __float128) __quadmath_throw;\n+extern __float128 ldexpq (__float128, int) __quadmath_throw;\n+extern __float128 lgammaq (__float128) __quadmath_throw;\n+extern long long int llrintq (__float128) __quadmath_throw;\n+extern long long int llroundq (__float128) __quadmath_throw;\n+extern __float128 logq (__float128) __quadmath_throw;\n+extern __float128 log10q (__float128) __quadmath_throw;\n+extern __float128 log2q (__float128) __quadmath_throw;\n+extern __float128 log1pq (__float128) __quadmath_throw;\n+extern long int lrintq (__float128) __quadmath_throw;\n+extern long int lroundq (__float128) __quadmath_throw;\n+extern __float128 modfq (__float128, __float128 *) __quadmath_throw;\n+extern __float128 nanq (const char *) __quadmath_throw;\n+extern __float128 nearbyintq (__float128) __quadmath_throw;\n+extern __float128 nextafterq (__float128, __float128) __quadmath_throw;\n+extern __float128 powq (__float128, __float128) __quadmath_throw;\n+extern __float128 remainderq (__float128, __float128) __quadmath_throw;\n+extern __float128 remquoq (__float128, __float128, int *) __quadmath_throw;\n+extern __float128 rintq (__float128) __quadmath_throw;\n+extern __float128 roundq (__float128) __quadmath_throw;\n+extern __float128 scalblnq (__float128, long int) __quadmath_throw;\n+extern __float128 scalbnq (__float128, int) __quadmath_throw;\n+extern int signbitq (__float128) __quadmath_throw;\n+extern void sincosq (__float128, __float128 *, __float128 *) __quadmath_throw;\n+extern __float128 sinhq (__float128) __quadmath_throw;\n+extern __float128 sinq (__float128) __quadmath_throw;\n+extern __float128 sqrtq (__float128) __quadmath_throw;\n+extern __float128 tanq (__float128) __quadmath_throw;\n+extern __float128 tanhq (__float128) __quadmath_throw;\n+extern __float128 tgammaq (__float128) __quadmath_throw;\n+extern __float128 truncq (__float128) __quadmath_throw;\n+extern __float128 y0q (__float128) __quadmath_throw;\n+extern __float128 y1q (__float128) __quadmath_throw;\n+extern __float128 ynq (int, __float128) __quadmath_throw;\n \n \n // Prototypes for complex functions\n-extern __float128 cabsq (__complex128);\n-extern __float128 cargq (__complex128);\n-extern __float128 cimagq (__complex128);\n-extern __float128 crealq (__complex128);\n-extern __complex128 cacosq (__complex128);\n-extern __complex128 cacoshq (__complex128);\n-extern __complex128 casinq (__complex128);\n-extern __complex128 casinhq (__complex128);\n-extern __complex128 catanq (__complex128);\n-extern __complex128 catanhq (__complex128);\n-extern __complex128 ccosq (__complex128);\n-extern __complex128 ccoshq (__complex128);\n-extern __complex128 cexpq (__complex128);\n-extern __complex128 cexpiq (__float128);\n-extern __complex128 clogq (__complex128);\n-extern __complex128 clog10q (__complex128);\n-extern __complex128 conjq (__complex128);\n-extern __complex128 cpowq (__complex128, __complex128);\n-extern __complex128 cprojq (__complex128);\n-extern __complex128 csinq (__complex128);\n-extern __complex128 csinhq (__complex128);\n-extern __complex128 csqrtq (__complex128);\n-extern __complex128 ctanq (__complex128);\n-extern __complex128 ctanhq (__complex128);\n+extern __float128 cabsq (__complex128) __quadmath_throw;\n+extern __float128 cargq (__complex128) __quadmath_throw;\n+extern __float128 cimagq (__complex128) __quadmath_throw;\n+extern __float128 crealq (__complex128) __quadmath_throw;\n+extern __complex128 cacosq (__complex128) __quadmath_throw;\n+extern __complex128 cacoshq (__complex128) __quadmath_throw;\n+extern __complex128 casinq (__complex128) __quadmath_throw;\n+extern __complex128 casinhq (__complex128) __quadmath_throw;\n+extern __complex128 catanq (__complex128) __quadmath_throw;\n+extern __complex128 catanhq (__complex128) __quadmath_throw;\n+extern __complex128 ccosq (__complex128) __quadmath_throw;\n+extern __complex128 ccoshq (__complex128) __quadmath_throw;\n+extern __complex128 cexpq (__complex128) __quadmath_throw;\n+extern __complex128 cexpiq (__float128) __quadmath_throw;\n+extern __complex128 clogq (__complex128) __quadmath_throw;\n+extern __complex128 clog10q (__complex128) __quadmath_throw;\n+extern __complex128 conjq (__complex128) __quadmath_throw;\n+extern __complex128 cpowq (__complex128, __complex128) __quadmath_throw;\n+extern __complex128 cprojq (__complex128) __quadmath_throw;\n+extern __complex128 csinq (__complex128) __quadmath_throw;\n+extern __complex128 csinhq (__complex128) __quadmath_throw;\n+extern __complex128 csqrtq (__complex128) __quadmath_throw;\n+extern __complex128 ctanq (__complex128) __quadmath_throw;\n+extern __complex128 ctanhq (__complex128) __quadmath_throw;\n \n \n // Prototypes for our I/O functions\n-extern int quadmath_strtopQ (const char *, char **, void *);\n-extern void quadmath_dtoaq (char *, size_t, size_t, __float128);\n+extern int quadmath_strtopQ (const char *, char **, void *) __quadmath_throw;\n+extern void quadmath_dtoaq (char *, size_t, size_t, __float128)\n+  __quadmath_throw;\n \n \n // Macros\n@@ -163,19 +171,19 @@ extern void quadmath_dtoaq (char *, size_t, size_t, __float128);\n   extern inline __attribute__ ((__gnu_inline__))\n \n __quadmath_extern_inline __float128\n-cimagq (__complex128 __z)\n+__quadmath_nth (cimagq (__complex128 __z))\n {\n   return __imag__ __z;\n }\n \n __quadmath_extern_inline __float128\n-crealq (__complex128 __z)\n+__quadmath_nth (crealq (__complex128 __z))\n {\n   return __real__ __z;\n }\n \n __quadmath_extern_inline __complex128\n-conjq (__complex128 __z)\n+__quadmath_nth (conjq (__complex128 __z))\n {\n   return __extension__ ~__z;\n }"}]}