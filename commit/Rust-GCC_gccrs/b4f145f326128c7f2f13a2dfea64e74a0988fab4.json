{"sha": "b4f145f326128c7f2f13a2dfea64e74a0988fab4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRmMTQ1ZjMyNjEyOGM3ZjJmMTNhMmRmZWE2NGU3NGEwOTg4ZmFiNA==", "commit": {"author": {"name": "Casey Marshall", "email": "rsdio@metastatic.org", "date": "2002-12-13T14:21:07Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-12-13T14:21:07Z"}, "message": "SecurityRandom (digest): Removed field.\n\n2002-12-13  Casey Marshall  <rsdio@metastatic.org>\n\t    Mark Wielaard  <mark@klomp.org>\n\n\t* java/security/SecurityRandom (digest): Removed field.\n\t(SecureRandom): Check all providers for case-insensitive SecureRandom\n\timplementation. Don't ignore classname == null. Fallback to SHA1PRNG\n\tif necessary.\n\t(getInstance(String,Provider,boolean): New method.\n\t(getInstance(String)): Use new method.\n\t(getInstance(String,String)): Likewise.\n\t(getInstance(String,Provider)): Likewise.\n\n2002-12-13  Casey Marshall  <rsdio@metastatic.org>\n\n\t* java/security/Security.java (loadProviders): Increment i only once.\n\nCo-Authored-By: Mark Wielaard <mark@klomp.org>\n\nFrom-SVN: r60099", "tree": {"sha": "210c2c7915b1bca0ed6415fb6c4653f9b90604f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/210c2c7915b1bca0ed6415fb6c4653f9b90604f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4f145f326128c7f2f13a2dfea64e74a0988fab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4f145f326128c7f2f13a2dfea64e74a0988fab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4f145f326128c7f2f13a2dfea64e74a0988fab4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4f145f326128c7f2f13a2dfea64e74a0988fab4/comments", "author": null, "committer": null, "parents": [{"sha": "697d8028c20dcc2977982daf7b96396b56bf4040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697d8028c20dcc2977982daf7b96396b56bf4040", "html_url": "https://github.com/Rust-GCC/gccrs/commit/697d8028c20dcc2977982daf7b96396b56bf4040"}], "stats": {"total": 216, "additions": 127, "deletions": 89}, "files": [{"sha": "d9c65cc89b1ac158ef8de4e0d2b0153357a972bb", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f145f326128c7f2f13a2dfea64e74a0988fab4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f145f326128c7f2f13a2dfea64e74a0988fab4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b4f145f326128c7f2f13a2dfea64e74a0988fab4", "patch": "@@ -1,3 +1,19 @@\n+2002-12-13  Casey Marshall  <rsdio@metastatic.org>\n+\t    Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/security/SecurityRandom (digest): Removed field.\n+\t(SecureRandom): Check all providers for case-insensitive SecureRandom\n+\timplementation. Don't ignore classname == null. Fallback to SHA1PRNG\n+\tif necessary.\n+\t(getInstance(String,Provider,boolean): New method.\n+\t(getInstance(String)): Use new method.\n+\t(getInstance(String,String)): Likewise.\n+\t(getInstance(String,Provider)): Likewise.\n+\n+2002-12-13  Casey Marshall  <rsdio@metastatic.org>\n+\n+\t* java/security/Security.java (loadProviders): Increment i only once.\n+\n 2002-12-12  Mark Wielaard  <mark@klomp.org>\n \n \t* java/lang/ClassLoader.java (resolveClass0): Transform"}, {"sha": "a0b7f95f397a0d6de9033ac6b8a5f6e5c66d15ee", "filename": "libjava/java/security/SecureRandom.java", "status": "modified", "additions": 109, "deletions": 87, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f145f326128c7f2f13a2dfea64e74a0988fab4/libjava%2Fjava%2Fsecurity%2FSecureRandom.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f145f326128c7f2f13a2dfea64e74a0988fab4/libjava%2Fjava%2Fsecurity%2FSecureRandom.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecureRandom.java?ref=b4f145f326128c7f2f13a2dfea64e74a0988fab4", "patch": "@@ -1,5 +1,5 @@\n /* SecureRandom.java --- Secure Random class implmentation\n-   Copyright (C) 1999, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -53,7 +53,6 @@ public class SecureRandom extends Random\n \n   //Serialized Field\n   long counter = 0;\t\t//Serialized\n-  MessageDigest digest = null;\n   Provider provider = null;\n   byte[] randomBytes = null;\t//Always null\n   int randomBytesUsed = 0;\n@@ -83,41 +82,29 @@ public SecureRandom()\n     Enumeration e;\n     for (i = 0; i < p.length; i++)\n       {\n-\te = p[i].propertyNames();\n-\twhile (e.hasMoreElements())\n-\t  {\n-\t    key = (String) e.nextElement();\n-\t    if (key.startsWith(\"SecureRandom.\"))\n-\t      if ((classname = p[i].getProperty(key)) != null)\n-\t\tbreak;\n+        e = p[i].propertyNames();\n+        while (e.hasMoreElements())\n+          {\n+            key = (String) e.nextElement();\n+            if (key.startsWith(\"SECURERANDOM.\"))\n+\t      {\n+\t\tif ((classname = p[i].getProperty(key)) != null)\n+\t\t  {\n+\t\t    try\n+\t\t      {\n+\t\t\tsecureRandomSpi = (SecureRandomSpi) Class.\n+\t\t\t  forName(classname).newInstance();\n+\t\t\tprovider = p[i];\n+\t\t\treturn;\n+\t\t      }\n+\t\t    catch (Throwable ignore) { }\n+\t\t  }\n+\t      }\n \t  }\n-\tif (classname != null)\n-\t    break;\n       }\n \n-    //if( classname == null)\n-    //  throw new NoSuchAlgorithmException();\n-\n-    try\n-      {\n-\tthis.secureRandomSpi =\n-\t  (SecureRandomSpi) Class.forName(classname).newInstance();\n-\n-\t//s.algorithm = algorithm;\n-\tthis.provider = p[i];\n-      }\n-    catch (ClassNotFoundException cnfe)\n-      {\n-\t//throw new NoSuchAlgorithmException(\"Class not found\");\n-      }\n-    catch (InstantiationException ie)\n-      {\n-\t//throw new NoSuchAlgorithmException(\"Class instantiation failed\");\n-      }\n-    catch (IllegalAccessException iae)\n-      {\n-\t//throw new NoSuchAlgorithmException(\"Illegal Access\");\n-      }\n+    // Nothing found. Fall back to SHA1PRNG\n+    secureRandomSpi = new gnu.java.security.provider.SHA1PRNG();\n   }\n \n   /**\n@@ -167,40 +154,17 @@ public static SecureRandom getInstance(String algorithm) throws\n     NoSuchAlgorithmException\n   {\n     Provider p[] = Security.getProviders();\n-\n-    //Format of Key: SecureRandom.algname\n-    StringBuffer key = new StringBuffer(\"SecureRandom.\");\n-    key.append(algorithm);\n-\n-    String classname = null;\n-    int i;\n-    for (i = 0; i < p.length; i++)\n-      {\n-\tif ((classname = p[i].getProperty(key.toString())) != null)\n-\t  break;\n-      }\n-\n-    if (classname == null)\n-        throw new NoSuchAlgorithmException();\n-\n-    try\n-      {\n-\treturn new SecureRandom((SecureRandomSpi) Class.forName(classname).\n-\t\t\t\tnewInstance(), p[i]);\n-      }\n-    catch (ClassNotFoundException cnfe)\n-      {\n-\tthrow new NoSuchAlgorithmException(\"Class not found\");\n-      }\n-    catch (InstantiationException ie)\n-      {\n-\tthrow new NoSuchAlgorithmException(\"Class instantiation failed\");\n-      }\n-    catch (IllegalAccessException iae)\n+    for (int i = 0; i < p.length; i++)\n       {\n-\tthrow new NoSuchAlgorithmException(\"Illegal Access\");\n+\ttry\n+\t  {\n+\t    return getInstance(algorithm, p[i]);\n+\t  }\n+\tcatch (NoSuchAlgorithmException ignored) { }\n       }\n \n+    // None found.\n+    throw new NoSuchAlgorithmException(algorithm);\n   }\n \n   /**\n@@ -222,33 +186,91 @@ public static SecureRandom getInstance(String algorithm,\n     Provider p = Security.getProvider(provider);\n     if (p == null)\n       throw new NoSuchProviderException();\n+    \n+    return getInstance(algorithm, p);\n+  }\n \n-    //Format of Key: SecureRandom.algName\n-    StringBuffer key = new StringBuffer(\"SecureRandom.\");\n-    key.append(algorithm);\n+  /**\n+     Returns an instance of a SecureRandom. It creates the class for\n+     the specified algorithm from the given provider.\n \n-    String classname = p.getProperty(key.toString());\n-    if (classname == null)\n-      throw new NoSuchAlgorithmException();\n+     @param algorithm The SecureRandom algorithm to create.\n+     @param provider  The provider to get the instance from.\n \n-    try\n-      {\n-\treturn new SecureRandom((SecureRandomSpi) Class.forName(classname).\n-\t\t\t\tnewInstance(), p);\n-      }\n-    catch (ClassNotFoundException cnfe)\n-      {\n-\tthrow new NoSuchAlgorithmException(\"Class not found\");\n-      }\n-    catch (InstantiationException ie)\n-      {\n-\tthrow new NoSuchAlgorithmException(\"Class instantiation failed\");\n-      }\n-    catch (IllegalAccessException iae)\n+     @throws NoSuchAlgorithmException If the algorithm cannot be found, or\n+             if the class cannot be instantiated.\n+   */\n+  public static SecureRandom getInstance(String algorithm,\n+                                         Provider provider) throws\n+    NoSuchAlgorithmException\n+  {\n+    return getInstance(algorithm, provider, true);\n+  }\n+\n+  /**\n+     Creates the instance of SecureRandom, recursing to resolve aliases.\n+\n+     @param algorithm The SecureRandom algorithm to create.\n+     @param provider  The provider to get the implementation from.\n+     @param recurse   Whether or not to recurse to resolve aliases.\n+\n+     @throws NoSuchAlgorithmException If the algorithm cannot be found,\n+             if there are too many aliases, or if the class cannot be\n+             instantiated.\n+   */\n+  private static SecureRandom getInstance(String algorithm,\n+                                          Provider provider,\n+                                          boolean recurse)\n+    throws NoSuchAlgorithmException\n+  {\n+    String msg = algorithm;\n+    for (Enumeration e = provider.propertyNames(); e.hasMoreElements(); )\n       {\n-\tthrow new NoSuchAlgorithmException(\"Illegal Access\");\n+        // We could replace the boolean with an integer, incrementing it\n+        // every\n+        String key = (String) e.nextElement();\n+        if (key.startsWith(\"SECURERANDOM.\")\n+            && key.substring(13).equalsIgnoreCase(algorithm))\n+\t  {\n+\t    try\n+\t      {\n+\t\tClass c = Class.forName(provider.getProperty(key));\n+\t\treturn new SecureRandom((SecureRandomSpi) c.newInstance(),\n+\t\t\t\t\tprovider);\n+\t      }\n+\t    catch (Throwable ignored) { }\n+\t  }\n+\telse if (key.startsWith(\"ALG.ALIAS.SECURERANDOM.\")\n+\t\t && key.substring(23).equalsIgnoreCase(algorithm) && recurse)\n+\t  {\n+\t    try\n+\t      {\n+\t\t// First see if this alias refers to a class in this\n+\t\t// provider.\n+\t\treturn getInstance(provider.getProperty(key), provider, false);\n+\t      }\n+\t    catch (NoSuchAlgorithmException nsae)\n+\t      {\n+\t\tProvider[] provs = Security.getProviders();\n+\t\tfor (int i = 0; i < provs.length; i++)\n+\t\t  {\n+\t\t    if (provs[i] == provider)\n+\t\t      continue;\n+\t\t    // Now try other providers for the implementation\n+\t\t    try\n+\t\t      {\n+\t\t\treturn getInstance(provider.getProperty(key),\n+\t\t\t\t\t   provs[i], false);\n+\t\t      }\n+\t\t    catch (NoSuchAlgorithmException nsae2)\n+\t\t      {\n+\t\t\tmsg = nsae2.getMessage();\n+\t\t      }\n+\t\t  }\n+\t      }\n+\t  }\n       }\n-\n+    throw new NoSuchAlgorithmException(algorithm);\n   }\n \n   /**"}, {"sha": "bf7a993ad47d511b9bb27e98a480a723e1a77b96", "filename": "libjava/java/security/Security.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f145f326128c7f2f13a2dfea64e74a0988fab4/libjava%2Fjava%2Fsecurity%2FSecurity.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f145f326128c7f2f13a2dfea64e74a0988fab4/libjava%2Fjava%2Fsecurity%2FSecurity.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecurity.java?ref=b4f145f326128c7f2f13a2dfea64e74a0988fab4", "patch": "@@ -89,15 +89,14 @@ private static void loadProviders(String dir, String vendor)\n \tint i = 1;\n \tString name;\n \n-\twhile ((name = secprops.getProperty(\"security.provider.\" + i++)) !=\n+\twhile ((name = secprops.getProperty(\"security.provider.\" + i)) !=\n \t       null)\n \t  {\n \t    Exception exception = null;\n \n \t    try\n \t      {\n \t\tproviders.addElement(Class.forName(name).newInstance());\n-\t\ti++;\n \t      }\n \t    catch (ClassNotFoundException x)\n \t      {\n@@ -114,6 +113,7 @@ private static void loadProviders(String dir, String vendor)\n \t    if (exception != null)\n \t      System.err.println (\"Error loading security provider \" + name\n \t                          + \": \" + exception);\n+\t    i++;\n \t  }\n       }\n     catch (FileNotFoundException ignored)"}]}