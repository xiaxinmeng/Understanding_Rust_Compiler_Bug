{"sha": "19add4f7e416da5706eb0e0a0cbbd980a74f4b86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlhZGQ0ZjdlNDE2ZGE1NzA2ZWIwZTBhMGNiYmQ5ODBhNzRmNGI4Ng==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2006-09-30T19:20:16Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2006-09-30T19:20:16Z"}, "message": "java-interp.h (prepared): Change type to pc_t.\n\n        * include/java-interp.h (prepared): Change type to pc_t.\n        (insn_index): Define for both DIRECT_THREADED and bytecode interpreters.\n        * interpret.cc [!DIRECT_THREADED] (POKEI): Fix typo.\n        (insn_index): Implement for bytecode interpreter.\n        * interpret-run.cc [!DIRECT_THREADED] (AVAL1U): Add _Jv_Linker class\n        qualifier to resolve_pool_entry.\n        [!DIRECT_THREADED] (AVAL2U): Likewise.\n        [!DIRECT_THREADED] bytecode() cannot be called without an object.\n        Changed all typos.\n        [!DIRECT_THREADED] Likewise for defining_class.\n\nFrom-SVN: r117333", "tree": {"sha": "b484dd0bd0295d212071fc7b2fc86b6422a1732f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b484dd0bd0295d212071fc7b2fc86b6422a1732f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19add4f7e416da5706eb0e0a0cbbd980a74f4b86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19add4f7e416da5706eb0e0a0cbbd980a74f4b86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19add4f7e416da5706eb0e0a0cbbd980a74f4b86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19add4f7e416da5706eb0e0a0cbbd980a74f4b86/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "05c1e3a7a94397c4ce9ef29cefec2eeebc2cdb53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c1e3a7a94397c4ce9ef29cefec2eeebc2cdb53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05c1e3a7a94397c4ce9ef29cefec2eeebc2cdb53"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "177ac48d295cbca26ca639529e09564198f13cee", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19add4f7e416da5706eb0e0a0cbbd980a74f4b86/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19add4f7e416da5706eb0e0a0cbbd980a74f4b86/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=19add4f7e416da5706eb0e0a0cbbd980a74f4b86", "patch": "@@ -1,3 +1,16 @@\n+2006-09-30  Keith Seitz  <keiths@redhat.com>\n+\n+\t* include/java-interp.h (prepared): Change type to pc_t.\n+\t(insn_index): Define for both DIRECT_THREADED and bytecode interpreters.\n+\t* interpret.cc [!DIRECT_THREADED] (POKEI): Fix typo.\n+\t(insn_index): Implement for bytecode interpreter.\n+\t* interpret-run.cc [!DIRECT_THREADED] (AVAL1U): Add _Jv_Linker class\n+\tqualifier to resolve_pool_entry.\n+\t[!DIRECT_THREADED] (AVAL2U): Likewise.\n+\t[!DIRECT_THREADED] bytecode() cannot be called without an object.\n+\tChanged all typos.\n+\t[!DIRECT_THREADED] Likewise for defining_class.\n+\n 2006-09-26  Jack Howarth  <howarth@bromo.med.uc.edu>\n \n \tPR target/26792:"}, {"sha": "133fd19f9fe9b4a2df71123bd71aa7d441011113", "filename": "libjava/include/java-interp.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19add4f7e416da5706eb0e0a0cbbd980a74f4b86/libjava%2Finclude%2Fjava-interp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19add4f7e416da5706eb0e0a0cbbd980a74f4b86/libjava%2Finclude%2Fjava-interp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-interp.h?ref=19add4f7e416da5706eb0e0a0cbbd980a74f4b86", "patch": "@@ -144,7 +144,7 @@ class _Jv_InterpMethod : public _Jv_MethodBase\n   int line_table_len;  \n   _Jv_LineTableEntry *line_table;\n \n-  void *prepared;\n+  pc_t prepared;\n   int number_insn_slots;\n \n   unsigned char* bytecode () \n@@ -191,13 +191,9 @@ class _Jv_InterpMethod : public _Jv_MethodBase\n   // number info is unavailable.\n   int get_source_line(pc_t mpc);\n \n-\n-\n-#ifdef DIRECT_THREADED\n   // Convenience function for indexing bytecode PC/insn slots in\n   // line tables for JDWP\n   jlong insn_index (pc_t pc);\n-#endif\n   \n    public:\n    "}, {"sha": "afabad2699416cdd934a8e1839faeaffa7de81ac", "filename": "libjava/interpret-run.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19add4f7e416da5706eb0e0a0cbbd980a74f4b86/libjava%2Finterpret-run.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19add4f7e416da5706eb0e0a0cbbd980a74f4b86/libjava%2Finterpret-run.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret-run.cc?ref=19add4f7e416da5706eb0e0a0cbbd980a74f4b86", "patch": "@@ -291,10 +291,10 @@ details.  */\n   // class'.\n #define AVAL1U()\t\t\t\t\t\t\\\n   ({ int index = get1u (pc++);\t\t\t\t\t\\\n-      resolve_pool_entry (meth->defining_class, index).o; })\n+    _Jv_Linker::resolve_pool_entry (meth->defining_class, index).o; })\n #define AVAL2U()\t\t\t\t\t\t\\\n   ({ int index = get2u (pc); pc += 2;\t\t\t\t\\\n-      resolve_pool_entry (meth->defining_class, index).o; })\n+    _Jv_Linker::resolve_pool_entry (meth->defining_class, index).o; })\n   // Note that we don't need to resolve the pool entry here as class\n   // constants are never wide.\n #define AVAL2UP() ({ int index = get2u (pc); pc += 2; &pool_data[index]; })\n@@ -303,7 +303,7 @@ details.  */\n #define PCVAL(unionval) unionval.i\n #define AMPAMP(label) NULL\n \n-  pc = bytecode ();\n+  pc = meth->bytecode ();\n \n #endif /* DIRECT_THREADED */\n \n@@ -1545,7 +1545,7 @@ details.  */\n \tpc_t base_pc = pc - 1;\n \tint index = POPI ();\n \n-\tpc_t base = (pc_t) bytecode ();\n+\tpc_t base = (pc_t) meth->bytecode ();\n \twhile ((pc - base) % 4 != 0)\n \t  ++pc;\n \n@@ -1601,7 +1601,7 @@ details.  */\n \tunsigned char *base_pc = pc-1;\n \tint index = POPI();\n \n-\tunsigned char* base = bytecode ();\n+\tunsigned char* base = meth->bytecode ();\n \twhile ((pc-base) % 4 != 0)\n \t  ++pc;\n \n@@ -2469,7 +2469,7 @@ details.  */\n #ifdef DIRECT_THREADED\n       void *logical_pc = (void *) ((insn_slot *) pc - 1);\n #else\n-      int logical_pc = pc - 1 - bytecode ();\n+      int logical_pc = pc - 1 - meth->bytecode ();\n #endif\n       _Jv_InterpException *exc = meth->exceptions ();\n       jclass exc_class = ex->getClass ();\n@@ -2484,8 +2484,8 @@ details.  */\n #else\n \t      jclass handler = NULL;\n \t      if (exc[i].handler_type.i != 0)\n-\t\thandler = (_Jv_Linker::resolve_pool_entry (defining_class,\n-\t\t\t\t\t\t\t     exc[i].handler_type.i)).clazz;\n+\t\thandler = (_Jv_Linker::resolve_pool_entry (meth->defining_class,\n+\t\t\t\t\t\t\t   exc[i].handler_type.i)).clazz;\n #endif /* DIRECT_THREADED */\n \n \t      if (handler == NULL || handler->isAssignableFrom (exc_class))\n@@ -2494,7 +2494,7 @@ details.  */\n #ifdef DIRECT_THREADED\n \t\t  pc = (insn_slot *) exc[i].handler_pc.p;\n #else\n-\t\t  pc = bytecode () + exc[i].handler_pc.i;\n+\t\t  pc = meth->bytecode () + exc[i].handler_pc.i;\n #endif /* DIRECT_THREADED */\n \t\t  sp = stack;\n \t\t  sp++->o = ex; // Push exception."}, {"sha": "1c4e21e6b76e5a03411722ecde2e89d86ea018df", "filename": "libjava/interpret.cc", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19add4f7e416da5706eb0e0a0cbbd980a74f4b86/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19add4f7e416da5706eb0e0a0cbbd980a74f4b86/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=19add4f7e416da5706eb0e0a0cbbd980a74f4b86", "patch": "@@ -200,7 +200,7 @@ do { DEBUG_LOCALS_INSN(I, 'd');\t\\\n #define PEEKA(I)  (locals+(I))->o\n \n #define POKEI(I,V)  \t\\\n-DEBUG_LOCALS_INSN(I,i)\t\\\n+DEBUG_LOCALS_INSN(I,'i'); \\\n ((locals+(I))->i = (V))\n \n \n@@ -1307,31 +1307,34 @@ _Jv_InterpMethod::ncode ()\n   return self->ncode;\n }\n \n-#ifdef DIRECT_THREADED\n /* Find the index of the given insn in the array of insn slots\n    for this method. Returns -1 if not found. */\n jlong\n _Jv_InterpMethod::insn_index (pc_t pc)\n {\n   jlong left = 0;\n+#ifdef DIRECT_THREADED\n   jlong right = number_insn_slots;\n-  insn_slot* slots = reinterpret_cast<insn_slot*> (prepared);\n+  pc_t insns = prepared;\n+#else\n+  jlong right = code_length;\n+  pc_t insns = bytecode ();\n+#endif\n \n   while (right >= 0)\n     {\n       jlong mid = (left + right) / 2;\n-      if (&slots[mid] == pc)\n+      if (&insns[mid] == pc)\n \treturn mid;\n \n-      if (pc < &slots[mid])\n+      if (pc < &insns[mid])\n \tright = mid - 1;\n       else\n         left = mid + 1;\n     }\n \n   return -1;\n }\n-#endif // DIRECT_THREADED\n \n void\n _Jv_InterpMethod::get_line_table (jlong& start, jlong& end,"}]}