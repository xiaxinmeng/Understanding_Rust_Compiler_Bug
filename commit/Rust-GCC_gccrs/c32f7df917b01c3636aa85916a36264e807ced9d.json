{"sha": "c32f7df917b01c3636aa85916a36264e807ced9d", "node_id": "C_kwDOANBUbNoAKGMzMmY3ZGY5MTdiMDFjMzYzNmFhODU5MTZhMzYyNjRlODA3Y2VkOWQ", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-28T09:33:11Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-28T12:33:53Z"}, "message": "Enable jump threading at -O1.\n\nMy previous patch gating all jump threading by -fthread-jumps had the\nside effect of turning off DOM jump threading at -O1.  This causes\nnumerous -Wuninitialized false positives.  This patch turns on jump\nthreading at -O1 to minimize the disruption.\n\ngcc/ChangeLog:\n\n\t* cfgcleanup.c (pass_jump::execute): Check\n\tflag_expensive_optimizations.\n\t(pass_jump_after_combine::gate): Same.\n\t* doc/invoke.texi (-fthread-jumps): Enable for -O1.\n\t* opts.c (default_options_table): Enable -fthread-jumps at -O1.\n\t* tree-ssa-threadupdate.c\n\t(fwd_jt_path_registry::remove_jump_threads_including): Bail unless\n\tflag_thread_jumps.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/auto-init-uninit-1.c: Adjust.\n\t* gcc.dg/auto-init-uninit-15.c: Same.\n\t* gcc.dg/guality/example.c: Same.\n\t* gcc.dg/loop-8.c: Same.\n\t* gcc.dg/strlenopt-40.c: Same.\n\t* gcc.dg/tree-ssa/pr18133-2.c: Same.\n\t* gcc.dg/tree-ssa/pr18134.c: Same.\n\t* gcc.dg/uninit-1.c: Same.\n\t* gcc.dg/uninit-pr44547.c: Same.\n\t* gcc.dg/uninit-pr59970.c: Same.", "tree": {"sha": "680f004535a2324387441a02202348bd9ae3323c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/680f004535a2324387441a02202348bd9ae3323c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c32f7df917b01c3636aa85916a36264e807ced9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c32f7df917b01c3636aa85916a36264e807ced9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c32f7df917b01c3636aa85916a36264e807ced9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c32f7df917b01c3636aa85916a36264e807ced9d/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95540a6d1d7b29cdd3ed06fbcb07465804504cfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95540a6d1d7b29cdd3ed06fbcb07465804504cfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95540a6d1d7b29cdd3ed06fbcb07465804504cfd"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "82fc505ff502d3eabd2492fa76d59e228a9f80f5", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=c32f7df917b01c3636aa85916a36264e807ced9d", "patch": "@@ -3239,7 +3239,8 @@ pass_jump::execute (function *)\n   if (dump_file)\n     dump_flow_info (dump_file, dump_flags);\n   cleanup_cfg ((optimize ? CLEANUP_EXPENSIVE : 0)\n-\t       | (flag_thread_jumps ? CLEANUP_THREADING : 0));\n+\t       | (flag_thread_jumps && flag_expensive_optimizations\n+\t\t  ? CLEANUP_THREADING : 0));\n   return 0;\n }\n \n@@ -3274,7 +3275,10 @@ class pass_jump_after_combine : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_thread_jumps; }\n+  virtual bool gate (function *)\n+  {\n+    return flag_thread_jumps && flag_expensive_optimizations;\n+  }\n   virtual unsigned int execute (function *);\n \n }; // class pass_jump_after_combine"}, {"sha": "6d9a107acd08b29c9af72bd4c2916c6f9cdef3db", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c32f7df917b01c3636aa85916a36264e807ced9d", "patch": "@@ -10781,7 +10781,7 @@ so, the first branch is redirected to either the destination of the\n second branch or a point immediately following it, depending on whether\n the condition is known to be true or false.\n \n-Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.\n+Enabled at levels @option{-O1}, @option{-O2}, @option{-O3}, @option{-Os}.\n \n @item -fsplit-wide-types\n @opindex fsplit-wide-types"}, {"sha": "6503980cd3337acbea5c135d92d350a897c12f48", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=c32f7df917b01c3636aa85916a36264e807ced9d", "patch": "@@ -569,6 +569,7 @@ static const struct default_options default_options_table[] =\n     { OPT_LEVELS_1_PLUS, OPT_freorder_blocks, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_fshrink_wrap, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_fsplit_wide_types, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_fthread_jumps, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_ftree_builtin_call_dce, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_ftree_ccp, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_ftree_ch, NULL, 1 },\n@@ -629,7 +630,6 @@ static const struct default_options default_options_table[] =\n #endif\n     { OPT_LEVELS_2_PLUS, OPT_fstrict_aliasing, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_fstore_merging, NULL, 1 },\n-    { OPT_LEVELS_2_PLUS, OPT_fthread_jumps, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_ftree_pre, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_ftree_switch_conversion, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_ftree_tail_merge, NULL, 1 },"}, {"sha": "502db591222a8256acc97a41e5c5ce153f313dda", "filename": "gcc/testsuite/gcc.dg/auto-init-uninit-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-1.c?ref=c32f7df917b01c3636aa85916a36264e807ced9d", "patch": "@@ -1,5 +1,5 @@\n /* Spurious uninitialized variable warnings, case 1.\n    Taken from cppfiles.c (merge_include_chains) */\n /* { dg-do compile } */\n-/* { dg-options \"-O -Wuninitialized -fthread-jumps -ftrivial-auto-var-init=zero\" } */\n+/* { dg-options \"-O -Wuninitialized -ftrivial-auto-var-init=zero\" } */\n #include \"uninit-1.c\""}, {"sha": "121f0cff274a3732ff6b233a5a0391111fcc6a77", "filename": "gcc/testsuite/gcc.dg/auto-init-uninit-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-15.c?ref=c32f7df917b01c3636aa85916a36264e807ced9d", "patch": "@@ -5,7 +5,7 @@\n    But it is of course ok if we warn in bar about uninitialized use\n    of j.  (not xfailed alternative)  */\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -Wuninitialized -fthread-jumps -ftrivial-auto-var-init=zero\" } */\n+/* { dg-options \"-O1 -Wuninitialized -ftrivial-auto-var-init=zero\" } */\n \n inline int\n foo (int i)"}, {"sha": "32014e2b4c00205c097615f399d4869c89dd19e2", "filename": "gcc/testsuite/gcc.dg/guality/example.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fexample.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fexample.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fexample.c?ref=c32f7df917b01c3636aa85916a36264e807ced9d", "patch": "@@ -1,4 +1,5 @@\n /* { dg-options \"-g\" } */\n+/* { dg-do run { xfail { ! aarch64*-*-* } } } */\n /* { dg-xfail-run-if \"\" aarch64*-*-* \"*\" { \"-O[01g]\" } } */\n \n #define GUALITY_DONT_FORCE_LIVE_AFTER -1"}, {"sha": "90ea1c4552438c53c672582791e16501960c79eb", "filename": "gcc/testsuite/gcc.dg/loop-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Floop-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Floop-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-8.c?ref=c32f7df917b01c3636aa85916a36264e807ced9d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fthread-jumps -fdump-rtl-loop2_invariant\" } */\n+/* { dg-options \"-O1 -fdump-rtl-loop2_invariant\" } */\n /* { dg-skip-if \"unexpected IV\" { \"hppa*-*-* mips*-*-* visium-*-* powerpc*-*-* riscv*-*-* mmix-*-* vax-*-*\" } } */\n /* Load immediate on condition is available from z13 on and prevents moving\n    the load out of the loop, so always run this test with -march=zEC12 that"}, {"sha": "7a97ebb8fe5be4b9e9ebd2d81238e9b63a4fd6e2", "filename": "gcc/testsuite/gcc.dg/strlenopt-40.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-40.c?ref=c32f7df917b01c3636aa85916a36264e807ced9d", "patch": "@@ -1,7 +1,7 @@\n /* PR tree-optimization/83671 - fix for false positive reported by\n    -Wstringop-overflow does not work with inlining\n    { dg-do compile }\n-   { dg-options \"-O1 -fthread-jumps -fdump-tree-optimized\" } */\n+   { dg-options \"-O1 -fdump-tree-optimized\" } */\n \n #include \"strlenopt.h\"\n "}, {"sha": "8717640e3272267604cd741efe8c35b590952a05", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr18133-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr18133-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr18133-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr18133-2.c?ref=c32f7df917b01c3636aa85916a36264e807ced9d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fthread-jumps -fdump-tree-optimized-blocks\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized-blocks\" } */\n \n int c, d;\n "}, {"sha": "cd40ab2c162bd168b120d200f694e97bea89dbd4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr18134.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr18134.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr18134.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr18134.c?ref=c32f7df917b01c3636aa85916a36264e807ced9d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fthread-jumps -fdump-tree-optimized\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n \n int  foo (int a)\n {"}, {"sha": "060ec250ba7494ee7e90bab3724c3be3182edf7b", "filename": "gcc/testsuite/gcc.dg/uninit-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-1.c?ref=c32f7df917b01c3636aa85916a36264e807ced9d", "patch": "@@ -1,7 +1,7 @@\n /* Spurious uninitialized variable warnings, case 1.\n    Taken from cppfiles.c (merge_include_chains) */\n /* { dg-do compile } */\n-/* { dg-options \"-O -Wuninitialized -fthread-jumps\" } */\n+/* { dg-options \"-O -Wuninitialized\" } */\n \n struct list\n {"}, {"sha": "ee1035ad7b8094ab2535bf2861f16c4eaae47593", "filename": "gcc/testsuite/gcc.dg/uninit-pr44547.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr44547.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr44547.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr44547.c?ref=c32f7df917b01c3636aa85916a36264e807ced9d", "patch": "@@ -1,7 +1,7 @@\n /* PR tree-optimization/44547 - -Wuninitialized reports false warning\n    in nested switch statements\n    { dg-do compile }\n-   { dg-options \"-O1 -Wall -fthread-jumps\" } */\n+   { dg-options \"-O1 -Wall\" } */\n \n __attribute__ ((noipa)) int test_O1 (int argc)\n {"}, {"sha": "145af657a76c2dfaa16453cc8a45c7c5f713eb74", "filename": "gcc/testsuite/gcc.dg/uninit-pr59970.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr59970.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr59970.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr59970.c?ref=c32f7df917b01c3636aa85916a36264e807ced9d", "patch": "@@ -41,7 +41,7 @@ d_demangle_callback_O1 (const char *mangled)\n #pragma GCC pop_options\n \n \n-#pragma GCC optimize (\"Og,thread-jumps\")\n+#pragma GCC optimize (\"Og\")\n \n __attribute__ ((noipa)) int\n d_demangle_callback_Og (const char *mangled)"}, {"sha": "71e602ffa2da7b7d906f1b94fcddbe374e5eca52", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32f7df917b01c3636aa85916a36264e807ced9d/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=c32f7df917b01c3636aa85916a36264e807ced9d", "patch": "@@ -2570,7 +2570,7 @@ valid_jump_thread_path (vec<jump_thread_edge *> *path)\n void\n fwd_jt_path_registry::remove_jump_threads_including (edge_def *e)\n {\n-  if (!m_paths.exists ())\n+  if (!m_paths.exists () || !flag_thread_jumps)\n     return;\n \n   edge *slot = m_removed_edges->find_slot (e, INSERT);"}]}