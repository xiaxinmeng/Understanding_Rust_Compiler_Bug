{"sha": "ba68fc32bc83b21b54c7d9106bc7f0e81f07f1b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE2OGZjMzJiYzgzYjIxYjU0YzdkOTEwNmJjN2YwZTgxZjA3ZjFiMQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-05-14T19:44:30Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-05-14T19:44:30Z"}, "message": "(unroll_loop): Make local_regno have size max_reg_before_loop.\n\n(unroll_loop): Make local_regno have size\nmax_reg_before_loop.  Don't do local register optimization if\ncopy_end has no INSN_LUID.\n\nFrom-SVN: r9684", "tree": {"sha": "15e53cc7b99e9621a28bd37f008fc0f939bd6470", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15e53cc7b99e9621a28bd37f008fc0f939bd6470"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba68fc32bc83b21b54c7d9106bc7f0e81f07f1b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba68fc32bc83b21b54c7d9106bc7f0e81f07f1b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba68fc32bc83b21b54c7d9106bc7f0e81f07f1b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba68fc32bc83b21b54c7d9106bc7f0e81f07f1b1/comments", "author": null, "committer": null, "parents": [{"sha": "0ad228e65480a901584dd3460fe388be00cfb29d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad228e65480a901584dd3460fe388be00cfb29d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ad228e65480a901584dd3460fe388be00cfb29d"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "161cdd2adeefc59828b23e0c3e79b267f8477fdd", "filename": "gcc/unroll.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba68fc32bc83b21b54c7d9106bc7f0e81f07f1b1/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba68fc32bc83b21b54c7d9106bc7f0e81f07f1b1/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=ba68fc32bc83b21b54c7d9106bc7f0e81f07f1b1", "patch": "@@ -718,11 +718,15 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n   addr_combined_regs\n     = (struct induction **) alloca (maxregnum * sizeof (struct induction *));\n   bzero ((char *) addr_combined_regs, maxregnum * sizeof (struct induction *));\n-  local_regno = (char *) alloca (maxregnum);\n-  bzero (local_regno, maxregnum);\n+  /* We must limit it to max_reg_before_loop, because only these pseudo\n+     registers have valid regno_first_uid info.  Any register created after\n+     that is unlikely to be local to the loop anyways.  */\n+  local_regno = (char *) alloca (max_reg_before_loop);\n+  bzero (local_regno, max_reg_before_loop);\n \n   /* Mark all local registers, i.e. the ones which are referenced only\n-     inside the loop. */\n+     inside the loop.  */\n+  if (INSN_UID (copy_end) < max_uid_for_loop)\n   {\n     int copy_start_luid = INSN_LUID (copy_start);\n     int copy_end_luid = INSN_LUID (copy_end);\n@@ -732,7 +736,7 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n     if (GET_CODE (copy_end) == JUMP_INSN)\n       copy_end_luid--;\n \n-    for (j = FIRST_PSEUDO_REGISTER; j < maxregnum; ++j)\n+    for (j = FIRST_PSEUDO_REGISTER; j < max_reg_before_loop; ++j)\n       if (regno_first_uid[j] > 0 && regno_first_uid[j] <= max_uid_for_loop\n \t  && uid_luid[regno_first_uid[j]] >= copy_start_luid\n \t  && regno_last_uid[j] > 0 && regno_last_uid[j] <= max_uid_for_loop\n@@ -951,7 +955,7 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n \t\tif (local_label[j])\n \t\t  map->label_map[j] = gen_label_rtx ();\n \n-\t      for (j = FIRST_PSEUDO_REGISTER; j < maxregnum; j++)\n+\t      for (j = FIRST_PSEUDO_REGISTER; j < max_reg_before_loop; j++)\n \t\tif (local_regno[j])\n \t\t  map->reg_map[j] = gen_reg_rtx (GET_MODE (regno_reg_rtx[j]));\n \n@@ -1092,7 +1096,7 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n \tif (local_label[j])\n \t  map->label_map[j] = gen_label_rtx ();\n \n-      for (j = FIRST_PSEUDO_REGISTER; j < maxregnum; j++)\n+      for (j = FIRST_PSEUDO_REGISTER; j < max_reg_before_loop; j++)\n \tif (local_regno[j])\n \t  map->reg_map[j] = gen_reg_rtx (GET_MODE (regno_reg_rtx[j]));\n "}]}