{"sha": "456b53654a3e3cc550c24f2cb0e37e7fdfadf68e", "node_id": "C_kwDOANBUbNoAKDQ1NmI1MzY1NGEzZTNjYzU1MGMyNGYyY2IwZTM3ZTdmZGZhZGY2OGU", "commit": {"author": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2021-12-02T07:30:17Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-12-17T05:56:07Z"}, "message": "Add combine splitter to transform vpternlogd/vpcmpeqd/vpxor/vblendvps to vblendvps for ~op0\n\ngcc/ChangeLog:\n\n\tPR target/100738\n\t* config/i386/sse.md (*avx_cmp<mode>3_lt, *avx_cmp<mode>3_ltint):\n\tRemove MEM_P restriction and add force_reg for operands[2].\n\t(*avx_cmp<mode>3_ltint_not): Add new define_insn_and_split.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/100738\n\t* g++.target/i386/avx512vl-pr100738-1.C: New test.", "tree": {"sha": "3488f4f0f91c8288f3d7edfe41d2e3849aa26ef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3488f4f0f91c8288f3d7edfe41d2e3849aa26ef2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/456b53654a3e3cc550c24f2cb0e37e7fdfadf68e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/456b53654a3e3cc550c24f2cb0e37e7fdfadf68e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/456b53654a3e3cc550c24f2cb0e37e7fdfadf68e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/456b53654a3e3cc550c24f2cb0e37e7fdfadf68e/comments", "author": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79a89108dd352cd9288f5de35481b1280c7588a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a89108dd352cd9288f5de35481b1280c7588a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79a89108dd352cd9288f5de35481b1280c7588a5"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "97ce5b36073b0a1eecc508c593810edcd1cf5e42", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456b53654a3e3cc550c24f2cb0e37e7fdfadf68e/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456b53654a3e3cc550c24f2cb0e37e7fdfadf68e/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=456b53654a3e3cc550c24f2cb0e37e7fdfadf68e", "patch": "@@ -3525,8 +3525,7 @@\n \t     UNSPEC_PCMP)))]\n   \"TARGET_AVX512VL && ix86_pre_reload_split ()\n   /* LT or GE 0 */\n-  && ((INTVAL (operands[5]) == 1 && !MEM_P (operands[2]))\n-      || (INTVAL (operands[5]) == 5 && !MEM_P (operands[1])))\"\n+  && ((INTVAL (operands[5]) == 1) || (INTVAL (operands[5]) == 5))\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 0)\n@@ -3540,6 +3539,7 @@\n {\n   if (INTVAL (operands[5]) == 5)\n     std::swap (operands[1], operands[2]);\n+  operands[2] = force_reg (<MODE>mode, operands[2]);\n })\n \n (define_insn_and_split \"*avx_cmp<mode>3_ltint\"\n@@ -3554,8 +3554,7 @@\n \t     UNSPEC_PCMP)))]\n   \"TARGET_AVX512VL && ix86_pre_reload_split ()\n   /* LT or GE 0 */\n-  && ((INTVAL (operands[5]) == 1 && !MEM_P (operands[2]))\n-      || (INTVAL (operands[5]) == 5 && !MEM_P (operands[1])))\"\n+  && ((INTVAL (operands[5]) == 1) || (INTVAL (operands[5]) == 5))\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 0)\n@@ -3572,7 +3571,44 @@\n     std::swap (operands[1], operands[2]);\n   operands[0] = gen_lowpart (<ssebytemode>mode, operands[0]);\n   operands[1] = gen_lowpart (<ssebytemode>mode, operands[1]);\n+  operands[2] = force_reg (<ssebytemode>mode,\n+\t\t\t  gen_lowpart (<ssebytemode>mode, operands[2]));\n+})\n+\n+(define_insn_and_split \"*avx_cmp<mode>3_ltint_not\"\n+ [(set (match_operand:VI48_AVX  0 \"register_operand\")\n+       (vec_merge:VI48_AVX\n+\t (match_operand:VI48_AVX 1 \"vector_operand\")\n+\t (match_operand:VI48_AVX 2 \"vector_operand\")\n+\t (unspec:<avx512fmaskmode>\n+\t   [(subreg:VI48_AVX\n+\t    (not:<ssebytemode>\n+\t      (match_operand:<ssebytemode> 3 \"vector_operand\")) 0)\n+\t    (match_operand:VI48_AVX 4 \"const0_operand\")\n+\t    (match_operand:SI 5 \"const_0_to_7_operand\")]\n+\t    UNSPEC_PCMP)))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\n+  /* not LT or GE 0 */\n+  && ((INTVAL (operands[5]) == 1) || (INTVAL (operands[5]) == 5))\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:<ssebytemode>\n+\t  [(match_dup 1)\n+\t   (match_dup 2)\n+\t   (subreg:<ssebytemode>\n+\t     (lt:VI48_AVX\n+\t      (match_dup 3)\n+\t      (match_dup 4)) 0)]\n+\t    UNSPEC_BLENDV))]\n+{\n+  if (INTVAL (operands[5]) == 5)\n+    std::swap (operands[1], operands[2]);\n+  operands[0] = gen_lowpart (<ssebytemode>mode, operands[0]);\n+  operands[1] = force_reg (<ssebytemode>mode,\n+\t\t\t  gen_lowpart (<ssebytemode>mode, operands[1]));\n   operands[2] = gen_lowpart (<ssebytemode>mode, operands[2]);\n+  operands[3] = lowpart_subreg (<MODE>mode, operands[3], <ssebytemode>mode);\n })\n \n (define_insn \"avx_vmcmp<mode>3\""}, {"sha": "ac4d62b94d1e0bce3e5c1447f625d405ce7013d5", "filename": "gcc/testsuite/g++.target/i386/avx512vl-pr100738-1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456b53654a3e3cc550c24f2cb0e37e7fdfadf68e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr100738-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456b53654a3e3cc550c24f2cb0e37e7fdfadf68e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr100738-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr100738-1.C?ref=456b53654a3e3cc550c24f2cb0e37e7fdfadf68e", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -march=cascadelake\" } */\n+/* { dg-final {scan-assembler-times \"vblendvps\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final {scan-assembler-not \"vpcmpeqd\\[ \\\\t\\]\" } } */\n+/* { dg-final {scan-assembler-not \"vpxor\\[ \\\\t\\]\" } } */\n+/* { dg-final {scan-assembler-not \"vpternlogd\\[ \\\\t\\]\" } } */\n+\n+#include \"pr100738-1.C\""}]}