{"sha": "37ad04a5a4a1d3b7e1f289f2e0bd284146d1f15f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdhZDA0YTVhNGExZDNiN2UxZjI4OWYyZTBiZDI4NDE0NmQxZjE1Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-05-03T20:56:42Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-05-03T20:56:42Z"}, "message": "i386.c (expand_movstr, [...]): Fix inline-all-stringops sequence.\n\n\t* i386.c  (expand_movstr, expand_clrstr): Fix inline-all-stringops\n\tsequence.\n\nFrom-SVN: r53128", "tree": {"sha": "55a55fef5e5bfeb45e3eb55dfa2416cea24ebfba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55a55fef5e5bfeb45e3eb55dfa2416cea24ebfba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37ad04a5a4a1d3b7e1f289f2e0bd284146d1f15f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37ad04a5a4a1d3b7e1f289f2e0bd284146d1f15f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37ad04a5a4a1d3b7e1f289f2e0bd284146d1f15f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37ad04a5a4a1d3b7e1f289f2e0bd284146d1f15f/comments", "author": null, "committer": null, "parents": [{"sha": "b548220837d0386f470b48d1318b7c005d38aa3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b548220837d0386f470b48d1318b7c005d38aa3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b548220837d0386f470b48d1318b7c005d38aa3c"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "fc2ad3e1591edb2a1679f8ec0d055fae7a667a06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ad04a5a4a1d3b7e1f289f2e0bd284146d1f15f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ad04a5a4a1d3b7e1f289f2e0bd284146d1f15f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37ad04a5a4a1d3b7e1f289f2e0bd284146d1f15f", "patch": "@@ -1,3 +1,8 @@\n+Fri May  3 22:53:37 CEST 2002  Jan Hubicka <jh@suse.cz>\n+\n+\t* i386.c  (expand_movstr, expand_clrstr): Fix inline-all-stringops\n+\tsequence.\n+\n 2002-05-03  Richard Henderson  <rth@redhat.com>\n \n \tPR opt/6534"}, {"sha": "b9ca483e9c95fb86f9b6126093981fe22e0ba007", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ad04a5a4a1d3b7e1f289f2e0bd284146d1f15f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ad04a5a4a1d3b7e1f289f2e0bd284146d1f15f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=37ad04a5a4a1d3b7e1f289f2e0bd284146d1f15f", "patch": "@@ -9244,6 +9244,9 @@ ix86_expand_movstr (dst, src, count_exp, align_exp)\n     {\n       rtx countreg2;\n       rtx label = NULL;\n+      int desired_alignment = (TARGET_PENTIUMPRO\n+\t\t\t       && (count == 0 || count >= (unsigned int) 260)\n+\t\t\t       ? 8 : UNITS_PER_WORD);\n \n       /* In case we don't know anything about the alignment, default to\n          library version, since it is usually equally fast and result in\n@@ -9273,10 +9276,7 @@ ix86_expand_movstr (dst, src, count_exp, align_exp)\n          This is quite costy.  Maybe we can revisit this decision later or\n          add some customizability to this code.  */\n \n-      if (count == 0\n-\t  && align < (TARGET_PENTIUMPRO && (count == 0\n-\t\t\t\t\t    || count >= (unsigned int) 260)\n-\t\t      ? 8 : UNITS_PER_WORD))\n+      if (count == 0 && align < desired_alignment)\n \t{\n \t  label = gen_label_rtx ();\n \t  emit_cmp_and_jump_insns (countreg, GEN_INT (UNITS_PER_WORD - 1),\n@@ -9298,10 +9298,7 @@ ix86_expand_movstr (dst, src, count_exp, align_exp)\n \t  emit_label (label);\n \t  LABEL_NUSES (label) = 1;\n \t}\n-      if (align <= 4\n-\t  && ((TARGET_PENTIUMPRO && (count == 0\n-\t\t\t\t     || count >= (unsigned int) 260))\n-\t      || TARGET_64BIT))\n+      if (align <= 4 && desired_alignment > 4)\n \t{\n \t  rtx label = ix86_expand_aligntest (destreg, 4);\n \t  emit_insn (gen_strmovsi (destreg, srcreg));\n@@ -9310,6 +9307,12 @@ ix86_expand_movstr (dst, src, count_exp, align_exp)\n \t  LABEL_NUSES (label) = 1;\n \t}\n \n+      if (label && desired_alignment > 4 && !TARGET_64BIT)\n+\t{\n+\t  emit_label (label);\n+\t  LABEL_NUSES (label) = 1;\n+\t  label = NULL_RTX;\n+\t}\n       if (!TARGET_SINGLE_STRINGOP)\n \temit_insn (gen_cld ());\n       if (TARGET_64BIT)\n@@ -9455,6 +9458,10 @@ ix86_expand_clrstr (src, count_exp, align_exp)\n     {\n       rtx countreg2;\n       rtx label = NULL;\n+      /* Compute desired alignment of the string operation.  */\n+      int desired_alignment = (TARGET_PENTIUMPRO\n+\t\t\t       && (count == 0 || count >= (unsigned int) 260)\n+\t\t\t       ? 8 : UNITS_PER_WORD);\n \n       /* In case we don't know anything about the alignment, default to\n          library version, since it is usually equally fast and result in\n@@ -9469,13 +9476,10 @@ ix86_expand_clrstr (src, count_exp, align_exp)\n       countreg = copy_to_mode_reg (counter_mode, count_exp);\n       zeroreg = copy_to_mode_reg (Pmode, const0_rtx);\n \n-      if (count == 0\n-\t  && align < (TARGET_PENTIUMPRO && (count == 0\n-\t\t\t\t\t    || count >= (unsigned int) 260)\n-\t\t      ? 8 : UNITS_PER_WORD))\n+      if (count == 0 && align < desired_alignment)\n \t{\n \t  label = gen_label_rtx ();\n-\t  emit_cmp_and_jump_insns (countreg, GEN_INT (UNITS_PER_WORD - 1),\n+\t  emit_cmp_and_jump_insns (countreg, GEN_INT (desired_alignment - 1),\n \t\t\t\t   LEU, 0, counter_mode, 1, label);\n \t}\n       if (align <= 1)\n@@ -9496,8 +9500,7 @@ ix86_expand_clrstr (src, count_exp, align_exp)\n \t  emit_label (label);\n \t  LABEL_NUSES (label) = 1;\n \t}\n-      if (align <= 4 && TARGET_PENTIUMPRO && (count == 0\n-\t\t\t\t\t      || count >= (unsigned int) 260))\n+      if (align <= 4 && desired_alignment > 4)\n \t{\n \t  rtx label = ix86_expand_aligntest (destreg, 4);\n \t  emit_insn (gen_strsetsi (destreg, (TARGET_64BIT\n@@ -9508,6 +9511,13 @@ ix86_expand_clrstr (src, count_exp, align_exp)\n \t  LABEL_NUSES (label) = 1;\n \t}\n \n+      if (label && desired_alignment > 4 && !TARGET_64BIT)\n+\t{\n+\t  emit_label (label);\n+\t  LABEL_NUSES (label) = 1;\n+\t  label = NULL_RTX;\n+\t}\n+\n       if (!TARGET_SINGLE_STRINGOP)\n \temit_insn (gen_cld ());\n       if (TARGET_64BIT)\n@@ -9523,12 +9533,12 @@ ix86_expand_clrstr (src, count_exp, align_exp)\n \t  emit_insn (gen_rep_stossi (destreg, countreg2, zeroreg,\n \t\t\t\t     destreg, countreg2));\n \t}\n-\n       if (label)\n \t{\n \t  emit_label (label);\n \t  LABEL_NUSES (label) = 1;\n \t}\n+\n       if (TARGET_64BIT && align > 4 && count != 0 && (count & 4))\n \temit_insn (gen_strsetsi (destreg,\n \t\t\t\t gen_rtx_SUBREG (SImode, zeroreg, 0)));"}]}