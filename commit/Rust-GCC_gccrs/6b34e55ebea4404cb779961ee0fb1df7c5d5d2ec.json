{"sha": "6b34e55ebea4404cb779961ee0fb1df7c5d5d2ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIzNGU1NWViZWE0NDA0Y2I3Nzk5NjFlZTBmYjFkZjdjNWQ1ZDJlYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-10-11T12:13:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-10-11T12:13:43Z"}, "message": "frv.md (*adddi3_internal): Change name to...\n\n\t* config/frv/frv.md (*adddi3_internal): Change name to...\n\t(adddi3): ...replacing the exisiting define_expand.  Combine\n\talternatives.  Fix the range of the constant constraints ('J' instead\n\tof 'NOP').  Remove bogus operands[2] check.  Use simplify_gen_subreg\n\tto extract the lower and upper halves of the DImode operands.\n\tAlways use addi3_lower and adddi3_upper, not the subdi3 forms.\n\t(adddi3_lower): Fix the range of the constant constraints and\n\tremove the bogus operands[2] check.\n\t(adddi3_upper): Use gpr_or_int10_operand as the predicate for\n\toperand 2.  Use addxi to handle constant operands.\n\t(subdi3_lower, subdi3_upper): Don't handle constant operands.\n\nFrom-SVN: r88876", "tree": {"sha": "5af4521381b67615e3f4fe1807737b36eb8c5780", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5af4521381b67615e3f4fe1807737b36eb8c5780"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b34e55ebea4404cb779961ee0fb1df7c5d5d2ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b34e55ebea4404cb779961ee0fb1df7c5d5d2ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b34e55ebea4404cb779961ee0fb1df7c5d5d2ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b34e55ebea4404cb779961ee0fb1df7c5d5d2ec/comments", "author": null, "committer": null, "parents": [{"sha": "22423a1f5b9cfd57633a17b0abd725b6229ba484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22423a1f5b9cfd57633a17b0abd725b6229ba484", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22423a1f5b9cfd57633a17b0abd725b6229ba484"}], "stats": {"total": 173, "additions": 110, "deletions": 63}, "files": [{"sha": "bf1f125340cd1953c118faba2fd55a1b35e264da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b34e55ebea4404cb779961ee0fb1df7c5d5d2ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b34e55ebea4404cb779961ee0fb1df7c5d5d2ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b34e55ebea4404cb779961ee0fb1df7c5d5d2ec", "patch": "@@ -1,3 +1,17 @@\n+2004-10-11  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/frv/frv.md (*adddi3_internal): Change name to...\n+\t(adddi3): ...replacing the exisiting define_expand.  Combine\n+\talternatives.  Fix the range of the constant constraints ('J' instead\n+\tof 'NOP').  Remove bogus operands[2] check.  Use simplify_gen_subreg\n+\tto extract the lower and upper halves of the DImode operands.\n+\tAlways use addi3_lower and adddi3_upper, not the subdi3 forms.\n+\t(adddi3_lower): Fix the range of the constant constraints and\n+\tremove the bogus operands[2] check.\n+\t(adddi3_upper): Use gpr_or_int10_operand as the predicate for\n+\toperand 2.  Use addxi to handle constant operands.\n+\t(subdi3_lower, subdi3_upper): Don't handle constant operands.\n+\n 2004-10-11  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* gengtype-lex.l: Add commented } & ) characters to unconfuse"}, {"sha": "ee17edabed8561a095e4ee00ea5759c6005c10f8", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 32, "deletions": 63, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b34e55ebea4404cb779961ee0fb1df7c5d5d2ec/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b34e55ebea4404cb779961ee0fb1df7c5d5d2ec/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=6b34e55ebea4404cb779961ee0fb1df7c5d5d2ec", "patch": "@@ -2940,57 +2940,30 @@\n ;; ::::::::::::::::::::\n \n ;; Addition\n-(define_expand \"adddi3\"\n-  [(parallel [(set (match_operand:DI 0 \"integer_register_operand\" \"\")\n-\t\t   (plus:DI (match_operand:DI 1 \"integer_register_operand\" \"\")\n-\t\t\t    (match_operand:DI 2 \"gpr_or_int10_operand\" \"\")))\n-\t      (clobber (match_scratch:CC 3 \"\"))])]\n+(define_insn_and_split \"adddi3\"\n+  [(set (match_operand:DI 0 \"integer_register_operand\" \"=&e,e\")\n+\t(plus:DI (match_operand:DI 1 \"integer_register_operand\" \"%e,0\")\n+\t\t (match_operand:DI 2 \"gpr_or_int10_operand\" \"eJ,eJ\")))\n+   (clobber (match_scratch:CC 3 \"=t,t\"))]\n   \"\"\n-  \"\n-{\n-  if (GET_CODE (operands[2]) == CONST_INT\n-      && INTVAL (operands[2]) == -2048\n-      && !no_new_pseudos)\n-    operands[2] = force_reg (DImode, operands[2]);\n-}\")\n-\n-(define_insn_and_split \"*adddi3_internal\"\n-  [(set (match_operand:DI 0 \"integer_register_operand\" \"=&e,e,e,&e,e,&e,e\")\n-\t(plus:DI (match_operand:DI 1 \"integer_register_operand\" \"%e,0,e,e,0,e,0\")\n-\t\t (match_operand:DI 2 \"gpr_or_int10_operand\" \"e,e,0,N,N,OP,OP\")))\n-   (clobber (match_scratch:CC 3 \"=t,t,t,t,t,t,t\"))]\n-  \"GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != -2048\"\n   \"#\"\n   \"reload_completed\"\n   [(match_dup 4)\n    (match_dup 5)]\n   \"\n {\n-  rtx op0_high = gen_highpart (SImode, operands[0]);\n-  rtx op1_high = gen_highpart (SImode, operands[1]);\n-  rtx op0_low  = gen_lowpart (SImode, operands[0]);\n-  rtx op1_low  = gen_lowpart (SImode, operands[1]);\n-  rtx op2 = operands[2];\n-  rtx op3 = operands[3];\n-\n-  if (GET_CODE (op2) != CONST_INT)\n-    {\n-      rtx op2_high = gen_highpart (SImode, operands[2]);\n-      rtx op2_low  = gen_lowpart (SImode, operands[2]);\n-      operands[4] = gen_adddi3_lower (op0_low, op1_low, op2_low, op3);\n-      operands[5] = gen_adddi3_upper (op0_high, op1_high, op2_high, op3);\n-    }\n-  else if (INTVAL (op2) >= 0)\n-    {\n-      operands[4] = gen_adddi3_lower (op0_low, op1_low, op2, op3);\n-      operands[5] = gen_adddi3_upper (op0_high, op1_high, const0_rtx, op3);\n-    }\n-  else\n-    {\n-      operands[4] = gen_subdi3_lower (op0_low, op1_low,\n-\t\t\t\t      GEN_INT (- INTVAL (op2)), op3);\n-      operands[5] = gen_subdi3_upper (op0_high, op1_high, const0_rtx, op3);\n-    }\n+  rtx parts[3][2];\n+  int op, part;\n+\n+  for (op = 0; op < 3; op++)\n+    for (part = 0; part < 2; part++)\n+      parts[op][part] = simplify_gen_subreg (SImode, operands[op],\n+\t\t\t\t\t     DImode, part * UNITS_PER_WORD);\n+\n+  operands[4] = gen_adddi3_lower (parts[0][1], parts[1][1], parts[2][1],\n+\t\t\t\t  operands[3]);\n+  operands[5] = gen_adddi3_upper (parts[0][0], parts[1][0], parts[2][0],\n+\t\t\t\t  copy_rtx (operands[3]));\n }\"\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"multi\")])\n@@ -3027,50 +3000,46 @@\n (define_insn \"adddi3_lower\"\n   [(set (match_operand:SI 0 \"integer_register_operand\" \"=d\")\n \t(plus:SI (match_operand:SI 1 \"integer_register_operand\" \"d\")\n-\t\t (match_operand:SI 2 \"gpr_or_int10_operand\" \"dOP\")))\n+\t\t (match_operand:SI 2 \"gpr_or_int10_operand\" \"dJ\")))\n    (set (match_operand:CC 3 \"icc_operand\" \"=t\")\n \t(compare:CC (plus:SI (match_dup 1)\n \t\t\t     (match_dup 2))\n \t\t    (const_int 0)))]\n-  \"GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) >= 0\"\n+  \"\"\n   \"add%I2cc %1,%2,%0,%3\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"int\")])\n \n (define_insn \"adddi3_upper\"\n-  [(set (match_operand:SI 0 \"integer_register_operand\" \"=d,d\")\n-\t(plus:SI (match_operand:SI 1 \"integer_register_operand\" \"d,d\")\n-\t\t (plus:SI (match_operand:SI 2 \"reg_or_0_operand\" \"d,O\")\n-\t\t\t  (match_operand:CC 3 \"icc_operand\" \"t,t\"))))]\n+  [(set (match_operand:SI 0 \"integer_register_operand\" \"=d\")\n+\t(plus:SI (match_operand:SI 1 \"integer_register_operand\" \"d\")\n+\t\t (plus:SI (match_operand:SI 2 \"gpr_or_int10_operand\" \"dJ\")\n+\t\t\t  (match_operand:CC 3 \"icc_operand\" \"t\"))))]\n   \"\"\n-  \"@\n-   addx %1,%2,%0,%3\n-   addx %1,%.,%0,%3\"\n+  \"addx%I2 %1,%2,%0,%3\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"int\")])\n \n (define_insn \"subdi3_lower\"\n   [(set (match_operand:SI 0 \"integer_register_operand\" \"=d\")\n \t(minus:SI (match_operand:SI 1 \"integer_register_operand\" \"d\")\n-\t\t  (match_operand:SI 2 \"gpr_or_int10_operand\" \"dOP\")))\n+\t\t  (match_operand:SI 2 \"integer_register_operand\" \"d\")))\n    (set (match_operand:CC 3 \"icc_operand\" \"=t\")\n \t(compare:CC (plus:SI (match_dup 1)\n \t\t\t     (match_dup 2))\n \t\t    (const_int 0)))]\n-  \"GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) >= 0\"\n-  \"sub%I2cc %1,%2,%0,%3\"\n+  \"\"\n+  \"subcc %1,%2,%0,%3\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"int\")])\n \n (define_insn \"subdi3_upper\"\n-  [(set (match_operand:SI 0 \"integer_register_operand\" \"=d,d\")\n-\t(minus:SI (match_operand:SI 1 \"integer_register_operand\" \"d,d\")\n-\t\t  (minus:SI (match_operand:SI 2 \"reg_or_0_operand\" \"d,O\")\n-\t\t\t    (match_operand:CC 3 \"icc_operand\" \"t,t\"))))]\n+  [(set (match_operand:SI 0 \"integer_register_operand\" \"=d\")\n+\t(minus:SI (match_operand:SI 1 \"integer_register_operand\" \"d\")\n+\t\t  (minus:SI (match_operand:SI 2 \"integer_register_operand\" \"d\")\n+\t\t\t    (match_operand:CC 3 \"icc_operand\" \"t\"))))]\n   \"\"\n-  \"@\n-   subx %1,%2,%0,%3\n-   subx %1,%.,%0,%3\"\n+  \"subx %1,%2,%0,%3\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"int\")])\n "}, {"sha": "5009857d221c94e15980ce90e24b79b160d49bea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b34e55ebea4404cb779961ee0fb1df7c5d5d2ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b34e55ebea4404cb779961ee0fb1df7c5d5d2ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b34e55ebea4404cb779961ee0fb1df7c5d5d2ec", "patch": "@@ -1,3 +1,7 @@\n+2004-10-11  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.c-torture/execute/20041011-1.c: New test.\n+\n 2004-10-10  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c++/17554"}, {"sha": "4524de9435f21d0f67b69681fae2af5d22091751", "filename": "gcc/testsuite/gcc.c-torture/execute/20041011-1.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b34e55ebea4404cb779961ee0fb1df7c5d5d2ec/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20041011-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b34e55ebea4404cb779961ee0fb1df7c5d5d2ec/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20041011-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20041011-1.c?ref=6b34e55ebea4404cb779961ee0fb1df7c5d5d2ec", "patch": "@@ -0,0 +1,60 @@\n+typedef unsigned long long ull;\n+volatile int gvol[32];\n+ull gull;\n+\n+#define MULTI(X) \\\n+\tX( 1), X( 2), X( 3), X( 4), X( 5), X( 6), X( 7), X( 8), X( 9), X(10), \\\n+\tX(11), X(12), X(13), X(14), X(15), X(16), X(17), X(18), X(19), X(20), \\\n+\tX(21), X(22), X(23), X(24), X(25), X(26), X(27), X(28), X(29), X(30)\n+\n+#define DECLARE(INDEX) x##INDEX\n+#define COPYIN(INDEX) x##INDEX = gvol[INDEX]\n+#define COPYOUT(INDEX) gvol[INDEX] = x##INDEX\n+\n+#define BUILD_TEST(NAME, N)\t\t\\\n+  ull __attribute__((noinline))\t\t\\\n+  NAME (int n, ull x)\t\t\t\\\n+  {\t\t\t\t\t\\\n+    while (n--)\t\t\t\t\\\n+      {\t\t\t\t\t\\\n+\tint MULTI (DECLARE);\t\t\\\n+\tMULTI (COPYIN);\t\t\t\\\n+\tMULTI (COPYOUT);\t\t\\\n+\tx += N;\t\t\t\t\\\n+      }\t\t\t\t\t\\\n+    return x;\t\t\t\t\\\n+  }\n+\n+#define RUN_TEST(NAME, N)\t\t\\\n+  if (NAME (3, ~0ULL) != N * 3 - 1)\t\\\n+    abort ();\t\t\t\t\\\n+  if (NAME (3, 0xffffffffULL)\t\t\\\n+      != N * 3 + 0xffffffffULL)\t\t\\\n+    abort ();\n+\n+#define DO_TESTS(DO_TEST)\t\\\n+  DO_TEST (t1, -2048)\t\t\\\n+  DO_TEST (t2, -513)\t\t\\\n+  DO_TEST (t3, -512)\t\t\\\n+  DO_TEST (t4, -511)\t\t\\\n+  DO_TEST (t5, -1)\t\t\\\n+  DO_TEST (t6, 1)\t\t\\\n+  DO_TEST (t7, 511)\t\t\\\n+  DO_TEST (t8, 512)\t\t\\\n+  DO_TEST (t9, 513)\t\t\\\n+  DO_TEST (t10, gull)\t\t\\\n+  DO_TEST (t11, -gull)\n+\n+DO_TESTS (BUILD_TEST)\n+\n+ull neg (ull x) { return -x; }\n+\n+int\n+main ()\n+{\n+  gull = 100;\n+  DO_TESTS (RUN_TEST)\n+  if (neg (gull) != -100ULL)\n+    abort ();\n+  exit (0);\n+}"}]}