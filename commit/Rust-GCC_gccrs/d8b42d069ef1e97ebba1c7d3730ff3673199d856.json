{"sha": "d8b42d069ef1e97ebba1c7d3730ff3673199d856", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhiNDJkMDY5ZWYxZTk3ZWJiYTFjN2QzNzMwZmYzNjczMTk5ZDg1Ng==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2005-04-09T05:31:46Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2005-04-09T05:31:46Z"}, "message": "* builtins.def (BUILT_IN_LFLOOR, BUILT_IN_LFLOORF, BUILT_IN_LFLOORL)\n\t(BUILT_IN_LLFLOOR, BUILT_IN_LLFLOORF, BUILT_IN_LLFLOORL): New.\n\t* optabs.h (enum optab_index): Add new OTI_lfloor.\n\t(lfloor_optab): Define corresponding macro.\n\t* optabs.c (init_optabs): Initialize lfloor_optab.\n\t* genopinit.c (optabs): Implement lfloor_optab using lfloorsi2\n\tand lfloordi2 patterns.\n\n\t* builtins.c (expand_builtin_int_roundingfn): New prototype.\n\t(expand_builtin_int_roundingfn): New function.\n\t(fold_builtin_int_roundingfn): New prototype.\n\t(fold_builtin_int_roundingfn): New function, renamed from\n\tfold_builtin_lround.\n\tHandle BUILT_IN_LROUND{,F,L}, BUILT_IN_LLROUND{,F,L} and\n\tBUILT_IN_LFLOOR{,F,L}, BUILT_IN_LLFLOOR{,F,L}.\n\t(fold_builtin_1): Fold BUILT_IN_LFLOOR{,F,L} and\n\tBUILT_IN_LLFLOOR{,F,L} using fold_builtin_int_roundingfn.\n\t(mathfn_built_in): Handle BUILT_IN LFLOOR and BUILT_IN_LLFLOOR.\n\t(expand_builtin): Expand BUILT_IN_LFLOOR{,F,L} and\n\tBUILT_IN_LLFLOOR{,F,L} using expand_builtin_int_roundingfn.\n\n\t* convert.c (convert_to_integer): Convert (long int)floor{,f,l},\n\tinto lfloor built-in function and (long long int)floor{,f,l} into\n\tllfloor built-in function.\n\t* fold-const.c (tree_expr_nonnegative_p): Add BUILT_IN_LFLOOR and\n\tBUILT_IN_LLFLOOR.\n\ntestsuite:\n\n\t* gcc.dg/builtins-53.c: New test.\n\nFrom-SVN: r97886", "tree": {"sha": "03e11f5c02fd01186c4ac1e8629da56190c39031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03e11f5c02fd01186c4ac1e8629da56190c39031"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8b42d069ef1e97ebba1c7d3730ff3673199d856", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8b42d069ef1e97ebba1c7d3730ff3673199d856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8b42d069ef1e97ebba1c7d3730ff3673199d856", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8b42d069ef1e97ebba1c7d3730ff3673199d856/comments", "author": null, "committer": null, "parents": [{"sha": "fbc315db4a79aee216b2e56e1653e22d86436fea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbc315db4a79aee216b2e56e1653e22d86436fea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbc315db4a79aee216b2e56e1653e22d86436fea"}], "stats": {"total": 245, "additions": 239, "deletions": 6}, "files": [{"sha": "adeed7feb9f75769c9d80472e9189f0745ce5dfc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8b42d069ef1e97ebba1c7d3730ff3673199d856", "patch": "@@ -1,3 +1,30 @@\n+2005-04-09  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* builtins.def (BUILT_IN_LFLOOR, BUILT_IN_LFLOORF, BUILT_IN_LFLOORL)\n+\t(BUILT_IN_LLFLOOR, BUILT_IN_LLFLOORF, BUILT_IN_LLFLOORL): New.\n+\t* optabs.h (enum optab_index): Add new OTI_lfloor.\n+\t(lfloor_optab): Define corresponding macro.\n+\t* optabs.c (init_optabs): Initialize lfloor_optab.\n+\t* genopinit.c (optabs): Implement lfloor_optab using lfloorsi2\n+\tand lfloordi2 patterns.\n+\t* builtins.c (expand_builtin_int_roundingfn): New prototype.\n+\t(expand_builtin_int_roundingfn): New function.\n+\t(fold_builtin_int_roundingfn): New prototype.\n+\t(fold_builtin_int_roundingfn): New function, renamed from\n+\tfold_builtin_lround.\n+\tHandle BUILT_IN_LROUND{,F,L}, BUILT_IN_LLROUND{,F,L} and\n+\tBUILT_IN_LFLOOR{,F,L}, BUILT_IN_LLFLOOR{,F,L}.\n+\t(fold_builtin_1): Fold BUILT_IN_LFLOOR{,F,L} and\n+\tBUILT_IN_LLFLOOR{,F,L} using fold_builtin_int_roundingfn.\n+\t(mathfn_built_in): Handle BUILT_IN LFLOOR and BUILT_IN_LLFLOOR.\n+\t(expand_builtin): Expand BUILT_IN_LFLOOR{,F,L} and\n+\tBUILT_IN_LLFLOOR{,F,L} using expand_builtin_int_roundingfn.\n+\t* convert.c (convert_to_integer): Convert (long int)floor{,f,l},\n+\tinto lfloor built-in function and (long long int)floor{,f,l} into\n+\tllfloor built-in function.\n+\t* fold-const.c (tree_expr_nonnegative_p): Add BUILT_IN_LFLOOR and\n+\tBUILT_IN_LLFLOOR.\n+\n 2005-04-08  Ian Lance Taylor  <ian@airs.com>\n \n \t* c-common.def: Move FOR_STMT, WHILE_STMT, DO_STMT, BREAK_STMT,\n@@ -987,7 +1014,7 @@\n \t* tree-chrec.c (chrec_convert): Return chrec_dont_know for constants\n \tthat don't fit in their type after conversion.\n \n-2005-04-05 Uros Bizjak <uros@kss-loka.si>\n+2005-04-05  Uros Bizjak <uros@kss-loka.si>\n \n \tPR target/20421\n \t* config/i386/i386.md (frndintxf2_floor, frndintxf2_ceil)"}, {"sha": "034934cd153c768168f1adf5d8e9c62cad50997b", "filename": "gcc/builtins.c", "status": "modified", "additions": 143, "deletions": 5, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=d8b42d069ef1e97ebba1c7d3730ff3673199d856", "patch": "@@ -98,6 +98,7 @@ static void expand_errno_check (tree, rtx);\n static rtx expand_builtin_mathfn (tree, rtx, rtx);\n static rtx expand_builtin_mathfn_2 (tree, rtx, rtx);\n static rtx expand_builtin_mathfn_3 (tree, rtx, rtx);\n+static rtx expand_builtin_int_roundingfn (tree, rtx, rtx);\n static rtx expand_builtin_args_info (tree);\n static rtx expand_builtin_next_arg (void);\n static rtx expand_builtin_va_start (tree);\n@@ -161,6 +162,7 @@ static tree fold_builtin_trunc (tree, tree);\n static tree fold_builtin_floor (tree, tree);\n static tree fold_builtin_ceil (tree, tree);\n static tree fold_builtin_round (tree, tree);\n+static tree fold_builtin_int_roundingfn (tree, tree);\n static tree fold_builtin_bitop (tree, tree);\n static tree fold_builtin_memcpy (tree, tree);\n static tree fold_builtin_mempcpy (tree, tree, int);\n@@ -1548,7 +1550,9 @@ mathfn_built_in (tree type, enum built_in_function fn)\n       CASE_MATHFN (BUILT_IN_J1)\n       CASE_MATHFN (BUILT_IN_JN)\n       CASE_MATHFN (BUILT_IN_LDEXP)\n+      CASE_MATHFN (BUILT_IN_LFLOOR)\n       CASE_MATHFN (BUILT_IN_LGAMMA)\n+      CASE_MATHFN (BUILT_IN_LLFLOOR)\n       CASE_MATHFN (BUILT_IN_LLRINT)\n       CASE_MATHFN (BUILT_IN_LLROUND)\n       CASE_MATHFN (BUILT_IN_LOG)\n@@ -2112,6 +2116,100 @@ expand_builtin_mathfn_3 (tree exp, rtx target, rtx subtarget)\n   return target;\n }\n \n+/* Expand a call to one of the builtin rounding functions (lfloor).\n+   If expanding via optab fails, lower expression to (int)(floor(x)).\n+   EXP is the expression that is a call to the builtin function;\n+   if convenient, the result should be placed in TARGET.  SUBTARGET may\n+   be used as the target for computing one of EXP's operands.  */\n+\n+static rtx\n+expand_builtin_int_roundingfn (tree exp, rtx target, rtx subtarget)\n+{\n+  optab builtin_optab;\n+  rtx op0, insns, tmp;\n+  tree fndecl = get_callee_fndecl (exp);\n+  tree arglist = TREE_OPERAND (exp, 1);\n+  enum built_in_function fallback_fn;\n+  tree fallback_fndecl;\n+  enum machine_mode mode;\n+  tree arg, narg;\n+\n+  if (!validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n+    gcc_unreachable ();\n+\n+  arg = TREE_VALUE (arglist);\n+\n+  switch (DECL_FUNCTION_CODE (fndecl))\n+    {\n+    case BUILT_IN_LFLOOR:\n+    case BUILT_IN_LFLOORF:\n+    case BUILT_IN_LFLOORL:\n+    case BUILT_IN_LLFLOOR:\n+    case BUILT_IN_LLFLOORF:\n+    case BUILT_IN_LLFLOORL:\n+      builtin_optab = lfloor_optab;\n+      fallback_fn = BUILT_IN_FLOOR;\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  /* Make a suitable register to place result in.  */\n+  mode = TYPE_MODE (TREE_TYPE (exp));\n+\n+  /* Before working hard, check whether the instruction is available.  */\n+  if (builtin_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing)\n+    {\n+      target = gen_reg_rtx (mode);\n+\n+      /* Wrap the computation of the argument in a SAVE_EXPR, as we may\n+\t need to expand the argument again.  This way, we will not perform\n+\t side-effects more the once.  */\n+      narg = builtin_save_expr (arg);\n+      if (narg != arg)\n+\t{\n+\t  arg = narg;\n+\t  arglist = build_tree_list (NULL_TREE, arg);\n+\t  exp = build_function_call_expr (fndecl, arglist);\n+\t}\n+\n+      op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n+\n+      start_sequence ();\n+\n+      /* Compute into TARGET.\n+\t Set TARGET to wherever the result comes back.  */\n+      target = expand_unop (mode, builtin_optab, op0, target, 0);\n+\n+      if (target != 0)\n+\t{\n+\t  /* Output the entire sequence.  */\n+\t  insns = get_insns ();\n+\t  end_sequence ();\n+\t  emit_insn (insns);\n+\t  return target;\n+\t}\n+\n+      /* If we were unable to expand via the builtin, stop the sequence\n+\t (without outputting the insns).  */\n+      end_sequence ();\n+    }\n+\n+  /* Fall back to floating point rounding optab.  */\n+  fallback_fndecl = mathfn_built_in (TREE_TYPE (arg), fallback_fn);\n+  exp = build_function_call_expr (fallback_fndecl, arglist);\n+\n+  tmp = expand_builtin_mathfn (exp, NULL_RTX, NULL_RTX);\n+\n+  /* Truncate the result of floating point optab to integer\n+     via expand_fix ().  */\n+  target = gen_reg_rtx (mode);\n+  expand_fix (target, tmp, 0);\n+\n+  return target;\n+}\n+\n /* To evaluate powi(x,n), the floating point value x raised to the\n    constant integer exponent n, we use a hybrid algorithm that\n    combines the \"window method\" with look-up tables.  For an\n@@ -5278,6 +5376,17 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \treturn target;\n       break;\n \n+    case BUILT_IN_LFLOOR:\n+    case BUILT_IN_LFLOORF:\n+    case BUILT_IN_LFLOORL:\n+    case BUILT_IN_LLFLOOR:\n+    case BUILT_IN_LLFLOORF:\n+    case BUILT_IN_LLFLOORL:\n+      target = expand_builtin_int_roundingfn (exp, target, subtarget);\n+      if (target)\n+\treturn target;\n+      break;\n+\n     case BUILT_IN_POW:\n     case BUILT_IN_POWF:\n     case BUILT_IN_POWL:\n@@ -6627,11 +6736,11 @@ fold_builtin_round (tree fndecl, tree arglist)\n }\n \n /* Fold function call to builtin lround, lroundf or lroundl (or the\n-   corresponding long long versions).  Return NULL_TREE if no\n-   simplification can be made.  */\n+   corresponding long long versions) and other rounding functions.\n+   Return NULL_TREE if no simplification can be made.  */\n \n static tree\n-fold_builtin_lround (tree fndecl, tree arglist)\n+fold_builtin_int_roundingfn (tree fndecl, tree arglist)\n {\n   tree arg;\n \n@@ -6651,7 +6760,30 @@ fold_builtin_lround (tree fndecl, tree arglist)\n \t  HOST_WIDE_INT hi, lo;\n \t  REAL_VALUE_TYPE r;\n \n-\t  real_round (&r, TYPE_MODE (ftype), &x);\n+\t  switch (DECL_FUNCTION_CODE (fndecl))\n+\t    {\n+\t    case BUILT_IN_LFLOOR:\n+\t    case BUILT_IN_LFLOORF:\n+\t    case BUILT_IN_LFLOORL:\n+\t    case BUILT_IN_LLFLOOR:\n+\t    case BUILT_IN_LLFLOORF:\n+\t    case BUILT_IN_LLFLOORL:\n+\t      real_floor (&r, TYPE_MODE (ftype), &x);\n+\t      break;\n+\n+\t    case BUILT_IN_LROUND:\n+\t    case BUILT_IN_LROUNDF:\n+\t    case BUILT_IN_LROUNDL:\n+\t    case BUILT_IN_LLROUND:\n+\t    case BUILT_IN_LLROUNDF:\n+\t    case BUILT_IN_LLROUNDL:\n+\t      real_round (&r, TYPE_MODE (ftype), &x);\n+\t      break;\n+\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n+\n \t  REAL_VALUE_TO_INT (&lo, &hi, r);\n \t  result = build_int_cst_wide (NULL_TREE, lo, hi);\n \t  if (int_fits_type_p (result, itype))\n@@ -8196,13 +8328,19 @@ fold_builtin_1 (tree fndecl, tree arglist, bool ignore)\n     case BUILT_IN_RINTL:\n       return fold_trunc_transparent_mathfn (fndecl, arglist);\n \n+    case BUILT_IN_LFLOOR:\n+    case BUILT_IN_LFLOORF:\n+    case BUILT_IN_LFLOORL:\n+    case BUILT_IN_LLFLOOR:\n+    case BUILT_IN_LLFLOORF:\n+    case BUILT_IN_LLFLOORL:\n     case BUILT_IN_LROUND:\n     case BUILT_IN_LROUNDF:\n     case BUILT_IN_LROUNDL:\n     case BUILT_IN_LLROUND:\n     case BUILT_IN_LLROUNDF:\n     case BUILT_IN_LLROUNDL:\n-      return fold_builtin_lround (fndecl, arglist);\n+      return fold_builtin_int_roundingfn (fndecl, arglist);\n \n     case BUILT_IN_LRINT:\n     case BUILT_IN_LRINTF:"}, {"sha": "36a644c82d3ab020d3a98339b1fcabd4ca4fb8cd", "filename": "gcc/builtins.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=d8b42d069ef1e97ebba1c7d3730ff3673199d856", "patch": "@@ -260,9 +260,15 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_JNL, \"jnl\", BT_FN_LONGDOUBLE_INT_LONGDOUBLE, AT\n DEF_LIB_BUILTIN        (BUILT_IN_LDEXP, \"ldexp\", BT_FN_DOUBLE_DOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_LDEXPF, \"ldexpf\", BT_FN_FLOAT_FLOAT_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_LDEXPL, \"ldexpl\", BT_FN_LONGDOUBLE_LONGDOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_GCC_BUILTIN        (BUILT_IN_LFLOOR, \"lfloor\", BT_FN_LONG_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_GCC_BUILTIN        (BUILT_IN_LFLOORF, \"lfloorf\", BT_FN_LONG_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_GCC_BUILTIN        (BUILT_IN_LFLOORL, \"lfloorl\", BT_FN_LONG_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_LGAMMA, \"lgamma\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LGAMMAF, \"lgammaf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LGAMMAL, \"lgammal\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_GCC_BUILTIN        (BUILT_IN_LLFLOOR, \"llfloor\", BT_FN_LONGLONG_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_GCC_BUILTIN        (BUILT_IN_LLFLOORF, \"llfloorf\", BT_FN_LONGLONG_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_GCC_BUILTIN        (BUILT_IN_LLFLOORL, \"llfloorl\", BT_FN_LONGLONG_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_LLRINT, \"llrint\", BT_FN_LONGLONG_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LLRINTF, \"llrintf\", BT_FN_LONGLONG_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LLRINTL, \"llrintl\", BT_FN_LONGLONG_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)"}, {"sha": "79aef2140cf86edc80ec2d17c7e4d50ea2381fa7", "filename": "gcc/convert.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=d8b42d069ef1e97ebba1c7d3730ff3673199d856", "patch": "@@ -349,6 +349,13 @@ convert_to_integer (tree type, tree expr)\n       \n       switch (fcode)\n         {\n+\tcase BUILT_IN_FLOOR: case BUILT_IN_FLOORF: case BUILT_IN_FLOORL:\n+\t  if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (long_long_integer_type_node))\n+\t    fn = mathfn_built_in (s_intype, BUILT_IN_LLFLOOR);\n+\t  else\n+\t    fn = mathfn_built_in (s_intype, BUILT_IN_LFLOOR);\n+\t  break;\n+\n \tcase BUILT_IN_ROUND: case BUILT_IN_ROUNDF: case BUILT_IN_ROUNDL:\n \t  if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (long_long_integer_type_node))\n \t    fn = mathfn_built_in (s_intype, BUILT_IN_LLROUND);"}, {"sha": "4d7ee93b40ee2664f6cfda984f64cf626a726439", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d8b42d069ef1e97ebba1c7d3730ff3673199d856", "patch": "@@ -10619,6 +10619,8 @@ tree_expr_nonnegative_p (tree t)\n \t    CASE_BUILTIN_F (BUILT_IN_FLOOR)\n \t    CASE_BUILTIN_F (BUILT_IN_FMOD)\n \t    CASE_BUILTIN_F (BUILT_IN_LDEXP)\n+\t    CASE_BUILTIN_F (BUILT_IN_LFLOOR)\n+\t    CASE_BUILTIN_F (BUILT_IN_LLFLOOR)\n \t    CASE_BUILTIN_F (BUILT_IN_LLRINT)\n \t    CASE_BUILTIN_F (BUILT_IN_LLROUND)\n \t    CASE_BUILTIN_F (BUILT_IN_LRINT)"}, {"sha": "42a525f8ceb762ecc9757a0fa2446e5f2dfad240", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=d8b42d069ef1e97ebba1c7d3730ff3673199d856", "patch": "@@ -119,6 +119,7 @@ static const char * const optabs[] =\n   \"copysign_optab->handlers[$A].insn_code = CODE_FOR_$(copysign$F$a3$)\",\n   \"sqrt_optab->handlers[$A].insn_code = CODE_FOR_$(sqrt$a2$)\",\n   \"floor_optab->handlers[$A].insn_code = CODE_FOR_$(floor$a2$)\",\n+  \"lfloor_optab->handlers[$A].insn_code = CODE_FOR_$(lfloor$a2$)\",\n   \"ceil_optab->handlers[$A].insn_code = CODE_FOR_$(ceil$a2$)\",\n   \"round_optab->handlers[$A].insn_code = CODE_FOR_$(round$a2$)\",\n   \"btrunc_optab->handlers[$A].insn_code = CODE_FOR_$(btrunc$a2$)\","}, {"sha": "d67274427aec9c41cfd29174040f0026334906a1", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=d8b42d069ef1e97ebba1c7d3730ff3673199d856", "patch": "@@ -5033,6 +5033,7 @@ init_optabs (void)\n   parity_optab = init_optab (PARITY);\n   sqrt_optab = init_optab (SQRT);\n   floor_optab = init_optab (UNKNOWN);\n+  lfloor_optab = init_optab (UNKNOWN);\n   ceil_optab = init_optab (UNKNOWN);\n   round_optab = init_optab (UNKNOWN);\n   btrunc_optab = init_optab (UNKNOWN);"}, {"sha": "a1c2d37c3ba2de6848be1d4082b613780cfa8dc5", "filename": "gcc/optabs.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=d8b42d069ef1e97ebba1c7d3730ff3673199d856", "patch": "@@ -186,6 +186,7 @@ enum optab_index\n   OTI_log1p,\n   /* Rounding functions */\n   OTI_floor,\n+  OTI_lfloor,\n   OTI_ceil,\n   OTI_btrunc,\n   OTI_round,\n@@ -313,6 +314,7 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define log2_optab (optab_table[OTI_log2])\n #define log1p_optab (optab_table[OTI_log1p])\n #define floor_optab (optab_table[OTI_floor])\n+#define lfloor_optab (optab_table[OTI_lfloor])\n #define ceil_optab (optab_table[OTI_ceil])\n #define btrunc_optab (optab_table[OTI_btrunc])\n #define round_optab (optab_table[OTI_round])"}, {"sha": "14258a19ec08c16b491351d47aba111345d2e74e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d8b42d069ef1e97ebba1c7d3730ff3673199d856", "patch": "@@ -1,3 +1,7 @@\n+2005-04-09  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* gcc.dg/builtins-53.c: New test.\n+\n 2005-04-08  Diego Novillo  <dnovillo@redhat.com>\n \n \t* g++.dg/tree-ssa/pr18178.C: New test."}, {"sha": "6b1a6f8cb9ddf0f88214669cfda9c77386afbe55", "filename": "gcc/testsuite/gcc.dg/builtins-53.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-53.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b42d069ef1e97ebba1c7d3730ff3673199d856/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-53.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-53.c?ref=d8b42d069ef1e97ebba1c7d3730ff3673199d856", "patch": "@@ -0,0 +1,45 @@\n+/* Copyright (C) 2005 Free Software Foundation.\n+\n+   Check that (long)floor, (long)floorf, (long)floorl,\n+   (long long)floor, (long long)floorf and (long long)floorl\n+   built-in functions compile.\n+\n+   Written by Uros Bizjak, 5th April 2005.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern double floor(double);\n+extern float floorf(float);\n+extern long double floorl(long double);\n+\n+\n+long int test1(double x)\n+{\n+  return floor(x);\n+}\n+\n+long long int test2(double x)\n+{\n+  return floor(x);\n+}\n+\n+long int test1f(float x)\n+{\n+  return floorf(x);\n+}\n+\n+long long int test2f(float x)\n+{\n+  return floorf(x);\n+}\n+\n+long int test1l(long double x)\n+{\n+  return floorl(x);\n+}\n+\n+long long int test2l(long double x)\n+{\n+  return floorl(x);\n+}"}]}