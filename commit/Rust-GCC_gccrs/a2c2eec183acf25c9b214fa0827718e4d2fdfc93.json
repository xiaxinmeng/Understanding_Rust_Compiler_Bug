{"sha": "a2c2eec183acf25c9b214fa0827718e4d2fdfc93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJjMmVlYzE4M2FjZjI1YzliMjE0ZmEwODI3NzE4ZTRkMmZkZmM5Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-15T20:28:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-16T13:36:02Z"}, "message": "libstdc++: Test errno macros directly, not via autoconf [PR 93151]\n\nThis fixes a bug caused by a mismatch between the macros defined by\n<errno.h> when GCC is built and the macros defined by <errno.h> when\nusers include <system_error>. If the user code is compiled with\n_XOPEN_SOURCE defined to 500 or 600, Darwin suppresses the\nENOTRECOVERABLE and EOWNERDEAD macros, which are not defined by SUSv3\n(aka POSIX.1-2001).\n\nSince POSIX requires the errno macros to be macros (and not variables or\nenumerators) we can just test for them directly using the preprocessor.\nThat means that <system_error> will match what is actuallydefined when\nit's included, not what was defined when GCC was built. With that change\nthere is no need for the GLIBCXX_CHECK_SYSTEM_ERROR configure checks and\nthey can be removed.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/93151\n\t* acinclude.m4 (GLIBCXX_CHECK_SYSTEM_ERROR): Remove.\n\t* configure.ac: Regenerate.\n\t* config/os/generic/error_constants.h: Test POSIX errno macros\n\tdirectly, instead of corresponding _GLIBCXX_HAVE_EXXX macros.\n\t* testsuite/19_diagnostics/headers/system_error/errc_std_c++0x.cc:\n\tLikewise.\n\t* testsuite/19_diagnostics/headers/system_error/93151.cc: New\n\ttest.", "tree": {"sha": "6abf0adcdf1e9cd7ce97ca53e543ebb3a2674834", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6abf0adcdf1e9cd7ce97ca53e543ebb3a2674834"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2c2eec183acf25c9b214fa0827718e4d2fdfc93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c2eec183acf25c9b214fa0827718e4d2fdfc93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2c2eec183acf25c9b214fa0827718e4d2fdfc93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c2eec183acf25c9b214fa0827718e4d2fdfc93/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d8476b05d7f9707e36f1aaa94a8ba02eed2955f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d8476b05d7f9707e36f1aaa94a8ba02eed2955f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d8476b05d7f9707e36f1aaa94a8ba02eed2955f"}], "stats": {"total": 113, "additions": 53, "deletions": 60}, "files": [{"sha": "e4175ea3e641c7b99863891b36918a796fd4faa9", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c2eec183acf25c9b214fa0827718e4d2fdfc93/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c2eec183acf25c9b214fa0827718e4d2fdfc93/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=a2c2eec183acf25c9b214fa0827718e4d2fdfc93", "patch": "@@ -2372,35 +2372,6 @@ AC_DEFUN([GLIBCXX_CHECK_MATH11_PROTO], [\n   AC_LANG_RESTORE\n ])\n \n-dnl\n-dnl Check whether macros, etc are present for <system_error>\n-dnl\n-AC_DEFUN([GLIBCXX_CHECK_SYSTEM_ERROR], [\n-\n-m4_pushdef([n_syserr], [1])dnl\n-m4_foreach([syserr], [EOWNERDEAD, ENOTRECOVERABLE, ENOLINK, EPROTO, ENODATA,\n-\t\t      ENOSR, ENOSTR, ETIME, EBADMSG, ECANCELED,\n-\t\t      EOVERFLOW, ENOTSUP, EIDRM, ETXTBSY,\n-\t\t      ECHILD, ENOSPC, EPERM,\n-\t\t      ETIMEDOUT, EWOULDBLOCK],\n-[m4_pushdef([SYSERR], m4_toupper(syserr))dnl\n-AC_MSG_CHECKING([for syserr])\n-AC_CACHE_VAL([glibcxx_cv_system_error[]n_syserr], [\n-AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <errno.h>]],\n-\t\t\t\t   [int i = syserr;])],\n-\t\t  [glibcxx_cv_system_error[]n_syserr=yes],\n-\t\t  [glibcxx_cv_system_error[]n_syserr=no])\n-])\n-AC_MSG_RESULT([$glibcxx_cv_system_error[]n_syserr])\n-if test x\"$glibcxx_cv_system_error[]n_syserr\" = x\"yes\"; then\n-  AC_DEFINE([HAVE_]SYSERR, 1, [Define if ]syserr[ exists.])\n-fi\n-m4_define([n_syserr], m4_incr(n_syserr))dnl\n-m4_popdef([SYSERR])dnl\n-])\n-m4_popdef([n_syserr])dnl\n-])\n-\n dnl\n dnl Check for what type of C headers to use.\n dnl"}, {"sha": "0d34f7179b6407acdd36e458870e193bda5676e6", "filename": "libstdc++-v3/config/os/generic/error_constants.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c2eec183acf25c9b214fa0827718e4d2fdfc93/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c2eec183acf25c9b214fa0827718e4d2fdfc93/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h?ref=a2c2eec183acf25c9b214fa0827718e4d2fdfc93", "patch": "@@ -48,7 +48,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bad_address = \t\t\t\tEFAULT,\n       bad_file_descriptor = \t\t\tEBADF,\n \n-#ifdef _GLIBCXX_HAVE_EBADMSG\n+#ifdef EBADMSG\n       bad_message = \t\t\t\tEBADMSG,\n #endif\n \n@@ -68,7 +68,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       function_not_supported = \t\t\tENOSYS,\n       host_unreachable = \t\t\tEHOSTUNREACH,\n \n-#ifdef _GLIBCXX_HAVE_EIDRM\n+#ifdef EIDRM\n       identifier_removed = \t\t\tEIDRM,\n #endif\n \n@@ -86,21 +86,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       no_buffer_space = \t\t\tENOBUFS,\n       no_child_process = \t\t\tECHILD,\n \n-#ifdef _GLIBCXX_HAVE_ENOLINK\n+#ifdef ENOLINK\n       no_link = \t\t\t\tENOLINK,\n #endif\n \n       no_lock_available = \t\t\tENOLCK,\n \n-#ifdef _GLIBCXX_HAVE_ENODATA\n+#ifdef ENODATA\n       no_message_available = \t\t\tENODATA,\n #endif\n \n       no_message = \t\t\t\tENOMSG,\n       no_protocol_option = \t\t\tENOPROTOOPT,\n       no_space_on_device = \t\t\tENOSPC,\n \n-#ifdef _GLIBCXX_HAVE_ENOSR\n+#ifdef ENOSR\n       no_stream_resources = \t\t\tENOSR,\n #endif\n \n@@ -111,18 +111,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       not_a_directory = \t\t\tENOTDIR,\n       not_a_socket = \t\t\t\tENOTSOCK,\n \n-#ifdef _GLIBCXX_HAVE_ENOSTR\n+#ifdef ENOSTR\n       not_a_stream = \t\t\t\tENOSTR,\n #endif\n \n       not_connected = \t\t\t\tENOTCONN,\n       not_enough_memory = \t\t\tENOMEM,\n \n-#ifdef _GLIBCXX_HAVE_ENOTSUP\n+#ifdef ENOTSUP\n       not_supported = \t\t\t\tENOTSUP,\n #endif\n \n-#ifdef _GLIBCXX_HAVE_ECANCELED\n+#ifdef ECANCELED\n       operation_canceled = \t\t\tECANCELED,\n #endif\n \n@@ -131,13 +131,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operation_not_supported = \t\tEOPNOTSUPP,\n       operation_would_block = \t\t\tEWOULDBLOCK,\n \n-#ifdef _GLIBCXX_HAVE_EOWNERDEAD\n+#ifdef EOWNERDEAD\n       owner_dead = \t\t\t\tEOWNERDEAD,\n #endif\n \n       permission_denied = \t\t\tEACCES,\n \n-#ifdef _GLIBCXX_HAVE_EPROTO\n+#ifdef EPROTO\n       protocol_error = \t\t\t\tEPROTO,\n #endif\n \n@@ -147,15 +147,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       resource_unavailable_try_again = \t\tEAGAIN,\n       result_out_of_range = \t\t\tERANGE,\n \n-#ifdef _GLIBCXX_HAVE_ENOTRECOVERABLE\n+#ifdef ENOTRECOVERABLE\n       state_not_recoverable = \t\t\tENOTRECOVERABLE,\n #endif\n \n-#ifdef _GLIBCXX_HAVE_ETIME\n+#ifdef ETIME\n       stream_timeout = \t\t\t\tETIME,\n #endif\n \n-#ifdef _GLIBCXX_HAVE_ETXTBSY\n+#ifdef ETXTBSY\n       text_file_busy = \t\t\t\tETXTBSY,\n #endif\n \n@@ -165,7 +165,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       too_many_links = \t\t\t\tEMLINK,\n       too_many_symbolic_link_levels = \t\tELOOP,\n \n-#ifdef _GLIBCXX_HAVE_EOVERFLOW\n+#ifdef EOVERFLOW\n       value_too_large = \t\t\tEOVERFLOW,\n #endif\n "}, {"sha": "9138ba2258880da7a1c697a92b25a106297839d2", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c2eec183acf25c9b214fa0827718e4d2fdfc93/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c2eec183acf25c9b214fa0827718e4d2fdfc93/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=a2c2eec183acf25c9b214fa0827718e4d2fdfc93", "patch": "@@ -183,7 +183,6 @@ GLIBCXX_ENABLE_VTABLE_VERIFY([no])\n # Checks for operating systems support that doesn't require linking.\n GLIBCXX_CHECK_STDIO_PROTO\n GLIBCXX_CHECK_MATH11_PROTO\n-GLIBCXX_CHECK_SYSTEM_ERROR\n GLIBCXX_CHECK_UCHAR_H\n \n # For the streamoff typedef."}, {"sha": "2d8efc76deb37d2c6b8ce97afbf349b67be3a332", "filename": "libstdc++-v3/testsuite/19_diagnostics/headers/system_error/93151.cc", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c2eec183acf25c9b214fa0827718e4d2fdfc93/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2F93151.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c2eec183acf25c9b214fa0827718e4d2fdfc93/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2F93151.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2F93151.cc?ref=a2c2eec183acf25c9b214fa0827718e4d2fdfc93", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile { target c++11 } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// PR libstdc++/93151\n+#undef _XOPEN_SOURCE\n+#define _XOPEN_SOURCE 600\n+#include <system_error>"}, {"sha": "72c4b53124d8de840d9196b1616417c448ffcb7c", "filename": "libstdc++-v3/testsuite/19_diagnostics/headers/system_error/errc_std_c++0x.cc", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c2eec183acf25c9b214fa0827718e4d2fdfc93/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Ferrc_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c2eec183acf25c9b214fa0827718e4d2fdfc93/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Ferrc_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Ferrc_std_c%2B%2B0x.cc?ref=a2c2eec183acf25c9b214fa0827718e4d2fdfc93", "patch": "@@ -34,7 +34,7 @@ void test01()\n   TEST_ERRC(bad_address);\n   TEST_ERRC(bad_file_descriptor);\n \n-#ifdef _GLIBCXX_HAVE_EBADMSG\n+#ifdef EBADMSG\n   TEST_ERRC(bad_message);\n #endif\n \n@@ -54,7 +54,7 @@ void test01()\n   TEST_ERRC(function_not_supported);\n   TEST_ERRC(host_unreachable);\n \n-#ifdef _GLIBCXX_HAVE_EIDRM\n+#ifdef EIDRM\n   TEST_ERRC(identifier_removed);\n #endif\n \n@@ -72,23 +72,23 @@ void test01()\n   TEST_ERRC(no_buffer_space);\n   TEST_ERRC(no_child_process);\n \n-#ifdef _GLIBCXX_HAVE_ENOLINK\n+#ifdef ENOLINK\n   TEST_ERRC(no_link);\n #endif\n \n   TEST_ERRC(no_lock_available);\n \n-#ifdef _GLIBCXX_HAVE_ENODATA\n+#ifdef ENODATA\n   TEST_ERRC(no_message_available);\n #endif\n \n-#ifdef _GLIBCXX_HAVE_ENOMSG\n+#ifdef ENOMSG\n   TEST_ERRC(no_message);\n #endif\n   TEST_ERRC(no_protocol_option);\n   TEST_ERRC(no_space_on_device);\n \n-#ifdef _GLIBCXX_HAVE_ENOSR\n+#ifdef ENOSR\n   TEST_ERRC(no_stream_resources);\n #endif\n \n@@ -99,15 +99,15 @@ void test01()\n   TEST_ERRC(not_a_directory);\n   TEST_ERRC(not_a_socket);\n \n-#ifdef _GLIBCXX_HAVE_ENOSTR\n+#ifdef ENOSTR\n   TEST_ERRC(not_a_stream);\n #endif\n \n-  TEST_ERRC(not_connected); \n+  TEST_ERRC(not_connected);\n   TEST_ERRC(not_enough_memory);\n   TEST_ERRC(not_supported);\n \n-#ifdef _GLIBCXX_HAVE_ECANCELED\n+#ifdef ECANCELED\n   TEST_ERRC(operation_canceled);\n #endif\n \n@@ -116,31 +116,31 @@ void test01()\n   TEST_ERRC(operation_not_supported);\n   TEST_ERRC(operation_would_block);\n \n-#ifdef _GLIBCXX_HAVE_EOWNERDEAD\n+#ifdef EOWNERDEAD\n   TEST_ERRC(owner_dead);\n #endif\n \n   TEST_ERRC(permission_denied);\n \n-#ifdef _GLIBCXX_HAVE_EPROTO\n+#ifdef EPROTO\n   TEST_ERRC(protocol_error);\n #endif\n \n   TEST_ERRC(protocol_not_supported);\n   TEST_ERRC(read_only_file_system);\n   TEST_ERRC(resource_deadlock_would_occur);\n-  TEST_ERRC(resource_unavailable_try_again); \n+  TEST_ERRC(resource_unavailable_try_again);\n   TEST_ERRC(result_out_of_range);\n \n-#ifdef _GLIBCXX_HAVE_ENOTRECOVERABLE\n+#ifdef ENOTRECOVERABLE\n   TEST_ERRC(state_not_recoverable);\n #endif\n \n-#ifdef _GLIBCXX_HAVE_ETIME\n+#ifdef ETIME\n   TEST_ERRC(stream_timeout);\n #endif\n \n-#ifdef _GLIBCXX_HAVE_ETXTBSY\n+#ifdef ETXTBSY\n   TEST_ERRC(text_file_busy);\n #endif\n \n@@ -150,7 +150,7 @@ void test01()\n   TEST_ERRC(too_many_links);\n   TEST_ERRC(too_many_symbolic_link_levels);\n \n-#ifdef _GLIBCXX_HAVE_EOVERFLOW\n+#ifdef EOVERFLOW\n   TEST_ERRC(value_too_large);\n #endif\n "}]}