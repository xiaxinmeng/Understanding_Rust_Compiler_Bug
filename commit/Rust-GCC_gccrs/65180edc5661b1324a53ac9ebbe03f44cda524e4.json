{"sha": "65180edc5661b1324a53ac9ebbe03f44cda524e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUxODBlZGM1NjYxYjEzMjRhNTNhYzllYmJlMDNmNDRjZGE1MjRlNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-10-10T23:13:39Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-10-10T23:13:39Z"}, "message": "runtime: copy print/println support from Go 1.7\n    \n    Update the compiler to use the new names.  Add calls to printlock and\n    printunlock around print statements.  Move expression evaluation before\n    the call to printlock.  Update g's writebuf field to a slice, and adjust\n    C code accordingly.\n    \n    Reviewed-on: https://go-review.googlesource.com/30717\n\nFrom-SVN: r240956", "tree": {"sha": "661f2ef36aee0c3ee5866edd2bcf540260a98506", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/661f2ef36aee0c3ee5866edd2bcf540260a98506"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65180edc5661b1324a53ac9ebbe03f44cda524e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65180edc5661b1324a53ac9ebbe03f44cda524e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65180edc5661b1324a53ac9ebbe03f44cda524e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65180edc5661b1324a53ac9ebbe03f44cda524e4/comments", "author": null, "committer": null, "parents": [{"sha": "73f01cca846d729848e793689389bcaa0dec3045", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f01cca846d729848e793689389bcaa0dec3045", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73f01cca846d729848e793689389bcaa0dec3045"}], "stats": {"total": 525, "additions": 174, "deletions": 351}, "files": [{"sha": "c987dc90eb720bd5dfd9fd1041c27a01b2a6df2a", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65180edc5661b1324a53ac9ebbe03f44cda524e4/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65180edc5661b1324a53ac9ebbe03f44cda524e4/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=65180edc5661b1324a53ac9ebbe03f44cda524e4", "patch": "@@ -1,4 +1,4 @@\n-f3658aea2493c7f1c4a72502f9e7da562c7764c4\n+ecf9b645cefc5c3b4e6339adeb452b2d8642cf3e\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "4f8a519f4fdacc2ebd1fcfeecbe8f039f442f90e", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 42, "deletions": 29, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65180edc5661b1324a53ac9ebbe03f44cda524e4/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65180edc5661b1324a53ac9ebbe03f44cda524e4/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=65180edc5661b1324a53ac9ebbe03f44cda524e4", "patch": "@@ -7018,6 +7018,26 @@ Builtin_call_expression::do_lower(Gogo* gogo, Named_object* function,\n \t  }\n       }\n       break;\n+\n+    case BUILTIN_PRINT:\n+    case BUILTIN_PRINTLN:\n+      // Force all the arguments into temporary variables, so that we\n+      // don't try to evaluate something while holding the print lock.\n+      if (this->args() == NULL)\n+\tbreak;\n+      for (Expression_list::iterator pa = this->args()->begin();\n+\t   pa != this->args()->end();\n+\t   ++pa)\n+\t{\n+\t  if (!(*pa)->is_variable())\n+\t    {\n+\t      Temporary_statement* temp =\n+\t\tStatement::make_temporary(NULL, *pa, loc);\n+\t      inserter->insert(temp);\n+\t      *pa = Expression::make_temporary_reference(temp, loc);\n+\t    }\n+\t}\n+      break;\n     }\n \n   return this;\n@@ -8336,7 +8356,9 @@ Builtin_call_expression::do_get_backend(Translate_context* context)\n     case BUILTIN_PRINTLN:\n       {\n \tconst bool is_ln = this->code_ == BUILTIN_PRINTLN;\n-        Expression* print_stmts = NULL;\n+\n+\tExpression* print_stmts = Runtime::make_call(Runtime::PRINTLOCK,\n+\t\t\t\t\t\t     location, 0);\n \n \tconst Expression_list* call_args = this->args();\n \tif (call_args != NULL)\n@@ -8348,8 +8370,7 @@ Builtin_call_expression::do_get_backend(Translate_context* context)\n \t\tif (is_ln && p != call_args->begin())\n \t\t  {\n                     Expression* print_space =\n-                        Runtime::make_call(Runtime::PRINT_SPACE,\n-                                           this->location(), 0);\n+\t\t      Runtime::make_call(Runtime::PRINTSP, location, 0);\n \n                     print_stmts =\n                         Expression::make_compound(print_stmts, print_space,\n@@ -8360,82 +8381,74 @@ Builtin_call_expression::do_get_backend(Translate_context* context)\n \t\tType* type = arg->type();\n                 Runtime::Function code;\n \t\tif (type->is_string_type())\n-                  code = Runtime::PRINT_STRING;\n+                  code = Runtime::PRINTSTRING;\n \t\telse if (type->integer_type() != NULL\n \t\t\t && type->integer_type()->is_unsigned())\n \t\t  {\n \t\t    Type* itype = Type::lookup_integer_type(\"uint64\");\n \t\t    arg = Expression::make_cast(itype, arg, location);\n-                    code = Runtime::PRINT_UINT64;\n+                    code = Runtime::PRINTUINT;\n \t\t  }\n \t\telse if (type->integer_type() != NULL)\n \t\t  {\n \t\t    Type* itype = Type::lookup_integer_type(\"int64\");\n \t\t    arg = Expression::make_cast(itype, arg, location);\n-                    code = Runtime::PRINT_INT64;\n+                    code = Runtime::PRINTINT;\n \t\t  }\n \t\telse if (type->float_type() != NULL)\n \t\t  {\n                     Type* dtype = Type::lookup_float_type(\"float64\");\n                     arg = Expression::make_cast(dtype, arg, location);\n-                    code = Runtime::PRINT_DOUBLE;\n+                    code = Runtime::PRINTFLOAT;\n \t\t  }\n \t\telse if (type->complex_type() != NULL)\n \t\t  {\n                     Type* ctype = Type::lookup_complex_type(\"complex128\");\n                     arg = Expression::make_cast(ctype, arg, location);\n-                    code = Runtime::PRINT_COMPLEX;\n+                    code = Runtime::PRINTCOMPLEX;\n \t\t  }\n \t\telse if (type->is_boolean_type())\n-                  code = Runtime::PRINT_BOOL;\n+                  code = Runtime::PRINTBOOL;\n \t\telse if (type->points_to() != NULL\n \t\t\t || type->channel_type() != NULL\n \t\t\t || type->map_type() != NULL\n \t\t\t || type->function_type() != NULL)\n \t\t  {\n                     arg = Expression::make_cast(type, arg, location);\n-                    code = Runtime::PRINT_POINTER;\n+                    code = Runtime::PRINTPOINTER;\n \t\t  }\n \t\telse if (type->interface_type() != NULL)\n \t\t  {\n \t\t    if (type->interface_type()->is_empty())\n-                      code = Runtime::PRINT_EMPTY_INTERFACE;\n+                      code = Runtime::PRINTEFACE;\n \t\t    else\n-                      code = Runtime::PRINT_INTERFACE;\n+                      code = Runtime::PRINTIFACE;\n \t\t  }\n \t\telse if (type->is_slice_type())\n-                  code = Runtime::PRINT_SLICE;\n+                  code = Runtime::PRINTSLICE;\n \t\telse\n \t\t  {\n \t\t    go_assert(saw_errors());\n \t\t    return context->backend()->error_expression();\n \t\t  }\n \n                 Expression* call = Runtime::make_call(code, location, 1, arg);\n-                if (print_stmts == NULL)\n-                  print_stmts = call;\n-                else\n-                  print_stmts = Expression::make_compound(print_stmts, call,\n-                                                          location);\n+\t\tprint_stmts = Expression::make_compound(print_stmts, call,\n+\t\t\t\t\t\t\tlocation);\n \t      }\n \t  }\n \n \tif (is_ln)\n \t  {\n             Expression* print_nl =\n-                Runtime::make_call(Runtime::PRINT_NL, location, 0);\n-            if (print_stmts == NULL)\n-              print_stmts = print_nl;\n-            else\n-              print_stmts = Expression::make_compound(print_stmts, print_nl,\n-                                                      location);\n+                Runtime::make_call(Runtime::PRINTNL, location, 0);\n+\t    print_stmts = Expression::make_compound(print_stmts, print_nl,\n+\t\t\t\t\t\t    location);\n \t  }\n \n-        // There aren't any arguments to the print builtin.  The compiler\n-        // issues a warning for this so we should avoid getting the backend\n-        // representation for this call.  Instead, perform a no-op.\n-        if (print_stmts == NULL)\n-          return context->backend()->boolean_constant_expression(false);\n+\tExpression* unlock = Runtime::make_call(Runtime::PRINTUNLOCK,\n+\t\t\t\t\t\tlocation, 0);\n+\tprint_stmts = Expression::make_compound(print_stmts, unlock, location);\n \n         return print_stmts->get_backend(context);\n       }"}, {"sha": "e7edfa652f36fbb20653ebbeed1b153820c22b04", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65180edc5661b1324a53ac9ebbe03f44cda524e4/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65180edc5661b1324a53ac9ebbe03f44cda524e4/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=65180edc5661b1324a53ac9ebbe03f44cda524e4", "patch": "@@ -299,42 +299,47 @@ DEF_GO_RUNTIME(INTERFACE_EMPTY_COMPARE, \"__go_interface_empty_compare\",\n \t       P2(IFACE, EFACE), R1(INT))\n \n \n+// Lock the printer (for print/println).\n+DEF_GO_RUNTIME(PRINTLOCK, \"runtime.printlock\", P0(), R0())\n+\n+// Unlock the printer (for print/println).\n+DEF_GO_RUNTIME(PRINTUNLOCK, \"runtime.printunlock\", P0(), R0())\n+\n // Print a string (for print/println).\n-DEF_GO_RUNTIME(PRINT_STRING, \"__go_print_string\", P1(STRING), R0())\n+DEF_GO_RUNTIME(PRINTSTRING, \"runtime.printstring\", P1(STRING), R0())\n \n // Print a uint64 (for print/println).\n-DEF_GO_RUNTIME(PRINT_UINT64, \"__go_print_uint64\", P1(UINT64), R0())\n+DEF_GO_RUNTIME(PRINTUINT, \"runtime.printuint\", P1(UINT64), R0())\n \n // Print a int64 (for print/println).\n-DEF_GO_RUNTIME(PRINT_INT64, \"__go_print_int64\", P1(INT64), R0())\n+DEF_GO_RUNTIME(PRINTINT, \"runtime.printint\", P1(INT64), R0())\n \n // Print a float64 (for print/println).\n-DEF_GO_RUNTIME(PRINT_DOUBLE, \"__go_print_double\", P1(FLOAT64), R0())\n+DEF_GO_RUNTIME(PRINTFLOAT, \"runtime.printfloat\", P1(FLOAT64), R0())\n \n // Print a complex128 (for print/println).\n-DEF_GO_RUNTIME(PRINT_COMPLEX, \"__go_print_complex\", P1(COMPLEX128), R0())\n+DEF_GO_RUNTIME(PRINTCOMPLEX, \"runtime.printcomplex\", P1(COMPLEX128), R0())\n \n // Print a bool (for print/println).\n-DEF_GO_RUNTIME(PRINT_BOOL, \"__go_print_bool\", P1(BOOL), R0())\n+DEF_GO_RUNTIME(PRINTBOOL, \"runtime.printbool\", P1(BOOL), R0())\n \n // Print a pointer/map/channel/function (for print/println).\n-DEF_GO_RUNTIME(PRINT_POINTER, \"__go_print_pointer\", P1(POINTER), R0())\n+DEF_GO_RUNTIME(PRINTPOINTER, \"runtime.printpointer\", P1(POINTER), R0())\n \n // Print an empty interface (for print/println).\n-DEF_GO_RUNTIME(PRINT_EMPTY_INTERFACE, \"__go_print_empty_interface\",\n-\t       P1(EFACE), R0())\n+DEF_GO_RUNTIME(PRINTEFACE, \"runtime.printeface\", P1(EFACE), R0())\n \n // Print a non-empty interface (for print/println).\n-DEF_GO_RUNTIME(PRINT_INTERFACE, \"__go_print_interface\", P1(IFACE), R0())\n+DEF_GO_RUNTIME(PRINTIFACE, \"runtime.printiface\", P1(IFACE), R0())\n \n // Print a slice (for print/println).\n-DEF_GO_RUNTIME(PRINT_SLICE, \"__go_print_slice\", P1(SLICE), R0())\n+DEF_GO_RUNTIME(PRINTSLICE, \"runtime.printslice\", P1(SLICE), R0())\n \n // Print a space (for println).\n-DEF_GO_RUNTIME(PRINT_SPACE, \"__go_print_space\", P0(), R0())\n+DEF_GO_RUNTIME(PRINTSP, \"runtime.printsp\", P0(), R0())\n \n // Print a newline (for println).\n-DEF_GO_RUNTIME(PRINT_NL, \"__go_print_nl\", P0(), R0())\n+DEF_GO_RUNTIME(PRINTNL, \"runtime.printnl\", P0(), R0())\n \n \n // Used for field tracking for data analysis."}, {"sha": "b7c3e1810dc1cc91b22af4cc0d78b5e8d2db698e", "filename": "libgo/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=65180edc5661b1324a53ac9ebbe03f44cda524e4", "patch": "@@ -474,7 +474,6 @@ runtime_files = \\\n \truntime/go-new.c \\\n \truntime/go-nosys.c \\\n \truntime/go-panic.c \\\n-\truntime/go-print.c \\\n \truntime/go-recover.c \\\n \truntime/go-reflect-call.c \\\n \truntime/go-rune.c \\"}, {"sha": "e6571cd6d0cb47e5f63484b4df8352071b36ebca", "filename": "libgo/Makefile.in", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=65180edc5661b1324a53ac9ebbe03f44cda524e4", "patch": "@@ -251,7 +251,7 @@ am__objects_6 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tgo-interface-val-compare.lo go-make-slice.lo go-matherr.lo \\\n \tgo-memclr.lo go-memcmp.lo go-memequal.lo go-memmove.lo \\\n \tgo-nanotime.lo go-now.lo go-new.lo go-nosys.lo go-panic.lo \\\n-\tgo-print.lo go-recover.lo go-reflect-call.lo go-rune.lo \\\n+\tgo-recover.lo go-reflect-call.lo go-rune.lo \\\n \tgo-runtime-error.lo go-setenv.lo go-signal.lo go-strcmp.lo \\\n \tgo-string-to-byte-array.lo go-string-to-int-array.lo \\\n \tgo-strplus.lo go-strslice.lo go-traceback.lo \\\n@@ -875,7 +875,6 @@ runtime_files = \\\n \truntime/go-new.c \\\n \truntime/go-nosys.c \\\n \truntime/go-panic.c \\\n-\truntime/go-print.c \\\n \truntime/go-recover.c \\\n \truntime/go-reflect-call.c \\\n \truntime/go-rune.c \\\n@@ -1600,7 +1599,6 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-nosys.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-now.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-panic.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-print.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-recover.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-reflect-call.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-rune.Plo@am__quote@\n@@ -1979,13 +1977,6 @@ go-panic.lo: runtime/go-panic.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-panic.lo `test -f 'runtime/go-panic.c' || echo '$(srcdir)/'`runtime/go-panic.c\n \n-go-print.lo: runtime/go-print.c\n-@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-print.lo -MD -MP -MF $(DEPDIR)/go-print.Tpo -c -o go-print.lo `test -f 'runtime/go-print.c' || echo '$(srcdir)/'`runtime/go-print.c\n-@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-print.Tpo $(DEPDIR)/go-print.Plo\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/go-print.c' object='go-print.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-print.lo `test -f 'runtime/go-print.c' || echo '$(srcdir)/'`runtime/go-print.c\n-\n go-recover.lo: runtime/go-recover.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-recover.lo -MD -MP -MF $(DEPDIR)/go-recover.Tpo -c -o go-recover.lo `test -f 'runtime/go-recover.c' || echo '$(srcdir)/'`runtime/go-recover.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-recover.Tpo $(DEPDIR)/go-recover.Plo"}, {"sha": "371cec505870987f378991b8596c290007ee0886", "filename": "libgo/go/runtime/print.go", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2Fgo%2Fruntime%2Fprint.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2Fgo%2Fruntime%2Fprint.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fprint.go?ref=65180edc5661b1324a53ac9ebbe03f44cda524e4", "patch": "@@ -2,12 +2,32 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build ignore\n-\n package runtime\n \n import \"unsafe\"\n \n+// For gccgo, use go:linkname to rename compiler-called functions to\n+// themselves, so that the compiler will export them.\n+//\n+//go:linkname printbool runtime.printbool\n+//go:linkname printfloat runtime.printfloat\n+//go:linkname printint runtime.printint\n+//go:linkname printhex runtime.printhex\n+//go:linkname printuint runtime.printuint\n+//go:linkname printcomplex runtime.printcomplex\n+//go:linkname printstring runtime.printstring\n+//go:linkname printpointer runtime.printpointer\n+//go:linkname printiface runtime.printiface\n+//go:linkname printeface runtime.printeface\n+//go:linkname printslice runtime.printslice\n+//go:linkname printnl runtime.printnl\n+//go:linkname printsp runtime.printsp\n+//go:linkname printlock runtime.printlock\n+//go:linkname printunlock runtime.printunlock\n+// Temporary for C code to call:\n+//go:linkname gwrite runtime.gwrite\n+//go:linkname printhex runtime.printhex\n+\n // The compiler knows that a print of a value of this type\n // should use printhex instead of printuint (decimal).\n type hex uint64\n@@ -201,10 +221,6 @@ func printpointer(p unsafe.Pointer) {\n }\n \n func printstring(s string) {\n-\tif uintptr(len(s)) > maxstring {\n-\t\tgwrite(bytes(\"[string too long]\"))\n-\t\treturn\n-\t}\n \tgwrite(bytes(s))\n }\n "}, {"sha": "25b5b79de20a650ae59dd90870b0b7ae45c785d8", "filename": "libgo/go/runtime/runtime2.go", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2Fgo%2Fruntime%2Fruntime2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2Fgo%2Fruntime%2Fruntime2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fruntime2.go?ref=65180edc5661b1324a53ac9ebbe03f44cda524e4", "patch": "@@ -347,20 +347,14 @@ type g struct {\n \ttracelastp     puintptr // last P emitted an event for this goroutine\n \tlockedm        *m\n \tsig            uint32\n-\n-\t// Temporary gccgo field.\n-\twritenbuf int32\n-\t// Not for gccgo yet: writebuf       []byte\n-\t// Temporary different type for gccgo.\n-\twritebuf *byte\n-\n-\tsigcode0 uintptr\n-\tsigcode1 uintptr\n-\tsigpc    uintptr\n-\tgopc     uintptr // pc of go statement that created this goroutine\n-\tstartpc  uintptr // pc of goroutine function\n-\tracectx  uintptr\n-\twaiting  *sudog // sudog structures this g is waiting on (that have a valid elem ptr); in lock order\n+\twritebuf       []byte\n+\tsigcode0       uintptr\n+\tsigcode1       uintptr\n+\tsigpc          uintptr\n+\tgopc           uintptr // pc of go statement that created this goroutine\n+\tstartpc        uintptr // pc of goroutine function\n+\tracectx        uintptr\n+\twaiting        *sudog // sudog structures this g is waiting on (that have a valid elem ptr); in lock order\n \t// Not for gccgo: cgoCtxt        []uintptr // cgo traceback context\n \n \t// Per-G GC state"}, {"sha": "f014610841f38de86706918c59a4b5d46718c258", "filename": "libgo/go/runtime/stubs.go", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2Fgo%2Fruntime%2Fstubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2Fgo%2Fruntime%2Fstubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fstubs.go?ref=65180edc5661b1324a53ac9ebbe03f44cda524e4", "patch": "@@ -445,6 +445,3 @@ func releaseSudog(s *sudog) {\n \n // Temporary hack for gccgo until we port the garbage collector.\n func typeBitsBulkBarrier(typ *_type, p, size uintptr) {}\n-\n-// Temporary for gccgo until we port print.go.\n-type hex uint64"}, {"sha": "be2c17eb22deb1fe14f452aba8fed700b1b56c6e", "filename": "libgo/runtime/mprof.goc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2Fruntime%2Fmprof.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2Fruntime%2Fmprof.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmprof.goc?ref=65180edc5661b1324a53ac9ebbe03f44cda524e4", "patch": "@@ -419,17 +419,19 @@ func Stack(b Slice, all bool) (n int) {\n \t\tn = 0;\n \telse{\n \t\tG* g = runtime_g();\n-\t\tg->writebuf = (byte*)b.__values;\n-\t\tg->writenbuf = b.__count;\n+\t\tg->writebuf.__values = b.__values;\n+\t\tg->writebuf.__count = 0;\n+\t\tg->writebuf.__capacity = b.__count;\n \t\tUSED(pc);\n \t\truntime_goroutineheader(g);\n \t\truntime_traceback();\n \t\truntime_printcreatedby(g);\n \t\tif(all)\n \t\t\truntime_tracebackothers(g);\n-\t\tn = b.__count - g->writenbuf;\n-\t\tg->writebuf = nil;\n-\t\tg->writenbuf = 0;\n+\t\tn = g->writebuf.__count;\n+\t\tg->writebuf.__values = nil;\n+\t\tg->writebuf.__count = 0;\n+\t\tg->writebuf.__capacity = 0;\n \t}\n \t\n \tif(all) {"}, {"sha": "cd1ae9673c61cef4eb04e9f2031541e844557362", "filename": "libgo/runtime/panic.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2Fruntime%2Fpanic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2Fruntime%2Fpanic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fpanic.c?ref=65180edc5661b1324a53ac9ebbe03f44cda524e4", "patch": "@@ -72,9 +72,11 @@ __go_rundefer(void)\n void\n runtime_startpanic(void)\n {\n+\tG *g;\n \tM *m;\n \n-\tm = runtime_m();\n+\tg = runtime_g();\n+\tm = g->m;\n \tif(runtime_mheap.cachealloc.size == 0) { // very early\n \t\truntime_printf(\"runtime: panic before malloc heap initialized\\n\");\n \t\tm->mallocing = 1; // tell rest of panic not to try to malloc\n@@ -83,8 +85,9 @@ runtime_startpanic(void)\n \tswitch(m->dying) {\n \tcase 0:\n \t\tm->dying = 1;\n-\t\tif(runtime_g() != nil)\n-\t\t\truntime_g()->writebuf = nil;\n+\t\tg->writebuf.__values = nil;\n+\t\tg->writebuf.__count = 0;\n+\t\tg->writebuf.__capacity = 0;\n \t\truntime_xadd(&runtime_panicking, 1);\n \t\truntime_lock(&paniclk);\n \t\tif(runtime_debug.schedtrace > 0 || runtime_debug.scheddetail > 0)"}, {"sha": "4da879620c7ba4bb277d7757201bac57422f1d4c", "filename": "libgo/runtime/print.c", "status": "modified", "additions": 66, "deletions": 235, "changes": 301, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2Fruntime%2Fprint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2Fruntime%2Fprint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fprint.c?ref=65180edc5661b1324a53ac9ebbe03f44cda524e4", "patch": "@@ -9,58 +9,60 @@\n #include \"array.h\"\n #include \"go-type.h\"\n \n-//static Lock debuglock;\n+extern void runtime_printlock(void)\n+  __asm__(GOSYM_PREFIX \"runtime.printlock\");\n+extern void runtime_printunlock(void)\n+  __asm__(GOSYM_PREFIX \"runtime.printunlock\");\n+extern void gwrite(Slice)\n+  __asm__(GOSYM_PREFIX \"runtime.gwrite\");\n+extern void runtime_printint(int64)\n+  __asm__(GOSYM_PREFIX \"runtime.printint\");\n+extern void runtime_printuint(uint64)\n+  __asm__(GOSYM_PREFIX \"runtime.printuint\");\n+extern void runtime_printhex(uint64)\n+  __asm__(GOSYM_PREFIX \"runtime.printhex\");\n+extern void runtime_printfloat(float64)\n+  __asm__(GOSYM_PREFIX \"runtime.printfloat\");\n+extern void runtime_printcomplex(complex double)\n+  __asm__(GOSYM_PREFIX \"runtime.printcomplex\");\n+extern void runtime_printbool(_Bool)\n+  __asm__(GOSYM_PREFIX \"runtime.printbool\");\n+extern void runtime_printstring(String)\n+  __asm__(GOSYM_PREFIX \"runtime.printstring\");\n+extern void runtime_printpointer(void *)\n+  __asm__(GOSYM_PREFIX \"runtime.printpointer\");\n+extern void runtime_printslice(Slice)\n+  __asm__(GOSYM_PREFIX \"runtime.printslice\");\n+extern void runtime_printeface(Eface)\n+  __asm__(GOSYM_PREFIX \"runtime.printeface\");\n+extern void runtime_printiface(Iface)\n+  __asm__(GOSYM_PREFIX \"runtime.printiface\");\n \n // Clang requires this function to not be inlined (see below).\n static void go_vprintf(const char*, va_list)\n __attribute__((noinline));\n \n-// write to goroutine-local buffer if diverting output,\n-// or else standard error.\n static void\n-gwrite(const void *v, intgo n)\n+runtime_prints(const char *s)\n {\n-\tG* g = runtime_g();\n-\n-\tif(g == nil || g->writebuf == nil) {\n-\t\t// Avoid -D_FORTIFY_SOURCE problems.\n-\t\tint rv __attribute__((unused));\n-\n-\t\trv = runtime_write(2, v, n);\n-\t\treturn;\n-\t}\n-\n-\tif(g->writenbuf == 0)\n-\t\treturn;\n+\tSlice sl;\n \n-\tif(n > g->writenbuf)\n-\t\tn = g->writenbuf;\n-\truntime_memmove(g->writebuf, v, n);\n-\tg->writebuf += n;\n-\tg->writenbuf -= n;\n+\t// Use memcpy to avoid const-cast warning.\n+\tmemcpy(&sl.__values, &s, sizeof(char*));\n+\tsl.__count = runtime_findnull((const byte*)s);\n+\tsl.__capacity = sl.__count;\n+\tgwrite(sl);\n }\n \n-void\n-runtime_dump(byte *p, int32 n)\n+static void\n+runtime_printbyte(int8 c)\n {\n-\tint32 i;\n-\n-\tfor(i=0; i<n; i++) {\n-\t\truntime_printpointer((byte*)(uintptr)(p[i]>>4));\n-\t\truntime_printpointer((byte*)(uintptr)(p[i]&0xf));\n-\t\tif((i&15) == 15)\n-\t\t\truntime_prints(\"\\n\");\n-\t\telse\n-\t\t\truntime_prints(\" \");\n-\t}\n-\tif(n & 15)\n-\t\truntime_prints(\"\\n\");\n-}\n+\tSlice sl;\n \n-void\n-runtime_prints(const char *s)\n-{\n-\tgwrite(s, runtime_findnull((const byte*)s));\n+\tsl.__values = &c;\n+\tsl.__count = 1;\n+\tsl.__capacity = 1;\n+\tgwrite(sl);\n }\n \n #if defined (__clang__) && (defined (__i386__) || defined (__x86_64__))\n@@ -104,15 +106,17 @@ runtime_snprintf(byte *buf, int32 n, const char *s, ...)\n \tva_list va;\n \tint32 m;\n \n-\tg->writebuf = buf;\n-\tg->writenbuf = n-1;\n+\tg->writebuf.__values = buf;\n+\tg->writebuf.__count = 0;\n+\tg->writebuf.__capacity = n-1;\n \tva_start(va, s);\n \tgo_vprintf(s, va);\n \tva_end(va);\n-\t*g->writebuf = '\\0';\n-\tm = g->writebuf - buf;\n-\tg->writenbuf = 0;\n-\tg->writebuf = nil;\n+\tm = g->writebuf.__count;\n+\t((byte*)g->writebuf.__values)[m] = '\\0';\n+\tg->writebuf.__values = nil;\n+\tg->writebuf.__count = 0;\n+\tg->writebuf.__capacity = 0;\n \treturn m;\n }\n \n@@ -122,15 +126,21 @@ static void\n go_vprintf(const char *s, va_list va)\n {\n \tconst char *p, *lp;\n+\tSlice sl;\n \n-\t//runtime_lock(&debuglock);\n+\truntime_printlock();\n \n \tlp = p = s;\n \tfor(; *p; p++) {\n \t\tif(*p != '%')\n \t\t\tcontinue;\n-\t\tif(p > lp)\n-\t\t\tgwrite(lp, p-lp);\n+\t\tif(p > lp) {\n+\t\t\t// Use memcpy to avoid const-cast warning.\n+\t\t\tmemcpy(&sl.__values, &lp, sizeof(char*));\n+\t\t\tsl.__count = p - lp;\n+\t\t\tsl.__capacity = p - lp;\n+\t\t\tgwrite(sl);\n+\t\t}\n \t\tp++;\n \t\tswitch(*p) {\n \t\tcase 'a':\n@@ -181,192 +191,13 @@ go_vprintf(const char *s, va_list va)\n \t\t}\n \t\tlp = p+1;\n \t}\n-\tif(p > lp)\n-\t\tgwrite(lp, p-lp);\n-\n-\t//runtime_unlock(&debuglock);\n-}\n-\n-void\n-runtime_printpc(void *p __attribute__ ((unused)))\n-{\n-\truntime_prints(\"PC=\");\n-\truntime_printhex((uint64)(uintptr)runtime_getcallerpc(p));\n-}\n-\n-void\n-runtime_printbool(_Bool v)\n-{\n-\tif(v) {\n-\t\tgwrite(\"true\", 4);\n-\t\treturn;\n-\t}\n-\tgwrite(\"false\", 5);\n-}\n-\n-void\n-runtime_printbyte(int8 c)\n-{\n-\tgwrite(&c, 1);\n-}\n-\n-void\n-runtime_printfloat(double v)\n-{\n-\tbyte buf[20];\n-\tint32 e, s, i, n;\n-\tfloat64 h;\n-\n-\tif(ISNAN(v)) {\n-\t\tgwrite(\"NaN\", 3);\n-\t\treturn;\n-\t}\n-\tif(isinf(v)) {\n-\t\tif(signbit(v)) {\n-\t\t\tgwrite(\"-Inf\", 4);\n-\t\t} else {\n-\t\t\tgwrite(\"+Inf\", 4);\n-\t\t}\n-\t\treturn;\n+\tif(p > lp) {\n+\t\t// Use memcpy to avoid const-cast warning.\n+\t\tmemcpy(&sl.__values, &lp, sizeof(char*));\n+\t\tsl.__count = p - lp;\n+\t\tsl.__capacity = p - lp;\n+\t\tgwrite(sl);\n \t}\n \n-\tn = 7;\t// digits printed\n-\te = 0;\t// exp\n-\ts = 0;\t// sign\n-\tif(v == 0) {\n-\t\tif(isinf(1/v) && 1/v < 0)\n-\t\t\ts = 1;\n-\t} else {\n-\t\t// sign\n-\t\tif(v < 0) {\n-\t\t\tv = -v;\n-\t\t\ts = 1;\n-\t\t}\n-\n-\t\t// normalize\n-\t\twhile(v >= 10) {\n-\t\t\te++;\n-\t\t\tv /= 10;\n-\t\t}\n-\t\twhile(v < 1) {\n-\t\t\te--;\n-\t\t\tv *= 10;\n-\t\t}\n-\n-\t\t// round\n-\t\th = 5;\n-\t\tfor(i=0; i<n; i++)\n-\t\t\th /= 10;\n-\n-\t\tv += h;\n-\t\tif(v >= 10) {\n-\t\t\te++;\n-\t\t\tv /= 10;\n-\t\t}\n-\t}\n-\n-\t// format +d.dddd+edd\n-\tbuf[0] = '+';\n-\tif(s)\n-\t\tbuf[0] = '-';\n-\tfor(i=0; i<n; i++) {\n-\t\ts = v;\n-\t\tbuf[i+2] = s+'0';\n-\t\tv -= s;\n-\t\tv *= 10.;\n-\t}\n-\tbuf[1] = buf[2];\n-\tbuf[2] = '.';\n-\n-\tbuf[n+2] = 'e';\n-\tbuf[n+3] = '+';\n-\tif(e < 0) {\n-\t\te = -e;\n-\t\tbuf[n+3] = '-';\n-\t}\n-\n-\tbuf[n+4] = (e/100) + '0';\n-\tbuf[n+5] = (e/10)%10 + '0';\n-\tbuf[n+6] = (e%10) + '0';\n-\tgwrite(buf, n+7);\n-}\n-\n-void\n-runtime_printcomplex(complex double v)\n-{\n-\tgwrite(\"(\", 1);\n-\truntime_printfloat(creal(v));\n-\truntime_printfloat(cimag(v));\n-\tgwrite(\"i)\", 2);\n-}\n-\n-void\n-runtime_printuint(uint64 v)\n-{\n-\tbyte buf[100];\n-\tint32 i;\n-\n-\tfor(i=nelem(buf)-1; i>0; i--) {\n-\t\tbuf[i] = v%10 + '0';\n-\t\tif(v < 10)\n-\t\t\tbreak;\n-\t\tv = v/10;\n-\t}\n-\tgwrite(buf+i, nelem(buf)-i);\n-}\n-\n-void\n-runtime_printint(int64 v)\n-{\n-\tif(v < 0) {\n-\t\tgwrite(\"-\", 1);\n-\t\tv = -v;\n-\t}\n-\truntime_printuint(v);\n-}\n-\n-void\n-runtime_printhex(uint64 v)\n-{\n-\tstatic const char *dig = \"0123456789abcdef\";\n-\tbyte buf[100];\n-\tint32 i;\n-\n-\ti=nelem(buf);\n-\tfor(; v>0; v/=16)\n-\t\tbuf[--i] = dig[v%16];\n-\tif(i == nelem(buf))\n-\t\tbuf[--i] = '0';\n-\tbuf[--i] = 'x';\n-\tbuf[--i] = '0';\n-\tgwrite(buf+i, nelem(buf)-i);\n-}\n-\n-void\n-runtime_printpointer(void *p)\n-{\n-\truntime_printhex((uintptr)p);\n-}\n-\n-void\n-runtime_printstring(String v)\n-{\n-\t// if(v.len > runtime_maxstring) {\n-\t//\tgwrite(\"[string too long]\", 17);\n-\t//\treturn;\n-\t// }\n-\tif(v.len > 0)\n-\t\tgwrite(v.str, v.len);\n-}\n-\n-void\n-__go_print_space(void)\n-{\n-\tgwrite(\" \", 1);\n-}\n-\n-void\n-__go_print_nl(void)\n-{\n-\tgwrite(\"\\n\", 1);\n+\truntime_printunlock();\n }"}, {"sha": "98c18a726af481d82eca5e6e0d0ae2331c7862b8", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=65180edc5661b1324a53ac9ebbe03f44cda524e4", "patch": "@@ -2037,8 +2037,9 @@ goexit0(G *gp)\n \tgp->paniconfault = 0;\n \tgp->_defer = nil; // should be true already but just in case.\n \tgp->_panic = nil; // non-nil for Goexit during panic. points at stack-allocated data.\n-\tgp->writenbuf = 0;\n-\tgp->writebuf = nil;\n+\tgp->writebuf.__values = nil;\n+\tgp->writebuf.__count = 0;\n+\tgp->writebuf.__capacity = 0;\n \tgp->waitreason = runtime_gostringnocopy(nil);\n \tgp->param = nil;\n \tm->curg = nil;"}, {"sha": "3304215e9ed70132ba8608315d4237879674d02a", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65180edc5661b1324a53ac9ebbe03f44cda524e4/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=65180edc5661b1324a53ac9ebbe03f44cda524e4", "patch": "@@ -309,7 +309,6 @@ extern\tbool\truntime_isarchive;\n #define runtime_strstr(s1, s2) __builtin_strstr((s1), (s2))\n intgo\truntime_findnull(const byte*);\n intgo\truntime_findnullw(const uint16*);\n-void\truntime_dump(byte*, int32);\n \n void\truntime_gogo(G*);\n struct __go_func_type;\n@@ -324,7 +323,6 @@ void\truntime_goenvs_unix(void)\n void\truntime_throw(const char*) __attribute__ ((noreturn));\n void\truntime_panicstring(const char*) __attribute__ ((noreturn));\n bool\truntime_canpanic(G*);\n-void\truntime_prints(const char*);\n void\truntime_printf(const char*, ...);\n int32\truntime_snprintf(byte*, int32, const char*, ...);\n #define runtime_mcmp(a, b, s) __builtin_memcmp((a), (b), (s))\n@@ -533,36 +531,9 @@ void\truntime_parforiters(ParFor*, uintptr, uintptr*, uintptr*);\n void __wrap_rtems_task_variable_add(void **);\n #endif\n \n-/*\n- * Names generated by gccgo.\n- */\n-#define runtime_printbool\t__go_print_bool\n-#define runtime_printfloat\t__go_print_double\n-#define runtime_printint\t__go_print_int64\n-#define runtime_printiface\t__go_print_interface\n-#define runtime_printeface\t__go_print_empty_interface\n-#define runtime_printstring\t__go_print_string\n-#define runtime_printpointer\t__go_print_pointer\n-#define runtime_printuint\t__go_print_uint64\n-#define runtime_printslice\t__go_print_slice\n-#define runtime_printcomplex\t__go_print_complex\n-\n /*\n  * runtime go-called\n  */\n-void\truntime_printbool(_Bool);\n-void\truntime_printbyte(int8);\n-void\truntime_printfloat(double);\n-void\truntime_printint(int64);\n-void\truntime_printiface(Iface);\n-void\truntime_printeface(Eface);\n-void\truntime_printstring(String);\n-void\truntime_printpc(void*);\n-void\truntime_printpointer(void*);\n-void\truntime_printuint(uint64);\n-void\truntime_printhex(uint64);\n-void\truntime_printslice(Slice);\n-void\truntime_printcomplex(complex double);\n void reflect_call(const struct __go_func_type *, FuncVal *, _Bool, _Bool,\n \t\t  void **, void **)\n   __asm__ (GOSYM_PREFIX \"reflect.call\");"}]}