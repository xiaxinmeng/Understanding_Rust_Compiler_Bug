{"sha": "85203d52bfa4a84da5f50e0a242891308ffa8d83", "node_id": "C_kwDOANBUbNoAKDg1MjAzZDUyYmZhNGE4NGRhNWY1MGUwYTI0Mjg5MTMwOGZmYThkODM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-01T08:10:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-01T09:09:45Z"}, "message": "tree-optimization/108970 - ICE with vectorizer peeling\n\nThe function slpeel_can_duplicate_loop_p fails to verify we can\ncopy blocks, instead slpeel_tree_duplicate_loop_to_edge_cfg does\nbut that's too late.  The following fixes this, also simplifying\nerror reporting which is somewhat pointless if we ICE immediately.\n\n\tPR tree-optimization/108970\n\t* tree-vect-loop-manip.cc (slpeel_can_duplicate_loop_p):\n\tCheck we can copy the BBs.\n\t(slpeel_tree_duplicate_loop_to_edge_cfg): Avoid redundant\n\tcheck.\n\t(vect_do_peeling): Streamline error handling.\n\n\t* gcc.dg/pr108970.c: New testcase.", "tree": {"sha": "6fb3095b02d869e025af99322173f3b06d7d9ac8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fb3095b02d869e025af99322173f3b06d7d9ac8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85203d52bfa4a84da5f50e0a242891308ffa8d83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85203d52bfa4a84da5f50e0a242891308ffa8d83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85203d52bfa4a84da5f50e0a242891308ffa8d83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85203d52bfa4a84da5f50e0a242891308ffa8d83/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b4f7004a77b10bc403875f56c94f73ef86562d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4f7004a77b10bc403875f56c94f73ef86562d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b4f7004a77b10bc403875f56c94f73ef86562d8"}], "stats": {"total": 63, "additions": 31, "deletions": 32}, "files": [{"sha": "7def8afd5e36480bc42508035639072e31fbb277", "filename": "gcc/testsuite/gcc.dg/pr108970.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85203d52bfa4a84da5f50e0a242891308ffa8d83/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108970.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85203d52bfa4a84da5f50e0a242891308ffa8d83/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108970.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108970.c?ref=85203d52bfa4a84da5f50e0a242891308ffa8d83", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ftree-loop-vectorize -fno-tree-dce -fno-tree-scev-cprop\" } */\n+\n+int m;\n+\n+__attribute__ ((noinline, returns_twice)) void\n+empty (void)\n+{\n+}\n+\n+void\n+foo (void)\n+{\n+  while (m < 1)\n+    {\n+      empty ();\n+      ++m;\n+    }\n+}"}, {"sha": "d88edafa01857b5a4fe0565adf187544f3c25363", "filename": "gcc/tree-vect-loop-manip.cc", "status": "modified", "additions": 12, "deletions": 32, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85203d52bfa4a84da5f50e0a242891308ffa8d83/gcc%2Ftree-vect-loop-manip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85203d52bfa4a84da5f50e0a242891308ffa8d83/gcc%2Ftree-vect-loop-manip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.cc?ref=85203d52bfa4a84da5f50e0a242891308ffa8d83", "patch": "@@ -1080,12 +1080,6 @@ slpeel_tree_duplicate_loop_to_edge_cfg (class loop *loop,\n   /* Allow duplication of outer loops.  */\n   if (scalar_loop->inner)\n     duplicate_outer_loop = true;\n-  /* Check whether duplication is possible.  */\n-  if (!can_copy_bbs_p (pbbs, scalar_loop->num_nodes))\n-    {\n-      free (bbs);\n-      return NULL;\n-    }\n \n   /* Generate new loop structure.  */\n   new_loop = duplicate_loop (scalar_loop, loop_outer (scalar_loop));\n@@ -1329,7 +1323,11 @@ slpeel_can_duplicate_loop_p (const class loop *loop, const_edge e)\n       || (e != exit_e && e != entry_e))\n     return false;\n \n-  return true;\n+  basic_block *bbs = XNEWVEC (basic_block, loop->num_nodes);\n+  get_loop_body_with_size (loop, bbs, loop->num_nodes);\n+  bool ret = can_copy_bbs_p (bbs, loop->num_nodes);\n+  free (bbs);\n+  return ret;\n }\n \n /* Function vect_get_loop_location.\n@@ -2864,7 +2862,6 @@ vect_do_peeling (loop_vec_info loop_vinfo, tree niters, tree nitersm1,\n \t}\n     }\n \n-  dump_user_location_t loop_loc = find_loop_location (loop);\n   if (vect_epilogues)\n     /* Make sure to set the epilogue's epilogue scalar loop, such that we can\n        use the original scalar loop as remaining epilogue if necessary.  */\n@@ -2874,20 +2871,11 @@ vect_do_peeling (loop_vec_info loop_vinfo, tree niters, tree nitersm1,\n   if (prolog_peeling)\n     {\n       e = loop_preheader_edge (loop);\n-      if (!slpeel_can_duplicate_loop_p (loop, e))\n-\t{\n-\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, loop_loc,\n-\t\t\t   \"loop can't be duplicated to preheader edge.\\n\");\n-\t  gcc_unreachable ();\n-\t}\n+      gcc_checking_assert (slpeel_can_duplicate_loop_p (loop, e));\n+\n       /* Peel prolog and put it on preheader edge of loop.  */\n       prolog = slpeel_tree_duplicate_loop_to_edge_cfg (loop, scalar_loop, e);\n-      if (!prolog)\n-\t{\n-\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, loop_loc,\n-\t\t\t   \"slpeel_tree_duplicate_loop_to_edge_cfg failed.\\n\");\n-\t  gcc_unreachable ();\n-\t}\n+      gcc_assert (prolog);\n       prolog->force_vectorize = false;\n       slpeel_update_phi_nodes_for_loops (loop_vinfo, prolog, loop, true);\n       first_loop = prolog;\n@@ -2949,12 +2937,8 @@ vect_do_peeling (loop_vec_info loop_vinfo, tree niters, tree nitersm1,\n   if (epilog_peeling)\n     {\n       e = single_exit (loop);\n-      if (!slpeel_can_duplicate_loop_p (loop, e))\n-\t{\n-\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, loop_loc,\n-\t\t\t   \"loop can't be duplicated to exit edge.\\n\");\n-\t  gcc_unreachable ();\n-\t}\n+      gcc_checking_assert (slpeel_can_duplicate_loop_p (loop, e));\n+\n       /* Peel epilog and put it on exit edge of loop.  If we are vectorizing\n \t said epilog then we should use a copy of the main loop as a starting\n \t point.  This loop may have already had some preliminary transformations\n@@ -2964,12 +2948,8 @@ vect_do_peeling (loop_vec_info loop_vinfo, tree niters, tree nitersm1,\n \t vectorizing.  */\n       epilog = vect_epilogues ? get_loop_copy (loop) : scalar_loop;\n       epilog = slpeel_tree_duplicate_loop_to_edge_cfg (loop, epilog, e);\n-      if (!epilog)\n-\t{\n-\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, loop_loc,\n-\t\t\t   \"slpeel_tree_duplicate_loop_to_edge_cfg failed.\\n\");\n-\t  gcc_unreachable ();\n-\t}\n+      gcc_assert (epilog);\n+\n       epilog->force_vectorize = false;\n       slpeel_update_phi_nodes_for_loops (loop_vinfo, loop, epilog, false);\n "}]}