{"sha": "d12a76f3ec0d4f3010be7b3f335136247b44014a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDEyYTc2ZjNlYzBkNGYzMDEwYmU3YjNmMzM1MTM2MjQ3YjQ0MDE0YQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2013-09-06T07:55:35Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2013-09-06T07:55:35Z"}, "message": "2013-09-06  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* config/s390/s390.md (UNSPEC_FPINT_FLOOR, UNSPEC_FPINT_BTRUNC)\n\t(UNSPEC_FPINT_ROUND, UNSPEC_FPINT_CEIL, UNSPEC_FPINT_NEARBYINT)\n\t(UNSPEC_FPINT_RINT): New constant definitions.\n\t(FPINT, fpint_name, fpint_roundingmode): New integer iterator\n\tdefinition with 2 attributes.\n\t(\"<FPINT:fpint_name><BFP:mode>2\", \"rint<BFP:mode>2\")\n\t(\"<FPINT:fpint_name><DFP:mode>2\", \"rint<DFP:mode>2\"): New pattern\n\tdefinitions.\n\n2013-09-06  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* gcc.target/s390/nearestint-1.c: New testcase.\n\nFrom-SVN: r202312", "tree": {"sha": "083333ab956d389fcc0e951bcb677f0babe83dbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/083333ab956d389fcc0e951bcb677f0babe83dbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d12a76f3ec0d4f3010be7b3f335136247b44014a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d12a76f3ec0d4f3010be7b3f335136247b44014a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d12a76f3ec0d4f3010be7b3f335136247b44014a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d12a76f3ec0d4f3010be7b3f335136247b44014a/comments", "author": null, "committer": null, "parents": [{"sha": "a9cc3f58acc3606e46c808cb9e698f4aa521056f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9cc3f58acc3606e46c808cb9e698f4aa521056f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9cc3f58acc3606e46c808cb9e698f4aa521056f"}], "stats": {"total": 172, "additions": 170, "deletions": 2}, "files": [{"sha": "252b2611a4e135c55c3aeb0c4bf020ba4750f2f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d12a76f3ec0d4f3010be7b3f335136247b44014a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d12a76f3ec0d4f3010be7b3f335136247b44014a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d12a76f3ec0d4f3010be7b3f335136247b44014a", "patch": "@@ -1,3 +1,24 @@\n+2013-09-06  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/s390.md (UNSPEC_FPINT_FLOOR, UNSPEC_FPINT_BTRUNC)\n+\t(UNSPEC_FPINT_ROUND, UNSPEC_FPINT_CEIL, UNSPEC_FPINT_NEARBYINT)\n+\t(UNSPEC_FPINT_RINT): New constant definitions.\n+\t(FPINT, fpint_name, fpint_roundingmode): New integer iterator\n+\tdefinition with 2 attributes.\n+\t(\"<FPINT:fpint_name><BFP:mode>2\", \"rint<BFP:mode>2\")\n+\t(\"<FPINT:fpint_name><DFP:mode>2\", \"rint<DFP:mode>2\"): New pattern\n+\tdefinitions.\n+\n+2013-09-06  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/s390.md: Add \"bcr_flush\" value to mnemonic\n+\tattribute.\n+\t(\"mem_thread_fence_1\"): Use bcr 14,0 for z196 and later.\n+\tSet the mnemonic attribute to \"bcr_flush\".  Set the \"z196prop\"\n+\tattribute to \"z196_alone\".\n+\t* config/s390/2827.md: Add \"bcr_flush\" to \"ooo_groupalone\" and\n+\t\"zEC12_simple\".\n+\n 2013-09-06  Richard Biener  <rguenther@suse.de>\n \n \t* basic-block.h (class control_dependences): New."}, {"sha": "5be7cfaabfbd743d48e808cf655d4836292692d2", "filename": "gcc/config/s390/2827.md", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d12a76f3ec0d4f3010be7b3f335136247b44014a/gcc%2Fconfig%2Fs390%2F2827.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d12a76f3ec0d4f3010be7b3f335136247b44014a/gcc%2Fconfig%2Fs390%2F2827.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2827.md?ref=d12a76f3ec0d4f3010be7b3f335136247b44014a", "patch": "@@ -37,7 +37,7 @@\n \n (define_insn_reservation \"zEC12_simple\" 1\n   (and (eq_attr \"cpu\" \"zEC12\")\n-       (eq_attr \"mnemonic\" \"ltg,ogrk,lr,lnebr,lghrl,sdbr,x,asi,lhr,sebr,madb,ar,lhrl,clfxtr,llgfr,clghrl,cgr,cli,agrk,ic,adbr,aebr,lrv,clg,cy,cghi,sy,celfbr,seb,clgfr,al,tm,lang,clfebr,lghr,cdb,lpebr,laa,ark,lh,or,icy,xi,msebr,n,llihl,afi,cs,nrk,sth,lgr,l,lcr,stey,xg,crt,slgfr,ny,ld,j,llihh,slgr,clfhsi,slg,lb,lgrl,lrl,llihf,lndbr,llcr,laxg,mvghi,rllg,sdb,xrk,laag,alhsik,algfi,algr,aly,agfi,lrvr,d,crl,llgc,tmhl,algsi,lgh,icmh,clhrl,xgrk,icm,iilf,ork,lbr,cg,ldgr,lgf,iihf,llghr,sg,clfdbr,llgtr,stam,cebr,tmhh,tceb,slgf,basr,lgbr,maebr,lgb,cgfi,aeb,ltebr,lax,clfit,lrvgr,nihl,ni,clfdtr,srdl,mdb,srk,xihf,stgrl,sthrl,algf,ltr,cdlgbr,cgit,ng,lat,llghrl,ltgr,nihh,clgfrl,srlk,maeb,agr,cxlftr,ler,bcr_flush,stcy,cds,clfi,nihf,ly,clt,lgat,alg,lhy,lgfrl,clghsi,clrt,tmll,srlg,tcdb,ay,sty,clr,lgfi,lan,lpdbr,clgt,adb,ahik,sra,algrk,cdfbr,lcebr,clfxbr,msdbr,ceb,clgr,tmy,tmlh,alghsik,lcgr,mvi,cdbr,ltgf,xr,larl,ldr,llgcr,clgrt,clrl,cghsi,cliy,madbr,oy,ogr,llgt,meebr,slr,clgxbr,chi,s,icmy,llc,ngr,clhhsi,ltgfr,llill,lhi,o,meeb,clgdtr,sll,clgrl,clgf,ledbr,cegbr,mviy,algfr,rll,cdlftr,sldl,cdlgtr,lg,niy,st,sgr,ag,le,xgr,cr,stg,llilh,sr,lzer,cdsg,sllk,mdbr,stoc,csg,clgit,chhsi,strl,llilf,lndfr,ngrk,clgebr,clgfi,llgh,mseb,ltdbr,oill,la,llhrl,stc,lghi,oihl,xiy,sllg,llgf,cgrt,ldeb,cl,sl,cdlfbr,oi,oilh,nr,srak,oihh,ear,slgrk,og,c,slgfi,sthy,oilf,oiy,msdb,oihf,a,cfi,lzxr,lzdr,srag,cdgbr,brasl,alr,cgrl,llgfrl,cit,clgxtr,ley,exrl,lcdfr,lay,xilf,lcdbr,alsi,mvhhi,srl,chsi,lgfr,lrvg,cly,sgrk,ahi,celgbr,nill,clgdbr,jg,slrk,lxr,sar,slfi,cpsdr,lcgfr,aghik,nilh,mvhi,lpdfr,xy,alrk,lao,agsi,ldy,nilf,llhr,alfi,laog,sly,aghi,ldebr,bras,srda,cefbr,lt\")) \"nothing\")\n+       (eq_attr \"mnemonic\" \"ltg,ogrk,lr,lnebr,lghrl,sdbr,x,asi,lhr,sebr,madb,ar,lhrl,clfxtr,llgfr,clghrl,cgr,cli,agrk,ic,adbr,aebr,lrv,clg,cy,cghi,sy,celfbr,seb,clgfr,al,tm,lang,clfebr,lghr,cdb,lpebr,laa,ark,lh,or,icy,xi,msebr,n,llihl,afi,cs,nrk,sth,lgr,l,lcr,stey,xg,crt,slgfr,ny,ld,j,llihh,slgr,clfhsi,slg,lb,lgrl,lrl,llihf,lndbr,llcr,laxg,mvghi,rllg,sdb,xrk,laag,alhsik,algfi,algr,aly,agfi,lrvr,d,crl,llgc,tmhl,algsi,lgh,icmh,clhrl,xgrk,icm,iilf,ork,lbr,cg,ldgr,lgf,iihf,llghr,sg,clfdbr,llgtr,stam,cebr,tmhh,tceb,slgf,basr,lgbr,maebr,lgb,cgfi,aeb,ltebr,lax,clfit,lrvgr,nihl,ni,clfdtr,srdl,mdb,srk,xihf,stgrl,sthrl,algf,ltr,cdlgbr,cgit,ng,lat,llghrl,ltgr,nihh,clgfrl,srlk,maeb,agr,cxlftr,ler,bcr_flush,stcy,cds,clfi,nihf,ly,clt,lgat,alg,lhy,lgfrl,clghsi,clrt,tmll,srlg,tcdb,ay,sty,clr,lgfi,lan,lpdbr,clgt,adb,ahik,sra,algrk,cdfbr,lcebr,clfxbr,msdbr,ceb,clgr,tmy,tmlh,alghsik,lcgr,mvi,cdbr,ltgf,xr,larl,ldr,llgcr,clgrt,clrl,cghsi,cliy,madbr,oy,ogr,llgt,meebr,slr,clgxbr,chi,s,icmy,llc,ngr,clhhsi,ltgfr,llill,lhi,o,meeb,clgdtr,sll,clgrl,clgf,ledbr,cegbr,mviy,algfr,rll,cdlftr,sldl,cdlgtr,lg,niy,st,sgr,ag,le,xgr,cr,stg,llilh,sr,lzer,cdsg,sllk,mdbr,stoc,csg,clgit,chhsi,strl,llilf,lndfr,ngrk,clgebr,clgfi,llgh,mseb,ltdbr,oill,la,llhrl,stc,lghi,oihl,xiy,sllg,llgf,cgrt,ldeb,cl,sl,cdlfbr,oi,oilh,nr,srak,oihh,ear,slgrk,og,c,slgfi,sthy,oilf,oiy,msdb,oihf,a,cfi,lzxr,lzdr,srag,cdgbr,brasl,alr,cgrl,llgfrl,cit,clgxtr,ley,exrl,lcdfr,lay,xilf,lcdbr,alsi,mvhhi,srl,chsi,lgfr,lrvg,cly,sgrk,ahi,celgbr,nill,clgdbr,jg,slrk,lxr,sar,slfi,cpsdr,lcgfr,aghik,nilh,mvhi,lpdfr,xy,alrk,lao,agsi,ldy,nilf,llhr,alfi,laog,sly,aghi,ldebr,bras,srda,cefbr,lt,fiebra,fidbra,fixbra,fidtr,fixtr\")) \"nothing\")\n \n (define_insn_reservation \"zEC12_cgdbr\" 2\n   (and (eq_attr \"cpu\" \"zEC12\")\n@@ -603,3 +603,22 @@\n   (and (eq_attr \"cpu\" \"zEC12\")\n        (eq_attr \"mnemonic\" \"mh\")) \"nothing\")\n \n+(define_insn_reservation \"zEC12_fiebra\" 6\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"fiebra\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_fidbra\" 6\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"fidbra\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_fixbra\" 10\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"fixbra\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_fidtr\" 6\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"fidtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_fixtr\" 10\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"fixtr\")) \"nothing\")"}, {"sha": "cf9ef77467567640efc7862d41b5caabbef1c022", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d12a76f3ec0d4f3010be7b3f335136247b44014a/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d12a76f3ec0d4f3010be7b3f335136247b44014a/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=d12a76f3ec0d4f3010be7b3f335136247b44014a", "patch": "@@ -117,6 +117,14 @@\n    ; Population Count\n    UNSPEC_POPCNT\n    UNSPEC_COPYSIGN\n+\n+   ; Load FP Integer\n+   UNSPEC_FPINT_FLOOR\n+   UNSPEC_FPINT_BTRUNC\n+   UNSPEC_FPINT_ROUND\n+   UNSPEC_FPINT_CEIL\n+   UNSPEC_FPINT_NEARBYINT\n+   UNSPEC_FPINT_RINT\n  ])\n \n ;;\n@@ -429,9 +437,25 @@\n ;; the same template.\n (define_code_iterator SHIFT [ashift lshiftrt])\n \n-;; This iterator allow r[ox]sbg to be defined with the same template\n+;; This iterator allows r[ox]sbg to be defined with the same template\n (define_code_iterator IXOR [ior xor])\n \n+;; This iterator is used to expand the patterns for the nearest\n+;; integer functions.\n+(define_int_iterator FPINT [UNSPEC_FPINT_FLOOR UNSPEC_FPINT_BTRUNC\n+\t\t\t    UNSPEC_FPINT_ROUND UNSPEC_FPINT_CEIL\n+\t\t\t    UNSPEC_FPINT_NEARBYINT])\n+(define_int_attr fpint_name [(UNSPEC_FPINT_FLOOR \"floor\")\n+\t\t\t     (UNSPEC_FPINT_BTRUNC \"btrunc\")\n+\t\t\t     (UNSPEC_FPINT_ROUND \"round\")\n+\t\t\t     (UNSPEC_FPINT_CEIL \"ceil\")\n+\t\t\t     (UNSPEC_FPINT_NEARBYINT \"nearbyint\")])\n+(define_int_attr fpint_roundingmode [(UNSPEC_FPINT_FLOOR \"7\")\n+\t\t\t\t     (UNSPEC_FPINT_BTRUNC \"5\")\n+\t\t\t\t     (UNSPEC_FPINT_ROUND \"1\")\n+\t\t\t\t     (UNSPEC_FPINT_CEIL \"6\")\n+\t\t\t\t     (UNSPEC_FPINT_NEARBYINT \"0\")])\n+\n ;; This iterator and attribute allow to combine most atomic operations.\n (define_code_iterator ATOMIC [and ior xor plus minus mult])\n (define_code_iterator ATOMIC_Z196 [and ior xor plus])\n@@ -4414,6 +4438,58 @@\n   [(set_attr \"op_type\" \"RRF\")\n    (set_attr \"type\"    \"fsimptf\")])\n \n+; Binary Floating Point - load fp integer\n+\n+; Expanders for: floor, btrunc, round, ceil, and nearbyint\n+; For all of them the inexact exceptions are suppressed.\n+\n+; fiebra, fidbra, fixbra\n+(define_insn \"<FPINT:fpint_name><BFP:mode>2\"\n+  [(set (match_operand:BFP 0 \"register_operand\" \"=f\")\n+\t(unspec:BFP [(match_operand:BFP 1 \"register_operand\" \"f\")]\n+\t\t    FPINT))]\n+  \"TARGET_Z196\"\n+  \"fi<BFP:xde>bra\\t%0,<FPINT:fpint_roundingmode>,%1,4\"\n+  [(set_attr \"op_type\"   \"RRF\")\n+   (set_attr \"type\"      \"fsimp<BFP:mode>\")])\n+\n+; rint is supposed to raise an inexact exception so we can use the\n+; older instructions.\n+\n+; fiebr, fidbr, fixbr\n+(define_insn \"rint<BFP:mode>2\"\n+  [(set (match_operand:BFP 0 \"register_operand\" \"=f\")\n+\t(unspec:BFP [(match_operand:BFP 1 \"register_operand\" \"f\")]\n+\t\t    UNSPEC_FPINT_RINT))]\n+  \"\"\n+  \"fi<BFP:xde>br\\t%0,0,%1\"\n+  [(set_attr \"op_type\"   \"RRF\")\n+   (set_attr \"type\"      \"fsimp<BFP:mode>\")])\n+\n+\n+; Decimal Floating Point - load fp integer\n+\n+; fidtr, fixtr\n+(define_insn \"<FPINT:fpint_name><DFP:mode>2\"\n+  [(set (match_operand:DFP 0 \"register_operand\" \"=f\")\n+\t(unspec:DFP [(match_operand:DFP 1 \"register_operand\" \"f\")]\n+\t\t    FPINT))]\n+  \"TARGET_HARD_DFP\"\n+  \"fi<DFP:xde>tr\\t%0,<FPINT:fpint_roundingmode>,%1,4\"\n+  [(set_attr \"op_type\"   \"RRF\")\n+   (set_attr \"type\"      \"fsimp<DFP:mode>\")])\n+\n+; fidtr, fixtr\n+(define_insn \"rint<DFP:mode>2\"\n+  [(set (match_operand:DFP 0 \"register_operand\" \"=f\")\n+\t(unspec:DFP [(match_operand:DFP 1 \"register_operand\" \"f\")]\n+\t\t    UNSPEC_FPINT_RINT))]\n+  \"TARGET_HARD_DFP\"\n+  \"fi<DFP:xde>tr\\t%0,0,%1,0\"\n+  [(set_attr \"op_type\"   \"RRF\")\n+   (set_attr \"type\"      \"fsimp<DFP:mode>\")])\n+\n+;\n ; Binary <-> Decimal floating point trunc patterns\n ;\n "}, {"sha": "4773d7815b3a5943c44b660ac937b2c1b3420f53", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d12a76f3ec0d4f3010be7b3f335136247b44014a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d12a76f3ec0d4f3010be7b3f335136247b44014a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d12a76f3ec0d4f3010be7b3f335136247b44014a", "patch": "@@ -1,3 +1,7 @@\n+2013-09-06  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* gcc.target/s390/nearestint-1.c: New testcase.\n+\n 2013-09-06  Joern Rennecke  <joern.rennecke@embecosm.com>\n \t    Vineet Gupta  <Vineet.Gupta@synopsys.com>\n "}, {"sha": "1d9a753b3e471035aae65c754257c090b5a9ad33", "filename": "gcc/testsuite/gcc.target/s390/nearestint-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d12a76f3ec0d4f3010be7b3f335136247b44014a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fnearestint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d12a76f3ec0d4f3010be7b3f335136247b44014a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fnearestint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fnearestint-1.c?ref=d12a76f3ec0d4f3010be7b3f335136247b44014a", "patch": "@@ -0,0 +1,48 @@\n+/* Since z196 the nearest integer functions can be expanded to single\n+   instructions.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z196 -mzarch\" } */\n+\n+extern float ceilf (float x);\n+extern double ceil (double x);\n+extern long double ceill (long double x);\n+extern float floorf (float x);\n+extern double floor (double x);\n+extern long double floorl (long double x);\n+extern float truncf (float x);\n+extern double trunc (double x);\n+extern long double truncl (long double x);\n+extern float nearbyintf (float x);\n+extern double nearbyint (double x);\n+extern long double nearbyintl (long double x);\n+extern float rintf (float x);\n+extern double rint (double x);\n+extern long double rintl (long double x);\n+\n+float my_ceilf (float x) { return ceilf (x); }\n+double my_ceil (double x) { return ceil (x); }\n+long double my_ceill (long double x) { return ceill (x); }\n+\n+float my_floorf (float x) { return floorf (x); }\n+double my_floor (double x) { return floor (x); }\n+long double my_floorl (long double x) { return floorl (x); }\n+\n+float my_truncf (float x) { return truncf (x); }\n+double my_trunc (double x) { return trunc (x); }\n+long double my_truncl (long double x) { return truncl (x); }\n+\n+float my_nearbyintf (float x) { return nearbyintf (x); }\n+double my_nearbyint (double x) { return nearbyint (x); }\n+long double my_nearbyintl (long double x) { return nearbyintl (x); }\n+\n+float my_rintf (float x) { return rintf (x); }\n+double my_rint (double x) { return rint (x); }\n+long double my_rintl (long double x) { return rintl (x); }\n+\n+/* { dg-final { scan-assembler-times \"fiebr\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fidbr\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fixbr\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fiebra\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"fidbra\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"fixbra\\t\" 4 } } */"}]}