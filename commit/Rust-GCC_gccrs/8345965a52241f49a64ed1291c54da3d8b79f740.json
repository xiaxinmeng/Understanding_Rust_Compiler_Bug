{"sha": "8345965a52241f49a64ed1291c54da3d8b79f740", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM0NTk2NWE1MjI0MWY0OWE2NGVkMTI5MWM1NGRhM2Q4Yjc5Zjc0MA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2013-06-24T00:52:34Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2013-06-24T00:52:34Z"}, "message": "rs6000.c (vspltis_constant): Correct for little-endian.\n\ngcc/\n\t* config/rs6000/rs6000.c (vspltis_constant): Correct for little-endian.\n\t(gen_easy_altivec_constant): Likewise.\n\t* config/rs6000/predicates.md (easy_vector_constant_add_self,\n\teasy_vector_constant_msb): Likewise.\ngcc/testsuite/\n\t* gcc.target/powerpc/altivec-consts.c: Correct for little-endian.\n\tAdd scan-assembler-not \"lvx\".\n\t* gcc.target/powerpc/le-altivec-consts.c: New.\n\nFrom-SVN: r200357", "tree": {"sha": "543d4b1ae4d7ea042dfc5a8c6b034110a4a4a9a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/543d4b1ae4d7ea042dfc5a8c6b034110a4a4a9a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8345965a52241f49a64ed1291c54da3d8b79f740", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8345965a52241f49a64ed1291c54da3d8b79f740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8345965a52241f49a64ed1291c54da3d8b79f740", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8345965a52241f49a64ed1291c54da3d8b79f740/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dab76671321933e9ff7f29716be156bfe4962fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dab76671321933e9ff7f29716be156bfe4962fb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dab76671321933e9ff7f29716be156bfe4962fb3"}], "stats": {"total": 702, "additions": 580, "deletions": 122}, "files": [{"sha": "d10b846d4c37ab25e6ddf559eb053240cc5de6b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8345965a52241f49a64ed1291c54da3d8b79f740/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8345965a52241f49a64ed1291c54da3d8b79f740/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8345965a52241f49a64ed1291c54da3d8b79f740", "patch": "@@ -1,3 +1,10 @@\n+2013-06-24  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (vspltis_constant): Correct for little-endian.\n+\t(gen_easy_altivec_constant): Likewise.\n+\t* config/rs6000/predicates.md (easy_vector_constant_add_self,\n+\teasy_vector_constant_msb): Likewise.\n+\n 2013-06-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/57688"}, {"sha": "f47967a48aa77e486f41502c8939d57a964adfbe", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8345965a52241f49a64ed1291c54da3d8b79f740/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8345965a52241f49a64ed1291c54da3d8b79f740/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=8345965a52241f49a64ed1291c54da3d8b79f740", "patch": "@@ -527,9 +527,11 @@\n \t    (match_test \"easy_altivec_constant (op, mode)\")))\n {\n   HOST_WIDE_INT val;\n+  int elt;\n   if (mode == V2DImode || mode == V2DFmode)\n     return 0;\n-  val = const_vector_elt_as_int (op, GET_MODE_NUNITS (mode) - 1);\n+  elt = BYTES_BIG_ENDIAN ? GET_MODE_NUNITS (mode) - 1 : 0;\n+  val = const_vector_elt_as_int (op, elt);\n   val = ((val & 0xff) ^ 0x80) - 0x80;\n   return EASY_VECTOR_15_ADD_SELF (val);\n })\n@@ -541,9 +543,11 @@\n \t    (match_test \"easy_altivec_constant (op, mode)\")))\n {\n   HOST_WIDE_INT val;\n+  int elt;\n   if (mode == V2DImode || mode == V2DFmode)\n     return 0;\n-  val = const_vector_elt_as_int (op, GET_MODE_NUNITS (mode) - 1);\n+  elt = BYTES_BIG_ENDIAN ? GET_MODE_NUNITS (mode) - 1 : 0;\n+  val = const_vector_elt_as_int (op, elt);\n   return EASY_VECTOR_MSB (val, GET_MODE_INNER (mode));\n })\n "}, {"sha": "7014fffda27ac000c5bc6a12f2fcac30e20109e1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8345965a52241f49a64ed1291c54da3d8b79f740/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8345965a52241f49a64ed1291c54da3d8b79f740/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8345965a52241f49a64ed1291c54da3d8b79f740", "patch": "@@ -4657,7 +4657,7 @@ vspltis_constant (rtx op, unsigned step, unsigned copies)\n   bitsize = GET_MODE_BITSIZE (inner);\n   mask = GET_MODE_MASK (inner);\n \n-  val = const_vector_elt_as_int (op, nunits - 1);\n+  val = const_vector_elt_as_int (op, BYTES_BIG_ENDIAN ? nunits - 1 : 0);\n   splat_val = val;\n   msb_val = val > 0 ? 0 : -1;\n \n@@ -4697,7 +4697,7 @@ vspltis_constant (rtx op, unsigned step, unsigned copies)\n   for (i = 0; i < nunits - 1; ++i)\n     {\n       HOST_WIDE_INT desired_val;\n-      if (((i + 1) & (step - 1)) == 0)\n+      if (((BYTES_BIG_ENDIAN ? i + 1 : i) & (step - 1)) == 0)\n \tdesired_val = val;\n       else\n \tdesired_val = msb_val;\n@@ -4782,13 +4782,13 @@ gen_easy_altivec_constant (rtx op)\n {\n   enum machine_mode mode = GET_MODE (op);\n   int nunits = GET_MODE_NUNITS (mode);\n-  rtx last = CONST_VECTOR_ELT (op, nunits - 1);\n+  rtx val = CONST_VECTOR_ELT (op, BYTES_BIG_ENDIAN ? nunits - 1 : 0);\n   unsigned step = nunits / 4;\n   unsigned copies = 1;\n \n   /* Start with a vspltisw.  */\n   if (vspltis_constant (op, step, copies))\n-    return gen_rtx_VEC_DUPLICATE (V4SImode, gen_lowpart (SImode, last));\n+    return gen_rtx_VEC_DUPLICATE (V4SImode, gen_lowpart (SImode, val));\n \n   /* Then try with a vspltish.  */\n   if (step == 1)\n@@ -4797,7 +4797,7 @@ gen_easy_altivec_constant (rtx op)\n     step >>= 1;\n \n   if (vspltis_constant (op, step, copies))\n-    return gen_rtx_VEC_DUPLICATE (V8HImode, gen_lowpart (HImode, last));\n+    return gen_rtx_VEC_DUPLICATE (V8HImode, gen_lowpart (HImode, val));\n \n   /* And finally a vspltisb.  */\n   if (step == 1)\n@@ -4806,7 +4806,7 @@ gen_easy_altivec_constant (rtx op)\n     step >>= 1;\n \n   if (vspltis_constant (op, step, copies))\n-    return gen_rtx_VEC_DUPLICATE (V16QImode, gen_lowpart (QImode, last));\n+    return gen_rtx_VEC_DUPLICATE (V16QImode, gen_lowpart (QImode, val));\n \n   gcc_unreachable ();\n }"}, {"sha": "a58a925472369a06713f909032bd53499efe47c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8345965a52241f49a64ed1291c54da3d8b79f740/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8345965a52241f49a64ed1291c54da3d8b79f740/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8345965a52241f49a64ed1291c54da3d8b79f740", "patch": "@@ -1,3 +1,9 @@\n+2013-06-24  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/altivec-consts.c: Correct for little-endian.\n+\tAdd scan-assembler-not \"lvx\".\n+\t* gcc.target/powerpc/le-altivec-consts.c: New.\n+\n 2013-06-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/cpp0x/sfinae47.C: New."}, {"sha": "2afd13fa85a80ab622ec06c61f3e8eb0c20c1c09", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-consts.c", "status": "modified", "additions": 49, "deletions": 114, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8345965a52241f49a64ed1291c54da3d8b79f740/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-consts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8345965a52241f49a64ed1291c54da3d8b79f740/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-consts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-consts.c?ref=8345965a52241f49a64ed1291c54da3d8b79f740", "patch": "@@ -11,31 +11,24 @@ typedef __attribute__ ((vector_size (16))) unsigned char v16qi;\n typedef __attribute__ ((vector_size (16))) unsigned short v8hi;\n typedef __attribute__ ((vector_size (16))) unsigned int v4si;\n \n-char w[16] __attribute__((aligned(16)));\n- \n-\f\n-/* Emulate the vspltis? instructions on a 16-byte array of chars.  */\n+typedef __attribute__((aligned(16))) char c16[16];\n+typedef __attribute__((aligned(16))) short s8[8];\n+typedef __attribute__((aligned(16))) int i4[4];\n \n-void vspltisb (char *v, int val)\n-{\n-  int i;\n-  for (i = 0; i < 16; i++)\n-    v[i] = val;\n-}\n+#define V16QI(V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16)\t\\\n+  v16qi v = {V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16};\t\\\n+  static c16 w = {V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16}; \\\n+  check_v16qi (v, w);\n \n-void vspltish (char *v, int val)\n-{\n-  int i;\n-  for (i = 0; i < 16; i += 2)\n-    v[i] = val >> 7, v[i + 1] = val;\n-}\n+#define V8HI(V1,V2,V3,V4,V5,V6,V7,V8)\t\t\\\n+  v8hi v = {V1,V2,V3,V4,V5,V6,V7,V8};\t\t\\\n+  static s8 w = {V1,V2,V3,V4,V5,V6,V7,V8};\t\\\n+  check_v8hi (v, w);\n \n-void vspltisw (char *v, int val)\n-{\n-  int i;\n-  for (i = 0; i < 16; i += 4)\n-    v[i] = v[i + 1] = v[i + 2] = val >> 7, v[i + 3] = val;\n-}\n+#define V4SI(V1,V2,V3,V4)\t\\\n+  v4si v = {V1,V2,V3,V4};\t\\\n+  static i4 w = {V1,V2,V3,V4};\t\\\n+  check_v4si (v, w);\n \n \f\n /* Use three different check functions for each mode-instruction pair.\n@@ -48,13 +41,13 @@ void __attribute__ ((noinline)) check_v16qi (v16qi v1, char *v2)\n     abort ();\n }\n \n-void __attribute__ ((noinline)) check_v8hi (v8hi v1, char *v2)\n+void __attribute__ ((noinline)) check_v8hi (v8hi v1, short *v2)\n {\n   if (memcmp (&v1, v2, 16))\n     abort ();\n }\n \n-void __attribute__ ((noinline)) check_v4si (v4si v1, char *v2)\n+void __attribute__ ((noinline)) check_v4si (v4si v1, int *v2)\n {\n   if (memcmp (&v1, v2, 16))\n     abort ();\n@@ -65,217 +58,157 @@ void __attribute__ ((noinline)) check_v4si (v4si v1, char *v2)\n \n void v16qi_vspltisb ()\n {\n-  v16qi v = { 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 };\n-  vspltisb (w, 15);\n-  check_v16qi (v, w);\n+  V16QI (15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15);\n }\n \n void v16qi_vspltisb_neg ()\n {\n-  v16qi v = { -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5 };\n-  vspltisb (w, -5);\n-  check_v16qi (v, w);\n+  V16QI (-5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5);\n }\n \n void v16qi_vspltisb_addself ()\n {\n-  v16qi v = { 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30 };\n-  vspltisb (w, 30);\n-  check_v16qi (v, w);\n+  V16QI (30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30);\n }\n \n void v16qi_vspltisb_neg_addself ()\n {\n-  v16qi v = { -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24 };\n-  vspltisb (w, -24);\n-  check_v16qi (v, w);\n+  V16QI (-24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24);\n }\n \n void v16qi_vspltish ()\n {\n-  v16qi v = { 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15 };\n-  vspltish (w, 15);\n-  check_v16qi (v, w);\n+  V16QI (0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15);\n }\n \n void v16qi_vspltish_addself ()\n {\n-  v16qi v = { 0, 30, 0, 30, 0, 30, 0, 30, 0, 30, 0, 30, 0, 30, 0, 30 };\n-  vspltish (w, 30);\n-  check_v16qi (v, w);\n+  V16QI (0, 30, 0, 30, 0, 30, 0, 30, 0, 30, 0, 30, 0, 30, 0, 30);\n }\n \n void v16qi_vspltish_neg ()\n {\n-  v16qi v = { -1, -5, -1, -5, -1, -5, -1, -5, -1, -5, -1, -5, -1, -5, -1, -5 };\n-  vspltish (w, -5);\n-  check_v16qi (v, w);\n+  V16QI (-1, -5, -1, -5, -1, -5, -1, -5, -1, -5, -1, -5, -1, -5, -1, -5);\n }\n \n void v16qi_vspltisw ()\n {\n-  v16qi v = { 0, 0, 0, 15, 0, 0, 0, 15, 0, 0, 0, 15, 0, 0, 0, 15 };\n-  vspltisw (w, 15);\n-  check_v16qi (v, w);\n+  V16QI (0, 0, 0, 15, 0, 0, 0, 15, 0, 0, 0, 15, 0, 0, 0, 15);\n }\n \n void v16qi_vspltisw_addself ()\n {\n-  v16qi v = { 0, 0, 0, 30, 0, 0, 0, 30, 0, 0, 0, 30, 0, 0, 0, 30 };\n-  vspltisw (w, 30);\n-  check_v16qi (v, w);\n+  V16QI (0, 0, 0, 30, 0, 0, 0, 30, 0, 0, 0, 30, 0, 0, 0, 30);\n }\n \n void v16qi_vspltisw_neg ()\n {\n-  v16qi v = { -1, -1, -1, -5, -1, -1, -1, -5, -1, -1, -1, -5, -1, -1, -1, -5 };\n-  vspltisw (w, -5);\n-  check_v16qi (v, w);\n+  V16QI (-1, -1, -1, -5, -1, -1, -1, -5, -1, -1, -1, -5, -1, -1, -1, -5);\n }\n \n \f\n /* V8HI tests. */\n \n void v8hi_vspltisb ()\n {\n-  v8hi v = { 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F };\n-  vspltisb (w, 15);\n-  check_v8hi (v, w);\n+  V8HI (0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F);\n }\n \n void v8hi_vspltisb_addself ()\n {\n-  v8hi v = { 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E };\n-  vspltisb (w, 30);\n-  check_v8hi (v, w);\n+  V8HI (0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E);\n }\n \n void v8hi_vspltisb_neg ()\n {\n-  v8hi v = { 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB };\n-  vspltisb (w, -5);\n-  check_v8hi (v, w);\n+  V8HI (0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB);\n }\n \n void v8hi_vspltish ()\n {\n-  v8hi v = { 15, 15, 15, 15, 15, 15, 15, 15 };\n-  vspltish (w, 15);\n-  check_v8hi (v, w);\n+  V8HI (15, 15, 15, 15, 15, 15, 15, 15);\n }\n \n void v8hi_vspltish_neg ()\n {\n-  v8hi v = { -5, -5, -5, -5, -5, -5, -5, -5 };\n-  vspltish (w, -5);\n-  check_v8hi (v, w);\n+  V8HI (-5, -5, -5, -5, -5, -5, -5, -5);\n }\n \n void v8hi_vspltish_addself ()\n {\n-  v8hi v = { 30, 30, 30, 30, 30, 30, 30, 30 };\n-  vspltish (w, 30);\n-  check_v8hi (v, w);\n+  V8HI (30, 30, 30, 30, 30, 30, 30, 30);\n }\n \n void v8hi_vspltish_neg_addself ()\n {\n-  v8hi v = { -24, -24, -24, -24, -24, -24, -24, -24 };\n-  vspltish (w, -24);\n-  check_v8hi (v, w);\n+  V8HI (-24, -24, -24, -24, -24, -24, -24, -24);\n }\n \n void v8hi_vspltisw ()\n {\n-  v8hi v = { 0, 15, 0, 15, 0, 15, 0, 15 };\n-  vspltisw (w, 15);\n-  check_v8hi (v, w);\n+  V8HI (0, 15, 0, 15, 0, 15, 0, 15);\n }\n \n void v8hi_vspltisw_addself ()\n {\n-  v8hi v = { 0, 30, 0, 30, 0, 30, 0, 30 };\n-  vspltisw (w, 30);\n-  check_v8hi (v, w);\n+  V8HI (0, 30, 0, 30, 0, 30, 0, 30);\n }\n \n void v8hi_vspltisw_neg ()\n {\n-  v8hi v = { -1, -5, -1, -5, -1, -5, -1, -5 };\n-  vspltisw (w, -5);\n-  check_v8hi (v, w);\n+  V8HI (-1, -5, -1, -5, -1, -5, -1, -5);\n }\n \n /* V4SI tests. */\n \n void v4si_vspltisb ()\n {\n-  v4si v = { 0x0F0F0F0F, 0x0F0F0F0F, 0x0F0F0F0F, 0x0F0F0F0F };\n-  vspltisb (w, 15);\n-  check_v4si (v, w);\n+  V4SI (0x0F0F0F0F, 0x0F0F0F0F, 0x0F0F0F0F, 0x0F0F0F0F);\n }\n \n void v4si_vspltisb_addself ()\n {\n-  v4si v = { 0x1E1E1E1E, 0x1E1E1E1E, 0x1E1E1E1E, 0x1E1E1E1E };\n-  vspltisb (w, 30);\n-  check_v4si (v, w);\n+  V4SI (0x1E1E1E1E, 0x1E1E1E1E, 0x1E1E1E1E, 0x1E1E1E1E);\n }\n \n void v4si_vspltisb_neg ()\n {\n-  v4si v = { 0xFBFBFBFB, 0xFBFBFBFB, 0xFBFBFBFB, 0xFBFBFBFB };\n-  vspltisb (w, -5);\n-  check_v4si (v, w);\n+  V4SI (0xFBFBFBFB, 0xFBFBFBFB, 0xFBFBFBFB, 0xFBFBFBFB);\n }\n \n void v4si_vspltish ()\n {\n-  v4si v = { 0x000F000F, 0x000F000F, 0x000F000F, 0x000F000F };\n-  vspltish (w, 15);\n-  check_v4si (v, w);\n+  V4SI (0x000F000F, 0x000F000F, 0x000F000F, 0x000F000F);\n }\n \n void v4si_vspltish_addself ()\n {\n-  v4si v = { 0x001E001E, 0x001E001E, 0x001E001E, 0x001E001E };\n-  vspltish (w, 30);\n-  check_v4si (v, w);\n+  V4SI (0x001E001E, 0x001E001E, 0x001E001E, 0x001E001E);\n }\n \n void v4si_vspltish_neg ()\n {\n-  v4si v = { 0xFFFBFFFB, 0xFFFBFFFB, 0xFFFBFFFB, 0xFFFBFFFB };\n-  vspltish (w, -5);\n-  check_v4si (v, w);\n+  V4SI (0xFFFBFFFB, 0xFFFBFFFB, 0xFFFBFFFB, 0xFFFBFFFB);\n }\n \n void v4si_vspltisw ()\n {\n-  v4si v = { 15, 15, 15, 15 };\n-  vspltisw (w, 15);\n-  check_v4si (v, w);\n+  V4SI (15, 15, 15, 15);\n }\n \n void v4si_vspltisw_neg ()\n {\n-  v4si v = { -5, -5, -5, -5 };\n-  vspltisw (w, -5);\n-  check_v4si (v, w);\n+  V4SI (-5, -5, -5, -5);\n }\n \n void v4si_vspltisw_addself ()\n {\n-  v4si v = { 30, 30, 30, 30 };\n-  vspltisw (w, 30);\n-  check_v4si (v, w);\n+  V4SI (30, 30, 30, 30);\n }\n \n void v4si_vspltisw_neg_addself ()\n {\n-  v4si v = { -24, -24, -24, -24 };\n-  vspltisw (w, -24);\n-  check_v4si (v, w);\n+  V4SI (-24, -24, -24, -24);\n }\n \n \f\n@@ -316,3 +249,5 @@ int main ()\n   v4si_vspltisw_neg_addself ();\n   return 0;\n }\n+\n+/* { dg-final { scan-assembler-not \"lvx\" { target { ! powerpc*le-*-* } } } } */"}, {"sha": "4d3d536f2e1f33bb321fa5a2b303ef3cab4acfc1", "filename": "gcc/testsuite/gcc.target/powerpc/le-altivec-consts.c", "status": "added", "additions": 506, "deletions": 0, "changes": 506, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8345965a52241f49a64ed1291c54da3d8b79f740/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fle-altivec-consts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8345965a52241f49a64ed1291c54da3d8b79f740/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fle-altivec-consts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fle-altivec-consts.c?ref=8345965a52241f49a64ed1291c54da3d8b79f740", "patch": "@@ -0,0 +1,506 @@\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-do compile { target { powerpc*-*-* && { ! vmx_hw } } } } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -mabi=altivec -O2\" } */\n+\n+/* Check that \"easy\" AltiVec constants are correctly synthesized.  */\n+\n+extern void abort (void);\n+\n+typedef __attribute__ ((vector_size (16))) unsigned char v16qi;\n+typedef __attribute__ ((vector_size (16))) unsigned short v8hi;\n+typedef __attribute__ ((vector_size (16))) unsigned int v4si;\n+\n+typedef __attribute__((aligned(16))) char c16[16];\n+typedef __attribute__((aligned(16))) short s8[8];\n+typedef __attribute__((aligned(16))) int i4[4];\n+\n+#define V16QI(V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16)\t\\\n+  v16qi v = {V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16};\t\\\n+  static c16 w = {V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16}; \\\n+  check_v16qi (v, w);\n+\n+#define V8HI(V1,V2,V3,V4,V5,V6,V7,V8)\t\t\\\n+  v8hi v = {V1,V2,V3,V4,V5,V6,V7,V8};\t\t\\\n+  static s8 w = {V1,V2,V3,V4,V5,V6,V7,V8};\t\\\n+  check_v8hi (v, w);\n+\n+#define V4SI(V1,V2,V3,V4)\t\\\n+  v4si v = {V1,V2,V3,V4};\t\\\n+  static i4 w = {V1,V2,V3,V4};\t\\\n+  check_v4si (v, w);\n+\n+\f\n+/* Use three different check functions for each mode-instruction pair.\n+   The callers have no typecasting and no addressable vectors, to make\n+   the test more robust.  */\n+\n+void __attribute__ ((noinline)) check_v16qi (v16qi v1, char *v2)\n+{\n+  if (memcmp (&v1, v2, 16))\n+    abort ();\n+}\n+\n+void __attribute__ ((noinline)) check_v8hi (v8hi v1, short *v2)\n+{\n+  if (memcmp (&v1, v2, 16))\n+    abort ();\n+}\n+\n+void __attribute__ ((noinline)) check_v4si (v4si v1, int *v2)\n+{\n+  if (memcmp (&v1, v2, 16))\n+    abort ();\n+}\n+\n+\f\n+/* V16QI tests.  */\n+\n+void v16qi_vspltisb ()\n+{\n+  V16QI (15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15);\n+}\n+\n+void v16qi_vspltisb_neg ()\n+{\n+  V16QI (-5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5);\n+}\n+\n+void v16qi_vspltisb_addself ()\n+{\n+  V16QI (30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30);\n+}\n+\n+void v16qi_vspltisb_neg_addself ()\n+{\n+  V16QI (-24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24);\n+}\n+\n+void v16qi_vspltish ()\n+{\n+  V16QI (15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0);\n+}\n+\n+void v16qi_vspltish_addself ()\n+{\n+  V16QI (30, 0, 30, 0, 30, 0, 30, 0, 30, 0, 30, 0, 30, 0, 30, 0);\n+}\n+\n+void v16qi_vspltish_neg ()\n+{\n+  V16QI (-5, -1, -5, -1, -5, -1, -5, -1, -5, -1, -5, -1, -5, -1, -5, -1);\n+}\n+\n+void v16qi_vspltisw ()\n+{\n+  V16QI (15, 0, 0, 0, 15, 0, 0, 0, 15, 0, 0, 0, 15, 0, 0, 0);\n+}\n+\n+void v16qi_vspltisw_addself ()\n+{\n+  V16QI (30, 0, 0, 0, 30, 0, 0, 0, 30, 0, 0, 0, 30, 0, 0, 0);\n+}\n+\n+void v16qi_vspltisw_neg ()\n+{\n+  V16QI (-5, -1, -1, -1, -5, -1, -1, -1, -5, -1, -1, -1, -5, -1, -1, -1);\n+}\n+\n+\f\n+/* V8HI tests. */\n+\n+void v8hi_vspltisb ()\n+{\n+  V8HI (0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F);\n+}\n+\n+void v8hi_vspltisb_addself ()\n+{\n+  V8HI (0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E);\n+}\n+\n+void v8hi_vspltisb_neg ()\n+{\n+  V8HI (0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB);\n+}\n+\n+void v8hi_vspltish ()\n+{\n+  V8HI (15, 15, 15, 15, 15, 15, 15, 15);\n+}\n+\n+void v8hi_vspltish_neg ()\n+{\n+  V8HI (-5, -5, -5, -5, -5, -5, -5, -5);\n+}\n+\n+void v8hi_vspltish_addself ()\n+{\n+  V8HI (30, 30, 30, 30, 30, 30, 30, 30);\n+}\n+\n+void v8hi_vspltish_neg_addself ()\n+{\n+  V8HI (-24, -24, -24, -24, -24, -24, -24, -24);\n+}\n+\n+void v8hi_vspltisw ()\n+{\n+  V8HI (15, 0, 15, 0, 15, 0, 15, 0);\n+}\n+\n+void v8hi_vspltisw_addself ()\n+{\n+  V8HI (30, 0, 30, 0, 30, 0, 30, 0);\n+}\n+\n+void v8hi_vspltisw_neg ()\n+{\n+  V8HI (-5, -1, -5, -1, -5, -1, -5, -1);\n+}\n+\n+/* V4SI tests. */\n+\n+void v4si_vspltisb ()\n+{\n+  V4SI (0x0F0F0F0F, 0x0F0F0F0F, 0x0F0F0F0F, 0x0F0F0F0F);\n+}\n+\n+void v4si_vspltisb_addself ()\n+{\n+  V4SI (0x1E1E1E1E, 0x1E1E1E1E, 0x1E1E1E1E, 0x1E1E1E1E);\n+}\n+\n+void v4si_vspltisb_neg ()\n+{\n+  V4SI (0xFBFBFBFB, 0xFBFBFBFB, 0xFBFBFBFB, 0xFBFBFBFB);\n+}\n+\n+void v4si_vspltish ()\n+{\n+  V4SI (0x000F000F, 0x000F000F, 0x000F000F, 0x000F000F);\n+}\n+\n+void v4si_vspltish_addself ()\n+{\n+  V4SI (0x001E001E, 0x001E001E, 0x001E001E, 0x001E001E);\n+}\n+\n+void v4si_vspltish_neg ()\n+{\n+  V4SI (0xFFFBFFFB, 0xFFFBFFFB, 0xFFFBFFFB, 0xFFFBFFFB);\n+}\n+\n+void v4si_vspltisw ()\n+{\n+  V4SI (15, 15, 15, 15);\n+}\n+\n+void v4si_vspltisw_neg ()\n+{\n+  V4SI (-5, -5, -5, -5);\n+}\n+\n+void v4si_vspltisw_addself ()\n+{\n+  V4SI (30, 30, 30, 30);\n+}\n+\n+void v4si_vspltisw_neg_addself ()\n+{\n+  V4SI (-24, -24, -24, -24);\n+}\n+\n+\f\n+\n+int main ()\n+{\n+  v16qi_vspltisb ();\n+  v16qi_vspltisb_neg ();\n+  v16qi_vspltisb_addself ();\n+  v16qi_vspltisb_neg_addself ();\n+  v16qi_vspltish ();\n+  v16qi_vspltish_addself ();\n+  v16qi_vspltish_neg ();\n+  v16qi_vspltisw ();\n+  v16qi_vspltisw_addself ();\n+  v16qi_vspltisw_neg ();\n+\n+  v8hi_vspltisb ();\n+  v8hi_vspltisb_addself ();\n+  v8hi_vspltisb_neg ();\n+  v8hi_vspltish ();\n+  v8hi_vspltish_neg ();\n+  v8hi_vspltish_addself ();\n+  v8hi_vspltish_neg_addself ();\n+  v8hi_vspltisw ();\n+  v8hi_vspltisw_addself ();\n+  v8hi_vspltisw_neg ();\n+\n+  v4si_vspltisb ();\n+  v4si_vspltisb_addself ();\n+  v4si_vspltisb_neg ();\n+  v4si_vspltish ();\n+  v4si_vspltish_addself ();\n+  v4si_vspltish_neg ();\n+  v4si_vspltisw ();\n+  v4si_vspltisw_neg ();\n+  v4si_vspltisw_addself ();\n+  v4si_vspltisw_neg_addself ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"lvx\" { target { powerpc*le-*-* } } } } */\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-do compile { target { powerpc*-*-* && { ! vmx_hw } } } } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -mabi=altivec -O2\" } */\n+\n+/* Check that \"easy\" AltiVec constants are correctly synthesized.  */\n+\n+extern void abort (void);\n+\n+typedef __attribute__ ((vector_size (16))) unsigned char v16qi;\n+typedef __attribute__ ((vector_size (16))) unsigned short v8hi;\n+typedef __attribute__ ((vector_size (16))) unsigned int v4si;\n+\n+typedef __attribute__((aligned(16))) char c16[16];\n+typedef __attribute__((aligned(16))) short s8[8];\n+typedef __attribute__((aligned(16))) int i4[4];\n+\n+#define V16QI(V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16)\t\\\n+  v16qi v = {V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16};\t\\\n+  static c16 w = {V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16}; \\\n+  check_v16qi (v, w);\n+\n+#define V8HI(V1,V2,V3,V4,V5,V6,V7,V8)\t\t\\\n+  v8hi v = {V1,V2,V3,V4,V5,V6,V7,V8};\t\t\\\n+  static s8 w = {V1,V2,V3,V4,V5,V6,V7,V8};\t\\\n+  check_v8hi (v, w);\n+\n+#define V4SI(V1,V2,V3,V4)\t\\\n+  v4si v = {V1,V2,V3,V4};\t\\\n+  static i4 w = {V1,V2,V3,V4};\t\\\n+  check_v4si (v, w);\n+\n+\f\n+/* Use three different check functions for each mode-instruction pair.\n+   The callers have no typecasting and no addressable vectors, to make\n+   the test more robust.  */\n+\n+void __attribute__ ((noinline)) check_v16qi (v16qi v1, char *v2)\n+{\n+  if (memcmp (&v1, v2, 16))\n+    abort ();\n+}\n+\n+void __attribute__ ((noinline)) check_v8hi (v8hi v1, short *v2)\n+{\n+  if (memcmp (&v1, v2, 16))\n+    abort ();\n+}\n+\n+void __attribute__ ((noinline)) check_v4si (v4si v1, int *v2)\n+{\n+  if (memcmp (&v1, v2, 16))\n+    abort ();\n+}\n+\n+\f\n+/* V16QI tests.  */\n+\n+void v16qi_vspltisb ()\n+{\n+  V16QI (15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15);\n+}\n+\n+void v16qi_vspltisb_neg ()\n+{\n+  V16QI (-5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5);\n+}\n+\n+void v16qi_vspltisb_addself ()\n+{\n+  V16QI (30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30);\n+}\n+\n+void v16qi_vspltisb_neg_addself ()\n+{\n+  V16QI (-24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24);\n+}\n+\n+void v16qi_vspltish ()\n+{\n+  V16QI (15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0);\n+}\n+\n+void v16qi_vspltish_addself ()\n+{\n+  V16QI (30, 0, 30, 0, 30, 0, 30, 0, 30, 0, 30, 0, 30, 0, 30, 0);\n+}\n+\n+void v16qi_vspltish_neg ()\n+{\n+  V16QI (-5, -1, -5, -1, -5, -1, -5, -1, -5, -1, -5, -1, -5, -1, -5, -1);\n+}\n+\n+void v16qi_vspltisw ()\n+{\n+  V16QI (15, 0, 0, 0, 15, 0, 0, 0, 15, 0, 0, 0, 15, 0, 0, 0);\n+}\n+\n+void v16qi_vspltisw_addself ()\n+{\n+  V16QI (30, 0, 0, 0, 30, 0, 0, 0, 30, 0, 0, 0, 30, 0, 0, 0);\n+}\n+\n+void v16qi_vspltisw_neg ()\n+{\n+  V16QI (-5, -1, -1, -1, -5, -1, -1, -1, -5, -1, -1, -1, -5, -1, -1, -1);\n+}\n+\n+\f\n+/* V8HI tests. */\n+\n+void v8hi_vspltisb ()\n+{\n+  V8HI (0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F);\n+}\n+\n+void v8hi_vspltisb_addself ()\n+{\n+  V8HI (0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E);\n+}\n+\n+void v8hi_vspltisb_neg ()\n+{\n+  V8HI (0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB);\n+}\n+\n+void v8hi_vspltish ()\n+{\n+  V8HI (15, 15, 15, 15, 15, 15, 15, 15);\n+}\n+\n+void v8hi_vspltish_neg ()\n+{\n+  V8HI (-5, -5, -5, -5, -5, -5, -5, -5);\n+}\n+\n+void v8hi_vspltish_addself ()\n+{\n+  V8HI (30, 30, 30, 30, 30, 30, 30, 30);\n+}\n+\n+void v8hi_vspltish_neg_addself ()\n+{\n+  V8HI (-24, -24, -24, -24, -24, -24, -24, -24);\n+}\n+\n+void v8hi_vspltisw ()\n+{\n+  V8HI (15, 0, 15, 0, 15, 0, 15, 0);\n+}\n+\n+void v8hi_vspltisw_addself ()\n+{\n+  V8HI (30, 0, 30, 0, 30, 0, 30, 0);\n+}\n+\n+void v8hi_vspltisw_neg ()\n+{\n+  V8HI (-5, -1, -5, -1, -5, -1, -5, -1);\n+}\n+\n+/* V4SI tests. */\n+\n+void v4si_vspltisb ()\n+{\n+  V4SI (0x0F0F0F0F, 0x0F0F0F0F, 0x0F0F0F0F, 0x0F0F0F0F);\n+}\n+\n+void v4si_vspltisb_addself ()\n+{\n+  V4SI (0x1E1E1E1E, 0x1E1E1E1E, 0x1E1E1E1E, 0x1E1E1E1E);\n+}\n+\n+void v4si_vspltisb_neg ()\n+{\n+  V4SI (0xFBFBFBFB, 0xFBFBFBFB, 0xFBFBFBFB, 0xFBFBFBFB);\n+}\n+\n+void v4si_vspltish ()\n+{\n+  V4SI (0x000F000F, 0x000F000F, 0x000F000F, 0x000F000F);\n+}\n+\n+void v4si_vspltish_addself ()\n+{\n+  V4SI (0x001E001E, 0x001E001E, 0x001E001E, 0x001E001E);\n+}\n+\n+void v4si_vspltish_neg ()\n+{\n+  V4SI (0xFFFBFFFB, 0xFFFBFFFB, 0xFFFBFFFB, 0xFFFBFFFB);\n+}\n+\n+void v4si_vspltisw ()\n+{\n+  V4SI (15, 15, 15, 15);\n+}\n+\n+void v4si_vspltisw_neg ()\n+{\n+  V4SI (-5, -5, -5, -5);\n+}\n+\n+void v4si_vspltisw_addself ()\n+{\n+  V4SI (30, 30, 30, 30);\n+}\n+\n+void v4si_vspltisw_neg_addself ()\n+{\n+  V4SI (-24, -24, -24, -24);\n+}\n+\n+\f\n+\n+int main ()\n+{\n+  v16qi_vspltisb ();\n+  v16qi_vspltisb_neg ();\n+  v16qi_vspltisb_addself ();\n+  v16qi_vspltisb_neg_addself ();\n+  v16qi_vspltish ();\n+  v16qi_vspltish_addself ();\n+  v16qi_vspltish_neg ();\n+  v16qi_vspltisw ();\n+  v16qi_vspltisw_addself ();\n+  v16qi_vspltisw_neg ();\n+\n+  v8hi_vspltisb ();\n+  v8hi_vspltisb_addself ();\n+  v8hi_vspltisb_neg ();\n+  v8hi_vspltish ();\n+  v8hi_vspltish_neg ();\n+  v8hi_vspltish_addself ();\n+  v8hi_vspltish_neg_addself ();\n+  v8hi_vspltisw ();\n+  v8hi_vspltisw_addself ();\n+  v8hi_vspltisw_neg ();\n+\n+  v4si_vspltisb ();\n+  v4si_vspltisb_addself ();\n+  v4si_vspltisb_neg ();\n+  v4si_vspltish ();\n+  v4si_vspltish_addself ();\n+  v4si_vspltish_neg ();\n+  v4si_vspltisw ();\n+  v4si_vspltisw_neg ();\n+  v4si_vspltisw_addself ();\n+  v4si_vspltisw_neg_addself ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"lvx\" { target { powerpc*le-*-* } } } } */"}]}