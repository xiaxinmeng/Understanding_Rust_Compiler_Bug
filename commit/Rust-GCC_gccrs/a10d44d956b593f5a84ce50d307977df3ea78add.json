{"sha": "a10d44d956b593f5a84ce50d307977df3ea78add", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEwZDQ0ZDk1NmI1OTNmNWE4NGNlNTBkMzA3OTc3ZGYzZWE3OGFkZA==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-02-24T16:12:39Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-02-24T16:12:39Z"}, "message": "parse.y: (function_prototype): Accept EXTERNAL_REFERENCE_STORAGE.\n\n2005-02-24  James A. Morrison  <phython@gcc.gnu.org>\n\n\t* parse.y: (function_prototype): Accept EXTERNAL_REFERENCE_STORAGE.\n\tMove function parameters check from ...\n\t(function): ...Here.  Update call to tree_code_create_function_initial.\n\t(function_invocation): Use expressions_with_commas_opt instead of\n\texpressions_with_commas.\n\t(expressions_with_commas_opt): New rule.\n\t* treetree.c (tree_code_create_function_prototype): Create PARM_DECLs\n\tfor function parameters.\n\t(tree_code_create_function_initial): Remove PARMS parameter.\n\tDon't create PARM_DECLs for function parameters.\n\t* treetree.h (tree_code_create_function_initial): Remove PARMS\n\tparameter.\n\nFrom-SVN: r95501", "tree": {"sha": "e4794412d7cc3e3ae05e14d41b0e2caadc51bcb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4794412d7cc3e3ae05e14d41b0e2caadc51bcb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a10d44d956b593f5a84ce50d307977df3ea78add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10d44d956b593f5a84ce50d307977df3ea78add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a10d44d956b593f5a84ce50d307977df3ea78add", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10d44d956b593f5a84ce50d307977df3ea78add/comments", "author": null, "committer": null, "parents": [{"sha": "ca2cc05c7bdae683c0d01e3be5b94cd8e9d3827d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca2cc05c7bdae683c0d01e3be5b94cd8e9d3827d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca2cc05c7bdae683c0d01e3be5b94cd8e9d3827d"}], "stats": {"total": 143, "additions": 79, "deletions": 64}, "files": [{"sha": "6d05ce1c9b90323822c5d33adb9dc614e1df188d", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10d44d956b593f5a84ce50d307977df3ea78add/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10d44d956b593f5a84ce50d307977df3ea78add/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=a10d44d956b593f5a84ce50d307977df3ea78add", "patch": "@@ -1,3 +1,19 @@\n+2005-02-24  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\tPR other/19897\n+\t* parse.y: (function_prototype): Accept EXTERNAL_REFERENCE_STORAGE.\n+\tMove function parameters check from ...\n+\t(function): ...Here.  Update call to tree_code_create_function_initial.\n+\t(function_invocation): Use expressions_with_commas_opt instead of\n+\texpressions_with_commas.\n+\t(expressions_with_commas_opt): New rule.\n+\t* treetree.c (tree_code_create_function_prototype): Create PARM_DECLs\n+\tfor function parameters.\n+\t(tree_code_create_function_initial): Remove PARMS parameter.\n+\tDon't create PARM_DECLs for function parameters.\n+\t* treetree.h (tree_code_create_function_initial): Remove PARMS\n+\tparameter.\n+\n 2005-02-23  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* parse.y: Update copyright."}, {"sha": "7ee71ec5a9c760326e4c593593cc167ac8069b5f", "filename": "gcc/treelang/parse.y", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10d44d956b593f5a84ce50d307977df3ea78add/gcc%2Ftreelang%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10d44d956b593f5a84ce50d307977df3ea78add/gcc%2Ftreelang%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Fparse.y?ref=a10d44d956b593f5a84ce50d307977df3ea78add", "patch": "@@ -273,6 +273,7 @@ storage typename NAME LEFT_PARENTHESIS parameters_opt RIGHT_PARENTHESIS SEMICOLO\n     { \n     case STATIC_STORAGE:\n     case EXTERNAL_DEFINITION_STORAGE:\n+    case EXTERNAL_REFERENCE_STORAGE:\n       break;\n       \n     case AUTOMATIC_STORAGE:\n@@ -324,6 +325,17 @@ storage typename NAME LEFT_PARENTHESIS parameters_opt RIGHT_PARENTHESIS SEMICOLO\n \t\t\t\t\t STORAGE_CLASS (prod),\n \t\t\t\t\t NUMERIC_TYPE (type),\n \t\t\t\t\t first_parms, tok->tp.tok.location);\n+\n+#ifdef ENABLE_CHECKING\n+  /* Check all the parameters have code.  */\n+  for (this_parm = PARAMETERS (prod);\n+       this_parm;\n+       this_parm = this_parm->tp.pro.next)\n+    {\n+      gcc_assert ((struct prod_token_parm_item*)VARIABLE (this_parm));\n+      gcc_assert (((struct prod_token_parm_item*)VARIABLE (this_parm))->tp.pro.code);\n+    }\n+#endif\n }\n ;\n \n@@ -332,7 +344,6 @@ NAME LEFT_BRACE {\n   struct prod_token_parm_item *proto;\n   struct prod_token_parm_item search_prod;\n   struct prod_token_parm_item* tok;\n-  struct prod_token_parm_item *this_parm;\n   tok = $1;\n   SYMBOL_TABLE_NAME ((&search_prod)) = tok;\n   search_prod.category = token_category;\n@@ -346,20 +357,9 @@ NAME LEFT_BRACE {\n \n   gcc_assert (proto->tp.pro.code);\n \n-  tree_code_create_function_initial (proto->tp.pro.code, tok->tp.tok.location,\n-                                     FIRST_PARMS (current_function));\n-\n-#ifdef ENABLE_CHECKING\n-  /* Check all the parameters have code.  */\n-  for (this_parm = PARAMETERS (proto);\n-       this_parm;\n-       this_parm = this_parm->tp.pro.next)\n-    {\n-      gcc_assert ((struct prod_token_parm_item*)VARIABLE (this_parm));\n-      gcc_assert (((struct prod_token_parm_item*)VARIABLE (this_parm))->tp.pro.code);\n-    }\n-#endif\n+  tree_code_create_function_initial (proto->tp.pro.code, tok->tp.tok.location);\n }\n+\n variable_defs_opt statements_opt RIGHT_BRACE {\n   struct prod_token_parm_item* tok;\n   tok = $1;\n@@ -610,7 +610,7 @@ INTEGER {\n ;\n \n function_invocation:\n-NAME LEFT_PARENTHESIS expressions_with_commas RIGHT_PARENTHESIS {\n+NAME LEFT_PARENTHESIS expressions_with_commas_opt RIGHT_PARENTHESIS {\n   struct prod_token_parm_item *prod;\n   struct prod_token_parm_item* tok;\n   struct prod_token_parm_item search_prod;\n@@ -677,6 +677,13 @@ NAME LEFT_PARENTHESIS expressions_with_commas RIGHT_PARENTHESIS {\n }\n ;\n \n+expressions_with_commas_opt: \n+/* Nil.  */ {\n+$$ = 0\n+}\n+|expressions_with_commas { $$ = $1 }\n+;\n+\n expressions_with_commas:\n expression {\n   struct prod_token_parm_item *exp;"}, {"sha": "73dab2d290ee2e435924e8e8078f205e72fcc9f6", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 38, "deletions": 45, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10d44d956b593f5a84ce50d307977df3ea78add/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10d44d956b593f5a84ce50d307977df3ea78add/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=a10d44d956b593f5a84ce50d307977df3ea78add", "patch": "@@ -325,6 +325,7 @@ tree_code_create_function_prototype (unsigned char* chars,\n   tree type_node;\n   tree fn_type;\n   tree fn_decl;\n+  tree parm_list = NULL_TREE;\n \n   /* Build the type.  */\n   id = get_identifier ((const char*)chars);\n@@ -378,6 +379,37 @@ tree_code_create_function_prototype (unsigned char* chars,\n       gcc_unreachable ();\n     }\n \n+  /* Make the argument variable decls.  */\n+  for (parm = parms; parm; parm = parm->tp.par.next)\n+    {\n+      tree parm_decl = build_decl (PARM_DECL, get_identifier\n+                                   ((const char*) (parm->tp.par.variable_name)),\n+                                   tree_code_get_type (parm->type));\n+\n+      /* Some languages have different nominal and real types.  */\n+      DECL_ARG_TYPE (parm_decl) = TREE_TYPE (parm_decl);\n+      gcc_assert (DECL_ARG_TYPE (parm_decl));\n+      gcc_assert (fn_decl);\n+      DECL_CONTEXT (parm_decl) = fn_decl;\n+      DECL_SOURCE_LOCATION (parm_decl) = loc;\n+      parm_list = chainon (parm_decl, parm_list);\n+    }\n+\n+  /* Back into reverse order as the back end likes them.  */\n+  parm_list = nreverse (parm_list);\n+\n+  DECL_ARGUMENTS (fn_decl) = parm_list;\n+\n+  /* Save the decls for use when the args are referred to.  */\n+  for (parm = parms; parm_list;\n+       parm_list = TREE_CHAIN (parm_list),\n+\tparm = parm->tp.par.next)\n+    {\n+      gcc_assert (parm); /* Too few.  */\n+      *parm->tp.par.where_to_put_var_tree = parm_list;\n+    }\n+  gcc_assert (!parm); /* Too many.  */\n+\n   /* Process declaration of function defined elsewhere.  */\n   rest_of_decl_compilation (fn_decl, 1, 0);\n \n@@ -386,21 +418,16 @@ tree_code_create_function_prototype (unsigned char* chars,\n \n \n /* Output code for start of function; the decl of the function is in\n-    PREV_SAVED (as created by tree_code_create_function_prototype),\n-    the function is at line number LINENO in file FILENAME.  The\n-    parameter details are in the lists PARMS. Returns nothing.  */\n+   PREV_SAVED (as created by tree_code_create_function_prototype),\n+   the function is at line number LINENO in file FILENAME.  The\n+   parameter details are in the lists PARMS. Returns nothing.  */\n+\n void\n tree_code_create_function_initial (tree prev_saved,\n-\t\t\t\t   location_t loc,\n-\t\t\t\t   struct prod_token_parm_item* parms)\n+\t\t\t\t   location_t loc)\n {\n   tree fn_decl;\n-  tree param_decl;\n-  tree parm_decl;\n-  tree parm_list;\n   tree resultdecl;\n-  struct prod_token_parm_item* this_parm;\n-  struct prod_token_parm_item* parm;\n \n   fn_decl = prev_saved;\n   gcc_assert (fn_decl);\n@@ -426,40 +453,6 @@ tree_code_create_function_initial (tree prev_saved,\n   DECL_SOURCE_LOCATION (resultdecl) = loc;\n   DECL_RESULT (fn_decl) = resultdecl;\n \n-  /* Make the argument variable decls.  */\n-  parm_list = NULL_TREE;\n-  for (parm = parms; parm; parm = parm->tp.par.next)\n-    {\n-      parm_decl = build_decl (PARM_DECL, get_identifier\n-                              ((const char*) (parm->tp.par.variable_name)),\n-                              tree_code_get_type (parm->type));\n-\n-      /* Some languages have different nominal and real types.  */\n-      DECL_ARG_TYPE (parm_decl) = TREE_TYPE (parm_decl);\n-      gcc_assert (DECL_ARG_TYPE (parm_decl));\n-      gcc_assert (fn_decl);\n-      DECL_CONTEXT (parm_decl) = fn_decl;\n-      DECL_SOURCE_LOCATION (parm_decl) = loc;\n-      parm_list = chainon (parm_decl, parm_list);\n-    }\n-\n-  /* Back into reverse order as the back end likes them.  */\n-  parm_list = nreverse (parm_list);\n-\n-  DECL_ARGUMENTS (fn_decl) = parm_list;\n-\n-  /* Save the decls for use when the args are referred to.  */\n-  for (param_decl = DECL_ARGUMENTS (fn_decl),\n-         this_parm = parms;\n-       param_decl;\n-       param_decl = TREE_CHAIN (param_decl),\n-         this_parm = this_parm->tp.par.next)\n-    {\n-      gcc_assert (this_parm); /* Too few.  */\n-      *this_parm->tp.par.where_to_put_var_tree = param_decl;\n-    }\n-  gcc_assert (!this_parm); /* Too many.  */\n-\n   /* Create a new level at the start of the function.  */\n \n   pushlevel (0);\n@@ -721,7 +714,7 @@ tree_code_get_expression (unsigned int exp_type,\n       break;\n \n     case EXP_FUNCTION_INVOCATION:\n-      gcc_assert (op1 && op2);\n+      gcc_assert (op1);\n       {\n         tree fun_ptr;\n         fun_ptr = fold (build1 (ADDR_EXPR,"}, {"sha": "323509cf669a0719ae1bc7e5fc774f11bbc4387a", "filename": "gcc/treelang/treetree.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10d44d956b593f5a84ce50d307977df3ea78add/gcc%2Ftreelang%2Ftreetree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10d44d956b593f5a84ce50d307977df3ea78add/gcc%2Ftreelang%2Ftreetree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.h?ref=a10d44d956b593f5a84ce50d307977df3ea78add", "patch": "@@ -36,14 +36,13 @@ void tree_ggc_storage_always_used  (void *m);\n tree tree_code_get_expression (unsigned int exp_type, tree type, tree op1, tree op2, tree op3);\n tree tree_code_get_numeric_type (unsigned int size1, unsigned int sign1);\n void tree_code_create_function_initial (tree prev_saved,\n-\t\t\t\t\tlocation_t loc,\n-\t\t\t\t\tstruct prod_token_parm_item* parms);\n+\t\t\t\t\tlocation_t loc);\n void tree_code_create_function_wrapup (location_t loc);\n tree tree_code_create_function_prototype (unsigned char* chars,\n \t\t\t\t\t  unsigned int storage_class,\n \t\t\t\t\t  unsigned int ret_type,\n-\t\t\t\t\t  struct prod_token_parm_item* parms,                                 \n-                                         location_t loc);\n+\t\t\t\t\t  struct prod_token_parm_item* parms,\n+                                          location_t loc);\n tree tree_code_create_variable (unsigned int storage_class,\n \t\t\t\tunsigned char* chars,\n \t\t\t\tunsigned int length,"}]}