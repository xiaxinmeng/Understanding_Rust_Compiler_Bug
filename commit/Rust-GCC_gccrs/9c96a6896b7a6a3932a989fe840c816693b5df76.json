{"sha": "9c96a6896b7a6a3932a989fe840c816693b5df76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM5NmE2ODk2YjdhNmEzOTMyYTk4OWZlODQwYzgxNjY5M2I1ZGY3Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-18T09:54:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-18T09:54:46Z"}, "message": "basic_string.h (append(size_type, _CharT)): Moved inline...\n\n2004-01-18  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.h (append(size_type, _CharT)):\n\tMoved inline, just call _M_replace_aux, no source iterators at\n\trisk of being clobbered.\n\t(assign(size_type, _CharT)): Call directly _M_replace_aux.\n\t(_M_replace(iterator, iterator, _InputIterator, _InputIterator,\n\tinput_iterator_tag)): Remove fifth unused argument.\n\t(_M_replace_dispatch(iterator, iterator, _InputIterator,\n\t_InputIterator, __false_type)): Update call.\n\t* include/bits/basic_string.tcc (replace(size_type, size_type,\n\tconst _CharT*, size_type)): Update call.\n\t(_M_replace_aux(iterator, iterator, size_type, _CharT)): Tweak\n\tthrow string literal.\n\t(_M_replace_safe(iterator, iterator, _ForwardIterator,\n\t_ForwardIterator)): Likewise.\n\t(_M_replace(iterator, iterator, _InputIterator, _InputIterator,\n\tinput_iterator_tag)): Remove fifth unused argument.\n\t(append(size_type __n, _CharT __c)): Move inline.\n\t* src/string-inst.cc (S::_M_replace(S::iterator, S::iterator,\n\tconst C*, const C*, input_iterator_tag)): Remove fifth unused\n\targument.\n\nFrom-SVN: r76091", "tree": {"sha": "94d894a6fc1fd9a1fe5ec6acb02d6e5a174b1e99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94d894a6fc1fd9a1fe5ec6acb02d6e5a174b1e99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c96a6896b7a6a3932a989fe840c816693b5df76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c96a6896b7a6a3932a989fe840c816693b5df76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c96a6896b7a6a3932a989fe840c816693b5df76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c96a6896b7a6a3932a989fe840c816693b5df76/comments", "author": null, "committer": null, "parents": [{"sha": "1c0f3facc462973ee773703cf554bdb9344f9cdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c0f3facc462973ee773703cf554bdb9344f9cdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c0f3facc462973ee773703cf554bdb9344f9cdc"}], "stats": {"total": 70, "additions": 38, "deletions": 32}, "files": [{"sha": "5590ce494e45f33d32b9288b135b40af440a5326", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c96a6896b7a6a3932a989fe840c816693b5df76/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c96a6896b7a6a3932a989fe840c816693b5df76/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9c96a6896b7a6a3932a989fe840c816693b5df76", "patch": "@@ -1,3 +1,26 @@\n+2004-01-18  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.h (append(size_type, _CharT)):\n+\tMoved inline, just call _M_replace_aux, no source iterators at\n+\trisk of being clobbered.\n+\t(assign(size_type, _CharT)): Call directly _M_replace_aux.\n+\t(_M_replace(iterator, iterator, _InputIterator, _InputIterator,\n+\tinput_iterator_tag)): Remove fifth unused argument.\n+\t(_M_replace_dispatch(iterator, iterator, _InputIterator,\n+\t_InputIterator, __false_type)): Update call.\n+\t* include/bits/basic_string.tcc (replace(size_type, size_type,\n+\tconst _CharT*, size_type)): Update call.\n+\t(_M_replace_aux(iterator, iterator, size_type, _CharT)): Tweak\n+\tthrow string literal.\n+\t(_M_replace_safe(iterator, iterator, _ForwardIterator,\n+\t_ForwardIterator)): Likewise.\n+\t(_M_replace(iterator, iterator, _InputIterator, _InputIterator,\n+\tinput_iterator_tag)): Remove fifth unused argument.\n+\t(append(size_type __n, _CharT __c)): Move inline.\n+\t* src/string-inst.cc (S::_M_replace(S::iterator, S::iterator,\n+\tconst C*, const C*, input_iterator_tag)): Remove fifth unused\n+\targument.\n+\n 2004-01-16  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/ext/enc_filebuf/char/13189.cc: Fix guards."}, {"sha": "d9847a4b32b15809801d9602b23130135fd111b7", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c96a6896b7a6a3932a989fe840c816693b5df76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c96a6896b7a6a3932a989fe840c816693b5df76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=9c96a6896b7a6a3932a989fe840c816693b5df76", "patch": "@@ -1,6 +1,6 @@\n // Components for manipulating sequences of characters -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -751,7 +751,8 @@ namespace std\n        *  Appends n copies of c to this string.\n        */\n       basic_string&\n-      append(size_type __n, _CharT __c);\n+      append(size_type __n, _CharT __c)\n+      { return _M_replace_aux(_M_iend(), _M_iend(), __n, __c); }\n \n       /**\n        *  @brief  Append a range of characters.\n@@ -837,7 +838,7 @@ namespace std\n        */\n       basic_string&\n       assign(size_type __n, _CharT __c)\n-      { return this->replace(_M_ibegin(), _M_iend(), __n, __c); }\n+      { return _M_replace_aux(_M_ibegin(), _M_iend(), __n, __c); }\n \n       /**\n        *  @brief  Set value to a range of characters.\n@@ -1362,19 +1363,15 @@ namespace std\n \tbasic_string&\n \t_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,\n \t\t\t    _InputIterator __k2, __false_type)\n-        { \n-\t  typedef typename iterator_traits<_InputIterator>::iterator_category\n-\t    _Category;\n-\t  return _M_replace(__i1, __i2, __k1, __k2, _Category());\n-\t}\n+        { return _M_replace(__i1, __i2, __k1, __k2); }\n \n       basic_string&\n       _M_replace_aux(iterator __i1, iterator __i2, size_type __n2, _CharT __c);\n \n       template<class _InputIterator>\n         basic_string&\n         _M_replace(iterator __i1, iterator __i2, _InputIterator __k1,\n-\t\t   _InputIterator __k2, input_iterator_tag);\n+\t\t   _InputIterator __k2);\n \n       template<class _ForwardIterator>\n         basic_string&"}, {"sha": "5f50d3694a33031848cd3d37fbfdc08f8dfb9664", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c96a6896b7a6a3932a989fe840c816693b5df76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c96a6896b7a6a3932a989fe840c816693b5df76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=9c96a6896b7a6a3932a989fe840c816693b5df76", "patch": "@@ -1,6 +1,6 @@\n // Components for manipulating sequences of characters -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -380,8 +380,7 @@ namespace std\n        // Todo: optimized in-place replace.\n        else\n \t return _M_replace(_M_ibegin() + __pos, _M_ibegin() + __pos + __foldn1,\n-\t\t\t   __s, __s + __n2,\n-\t\t\t   typename iterator_traits<const _CharT*>::iterator_category());\n+\t\t\t   __s, __s + __n2);\n      }\n   \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -642,23 +641,22 @@ namespace std\n       const size_type __n1 = __i2 - __i1;\n       const size_type __off1 = __i1 - _M_ibegin();\n       if (max_size() - (this->size() - __n1) <= __n2)\n-\t__throw_length_error(\"basic_string::replace\");\n-      _M_mutate (__off1, __n1, __n2);\n+\t__throw_length_error(\"basic_string::_M_replace_aux\");\n+      _M_mutate(__off1, __n1, __n2);\n       // Invalidated __i1, __i2\n       if (__n2)\n \ttraits_type::assign(_M_data() + __off1, __n2, __c);\n       return *this;\n     }\n \n-  // This is the general replace helper, which currently gets instantiated both\n-  // for input iterators and reverse iterators. It buffers internally and then\n-  // calls _M_replace_safe.\n+  // This is the general replace helper. It buffers internally and then calls\n+  // _M_replace_safe.\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     template<typename _InputIterator>\n       basic_string<_CharT, _Traits, _Alloc>&\n       basic_string<_CharT, _Traits, _Alloc>::\n       _M_replace(iterator __i1, iterator __i2, _InputIterator __k1, \n-\t\t _InputIterator __k2, input_iterator_tag)\n+\t\t _InputIterator __k2)\n       {\n \t// Save concerned source string data in a temporary.\n \tconst basic_string __s(__k1, __k2);\n@@ -680,7 +678,7 @@ namespace std\n \tconst size_type __dmax = this->max_size();\n \n \tif (__dmax <= __dnew)\n-\t  __throw_length_error(\"basic_string::_M_replace\");\n+\t  __throw_length_error(\"basic_string::_M_replace_safe\");\n \tconst size_type __off = __i1 - _M_ibegin();\n \t_M_mutate(__off, __dold, __dnew);\n \n@@ -750,17 +748,6 @@ namespace std\n       return _M_replace_safe(_M_iend(), _M_iend(), __s, __s + __n);\n     }\n \n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>&\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    append(size_type __n, _CharT __c)\n-    {\n-      const size_type __len = __n + this->size();\n-      if (__len > this->capacity())\n-\tthis->reserve(__len);\n-       return this->replace(_M_iend(), _M_iend(), __n, __c);\n-    }\n-\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>\n     operator+(const _CharT* __lhs,"}, {"sha": "d400d4fbf5489b7a49586524f4211f98f450af90", "filename": "libstdc++-v3/src/string-inst.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c96a6896b7a6a3932a989fe840c816693b5df76/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c96a6896b7a6a3932a989fe840c816693b5df76/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc?ref=9c96a6896b7a6a3932a989fe840c816693b5df76", "patch": "@@ -65,8 +65,7 @@ namespace std\n \n   template\n     S&\n-    S::_M_replace(S::iterator, S::iterator, const C*, const C*, \n-\t\t  input_iterator_tag);  \n+    S::_M_replace(S::iterator, S::iterator, const C*, const C*);  \n \n   template \n     S& "}]}