{"sha": "84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRhOWQzYjZjMWYxZGUyYWE2YjViZWY3MDBmNTFiMmU3YzBiYzYwMA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-06-12T20:18:35Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-06-12T20:18:35Z"}, "message": "macros.h (__glibcxx_check_can_increment_range): New.\n\n2018-06-12  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/macros.h (__glibcxx_check_can_increment_range): New.\n\t(__glibcxx_check_can_decrement_range): New.\n\t* include/debug/debug.h (__glibcxx_requires_can_increment_range): New.\n\t(__glibcxx_requires_can_decrement_range): New.\n\t* include/bits/stl_algobase.h (std::copy(_II, _II, _OI)): Use\n\t__glibcxx_requires_can_increment_range.\n\t(std::move(_II, _II, _OI)): Likewise.\n\t(std::copy_backward(_BI, _BI, _BI2)): Use\n\t__glibcxx_requires_can_decrement_range.\n\t(std::move_backward(_BI, _BI, _BI2)): Likewise.\n\t* testsuite/25_algorithms/copy_backward/debug/1_neg.cc: New.\n\t* testsuite/25_algorithms/copy_backward/debug/2_neg.cc: New.\n\t* testsuite/25_algorithms/copy_backward/debug/3_neg.cc: New.\n\t* testsuite/25_algorithms/equal/debug/1_neg.cc: New.\n\t* testsuite/25_algorithms/equal/debug/2_neg.cc: New.\n\t* testsuite/25_algorithms/equal/debug/3_neg.cc: New.\n\nFrom-SVN: r261525", "tree": {"sha": "dd213350f5abc1a75cfa15a2ac39eb4b0721edf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd213350f5abc1a75cfa15a2ac39eb4b0721edf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600/comments", "author": null, "committer": null, "parents": [{"sha": "dd9db6f897cbe85f830a5606435afe51961dbda8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd9db6f897cbe85f830a5606435afe51961dbda8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd9db6f897cbe85f830a5606435afe51961dbda8"}], "stats": {"total": 316, "additions": 302, "deletions": 14}, "files": [{"sha": "813e7d2f96637637858345fd4bde096f1bc5f1fc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600", "patch": "@@ -1,3 +1,22 @@\n+2018-06-12  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/macros.h (__glibcxx_check_can_increment_range): New.\n+\t(__glibcxx_check_can_decrement_range): New.\n+\t* include/debug/debug.h (__glibcxx_requires_can_increment_range): New.\n+\t(__glibcxx_requires_can_decrement_range): New.\n+\t* include/bits/stl_algobase.h (std::copy(_II, _II, _OI)): Use\n+\t__glibcxx_requires_can_increment_range.\n+\t(std::move(_II, _II, _OI)): Likewise.\n+\t(std::copy_backward(_BI, _BI, _BI2)): Use\n+\t__glibcxx_requires_can_decrement_range.\n+\t(std::move_backward(_BI, _BI, _BI2)): Likewise.\n+\t* testsuite/25_algorithms/copy_backward/debug/1_neg.cc: New.\n+\t* testsuite/25_algorithms/copy_backward/debug/2_neg.cc: New.\n+\t* testsuite/25_algorithms/copy_backward/debug/3_neg.cc: New.\n+\t* testsuite/25_algorithms/equal/debug/1_neg.cc: New.\n+\t* testsuite/25_algorithms/equal/debug/2_neg.cc: New.\n+\t* testsuite/25_algorithms/equal/debug/3_neg.cc: New.\n+\n 2018-06-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \tP0935R0 Eradicating unnecessarily explicit default constructors"}, {"sha": "877f32b00531fd8db32bc34d2d67daea101f8fa6", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600", "patch": "@@ -449,11 +449,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_InputIteratorConcept<_II>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OI,\n \t    typename iterator_traits<_II>::value_type>)\n-      __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_can_increment_range(__first, __last, __result);\n \n-      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>\n-\t      (std::__miter_base(__first), std::__miter_base(__last),\n-\t       __result));\n+      return std::__copy_move_a2<__is_move_iterator<_II>::__value>\n+\t     (std::__miter_base(__first), std::__miter_base(__last), __result);\n     }\n \n #if __cplusplus >= 201103L\n@@ -482,7 +481,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_InputIteratorConcept<_II>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OI,\n \t    typename iterator_traits<_II>::value_type>)\n-      __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_can_increment_range(__first, __last, __result);\n \n       return std::__copy_move_a2<true>(std::__miter_base(__first),\n \t\t\t\t       std::__miter_base(__last), __result);\n@@ -627,11 +626,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_ConvertibleConcept<\n \t    typename iterator_traits<_BI1>::value_type,\n \t    typename iterator_traits<_BI2>::value_type>)\n-      __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_can_decrement_range(__first, __last, __result);\n \n-      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>\n-\t      (std::__miter_base(__first), std::__miter_base(__last),\n-\t       __result));\n+      return std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>\n+\t     (std::__miter_base(__first), std::__miter_base(__last), __result);\n     }\n \n #if __cplusplus >= 201103L\n@@ -663,7 +661,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_ConvertibleConcept<\n \t    typename iterator_traits<_BI1>::value_type,\n \t    typename iterator_traits<_BI2>::value_type>)\n-      __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_can_decrement_range(__first, __last, __result);\n \n       return std::__copy_move_backward_a2<true>(std::__miter_base(__first),\n \t\t\t\t\t\tstd::__miter_base(__last),"}, {"sha": "a88faf96e659ae34b7d9cbfbfd8bb9aeb4037dc7", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600", "patch": "@@ -38,12 +38,15 @@\n  * the user error and where the error is reported.\n  *\n  */\n+#define _GLIBCXX_DEBUG_VERIFY_COND_AT(_Cond,_ErrMsg,_File,_Line,_Func)\t\\\n+  if (! (_Cond))\t\t\t\t\t\t\t\\\n+    __gnu_debug::_Error_formatter::_S_at(_File, _Line, _Func)\t\t\\\n+      ._ErrMsg._M_error()\n+\n #define _GLIBCXX_DEBUG_VERIFY_AT_F(_Cond,_ErrMsg,_File,_Line,_Func)\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    if (! (_Cond))\t\t\t\t\t\t\t\\\n-      __gnu_debug::_Error_formatter::_S_at(_File, _Line, _Func)\t\t\\\n-\t._ErrMsg._M_error();\t\t\t\t\t\t\\\n+    _GLIBCXX_DEBUG_VERIFY_COND_AT(_Cond,_ErrMsg,_File,_Line,_Func);\t\\\n   } while (false)\n \n #define _GLIBCXX_DEBUG_VERIFY_AT(_Cond,_ErrMsg,_File,_Line)\t\t\\\n@@ -84,6 +87,42 @@ _GLIBCXX_DEBUG_VERIFY(_First != _Last,\t\t\t\t\t\\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last))\n \n+#define __glibcxx_check_can_increment_range(_First1,_Last1,_First2)\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    typename __gnu_debug::_Distance_traits<__decltype(_First1)>::__type __dist;\\\n+    _GLIBCXX_DEBUG_VERIFY_COND_AT(\t\t\t\t\t\\\n+\t\t\t__gnu_debug::__valid_range(_First1, _Last1, __dist),\\\n+\t\t\t_M_message(__gnu_debug::__msg_valid_range)\t\\\n+\t\t\t._M_iterator(_First1, #_First1)\t\t\t\\\n+\t\t\t._M_iterator(_Last1, #_Last1),\t\t\t\\\n+\t\t\t__FILE__,__LINE__,__PRETTY_FUNCTION__);\t\t\\\n+    _GLIBCXX_DEBUG_VERIFY_COND_AT(\t\t\t\t\t\\\n+\t\t\t__gnu_debug::__can_advance(_First2, __dist.first),\\\n+\t\t\t_M_message(__gnu_debug::__msg_iter_subscript_oob)\\\n+\t\t\t._M_iterator(_First2, #_First2)\t\t\t\\\n+\t\t\t._M_integer(__dist.first),\t\t\t\\\n+\t\t\t__FILE__,__LINE__,__PRETTY_FUNCTION__);\t\t\\\n+  } while(false)\n+\n+#define __glibcxx_check_can_decrement_range(_First1,_Last1,_First2)\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    typename __gnu_debug::_Distance_traits<__decltype(_First1)>::__type __dist;\\\n+    _GLIBCXX_DEBUG_VERIFY_COND_AT(\t\t\t\t\t\\\n+\t\t\t__gnu_debug::__valid_range(_First1, _Last1, __dist),\\\n+\t\t\t_M_message(__gnu_debug::__msg_valid_range)\t\\\n+\t\t\t._M_iterator(_First1, #_First1)\t\t\t\\\n+\t\t\t._M_iterator(_Last1, #_Last1),\t\t\t\\\n+\t\t\t__FILE__,__LINE__,__PRETTY_FUNCTION__);\t\t\\\n+    _GLIBCXX_DEBUG_VERIFY_COND_AT(\t\t\t\t\t\\\n+\t\t\t__gnu_debug::__can_advance(_First2, -__dist.first),\\\n+\t\t\t_M_message(__gnu_debug::__msg_iter_subscript_oob)\\\n+\t\t\t._M_iterator(_First2, #_First2)\t\t\t\\\n+\t\t\t._M_integer(-__dist.first),\t\t\t\\\n+\t\t\t__FILE__,__LINE__,__PRETTY_FUNCTION__);\t\t\\\n+  } while(false)\n+\n /** Verify that we can insert into *this with the iterator _Position.\n  *  Insertion into a container at a specific position requires that\n  *  the iterator be nonsingular, either dereferenceable or past-the-end,\n@@ -145,7 +184,7 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__foreign_iterator(_Position,_First,_Last),\\\n  *  _Safe_sequence and the _Position iterator is a _Safe_iterator.\n */\n #define __glibcxx_check_insert_range_after(_Position,_First,_Last,_Dist)\\\n-  __glibcxx_check_valid_range2(_First,_Last,_Dist);\t\t\t\\\n+__glibcxx_check_valid_range2(_First,_Last,_Dist);\t\t\t\\\n __glibcxx_check_insert_after(_Position);\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__foreign_iterator(_Position,_First,_Last),\\\n \t\t      _M_message(__gnu_debug::__msg_insert_range_from_self)\\"}, {"sha": "10375b75bf52f9cc3a72c3f94b149c6b62e2b0e4", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_backward/debug/1_neg.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fdebug%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fdebug%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fdebug%2F1_neg.cc?ref=84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <algorithm>\n+#include <vector>\n+\n+void\n+test01()\n+{\n+  std::vector<int> vect;\n+  vect.push_back(1);\n+  std::copy_backward(vect.end(), vect.begin(), vect.end());\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7f6bcd1ec2e2d7d6e05dcb42a728f3cd3376e15d", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_backward/debug/2_neg.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fdebug%2F2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fdebug%2F2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fdebug%2F2_neg.cc?ref=84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <algorithm>\n+#include <vector>\n+\n+void\n+test01()\n+{\n+  std::vector<int> vect;\n+  vect.push_back(1);\n+  std::copy_backward(vect.begin(), vect.end(), vect.begin());\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "89d5d0a94e70cfbcbde57f457813dc48fc4fd87f", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_backward/debug/3_neg.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fdebug%2F3_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fdebug%2F3_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fdebug%2F3_neg.cc?ref=84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <algorithm>\n+#include <list>\n+\n+void\n+test01()\n+{\n+  std::list<int> l1, l2;\n+  l1.push_back(1);\n+  l1.push_back(2);\n+  l1.push_back(3);\n+\n+  l2.push_back(1);\n+  std::copy_backward(++l1.begin(), l1.end(), l2.end());\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "096c785e283aa145de0787d71d42e81ea4bed9f9", "filename": "libstdc++-v3/testsuite/25_algorithms/equal/debug/1_neg.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fdebug%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fdebug%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fdebug%2F1_neg.cc?ref=84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <algorithm>\n+#include <vector>\n+\n+void\n+test01()\n+{\n+  std::vector<int> vect;\n+  vect.push_back(1);\n+  std::equal(vect.end(), vect.begin(), vect.begin());\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "97b1e1faa0b7626e8ece89c91b9017f7f243ef50", "filename": "libstdc++-v3/testsuite/25_algorithms/equal/debug/2_neg.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fdebug%2F2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fdebug%2F2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fdebug%2F2_neg.cc?ref=84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <algorithm>\n+#include <vector>\n+\n+void\n+test01()\n+{\n+  std::vector<int> v1, v2;\n+  v1.push_back(1);\n+  std::equal(v1.begin(), v1.end(), v2.begin());\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "48bcea7e7ae4d6b1bcaa88b52414915eb3737a39", "filename": "libstdc++-v3/testsuite/25_algorithms/equal/debug/3_neg.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fdebug%2F3_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fdebug%2F3_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fdebug%2F3_neg.cc?ref=84a9d3b6c1f1de2aa6b5bef700f51b2e7c0bc600", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <algorithm>\n+#include <list>\n+\n+void\n+test01()\n+{\n+  std::list<int> l1, l2;\n+  l1.push_back(1);\n+  l1.push_back(2);\n+  l1.push_back(3);\n+\n+  l2.push_back(1);\n+  l2.push_back(2);\n+\n+  std::equal(++l1.begin(), l1.end(), ++l2.begin());\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}