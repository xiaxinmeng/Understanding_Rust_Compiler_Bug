{"sha": "949a18ccb2de8ef2b73b7fc918d31d40e8b50826", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ5YTE4Y2NiMmRlOGVmMmI3M2I3ZmM5MThkMzFkNDBlOGI1MDgyNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T10:40:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T10:40:08Z"}, "message": "[multiple changes]\n\n2011-08-29  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_res.adb (Resolve_Allocator): Implement Ada2012-B052. Detect cases\n\twhere an anonymous access discriminant of a limited designated type\n\tappears in a non-immutably limited discriminated type and issue an\n\terror message. Add local variable Desig_T and replace all occurrences\n\tof Designated_Type.\n\n2011-08-29  Jose Ruiz  <ruiz@adacore.com>\n\n\t* a-rttiev.adb (Set_Handler): Update comment to indicate that our\n\timplementation is compliant to RM D.15(15/2) after the modification\n\timposed by AI05-0094-1 (binding interpretation).\n\nFrom-SVN: r178196", "tree": {"sha": "43295f88b3f8475ef08b5ed376588a044ac14d48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43295f88b3f8475ef08b5ed376588a044ac14d48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/949a18ccb2de8ef2b73b7fc918d31d40e8b50826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/949a18ccb2de8ef2b73b7fc918d31d40e8b50826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/949a18ccb2de8ef2b73b7fc918d31d40e8b50826", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/949a18ccb2de8ef2b73b7fc918d31d40e8b50826/comments", "author": null, "committer": null, "parents": [{"sha": "cb25faf861535de75e1d971df545233bea29e2a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb25faf861535de75e1d971df545233bea29e2a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb25faf861535de75e1d971df545233bea29e2a8"}], "stats": {"total": 56, "additions": 47, "deletions": 9}, "files": [{"sha": "d9c3a9f5fefb4459dbdbf9b562a1db86ae77e603", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949a18ccb2de8ef2b73b7fc918d31d40e8b50826/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949a18ccb2de8ef2b73b7fc918d31d40e8b50826/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=949a18ccb2de8ef2b73b7fc918d31d40e8b50826", "patch": "@@ -1,3 +1,17 @@\n+2011-08-29  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Allocator): Implement Ada2012-B052. Detect cases\n+\twhere an anonymous access discriminant of a limited designated type\n+\tappears in a non-immutably limited discriminated type and issue an\n+\terror message. Add local variable Desig_T and replace all occurrences\n+\tof Designated_Type.\n+\n+2011-08-29  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* a-rttiev.adb (Set_Handler): Update comment to indicate that our\n+\timplementation is compliant to RM D.15(15/2) after the modification\n+\timposed by AI05-0094-1 (binding interpretation).\n+\n 2011-08-29  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch9.adb, s-tasren.adb, exp_sel.adb, exp_sel.ads, exp_ch11.adb,"}, {"sha": "67b81c72ba84c10530ca97a165709df781e62ec8", "filename": "gcc/ada/a-rttiev.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949a18ccb2de8ef2b73b7fc918d31d40e8b50826/gcc%2Fada%2Fa-rttiev.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949a18ccb2de8ef2b73b7fc918d31d40e8b50826/gcc%2Fada%2Fa-rttiev.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-rttiev.adb?ref=949a18ccb2de8ef2b73b7fc918d31d40e8b50826", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 2005-2010, Free Software Foundation, Inc.        --\n+--           Copyright (C) 2005-2011, Free Software Foundation, Inc.        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -281,12 +281,15 @@ package body Ada.Real_Time.Timing_Events is\n       Remove_From_Queue (Event'Unchecked_Access);\n       Event.Handler := null;\n \n-      --  RM D.15(15/2) requires that at this point, we check whether the time\n+      --  RM D.15(15/2) required that at this point, we check whether the time\n       --  has already passed, and if so, call Handler.all directly from here\n-      --  instead of doing the enqueuing below. However, this causes a nasty\n+      --  instead of doing the enqueuing below. However, this caused a nasty\n       --  race condition and potential deadlock. If the current task has\n       --  already locked the protected object of Handler.all, and the time has\n-      --  passed, deadlock would occur. Therefore, we ignore the requirement.\n+      --  passed, deadlock would occur. It has been fixed by AI05-0094-1, which\n+      --  says that the handler should be executed as soon as possible, meaning\n+      --  that the timing event will be executed after the protected action\n+      --  finishes (Handler.all should not be called directly from here).\n       --  The same comment applies to the other Set_Handler below.\n \n       if Handler /= null then"}, {"sha": "b0ea74ca53896a6517d42846650c54750a245ea7", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949a18ccb2de8ef2b73b7fc918d31d40e8b50826/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949a18ccb2de8ef2b73b7fc918d31d40e8b50826/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=949a18ccb2de8ef2b73b7fc918d31d40e8b50826", "patch": "@@ -4058,6 +4058,7 @@ package body Sem_Res is\n    -----------------------\n \n    procedure Resolve_Allocator (N : Node_Id; Typ : Entity_Id) is\n+      Desig_T  : constant Entity_Id := Designated_Type (Typ);\n       E        : constant Node_Id := Expression (N);\n       Subtyp   : Entity_Id;\n       Discrim  : Entity_Id;\n@@ -4160,7 +4161,7 @@ package body Sem_Res is\n \n       if Nkind (E) = N_Qualified_Expression then\n          if Is_Class_Wide_Type (Etype (E))\n-           and then not Is_Class_Wide_Type (Designated_Type (Typ))\n+           and then not Is_Class_Wide_Type (Desig_T)\n            and then not In_Dispatching_Context\n          then\n             Error_Msg_N\n@@ -4304,7 +4305,7 @@ package body Sem_Res is\n       --  Expand_Allocator_Expression).\n \n       if Ada_Version >= Ada_2005\n-        and then Is_Class_Wide_Type (Designated_Type (Typ))\n+        and then Is_Class_Wide_Type (Desig_T)\n       then\n          declare\n             Exp_Typ : Entity_Id;\n@@ -4366,7 +4367,7 @@ package body Sem_Res is\n       --  type when restriction No_Task_Hierarchy applies.\n \n       if not Is_Library_Level_Entity (Base_Type (Typ))\n-        and then Has_Task (Base_Type (Designated_Type (Typ)))\n+        and then Has_Task (Base_Type (Desig_T))\n       then\n          Check_Restriction (No_Task_Hierarchy, N);\n       end if;\n@@ -4383,6 +4384,26 @@ package body Sem_Res is\n            and then Nkind (Associated_Node_For_Itype (Typ)) =\n                       N_Discriminant_Specification\n          then\n+            declare\n+               Discr : constant Entity_Id :=\n+                         Defining_Identifier (Associated_Node_For_Itype (Typ));\n+            begin\n+               --  Ada2012-B052: If the designated type of the allocator is\n+               --  limited, then the allocator shall not be used to define the\n+               --  value of an access discriminant, unless the discriminated\n+               --  type is immutably limited.\n+\n+               if Ada_Version >= Ada_2012\n+                 and then Is_Limited_Type (Desig_T)\n+                 and then not Is_Immutably_Limited_Type (Scope (Discr))\n+               then\n+                  Error_Msg_N\n+                    (\"only immutably limited types can have anonymous \", N);\n+                  Error_Msg_N\n+                    (\"\\discriminants of limited designated type\", N);\n+               end if;\n+            end;\n+\n             --  Avoid marking an allocator as a dynamic coextension if it is\n             --  within a static construct.\n \n@@ -4402,8 +4423,8 @@ package body Sem_Res is\n       --  its body has not been seen yet, and its activation will fail\n       --  an elaboration check.\n \n-      if Is_Task_Type (Designated_Type (Typ))\n-        and then Scope (Base_Type (Designated_Type (Typ))) = Current_Scope\n+      if Is_Task_Type (Desig_T)\n+        and then Scope (Base_Type (Desig_T)) = Current_Scope\n         and then Is_Compilation_Unit (Current_Scope)\n         and then Ekind (Current_Scope) = E_Package\n         and then not In_Package_Body (Current_Scope)"}]}