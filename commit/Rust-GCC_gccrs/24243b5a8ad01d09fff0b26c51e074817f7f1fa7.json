{"sha": "24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQyNDNiNWE4YWQwMWQwOWZmZjBiMjZjNTFlMDc0ODE3ZjdmMWZhNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-11-27T00:00:35Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-11-27T00:00:35Z"}, "message": "typeck.c (cp_build_unary_op): Consistently use the accurate location in seven additional diagnostic messages.\n\n/cp\n2019-11-26  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* typeck.c (cp_build_unary_op): Consistently use the accurate\n\tlocation in seven additional diagnostic messages.\n\t(cp_build_compound_expr): Use cp_expr_loc_or_input_loc in one place.\n\n/testsuite\n2019-11-26  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/cpp1z/bool-increment1.C: Test location(s) too.\n\t* g++.dg/expr/bitfield3.C: Likewise.\n\t* g++.dg/expr/bitfield4.C: Likewise.\n\t* g++.dg/expr/bitfield5.C: Likewise.\n\t* g++.dg/expr/bitfield6.C: Likewise.\n\t* g++.dg/expr/bool1.C: Likewise.\n\t* g++.dg/expr/bool2.C: Likewise.\n\t* g++.dg/expr/bool3.C: Likewise.\n\t* g++.dg/expr/bool4.C: Likewise.\n\t* g++.dg/expr/lval3.C: Likewise.\n\t* g++.dg/other/error18.C: Likewise.\n\t* g++.dg/warn/Wpointer-arith-1.C: Likewise.\n\t* g++.old-deja/g++.bugs/900212_01.C: Likewise.\n\t* g++.old-deja/g++.bugs/900428_02.C: Likewise.\n\t* g++.old-deja/g++.jason/rfg14.C: Likewise.\n\t* g++.old-deja/g++.other/overload11.C: Likewise.\n\nFrom-SVN: r278743", "tree": {"sha": "3d5ac72d81c8dca9077b9899cae2a5d65d2f5baa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d5ac72d81c8dca9077b9899cae2a5d65d2f5baa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/comments", "author": null, "committer": null, "parents": [{"sha": "d86d8b35ddec33371cf2efaa05dfeffe035babbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d86d8b35ddec33371cf2efaa05dfeffe035babbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d86d8b35ddec33371cf2efaa05dfeffe035babbe"}], "stats": {"total": 184, "additions": 109, "deletions": 75}, "files": [{"sha": "9f27a58cc6b813227d58e21a4d103bb79f48d7aa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "patch": "@@ -1,3 +1,9 @@\n+2019-11-26  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* typeck.c (cp_build_unary_op): Consistently use the accurate\n+\tlocation in seven additional diagnostic messages.\n+\t(cp_build_compound_expr): Use cp_expr_loc_or_input_loc in one place.\n+\n 2019-11-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/92648"}, {"sha": "98c428db52e93d8fe29deaafbfb5c95434147f96", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "patch": "@@ -6520,7 +6520,8 @@ cp_build_unary_op (enum tree_code code, tree xarg, bool noconvert,\n \tif (TREE_CODE (argtype) == ENUMERAL_TYPE)\n           {\n             if (complain & tf_error)\n-              permerror (input_location, (code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR)\n+              permerror (location, (code == PREINCREMENT_EXPR\n+\t\t\t\t    || code == POSTINCREMENT_EXPR)\n                          ? G_(\"ISO C++ forbids incrementing an enum\")\n                          : G_(\"ISO C++ forbids decrementing an enum\"));\n             else\n@@ -6536,22 +6537,26 @@ cp_build_unary_op (enum tree_code code, tree xarg, bool noconvert,\n \t    if (!COMPLETE_OR_VOID_TYPE_P (type))\n               {\n                 if (complain & tf_error)\n-                  error (((code == PREINCREMENT_EXPR\n-                           || code == POSTINCREMENT_EXPR))\n-                         ? G_(\"cannot increment a pointer to incomplete type %qT\")\n-                         : G_(\"cannot decrement a pointer to incomplete type %qT\"),\n-                         TREE_TYPE (argtype));\n+                  error_at (location, ((code == PREINCREMENT_EXPR\n+\t\t\t\t\t|| code == POSTINCREMENT_EXPR))\n+\t\t\t    ? G_(\"cannot increment a pointer to incomplete \"\n+\t\t\t\t \"type %qT\")\n+\t\t\t    : G_(\"cannot decrement a pointer to incomplete \"\n+\t\t\t\t \"type %qT\"),\n+\t\t\t    TREE_TYPE (argtype));\n                 else\n                   return error_mark_node;\n               }\n \t    else if (!TYPE_PTROB_P (argtype)) \n               {\n                 if (complain & tf_error)\n-                  pedwarn (input_location, OPT_Wpointer_arith,\n+                  pedwarn (location, OPT_Wpointer_arith,\n \t\t\t   (code == PREINCREMENT_EXPR\n                               || code == POSTINCREMENT_EXPR)\n-\t\t\t   ? G_(\"ISO C++ forbids incrementing a pointer of type %qT\")\n-\t\t\t   : G_(\"ISO C++ forbids decrementing a pointer of type %qT\"),\n+\t\t\t   ? G_(\"ISO C++ forbids incrementing a pointer \"\n+\t\t\t\t\"of type %qT\")\n+\t\t\t   : G_(\"ISO C++ forbids decrementing a pointer \"\n+\t\t\t\t\"of type %qT\"),\n \t\t\t   argtype);\n                 else\n                   return error_mark_node;\n@@ -6597,25 +6602,28 @@ cp_build_unary_op (enum tree_code code, tree xarg, bool noconvert,\n \t    if (code == POSTDECREMENT_EXPR || code == PREDECREMENT_EXPR)\n \t      {\n                 if (complain & tf_error)\n-\t\t  error (\"use of an operand of type %qT in %<operator--%> \"\n-\t\t\t \"is forbidden\", boolean_type_node);\n+\t\t  error_at (location,\n+\t\t\t    \"use of an operand of type %qT in %<operator--%> \"\n+\t\t\t    \"is forbidden\", boolean_type_node);\n \t\treturn error_mark_node;\n \t      }\n \t    else\n \t      {\n \t\tif (cxx_dialect >= cxx17)\n \t\t  {\n \t\t    if (complain & tf_error)\n-\t\t      error (\"use of an operand of type %qT in \"\n-\t\t\t     \"%<operator++%> is forbidden in C++17\",\n-\t\t\t     boolean_type_node);\n+\t\t      error_at (location,\n+\t\t\t\t\"use of an operand of type %qT in \"\n+\t\t\t\t\"%<operator++%> is forbidden in C++17\",\n+\t\t\t\tboolean_type_node);\n \t\t    return error_mark_node;\n \t\t  }\n \t\t/* Otherwise, [depr.incr.bool] says this is deprecated.  */\n \t\telse\n-\t\t  warning (OPT_Wdeprecated, \"use of an operand of type %qT \"\n-\t\t\t   \"in %<operator++%> is deprecated\",\n-\t\t\t   boolean_type_node);\n+\t\t  warning_at (location, OPT_Wdeprecated,\n+\t\t\t      \"use of an operand of type %qT \"\n+\t\t\t      \"in %<operator++%> is deprecated\",\n+\t\t\t      boolean_type_node);\n \t      }\n \t    val = boolean_increment (code, arg);\n \t  }\n@@ -6646,7 +6654,7 @@ cp_build_unary_op (enum tree_code code, tree xarg, bool noconvert,\n     }\n \n   if (complain & tf_error)\n-    error (\"%s\", errstring);\n+    error_at (location, \"%s\", errstring);\n   return error_mark_node;\n }\n \n@@ -7038,7 +7046,8 @@ cp_build_compound_expr (tree lhs, tree rhs, tsubst_flags_t complain)\n   if (type_unknown_p (rhs))\n     {\n       if (complain & tf_error)\n-\terror (\"no context to resolve type of %qE\", rhs);\n+\terror_at (cp_expr_loc_or_input_loc (rhs),\n+\t\t  \"no context to resolve type of %qE\", rhs);\n       return error_mark_node;\n     }\n   "}, {"sha": "1b56973b06e44e53bb3d2e70069d91f078352d9d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "patch": "@@ -1,3 +1,22 @@\n+2019-11-26  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/cpp1z/bool-increment1.C: Test location(s) too.\n+\t* g++.dg/expr/bitfield3.C: Likewise.\n+\t* g++.dg/expr/bitfield4.C: Likewise.\n+\t* g++.dg/expr/bitfield5.C: Likewise.\n+\t* g++.dg/expr/bitfield6.C: Likewise.\n+\t* g++.dg/expr/bool1.C: Likewise.\n+\t* g++.dg/expr/bool2.C: Likewise.\n+\t* g++.dg/expr/bool3.C: Likewise.\n+\t* g++.dg/expr/bool4.C: Likewise.\n+\t* g++.dg/expr/lval3.C: Likewise.\n+\t* g++.dg/other/error18.C: Likewise.\n+\t* g++.dg/warn/Wpointer-arith-1.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900212_01.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900428_02.C: Likewise.\n+\t* g++.old-deja/g++.jason/rfg14.C: Likewise.\n+\t* g++.old-deja/g++.other/overload11.C: Likewise.\n+\n 2019-11-26  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/92683"}, {"sha": "3ef713595f19b04d694676de7ae6ade99e7f654c", "filename": "gcc/testsuite/g++.dg/cpp1z/bool-increment1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fbool-increment1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fbool-increment1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fbool-increment1.C?ref=24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "patch": "@@ -5,10 +5,10 @@ fn (bool b)\n {\n   int r = 0;\n \n-  r += b++; // { dg-error \"use of an operand of type .bool. in .operator\\\\+\\\\+. is forbidden in\" }\n-  r += ++b; // { dg-error \"use of an operand of type .bool. in .operator\\\\+\\\\+. is forbidden in\" }\n-  r += b--; // { dg-error \"use of an operand of type .bool. in .operator--. is forbidden\" }\n-  r += --b; // { dg-error \"use of an operand of type .bool. in .operator--. is forbidden\" }\n+  r += b++; // { dg-error \"8:use of an operand of type .bool. in .operator\\\\+\\\\+. is forbidden in\" }\n+  r += ++b; // { dg-error \"10:use of an operand of type .bool. in .operator\\\\+\\\\+. is forbidden in\" }\n+  r += b--; // { dg-error \"8:use of an operand of type .bool. in .operator--. is forbidden\" }\n+  r += --b; // { dg-error \"10:use of an operand of type .bool. in .operator--. is forbidden\" }\n \n   return r;\n }"}, {"sha": "ba4c5fac81d061195813e587033cb50369f5f6ec", "filename": "gcc/testsuite/g++.dg/expr/bitfield3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield3.C?ref=24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "patch": "@@ -7,6 +7,6 @@ struct S {\n S s;\n \n void f() {\n-  s.x--; // { dg-error \"use of an operand of type .bool.\" }\n-  --s.x; // { dg-error \"use of an operand of type .bool.\" }\n+  s.x--; // { dg-error \"5:use of an operand of type .bool.\" }\n+  --s.x; // { dg-error \"7:use of an operand of type .bool.\" }\n }"}, {"sha": "7b27b7247850032098f7e93b5c351307892fad17", "filename": "gcc/testsuite/g++.dg/expr/bitfield4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield4.C?ref=24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "patch": "@@ -14,8 +14,8 @@ template <>\n void f(bool) {} \n \n int main() {\n-  f(s.x++); // { dg-warning \"deprecated\" \"\" { target { ! c++17 } } }\n+  f(s.x++); // { dg-warning \"7:use of an operand of type .bool. in .operator\\\\+\\\\+. is deprecated\" \"\" { target { ! c++17 } } }\n   // { dg-error \"forbidden\" \"\" { target c++17 } .-1 }\n-  f(++s.x); // { dg-warning \"deprecated\" \"\" { target { ! c++17 } } }\n+  f(++s.x); // { dg-warning \"9:use of an operand of type .bool. in .operator\\\\+\\\\+. is deprecated\" \"\" { target { ! c++17 } } }\n   // { dg-error \"forbidden\" \"\" { target c++17 } .-1 }\n }"}, {"sha": "fe7a077007885e411ef5285ea32293171520d0f6", "filename": "gcc/testsuite/g++.dg/expr/bitfield5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield5.C?ref=24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "patch": "@@ -9,11 +9,11 @@ struct S {\n S s;\n \n int main() {\n-  s.x++; // { dg-warning \"deprecated\" \"\" { target { ! c++17 } } }\n+  s.x++; // { dg-warning \"5:use of an operand of type .bool. in .operator\\\\+\\\\+. is deprecated\" \"\" { target { ! c++17 } } }\n   // { dg-error \"forbidden\" \"\" { target c++17 } .-1 }\n   if (s.x != 1)\n     return 1;\n-  ++s.x; // { dg-warning \"deprecated\" \"\" { target { ! c++17 } } }\n+  ++s.x; // { dg-warning \"7:use of an operand of type .bool. in .operator\\\\+\\\\+. is deprecated\" \"\" { target { ! c++17 } } }\n   // { dg-error \"forbidden\" \"\" { target c++17 } .-1 }\n   if (s.x != 1)\n     return 2;"}, {"sha": "5a778f94983da445d69d582f5a3623d978781a7b", "filename": "gcc/testsuite/g++.dg/expr/bitfield6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield6.C?ref=24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "patch": "@@ -7,6 +7,6 @@ struct S {\n S s;\n \n void f() {\n-  ++s.x = false; // { dg-warning \"deprecated\" \"\" { target { ! c++17 } } }\n+  ++s.x = false; // { dg-warning \"7:use of an operand of type .bool. in .operator\\\\+\\\\+. is deprecated\" \"\" { target { ! c++17 } } }\n   // { dg-error \"forbidden\" \"\" { target c++17 } .-1 }\n }"}, {"sha": "91a7cd8127bf35b7c53c761808ce4e69b6bf0b2a", "filename": "gcc/testsuite/g++.dg/expr/bool1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool1.C?ref=24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "patch": "@@ -11,10 +11,10 @@ int main()\n   my_bool b = false;\n   int i;\n \n-  b++; // { dg-warning \"deprecated\" \"\" { target { ! c++17 } } }\n-  // { dg-error \"forbidden\" \"\" { target c++17 } .-1 }\n-  b++; // { dg-warning \"deprecated\" \"\" { target { ! c++17 } } }\n-  // { dg-error \"forbidden\" \"\" { target c++17 } .-1 }\n+  b++; // { dg-warning \"3:use of an operand of type .bool. in .operator\\\\+\\\\+. is deprecated\" \"\" { target { ! c++17 } } }\n+  // { dg-error \"3:use of an operand of type .bool. in .operator\\\\+\\\\+. is forbidden\" \"\" { target c++17 } .-1 }\n+  b++; // { dg-warning \"3:use of an operand of type .bool. in .operator\\\\+\\\\+. is deprecated\" \"\" { target { ! c++17 } } }\n+  // { dg-error \"3:use of an operand of type .bool. in .operator\\\\+\\\\+. is forbidden\" \"\" { target c++17 } .-1 }\n   i = b;\n   if (i != 1)\n     abort ();"}, {"sha": "662c495d8ce47b601ad1d8551431d560831a57f2", "filename": "gcc/testsuite/g++.dg/expr/bool2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool2.C?ref=24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "patch": "@@ -7,7 +7,7 @@ typedef bool my_bool;\n int main()\n {\n   my_bool b = false;\n-  b--; // { dg-error \"\" }\n+  b--; // { dg-error \"3:use of an operand of type .bool. in .operator\\\\-\\\\-. is forbidden\" }\n   return 0;\n }\n "}, {"sha": "311b2f5512d25921430ec6d20b962ee7de061212", "filename": "gcc/testsuite/g++.dg/expr/bool3.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool3.C?ref=24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "patch": "@@ -11,11 +11,11 @@ int main()\n   my_bool b = false;\n   int i;\n \n-  b++; // { dg-warning \"deprecated\" \"\" { target { ! c++17 } } }\n-  // { dg-error \"forbidden\" \"\" { target c++17 } .-1 }\n+  b++; // { dg-warning \"3:use of an operand of type .bool. in .operator\\\\+\\\\+. is deprecated\" \"\" { target { ! c++17 } } }\n+  // { dg-error \"3:use of an operand of type .bool. in .operator\\\\+\\\\+. is forbidden\" \"\" { target c++17 } .-1 }\n   // { dg-warning \".volatile.-qualified type is deprecated\" \"\" { target c++2a } .-2 }\n-  b++; // { dg-warning \"deprecated\" \"\" { target { ! c++17 } } }\n-  // { dg-error \"forbidden\" \"\" { target c++17 } .-1 }\n+  b++; // { dg-warning \"3:use of an operand of type .bool. in .operator\\\\+\\\\+. is deprecated\" \"\" { target { ! c++17 } } }\n+  // { dg-error \"3:use of an operand of type .bool. in .operator\\\\+\\\\+. is forbidden\" \"\" { target c++17 } .-1 }\n   // { dg-warning \".volatile.-qualified type is deprecated\" \"\" { target c++2a } .-2 }\n   i = b;\n   if (i != 1)"}, {"sha": "1c43acf61bec1ead58f7e462bf4af160672d1a04", "filename": "gcc/testsuite/g++.dg/expr/bool4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbool4.C?ref=24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "patch": "@@ -7,7 +7,7 @@ typedef volatile bool my_bool;\n int main()\n {\n   my_bool b = false;\n-  b--; // { dg-error \"\" }\n+  b--; // { dg-error \"3:use of an operand of type .bool. in .operator\\\\-\\\\-. is forbidden\" }\n   // { dg-warning \".volatile.-qualified type is deprecated\" \"\" { target c++2a } .-1 }\n   return 0;\n }"}, {"sha": "b4a9e6d7e7393de87d6eaa63dbe2c5221f1f9b1c", "filename": "gcc/testsuite/g++.dg/expr/lval3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Flval3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Flval3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Flval3.C?ref=24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "patch": "@@ -4,5 +4,5 @@ f()\n {\n   bool i = 0;\n   i++ = 3; // { dg-error \"\" }\n-  // { dg-warning \"deprecated\" \"\" { target { ! c++17 } } .-1 }\n+  // { dg-warning \"3:use of an operand of type .bool. in .operator\\\\+\\\\+. is deprecated\" \"\" { target { ! c++17 } } .-1 }\n }"}, {"sha": "c613e9afd0d970e86abc4e05ec045a3b5aa0823a", "filename": "gcc/testsuite/g++.dg/other/error18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror18.C?ref=24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "patch": "@@ -7,5 +7,5 @@ struct A\n \n void f(A a)\n {\n-  a.b--; // { dg-error \"use of an operand of type .bool.\" }\n+  a.b--; // { dg-error \"5:use of an operand of type .bool.\" }\n }"}, {"sha": "1e031f9d73234aa896a4b7e9e63d419c77505daf", "filename": "gcc/testsuite/g++.dg/warn/Wpointer-arith-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWpointer-arith-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWpointer-arith-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWpointer-arith-1.C?ref=24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "patch": "@@ -4,10 +4,10 @@\n int main()\n {\n   void *pv = 0;\n-  pv++;    // { dg-warning \"forbids incrementing a pointer\" }\n+  pv++;    // { dg-warning \"3:ISO C\\\\+\\\\+ forbids incrementing a pointer\" }\n \n   typedef void (*pft) ();\n \n   pft pf = 0;\n-  pf++;    // { dg-warning \"forbids incrementing a pointer\" }\n+  pf++;    // { dg-warning \"3:ISO C\\\\+\\\\+ forbids incrementing a pointer\" }\n }"}, {"sha": "9e61c1fdfcd2c44583a520e4726a938b524dbae2", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900212_01.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900212_01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900212_01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900212_01.C?ref=24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "patch": "@@ -23,17 +23,17 @@ void global_function_0 ()\n {\n   p0 = p1 + 3;\t\t\t// { dg-error \"\" } \n   p0 = p1 - 3;\t\t\t// { dg-error \"\" } \n-  p1++;\t\t\t\t/* { dg-error \"\" } caught by g++ */\n-  ++p1;\t\t\t\t/* { dg-error \"\" } caught by g++ */\n-  p1--;\t\t\t\t/* { dg-error \"\" } caught by g++ */\n-  --p1;\t\t\t\t/* { dg-error \"\" } caught by g++ */\n+  p1++;\t\t\t\t/* { dg-error \"3:no post-increment\" } caught by g++ */\n+  ++p1;\t\t\t\t/* { dg-error \"5:no pre-increment\" } caught by g++ */\n+  p1--;\t\t\t\t/* { dg-error \"3:no post-decrement\" } caught by g++ */\n+  --p1;\t\t\t\t/* { dg-error \"5:no pre-decrement\" } caught by g++ */\n \n   fp0 = fp1 + 3;\t\t// { dg-error \"\" } \n   fp0 = fp1 - 3;\t\t// { dg-error \"\" } \n-  fp1++;\t\t\t/* { dg-error \"\" } */\n-  ++fp1;\t\t\t/* { dg-error \"\" } */\n-  fp1--;\t\t\t/* { dg-error \"\" } */\n-  --fp1;\t\t\t/* { dg-error \"\" } */\n+  fp1++;\t\t\t/* { dg-error \"3:no post-increment\" } */\n+  ++fp1;\t\t\t/* { dg-error \"5:no pre-increment\" } */\n+  fp1--;\t\t\t/* { dg-error \"3:no post-decrement\" } */\n+  --fp1;\t\t\t/* { dg-error \"5:no pre-decrement\" } */\n }\n \n int main () { return 0; }"}, {"sha": "be4e43a28264055601c0c0e20c30df1859eff6f2", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900428_02.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900428_02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900428_02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900428_02.C?ref=24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "patch": "@@ -15,13 +15,13 @@ void (*fp) ();\n \n void test ()\n {\n-  vp++;\t\t/* { dg-error \"\" } */\n-  ++vp;\t\t/* { dg-error \"\" } */\n-  vp--;\t\t/* { dg-error \"\" } */\n-  --vp;\t\t/* { dg-error \"\" } */\n+  vp++;\t\t/* { dg-error \"3:ISO C\\\\+\\\\+ forbids incrementing\" } */\n+  ++vp;\t\t/* { dg-error \"5:ISO C\\\\+\\\\+ forbids incrementing\" } */\n+  vp--;\t\t/* { dg-error \"3:ISO C\\\\+\\\\+ forbids decrementing\" } */\n+  --vp;\t\t/* { dg-error \"5:ISO C\\\\+\\\\+ forbids decrementing\" } */\n \n-  fp++;\t\t/* { dg-error \"\" } */\n-  ++fp;\t\t/* { dg-error \"\" } */\n-  fp--;\t\t/* { dg-error \"\" } */\n-  --fp;\t\t/* { dg-error \"\" } */\n+  fp++;\t\t/* { dg-error \"3:ISO C\\\\+\\\\+ forbids incrementing\" } */\n+  ++fp;\t\t/* { dg-error \"5:ISO C\\\\+\\\\+ forbids incrementing\" } */\n+  fp--;\t\t/* { dg-error \"3:ISO C\\\\+\\\\+ forbids decrementing\" } */\n+  --fp;\t\t/* { dg-error \"5:ISO C\\\\+\\\\+ forbids decrementing\" } */\n }"}, {"sha": "4bc0990f33d445344e130e1cbe36c4a3c909686a", "filename": "gcc/testsuite/g++.old-deja/g++.jason/rfg14.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg14.C?ref=24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "patch": "@@ -8,9 +8,9 @@ int (*fp)();\n void\n test ()\n {\n-    vp++;               /* { dg-error \"\" } incrementing void * */\n-    ap++;               /* { dg-error \"\" } incrementing ptr to incomplete type */\n-    sp++;               /* { dg-error \"\" } incrementing ptr to incomplete type */\n-    up++;               /* { dg-error \"\" } incrementing ptr to incomplete type */\n-    fp++;               /* { dg-error \"\" } incrementing ptr to function */\n+    vp++;               /* { dg-error \"5:ISO C\\\\+\\\\+ forbids incrementing\" } incrementing void * */\n+    ap++;               /* { dg-error \"5:cannot increment\" } incrementing ptr to incomplete type */\n+    sp++;               /* { dg-error \"5:cannot increment\" } incrementing ptr to incomplete type */\n+    up++;               /* { dg-error \"5:cannot increment\" } incrementing ptr to incomplete type */\n+    fp++;               /* { dg-error \"5:ISO C\\\\+\\\\+ forbids incrementing\" } incrementing ptr to function */\n }"}, {"sha": "c191b339f319bb4a9dbe908d384e467e59c2db45", "filename": "gcc/testsuite/g++.old-deja/g++.other/overload11.C", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Foverload11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24243b5a8ad01d09fff0b26c51e074817f7f1fa7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Foverload11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Foverload11.C?ref=24243b5a8ad01d09fff0b26c51e074817f7f1fa7", "patch": "@@ -38,8 +38,8 @@ int main (int argc, char **argv)\n   \n   // 13.3.1.1 indicates that the following are errors -- the primary expression\n   // is not the name of a function.\n-  (0, ovl) (1);             // { dg-error \"\" } not suitable for overload resolution\n-  (0, &ovl) (1);            // { dg-error \"\" } not suitable for overload resolution\n+  (0, ovl) (1);             // { dg-error \"7:no context\" } not suitable for overload resolution\n+  (0, &ovl) (1);            // { dg-error \"7:no context\" } not suitable for overload resolution\n   (argc ? ovl : ovl) (1);   // { dg-error \"\" } not suitable for overload resolution\n   (argc ? &ovl : &ovl) (1); // { dg-error \"\" } not suitable for overload resolution\n   \n@@ -52,15 +52,15 @@ int main (int argc, char **argv)\n   \n   ptr = (ovl);              // ok\n   ptr = (&ovl);             // ok\n-  ptr = (0, ovl);           // ok { dg-error \"no context\" }\n-  ptr = (0, &ovl);          // ok { dg-error \"no context\" }\n+  ptr = (0, ovl);           // ok { dg-error \"13:no context\" }\n+  ptr = (0, &ovl);          // ok { dg-error \"13:no context\" }\n   ptr = (argc ? ovl : ovl); // ok { dg-error \"no context\" }\n   ptr = (argc ? &ovl : &ovl);// ok { dg-error \"no context\" }\n   \n   vptr = (ovl);              // { dg-error \"\" } no matching candidates\n   vptr = (&ovl);             // { dg-error \"\" } no matching candidates\n-  vptr = (0, ovl);           // { dg-error \"\" } no matching candidates\n-  vptr = (0, &ovl);          // { dg-error \"\" } no matching candidates\n+  vptr = (0, ovl);           // { dg-error \"14:no context\" } no matching candidates\n+  vptr = (0, &ovl);          // { dg-error \"14:no context\" } no matching candidates\n   vptr = (argc ? ovl : ovl); // { dg-error \"\" } no matching candidates\n   vptr = (argc ? &ovl : &ovl);// { dg-error \"\" } no matching candidates\n   \n@@ -81,11 +81,11 @@ int main (int argc, char **argv)\n   static_cast<void>(ovl);        // { dg-error \"\" } not suitable for overload\n   static_cast<void>(&ovl);       // { dg-error \"\" } not suitable for overload\n   ((void)1, f);             // { dg-warning \"\" \"\" { xfail *-*-* } } not a call\n-  ((void)1, ovl);           // { dg-error \"\" } not suitable for overload\n-  ((void)1, &ovl);          // { dg-error \"\" } not suitable for overload\n+  ((void)1, ovl);           // { dg-error \"13:no context\" } not suitable for overload\n+  ((void)1, &ovl);          // { dg-error \"13:no context\" } not suitable for overload\n   (void)((void)1, f);           // ok\n-  (void)((void)1, ovl);         // { dg-error \"\" } not suitable for overload\n-  (void)((void)1, &ovl);        // { dg-error \"\" } not suitable for overload\n+  (void)((void)1, ovl);         // { dg-error \"19:no context\" } not suitable for overload\n+  (void)((void)1, &ovl);        // { dg-error \"19:no context\" } not suitable for overload\n \n   return 0;\n }"}]}