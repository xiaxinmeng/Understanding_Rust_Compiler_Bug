{"sha": "73380438c9c7ab188f5f21ee27da0f04f89d0417", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMzODA0MzhjOWM3YWIxODhmNWYyMWVlMjdkYTBmMDRmODlkMDQxNw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2017-08-01T21:39:51Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2017-08-01T21:39:51Z"}, "message": "i386: Add more naked attribute tests\n\nAdd some tests for implementing interrupt handlers with naked attribute\nand without asm statements.\n\n\t* gcc.dg/guality/pr25967-3.c: New test.\n\t* gcc.dg/guality/pr25967-4.c: Likewise.\n\t* gcc.dg/torture/pr25967-3.c: Likewise.\n\t* gcc.dg/torture/pr25967-4.c: Likewise.\n\nFrom-SVN: r250800", "tree": {"sha": "e2d2cc5fccc5e4e51d481559a0f463f40f4abd4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2d2cc5fccc5e4e51d481559a0f463f40f4abd4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73380438c9c7ab188f5f21ee27da0f04f89d0417", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73380438c9c7ab188f5f21ee27da0f04f89d0417", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73380438c9c7ab188f5f21ee27da0f04f89d0417", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73380438c9c7ab188f5f21ee27da0f04f89d0417/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "760f74c21b5ed03631e598d015c5b95e8377ae27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/760f74c21b5ed03631e598d015c5b95e8377ae27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/760f74c21b5ed03631e598d015c5b95e8377ae27"}], "stats": {"total": 262, "additions": 262, "deletions": 0}, "files": [{"sha": "9b30f119a14d1d37ced7e9afe9dc147fa710280a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73380438c9c7ab188f5f21ee27da0f04f89d0417/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73380438c9c7ab188f5f21ee27da0f04f89d0417/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73380438c9c7ab188f5f21ee27da0f04f89d0417", "patch": "@@ -1,3 +1,10 @@\n+2017-08-01  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.dg/guality/pr25967-3.c: New test.\n+\t* gcc.dg/guality/pr25967-4.c: Likewise.\n+\t* gcc.dg/torture/pr25967-3.c: Likewise.\n+\t* gcc.dg/torture/pr25967-4.c: Likewise.\n+\n 2017-08-01  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.dg/guality/pr25967-1.c: New test."}, {"sha": "0924d1c03c1368c9c4c3ea0e6acafb50c1efff63", "filename": "gcc/testsuite/gcc.dg/guality/pr25967-3.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73380438c9c7ab188f5f21ee27da0f04f89d0417/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr25967-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73380438c9c7ab188f5f21ee27da0f04f89d0417/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr25967-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr25967-3.c?ref=73380438c9c7ab188f5f21ee27da0f04f89d0417", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-g -mgeneral-regs-only\" } */\n+\n+extern void exit (int);\n+\n+typedef unsigned int uword_t __attribute__ ((mode (__word__)));\n+\n+#define ERROR\t\t0x12345670\n+#define IP\t\t0x12345671\n+#define CS\t\t0x12345672\n+#define FLAGS\t\t0x12345673\n+#define SP\t\t0x12345674\n+#define SS\t\t0x12345675\n+\n+#define STRING(x)\tXSTRING(x)\n+#define XSTRING(x)\t#x\n+#define ASMNAME(cname)  ASMNAME2 (__USER_LABEL_PREFIX__, cname)\n+#define ASMNAME2(prefix, cname) XSTRING (prefix) cname\n+\n+struct interrupt_frame\n+{\n+  uword_t ip;\n+  uword_t cs;\n+  uword_t flags;\n+  uword_t sp;\n+  uword_t ss;\n+};\n+\n+__attribute__((naked, used))\n+void\n+fn (void)\n+{\n+  register uword_t *sp __asm__(\"sp\");\n+  uword_t error = *sp;\n+  struct interrupt_frame *frame = (struct interrupt_frame *) (sp + 1);\n+  if (ERROR != error)\t\t/* BREAK */\n+    __builtin_abort ();\n+  if (IP != frame->ip)\n+    __builtin_abort ();\n+  if (CS != frame->cs)\n+    __builtin_abort ();\n+  if (FLAGS != frame->flags)\n+    __builtin_abort ();\n+  if (SP != frame->sp)\n+    __builtin_abort ();\n+  if (SS != frame->ss)\n+    __builtin_abort ();\n+\n+  exit (0);\n+}\n+\n+int\n+main ()\n+{\n+  asm (\"push\t$\" STRING (SS) \";\t\t\\\n+\tpush\t$\" STRING (SP) \";\t\t\\\n+\tpush\t$\" STRING (FLAGS) \";\t\t\\\n+\tpush\t$\" STRING (CS) \";\t\t\\\n+\tpush\t$\" STRING (IP) \";\t\t\\\n+\tpush\t$\" STRING (ERROR) \";\t\t\\\n+\tjmp\t \" ASMNAME (\"fn\"));\n+  return 0;\n+}\n+\n+/* { dg-final { gdb-test 36 \"error\" \"0x12345670\" } } */\n+/* { dg-final { gdb-test 36 \"frame->ip\" \"0x12345671\" } } */\n+/* { dg-final { gdb-test 36 \"frame->cs\" \"0x12345672\" } } */\n+/* { dg-final { gdb-test 36 \"frame->flags\" \"0x12345673\" } } */\n+/* { dg-final { gdb-test 36 \"frame->sp\" \"0x12345674\" } } */\n+/* { dg-final { gdb-test 36 \"frame->ss\" \"0x12345675\" } } */"}, {"sha": "c3b59e212515ddc089c93af8a1fe52a95faa381a", "filename": "gcc/testsuite/gcc.dg/guality/pr25967-4.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73380438c9c7ab188f5f21ee27da0f04f89d0417/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr25967-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73380438c9c7ab188f5f21ee27da0f04f89d0417/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr25967-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr25967-4.c?ref=73380438c9c7ab188f5f21ee27da0f04f89d0417", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-g -mgeneral-regs-only\" } */\n+\n+extern void exit (int);\n+\n+typedef unsigned int uword_t __attribute__ ((mode (__word__)));\n+\n+#define IP\t\t0x12345671\n+#define CS\t\t0x12345672\n+#define FLAGS\t\t0x12345673\n+#define SP\t\t0x12345674\n+#define SS\t\t0x12345675\n+\n+#define STRING(x)\tXSTRING(x)\n+#define XSTRING(x)\t#x\n+#define ASMNAME(cname)  ASMNAME2 (__USER_LABEL_PREFIX__, cname)\n+#define ASMNAME2(prefix, cname) XSTRING (prefix) cname\n+\n+struct interrupt_frame\n+{\n+  uword_t ip;\n+  uword_t cs;\n+  uword_t flags;\n+  uword_t sp;\n+  uword_t ss;\n+};\n+\n+__attribute__((naked, used))\n+void\n+fn (void)\n+{\n+  register uword_t *sp __asm__(\"sp\");\n+  struct interrupt_frame *frame = (struct interrupt_frame *) sp;\n+  if (IP != frame->ip)\t\t/* BREAK */\n+    __builtin_abort ();\n+  if (CS != frame->cs)\n+    __builtin_abort ();\n+  if (FLAGS != frame->flags)\n+    __builtin_abort ();\n+  if (SP != frame->sp)\n+    __builtin_abort ();\n+  if (SS != frame->ss)\n+    __builtin_abort ();\n+\n+  exit (0);\n+}\n+\n+int\n+main ()\n+{\n+  asm (\"push\t$\" STRING (SS) \";\t\t\\\n+\tpush\t$\" STRING (SP) \";\t\t\\\n+\tpush\t$\" STRING (FLAGS) \";\t\t\\\n+\tpush\t$\" STRING (CS) \";\t\t\\\n+\tpush\t$\" STRING (IP) \";\t\t\\\n+\tjmp\t \" ASMNAME (\"fn\"));\n+  return 0;\n+}\n+\n+/* { dg-final { gdb-test 34 \"frame->ip\" \"0x12345671\" } } */\n+/* { dg-final { gdb-test 34 \"frame->cs\" \"0x12345672\" } } */\n+/* { dg-final { gdb-test 34 \"frame->flags\" \"0x12345673\" } } */\n+/* { dg-final { gdb-test 34 \"frame->sp\" \"0x12345674\" } } */\n+/* { dg-final { gdb-test 34 \"frame->ss\" \"0x12345675\" } } */"}, {"sha": "fd26a8b8ce30c7d670b3e81ab7d6d7f91e2210ef", "filename": "gcc/testsuite/gcc.dg/torture/pr25967-3.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73380438c9c7ab188f5f21ee27da0f04f89d0417/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr25967-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73380438c9c7ab188f5f21ee27da0f04f89d0417/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr25967-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr25967-3.c?ref=73380438c9c7ab188f5f21ee27da0f04f89d0417", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-mgeneral-regs-only\" } */\n+\n+extern void exit (int);\n+\n+typedef unsigned int uword_t __attribute__ ((mode (__word__)));\n+\n+#define ERROR\t\t0x12345670\n+#define IP\t\t0x12345671\n+#define CS\t\t0x12345672\n+#define FLAGS\t\t0x12345673\n+#define SP\t\t0x12345674\n+#define SS\t\t0x12345675\n+\n+#define STRING(x)\tXSTRING(x)\n+#define XSTRING(x)\t#x\n+#define ASMNAME(cname)  ASMNAME2 (__USER_LABEL_PREFIX__, cname)\n+#define ASMNAME2(prefix, cname) XSTRING (prefix) cname\n+\n+struct interrupt_frame\n+{\n+  uword_t ip;\n+  uword_t cs;\n+  uword_t flags;\n+  uword_t sp;\n+  uword_t ss;\n+};\n+\n+__attribute__((naked, used))\n+void\n+fn (void)\n+{\n+  register uword_t *sp __asm__(\"sp\");\n+  uword_t error = *sp;\n+  struct interrupt_frame *frame = (struct interrupt_frame *) (sp + 1);\n+  if (ERROR != error)\t\t/* BREAK */\n+    __builtin_abort ();\n+  if (IP != frame->ip)\n+    __builtin_abort ();\n+  if (CS != frame->cs)\n+    __builtin_abort ();\n+  if (FLAGS != frame->flags)\n+    __builtin_abort ();\n+  if (SP != frame->sp)\n+    __builtin_abort ();\n+  if (SS != frame->ss)\n+    __builtin_abort ();\n+\n+  exit (0);\n+}\n+\n+int\n+main ()\n+{\n+  asm (\"push\t$\" STRING (SS) \";\t\t\\\n+\tpush\t$\" STRING (SP) \";\t\t\\\n+\tpush\t$\" STRING (FLAGS) \";\t\t\\\n+\tpush\t$\" STRING (CS) \";\t\t\\\n+\tpush\t$\" STRING (IP) \";\t\t\\\n+\tpush\t$\" STRING (ERROR) \";\t\t\\\n+\tjmp\t \" ASMNAME (\"fn\"));\n+  return 0;\n+}"}, {"sha": "4a0dd78c0adf9ce0fd89bccb08ec69ff470a5a61", "filename": "gcc/testsuite/gcc.dg/torture/pr25967-4.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73380438c9c7ab188f5f21ee27da0f04f89d0417/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr25967-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73380438c9c7ab188f5f21ee27da0f04f89d0417/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr25967-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr25967-4.c?ref=73380438c9c7ab188f5f21ee27da0f04f89d0417", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-mgeneral-regs-only\" } */\n+\n+extern void exit (int);\n+\n+typedef unsigned int uword_t __attribute__ ((mode (__word__)));\n+\n+#define IP\t\t0x12345671\n+#define CS\t\t0x12345672\n+#define FLAGS\t\t0x12345673\n+#define SP\t\t0x12345674\n+#define SS\t\t0x12345675\n+\n+#define STRING(x)\tXSTRING(x)\n+#define XSTRING(x)\t#x\n+#define ASMNAME(cname)  ASMNAME2 (__USER_LABEL_PREFIX__, cname)\n+#define ASMNAME2(prefix, cname) XSTRING (prefix) cname\n+\n+struct interrupt_frame\n+{\n+  uword_t ip;\n+  uword_t cs;\n+  uword_t flags;\n+  uword_t sp;\n+  uword_t ss;\n+};\n+\n+__attribute__((naked, used))\n+void\n+fn (void)\n+{\n+  register uword_t *sp __asm__(\"sp\");\n+  struct interrupt_frame *frame = (struct interrupt_frame *) sp;\n+  if (IP != frame->ip)\t\t/* BREAK */\n+    __builtin_abort ();\n+  if (CS != frame->cs)\n+    __builtin_abort ();\n+  if (FLAGS != frame->flags)\n+    __builtin_abort ();\n+  if (SP != frame->sp)\n+    __builtin_abort ();\n+  if (SS != frame->ss)\n+    __builtin_abort ();\n+\n+  exit (0);\n+}\n+\n+int\n+main ()\n+{\n+  asm (\"push\t$\" STRING (SS) \";\t\t\\\n+\tpush\t$\" STRING (SP) \";\t\t\\\n+\tpush\t$\" STRING (FLAGS) \";\t\t\\\n+\tpush\t$\" STRING (CS) \";\t\t\\\n+\tpush\t$\" STRING (IP) \";\t\t\\\n+\tjmp\t \" ASMNAME (\"fn\"));\n+  return 0;\n+}"}]}