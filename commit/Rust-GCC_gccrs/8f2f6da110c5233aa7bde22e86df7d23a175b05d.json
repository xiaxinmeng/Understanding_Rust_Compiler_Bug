{"sha": "8f2f6da110c5233aa7bde22e86df7d23a175b05d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYyZjZkYTExMGM1MjMzYWE3YmRlMjJlODZkZjdkMjNhMTc1YjA1ZA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2001-06-29T18:26:21Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-06-29T18:26:21Z"}, "message": "ssa-dce.c (note_inherently_necessary_set): New function.\n\n        * ssa-dce.c (note_inherently_necessary_set): New function.\n        (find_inherently_necessary): Use it.  Do not consider\n        NOTEs, CODE_LABELs or BARRIERS are necessary.  Improve\n        handling of asms and unspecs.\n        (delete_insn_bb): Only delete INSNs, CALL_INSNs or JUMP_INSNs.\n\nFrom-SVN: r43656", "tree": {"sha": "62757173f7b39dc6b316870b1d2183bba39fce73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62757173f7b39dc6b316870b1d2183bba39fce73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f2f6da110c5233aa7bde22e86df7d23a175b05d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2f6da110c5233aa7bde22e86df7d23a175b05d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f2f6da110c5233aa7bde22e86df7d23a175b05d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2f6da110c5233aa7bde22e86df7d23a175b05d/comments", "author": null, "committer": null, "parents": [{"sha": "8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d8e52be8aeb3b679baac38d41cbc07448a44ac7"}], "stats": {"total": 84, "additions": 59, "deletions": 25}, "files": [{"sha": "07cb16bd570a6b9be2e8d105ae3dd5d12e6d4037", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2f6da110c5233aa7bde22e86df7d23a175b05d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2f6da110c5233aa7bde22e86df7d23a175b05d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f2f6da110c5233aa7bde22e86df7d23a175b05d", "patch": "@@ -1,3 +1,11 @@\n+Fri Jun 29 12:27:24 2001  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* ssa-dce.c (note_inherently_necessary_set): New function.\n+\t(find_inherently_necessary): Use it.  Do not consider\n+\tNOTEs, CODE_LABELs or BARRIERS are necessary.  Improve\n+\thandling of asms and unspecs.\n+\t(delete_insn_bb): Only delete INSNs, CALL_INSNs or JUMP_INSNs.\n+\n 2001-06-29  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* target.h (struct gcc_target): Add comp_type_attributes and"}, {"sha": "1e77cd87ee0fd0a02fe5c9f4fbaf9879c6ce97ab", "filename": "gcc/ssa-dce.c", "status": "modified", "additions": 51, "deletions": 25, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2f6da110c5233aa7bde22e86df7d23a175b05d/gcc%2Fssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2f6da110c5233aa7bde22e86df7d23a175b05d/gcc%2Fssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-dce.c?ref=8f2f6da110c5233aa7bde22e86df7d23a175b05d", "patch": "@@ -113,6 +113,8 @@ static int find_inherently_necessary\n   PARAMS ((rtx current_rtx));\n static int propagate_necessity_through_operand\n   PARAMS ((rtx *current_rtx, void *data));\n+static void note_inherently_necessary_set\n+  PARAMS ((rtx, rtx, void *));\n \f\n /* Unnecessary insns are indicated using insns' in_struct bit.  */\n \n@@ -328,6 +330,31 @@ inherently_necessary_register (current_rtx)\n \t\t       &inherently_necessary_register_1, NULL);\n }\n \n+\n+/* Called via note_stores for each store in an insn.  Note whether\n+   or not a particular store is inherently necessary.  Store a\n+   nonzero value in inherently_necessary_p if such a storeis found.  */\n+   \n+static void\n+note_inherently_necessary_set (dest, set, data)\n+     rtx set;\n+     rtx dest;\n+     void *data;\n+{\n+  int *inherently_necessary_set_p = (int *)data;\n+\n+  while (GET_CODE (dest) == SUBREG\n+\t || GET_CODE (dest) == STRICT_LOW_PART\n+\t || GET_CODE (dest) == ZERO_EXTRACT\n+\t || GET_CODE (dest) == SIGN_EXTRACT)\n+    dest = XEXP (dest, 0);\n+\n+  if (GET_CODE (dest) == MEM\n+      || GET_CODE (dest) == UNSPEC\n+      || GET_CODE (dest) == UNSPEC_VOLATILE)\n+    *inherently_necessary_set_p = 1;\n+}\n+\n /* Mark X as inherently necessary if appropriate.  For example,\n    function calls and storing values into memory are inherently\n    necessary.  This function is to be used with for_each_rtx ().\n@@ -346,39 +373,29 @@ find_inherently_necessary (x)\n     switch (GET_CODE (x))\n       {  \n       case CALL_INSN:\n+\treturn !0;\n       case CODE_LABEL:\n       case NOTE:\n       case BARRIER:\n-\treturn !0;\n+\treturn 0;\n \tbreak;\n       case JUMP_INSN:\n \treturn JUMP_TABLE_DATA_P (x) || computed_jump_p (x) != 0;\n \tbreak;\n       case INSN:\n-\tpattern = PATTERN (x);\n-\tswitch (GET_CODE (pattern))\n-\t  {\n-\t  case SET:\n-\t  case PRE_DEC:\n-\t  case PRE_INC:\n-\t  case POST_DEC:\n-\t  case POST_INC:\n-\t    return GET_CODE (SET_DEST (pattern)) == MEM;\n-\t  case CALL:\n-\t  case RETURN:\n-\t  case USE:\n-\t  case CLOBBER:\n-\t    return !0;\n-\t    break;\n-\t  case ASM_INPUT:\n-\t    /* We treat assembler instructions as inherently\n-\t       necessary, and we hope that its operands do not need to\n-\t       be propagated.  */\n-\t    return !0;\n-\t    break;\n-\t  default:\n-\t    return 0;\n-\t  }\n+\t{\n+\t  int inherently_necessary_set = 0;\n+\t  note_stores (PATTERN (x),\n+\t\t       note_inherently_necessary_set,\n+\t\t       &inherently_necessary_set);\n+\n+\t  /* If we found an inherently necessary set or an asm\n+\t     instruction, then we consider this insn inherently\n+\t     necessary.  */\n+\t  return (inherently_necessary_set\n+\t\t  || GET_CODE (PATTERN (x)) == ASM_INPUT\n+\t\t  || asm_noperands (PATTERN (x)) >= 0);\n+\t}\n       default:\n \t/* Found an impossible insn type.  */\n \tabort();\n@@ -457,6 +474,15 @@ delete_insn_bb (insn)\n   basic_block bb;\n   if (!insn)\n     abort ();\n+\n+  /* Do not actually delete anything that is not an INSN.\n+\n+     We can get here because we only consider INSNs as\n+     potentially necessary.  We leave it to later passes\n+     to remove unnecessary notes, unused labels, etc.  */\n+  if (! INSN_P (insn))\n+    return;\n+\n   bb = BLOCK_FOR_INSN (insn);\n   if (!bb)\n     abort ();"}]}