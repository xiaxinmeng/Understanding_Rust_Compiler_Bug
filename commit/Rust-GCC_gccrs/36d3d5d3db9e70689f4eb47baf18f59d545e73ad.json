{"sha": "36d3d5d3db9e70689f4eb47baf18f59d545e73ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZkM2Q1ZDNkYjllNzA2ODlmNGViNDdiYWYxOGY1OWQ1NDVlNzNhZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-06-16T10:19:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-16T10:19:51Z"}, "message": "sem_util.ads (Indexed_Component_Bit_Offset): Declare.\n\n2016-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_util.ads (Indexed_Component_Bit_Offset): Declare.\n\t* sem_util.adb (Indexed_Component_Bit_Offset): New\n\tfunction returning the offset of an indexed component.\n\t(Has_Compatible_Alignment_Internal): Call it.\n\t* sem_ch13.adb (Offset_Value): New function returning the offset of an\n\tAddress attribute reference from the underlying entity.\n\t(Validate_Address_Clauses): Call it and take the offset into\n\taccount for the size warning.\n\nFrom-SVN: r237511", "tree": {"sha": "6345a720226036cb41895309c44054bab3970883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6345a720226036cb41895309c44054bab3970883"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36d3d5d3db9e70689f4eb47baf18f59d545e73ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d3d5d3db9e70689f4eb47baf18f59d545e73ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36d3d5d3db9e70689f4eb47baf18f59d545e73ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d3d5d3db9e70689f4eb47baf18f59d545e73ad/comments", "author": null, "committer": null, "parents": [{"sha": "3455747810302e0540641aa7df9168443032ea71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3455747810302e0540641aa7df9168443032ea71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3455747810302e0540641aa7df9168443032ea71"}], "stats": {"total": 156, "additions": 139, "deletions": 17}, "files": [{"sha": "d9239fff946b42fea489b72f29aca9c5c70f7a1d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d3d5d3db9e70689f4eb47baf18f59d545e73ad/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d3d5d3db9e70689f4eb47baf18f59d545e73ad/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=36d3d5d3db9e70689f4eb47baf18f59d545e73ad", "patch": "@@ -1,3 +1,14 @@\n+2016-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_util.ads (Indexed_Component_Bit_Offset): Declare.\n+\t* sem_util.adb (Indexed_Component_Bit_Offset): New\n+\tfunction returning the offset of an indexed component.\n+\t(Has_Compatible_Alignment_Internal): Call it.\n+\t* sem_ch13.adb (Offset_Value): New function returning the offset of an\n+\tAddress attribute reference from the underlying entity.\n+\t(Validate_Address_Clauses): Call it and take the offset into\n+\taccount for the size warning.\n+\n 2016-06-16  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* bindgen.adb, exp_util.adb, sem_ch9.adb, sem_util.adb: Minor"}, {"sha": "1d732b9b590e1ca5ec1870f503d3ff4d7501cc88", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 65, "deletions": 2, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d3d5d3db9e70689f4eb47baf18f59d545e73ad/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d3d5d3db9e70689f4eb47baf18f59d545e73ad/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=36d3d5d3db9e70689f4eb47baf18f59d545e73ad", "patch": "@@ -13626,6 +13626,53 @@ package body Sem_Ch13 is\n    ------------------------------\n \n    procedure Validate_Address_Clauses is\n+      function Offset_Value (Expr : Node_Id) return Uint;\n+      --  Given an Address attribute reference, return the value in bits of its\n+      --  offset from the first bit of the underlying entity, or 0 if it is not\n+      --  known at compile time.\n+\n+      ------------------\n+      -- Offset_Value --\n+      ------------------\n+\n+      function Offset_Value (Expr : Node_Id) return Uint is\n+         N   : Node_Id := Prefix (Expr);\n+         Off : Uint;\n+         Val : Uint := Uint_0;\n+\n+      begin\n+         --  Climb the prefix chain and compute the cumulative offset\n+\n+         loop\n+            if Is_Entity_Name (N) then\n+               return Val;\n+\n+            elsif Nkind (N) = N_Selected_Component then\n+               Off := Component_Bit_Offset (Entity (Selector_Name (N)));\n+               if Off /= No_Uint and then Off >= Uint_0 then\n+                  Val := Val + Off;\n+                  N   := Prefix (N);\n+               else\n+                  return Uint_0;\n+               end if;\n+\n+            elsif Nkind (N) = N_Indexed_Component then\n+               Off := Indexed_Component_Bit_Offset (N);\n+               if Off /= No_Uint then\n+                  Val := Val + Off;\n+                  N   := Prefix (N);\n+               else\n+                  return Uint_0;\n+               end if;\n+\n+            else\n+               return Uint_0;\n+            end if;\n+         end loop;\n+      end Offset_Value;\n+\n+   --  Start of processing for Validate_Address_Clauses\n+\n    begin\n       for J in Address_Clause_Checks.First .. Address_Clause_Checks.Last loop\n          declare\n@@ -13640,6 +13687,8 @@ package body Sem_Ch13 is\n             X_Size : Uint;\n             Y_Size : Uint;\n \n+            X_Offs : Uint;\n+\n          begin\n             --  Skip processing of this entry if warning already posted\n \n@@ -13651,16 +13700,25 @@ package body Sem_Ch13 is\n                X_Alignment := Alignment (ACCR.X);\n                Y_Alignment := Alignment (ACCR.Y);\n \n-               --  Similarly obtain sizes\n+               --  Similarly obtain sizes and offset\n \n                X_Size := Esize (ACCR.X);\n                Y_Size := Esize (ACCR.Y);\n \n+               if ACCR.Off\n+                 and then Nkind (Expr) = N_Attribute_Reference\n+                 and then Attribute_Name (Expr) = Name_Address\n+               then\n+                  X_Offs := Offset_Value (Expr);\n+               else\n+                  X_Offs := Uint_0;\n+               end if;\n+\n                --  Check for large object overlaying smaller one\n \n                if Y_Size > Uint_0\n                  and then X_Size > Uint_0\n-                 and then X_Size > Y_Size\n+                 and then X_Offs + X_Size > Y_Size\n                then\n                   Error_Msg_NE (\"??& overlays smaller object\", ACCR.N, ACCR.X);\n                   Error_Msg_N\n@@ -13672,6 +13730,11 @@ package body Sem_Ch13 is\n                   Error_Msg_Uint_1 := Y_Size;\n                   Error_Msg_NE (\"\\??size of & is ^\", ACCR.N, ACCR.Y);\n \n+                  if X_Offs /= Uint_0 then\n+                     Error_Msg_Uint_1 := X_Offs;\n+                     Error_Msg_NE (\"\\??and offset of & is ^\", ACCR.N, ACCR.X);\n+                  end if;\n+\n                --  Check for inadequate alignment, both of the base object\n                --  and of the offset, if any. We only do this check if the\n                --  run-time Alignment_Check is active. No point in warning"}, {"sha": "014d86ad2ce9d12924a269f2c59a8b8928512996", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 57, "deletions": 15, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d3d5d3db9e70689f4eb47baf18f59d545e73ad/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d3d5d3db9e70689f4eb47baf18f59d545e73ad/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=36d3d5d3db9e70689f4eb47baf18f59d545e73ad", "patch": "@@ -8780,7 +8780,6 @@ package body Sem_Util is\n          elsif Nkind (Expr) = N_Indexed_Component then\n             declare\n                Typ : constant Entity_Id := Etype (Prefix (Expr));\n-               Ind : constant Node_Id   := First_Index (Typ);\n \n             begin\n                --  Packing generates unknown alignment if layout is not done\n@@ -8789,22 +8788,12 @@ package body Sem_Util is\n                   Set_Result (Unknown);\n                end if;\n \n-               --  Check prefix and component offset\n+               --  Check prefix and component offset (or at least size)\n \n                Check_Prefix;\n-               Offs := Component_Size (Typ);\n-\n-               --  Small optimization: compute the full offset when possible\n-\n-               if Offs /= No_Uint\n-                 and then Offs > Uint_0\n-                 and then Present (Ind)\n-                 and then Nkind (Ind) = N_Range\n-                 and then Compile_Time_Known_Value (Low_Bound (Ind))\n-                 and then Compile_Time_Known_Value (First (Expressions (Expr)))\n-               then\n-                  Offs := Offs * (Expr_Value (First (Expressions (Expr)))\n-                                    - Expr_Value (Low_Bound ((Ind))));\n+               Offs := Indexed_Component_Bit_Offset (Expr);\n+               if Offs = No_Uint then\n+                  Offs := Component_Size (Typ);\n                end if;\n             end;\n          end if;\n@@ -11064,6 +11053,59 @@ package body Sem_Util is\n       return Empty;\n    end Incomplete_Or_Partial_View;\n \n+   ----------------------------------\n+   -- Indexed_Component_Bit_Offset --\n+   ----------------------------------\n+\n+   function Indexed_Component_Bit_Offset (N : Node_Id) return Uint is\n+      Exp : constant Node_Id   := First (Expressions (N));\n+      Typ : constant Entity_Id := Etype (Prefix (N));\n+      Off : constant Uint      := Component_Size (Typ);\n+      Ind : Node_Id;\n+\n+   begin\n+      --  Return early if the component size is not known or variable\n+\n+      if Off = No_Uint or else Off < Uint_0 then\n+         return No_Uint;\n+      end if;\n+\n+      --  Deal with the degenerate case of an empty component\n+\n+      if Off = Uint_0 then\n+         return Off;\n+      end if;\n+\n+      --  Check that both the index value and the low bound are known\n+\n+      if not Compile_Time_Known_Value (Exp) then\n+         return No_Uint;\n+      end if;\n+\n+      Ind := First_Index (Typ);\n+      if No (Ind) then\n+         return No_Uint;\n+      end if;\n+\n+      if Nkind (Ind) = N_Subtype_Indication then\n+         Ind := Constraint (Ind);\n+\n+         if Nkind (Ind) = N_Range_Constraint then\n+            Ind := Range_Expression (Ind);\n+         end if;\n+      end if;\n+\n+      if Nkind (Ind) /= N_Range\n+        or else not Compile_Time_Known_Value (Low_Bound (Ind))\n+      then\n+         return No_Uint;\n+      end if;\n+\n+      --  Return the scaled offset\n+\n+      return Off * (Expr_Value (Exp) - Expr_Value (Low_Bound ((Ind))));\n+   end Indexed_Component_Bit_Offset;\n+\n    -----------------------------------------\n    -- Inherit_Default_Init_Cond_Procedure --\n    -----------------------------------------"}, {"sha": "503c5eb96e580f621e2e54f21b9a6a4bb764645d", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d3d5d3db9e70689f4eb47baf18f59d545e73ad/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d3d5d3db9e70689f4eb47baf18f59d545e73ad/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=36d3d5d3db9e70689f4eb47baf18f59d545e73ad", "patch": "@@ -1232,6 +1232,12 @@ package Sem_Util is\n    --  partial view of the same entity. Note that Id may not have a partial\n    --  view in which case the function returns Empty.\n \n+   function Indexed_Component_Bit_Offset (N : Node_Id) return Uint;\n+   --  Given an N_Indexed_Component node, return the first bit position of the\n+   --  component if it is known at compile time. A value of No_Uint means that\n+   --  either the value is not yet known before back-end processing or it is\n+   --  not known at compile time after back-end processing.\n+\n    procedure Inherit_Default_Init_Cond_Procedure (Typ : Entity_Id);\n    --  Inherit the default initial condition procedure from the parent type of\n    --  derived type Typ."}]}