{"sha": "a441dedbc4b244b3223691a18aec8316bab940f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ0MWRlZGJjNGIyNDRiMzIyMzY5MWExOGFlYzgzMTZiYWI5NDBmOQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2012-08-16T01:18:01Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2012-08-16T01:18:01Z"}, "message": "rs6000-common.c (rs6000_handle_option): Delete handling for -mno-powerpc and -mpowerpc.\n\n2012-08-15  Segher Boessenkool  <segher@kernel.crashing.org>\n\ngcc/\n\t* common/config/rs6000/rs6000-common.c (rs6000_handle_option):\n\tDelete handling for -mno-powerpc and -mpowerpc.\n\t* config/rs6000/aix43.h (ASM_CPU_SPEC): Similar.\n\t(ASM_DEFAULT_SPEC): Use -mppc instead of -mcom.\n\t* config/rs6000/aix51.h (ASM_CPU_SPEC, ASM_DEFAULT_SPEC): Ditto.\n\t* config/rs6000/aix52.h (TARGET_DEFAULT): Delete MASK_POWERPC.\n\t* config/rs6000/aix53.h (TARGET_DEFAULT): Ditto.\n\t* config/rs6000/aix61.h (TARGET_DEFAULT): Ditto.\n\t* config/rs6000/darwin.h (TARGET_DEFAULT): Ditto.\n\t* config/rs6000/darwin64.h (TARGET_DEFAULT): Ditto.\n\t* config/rs6000/default64.h (TARGET_DEFAULT): Ditto.\n\t* config/rs6000/driver-rs6000.c (asm_names): Delete handling\n\tfor -mcpu=common and -mpowerpc.\n\t* config/rs6000/eabi.h (TARGET_DEFAULT): Delete MASK_POWERPC.\n\t* config/rs6000/eabialtivec.h (TARGET_DEFAULT): Ditto.\n\t* config/rs6000/eabispe.h (TARGET_DEFAULT): Ditto.\n\t* config/rs6000/linuxaltivec.h (TARGET_DEFAULT): Ditto.\n\t* config/rs6000/linuxspe.h (TARGET_DEFAULT): Ditto.\n\t* config/rs6000/rs6000-builtin.def (RS6000_BUILTIN_CFSTRING):\n\tUse RS6000_BTM_ALWAYS instead of RS6000_BTM_POWERPC.\n\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros):\n\tAdjust.\n\t(rs6000_cpu_cpp_builtins): Adjust.\n\t* config/rs6000/rs6000.c (POWERPC_BASE_MASK): Delete MASK_POWERPC.\n\t(rs6000_builtin_mask_calculate): Adjust.\n\t(rs6000_emit_move): Delete code for ! TARGET_POWERPC.\n\t(rs6000_init_libfuncs): Ditto.\n\t(rs6000_output_function_prologue): Ditto.\n\t(rs6000_opt_masks): Delete MASK_POWERPC.\n\t(rs6000_builtin_mask_names): Delete RS6000_BTM_POWERPC.\n\t* config/rs6000/rs6000.h (ASM_CPU_SPEC): Delete handling for\n\t-mpowerpc.\n\t(RS6000_BTM_POWERPC): Delete.\n\t(RS6000_BTM_COMMON): Delete RS6000_BTM_POWERPC.\n\t* config/rs6000/rs6000.md (extendqisi2 patterns): Adjust for\n\tTARGET_POWERPC always on.\n\t(extendqihi2 patterns): Similar.\n\t(various unnamed subtract patterns): Similar.\n\t(bswaphi2 patterns): Similar.\n\t(divmodsi4): Similar.\n\t(udiv<GPR:mode>3): Similar.\n\t(div<GPR:mode>3 patterns): Similar.\n\t(udivmodsi4): Similar.\n\t(mulhcall): Delete.\n\t(mullcall): Delete.\n\t(divss_call): Delete.\n\t(divus_call): Delete.\n\t(quoss_call): Delete.\n\t(quous_call): Delete.\n\t(insvsi patterns): Adjust.\n\t(addsf3 patterns): Adjust.\n\t(subsf3 patterns): Adjust.\n\t(mulsf3 patterns): Adjust.\n\t(divsf3 patterns): Adjust.\n\t(*fmasf4_fpr): Adjust.\n\t(*fmssf4_fpr): Adjust.\n\t(*nfmasf4_fpr): Adjust.\n\t(*nfmssf4_fpr): Adjust.\n\t(*floatunssidf2_internal): Adjust.\n\t(fix_trunc<SFDF:mode>si2_internal): Adjust.\n\t(fctiwz_<SFDF:mode>): Adjust.\n\t(mulsidi3 patterns): Adjust.\n\t(smulsi3_highpart patterns): Adjust.\n\t(umulsi3_highpart patterns): Adjust.\n\t(fix_trunctfsi2 patterns): Adjust.\n\t(prefetch): Adjust.\n\t* config/rs6000/rs6000.opt (mpowerpc): Replace by stub option.\n\t(mno-powerpc): Delete.\n\t* config/rs6000/sync.md (load_locked<ATOMIC:mode>): Adjust.\n\t(store_conditional<ATOMIC:mode>): Adjust.\n\t(atomic_compare_and_swap<ATOMIC:mode>): Adjust.\n\t(atomic_exchange<ATOMIC:mode>): Adjust.\n\t(atomic_<fetchop_name><ATOMIC:mode>): Adjust.\n\t(atomic_nand<ATOMIC:mode>): Adjust.\n\t(atomic_fetch_<fetchop_name><ATOMIC:mode>): Adjust.\n\t(atomic_fetch_nand<ATOMIC:mode>): Adjust.\n\t(atomic_<fetchop_name>_fetch<ATOMIC:mode>): Adjust.\n\t(atomic_nand_fetch<ATOMIC:mode>): Adjust.\n\t* config/rs6000/sysv4.h (TARGET_DEFAULT): Delete MASK_POWERPC.\n\t* config/rs6000/sysv4le.h (TARGET_DEFAULT): Ditto.\n\t* config/rs6000/vxworks.h (TARGET_DEFAULT): Ditto.\n\t* doc/invoke.texi: Adjust documentation.\n\nFrom-SVN: r190430", "tree": {"sha": "576df62a7198804298d854916a56340944633b09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/576df62a7198804298d854916a56340944633b09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a441dedbc4b244b3223691a18aec8316bab940f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a441dedbc4b244b3223691a18aec8316bab940f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a441dedbc4b244b3223691a18aec8316bab940f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a441dedbc4b244b3223691a18aec8316bab940f9/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b7052212dacd2d5da62583549085f5b8b5334d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7052212dacd2d5da62583549085f5b8b5334d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b7052212dacd2d5da62583549085f5b8b5334d6"}], "stats": {"total": 778, "additions": 199, "deletions": 579}, "files": [{"sha": "496ef952c157a348c78c9a452fb988f539bfaa75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 86, "deletions": 1, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -1,4 +1,89 @@\n-2012-08-15  Segher Boessenkool <segher@kernel.crashing.org>\n+2012-08-15  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* common/config/rs6000/rs6000-common.c (rs6000_handle_option):\n+\tDelete handling for -mno-powerpc and -mpowerpc.\n+\t* config/rs6000/aix43.h (ASM_CPU_SPEC): Similar.\n+\t(ASM_DEFAULT_SPEC): Use -mppc instead of -mcom.\n+\t* config/rs6000/aix51.h (ASM_CPU_SPEC, ASM_DEFAULT_SPEC): Ditto.\n+\t* config/rs6000/aix52.h (TARGET_DEFAULT): Delete MASK_POWERPC.\n+\t* config/rs6000/aix53.h (TARGET_DEFAULT): Ditto.\n+\t* config/rs6000/aix61.h (TARGET_DEFAULT): Ditto.\n+\t* config/rs6000/darwin.h (TARGET_DEFAULT): Ditto.\n+\t* config/rs6000/darwin64.h (TARGET_DEFAULT): Ditto.\n+\t* config/rs6000/default64.h (TARGET_DEFAULT): Ditto.\n+\t* config/rs6000/driver-rs6000.c (asm_names): Delete handling\n+\tfor -mcpu=common and -mpowerpc.\n+\t* config/rs6000/eabi.h (TARGET_DEFAULT): Delete MASK_POWERPC.\n+\t* config/rs6000/eabialtivec.h (TARGET_DEFAULT): Ditto.\n+\t* config/rs6000/eabispe.h (TARGET_DEFAULT): Ditto.\n+\t* config/rs6000/linuxaltivec.h (TARGET_DEFAULT): Ditto.\n+\t* config/rs6000/linuxspe.h (TARGET_DEFAULT): Ditto.\n+\t* config/rs6000/rs6000-builtin.def (RS6000_BUILTIN_CFSTRING):\n+\tUse RS6000_BTM_ALWAYS instead of RS6000_BTM_POWERPC.\n+\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros):\n+\tAdjust.\n+\t(rs6000_cpu_cpp_builtins): Adjust.\n+\t* config/rs6000/rs6000.c (POWERPC_BASE_MASK): Delete MASK_POWERPC.\n+\t(rs6000_builtin_mask_calculate): Adjust.\n+\t(rs6000_emit_move): Delete code for ! TARGET_POWERPC.\n+\t(rs6000_init_libfuncs): Ditto.\n+\t(rs6000_output_function_prologue): Ditto.\n+\t(rs6000_opt_masks): Delete MASK_POWERPC.\n+\t(rs6000_builtin_mask_names): Delete RS6000_BTM_POWERPC.\n+\t* config/rs6000/rs6000.h (ASM_CPU_SPEC): Delete handling for\n+\t-mpowerpc.\n+\t(RS6000_BTM_POWERPC): Delete.\n+\t(RS6000_BTM_COMMON): Delete RS6000_BTM_POWERPC.\n+\t* config/rs6000/rs6000.md (extendqisi2 patterns): Adjust for\n+\tTARGET_POWERPC always on.\n+\t(extendqihi2 patterns): Similar.\n+\t(various unnamed subtract patterns): Similar.\n+\t(bswaphi2 patterns): Similar.\n+\t(divmodsi4): Similar.\n+\t(udiv<GPR:mode>3): Similar.\n+\t(div<GPR:mode>3 patterns): Similar.\n+\t(udivmodsi4): Similar.\n+\t(mulhcall): Delete.\n+\t(mullcall): Delete.\n+\t(divss_call): Delete.\n+\t(divus_call): Delete.\n+\t(quoss_call): Delete.\n+\t(quous_call): Delete.\n+\t(insvsi patterns): Adjust.\n+\t(addsf3 patterns): Adjust.\n+\t(subsf3 patterns): Adjust.\n+\t(mulsf3 patterns): Adjust.\n+\t(divsf3 patterns): Adjust.\n+\t(*fmasf4_fpr): Adjust.\n+\t(*fmssf4_fpr): Adjust.\n+\t(*nfmasf4_fpr): Adjust.\n+\t(*nfmssf4_fpr): Adjust.\n+\t(*floatunssidf2_internal): Adjust.\n+\t(fix_trunc<SFDF:mode>si2_internal): Adjust.\n+\t(fctiwz_<SFDF:mode>): Adjust.\n+\t(mulsidi3 patterns): Adjust.\n+\t(smulsi3_highpart patterns): Adjust.\n+\t(umulsi3_highpart patterns): Adjust.\n+\t(fix_trunctfsi2 patterns): Adjust.\n+\t(prefetch): Adjust.\n+\t* config/rs6000/rs6000.opt (mpowerpc): Replace by stub option.\n+\t(mno-powerpc): Delete.\n+\t* config/rs6000/sync.md (load_locked<ATOMIC:mode>): Adjust.\n+\t(store_conditional<ATOMIC:mode>): Adjust.\n+\t(atomic_compare_and_swap<ATOMIC:mode>): Adjust.\n+\t(atomic_exchange<ATOMIC:mode>): Adjust.\n+\t(atomic_<fetchop_name><ATOMIC:mode>): Adjust.\n+\t(atomic_nand<ATOMIC:mode>): Adjust.\n+\t(atomic_fetch_<fetchop_name><ATOMIC:mode>): Adjust.\n+\t(atomic_fetch_nand<ATOMIC:mode>): Adjust.\n+\t(atomic_<fetchop_name>_fetch<ATOMIC:mode>): Adjust.\n+\t(atomic_nand_fetch<ATOMIC:mode>): Adjust.\n+\t* config/rs6000/sysv4.h (TARGET_DEFAULT): Delete MASK_POWERPC.\n+\t* config/rs6000/sysv4le.h (TARGET_DEFAULT): Ditto.\n+\t* config/rs6000/vxworks.h (TARGET_DEFAULT): Ditto.\n+\t* doc/invoke.texi: Adjust documentation.\n+\n+2012-08-15  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.h (RS6000_BTM_ALWAYS): New.\n "}, {"sha": "c903ba3983da40d6e41c66d3f1d48af0e0d3bf55", "filename": "gcc/common/config/rs6000/rs6000-common.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -81,12 +81,6 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \n   switch (code)\n     {\n-    case OPT_mno_powerpc:\n-      opts->x_target_flags &= ~(MASK_POWERPC | MASK_PPC_GPOPT\n-\t\t\t\t| MASK_PPC_GFXOPT | MASK_POWERPC64);\n-      opts_set->x_target_flags |= (MASK_POWERPC | MASK_PPC_GPOPT\n-\t\t\t\t   | MASK_PPC_GFXOPT | MASK_POWERPC64);\n-      break;\n     case OPT_mfull_toc:\n       opts->x_target_flags &= ~MASK_MINIMAL_TOC;\n       opts->x_TARGET_NO_FP_IN_TOC = 0;\n@@ -113,9 +107,9 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n #else\n     case OPT_m64:\n #endif\n-      opts->x_target_flags |= MASK_POWERPC64 | MASK_POWERPC;\n+      opts->x_target_flags |= MASK_POWERPC64;\n       opts->x_target_flags |= ~opts_set->x_target_flags & MASK_PPC_GFXOPT;\n-      opts_set->x_target_flags |= MASK_POWERPC64 | MASK_POWERPC;\n+      opts_set->x_target_flags |= MASK_POWERPC64;\n       break;\n \n #ifdef TARGET_USES_AIX64_OPT\n@@ -137,11 +131,6 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \n     case OPT_mpowerpc_gpopt:\n     case OPT_mpowerpc_gfxopt:\n-      if (value == 1)\n-\t{\n-\t  opts->x_target_flags |= MASK_POWERPC;\n-\t  opts_set->x_target_flags |= MASK_POWERPC;\n-\t}\n       break;\n \n     case OPT_mdebug_:"}, {"sha": "e4863ef455e86e71d2c8e4ec1795f7ca07918610", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -49,10 +49,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_CPU_SPEC\n #define ASM_CPU_SPEC \\\n \"%{!mcpu*: %{!maix64: \\\n-  %{mpowerpc*: %{!mpowerpc64: -mppc}} \\\n-  %{mpowerpc64: -mppc64} \\\n-  %{!mpower*: %{!mpowerpc*: %(asm_default)}}}} \\\n-%{mcpu=common: -mcom} \\\n+  %{!mpowerpc64: -mppc} \\\n+  %{mpowerpc64: -mppc64}}} \\\n %{mcpu=power3: -m620} \\\n %{mcpu=power4: -m620} \\\n %{mcpu=powerpc: -mppc} \\\n@@ -67,7 +65,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{mcpu=630: -m620}\"\n \n #undef\tASM_DEFAULT_SPEC\n-#define ASM_DEFAULT_SPEC \"-mcom\"\n+#define ASM_DEFAULT_SPEC \"-mppc\"\n \n #undef TARGET_OS_CPP_BUILTINS\n #define TARGET_OS_CPP_BUILTINS()     \\"}, {"sha": "effd278f2df2ee4cc6b6770f54f39842a8a5f40b", "filename": "gcc/config/rs6000/aix51.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Faix51.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Faix51.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix51.h?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -43,10 +43,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_CPU_SPEC\n #define ASM_CPU_SPEC \\\n \"%{!mcpu*: %{!maix64: \\\n-  %{mpowerpc*: %{!mpowerpc64: -mppc}} \\\n-  %{mpowerpc64: -mppc64} \\\n-  %{!mpower*: %{!mpowerpc*: %(asm_default)}}}} \\\n-%{mcpu=common: -mcom} \\\n+  %{!mpowerpc64: -mppc} \\\n+  %{mpowerpc64: -mppc64}}} \\\n %{mcpu=power3: -m620} \\\n %{mcpu=power4: -m620} \\\n %{mcpu=powerpc: -mppc} \\\n@@ -63,7 +61,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{mcpu=G5: -m620}\"\n \n #undef\tASM_DEFAULT_SPEC\n-#define ASM_DEFAULT_SPEC \"-mcom\"\n+#define ASM_DEFAULT_SPEC \"-mppc\"\n \n #undef TARGET_OS_CPP_BUILTINS\n #define TARGET_OS_CPP_BUILTINS()     \\"}, {"sha": "a5f1ca7a02ca60a7b66d0bf530279fec1722b781", "filename": "gcc/config/rs6000/aix52.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Faix52.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Faix52.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix52.h?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -99,7 +99,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    %{pthread: -D_THREAD_SAFE}\"\n \n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS)\n+#define TARGET_DEFAULT MASK_NEW_MNEMONICS\n \n #undef  PROCESSOR_DEFAULT\n #define PROCESSOR_DEFAULT PROCESSOR_POWER4"}, {"sha": "5c72d5712f7ddeaf40b98fd4492d730d78c5b647", "filename": "gcc/config/rs6000/aix53.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Faix53.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Faix53.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix53.h?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -105,7 +105,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    %{pthread: -D_THREAD_SAFE}\"\n \n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS)\n+#define TARGET_DEFAULT MASK_NEW_MNEMONICS\n \n #undef  PROCESSOR_DEFAULT\n #define PROCESSOR_DEFAULT PROCESSOR_POWER5"}, {"sha": "c9a89fb55eae1c21b031ff4d4ed3f00e1ad0cd73", "filename": "gcc/config/rs6000/aix61.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Faix61.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Faix61.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix61.h?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -106,7 +106,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    %{pthread: -D_THREAD_SAFE}\"\n \n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS)\n+#define TARGET_DEFAULT MASK_NEW_MNEMONICS\n \n #undef  PROCESSOR_DEFAULT\n #define PROCESSOR_DEFAULT PROCESSOR_POWER7"}, {"sha": "13d53f5bc3ec77fa4d7271a24d0f18cf532283c8", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -280,8 +280,7 @@ extern int darwin_emit_branch_islands;\n    default as well.  */\n \n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_POWERPC | MASK_MULTIPLE | MASK_NEW_MNEMONICS \\\n-                      | MASK_PPC_GFXOPT)\n+#define TARGET_DEFAULT (MASK_MULTIPLE | MASK_NEW_MNEMONICS | MASK_PPC_GFXOPT)\n \n /* Darwin only runs on PowerPC, so short-circuit POWER patterns.  */\n #undef  TARGET_IEEEQUAD"}, {"sha": "9b0e25751c3b8a249a6eb7f6ef38b69d94ea62d8", "filename": "gcc/config/rs6000/darwin64.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Fdarwin64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Fdarwin64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin64.h?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -1,5 +1,5 @@\n /* Target definitions for PowerPC running Darwin (Mac OS X).\n-   Copyright (C) 2006, 2007, 2010, 2011 Free Software Foundation, Inc.\n+   Copyright (C) 2006-2012 Free Software Foundation, Inc.\n    Contributed by Apple Computer Inc.\n \n    This file is part of GCC.\n@@ -19,7 +19,7 @@\n    <http://www.gnu.org/licenses/>.  */\n \n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_POWERPC | MASK_POWERPC64 | MASK_64BIT \\\n+#define TARGET_DEFAULT (MASK_POWERPC64 | MASK_64BIT \\\n \t\t\t| MASK_MULTIPLE\t| MASK_NEW_MNEMONICS | MASK_PPC_GFXOPT)\n \n #undef DARWIN_ARCH_SPEC"}, {"sha": "8de31b4f16dc684b2d207c13be4d36c23dec161e", "filename": "gcc/config/rs6000/default64.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Fdefault64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Fdefault64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdefault64.h?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for 64 bit powerpc linux defaulting to -m64.\n-   Copyright (C) 2003, 2005, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2003-2012 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -20,5 +20,4 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n-  (MASK_POWERPC | MASK_PPC_GFXOPT | \\\n-   MASK_POWERPC64 | MASK_64BIT | MASK_NEW_MNEMONICS)\n+  (MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_64BIT | MASK_NEW_MNEMONICS)"}, {"sha": "5f24ee7d23d4cc5937099cb03a6c756d2a1b3e92", "filename": "gcc/config/rs6000/driver-rs6000.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -371,7 +371,6 @@ static const struct asm_name asm_names[] = {\n %{!maltivec: %{!mpowerpc64: %(asm_default)}}}\" },\n \n #else\n-  { \"common\",\t\"-mcom\" },\n   { \"cell\",\t\"-mcell\" },\n   { \"power3\",\t\"-mppc64\" },\n   { \"power4\",\t\"-mpower4\" },\n@@ -419,8 +418,7 @@ static const struct asm_name asm_names[] = {\n   { \"e500mc\",\t\"-me500mc\" },\n   { NULL,\t\"\\\n %{mpowerpc64*: -mppc64} \\\n-%{!mpowerpc64*: %{mpowerpc*: -mppc}} \\\n-%{!mpowerpc*: %(asm_default)}\" },\n+%{!mpowerpc64*: %(asm_default)}\" },\n #endif\n };\n "}, {"sha": "d97d12e80b45b3326b327f94b2e426ac9539a447", "filename": "gcc/config/rs6000/eabi.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Feabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Feabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.h?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -1,7 +1,6 @@\n /* Core target definitions for GNU compiler\n    for IBM RS/6000 PowerPC targeted to embedded ELF systems.\n-   Copyright (C) 1995, 1996, 2000, 2003, 2004, 2007, 2011\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1995-2012 Free Software Foundation, Inc.\n    Contributed by Cygnus Support.\n \n    This file is part of GCC.\n@@ -22,7 +21,7 @@\n \n /* Add -meabi to target flags.  */\n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_EABI)\n+#define TARGET_DEFAULT (MASK_NEW_MNEMONICS | MASK_EABI)\n \n /* Invoke an initializer function to set up the GOT.  */\n #define NAME__MAIN \"__eabi\""}, {"sha": "af15632018266805dbc8a2ced7ee3cc12424cf61", "filename": "gcc/config/rs6000/eabialtivec.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Feabialtivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Feabialtivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabialtivec.h?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -1,6 +1,6 @@\n /* Core target definitions for GNU compiler\n    for PowerPC targeted systems with AltiVec support.\n-   Copyright (C) 2001, 2003, 2007, 2011 Free Software Foundation, Inc.\n+   Copyright (C) 2001-2012 Free Software Foundation, Inc.\n    Contributed by Aldy Hernandez (aldyh@redhat.com).\n \n    This file is part of GCC.\n@@ -21,7 +21,7 @@\n \n /* Add -meabi and -maltivec to target flags.  */\n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_EABI | MASK_ALTIVEC)\n+#define TARGET_DEFAULT (MASK_NEW_MNEMONICS | MASK_EABI | MASK_ALTIVEC)\n \n #undef  SUBSUBTARGET_OVERRIDE_OPTIONS\n #define SUBSUBTARGET_OVERRIDE_OPTIONS\trs6000_altivec_abi = 1"}, {"sha": "4fdaf9a6e5f2242b25e237bc7e1ef99168a785fa", "filename": "gcc/config/rs6000/eabispe.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Feabispe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Feabispe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabispe.h?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -1,7 +1,6 @@\n /* Core target definitions for GNU compiler\n    for PowerPC embedded targeted systems with SPE support.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2011\n-   Free Software Foundation, Inc.\n+   Copyright (C) 2002-2012 Free Software Foundation, Inc.\n    Contributed by Aldy Hernandez (aldyh@redhat.com).\n \n    This file is part of GCC.\n@@ -21,8 +20,7 @@\n    <http://www.gnu.org/licenses/>.  */\n \n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT \\\n-  (MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_STRICT_ALIGN | MASK_EABI)\n+#define TARGET_DEFAULT (MASK_NEW_MNEMONICS | MASK_STRICT_ALIGN | MASK_EABI)\n \n #undef  ASM_DEFAULT_SPEC\n #define\tASM_DEFAULT_SPEC \"-mppc -mspe -me500\""}, {"sha": "c2396fe7c4564c2422ae131d78e30f52e17bdef8", "filename": "gcc/config/rs6000/linuxaltivec.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Flinuxaltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Flinuxaltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinuxaltivec.h?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for AltiVec enhanced PowerPC machines running GNU/Linux.\n-   Copyright (C) 2001, 2003, 2007, 2011 Free Software Foundation, Inc.\n+   Copyright (C) 2001-2012 Free Software Foundation, Inc.\n    Contributed by Aldy Hernandez (aldyh@redhat.com).\n \n    This file is part of GCC.\n@@ -21,7 +21,7 @@\n \n /* Override rs6000.h and sysv4.h definition.  */\n #undef\tTARGET_DEFAULT\n-#define\tTARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_ALTIVEC)\n+#define\tTARGET_DEFAULT (MASK_NEW_MNEMONICS | MASK_ALTIVEC)\n \n #undef  SUBSUBTARGET_OVERRIDE_OPTIONS\n #define SUBSUBTARGET_OVERRIDE_OPTIONS rs6000_altivec_abi = 1"}, {"sha": "e79ee6708ad4066847e5af97ab591709d8247afa", "filename": "gcc/config/rs6000/linuxspe.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Flinuxspe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Flinuxspe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinuxspe.h?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -1,7 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for PowerPC e500 machines running GNU/Linux.\n-   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2011\n-   Free Software Foundation, Inc.\n+   Copyright (C) 2003-2012 Free Software Foundation, Inc.\n    Contributed by Aldy Hernandez (aldy@quesejoda.com).\n \n    This file is part of GCC.\n@@ -22,8 +21,7 @@\n \n /* Override rs6000.h and sysv4.h definition.  */\n #undef\tTARGET_DEFAULT\n-#define TARGET_DEFAULT \\\n-  (MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_STRICT_ALIGN)\n+#define TARGET_DEFAULT (MASK_NEW_MNEMONICS | MASK_STRICT_ALIGN)\n \n #undef  ASM_DEFAULT_SPEC\n #define\tASM_DEFAULT_SPEC \"-mppc -mspe -me500\""}, {"sha": "c8f8f86f4178de4608a8b8aa44c41fc99f0729ca", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -1,6 +1,5 @@\n /* Builtin functions for rs6000/powerpc.\n-   Copyright (C) 2009, 2010, 2011\n-   Free Software Foundation, Inc.\n+   Copyright (C) 2009-2012 Free Software Foundation, Inc.\n    Contributed by Michael Meissner (meissner@linux.vnet.ibm.com)\n \n    This file is part of GCC.\n@@ -1431,5 +1430,5 @@ BU_SPECIAL_X (RS6000_BUILTIN_RSQRTF, \"__builtin_rsqrtf\", RS6000_BTM_FRSQRTES,\n \t      RS6000_BTC_FP)\n \n /* Darwin CfString builtin.  */\n-BU_SPECIAL_X (RS6000_BUILTIN_CFSTRING, \"__builtin_cfstring\", RS6000_BTM_POWERPC,\n+BU_SPECIAL_X (RS6000_BUILTIN_CFSTRING, \"__builtin_cfstring\", RS6000_BTM_ALWAYS,\n \t      RS6000_BTC_MISC)"}, {"sha": "a2ef08e17cae4c2167fcd82d56aa765a28abf48c", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -293,8 +293,7 @@ rs6000_target_modify_macros (bool define_p, int flags, unsigned bu_mask)\n \t     (unsigned) flags, bu_mask);\n \n   /* target_flags based options.  */\n-  if ((flags & MASK_POWERPC) != 0)\n-    rs6000_define_or_undefine_macro (define_p, \"_ARCH_PPC\");\n+  rs6000_define_or_undefine_macro (define_p, \"_ARCH_PPC\");\n   if ((flags & MASK_PPC_GPOPT) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PPCSQ\");\n   if ((flags & MASK_PPC_GFXOPT) != 0)\n@@ -346,10 +345,6 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n   rs6000_target_modify_macros (true, target_flags,\n \t\t\t       rs6000_builtin_mask_calculate ());\n \n-  /* _ARCH_COM does not fit in the framework of target_modify_macros, so handle\n-     it specially.  */\n-  if (! TARGET_POWERPC)\n-    builtin_define (\"_ARCH_COM\");\n   if (TARGET_FRE)\n     builtin_define (\"__RECIP__\");\n   if (TARGET_FRES)"}, {"sha": "d979b30143fffbe3f42a8577e9275c1ce9ac6108", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -1457,7 +1457,7 @@ static const struct attribute_spec rs6000_attribute_table[] =\n /* Simplifications for entries below.  */\n \n enum {\n-  POWERPC_BASE_MASK = MASK_POWERPC | MASK_NEW_MNEMONICS,\n+  POWERPC_BASE_MASK = MASK_NEW_MNEMONICS,\n   POWERPC_7400_MASK = POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_ALTIVEC\n };\n \n@@ -2362,7 +2362,6 @@ rs6000_builtin_mask_calculate (void)\n \t  | ((TARGET_FRSQRTE)\t\t    ? RS6000_BTM_FRSQRTE  : 0)\n \t  | ((TARGET_FRSQRTES)\t\t    ? RS6000_BTM_FRSQRTES : 0)\n \t  | ((TARGET_POPCNTD)\t\t    ? RS6000_BTM_POPCNTD  : 0)\n-\t  | ((TARGET_POWERPC)\t\t    ? RS6000_BTM_POWERPC  : 0)\n \t  | ((rs6000_cpu == PROCESSOR_CELL) ? RS6000_BTM_CELL     : 0));\n }\n \n@@ -6953,32 +6952,6 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n       && !gpc_reg_operand (operands[1], mode))\n     operands[1] = force_reg (mode, operands[1]);\n \n-  if (mode == SFmode && ! TARGET_POWERPC\n-      && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n-      && GET_CODE (operands[0]) == MEM)\n-    {\n-      int regnum;\n-\n-      if (reload_in_progress || reload_completed)\n-\tregnum = true_regnum (operands[1]);\n-      else if (GET_CODE (operands[1]) == REG)\n-\tregnum = REGNO (operands[1]);\n-      else\n-\tregnum = -1;\n-\n-      /* If operands[1] is a register, on POWER it may have\n-\t double-precision data in it, so truncate it to single\n-\t precision.  */\n-      if (FP_REGNO_P (regnum) || regnum >= FIRST_PSEUDO_REGISTER)\n-\t{\n-\t  rtx newreg;\n-\t  newreg = (!can_create_pseudo_p () ? copy_rtx (operands[1])\n-\t\t    : gen_reg_rtx (mode));\n-\t  emit_insn (gen_aux_truncdfsf2 (newreg, operands[1]));\n-\t  operands[1] = newreg;\n-\t}\n-    }\n-\n   /* Recognize the case where operand[1] is a reference to thread-local\n      data and load its address to a register.  */\n   if (rs6000_tls_referenced_p (operands[1]))\n@@ -12685,15 +12658,6 @@ rs6000_common_init_builtins (void)\n static void\n rs6000_init_libfuncs (void)\n {\n-  if (DEFAULT_ABI != ABI_V4 && TARGET_XCOFF && !TARGET_POWERPC)\n-    {\n-      /* AIX library routines for float->int conversion.  */\n-      set_conv_libfunc (sfix_optab, SImode, DFmode, \"__itrunc\");\n-      set_conv_libfunc (ufix_optab, SImode, DFmode, \"__uitrunc\");\n-      set_conv_libfunc (sfix_optab, SImode, TFmode, \"_qitrunc\");\n-      set_conv_libfunc (ufix_optab, SImode, TFmode, \"_quitrunc\");\n-    }\n-\n   if (!TARGET_IEEEQUAD)\n       /* AIX/Darwin/64-bit Linux quad floating point routines.  */\n     if (!TARGET_XL_COMPAT)\n@@ -20305,18 +20269,6 @@ rs6000_output_function_prologue (FILE *file,\n \t}\n     }\n \n-  /* Write .extern for AIX common mode routines, if needed.  */\n-  if (! TARGET_POWERPC && ! common_mode_defined)\n-    {\n-      fputs (\"\\t.extern __mulh\\n\", file);\n-      fputs (\"\\t.extern __mull\\n\", file);\n-      fputs (\"\\t.extern __divss\\n\", file);\n-      fputs (\"\\t.extern __divus\\n\", file);\n-      fputs (\"\\t.extern __quoss\\n\", file);\n-      fputs (\"\\t.extern __quous\\n\", file);\n-      common_mode_defined = 1;\n-    }\n-\n   rs6000_pic_labelno++;\n }\n \n@@ -27419,7 +27371,6 @@ static struct rs6000_opt_mask const rs6000_opt_masks[] =\n #ifdef MASK_STRICT_ALIGN\n   { \"strict-align\",\tMASK_STRICT_ALIGN,\tfalse, false },\n #endif\n-  { \"powerpc\",\t\tMASK_POWERPC,\t\tfalse, false },\n   { \"soft-float\",\tMASK_SOFT_FLOAT,\tfalse, false },\n   { \"string\",\t\tMASK_STRING,\t\tfalse, false },\n };\n@@ -27436,7 +27387,6 @@ static struct rs6000_opt_mask const rs6000_builtin_mask_names[] =\n   { \"frsqrte\",\t\t RS6000_BTM_FRSQRTE,\tfalse, false },\n   { \"frsqrtes\",\t\t RS6000_BTM_FRSQRTES,\tfalse, false },\n   { \"popcntd\",\t\t RS6000_BTM_POPCNTD,\tfalse, false },\n-  { \"powerpc\",\t\t RS6000_BTM_POWERPC,\tfalse, false },\n   { \"cell\",\t\t RS6000_BTM_CELL,\tfalse, false },\n };\n "}, {"sha": "2edf007f0795f27ec8eed2eb150beeea10c5cebf", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -102,10 +102,8 @@\n #define ASM_CPU_SPEC \\\n \"%{!mcpu*: \\\n   %{mpowerpc64*: -mppc64} \\\n-  %{!mpowerpc64*: %{mpowerpc*: -mppc}} \\\n-  %{!mpowerpc*: %(asm_default)}} \\\n+  %{!mpowerpc64*: %(asm_default)}} \\\n %{mcpu=native: %(asm_cpu_native)} \\\n-%{mcpu=common: -mcom} \\\n %{mcpu=cell: -mcell} \\\n %{mcpu=power3: -mppc64} \\\n %{mcpu=power4: -mpower4} \\\n@@ -2312,7 +2310,6 @@ extern int frame_pointer_needed;\n #define RS6000_BTM_FRSQRTE\tMASK_PPC_GFXOPT\t/* FRSQRTE instruction.  */\n #define RS6000_BTM_FRSQRTES\tMASK_POPCNTB\t/* FRSQRTES instruction.  */\n #define RS6000_BTM_POPCNTD\tMASK_POPCNTD\t/* Target supports ISA 2.06.  */\n-#define RS6000_BTM_POWERPC\tMASK_POWERPC\t/* Target is powerpc.  */\n #define RS6000_BTM_CELL\t\tMASK_FPRND\t/* Target is cell powerpc.  */\n \n #define RS6000_BTM_COMMON\t(RS6000_BTM_ALTIVEC\t\t\t\\\n@@ -2322,7 +2319,6 @@ extern int frame_pointer_needed;\n \t\t\t\t | RS6000_BTM_FRSQRTE\t\t\t\\\n \t\t\t\t | RS6000_BTM_FRSQRTES\t\t\t\\\n \t\t\t\t | RS6000_BTM_POPCNTD\t\t\t\\\n-\t\t\t\t | RS6000_BTM_POWERPC\t\t\t\\\n \t\t\t\t | RS6000_BTM_CELL)\n \n /* Define builtin enum index.  */"}, {"sha": "19e3a760b9d4bd2d7c95a154b0a9d21a7b39b91a", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 55, "deletions": 402, "changes": 457, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -652,23 +652,10 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_expand \"extendqisi2\"\n-  [(use (match_operand:SI 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:QI 1 \"gpc_reg_operand\" \"\"))]\n-  \"\"\n-  \"\n-{\n-  if (TARGET_POWERPC)\n-    emit_insn (gen_extendqisi2_ppc (operands[0], operands[1]));\n-  else\n-    emit_insn (gen_extendqisi2_no_power (operands[0], operands[1]));\n-  DONE;\n-}\")\n-\n-(define_insn \"extendqisi2_ppc\"\n+(define_insn \"extendqisi2\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(sign_extend:SI (match_operand:QI 1 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_POWERPC\"\n+  \"\"\n   \"extsb %0,%1\"\n   [(set_attr \"type\" \"exts\")])\n \n@@ -677,7 +664,7 @@\n \t(compare:CC (sign_extend:SI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 2 \"=r,r\"))]\n-  \"TARGET_POWERPC\"\n+  \"\"\n   \"@\n    extsb. %2,%1\n    #\"\n@@ -689,7 +676,7 @@\n \t(compare:CC (sign_extend:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 2 \"\"))]\n-  \"TARGET_POWERPC && reload_completed\"\n+  \"reload_completed\"\n   [(set (match_dup 2)\n \t(sign_extend:SI (match_dup 1)))\n    (set (match_dup 0)\n@@ -703,7 +690,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(sign_extend:SI (match_dup 1)))]\n-  \"TARGET_POWERPC\"\n+  \"\"\n   \"@\n    extsb. %0,%1\n    #\"\n@@ -716,32 +703,14 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(sign_extend:SI (match_dup 1)))]\n-  \"TARGET_POWERPC && reload_completed\"\n+  \"reload_completed\"\n   [(set (match_dup 0)\n \t(sign_extend:SI (match_dup 1)))\n    (set (match_dup 2)\n \t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_expand \"extendqisi2_no_power\"\n-  [(set (match_dup 2)\n-\t(ashift:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\")\n-\t\t   (const_int 24)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(ashiftrt:SI (match_dup 2)\n-\t\t     (const_int 24)))]\n-  \"! TARGET_POWERPC\"\n-  \"\n-{ operands[1] = gen_lowpart (SImode, operands[1]);\n-  operands[2] = gen_reg_rtx (SImode); }\")\n-\n-(define_expand \"zero_extendqihi2\"\n-  [(set (match_operand:HI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"\")))]\n-  \"\"\n-  \"\")\n-\n (define_insn \"\"\n   [(set (match_operand:HI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(zero_extend:HI (match_operand:QI 1 \"reg_or_mem_operand\" \"m,r\")))]\n@@ -803,23 +772,10 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_expand \"extendqihi2\"\n-  [(use (match_operand:HI 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:QI 1 \"gpc_reg_operand\" \"\"))]\n-  \"\"\n-  \"\n-{\n-  if (TARGET_POWERPC)\n-    emit_insn (gen_extendqihi2_ppc (operands[0], operands[1]));\n-  else\n-    emit_insn (gen_extendqihi2_no_power (operands[0], operands[1]));\n-  DONE;\n-}\")\n-\n-(define_insn \"extendqihi2_ppc\"\n+(define_insn \"extendqihi2\"\n   [(set (match_operand:HI 0 \"gpc_reg_operand\" \"=r\")\n \t(sign_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_POWERPC\"\n+  \"\"\n   \"extsb %0,%1\"\n   [(set_attr \"type\" \"exts\")])\n \n@@ -828,7 +784,7 @@\n \t(compare:CC (sign_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:HI 2 \"=r,r\"))]\n-  \"TARGET_POWERPC\"\n+  \"\"\n   \"@\n    extsb. %2,%1\n    #\"\n@@ -840,7 +796,7 @@\n \t(compare:CC (sign_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:HI 2 \"\"))]\n-  \"TARGET_POWERPC && reload_completed\"\n+  \"reload_completed\"\n   [(set (match_dup 2)\n \t(sign_extend:HI (match_dup 1)))\n    (set (match_dup 0)\n@@ -854,7 +810,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:HI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(sign_extend:HI (match_dup 1)))]\n-  \"TARGET_POWERPC\"\n+  \"\"\n   \"@\n    extsb. %0,%1\n    #\"\n@@ -867,27 +823,14 @@\n \t\t    (const_int 0)))\n    (set (match_operand:HI 0 \"gpc_reg_operand\" \"\")\n \t(sign_extend:HI (match_dup 1)))]\n-  \"TARGET_POWERPC && reload_completed\"\n+  \"reload_completed\"\n   [(set (match_dup 0)\n \t(sign_extend:HI (match_dup 1)))\n    (set (match_dup 2)\n \t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_expand \"extendqihi2_no_power\"\n-  [(set (match_dup 2)\n-\t(ashift:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\")\n-\t\t   (const_int 24)))\n-   (set (match_operand:HI 0 \"gpc_reg_operand\" \"\")\n-\t(ashiftrt:SI (match_dup 2)\n-\t\t     (const_int 24)))]\n-  \"! TARGET_POWERPC\"\n-  \"\n-{ operands[0] = gen_lowpart (SImode, operands[0]);\n-  operands[1] = gen_lowpart (SImode, operands[1]);\n-  operands[2] = gen_reg_rtx (SImode); }\")\n-\n (define_expand \"zero_extendhisi2\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(zero_extend:SI (match_operand:HI 1 \"gpc_reg_operand\" \"\")))]\n@@ -1769,42 +1712,22 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(minus:SI (match_operand:SI 1 \"reg_or_short_operand\" \"rI\")\n-\t\t  (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))]\n-  \"! TARGET_POWERPC\"\n-  \"{sf%I1|subf%I1c} %0,%2,%1\")\n-\n (define_insn \"\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r\")\n \t(minus:GPR (match_operand:GPR 1 \"reg_or_short_operand\" \"r,I\")\n \t\t   (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r\")))]\n-  \"TARGET_POWERPC\"\n+  \"\"\n   \"@\n    subf %0,%2,%1\n    subfic %0,%2,%1\")\n \n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (minus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t      (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"! TARGET_POWERPC\"\n-  \"@\n-   {sf.|subfc.} %3,%2,%1\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n \t(compare:CC (minus:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n \t\t\t     (match_operand:P 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:P 3 \"=r,r\"))]\n-  \"TARGET_POWERPC\"\n+  \"\"\n   \"@\n    subf. %3,%2,%1\n    #\"\n@@ -1826,20 +1749,6 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (minus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t      (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(minus:SI (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_POWERPC\"\n-  \"@\n-   {sf.|subfc.} %0,%2,%1\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n (define_insn \"\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n \t(compare:CC (minus:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n@@ -1848,7 +1757,7 @@\n    (set (match_operand:P 0 \"gpc_reg_operand\" \"=r,r\")\n \t(minus:P (match_dup 1)\n \t\t  (match_dup 2)))]\n-  \"TARGET_POWERPC\"\n+  \"\"\n   \"@\n    subf. %0,%2,%1\n    #\"\n@@ -2196,7 +2105,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(zero_extend:SI\n \t (bswap:HI (match_operand:HI 1 \"memory_operand\" \"Z\"))))]\n-  \"TARGET_POWERPC\"\n+  \"\"\n   \"lhbrx %0,%y1\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"load\")])\n@@ -2206,7 +2115,7 @@\n \t\t   (bswap:HI\n \t\t    (match_operand:HI 1 \"reg_or_mem_operand\" \"\")))\n \t      (clobber (match_scratch:SI 2 \"\"))])]\n-  \"TARGET_POWERPC\"\n+  \"\"\n {\n   if (!REG_P (operands[0]) && !REG_P (operands[1]))\n     operands[1] = force_reg (HImode, operands[1]);\n@@ -2217,7 +2126,7 @@\n \t(bswap:HI\n \t (match_operand:HI 1 \"reg_or_mem_operand\" \"Z,r,r\")))\n    (clobber (match_scratch:SI 2 \"=X,X,&r\"))]\n-  \"TARGET_POWERPC\"\n+  \"\"\n   \"@\n    lhbrx %0,%y1\n    sthbrx %1,%y0\n@@ -2229,7 +2138,7 @@\n   [(set (match_operand:HI 0 \"gpc_reg_operand\" \"\")\n \t(bswap:HI (match_operand:HI 1 \"gpc_reg_operand\" \"\")))\n    (clobber (match_operand:SI 2 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_POWERPC && reload_completed\"\n+  \"reload_completed\"\n   [(set (match_dup 3)\n \t(zero_extract:SI (match_dup 4)\n \t\t\t (const_int 8)\n@@ -2704,49 +2613,12 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-;; Operand 1 is divided by operand 2; quotient goes to operand\n-;; 0 and remainder to operand 3.\n-;; ??? At some point, see what, if anything, we can do about if (x % y == 0).\n \n-(define_expand \"divmodsi4\"\n-  [(parallel [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t\t   (div:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"\")))\n-\t      (set (match_operand:SI 3 \"register_operand\" \"\")\n-\t\t   (mod:SI (match_dup 1) (match_dup 2)))])]\n-  \"! TARGET_POWERPC\"\n-  \"\n-{\n-  emit_move_insn (gen_rtx_REG (SImode, 3), operands[1]);\n-  emit_move_insn (gen_rtx_REG (SImode, 4), operands[2]);\n-  emit_insn (gen_divss_call ());\n-  emit_move_insn (operands[0], gen_rtx_REG (SImode, 3));\n-  emit_move_insn (operands[3], gen_rtx_REG (SImode, 4));\n-  DONE;\n-}\")\n-\n-(define_expand \"udiv<mode>3\"\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n-        (udiv:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n-\t\t  (match_operand:GPR 2 \"gpc_reg_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  if (! TARGET_POWERPC)\n-    {\n-      emit_move_insn (gen_rtx_REG (SImode, 3), operands[1]);\n-      emit_move_insn (gen_rtx_REG (SImode, 4), operands[2]);\n-      emit_insn (gen_quous_call ());\n-      emit_move_insn (operands[0], gen_rtx_REG (SImode, 3));\n-      DONE;\n-    }\n-}\")\n-\n-(define_insn \"*udivsi3\"\n+(define_insn \"udiv<mode>3\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n         (udiv:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n \t\t  (match_operand:GPR 2 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_POWERPC\"\n+  \"\"\n   \"div<wd>u %0,%1,%2\"\n    [(set (attr \"type\")\n       (cond [(match_operand:SI 0 \"\" \"\")\n@@ -2756,37 +2628,24 @@\n \n ;; For powers of two we can do srai/aze for divide and then adjust for\n ;; modulus.  If it isn't a power of two, force operands into register and do\n-;; a normal divide; for AIX common-mode, use quoss call on register operands.\n+;; a normal divide.\n (define_expand \"div<mode>3\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n \t(div:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n \t\t (match_operand:GPR 2 \"reg_or_cint_operand\" \"\")))]\n   \"\"\n-  \"\n {\n-  if (GET_CODE (operands[2]) == CONST_INT\n-      && INTVAL (operands[2]) > 0\n-      && exact_log2 (INTVAL (operands[2])) >= 0)\n-    ;\n-  else if (TARGET_POWERPC)\n-    {\n-      operands[2] = force_reg (<MODE>mode, operands[2]);\n-    }\n-  else\n-    {\n-      emit_move_insn (gen_rtx_REG (SImode, 3), operands[1]);\n-      emit_move_insn (gen_rtx_REG (SImode, 4), operands[2]);\n-      emit_insn (gen_quoss_call ());\n-      emit_move_insn (operands[0], gen_rtx_REG (SImode, 3));\n-      DONE;\n-    }\n-}\")\n+  if (GET_CODE (operands[2]) != CONST_INT\n+      || INTVAL (operands[2]) <= 0\n+      || exact_log2 (INTVAL (operands[2])) < 0)\n+    operands[2] = force_reg (<MODE>mode, operands[2]);\n+})\n \n-(define_insn \"*div<mode>3_no_mq\"\n+(define_insn \"*div<mode>3\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n         (div:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n \t\t (match_operand:GPR 2 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_POWERPC\"\n+  \"\"\n   \"div<wd> %0,%1,%2\"\n   [(set (attr \"type\")\n      (cond [(match_operand:SI 0 \"\" \"\")\n@@ -2886,97 +2745,6 @@\n \t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n   \"\")\n-\n-(define_expand \"udivmodsi4\"\n-  [(parallel [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t\t   (udiv:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t    (match_operand:SI 2 \"reg_or_cint_operand\" \"\")))\n-\t      (set (match_operand:SI 3 \"gpc_reg_operand\" \"\")\n-\t\t   (umod:SI (match_dup 1) (match_dup 2)))])]\n-  \"\"\n-  \"\n-{\n-  if (! TARGET_POWERPC)\n-    {\n-      emit_move_insn (gen_rtx_REG (SImode, 3), operands[1]);\n-      emit_move_insn (gen_rtx_REG (SImode, 4), operands[2]);\n-      emit_insn (gen_divus_call ());\n-      emit_move_insn (operands[0], gen_rtx_REG (SImode, 3));\n-      emit_move_insn (operands[3], gen_rtx_REG (SImode, 4));\n-      DONE;\n-    }\n-  else\n-    FAIL;\n-}\")\n-\n-;; AIX architecture-independent common-mode multiply (DImode),\n-;; divide/modulus, and quotient subroutine calls.  Input operands in R3 and\n-;; R4; results in R3 and sometimes R4; link register always clobbered by bla\n-;; instruction; R0 sometimes clobbered; also, MQ sometimes clobbered but\n-;; assumed unused if generating common-mode, so ignore.\n-(define_insn \"mulh_call\"\n-  [(set (reg:SI 3)\n-\t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 3))\n-\t\t\t       (sign_extend:DI (reg:SI 4)))\n-\t\t      (const_int 32))))\n-   (clobber (reg:SI LR_REGNO))]\n-  \"! TARGET_POWERPC\"\n-  \"bla __mulh\"\n-  [(set_attr \"type\" \"imul\")])\n-\n-(define_insn \"mull_call\"\n-  [(set (reg:DI 3)\n-\t(mult:DI (sign_extend:DI (reg:SI 3))\n-\t\t (sign_extend:DI (reg:SI 4))))\n-   (clobber (reg:SI LR_REGNO))\n-   (clobber (reg:SI 0))]\n-  \"! TARGET_POWERPC\"\n-  \"bla __mull\"\n-  [(set_attr \"type\" \"imul\")])\n-\n-(define_insn \"divss_call\"\n-  [(set (reg:SI 3)\n-\t(div:SI (reg:SI 3) (reg:SI 4)))\n-   (set (reg:SI 4)\n-\t(mod:SI (reg:SI 3) (reg:SI 4)))\n-   (clobber (reg:SI LR_REGNO))\n-   (clobber (reg:SI 0))]\n-  \"! TARGET_POWERPC\"\n-  \"bla __divss\"\n-  [(set_attr \"type\" \"idiv\")])\n-\n-(define_insn \"divus_call\"\n-  [(set (reg:SI 3)\n-\t(udiv:SI (reg:SI 3) (reg:SI 4)))\n-   (set (reg:SI 4)\n-\t(umod:SI (reg:SI 3) (reg:SI 4)))\n-   (clobber (reg:SI LR_REGNO))\n-   (clobber (reg:SI 0))\n-   (clobber (match_scratch:CC 0 \"=x\"))\n-   (clobber (reg:CC CR1_REGNO))]\n-  \"! TARGET_POWERPC\"\n-  \"bla __divus\"\n-  [(set_attr \"type\" \"idiv\")])\n-\n-(define_insn \"quoss_call\"\n-  [(set (reg:SI 3)\n-\t(div:SI (reg:SI 3) (reg:SI 4)))\n-   (clobber (reg:SI LR_REGNO))]\n-  \"! TARGET_POWERPC\"\n-  \"bla __quoss\"\n-  [(set_attr \"type\" \"idiv\")])\n-\n-(define_insn \"quous_call\"\n-  [(set (reg:SI 3)\n-\t(udiv:SI (reg:SI 3) (reg:SI 4)))\n-   (clobber (reg:SI LR_REGNO))\n-   (clobber (reg:SI 0))\n-   (clobber (match_scratch:CC 0 \"=x\"))\n-   (clobber (reg:CC CR1_REGNO))]\n-  \"! TARGET_POWERPC\"\n-  \"bla __quous\"\n-  [(set_attr \"type\" \"idiv\")])\n \f\n ;; Logical instructions\n ;; The logical instructions are mostly combined by using match_operator,\n@@ -3615,7 +3383,7 @@\n                 (and:SI (lshiftrt:SI (match_operand:SI 3 \"gpc_reg_operand\" \"r\")\n                                      (match_operand:SI 2 \"const_int_operand\" \"i\"))\n                         (match_operand:SI 5 \"mask_operand\" \"i\"))))]\n-  \"TARGET_POWERPC && INTVAL(operands[1]) == ~INTVAL(operands[5])\"\n+  \"INTVAL(operands[1]) == ~INTVAL(operands[5])\"\n   \"*\n {\n  int me = extract_ME(operands[5]);\n@@ -3634,7 +3402,7 @@\n                         (match_operand:SI 5 \"mask_operand\" \"i\"))\n                 (and:SI (match_operand:SI 4 \"gpc_reg_operand\" \"0\")\n                         (match_operand:SI 1 \"mask_operand\" \"i\"))))]\n-  \"TARGET_POWERPC && INTVAL(operands[1]) == ~INTVAL(operands[5])\"\n+  \"INTVAL(operands[1]) == ~INTVAL(operands[5])\"\n   \"*\n {\n  int me = extract_ME(operands[5]);\n@@ -4885,13 +4653,6 @@\n   \"frsp %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n-(define_insn \"aux_truncdfsf2\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRSP))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n-  \"frsp %0,%1\"\n-  [(set_attr \"type\" \"fp\")])\n-\n (define_expand \"negsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(neg:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n@@ -4936,19 +4697,11 @@\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(plus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"fadds %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_addsub_s\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(plus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n-\t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n-  \"{fa|fadd} %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n-\n (define_expand \"subsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(minus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n@@ -4960,19 +4713,11 @@\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(minus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"fsubs %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_addsub_s\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(minus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n-\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n-  \"{fs|fsub} %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n-\n (define_expand \"mulsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n@@ -4984,19 +4729,11 @@\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"fmuls %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_mul_s\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n-\t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n-  \"{fm|fmul} %0,%1,%2\"\n-  [(set_attr \"type\" \"dmul\")])\n-\n (define_expand \"divsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(div:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n@@ -5008,20 +4745,11 @@\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(div:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t(match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\n    && TARGET_SINGLE_FLOAT && !TARGET_SIMPLE_FPU\"\n   \"fdivs %0,%1,%2\"\n   [(set_attr \"type\" \"sdiv\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(div:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n-\t\t(match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_SINGLE_FLOAT && !TARGET_SIMPLE_FPU\"\n-  \"{fd|fdiv} %0,%1,%2\"\n-  [(set_attr \"type\" \"ddiv\")])\n-\n (define_insn \"fres\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRES))]\n@@ -5036,11 +4764,7 @@\n \t\t(match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n \t\t(match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n-{\n-  return (TARGET_POWERPC\n-\t  ? \"fmadds %0,%1,%2,%3\"\n-\t  : \"{fma|fmadd} %0,%1,%2,%3\");\n-}\n+  \"fmadds %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_maddsub_s\")])\n \n@@ -5050,11 +4774,7 @@\n \t\t(match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n \t\t(neg:SF (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n-{\n-  return (TARGET_POWERPC\n-\t  ? \"fmsubs %0,%1,%2,%3\"\n-\t  : \"{fms|fmsub} %0,%1,%2,%3\");\n-}\n+  \"fmsubs %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_maddsub_s\")])\n \n@@ -5064,11 +4784,7 @@\n \t\t\t(match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t(match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n-{\n-  return (TARGET_POWERPC\n-\t  ? \"fnmadds %0,%1,%2,%3\"\n-\t  : \"{fnma|fnmadd} %0,%1,%2,%3\");\n-}\n+  \"fnmadds %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_maddsub_s\")])\n \n@@ -5078,11 +4794,7 @@\n \t\t\t(match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t(neg:SF (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n-{\n-  return (TARGET_POWERPC\n-\t  ? \"fnmsubs %0,%1,%2,%3\"\n-\t  : \"{fnms|fnmsub} %0,%1,%2,%3\");\n-}\n+  \"fnmsubs %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_maddsub_s\")])\n \n@@ -5900,8 +5612,7 @@\n (define_expand \"fix_trunc<mode>si2\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(fix:SI (match_operand:SFDF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT\n-   && ((TARGET_FPRS && <TARGET_FLOAT>) || <E500_CONVERT>)\"\n+  \"TARGET_HARD_FLOAT && ((TARGET_FPRS && <TARGET_FLOAT>) || <E500_CONVERT>)\"\n   \"\n {\n   if (!<E500_CONVERT>)\n@@ -5971,7 +5682,7 @@\n \t(fix:SI (match_operand:SFDF 1 \"gpc_reg_operand\" \"d,<rreg>\")))\n    (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"=1,d\"))\n    (clobber (match_operand:DI 3 \"offsettable_mem_operand\" \"=o,o\"))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"#\"\n   \"\"\n   [(pc)]\n@@ -6082,7 +5793,7 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d\")\n \t(unspec:DI [(fix:SI (match_operand:SFDF 1 \"gpc_reg_operand\" \"d\"))]\n \t\t   UNSPEC_FCTIWZ))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"{fcirz|fctiwz} %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -6542,50 +6253,24 @@\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n \n-(define_expand \"mulsidi3\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n-\t\t (sign_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"\"))))]\n-  \"! TARGET_POWERPC64\"\n-  \"\n-{\n-  if (! TARGET_POWERPC)\n-    {\n-      emit_move_insn (gen_rtx_REG (SImode, 3), operands[1]);\n-      emit_move_insn (gen_rtx_REG (SImode, 4), operands[2]);\n-      emit_insn (gen_mull_call ());\n-      if (WORDS_BIG_ENDIAN)\n-        emit_move_insn (operands[0], gen_rtx_REG (DImode, 3));\n-      else\n-\t{\n-\t  emit_move_insn (operand_subword (operands[0], 0, 0, DImode),\n-\t\t\t  gen_rtx_REG (SImode, 3));\n-\t  emit_move_insn (operand_subword (operands[0], 1, 0, DImode),\n-\t\t\t  gen_rtx_REG (SImode, 4));\n-\t}\n-      DONE;\n-    }\n-}\")\n-\n-(define_insn \"*mulsidi3_no_mq\"\n+(define_insn \"mulsidi3\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r\")\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n \t\t (sign_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))]\n-  \"TARGET_POWERPC && ! TARGET_POWERPC64\"\n-  \"*\n+  \"! TARGET_POWERPC64\"\n {\n   return (WORDS_BIG_ENDIAN)\n     ? \\\"mulhw %0,%1,%2\\;mullw %L0,%1,%2\\\"\n     : \\\"mulhw %L0,%1,%2\\;mullw %0,%1,%2\\\";\n-}\"\n+}\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length\" \"8\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n \t\t (sign_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"\"))))]\n-  \"TARGET_POWERPC && ! TARGET_POWERPC64 && reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 3)\n \t(truncate:SI\n \t (lshiftrt:DI (mult:DI (sign_extend:DI (match_dup 1))\n@@ -6605,7 +6290,7 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n \t\t (zero_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))]\n-  \"TARGET_POWERPC && ! TARGET_POWERPC64\"\n+  \"! TARGET_POWERPC64\"\n   \"*\n {\n   return (WORDS_BIG_ENDIAN)\n@@ -6619,7 +6304,7 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n \t\t (zero_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"\"))))]\n-  \"TARGET_POWERPC && ! TARGET_POWERPC64 && reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 3)\n \t(truncate:SI\n \t (lshiftrt:DI (mult:DI (zero_extend:DI (match_dup 1))\n@@ -6635,59 +6320,27 @@\n   operands[4] = operand_subword (operands[0], 1 - endian, 0, DImode);\n }\")\n \n-(define_expand \"smulsi3_highpart\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (sign_extend:DI\n-\t\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n-\t\t\t       (sign_extend:DI\n-\t\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"\")))\n-\t\t      (const_int 32))))]\n-  \"\"\n-  \"\n-{\n-  if (! TARGET_POWERPC)\n-    {\n-      emit_move_insn (gen_rtx_REG (SImode, 3), operands[1]);\n-      emit_move_insn (gen_rtx_REG (SImode, 4), operands[2]);\n-      emit_insn (gen_mulh_call ());\n-      emit_move_insn (operands[0], gen_rtx_REG (SImode, 3));\n-      DONE;\n-    }\n-}\")\n-\n-(define_insn \"*smulsi3_highpart_no_mq\"\n+(define_insn \"smulsi3_highpart\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(truncate:SI\n \t (lshiftrt:DI (mult:DI (sign_extend:DI\n \t\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n \t\t\t       (sign_extend:DI\n \t\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n \t\t      (const_int 32))))]\n-  \"TARGET_POWERPC\"\n+  \"\"\n   \"mulhw %0,%1,%2\"\n   [(set_attr \"type\" \"imul\")])\n \n-(define_expand \"umulsi3_highpart\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (zero_extend:DI\n-\t\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n-\t\t\t       (zero_extend:DI\n-\t\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"\")))\n-\t\t      (const_int 32))))]\n-  \"TARGET_POWERPC\"\n-  \"\")\n-\n-(define_insn \"*umulsi3_highpart_no_mq\"\n+(define_insn \"umulsi3_highpart\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(truncate:SI\n \t (lshiftrt:DI (mult:DI (zero_extend:DI\n \t\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n \t\t\t       (zero_extend:DI\n \t\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n \t\t      (const_int 32))))]\n-  \"TARGET_POWERPC\"\n+  \"\"\n   \"mulhwu %0,%1,%2\"\n   [(set_attr \"type\" \"imul\")])\n \n@@ -8943,7 +8596,7 @@\n (define_expand \"fix_trunctfsi2\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(fix:SI (match_operand:TF 1 \"gpc_reg_operand\" \"\")))]\n-  \"!TARGET_IEEEQUAD && TARGET_POWERPC && TARGET_HARD_FLOAT\n+  \"!TARGET_IEEEQUAD && TARGET_HARD_FLOAT\n    && (TARGET_FPRS || TARGET_E500_DOUBLE) && TARGET_LONG_DOUBLE_128\"\n {\n   if (TARGET_E500_DOUBLE)\n@@ -8960,7 +8613,7 @@\n \t      (clobber (match_dup 3))\n \t      (clobber (match_dup 4))\n \t      (clobber (match_dup 5))])]\n-  \"!TARGET_IEEEQUAD && TARGET_POWERPC\n+  \"!TARGET_IEEEQUAD\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n {\n   operands[2] = gen_reg_rtx (DFmode);\n@@ -14364,7 +14017,7 @@\n   [(prefetch (match_operand 0 \"indexed_or_indirect_address\" \"a\")\n \t     (match_operand:SI 1 \"const_int_operand\" \"n\")\n \t     (match_operand:SI 2 \"const_int_operand\" \"n\"))]\n-  \"TARGET_POWERPC\"\n+  \"\"\n   \"*\n {\n   if (GET_CODE (operands[0]) == REG)"}, {"sha": "9f3567a5c1ee3dfccb1f2ba7f20b9e3e317a4bd6", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -90,13 +90,9 @@ unsigned int rs6000_debug\n TargetSave\n int rs6000_target_flags_explicit\n \n+;; This option existed in the past, but now is always on.\n mpowerpc\n-Target Report RejectNegative Mask(POWERPC)\n-Use PowerPC instruction set\n-\n-mno-powerpc\n-Target Report RejectNegative\n-Do not use PowerPC instruction set\n+Target RejectNegative Undocumented Ignore\n \n mpowerpc64\n Target Report Mask(POWERPC64)"}, {"sha": "59ad0c6103e99e9b059c46d0b314a78a4da0d396", "filename": "gcc/config/rs6000/sync.md", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsync.md?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -1,6 +1,5 @@\n ;; Machine description for PowerPC synchronization instructions.\n-;; Copyright (C) 2005, 2007, 2008, 2009, 2011\n-;; Free Software Foundation, Inc.\n+;; Copyright (C) 2005-2012 Free Software Foundation, Inc.\n ;; Contributed by Geoffrey Keating.\n \n ;; This file is part of GCC.\n@@ -172,7 +171,7 @@\n   [(set (match_operand:ATOMIC 0 \"gpc_reg_operand\" \"=r\")\n \t(unspec_volatile:ATOMIC\n          [(match_operand:ATOMIC 1 \"memory_operand\" \"Z\")] UNSPECV_LL))]\n-  \"TARGET_POWERPC\"\n+  \"\"\n   \"<larx> %0,%y1\"\n   [(set_attr \"type\" \"load_l\")])\n \n@@ -181,7 +180,7 @@\n \t(unspec_volatile:CC [(const_int 0)] UNSPECV_SC))\n    (set (match_operand:ATOMIC 1 \"memory_operand\" \"=Z\")\n \t(match_operand:ATOMIC 2 \"gpc_reg_operand\" \"r\"))]\n-  \"TARGET_POWERPC\"\n+  \"\"\n   \"<stcx> %2,%y1\"\n   [(set_attr \"type\" \"store_c\")])\n \n@@ -194,7 +193,7 @@\n    (match_operand:SI 5 \"const_int_operand\" \"\")\t\t;; is_weak\n    (match_operand:SI 6 \"const_int_operand\" \"\")\t\t;; model succ\n    (match_operand:SI 7 \"const_int_operand\" \"\")]\t\t;; model fail\n-  \"TARGET_POWERPC\"\n+  \"\"\n {\n   rs6000_expand_atomic_compare_and_swap (operands);\n   DONE;\n@@ -205,7 +204,7 @@\n    (match_operand:INT1 1 \"memory_operand\" \"\")\t\t;; memory\n    (match_operand:INT1 2 \"gpc_reg_operand\" \"\")\t\t;; input\n    (match_operand:SI 3 \"const_int_operand\" \"\")]\t\t;; model\n-  \"TARGET_POWERPC\"\n+  \"\"\n {\n   rs6000_expand_atomic_exchange (operands);\n   DONE;\n@@ -216,7 +215,7 @@\n    (FETCHOP:INT1 (match_dup 0)\n      (match_operand:INT1 1 \"<fetchop_pred>\" \"\"))\t;; operand\n    (match_operand:SI 2 \"const_int_operand\" \"\")]\t\t;; model\n-  \"TARGET_POWERPC\"\n+  \"\"\n {\n   rs6000_expand_atomic_op (<CODE>, operands[0], operands[1],\n \t\t\t   NULL_RTX, NULL_RTX, operands[2]);\n@@ -227,7 +226,7 @@\n   [(match_operand:INT1 0 \"memory_operand\" \"\")\t\t;; memory\n    (match_operand:INT1 1 \"gpc_reg_operand\" \"\")\t\t;; operand\n    (match_operand:SI 2 \"const_int_operand\" \"\")]\t\t;; model\n-  \"TARGET_POWERPC\"\n+  \"\"\n {\n   rs6000_expand_atomic_op (NOT, operands[0], operands[1],\n \t\t\t   NULL_RTX, NULL_RTX, operands[2]);\n@@ -240,7 +239,7 @@\n    (FETCHOP:INT1 (match_dup 1)\n      (match_operand:INT1 2 \"<fetchop_pred>\" \"\"))\t;; operand\n    (match_operand:SI 3 \"const_int_operand\" \"\")]\t\t;; model\n-  \"TARGET_POWERPC\"\n+  \"\"\n { \n   rs6000_expand_atomic_op (<CODE>, operands[1], operands[2],\n \t\t\t   operands[0], NULL_RTX, operands[3]);\n@@ -252,7 +251,7 @@\n    (match_operand:INT1 1 \"memory_operand\" \"\")\t\t;; memory\n    (match_operand:INT1 2 \"gpc_reg_operand\" \"\")\t\t;; operand\n    (match_operand:SI 3 \"const_int_operand\" \"\")]\t\t;; model\n-  \"TARGET_POWERPC\"\n+  \"\"\n {\n   rs6000_expand_atomic_op (NOT, operands[1], operands[2],\n \t\t\t   operands[0], NULL_RTX, operands[3]);\n@@ -265,7 +264,7 @@\n    (FETCHOP:INT1 (match_dup 1)\n      (match_operand:INT1 2 \"<fetchop_pred>\" \"\"))\t;; operand\n    (match_operand:SI 3 \"const_int_operand\" \"\")]\t\t;; model\n-  \"TARGET_POWERPC\"\n+  \"\"\n {\n   rs6000_expand_atomic_op (<CODE>, operands[1], operands[2],\n \t\t\t   NULL_RTX, operands[0], operands[3]);\n@@ -277,7 +276,7 @@\n    (match_operand:INT1 1 \"memory_operand\" \"\")\t\t;; memory\n    (match_operand:INT1 2 \"gpc_reg_operand\" \"\")\t\t;; operand\n    (match_operand:SI 3 \"const_int_operand\" \"\")]\t\t;; model\n-  \"TARGET_POWERPC\"\n+  \"\"\n {\n   rs6000_expand_atomic_op (NOT, operands[1], operands[2],\n \t\t\t   NULL_RTX, operands[0], operands[3]);"}, {"sha": "d43a6994015e1331e8436c268551d0b5aa27370f", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -220,7 +220,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Override rs6000.h definition.  */\n #undef\tTARGET_DEFAULT\n-#define\tTARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS)\n+#define\tTARGET_DEFAULT MASK_NEW_MNEMONICS\n \n /* Override rs6000.h definition.  */\n #undef\tPROCESSOR_DEFAULT"}, {"sha": "128dbac4e1efa6f0b2a744c459850f5de0f106f0", "filename": "gcc/config/rs6000/sysv4le.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Fsysv4le.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Fsysv4le.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4le.h?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -1,6 +1,6 @@\n /* Target definitions for GCC for a little endian PowerPC\n    running System V.4\n-   Copyright (C) 1995, 2000, 2003, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 1995-2012 Free Software Foundation, Inc.\n    Contributed by Cygnus Support.\n \n    This file is part of GCC.\n@@ -20,7 +20,7 @@\n    <http://www.gnu.org/licenses/>.  */\n \n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_LITTLE_ENDIAN)\n+#define TARGET_DEFAULT (MASK_NEW_MNEMONICS | MASK_LITTLE_ENDIAN)\n \n #undef\tCC1_ENDIAN_DEFAULT_SPEC\n #define\tCC1_ENDIAN_DEFAULT_SPEC \"%(cc1_endian_little)\""}, {"sha": "2f5f6ef87d771bb41a0f63c953301dd926202875", "filename": "gcc/config/rs6000/vxworks.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvxworks.h?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -1,6 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Vxworks PowerPC version.\n-   Copyright (C) 1996, 2000, 2002, 2003, 2004, 2005, 2007, 2009, 2010, 2011\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1996-2012 Free Software Foundation, Inc.\n    Contributed by CodeSourcery, LLC.\n \n This file is part of GCC.\n@@ -99,8 +98,7 @@ VXWORKS_ADDITIONAL_CPP_SPEC\n #undef MULTILIB_DEFAULTS\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT \\\n-  (MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_EABI | MASK_STRICT_ALIGN)\n+#define TARGET_DEFAULT (MASK_NEW_MNEMONICS | MASK_EABI | MASK_STRICT_ALIGN)\n \n #undef PROCESSOR_DEFAULT\n #define PROCESSOR_DEFAULT PROCESSOR_PPC604"}, {"sha": "78bcde7a712e75b894a836c10d65d43d8a647cb3", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 35, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a441dedbc4b244b3223691a18aec8316bab940f9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a441dedbc4b244b3223691a18aec8316bab940f9", "patch": "@@ -797,7 +797,7 @@ See RS/6000 and PowerPC Options.\n @gccoptlist{-mcpu=@var{cpu-type} @gol\n -mtune=@var{cpu-type} @gol\n -mcmodel=@var{code-model} @gol\n--mpowerpc  -mpowerpc64  -mno-powerpc @gol\n+-mpowerpc64 @gol\n -maltivec  -mno-altivec @gol\n -mpowerpc-gpopt  -mno-powerpc-gpopt @gol\n -mpowerpc-gfxopt  -mno-powerpc-gfxopt @gol\n@@ -16555,9 +16555,7 @@ standard hardware multiplication defined in the RL78 software manual.\n \n These @samp{-m} options are defined for the IBM RS/6000 and PowerPC:\n @table @gcctabopt\n-@item -mpowerpc\n-@itemx -mno-powerpc\n-@itemx -mpowerpc-gpopt\n+@item -mpowerpc-gpopt\n @itemx -mno-powerpc-gpopt\n @itemx -mpowerpc-gfxopt\n @itemx -mno-powerpc-gfxopt\n@@ -16579,8 +16577,6 @@ These @samp{-m} options are defined for the IBM RS/6000 and PowerPC:\n @itemx -mno-mfpgpr\n @itemx -mhard-dfp\n @itemx -mno-hard-dfp\n-@opindex mpowerpc\n-@opindex mno-powerpc\n @opindex mpowerpc-gpopt\n @opindex mno-powerpc-gpopt\n @opindex mpowerpc-gfxopt\n@@ -16601,30 +16597,17 @@ These @samp{-m} options are defined for the IBM RS/6000 and PowerPC:\n @opindex mno-mfpgpr\n @opindex mhard-dfp\n @opindex mno-hard-dfp\n-GCC supports two related instruction set architectures for the\n-RS/6000 and PowerPC@.  The @dfn{POWER} instruction set are those\n-instructions supported by the @samp{rios} chip set used in the original\n-RS/6000 systems and the @dfn{PowerPC} instruction set is the\n-architecture of the Freescale MPC5xx, MPC6xx, MPC8xx microprocessors, and\n-the IBM 4xx, 6xx, and follow-on microprocessors.\n-\n-Neither architecture is a subset of the other.  However there is a\n-large common subset of instructions supported by both.  An MQ\n-register is included in processors supporting the POWER architecture.\n-\n You use these options to specify which instructions are available on the\n processor you are using.  The default value of these options is\n determined when configuring GCC@.  Specifying the\n @option{-mcpu=@var{cpu_type}} overrides the specification of these\n options.  We recommend you use the @option{-mcpu=@var{cpu_type}} option\n rather than the options listed above.\n \n-The @option{-mpowerpc} option allows GCC to generate instructions that\n-are found only in the 32-bit subset of the PowerPC architecture.\n-Specifying @option{-mpowerpc-gpopt} implies @option{-mpowerpc} and also allows\n+Specifying @option{-mpowerpc-gpopt} allows\n GCC to use the optional PowerPC architecture instructions in the\n General Purpose group, including floating-point square root.  Specifying\n-@option{-mpowerpc-gfxopt} implies @option{-mpowerpc} and also allows GCC to\n+@option{-mpowerpc-gfxopt} allows GCC to\n use the optional PowerPC architecture instructions in the Graphics\n group, including floating-point select.\n \n@@ -16657,10 +16640,6 @@ The @option{-mpowerpc64} option allows GCC to generate the additional\n and to treat GPRs as 64-bit, doubleword quantities.  GCC defaults to\n @option{-mno-powerpc64}.\n \n-If you specify @option{-mno-powerpc}, GCC uses only the instructions\n-in the common subset of both the POWER and PowerPC\n-architectures plus some special AIX common-mode calls.\n-\n @item -mnew-mnemonics\n @itemx -mold-mnemonics\n @opindex mnew-mnemonics\n@@ -16691,17 +16670,11 @@ Supported values for @var{cpu_type} are @samp{401}, @samp{403},\n @samp{e300c3}, @samp{e500mc}, @samp{e500mc64}, @samp{e5500},\n @samp{e6500}, @samp{ec603e}, @samp{G3}, @samp{G4}, @samp{G5},\n @samp{titan}, @samp{power3}, @samp{power4}, @samp{power5}, @samp{power5+},\n-@samp{power6}, @samp{power6x}, @samp{power7}, @samp{common}, @samp{powerpc},\n+@samp{power6}, @samp{power6x}, @samp{power7}, @samp{powerpc},\n @samp{powerpc64}, and @samp{rs64}.\n \n-@option{-mcpu=common} selects a completely generic processor.  Code\n-generated under this option runs on any POWER or PowerPC processor.\n-GCC uses only the instructions in the common subset of both\n-architectures, and does not use the MQ register.  GCC assumes a generic\n-processor model for scheduling purposes.\n-\n @option{-mcpu=powerpc}, and @option{-mcpu=powerpc64} specify pure 32-bit\n-PowerPC (i.e., not MPC601) and 64-bit PowerPC architecture machine\n+PowerPC and 64-bit PowerPC architecture machine\n types, with an appropriate, generic processor model assumed for\n scheduling purposes.\n \n@@ -16900,8 +16873,8 @@ only on files that contain less frequently-executed code.\n @opindex maix32\n Enable 64-bit AIX ABI and calling convention: 64-bit pointers, 64-bit\n @code{long} type, and the infrastructure needed to support them.\n-Specifying @option{-maix64} implies @option{-mpowerpc64} and\n-@option{-mpowerpc}, while @option{-maix32} disables the 64-bit ABI and\n+Specifying @option{-maix64} implies @option{-mpowerpc64},\n+while @option{-maix32} disables the 64-bit ABI and\n implies @option{-mno-powerpc64}.  GCC defaults to @option{-maix32}.\n \n @item -mxl-compat"}]}