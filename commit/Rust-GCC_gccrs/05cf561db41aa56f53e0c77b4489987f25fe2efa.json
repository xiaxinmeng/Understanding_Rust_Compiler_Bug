{"sha": "05cf561db41aa56f53e0c77b4489987f25fe2efa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVjZjU2MWRiNDFhYTU2ZjUzZTBjNzdiNDQ4OTk4N2YyNWZlMmVmYQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2004-09-11T19:48:58Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-09-11T19:48:58Z"}, "message": "re PR c++/17412 (tree check failure in fold-const)\n\n\tPR c++/17412\n\t* fold-const.c (fold): Do not try to fold the operand of a\n\tCLEANUP_POINT_EXPR if that operand does itself not have any\n\toperands.\ntestsuite/\n\t* g++.dg/parse/break-in-for.C: New test.\n\n\tPR middle-end/17417\n\t* langhooks.c (lhd_decl_printable_name): Make sure that this\n\tfunction is called with is a decl node that has an identifier.\n\t* tree-pretty-print.c (dump_function_name): New function to\n\twrap PRINT_FUNCTION_NAME and dump_decl_name.\n\t(print_call_name): Use it.\n\nFrom-SVN: r87363", "tree": {"sha": "bb1962bfc50766eb7a19c562763e5c166da579bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb1962bfc50766eb7a19c562763e5c166da579bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05cf561db41aa56f53e0c77b4489987f25fe2efa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05cf561db41aa56f53e0c77b4489987f25fe2efa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05cf561db41aa56f53e0c77b4489987f25fe2efa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05cf561db41aa56f53e0c77b4489987f25fe2efa/comments", "author": null, "committer": null, "parents": [{"sha": "a0be84dd8c0a461050ab96d8c563c9e9482e0107", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0be84dd8c0a461050ab96d8c563c9e9482e0107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0be84dd8c0a461050ab96d8c563c9e9482e0107"}], "stats": {"total": 63, "additions": 53, "deletions": 10}, "files": [{"sha": "c469e2712bdad8d1200ca3522a19585d5e592264", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05cf561db41aa56f53e0c77b4489987f25fe2efa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05cf561db41aa56f53e0c77b4489987f25fe2efa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05cf561db41aa56f53e0c77b4489987f25fe2efa", "patch": "@@ -1,3 +1,17 @@\n+2004-09-11  Steven Bosscher  <stevenb@suse.de>\n+\n+\tPR c++/17412\n+\t* fold-const.c (fold): Do not try to fold the operand of a\n+\tCLEANUP_POINT_EXPR if that operand does itself not have any\n+\toperands.\n+\n+\tPR middle-end/17417\n+\t* langhooks.c (lhd_decl_printable_name): Make sure that this\n+\tfunction is called with is a decl node that has an identifier.\n+\t* tree-pretty-print.c (dump_function_name): New function to\n+\twrap PRINT_FUNCTION_NAME and dump_decl_name.\n+\t(print_call_name): Use it.\n+\n 2004-09-11  Mohan Embar  <gnustuff@thisiscool.com>\n \n \t* ggc-none.c: Include \"bconfig.h\" if -DGENERATOR_FILE,"}, {"sha": "31bf7fd649f72d1c56c0288c0d17f380d0fd8d8c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05cf561db41aa56f53e0c77b4489987f25fe2efa/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05cf561db41aa56f53e0c77b4489987f25fe2efa/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=05cf561db41aa56f53e0c77b4489987f25fe2efa", "patch": "@@ -8946,29 +8946,31 @@ fold (tree expr)\n \t\t\t\t\t   TREE_OPERAND (arg0, 1)))));\n       return t;\n \n+    case CLEANUP_POINT_EXPR:\n       /* Pull arithmetic ops out of the CLEANUP_POINT_EXPR where\n          appropriate.  */\n-    case CLEANUP_POINT_EXPR:\n       if (! has_cleanups (arg0))\n \treturn TREE_OPERAND (t, 0);\n \n       {\n \tenum tree_code code0 = TREE_CODE (arg0);\n \tint kind0 = TREE_CODE_CLASS (code0);\n-\ttree arg00 = TREE_OPERAND (arg0, 0);\n-\ttree arg01;\n \n \tif (kind0 == '1' || code0 == TRUTH_NOT_EXPR)\n-\t  return fold (build1 (code0, type,\n-\t\t\t       fold (build1 (CLEANUP_POINT_EXPR,\n-\t\t\t\t\t     TREE_TYPE (arg00), arg00))));\n+\t  {\n+\t    tree arg00 = TREE_OPERAND (arg0, 0);\n+\t    return fold (build1 (code0, type,\n+\t\t\t\t fold (build1 (CLEANUP_POINT_EXPR,\n+\t\t\t\t\t       TREE_TYPE (arg00), arg00))));\n+\t  }\n \n \tif (kind0 == '<' || kind0 == '2'\n \t    || code0 == TRUTH_ANDIF_EXPR || code0 == TRUTH_ORIF_EXPR\n \t    || code0 == TRUTH_AND_EXPR   || code0 == TRUTH_OR_EXPR\n \t    || code0 == TRUTH_XOR_EXPR)\n \t  {\n-\t    arg01 = TREE_OPERAND (arg0, 1);\n+\t    tree arg00 = TREE_OPERAND (arg0, 0);\n+\t    tree arg01 = TREE_OPERAND (arg0, 1);\n \n \t    if (TREE_CONSTANT (arg00)\n \t\t|| ((code0 == TRUTH_ANDIF_EXPR || code0 == TRUTH_ORIF_EXPR)"}, {"sha": "309bef57794fbefa3bf22e319e1f1678aea3144e", "filename": "gcc/langhooks.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05cf561db41aa56f53e0c77b4489987f25fe2efa/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05cf561db41aa56f53e0c77b4489987f25fe2efa/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=05cf561db41aa56f53e0c77b4489987f25fe2efa", "patch": "@@ -267,6 +267,7 @@ lhd_expand_decl (tree ARG_UNUSED (t))\n const char *\n lhd_decl_printable_name (tree decl, int ARG_UNUSED (verbosity))\n {\n+  gcc_assert (decl && DECL_NAME (decl));\n   return IDENTIFIER_POINTER (DECL_NAME (decl));\n }\n "}, {"sha": "27c1ecf8644df34d0c78f30bb103bc8961e1aeef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05cf561db41aa56f53e0c77b4489987f25fe2efa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05cf561db41aa56f53e0c77b4489987f25fe2efa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05cf561db41aa56f53e0c77b4489987f25fe2efa", "patch": "@@ -1,3 +1,7 @@\n+2004-09-11  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* g++.dg/parse/break-in-for.C: New test.\n+\n 2004-09-11  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/tree-ssa/20040911-1.c: New test."}, {"sha": "92cac42417e1d132cd599e8c10ecd727f1123566", "filename": "gcc/testsuite/g++.dg/parse/break-in-for.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05cf561db41aa56f53e0c77b4489987f25fe2efa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fbreak-in-for.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05cf561db41aa56f53e0c77b4489987f25fe2efa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fbreak-in-for.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fbreak-in-for.C?ref=05cf561db41aa56f53e0c77b4489987f25fe2efa", "patch": "@@ -0,0 +1,11 @@\n+/* PR17412\n+   fold-const would try to fold the operands of the break statement.  */\n+/* { dg-do compile } */\n+ \n+\n+void foo ()\n+{\n+  for (;;)\n+    for (;;({break;}));\n+}\n+"}, {"sha": "d0b9aedc1566a8f0b487aafec090ec3b5888786e", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05cf561db41aa56f53e0c77b4489987f25fe2efa/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05cf561db41aa56f53e0c77b4489987f25fe2efa/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=05cf561db41aa56f53e0c77b4489987f25fe2efa", "patch": "@@ -172,6 +172,17 @@ dump_decl_name (pretty_printer *buffer, tree node, int flags)\n     }\n }\n \n+/* Like the above, but used for pretty printing function calls.  */\n+\n+static void\n+dump_function_name (pretty_printer *buffer, tree node)\n+{\n+  if (DECL_NAME (node))\n+    PRINT_FUNCTION_NAME (node);\n+  else\n+    dump_decl_name (buffer, node, 0);\n+}\n+\n /* Dump a function declaration.  NODE is the FUNCTION_TYPE.  BUFFER, SPC and\n    FLAGS are as in dump_generic_node.  */\n \n@@ -1892,7 +1903,7 @@ print_call_name (pretty_printer *buffer, tree node)\n     {\n     case VAR_DECL:\n     case PARM_DECL:\n-      PRINT_FUNCTION_NAME (op0);\n+      dump_function_name (buffer, op0);\n       break;\n \n     case ADDR_EXPR:\n@@ -1914,7 +1925,7 @@ print_call_name (pretty_printer *buffer, tree node)\n       /* The function is a pointer contained in a structure.  */\n       if (TREE_CODE (TREE_OPERAND (op0, 0)) == INDIRECT_REF ||\n \t  TREE_CODE (TREE_OPERAND (op0, 0)) == VAR_DECL)\n-\tPRINT_FUNCTION_NAME (TREE_OPERAND (op0, 1));\n+\tdump_function_name (buffer, TREE_OPERAND (op0, 1));\n       else\n \tdump_generic_node (buffer, TREE_OPERAND (op0, 0), 0, 0, false);\n       /* else\n@@ -1925,7 +1936,7 @@ print_call_name (pretty_printer *buffer, tree node)\n \n     case ARRAY_REF:\n       if (TREE_CODE (TREE_OPERAND (op0, 0)) == VAR_DECL)\n-\tPRINT_FUNCTION_NAME (TREE_OPERAND (op0, 0));\n+\tdump_function_name (buffer, TREE_OPERAND (op0, 0));\n       else\n \tdump_generic_node (buffer, op0, 0, 0, false);\n       break;"}]}