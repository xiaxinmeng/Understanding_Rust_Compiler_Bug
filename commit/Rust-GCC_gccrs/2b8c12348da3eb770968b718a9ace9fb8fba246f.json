{"sha": "2b8c12348da3eb770968b718a9ace9fb8fba246f", "node_id": "C_kwDOANBUbNoAKDJiOGMxMjM0OGRhM2ViNzcwOTY4YjcxOGE5YWNlOWZiOGZiYTI0NmY", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-06-22T18:13:20Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-13T10:01:19Z"}, "message": "[Ada] Fix internal error on instance of Ada.Task_Attributes at -O\n\nThis happens when there is a size mismatch, but this must be accepted.\n\ngcc/ada/\n\n\t* gcc-interface/utils.cc (unchecked_convert): Also pad in most cases\n\tif the source is not a scalar type but the destination is.", "tree": {"sha": "c09899d76c2507d8ff901087f75e9add29750b3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c09899d76c2507d8ff901087f75e9add29750b3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b8c12348da3eb770968b718a9ace9fb8fba246f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8c12348da3eb770968b718a9ace9fb8fba246f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b8c12348da3eb770968b718a9ace9fb8fba246f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8c12348da3eb770968b718a9ace9fb8fba246f/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6071ef0bed2081dd1ecd89299127ae07077df1f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6071ef0bed2081dd1ecd89299127ae07077df1f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6071ef0bed2081dd1ecd89299127ae07077df1f3"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "05adacd52eaa75e5d724c3ca125ae1eb43b058da", "filename": "gcc/ada/gcc-interface/utils.cc", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8c12348da3eb770968b718a9ace9fb8fba246f/gcc%2Fada%2Fgcc-interface%2Futils.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8c12348da3eb770968b718a9ace9fb8fba246f/gcc%2Fada%2Fgcc-interface%2Futils.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.cc?ref=2b8c12348da3eb770968b718a9ace9fb8fba246f", "patch": "@@ -5503,8 +5503,8 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n       expr = unchecked_convert (type, expr, notrunc_p);\n     }\n \n-  /* If we are converting from a scalar type to a type with a different size,\n-     we need to pad to have the same size on both sides.\n+  /* If we are converting between fixed-size types with different sizes, we\n+     need to pad to have the same size on both sides.\n \n      ??? We cannot do it unconditionally because unchecked conversions are\n      used liberally by the front-end to implement interface thunks:\n@@ -5515,8 +5515,10 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n \n      so we need to skip dereferences.  */\n   else if (!INDIRECT_REF_P (expr)\n-\t   && !AGGREGATE_TYPE_P (etype)\n+\t   && TREE_CODE (expr) != STRING_CST\n+\t   && !(AGGREGATE_TYPE_P (etype) && AGGREGATE_TYPE_P (type))\n \t   && ecode != UNCONSTRAINED_ARRAY_TYPE\n+\t   && TREE_CONSTANT (TYPE_SIZE (etype))\n \t   && TREE_CONSTANT (TYPE_SIZE (type))\n \t   && (c = tree_int_cst_compare (TYPE_SIZE (etype), TYPE_SIZE (type))))\n     {\n@@ -5532,15 +5534,18 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n \t  tree rec_type = maybe_pad_type (type, TYPE_SIZE (etype), 0, Empty,\n \t\t\t\t\t  false, false, true);\n \t  expr = unchecked_convert (rec_type, expr, notrunc_p);\n-\t  expr = build_component_ref (expr, TYPE_FIELDS (rec_type), false);\n+\t  expr = build3 (COMPONENT_REF, type, expr, TYPE_FIELDS (rec_type),\n+\t\t\t NULL_TREE);\n \t}\n     }\n \n-  /* Likewise if we are converting from a scalar type to a type with self-\n+  /* Likewise if we are converting from a fixed-szie type to a type with self-\n      referential size.  We use the max size to do the padding in this case.  */\n   else if (!INDIRECT_REF_P (expr)\n-\t   && !AGGREGATE_TYPE_P (etype)\n+\t   && TREE_CODE (expr) != STRING_CST\n+\t   && !(AGGREGATE_TYPE_P (etype) && AGGREGATE_TYPE_P (type))\n \t   && ecode != UNCONSTRAINED_ARRAY_TYPE\n+\t   && TREE_CONSTANT (TYPE_SIZE (etype))\n \t   && CONTAINS_PLACEHOLDER_P (TYPE_SIZE (type)))\n     {\n       tree new_size = max_size (TYPE_SIZE (type), true);\n@@ -5557,7 +5562,8 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n \t  tree rec_type = maybe_pad_type (type, TYPE_SIZE (etype), 0, Empty,\n \t\t\t\t\t  false, false, true);\n \t  expr = unchecked_convert (rec_type, expr, notrunc_p);\n-\t  expr = build_component_ref (expr, TYPE_FIELDS (rec_type), false);\n+\t  expr = build3 (COMPONENT_REF, type, expr, TYPE_FIELDS (rec_type),\n+\t\t\t NULL_TREE);\n \t}\n     }\n "}]}