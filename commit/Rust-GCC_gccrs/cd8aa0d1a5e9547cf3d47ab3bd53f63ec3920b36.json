{"sha": "cd8aa0d1a5e9547cf3d47ab3bd53f63ec3920b36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q4YWEwZDFhNWU5NTQ3Y2YzZDQ3YWIzYmQ1M2Y2M2VjMzkyMGIzNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-12-27T16:54:54Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-12-27T16:54:54Z"}, "message": "Add missing target check for fully-masked fold-left reductions\n\nThe fold-left reduction code has a (rarely-used) fallback that handles\ncases in which the loop is fully-masked and the target has no native\nsupport for the reduction.  The fallback includea a VEC_COND_EXPR\nbetween the reduction vector and a safe value, so we should check\nwhether that VEC_COND_EXPR is supported.\n\n2019-12-27  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-loop.c (vectorizable_reduction): Check whether the\n\ttarget supports the required VEC_COND_EXPR operation before\n\tallowing the fallback handling of masked fold-left reductions.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/mixed_size_10.c: New test.\n\nFrom-SVN: r279742", "tree": {"sha": "8c26dff98ee27b49a1359fffaca1f64545c8327f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c26dff98ee27b49a1359fffaca1f64545c8327f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd8aa0d1a5e9547cf3d47ab3bd53f63ec3920b36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd8aa0d1a5e9547cf3d47ab3bd53f63ec3920b36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd8aa0d1a5e9547cf3d47ab3bd53f63ec3920b36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd8aa0d1a5e9547cf3d47ab3bd53f63ec3920b36/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "049e64f8f19552ec75b6796223a8961038c24fcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049e64f8f19552ec75b6796223a8961038c24fcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/049e64f8f19552ec75b6796223a8961038c24fcd"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "e30f6bbef78be620e13113c655d384cfa1a769e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8aa0d1a5e9547cf3d47ab3bd53f63ec3920b36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8aa0d1a5e9547cf3d47ab3bd53f63ec3920b36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd8aa0d1a5e9547cf3d47ab3bd53f63ec3920b36", "patch": "@@ -1,3 +1,9 @@\n+2019-12-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-loop.c (vectorizable_reduction): Check whether the\n+\ttarget supports the required VEC_COND_EXPR operation before\n+\tallowing the fallback handling of masked fold-left reductions.\n+\n 2019-12-24  Jiufu Guo  <guojiufu@linux.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_option_override_internal): Enable"}, {"sha": "d47dd3bdc8dbf93b3189d45b9c3afc5835b2058e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8aa0d1a5e9547cf3d47ab3bd53f63ec3920b36/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8aa0d1a5e9547cf3d47ab3bd53f63ec3920b36/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cd8aa0d1a5e9547cf3d47ab3bd53f63ec3920b36", "patch": "@@ -1,3 +1,7 @@\n+2019-12-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/mixed_size_10.c: New test.\n+\n 2019-12-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/92438"}, {"sha": "bf22428549f125c1c3c869ecd132da36ff9efb07", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mixed_size_10.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8aa0d1a5e9547cf3d47ab3bd53f63ec3920b36/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmixed_size_10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8aa0d1a5e9547cf3d47ab3bd53f63ec3920b36/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmixed_size_10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmixed_size_10.c?ref=cd8aa0d1a5e9547cf3d47ab3bd53f63ec3920b36", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-O3 -msve-vector-bits=256 -fno-tree-loop-distribution\" } */\n+\n+float\n+f (float *restrict x, double *restrict y)\n+{\n+  float res = 0.0;\n+  for (int i = 0; i < 100; ++i)\n+    {\n+      res += x[i];\n+      y[i] += y[i - 4] * 11;\n+    }\n+  return res;\n+}"}, {"sha": "9b0cbccb721873bebf153361e90640056f398361", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8aa0d1a5e9547cf3d47ab3bd53f63ec3920b36/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8aa0d1a5e9547cf3d47ab3bd53f63ec3920b36/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=cd8aa0d1a5e9547cf3d47ab3bd53f63ec3920b36", "patch": "@@ -6718,6 +6718,18 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n \t\t\t     \" conditional operation is available.\\n\");\n \t  LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n \t}\n+      else if (reduction_type == FOLD_LEFT_REDUCTION\n+\t       && reduc_fn == IFN_LAST\n+\t       && !expand_vec_cond_expr_p (vectype_in,\n+\t\t\t\t\t   truth_type_for (vectype_in),\n+\t\t\t\t\t   SSA_NAME))\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t     \"can't use a fully-masked loop because no\"\n+\t\t\t     \" conditional operation is available.\\n\");\n+\t  LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n+\t}\n       else\n \tvect_record_loop_mask (loop_vinfo, masks, ncopies * vec_num,\n \t\t\t       vectype_in, NULL);"}]}