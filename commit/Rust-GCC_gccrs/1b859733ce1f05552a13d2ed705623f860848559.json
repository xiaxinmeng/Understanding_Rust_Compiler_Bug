{"sha": "1b859733ce1f05552a13d2ed705623f860848559", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI4NTk3MzNjZTFmMDU1NTJhMTNkMmVkNzA1NjIzZjg2MDg0ODU1OQ==", "commit": {"author": {"name": "Adam Butcher", "email": "adam@jessamine.co.uk", "date": "2014-02-25T03:47:35Z"}, "committer": {"name": "Adam Butcher", "email": "abutcher@gcc.gnu.org", "date": "2014-02-25T03:47:35Z"}, "message": "Fix out-of-line definition of class template generic member functions.\n\n\t* parser.c (synthesize_implicit_template_parm): Inject new template\n\targument list appropriately when a generic member function\n\tof a class template is declared out-of-line.\n\n\t* g++.dg/cpp1y/fn-generic-member-ool.C: New testcase.\n\nFrom-SVN: r208107", "tree": {"sha": "c048938442833f3c3eb8ddfe28fd6789749b5a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c048938442833f3c3eb8ddfe28fd6789749b5a48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b859733ce1f05552a13d2ed705623f860848559", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b859733ce1f05552a13d2ed705623f860848559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b859733ce1f05552a13d2ed705623f860848559", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b859733ce1f05552a13d2ed705623f860848559/comments", "author": {"login": "abutcher-gh", "id": 10379705, "node_id": "MDQ6VXNlcjEwMzc5NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/10379705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abutcher-gh", "html_url": "https://github.com/abutcher-gh", "followers_url": "https://api.github.com/users/abutcher-gh/followers", "following_url": "https://api.github.com/users/abutcher-gh/following{/other_user}", "gists_url": "https://api.github.com/users/abutcher-gh/gists{/gist_id}", "starred_url": "https://api.github.com/users/abutcher-gh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abutcher-gh/subscriptions", "organizations_url": "https://api.github.com/users/abutcher-gh/orgs", "repos_url": "https://api.github.com/users/abutcher-gh/repos", "events_url": "https://api.github.com/users/abutcher-gh/events{/privacy}", "received_events_url": "https://api.github.com/users/abutcher-gh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81493f78875ef6e1714d51cb2f3864689835e0e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81493f78875ef6e1714d51cb2f3864689835e0e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81493f78875ef6e1714d51cb2f3864689835e0e2"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "fa6b3cfea80b8e29c58db7d719dd241728ee9692", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b859733ce1f05552a13d2ed705623f860848559/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b859733ce1f05552a13d2ed705623f860848559/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1b859733ce1f05552a13d2ed705623f860848559", "patch": "@@ -1,5 +1,9 @@\n 2014-02-25  Adam Butcher  <adam@jessamine.co.uk>\n \n+\t* parser.c (synthesize_implicit_template_parm): Inject new template\n+\targument list appropriately when a generic member function\n+\tof a class template is declared out-of-line.\n+\n \tPR c++/60065\n \t* parser.c (cp_parser_direct_declarator): Don't save and\n \trestore num_template_parameter_lists around call to"}, {"sha": "2d7918c64c70f32da188ecbb607b6009704cac4d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b859733ce1f05552a13d2ed705623f860848559/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b859733ce1f05552a13d2ed705623f860848559/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1b859733ce1f05552a13d2ed705623f860848559", "patch": "@@ -31942,7 +31942,8 @@ synthesize_implicit_template_parm  (cp_parser *parser)\n \n       current_binding_level = scope;\n \n-      if (scope->kind != sk_template_parms)\n+      if (scope->kind != sk_template_parms\n+\t  || !function_being_declared_is_template_p (parser))\n \t{\n \t  /* Introduce a new template parameter list for implicit template\n \t     parameters.  */"}, {"sha": "d59f4ece021c1eddaf022b3e936334db7defa87f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b859733ce1f05552a13d2ed705623f860848559/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b859733ce1f05552a13d2ed705623f860848559/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b859733ce1f05552a13d2ed705623f860848559", "patch": "@@ -1,5 +1,7 @@\n 2014-02-25  Adam Butcher  <adam@jessamine.co.uk>\n \n+\t* g++.dg/cpp1y/fn-generic-member-ool.C: New testcase.\n+\n \tPR c++/60065\n \t* g++.dg/cpp1y/pr60065.C: New testcase.\n "}, {"sha": "f9c814ee081f958590fc9b794758f39c7cfce4bd", "filename": "gcc/testsuite/g++.dg/cpp1y/fn-generic-member-ool.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b859733ce1f05552a13d2ed705623f860848559/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffn-generic-member-ool.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b859733ce1f05552a13d2ed705623f860848559/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffn-generic-member-ool.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffn-generic-member-ool.C?ref=1b859733ce1f05552a13d2ed705623f860848559", "patch": "@@ -0,0 +1,35 @@\n+// Out-of-line generic member function definitions.\n+// { dg-options \"-std=c++1y\" }\n+\n+struct A {\n+  void f(auto x);\n+};\n+\n+void A::f(auto x) {}  // injects a new list\n+\n+template <typename T>\n+struct B {\n+  void f(auto x);\n+};\n+\n+template <typename T>\n+void B<T>::f(auto x) {}  // injects a new list\n+\n+struct C {\n+  template <int N>\n+  void f(auto x);\n+};\n+\n+template <int N>\n+void C::f(auto x) {}  // extends existing inner list\n+\n+template <typename T>\n+struct D\n+{\n+  template <int N>\n+  void f(auto x);\n+};\n+\n+template <typename T>\n+template <int N>\n+void D<T>::f(auto x) {}  // extends existing inner list"}]}