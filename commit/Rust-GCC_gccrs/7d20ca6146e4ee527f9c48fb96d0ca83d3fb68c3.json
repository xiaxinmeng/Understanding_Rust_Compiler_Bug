{"sha": "7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QyMGNhNjE0NmU0ZWU1MjdmOWM0OGZiOTZkMGNhODNkM2ZiNjhjMw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2013-11-22T17:24:32Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2013-11-22T17:24:32Z"}, "message": "re PR target/59054 (Powerpc -O0 -mcpu=power7 generates sub-optimal code to load 0)\n\n2013-11-22  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/59054\n\t* gcc.target/powerpc/direct-move.h (VSX_REG_ATTR): Allow test to\n\tspecify an appropriate register class for VSX operations.\n\t(load_vsx): Use it.\n\t(load_gpr_to_vsx): Likewise.\n\t(load_vsx_to_gpr): Likewise.\n\t* gcc.target/powerpc/direct-move-vint1.c: Use an appropriate\n\tregister class for VSX registers that the type can handle.  Remove\n\tchecks for explicit number of instructions generated, just check\n\tif the instruction is generated.\n\t* gcc.target/powerpc/direct-move-vint2.c: Likewise.\n\t* gcc.target/powerpc/direct-move-float1.c: Likewise.\n\t* gcc.target/powerpc/direct-move-float2.c: Likewise.\n\t* gcc.target/powerpc/direct-move-double1.c: Likewise.\n\t* gcc.target/powerpc/direct-move-double2.c: Likewise.\n\t* gcc.target/powerpc/direct-move-long1.c: Likewise.\n\t* gcc.target/powerpc/direct-move-long2.c: Likewise.\n\n\t* gcc.target/powerpc/pr59054.c: Remove duplicate code.\n\n\t* gcc.target/powerpc/bool3-av.c: Limit to 64-bit mode for now.\n\t* gcc.target/powerpc/bool3-p7.c: Likewise.\n\t* gcc.target/powerpc/bool3-p8.c: Likewise.\n\n\t* gcc.target/powerpc/p8vector-ldst.c: Just check that the\n\tappropriate instructions are generated, don't check the count.\n\nFrom-SVN: r205278", "tree": {"sha": "1c7c37213eaf3dc6a8afb834c94eda9a56ec5174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c7c37213eaf3dc6a8afb834c94eda9a56ec5174"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/comments", "author": null, "committer": null, "parents": [{"sha": "237c8b9d2f2cc0858ed6950f366cdb6d39f5c900", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/237c8b9d2f2cc0858ed6950f366cdb6d39f5c900", "html_url": "https://github.com/Rust-GCC/gccrs/commit/237c8b9d2f2cc0858ed6950f366cdb6d39f5c900"}], "stats": {"total": 99, "additions": 64, "deletions": 35}, "files": [{"sha": "a8b93310b88b6f64315e254c9f76ba66ac072d9c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3", "patch": "@@ -1,3 +1,32 @@\n+2013-11-22  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/59054\n+\t* gcc.target/powerpc/direct-move.h (VSX_REG_ATTR): Allow test to\n+\tspecify an appropriate register class for VSX operations.\n+\t(load_vsx): Use it.\n+\t(load_gpr_to_vsx): Likewise.\n+\t(load_vsx_to_gpr): Likewise.\n+\t* gcc.target/powerpc/direct-move-vint1.c: Use an appropriate\n+\tregister class for VSX registers that the type can handle.  Remove\n+\tchecks for explicit number of instructions generated, just check\n+\tif the instruction is generated.\n+\t* gcc.target/powerpc/direct-move-vint2.c: Likewise.\n+\t* gcc.target/powerpc/direct-move-float1.c: Likewise.\n+\t* gcc.target/powerpc/direct-move-float2.c: Likewise.\n+\t* gcc.target/powerpc/direct-move-double1.c: Likewise.\n+\t* gcc.target/powerpc/direct-move-double2.c: Likewise.\n+\t* gcc.target/powerpc/direct-move-long1.c: Likewise.\n+\t* gcc.target/powerpc/direct-move-long2.c: Likewise.\n+\n+\t* gcc.target/powerpc/pr59054.c: Remove duplicate code.\n+\n+\t* gcc.target/powerpc/bool3-av.c: Limit to 64-bit mode for now.\n+\t* gcc.target/powerpc/bool3-p7.c: Likewise.\n+\t* gcc.target/powerpc/bool3-p8.c: Likewise.\n+\n+\t* gcc.target/powerpc/p8vector-ldst.c: Just check that the\n+\tappropriate instructions are generated, don't check the count.\n+\n 2013-11-22  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/59216"}, {"sha": "d4aac786b2c796304ec1e1532b67e22b1582e4fb", "filename": "gcc/testsuite/gcc.target/powerpc/bool3-av.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbool3-av.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbool3-av.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbool3-av.c?ref=7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-options \"-O2 -mcpu=power6 -mabi=altivec -maltivec -mno-vsx\" } */"}, {"sha": "34e3c9e79dd356b586067729592aa01209911790", "filename": "gcc/testsuite/gcc.target/powerpc/bool3-p7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbool3-p7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbool3-p7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbool3-p7.c?ref=7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-options \"-O2 -mcpu=power7\" } */"}, {"sha": "e1b2dfa7ee2b18e67b6632d6f3398b20b0eba7f4", "filename": "gcc/testsuite/gcc.target/powerpc/bool3-p8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbool3-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbool3-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbool3-p8.c?ref=7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-options \"-O2 -mcpu=power8\" } */"}, {"sha": "2569ac84369cb5b2d8467eed516a95b61c7b7176", "filename": "gcc/testsuite/gcc.target/powerpc/direct-move-double1.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-double1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-double1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-double1.c?ref=7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3", "patch": "@@ -3,13 +3,14 @@\n /* { dg-skip-if \"\" { powerpc*-*-*spe* } { \"*\" } { \"\" } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-options \"-mcpu=power8 -O2\" } */\n-/* { dg-final { scan-assembler-times \"mtvsrd\" 1 } } */\n-/* { dg-final { scan-assembler-times \"mfvsrd\" 1 } } */\n+/* { dg-final { scan-assembler \"mtvsrd\" } } */\n+/* { dg-final { scan-assembler \"mfvsrd\" } } */\n \n-/* Check code generation for direct move for long types.  */\n+/* Check code generation for direct move for double types.  */\n \n #define TYPE double\n #define IS_FLOAT 1\n #define NO_ALTIVEC 1\n+#define VSX_REG_ATTR \"ws\"\n \n #include \"direct-move.h\""}, {"sha": "c8702204b703f29c87542f269e49b3f68f3ccb04", "filename": "gcc/testsuite/gcc.target/powerpc/direct-move-double2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-double2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-double2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-double2.c?ref=7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3", "patch": "@@ -10,5 +10,6 @@\n #define IS_FLOAT 1\n #define NO_ALTIVEC 1\n #define DO_MAIN\n+#define VSX_REG_ATTR \"ws\"\n \n #include \"direct-move.h\""}, {"sha": "524c0eead431eb8c52221e2d55d800499862a47f", "filename": "gcc/testsuite/gcc.target/powerpc/direct-move-float1.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-float1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-float1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-float1.c?ref=7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3", "patch": "@@ -3,15 +3,16 @@\n /* { dg-skip-if \"\" { powerpc*-*-*spe* } { \"*\" } { \"\" } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-options \"-mcpu=power8 -O2\" } */\n-/* { dg-final { scan-assembler-times \"mtvsrd\" 2 } } */\n-/* { dg-final { scan-assembler-times \"mfvsrd\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xscvdpspn\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xscvspdpn\" 2 } } */\n+/* { dg-final { scan-assembler \"mtvsrd\" } } */\n+/* { dg-final { scan-assembler \"mfvsrd\" } } */\n+/* { dg-final { scan-assembler \"xscvdpspn\" } } */\n+/* { dg-final { scan-assembler \"xscvspdpn\" } } */\n \n-/* Check code generation for direct move for long types.  */\n+/* Check code generation for direct move for float types.  */\n \n #define TYPE float\n #define IS_FLOAT 1\n #define NO_ALTIVEC 1\n+#define VSX_REG_ATTR \"ww\"\n \n #include \"direct-move.h\""}, {"sha": "352e76166d087e410f065c71593f4ad3f904d1e7", "filename": "gcc/testsuite/gcc.target/powerpc/direct-move-float2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-float2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-float2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-float2.c?ref=7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3", "patch": "@@ -10,5 +10,6 @@\n #define IS_FLOAT 1\n #define NO_ALTIVEC 1\n #define DO_MAIN\n+#define VSX_REG_ATTR \"ww\"\n \n #include \"direct-move.h\""}, {"sha": "0a78f9cb2586cd9b59da99cd6245f0c9bd1d62ec", "filename": "gcc/testsuite/gcc.target/powerpc/direct-move-long1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-long1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-long1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-long1.c?ref=7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3", "patch": "@@ -3,13 +3,14 @@\n /* { dg-skip-if \"\" { powerpc*-*-*spe* } { \"*\" } { \"\" } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-options \"-mcpu=power8 -O2\" } */\n-/* { dg-final { scan-assembler-times \"mtvsrd\" 1 } } */\n-/* { dg-final { scan-assembler-times \"mfvsrd\" 2 } } */\n+/* { dg-final { scan-assembler \"mtvsrd\" } } */\n+/* { dg-final { scan-assembler \"mfvsrd\" } } */\n \n /* Check code generation for direct move for long types.  */\n \n #define TYPE long\n #define IS_INT 1\n #define NO_ALTIVEC 1\n+#define VSX_REG_ATTR \"d\"\n \n #include \"direct-move.h\""}, {"sha": "cee9e0e0f1d210fcc234feb695d2c998621265cf", "filename": "gcc/testsuite/gcc.target/powerpc/direct-move-long2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-long2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-long2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-long2.c?ref=7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3", "patch": "@@ -10,5 +10,6 @@\n #define IS_INT 1\n #define NO_ALTIVEC 1\n #define DO_MAIN\n+#define VSX_REG_ATTR \"d\"\n \n #include \"direct-move.h\""}, {"sha": "3067b9a8e627e0a4d940d253eb78114ac5454c6a", "filename": "gcc/testsuite/gcc.target/powerpc/direct-move-vint1.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-vint1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-vint1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-vint1.c?ref=7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3", "patch": "@@ -3,11 +3,12 @@\n /* { dg-skip-if \"\" { powerpc*-*-*spe* } { \"*\" } { \"\" } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-options \"-mcpu=power8 -O2\" } */\n-/* { dg-final { scan-assembler-times \"mtvsrd\" 4 } } */\n-/* { dg-final { scan-assembler-times \"mfvsrd\" 4 } } */\n+/* { dg-final { scan-assembler \"mtvsrd\" } } */\n+/* { dg-final { scan-assembler \"mfvsrd\" } } */\n \n-/* Check code generation for direct move for long types.  */\n+/* Check code generation for direct move for vector types.  */\n \n #define TYPE vector int\n+#define VSX_REG_ATTR \"wa\"\n \n #include \"direct-move.h\""}, {"sha": "0d8264faf7186150e28878a39760ec65f8393f35", "filename": "gcc/testsuite/gcc.target/powerpc/direct-move-vint2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-vint2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-vint2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-vint2.c?ref=7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3", "patch": "@@ -8,5 +8,6 @@\n \n #define TYPE vector int\n #define DO_MAIN\n+#define VSX_REG_ATTR \"wa\"\n \n #include \"direct-move.h\""}, {"sha": "6a5b7ba18061a6d87fd163bba2a4368c9055ff61", "filename": "gcc/testsuite/gcc.target/powerpc/direct-move.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move.h?ref=7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3", "patch": "@@ -3,6 +3,10 @@\n #include <math.h>\n extern void abort (void);\n \n+#ifndef VSX_REG_ATTR\n+#define VSX_REG_ATTR \"wa\"\n+#endif\n+\n void __attribute__((__noinline__))\n copy (TYPE *a, TYPE *b)\n {\n@@ -44,7 +48,7 @@ void __attribute__((__noinline__))\n load_vsx (TYPE *a, TYPE *b)\n {\n   TYPE c = *a;\n-  __asm__ (\"# vsx, reg = %x0\" : \"+wa\" (c));\n+  __asm__ (\"# vsx, reg = %x0\" : \"+\" VSX_REG_ATTR (c));\n   *b = c;\n }\n #endif\n@@ -57,7 +61,7 @@ load_gpr_to_vsx (TYPE *a, TYPE *b)\n   TYPE d;\n   __asm__ (\"# gpr, reg = %0\" : \"+b\" (c));\n   d = c;\n-  __asm__ (\"# vsx, reg = %x0\" : \"+wa\" (d));\n+  __asm__ (\"# vsx, reg = %x0\" : \"+\" VSX_REG_ATTR (d));\n   *b = d;\n }\n #endif\n@@ -68,7 +72,7 @@ load_vsx_to_gpr (TYPE *a, TYPE *b)\n {\n   TYPE c = *a;\n   TYPE d;\n-  __asm__ (\"# vsx, reg = %x0\" : \"+wa\" (c));\n+  __asm__ (\"# vsx, reg = %x0\" : \"+\" VSX_REG_ATTR (c));\n   d = c;\n   __asm__ (\"# gpr, reg = %0\" : \"+b\" (d));\n   *b = d;"}, {"sha": "33f19991f7611288b57434372cacf0b5b6bcc60a", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-ldst.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-ldst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-ldst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-ldst.c?ref=7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3", "patch": "@@ -36,7 +36,7 @@ void store_df (double *p, double d)\n   *p = d;\n }\n \n-/* { dg-final { scan-assembler-times \"lxsspx\"  2 } } */\n-/* { dg-final { scan-assembler-times \"lxsdx\"   1 } } */\n-/* { dg-final { scan-assembler-times \"stxsspx\" 1 } } */\n-/* { dg-final { scan-assembler-times \"stxsdx\"  1 } } */\n+/* { dg-final { scan-assembler \"lxsspx\"  } } */\n+/* { dg-final { scan-assembler \"lxsdx\"   } } */\n+/* { dg-final { scan-assembler \"stxsspx\" } } */\n+/* { dg-final { scan-assembler \"stxsdx\"  } } */"}, {"sha": "052f238ba0e92350318c26ee57a8098bedade2da", "filename": "gcc/testsuite/gcc.target/powerpc/pr59054.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr59054.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr59054.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr59054.c?ref=7d20ca6146e4ee527f9c48fb96d0ca83d3fb68c3", "patch": "@@ -4,15 +4,3 @@\n /* { dg-options \"-mcpu=power7 -O0 -m64\" } */\n \n long foo (void) { return 0; }\n-\n-/* { dg-final { scan-assembler-not \"xxlor\" } } */\n-/* { dg-final { scan-assembler-not \"stfd\" } } */\n-/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n-/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n-/* { dg-require-effective-target powerpc_vsx_ok } */\n-/* { dg-options \"-mcpu=power7 -O0 -m64\" } */\n-\n-long foo (void) { return 0; }\n-\n-/* { dg-final { scan-assembler-not \"xxlor\" } } */\n-/* { dg-final { scan-assembler-not \"stfd\" } } */"}]}