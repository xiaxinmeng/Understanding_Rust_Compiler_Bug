{"sha": "97d87f7502351f80784f77dbeb4119def98c133d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdkODdmNzUwMjM1MWY4MDc4NGY3N2RiZWI0MTE5ZGVmOThjMTMzZA==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2015-04-27T11:02:34Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2015-04-27T11:02:34Z"}, "message": "combine.c (sign_extend_short_imm): New.\n\n2015-04-27  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    * combine.c (sign_extend_short_imm): New.\n    (set_nonzero_bits_and_sign_copies): Use above new function for sign\n    extension of src short immediate.\n    (reg_nonzero_bits_for_combine): Likewise for tem.\n\nFrom-SVN: r222457", "tree": {"sha": "5c5eae56e601f99581b9dd2b2f44e358e6385374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c5eae56e601f99581b9dd2b2f44e358e6385374"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97d87f7502351f80784f77dbeb4119def98c133d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97d87f7502351f80784f77dbeb4119def98c133d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97d87f7502351f80784f77dbeb4119def98c133d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97d87f7502351f80784f77dbeb4119def98c133d/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "232f1f97ad3ed549374769697eda3e872aab95f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/232f1f97ad3ed549374769697eda3e872aab95f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/232f1f97ad3ed549374769697eda3e872aab95f3"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "ceb6dc361bdbc1a7a2cd48978d9dd6158cd4fb3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97d87f7502351f80784f77dbeb4119def98c133d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97d87f7502351f80784f77dbeb4119def98c133d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97d87f7502351f80784f77dbeb4119def98c133d", "patch": "@@ -1,3 +1,10 @@\n+2015-04-27  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* combine.c (sign_extend_short_imm): New.\n+\t(set_nonzero_bits_and_sign_copies): Use above new function for sign\n+\textension of src short immediate.\n+\t(reg_nonzero_bits_for_combine): Likewise for tem.\n+\n 2015-04-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* stor-layout.c (self_referential_component_ref_p): New predicate."}, {"sha": "2b1ba24a7c39018698f056d4aa2895babacef2ba", "filename": "gcc/combine.c", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97d87f7502351f80784f77dbeb4119def98c133d/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97d87f7502351f80784f77dbeb4119def98c133d/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=97d87f7502351f80784f77dbeb4119def98c133d", "patch": "@@ -1646,6 +1646,28 @@ setup_incoming_promotions (rtx_insn *first)\n     }\n }\n \n+#ifdef SHORT_IMMEDIATES_SIGN_EXTEND\n+/* If MODE has a precision lower than PREC and SRC is a non-negative constant\n+   that would appear negative in MODE, sign-extend SRC for use in nonzero_bits\n+   because some machines (maybe most) will actually do the sign-extension and\n+   this is the conservative approach.\n+\n+   ??? For 2.5, try to tighten up the MD files in this regard instead of this\n+   kludge.  */\n+\n+static rtx\n+sign_extend_short_imm (rtx src, machine_mode mode, unsigned int prec)\n+{\n+  if (GET_MODE_PRECISION (mode) < prec\n+      && CONST_INT_P (src)\n+      && INTVAL (src) > 0\n+      && val_signbit_known_set_p (mode, INTVAL (src)))\n+    src = GEN_INT (INTVAL (src) | ~GET_MODE_MASK (mode));\n+\n+  return src;\n+}\n+#endif\n+\n /* Called via note_stores.  If X is a pseudo that is narrower than\n    HOST_BITS_PER_WIDE_INT and is being set, record what bits are known zero.\n \n@@ -1725,20 +1747,7 @@ set_nonzero_bits_and_sign_copies (rtx x, const_rtx set, void *data)\n \t  rtx src = SET_SRC (set);\n \n #ifdef SHORT_IMMEDIATES_SIGN_EXTEND\n-\t  /* If X is narrower than a word and SRC is a non-negative\n-\t     constant that would appear negative in the mode of X,\n-\t     sign-extend it for use in reg_stat[].nonzero_bits because some\n-\t     machines (maybe most) will actually do the sign-extension\n-\t     and this is the conservative approach.\n-\n-\t     ??? For 2.5, try to tighten up the MD files in this regard\n-\t     instead of this kludge.  */\n-\n-\t  if (GET_MODE_PRECISION (GET_MODE (x)) < BITS_PER_WORD\n-\t      && CONST_INT_P (src)\n-\t      && INTVAL (src) > 0\n-\t      && val_signbit_known_set_p (GET_MODE (x), INTVAL (src)))\n-\t    src = GEN_INT (INTVAL (src) | ~GET_MODE_MASK (GET_MODE (x)));\n+\t  src = sign_extend_short_imm (src, GET_MODE (x), BITS_PER_WORD);\n #endif\n \n \t  /* Don't call nonzero_bits if it cannot change anything.  */\n@@ -9788,20 +9797,8 @@ reg_nonzero_bits_for_combine (const_rtx x, machine_mode mode,\n   if (tem)\n     {\n #ifdef SHORT_IMMEDIATES_SIGN_EXTEND\n-      /* If X is narrower than MODE and TEM is a non-negative\n-\t constant that would appear negative in the mode of X,\n-\t sign-extend it for use in reg_nonzero_bits because some\n-\t machines (maybe most) will actually do the sign-extension\n-\t and this is the conservative approach.\n-\n-\t ??? For 2.5, try to tighten up the MD files in this regard\n-\t instead of this kludge.  */\n-\n-      if (GET_MODE_PRECISION (GET_MODE (x)) < GET_MODE_PRECISION (mode)\n-\t  && CONST_INT_P (tem)\n-\t  && INTVAL (tem) > 0\n-\t  && val_signbit_known_set_p (GET_MODE (x), INTVAL (tem)))\n-\ttem = GEN_INT (INTVAL (tem) | ~GET_MODE_MASK (GET_MODE (x)));\n+      tem = sign_extend_short_imm (tem, GET_MODE (x),\n+\t\t\t\t   GET_MODE_PRECISION (mode));\n #endif\n       return tem;\n     }"}]}