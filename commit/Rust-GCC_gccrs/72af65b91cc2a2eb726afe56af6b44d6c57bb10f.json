{"sha": "72af65b91cc2a2eb726afe56af6b44d6c57bb10f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJhZjY1YjkxY2MyYTJlYjcyNmFmZTU2YWY2YjQ0ZDZjNTdiYjEwZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-21T04:22:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-22T21:02:03Z"}, "message": "c++: -fsanitize=vptr and -fstrong-eval-order. [PR95221]\n\nWith -fstrong-eval-order=all we evaluate the function address before the\narguments.  But this caused trouble with virtual functions and\n-fsanitize=vptr; we would do vptr sanitization as part of calculating the\n'this' argument, and separately look at the vptr in order to find the\nfunction address.  Without -fstrong-eval-order=all 'this' is evaluated\nfirst, but with that flag the function address is evaluated first, so we\nwould access the null vptr before sanitizing it.\n\nFixed by instrumenting the OBJ_TYPE_REF of a virtual function call instead\nof the 'this' argument.\n\nThis issue suggests that we should be running the ubsan tests in multiple\nstandard modes like the rest of the G++ testsuite, so I've made that change\nas well.\n\ngcc/cp/ChangeLog:\n\n\t* cp-ubsan.c (cp_ubsan_maybe_instrument_member_call): For a virtual\n\tcall, instrument the OBJ_TYPE_REF.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ubsan/ubsan.exp: Use g++-dg-runtest.\n\t* c-c++-common/ubsan/bounds-13.c: Adjust.\n\t* c-c++-common/ubsan/bounds-2.c: Adjust.\n\t* c-c++-common/ubsan/div-by-zero-1.c: Adjust.\n\t* c-c++-common/ubsan/div-by-zero-6.c: Adjust.\n\t* c-c++-common/ubsan/div-by-zero-7.c: Adjust.\n\t* c-c++-common/ubsan/overflow-add-1.c: Adjust.\n\t* c-c++-common/ubsan/overflow-add-2.c: Adjust.\n\t* c-c++-common/ubsan/overflow-int128.c: Adjust.\n\t* c-c++-common/ubsan/overflow-sub-1.c: Adjust.\n\t* c-c++-common/ubsan/overflow-sub-2.c: Adjust.\n\t* g++.dg/ubsan/pr85029.C: Adjust.\n\t* g++.dg/ubsan/vptr-14.C: Adjust.", "tree": {"sha": "8d6d212d01adba64d540a4be66e7d5befedcf4ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d6d212d01adba64d540a4be66e7d5befedcf4ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72af65b91cc2a2eb726afe56af6b44d6c57bb10f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72af65b91cc2a2eb726afe56af6b44d6c57bb10f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72af65b91cc2a2eb726afe56af6b44d6c57bb10f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2221fb6f668a7edc8b8aad69772907aeabbbb0be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2221fb6f668a7edc8b8aad69772907aeabbbb0be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2221fb6f668a7edc8b8aad69772907aeabbbb0be"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "c40dac72b42b7fb071307d54694b2ce18d2403e7", "filename": "gcc/cp/cp-ubsan.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Fcp%2Fcp-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Fcp%2Fcp-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-ubsan.c?ref=72af65b91cc2a2eb726afe56af6b44d6c57bb10f", "patch": "@@ -118,14 +118,33 @@ cp_ubsan_maybe_instrument_member_call (tree stmt)\n {\n   if (call_expr_nargs (stmt) == 0)\n     return;\n-  tree *opp = &CALL_EXPR_ARG (stmt, 0);\n-  tree op = *opp;\n-  if (op == error_mark_node\n-      || !INDIRECT_TYPE_P (TREE_TYPE (op)))\n-    return;\n-  while (TREE_CODE (op) == COMPOUND_EXPR)\n+  tree op, *opp;\n+\n+  tree fn = CALL_EXPR_FN (stmt);\n+  if (fn && TREE_CODE (fn) == OBJ_TYPE_REF)\n+    {\n+      /* Virtual function call: Sanitize the use of the object pointer in the\n+\t OBJ_TYPE_REF, since the vtable reference will SEGV otherwise (95221).\n+\t OBJ_TYPE_REF_EXPR is ptr->vptr[N] and OBJ_TYPE_REF_OBJECT is ptr.  */\n+      opp = &OBJ_TYPE_REF_EXPR (fn);\n+      op = OBJ_TYPE_REF_OBJECT (fn);\n+      while (*opp != op)\n+\t{\n+\t  if (TREE_CODE (*opp) == COMPOUND_EXPR)\n+\t    opp = &TREE_OPERAND (*opp, 1);\n+\t  else\n+\t    opp = &TREE_OPERAND (*opp, 0);\n+\t}\n+    }\n+  else\n     {\n-      opp = &TREE_OPERAND (op, 1);\n+      /* Non-virtual call: Sanitize the 'this' argument.  */\n+      opp = &CALL_EXPR_ARG (stmt, 0);\n+      if (*opp == error_mark_node\n+\t  || !INDIRECT_TYPE_P (TREE_TYPE (*opp)))\n+\treturn;\n+      while (TREE_CODE (*opp) == COMPOUND_EXPR)\n+\topp = &TREE_OPERAND (*opp, 1);\n       op = *opp;\n     }\n   op = cp_ubsan_maybe_instrument_vptr (EXPR_LOCATION (stmt), op,"}, {"sha": "a8bce370f8f60e7cdeef6d9084776ed90aa7a9f1", "filename": "gcc/testsuite/c-c++-common/ubsan/bounds-13.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-13.c?ref=72af65b91cc2a2eb726afe56af6b44d6c57bb10f", "patch": "@@ -1,6 +1,7 @@\n /* PR sanitizer/71498 */\n /* { dg-do run } */\n /* { dg-options \"-fsanitize=bounds -Wno-array-bounds\" } */\n+/* { dg-options \"-fsanitize=bounds -Wno-array-bounds -Wno-volatile\" { target c++ } } */\n \n struct S { int a[100]; int b, c; } s;\n "}, {"sha": "ec4ef7eed20a6b6fc120a01e1f0ca432c9bdbbff", "filename": "gcc/testsuite/c-c++-common/ubsan/bounds-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-2.c?ref=72af65b91cc2a2eb726afe56af6b44d6c57bb10f", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-fsanitize=bounds -Wall -Wextra -Wno-unused -Wno-array-bounds -Wno-uninitialized\" } */\n+/* { dg-options \"-fsanitize=bounds -Wall -Wextra -Wno-unused -Wno-array-bounds -Wno-uninitialized -Wno-volatile\" { target c++ } } */\n \n /* Test runtime errors.  */\n "}, {"sha": "8b62ae743d815153f55b53c134f288706ad54b63", "filename": "gcc/testsuite/c-c++-common/ubsan/div-by-zero-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-1.c?ref=72af65b91cc2a2eb726afe56af6b44d6c57bb10f", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-fsanitize=integer-divide-by-zero -Wno-div-by-zero\" } */\n+/* { dg-options \"-fsanitize=integer-divide-by-zero -Wno-div-by-zero -Wno-volatile\" { target c++ } } */\n \n int\n main (void)"}, {"sha": "be017ad8179e56183bccf5b5a1d33c1edee012e0", "filename": "gcc/testsuite/c-c++-common/ubsan/div-by-zero-6.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-6.c?ref=72af65b91cc2a2eb726afe56af6b44d6c57bb10f", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-fsanitize=integer-divide-by-zero -Wno-div-by-zero\" } */\n+/* { dg-options \"-fsanitize=integer-divide-by-zero -Wno-div-by-zero -Wno-volatile\" { target c++ } } */\n \n #include <stdio.h>\n "}, {"sha": "643b76af143c693402f9813080f4c841724ef903", "filename": "gcc/testsuite/c-c++-common/ubsan/div-by-zero-7.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-7.c?ref=72af65b91cc2a2eb726afe56af6b44d6c57bb10f", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-fsanitize=integer-divide-by-zero -Wno-div-by-zero -fno-sanitize-recover=integer-divide-by-zero\" } */\n+/* { dg-options \"-fsanitize=integer-divide-by-zero -Wno-div-by-zero -fno-sanitize-recover=integer-divide-by-zero -Wno-volatile\" { target c++ } } */\n /* { dg-shouldfail \"ubsan\" } */\n \n #include <stdio.h>"}, {"sha": "3c0a17edb8547bc4b9e6c0adf246ac7e1b2283b0", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-add-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-1.c?ref=72af65b91cc2a2eb726afe56af6b44d6c57bb10f", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fno-sanitize-recover=signed-integer-overflow\" } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fno-sanitize-recover=signed-integer-overflow -Wno-volatile\" { target c++ } } */\n \n #define SCHAR_MAX __SCHAR_MAX__\n #define SHRT_MAX __SHRT_MAX__"}, {"sha": "8fa9074647af2414310b4a3de67a99681d80767a", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-add-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-2.c?ref=72af65b91cc2a2eb726afe56af6b44d6c57bb10f", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable\" } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -Wno-volatile\" { target c++ } } */\n \n #define INT_MAX __INT_MAX__\n #define INT_MIN (-__INT_MAX__ - 1)"}, {"sha": "10ccc79d0fea88e20a3a2615cbe5c771acddf02a", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-int128.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-int128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-int128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-int128.c?ref=72af65b91cc2a2eb726afe56af6b44d6c57bb10f", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do run } */\n /* { dg-require-effective-target int128 } */\n /* { dg-options \"-fsanitize=signed-integer-overflow\" } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-volatile\" { target c++ } } */\n \n /* 2^127 - 1 */\n #define INT128_MAX (__int128) (((unsigned __int128) 1 << ((__SIZEOF_INT128__ * __CHAR_BIT__) - 1)) - 1)"}, {"sha": "7ceb4ec60a733ac14b8420c42710d219c19bc956", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-sub-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-1.c?ref=72af65b91cc2a2eb726afe56af6b44d6c57bb10f", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fno-sanitize-recover=signed-integer-overflow\" } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fno-sanitize-recover=signed-integer-overflow -Wno-volatile\" { target c++ } } */\n \n #define SCHAR_MAX __SCHAR_MAX__\n #define SCHAR_MIN (-__SCHAR_MAX__ - 1)"}, {"sha": "92a2ea28af2598ab38db65c8c8122ac999084404", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-sub-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-2.c?ref=72af65b91cc2a2eb726afe56af6b44d6c57bb10f", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable\" } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -Wno-volatile\" { target c++ } } */\n \n #define INT_MAX __INT_MAX__\n #define INT_MIN (-__INT_MAX__ - 1)"}, {"sha": "836ce69cc15d4fac22265d4064e777ab04199ba3", "filename": "gcc/testsuite/g++.dg/ubsan/pr85029.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr85029.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr85029.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr85029.C?ref=72af65b91cc2a2eb726afe56af6b44d6c57bb10f", "patch": "@@ -1,7 +1,7 @@\n // PR sanitizer/85029\n // { dg-do compile }\n // { dg-skip-if \"\" { *-*-* } { \"-flto -fno-fat-lto-objects\" } }\n-// { dg-options \"-fsanitize=undefined\" }\n+// { dg-options \"-fsanitize=undefined -Wno-register\" }\n \n struct B {\n   virtual B bar ();"}, {"sha": "2bc98831d2e296989bcb2941766806be43918e58", "filename": "gcc/testsuite/g++.dg/ubsan/ubsan.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fubsan.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fubsan.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fubsan.exp?ref=72af65b91cc2a2eb726afe56af6b44d6c57bb10f", "patch": "@@ -26,7 +26,7 @@ ubsan_init\n \n # Main loop.\n if [check_effective_target_fsanitize_undefined] {\n-  gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C $srcdir/c-c++-common/ubsan/*.c]] \"\" \"\"\n+  g++-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C $srcdir/c-c++-common/ubsan/*.c]] \"\" \"\"\n }\n \n # All done."}, {"sha": "06cd66347d4d61b4d98e13aac295af9a770f48d7", "filename": "gcc/testsuite/g++.dg/ubsan/vptr-14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvptr-14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af65b91cc2a2eb726afe56af6b44d6c57bb10f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvptr-14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvptr-14.C?ref=72af65b91cc2a2eb726afe56af6b44d6c57bb10f", "patch": "@@ -1,5 +1,5 @@\n // PR sanitizer/89869\n-// { dg-do run }\n+// { dg-do run { target c++11 } }\n // { dg-options \"-fsanitize=vptr -fno-sanitize-recover=vptr\" }\n \n struct S { S *s = 0; virtual ~S () {} };"}]}