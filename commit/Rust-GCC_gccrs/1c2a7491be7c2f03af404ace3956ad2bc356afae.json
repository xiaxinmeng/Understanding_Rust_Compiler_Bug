{"sha": "1c2a7491be7c2f03af404ace3956ad2bc356afae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMyYTc0OTFiZTdjMmYwM2FmNDA0YWNlMzk1NmFkMmJjMzU2YWZhZQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-08-11T20:29:43Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-08-11T20:29:43Z"}, "message": "Propagate constant values or parametric expressions outside the scop region.\n\n2010-07-22  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-sese-to-poly.c (propagate_expr_outside_region): New.\n\t(rewrite_close_phi_out_of_ssa): Propagate constant values or\n\tparametric expressions outside the scop region.\n\t(rewrite_cross_bb_scalar_deps): Same.\n\t* sese.c (rename_uses): Use NULL_TREE instead of NULL for trees.\n\n\t* gcc.dg/graphite/run-id-5.c: New.\n\t* gcc.dg/graphite/run-id-6.c: New.\n\t* gfortran.dg/graphite/id-21.f: New.\n\nFrom-SVN: r163157", "tree": {"sha": "66fd9b46b2d3dfc6610aa0c8ce686f2899d5608f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66fd9b46b2d3dfc6610aa0c8ce686f2899d5608f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c2a7491be7c2f03af404ace3956ad2bc356afae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c2a7491be7c2f03af404ace3956ad2bc356afae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c2a7491be7c2f03af404ace3956ad2bc356afae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c2a7491be7c2f03af404ace3956ad2bc356afae/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "320532a81769a0dca7e2514aaedf977291a8054d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320532a81769a0dca7e2514aaedf977291a8054d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/320532a81769a0dca7e2514aaedf977291a8054d"}], "stats": {"total": 242, "additions": 231, "deletions": 11}, "files": [{"sha": "aa87d604ef3fbe1f18bd519c29738d5454456c05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2a7491be7c2f03af404ace3956ad2bc356afae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2a7491be7c2f03af404ace3956ad2bc356afae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c2a7491be7c2f03af404ace3956ad2bc356afae", "patch": "@@ -1,3 +1,11 @@\n+2010-08-02  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-sese-to-poly.c (propagate_expr_outside_region): New.\n+\t(rewrite_close_phi_out_of_ssa): Propagate constant values or\n+\tparametric expressions outside the scop region.\n+\t(rewrite_cross_bb_scalar_deps): Same.\n+\t* sese.c (rename_uses): Use NULL_TREE instead of NULL for trees.\n+\n 2010-08-02  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-sese-to-poly.c (rewrite_phi_out_of_ssa): Use"}, {"sha": "0ed18ef8a5321637e4756f8a9ae5ffbd911c7e3a", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2a7491be7c2f03af404ace3956ad2bc356afae/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2a7491be7c2f03af404ace3956ad2bc356afae/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=1c2a7491be7c2f03af404ace3956ad2bc356afae", "patch": "@@ -1,3 +1,15 @@\n+2010-07-22  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-sese-to-poly.c (propagate_expr_outside_region): New.\n+\t(rewrite_close_phi_out_of_ssa): Propagate constant values or\n+\tparametric expressions outside the scop region.\n+\t(rewrite_cross_bb_scalar_deps): Same.\n+\t* sese.c (rename_uses): Use NULL_TREE instead of NULL for trees.\n+\n+\t* gcc.dg/graphite/run-id-5.c: New.\n+\t* gcc.dg/graphite/run-id-6.c: New.\n+\t* gfortran.dg/graphite/id-21.f: New.\n+\n 2010-07-22  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-sese-to-poly.c (rewrite_phi_out_of_ssa): Use"}, {"sha": "574a25b221362be8edc96dd027b758e9d70212d0", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 75, "deletions": 10, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2a7491be7c2f03af404ace3956ad2bc356afae/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2a7491be7c2f03af404ace3956ad2bc356afae/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=1c2a7491be7c2f03af404ace3956ad2bc356afae", "patch": "@@ -2182,6 +2182,45 @@ scalar_close_phi_node_p (gimple phi)\n   return (gimple_phi_num_args (phi) == 1);\n }\n \n+/* For a definition DEF in REGION, propagates the expression EXPR in\n+   all the uses of DEF outside REGION.  */\n+\n+static void\n+propagate_expr_outside_region (tree def, tree expr, sese region)\n+{\n+  imm_use_iterator imm_iter;\n+  gimple use_stmt;\n+  gimple_seq stmts;\n+  bool replaced_once = false;\n+\n+  gcc_assert (TREE_CODE (def) == SSA_NAME\n+\t      && bb_in_sese_p (gimple_bb (SSA_NAME_DEF_STMT (def)), region));\n+\n+  expr = force_gimple_operand (unshare_expr (expr), &stmts, true,\n+\t\t\t       NULL_TREE);\n+\n+  FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, def)\n+    if (!is_gimple_debug (use_stmt)\n+\t&& !bb_in_sese_p (gimple_bb (use_stmt), region))\n+      {\n+\tssa_op_iter iter;\n+\tuse_operand_p use_p;\n+\n+\tFOR_EACH_PHI_OR_STMT_USE (use_p, use_stmt, iter, SSA_OP_ALL_USES)\n+\t  if (operand_equal_p (def, USE_FROM_PTR (use_p), 0)\n+\t      && (replaced_once = true))\n+\t    replace_exp (use_p, expr);\n+\n+\tupdate_stmt (use_stmt);\n+      }\n+\n+  if (replaced_once)\n+    {\n+      gsi_insert_seq_on_edge (SESE_ENTRY (region), stmts);\n+      gsi_commit_edge_inserts ();\n+    }\n+}\n+\n /* Rewrite out of SSA the reduction phi node at PSI by creating a zero\n    dimension array for it.  */\n \n@@ -2201,20 +2240,36 @@ rewrite_close_phi_out_of_ssa (gimple_stmt_iterator *psi, sese region)\n      before Graphite: see canonicalize_loop_closed_ssa_form.  */\n   gcc_assert (gimple_phi_num_args (phi) == 1);\n \n-  /* If res is scev analyzable, it is safe to ignore the close phi\n-     node: it will be code generated in the out of Graphite pass.  */\n-  if (scev_analyzable_p (res, region))\n-    {\n-      gsi_next (psi);\n-      return;\n-    }\n-\n   /* The phi node can be a non close phi node, when its argument is\n      invariant, or when it is defined in the same loop as the phi node.  */\n   if (is_gimple_min_invariant (arg)\n       || SSA_NAME_IS_DEFAULT_DEF (arg)\n       || gimple_bb (SSA_NAME_DEF_STMT (arg))->loop_father == bb->loop_father)\n     stmt = gimple_build_assign (res, arg);\n+\n+  /* If res is scev analyzable and is not a scalar value, it is safe\n+     to ignore the close phi node: it will be code generated in the\n+     out of Graphite pass.  */\n+  else if (scev_analyzable_p (res, region))\n+    {\n+      loop_p loop = loop_containing_stmt (SSA_NAME_DEF_STMT (res));\n+      tree scev;\n+\n+      if (!loop_in_sese_p (loop, region))\n+\t{\n+\t  loop = loop_containing_stmt (SSA_NAME_DEF_STMT (arg));\n+\t  scev = scalar_evolution_in_region (region, loop, arg);\n+\t  scev = compute_overall_effect_of_inner_loop (loop, scev);\n+\t}\n+      else\n+\t  scev = scalar_evolution_in_region (region, loop, res);\n+\n+      if (tree_does_not_contain_chrecs (scev))\n+\tpropagate_expr_outside_region (res, scev, region);\n+\n+      gsi_next (psi);\n+      return;\n+    }\n   else\n     {\n       tree zero_dim_array = create_zero_dim_array (var, \"Close_Phi\");\n@@ -2428,10 +2483,20 @@ rewrite_cross_bb_scalar_deps (sese region, gimple_stmt_iterator *gsi)\n       return;\n     }\n \n-  if (!is_gimple_reg (def)\n-      || scev_analyzable_p (def, region))\n+  if (!is_gimple_reg (def))\n     return;\n \n+  if (scev_analyzable_p (def, region))\n+    {\n+      loop_p loop = loop_containing_stmt (SSA_NAME_DEF_STMT (def));\n+      tree scev = scalar_evolution_in_region (region, loop, def);\n+\n+      if (tree_does_not_contain_chrecs (scev))\n+\tpropagate_expr_outside_region (def, scev, region);\n+\n+      return;\n+    }\n+\n   def_bb = gimple_bb (stmt);\n \n   FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, def)"}, {"sha": "651b8fbc9dac7df08dfbb96ee2682c73c0d6d0fe", "filename": "gcc/sese.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2a7491be7c2f03af404ace3956ad2bc356afae/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2a7491be7c2f03af404ace3956ad2bc356afae/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=1c2a7491be7c2f03af404ace3956ad2bc356afae", "patch": "@@ -544,7 +544,7 @@ rename_uses (gimple copy, htab_t rename_map, gimple_stmt_iterator *gsi_tgt,\n \n       /* Replace the old_name with the new_expr.  */\n       new_expr = force_gimple_operand (unshare_expr (new_expr), &stmts,\n-\t\t\t\t       true, NULL);\n+\t\t\t\t       true, NULL_TREE);\n       gsi_insert_seq_before (gsi_tgt, stmts, GSI_SAME_STMT);\n       replace_exp (use_p, new_expr);\n       set_rename (rename_map, old_name, new_expr);"}, {"sha": "d1c803610e11b71ee45dbd66b0b256e005038080", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2a7491be7c2f03af404ace3956ad2bc356afae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2a7491be7c2f03af404ace3956ad2bc356afae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c2a7491be7c2f03af404ace3956ad2bc356afae", "patch": "@@ -1,3 +1,9 @@\n+2010-08-02  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* gcc.dg/graphite/run-id-5.c: New.\n+\t* gcc.dg/graphite/run-id-6.c: New.\n+\t* gfortran.dg/graphite/id-21.f: New.\n+\n 2010-08-02  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* gcc.dg/graphite/id-24.c: New."}, {"sha": "9005c43fd4734897b2fc9a4807ab33c60bf1516d", "filename": "gcc/testsuite/gcc.dg/graphite/run-id-5.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2a7491be7c2f03af404ace3956ad2bc356afae/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2a7491be7c2f03af404ace3956ad2bc356afae/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-5.c?ref=1c2a7491be7c2f03af404ace3956ad2bc356afae", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model -fno-tree-scev-cprop -fgraphite-identity\" } */\n+/* { dg-require-effective-target vect_int } */\n+\n+/* gcc.dg/vect/no-scevccp-outer-22.c was miscompiled by Graphite.\n+   Adding it here to always test it with Graphite.  */\n+\n+#include <stdarg.h>\n+\n+extern void abort ();\n+#define N 40\n+\n+int a[N];\n+\n+__attribute__ ((noinline)) int\n+foo (int n){\n+  int i,j;\n+  int sum;\n+\n+  if (n<=0)\n+    return 0;\n+\n+  /* inner-loop index j used after the inner-loop */\n+  for (i = 0; i < N; i++) {\n+    sum = 0;\n+    for (j = 0; j < n; j+=2) {\n+      sum += j;\n+    }\n+    a[i] = sum + j;\n+  }\n+}\n+\n+int main (void)\n+{\n+  int i,j;\n+  int sum;\n+\n+  for (i=0; i<N; i++)\n+    a[i] = i;\n+\n+  foo (N);\n+\n+  /* check results:  */\n+  for (i=0; i<N; i++)\n+    {\n+      sum = 0;\n+      for (j = 0; j < N; j+=2)\n+        sum += j;\n+      if (a[i] != sum + j)\n+        abort();\n+    }\n+\n+  return 0;\n+}\n+"}, {"sha": "dafa7f8bec7e12123dd3b09d4a7886b4a95bad80", "filename": "gcc/testsuite/gcc.dg/graphite/run-id-6.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2a7491be7c2f03af404ace3956ad2bc356afae/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2a7491be7c2f03af404ace3956ad2bc356afae/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-6.c?ref=1c2a7491be7c2f03af404ace3956ad2bc356afae", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model -fno-tree-scev-cprop -fgraphite-identity\" } */\n+/* { dg-require-effective-target vect_int } */\n+\n+/* gcc.dg/vect/no-scevccp-outer-4.c was miscompiled by Graphite.\n+   Adding it here to always test it with Graphite.  */\n+\n+#include <stdarg.h>\n+\n+extern void abort ();\n+#define N 40\n+\n+int a[N];\n+\n+/* induction variable k advances through inner and outer loops.  */\n+\n+__attribute__ ((noinline)) int\n+foo (int n){\n+  int i,j,k=0;\n+  int sum;\n+\n+  if (n<=0)\n+    return 0;\n+\n+  for (i = 0; i < N; i++) {\n+    sum = 0;\n+    for (j = 0; j < n; j+=2) {\n+      sum += k++;\n+    }\n+    a[i] = sum + j;\n+  }\n+}\n+\n+int main (void)\n+{\n+  int i,j,k=0;\n+  int sum;\n+\n+  for (i=0; i<N; i++)\n+    a[i] = i;\n+\n+  foo (N);\n+\n+    /* check results:  */\n+  for (i=0; i<N; i++)\n+    {\n+      sum = 0;\n+      for (j = 0; j < N; j+=2)\n+        sum += k++;\n+      if (a[i] != sum + j)\n+\tabort();\n+    }\n+\n+  return 0;\n+}\n+"}, {"sha": "4fa047ed6f283aca4eb8dc7c9c54028b846bea73", "filename": "gcc/testsuite/gfortran.dg/graphite/id-21.f", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2a7491be7c2f03af404ace3956ad2bc356afae/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-21.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2a7491be7c2f03af404ace3956ad2bc356afae/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-21.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-21.f?ref=1c2a7491be7c2f03af404ace3956ad2bc356afae", "patch": "@@ -0,0 +1,20 @@\n+      MODULE LES3D_DATA\n+      DOUBLE PRECISION,ALLOCATABLE,DIMENSION(:,:,:) ::\n+     >             P, T, H\n+      DOUBLE PRECISION,ALLOCATABLE,DIMENSION(:,:,:,:) ::\n+     >             HF\n+      DOUBLE PRECISION,ALLOCATABLE,DIMENSION(:,:,:,:,:) ::\n+     >             Q\n+      END MODULE LES3D_DATA\n+      USE LES3D_DATA\n+      DO K = 1, KMAX - 1\n+         DO J = 1, JMAX - 1\n+            DO I = 1, I2\n+               T(I,J,K) = (EI - HF(I,J,K,1)) / HF(I,J,K,3)\n+            ENDDO\n+            P(1:I2,J,K) = Q(1:I2,J,K,1,M) * HF(1:I2,J,K,4) * T(1:I2,J,K)\n+            IF(ISGSK .EQ. 1) H(1:I2,J,K) =\n+     >                   (Q(1:I2,J,K,5,M) + P(1:I2,J,K))\n+         END DO\n+      ENDDO\n+      END"}]}