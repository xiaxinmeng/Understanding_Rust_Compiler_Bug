{"sha": "05168bb71efc90918b8cce28be57dca98b60c465", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUxNjhiYjcxZWZjOTA5MThiOGNjZTI4YmU1N2RjYTk4YjYwYzQ2NQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2011-10-30T21:59:24Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2011-10-30T21:59:24Z"}, "message": "re PR other/50573 (configure lists --with-gnu-ld twice)\n\n2011-10-30  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/50573\n\t* check.c (gfc_check_dshift): Update argument checking for BOZ.\n\tUpdate checking SHIFT against BITSIZE of I or J.\n\t* intrinsic.texi: Update docs for DSHIFTL and DSHIFTR.\n\n2011-10-30  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/50573\n\t* gfortran.dg/dshift_3.f90: New test.\n\nFrom-SVN: r180686", "tree": {"sha": "c29a5b32fa13860e9024f18229d3fa7c0d2d8a8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c29a5b32fa13860e9024f18229d3fa7c0d2d8a8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05168bb71efc90918b8cce28be57dca98b60c465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05168bb71efc90918b8cce28be57dca98b60c465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05168bb71efc90918b8cce28be57dca98b60c465", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05168bb71efc90918b8cce28be57dca98b60c465/comments", "author": null, "committer": null, "parents": [{"sha": "da957891ff2614fc9fa5e88790cf608da07bd5ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da957891ff2614fc9fa5e88790cf608da07bd5ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da957891ff2614fc9fa5e88790cf608da07bd5ea"}], "stats": {"total": 107, "additions": 90, "deletions": 17}, "files": [{"sha": "40d2a304bd56b8e984e7a9b9ed81761486d2387e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05168bb71efc90918b8cce28be57dca98b60c465/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05168bb71efc90918b8cce28be57dca98b60c465/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=05168bb71efc90918b8cce28be57dca98b60c465", "patch": "@@ -1,3 +1,10 @@\n+2011-10-30  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/50573\n+\t* check.c (gfc_check_dshift): Update argument checking for BOZ.\n+\tUpdate checking SHIFT against BITSIZE of I or J.\n+\t* intrinsic.texi: Update docs for DSHIFTL and DSHIFTR.\n+\n 2011-10-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* check.c (gfc_check_atan_2): Typo in comment."}, {"sha": "d9b9a9cd580031174793db7eacf683cc28c16099", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05168bb71efc90918b8cce28be57dca98b60c465/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05168bb71efc90918b8cce28be57dca98b60c465/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=05168bb71efc90918b8cce28be57dca98b60c465", "patch": "@@ -1483,7 +1483,14 @@ gfc_check_dshift (gfc_expr *i, gfc_expr *j, gfc_expr *shift)\n   if (type_check (j, 1, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n-  if (same_type_check (i, 0, j, 1) == FAILURE)\n+  if (i->is_boz && j->is_boz)\n+    {\n+      gfc_error (\"'I' at %L and 'J' at %L cannot both be BOZ literal \"\n+\t\t \"constants\", &i->where, &j->where);\n+      return FAILURE;\n+    }\n+\n+  if (!i->is_boz && !j->is_boz && same_type_check (i, 0, j, 1) == FAILURE)\n     return FAILURE;\n \n   if (type_check (shift, 2, BT_INTEGER) == FAILURE)\n@@ -1492,8 +1499,18 @@ gfc_check_dshift (gfc_expr *i, gfc_expr *j, gfc_expr *shift)\n   if (nonnegative_check (\"SHIFT\", shift) == FAILURE)\n     return FAILURE;\n \n-  if (less_than_bitsize1 (\"I\", i, \"SHIFT\", shift, true) == FAILURE)\n-    return FAILURE;\n+  if (i->is_boz)\n+    {\n+      if (less_than_bitsize1 (\"J\", j, \"SHIFT\", shift, true) == FAILURE)\n+    \treturn FAILURE;\n+      i->ts.kind = j->ts.kind;\n+    }\n+  else\n+    {\n+      if (less_than_bitsize1 (\"I\", i, \"SHIFT\", shift, true) == FAILURE)\n+    \treturn FAILURE;\n+      j->ts.kind = i->ts.kind;\n+    }\n \n   return SUCCESS;\n }"}, {"sha": "24af4d5ac7d5510bd131dd0050eeef136e685ec7", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05168bb71efc90918b8cce28be57dca98b60c465/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05168bb71efc90918b8cce28be57dca98b60c465/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=05168bb71efc90918b8cce28be57dca98b60c465", "patch": "@@ -3794,22 +3794,27 @@ Elemental function\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{I} @tab Shall be of type @code{INTEGER}.\n-@item @var{J} @tab Shall be of type @code{INTEGER}, and of the same kind\n-as @var{I}.\n-@item @var{SHIFT} @tab Shall be of type @code{INTEGER}.\n+@item @var{I} @tab Shall be of type @code{INTEGER} or a BOZ constant.\n+@item @var{J} @tab Shall be of type @code{INTEGER} or a BOZ constant.\n+If both @var{I} and @var{J} have integer type, then they shall have\n+the same kind type parameter. @var{I} and @var{J} shall not both be\n+BOZ constants.\n+@item @var{SHIFT} @tab Shall be of type @code{INTEGER}. It shall\n+be nonnegative.  If @var{I} is not a BOZ constant, then @var{SHIFT}\n+shall be less than or equal to @code{BIT_SIZE(I)}; otherwise,\n+@var{SHIFT} shall be less than or equal to @code{BIT_SIZE(J)}.\n @end multitable\n \n @item @emph{Return value}:\n-The return value has same type and kind as @var{I}.\n+If either @var{I} or @var{J} is a BOZ constant, it is first converted\n+as if by the intrinsic function @code{INT} to an integer type with the\n+kind type parameter of the other.\n \n @item @emph{See also}:\n @ref{DSHIFTR}\n-\n @end table\n \n \n-\n @node DSHIFTR\n @section @code{DSHIFTR} --- Combined right shift\n @fnindex DSHIFTR\n@@ -3834,22 +3839,27 @@ Elemental function\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{I} @tab Shall be of type @code{INTEGER}.\n-@item @var{J} @tab Shall be of type @code{INTEGER}, and of the same kind\n-as @var{I}.\n-@item @var{SHIFT} @tab Shall be of type @code{INTEGER}.\n+@item @var{I} @tab Shall be of type @code{INTEGER} or a BOZ constant.\n+@item @var{J} @tab Shall be of type @code{INTEGER} or a BOZ constant.\n+If both @var{I} and @var{J} have integer type, then they shall have\n+the same kind type parameter. @var{I} and @var{J} shall not both be\n+BOZ constants.\n+@item @var{SHIFT} @tab Shall be of type @code{INTEGER}. It shall\n+be nonnegative.  If @var{I} is not a BOZ constant, then @var{SHIFT}\n+shall be less than or equal to @code{BIT_SIZE(I)}; otherwise,\n+@var{SHIFT} shall be less than or equal to @code{BIT_SIZE(J)}.\n @end multitable\n \n @item @emph{Return value}:\n-The return value has same type and kind as @var{I}.\n+If either @var{I} or @var{J} is a BOZ constant, it is first converted\n+as if by the intrinsic function @code{INT} to an integer type with the\n+kind type parameter of the other.\n \n @item @emph{See also}:\n @ref{DSHIFTL}\n-\n @end table\n \n \n-\n @node DTIME\n @section @code{DTIME} --- Execution time subroutine (or function)\n @fnindex DTIME"}, {"sha": "0828817cee53763ece222dc902cd1850bd942423", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05168bb71efc90918b8cce28be57dca98b60c465/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05168bb71efc90918b8cce28be57dca98b60c465/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05168bb71efc90918b8cce28be57dca98b60c465", "patch": "@@ -1,3 +1,8 @@\n+2011-10-30  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/50753\n+\t* gfortran.dg/dshift_3.f90: New test.\n+\n 2011-10-30  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* gcc.dg/scal-to-vec2.c (dg-options): Add -fno-common to options on"}, {"sha": "1f214c7d1c76cff314a7fa38c38a845d2482fd31", "filename": "gcc/testsuite/gfortran.dg/dshift_3.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05168bb71efc90918b8cce28be57dca98b60c465/gcc%2Ftestsuite%2Fgfortran.dg%2Fdshift_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05168bb71efc90918b8cce28be57dca98b60c465/gcc%2Ftestsuite%2Fgfortran.dg%2Fdshift_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdshift_3.f90?ref=05168bb71efc90918b8cce28be57dca98b60c465", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do compile }\n+! PR fortran/50753\n+subroutine foo(i, j, k)\n+\n+   implicit none\n+\n+   integer(4), intent(in) :: i, j\n+   integer(8), intent(in) :: k\n+\n+   print *, dshiftl(i,      j, 134)     ! { dg-error \"must be less than or equal\" }\n+   print *, dshiftl(z'FFF', j, 134)     ! { dg-error \"must be less than or equal\" }\n+   print *, dshiftl(i, j, -10)          ! { dg-error \"must be nonnegative\" }\n+   print *, dshiftl(z'FFF', z'EEE', 10) ! { dg-error \"cannot both be\" }\n+   print *, dshiftl(z'FFF', j, 10)\n+   print *, dshiftl(i, z'EEE', 10)\n+   print *, dshiftl(i, j, 10)\n+   print *, dshiftl(i, k, 10)           ! { dg-error \"must be the same type and kind\" }\n+   print *, dshiftl(k, j, 10)           ! { dg-error \"must be the same type and kind\" }\n+   print *, dshiftl(i, j, k)\n+   print *, dshiftl(i, j, z'd')\n+\n+   print *, dshiftr(i,      j, 134)     ! { dg-error \"must be less than or equal\" }\n+   print *, dshiftr(z'FFF', j, 134)     ! { dg-error \"must be less than or equal\" }\n+   print *, dshiftr(i, j, -10)          ! { dg-error \"must be nonnegative\" }\n+   print *, dshiftr(z'FFF', z'EEE', 10) ! { dg-error \"cannot both be\" }\n+   print *, dshiftr(z'FFF', j, 10)\n+   print *, dshiftr(i, z'EEE', 10)\n+   print *, dshiftr(i, j, 10)\n+   print *, dshiftr(i, k, 10)           ! { dg-error \"must be the same type and kind\" }\n+   print *, dshiftr(k, j, 10)           ! { dg-error \"must be the same type and kind\" }\n+   print *, dshiftr(i, j, k)\n+   print *, dshiftr(i, j, z'd')\n+\n+end subroutine foo"}]}