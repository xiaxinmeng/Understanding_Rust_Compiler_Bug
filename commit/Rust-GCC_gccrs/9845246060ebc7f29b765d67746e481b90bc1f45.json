{"sha": "9845246060ebc7f29b765d67746e481b90bc1f45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg0NTI0NjA2MGViYzdmMjliNzY1ZDY3NzQ2ZTQ4MWI5MGJjMWY0NQ==", "commit": {"author": {"name": "Dominique d'Humieres", "email": "dominiq@lps.ens.fr", "date": "2017-12-10T19:11:18Z"}, "committer": {"name": "Dominique d'Humieres", "email": "dominiq@gcc.gnu.org", "date": "2017-12-10T19:11:18Z"}, "message": "re PR fortran/53478 (gfortran segfaults when module name clashes with C binding name of procedure)\n\n2017-12-10  Dominique d'Humieres  <dominiq@lps.ens.fr>\n\n\tPR fortran/53478\n\t* gfortran.h (gfc_find_case_gsymbol): New prototype.\n\t* symbol.c (gfc_find_case_gsymbol): New procedure, case\n\tinsensistive version of gfc_find_gsymbol.\n\t* resolve.c (resolve_common_blocks): Use it.\n\tReplace %s with %qs where needed.\n\n\t* gfortran.dg/binding_label_tests_4.f03: Update dg-error.\n\t* gfortran.dg/binding_label_tests_6.f03: Likewise.\n\t* gfortran.dg/binding_label_tests_7.f03: Likewise.\n\t* gfortran.dg/binding_label_tests_8.f03: Likewise.\n\t* gfortran.dg/binding_label_tests_10_main.f03: Likewise.\n\t* gfortran.dg/binding_label_tests_11_main.f03: Likewise.\n\t* gfortran.dg/binding_label_tests_13_main.f03: Likewise.\n\t* gfortran.dg/test_common_binding_labels_3_main.f03: Likewise.\n\t* gfortran.dg/binding_label_tests_29.f90: New test.\n\nFrom-SVN: r255530", "tree": {"sha": "e0047c9906a51d84e06d2944ae385944c060896f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0047c9906a51d84e06d2944ae385944c060896f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9845246060ebc7f29b765d67746e481b90bc1f45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9845246060ebc7f29b765d67746e481b90bc1f45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9845246060ebc7f29b765d67746e481b90bc1f45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9845246060ebc7f29b765d67746e481b90bc1f45/comments", "author": {"login": "DominiquedHumieres", "id": 18394944, "node_id": "MDQ6VXNlcjE4Mzk0OTQ0", "avatar_url": "https://avatars.githubusercontent.com/u/18394944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DominiquedHumieres", "html_url": "https://github.com/DominiquedHumieres", "followers_url": "https://api.github.com/users/DominiquedHumieres/followers", "following_url": "https://api.github.com/users/DominiquedHumieres/following{/other_user}", "gists_url": "https://api.github.com/users/DominiquedHumieres/gists{/gist_id}", "starred_url": "https://api.github.com/users/DominiquedHumieres/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DominiquedHumieres/subscriptions", "organizations_url": "https://api.github.com/users/DominiquedHumieres/orgs", "repos_url": "https://api.github.com/users/DominiquedHumieres/repos", "events_url": "https://api.github.com/users/DominiquedHumieres/events{/privacy}", "received_events_url": "https://api.github.com/users/DominiquedHumieres/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b769d06ee35e1fa51c6a1d752664c04d456c9244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b769d06ee35e1fa51c6a1d752664c04d456c9244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b769d06ee35e1fa51c6a1d752664c04d456c9244"}], "stats": {"total": 107, "additions": 81, "deletions": 26}, "files": [{"sha": "a668e12eb3e8a59cb76166a3acdd43b5da1e8b34", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9845246060ebc7f29b765d67746e481b90bc1f45", "patch": "@@ -1,3 +1,12 @@\n+2017-12-10  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR fortran/53478\n+\t* gfortran.h (gfc_find_case_gsymbol): New prototype.\n+\t* symbol.c (gfc_find_case_gsymbol): New procedure, case\n+\tinsensistive version of gfc_find_gsymbol.\n+\t* resolve.c (resolve_common_blocks): Use it.\n+\tReplace %s with %qs where needed.\n+\n 2017-12-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/82934"}, {"sha": "c5e62d7200a3b64b66a9d94984b258cb235dc417", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=9845246060ebc7f29b765d67746e481b90bc1f45", "patch": "@@ -3035,6 +3035,7 @@ void gfc_free_dt_list (void);\n \n gfc_gsymbol *gfc_get_gsymbol (const char *);\n gfc_gsymbol *gfc_find_gsymbol (gfc_gsymbol *, const char *);\n+gfc_gsymbol *gfc_find_case_gsymbol (gfc_gsymbol *, const char *);\n \n gfc_typebound_proc* gfc_get_typebound_proc (gfc_typebound_proc*);\n gfc_symbol* gfc_get_derived_super_type (gfc_symbol*);"}, {"sha": "f819b7158612979db6cf6c733d8174868d47a3bd", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=9845246060ebc7f29b765d67746e481b90bc1f45", "patch": "@@ -1056,7 +1056,7 @@ resolve_common_blocks (gfc_symtree *common_root)\n \t\t\t       common_root->n.common->binding_label);\n       if (gsym && gsym->type != GSYM_COMMON)\n \t{\n-\t  gfc_error (\"COMMON block at %L with binding label %s uses the same \"\n+\t  gfc_error (\"COMMON block at %L with binding label %qs uses the same \"\n \t\t     \"global identifier as entity at %L\",\n \t\t     &common_root->n.common->where,\n \t\t     common_root->n.common->binding_label, &gsym->where);\n@@ -11542,7 +11542,7 @@ gfc_verify_binding_labels (gfc_symbol *sym)\n       || sym->attr.flavor == FL_DERIVED || !sym->binding_label)\n     return;\n \n-  gsym = gfc_find_gsymbol (gfc_gsym_root, sym->binding_label);\n+  gsym = gfc_find_case_gsymbol (gfc_gsym_root, sym->binding_label);\n \n   if (sym->module)\n     module = sym->module;\n@@ -11578,7 +11578,7 @@ gfc_verify_binding_labels (gfc_symbol *sym)\n \n   if (sym->attr.flavor == FL_VARIABLE && gsym->type != GSYM_UNKNOWN)\n     {\n-      gfc_error (\"Variable %s with binding label %s at %L uses the same global \"\n+      gfc_error (\"Variable %qs with binding label %qs at %L uses the same global \"\n \t\t \"identifier as entity at %L\", sym->name,\n \t\t sym->binding_label, &sym->declared_at, &gsym->where);\n       /* Clear the binding label to prevent checking multiple times.  */\n@@ -11591,8 +11591,8 @@ gfc_verify_binding_labels (gfc_symbol *sym)\n     {\n       /* This can only happen if the variable is defined in a module - if it\n \t isn't the same module, reject it.  */\n-      gfc_error (\"Variable %s from module %s with binding label %s at %L uses \"\n-\t\t   \"the same global identifier as entity at %L from module %s\",\n+      gfc_error (\"Variable %qs from module %qs with binding label %qs at %L \"\n+\t\t \"uses the same global identifier as entity at %L from module %qs\",\n \t\t sym->name, module, sym->binding_label,\n \t\t &sym->declared_at, &gsym->where, gsym->mod_name);\n       sym->binding_label = NULL;\n@@ -11608,7 +11608,7 @@ gfc_verify_binding_labels (gfc_symbol *sym)\n       /* Print an error if the procedure is defined multiple times; we have to\n \t exclude references to the same procedure via module association or\n \t multiple checks for the same procedure.  */\n-      gfc_error (\"Procedure %s with binding label %s at %L uses the same \"\n+      gfc_error (\"Procedure %qs with binding label %qs at %L uses the same \"\n \t\t \"global identifier as entity at %L\", sym->name,\n \t\t sym->binding_label, &sym->declared_at, &gsym->where);\n       sym->binding_label = NULL;"}, {"sha": "dc1688aa2d7e6590aad49206d85ff6b4763e04c9", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=9845246060ebc7f29b765d67746e481b90bc1f45", "patch": "@@ -4291,6 +4291,29 @@ gfc_find_gsymbol (gfc_gsymbol *symbol, const char *name)\n }\n \n \n+/* Case insensitive search a tree for the global symbol.  */\n+\n+gfc_gsymbol *\n+gfc_find_case_gsymbol (gfc_gsymbol *symbol, const char *name)\n+{\n+  int c;\n+\n+  if (symbol == NULL)\n+    return NULL;\n+\n+  while (symbol)\n+    {\n+      c = strcasecmp (name, symbol->name);\n+      if (!c)\n+\treturn symbol;\n+\n+      symbol = (c < 0) ? symbol->left : symbol->right;\n+    }\n+\n+  return NULL;\n+}\n+\n+\n /* Compare two global symbols. Used for managing the BB tree.  */\n \n static int"}, {"sha": "dbffa8214c76888137077689a1fe42c2c4626d2c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9845246060ebc7f29b765d67746e481b90bc1f45", "patch": "@@ -1,3 +1,16 @@\n+2017-12-10  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR fortran/53478\n+\t* gfortran.dg/binding_label_tests_4.f03: Update dg-error.\n+\t* gfortran.dg/binding_label_tests_6.f03: Likewise.\n+\t* gfortran.dg/binding_label_tests_7.f03: Likewise.\n+\t* gfortran.dg/binding_label_tests_8.f03: Likewise.\n+\t* gfortran.dg/binding_label_tests_10_main.f03: Likewise.\n+\t* gfortran.dg/binding_label_tests_11_main.f03: Likewise.\n+\t* gfortran.dg/binding_label_tests_13_main.f03: Likewise.\n+\t* gfortran.dg/test_common_binding_labels_3_main.f03: Likewise.\n+\t* gfortran.dg/binding_label_tests_29.f90: New test.\n+\n 2017-12-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/83337"}, {"sha": "fc961a4f3bf92db9b01b5d8eed21b4f370b9ad81", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_10_main.f03", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_10_main.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_10_main.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_10_main.f03?ref=9845246060ebc7f29b765d67746e481b90bc1f45", "patch": "@@ -3,11 +3,10 @@\n module binding_label_tests_10_main\n   use iso_c_binding\n   implicit none\n-  integer(c_int), bind(c,name=\"c_one\") :: one ! { dg-error \"Variable one from module binding_label_tests_10 with binding label c_one at .1. uses the same global identifier as entity at .2. from module binding_label_tests_10_main\" }\n+  integer(c_int), bind(c,name=\"c_one\") :: one ! { dg-error \"Variable 'one' from module 'binding_label_tests_10' with binding label 'c_one' at .1. uses the same global identifier as entity at .2. from module 'binding_label_tests_10_main'\" }\n end module binding_label_tests_10_main\n \n program main\n-  use binding_label_tests_10 ! { dg-error \"Variable one from module binding_label_tests_10 with binding label c_one at .1. uses the same global identifier as entity at .2. from module binding_label_tests_10_main\" }\n+  use binding_label_tests_10 ! { dg-error \"Variable 'one' from module 'binding_label_tests_10' with binding label 'c_one' at .1. uses the same global identifier as entity at .2. from module 'binding_label_tests_10_main'\" }\n   use binding_label_tests_10_main\n end program main\n-! { dg-final { cleanup-modules \"binding_label_tests_10\" } }"}, {"sha": "c7a75b5cbf9dd7e7f509679a099a8498f1dd5e2c", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_11_main.f03", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_11_main.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_11_main.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_11_main.f03?ref=9845246060ebc7f29b765d67746e481b90bc1f45", "patch": "@@ -4,14 +4,13 @@ module binding_label_tests_11_main\n   use iso_c_binding, only: c_int\n   implicit none\n contains\n-  function one() bind(c, name=\"c_one\") ! { dg-error \"Procedure one with binding label c_one at .1. uses the same global identifier as entity at .2.\" }\n+  function one() bind(c, name=\"c_one\") ! { dg-error \"Procedure 'one' with binding label 'c_one' at .1. uses the same global identifier as entity at .2.\" }\n     integer(c_int) one\n     one = 1\n   end function one\n end module binding_label_tests_11_main\n \n program main\n-  use binding_label_tests_11 ! { dg-error \"Procedure one with binding label c_one at .1. uses the same global identifier as entity at .2.\" }\n+  use binding_label_tests_11 ! { dg-error \"Procedure 'one' with binding label 'c_one' at .1. uses the same global identifier as entity at .2.\" }\n   use binding_label_tests_11_main\n end program main\n-! { dg-final { cleanup-modules \"binding_label_tests_11\" } }"}, {"sha": "55743b79b202abb035e6de9135333eb1515776f5", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_13_main.f03", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_13_main.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_13_main.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_13_main.f03?ref=9845246060ebc7f29b765d67746e481b90bc1f45", "patch": "@@ -2,12 +2,11 @@\n ! { dg-compile-aux-modules \"binding_label_tests_13.f03\" }\n module binding_label_tests_13_main\n   use, intrinsic :: iso_c_binding, only: c_int\n-  integer(c_int) :: c3  ! { dg-error \"Variable c3 from module binding_label_tests_13_main with binding label c3 at .1. uses the same global identifier as entity at .2. from module binding_label_tests_13\" }\n+  integer(c_int) :: c3  ! { dg-error \"Variable 'c3' from module 'binding_label_tests_13_main' with binding label 'c3' at .1. uses the same global identifier as entity at .2. from module 'binding_label_tests_13'\" }\n   bind(c) c3\n \n contains\n   subroutine c_sub() BIND(c, name = \"C_Sub\")\n-    use binding_label_tests_13 ! { dg-error \"Variable c3 from module binding_label_tests_13_main with binding label c3 at .1. uses the same global identifier as entity at .2. from module binding_label_tests_13\" }\n+    use binding_label_tests_13 ! { dg-error \"Variable 'c3' from module 'binding_label_tests_13_main' with binding label 'c3' at .1. uses the same global identifier as entity at .2. from module 'binding_label_tests_13'\" }\n   end subroutine c_sub\n end module binding_label_tests_13_main\n-! { dg-final { cleanup-modules \"binding_label_tests_13\" } }"}, {"sha": "d4b6cfbc04ba22beacd3fb1ff67ec2cbf5628924", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_29.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_29.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_29.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_29.f90?ref=9845246060ebc7f29b765d67746e481b90bc1f45", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! PR53478\n+\n+module test_bug ! { dg-error \"Procedure 'test' with binding label 'Test_Bug' at .1. uses the same global identifier as entity at .2.\" }\n+\n+use, intrinsic :: ISO_C_BINDING\n+\n+contains\n+\n+  subroutine test() bind (C, name = \"Test_Bug\") ! { dg-error \"Procedure 'test' with binding label 'Test_Bug' at .1. uses the same global identifier as entity at .2.\" }\n+  end subroutine\n+\n+end module"}, {"sha": "7214289c976847ed6f8b3fa46dbe78819b9b7483", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_4.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_4.f03?ref=9845246060ebc7f29b765d67746e481b90bc1f45", "patch": "@@ -2,7 +2,7 @@\n module A\n   use, intrinsic :: iso_c_binding\n contains\n-  subroutine pA() bind(c, name='printf') ! { dg-error \"Procedure pb with binding label printf at .1. uses the same global identifier as entity at .2.\" }\n+  subroutine pA() bind(c, name='printf') ! { dg-error \"Procedure 'pb' with binding label 'printf' at .1. uses the same global identifier as entity at .2.\" }\n     print *, 'hello from pA'\n   end subroutine pA\n end module A\n@@ -11,7 +11,7 @@ module B\n   use, intrinsic :: iso_c_binding\n \n contains\n-  subroutine pB() bind(c, name='printf') ! { dg-error \"Procedure pb with binding label printf at .1. uses the same global identifier as entity at .2.\" }\n+  subroutine pB() bind(c, name='printf') ! { dg-error \"Procedure 'pb' with binding label 'printf' at .1. uses the same global identifier as entity at .2.\" }\n     print *, 'hello from pB'\n   end subroutine pB\n end module B"}, {"sha": "52be7f15f2bb799a005c4b080d77873ff46fed99", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_6.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_6.f03?ref=9845246060ebc7f29b765d67746e481b90bc1f45", "patch": "@@ -1,6 +1,6 @@\n ! { dg-do compile }\n module binding_label_tests_6\n   use, intrinsic :: iso_c_binding\n-  integer(c_int), bind(c, name='my_int') :: my_f90_int_1 ! { dg-error \"Variable my_f90_int_2 from module binding_label_tests_6 with binding label my_int at .1. uses the same global identifier as entity at .2. from module binding_label_tests_6\" }\n-  integer(c_int), bind(c, name='my_int') :: my_f90_int_2 ! { dg-error \"Variable my_f90_int_2 from module binding_label_tests_6 with binding label my_int at .1. uses the same global identifier as entity at .2. from module binding_label_tests_6\" }\n+  integer(c_int), bind(c, name='my_int') :: my_f90_int_1 ! { dg-error \"Variable 'my_f90_int_2' from module 'binding_label_tests_6' with binding label 'my_int' at .1. uses the same global identifier as entity at .2. from module 'binding_label_tests_6'\" }\n+  integer(c_int), bind(c, name='my_int') :: my_f90_int_2 ! { dg-error \"Variable 'my_f90_int_2' from module 'binding_label_tests_6' with binding label 'my_int' at .1. uses the same global identifier as entity at .2. from module 'binding_label_tests_6'\" }\n end module binding_label_tests_6"}, {"sha": "6811ceac54f377d3be7a8bef5426f32c0671f339", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_7.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_7.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_7.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_7.f03?ref=9845246060ebc7f29b765d67746e481b90bc1f45", "patch": "@@ -1,13 +1,13 @@\n ! { dg-do compile }\n module A\n   use, intrinsic :: iso_c_binding, only: c_int\n-  integer(c_int), bind(c, name='my_c_print') :: my_int ! { dg-error \"Procedure my_c_print with binding label my_c_print at .1. uses the same global identifier as entity at .2.\" }\n+  integer(c_int), bind(c, name='my_c_print') :: my_int ! { dg-error \"Procedure 'my_c_print' with binding label 'my_c_print' at .1. uses the same global identifier as entity at .2.\" }\n end module A\n \n program main\n use A\n interface\n-   subroutine my_c_print() bind(c) ! { dg-error \"Procedure my_c_print with binding label my_c_print at .1. uses the same global identifier as entity at .2.\" }\n+   subroutine my_c_print() bind(c) ! { dg-error \"Procedure 'my_c_print' with binding label 'my_c_print' at .1. uses the same global identifier as entity at .2.\" }\n    end subroutine my_c_print\n end interface\n "}, {"sha": "be5d004204c178c17b7456de10dabeb29391dae9", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_8.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_8.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_8.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_8.f03?ref=9845246060ebc7f29b765d67746e481b90bc1f45", "patch": "@@ -1,9 +1,9 @@\n ! { dg-do compile }\n module binding_label_tests_8\n   use, intrinsic :: iso_c_binding, only: c_int\n-  integer(c_int), bind(c, name='my_f90_sub') :: my_c_int  ! { dg-error \"Variable my_c_int with binding label my_f90_sub at .1. uses the same global identifier as entity at .2.\" }\n+  integer(c_int), bind(c, name='my_f90_sub') :: my_c_int  ! { dg-error \"Variable 'my_c_int' with binding label 'my_f90_sub' at .1. uses the same global identifier as entity at .2.\" }\n \n contains\n-  subroutine my_f90_sub() bind(c) ! { dg-error \"Variable my_c_int with binding label my_f90_sub at .1. uses the same global identifier as entity at .2.\" }\n+  subroutine my_f90_sub() bind(c) ! { dg-error \"Variable 'my_c_int' with binding label 'my_f90_sub' at .1. uses the same global identifier as entity at .2.\" }\n   end subroutine my_f90_sub\n end module binding_label_tests_8"}, {"sha": "4ee6cefd996ceb704df7c63665ef3fdc3098b7bf", "filename": "gcc/testsuite/gfortran.dg/test_common_binding_labels_3_main.f03", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2Fgfortran.dg%2Ftest_common_binding_labels_3_main.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9845246060ebc7f29b765d67746e481b90bc1f45/gcc%2Ftestsuite%2Fgfortran.dg%2Ftest_common_binding_labels_3_main.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftest_common_binding_labels_3_main.f03?ref=9845246060ebc7f29b765d67746e481b90bc1f45", "patch": "@@ -2,11 +2,10 @@\n ! { dg-compile-aux-modules \"test_common_binding_labels_3.f03\" }\n module test_common_binding_labels_3_main\n   use, intrinsic :: iso_c_binding, only: c_int\n-  integer(c_int), bind(c, name=\"my_common_block\") :: my_int ! { dg-error \"COMMON block at .1. with binding label my_common_block uses the same global identifier as entity at .2.\" }\n+  integer(c_int), bind(c, name=\"my_common_block\") :: my_int ! { dg-error \"COMMON block at .1. with binding label 'my_common_block' uses the same global identifier as entity at .2.\" }\n end module test_common_binding_labels_3_main\n \n program main\n   use test_common_binding_labels_3_main\n-  use test_common_binding_labels_3 ! { dg-error \"COMMON block at .1. with binding label my_common_block uses the same global identifier as entity at .2.\" }\n+  use test_common_binding_labels_3 ! { dg-error \"COMMON block at .1. with binding label 'my_common_block' uses the same global identifier as entity at .2.\" }\n end program main\n-! { dg-final { cleanup-modules \"test_common_binding_labels_3\" } }"}]}