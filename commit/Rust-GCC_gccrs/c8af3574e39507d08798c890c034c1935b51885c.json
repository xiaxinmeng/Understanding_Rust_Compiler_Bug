{"sha": "c8af3574e39507d08798c890c034c1935b51885c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhhZjM1NzRlMzk1MDdkMDg3OThjODkwYzAzNGMxOTM1YjUxODg1Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-18T00:53:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-18T00:53:20Z"}, "message": "defaults.h (UNALIGNED_SHORT_ASM_OP, [...]): Move from ...\n\n\t* defaults.h (UNALIGNED_SHORT_ASM_OP, UNALIGNED_INT_ASM_OP,\n\tUNALIGNED_DOUBLE_INT_ASM_OP, ASM_BYTE_OP): Move from ...\n\t* dwarf2asm.c: ... here.\n\t* dwarfout.c: Remove them.\n\n\t* varasm.c (assemble_integer): Add align parameter.\n\t(assemble_real, output_constant, output_constructor): Likewise.\n\t* output.h: Update decls.\n\t* dwarf2asm.c, final.c, varasm.c, config/darwin.c, config/nextstep.c,\n\tconfig/alpha/alpha.c, config/arm/arm.md, config/clipper/clipper.c,\n\tconfig/m88k/m88k.c, config/mcore/mcore.md, config/mips/mips.h,\n\tconfig/mips/mips.md, config/pa/pa.c, config/rs6000/rs6000.c,\n\tconfig/rs6000/rs6000.h, config/s390/s390.h, config/sh/sh.md:\n\tUpdate all callers.\n\n\t* final.c (end_final): Abort profile block generation if we\n\thavn't layed it out properly.\n\t* output.h (assemble_eh_integer): Remove stale decl.\n\t* varasm.c (assemble_zeros): Tidy; use assemble_integer.\n\t(min_align): New.\n\t(assemble_integer): Handle unaligned data.\n\t(assemble_real): Abort on unaligned data.\n\t(output_constructor): Don't assume ASM_OUTPUT_ALIGN 0 does\n\tanything useful.\n\t(default_dtor_section_asm_out_destructor): Use assemble_align.\n\t(default_named_section_asm_out_constructor): Likewise.\n\t(default_ctor_section_asm_out_constructor): Likewise.\n\t* config/darwin.c (machopic_asm_out_constructor): Likewise.\n\t(machopic_asm_out_destructor): Likewise.\n\t* config/nextstep.c (nextstep_asm_out_constructor): Likewise.\n\t(nextstep_asm_out_destructor): Likewise.\n\t* config/alpha/alpha.c (vms_asm_out_constructor): Likewise.\n\t(vms_asm_out_destructor): Likewise.\n\n        * java/class.c (emit_register_classes): Add align parameter to\n        call to assemble_integer.\n\nFrom-SVN: r44992", "tree": {"sha": "980e4cc8bb27895af2efcfd04f1969c28cccd1f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/980e4cc8bb27895af2efcfd04f1969c28cccd1f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8af3574e39507d08798c890c034c1935b51885c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8af3574e39507d08798c890c034c1935b51885c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8af3574e39507d08798c890c034c1935b51885c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8af3574e39507d08798c890c034c1935b51885c/comments", "author": null, "committer": null, "parents": [{"sha": "920ae24b3528f63f23f9b77dc8600120cdd5658e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/920ae24b3528f63f23f9b77dc8600120cdd5658e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/920ae24b3528f63f23f9b77dc8600120cdd5658e"}], "stats": {"total": 635, "additions": 374, "deletions": 261}, "files": [{"sha": "12b76ccb4f57e35b3323f7246e12b8bb40436e44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -1,3 +1,39 @@\n+2001-08-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* defaults.h (UNALIGNED_SHORT_ASM_OP, UNALIGNED_INT_ASM_OP,\n+\tUNALIGNED_DOUBLE_INT_ASM_OP, ASM_BYTE_OP): Move from ...\n+\t* dwarf2asm.c: ... here.\n+\t* dwarfout.c: Remove them.\n+\n+\t* varasm.c (assemble_integer): Add align parameter.\n+\t(assemble_real, output_constant, output_constructor): Likewise.\n+\t* output.h: Update decls.\n+\t* dwarf2asm.c, final.c, varasm.c, config/darwin.c, config/nextstep.c,\n+\tconfig/alpha/alpha.c, config/arm/arm.md, config/clipper/clipper.c,\n+\tconfig/m88k/m88k.c, config/mcore/mcore.md, config/mips/mips.h,\n+\tconfig/mips/mips.md, config/pa/pa.c, config/rs6000/rs6000.c,\n+\tconfig/rs6000/rs6000.h, config/s390/s390.h, config/sh/sh.md:\n+\tUpdate all callers.\n+\n+\t* final.c (end_final): Abort profile block generation if we\n+\thavn't layed it out properly.\n+\t* output.h (assemble_eh_integer): Remove stale decl.\n+\t* varasm.c (assemble_zeros): Tidy; use assemble_integer.\n+\t(min_align): New.\n+\t(assemble_integer): Handle unaligned data.\n+\t(assemble_real): Abort on unaligned data.\n+\t(output_constructor): Don't assume ASM_OUTPUT_ALIGN 0 does\n+\tanything useful.\n+\t(default_dtor_section_asm_out_destructor): Use assemble_align.\n+\t(default_named_section_asm_out_constructor): Likewise.\n+\t(default_ctor_section_asm_out_constructor): Likewise.\n+\t* config/darwin.c (machopic_asm_out_constructor): Likewise.\n+\t(machopic_asm_out_destructor): Likewise.\n+\t* config/nextstep.c (nextstep_asm_out_constructor): Likewise.\n+\t(nextstep_asm_out_destructor): Likewise.\n+\t* config/alpha/alpha.c (vms_asm_out_constructor): Likewise.\n+\t(vms_asm_out_destructor): Likewise.\n+\n 2001-08-17  Richard Henderson  <rth@redhat.com>\n \n \t* config/mips/iris6.h (TARGET_IRIX6): New."}, {"sha": "731f6a6a090577746de5b1842c00bb3a987780de", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -6595,7 +6595,8 @@ vms_asm_out_constructor (symbol, priority)\n      int priority ATTRIBUTE_UNUSED;\n {\n   ctors_section ();\n-  assemble_integer (symbol, UNITS_PER_WORD, 1);\n+  assemble_align (BITS_PER_WORD);\n+  assemble_integer (symbol, UNITS_PER_WORD, BITS_PER_WORD, 1);\n }\n \n static void\n@@ -6604,7 +6605,8 @@ vms_asm_out_destructor (symbol, priority)\n      int priority ATTRIBUTE_UNUSED;\n {\n   dtors_section ();\n-  assemble_integer (symbol, UNITS_PER_WORD, 1);\n+  assemble_align (BITS_PER_WORD);\n+  assemble_integer (symbol, UNITS_PER_WORD, BITS_PER_WORD, 1);\n }\n #else\n "}, {"sha": "5565aeeaf1ff5217dcc7863a789b89d21ef9ab77", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -9064,7 +9064,7 @@\n   \"TARGET_THUMB\"\n   \"*\n   making_const_table = TRUE;\n-  assemble_integer (operands[0], 1, 1);\n+  assemble_integer (operands[0], 1, BITS_PER_WORD, 1);\n   assemble_zeros (3);\n   return \\\"\\\";\n   \"\n@@ -9076,7 +9076,7 @@\n   \"TARGET_THUMB\"\n   \"*\n   making_const_table = TRUE;\n-  assemble_integer (operands[0], 2, 1);\n+  assemble_integer (operands[0], 2, BITS_PER_WORD, 1);\n   assemble_zeros (2);\n   return \\\"\\\";\n   \"\n@@ -9095,11 +9095,11 @@\n       {\n         union real_extract u;\n         memcpy (&u, &CONST_DOUBLE_LOW (operands[0]), sizeof u);\n-        assemble_real (u.d, GET_MODE (operands[0]));\n+        assemble_real (u.d, GET_MODE (operands[0]), BITS_PER_WORD);\n         break;\n       }\n       default:\n-        assemble_integer (operands[0], 4, 1);\n+        assemble_integer (operands[0], 4, BITS_PER_WORD, 1);\n         break;\n       }\n     return \\\"\\\";\n@@ -9119,11 +9119,11 @@\n         {\n           union real_extract u;\n           memcpy (&u, &CONST_DOUBLE_LOW (operands[0]), sizeof u);\n-          assemble_real (u.d, GET_MODE (operands[0]));\n+          assemble_real (u.d, GET_MODE (operands[0]), BITS_PER_WORD);\n           break;\n         }\n       default:\n-        assemble_integer (operands[0], 8, 1);\n+        assemble_integer (operands[0], 8, BITS_PER_WORD, 1);\n         break;\n       }\n     return \\\"\\\";"}, {"sha": "37756e941c5fd8efe8b3c49057e0008068468e55", "filename": "gcc/config/clipper/clipper.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fclipper%2Fclipper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fclipper%2Fclipper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.c?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -712,6 +712,6 @@ clix_asm_out_destructor (symbol, priority)\n      int priority ATTRIBUTE_UNUSED;\n {\n   fini_section ();\n-  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n-  assemble_integer (const0_rtx, POINTER_SIZE / BITS_PER_UNIT, 1);\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n+  assemble_integer (const0_rtx, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n }"}, {"sha": "d00b7bda6005f72905aadc285dea51b8f759a86d", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -924,10 +924,11 @@ machopic_finish (asm_out_file)\n \t  )\n \t{\n \t  data_section ();\n-\t  assemble_align (UNITS_PER_WORD * BITS_PER_UNIT);\n+\t  assemble_align (GET_MODE_ALIGNMENT (Pmode));\n \t  assemble_label (lazy_name);\n \t  assemble_integer (gen_rtx (SYMBOL_REF, Pmode, sym_name),\n-\t\t\t    GET_MODE_SIZE (Pmode), 1);\n+\t\t\t    GET_MODE_SIZE (Pmode),\n+\t\t\t    GET_MODE_ALIGNMENT (Pmode), 1);\n \t}\n       else\n \t{\n@@ -939,7 +940,8 @@ machopic_finish (asm_out_file)\n \t  assemble_name (asm_out_file, sym_name); \n \t  fprintf (asm_out_file, \"\\n\");\n \n-\t  assemble_integer (const0_rtx, GET_MODE_SIZE (Pmode), 1);\n+\t  assemble_integer (const0_rtx, GET_MODE_SIZE (Pmode),\n+\t\t\t    GET_MODE_ALIGNMENT (Pmode), 1);\n \t}\n     }\n }\n@@ -1117,7 +1119,8 @@ machopic_asm_out_constructor (symbol, priority)\n     mod_init_section ();\n   else\n     constructor_section ();\n-  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+  assemble_align (POINTER_SIZE);\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n \n   if (!flag_pic)\n     fprintf (asm_out_file, \".reference .constructors_used\\n\");\n@@ -1132,7 +1135,8 @@ machopic_asm_out_destructor (symbol, priority)\n     mod_term_section ();\n   else\n     destructor_section ();\n-  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+  assemble_align (POINTER_SIZE);\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n \n   if (!flag_pic)\n     fprintf (asm_out_file, \".reference .destructors_used\\n\");"}, {"sha": "1c0bd15417a55089b18e44d5be73d55a38ae8cc3", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -3311,8 +3311,8 @@ m88k_svr3_asm_out_destructor (symbol, priority)\n   int i;\n \n   fini_section ();\n-  assemble_integer (symbol, UNITS_PER_WORD, 1);\n+  assemble_integer (symbol, UNITS_PER_WORD, BITS_PER_WORD, 1);\n   for (i = 1; i < 4; i++)\n-    assemble_integer (constm1_rtx, UNITS_PER_WORD, 1);\n+    assemble_integer (constm1_rtx, UNITS_PER_WORD, BITS_PER_WORD, 1);\n }\n #endif"}, {"sha": "1a37bbbebdde33af7f5cba88b3fbf97f45ecd753", "filename": "gcc/config/mcore/mcore.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fmcore%2Fmcore.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fmcore%2Fmcore.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.md?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -3409,7 +3409,7 @@\n  \"\"\n  \"*\n {\n-  assemble_integer (operands[0], 4, 1);\n+  assemble_integer (operands[0], 4, BITS_PER_WORD, 1);\n   return \\\"\\\";\n }\"\n  [(set_attr \"length\" \"4\")])"}, {"sha": "b3c4dd40321f93712e2be02f69eede851b456cc3", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -4304,9 +4304,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       assemble_integer (operand_subword ((VALUE), 0, 0, DImode),\t\\\n-\t\t\tUNITS_PER_WORD, 1);\t\t\t\t\\\n+\t\t\tUNITS_PER_WORD, BITS_PER_WORD, 1);\t\t\\\n       assemble_integer (operand_subword ((VALUE), 1, 0, DImode),\t\\\n-\t\t\tUNITS_PER_WORD, 1);\t\t\t\t\\\n+\t\t\tUNITS_PER_WORD, BITS_PER_WORD, 1);\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n } while (0)\n "}, {"sha": "6c4e32ca22b03bb434fbe92fd1afc47ad4e1ee20", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -10382,7 +10382,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n   \"TARGET_MIPS16\"\n   \"*\n {\n-  assemble_integer (operands[0], 1, 1);\n+  assemble_integer (operands[0], 1, BITS_PER_UNIT, 1);\n   return \\\"\\\";\n }\"\n   [(set_attr \"type\"\t\"unknown\")\n@@ -10394,7 +10394,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n   \"TARGET_MIPS16\"\n   \"*\n {\n-  assemble_integer (operands[0], 2, 1);\n+  assemble_integer (operands[0], 2, BITS_PER_UNIT * 2, 1);\n   return \\\"\\\";\n }\"\n   [(set_attr \"type\"\t\"unknown\")\n@@ -10406,7 +10406,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n   \"TARGET_MIPS16\"\n   \"*\n {\n-  assemble_integer (operands[0], 4, 1);\n+  assemble_integer (operands[0], 4, BITS_PER_UNIT * 4, 1);\n   return \\\"\\\";\n }\"\n   [(set_attr \"type\"\t\"unknown\")\n@@ -10418,7 +10418,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n   \"TARGET_MIPS16\"\n   \"*\n {\n-  assemble_integer (operands[0], 8, 1);\n+  assemble_integer (operands[0], 8, BITS_PER_UNIT * 8, 1);\n   return \\\"\\\";\n }\"\n   [(set_attr \"type\"\t\"unknown\")\n@@ -10435,7 +10435,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n   if (GET_CODE (operands[0]) != CONST_DOUBLE)\n     abort ();\n   memcpy (&u, &CONST_DOUBLE_LOW (operands[0]), sizeof u);\n-  assemble_real (u.d, SFmode);\n+  assemble_real (u.d, SFmode, GET_MODE_ALIGNMENT (SFmode));\n   return \\\"\\\";\n }\"\n   [(set_attr \"type\"\t\"unknown\")\n@@ -10452,7 +10452,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n   if (GET_CODE (operands[0]) != CONST_DOUBLE)\n     abort ();\n   memcpy (&u, &CONST_DOUBLE_LOW (operands[0]), sizeof u);\n-  assemble_real (u.d, DFmode);\n+  assemble_real (u.d, DFmode, GET_MODE_ALIGNMENT (DFmode));\n   return \\\"\\\";\n }\"\n   [(set_attr \"type\"\t\"unknown\")"}, {"sha": "bbe0cd68fa49aa1a2f0d9bf9bde18ed3d32ca227", "filename": "gcc/config/nextstep.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fnextstep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fnextstep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.c?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -96,7 +96,8 @@ nextstep_asm_out_constructor (symbol, priority)\n      int priority ATTRIBUTE_UNUSED;\n {\n   constructor_section ();\n-  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+  assemble_align (POINTER_SIZE);\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n   fprintf (asm_out_file, \".reference .constructors_used\\n\");\n }\n \n@@ -106,7 +107,8 @@ nextstep_asm_out_destructor (symbol, priority)\n      int priority ATTRIBUTE_UNUSED;\n {\n   destructor_section ();\n-  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+  assemble_align (POINTER_SIZE);\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n   fprintf (asm_out_file, \".reference .destructors_used\\n\");\n }\n "}, {"sha": "5517f99f7f4970a6ab8cfdf83b0818929cc58d66", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -4377,8 +4377,8 @@ output_deferred_plabels (file)\n   for (i = 0; i < n_deferred_plabels; i++)\n     {\n       ASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (deferred_plabels[i].internal_label));\n-      assemble_integer (gen_rtx_SYMBOL_REF (VOIDmode,\n-\t\t\t\t\t    deferred_plabels[i].name), 4, 1);\n+      assemble_integer (gen_rtx_SYMBOL_REF (Pmode, deferred_plabels[i].name),\n+\t\t\t4, 32, 1);\n     }\n }\n "}, {"sha": "f8a168dabf7ca09cbc552d3d05969bbda9263b02", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -8745,7 +8745,7 @@ rs6000_elf_asm_out_constructor (symbol, priority)\n       fputs (\")@fixup\\n\", asm_out_file);\n     }\n   else\n-    assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+    assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n }\n \n static void\n@@ -8776,7 +8776,7 @@ rs6000_elf_asm_out_destructor (symbol, priority)\n       fputs (\")@fixup\\n\", asm_out_file);\n     }\n   else\n-    assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+    assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n }\n #endif\n "}, {"sha": "f87c1eb833941d6098be28e341f686af445800bd", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -2475,9 +2475,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_32BIT)\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       assemble_integer (operand_subword ((VALUE), 0, 0, DImode),\t\\\n-                        UNITS_PER_WORD, 1);\t\t\t\t\\\n+                        UNITS_PER_WORD, BITS_PER_WORD, 1);\t\t\\\n       assemble_integer (operand_subword ((VALUE), 1, 0, DImode),\t\\\n-                        UNITS_PER_WORD, 1);\t\t\t\t\\\n+                        UNITS_PER_WORD, BITS_PER_WORD, 1);\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "2e52dd2b217dbd4c76c1ffb11e8c0c19d9a86513", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 42, "deletions": 41, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -1807,7 +1807,7 @@ extern int s390_nr_constants;\n     /* Mark entries referenced by other entries */\t\t\t\\\n     for (pool = first_pool; pool; pool = pool->next)\t\t       \t\\\n       if (pool->mark)\t\t\t\t\t\t\t\\\n-        mark_constants (pool->constant);\t\t\t\t\t\\\n+        mark_constants (pool->constant);\t\t\t\t\\\n \t\t\t\t\t\t\t\t       \t\\\n     s390_asm_output_pool_prologue (FILE, FUNNAME, fndecl, size);     \t\\\n }\n@@ -1818,46 +1818,47 @@ extern int s390_nr_constants;\n #define ASM_OUTPUT_POOL_EPILOGUE(FILE, FUNNAME, fndecl, size) return;\n \n #define ASM_OUTPUT_SPECIAL_POOL_ENTRY(FILE, EXP, MODE, ALIGN, LABELNO, WIN) \\\n-{                                                                       \\\n-  if ((s390_pool_count == 0) || (s390_pool_count > 0 && LABELNO >= 0)) \t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \".LC%d:\\n\", LABELNO);                              \\\n-      LABELNO = ~LABELNO;                                               \\\n-    }                                                                   \\\n-  if (s390_pool_count > 0)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \".LC%d_%X:\\n\", ~LABELNO, s390_pool_count);         \\\n-    }                            \t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  /* Output the value of the constant itself.  */\t\t\t\\\n-  switch (GET_MODE_CLASS (pool->mode))\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-    case MODE_FLOAT:\t\t\t\t\t\t\t\\\n-      if (GET_CODE (x) != CONST_DOUBLE)\t\t\t\t\t\\\n-\tabort ();\t\t\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n-      memcpy ((char *) &u, (char *) &CONST_DOUBLE_LOW (x), sizeof u);\t\\\n-      assemble_real (u.d, pool->mode);\t\t\t\t\t\\\n-      break;\t\t\t\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n-    case MODE_INT:\t\t\t\t\t\t\t\\\n-    case MODE_PARTIAL_INT:\t\t\t\t\t\t\\\n-      if (flag_pic && (GET_CODE (x) == CONST ||                         \\\n-\t\t   GET_CODE (x) == SYMBOL_REF ||                        \\\n-                   GET_CODE (x) == LABEL_REF ))                         \\\n-        {\t\t\t\t\t\t\t\t\\\n-          fprintf (FILE, \"%s\\t\",TARGET_64BIT ? ASM_QUAD : ASM_LONG);\t\\\n-          s390_output_symbolic_const (FILE, x); \t\t\t\\\n-          fputc ('\\n', (FILE));\t\t\t\t\t\t\\\n-\t}                                                               \\\n-      else                                                              \\\n-        assemble_integer (x, GET_MODE_SIZE (pool->mode), 1);\t\t\\\n-      break;\t\t\t\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n-    default:\t\t\t\t\t\t\t\t\\\n-      abort ();\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  goto WIN;\t\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t    \\\n+  if ((s390_pool_count == 0) || (s390_pool_count > 0 && LABELNO >= 0))\t    \\\n+    {\t\t\t\t\t\t\t\t\t    \\\n+      fprintf (FILE, \".LC%d:\\n\", LABELNO);\t\t\t\t    \\\n+      LABELNO = ~LABELNO;\t\t\t\t\t\t    \\\n+    }\t\t\t\t\t\t\t\t\t    \\\n+  if (s390_pool_count > 0)\t\t\t\t\t\t    \\\n+    {\t\t\t\t\t\t\t\t\t    \\\n+      fprintf (FILE, \".LC%d_%X:\\n\", ~LABELNO, s390_pool_count);\t\t    \\\n+    }\t\t\t\t\t\t\t\t\t    \\\n+\t\t\t\t\t\t\t\t\t    \\\n+  /* Output the value of the constant itself.  */\t\t\t    \\\n+  switch (GET_MODE_CLASS (MODE))\t\t\t\t\t    \\\n+    {\t\t\t\t\t\t\t\t\t    \\\n+    case MODE_FLOAT:\t\t\t\t\t\t\t    \\\n+      if (GET_CODE (EXP) != CONST_DOUBLE)\t\t\t\t    \\\n+\tabort ();\t\t\t\t\t\t\t    \\\n+\t\t\t\t\t\t\t\t\t    \\\n+      memcpy ((char *) &u, (char *) &CONST_DOUBLE_LOW (EXP), sizeof u);\t    \\\n+      assemble_real (u.d, MODE, ALIGN);\t\t\t\t\t    \\\n+      break;\t\t\t\t\t\t\t\t    \\\n+\t\t\t\t\t\t\t\t\t    \\\n+    case MODE_INT:\t\t\t\t\t\t\t    \\\n+    case MODE_PARTIAL_INT:\t\t\t\t\t\t    \\\n+      if (flag_pic\t\t\t\t\t\t\t    \\\n+\t  && (GET_CODE (EXP) == CONST\t\t\t\t\t    \\\n+\t      || GET_CODE (EXP) == SYMBOL_REF\t\t\t\t    \\\n+\t      || GET_CODE (EXP) == LABEL_REF ))\t\t\t\t    \\\n+        {\t\t\t\t\t\t\t\t    \\\n+          fprintf (FILE, \"%s\\t\",TARGET_64BIT ? ASM_QUAD : ASM_LONG);\t    \\\n+          s390_output_symbolic_const (FILE, EXP);\t\t\t    \\\n+          fputc ('\\n', (FILE));\t\t\t\t\t\t    \\\n+\t}\t\t\t\t\t\t\t\t    \\\n+      else\t\t\t\t\t\t\t\t    \\\n+        assemble_integer (EXP, GET_MODE_SIZE (MODE), ALIGN, 1);\t\t    \\\n+      break;\t\t\t\t\t\t\t\t    \\\n+\t\t\t\t\t\t\t\t\t    \\\n+    default:\t\t\t\t\t\t\t\t    \\\n+      abort ();\t\t\t\t\t\t\t\t    \\\n+    }\t\t\t\t\t\t\t\t\t    \\\n+  goto WIN;\t\t\t\t\t\t\t\t    \\\n }\n \n #endif "}, {"sha": "69857c32024c47fecdc89aa33c0d4b7545d5ddec", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -4131,7 +4131,7 @@\n  \"*\n {\n   if (operands[1] != const0_rtx)\n-    assemble_integer (operands[0], 2, 1);\n+    assemble_integer (operands[0], 2, BITS_PER_UNIT * 2, 1);\n   return \\\"\\\";\n }\"\n  [(set_attr \"length\" \"2\")\n@@ -4147,7 +4147,7 @@\n  \"*\n {\n   if (operands[1] != const0_rtx)\n-    assemble_integer (operands[0], 4, 1);\n+    assemble_integer (operands[0], 4, BITS_PER_UNIT * 4, 1);\n   return \\\"\\\";\n }\"\n  [(set_attr \"length\" \"4\")\n@@ -4163,7 +4163,7 @@\n  \"*\n {\n   if (operands[1] != const0_rtx)\n-    assemble_integer (operands[0], 8, 1);\n+    assemble_integer (operands[0], 8, BITS_PER_UNIT * 8, 1);\n   return \\\"\\\";\n }\"\n  [(set_attr \"length\" \"8\")\n@@ -4182,7 +4182,7 @@\n     {\n       union real_extract u;\n       memcpy (&u, &CONST_DOUBLE_LOW (operands[0]), sizeof u);\n-      assemble_real (u.d, SFmode);\n+      assemble_real (u.d, SFmode, GET_MODE_ALIGNMENT (SFmode));\n     }\n   return \\\"\\\";\n }\"\n@@ -4202,7 +4202,7 @@\n     {\n       union real_extract u;\n       memcpy (&u, &CONST_DOUBLE_LOW (operands[0]), sizeof u);\n-      assemble_real (u.d, DFmode);\n+      assemble_real (u.d, DFmode, GET_MODE_ALIGNMENT (DFmode));\n     }\n   return \\\"\\\";\n }\""}, {"sha": "44eedc8e02b05b59c63880f13f0690df2688f9c4", "filename": "gcc/defaults.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -383,4 +383,21 @@ do {\t\t\t\t\t\t\t\t\\\n #define TARGET_ALLOWS_PROFILING_WITHOUT_FRAME_POINTER true\n #endif\n \n+/* GAS and SYSV4 assemblers accept these.  */\n+#ifdef OBJECT_FORMAT_ELF\n+#ifndef UNALIGNED_SHORT_ASM_OP\n+#define UNALIGNED_SHORT_ASM_OP\t\t\"\\t.2byte\\t\"\n+#endif\n+#ifndef UNALIGNED_INT_ASM_OP\n+#define UNALIGNED_INT_ASM_OP\t\t\"\\t.4byte\\t\"\n+#endif\n+#ifndef UNALIGNED_DOUBLE_INT_ASM_OP\n+#define UNALIGNED_DOUBLE_INT_ASM_OP\t\"\\t.8byte\\t\"\n+#endif\n+#endif /* OBJECT_FORMAT_ELF */\n+\n+#ifndef ASM_BYTE_OP\n+#define ASM_BYTE_OP\t\t\t\"\\t.byte\\t\"\n+#endif\n+\n #endif  /* ! GCC_DEFAULTS_H */"}, {"sha": "087cd684b98334bb375fa095a1ec17c2c7e510d4", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 12, "deletions": 30, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -37,33 +37,16 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_COMMENT_START \";#\"\n #endif\n \n-/* Definitions of defaults for assembler-dependent names of various\n-   pseudo-ops and section names.  These may be overridden in the tm.h\n-   file (if necessary) for a particular assembler.  */\n-\n-#ifdef OBJECT_FORMAT_ELF\n-#ifndef UNALIGNED_SHORT_ASM_OP\n-#define UNALIGNED_SHORT_ASM_OP\t\t\"\\t.2byte\\t\"\n-#endif\n-#ifndef UNALIGNED_INT_ASM_OP\n-#define UNALIGNED_INT_ASM_OP\t\t\"\\t.4byte\\t\"\n-#endif\n-#ifndef UNALIGNED_DOUBLE_INT_ASM_OP\n-#define UNALIGNED_DOUBLE_INT_ASM_OP\t\"\\t.8byte\\t\"\n-#endif\n-#endif /* OBJECT_FORMAT_ELF */\n-\n-#ifndef ASM_BYTE_OP\n-#define ASM_BYTE_OP\t\t\t\"\\t.byte\\t\"\n-#endif\n-\n /* We don't have unaligned support, let's hope the normal output works for\n    .debug_frame.  But we know it won't work for .debug_info.  */\n #if !defined(UNALIGNED_INT_ASM_OP) && defined(DWARF2_DEBUGGING_INFO)\n  #error DWARF2_DEBUGGING_INFO requires UNALIGNED_INT_ASM_OP.\n #endif\n \n \f\n+/* Despite the fact that assemble_integer handles unaligned data,\n+   continue emitting things by hand when possible, since that makes\n+   the assembler commentary come out prettier.  */\n #ifdef UNALIGNED_INT_ASM_OP\n static const char * unaligned_integer_asm_op  PARAMS ((int));\n \n@@ -123,7 +106,7 @@ dw2_asm_output_data VPARAMS ((int size, unsigned HOST_WIDE_INT value,\n   fputs (unaligned_integer_asm_op (size), asm_out_file);\n   fprintf (asm_out_file, HOST_WIDE_INT_PRINT_HEX, value);\n #else\n-  assemble_integer (GEN_INT (value), size, 1);\n+  assemble_integer (GEN_INT (value), size, BITS_PER_UNIT, 1);\n #endif\n \n   if (flag_debug_asm && comment)\n@@ -168,10 +151,9 @@ dw2_asm_output_delta VPARAMS ((int size, const char *lab1, const char *lab2,\n   fputc ('-', asm_out_file);\n   assemble_name (asm_out_file, lab2);\n #else\n-  assemble_integer (gen_rtx_MINUS (smallest_mode_for_size (size, MODE_INT),\n-\t\t\t\t   gen_rtx_SYMBOL_REF (Pmode, lab1),\n+  assemble_integer (gen_rtx_MINUS (Pmode, gen_rtx_SYMBOL_REF (Pmode, lab1),\n \t\t\t\t   gen_rtx_SYMBOL_REF (Pmode, lab2)),\n-\t\t    size, 1);\n+\t\t    size, BITS_PER_UNIT, 1);\n #endif\n \n   if (flag_debug_asm && comment)\n@@ -216,7 +198,7 @@ dw2_asm_output_offset VPARAMS ((int size, const char *label,\n   fputs (unaligned_integer_asm_op (size), asm_out_file);\n   assemble_name (asm_out_file, label);\n #else\n-  assemble_integer (gen_rtx_SYMBOL_REF (Pmode, label), size, 1);\n+  assemble_integer (gen_rtx_SYMBOL_REF (Pmode, label), size, BITS_PER_UNIT, 1);\n #endif\n #endif\n \n@@ -300,7 +282,7 @@ dw2_asm_output_addr VPARAMS ((int size, const char *label,\n   fputs (unaligned_integer_asm_op (size), asm_out_file);\n   assemble_name (asm_out_file, label);\n #else\n-  assemble_integer (gen_rtx_SYMBOL_REF (Pmode, label), size, 1);\n+  assemble_integer (gen_rtx_SYMBOL_REF (Pmode, label), size, BITS_PER_UNIT, 1);\n #endif\n \n   if (flag_debug_asm && comment)\n@@ -338,7 +320,7 @@ dw2_asm_output_addr_rtx VPARAMS ((int size, rtx addr,\n   fputs (unaligned_integer_asm_op (size), asm_out_file);\n   output_addr_const (asm_out_file, addr);\n #else\n-  assemble_integer (addr, size, 1);\n+  assemble_integer (addr, size, BITS_PER_UNIT, 1);\n #endif\n \n   if (flag_debug_asm && comment)\n@@ -898,7 +880,7 @@ dw2_output_indirect_constant_1 (node, data)\n   sym_ref = gen_rtx_SYMBOL_REF (Pmode, sym);\n \n   ASM_OUTPUT_LABEL (asm_out_file, label);\n-  assemble_integer (sym_ref, POINTER_SIZE / BITS_PER_UNIT, 1);\n+  assemble_integer (sym_ref, POINTER_SIZE / BITS_PER_UNIT, BITS_PER_UNIT, 1);\n \n   return 0;\n }\n@@ -956,7 +938,7 @@ dw2_asm_output_encoded_addr_rtx VPARAMS ((int encoding,\n \n   /* NULL is _always_ represented as a plain zero.  */\n   if (addr == const0_rtx)\n-    assemble_integer (addr, size, 1);\n+    assemble_integer (addr, size, BITS_PER_UNIT, 1);\n   else\n     {\n     restart:\n@@ -989,7 +971,7 @@ dw2_asm_output_encoded_addr_rtx VPARAMS ((int encoding,\n \t  fputs (unaligned_integer_asm_op (size), asm_out_file);\n \t  output_addr_const (asm_out_file, addr);\n #else\n-\t  assemble_integer (addr, size, 1);\n+\t  assemble_integer (addr, size, BITS_PER_UNIT, 1);\n #endif\n \t  break;\n "}, {"sha": "b245f235e23beb9b734c085d45c81a33eaa835dc", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -948,15 +948,6 @@ static void retry_incomplete_types\tPARAMS ((void));\n #ifndef VERSION_ASM_OP\n #define VERSION_ASM_OP\t\t\"\\t.version\\t\"\n #endif\n-#ifndef UNALIGNED_SHORT_ASM_OP\n-#define UNALIGNED_SHORT_ASM_OP\t\"\\t.2byte\\t\"\n-#endif\n-#ifndef UNALIGNED_INT_ASM_OP\n-#define UNALIGNED_INT_ASM_OP\t\"\\t.4byte\\t\"\n-#endif\n-#ifndef ASM_BYTE_OP\n-#define ASM_BYTE_OP\t\t\"\\t.byte\\t\"\n-#endif\n #ifndef SET_ASM_OP\n #define SET_ASM_OP\t\t\"\\t.set\\t\"\n #endif"}, {"sha": "ec57842e079dda1d91e6a4da8f638884dfa83f7a", "filename": "gcc/final.c", "status": "modified", "additions": 53, "deletions": 42, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -291,6 +291,7 @@ end_final (filename)\n       int long_bytes = LONG_TYPE_SIZE / BITS_PER_UNIT;\n       int gcov_type_bytes = GCOV_TYPE_SIZE / BITS_PER_UNIT;\n       int pointer_bytes = POINTER_SIZE / BITS_PER_UNIT;\n+      unsigned int align2 = LONG_TYPE_SIZE;\n \n       if (profile_block_flag)\n \tsize = long_bytes * count_basic_blocks;\n@@ -302,6 +303,12 @@ end_final (filename)\n       rounded = (rounded / (BIGGEST_ALIGNMENT / BITS_PER_UNIT)\n \t\t * (BIGGEST_ALIGNMENT / BITS_PER_UNIT));\n \n+      /* ??? This _really_ ought to be done with a structure layout\n+\t and with assemble_constructor.  If long_bytes != pointer_bytes\n+\t we'll be emitting unaligned data at some point.  */\n+      if (long_bytes != pointer_bytes)\n+\tabort ();\n+\n       data_section ();\n \n       /* Output the main header, of 11 words:\n@@ -323,70 +330,74 @@ end_final (filename)\n       ASM_OUTPUT_ALIGN (asm_out_file, align);\n \n       ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LPBX\", 0);\n-      /* zero word */\n-      assemble_integer (const0_rtx, long_bytes, 1);\n \n-      /* address of filename */\n+      /* Zero word.  */\n+      assemble_integer (const0_rtx, long_bytes, align2, 1);\n+\n+      /* Address of filename.  */\n       ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 1);\n-      assemble_integer (gen_rtx_SYMBOL_REF (Pmode, name), pointer_bytes, 1);\n+      assemble_integer (gen_rtx_SYMBOL_REF (Pmode, name), pointer_bytes,\n+\t\t\talign2, 1);\n \n-      /* address of count table */\n+      /* Address of count table.  */\n       ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 2);\n-      assemble_integer (gen_rtx_SYMBOL_REF (Pmode, name), pointer_bytes, 1);\n+      assemble_integer (gen_rtx_SYMBOL_REF (Pmode, name), pointer_bytes,\n+\t\t\talign2, 1);\n \n-      /* count of the # of basic blocks or # of instrumented arcs */\n+      /* Count of the # of basic blocks or # of instrumented arcs.  */\n       if (profile_block_flag)\n-\tassemble_integer (GEN_INT (count_basic_blocks), long_bytes, 1);\n-      else\n-\tassemble_integer (GEN_INT (count_instrumented_edges), long_bytes, 1);\n+      assemble_integer (GEN_INT (profile_block_flag\n+\t\t\t\t ? count_basic_blocks\n+\t\t\t\t : count_instrumented_edges),\n+\t\t\tlong_bytes, align2, 1);\n \n-      /* zero word (link field) */\n-      assemble_integer (const0_rtx, pointer_bytes, 1);\n+      /* Zero word (link field).  */\n+      assemble_integer (const0_rtx, pointer_bytes, align2, 1);\n \n       /* address of basic block start address table */\n       if (profile_block_flag)\n \t{\n \t  ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 3);\n-\t  assemble_integer (gen_rtx_SYMBOL_REF (Pmode, name), pointer_bytes,\n-\t\t\t    1);\n+\t  assemble_integer (gen_rtx_SYMBOL_REF (Pmode, name),\n+\t\t\t    pointer_bytes, align2, 1);\n \t}\n       else\n-\tassemble_integer (const0_rtx, pointer_bytes, 1);\n+\tassemble_integer (const0_rtx, pointer_bytes, align2, 1);\n \n-      /* byte count for extended structure.  */\n-      assemble_integer (GEN_INT (11 * UNITS_PER_WORD), long_bytes, 1);\n+      /* Byte count for extended structure.  */\n+      assemble_integer (GEN_INT (11 * UNITS_PER_WORD), long_bytes, align2, 1);\n \n-      /* address of function name table */\n+      /* Address of function name table.  */\n       if (profile_block_flag)\n \t{\n \t  ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 4);\n-\t  assemble_integer (gen_rtx_SYMBOL_REF (Pmode, name), pointer_bytes,\n-\t\t\t    1);\n+\t  assemble_integer (gen_rtx_SYMBOL_REF (Pmode, name),\n+\t\t\t    pointer_bytes, align2, 1);\n \t}\n       else\n-\tassemble_integer (const0_rtx, pointer_bytes, 1);\n+\tassemble_integer (const0_rtx, pointer_bytes, align2, 1);\n \n-      /* address of line number and filename tables if debugging.  */\n+      /* Address of line number and filename tables if debugging.  */\n       if (write_symbols != NO_DEBUG && profile_block_flag)\n \t{\n \t  ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 5);\n \t  assemble_integer (gen_rtx_SYMBOL_REF (Pmode, name),\n-\t\t\t    pointer_bytes, 1);\n+\t\t\t    pointer_bytes, align2, 1);\n \t  ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 6);\n \t  assemble_integer (gen_rtx_SYMBOL_REF (Pmode, name),\n-\t\t\t    pointer_bytes, 1);\n+\t\t\t    pointer_bytes, align2, 1);\n \t}\n       else\n \t{\n-\t  assemble_integer (const0_rtx, pointer_bytes, 1);\n-\t  assemble_integer (const0_rtx, pointer_bytes, 1);\n+\t  assemble_integer (const0_rtx, pointer_bytes, align2, 1);\n+\t  assemble_integer (const0_rtx, pointer_bytes, align2, 1);\n \t}\n \n-      /* space for extension ptr (link field) */\n-      assemble_integer (const0_rtx, UNITS_PER_WORD, 1);\n+      /* Space for extension ptr (link field).  */\n+      assemble_integer (const0_rtx, UNITS_PER_WORD, align2, 1);\n \n-      /* Output the file name changing the suffix to .d for Sun tcov\n-\t compatibility.  */\n+      /* Output the file name changing the suffix to .d for\n+\t Sun tcov compatibility.  */\n       ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LPBX\", 1);\n       {\n \tchar *cwd = getpwd ();\n@@ -460,7 +471,7 @@ end_final (filename)\n \t    {\n \t      ASM_GENERATE_INTERNAL_LABEL (name, \"LPB\", i);\n \t      assemble_integer (gen_rtx_SYMBOL_REF (Pmode, name),\n-\t\t\t\tpointer_bytes, 1);\n+\t\t\t\tpointer_bytes, align2, 1);\n \t    }\n \t}\n \n@@ -475,25 +486,25 @@ end_final (filename)\n \t\t  ASM_GENERATE_INTERNAL_LABEL (name, \"LPBC\",\n \t\t\t\t\t       ptr->func_label_num);\n \t\t  assemble_integer (gen_rtx_SYMBOL_REF (Pmode, name),\n-\t\t\t\t    pointer_bytes, 1);\n+\t\t\t\t    pointer_bytes, align2, 1);\n \t\t}\n \t      else\n-\t\tassemble_integer (const0_rtx, pointer_bytes, 1);\n+\t\tassemble_integer (const0_rtx, pointer_bytes, align2, 1);\n \t    }\n \n \t  for (; i < count_basic_blocks; i++)\n-\t    assemble_integer (const0_rtx, pointer_bytes, 1);\n+\t    assemble_integer (const0_rtx, pointer_bytes, align2, 1);\n \t}\n \n       if (write_symbols != NO_DEBUG && profile_block_flag)\n \t{\n \t  /* Output the table of line numbers.  */\n \t  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LPBX\", 5);\n \t  for ((ptr = bb_head), (i = 0); ptr != 0; (ptr = ptr->next), i++)\n-\t    assemble_integer (GEN_INT (ptr->line_num), long_bytes, 1);\n+\t    assemble_integer (GEN_INT (ptr->line_num), long_bytes, align2, 1);\n \n \t  for (; i < count_basic_blocks; i++)\n-\t    assemble_integer (const0_rtx, long_bytes, 1);\n+\t    assemble_integer (const0_rtx, long_bytes, align2, 1);\n \n \t  /* Output the table of file names.  */\n \t  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LPBX\", 6);\n@@ -504,23 +515,23 @@ end_final (filename)\n \t\t  ASM_GENERATE_INTERNAL_LABEL (name, \"LPBC\",\n \t\t\t\t\t       ptr->file_label_num);\n \t\t  assemble_integer (gen_rtx_SYMBOL_REF (Pmode, name),\n-\t\t\t\t    pointer_bytes, 1);\n+\t\t\t\t    pointer_bytes, align2, 1);\n \t\t}\n \t      else\n-\t\tassemble_integer (const0_rtx, pointer_bytes, 1);\n+\t\tassemble_integer (const0_rtx, pointer_bytes, align2, 1);\n \t    }\n \n \t  for (; i < count_basic_blocks; i++)\n-\t    assemble_integer (const0_rtx, pointer_bytes, 1);\n+\t    assemble_integer (const0_rtx, pointer_bytes, align2, 1);\n \t}\n \n       /* End with the address of the table of addresses,\n \t so we can find it easily, as the last word in the file's text.  */\n       if (profile_block_flag)\n \t{\n \t  ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 3);\n-\t  assemble_integer (gen_rtx_SYMBOL_REF (Pmode, name), pointer_bytes,\n-\t\t\t    1);\n+\t  assemble_integer (gen_rtx_SYMBOL_REF (Pmode, name),\n+\t\t\t    pointer_bytes, align2, 1);\n \t}\n     }\n }\n@@ -1684,7 +1695,7 @@ profile_function (file)\n   data_section ();\n   ASM_OUTPUT_ALIGN (file, floor_log2 (align / BITS_PER_UNIT));\n   ASM_OUTPUT_INTERNAL_LABEL (file, \"LP\", profile_label_no);\n-  assemble_integer (const0_rtx, LONG_TYPE_SIZE / BITS_PER_UNIT, 1);\n+  assemble_integer (const0_rtx, LONG_TYPE_SIZE / BITS_PER_UNIT, align, 1);\n #endif\n \n   function_section (current_function_decl);"}, {"sha": "8c2b791080694d14d80ea6f90be275a7df4499de", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -1,3 +1,8 @@\n+2001-08-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* class.c (emit_register_classes): Add align parameter to\n+\tcall to assemble_integer.\n+\n 2001-08-16  Alexandre Petit-Bianco  <apbianco@redhat.com>\n \n \t* jcf-parse.c (load_class): New locals saved and class_loaded. If"}, {"sha": "e8f7e6f312aaee569aa70452369fb0d6b73e0f6a", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -1893,7 +1893,7 @@ emit_register_classes ()\n       assemble_align (POINTER_SIZE);\n       for (t = registered_class; t; t = TREE_CHAIN (t))\n \tassemble_integer (XEXP (DECL_RTL (t), 0),\n-\t\t\t  POINTER_SIZE / BITS_PER_UNIT, 1);\n+\t\t\t  POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n #else\n       abort ();\n #endif"}, {"sha": "4c4c5aebcc1e01cfaadd4b52919f25ccc98b1583", "filename": "gcc/output.h", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -287,18 +287,17 @@ extern void assemble_eh_label\t\tPARAMS ((const char *));\n extern void assemble_name\t\tPARAMS ((FILE *, const char *));\n \n #ifdef RTX_CODE\n-/* Assemble the integer constant X into an object of SIZE bytes.\n-   X must be either a CONST_INT or CONST_DOUBLE.\n-\n-   Return 1 if we were able to output the constant, otherwise 0.  If FORCE is\n-   non-zero, abort if we can't output the constant.  */\n-extern int assemble_integer\t\tPARAMS ((rtx, int, int));\n-extern int assemble_eh_integer\t\tPARAMS ((rtx, int, int));\n+/* Assemble the integer constant X into an object of SIZE bytes.  ALIGN is\n+   the alignment of the integer in bits.  Return 1 if we were able to output\n+   the constant, otherwise 0.  If FORCE is non-zero, abort if we can't output\n+   the constant.  */\n+extern int assemble_integer\t\tPARAMS ((rtx, unsigned, unsigned, int));\n \n #ifdef REAL_VALUE_TYPE\n /* Assemble the floating-point constant D into an object of size MODE.  */\n extern void assemble_real\t\tPARAMS ((REAL_VALUE_TYPE,\n-\t\t\t\t\t       enum machine_mode));\n+\t\t\t\t\t         enum machine_mode,\n+\t\t\t\t\t\t unsigned));\n #endif\n #endif\n \n@@ -341,8 +340,10 @@ extern tree initializer_constant_valid_p\tPARAMS ((tree, tree));\n    Assumes output_addressed_constants has been done on EXP already.\n \n    Generate exactly SIZE bytes of assembler data, padding at the end\n-   with zeros if necessary.  SIZE must always be specified.  */\n-extern void output_constant\t\tPARAMS ((tree, int));\n+   with zeros if necessary.  SIZE must always be specified.\n+\n+   ALIGN is the alignment in bits that may be assumed for the data.  */\n+extern void output_constant\t\tPARAMS ((tree, int, unsigned));\n #endif\n \n #ifdef RTX_CODE"}, {"sha": "24380c290196059762b287177346cfecb156e915", "filename": "gcc/varasm.c", "status": "modified", "additions": 150, "deletions": 89, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af3574e39507d08798c890c034c1935b51885c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=c8af3574e39507d08798c890c034c1935b51885c", "patch": "@@ -161,7 +161,8 @@ static int mark_constant\t\tPARAMS ((rtx *current_rtx, void *data));\n static int output_addressed_constants\tPARAMS ((tree));\n static void output_after_function_constants PARAMS ((void));\n static unsigned HOST_WIDE_INT array_size_for_constructor PARAMS ((tree));\n-static void output_constructor\t\tPARAMS ((tree, int));\n+static unsigned min_align\t\tPARAMS ((unsigned, unsigned));\n+static void output_constructor\t\tPARAMS ((tree, int, unsigned));\n #ifdef ASM_WEAKEN_LABEL\n static void remove_from_pending_weak_list\tPARAMS ((const char *));\n #endif\n@@ -952,7 +953,7 @@ default_named_section_asm_out_destructor (symbol, priority)\n \n   named_section_flags (section, SECTION_WRITE);\n   assemble_align (POINTER_SIZE);\n-  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n }\n \n #ifdef DTORS_SECTION_ASM_OP\n@@ -973,7 +974,8 @@ default_dtor_section_asm_out_destructor (symbol, priority)\n      int priority ATTRIBUTE_UNUSED;\n {\n   dtors_section ();\n-  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+  assemble_align (POINTER_SIZE);\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n }\n #endif\n \n@@ -1012,7 +1014,8 @@ default_named_section_asm_out_constructor (symbol, priority)\n     }\n \n   named_section_flags (section, SECTION_WRITE);\n-  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+  assemble_align (POINTER_SIZE);\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n }\n \n #ifdef CTORS_SECTION_ASM_OP\n@@ -1033,7 +1036,8 @@ default_ctor_section_asm_out_constructor (symbol, priority)\n      int priority ATTRIBUTE_UNUSED;\n {\n   ctors_section ();\n-  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+  assemble_align (POINTER_SIZE);\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n }\n #endif\n \f\n@@ -1172,29 +1176,8 @@ assemble_zeros (size)\n   if (ASM_NO_SKIP_IN_TEXT && in_text_section ())\n     {\n       int i;\n-\n-      for (i = 0; i < size - 20; i += 20)\n-\t{\n-#ifdef ASM_BYTE_OP\n-\t  fprintf (asm_out_file,\n-\t\t   \"%s0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\\n\", ASM_BYTE_OP);\n-#else\n-\t  fprintf (asm_out_file,\n-\t\t   \"\\tbyte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\\n\");\n-#endif\n-\t}\n-      if (i < size)\n-        {\n-#ifdef ASM_BYTE_OP\n-\t  fprintf (asm_out_file, \"%s0\", ASM_BYTE_OP);\n-#else\n-\t  fprintf (asm_out_file, \"\\tbyte 0\");\n-#endif\n-\t  i++;\n-\t  for (; i < size; i++)\n-\t    fprintf (asm_out_file, \",0\");\n-\t  fprintf (asm_out_file, \"\\n\");\n-\t}\n+      for (i = 0; i < size; i++)\n+\tassemble_integer (const0_rtx, 1, BITS_PER_UNIT, 1);\n     }\n   else\n #endif\n@@ -1584,7 +1567,8 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n       if (DECL_INITIAL (decl))\n \t/* Output the actual data.  */\n \toutput_constant (DECL_INITIAL (decl),\n-\t\t\t tree_low_cst (DECL_SIZE_UNIT (decl), 1));\n+\t\t\t tree_low_cst (DECL_SIZE_UNIT (decl), 1),\n+\t\t\t align);\n       else\n \t/* Leave space for it.  */\n \tassemble_zeros (tree_low_cst (DECL_SIZE_UNIT (decl), 1));\n@@ -1801,52 +1785,90 @@ assemble_trampoline_template ()\n }\n #endif\n \f\n-/* Assemble the integer constant X into an object of SIZE bytes.\n-   X must be either a CONST_INT or CONST_DOUBLE.\n+/* A and B are either alignments or offsets.  Return the minimum alignment\n+   that may be assumed after adding the two together.  */\n+\n+static inline unsigned\n+min_align (a, b)\n+     unsigned int a, b;\n+{\n+  return (a | b) & -(a | b);\n+}\n \n-   Return 1 if we were able to output the constant, otherwise 0.  If FORCE is\n-   non-zero, abort if we can't output the constant.  */\n+/* Assemble the integer constant X into an object of SIZE bytes.  ALIGN is\n+   the alignment of the integer in bits.  Return 1 if we were able to output\n+   the constant, otherwise 0.  If FORCE is non-zero, abort if we can't output\n+   the constant.  */\n \n int\n-assemble_integer (x, size, force)\n+assemble_integer (x, size, align, force)\n      rtx x;\n-     int size;\n+     unsigned int size;\n+     unsigned int align;\n      int force;\n {\n   /* First try to use the standard 1, 2, 4, 8, and 16 byte\n      ASM_OUTPUT... macros.  */\n \n-  switch (size)\n-    {\n+  if (align >= size * BITS_PER_UNIT)\n+    switch (size)\n+      {\n #ifdef ASM_OUTPUT_CHAR\n-    case 1:\n-      ASM_OUTPUT_CHAR (asm_out_file, x);\n-      return 1;\n+      case 1:\n+\tASM_OUTPUT_CHAR (asm_out_file, x);\n+\treturn 1;\n #endif\n-\n #ifdef ASM_OUTPUT_SHORT\n-    case 2:\n-      ASM_OUTPUT_SHORT (asm_out_file, x);\n-      return 1;\n+      case 2:\n+\tASM_OUTPUT_SHORT (asm_out_file, x);\n+\treturn 1;\n #endif\n-\n #ifdef ASM_OUTPUT_INT\n-    case 4:\n-      ASM_OUTPUT_INT (asm_out_file, x);\n-      return 1;\n+      case 4:\n+\tASM_OUTPUT_INT (asm_out_file, x);\n+\treturn 1;\n #endif\n-\n #ifdef ASM_OUTPUT_DOUBLE_INT\n-    case 8:\n-      ASM_OUTPUT_DOUBLE_INT (asm_out_file, x);\n-      return 1;\n+      case 8:\n+\tASM_OUTPUT_DOUBLE_INT (asm_out_file, x);\n+\treturn 1;\n #endif\n-\n #ifdef ASM_OUTPUT_QUADRUPLE_INT\n-    case 16:\n-      ASM_OUTPUT_QUADRUPLE_INT (asm_out_file, x);\n-      return 1;\n+      case 16:\n+\tASM_OUTPUT_QUADRUPLE_INT (asm_out_file, x);\n+\treturn 1;\n+#endif\n+      }\n+  else\n+    {\n+      const char *asm_op = NULL;\n+\n+      switch (size)\n+\t{\n+#ifdef UNALIGNED_SHORT_ASM_OP\n+\tcase 2:\n+\t  asm_op = UNALIGNED_SHORT_ASM_OP;\n+\t  break;\n+#endif\n+#ifdef UNALIGNED_INT_ASM_OP\n+\tcase 4:\n+\t  asm_op = UNALIGNED_INT_ASM_OP;\n+\t  break;\n+#endif\n+#ifdef UNALIGNED_DOUBLE_INT_ASM_OP\n+\tcase 8:\n+\t  asm_op = UNALIGNED_DOUBLE_INT_ASM_OP;\n+\t  break;\n #endif\n+\t}\n+\n+      if (asm_op)\n+\t{\n+\t  fputs (asm_op, asm_out_file);\n+\t  output_addr_const (asm_out_file, x);\n+\t  fputc ('\\n', asm_out_file);\n+\t  return 1;\n+\t}\n     }\n \n   /* If we couldn't do it that way, there are two other possibilities: First,\n@@ -1861,24 +1883,22 @@ assemble_integer (x, size, force)\n     }\n #endif\n \n-  /* Finally, if SIZE is larger than a single word, try to output the constant\n+  /* If SIZE is larger than a single word, try to output the constant\n      one word at a time.  */\n \n   if (size > UNITS_PER_WORD)\n     {\n-      int i;\n       enum machine_mode mode\n \t= mode_for_size (size * BITS_PER_UNIT, MODE_INT, 0);\n-      rtx word;\n+      unsigned align2 = min_align (align, BITS_PER_WORD);\n+      unsigned int i;\n \n       for (i = 0; i < size / UNITS_PER_WORD; i++)\n \t{\n-\t  word = operand_subword (x, i, 0, mode);\n-\n+\t  rtx word = operand_subword (x, i, 0, mode);\n \t  if (word == 0)\n \t    break;\n-\n-\t  if (! assemble_integer (word, UNITS_PER_WORD, 0))\n+\t  if (! assemble_integer (word, UNITS_PER_WORD, align2, 0))\n \t    break;\n \t}\n \n@@ -1890,6 +1910,32 @@ assemble_integer (x, size, force)\n \tabort ();\n     }\n \n+  /* If unaligned, and this is a constant, emit it one byte at a time.  */\n+  if (align < size * BITS_PER_UNIT)\n+    {\n+      enum machine_mode omode, imode;\n+      unsigned int i;\n+ \n+      omode = mode_for_size (BITS_PER_UNIT, MODE_INT, 0);\n+      imode = mode_for_size (size * BITS_PER_UNIT, MODE_INT, 0);\n+\n+      for (i = 0; i < size; i++)\n+\t{\n+\t  rtx byte = simplify_subreg (omode, x, imode, i);\n+\t  if (byte == 0)\n+\t    break;\n+\t  if (! assemble_integer (byte, 1, BITS_PER_UNIT, 0))\n+\t    break;\n+\t}\n+\n+      if (i == size)\n+\treturn 1;\n+      /* If we output at least one byte and then could not finish,\n+\t there is no valid way to continue.  */\n+      if (i > 0)\n+\tabort ();\n+    }\n+\n   if (force)\n     abort ();\n \n@@ -1953,14 +1999,25 @@ assemble_real_1 (p)\n }\n \n void\n-assemble_real (d, mode)\n+assemble_real (d, mode, align)\n      REAL_VALUE_TYPE d;\n      enum machine_mode mode;\n+     unsigned int align;\n {\n   struct assemble_real_args args;\n   args.d = &d;\n   args.mode = mode;\n \n+  /* We cannot emit unaligned floating point constants.  This is slightly\n+     complicated in that we don't know what \"unaligned\" means exactly.  */\n+#ifdef BIGGEST_FIELD_ALIGNMENT\n+  if (align >= BIGGEST_FIELD_ALIGNMENT)\n+    ;\n+  else\n+#endif\n+  if (align < GET_MODE_ALIGNMENT (mode))\n+    abort ();\n+\n   if (do_float_handler (assemble_real_1, (PTR) &args))\n     return;\n \n@@ -3280,7 +3337,8 @@ output_constant_def_contents (exp, reloc, labelno)\n \t\t   (TREE_CODE (exp) == STRING_CST\n \t\t    ? MAX (TREE_STRING_LENGTH (exp),\n \t\t\t   int_size_in_bytes (TREE_TYPE (exp)))\n-\t\t    : int_size_in_bytes (TREE_TYPE (exp))));\n+\t\t    : int_size_in_bytes (TREE_TYPE (exp))),\n+\t\t   align);\n \n }\n \f\n@@ -3841,12 +3899,12 @@ output_constant_pool (fnname, fndecl)\n \t    abort ();\n \n \t  memcpy ((char *) &u, (char *) &CONST_DOUBLE_LOW (x), sizeof u);\n-\t  assemble_real (u.d, pool->mode);\n+\t  assemble_real (u.d, pool->mode, pool->align);\n \t  break;\n \n \tcase MODE_INT:\n \tcase MODE_PARTIAL_INT:\n-\t  assemble_integer (x, GET_MODE_SIZE (pool->mode), 1);\n+\t  assemble_integer (x, GET_MODE_SIZE (pool->mode), pool->align, 1);\n \t  break;\n \n \tdefault:\n@@ -3856,7 +3914,6 @@ output_constant_pool (fnname, fndecl)\n #ifdef ASM_OUTPUT_SPECIAL_POOL_ENTRY\n     done: ;\n #endif\n-\n     }\n \n #ifdef ASM_OUTPUT_POOL_EPILOGUE\n@@ -4258,12 +4315,15 @@ initializer_constant_valid_p (value, endtype)\n \n    There a case in which we would fail to output exactly SIZE bytes:\n    for a structure constructor that wants to produce more than SIZE bytes.\n-   But such constructors will never be generated for any possible input.  */\n+   But such constructors will never be generated for any possible input.\n+\n+   ALIGN is the alignment of the data in bits.  */\n \n void\n-output_constant (exp, size)\n-     register tree exp;\n-     register int size;\n+output_constant (exp, size, align)\n+     tree exp;\n+     int size;\n+     unsigned int align;\n {\n   register enum tree_code code = TREE_CODE (TREE_TYPE (exp));\n \n@@ -4318,7 +4378,7 @@ output_constant (exp, size)\n \n       if (! assemble_integer (expand_expr (exp, NULL_RTX, VOIDmode,\n \t\t\t\t\t   EXPAND_INITIALIZER),\n-\t\t\t      size, 0))\n+\t\t\t      size, align, 0))\n \terror (\"initializer for integer value is too complicated\");\n       size = 0;\n       break;\n@@ -4328,20 +4388,22 @@ output_constant (exp, size)\n \terror (\"initializer for floating value is not a floating constant\");\n \n       assemble_real (TREE_REAL_CST (exp),\n-\t\t     mode_for_size (size * BITS_PER_UNIT, MODE_FLOAT, 0));\n+\t\t     mode_for_size (size * BITS_PER_UNIT, MODE_FLOAT, 0),\n+\t\t     align);\n       size = 0;\n       break;\n \n     case COMPLEX_TYPE:\n-      output_constant (TREE_REALPART (exp), size / 2);\n-      output_constant (TREE_IMAGPART (exp), size / 2);\n+      output_constant (TREE_REALPART (exp), size / 2, align);\n+      output_constant (TREE_IMAGPART (exp), size / 2,\n+\t\t       min_align (align, BITS_PER_UNIT * (size / 2)));\n       size -= (size / 2) * 2;\n       break;\n \n     case ARRAY_TYPE:\n       if (TREE_CODE (exp) == CONSTRUCTOR)\n \t{\n-\t  output_constructor (exp, size);\n+\t  output_constructor (exp, size, align);\n \t  return;\n \t}\n       else if (TREE_CODE (exp) == STRING_CST)\n@@ -4364,7 +4426,7 @@ output_constant (exp, size)\n     case RECORD_TYPE:\n     case UNION_TYPE:\n       if (TREE_CODE (exp) == CONSTRUCTOR)\n-\toutput_constructor (exp, size);\n+\toutput_constructor (exp, size, align);\n       else\n \tabort ();\n       return;\n@@ -4373,7 +4435,7 @@ output_constant (exp, size)\n       if (TREE_CODE (exp) == INTEGER_CST)\n \tassemble_integer (expand_expr (exp, NULL_RTX,\n \t\t\t\t       VOIDmode, EXPAND_INITIALIZER),\n-\t\t\t  size, 1);\n+\t\t\t  size, align, 1);\n       else if (TREE_CODE (exp) == CONSTRUCTOR)\n \t{\n \t  unsigned char *buffer = (unsigned char *) alloca (size);\n@@ -4434,9 +4496,10 @@ array_size_for_constructor (val)\n    Generate at least SIZE bytes, padding if necessary.  */\n \n static void\n-output_constructor (exp, size)\n+output_constructor (exp, size, align)\n      tree exp;\n      int size;\n+     unsigned int align;\n {\n   tree type = TREE_TYPE (exp);\n   register tree link, field = 0;\n@@ -4496,14 +4559,15 @@ output_constructor (exp, size)\n \t  HOST_WIDE_INT lo_index = tree_low_cst (TREE_OPERAND (index, 0), 0);\n \t  HOST_WIDE_INT hi_index = tree_low_cst (TREE_OPERAND (index, 1), 0);\n \t  HOST_WIDE_INT index;\n+\t  unsigned int align2 = min_align (align, fieldsize * BITS_PER_UNIT);\n \n \t  for (index = lo_index; index <= hi_index; index++)\n \t    {\n \t      /* Output the element's initial value.  */\n \t      if (val == 0)\n \t\tassemble_zeros (fieldsize);\n \t      else\n-\t\toutput_constant (val, fieldsize);\n+\t\toutput_constant (val, fieldsize, align2);\n \n \t      /* Count its size.  */\n \t      total_bytes += fieldsize;\n@@ -4517,6 +4581,7 @@ output_constructor (exp, size)\n \t  /* Since this structure is static,\n \t     we know the positions are constant.  */\n \t  HOST_WIDE_INT pos = field ? int_byte_position (field) : 0;\n+\t  unsigned int align2;\n \n \t  if (index != 0)\n \t    pos = (tree_low_cst (TYPE_SIZE_UNIT (TREE_TYPE (val)), 1)\n@@ -4539,13 +4604,9 @@ output_constructor (exp, size)\n \t      total_bytes = pos;\n \t    }\n \n-          else if (field != 0 && DECL_PACKED (field))\n-\t    /* Some assemblers automaticallly align a datum according to its\n-\t       size if no align directive is specified.  The datum, however,\n-\t       may be declared with 'packed' attribute, so we have to disable\n-\t       such a feature.  */\n-\t    ASM_OUTPUT_ALIGN (asm_out_file, 0);\n-\n+\t  /* Find the alignment of this element.  */\n+\t  align2 = min_align (align, BITS_PER_UNIT * pos);\n+\t  \n \t  /* Determine size this element should occupy.  */\n \t  if (field)\n \t    {\n@@ -4581,7 +4642,7 @@ output_constructor (exp, size)\n \t  if (val == 0)\n \t    assemble_zeros (fieldsize);\n \t  else\n-\t    output_constant (val, fieldsize);\n+\t    output_constant (val, fieldsize, align2);\n \n \t  /* Count its size.  */\n \t  total_bytes += fieldsize;"}]}