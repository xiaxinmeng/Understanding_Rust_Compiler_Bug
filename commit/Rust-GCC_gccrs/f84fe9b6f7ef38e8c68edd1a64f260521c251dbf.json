{"sha": "f84fe9b6f7ef38e8c68edd1a64f260521c251dbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg0ZmU5YjZmN2VmMzhlOGM2OGVkZDFhNjRmMjYwNTIxYzI1MWRiZg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2008-01-25T11:23:44Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2008-01-25T11:23:44Z"}, "message": "stormy16-lib2.c (MIN_UNITS_PER_WORD): Provide a default definition.\n\n* config/stormy16/stormy16-lib2.c (MIN_UNITS_PER_WORD):\n  Provide a default definition.\n  (LIBGCC2_UNITS_PER_WORD): Likewise.\n\n  * config/stormy16/stormy16.c: Include df.h for the prototype\n  for df_regs_ever_live_p.\n  (xstormy16_expand_builtin_va_start): Convert the stack offset\n  into a component_ref and then use POINTER_PLUS_EXPR to add it\n  to the incoming_virtual_args_rtx.\n  (xstormy16_gimplify_va_arg_expr): Rename to\n  xstormy16_gimplify_va_arg_expr.\n  Use POINTER_PLUS_EXPR when performing pointer arithmetic.\n  (TARGET_GIMPLIFY_VA_ARG_EXPR): Use renamed\n  xstormy16_gimplify_va_arg_expr.\n  Fix up some formatting issues.\n\n  * config/stormy16/stormy16.c: (xstormy16_carry_plus_operand):\n  Move to predicates.md.\n  (xs_hi_general_operand): Likewise.\n  (xs_hi_nonmemory_operand): Likewise.\n  * config/stormy16/predicates.md:\n  (xstormy16_carry_plus_operand): New predicate.\n  (xs_hi_general_operand): New predicate.\n  (xs_hi_nonmemory_operand): New predicate.\n  * config/stormy16/stormy16-protos.h:\n  (xstormy16_carry_plus_operand): Delete prototype.\n  (xs_hi_general_operand): Likewise.\n  (xs_hi_nonmemory_operand): Likewise.\n\n  * config/storm16/stormy16.md (addhi3): Remove earlyclobber\n  modifiers as they are no longer needed and they can trigger\n  reload spill failures.\n\n  * config/storm16/stormy16.md (ineqbranchsi): Replace match_dup\n  with a match_operand in order to help reload.\n\n  * config/storm16/stormy16.md (movhi_internal): Replace 'r'\n  constraint with 'e' for the 8th alternative as this version of\n  the mov.w instruction only accepts the lower 8 registers.\n\nFrom-SVN: r131822", "tree": {"sha": "cd08f9e84fb608a2cf42c538267e93119356a874", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd08f9e84fb608a2cf42c538267e93119356a874"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f84fe9b6f7ef38e8c68edd1a64f260521c251dbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84fe9b6f7ef38e8c68edd1a64f260521c251dbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f84fe9b6f7ef38e8c68edd1a64f260521c251dbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84fe9b6f7ef38e8c68edd1a64f260521c251dbf/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1f0728e65fe428de34d8b94da525b97259a7ff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f0728e65fe428de34d8b94da525b97259a7ff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1f0728e65fe428de34d8b94da525b97259a7ff0"}], "stats": {"total": 187, "additions": 121, "deletions": 66}, "files": [{"sha": "f506a07351d4a85812deeca14d537b7d80c89347", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84fe9b6f7ef38e8c68edd1a64f260521c251dbf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84fe9b6f7ef38e8c68edd1a64f260521c251dbf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f84fe9b6f7ef38e8c68edd1a64f260521c251dbf", "patch": "@@ -1,3 +1,45 @@\n+2008-01-24  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/stormy16/stormy16-lib2.c (MIN_UNITS_PER_WORD):\n+\tProvide a default definition.\n+\t(LIBGCC2_UNITS_PER_WORD): Likewise.\n+\n+\t* config/stormy16/stormy16.c: Include df.h for the prototype\n+\tfor df_regs_ever_live_p.\n+\t(xstormy16_expand_builtin_va_start): Convert the stack offset\n+\tinto a component_ref and then use POINTER_PLUS_EXPR to add it\n+\tto the incoming_virtual_args_rtx.\n+\t(xstormy16_gimplify_va_arg_expr): Rename to\n+\txstormy16_gimplify_va_arg_expr.\n+\tUse POINTER_PLUS_EXPR when performing pointer arithmetic.\n+\t(TARGET_GIMPLIFY_VA_ARG_EXPR): Use renamed\n+\txstormy16_gimplify_va_arg_expr.\n+\tFix up some formatting issues.\n+\n+\t* config/stormy16/stormy16.c: (xstormy16_carry_plus_operand):\n+\tMove to predicates.md.\n+\t(xs_hi_general_operand): Likewise.\n+\t(xs_hi_nonmemory_operand): Likewise.\n+\t* config/stormy16/predicates.md:\n+\t(xstormy16_carry_plus_operand): New predicate.\n+\t(xs_hi_general_operand): New predicate.\n+\t(xs_hi_nonmemory_operand): New predicate.\n+\t* config/stormy16/stormy16-protos.h:\n+\t(xstormy16_carry_plus_operand): Delete prototype.\n+\t(xs_hi_general_operand): Likewise.\n+\t(xs_hi_nonmemory_operand): Likewise.\n+\n+\t* config/storm16/stormy16.md (addhi3): Remove earlyclobber\n+\tmodifiers as they are no longer needed and they can trigger\n+\treload spill failures.\n+\n+\t* config/storm16/stormy16.md (ineqbranchsi): Replace match_dup\n+\twith a match_operand in order to help reload.\n+\n+\t* config/storm16/stormy16.md (movhi_internal): Replace 'r'\n+\tconstraint with 'e' for the 8th alternative as this version of\n+\tthe mov.w instruction only accepts the lower 8 registers.\n+\n 2008-01-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/34856"}, {"sha": "0a9f18935ae5c309b1d0d1c61f8562618fbce16a", "filename": "gcc/config/stormy16/predicates.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84fe9b6f7ef38e8c68edd1a64f260521c251dbf/gcc%2Fconfig%2Fstormy16%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84fe9b6f7ef38e8c68edd1a64f260521c251dbf/gcc%2Fconfig%2Fstormy16%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fpredicates.md?ref=f84fe9b6f7ef38e8c68edd1a64f260521c251dbf", "patch": "@@ -143,3 +143,36 @@\n \t  && ! xstormy16_extra_constraint_p (op, 'Q')\n \t  && ! xstormy16_extra_constraint_p (op, 'R'));\n })\n+\n+(define_predicate \"xstormy16_carry_plus_operand\"\n+  (match_code \"plus\")\n+{\n+  return (GET_CODE (XEXP (op, 1)) == CONST_INT\n+\t  && (INTVAL (XEXP (op, 1)) < -4 || INTVAL (XEXP (op, 1)) > 4));\n+})\n+\n+(define_predicate \"xs_hi_general_operand\"\n+  (match_code \"const_int,reg,subreg,mem,symbol_ref,label_ref,const\")\n+{\n+  if ((GET_CODE (op) == CONST_INT)\n+       && ((INTVAL (op) >= 32768) || (INTVAL (op) < -32768)))\n+    {\n+      error (\"constant halfword load operand out of range\");\n+      return false;\n+    }\n+    \n+  return general_operand (op, mode);\n+})\n+\n+(define_predicate \"xs_hi_nonmemory_operand\"\n+  (match_code \"const_int,reg,subreg,const\")\n+{\n+  if ((GET_CODE (op) == CONST_INT) \n+       && ((INTVAL (op) >= 32768) || (INTVAL (op) < -32768)))\n+    {\n+      error (\"constant arithmetic operand out of range\");\n+      return false;\n+    }\n+\n+  return nonmemory_operand (op, mode);\n+})"}, {"sha": "0323c7b2475e51cb956f5ec6cf03ac03685b7894", "filename": "gcc/config/stormy16/stormy16-lib2.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84fe9b6f7ef38e8c68edd1a64f260521c251dbf/gcc%2Fconfig%2Fstormy16%2Fstormy16-lib2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84fe9b6f7ef38e8c68edd1a64f260521c251dbf/gcc%2Fconfig%2Fstormy16%2Fstormy16-lib2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-lib2.c?ref=f84fe9b6f7ef38e8c68edd1a64f260521c251dbf", "patch": "@@ -43,6 +43,23 @@\n #define ATTRIBUTE_HIDDEN\n #endif\n \n+#ifndef MIN_UNITS_PER_WORD\n+#define MIN_UNITS_PER_WORD UNITS_PER_WORD\n+#endif\n+\n+#ifndef LIBGCC2_UNITS_PER_WORD\n+# if MIN_UNITS_PER_WORD > 4\n+#  define LIBGCC2_UNITS_PER_WORD 8\n+# elif (MIN_UNITS_PER_WORD > 2 \\\n+        || (MIN_UNITS_PER_WORD > 1 && LONG_LONG_TYPE_SIZE > 32))\n+#  define LIBGCC2_UNITS_PER_WORD 4\n+# else\n+#  define LIBGCC2_UNITS_PER_WORD MIN_UNITS_PER_WORD\n+# endif\n+#endif\n+\n+#define word_type Wtype\n+\n #include \"libgcc2.h\"\n #undef int\n "}, {"sha": "fa39455cbaaf412a179404c4e18642b4ba01bfed", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84fe9b6f7ef38e8c68edd1a64f260521c251dbf/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84fe9b6f7ef38e8c68edd1a64f260521c251dbf/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=f84fe9b6f7ef38e8c68edd1a64f260521c251dbf", "patch": "@@ -69,9 +69,6 @@ extern int  short_memory_operand (rtx, enum machine_mode);\n extern int  nonimmediate_nonstack_operand (rtx, enum machine_mode);\n extern enum reg_class xstormy16_secondary_reload_class \n  (enum reg_class, enum machine_mode, rtx);\n-extern int  xstormy16_carry_plus_operand (rtx, enum machine_mode);\n-extern int  xs_hi_general_operand (rtx, enum machine_mode);\n-extern int  xs_hi_nonmemory_operand (rtx, enum machine_mode);\n extern enum reg_class xstormy16_preferred_reload_class (rtx, enum reg_class);\n extern int xstormy16_legitimate_address_p (enum machine_mode, rtx, int);\n extern void xstormy16_split_move (enum machine_mode, rtx, rtx);"}, {"sha": "a4c1746319476027bf25cd0404dd5f5ef4b99df4", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 20, "deletions": 47, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84fe9b6f7ef38e8c68edd1a64f260521c251dbf/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84fe9b6f7ef38e8c68edd1a64f260521c251dbf/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=f84fe9b6f7ef38e8c68edd1a64f260521c251dbf", "patch": "@@ -1,6 +1,6 @@\n /* Xstormy16 target functions.\n    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2006, 2007 Free Software Foundation, Inc.\n+   2006, 2007, 2008 Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n This file is part of GCC.\n@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"langhooks.h\"\n #include \"tree-gimple.h\"\n+#include \"df.h\"\n #include \"ggc.h\"\n \n static rtx emit_addhi3_postreload (rtx, rtx, rtx);\n@@ -481,35 +482,6 @@ xstormy16_secondary_reload_class (enum reg_class class,\n   return NO_REGS;\n }\n \n-/* Recognize a PLUS that needs the carry register.  */\n-int\n-xstormy16_carry_plus_operand (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return (GET_CODE (x) == PLUS\n-\t  && GET_CODE (XEXP (x, 1)) == CONST_INT\n-\t  && (INTVAL (XEXP (x, 1)) < -4 || INTVAL (XEXP (x, 1)) > 4));\n-}\n-\n-/* Detect and error out on out-of-range constants for movhi.  */\n-int\n-xs_hi_general_operand (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  if ((GET_CODE (x) == CONST_INT) \n-   && ((INTVAL (x) >= 32768) || (INTVAL (x) < -32768)))\n-    error (\"constant halfword load operand out of range\");\n-  return general_operand (x, mode);\n-}\n-\n-/* Detect and error out on out-of-range constants for addhi and subhi.  */\n-int\n-xs_hi_nonmemory_operand (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  if ((GET_CODE (x) == CONST_INT) \n-   && ((INTVAL (x) >= 32768) || (INTVAL (x) < -32768)))\n-    error (\"constant arithmetic operand out of range\");\n-  return nonmemory_operand (x, mode);\n-}\n-\n enum reg_class\n xstormy16_preferred_reload_class (rtx x, enum reg_class class)\n {\n@@ -669,7 +641,7 @@ xstormy16_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n       && (! strict || REGNO (x) < FIRST_PSEUDO_REGISTER))\n     return 1;\n \n-  if (xstormy16_below100_symbol(x, mode))\n+  if (xstormy16_below100_symbol (x, mode))\n     return 1;\n   \n   return 0;\n@@ -759,7 +731,7 @@ xstormy16_extra_constraint_p (rtx x, int c)\n \t      && (INTVAL (x) == 0));\n \n     case 'W':\n-      return xstormy16_below100_operand(x, GET_MODE(x));\n+      return xstormy16_below100_operand (x, GET_MODE (x));\n \n     default:\n       return 0;\n@@ -1357,7 +1329,7 @@ xstormy16_expand_builtin_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n {\n   tree f_base, f_count;\n   tree base, count;\n-  tree t;\n+  tree t,u;\n \n   if (xstormy16_interrupt_function_p ())\n     error (\"cannot use va_start in interrupt function\");\n@@ -1370,8 +1342,9 @@ xstormy16_expand_builtin_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n \t\t  NULL_TREE);\n \n   t = make_tree (TREE_TYPE (base), virtual_incoming_args_rtx);\n-  t = build2 (PLUS_EXPR, TREE_TYPE (base), t, \n-\t      build_int_cst (NULL_TREE, INCOMING_FRAME_SP_OFFSET));\n+  u = build_int_cst (NULL_TREE, INCOMING_FRAME_SP_OFFSET);\n+  u = fold_convert (TREE_TYPE (count), u);\n+  t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (base), t, u);\n   t = build2 (GIMPLE_MODIFY_STMT, TREE_TYPE (base), base, t);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -1388,8 +1361,8 @@ xstormy16_expand_builtin_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n    Note:  This algorithm is documented in stormy-abi.  */\n    \n static tree\n-xstormy16_expand_builtin_va_arg (tree valist, tree type, tree *pre_p,\n-\t\t\t\t tree *post_p ATTRIBUTE_UNUSED)\n+xstormy16_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n+\t\t\t\ttree *post_p ATTRIBUTE_UNUSED)\n {\n   tree f_base, f_count;\n   tree base, count;\n@@ -1428,9 +1401,8 @@ xstormy16_expand_builtin_va_arg (tree valist, tree type, tree *pre_p,\n \t\t  build1 (GOTO_EXPR, void_type_node, lab_fromstack),\n \t\t  NULL_TREE);\n       gimplify_and_add (t, pre_p);\n-  \n-      t = fold_convert (ptr_type_node, count_tmp);\n-      t = build2 (PLUS_EXPR, ptr_type_node, base, t);\n+\n+      t = build2 (POINTER_PLUS_EXPR, ptr_type_node, base, count_tmp);\n       t = build2 (GIMPLE_MODIFY_STMT, void_type_node, addr, t);\n       gimplify_and_add (t, pre_p);\n \n@@ -1464,8 +1436,9 @@ xstormy16_expand_builtin_va_arg (tree valist, tree type, tree *pre_p,\n   t = build2 (MINUS_EXPR, TREE_TYPE (count), count_tmp, t);\n   t = build2 (PLUS_EXPR, TREE_TYPE (count), t,\n \t      fold_convert (TREE_TYPE (count), size_tree));\n-  t = fold_convert (TREE_TYPE (base), fold (t));\n-  t = build2 (MINUS_EXPR, TREE_TYPE (base), base, t);\n+  t = fold_convert (TREE_TYPE (t), fold (t));\n+  t = fold_build1 (NEGATE_EXPR, TREE_TYPE (t), t);\n+  t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (base), base, t);\n   t = build2 (GIMPLE_MODIFY_STMT, void_type_node, addr, t);\n   gimplify_and_add (t, pre_p);\n \n@@ -2338,10 +2311,10 @@ xstormy16_init_builtins (void)\n }\n \n static rtx\n-xstormy16_expand_builtin(tree exp, rtx target,\n-\t\t\t rtx subtarget ATTRIBUTE_UNUSED,\n-\t\t\t enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t int ignore ATTRIBUTE_UNUSED)\n+xstormy16_expand_builtin (tree exp, rtx target,\n+\t\t\t  rtx subtarget ATTRIBUTE_UNUSED,\n+\t\t\t  enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t  int ignore ATTRIBUTE_UNUSED)\n {\n   rtx op[10], args[10], pat, copyto[10], retval = 0;\n   tree fndecl, argtree;\n@@ -2669,7 +2642,7 @@ xstormy16_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n #undef TARGET_EXPAND_BUILTIN_VA_START\n #define TARGET_EXPAND_BUILTIN_VA_START xstormy16_expand_builtin_va_start\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n-#define TARGET_GIMPLIFY_VA_ARG_EXPR xstormy16_expand_builtin_va_arg\n+#define TARGET_GIMPLIFY_VA_ARG_EXPR xstormy16_gimplify_va_arg_expr\n \n #undef TARGET_PROMOTE_FUNCTION_ARGS\n #define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true"}, {"sha": "bd68243a7e8fe4fee9366c6c08e9c69aae7b8fe7", "filename": "gcc/config/stormy16/stormy16.md", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84fe9b6f7ef38e8c68edd1a64f260521c251dbf/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84fe9b6f7ef38e8c68edd1a64f260521c251dbf/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.md?ref=f84fe9b6f7ef38e8c68edd1a64f260521c251dbf", "patch": "@@ -185,7 +185,7 @@\n \n (define_insn \"movhi_internal\"\n   [(set (match_operand:HI 0 \"nonimmediate_nonstack_operand\" \"=r,m,e,e,T,r,S,W,r\")\n-\t(match_operand:HI 1 \"xs_hi_general_operand\"       \"r,e,m,L,L,i,i,ir,W\"))]\n+\t(match_operand:HI 1 \"xs_hi_general_operand\"          \"r,e,m,L,L,i,i,ie,W\"))]\n   \"\"\n   \"@\n    mov %0,%1\n@@ -304,19 +304,16 @@\n ;; ::::::::::::::::::::\n \n ;; Addition\n-; Operand 3 is marked earlyclobber because that helps reload\n-; to generate better code---this pattern will never need the\n-; carry register as an input, and some output reloads or input\n-; reloads might need to use it.  In fact, without the '&' reload\n-; will fail in some cases.\n+; Note - the early clobber modifier is no longer needed on operand 3\n+; and in fact can cause some reload spill failures if it is present.\n ; Note that the 'Z' constraint matches \"add $reg,0\", which reload\n ; will occasionally emit.  We avoid the \"add $reg,imm\" match because\n ; it clobbers the carry.\n (define_insn \"addhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,T,T,r,r,r\")\n \t(plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0,0,0,0,0,0\")\n \t\t (match_operand:HI 2 \"xs_hi_nonmemory_operand\" \"O,P,Z,L,M,Ir,N,i\")))\n-   (clobber (match_scratch:BI 3 \"=X,X,X,&y,&y,&y,&y,&y\"))]\n+   (clobber (match_scratch:BI 3 \"=X,X,X,y,y,y,y,y\"))]\n   \"\"\n   \"@\n    inc %0,%o2\n@@ -905,15 +902,11 @@\n \t\t\t\t\t\t\t \"ri\")])\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-;; Although I would greatly like the 'match_dup' in the following line\n-;; to actually be a register constraint, there is (at the time of writing) no\n-;; way for reload to insert an output reload on the edges out of a branch.\n-;; If reload is fixed to use insert_insn_on_edge, this can be changed,\n-;; preferably to a 'minus' operand that explains the actual operation, like:\n-; (set (match_operand 5 \"register_operand\" \"=2\")\n-;      (minus:SI (match_operand 6 \"register_operand\" \"2\")\n-;\t\t (match_operand 7 \"register_operand\" \"3\")))\n-   (clobber (match_dup 2))\n+   ;; This clobber is problematic.  Too many gcc optimizations will change\n+   ;; operand 2 without changing the clobber.  At the time of writing there\n+   ;; is no way around this. :-(  For an example try compiling:\n+   ;; gcc.c-torture/compile/20000403-1.c -O3 -fomit-frame-pointer -funroll-loops\n+   (clobber (match_operand:SI 5 \"register_operand\" \"=2\"))\n    (clobber (match_operand:BI 4 \"\" \"=&y\"))]\n   \"\"\n   \"#\""}]}