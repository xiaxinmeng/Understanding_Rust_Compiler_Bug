{"sha": "3fa31ee92a75cb1afc321d7016c3c7ab28d7899c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZhMzFlZTkyYTc1Y2IxYWZjMzIxZDcwMTZjM2M3YWIyOGQ3ODk5Yw==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-06-14T18:17:00Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-06-14T18:17:00Z"}, "message": "re PR fortran/89646 (Spurious actual argument might interfere warning)\n\n2019-06-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/89646\n\t* dependency.c (gfc_check_argument_var_dependency): Suppress spurious\n\twarnings by comparing variable names.\n\n2019-06-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/89646\n\t* gfortran.dg/pr89646.f90: New test.\n\nFrom-SVN: r272307", "tree": {"sha": "ffac84acec7fec47186b1550936332070e97cedd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffac84acec7fec47186b1550936332070e97cedd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fa31ee92a75cb1afc321d7016c3c7ab28d7899c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa31ee92a75cb1afc321d7016c3c7ab28d7899c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa31ee92a75cb1afc321d7016c3c7ab28d7899c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa31ee92a75cb1afc321d7016c3c7ab28d7899c/comments", "author": null, "committer": null, "parents": [{"sha": "957ed7386177e7d5da6b2908ec576906b784c892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957ed7386177e7d5da6b2908ec576906b784c892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/957ed7386177e7d5da6b2908ec576906b784c892"}], "stats": {"total": 49, "additions": 44, "deletions": 5}, "files": [{"sha": "9a82b9b789c4545a9db5e92117022d28111904fb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa31ee92a75cb1afc321d7016c3c7ab28d7899c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa31ee92a75cb1afc321d7016c3c7ab28d7899c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3fa31ee92a75cb1afc321d7016c3c7ab28d7899c", "patch": "@@ -1,4 +1,10 @@\n-2019-06-12  Steven G. Kargl  <kargl@gcc.gnu.org>\n+2019-06-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/89646\n+\t* dependency.c (gfc_check_argument_var_dependency): Suppress spurious\n+\twarnings by comparing variable names.\n+\n+2019-06-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/68544\n \t* resolve.c (is_dt_name): New function to compare symbol name against"}, {"sha": "be330e276c295d38a5555d3488c3e907311099aa", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa31ee92a75cb1afc321d7016c3c7ab28d7899c/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa31ee92a75cb1afc321d7016c3c7ab28d7899c/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=3fa31ee92a75cb1afc321d7016c3c7ab28d7899c", "patch": "@@ -979,10 +979,14 @@ gfc_check_argument_var_dependency (gfc_expr *var, sym_intent intent,\n \t\t     If a dependency is found in the case\n \t\t     elemental == ELEM_CHECK_VARIABLE, we will generate\n \t\t     a temporary, so we don't need to bother the user.  */\n-\t\t  gfc_warning (0, \"INTENT(%s) actual argument at %L might \"\n-\t\t\t       \"interfere with actual argument at %L.\",\n-\t\t   \t       intent == INTENT_OUT ? \"OUT\" : \"INOUT\",\n-\t\t   \t       &var->where, &expr->where);\n+\n+\t\t  if (var->expr_type == EXPR_VARIABLE\n+\t\t      && expr->expr_type == EXPR_VARIABLE\n+\t\t      && strcmp(var->symtree->name, expr->symtree->name) == 0)\n+\t\t    gfc_warning (0, \"INTENT(%s) actual argument at %L might \"\n+\t\t\t\t \"interfere with actual argument at %L.\",\n+\t\t\t\t intent == INTENT_OUT ? \"OUT\" : \"INOUT\",\n+\t\t\t\t &var->where, &expr->where);\n \t\t}\n \t      return 0;\n \t    }"}, {"sha": "8ab6cb423e6864e1dbbbe4911dbf3adb06a0bc60", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa31ee92a75cb1afc321d7016c3c7ab28d7899c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa31ee92a75cb1afc321d7016c3c7ab28d7899c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3fa31ee92a75cb1afc321d7016c3c7ab28d7899c", "patch": "@@ -1,3 +1,8 @@\n+2019-06-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/89646\n+\t* gfortran.dg/pr89646.f90: New test.\n+\n 2019-06-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR rtl-optimization/90765"}, {"sha": "c3480202bc6c7bff26b8946150523633a166fdeb", "filename": "gcc/testsuite/gfortran.dg/pr89646.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa31ee92a75cb1afc321d7016c3c7ab28d7899c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr89646.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa31ee92a75cb1afc321d7016c3c7ab28d7899c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr89646.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr89646.f90?ref=3fa31ee92a75cb1afc321d7016c3c7ab28d7899c", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do compile }\n+! PR fortran/89646\n+! Original testcase contributed by Ian Harvey <ian_harvey at bigpond dot com>\n+!\n+! This code use to give spurious warnings about aliasing.\n+!\n+module m\n+   implicit none\n+   type :: t\n+   end type t\n+   contains\n+      ! To reproduce, both actual arguments must be TARGET, \n+      ! both arguments must be of derived type.\n+      subroutine s\n+         type(t), target :: a(5)\n+         type(t), target :: b(5)\n+         call move(a, b)\n+      end subroutine s\n+      ! To reproduce, called procedure must be elemental.\n+      elemental subroutine move(x, y)\n+         type(t), intent(inout) :: x\n+         type(t), intent(out) :: y\n+      end subroutine move\n+end module m"}]}