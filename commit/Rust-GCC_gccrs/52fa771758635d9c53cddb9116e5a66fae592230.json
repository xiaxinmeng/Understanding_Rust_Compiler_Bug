{"sha": "52fa771758635d9c53cddb9116e5a66fae592230", "node_id": "C_kwDOANBUbNoAKDUyZmE3NzE3NTg2MzVkOWM1M2NkZGI5MTE2ZTVhNjZmYWU1OTIyMzA", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-11-06T06:29:13Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-11-10T04:06:54Z"}, "message": "aarch64: [PR101529] Fix vector shuffle insertion expansion\n\nThe function aarch64_evpc_ins would reuse the target even though\nit might be the same register as the two inputs.\nInstead of checking to see if we can reuse the target, just use the\noriginal input directly.\n\nCommitted as approved after bootstrapped and tested on\naarch64-linux-gnu with no regressions.\n\n\tPR target/101529\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64.c (aarch64_evpc_ins): Don't use target\n\tas an input, use original one.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/torture/builtin-convertvector-2.c: New test.\n\t* c-c++-common/torture/builtin-shufflevector-2.c: New test.", "tree": {"sha": "c37f8acd90f05fcebc22af53cd9725db9d69a0a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c37f8acd90f05fcebc22af53cd9725db9d69a0a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52fa771758635d9c53cddb9116e5a66fae592230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52fa771758635d9c53cddb9116e5a66fae592230", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52fa771758635d9c53cddb9116e5a66fae592230", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52fa771758635d9c53cddb9116e5a66fae592230/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "e23d7cf3d8fa361f2b732c95e773a059769e8215", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fa771758635d9c53cddb9116e5a66fae592230/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fa771758635d9c53cddb9116e5a66fae592230/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=52fa771758635d9c53cddb9116e5a66fae592230", "patch": "@@ -23102,11 +23102,10 @@ aarch64_evpc_ins (struct expand_vec_perm_d *d)\n     }\n   gcc_assert (extractindex < nelt);\n \n-  emit_move_insn (d->target, insv);\n   insn_code icode = code_for_aarch64_simd_vec_copy_lane (mode);\n   expand_operand ops[5];\n   create_output_operand (&ops[0], d->target, mode);\n-  create_input_operand (&ops[1], d->target, mode);\n+  create_input_operand (&ops[1], insv, mode);\n   create_integer_operand (&ops[2], 1 << idx);\n   create_input_operand (&ops[3], extractv, mode);\n   create_integer_operand (&ops[4], extractindex);"}, {"sha": "d88f6a72b5cbcb4431eb3fda4b9c9fa5611b9e89", "filename": "gcc/testsuite/c-c++-common/torture/builtin-convertvector-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fa771758635d9c53cddb9116e5a66fae592230/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-convertvector-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fa771758635d9c53cddb9116e5a66fae592230/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-convertvector-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-convertvector-2.c?ref=52fa771758635d9c53cddb9116e5a66fae592230", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* PR target/101529 */\n+\n+typedef unsigned char __attribute__((__vector_size__ (1))) W;\n+typedef unsigned char __attribute__((__vector_size__ (8))) V;\n+typedef unsigned short __attribute__((__vector_size__ (16))) U;\n+\n+unsigned short us;\n+\n+/* aarch64 used to miscompile foo to just return 0. */\n+W\n+foo (unsigned char uc)\n+{\n+  V v = __builtin_convertvector ((U){ } >= us, V);\n+  return __builtin_shufflevector ((W){ }, v, 4) & uc;\n+}\n+\n+int\n+main (void)\n+{\n+  W x = foo (5);\n+  if (x[0] != 5)\n+    __builtin_abort();\n+  return 0;\n+}\n+"}, {"sha": "7c4999ed4e95f12421cf4331dd40897d6de40024", "filename": "gcc/testsuite/c-c++-common/torture/builtin-shufflevector-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fa771758635d9c53cddb9116e5a66fae592230/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-shufflevector-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fa771758635d9c53cddb9116e5a66fae592230/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-shufflevector-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-shufflevector-2.c?ref=52fa771758635d9c53cddb9116e5a66fae592230", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run}  */\n+/* PR target/101529 */\n+typedef unsigned char C;\n+typedef unsigned char __attribute__((__vector_size__ (8))) V;\n+typedef unsigned char __attribute__((__vector_size__ (32))) U;\n+\n+C c;\n+\n+/* aarch64 used to miscompile foo to just return a vector of 0s */\n+V\n+foo (V v)\n+{\n+  v |= __builtin_shufflevector (c * v, (U) (0 == (U){ }),\n+\t\t\t\t0, 1, 8, 32, 8, 20, 36, 36);\n+  return v;\n+}\n+\n+int\n+main (void)\n+{\n+  V v = foo ((V) { });\n+  for (unsigned i = 0; i < sizeof (v); i++)\n+    if (v[i] != (i >= 2 ? 0xff : 0))\n+      __builtin_abort ();\n+  return 0;\n+}"}]}