{"sha": "10de6d35ba793376ad963b88e40fecf3ea6ea914", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBkZTZkMzViYTc5MzM3NmFkOTYzYjg4ZTQwZmVjZjNlYTZlYTkxNA==", "commit": {"author": {"name": "Kate Hedstrom", "email": "kate@ahab.rutgers.edu", "date": "1997-11-25T23:17:56Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-11-25T23:17:56Z"}, "message": "* lib/f-torture.exp: Improve error and loop detection.\n\nFrom-SVN: r16711", "tree": {"sha": "7976c2d628806d8f217793e37edea8956b776473", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7976c2d628806d8f217793e37edea8956b776473"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10de6d35ba793376ad963b88e40fecf3ea6ea914", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10de6d35ba793376ad963b88e40fecf3ea6ea914", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10de6d35ba793376ad963b88e40fecf3ea6ea914", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10de6d35ba793376ad963b88e40fecf3ea6ea914/comments", "author": null, "committer": null, "parents": [{"sha": "d6749532884247a0cfcf8d7162186ef7a6a349a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6749532884247a0cfcf8d7162186ef7a6a349a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6749532884247a0cfcf8d7162186ef7a6a349a3"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "8f6a051de400502d2f40779f0901ed83432d2f0d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10de6d35ba793376ad963b88e40fecf3ea6ea914/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10de6d35ba793376ad963b88e40fecf3ea6ea914/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=10de6d35ba793376ad963b88e40fecf3ea6ea914", "patch": "@@ -1,3 +1,7 @@\n+Tue Nov 25 16:18:51 1997  Kate Hedstrom  (kate@ahab.rutgers.edu)\n+\n+        * lib/f-torture.exp: Improve error and loop detection.\n+\n Fri Sep 26 10:50:53 1997  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* lib/c-torture.exp(c-torture-execute): Fix typo."}, {"sha": "5bd6027576c301ef68e4275c8ea88ab71bdc14b4", "filename": "gcc/testsuite/lib/f-torture.exp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10de6d35ba793376ad963b88e40fecf3ea6ea914/gcc%2Ftestsuite%2Flib%2Ff-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10de6d35ba793376ad963b88e40fecf3ea6ea914/gcc%2Ftestsuite%2Flib%2Ff-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ff-torture.exp?ref=10de6d35ba793376ad963b88e40fecf3ea6ea914", "patch": "@@ -74,7 +74,7 @@ proc f-torture-compile { src option } {\n     set comp_output [g77_target_compile \"$src\" \"$output\" object $options];\n     \n     # Set a few common compiler messages.\n-    set fatal_signal \"*cc: Internal compiler error: program*got fatal signal\"\n+    set fatal_signal \"*77*: Internal compiler error: program*got fatal signal\"\n  \n     if [string match \"$fatal_signal 6\" $comp_output] then {\n \tg77_fail $testcase \"Got Signal 6, $option\"\n@@ -89,7 +89,7 @@ proc f-torture-compile { src option } {\n     }\n \n     # We shouldn't get these because of -w, but just in case.\n-    if [string match \"*cc:*warning:*\" $comp_output] then {\n+    if [string match \"*77*:*warning:*\" $comp_output] then {\n \twarning \"$testcase: (with warnings) $option\"\n \tsend_log \"$comp_output\\n\"\n \tunresolved \"$testcase, $option\"\n@@ -146,7 +146,7 @@ proc f-torture-execute { src } {\n     # Look for a loop within the source code - if we don't find one,\n     # don't pass -funroll[-all]-loops.\n     global torture_with_loops torture_without_loops\n-    if [expr [search_for $src \"do*(\"]+[search_for $src \"while*(\"]] then {\n+    if [expr [search_for $src \"do *\\[0-9\\]\"]+[search_for $src \"end *do\"]] then {\n \tset option_list $torture_with_loops\n     } else {\n \tset option_list $torture_without_loops\n@@ -177,7 +177,7 @@ proc f-torture-execute { src } {\n \tset comp_output [g77_target_compile \"$src\" \"$executable\" executable $options];\n \n \t# Set a few common compiler messages.\n-\tset fatal_signal \"*cc: Internal compiler error: program*got fatal signal\"\n+\tset fatal_signal \"*77*: Internal compiler error: program*got fatal signal\"\n \t\n \tif [string match \"$fatal_signal 6\" $comp_output] then {\n \t    g77_fail $testcase \"Got Signal 6, $option\"\n@@ -192,7 +192,7 @@ proc f-torture-execute { src } {\n \t}\n \t\n \t# We shouldn't get these because of -w, but just in case.\n-\tif [string match \"*cc:*warning:*\" $comp_output] then {\n+\tif [string match \"*77*:*warning:*\" $comp_output] then {\n \t    warning \"$testcase: (with warnings) $option\"\n \t    send_log \"$comp_output\\n\"\n \t    unresolved \"$testcase, $option\"\n@@ -225,7 +225,7 @@ proc f-torture-execute { src } {\n \t# See if this source file uses \"long long\" types, if it does, and\n \t# no_long_long is set, skip execution of the test.\n \tif [target_info exists no_long_long] then {\n-\t    if [expr [search_for $src \"long long\"]] then {\n+\t    if [expr [search_for $src \"integer\\*8\"]] then {\n \t\tuntested \"$testcase execution, $option\"\n \t\tcontinue\n \t    }\n@@ -252,7 +252,7 @@ proc search_for { file pattern } {\n     set fd [open $file r]\n     while { [gets $fd cur_line]>=0 } {\n \tset lower [string tolower $cur_line]\n-\tif [string match \"*$pattern*\" $lower] then {\n+\tif [regexp \"$pattern\" $lower] then {\n \t    close $fd\n \t    return 1\n \t}\n@@ -302,7 +302,7 @@ proc f-torture { args } {\n     # Look for a loop within the source code - if we don't find one,\n     # don't pass -funroll[-all]-loops.\n     global torture_with_loops torture_without_loops\n-    if [expr [search_for $src \"do*(\"]+[search_for $src \"while*(\"]] then {\n+    if [expr [search_for $src \"do *\\[0-9\\]\"]+[search_for $src \"end *do\"]] then {\n \tset option_list $torture_with_loops\n     } else {\n \tset option_list $torture_without_loops"}]}