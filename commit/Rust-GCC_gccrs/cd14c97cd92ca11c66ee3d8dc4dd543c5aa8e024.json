{"sha": "cd14c97cd92ca11c66ee3d8dc4dd543c5aa8e024", "node_id": "C_kwDOANBUbNoAKGNkMTRjOTdjZDkyY2ExMWM2NmVlM2Q4ZGM0ZGQ1NDNjNWFhOGUwMjQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-14T11:53:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-14T12:50:36Z"}, "message": "tree-optimization/106938 - cleanup abnormal edges after inlining\n\nAfter inlining and IPA transforms we run fixup_cfg to fixup CFG\neffects in other functions.  But that fails to clean abnormal\nedges from non-pure/const calls which might no longer be necessary\nwhen ->calls_setjmp is false.  The following ensures this happens\nand refactors things so we call EH/abnormal cleanup only on the\nlast stmt in a block.\n\n\tPR tree-optimization/106938\n\t* tree-cfg.cc (execute_fixup_cfg): Purge dead abnormal\n\tedges for all last stmts in a block.  Do EH cleanup\n\tonly on the last stmt in a block.\n\n\t* gcc.dg/pr106938.c: New testcase.", "tree": {"sha": "9936c7b2d0245ae14a1ec0eb179adc356eea8a67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9936c7b2d0245ae14a1ec0eb179adc356eea8a67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd14c97cd92ca11c66ee3d8dc4dd543c5aa8e024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd14c97cd92ca11c66ee3d8dc4dd543c5aa8e024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd14c97cd92ca11c66ee3d8dc4dd543c5aa8e024", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd14c97cd92ca11c66ee3d8dc4dd543c5aa8e024/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12a8d5e2f2e7d7535115e4e105c0f9eb4d50fdad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a8d5e2f2e7d7535115e4e105c0f9eb4d50fdad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12a8d5e2f2e7d7535115e4e105c0f9eb4d50fdad"}], "stats": {"total": 49, "additions": 43, "deletions": 6}, "files": [{"sha": "7365a8c29fbae072fbe80a67a3a8a5fd8048591a", "filename": "gcc/testsuite/gcc.dg/pr106938.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd14c97cd92ca11c66ee3d8dc4dd543c5aa8e024/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106938.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd14c97cd92ca11c66ee3d8dc4dd543c5aa8e024/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106938.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106938.c?ref=cd14c97cd92ca11c66ee3d8dc4dd543c5aa8e024", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fno-ipa-pure-const -fno-tree-ccp -Wuninitialized\" } */\n+\n+int n;\n+\n+void\n+undefined (void);\n+\n+__attribute__ ((returns_twice)) int\n+zero (void)\n+{\n+  return 0;\n+}\n+\n+void\n+bar (int)\n+{\n+  int i;\n+\n+  for (i = 0; i < -1; ++i)\n+    n = 0;\n+}\n+\n+__attribute__ ((simd)) void\n+foo (void)\n+{\n+  int uninitialized;\n+\n+  undefined ();\n+\n+  while (uninitialized < 1) /* { dg-warning \"uninitialized\" } */\n+    {\n+      bar (zero ());\n+      ++uninitialized;\n+    }\n+}"}, {"sha": "53be0c2ec5df5e77c11e8efb9ba807350c87bf42", "filename": "gcc/tree-cfg.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd14c97cd92ca11c66ee3d8dc4dd543c5aa8e024/gcc%2Ftree-cfg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd14c97cd92ca11c66ee3d8dc4dd543c5aa8e024/gcc%2Ftree-cfg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.cc?ref=cd14c97cd92ca11c66ee3d8dc4dd543c5aa8e024", "patch": "@@ -9836,16 +9836,12 @@ execute_fixup_cfg (void)\n \t      int flags = gimple_call_flags (stmt);\n \t      if (flags & (ECF_CONST | ECF_PURE | ECF_LOOPING_CONST_OR_PURE))\n \t\t{\n-\t\t  if (gimple_purge_dead_abnormal_call_edges (bb))\n-\t\t    todo |= TODO_cleanup_cfg;\n-\n \t\t  if (gimple_in_ssa_p (cfun))\n \t\t    {\n \t\t      todo |= TODO_update_ssa | TODO_cleanup_cfg;\n \t\t      update_stmt (stmt);\n \t\t    }\n \t\t}\n-\n \t      if (flags & ECF_NORETURN\n \t\t  && fixup_noreturn_call (stmt))\n \t\ttodo |= TODO_cleanup_cfg;\n@@ -9875,10 +9871,15 @@ execute_fixup_cfg (void)\n \t\t}\n \t    }\n \n-\t  if (maybe_clean_eh_stmt (stmt)\n+\t  gsi_next (&gsi);\n+\t}\n+      if (gimple *last = last_stmt (bb))\n+\t{\n+\t  if (maybe_clean_eh_stmt (last)\n \t      && gimple_purge_dead_eh_edges (bb))\n \t    todo |= TODO_cleanup_cfg;\n-\t  gsi_next (&gsi);\n+\t  if (gimple_purge_dead_abnormal_call_edges (bb))\n+\t    todo |= TODO_cleanup_cfg;\n \t}\n \n       /* If we have a basic block with no successors that does not"}]}