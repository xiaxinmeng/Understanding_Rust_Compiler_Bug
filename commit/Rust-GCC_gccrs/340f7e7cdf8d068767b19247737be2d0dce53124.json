{"sha": "340f7e7cdf8d068767b19247737be2d0dce53124", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQwZjdlN2NkZjhkMDY4NzY3YjE5MjQ3NzM3YmUyZDBkY2U1MzEyNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-22T08:31:44Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-22T08:31:44Z"}, "message": "final.c (LABEL_ALIGN_AFTER_BARRIER): Default to no alignment.\n\n        * final.c (LABEL_ALIGN_AFTER_BARRIER): Default to no alignment.\n        (final_scan_insn): Consider jump tables data even if we have no\n        independant text section if !JUMP_TABLES_IN_TEXT_SECTION.  Use\n        ADDR_VEC_ALIGN.\n        * config/ia64/ia64.h (JUMP_TABLES_IN_TEXT_SECTION): Remove.\n        (ASM_OUTPUT_CASE_END): Remove.\n        (ASM_OUTPUT_ADDR_DIFF_ELT): Emit pc-relative references.\n        * config/ia64/ia64.md (tablejump): Decode pc-relative references.\n        * config/ia64/sysv4.h (ASM_OUTPUT_BEFORE_CASE_LABEL): Remove.\n\nFrom-SVN: r45103", "tree": {"sha": "a01c3fec4756997f1c5a4fa55e4010e535f98cb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a01c3fec4756997f1c5a4fa55e4010e535f98cb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/340f7e7cdf8d068767b19247737be2d0dce53124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/340f7e7cdf8d068767b19247737be2d0dce53124", "html_url": "https://github.com/Rust-GCC/gccrs/commit/340f7e7cdf8d068767b19247737be2d0dce53124", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/340f7e7cdf8d068767b19247737be2d0dce53124/comments", "author": null, "committer": null, "parents": [{"sha": "bd7b9a0f96a090ea290ad77d2e3de66a9b2f52e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd7b9a0f96a090ea290ad77d2e3de66a9b2f52e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd7b9a0f96a090ea290ad77d2e3de66a9b2f52e5"}], "stats": {"total": 112, "additions": 63, "deletions": 49}, "files": [{"sha": "b69b58d0e1137e452f9351a3e3cab8f9aeebe31d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/340f7e7cdf8d068767b19247737be2d0dce53124/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/340f7e7cdf8d068767b19247737be2d0dce53124/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=340f7e7cdf8d068767b19247737be2d0dce53124", "patch": "@@ -1,3 +1,15 @@\n+2001-08-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* final.c (LABEL_ALIGN_AFTER_BARRIER): Default to no alignment.\n+\t(final_scan_insn): Consider jump tables data even if we have no\n+\tindependant text section if !JUMP_TABLES_IN_TEXT_SECTION.  Use\n+\tADDR_VEC_ALIGN.\n+\t* config/ia64/ia64.h (JUMP_TABLES_IN_TEXT_SECTION): Remove.\n+\t(ASM_OUTPUT_CASE_END): Remove.\n+\t(ASM_OUTPUT_ADDR_DIFF_ELT): Emit pc-relative references.\n+\t* config/ia64/ia64.md (tablejump): Decode pc-relative references.\n+\t* config/ia64/sysv4.h (ASM_OUTPUT_BEFORE_CASE_LABEL): Remove.\n+\n 2001-08-21  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/ia64.c (emit_all_insn_group_barriers): Flush state"}, {"sha": "ccd6df7fbaadbaf0ffc056997b84ad4520517ce1", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/340f7e7cdf8d068767b19247737be2d0dce53124/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/340f7e7cdf8d068767b19247737be2d0dce53124/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=340f7e7cdf8d068767b19247737be2d0dce53124", "patch": "@@ -1933,19 +1933,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define BSS_SECTION_ASM_OP \"\\t.bss\"\n \n-/* Define this macro if jump tables (for `tablejump' insns) should be output in\n-   the text section, along with the assembler instructions.  */\n-\n-/* ??? It is probably better for the jump tables to be in the rodata section,\n-   which is where they go by default.  Unfortunately, that currently does not\n-   work, because of some problem with pcrelative relocations not getting\n-   resolved correctly.  */\n-/* ??? FIXME ??? rth says that we should use @gprel to solve this problem.  */\n-/* ??? If jump tables are in the text section, then we can use 4 byte\n-   entries instead of 8 byte entries.  */\n-\n-#define JUMP_TABLES_IN_TEXT_SECTION 1\n-\n /* Define this macro if references to a symbol must be treated differently\n    depending on something about the variable or function named by the symbol\n    (such as what section it is in).  */\n@@ -2437,19 +2424,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* ??? Depends on the pointer size.  */\n \n #define ASM_OUTPUT_ADDR_DIFF_ELT(STREAM, BODY, VALUE, REL) \\\n-  fprintf (STREAM, \"\\tdata8 .L%d-.L%d\\n\", VALUE, REL)\n+  fprintf (STREAM, \"\\tdata8 @pcrel(.L%d)\\n\", VALUE)\n \n /* This is how to output an element of a case-vector that is absolute.\n    (Ia64 does not use such vectors, but we must define this macro anyway.)  */\n \n #define ASM_OUTPUT_ADDR_VEC_ELT(STREAM, VALUE) abort ()\n \n-/* Define this if something special must be output at the end of a jump-table.\n-   We need to align back to a 16 byte boundary because offsets are smaller than\n-   instructions.  */\n-\n-#define ASM_OUTPUT_CASE_END(STREAM, NUM, TABLE) ASM_OUTPUT_ALIGN (STREAM, 4)\n-\n /* Jump tables only need 8 byte alignment.  */\n \n #define ADDR_VEC_ALIGN(ADDR_VEC) 3\n@@ -2488,21 +2469,16 @@ do {\t\t\t\t\t\t\t\t\t\\\n \f\n /* Assembler Commands for Alignment.  */\n \n-/* The alignment (log base 2) to put in front of LABEL, which follows\n-   a BARRIER.  */\n-\n /* ??? Investigate.  */\n \n-/* ??? Emitting align directives increases the size of the line number debug\n-   info, because each .align forces use of an extended opcode.  Perhaps try\n-   to fix this in the assembler?  */\n+/* The alignment (log base 2) to put in front of LABEL, which follows\n+   a BARRIER.  */\n \n /* #define LABEL_ALIGN_AFTER_BARRIER(LABEL) */\n \n /* The desired alignment for the location counter at the beginning\n    of a loop.  */\n \n-/* ??? Investigate.  */\n /* #define LOOP_ALIGN(LABEL) */\n \n /* Define this macro if `ASM_OUTPUT_SKIP' should not be used in the text"}, {"sha": "5c8793f5bcf75a7b8392b35772d85ac0f05982ac", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/340f7e7cdf8d068767b19247737be2d0dce53124/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/340f7e7cdf8d068767b19247737be2d0dce53124/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=340f7e7cdf8d068767b19247737be2d0dce53124", "patch": "@@ -4758,21 +4758,48 @@\n   [(set_attr \"itanium_class\" \"br\")])\n \n (define_expand \"tablejump\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand 1 \"\" \"\")]\n+  [(parallel [(set (pc) (match_operand:DI 0 \"memory_operand\" \"\"))\n+\t      (use (label_ref (match_operand 1 \"\" \"\")))])]\n   \"\"\n-  \"\n {\n-  rtx tmp1 = gen_reg_rtx (DImode);\n-  rtx tmp2 = gen_reg_rtx (DImode);\n+  rtx op0 = operands[0];\n+  rtx addr;\n+\n+  /* ??? Bother -- do_tablejump is \"helpful\" and pulls the table\n+     element into a register without bothering to see whether that\n+     is necessary given the operand predicate.  Check for MEM just\n+     in case someone fixes this.  */\n+  if (GET_CODE (op0) == MEM)\n+    addr = XEXP (op0, 0);\n+  else\n+    {\n+      /* Otherwise, cheat and guess that the previous insn in the\n+\t stream was the memory load.  Grab the address from that.\n+\t Note we have to momentarily pop out of the sequence started\n+\t by the insn-emit wrapper in order to grab the last insn.  */\n+      rtx last, set;\n+\n+      end_sequence ();\n+      last = get_last_insn ();\n+      start_sequence ();\n+      set = single_set (last);\n+\n+      if (! rtx_equal_p (SET_DEST (set), op0)\n+\t  || GET_CODE (SET_SRC (set)) != MEM)\n+\tabort ();\n+      addr = XEXP (SET_SRC (set), 0);\n+      if (rtx_equal_p (addr, op0))\n+\tabort ();\n+    }\n \n-  emit_move_insn (tmp1, gen_rtx_LABEL_REF (Pmode, operands[1]));\n-  emit_insn (gen_adddi3 (tmp2, operands[0], tmp1));\n-  emit_jump_insn (gen_tablejump_internal (tmp2, operands[1]));\n-  DONE;\n-}\")\n+  /* Jump table elements are stored pc-relative.  That is, a displacement\n+     from the entry to the label.  Thus to convert to an absolute address\n+     we add the address of the memory from which the value is loaded.  */\n+  operands[0] = expand_simple_binop (DImode, PLUS, op0, addr,\n+\t\t\t\t     NULL_RTX, 1, OPTAB_DIRECT);\n+})\n \n-(define_insn \"tablejump_internal\"\n+(define_insn \"*tablejump_internal\"\n   [(set (pc) (match_operand:DI 0 \"register_operand\" \"b\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"\""}, {"sha": "0abb7e8cd7ed60bfd2de85cda23c4986c1b3de80", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/340f7e7cdf8d068767b19247737be2d0dce53124/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/340f7e7cdf8d068767b19247737be2d0dce53124/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=340f7e7cdf8d068767b19247737be2d0dce53124", "patch": "@@ -135,11 +135,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   emit_safe_across_calls (STREAM);\t\t\t\t\t\\\n } while (0)\n \n-/* Case label alignment is handled by ADDR_VEC_ALIGN now.  */\n-\n-#undef ASM_OUTPUT_BEFORE_CASE_LABEL\n-#define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE,PREFIX,NUM,TABLE)\n-\n /* We override svr4.h so that we can support the sdata section.  */\n \n #undef SELECT_SECTION"}, {"sha": "ca38b96f639354298f842102117f38fcadb66f86", "filename": "gcc/final.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/340f7e7cdf8d068767b19247737be2d0dce53124/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/340f7e7cdf8d068767b19247737be2d0dce53124/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=340f7e7cdf8d068767b19247737be2d0dce53124", "patch": "@@ -785,7 +785,7 @@ get_attr_length (insn)\n #endif\n \n #ifndef LABEL_ALIGN_AFTER_BARRIER\n-#define LABEL_ALIGN_AFTER_BARRIER(LABEL) 1\n+#define LABEL_ALIGN_AFTER_BARRIER(LABEL) 0\n #endif\n \n #ifndef LABEL_ALIGN_AFTER_BARRIER_MAX_SKIP\n@@ -2338,12 +2338,16 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n #else\n \t      if (! JUMP_TABLES_IN_TEXT_SECTION)\n \t\t{\n+\t\t  int log_align;\n+\n \t\t  readonly_data_section ();\n-#ifdef READONLY_DATA_SECTION\n-\t\t  ASM_OUTPUT_ALIGN (file,\n-\t\t\t\t    exact_log2 (BIGGEST_ALIGNMENT\n-\t\t\t\t\t\t/ BITS_PER_UNIT));\n-#endif /* READONLY_DATA_SECTION */\n+\n+#ifdef ADDR_VEC_ALIGN\n+\t\t  log_align = ADDR_VEC_ALIGN (nextbody);\n+#else\n+\t\t  log_align = exact_log2 (BIGGEST_ALIGNMENT / BITS_PER_UNIT);\n+#endif\n+\t\t  ASM_OUTPUT_ALIGN (file, log_align);\n \t\t}\n \t      else\n \t\tfunction_section (current_function_decl);"}]}