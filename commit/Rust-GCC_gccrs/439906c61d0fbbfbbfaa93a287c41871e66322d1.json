{"sha": "439906c61d0fbbfbbfaa93a287c41871e66322d1", "node_id": "C_kwDOANBUbNoAKDQzOTkwNmM2MWQwZmJiZmJiZmFhOTNhMjg3YzQxODcxZTY2MzIyZDE", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-08T17:48:56Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-11T15:34:49Z"}, "message": "aarch64: Use type-qualified builtins for XTN[2] Neon intrinsics\n\nDeclare unsigned type-qualified builtins and use them for XTN[2] Neon\nintrinsics. This removes the need for casts in arm_neon.h.\n\ngcc/ChangeLog:\n\n2021-11-08  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Declare unsigned\n\ttype-qualified builtins for XTN[2].\n\t* config/aarch64/arm_neon.h (vmovn_high_u16): Use type-\n\tqualified builtin and remove casts.\n\t(vmovn_high_u32): Likewise.\n\t(vmovn_high_u64): Likewise.\n\t(vmovn_u16): Likewise.\n\t(vmovn_u32): Likewise.\n\t(vmovn_u64): Likewise.", "tree": {"sha": "46cb1ee6271a665d027167d71f76a6a94c68f6fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46cb1ee6271a665d027167d71f76a6a94c68f6fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/439906c61d0fbbfbbfaa93a287c41871e66322d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/439906c61d0fbbfbbfaa93a287c41871e66322d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/439906c61d0fbbfbbfaa93a287c41871e66322d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/439906c61d0fbbfbbfaa93a287c41871e66322d1/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2590b545ee76867f3843749e38233f2887ce3ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2590b545ee76867f3843749e38233f2887ce3ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2590b545ee76867f3843749e38233f2887ce3ad"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "395d5146e6e15f74a64d9b82d8ded2bd2cb98189", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439906c61d0fbbfbbfaa93a287c41871e66322d1/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439906c61d0fbbfbbfaa93a287c41871e66322d1/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=439906c61d0fbbfbbfaa93a287c41871e66322d1", "patch": "@@ -235,6 +235,7 @@\n \n   /* Implemented by aarch64_xtn<mode>.  */\n   BUILTIN_VQN (UNOP, xtn, 0, NONE)\n+  BUILTIN_VQN (UNOPU, xtn, 0, NONE)\n \n   /* Implemented by aarch64_mla<mode>.  */\n   BUILTIN_VDQ_BHSI (TERNOP, mla, 0, NONE)\n@@ -489,7 +490,8 @@\n   BUILTIN_VSDQ_I (USHIFTIMM, uqshl_n, 0, NONE)\n \n   /* Implemented by aarch64_xtn2<mode>.  */\n-  BUILTIN_VQN (UNOP, xtn2, 0, NONE)\n+  BUILTIN_VQN (BINOP, xtn2, 0, NONE)\n+  BUILTIN_VQN (BINOPU, xtn2, 0, NONE)\n \n   /* Implemented by vec_unpack<su>_hi_<mode>.  */\n   BUILTIN_VQW (UNOP, vec_unpacks_hi_, 10, NONE)"}, {"sha": "dcc1b66dfef167b65f4343497ae11480fa0649b6", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439906c61d0fbbfbbfaa93a287c41871e66322d1/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439906c61d0fbbfbbfaa93a287c41871e66322d1/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=439906c61d0fbbfbbfaa93a287c41871e66322d1", "patch": "@@ -7522,24 +7522,21 @@ __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_high_u16 (uint8x8_t __a, uint16x8_t __b)\n {\n-  return (uint8x16_t)\n-\t   __builtin_aarch64_xtn2v8hi ((int8x8_t) __a, (int16x8_t) __b);\n+  return __builtin_aarch64_xtn2v8hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_high_u32 (uint16x4_t __a, uint32x4_t __b)\n {\n-  return (uint16x8_t)\n-\t   __builtin_aarch64_xtn2v4si ((int16x4_t) __a, (int32x4_t) __b);\n+  return __builtin_aarch64_xtn2v4si_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_high_u64 (uint32x2_t __a, uint64x2_t __b)\n {\n-  return (uint32x4_t)\n-\t   __builtin_aarch64_xtn2v2di ((int32x2_t) __a, (int64x2_t) __b);\n+  return __builtin_aarch64_xtn2v2di_uuu (__a, __b);\n }\n \n __extension__ extern __inline int8x8_t\n@@ -7567,21 +7564,21 @@ __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_u16 (uint16x8_t __a)\n {\n-  return (uint8x8_t)__builtin_aarch64_xtnv8hi ((int16x8_t) __a);\n+  return __builtin_aarch64_xtnv8hi_uu (__a);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_u32 (uint32x4_t __a)\n {\n-  return (uint16x4_t) __builtin_aarch64_xtnv4si ((int32x4_t )__a);\n+  return __builtin_aarch64_xtnv4si_uu (__a);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_u64 (uint64x2_t __a)\n {\n-  return (uint32x2_t) __builtin_aarch64_xtnv2di ((int64x2_t) __a);\n+  return __builtin_aarch64_xtnv2di_uu (__a);\n }\n \n __extension__ extern __inline int8x8_t"}]}