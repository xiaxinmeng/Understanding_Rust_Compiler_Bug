{"sha": "5cc3d3b8bf43e4910cc73aac89417e2a86925bb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNjM2QzYjhiZjQzZTQ5MTBjYzczYWFjODk0MTdlMmE4NjkyNWJiMQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2003-03-07T07:45:29Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2003-03-07T07:45:29Z"}, "message": "except.c (init_exception_processing): Use C90 prototype style.\n\n        * except.c (init_exception_processing): Use C90 prototype style.\n        (cp_protect_cleanup_actions): Likewise.\n        (prepare_eh_type): Likewise.\n        (build_eh_type_type): Likewise.\n        (build_exc_ptr): Likewise.\n        (do_begin_catch): Likewise.\n        (dtor_nothrow): Likewise.\n        (do_end_catch): Likewise.\n        (push_eh_cleanup): Likewise.\n        (decl_is_java_type): Likewise.\n        (choose_personality_routine): Likewise.\n        (initialize_handler_parm): Likewise.\n        (expand_start_catch_block): Likewise.\n        (expand_end_catch_block): Likewise.\n        (begin_eh_spec_block): Likewise.\n        (finish_eh_spec_block): Likewise.\n        (do_allocate_exception): Likewise.\n        (do_free_exception): Likewise.\n        (wrap_cleanups_r): Likewise.\n        (stabilize_throw_expr): Likewise.\n        (build_throw): Likewise.\n        (complete_ptr_ref_or_void_ptr_p): Likewise.\n        (is_admissible_throw_operand): Likewise.\n        (nothrow_libfn_p): Likewise.\n        (can_convert_eh): Likewise.\n        (check_handlers_1): Likewise.\n        (check_handlers): Likewise.\n\nFrom-SVN: r63935", "tree": {"sha": "8ae0bd1f9222b4cc977543adff7aa46710b96f52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ae0bd1f9222b4cc977543adff7aa46710b96f52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cc3d3b8bf43e4910cc73aac89417e2a86925bb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc3d3b8bf43e4910cc73aac89417e2a86925bb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cc3d3b8bf43e4910cc73aac89417e2a86925bb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc3d3b8bf43e4910cc73aac89417e2a86925bb1/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9534f4bcc830d0db68e1cbbeeb7f8aa5f310defd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9534f4bcc830d0db68e1cbbeeb7f8aa5f310defd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9534f4bcc830d0db68e1cbbeeb7f8aa5f310defd"}], "stats": {"total": 148, "additions": 75, "deletions": 73}, "files": [{"sha": "afb3436913dc148ffe38629752df89e698ed3cff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc3d3b8bf43e4910cc73aac89417e2a86925bb1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc3d3b8bf43e4910cc73aac89417e2a86925bb1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5cc3d3b8bf43e4910cc73aac89417e2a86925bb1", "patch": "@@ -1,3 +1,33 @@\n+2003-03-07  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* except.c (init_exception_processing): Use C90 prototype style.\n+\t(cp_protect_cleanup_actions): Likewise.\n+\t(prepare_eh_type): Likewise.\n+\t(build_eh_type_type): Likewise.\n+\t(build_exc_ptr): Likewise.\n+\t(do_begin_catch): Likewise.\n+\t(dtor_nothrow): Likewise.\n+\t(do_end_catch): Likewise.\n+\t(push_eh_cleanup): Likewise.\n+\t(decl_is_java_type): Likewise.\n+\t(choose_personality_routine): Likewise.\n+\t(initialize_handler_parm): Likewise.\n+\t(expand_start_catch_block): Likewise.\n+\t(expand_end_catch_block): Likewise.\n+\t(begin_eh_spec_block): Likewise.\n+\t(finish_eh_spec_block): Likewise.\n+\t(do_allocate_exception): Likewise.\n+\t(do_free_exception): Likewise.\n+\t(wrap_cleanups_r): Likewise.\n+\t(stabilize_throw_expr): Likewise.\n+\t(build_throw): Likewise.\n+\t(complete_ptr_ref_or_void_ptr_p): Likewise.\n+\t(is_admissible_throw_operand): Likewise.\n+\t(nothrow_libfn_p): Likewise.\n+\t(can_convert_eh): Likewise.\n+\t(check_handlers_1): Likewise.\n+\t(check_handlers): Likewise.\n+\t\n 2003-03-06  Mark Mitchell  <mark@codesourcery.com>\n \n \t* call.c (merge_conversion_sequences): New function."}, {"sha": "ae37b290c1aaea5282630cfa4c6c1903c763024a", "filename": "gcc/cp/except.c", "status": "modified", "additions": 45, "deletions": 73, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc3d3b8bf43e4910cc73aac89417e2a86925bb1/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc3d3b8bf43e4910cc73aac89417e2a86925bb1/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=5cc3d3b8bf43e4910cc73aac89417e2a86925bb1", "patch": "@@ -38,29 +38,29 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"tree-inline.h\"\n \n-static void push_eh_cleanup PARAMS ((tree));\n-static tree prepare_eh_type PARAMS ((tree));\n-static tree build_eh_type_type PARAMS ((tree));\n-static tree do_begin_catch PARAMS ((void));\n-static int dtor_nothrow PARAMS ((tree));\n-static tree do_end_catch PARAMS ((tree));\n-static void push_eh_cleanup PARAMS ((tree));\n-static bool decl_is_java_type PARAMS ((tree decl, int err));\n-static void initialize_handler_parm PARAMS ((tree, tree));\n-static tree do_allocate_exception PARAMS ((tree));\n-static tree stabilize_throw_expr PARAMS ((tree, tree *));\n-static tree wrap_cleanups_r PARAMS ((tree *, int *, void *));\n-static int complete_ptr_ref_or_void_ptr_p PARAMS ((tree, tree));\n-static bool is_admissible_throw_operand PARAMS ((tree));\n-static int can_convert_eh PARAMS ((tree, tree));\n-static void check_handlers_1 PARAMS ((tree, tree));\n-static tree cp_protect_cleanup_actions PARAMS ((void));\n+static void push_eh_cleanup (tree);\n+static tree prepare_eh_type (tree);\n+static tree build_eh_type_type (tree);\n+static tree do_begin_catch (void);\n+static int dtor_nothrow (tree);\n+static tree do_end_catch (tree);\n+static void push_eh_cleanup (tree);\n+static bool decl_is_java_type (tree decl, int err);\n+static void initialize_handler_parm (tree, tree);\n+static tree do_allocate_exception (tree);\n+static tree stabilize_throw_expr (tree, tree *);\n+static tree wrap_cleanups_r (tree *, int *, void *);\n+static int complete_ptr_ref_or_void_ptr_p (tree, tree);\n+static bool is_admissible_throw_operand (tree);\n+static int can_convert_eh (tree, tree);\n+static void check_handlers_1 (tree, tree);\n+static tree cp_protect_cleanup_actions (void);\n \n /* Sets up all the global eh stuff that needs to be initialized at the\n    start of compilation.  */\n \n void\n-init_exception_processing ()\n+init_exception_processing (void)\n {\n   tree tmp;\n \n@@ -90,7 +90,7 @@ init_exception_processing ()\n    propagated out of a cleanup region.  */\n \n static tree\n-cp_protect_cleanup_actions ()\n+cp_protect_cleanup_actions (void)\n {\n   /* [except.terminate]\n \n@@ -100,8 +100,7 @@ cp_protect_cleanup_actions ()\n }     \n \n static tree\n-prepare_eh_type (type)\n-     tree type;\n+prepare_eh_type (tree type)\n {\n   if (type == NULL_TREE)\n     return type;\n@@ -122,8 +121,7 @@ prepare_eh_type (type)\n    matching field of the exception model.  */\n \n static tree\n-build_eh_type_type (type)\n-     tree type;\n+build_eh_type_type (tree type)\n {\n   tree exp;\n \n@@ -142,7 +140,7 @@ build_eh_type_type (type)\n }\n \n tree\n-build_exc_ptr ()\n+build_exc_ptr (void)\n {\n   return build (EXC_PTR_EXPR, ptr_type_node);\n }\n@@ -151,7 +149,7 @@ build_exc_ptr ()\n    exception has been handled.  */\n \n static tree\n-do_begin_catch ()\n+do_begin_catch (void)\n {\n   tree fn;\n \n@@ -173,8 +171,7 @@ do_begin_catch ()\n    NULL_TREE for a ... handler) will not throw an exception.  */\n \n static int\n-dtor_nothrow (type)\n-     tree type;\n+dtor_nothrow (tree type)\n {\n   if (type == NULL_TREE)\n     return 0;\n@@ -189,8 +186,7 @@ dtor_nothrow (type)\n    for the current catch block if no others are currently using it.  */\n \n static tree\n-do_end_catch (type)\n-     tree type;\n+do_end_catch (tree type)\n {\n   tree fn, cleanup;\n \n@@ -214,8 +210,7 @@ do_end_catch (type)\n /* This routine creates the cleanup for the current exception.  */\n \n static void\n-push_eh_cleanup (type)\n-     tree type;\n+push_eh_cleanup (tree type)\n {\n   finish_decl_cleanup (NULL_TREE, do_end_catch (type));\n }\n@@ -224,9 +219,7 @@ push_eh_cleanup (type)\n    throw.  */\n \n static bool\n-decl_is_java_type (decl, err)\n-     tree decl;\n-     int err;\n+decl_is_java_type (tree decl, int err)\n {\n   bool r = (TREE_CODE (decl) == POINTER_TYPE\n \t    && TREE_CODE (TREE_TYPE (decl)) == RECORD_TYPE\n@@ -273,8 +266,7 @@ decl_is_java_type (decl, err)\n    __gxx_personality_(sj|v)0 in init_exception_processing - should it\n    be done here instead?  */\n void\n-choose_personality_routine (lang)\n-     enum languages lang;\n+choose_personality_routine (enum languages lang)\n {\n   static enum {\n     chose_none,\n@@ -328,9 +320,7 @@ choose_personality_routine (lang)\n /* Initialize the catch parameter DECL.  */\n \n static void \n-initialize_handler_parm (decl, exp)\n-     tree decl;\n-     tree exp;\n+initialize_handler_parm (tree decl, tree exp)\n {\n   tree init;\n   tree init_type;\n@@ -383,8 +373,7 @@ initialize_handler_parm (decl, exp)\n /* Call this to start a catch block.  DECL is the catch parameter.  */\n \n tree\n-expand_start_catch_block (decl)\n-     tree decl;\n+expand_start_catch_block (tree decl)\n {\n   tree exp = NULL_TREE;\n   tree type;\n@@ -451,7 +440,7 @@ expand_start_catch_block (decl)\n    the label to jump to if this catch block didn't match.  */\n \n void\n-expand_end_catch_block ()\n+expand_end_catch_block (void)\n {\n   if (! doing_eh (1))\n     return;\n@@ -465,17 +454,15 @@ expand_end_catch_block ()\n }\n \n tree\n-begin_eh_spec_block ()\n+begin_eh_spec_block (void)\n {\n   tree r = build_stmt (EH_SPEC_BLOCK, NULL_TREE, NULL_TREE);\n   add_stmt (r);\n   return r;\n }\n \n void\n-finish_eh_spec_block (raw_raises, eh_spec_block)\n-     tree raw_raises;\n-     tree eh_spec_block;\n+finish_eh_spec_block (tree raw_raises, tree eh_spec_block)\n {\n   tree raises;\n \n@@ -494,8 +481,7 @@ finish_eh_spec_block (raw_raises, eh_spec_block)\n /* Return a pointer to a buffer for an exception object of type TYPE.  */\n \n static tree\n-do_allocate_exception (type)\n-     tree type;\n+do_allocate_exception (tree type)\n {\n   tree fn;\n \n@@ -518,8 +504,7 @@ do_allocate_exception (type)\n    directly, but see the comment for stabilize_throw_expr.  */\n \n static tree\n-do_free_exception (ptr)\n-     tree ptr;\n+do_free_exception (tree ptr)\n {\n   tree fn;\n \n@@ -541,10 +526,8 @@ do_free_exception (ptr)\n    Called from build_throw via walk_tree_without_duplicates.  */\n \n static tree\n-wrap_cleanups_r (tp, walk_subtrees, data)\n-     tree *tp;\n-     int *walk_subtrees ATTRIBUTE_UNUSED;\n-     void *data ATTRIBUTE_UNUSED;\n+wrap_cleanups_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n+                 void *data ATTRIBUTE_UNUSED)\n {\n   tree exp = *tp;\n   tree cleanup;\n@@ -583,9 +566,7 @@ wrap_cleanups_r (tp, walk_subtrees, data)\n    rather than in a MUST_NOT_THROW_EXPR, for this case only.  */\n \n static tree\n-stabilize_throw_expr (exp, initp)\n-     tree exp;\n-     tree *initp;\n+stabilize_throw_expr (tree exp, tree *initp)\n {\n   tree init_expr;\n \n@@ -626,8 +607,7 @@ stabilize_throw_expr (exp, initp)\n /* Build a throw expression.  */\n \n tree\n-build_throw (exp)\n-     tree exp;\n+build_throw (tree exp)\n {\n   tree fn;\n \n@@ -805,9 +785,7 @@ build_throw (exp)\n    the expr or decl from whence TYPE came, if available.  */\n \n static int\n-complete_ptr_ref_or_void_ptr_p (type, from)\n-     tree type;\n-     tree from;\n+complete_ptr_ref_or_void_ptr_p (tree type, tree from)\n {\n   int is_ptr;\n   \n@@ -835,8 +813,7 @@ complete_ptr_ref_or_void_ptr_p (type, from)\n    a type or of an abstract class type.  */\n \n static bool\n-is_admissible_throw_operand (expr)\n-     tree expr;\n+is_admissible_throw_operand (tree expr)\n {\n   tree type = TREE_TYPE (expr);\n \n@@ -873,8 +850,7 @@ is_admissible_throw_operand (expr)\n #include \"cfns.h\"\n \n int\n-nothrow_libfn_p (fn)\n-     tree fn;\n+nothrow_libfn_p (tree fn)\n {\n   tree id;\n \n@@ -895,8 +871,7 @@ nothrow_libfn_p (fn)\n    handler for type TO, as per [except.handle].  */\n \n static int\n-can_convert_eh (to, from)\n-     tree to, from;\n+can_convert_eh (tree to, tree from)\n {\n   if (TREE_CODE (to) == REFERENCE_TYPE)\n     to = TREE_TYPE (to);\n@@ -931,9 +906,7 @@ can_convert_eh (to, from)\n    for B would catch an exception of type C.  */\n \n static void\n-check_handlers_1 (master, handlers)\n-     tree master;\n-     tree handlers;\n+check_handlers_1 (tree master, tree handlers)\n {\n   tree type = TREE_TYPE (master);\n   tree handler;\n@@ -954,8 +927,7 @@ check_handlers_1 (master, handlers)\n /* Given a chain of HANDLERs, make sure that they're OK.  */\n \n void\n-check_handlers (handlers)\n-     tree handlers;\n+check_handlers (tree handlers)\n {\n   tree handler;\n   int save_line = lineno;"}]}