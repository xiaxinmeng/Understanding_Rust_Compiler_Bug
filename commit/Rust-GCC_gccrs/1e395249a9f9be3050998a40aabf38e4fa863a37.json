{"sha": "1e395249a9f9be3050998a40aabf38e4fa863a37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUzOTUyNDlhOWY5YmUzMDUwOTk4YTQwYWFiZjM4ZTRmYTg2M2EzNw==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2007-03-19T17:07:29Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2007-03-19T17:07:29Z"}, "message": "builtins.c (expand_builtin_sync_operation, [...]): Care for extending CONST_INTs correctly.\n\n        * builtins.c (expand_builtin_sync_operation,\n        expand_builtin_compare_and_swap,\n        expand_builtin_lock_test_and_set): Care for extending CONST_INTs\n        correctly.\n\n        * config/i386/sync.md (sync_double_compare_and_swapdi_pic,\n        sync_double_compare_and_swap_ccdi_pic): Use \"SD\" as constraint\n        for operand 3.\n\nFrom-SVN: r123064", "tree": {"sha": "ddb2d551ea09bfec19c57fe8cc9e9c371f68943a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddb2d551ea09bfec19c57fe8cc9e9c371f68943a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e395249a9f9be3050998a40aabf38e4fa863a37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e395249a9f9be3050998a40aabf38e4fa863a37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e395249a9f9be3050998a40aabf38e4fa863a37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e395249a9f9be3050998a40aabf38e4fa863a37/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b5e5ca5fd3cba74accddb31d4b076686dbb271c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5e5ca5fd3cba74accddb31d4b076686dbb271c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5e5ca5fd3cba74accddb31d4b076686dbb271c1"}], "stats": {"total": 61, "additions": 51, "deletions": 10}, "files": [{"sha": "fb839f5a7096eb5da67ffd1c69def9ad3d066521", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e395249a9f9be3050998a40aabf38e4fa863a37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e395249a9f9be3050998a40aabf38e4fa863a37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e395249a9f9be3050998a40aabf38e4fa863a37", "patch": "@@ -1,3 +1,14 @@\n+2007-03-19  Michael Matz  <matz@suse.de>\n+\n+\t* builtins.c (expand_builtin_sync_operation,\n+\texpand_builtin_compare_and_swap,\n+\texpand_builtin_lock_test_and_set): Care for extending CONST_INTs\n+\tcorrectly.\n+\n+\t* config/i386/sync.md (sync_double_compare_and_swapdi_pic,\n+\tsync_double_compare_and_swap_ccdi_pic): Use \"SD\" as constraint\n+\tfor operand 3.\n+\n 2007-03-19  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* doc/tm.texi: Add brackets around the return type of"}, {"sha": "989b8d740b2d7f93dd1d77d1023be3bfa78d8dd6", "filename": "gcc/builtins.c", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e395249a9f9be3050998a40aabf38e4fa863a37/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e395249a9f9be3050998a40aabf38e4fa863a37/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=1e395249a9f9be3050998a40aabf38e4fa863a37", "patch": "@@ -5771,13 +5771,18 @@ expand_builtin_sync_operation (enum machine_mode mode, tree exp,\n \t\t\t       rtx target, bool ignore)\n {\n   rtx val, mem;\n+  enum machine_mode old_mode;\n \n   /* Expand the operands.  */\n   mem = get_builtin_sync_mem (CALL_EXPR_ARG (exp, 0), mode);\n \n   val = expand_expr (CALL_EXPR_ARG (exp, 1), NULL, mode, EXPAND_NORMAL);\n-  /* If VAL is promoted to a wider mode, convert it back to MODE.  */\n-  val = convert_to_mode (mode, val, 1);\n+  /* If VAL is promoted to a wider mode, convert it back to MODE.  Take care\n+     of CONST_INTs, where we know the old_mode only from the call argument.  */\n+  old_mode = GET_MODE (val);\n+  if (old_mode == VOIDmode)\n+    old_mode = TYPE_MODE (TREE_TYPE (CALL_EXPR_ARG (exp, 1)));\n+  val = convert_modes (mode, old_mode, val, 1);\n \n   if (ignore)\n     return expand_sync_operation (mem, val, code);\n@@ -5795,18 +5800,27 @@ expand_builtin_compare_and_swap (enum machine_mode mode, tree exp,\n \t\t\t\t bool is_bool, rtx target)\n {\n   rtx old_val, new_val, mem;\n+  enum machine_mode old_mode;\n \n   /* Expand the operands.  */\n   mem = get_builtin_sync_mem (CALL_EXPR_ARG (exp, 0), mode);\n \n \n   old_val = expand_expr (CALL_EXPR_ARG (exp, 1), NULL, mode, EXPAND_NORMAL);\n-  /* If OLD_VAL is promoted to a wider mode, convert it back to MODE.  */\n-  old_val = convert_to_mode (mode, old_val, 1);\n+  /* If VAL is promoted to a wider mode, convert it back to MODE.  Take care\n+     of CONST_INTs, where we know the old_mode only from the call argument.  */\n+  old_mode = GET_MODE (old_val);\n+  if (old_mode == VOIDmode)\n+    old_mode = TYPE_MODE (TREE_TYPE (CALL_EXPR_ARG (exp, 1)));\n+  old_val = convert_modes (mode, old_mode, old_val, 1);\n \n   new_val = expand_expr (CALL_EXPR_ARG (exp, 2), NULL, mode, EXPAND_NORMAL);\n-  /* If NEW_VAL is promoted to a wider mode, convert it back to MODE.  */\n-  new_val = convert_to_mode (mode, new_val, 1);\n+  /* If VAL is promoted to a wider mode, convert it back to MODE.  Take care\n+     of CONST_INTs, where we know the old_mode only from the call argument.  */\n+  old_mode = GET_MODE (new_val);\n+  if (old_mode == VOIDmode)\n+    old_mode = TYPE_MODE (TREE_TYPE (CALL_EXPR_ARG (exp, 2)));\n+  new_val = convert_modes (mode, old_mode, new_val, 1);\n \n   if (is_bool)\n     return expand_bool_compare_and_swap (mem, old_val, new_val, target);\n@@ -5825,12 +5839,17 @@ expand_builtin_lock_test_and_set (enum machine_mode mode, tree exp,\n \t\t\t\t  rtx target)\n {\n   rtx val, mem;\n+  enum machine_mode old_mode;\n \n   /* Expand the operands.  */\n   mem = get_builtin_sync_mem (CALL_EXPR_ARG (exp, 0), mode);\n   val = expand_expr (CALL_EXPR_ARG (exp, 1), NULL, mode, EXPAND_NORMAL);\n-  /* If VAL is promoted to a wider mode, convert it back to MODE.  */\n-  val = convert_to_mode (mode, val, 1);\n+  /* If VAL is promoted to a wider mode, convert it back to MODE.  Take care\n+     of CONST_INTs, where we know the old_mode only from the call argument.  */\n+  old_mode = GET_MODE (val);\n+  if (old_mode == VOIDmode)\n+    old_mode = TYPE_MODE (TREE_TYPE (CALL_EXPR_ARG (exp, 1)));\n+  val = convert_modes (mode, old_mode, val, 1);\n \n   return expand_sync_lock_test_and_set (mem, val, target);\n }"}, {"sha": "9a0ae3f75129470e68c3495325848e06852e2b0f", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e395249a9f9be3050998a40aabf38e4fa863a37/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e395249a9f9be3050998a40aabf38e4fa863a37/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=1e395249a9f9be3050998a40aabf38e4fa863a37", "patch": "@@ -98,14 +98,23 @@\n   \"\"\n   \"lock{\\;| }cmpxchg<doublemodesuffix>b{\\t| }%1\")\n \n+;; Theoretically we'd like to use constraint \"r\" (any reg) for operand\n+;; 3, but that includes ecx.  If operand 3 and 4 are the same (like when\n+;; the input is -1LL) GCC might chose to allocate operand 3 to ecx, like\n+;; operand 4.  This breaks, as the xchg will move the PIC register contents\n+;; to %ecx then --> boom.  Operands 3 and 4 really need to be different\n+;; registers, which in this case means operand 3 must not be ecx.\n+;; Instead of playing tricks with fake early clobbers or the like we\n+;; just enumerate all regs possible here, which (as this is !TARGET_64BIT)\n+;; are just esi and edi.\n (define_insn \"*sync_double_compare_and_swapdi_pic\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=A\")\n \t(match_operand:DI 1 \"memory_operand\" \"+m\"))\n    (set (match_dup 1)\n \t(unspec_volatile:DI\n \t  [(match_dup 1)\n \t   (match_operand:DI 2 \"register_operand\" \"A\")\n-\t   (match_operand:SI 3 \"register_operand\" \"r\")\n+\t   (match_operand:SI 3 \"register_operand\" \"SD\")\n \t   (match_operand:SI 4 \"register_operand\" \"c\")]\n \t  UNSPECV_CMPXCHG_1))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -189,14 +198,16 @@\n   \"\"\n   \"lock{\\;| }cmpxchg<doublemodesuffix>b{\\t| }%1\")\n \n+;; See above for the explanation of using the constraint \"SD\" for\n+;; operand 3.\n (define_insn \"*sync_double_compare_and_swap_ccdi_pic\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=A\")\n \t(match_operand:DI 1 \"memory_operand\" \"+m\"))\n    (set (match_dup 1)\n \t(unspec_volatile:DI\n \t  [(match_dup 1)\n \t   (match_operand:DI 2 \"register_operand\" \"A\")\n-\t   (match_operand:SI 3 \"register_operand\" \"r\")\n+\t   (match_operand:SI 3 \"register_operand\" \"SD\")\n \t   (match_operand:SI 4 \"register_operand\" \"c\")]\n \t  UNSPECV_CMPXCHG_1))\n    (set (reg:CCZ FLAGS_REG)"}]}