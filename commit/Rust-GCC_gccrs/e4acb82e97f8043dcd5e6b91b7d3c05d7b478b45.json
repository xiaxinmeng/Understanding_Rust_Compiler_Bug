{"sha": "e4acb82e97f8043dcd5e6b91b7d3c05d7b478b45", "node_id": "C_kwDOANBUbNoAKGU0YWNiODJlOTdmODA0M2RjZDVlNmI5MWI3ZDNjMDVkN2I0NzhiNDU", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-03-09T23:31:11Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-16T08:42:04Z"}, "message": "[Ada] Fix internal error on iterated array aggregate\n\nThe front-end drops the declaration of a temporary on the floor because\nInsert_Actions fails to climb up out of an N_Iterated_Component_Association\nwhen the temporary is created during the analysis of its Discrete_Choices.\n\ngcc/ada/\n\n\t* exp_util.adb (Insert_Actions) <N_Iterated_Component_Association>:\n\tClimb up out of the node if the actions come from Discrete_Choices.", "tree": {"sha": "14b481d7bbdc031858d7ac0460cb83c21b3118ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14b481d7bbdc031858d7ac0460cb83c21b3118ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4acb82e97f8043dcd5e6b91b7d3c05d7b478b45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4acb82e97f8043dcd5e6b91b7d3c05d7b478b45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4acb82e97f8043dcd5e6b91b7d3c05d7b478b45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4acb82e97f8043dcd5e6b91b7d3c05d7b478b45/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6bdaa0299d459e4f0486793bcbeff1bbe75f8a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6bdaa0299d459e4f0486793bcbeff1bbe75f8a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6bdaa0299d459e4f0486793bcbeff1bbe75f8a1"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "d3fbc4bc6443d490454018ddaa5bc4b59eca54ba", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4acb82e97f8043dcd5e6b91b7d3c05d7b478b45/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4acb82e97f8043dcd5e6b91b7d3c05d7b478b45/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=e4acb82e97f8043dcd5e6b91b7d3c05d7b478b45", "patch": "@@ -7751,12 +7751,17 @@ package body Exp_Util is\n \n                  --  We must not climb up out of an N_Iterated_xxx_Association\n                  --  because the actions might contain references to the loop\n-                 --  parameter. But it turns out that setting the Loop_Actions\n-                 --  attribute in the case of an N_Component_Association\n-                 --  when the attribute was not already set can lead to\n-                 --  (as yet not understood) bugboxes (gcc failures that are\n-                 --  presumably due to malformed trees). So we don't do that.\n-\n+                 --  parameter, except if we come from the Discrete_Choices of\n+                 --  N_Iterated_Component_Association which cannot contain any.\n+                 --  But it turns out that setting the Loop_Actions field in\n+                 --  the case of an N_Component_Association when the field was\n+                 --  not already set can lead to gigi assertion failures that\n+                 --  are presumably due to malformed trees, so don't do that.\n+\n+                 and then (Nkind (P) /= N_Iterated_Component_Association\n+                            or else not Is_List_Member (N)\n+                            or else\n+                              List_Containing (N) /= Discrete_Choices (P))\n                  and then (Nkind (P) /= N_Component_Association\n                             or else Present (Loop_Actions (P)))\n                then"}]}