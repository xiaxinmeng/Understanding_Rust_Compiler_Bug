{"sha": "c49a69620430855d0b44d4248f4722b0ce0e6013", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ5YTY5NjIwNDMwODU1ZDBiNDRkNDI0OGY0NzIyYjBjZTBlNjAxMw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-06-14T20:11:37Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-06-14T20:11:37Z"}, "message": "common-target-def.h, [...]: New files.\n\n\t* common/common-target-def.h, common/common-target.def,\n\tcommon/common-target.h, common/config/default-common.c,\n\tcommon/config/pa/pa-common.c: New files.\n\t* Makefile.in (common_out_file, common_out_object_file,\n\tCOMMON_TARGET_H, COMMON_TARGET_DEF_H): New.\n\t(OBJS-libcommon-target): Include $(common_out_object_file).\n\t(prefix.o): Update dependencies.\n\t($(common_out_object_file), common/common-target-hooks-def.h,\n\ts-common-target-hooks-def-h): New.\n\t(s-tm-texi): Also check timestamp on common-target.def.\n\t(build/genhooks.o): Update dependencies.\n\t* config.gcc (common_out_file, target_has_targetm_common): Define.\n\t* config/pa/som.h (ALWAYS_STRIP_DOTDOT): Replace with\n\tTARGET_ALWAYS_STRIP_DOTDOT.\n\t* configure.ac (common_out_object_file): Define.\n\t(common_out_file, common_out_object_file): Substitute.\n\t(common): Create directory.\n\t* configure: Regenerate.\n\t* doc/tm.texi.in (targetm_common): Document.\n\t(TARGET_ALWAYS_STRIP_DOTDOT): Add @hook entry.\n\t* doc/tm.texi: Regenerate.\n\t* genhooks.c (hook_array): Also include common/common-target.def.\n\t* prefix.c (tm.h): Don't include.\n\t(common/common-target.h): Include.\n\t(ALWAYS_STRIP_DOTDOT): Don't define.\n\t(update_path): Use targetm_common.always_strip_dotdot instead of\n\tALWAYS_STRIP_DOTDOT.\n\t* system.h (ALWAYS_STRIP_DOTDOT): Poison.\n\nFrom-SVN: r175052", "tree": {"sha": "fbc63c1e6ab5dbc70fa471c1f8ba73b1a4c9e4e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbc63c1e6ab5dbc70fa471c1f8ba73b1a4c9e4e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c49a69620430855d0b44d4248f4722b0ce0e6013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c49a69620430855d0b44d4248f4722b0ce0e6013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c49a69620430855d0b44d4248f4722b0ce0e6013", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c49a69620430855d0b44d4248f4722b0ce0e6013/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22c5fa5fbfd9634c3389f845e77ddf8e6ea32f7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22c5fa5fbfd9634c3389f845e77ddf8e6ea32f7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22c5fa5fbfd9634c3389f845e77ddf8e6ea32f7b"}], "stats": {"total": 295, "additions": 277, "deletions": 18}, "files": [{"sha": "9afdada305c7801195db949a904a92a3d693d16f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c49a69620430855d0b44d4248f4722b0ce0e6013", "patch": "@@ -1,3 +1,34 @@\n+2011-06-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* common/common-target-def.h, common/common-target.def,\n+\tcommon/common-target.h, common/config/default-common.c,\n+\tcommon/config/pa/pa-common.c: New files.\n+\t* Makefile.in (common_out_file, common_out_object_file,\n+\tCOMMON_TARGET_H, COMMON_TARGET_DEF_H): New.\n+\t(OBJS-libcommon-target): Include $(common_out_object_file).\n+\t(prefix.o): Update dependencies.\n+\t($(common_out_object_file), common/common-target-hooks-def.h,\n+\ts-common-target-hooks-def-h): New.\n+\t(s-tm-texi): Also check timestamp on common-target.def.\n+\t(build/genhooks.o): Update dependencies.\n+\t* config.gcc (common_out_file, target_has_targetm_common): Define.\n+\t* config/pa/som.h (ALWAYS_STRIP_DOTDOT): Replace with\n+\tTARGET_ALWAYS_STRIP_DOTDOT.\n+\t* configure.ac (common_out_object_file): Define.\n+\t(common_out_file, common_out_object_file): Substitute.\n+\t(common): Create directory.\n+\t* configure: Regenerate.\n+\t* doc/tm.texi.in (targetm_common): Document.\n+\t(TARGET_ALWAYS_STRIP_DOTDOT): Add @hook entry.\n+\t* doc/tm.texi: Regenerate.\n+\t* genhooks.c (hook_array): Also include common/common-target.def.\n+\t* prefix.c (tm.h): Don't include.\n+\t(common/common-target.h): Include.\n+\t(ALWAYS_STRIP_DOTDOT): Don't define.\n+\t(update_path): Use targetm_common.always_strip_dotdot instead of\n+\tALWAYS_STRIP_DOTDOT.\n+\t* system.h (ALWAYS_STRIP_DOTDOT): Poison.\n+\n 2011-06-14  David Li  <davidxl@google.com>\n \n \t* passes.c (execute_function_todo): Remove TODO_dump_func."}, {"sha": "2f9610a1e58bb06a9d25a36d470a34ebc5d63002", "filename": "gcc/Makefile.in", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c49a69620430855d0b44d4248f4722b0ce0e6013", "patch": "@@ -480,6 +480,8 @@ TM_MULTILIB_CONFIG=@TM_MULTILIB_CONFIG@\n TM_MULTILIB_EXCEPTIONS_CONFIG=@TM_MULTILIB_EXCEPTIONS_CONFIG@\n out_file=$(srcdir)/config/@out_file@\n out_object_file=@out_object_file@\n+common_out_file=$(srcdir)/common/config/@common_out_file@\n+common_out_object_file=@common_out_object_file@\n md_file=$(srcdir)/config/@md_file@\n tm_file_list=@tm_file_list@\n tm_include_list=@tm_include_list@\n@@ -888,15 +890,19 @@ VEC_H = vec.h statistics.h\n EXCEPT_H = except.h $(HASHTAB_H) vecprim.h vecir.h\n TARGET_DEF = target.def target-hooks-macros.h\n C_TARGET_DEF = c-family/c-target.def target-hooks-macros.h\n+COMMON_TARGET_DEF = common/common-target.def target-hooks-macros.h\n TARGET_H = $(TM_H) target.h $(TARGET_DEF) insn-modes.h\n C_TARGET_H = c-family/c-target.h $(C_TARGET_DEF)\n+COMMON_TARGET_H = common/common-target.h $(COMMON_TARGET_DEF)\n MACHMODE_H = machmode.h mode-classes.def insn-modes.h\n HOOKS_H = hooks.h $(MACHMODE_H)\n HOSTHOOKS_DEF_H = hosthooks-def.h $(HOOKS_H)\n LANGHOOKS_DEF_H = langhooks-def.h $(HOOKS_H)\n TARGET_DEF_H = target-def.h target-hooks-def.h $(HOOKS_H) targhooks.h\n C_TARGET_DEF_H = c-family/c-target-def.h c-family/c-target-hooks-def.h \\\n   $(TREE_H) $(C_COMMON_H) $(HOOKS_H)\n+COMMON_TARGET_DEF_H = common/common-target-def.h \\\n+  common/common-target-hooks-def.h $(HOOKS_H)\n RTL_BASE_H = rtl.h rtl.def $(MACHMODE_H) reg-notes.def insn-notes.def \\\n   $(INPUT_H) $(REAL_H) statistics.h $(VEC_H) $(FIXED_VALUE_H) alias.h \\\n   $(HASHTAB_H)\n@@ -1492,7 +1498,8 @@ OBJS-libcommon = diagnostic.o pretty-print.o intl.o input.o version.o\n \n # Objects in libcommon-target.a, used by drivers and by the core\n # compiler and containing target-dependent code.\n-OBJS-libcommon-target = prefix.o opts-common.o options.o\n+OBJS-libcommon-target = $(common_out_object_file) prefix.o opts-common.o \\\n+\toptions.o\n \n # This lists all host objects for the front ends.\n ALL_HOST_FRONTEND_OBJS = $(C_OBJS) \\\n@@ -2224,8 +2231,8 @@ incpath.o: incpath.c incpath.h $(CONFIG_H) $(SYSTEM_H) $(CPPLIB_H) \\\n \t\tintl.h prefix.h coretypes.h $(TM_H) cppdefault.h $(TARGET_H) \\\n \t\t$(MACHMODE_H)\n \n-prefix.o: prefix.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) prefix.h \\\n-\tMakefile $(BASEVER)\n+prefix.o: prefix.c $(CONFIG_H) $(SYSTEM_H) coretypes.h prefix.h \\\n+\t$(COMMON_TARGET_H) Makefile $(BASEVER)\n \t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n \t-DPREFIX=\\\"$(prefix)\\\" -DBASEVER=$(BASEVER_s) \\\n \t  -c $(srcdir)/prefix.c $(OUTPUT_OPTION)\n@@ -3544,6 +3551,11 @@ $(out_object_file): $(out_file) $(CONFIG_H) coretypes.h $(TM_H) $(TREE_H) \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n \t\t$(out_file) $(OUTPUT_OPTION)\n \n+$(common_out_object_file): $(common_out_file) $(CONFIG_H) $(SYSTEM_H) \\\n+    coretypes.h $(COMMON_TARGET_H) $(COMMON_TARGET_DEF_H) $(TM_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n+\t  $< $(OUTPUT_OPTION)\n+\n # Build auxiliary files that support ecoff format.\n mips-tfile: mips-tfile.o $(LIBDEPS)\n \t$(LINKER) $(LINKERFLAGS) $(LDFLAGS) -o $@ \\\n@@ -3743,6 +3755,15 @@ s-c-target-hooks-def-h: build/genhooks$(build_exeext)\n \t\t\t\t\t     c-family/c-target-hooks-def.h\n \t$(STAMP) s-c-target-hooks-def-h\n \n+common/common-target-hooks-def.h: s-common-target-hooks-def-h; @true\n+\n+s-common-target-hooks-def-h: build/genhooks$(build_exeext)\n+\t$(RUN_GEN) build/genhooks$(build_exeext) \"Common Target Hook\" \\\n+\t\t\t\t\t     > tmp-common-target-hooks-def.h\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-common-target-hooks-def.h \\\n+\t\t\t\t\t     common/common-target-hooks-def.h\n+\t$(STAMP) s-common-target-hooks-def-h\n+\n # check if someone mistakenly only changed tm.texi.\n # We use a different pathname here to avoid a circular dependency.\n s-tm-texi: $(srcdir)/doc/../doc/tm.texi\n@@ -3765,6 +3786,7 @@ s-tm-texi: build/genhooks$(build_exeext) $(srcdir)/doc/tm.texi.in\n \telif test $(srcdir)/doc/tm.texi -nt $(srcdir)/doc/tm.texi.in \\\n \t  && ( test $(srcdir)/doc/tm.texi -nt $(srcdir)/target.def \\\n \t    || test $(srcdir)/doc/tm.texi -nt $(srcdir)/c-family/c-target.def \\\n+\t    || test $(srcdir)/doc/tm.texi -nt $(srcdir)/common/common-target.def \\\n \t  ); then \\\n \t  echo >&2 ; \\\n \t  echo You should edit $(srcdir)/doc/tm.texi.in rather than $(srcdir)/doc/tm.texi . >&2 ; \\\n@@ -3979,7 +4001,7 @@ build/genpreds.o : genpreds.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n build/genrecog.o : genrecog.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   coretypes.h $(GTM_H) errors.h $(READ_MD_H) gensupport.h\n build/genhooks.o : genhooks.c $(TARGET_DEF) $(C_TARGET_DEF)\t\t\\\n-  $(BCONFIG_H) $(SYSTEM_H) errors.h\n+  $(COMMON_TARGET_DEF) $(BCONFIG_H) $(SYSTEM_H) errors.h\n \n # Compile the programs that generate insn-* from the machine description.\n # They are compiled with $(COMPILER_FOR_BUILD), and associated libraries,"}, {"sha": "a0587082bd6d0c435d51ea8dc88b5456acbc4405", "filename": "gcc/common/common-target-def.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fcommon%2Fcommon-target-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fcommon%2Fcommon-target-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fcommon-target-def.h?ref=c49a69620430855d0b44d4248f4722b0ce0e6013", "patch": "@@ -0,0 +1,20 @@\n+/* Default initializers for common target hooks.\n+   Copyright (C) 2011\n+   Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"common/common-target-hooks-def.h\"\n+#include \"hooks.h\""}, {"sha": "57fc5c4670946a3808a4773d9d1b33507893a553", "filename": "gcc/common/common-target.def", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fcommon%2Fcommon-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fcommon%2Fcommon-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fcommon-target.def?ref=c49a69620430855d0b44d4248f4722b0ce0e6013", "patch": "@@ -0,0 +1,39 @@\n+/* Target hook definitions for common hooks.\n+   Copyright (C) 2011\n+   Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* See target-hooks-macros.h for details of macros that should be\n+   provided by the including file, and how to use them here.  */\n+#include \"target-hooks-macros.h\"\n+\n+#undef HOOK_TYPE\n+#define HOOK_TYPE \"Common Target Hook\"\n+\n+HOOK_VECTOR (TARGETM_COMMON_INITIALIZER, gcc_targetm_common)\n+\n+#undef HOOK_PREFIX\n+#define HOOK_PREFIX \"TARGET_\"\n+\n+DEFHOOKPOD\n+(always_strip_dotdot,\n+ \"True if @file{..} components should always be removed from directory names\\\n+ computed relative to GCC's internal directories, false (default) if such\\\n+ components should be preserved and directory names containing them passed\\\n+ to other tools such as the linker.\",\n+ bool, false)\n+ \n+HOOK_VECTOR_END (C90_EMPTY_HACK)"}, {"sha": "615ac084a0f2bb81dd8a9443305f39a2e16403ce", "filename": "gcc/common/common-target.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fcommon%2Fcommon-target.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fcommon%2Fcommon-target.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fcommon-target.h?ref=c49a69620430855d0b44d4248f4722b0ce0e6013", "patch": "@@ -0,0 +1,35 @@\n+/* Data structure definitions for common hooks.\n+   Copyright (C) 2011\n+   Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.\n+\n+   In other words, you are welcome to use, share and improve this program.\n+   You are forbidden to forbid anyone else to use, share and improve\n+   what you give them.   Help stamp out software-hoarding!  */\n+\n+#ifndef GCC_COMMON_TARGET_H\n+#define GCC_COMMON_TARGET_H\n+\n+#define DEFHOOKPOD(NAME, DOC, TYPE, INIT) TYPE NAME;\n+#define DEFHOOK(NAME, DOC, TYPE, PARAMS, INIT) TYPE (* NAME) PARAMS;\n+#define DEFHOOK_UNDOC DEFHOOK\n+#define HOOKSTRUCT(FRAGMENT) FRAGMENT\n+\n+#include \"common-target.def\"\n+\n+extern struct gcc_targetm_common targetm_common;\n+\n+#endif /* GCC_C_TARGET_H */"}, {"sha": "8ea235495cb56480ef017859d3e8797f876b6f44", "filename": "gcc/common/config/default-common.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fcommon%2Fconfig%2Fdefault-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fcommon%2Fconfig%2Fdefault-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fdefault-common.c?ref=c49a69620430855d0b44d4248f4722b0ce0e6013", "patch": "@@ -0,0 +1,34 @@\n+/* Default common target hooks initializer.\n+   Copyright (C) 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+\n+/* Do not include tm.h or tm_p.h here; if it is useful for a target to\n+   define some macros for the initializer in a header without defining\n+   targetm_common itself (for example, because of interactions with\n+   some hooks depending on the target OS and others on the target\n+   architecture), create a separate tm_common.h for only the relevant\n+   definitions.  */\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "a14e9b124c7051d561eae66e74339fcba01f5107", "filename": "gcc/common/config/pa/pa-common.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fcommon%2Fconfig%2Fpa%2Fpa-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fcommon%2Fconfig%2Fpa%2Fpa-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fpa%2Fpa-common.c?ref=c49a69620430855d0b44d4248f4722b0ce0e6013", "patch": "@@ -0,0 +1,28 @@\n+/* HPPA common hooks.\n+   Copyright (C) 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"tm.h\"\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "ee9391d58cddedce26f2541bb8caf2812c5bdd94", "filename": "gcc/config.gcc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=c49a69620430855d0b44d4248f4722b0ce0e6013", "patch": "@@ -96,6 +96,9 @@\n #  out_file\t\tThe name of the machine description C support\n #\t\t\tfile, if different from \"$cpu_type/$cpu_type.c\".\n #\n+#  common_out_file\tThe name of the source file for code shared between\n+#\t\t\tthe compiler proper and the driver.\n+#\n #  md_file\t\tThe name of the machine-description file, if\n #\t\t\tdifferent from \"$cpu_type/$cpu_type.md\".\n #\n@@ -192,8 +195,12 @@\n #\n #  target_has_targetcm\tSet to yes or no depending on whether the target\n #\t\t\thas its own definition of targetcm.\n+#\n+#  target_has_targetm_common\tSet to yes or no depending on whether the\n+#\t\t\ttarget has its own definition of targetm_common.\n \n out_file=\n+common_out_file=\n tmake_file=\n extra_headers=\n user_headers_inc_next_pre=\n@@ -210,6 +217,7 @@ c_target_objs=\n cxx_target_objs=\n fortran_target_objs=\n target_has_targetcm=no\n+target_has_targetm_common=no\n tm_defines=\n xm_defines=\n libgcc_tm_file=\n@@ -359,6 +367,7 @@ ia64-*-*)\n \t;;\n hppa*-*-*)\n \tcpu_type=pa\n+\ttarget_has_targetm_common=yes\n \t;;\n lm32*)\n \textra_options=\"${extra_options} g.opt\"\n@@ -2667,6 +2676,14 @@ if [ \"$target_has_targetcm\" = \"no\" ]; then\n   cxx_target_objs=\"$cxx_target_objs default-c.o\"\n fi\n \n+if [ \"$common_out_file\" = \"\" ]; then\n+  if [ \"$target_has_targetm_common\" = \"yes\" ]; then\n+    common_out_file=\"$cpu_type/$cpu_type-common.c\"\n+  else\n+    common_out_file=\"default-common.c\"\n+  fi\n+fi\n+\n # Support for --with-cpu and related options (and a few unrelated options,\n # too).\n case ${with_cpu} in"}, {"sha": "e8a47cced1c48a3c4d29aa1754d85437f833a6aa", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=c49a69620430855d0b44d4248f4722b0ce0e6013", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for SOM assembler support.\n-   Copyright (C) 1999, 2001, 2002, 2003, 2004, 2005, 2007, 2010\n+   Copyright (C) 1999, 2001, 2002, 2003, 2004, 2005, 2007, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -269,7 +269,8 @@ do {\t\t\t\t\t\t\\\n    must be removed from library prefixes to prevent binaries from depending\n    on the location of the GCC tool directory.  The downside is GCC\n    cannot be moved after installation using a symlink.  */\n-#define ALWAYS_STRIP_DOTDOT 1\n+#undef TARGET_ALWAYS_STRIP_DOTDOT\n+#define TARGET_ALWAYS_STRIP_DOTDOT true\n \n /* If GAS supports weak, we can support weak when we have working linker\n    support for secondary definitions and are generating code for GAS."}, {"sha": "6fcb5ab4894b557fc8067bf97acd8e6e5f714562", "filename": "gcc/configure", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=c49a69620430855d0b44d4248f4722b0ce0e6013", "patch": "@@ -624,6 +624,8 @@ tm_defines\n tm_include_list\n tm_file_list\n thread_file\n+common_out_object_file\n+common_out_file\n out_object_file\n out_file\n objc_boehm_gc\n@@ -11217,6 +11219,7 @@ done\n tmake_file=\"${tmake_file_}\"\n \n out_object_file=`basename $out_file .c`.o\n+common_out_object_file=`basename $common_out_file .c`.o\n \n tm_file_list=\"options.h\"\n tm_include_list=\"options.h insn-constants.h\"\n@@ -17517,7 +17520,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17520 \"configure\"\n+#line 17523 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -17623,7 +17626,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17626 \"configure\"\n+#line 17629 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -26391,6 +26394,8 @@ fi\n \n \n \n+\n+\n \n \n \n@@ -27951,7 +27956,7 @@ case ${CONFIG_HEADERS} in\n   echo > cstamp-h ;;\n esac\n # Make sure all the subdirs exist.\n-for d in $subdirs doc build c-family\n+for d in $subdirs doc build common c-family\n do\n     test -d $d || mkdir $d\n done"}, {"sha": "5f3641b319853a802b0b0cf3b2ac79869021f2d8", "filename": "gcc/configure.ac", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=c49a69620430855d0b44d4248f4722b0ce0e6013", "patch": "@@ -1628,6 +1628,7 @@ done\n tmake_file=\"${tmake_file_}\"\n \n out_object_file=`basename $out_file .c`.o\n+common_out_object_file=`basename $common_out_file .c`.o\n \n tm_file_list=\"options.h\"\n tm_include_list=\"options.h insn-constants.h\"\n@@ -4877,6 +4878,8 @@ AC_SUBST(md_file)\n AC_SUBST(objc_boehm_gc)\n AC_SUBST(out_file)\n AC_SUBST(out_object_file)\n+AC_SUBST(common_out_file)\n+AC_SUBST(common_out_object_file)\n AC_SUBST(thread_file)\n AC_SUBST(tm_file_list)\n AC_SUBST(tm_include_list)\n@@ -5081,7 +5084,7 @@ case ${CONFIG_HEADERS} in\n   echo > cstamp-h ;;\n esac\n # Make sure all the subdirs exist.\n-for d in $subdirs doc build c-family\n+for d in $subdirs doc build common c-family\n do\n     test -d $d || mkdir $d\n done"}, {"sha": "cda7f306a9eecbf76e10ecdff5778292a983e465", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c49a69620430855d0b44d4248f4722b0ce0e6013", "patch": "@@ -99,6 +99,16 @@ initializer @code{TARGETCM_INITIALIZER} in\n themselves, they should set @code{target_has_targetcm=yes} in\n @file{config.gcc}; otherwise a default definition is used.\n \n+Similarly, there is a @code{targetm_common} variable for hooks that\n+are shared between the compiler driver and the compilers proper,\n+documented as ``Common Target Hook''.  This is declared in\n+@file{common/common-target.h}, the initializer\n+@code{TARGETM_COMMON_INITIALIZER} in\n+@file{common/common-target-def.h}.  If targets initialize\n+@code{targetm_common} themselves, they should set\n+@code{target_has_targetm_common=yes} in @file{config.gcc}; otherwise a\n+default definition is used.\n+\n @node Driver\n @section Controlling the Compilation Driver, @file{gcc}\n @cindex driver\n@@ -383,6 +393,10 @@ directories from linking commands.  Do not give it a nonzero value if\n removing duplicate search directories changes the linker's semantics.\n @end defmac\n \n+@deftypevr {Common Target Hook} bool TARGET_ALWAYS_STRIP_DOTDOT\n+True if @file{..} components should always be removed from directory names computed relative to GCC's internal directories, false (default) if such components should be preserved and directory names containing them passed to other tools such as the linker.\n+@end deftypevr\n+\n @defmac MULTILIB_DEFAULTS\n Define this macro as a C expression for the initializer of an array of\n string to tell the driver program which options are defaults for this"}, {"sha": "3ea77c52e93fee2bdedbb96bd5f86769cfec2f46", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=c49a69620430855d0b44d4248f4722b0ce0e6013", "patch": "@@ -99,6 +99,16 @@ initializer @code{TARGETCM_INITIALIZER} in\n themselves, they should set @code{target_has_targetcm=yes} in\n @file{config.gcc}; otherwise a default definition is used.\n \n+Similarly, there is a @code{targetm_common} variable for hooks that\n+are shared between the compiler driver and the compilers proper,\n+documented as ``Common Target Hook''.  This is declared in\n+@file{common/common-target.h}, the initializer\n+@code{TARGETM_COMMON_INITIALIZER} in\n+@file{common/common-target-def.h}.  If targets initialize\n+@code{targetm_common} themselves, they should set\n+@code{target_has_targetm_common=yes} in @file{config.gcc}; otherwise a\n+default definition is used.\n+\n @node Driver\n @section Controlling the Compilation Driver, @file{gcc}\n @cindex driver\n@@ -383,6 +393,8 @@ directories from linking commands.  Do not give it a nonzero value if\n removing duplicate search directories changes the linker's semantics.\n @end defmac\n \n+@hook TARGET_ALWAYS_STRIP_DOTDOT\n+\n @defmac MULTILIB_DEFAULTS\n Define this macro as a C expression for the initializer of an array of\n string to tell the driver program which options are defaults for this"}, {"sha": "789744ce228527d786f7b429f3b2d7b2fcdf69fb", "filename": "gcc/genhooks.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fgenhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fgenhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenhooks.c?ref=c49a69620430855d0b44d4248f4722b0ce0e6013", "patch": "@@ -34,6 +34,7 @@ static struct hook_desc hook_array[] = {\n   { \"*\", #TYPE, HOOK_PREFIX #NAME, #PARAMS, #INIT, HOOK_TYPE },\n #include \"target.def\"\n #include \"c-family/c-target.def\"\n+#include \"common/common-target.def\"\n #undef DEFHOOK\n };\n "}, {"sha": "369ede703090153bebb615dbba1b20ac1e0b70c5", "filename": "gcc/prefix.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fprefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fprefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprefix.c?ref=c49a69620430855d0b44d4248f4722b0ce0e6013", "patch": "@@ -1,6 +1,6 @@\n /* Utility to update paths from internal to external forms.\n    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2007  Free Software Foundation, Inc.\n+   2007, 2011  Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -67,11 +67,11 @@ License along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tm.h\"\n #if defined(_WIN32) && defined(ENABLE_WIN32_REGISTRY)\n #include <windows.h>\n #endif\n #include \"prefix.h\"\n+#include \"common/common-target.h\"\n \n static const char *std_prefix = PREFIX;\n \n@@ -271,10 +271,6 @@ update_path (const char *path, const char *key)\n   else\n     result = xstrdup (path);\n \n-#ifndef ALWAYS_STRIP_DOTDOT\n-#define ALWAYS_STRIP_DOTDOT 0\n-#endif\n-\n   p = result;\n   while (1)\n     {\n@@ -289,7 +285,8 @@ update_path (const char *path, const char *key)\n \t  && (p != result && IS_DIR_SEPARATOR (p[-1])))\n \t{\n \t  *p = 0;\n-\t  if (!ALWAYS_STRIP_DOTDOT && access (result, X_OK) == 0)\n+\t  if (!targetm_common.always_strip_dotdot\n+\t      && access (result, X_OK) == 0)\n \t    {\n \t      *p = '.';\n \t      break;"}, {"sha": "6b8fde2dcadd407815ecc9d4e8e0df65e9a4df44", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49a69620430855d0b44d4248f4722b0ce0e6013/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=c49a69620430855d0b44d4248f4722b0ce0e6013", "patch": "@@ -759,7 +759,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tLABEL_ALIGN_MAX_SKIP LOOP_ALIGN_MAX_SKIP\t\t\t\\\n \tLABEL_ALIGN_AFTER_BARRIER_MAX_SKIP JUMP_ALIGN_MAX_SKIP \t\t\\\n \tCAN_DEBUG_WITHOUT_FP UNLIKELY_EXECUTED_TEXT_SECTION_NAME\t\\\n-\tHOT_TEXT_SECTION_NAME LEGITIMATE_CONSTANT_P\n+\tHOT_TEXT_SECTION_NAME LEGITIMATE_CONSTANT_P ALWAYS_STRIP_DOTDOT\n \n /* Target macros only used for code built for the target, that have\n    moved to libgcc-tm.h or have never been present elsewhere.  */"}]}