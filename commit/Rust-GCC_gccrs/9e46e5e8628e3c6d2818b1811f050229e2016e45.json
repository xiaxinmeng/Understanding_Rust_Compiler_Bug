{"sha": "9e46e5e8628e3c6d2818b1811f050229e2016e45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU0NmU1ZTg2MjhlM2M2ZDI4MThiMTgxMWYwNTAyMjllMjAxNmU0NQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-10-07T09:50:45Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-10-07T09:50:45Z"}, "message": "Warning fixes:\n\n        * Makefile.in (hash.h): Add -L KR-C -F ', 0, 0' flags to gperf.\n        (gxx.gperf): Update comments describing invocation flags.\n        (hash.h): Regenerate using gperf 2.7.1 (19981006 egcs).\n\nFrom-SVN: r22888", "tree": {"sha": "80c3e8f8a7bb27dedac2efb1a39791d086f4c662", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80c3e8f8a7bb27dedac2efb1a39791d086f4c662"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e46e5e8628e3c6d2818b1811f050229e2016e45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e46e5e8628e3c6d2818b1811f050229e2016e45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e46e5e8628e3c6d2818b1811f050229e2016e45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e46e5e8628e3c6d2818b1811f050229e2016e45/comments", "author": null, "committer": null, "parents": [{"sha": "d143a8907abfc4e4480c67dd127db1596ffd4f9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d143a8907abfc4e4480c67dd127db1596ffd4f9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d143a8907abfc4e4480c67dd127db1596ffd4f9c"}], "stats": {"total": 376, "additions": 198, "deletions": 178}, "files": [{"sha": "c7b1ed806ddeec264f94329552df75f184ba6e2b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e46e5e8628e3c6d2818b1811f050229e2016e45/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e46e5e8628e3c6d2818b1811f050229e2016e45/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9e46e5e8628e3c6d2818b1811f050229e2016e45", "patch": "@@ -1,3 +1,9 @@\n+Wed Oct  7 12:32:44 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (hash.h): Add -L KR-C -F ', 0, 0' flags to gperf.\n+\t(gxx.gperf): Update comments describing invocation flags.\n+\t(hash.h): Regenerate using gperf 2.7.1 (19981006 egcs).\n+\n 1998-10-07  Mark Mitchell  <mark@markmitchell.com>\n \n \t* class.c (finish_struct_1): Add commentary on prevous change."}, {"sha": "d9e32402d39c014de91dec4245da4d3ff1438043", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e46e5e8628e3c6d2818b1811f050229e2016e45/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e46e5e8628e3c6d2818b1811f050229e2016e45/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=9e46e5e8628e3c6d2818b1811f050229e2016e45", "patch": "@@ -240,8 +240,8 @@ $(PARSE_C) : $(srcdir)/parse.y\n # if gxx.gpref got touched, say.\n # Thus you have to remove hash.h to force it to be re-made.\n $(srcdir)/hash.h:\n-\tgperf -p -j1 -g -o -t -N is_reserved_word '-k1,4,7,$$' \\\n-\t\t$(srcdir)/gxx.gperf >$(srcdir)/hash.h\n+\tgperf -L KR-C -F ', 0, 0' -p -j1 -g -o -t -N is_reserved_word \\\n+\t\t'-k1,4,7,$$' $(srcdir)/gxx.gperf >$(srcdir)/hash.h\n \n spew.o : spew.c $(CONFIG_H) $(CXX_TREE_H) $(PARSE_H) $(srcdir)/../flags.h \\\n   lex.h $(srcdir)/../system.h $(srcdir)/../toplev.h"}, {"sha": "868dfc426f0826202a1f374f5041bb0d57e2cc4c", "filename": "gcc/cp/gxx.gperf", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e46e5e8628e3c6d2818b1811f050229e2016e45/gcc%2Fcp%2Fgxx.gperf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e46e5e8628e3c6d2818b1811f050229e2016e45/gcc%2Fcp%2Fgxx.gperf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fgxx.gperf?ref=9e46e5e8628e3c6d2818b1811f050229e2016e45", "patch": "@@ -1,5 +1,5 @@\n %{\n-/* Command-line: gperf -p -j1 -g -o -t -N is_reserved_word -k1,4,$,7 gplus.gperf  */\n+/* Command-line: gperf -L KR-C -F ', 0, 0' -p -j1 -g -o -t -N is_reserved_word -k1,4,$,7 gplus.gperf  */\n %}\n struct resword { char *name; short token; enum rid rid;};\n %%"}, {"sha": "21ebdd7901e13816fb497bda59b0ea17704449a2", "filename": "gcc/cp/hash.h", "status": "modified", "additions": 189, "deletions": 175, "changes": 364, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e46e5e8628e3c6d2818b1811f050229e2016e45/gcc%2Fcp%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e46e5e8628e3c6d2818b1811f050229e2016e45/gcc%2Fcp%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fhash.h?ref=9e46e5e8628e3c6d2818b1811f050229e2016e45", "patch": "@@ -1,6 +1,6 @@\n-/* C code produced by gperf version 2.5 (GNU C++ version) */\n-/* Command-line: gperf -p -j1 -g -o -t -N is_reserved_word -k1,4,7,$ /home/bkoz/src.egcs/gcc/cp/gxx.gperf  */\n-/* Command-line: gperf -p -j1 -g -o -t -N is_reserved_word -k1,4,$,7 gplus.gperf  */\n+/* KR-C code produced by gperf version 2.7.1 (19981006 egcs) */\n+/* Command-line: gperf -L KR-C -F , 0, 0 -p -j1 -g -o -t -N is_reserved_word -k1,4,7,$ ./gxx.gperf  */\n+/* Command-line: gperf -L KR-C -F ', 0, 0' -p -j1 -g -o -t -N is_reserved_word -k1,4,$,7 gplus.gperf  */\n struct resword { char *name; short token; enum rid rid;};\n \n #define TOTAL_KEYWORDS 104\n@@ -11,51 +11,64 @@ struct resword { char *name; short token; enum rid rid;};\n /* maximum key range = 258, duplicates = 0 */\n \n #ifdef __GNUC__\n-inline\n+__inline\n #endif\n static unsigned int\n hash (str, len)\n      register char *str;\n-     register int unsigned len;\n+     register unsigned int len;\n {\n   static unsigned short asso_values[] =\n     {\n-     262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n-     262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n-     262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n-     262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n-     262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n-     262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n-     262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n-     262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n-     262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n-     262, 262, 262, 262, 262,   0, 262,  87,  25,  96,\n-      60,   0,  55,   7,   4,  41, 262,   2,  15,  49,\n-      14,  63,  32,  29,   3,  23,   6,   8,   2,   2,\n-       0,   7, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262,   0, 262,  87,  25,  96,\n+       60,   0,  55,   7,   4,  41, 262,   2,  15,  49,\n+       14,  63,  32,  29,   3,  23,   6,   8,   2,   2,\n+        0,   7, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+      262, 262, 262, 262, 262, 262\n     };\n   register int hval = len;\n \n   switch (hval)\n     {\n       default:\n       case 7:\n-        hval += asso_values[str[6]];\n+        hval += asso_values[(unsigned char)str[6]];\n       case 6:\n       case 5:\n       case 4:\n-        hval += asso_values[str[3]];\n+        hval += asso_values[(unsigned char)str[3]];\n       case 3:\n       case 2:\n       case 1:\n-        hval += asso_values[str[0]];\n+        hval += asso_values[(unsigned char)str[0]];\n         break;\n     }\n-  return hval + asso_values[str[len - 1]];\n+  return hval + asso_values[(unsigned char)str[len - 1]];\n }\n \n #ifdef __GNUC__\n-inline\n+__inline\n #endif\n struct resword *\n is_reserved_word (str, len)\n@@ -64,157 +77,158 @@ is_reserved_word (str, len)\n {\n   static struct resword wordlist[] =\n     {\n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"else\",  ELSE, NORID,},\n-      {\"\",}, \n-      {\"xor\",  '^', NORID,},\n-      {\"\",}, \n-      {\"__real__\",  REALPART, NORID},\n-      {\"\",}, \n-      {\"true\",  CXX_TRUE, NORID,},\n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"try\",  TRY, NORID,},\n-      {\"\",}, {\"\",}, \n-      {\"new\",  NEW, NORID,},\n-      {\"extern\",  SCSPEC, RID_EXTERN,},\n-      {\"__real\",  REALPART, NORID},\n-      {\"while\",  WHILE, NORID,},\n-      {\"not\",  '!', NORID,},\n-      {\"\",}, {\"\",}, {\"\",}, \n-      {\"__extension__\",  EXTENSION, NORID},\n-      {\"\",}, \n-      {\"__null\",  CONSTANT, RID_NULL},\n-      {\"__asm__\",  ASM_KEYWORD, NORID},\n-      {\"return\",  RETURN, NORID,},\n-      {\"\",}, \n-      {\"long\",  TYPESPEC, RID_LONG,},\n-      {\"using\",  USING, NORID,},\n-      {\"xor_eq\",  ASSIGN, NORID,},\n-      {\"__inline\",  SCSPEC, RID_INLINE},\n-      {\"short\",  TYPESPEC, RID_SHORT,},\n-      {\"__inline__\",  SCSPEC, RID_INLINE},\n-      {\"switch\",  SWITCH, NORID,},\n-      {\"__alignof__\",  ALIGNOF, NORID},\n-      {\"private\",  VISSPEC, RID_PRIVATE,},\n-      {\"reinterpret_cast\",  REINTERPRET_CAST, NORID,},\n-      {\"struct\",  AGGR, RID_RECORD,},\n-      {\"\",}, \n-      {\"virtual\",  SCSPEC, RID_VIRTUAL,},\n-      {\"static_cast\",  STATIC_CAST, NORID,},\n-      {\"\",}, {\"\",}, \n-      {\"not_eq\",  EQCOMPARE, NORID,},\n-      {\"int\",  TYPESPEC, RID_INT,},\n-      {\"__signed__\",  TYPESPEC, RID_SIGNED},\n-      {\"template\",  TEMPLATE, RID_TEMPLATE,},\n-      {\"\",}, \n-      {\"signature\",  AGGR, RID_SIGNATURE\t/* Extension */,},\n-      {\"register\",  SCSPEC, RID_REGISTER,},\n-      {\"this\",  THIS, NORID,},\n-      {\"__imag__\",  IMAGPART, NORID},\n-      {\"__attribute\",  ATTRIBUTE, NORID},\n-      {\"bool\",  TYPESPEC, RID_BOOL,},\n-      {\"__attribute__\",  ATTRIBUTE, NORID},\n-      {\"for\",  FOR, NORID,},\n-      {\"__imag\",  IMAGPART, NORID},\n-      {\"typename\",  TYPENAME_KEYWORD, NORID,},\n-      {\"\",}, {\"\",}, \n-      {\"delete\",  DELETE, NORID,},\n-      {\"typeof\",  TYPEOF, NORID,},\n-      {\"or\",  OROR, NORID,},\n-      {\"\",}, \n-      {\"explicit\",  SCSPEC, RID_EXPLICIT,},\n-      {\"\",}, \n-      {\"typeid\",  TYPEID, NORID,},\n-      {\"\",}, {\"\",}, \n-      {\"export\",  SCSPEC, RID_EXPORT,},\n-      {\"throw\",  THROW, NORID,},\n-      {\"__asm\",  ASM_KEYWORD, NORID},\n-      {\"__const__\",  CV_QUALIFIER, RID_CONST},\n-      {\"__volatile\",  CV_QUALIFIER, RID_VOLATILE},\n-      {\"__typeof__\",  TYPEOF, NORID},\n-      {\"__volatile__\",  CV_QUALIFIER, RID_VOLATILE},\n-      {\"__const\",  CV_QUALIFIER, RID_CONST},\n-      {\"false\",  CXX_FALSE, NORID,},\n-      {\"sizeof\",  SIZEOF, NORID,},\n-      {\"\",}, {\"\",}, \n-      {\"__complex\",  TYPESPEC, RID_COMPLEX},\n-      {\"inline\",  SCSPEC, RID_INLINE,},\n-      {\"__complex__\",  TYPESPEC, RID_COMPLEX},\n-      {\"union\",  AGGR, RID_UNION,},\n-      {\"double\",  TYPESPEC, RID_DOUBLE,},\n-      {\"\",}, \n-      {\"__alignof\",  ALIGNOF, NORID},\n-      {\"\",}, {\"\",}, \n-      {\"bitor\",  '|', NORID,},\n-      {\"or_eq\",  ASSIGN, NORID,},\n-      {\"if\",  IF, NORID,},\n-      {\"\",}, \n-      {\"case\",  CASE, NORID,},\n-      {\"\",}, \n-      {\"enum\",  ENUM, NORID,},\n-      {\"signed\",  TYPESPEC, RID_SIGNED,},\n-      {\"\",}, \n-      {\"__sigof__\",  SIGOF, NORID\t\t/* Extension */,},\n-      {\"char\",  TYPESPEC, RID_CHAR,},\n-      {\"\",}, {\"\",}, \n-      {\"__signed\",  TYPESPEC, RID_SIGNED},\n-      {\"namespace\",  NAMESPACE, NORID,},\n-      {\"__label__\",  LABEL, NORID},\n-      {\"volatile\",  CV_QUALIFIER, RID_VOLATILE,},\n-      {\"protected\",  VISSPEC, RID_PROTECTED,},\n-      {\"__wchar_t\",  TYPESPEC, RID_WCHAR  /* Unique to ANSI C++ */,},\n-      {\"\",}, {\"\",}, \n-      {\"unsigned\",  TYPESPEC, RID_UNSIGNED,},\n-      {\"continue\",  CONTINUE, NORID,},\n-      {\"break\",  BREAK, NORID,},\n-      {\"\",}, \n-      {\"friend\",  SCSPEC, RID_FRIEND,},\n-      {\"and_eq\",  ASSIGN, NORID,},\n-      {\"typedef\",  SCSPEC, RID_TYPEDEF,},\n-      {\"\",}, \n-      {\"do\",  DO, NORID,},\n-      {\"void\",  TYPESPEC, RID_VOID,},\n-      {\"\",}, {\"\",}, {\"\",}, \n-      {\"const\",  CV_QUALIFIER, RID_CONST,},\n-      {\"static\",  SCSPEC, RID_STATIC,},\n-      {\"\",}, \n-      {\"__typeof\",  TYPEOF, NORID},\n-      {\"\",}, {\"\",}, {\"\",}, \n-      {\"goto\",  GOTO, NORID,},\n-      {\"\",}, \n-      {\"asm\",  ASM_KEYWORD, NORID,},\n-      {\"operator\",  OPERATOR, NORID,},\n-      {\"__signature__\",  AGGR, RID_SIGNATURE\t/* Extension */,},\n-      {\"\",}, \n-      {\"mutable\",  SCSPEC, RID_MUTABLE,},\n-      {\"\",}, {\"\",}, \n-      {\"sigof\",  SIGOF, NORID\t\t/* Extension */,},\n-      {\"class\",  AGGR, RID_CLASS,},\n-      {\"compl\",  '~', NORID,},\n-      {\"public\",  VISSPEC, RID_PUBLIC,},\n-      {\"and\",  ANDAND, NORID,},\n-      {\"\",}, {\"\",}, \n-      {\"float\",  TYPESPEC, RID_FLOAT,},\n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"\",}, {\"\",}, {\"\",}, \n-      {\"default\",  DEFAULT, NORID,},\n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"\",}, {\"\",}, \n-      {\"bitand\",  '&', NORID,},\n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"catch\",  CATCH, NORID,},\n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"auto\",  SCSPEC, RID_AUTO,},\n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"const_cast\",  CONST_CAST, NORID,},\n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"\",}, {\"\",}, {\"dynamic_cast\",  DYNAMIC_CAST, NORID,},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"else\", ELSE, NORID,},\n+      {\"\", 0, 0},\n+      {\"xor\", '^', NORID,},\n+      {\"\", 0, 0},\n+      {\"__real__\", REALPART, NORID},\n+      {\"\", 0, 0},\n+      {\"true\", CXX_TRUE, NORID,},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"try\", TRY, NORID,},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"new\", NEW, NORID,},\n+      {\"extern\", SCSPEC, RID_EXTERN,},\n+      {\"__real\", REALPART, NORID},\n+      {\"while\", WHILE, NORID,},\n+      {\"not\", '!', NORID,},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"__extension__\", EXTENSION, NORID},\n+      {\"\", 0, 0},\n+      {\"__null\", CONSTANT, RID_NULL},\n+      {\"__asm__\", ASM_KEYWORD, NORID},\n+      {\"return\", RETURN, NORID,},\n+      {\"\", 0, 0},\n+      {\"long\", TYPESPEC, RID_LONG,},\n+      {\"using\", USING, NORID,},\n+      {\"xor_eq\", ASSIGN, NORID,},\n+      {\"__inline\", SCSPEC, RID_INLINE},\n+      {\"short\", TYPESPEC, RID_SHORT,},\n+      {\"__inline__\", SCSPEC, RID_INLINE},\n+      {\"switch\", SWITCH, NORID,},\n+      {\"__alignof__\", ALIGNOF, NORID},\n+      {\"private\", VISSPEC, RID_PRIVATE,},\n+      {\"reinterpret_cast\", REINTERPRET_CAST, NORID,},\n+      {\"struct\", AGGR, RID_RECORD,},\n+      {\"\", 0, 0},\n+      {\"virtual\", SCSPEC, RID_VIRTUAL,},\n+      {\"static_cast\", STATIC_CAST, NORID,},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"not_eq\", EQCOMPARE, NORID,},\n+      {\"int\", TYPESPEC, RID_INT,},\n+      {\"__signed__\", TYPESPEC, RID_SIGNED},\n+      {\"template\", TEMPLATE, RID_TEMPLATE,},\n+      {\"\", 0, 0},\n+      {\"signature\", AGGR, RID_SIGNATURE\t/* Extension */,},\n+      {\"register\", SCSPEC, RID_REGISTER,},\n+      {\"this\", THIS, NORID,},\n+      {\"__imag__\", IMAGPART, NORID},\n+      {\"__attribute\", ATTRIBUTE, NORID},\n+      {\"bool\", TYPESPEC, RID_BOOL,},\n+      {\"__attribute__\", ATTRIBUTE, NORID},\n+      {\"for\", FOR, NORID,},\n+      {\"__imag\", IMAGPART, NORID},\n+      {\"typename\", TYPENAME_KEYWORD, NORID,},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"delete\", DELETE, NORID,},\n+      {\"typeof\", TYPEOF, NORID,},\n+      {\"or\", OROR, NORID,},\n+      {\"\", 0, 0},\n+      {\"explicit\", SCSPEC, RID_EXPLICIT,},\n+      {\"\", 0, 0},\n+      {\"typeid\", TYPEID, NORID,},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"export\", SCSPEC, RID_EXPORT,},\n+      {\"throw\", THROW, NORID,},\n+      {\"__asm\", ASM_KEYWORD, NORID},\n+      {\"__const__\", CV_QUALIFIER, RID_CONST},\n+      {\"__volatile\", CV_QUALIFIER, RID_VOLATILE},\n+      {\"__typeof__\", TYPEOF, NORID},\n+      {\"__volatile__\", CV_QUALIFIER, RID_VOLATILE},\n+      {\"__const\", CV_QUALIFIER, RID_CONST},\n+      {\"false\", CXX_FALSE, NORID,},\n+      {\"sizeof\", SIZEOF, NORID,},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"__complex\", TYPESPEC, RID_COMPLEX},\n+      {\"inline\", SCSPEC, RID_INLINE,},\n+      {\"__complex__\", TYPESPEC, RID_COMPLEX},\n+      {\"union\", AGGR, RID_UNION,},\n+      {\"double\", TYPESPEC, RID_DOUBLE,},\n+      {\"\", 0, 0},\n+      {\"__alignof\", ALIGNOF, NORID},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"bitor\", '|', NORID,},\n+      {\"or_eq\", ASSIGN, NORID,},\n+      {\"if\", IF, NORID,},\n+      {\"\", 0, 0},\n+      {\"case\", CASE, NORID,},\n+      {\"\", 0, 0},\n+      {\"enum\", ENUM, NORID,},\n+      {\"signed\", TYPESPEC, RID_SIGNED,},\n+      {\"\", 0, 0},\n+      {\"__sigof__\", SIGOF, NORID\t\t/* Extension */,},\n+      {\"char\", TYPESPEC, RID_CHAR,},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"__signed\", TYPESPEC, RID_SIGNED},\n+      {\"namespace\", NAMESPACE, NORID,},\n+      {\"__label__\", LABEL, NORID},\n+      {\"volatile\", CV_QUALIFIER, RID_VOLATILE,},\n+      {\"protected\", VISSPEC, RID_PROTECTED,},\n+      {\"__wchar_t\", TYPESPEC, RID_WCHAR  /* Unique to ANSI C++ */,},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"unsigned\", TYPESPEC, RID_UNSIGNED,},\n+      {\"continue\", CONTINUE, NORID,},\n+      {\"break\", BREAK, NORID,},\n+      {\"\", 0, 0},\n+      {\"friend\", SCSPEC, RID_FRIEND,},\n+      {\"and_eq\", ASSIGN, NORID,},\n+      {\"typedef\", SCSPEC, RID_TYPEDEF,},\n+      {\"\", 0, 0},\n+      {\"do\", DO, NORID,},\n+      {\"void\", TYPESPEC, RID_VOID,},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"const\", CV_QUALIFIER, RID_CONST,},\n+      {\"static\", SCSPEC, RID_STATIC,},\n+      {\"\", 0, 0},\n+      {\"__typeof\", TYPEOF, NORID},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"goto\", GOTO, NORID,},\n+      {\"\", 0, 0},\n+      {\"asm\", ASM_KEYWORD, NORID,},\n+      {\"operator\", OPERATOR, NORID,},\n+      {\"__signature__\", AGGR, RID_SIGNATURE\t/* Extension */,},\n+      {\"\", 0, 0},\n+      {\"mutable\", SCSPEC, RID_MUTABLE,},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"sigof\", SIGOF, NORID\t\t/* Extension */,},\n+      {\"class\", AGGR, RID_CLASS,},\n+      {\"compl\", '~', NORID,},\n+      {\"public\", VISSPEC, RID_PUBLIC,},\n+      {\"and\", ANDAND, NORID,},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"float\", TYPESPEC, RID_FLOAT,},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"default\", DEFAULT, NORID,},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"bitand\", '&', NORID,},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"catch\", CATCH, NORID,},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"auto\", SCSPEC, RID_AUTO,},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"const_cast\", CONST_CAST, NORID,},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"dynamic_cast\", DYNAMIC_CAST, NORID,}\n     };\n \n   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)\n@@ -225,7 +239,7 @@ is_reserved_word (str, len)\n         {\n           register char *s = wordlist[key].name;\n \n-          if (*s == *str && !strcmp (str + 1, s + 1))\n+          if (*str == *s && !strcmp (str + 1, s + 1))\n             return &wordlist[key];\n         }\n     }"}]}