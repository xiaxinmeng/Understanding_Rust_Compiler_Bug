{"sha": "1217ee06a77532a74cb869fa1feecf8866b2b584", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIxN2VlMDZhNzc1MzJhNzRjYjg2OWZhMWZlZWNmODg2NmIyYjU4NA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-01-17T21:10:15Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-01-17T21:10:15Z"}, "message": "set.h (set): Implement C++11 allocator-aware container requirements.\n\n2014-01-17  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/profile/set.h (set): Implement C++11 allocator-aware\n\tcontainer requirements.\n\t* include/profile/map.h (map): Likewise.\n\t* include/profile/multiset.h (multiset): Likewise.\n\t* include/profile/multimap.h (multimap): Likewise.\n\t* include/profile/set.h\n\t(set::operator=(const set&)): Define as default in C++11 mode.\n\t(set::operator=(set&&)): Likewise.\n\t* include/profile/map.h\n\t(map::operator=(const map&)): Likewise.\n\t(map::operator=(map&&)): Likewise.\n\t* include/profile/multiset.h\n\t(multiset::operator=(const multiset&)): Likewise.\n\t(multiset::operator=(multiset&&)): Likewise.\n\t* include/profile/multimap.h\n\t(multimap::operator=(const multimap&)): Likewise.\n\t(multimap::operator=(multimap&&)): Likewise.\n\t* include/profile/set.h (set::operator=(std::initializer_list<>)):\n\tRely on the same operator from normal mode.\n\t* include/profile/map.h (map::operator=(std::initializer_list<>)):\n\tLikewise.\n\t* include/profile/multiset.h\n\t(multiset::operator=(std::initializer_list<>)): Likewise.\n\t* include/profile/multimap.h\n\t(multimap::operator=(std::initializer_list<>)): Likewise.\n\t* include/profile/set.h (set::swap(set&)): Add noexcept\n\tspecification.\n\t* include/profile/map.h (map::swap(map&)): Likewise.\n\t* include/profile/multiset.h (multiset::swap(multiset&)): Likewise.\n\t* include/profile/multimap.h (multimap::swap(multimap&)): Likewise.\n\nFrom-SVN: r206733", "tree": {"sha": "104823751626c79f5057a834c6ecbf40c4a83f3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/104823751626c79f5057a834c6ecbf40c4a83f3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1217ee06a77532a74cb869fa1feecf8866b2b584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1217ee06a77532a74cb869fa1feecf8866b2b584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1217ee06a77532a74cb869fa1feecf8866b2b584", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1217ee06a77532a74cb869fa1feecf8866b2b584/comments", "author": null, "committer": null, "parents": [{"sha": "664ceb1e2c62338ceacbbc89d3e218f39965c145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664ceb1e2c62338ceacbbc89d3e218f39965c145", "html_url": "https://github.com/Rust-GCC/gccrs/commit/664ceb1e2c62338ceacbbc89d3e218f39965c145"}], "stats": {"total": 275, "additions": 198, "deletions": 77}, "files": [{"sha": "99acc888e719b407de0b409c6e7143fccc9c567c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1217ee06a77532a74cb869fa1feecf8866b2b584/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1217ee06a77532a74cb869fa1feecf8866b2b584/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1217ee06a77532a74cb869fa1feecf8866b2b584", "patch": "@@ -1,3 +1,36 @@\n+2014-01-17  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/profile/set.h (set): Implement C++11 allocator-aware\n+\tcontainer requirements.\n+\t* include/profile/map.h (map): Likewise.\n+\t* include/profile/multiset.h (multiset): Likewise.\n+\t* include/profile/multimap.h (multimap): Likewise.\n+\t* include/profile/set.h\n+\t(set::operator=(const set&)): Define as default in C++11 mode.\n+\t(set::operator=(set&&)): Likewise.\n+\t* include/profile/map.h\n+\t(map::operator=(const map&)): Likewise.\n+\t(map::operator=(map&&)): Likewise.\n+\t* include/profile/multiset.h\n+\t(multiset::operator=(const multiset&)): Likewise.\n+\t(multiset::operator=(multiset&&)): Likewise.\n+\t* include/profile/multimap.h\n+\t(multimap::operator=(const multimap&)): Likewise.\n+\t(multimap::operator=(multimap&&)): Likewise.\n+\t* include/profile/set.h (set::operator=(std::initializer_list<>)):\n+\tRely on the same operator from normal mode.\n+\t* include/profile/map.h (map::operator=(std::initializer_list<>)):\n+\tLikewise.\n+\t* include/profile/multiset.h\n+\t(multiset::operator=(std::initializer_list<>)): Likewise.\n+\t* include/profile/multimap.h\n+\t(multimap::operator=(std::initializer_list<>)): Likewise.\n+\t* include/profile/set.h (set::swap(set&)): Add noexcept\n+\tspecification.\n+\t* include/profile/map.h (map::swap(map&)): Likewise.\n+\t* include/profile/multiset.h (multiset::swap(multiset&)): Likewise.\n+\t* include/profile/multimap.h (multimap::swap(multimap&)): Likewise.\n+\n 2014-01-17  Tim Shen  <timshen91@gmail.com>\n \n \t* include/bits/regex_automaton.tcc (_StateSeq<>::_M_clone()): Do not"}, {"sha": "63fb0cbb227319db6cee9ea749becf2ffe080073", "filename": "libstdc++-v3/include/profile/map.h", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1217ee06a77532a74cb869fa1feecf8866b2b584/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1217ee06a77532a74cb869fa1feecf8866b2b584/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h?ref=1217ee06a77532a74cb869fa1feecf8866b2b584", "patch": "@@ -43,6 +43,10 @@ namespace __profile\n     {\n       typedef _GLIBCXX_STD_C::map<_Key, _Tp, _Compare, _Allocator> _Base;\n \n+#if __cplusplus >= 201103L\n+      typedef __gnu_cxx::__alloc_traits<_Allocator> _Alloc_traits;\n+#endif\n+\n     public:\n       // types:\n       typedef _Key                                  key_type;\n@@ -93,40 +97,61 @@ namespace __profile\n       map(map&& __x)\n       noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _Base(std::move(__x))\n-      { }\n+      { __profcxx_map_to_unordered_map_construct(this); }\n \n       map(initializer_list<value_type> __l,\n \t  const _Compare& __c = _Compare(),\n \t  const allocator_type& __a = allocator_type())\n-      : _Base(__l, __c, __a) { }\n+      : _Base(__l, __c, __a)\n+      { __profcxx_map_to_unordered_map_construct(this); }\n+\n+      explicit\n+      map(const allocator_type& __a)\n+\t: _Base(__a)\n+      { __profcxx_map_to_unordered_map_construct(this); }\n+\n+      map(const map& __x, const allocator_type& __a)\n+      : _Base(__x, __a)\n+      { __profcxx_map_to_unordered_map_construct(this); }\n+\n+      map(map&& __x, const allocator_type& __a)\n+      noexcept(is_nothrow_copy_constructible<_Compare>::value\n+\t       && _Alloc_traits::_S_always_equal())\n+      : _Base(std::move(__x), __a)\n+      { __profcxx_map_to_unordered_map_construct(this); }\n+\n+      map(initializer_list<value_type> __l, const allocator_type& __a)\n+      : _Base(__l, __a)\n+      { __profcxx_map_to_unordered_map_construct(this); }\n+\n+      template<typename _InputIterator>\n+        map(_InputIterator __first, _InputIterator __last,\n+\t    const allocator_type& __a)\n+\t  : _Base(__first, __last, __a)\n+      { __profcxx_map_to_unordered_map_construct(this); }\n #endif\n \n       ~map() _GLIBCXX_NOEXCEPT\n       { __profcxx_map_to_unordered_map_destruct(this); }\n \n+#if __cplusplus < 201103L\n       map&\n       operator=(const map& __x)\n       {\n-\t*static_cast<_Base*>(this) = __x;\n+\t_M_base() = __x;\n \treturn *this;\n       }\n+#else\n+      map&\n+      operator=(const map&) = default;\n \n-#if __cplusplus >= 201103L\n       map&\n-      operator=(map&& __x)\n-      {\n-\t// NB: DR 1204.\n-\t// NB: DR 675.\n-\tthis->clear();\n-\tthis->swap(__x);\n-\treturn *this;\n-      }\n+      operator=(map&&) = default;\n \n       map&\n       operator=(initializer_list<value_type> __l)\n       {\n-\tthis->clear();\n-\tthis->insert(__l);\n+\t_M_base() = __l;\n \treturn *this;\n       }\n #endif\n@@ -393,6 +418,9 @@ namespace __profile\n \n       void\n       swap(map& __x)\n+#if __cplusplus >= 201103L\n+      noexcept(_Alloc_traits::_S_nothrow_swap())\n+#endif\n       { _Base::swap(__x); }\n \n       void"}, {"sha": "4a703ce36365b01ae2b74aada2c2faac274b032e", "filename": "libstdc++-v3/include/profile/multimap.h", "status": "modified", "additions": 41, "deletions": 21, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1217ee06a77532a74cb869fa1feecf8866b2b584/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1217ee06a77532a74cb869fa1feecf8866b2b584/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h?ref=1217ee06a77532a74cb869fa1feecf8866b2b584", "patch": "@@ -43,6 +43,10 @@ namespace __profile\n     {\n       typedef _GLIBCXX_STD_C::multimap<_Key, _Tp, _Compare, _Allocator> _Base;\n \n+#if __cplusplus >= 201103L\n+      typedef __gnu_cxx::__alloc_traits<_Allocator> _Alloc_traits;\n+#endif\n+\n     public:\n       // types:\n       typedef _Key\t\t\t\t     key_type;\n@@ -79,49 +83,62 @@ namespace __profile\n \t       const _Allocator& __a = _Allocator())\n       : _Base(__first, __last, __comp, __a) { }\n \n+#if __cplusplus < 201103L\n       multimap(const multimap& __x)\n       : _Base(__x) { }\n-\n-      multimap(const _Base& __x)\n-      : _Base(__x) { }\n-\n-#if __cplusplus >= 201103L\n-      multimap(multimap&& __x)\n-      noexcept(is_nothrow_copy_constructible<_Compare>::value)\n-      : _Base(std::move(__x))\n-      { }\n+#else\n+      multimap(const multimap&) = default;\n+      multimap(multimap&&) = default;\n \n       multimap(initializer_list<value_type> __l,\n \t       const _Compare& __c = _Compare(),\n \t       const allocator_type& __a = allocator_type())\n       : _Base(__l, __c, __a) { }\n+\n+      explicit\n+      multimap(const allocator_type& __a)\n+\t: _Base(__a) { }\n+\n+      multimap(const multimap& __x, const allocator_type& __a)\n+      : _Base(__x, __a) { }\n+\n+      multimap(multimap&& __x, const allocator_type& __a)\n+      noexcept(is_nothrow_copy_constructible<_Compare>::value\n+\t       && _Alloc_traits::_S_always_equal())\n+      : _Base(std::move(__x), __a) { }\n+\n+      multimap(initializer_list<value_type> __l, const allocator_type& __a)\n+      : _Base(__l, __a) { }\n+\n+      template<typename _InputIterator>\n+        multimap(_InputIterator __first, _InputIterator __last,\n+\t    const allocator_type& __a)\n+\t  : _Base(__first, __last, __a) { }\n #endif\n \n+      multimap(const _Base& __x)\n+      : _Base(__x) { }\n+\n       ~multimap() _GLIBCXX_NOEXCEPT { }\n \n+#if __cplusplus < 201103L\n       multimap&\n       operator=(const multimap& __x)\n       {\n-\t*static_cast<_Base*>(this) = __x;\n+\t_M_base() = __x;\n \treturn *this;\n       }\n+#else\n+      multimap&\n+      operator=(const multimap&) = default;\n \n-#if __cplusplus >= 201103L\n       multimap&\n-      operator=(multimap&& __x)\n-      {\n-\t// NB: DR 1204.\n-\t// NB: DR 675.\n-\tthis->clear();\n-\tthis->swap(__x);\n-\treturn *this;\n-      }\n+      operator=(multimap&&) = default;\n \n       multimap&\n       operator=(initializer_list<value_type> __l)\n       {\n-\tthis->clear();\n-\tthis->insert(__l);\n+\t_M_base() = __l;\n \treturn *this;\n       }\n #endif\n@@ -289,6 +306,9 @@ namespace __profile\n \n       void\n       swap(multimap& __x)\n+#if __cplusplus >= 201103L\n+      noexcept(_Alloc_traits::_S_nothrow_swap())\n+#endif\n       { _Base::swap(__x); }\n \n       void"}, {"sha": "1719728a26f833cb6af52dabac7dd0c62d24ec8e", "filename": "libstdc++-v3/include/profile/multiset.h", "status": "modified", "additions": 41, "deletions": 21, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1217ee06a77532a74cb869fa1feecf8866b2b584/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1217ee06a77532a74cb869fa1feecf8866b2b584/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h?ref=1217ee06a77532a74cb869fa1feecf8866b2b584", "patch": "@@ -43,6 +43,10 @@ namespace __profile\n     {\n       typedef _GLIBCXX_STD_C::multiset<_Key, _Compare, _Allocator> _Base;\n \n+#if __cplusplus >= 201103L\n+      typedef __gnu_cxx::__alloc_traits<_Allocator> _Alloc_traits;\n+#endif\n+\n     public:\n       // types:\n       typedef _Key\t\t\t\t     key_type;\n@@ -79,49 +83,62 @@ namespace __profile\n \t\t const _Allocator& __a = _Allocator())\n \t: _Base(__first, __last, __comp, __a) { }\n \n+#if __cplusplus < 201103L\n       multiset(const multiset& __x)\n       : _Base(__x) { }\n-\n-      multiset(const _Base& __x)\n-      : _Base(__x) { }\n-\n-#if __cplusplus >= 201103L\n-      multiset(multiset&& __x)\n-      noexcept(is_nothrow_copy_constructible<_Compare>::value)\n-      : _Base(std::move(__x))\n-      { }\n+#else\n+      multiset(const multiset&) = default;\n+      multiset(multiset&&) = default;\n \n       multiset(initializer_list<value_type> __l,\n \t       const _Compare& __comp = _Compare(),\n \t       const allocator_type& __a = allocator_type())\n       : _Base(__l, __comp, __a) { }\n+\n+      explicit\n+      multiset(const allocator_type& __a)\n+\t: _Base(__a) { }\n+\n+      multiset(const multiset& __x, const allocator_type& __a)\n+      : _Base(__x, __a) { }\n+\n+      multiset(multiset&& __x, const allocator_type& __a)\n+      noexcept(is_nothrow_copy_constructible<_Compare>::value\n+\t       && _Alloc_traits::_S_always_equal())\n+      : _Base(std::move(__x), __a) { }\n+\n+      multiset(initializer_list<value_type> __l, const allocator_type& __a)\n+      : _Base(__l, __a) { }\n+\n+      template<typename _InputIterator>\n+        multiset(_InputIterator __first, _InputIterator __last,\n+\t    const allocator_type& __a)\n+\t  : _Base(__first, __last, __a) { }\n #endif\n \n+      multiset(const _Base& __x)\n+      : _Base(__x) { }\n+\n       ~multiset() _GLIBCXX_NOEXCEPT { }\n \n+#if __cplusplus < 201103L\n       multiset&\n       operator=(const multiset& __x)\n       {\n-\t*static_cast<_Base*>(this) = __x;\n+\t_M_base() = __x;\n \treturn *this;\n       }\n+#else\n+      multiset&\n+      operator=(const multiset&) = default;\n \n-#if __cplusplus >= 201103L\n       multiset&\n-      operator=(multiset&& __x)\n-      {\n-\t// NB: DR 1204.\n-\t// NB: DR 675.\n-\tthis->clear();\n-\tthis->swap(__x);\n-\treturn *this;\n-      }\n+      operator=(multiset&&) = default;\n \n       multiset&\n       operator=(initializer_list<value_type> __l)\n       {\n-\tthis->clear();\n-\tthis->insert(__l);\n+\t_M_base() = __l;\n \treturn *this;\n       }\n #endif\n@@ -272,6 +289,9 @@ namespace __profile\n \n       void\n       swap(multiset& __x)\n+#if __cplusplus >= 201103L\n+      noexcept(_Alloc_traits::_S_nothrow_swap())\n+#endif\n       { _Base::swap(__x); }\n \n       void"}, {"sha": "3b8fd55d444b91fad9bc6c2948d965f7a21c8df1", "filename": "libstdc++-v3/include/profile/set.h", "status": "modified", "additions": 41, "deletions": 21, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1217ee06a77532a74cb869fa1feecf8866b2b584/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1217ee06a77532a74cb869fa1feecf8866b2b584/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h?ref=1217ee06a77532a74cb869fa1feecf8866b2b584", "patch": "@@ -43,6 +43,10 @@ namespace __profile\n     {\n       typedef _GLIBCXX_STD_C::set<_Key, _Compare, _Allocator> _Base;\n \n+#if __cplusplus >= 201103L\n+      typedef __gnu_cxx::__alloc_traits<_Allocator> _Alloc_traits;\n+#endif\n+\n     public:\n       // types:\n       typedef _Key\t\t\t\t    key_type;\n@@ -79,49 +83,62 @@ namespace __profile\n \t    const _Allocator& __a = _Allocator())\n \t: _Base(__first, __last, __comp, __a) { }\n \n+#if __cplusplus < 201103L\n       set(const set& __x)\n       : _Base(__x) { }\n-\n-      set(const _Base& __x)\n-      : _Base(__x) { }\n-\n-#if __cplusplus >= 201103L\n-      set(set&& __x)\n-      noexcept(is_nothrow_copy_constructible<_Compare>::value)\n-      : _Base(std::move(__x))\n-      { }\n+#else\n+      set(const set&) = default;\n+      set(set&&) = default;\n \n       set(initializer_list<value_type> __l,\n \t  const _Compare& __comp = _Compare(),\n \t  const allocator_type& __a = allocator_type())\n       : _Base(__l, __comp, __a) { }\n+\n+      explicit\n+      set(const allocator_type& __a)\n+\t: _Base(__a) { }\n+\n+      set(const set& __x, const allocator_type& __a)\n+      : _Base(__x, __a) { }\n+\n+      set(set&& __x, const allocator_type& __a)\n+      noexcept(is_nothrow_copy_constructible<_Compare>::value\n+\t       && _Alloc_traits::_S_always_equal())\n+      : _Base(std::move(__x), __a) { }\n+\n+      set(initializer_list<value_type> __l, const allocator_type& __a)\n+      : _Base(__l, __a) { }\n+\n+      template<typename _InputIterator>\n+        set(_InputIterator __first, _InputIterator __last,\n+\t    const allocator_type& __a)\n+\t  : _Base(__first, __last, __a) { }\n #endif\n \n+      set(const _Base& __x)\n+      : _Base(__x) { }\n+\n       ~set() _GLIBCXX_NOEXCEPT { }\n \n+#if __cplusplus < 201103L\n       set&\n       operator=(const set& __x)\n       {\n-\t*static_cast<_Base*>(this) = __x;\n+\t_M_base() = __x;\n \treturn *this;\n       }\n+#else\n+      set&\n+      operator=(const set&) = default;\n \n-#if __cplusplus >= 201103L\n       set&\n-      operator=(set&& __x)\n-      {\n-\t// NB: DR 1204.\n-\t// NB: DR 675.\n-\tthis->clear();\n-\tthis->swap(__x);\n-\treturn *this;\n-      }\n+      operator=(set&&) = default;\n \n       set&\n       operator=(initializer_list<value_type> __l)\n       {\n-\tthis->clear();\n-\tthis->insert(__l);\n+\t_M_base() = __l;\n \treturn *this;\n       }\n #endif\n@@ -286,6 +303,9 @@ namespace __profile\n \n       void\n       swap(set& __x)\n+#if __cplusplus >= 201103L\n+      noexcept(_Alloc_traits::_S_nothrow_swap())\n+#endif\n       { _Base::swap(__x); }\n \n       void"}]}