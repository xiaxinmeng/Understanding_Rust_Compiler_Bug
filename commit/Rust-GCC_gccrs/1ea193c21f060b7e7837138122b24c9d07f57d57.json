{"sha": "1ea193c21f060b7e7837138122b24c9d07f57d57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVhMTkzYzIxZjA2MGI3ZTc4MzcxMzgxMjJiMjRjOWQwN2Y1N2Q1Nw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2008-01-18T15:25:02Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2008-01-18T15:25:02Z"}, "message": "re PR c++/33407 (C++ operator new and new expression do not change dynamic type)\n\n\tPR c++/33407\n./:\t* tree.h (DECL_IS_OPERATOR_NEW): Define.\n\t(struct tree_function_decl): Add new field operator_new_flag.\n\t* tree-inline.c (expand_call_inline): When inlining a call to\n\toperator new, force the return value to go into a variable, and\n\tset DECL_NO_TBAA_P on that variable.\n\t* c-decl.c (merge_decls): Merge DECL_IS_OPERATOR_NEW flag.\ncp/:\n\t* decl.c (duplicate_decls): Copy DECL_IS_OPERATOR_NEW flag.\n\t(grok_op_properties): For NEW_EXPR and VEC_NEW_EXPR set\n\tDECL_IS_OPERATOR_NEW flag.\ntestsuite/:\n\t* g++.dg/init/new26.C: New test.\n\nFrom-SVN: r131629", "tree": {"sha": "f599ef6905608f93f1d83e94f82e9ef89480d5b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f599ef6905608f93f1d83e94f82e9ef89480d5b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ea193c21f060b7e7837138122b24c9d07f57d57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea193c21f060b7e7837138122b24c9d07f57d57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ea193c21f060b7e7837138122b24c9d07f57d57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea193c21f060b7e7837138122b24c9d07f57d57/comments", "author": null, "committer": null, "parents": [{"sha": "c27fb14bda0b2c82c0fe8413e3e2f805c1d58975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c27fb14bda0b2c82c0fe8413e3e2f805c1d58975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c27fb14bda0b2c82c0fe8413e3e2f805c1d58975"}], "stats": {"total": 117, "additions": 108, "deletions": 9}, "files": [{"sha": "a4c939c813ead3ee29e22cd02f35901cfc200f4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea193c21f060b7e7837138122b24c9d07f57d57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea193c21f060b7e7837138122b24c9d07f57d57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ea193c21f060b7e7837138122b24c9d07f57d57", "patch": "@@ -1,3 +1,13 @@\n+2008-01-18  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR c++/33407\n+\t* tree.h (DECL_IS_OPERATOR_NEW): Define.\n+\t(struct tree_function_decl): Add new field operator_new_flag.\n+\t* tree-inline.c (expand_call_inline): When inlining a call to\n+\toperator new, force the return value to go into a variable, and\n+\tset DECL_NO_TBAA_P on that variable.\n+\t* c-decl.c (merge_decls): Merge DECL_IS_OPERATOR_NEW flag.\n+\n 2008-01-18  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR debug/34484"}, {"sha": "860b337fc958124875a021cd4ef2fe864e36fba8", "filename": "gcc/c-decl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea193c21f060b7e7837138122b24c9d07f57d57/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea193c21f060b7e7837138122b24c9d07f57d57/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=1ea193c21f060b7e7837138122b24c9d07f57d57", "patch": "@@ -1,6 +1,7 @@\n /* Process declarations and variables for C compiler.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1740,6 +1741,7 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t  TREE_THIS_VOLATILE (newdecl) |= TREE_THIS_VOLATILE (olddecl);\n \t  TREE_READONLY (newdecl) |= TREE_READONLY (olddecl);\n \t  DECL_IS_MALLOC (newdecl) |= DECL_IS_MALLOC (olddecl);\n+\t  DECL_IS_OPERATOR_NEW (newdecl) |= DECL_IS_OPERATOR_NEW (olddecl);\n \t  DECL_IS_PURE (newdecl) |= DECL_IS_PURE (olddecl);\n \t  DECL_IS_NOVOPS (newdecl) |= DECL_IS_NOVOPS (olddecl);\n \t}"}, {"sha": "91909a1fb1ffc9e0390d72090168079850b516e8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea193c21f060b7e7837138122b24c9d07f57d57/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea193c21f060b7e7837138122b24c9d07f57d57/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1ea193c21f060b7e7837138122b24c9d07f57d57", "patch": "@@ -1,3 +1,10 @@\n+2008-01-18  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR c++/33407\n+\t* decl.c (duplicate_decls): Copy DECL_IS_OPERATOR_NEW flag.\n+\t(grok_op_properties): For NEW_EXPR and VEC_NEW_EXPR set\n+\tDECL_IS_OPERATOR_NEW flag.\n+\n 2008-01-16  Richard Guenther  <rguenther@suse.de>\n \n \tPR c++/33819"}, {"sha": "4b2a55fe11f62fa05da8169244f937cb14031617", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea193c21f060b7e7837138122b24c9d07f57d57/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea193c21f060b7e7837138122b24c9d07f57d57/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1ea193c21f060b7e7837138122b24c9d07f57d57", "patch": "@@ -1,6 +1,7 @@\n /* Process declarations and variables for C++ compiler.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007  Free Software Foundation, Inc.\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GCC.\n@@ -1804,6 +1805,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  TREE_READONLY (newdecl) |= TREE_READONLY (olddecl);\n \t  TREE_NOTHROW (newdecl) |= TREE_NOTHROW (olddecl);\n \t  DECL_IS_MALLOC (newdecl) |= DECL_IS_MALLOC (olddecl);\n+\t  DECL_IS_OPERATOR_NEW (newdecl) |= DECL_IS_OPERATOR_NEW (olddecl);\n \t  DECL_IS_PURE (newdecl) |= DECL_IS_PURE (olddecl);\n \t  /* Keep the old RTL.  */\n \t  COPY_DECL_RTL (olddecl, newdecl);\n@@ -9761,7 +9763,10 @@ grok_op_properties (tree decl, bool complain)\n     }\n \n   if (operator_code == NEW_EXPR || operator_code == VEC_NEW_EXPR)\n-    TREE_TYPE (decl) = coerce_new_type (TREE_TYPE (decl));\n+    {\n+      TREE_TYPE (decl) = coerce_new_type (TREE_TYPE (decl));\n+      DECL_IS_OPERATOR_NEW (decl) = 1;\n+    }\n   else if (operator_code == DELETE_EXPR || operator_code == VEC_DELETE_EXPR)\n     TREE_TYPE (decl) = coerce_delete_type (TREE_TYPE (decl));\n   else"}, {"sha": "cc3ec9c2a3bf1992d5b61d311da9734875a42880", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea193c21f060b7e7837138122b24c9d07f57d57/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea193c21f060b7e7837138122b24c9d07f57d57/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ea193c21f060b7e7837138122b24c9d07f57d57", "patch": "@@ -1,3 +1,8 @@\n+2008-01-18  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR c++/33407\n+\t* g++.dg/init/new26.C: New test.\n+\n 2008-01-18  Richard Guenther   <rguenther@suse.de>\n \n \tPR middle-end/34801"}, {"sha": "541de3058e10a09057c4effd5004efbca780d673", "filename": "gcc/testsuite/g++.dg/init/new26.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea193c21f060b7e7837138122b24c9d07f57d57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea193c21f060b7e7837138122b24c9d07f57d57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew26.C?ref=1ea193c21f060b7e7837138122b24c9d07f57d57", "patch": "@@ -0,0 +1,44 @@\n+// PR c++/33407\n+// { dg-do run }\n+// { dg-options \"-O2 -fstrict-aliasing\" }\n+\n+extern \"C\" void * malloc(__SIZE_TYPE__);\n+extern \"C\" void abort(void);\n+\n+void *p;\n+void __attribute__((noinline)) init(void)\n+{\n+  p = malloc(4);\n+}\n+\n+inline void *operator new(__SIZE_TYPE__)\n+{\n+  return p;\n+}\n+\n+inline void operator delete (void*) {}\n+\n+int * __attribute__((noinline)) doit(int n)\n+{\n+  float *q;\n+  int *r;\n+\n+  for (int i=0; i<n; ++i)\n+  {\n+    q = new float;\n+    *q = 1.0;\n+    delete q;\n+    r = new int;\n+    *r = 1;\n+  }\n+\n+  return r;\n+}\n+\n+int main()\n+{\n+  init();\n+  if (*doit(1) != 1)\n+    abort();\n+  return 0;\n+}"}, {"sha": "1fe084752bb04bf9b8406363ce60350384bc78dc", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea193c21f060b7e7837138122b24c9d07f57d57/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea193c21f060b7e7837138122b24c9d07f57d57/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=1ea193c21f060b7e7837138122b24c9d07f57d57", "patch": "@@ -2567,7 +2567,7 @@ expand_call_inline (basic_block bb, tree stmt, tree *tp, void *data)\n {\n   copy_body_data *id;\n   tree t;\n-  tree use_retvar;\n+  tree retvar, use_retvar;\n   tree fn;\n   struct pointer_map_t *st;\n   tree return_slot;\n@@ -2769,9 +2769,27 @@ expand_call_inline (basic_block bb, tree stmt, tree *tp, void *data)\n   else\n     modify_dest = NULL;\n \n+  /* If we are inlining a call to the C++ operator new, we don't want\n+     to use type based alias analysis on the return value.  Otherwise\n+     we may get confused if the compiler sees that the inlined new\n+     function returns a pointer which was just deleted.  See bug\n+     33407.  */\n+  if (DECL_IS_OPERATOR_NEW (fn))\n+    {\n+      return_slot = NULL;\n+      modify_dest = NULL;\n+    }\n+\n   /* Declare the return variable for the function.  */\n-  declare_return_variable (id, return_slot,\n-\t\t\t   modify_dest, &use_retvar);\n+  retvar = declare_return_variable (id, return_slot,\n+\t\t\t\t    modify_dest, &use_retvar);\n+\n+  if (DECL_IS_OPERATOR_NEW (fn))\n+    {\n+      gcc_assert (TREE_CODE (retvar) == VAR_DECL\n+\t\t  && POINTER_TYPE_P (TREE_TYPE (retvar)));\n+      DECL_NO_TBAA_P (retvar) = 1;\n+    }\n \n   /* This is it.  Duplicate the callee body.  Assume callee is\n      pre-gimplified.  Note that we must not alter the caller"}, {"sha": "52cb97317301fea40f674d63b8bbc90fc4adb6d3", "filename": "gcc/tree.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea193c21f060b7e7837138122b24c9d07f57d57/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea193c21f060b7e7837138122b24c9d07f57d57/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1ea193c21f060b7e7837138122b24c9d07f57d57", "patch": "@@ -1,6 +1,7 @@\n /* Front-end tree definitions for GNU compiler.\n    Copyright (C) 1989, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -3241,6 +3242,12 @@ struct tree_decl_non_common GTY(())\n    not an alias.  */\n #define DECL_IS_MALLOC(NODE) (FUNCTION_DECL_CHECK (NODE)->function_decl.malloc_flag)\n \n+/* Nonzero in a FUNCTION_DECL means this function should be treated as\n+   C++ operator new, meaning that it returns a pointer for which we\n+   should not use type based aliasing.  */\n+#define DECL_IS_OPERATOR_NEW(NODE) \\\n+  (FUNCTION_DECL_CHECK (NODE)->function_decl.operator_new_flag)\n+\n /* Nonzero in a FUNCTION_DECL means this function may return more\n    than once.  */\n #define DECL_IS_RETURNS_TWICE(NODE) \\\n@@ -3345,16 +3352,17 @@ struct tree_function_decl GTY(())\n   unsigned novops_flag : 1;\n   unsigned returns_twice_flag : 1;\n   unsigned malloc_flag : 1;\n+  unsigned operator_new_flag : 1;\n   unsigned pure_flag : 1;\n   unsigned declared_inline_flag : 1;\n   unsigned regdecl_flag : 1;\n-  unsigned inline_flag : 1;\n \n+  unsigned inline_flag : 1;\n   unsigned no_instrument_function_entry_exit : 1;\n   unsigned no_limit_stack : 1;\n   unsigned disregard_inline_limits : 1;\n \n-  /* 5 bits left */\n+  /* 4 bits left */\n };\n \n /* For a TYPE_DECL, holds the \"original\" type.  (TREE_TYPE has the copy.) */"}]}