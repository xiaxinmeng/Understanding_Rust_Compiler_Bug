{"sha": "abcd9db2c8326a00f5d08d7ce08a382eb9b17120", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJjZDlkYjJjODMyNmEwMGY1ZDA4ZDdjZTA4YTM4MmViOWIxNzEyMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T07:45:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T07:45:36Z"}, "message": "[multiple changes]\n\n2011-08-03  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb (Optimize_Length_Check): Fix bad handling of case where\n\tcomparison operand is variable, and turns out to be zero or negative.\n\n2011-08-03  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_intr.adb\n\t(Expand_Dispatching_Constructor_Call): Disable expansion of\n\tcode required for native targets. Done to avoid generating\n\treferences to unavailable runtime entities in VM targets.\n\t* exp_ch3.adb\n\t(Expand_N_Object_Declaration): Add missing support to handle\n\tthe explicit initialization of class-wide interface objects.\n\tFix documentation.\n\n2011-08-03  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-cobove.adb (Merge): Move source onto target, instead of using Assign\n\n2011-08-03  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-cbdlli.adb (Splice): move source items from first to last\n\n2011-08-03  Yannick Moy  <moy@adacore.com>\n\n\t* sem_util.ads: comment added.\n\n2011-08-03  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_aggr.adb\n\t(Expand_Record_Aggregate): In VM targets disable the expansion into\n\tassignments of aggregates whose type is not known at compile time.\n\nFrom-SVN: r177233", "tree": {"sha": "5d30ddc00e27133f5b6801cc2042c13d19214134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d30ddc00e27133f5b6801cc2042c13d19214134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abcd9db2c8326a00f5d08d7ce08a382eb9b17120", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abcd9db2c8326a00f5d08d7ce08a382eb9b17120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abcd9db2c8326a00f5d08d7ce08a382eb9b17120", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abcd9db2c8326a00f5d08d7ce08a382eb9b17120/comments", "author": null, "committer": null, "parents": [{"sha": "b474d6c3f1ea034da14d20a52f183e4a1a0e7b87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b474d6c3f1ea034da14d20a52f183e4a1a0e7b87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b474d6c3f1ea034da14d20a52f183e4a1a0e7b87"}], "stats": {"total": 127, "additions": 92, "deletions": 35}, "files": [{"sha": "64dd7442b5e00c9a6a7bd2b4d27a3c8ba168a50f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcd9db2c8326a00f5d08d7ce08a382eb9b17120/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcd9db2c8326a00f5d08d7ce08a382eb9b17120/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=abcd9db2c8326a00f5d08d7ce08a382eb9b17120", "patch": "@@ -1,3 +1,37 @@\n+2011-08-03  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb (Optimize_Length_Check): Fix bad handling of case where\n+\tcomparison operand is variable, and turns out to be zero or negative.\n+\n+2011-08-03  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_intr.adb\n+\t(Expand_Dispatching_Constructor_Call): Disable expansion of\n+\tcode required for native targets. Done to avoid generating\n+\treferences to unavailable runtime entities in VM targets.\n+\t* exp_ch3.adb\n+\t(Expand_N_Object_Declaration): Add missing support to handle\n+\tthe explicit initialization of class-wide interface objects.\n+\tFix documentation.\n+\n+2011-08-03  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-cobove.adb (Merge): Move source onto target, instead of using Assign\n+\n+2011-08-03  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-cbdlli.adb (Splice): move source items from first to last\n+\n+2011-08-03  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.ads: comment added.\n+\n+2011-08-03  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_aggr.adb\n+\t(Expand_Record_Aggregate): In VM targets disable the expansion into\n+\tassignments of aggregates whose type is not known at compile time.\n+\n 2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch9.adb (Build_Renamed_Formal_Declaration): common procedure for"}, {"sha": "61615a0c89bbd3bc978599a46b28cec2dbe30394", "filename": "gcc/ada/a-cbdlli.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcd9db2c8326a00f5d08d7ce08a382eb9b17120/gcc%2Fada%2Fa-cbdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcd9db2c8326a00f5d08d7ce08a382eb9b17120/gcc%2Fada%2Fa-cbdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbdlli.adb?ref=abcd9db2c8326a00f5d08d7ce08a382eb9b17120", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1486,10 +1486,9 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n            \"attempt to tamper with cursors of Source (list is busy)\";\n       end if;\n \n-      loop\n-         Insert (Target, Before, Source.Nodes (Source.Last).Element);\n-         Delete_Last (Source);\n-         exit when Is_Empty (Source);\n+      while not Is_Empty (Source) loop\n+         Insert (Target, Before, Source.Nodes (Source.First).Element);\n+         Delete_First (Source);\n       end loop;\n    end Splice;\n "}, {"sha": "eaef697d36cda53d5b6c2e613604564459cd0b56", "filename": "gcc/ada/a-cobove.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcd9db2c8326a00f5d08d7ce08a382eb9b17120/gcc%2Fada%2Fa-cobove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcd9db2c8326a00f5d08d7ce08a382eb9b17120/gcc%2Fada%2Fa-cobove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cobove.adb?ref=abcd9db2c8326a00f5d08d7ce08a382eb9b17120", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -762,7 +762,7 @@ package body Ada.Containers.Bounded_Vectors is\n \n       begin\n          if Target.Is_Empty then\n-            Target.Assign (Source);\n+            Move (Target => Target, Source => Source);\n             return;\n          end if;\n "}, {"sha": "079db9c9564e2fc865f8ac2723c4fd3eb84364e0", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcd9db2c8326a00f5d08d7ce08a382eb9b17120/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcd9db2c8326a00f5d08d7ce08a382eb9b17120/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=abcd9db2c8326a00f5d08d7ce08a382eb9b17120", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -5649,7 +5649,9 @@ package body Exp_Aggr is\n       --  Gigi doesn't handle properly temporaries of variable size\n       --  so we generate it in the front-end\n \n-      elsif not Size_Known_At_Compile_Time (Typ) then\n+      elsif not Size_Known_At_Compile_Time (Typ)\n+        and then Tagged_Type_Expansion\n+      then\n          Convert_To_Assignments (N, Typ);\n \n       --  Temporaries for controlled aggregates need to be attached to a"}, {"sha": "fc999c6d4d6471de5865bace968513dc209fbb6f", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcd9db2c8326a00f5d08d7ce08a382eb9b17120/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcd9db2c8326a00f5d08d7ce08a382eb9b17120/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=abcd9db2c8326a00f5d08d7ce08a382eb9b17120", "patch": "@@ -4477,14 +4477,6 @@ package body Exp_Ch3 is\n    -- Expand_N_Object_Declaration --\n    ---------------------------------\n \n-   --  First we do special processing for objects of a tagged type where this\n-   --  is the point at which the type is frozen. The creation of the dispatch\n-   --  table and the initialization procedure have to be deferred to this\n-   --  point, since we reference previously declared primitive subprograms.\n-\n-   --  The above comment is in the wrong place, it should be at the proper\n-   --  point in this routine ???\n-\n    procedure Expand_N_Object_Declaration (N : Node_Id) is\n       Def_Id   : constant Entity_Id  := Defining_Identifier (N);\n       Expr     : constant Node_Id    := Expression (N);\n@@ -4528,6 +4520,12 @@ package body Exp_Ch3 is\n          return;\n       end if;\n \n+      --  First we do special processing for objects of a tagged type where\n+      --  this is the point at which the type is frozen. The creation of the\n+      --  dispatch table and the initialization procedure have to be deferred\n+      --  to this point, since we reference previously declared primitive\n+      --  subprograms.\n+\n       --  Force construction of dispatch tables of library level tagged types\n \n       if Tagged_Type_Expansion\n@@ -4993,11 +4991,33 @@ package body Exp_Ch3 is\n                   Set_Homonym (Defining_Identifier (N), Homonym (Def_Id));\n                   Exchange_Entities (Defining_Identifier (N), Def_Id);\n                end;\n+\n+            --  Handle initialization of class-wide interface object in VM\n+            --  targets\n+\n+            elsif not Tagged_Type_Expansion then\n+\n+               --  Replace\n+               --     CW : I'Class := Obj;\n+               --  by\n+               --     CW : I'Class;\n+               --     CW := I'Class (Obj); [1]\n+\n+               --  The assignment [1] is later expanded in a dispatching\n+               --  call to _assign\n+\n+               Set_Expression (N, Empty);\n+\n+               Insert_Action (N,\n+                 Make_Assignment_Statement (Loc,\n+                   Name       => New_Reference_To (Def_Id, Loc),\n+                   Expression => Convert_To (Typ,\n+                                   Relocate_Node (Expr))));\n             end if;\n \n             return;\n \n-         --  Comment needed here, what case is this???\n+         --  Common case of explicit object initialization\n \n          else\n             --  In most cases, we must check that the initial value meets any"}, {"sha": "0298487256ece53f77751e14125abc1c2512217e", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcd9db2c8326a00f5d08d7ce08a382eb9b17120/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcd9db2c8326a00f5d08d7ce08a382eb9b17120/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=abcd9db2c8326a00f5d08d7ce08a382eb9b17120", "patch": "@@ -10209,11 +10209,11 @@ package body Exp_Ch4 is\n       --  Kind of comparison operator, gets flipped if operands backwards\n \n       function Is_Optimizable (N : Node_Id) return Boolean;\n-      --  Tests N to see if it is an optimizable comparison value (defined\n-      --  as constant zero or one, or something else where the value is known\n-      --  to be in range of 32-bits, and where the corresponding Length value\n-      --  is also known to be 32-bits. If result is true, sets Is_Zero, Ityp,\n-      --  and Comp accordingly.\n+      --  Tests N to see if it is an optimizable comparison value (defined as\n+      --  constant zero or one, or something else where the value is known to\n+      --  be positive and in the range of 32-bits, and where the corresponding\n+      --  Length value is also known to be 32-bits. If result is true, sets\n+      --  Is_Zero, Ityp, and Comp accordingly.\n \n       function Is_Entity_Length (N : Node_Id) return Boolean;\n       --  Tests if N is a length attribute applied to a simple entity. If so,\n@@ -10293,14 +10293,14 @@ package body Exp_Ch4 is\n          Determine_Range (N, OK, Lo, Hi, Assume_Valid => True);\n \n          if not OK\n-           or else Lo < UI_From_Int (Int'First)\n+           or else Lo < Uint_1\n            or else Hi > UI_From_Int (Int'Last)\n          then\n             return False;\n          end if;\n \n-         --  Comparison value was within 32-bits, so now we must check the\n-         --  index value to make sure it is also within 32-bits.\n+         --  Comparison value was within range, so now we must check the index\n+         --  value to make sure it is also within 32-bits.\n \n          Indx := First_Index (Etype (Ent));\n "}, {"sha": "dff0044f935ad9bede0df2fc7fef6979ed78e5d6", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcd9db2c8326a00f5d08d7ce08a382eb9b17120/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcd9db2c8326a00f5d08d7ce08a382eb9b17120/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=abcd9db2c8326a00f5d08d7ce08a382eb9b17120", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -233,6 +233,7 @@ package body Exp_Intr is\n \n          if not Is_Ancestor (Etype (Result_Typ), Etype (Tag_Arg),\n                              Use_Full_View => True)\n+           and then Tagged_Type_Expansion\n          then\n             --  Obtain the reference to the Ada.Tags service before generating\n             --  the Object_Declaration node to ensure that if this service is"}, {"sha": "c176179058c50956f426ee03a4830d6e94ee81d4", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcd9db2c8326a00f5d08d7ce08a382eb9b17120/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcd9db2c8326a00f5d08d7ce08a382eb9b17120/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=abcd9db2c8326a00f5d08d7ce08a382eb9b17120", "patch": "@@ -279,14 +279,15 @@ package Sem_Util is\n \n    procedure Mark_Non_ALFA_Subprogram;\n    --  If Current_Subprogram is not Empty, mark either its specification or its\n-   --  body as not being in ALFA. If this procedure is called during the\n-   --  analysis of a precondition or postcondition, as indicated by the flag\n-   --  In_Pre_Post_Expression, mark the specification as not being in ALFA.\n-   --  Otherwise, mark the body as not being in ALFA.\n-   --\n-   --  I would really like to see more comments on this peculiar processing\n-   --  for precondition/postcondition, the comment above says what is done\n-   --  but not why???\n+   --  body as not being in ALFA. This procedure may be called either during\n+   --  the analysis of a precondition or postcondition, as indicated by the\n+   --  flag In_Pre_Post_Expression, or during the analysis of a subprogram's\n+   --  body. In the first case, the specification of Current_Subprogram must be\n+   --  marked as not being in ALFA, as the contract is considered to be part of\n+   --  the specification, so that calls to this subprogram are not in ALFA. In\n+   --  the second case, mark the body as not being in ALFA, which does not\n+   --  prevent the subprogram's specification, and calls to the subprogram, to\n+   --  be in ALFA.\n \n    function Defining_Entity (N : Node_Id) return Entity_Id;\n    --  Given a declaration N, returns the associated defining entity. If the"}]}