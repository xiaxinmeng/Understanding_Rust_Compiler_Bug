{"sha": "1f138b7529110a63c10743f3e264522a85af941a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYxMzhiNzUyOTExMGE2M2MxMDc0M2YzZTI2NDUyMmE4NWFmOTQxYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-02-07T15:42:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-02-07T15:42:42Z"}, "message": "re PR target/79299 (Operand size mismatch for `vpgatherqd' w/ -O3 -masm=intel -mavx512bw)\n\n\tPR target/79299\n\t* config/i386/sse.md (xtg_mode, gatherq_mode): New mode attrs.\n\t(*avx512f_gathersi<mode>, *avx512f_gathersi<mode>_2,\n\t*avx512f_gatherdi<mode>, *avx512f_gatherdi<mode>_2): Use them,\n\tfix -masm=intel patterns.\n\n\t* gcc.target/i386/avx512vl-pr79299-1.c: New test.\n\t* gcc.target/i386/avx512vl-pr79299-2.c: New test.\n\nFrom-SVN: r245248", "tree": {"sha": "33df837f5020448f97c791a4035488f34c752fbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33df837f5020448f97c791a4035488f34c752fbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f138b7529110a63c10743f3e264522a85af941a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f138b7529110a63c10743f3e264522a85af941a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f138b7529110a63c10743f3e264522a85af941a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f138b7529110a63c10743f3e264522a85af941a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5"}], "stats": {"total": 426, "additions": 418, "deletions": 8}, "files": [{"sha": "18c20836ed83944c97253eb9d7b7e93aff843892", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f138b7529110a63c10743f3e264522a85af941a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f138b7529110a63c10743f3e264522a85af941a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f138b7529110a63c10743f3e264522a85af941a", "patch": "@@ -1,3 +1,11 @@\n+2017-02-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/79299\n+\t* config/i386/sse.md (xtg_mode, gatherq_mode): New mode attrs.\n+\t(*avx512f_gathersi<mode>, *avx512f_gathersi<mode>_2,\n+\t*avx512f_gatherdi<mode>, *avx512f_gatherdi<mode>_2): Use them,\n+\tfix -masm=intel patterns.\n+\n 2017-02-07  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/79256"}, {"sha": "c69bcfe9bf3149bb24bff87dcfc9b38a236bf0d0", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f138b7529110a63c10743f3e264522a85af941a/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f138b7529110a63c10743f3e264522a85af941a/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1f138b7529110a63c10743f3e264522a85af941a", "patch": "@@ -811,6 +811,12 @@\n   [(V32QI \"t\") (V16HI \"t\") (V8SI \"t\") (V4DI \"t\") (V8SF \"t\") (V4DF \"t\")\n    (V64QI \"g\") (V32HI \"g\") (V16SI \"g\") (V8DI \"g\") (V16SF \"g\") (V8DF \"g\")])\n \n+;; Tie mode of assembler operand to mode iterator\n+(define_mode_attr xtg_mode\n+  [(V16QI \"x\") (V8HI \"x\") (V4SI \"x\") (V2DI \"x\") (V4SF \"x\") (V2DF \"x\")\n+   (V32QI \"t\") (V16HI \"t\") (V8SI \"t\") (V4DI \"t\") (V8SF \"t\") (V4DF \"t\")\n+   (V64QI \"g\") (V32HI \"g\") (V16SI \"g\") (V8DI \"g\") (V16SF \"g\") (V8DF \"g\")])\n+\n ;; Half mask mode for unpacks\n (define_mode_attr HALFMASKMODE\n   [(DI \"SI\") (SI \"HI\")])\n@@ -19034,6 +19040,12 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+;; Memory operand override for -masm=intel of the v*gatherq* patterns.\n+(define_mode_attr gatherq_mode\n+  [(V4SI \"q\") (V2DI \"x\") (V4SF \"q\") (V2DF \"x\")\n+   (V8SI \"x\") (V4DI \"t\") (V8SF \"x\") (V4DF \"t\")\n+   (V16SI \"t\") (V8DI \"g\") (V16SF \"t\") (V8DF \"g\")])\n+\n (define_expand \"<avx512>_gathersi<mode>\"\n   [(parallel [(set (match_operand:VI48F 0 \"register_operand\")\n \t\t   (unspec:VI48F\n@@ -19067,7 +19079,7 @@\n \t  UNSPEC_GATHER))\n    (clobber (match_scratch:<avx512fmaskmode> 2 \"=&Yk\"))]\n   \"TARGET_AVX512F\"\n-  \"v<sseintprefix>gatherd<ssemodesuffix>\\t{%6, %0%{%2%}|%0%{%2%}, %g6}\"\n+  \"v<sseintprefix>gatherd<ssemodesuffix>\\t{%6, %0%{%2%}|%0%{%2%}, %<xtg_mode>6}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -19086,7 +19098,7 @@\n \t  UNSPEC_GATHER))\n    (clobber (match_scratch:<avx512fmaskmode> 1 \"=&Yk\"))]\n   \"TARGET_AVX512F\"\n-  \"v<sseintprefix>gatherd<ssemodesuffix>\\t{%5, %0%{%1%}|%0%{%1%}, %g5}\"\n+  \"v<sseintprefix>gatherd<ssemodesuffix>\\t{%5, %0%{%1%}|%0%{%1%}, %<xtg_mode>5}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -19126,9 +19138,7 @@\n    (clobber (match_scratch:QI 2 \"=&Yk\"))]\n   \"TARGET_AVX512F\"\n {\n-  if (GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) == 4)\n-    return \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%6, %1%{%2%}|%1%{%2%}, %t6}\";\n-  return \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%6, %1%{%2%}|%1%{%2%}, %g6}\";\n+  return \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%6, %1%{%2%}|%1%{%2%}, %<gatherq_mode>6}\";\n }\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n@@ -19152,11 +19162,11 @@\n   if (<MODE>mode != <VEC_GATHER_SRCDI>mode)\n     {\n       if (<MODE_SIZE> != 64)\n-\treturn \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %x0%{%1%}|%t0%{%1%}, %g5}\";\n+\treturn \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %x0%{%1%}|%x0%{%1%}, %<gatherq_mode>5}\";\n       else\n-\treturn \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %t0%{%1%}|%t0%{%1%}, %g5}\";\n+\treturn \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %t0%{%1%}|%t0%{%1%}, %t5}\";\n     }\n-  return \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %0%{%1%}|%0%{%1%}, %g5}\";\n+  return \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %0%{%1%}|%0%{%1%}, %<gatherq_mode>5}\";\n }\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")"}, {"sha": "6cc3818a316198521fb6342fdc076529c906ec0b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f138b7529110a63c10743f3e264522a85af941a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f138b7529110a63c10743f3e264522a85af941a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f138b7529110a63c10743f3e264522a85af941a", "patch": "@@ -1,3 +1,9 @@\n+2017-02-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/79299\n+\t* gcc.target/i386/avx512vl-pr79299-1.c: New test.\n+\t* gcc.target/i386/avx512vl-pr79299-2.c: New test.\n+\n 2017-02-07  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/gimplefe-23.c: New testcase."}, {"sha": "04353f599d1236378758b3ef846c3b60b25cd26d", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr79299-1.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f138b7529110a63c10743f3e264522a85af941a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr79299-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f138b7529110a63c10743f3e264522a85af941a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr79299-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr79299-1.c?ref=1f138b7529110a63c10743f3e264522a85af941a", "patch": "@@ -0,0 +1,92 @@\n+/* PR target/79299 */\n+/* { dg-do assemble { target avx512vl } } */\n+/* { dg-require-effective-target masm_intel } */\n+/* { dg-options \"-Ofast -mavx512vl -masm=intel\" } */\n+\n+#define N 1024\n+\n+unsigned long long a[N];\n+unsigned int b[N], c[N], d[N], e[N], f[N];\n+unsigned long long g[N], h[N], j[N], k[N];\n+float l[N], m[N], n[N], o[N];\n+double p[N], q[N], r[N], s[N];\n+\n+void\n+f1 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    d[i] = c[a[i]];\n+  for (i = 0; i < N; i++)\n+    e[i] = f[i] ? f[i] : c[a[i]];\n+}\n+\n+void\n+f2 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    d[i] = c[b[i]];\n+  for (i = 0; i < N; i++)\n+    e[i] = f[i] ? f[i] : c[b[i]];\n+}\n+\n+void\n+f3 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    h[i] = g[a[i]];\n+  for (i = 0; i < N; i++)\n+    j[i] = k[i] != 0.0 ? k[i] : g[a[i]];\n+}\n+\n+void\n+f4 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    h[i] = g[b[i]];\n+  for (i = 0; i < N; i++)\n+    j[i] = k[i] != 0.0 ? k[i] : g[b[i]];\n+}\n+\n+void\n+f5 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    m[i] = l[a[i]];\n+  for (i = 0; i < N; i++)\n+    n[i] = o[i] ? o[i] : l[a[i]];\n+}\n+\n+void\n+f6 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    m[i] = c[b[i]];\n+  for (i = 0; i < N; i++)\n+    n[i] = o[i] ? o[i] : c[b[i]];\n+}\n+\n+void\n+f7 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    q[i] = p[a[i]];\n+  for (i = 0; i < N; i++)\n+    r[i] = s[i] != 0.0 ? s[i] : p[a[i]];\n+}\n+\n+void\n+f8 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    q[i] = p[b[i]];\n+  for (i = 0; i < N; i++)\n+    r[i] = s[i] != 0.0 ? s[i] : p[b[i]];\n+}"}, {"sha": "00dca4bdccb9cf5ee90cb0b304af6e028d93c166", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr79299-2.c", "status": "added", "additions": 294, "deletions": 0, "changes": 294, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f138b7529110a63c10743f3e264522a85af941a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr79299-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f138b7529110a63c10743f3e264522a85af941a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr79299-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr79299-2.c?ref=1f138b7529110a63c10743f3e264522a85af941a", "patch": "@@ -0,0 +1,294 @@\n+/* PR target/79299 */\n+/* { dg-do assemble { target avx512vl } } */\n+/* { dg-require-effective-target masm_intel } */\n+/* { dg-options \"-Ofast -mavx512vl -masm=intel\" } */\n+\n+#include <immintrin.h>\n+\n+__m512\n+f1 (__m512i x, void const *y)\n+{\n+  return _mm512_i32gather_ps (x, y, 1);\n+}\n+\n+__m512\n+f2 (__m512 x, __mmask16 y, __m512i z, void const *w)\n+{\n+  return _mm512_mask_i32gather_ps (x, y, z, w, 1);\n+}\n+\n+__m512d\n+f3 (__m256i x, void const *y)\n+{\n+  return _mm512_i32gather_pd (x, y, 1);\n+}\n+\n+__m512d\n+f4 (__m512d x, __mmask8 y, __m256i z, void const *w)\n+{\n+  return _mm512_mask_i32gather_pd (x, y, z, w, 1);\n+}\n+\n+__m256\n+f5 (__m512i x, void const *y)\n+{\n+  return _mm512_i64gather_ps (x, y, 1);\n+}\n+\n+__m256\n+f6 (__m256 x, __mmask16 y, __m512i z, void const *w)\n+{\n+  return _mm512_mask_i64gather_ps (x, y, z, w, 1);\n+}\n+\n+__m512d\n+f7 (__m512i x, void const *y)\n+{\n+  return _mm512_i64gather_pd (x, y, 1);\n+}\n+\n+__m512d\n+f8 (__m512d x, __mmask8 y, __m512i z, void const *w)\n+{\n+  return _mm512_mask_i64gather_pd (x, y, z, w, 1);\n+}\n+\n+__m512i\n+f9 (__m512i x, void const *y)\n+{\n+  return _mm512_i32gather_epi32 (x, y, 1);\n+}\n+\n+__m512i\n+f10 (__m512i x, __mmask16 y, __m512i z, void const *w)\n+{\n+  return _mm512_mask_i32gather_epi32 (x, y, z, w, 1);\n+}\n+\n+__m512i\n+f11 (__m256i x, void const *y)\n+{\n+  return _mm512_i32gather_epi64 (x, y, 1);\n+}\n+\n+__m512i\n+f12 (__m512i x, __mmask8 y, __m256i z, void const *w)\n+{\n+  return _mm512_mask_i32gather_epi64 (x, y, z, w, 1);\n+}\n+\n+__m256i\n+f13 (__m512i x, void const *y)\n+{\n+  return _mm512_i64gather_epi32 (x, y, 1);\n+}\n+\n+__m256i\n+f14 (__m256i x, __mmask16 y, __m512i z, void const *w)\n+{\n+  return _mm512_mask_i64gather_epi32 (x, y, z, w, 1);\n+}\n+\n+__m512i\n+f15 (__m512i x, void const *y)\n+{\n+  return _mm512_i64gather_epi64 (x, y, 1);\n+}\n+\n+__m512i\n+f16 (__m512i x, __mmask8 y, __m512i z, void const *w)\n+{\n+  return _mm512_mask_i64gather_epi64 (x, y, z, w, 1);\n+}\n+\n+__m256\n+f17 (__m256 x, __mmask8 y, __m256i z, void const *w)\n+{\n+  return _mm256_mmask_i32gather_ps (x, y, z, w, 1);\n+}\n+\n+__m128\n+f18 (__m128 x, __mmask8 y, __m128i z, void const *w)\n+{\n+  return _mm_mmask_i32gather_ps (x, y, z, w, 1);\n+}\n+\n+__m256d\n+f19 (__m256d x, __mmask8 y, __m128i z, void const *w)\n+{\n+  return _mm256_mmask_i32gather_pd (x, y, z, w, 1);\n+}\n+\n+__m128d\n+f20 (__m128d x, __mmask8 y, __m128i z, void const *w)\n+{\n+  return _mm_mmask_i32gather_pd (x, y, z, w, 1);\n+}\n+\n+__m128\n+f21 (__m128 x, __mmask8 y, __m256i z, void const *w)\n+{\n+  return _mm256_mmask_i64gather_ps (x, y, z, w, 1);\n+}\n+\n+__m128\n+f22 (__m128 x, __mmask8 y, __m128i z, void const *w)\n+{\n+  return _mm_mmask_i64gather_ps (x, y, z, w, 1);\n+}\n+\n+__m256d\n+f23 (__m256d x, __mmask8 y, __m256i z, void const *w)\n+{\n+  return _mm256_mmask_i64gather_pd (x, y, z, w, 1);\n+}\n+\n+__m128d\n+f24 (__m128d x, __mmask8 y, __m128i z, void const *w)\n+{\n+  return _mm_mmask_i64gather_pd (x, y, z, w, 1);\n+}\n+\n+__m256i\n+f25 (__m256i x, __mmask8 y, __m256i z, void const *w)\n+{\n+  return _mm256_mmask_i32gather_epi32 (x, y, z, w, 1);\n+}\n+\n+__m128i\n+f26 (__m128i x, __mmask8 y, __m128i z, void const *w)\n+{\n+  return _mm_mmask_i32gather_epi32 (x, y, z, w, 1);\n+}\n+\n+__m256i\n+f27 (__m256i x, __mmask8 y, __m128i z, void const *w)\n+{\n+  return _mm256_mmask_i32gather_epi64 (x, y, z, w, 1);\n+}\n+\n+__m128i\n+f28 (__m128i x, __mmask8 y, __m128i z, void const *w)\n+{\n+  return _mm_mmask_i32gather_epi64 (x, y, z, w, 1);\n+}\n+\n+__m128i\n+f29 (__m128i x, __mmask8 y, __m256i z, void const *w)\n+{\n+  return _mm256_mmask_i64gather_epi32 (x, y, z, w, 1);\n+}\n+\n+__m128i\n+f30 (__m128i x, __mmask8 y, __m128i z, void const *w)\n+{\n+  return _mm_mmask_i64gather_epi32 (x, y, z, w, 1);\n+}\n+\n+__m256i\n+f31 (__m256i x, __mmask8 y, __m256i z, void const *w)\n+{\n+  return _mm256_mmask_i64gather_epi64 (x, y, z, w, 1);\n+}\n+\n+__m128i\n+f32 (__m128i x, __mmask8 y, __m128i z, void const *w)\n+{\n+  return _mm_mmask_i64gather_epi64 (x, y, z, w, 1);\n+}\n+\n+__m256\n+f33 (__m256 x, __m256i z, void const *w)\n+{\n+  return _mm256_mmask_i32gather_ps (x, -1, z, w, 1);\n+}\n+\n+__m128\n+f34 (__m128 x, __m128i z, void const *w)\n+{\n+  return _mm_mmask_i32gather_ps (x, -1, z, w, 1);\n+}\n+\n+__m256d\n+f35 (__m256d x, __m128i z, void const *w)\n+{\n+  return _mm256_mmask_i32gather_pd (x, -1, z, w, 1);\n+}\n+\n+__m128d\n+f36 (__m128d x, __m128i z, void const *w)\n+{\n+  return _mm_mmask_i32gather_pd (x, -1, z, w, 1);\n+}\n+\n+__m128\n+f37 (__m128 x, __m256i z, void const *w)\n+{\n+  return _mm256_mmask_i64gather_ps (x, -1, z, w, 1);\n+}\n+\n+__m128\n+f38 (__m128 x, __m128i z, void const *w)\n+{\n+  return _mm_mmask_i64gather_ps (x, -1, z, w, 1);\n+}\n+\n+__m256d\n+f39 (__m256d x, __m256i z, void const *w)\n+{\n+  return _mm256_mmask_i64gather_pd (x, -1, z, w, 1);\n+}\n+\n+__m128d\n+f40 (__m128d x, __m128i z, void const *w)\n+{\n+  return _mm_mmask_i64gather_pd (x, -1, z, w, 1);\n+}\n+\n+__m256i\n+f41 (__m256i x, __m256i z, void const *w)\n+{\n+  return _mm256_mmask_i32gather_epi32 (x, -1, z, w, 1);\n+}\n+\n+__m128i\n+f42 (__m128i x, __m128i z, void const *w)\n+{\n+  return _mm_mmask_i32gather_epi32 (x, -1, z, w, 1);\n+}\n+\n+__m256i\n+f43 (__m256i x, __m128i z, void const *w)\n+{\n+  return _mm256_mmask_i32gather_epi64 (x, -1, z, w, 1);\n+}\n+\n+__m128i\n+f44 (__m128i x, __m128i z, void const *w)\n+{\n+  return _mm_mmask_i32gather_epi64 (x, -1, z, w, 1);\n+}\n+\n+__m128i\n+f45 (__m128i x, __m256i z, void const *w)\n+{\n+  return _mm256_mmask_i64gather_epi32 (x, -1, z, w, 1);\n+}\n+\n+__m128i\n+f46 (__m128i x, __m128i z, void const *w)\n+{\n+  return _mm_mmask_i64gather_epi32 (x, -1, z, w, 1);\n+}\n+\n+__m256i\n+f47 (__m256i x, __m256i z, void const *w)\n+{\n+  return _mm256_mmask_i64gather_epi64 (x, -1, z, w, 1);\n+}\n+\n+__m128i\n+f48 (__m128i x, __m128i z, void const *w)\n+{\n+  return _mm_mmask_i64gather_epi64 (x, -1, z, w, 1);\n+}"}]}