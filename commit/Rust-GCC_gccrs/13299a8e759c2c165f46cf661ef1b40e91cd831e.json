{"sha": "13299a8e759c2c165f46cf661ef1b40e91cd831e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMyOTlhOGU3NTljMmMxNjVmNDZjZjY2MWVmMWI0MGU5MWNkODMxZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-10-18T21:46:52Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-10-18T21:46:52Z"}, "message": "i386.md (rdpmc): Remove expander.\n\n\t* config/i386/i386.md (rdpmc): Remove expander.\n\t(rdtsc): Ditto.\n\t(rdtscp): Ditto.\n\t(rdpmc): Rename from *rdpmc.\n\t(rdpmc_rex64): Rename from *rdpmc_rex64.\n\t(rdtsc): Rename from *rdtsc.\n\t(rdtsc_rex64): Rename from *rdtsc_rex64.\n\t(rdtscp): Rename from *rdtscp.\n\t(rdtscp_rex64): Rename from *rdtscp_rex64.\n\n\t* config/i386/i386.c (struct builtin_description bdesc_special_args)\n\t<IX86_BUILTIN_RDTSC>: Use CODE_FOR_NOTHING.\n\t<IX86_BUILTIN_RDTSCP>: Ditto.\n\t(struct builtin_description bdesc__args) <IX86_BUILTIN_RDPMC>: Ditto.\n\t(ix86_expand_builtin) <IX86_BUILTIN_{RDPMC,RDTSC,RDTSCP}>: Handle here.\n\nFrom-SVN: r192589", "tree": {"sha": "453c3a7b88317d69f58e0ff63bc1d637b9983921", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/453c3a7b88317d69f58e0ff63bc1d637b9983921"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13299a8e759c2c165f46cf661ef1b40e91cd831e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13299a8e759c2c165f46cf661ef1b40e91cd831e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13299a8e759c2c165f46cf661ef1b40e91cd831e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13299a8e759c2c165f46cf661ef1b40e91cd831e/comments", "author": null, "committer": null, "parents": [{"sha": "7aad1ae2b29e612611c62b9d30113f82213f1e38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aad1ae2b29e612611c62b9d30113f82213f1e38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aad1ae2b29e612611c62b9d30113f82213f1e38"}], "stats": {"total": 256, "additions": 110, "deletions": 146}, "files": [{"sha": "86c3f2fff0c8a904ae23dfd63e6dc911cad9d52e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 33, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13299a8e759c2c165f46cf661ef1b40e91cd831e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13299a8e759c2c165f46cf661ef1b40e91cd831e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13299a8e759c2c165f46cf661ef1b40e91cd831e", "patch": "@@ -1,3 +1,21 @@\n+2012-10-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (rdpmc): Remove expander.\n+\t(rdtsc): Ditto.\n+\t(rdtscp): Ditto.\n+\t(rdpmc): Rename from *rdpmc.\n+\t(rdpmc_rex64): Rename from *rdpmc_rex64.\n+\t(rdtsc): Rename from *rdtsc.\n+\t(rdtsc_rex64): Rename from *rdtsc_rex64.\n+\t(rdtscp): Rename from *rdtscp.\n+\t(rdtscp_rex64): Rename from *rdtscp_rex64.\n+\n+\t* config/i386/i386.c (struct builtin_description bdesc_special_args)\n+\t<IX86_BUILTIN_RDTSC>: Use CODE_FOR_NOTHING.\n+\t<IX86_BUILTIN_RDTSCP>: Ditto.\n+\t(struct builtin_description bdesc__args) <IX86_BUILTIN_RDPMC>: Ditto.\n+\t(ix86_expand_builtin) <IX86_BUILTIN_{RDPMC,RDTSC,RDTSCP}>: Handle here.\n+\n 2012-10-18  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n \n \t* config/sh/sh.c: Fix comment to silence warning.\n@@ -20,8 +38,7 @@\n \t(altivec_vsumsws_nomode): Delete.\n \t(reduc_splus_<mode>, reduc_uplus_<mode>): Call gen_altivec_vsumsws\n \tinstead of gen_altivec_vsumsws_nomode.\n-\t(altivec_lvlx, altivec_lvlxl, altivec_lvrx, altivec_lvrxl):\n-\tAdd mode.\n+\t(altivec_lvlx, altivec_lvlxl, altivec_lvrx, altivec_lvrxl): Add mode.\n \t* config/rs6000/rs6000.md (probe_stack): Rename to...\n \t(probe_stack_<mode>): ... this.  Add mode.  Change pattern to\n \tuse std instead of stw when appropriate.\n@@ -47,8 +64,7 @@\n 2012-10-18  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n \t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n-\t* config/arm/arm.c (neon_builtin_data): Add vfma and vfms\n-\tbuiltins.\n+\t* config/arm/arm.c (neon_builtin_data): Add vfma and vfms builtins.\n \t* config/arm/neon-docgen.ml (intrinsic_groups): Add\n \tfused-multiply-* groups.\n \t* config/neon-gen.ml (print_feature_test_start): New function.\n@@ -120,15 +136,13 @@\n \t* config/rs6000/rs6000.opt (rs6000_isa_flags): New flag word to\n \treplace target_flags that gives us 63 possible switches.\n \t(x_rs6000_isa_flags): Save area for rs6000_isa_flags.\n-\t(x_rs6000_isa_flags_explicit): Save area for\n-\trs6000_isa_flags_explicit.\n+\t(x_rs6000_isa_flags_explicit): Save area for rs6000_isa_flags_explicit.\n \t(rs6000_target_flags_explicit): Delete in favor of\n \tx_rs6000_isa_flags_explicit.\n \t(-mpowerpc64): Change all switches that used to be in target_flags\n \tto now be in rs6000_isa_flags.  In using rs6000_isa_flags, the\n \toptions machinary will generate names of the form OPITON_<xxx>\n-\tinstead of TARGET_<xxx> and OPTION_MASK_<xxx> instead of\n-\tMASK_<xxx>.\n+\tinstead of TARGET_<xxx> and OPTION_MASK_<xxx> instead of MASK_<xxx>.\n \t(-mpowerpc-gpopt): Likewise.\n \t(-mpowerpc-gfxopt): Likewise.\n \t(-mmfcrf): Likewise.\n@@ -205,8 +219,7 @@\n \t(rs6000_function_specific_restore): Likewise.\n \t(rs6000_function_specific_print): Likewise.\n \t(rs6000_can_inline_p): Likewise.\n-\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros):\n-\tLikewise.\n+\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Likewise.\n \t(rs6000_cpu_cpp_builtins): Likewise.\n \t* common/config/rs6000/rs6000-driver.c (rs6000_handle_option):\n \tLikewise.\n@@ -251,32 +264,23 @@\n \tglobal_options_set structure.\n \n \t* gcc/config/rs6000/aix43.h (SUBTARGET_OVERRIDE_OPTIONS):\n-\tChange use of target_flags to rs6000_isa_flags,\n-\ttarget_flags_explicit to rs6000_isa_flags_explicit, and MASK_<xxx>\n-\tto OPTION_MASK_<xxx>.\n-\t* gcc/config/rs6000/aix51.h (SUBTARGET_OVERRIDE_OPTIONS):\n-\tLikewise.\n-\t* gcc/config/rs6000/aix52.h (SUBTARGET_OVERRIDE_OPTIONS):\n-\tLikewise.\n-\t* gcc/config/rs6000/aix53.h (SUBTARGET_OVERRIDE_OPTIONS):\n-\tLikewise.\n-\t* gcc/config/rs6000/aix61.h (SUBTARGET_OVERRIDE_OPTIONS):\n-\tLikewise.\n-\t* gcc/config/rs6000/freebsd64.h (RELOCATABLE_NEEDS_FIXUP):\n-\tLikewise.\n+\tChange use of target_flags to rs6000_isa_flags, target_flags_explicit\n+\tto rs6000_isa_flags_explicit, and MASK_<xxx> to OPTION_MASK_<xxx>.\n+\t* gcc/config/rs6000/aix51.h (SUBTARGET_OVERRIDE_OPTIONS): Likewise.\n+\t* gcc/config/rs6000/aix52.h (SUBTARGET_OVERRIDE_OPTIONS): Likewise.\n+\t* gcc/config/rs6000/aix53.h (SUBTARGET_OVERRIDE_OPTIONS): Likewise.\n+\t* gcc/config/rs6000/aix61.h (SUBTARGET_OVERRIDE_OPTIONS): Likewise.\n+\t* gcc/config/rs6000/freebsd64.h (RELOCATABLE_NEEDS_FIXUP): Likewise.\n \t(SUBSUBTARGET_OVERRIDE_OPTIONS): Likewise.\n-\t* gcc/config/rs6000/freebsd.h (RELOCATABLE_NEEDS_FIXUP):\n-\tLikewise.\n-\t* gcc/config/rs6000/linux64.h (RELOCATABLE_NEEDS_FIXUP):\n-\tLikewise.\n+\t* gcc/config/rs6000/freebsd.h (RELOCATABLE_NEEDS_FIXUP): Likewise.\n+\t* gcc/config/rs6000/linux64.h (RELOCATABLE_NEEDS_FIXUP): Likewise.\n \t(SUBSUBTARGET_OVERRIDE_OPTIONS): Likewise.\n \t(OPTION_LITTLE_ENDIAN): Likewise.\n \t(OPTION_RELOCATABLE): Likewise.\n \t(OPTION_EABI): Likewise.\n \t(OPTION_PROTOTYPE): Likewise.\n \t* gcc/config/rs6000/linux.h (RELOCATABLE_NEEDS_FIXUP): Likewise.\n-\t* gcc/config/rs6000/option-defaults.h (OPTION_MASK_64BIT):\n-\tLikewise.\n+\t* gcc/config/rs6000/option-defaults.h (OPTION_MASK_64BIT): Likewise.\n \t(OPT_ARCH32): Likewise.\n \t(OPT_ARCH64): Likewise.\n \t* gcc/config/rs6000/sysv4.h (TARGET_TOC): Likewise.\n@@ -298,7 +302,8 @@\n 2012-10-17  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa-loop-ivcanon.c (tree_estimate_loop_size): Add edge_to_cancel\n-\tparameter and use it to estimate code optimized out in the final iteration.\n+\tparameter and use it to estimate code optimized out in the final\n+\titeration.\n \t(loop_edge_to_cancel): New function.\n \t(try_unroll_loop_completely): New IRRED_IVALIDATED parameter;\n \thandle unrolling loops with bounds given via max_loop_iteratins;\n@@ -643,8 +648,8 @@\n \t* config/sh/iterators.md (QIHISIDI): New mode iterator.\n \t* config/sh/predicates.md (gbr_address_mem): New predicate.\n \t* config/sh/sh.md (*movdi_gbr_load, *movdi_gbr_store): New\n-\tinsn_and_split.\n-\tUse QIHISIDI instead of QIHISI in unnamed GBR addressing splits.\n+\tinsn_and_split.  Use QIHISIDI instead of QIHISI in unnamed GBR\n+\taddressing splits.\n \n 2012-10-15  Oleg Endo  <olegendo@gcc.gnu.org>\n \n@@ -659,7 +664,7 @@\n \t* config.gcc: Match arm*-*-linux-* for ARM Linux/GNU.\n \t* doc/install.texi: Use arm-*-*linux-* instead of arm-*-*linux-gnueabi.\n \n-2012-10-13  Uros Bizjak  <ubizjak@gmail.com>\n+2012-10-15  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (UNSPEC_MOVU): Remove.\n \t(UNSPEC_LOADU): New."}, {"sha": "e095d987296628a0d1c3982a5667a9d3ef4fc262", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 63, "deletions": 4, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13299a8e759c2c165f46cf661ef1b40e91cd831e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13299a8e759c2c165f46cf661ef1b40e91cd831e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=13299a8e759c2c165f46cf661ef1b40e91cd831e", "patch": "@@ -26768,8 +26768,8 @@ static const struct builtin_description bdesc_pcmpistr[] =\n /* Special builtins with variable number of arguments.  */\n static const struct builtin_description bdesc_special_args[] =\n {\n-  { ~OPTION_MASK_ISA_64BIT, CODE_FOR_rdtsc, \"__builtin_ia32_rdtsc\", IX86_BUILTIN_RDTSC, UNKNOWN, (int) UINT64_FTYPE_VOID },\n-  { ~OPTION_MASK_ISA_64BIT, CODE_FOR_rdtscp, \"__builtin_ia32_rdtscp\", IX86_BUILTIN_RDTSCP, UNKNOWN, (int) UINT64_FTYPE_PUNSIGNED },\n+  { ~OPTION_MASK_ISA_64BIT, CODE_FOR_nothing, \"__builtin_ia32_rdtsc\", IX86_BUILTIN_RDTSC, UNKNOWN, (int) UINT64_FTYPE_VOID },\n+  { ~OPTION_MASK_ISA_64BIT, CODE_FOR_nothing, \"__builtin_ia32_rdtscp\", IX86_BUILTIN_RDTSCP, UNKNOWN, (int) UINT64_FTYPE_PUNSIGNED },\n   { ~OPTION_MASK_ISA_64BIT, CODE_FOR_pause, \"__builtin_ia32_pause\", IX86_BUILTIN_PAUSE, UNKNOWN, (int) VOID_FTYPE_VOID },\n \n   /* MMX */\n@@ -26887,7 +26887,7 @@ static const struct builtin_description bdesc_args[] =\n {\n   { ~OPTION_MASK_ISA_64BIT, CODE_FOR_bsr, \"__builtin_ia32_bsrsi\", IX86_BUILTIN_BSRSI, UNKNOWN, (int) INT_FTYPE_INT },\n   { OPTION_MASK_ISA_64BIT, CODE_FOR_bsr_rex64, \"__builtin_ia32_bsrdi\", IX86_BUILTIN_BSRDI, UNKNOWN, (int) INT64_FTYPE_INT64 },\n-  { ~OPTION_MASK_ISA_64BIT, CODE_FOR_rdpmc, \"__builtin_ia32_rdpmc\", IX86_BUILTIN_RDPMC, UNKNOWN, (int) UINT64_FTYPE_INT },\n+  { ~OPTION_MASK_ISA_64BIT, CODE_FOR_nothing, \"__builtin_ia32_rdpmc\", IX86_BUILTIN_RDPMC, UNKNOWN, (int) UINT64_FTYPE_INT },\n   { ~OPTION_MASK_ISA_64BIT, CODE_FOR_rotlqi3, \"__builtin_ia32_rolqi\", IX86_BUILTIN_ROLQI, UNKNOWN, (int) UINT8_FTYPE_UINT8_INT },\n   { ~OPTION_MASK_ISA_64BIT, CODE_FOR_rotlhi3, \"__builtin_ia32_rolhi\", IX86_BUILTIN_ROLHI, UNKNOWN, (int) UINT16_FTYPE_UINT16_INT },\n   { ~OPTION_MASK_ISA_64BIT, CODE_FOR_rotrqi3, \"__builtin_ia32_rorqi\", IX86_BUILTIN_RORQI, UNKNOWN, (int) UINT8_FTYPE_UINT8_INT },\n@@ -30452,7 +30452,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   enum insn_code icode;\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   tree arg0, arg1, arg2, arg3, arg4;\n-  rtx op0, op1, op2, op3, op4, pat;\n+  rtx op0, op1, op2, op3, op4, pat, insn;\n   enum machine_mode mode0, mode1, mode2, mode3, mode4;\n   unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n \n@@ -30633,6 +30633,65 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \treturn target;\n       }\n \n+    case IX86_BUILTIN_RDPMC:\n+    case IX86_BUILTIN_RDTSC:\n+    case IX86_BUILTIN_RDTSCP:\n+\n+      op0 = gen_reg_rtx (DImode);\n+      op1 = gen_reg_rtx (DImode);\n+\n+      if (fcode == IX86_BUILTIN_RDPMC)\n+\t{\n+\t  arg0 = CALL_EXPR_ARG (exp, 0);\n+\t  op2 = expand_normal (arg0);\n+\t  if (!register_operand (op2, SImode))\n+\t    op2 = copy_to_mode_reg (SImode, op2);\n+\n+\t  insn = (TARGET_64BIT\n+\t\t  ? gen_rdpmc_rex64 (op0, op1, op2)\n+\t\t  : gen_rdpmc (op0, op2));\n+\t  emit_insn (insn);\n+\t}\n+      else if (fcode == IX86_BUILTIN_RDTSC)\n+\t{\n+\t  insn = (TARGET_64BIT\n+\t\t  ? gen_rdtsc_rex64 (op0, op1)\n+\t\t  : gen_rdtsc (op0));\n+\t  emit_insn (insn);\n+\t}\n+      else\n+\t{\n+\t  op2 = gen_reg_rtx (SImode);\n+\n+\t  insn = (TARGET_64BIT\n+\t\t  ? gen_rdtscp_rex64 (op0, op1, op2)\n+\t\t  : gen_rdtscp (op0, op2));\n+\t  emit_insn (insn);\n+\n+\t  arg0 = CALL_EXPR_ARG (exp, 0);\n+\t  op4 = expand_normal (arg0);\n+\t  if (!address_operand (op4, VOIDmode))\n+\t    {\n+\t      op4 = convert_memory_address (Pmode, op4);\n+\t      op4 = copy_addr_to_reg (op4);\n+\t    }\n+\t  emit_move_insn (gen_rtx_MEM (SImode, op4), op2);\n+\t}\n+\n+      if (target == 0)\n+\ttarget = gen_reg_rtx (mode);\n+\n+      if (TARGET_64BIT)\n+\t{\n+\t  op1 = expand_simple_binop (DImode, ASHIFT, op1, GEN_INT (32),\n+\t\t\t\t     op1, 1, OPTAB_DIRECT);\n+\t  op0 = expand_simple_binop (DImode, IOR, op0, op1,\n+\t\t\t\t     op0, 1, OPTAB_DIRECT);\n+\t}\n+\n+      emit_move_insn (target, op0);\n+      return target;\n+\n     case IX86_BUILTIN_LLWPCB:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       op0 = expand_normal (arg0);"}, {"sha": "299115d4ac469c214c9bf89186b8b4dcd6d0b6f2", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 9, "deletions": 109, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13299a8e759c2c165f46cf661ef1b40e91cd831e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13299a8e759c2c165f46cf661ef1b40e91cd831e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=13299a8e759c2c165f46cf661ef1b40e91cd831e", "patch": "@@ -17975,40 +17975,7 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_expand \"rdpmc\"\n-  [(match_operand:DI 0 \"register_operand\")\n-   (match_operand:SI 1 \"register_operand\")]\n-  \"\"\n-{\n-  rtx reg = gen_reg_rtx (DImode);\n-  rtx si;\n-\n-  si = gen_rtx_UNSPEC_VOLATILE (DImode, gen_rtvec (1, operands[1]),\n-\t\t\t\tUNSPECV_RDPMC);\n-\n-  if (TARGET_64BIT)\n-    {\n-      rtvec vec = rtvec_alloc (2);\n-      rtx load = gen_rtx_PARALLEL (VOIDmode, vec);\n-      rtx upper = gen_reg_rtx (DImode);\n-      rtx di = gen_rtx_UNSPEC_VOLATILE (DImode,\n-\t\t\t\t\tgen_rtvec (1, const0_rtx),\n-\t\t\t\t\tUNSPECV_RDPMC);\n-      RTVEC_ELT (vec, 0) = gen_rtx_SET (VOIDmode, reg, si);\n-      RTVEC_ELT (vec, 1) = gen_rtx_SET (VOIDmode, upper, di);\n-      emit_insn (load);\n-      upper = expand_simple_binop (DImode, ASHIFT, upper, GEN_INT (32),\n-\t\t\t\t   NULL, 1, OPTAB_DIRECT);\n-      reg = expand_simple_binop (DImode, IOR, reg, upper, reg, 1,\n-\t\t\t\t OPTAB_DIRECT);\n-    }\n-  else\n-    emit_insn (gen_rtx_SET (VOIDmode, reg, si));\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], reg));\n-  DONE;\n-})\n-\n-(define_insn \"*rdpmc\"\n+(define_insn \"rdpmc\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=A\")\n   \t(unspec_volatile:DI [(match_operand:SI 1 \"register_operand\" \"c\")]\n \t\t\t    UNSPECV_RDPMC))]\n@@ -18017,52 +17984,26 @@\n   [(set_attr \"type\" \"other\")\n    (set_attr \"length\" \"2\")])\n \n-(define_insn \"*rdpmc_rex64\"\n+(define_insn \"rdpmc_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n   \t(unspec_volatile:DI [(match_operand:SI 2 \"register_operand\" \"c\")]\n \t\t\t    UNSPECV_RDPMC))\n-  (set (match_operand:DI 1 \"register_operand\" \"=d\")\n-       (unspec_volatile:DI [(const_int 0)] UNSPECV_RDPMC))]\n+   (set (match_operand:DI 1 \"register_operand\" \"=d\")\n+\t(unspec_volatile:DI [(match_dup 2)] UNSPECV_RDPMC))]\n   \"TARGET_64BIT\"\n   \"rdpmc\"\n   [(set_attr \"type\" \"other\")\n    (set_attr \"length\" \"2\")])\n \n-(define_expand \"rdtsc\"\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(unspec_volatile:DI [(const_int 0)] UNSPECV_RDTSC))]\n-  \"\"\n-{\n-  if (TARGET_64BIT)\n-    {\n-      rtvec vec = rtvec_alloc (2);\n-      rtx load = gen_rtx_PARALLEL (VOIDmode, vec);\n-      rtx upper = gen_reg_rtx (DImode);\n-      rtx lower = gen_reg_rtx (DImode);\n-      rtx src = gen_rtx_UNSPEC_VOLATILE (DImode,\n-\t\t\t\t\t gen_rtvec (1, const0_rtx),\n-\t\t\t\t\t UNSPECV_RDTSC);\n-      RTVEC_ELT (vec, 0) = gen_rtx_SET (VOIDmode, lower, src);\n-      RTVEC_ELT (vec, 1) = gen_rtx_SET (VOIDmode, upper, src);\n-      emit_insn (load);\n-      upper = expand_simple_binop (DImode, ASHIFT, upper, GEN_INT (32),\n-\t\t\t\t   NULL, 1, OPTAB_DIRECT);\n-      lower = expand_simple_binop (DImode, IOR, lower, upper, lower, 1,\n-\t\t\t\t   OPTAB_DIRECT);\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0], lower));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"*rdtsc\"\n+(define_insn \"rdtsc\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=A\")\n \t(unspec_volatile:DI [(const_int 0)] UNSPECV_RDTSC))]\n   \"!TARGET_64BIT\"\n   \"rdtsc\"\n   [(set_attr \"type\" \"other\")\n    (set_attr \"length\" \"2\")])\n \n-(define_insn \"*rdtsc_rex64\"\n+(define_insn \"rdtsc_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n \t(unspec_volatile:DI [(const_int 0)] UNSPECV_RDTSC))\n    (set (match_operand:DI 1 \"register_operand\" \"=d\")\n@@ -18072,48 +18013,7 @@\n   [(set_attr \"type\" \"other\")\n    (set_attr \"length\" \"2\")])\n \n-(define_expand \"rdtscp\"\n-  [(match_operand:DI 0 \"register_operand\")\n-   (match_operand:SI 1 \"memory_operand\")]\n-  \"\"\n-{\n-  rtx di = gen_rtx_UNSPEC_VOLATILE (DImode,\n-\t\t\t\t    gen_rtvec (1, const0_rtx),\n-\t\t\t\t    UNSPECV_RDTSCP);\n-  rtx si = gen_rtx_UNSPEC_VOLATILE (SImode,\n-\t\t\t\t    gen_rtvec (1, const0_rtx),\n-\t\t\t\t    UNSPECV_RDTSCP);\n-  rtx reg = gen_reg_rtx (DImode);\n-  rtx tmp = gen_reg_rtx (SImode);\n-\n-  if (TARGET_64BIT)\n-    {\n-      rtvec vec = rtvec_alloc (3);\n-      rtx load = gen_rtx_PARALLEL (VOIDmode, vec);\n-      rtx upper = gen_reg_rtx (DImode);\n-      RTVEC_ELT (vec, 0) = gen_rtx_SET (VOIDmode, reg, di);\n-      RTVEC_ELT (vec, 1) = gen_rtx_SET (VOIDmode, upper, di);\n-      RTVEC_ELT (vec, 2) = gen_rtx_SET (VOIDmode, tmp, si);\n-      emit_insn (load);\n-      upper = expand_simple_binop (DImode, ASHIFT, upper, GEN_INT (32),\n-\t\t\t\t   NULL, 1, OPTAB_DIRECT);\n-      reg = expand_simple_binop (DImode, IOR, reg, upper, reg, 1,\n-\t\t\t\t OPTAB_DIRECT);\n-    }\n-  else\n-    {\n-      rtvec vec = rtvec_alloc (2);\n-      rtx load = gen_rtx_PARALLEL (VOIDmode, vec);\n-      RTVEC_ELT (vec, 0) = gen_rtx_SET (VOIDmode, reg, di);\n-      RTVEC_ELT (vec, 1) = gen_rtx_SET (VOIDmode, tmp, si);\n-      emit_insn (load);\n-    }\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], reg));\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[1], tmp));\n-  DONE;\n-})\n-\n-(define_insn \"*rdtscp\"\n+(define_insn \"rdtscp\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=A\")\n \t(unspec_volatile:DI [(const_int 0)] UNSPECV_RDTSCP))\n    (set (match_operand:SI 1 \"register_operand\" \"=c\")\n@@ -18123,11 +18023,11 @@\n   [(set_attr \"type\" \"other\")\n    (set_attr \"length\" \"3\")])\n \n-(define_insn \"*rdtscp_rex64\"\n+(define_insn \"rdtscp_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n \t(unspec_volatile:DI [(const_int 0)] UNSPECV_RDTSCP))\n    (set (match_operand:DI 1 \"register_operand\" \"=d\")\n-        (unspec_volatile:DI [(const_int 0)] UNSPECV_RDTSCP))\n+\t(unspec_volatile:DI [(const_int 0)] UNSPECV_RDTSCP))\n    (set (match_operand:SI 2 \"register_operand\" \"=c\")\n \t(unspec_volatile:SI [(const_int 0)] UNSPECV_RDTSCP))]\n   \"TARGET_64BIT\""}]}