{"sha": "35e2b6e1622210481b6c3118f55fc99a049d504b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVlMmI2ZTE2MjIyMTA0ODFiNmMzMTE4ZjU1ZmM5OWEwNDlkNTA0Yg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-11-11T10:51:31Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-11-11T10:51:31Z"}, "message": "[Patch] PR tree-optimization/68234 Improve range info for loop Phi node\n\n2015-11-11  Richard Biener  <rguenth@gcc.gnu.org>\n\t    Jiong Wang      <jiong.wang@arm.com>\ngcc/\n  PR tree-optimization/68234\n  * tree-vrp.c (vrp_visit_phi_node): Extend SCEV check to those loop PHI\n  node which estimiated to be VR_VARYING initially.\n\ngcc/testsuite/\n  * gcc.dg/tree-ssa/pr68234.c: New testcase. \n\n\nCo-Authored-By: Jiong Wang <jiong.wang@arm.com>\n\nFrom-SVN: r230150", "tree": {"sha": "3d93e4ac15fc77f974ba640c8472f3c383ec3855", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d93e4ac15fc77f974ba640c8472f3c383ec3855"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35e2b6e1622210481b6c3118f55fc99a049d504b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35e2b6e1622210481b6c3118f55fc99a049d504b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35e2b6e1622210481b6c3118f55fc99a049d504b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35e2b6e1622210481b6c3118f55fc99a049d504b/comments", "author": null, "committer": null, "parents": [{"sha": "394b24ea80626c5464f842f574a57547fb024ad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394b24ea80626c5464f842f574a57547fb024ad6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/394b24ea80626c5464f842f574a57547fb024ad6"}], "stats": {"total": 75, "additions": 61, "deletions": 14}, "files": [{"sha": "ad69a402d51da9b47b31e291cb4b44d4ee87dbe3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35e2b6e1622210481b6c3118f55fc99a049d504b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35e2b6e1622210481b6c3118f55fc99a049d504b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35e2b6e1622210481b6c3118f55fc99a049d504b", "patch": "@@ -1,3 +1,10 @@\n+2015-11-11  Richard Biener  <rguenth@gcc.gnu.org>\n+\t    Jiong Wang\t    <jiong.wang@arm.com>\n+\n+\tPR tree-optimization/68234\n+\t* tree-vrp.c (vrp_visit_phi_node): Extend SCEV check to those loop PHI\n+\tnode which estimiated to be VR_VARYING initially.\n+\n 2015-11-11  Robert Suchanek  <robert.suchanek@imgtec.com>\n \n \t* regname.c (scan_rtx_reg): Check the matching number of consecutive"}, {"sha": "59cae93a19b572d674786eb10b1ea4d92966e05a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35e2b6e1622210481b6c3118f55fc99a049d504b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35e2b6e1622210481b6c3118f55fc99a049d504b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=35e2b6e1622210481b6c3118f55fc99a049d504b", "patch": "@@ -1,3 +1,8 @@\n+2015-11-11  Richard Biener  <rguenth@gcc.gnu.org>\n+\t    Jiong Wang\t    <jiong.wang@arm.com>\n+\n+\t* gcc.dg/tree-ssa/pr68234.c: New testcase. \n+\n 2015-11-10  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* gcc.dg/goacc/nvptx-opt-1.c: New test."}, {"sha": "e7c2a95aa4cd59f3c65d2de14b8386f5cb3c5786", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr68234.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35e2b6e1622210481b6c3118f55fc99a049d504b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr68234.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35e2b6e1622210481b6c3118f55fc99a049d504b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr68234.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr68234.c?ref=35e2b6e1622210481b6c3118f55fc99a049d504b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp2\" } */\n+\n+extern int nc;\n+void ff (unsigned long long);\n+\n+void\n+f (void)\n+{\n+  unsigned char resp[1024];\n+  int c;\n+  int bl = 0;\n+  unsigned long long *dwords = (unsigned long long *) (resp + 5);\n+  for (c = 0; c < nc; c++)\n+    {\n+      /* PR middle-end/68234, this signed division should be optimized into\n+\t right shift as vrp pass should deduct range info of 'bl' falls into\n+\t positive number.  */\n+      ff (dwords[bl / 64]);\n+      bl++;\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump \">> 6\" \"vrp2\" } } */"}, {"sha": "e2393e4d3a06c184ef5e4a27e9e931022e137cb9", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35e2b6e1622210481b6c3118f55fc99a049d504b/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35e2b6e1622210481b6c3118f55fc99a049d504b/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=35e2b6e1622210481b6c3118f55fc99a049d504b", "patch": "@@ -8810,20 +8810,11 @@ vrp_visit_phi_node (gphi *phi)\n \n       /* If we dropped either bound to +-INF then if this is a loop\n \t PHI node SCEV may known more about its value-range.  */\n-      if ((cmp_min > 0 || cmp_min < 0\n+      if (cmp_min > 0 || cmp_min < 0\n \t   || cmp_max < 0 || cmp_max > 0)\n-\t  && (l = loop_containing_stmt (phi))\n-\t  && l->header == gimple_bb (phi))\n-\tadjust_range_with_scev (&vr_result, l, phi, lhs);\n-\n-      /* If we will end up with a (-INF, +INF) range, set it to\n-\t VARYING.  Same if the previous max value was invalid for\n-\t the type and we end up with vr_result.min > vr_result.max.  */\n-      if ((vrp_val_is_max (vr_result.max)\n-\t   && vrp_val_is_min (vr_result.min))\n-\t  || compare_values (vr_result.min,\n-\t\t\t     vr_result.max) > 0)\n-\tgoto varying;\n+\tgoto scev_check;\n+\n+      goto infinite_check;\n     }\n \n   /* If the new range is different than the previous value, keep\n@@ -8849,8 +8840,28 @@ vrp_visit_phi_node (gphi *phi)\n   /* Nothing changed, don't add outgoing edges.  */\n   return SSA_PROP_NOT_INTERESTING;\n \n-  /* No match found.  Set the LHS to VARYING.  */\n varying:\n+  set_value_range_to_varying (&vr_result);\n+\n+scev_check:\n+  /* If this is a loop PHI node SCEV may known more about its value-range.\n+     scev_check can be reached from two paths, one is a fall through from above\n+     \"varying\" label, the other is direct goto from code block which tries to\n+     avoid infinite simulation.  */\n+  if ((l = loop_containing_stmt (phi))\n+      && l->header == gimple_bb (phi))\n+    adjust_range_with_scev (&vr_result, l, phi, lhs);\n+\n+infinite_check:\n+  /* If we will end up with a (-INF, +INF) range, set it to\n+     VARYING.  Same if the previous max value was invalid for\n+     the type and we end up with vr_result.min > vr_result.max.  */\n+  if ((vr_result.type == VR_RANGE || vr_result.type == VR_ANTI_RANGE)\n+      && !((vrp_val_is_max (vr_result.max) && vrp_val_is_min (vr_result.min))\n+\t   || compare_values (vr_result.min, vr_result.max) > 0))\n+    goto update_range;\n+\n+  /* No match found.  Set the LHS to VARYING.  */\n   set_value_range_to_varying (lhs_vr);\n   return SSA_PROP_VARYING;\n }"}]}