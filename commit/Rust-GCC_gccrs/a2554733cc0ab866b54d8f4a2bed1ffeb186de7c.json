{"sha": "a2554733cc0ab866b54d8f4a2bed1ffeb186de7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI1NTQ3MzNjYzBhYjg2NmI1NGQ4ZjRhMmJlZDFmZmViMTg2ZGU3Yw==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@users.sourceforge.net", "date": "2002-08-09T06:00:18Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-08-09T06:00:18Z"}, "message": "istream.tcc (basic_istream::ignore): Use sbumpc, not snextc.\n\n\n2002-08-08  Danny Smith  <dannysmith@users.sourceforge.net>\n            Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/istream.tcc (basic_istream::ignore): Use sbumpc,\n\tnot snextc.\n\nCo-Authored-By: Benjamin Kosnik <bkoz@redhat.com>\n\nFrom-SVN: r56153", "tree": {"sha": "d1f803c6038fe5f0014d177df3994e8d17ed22ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1f803c6038fe5f0014d177df3994e8d17ed22ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2554733cc0ab866b54d8f4a2bed1ffeb186de7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2554733cc0ab866b54d8f4a2bed1ffeb186de7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2554733cc0ab866b54d8f4a2bed1ffeb186de7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2554733cc0ab866b54d8f4a2bed1ffeb186de7c/comments", "author": null, "committer": null, "parents": [{"sha": "55202bee3c719dd0dc4d9a68fc7bf3edf66374af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55202bee3c719dd0dc4d9a68fc7bf3edf66374af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55202bee3c719dd0dc4d9a68fc7bf3edf66374af"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "5d19ef5a039aeee59640022e7c8eed8aa081c99f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2554733cc0ab866b54d8f4a2bed1ffeb186de7c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2554733cc0ab866b54d8f4a2bed1ffeb186de7c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a2554733cc0ab866b54d8f4a2bed1ffeb186de7c", "patch": "@@ -1,3 +1,10 @@\n+2002-08-08  Danny Smith  <dannysmith@users.sourceforge.net>\n+            Benjamin Kosnik  <bkoz@redhat.com>\n+\t\n+\t* include/bits/istream.tcc (basic_istream::ignore): Use sbumpc,\n+\tnot snextc.\n+\t* testsuite/27_io/narrow_stream_objects.cc (test10): Add.\n+\t\n 2002-08-07  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* libsupc++/Makefile.am (LTCOMPILE): Add LIBSUPCXX_PICFLAGS."}, {"sha": "58e2caf02cdfcbd61dbeb0a02617f7824fc95d47", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2554733cc0ab866b54d8f4a2bed1ffeb186de7c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2554733cc0ab866b54d8f4a2bed1ffeb186de7c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=a2554733cc0ab866b54d8f4a2bed1ffeb186de7c", "patch": "@@ -722,23 +722,18 @@ namespace std\n \t    {\n \t      const int_type __eof = traits_type::eof();\n \t      __streambuf_type* __sb = this->rdbuf();\n-\t      int_type __c = __sb->sgetc();\t\n+\t      int_type __c;\n \t      \n \t      __n = min(__n, numeric_limits<streamsize>::max());\n \t      while (_M_gcount < __n  \n-\t\t     && !traits_type::eq_int_type(__c, __eof) \n-\t\t     && !traits_type::eq_int_type(__c, __delim))\n+\t\t     && !traits_type::eq_int_type(__c = __sb->sbumpc(), __eof))\n \t\t{\n-\t\t  __c = __sb->snextc();\n \t\t  ++_M_gcount;\n+\t\t  if (traits_type::eq_int_type(__c, __delim))\n+\t\t    break;\n \t\t}\n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\tthis->setstate(ios_base::eofbit);\n-\t      else if (traits_type::eq_int_type(__c, __delim))\n-\t\t{\n-\t\t  __sb->sbumpc();\n-\t\t  ++_M_gcount;\n-\t\t}\n \t    }\n \t  catch(exception& __fail)\n \t    {"}, {"sha": "0ee1fce5bfa6b3fa9ebc50b26513325cb0cf3182", "filename": "libstdc++-v3/testsuite/27_io/narrow_stream_objects.cc", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2554733cc0ab866b54d8f4a2bed1ffeb186de7c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2554733cc0ab866b54d8f4a2bed1ffeb186de7c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc?ref=a2554733cc0ab866b54d8f4a2bed1ffeb186de7c", "patch": "@@ -66,7 +66,8 @@\n #include <cstdlib>\n #include <cstring>\n #include <ctime>\n-#include <testsuite_hooks.h>\n+//#include <testsuite_hooks.h>\n+#define VERIFY(x) x\n \n // Include iostream last, just to make is as difficult as possible to\n // properly initialize the standard iostream objects.\n@@ -116,19 +117,20 @@ void test03()\n // Interactive test, to be exercised as follows:\n // assign stderr to stdout in shell command line,\n // pipe stdout to cat process and/or redirect stdout to file.\n-// \"hello fine world\\n\" should be written to stdout in proper order.\n-// This is a version of the scott snyder test taken from:\n-// http://gcc.gnu.org/ml/libstdc++/1999-q4/msg00108.html\n+// a.out >& output\n+// \"hello fine world\\n\" should be written to stdout, and output, in\n+// proper order.  This is a version of the scott snyder test taken\n+// from: http://gcc.gnu.org/ml/libstdc++/1999-q4/msg00108.html\n void test04()\n {\n   using namespace std;\n \n   cout << \"hello \";\n-  cout.flush ();\n+  cout.flush();\n   cerr << \"fine \";\n-  cerr.flush ();\n+  cerr.flush();\n   cout << \"world\" << endl;\n-  cout.flush ();\n+  cout.flush();\n }\n \n // Interactive test, to be exercised as follows:\n@@ -138,7 +140,7 @@ void test04()\n // depending upon buffering mode enforced.\n void test05()\n {\n-  std::cout << \"hello\" << ' ' << \"world\" <<std::endl;\n+  std::cout << \"hello\" << ' ' << \"world\" << std::endl;\n   std::cout << \"Enter your name: \";\n   std::string s;\n   std::cin >> s;\n@@ -169,7 +171,7 @@ void test06()\n void test07()\n {\n   bool test = true;\n-  std::cout << \"Please, enter 'test':\";\n+  std::cout << \"Enter 'test':\";\n   std::string s;\n   std::getline(std::cin, s, '\\n');\n   VERIFY( s == \"test\" );\n@@ -188,10 +190,21 @@ void test08()\n void test09()\n {\n   bool test = true;\n-  std::cout << \"Enter name: \";\n+  std::cout << \"Enter favorite beach: \";\n   std::cin.ignore(2048, '\\n');\n }\n \n+// http://gcc.gnu.org/ml/libstdc++/2002-08/msg00060.html\n+// Should only have to hit enter once.\n+void\n+test10()\n+{\n+  using namespace std;\n+  cout << \"Press ENTER once\\n\";\n+  cin.ignore(1);\n+  cout << \"_M_gcount: \"<< cin.gcount() << endl;\n+}\n+\n int \n main()\n {\n@@ -205,5 +218,6 @@ main()\n   // test07();\n   // test08();\n   // test09();\n+  // test10();\n   return 0;\n }"}]}