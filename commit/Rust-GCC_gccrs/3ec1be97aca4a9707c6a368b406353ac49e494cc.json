{"sha": "3ec1be97aca4a9707c6a368b406353ac49e494cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VjMWJlOTdhY2E0YTk3MDdjNmEzNjhiNDA2MzUzYWM0OWU0OTRjYw==", "commit": {"author": {"name": "Charles Baylis", "email": "charles.baylis@linaro.org", "date": "2014-10-24T14:58:51Z"}, "committer": {"name": "Charles Baylis", "email": "cbaylis@gcc.gnu.org", "date": "2014-10-24T14:58:51Z"}, "message": "[PATCH 1/2] [AARCH64,NEON] Add patterns + builtins for vld[234](q?)_lane_* intrinsics\n\n2014-10-24  Charles Baylis  <charles.baylis@linaro.org>\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_types_loadstruct_lane_qualifiers): Define.\n\t* config/aarch64/aarch64-simd-builtins.def (ld2_lane, ld3_lane,\n\tld4_lane): New builtins.\n\t* config/aarch64/aarch64-simd.md (aarch64_vec_load_lanesoi_lane<mode>):\n\tNew pattern.\n\t(aarch64_vec_load_lanesci_lane<mode>): Likewise.\n\t(aarch64_vec_load_lanesxi_lane<mode>): Likewise.\n\t(aarch64_ld2_lane<mode>): New expand.\n\t(aarch64_ld3_lane<mode>): Likewise.\n\t(aarch64_ld4_lane<mode>): Likewise.\n\t* config/aarch64/aarch64.md (define_c_enum \"unspec\"): Add\n\tUNSPEC_LD2_LANE, UNSPEC_LD3_LANE, UNSPEC_LD4_LANE.\n\nFrom-SVN: r216671", "tree": {"sha": "13371b2e8237f3eb370f61ad3057b64ff27e90cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13371b2e8237f3eb370f61ad3057b64ff27e90cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ec1be97aca4a9707c6a368b406353ac49e494cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ec1be97aca4a9707c6a368b406353ac49e494cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ec1be97aca4a9707c6a368b406353ac49e494cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ec1be97aca4a9707c6a368b406353ac49e494cc/comments", "author": null, "committer": null, "parents": [{"sha": "4eb1ac391342da4425a386611624dca21eee441d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eb1ac391342da4425a386611624dca21eee441d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eb1ac391342da4425a386611624dca21eee441d"}], "stats": {"total": 124, "additions": 124, "deletions": 0}, "files": [{"sha": "698944c527d010c44e5dc44a1207988c7376a6e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ec1be97aca4a9707c6a368b406353ac49e494cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ec1be97aca4a9707c6a368b406353ac49e494cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ec1be97aca4a9707c6a368b406353ac49e494cc", "patch": "@@ -1,3 +1,20 @@\n+2014-10-24  Charles Baylis  <charles.baylis@linaro.org>\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_types_loadstruct_lane_qualifiers): Define.\n+\t* config/aarch64/aarch64-simd-builtins.def (ld2_lane, ld3_lane,\n+\tld4_lane): New builtins.\n+\t* config/aarch64/aarch64-simd.md (aarch64_vec_load_lanesoi_lane<mode>):\n+\tNew pattern.\n+\t(aarch64_vec_load_lanesci_lane<mode>): Likewise.\n+\t(aarch64_vec_load_lanesxi_lane<mode>): Likewise.\n+\t(aarch64_ld2_lane<mode>): New expand.\n+\t(aarch64_ld3_lane<mode>): Likewise.\n+\t(aarch64_ld4_lane<mode>): Likewise.\n+\t* config/aarch64/aarch64.md (define_c_enum \"unspec\"): Add\n+\tUNSPEC_LD2_LANE, UNSPEC_LD3_LANE, UNSPEC_LD4_LANE.\n+\n+Change-Id: I4c36d18072215133573e07483cfe12165201c339\n+\n 2014-10-24  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* avr-protos.h (avr_out_sign_extend): New."}, {"sha": "368d3a76bc3f9f26afa882cec531c3875621e853", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ec1be97aca4a9707c6a368b406353ac49e494cc/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ec1be97aca4a9707c6a368b406353ac49e494cc/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=3ec1be97aca4a9707c6a368b406353ac49e494cc", "patch": "@@ -201,6 +201,11 @@ aarch64_types_load1_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_const_pointer_map_mode };\n #define TYPES_LOAD1 (aarch64_types_load1_qualifiers)\n #define TYPES_LOADSTRUCT (aarch64_types_load1_qualifiers)\n+static enum aarch64_type_qualifiers\n+aarch64_types_loadstruct_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_const_pointer_map_mode,\n+      qualifier_none, qualifier_none };\n+#define TYPES_LOADSTRUCT_LANE (aarch64_types_loadstruct_lane_qualifiers)\n \n static enum aarch64_type_qualifiers\n aarch64_types_bsl_p_qualifiers[SIMD_MAX_BUILTIN_ARGS]"}, {"sha": "5d0e7d8a714e73dd9f8258435891052f47702e66", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ec1be97aca4a9707c6a368b406353ac49e494cc/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ec1be97aca4a9707c6a368b406353ac49e494cc/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=3ec1be97aca4a9707c6a368b406353ac49e494cc", "patch": "@@ -87,6 +87,10 @@\n   BUILTIN_VALLDIF (LOADSTRUCT, ld2r, 0)\n   BUILTIN_VALLDIF (LOADSTRUCT, ld3r, 0)\n   BUILTIN_VALLDIF (LOADSTRUCT, ld4r, 0)\n+  /* Implemented by aarch64_ld<VSTRUCT:nregs>_lane<VQ:mode>.  */\n+  BUILTIN_VQ (LOADSTRUCT_LANE, ld2_lane, 0)\n+  BUILTIN_VQ (LOADSTRUCT_LANE, ld3_lane, 0)\n+  BUILTIN_VQ (LOADSTRUCT_LANE, ld4_lane, 0)\n   /* Implemented by aarch64_st<VSTRUCT:nregs><VDC:mode>.  */\n   BUILTIN_VDC (STORESTRUCT, st2, 0)\n   BUILTIN_VDC (STORESTRUCT, st3, 0)"}, {"sha": "b260bc62a2f259aa5e82fa457fe644144de54274", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ec1be97aca4a9707c6a368b406353ac49e494cc/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ec1be97aca4a9707c6a368b406353ac49e494cc/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=3ec1be97aca4a9707c6a368b406353ac49e494cc", "patch": "@@ -4001,6 +4001,18 @@\n   [(set_attr \"type\" \"neon_load2_all_lanes<q>\")]\n )\n \n+(define_insn \"aarch64_vec_load_lanesoi_lane<mode>\"\n+  [(set (match_operand:OI 0 \"register_operand\" \"=w\")\n+\t(unspec:OI [(match_operand:<V_TWO_ELEM> 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+\t\t    (match_operand:OI 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:SI 3 \"immediate_operand\" \"i\")\n+\t\t    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY) ]\n+\t\t   UNSPEC_LD2_LANE))]\n+  \"TARGET_SIMD\"\n+  \"ld2\\\\t{%S0.<Vetype> - %T0.<Vetype>}[%3], %1\"\n+  [(set_attr \"type\" \"neon_load2_one_lane\")]\n+)\n+\n (define_insn \"vec_store_lanesoi<mode>\"\n   [(set (match_operand:OI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n \t(unspec:OI [(match_operand:OI 1 \"register_operand\" \"w\")\n@@ -4042,6 +4054,18 @@\n   [(set_attr \"type\" \"neon_load3_all_lanes<q>\")]\n )\n \n+(define_insn \"aarch64_vec_load_lanesci_lane<mode>\"\n+  [(set (match_operand:CI 0 \"register_operand\" \"=w\")\n+\t(unspec:CI [(match_operand:<V_THREE_ELEM> 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+\t\t    (match_operand:CI 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:SI 3 \"immediate_operand\" \"i\")\n+\t\t    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t\t   UNSPEC_LD3_LANE))]\n+  \"TARGET_SIMD\"\n+  \"ld3\\\\t{%S0.<Vetype> - %U0.<Vetype>}[%3], %1\"\n+  [(set_attr \"type\" \"neon_load3_one_lane\")]\n+)\n+\n (define_insn \"vec_store_lanesci<mode>\"\n   [(set (match_operand:CI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n \t(unspec:CI [(match_operand:CI 1 \"register_operand\" \"w\")\n@@ -4083,6 +4107,18 @@\n   [(set_attr \"type\" \"neon_load4_all_lanes<q>\")]\n )\n \n+(define_insn \"aarch64_vec_load_lanesxi_lane<mode>\"\n+  [(set (match_operand:XI 0 \"register_operand\" \"=w\")\n+\t(unspec:XI [(match_operand:<V_FOUR_ELEM> 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+\t\t    (match_operand:XI 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:SI 3 \"immediate_operand\" \"i\")\n+\t\t    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t\t   UNSPEC_LD4_LANE))]\n+  \"TARGET_SIMD\"\n+  \"ld4\\\\t{%S0.<Vetype> - %V0.<Vetype>}[%3], %1\"\n+  [(set_attr \"type\" \"neon_load4_one_lane\")]\n+)\n+\n (define_insn \"vec_store_lanesxi<mode>\"\n   [(set (match_operand:XI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n \t(unspec:XI [(match_operand:XI 1 \"register_operand\" \"w\")\n@@ -4435,6 +4471,65 @@\n   DONE;\n })\n \n+(define_expand \"aarch64_ld2_lane<mode>\"\n+  [(match_operand:OI 0 \"register_operand\" \"=w\")\n+\t(match_operand:DI 1 \"register_operand\" \"w\")\n+\t(match_operand:OI 2 \"register_operand\" \"0\")\n+\t(match_operand:SI 3 \"immediate_operand\" \"i\")\n+\t(unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+  \"TARGET_SIMD\"\n+{\n+  enum machine_mode mode = <V_TWO_ELEM>mode;\n+  rtx mem = gen_rtx_MEM (mode, operands[1]);\n+\n+  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n+  emit_insn (gen_aarch64_vec_load_lanesoi_lane<mode> (operands[0],\n+\t\t\t\t\t\t      mem,\n+\t\t\t\t\t\t      operands[2],\n+\t\t\t\t\t\t      operands[3]));\n+  DONE;\n+})\n+\n+(define_expand \"aarch64_ld3_lane<mode>\"\n+  [(match_operand:CI 0 \"register_operand\" \"=w\")\n+\t(match_operand:DI 1 \"register_operand\" \"w\")\n+\t(match_operand:CI 2 \"register_operand\" \"0\")\n+\t(match_operand:SI 3 \"immediate_operand\" \"i\")\n+\t(unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+  \"TARGET_SIMD\"\n+{\n+  enum machine_mode mode = <V_THREE_ELEM>mode;\n+  rtx mem = gen_rtx_MEM (mode, operands[1]);\n+\n+  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n+  emit_insn (gen_aarch64_vec_load_lanesci_lane<mode> (operands[0],\n+\t\t\t\t\t\t      mem,\n+\t\t\t\t\t\t      operands[2],\n+\t\t\t\t\t\t      operands[3]));\n+  DONE;\n+})\n+\n+(define_expand \"aarch64_ld4_lane<mode>\"\n+  [(match_operand:XI 0 \"register_operand\" \"=w\")\n+\t(match_operand:DI 1 \"register_operand\" \"w\")\n+\t(match_operand:XI 2 \"register_operand\" \"0\")\n+\t(match_operand:SI 3 \"immediate_operand\" \"i\")\n+\t(unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+  \"TARGET_SIMD\"\n+{\n+  enum machine_mode mode = <V_FOUR_ELEM>mode;\n+  rtx mem = gen_rtx_MEM (mode, operands[1]);\n+\n+  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n+  emit_insn (gen_aarch64_vec_load_lanesxi_lane<mode> (operands[0],\n+\t\t\t\t\t\t      mem,\n+\t\t\t\t\t\t      operands[2],\n+\t\t\t\t\t\t      operands[3]));\n+  DONE;\n+})\n+\n+\n+\n ;; Expanders for builtins to extract vector registers from large\n ;; opaque integer modes.\n "}, {"sha": "341c26f42d867f4de484c87d5f1aed0dd0fbf6e4", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ec1be97aca4a9707c6a368b406353ac49e494cc/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ec1be97aca4a9707c6a368b406353ac49e494cc/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=3ec1be97aca4a9707c6a368b406353ac49e494cc", "patch": "@@ -95,6 +95,9 @@\n     UNSPEC_LD3_DUP\n     UNSPEC_LD4\n     UNSPEC_LD4_DUP\n+    UNSPEC_LD2_LANE\n+    UNSPEC_LD3_LANE\n+    UNSPEC_LD4_LANE\n     UNSPEC_MB\n     UNSPEC_NOP\n     UNSPEC_PRLG_STK"}]}