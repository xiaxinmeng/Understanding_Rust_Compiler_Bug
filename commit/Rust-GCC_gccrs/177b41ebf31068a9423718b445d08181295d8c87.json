{"sha": "177b41ebf31068a9423718b445d08181295d8c87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc3YjQxZWJmMzEwNjhhOTQyMzcxOGI0NDVkMDgxODEyOTVkOGM4Nw==", "commit": {"author": {"name": "Roman Lechtchinsky", "email": "rl@cs.tu-berlin.de", "date": "2001-09-07T22:33:56Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-09-07T22:33:56Z"}, "message": "real.c (EMUSHORT,EMUSHORT_SIZE): Use HImode if no 16-bit type is available.\n\n        * real.c (EMUSHORT,EMUSHORT_SIZE): Use HImode if no 16-bit type is\n        available.\n        (UEMUSHORT): New. Use instead of unsigned EMUSHORT.\n        (m16m,edivm,emulm): Change declaration to match definition.\n\nFrom-SVN: r45481", "tree": {"sha": "fe2aaf100e3d35763bd84f8a1f349692db79647a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe2aaf100e3d35763bd84f8a1f349692db79647a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/177b41ebf31068a9423718b445d08181295d8c87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/177b41ebf31068a9423718b445d08181295d8c87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/177b41ebf31068a9423718b445d08181295d8c87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/177b41ebf31068a9423718b445d08181295d8c87/comments", "author": null, "committer": null, "parents": [{"sha": "b4905cba94fdf2453bef733450cc2daa42f7f3c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4905cba94fdf2453bef733450cc2daa42f7f3c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4905cba94fdf2453bef733450cc2daa42f7f3c6"}], "stats": {"total": 929, "additions": 475, "deletions": 454}, "files": [{"sha": "559e8b43c1714aa3184be092d2771286bbd98f43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177b41ebf31068a9423718b445d08181295d8c87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177b41ebf31068a9423718b445d08181295d8c87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=177b41ebf31068a9423718b445d08181295d8c87", "patch": "@@ -1,3 +1,10 @@\n+2001-09-07  Roman Lechtchinsky  <rl@cs.tu-berlin.de>\n+\n+\t* real.c (EMUSHORT,EMUSHORT_SIZE): Use HImode if no 16-bit type is\n+\tavailable.\n+\t(UEMUSHORT): New. Use instead of unsigned EMUSHORT.\n+\t(m16m,edivm,emulm): Change declaration to match definition.\n+\n 2001-09-07  Roman Lechtchinsky <rl@cs.tu-berlin.de>\n \n \t* reload.c (push_reload): Check for subreg_lowpart_p instead of"}, {"sha": "f525e69a62dbcfa57c4c66e3d99b0b65d72e442f", "filename": "gcc/real.c", "status": "modified", "additions": 468, "deletions": 454, "changes": 922, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177b41ebf31068a9423718b445d08181295d8c87/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177b41ebf31068a9423718b445d08181295d8c87/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=177b41ebf31068a9423718b445d08181295d8c87", "patch": "@@ -213,6 +213,21 @@ unknown arithmetic type\n #endif\n #endif\n \n+/* If no 16-bit type has been found and the compiler is GCC, try HImode.  */\n+#if defined(__GNUC__) && EMUSHORT_SIZE != 16\n+typedef int HItype __attribute__ ((mode (HI)));\n+typedef unsigned int UHItype __attribute__ ((mode (HI)));\n+#undef EMUSHORT\n+#undef EMUSHORT_SIZE\n+#undef EMULONG_SIZE\n+#define EMUSHORT HItype\n+#define UEMUSHORT UHItype\n+#define EMUSHORT_SIZE 16\n+#define EMULONG_SIZE 32\n+#else\n+#define UEMUSHORT unsigned EMUSHORT\n+#endif\n+\n #if HOST_BITS_PER_SHORT >= EMULONG_SIZE\n #define EMULONG short\n #else\n@@ -282,10 +297,10 @@ unknown arithmetic type\n #define GET_REAL(r,e)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n      if (HOST_FLOAT_WORDS_BIG_ENDIAN == REAL_WORDS_BIG_ENDIAN)\t\t\\\n-       e53toe ((unsigned EMUSHORT *) (r), (e));\t\t\t\t\\\n+       e53toe ((UEMUSHORT *) (r), (e));\t\t\t\t\\\n      else\t\t\t\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n-\t unsigned EMUSHORT w[4];\t\t\t\t\t\\\n+\t UEMUSHORT w[4];\t\t\t\t\t\\\n          memcpy (&w[3], ((EMUSHORT *) r), sizeof (EMUSHORT));\t\t\\\n          memcpy (&w[2], ((EMUSHORT *) r) + 1, sizeof (EMUSHORT));\t\\\n          memcpy (&w[1], ((EMUSHORT *) r) + 2, sizeof (EMUSHORT));\t\\\n@@ -297,10 +312,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define PUT_REAL(e,r)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n      if (HOST_FLOAT_WORDS_BIG_ENDIAN == REAL_WORDS_BIG_ENDIAN)\t\t\\\n-       etoe53 ((e), (unsigned EMUSHORT *) (r));\t\t\t\t\\\n+       etoe53 ((e), (UEMUSHORT *) (r));\t\t\t\t\\\n      else\t\t\t\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n-\t unsigned EMUSHORT w[4];\t\t\t\t\t\\\n+\t UEMUSHORT w[4];\t\t\t\t\t\\\n \t etoe53 ((e), w);\t\t\t\t\t\t\\\n          memcpy (((EMUSHORT *) r), &w[3], sizeof (EMUSHORT));\t\t\\\n          memcpy (((EMUSHORT *) r) + 1, &w[2], sizeof (EMUSHORT));\t\\\n@@ -312,8 +327,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n #else /* not REAL_ARITHMETIC */\n \n /* emulator uses host format */\n-#define GET_REAL(r,e) e53toe ((unsigned EMUSHORT *) (r), (e))\n-#define PUT_REAL(e,r) etoe53 ((e), (unsigned EMUSHORT *) (r))\n+#define GET_REAL(r,e) e53toe ((UEMUSHORT *) (r), (e))\n+#define PUT_REAL(e,r) etoe53 ((e), (UEMUSHORT *) (r))\n \n #endif /* not REAL_ARITHMETIC */\n #endif /* not TFmode */\n@@ -348,143 +363,142 @@ do {\t\t\t\t\t\t\t\t\t\\\n #endif\n \n extern int extra_warnings;\n-extern unsigned EMUSHORT ezero[], ehalf[], eone[], etwo[];\n-extern unsigned EMUSHORT elog2[], esqrt2[];\n+extern UEMUSHORT ezero[], ehalf[], eone[], etwo[];\n+extern UEMUSHORT elog2[], esqrt2[];\n \n-static void endian\tPARAMS ((unsigned EMUSHORT *, long *,\n+static void endian\tPARAMS ((UEMUSHORT *, long *,\n \t\t\t       enum machine_mode));\n-static void eclear\tPARAMS ((unsigned EMUSHORT *));\n-static void emov\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n+static void eclear\tPARAMS ((UEMUSHORT *));\n+static void emov\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n #if 0\n-static void eabs\tPARAMS ((unsigned EMUSHORT *));\n+static void eabs\tPARAMS ((UEMUSHORT *));\n #endif\n-static void eneg\tPARAMS ((unsigned EMUSHORT *));\n-static int eisneg\tPARAMS ((unsigned EMUSHORT *));\n-static int eisinf\tPARAMS ((unsigned EMUSHORT *));\n-static int eisnan\tPARAMS ((unsigned EMUSHORT *));\n-static void einfin\tPARAMS ((unsigned EMUSHORT *));\n+static void eneg\tPARAMS ((UEMUSHORT *));\n+static int eisneg\tPARAMS ((UEMUSHORT *));\n+static int eisinf\tPARAMS ((UEMUSHORT *));\n+static int eisnan\tPARAMS ((UEMUSHORT *));\n+static void einfin\tPARAMS ((UEMUSHORT *));\n #ifdef NANS\n-static void enan\tPARAMS ((unsigned EMUSHORT *, int));\n-static void einan\tPARAMS ((unsigned EMUSHORT *));\n-static int eiisnan\tPARAMS ((unsigned EMUSHORT *));\n-static int eiisneg\tPARAMS ((unsigned EMUSHORT *));\n-static void make_nan\tPARAMS ((unsigned EMUSHORT *, int, enum machine_mode));\n-#endif\n-static void emovi\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void emovo\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void ecleaz\tPARAMS ((unsigned EMUSHORT *));\n-static void ecleazs\tPARAMS ((unsigned EMUSHORT *));\n-static void emovz\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n+static void enan\tPARAMS ((UEMUSHORT *, int));\n+static void einan\tPARAMS ((UEMUSHORT *));\n+static int eiisnan\tPARAMS ((UEMUSHORT *));\n+static int eiisneg\tPARAMS ((UEMUSHORT *));\n+static void make_nan\tPARAMS ((UEMUSHORT *, int, enum machine_mode));\n+#endif\n+static void emovi\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void emovo\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void ecleaz\tPARAMS ((UEMUSHORT *));\n+static void ecleazs\tPARAMS ((UEMUSHORT *));\n+static void emovz\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n #if 0\n-static void eiinfin\tPARAMS ((unsigned EMUSHORT *));\n+static void eiinfin\tPARAMS ((UEMUSHORT *));\n #endif\n #ifdef INFINITY\n-static int eiisinf\tPARAMS ((unsigned EMUSHORT *));\n-#endif\n-static int ecmpm\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void eshdn1\tPARAMS ((unsigned EMUSHORT *));\n-static void eshup1\tPARAMS ((unsigned EMUSHORT *));\n-static void eshdn8\tPARAMS ((unsigned EMUSHORT *));\n-static void eshup8\tPARAMS ((unsigned EMUSHORT *));\n-static void eshup6\tPARAMS ((unsigned EMUSHORT *));\n-static void eshdn6\tPARAMS ((unsigned EMUSHORT *));\n-static void eaddm\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\f\n-static void esubm\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void m16m\tPARAMS ((unsigned int, unsigned short *,\n-\t\t\t       unsigned short *));\n-static int edivm\tPARAMS ((unsigned short *, unsigned short *));\n-static int emulm\tPARAMS ((unsigned short *, unsigned short *));\n-static void emdnorm\tPARAMS ((unsigned EMUSHORT *, int, int, EMULONG, int));\n-static void esub\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *,\n-\t\t\t       unsigned EMUSHORT *));\n-static void eadd\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *,\n-\t\t\t       unsigned EMUSHORT *));\n-static void eadd1\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *,\n-\t\t\t       unsigned EMUSHORT *));\n-static void ediv\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *,\n-\t\t\t       unsigned EMUSHORT *));\n-static void emul\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *,\n-\t\t\t       unsigned EMUSHORT *));\n-static void e53toe\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void e64toe\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n+static int eiisinf\tPARAMS ((UEMUSHORT *));\n+#endif\n+static int ecmpm\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void eshdn1\tPARAMS ((UEMUSHORT *));\n+static void eshup1\tPARAMS ((UEMUSHORT *));\n+static void eshdn8\tPARAMS ((UEMUSHORT *));\n+static void eshup8\tPARAMS ((UEMUSHORT *));\n+static void eshup6\tPARAMS ((UEMUSHORT *));\n+static void eshdn6\tPARAMS ((UEMUSHORT *));\n+static void eaddm\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\f\n+static void esubm\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void m16m\tPARAMS ((unsigned int, UEMUSHORT *, UEMUSHORT *));\n+static int edivm\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static int emulm\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void emdnorm\tPARAMS ((UEMUSHORT *, int, int, EMULONG, int));\n+static void esub\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n+\t\t\t       UEMUSHORT *));\n+static void eadd\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n+\t\t\t       UEMUSHORT *));\n+static void eadd1\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n+\t\t\t       UEMUSHORT *));\n+static void ediv\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n+\t\t\t       UEMUSHORT *));\n+static void emul\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n+\t\t\t       UEMUSHORT *));\n+static void e53toe\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void e64toe\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n #if (INTEL_EXTENDED_IEEE_FORMAT == 0)\n-static void e113toe\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-#endif\n-static void e24toe\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void etoe113\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void toe113\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void etoe64\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void toe64\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void etoe53\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void toe53\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void etoe24\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void toe24\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static int ecmp\t\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n+static void e113toe\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+#endif\n+static void e24toe\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void etoe113\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void toe113\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void etoe64\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void toe64\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void etoe53\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void toe53\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void etoe24\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void toe24\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static int ecmp\t\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n #if 0\n-static void eround\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-#endif\n-static void ltoe\tPARAMS ((HOST_WIDE_INT *, unsigned EMUSHORT *));\n-static void ultoe\tPARAMS ((unsigned HOST_WIDE_INT *, unsigned EMUSHORT *));\n-static void eifrac\tPARAMS ((unsigned EMUSHORT *, HOST_WIDE_INT *,\n-\t\t\t       unsigned EMUSHORT *));\n-static void euifrac\tPARAMS ((unsigned EMUSHORT *, unsigned HOST_WIDE_INT *,\n-\t\t\t       unsigned EMUSHORT *));\n-static int eshift\tPARAMS ((unsigned EMUSHORT *, int));\n-static int enormlz\tPARAMS ((unsigned EMUSHORT *));\n+static void eround\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+#endif\n+static void ltoe\tPARAMS ((HOST_WIDE_INT *, UEMUSHORT *));\n+static void ultoe\tPARAMS ((unsigned HOST_WIDE_INT *, UEMUSHORT *));\n+static void eifrac\tPARAMS ((UEMUSHORT *, HOST_WIDE_INT *,\n+\t\t\t       UEMUSHORT *));\n+static void euifrac\tPARAMS ((UEMUSHORT *, unsigned HOST_WIDE_INT *,\n+\t\t\t       UEMUSHORT *));\n+static int eshift\tPARAMS ((UEMUSHORT *, int));\n+static int enormlz\tPARAMS ((UEMUSHORT *));\n #if 0\n-static void e24toasc\tPARAMS ((unsigned EMUSHORT *, char *, int));\n-static void e53toasc\tPARAMS ((unsigned EMUSHORT *, char *, int));\n-static void e64toasc\tPARAMS ((unsigned EMUSHORT *, char *, int));\n-static void e113toasc\tPARAMS ((unsigned EMUSHORT *, char *, int));\n+static void e24toasc\tPARAMS ((UEMUSHORT *, char *, int));\n+static void e53toasc\tPARAMS ((UEMUSHORT *, char *, int));\n+static void e64toasc\tPARAMS ((UEMUSHORT *, char *, int));\n+static void e113toasc\tPARAMS ((UEMUSHORT *, char *, int));\n #endif /* 0 */\n-static void etoasc\tPARAMS ((unsigned EMUSHORT *, char *, int));\n-static void asctoe24\tPARAMS ((const char *, unsigned EMUSHORT *));\n-static void asctoe53\tPARAMS ((const char *, unsigned EMUSHORT *));\n-static void asctoe64\tPARAMS ((const char *, unsigned EMUSHORT *));\n+static void etoasc\tPARAMS ((UEMUSHORT *, char *, int));\n+static void asctoe24\tPARAMS ((const char *, UEMUSHORT *));\n+static void asctoe53\tPARAMS ((const char *, UEMUSHORT *));\n+static void asctoe64\tPARAMS ((const char *, UEMUSHORT *));\n #if (INTEL_EXTENDED_IEEE_FORMAT == 0)\n-static void asctoe113\tPARAMS ((const char *, unsigned EMUSHORT *));\n+static void asctoe113\tPARAMS ((const char *, UEMUSHORT *));\n #endif\n-static void asctoe\tPARAMS ((const char *, unsigned EMUSHORT *));\n-static void asctoeg\tPARAMS ((const char *, unsigned EMUSHORT *, int));\n-static void efloor\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n+static void asctoe\tPARAMS ((const char *, UEMUSHORT *));\n+static void asctoeg\tPARAMS ((const char *, UEMUSHORT *, int));\n+static void efloor\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n #if 0\n-static void efrexp\tPARAMS ((unsigned EMUSHORT *, int *,\n-\t\t\t       unsigned EMUSHORT *));\n+static void efrexp\tPARAMS ((UEMUSHORT *, int *,\n+\t\t\t       UEMUSHORT *));\n #endif\n-static void eldexp\tPARAMS ((unsigned EMUSHORT *, int, unsigned EMUSHORT *));\n+static void eldexp\tPARAMS ((UEMUSHORT *, int, UEMUSHORT *));\n #if 0\n-static void eremain\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *,\n-\t\t\t       unsigned EMUSHORT *));\n+static void eremain\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n+\t\t\t       UEMUSHORT *));\n #endif\n-static void eiremain\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n+static void eiremain\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n static void mtherr\tPARAMS ((const char *, int));\n #ifdef DEC\n-static void dectoe\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void etodec\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void todec\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n+static void dectoe\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void etodec\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void todec\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n #endif\n #ifdef IBM\n-static void ibmtoe\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *,\n+static void ibmtoe\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n \t\t\t       enum machine_mode));\n-static void etoibm\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *,\n+static void etoibm\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n \t\t\t       enum machine_mode));\n-static void toibm\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *,\n+static void toibm\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n \t\t\t       enum machine_mode));\n #endif\n #ifdef C4X\n-static void c4xtoe\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *,\n+static void c4xtoe\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n  \t\t\t       enum machine_mode));\n-static void etoc4x\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *,\n+static void etoc4x\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n  \t\t\t       enum machine_mode));\n-static void toc4x\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *,\n+static void toc4x\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n  \t\t\t       enum machine_mode));\n #endif\n #if 0\n-static void uditoe\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void ditoe\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void etoudi\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void etodi\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n-static void esqrt\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n+static void uditoe\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void ditoe\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void etoudi\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void etodi\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void esqrt\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n #endif\n \f\n /* Copy 32-bit numbers obtained from array containing 16-bit numbers,\n@@ -493,7 +507,7 @@ static void esqrt\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n \n static void\n endian (e, x, mode)\n-     unsigned EMUSHORT e[];\n+     UEMUSHORT e[];\n      long x[];\n      enum machine_mode mode;\n {\n@@ -599,7 +613,7 @@ earith (value, icode, r1, r2)\n      REAL_VALUE_TYPE *r1;\n      REAL_VALUE_TYPE *r2;\n {\n-  unsigned EMUSHORT d1[NE], d2[NE], v[NE];\n+  UEMUSHORT d1[NE], d2[NE], v[NE];\n   enum tree_code code;\n \n   GET_REAL (r1, d1);\n@@ -675,7 +689,7 @@ REAL_VALUE_TYPE\n etrunci (x)\n      REAL_VALUE_TYPE x;\n {\n-  unsigned EMUSHORT f[NE], g[NE];\n+  UEMUSHORT f[NE], g[NE];\n   REAL_VALUE_TYPE r;\n   HOST_WIDE_INT l;\n \n@@ -698,7 +712,7 @@ REAL_VALUE_TYPE\n etruncui (x)\n      REAL_VALUE_TYPE x;\n {\n-  unsigned EMUSHORT f[NE], g[NE];\n+  UEMUSHORT f[NE], g[NE];\n   REAL_VALUE_TYPE r;\n   unsigned HOST_WIDE_INT l;\n \n@@ -723,7 +737,7 @@ ereal_atof (s, t)\n      const char *s;\n      enum machine_mode t;\n {\n-  unsigned EMUSHORT tem[NE], e[NE];\n+  UEMUSHORT tem[NE], e[NE];\n   REAL_VALUE_TYPE r;\n \n   switch (t)\n@@ -775,7 +789,7 @@ REAL_VALUE_TYPE\n ereal_negate (x)\n      REAL_VALUE_TYPE x;\n {\n-  unsigned EMUSHORT e[NE];\n+  UEMUSHORT e[NE];\n   REAL_VALUE_TYPE r;\n \n   GET_REAL (&x, e);\n@@ -792,7 +806,7 @@ HOST_WIDE_INT\n efixi (x)\n      REAL_VALUE_TYPE x;\n {\n-  unsigned EMUSHORT f[NE], g[NE];\n+  UEMUSHORT f[NE], g[NE];\n   HOST_WIDE_INT l;\n \n   GET_REAL (&x, f);\n@@ -815,7 +829,7 @@ unsigned HOST_WIDE_INT\n efixui (x)\n      REAL_VALUE_TYPE x;\n {\n-  unsigned EMUSHORT f[NE], g[NE];\n+  UEMUSHORT f[NE], g[NE];\n   unsigned HOST_WIDE_INT l;\n \n   GET_REAL (&x, f);\n@@ -839,7 +853,7 @@ ereal_from_int (d, i, j, mode)\n      HOST_WIDE_INT i, j;\n      enum machine_mode mode;\n {\n-  unsigned EMUSHORT df[NE], dg[NE];\n+  UEMUSHORT df[NE], dg[NE];\n   HOST_WIDE_INT low, high;\n   int sign;\n \n@@ -911,7 +925,7 @@ ereal_from_uint (d, i, j, mode)\n      unsigned HOST_WIDE_INT i, j;\n      enum machine_mode mode;\n {\n-  unsigned EMUSHORT df[NE], dg[NE];\n+  UEMUSHORT df[NE], dg[NE];\n   unsigned HOST_WIDE_INT low, high;\n \n   if (GET_MODE_CLASS (mode) != MODE_FLOAT)\n@@ -969,7 +983,7 @@ ereal_to_int (low, high, rr)\n      HOST_WIDE_INT *low, *high;\n      REAL_VALUE_TYPE rr;\n {\n-  unsigned EMUSHORT d[NE], df[NE], dg[NE], dh[NE];\n+  UEMUSHORT d[NE], df[NE], dg[NE], dh[NE];\n   int s;\n \n   GET_REAL (&rr, d);\n@@ -1013,7 +1027,7 @@ ereal_ldexp (x, n)\n      REAL_VALUE_TYPE x;\n      int n;\n {\n-  unsigned EMUSHORT e[NE], y[NE];\n+  UEMUSHORT e[NE], y[NE];\n   REAL_VALUE_TYPE r;\n \n   GET_REAL (&x, e);\n@@ -1038,7 +1052,7 @@ target_isinf (x)\n      REAL_VALUE_TYPE x ATTRIBUTE_UNUSED;\n {\n #ifdef INFINITY\n-  unsigned EMUSHORT e[NE];\n+  UEMUSHORT e[NE];\n \n   GET_REAL (&x, e);\n   return (eisinf (e));\n@@ -1054,7 +1068,7 @@ target_isnan (x)\n      REAL_VALUE_TYPE x ATTRIBUTE_UNUSED;\n {\n #ifdef NANS\n-  unsigned EMUSHORT e[NE];\n+  UEMUSHORT e[NE];\n \n   GET_REAL (&x, e);\n   return (eisnan (e));\n@@ -1082,7 +1096,7 @@ real_value_truncate (mode, arg)\n      enum machine_mode mode;\n      REAL_VALUE_TYPE arg;\n {\n-  unsigned EMUSHORT e[NE], t[NE];\n+  UEMUSHORT e[NE], t[NE];\n   REAL_VALUE_TYPE r;\n \n   GET_REAL (&arg, e);\n@@ -1150,7 +1164,7 @@ exact_real_inverse (mode, r)\n      enum machine_mode mode;\n      REAL_VALUE_TYPE *r;\n {\n-  unsigned EMUSHORT e[NE], einv[NE];\n+  UEMUSHORT e[NE], einv[NE];\n   REAL_VALUE_TYPE rinv;\n   int i;\n \n@@ -1239,7 +1253,7 @@ etartdouble (r, l)\n      REAL_VALUE_TYPE r;\n      long l[];\n {\n-  unsigned EMUSHORT e[NE];\n+  UEMUSHORT e[NE];\n \n   GET_REAL (&r, e);\n   etoe113 (e, e);\n@@ -1255,7 +1269,7 @@ etarldouble (r, l)\n      REAL_VALUE_TYPE r;\n      long l[];\n {\n-  unsigned EMUSHORT e[NE];\n+  UEMUSHORT e[NE];\n \n   GET_REAL (&r, e);\n   etoe64 (e, e);\n@@ -1270,7 +1284,7 @@ etardouble (r, l)\n      REAL_VALUE_TYPE r;\n      long l[];\n {\n-  unsigned EMUSHORT e[NE];\n+  UEMUSHORT e[NE];\n \n   GET_REAL (&r, e);\n   etoe53 (e, e);\n@@ -1284,7 +1298,7 @@ long\n etarsingle (r)\n      REAL_VALUE_TYPE r;\n {\n-  unsigned EMUSHORT e[NE];\n+  UEMUSHORT e[NE];\n   long l;\n \n   GET_REAL (&r, e);\n@@ -1303,7 +1317,7 @@ ereal_to_decimal (x, s)\n      REAL_VALUE_TYPE x;\n      char *s;\n {\n-  unsigned EMUSHORT e[NE];\n+  UEMUSHORT e[NE];\n \n   GET_REAL (&x, e);\n   etoasc (e, s, 20);\n@@ -1316,7 +1330,7 @@ int\n ereal_cmp (x, y)\n      REAL_VALUE_TYPE x, y;\n {\n-  unsigned EMUSHORT ex[NE], ey[NE];\n+  UEMUSHORT ex[NE], ey[NE];\n \n   GET_REAL (&x, ex);\n   GET_REAL (&y, ey);\n@@ -1329,7 +1343,7 @@ int\n ereal_isneg (x)\n      REAL_VALUE_TYPE x;\n {\n-  unsigned EMUSHORT ex[NE];\n+  UEMUSHORT ex[NE];\n \n   GET_REAL (&x, ex);\n   return (eisneg (ex));\n@@ -1515,70 +1529,70 @@ ereal_isneg (x)\n \n #if MAX_LONG_DOUBLE_TYPE_SIZE == 128 && (INTEL_EXTENDED_IEEE_FORMAT == 0)\n /* 0.0 */\n-unsigned EMUSHORT ezero[NE] =\n+UEMUSHORT ezero[NE] =\n  {0x0000, 0x0000, 0x0000, 0x0000,\n   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,};\n-extern unsigned EMUSHORT ezero[];\n+extern UEMUSHORT ezero[];\n \n /* 5.0E-1 */\n-unsigned EMUSHORT ehalf[NE] =\n+UEMUSHORT ehalf[NE] =\n  {0x0000, 0x0000, 0x0000, 0x0000,\n   0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0x3ffe,};\n-extern unsigned EMUSHORT ehalf[];\n+extern UEMUSHORT ehalf[];\n \n /* 1.0E0 */\n-unsigned EMUSHORT eone[NE] =\n+UEMUSHORT eone[NE] =\n  {0x0000, 0x0000, 0x0000, 0x0000,\n   0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0x3fff,};\n-extern unsigned EMUSHORT eone[];\n+extern UEMUSHORT eone[];\n \n /* 2.0E0 */\n-unsigned EMUSHORT etwo[NE] =\n+UEMUSHORT etwo[NE] =\n  {0x0000, 0x0000, 0x0000, 0x0000,\n   0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0x4000,};\n-extern unsigned EMUSHORT etwo[];\n+extern UEMUSHORT etwo[];\n \n /* 3.2E1 */\n-unsigned EMUSHORT e32[NE] =\n+UEMUSHORT e32[NE] =\n  {0x0000, 0x0000, 0x0000, 0x0000,\n   0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0x4004,};\n-extern unsigned EMUSHORT e32[];\n+extern UEMUSHORT e32[];\n \n /* 6.93147180559945309417232121458176568075500134360255E-1 */\n-unsigned EMUSHORT elog2[NE] =\n+UEMUSHORT elog2[NE] =\n  {0x40f3, 0xf6af, 0x03f2, 0xb398,\n   0xc9e3, 0x79ab, 0150717, 0013767, 0130562, 0x3ffe,};\n-extern unsigned EMUSHORT elog2[];\n+extern UEMUSHORT elog2[];\n \n /* 1.41421356237309504880168872420969807856967187537695E0 */\n-unsigned EMUSHORT esqrt2[NE] =\n+UEMUSHORT esqrt2[NE] =\n  {0x1d6f, 0xbe9f, 0x754a, 0x89b3,\n   0x597d, 0x6484, 0174736, 0171463, 0132404, 0x3fff,};\n-extern unsigned EMUSHORT esqrt2[];\n+extern UEMUSHORT esqrt2[];\n \n /* 3.14159265358979323846264338327950288419716939937511E0 */\n-unsigned EMUSHORT epi[NE] =\n+UEMUSHORT epi[NE] =\n  {0x2902, 0x1cd1, 0x80dc, 0x628b,\n   0xc4c6, 0xc234, 0020550, 0155242, 0144417, 0040000,};\n-extern unsigned EMUSHORT epi[];\n+extern UEMUSHORT epi[];\n \n #else\n /* LONG_DOUBLE_TYPE_SIZE is other than 128 */\n-unsigned EMUSHORT ezero[NE] =\n+UEMUSHORT ezero[NE] =\n  {0, 0000000, 0000000, 0000000, 0000000, 0000000,};\n-unsigned EMUSHORT ehalf[NE] =\n+UEMUSHORT ehalf[NE] =\n  {0, 0000000, 0000000, 0000000, 0100000, 0x3ffe,};\n-unsigned EMUSHORT eone[NE] =\n+UEMUSHORT eone[NE] =\n  {0, 0000000, 0000000, 0000000, 0100000, 0x3fff,};\n-unsigned EMUSHORT etwo[NE] =\n+UEMUSHORT etwo[NE] =\n  {0, 0000000, 0000000, 0000000, 0100000, 0040000,};\n-unsigned EMUSHORT e32[NE] =\n+UEMUSHORT e32[NE] =\n  {0, 0000000, 0000000, 0000000, 0100000, 0040004,};\n-unsigned EMUSHORT elog2[NE] =\n+UEMUSHORT elog2[NE] =\n  {0xc9e4, 0x79ab, 0150717, 0013767, 0130562, 0x3ffe,};\n-unsigned EMUSHORT esqrt2[NE] =\n+UEMUSHORT esqrt2[NE] =\n  {0x597e, 0x6484, 0174736, 0171463, 0132404, 0x3fff,};\n-unsigned EMUSHORT epi[NE] =\n+UEMUSHORT epi[NE] =\n  {0xc4c6, 0xc234, 0020550, 0155242, 0144417, 0040000,};\n #endif\n \n@@ -1592,7 +1606,7 @@ extern int rndprc;\n \n static void\n eclear (x)\n-     register unsigned EMUSHORT *x;\n+     register UEMUSHORT *x;\n {\n   register int i;\n \n@@ -1604,7 +1618,7 @@ eclear (x)\n \n static void\n emov (a, b)\n-     register unsigned EMUSHORT *a, *b;\n+     register UEMUSHORT *a, *b;\n {\n   register int i;\n \n@@ -1618,7 +1632,7 @@ emov (a, b)\n \n static void\n eabs (x)\n-     unsigned EMUSHORT x[];\n+     UEMUSHORT x[];\n {\n   /* sign is top bit of last word of external format */\n   x[NE - 1] &= 0x7fff;\n@@ -1629,7 +1643,7 @@ eabs (x)\n \n static void\n eneg (x)\n-     unsigned EMUSHORT x[];\n+     UEMUSHORT x[];\n {\n \n   x[NE - 1] ^= 0x8000;\t\t/* Toggle the sign bit */\n@@ -1639,7 +1653,7 @@ eneg (x)\n \n static int\n eisneg (x)\n-     unsigned EMUSHORT x[];\n+     UEMUSHORT x[];\n {\n \n   if (x[NE - 1] & 0x8000)\n@@ -1652,7 +1666,7 @@ eisneg (x)\n \n static int\n eisinf (x)\n-     unsigned EMUSHORT x[];\n+     UEMUSHORT x[];\n {\n \n #ifdef NANS\n@@ -1670,7 +1684,7 @@ eisinf (x)\n \n static int\n eisnan (x)\n-     unsigned EMUSHORT x[] ATTRIBUTE_UNUSED;\n+     UEMUSHORT x[] ATTRIBUTE_UNUSED;\n {\n #ifdef NANS\n   int i;\n@@ -1694,7 +1708,7 @@ eisnan (x)\n \n static void\n einfin (x)\n-     register unsigned EMUSHORT *x;\n+     register UEMUSHORT *x;\n {\n   register int i;\n \n@@ -1738,7 +1752,7 @@ einfin (x)\n #ifdef NANS\n static void\n enan (x, sign)\n-     register unsigned EMUSHORT *x;\n+     register UEMUSHORT *x;\n      int sign;\n {\n   register int i;\n@@ -1754,9 +1768,9 @@ enan (x, sign)\n \n static void\n emovi (a, b)\n-     unsigned EMUSHORT *a, *b;\n+     UEMUSHORT *a, *b;\n {\n-  register unsigned EMUSHORT *p, *q;\n+  register UEMUSHORT *p, *q;\n   int i;\n \n   q = b;\n@@ -1801,10 +1815,10 @@ emovi (a, b)\n \n static void\n emovo (a, b)\n-     unsigned EMUSHORT *a, *b;\n+     UEMUSHORT *a, *b;\n {\n-  register unsigned EMUSHORT *p, *q;\n-  unsigned EMUSHORT i;\n+  register UEMUSHORT *p, *q;\n+  UEMUSHORT i;\n   int j;\n \n   p = a;\n@@ -1840,7 +1854,7 @@ emovo (a, b)\n \n static void\n ecleaz (xi)\n-     register unsigned EMUSHORT *xi;\n+     register UEMUSHORT *xi;\n {\n   register int i;\n \n@@ -1852,7 +1866,7 @@ ecleaz (xi)\n \n static void\n ecleazs (xi)\n-     register unsigned EMUSHORT *xi;\n+     register UEMUSHORT *xi;\n {\n   register int i;\n \n@@ -1865,7 +1879,7 @@ ecleazs (xi)\n \n static void\n emovz (a, b)\n-     register unsigned EMUSHORT *a, *b;\n+     register UEMUSHORT *a, *b;\n {\n   register int i;\n \n@@ -1882,7 +1896,7 @@ emovz (a, b)\n #ifdef NANS\n static void\n einan (x)\n-     unsigned EMUSHORT x[];\n+     UEMUSHORT x[];\n {\n \n   ecleaz (x);\n@@ -1896,7 +1910,7 @@ einan (x)\n #ifdef NANS\n static int\n eiisnan (x)\n-     unsigned EMUSHORT x[];\n+     UEMUSHORT x[];\n {\n   int i;\n \n@@ -1917,7 +1931,7 @@ eiisnan (x)\n #ifdef NANS\n static int\n eiisneg (x)\n-     unsigned EMUSHORT x[];\n+     UEMUSHORT x[];\n {\n \n   return x[0] != 0;\n@@ -1930,7 +1944,7 @@ eiisneg (x)\n \n static void\n eiinfin (x)\n-     unsigned EMUSHORT x[];\n+     UEMUSHORT x[];\n {\n \n   ecleaz (x);\n@@ -1943,7 +1957,7 @@ eiinfin (x)\n #ifdef INFINITY\n static int\n eiisinf (x)\n-     unsigned EMUSHORT x[];\n+     UEMUSHORT x[];\n {\n \n #ifdef NANS\n@@ -1965,7 +1979,7 @@ eiisinf (x)\n \n static int\n ecmpm (a, b)\n-     register unsigned EMUSHORT *a, *b;\n+     register UEMUSHORT *a, *b;\n {\n   int i;\n \n@@ -1989,9 +2003,9 @@ ecmpm (a, b)\n \n static void\n eshdn1 (x)\n-     register unsigned EMUSHORT *x;\n+     register UEMUSHORT *x;\n {\n-  register unsigned EMUSHORT bits;\n+  register UEMUSHORT bits;\n   int i;\n \n   x += M;\t\t\t/* point to significand area */\n@@ -2013,9 +2027,9 @@ eshdn1 (x)\n \n static void\n eshup1 (x)\n-     register unsigned EMUSHORT *x;\n+     register UEMUSHORT *x;\n {\n-  register unsigned EMUSHORT bits;\n+  register UEMUSHORT bits;\n   int i;\n \n   x += NI - 1;\n@@ -2038,9 +2052,9 @@ eshup1 (x)\n \n static void\n eshdn8 (x)\n-     register unsigned EMUSHORT *x;\n+     register UEMUSHORT *x;\n {\n-  register unsigned EMUSHORT newbyt, oldbyt;\n+  register UEMUSHORT newbyt, oldbyt;\n   int i;\n \n   x += M;\n@@ -2059,10 +2073,10 @@ eshdn8 (x)\n \n static void\n eshup8 (x)\n-     register unsigned EMUSHORT *x;\n+     register UEMUSHORT *x;\n {\n   int i;\n-  register unsigned EMUSHORT newbyt, oldbyt;\n+  register UEMUSHORT newbyt, oldbyt;\n \n   x += NI - 1;\n   oldbyt = 0;\n@@ -2081,10 +2095,10 @@ eshup8 (x)\n \n static void\n eshup6 (x)\n-     register unsigned EMUSHORT *x;\n+     register UEMUSHORT *x;\n {\n   int i;\n-  register unsigned EMUSHORT *p;\n+  register UEMUSHORT *p;\n \n   p = x + M;\n   x += M + 1;\n@@ -2099,10 +2113,10 @@ eshup6 (x)\n \n static void\n eshdn6 (x)\n-     register unsigned EMUSHORT *x;\n+     register UEMUSHORT *x;\n {\n   int i;\n-  register unsigned EMUSHORT *p;\n+  register UEMUSHORT *p;\n \n   x += NI - 1;\n   p = x + 1;\n@@ -2117,7 +2131,7 @@ eshdn6 (x)\n \n static void\n eaddm (x, y)\n-     unsigned EMUSHORT *x, *y;\n+     UEMUSHORT *x, *y;\n {\n   register unsigned EMULONG a;\n   int i;\n@@ -2133,7 +2147,7 @@ eaddm (x, y)\n \tcarry = 1;\n       else\n \tcarry = 0;\n-      *y = (unsigned EMUSHORT) a;\n+      *y = (UEMUSHORT) a;\n       --x;\n       --y;\n     }\n@@ -2143,7 +2157,7 @@ eaddm (x, y)\n \n static void\n esubm (x, y)\n-     unsigned EMUSHORT *x, *y;\n+     UEMUSHORT *x, *y;\n {\n   unsigned EMULONG a;\n   int i;\n@@ -2159,14 +2173,14 @@ esubm (x, y)\n \tcarry = 1;\n       else\n \tcarry = 0;\n-      *y = (unsigned EMUSHORT) a;\n+      *y = (UEMUSHORT) a;\n       --x;\n       --y;\n     }\n }\n \n \n-static unsigned EMUSHORT equot[NI];\n+static UEMUSHORT equot[NI];\n \n \n #if 0\n@@ -2177,11 +2191,11 @@ static unsigned EMUSHORT equot[NI];\n \n int\n edivm (den, num)\n-     unsigned EMUSHORT den[], num[];\n+     UEMUSHORT den[], num[];\n {\n   int i;\n-  register unsigned EMUSHORT *p, *q;\n-  unsigned EMUSHORT j;\n+  register UEMUSHORT *p, *q;\n+  UEMUSHORT j;\n \n   p = &equot[0];\n   *p++ = num[0];\n@@ -2275,9 +2289,9 @@ edivm (den, num)\n \n int\n emulm (a, b)\n-     unsigned EMUSHORT a[], b[];\n+     UEMUSHORT a[], b[];\n {\n-  unsigned EMUSHORT *p, *q;\n+  UEMUSHORT *p, *q;\n   int i, j, k;\n \n   equot[0] = b[0];\n@@ -2328,12 +2342,12 @@ emulm (a, b)\n static void\n m16m (a, b, c)\n      unsigned int a;\n-     unsigned EMUSHORT b[], c[];\n+     UEMUSHORT b[], c[];\n {\n-  register unsigned EMUSHORT *pp;\n+  register UEMUSHORT *pp;\n   register unsigned EMULONG carry;\n-  unsigned EMUSHORT *ps;\n-  unsigned EMUSHORT p[NI];\n+  UEMUSHORT *ps;\n+  UEMUSHORT p[NI];\n   unsigned EMULONG aa, m;\n   int i;\n \n@@ -2355,9 +2369,9 @@ m16m (a, b, c)\n \t{\n \t  m = (unsigned EMULONG) aa * *ps--;\n \t  carry = (m & 0xffff) + *pp;\n-\t  *pp-- = (unsigned EMUSHORT)carry;\n+\t  *pp-- = (UEMUSHORT)carry;\n \t  carry = (carry >> 16) + (m >> 16) + *pp;\n-\t  *pp = (unsigned EMUSHORT)carry;\n+\t  *pp = (UEMUSHORT)carry;\n \t  *(pp-1) = carry >> 16;\n \t}\n     }\n@@ -2371,13 +2385,13 @@ m16m (a, b, c)\n \n static int\n edivm (den, num)\n-     unsigned EMUSHORT den[], num[];\n+     UEMUSHORT den[], num[];\n {\n   int i;\n-  register unsigned EMUSHORT *p;\n+  register UEMUSHORT *p;\n   unsigned EMULONG tnum;\n-  unsigned EMUSHORT j, tdenm, tquot;\n-  unsigned EMUSHORT tprod[NI+1];\n+  UEMUSHORT j, tdenm, tquot;\n+  UEMUSHORT tprod[NI+1];\n \n   p = &equot[0];\n   *p++ = num[0];\n@@ -2436,11 +2450,11 @@ edivm (den, num)\n \n static int\n emulm (a, b)\n-     unsigned EMUSHORT a[], b[];\n+     UEMUSHORT a[], b[];\n {\n-  unsigned EMUSHORT *p, *q;\n-  unsigned EMUSHORT pprod[NI];\n-  unsigned EMUSHORT j;\n+  UEMUSHORT *p, *q;\n+  UEMUSHORT pprod[NI];\n+  UEMUSHORT j;\n   int i;\n \n   equot[0] = b[0];\n@@ -2504,22 +2518,22 @@ emulm (a, b)\n \n static int rlast = -1;\n static int rw = 0;\n-static unsigned EMUSHORT rmsk = 0;\n-static unsigned EMUSHORT rmbit = 0;\n-static unsigned EMUSHORT rebit = 0;\n+static UEMUSHORT rmsk = 0;\n+static UEMUSHORT rmbit = 0;\n+static UEMUSHORT rebit = 0;\n static int re = 0;\n-static unsigned EMUSHORT rbit[NI];\n+static UEMUSHORT rbit[NI];\n \n static void\n emdnorm (s, lost, subflg, exp, rcntrl)\n-     unsigned EMUSHORT s[];\n+     UEMUSHORT s[];\n      int lost;\n      int subflg;\n      EMULONG exp;\n      int rcntrl;\n {\n   int i, j;\n-  unsigned EMUSHORT r;\n+  UEMUSHORT r;\n \n   /* Normalize */\n   j = enormlz (s);\n@@ -2719,7 +2733,7 @@ emdnorm (s, lost, subflg, exp, rcntrl)\n   if (exp < 0)\n     s[1] = 0;\n   else\n-    s[1] = (unsigned EMUSHORT) exp;\n+    s[1] = (UEMUSHORT) exp;\n }\n \n /*  Subtract.  C = B - A, all e type numbers.  */\n@@ -2728,7 +2742,7 @@ static int subflg = 0;\n \n static void\n esub (a, b, c)\n-     unsigned EMUSHORT *a, *b, *c;\n+     UEMUSHORT *a, *b, *c;\n {\n \n #ifdef NANS\n@@ -2760,7 +2774,7 @@ esub (a, b, c)\n \n static void\n eadd (a, b, c)\n-     unsigned EMUSHORT *a, *b, *c;\n+     UEMUSHORT *a, *b, *c;\n {\n \n #ifdef NANS\n@@ -2793,9 +2807,9 @@ eadd (a, b, c)\n \n static void\n eadd1 (a, b, c)\n-     unsigned EMUSHORT *a, *b, *c;\n+     UEMUSHORT *a, *b, *c;\n {\n-  unsigned EMUSHORT ai[NI], bi[NI], ci[NI];\n+  UEMUSHORT ai[NI], bi[NI], ci[NI];\n   int i, lost, j, k;\n   EMULONG lt, lta, ltb;\n \n@@ -2874,7 +2888,7 @@ eadd1 (a, b, c)\n \t\t  break;\n \t\t}\n \t    }\n-\t  bi[E] = (unsigned EMUSHORT) ltb;\n+\t  bi[E] = (UEMUSHORT) ltb;\n \t  goto done;\n \t}\n       if (i > 0)\n@@ -2904,9 +2918,9 @@ eadd1 (a, b, c)\n \n static void\n ediv (a, b, c)\n-     unsigned EMUSHORT *a, *b, *c;\n+     UEMUSHORT *a, *b, *c;\n {\n-  unsigned EMUSHORT ai[NI], bi[NI];\n+  UEMUSHORT ai[NI], bi[NI];\n   int i, sign;\n   EMULONG lt, lta, ltb;\n \n@@ -3008,9 +3022,9 @@ ediv (a, b, c)\n \n static void\n emul (a, b, c)\n-     unsigned EMUSHORT *a, *b, *c;\n+     UEMUSHORT *a, *b, *c;\n {\n-  unsigned EMUSHORT ai[NI], bi[NI];\n+  UEMUSHORT ai[NI], bi[NI];\n   int i, j, sign;\n   EMULONG lt, lta, ltb;\n \n@@ -3104,7 +3118,7 @@ emul (a, b, c)\n \n static void\n e53toe (pe, y)\n-     unsigned EMUSHORT *pe, *y;\n+     UEMUSHORT *pe, *y;\n {\n #ifdef DEC\n \n@@ -3121,9 +3135,9 @@ e53toe (pe, y)\n   c4xtoe (pe, y, HFmode);\n \n #else\n-  register unsigned EMUSHORT r;\n-  register unsigned EMUSHORT *e, *p;\n-  unsigned EMUSHORT yy[NI];\n+  register UEMUSHORT r;\n+  register UEMUSHORT *e, *p;\n+  UEMUSHORT yy[NI];\n   int denorm, k;\n \n   e = pe;\n@@ -3201,7 +3215,7 @@ e53toe (pe, y)\n       if ((k = enormlz (yy)) > NBITS)\n \tecleazs (yy);\n       else\n-\tyy[E] -= (unsigned EMUSHORT) (k - 1);\n+\tyy[E] -= (UEMUSHORT) (k - 1);\n     }\n   emovo (yy, y);\n #endif /* not C4X */\n@@ -3213,10 +3227,10 @@ e53toe (pe, y)\n \n static void\n e64toe (pe, y)\n-     unsigned EMUSHORT *pe, *y;\n+     UEMUSHORT *pe, *y;\n {\n-  unsigned EMUSHORT yy[NI];\n-  unsigned EMUSHORT *e, *p, *q;\n+  UEMUSHORT yy[NI];\n+  UEMUSHORT *e, *p, *q;\n   int i;\n \n   e = pe;\n@@ -3246,7 +3260,7 @@ e64toe (pe, y)\n \t is \"pseudodenormal\" when the exponent is zero.  */\n       if((yy[NE-1] & 0x7fff) == 0 && (yy[NE-2] & 0x8000) == 0)\n \t{\n-\t  unsigned EMUSHORT temp[NI];\n+\t  UEMUSHORT temp[NI];\n \n \t  emovi(yy, temp);\n \t  eshup1(temp);\n@@ -3336,11 +3350,11 @@ e64toe (pe, y)\n \n static void\n e113toe (pe, y)\n-     unsigned EMUSHORT *pe, *y;\n+     UEMUSHORT *pe, *y;\n {\n-  register unsigned EMUSHORT r;\n-  unsigned EMUSHORT *e, *p;\n-  unsigned EMUSHORT yy[NI];\n+  register UEMUSHORT r;\n+  UEMUSHORT *e, *p;\n+  UEMUSHORT yy[NI];\n   int denorm, i;\n \n   e = pe;\n@@ -3422,7 +3436,7 @@ e113toe (pe, y)\n \n static void\n e24toe (pe, y)\n-     unsigned EMUSHORT *pe, *y;\n+     UEMUSHORT *pe, *y;\n {\n #ifdef IBM\n \n@@ -3436,9 +3450,9 @@ e24toe (pe, y)\n \n #else\n \n-  register unsigned EMUSHORT r;\n-  register unsigned EMUSHORT *e, *p;\n-  unsigned EMUSHORT yy[NI];\n+  register UEMUSHORT r;\n+  register UEMUSHORT *e, *p;\n+  UEMUSHORT yy[NI];\n   int denorm, k;\n \n   e = pe;\n@@ -3514,7 +3528,7 @@ e24toe (pe, y)\n       if ((k = enormlz (yy)) > NBITS)\n \tecleazs (yy);\n       else\n-\tyy[E] -= (unsigned EMUSHORT) (k - 1);\n+\tyy[E] -= (UEMUSHORT) (k - 1);\n     }\n   emovo (yy, y);\n #endif /* not C4X */\n@@ -3525,9 +3539,9 @@ e24toe (pe, y)\n \n static void\n etoe113 (x, e)\n-     unsigned EMUSHORT *x, *e;\n+     UEMUSHORT *x, *e;\n {\n-  unsigned EMUSHORT xi[NI];\n+  UEMUSHORT xi[NI];\n   EMULONG exp;\n   int rndsav;\n \n@@ -3560,10 +3574,10 @@ etoe113 (x, e)\n \n static void\n toe113 (a, b)\n-     unsigned EMUSHORT *a, *b;\n+     UEMUSHORT *a, *b;\n {\n-  register unsigned EMUSHORT *p, *q;\n-  unsigned EMUSHORT i;\n+  register UEMUSHORT *p, *q;\n+  UEMUSHORT i;\n \n #ifdef NANS\n   if (eiisnan (a))\n@@ -3618,9 +3632,9 @@ toe113 (a, b)\n \n static void\n etoe64 (x, e)\n-     unsigned EMUSHORT *x, *e;\n+     UEMUSHORT *x, *e;\n {\n-  unsigned EMUSHORT xi[NI];\n+  UEMUSHORT xi[NI];\n   EMULONG exp;\n   int rndsav;\n \n@@ -3654,10 +3668,10 @@ etoe64 (x, e)\n \n static void\n toe64 (a, b)\n-     unsigned EMUSHORT *a, *b;\n+     UEMUSHORT *a, *b;\n {\n-  register unsigned EMUSHORT *p, *q;\n-  unsigned EMUSHORT i;\n+  register UEMUSHORT *p, *q;\n+  UEMUSHORT i;\n \n #ifdef NANS\n   if (eiisnan (a))\n@@ -3771,7 +3785,7 @@ toe64 (a, b)\n \n static void\n etoe53 (x, e)\n-     unsigned EMUSHORT *x, *e;\n+     UEMUSHORT *x, *e;\n {\n   etodec (x, e);\t\t/* see etodec.c */\n }\n@@ -3781,7 +3795,7 @@ etoe53 (x, e)\n \n static void\n toe53 (x, y)\n-     unsigned EMUSHORT *x, *y;\n+     UEMUSHORT *x, *y;\n {\n   todec (x, y);\n }\n@@ -3792,7 +3806,7 @@ toe53 (x, y)\n \n static void\n etoe53 (x, e)\n-     unsigned EMUSHORT *x, *e;\n+     UEMUSHORT *x, *e;\n {\n   etoibm (x, e, DFmode);\n }\n@@ -3802,7 +3816,7 @@ etoe53 (x, e)\n \n static void\n toe53 (x, y)\n-     unsigned EMUSHORT *x, *y;\n+     UEMUSHORT *x, *y;\n {\n   toibm (x, y, DFmode);\n }\n@@ -3813,7 +3827,7 @@ toe53 (x, y)\n \n static void\n etoe53 (x, e)\n-     unsigned EMUSHORT *x, *e;\n+     UEMUSHORT *x, *e;\n {\n   etoc4x (x, e, HFmode);\n }\n@@ -3823,7 +3837,7 @@ etoe53 (x, e)\n \n static void\n toe53 (x, y)\n-     unsigned EMUSHORT *x, *y;\n+     UEMUSHORT *x, *y;\n {\n   toc4x (x, y, HFmode);\n }\n@@ -3834,9 +3848,9 @@ toe53 (x, y)\n \n static void\n etoe53 (x, e)\n-     unsigned EMUSHORT *x, *e;\n+     UEMUSHORT *x, *e;\n {\n-  unsigned EMUSHORT xi[NI];\n+  UEMUSHORT xi[NI];\n   EMULONG exp;\n   int rndsav;\n \n@@ -3870,10 +3884,10 @@ etoe53 (x, e)\n \n static void\n toe53 (x, y)\n-     unsigned EMUSHORT *x, *y;\n+     UEMUSHORT *x, *y;\n {\n-  unsigned EMUSHORT i;\n-  unsigned EMUSHORT *p;\n+  UEMUSHORT i;\n+  UEMUSHORT *p;\n \n #ifdef NANS\n   if (eiisnan (x))\n@@ -3911,7 +3925,7 @@ toe53 (x, y)\n \t  *y++ = 0;\n \t}\n #else\n-      *y |= (unsigned EMUSHORT) 0x7fef;\n+      *y |= (UEMUSHORT) 0x7fef;\n       if (! REAL_WORDS_BIG_ENDIAN)\n \t{\n \t  *(--y) = 0xffff;\n@@ -3937,8 +3951,8 @@ toe53 (x, y)\n       i <<= 4;\n       eshift (x, 5);\n     }\n-  i |= *p++ & (unsigned EMUSHORT) 0x0f;\t/* *p = xi[M] */\n-  *y |= (unsigned EMUSHORT) i;\t/* high order output already has sign bit set */\n+  i |= *p++ & (UEMUSHORT) 0x0f;\t/* *p = xi[M] */\n+  *y |= (UEMUSHORT) i;\t/* high order output already has sign bit set */\n   if (! REAL_WORDS_BIG_ENDIAN)\n     {\n       *(--y) = *p++;\n@@ -3967,7 +3981,7 @@ toe53 (x, y)\n \n static void\n etoe24 (x, e)\n-     unsigned EMUSHORT *x, *e;\n+     UEMUSHORT *x, *e;\n {\n   etoibm (x, e, SFmode);\n }\n@@ -3977,7 +3991,7 @@ etoe24 (x, e)\n \n static void\n toe24 (x, y)\n-     unsigned EMUSHORT *x, *y;\n+     UEMUSHORT *x, *y;\n {\n   toibm (x, y, SFmode);\n }\n@@ -3989,7 +4003,7 @@ toe24 (x, y)\n \n static void\n etoe24 (x, e)\n-     unsigned EMUSHORT *x, *e;\n+     UEMUSHORT *x, *e;\n {\n   etoc4x (x, e, QFmode);\n }\n@@ -3999,7 +4013,7 @@ etoe24 (x, e)\n \n static void\n toe24 (x, y)\n-     unsigned EMUSHORT *x, *y;\n+     UEMUSHORT *x, *y;\n {\n   toc4x (x, y, QFmode);\n }\n@@ -4010,10 +4024,10 @@ toe24 (x, y)\n \n static void\n etoe24 (x, e)\n-     unsigned EMUSHORT *x, *e;\n+     UEMUSHORT *x, *e;\n {\n   EMULONG exp;\n-  unsigned EMUSHORT xi[NI];\n+  UEMUSHORT xi[NI];\n   int rndsav;\n \n #ifdef NANS\n@@ -4046,10 +4060,10 @@ etoe24 (x, e)\n \n static void\n toe24 (x, y)\n-     unsigned EMUSHORT *x, *y;\n+     UEMUSHORT *x, *y;\n {\n-  unsigned EMUSHORT i;\n-  unsigned EMUSHORT *p;\n+  UEMUSHORT i;\n+  UEMUSHORT *p;\n \n #ifdef NANS\n   if (eiisnan (x))\n@@ -4075,7 +4089,7 @@ toe24 (x, y)\n   if (i >= 255)\n     {\n #ifdef INFINITY\n-      *y |= (unsigned EMUSHORT) 0x7f80;\n+      *y |= (UEMUSHORT) 0x7f80;\n #ifdef DEC\n       *(--y) = 0;\n #endif\n@@ -4089,7 +4103,7 @@ toe24 (x, y)\n \t}\n #endif\n #else  /* no INFINITY */\n-      *y |= (unsigned EMUSHORT) 0x7f7f;\n+      *y |= (UEMUSHORT) 0x7f7f;\n #ifdef DEC\n       *(--y) = 0xffff;\n #endif\n@@ -4117,7 +4131,7 @@ toe24 (x, y)\n       i <<= 7;\n       eshift (x, 8);\n     }\n-  i |= *p++ & (unsigned EMUSHORT) 0x7f;\t/* *p = xi[M] */\n+  i |= *p++ & (UEMUSHORT) 0x7f;\t/* *p = xi[M] */\n   /* High order output already has sign bit set.  */\n   *y |= i;\n #ifdef DEC\n@@ -4144,10 +4158,10 @@ toe24 (x, y)\n \n static int\n ecmp (a, b)\n-     unsigned EMUSHORT *a, *b;\n+     UEMUSHORT *a, *b;\n {\n-  unsigned EMUSHORT ai[NI], bi[NI];\n-  register unsigned EMUSHORT *p, *q;\n+  UEMUSHORT ai[NI], bi[NI];\n+  register UEMUSHORT *p, *q;\n   register int i;\n   int msign;\n \n@@ -4207,7 +4221,7 @@ ecmp (a, b)\n \n static void\n eround (x, y)\n-     unsigned EMUSHORT *x, *y;\n+     UEMUSHORT *x, *y;\n {\n   eadd (ehalf, x, y);\n   efloor (y, y);\n@@ -4219,9 +4233,9 @@ eround (x, y)\n static void\n ltoe (lp, y)\n      HOST_WIDE_INT *lp;\n-     unsigned EMUSHORT *y;\n+     UEMUSHORT *y;\n {\n-  unsigned EMUSHORT yi[NI];\n+  UEMUSHORT yi[NI];\n   unsigned HOST_WIDE_INT ll;\n   int k;\n \n@@ -4238,21 +4252,21 @@ ltoe (lp, y)\n     }\n   /* move the long integer to yi significand area */\n #if HOST_BITS_PER_WIDE_INT == 64\n-  yi[M] = (unsigned EMUSHORT) (ll >> 48);\n-  yi[M + 1] = (unsigned EMUSHORT) (ll >> 32);\n-  yi[M + 2] = (unsigned EMUSHORT) (ll >> 16);\n-  yi[M + 3] = (unsigned EMUSHORT) ll;\n+  yi[M] = (UEMUSHORT) (ll >> 48);\n+  yi[M + 1] = (UEMUSHORT) (ll >> 32);\n+  yi[M + 2] = (UEMUSHORT) (ll >> 16);\n+  yi[M + 3] = (UEMUSHORT) ll;\n   yi[E] = EXONE + 47;\t\t/* exponent if normalize shift count were 0 */\n #else\n-  yi[M] = (unsigned EMUSHORT) (ll >> 16);\n-  yi[M + 1] = (unsigned EMUSHORT) ll;\n+  yi[M] = (UEMUSHORT) (ll >> 16);\n+  yi[M + 1] = (UEMUSHORT) ll;\n   yi[E] = EXONE + 15;\t\t/* exponent if normalize shift count were 0 */\n #endif\n \n   if ((k = enormlz (yi)) > NBITS)/* normalize the significand */\n     ecleaz (yi);\t\t/* it was zero */\n   else\n-    yi[E] -= (unsigned EMUSHORT) k;/* subtract shift count from exponent */\n+    yi[E] -= (UEMUSHORT) k;/* subtract shift count from exponent */\n   emovo (yi, y);\t\t/* output the answer */\n }\n \n@@ -4261,9 +4275,9 @@ ltoe (lp, y)\n static void\n ultoe (lp, y)\n      unsigned HOST_WIDE_INT *lp;\n-     unsigned EMUSHORT *y;\n+     UEMUSHORT *y;\n {\n-  unsigned EMUSHORT yi[NI];\n+  UEMUSHORT yi[NI];\n   unsigned HOST_WIDE_INT ll;\n   int k;\n \n@@ -4272,21 +4286,21 @@ ultoe (lp, y)\n \n   /* move the long integer to ayi significand area */\n #if HOST_BITS_PER_WIDE_INT == 64\n-  yi[M] = (unsigned EMUSHORT) (ll >> 48);\n-  yi[M + 1] = (unsigned EMUSHORT) (ll >> 32);\n-  yi[M + 2] = (unsigned EMUSHORT) (ll >> 16);\n-  yi[M + 3] = (unsigned EMUSHORT) ll;\n+  yi[M] = (UEMUSHORT) (ll >> 48);\n+  yi[M + 1] = (UEMUSHORT) (ll >> 32);\n+  yi[M + 2] = (UEMUSHORT) (ll >> 16);\n+  yi[M + 3] = (UEMUSHORT) ll;\n   yi[E] = EXONE + 47;\t\t/* exponent if normalize shift count were 0 */\n #else\n-  yi[M] = (unsigned EMUSHORT) (ll >> 16);\n-  yi[M + 1] = (unsigned EMUSHORT) ll;\n+  yi[M] = (UEMUSHORT) (ll >> 16);\n+  yi[M + 1] = (UEMUSHORT) ll;\n   yi[E] = EXONE + 15;\t\t/* exponent if normalize shift count were 0 */\n #endif\n \n   if ((k = enormlz (yi)) > NBITS)/* normalize the significand */\n     ecleaz (yi);\t\t/* it was zero */\n   else\n-    yi[E] -= (unsigned EMUSHORT) k;  /* subtract shift count from exponent */\n+    yi[E] -= (UEMUSHORT) k;  /* subtract shift count from exponent */\n   emovo (yi, y);\t\t/* output the answer */\n }\n \n@@ -4300,11 +4314,11 @@ ultoe (lp, y)\n \n static void\n eifrac (x, i, frac)\n-     unsigned EMUSHORT *x;\n+     UEMUSHORT *x;\n      HOST_WIDE_INT *i;\n-     unsigned EMUSHORT *frac;\n+     UEMUSHORT *frac;\n {\n-  unsigned EMUSHORT xi[NI];\n+  UEMUSHORT xi[NI];\n   int j, k;\n   unsigned HOST_WIDE_INT ll;\n \n@@ -4371,7 +4385,7 @@ eifrac (x, i, frac)\n   if ((k = enormlz (xi)) > NBITS)\n     ecleaz (xi);\n   else\n-    xi[E] -= (unsigned EMUSHORT) k;\n+    xi[E] -= (UEMUSHORT) k;\n \n   emovo (xi, frac);\n }\n@@ -4383,12 +4397,12 @@ eifrac (x, i, frac)\n \n static void\n euifrac (x, i, frac)\n-     unsigned EMUSHORT *x;\n+     UEMUSHORT *x;\n      unsigned HOST_WIDE_INT *i;\n-     unsigned EMUSHORT *frac;\n+     UEMUSHORT *frac;\n {\n   unsigned HOST_WIDE_INT ll;\n-  unsigned EMUSHORT xi[NI];\n+  UEMUSHORT xi[NI];\n   int j, k;\n \n   emovi (x, xi);\n@@ -4443,7 +4457,7 @@ euifrac (x, i, frac)\n   if ((k = enormlz (xi)) > NBITS)\n     ecleaz (xi);\n   else\n-    xi[E] -= (unsigned EMUSHORT) k;\n+    xi[E] -= (UEMUSHORT) k;\n \n   emovo (xi, frac);\n }\n@@ -4452,11 +4466,11 @@ euifrac (x, i, frac)\n \n static int\n eshift (x, sc)\n-     unsigned EMUSHORT *x;\n+     UEMUSHORT *x;\n      int sc;\n {\n-  unsigned EMUSHORT lost;\n-  unsigned EMUSHORT *p;\n+  UEMUSHORT lost;\n+  UEMUSHORT *p;\n \n   if (sc == 0)\n     return (0);\n@@ -4518,9 +4532,9 @@ eshift (x, sc)\n \n static int\n enormlz (x)\n-     unsigned EMUSHORT x[];\n+     UEMUSHORT x[];\n {\n-  register unsigned EMUSHORT *p;\n+  register UEMUSHORT *p;\n   int sc;\n \n   sc = 0;\n@@ -4588,7 +4602,7 @@ enormlz (x)\n #define MAXP 4096\n \n #if MAX_LONG_DOUBLE_TYPE_SIZE == 128 && (INTEL_EXTENDED_IEEE_FORMAT == 0)\n-static unsigned EMUSHORT etens[NTEN + 1][NE] =\n+static UEMUSHORT etens[NTEN + 1][NE] =\n {\n   {0x6576, 0x4a92, 0x804a, 0x153f,\n    0xc94c, 0x979a, 0x8a20, 0x5202, 0xc460, 0x7525,},\t/* 10**4096 */\n@@ -4618,7 +4632,7 @@ static unsigned EMUSHORT etens[NTEN + 1][NE] =\n    0x0000, 0x0000, 0x0000, 0x0000, 0xa000, 0x4002,},\t/* 10**1 */\n };\n \n-static unsigned EMUSHORT emtens[NTEN + 1][NE] =\n+static UEMUSHORT emtens[NTEN + 1][NE] =\n {\n   {0x2030, 0xcffc, 0xa1c3, 0x8123,\n    0x2de3, 0x9fde, 0xd2ce, 0x04c8, 0xa6dd, 0x0ad8,},\t/* 10**-4096 */\n@@ -4649,7 +4663,7 @@ static unsigned EMUSHORT emtens[NTEN + 1][NE] =\n };\n #else\n /* LONG_DOUBLE_TYPE_SIZE is other than 128 */\n-static unsigned EMUSHORT etens[NTEN + 1][NE] =\n+static UEMUSHORT etens[NTEN + 1][NE] =\n {\n   {0xc94c, 0x979a, 0x8a20, 0x5202, 0xc460, 0x7525,},\t/* 10**4096 */\n   {0xa74d, 0x5de4, 0xc53d, 0x3b5d, 0x9e8b, 0x5a92,},\t/* 10**2048 */\n@@ -4666,7 +4680,7 @@ static unsigned EMUSHORT etens[NTEN + 1][NE] =\n   {0x0000, 0x0000, 0x0000, 0x0000, 0xa000, 0x4002,},\t/* 10**1 */\n };\n \n-static unsigned EMUSHORT emtens[NTEN + 1][NE] =\n+static UEMUSHORT emtens[NTEN + 1][NE] =\n {\n   {0x2de4, 0x9fde, 0xd2ce, 0x04c8, 0xa6dd, 0x0ad8,},\t/* 10**-4096 */\n   {0x4925, 0x2de4, 0x3436, 0x534f, 0xceae, 0x256b,},\t/* 10**-2048 */\n@@ -4690,11 +4704,11 @@ static unsigned EMUSHORT emtens[NTEN + 1][NE] =\n \n static void\n e24toasc (x, string, ndigs)\n-     unsigned EMUSHORT x[];\n+     UEMUSHORT x[];\n      char *string;\n      int ndigs;\n {\n-  unsigned EMUSHORT w[NI];\n+  UEMUSHORT w[NI];\n \n   e24toe (x, w);\n   etoasc (w, string, ndigs);\n@@ -4705,11 +4719,11 @@ e24toasc (x, string, ndigs)\n \n static void\n e53toasc (x, string, ndigs)\n-     unsigned EMUSHORT x[];\n+     UEMUSHORT x[];\n      char *string;\n      int ndigs;\n {\n-  unsigned EMUSHORT w[NI];\n+  UEMUSHORT w[NI];\n \n   e53toe (x, w);\n   etoasc (w, string, ndigs);\n@@ -4720,11 +4734,11 @@ e53toasc (x, string, ndigs)\n \n static void\n e64toasc (x, string, ndigs)\n-     unsigned EMUSHORT x[];\n+     UEMUSHORT x[];\n      char *string;\n      int ndigs;\n {\n-  unsigned EMUSHORT w[NI];\n+  UEMUSHORT w[NI];\n \n   e64toe (x, w);\n   etoasc (w, string, ndigs);\n@@ -4735,11 +4749,11 @@ e64toasc (x, string, ndigs)\n \n static void\n e113toasc (x, string, ndigs)\n-     unsigned EMUSHORT x[];\n+     UEMUSHORT x[];\n      char *string;\n      int ndigs;\n {\n-  unsigned EMUSHORT w[NI];\n+  UEMUSHORT w[NI];\n \n   e113toe (x, w);\n   etoasc (w, string, ndigs);\n@@ -4753,17 +4767,17 @@ static char wstring[80];\t/* working storage for ASCII output */\n \n static void\n etoasc (x, string, ndigs)\n-     unsigned EMUSHORT x[];\n+     UEMUSHORT x[];\n      char *string;\n      int ndigs;\n {\n   EMUSHORT digit;\n-  unsigned EMUSHORT y[NI], t[NI], u[NI], w[NI];\n-  unsigned EMUSHORT *p, *r, *ten;\n-  unsigned EMUSHORT sign;\n+  UEMUSHORT y[NI], t[NI], u[NI], w[NI];\n+  UEMUSHORT *p, *r, *ten;\n+  UEMUSHORT sign;\n   int i, j, k, expon, rndsav;\n   char *s, *ss;\n-  unsigned EMUSHORT m;\n+  UEMUSHORT m;\n \n \n   rndsav = rndprc;\n@@ -5072,7 +5086,7 @@ etoasc (x, string, ndigs)\n static void\n asctoe24 (s, y)\n      const char *s;\n-     unsigned EMUSHORT *y;\n+     UEMUSHORT *y;\n {\n   asctoeg (s, y, 24);\n }\n@@ -5083,7 +5097,7 @@ asctoe24 (s, y)\n static void\n asctoe53 (s, y)\n      const char *s;\n-     unsigned EMUSHORT *y;\n+     UEMUSHORT *y;\n {\n #if defined(DEC) || defined(IBM)\n   asctoeg (s, y, 56);\n@@ -5102,7 +5116,7 @@ asctoe53 (s, y)\n static void\n asctoe64 (s, y)\n      const char *s;\n-     unsigned EMUSHORT *y;\n+     UEMUSHORT *y;\n {\n   asctoeg (s, y, 64);\n }\n@@ -5113,7 +5127,7 @@ asctoe64 (s, y)\n static void\n asctoe113 (s, y)\n      const char *s;\n-     unsigned EMUSHORT *y;\n+     UEMUSHORT *y;\n {\n   asctoeg (s, y, 113);\n }\n@@ -5124,7 +5138,7 @@ asctoe113 (s, y)\n static void\n asctoe (s, y)\n      const char *s;\n-     unsigned EMUSHORT *y;\n+     UEMUSHORT *y;\n {\n   asctoeg (s, y, NBITS);\n }\n@@ -5135,14 +5149,14 @@ asctoe (s, y)\n static void\n asctoeg (ss, y, oprec)\n      const char *ss;\n-     unsigned EMUSHORT *y;\n+     UEMUSHORT *y;\n      int oprec;\n {\n-  unsigned EMUSHORT yy[NI], xt[NI], tt[NI];\n+  UEMUSHORT yy[NI], xt[NI], tt[NI];\n   int esign, decflg, sgnflg, nexp, exp, prec, lost;\n   int i, k, trail, c, rndsav;\n   EMULONG lexp;\n-  unsigned EMUSHORT nsign;\n+  UEMUSHORT nsign;\n   char *sp, *s, *lstr;\n   int base = 10;\n \n@@ -5241,7 +5255,7 @@ asctoeg (ss, y, oprec)\n \t    }\n \t  /* Insert the current digit.  */\n \t  ecleaz (xt);\n-\t  xt[NI - 2] = (unsigned EMUSHORT) k;\n+\t  xt[NI - 2] = (UEMUSHORT) k;\n \t  eaddm (xt, yy);\n \t}\n       else\n@@ -5522,7 +5536,7 @@ asctoeg (ss, y, oprec)\n /* Return Y = largest integer not greater than X (truncated toward minus\n    infinity).  */\n \n-static unsigned EMUSHORT bmask[] =\n+static UEMUSHORT bmask[] =\n {\n   0xffff,\n   0xfffe,\n@@ -5545,11 +5559,11 @@ static unsigned EMUSHORT bmask[] =\n \n static void\n efloor (x, y)\n-     unsigned EMUSHORT x[], y[];\n+     UEMUSHORT x[], y[];\n {\n-  register unsigned EMUSHORT *p;\n+  register UEMUSHORT *p;\n   int e, expon, i;\n-  unsigned EMUSHORT f[NE];\n+  UEMUSHORT f[NE];\n \n   emov (x, f);\t\t\t/* leave in external format */\n   expon = (int) f[NE - 1];\n@@ -5576,7 +5590,7 @@ efloor (x, y)\n   /* truncate negatives toward minus infinity */\n  isitneg:\n \n-  if ((unsigned EMUSHORT) expon & (unsigned EMUSHORT) 0x8000)\n+  if ((UEMUSHORT) expon & (UEMUSHORT) 0x8000)\n     {\n       for (i = 0; i < NE - 1; i++)\n \t{\n@@ -5596,11 +5610,11 @@ efloor (x, y)\n \n static void\n efrexp (x, exp, s)\n-     unsigned EMUSHORT x[];\n+     UEMUSHORT x[];\n      int *exp;\n-     unsigned EMUSHORT s[];\n+     UEMUSHORT s[];\n {\n-  unsigned EMUSHORT xi[NI];\n+  UEMUSHORT xi[NI];\n   EMULONG li;\n \n   emovi (x, xi);\n@@ -5621,11 +5635,11 @@ efrexp (x, exp, s)\n \n static void\n eldexp (x, pwr2, y)\n-     unsigned EMUSHORT x[];\n+     UEMUSHORT x[];\n      int pwr2;\n-     unsigned EMUSHORT y[];\n+     UEMUSHORT y[];\n {\n-  unsigned EMUSHORT xi[NI];\n+  UEMUSHORT xi[NI];\n   EMULONG li;\n   int i;\n \n@@ -5644,9 +5658,9 @@ eldexp (x, pwr2, y)\n \n static void\n eremain (a, b, c)\n-     unsigned EMUSHORT a[], b[], c[];\n+     UEMUSHORT a[], b[], c[];\n {\n-  unsigned EMUSHORT den[NI], num[NI];\n+  UEMUSHORT den[NI], num[NI];\n \n #ifdef NANS\n   if (eisinf (b)\n@@ -5681,10 +5695,10 @@ eremain (a, b, c)\n \n static void\n eiremain (den, num)\n-     unsigned EMUSHORT den[], num[];\n+     UEMUSHORT den[], num[];\n {\n   EMULONG ld, ln;\n-  unsigned EMUSHORT j;\n+  UEMUSHORT j;\n \n   ld = den[E];\n   ld -= enormlz (den);\n@@ -5777,11 +5791,11 @@ mtherr (name, code)\n \n static void\n dectoe (d, e)\n-     unsigned EMUSHORT *d;\n-     unsigned EMUSHORT *e;\n+     UEMUSHORT *d;\n+     UEMUSHORT *e;\n {\n-  unsigned EMUSHORT y[NI];\n-  register unsigned EMUSHORT r, *p;\n+  UEMUSHORT y[NI];\n+  register UEMUSHORT r, *p;\n \n   ecleaz (y);\t\t\t/* start with a zero */\n   p = y;\t\t\t/* point to our number */\n@@ -5817,9 +5831,9 @@ dectoe (d, e)\n \n static void\n etodec (x, d)\n-     unsigned EMUSHORT *x, *d;\n+     UEMUSHORT *x, *d;\n {\n-  unsigned EMUSHORT xi[NI];\n+  UEMUSHORT xi[NI];\n   EMULONG exp;\n   int rndsav;\n \n@@ -5839,10 +5853,10 @@ etodec (x, d)\n \n static void\n todec (x, y)\n-     unsigned EMUSHORT *x, *y;\n+     UEMUSHORT *x, *y;\n {\n-  unsigned EMUSHORT i;\n-  unsigned EMUSHORT *p;\n+  UEMUSHORT i;\n+  UEMUSHORT *p;\n \n   p = x;\n   *y = 0;\n@@ -5885,12 +5899,12 @@ todec (x, y)\n \n static void\n ibmtoe (d, e, mode)\n-     unsigned EMUSHORT *d;\n-     unsigned EMUSHORT *e;\n+     UEMUSHORT *d;\n+     UEMUSHORT *e;\n      enum machine_mode mode;\n {\n-  unsigned EMUSHORT y[NI];\n-  register unsigned EMUSHORT r, *p;\n+  UEMUSHORT y[NI];\n+  register UEMUSHORT r, *p;\n \n   ecleaz (y);\t\t\t/* start with a zero */\n   p = y;\t\t\t/* point to our number */\n@@ -5928,10 +5942,10 @@ ibmtoe (d, e, mode)\n \n static void\n etoibm (x, d, mode)\n-     unsigned EMUSHORT *x, *d;\n+     UEMUSHORT *x, *d;\n      enum machine_mode mode;\n {\n-  unsigned EMUSHORT xi[NI];\n+  UEMUSHORT xi[NI];\n   EMULONG exp;\n   int rndsav;\n \n@@ -5947,11 +5961,11 @@ etoibm (x, d, mode)\n \n static void\n toibm (x, y, mode)\n-     unsigned EMUSHORT *x, *y;\n+     UEMUSHORT *x, *y;\n      enum machine_mode mode;\n {\n-  unsigned EMUSHORT i;\n-  unsigned EMUSHORT *p;\n+  UEMUSHORT i;\n+  UEMUSHORT *p;\n   int r;\n \n   p = x;\n@@ -6005,11 +6019,11 @@ toibm (x, y, mode)\n \n static void\n c4xtoe (d, e, mode)\n-     unsigned EMUSHORT *d;\n-     unsigned EMUSHORT *e;\n+     UEMUSHORT *d;\n+     UEMUSHORT *e;\n      enum machine_mode mode;\n {\n-  unsigned EMUSHORT y[NI];\n+  UEMUSHORT y[NI];\n   int r;\n   int isnegative;\n   int size;\n@@ -6121,10 +6135,10 @@ c4xtoe (d, e, mode)\n \n static void\n etoc4x (x, d, mode)\n-     unsigned EMUSHORT *x, *d;\n+     UEMUSHORT *x, *d;\n      enum machine_mode mode;\n {\n-  unsigned EMUSHORT xi[NI];\n+  UEMUSHORT xi[NI];\n   EMULONG exp;\n   int rndsav;\n \n@@ -6143,7 +6157,7 @@ etoc4x (x, d, mode)\n \n static void\n toc4x (x, y, mode)\n-     unsigned EMUSHORT *x, *y;\n+     UEMUSHORT *x, *y;\n      enum machine_mode mode;\n {\n   int i;\n@@ -6254,50 +6268,50 @@ toc4x (x, y, mode)\n TFMODE_NAN;\n #else\n #ifdef IEEE\n-unsigned EMUSHORT TFbignan[8] =\n+UEMUSHORT TFbignan[8] =\n  {0x7fff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff};\n-unsigned EMUSHORT TFlittlenan[8] = {0, 0, 0, 0, 0, 0, 0x8000, 0xffff};\n+UEMUSHORT TFlittlenan[8] = {0, 0, 0, 0, 0, 0, 0x8000, 0xffff};\n #endif\n #endif\n \n #ifdef XFMODE_NAN\n XFMODE_NAN;\n #else\n #ifdef IEEE\n-unsigned EMUSHORT XFbignan[6] =\n+UEMUSHORT XFbignan[6] =\n  {0x7fff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff};\n-unsigned EMUSHORT XFlittlenan[6] = {0, 0, 0, 0xc000, 0xffff, 0};\n+UEMUSHORT XFlittlenan[6] = {0, 0, 0, 0xc000, 0xffff, 0};\n #endif\n #endif\n \n #ifdef DFMODE_NAN\n DFMODE_NAN;\n #else\n #ifdef IEEE\n-unsigned EMUSHORT DFbignan[4] = {0x7fff, 0xffff, 0xffff, 0xffff};\n-unsigned EMUSHORT DFlittlenan[4] = {0, 0, 0, 0xfff8};\n+UEMUSHORT DFbignan[4] = {0x7fff, 0xffff, 0xffff, 0xffff};\n+UEMUSHORT DFlittlenan[4] = {0, 0, 0, 0xfff8};\n #endif\n #endif\n \n #ifdef SFMODE_NAN\n SFMODE_NAN;\n #else\n #ifdef IEEE\n-unsigned EMUSHORT SFbignan[2] = {0x7fff, 0xffff};\n-unsigned EMUSHORT SFlittlenan[2] = {0, 0xffc0};\n+UEMUSHORT SFbignan[2] = {0x7fff, 0xffff};\n+UEMUSHORT SFlittlenan[2] = {0, 0xffc0};\n #endif\n #endif\n \n \n #ifdef NANS\n static void\n make_nan (nan, sign, mode)\n-     unsigned EMUSHORT *nan;\n+     UEMUSHORT *nan;\n      int sign;\n      enum machine_mode mode;\n {\n   int n;\n-  unsigned EMUSHORT *p;\n+  UEMUSHORT *p;\n \n   switch (mode)\n     {\n@@ -6361,20 +6375,20 @@ ereal_unto_float (f)\n      long f;\n {\n   REAL_VALUE_TYPE r;\n-  unsigned EMUSHORT s[2];\n-  unsigned EMUSHORT e[NE];\n+  UEMUSHORT s[2];\n+  UEMUSHORT e[NE];\n \n   /* Convert 32 bit integer to array of 16 bit pieces in target machine order.\n    This is the inverse operation to what the function `endian' does.  */\n   if (REAL_WORDS_BIG_ENDIAN)\n     {\n-      s[0] = (unsigned EMUSHORT) (f >> 16);\n-      s[1] = (unsigned EMUSHORT) f;\n+      s[0] = (UEMUSHORT) (f >> 16);\n+      s[1] = (UEMUSHORT) f;\n     }\n   else\n     {\n-      s[0] = (unsigned EMUSHORT) f;\n-      s[1] = (unsigned EMUSHORT) (f >> 16);\n+      s[0] = (UEMUSHORT) f;\n+      s[1] = (UEMUSHORT) (f >> 16);\n     }\n   /* Convert and promote the target float to E-type.  */\n   e24toe (s, e);\n@@ -6392,24 +6406,24 @@ ereal_unto_double (d)\n      long d[];\n {\n   REAL_VALUE_TYPE r;\n-  unsigned EMUSHORT s[4];\n-  unsigned EMUSHORT e[NE];\n+  UEMUSHORT s[4];\n+  UEMUSHORT e[NE];\n \n   /* Convert array of HOST_WIDE_INT to equivalent array of 16-bit pieces.  */\n   if (REAL_WORDS_BIG_ENDIAN)\n     {\n-      s[0] = (unsigned EMUSHORT) (d[0] >> 16);\n-      s[1] = (unsigned EMUSHORT) d[0];\n-      s[2] = (unsigned EMUSHORT) (d[1] >> 16);\n-      s[3] = (unsigned EMUSHORT) d[1];\n+      s[0] = (UEMUSHORT) (d[0] >> 16);\n+      s[1] = (UEMUSHORT) d[0];\n+      s[2] = (UEMUSHORT) (d[1] >> 16);\n+      s[3] = (UEMUSHORT) d[1];\n     }\n   else\n     {\n       /* Target float words are little-endian.  */\n-      s[0] = (unsigned EMUSHORT) d[0];\n-      s[1] = (unsigned EMUSHORT) (d[0] >> 16);\n-      s[2] = (unsigned EMUSHORT) d[1];\n-      s[3] = (unsigned EMUSHORT) (d[1] >> 16);\n+      s[0] = (UEMUSHORT) d[0];\n+      s[1] = (UEMUSHORT) (d[0] >> 16);\n+      s[2] = (UEMUSHORT) d[1];\n+      s[3] = (UEMUSHORT) (d[1] >> 16);\n     }\n   /* Convert target double to E-type.  */\n   e53toe (s, e);\n@@ -6428,20 +6442,20 @@ ereal_from_float (f)\n      HOST_WIDE_INT f;\n {\n   REAL_VALUE_TYPE r;\n-  unsigned EMUSHORT s[2];\n-  unsigned EMUSHORT e[NE];\n+  UEMUSHORT s[2];\n+  UEMUSHORT e[NE];\n \n   /* Convert 32 bit integer to array of 16 bit pieces in target machine order.\n    This is the inverse operation to what the function `endian' does.  */\n   if (REAL_WORDS_BIG_ENDIAN)\n     {\n-      s[0] = (unsigned EMUSHORT) (f >> 16);\n-      s[1] = (unsigned EMUSHORT) f;\n+      s[0] = (UEMUSHORT) (f >> 16);\n+      s[1] = (UEMUSHORT) f;\n     }\n   else\n     {\n-      s[0] = (unsigned EMUSHORT) f;\n-      s[1] = (unsigned EMUSHORT) (f >> 16);\n+      s[0] = (UEMUSHORT) f;\n+      s[1] = (UEMUSHORT) (f >> 16);\n     }\n   /* Convert and promote the target float to E-type.  */\n   e24toe (s, e);\n@@ -6465,38 +6479,38 @@ ereal_from_double (d)\n      HOST_WIDE_INT d[];\n {\n   REAL_VALUE_TYPE r;\n-  unsigned EMUSHORT s[4];\n-  unsigned EMUSHORT e[NE];\n+  UEMUSHORT s[4];\n+  UEMUSHORT e[NE];\n \n   /* Convert array of HOST_WIDE_INT to equivalent array of 16-bit pieces.  */\n   if (REAL_WORDS_BIG_ENDIAN)\n     {\n #if HOST_BITS_PER_WIDE_INT == 32\n-      s[0] = (unsigned EMUSHORT) (d[0] >> 16);\n-      s[1] = (unsigned EMUSHORT) d[0];\n-      s[2] = (unsigned EMUSHORT) (d[1] >> 16);\n-      s[3] = (unsigned EMUSHORT) d[1];\n+      s[0] = (UEMUSHORT) (d[0] >> 16);\n+      s[1] = (UEMUSHORT) d[0];\n+      s[2] = (UEMUSHORT) (d[1] >> 16);\n+      s[3] = (UEMUSHORT) d[1];\n #else\n       /* In this case the entire target double is contained in the\n \t first array element.  The second element of the input is\n \t ignored.  */\n-      s[0] = (unsigned EMUSHORT) (d[0] >> 48);\n-      s[1] = (unsigned EMUSHORT) (d[0] >> 32);\n-      s[2] = (unsigned EMUSHORT) (d[0] >> 16);\n-      s[3] = (unsigned EMUSHORT) d[0];\n+      s[0] = (UEMUSHORT) (d[0] >> 48);\n+      s[1] = (UEMUSHORT) (d[0] >> 32);\n+      s[2] = (UEMUSHORT) (d[0] >> 16);\n+      s[3] = (UEMUSHORT) d[0];\n #endif\n     }\n   else\n     {\n       /* Target float words are little-endian.  */\n-      s[0] = (unsigned EMUSHORT) d[0];\n-      s[1] = (unsigned EMUSHORT) (d[0] >> 16);\n+      s[0] = (UEMUSHORT) d[0];\n+      s[1] = (UEMUSHORT) (d[0] >> 16);\n #if HOST_BITS_PER_WIDE_INT == 32\n-      s[2] = (unsigned EMUSHORT) d[1];\n-      s[3] = (unsigned EMUSHORT) (d[1] >> 16);\n+      s[2] = (UEMUSHORT) d[1];\n+      s[3] = (UEMUSHORT) (d[1] >> 16);\n #else\n-      s[2] = (unsigned EMUSHORT) (d[0] >> 32);\n-      s[3] = (unsigned EMUSHORT) (d[0] >> 48);\n+      s[2] = (UEMUSHORT) (d[0] >> 32);\n+      s[3] = (UEMUSHORT) (d[0] >> 48);\n #endif\n     }\n   /* Convert target double to E-type.  */\n@@ -6514,10 +6528,10 @@ ereal_from_double (d)\n \n static void\n uditoe (di, e)\n-     unsigned EMUSHORT *di;  /* Address of the 64-bit int.  */\n-     unsigned EMUSHORT *e;\n+     UEMUSHORT *di;  /* Address of the 64-bit int.  */\n+     UEMUSHORT *e;\n {\n-  unsigned EMUSHORT yi[NI];\n+  UEMUSHORT yi[NI];\n   int k;\n \n   ecleaz (yi);\n@@ -6535,20 +6549,20 @@ uditoe (di, e)\n   if ((k = enormlz (yi)) > NBITS)/* normalize the significand */\n     ecleaz (yi);\t\t/* it was zero */\n   else\n-    yi[E] -= (unsigned EMUSHORT) k;/* subtract shift count from exponent */\n+    yi[E] -= (UEMUSHORT) k;/* subtract shift count from exponent */\n   emovo (yi, e);\n }\n \n /* Convert target computer signed 64-bit integer to e-type.  */\n \n static void\n ditoe (di, e)\n-     unsigned EMUSHORT *di;  /* Address of the 64-bit int.  */\n-     unsigned EMUSHORT *e;\n+     UEMUSHORT *di;  /* Address of the 64-bit int.  */\n+     UEMUSHORT *e;\n {\n   unsigned EMULONG acc;\n-  unsigned EMUSHORT yi[NI];\n-  unsigned EMUSHORT carry;\n+  UEMUSHORT yi[NI];\n+  UEMUSHORT carry;\n   int k, sign;\n \n   ecleaz (yi);\n@@ -6581,7 +6595,7 @@ ditoe (di, e)\n   if ((k = enormlz (yi)) > NBITS)/* normalize the significand */\n     ecleaz (yi);\t\t/* it was zero */\n   else\n-    yi[E] -= (unsigned EMUSHORT) k;/* subtract shift count from exponent */\n+    yi[E] -= (UEMUSHORT) k;/* subtract shift count from exponent */\n   emovo (yi, e);\n   if (sign)\n \teneg (e);\n@@ -6592,10 +6606,10 @@ ditoe (di, e)\n \n static void\n etoudi (x, i)\n-     unsigned EMUSHORT *x;\n-     unsigned EMUSHORT *i;\n+     UEMUSHORT *x;\n+     UEMUSHORT *i;\n {\n-  unsigned EMUSHORT xi[NI];\n+  UEMUSHORT xi[NI];\n   int j, k;\n \n   emovi (x, xi);\n@@ -6675,13 +6689,13 @@ etoudi (x, i)\n \n static void\n etodi (x, i)\n-     unsigned EMUSHORT *x;\n-     unsigned EMUSHORT *i;\n+     UEMUSHORT *x;\n+     UEMUSHORT *i;\n {\n   unsigned EMULONG acc;\n-  unsigned EMUSHORT xi[NI];\n-  unsigned EMUSHORT carry;\n-  unsigned EMUSHORT *isave;\n+  UEMUSHORT xi[NI];\n+  UEMUSHORT carry;\n+  UEMUSHORT *isave;\n   int j, k;\n \n   emovi (x, xi);\n@@ -6777,9 +6791,9 @@ static unsigned short sqrndbit[NI];\n \n static void\n esqrt (x, y)\n-     unsigned EMUSHORT *x, *y;\n+     UEMUSHORT *x, *y;\n {\n-  unsigned EMUSHORT temp[NI], num[NI], sq[NI], xx[NI];\n+  UEMUSHORT temp[NI], num[NI], sq[NI], xx[NI];\n   EMULONG m, exp;\n   int i, j, k, n, nlups;\n "}]}