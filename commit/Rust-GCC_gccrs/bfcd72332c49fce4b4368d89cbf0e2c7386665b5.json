{"sha": "bfcd72332c49fce4b4368d89cbf0e2c7386665b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZjZDcyMzMyYzQ5ZmNlNGI0MzY4ZDg5Y2JmMGUyYzczODY2NjViNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-12-13T18:19:38Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-12-13T18:19:38Z"}, "message": "re PR target/34435 (SSE2 intrinsics - emmintrin with optimisations off and type conversion error)\n\n        PR target/34435\n        * config/i386/emmintrin.h (_mm_shuffle_pd, _mm_extract_epi16,\n        _mm_insert_epi16, _mm_shufflehi_epi16, _mm_shufflelo_epi16,\n        _mm_shuffle_epi32): Cast non-constant input values to either __m64,\n        __m128, __m128i or __m128d in a macro version of the intrinsic.\n        Cast constant input values to int.\n        * config/i386/ammintrin.h (_mm_extracti_si64, _mm_inserti_si64): Ditto.\n        * config/i386/bmmintrin.h (_mm_roti_epi8, _mm_roti_epi16,\n        _mm_roti_epi32, _mm_roti_epi64): Ditto.\n        * config/i386/smmintrin.h (_mm_blend_epi16, _mm_blend_ps, _mm_blend_pd,\n        _mm_dp_ps, _mm_dp_pd, _mm_insert_ps, _mm_extract_ps, _mm_insert_epi8,\n        _mm_insert_epi32, _mm_insert_epi64, _mm_extract_epi8, mm_extract_epi32,\n        _mm_extract_epi64, _mm_mpsadbw_epu8, _mm_cmpistrm, _mm_cmpistri,\n        _mm_cmpestrm, _mm_cmpestri, _mm_cmpistra, _mm_cmpistrc, _mm_cmpistro,\n        _mm_cmpistrs, _mm_cmpistrz, _mm_cmpestra, _mm_cmpestrc, _mm_cmpestro,\n        _mm_cmpestrs, _mm_cmpestrz): Ditto.\n        * config/i386/tmmintrin.h (_mm_alignr_epi8, _mm_alignr_pi8): Ditto.\n        * config/i386/xmmintrin.h (_mm_shuffle_ps, _mm_extract_pi16, _m_pextrw,\n        _mm_insert_pi16, _m_pinsrw, _mm_shuffle_pi16, _m_pshufw): Ditto.\n        * config/i386/mmintrin-common.h (_mm_round_pd, _mm_round_sd,\n        _mm_round_ps, _mm_round_ss): Ditto.\n\ntestsuite/ChangeLog:\n\n        PR target/34435\n        * g++.dg/other/pr34435.C: New testcase.\n\nFrom-SVN: r130904", "tree": {"sha": "6539270280c421c0698010e006107f0cbbc6ab11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6539270280c421c0698010e006107f0cbbc6ab11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfcd72332c49fce4b4368d89cbf0e2c7386665b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfcd72332c49fce4b4368d89cbf0e2c7386665b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfcd72332c49fce4b4368d89cbf0e2c7386665b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/comments", "author": null, "committer": null, "parents": [{"sha": "17cf3985108a463cd143c310b566371f54008193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17cf3985108a463cd143c310b566371f54008193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17cf3985108a463cd143c310b566371f54008193"}], "stats": {"total": 321, "additions": 208, "deletions": 113}, "files": [{"sha": "1a5c210f4dfde313d1255f58c5a262cb3d0aabe7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bfcd72332c49fce4b4368d89cbf0e2c7386665b5", "patch": "@@ -1,3 +1,28 @@\n+2007-12-13  Uros Bizjak  <ubizjak@gmail.com>\n+\t    Richard Guenther  <rguenther@suse.de>\n+\n+\tPR target/34435\n+\t* config/i386/emmintrin.h (_mm_shuffle_pd, _mm_extract_epi16,\n+\t_mm_insert_epi16, _mm_shufflehi_epi16, _mm_shufflelo_epi16,\n+\t_mm_shuffle_epi32): Cast non-constant input values to either __m64,\n+\t__m128, __m128i or __m128d in a macro version of the intrinsic.\n+\tCast constant input values to int.\n+\t* config/i386/ammintrin.h (_mm_extracti_si64, _mm_inserti_si64): Ditto.\n+\t* config/i386/bmmintrin.h (_mm_roti_epi8, _mm_roti_epi16,\n+\t_mm_roti_epi32, _mm_roti_epi64): Ditto.\n+\t* config/i386/smmintrin.h (_mm_blend_epi16, _mm_blend_ps, _mm_blend_pd,\n+\t_mm_dp_ps, _mm_dp_pd, _mm_insert_ps, _mm_extract_ps, _mm_insert_epi8,\n+\t_mm_insert_epi32, _mm_insert_epi64, _mm_extract_epi8, mm_extract_epi32,\n+\t_mm_extract_epi64, _mm_mpsadbw_epu8, _mm_cmpistrm, _mm_cmpistri,\n+\t_mm_cmpestrm, _mm_cmpestri, _mm_cmpistra, _mm_cmpistrc, _mm_cmpistro,\n+\t_mm_cmpistrs, _mm_cmpistrz, _mm_cmpestra, _mm_cmpestrc, _mm_cmpestro,\n+\t_mm_cmpestrs, _mm_cmpestrz): Ditto.\n+\t* config/i386/tmmintrin.h (_mm_alignr_epi8, _mm_alignr_pi8): Ditto.\n+\t* config/i386/xmmintrin.h (_mm_shuffle_ps, _mm_extract_pi16, _m_pextrw,\n+\t_mm_insert_pi16, _m_pinsrw, _mm_shuffle_pi16, _m_pshufw): Ditto.\n+\t* config/i386/mmintrin-common.h (_mm_round_pd, _mm_round_sd,\n+\t_mm_round_ps, _mm_round_ss): Ditto.\n+\n 2007-12-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/34450\n@@ -29,7 +54,7 @@\n \t(dump_new_types): Print a number of new types to replace \n \tan original structure type.\n \t\n-2007-12-13  Golovanevsky Olga  <olga@il.ibm.com>\n+2007-12-13  Olga Golovanevsky  <olga@il.ibm.com>\n \n \t* doc/invoke.texi (Optimiza Options): Document new -fipa-struct-reorg\n \toption and struct-reorg-cold-struct-ratio parameter.\n@@ -334,8 +359,7 @@\n \t* stormy16/stormy16.h (EXPAND_BUILTIN_VA_START): Remove.\n \t* stormy16/stormy16-protos.h (xstormy16_expand_builtin_va_start):\n \tRemove prototype.\n-\t* stormy16/stormy16.c (xstormy16_expand_builtin_va_start): Made\n-\tstatic.\n+\t* stormy16/stormy16.c (xstormy16_expand_builtin_va_start): Made static.\n \t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n \t* s390/s390-protos.h (s390_va_start): Remove prototype.\n \t* s390/s390.c (s390_va_start): Made static."}, {"sha": "1351ebd915501b671819e62ba3864727beee94f0", "filename": "gcc/config/i386/ammintrin.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2Fconfig%2Fi386%2Fammintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2Fconfig%2Fi386%2Fammintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fammintrin.h?ref=bfcd72332c49fce4b4368d89cbf0e2c7386665b5", "patch": "@@ -62,8 +62,9 @@ _mm_extracti_si64 (__m128i __X, unsigned const int __I, unsigned const int __L)\n   return (__m128i) __builtin_ia32_extrqi ((__v2di) __X, __I, __L);\n }\n #else\n-#define _mm_extracti_si64(X, I, L) \\\n-  ((__m128i) __builtin_ia32_extrqi ((__v2di)(X), I, L))\n+#define _mm_extracti_si64(X, I, L)\t\t\t\t\t\\\n+  ((__m128i) __builtin_ia32_extrqi ((__v2di)(__m128i)(X),\t\t\\\n+\t\t\t\t    (unsigned int)(I), (unsigned int)(L)))\n #endif\n \n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n@@ -79,8 +80,10 @@ _mm_inserti_si64(__m128i __X, __m128i __Y, unsigned const int __I, unsigned cons\n   return (__m128i) __builtin_ia32_insertqi ((__v2di)__X, (__v2di)__Y, __I, __L);\n }\n #else\n-#define _mm_inserti_si64(X, Y, I, L) \\\n-  ((__m128i) __builtin_ia32_insertqi ((__v2di)(X), (__v2di)(Y), I, L))\n+#define _mm_inserti_si64(X, Y, I, L)\t\t\t\t\t\\\n+  ((__m128i) __builtin_ia32_insertqi ((__v2di)(__m128i)(X),\t\t\\\n+\t\t\t\t      (__v2di)(__m128i)(Y),\t\t\\\n+\t\t\t\t      (unsigned int)(I), (unsigned int)(L)))\n #endif\n \n #endif /* __SSE4A__ */"}, {"sha": "48830f39fb2a31d4a338ddfe27ccfc46e90ad38e", "filename": "gcc/config/i386/bmmintrin.h", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2Fconfig%2Fi386%2Fbmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2Fconfig%2Fi386%2Fbmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbmmintrin.h?ref=bfcd72332c49fce4b4368d89cbf0e2c7386665b5", "patch": "@@ -352,33 +352,37 @@ _mm_rot_epi64(__m128i __A,  __m128i __B)\n /* Rotates - Immediate form */\n #ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n-_mm_roti_epi8(__m128i __A,  int __B)\n+_mm_roti_epi8(__m128i __A, const int __B)\n {\n   return  (__m128i) __builtin_ia32_protbi ((__v16qi)__A, __B);\n }\n \n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n-_mm_roti_epi16(__m128i __A, int __B)\n+_mm_roti_epi16(__m128i __A, const int __B)\n {\n   return  (__m128i) __builtin_ia32_protwi ((__v8hi)__A, __B);\n }\n \n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n-_mm_roti_epi32(__m128i __A, int __B)\n+_mm_roti_epi32(__m128i __A, const int __B)\n {\n   return  (__m128i) __builtin_ia32_protdi ((__v4si)__A, __B);\n }\n \n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n-_mm_roti_epi64(__m128i __A, int __B)\n+_mm_roti_epi64(__m128i __A, const int __B)\n {\n   return  (__m128i) __builtin_ia32_protqi ((__v2di)__A, __B);\n }\n #else\n-#define _mm_roti_epi8(A, B) ((_m128i) __builtin_ia32_protbi ((__v16qi)(A), B)\n-#define _mm_roti_epi16(A, B) ((_m128i) __builtin_ia32_protwi ((__v8hi)(A), B)\n-#define _mm_roti_epi32(A, B) ((_m128i) __builtin_ia32_protdi ((__v4si)(A), B)\n-#define _mm_roti_epi64(A, B) ((_m128i) __builtin_ia32_protqi ((__v2di)(A), B)\n+#define _mm_roti_epi8(A, B) \\\n+  ((__m128i) __builtin_ia32_protbi ((__v16qi)(__m128i)(A), (int)(B)))\n+#define _mm_roti_epi16(A, B) \\\n+  ((__m128i) __builtin_ia32_protwi ((__v8hi)(__m128i)(A), (int)(B)))\n+#define _mm_roti_epi32(A, B) \\\n+  ((__m128i) __builtin_ia32_protdi ((__v4si)(__m128i)(A), (int)(B)))\n+#define _mm_roti_epi64(A, B) \\\n+  ((__m128i) __builtin_ia32_protqi ((__v2di)(__m128i)(A), (int)(B))\n #endif\n \n /* pshl */"}, {"sha": "1a0affc775517a3a6a0cf685adeff00c52b9d9e7", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=bfcd72332c49fce4b4368d89cbf0e2c7386665b5", "patch": "@@ -887,8 +887,9 @@ _mm_shuffle_pd(__m128d __A, __m128d __B, const int __mask)\n   return (__m128d)__builtin_ia32_shufpd ((__v2df)__A, (__v2df)__B, __mask);\n }\n #else\n-#define _mm_shuffle_pd(__A, __B, __C) \\\n-  ((__m128d)__builtin_ia32_shufpd ((__v2df)__A, (__v2df)__B, (__C)))\n+#define _mm_shuffle_pd(__A, __B, __C)\t\t\t\t\t\\\n+  ((__m128d)__builtin_ia32_shufpd ((__v2df)(__m128d)__A,\t\t\\\n+\t\t\t\t   (__v2df)(__m128d)__B, (int)(__C)))\n #endif\n \n static __inline __m128d __attribute__((__always_inline__, __artificial__))\n@@ -1320,9 +1321,10 @@ _mm_insert_epi16 (__m128i const __A, int const __D, int const __N)\n }\n #else\n #define _mm_extract_epi16(A, N) \\\n-  ((int) __builtin_ia32_vec_ext_v8hi ((__v8hi)(A), (N)))\n-#define _mm_insert_epi16(A, D, N) \\\n-  ((__m128i) __builtin_ia32_vec_set_v8hi ((__v8hi)(A), (D), (N)))\n+  ((int) __builtin_ia32_vec_ext_v8hi ((__v8hi)(__m128i)(A), (int)(N)))\n+#define _mm_insert_epi16(A, D, N)\t\t\t\t\\\n+  ((__m128i) __builtin_ia32_vec_set_v8hi ((__v8hi)(__m128i)(A),\t\\\n+\t\t\t\t\t  (int)(D), (int)(N)))\n #endif\n \n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n@@ -1381,11 +1383,11 @@ _mm_shuffle_epi32 (__m128i __A, const int __mask)\n }\n #else\n #define _mm_shufflehi_epi16(__A, __B) \\\n-  ((__m128i)__builtin_ia32_pshufhw ((__v8hi)__A, __B))\n+  ((__m128i)__builtin_ia32_pshufhw ((__v8hi)(__m128i)__A, (int)__B))\n #define _mm_shufflelo_epi16(__A, __B) \\\n-  ((__m128i)__builtin_ia32_pshuflw ((__v8hi)__A, __B))\n+  ((__m128i)__builtin_ia32_pshuflw ((__v8hi)(__m128i)__A, (int)__B))\n #define _mm_shuffle_epi32(__A, __B) \\\n-  ((__m128i)__builtin_ia32_pshufd ((__v4si)__A, __B))\n+  ((__m128i)__builtin_ia32_pshufd ((__v4si)(__m128i)__A, (int)__B))\n #endif\n \n static __inline void __attribute__((__always_inline__, __artificial__))"}, {"sha": "3be83335f296eb1ad73db600241a4af0e21281e6", "filename": "gcc/config/i386/mmintrin-common.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2Fconfig%2Fi386%2Fmmintrin-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2Fconfig%2Fi386%2Fmmintrin-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmintrin-common.h?ref=bfcd72332c49fce4b4368d89cbf0e2c7386665b5", "patch": "@@ -108,10 +108,11 @@ _mm_round_sd(__m128d __D, __m128d __V, const int __M)\n }\n #else\n #define _mm_round_pd(V, M) \\\n-  ((__m128d) __builtin_ia32_roundpd ((__v2df)(V), (M)))\n+  ((__m128d) __builtin_ia32_roundpd ((__v2df)(__m128d)(V), (int)(M)))\n \n-#define _mm_round_sd(D, V, M) \\\n-  ((__m128d) __builtin_ia32_roundsd ((__v2df)(D), (__v2df)(V), (M)))\n+#define _mm_round_sd(D, V, M)\t\t\t\t\t\t\\\n+  ((__m128d) __builtin_ia32_roundsd ((__v2df)(__m128d)(D),\t\t\\\n+\t\t\t\t     (__v2df)(__m128d)(V), (int)(M)))\n #endif\n \n /* Packed/scalar single precision floating point rounding.  */\n@@ -132,10 +133,11 @@ _mm_round_ss (__m128 __D, __m128 __V, const int __M)\n }\n #else\n #define _mm_round_ps(V, M) \\\n-  ((__m128) __builtin_ia32_roundps ((__v4sf)(V), (M)))\n+  ((__m128) __builtin_ia32_roundps ((__v4sf)(__m128)(V), (int)(M)))\n \n-#define _mm_round_ss(D, V, M) \\\n-  ((__m128) __builtin_ia32_roundss ((__v4sf)(D), (__v4sf)(V), (M)))\n+#define _mm_round_ss(D, V, M)\t\t\t\t\t\t\\\n+  ((__m128) __builtin_ia32_roundss ((__v4sf)(__m128)(D),\t\t\\\n+\t\t\t\t    (__v4sf)(__m128)(V), (int)(M)))\n #endif\n \n /* Macros for ceil/floor intrinsics.  */"}, {"sha": "3989773e5739019f69605c54810aa90f45ab6e64", "filename": "gcc/config/i386/smmintrin.h", "status": "modified", "additions": 91, "deletions": 68, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2Fconfig%2Fi386%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2Fconfig%2Fi386%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsmmintrin.h?ref=bfcd72332c49fce4b4368d89cbf0e2c7386665b5", "patch": "@@ -53,8 +53,9 @@ _mm_blend_epi16 (__m128i __X, __m128i __Y, const int __M)\n \t\t\t\t\t      __M);\n }\n #else\n-#define _mm_blend_epi16(X, Y, M) \\\n-  ((__m128i) __builtin_ia32_pblendw128 ((__v8hi)(X), (__v8hi)(Y), (M)))\n+#define _mm_blend_epi16(X, Y, M)\t\t\t\t\t\\\n+  ((__m128i) __builtin_ia32_pblendw128 ((__v8hi)(__m128i)(X),\t\t\\\n+\t\t\t\t\t(__v8hi)(__m128i)(Y), (int)(M)))\n #endif\n \n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n@@ -77,8 +78,9 @@ _mm_blend_ps (__m128 __X, __m128 __Y, const int __M)\n \t\t\t\t\t  __M);\n }\n #else\n-#define _mm_blend_ps(X, Y, M) \\\n-  ((__m128) __builtin_ia32_blendps ((__v4sf)(X), (__v4sf)(Y), (M)))\n+#define _mm_blend_ps(X, Y, M)\t\t\t\t\t\t\\\n+  ((__m128) __builtin_ia32_blendps ((__v4sf)(__m128)(X),\t\t\\\n+\t\t\t\t    (__v4sf)(__m128)(Y), (int)(M)))\n #endif\n \n static __inline __m128 __attribute__((__always_inline__, __artificial__))\n@@ -101,8 +103,9 @@ _mm_blend_pd (__m128d __X, __m128d __Y, const int __M)\n \t\t\t\t\t   __M);\n }\n #else\n-#define _mm_blend_pd(X, Y, M) \\\n-  ((__m128d) __builtin_ia32_blendpd ((__v2df)(X), (__v2df)(Y), (M)))\n+#define _mm_blend_pd(X, Y, M)\t\t\t\t\t\t\\\n+  ((__m128d) __builtin_ia32_blendpd ((__v2df)(__m128d)(X),\t\t\\\n+\t\t\t\t     (__v2df)(__m128d)(Y), (int)(M)))\n #endif\n \n static __inline __m128d __attribute__((__always_inline__, __artificial__))\n@@ -133,11 +136,13 @@ _mm_dp_pd (__m128d __X, __m128d __Y, const int __M)\n \t\t\t\t\t__M);\n }\n #else\n-#define _mm_dp_ps(X, Y, M) \\\n-  ((__m128) __builtin_ia32_dpps ((__v4sf)(X), (__v4sf)(Y), (M)))\n+#define _mm_dp_ps(X, Y, M)\t\t\t\t\t\t\\\n+  ((__m128) __builtin_ia32_dpps ((__v4sf)(__m128)(X),\t\t\t\\\n+\t\t\t\t (__v4sf)(__m128)(Y), (int)(M)))\n \n-#define _mm_dp_pd(X, Y, M) \\\n-  ((__m128d) __builtin_ia32_dppd ((__v2df)(X), (__v2df)(Y), (M)))\n+#define _mm_dp_pd(X, Y, M)\t\t\t\t\t\t\\\n+  ((__m128d) __builtin_ia32_dppd ((__v2df)(__m128d)(X),\t\t\t\\\n+\t\t\t\t  (__v2df)(__m128d)(Y), (int)(M)))\n #endif\n \n /* Packed integer 64-bit comparison, zeroing or filling with ones\n@@ -228,8 +233,9 @@ _mm_insert_ps (__m128 __D, __m128 __S, const int __N)\n \t\t\t\t\t      __N);\n }\n #else\n-#define _mm_insert_ps(D, S, N) \\\n-  ((__m128) __builtin_ia32_insertps128 ((__v4sf)(D), (__v4sf)(S), (N)))\n+#define _mm_insert_ps(D, S, N)\t\t\t\t\t\t\\\n+  ((__m128) __builtin_ia32_insertps128 ((__v4sf)(__m128)(D),\t\t\\\n+\t\t\t\t\t(__v4sf)(__m128)(S), (int)(N)))\n #endif\n \n /* Helper macro to create the N value for _mm_insert_ps.  */\n@@ -247,14 +253,13 @@ _mm_extract_ps (__m128 __X, const int __N)\n   return __tmp.i;\n }\n #else\n-#define _mm_extract_ps(X, N) \\\n-  (__extension__ \t\t\t\t\t\t\\\n-   ({\t\t\t\t\t\t\t\t\\\n-      union { int i; float f; } __tmp;\t\t\t\t\\\n-      __tmp.f = __builtin_ia32_vec_ext_v4sf ((__v4sf)(X), (N));\t\\\n-      __tmp.i;\t\t\t\t\t\t\t\\\n-    })\t\t\t\t\t\t\t\t\\\n-   )\n+#define _mm_extract_ps(X, N)\t\t\t\t\t\t\\\n+  (__extension__\t\t\t\t\t\t\t\\\n+   ({\t\t\t\t\t\t\t\t\t\\\n+     union { int i; float f; } __tmp;\t\t\t\t\t\\\n+     __tmp.f = __builtin_ia32_vec_ext_v4sf ((__v4sf)(__m128)(X), (int)(N)); \\\n+     __tmp.i;\t\t\t\t\t\t\t\t\\\n+   }))\n #endif\n \n /* Extract binary representation of single precision float into\n@@ -296,15 +301,18 @@ _mm_insert_epi64 (__m128i __D, long long __S, const int __N)\n }\n #endif\n #else\n-#define _mm_insert_epi8(D, S, N) \\\n-  ((__m128i) __builtin_ia32_vec_set_v16qi ((__v16qi)(D), (S), (N)))\n+#define _mm_insert_epi8(D, S, N)\t\t\t\t\t\\\n+  ((__m128i) __builtin_ia32_vec_set_v16qi ((__v16qi)(__m128i)(D),\t\\\n+\t\t\t\t\t   (int)(S), (int)(N)))\n \n-#define _mm_insert_epi32(D, S, N) \\\n-  ((__m128i) __builtin_ia32_vec_set_v4si ((__v4si)(D), (S), (N)))\n+#define _mm_insert_epi32(D, S, N)\t\t\t\t\\\n+  ((__m128i) __builtin_ia32_vec_set_v4si ((__v4si)(__m128i)(D),\t\\\n+\t\t\t\t\t  (int)(S), (int)(N)))\n \n #ifdef __x86_64__\n-#define _mm_insert_epi64(D, S, N) \\\n-  ((__m128i) __builtin_ia32_vec_set_v2di ((__v2di)(D), (S), (N)))\n+#define _mm_insert_epi64(D, S, N)\t\t\t\t\t\\\n+  ((__m128i) __builtin_ia32_vec_set_v2di ((__v2di)(__m128i)(D),\t\t\\\n+\t\t\t\t\t  (long long)(S), (int)(N)))\n #endif\n #endif\n \n@@ -333,13 +341,13 @@ _mm_extract_epi64 (__m128i __X, const int __N)\n #endif\n #else\n #define _mm_extract_epi8(X, N) \\\n-  __builtin_ia32_vec_ext_v16qi ((__v16qi) X, (N))\n+  __builtin_ia32_vec_ext_v16qi ((__v16qi)(__m128i)(X), (int)(N))\n #define _mm_extract_epi32(X, N) \\\n-  __builtin_ia32_vec_ext_v4si ((__v4si) X, (N))\n+  __builtin_ia32_vec_ext_v4si ((__v4si)(__m128i)(X), (int)(N))\n \n #ifdef __x86_64__\n #define _mm_extract_epi64(X, N) \\\n-  ((long long) __builtin_ia32_vec_ext_v2di ((__v2di)(X), (N)))\n+  ((long long) __builtin_ia32_vec_ext_v2di ((__v2di)(__m128i)(X), (int)(N)))\n #endif\n #endif\n \n@@ -447,8 +455,9 @@ _mm_mpsadbw_epu8 (__m128i __X, __m128i __Y, const int __M)\n \t\t\t\t\t      (__v16qi)__Y, __M);\n }\n #else\n-#define _mm_mpsadbw_epu8(X, Y, M) \\\n-  ((__m128i) __builtin_ia32_mpsadbw128 ((__v16qi)(X), (__v16qi)(Y), (M)))\n+#define _mm_mpsadbw_epu8(X, Y, M)\t\t\t\t\t\\\n+  ((__m128i) __builtin_ia32_mpsadbw128 ((__v16qi)(__m128i)(X),\t\t\\\n+\t\t\t\t\t(__v16qi)(__m128i)(Y), (int)(M)))\n #endif\n \n /* Load double quadword using non-temporal aligned hint.  */\n@@ -521,17 +530,21 @@ _mm_cmpestri (__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)\n \t\t\t\t      __M);\n }\n #else\n-#define _mm_cmpistrm(X, Y, M) \\\n-  ((__m128i) __builtin_ia32_pcmpistrm128 ((__v16qi)(X), (__v16qi)(Y), (M)))\n-#define _mm_cmpistri(X, Y, M) \\\n-  __builtin_ia32_pcmpistri128 ((__v16qi)(X), (__v16qi)(Y), (M))\n-\n-#define _mm_cmpestrm(X, LX, Y, LY, M) \\\n-  ((__m128i) __builtin_ia32_pcmpestrm128 ((__v16qi)(X), (int)(LX), \\\n-\t\t\t\t\t  (__v16qi)(Y), (int)(LY), (M)))\n-#define _mm_cmpestri(X, LX, Y, LY, M) \\\n-  __builtin_ia32_pcmpestri128 ((__v16qi)(X), (int)(LX), \\\n-\t\t\t       (__v16qi)(Y), (int)(LY), (M))\n+#define _mm_cmpistrm(X, Y, M)\t\t\t\t\t\t\\\n+  ((__m128i) __builtin_ia32_pcmpistrm128 ((__v16qi)(__m128i)(X),\t\\\n+\t\t\t\t\t  (__v16qi)(__m128i)(Y), (int)(M)))\n+#define _mm_cmpistri(X, Y, M)\t\t\t\t\t\t\\\n+  ((int) __builtin_ia32_pcmpistri128 ((__v16qi)(__m128i)(X),\t\t\\\n+\t\t\t\t      (__v16qi)(__m128i)(Y), (int)(M)))\n+\n+#define _mm_cmpestrm(X, LX, Y, LY, M)\t\t\t\t\t\\\n+  ((__m128i) __builtin_ia32_pcmpestrm128 ((__v16qi)(__m128i)(X),\t\\\n+\t\t\t\t\t  (int)(LX), (__v16qi)(__m128i)(Y), \\\n+\t\t\t\t\t  (int)(LY), (int)(M)))\n+#define _mm_cmpestri(X, LX, Y, LY, M)\t\t\t\t\t\\\n+  ((int) __builtin_ia32_pcmpestri128 ((__v16qi)(__m128i)(X), (int)(LX),\t\\\n+\t\t\t\t      (__v16qi)(__m128i)(Y), (int)(LY),\t\\\n+\t\t\t\t      (int)(M))\n #endif\n \n /* Intrinsics for text/string processing and reading values of\n@@ -618,32 +631,42 @@ _mm_cmpestrz (__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)\n \t\t\t\t       __M);\n }\n #else\n-#define _mm_cmpistra(X, Y, M) \\\n-  __builtin_ia32_pcmpistria128 ((__v16qi)(X), (__v16qi)(Y), (M))\n-#define _mm_cmpistrc(X, Y, M) \\\n-  __builtin_ia32_pcmpistric128 ((__v16qi)(X), (__v16qi)(Y), (M))\n-#define _mm_cmpistro(X, Y, M) \\\n-  __builtin_ia32_pcmpistrio128 ((__v16qi)(X), (__v16qi)(Y), (M))\n-#define _mm_cmpistrs(X, Y, M) \\\n-  __builtin_ia32_pcmpistris128 ((__v16qi)(X), (__v16qi)(Y), (M))\n-#define _mm_cmpistrz(X, Y, M) \\\n-  __builtin_ia32_pcmpistriz128 ((__v16qi)(X), (__v16qi)(Y), (M))\n-\n-#define _mm_cmpestra(X, LX, Y, LY, M) \\\n-  __builtin_ia32_pcmpestria128 ((__v16qi)(X), (int)(LX), \\\n-\t\t\t\t(__v16qi)(Y), (int)(LY), (M))\n-#define _mm_cmpestrc(X, LX, Y, LY, M) \\\n-  __builtin_ia32_pcmpestric128 ((__v16qi)(X), (int)(LX), \\\n-\t\t\t\t(__v16qi)(Y), (int)(LY), (M))\n-#define _mm_cmpestro(X, LX, Y, LY, M) \\\n-  __builtin_ia32_pcmpestrio128 ((__v16qi)(X), (int)(LX), \\\n-\t\t\t\t(__v16qi)(Y), (int)(LY), (M))\n-#define _mm_cmpestrs(X, LX, Y, LY, M) \\\n-  __builtin_ia32_pcmpestris128 ((__v16qi)(X), (int)(LX), \\\n-\t\t\t\t(__v16qi)(Y), (int)(LY), (M))\n-#define _mm_cmpestrz(X, LX, Y, LY, M) \\\n-  __builtin_ia32_pcmpestriz128 ((__v16qi)(X), (int)(LX), \\\n-\t\t\t\t(__v16qi)(Y), (int)(LY), (M))\n+#define _mm_cmpistra(X, Y, M)\t\t\t\t\t\t\\\n+  ((int) __builtin_ia32_pcmpistria128 ((__v16qi)(__m128i)(X),\t\t\\\n+\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(M)))\n+#define _mm_cmpistrc(X, Y, M)\t\t\t\t\t\t\\\n+  ((int) __builtin_ia32_pcmpistric128 ((__v16qi)(__m128i)(X),\t\t\\\n+\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(M)))\n+#define _mm_cmpistro(X, Y, M)\t\t\t\t\t\t\\\n+  ((int) __builtin_ia32_pcmpistrio128 ((__v16qi)(__m128i)(X),\t\t\\\n+\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(M)))\n+#define _mm_cmpistrs(X, Y, M)\t\t\t\t\t\t\\\n+  ((int) __builtin_ia32_pcmpistris128 ((__v16qi)(__m128i)(X),\t\t\\\n+\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(M)))\n+#define _mm_cmpistrz(X, Y, M)\t\t\t\t\t\t\\\n+  ((int) __builtin_ia32_pcmpistriz128 ((__v16qi)(__m128i)(X),\t\t\\\n+\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(M)))\n+\n+#define _mm_cmpestra(X, LX, Y, LY, M)\t\t\t\t\t\\\n+  ((int) __builtin_ia32_pcmpestria128 ((__v16qi)(__m128i)(X), (int)(LX), \\\n+\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(LY), \\\n+\t\t\t\t       (int)(M)))\n+#define _mm_cmpestrc(X, LX, Y, LY, M)\t\t\t\t\t\\\n+  ((int) __builtin_ia32_pcmpestric128 ((__v16qi)(__m128i)(X), (int)(LX), \\\n+\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(LY), \\\n+\t\t\t\t       (int)(M)))\n+#define _mm_cmpestro(X, LX, Y, LY, M)\t\t\t\t\t\\\n+  ((int) __builtin_ia32_pcmpestrio128 ((__v16qi)(__m128i)(X), (int)(LX), \\\n+\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(LY), \\\n+\t\t\t\t       (int)(M)))\n+#define _mm_cmpestrs(X, LX, Y, LY, M)\t\t\t\t\t\\\n+  ((int) __builtin_ia32_pcmpestris128 ((__v16qi)(__m128i)(X), (int)(LX), \\\n+\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(LY), \\\n+\t\t\t\t       (int)(M)))\n+#define _mm_cmpestrz(X, LX, Y, LY, M)\t\t\t\t\t\\\n+  ((int) __builtin_ia32_pcmpestriz128 ((__v16qi)(__m128i)(X), (int)(LX), \\\n+\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(LY), \\\n+\t\t\t\t       (int)(M)))\n #endif\n \n /* Packed integer 64-bit comparison, zeroing or filling with ones"}, {"sha": "6b389133079e2608169d7df0c096c0bb1afb5609", "filename": "gcc/config/i386/tmmintrin.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2Fconfig%2Fi386%2Ftmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2Fconfig%2Fi386%2Ftmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ftmmintrin.h?ref=bfcd72332c49fce4b4368d89cbf0e2c7386665b5", "patch": "@@ -185,18 +185,25 @@ _mm_sign_pi32 (__m64 __X, __m64 __Y)\n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n _mm_alignr_epi8(__m128i __X, __m128i __Y, const int __N)\n {\n-  return (__m128i)__builtin_ia32_palignr128 ((__v2di)__X, (__v2di)__Y, __N * 8);}\n+  return (__m128i) __builtin_ia32_palignr128 ((__v2di)__X,\n+\t\t\t\t\t      (__v2di)__Y, __N * 8);\n+}\n \n static __inline __m64 __attribute__((__always_inline__, __artificial__))\n _mm_alignr_pi8(__m64 __X, __m64 __Y, const int __N)\n {\n-  return (__m64)__builtin_ia32_palignr ((long long)__X, (long long)__Y, __N * 8);\n+  return (__m64) __builtin_ia32_palignr ((long long)__X,\n+\t\t\t\t\t (long long)__Y, __N * 8);\n }\n #else\n-#define _mm_alignr_epi8(__X, __Y, __N) \\\n-  ((__m128i)__builtin_ia32_palignr128 ((__v2di) __X, (__v2di) __Y, (__N) * 8))\n-#define _mm_alignr_pi8(__X, __Y, __N) \\\n-  ((__m64)__builtin_ia32_palignr ((long long) (__X), (long long) (__Y), (__N) * 8))\n+#define _mm_alignr_epi8(X, Y, N)\t\t\t\t\t\\\n+  ((__m128i) __builtin_ia32_palignr128 ((__v2di)(__m128i)(X),\t\t\\\n+\t\t\t\t\t(__v2di)(__m128i)(Y),\t\t\\\n+\t\t\t\t\t(int)(N) * 8))\n+#define _mm_alignr_pi8(X, Y, N)\t\t\t\t\t\t\\\n+  ((__m64) __builtin_ia32_palignr ((long long)(__m64)(__X),\t\t\\\n+\t\t\t\t   (long long)(__m64)(__Y),\t\t\\\n+\t\t\t\t   (int)(N) * 8))\n #endif\n \n static __inline __m128i __attribute__((__always_inline__, __artificial__))"}, {"sha": "ab3acebd3a36f043f25aab808002775879e65716", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=bfcd72332c49fce4b4368d89cbf0e2c7386665b5", "patch": "@@ -723,8 +723,9 @@ _mm_shuffle_ps (__m128 __A, __m128 __B, int const __mask)\n   return (__m128) __builtin_ia32_shufps ((__v4sf)__A, (__v4sf)__B, __mask);\n }\n #else\n-#define _mm_shuffle_ps(A, B, MASK) \\\n- ((__m128) __builtin_ia32_shufps ((__v4sf)(A), (__v4sf)(B), (MASK)))\n+#define _mm_shuffle_ps(A, B, MASK)\t\t\t\t\t\\\n+  ((__m128) __builtin_ia32_shufps ((__v4sf)(__m128)(A),\t\t\t\\\n+\t\t\t\t   (__v4sf)(__m128)(B), (int)(MASK)))\n #endif\n \n /* Selects and interleaves the upper two SPFP values from A and B.  */\n@@ -1004,8 +1005,10 @@ _m_pextrw (__m64 const __A, int const __N)\n   return _mm_extract_pi16 (__A, __N);\n }\n #else\n-#define _mm_extract_pi16(A, N)\t__builtin_ia32_vec_ext_v4hi ((__v4hi)(A), (N))\n-#define _m_pextrw(A, N)\t\t_mm_extract_pi16((A), (N))\n+#define _mm_extract_pi16(A, N)\t\\\n+  ((int) __builtin_ia32_vec_ext_v4hi ((__v4hi)(__m64)(A), (int)(N)))\n+#define _m_pextrw(A, N) \\\n+  ((int) _mm_extract_pi16((__m64)(A),(int)(N)))\n #endif\n \n /* Inserts word D into one of four words of A.  The selector N must be\n@@ -1023,9 +1026,11 @@ _m_pinsrw (__m64 const __A, int const __D, int const __N)\n   return _mm_insert_pi16 (__A, __D, __N);\n }\n #else\n-#define _mm_insert_pi16(A, D, N) \\\n-  ((__m64) __builtin_ia32_vec_set_v4hi ((__v4hi)(A), (D), (N)))\n-#define _m_pinsrw(A, D, N)\t _mm_insert_pi16((A), (D), (N))\n+#define _mm_insert_pi16(A, D, N)\t\t\t\t\\\n+  ((__m64) __builtin_ia32_vec_set_v4hi ((__v4hi)(__m64)(A),\t\\\n+\t\t\t\t\t(int)(D), (int)(N)))\n+#define _m_pinsrw(A, D, N) \\\n+  ((__m64) _mm_insert_pi16((__m64)(A), (int)(D), (int)(N))\n #endif\n \n /* Compute the element-wise maximum of signed 16-bit values.  */\n@@ -1123,8 +1128,9 @@ _m_pshufw (__m64 __A, int const __N)\n }\n #else\n #define _mm_shuffle_pi16(A, N) \\\n-  ((__m64) __builtin_ia32_pshufw ((__v4hi)(A), (N)))\n-#define _m_pshufw(A, N)\t\t_mm_shuffle_pi16 ((A), (N))\n+  ((__m64) __builtin_ia32_pshufw ((__v4hi)(__m64)(A), (int)(N)))\n+#define _m_pshufw(A, N) \\\n+  ((__m64) _mm_shuffle_pi16 ((__m64)(A), (int)(N))\n #endif\n \n /* Conditionally store byte elements of A into P.  The high bit of each"}, {"sha": "234c425cb3446c9b57e96ac5175db93bfdabca9b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bfcd72332c49fce4b4368d89cbf0e2c7386665b5", "patch": "@@ -1,4 +1,9 @@\n-2007-11-26  Olga Golovanevsky  <olga@il.ibm.com>\n+2007-12-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/34435\n+\t* g++.dg/other/pr34435.C: New testcase.\n+\n+2007-12-13  Olga Golovanevsky  <olga@il.ibm.com>\n \n \t* gcc.dg/struct: New directory with tests \n \tfor struct-reorg optimizaion."}, {"sha": "a9c68786534c35280a01abbf9ec5aea250ce37f5", "filename": "gcc/testsuite/g++.dg/other/pr34435.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr34435.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfcd72332c49fce4b4368d89cbf0e2c7386665b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr34435.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr34435.C?ref=bfcd72332c49fce4b4368d89cbf0e2c7386665b5", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-msse2\" } */\n+\n+#include <emmintrin.h>\n+\n+class Vec {\n+    __m128i vec;\n+public:\n+    Vec(int mm) {\n+        vec = _mm_set1_epi16(mm);\n+    }\n+  operator __m128i() const {\n+      return vec;\n+    }\n+};\n+\n+int main() {\n+  _mm_shuffle_epi32(Vec(5), _MM_SHUFFLE(3,3,3,3));\n+}"}]}