{"sha": "5ee4950e46c20b9b14b2fca1997b63121b5158b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVlNDk1MGU0NmMyMGI5YjE0YjJmY2ExOTk3YjYzMTIxYjUxNThiMQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@cambridge.redhat.com", "date": "2002-02-01T15:20:16Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2002-02-01T15:20:16Z"}, "message": "stormy16.md (pushqi): New.\n\n2002-01-30  Andrew Haley  <aph@cambridge.redhat.com>\n\n        * config/stormy16/stormy16.md (pushqi): New.\n        (popqi): New.\n        (pushhi): New.\n        (pophi): New.\n        (movhi): Remove stack operands.\n        (movqi): Likewise.\n        * config/stormy16/stormy16.h (PREDICATE_CODES): Add\n        nonimmediate_nonstack_operand.\n        * config/stormy16/stormy16.c (nonimmediate_nonstack_operand):\n        New.\n        * config/stormy16/stormy16-protos.h (nonimmediate_nonstack_operand)\n        New.\n\nFrom-SVN: r49394", "tree": {"sha": "73bd43f41a41624df697e872f828c3eeab8129c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73bd43f41a41624df697e872f828c3eeab8129c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ee4950e46c20b9b14b2fca1997b63121b5158b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee4950e46c20b9b14b2fca1997b63121b5158b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ee4950e46c20b9b14b2fca1997b63121b5158b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee4950e46c20b9b14b2fca1997b63121b5158b1/comments", "author": null, "committer": null, "parents": [{"sha": "b88c0704cf87c13c78f1a0741704b4e41897c195", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b88c0704cf87c13c78f1a0741704b4e41897c195", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b88c0704cf87c13c78f1a0741704b4e41897c195"}], "stats": {"total": 98, "additions": 80, "deletions": 18}, "files": [{"sha": "b8b7ac35c3341513b03134d85f2b318bce47a35c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee4950e46c20b9b14b2fca1997b63121b5158b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee4950e46c20b9b14b2fca1997b63121b5158b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ee4950e46c20b9b14b2fca1997b63121b5158b1", "patch": "@@ -1,3 +1,18 @@\n+2002-01-30  Andrew Haley  <aph@cambridge.redhat.com>\n+\n+        * config/stormy16/stormy16.md (pushqi): New.\n+        (popqi): New.\n+        (pushhi): New.\n+        (pophi): New.\n+        (movhi): Remove stack operands.\n+        (movqi): Likewise.\n+        * config/stormy16/stormy16.h (PREDICATE_CODES): Add\n+        nonimmediate_nonstack_operand.\n+        * config/stormy16/stormy16.c (nonimmediate_nonstack_operand): \n+        New.\n+        * config/stormy16/stormy16-protos.h (nonimmediate_nonstack_operand)\n+        New.\n+\n 2002-01-31  Jason Merrill  <jason@redhat.com>\n \n \t* Makefile.in (c-parse.c): Handle .output file."}, {"sha": "76d0bc0dcfedf298c9b57ade53fa2112d0bbfb88", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee4950e46c20b9b14b2fca1997b63121b5158b1/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee4950e46c20b9b14b2fca1997b63121b5158b1/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=5ee4950e46c20b9b14b2fca1997b63121b5158b1", "patch": "@@ -73,6 +73,7 @@ extern int inequality_operator PARAMS ((rtx, enum machine_mode));\n extern void xstormy16_split_cbranch PARAMS ((enum machine_mode, \n \t\t\t\t\t   rtx, rtx, rtx, rtx));\n extern int  short_memory_operand PARAMS ((rtx, enum machine_mode));\n+extern int  nonimmediate_nonstack_operand PARAMS ((rtx, enum machine_mode));\n extern enum reg_class xstormy16_secondary_reload_class \n   PARAMS ((enum reg_class, enum machine_mode, rtx));\n extern int  xstormy16_carry_plus_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "0a886aceea4b6224d0ca66148a2b89e8820b8c77", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee4950e46c20b9b14b2fca1997b63121b5158b1/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee4950e46c20b9b14b2fca1997b63121b5158b1/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=5ee4950e46c20b9b14b2fca1997b63121b5158b1", "patch": "@@ -622,6 +622,17 @@ short_memory_operand (x, mode)\n   return (GET_CODE (XEXP (x, 0)) != PLUS);\n }\n \n+int\n+nonimmediate_nonstack_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  /* 'Q' is for pushes, 'R' for pops.  */\n+  return (nonimmediate_operand (op, mode) \n+\t  && ! xstormy16_extra_constraint_p (op, 'Q')\n+\t  && ! xstormy16_extra_constraint_p (op, 'R'));\n+}\n+\n /* Splitter for the 'move' patterns, for modes not directly implemeted\n    by hardware.  Emit insns to copy a value of mode MODE from SRC to\n    DEST."}, {"sha": "b4ceb3efe3f1270041b123c09d7a14fcceb34113", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee4950e46c20b9b14b2fca1997b63121b5158b1/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee4950e46c20b9b14b2fca1997b63121b5158b1/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=5ee4950e46c20b9b14b2fca1997b63121b5158b1", "patch": "@@ -3894,8 +3894,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n   {\"shift_operator\", {ASHIFT, ASHIFTRT, LSHIFTRT }},\t\\\n   {\"equality_operator\", {EQ, NE }},\t\t\t\\\n   {\"inequality_operator\", {GE, GT, LE, LT, GEU, GTU, LEU, LTU }}, \\\n-  {\"xstormy16_ineqsi_operator\", {LT, GE, LTU, GEU }},\n-\n+  {\"xstormy16_ineqsi_operator\", {LT, GE, LTU, GEU }}, \\\n+  {\"nonimmediate_nonstack_operand\", {REG, MEM}},\n /* An alias for a machine mode name.  This is the machine mode that elements of\n    a jump-table should have.  */\n #define CASE_VECTOR_MODE SImode"}, {"sha": "3dcaa6859fd7246652db111e076181a9e48246b7", "filename": "gcc/config/stormy16/stormy16.md", "status": "modified", "additions": 51, "deletions": 16, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee4950e46c20b9b14b2fca1997b63121b5158b1/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee4950e46c20b9b14b2fca1997b63121b5158b1/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.md?ref=5ee4950e46c20b9b14b2fca1997b63121b5158b1", "patch": "@@ -72,21 +72,46 @@\n ;; :: Moves\n ;; ::\n ;; ::::::::::::::::::::\n+;; push/pop qi and hi are here as separate insns rather than part of\n+;; the movqi/hi patterns because we need to ensure that reload isn't\n+;; passed anything it can't cope with.  Without these patterns, we\n+;; might end up with\n+\n+;; (set (mem (post_inc (sp))) mem (post_inc (reg)))\n+\n+;; If, in this example, reg needs reloading, reload will read reg from\n+;; the stack , adjust sp, and store reg back at what is now the wrong\n+;; offset.  By using separate patterns for push and pop we ensure that\n+;; insns like this one are never generated.\n+\n+(define_insn \"pushqi\"\n+  [(set (mem:QI (post_inc (reg:HI 15)))\n+\t(match_operand:QI 0 \"register_operand\" \"r\"))]\n+  \"\"\n+  \"push %0\"\n+  [(set_attr \"psw_operand\" \"nop\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_insn \"popqi\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n+\t(mem:QI (pre_dec (reg:HI 15))))]\n+  \"\"\n+  \"pop %0\"\n+  [(set_attr \"psw_operand\" \"nop\")\n+   (set_attr \"length\" \"2\")])\n \n (define_expand \"movqi\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n+  [(set (match_operand:QI 0 \"nonimmediate_nonstack_operand\" \"\")\n \t(match_operand:QI 1 \"general_operand\" \"\"))]\n   \"\"\n   \"{ xstormy16_expand_move (QImode, operands[0], operands[1]); DONE; }\")\n \n (define_insn \"*movqi_internal\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,Q,r,m,e,e,T,r,S\")\n-\t(match_operand:QI 1 \"general_operand\"       \"r,r,R,e,m,i,i,i,i\"))]\n+  [(set (match_operand:QI 0 \"nonimmediate_nonstack_operand\" \"=r,m,e,e,T,r,S\")\n+\t(match_operand:QI 1 \"general_operand\"       \"r,e,m,i,i,i,i\"))]\n   \"\"\n   \"@\n    mov %0,%1\n-   push %1\n-   pop %0\n    mov.b %0,%1\n    mov.b %0,%1\n    mov %0,%1\n@@ -95,8 +120,6 @@\n    mov.b %0,%1\"\n   [(set_attr_alternative \"length\" \n \t     [(const_int 2)\n-\t      (const_int 2)\n-\t      (const_int 2)\n \t      (if_then_else (match_operand:QI 0 \"short_memory_operand\" \"\")\n \t\t\t    (const_int 2)\n \t\t\t    (const_int 4))\n@@ -107,22 +130,36 @@\n \t      (const_int 2)\n \t      (const_int 4)\n \t      (const_int 4)])\n-   (set_attr \"psw_operand\" \"0,nop,nop,0,0,0,nop,0,nop\")])\n+   (set_attr \"psw_operand\" \"0,0,0,0,nop,0,nop\")])\n+\n+(define_insn \"pushhi\"\n+  [(set (mem:HI (post_inc (reg:HI 15)))\n+\t(match_operand:HI 0 \"register_operand\" \"r\"))]\n+  \"\"\n+  \"push %0\"\n+  [(set_attr \"psw_operand\" \"nop\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_insn \"pophi\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(mem:HI (pre_dec (reg:HI 15))))]\n+  \"\"\n+  \"pop %0\"\n+  [(set_attr \"psw_operand\" \"nop\")\n+   (set_attr \"length\" \"2\")])\n \n (define_expand \"movhi\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n+  [(set (match_operand:HI 0 \"nonimmediate_nonstack_operand\" \"\")\n \t(match_operand:HI 1 \"general_operand\" \"\"))]\n   \"\"\n   \"{ xstormy16_expand_move (HImode, operands[0], operands[1]); DONE; }\")\n \n (define_insn \"*movhi_internal\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,Q,r,m,e,e,T,r,S\")\n-\t(match_operand:HI 1 \"general_operand\"       \"r,r,R,e,m,L,L,i,i\"))]\n+  [(set (match_operand:HI 0 \"nonimmediate_nonstack_operand\" \"=r,m,e,e,T,r,S\")\n+\t(match_operand:HI 1 \"general_operand\"       \"r,e,m,L,L,i,i\"))]\n   \"\"\n   \"@\n    mov %0,%1\n-   push %1\n-   pop %0\n    mov.w %0,%1\n    mov.w %0,%1\n    mov.w %0,%1\n@@ -131,8 +168,6 @@\n    mov.w %0,%1\"\n   [(set_attr_alternative \"length\" \n \t     [(const_int 2)\n-\t      (const_int 2)\n-\t      (const_int 2)\n \t      (if_then_else (match_operand:QI 0 \"short_memory_operand\" \"\")\n \t\t\t    (const_int 2)\n \t\t\t    (const_int 4))\n@@ -143,7 +178,7 @@\n \t      (const_int 2)\n \t      (const_int 4)\n \t      (const_int 4)])\n-   (set_attr \"psw_operand\" \"0,nop,nop,0,0,0,nop,0,nop\")])\n+   (set_attr \"psw_operand\" \"0,0,0,0,nop,0,nop\")])\n \n (define_expand \"movsi\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")"}]}