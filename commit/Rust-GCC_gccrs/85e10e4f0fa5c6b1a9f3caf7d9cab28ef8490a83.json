{"sha": "85e10e4f0fa5c6b1a9f3caf7d9cab28ef8490a83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVlMTBlNGYwZmE1YzZiMWE5ZjNjYWY3ZDljYWIyOGVmODQ5MGE4Mw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-03-22T09:27:05Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-03-22T09:30:46Z"}, "message": "Darwin: Fix i686 bootstrap when the assembler supports GOTOFF in data.\n\nWhen we use an assembler that supports \" .long XX@GOTOFF\", the current\ncombination of configuration parameters and conditional compilation\n(when building an i686-darwin compiler with mdynamic-no-pic) assume that\nit's OK to put jump tables in the .const section.\n\nHowever, when we encounter a weak function with a jump table, this\nproduces relocations that directly access the weak symbol section from\nthe .const section - which is deemed illegal by the linker (since that\nwould mean that the weak symbol could not be replaced).\n\nArguably, this is a limitation (maybe even a bug) in the linker - but\nit seems that we'd have to change the ABI to fix it - since it would\nrequire some annotation (maybe just using a special section for the\njump tables) to tell the linker that this specific circumstance is OK\nbecause the direct access to the weak symbol can only occur from that\nsymbol itself.\n\nThe fix is to force jump tables into the text section for all X86 Darwin\nversions (PIC code already had this change).\n\ngcc/ChangeLog:\n\n2020-03-22  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* config/i386/darwin.h (JUMP_TABLES_IN_TEXT_SECTION): Remove\n\treferences to Darwin.\n\t* config/i386/i386.h (JUMP_TABLES_IN_TEXT_SECTION): Define this\n\tunconditionally and comment on why.", "tree": {"sha": "87c00c7f407beefac816c470faf5a860a98733ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87c00c7f407beefac816c470faf5a860a98733ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85e10e4f0fa5c6b1a9f3caf7d9cab28ef8490a83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85e10e4f0fa5c6b1a9f3caf7d9cab28ef8490a83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85e10e4f0fa5c6b1a9f3caf7d9cab28ef8490a83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85e10e4f0fa5c6b1a9f3caf7d9cab28ef8490a83/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88d7d0ce8fa4643923958497f4b2a49db8d32611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d7d0ce8fa4643923958497f4b2a49db8d32611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88d7d0ce8fa4643923958497f4b2a49db8d32611"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "96883830929e5e545f9e5a218b81859319c70ed3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85e10e4f0fa5c6b1a9f3caf7d9cab28ef8490a83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85e10e4f0fa5c6b1a9f3caf7d9cab28ef8490a83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85e10e4f0fa5c6b1a9f3caf7d9cab28ef8490a83", "patch": "@@ -1,3 +1,10 @@\n+2020-03-22  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/i386/darwin.h (JUMP_TABLES_IN_TEXT_SECTION): Remove\n+\treferences to Darwin.\n+\t* config/i386/i386.h (JUMP_TABLES_IN_TEXT_SECTION): Define this\n+\tunconditionally and comment on why.\n+\n 2020-03-21 Iain Sandoe <iain@sandoe.co.uk>\n \n \t* config/darwin.c (darwin_mergeable_constant_section): Collect"}, {"sha": "5faa1f40089c0c08d6fa3747e359d7874babc334", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85e10e4f0fa5c6b1a9f3caf7d9cab28ef8490a83/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85e10e4f0fa5c6b1a9f3caf7d9cab28ef8490a83/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=85e10e4f0fa5c6b1a9f3caf7d9cab28ef8490a83", "patch": "@@ -239,6 +239,16 @@ along with GCC; see the file COPYING3.  If not see\n #undef TARGET_ASM_OUTPUT_IDENT\n #define TARGET_ASM_OUTPUT_IDENT default_asm_output_ident_directive\n \n+/* We always want jump tables in the text section:\n+   * for PIC code, we need the subtracted symbol to be defined at\n+     assembly-time.\n+   * for mdynamic-no-pic, we cannot support jump tables in the .const\n+     section for weak functions, this looks to ld64 like direct access\n+     to the weak symbol from an anonymous atom.  */\n+\n+#undef JUMP_TABLES_IN_TEXT_SECTION\n+#define JUMP_TABLES_IN_TEXT_SECTION 1\n+\n /* Darwin profiling -- call mcount.\n    If we need a stub, then we unconditionally mark it as used.  */\n #undef FUNCTION_PROFILER"}, {"sha": "b8dddfc1594b5cfe0d9d448f2cd42a324d45b706", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85e10e4f0fa5c6b1a9f3caf7d9cab28ef8490a83/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85e10e4f0fa5c6b1a9f3caf7d9cab28ef8490a83/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=85e10e4f0fa5c6b1a9f3caf7d9cab28ef8490a83", "patch": "@@ -2285,11 +2285,10 @@ extern int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER];\n \n /* Under some conditions we need jump tables in the text section,\n    because the assembler cannot handle label differences between\n-   sections.  This is the case for x86_64 on Mach-O for example.  */\n+   sections.  */\n \n #define JUMP_TABLES_IN_TEXT_SECTION \\\n-  (flag_pic && ((TARGET_MACHO && TARGET_64BIT) \\\n-   || (!TARGET_64BIT && !HAVE_AS_GOTOFF_IN_DATA)))\n+  (flag_pic && !(TARGET_64BIT || HAVE_AS_GOTOFF_IN_DATA))\n \n /* Switch to init or fini section via SECTION_OP, emit a call to FUNC,\n    and switch back.  For x86 we do this only to save a few bytes that"}]}