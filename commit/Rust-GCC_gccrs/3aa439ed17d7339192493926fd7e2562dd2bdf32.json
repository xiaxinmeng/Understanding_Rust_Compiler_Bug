{"sha": "3aa439ed17d7339192493926fd7e2562dd2bdf32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FhNDM5ZWQxN2Q3MzM5MTkyNDkzOTI2ZmQ3ZTI1NjJkZDJiZGYzMg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2011-07-05T17:45:38Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2011-07-05T17:45:38Z"}, "message": "Add --param case-values-threshold\n\nFrom-SVN: r175878", "tree": {"sha": "095ec451919656cb15be5b1220e74f1a6d565dc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/095ec451919656cb15be5b1220e74f1a6d565dc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3aa439ed17d7339192493926fd7e2562dd2bdf32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa439ed17d7339192493926fd7e2562dd2bdf32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aa439ed17d7339192493926fd7e2562dd2bdf32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa439ed17d7339192493926fd7e2562dd2bdf32/comments", "author": null, "committer": null, "parents": [{"sha": "fb237f9c64aee0430a51aefd60a5ca498d2dca40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb237f9c64aee0430a51aefd60a5ca498d2dca40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb237f9c64aee0430a51aefd60a5ca498d2dca40"}], "stats": {"total": 112, "additions": 110, "deletions": 2}, "files": [{"sha": "184ea83bf118273d77cd8c3b2e977463aa90ecb2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa439ed17d7339192493926fd7e2562dd2bdf32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa439ed17d7339192493926fd7e2562dd2bdf32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3aa439ed17d7339192493926fd7e2562dd2bdf32", "patch": "@@ -1,3 +1,17 @@\n+2011-07-05  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* params.def (PARAM_CASE_VALUES_THRESHOLD): New parameter to\n+\toverride CASE_VALUES_THRESHOLD.\n+\n+\t* stmt.c (toplevel): Include params.h.\n+\t(case_values_threshold): Use the --param case-values-threshold\n+\tvalue if non-zero, otherwise use machine dependent value.\n+\t(expand_case): Use case_values_threshold.\n+\n+\t* Makefile.in (stmt.o): Add $(PARAMS_H) dependency.\n+\n+\t* doc/invoke.texi (--param case-values-threshold): Document.\n+\n 2011-07-05  Richard Henderson  <rth@redhat.com>\n \n \t* dwarf2out.c (dwarf2out_cfi_label): Make static."}, {"sha": "82119117e6783bc8983cd4d320e45fad78c6757b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa439ed17d7339192493926fd7e2562dd2bdf32/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa439ed17d7339192493926fd7e2562dd2bdf32/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3aa439ed17d7339192493926fd7e2562dd2bdf32", "patch": "@@ -2946,7 +2946,7 @@ stmt.o : stmt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(LIBFUNCS_H) $(EXCEPT_H) $(RECOG_H) $(DIAGNOSTIC_CORE_H) \\\n    output.h $(GGC_H) $(TM_P_H) langhooks.h $(PREDICT_H) $(OPTABS_H) \\\n    $(TARGET_H) $(GIMPLE_H) $(MACHMODE_H) $(REGS_H) alloc-pool.h \\\n-   $(PRETTY_PRINT_H) $(BITMAP_H)\n+   $(PRETTY_PRINT_H) $(BITMAP_H) $(PARAMS_H)\n except.o : except.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(EXCEPT_H) $(FUNCTION_H) $(EXPR_H) $(LIBFUNCS_H) \\\n    langhooks.h insn-config.h hard-reg-set.h $(BASIC_BLOCK_H) output.h \\"}, {"sha": "c5e369ac6f89de61a0d37fc81390b846587fc765", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa439ed17d7339192493926fd7e2562dd2bdf32/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa439ed17d7339192493926fd7e2562dd2bdf32/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3aa439ed17d7339192493926fd7e2562dd2bdf32", "patch": "@@ -9026,6 +9026,11 @@ The maximum number of conditional stores paires that can be sunk.  Set to 0\n if either vectorization (@option{-ftree-vectorize}) or if-conversion\n (@option{-ftree-loop-if-convert}) is disabled.  The default is 2.\n \n+@item case-values-threshold\n+The smallest number of different values for which it is best to use a\n+jump-table instead of a tree of conditional branches.  If the value is\n+0, use the default for the machine.  The default is 0.\n+\n @end table\n @end table\n "}, {"sha": "78601f6de88da0182930d34d320fd008c8e95e83", "filename": "gcc/params.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa439ed17d7339192493926fd7e2562dd2bdf32/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa439ed17d7339192493926fd7e2562dd2bdf32/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=3aa439ed17d7339192493926fd7e2562dd2bdf32", "patch": "@@ -892,6 +892,16 @@ DEFPARAM (PARAM_MAX_STORES_TO_SINK,\n           \"Maximum number of conditional store pairs that can be sunk\",\n           2, 0, 0)\n \n+/* Override CASE_VALUES_THRESHOLD of when to switch from doing switch\n+   statements via if statements to using a table jump operation.  If the value\n+   is 0, the default CASE_VALUES_THRESHOLD will be used.  */\n+DEFPARAM (PARAM_CASE_VALUES_THRESHOLD,\n+          \"case-values-threshold\",\n+          \"The smallest number of different values for which it is best to \"\n+\t  \"use a jump-table instead of a tree of conditional branches, \"\n+\t  \"if 0, use the default for the machine\",\n+          0, 0, 0)\n+\n \n /*\n Local variables:"}, {"sha": "38e1e285234a5d54f243fe423fdb3cac649ad364", "filename": "gcc/stmt.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa439ed17d7339192493926fd7e2562dd2bdf32/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa439ed17d7339192493926fd7e2562dd2bdf32/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=3aa439ed17d7339192493926fd7e2562dd2bdf32", "patch": "@@ -53,6 +53,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"alloc-pool.h\"\n #include \"pretty-print.h\"\n #include \"bitmap.h\"\n+#include \"params.h\"\n \n \f\n /* Functions and data structures for expanding case statements.  */\n@@ -2270,6 +2271,20 @@ expand_switch_using_bit_tests_p (tree index_expr, tree range,\n \t      || (uniq == 3 && count >= 6)));\n }\n \n+/* Return the smallest number of different values for which it is best to use a\n+   jump-table instead of a tree of conditional branches.  */\n+\n+static unsigned int\n+case_values_threshold (void)\n+{\n+  unsigned int threshold = PARAM_VALUE (PARAM_CASE_VALUES_THRESHOLD);\n+\n+  if (threshold == 0)\n+    threshold = targetm.case_values_threshold ();\n+\n+  return threshold;\n+}\n+\n /* Terminate a case (Pascal/Ada) or switch (C) statement\n    in which ORIG_INDEX is the expression to be tested.\n    If ORIG_TYPE is not NULL, it is the original ORIG_INDEX\n@@ -2424,7 +2439,7 @@ expand_case (gimple stmt)\n \t If the switch-index is a constant, do it this way\n \t because we can optimize it.  */\n \n-      else if (count < targetm.case_values_threshold ()\n+      else if (count < case_values_threshold ()\n \t       || compare_tree_int (range,\n \t\t\t\t    (optimize_insn_for_size_p () ? 3 : 10) * count) > 0\n \t       /* RANGE may be signed, and really large ranges will show up"}, {"sha": "7ce7bf88c7c93fdd6005d95654ff788aff93727d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa439ed17d7339192493926fd7e2562dd2bdf32/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa439ed17d7339192493926fd7e2562dd2bdf32/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3aa439ed17d7339192493926fd7e2562dd2bdf32", "patch": "@@ -1,3 +1,9 @@\n+2011-07-05  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/ppc-switch-1.c: New test for\n+\t--param case-values-threshold.\n+\t* gcc.target/powerpc/ppc-switch-2.c: Ditto.\n+\n 2011-07-05  Janis Johnson  <janisjo@codesourcery.com>\n \n \t* gcc.target/arm/pr42093.c: Use \"-fno-reorder-blocks\"."}, {"sha": "ac1dac9faa9190004e7f24a78efbf98a63e297bb", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-switch-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa439ed17d7339192493926fd7e2562dd2bdf32/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-switch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa439ed17d7339192493926fd7e2562dd2bdf32/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-switch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-switch-1.c?ref=3aa439ed17d7339192493926fd7e2562dd2bdf32", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-options \"-O2 --param case-values-threshold=2\" } */\n+/* { dg-final { scan-assembler \"mtctr\" } } */\n+/* { dg-final { scan-assembler \"bctr\" } } */\n+\n+/* Force using a dispatch table even though by default we would generate\n+   ifs.  */\n+\n+extern long call (long);\n+\n+long\n+test_switch (long a, long b)\n+{\n+  long c;\n+\n+  switch (a)\n+    {\n+    case 0:  c = -b;\tbreak;\n+    case 1:  c = ~b;\tbreak;\n+    case 2:  c = b+1;\tbreak;\n+    default: c = b & 9;\tbreak;\n+    }\n+\n+  return call (c) + 1;\n+}"}, {"sha": "4f2efccfbd75fffe41147efd2b8e5c9efb038969", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-switch-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa439ed17d7339192493926fd7e2562dd2bdf32/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-switch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa439ed17d7339192493926fd7e2562dd2bdf32/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-switch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-switch-2.c?ref=3aa439ed17d7339192493926fd7e2562dd2bdf32", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-options \"-O2 --param case-values-threshold=20\" } */\n+/* { dg-final { scan-assembler-not \"mtctr\" } } */\n+/* { dg-final { scan-assembler-not \"bctr\" } } */\n+\n+/* Force using if tests, instead of a dispatch table.  */\n+\n+extern long call (long);\n+\n+long\n+test_switch (long a, long b)\n+{\n+  long c;\n+\n+  switch (a)\n+    {\n+    case 0:  c = -b;\tbreak;\n+    case 1:  c = ~b;\tbreak;\n+    case 2:  c = b+1;\tbreak;\n+    case 3:  c = b-2;\tbreak;\n+    case 4:  c = b*3;\tbreak;\n+    case 5:  c = b/4;\tbreak;\n+    case 6:  c = b<<5;\tbreak;\n+    case 7:  c = b>>6;\tbreak;\n+    case 8:  c = b|7;\tbreak;\n+    case 9:  c = b^8;\tbreak;\n+    default: c = b&9;\tbreak;\n+    }\n+\n+  return call (c) + 1;\n+}"}]}