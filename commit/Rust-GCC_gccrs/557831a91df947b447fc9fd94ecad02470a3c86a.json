{"sha": "557831a91df947b447fc9fd94ecad02470a3c86a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU3ODMxYTkxZGY5NDdiNDQ3ZmM5ZmQ5NGVjYWQwMjQ3MGEzYzg2YQ==", "commit": {"author": {"name": "Fabien Ch\u00eane", "email": "fabien@gcc.gnu.org", "date": "2011-11-14T17:55:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-11-14T17:55:57Z"}, "message": "re PR c++/6936 (member \"using\" binds wrong)\n\n\tPR c++/6936\n\tPR c++/25994\n\tPR c++/26256\n\tPR c++/30195\n\t* search.c (lookup_field_1): Look through USING_DECL.\n\t(lookup_field_r): Call lookup_fnfields_slot instead of\n\tlookup_fnfields_1.\n\t* semantics.c (finish_member_declaration): Remove the check that\n\tprevents USING_DECLs from being verified by\n\tpushdecl_class_level. Call add_method for using declarations that\n\tdesignates functions if the using declaration is in a template\n\tclass. Set DECL_IGNORED_P on class-scope using declarations.\n\t* typeck.c (build_class_member_access_expr): Handle USING_DECLs.\n\t* class.c (check_field_decls): Keep using declarations.\n\t(add_method): Remove two diagnostics about conflicting using\n\tdeclarations.\n\t* parser.c (cp_parser_nonclass_name): Handle USING_DECLs.\n\t* decl.c (start_enum): Call xref_tag whenever possible.\n\t* cp-tree.h (strip_using_decl): Declare, and reident the previous\n\tfunction.\n\t* name-lookup.c (strip_using_decl): New function.\n\t(supplement_binding_1): Call strip_using_decl on decl and\n\tbval. Perform most of the checks with USING_DECLs stripped.  Also\n\tcheck that the target decl and the target bval does not refer to\n\tthe same declaration. Allow pushing an enum multiple times in a\n\ttemplate class. Adjustment to diagnose using redeclarations. Call\n\tdiagnose_name_conflict.\n\t(push_class_level_binding): Call strip_using_decl on decl and\n\tbval. Perform most of the checks with USING_DECLs stripped. Return\n\ttrue if both decl and bval refer to USING_DECLs and are dependent.\n\t(diagnose_name_conflict): New function.\n\nFrom-SVN: r181359", "tree": {"sha": "f07e77967d125d0ff0d7a38837f5d8b94e0bf38f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f07e77967d125d0ff0d7a38837f5d8b94e0bf38f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/557831a91df947b447fc9fd94ecad02470a3c86a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/557831a91df947b447fc9fd94ecad02470a3c86a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/557831a91df947b447fc9fd94ecad02470a3c86a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/557831a91df947b447fc9fd94ecad02470a3c86a/comments", "author": null, "committer": null, "parents": [{"sha": "ac99ebf5ae4e852bf4aa158d7d8cc2a14c73c7e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac99ebf5ae4e852bf4aa158d7d8cc2a14c73c7e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac99ebf5ae4e852bf4aa158d7d8cc2a14c73c7e8"}], "stats": {"total": 1037, "additions": 931, "deletions": 106}, "files": [{"sha": "e9a7330db63e19e6f7fcb08142b10a01e5f75081", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -1,3 +1,37 @@\n+2011-11-14  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n+\n+\tPR c++/6936\n+\tPR c++/25994\n+\tPR c++/26256\n+\tPR c++/30195\n+\t* search.c (lookup_field_1): Look through USING_DECL.\n+\t(lookup_field_r): Call lookup_fnfields_slot instead of\n+\tlookup_fnfields_1.\n+\t* semantics.c (finish_member_declaration): Remove the check that\n+\tprevents USING_DECLs from being verified by\n+\tpushdecl_class_level. Call add_method for using declarations that\n+\tdesignates functions if the using declaration is in a template\n+\tclass. Set DECL_IGNORED_P on class-scope using declarations.\n+\t* typeck.c (build_class_member_access_expr): Handle USING_DECLs.\n+\t* class.c (check_field_decls): Keep using declarations.\n+\t(add_method): Remove two diagnostics about conflicting using\n+\tdeclarations.\n+\t* parser.c (cp_parser_nonclass_name): Handle USING_DECLs.\n+\t* decl.c (start_enum): Call xref_tag whenever possible.\n+\t* cp-tree.h (strip_using_decl): Declare, and reident the previous\n+\tfunction.\n+\t* name-lookup.c (strip_using_decl): New function.\n+\t(supplement_binding_1): Call strip_using_decl on decl and\n+\tbval. Perform most of the checks with USING_DECLs stripped.  Also\n+\tcheck that the target decl and the target bval does not refer to\n+\tthe same declaration. Allow pushing an enum multiple times in a\n+\ttemplate class. Adjustment to diagnose using redeclarations. Call\n+\tdiagnose_name_conflict.\n+\t(push_class_level_binding): Call strip_using_decl on decl and\n+\tbval. Perform most of the checks with USING_DECLs stripped. Return\n+\ttrue if both decl and bval refer to USING_DECLs and are dependent.\n+\t(diagnose_name_conflict): New function.\n+\n 2011-11-12  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/986"}, {"sha": "4a291acca8ac0886ee75cc712cd7439371d63b39", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -1058,11 +1058,6 @@ add_method (tree type, tree method, tree using_decl)\n \t      if (DECL_CONTEXT (fn) == type)\n \t\t/* Defer to the local function.  */\n \t\treturn false;\n-\t      if (DECL_CONTEXT (fn) == DECL_CONTEXT (method))\n-\t\terror (\"repeated using declaration %q+D\", using_decl);\n-\t      else\n-\t\terror (\"using declaration %q+D conflicts with a previous using declaration\",\n-\t\t       using_decl);\n \t    }\n \t  else\n \t    {\n@@ -3039,15 +3034,8 @@ check_field_decls (tree t, tree *access_decls,\n \n       if (TREE_CODE (x) == USING_DECL)\n \t{\n-\t  /* Prune the access declaration from the list of fields.  */\n-\t  *field = DECL_CHAIN (x);\n-\n \t  /* Save the access declarations for our caller.  */\n \t  *access_decls = tree_cons (NULL_TREE, x, *access_decls);\n-\n-\t  /* Since we've reset *FIELD there's no reason to skip to the\n-\t     next field.  */\n-\t  next = field;\n \t  continue;\n \t}\n "}, {"sha": "fe50e34e7d9ea12c97c937a322aad0f64f081ee6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -5886,7 +5886,8 @@ extern void cxx_omp_finish_clause\t\t(tree);\n extern bool cxx_omp_privatize_by_reference\t(const_tree);\n \n /* in name-lookup.c */\n-extern void suggest_alternatives_for (location_t, tree);\n+extern void suggest_alternatives_for            (location_t, tree);\n+extern tree strip_using_decl                    (tree);\n \n /* -- end of C++ */\n "}, {"sha": "d744da85f3e510b4a43073c84fe77566e09d3061", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -11988,8 +11988,22 @@ start_enum (tree name, tree enumtype, tree underlying_type,\n \t    *is_new = true;\n \t}\n       prevtype = enumtype;\n-      enumtype = cxx_make_type (ENUMERAL_TYPE);\n-      enumtype = pushtag (name, enumtype, /*tag_scope=*/ts_current);\n+\n+      /* Do not push the decl more than once, unless we need to\n+\t compare underlying types at instantiation time */\n+      if (!enumtype\n+\t  || (underlying_type\n+\t      && dependent_type_p (underlying_type))\n+\t  || (ENUM_UNDERLYING_TYPE (enumtype)\n+\t      && dependent_type_p (ENUM_UNDERLYING_TYPE (enumtype))))\n+\t{\n+\t  enumtype = cxx_make_type (ENUMERAL_TYPE);\n+\t  enumtype = pushtag (name, enumtype, /*tag_scope=*/ts_current);\n+\t}\n+      else\n+\t  enumtype = xref_tag (enum_type, name, /*tag_scope=*/ts_current,\n+\t\t\t       false);\n+\n       if (enumtype == error_mark_node)\n \treturn error_mark_node;\n "}, {"sha": "7f6b8cdcf296beb6e5e97f7ffbf5a86d3cfcc946", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 101, "deletions": 38, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -53,6 +53,7 @@ static bool qualified_lookup_using_namespace (tree, tree,\n static tree lookup_type_current_level (tree);\n static tree push_using_directive (tree);\n static tree lookup_extern_c_fun_in_all_ns (tree);\n+static void diagnose_name_conflict (tree, tree);\n \n /* The :: namespace.  */\n \n@@ -394,6 +395,16 @@ pop_binding (tree id, tree decl)\n     }\n }\n \n+/* Strip non dependent using declarations.  */\n+\n+tree\n+strip_using_decl (tree decl)\n+{\n+  while (TREE_CODE (decl) == USING_DECL && !DECL_DEPENDENT_P (decl))\n+    decl = USING_DECL_DECLS (decl);\n+  return decl;\n+}\n+\n /* BINDING records an existing declaration for a name in the current scope.\n    But, DECL is another declaration for that same identifier in the\n    same scope.  This is the `struct stat' hack whereby a non-typedef\n@@ -417,29 +428,46 @@ supplement_binding_1 (cxx_binding *binding, tree decl)\n {\n   tree bval = binding->value;\n   bool ok = true;\n-\n-  if (TREE_CODE (decl) == TYPE_DECL && DECL_ARTIFICIAL (decl))\n+  tree target_bval = strip_using_decl (bval);\n+  tree target_decl = strip_using_decl (decl);\n+\n+  if (TREE_CODE (target_decl) == TYPE_DECL && DECL_ARTIFICIAL (target_decl)\n+      && target_decl != target_bval\n+      && (TREE_CODE (target_bval) != TYPE_DECL\n+\t  /* We allow pushing an enum multiple times in a class\n+\t     template in order to handle late matching of underlying\n+\t     type on an opaque-enum-declaration followed by an\n+\t     enum-specifier.  */\n+\t  || (TREE_CODE (TREE_TYPE (target_decl)) == ENUMERAL_TYPE\n+\t      && TREE_CODE (TREE_TYPE (target_bval)) == ENUMERAL_TYPE\n+\t      && (dependent_type_p (ENUM_UNDERLYING_TYPE\n+\t\t\t\t    (TREE_TYPE (target_decl)))\n+\t\t  || dependent_type_p (ENUM_UNDERLYING_TYPE\n+\t\t\t\t       (TREE_TYPE (target_bval)))))))\n     /* The new name is the type name.  */\n     binding->type = decl;\n-  else if (/* BVAL is null when push_class_level_binding moves an\n-\t      inherited type-binding out of the way to make room for a\n-\t      new value binding.  */\n-\t   !bval\n-\t   /* BVAL is error_mark_node when DECL's name has been used\n-\t      in a non-class scope prior declaration.  In that case,\n-\t      we should have already issued a diagnostic; for graceful\n-\t      error recovery purpose, pretend this was the intended\n-\t      declaration for that name.  */\n-\t   || bval == error_mark_node\n-\t   /* If BVAL is anticipated but has not yet been declared,\n-\t      pretend it is not there at all.  */\n-\t   || (TREE_CODE (bval) == FUNCTION_DECL\n-\t       && DECL_ANTICIPATED (bval)\n-\t       && !DECL_HIDDEN_FRIEND_P (bval)))\n+  else if (/* TARGET_BVAL is null when push_class_level_binding moves\n+\t      an inherited type-binding out of the way to make room\n+\t      for a new value binding.  */\n+\t   !target_bval\n+\t   /* TARGET_BVAL is error_mark_node when TARGET_DECL's name\n+\t      has been used in a non-class scope prior declaration.\n+\t      In that case, we should have already issued a\n+\t      diagnostic; for graceful error recovery purpose, pretend\n+\t      this was the intended declaration for that name.  */\n+\t   || target_bval == error_mark_node\n+\t   /* If TARGET_BVAL is anticipated but has not yet been\n+\t      declared, pretend it is not there at all.  */\n+\t   || (TREE_CODE (target_bval) == FUNCTION_DECL\n+\t       && DECL_ANTICIPATED (target_bval)\n+\t       && !DECL_HIDDEN_FRIEND_P (target_bval)))\n     binding->value = decl;\n-  else if (TREE_CODE (bval) == TYPE_DECL && DECL_ARTIFICIAL (bval)\n-\t   && (TREE_CODE (decl) != TYPE_DECL\n-\t       || same_type_p (TREE_TYPE (decl), TREE_TYPE (bval))))\n+  else if (TREE_CODE (target_bval) == TYPE_DECL\n+\t   && DECL_ARTIFICIAL (target_bval)\n+\t   && target_decl != target_bval\n+\t   && (TREE_CODE (target_decl) != TYPE_DECL\n+\t       || same_type_p (TREE_TYPE (target_decl),\n+\t\t\t       TREE_TYPE (target_bval))))\n     {\n       /* The old binding was a type name.  It was placed in\n \t VALUE field because it was thought, at the point it was\n@@ -450,15 +478,15 @@ supplement_binding_1 (cxx_binding *binding, tree decl)\n       binding->value = decl;\n       binding->value_is_inherited = false;\n     }\n-  else if (TREE_CODE (bval) == TYPE_DECL\n-\t   && TREE_CODE (decl) == TYPE_DECL\n-\t   && DECL_NAME (decl) == DECL_NAME (bval)\n+  else if (TREE_CODE (target_bval) == TYPE_DECL\n+\t   && TREE_CODE (target_decl) == TYPE_DECL\n+\t   && DECL_NAME (target_decl) == DECL_NAME (target_bval)\n \t   && binding->scope->kind != sk_class\n-\t   && (same_type_p (TREE_TYPE (decl), TREE_TYPE (bval))\n+\t   && (same_type_p (TREE_TYPE (target_decl), TREE_TYPE (target_bval))\n \t       /* If either type involves template parameters, we must\n \t\t  wait until instantiation.  */\n-\t       || uses_template_parms (TREE_TYPE (decl))\n-\t       || uses_template_parms (TREE_TYPE (bval))))\n+\t       || uses_template_parms (TREE_TYPE (target_decl))\n+\t       || uses_template_parms (TREE_TYPE (target_bval))))\n     /* We have two typedef-names, both naming the same type to have\n        the same name.  In general, this is OK because of:\n \n@@ -480,9 +508,10 @@ supplement_binding_1 (cxx_binding *binding, tree decl)\n \n        A member shall not be declared twice in the\n        member-specification.  */\n-  else if (TREE_CODE (decl) == VAR_DECL && TREE_CODE (bval) == VAR_DECL\n-\t   && DECL_EXTERNAL (decl) && DECL_EXTERNAL (bval)\n-\t   && !DECL_CLASS_SCOPE_P (decl))\n+  else if (TREE_CODE (target_decl) == VAR_DECL\n+\t   && TREE_CODE (target_bval) == VAR_DECL\n+\t   && DECL_EXTERNAL (target_decl) && DECL_EXTERNAL (target_bval)\n+\t   && !DECL_CLASS_SCOPE_P (target_decl))\n     {\n       duplicate_decls (decl, binding->value, /*newdecl_is_friend=*/false);\n       ok = false;\n@@ -501,14 +530,30 @@ supplement_binding_1 (cxx_binding *binding, tree decl)\n     ok = false;\n   else\n     {\n-      error (\"declaration of %q#D\", decl);\n-      error (\"conflicts with previous declaration %q+#D\", bval);\n+      diagnose_name_conflict (decl, bval);\n       ok = false;\n     }\n \n   return ok;\n }\n \n+/* Diagnose a name conflict between DECL and BVAL.  */\n+\n+static void\n+diagnose_name_conflict (tree decl, tree bval)\n+{\n+  if (TREE_CODE (decl) == TREE_CODE (bval)\n+      && (TREE_CODE (decl) != TYPE_DECL\n+\t  || (DECL_ARTIFICIAL (decl) && DECL_ARTIFICIAL (bval))\n+\t  || (!DECL_ARTIFICIAL (decl) && !DECL_ARTIFICIAL (bval)))\n+      && !is_overloaded_fn (decl))\n+    error (\"redeclaration of %q#D\", decl);\n+  else\n+    error (\"%q#D conflicts with a previous declaration\", decl);\n+\n+  inform (input_location, \"previous declaration %q+#D\", bval);\n+}\n+\n /* Wrapper for supplement_binding_1.  */\n \n static bool\n@@ -3028,15 +3073,19 @@ push_class_level_binding_1 (tree name, tree x)\n     {\n       tree bval = binding->value;\n       tree old_decl = NULL_TREE;\n+      tree target_decl = strip_using_decl (decl);\n+      tree target_bval = strip_using_decl (bval);\n \n       if (INHERITED_VALUE_BINDING_P (binding))\n \t{\n \t  /* If the old binding was from a base class, and was for a\n \t     tag name, slide it over to make room for the new binding.\n \t     The old binding is still visible if explicitly qualified\n \t     with a class-key.  */\n-\t  if (TREE_CODE (bval) == TYPE_DECL && DECL_ARTIFICIAL (bval)\n-\t      && !(TREE_CODE (x) == TYPE_DECL && DECL_ARTIFICIAL (x)))\n+\t  if (TREE_CODE (target_bval) == TYPE_DECL\n+\t      && DECL_ARTIFICIAL (target_bval)\n+\t      && !(TREE_CODE (target_decl) == TYPE_DECL\n+\t\t   && DECL_ARTIFICIAL (target_decl)))\n \t    {\n \t      old_decl = binding->type;\n \t      binding->type = bval;\n@@ -3048,17 +3097,31 @@ push_class_level_binding_1 (tree name, tree x)\n \t      old_decl = bval;\n \t      /* Any inherited type declaration is hidden by the type\n \t\t declaration in the derived class.  */\n-\t      if (TREE_CODE (x) == TYPE_DECL && DECL_ARTIFICIAL (x))\n+\t      if (TREE_CODE (target_decl) == TYPE_DECL\n+\t\t  && DECL_ARTIFICIAL (target_decl))\n \t\tbinding->type = NULL_TREE;\n \t    }\n \t}\n-      else if (TREE_CODE (x) == OVERLOAD && is_overloaded_fn (bval))\n+      else if (TREE_CODE (target_decl) == OVERLOAD\n+\t       && is_overloaded_fn (target_bval))\n \told_decl = bval;\n-      else if (TREE_CODE (x) == USING_DECL && TREE_CODE (bval) == USING_DECL)\n+      else if (TREE_CODE (decl) == USING_DECL\n+\t       && TREE_CODE (bval) == USING_DECL\n+\t       && same_type_p (USING_DECL_SCOPE (decl),\n+\t\t\t       USING_DECL_SCOPE (bval)))\n+\t/* This is a using redeclaration that will be diagnosed later\n+\t   in supplement_binding */\n+\t;\n+      else if (TREE_CODE (decl) == USING_DECL\n+\t       && TREE_CODE (bval) == USING_DECL\n+\t       && DECL_DEPENDENT_P (decl)\n+\t       && DECL_DEPENDENT_P (bval))\n \treturn true;\n-      else if (TREE_CODE (x) == USING_DECL && is_overloaded_fn (bval))\n+      else if (TREE_CODE (decl) == USING_DECL\n+\t       && is_overloaded_fn (target_bval))\n \told_decl = bval;\n-      else if (TREE_CODE (bval) == USING_DECL && is_overloaded_fn (x))\n+      else if (TREE_CODE (bval) == USING_DECL\n+\t       && is_overloaded_fn (target_decl))\n \treturn true;\n \n       if (old_decl && binding->scope == class_binding_level)"}, {"sha": "23885b867cd01b035bdb4af9309289a0858ea7e1", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -13758,6 +13758,9 @@ cp_parser_nonclass_name (cp_parser* parser)\n   /* Look up the type-name.  */\n   type_decl = cp_parser_lookup_name_simple (parser, identifier, token->location);\n \n+  /* If it is a using decl, use its underlying decl.  */\n+  type_decl = strip_using_decl (type_decl);\n+\n   if (TREE_CODE (type_decl) != TYPE_DECL\n       && (objc_is_id (identifier) || objc_is_class_name (identifier)))\n     {"}, {"sha": "9f308e29d7921ca92bd5f95c7f5a54fbe13c733a", "filename": "gcc/cp/search.c", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -1,7 +1,7 @@\n /* Breadth-first and depth-first routines for\n    searching multiple-inheritance lattice for GNU C++.\n    Copyright (C) 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   1999, 2000, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n@@ -449,6 +449,8 @@ lookup_field_1 (tree type, tree name, bool want_type)\n #endif /* GATHER_STATISTICS */\n   for (field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n     {\n+      tree decl = field;\n+\n #ifdef GATHER_STATISTICS\n       n_fields_searched++;\n #endif /* GATHER_STATISTICS */\n@@ -460,26 +462,20 @@ lookup_field_1 (tree type, tree name, bool want_type)\n \t  if (temp)\n \t    return temp;\n \t}\n-      if (TREE_CODE (field) == USING_DECL)\n+\n+      if (TREE_CODE (decl) == USING_DECL\n+\t  && DECL_NAME (decl) == name)\n \t{\n-\t  /* We generally treat class-scope using-declarations as\n-\t     ARM-style access specifications, because support for the\n-\t     ISO semantics has not been implemented.  So, in general,\n-\t     there's no reason to return a USING_DECL, and the rest of\n-\t     the compiler cannot handle that.  Once the class is\n-\t     defined, USING_DECLs are purged from TYPE_FIELDS; see\n-\t     handle_using_decl.  However, we make special efforts to\n-\t     make using-declarations in class templates and class\n-\t     template partial specializations work correctly.  */\n-\t  if (!DECL_DEPENDENT_P (field))\n+\t  decl = strip_using_decl (decl);\n+\t  if (is_overloaded_fn (decl))\n \t    continue;\n \t}\n \n-      if (DECL_NAME (field) == name\n+      if (DECL_NAME (decl) == name\n \t  && (!want_type\n-\t      || TREE_CODE (field) == TYPE_DECL\n-\t      || DECL_TYPE_TEMPLATE_P (field)))\n-\treturn field;\n+\t      || TREE_CODE (decl) == TYPE_DECL\n+\t      || DECL_TYPE_TEMPLATE_P (decl)))\n+\treturn decl;\n     }\n   /* Not found.  */\n   if (name == vptr_identifier)\n@@ -1028,11 +1024,7 @@ lookup_field_r (tree binfo, void *data)\n      member with the same name, and if there's a function and a type\n      with the same name, the type is hidden by the function.  */\n   if (!lfi->want_type)\n-    {\n-      int idx = lookup_fnfields_1 (type, lfi->name);\n-      if (idx >= 0)\n-\tnval = VEC_index (tree, CLASSTYPE_METHOD_VEC (type), idx);\n-    }\n+    nval = lookup_fnfields_slot (type, lfi->name);\n \n   if (!nval)\n     /* Look for a data member or type.  */"}, {"sha": "f70bdb377b5551c922cd32cde6457fa82753accc", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -2658,9 +2658,29 @@ finish_member_declaration (tree decl)\n \t}\n     }\n   /* Enter the DECL into the scope of the class.  */\n-  else if ((TREE_CODE (decl) == USING_DECL && !DECL_DEPENDENT_P (decl))\n-\t   || pushdecl_class_level (decl))\n+  else if (pushdecl_class_level (decl))\n     {\n+      if (TREE_CODE (decl) == USING_DECL)\n+\t{\n+\t  /* We need to add the target functions to the\n+\t     CLASSTYPE_METHOD_VEC if an enclosing scope is a template\n+\t     class, so that this function be found by lookup_fnfields_1\n+\t     when the using declaration is not instantiated yet.  */\n+\n+\t  tree target_decl = strip_using_decl (decl);\n+\t  if (dependent_type_p (current_class_type)\n+\t      && is_overloaded_fn (target_decl))\n+\t    {\n+\t      tree t = target_decl;\n+\t      for (; t; t = OVL_NEXT (t))\n+\t\tadd_method (current_class_type, OVL_CURRENT (t), decl);\n+\t    }\n+\n+\t  /* For now, ignore class-scope USING_DECLS, so that\n+\t     debugging backends do not see them. */\n+\t  DECL_IGNORED_P (decl) = 1;\n+\t}\n+\n       /* All TYPE_DECLs go at the end of TYPE_FIELDS.  Ordinary fields\n \t go at the beginning.  The reason is that lookup_field_1\n \t searches the list in order, and we want a field name to"}, {"sha": "f08877c5b612059a11f061efd5f854f1da81e161", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -2115,6 +2115,7 @@ build_class_member_access_expr (tree object, tree member,\n   tree object_type;\n   tree member_scope;\n   tree result = NULL_TREE;\n+  tree using_decl = NULL_TREE;\n \n   if (error_operand_p (object) || error_operand_p (member))\n     return error_mark_node;\n@@ -2343,6 +2344,11 @@ build_class_member_access_expr (tree object, tree member,\n \tresult = build2 (COMPOUND_EXPR, TREE_TYPE (result),\n \t\t\t object, result);\n     }\n+  else if ((using_decl = strip_using_decl (member)) != member)\n+    result = build_class_member_access_expr (object,\n+\t\t\t\t\t     using_decl,\n+\t\t\t\t\t     access_path, preserve_reference,\n+\t\t\t\t\t     complain);\n   else\n     {\n       if (complain & tf_error)"}, {"sha": "7a7445e90e7d0872df7a0a91f3b0b41c724eb33b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -1,3 +1,50 @@\n+2011-11-14  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n+\n+\tPR c++/6936\n+\tPR c++/25994\n+\tPR c++/26256\n+\tPR c++/30195\n+\t* g++.old-deja/g++.brendan/misc14.C: Adjust.\n+\t* g++.old-deja/g++.jason/scoping16.C: Likewise.\n+\t* g++.old-deja/g++.other/anon7.C: Likewise.\n+\t* g++.old-deja/g++.other/using1.C: Likewise.\n+\t* g++.old-deja/g++.other/redecl1.C: Likewise.\n+\t* g++.old-deja/g++.other/typedef7.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900127_02.C: Likewise.\n+\t* g++.dg/template/using2.C: Likewise.\n+\t* g++.dg/template/static4.C: Likewise.\n+\t* g++.dg/template/typedef1.C: Likewise.\n+\t* g++.dg/lookup/name-clash9.C: Likewise.\n+\t* g++.dg/abi/mangle41.C: Likewise.\n+\t* g++.dg/parse/ctor5.C: Likewise.\n+\t* g++.dg/inherit/using4.C: Likewise.\n+\t* g++.dg/lookup/using24.C: New.\n+\t* g++.dg/lookup/using25.C: New.\n+\t* g++.dg/lookup/using26.C: New.\n+\t* g++.dg/lookup/using27.C: New.\n+\t* g++.dg/lookup/using28.C: New.\n+\t* g++.dg/lookup/using29.C: New.\n+\t* g++.dg/lookup/using30.C: New.\n+\t* g++.dg/lookup/using31.C: New.\n+\t* g++.dg/lookup/using32.C: New.\n+\t* g++.dg/lookup/using33.C: New.\n+\t* g++.dg/lookup/using34.C: New.\n+\t* g++.dg/lookup/using35.C: New.\n+\t* g++.dg/lookup/using36.C: New.\n+\t* g++.dg/lookup/using37.C: New.\n+\t* g++.dg/lookup/using38.C: New.\n+\t* g++.dg/lookup/using39.C: New.\n+\t* g++.dg/lookup/using40.C: New.\n+\t* g++.dg/lookup/using41.C: New.\n+\t* g++.dg/lookup/using42.C: New.\n+\t* g++.dg/lookup/using43.C: New.\n+\t* g++.dg/lookup/using44.C: New.\n+\t* g++.dg/lookup/using45.C: New.\n+\t* g++.dg/lookup/pr6936.C: New.\n+\t* g++.dg/debug/using4.C: New.\n+\t* g++.dg/debug/using5.C: New.\n+\t* g++.dg/cpp0x/forw_enum10.C: New.\n+\n 2011-11-14  Zolotukhin Michael  <michael.v.zolotukhin@gmail.com>\n \t    Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "4c0d0038e8031e932f35621a8d935048bc21e8a5", "filename": "gcc/testsuite/g++.dg/abi/mangle41.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle41.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -3,5 +3,6 @@\n // { dg-options \"-mavx -fabi-version=2\" }\n \n #include <x86intrin.h>\n-void f(__m128) { }\t\t// { dg-error \"previous\" }\n-void f(__m256) { }\t\t// { dg-message \"declaration|mangling\" }\n+void f(__m128) { }\t\t// { dg-message \"previous declaration\" }\n+void f(__m256) { }\t\t// { dg-error \"conflicts\" }\n+// { dg-message \"mangling\" \"\" { target *-*-* } 7 }"}, {"sha": "a57c0a9f415469f3fc4c8f9b46932fff156b1551", "filename": "gcc/testsuite/g++.dg/cpp0x/forw_enum10.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum10.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+//This error is diagnosed at instantiation time\n+template<typename T> struct S1\n+{\n+    enum E : T;   // { dg-error \"previous definition\" }\n+    enum E : int;     // { dg-error \"different underlying type\" }\n+};\n+template struct S1<short>; // { dg-message \"required from here\" }\n+\n+template<typename T> struct S2\n+{\n+    enum E : T;\n+    enum E : T;\n+};\n+template struct S2<short>;\n+\n+template<typename T1, typename T2> struct S3\n+{\n+    enum E : T1;\n+    enum E : T2;\n+};\n+template struct S3<short,short>;\n+\n+template<typename T1, typename T2> struct S4\n+{\n+    enum E : T1; // { dg-error \"previous definition\" }\n+    enum E : T2; // { dg-error \"different underlying type\" }\n+};\n+template struct S4<short,char>; // { dg-message \"required from here\" }"}, {"sha": "8a6162606c4a4aa60c1c36633663eef5c4598233", "filename": "gcc/testsuite/g++.dg/debug/using4.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fusing4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fusing4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fusing4.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/26256\n+// { dg-do compile }\n+\n+struct A\n+{\n+    typedef char type;\n+};\n+\n+struct B\n+{\n+    typedef int type;\n+};\n+\n+struct C : A, B\n+{\n+    using A::type;\n+    type f (type);\n+};\n+\n+C::type C::f( type )\n+{\n+    type c = 'e';\n+    return c;\n+}"}, {"sha": "3f2de9bfb8063f7f19773f92a245069f60ab1233", "filename": "gcc/testsuite/g++.dg/debug/using5.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fusing5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fusing5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fusing5.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/26256\n+// { dg-do compile }\n+\n+struct A\n+{\n+    int i;\n+};\n+\n+struct B\n+{\n+    int i;\n+};\n+\n+struct C : A, B\n+{\n+    using B::i;\n+    int f ();\n+};\n+\n+int C::f()\n+{\n+    return i;\n+}"}, {"sha": "4b7a28f0f463a3e1cd02041b1502e1b870965619", "filename": "gcc/testsuite/g++.dg/inherit/using4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fusing4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fusing4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fusing4.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -9,6 +9,6 @@ struct B {\n }; \n  \n struct D : B { \n-  using B::f; \n-  using B::f;  // { dg-error \"repeated\" }\n+  using B::f; // { dg-message \"previous declaration\" }\n+  using B::f; // { dg-error \"redeclaration\" }\n }; "}, {"sha": "1e04fafd5b9fb96c9882763e1993ebe03509df86", "filename": "gcc/testsuite/g++.dg/lookup/name-clash9.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash9.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -3,6 +3,6 @@\n \n struct A\n {\n-  struct type {}; // { dg-error \"conflicts with previous\" }\n-  typedef int type; // { dg-error \"declaration\" }\n+  struct type {}; // { dg-message \"previous\" }\n+  typedef int type; // { dg-error \"conflicts\" }\n };"}, {"sha": "377fbcce1e3142e1268be72b32d66e751be82f9e", "filename": "gcc/testsuite/g++.dg/lookup/pr6936.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr6936.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr6936.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr6936.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+// PR c++/6936\n+\n+struct Baser\n+{\n+    enum { j, i }; // { dg-error \"inaccessible\" }\n+};\n+\n+struct Base : Baser\n+{\n+    static void j();\n+    static void i();\n+};\n+\n+struct Derv : Base\n+{\n+  using Baser::j;\n+private:\n+  using Baser::i;\n+};\n+\n+int k = Derv::j;\n+int l = Derv::i; // { dg-error \"context\" }"}, {"sha": "4413be1f0322c0c4588ecd90915ceb86fa239bba", "filename": "gcc/testsuite/g++.dg/lookup/using24.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing24.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/26256\n+// { dg-do compile }\n+\n+struct A { int next; };\n+struct B { int next; };\n+struct C : B { using B::next; };\n+\n+struct D : A, C\n+{\n+   using C::next;\n+   void f() { next = 1; }\n+};"}, {"sha": "eb605700d8d07232c5ab6ec770f89de1f501a82f", "filename": "gcc/testsuite/g++.dg/lookup/using25.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing25.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/26256\n+// { dg-do run }\n+\n+struct A\n+{\n+    int next;\n+};\n+\n+struct B\n+{\n+    int next;\n+};\n+\n+struct C : public A, public B\n+{\n+    using A::next;\n+};\n+\n+void foo(C& c) { c.next = 42; }\n+\n+int main()\n+{\n+    C c;\n+    foo (c);\n+    c.B::next = 12;\n+    if (c.next != 42 || c.A::next != 42 || c.B::next != 12)\n+\t__builtin_abort();\n+}"}, {"sha": "141d14581c181a95fa18c03eb2b9eed4f79807cd", "filename": "gcc/testsuite/g++.dg/lookup/using26.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing26.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/26256\n+// { dg-do compile }\n+\n+struct A\n+{\n+    double next;\n+};\n+\n+struct B\n+{\n+private:\n+    int next; // { dg-error \"private\" }\n+};\n+\n+struct C\n+{\n+    int next;\n+};\n+\n+struct D : A, B, C // { dg-error \"context\" }\n+{\n+    using B::next;\n+    void f()\n+    {\n+\tnext = 12;\n+    }\n+};"}, {"sha": "c94cf6ea1a5669fe72dd467e43f466c106208f68", "filename": "gcc/testsuite/g++.dg/lookup/using27.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing27.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,48 @@\n+// PR c++/26256\n+// { dg-do run }\n+\n+struct A\n+{\n+    typedef int type;\n+};\n+\n+struct B\n+{\n+    typedef double type;\n+};\n+\n+struct C : A, B\n+{\n+    using A::type;\n+    type d;\n+\n+    void f()\n+    {\n+\ttype e;\n+\tif (sizeof (type) != sizeof (A::type))\n+\t    __builtin_abort();\n+    }\n+\n+    void g();\n+};\n+\n+void C::g()\n+{\n+    type x;\n+    if (sizeof (type) != sizeof (A::type))\n+\t__builtin_abort();\n+}\n+\n+int main ()\n+{\n+    if (sizeof (C::type) != sizeof (A::type))\n+\t__builtin_abort();\n+\n+    if (sizeof (C::d) != sizeof (A::type))\n+\t__builtin_abort();\n+\n+    C::type x;\n+    C c;\n+    c.f();\n+    c.g();\n+}"}, {"sha": "ae4067a23ea011e153aa16bd9efe26d71685a312", "filename": "gcc/testsuite/g++.dg/lookup/using28.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing28.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/26256\n+// { dg-do compile }\n+\n+struct A { int f; };\n+struct B { int f; };\n+struct C : A, B { using B::f; };\n+\n+struct D : C\n+{\n+    void g() { f = 1; }\n+};"}, {"sha": "428021cf778712aabbf740f95035670f9c8e5b73", "filename": "gcc/testsuite/g++.dg/lookup/using29.C", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing29.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,81 @@\n+// { dg-do compile }\n+\n+struct A\n+{\n+  int i;\n+};\n+\n+struct B\n+{\n+  int i;\n+};\n+\n+struct C : A, B\n+{\n+  using A::i; // { dg-message \"previous\" }\n+  using B::i; // { dg-error \"redeclaration\" }\n+};\n+\n+struct E\n+{\n+  typedef int type;\n+};\n+\n+struct F\n+{\n+  typedef int type;\n+};\n+\n+struct G : E, F\n+{\n+  using E::type; // { dg-message \"previous\" }\n+  using F::type; // { dg-error \"redeclaration\" }\n+};\n+\n+struct H\n+{\n+  typedef int type;\n+};\n+\n+struct I : H\n+{\n+  typedef int type; // { dg-message \"previous\" }\n+  using H::type; // { dg-error \"conflicts\" }\n+};\n+\n+struct I2 : H\n+{\n+  using H::type; // { dg-message \"previous\" }\n+  typedef int type; // { dg-error \"conflicts\" }\n+};\n+\n+struct J\n+{\n+  struct type {};\n+};\n+\n+struct K : J\n+{\n+  struct type {}; // { dg-message \"previous\" }\n+  using J::type; // { dg-error \"conflicts\" }\n+};\n+\n+struct L : J\n+{\n+  using J::type; // { dg-message \"previous\" }\n+  struct type {}; // { dg-error \"conflicts\" }\n+};\n+\n+struct M\n+{\n+  typedef int type;\n+  struct type2 {};\n+};\n+\n+struct N : M\n+{\n+  using M::type; // { dg-message \"previous\" }\n+  using M::type; // { dg-error \"redeclaration\" }\n+  using M::type2; // { dg-message \"previous\" }\n+  using M::type2; // { dg-error \"redeclaration\" }\n+};"}, {"sha": "3fbe96c3ce8e3c4c3764f7e5023ea5974830ad6b", "filename": "gcc/testsuite/g++.dg/lookup/using30.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing30.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile }\n+\n+struct H { typedef int type; };\n+struct J : H\n+{\n+  struct type {}; // { dg-message \"previous\" }\n+  using H::type; // { dg-error \"conflicts\" }\n+};"}, {"sha": "3b1f6e90e10459c3d48ecf18039f6b9b2714708c", "filename": "gcc/testsuite/g++.dg/lookup/using31.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing31.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile }\n+\n+struct H2 { int f (); };\n+struct J2 : H2\n+{\n+  struct f {};\n+  using H2::f;\n+};"}, {"sha": "cc0e96ca6b18381ba2bb16390eb0ab3af623c745", "filename": "gcc/testsuite/g++.dg/lookup/using32.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing32.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile }\n+\n+struct T { struct type {}; };\n+struct T2 : T { using T::type; };\n+struct T3 : T2\n+{\n+  struct type {};\n+  type t;\n+};"}, {"sha": "a80be036442574f9a99f09274c664c3e983c21d7", "filename": "gcc/testsuite/g++.dg/lookup/using33.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing33.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do run }\n+\n+template <class T>\n+struct Foo\n+{\n+  int k (float) {return 0;}\n+};\n+\n+template <class T>\n+struct Baz\n+{\n+  int k (int) {return 1;}\n+};\n+\n+template <class T>\n+struct Bar : Foo<T> , Baz<T>\n+{\n+  using Foo<T>::k;\n+  using Baz<T>::k;\n+};\n+\n+int main()\n+{\n+  Bar<int> bar;\n+  return bar.k( 1.0f );\n+}"}, {"sha": "79c019d0216feedc1bc09e07f4bded1ea1830e4f", "filename": "gcc/testsuite/g++.dg/lookup/using34.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing34.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile }\n+\n+struct A { int f (); };\n+struct B : A\n+{\n+  using A::f;\n+  struct f {};\n+  void g() { f(); struct f ff; }\n+  struct f ff;\n+};"}, {"sha": "e7e82741d643b8f6206676423eada93db1f304e1", "filename": "gcc/testsuite/g++.dg/lookup/using35.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing35.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile }\n+\n+struct A { typedef int type; };\n+struct B { typedef int type; };\n+struct C : B { using B::type; };\n+\n+struct D : A, C\n+{\n+  using C::type;\n+  void f() { type t = 0;}\n+};"}, {"sha": "966c60b896147b8981203c8c2bec92989476ca4f", "filename": "gcc/testsuite/g++.dg/lookup/using36.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing36.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/25994\n+// { dg-do run }\n+\n+struct B1\n+{\n+  void f (char) {}\n+  void f (double) { __builtin_abort(); }\n+};\n+\n+struct B2\n+{\n+  void f (double) { __builtin_abort(); }\n+  void f (int) {}\n+};\n+\n+struct D : public B1, public B2\n+{\n+  using B1::f;\n+  using B2::f;\n+  void g ()\n+  {\n+    f ('a');           // should call B1::f(char)\n+    f (33);            // should call B2::f(int)\n+  }\n+};\n+\n+int main()\n+{\n+  D d;\n+  d.g();\n+}"}, {"sha": "a71206e89f763b10a394cab283a42c924719b3e4", "filename": "gcc/testsuite/g++.dg/lookup/using37.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing37.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/30195\n+// { dg-do run }\n+\n+template<class T> struct B\n+{\n+    void foo(T) {}\n+};\n+\n+template<class T>\n+struct D : B<int>, B<double>\n+{\n+  using B<int>::foo;\n+  using B<double>::foo;\n+  void bar() { foo(3); }\n+};\n+\n+int main()\n+{\n+  D<int> x;\n+  x.bar();\n+  return 0;\n+}"}, {"sha": "377fbcce1e3142e1268be72b32d66e751be82f9e", "filename": "gcc/testsuite/g++.dg/lookup/using38.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing38.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+// PR c++/6936\n+\n+struct Baser\n+{\n+    enum { j, i }; // { dg-error \"inaccessible\" }\n+};\n+\n+struct Base : Baser\n+{\n+    static void j();\n+    static void i();\n+};\n+\n+struct Derv : Base\n+{\n+  using Baser::j;\n+private:\n+  using Baser::i;\n+};\n+\n+int k = Derv::j;\n+int l = Derv::i; // { dg-error \"context\" }"}, {"sha": "56ae89a4a2251f68c32a7228324c6b0f4aa8dea0", "filename": "gcc/testsuite/g++.dg/lookup/using39.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing39.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,63 @@\n+// { dg-do run }\n+\n+template <class T>\n+struct A\n+{\n+    int f() { return 1; }\n+};\n+\n+template <class T>\n+struct B : A<T>\n+{\n+    int f() { return 2; }\n+\n+    using A<T>::f;\n+    void g()\n+    {\n+\tif (A<T>::f() != 1 )\n+\t    __builtin_abort();\n+\n+\tif( B<T>::f() != 2 )\n+\t    __builtin_abort();\n+\n+\tif( this->f() != 2 )\n+\t    __builtin_abort();\n+    }\n+};\n+\n+template <class T>\n+struct C\n+{\n+    int h( int i ) { return 1; }\n+    int h( double d ) { return 2; }\n+};\n+\n+template <class T>\n+struct D : private C<T>\n+{\n+    using C<T>::h;\n+    int h( char c ) { return 0; }\n+    int h() { return 3; }\n+};\n+\n+int main()\n+{\n+    B<int> b;\n+    b.g();\n+    b.f();\n+    b.A<int>::f();\n+    b.B<int>::f();\n+\n+    D<int> d;\n+    if( d.h( 'a' ) != 0 )\n+\t__builtin_abort();\n+\n+    if( d.h( 3 ) != 1 )\n+\t__builtin_abort();\n+\n+    if( d.h( 3.14 ) != 2 )\n+\t__builtin_abort();\n+\n+    if( d.h() != 3 )\n+\t__builtin_abort();\n+}"}, {"sha": "1bcdd0dbf5e31933fbfb4d5496f85132f4f92319", "filename": "gcc/testsuite/g++.dg/lookup/using40.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing40.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+\n+struct Base\n+{\n+    void f();\n+    typedef int type;\n+    struct Type {};\n+    int i;\n+    static int j;\n+};\n+\n+struct A : Base\n+{\n+    using Base::f; // { dg-message \"previous declaration\" }\n+    using Base::f; // { dg-error \"redeclaration\" }\n+\n+    using Base::type; // { dg-message \"previous declaration\" }\n+    using Base::type; // { dg-error \"redeclaration\" }\n+\n+    using Base::Type; // { dg-message \"previous declaration\" }\n+    using Base::Type; // { dg-error \"redeclaration\" }\n+\n+    using Base::i; // { dg-message \"previous declaration\" }\n+    using Base::i; // { dg-error \"redeclaration\" }\n+\n+    using Base::j; // { dg-message \"previous declaration\" }\n+    using Base::j; // { dg-error \"redeclaration\" }\n+};"}, {"sha": "dcc618ba56847e48e88c09bd9a9ff56b51ee1633", "filename": "gcc/testsuite/g++.dg/lookup/using41.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing41.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile }\n+\n+template <class T>\n+struct Base\n+{\n+    void f();\n+};\n+\n+template <class T>\n+struct A : Base<T>\n+{\n+    using Base<T>::f; // { dg-message \"previous declaration\" }\n+    using Base<T>::f; // { dg-error \"redeclaration\" }\n+};\n+\n+template <class T, class U>\n+struct B : Base<T>, Base<U>\n+{\n+    using Base<T>::f;\n+    using Base<U>::f;\n+};"}, {"sha": "bca65acc74fedc0d162115da97b515ba8caa84b7", "filename": "gcc/testsuite/g++.dg/lookup/using42.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing42.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/30195\n+// { dg-do run }\n+\n+template <class T>\n+struct B\n+{\n+    void foo(T) {}\n+};\n+\n+template<class T>\n+struct Out\n+{\n+    struct D : B<T>, B<double>\n+    {\n+\tusing B<T>::foo;\n+\tusing B<double>::foo;\n+\tvoid bar() { foo(3); }\n+    };\n+};\n+\n+int main()\n+{\n+    Out<int>::D x;\n+    x.bar();\n+    return 0;\n+}"}, {"sha": "d754befd0a4378a180aaaaeb632658716402fca8", "filename": "gcc/testsuite/g++.dg/lookup/using44.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing44.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/30195\n+// { dg-do run }\n+\n+template <class T>\n+struct B\n+{\n+    void foo(char) { __builtin_abort(); }\n+    void foo(short) { __builtin_abort(); }\n+    void foo(T) {}\n+};\n+\n+template<class T>\n+struct Out\n+{\n+    struct D : B<T>, B<double>\n+    {\n+\tusing B<T>::foo;\n+\tusing B<double>::foo;\n+\tvoid bar() { foo(3); }\n+    };\n+};\n+\n+int main()\n+{\n+    Out<int>::D x;\n+    x.bar();\n+    return 0;\n+}"}, {"sha": "c92b794d9c5099f009a2ba6c76cbe7c613df369d", "filename": "gcc/testsuite/g++.dg/lookup/using45.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing45.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing45.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing45.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/30195\n+// { dg-do run }\n+\n+template <class T>\n+struct A\n+{\n+    int f(int) { return 0; }\n+    int f(double) { return 1; }\n+    int f(char) { return 2; }\n+};\n+\n+template <class T>\n+struct B : A<T>\n+{\n+    using A<T>::f;\n+    int f(int) { return 3; }\n+};\n+\n+int main()\n+{\n+    B<int> b;\n+    if( b.f( 42 ) != 3 )\n+\t__builtin_abort();\n+\n+    if( b.f( 3.14 ) != 1 )\n+\t__builtin_abort();\n+\n+    if( b.f( 'a' ) != 2 )\n+\t__builtin_abort();\n+\n+    if( b.A<int>::f( 42 ) != 0 )\n+\t__builtin_abort();\n+}"}, {"sha": "f980b4a184f562673acaa55540a1c2a267f08609", "filename": "gcc/testsuite/g++.dg/parse/ctor5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fctor5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fctor5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fctor5.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -2,7 +2,7 @@\n \n struct A\n {\n-  int i; // { dg-error \"conflicts\" }\n+  int i; // { dg-message \"previous\" }\n   A() i() {}  // { dg-error \"declaration\" }\n };\n "}, {"sha": "526ced67e51822f3594e075fcc3de6ddda6fe493", "filename": "gcc/testsuite/g++.dg/template/static4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic4.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -1,6 +1,6 @@\n template <class R>\n struct A {\n-  static int _test; // { dg-error \"\" }\n+  static int _test; // { dg-message \"\" }\n   static int _test; // { dg-error \"\" }\n };\n template <class R> int A<R>::_test = 0;"}, {"sha": "270adcdc9840d0406930ba303351910416ef1465", "filename": "gcc/testsuite/g++.dg/template/typedef1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef1.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -12,7 +12,7 @@ template <typename T> struct A\n \n template <typename T> struct B\n {\n-  typedef int xxx; // { dg-error \"\" }\n+  typedef int xxx; // { dg-message \"\" }\n   typedef T xxx; // { dg-error \"\" }\n   typedef typename A<T>::type xxx; // { dg-error \"\" }\n   typedef A<int>::type xxx; // { dg-error \"\" }"}, {"sha": "5987254d432f7d43d82ebe9858a94475d2e87408", "filename": "gcc/testsuite/g++.dg/template/using2.C", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing2.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -7,24 +7,25 @@\n \n template <class T>\n struct Foo {\n-  int i; // { dg-error \"Foo\" }\n+  int i;\n };\n \n struct Baz \n {\n-  int i; // { dg-error \"Baz\" }\n+  int i;\n };\n \n template <class T>\n-struct Bar : public Foo<T>, Baz {\n-  using Foo<T>::i;\n-  using Baz::i;\n+struct Bar : public Foo<T>, Baz\n+{\n+  using Foo<T>::i; // { dg-message \"previous declaration\" }\n+  using Baz::i; // { dg-error \"redeclaration\" }\n \n-  int foo () { return i; } // { dg-error \"request for member\" }\n+  int foo () { return i; }\n };\n \n void foo (Bar<int> &bar)\n {\n-  bar.foo(); // { dg-message \"required\" }\n+  bar.foo();\n }\n "}, {"sha": "ea6ce4c74c761b52892eefa9c718d0dce207c120", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc14.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc14.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -3,11 +3,11 @@\n class X {\n public:\n     enum e {\n-\tNew // { dg-error \"conflicts with previous\" }\n+\tNew // { dg-message \"previous\" }\n \t,   // { dg-error \"comma at end\" \"\" { target c++98 } }\n     };\n \n-    static int New(int); // { dg-error \"declaration of\" }\n+    static int New(int); // { dg-error \"conflicts with a previous\" }\n };\n \n int main() {}"}, {"sha": "12ae64a36a0f6771d42a9f98ccb1a923c35756ba", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900127_02.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900127_02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900127_02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900127_02.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -23,12 +23,12 @@ int global1 ();\t\t\t// { dg-error \"\" } xref for below\n int global1;\t\t\t// { dg-error \"\" } caught\n \n struct struct_0 {\n-  int class_local ();\t\t// { dg-error \"\" } \n+  int class_local ();\t\t// { dg-message \"\" }\n   int class_local;\t\t// { dg-error \"\" } \n };\n \n struct struct_1 {\n-  int class_local;\t\t// { dg-error \"\" } \n+  int class_local;\t\t// { dg-message \"\" }\n   int class_local ();\t\t// { dg-error \"\" } \n };\n "}, {"sha": "1c225c75f784e0ccc3242e2d173750d5a737410f", "filename": "gcc/testsuite/g++.old-deja/g++.jason/scoping16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fscoping16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fscoping16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fscoping16.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble  }\n struct A {\n-  int a();\t\t\t// { dg-error \"\" } \n+  int a();\t\t\t// { dg-message \"\" }\n   int a;\t\t\t// { dg-error \"\" } \n };"}, {"sha": "6a951a97c62177c72cfb14d15a50550216411674", "filename": "gcc/testsuite/g++.old-deja/g++.other/anon7.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fanon7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fanon7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fanon7.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -2,21 +2,21 @@\n \n struct A {\n   union {\n-    int a;\t// { dg-error \"\" } conflicts with previous declaration\n+    int a;\t// { dg-message \"\" } conflicts with previous declaration\n   };\n   int a;\t// { dg-error \"\" } \n };\n \n struct B {\n-  int b;\t// { dg-error \"\" } conflicts with previous declaration\n+  int b;\t// { dg-message \"\" } conflicts with previous declaration\n   union {\n     int b;\t// { dg-error \"\" } duplicate member\n   };\n };\n \n struct C {\n   union {\n-    int c;\t// { dg-error \"\" } conflicts with previous declaration\n+    int c;\t// { dg-message \"\" } conflicts with previous declaration\n   };\n   union {\n     int c;\t// { dg-error \"\" } duplicate member"}, {"sha": "d979786587580b636ff76fe0c8da78c3162cc38d", "filename": "gcc/testsuite/g++.old-deja/g++.other/redecl1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fredecl1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fredecl1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fredecl1.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -1,6 +1,6 @@\n // { dg-do assemble  }\n struct X{\n   void i();\n-  void i(int);  // { dg-error \"\" } \n+  void i(int);  // { dg-message \"\" }\n   int i;        // { dg-error \"\" } conflict\n };"}, {"sha": "93784c08d8707279ce37e6ce8f2a99e2cc08bd48", "filename": "gcc/testsuite/g++.old-deja/g++.other/typedef7.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypedef7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypedef7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypedef7.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -8,13 +8,13 @@ typedef int I;\n // invalid.\n \n struct A {\n-  typedef int I; // { dg-error \"\" }\n+  typedef int I; // { dg-message \"\" }\n   typedef int I; // { dg-error \"\" }\n };\n \n template <class T>\n struct S {\n-  typedef int I;  // { dg-error \"\" }\n+  typedef int I;  // { dg-message \"\" }\n   typedef int I;  // { dg-error \"\" }\n };\n "}, {"sha": "48c29f79b19994fcaf7d91b74c6015388aa26408", "filename": "gcc/testsuite/g++.old-deja/g++.other/using1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fusing1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557831a91df947b447fc9fd94ecad02470a3c86a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fusing1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fusing1.C?ref=557831a91df947b447fc9fd94ecad02470a3c86a", "patch": "@@ -16,12 +16,12 @@ public:\n   using B::b;\n };\n \n-class D2 : public B { // { dg-error \"\" } conflicting access specifications\n+class D2 : public B {\n public:\n   using B::a;\n-  using B::b;\n+  using B::b; // { dg-message \"\" } conflicting declaration\n \n private:\n-  using B::b; \n+  using B::b; // { dg-error \"\" } conflicts\n };\n  "}]}