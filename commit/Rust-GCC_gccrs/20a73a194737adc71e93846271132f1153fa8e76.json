{"sha": "20a73a194737adc71e93846271132f1153fa8e76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBhNzNhMTk0NzM3YWRjNzFlOTM4NDYyNzExMzJmMTE1M2ZhOGU3Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-09-28T13:50:44Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-09-28T13:50:44Z"}, "message": "compiler: fix parsing issue with non-ASCII first package char\n    \n    Fix a bug in the parser code that decides whether a given name should\n    be considered exported or not. The function Lex::is_exported_name\n    (which assumes that its input is a mangled name) was being called on\n    non-mangled (raw utf-8) names in various places. For the bug in\n    question this caused an imported package to be registered under the\n    wrong name. To fix the issue, rename 'Lex::is_exported_name' to\n    'Lex::is_exported_mangled_name', and add a new 'Lex::is_exported_name'\n    that works on utf-8 strings.\n    \n    Fixes golang/go#27836.\n    \n    Reviewed-on: https://go-review.googlesource.com/137736\n\nFrom-SVN: r264690", "tree": {"sha": "2e728c762d8fbbc8f02354036c932abcdf83ea28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e728c762d8fbbc8f02354036c932abcdf83ea28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20a73a194737adc71e93846271132f1153fa8e76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20a73a194737adc71e93846271132f1153fa8e76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20a73a194737adc71e93846271132f1153fa8e76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20a73a194737adc71e93846271132f1153fa8e76/comments", "author": null, "committer": null, "parents": [{"sha": "dc16b00717f72aae2d93865a8007ff220b6f022f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc16b00717f72aae2d93865a8007ff220b6f022f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc16b00717f72aae2d93865a8007ff220b6f022f"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "590d2eb5b4e4ece00eab07fe4b6a59196e052215", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a73a194737adc71e93846271132f1153fa8e76/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a73a194737adc71e93846271132f1153fa8e76/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=20a73a194737adc71e93846271132f1153fa8e76", "patch": "@@ -1,4 +1,4 @@\n-944784a93cf89d3a238e5607c993ea5f18f99c12\n+f4a224ec481957ca4f14d0e8cc4fe59cc95b3a49\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "f9586ac1600d19f43d16a13955a67a991f5e8966", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a73a194737adc71e93846271132f1153fa8e76/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a73a194737adc71e93846271132f1153fa8e76/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=20a73a194737adc71e93846271132f1153fa8e76", "patch": "@@ -983,8 +983,6 @@ Import::read_name()\n   std::string ret = this->read_identifier();\n   if (ret == \"?\")\n     ret.clear();\n-  else if (!Lex::is_exported_name(ret))\n-    ret = '.' + this->package_->pkgpath() + '.' + ret;\n   return ret;\n }\n "}, {"sha": "e641b7eaf39f33a1593905fd2b34b9f572cb50e9", "filename": "gcc/go/gofrontend/lex.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a73a194737adc71e93846271132f1153fa8e76/gcc%2Fgo%2Fgofrontend%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a73a194737adc71e93846271132f1153fa8e76/gcc%2Fgo%2Fgofrontend%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.cc?ref=20a73a194737adc71e93846271132f1153fa8e76", "patch": "@@ -2764,7 +2764,7 @@ Lex::is_unicode_uppercase(unsigned int c)\n // mangled name which includes only ASCII characters.\n \n bool\n-Lex::is_exported_name(const std::string& name)\n+Lex::is_exported_mangled_name(const std::string& name)\n {\n   unsigned char c = name[0];\n   if (c != '.')\n@@ -2791,6 +2791,18 @@ Lex::is_exported_name(const std::string& name)\n     }\n }\n \n+// Return whether the identifier NAME should be exported.  NAME is a\n+// an unmangled utf-8 string and may contain non-ASCII characters.\n+\n+bool\n+Lex::is_exported_name(const std::string& name)\n+{\n+  unsigned int uchar;\n+  if (Lex::fetch_char(name.c_str(), &uchar) != 0)\n+    return Lex::is_unicode_letter(uchar) && Lex::is_unicode_uppercase(uchar);\n+  return false;\n+}\n+\n // Return whether the identifier NAME contains an invalid character.\n // This is based on how we handle invalid characters in\n // gather_identifier."}, {"sha": "cf3de8d557564e24d9a333321311b0cb0d1d3965", "filename": "gcc/go/gofrontend/lex.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a73a194737adc71e93846271132f1153fa8e76/gcc%2Fgo%2Fgofrontend%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a73a194737adc71e93846271132f1153fa8e76/gcc%2Fgo%2Fgofrontend%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.h?ref=20a73a194737adc71e93846271132f1153fa8e76", "patch": "@@ -408,6 +408,11 @@ class Lex\n   // Return whether the identifier NAME should be exported.  NAME is a\n   // mangled name which includes only ASCII characters.\n   static bool\n+  is_exported_mangled_name(const std::string& name);\n+\n+  // Return whether the identifier NAME should be exported.  NAME is\n+  // an unmangled utf-8 string and may contain non-ASCII characters.\n+  static bool\n   is_exported_name(const std::string& name);\n \n   // Return whether the identifier NAME is invalid.  When we see an"}]}