{"sha": "e8a861bd078e982b9020121454f331b1528b04b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThhODYxYmQwNzhlOTgyYjkwMjAxMjE0NTRmMzMxYjE1MjhiMDRiMQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2009-04-28T08:38:37Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2009-04-28T08:38:37Z"}, "message": "20020118-1.c: Skip on vxworks targets.\n\n2009-04-28  Nathan Froyd  <froydnj@codesourcery.com>\n\t    Mark Mitchell  <mark@codesourcery.com>\n\n\t* gcc.target/powerpc/20020118-1.c: Skip on vxworks targets.\n\t* gcc.dg/20020103-1.c: Check for __ppc.\n\t* gcc.dg/asm-b.c: Check for __ppc.\n\t* gcc.dg/20020919-1.c: Check for __ppc.\n\t* gcc.dg/20020312-2.c: Likewise.\n\t* gcc.dg/trampoline-1.c: Add appropriate NO_TRAMPOLINES #ifndefs.\n\t* gcc.dg/torture/asm-subreg-1.c: Skip on sparc vxworks targets.\n\t* gcc.dg/attr-weakref-1.c: Skip on selected vxworks targets.\n\t* g++.dg/warn/weak1.C: Likewise.\n\t* gcc.dg/tree-ssa/20030714-1.c (find_base_value): Declare as\n\tstatic so appropriate optimizations kick in.\n\t(find_base_value_wrapper): New function.\n\t* g++.dg/eh/simd-5.C: Fix target triplet.\n\t* gcc.target/arm/long-calls-1.c: Skip for -mlong-calls.\n\nCo-Authored-By: Mark Mitchell <mark@codesourcery.com>\n\nFrom-SVN: r146876", "tree": {"sha": "edb2310c4b2f4c86a2983b57d6c2a5f0528dbead", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edb2310c4b2f4c86a2983b57d6c2a5f0528dbead"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8a861bd078e982b9020121454f331b1528b04b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8a861bd078e982b9020121454f331b1528b04b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8a861bd078e982b9020121454f331b1528b04b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8a861bd078e982b9020121454f331b1528b04b1/comments", "author": null, "committer": null, "parents": [{"sha": "8644a673d32a8fef52cc34d4dd0dc8b6788f516e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8644a673d32a8fef52cc34d4dd0dc8b6788f516e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8644a673d32a8fef52cc34d4dd0dc8b6788f516e"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "9a8083b87e6df8f1a99b325c92a7699f2327bd4d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e8a861bd078e982b9020121454f331b1528b04b1", "patch": "@@ -1,3 +1,21 @@\n+2009-04-28  Nathan Froyd  <froydnj@codesourcery.com>\n+\t    Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* gcc.target/powerpc/20020118-1.c: Skip on vxworks targets.\n+\t* gcc.dg/20020103-1.c: Check for __ppc.\n+\t* gcc.dg/asm-b.c: Check for __ppc.\n+\t* gcc.dg/20020919-1.c: Check for __ppc.\n+\t* gcc.dg/20020312-2.c: Likewise.\n+\t* gcc.dg/trampoline-1.c: Add appropriate NO_TRAMPOLINES #ifndefs.\n+\t* gcc.dg/torture/asm-subreg-1.c: Skip on sparc vxworks targets.\n+\t* gcc.dg/attr-weakref-1.c: Skip on selected vxworks targets.\n+\t* g++.dg/warn/weak1.C: Likewise.\n+\t* gcc.dg/tree-ssa/20030714-1.c (find_base_value): Declare as\n+\tstatic so appropriate optimizations kick in.\n+\t(find_base_value_wrapper): New function.\n+\t* g++.dg/eh/simd-5.C: Fix target triplet.\n+\t* gcc.target/arm/long-calls-1.c: Skip for -mlong-calls.\n+\n 2009-04-28  Uros Bizjak  <ubizjak@gmail.com>\n \t    H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "71e117ead2aabb9c2d998388c13a0ac87bc7e0e1", "filename": "gcc/testsuite/g++.dg/eh/simd-5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-5.C?ref=e8a861bd078e982b9020121454f331b1528b04b1", "patch": "@@ -1,7 +1,7 @@\n // Test EH with V2SI SIMD registers actually restores correct values.\n // Origin: Joseph Myers <joseph@codesourcery.com>\n // { dg-options \"-O\" }\n-// { dg-do run { target powerpc_spe } }\n+// { dg-do run { target { powerpc_spe && { ! *-*-vxworks* } } } }\n \n extern \"C\" void abort (void);\n extern \"C\" int memcmp (const void *, const void *, __SIZE_TYPE__);"}, {"sha": "efce90a2bcf0fe0a90f4e4fd0fde47e24eee9a2a", "filename": "gcc/testsuite/g++.dg/warn/weak1.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fweak1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fweak1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fweak1.C?ref=e8a861bd078e982b9020121454f331b1528b04b1", "patch": "@@ -4,6 +4,10 @@\n // { dg-skip-if \"No unsat\" { hppa*-*-hpux* } { \"*\" } { \"\" } }\n // The darwin loader does, but they do need to exist at link time.\n // { dg-skip-if \"No link unsat\" { *-*-darwin* } { \"*\" } { \"\" } }\n+// For kernel modules and static RTPs, the loader treats undefined weak\n+// symbols in the same way as undefined strong symbols.  The test\n+// therefore fails to load, so skip it.\n+// { dg-skip-if \"\" { \"*-*-vxworks*\" && nonpic } \"*\" { \"-non-static\" } }\n \n extern void foo (void) __attribute__ ((weak));\n "}, {"sha": "4209486b8148282fb81828c0064bd78f60c5930e", "filename": "gcc/testsuite/gcc.dg/20020103-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.dg%2F20020103-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.dg%2F20020103-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020103-1.c?ref=e8a861bd078e982b9020121454f331b1528b04b1", "patch": "@@ -9,7 +9,7 @@\n #if defined(__i386__)\n #define clobber \\\n   asm volatile(\"#asm\" : : : \"si\", \"di\")\n-#elif defined(__powerpc__) || defined(__PPC__) || defined(__ppc__) || defined(__POWERPC__) || defined(PPC) || defined (_IBMR2)\n+#elif defined(__powerpc__) || defined(__PPC__) || defined(__ppc__) || defined(__POWERPC__) || defined(PPC) || defined (_IBMR2) || defined (__ppc)\n #define clobber \\\n   asm volatile(\"#asm\" : : : \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \\\n \t       \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\")"}, {"sha": "bf7d99526cc121b57325d44079c8f9f3fd6c97af", "filename": "gcc/testsuite/gcc.dg/20020312-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c?ref=e8a861bd078e982b9020121454f331b1528b04b1", "patch": "@@ -48,7 +48,7 @@ extern void abort (void);\n /* PIC register is %r27 or %r19, but is used even without -fpic.  */\n #elif defined(__pdp11__)\n /* No pic register.  */\n-#elif defined(__powerpc__) || defined(__PPC__) || defined(__POWERPC__)\n+#elif defined(__powerpc__) || defined(__PPC__) || defined(__POWERPC__) || defined (__ppc)\n # ifdef __MACH__\n #  define PIC_REG  \"31\"\n # else"}, {"sha": "dfb072109c15773b94839eb1eee565c000f3ec78", "filename": "gcc/testsuite/gcc.dg/20020919-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.dg%2F20020919-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.dg%2F20020919-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020919-1.c?ref=e8a861bd078e982b9020121454f331b1528b04b1", "patch": "@@ -38,7 +38,8 @@\n # define REG1 \"$8\"\n # define REG2 \"$9\"\n #elif defined (__powerpc__) || defined (__PPC__) || defined (__ppc__) \\\n-\t|| defined (__POWERPC__) || defined (PPC) || defined (_IBMR2)\n+\t|| defined (__POWERPC__) || defined (PPC) || defined (_IBMR2) \\\n+\t|| defined (__ppc)\n # define REG1 \"6\"\n # define REG2 \"7\"\n # if !defined(__powerpc64__) && !defined(__LP64__)"}, {"sha": "f888839abf7dbaad56c6d9d14bbabaca0cda71bf", "filename": "gcc/testsuite/gcc.dg/asm-b.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-b.c?ref=e8a861bd078e982b9020121454f331b1528b04b1", "patch": "@@ -21,7 +21,7 @@ bar (void)\n   foo (&x);\n   const unsigned int y = x;\n   z = &x;\n-#if defined (__powerpc__) || defined (__PPC__) || defined (__ppc__) || defined (_POWER) || defined (__ppc64__)\n+#if defined (__powerpc__) || defined (__PPC__) || defined (__ppc__) || defined (_POWER) || defined (__ppc64__) || defined (__ppc)\n   __asm __volatile (\"sthbrx %1,0,%2\" : \"=m\" (*z) : \"r\" (y), \"r\" (z));\n #elif defined __i386__ || defined __x86_64__\n   __asm __volatile (\"movb %b1,1(%2)\\n\\tmovb %h1,(%2)\""}, {"sha": "898bc4169a038f8097f323c8093a259e2256028d", "filename": "gcc/testsuite/gcc.dg/attr-weakref-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-1.c?ref=e8a861bd078e982b9020121454f331b1528b04b1", "patch": "@@ -5,6 +5,10 @@\n // is not available on hppa*-*-hpux*.  The test is skipped rather than\n // xfailed to suppress the warning that would otherwise arise.\n // { dg-skip-if \"\" { \"*-*-darwin*\" \"hppa*-*-hpux*\" } \"*\" { \"\" } }\n+// For kernel modules and static RTPs, the loader treats undefined weak\n+// symbols in the same way as undefined strong symbols.  The test\n+// therefore fails to load, so skip it.\n+// { dg-skip-if \"\" { \"*-*-vxworks*\" && nonpic } \"*\" { \"-non-static\" } }\n // { dg-options \"-O2\" }\n // { dg-additional-sources \"attr-weakref-1a.c\" }\n "}, {"sha": "d3a14b24cdc49e6c6a22762c82746bb360a91dea", "filename": "gcc/testsuite/gcc.dg/torture/asm-subreg-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fasm-subreg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fasm-subreg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fasm-subreg-1.c?ref=e8a861bd078e982b9020121454f331b1528b04b1", "patch": "@@ -1,7 +1,7 @@\n /* PR middle-end/20491 */\n \n /* { dg-do compile } */\n-/* { dg-skip-if \"\" { hppa*64*-*-* } \"*\" \"\" } */\n+/* { dg-skip-if \"\" { hppa*64*-*-* || sparc-*-vxworks* } \"*\" \"\" } */\n \n /* Combine used to introduce invalid subregs for the asm input, and\n    we'd crash later on, when removing all subregs.  */"}, {"sha": "37a582c5703daa703dc92694f1485e5f550577c5", "filename": "gcc/testsuite/gcc.dg/trampoline-1.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftrampoline-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftrampoline-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftrampoline-1.c?ref=e8a861bd078e982b9020121454f331b1528b04b1", "patch": "@@ -5,6 +5,8 @@\n /* { dg-require-effective-target trampolines } */\n /* { dg-options \"-O2\" } */\n \n+#ifndef NO_TRAMPOLINES\n+\n /* This used to fail on various versions of Solaris 2 because the\n    trampoline couldn't be made executable.  */\n \n@@ -44,9 +46,12 @@ void foo (void)\n       abort();\n   }\n }\n+#endif\n \n int main (void)\n {\n+#ifndef NO_TRAMPOLINES\n   foo ();\n+#endif\n   return 0;\n }"}, {"sha": "0225d58a48c335f1c8fb62ccb55627110bc15139", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030714-1.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030714-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030714-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030714-1.c?ref=e8a861bd078e982b9020121454f331b1528b04b1", "patch": "@@ -15,7 +15,7 @@ struct rtx_def\n   unsigned frame_related:1;\n };\n \n-rtx\n+static rtx\n find_base_value (src)\n      rtx src;\n {\n@@ -33,6 +33,12 @@ find_base_value (src)\n     find_base_value (src_1);\n }\n \n+rtx\n+find_base_value_wrapper (src)\n+     rtx src;\n+{\n+  return find_base_value (src);\n+}\n \n /* There should be no casts to short unsigned int.  */\n /* { dg-final { scan-tree-dump-times \"\\\\(short unsigned int\\\\)\" 0 \"dom2\"} } */"}, {"sha": "f10f10606a6cfceedde69ade83c9174f5e9fdcd7", "filename": "gcc/testsuite/gcc.target/arm/long-calls-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-1.c?ref=e8a861bd078e982b9020121454f331b1528b04b1", "patch": "@@ -1,6 +1,8 @@\n /* Check that long calls to different sections are not optimized to \"bl\".  */\n /* { dg-do compile { target { arm32 && nonpic } } } */\n /* { dg-options \"-O2\" } */\n+/* This test expects that short calls are the default.  */\n+/* { dg-skip-if \"-mlong-calls in use\" { \"*-*-*\" } { \"-mlong-calls\" } { \"\" } } */\n \n #define section(S) __attribute__((section(S)))\n #define weak __attribute__((weak))"}, {"sha": "49197b49032b589f8825d482078f6661e42e6d58", "filename": "gcc/testsuite/gcc.target/powerpc/20020118-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F20020118-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a861bd078e982b9020121454f331b1528b04b1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F20020118-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F20020118-1.c?ref=e8a861bd078e982b9020121454f331b1528b04b1", "patch": "@@ -1,4 +1,6 @@\n /* { dg-do run { target powerpc*-*-* } }*/\n+/* VxWorks only guarantees 64 bits of alignment (STACK_BOUNDARY == 64).  */\n+/* { dg-skip-if \"\" { \"powerpc*-*-vxworks*\" } { \"*\" } { \"\" } } */\n \n /* Test local alignment.  Test new target macro STARTING_FRAME_PHASE.  */\n /* Origin: Aldy Hernandez <aldyh@redhat.com>.  */"}]}