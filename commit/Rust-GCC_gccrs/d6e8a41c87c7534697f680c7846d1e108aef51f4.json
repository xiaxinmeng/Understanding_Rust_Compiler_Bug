{"sha": "d6e8a41c87c7534697f680c7846d1e108aef51f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZlOGE0MWM4N2M3NTM0Njk3ZjY4MGM3ODQ2ZDFlMTA4YWVmNTFmNA==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2016-11-09T01:44:04Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2016-11-09T01:44:04Z"}, "message": "Handle unary pass-through jump functions for ipa-vrp\n\nHandle unary pass-through jump functions for ipa-vrp\ngcc/testsuite/ChangeLog:\n\n2016-11-09  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* gcc.dg/ipa/vrp7.c: New test.\n\n\ngcc/ChangeLog:\n\n2016-11-09  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* ipa-cp.c (ipa_get_jf_pass_through_result): Handle unary expressions.\n\t(propagate_vr_accross_jump_function): Likewise.\n\t* ipa-prop.c (ipa_set_jf_unary_pass_through): New.\n\t(load_from_param_1): New.\n\t(load_from_unmodified_param): Factor common part into load_from_param_1.\n\t(load_from_param): New.\n\t(compute_complex_assign_jump_func): Handle unary expressions.\n\t(ipa_write_jump_function): Likewise.\n\t(ipa_read_jump_function): Likewise.\n\nFrom-SVN: r241990", "tree": {"sha": "a131a04f5e68fdf49a16e1b979d04e2037ff67e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a131a04f5e68fdf49a16e1b979d04e2037ff67e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6e8a41c87c7534697f680c7846d1e108aef51f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e8a41c87c7534697f680c7846d1e108aef51f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6e8a41c87c7534697f680c7846d1e108aef51f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e8a41c87c7534697f680c7846d1e108aef51f4/comments", "author": null, "committer": null, "parents": [{"sha": "5d5f1e95b1f4defc34597417167b1b2bc716b592", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5f1e95b1f4defc34597417167b1b2bc716b592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d5f1e95b1f4defc34597417167b1b2bc716b592"}], "stats": {"total": 174, "additions": 156, "deletions": 18}, "files": [{"sha": "a76e3e82b54b7f912c719330cddd247fb029e892", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e8a41c87c7534697f680c7846d1e108aef51f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e8a41c87c7534697f680c7846d1e108aef51f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6e8a41c87c7534697f680c7846d1e108aef51f4", "patch": "@@ -1,3 +1,15 @@\n+2016-11-09  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* ipa-cp.c (ipa_get_jf_pass_through_result): Handle unary expressions.\n+\t(propagate_vr_accross_jump_function): Likewise.\n+\t* ipa-prop.c (ipa_set_jf_unary_pass_through): New.\n+\t(load_from_param_1): New.\n+\t(load_from_unmodified_param): Factor common part into load_from_param_1.\n+\t(load_from_param): New.\n+\t(compute_complex_assign_jump_func): Handle unary expressions.\n+\t(ipa_write_jump_function): Likewise.\n+\t(ipa_read_jump_function): Likewise.\n+\n 2016-11-09  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR ipa/78121"}, {"sha": "0f34682753e38d4b8e14613fc387caf14a480b92", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e8a41c87c7534697f680c7846d1e108aef51f4/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e8a41c87c7534697f680c7846d1e108aef51f4/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=d6e8a41c87c7534697f680c7846d1e108aef51f4", "patch": "@@ -1219,13 +1219,19 @@ ipa_get_jf_pass_through_result (struct ipa_jump_func *jfunc, tree input)\n     return NULL_TREE;\n \n   if (TREE_CODE_CLASS (ipa_get_jf_pass_through_operation (jfunc))\n-      == tcc_comparison)\n-    restype = boolean_type_node;\n+      == tcc_unary)\n+    res = fold_unary (ipa_get_jf_pass_through_operation (jfunc),\n+\t\t      TREE_TYPE (input), input);\n   else\n-    restype = TREE_TYPE (input);\n-  res = fold_binary (ipa_get_jf_pass_through_operation (jfunc), restype,\n-\t\t     input, ipa_get_jf_pass_through_operand (jfunc));\n-\n+    {\n+      if (TREE_CODE_CLASS (ipa_get_jf_pass_through_operation (jfunc))\n+\t  == tcc_comparison)\n+\trestype = boolean_type_node;\n+      else\n+\trestype = TREE_TYPE (input);\n+      res = fold_binary (ipa_get_jf_pass_through_operation (jfunc), restype,\n+\t\t\t input, ipa_get_jf_pass_through_operand (jfunc));\n+    }\n   if (res && !is_gimple_ip_invariant (res))\n     return NULL_TREE;\n \n@@ -1864,6 +1870,25 @@ propagate_vr_accross_jump_function (cgraph_edge *cs,\n \n       if (ipa_get_jf_pass_through_operation (jfunc) == NOP_EXPR)\n \treturn dest_lat->meet_with (src_lats->m_value_range);\n+      else if (param_type\n+\t       && (TREE_CODE_CLASS (ipa_get_jf_pass_through_operation (jfunc))\n+\t\t   == tcc_unary))\n+\t{\n+\t  value_range vr;\n+\t  memset (&vr, 0, sizeof (vr));\n+\t  tree operand_type = ipa_get_type (caller_info, src_idx);\n+\t  enum tree_code operation = ipa_get_jf_pass_through_operation (jfunc);\n+\n+\t  if (src_lats->m_value_range.bottom_p ())\n+\t    return false;\n+\n+\t  extract_range_from_unary_expr (&vr,\n+\t\t\t\t\t operation,\n+\t\t\t\t\t param_type,\n+\t\t\t\t\t &src_lats->m_value_range.m_vr,\n+\t\t\t\t\t operand_type);\n+\t  return dest_lat->meet_with (&vr);\n+\t}\n     }\n   else if (jfunc->type == IPA_JF_CONST)\n     {"}, {"sha": "8312c5a9f6baf2bd166c5967db43df081dc4ecf1", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 77, "deletions": 12, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e8a41c87c7534697f680c7846d1e108aef51f4/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e8a41c87c7534697f680c7846d1e108aef51f4/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=d6e8a41c87c7534697f680c7846d1e108aef51f4", "patch": "@@ -446,6 +446,18 @@ ipa_set_jf_simple_pass_through (struct ipa_jump_func *jfunc, int formal_id,\n   jfunc->value.pass_through.agg_preserved = agg_preserved;\n }\n \n+/* Set JFUNC to be an unary pass through jump function.  */\n+\n+static void\n+ipa_set_jf_unary_pass_through (struct ipa_jump_func *jfunc, int formal_id,\n+\t\t\t       enum tree_code operation)\n+{\n+  jfunc->type = IPA_JF_PASS_THROUGH;\n+  jfunc->value.pass_through.operand = NULL_TREE;\n+  jfunc->value.pass_through.formal_id = formal_id;\n+  jfunc->value.pass_through.operation = operation;\n+  jfunc->value.pass_through.agg_preserved = false;\n+}\n /* Set JFUNC to be an arithmetic pass through jump function.  */\n \n static void\n@@ -849,21 +861,19 @@ parm_preserved_before_stmt_p (struct ipa_func_body_info *fbi, int index,\n   return !modified;\n }\n \n-/* If STMT is an assignment that loads a value from an parameter declaration,\n-   return the index of the parameter in ipa_node_params which has not been\n-   modified.  Otherwise return -1.  */\n+/* Main worker for load_from_unmodified_param and load_from_param.\n+   If STMT is an assignment that loads a value from an parameter declaration,\n+   return the index of the parameter in ipa_node_params.  Otherwise return -1.  */\n \n static int\n-load_from_unmodified_param (struct ipa_func_body_info *fbi,\n-\t\t\t    vec<ipa_param_descriptor> descriptors,\n-\t\t\t    gimple *stmt)\n+load_from_param_1 (struct ipa_func_body_info *fbi,\n+\t\t   vec<ipa_param_descriptor> descriptors,\n+\t\t   gimple *stmt)\n {\n   int index;\n   tree op1;\n \n-  if (!gimple_assign_single_p (stmt))\n-    return -1;\n-\n+  gcc_checking_assert (is_gimple_assign (stmt));\n   op1 = gimple_assign_rhs1 (stmt);\n   if (TREE_CODE (op1) != PARM_DECL)\n     return -1;\n@@ -876,6 +886,40 @@ load_from_unmodified_param (struct ipa_func_body_info *fbi,\n   return index;\n }\n \n+/* If STMT is an assignment that loads a value from an parameter declaration,\n+   return the index of the parameter in ipa_node_params which has not been\n+   modified.  Otherwise return -1.  */\n+\n+static int\n+load_from_unmodified_param (struct ipa_func_body_info *fbi,\n+\t\t\t    vec<ipa_param_descriptor> descriptors,\n+\t\t\t    gimple *stmt)\n+{\n+  if (!gimple_assign_single_p (stmt))\n+    return -1;\n+\n+  return load_from_param_1 (fbi, descriptors, stmt);\n+}\n+\n+/* If STMT is an assignment that loads a value from an parameter declaration,\n+   return the index of the parameter in ipa_node_params.  Otherwise return -1.  */\n+\n+static int\n+load_from_param (struct ipa_func_body_info *fbi,\n+\t\t vec<ipa_param_descriptor> descriptors,\n+\t\t gimple *stmt)\n+{\n+  if (!is_gimple_assign (stmt))\n+    return -1;\n+\n+  enum tree_code rhs_code = gimple_assign_rhs_code (stmt);\n+  if ((get_gimple_rhs_class (rhs_code) != GIMPLE_SINGLE_RHS)\n+      && (get_gimple_rhs_class (rhs_code) != GIMPLE_UNARY_RHS))\n+    return -1;\n+\n+  return load_from_param_1 (fbi, descriptors, stmt);\n+}\n+\n /* Return true if memory reference REF (which must be a load through parameter\n    with INDEX) loads data that are known to be unmodified in this function\n    before reaching statement STMT.  */\n@@ -1109,6 +1153,7 @@ compute_complex_assign_jump_func (struct ipa_func_body_info *fbi,\n   tree op1, tc_ssa, base, ssa;\n   bool reverse;\n   int index;\n+  gimple *stmt2 = stmt;\n \n   op1 = gimple_assign_rhs1 (stmt);\n \n@@ -1117,13 +1162,16 @@ compute_complex_assign_jump_func (struct ipa_func_body_info *fbi,\n       if (SSA_NAME_IS_DEFAULT_DEF (op1))\n \tindex = ipa_get_param_decl_index (info, SSA_NAME_VAR (op1));\n       else\n-\tindex = load_from_unmodified_param (fbi, info->descriptors,\n-\t\t\t\t\t    SSA_NAME_DEF_STMT (op1));\n+\t{\n+\t  index = load_from_param (fbi, info->descriptors,\n+\t\t\t\t   SSA_NAME_DEF_STMT (op1));\n+\t  stmt2 = SSA_NAME_DEF_STMT (op1);\n+\t}\n       tc_ssa = op1;\n     }\n   else\n     {\n-      index = load_from_unmodified_param (fbi, info->descriptors, stmt);\n+      index = load_from_param (fbi, info->descriptors, stmt);\n       tc_ssa = gimple_assign_lhs (stmt);\n     }\n \n@@ -1147,6 +1195,13 @@ compute_complex_assign_jump_func (struct ipa_func_body_info *fbi,\n \t  bool agg_p = parm_ref_data_pass_through_p (fbi, index, call, tc_ssa);\n \t  ipa_set_jf_simple_pass_through (jfunc, index, agg_p);\n \t}\n+      else if (is_gimple_assign (stmt2)\n+\t       && (gimple_expr_code (stmt2) != NOP_EXPR)\n+\t       && (TREE_CODE_CLASS (gimple_expr_code (stmt2)) == tcc_unary))\n+\t{\n+\t  ipa_set_jf_unary_pass_through (jfunc, index,\n+\t\t\t\t\t gimple_assign_rhs_code (stmt2));\n+\t}\n       return;\n     }\n \n@@ -4666,6 +4721,11 @@ ipa_write_jump_function (struct output_block *ob,\n \t  bp_pack_value (&bp, jump_func->value.pass_through.agg_preserved, 1);\n \t  streamer_write_bitpack (&bp);\n \t}\n+      else if (TREE_CODE_CLASS (jump_func->value.pass_through.operation)\n+\t       == tcc_unary)\n+\t{\n+\t  streamer_write_uhwi (ob, jump_func->value.pass_through.formal_id);\n+\t}\n       else\n \t{\n \t  stream_write_tree (ob, jump_func->value.pass_through.operand, true);\n@@ -4745,6 +4805,11 @@ ipa_read_jump_function (struct lto_input_block *ib,\n \t  bool agg_preserved = bp_unpack_value (&bp, 1);\n \t  ipa_set_jf_simple_pass_through (jump_func, formal_id, agg_preserved);\n \t}\n+      else if (TREE_CODE_CLASS (operation) == tcc_unary)\n+\t{\n+\t  int formal_id =  streamer_read_uhwi (ib);\n+\t  ipa_set_jf_unary_pass_through (jump_func, formal_id, operation);\n+\t}\n       else\n \t{\n \t  tree operand = stream_read_tree (ib, data_in);"}, {"sha": "e822e6fc24b6c4a87533663ea9871ac26ae9c86a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e8a41c87c7534697f680c7846d1e108aef51f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e8a41c87c7534697f680c7846d1e108aef51f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d6e8a41c87c7534697f680c7846d1e108aef51f4", "patch": "@@ -1,3 +1,7 @@\n+2016-11-09  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* gcc.dg/ipa/vrp7.c: New test.\n+\n 2016-11-09  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR ipa/78121"}, {"sha": "e4e0bc66a645420d3815db349fa0329da5aa5580", "filename": "gcc/testsuite/gcc.dg/ipa/vrp7.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e8a41c87c7534697f680c7846d1e108aef51f4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fvrp7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e8a41c87c7534697f680c7846d1e108aef51f4/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fvrp7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fvrp7.c?ref=d6e8a41c87c7534697f680c7846d1e108aef51f4", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-cp-details\" } */\n+\n+volatile int cond;\n+int abs (int);\n+\n+static __attribute__((noinline, noclone))\n+int foo (int i)\n+{\n+  if (i < 5)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+static __attribute__((noinline, noclone))\n+int bar (int j)\n+{\n+  foo (~j);\n+  foo (abs (j));\n+  foo (j);\n+  return 0;\n+}\n+\n+int main ()\n+{\n+  for (unsigned int i = 0; i < 10; ++i)\n+    bar (i);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump-times \"Setting value range of param 0 \\\\\\[-10, 9\\\\\\]\" 1 \"cp\" } } */"}]}