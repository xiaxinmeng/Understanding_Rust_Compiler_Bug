{"sha": "967ca9b932e2f1b137c4e8b414146b06e1cad45c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY3Y2E5YjkzMmUyZjFiMTM3YzRlOGI0MTQxNDZiMDZlMWNhZDQ1Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-04-14T19:21:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-04-14T19:21:31Z"}, "message": "re PR c++/70594 (-fcompare-debug failure)\n\n\tPR c++/70594\n\t* ipa-utils.h (polymorphic_ctor_dtor_p): New prototype.\n\t* ipa-polymorphic-call.c (polymorphic_ctor_dtor_p): New function.\n\t(inlined_polymorphic_ctor_dtor_block_p): Use it.\n\t* tree-ssa-live.c (remove_unused_scope_block_p): When\n\tin_ctor_dtor_block, avoid discarding not just BLOCKs with\n\tBLOCK_ABSTRACT_ORIGIN being FUNCTION_DECL, but even when\n\tblock_ultimate_origin is FUNCTION_DECL.\n\t(remove_unused_locals): If current_function_decl is\n\tpolymorphic_ctor_dtor_p, pass initial true to\n\tremove_unused_scope_block_p' is_ctor_dtor_block.\n\nFrom-SVN: r234987", "tree": {"sha": "689f794a5cd438e124194ffde1382c3f023c5bf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/689f794a5cd438e124194ffde1382c3f023c5bf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/967ca9b932e2f1b137c4e8b414146b06e1cad45c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967ca9b932e2f1b137c4e8b414146b06e1cad45c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/967ca9b932e2f1b137c4e8b414146b06e1cad45c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967ca9b932e2f1b137c4e8b414146b06e1cad45c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8747845fded660e09bab98470f77753a4216b6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8747845fded660e09bab98470f77753a4216b6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8747845fded660e09bab98470f77753a4216b6e"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "8f5f3207232b425bbd8ed12c3583aefc68cc6c1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967ca9b932e2f1b137c4e8b414146b06e1cad45c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967ca9b932e2f1b137c4e8b414146b06e1cad45c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=967ca9b932e2f1b137c4e8b414146b06e1cad45c", "patch": "@@ -1,3 +1,17 @@\n+2016-04-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/70594\n+\t* ipa-utils.h (polymorphic_ctor_dtor_p): New prototype.\n+\t* ipa-polymorphic-call.c (polymorphic_ctor_dtor_p): New function.\n+\t(inlined_polymorphic_ctor_dtor_block_p): Use it.\n+\t* tree-ssa-live.c (remove_unused_scope_block_p): When\n+\tin_ctor_dtor_block, avoid discarding not just BLOCKs with\n+\tBLOCK_ABSTRACT_ORIGIN being FUNCTION_DECL, but even when\n+\tblock_ultimate_origin is FUNCTION_DECL.\n+\t(remove_unused_locals): If current_function_decl is\n+\tpolymorphic_ctor_dtor_p, pass initial true to\n+\tremove_unused_scope_block_p' is_ctor_dtor_block.\n+\n 2016-04-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/69517"}, {"sha": "56f334471de498f7f0407eb3b27cb03f9e2b1ad5", "filename": "gcc/ipa-polymorphic-call.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967ca9b932e2f1b137c4e8b414146b06e1cad45c/gcc%2Fipa-polymorphic-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967ca9b932e2f1b137c4e8b414146b06e1cad45c/gcc%2Fipa-polymorphic-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-polymorphic-call.c?ref=967ca9b932e2f1b137c4e8b414146b06e1cad45c", "patch": "@@ -479,16 +479,12 @@ contains_type_p (tree outer_type, HOST_WIDE_INT offset,\n }\n \n \n-/* Return a FUNCTION_DECL if BLOCK represents a constructor or destructor.\n+/* Return a FUNCTION_DECL if FN represent a constructor or destructor.\n    If CHECK_CLONES is true, also check for clones of ctor/dtors.  */\n \n tree\n-inlined_polymorphic_ctor_dtor_block_p (tree block, bool check_clones)\n+polymorphic_ctor_dtor_p (tree fn, bool check_clones)\n {\n-  tree fn = block_ultimate_origin (block);\n-  if (fn == NULL || TREE_CODE (fn) != FUNCTION_DECL)\n-    return NULL_TREE;\n-\n   if (TREE_CODE (TREE_TYPE (fn)) != METHOD_TYPE\n       || (!DECL_CXX_CONSTRUCTOR_P (fn) && !DECL_CXX_DESTRUCTOR_P (fn)))\n     {\n@@ -510,6 +506,19 @@ inlined_polymorphic_ctor_dtor_block_p (tree block, bool check_clones)\n   return fn;\n }\n \n+/* Return a FUNCTION_DECL if BLOCK represents a constructor or destructor.\n+   If CHECK_CLONES is true, also check for clones of ctor/dtors.  */\n+\n+tree\n+inlined_polymorphic_ctor_dtor_block_p (tree block, bool check_clones)\n+{\n+  tree fn = block_ultimate_origin (block);\n+  if (fn == NULL || TREE_CODE (fn) != FUNCTION_DECL)\n+    return NULL_TREE;\n+\n+  return polymorphic_ctor_dtor_p (fn, check_clones);\n+}\n+\n \n /* We know that the instance is stored in variable or parameter\n    (not dynamically allocated) and we want to disprove the fact"}, {"sha": "58d2de7e3c57b38d7dbb42140580698fe3db795e", "filename": "gcc/ipa-utils.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967ca9b932e2f1b137c4e8b414146b06e1cad45c/gcc%2Fipa-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967ca9b932e2f1b137c4e8b414146b06e1cad45c/gcc%2Fipa-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.h?ref=967ca9b932e2f1b137c4e8b414146b06e1cad45c", "patch": "@@ -70,6 +70,7 @@ void dump_possible_polymorphic_call_targets (FILE *, tree, HOST_WIDE_INT,\n bool possible_polymorphic_call_target_p (tree, HOST_WIDE_INT,\n \t\t\t\t         const ipa_polymorphic_call_context &,\n \t\t\t\t\t struct cgraph_node *);\n+tree polymorphic_ctor_dtor_p (tree, bool);\n tree inlined_polymorphic_ctor_dtor_block_p (tree, bool);\n bool decl_maybe_in_construction_p (tree, tree, gimple *, tree);\n tree vtable_pointer_value_to_binfo (const_tree);"}, {"sha": "15fc43f812604277f3648d4641eb5f4291ad045d", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967ca9b932e2f1b137c4e8b414146b06e1cad45c/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967ca9b932e2f1b137c4e8b414146b06e1cad45c/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=967ca9b932e2f1b137c4e8b414146b06e1cad45c", "patch": "@@ -393,14 +393,16 @@ remove_unused_scope_block_p (tree scope, bool in_ctor_dtor_block)\n       in_ctor_dtor_block = true;\n       unused = false;\n     }\n-  /* 2) inside such blocks, the outermost block with BLOCK_ABSTRACT_ORIGIN\n+  /* 2) inside such blocks, the outermost block with block_ultimate_origin\n      being a FUNCTION_DECL.  */\n-  else if (in_ctor_dtor_block\n-\t   && BLOCK_ABSTRACT_ORIGIN (scope)\n-\t   && TREE_CODE (BLOCK_ABSTRACT_ORIGIN (scope)) == FUNCTION_DECL)\n+  else if (in_ctor_dtor_block)\n     {\n-      in_ctor_dtor_block = false;\n-      unused = false;\n+      tree fn = block_ultimate_origin (scope);\n+      if (fn && TREE_CODE (fn) == FUNCTION_DECL)\n+\t{\n+\t  in_ctor_dtor_block = false;\n+\t  unused = false;\n+\t}\n     }\n \n   for (t = &BLOCK_VARS (scope); *t; t = next)\n@@ -855,7 +857,9 @@ remove_unused_locals (void)\n       cfun->local_decls->truncate (dstidx);\n     }\n \n-  remove_unused_scope_block_p (DECL_INITIAL (current_function_decl), false);\n+  remove_unused_scope_block_p (DECL_INITIAL (current_function_decl),\n+\t\t\t       polymorphic_ctor_dtor_p (current_function_decl,\n+\t\t\t\t\t\t\ttrue) != NULL_TREE);\n   clear_unused_block_pointer ();\n \n   BITMAP_FREE (usedvars);"}]}