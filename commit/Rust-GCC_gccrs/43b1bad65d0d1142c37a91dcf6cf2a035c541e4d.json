{"sha": "43b1bad65d0d1142c37a91dcf6cf2a035c541e4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNiMWJhZDY1ZDBkMTE0MmMzN2E5MWRjZjZjZjJhMDM1YzU0MWU0ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2012-10-22T13:26:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-10-22T13:26:48Z"}, "message": "re PR tree-optimization/55011 (GCC in an infinite loop at -O2 in VRP)\n\n2012-10-22  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/55011\n\t* tree-vrp.c (update_value_range): For invalid lattice transitions\n\tdrop to VARYING.\n\n\t* gcc.dg/torture/pr55011.c: New testcase.\n\nFrom-SVN: r192689", "tree": {"sha": "514c75894fabfe05bd894b9b7d6abef68f48e6ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/514c75894fabfe05bd894b9b7d6abef68f48e6ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43b1bad65d0d1142c37a91dcf6cf2a035c541e4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b1bad65d0d1142c37a91dcf6cf2a035c541e4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43b1bad65d0d1142c37a91dcf6cf2a035c541e4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b1bad65d0d1142c37a91dcf6cf2a035c541e4d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e81bf2ce3b34a1fa0b83df792f5e8661dd1a61ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e81bf2ce3b34a1fa0b83df792f5e8661dd1a61ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e81bf2ce3b34a1fa0b83df792f5e8661dd1a61ca"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "4de896b358ad69e473412b46c67ed9a0f0dccc34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b1bad65d0d1142c37a91dcf6cf2a035c541e4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b1bad65d0d1142c37a91dcf6cf2a035c541e4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43b1bad65d0d1142c37a91dcf6cf2a035c541e4d", "patch": "@@ -1,3 +1,9 @@\n+2012-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/55011\n+\t* tree-vrp.c (update_value_range): For invalid lattice transitions\n+\tdrop to VARYING.\n+\n 2012-10-22  Julian Brown  <julian@codesourcery.com>\n \n \t* config/arm/arm.h (CANNOT_CHANGE_MODE_CLASS): Avoid subreg'ing"}, {"sha": "c994df96272bcbae4b1253f3de8da1bbc58b2f80", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b1bad65d0d1142c37a91dcf6cf2a035c541e4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b1bad65d0d1142c37a91dcf6cf2a035c541e4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43b1bad65d0d1142c37a91dcf6cf2a035c541e4d", "patch": "@@ -1,3 +1,8 @@\n+2012-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/55011\n+\t* gcc.dg/torture/pr55011.c: New testcase.\n+\n 2012-10-22  Greta Yorsh  <Greta.Yorsh@arm.com>\n \n \t* gcc.target/arm/pr40457-1.c: Adjust expected output."}, {"sha": "67b2613f6ece7c1ce0285164872f9421836f08b4", "filename": "gcc/testsuite/gcc.dg/torture/pr55011.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b1bad65d0d1142c37a91dcf6cf2a035c541e4d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55011.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b1bad65d0d1142c37a91dcf6cf2a035c541e4d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55011.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55011.c?ref=43b1bad65d0d1142c37a91dcf6cf2a035c541e4d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+\n+char a;\n+\n+void f(void)\n+{\n+  char b = 2;\n+\n+  for(;;)\n+    {\n+      unsigned short s = 1, *p = &s, *i;\n+\n+      for(*i = 0; *i < 4; ++*i)\n+\tif(a | (*p /= (b += !!a)) <= 63739)\n+\t  return;\n+\n+      if(!s)\n+\ta = 0;\n+\n+      for(;;);\n+    }\n+}"}, {"sha": "379914cfad673246a654b232432e0cc00b811590", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b1bad65d0d1142c37a91dcf6cf2a035c541e4d/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b1bad65d0d1142c37a91dcf6cf2a035c541e4d/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=43b1bad65d0d1142c37a91dcf6cf2a035c541e4d", "patch": "@@ -819,8 +819,19 @@ update_value_range (const_tree var, value_range_t *new_vr)\n \t   || !vrp_bitmap_equal_p (old_vr->equiv, new_vr->equiv);\n \n   if (is_new)\n-    set_value_range (old_vr, new_vr->type, new_vr->min, new_vr->max,\n-\t             new_vr->equiv);\n+    {\n+      /* Do not allow transitions up the lattice.  The following\n+         is slightly more awkward than just new_vr->type < old_vr->type\n+\t because VR_RANGE and VR_ANTI_RANGE need to be considered\n+\t the same.  We may not have is_new when transitioning to\n+\t UNDEFINED or from VARYING.  */\n+      if (new_vr->type == VR_UNDEFINED\n+\t  || old_vr->type == VR_VARYING)\n+\tset_value_range_to_varying (old_vr);\n+      else\n+\tset_value_range (old_vr, new_vr->type, new_vr->min, new_vr->max,\n+\t\t\t new_vr->equiv);\n+    }\n \n   BITMAP_FREE (new_vr->equiv);\n "}]}