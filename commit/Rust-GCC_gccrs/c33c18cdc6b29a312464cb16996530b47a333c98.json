{"sha": "c33c18cdc6b29a312464cb16996530b47a333c98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMzYzE4Y2RjNmIyOWEzMTI0NjRjYjE2OTk2NTMwYjQ3YTMzM2M5OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-09-15T17:05:14Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-09-15T17:05:14Z"}, "message": "libgo: test linking split-stack and non-split-stack together\n    \n    PPC has split-stack support in current GCC, but old version of gold will\n    reject attempts to link PPC split-stack and non-split-stack code\n    together.  Test for that, and don't compile the C code with\n    -fsplit-stack if it doesn't work.\n    \n    Reviewed-on: https://go-review.googlesource.com/14594\n\nFrom-SVN: r227802", "tree": {"sha": "48f95ab84097839a2967b885b72d89e96a35bcf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48f95ab84097839a2967b885b72d89e96a35bcf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c33c18cdc6b29a312464cb16996530b47a333c98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c33c18cdc6b29a312464cb16996530b47a333c98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c33c18cdc6b29a312464cb16996530b47a333c98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c33c18cdc6b29a312464cb16996530b47a333c98/comments", "author": null, "committer": null, "parents": [{"sha": "10e0393ceb569239f7ea1bfb2f3116df4effe747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e0393ceb569239f7ea1bfb2f3116df4effe747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10e0393ceb569239f7ea1bfb2f3116df4effe747"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "b1a7895a20ae233919ae0e149aedd11ebb2b9f1d", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33c18cdc6b29a312464cb16996530b47a333c98/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33c18cdc6b29a312464cb16996530b47a333c98/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=c33c18cdc6b29a312464cb16996530b47a333c98", "patch": "@@ -1,4 +1,4 @@\n-23392287e9a26956977987fe95f337c5be4d6417\n+6f0ac34e139755c319368757fe2a093f1e5bde49\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "9c79574c9e7db612a3952d5a563bdab9b51b0868", "filename": "libgo/configure", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33c18cdc6b29a312464cb16996530b47a333c98/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33c18cdc6b29a312464cb16996530b47a333c98/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=c33c18cdc6b29a312464cb16996530b47a333c98", "patch": "@@ -14007,7 +14007,32 @@ CFLAGS=$CFLAGS_hold\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_c_split_stack_supported\" >&5\n $as_echo \"$libgo_cv_c_split_stack_supported\" >&6; }\n-if test \"$libgo_cv_c_split_stack_supported\" = yes; then\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether linker supports split/non-split linked together\" >&5\n+$as_echo_n \"checking whether linker supports split/non-split linked together... \" >&6; }\n+if test \"${libgo_cv_c_linker_split_non_split+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  cat > conftest1.c << EOF\n+extern void f();\n+int main() { f(); return 0; }\n+EOF\n+cat > conftest2.c << EOF\n+void f() {}\n+EOF\n+$CC -c -fsplit-stack $CFLAGS $CPPFLAGS conftest1.c\n+$CC -c $CFLAGS $CPPFLAGS conftest2.c\n+if $CC -o conftest conftest1.$ac_objext conftest2.$ac_objext; then\n+  libgo_cv_c_linker_split_non_split=yes\n+else\n+  libgo_cv_c_linker_split_non_split=no\n+fi\n+rm -f conftest1.* conftest2.* conftest\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_c_linker_split_non_split\" >&5\n+$as_echo \"$libgo_cv_c_linker_split_non_split\" >&6; }\n+\n+if test \"$libgo_cv_c_split_stack_supported\" = yes -a \"$libgo_cv_c_linker_split_non_split\" = yes; then\n   SPLIT_STACK=-fsplit-stack\n \n $as_echo \"#define USING_SPLIT_STACK 1\" >>confdefs.h\n@@ -14016,7 +14041,7 @@ else\n   SPLIT_STACK=\n fi\n \n- if test \"$libgo_cv_c_split_stack_supported\" = yes; then\n+ if test \"$libgo_cv_c_split_stack_supported\" = yes -a \"$libgo_cv_c_linker_split_non_split\" = yes; then\n   USING_SPLIT_STACK_TRUE=\n   USING_SPLIT_STACK_FALSE='#'\n else"}, {"sha": "ca5325a39a4ea3c1633ffd54e0b146cf71f49bcc", "filename": "libgo/configure.ac", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33c18cdc6b29a312464cb16996530b47a333c98/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33c18cdc6b29a312464cb16996530b47a333c98/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=c33c18cdc6b29a312464cb16996530b47a333c98", "patch": "@@ -374,7 +374,29 @@ AC_COMPILE_IFELSE([[int i;]],\n [libgo_cv_c_split_stack_supported=yes],\n [libgo_cv_c_split_stack_supported=no])\n CFLAGS=$CFLAGS_hold])\n-if test \"$libgo_cv_c_split_stack_supported\" = yes; then\n+\n+dnl Make sure the linker permits -fsplit-stack.  Old versions of gold will\n+dnl reject split-stack code calling non-split-stack code on targets\n+dnl they don't support.\n+AC_CACHE_CHECK([whether linker supports split/non-split linked together],\n+[libgo_cv_c_linker_split_non_split],\n+[cat > conftest1.c << EOF\n+extern void f();\n+int main() { f(); return 0; }\n+EOF\n+cat > conftest2.c << EOF\n+void f() {}\n+EOF\n+$CC -c -fsplit-stack $CFLAGS $CPPFLAGS conftest1.c\n+$CC -c $CFLAGS $CPPFLAGS conftest2.c\n+if $CC -o conftest conftest1.$ac_objext conftest2.$ac_objext; then\n+  libgo_cv_c_linker_split_non_split=yes\n+else\n+  libgo_cv_c_linker_split_non_split=no\n+fi\n+rm -f conftest1.* conftest2.* conftest])\n+\n+if test \"$libgo_cv_c_split_stack_supported\" = yes -a \"$libgo_cv_c_linker_split_non_split\" = yes; then\n   SPLIT_STACK=-fsplit-stack\n   AC_DEFINE(USING_SPLIT_STACK, 1,\n \t\t[Define if the compiler supports -fsplit-stack])\n@@ -383,13 +405,15 @@ else\n fi\n AC_SUBST(SPLIT_STACK)\n AM_CONDITIONAL(USING_SPLIT_STACK,\n-\ttest \"$libgo_cv_c_split_stack_supported\" = yes)\n+\ttest \"$libgo_cv_c_split_stack_supported\" = yes -a \"$libgo_cv_c_linker_split_non_split\" = yes)\n \n dnl Check whether the linker does stack munging when calling from\n dnl split-stack into non-split-stack code.  We check this by looking\n dnl at the --help output.  FIXME: This is only half right: it's\n dnl possible for the linker to support this for some targets but not\n dnl others.\n+dnl This is slightly different from the above check, which is whether\n+dnl the linker permits the call at all.\n AC_CACHE_CHECK([whether linker supports split stack],\n [libgo_cv_c_linker_supports_split_stack],\n [libgo_cv_c_linker_supports_split_stack=no"}]}