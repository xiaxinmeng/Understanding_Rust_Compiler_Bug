{"sha": "618400bc14b5c52a450e91d59632d5b08ae1a325", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE4NDAwYmMxNGI1YzUyYTQ1MGU5MWQ1OTYzMmQ1YjA4YWUxYTMyNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-06-30T17:00:46Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-06-30T17:00:46Z"}, "message": "ggc.h (empty_string): Delete.\n\n\t* ggc.h (empty_string): Delete.\n\t* cfgexpand.c (expand_asm_stmt): Use plain \"\".\n\t* optabs.c (expand_asm_memory_barrier): Likewise.\n\t* stringpool.c (empty_string): Delete.\n\t(digit_vector, digit_string): Delete.\n\t(ggc_alloc_string): Use plain \"\", don't optimize single digit\n\tstrings.  Use ggc_alloc_atomic.\n\nFrom-SVN: r249851", "tree": {"sha": "ad3b95702069a60d64947311946c8789498fb972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad3b95702069a60d64947311946c8789498fb972"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/618400bc14b5c52a450e91d59632d5b08ae1a325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/618400bc14b5c52a450e91d59632d5b08ae1a325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/618400bc14b5c52a450e91d59632d5b08ae1a325", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/618400bc14b5c52a450e91d59632d5b08ae1a325/comments", "author": null, "committer": null, "parents": [{"sha": "84682fd249b3f86e88e79b47527b168c873dc5f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84682fd249b3f86e88e79b47527b168c873dc5f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84682fd249b3f86e88e79b47527b168c873dc5f0"}], "stats": {"total": 58, "additions": 25, "deletions": 33}, "files": [{"sha": "8fd5ef6288243565719072438bf0c89387fcec76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618400bc14b5c52a450e91d59632d5b08ae1a325/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618400bc14b5c52a450e91d59632d5b08ae1a325/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=618400bc14b5c52a450e91d59632d5b08ae1a325", "patch": "@@ -1,3 +1,13 @@\n+2017-06-30  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* ggc.h (empty_string): Delete.\n+\t* cfgexpand.c (expand_asm_stmt): Use plain \"\".\n+\t* optabs.c (expand_asm_memory_barrier): Likewise.\n+\t* stringpool.c (empty_string): Delete.\n+\t(digit_vector, digit_string): Delete.\n+\t(ggc_alloc_string): Use plain \"\", don't optimize single digit\n+\tstrings.  Use ggc_alloc_atomic.\n+\n 2017-06-30  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* rtlanal.c (insn_rtx_cost): If a parallel contains exactly one\n@@ -26,15 +36,15 @@\n 2017-06-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/81225\n-\t* config/i386/sse.md (vec_extract_lo_<mode><mask_name>): For\n-\tV8FI, V16FI and VI8F_256 iterators, use <store_mask_predicate> instead\n-\tof nonimmediate_operand and <store_mask_constraint> instead of m for\n-\tthe input operand.  For V8FI iterator, always split if input is a MEM.\n-\tFor V16FI and V8SF_256 iterators, don't test if both operands are MEM\n-\tif <mask_applied>.  For VI4F_256 iterator, use <store_mask_predicate>\n-\tinstead of register_operand and <store_mask_constraint> instead of v for\n-\tthe input operand.  Make sure both operands aren't MEMs for if not\n-\t<mask_applied>.\n+\t* config/i386/sse.md (vec_extract_lo_<mode><mask_name>): For V8FI,\n+\tV16FI and VI8F_256 iterators, use <store_mask_predicate> instead\n+\tof nonimmediate_operand and <store_mask_constraint> instead of m\n+\tfor the input operand.  For V8FI iterator, always split if input\n+\tis a MEM.  For V16FI and V8SF_256 iterators, don't test if both\n+\toperands are MEM if <mask_applied>.  For VI4F_256 iterator, use\n+\t<store_mask_predicate> instead of register_operand and\n+\t<store_mask_constraint> instead of v for the input operand.  Make\n+\tsure both operands aren't MEMs for if not <mask_applied>.\n \n 2017-06-30  Sylvestre Ledru  <sylvestre@debian.org>\n "}, {"sha": "3b5f2fe270fda0214eb093c4defd92cd059ac1be", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618400bc14b5c52a450e91d59632d5b08ae1a325/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618400bc14b5c52a450e91d59632d5b08ae1a325/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=618400bc14b5c52a450e91d59632d5b08ae1a325", "patch": "@@ -3165,7 +3165,7 @@ expand_asm_stmt (gasm *stmt)\n   rtx body = gen_rtx_ASM_OPERANDS ((noutputs == 0 ? VOIDmode\n \t\t\t\t    : GET_MODE (output_rvec[0])),\n \t\t\t\t   ggc_strdup (gimple_asm_string (stmt)),\n-\t\t\t\t   empty_string, 0, argvec, constraintvec,\n+\t\t\t\t   \"\", 0, argvec, constraintvec,\n \t\t\t\t   labelvec, locus);\n   MEM_VOLATILE_P (body) = gimple_asm_volatile_p (stmt);\n "}, {"sha": "9b5eb456779af0576e9ac30137a07df8524a2cb0", "filename": "gcc/ggc.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618400bc14b5c52a450e91d59632d5b08ae1a325/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618400bc14b5c52a450e91d59632d5b08ae1a325/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=618400bc14b5c52a450e91d59632d5b08ae1a325", "patch": "@@ -24,9 +24,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Symbols are marked with `ggc' for `gcc gc' so as not to interfere with\n    an external gc library that might be linked in.  */\n \n-/* Constants for general use.  */\n-extern const char empty_string[];\t/* empty string */\n-\n /* Internal functions and data structures used by the GTY\n    machinery, including the generated gt*.[hc] files.  */\n "}, {"sha": "8fd5d911ede0367d5521eb1db480d92d2058bd6f", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618400bc14b5c52a450e91d59632d5b08ae1a325/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618400bc14b5c52a450e91d59632d5b08ae1a325/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=618400bc14b5c52a450e91d59632d5b08ae1a325", "patch": "@@ -6278,7 +6278,7 @@ expand_asm_memory_barrier (void)\n {\n   rtx asm_op, clob;\n \n-  asm_op = gen_rtx_ASM_OPERANDS (VOIDmode, empty_string, empty_string, 0,\n+  asm_op = gen_rtx_ASM_OPERANDS (VOIDmode, \"\", \"\", 0,\n \t\t\t\t rtvec_alloc (0), rtvec_alloc (0),\n \t\t\t\t rtvec_alloc (0), UNKNOWN_LOCATION);\n   MEM_VOLATILE_P (asm_op) = 1;"}, {"sha": "7aa4e8638d711489c3c168f5b74bdaa4348045a3", "filename": "gcc/stringpool.c", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618400bc14b5c52a450e91d59632d5b08ae1a325/gcc%2Fstringpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618400bc14b5c52a450e91d59632d5b08ae1a325/gcc%2Fstringpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstringpool.c?ref=618400bc14b5c52a450e91d59632d5b08ae1a325", "patch": "@@ -30,18 +30,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n \n-/* The \"\" allocated string.  */\n-const char empty_string[] = \"\";\n-\n-/* Character strings, each containing a single decimal digit.\n-   Written this way to save space.  */\n-static const char digit_vector[] = {\n-  '0', 0, '1', 0, '2', 0, '3', 0, '4', 0,\n-  '5', 0, '6', 0, '7', 0, '8', 0, '9', 0\n-};\n-\n-#define digit_string(d) (digit_vector + ((d) * 2))\n-\n struct ht *ident_hash;\n \n static hashnode alloc_node (cpp_hash_table *);\n@@ -82,19 +70,16 @@ alloc_node (cpp_hash_table *table ATTRIBUTE_UNUSED)\n const char *\n ggc_alloc_string (const char *contents, int length MEM_STAT_DECL)\n {\n-  char *result;\n-\n   if (length == -1)\n     length = strlen (contents);\n \n-  if (length == 0)\n-    return empty_string;\n-  if (length == 1 && ISDIGIT (contents[0]))\n-    return digit_string (contents[0] - '0');\n+  if (!length)\n+    return \"\";\n \n-  result = (char *) ggc_internal_cleared_alloc (length + 1 PASS_MEM_STAT);\n+  char *result = (char *) ggc_alloc_atomic (length + 1);\n   memcpy (result, contents, length);\n   result[length] = '\\0';\n+\n   return (const char *) result;\n }\n "}]}