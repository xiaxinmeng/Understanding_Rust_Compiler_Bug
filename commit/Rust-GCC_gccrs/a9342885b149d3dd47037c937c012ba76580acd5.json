{"sha": "a9342885b149d3dd47037c937c012ba76580acd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkzNDI4ODViMTQ5ZDNkZDQ3MDM3YzkzN2MwMTJiYTc2NTgwYWNkNQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-01-04T21:47:04Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-01-04T21:47:04Z"}, "message": "re PR c++/64767 (Could GCC warn when a pointer is compared against '\\0'?)\n\n\tPR c++/64767\n\t* c.opt (Wpointer-compare): New option.\n\n\t* c-parser.c (c_parser_postfix_expression): Mark zero character\n\tconstants by setting original_type in c_expr.\n\t* c-typeck.c (parser_build_binary_op): Warn when a pointer is compared\n\twith a zero character constant.\n\t(char_type_p): New function.\n\n\t* typeck.c (cp_build_binary_op): Warn when a pointer is compared with\n\ta zero character literal.\n\n\t* doc/invoke.texi: Document -Wpointer-compare.\n\n\t* c-c++-common/Wpointer-compare-1.c: New test.\n\nFrom-SVN: r244076", "tree": {"sha": "d230c083213bb30f68b85cc5cdcb389fbfc76650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d230c083213bb30f68b85cc5cdcb389fbfc76650"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9342885b149d3dd47037c937c012ba76580acd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9342885b149d3dd47037c937c012ba76580acd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9342885b149d3dd47037c937c012ba76580acd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9342885b149d3dd47037c937c012ba76580acd5/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "abec4284a64b3ebc6f986b5223a3623e682ae348", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abec4284a64b3ebc6f986b5223a3623e682ae348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abec4284a64b3ebc6f986b5223a3623e682ae348"}], "stats": {"total": 159, "additions": 158, "deletions": 1}, "files": [{"sha": "45efbb47c864c6977a65e377f49f5841d8a48028", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9342885b149d3dd47037c937c012ba76580acd5", "patch": "@@ -1,3 +1,8 @@\n+2017-01-04  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/64767\n+\t* doc/invoke.texi: Document -Wpointer-compare.\n+\n 2017-01-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* optc-gen.awk: Emit #error for -W*/-f*/-m* Enum without"}, {"sha": "b9bb5fe59a3d8bce0863200a585b06b85e4e8691", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a9342885b149d3dd47037c937c012ba76580acd5", "patch": "@@ -1,3 +1,8 @@\n+2017-01-04  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/64767\n+\t* c.opt (Wpointer-compare): New option.\n+\n 2017-01-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR driver/78957"}, {"sha": "714ce3a34f0052956dc872095b332d20f1137fc6", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=a9342885b149d3dd47037c937c012ba76580acd5", "patch": "@@ -870,6 +870,10 @@ Wpointer-sign\n C ObjC Var(warn_pointer_sign) Warning LangEnabledBy(C ObjC,Wall || Wpedantic)\n Warn when a pointer differs in signedness in an assignment.\n \n+Wpointer-compare\n+C ObjC C++ ObjC++ Var(warn_pointer_compare) Init(1) Warning\n+Warn when a pointer is compared with a zero character constant.\n+\n Wpointer-to-int-cast\n C ObjC Var(warn_pointer_to_int_cast) Init(1) Warning\n Warn when a pointer is cast to an integer of a different size."}, {"sha": "6e1c985701681da2c68a14b6d4f5c4460480dd33", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a9342885b149d3dd47037c937c012ba76580acd5", "patch": "@@ -1,3 +1,12 @@\n+2017-01-04  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/64767\n+\t* c-parser.c (c_parser_postfix_expression): Mark zero character\n+\tconstants by setting original_type in c_expr.\n+\t* c-typeck.c (parser_build_binary_op): Warn when a pointer is compared\n+\twith a zero character constant.\n+\t(char_type_p): New function.\n+\n 2017-01-04  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-parser.c (c_parser_declaration_or_fndef): Create a"}, {"sha": "a3504d3eec9dd0f6c70372a3f209142cab9519dd", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=a9342885b149d3dd47037c937c012ba76580acd5", "patch": "@@ -7540,6 +7540,9 @@ c_parser_postfix_expression (c_parser *parser)\n     case CPP_CHAR32:\n     case CPP_WCHAR:\n       expr.value = c_parser_peek_token (parser)->value;\n+      /* For the purpose of warning when a pointer is compared with\n+\t a zero character constant.  */\n+      expr.original_type = char_type_node;\n       set_c_expr_source_range (&expr, tok_range);\n       c_parser_consume_token (parser);\n       break;"}, {"sha": "96e7351bf4580788ed2383e26d0aec0d2d6c4fae", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=a9342885b149d3dd47037c937c012ba76580acd5", "patch": "@@ -3595,6 +3595,18 @@ parser_build_unary_op (location_t loc, enum tree_code code, struct c_expr arg)\n   return result;\n }\n \n+/* Returns true if TYPE is a character type, *not* including wchar_t.  */\n+\n+static bool\n+char_type_p (tree type)\n+{\n+  return (type == char_type_node\n+\t  || type == unsigned_char_type_node\n+\t  || type == signed_char_type_node\n+\t  || type == char16_type_node\n+\t  || type == char32_type_node);\n+}\n+\n /* This is the entry point used by the parser to build binary operators\n    in the input.  CODE, a tree_code, specifies the binary operator, and\n    ARG1 and ARG2 are the operands.  In addition to constructing the\n@@ -3714,6 +3726,21 @@ parser_build_binary_op (location_t location, enum tree_code code,\n \t      && !integer_zerop (tree_strip_nop_conversions (arg1.value))))\n \twarning_at (location, OPT_Waddress,\n \t\t    \"comparison with string literal results in unspecified behavior\");\n+      /* Warn for ptr == '\\0', it's likely that it should've been ptr[0].  */\n+      if (POINTER_TYPE_P (type1)\n+\t   && null_pointer_constant_p (arg2.value)\n+\t   && char_type_p (type2)\n+\t   && warning_at (location, OPT_Wpointer_compare,\n+\t\t\t  \"comparison between pointer and zero character \"\n+\t\t\t  \"constant\"))\n+\tinform (arg1.get_start (), \"did you mean to dereference the pointer?\");\n+      else if (POINTER_TYPE_P (type2)\n+\t       && null_pointer_constant_p (arg1.value)\n+\t       && char_type_p (type1)\n+\t       && warning_at (location, OPT_Wpointer_compare,\n+\t\t\t      \"comparison between pointer and zero character \"\n+\t\t\t      \"constant\"))\n+\tinform (arg2.get_start (), \"did you mean to dereference the pointer?\");\n     }\n   else if (TREE_CODE_CLASS (code) == tcc_comparison\n \t   && (code1 == STRING_CST || code2 == STRING_CST))"}, {"sha": "8e723be3eba8f8fbf89b02494a4b833278c5da1c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a9342885b149d3dd47037c937c012ba76580acd5", "patch": "@@ -1,3 +1,9 @@\n+2017-01-04  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/64767\n+\t* typeck.c (cp_build_binary_op): Warn when a pointer is compared with\n+\ta zero character literal.\n+\n 2017-01-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/78949"}, {"sha": "b84f8beef53ee2fb39fdbc13a2d004f92a82b17b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a9342885b149d3dd47037c937c012ba76580acd5", "patch": "@@ -4604,6 +4604,12 @@ cp_build_binary_op (location_t location,\n \t  else\n \t    result_type = type0;\n \n+\t  if (char_type_p (TREE_TYPE (orig_op1))\n+\t      && warning (OPT_Wpointer_compare,\n+\t\t\t  \"comparison between pointer and zero character \"\n+\t\t\t  \"constant\"))\n+\t    inform (input_location,\n+\t\t    \"did you mean to dereference the pointer?\");\n \t  warn_for_null_address (location, op0, complain);\n \t}\n       else if (((code1 == POINTER_TYPE || TYPE_PTRDATAMEM_P (type1))\n@@ -4618,6 +4624,12 @@ cp_build_binary_op (location_t location,\n \t  else\n \t    result_type = type1;\n \n+\t  if (char_type_p (TREE_TYPE (orig_op0))\n+\t      && warning (OPT_Wpointer_compare,\n+\t\t\t  \"comparison between pointer and zero character \"\n+\t\t\t  \"constant\"))\n+\t    inform (input_location,\n+\t\t    \"did you mean to dereference the pointer?\");\n \t  warn_for_null_address (location, op1, complain);\n \t}\n       else if ((code0 == POINTER_TYPE && code1 == POINTER_TYPE)"}, {"sha": "a6ea4259f522293f9de42f18c216d14eb3c350b1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a9342885b149d3dd47037c937c012ba76580acd5", "patch": "@@ -295,7 +295,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wpacked  -Wpacked-bitfield-compat  -Wpadded @gol\n -Wparentheses -Wno-pedantic-ms-format @gol\n -Wplacement-new -Wplacement-new=@var{n} @gol\n--Wpointer-arith  -Wno-pointer-to-int-cast @gol\n+-Wpointer-arith  -Wpointer-compare  -Wno-pointer-to-int-cast @gol\n -Wno-pragmas -Wredundant-decls -Wrestrict  -Wno-return-local-addr @gol\n -Wreturn-type  -Wsequence-point  -Wshadow  -Wno-shadow-ivar @gol\n -Wshadow=global, -Wshadow=local, -Wshadow=compatible-local @gol\n@@ -5637,6 +5637,22 @@ convenience in calculations with @code{void *} pointers and pointers\n to functions.  In C++, warn also when an arithmetic operation involves\n @code{NULL}.  This warning is also enabled by @option{-Wpedantic}.\n \n+@item -Wpointer-compare\n+@opindex Wpointer-compare\n+@opindex Wno-pointer-compare\n+Warn if a pointer is compared with a zero character constant.  This usually\n+means that the pointer was meant to be dereferenced.  For example:\n+\n+@smallexample\n+const char *p = foo ();\n+if (p == '\\0')\n+  return 42;\n+@end smallexample\n+\n+Note that the code above is invalid in C++11.\n+\n+This warning is enabled by default.\n+\n @item -Wtype-limits\n @opindex Wtype-limits\n @opindex Wno-type-limits"}, {"sha": "9b44a4a5843a67074855e2678ec8ec87d93986d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a9342885b149d3dd47037c937c012ba76580acd5", "patch": "@@ -1,3 +1,8 @@\n+2017-01-04  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/64767\n+\t* c-c++-common/Wpointer-compare-1.c: New test.\n+\n 2017-01-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/78949"}, {"sha": "440341ed9edec35252542bc4632b225d9de68c7f", "filename": "gcc/testsuite/c-c++-common/Wpointer-compare-1.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWpointer-compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9342885b149d3dd47037c937c012ba76580acd5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWpointer-compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWpointer-compare-1.c?ref=a9342885b149d3dd47037c937c012ba76580acd5", "patch": "@@ -0,0 +1,65 @@\n+/* PR c++/64767 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wpointer-compare\" } */\n+/* { dg-additional-options \"-std=c++03\" { target c++ } } */\n+\n+int\n+f1 (int *p, int **q)\n+{\n+  int r = 0;\n+\n+  r += p == '\\0'; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += p == L'\\0'; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += p != '\\0'; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += p != L'\\0'; /* { dg-warning \"comparison between pointer and zero character\" } */\n+\n+  r += '\\0' == p; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += L'\\0' == p; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += '\\0' != p; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += L'\\0' != p; /* { dg-warning \"comparison between pointer and zero character\" } */\n+\n+  r += q == '\\0'; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += q == L'\\0'; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += q != '\\0'; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += q != L'\\0'; /* { dg-warning \"comparison between pointer and zero character\" } */\n+\n+  r += '\\0' == q; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += L'\\0' == q; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += '\\0' != q; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += L'\\0' != q; /* { dg-warning \"comparison between pointer and zero character\" } */\n+\n+  return r;\n+}\n+\n+int\n+f2 (int *p)\n+{\n+  int r = 0;\n+\n+  /* Keep quiet.  */\n+  r += p == (void *) 0;\n+  r += p != (void *) 0;\n+  r += (void *) 0 == p;\n+  r += (void *) 0 != p;\n+\n+  r += p == 0;\n+  r += p != 0;\n+  r += 0 == p;\n+  r += 0 != p;\n+\n+  return r;\n+}\n+\n+int\n+f3 (int *p)\n+{\n+  int r = 0;\n+\n+  r += p == (char) 0; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += p != (char) 0; /* { dg-warning \"comparison between pointer and zero character\" } */\n+\n+  r += (char) 0 == p; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += (char) 0 != p; /* { dg-warning \"comparison between pointer and zero character\" } */\n+\n+  return r;\n+}"}]}