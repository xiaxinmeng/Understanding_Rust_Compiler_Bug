{"sha": "47b2881e71e81561968e56fd9901c78de5578d42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdiMjg4MWU3MWU4MTU2MTk2OGU1NmZkOTkwMWM3OGRlNTU3OGQ0Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-06-27T12:14:43Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-06-27T12:14:43Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1311", "tree": {"sha": "bc2d5ff17fe933ddf25d1b223e2f65fe19d54962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc2d5ff17fe933ddf25d1b223e2f65fe19d54962"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47b2881e71e81561968e56fd9901c78de5578d42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47b2881e71e81561968e56fd9901c78de5578d42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47b2881e71e81561968e56fd9901c78de5578d42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47b2881e71e81561968e56fd9901c78de5578d42/comments", "author": null, "committer": null, "parents": [{"sha": "f1027406feaaab8cda53065f1733cac852342356", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1027406feaaab8cda53065f1733cac852342356", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1027406feaaab8cda53065f1733cac852342356"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "f52c4c9be940a954a52fe130d5765fe988a96e17", "filename": "gcc/cccp.c", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47b2881e71e81561968e56fd9901c78de5578d42/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47b2881e71e81561968e56fd9901c78de5578d42/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=47b2881e71e81561968e56fd9901c78de5578d42", "patch": "@@ -4415,7 +4415,7 @@ pcfinclude (buf, limit, name, op)\n \thp = lookup (tmpbuf.bufp, -1, -1);\n \tif (hp == NULL) {\n \t  kp->chain = 0;\n-\t  install (tmpbuf.bufp, -1, T_PCSTRING, (int) kp, -1);\n+\t  install (tmpbuf.bufp, -1, T_PCSTRING, 0, (char *) kp, -1);\n \t}\n \telse if (hp->type == T_PCSTRING) {\n \t  kp->chain = hp->value.keydef;\n@@ -4753,7 +4753,8 @@ do_define (buf, limit, op, keyword)\n \t that for this new definition now.  */\n       if (debug_output && op)\n \tpass_thru_directive (buf, limit, op, keyword);\n-      install (mdef.symnam, mdef.symlen, T_MACRO, mdef.defn, hashcode);\n+      install (mdef.symnam, mdef.symlen, T_MACRO, 0,\n+\t       (char *) mdef.defn, hashcode);\n     }\n   }\n \n@@ -5945,7 +5946,7 @@ eval_if_expression (buf, length)\n   HASHNODE *save_defined;\n   int value;\n \n-  save_defined = install (\"defined\", -1, T_SPEC_DEFINED, 0, -1);\n+  save_defined = install (\"defined\", -1, T_SPEC_DEFINED, 0, 0, -1);\n   pcp_inside_if = 1;\n   temp_obuf = expand_to_temp_buffer (buf, buf + length, 0, 1);\n   pcp_inside_if = 0;\n@@ -7741,13 +7742,13 @@ grow_outbuf (obuf, needed)\n  * Otherwise, compute the hash code.\n  */\n static HASHNODE *\n-install (name, len, type, value, hash)\n+install (name, len, type, ivalue, value, hash)\n      U_CHAR *name;\n      int len;\n      enum node_type type;\n-     int value;\n+     int ivalue;\n+     char *value;\n      int hash;\n-        /* watch out here if sizeof (U_CHAR *) != sizeof (int) */\n {\n   register HASHNODE *hp;\n   register int i, bucket;\n@@ -7774,7 +7775,10 @@ install (name, len, type, value, hash)\n     hp->next->prev = hp;\n   hp->type = type;\n   hp->length = len;\n-  hp->value.ival = value;\n+  if (hp->type == T_CONST)\n+    hp->value.ival = ivalue;\n+  else\n+    hp->value.cpval = value;\n   hp->name = ((U_CHAR *) hp) + sizeof (HASHNODE);\n   p = hp->name;\n   q = name;\n@@ -8051,23 +8055,23 @@ initialize_builtins (inp, outp)\n      FILE_BUF *inp;\n      FILE_BUF *outp;\n {\n-  install (\"__LINE__\", -1, T_SPECLINE, 0, -1);\n-  install (\"__DATE__\", -1, T_DATE, 0, -1);\n-  install (\"__FILE__\", -1, T_FILE, 0, -1);\n-  install (\"__BASE_FILE__\", -1, T_BASE_FILE, 0, -1);\n-  install (\"__INCLUDE_LEVEL__\", -1, T_INCLUDE_LEVEL, 0, -1);\n-  install (\"__VERSION__\", -1, T_VERSION, 0, -1);\n-  install (\"__SIZE_TYPE__\", -1, T_SIZE_TYPE, 0, -1);\n-  install (\"__PTRDIFF_TYPE__ \", -1, T_PTRDIFF_TYPE, 0, -1);\n-  install (\"__WCHAR_TYPE__\", -1, T_WCHAR_TYPE, 0, -1);\n-  install (\"__TIME__\", -1, T_TIME, 0, -1);\n+  install (\"__LINE__\", -1, T_SPECLINE, 0, 0, -1);\n+  install (\"__DATE__\", -1, T_DATE, 0, 0, -1);\n+  install (\"__FILE__\", -1, T_FILE, 0, 0, -1);\n+  install (\"__BASE_FILE__\", -1, T_BASE_FILE, 0, 0, -1);\n+  install (\"__INCLUDE_LEVEL__\", -1, T_INCLUDE_LEVEL, 0, 0, -1);\n+  install (\"__VERSION__\", -1, T_VERSION, 0, 0, -1);\n+  install (\"__SIZE_TYPE__\", -1, T_SIZE_TYPE, 0, 0, -1);\n+  install (\"__PTRDIFF_TYPE__ \", -1, T_PTRDIFF_TYPE, 0, 0, -1);\n+  install (\"__WCHAR_TYPE__\", -1, T_WCHAR_TYPE, 0, 0, -1);\n+  install (\"__TIME__\", -1, T_TIME, 0, 0, -1);\n   if (!traditional)\n-    install (\"__STDC__\", -1, T_CONST, STDC_VALUE, -1);\n+    install (\"__STDC__\", -1, T_CONST, STDC_VALUE, 0, -1);\n   if (objc)\n-    install (\"__OBJC__\", -1, T_CONST, 1, -1);\n+    install (\"__OBJC__\", -1, T_CONST, 1, 0, -1);\n /*  This is supplied using a -D by the compiler driver\n     so that it is present only when truly compiling with GNU C.  */\n-/*  install (\"__GNUC__\", -1, T_CONST, 2, -1);  */\n+/*  install (\"__GNUC__\", -1, T_CONST, 2, 0, -1);  */\n \n   if (debug_output)\n     {"}]}