{"sha": "c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA2OTRjNGI3ODFjMWM0ZTk2MWVmNzRmMWE3MGMwZGY3YTZiNjdiNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-02-20T08:57:33Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-02-20T08:57:33Z"}, "message": "re PR c++/14199 (Unjustified warning about unused variable)\n\n\tPR c++/14199\n\t* pt.c (tsubst_copy): Call mark_used for a PARM_DECL.\n\n\tPR c++/14173\n\t* semantics.c (begin_class_definition): Set TYPE_PACKED correctly\n\tfor all type variants.\n\n\tPR c++/14173\n\t* g++.dg/ext/packed5.C: New test.\n\n\tPR c++/14199\n\t* g++.dg/warn/Wunused-5.C: New test.\n\n\tPR c++/13927\n\t* decl.c (duplicate_decls): Return error_mark_node for invalid\n\tredeclarations.\n\t* name-lookup.c (push_namespace): Ignore the return value from\n\tpushdecl.\n\t* pt.c (push_template_decl_real): Robustify.\n\n\tPR c++/13927\n\t* g++.dg/other/error8.C: Remove XFAIL markers.\n\nFrom-SVN: r78159", "tree": {"sha": "805d38b660862895cfdc82561ded42eea78f8a55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/805d38b660862895cfdc82561ded42eea78f8a55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6/comments", "author": null, "committer": null, "parents": [{"sha": "15316a6f7639a7173c375d8c3d0e24957982f27e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15316a6f7639a7173c375d8c3d0e24957982f27e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15316a6f7639a7173c375d8c3d0e24957982f27e"}], "stats": {"total": 86, "additions": 75, "deletions": 11}, "files": [{"sha": "e3f51e9e048de5fe0c1781219f3153f87c05e088", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6", "patch": "@@ -1,5 +1,21 @@\n+2004-02-20  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/14199\n+\t* pt.c (tsubst_copy): Call mark_used for a PARM_DECL.\n+\n+\tPR c++/14173\n+\t* semantics.c (begin_class_definition): Set TYPE_PACKED correctly\n+\tfor all type variants.\n+\n 2004-02-19  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/13927\n+\t* decl.c (duplicate_decls): Return error_mark_node for invalid\n+\tredeclarations.\n+\t* name-lookup.c (push_namespace): Ignore the return value from\n+\tpushdecl.\n+\t* pt.c (push_template_decl_real): Robustify.\n+\n \tPR c++/14186\n \t* name-lookup.c (push_class_level_binding): Do not complain about\n \tadding a binding for a member whose name is the same as the"}, {"sha": "1db274eddd198991c4212dd236c12ae78efb6bfb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6", "patch": "@@ -1319,10 +1319,7 @@ duplicate_decls (tree newdecl, tree olddecl)\n \tolddecl = TREE_VALUE (olddecl);\n       cp_error_at (\"previous declaration of `%#D'\", olddecl);\n \n-      /* New decl is completely inconsistent with the old one =>\n-\t tell caller to replace the old one.  */\n-\n-      return NULL_TREE;\n+      return error_mark_node;\n     }\n   else if (!types_match)\n     {"}, {"sha": "be1b8228353298658cf3b50738b3313040c1d5b3", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6", "patch": "@@ -3080,7 +3080,7 @@ push_namespace (tree name)\n       /* Make a new namespace, binding the name to it.  */\n       d = build_lang_decl (NAMESPACE_DECL, name, void_type_node);\n       DECL_CONTEXT (d) = FROB_CONTEXT (current_namespace);\n-      d = pushdecl (d);\n+      pushdecl (d);\n       if (anon)\n \t{\n \t  /* Clear DECL_NAME for the benefit of debugging back ends.  */"}, {"sha": "1f97a536b23af261f76b2b7dbaa521c4e2333793", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6", "patch": "@@ -2774,6 +2774,9 @@ push_template_decl_real (tree decl, int is_friend)\n   int is_partial;\n   int new_template_p = 0;\n \n+  if (decl == error_mark_node)\n+    return decl;\n+\n   /* See if this is a partial specialization.  */\n   is_partial = (DECL_IMPLICIT_TYPEDEF_P (decl)\n \t\t&& TREE_CODE (TREE_TYPE (decl)) != ENUMERAL_TYPE\n@@ -7381,6 +7384,7 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n     case PARM_DECL:\n       r = retrieve_local_specialization (t);\n       my_friendly_assert (r != NULL, 20020903);\n+      mark_used (r);\n       return r;\n \n     case CONST_DECL:"}, {"sha": "b7a7f4a919bca97c6c0b24669e90b9516a2154c0", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6", "patch": "@@ -2042,7 +2042,16 @@ begin_class_definition (tree t)\n   maybe_process_partial_specialization (t);\n   pushclass (t);\n   TYPE_BEING_DEFINED (t) = 1;\n-  TYPE_PACKED (t) = flag_pack_struct;\n+  if (flag_pack_struct)\n+    {\n+      tree v;\n+      TYPE_PACKED (t) = 1;\n+      /* Even though the type is being defined for the first time\n+\t here, there might have been a forward declaration, so there\n+\t might be cv-qualified variants of T.  */\n+      for (v = TYPE_NEXT_VARIANT (t); v; v = TYPE_NEXT_VARIANT (v))\n+\tTYPE_PACKED (v) = 1;\n+    }\n   /* Reset the interface data, at the earliest possible\n      moment, as it might have been set via a class foo;\n      before.  */"}, {"sha": "aacaa358c99ee526e8cf420ae1119bc4060b1dc2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6", "patch": "@@ -1,4 +1,13 @@\n-2004-02-19  Mark Mitchell  <mark@codesourcery.com>\n+2004-02-20  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13927\n+\t* g++.dg/other/error8.C: Remove XFAIL markers.\n+\n+\tPR c++/14173\n+\t* g++.dg/ext/packed5.C: New test.\n+\n+\tPR c++/14199\n+\t* g++.dg/warn/Wunused-5.C: New test.\n \n \tPR c++/14186\n \t* g++.dg/lookup/member1.C: New test."}, {"sha": "caf14d89c2931a18b11526e30dea205f58a3ba06", "filename": "gcc/testsuite/g++.dg/ext/packed5.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked5.C?ref=c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/14173\n+\n+struct A;\n+\n+void foo(const A&);\n+\n+struct A\n+{\n+  A(const A&);\n+};\n+\n+struct B\n+{\n+  A a;\n+  A bar() { return a; }\n+};"}, {"sha": "e461e0919c8347e149c3d24b2f62ef0c0d3f41d1", "filename": "gcc/testsuite/g++.dg/other/error8.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror8.C?ref=c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6", "patch": "@@ -5,8 +5,8 @@\n \n void foo(void)\n {\n-  union { int alpha; int beta; }; // { dg-error \"previous declaration `int alpha'\" }\n-  double alpha;  // { dg-error \"declaration of\" }\n+  union { int alpha; int beta; }; // { dg-error \"previous declaration of `int alpha'\" }\n+  double alpha;  // { dg-error \"redeclared\" }\n }\n \n // This checks both the templated version, and the position of the diagnostic\n@@ -22,5 +22,5 @@ void tfoo(void)\n }\n \n // The duplicated error messages are xfailed for now (tracked in the PR)\n-// { dg-bogus \"\" \"duplicate error messages\" { xfail *-*-* } 8 }\n-// { dg-bogus \"\" \"duplicate error messages\" { xfail *-*-* } 9 }\n+// { dg-bogus \"\" \"duplicate error messages\" { target *-*-* } 8 }\n+// { dg-bogus \"\" \"duplicate error messages\" { target *-*-* } 9 }"}, {"sha": "06d1a0516bc103c3fde172d33f93afab6d28acf3", "filename": "gcc/testsuite/g++.dg/warn/Wunused-5.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-5.C?ref=c0694c4b781c1c4e961ef74f1a70c0df7a6b67b6", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/14199\n+// { dg-options \"-W -Wall -Wunused\" }\n+\n+struct X { \n+    static void foo (); \n+}; \n+ \n+template <typename T> \n+void foo (const T &t) { \n+  t.foo(); \n+}\n+\n+template void foo (const X &); "}]}