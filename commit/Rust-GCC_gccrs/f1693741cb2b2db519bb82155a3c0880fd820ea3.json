{"sha": "f1693741cb2b2db519bb82155a3c0880fd820ea3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE2OTM3NDFjYjJiMmRiNTE5YmI4MjE1NWEzYzA4ODBmZDgyMGVhMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-13T09:09:53Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-13T09:10:50Z"}, "message": "i386: Fix up V2SFmode vcond* with -mxop [PR100581]\n\nix86_expand_sse_movcc has special TARGET_XOP handling and the recent\naddition of support of v*cond* patterns for V2SFmode results in\nICEs because the expected pattern doesn't exist.  We can handle it\nusing 128-bit vpcmov (if we ignore the upper 64 bits like we ignore in\nother TARGET_MMX_WITH_SSE support).\n\n2021-05-13  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/100581\n\t* config/i386/i386-expand.c (ix86_expand_sse_movcc): Force mode\n\tsizes < 16 to a register when constructing vpcmov pattern.\n\t* config/i386/mmx.md (*xop_pcmov_<mode>): Use MMXMODE124 mode.\n\ngcc/testsuite/\n\n\tPR target/100581\n\t* g++.target/i386/pr100581.C: New test.", "tree": {"sha": "0be1b8a2b7cd93aecf794200670ce33e5c102e01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0be1b8a2b7cd93aecf794200670ce33e5c102e01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1693741cb2b2db519bb82155a3c0880fd820ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1693741cb2b2db519bb82155a3c0880fd820ea3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1693741cb2b2db519bb82155a3c0880fd820ea3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1693741cb2b2db519bb82155a3c0880fd820ea3/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23eb66d1d46a34cb28c4acbdf8a1deb80a7c5a05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23eb66d1d46a34cb28c4acbdf8a1deb80a7c5a05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23eb66d1d46a34cb28c4acbdf8a1deb80a7c5a05"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "92488b869ecbf9cbcc3e343692fc5658392b7520", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1693741cb2b2db519bb82155a3c0880fd820ea3/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1693741cb2b2db519bb82155a3c0880fd820ea3/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=f1693741cb2b2db519bb82155a3c0880fd820ea3", "patch": "@@ -3661,7 +3661,8 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n     {\n       op_true = force_reg (mode, op_true);\n \n-      if (!nonimmediate_operand (op_false, mode))\n+      if (GET_MODE_SIZE (mode) < 16\n+\t  || !nonimmediate_operand (op_false, mode))\n \top_false = force_reg (mode, op_false);\n \n       emit_insn (gen_rtx_SET (dest, gen_rtx_IF_THEN_ELSE (mode, cmp,"}, {"sha": "7fc2e5d781c51832821e7fd556bcc1ecaf0f6944", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1693741cb2b2db519bb82155a3c0880fd820ea3/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1693741cb2b2db519bb82155a3c0880fd820ea3/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=f1693741cb2b2db519bb82155a3c0880fd820ea3", "patch": "@@ -1816,11 +1816,11 @@\n \n ;; XOP parallel XMM conditional moves\n (define_insn \"*xop_pcmov_<mode>\"\n-  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=x\")\n-        (if_then_else:MMXMODEI\n-          (match_operand:MMXMODEI 3 \"register_operand\" \"x\")\n-          (match_operand:MMXMODEI 1 \"register_operand\" \"x\")\n-          (match_operand:MMXMODEI 2 \"register_operand\" \"x\")))]\n+  [(set (match_operand:MMXMODE124 0 \"register_operand\" \"=x\")\n+        (if_then_else:MMXMODE124\n+          (match_operand:MMXMODE124 3 \"register_operand\" \"x\")\n+          (match_operand:MMXMODE124 1 \"register_operand\" \"x\")\n+          (match_operand:MMXMODE124 2 \"register_operand\" \"x\")))]\n   \"TARGET_XOP && TARGET_MMX_WITH_SSE\"\n   \"vpcmov\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"sse4arg\")])"}, {"sha": "37cc9f11f18dd70cfd28d7165c8776dcd3d3e7a1", "filename": "gcc/testsuite/g++.target/i386/pr100581.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1693741cb2b2db519bb82155a3c0880fd820ea3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100581.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1693741cb2b2db519bb82155a3c0880fd820ea3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100581.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100581.C?ref=f1693741cb2b2db519bb82155a3c0880fd820ea3", "patch": "@@ -0,0 +1,9 @@\n+/* PR target/100581 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mxop\" } */\n+\n+typedef float __attribute__((__vector_size__(8))) v64f32;\n+\n+v64f32 af, bf, ff_a, ff_b;\n+\n+v64f32 f() { return ff_a > ff_b ? af : bf; }"}]}