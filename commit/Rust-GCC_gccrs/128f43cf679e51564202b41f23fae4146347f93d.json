{"sha": "128f43cf679e51564202b41f23fae4146347f93d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI4ZjQzY2Y2NzllNTE1NjQyMDJiNDFmMjNmYWU0MTQ2MzQ3ZjkzZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-20T10:52:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-20T12:21:01Z"}, "message": "Avoid changing PHIs in GIMPLE split_edge\n\nPreviously I've changed gimple_split_edge to avoid PHI node\nre-allocation, but this introduced swapping of PHI arguments\ndue to the way edge redirection works.  This is now a problem\nfor me and which can be solved with the following approach\nreducing the overhead of split_edge even more.  We can simply\npretend there are no PHI nodes if we can make sure the\nnew fallthru will have the same dest_idx as the old edge\ninto the destination.\n\n2020-10-20  Richard Biener  <rguenther@suse.de>\n\n\t* tree-cfg.c (reinstall_phi_args): Remove.\n\t(gimple_split_edge): Remove PHIs around the edge redirection\n\tto avoid touching them at all.", "tree": {"sha": "c103baf5f960914917daca975325346a4b9751be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c103baf5f960914917daca975325346a4b9751be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/128f43cf679e51564202b41f23fae4146347f93d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/128f43cf679e51564202b41f23fae4146347f93d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/128f43cf679e51564202b41f23fae4146347f93d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/128f43cf679e51564202b41f23fae4146347f93d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06729598b0dc10dbe60545f21c2214ad66a5a3db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06729598b0dc10dbe60545f21c2214ad66a5a3db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06729598b0dc10dbe60545f21c2214ad66a5a3db"}], "stats": {"total": 50, "additions": 17, "deletions": 33}, "files": [{"sha": "5139f111fecc7ec6e0902145b808308a5e47450b", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 17, "deletions": 33, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128f43cf679e51564202b41f23fae4146347f93d/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128f43cf679e51564202b41f23fae4146347f93d/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=128f43cf679e51564202b41f23fae4146347f93d", "patch": "@@ -2888,35 +2888,6 @@ last_and_only_stmt (basic_block bb)\n     return NULL;\n }\n \n-/* Reinstall those PHI arguments queued in OLD_EDGE to NEW_EDGE.  */\n-\n-static void\n-reinstall_phi_args (edge new_edge, edge old_edge)\n-{\n-  edge_var_map *vm;\n-  int i;\n-  gphi_iterator phis;\n-\n-  vec<edge_var_map> *v = redirect_edge_var_map_vector (old_edge);\n-  if (!v)\n-    return;\n-\n-  for (i = 0, phis = gsi_start_phis (new_edge->dest);\n-       v->iterate (i, &vm) && !gsi_end_p (phis);\n-       i++, gsi_next (&phis))\n-    {\n-      gphi *phi = phis.phi ();\n-      tree result = redirect_edge_var_map_result (vm);\n-      tree arg = redirect_edge_var_map_def (vm);\n-\n-      gcc_assert (result == gimple_phi_result (phi));\n-\n-      add_phi_arg (phi, arg, new_edge, redirect_edge_var_map_location (vm));\n-    }\n-\n-  redirect_edge_var_map_clear (old_edge);\n-}\n-\n /* Returns the basic block after which the new basic block created\n    by splitting edge EDGE_IN should be placed.  Tries to keep the new block\n    near its \"logical\" location.  This is of most help to humans looking\n@@ -2956,11 +2927,24 @@ gimple_split_edge (edge edge_in)\n   new_bb = create_empty_bb (after_bb);\n   new_bb->count = edge_in->count ();\n \n-  e = redirect_edge_and_branch (edge_in, new_bb);\n-  gcc_assert (e == edge_in);\n-\n+  /* We want to avoid re-allocating PHIs when we first\n+     add the fallthru edge from new_bb to dest but we also\n+     want to avoid changing PHI argument order when\n+     first redirecting edge_in away from dest.  The former\n+     avoids changing PHI argument order by adding them\n+     last and then the redirection swapping it back into\n+     place by means of unordered remove.\n+     So hack around things by temporarily removing all PHIs\n+     from the destination during the edge redirection and then\n+     making sure the edges stay in order.  */\n+  gimple_seq saved_phis = phi_nodes (dest);\n+  unsigned old_dest_idx = edge_in->dest_idx;\n+  set_phi_nodes (dest, NULL);\n   new_edge = make_single_succ_edge (new_bb, dest, EDGE_FALLTHRU);\n-  reinstall_phi_args (new_edge, e);\n+  e = redirect_edge_and_branch (edge_in, new_bb);\n+  gcc_assert (e == edge_in && new_edge->dest_idx == old_dest_idx);\n+  /* set_phi_nodes sets the BB of the PHI nodes, so do it manually here.  */\n+  dest->il.gimple.phi_nodes = saved_phis;\n \n   return new_bb;\n }"}]}