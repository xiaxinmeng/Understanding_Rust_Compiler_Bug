{"sha": "4c23f36f14a91eef7ec880a90a57c752cd1e86b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMyM2YzNmYxNGE5MWVlZjdlYzg4MGE5MGE1N2M3NTJjZDFlODZiMA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-03-21T23:57:59Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-03-21T23:57:59Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r557", "tree": {"sha": "e3531104075c78d2c359d744211cb72b7c976608", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3531104075c78d2c359d744211cb72b7c976608"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c23f36f14a91eef7ec880a90a57c752cd1e86b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c23f36f14a91eef7ec880a90a57c752cd1e86b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c23f36f14a91eef7ec880a90a57c752cd1e86b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c23f36f14a91eef7ec880a90a57c752cd1e86b0/comments", "author": null, "committer": null, "parents": [{"sha": "1679e11f718f8955a6c45c33e36461c8ba19bfa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1679e11f718f8955a6c45c33e36461c8ba19bfa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1679e11f718f8955a6c45c33e36461c8ba19bfa5"}], "stats": {"total": 91, "additions": 56, "deletions": 35}, "files": [{"sha": "32cd7da0270d43307a55b70bda9ee6fbf43aad63", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 56, "deletions": 35, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c23f36f14a91eef7ec880a90a57c752cd1e86b0/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c23f36f14a91eef7ec880a90a57c752cd1e86b0/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=4c23f36f14a91eef7ec880a90a57c752cd1e86b0", "patch": "@@ -616,12 +616,12 @@ typedef const void *CPTR_T;\n #define __proto(x) x\n #else\n \n-#ifdef _STDIO_H_\t\t/* Ultrix 4.0 */\n+#if defined(_STDIO_H_) || defined(__STDIO_H__)\t\t/* Ultrix 4.0, SGI */\n typedef void *PTR_T;\n typedef void *CPTR_T;\n \n #else\n-typedef char *PTR_T;\t\t/* Ultrix 3.1 */\n+typedef char *PTR_T;\t\t\t\t\t/* Ultrix 3.1 */\n typedef char *CPTR_T;\n #endif\n \n@@ -640,18 +640,13 @@ typedef char *CPTR_T;\n #define Size_t\t\tunsigned int\n #define Ptrdiff_t\tint\n \n-#define CODE_MASK 0x8F300\n-#define MIPS_IS_STAB(sym) (((sym)->index & 0xFFF00) == CODE_MASK)\n-#define MIPS_MARK_STAB(code) ((code)+CODE_MASK)\n-#define MIPS_UNMARK_STAB(code) ((code)-CODE_MASK)\n-\n /* The following might be called from obstack or malloc,\n    so they can't be static.  */\n \n extern void\tpfatal_with_name\n \t\t\t\t__proto((char *));\n extern void\tfancy_abort\t__proto((void));\n-extern void\tbotch\t\t__proto((const char *));\n+       void\tbotch\t\t__proto((const char *));\n extern PTR_T\txmalloc\t\t__proto((Size_t));\n extern PTR_T\txcalloc\t\t__proto((Size_t, Size_t));\n extern PTR_T\txrealloc\t__proto((PTR_T, Size_t));\n@@ -689,8 +684,8 @@ main ()\n #include <signal.h>\n #include <sys/stat.h>\n \n-#ifdef USG\n-#include \"stab.h\"  /* If doing DBX on sysV, use our own stab.h.  */\n+#if defined (USG) || defined (NO_STAB_H)\n+#include \"gstab.h\"  /* If doing DBX on sysV, use our own stab.h.  */\n #else\n #include <stab.h>  /* On BSD, use the system's stab.h.  */\n #endif /* not USG */\n@@ -1598,6 +1593,7 @@ static int\tversion\t\t= 0; \t\t/* print version # */\n static int\thad_errors\t= 0;\t\t/* != 0 if errors were found */\n static int\trename_output\t= 0;\t\t/* != 0 if rename output file*/\n static int\tdelete_input\t= 0;\t\t/* != 0 if delete input after done */\n+static int\tstabs_seen\t= 0;\t\t/* != 0 if stabs have been seen */\n \n \n /* Pseudo symbol to use when putting stabs into the symbol table.  */\n@@ -1680,6 +1676,7 @@ STATIC char    *st_to_string\t__proto((st_t));\n STATIC char    *sc_to_string\t__proto((sc_t));\n STATIC char    *read_line\t__proto((void));\n STATIC void\tparse_input\t__proto((void));\n+STATIC void\tmark_stabs\t__proto((const char *));\n STATIC void\tparse_begin\t__proto((const char *));\n STATIC void\tparse_bend\t__proto((const char *));\n STATIC void\tparse_def\t__proto((const char *));\n@@ -1720,6 +1717,12 @@ STATIC void\t  free_scope\t\t__proto((scope_t *));\n STATIC void\t  free_tag\t\t__proto((tag_t *));\n STATIC void\t  free_thead\t\t__proto((thead_t *));\n \n+/* rms: The following is a very bad idea.\n+   It's easy for these to conflict with definitions on certain systems.\n+   All system calls and library functions\n+   for which an implicit definition will work\n+   should be left implicit.\n+   I deleted the declarations for open and fstat.  */\n /* Prototypes for library functions used.  */\n #if !defined(NO_LIB_PROTOTYPE) && !defined(_OSF_SOURCE) && !defined(_STDIO_H_)\n extern char  *strchr\t\t__proto((const char *, int));\n@@ -1740,7 +1743,6 @@ extern FILE  *freopen\t\t__proto((const char *, const char *, FILE *));\n extern int    fflush\t\t__proto((FILE *));\n extern void   perror\t\t__proto((const char *));\n extern void   exit\t\t__proto((int));\n-extern int    open\t\t__proto((const char *, int, ...));\n extern int    rename\t\t__proto((const char *, const char *));\n \n #ifndef sgi\n@@ -1765,14 +1767,15 @@ extern int    write\t\t__proto((int, CPTR_T, Size_t));\n extern int    read\t\t__proto((int, PTR_T, Size_t));\n extern long   lseek\t\t__proto((int, long, int));\n extern int    ftruncate\t\t__proto((int, long));\n-extern int    fstat\t\t__proto((int, struct stat *));\n #endif\n \n extern char  *mktemp\t\t__proto((char *));\n \n extern char *optarg;\n extern int   optind;\n extern int   opterr;\n+extern char *version_string;\n+extern char *sys_siglist[NSIG + 1];\n \n #ifndef SEEK_SET\t/* Symbolic constants for the \"fseek\" function: */\n #define\tSEEK_SET 0\t/* Set file pointer to offset */\n@@ -1803,6 +1806,7 @@ static pseudo_ops_t pseudo_ops[] = {\n   { \"#.stabn\",\tsizeof(\"#.stabn\")-1,\tparse_stabn },\n   { \".stabs\",\tsizeof(\".stabs\")-1,\tparse_stabs },\n   { \".stabn\",\tsizeof(\".stabn\")-1,\tparse_stabn },\n+  { \"#@stabs\",\tsizeof(\"#@stabs\")-1,\tmark_stabs },\n };\n \n \f\n@@ -2794,13 +2798,13 @@ parse_begin (start)\n \n   if (cur_file_ptr == (efdr_t *)0)\n     {\n-      error (\"#.begin directive without a preceeding .file directive\");\n+      error (\"#.begin directive without a preceding .file directive\");\n       return;\n     }\n \n   if (cur_proc_ptr == (PDR *)0)\n     {\n-      error (\"#.begin directive without a preceeding .ent directive\");\n+      error (\"#.begin directive without a preceding .ent directive\");\n       return;\n     }\n \n@@ -2844,13 +2848,13 @@ parse_bend (start)\n \n   if (cur_file_ptr == (efdr_t *)0)\n     {\n-      error (\"#.begin directive without a preceeding .file directive\");\n+      error (\"#.begin directive without a preceding .file directive\");\n       return;\n     }\n \n   if (cur_proc_ptr == (PDR *)0)\n     {\n-      error (\"#.bend directive without a preceeding .ent directive\");\n+      error (\"#.bend directive without a preceding .ent directive\");\n       return;\n     }\n \n@@ -3465,13 +3469,13 @@ parse_end (start)\n \n   if (cur_file_ptr == (efdr_t *)0)\n     {\n-      error (\".end directive without a preceeding .file directive\");\n+      error (\".end directive without a preceding .file directive\");\n       return;\n     }\n \n   if (cur_proc_ptr == (PDR *)0)\n     {\n-      error (\".end directive without a preceeding .ent directive\");\n+      error (\".end directive without a preceding .ent directive\");\n       return;\n     }\n \n@@ -3525,7 +3529,7 @@ parse_ent (start)\n \n   if (cur_file_ptr == (efdr_t *)0)\n     {\n-      error (\".ent directive without a preceeding .file directive\");\n+      error (\".ent directive without a preceding .file directive\");\n       return;\n     }\n \n@@ -3579,6 +3583,24 @@ parse_file (start)\n   add_file (start_name, end_name_p1);\n }\n \n+\f\n+/* Make sure the @stabs symbol is emitted.  */\n+\n+static void\n+mark_stabs (start)\n+     char *start;\t\t\t/* Start of directive (ignored) */\n+{\n+  if (!stabs_seen)\n+    {\n+      /* Add a dummy @stabs dymbol. */\n+      stabs_seen = 1;\n+      (void) add_local_symbol (stabs_symbol,\n+\t\t\t       stabs_symbol + sizeof (stabs_symbol),\n+\t\t\t       stNil, scInfo, -1, MIPS_MARK_STAB(0));\n+\n+    }\n+}\n+\n \f\n /* Parse .stabs directives.\n \n@@ -3622,15 +3644,9 @@ parse_stabs_common (string_start, string_end, rest)\n   st_t st;\n   sc_t sc;\n   int ch;\n-  static int stabs_seen = 0;\n \n-  if (stabs_seen++ == 0)\n-    {\n-      /* Add a dummy @stabs dymbol. */\n-      (void) add_local_symbol (stabs_symbol,\n-\t\t\t       stabs_symbol + sizeof (stabs_symbol),\n-\t\t\t       stNil, scInfo, -1, MIPS_MARK_STAB(0));\n-    }\n+  if (stabs_seen == 0)\n+    mark_stabs (\"\");\n \n   /* Read code from stabs.  */\n   if (!isdigit (*rest))\n@@ -3691,12 +3707,10 @@ parse_stabs_common (string_start, string_end, rest)\n     }\n   else\n     {\n-      code = MIPS_MARK_STAB(code);\n-\n       /* Skip ,0,0, */\n       if (p[0] != ',' || p[1] != '0' || p[2] != ',' || p[3] != '0' || p[4] != ',')\n \t{\n-\t  error (\"Illegal .stabs/.stabn directive, manditory 0 isn't\");\n+\t  error (\"Illegal .stabs/.stabn directive, mandatory 0 isn't\");\n \t  return;\n \t}\n \n@@ -3739,10 +3753,20 @@ parse_stabs_common (string_start, string_end, rest)\n \t      return;\n \t    }\n \n-\t  st = (st_t) sym_ptr->st;\n-\t  sc = (sc_t) sym_ptr->sc;\n+\t  /* Traditionally, N_LBRAC and N_RBRAC are *not* relocated. */\n+\t  if (code == (int)N_LBRAC || code == (int)N_RBRAC)\n+\t    {\n+\t      sc = scNil;\n+\t      st = stNil;\n+\t    }\n+\t  else\n+\t    {\n+\t      sc = (sc_t) sym_ptr->sc;\n+\t      st = (st_t) sym_ptr->st;\n+\t    }\n \t  value = sym_ptr->value;\n \t}\n+      code = MIPS_MARK_STAB(code);\n     }\n \n   (void) add_local_symbol (string_start, string_end, st, sc, value, code);\n@@ -4807,7 +4831,6 @@ main (argc, argv)\n \n   if (version)\n     {\n-      extern char *version_string;\n       fprintf (stderr, \"mips-tfile version %s\", version_string);\n #ifdef TARGET_VERSION\n       TARGET_VERSION;\n@@ -4908,8 +4931,6 @@ STATIC void\n catch_signal (signum)\n      int signum;\n {\n-  extern char *sys_siglist[NSIG + 1];\n-\n   (void) signal (signum, SIG_DFL);\t/* just in case... */\n   fatal (sys_siglist[signum]);\n }"}]}