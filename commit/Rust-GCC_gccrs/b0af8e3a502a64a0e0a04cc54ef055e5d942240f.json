{"sha": "b0af8e3a502a64a0e0a04cc54ef055e5d942240f", "node_id": "C_kwDOANBUbNoAKGIwYWY4ZTNhNTAyYTY0YTBlMGEwNGNjNTRlZjA1NWU1ZDk0MjI0MGY", "commit": {"author": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2022-04-05T15:31:34Z"}, "committer": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2022-04-05T15:31:34Z"}, "message": "OpenMP: Fix nested use_device_ptr\n\nThis patch fixes a bug in lower_omp_target, where for Fortran arrays,\nthe expanded sender assignment is wrongly using the variable in the\ncurrent ctx, instead of the one looked-up outside, which is causing\nuse_device_ptr/addr to fail to work when used inside an omp-parallel\n(where the omp child_fn is split away from the original).\n\nThe fix is inside omp-low.cc, though because the omp_array_data langhook\nis used only by Fortran, this is essentially Fortran-specific.\n\n2022-04-05  Chung-Lin Tang  <cltang@codesourcery.com>\n\ngcc/ChangeLog:\n\n\t* omp-low.cc (lower_omp_target): Use outer context looked-up 'var' as\n\targument to lang_hooks.decls.omp_array_data, instead of 'ovar' from\n\tcurrent clause.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.fortran/use_device_ptr-4.f90: New testcase.", "tree": {"sha": "6489081f39f9876d2d6b7edd33576289426d66a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6489081f39f9876d2d6b7edd33576289426d66a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0af8e3a502a64a0e0a04cc54ef055e5d942240f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0af8e3a502a64a0e0a04cc54ef055e5d942240f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0af8e3a502a64a0e0a04cc54ef055e5d942240f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0af8e3a502a64a0e0a04cc54ef055e5d942240f/comments", "author": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e68f5c90bae44e886bd1b13a135dbfd00bceea0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e68f5c90bae44e886bd1b13a135dbfd00bceea0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e68f5c90bae44e886bd1b13a135dbfd00bceea0a"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "bf5779b6543be4a3e5911beb805b61643e2ce534", "filename": "gcc/omp-low.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0af8e3a502a64a0e0a04cc54ef055e5d942240f/gcc%2Fomp-low.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0af8e3a502a64a0e0a04cc54ef055e5d942240f/gcc%2Fomp-low.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.cc?ref=b0af8e3a502a64a0e0a04cc54ef055e5d942240f", "patch": "@@ -13405,7 +13405,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \n \t    type = TREE_TYPE (ovar);\n \t    if (lang_hooks.decls.omp_array_data (ovar, true))\n-\t      var = lang_hooks.decls.omp_array_data (ovar, false);\n+\t      var = lang_hooks.decls.omp_array_data (var, false);\n \t    else if (((OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_ADDR\n \t\t      || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_HAS_DEVICE_ADDR)\n \t\t      && !omp_privatize_by_reference (ovar)"}, {"sha": "8c361d1e3cd9cf078a0139177384993f2fd98244", "filename": "libgomp/testsuite/libgomp.fortran/use_device_ptr-4.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0af8e3a502a64a0e0a04cc54ef055e5d942240f/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fuse_device_ptr-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0af8e3a502a64a0e0a04cc54ef055e5d942240f/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fuse_device_ptr-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fuse_device_ptr-4.f90?ref=b0af8e3a502a64a0e0a04cc54ef055e5d942240f", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do run }\n+!\n+! Test user_device_ptr nested within another parallel\n+! construct\n+!\n+program test_nested_use_device_ptr\n+  use iso_c_binding, only: c_loc, c_ptr\n+  implicit none\n+  real, allocatable, target :: arr(:,:)\n+  integer :: width = 1024, height = 1024, i\n+  type(c_ptr) :: devptr\n+\n+  allocate(arr(width,height))\n+\n+  !$omp target enter data map(alloc: arr)\n+\n+  !$omp target data use_device_ptr(arr)\n+  devptr = c_loc(arr(1,1))\n+  !$omp end target data\n+\n+  !$omp parallel default(none) shared(arr, devptr)\n+  !$omp single\n+\n+  !$omp target data use_device_ptr(arr)\n+  call thing(c_loc(arr), devptr)\n+  !$omp end target data\n+\n+  !$omp end single\n+  !$omp end parallel\n+  !$omp target exit data map(delete: arr)\n+\n+contains\n+\n+  subroutine thing(myarr, devptr)\n+    use iso_c_binding, only: c_ptr, c_associated\n+    implicit none\n+    type(c_ptr) :: myarr, devptr\n+    if (.not.c_associated(myarr, devptr)) stop 1\n+  end subroutine thing\n+\n+end program"}]}