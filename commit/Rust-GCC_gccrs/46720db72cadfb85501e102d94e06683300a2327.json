{"sha": "46720db72cadfb85501e102d94e06683300a2327", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY3MjBkYjcyY2FkZmI4NTUwMWUxMDJkOTRlMDY2ODMzMDBhMjMyNw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-03-28T18:59:06Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-03-28T19:01:24Z"}, "message": "testsuite/arm: Improve scan-assembler in pr96770.c\n\nI'm seeing random scan-assembler-times failures in pr96770.c when LTO is used.\n\nI suspect this is because the \\\\+4 string matches the LTO sections, sometimes.\n\nThis small patch avoids the issue, by matching arr\\\\+4 instead of \\\\+4.\n\n2021-03-28  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/testsuite/\n\tPR target/96770\n\t* gcc.target/arm/pure-code/pr96770.c: Improve scan-assembler-times.", "tree": {"sha": "7d0a0604d1e818a1d39a27b62a95fc91d54f775d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d0a0604d1e818a1d39a27b62a95fc91d54f775d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46720db72cadfb85501e102d94e06683300a2327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46720db72cadfb85501e102d94e06683300a2327", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46720db72cadfb85501e102d94e06683300a2327", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46720db72cadfb85501e102d94e06683300a2327/comments", "author": null, "committer": null, "parents": [{"sha": "297363774e6a5dca2f46a85ab086f1d9e59431ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/297363774e6a5dca2f46a85ab086f1d9e59431ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/297363774e6a5dca2f46a85ab086f1d9e59431ac"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "ae1bd1026cd40c19e24f941c27135082c6d02135", "filename": "gcc/testsuite/gcc.target/arm/pure-code/pr96770.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46720db72cadfb85501e102d94e06683300a2327/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpr96770.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46720db72cadfb85501e102d94e06683300a2327/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpr96770.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpr96770.c?ref=46720db72cadfb85501e102d94e06683300a2327", "patch": "@@ -5,17 +5,17 @@ int arr[1000];\n int *f4 (void) { return &arr[1]; }\n \n /* For cortex-m0 (thumb-1/v6m), we generate 4 movs with upper/lower:#arr+4.  */\n-/* { dg-final { scan-assembler-times \"\\\\+4\" 4 { target { { ! arm_thumb1_movt_ok } && { ! arm_thumb2_ok } } } } } */\n+/* { dg-final { scan-assembler-times \"arr\\\\+4\" 4 { target { { ! arm_thumb1_movt_ok } && { ! arm_thumb2_ok } } } } } */\n \n /* For cortex-m with movt/movw (thumb-1/v8m.base or thumb-2), we\n    generate a movt/movw pair with upper/lower:#arr+4.  */\n-/* { dg-final { scan-assembler-times \"\\\\+4\" 2 { target { arm_thumb1_movt_ok || arm_thumb2_ok } } } } */\n+/* { dg-final { scan-assembler-times \"arr\\\\+4\" 2 { target { arm_thumb1_movt_ok || arm_thumb2_ok } } } } */\n \n int *f5 (void) { return &arr[80]; }\n \n /* For cortex-m0 (thumb-1/v6m), we generate 1 ldr from rodata pointer to arr+320.  */\n-/* { dg-final { scan-assembler-times \"\\\\+320\" 1 { target { { ! arm_thumb1_movt_ok } && { ! arm_thumb2_ok } } } } } */\n+/* { dg-final { scan-assembler-times \"arr\\\\+320\" 1 { target { { ! arm_thumb1_movt_ok } && { ! arm_thumb2_ok } } } } } */\n \n /* For cortex-m with movt/movw (thumb-1/v8m.base or thumb-2), we\n    generate a movt/movw pair with upper/lower:arr+320.  */\n-/* { dg-final { scan-assembler-times \"\\\\+320\" 2 { target { arm_thumb1_movt_ok || arm_thumb2_ok } } } } */\n+/* { dg-final { scan-assembler-times \"arr\\\\+320\" 2 { target { arm_thumb1_movt_ok || arm_thumb2_ok } } } } */"}]}