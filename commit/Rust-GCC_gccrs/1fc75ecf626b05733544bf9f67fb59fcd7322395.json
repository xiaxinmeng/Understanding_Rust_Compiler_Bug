{"sha": "1fc75ecf626b05733544bf9f67fb59fcd7322395", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZjNzVlY2Y2MjZiMDU3MzM1NDRiZjlmNjdmYjU5ZmNkNzMyMjM5NQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-11-14T11:41:58Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-11-14T11:41:58Z"}, "message": "[Ada] Missing constraint check on if-expression returning a string\n\nIf the context of an if-expression is constrained, its dependent\nexpressions must obey the constraints of the expected type. Prior to\nthis patch, this check was performed only for scalar types, by means of\nan added conversion.  This is now enforced on all types by means of a\nqualified expression on each dependent expression.\n\nCompiling ce.adb must yield:\n\n  ce.adb:33:21: warning: string length wrong for type \"T\" defined at line 5\n  ce.adb:33:21: warning: \"Constraint_Error\" will be raised at run time\n  ce.adb:37:39: warning: string length wrong for type \"T\" defined at line 5\n  ce.adb:37:39: warning: \"Constraint_Error\" will be raised at run time\n  ce.adb:38:39: warning: too few elements for type \"T\" defined at line 5\n  ce.adb:38:39: warning: \"Constraint_Error\" will be raised at run time\n  ce.adb:39:39: warning: too few elements for type \"T\" defined at line 5\n  ce.adb:39:39: warning: \"Constraint_Error\" will be raised at run time\n----\nwith Text_IO;\nprocedure Ce is\n\n  package Aerodrome_Identifier is\n    subtype T is String (1 .. 4);\n  end;\n\n  package Flight_Identifier is\n    type T is\n     record\n       ADEP                : Aerodrome_Identifier.T;\n       Counter             : Positive;\n     end record;\n  end;\n\n  procedure Assign (X : Flight_Identifier.T) is\n  begin\n    Text_IO.Put_Line (X.ADEP); -- outputs the 4 zero bytes\n  end;\n\n  function Env_Aerodrome_Value return String is (\"ABCD\");\n  function Void return String is (\"What?\");\n  function Void2 return String is\n  begin\n    return \"who knows\";\n  end;\n  Here : Aerodrome_Identifier.T;\n  type Four is range 1 .. 4;\n  Nothing : String := \"\";\nbegin\n  Assign((ADEP =>\n       (if (Void'Length = 5)\n               then \"\" --!! This value should always raise Constraint_Error !!\n                  else Env_Aerodrome_Value & \"!\"),\n        Counter=> 17));\n\n   Here := (if (Void'Length = 5) then \"\" else Env_Aerodrome_Value);\n   Here := (if (Void'Length = 5) then Nothing else Env_Aerodrome_Value);\n   Here := (if (Void'Length = 5) then Void2 (1..3) else Void2 & Void);\nend;\n----\n\n2018-11-14  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_If_Expression): Verify that the subtypes\n\tof all dependent expressions obey the constraints of the\n\texpected type for the if-expression.\n\t(Analyze_Expression): Only add qualificiation to the dependent\n\texpressions when the context type is constrained. Small\n\tadjustment to previous patch.\n\nFrom-SVN: r266128", "tree": {"sha": "5098ddca40d7a18528fabd4c09693f9d6c51ec56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5098ddca40d7a18528fabd4c09693f9d6c51ec56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fc75ecf626b05733544bf9f67fb59fcd7322395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fc75ecf626b05733544bf9f67fb59fcd7322395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fc75ecf626b05733544bf9f67fb59fcd7322395", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fc75ecf626b05733544bf9f67fb59fcd7322395/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bfb1147ca896f985a2268b7b6a0ba4b36394f8cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfb1147ca896f985a2268b7b6a0ba4b36394f8cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfb1147ca896f985a2268b7b6a0ba4b36394f8cc"}], "stats": {"total": 60, "additions": 41, "deletions": 19}, "files": [{"sha": "88324854872a5f6c36db4a2a223f4dddcd6d7bc6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc75ecf626b05733544bf9f67fb59fcd7322395/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc75ecf626b05733544bf9f67fb59fcd7322395/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1fc75ecf626b05733544bf9f67fb59fcd7322395", "patch": "@@ -1,3 +1,12 @@\n+2018-11-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_If_Expression): Verify that the subtypes\n+\tof all dependent expressions obey the constraints of the\n+\texpected type for the if-expression.\n+\t(Analyze_Expression): Only add qualificiation to the dependent\n+\texpressions when the context type is constrained. Small\n+\tadjustment to previous patch.\n+\n 2018-11-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_prag.adb (Process_Compile_Time_Warning_Or_Error): Don't"}, {"sha": "eb1709846fb1d18781454e4b09b17cb2535f61e6", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc75ecf626b05733544bf9f67fb59fcd7322395/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc75ecf626b05733544bf9f67fb59fcd7322395/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=1fc75ecf626b05733544bf9f67fb59fcd7322395", "patch": "@@ -8460,8 +8460,35 @@ package body Sem_Res is\n       Condition : constant Node_Id := First (Expressions (N));\n       Then_Expr : Node_Id;\n       Else_Expr : Node_Id;\n-      Else_Typ  : Entity_Id;\n-      Then_Typ  : Entity_Id;\n+\n+      procedure Apply_Check (Expr : Node_Id);\n+      --  When a dependent expression is of a subtype different from the\n+      --  context subtype, then insert a qualification  to ensure the\n+      --  generation of a constraint check. This was previously done only\n+      --  for scalar types.\n+\n+      -----------------\n+      -- Apply_Check --\n+      -----------------\n+\n+      procedure Apply_Check (Expr : Node_Id) is\n+         Loc       : constant Source_Ptr := Sloc (Expr);\n+         Expr_Type : constant Entity_Id := Etype (Expr);\n+      begin\n+\n+         if Expr_Type /= Typ\n+            and then not Is_Tagged_Type (Typ)\n+            and then not Is_Access_Type (Typ)\n+            and then Is_Constrained (Typ)\n+            and then not Inside_A_Generic\n+         then\n+            Rewrite (Expr,\n+                 Make_Qualified_Expression (Loc,\n+                   Subtype_Mark => New_Occurrence_Of (Typ, Loc),\n+                   Expression   => Relocate_Node (Expr)));\n+            Analyze_And_Resolve (Expr, Typ);\n+         end if;\n+      end Apply_Check;\n \n    begin\n       --  Defend against malformed expressions\n@@ -8480,17 +8507,7 @@ package body Sem_Res is\n \n       Resolve (Condition, Any_Boolean);\n       Resolve (Then_Expr, Typ);\n-      Then_Typ := Etype (Then_Expr);\n-\n-      --  When the \"then\" expression is of a scalar subtype different from the\n-      --  result subtype, then insert a conversion to ensure the generation of\n-      --  a constraint check. The same is done for the else part below, again\n-      --  comparing subtypes rather than base types.\n-\n-      if Is_Scalar_Type (Then_Typ) and then Then_Typ /= Typ then\n-         Rewrite (Then_Expr, Convert_To (Typ, Then_Expr));\n-         Analyze_And_Resolve (Then_Expr, Typ);\n-      end if;\n+      Apply_Check (Then_Expr);\n \n       --  If ELSE expression present, just resolve using the determined type\n       --  If type is universal, resolve to any member of the class.\n@@ -8506,16 +8523,12 @@ package body Sem_Res is\n             Resolve (Else_Expr, Typ);\n          end if;\n \n-         Else_Typ := Etype (Else_Expr);\n-\n-         if Is_Scalar_Type (Else_Typ) and then Else_Typ /= Typ then\n-            Rewrite (Else_Expr, Convert_To (Typ, Else_Expr));\n-            Analyze_And_Resolve (Else_Expr, Typ);\n+         Apply_Check (Else_Expr);\n \n          --  Apply RM 4.5.7 (17/3): whether the expression is statically or\n          --  dynamically tagged must be known statically.\n \n-         elsif Is_Tagged_Type (Typ) and then not Is_Class_Wide_Type (Typ) then\n+         if Is_Tagged_Type (Typ) and then not Is_Class_Wide_Type (Typ) then\n             if Is_Dynamically_Tagged (Then_Expr) /=\n                Is_Dynamically_Tagged (Else_Expr)\n             then"}]}