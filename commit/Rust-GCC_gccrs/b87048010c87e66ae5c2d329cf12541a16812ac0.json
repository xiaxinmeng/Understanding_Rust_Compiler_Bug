{"sha": "b87048010c87e66ae5c2d329cf12541a16812ac0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg3MDQ4MDEwYzg3ZTY2YWU1YzJkMzI5Y2YxMjU0MWExNjgxMmFjMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-08-28T06:23:22Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-08-28T06:23:22Z"}, "message": "function.c: Include rtl-iter.h\n\ngcc/\n\t* function.c: Include rtl-iter.h\n\t(instantiate_virtual_regs_in_rtx): Turn from being a for_each_rtx\n\tcallback to being a function that examines each subrtx itself.\n\tReturn the changed flag.\n\t(instantiate_virtual_regs_in_insn, instantiate_decl_rtl)\n\t(instantiate_virtual_regs): Update calls accordingly.\n\nFrom-SVN: r214640", "tree": {"sha": "f2adbb9cc903ddca4437a2a82db4301c15e3cf81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2adbb9cc903ddca4437a2a82db4301c15e3cf81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b87048010c87e66ae5c2d329cf12541a16812ac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b87048010c87e66ae5c2d329cf12541a16812ac0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b87048010c87e66ae5c2d329cf12541a16812ac0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b87048010c87e66ae5c2d329cf12541a16812ac0/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "effb8a2646519179909386eccc4bc91dcb85248f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/effb8a2646519179909386eccc4bc91dcb85248f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/effb8a2646519179909386eccc4bc91dcb85248f"}], "stats": {"total": 115, "additions": 62, "deletions": 53}, "files": [{"sha": "7fa795a4115b47b38e43588893e15d58676b2ef1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87048010c87e66ae5c2d329cf12541a16812ac0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87048010c87e66ae5c2d329cf12541a16812ac0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b87048010c87e66ae5c2d329cf12541a16812ac0", "patch": "@@ -1,3 +1,12 @@\n+2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* function.c: Include rtl-iter.h\n+\t(instantiate_virtual_regs_in_rtx): Turn from being a for_each_rtx\n+\tcallback to being a function that examines each subrtx itself.\n+\tReturn the changed flag.\n+\t(instantiate_virtual_regs_in_insn, instantiate_decl_rtl)\n+\t(instantiate_virtual_regs): Update calls accordingly.\n+\n 2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* final.c: Include rtl-iter.h."}, {"sha": "496339bdd60d52ab5ceb8e1016bc2a1c993ed2a6", "filename": "gcc/function.c", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87048010c87e66ae5c2d329cf12541a16812ac0/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87048010c87e66ae5c2d329cf12541a16812ac0/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=b87048010c87e66ae5c2d329cf12541a16812ac0", "patch": "@@ -65,6 +65,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"bb-reorder.h\"\n #include \"shrink-wrap.h\"\n #include \"toplev.h\"\n+#include \"rtl-iter.h\"\n \n /* So we can assign to cfun in this file.  */\n #undef cfun\n@@ -1431,57 +1432,60 @@ instantiate_new_reg (rtx x, HOST_WIDE_INT *poffset)\n   return new_rtx;\n }\n \n-/* A subroutine of instantiate_virtual_regs, called via for_each_rtx.\n-   Instantiate any virtual registers present inside of *LOC.  The expression\n-   is simplified, as much as possible, but is not to be considered \"valid\"\n-   in any sense implied by the target.  If any change is made, set CHANGED\n-   to true.  */\n+/* A subroutine of instantiate_virtual_regs.  Instantiate any virtual\n+   registers present inside of *LOC.  The expression is simplified,\n+   as much as possible, but is not to be considered \"valid\" in any sense\n+   implied by the target.  Return true if any change is made.  */\n \n-static int\n-instantiate_virtual_regs_in_rtx (rtx *loc, void *data)\n+static bool\n+instantiate_virtual_regs_in_rtx (rtx *loc)\n {\n-  HOST_WIDE_INT offset;\n-  bool *changed = (bool *) data;\n-  rtx x, new_rtx;\n-\n-  x = *loc;\n-  if (x == 0)\n-    return 0;\n-\n-  switch (GET_CODE (x))\n+  if (!*loc)\n+    return false;\n+  bool changed = false;\n+  subrtx_ptr_iterator::array_type array;\n+  FOR_EACH_SUBRTX_PTR (iter, array, loc, NONCONST)\n     {\n-    case REG:\n-      new_rtx = instantiate_new_reg (x, &offset);\n-      if (new_rtx)\n+      rtx *loc = *iter;\n+      if (rtx x = *loc)\n \t{\n-\t  *loc = plus_constant (GET_MODE (x), new_rtx, offset);\n-\t  if (changed)\n-\t    *changed = true;\n-\t}\n-      return -1;\n+\t  rtx new_rtx;\n+\t  HOST_WIDE_INT offset;\n+\t  switch (GET_CODE (x))\n+\t    {\n+\t    case REG:\n+\t      new_rtx = instantiate_new_reg (x, &offset);\n+\t      if (new_rtx)\n+\t\t{\n+\t\t  *loc = plus_constant (GET_MODE (x), new_rtx, offset);\n+\t\t  changed = true;\n+\t\t}\n+\t      iter.skip_subrtxes ();\n+\t      break;\n \n-    case PLUS:\n-      new_rtx = instantiate_new_reg (XEXP (x, 0), &offset);\n-      if (new_rtx)\n-\t{\n-\t  XEXP (x, 0) = new_rtx;\n-\t  *loc = plus_constant (GET_MODE (x), x, offset, true);\n-\t  if (changed)\n-\t    *changed = true;\n-\t  return -1;\n-\t}\n+\t    case PLUS:\n+\t      new_rtx = instantiate_new_reg (XEXP (x, 0), &offset);\n+\t      if (new_rtx)\n+\t\t{\n+\t\t  XEXP (x, 0) = new_rtx;\n+\t\t  *loc = plus_constant (GET_MODE (x), x, offset, true);\n+\t\t  changed = true;\n+\t\t  iter.skip_subrtxes ();\n+\t\t  break;\n+\t\t}\n \n-      /* FIXME -- from old code */\n-\t  /* If we have (plus (subreg (virtual-reg)) (const_int)), we know\n-\t     we can commute the PLUS and SUBREG because pointers into the\n-\t     frame are well-behaved.  */\n-      break;\n+\t      /* FIXME -- from old code */\n+\t      /* If we have (plus (subreg (virtual-reg)) (const_int)), we know\n+\t\t we can commute the PLUS and SUBREG because pointers into the\n+\t\t frame are well-behaved.  */\n+\t      break;\n \n-    default:\n-      break;\n+\t    default:\n+\t      break;\n+\t    }\n+\t}\n     }\n-\n-  return 0;\n+  return changed;\n }\n \n /* A subroutine of instantiate_virtual_regs_in_insn.  Return true if X\n@@ -1518,7 +1522,7 @@ instantiate_virtual_regs_in_insn (rtx_insn *insn)\n \t{\n \t  start_sequence ();\n \n-\t  for_each_rtx (&SET_SRC (set), instantiate_virtual_regs_in_rtx, NULL);\n+\t  instantiate_virtual_regs_in_rtx (&SET_SRC (set));\n \t  x = simplify_gen_binary (PLUS, GET_MODE (new_rtx), SET_SRC (set),\n \t\t\t\t   gen_int_mode (-offset, GET_MODE (new_rtx)));\n \t  x = force_operand (x, new_rtx);\n@@ -1621,10 +1625,8 @@ instantiate_virtual_regs_in_insn (rtx_insn *insn)\n \tcase MEM:\n \t  {\n \t    rtx addr = XEXP (x, 0);\n-\t    bool changed = false;\n \n-\t    for_each_rtx (&addr, instantiate_virtual_regs_in_rtx, &changed);\n-\t    if (!changed)\n+\t    if (!instantiate_virtual_regs_in_rtx (&addr))\n \t      continue;\n \n \t    start_sequence ();\n@@ -1790,7 +1792,7 @@ instantiate_decl_rtl (rtx x)\n \t      || REGNO (addr) > LAST_VIRTUAL_REGISTER)))\n     return;\n \n-  for_each_rtx (&XEXP (x, 0), instantiate_virtual_regs_in_rtx, NULL);\n+  instantiate_virtual_regs_in_rtx (&XEXP (x, 0));\n }\n \n /* Helper for instantiate_decls called via walk_tree: Process all decls\n@@ -1927,20 +1929,18 @@ instantiate_virtual_regs (void)\n \t    || GET_CODE (PATTERN (insn)) == ASM_INPUT)\n \t  continue;\n \telse if (DEBUG_INSN_P (insn))\n-\t  for_each_rtx (&INSN_VAR_LOCATION (insn),\n-\t\t\tinstantiate_virtual_regs_in_rtx, NULL);\n+\t  instantiate_virtual_regs_in_rtx (&INSN_VAR_LOCATION (insn));\n \telse\n \t  instantiate_virtual_regs_in_insn (insn);\n \n \tif (INSN_DELETED_P (insn))\n \t  continue;\n \n-\tfor_each_rtx (&REG_NOTES (insn), instantiate_virtual_regs_in_rtx, NULL);\n+\tinstantiate_virtual_regs_in_rtx (&REG_NOTES (insn));\n \n \t/* Instantiate any virtual registers in CALL_INSN_FUNCTION_USAGE.  */\n \tif (CALL_P (insn))\n-\t  for_each_rtx (&CALL_INSN_FUNCTION_USAGE (insn),\n-\t\t\tinstantiate_virtual_regs_in_rtx, NULL);\n+\t  instantiate_virtual_regs_in_rtx (&CALL_INSN_FUNCTION_USAGE (insn));\n       }\n \n   /* Instantiate the virtual registers in the DECLs for debugging purposes.  */"}]}