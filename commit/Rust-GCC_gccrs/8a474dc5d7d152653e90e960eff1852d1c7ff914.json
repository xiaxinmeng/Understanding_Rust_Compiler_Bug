{"sha": "8a474dc5d7d152653e90e960eff1852d1c7ff914", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE0NzRkYzVkN2QxNTI2NTNlOTBlOTYwZWZmMTg1MmQxYzdmZjkxNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-04-16T07:55:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-04-16T07:55:57Z"}, "message": "tree-ssa-ccp.c (likely_value): See if we have operands that are marked as never simulate again and return...\n\n2015-04-16  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-ccp.c (likely_value): See if we have operands that\n\tare marked as never simulate again and return CONSTANT in this\n\tcase.\n\t* tree-ssa-propagate.c (simulate_stmt): Mark stmts that do\n\tnot have any operands that will be simulated again as\n\tnot being simulated again.\n\n\t* gcc.dg/tree-ssa/ssa-ccp-36.c: New testcase.\n\t* gcc.dg/tree-ssa/pr37508.c: Adjust.\n\t* gfortran.dg/reassoc_6.f: Remove XFAIL.\n\nFrom-SVN: r222141", "tree": {"sha": "649c5ed590a9bcfcc0ac37c15b11b36688be346a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/649c5ed590a9bcfcc0ac37c15b11b36688be346a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a474dc5d7d152653e90e960eff1852d1c7ff914", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a474dc5d7d152653e90e960eff1852d1c7ff914", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a474dc5d7d152653e90e960eff1852d1c7ff914", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a474dc5d7d152653e90e960eff1852d1c7ff914/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d1cac076c9ac75a81f15e2249ff9a92a0278516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1cac076c9ac75a81f15e2249ff9a92a0278516", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d1cac076c9ac75a81f15e2249ff9a92a0278516"}], "stats": {"total": 88, "additions": 82, "deletions": 6}, "files": [{"sha": "a3a2016c99031f2b4040c79ae29e5976afa8bcd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a474dc5d7d152653e90e960eff1852d1c7ff914/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a474dc5d7d152653e90e960eff1852d1c7ff914/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a474dc5d7d152653e90e960eff1852d1c7ff914", "patch": "@@ -1,3 +1,12 @@\n+2015-04-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-ccp.c (likely_value): See if we have operands that\n+\tare marked as never simulate again and return CONSTANT in this\n+\tcase.\n+\t* tree-ssa-propagate.c (simulate_stmt): Mark stmts that do\n+\tnot have any operands that will be simulated again as\n+\tnot being simulated again.\n+\n 2015-04-15  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*cmpi<FPCMP:unord><MODEF:mode>_mixed):"}, {"sha": "2fd765cb1101a00d38b21e2285883048ca9ff0d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a474dc5d7d152653e90e960eff1852d1c7ff914/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a474dc5d7d152653e90e960eff1852d1c7ff914/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a474dc5d7d152653e90e960eff1852d1c7ff914", "patch": "@@ -1,3 +1,9 @@\n+2015-04-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-ccp-36.c: New testcase.\n+\t* gcc.dg/tree-ssa/pr37508.c: Adjust.\n+\t* gfortran.dg/reassoc_6.f: Remove XFAIL.\n+\n 2015-04-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/cpp0x/alias-decl-22.C: Adjust for error + inform change."}, {"sha": "19b54fe16e969aa31d9cf6ead7efa30006fec141", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr37508.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a474dc5d7d152653e90e960eff1852d1c7ff914/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr37508.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a474dc5d7d152653e90e960eff1852d1c7ff914/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr37508.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr37508.c?ref=8a474dc5d7d152653e90e960eff1852d1c7ff914", "patch": "@@ -21,7 +21,7 @@ int test2 (struct foo2 *x)\n {\n   if (x->i == 0)\n     return 1;\n-  else if (x->i == -1)\n+  else if (x->i == -1) /* This test is already folded to false by ccp1.  */\n     return 1;\n   return 0;\n }\n@@ -44,5 +44,5 @@ int test4 (struct foo2 *x)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Folding\" 3 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Folding\" 2 \"vrp1\" } } */\n /* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "bd72fbd6697fe237b4fcb9d0871c0fd07af64f91", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ccp-36.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a474dc5d7d152653e90e960eff1852d1c7ff914/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a474dc5d7d152653e90e960eff1852d1c7ff914/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-36.c?ref=8a474dc5d7d152653e90e960eff1852d1c7ff914", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-ccp1\" } */\n+\n+int foo (int i, int j)\n+{\n+  int x = 1;\n+  int y = i + x;\n+  int z = y - i;\n+  if (z == 1)\n+    return 1;\n+  return 2;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 1;\" \"ccp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"ccp1\" } } */"}, {"sha": "cbc36f5675b5893f92610348bd87b6ca7afb6e7c", "filename": "gcc/testsuite/gfortran.dg/reassoc_6.f", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a474dc5d7d152653e90e960eff1852d1c7ff914/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_6.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a474dc5d7d152653e90e960eff1852d1c7ff914/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_6.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_6.f?ref=8a474dc5d7d152653e90e960eff1852d1c7ff914", "patch": "@@ -16,7 +16,5 @@ subroutine test(nb,nx,r2)\n         return\n         end\n ! Verify that offset of the first element is simplified\n-! While we understand to combine x + ~x IVOPTs now messes things\n-! up by hiding that operation in casts to unsigned.\n-! { dg-final { scan-tree-dump-not \"~\" \"optimized\" { xfail *-*-* } } }\n+! { dg-final { scan-tree-dump-not \"~\" \"optimized\" } }\n ! { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "996296b4e366f8fdf1cd2830762395f6f287db63", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a474dc5d7d152653e90e960eff1852d1c7ff914/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a474dc5d7d152653e90e960eff1852d1c7ff914/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=8a474dc5d7d152653e90e960eff1852d1c7ff914", "patch": "@@ -646,6 +646,7 @@ static ccp_lattice_t\n likely_value (gimple stmt)\n {\n   bool has_constant_operand, has_undefined_operand, all_undefined_operands;\n+  bool has_nsa_operand;\n   tree use;\n   ssa_op_iter iter;\n   unsigned i;\n@@ -668,6 +669,7 @@ likely_value (gimple stmt)\n   has_constant_operand = false;\n   has_undefined_operand = false;\n   all_undefined_operands = true;\n+  has_nsa_operand = false;\n   FOR_EACH_SSA_TREE_OPERAND (use, stmt, iter, SSA_OP_USE)\n     {\n       ccp_prop_value_t *val = get_value (use);\n@@ -679,6 +681,10 @@ likely_value (gimple stmt)\n \n       if (val->lattice_val == CONSTANT)\n \thas_constant_operand = true;\n+\n+      if (SSA_NAME_IS_DEFAULT_DEF (use)\n+\t  || !prop_simulate_again_p (SSA_NAME_DEF_STMT (use)))\n+\thas_nsa_operand = true;\n     }\n \n   /* There may be constants in regular rhs operands.  For calls we\n@@ -751,8 +757,10 @@ likely_value (gimple stmt)\n \n   /* We do not consider virtual operands here -- load from read-only\n      memory may have only VARYING virtual operands, but still be\n-     constant.  */\n+     constant.  Also we can combine the stmt with definitions from\n+     operands whose definitions are not simulated again.  */\n   if (has_constant_operand\n+      || has_nsa_operand\n       || gimple_references_memory_p (stmt))\n     return CONSTANT;\n "}, {"sha": "e23da7094a4efb4fcb51f87e8f91360e7253fc0b", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a474dc5d7d152653e90e960eff1852d1c7ff914/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a474dc5d7d152653e90e960eff1852d1c7ff914/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=8a474dc5d7d152653e90e960eff1852d1c7ff914", "patch": "@@ -366,6 +366,7 @@ simulate_stmt (gimple stmt)\n \t  FOR_EACH_EDGE (e, ei, bb->succs)\n \t    add_control_edge (e);\n \t}\n+      return;\n     }\n   else if (val == SSA_PROP_INTERESTING)\n     {\n@@ -379,6 +380,45 @@ simulate_stmt (gimple stmt)\n       if (taken_edge)\n \tadd_control_edge (taken_edge);\n     }\n+\n+  /* If there are no SSA uses on the stmt whose defs are simulated\n+     again then this stmt will be never visited again.  */\n+  bool has_simulate_again_uses = false;\n+  use_operand_p use_p;\n+  ssa_op_iter iter;\n+  if (gimple_code  (stmt) == GIMPLE_PHI)\n+    {\n+      edge_iterator ei;\n+      edge e;\n+      tree arg;\n+      FOR_EACH_EDGE (e, ei, gimple_bb (stmt)->preds)\n+\tif (!(e->flags & EDGE_EXECUTABLE)\n+\t    || ((arg = PHI_ARG_DEF_FROM_EDGE (stmt, e))\n+\t\t&& TREE_CODE (arg) == SSA_NAME\n+\t\t&& !SSA_NAME_IS_DEFAULT_DEF (arg)\n+\t\t&& prop_simulate_again_p (SSA_NAME_DEF_STMT (arg))))\n+\t  {\n+\t    has_simulate_again_uses = true;\n+\t    break;\n+\t  }\n+    }\n+  else\n+    FOR_EACH_SSA_USE_OPERAND (use_p, stmt, iter, SSA_OP_USE)\n+      {\n+\tgimple def_stmt = SSA_NAME_DEF_STMT (USE_FROM_PTR (use_p));\n+\tif (!gimple_nop_p (def_stmt)\n+\t    && prop_simulate_again_p (def_stmt))\n+\t  {\n+\t    has_simulate_again_uses = true;\n+\t    break;\n+\t  }\n+      }\n+  if (!has_simulate_again_uses)\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\tfprintf (dump_file, \"marking stmt to be not simulated again\\n\");\n+      prop_set_simulate_again (stmt, false);\n+    }\n }\n \n /* Process an SSA edge worklist.  WORKLIST is the SSA edge worklist to"}]}