{"sha": "81342e95827f77c0917dd7a9fd54ac9729439c8e", "node_id": "C_kwDOANBUbNoAKDgxMzQyZTk1ODI3Zjc3YzA5MTdkZDdhOWZkNTRhYzk3Mjk0MzljOGU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-28T09:38:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-28T13:45:22Z"}, "message": "middle-end/84407 - honor -frounding-math for int to float conversion\n\nThis makes us honor -frounding-math for integer to float conversions\nand avoid constant folding when such conversion is not exact.\n\n2021-10-28  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/84407\n\t* fold-const.c (fold_convert_const): Avoid int to float\n\tconstant folding with -frounding-math and inexact result.\n\t* simplify-rtx.c (simplify_const_unary_operation): Likewise\n\tfor both float and unsigned_float.\n\n\t* gcc.dg/torture/fp-uint64-convert-double-1.c: New testcase.\n\t* gcc.dg/torture/fp-uint64-convert-double-2.c: Likewise.", "tree": {"sha": "2e1dd82b395637f69ac307d1e0414a778aaef6d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e1dd82b395637f69ac307d1e0414a778aaef6d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81342e95827f77c0917dd7a9fd54ac9729439c8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81342e95827f77c0917dd7a9fd54ac9729439c8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81342e95827f77c0917dd7a9fd54ac9729439c8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81342e95827f77c0917dd7a9fd54ac9729439c8e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "113dab2b9d511f3aadc30a6a921fc30bd5f93706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113dab2b9d511f3aadc30a6a921fc30bd5f93706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113dab2b9d511f3aadc30a6a921fc30bd5f93706"}], "stats": {"total": 190, "additions": 189, "deletions": 1}, "files": [{"sha": "c7daf8711256674a14981c4ca3711cb663cfc4cc", "filename": "gcc/fold-const.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81342e95827f77c0917dd7a9fd54ac9729439c8e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81342e95827f77c0917dd7a9fd54ac9729439c8e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=81342e95827f77c0917dd7a9fd54ac9729439c8e", "patch": "@@ -2290,7 +2290,20 @@ fold_convert_const (enum tree_code code, tree type, tree arg1)\n   else if (TREE_CODE (type) == REAL_TYPE)\n     {\n       if (TREE_CODE (arg1) == INTEGER_CST)\n-\treturn build_real_from_int_cst (type, arg1);\n+\t{\n+\t  tree res = build_real_from_int_cst (type, arg1);\n+\t  /* Avoid the folding if flag_rounding_math is on and the\n+\t     conversion is not exact.  */\n+\t  if (HONOR_SIGN_DEPENDENT_ROUNDING (type))\n+\t    {\n+\t      bool fail = false;\n+\t      wide_int w = real_to_integer (&TREE_REAL_CST (res), &fail,\n+\t\t\t\t\t    TYPE_PRECISION (TREE_TYPE (arg1)));\n+\t      if (fail || wi::ne_p (w, wi::to_wide (arg1)))\n+\t\treturn NULL_TREE;\n+\t    }\n+\t  return res;\n+\t}\n       else if (TREE_CODE (arg1) == REAL_CST)\n \treturn fold_convert_const_real_from_real (type, arg1);\n       else if (TREE_CODE (arg1) == FIXED_CST)"}, {"sha": "a060f1bbce01f4afb4ffa01ccc808c07975ba81c", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81342e95827f77c0917dd7a9fd54ac9729439c8e/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81342e95827f77c0917dd7a9fd54ac9729439c8e/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=81342e95827f77c0917dd7a9fd54ac9729439c8e", "patch": "@@ -1917,6 +1917,19 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n         return 0;\n \n       d = real_value_truncate (mode, d);\n+\n+      /* Avoid the folding if flag_rounding_math is on and the\n+\t conversion is not exact.  */\n+      if (HONOR_SIGN_DEPENDENT_ROUNDING (mode))\n+\t{\n+\t  bool fail = false;\n+\t  wide_int w = real_to_integer (&d, &fail,\n+\t\t\t\t\tGET_MODE_PRECISION\n+\t\t\t\t\t  (as_a <scalar_int_mode> (op_mode)));\n+\t  if (fail || wi::ne_p (w, wide_int (rtx_mode_t (op, op_mode))))\n+\t    return 0;\n+\t}\n+\n       return const_double_from_real_value (d, mode);\n     }\n   else if (code == UNSIGNED_FLOAT && CONST_SCALAR_INT_P (op))\n@@ -1941,6 +1954,19 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n         return 0;\n \n       d = real_value_truncate (mode, d);\n+\n+      /* Avoid the folding if flag_rounding_math is on and the\n+\t conversion is not exact.  */\n+      if (HONOR_SIGN_DEPENDENT_ROUNDING (mode))\n+\t{\n+\t  bool fail = false;\n+\t  wide_int w = real_to_integer (&d, &fail,\n+\t\t\t\t\tGET_MODE_PRECISION\n+\t\t\t\t\t  (as_a <scalar_int_mode> (op_mode)));\n+\t  if (fail || wi::ne_p (w, wide_int (rtx_mode_t (op, op_mode))))\n+\t    return 0;\n+\t}\n+\n       return const_double_from_real_value (d, mode);\n     }\n "}, {"sha": "b40a16a225732cb2cc41e61b998d185ffe8917a5", "filename": "gcc/testsuite/gcc.dg/torture/fp-uint64-convert-double-1.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81342e95827f77c0917dd7a9fd54ac9729439c8e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-uint64-convert-double-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81342e95827f77c0917dd7a9fd54ac9729439c8e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-uint64-convert-double-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-uint64-convert-double-1.c?ref=81342e95827f77c0917dd7a9fd54ac9729439c8e", "patch": "@@ -0,0 +1,74 @@\n+/* PR84407 */\n+/* { dg-do run } */\n+/* { dg-require-effective-target fenv } */\n+/* { dg-additional-options \"-frounding-math\" } */\n+\n+#include <fenv.h>\n+#include <stdlib.h>\n+\n+void __attribute__((noipa))\n+fooa ()\n+{\n+#if __DBL_MANT_DIG__ == 53\n+#ifdef FE_TONEAREST\n+  fesetround(FE_TONEAREST);\n+  __UINT64_TYPE__ x = 0x7fffffffffffffff;\n+  double f = x;\n+  if (f != 0x1p+63)\n+    abort ();\n+#endif\n+#endif\n+}\n+\n+void __attribute__((noipa))\n+foob ()\n+{\n+#if __DBL_MANT_DIG__ == 53\n+#ifdef FE_DOWNWARD\n+  fesetround(FE_DOWNWARD);\n+  __UINT64_TYPE__ x = 0x7fffffffffffffff;\n+  double f = x;\n+  if (f != 0x1.fffffffffffffp+62)\n+    abort ();\n+#endif\n+#endif\n+}\n+\n+void __attribute__((noipa))\n+fooc ()\n+{\n+#if __DBL_MANT_DIG__ == 53\n+#ifdef FE_UPWARD\n+  fesetround(FE_UPWARD);\n+  __UINT64_TYPE__ x = 0x7fffffffffffffff;\n+  double f = x;\n+  if (f != 0x1p+63)\n+    abort ();\n+#endif\n+#endif\n+}\n+\n+void __attribute__((noipa))\n+food ()\n+{\n+#if __DBL_MANT_DIG__ == 53\n+#ifdef FE_TOWARDZERO\n+  fesetround(FE_TOWARDZERO);\n+  __UINT64_TYPE__ x = 0x7fffffffffffffff;\n+  double f = x;\n+  if (f != 0x1.fffffffffffffp+62)\n+    abort ();\n+#endif\n+#endif\n+}\n+\n+\n+int\n+main ()\n+{\n+  fooa ();\n+  foob ();\n+  fooc ();\n+  food ();\n+  return 0;\n+}"}, {"sha": "952f96b33c92e9c6d7913fb60882693969cec049", "filename": "gcc/testsuite/gcc.dg/torture/fp-uint64-convert-double-2.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81342e95827f77c0917dd7a9fd54ac9729439c8e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-uint64-convert-double-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81342e95827f77c0917dd7a9fd54ac9729439c8e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-uint64-convert-double-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-uint64-convert-double-2.c?ref=81342e95827f77c0917dd7a9fd54ac9729439c8e", "patch": "@@ -0,0 +1,75 @@\n+/* PR84407 */\n+/* { dg-do run } */\n+/* { dg-require-effective-target fenv } */\n+/* { dg-additional-options \"-frounding-math\" } */\n+\n+#include <fenv.h>\n+#include <stdlib.h>\n+\n+void __attribute__((noipa))\n+fooa ()\n+{\n+#if __DBL_MANT_DIG__ == 53\n+#ifdef FE_TONEAREST\n+  fesetround(FE_TONEAREST);\n+  /* Large enough constant to trigger unsigned_float.  */\n+  __UINT64_TYPE__ x = 0x8000000000000001;\n+  double f = x;\n+  if (f != 0x1p+63)\n+    abort ();\n+#endif\n+#endif\n+}\n+\n+void __attribute__((noipa))\n+foob ()\n+{\n+#if __DBL_MANT_DIG__ == 53\n+#ifdef FE_DOWNWARD\n+  fesetround(FE_DOWNWARD);\n+  __UINT64_TYPE__ x = 0x8000000000000001;\n+  double f = x;\n+  if (f != 0x1p+63)\n+    abort ();\n+#endif\n+#endif\n+}\n+\n+void __attribute__((noipa))\n+fooc ()\n+{\n+#if __DBL_MANT_DIG__ == 53\n+#ifdef FE_UPWARD\n+  fesetround(FE_UPWARD);\n+  __UINT64_TYPE__ x = 0x8000000000000001;\n+  double f = x;\n+  if (f != 0x1.0000000000001p+63)\n+    abort ();\n+#endif\n+#endif\n+}\n+\n+void __attribute__((noipa))\n+food ()\n+{\n+#if __DBL_MANT_DIG__ == 53\n+#ifdef FE_TOWARDZERO\n+  fesetround(FE_TOWARDZERO);\n+  __UINT64_TYPE__ x = 0x8000000000000001;\n+  double f = x;\n+  if (f != 0x1p+63)\n+    abort ();\n+#endif\n+#endif\n+}\n+\n+\n+int\n+main ()\n+{\n+  fooa ();\n+  foob ();\n+  fooc ();\n+  food ();\n+  return 0;\n+}"}]}