{"sha": "7fcd29e08c49eff92770f7e50895dcfe3d306479", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZjZDI5ZTA4YzQ5ZWZmOTI3NzBmN2U1MDg5NWRjZmUzZDMwNjQ3OQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2013-01-04T09:28:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-04T09:28:49Z"}, "message": "types.ads, [...]: Minor reformatting.\n\n2013-01-04  Robert Dewar  <dewar@adacore.com>\n\n\t* types.ads, prj-conf.adb, par-tchk.adb: Minor reformatting.\n\n2013-01-04  Robert Dewar  <dewar@adacore.com>\n\n\t* par-ch6.adb (P_Subprogram): Better handling of missing IS\n\tafter expression function.\n\t* par-util.adb (No_Constraint): Improve handling to avoid bad warnings.\n\n2013-01-04  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_util.ads, exp_util.adb (Insert_Actions): In expression with\n\tactions case, new actions are appended to the sequence rather than\n\tprepended.\n\n2013-01-04  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Document -gnatw.d/w.D (does no apply in VMS mode).\n\t* usage.adb: Add lines for -gnatw.d/w.D switches.\n\t* warnsw.adb: Minor fixes (some missing cases of setting\n\tWarning_Doc_Switch). Reject -gnatw.d and -gnatw.D in VMS mode.\n\nFrom-SVN: r194895", "tree": {"sha": "366ebbf2aee44184c69781fa0ee3e11affa5e3e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/366ebbf2aee44184c69781fa0ee3e11affa5e3e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fcd29e08c49eff92770f7e50895dcfe3d306479", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fcd29e08c49eff92770f7e50895dcfe3d306479", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fcd29e08c49eff92770f7e50895dcfe3d306479", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fcd29e08c49eff92770f7e50895dcfe3d306479/comments", "author": null, "committer": null, "parents": [{"sha": "67b8ac46a606b677b20b3834beb2d24c27c86e8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b8ac46a606b677b20b3834beb2d24c27c86e8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67b8ac46a606b677b20b3834beb2d24c27c86e8c"}], "stats": {"total": 140, "additions": 113, "deletions": 27}, "files": [{"sha": "1a8e0daefc8248246dc0b0cc1aaa28b8e33f449f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7fcd29e08c49eff92770f7e50895dcfe3d306479", "patch": "@@ -1,3 +1,26 @@\n+2013-01-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* types.ads, prj-conf.adb, par-tchk.adb: Minor reformatting.\n+\n+2013-01-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par-ch6.adb (P_Subprogram): Better handling of missing IS\n+\tafter expression function.\n+\t* par-util.adb (No_Constraint): Improve handling to avoid bad warnings.\n+\n+2013-01-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_util.ads, exp_util.adb (Insert_Actions): In expression with\n+\tactions case, new actions are appended to the sequence rather than\n+\tprepended.\n+\n+2013-01-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Document -gnatw.d/w.D (does no apply in VMS mode).\n+\t* usage.adb: Add lines for -gnatw.d/w.D switches.\n+\t* warnsw.adb: Minor fixes (some missing cases of setting\n+\tWarning_Doc_Switch). Reject -gnatw.d and -gnatw.D in VMS mode.\n+\n 2013-01-04  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_util.adb (Remove_Side_Effects): Make sure scope suppress"}, {"sha": "2ca174eed909c0b24afb29a7d57e1afc9c254220", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=7fcd29e08c49eff92770f7e50895dcfe3d306479", "patch": "@@ -3138,7 +3138,7 @@ package body Exp_Util is\n         and then not Is_Frozen (Current_Scope)\n       then\n          if No (Scope_Stack.Table\n-           (Scope_Stack.Last).Pending_Freeze_Actions)\n+                  (Scope_Stack.Last).Pending_Freeze_Actions)\n          then\n             Scope_Stack.Table (Scope_Stack.Last).Pending_Freeze_Actions :=\n               Ins_Actions;\n@@ -3306,13 +3306,13 @@ package body Exp_Util is\n                return;\n \n             --  Case of appearing within an Expressions_With_Actions node. We\n-            --  prepend the actions to the list of actions already there, if\n+            --  append the actions to the list of actions already there, if\n             --  the node has not been analyzed yet. Otherwise find insertion\n             --  location further up the tree.\n \n             when N_Expression_With_Actions =>\n                if not Analyzed (P) then\n-                  Prepend_List (Ins_Actions, Actions (P));\n+                  Append_List (Ins_Actions, Actions (P));\n                   return;\n                end if;\n "}, {"sha": "339fd4396a13ff58b9a290777505398ae7fe0b0d", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=7fcd29e08c49eff92770f7e50895dcfe3d306479", "patch": "@@ -75,6 +75,9 @@ package Exp_Util is\n    --    expansion of the N_If_Expression node rewrites the node so that the\n    --    actions can be positioned normally.\n \n+   --    For actions coming from expansion of the expression in an expression\n+   --    with actions node, the action is appended to the list of actions.\n+\n    --  Basically what we do is to climb up to the tree looking for the\n    --  proper insertion point, as described by one of the above cases,\n    --  and then insert the appropriate action or actions."}, {"sha": "76e90a6c7f2842b6271b0d80c7fa51491fb095ad", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=7fcd29e08c49eff92770f7e50895dcfe3d306479", "patch": "@@ -5214,6 +5214,9 @@ individually controlled.  The warnings that are not turned on by this\n switch are\n @option{-gnatwd} (implicit dereferencing),\n @option{-gnatwh} (hiding),\n+@ifclear VMS\n+@option{-gnatw.d} (tag warnings with -gnatw switch)\n+@end ifclear\n @option{-gnatw.h} (holes (gaps) in record layouts)\n @option{-gnatw.i} (overlapping actuals),\n @option{-gnatw.k} (redefinition of names in standard),\n@@ -5362,6 +5365,24 @@ this warning option.\n This switch suppresses warnings for implicit dereferences in\n indexed components, slices, and selected components.\n \n+@ifclear vms\n+@item -gnatw.d\n+@emph{Activate tagging of warning messages.}\n+@cindex @option{-gnatw.d} (@command{gcc})\n+If this switch is set, then warning messages are tagged, either with\n+the string ``@option{-gnatw?}'' showing which switch controls the warning,\n+or with ``[enabled by default]'' if the warning is not under control of a\n+specific @option{-gnatw?} switch. This mode is off by default, and is not\n+affected by the use of @code{-gnatwa}.\n+\n+@item -gnatw.D\n+@emph{Deactivate tagging of warning messages.}\n+@cindex @option{-gnatw.d} (@command{gcc})\n+If this switch is set, then warning messages return to the default\n+mode in which warnings are not tagged as described above for\n+@code{-gnatw.d}.\n+@end ifclear\n+\n @item -gnatwe\n @emph{Treat warnings and style checks as errors.}\n @cindex @option{-gnatwe} (@command{gcc})"}, {"sha": "74736ceb4aec163db4fa66961d44eadf3367b75f", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=7fcd29e08c49eff92770f7e50895dcfe3d306479", "patch": "@@ -592,15 +592,26 @@ package body Ch6 is\n          elsif Aspect_Specifications_Present then\n             goto Subprogram_Declaration;\n \n-         --  Here we have a missing IS or missing semicolon, we always guess\n-         --  a missing semicolon, since we are pretty good at fixing up a\n-         --  semicolon which should really be an IS\n+         --  Here we have a missing IS or missing semicolon\n \n          else\n-            Error_Msg_AP -- CODEFIX\n-              (\"|missing \"\";\"\"\");\n-            SIS_Missing_Semicolon_Message := Get_Msg_Id;\n-            goto Subprogram_Declaration;\n+            --  If the next token is a left paren at the start of a line, then\n+            --  this is almost certainly the start of the expression for an\n+            --  expression function, so in this case guess a missing IS.\n+\n+            if Token = Tok_Left_Paren and then Token_Is_At_Start_Of_Line then\n+               Error_Msg_AP -- CODEFIX\n+                 (\"missing IS\");\n+\n+            --  In all other cases, we guess a missing semicolon, since we are\n+            --  good at fixing up a semicolon which should really be an IS.\n+\n+            else\n+               Error_Msg_AP -- CODEFIX\n+                 (\"|missing \"\";\"\"\");\n+               SIS_Missing_Semicolon_Message := Get_Msg_Id;\n+               goto Subprogram_Declaration;\n+            end if;\n          end if;\n       end if;\n "}, {"sha": "eefd7b4302ef53d0c517e2b3d8535941564f6292", "filename": "gcc/ada/par-tchk.adb", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Fpar-tchk.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Fpar-tchk.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-tchk.adb?ref=7fcd29e08c49eff92770f7e50895dcfe3d306479", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -452,10 +452,10 @@ package body Tchk is\n          Scan;\n          return;\n \n-      --  An interesting little kludge here. If the previous token is a\n-      --  semicolon, then there is no way that we can legitimately need another\n-      --  semicolon. This could only arise in an error situation where an error\n-      --  has already been signalled. By simply ignoring the request for a\n+      --  An interesting little kludge. If the previous token is a semicolon,\n+      --  then there is no way that we can legitimately need another semicolon.\n+      --  This could only arise in an error situation where an error has\n+      --  already been signalled. By simply ignoring the request for a\n       --  semicolon in this case, we avoid some spurious missing semicolon\n       --  messages.\n \n@@ -474,9 +474,7 @@ package body Tchk is\n       --  Deal with pragma. If pragma is not at start of line, it is considered\n       --  misplaced otherwise we treat it as a normal missing semicolon case.\n \n-      elsif Token = Tok_Pragma\n-        and then not Token_Is_At_Start_Of_Line\n-      then\n+      elsif Token = Tok_Pragma and then not Token_Is_At_Start_Of_Line then\n          P_Pragmas_Misplaced;\n \n          if Token = Tok_Semicolon then"}, {"sha": "e18801f024fc572ec46df5ff09190400d538d969", "filename": "gcc/ada/par-util.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Fpar-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Fpar-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-util.adb?ref=7fcd29e08c49eff92770f7e50895dcfe3d306479", "patch": "@@ -635,6 +635,15 @@ package body Util is\n \n    procedure No_Constraint is\n    begin\n+      --  If next token is at start of line, don't object, it seems relatively\n+      --  unlikely that a constraint would be on its own starting a line.\n+\n+      if Token_Is_At_Start_Of_Line then\n+         return;\n+      end if;\n+\n+      --  Otherwise if we have a token that could start a constraint, object\n+\n       if Token in Token_Class_Consk then\n          Error_Msg_SC (\"constraint not allowed here\");\n          Discard_Junk_Node (P_Constraint_Opt);"}, {"sha": "d64c78b3bfca818aad28320d7f9bc8875159223f", "filename": "gcc/ada/prj-conf.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Fprj-conf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Fprj-conf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-conf.adb?ref=7fcd29e08c49eff92770f7e50895dcfe3d306479", "patch": "@@ -688,9 +688,9 @@ package body Prj.Conf is\n                   if Switch.Value /= No_Name then\n                      Get_Name_String (Switch.Value);\n \n-                     if Conf_File_Name'Length = 0 and then\n-                        Name_Len > 9 and then\n-                        Name_Buffer (1 .. 9) = \"--config=\"\n+                     if Conf_File_Name'Length = 0\n+                       and then Name_Len > 9\n+                       and then Name_Buffer (1 .. 9) = \"--config=\"\n                      then\n                         Conf_File_Name :=\n                           new String'(Name_Buffer (10 .. Name_Len));\n@@ -1357,7 +1357,7 @@ package body Prj.Conf is\n       end if;\n \n       if Config_File_Path = null then\n-         if (not Allow_Automatic_Generation)\n+         if not Allow_Automatic_Generation\n            and then Conf_File_Name'Length > 0\n          then\n             Raise_Invalid_Config"}, {"sha": "a63e10c97e897df65c28541f63871bd17ec50845", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=7fcd29e08c49eff92770f7e50895dcfe3d306479", "patch": "@@ -257,13 +257,13 @@ package Types is\n    --  possible values for each of the above types is disjoint so that this\n    --  distinction is possible.\n \n-   type Union_Id is new Int;\n-   --  The type in the tree for a union of possible ID values\n-\n    --  Note: it is also helpful for debugging purposes to make these ranges\n    --  distinct. If a bug leads to misidentification of a value, then it will\n    --  typically result in an out of range value and a Constraint_Error.\n \n+   type Union_Id is new Int;\n+   --  The type in the tree for a union of possible ID values\n+\n    List_Low_Bound : constant := -100_000_000;\n    --  The List_Id values are subscripts into an array of list headers which\n    --  has List_Low_Bound as its lower bound. This value is chosen so that all"}, {"sha": "f4cceb46d23033ca8ac7889cacedaf3309ef14a6", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=7fcd29e08c49eff92770f7e50895dcfe3d306479", "patch": "@@ -474,6 +474,16 @@ begin\n    Write_Line (\"        .C*  turn off warnings for unrepped components\");\n    Write_Line (\"        d    turn on warnings for implicit dereference\");\n    Write_Line (\"        D*   turn off warnings for implicit dereference\");\n+\n+   --  Switches -gnatw.d/w.D not available on VMS\n+\n+   if not OpenVMS_On_Target then\n+      Write_Line\n+        (\"        .d   turn on tagging of warnings with -gnatw switch\");\n+      Write_Line\n+        (\"        .D*  turn off tagging of warnings with -gnatw switch\");\n+   end if;\n+\n    Write_Line (\"        e    treat all warnings (but not info) as errors\");\n    Write_Line (\"        .e   turn on every optional info/warning \" &\n                                                   \"(no exceptions)\");"}, {"sha": "9f8512f18dee422e011895930d3828c4534c2a79", "filename": "gcc/ada/warnsw.adb", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Fwarnsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcd29e08c49eff92770f7e50895dcfe3d306479/gcc%2Fada%2Fwarnsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.adb?ref=7fcd29e08c49eff92770f7e50895dcfe3d306479", "patch": "@@ -53,10 +53,18 @@ package body Warnsw is\n             Warn_On_Unrepped_Components         := False;\n \n          when 'd' =>\n-            Warning_Doc_Switch                     := True;\n+            if Open_VMS_On_Target then\n+               return False;\n+            end if;\n+\n+            Warning_Doc_Switch                  := True;\n \n          when 'D' =>\n-            Warning_Doc_Switch                     := False;\n+            if Open_VMS_On_Target then\n+               return False;\n+            end if;\n+\n+            Warning_Doc_Switch                  := False;\n \n          when 'e' =>\n             Address_Clause_Overlay_Warnings     := True;\n@@ -68,6 +76,7 @@ package body Warnsw is\n             Implementation_Unit_Warnings        := True;\n             Ineffective_Inline_Warnings         := True;\n             List_Inherited_Aspects              := True;\n+            Warning_Doc_Switch                  := True;\n             Warn_On_Ada_2005_Compatibility      := True;\n             Warn_On_Ada_2012_Compatibility      := True;\n             Warn_On_All_Unread_Out_Parameters   := True;\n@@ -217,6 +226,7 @@ package body Warnsw is\n       Implementation_Unit_Warnings        := False;\n       Ineffective_Inline_Warnings         := True;\n       List_Inherited_Aspects              := False;\n+      Warning_Doc_Switch                  := False;\n       Warn_On_Ada_2005_Compatibility      := True;\n       Warn_On_Ada_2012_Compatibility      := True;\n       Warn_On_All_Unread_Out_Parameters   := False;\n@@ -296,6 +306,7 @@ package body Warnsw is\n             Implementation_Unit_Warnings        := False;\n             Ineffective_Inline_Warnings         := False;\n             List_Inherited_Aspects              := False;\n+            Warning_Doc_Switch                  := False;\n             Warn_On_Ada_2005_Compatibility      := False;\n             Warn_On_Ada_2012_Compatibility      := False;\n             Warn_On_All_Unread_Out_Parameters   := False;"}]}