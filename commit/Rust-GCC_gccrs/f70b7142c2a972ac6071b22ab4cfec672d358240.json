{"sha": "f70b7142c2a972ac6071b22ab4cfec672d358240", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcwYjcxNDJjMmE5NzJhYzYwNzFiMjJhYjRjZmVjNjcyZDM1ODI0MA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-05-04T15:50:34Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-05-04T15:50:34Z"}, "message": "Locale.java (Locale): Don't explicitly check for null.\n\n\t* java/util/Locale.java (Locale): Don't explicitly check for\n\tnull.\n\t* java/util/Hashtable.java (containsKey): Don't explicitly check\n\tfor null.\n\t(get): Likewise.\n\t* java/util/BitSet.java (and, or, xor): Don't explicitly check for\n\tnull.\n\t* java/util/zip/ZipEntry.java (ZipEntry): Don't explicitly check\n\tfor null.\n\t* java/text/StringCharacterIterator.java\n\t(StringCharacterIterator): Don't check for null.\n\t* java/text/ChoiceFormat.java (setChoices): Don't explicitly check\n\tfor null pointer.\n\t* java/net/MulticastSocket.java (joinGroup): Don't explicitly\n\tcheck for null pointer.\n\t(leaveGroup): Likewise.\n\t* java/net/DatagramPacket.java (DatagramPacket): Removed erroneous\n\tcomment.\n\t(setData): Likewise.\n\t* java/lang/ThreadGroup.java (ThreadGroup): Don't explicitly check\n\tfor `p==null'.\n\nFrom-SVN: r33671", "tree": {"sha": "f8a39214ab1068b5c5daff2e7c514fdafb29c17d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8a39214ab1068b5c5daff2e7c514fdafb29c17d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f70b7142c2a972ac6071b22ab4cfec672d358240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f70b7142c2a972ac6071b22ab4cfec672d358240", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f70b7142c2a972ac6071b22ab4cfec672d358240", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f70b7142c2a972ac6071b22ab4cfec672d358240/comments", "author": null, "committer": null, "parents": [{"sha": "4aef973c2eae349b95773374d2f8afd0dded3e56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aef973c2eae349b95773374d2f8afd0dded3e56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aef973c2eae349b95773374d2f8afd0dded3e56"}], "stats": {"total": 107, "additions": 50, "deletions": 57}, "files": [{"sha": "f2f293b1dc03b95d32f3f074ded88a28c4388974", "filename": "libjava/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f70b7142c2a972ac6071b22ab4cfec672d358240", "patch": "@@ -1,3 +1,38 @@\n+2000-05-04  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* java/util/Locale.java (Locale): Don't explicitly check for\n+\tnull.\n+\t* java/util/Hashtable.java (containsKey): Don't explicitly check\n+\tfor null.\n+\t(get): Likewise.\n+\t* java/util/BitSet.java (and, or, xor): Don't explicitly check for\n+\tnull.\n+\t* java/util/zip/ZipEntry.java (ZipEntry): Don't explicitly check\n+\tfor null.\n+\t* java/text/StringCharacterIterator.java\n+\t(StringCharacterIterator): Don't check for null.\n+\t* java/text/ChoiceFormat.java (setChoices): Don't explicitly check\n+\tfor null pointer.\n+\t* java/net/MulticastSocket.java (joinGroup): Don't explicitly\n+\tcheck for null pointer.\n+\t(leaveGroup): Likewise.\n+\t* java/net/DatagramPacket.java (DatagramPacket): Removed erroneous\n+\tcomment.\n+\t(setData): Likewise.\n+\t* java/lang/ThreadGroup.java (ThreadGroup): Don't explicitly check\n+\tfor `p==null'.\n+\n+2000-04-23  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* prims.cc (DECLARE_PRIM_TYPE): Define a vtable as well.\n+\t(_Jv_PrimClass): Set `methods' by calling _Jv_FindArrayClass.\n+\t* include/jvm.h (struct _Jv_ArrayVTable): Declare.\n+\t(NUM_OBJECT_METHODS): New define.\n+\t* java/lang/natClassLoader.cc (_Jv_FindArrayClass): Added\n+\t`array_vtable' parameter.  Added assertion.\n+\t* java/lang/Class.h (_Jv_FindArrayClass): Added `array_vtable'\n+\tparameter.\n+\n 2000-04-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Makefile.am (GCJCOMPILE, JCFLAGS, JF1CLAGS, jv_convert_LINK,"}, {"sha": "f74c1943ecb1d14b5b34f50e886d953b33685a29", "filename": "libjava/java/lang/ThreadGroup.java", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2Fjava%2Flang%2FThreadGroup.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2Fjava%2Flang%2FThreadGroup.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThreadGroup.java?ref=f70b7142c2a972ac6071b22ab4cfec672d358240", "patch": "@@ -1,6 +1,6 @@\n // ThreadGroup.java - ThreadGroup class.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -344,8 +344,6 @@ public ThreadGroup (String n)\n   public ThreadGroup (ThreadGroup p, String n)\n   {\n     checkAccess ();\n-    if (p == null)\n-      throw new NullPointerException ();\n     if (p.destroyed_flag)\n       throw new IllegalArgumentException ();\n "}, {"sha": "b08f6736e4f03f8f8f592c752e5b8d2e5958bb48", "filename": "libjava/java/net/DatagramPacket.java", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramPacket.java?ref=f70b7142c2a972ac6071b22ab4cfec672d358240", "patch": "@@ -1,6 +1,6 @@\n // DatagramPacket.java - Represents packets in a connectionless protocol.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -32,8 +32,6 @@\n   // JDK1.2\n   public DatagramPacket(byte[] buf, int offset, int length)\n   {\n-    // FIXME: We can't currently rely on NullPointerException being\n-    // thrown when we invoke a method on a null object.\n     if (buf == null)\n       throw new NullPointerException(\"Null buffer\");\n     if (offset < 0)\n@@ -60,8 +58,6 @@ public DatagramPacket(byte[] buf, int length)\n   public DatagramPacket(byte[] buf, int offset, int length,\n \tInetAddress address, int port)\n   {\n-    // FIXME: We can't currently rely on NullPointerException being\n-    // thrown when we invoke a method on a null object.\n     if (buf == null)\n       throw new NullPointerException(\"Null buffer\");\n     if (offset < 0)\n@@ -145,8 +141,6 @@ public synchronized void setData(byte[] buf, int offset, int length)\n   {\n     // This form of setData must be used if offset is to be changed.\n \n-    // FIXME: We can't currently rely on NullPointerException being\n-    // thrown when we invoke a method on a null object.\n     if (buf == null)\n       throw new NullPointerException(\"Null buffer\");\n     if (offset < 0)"}, {"sha": "c5bee02b33297b7015a96bf71bcb99358949cb6b", "filename": "libjava/java/net/MulticastSocket.java", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FMulticastSocket.java?ref=f70b7142c2a972ac6071b22ab4cfec672d358240", "patch": "@@ -1,6 +1,6 @@\n // MulticastSocket.java\n \n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -84,10 +84,6 @@ public void setTimeToLive(int ttl) throws IOException\n \n   public void joinGroup(InetAddress mcastaddr) throws IOException\n   {\n-    // FIXME: We can't currently rely on NullPointerException being\n-    // thrown when we invoke a method on a null object.\n-    if (mcastaddr == null)\n-      throw new NullPointerException(\"Null address\");\n     if (! mcastaddr.isMulticastAddress())\n       throw new IOException(\"Not a Multicast address\");\n \n@@ -100,10 +96,6 @@ public void joinGroup(InetAddress mcastaddr) throws IOException\n \n   public void leaveGroup(InetAddress mcastaddr) throws IOException\n   {\n-    // FIXME: We can't currently rely on NullPointerException being\n-    // thrown when we invoke a method on a null object.\n-    if (mcastaddr == null)\n-      throw new NullPointerException(\"Null address\");\n     if (! mcastaddr.isMulticastAddress())\n       throw new IOException(\"Not a Multicast address\");\n "}, {"sha": "b3bb8341deb63c61a6c33228a3fdd704fd45816f", "filename": "libjava/java/text/ChoiceFormat.java", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2Fjava%2Ftext%2FChoiceFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2Fjava%2Ftext%2FChoiceFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FChoiceFormat.java?ref=f70b7142c2a972ac6071b22ab4cfec672d358240", "patch": "@@ -1,6 +1,6 @@\n // ChoiceFormat.java - Formatter for `switch'-like string substitution.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -257,8 +257,6 @@ public static final double previousDouble (double d)\n \n   public void setChoices (double[] limits, String[] strings)\n     {\n-      if (limits == null || strings == null)\n-\tthrow new NullPointerException ();\n       if (limits.length != strings.length)\n \tthrow new IllegalArgumentException ();\n       this.strings = (String[]) strings.clone();"}, {"sha": "dc02ce8628282c219a322ca8506132d2b3d6996f", "filename": "libjava/java/text/StringCharacterIterator.java", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2Fjava%2Ftext%2FStringCharacterIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2Fjava%2Ftext%2FStringCharacterIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FStringCharacterIterator.java?ref=f70b7142c2a972ac6071b22ab4cfec672d358240", "patch": "@@ -1,6 +1,6 @@\n // StringCharacterIterator.java - Iterate over string of Unicode characters.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -106,20 +106,14 @@ public char setIndex (int idx)\n \n   public StringCharacterIterator (String text)\n     {\n-      // FIXME: remove check for null once we have compiler/runtime\n-      // support for NullPointerException.\n-      this (text, 0, text == null ? 0 : text.length(), 0);\n+      this (text, 0, text.length(), 0);\n     }\n   public StringCharacterIterator (String text, int pos)\n     {\n-      // FIXME: remove check for null once we have compiler/runtime\n-      // support for NullPointerException.\n-      this (text, 0, text == null ? 0 : text.length(), pos);\n+      this (text, 0, text.length(), pos);\n     }\n   public StringCharacterIterator (String text, int begin, int end, int pos)\n     {\n-      if (text == null)\n-\tthrow new NullPointerException ();\n       if (begin < 0 || begin > end || end > text.length()\n \t  // In 1.1 we would also throw if `pos == end'.\n \t  || pos < begin || pos > end)"}, {"sha": "56d89b116b60ca156274e2cbe8d6bae1370ad8f8", "filename": "libjava/java/util/BitSet.java", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2Fjava%2Futil%2FBitSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2Fjava%2Futil%2FBitSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FBitSet.java?ref=f70b7142c2a972ac6071b22ab4cfec672d358240", "patch": "@@ -1,6 +1,6 @@\n // BitSet - A vector of bits.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -24,8 +24,6 @@ public final class BitSet implements Cloneable, Serializable\n {\n   public void and (BitSet bs)\n     {\n-      if (bs == null)\n-\tthrow new NullPointerException ();\n       int max = Math.min(bits.length, bs.bits.length);\n       int i;\n       for (i = 0; i < max; ++i)\n@@ -110,8 +108,6 @@ public int hashCode ()\n \n   public void or (BitSet bs)\n     {\n-      if (bs == null)\n-\tthrow new NullPointerException ();\n       ensure (bs.bits.length - 1);\n       int i;\n       for (i = 0; i < bs.bits.length; ++i)\n@@ -159,8 +155,6 @@ public String toString ()\n \n   public void xor (BitSet bs)\n     {\n-      if (bs == null)\n-\tthrow new NullPointerException ();\n       ensure (bs.bits.length - 1);\n       int i;\n       for (i = 0; i < bs.bits.length; ++i)"}, {"sha": "5b5361152f4cd27bc52c05619cfbf18bbf3a7325", "filename": "libjava/java/util/Hashtable.java", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2Fjava%2Futil%2FHashtable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2Fjava%2Futil%2FHashtable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FHashtable.java?ref=f70b7142c2a972ac6071b22ab4cfec672d358240", "patch": "@@ -164,7 +164,8 @@ public synchronized Object clone()\n     return newTable;\n   }\n \n-  public synchronized boolean contains(Object value) throws NullPointerException\n+  public synchronized boolean contains(Object value)\n+    throws NullPointerException\n   {\n     // An exception is thrown here according to the JDK 1.2 doc.\n     if (value == null)\n@@ -180,10 +181,6 @@ public synchronized boolean contains(Object value) throws NullPointerException\n \n   public synchronized boolean containsKey(Object key)\n   {\n-    // The Map interface mandates that we throw this.\n-    if (key == null)\n-      throw new NullPointerException ();\n-\n     for (HashtableEntry elem = bucket[Math.abs(key.hashCode()\n \t\t\t\t\t       % bucket.length)];\n \t elem != null; elem = elem.nextEntry)\n@@ -200,11 +197,6 @@ public synchronized Enumeration elements()\n \n   public synchronized Object get(Object key)\n   {\n-    // The Dictionary interface mandates that get() throw a\n-    // NullPointerException if key is null.\n-    if (key == null)\n-      throw new NullPointerException ();\n-\n     for (HashtableEntry elem = bucket[Math.abs (key.hashCode()\n \t\t\t\t\t\t% bucket.length)];\n \t elem != null; elem = elem.nextEntry)\n@@ -225,8 +217,10 @@ public synchronized Enumeration keys()\n   }\n \n   public synchronized Object put(Object key, Object value)\n-\t\t\t\tthrows NullPointerException\n+    throws NullPointerException\n   {\n+    // We could really just check `value == null', but checking both\n+    // is a bit clearer.\n     if (key == null || value == null)\n       throw new NullPointerException();\n "}, {"sha": "d2dc2f759172ea4c3ab4a97faf1a6ab3c9d0ed1d", "filename": "libjava/java/util/Locale.java", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2Fjava%2Futil%2FLocale.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2Fjava%2Futil%2FLocale.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FLocale.java?ref=f70b7142c2a972ac6071b22ab4cfec672d358240", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -65,10 +65,6 @@ public Locale (String languageCode, String countryCode)\n   public Locale (String languageCode, String countryCode,\n \t\t String variantCode)\n   {\n-    // We must explicitly check the arguments.\n-    if (languageCode == null || countryCode == null\n-\t|| variantCode == null)\n-      throw new NullPointerException ();\n     language = languageCode.toLowerCase();\n     country = countryCode.toUpperCase();\n     variant = variantCode.toUpperCase();"}, {"sha": "9ff7f4d7c664193ba35486d3be67776c702fa21b", "filename": "libjava/java/util/zip/ZipEntry.java", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2Fjava%2Futil%2Fzip%2FZipEntry.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70b7142c2a972ac6071b22ab4cfec672d358240/libjava%2Fjava%2Futil%2Fzip%2FZipEntry.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipEntry.java?ref=f70b7142c2a972ac6071b22ab4cfec672d358240", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -39,8 +39,6 @@ public class ZipEntry implements ZipConstants\n \n   public ZipEntry (String name)\n   {\n-    if (name == null)\n-      throw new NullPointerException ();\n     if (name.length() > 65535)\n       throw new IllegalArgumentException ();\n     this.name = name;"}]}