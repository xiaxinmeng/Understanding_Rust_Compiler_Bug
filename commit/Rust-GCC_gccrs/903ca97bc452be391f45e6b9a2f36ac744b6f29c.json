{"sha": "903ca97bc452be391f45e6b9a2f36ac744b6f29c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAzY2E5N2JjNDUyYmUzOTFmNDVlNmI5YTJmMzZhYzc0NGI2ZjI5Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-06-05T22:55:35Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-06-05T22:55:35Z"}, "message": "re PR target/71389 (ICE on trunk gcc on ivybridge target (df_refs_verify))\n\n\tPR target/71389\n\t* config/i386/i386.c (ix86_avx256_split_vector_move_misalign):\n\tCopy op1 RTX to avoid invalid sharing.\n\t(ix86_expand_vector_move_misalign): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/71389\n\t* g++.dg/pr71389.C: New test.\n\nFrom-SVN: r237111", "tree": {"sha": "ec9fe99007c02ce94d4bc08a6718711316b78189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec9fe99007c02ce94d4bc08a6718711316b78189"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/903ca97bc452be391f45e6b9a2f36ac744b6f29c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903ca97bc452be391f45e6b9a2f36ac744b6f29c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/903ca97bc452be391f45e6b9a2f36ac744b6f29c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903ca97bc452be391f45e6b9a2f36ac744b6f29c/comments", "author": null, "committer": null, "parents": [{"sha": "603e5a828b646bb802c4695b1046c7974fc2112f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603e5a828b646bb802c4695b1046c7974fc2112f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603e5a828b646bb802c4695b1046c7974fc2112f"}], "stats": {"total": 56, "additions": 44, "deletions": 12}, "files": [{"sha": "6f7b08080483664ef09a8bea8f07e296d3dbb7fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903ca97bc452be391f45e6b9a2f36ac744b6f29c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903ca97bc452be391f45e6b9a2f36ac744b6f29c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=903ca97bc452be391f45e6b9a2f36ac744b6f29c", "patch": "@@ -1,3 +1,10 @@\n+2016-06-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/71389\n+\t* config/i386/i386.c (ix86_avx256_split_vector_move_misalign):\n+\tCopy op1 RTX to avoid invalid sharing.\n+\t(ix86_expand_vector_move_misalign): Ditto.\n+\n 2016-06-05  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* expr.c (move_by_pieces_d::generate): Mark mode parameter with\n@@ -121,20 +128,17 @@\n \tcaller-saved registers.\n \t(type_natural_mode): Don't warn ABI change for MMX in interrupt\n \thandler.\n-\t(ix86_function_arg_advance): Skip for callee in interrupt\n-\thandler.\n-\t(ix86_function_arg): Return special arguments in interrupt\n-\thandler.\n+\t(ix86_function_arg_advance): Skip for callee in interrupt handler.\n+\t(ix86_function_arg): Return special arguments in interrupt handler.\n \t(ix86_promote_function_mode): Promote pointer to word_mode only\n \tfor normal functions.\n \t(ix86_can_use_return_insn_p): Don't use `ret' instruction in\n \tinterrupt handler.\n \t(ix86_epilogue_uses): New function.\n \t(ix86_hard_regno_scratch_ok): Likewise.\n \t(ix86_save_reg): Preserve all registers in interrupt handler\n-\tafter reload.  Preserve all registers, except for function\n-\treturn registers, if there are no caller-saved registers after\n-\treload.\n+\tafter reload.  Preserve all registers, except for function return\n+\tregisters, if there are no caller-saved registers after reload.\n \t(find_drap_reg): Always use callee-saved register if there are\n \tno caller-saved registers.\n \t(ix86_minimum_incoming_stack_boundary): Return MIN_STACK_BOUNDARY\n@@ -244,8 +248,8 @@\n \n 2016-06-03  Alan Hayward  <alan.hayward@arm.com>\n \n-\t* tree-vectorizer.h (vect_get_vec_def_for_operand_1): New\n-\t* tree-vect-stmts.c (vect_get_vec_def_for_operand_1): New\n+\t* tree-vectorizer.h (vect_get_vec_def_for_operand_1): New.\n+\t* tree-vect-stmts.c (vect_get_vec_def_for_operand_1): New.\n \t(vect_get_vec_def_for_operand): Split out code.\n \n 2016-06-03  Segher Boessenkool  <segher@kernel.crashing.org>\n@@ -405,7 +409,7 @@\n \t(P9V_BUILTIN_VSRV): Macro expansion to define argument types for\n \tnew builtin.\n \t* doc/extend.texi: Document the new vec_vslv and vec_srv built-in\n-\tfunctions. \n+\tfunctions.\n \n 2016-06-01  Uros Bizjak  <ubizjak@gmail.com>\n \t    Jocelyn Mayer  <l_indien@magic.fr>"}, {"sha": "c191eebc09d12cbf3a3033574bc616ecc3404645", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903ca97bc452be391f45e6b9a2f36ac744b6f29c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903ca97bc452be391f45e6b9a2f36ac744b6f29c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=903ca97bc452be391f45e6b9a2f36ac744b6f29c", "patch": "@@ -19552,7 +19552,7 @@ ix86_avx256_split_vector_move_misalign (rtx op0, rtx op1)\n       m = adjust_address (op0, mode, 0);\n       emit_insn (extract (m, op1, const0_rtx));\n       m = adjust_address (op0, mode, 16);\n-      emit_insn (extract (m, op1, const1_rtx));\n+      emit_insn (extract (m, copy_rtx (op1), const1_rtx));\n     }\n   else\n     gcc_unreachable ();\n@@ -19724,7 +19724,7 @@ ix86_expand_vector_move_misalign (machine_mode mode, rtx operands[])\n \t  m = adjust_address (op0, V2SFmode, 0);\n \t  emit_insn (gen_sse_storelps (m, op1));\n \t  m = adjust_address (op0, V2SFmode, 8);\n-\t  emit_insn (gen_sse_storehps (m, op1));\n+\t  emit_insn (gen_sse_storehps (m, copy_rtx (op1)));\n \t}\n     }\n   else"}, {"sha": "c09354d320316140cb29ec47715cc57a16802dfb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903ca97bc452be391f45e6b9a2f36ac744b6f29c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903ca97bc452be391f45e6b9a2f36ac744b6f29c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=903ca97bc452be391f45e6b9a2f36ac744b6f29c", "patch": "@@ -1,3 +1,8 @@\n+2016-06-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/71389\n+\t* g++.dg/pr71389.C: New test.\n+\n 2016-06-05  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/71404"}, {"sha": "023abe1755cb17173f86f2585a27a9cd5dcc109d", "filename": "gcc/testsuite/g++.dg/pr71389.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903ca97bc452be391f45e6b9a2f36ac744b6f29c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71389.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903ca97bc452be391f45e6b9a2f36ac744b6f29c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71389.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71389.C?ref=903ca97bc452be391f45e6b9a2f36ac744b6f29c", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-options \"-std=c++11 -O3 -march=ivybridge\" }\n+\n+#include <functional>\n+\n+extern int le_s6, le_s9, le_s11;\n+long foo_v14[16][16];\n+\n+void fn1() {\n+  std::array<std::array<int, 16>, 16> v13;\n+  for (; le_s6;)\n+    for (int k1 = 2; k1 < 4; k1 = k1 + 1) {\n+      for (int n1 = 0; n1 < le_s9; n1 = 8) {\n+        *foo_v14[6] = 20923310;\n+        for (int i2 = n1; i2 < n1 + 8; i2 = i2 + 1)\n+          v13.at(5).at(i2 + 6 - n1) = 306146921;\n+      }\n+\n+      for (int l2 = 0; l2 < le_s11; l2 = l2 + 1)\n+          *(l2 + v13.at(5).begin()) = 306146921;\n+    }\n+  v13.at(le_s6 - 4);\n+}"}]}