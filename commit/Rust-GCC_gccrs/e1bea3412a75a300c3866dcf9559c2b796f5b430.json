{"sha": "e1bea3412a75a300c3866dcf9559c2b796f5b430", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFiZWEzNDEyYTc1YTMwMGMzODY2ZGNmOTU1OWMyYjc5NmY1YjQzMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-10-10T18:03:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-10-10T18:03:56Z"}, "message": "Various small C++ fixes.\n\n\t* typeck.c (condition_conversion): Assert !processing_template_decl.\n\t* semantics.c (finish_omp_clauses): Don't\n\tfold_build_cleanup_point_expr if processing_template_decl.\n\t(outer_var_p): A temporary can't be from an outer scope.\n\t* pt.c (type_dependent_expression_p): Fix dependency checking of\n\tfunctions without DECL_TEMPLATE_INFO.\n\t(instantiate_decl): Use lss_copy.\n\t* constexpr.c (is_valid_constexpr_fn): Fix lambdas before C++17.\n\nFrom-SVN: r253600", "tree": {"sha": "1bf0e689567ea8999f123eefeb16494aecc54023", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bf0e689567ea8999f123eefeb16494aecc54023"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1bea3412a75a300c3866dcf9559c2b796f5b430", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1bea3412a75a300c3866dcf9559c2b796f5b430", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1bea3412a75a300c3866dcf9559c2b796f5b430", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1bea3412a75a300c3866dcf9559c2b796f5b430/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4d612bfde8ac11bf00c7e52969c0b727cd08f733", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d612bfde8ac11bf00c7e52969c0b727cd08f733", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d612bfde8ac11bf00c7e52969c0b727cd08f733"}], "stats": {"total": 72, "additions": 41, "deletions": 31}, "files": [{"sha": "50df3cbe56c2b11c4f4a0fc7f1cdce892f94fe4e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1bea3412a75a300c3866dcf9559c2b796f5b430/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1bea3412a75a300c3866dcf9559c2b796f5b430/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e1bea3412a75a300c3866dcf9559c2b796f5b430", "patch": "@@ -1,5 +1,14 @@\n 2017-10-10  Jason Merrill  <jason@redhat.com>\n \n+\t* typeck.c (condition_conversion): Assert !processing_template_decl.\n+\t* semantics.c (finish_omp_clauses): Don't\n+\tfold_build_cleanup_point_expr if processing_template_decl.\n+\t(outer_var_p): A temporary can't be from an outer scope.\n+\t* pt.c (type_dependent_expression_p): Fix dependency checking of\n+\tfunctions without DECL_TEMPLATE_INFO.\n+\t(instantiate_decl): Use lss_copy.\n+\t* constexpr.c (is_valid_constexpr_fn): Fix lambdas before C++17.\n+\n \t* typeck.c (check_return_expr): Check non-dependent conversion in\n \ttemplates.\n \t* constraint.cc (check_function_concept): Don't complain about an"}, {"sha": "f279f707676c2f3411d758082d7db58e3b7bc67e", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1bea3412a75a300c3866dcf9559c2b796f5b430/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1bea3412a75a300c3866dcf9559c2b796f5b430/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=e1bea3412a75a300c3866dcf9559c2b796f5b430", "patch": "@@ -196,7 +196,14 @@ is_valid_constexpr_fn (tree fun, bool complain)\n \t  }\n     }\n \n-  if (!DECL_CONSTRUCTOR_P (fun))\n+  if (LAMBDA_TYPE_P (CP_DECL_CONTEXT (fun)) && cxx_dialect < cxx17)\n+    {\n+      ret = false;\n+      if (complain)\n+\tinform (DECL_SOURCE_LOCATION (fun),\n+\t\t\"lambdas are implicitly constexpr only in C++17 and later\");\n+    }\n+  else if (!DECL_CONSTRUCTOR_P (fun))\n     {\n       tree rettype = TREE_TYPE (TREE_TYPE (fun));\n       if (!literal_type_p (rettype))"}, {"sha": "d93d518c22d88de1a2277af3767c5a7733375a88", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1bea3412a75a300c3866dcf9559c2b796f5b430/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1bea3412a75a300c3866dcf9559c2b796f5b430/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e1bea3412a75a300c3866dcf9559c2b796f5b430", "patch": "@@ -23224,15 +23224,9 @@ instantiate_decl (tree d, bool defer_ok, bool expl_inst_class_mem_p)\n     synthesize_method (d);\n   else if (TREE_CODE (d) == FUNCTION_DECL)\n     {\n-      hash_map<tree, tree> *saved_local_specializations;\n-      tree block = NULL_TREE;\n-\n-      /* Save away the current list, in case we are instantiating one\n-\t template from within the body of another.  */\n-      saved_local_specializations = local_specializations;\n-\n       /* Set up the list of local specializations.  */\n-      local_specializations = new hash_map<tree, tree>;\n+      local_specialization_stack lss (push_to_top ? lss_blank : lss_copy);\n+      tree block = NULL_TREE;\n \n       /* Set up context.  */\n       if (DECL_OMP_DECLARE_REDUCTION_P (code_pattern)\n@@ -23271,10 +23265,6 @@ instantiate_decl (tree d, bool defer_ok, bool expl_inst_class_mem_p)\n \t    = DECL_STRUCT_FUNCTION (code_pattern)->language->infinite_loop;\n \t}\n \n-      /* We don't need the local specializations any more.  */\n-      delete local_specializations;\n-      local_specializations = saved_local_specializations;\n-\n       /* Finish the function.  */\n       if (DECL_OMP_DECLARE_REDUCTION_P (code_pattern)\n \t  && TREE_CODE (DECL_CONTEXT (code_pattern)) == FUNCTION_DECL)\n@@ -24307,21 +24297,22 @@ type_dependent_expression_p (tree expression)\n \t  && (any_dependent_template_arguments_p\n \t      (INNERMOST_TEMPLATE_ARGS (DECL_TI_ARGS (expression)))))\n \treturn true;\n+    }\n \n-      /* Otherwise, if the decl isn't from a dependent scope, it can't be\n-\t type-dependent.  Checking this is important for functions with auto\n-\t return type, which looks like a dependent type.  */\n-      if (TREE_CODE (expression) == FUNCTION_DECL\n-\t  && (!DECL_CLASS_SCOPE_P (expression)\n-\t      || !dependent_type_p (DECL_CONTEXT (expression)))\n-\t  && (!DECL_FRIEND_CONTEXT (expression)\n-\t      || !dependent_type_p (DECL_FRIEND_CONTEXT (expression)))\n-\t  && !DECL_LOCAL_FUNCTION_P (expression))\n-\t{\n-\t  gcc_assert (!dependent_type_p (TREE_TYPE (expression))\n-\t\t      || undeduced_auto_decl (expression));\n-\t  return false;\n-\t}\n+  /* Otherwise, if the function decl isn't from a dependent scope, it can't be\n+     type-dependent.  Checking this is important for functions with auto return\n+     type, which looks like a dependent type.  */\n+  if (TREE_CODE (expression) == FUNCTION_DECL\n+      && !(DECL_CLASS_SCOPE_P (expression)\n+\t   && dependent_type_p (DECL_CONTEXT (expression)))\n+      && !(DECL_FRIEND_P (expression)\n+\t   && (!DECL_FRIEND_CONTEXT (expression)\n+\t       || dependent_type_p (DECL_FRIEND_CONTEXT (expression))))\n+      && !DECL_LOCAL_FUNCTION_P (expression))\n+    {\n+      gcc_assert (!dependent_type_p (TREE_TYPE (expression))\n+\t\t  || undeduced_auto_decl (expression));\n+      return false;\n     }\n \n   /* Always dependent, on the number of arguments if nothing else.  */"}, {"sha": "5bc74820a903b947cadc7669e82d86c86aab84cc", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1bea3412a75a300c3866dcf9559c2b796f5b430/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1bea3412a75a300c3866dcf9559c2b796f5b430/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e1bea3412a75a300c3866dcf9559c2b796f5b430", "patch": "@@ -3265,6 +3265,8 @@ outer_var_p (tree decl)\n {\n   return ((VAR_P (decl) || TREE_CODE (decl) == PARM_DECL)\n \t  && DECL_FUNCTION_SCOPE_P (decl)\n+\t  /* Don't get confused by temporaries.  */\n+\t  && DECL_NAME (decl)\n \t  && (DECL_CONTEXT (decl) != current_function_decl\n \t      || parsing_nsdmi ()));\n }\n@@ -6213,8 +6215,8 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t\t\t      \"positive\");\n \t\t\t  t = integer_one_node;\n \t\t\t}\n+\t\t      t = fold_build_cleanup_point_expr (TREE_TYPE (t), t);\n \t\t    }\n-\t\t  t = fold_build_cleanup_point_expr (TREE_TYPE (t), t);\n \t\t}\n \t      OMP_CLAUSE_OPERAND (c, 1) = t;\n \t    }\n@@ -7095,8 +7097,8 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t\t\t    \"integral constant\");\n \t\t\t  remove = true;\n \t\t\t}\n+\t\t      t = fold_build_cleanup_point_expr (TREE_TYPE (t), t);\n \t\t    }\n-\t\t  t = fold_build_cleanup_point_expr (TREE_TYPE (t), t);\n \t\t}\n \n \t\t/* Update list item.  */"}, {"sha": "90a1f47e3fd57affd9da7717ce73a212b8b89c32", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1bea3412a75a300c3866dcf9559c2b796f5b430/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1bea3412a75a300c3866dcf9559c2b796f5b430/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=e1bea3412a75a300c3866dcf9559c2b796f5b430", "patch": "@@ -5603,8 +5603,9 @@ tree\n condition_conversion (tree expr)\n {\n   tree t;\n-  if (processing_template_decl)\n-    return expr;\n+  /* Anything that might happen in a template should go through\n+     maybe_convert_cond.  */\n+  gcc_assert (!processing_template_decl);\n   t = perform_implicit_conversion_flags (boolean_type_node, expr,\n \t\t\t\t\t tf_warning_or_error, LOOKUP_NORMAL);\n   t = fold_build_cleanup_point_expr (boolean_type_node, t);"}]}