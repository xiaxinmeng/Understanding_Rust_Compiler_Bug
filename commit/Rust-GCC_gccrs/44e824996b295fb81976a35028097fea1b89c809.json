{"sha": "44e824996b295fb81976a35028097fea1b89c809", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRlODI0OTk2YjI5NWZiODE5NzZhMzUwMjgwOTdmZWExYjg5YzgwOQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2009-10-29T16:41:10Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2009-10-29T16:41:10Z"}, "message": "tree-ssa-math-opts.c (execute_convert_to_rsqrt): Remove.\n\n\t* tree-ssa-math-opts.c (execute_convert_to_rsqrt): Remove.\n\t(gate_convert_to_rsqrt): Ditto.\n\t(pass_convert_to_rsqrt): Ditto.\n\t* tree-pass.h (pass_convert_to_rsqrt): Don't declare.\n\t* passes.c (init_optimization_passes): Don't add pass_convert_to_rsqrt\n\tto pass list.\n\n\t* config/i386/i386.c (ix86_emit_swdivsf): Change evaluation order.\n\ntestsuite/\n\t* gcc.target/i386/sse-recip.c: Use fabsf instead of != .\n\t* gcc.target/i386/sse-recip-vec.c: Ditto.\n\t* gcc.target/i386/brokensqrt.c: New test.\n\nFrom-SVN: r153713", "tree": {"sha": "78477739bb15b85a322a94a9a30767583a0fc1cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78477739bb15b85a322a94a9a30767583a0fc1cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44e824996b295fb81976a35028097fea1b89c809", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e824996b295fb81976a35028097fea1b89c809", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44e824996b295fb81976a35028097fea1b89c809", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e824996b295fb81976a35028097fea1b89c809/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "64ba093a7ab56b482eca1ac6bf3c09454325e144", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64ba093a7ab56b482eca1ac6bf3c09454325e144", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64ba093a7ab56b482eca1ac6bf3c09454325e144"}], "stats": {"total": 162, "additions": 58, "deletions": 104}, "files": [{"sha": "e6c56b160fd9792ecbfb610398ff1264824375e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e824996b295fb81976a35028097fea1b89c809/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e824996b295fb81976a35028097fea1b89c809/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44e824996b295fb81976a35028097fea1b89c809", "patch": "@@ -1,3 +1,14 @@\n+2009-10-29  Michael Matz  <matz@suse.de>\n+\n+\t* tree-ssa-math-opts.c (execute_convert_to_rsqrt): Remove.\n+\t(gate_convert_to_rsqrt): Ditto.\n+\t(pass_convert_to_rsqrt): Ditto.\n+\t* tree-pass.h (pass_convert_to_rsqrt): Don't declare.\n+\t* passes.c (init_optimization_passes): Don't add pass_convert_to_rsqrt\n+\tto pass list.\n+\n+\t* config/i386/i386.c (ix86_emit_swdivsf): Change evaluation order.\n+\n 2009-10-29  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/arm/arm.c (find_best_start): Fix type of remainder to be"}, {"sha": "349df7a7c8a407f81a5d2be72ec1577bc677c5cc", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e824996b295fb81976a35028097fea1b89c809/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e824996b295fb81976a35028097fea1b89c809/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=44e824996b295fb81976a35028097fea1b89c809", "patch": "@@ -28626,18 +28626,18 @@ void ix86_emit_swdivsf (rtx res, rtx a, rtx b, enum machine_mode mode)\n   emit_insn (gen_rtx_SET (VOIDmode, x0,\n \t\t\t  gen_rtx_UNSPEC (mode, gen_rtvec (1, b),\n \t\t\t\t\t  UNSPEC_RCP)));\n-  /* e0 = x0 * b */\n+  /* e0 = x0 * a */\n   emit_insn (gen_rtx_SET (VOIDmode, e0,\n-\t\t\t  gen_rtx_MULT (mode, x0, b)));\n-  /* e1 = 2. - e0 */\n+\t\t\t  gen_rtx_MULT (mode, x0, a)));\n+  /* e1 = x0 * b */\n   emit_insn (gen_rtx_SET (VOIDmode, e1,\n-\t\t\t  gen_rtx_MINUS (mode, two, e0)));\n-  /* x1 = x0 * e1 */\n+\t\t\t  gen_rtx_MULT (mode, x0, b)));\n+  /* x1 = 2. - e1 */\n   emit_insn (gen_rtx_SET (VOIDmode, x1,\n-\t\t\t  gen_rtx_MULT (mode, x0, e1)));\n-  /* res = a * x1 */\n+\t\t\t  gen_rtx_MINUS (mode, two, e1)));\n+  /* res = e0 * x1 */\n   emit_insn (gen_rtx_SET (VOIDmode, res,\n-\t\t\t  gen_rtx_MULT (mode, a, x1)));\n+\t\t\t  gen_rtx_MULT (mode, e0, x1)));\n }\n \n /* Output code to perform a Newton-Rhapson approximation of a"}, {"sha": "80225490cbddfd62a87941ecd45a7db88076c4d7", "filename": "gcc/passes.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e824996b295fb81976a35028097fea1b89c809/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e824996b295fb81976a35028097fea1b89c809/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=44e824996b295fb81976a35028097fea1b89c809", "patch": "@@ -880,7 +880,6 @@ init_optimization_passes (void)\n \t  NEXT_PASS (pass_tree_loop_done);\n \t}\n       NEXT_PASS (pass_cse_reciprocals);\n-      NEXT_PASS (pass_convert_to_rsqrt);\n       NEXT_PASS (pass_reassoc);\n       NEXT_PASS (pass_vrp);\n       NEXT_PASS (pass_dominator);"}, {"sha": "e382b96a473b8b1e4b96f0e681dd6417d9b83a92", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e824996b295fb81976a35028097fea1b89c809/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e824996b295fb81976a35028097fea1b89c809/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=44e824996b295fb81976a35028097fea1b89c809", "patch": "@@ -1,3 +1,9 @@\n+2009-10-29  Michael Matz  <matz@suse.de>\n+\n+\t* gcc.target/i386/sse-recip.c: Use fabsf instead of != .\n+\t* gcc.target/i386/sse-recip-vec.c: Ditto.\n+\t* gcc.target/i386/brokensqrt.c: New test.\n+\n 2009-10-29  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/41777"}, {"sha": "19a59d822e6cadb3b0b08fe8e38e30b117f44e94", "filename": "gcc/testsuite/gcc.target/i386/brokensqrt.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e824996b295fb81976a35028097fea1b89c809/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbrokensqrt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e824996b295fb81976a35028097fea1b89c809/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbrokensqrt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbrokensqrt.c?ref=44e824996b295fb81976a35028097fea1b89c809", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -msse -mfpmath=sse -mrecip\" } */\n+#include \"sse-check.h\"\n+\n+extern float sqrtf (float);\n+float __attribute__((noinline)) broken (float a, float b)\n+{\n+  return sqrtf (a / b);\n+}\n+\n+extern void abort (void);\n+extern void *memcpy (void *, const void *, __SIZE_TYPE__);\n+static void\n+sse_test (void)\n+{\n+  int i;\n+  float x;\n+  char buf[sizeof (float)];\n+  x = broken (0.0f, 10000.0f);\n+  /* A convoluted way to check for the correct result (zero) for all\n+     floating point formats.\n+     We can't use ==, !=, or range checks, or isinf/isnan/isunordered,\n+     because all of these will not do the right thing under -ffast-math,\n+     as they can assume that neither nan nor inf are returned.  */\n+  memcpy (&buf, &x, sizeof (float));\n+  for (i = 0; i < sizeof (float); i++)\n+    if (buf[i] != 0)\n+      abort ();\n+}"}, {"sha": "202351dc987f0495926935e02ec4024c5fb782f7", "filename": "gcc/testsuite/gcc.target/i386/sse-recip-vec.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e824996b295fb81976a35028097fea1b89c809/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-recip-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e824996b295fb81976a35028097fea1b89c809/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-recip-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-recip-vec.c?ref=44e824996b295fb81976a35028097fea1b89c809", "patch": "@@ -4,6 +4,7 @@\n #include \"sse-check.h\"\n \n extern float sqrtf (float);\n+extern float fabsf (float);\n \n #define N 8\n \n@@ -26,7 +27,7 @@ sse_test (void)\n   /* check results:  */\n   for (i = 0; i < N; i++)\n     {\n-      if (r[i] != rc[i])\n+      if (fabsf (r[i] - rc[i]) > 0.0001)\n \tabort();\n     }   \n }"}, {"sha": "d88eb7f007ba2076a777b77ccbbe9793d0518ec0", "filename": "gcc/testsuite/gcc.target/i386/sse-recip.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e824996b295fb81976a35028097fea1b89c809/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-recip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e824996b295fb81976a35028097fea1b89c809/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-recip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-recip.c?ref=44e824996b295fb81976a35028097fea1b89c809", "patch": "@@ -4,6 +4,7 @@\n #include \"sse-check.h\"\n \n extern float sqrtf (float);\n+extern float fabsf (float);\n \n #define N 8\n \n@@ -26,7 +27,7 @@ sse_test (void)\n   /* check results:  */\n   for (i = 0; i < N; i++)\n     {\n-      if (r[i] != rc[i])\n+      if (fabsf (r[i] - rc[i]) > 0.0001)\n \tabort();\n     }   \n }"}, {"sha": "e8d6faeb96b373ca1e9f923178c1b4a13ea598a7", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e824996b295fb81976a35028097fea1b89c809/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e824996b295fb81976a35028097fea1b89c809/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=44e824996b295fb81976a35028097fea1b89c809", "patch": "@@ -401,7 +401,6 @@ extern struct gimple_opt_pass pass_early_warn_uninitialized;\n extern struct gimple_opt_pass pass_late_warn_uninitialized;\n extern struct gimple_opt_pass pass_cse_reciprocals;\n extern struct gimple_opt_pass pass_cse_sincos;\n-extern struct gimple_opt_pass pass_convert_to_rsqrt;\n extern struct gimple_opt_pass pass_optimize_bswap;\n extern struct gimple_opt_pass pass_warn_function_return;\n extern struct gimple_opt_pass pass_warn_function_noreturn;"}, {"sha": "f0fcc2b0a210fd2fb7f550ed3718d6b96303fc97", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e824996b295fb81976a35028097fea1b89c809/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e824996b295fb81976a35028097fea1b89c809/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=44e824996b295fb81976a35028097fea1b89c809", "patch": "@@ -791,98 +791,6 @@ struct gimple_opt_pass pass_cse_sincos =\n  }\n };\n \n-/* Find all expressions in the form of sqrt(a/b) and\n-   convert them to rsqrt(b/a).  */\n-\n-static unsigned int\n-execute_convert_to_rsqrt (void)\n-{\n-  basic_block bb;\n-\n-  FOR_EACH_BB (bb)\n-    {\n-      gimple_stmt_iterator gsi;\n-\n-      for (gsi = gsi_after_labels (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-        {\n-\t  gimple stmt = gsi_stmt (gsi);\n-\t  tree fndecl;\n-\n-\t  if (is_gimple_call (stmt)\n-\t      && gimple_call_lhs (stmt)\n-\t      && (fndecl = gimple_call_fndecl (stmt))\n-\t      && (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n-\t\t  || DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD))\n-\t    {\n-\t      enum built_in_function code;\n-\t      bool md_code;\n-\t      tree arg1;\n-\t      gimple stmt1;\n-\n-\t      code = DECL_FUNCTION_CODE (fndecl);\n-\t      md_code = DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD;\n-\n-\t      fndecl = targetm.builtin_reciprocal (code, md_code, true);\n-\t      if (!fndecl)\n-\t\tcontinue;\n-\n-\t      arg1 = gimple_call_arg (stmt, 0);\n-\n-\t      if (TREE_CODE (arg1) != SSA_NAME)\n-\t\tcontinue;\n-\n-\t      stmt1 = SSA_NAME_DEF_STMT (arg1);\n-\n-\t      if (is_gimple_assign (stmt1)\n-\t\t  && gimple_assign_rhs_code (stmt1) == RDIV_EXPR)\n-\t\t{\n-\t\t  tree arg10, arg11;\n-\n-\t\t  arg10 = gimple_assign_rhs1 (stmt1);\n-\t\t  arg11 = gimple_assign_rhs2 (stmt1);\n-\n-\t\t  /* Swap operands of RDIV_EXPR.  */\n-\t\t  gimple_assign_set_rhs1 (stmt1, arg11);\n-\t\t  gimple_assign_set_rhs2 (stmt1, arg10);\n-\t\t  fold_stmt_inplace (stmt1);\n-\t\t  update_stmt (stmt1);\n-\n-\t\t  gimple_call_set_fndecl (stmt, fndecl);\n-\t\t  update_stmt (stmt);\n-\t\t}\n-\t    }\n-\t}\n-    }\n-\n-  return 0;\n-}\n-\n-static bool\n-gate_convert_to_rsqrt (void)\n-{\n-  return flag_unsafe_math_optimizations && optimize;\n-}\n-\n-struct gimple_opt_pass pass_convert_to_rsqrt =\n-{\n- {\n-  GIMPLE_PASS,\n-  \"rsqrt\",\t\t\t\t/* name */\n-  gate_convert_to_rsqrt,\t\t/* gate */\n-  execute_convert_to_rsqrt,\t\t/* execute */\n-  NULL,\t\t\t\t\t/* sub */\n-  NULL,\t\t\t\t\t/* next */\n-  0,\t\t\t\t\t/* static_pass_number */\n-  TV_NONE,\t\t\t\t/* tv_id */\n-  PROP_ssa,\t\t\t\t/* properties_required */\n-  0,\t\t\t\t\t/* properties_provided */\n-  0,\t\t\t\t\t/* properties_destroyed */\n-  0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_update_ssa | TODO_verify_ssa\n-    | TODO_verify_stmts                 /* todo_flags_finish */\n- }\n-};\n-\n /* A symbolic number is used to detect byte permutation and selection\n    patterns.  Therefore the field N contains an artificial number\n    consisting of byte size markers:"}]}