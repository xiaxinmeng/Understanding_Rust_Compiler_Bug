{"sha": "61959ba10bd5595e6114712abcbce5bcea36c9bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE5NTliYTEwYmQ1NTk1ZTYxMTQ3MTJhYmNiY2U1YmNlYTM2YzliZg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-11-03T20:30:53Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-11-03T20:30:53Z"}, "message": "i386.c (ix86_emit_restore_reg_using_pop): Prototype.\n\n\t* config/i386/i386.c (ix86_emit_restore_reg_using_pop): Prototype.\n\t(ix86_adjust_stack_and_probe_stack_clash): Use a push/pop sequence\n\tto probe at the start of a noreturn function.\n\n\t* gcc.target/i386/stack-check-12.c: New test.\n\nFrom-SVN: r254396", "tree": {"sha": "5d7009708107715c7e173685f7240730e6f53547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d7009708107715c7e173685f7240730e6f53547"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61959ba10bd5595e6114712abcbce5bcea36c9bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61959ba10bd5595e6114712abcbce5bcea36c9bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61959ba10bd5595e6114712abcbce5bcea36c9bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61959ba10bd5595e6114712abcbce5bcea36c9bf/comments", "author": null, "committer": null, "parents": [{"sha": "245f6de13d73c2d6c8be1b78f9e1e99e4510572c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/245f6de13d73c2d6c8be1b78f9e1e99e4510572c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/245f6de13d73c2d6c8be1b78f9e1e99e4510572c"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "99f8aba9f6b8275a136d4482a17f86580e06b418", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61959ba10bd5595e6114712abcbce5bcea36c9bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61959ba10bd5595e6114712abcbce5bcea36c9bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61959ba10bd5595e6114712abcbce5bcea36c9bf", "patch": "@@ -1,3 +1,9 @@\n+2017-11-03  Jeff Law  <law@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_emit_restore_reg_using_pop): Prototype.\n+\t(ix86_adjust_stack_and_probe_stack_clash): Use a push/pop sequence\n+\tto probe at the start of a noreturn function.\n+\n 2017-11-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/78821"}, {"sha": "1b837554609850393bb0d419edb1e354f9edba49", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61959ba10bd5595e6114712abcbce5bcea36c9bf/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61959ba10bd5595e6114712abcbce5bcea36c9bf/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=61959ba10bd5595e6114712abcbce5bcea36c9bf", "patch": "@@ -101,6 +101,8 @@ static void ix86_print_operand_address_as (FILE *, rtx, addr_space_t, bool);\n static bool ix86_save_reg (unsigned int, bool, bool);\n static bool ix86_function_naked (const_tree);\n static bool ix86_notrack_prefixed_insn_p (rtx);\n+static void ix86_emit_restore_reg_using_pop (rtx);\n+\n \n #ifndef CHECK_STACK_LIMIT\n #define CHECK_STACK_LIMIT (-1)\n@@ -12124,8 +12126,14 @@ ix86_adjust_stack_and_probe_stack_clash (const HOST_WIDE_INT size)\n      we just probe when we cross PROBE_INTERVAL.  */\n   if (TREE_THIS_VOLATILE (cfun->decl))\n     {\n-      emit_stack_probe (plus_constant (Pmode, stack_pointer_rtx,\n-\t\t\t\t       -GET_MODE_SIZE (word_mode)));\n+      /* We can safely use any register here since we're just going to push\n+\t its value and immediately pop it back.  But we do try and avoid\n+\t argument passing registers so as not to introduce dependencies in\n+\t the pipeline.  For 32 bit we use %esi and for 64 bit we use %rax.  */\n+      rtx dummy_reg = gen_rtx_REG (word_mode, TARGET_64BIT ? AX_REG : SI_REG);\n+      rtx_insn *insn = emit_insn (gen_push (dummy_reg));\n+      RTX_FRAME_RELATED_P (insn) = 1;\n+      ix86_emit_restore_reg_using_pop (dummy_reg);\n       emit_insn (gen_blockage ());\n     }\n "}, {"sha": "4cc2cedc0dce22347b63842041b9115ed60d6188", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61959ba10bd5595e6114712abcbce5bcea36c9bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61959ba10bd5595e6114712abcbce5bcea36c9bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=61959ba10bd5595e6114712abcbce5bcea36c9bf", "patch": "@@ -1,3 +1,7 @@\n+2017-11-03  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.target/i386/stack-check-12.c: New test.\n+\n 2017-11-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/78821"}, {"sha": "cb69bb08086f62e996ff4e13680465021655f34e", "filename": "gcc/testsuite/gcc.target/i386/stack-check-12.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61959ba10bd5595e6114712abcbce5bcea36c9bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-check-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61959ba10bd5595e6114712abcbce5bcea36c9bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-check-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-check-12.c?ref=61959ba10bd5595e6114712abcbce5bcea36c9bf", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fstack-clash-protection -mtune=generic\" } */\n+/* { dg-require-effective-target supports_stack_clash_protection } */\n+\n+__attribute__ ((noreturn)) void exit (int);\n+\n+__attribute__ ((noreturn)) void\n+f (void)\n+{\n+  asm volatile (\"nop\" ::: \"edi\");\n+  exit (1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"or\\[ql\\]\" } } */\n+/* { dg-final { scan-assembler \"pushl\t%esi\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"popl\t%esi\" { target ia32 } } }*/\n+/* { dg-final { scan-assembler \"pushq\t%rax\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"popq\t%rax\" { target { ! ia32 } } } }*/\n+"}]}