{"sha": "1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNmNDNhMWRiZGI0ZjYxZDJmOWJiZmZmYjJmZGM2MTMwYWEwNzc4MQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2014-04-13T11:58:55Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2014-04-13T11:58:55Z"}, "message": "re PR fortran/58085 (Wrong indexing of an array in ASSOCIATE)\n\n2014-04-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/58085\n\tPR fortran/60717\n\t* trans.h: Add 'use_offset' bitfield to gfc_se.\n\t* trans-array.c (gfc_conv_expr_descriptor): Use 'use_offset'\n\tas a trigger to unconditionally recalculate the offset for\n\tarray slices and constant arrays.\n\ttrans-expr.c (gfc_conv_intrinsic_to_class): Use it.\n\ttrans-stmt.c (trans_associate_var): Ditto.\n\t(gfc_conv_procedure_call): Ditto.\n\n2014-04-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/60717\n\t* gfortran.dg/unlimited_polymorphic_17.f90: New test.\n\n\tPR fortran/58085\n\t* gfortran.dg/associate_15.f90: New test.\n\nFrom-SVN: r209347", "tree": {"sha": "a0e9223d3fa93775c9210bdc4aade00d42633cb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0e9223d3fa93775c9210bdc4aade00d42633cb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781/comments", "author": null, "committer": null, "parents": [{"sha": "ef3a248fbb9c61d510cdcee3de0476994ae32790", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef3a248fbb9c61d510cdcee3de0476994ae32790", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef3a248fbb9c61d510cdcee3de0476994ae32790"}], "stats": {"total": 143, "additions": 132, "deletions": 11}, "files": [{"sha": "29ea5f7871c6434f42163a7ee36a9e9de8bfd475", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781", "patch": "@@ -1,3 +1,15 @@\n+2014-04-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/58085\n+\tPR fortran/60717\n+\t* trans.h: Add 'use_offset' bitfield to gfc_se.\n+\t* trans-array.c (gfc_conv_expr_descriptor): Use 'use_offset'\n+\tas a trigger to unconditionally recalculate the offset for\n+\tarray slices and constant arrays.\n+\ttrans-expr.c (gfc_conv_intrinsic_to_class): Use it.\n+\ttrans-stmt.c (trans_associate_var): Ditto.\n+\t(gfc_conv_procedure_call): Ditto.\n+\n 2014-04-11  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/58880"}, {"sha": "69c47bb1ab2e2853bb83c18014fec00ba35d11f2", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781", "patch": "@@ -6807,8 +6807,9 @@ gfc_conv_expr_descriptor (gfc_se *se, gfc_expr *expr)\n \n       /* Set offset for assignments to pointer only to zero if it is not\n          the full array.  */\n-      if (se->direct_byref\n-\t  && info->ref && info->ref->u.ar.type != AR_FULL)\n+      if ((se->direct_byref || se->use_offset)\n+\t  && ((info->ref && info->ref->u.ar.type != AR_FULL)\n+\t      || (expr->expr_type == EXPR_ARRAY && se->use_offset)))\n \tbase = gfc_index_zero_node;\n       else if (GFC_ARRAY_TYPE_P (TREE_TYPE (desc)))\n \tbase = gfc_evaluate_now (gfc_conv_array_offset (desc), &loop.pre);\n@@ -6893,13 +6894,13 @@ gfc_conv_expr_descriptor (gfc_se *se, gfc_expr *expr)\n \t\t\t\t    stride, info->stride[n]);\n \n \t  if (se->direct_byref\n-\t      && info->ref\n-\t      && info->ref->u.ar.type != AR_FULL)\n+\t      && ((info->ref && info->ref->u.ar.type != AR_FULL)\n+\t\t  || (expr->expr_type == EXPR_ARRAY && se->use_offset)))\n \t    {\n \t      base = fold_build2_loc (input_location, MINUS_EXPR,\n \t\t\t\t      TREE_TYPE (base), base, stride);\n \t    }\n-\t  else if (GFC_ARRAY_TYPE_P (TREE_TYPE (desc)))\n+\t  else if (GFC_ARRAY_TYPE_P (TREE_TYPE (desc)) || se->use_offset)\n \t    {\n \t      tmp = gfc_conv_array_lbound (desc, n);\n \t      tmp = fold_build2_loc (input_location, MINUS_EXPR,\n@@ -6935,8 +6936,9 @@ gfc_conv_expr_descriptor (gfc_se *se, gfc_expr *expr)\n \tgfc_get_dataptr_offset (&loop.pre, parm, desc, offset,\n \t\t\t\tsubref_array_target, expr);\n \n-      if ((se->direct_byref || GFC_ARRAY_TYPE_P (TREE_TYPE (desc)))\n-\t  && !se->data_not_needed)\n+      if (((se->direct_byref || GFC_ARRAY_TYPE_P (TREE_TYPE (desc)))\n+\t   && !se->data_not_needed)\n+\t  || (se->use_offset && base != NULL_TREE))\n \t{\n \t  /* Set the offset.  */\n \t  gfc_conv_descriptor_offset_set (&loop.pre, parm, base);"}, {"sha": "955102b042e12ff827c1aab20bc75a62d07c2422", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781", "patch": "@@ -593,6 +593,7 @@ gfc_conv_intrinsic_to_class (gfc_se *parmse, gfc_expr *e,\n       else\n \t{\n \t  parmse->ss = ss;\n+\t  parmse->use_offset = 1;\n \t  gfc_conv_expr_descriptor (parmse, e);\n \t  gfc_add_modify (&parmse->pre, ctree, parmse->expr);\n \t}\n@@ -4378,6 +4379,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t\t|| CLASS_DATA (fsym)->attr.codimension))\n \t    {\n \t      /* Pass a class array.  */\n+\t      parmse.use_offset = 1;\n \t      gfc_conv_expr_descriptor (&parmse, e);\n \n \t      /* If an ALLOCATABLE dummy argument has INTENT(OUT) and is"}, {"sha": "00c99fcfb5beacdc871e35c559505c55659726b6", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781", "patch": "@@ -1170,16 +1170,18 @@ trans_associate_var (gfc_symbol *sym, gfc_wrapped_block *block)\n       /* If association is to an expression, evaluate it and create temporary.\n \t Otherwise, get descriptor of target for pointer assignment.  */\n       gfc_init_se (&se, NULL);\n-      if (sym->assoc->variable)\n+      if (sym->assoc->variable || e->expr_type == EXPR_ARRAY)\n \t{\n \t  se.direct_byref = 1;\n+\t  se.use_offset = 1;\n \t  se.expr = desc;\n \t}\n+\n       gfc_conv_expr_descriptor (&se, e);\n \n       /* If we didn't already do the pointer assignment, set associate-name\n \t descriptor to the one generated for the temporary.  */\n-      if (!sym->assoc->variable)\n+      if (!sym->assoc->variable && e->expr_type != EXPR_ARRAY)\n \t{\n \t  int dim;\n "}, {"sha": "f8d29ecf2ec4767d90df56307838843208dcf2dc", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781", "patch": "@@ -87,6 +87,10 @@ typedef struct gfc_se\n      args alias.  */\n   unsigned force_tmp:1;\n \n+  /* Unconditionally calculate offset for array segments and constant\n+     arrays in gfc_conv_expr_descriptor.  */\n+  unsigned use_offset:1;\n+\n   unsigned want_coarray:1;\n \n   /* Scalarization parameters.  */\n@@ -99,7 +103,7 @@ gfc_se;\n \n /* Denotes different types of coarray.\n    Please keep in sync with libgfortran/caf/libcaf.h.  */\n-typedef enum \n+typedef enum\n {\n   GFC_CAF_COARRAY_STATIC,\n   GFC_CAF_COARRAY_ALLOC,\n@@ -178,7 +182,7 @@ typedef enum\n   /* An intrinsic function call.  Many intrinsic functions which map directly\n      to library calls are created as GFC_SS_FUNCTION nodes.  */\n   GFC_SS_INTRINSIC,\n-  \n+\n   /* A component of a derived type.  */\n   GFC_SS_COMPONENT\n }"}, {"sha": "666ba05c12bb8814181aa5df4e19b47f665e11d7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781", "patch": "@@ -1,3 +1,11 @@\n+2014-04-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/60717\n+\t* gfortran.dg/unlimited_polymorphic_17.f90: New test.\n+\n+\tPR fortran/58085\n+\t* gfortran.dg/associate_15.f90: New test.\n+\n 2014-04-12  Igor Zamyatin  <igor.zamyatin@intel.com>\n \n \tPR middle-end/60467"}, {"sha": "7e34eb518e0cc5d49578a74d22eead6bffda218f", "filename": "gcc/testsuite/gfortran.dg/associate_15.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_15.f90?ref=1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do run }\n+! Test the fix for PR58085, where the offset for 'x' was set to zero,\n+! rather than -1.\n+!\n+! Contributed by Vladimir Fuka  <vladimir.fuka@gmail.com>\n+!\n+module foo\n+contains\n+  function bar (arg) result (res)\n+    integer arg, res(3)\n+    res = [arg, arg+1, arg +2]\n+  end function\n+end module\n+  use foo\n+  real d(3,3)\n+  integer a,b,c\n+  character(48) line1, line2\n+  associate (x=>shape(d))\n+    a = x(1)\n+    b = x(2)\n+    write (line1, *) a, b\n+    write (line2, *) x\n+    if (trim (line1) .ne. trim (line2)) call abort\n+  end associate\n+  associate (x=>[1,2])\n+    a = x(1)\n+    b = x(2)\n+    write (line1, *) a, b\n+    write (line2, *) x\n+    if (trim (line1) .ne. trim (line2)) call abort\n+  end associate\n+  associate (x=>bar(5)) ! make sure that we haven't broken function association\n+    a = x(1)\n+    b = x(2)\n+    c = x(3)\n+    write (line1, *) a, b, c\n+    write (line2, *) x\n+    if (trim (line1) .ne. trim (line2)) call abort\n+  end associate\n+end"}, {"sha": "0fcff74b910808820003a8012b55de9cb86b29cf", "filename": "gcc/testsuite/gfortran.dg/unlimited_polymorphic_17.f90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_17.f90?ref=1cf43a1dbdb4f61d2f9bbfffb2fdc6130aa07781", "patch": "@@ -0,0 +1,51 @@\n+! { dg-do run }\n+! Tests fix for PR60717 in which offsets in recursive calls below\n+! were not being set correctly.\n+!\n+! Reported on comp.lang.fortran by Thomas Schnurrenberger\n+!\n+module m\n+  implicit none\n+  real :: chksum0 = 0, chksum1 = 0, chksum2 = 0\n+contains\n+  recursive subroutine show_real(a)\n+    real, intent(in) :: a(:)\n+    if (size (a) > 0) then\n+      chksum0 = a(1) + chksum0\n+      call show_real (a(2:))\n+    end if\n+    return\n+  end subroutine show_real\n+  recursive subroutine show_generic1(a)\n+    class(*), intent(in) :: a(:)\n+    if (size (a) > 0) then\n+      select type (a)\n+      type is (real)\n+        chksum1 = a(1) + chksum1\n+      end select\n+      call show_generic1 (a(2:)) ! recursive call outside SELECT TYPE\n+    end if\n+    return\n+  end subroutine show_generic1\n+  recursive subroutine show_generic2(a)\n+    class(*), intent(in) :: a(:)\n+    if (size (a) > 0) then\n+      select type (a)\n+      type is (real)\n+        chksum2 = a(1) + chksum2\n+        call show_generic2 (a(2:)) ! recursive call inside SELECT TYPE\n+      end select\n+    end if\n+    return\n+  end subroutine show_generic2\n+end module m\n+program test\n+  use :: m\n+  implicit none\n+  real :: array(1:6) = (/ 0, 1, 2, 3, 4, 5 /)\n+  call show_real (array)\n+  call show_generic1 (array)\n+  call show_generic2 (array)\n+  if (chksum0 .ne. chksum1) call abort\n+  if (chksum0 .ne. chksum2) call abort\n+end program test"}]}