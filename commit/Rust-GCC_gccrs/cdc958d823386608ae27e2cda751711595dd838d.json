{"sha": "cdc958d823386608ae27e2cda751711595dd838d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RjOTU4ZDgyMzM4NjYwOGFlMjdlMmNkYTc1MTcxMTU5NWRkODM4ZA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2003-05-11T09:07:17Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2003-05-11T09:07:17Z"}, "message": "re PR libstdc++/3181 (Unable to use sqrt,cos,sin,... with int argument.)\n\n\tPR libstdc++/3181\n\t* include/c_std/std_cmath.h: #include <bits/cpp_type_traits.h>\n\t(acos): Handle integer argument.\n\t(asin): Likewise.\n\t(atan): Likewise.\n\t(atan2): Likewise.\n\t(ceil): Likewise.\n\t(cos): Likewise.\n\t(cosh): Likewise.\n\t(exp): Likewise.\n\t(fabs): Likewise.\n\t(floor): Likewise.\n\t(frexp): Likewise.\n\t(ldexp): Likewise.\n\t(log): Likewise.\n\t(log10): Likewise.\n\t(sin): Likewise.\n\t(sinh): Likewise.\n\t(sqrt): Likewise.\n\t(tan): Likewise.\n\t(tanh): Likewise.\n\t* include/bits/cpp_type_traits.h (__are_same<>): New traits.\n\t(__enable_if): Likewise.\n\t* testsuite/26_numerics/cmath/overloads.C: New test.\n\nFrom-SVN: r66681", "tree": {"sha": "461d69e0788dca2c949e2cf6b54556cd5cdfdace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/461d69e0788dca2c949e2cf6b54556cd5cdfdace"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdc958d823386608ae27e2cda751711595dd838d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc958d823386608ae27e2cda751711595dd838d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdc958d823386608ae27e2cda751711595dd838d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc958d823386608ae27e2cda751711595dd838d/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e1112e60cb9d8f22517caf306fa1a7e1584855e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1112e60cb9d8f22517caf306fa1a7e1584855e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1112e60cb9d8f22517caf306fa1a7e1584855e0"}], "stats": {"total": 187, "additions": 186, "deletions": 1}, "files": [{"sha": "32dd575102267ba27649bbc7a4748b3075a883f5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc958d823386608ae27e2cda751711595dd838d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc958d823386608ae27e2cda751711595dd838d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cdc958d823386608ae27e2cda751711595dd838d", "patch": "@@ -1,3 +1,30 @@\n+2003-05-11  Gabriel Dos Reis <gdr@integrable-solutions.net>\n+\n+\tPR libstdc++/3181\n+\t* include/c_std/std_cmath.h: #include <bits/cpp_type_traits.h>\n+\t(acos): Handle integer argument.\n+\t(asin): Likewise.\n+\t(atan): Likewise.\n+\t(atan2): Likewise.\n+\t(ceil): Likewise.\n+\t(cos): Likewise.\n+\t(cosh): Likewise.\n+\t(exp): Likewise.\n+\t(fabs): Likewise.\n+\t(floor): Likewise.\n+\t(frexp): Likewise.\n+\t(ldexp): Likewise.\n+\t(log): Likewise.\n+\t(log10): Likewise.\n+\t(sin): Likewise.\n+\t(sinh): Likewise.\n+\t(sqrt): Likewise.\n+\t(tan): Likewise.\n+\t(tanh): Likewise.\n+\t* include/bits/cpp_type_traits.h (__are_same<>): New traits.\n+\t(__enable_if): Likewise.\n+\t* testsuite/26_numerics/cmath/overloads.C: New test.\n+\t\n 2003-05-10  Petur Runolfsson  <peturr02@ru.is>\n \n \tPR libstdc++/9027"}, {"sha": "415150275c487102a20ee28e0473ea02bab9395c", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc958d823386608ae27e2cda751711595dd838d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc958d823386608ae27e2cda751711595dd838d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=cdc958d823386608ae27e2cda751711595dd838d", "patch": "@@ -1,6 +1,6 @@\n // The  -*- C++ -*- type traits classes for internal use in libstdc++\n \n-// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -66,6 +66,38 @@\n \n namespace std\n {\n+  // Compare for equality of types.\n+  template<typename, typename>\n+    struct __are_same\n+    {\n+      enum\n+      {\n+        _M_type = 0\n+      };\n+    };\n+\n+  template<typename _Tp>\n+    struct __are_same<_Tp, _Tp>\n+    {\n+      enum\n+      {\n+        _M_type = 1\n+      };\n+    };\n+\n+  // Define a nested type if some predicate holds.\n+  template<typename, bool>\n+    struct __enable_if\n+    {\n+    };\n+\n+  template<typename _Tp>\n+  struct __enable_if<_Tp, true>\n+    {\n+      typedef _Tp _M_type;\n+    };\n+\n+  // Holds if the template-argument is a void type.\n   template<typename _Tp>\n     struct __is_void\n     {"}, {"sha": "04d300a01c6bda8801d06707385bb3e344f94fb6", "filename": "libstdc++-v3/include/c_std/std_cmath.h", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc958d823386608ae27e2cda751711595dd838d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc958d823386608ae27e2cda751711595dd838d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h?ref=cdc958d823386608ae27e2cda751711595dd838d", "patch": "@@ -47,6 +47,7 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n+#include <bits/cpp_type_traits.h>\n \n #include <math.h>\n \n@@ -197,6 +198,13 @@ namespace std\n   acos(long double __x) { return ::acos(static_cast<double>(__x)); }\n #endif\n \n+  template<typename _Tp>\n+    inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n+    acos(_Tp __x)\n+    {\n+      return ::acos(static_cast<double>(__x));\n+    }\n+  \n   using ::asin;\n \n #if _GLIBCPP_HAVE_ASINF\n@@ -215,6 +223,11 @@ namespace std\n   asin(long double __x) { return ::asin(static_cast<double>(__x)); }\n #endif\n \n+  template<typename _Tp>\n+    inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n+    asin(_Tp __x)\n+    { return ::asin(static_cast<double>(__x)); }\n+\n   using ::atan;\n \n #if _GLIBCPP_HAVE_ATANF\n@@ -233,6 +246,11 @@ namespace std\n   atan(long double __x) { return ::atan(static_cast<double>(__x)); }\n #endif\n \n+  template<typename _Tp>\n+    inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n+    atan(_Tp __x)\n+    { return ::atan(static_cast<double>(__x)); }\n+  \n   using ::atan2;\n \n #if _GLIBCPP_HAVE_ATAN2F\n@@ -253,6 +271,12 @@ namespace std\n   { return ::atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n #endif\n \n+  template<typename _Tp, typename _Up>\n+    inline typename __enable_if<double, __is_integer<_Tp>::_M_type\n+                                        && __is_integer<_Up>::_M_type>::_M_type\n+    atan2(_Tp __x, _Up __y)\n+    { return ::atan2(static_cast<double>(__x), static_cast<double>(__y)); }\n+\n   using ::ceil;\n \n #if _GLIBCPP_HAVE_CEILF\n@@ -271,6 +295,11 @@ namespace std\n   ceil(long double __x) { return ::ceil(static_cast<double>(__x)); }\n #endif\n \n+  template<typename _Tp>\n+    inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n+    ceil(_Tp __x)\n+    { return ::ceil(static_cast<double>(__x)); }\n+  \n   using ::cos;\n \n   inline float\n@@ -281,6 +310,11 @@ namespace std\n   cos(long double __x)\n   { return __builtin_cosl(__x); }\n \n+  template<typename _Tp>\n+    inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n+    cos(_Tp __x)\n+    { return __builtin_cos(__x); }\n+\n   using ::cosh;\n \n #if _GLIBCPP_HAVE_COSHF\n@@ -299,6 +333,11 @@ namespace std\n   cosh(long double __x) { return ::cosh(static_cast<double>(__x)); }\n #endif\n \n+  template<typename _Tp>\n+    inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n+    cosh(_Tp __x)\n+    { return ::cosh(static_cast<double>(__x)); }\n+\n   using ::exp;\n \n #if _GLIBCPP_HAVE_EXPF\n@@ -317,6 +356,11 @@ namespace std\n   exp(long double __x) { return ::exp(static_cast<double>(__x)); }\n #endif\n \n+  template<typename _Tp>\n+    inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n+    exp(_Tp __x)\n+    { return ::exp(static_cast<double>(__x)); }\n+  \n   using ::fabs;\n \n   inline float\n@@ -327,6 +371,11 @@ namespace std\n   fabs(long double __x)\n   { return __builtin_fabsl(__x); }\n \n+  template<typename _Tp>\n+    inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n+    fabs(_Tp __x)\n+    { return __builtin_fabs(__x); }\n+\n   using ::floor;\n \n #if _GLIBCPP_HAVE_FLOORF\n@@ -345,6 +394,11 @@ namespace std\n   floor(long double __x) { return ::floor(static_cast<double>(__x)); }\n #endif\n \n+  template<typename _Tp>\n+    inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n+    floor(_Tp __x)\n+    { return ::floor(static_cast<double>(__x)); }\n+  \n   using ::fmod;\n \n #if _GLIBCPP_HAVE_FMODF\n@@ -384,6 +438,11 @@ namespace std\n   { return ::frexp(static_cast<double>(__x), __exp); }\n #endif\n \n+  template<typename _Tp>\n+    inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n+    frexp(_Tp __x, int* __exp)\n+    { return ::frexp(static_cast<double>(__x), __exp); }\n+  \n   using ::ldexp;\n \n #if _GLIBCPP_HAVE_LDEXPF\n@@ -404,6 +463,11 @@ namespace std\n   { return ::ldexp(static_cast<double>(__x), __exp); }\n #endif\n \n+  template<typename _Tp>\n+  inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n+  ldexp(_Tp __x, int __exp)\n+  { return ::ldexp(static_cast<double>(__x), __exp); }\n+\n   using ::log;\n \n #if _GLIBCPP_HAVE_LOGF\n@@ -422,6 +486,11 @@ namespace std\n   log(long double __x) { return ::log(static_cast<double>(__x)); }\n #endif\n \n+  template<typename _Tp>\n+    inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n+    log(_Tp __x)\n+    { return ::log(static_cast<double>(__x)); }\n+  \n   using ::log10;\n \n #if _GLIBCPP_HAVE_LOG10F\n@@ -440,6 +509,11 @@ namespace std\n   log10(long double __x) { return ::log10(static_cast<double>(__x)); }\n #endif\n \n+  template<typename _Tp>\n+    inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n+    log10(_Tp __x)\n+    { return ::log10(static_cast<double>(__x)); }\n+  \n   using ::modf;\n \n #if _GLIBCPP_HAVE_MODFF\n@@ -521,6 +595,11 @@ namespace std\n   sin(long double __x)\n   { return __builtin_sinl(__x); }\n \n+  template<typename _Tp>\n+    inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n+    sin(_Tp __x)\n+    { return __builtin_sin(__x); }\n+\n   using ::sinh;\n \n #if _GLIBCPP_HAVE_SINHF\n@@ -539,6 +618,11 @@ namespace std\n   sinh(long double __x) { return ::sinh(static_cast<double>(__x)); }\n #endif\n \n+  template<typename _Tp>\n+    inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n+    sinh(_Tp __x)\n+    { return ::sinh(static_cast<_Tp>(__x)); }\n+  \n   using ::sqrt;\n \n   inline float\n@@ -549,6 +633,11 @@ namespace std\n   sqrt(long double __x)\n   { return __builtin_sqrtl(__x); }\n \n+  template<typename _Tp>\n+    inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n+    sqrt(_Tp __x)\n+    { return __builtin_sqrt(__x); }\n+  \n   using ::tan;\n \n #if _GLIBCPP_HAVE_TANF\n@@ -567,6 +656,11 @@ namespace std\n   tan(long double __x) { return ::tan(static_cast<double>(__x)); }\n #endif\n \n+  template<typename _Tp>\n+    inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n+    tan(_Tp __x)\n+    { return ::tan(static_cast<double>(__x)); }\n+  \n   using ::tanh;\n \n #if _GLIBCPP_HAVE_TANHF\n@@ -584,6 +678,11 @@ namespace std\n   inline long double \n   tanh(long double __x) { return ::tanh(static_cast<double>(__x)); }\n #endif\n+\n+  template<typename _Tp>\n+    inline typename __enable_if<double, __is_integer<_Tp>::_M_type>::_M_type\n+    tanh(_Tp __x)\n+    { return ::tanh(static_cast<double>(__x)); }\n } \n \n "}, {"sha": "4d41a9640b474c19dd77a056ff281ce374476b0f", "filename": "libstdc++-v3/testsuite/26_numerics/cmath/overloads.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc958d823386608ae27e2cda751711595dd838d/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcmath%2Foverloads.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc958d823386608ae27e2cda751711595dd838d/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcmath%2Foverloads.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcmath%2Foverloads.C?ref=cdc958d823386608ae27e2cda751711595dd838d", "patch": "@@ -0,0 +1,27 @@\n+// PR 3181\n+// Origin: pete@toyon.com\n+\n+#include <cmath>\n+\n+int main()\n+{\n+  int i = -1;\n+  int j = 9;\n+  double ans;\n+  ans = std::acos(i);\n+  ans = std::asin(i);\n+  ans = std::atan(i);\n+  ans = std::atan2(i, j);\n+  ans = std::cos(i);\n+  ans = std::cosh(i);\n+  ans = std::exp(i);\n+  ans = std::fabs(i);\n+  ans = std::floor(i);\n+  ans = std::log(i);\n+  ans = std::log10(i);\n+  ans = std::sqrt(i);\n+  ans = std::sin(i);\n+  ans = std::sinh(j);\n+  ans = std::tan(i);\n+  ans = std::tanh(i);\n+}"}]}