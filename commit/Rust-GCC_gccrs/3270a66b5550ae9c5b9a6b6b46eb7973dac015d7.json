{"sha": "3270a66b5550ae9c5b9a6b6b46eb7973dac015d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI3MGE2NmI1NTUwYWU5YzViOWE2YjZiNDZlYjc5NzNkYWMwMTVkNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-11-13T12:14:15Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-11-13T12:14:15Z"}, "message": "[multiple changes]\n\n2005-11-13  Jonathan Wakely  <redi@gcc.gnu.org>\n\n\t* include/tr1/boost_shared_ptr.h (get_deleter):\n\tDeclare before shared_ptr.\n\t(shared_ptr<>): Declare get_deleter as friend.\n\t(shared_ptr<>:_M_get_deleter): Private.\n\n2005-11-13  Douglas Gregor  <doug.gregor@gmail.com>\n\n\tPR libstdc++/24818\n        * include/tr1/ref_wrap_iterate.h\n        (reference_wrapper::operator()()): Don't dereferene the result of\n        get() before calling it; it's already a reference.\n        * testsuite/tr1/3_function_objects/reference_wrapper/invoke.cc:\n        Test nullary calls to reference_wrappers.\n\nFrom-SVN: r106862", "tree": {"sha": "c8cc5cfcec5669c0b74ea511bc46bf29cb509a43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8cc5cfcec5669c0b74ea511bc46bf29cb509a43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3270a66b5550ae9c5b9a6b6b46eb7973dac015d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3270a66b5550ae9c5b9a6b6b46eb7973dac015d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3270a66b5550ae9c5b9a6b6b46eb7973dac015d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3270a66b5550ae9c5b9a6b6b46eb7973dac015d7/comments", "author": null, "committer": null, "parents": [{"sha": "7a9018e45b9a0f8a28ec5ebf2aeba82cc11f55d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a9018e45b9a0f8a28ec5ebf2aeba82cc11f55d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a9018e45b9a0f8a28ec5ebf2aeba82cc11f55d1"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "f60ef609999f865d78dea40a47ac5bd375953bb2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3270a66b5550ae9c5b9a6b6b46eb7973dac015d7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3270a66b5550ae9c5b9a6b6b46eb7973dac015d7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3270a66b5550ae9c5b9a6b6b46eb7973dac015d7", "patch": "@@ -1,3 +1,19 @@\n+2005-11-13  Jonathan Wakely  <redi@gcc.gnu.org>\n+\n+\t* include/tr1/boost_shared_ptr.h (get_deleter):\n+\tDeclare before shared_ptr.\n+\t(shared_ptr<>): Declare get_deleter as friend.\n+\t(shared_ptr<>:_M_get_deleter): Private.\n+\n+2005-11-13  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\tPR libstdc++/24818\n+\t* include/tr1/ref_wrap_iterate.h\n+\t(reference_wrapper::operator()()): Don't dereferene the result of\n+\tget() before calling it; it's already a reference.\n+\t* testsuite/tr1/3_function_objects/reference_wrapper/invoke.cc:\n+\tTest nullary calls to reference_wrappers.\n+\n 2005-11-11  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/24808"}, {"sha": "471547d0a14bcdcb11593ee79e014ceaf61d20c0", "filename": "libstdc++-v3/include/tr1/ref_wrap_iterate.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3270a66b5550ae9c5b9a6b6b46eb7973dac015d7/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fref_wrap_iterate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3270a66b5550ae9c5b9a6b6b46eb7973dac015d7/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fref_wrap_iterate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fref_wrap_iterate.h?ref=3270a66b5550ae9c5b9a6b6b46eb7973dac015d7", "patch": "@@ -40,5 +40,5 @@ template<_GLIBCXX_TEMPLATE_PARAMS>\n #else\n typename result_of<_M_func_type()>::type\n operator()() const\n-{ return (*get())(); }\n+{ return get()(); }\n #endif"}, {"sha": "b1eb999c6cf2328a77711a4aa8accda69494e662", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/reference_wrapper/invoke.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3270a66b5550ae9c5b9a6b6b46eb7973dac015d7/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Freference_wrapper%2Finvoke.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3270a66b5550ae9c5b9a6b6b46eb7973dac015d7/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Freference_wrapper%2Finvoke.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Freference_wrapper%2Finvoke.cc?ref=3270a66b5550ae9c5b9a6b6b46eb7973dac015d7", "patch": "@@ -56,11 +56,20 @@ struct X\n   X& operator=(const X&);\n };\n \n+int seventeen() { return 17; }\n+\n+struct get_seventeen\n+{\n+  typedef int result_type;\n+  int operator()() const { return 17; }\n+};\n+\n void test01()\n {\n   using std::tr1::ref;\n   using std::tr1::cref;\n \n+  ::get_seventeen get_sev;\n   ::X x;\n   ::X* xp = &x;\n   int (::X::* p_foo)(float) = &::X::foo;\n@@ -73,9 +82,11 @@ void test01()\n \n   // Functions\n   VERIFY(ref(truncate_float)(pi) == 3);\n+  VERIFY(ref(seventeen)() == 17);\n \n   // Function pointers\n   VERIFY(cref(&truncate_float)(pi) == 3);\n+  VERIFY(cref(&seventeen)() == 17);\n \n   // Member function pointers\n   VERIFY(ref(p_foo)(x, pi) == 3);\n@@ -92,6 +103,8 @@ void test01()\n   VERIFY(ref(p_bar)(xp) == 17);\n \n   // Function objects\n+  VERIFY(ref(get_sev)() == 17);\n+  VERIFY(cref(get_sev)() == 17);\n   VERIFY(ref(x)(pi) == 4);\n   VERIFY(cref(x)(pi) == 5);\n }"}]}