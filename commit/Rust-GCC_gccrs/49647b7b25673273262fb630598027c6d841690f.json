{"sha": "49647b7b25673273262fb630598027c6d841690f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk2NDdiN2IyNTY3MzI3MzI2MmZiNjMwNTk4MDI3YzZkODQxNjkwZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-12-09T10:13:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-12-09T10:13:18Z"}, "message": "re PR tree-optimization/92834 (misssed SLP vectorization in LightPixel)\n\n\tPR tree-optimization/92834\n\t* match.pd (A - ((A - B) & -(C cmp D)) -> (C cmp D) ? B : A,\n\tA + ((B - A) & -(C cmp D)) -> (C cmp D) ? B : A): New simplifications.\n\n\t* gcc.dg/tree-ssa/pr92834.c: New test.\n\nFrom-SVN: r279113", "tree": {"sha": "4c6f773e0273b14f939c5926752cfd99310ca630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c6f773e0273b14f939c5926752cfd99310ca630"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49647b7b25673273262fb630598027c6d841690f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49647b7b25673273262fb630598027c6d841690f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49647b7b25673273262fb630598027c6d841690f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49647b7b25673273262fb630598027c6d841690f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e03b21e84e4b6a3c806bb48bb5eceac1f7ed273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e03b21e84e4b6a3c806bb48bb5eceac1f7ed273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e03b21e84e4b6a3c806bb48bb5eceac1f7ed273"}], "stats": {"total": 158, "additions": 158, "deletions": 0}, "files": [{"sha": "1c953d29b86db053f14f99e8dac59fe3c324f483", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49647b7b25673273262fb630598027c6d841690f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49647b7b25673273262fb630598027c6d841690f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49647b7b25673273262fb630598027c6d841690f", "patch": "@@ -1,3 +1,9 @@\n+2019-12-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/92834\n+\t* match.pd (A - ((A - B) & -(C cmp D)) -> (C cmp D) ? B : A,\n+\tA + ((B - A) & -(C cmp D)) -> (C cmp D) ? B : A): New simplifications.\n+\n 2019-12-09  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \tPR tree-optimization/89007"}, {"sha": "dda86964b4c8e9df1bbe7831111af36f616e9791", "filename": "gcc/match.pd", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49647b7b25673273262fb630598027c6d841690f/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49647b7b25673273262fb630598027c6d841690f/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=49647b7b25673273262fb630598027c6d841690f", "patch": "@@ -2697,6 +2697,31 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (cmp (minmax @0 INTEGER_CST@1) INTEGER_CST@2)\n   (comb (cmp @0 @2) (cmp @1 @2))))\n \n+/* Undo fancy way of writing max/min or other ?: expressions,\n+   like a - ((a - b) & -(a < b)), in this case into (a < b) ? b : a.\n+   People normally use ?: and that is what we actually try to optimize.  */\n+(for cmp (simple_comparison)\n+ (simplify\n+  (minus @0 (bit_and:c (minus @0 @1)\n+\t\t       (convert? (negate@4 (convert? (cmp@5 @2 @3))))))\n+  (if (INTEGRAL_TYPE_P (type)\n+       && INTEGRAL_TYPE_P (TREE_TYPE (@4))\n+       && TREE_CODE (TREE_TYPE (@4)) != BOOLEAN_TYPE\n+       && INTEGRAL_TYPE_P (TREE_TYPE (@5))\n+       && (TYPE_PRECISION (TREE_TYPE (@4)) >= TYPE_PRECISION (type)\n+\t   || !TYPE_UNSIGNED (TREE_TYPE (@4))))\n+   (cond (cmp @2 @3) @1 @0)))\n+ (simplify\n+  (plus:c @0 (bit_and:c (minus @1 @0)\n+\t\t\t(convert? (negate@4 (convert? (cmp@5 @2 @3))))))\n+  (if (INTEGRAL_TYPE_P (type)\n+       && INTEGRAL_TYPE_P (TREE_TYPE (@4))\n+       && TREE_CODE (TREE_TYPE (@4)) != BOOLEAN_TYPE\n+       && INTEGRAL_TYPE_P (TREE_TYPE (@5))\n+       && (TYPE_PRECISION (TREE_TYPE (@4)) >= TYPE_PRECISION (type)\n+\t   || !TYPE_UNSIGNED (TREE_TYPE (@4))))\n+   (cond (cmp @2 @3) @1 @0))))\n+\n /* Simplifications of shift and rotates.  */\n \n (for rotate (lrotate rrotate)"}, {"sha": "53bbc1254242e0805530c64a2b69ea1a76a48780", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49647b7b25673273262fb630598027c6d841690f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49647b7b25673273262fb630598027c6d841690f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=49647b7b25673273262fb630598027c6d841690f", "patch": "@@ -1,3 +1,8 @@\n+2019-12-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/92834\n+\t* gcc.dg/tree-ssa/pr92834.c: New test.\n+\n 2019-12-09  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \tPR tree-optimization/89007"}, {"sha": "889048d3840dfb611c30a1de9476060ceba9b905", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr92834.c", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49647b7b25673273262fb630598027c6d841690f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr92834.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49647b7b25673273262fb630598027c6d841690f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr92834.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr92834.c?ref=49647b7b25673273262fb630598027c6d841690f", "patch": "@@ -0,0 +1,122 @@\n+/* PR tree-optimization/92834 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"MIN_EXPR <\" 8 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"MAX_EXPR <\" 8 \"optimized\" } } */\n+\n+static inline unsigned\n+umax1 (unsigned a, unsigned b)\n+{\n+  return a - ((a - b) & -(a < b));\n+}\n+\n+static inline unsigned\n+umin1 (unsigned a, unsigned b)\n+{\n+  return a - ((a - b) & -(a > b));\n+}\n+\n+static inline int\n+smax1 (int a, int b)\n+{\n+  return a - ((a - b) & -(a < b));\n+}\n+\n+static inline int\n+smin1 (int a, int b)\n+{\n+  return a - ((a - b) & -(a > b));\n+}\n+\n+static inline unsigned long long\n+umax2 (unsigned long long a, unsigned long long b)\n+{\n+  return a - ((a - b) & -(a <= b));\n+}\n+\n+static inline unsigned long long\n+umin2 (unsigned long long a, unsigned long long b)\n+{\n+  return a - ((a - b) & -(a >= b));\n+}\n+\n+static inline long long\n+smax2 (long long a, long long b)\n+{\n+  return a - ((a - b) & -(a <= b));\n+}\n+\n+static inline long long\n+smin2 (long long a, long long b)\n+{\n+  return a - ((a - b) & -(a >= b));\n+}\n+\n+static inline unsigned\n+umax3 (unsigned a, unsigned b)\n+{\n+  return a + ((b - a) & -(a < b));\n+}\n+\n+static inline unsigned\n+umin3 (unsigned a, unsigned b)\n+{\n+  return a + ((b - a) & -(a > b));\n+}\n+\n+static inline int\n+smax3 (int a, int b)\n+{\n+  return a + ((b - a) & -(a < b));\n+}\n+\n+static inline int\n+smin3 (int a, int b)\n+{\n+  return a + ((b - a) & -(a > b));\n+}\n+\n+static inline unsigned long long\n+umax4 (unsigned long long a, unsigned long long b)\n+{\n+  return a + ((b - a) & -(a <= b));\n+}\n+\n+static inline unsigned long long\n+umin4 (unsigned long long a, unsigned long long b)\n+{\n+  return a + ((b - a) & -(a >= b));\n+}\n+\n+static inline long long\n+smax4 (long long a, long long b)\n+{\n+  return a + ((b - a) & -(a <= b));\n+}\n+\n+static inline long long\n+smin4 (long long a, long long b)\n+{\n+  return a + ((b - a) & -(a >= b));\n+}\n+\n+void\n+test (unsigned *x, int *y, unsigned long long *z, long long *w)\n+{\n+  x[2] = umax1 (x[0], x[1]);\n+  x[5] = umin1 (x[2], x[3]);\n+  y[2] = smax1 (y[0], y[1]);\n+  y[5] = smin1 (y[2], y[3]);\n+  z[2] = umax2 (z[0], z[1]);\n+  z[5] = umin2 (z[2], z[3]);\n+  w[2] = smax2 (w[0], w[1]);\n+  w[5] = smin2 (w[2], w[3]);\n+  x[8] = umax3 (x[6], x[7]);\n+  x[11] = umin3 (x[9], x[10]);\n+  y[8] = smax3 (y[6], y[7]);\n+  y[11] = smin3 (y[9], y[10]);\n+  z[8] = umax4 (z[6], z[7]);\n+  z[11] = umin4 (z[9], z[10]);\n+  w[8] = smax4 (w[6], w[7]);\n+  w[11] = smin4 (w[9], w[10]);\n+}"}]}