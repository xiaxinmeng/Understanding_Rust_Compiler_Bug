{"sha": "cc10d5ed59d79c5a163b3bad715180249862ba09", "node_id": "C_kwDOANBUbNoAKGNjMTBkNWVkNTlkNzljNWExNjNiM2JhZDcxNTE4MDI0OTg2MmJhMDk", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-22T16:14:24Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-03-15T16:27:27Z"}, "message": "librust: Add libproc_macro and build system\n\nAdd some dummy files in libproc_macro along with it's build system.\n\nChangeLog:\n\n\t* libgrust/Makefile.am: New file.\n\t* libgrust/configure.ac: New file.\n\t* libgrust/libproc_macro/Makefile.am: New file.\n\t* libgrust/libproc_macro/proc_macro.cc: New file.\n\t* libgrust/libproc_macro/proc_macro.h: New file.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "dcf945788b1c747592b4fb1b9228ff657e14a8a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcf945788b1c747592b4fb1b9228ff657e14a8a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc10d5ed59d79c5a163b3bad715180249862ba09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc10d5ed59d79c5a163b3bad715180249862ba09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc10d5ed59d79c5a163b3bad715180249862ba09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc10d5ed59d79c5a163b3bad715180249862ba09/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bed6308e5e5201f409b041ca5e712d1ed8839195", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bed6308e5e5201f409b041ca5e712d1ed8839195", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bed6308e5e5201f409b041ca5e712d1ed8839195"}], "stats": {"total": 253, "additions": 253, "deletions": 0}, "files": [{"sha": "8e5274922c5681e8768762b6b7b022f83ff20e98", "filename": "libgrust/Makefile.am", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc10d5ed59d79c5a163b3bad715180249862ba09/libgrust%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc10d5ed59d79c5a163b3bad715180249862ba09/libgrust%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2FMakefile.am?ref=cc10d5ed59d79c5a163b3bad715180249862ba09", "patch": "@@ -0,0 +1,68 @@\n+AUTOMAKE_OPTIONS = 1.8 foreign\n+\n+SUFFIXES = .c .rs .def .o .lo .a\n+\n+ACLOCAL_AMFLAGS = -I . -I .. -I ../config\n+\n+AM_CFLAGS = -I $(srcdir)/../libgcc -I $(MULTIBUILDTOP)../../gcc/include\n+\n+TOP_GCCDIR := $(shell cd $(top_srcdir) && cd .. && pwd)\n+\n+GCC_DIR = $(TOP_GCCDIR)/gcc\n+RUST_SRC = $(GCC_DIR)/rust\n+\n+toolexeclibdir=@toolexeclibdir@\n+toolexecdir=@toolexecdir@\n+\n+SUBDIRS = libproc_macro\n+\n+RUST_BUILDDIR := $(shell pwd)\n+\n+# Work around what appears to be a GNU make bug handling MAKEFLAGS\n+# values defined in terms of make variables, as is the case for CC and\n+# friends when we are called from the top level Makefile.\n+AM_MAKEFLAGS = \\\n+        \"GCC_DIR=$(GCC_DIR)\" \\\n+        \"RUST_SRC=$(RUST_SRC)\" \\\n+\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n+\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n+\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n+\t\"RUST_FOR_TARGET=$(RUST_FOR_TARGET)\" \\\n+\t\"CFLAGS=$(CFLAGS)\" \\\n+\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n+\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n+\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n+\t\"INSTALL=$(INSTALL)\" \\\n+\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n+\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n+\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n+\t\"LDFLAGS=$(LDFLAGS)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\"MAKE=$(MAKE)\" \\\n+\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n+\t\"SHELL=$(SHELL)\" \\\n+\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n+\t\"exec_prefix=$(exec_prefix)\" \\\n+\t\"infodir=$(infodir)\" \\\n+\t\"libdir=$(libdir)\" \\\n+\t\"includedir=$(includedir)\" \\\n+\t\"prefix=$(prefix)\" \\\n+\t\"tooldir=$(tooldir)\" \\\n+\t\"gxx_include_dir=$(gxx_include_dir)\" \\\n+\t\"AR=$(AR)\" \\\n+\t\"AS=$(AS)\" \\\n+\t\"LD=$(LD)\" \\\n+\t\"RANLIB=$(RANLIB)\" \\\n+\t\"NM=$(NM)\" \\\n+\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n+\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n+\t\"DESTDIR=$(DESTDIR)\" \\\n+\t\"WERROR=$(WERROR)\" \\\n+        \"TARGET_LIB_PATH=$(TARGET_LIB_PATH)\" \\\n+        \"TARGET_LIB_PATH_librust=$(TARGET_LIB_PATH_librust)\" \\\n+\t\"LIBTOOL=$(RUST_BUILDDIR)/libtool\"\n+\n+include $(top_srcdir)/../multilib.am"}, {"sha": "7aed489a643d95a874ccbd6f8bfcaee1346eea0b", "filename": "libgrust/configure.ac", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc10d5ed59d79c5a163b3bad715180249862ba09/libgrust%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc10d5ed59d79c5a163b3bad715180249862ba09/libgrust%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Fconfigure.ac?ref=cc10d5ed59d79c5a163b3bad715180249862ba09", "patch": "@@ -0,0 +1,113 @@\n+AC_INIT([libgrust], version-unused,,librust)\n+AC_CONFIG_SRCDIR(Makefile.am)\n+AC_CONFIG_FILES([Makefile])\n+\n+# AM_ENABLE_MULTILIB(, ..)\n+\n+# Do not delete or change the following two lines.  For why, see\n+# http://gcc.gnu.org/ml/libstdc++/2003-07/msg00451.html\n+AC_CANONICAL_SYSTEM\n+target_alias=${target_alias-$host_alias}\n+AC_SUBST(target_alias)\n+\n+# Automake should never attempt to rebuild configure\n+AM_MAINTAINER_MODE\n+\n+AM_INIT_AUTOMAKE([1.15.1 foreign no-dist -Wall])\n+\n+# Make sure we don't test executables when making cross-tools.\n+GCC_NO_EXECUTABLES\n+\n+\n+# Add the ability to change LIBTOOL directory\n+GCC_WITH_TOOLEXECLIBDIR\n+\n+# Use system specific extensions\n+AC_USE_SYSTEM_EXTENSIONS\n+\n+\n+# Checks for header files.\n+AC_HEADER_STDC\n+AC_HEADER_SYS_WAIT\n+AC_CHECK_HEADERS(limits.h stddef.h string.h strings.h stdlib.h \\\n+                 time.h sys/stat.h wchar.h)\n+\n+# Check for tools\n+AM_PROG_AR\n+AC_PROG_CC\n+AC_PROG_CXX\n+AM_PROG_AS\n+AC_PROG_MAKE_SET\n+AC_PROG_INSTALL\n+\n+# Enable libtool\n+LT_INIT\n+\n+# target_noncanonical variables...\n+AC_CANONICAL_HOST\n+ACX_NONCANONICAL_HOST\n+ACX_NONCANONICAL_TARGET\n+GCC_TOPLEV_SUBDIRS\n+\n+AC_MSG_CHECKING([for --enable-version-specific-runtime-libs])\n+AC_ARG_ENABLE(version-specific-runtime-libs,\n+[  --enable-version-specific-runtime-libs    Specify that runtime libraries should be installed in a compiler-specific directory ],\n+[case \"$enableval\" in\n+ yes) version_specific_libs=yes ;;\n+ no)  version_specific_libs=no ;;\n+ *)   AC_MSG_ERROR([Unknown argument to enable/disable version-specific libs]);;\n+ esac],\n+[version_specific_libs=no])\n+AC_MSG_RESULT($version_specific_libs)\n+\n+toolexecdir=no\n+toolexeclibdir=no\n+\n+# Calculate toolexeclibdir\n+# Also toolexecdir, though it's only used in toolexeclibdir\n+case ${version_specific_libs} in\n+  yes)\n+    # Need the gcc compiler version to know where to install libraries\n+    # and header files if --enable-version-specific-runtime-libs option\n+    # is selected.\n+    toolexecdir='$(libdir)/gcc/$(target_noncanonical)'\n+    toolexeclibdir='$(toolexecdir)/$(gcc_version)$(MULTISUBDIR)'\n+    ;;\n+  no)\n+    if test -n \"$with_cross_host\" &&\n+       test x\"$with_cross_host\" != x\"no\"; then\n+      # Install a library built with a cross compiler in tooldir, not libdir.\n+      toolexecdir='$(exec_prefix)/$(target_noncanonical)'\n+      toolexeclibdir='$(toolexecdir)/lib'\n+    else\n+      toolexecdir='$(libdir)/gcc-lib/$(target_noncanonical)'\n+      toolexeclibdir='$(libdir)'\n+    fi\n+    multi_os_directory=`$CC -print-multi-os-directory`\n+    case $multi_os_directory in\n+      .) ;; # Avoid trailing /.\n+      *) toolexeclibdir=$toolexeclibdir/$multi_os_directory ;;\n+    esac\n+    ;;\n+esac\n+\n+AC_SUBST(toolexecdir)\n+AC_SUBST(toolexeclibdir)\n+\n+\n+AC_CONFIG_FILES(AC_FOREACH([DIR], [libproc_macro], [DIR/Makefile ]),\n+ [ cat > vpsed$$ << \\_EOF\n+s!`test -f '$<' || echo '$(srcdir)/'`!!\n+_EOF\n+   sed -f vpsed$$ $ac_file > tmp$$\n+   mv tmp$$ $ac_file\n+   rm vpsed$$\n+   echo 'MULTISUBDIR =' >> $ac_file\n+   ml_norecursion=yes\n+   AS_UNSET([ml_norecursion])\n+])\n+\n+\n+AC_MSG_NOTICE([librust has been configured.])\n+\n+AC_OUTPUT"}, {"sha": "1e61d12e50627cc7f46868406202627da37be563", "filename": "libgrust/libproc_macro/Makefile.am", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc10d5ed59d79c5a163b3bad715180249862ba09/libgrust%2Flibproc_macro%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc10d5ed59d79c5a163b3bad715180249862ba09/libgrust%2Flibproc_macro%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2FMakefile.am?ref=cc10d5ed59d79c5a163b3bad715180249862ba09", "patch": "@@ -0,0 +1,58 @@\n+SUFFIXES = .cc .o .a .lo .la\n+\n+ACLOCAL_AMFLAGS = -I .. -I ../../config\n+\n+toolexeclibdir=@toolexeclibdir@\n+toolexecdir=@toolexecdir@\n+\n+# Work around what appears to be a GNU make bug handling MAKEFLAGS\n+# values defined in terms of make variables, as is the case for CC and\n+# friends when we are called from the top level Makefile.\n+AM_MAKEFLAGS = \\\n+\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n+\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n+\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n+\t\"CFLAGS=$(CFLAGS)\" \\\n+\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n+\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n+\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n+\t\"INSTALL=$(INSTALL)\" \\\n+\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n+\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n+\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n+\t\"LDFLAGS=$(LDFLAGS)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\"MAKE=$(MAKE)\" \\\n+\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n+\t\"SHELL=$(SHELL)\" \\\n+\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n+\t\"exec_prefix=$(exec_prefix)\" \\\n+\t\"infodir=$(infodir)\" \\\n+\t\"libdir=$(libdir)\" \\\n+\t\"includedir=$(includedir)\" \\\n+\t\"prefix=$(prefix)\" \\\n+\t\"tooldir=$(tooldir)\" \\\n+\t\"gxx_include_dir=$(gxx_include_dir)\" \\\n+\t\"AR=$(AR)\" \\\n+\t\"AS=$(AS)\" \\\n+\t\"LD=$(LD)\" \\\n+\t\"RANLIB=$(RANLIB)\" \\\n+\t\"NM=$(NM)\" \\\n+\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n+\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n+\t\"DESTDIR=$(DESTDIR)\" \\\n+\t\"WERROR=$(WERROR)\" \\\n+        \"TARGET_LIB_PATH=$(TARGET_LIB_PATH)\" \\\n+        \"TARGET_LIB_PATH_libgm2=$(TARGET_LIB_PATH_libgm2)\"\n+\n+toolexeclib_LTLIBRARIES = libproc_macro.la\n+\n+libproc_macro_la_SOURCES = \\\n+\tproc_macro.cc\n+\n+include_HEADERS = \\\n+\tproc_macro.h\n+"}, {"sha": "d13276294aad888e55375c73d8806aea111fd31c", "filename": "libgrust/libproc_macro/proc_macro.cc", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc10d5ed59d79c5a163b3bad715180249862ba09/libgrust%2Flibproc_macro%2Fproc_macro.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc10d5ed59d79c5a163b3bad715180249862ba09/libgrust%2Flibproc_macro%2Fproc_macro.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fproc_macro.cc?ref=cc10d5ed59d79c5a163b3bad715180249862ba09", "patch": "@@ -0,0 +1,7 @@\n+#include \"proc_macro.h\"\n+\n+int\n+test ()\n+{\n+  return 0;\n+}"}, {"sha": "2c96b3de685828eae1c8a327d59fce4655a40d13", "filename": "libgrust/libproc_macro/proc_macro.h", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc10d5ed59d79c5a163b3bad715180249862ba09/libgrust%2Flibproc_macro%2Fproc_macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc10d5ed59d79c5a163b3bad715180249862ba09/libgrust%2Flibproc_macro%2Fproc_macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fproc_macro.h?ref=cc10d5ed59d79c5a163b3bad715180249862ba09", "patch": "@@ -0,0 +1,7 @@\n+#ifndef PROC_MACRO_H\n+#define PROC_MACRO_H\n+\n+int\n+test ();\n+\n+#endif /* ! PROC_MACRO_H */"}]}