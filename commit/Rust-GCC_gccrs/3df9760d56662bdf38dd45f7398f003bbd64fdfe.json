{"sha": "3df9760d56662bdf38dd45f7398f003bbd64fdfe", "node_id": "C_kwDOANBUbNoAKDNkZjk3NjBkNTY2NjJiZGYzOGRkNDVmNzM5OGYwMDNiYmQ2NGZkZmU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-09T18:25:44Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-09T18:25:44Z"}, "message": "libstdc++: extraneous begin in cartesian_product_view::end [PR107572]\n\nranges::begin() isn't guaranteed to be equality-preserving for non-forward\nranges, so in cartesian_product_view::end we need to avoid needlessly\ncalling begin() on the first range (which could be non-forward) in the\ncase where __empty_tail is false as per its specification.\n\nSince we're already using a variadic lambda to compute __empty_tail, we\nmight as well use that same lambda to build up the tuple of iterators\ninstead of building it separately via e.g. std::apply or __tuple_transform.\n\n\tPR libstdc++/107572\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (cartesian_product_view::end): When\n\tbuilding the tuple of iterators, avoid calling ranges::begin on\n\tthe first range if __empty_tail is false.\n\t* testsuite/std/ranges/cartesian_product/1.cc (test07): New test.", "tree": {"sha": "6fafe86659845799b304eafc26df20091727eda3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fafe86659845799b304eafc26df20091727eda3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3df9760d56662bdf38dd45f7398f003bbd64fdfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df9760d56662bdf38dd45f7398f003bbd64fdfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3df9760d56662bdf38dd45f7398f003bbd64fdfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df9760d56662bdf38dd45f7398f003bbd64fdfe/comments", "author": null, "committer": null, "parents": [{"sha": "f366fdfeec0af6cda716de913c32e48f9b1e3a0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f366fdfeec0af6cda716de913c32e48f9b1e3a0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f366fdfeec0af6cda716de913c32e48f9b1e3a0e"}], "stats": {"total": 56, "additions": 44, "deletions": 12}, "files": [{"sha": "0a65d74bb5bd1b4800044223cb1b9d43a0f5b802", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df9760d56662bdf38dd45f7398f003bbd64fdfe/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df9760d56662bdf38dd45f7398f003bbd64fdfe/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=3df9760d56662bdf38dd45f7398f003bbd64fdfe", "patch": "@@ -8078,27 +8078,35 @@ namespace views::__adaptor\n     end() requires ((!__detail::__simple_view<_First> || ... || !__detail::__simple_view<_Vs>)\n \t\t    && __detail::__cartesian_product_is_common<_First, _Vs...>)\n     {\n-      bool __empty_tail = [this]<size_t... _Is>(index_sequence<_Is...>) {\n-\treturn (ranges::empty(std::get<1 + _Is>(_M_bases)) || ...);\n+      auto __its = [this]<size_t... _Is>(index_sequence<_Is...>) {\n+\tusing _Ret = __detail::__tuple_or_pair_t<iterator_t<_First>,\n+\t\t\t\t\t\t iterator_t<_Vs>...>;\n+\tbool __empty_tail = (ranges::empty(std::get<1 + _Is>(_M_bases)) || ...);\n+\tauto& __first = std::get<0>(_M_bases);\n+\treturn _Ret{(__empty_tail\n+\t\t     ? ranges::begin(__first)\n+\t\t     : __detail::__cartesian_common_arg_end(__first)),\n+\t\t    ranges::begin(std::get<1 + _Is>(_M_bases))...};\n       }(make_index_sequence<sizeof...(_Vs)>{});\n \n-      auto __it = __detail::__tuple_transform(ranges::begin, _M_bases);\n-      if (!__empty_tail)\n-\tstd::get<0>(__it) = __detail::__cartesian_common_arg_end(std::get<0>(_M_bases));\n-      return _Iterator<false>{*this, std::move(__it)};\n+      return _Iterator<false>{*this, std::move(__its)};\n     }\n \n     constexpr _Iterator<true>\n     end() const requires __detail::__cartesian_product_is_common<const _First, const _Vs...>\n     {\n-      bool __empty_tail = [this]<size_t... _Is>(index_sequence<_Is...>) {\n-\treturn (ranges::empty(std::get<1 + _Is>(_M_bases)) || ...);\n+      auto __its = [this]<size_t... _Is>(index_sequence<_Is...>) {\n+\tusing _Ret = __detail::__tuple_or_pair_t<iterator_t<const _First>,\n+\t\t\t\t\t\t iterator_t<const _Vs>...>;\n+\tbool __empty_tail = (ranges::empty(std::get<1 + _Is>(_M_bases)) || ...);\n+\tauto& __first = std::get<0>(_M_bases);\n+\treturn _Ret{(__empty_tail\n+\t\t     ? ranges::begin(__first)\n+\t\t     : __detail::__cartesian_common_arg_end(__first)),\n+\t\t    ranges::begin(std::get<1 + _Is>(_M_bases))...};\n       }(make_index_sequence<sizeof...(_Vs)>{});\n \n-      auto __it = __detail::__tuple_transform(ranges::begin, _M_bases);\n-      if (!__empty_tail)\n-\tstd::get<0>(__it) = __detail::__cartesian_common_arg_end(std::get<0>(_M_bases));\n-      return _Iterator<true>{*this, std::move(__it)};\n+      return _Iterator<true>{*this, std::move(__its)};\n     }\n \n     constexpr default_sentinel_t"}, {"sha": "f52c2b96d5860bc80882a68df796c6fd46bd0b2b", "filename": "libstdc++-v3/testsuite/std/ranges/cartesian_product/1.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df9760d56662bdf38dd45f7398f003bbd64fdfe/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fcartesian_product%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df9760d56662bdf38dd45f7398f003bbd64fdfe/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fcartesian_product%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fcartesian_product%2F1.cc?ref=3df9760d56662bdf38dd45f7398f003bbd64fdfe", "patch": "@@ -3,6 +3,7 @@\n \n #include <ranges>\n #include <algorithm>\n+#include <sstream>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n \n@@ -178,6 +179,28 @@ test06()\n   return true;\n }\n \n+void\n+test07()\n+{\n+  // PR libstdc++/107572\n+  static std::istringstream ints(\"0 1 2 3 4\");\n+  struct istream_range {\n+    auto begin() { return std::istream_iterator<int>{ints}; }\n+    auto end() { return std::istream_iterator<int>{}; }\n+    using iterator_concept = std::input_iterator_tag;\n+  };\n+  static_assert(!ranges::forward_range<istream_range>\n+\t\t&& ranges::common_range<istream_range>);\n+  istream_range r;\n+  int i = 0;\n+  for (auto [v] : views::cartesian_product(r))\n+    {\n+      VERIFY( v == i );\n+      ++i;\n+    };\n+  VERIFY( i == 5 );\n+}\n+\n int\n main()\n {\n@@ -187,4 +210,5 @@ main()\n   test04();\n   test05();\n   static_assert(test06());\n+  test07();\n }"}]}