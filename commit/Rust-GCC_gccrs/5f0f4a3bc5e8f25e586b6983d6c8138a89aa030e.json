{"sha": "5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYwZjRhM2JjNWU4ZjI1ZTU4NmI2OTgzZDZjODEzOGE4OWFhMDMwZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-05-26T13:40:53Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-05-26T13:40:53Z"}, "message": "diagnostic.c: Don't include opts.h.\n\n\t* diagnostic.c: Don't include opts.h.\n\t(permissive_error_option): Define.\n\t(diagnostic_initialize): Take n_opts parameter.  Allocate memory\n\tfor classify_diagnostic.  Don't use memset for\n\tclassify_diagnostic.  Initialize new and recently added fields.\n\t(diagnostic_classify_diagnostic): Use context->n_opts instead of\n\tN_OPTS.\n\t(diagnostic_report_diagnostic): Pass context parameter to\n\tdiagnostic_report_warnings_p.  Use option_enabled and option_name\n\thooks from context.\n\t(emit_diagnostic): Use permissive_error_option.\n\t(permerror): Likewise.\n\t* diagnostic.h: Don't include options.h.\n\t(struct diagnostic_context): Add n_opts, opt_permissive,\n\tinhibit_warnings, warn_system_headers, option_enabled and\n\toption_name fields.  Change classify_diagnostic to a pointer.\n\t* opts-diagnostic.h: New file.\n\t* opts.c: Include opts-diagnostic.h.\n\t(common_handle_option): Set global_dc fields for -Wfatal-errors,\n\t-Wsystem-headers, -fshow-column, -pedantic-errors and -w.\n\t(option_name): New function.\n\t* c-opts.c (c_common_init_options): Set global_dc->opt_permissive.\n\t(c_common_handle_option): Set global_dc->permissive for\n\t-fpermissive.\n\t* c-common.c (c_cpp_error): Save and restore\n\tglobal_dc->warn_system_headers, not variable warn_system_headers.\n\t* toplev.c: Include opts-diagnostic.h.\n\t(general_init): Update call to diagnostic_initialize.  Set\n\tglobal_dc->show_column, global_dc->option_enabled and\n\tglobal_dc->option_name.\n\t(process_options): Don't set global_dc fields here.\n\t* Makefile.in (DIAGNOSTIC_H): Remove options.h.\n\t(diagnostic.o, opts.o, toplev.o): Update dependencies.\n\nfortran:\n\t* cpp.c (cb_cpp_error): Save and restore\n\tglobal_dc->warn_system_headers, not variable warn_system_headers.\n\nFrom-SVN: r159869", "tree": {"sha": "cb4cbcf522a027e78291661bf1d98cb25d1f7585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb4cbcf522a027e78291661bf1d98cb25d1f7585"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f024f85d3d72a196f4612ad97b9d422dfdbb2da5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f024f85d3d72a196f4612ad97b9d422dfdbb2da5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f024f85d3d72a196f4612ad97b9d422dfdbb2da5"}], "stats": {"total": 276, "additions": 208, "deletions": 68}, "files": [{"sha": "becf94a1ae21e3f3b838c4f05efd37d4cb1e796e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e", "patch": "@@ -1,3 +1,39 @@\n+2010-05-26  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* diagnostic.c: Don't include opts.h.\n+\t(permissive_error_option): Define.\n+\t(diagnostic_initialize): Take n_opts parameter.  Allocate memory\n+\tfor classify_diagnostic.  Don't use memset for\n+\tclassify_diagnostic.  Initialize new and recently added fields.\n+\t(diagnostic_classify_diagnostic): Use context->n_opts instead of\n+\tN_OPTS.\n+\t(diagnostic_report_diagnostic): Pass context parameter to\n+\tdiagnostic_report_warnings_p.  Use option_enabled and option_name\n+\thooks from context.\n+\t(emit_diagnostic): Use permissive_error_option.\n+\t(permerror): Likewise.\n+\t* diagnostic.h: Don't include options.h.\n+\t(struct diagnostic_context): Add n_opts, opt_permissive,\n+\tinhibit_warnings, warn_system_headers, option_enabled and\n+\toption_name fields.  Change classify_diagnostic to a pointer.\n+\t* opts-diagnostic.h: New file.\n+\t* opts.c: Include opts-diagnostic.h.\n+\t(common_handle_option): Set global_dc fields for -Wfatal-errors,\n+\t-Wsystem-headers, -fshow-column, -pedantic-errors and -w.\n+\t(option_name): New function.\n+\t* c-opts.c (c_common_init_options): Set global_dc->opt_permissive.\n+\t(c_common_handle_option): Set global_dc->permissive for\n+\t-fpermissive.\n+\t* c-common.c (c_cpp_error): Save and restore\n+\tglobal_dc->warn_system_headers, not variable warn_system_headers.\n+\t* toplev.c: Include opts-diagnostic.h.\n+\t(general_init): Update call to diagnostic_initialize.  Set\n+\tglobal_dc->show_column, global_dc->option_enabled and\n+\tglobal_dc->option_name.\n+\t(process_options): Don't set global_dc fields here.\n+\t* Makefile.in (DIAGNOSTIC_H): Remove options.h.\n+\t(diagnostic.o, opts.o, toplev.o): Update dependencies.\n+\n 2010-04-30  Hariharan Sandanagobalane  <hariharan@picochip.com>\n \n \t* config/picochip/picochip.md (movsi): Split a movsi from a"}, {"sha": "bbb16f9a74355b1656e6e8e120c955f87579320d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e", "patch": "@@ -942,7 +942,7 @@ TREE_SSA_LIVE_H = tree-ssa-live.h $(PARTITION_H) vecprim.h\n TREE_VECTORIZER_H = tree-vectorizer.h $(TREE_DATA_REF_H)\n SSAEXPAND_H = ssaexpand.h $(TREE_SSA_LIVE_H)\n PRETTY_PRINT_H = pretty-print.h $(INPUT_H) $(OBSTACK_H)\n-DIAGNOSTIC_H = diagnostic.h diagnostic.def $(PRETTY_PRINT_H) options.h\n+DIAGNOSTIC_H = diagnostic.h diagnostic.def $(PRETTY_PRINT_H)\n C_PRETTY_PRINT_H = c-pretty-print.h $(PRETTY_PRINT_H) $(C_COMMON_H) $(TREE_H)\n SCEV_H = tree-scalar-evolution.h $(GGC_H) tree-chrec.h $(PARAMS_H)\n LAMBDA_H = lambda.h $(TREE_H) vec.h $(GGC_H)\n@@ -2735,12 +2735,12 @@ fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(GIMPLE_H) realmpfr.h\n diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    version.h $(INPUT_H) $(TOPLEV_H) intl.h $(DIAGNOSTIC_H) \\\n-   diagnostic.def opts.h\n+   diagnostic.def\n opts.o : opts.c opts.h options.h $(TOPLEV_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TREE_H) $(TM_H) langhooks.h $(GGC_H) $(EXPR_H) $(RTL_H) \\\n    output.h $(DIAGNOSTIC_H) $(TM_P_H) $(INSN_ATTR_H) intl.h $(TARGET_H) \\\n    $(FLAGS_H) $(PARAMS_H) $(TREE_PASS_H) $(DBGCNT_H) debug.h \\\n-   $(PLUGIN_H) $(EXCEPT_H) $(LTO_STREAMER_H)\n+   $(PLUGIN_H) $(EXCEPT_H) $(LTO_STREAMER_H) opts-diagnostic.h\n opts-common.o : opts-common.c opts.h $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h intl.h\n targhooks.o : targhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n@@ -2766,7 +2766,7 @@ toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(CGRAPH_H) $(COVERAGE_H) alloc-pool.h $(GGC_H) $(INTEGRATE_H) \\\n    opts.h params.def tree-mudflap.h $(TREE_PASS_H) $(GIMPLE_H) \\\n    tree-ssa-alias.h $(PLUGIN_H) realmpfr.h tree-diagnostic.h \\\n-   tree-pretty-print.h\n+   tree-pretty-print.h opts-diagnostic.h\n \t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n \t  -DTARGET_NAME=\\\"$(target_noncanonical)\\\" \\\n \t  -c $(srcdir)/toplev.c $(OUTPUT_OPTION)"}, {"sha": "cadf7574ccd1a6f1aed3ef9ff1dee6cd84195937", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e", "patch": "@@ -8364,15 +8364,15 @@ c_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level, int reason,\n {\n   diagnostic_info diagnostic;\n   diagnostic_t dlevel;\n-  int save_warn_system_headers = warn_system_headers;\n+  bool save_warn_system_headers = global_dc->warn_system_headers;\n   bool ret;\n \n   switch (level)\n     {\n     case CPP_DL_WARNING_SYSHDR:\n       if (flag_no_output)\n \treturn false;\n-      warn_system_headers = 1;\n+      global_dc->warn_system_headers = 1;\n       /* Fall through.  */\n     case CPP_DL_WARNING:\n       if (flag_no_output)\n@@ -8409,7 +8409,7 @@ c_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level, int reason,\n                                     c_option_controlling_cpp_error (reason));\n   ret = report_diagnostic (&diagnostic);\n   if (level == CPP_DL_WARNING_SYSHDR)\n-    warn_system_headers = save_warn_system_headers;\n+    global_dc->warn_system_headers = save_warn_system_headers;\n   return ret;\n }\n "}, {"sha": "d83045be48cee92f319ef23a92308312e206c786", "filename": "gcc/c-opts.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e", "patch": "@@ -304,6 +304,8 @@ c_common_init_options (unsigned int argc, const char **argv)\n       diagnostic_prefixing_rule (global_dc) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n     }\n \n+  global_dc->opt_permissive = OPT_fpermissive;\n+\n   parse_in = cpp_create_reader (c_dialect_cxx () ? CLK_GNUCXX: CLK_GNUC89,\n \t\t\t\tident_hash, line_table);\n   cb = cpp_get_callbacks (parse_in);\n@@ -848,7 +850,7 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_fpermissive:\n-      flag_permissive = value;\n+      global_dc->permissive = flag_permissive = value;\n       break;\n \n     case OPT_fpreprocessed:"}, {"sha": "0fbf58fa92802a58091263052fac82b6659438e3", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 33, "deletions": 38, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e", "patch": "@@ -31,11 +31,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"toplev.h\"\n #include \"intl.h\"\n #include \"diagnostic.h\"\n-#include \"opts.h\"\n \n #define pedantic_warning_kind(DC)\t\t\t\\\n   ((DC)->pedantic_errors ? DK_ERROR : DK_WARNING)\n #define permissive_error_kind(DC) ((DC)->permissive ? DK_WARNING : DK_ERROR)\n+#define permissive_error_option(DC) ((DC)->opt_permissive)\n \n /* Prototypes.  */\n static char *build_message_string (const char *, ...) ATTRIBUTE_PRINTF_1;\n@@ -77,8 +77,10 @@ file_name_as_prefix (const char *f)\n \f\n /* Initialize the diagnostic message outputting machinery.  */\n void\n-diagnostic_initialize (diagnostic_context *context)\n+diagnostic_initialize (diagnostic_context *context, int n_opts)\n {\n+  int i;\n+\n   /* Allocate a basic pretty-printer.  Clients will replace this a\n      much more elaborated pretty-printer if they wish.  */\n   context->printer = XNEW (pretty_printer);\n@@ -91,13 +93,24 @@ diagnostic_initialize (diagnostic_context *context)\n   memset (context->diagnostic_count, 0, sizeof context->diagnostic_count);\n   context->some_warnings_are_errors = false;\n   context->warning_as_error_requested = false;\n-  memset (context->classify_diagnostic, DK_UNSPECIFIED,\n-\t  sizeof context->classify_diagnostic);\n+  context->n_opts = n_opts;\n+  context->classify_diagnostic = XNEWVEC (diagnostic_t, n_opts);\n+  for (i = 0; i < n_opts; i++)\n+    context->classify_diagnostic[i] = DK_UNSPECIFIED;\n   context->show_option_requested = false;\n   context->abort_on_error = false;\n+  context->show_column = false;\n+  context->pedantic_errors = false;\n+  context->permissive = false;\n+  context->opt_permissive = 0;\n+  context->fatal_errors = false;\n+  context->inhibit_warnings = false;\n+  context->warn_system_headers = false;\n   context->internal_error = NULL;\n   diagnostic_starter (context) = default_diagnostic_starter;\n   diagnostic_finalizer (context) = default_diagnostic_finalizer;\n+  context->option_enabled = NULL;\n+  context->option_name = NULL;\n   context->last_module = 0;\n   context->x_data = NULL;\n   context->lock = 0;\n@@ -295,7 +308,7 @@ diagnostic_classify_diagnostic (diagnostic_context *context,\n   diagnostic_t old_kind;\n \n   if (option_index <= 0\n-      || option_index >= N_OPTS\n+      || option_index >= context->n_opts\n       || new_kind >= DK_LAST_DIAGNOSTIC_KIND)\n     return DK_UNSPECIFIED;\n \n@@ -322,7 +335,7 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n   /* Give preference to being able to inhibit warnings, before they\n      get reclassified to something else.  */\n   if ((diagnostic->kind == DK_WARNING || diagnostic->kind == DK_PEDWARN)\n-      && !diagnostic_report_warnings_p (location))\n+      && !diagnostic_report_warnings_p (context, location))\n     return false;\n \n   if (diagnostic->kind == DK_PEDWARN)\n@@ -360,7 +373,7 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n     {\n       /* This tests if the user provided the appropriate -Wfoo or\n \t -Wno-foo option.  */\n-      if (! option_enabled (diagnostic->option_index))\n+      if (! context->option_enabled (diagnostic->option_index))\n \treturn false;\n       /* This tests if the user provided the appropriate -Werror=foo\n \t option.  */\n@@ -405,38 +418,20 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n   saved_format_spec = diagnostic->message.format_spec;\n   if (context->show_option_requested)\n     {\n-      const char * option_text = NULL;\n+      char *option_text;\n \n-      if (diagnostic->option_index)\n-\t{\n-\t  /* A warning classified as an error.  */\n-\t  if ((orig_diag_kind == DK_WARNING || orig_diag_kind == DK_PEDWARN)\n-\t      && diagnostic->kind == DK_ERROR)\n-\t    option_text \n-\t      = ACONCAT ((cl_options[OPT_Werror_].opt_text,\n-\t\t\t  /* Skip over \"-W\".  */\n-\t\t\t  cl_options[diagnostic->option_index].opt_text + 2,\n-\t\t\t  NULL));\n-\t  /* A warning with option.  */\n-\t  else\n-\t    option_text = cl_options[diagnostic->option_index].opt_text;\n-\t}\n-      /* A warning without option classified as an error.  */\n-      else if (orig_diag_kind == DK_WARNING || orig_diag_kind == DK_PEDWARN\n-\t       || diagnostic->kind == DK_WARNING)\n-\t{\n-\t  if (context->warning_as_error_requested)\n-\t    option_text = cl_options[OPT_Werror].opt_text;\n-\t  else\n-\t    option_text = _(\"enabled by default\");\n-\t}\n+      option_text = context->option_name (context, diagnostic->option_index,\n+\t\t\t\t\t  orig_diag_kind, diagnostic->kind);\n \n       if (option_text)\n-\tdiagnostic->message.format_spec\n-\t  = ACONCAT ((diagnostic->message.format_spec,\n-\t\t      \" \", \n-\t\t      \"[\", option_text, \"]\",\n-\t\t      NULL));\n+\t{\n+\t  diagnostic->message.format_spec\n+\t    = ACONCAT ((diagnostic->message.format_spec,\n+\t\t\t\" \", \n+\t\t\t\"[\", option_text, \"]\",\n+\t\t\tNULL));\n+\t  free (option_text);\n+\t}\n     }\n   diagnostic->message.locus = &diagnostic->location;\n   diagnostic->message.x_data = &diagnostic->x_data;\n@@ -519,7 +514,7 @@ emit_diagnostic (diagnostic_t kind, location_t location, int opt,\n     {\n       diagnostic_set_info (&diagnostic, gmsgid, &ap, location,\n \t\t\t   permissive_error_kind (global_dc));\n-      diagnostic.option_index = OPT_fpermissive;\n+      diagnostic.option_index = permissive_error_option (global_dc);\n     }\n   else {\n       diagnostic_set_info (&diagnostic, gmsgid, &ap, location, kind);\n@@ -638,7 +633,7 @@ permerror (location_t location, const char *gmsgid, ...)\n   va_start (ap, gmsgid);\n   diagnostic_set_info (&diagnostic, gmsgid, &ap, location,\n                        permissive_error_kind (global_dc));\n-  diagnostic.option_index = OPT_fpermissive;\n+  diagnostic.option_index = permissive_error_option (global_dc);\n   va_end (ap);\n   return report_diagnostic (&diagnostic);\n }"}, {"sha": "7aa053188d4ce3deca096ebba56d19c9472cd13f", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e", "patch": "@@ -23,7 +23,6 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_DIAGNOSTIC_H\n \n #include \"pretty-print.h\"\n-#include \"options.h\"\n \n /* Constants used to discriminate diagnostics.  */\n typedef enum\n@@ -73,12 +72,17 @@ struct diagnostic_context\n   /* True if it has been requested that warnings be treated as errors.  */\n   bool warning_as_error_requested;\n \n-  /* For each option index that can be passed to warning() et all\n-     (OPT_* from options.h), this array may contain a new kind that\n-     the diagnostic should be changed to before reporting, or\n-     DK_UNSPECIFIED to leave it as the reported kind, or DK_IGNORED to\n-     not report it at all.  N_OPTS is from <options.h>.  */\n-  diagnostic_t classify_diagnostic[N_OPTS];\n+  /* The number of option indexes that can be passed to warning() et\n+     al.  */\n+  int n_opts;\n+\n+  /* For each option index that can be passed to warning() et al\n+     (OPT_* from options.h when using this code with the core GCC\n+     options), this array may contain a new kind that the diagnostic\n+     should be changed to before reporting, or DK_UNSPECIFIED to leave\n+     it as the reported kind, or DK_IGNORED to not report it at\n+     all.  */\n+  diagnostic_t *classify_diagnostic;\n \n   /* True if we should print the command line option which controls\n      each diagnostic, if known.  */\n@@ -96,9 +100,19 @@ struct diagnostic_context\n   /* True if permerrors are warnings.  */\n   bool permissive;\n \n+  /* The index of the option to associate with turning permerrors into\n+     warnings.  */\n+  int opt_permissive;\n+\n   /* True if errors are fatal.  */\n   bool fatal_errors;\n \n+  /* True if all warnings should be disabled.  */\n+  bool inhibit_warnings;\n+\n+  /* True if warnings should be given in system headers.  */\n+  bool warn_system_headers;\n+\n   /* This function is called before any message is printed out.  It is\n      responsible for preparing message prefix and such.  For example, it\n      might say:\n@@ -114,6 +128,18 @@ struct diagnostic_context\n   /* Client hook to report an internal error.  */\n   void (*internal_error) (diagnostic_context *, const char *, va_list *);\n \n+  /* Client hook to say whether the option controlling a diagnostic is\n+     enabled.  Returns nonzero if enabled, zero if disabled.  */\n+  int (*option_enabled) (int);\n+\n+  /* Client hook to return the name of an option that controls a\n+     diagnostic.  Returns malloced memory.  The first diagnostic_t\n+     argument is the kind of diagnostic before any reclassification\n+     (of warnings as errors, etc.); the second is the kind after any\n+     reclassification.  May return NULL if no name is to be printed.\n+     May be passed 0 as well as the index of a particular option.  */\n+  char *(*option_name) (diagnostic_context *, int, diagnostic_t, diagnostic_t);\n+\n   /* Auxiliary data for client.  */\n   void *x_data;\n \n@@ -187,9 +213,9 @@ extern diagnostic_context *global_dc;\n #define sorrycount diagnostic_kind_count (global_dc, DK_SORRY)\n \n /* Returns nonzero if warnings should be emitted.  */\n-#define diagnostic_report_warnings_p(LOC)\t\t\t\\\n-  (!inhibit_warnings\t\t\t\t\t\\\n-   && !(in_system_header_at (LOC) && !warn_system_headers))\n+#define diagnostic_report_warnings_p(DC, LOC)\t\t\t\t\\\n+  (!(DC)->inhibit_warnings\t\t\t\t\t\t\\\n+   && !(in_system_header_at (LOC) && !(DC)->warn_system_headers))\n \n #define report_diagnostic(D) diagnostic_report_diagnostic (global_dc, D)\n \n@@ -203,7 +229,7 @@ extern diagnostic_context *global_dc;\n     ((DI)->option_index = (OPTIDX))\n \n /* Diagnostic related functions.  */\n-extern void diagnostic_initialize (diagnostic_context *);\n+extern void diagnostic_initialize (diagnostic_context *, int);\n extern void diagnostic_finish (diagnostic_context *);\n extern void diagnostic_report_current_module (diagnostic_context *);\n "}, {"sha": "1566d08f9b6fadfffd22f87630b58eba35be8a86", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e", "patch": "@@ -1,3 +1,8 @@\n+2010-05-26  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* cpp.c (cb_cpp_error): Save and restore\n+\tglobal_dc->warn_system_headers, not variable warn_system_headers.\n+\n 2010-05-26  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* fortran/f95-lang.c: Do not include libfuncs.h, expr.h, and except.h."}, {"sha": "6361085372e035030d35bf195b0bfa20bcd9b3ab", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -975,13 +975,13 @@ cb_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level, int reason,\n {\n   diagnostic_info diagnostic;\n   diagnostic_t dlevel;\n-  int save_warn_system_headers = warn_system_headers;\n+  bool save_warn_system_headers = global_dc->warn_system_headers;\n   bool ret;\n \n   switch (level)\n     {\n     case CPP_DL_WARNING_SYSHDR:\n-      warn_system_headers = 1;\n+      global_dc->warn_system_headers = 1;\n       /* Fall through.  */\n     case CPP_DL_WARNING:\n       dlevel = DK_WARNING;\n@@ -1012,7 +1012,7 @@ cb_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level, int reason,\n     diagnostic_override_option_index (&diagnostic, OPT_Wcpp);\n   ret = report_diagnostic (&diagnostic);\n   if (level == CPP_DL_WARNING_SYSHDR)\n-    warn_system_headers = save_warn_system_headers;\n+    global_dc->warn_system_headers = save_warn_system_headers;\n   return ret;\n }\n "}, {"sha": "5d23c71a1f9232983be69b569f6c3e46d502a31e", "filename": "gcc/opts-diagnostic.h", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2Fopts-diagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2Fopts-diagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-diagnostic.h?ref=5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e", "patch": "@@ -0,0 +1,25 @@\n+/* Command line option handling.  Interactions with diagnostics code.\n+   Copyright (C) 2010 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_OPTS_DIAGNOSTIC_H\n+#define GCC_OPTS_DIAGNOSTIC_H\n+\n+extern char *option_name (diagnostic_context *context, int option_index,\n+\t\t\t  diagnostic_t orig_diag_kind, diagnostic_t diag_kind);\n+#endif"}, {"sha": "65121a4222ebaf50e6b40672a9aa9e6226530c4c", "filename": "gcc/opts.c", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"toplev.h\"\n #include \"params.h\"\n #include \"diagnostic.h\"\n+#include \"opts-diagnostic.h\"\n #include \"tm_p.h\"\t\t/* For OPTIMIZATION_OPTIONS.  */\n #include \"insn-attr.h\"\t\t/* For INSN_SCHEDULING.  */\n #include \"target.h\"\n@@ -1703,6 +1704,10 @@ common_handle_option (size_t scode, const char *arg, int value,\n       warn_larger_than = value != -1;\n       break;\n \n+    case OPT_Wfatal_errors:\n+      global_dc->fatal_errors = value;\n+      break;\n+\n     case OPT_Wframe_larger_than_:\n       frame_larger_than_size = value;\n       warn_frame_larger_than = value != -1;\n@@ -1726,6 +1731,10 @@ common_handle_option (size_t scode, const char *arg, int value,\n       warn_strict_overflow = value;\n       break;\n \n+    case OPT_Wsystem_headers:\n+      global_dc->warn_system_headers = value;\n+      break;\n+\n     case OPT_Wunused:\n       warn_unused = value;\n       break;\n@@ -1955,6 +1964,10 @@ common_handle_option (size_t scode, const char *arg, int value,\n       flag_profile_values_set = true;\n       break;\n \n+    case OPT_fshow_column:\n+      global_dc->show_column = value;\n+      break;\n+\n     case OPT_fvisibility_:\n       {\n         if (!strcmp(arg, \"default\"))\n@@ -2168,13 +2181,17 @@ common_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_pedantic_errors:\n-      flag_pedantic_errors = pedantic = 1;\n+      global_dc->pedantic_errors = flag_pedantic_errors = pedantic = 1;\n       break;\n \n     case OPT_fwhopr:\n       flag_whopr = value;\n       break;\n \n+    case OPT_w:\n+      global_dc->inhibit_warnings = true;\n+      break;\n+\n     case OPT_fsee:\n     case OPT_fcse_skip_blocks:\n     case OPT_floop_optimize:\n@@ -2510,3 +2527,38 @@ enable_warning_as_error (const char *arg, int value, unsigned int lang_mask)\n     }\n   free (new_option);\n }\n+\n+/* Return malloced memory for the name of the option OPTION_INDEX\n+   which enabled a diagnostic (context CONTEXT), originally of type\n+   ORIG_DIAG_KIND but possibly converted to DIAG_KIND by options such\n+   as -Werror.  */\n+\n+char *\n+option_name (diagnostic_context *context, int option_index,\n+\t     diagnostic_t orig_diag_kind, diagnostic_t diag_kind)\n+{\n+  if (option_index)\n+    {\n+      /* A warning classified as an error.  */\n+      if ((orig_diag_kind == DK_WARNING || orig_diag_kind == DK_PEDWARN)\n+\t  && diag_kind == DK_ERROR)\n+\treturn concat (cl_options[OPT_Werror_].opt_text,\n+\t\t       /* Skip over \"-W\".  */\n+\t\t       cl_options[option_index].opt_text + 2,\n+\t\t       NULL);\n+      /* A warning with option.  */\n+      else\n+\treturn xstrdup (cl_options[option_index].opt_text);\n+    }\n+  /* A warning without option classified as an error.  */\n+  else if (orig_diag_kind == DK_WARNING || orig_diag_kind == DK_PEDWARN\n+\t   || diag_kind == DK_WARNING)\n+    {\n+      if (context->warning_as_error_requested)\n+\treturn xstrdup (cl_options[OPT_Werror].opt_text);\n+      else\n+\treturn xstrdup (_(\"enabled by default\"));\n+    }\n+  else\n+    return NULL;\n+}"}, {"sha": "83008da3a6be94cf95e3dbcbb78630b072495bb3", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e", "patch": "@@ -78,6 +78,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hosthooks.h\"\n #include \"cgraph.h\"\n #include \"opts.h\"\n+#include \"opts-diagnostic.h\"\n #include \"coverage.h\"\n #include \"value-prof.h\"\n #include \"alloc-pool.h\"\n@@ -1691,13 +1692,16 @@ general_init (const char *argv0)\n \n   /* Initialize the diagnostics reporting machinery, so option parsing\n      can give warnings and errors.  */\n-  diagnostic_initialize (global_dc);\n+  diagnostic_initialize (global_dc, N_OPTS);\n   diagnostic_starter (global_dc) = default_tree_diagnostic_starter;\n   /* Set a default printer.  Language specific initializations will\n      override it later.  */\n   pp_format_decoder (global_dc->printer) = &default_tree_printer;\n   global_dc->show_option_requested = flag_diagnostics_show_option;\n+  global_dc->show_column = flag_show_column;\n   global_dc->internal_error = plugins_internal_error_function;\n+  global_dc->option_enabled = option_enabled;\n+  global_dc->option_name = option_name;\n \n   /* Trap fatal signals, e.g. SIGSEGV, and convert them to ICE messages.  */\n #ifdef SIGSEGV\n@@ -1828,11 +1832,6 @@ process_options (void)\n   if (flag_compare_debug) \n     diagnostic_inhibit_notes (global_dc);\n \n-  global_dc->show_column = flag_show_column;\n-  global_dc->pedantic_errors = flag_pedantic_errors;\n-  global_dc->permissive = flag_permissive;\n-  global_dc->fatal_errors = flag_fatal_errors;\n-\n   if (flag_section_anchors && !target_supports_section_anchors_p ())\n     {\n       warning (OPT_fsection_anchors,"}]}