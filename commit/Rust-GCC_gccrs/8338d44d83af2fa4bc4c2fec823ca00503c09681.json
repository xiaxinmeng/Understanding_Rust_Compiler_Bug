{"sha": "8338d44d83af2fa4bc4c2fec823ca00503c09681", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMzOGQ0NGQ4M2FmMmZhNGJjNGMyZmVjODIzY2EwMDUwM2MwOTY4MQ==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@tuliptree.org", "date": "2003-07-07T03:42:23Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2003-07-07T03:42:23Z"}, "message": "re PR rtl-optimization/9812 ([m68k] ICE in extract_insn, at recog.c:2148)\n\nPR optimization/9812\n* rtl.h (mem_for_const_double): Delete prototype.\n* varasm.c (mem_for_const_double): Delete function.\n* config/m68k/hp320.h, config/m68k/linux.h, config/m68k/m68kelf.h,\nconfig/m68k/m68kv4.h, config/m68k/netbsd-elf.h\n(LEGITIMATE_PIC_OPERAND_P): Delete duplicate definitions.\n* config/m68k/m68k.h (LEGITIMATE_CONSTANT_P): Disallow XFmode.\n(LEGITIMATE_PIC_OPERAND_P): Delete CONST_DOUBLE tests.\n* config/m68k/m68k.md (movxf): Add reload_in_progress guard.  Add\ncomment about confused support for XFmode constants.\n\nFrom-SVN: r69027", "tree": {"sha": "f00c94a9d5dc89370d9bd0cf002efe6d90201aaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f00c94a9d5dc89370d9bd0cf002efe6d90201aaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8338d44d83af2fa4bc4c2fec823ca00503c09681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8338d44d83af2fa4bc4c2fec823ca00503c09681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8338d44d83af2fa4bc4c2fec823ca00503c09681", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8338d44d83af2fa4bc4c2fec823ca00503c09681/comments", "author": {"login": "jim-wilson", "id": 11654017, "node_id": "MDQ6VXNlcjExNjU0MDE3", "avatar_url": "https://avatars.githubusercontent.com/u/11654017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jim-wilson", "html_url": "https://github.com/jim-wilson", "followers_url": "https://api.github.com/users/jim-wilson/followers", "following_url": "https://api.github.com/users/jim-wilson/following{/other_user}", "gists_url": "https://api.github.com/users/jim-wilson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jim-wilson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jim-wilson/subscriptions", "organizations_url": "https://api.github.com/users/jim-wilson/orgs", "repos_url": "https://api.github.com/users/jim-wilson/repos", "events_url": "https://api.github.com/users/jim-wilson/events{/privacy}", "received_events_url": "https://api.github.com/users/jim-wilson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ca9944176b8c468042248ad3905cf452142c43e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca9944176b8c468042248ad3905cf452142c43e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ca9944176b8c468042248ad3905cf452142c43e"}], "stats": {"total": 137, "additions": 38, "deletions": 99}, "files": [{"sha": "51b9ffe60e25c286dab5cb0cce80573981f0f2df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8338d44d83af2fa4bc4c2fec823ca00503c09681", "patch": "@@ -1,3 +1,16 @@\n+2003-07-06  James E Wilson  <wilson@tuliptree.org>\n+\n+\tPR optimization/9812\n+\t* rtl.h (mem_for_const_double): Delete prototype.\n+\t* varasm.c (mem_for_const_double): Delete function.\n+\t* config/m68k/hp320.h, config/m68k/linux.h, config/m68k/m68kelf.h,\n+\tconfig/m68k/m68kv4.h, config/m68k/netbsd-elf.h\n+\t(LEGITIMATE_PIC_OPERAND_P): Delete duplicate definitions.\n+\t* config/m68k/m68k.h (LEGITIMATE_CONSTANT_P): Disallow XFmode.\n+\t(LEGITIMATE_PIC_OPERAND_P): Delete CONST_DOUBLE tests.\n+\t* config/m68k/m68k.md (movxf): Add reload_in_progress guard.  Add\n+\tcomment about confused support for XFmode constants.\n+\n Mon Jul  7 02:03:56 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* cfglayout.c (fixup_reorder_chain): Call delete_dead_jumptables."}, {"sha": "17ce3504d9b269e24e69909108aeb5f2ce3295a0", "filename": "gcc/config/m68k/hp320.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2Fconfig%2Fm68k%2Fhp320.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2Fconfig%2Fm68k%2Fhp320.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp320.h?ref=8338d44d83af2fa4bc4c2fec823ca00503c09681", "patch": "@@ -555,18 +555,6 @@ do { size_t i, limit = (SIZE);\t\t\\\n \n #endif /* not HPUX_ASM */\n \n-/* In m68k svr4, a symbol_ref rtx can be a valid PIC operand if it is an\n-   operand of a function call.  */\n-#undef LEGITIMATE_PIC_OPERAND_P\n-#define LEGITIMATE_PIC_OPERAND_P(X) \\\n-  ((! symbolic_operand (X, VOIDmode) \\\n-    && ! (GET_CODE (X) == CONST_DOUBLE && mem_for_const_double (X) != 0\t\\\n-\t  && GET_CODE (mem_for_const_double (X)) == MEM\t\t\t\\\n-\t  && symbolic_operand (XEXP (mem_for_const_double (X), 0),\t\\\n-\t\t\t       VOIDmode))) \t\t\t\t\\\n-   || (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_FLAG (X))       \t\\\n-   || PCREL_GENERAL_OPERAND_OK)\n-\n /* hpux8 and later have C++ compatible include files, so do not\n    pretend they are `extern \"C\"'.  */\n #define NO_IMPLICIT_EXTERN_C"}, {"sha": "efedd4f2d1efca9a0b86f950f2abdd1ad8a74767", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=8338d44d83af2fa4bc4c2fec823ca00503c09681", "patch": "@@ -283,18 +283,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    ? gen_rtx_REG ((MODE), 16)\t\t\t\t\t\t\\\n    : gen_rtx_REG ((MODE), 0))\n \n-/* In m68k svr4, a symbol_ref rtx can be a valid PIC operand if it is\n-   an operand of a function call.  */\n-#undef LEGITIMATE_PIC_OPERAND_P\n-#define LEGITIMATE_PIC_OPERAND_P(X) \\\n-  ((! symbolic_operand (X, VOIDmode) \\\n-    && ! (GET_CODE (X) == CONST_DOUBLE && mem_for_const_double (X) != 0\t\\\n-\t  && GET_CODE (mem_for_const_double (X)) == MEM\t\t\t\\\n-\t  && symbolic_operand (XEXP (mem_for_const_double (X), 0),\t\\\n-\t\t\t       VOIDmode))) \t\t\t\t\\\n-   || (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_FLAG (X))       \t\\\n-   || PCREL_GENERAL_OPERAND_OK)\n-\n /* For m68k SVR4, structures are returned using the reentrant\n    technique.  */\n #undef PCC_STATIC_STRUCT_RETURN"}, {"sha": "8ee78ba9aa911e6f4b0299b595ef15fd1c79a0a0", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=8338d44d83af2fa4bc4c2fec823ca00503c09681", "patch": "@@ -998,7 +998,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n \n-#define LEGITIMATE_CONSTANT_P(X) 1\n+#define LEGITIMATE_CONSTANT_P(X) (GET_MODE (X) != XFmode)\n \n /* Nonzero if the constant value X is a legitimate general operand\n    when generating PIC code.  It is given that flag_pic is on and \n@@ -1015,12 +1015,8 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n #endif\n \n #define LEGITIMATE_PIC_OPERAND_P(X)\t\\\n-  ((! symbolic_operand (X, VOIDmode)\t\t\t\t\\\n-    && ! (GET_CODE (X) == CONST_DOUBLE && mem_for_const_double (X) != 0\t\\\n-\t  && GET_CODE (mem_for_const_double (X)) == MEM\t\t\t\\\n-\t  && symbolic_operand (XEXP (mem_for_const_double (X), 0),\t\\\n-\t\t\t       VOIDmode))) \t\t\t\t\\\n-   || (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_FLAG (X))\t\t\\\n+  (! symbolic_operand (X, VOIDmode)\t\t\t\t\\\n+   || (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_FLAG (X))\t\\\n    || PCREL_GENERAL_OPERAND_OK)\n \n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx"}, {"sha": "4542d73acbce52b01a06219229bba9c3456f5840", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=8338d44d83af2fa4bc4c2fec823ca00503c09681", "patch": "@@ -999,27 +999,35 @@\n   \"TARGET_5200\"\n   \"* return output_move_double (operands);\")\n \n+;; ??? The XFmode patterns are schizophrenic about whether constants are\n+;; allowed.  Most but not all have predicates and constraint that disallow\n+;; constants.  Most but not all have output templates that handle constants.\n+;; See also LEGITIMATE_CONSTANT_P.\n+\n (define_expand \"movxf\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:XF 1 \"general_operand\" \"\"))]\n   \"\"\n   \"\n {\n-  if (CONSTANT_P (operands[1]))\n-    {\n-      operands[1] = force_const_mem (XFmode, operands[1]);\n-      if (! memory_address_p (XFmode, XEXP (operands[1], 0))\n-\t  && ! reload_in_progress)\n-\toperands[1] = adjust_address (operands[1], XFmode, 0);\n-    }\n-  if (flag_pic && TARGET_PCREL && ! reload_in_progress)\n+  /* We can't rewrite operands during reload.  */\n+  if (! reload_in_progress)\n     {\n-      /* Don't allow writes to memory except via a register;\n-\t the m68k doesn't consider PC-relative addresses to be writable.  */\n-      if (GET_CODE (operands[0]) == MEM\n-\t  && symbolic_operand (XEXP (operands[0], 0), SImode))\n-\toperands[0] = gen_rtx (MEM, XFmode,\n-\t\t\t       force_reg (SImode, XEXP (operands[0], 0)));\n+      if (CONSTANT_P (operands[1]))\n+\t{\n+\t  operands[1] = force_const_mem (XFmode, operands[1]);\n+\t  if (! memory_address_p (XFmode, XEXP (operands[1], 0)))\n+\t    operands[1] = adjust_address (operands[1], XFmode, 0);\n+\t}\n+      if (flag_pic && TARGET_PCREL)\n+\t{\n+\t  /* Don't allow writes to memory except via a register; the\n+\t     m68k doesn't consider PC-relative addresses to be writable.  */\n+\t  if (GET_CODE (operands[0]) == MEM\n+\t      && symbolic_operand (XEXP (operands[0], 0), SImode))\n+\t    operands[0] = gen_rtx (MEM, XFmode,\n+\t\t\t\t   force_reg (SImode, XEXP (operands[0], 0)));\n+\t}\n     }\n }\")\n "}, {"sha": "f481871c48dac7ac913870fc034b5c23bbea0b84", "filename": "gcc/config/m68k/m68kelf.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kelf.h?ref=8338d44d83af2fa4bc4c2fec823ca00503c09681", "patch": "@@ -246,16 +246,6 @@ extern int switch_table_difference_label_flag;\n #undef ASM_OUTPUT_BEFORE_CASE_LABEL\n #define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE,PREFIX,NUM,TABLE)\t\t\\\n   fprintf ((FILE), \"%s&%d\\n\", SWBEG_ASM_OP, XVECLEN (PATTERN (TABLE), 1));\n-\n-/* In m68k svr4, a symbol_ref rtx can be a valid PIC operand if it is an\n-   operand of a function call.  */\n-#undef LEGITIMATE_PIC_OPERAND_P\n-\n-#define LEGITIMATE_PIC_OPERAND_P(X)\t\\\n-  (! symbolic_operand (X, VOIDmode)\t\t\t\t\\\n-   || (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_FLAG (X))\t\\\n-   || PCREL_GENERAL_OPERAND_OK)\n-\n /* end of stuff from m68kv4.h */\n \n #undef SGS_CMP_ORDER"}, {"sha": "f826f0fbf04fb353f5236199047aafa022d8c30c", "filename": "gcc/config/m68k/m68kv4.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kv4.h?ref=8338d44d83af2fa4bc4c2fec823ca00503c09681", "patch": "@@ -277,18 +277,6 @@ int switch_table_difference_label_flag;\n #define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE,PREFIX,NUM,TABLE)\t\t\\\n   fprintf ((FILE), \"%s&%d\\n\", SWBEG_ASM_OP, XVECLEN (PATTERN (TABLE), 1));\n \n-/* In m68k svr4, a symbol_ref rtx can be a valid PIC operand if it is an\n-   operand of a function call.  */\n-#undef LEGITIMATE_PIC_OPERAND_P\n-#define LEGITIMATE_PIC_OPERAND_P(X) \\\n-  ((! symbolic_operand (X, VOIDmode) \\\n-    && ! (GET_CODE (X) == CONST_DOUBLE && mem_for_const_double (X) != 0\t\\\n-\t  && GET_CODE (mem_for_const_double (X)) == MEM\t\t\t\\\n-\t  && symbolic_operand (XEXP (mem_for_const_double (X), 0),\t\\\n-\t\t\t       VOIDmode))) \t\t\t\t\\\n-   || (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_FLAG (X))       \t\\\n-   || PCREL_GENERAL_OPERAND_OK)\n-\n /* Output assembler code for a block containing the constant parts\n    of a trampoline, leaving space for the variable parts.  */\n "}, {"sha": "14fcf1a962a98b5926365d55e837124e4f3de0c1", "filename": "gcc/config/m68k/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h?ref=8338d44d83af2fa4bc4c2fec823ca00503c09681", "patch": "@@ -385,20 +385,6 @@ while (0)\n #define BIGGEST_ALIGNMENT 64\n \n \n-/* In m68k svr4, a symbol_ref rtx can be a valid PIC operand if it is\n-   an operand of a function call. */\n-\n-#undef LEGITIMATE_PIC_OPERAND_P\n-#define LEGITIMATE_PIC_OPERAND_P(X)\t\t\t\t\t\\\n-  ((! symbolic_operand (X, VOIDmode)\t\t\t\t\t\\\n-    && ! (GET_CODE (X) == CONST_DOUBLE && mem_for_const_double (X)\t\\\n-\t  && GET_CODE (mem_for_const_double (X)) == MEM\t\t\t\\\n-\t  && symbolic_operand (XEXP (mem_for_const_double (X), 0),\t\\\n-\t\t\t       VOIDmode)))\t\t\t\t\\\n-   || (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_FLAG (X))\t\t\\\n-   || PCREL_GENERAL_OPERAND_OK)\n-\n-\n /* For m68k SVR4, structures are returned using the reentrant\n    technique. */\n "}, {"sha": "975a752ae8250df9ce459a4e69204bbff01ae607", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=8338d44d83af2fa4bc4c2fec823ca00503c09681", "patch": "@@ -1477,7 +1477,6 @@ extern void end_full_sequence (rtx*, rtx*);\n /* In varasm.c  */\n extern rtx immed_double_const (HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t       enum machine_mode);\n-extern rtx mem_for_const_double (rtx);\n extern rtx force_const_mem (enum machine_mode, rtx);\n \n /* In varasm.c  */"}, {"sha": "aa1c3557de79e72bd7717517bb59f7fc953a2fb7", "filename": "gcc/varasm.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8338d44d83af2fa4bc4c2fec823ca00503c09681/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=8338d44d83af2fa4bc4c2fec823ca00503c09681", "patch": "@@ -2931,23 +2931,6 @@ record_constant_rtx (enum machine_mode mode, rtx x)\n   return ptr;\n }\n \f\n-/* Given a constant rtx X, return a MEM for the location in memory at which\n-   this constant has been placed.  Return 0 if it not has been placed yet.  */\n-\n-rtx\n-mem_for_const_double (rtx x)\n-{\n-  enum machine_mode mode = GET_MODE (x);\n-  struct constant_descriptor_rtx *desc;\n-\n-  for (desc = const_rtx_hash_table[const_hash_rtx (mode, x)]; desc;\n-       desc = desc->next)\n-    if (compare_constant_rtx (mode, x, desc))\n-      return desc->rtl;\n-\n-  return 0;\n-}\n-\n /* Given a constant rtx X, make (or find) a memory constant for its value\n    and return a MEM rtx to refer to it in memory.  */\n "}]}