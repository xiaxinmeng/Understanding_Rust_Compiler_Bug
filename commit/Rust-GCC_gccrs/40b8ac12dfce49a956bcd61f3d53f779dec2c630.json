{"sha": "40b8ac12dfce49a956bcd61f3d53f779dec2c630", "node_id": "C_kwDOANBUbNoAKDQwYjhhYzEyZGZjZTQ5YTk1NmJjZDYxZjNkNTNmNzc5ZGVjMmM2MzA", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-12-23T00:17:16Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-12-23T00:17:16Z"}, "message": "Daily bump.", "tree": {"sha": "2776f4482551ec232d4c99b7a182de7280a979c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2776f4482551ec232d4c99b7a182de7280a979c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40b8ac12dfce49a956bcd61f3d53f779dec2c630", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b8ac12dfce49a956bcd61f3d53f779dec2c630", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40b8ac12dfce49a956bcd61f3d53f779dec2c630", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b8ac12dfce49a956bcd61f3d53f779dec2c630/comments", "author": null, "committer": null, "parents": [{"sha": "23be9d78f4bcd773ed24818a4b963227536dbff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23be9d78f4bcd773ed24818a4b963227536dbff8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23be9d78f4bcd773ed24818a4b963227536dbff8"}], "stats": {"total": 248, "additions": 247, "deletions": 1}, "files": [{"sha": "6404dddaece309c3fa8946a6c262d28a6719f300", "filename": "gcc/ChangeLog", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b8ac12dfce49a956bcd61f3d53f779dec2c630/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b8ac12dfce49a956bcd61f3d53f779dec2c630/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40b8ac12dfce49a956bcd61f3d53f779dec2c630", "patch": "@@ -1,3 +1,77 @@\n+2022-12-22  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* doc/md.texi: Move example code remark next to it's code block.\n+\n+2022-12-22  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* doc/md.texi: Fix inconsistent example name.\n+\n+2022-12-22  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* doc/md.texi: Fix incorrect pxref.\n+\n+2022-12-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR bootstrap/106482\n+\t* doc/install.texi (ISO C++11 Compiler): Document GCC version\n+\tknown to work.\n+\n+2022-12-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108166\n+\t* tree-ssa-phiopt.cc (value_replacement): For the maybe_equal_p\n+\tcase turned into equal_p reset SSA_NAME_RANGE_INFO of phi result.\n+\n+2022-12-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/108193\n+\t* cse.cc (compute_const_anchors): Change n type to\n+\tunsigned HOST_WIDE_INT, adjust comparison against it to avoid\n+\twarnings.  Formatting fix.\n+\t(insert_const_anchor): Use gen_int_mode instead of GEN_INT.\n+\n+2022-12-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107451\n+\t* tree-vect-stmts.cc (vectorizable_load): Avoid loading\n+\tSLP group members from group numbers in excess of the\n+\tvectorization factor.\n+\n+2022-12-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/aarch64/t-aarch64 (TM_H): Don't add aarch64-cores.def,\n+\tadd aarch64-fusion-pairs.def, aarch64-tuning-flags.def and\n+\taarch64-option-extensions.def.\n+\t(OPTIONS_H_EXTRA): Don't add aarch64-fusion-pairs.def nor\n+\taarch64-tuning-flags.def.\n+\n+2022-12-22  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* config/i386/i386-expand.cc (ix86_expand_set_or_cpymem): Add\n+\tTARGET_AVX512_SPLIT_REGS\n+\t* config/i386/i386-options.cc (ix86_option_override_internal):\n+\tHonor x86_TONE_AVOID_256FMA_CHAINS.\n+\t* config/i386/i386.cc (ix86_vec_cost): Honor TARGET_AVX512_SPLIT_REGS.\n+\t(ix86_reassociation_width): Likewise.\n+\t* config/i386/i386.h (TARGET_AVX512_SPLIT_REGS): New tune.\n+\t* config/i386/x86-tune.def (X86_TUNE_USE_GATHER_2PARTS): Disable\n+\tfor znver4.\n+\t(X86_TUNE_USE_GATHER_4PARTS): Likewise.\n+\t(X86_TUNE_AVOID_256FMA_CHAINS): Set for znver4.\n+\t(X86_TUNE_AVOID_512FMA_CHAINS): New utne; set for znver4.\n+\t(X86_TUNE_AVX256_OPTIMAL): Add znver4.\n+\t(X86_TUNE_AVX512_SPLIT_REGS): New tune.\n+\t(X86_TUNE_AVX256_MOVE_BY_PIECES): Add znver1-3.\n+\t(X86_TUNE_AVX256_STORE_BY_PIECES): Add znver1-3.\n+\t(X86_TUNE_AVX512_MOVE_BY_PIECES): Add znver4.\n+\t(X86_TUNE_AVX512_STORE_BY_PIECES): Add znver4.\n+\n+2022-12-22  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* config/i386/x86-tune-costs.h (znver4_cost): Upate costs of FP and SSE\n+\tmoves, division multiplication, gathers, L2 cache size, and more\n+\tcomplex FP instrutions.\n+\n 2022-12-21  Andrew Pinski  <apinski@marvell.com>\n \n \tPR tree-optimization/105532"}, {"sha": "7a58b9c62ebedb628b5b4248752d86d2104af4f7", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b8ac12dfce49a956bcd61f3d53f779dec2c630/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b8ac12dfce49a956bcd61f3d53f779dec2c630/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=40b8ac12dfce49a956bcd61f3d53f779dec2c630", "patch": "@@ -1 +1 @@\n-20221222\n+20221223"}, {"sha": "df36cc319bc04a8ec08b733bbea5ac9289b087ea", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b8ac12dfce49a956bcd61f3d53f779dec2c630/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b8ac12dfce49a956bcd61f3d53f779dec2c630/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=40b8ac12dfce49a956bcd61f3d53f779dec2c630", "patch": "@@ -1,3 +1,10 @@\n+2022-12-22  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/69604\n+\t* match.cc (chk_stmt_fcn_body): New function.  Check for invalid uses\n+\tof statement functions arguments.\n+\t(gfc_match_st_function): Use above.\n+\n 2022-12-20  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/95375"}, {"sha": "e88eaee2a61fbe6c2782d42aeb24b3c16419cee6", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b8ac12dfce49a956bcd61f3d53f779dec2c630/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b8ac12dfce49a956bcd61f3d53f779dec2c630/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=40b8ac12dfce49a956bcd61f3d53f779dec2c630", "patch": "@@ -1,3 +1,7 @@\n+2022-12-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* lto-common.cc (compare_tree_sccs_1): Compare DECL_NOT_FLEXARRAY.\n+\n 2022-12-21  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto-common.cc (lto_resolution_read): With incremental linking"}, {"sha": "35581c72c4c1306d2493aa80ea5dd092304a5c17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b8ac12dfce49a956bcd61f3d53f779dec2c630/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b8ac12dfce49a956bcd61f3d53f779dec2c630/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=40b8ac12dfce49a956bcd61f3d53f779dec2c630", "patch": "@@ -1,3 +1,60 @@\n+2022-12-22  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/coroutines/coro.h: #include <stdio.h> instead of\n+\tdeclaring puts/printf.\n+\t* g++.dg/coroutines/torture/mid-suspend-destruction-0.C:\n+\t#include <stdio.h>.\n+\t* g++.dg/coroutines/pr95599.C: Use PRINT instead of puts.\n+\t* g++.dg/coroutines/torture/call-00-co-aw-arg.C:\n+\t* g++.dg/coroutines/torture/call-01-multiple-co-aw.C:\n+\t* g++.dg/coroutines/torture/call-02-temp-co-aw.C:\n+\t* g++.dg/coroutines/torture/call-03-temp-ref-co-aw.C:\n+\t* g++.dg/coroutines/torture/co-await-00-trivial.C:\n+\t* g++.dg/coroutines/torture/co-await-01-with-value.C:\n+\t* g++.dg/coroutines/torture/co-await-02-xform.C:\n+\t* g++.dg/coroutines/torture/co-await-03-rhs-op.C:\n+\t* g++.dg/coroutines/torture/co-await-04-control-flow.C:\n+\t* g++.dg/coroutines/torture/co-await-05-loop.C:\n+\t* g++.dg/coroutines/torture/co-await-06-ovl.C:\n+\t* g++.dg/coroutines/torture/co-await-07-tmpl.C:\n+\t* g++.dg/coroutines/torture/co-await-08-cascade.C:\n+\t* g++.dg/coroutines/torture/co-await-09-pair.C:\n+\t* g++.dg/coroutines/torture/co-await-11-forwarding.C:\n+\t* g++.dg/coroutines/torture/co-await-12-operator-2.C:\n+\t* g++.dg/coroutines/torture/co-await-13-return-ref.C:\n+\t* g++.dg/coroutines/torture/co-await-14-return-ref-to-auto.C:\n+\t* g++.dg/coroutines/torture/pr95003.C: Likewise.\n+\n+2022-12-22  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/69604\n+\t* gfortran.dg/statement_function_4.f90: New test.\n+\n+2022-12-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/107809\n+\t* gcc.dg/vect/vect-recurr-1.c: Require vect_perm.\n+\t* gcc.dg/vect/vect-recurr-2.c: Likewise.\n+\t* gcc.dg/vect/vect-recurr-3.c: Likewise.\n+\t* gcc.dg/vect/vect-recurr-4.c: Likewise.\n+\t* gcc.dg/vect/vect-recurr-5.c: Likewise.\n+\t* gcc.dg/vect/vect-recurr-6.c: Likewise.\n+\n+2022-12-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108166\n+\t* g++.dg/torture/pr108166.C: New test.\n+\n+2022-12-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/108193\n+\t* gfortran.dg/pr108193.f90: New test.\n+\n+2022-12-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107451\n+\t* gcc.dg/torture/pr107451.c: New testcase.\n+\n 2022-12-21  Jonathan Yong  <10walls@gmail.com>\n \n \t* gcc.c-torture/compile/pr55569.c: fix excess errors."}, {"sha": "6a8f6e0d739aa10869ffe18583dc4305926145d7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b8ac12dfce49a956bcd61f3d53f779dec2c630/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b8ac12dfce49a956bcd61f3d53f779dec2c630/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=40b8ac12dfce49a956bcd61f3d53f779dec2c630", "patch": "@@ -1,3 +1,107 @@\n+2022-12-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/105730\n+\t* src/c++11/compatibility-condvar.cc (__nothrow_wait_cv::wait):\n+\tAccess private data member of base class and call its wait\n+\tmember.\n+\n+2022-12-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/Makefile.am: Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/std/chrono (operator<<): Move to new header.\n+\t(nonexistent_local_time::_M_make_what_str): Define correctly.\n+\t(ambiguous_local_time::_M_make_what_str): Likewise.\n+\t* include/bits/chrono_io.h: New file.\n+\t* src/c++20/tzdb.cc (operator<<(ostream&, const Rule&)): Use\n+\tnew ostream output for month and weekday types.\n+\t* testsuite/20_util/duration/io.cc: Test std::format support.\n+\t* testsuite/std/time/exceptions.cc: Check what() strings.\n+\t* testsuite/std/time/syn_c++20.cc: Uncomment local_time_format.\n+\t* testsuite/std/time/time_zone/get_info_local.cc: Enable check\n+\tfor formatted output of local_info objects.\n+\t* testsuite/std/time/clock/file/io.cc: New test.\n+\t* testsuite/std/time/clock/gps/io.cc: New test.\n+\t* testsuite/std/time/clock/system/io.cc: New test.\n+\t* testsuite/std/time/clock/tai/io.cc: New test.\n+\t* testsuite/std/time/clock/utc/io.cc: New test.\n+\t* testsuite/std/time/day/io.cc: New test.\n+\t* testsuite/std/time/format.cc: New test.\n+\t* testsuite/std/time/hh_mm_ss/io.cc: New test.\n+\t* testsuite/std/time/month/io.cc: New test.\n+\t* testsuite/std/time/weekday/io.cc: New test.\n+\t* testsuite/std/time/year/io.cc: New test.\n+\t* testsuite/std/time/year_month_day/io.cc: New test.\n+\n+2022-12-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/format (__format::__write_padded_as_spec): New\n+\tfunction.\n+\t(__format::__formatter_str, __format::__formatter_int::format)\n+\t(formatter<const void*, charT>): Use it.\n+\n+2022-12-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* python/libstdcxx/v6/printers.py (StdChronoDurationPrinter)\n+\t(StdChronoTimePointPrinter, StdChronoZonedTimePrinter)\n+\t(StdChronoCalendarPrinter, StdChronoTimeZonePrinter)\n+\t(StdChronoLeapSecondPrinter, StdChronoTzdbPrinter)\n+\t(StdChronoTimeZoneRulePrinter): New printers.\n+\n+2022-12-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCXX_ZONEINFO_DIR): New macro.\n+\t* config.h.in: Regenerate.\n+\t* config/abi/pre/gnu.ver: Export new symbols.\n+\t* configure: Regenerate.\n+\t* configure.ac (GLIBCXX_ZONEINFO_DIR): Use new macro.\n+\t* include/std/chrono (utc_clock::from_sys): Correct handling\n+\tof leap seconds.\n+\t(nonexistent_local_time::_M_make_what_str): Define.\n+\t(ambiguous_local_time::_M_make_what_str): Define.\n+\t(__throw_bad_local_time): Define new function.\n+\t(time_zone, tzdb_list, tzdb): Implement all members.\n+\t(remote_version, zoned_time, get_leap_second_info): Define.\n+\t* include/std/version: Add comment for __cpp_lib_chrono.\n+\t* src/c++20/Makefile.am: Add new file.\n+\t* src/c++20/Makefile.in: Regenerate.\n+\t* src/c++20/tzdb.cc: New file.\n+\t* testsuite/lib/libstdc++.exp: Define effective target tzdb.\n+\t* testsuite/std/time/clock/file/members.cc: Check file_time\n+\talias and file_clock::now() member.\n+\t* testsuite/std/time/clock/gps/1.cc: Likewise for gps_clock.\n+\t* testsuite/std/time/clock/tai/1.cc: Likewise for tai_clock.\n+\t* testsuite/std/time/syn_c++20.cc: Uncomment everything except\n+\tparse.\n+\t* testsuite/std/time/clock/utc/leap_second_info.cc: New test.\n+\t* testsuite/std/time/exceptions.cc: New test.\n+\t* testsuite/std/time/time_zone/get_info_local.cc: New test.\n+\t* testsuite/std/time/time_zone/get_info_sys.cc: New test.\n+\t* testsuite/std/time/time_zone/requirements.cc: New test.\n+\t* testsuite/std/time/tzdb/1.cc: New test.\n+\t* testsuite/std/time/tzdb/leap_seconds.cc: New test.\n+\t* testsuite/std/time/tzdb_list/1.cc: New test.\n+\t* testsuite/std/time/tzdb_list/requirements.cc: New test.\n+\t* testsuite/std/time/zoned_time/1.cc: New test.\n+\t* testsuite/std/time/zoned_time/custom.cc: New test.\n+\t* testsuite/std/time/zoned_time/deduction.cc: New test.\n+\t* testsuite/std/time/zoned_time/req_neg.cc: New test.\n+\t* testsuite/std/time/zoned_time/requirements.cc: New test.\n+\t* testsuite/std/time/zoned_traits.cc: New test.\n+\n+2022-12-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/chrono.h (__is_duration_v, __is_time_point_v):\n+\tNew variable templates.\n+\t(duration_cast): Add simplified definition for noconv case.\n+\t(treat_as_floating_point_v): Add explicit specializations.\n+\t(duration::operator%=, floor, ceil, round): Simplify SFINAE\n+\tconstraints.\n+\n+2022-12-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/chrono: Use nodiscard attribute.\n+\n 2022-12-21  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/20_util/to_chars/float16_c++23.cc (test): Use 3 argument"}]}