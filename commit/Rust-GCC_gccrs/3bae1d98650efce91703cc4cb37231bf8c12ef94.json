{"sha": "3bae1d98650efce91703cc4cb37231bf8c12ef94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JhZTFkOTg2NTBlZmNlOTE3MDNjYzRjYjM3MjMxYmY4YzEyZWY5NA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2011-06-20T05:12:10Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2011-06-20T05:12:10Z"}, "message": "rs6000.c (create_TOC_reference): Wrap high part of toc-relative address in CONST.\n\n\t* config/rs6000/rs6000.c (create_TOC_reference): Wrap high part\n\tof toc-relative address in CONST.\n\t(rs6000_delegitimize_address): Recognize changed address.\n\t(rs6000_legitimize_reload_address): Likewise.\n\t(rs6000_emit_move): Don't force these constants to memory.\n\t* config/rs6000/rs6000.md (tls_gd, tls_gd_high): Wrap high part of\n\ttoc-relative address in CONST.\n\t(tls_ld, tls_ld_high, tls_got_dtprel, tls_got_dtprel_high): Likewise.\n\t(tls_got_tprel, tls_got_tprel_high, largetoc_high): Likewise.\n\nFrom-SVN: r175200", "tree": {"sha": "a7c8d0569095d18c55aee8e1f58232219baf0804", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7c8d0569095d18c55aee8e1f58232219baf0804"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bae1d98650efce91703cc4cb37231bf8c12ef94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bae1d98650efce91703cc4cb37231bf8c12ef94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bae1d98650efce91703cc4cb37231bf8c12ef94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bae1d98650efce91703cc4cb37231bf8c12ef94/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8fe2f96186ca193a2216da101a00cc02e93f1842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fe2f96186ca193a2216da101a00cc02e93f1842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fe2f96186ca193a2216da101a00cc02e93f1842"}], "stats": {"total": 105, "additions": 67, "deletions": 38}, "files": [{"sha": "c971faf5c76ce22e6847ec9acffae040a3512a64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bae1d98650efce91703cc4cb37231bf8c12ef94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bae1d98650efce91703cc4cb37231bf8c12ef94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bae1d98650efce91703cc4cb37231bf8c12ef94", "patch": "@@ -1,3 +1,15 @@\n+2011-06-20  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (create_TOC_reference): Wrap high part\n+\tof toc-relative address in CONST.\n+\t(rs6000_delegitimize_address): Recognize changed address.\n+\t(rs6000_legitimize_reload_address): Likewise.\n+\t(rs6000_emit_move): Don't force these constants to memory.\n+\t* config/rs6000/rs6000.md (tls_gd, tls_gd_high): Wrap high part of\n+\ttoc-relative address in CONST.\n+\t(tls_ld, tls_ld_high, tls_got_dtprel, tls_got_dtprel_high): Likewise.\n+\t(tls_got_tprel, tls_got_tprel_high, largetoc_high): Likewise.\n+\n 2011-06-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* longlong.h (count_leading_zeros): Use long long builtin for"}, {"sha": "df6e7d93a5d3d5eddb35288173992b3219cce040", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bae1d98650efce91703cc4cb37231bf8c12ef94/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bae1d98650efce91703cc4cb37231bf8c12ef94/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3bae1d98650efce91703cc4cb37231bf8c12ef94", "patch": "@@ -5803,12 +5803,13 @@ rs6000_delegitimize_address (rtx orig_x)\n \t\t   || TARGET_MINIMAL_TOC\n \t\t   || TARGET_CMODEL != CMODEL_SMALL))\n \t      || (TARGET_CMODEL != CMODEL_SMALL\n-\t\t  && GET_CODE (XEXP (x, 0)) == PLUS\n-\t\t  && GET_CODE (XEXP (XEXP (x, 0), 0)) == REG\n-\t\t  && REGNO (XEXP (XEXP (x, 0), 0)) == TOC_REGISTER\n-\t\t  && GET_CODE (XEXP (XEXP (x, 0), 1)) == HIGH\n+\t\t  && GET_CODE (XEXP (x, 0)) == CONST\n+\t\t  && GET_CODE (XEXP (XEXP (x, 0), 0)) == PLUS\n+\t\t  && GET_CODE (XEXP (XEXP (XEXP (x, 0), 0), 0)) == REG\n+\t\t  && REGNO (XEXP (XEXP (XEXP (x, 0), 0), 0)) == TOC_REGISTER\n+\t\t  && GET_CODE (XEXP (XEXP (XEXP (x, 0), 0), 1)) == HIGH\n \t\t  && rtx_equal_p (XEXP (x, 1),\n-\t\t\t\t  XEXP (XEXP (XEXP (x, 0), 1), 0)))))\n+\t\t\t\t  XEXP (XEXP (XEXP (XEXP (x, 0), 0), 1), 0)))))\n \t{\n \t  y = XVECEXP (y, 0, 0);\n \t  if (offset != NULL_RTX)\n@@ -6147,11 +6148,12 @@ rs6000_legitimize_reload_address (rtx x, enum machine_mode mode,\n       && GET_CODE (XEXP (x, 0)) == PLUS\n       && GET_CODE (XEXP (XEXP (x, 0), 0)) == REG\n       && REGNO (XEXP (XEXP (x, 0), 0)) == TOC_REGISTER\n-      && GET_CODE (XEXP (XEXP (x, 0), 1)) == HIGH\n+      && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST\n+      && GET_CODE (XEXP (XEXP (XEXP (x, 0), 1), 0)) == HIGH\n       && GET_CODE (XEXP (x, 1)) == CONST\n       && GET_CODE (XEXP (XEXP (x, 1), 0)) == UNSPEC\n       && XINT (XEXP (XEXP (x, 1), 0), 1) == UNSPEC_TOCREL\n-      && rtx_equal_p (XEXP (XEXP (XEXP (x, 0), 1), 0), XEXP (x, 1)))\n+      && rtx_equal_p (XEXP (XEXP (XEXP (XEXP (x, 0), 1), 0), 0), XEXP (x, 1)))\n     {\n       push_reload (XEXP (x, 0), NULL_RTX, &XEXP (x, 0), NULL,\n \t\t   BASE_REG_CLASS, Pmode, VOIDmode, 0, 0,\n@@ -7197,14 +7199,18 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n \t}\n       else if (mode == Pmode\n \t       && CONSTANT_P (operands[1])\n+\t       && GET_CODE (operands[1]) != HIGH\n+\t       && !(TARGET_CMODEL != CMODEL_SMALL\n+\t\t    && GET_CODE (operands[1]) == CONST\n+\t\t    && GET_CODE (XEXP (operands[1], 0)) == PLUS\n+\t\t    && GET_CODE (XEXP (XEXP (operands[1], 0), 1)) == HIGH)\n \t       && ((GET_CODE (operands[1]) != CONST_INT\n \t\t    && ! easy_fp_constant (operands[1], mode))\n \t\t   || (GET_CODE (operands[1]) == CONST_INT\n \t\t       && (num_insns_constant (operands[1], mode)\n \t\t\t   > (TARGET_CMODEL != CMODEL_SMALL ? 3 : 2)))\n \t\t   || (GET_CODE (operands[0]) == REG\n \t\t       && FP_REGNO_P (REGNO (operands[0]))))\n-\t       && GET_CODE (operands[1]) != HIGH\n \t       && ! legitimate_constant_pool_address_p (operands[1], mode,\n \t\t\t\t\t\t\tfalse)\n \t       && ! toc_relative_expr_p (operands[1])\n@@ -19063,7 +19069,9 @@ create_TOC_reference (rtx symbol, rtx largetoc_reg)\n   tocreg = gen_rtx_REG (Pmode, TOC_REGISTER);\n   if (TARGET_CMODEL != CMODEL_SMALL)\n     {\n-      rtx hi = gen_rtx_PLUS (Pmode, tocreg, gen_rtx_HIGH (Pmode, tocrel));\n+      rtx hi = gen_rtx_CONST (Pmode,\n+\t\t\t      gen_rtx_PLUS (Pmode, tocreg, \n+\t\t\t\t\t    gen_rtx_HIGH (Pmode, tocrel)));\n       if (largetoc_reg != NULL)\n \t{\n \t  emit_move_insn (largetoc_reg, hi);"}, {"sha": "e70598d9f3e7707aac518dd7203c6ae9949db237", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 38, "deletions": 29, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bae1d98650efce91703cc4cb37231bf8c12ef94/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bae1d98650efce91703cc4cb37231bf8c12ef94/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=3bae1d98650efce91703cc4cb37231bf8c12ef94", "patch": "@@ -11523,9 +11523,10 @@\n   \"addi %0,%1,%2@got@tlsgd\"\n   \"&& TARGET_CMODEL != CMODEL_SMALL\"\n   [(set (match_dup 3)\n-  \t(plus:TLSmode (match_dup 1)\n-\t  (high:TLSmode\n-\t    (unspec:TLSmode [(match_dup 2)] UNSPEC_TLSGD))))\n+\t(const:TLSmode\n+\t  (plus:TLSmode (match_dup 1)\n+\t    (high:TLSmode\n+\t      (unspec:TLSmode [(match_dup 2)] UNSPEC_TLSGD)))))\n    (set (match_dup 0)\n    \t(lo_sum:TLSmode (match_dup 3)\n \t    (unspec:TLSmode [(match_dup 2)] UNSPEC_TLSGD)))]\n@@ -11540,10 +11541,11 @@\n \n (define_insn \"*tls_gd_high<TLSmode:tls_abi_suffix>\"\n   [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-     (plus:TLSmode (match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-       (high:TLSmode\n-\t  (unspec:TLSmode [(match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t\t  UNSPEC_TLSGD))))]\n+     (const:TLSmode\n+       (plus:TLSmode (match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n+\t (high:TLSmode\n+\t   (unspec:TLSmode [(match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t\t   UNSPEC_TLSGD)))))]\n   \"HAVE_AS_TLS && TARGET_TLS_MARKERS && TARGET_CMODEL != CMODEL_SMALL\"\n   \"addis %0,%1,%2@got@tlsgd@ha\"\n   [(set_attr \"length\" \"4\")])\n@@ -11658,9 +11660,10 @@\n   \"addi %0,%1,%&@got@tlsld\"\n   \"&& TARGET_CMODEL != CMODEL_SMALL\"\n   [(set (match_dup 2)\n-  \t(plus:TLSmode (match_dup 1)\n-\t  (high:TLSmode\n-\t    (unspec:TLSmode [(const_int 0)] UNSPEC_TLSLD))))\n+\t(const:TLSmode\n+\t  (plus:TLSmode (match_dup 1)\n+\t    (high:TLSmode\n+\t      (unspec:TLSmode [(const_int 0)] UNSPEC_TLSLD)))))\n    (set (match_dup 0)\n    \t(lo_sum:TLSmode (match_dup 2)\n \t    (unspec:TLSmode [(const_int 0)] UNSPEC_TLSLD)))]\n@@ -11675,9 +11678,10 @@\n \n (define_insn \"*tls_ld_high<TLSmode:tls_abi_suffix>\"\n   [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-     (plus:TLSmode (match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-       (high:TLSmode\n-\t  (unspec:TLSmode [(const_int 0)] UNSPEC_TLSLD))))]\n+     (const:TLSmode\n+       (plus:TLSmode (match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n+\t (high:TLSmode\n+\t   (unspec:TLSmode [(const_int 0)] UNSPEC_TLSLD)))))]\n   \"HAVE_AS_TLS && TARGET_TLS_MARKERS && TARGET_CMODEL != CMODEL_SMALL\"\n   \"addis %0,%1,%&@got@tlsld@ha\"\n   [(set_attr \"length\" \"4\")])\n@@ -11753,9 +11757,10 @@\n   \"l<TLSmode:tls_insn_suffix> %0,%2@got@dtprel(%1)\"\n   \"&& TARGET_CMODEL != CMODEL_SMALL\"\n   [(set (match_dup 3)\n-\t(plus:TLSmode (match_dup 1)\n-\t  (high:TLSmode\n-\t    (unspec:TLSmode [(match_dup 2)] UNSPEC_TLSGOTDTPREL))))\n+\t(const:TLSmode\n+\t  (plus:TLSmode (match_dup 1)\n+\t    (high:TLSmode\n+\t      (unspec:TLSmode [(match_dup 2)] UNSPEC_TLSGOTDTPREL)))))\n    (set (match_dup 0)\n \t(lo_sum:TLSmode (match_dup 3)\n \t    (unspec:TLSmode [(match_dup 2)] UNSPEC_TLSGOTDTPREL)))]\n@@ -11770,10 +11775,11 @@\n \n (define_insn \"*tls_got_dtprel_high<TLSmode:tls_abi_suffix>\"\n   [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-     (plus:TLSmode (match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-       (high:TLSmode\n-\t (unspec:TLSmode [(match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t\t UNSPEC_TLSGOTDTPREL))))]\n+     (const:TLSmode\n+       (plus:TLSmode (match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n+\t (high:TLSmode\n+\t   (unspec:TLSmode [(match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t\t   UNSPEC_TLSGOTDTPREL)))))]\n   \"HAVE_AS_TLS && TARGET_CMODEL != CMODEL_SMALL\"\n   \"addis %0,%1,%2@got@dtprel@ha\"\n   [(set_attr \"length\" \"4\")])\n@@ -11823,9 +11829,10 @@\n   \"l<TLSmode:tls_insn_suffix> %0,%2@got@tprel(%1)\"\n   \"&& TARGET_CMODEL != CMODEL_SMALL\"\n   [(set (match_dup 3)\n-\t(plus:TLSmode (match_dup 1)\n-\t  (high:TLSmode\n-\t    (unspec:TLSmode [(match_dup 2)] UNSPEC_TLSGOTTPREL))))\n+\t(const:TLSmode\n+\t  (plus:TLSmode (match_dup 1)\n+\t    (high:TLSmode\n+\t      (unspec:TLSmode [(match_dup 2)] UNSPEC_TLSGOTTPREL)))))\n    (set (match_dup 0)\n \t(lo_sum:TLSmode (match_dup 3)\n \t    (unspec:TLSmode [(match_dup 2)] UNSPEC_TLSGOTTPREL)))]\n@@ -11840,10 +11847,11 @@\n \n (define_insn \"*tls_got_tprel_high<TLSmode:tls_abi_suffix>\"\n   [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-     (plus:TLSmode (match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-       (high:TLSmode\n-\t (unspec:TLSmode [(match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t\t UNSPEC_TLSGOTTPREL))))]\n+     (const:TLSmode\n+       (plus:TLSmode (match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n+\t (high:TLSmode\n+\t   (unspec:TLSmode [(match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t\t   UNSPEC_TLSGOTTPREL)))))]\n   \"HAVE_AS_TLS && TARGET_CMODEL != CMODEL_SMALL\"\n   \"addis %0,%1,%2@got@tprel@ha\"\n   [(set_attr \"length\" \"4\")])\n@@ -12157,8 +12165,9 @@\n ;; Largetoc support\n (define_insn \"largetoc_high\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=b\")\n-        (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n-\t         (high:DI (match_operand:DI 2 \"\" \"\"))))]\n+\t(const:DI\n+\t  (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n+\t\t   (high:DI (match_operand:DI 2 \"\" \"\")))))]\n    \"TARGET_ELF && TARGET_CMODEL != CMODEL_SMALL\"\n    \"{cau|addis} %0,%1,%2@ha\")\n "}]}