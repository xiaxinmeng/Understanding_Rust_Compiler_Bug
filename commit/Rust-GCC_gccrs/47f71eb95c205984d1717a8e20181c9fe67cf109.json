{"sha": "47f71eb95c205984d1717a8e20181c9fe67cf109", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdmNzFlYjk1YzIwNTk4NGQxNzE3YThlMjAxODFjOWZlNjdjZjEwOQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-06-19T21:58:27Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-06-19T21:58:27Z"}, "message": "re PR fortran/40440 (Automatic deallocation component of DT function return value)\n\n2009-06-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/40440\n\t* trans-expr.c (gfc_conv_procedure_call): Do not deallocate\n\tallocatable components if the argument is a pointer.\n\n2009-06-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/40440\n\t* gfortran.dg/alloc_comp_result_2.f90: New test.\n\nFrom-SVN: r148731", "tree": {"sha": "25cce1767c043508102a8305bca778fcf01421fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25cce1767c043508102a8305bca778fcf01421fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47f71eb95c205984d1717a8e20181c9fe67cf109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f71eb95c205984d1717a8e20181c9fe67cf109", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47f71eb95c205984d1717a8e20181c9fe67cf109", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f71eb95c205984d1717a8e20181c9fe67cf109/comments", "author": null, "committer": null, "parents": [{"sha": "6569d386e28bb84135413af40c470d238a7fea54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6569d386e28bb84135413af40c470d238a7fea54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6569d386e28bb84135413af40c470d238a7fea54"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "c38b91ac6fd03c9561914580e25b01a16bad299e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f71eb95c205984d1717a8e20181c9fe67cf109/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f71eb95c205984d1717a8e20181c9fe67cf109/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=47f71eb95c205984d1717a8e20181c9fe67cf109", "patch": "@@ -1,3 +1,9 @@\n+2009-06-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/40440\n+\t* trans-expr.c (gfc_conv_procedure_call): Do not deallocate\n+\tallocatable components if the argument is a pointer.\n+\n 2009-06-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gfortran.h (gfc_expr): Use mpc_t to represent complex numbers."}, {"sha": "f79ad4b3cc7d8dfadee92ffff509f241fb28e3bd", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f71eb95c205984d1717a8e20181c9fe67cf109/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f71eb95c205984d1717a8e20181c9fe67cf109/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=47f71eb95c205984d1717a8e20181c9fe67cf109", "patch": "@@ -2739,6 +2739,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t dealt with in trans-array.c(gfc_conv_array_parameter).  */\n       if (e && e->ts.type == BT_DERIVED\n \t    && e->ts.derived->attr.alloc_comp\n+\t    && !(e->symtree && e->symtree->n.sym->attr.pointer)\n \t    && (e->expr_type != EXPR_VARIABLE && !e->rank))\n         {\n \t  int parm_rank;"}, {"sha": "dcc2e53a5c48dbd2bf3f84d9c062f0a198fc7da1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f71eb95c205984d1717a8e20181c9fe67cf109/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f71eb95c205984d1717a8e20181c9fe67cf109/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=47f71eb95c205984d1717a8e20181c9fe67cf109", "patch": "@@ -1,3 +1,8 @@\n+2009-06-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/40440\n+\t* gfortran.dg/alloc_comp_result_2.f90: New test.\n+\n 2009-06-19  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \tPR target/40482"}, {"sha": "be61f2afbe6dad2185e20f16ff7fe6e4ac1b7118", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_result_2.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f71eb95c205984d1717a8e20181c9fe67cf109/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_result_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f71eb95c205984d1717a8e20181c9fe67cf109/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_result_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_result_2.f90?ref=47f71eb95c205984d1717a8e20181c9fe67cf109", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+! Tests the fix for PR40440, in which gfortran tried to deallocate\n+! the allocatable components of the actual argument of CALL SUB\n+!\n+! Contributed by Juergen Reuter <juergen.reuter@desy.de>\n+! Reduced testcase from Tobias Burnus  <burnus@gcc.gnu.org> \n+!\n+  implicit none\n+  type t\n+    integer, allocatable :: A(:)\n+  end type t\n+  type (t) :: arg\n+  arg = t ([1,2,3])\n+  call sub (func (arg))\n+contains\n+  function func (a)\n+    type(t), pointer :: func\n+    type(t), target :: a\n+    integer, save :: i = 0\n+    if (i /= 0) call abort ! multiple calls would cause this abort\n+    i = i + 1\n+    func => a\n+  end function func\n+  subroutine sub (a)\n+    type(t), intent(IN), target :: a\n+    if (any (a%A .ne. [1,2,3])) call abort\n+  end subroutine sub\n+end"}]}