{"sha": "70f4ad204d9ef74b9650a1088a5d26d121e4ded8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBmNGFkMjA0ZDllZjc0Yjk2NTBhMTA4OGE1ZDI2ZDEyMWU0ZGVkOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-06-12T10:03:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-06-12T10:03:26Z"}, "message": "[multiple changes]\n\n2012-06-12  Gary Dismukes  <dismukes@adacore.com>\n\n\t* projects.texi: Remove comments.\n\n2012-06-12  Thomas Quinot  <quinot@adacore.com>\n\n\t* back_end.adb (Scan_Back_End_Switches): Treat -fdump-scos as\n\tsynonym of -gnateS.\n\t(gnat_post_options): Disable gimple-based SCO generator.\n\t* gnat_ugn.texi: Document that -gnateS is an obsolete synonym\n\tof -fdump-scos.\n\n2012-06-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Different_Generic_Profile): new predicate for\n\tFind_Corresponding_Spec, to handle a rare case of accidental\n\toverloading in an instance, when the profile of a subprogram body\n\tthat depends on a formal type becomes compatible with that of\n\ta homonym whose profile in the generic mentions the actual type.\n\n2012-06-12  Thomas Quinot  <quinot@adacore.com>\n\n\t* gnat1drv.adb: Minor reformatting.\n\nFrom-SVN: r188435", "tree": {"sha": "e288a46410daaa93acff0c9f877a44092ca55ea0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e288a46410daaa93acff0c9f877a44092ca55ea0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70f4ad204d9ef74b9650a1088a5d26d121e4ded8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f4ad204d9ef74b9650a1088a5d26d121e4ded8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70f4ad204d9ef74b9650a1088a5d26d121e4ded8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f4ad204d9ef74b9650a1088a5d26d121e4ded8/comments", "author": null, "committer": null, "parents": [{"sha": "15a5de99668137dd170d91e329595d1b12b0e9b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15a5de99668137dd170d91e329595d1b12b0e9b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15a5de99668137dd170d91e329595d1b12b0e9b9"}], "stats": {"total": 150, "additions": 110, "deletions": 40}, "files": [{"sha": "a5a25489cf0c2c701da0798552da4fa5dd18d93d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4ad204d9ef74b9650a1088a5d26d121e4ded8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4ad204d9ef74b9650a1088a5d26d121e4ded8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=70f4ad204d9ef74b9650a1088a5d26d121e4ded8", "patch": "@@ -1,3 +1,27 @@\n+2012-06-12  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* projects.texi: Remove comments.\n+\n+2012-06-12  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* back_end.adb (Scan_Back_End_Switches): Treat -fdump-scos as\n+\tsynonym of -gnateS.\n+\t(gnat_post_options): Disable gimple-based SCO generator.\n+\t* gnat_ugn.texi: Document that -gnateS is an obsolete synonym\n+\tof -fdump-scos.\n+\n+2012-06-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Different_Generic_Profile): new predicate for\n+\tFind_Corresponding_Spec, to handle a rare case of accidental\n+\toverloading in an instance, when the profile of a subprogram body\n+\tthat depends on a formal type becomes compatible with that of\n+\ta homonym whose profile in the generic mentions the actual type.\n+\n+2012-06-12  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* gnat1drv.adb: Minor reformatting.\n+\n 2012-06-12  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_util.adb (Build_Explicit_Dereference): If the expression"}, {"sha": "6c4b63ff75f315a80767338a94a5ad5c4220f9af", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4ad204d9ef74b9650a1088a5d26d121e4ded8/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4ad204d9ef74b9650a1088a5d26d121e4ded8/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=70f4ad204d9ef74b9650a1088a5d26d121e4ded8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -219,23 +219,30 @@ package body Back_End is\n          elsif Switch_Chars (First .. Last) = \"quiet\" then\n             null;\n \n-         --  Store any other GCC switches\n+         --  Store any other GCC switches. Also do special processing for some\n+         --  specific switches that the Ada front-end knows about.\n \n          else\n             Store_Compilation_Switch (Switch_Chars);\n \n-            --  Special check, the back end switch -fno-inline also sets the\n+            --  Back end switch -fno-inline also sets the Suppress_All_Inlining\n             --  front end flag to entirely inhibit all inlining.\n \n             if Switch_Chars (First .. Last) = \"fno-inline\" then\n                Opt.Suppress_All_Inlining := True;\n \n-            --  Another special check, the switch -fpreserve-control-flow\n-            --  which is also a back end switch sets the front end flag\n-            --  that inhibits improper control flow transformations.\n+            --  Back end switch -fpreserve-control-flow also sets the front end\n+            --  flag that inhibits improper control flow transformations.\n \n             elsif Switch_Chars (First .. Last) = \"fpreserve-control-flow\" then\n                Opt.Suppress_Control_Flow_Optimizations := True;\n+\n+            --  Back end switcg -fdump-scos, which exists primarily for C, is\n+            --  also accepted for Ada as a synonym of -gnateS.\n+\n+            elsif Switch_Chars (First .. Last) = \"fdump-scos\" then\n+               Opt.Generate_SCO := True;\n+\n             end if;\n          end if;\n       end Scan_Back_End_Switches;"}, {"sha": "a3ed807e4e2458326945cac8a6830eddae73e23f", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4ad204d9ef74b9650a1088a5d26d121e4ded8/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4ad204d9ef74b9650a1088a5d26d121e4ded8/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=70f4ad204d9ef74b9650a1088a5d26d121e4ded8", "patch": "@@ -118,9 +118,7 @@ procedure Gnat1drv is\n       --  Debug flag -gnatd.I is a synonym for Generate_SCIL and requires code\n       --  generation.\n \n-      if Debug_Flag_Dot_II\n-        and then Operating_Mode = Generate_Code\n-      then\n+      if Debug_Flag_Dot_II and then Operating_Mode = Generate_Code then\n          Generate_SCIL := True;\n       end if;\n "}, {"sha": "8380530227c6ff20233b33ee30820586b33bc057", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4ad204d9ef74b9650a1088a5d26d121e4ded8/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4ad204d9ef74b9650a1088a5d26d121e4ded8/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=70f4ad204d9ef74b9650a1088a5d26d121e4ded8", "patch": "@@ -4045,6 +4045,13 @@ Makes the compiler output callgraph information for the program, on a\n per-file basis.  The information is generated in the VCG format.  It can\n be decorated with stack-usage per-node information.\n \n+@item -fdump-scos\n+@cindex @option{-fdump-scos} (@command{gcc})\n+Generate SCO (Source Coverage Obligation) information in the ALI file.\n+This information is used by advanced coverage tools. See unit @file{SCOs}\n+in the compiler sources for details in files @file{scos.ads} and\n+@file{scos.adb}.\n+\n @item ^-g^/DEBUG^\n @cindex @option{^-g^/DEBUG^} (@command{gcc})\n Generate debugging information. This information is stored in the object\n@@ -4201,12 +4208,10 @@ example a Pure unit cannot WITH a Preelaborate unit. If this switch is used,\n these errors become warnings (which can be ignored, or suppressed in the usual\n manner). This can be useful in some specialized circumstances such as the\n temporary use of special test software.\n+\n @item -gnateS\n @cindex @option{-gnateS} (@command{gcc})\n-Generate SCO (Source Coverage Obligation) information in the ALI\n-file. This information is used by advanced coverage tools. See\n-unit @file{SCOs} in the compiler sources for details in files\n-@file{scos.ads} and @file{scos.adb}.\n+Synonym of @option{-fdump-scos}, kept for backards compatibility.\n \n @item -gnatE\n @cindex @option{-gnatE} (@command{gcc})"}, {"sha": "a1cdb69c2615313a62bfaac046dbd0fe06c3bfcb", "filename": "gcc/ada/projects.texi", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4ad204d9ef74b9650a1088a5d26d121e4ded8/gcc%2Fada%2Fprojects.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4ad204d9ef74b9650a1088a5d26d121e4ded8/gcc%2Fada%2Fprojects.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprojects.texi?ref=70f4ad204d9ef74b9650a1088a5d26d121e4ded8", "patch": "@@ -2265,19 +2265,11 @@ them independently. An aggregate project does not have these\n limitations and can aggregate two project trees that have common\n sources.\n \n-@smallexample\n-Aggregate projects can group projects with duplicate file names\n-@end smallexample\n-\n-This scenario is particularly useful in environment like VxWorks 653\n+This scenario is particularly useful in environments like VxWorks 653\n where the applications running in the multiple partitions can be built\n in parallel through a single gprbuild command. This also works nicely\n with Annex E.\n \n-@smallexample\n-   Aggregate projects can be used to build multiple partitions\n-@end smallexample\n-\n @c ---------------------------------------------\n @node Define a build environment\n @subsection Define a build environment"}, {"sha": "80e07fd8db785af7da3f7ea816581b9d8cb928c6", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 62, "deletions": 18, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4ad204d9ef74b9650a1088a5d26d121e4ded8/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4ad204d9ef74b9650a1088a5d26d121e4ded8/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=70f4ad204d9ef74b9650a1088a5d26d121e4ded8", "patch": "@@ -7416,6 +7416,8 @@ package body Sem_Ch6 is\n             --  The following is too permissive. A more precise test should\n             --  check that the generic actual is an ancestor subtype of the\n             --  other ???.\n+            --  See code in Find_Corresponding_Spec that applies an additional\n+            --  filter to handle accidental amiguities in instances.\n \n             return not Is_Generic_Actual_Type (T1)\n               or else not Is_Generic_Actual_Type (T2)\n@@ -8148,6 +8150,46 @@ package body Sem_Ch6 is\n \n       E : Entity_Id;\n \n+      function Different_Generic_Profile (E : Entity_Id) return Boolean;\n+      --  Even if fully conformant, a body may depend on a generic actual when\n+      --  the spec does not, or vice versa, in which case they were distinct\n+      --  entities in the generic.\n+\n+      -------------------------------\n+      -- Different_Generic_Profile --\n+      -------------------------------\n+\n+      function Different_Generic_Profile (E : Entity_Id) return Boolean is\n+         F1, F2 : Entity_Id;\n+\n+      begin\n+         if Ekind (E) = E_Function\n+           and then Is_Generic_Actual_Type (Etype (E))\n+           /= Is_Generic_Actual_Type (Etype (Designator))\n+         then\n+            return True;\n+         end if;\n+\n+         F1 := First_Formal (Designator);\n+         F2 := First_Formal (E);\n+\n+         while Present (F1) loop\n+            if\n+              Is_Generic_Actual_Type (Etype (F1))\n+              /= Is_Generic_Actual_Type (Etype (F2))\n+            then\n+               return True;\n+            end if;\n+\n+            Next_Formal (F1);\n+            Next_Formal (F2);\n+         end loop;\n+\n+         return False;\n+      end Different_Generic_Profile;\n+\n+   --  Start of processing for Find_Corresponding_Spec\n+\n    begin\n       E := Current_Entity (Designator);\n       while Present (E) loop\n@@ -8163,13 +8205,12 @@ package body Sem_Ch6 is\n                          and then Type_Conformant (E, Designator))\n             then\n                --  Within an instantiation, we know that spec and body are\n-               --  subtype conformant, because they were subtype conformant\n-               --  in the generic. We choose the subtype-conformant entity\n-               --  here as well, to resolve spurious ambiguities in the\n-               --  instance that were not present in the generic (i.e. when\n-               --  two different types are given the same actual). If we are\n-               --  looking for a spec to match a body, full conformance is\n-               --  expected.\n+               --  subtype conformant, because they were subtype conformant in\n+               --  the generic. We choose the subtype-conformant entity here as\n+               --  well, to resolve spurious ambiguities in the instance that\n+               --  were not present in the generic (i.e. when two different\n+               --  types are given the same actual). If we are looking for a\n+               --  spec to match a body, full conformance is expected.\n \n                if In_Instance then\n                   Set_Convention (Designator, Convention (E));\n@@ -8188,6 +8229,9 @@ package body Sem_Ch6 is\n \n                   elsif not Subtype_Conformant (Designator, E) then\n                      goto Next_Entity;\n+\n+                  elsif Different_Generic_Profile (E) then\n+                     goto Next_Entity;\n                   end if;\n                end if;\n \n@@ -8218,12 +8262,12 @@ package body Sem_Ch6 is\n \n                   return E;\n \n-               --  If E is an internal function with a controlling result\n-               --  that was created for an operation inherited by a null\n-               --  extension, it may be overridden by a body without a previous\n-               --  spec (one more reason why these should be shunned). In that\n-               --  case remove the generated body if present, because the\n-               --  current one is the explicit overriding.\n+               --  If E is an internal function with a controlling result that\n+               --  was created for an operation inherited by a null extension,\n+               --  it may be overridden by a body without a previous spec (one\n+               --  more reason why these should be shunned). In that case\n+               --  remove the generated body if present, because the current\n+               --  one is the explicit overriding.\n \n                elsif Ekind (E) = E_Function\n                  and then Ada_Version >= Ada_2005\n@@ -8329,9 +8373,9 @@ package body Sem_Ch6 is\n         renames Fully_Conformant_Expressions;\n \n       function FCL (L1, L2 : List_Id) return Boolean;\n-      --  Compare elements of two lists for conformance. Elements have to\n-      --  be conformant, and actuals inserted as default parameters do not\n-      --  match explicit actuals with the same value.\n+      --  Compare elements of two lists for conformance. Elements have to be\n+      --  conformant, and actuals inserted as default parameters do not match\n+      --  explicit actuals with the same value.\n \n       function FCO (Op_Node, Call_Node : Node_Id) return Boolean;\n       --  Compare an operator node with a function call\n@@ -8356,8 +8400,8 @@ package body Sem_Ch6 is\n             N2 := First (L2);\n          end if;\n \n-         --  Compare two lists, skipping rewrite insertions (we want to\n-         --  compare the original trees, not the expanded versions!)\n+         --  Compare two lists, skipping rewrite insertions (we want to compare\n+         --  the original trees, not the expanded versions!)\n \n          loop\n             if Is_Rewrite_Insertion (N1) then"}]}