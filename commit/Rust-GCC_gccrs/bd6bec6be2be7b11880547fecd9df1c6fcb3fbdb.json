{"sha": "bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ2YmVjNmJlMmJlN2IxMTg4MDU0N2ZlY2Q5ZGYxYzZmY2IzZmJkYg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@merlin.codesourcery.com", "date": "2002-04-14T23:35:36Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-04-14T23:35:36Z"}, "message": "diagnostic.h (output_buffer_state): Redefine.\n\n\t* diagnostic.h (output_buffer_state): Redefine.\n\t(output_format_decoder): New macro.\n\t(output_prefixing_rule): Likewise.\n\t(output_line_cutoff): Likewise.\n\t(diagnostic_format_decoder): Adjust.\n\t(diagnostic_prefixing_rule): Likewise.\n\t(diagnostic_line_cutoff): Likewise.\n\t(diagnostic_state): Likewise.\n\t(diagnostic_kind_count): Likewise.\n\t(diagnostic_buffer): Now a macro.\n\n\t* diagnostic.c (diagnostic_buffer): Remove definition.\n\t(output_is_line_wrapping): Adjust.\n\t(set_real_maximum_length): Likewise.\n\t(output_set_maximum_length): Likewise.\n\t(init_output_buffer): Likewise.\n\t(lhd_print_error_function): Likewise.\n\t(output_do_verbatim): Likewise.\n\ncp/\n\t* error.c (cxx_print_error_function): Adjust call to macros.\n\nFrom-SVN: r52307", "tree": {"sha": "66b07837c16817e692a056798f570c35b8bab971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66b07837c16817e692a056798f570c35b8bab971"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb/comments", "author": null, "committer": null, "parents": [{"sha": "f20c0d98a7ed7843f317dd0d74c7dc7d2c239d10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f20c0d98a7ed7843f317dd0d74c7dc7d2c239d10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f20c0d98a7ed7843f317dd0d74c7dc7d2c239d10"}], "stats": {"total": 99, "additions": 64, "deletions": 35}, "files": [{"sha": "8ff923ca9fd098aa1f6e7c161c77ab8c11d2fcef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb", "patch": "@@ -1,3 +1,24 @@\n+2002-04-15  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n+\n+\t* diagnostic.h (output_buffer_state): Redefine.\n+\t(output_format_decoder): New macro.\n+\t(output_prefixing_rule): Likewise.\n+\t(output_line_cutoff): Likewise.\n+\t(diagnostic_format_decoder): Adjust.\n+\t(diagnostic_prefixing_rule): Likewise.\n+\t(diagnostic_line_cutoff): Likewise.\n+\t(diagnostic_state): Likewise.\n+\t(diagnostic_kind_count): Likewise.\n+\t(diagnostic_buffer): Now a macro.\n+\n+\t* diagnostic.c (diagnostic_buffer): Remove definition.\n+\t(output_is_line_wrapping): Adjust.\n+\t(set_real_maximum_length): Likewise.\n+\t(output_set_maximum_length): Likewise.\n+\t(init_output_buffer): Likewise.\n+\t(lhd_print_error_function): Likewise.\n+\t(output_do_verbatim): Likewise.\n+\n 2002-04-14  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cpperror.c (print_location): Don't print include chain"}, {"sha": "2863b77aca6ed090e8fb6546821242a514623a05", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb", "patch": "@@ -1,3 +1,7 @@\n+2002-04-15  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n+\n+\t* error.c (cxx_print_error_function): Adjust call to macros.\n+\n 2002-04-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* class.c (layout_virtual_bases): Do all dsize computation on trees."}, {"sha": "63b09bee914499c28958a47b85d25f17bf0d319f", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb", "patch": "@@ -2382,10 +2382,10 @@ cxx_print_error_function (context, file)\n   output_state os;\n \n   lhd_print_error_function (context, file);\n-  os = output_buffer_state (context);\n+  os = diagnostic_state (context);\n   output_set_prefix ((output_buffer *)context, file);\n   maybe_print_instantiation_context ((output_buffer *)context);\n-  output_buffer_state (context) = os;\n+  diagnostic_state (context) = os;\n }\n \n static void"}, {"sha": "3e45e36aacd7bd8c8dae61a387cc989a9078f0a6", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb", "patch": "@@ -103,9 +103,6 @@ extern int warnings_are_errors;\n static diagnostic_context global_diagnostic_context;\n diagnostic_context *global_dc = &global_diagnostic_context;\n \n-/* This will be removed shortly.  */\n-output_buffer *diagnostic_buffer = &global_diagnostic_context.buffer;\n-\n /* Function of last error message;\n    more generally, function such that if next error message is in it\n    then we don't have to mention the function name.  */\n@@ -177,7 +174,7 @@ int\n output_is_line_wrapping (buffer)\n      output_buffer *buffer;\n {\n-  return diagnostic_line_cutoff (buffer) > 0;\n+  return output_line_cutoff (buffer) > 0;\n }\n \n /* Return BUFFER's prefix.  */\n@@ -200,19 +197,19 @@ set_real_maximum_length (buffer)\n    we'll emit prefix only once per diagnostic message, it is appropriate\n   not to increase unnecessarily the line-length cut-off.  */\n   if (! output_is_line_wrapping (buffer)\n-      || diagnostic_prefixing_rule (buffer) == DIAGNOSTICS_SHOW_PREFIX_ONCE\n-      || diagnostic_prefixing_rule (buffer) == DIAGNOSTICS_SHOW_PREFIX_NEVER)\n-    line_wrap_cutoff (buffer) = diagnostic_line_cutoff (buffer);\n+      || output_prefixing_rule (buffer) == DIAGNOSTICS_SHOW_PREFIX_ONCE\n+      || output_prefixing_rule (buffer) == DIAGNOSTICS_SHOW_PREFIX_NEVER)\n+    line_wrap_cutoff (buffer) = output_line_cutoff (buffer);\n   else\n     {\n       int prefix_length =\n         output_prefix (buffer) ? strlen (output_prefix (buffer)) : 0;\n       /* If the prefix is ridiculously too long, output at least\n          32 characters.  */\n-      if (diagnostic_line_cutoff (buffer) - prefix_length < 32)\n-        line_wrap_cutoff (buffer) = diagnostic_line_cutoff (buffer) + 32;\n+      if (output_line_cutoff (buffer) - prefix_length < 32)\n+        line_wrap_cutoff (buffer) = output_line_cutoff (buffer) + 32;\n       else\n-        line_wrap_cutoff (buffer) = diagnostic_line_cutoff (buffer);\n+        line_wrap_cutoff (buffer) = output_line_cutoff (buffer);\n     }\n }\n \n@@ -224,7 +221,7 @@ output_set_maximum_length (buffer, length)\n      output_buffer *buffer;\n      int length;\n {\n-  diagnostic_line_cutoff (buffer) = length;\n+  output_line_cutoff (buffer) = length;\n   set_real_maximum_length (buffer);\n }\n \n@@ -301,8 +298,8 @@ init_output_buffer (buffer, prefix, maximum_length)\n   memset (buffer, 0, sizeof (output_buffer));\n   obstack_init (&buffer->obstack);\n   output_buffer_attached_stream (buffer) = stderr;\n-  diagnostic_line_cutoff (buffer) = maximum_length;\n-  diagnostic_prefixing_rule (buffer) = diagnostic_prefixing_rule (global_dc);\n+  output_line_cutoff (buffer) = maximum_length;\n+  output_prefixing_rule (buffer) = diagnostic_prefixing_rule (global_dc);\n   output_set_prefix (buffer, prefix);\n   output_text_length (buffer) = 0;\n   clear_diagnostic_info (buffer);  \n@@ -354,7 +351,7 @@ output_emit_prefix (buffer)\n {\n   if (output_prefix (buffer) != NULL)\n     {\n-      switch (diagnostic_prefixing_rule (buffer))\n+      switch (output_prefixing_rule (buffer))\n         {\n         default:\n         case DIAGNOSTICS_SHOW_PREFIX_NEVER:\n@@ -1091,7 +1088,7 @@ lhd_print_error_function (context, file)\n       char *prefix = file ? build_message_string (\"%s: \", file) : NULL;\n       output_state os;\n \n-      os = output_buffer_state (context);\n+      os = diagnostic_state (context);\n       output_set_prefix ((output_buffer *) context, prefix);\n       \n       if (current_function_decl == NULL)\n@@ -1111,7 +1108,7 @@ lhd_print_error_function (context, file)\n \n       record_last_error_function ();\n       output_buffer_to_stream ((output_buffer *) context);\n-      output_buffer_state (context) = os;\n+      diagnostic_state (context) = os;\n       free ((char*) prefix);\n     }\n }\n@@ -1307,7 +1304,7 @@ output_do_verbatim (buffer, msgid, args_ptr)\n \n   os = output_buffer_state (buffer);\n   output_prefix (buffer) = NULL;\n-  diagnostic_prefixing_rule (buffer) = DIAGNOSTICS_SHOW_PREFIX_NEVER;\n+  output_prefixing_rule (buffer) = DIAGNOSTICS_SHOW_PREFIX_NEVER;\n   output_buffer_text_cursor (buffer) = _(msgid);\n   output_buffer_ptr_to_format_args (buffer) = args_ptr;\n   output_set_maximum_length (buffer, 0);"}, {"sha": "925134af48f9d5e36c0dd4a0cc476215ca73c461", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=bd6bec6be2be7b11880547fecd9df1c6fcb3fbdb", "patch": "@@ -130,9 +130,8 @@ struct output_buffer\n   printer_fn format_decoder;\n };\n \n-/* Current state of the diagnostic_context' output_buffer.  This macro\n-   accepts both `diagnostic_context *' and `output_buffer *'.  */\n-#define output_buffer_state(BUFFER) ((output_buffer *)(BUFFER))->state\n+/* Current state of an output_buffer.  */\n+#define output_buffer_state(BUFFER) (BUFFER)->state\n \n /* The stream attached to the output_buffer, where the formatted\n    diagnostics will ultimately go.  Works only on `output_buffer *'.  */\n@@ -157,6 +156,16 @@ struct output_buffer\n #define output_message_text(BUFFER) \\\n    ((const char *) obstack_base (&(BUFFER)->obstack))\n \n+/* Client supplied function used to decode formats.  */\n+#define output_format_decoder(BUFFER)     (BUFFER)->format_decoder\n+\n+/* Prefixing rule used in formatting a diagnostic message.  */\n+#define output_prefixing_rule(BUFFER)  (BUFFER)->state.prefixing_rule\n+\n+/* Maximum characters per line in automatic line wrapping mode.\n+   Zero means don't wrap lines.  */\n+#define output_line_cutoff(BUFFER)  (BUFFER)->state.ideal_maximum_length\n+\n /* This data structure bundles altogether any information relevant to\n    the context of a diagnostic message.  */\n struct diagnostic_context\n@@ -224,31 +233,29 @@ struct diagnostic_context\n /* Extension hook for client.  */\n #define diagnostic_auxiliary_data(DC) (DC)->x_data\n \n-/* Client supplied function used to decode formats.  Can operate on both\n- `output_buffer *' and `diagnostic_context *'.  */\n-#define diagnostic_format_decoder(DC) ((output_buffer *)(DC))->format_decoder\n+/* Same as output_format_decoder.  Works on 'diagnostic_context *'.  */\n+#define diagnostic_format_decoder(DC) output_format_decoder (&(DC)->buffer)\n \n-/* Prefixing rule used in formatting a diagnostic message.  Accepts both\n-   `output_buffer *' and `diagnostic_context *'.  */\n-#define diagnostic_prefixing_rule(DC) \\\n-   ((output_buffer *)(DC))->state.prefixing_rule\n+/* Same as output_prefixing_rule.  Works on 'diagnostic_context *'.  */\n+#define diagnostic_prefixing_rule(DC) output_prefixing_rule (&(DC)->buffer)\n \n /* Maximum characters per line in automatic line wrapping mode.\n    Zero means don't wrap lines.  */\n-#define diagnostic_line_cutoff(DC) \\\n-   ((output_buffer *)(DC))->state.ideal_maximum_length\n+#define diagnostic_line_cutoff(DC) output_line_cutoff (&(DC)->buffer)\n+\n+/* Same as output_buffer_state, but works on 'diagnostic_context *'.  */\n+#define diagnostic_state(DC)  output_buffer_state (&(DC)->buffer)\n+\n+#define diagnostic_buffer (&global_dc->buffer)\n \n /* This diagnostic context is used by front-ends that directly output\n    diagnostic messages without going through `error', `warning',\n    and similar functions.  */\n extern diagnostic_context *global_dc;\n \n-/* This will be removed shortly.  */\n-extern output_buffer *diagnostic_buffer;\n-\n /* The total count of a KIND of diagnostics meitted so far.  */\n #define diagnostic_kind_count(DC, DK) \\\n-   ((output_buffer *)(DC))->state.diagnostic_count[(int) (DK)]\n+   (DC)->buffer.state.diagnostic_count[(int) (DK)]\n \n /* The number of errors that have been issued so far.  Ideally, these\n    would take an output_buffer as an argument.  */"}]}