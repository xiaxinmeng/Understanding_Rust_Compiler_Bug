{"sha": "d8b5a1a00d4f88aa82c9119095e2b4993444f6ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhiNWExYTAwZDRmODhhYTgyYzkxMTkwOTVlMmI0OTkzNDQ0ZjZlZQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-01-24T21:06:01Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-01-24T21:06:01Z"}, "message": "PR c/86125 - missing -Wbuiltin-declaration-mismatch on a mismatched return type\n\nPR c/86125 - missing -Wbuiltin-declaration-mismatch on a mismatched return type\nPR middle-end/86308 - ICE in verify_gimple calling index() with an invalid declaration\nPR c/86125 - missing -Wbuiltin-declaration-mismatch on a mismatched return type\nPR c/88886 - [9 Regression] ice in get_constant, at c-family/c-format.c:292\n\ngcc/c/ChangeLog:\n\n\tPR c/86125\n\tPR c/88886\n\tPR middle-end/86308\n\t* c-decl.c (match_builtin_function_types): Add arguments.\n\t(diagnose_mismatched_decls): Diagnose mismatched declarations\n\tof built-ins more strictly.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/86125\n\tPR c/88886\n\tPR middle-end/86308\n\t* gcc.dg/Wbuiltin-declaration-mismatch-6.c: New test.\n\t* gcc.dg/Wbuiltin-declaration-mismatch-7.c: New test.\n\t* gcc.dg/Wbuiltin-declaration-mismatch-8.c: New test.\n\t* gcc.dg/Wbuiltin-declaration-mismatch-9.c: New test.\n\t* gcc.dg/Wbuiltin-declaration-mismatch-10.c: New test.\n\t* gcc.dg/builtins-69.c: New test.\n\t* gcc.dg/Wint-conversion-2.c: Add expected warning.\n\t* gcc.c-torture/execute/eeprof-1.c: Adjust function signatures.\n\nFrom-SVN: r268251", "tree": {"sha": "e7c8ef5adbfbf022494077b361707815ca26de7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7c8ef5adbfbf022494077b361707815ca26de7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b0e0e88526c47e05346469db24d4111b5f43be54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e0e88526c47e05346469db24d4111b5f43be54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0e0e88526c47e05346469db24d4111b5f43be54"}], "stats": {"total": 274, "additions": 243, "deletions": 31}, "files": [{"sha": "cb89cd881e50639b92a4a8f11c1967195be0bd7d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=d8b5a1a00d4f88aa82c9119095e2b4993444f6ee", "patch": "@@ -1,3 +1,12 @@\n+2019-01-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/86125\n+\tPR c/88886\n+\tPR middle-end/86308\n+\t* c-decl.c (match_builtin_function_types): Add arguments.\n+\t(diagnose_mismatched_decls): Diagnose mismatched declarations\n+\tof built-ins more strictly.\n+\n 2019-01-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/88976"}, {"sha": "b60f1557e9e0e3449b679ad62932fb86720372b9", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 97, "deletions": 23, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=d8b5a1a00d4f88aa82c9119095e2b4993444f6ee", "patch": "@@ -1631,43 +1631,91 @@ c_bind (location_t loc, tree decl, bool is_global)\n   bind (DECL_NAME (decl), decl, scope, false, nested, loc);\n }\n \f\n+\n+/* Stores the first FILE* argument type (whatever it is) seen in\n+   a declaration of a file I/O built-in.  Subsequent declarations\n+   of such built-ins are expected to refer to it rather than to\n+   fileptr_type_node which is just void* (or to any other type).\n+   Used only by match_builtin_function_types.  */\n+\n+static GTY(()) tree last_fileptr_type;\n+\n /* Subroutine of compare_decls.  Allow harmless mismatches in return\n-   and argument types provided that the type modes match.  This function\n-   return a unified type given a suitable match, and 0 otherwise.  */\n+   and argument types provided that the type modes match.  Set *STRICT\n+   and *ARGNO to the expected argument type and number in case of\n+   an argument type mismatch or null and zero otherwise.  Return\n+   a unified type given a suitable match, and 0 otherwise.  */\n \n static tree\n-match_builtin_function_types (tree newtype, tree oldtype)\n+match_builtin_function_types (tree newtype, tree oldtype,\n+\t\t\t      tree *strict, unsigned *argno)\n {\n-  tree newrettype, oldrettype;\n-  tree newargs, oldargs;\n-  tree trytype, tryargs;\n-\n   /* Accept the return type of the new declaration if same modes.  */\n-  oldrettype = TREE_TYPE (oldtype);\n-  newrettype = TREE_TYPE (newtype);\n+  tree oldrettype = TREE_TYPE (oldtype);\n+  tree newrettype = TREE_TYPE (newtype);\n+\n+  *argno = 0;\n+  *strict = NULL_TREE;\n \n   if (TYPE_MODE (oldrettype) != TYPE_MODE (newrettype))\n     return NULL_TREE;\n \n-  oldargs = TYPE_ARG_TYPES (oldtype);\n-  newargs = TYPE_ARG_TYPES (newtype);\n-  tryargs = newargs;\n+  if (!comptypes (oldrettype, newrettype))\n+    *strict = oldrettype;\n \n-  while (oldargs || newargs)\n+  tree oldargs = TYPE_ARG_TYPES (oldtype);\n+  tree newargs = TYPE_ARG_TYPES (newtype);\n+  tree tryargs = newargs;\n+\n+  for (unsigned i = 1; oldargs || newargs; ++i)\n     {\n       if (!oldargs\n \t  || !newargs\n \t  || !TREE_VALUE (oldargs)\n-\t  || !TREE_VALUE (newargs)\n-\t  || TYPE_MODE (TREE_VALUE (oldargs))\n-\t     != TYPE_MODE (TREE_VALUE (newargs)))\n+\t  || !TREE_VALUE (newargs))\n \treturn NULL_TREE;\n \n+      tree oldtype = TREE_VALUE (oldargs);\n+      tree newtype = TREE_VALUE (newargs);\n+\n+      /* Fail for types with incompatible modes/sizes.  */\n+      if (TYPE_MODE (TREE_VALUE (oldargs))\n+\t  != TYPE_MODE (TREE_VALUE (newargs)))\n+\treturn NULL_TREE;\n+\n+      /* Fail for function and object pointer mismatches.  */\n+      if (FUNCTION_POINTER_TYPE_P (oldtype) != FUNCTION_POINTER_TYPE_P (newtype)\n+\t  || POINTER_TYPE_P (oldtype) != POINTER_TYPE_P (newtype))\n+\treturn NULL_TREE;\n+\n+      if (oldtype == fileptr_type_node)\n+\t{\n+\t  /* Store the first FILE* argument type (whatever it is), and\n+\t     expect any subsequent declarations of file I/O built-ins\n+\t     to refer to it rather than to fileptr_type_node which is\n+\t     just void*.  */\n+\t  if (last_fileptr_type)\n+\t    {\n+\t      if (!comptypes (last_fileptr_type, newtype))\n+\t\t{\n+\t\t  *argno = i;\n+\t\t  *strict = last_fileptr_type;\n+\t\t}\n+\t    }\n+\t  else\n+\t    last_fileptr_type = newtype;\n+\t}\n+      else if (!*strict && !comptypes (oldtype, newtype))\n+\t{\n+\t  *argno = i;\n+\t  *strict = oldtype;\n+\t}\n+\n       oldargs = TREE_CHAIN (oldargs);\n       newargs = TREE_CHAIN (newargs);\n     }\n \n-  trytype = build_function_type (newrettype, tryargs);\n+  tree trytype = build_function_type (newrettype, tryargs);\n \n   /* Allow declaration to change transaction_safe attribute.  */\n   tree oldattrs = TYPE_ATTRIBUTES (oldtype);\n@@ -1881,14 +1929,26 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n       if (TREE_CODE (olddecl) == FUNCTION_DECL\n \t  && fndecl_built_in_p (olddecl) && !C_DECL_DECLARED_BUILTIN (olddecl))\n \t{\n-\t  /* Accept harmless mismatch in function types.\n-\t     This is for the ffs and fprintf builtins.  */\n-\t  tree trytype = match_builtin_function_types (newtype, oldtype);\n+\t  /* Accept \"harmless\" mismatches in function types such\n+\t     as missing qualifiers or pointer vs same size integer\n+\t     mismatches.  This is for the ffs and fprintf builtins.\n+\t     However, with -Wextra in effect, diagnose return and\n+\t     argument types that are incompatible according to\n+\t     language rules.  */\n+\t  tree mismatch_expect;\n+\t  unsigned mismatch_argno;\n+\n+\t  tree trytype = match_builtin_function_types (newtype, oldtype,\n+\t\t\t\t\t\t       &mismatch_expect,\n+\t\t\t\t\t\t       &mismatch_argno);\n \n \t  if (trytype && comptypes (newtype, trytype))\n \t    *oldtypep = oldtype = trytype;\n \t  else\n \t    {\n+\t      /* If types don't match for a built-in, throw away the\n+\t\t built-in.  No point in calling locate_old_decl here, it\n+\t\t won't print anything.  */\n \t      const char *header\n \t\t= header_for_builtin_fn (DECL_FUNCTION_CODE (olddecl));\n \t      location_t loc = DECL_SOURCE_LOCATION (newdecl);\n@@ -1905,11 +1965,25 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t\t  inform (&richloc,\n \t\t\t  \"%qD is declared in header %qs\", olddecl, header);\n \t\t}\n-\t      /* If types don't match for a built-in, throw away the\n-\t\t built-in.  No point in calling locate_old_decl here, it\n-\t\t won't print anything.  */\n \t      return false;\n \t    }\n+\n+\t  if (mismatch_expect && extra_warnings)\n+\t    {\n+\t      /* If types match only loosely, print a warning but accept\n+\t\t the redeclaration.  */\n+\t      location_t newloc = DECL_SOURCE_LOCATION (newdecl);\n+\t      if (mismatch_argno)\n+\t\twarning_at (newloc, OPT_Wbuiltin_declaration_mismatch,\n+\t\t\t    \"mismatch in argument %u type of built-in \"\n+\t\t\t    \"function %qD; expected %qT\",\n+\t\t\t    mismatch_argno, newdecl, mismatch_expect);\n+\t      else\n+\t\twarning_at (newloc, OPT_Wbuiltin_declaration_mismatch,\n+\t\t\t    \"mismatch in return type of built-in \"\n+\t\t\t    \"function %qD; expected %qT\",\n+\t\t\t    newdecl, mismatch_expect);\n+\t    }\n \t}\n       else if (TREE_CODE (olddecl) == FUNCTION_DECL\n \t       && DECL_IS_BUILTIN (olddecl))"}, {"sha": "fa88d9d35cba0d0f2d2f92bf6983e684108ed605", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d8b5a1a00d4f88aa82c9119095e2b4993444f6ee", "patch": "@@ -1,3 +1,17 @@\n+2019-01-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/86125\n+\tPR c/88886\n+\tPR middle-end/86308\n+\t* gcc.dg/Wbuiltin-declaration-mismatch-6.c: New test.\n+\t* gcc.dg/Wbuiltin-declaration-mismatch-7.c: New test.\n+\t* gcc.dg/Wbuiltin-declaration-mismatch-8.c: New test.\n+\t* gcc.dg/Wbuiltin-declaration-mismatch-9.c: New test.\n+\t* gcc.dg/Wbuiltin-declaration-mismatch-10.c: New test.\n+\t* gcc.dg/builtins-69.c: New test.\n+\t* gcc.dg/Wint-conversion-2.c: Add expected warning.\n+\t* gcc.c-torture/execute/eeprof-1.c: Adjust function signatures.\n+\n 2019-01-24  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR rtl-optimization/88948"}, {"sha": "c10f4cf83c358a3fdf7c52a5b2ad1ec0857a859e", "filename": "gcc/testsuite/gcc.c-torture/execute/eeprof-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Feeprof-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Feeprof-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Feeprof-1.c?ref=d8b5a1a00d4f88aa82c9119095e2b4993444f6ee", "patch": "@@ -62,18 +62,18 @@ int main ()\n   return 0;\n }\n \n-void __cyg_profile_func_enter (void (*fn)(), void (*parent)()) NOCHK;\n-void __cyg_profile_func_exit (void (*fn)(), void (*parent)()) NOCHK;\n+void __cyg_profile_func_enter (void*, void*) NOCHK;\n+void __cyg_profile_func_exit (void*, void*) NOCHK;\n \n __attribute__ ((noinline))\n-void __cyg_profile_func_enter (void (*fn)(), void (*parent)())\n+void __cyg_profile_func_enter (void *fn, void *parent)\n {\n   entry_calls++;\n-  last_fn_entered = fn;\n+  last_fn_entered = (void (*)())fn;\n }\n __attribute__ ((noinline))\n-void __cyg_profile_func_exit (void (*fn)(), void (*parent)())\n+void __cyg_profile_func_exit (void *fn, void *parent)\n {\n   exit_calls++;\n-  last_fn_exited = fn;\n+  last_fn_exited = (void (*)())fn;\n }"}, {"sha": "58de1d48b6a51701eb251cdbe2385a3bc49fe7ed", "filename": "gcc/testsuite/gcc.dg/Wbuiltin-declaration-mismatch-10.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-10.c?ref=d8b5a1a00d4f88aa82c9119095e2b4993444f6ee", "patch": "@@ -0,0 +1,10 @@\n+/* PR c/86308 - ICE in verify_gimple calling an invalid index() declaration\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+int index (int, int);         /* { dg-warning \"conflicting types for built-in function .index.; expected .char \\\\\\*\\\\\\(const char \\\\\\*, int\\\\\\).\" } */\n+\n+int foo (const short *a)\n+{\n+  return a[index (0, 0)];\n+}"}, {"sha": "32af9febfaf7a99c0357a5b988e45d57596f9152", "filename": "gcc/testsuite/gcc.dg/Wbuiltin-declaration-mismatch-6.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-6.c?ref=d8b5a1a00d4f88aa82c9119095e2b4993444f6ee", "patch": "@@ -0,0 +1,18 @@\n+/* PR c/86125 - missing -Wbuiltin-declaration-mismatch on a mismatched\n+   return type\n+   Verify that declarations of file I/O built-ins with an arbitrary\n+   object pointer do not trigger -Wbuiltin-declaration-mismatch.\n+   { dg-do compile }\n+   { dg-options \"-Wbuiltin-declaration-mismatch -Wextra\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct StdioFile;\n+\n+int fprintf (struct StdioFile*, const char*, ...);\n+int vfprintf (struct StdioFile*, const char*, __builtin_va_list);\n+int fputc (int, struct StdioFile*);\n+int fputs (const char*, struct StdioFile*);\n+int fscanf (struct StdioFile*, const char*, ...);\n+int vfscanf (struct StdioFile*, const char*, __builtin_va_list);\n+size_t fwrite (const void*, size_t, size_t, struct StdioFile*);"}, {"sha": "77a4bfff4d385e473b711f5db39a8bf96cc40aaa", "filename": "gcc/testsuite/gcc.dg/Wbuiltin-declaration-mismatch-7.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-7.c?ref=d8b5a1a00d4f88aa82c9119095e2b4993444f6ee", "patch": "@@ -0,0 +1,26 @@\n+/* PR c/86125 - missing -Wbuiltin-declaration-mismatch on a mismatched\n+   return type\n+   Verify that a declaration of vfprintf() with withe the wrong last\n+   argument triggers -Wbuiltin-declaration-mismatch even without -Wextra.\n+   { dg-do compile }\n+   { dg-options \"-Wbuiltin-declaration-mismatch\" } */\n+\n+struct StdioFile;\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct StdioFile;\n+\n+int fprintf (struct StdioFile*, const char*);   /* { dg-warning \"conflicting types for built-in function .fprintf.; expected .int\\\\\\(\\[a-z_\\]+ \\\\\\*, const char \\\\\\*, \\.\\.\\.\\\\\\).\" } */\n+\n+int vfprintf (struct StdioFile*, const char*, ...);   /* { dg-warning \"conflicting types for built-in function .vfprintf.; expected .int\\\\\\(\\[a-z_\\]+ \\\\\\*, const char \\\\\\*, \\[a-z_\\]+ \\\\\\*\\\\\\).\" } */\n+\n+int fputc (char, struct StdioFile*);   /* { dg-warning \"conflicting types for built-in function .fputc.; expected .int\\\\\\(int,  void \\\\\\*\\\\\\).\" } */\n+\n+size_t fputs (const char*, struct StdioFile*);   /* { dg-warning \"conflicting types for built-in function .fputs.; expected .int\\\\\\(const char \\\\\\*, \\[a-z_\\]+ \\\\\\*\\\\\\).\" } */\n+\n+int fscanf (struct StdioFile*, const char*, size_t, ...);   /* { dg-warning \"conflicting types for built-in function .fscanf.; expected .int\\\\\\(\\[a-z_\\]+ \\\\\\*, const char \\\\\\*, \\.\\.\\.\\\\\\).\" } */\n+\n+int vfscanf (struct StdioFile*, const char*, ...);   /* { dg-warning \"conflicting types for built-in function .vfscanf.; expected .int\\\\\\(\\[a-z_\\]+ \\\\\\*, const char \\\\\\*, \\[a-z_\\]+ \\\\\\*\\\\\\).\" } */\n+\n+size_t fwrite (const void*, size_t, size_t, struct StdioFile);    /* { dg-warning \"conflicting types for built-in function .fwrite.; expected .\\(long \\)?unsigned int\\\\\\(const void \\\\\\*, \\(long \\)?unsigned int, *\\(long \\)?unsigned int, *\\[a-z_\\]+ \\\\\\*\\\\\\).\" } */"}, {"sha": "d06af6528fbca5f1174f122dacc8d8dc53eb4a35", "filename": "gcc/testsuite/gcc.dg/Wbuiltin-declaration-mismatch-8.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-8.c?ref=d8b5a1a00d4f88aa82c9119095e2b4993444f6ee", "patch": "@@ -0,0 +1,26 @@\n+/* PR c/86125 - missing -Wbuiltin-declaration-mismatch on a mismatched\n+   return type\n+   Verify that declarations of file I/O built-ins with different\n+   definitions of struct FILE triggers -Wbuiltin-declaration-mismatch\n+   when -Wextra is specified.\n+   { dg-do compile }\n+   { dg-options \"-Wall -Wbuiltin-declaration-mismatch\" } */\n+\n+struct FooFile;\n+int fputc (int, struct FooFile*);\n+\n+typedef struct FooFile AlsoFooFile;\n+int fprintf (AlsoFooFile*, const char*, ...);\n+\n+typedef AlsoFooFile* FooFilePtr;\n+int fscanf (FooFilePtr, const char*, ...);\n+\n+/* No warning here (-Wextra not specified).  */\n+struct BarFile;\n+int vfprintf (struct BarFile*, const char*, __builtin_va_list);\n+\n+\n+/* Set -Wextra and verify -Wbuiltin-declaration-mismatch is issued.  */\n+#pragma GCC diagnostic warning \"-Wextra\"\n+\n+int fputs (const char*, struct BarFile*);   /* { dg-warning \"mismatch in argument 2 type of built-in function .fputs.; expected .struct FooFile \\\\\\*.\" } */"}, {"sha": "f0c1ce33267c17e1f6c10b9c4d85d9d48db7a937", "filename": "gcc/testsuite/gcc.dg/Wbuiltin-declaration-mismatch-9.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-9.c?ref=d8b5a1a00d4f88aa82c9119095e2b4993444f6ee", "patch": "@@ -0,0 +1,12 @@\n+/* PR c/88886 - ice in get_constant, at c-family/c-format.c:292\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+int sscanf (long, unsigned[], ...);   /* { dg-warning \"conflicting types for built-in function .sscanf.; expected .int\\\\\\(const char \\\\\\*, const char \\\\\\*, ...\\\\\\).\" } */\n+\n+void a (void)\n+{\n+  sscanf (0,\n+\t  \"\"        /* { dg-warning \"passing argument 2 of .sscanf. from incompatible pointer type\" } */\n+\t  );\n+}"}, {"sha": "bf590a7bcd7d0c963bd78558666c19d22ddcb57f", "filename": "gcc/testsuite/gcc.dg/Wint-conversion-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Ftestsuite%2Fgcc.dg%2FWint-conversion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Ftestsuite%2Fgcc.dg%2FWint-conversion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWint-conversion-2.c?ref=d8b5a1a00d4f88aa82c9119095e2b4993444f6ee", "patch": "@@ -1,8 +1,9 @@\n-/* PR middle-end/86202 */\n+/* PR middle-end/86202 - ICE in get_range_info calling an invalid memcpy()\n+   declaration */\n /* { dg-do compile } */\n /* { dg-options \"-Wint-conversion\" } */\n \n-void *memcpy (void *, void *, __SIZE_TYPE__ *);\n+void *memcpy (void *, void *, __SIZE_TYPE__ *);   /* { dg-warning \"conflicting types for built-in function .memcpy.\" } */\n void *a, *b;\n void f (void)\n {"}, {"sha": "26dfb3bfc1b126125698f19de7b01577385ab462", "filename": "gcc/testsuite/gcc.dg/builtins-69.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-69.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-69.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-69.c?ref=d8b5a1a00d4f88aa82c9119095e2b4993444f6ee", "patch": "@@ -0,0 +1,22 @@\n+/* PR middle-end/86308 - ICE in verify_gimple calling index() with\n+   an invalid declaration\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" }  */\n+\n+int index (int, int);   /* { dg-warning \"conflicting types for built-in function .index.; expected .char \\\\\\*\\\\\\(const char \\\\\\*, int\\\\\\).\" } */\n+\n+int test_index (void)\n+{\n+  return index (0, 0);\n+}\n+\n+\n+/* PR middle-end/86202 - ICE in get_range_info calling an invalid memcpy()\n+   declaration */\n+\n+void *memcpy (void *, void *, __SIZE_TYPE__ *);   /* { dg-warning \"conflicting types for built-in function .memcpy.; expected .void \\\\\\*\\\\\\(void \\\\\\*, const void \\\\\\*, \\(long \\)?unsigned int\\\\\\).\" } */\n+\n+void test_memcpy (void *p, void *q, __SIZE_TYPE__ *r)\n+{\n+  memcpy (p, q, r);\n+}"}]}