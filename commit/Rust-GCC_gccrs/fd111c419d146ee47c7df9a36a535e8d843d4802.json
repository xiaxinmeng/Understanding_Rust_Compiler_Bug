{"sha": "fd111c419d146ee47c7df9a36a535e8d843d4802", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQxMTFjNDE5ZDE0NmVlNDdjN2RmOWEzNmE1MzVlOGQ4NDNkNDgwMg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-09-16T13:22:06Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-09-16T23:04:16Z"}, "message": "analyzer: fix state explosions due to SCC bug\n\nDebugging the state explosion of the very large switch statement in\ngcc.dg/analyzer/pr96653.c showed that the worklist was failing to\norder the exploded nodes correctly; the in-edges at the join point\nafter the switch were not getting processed together, but were instead\nbeing rocessed in smaller batches, bloating the exploded graph until the\nper-point limit was reached.\n\nThe root cause turned out to be a bug in creating the strongly-connected\ncomponents for the supergraph: the code was considering interprocedural\nedges as well as intraprocedural edges, leading to unpredictable\nmisorderings of the SCC and worklist, leading to bloating of the\nexploded graph.\n\nThis patch fixes the SCC creation so it only considers intraprocedural\nedges within the supergraph.  It also tweaks worklist::key_t::cmp to\ngive higher precedence to call_string over differences within a\nsupernode, since enodes with different call_strings can't be merges.\nIn practise, none of my test cases were affected by this latter change,\nthough it seems to be the right thing to do.\n\nWith this patch, the very large switch statement in\ngcc.dg/analyzer/pr96653.c is handled in a single call to\nexploded_graph::maybe_process_run_of_before_supernode_enodes:\n   merged 358 in-enodes into 2 out-enode(s) at SN: 402\nand that testcase no longer hits the per-program-point limits.\n\ngcc/analyzer/ChangeLog:\n\t* engine.cc (strongly_connected_components::strong_connect): Only\n\tconsider intraprocedural edges when creating SCCs.\n\t(worklist::key_t::cmp): Add comment.  Treat call_string\n\tdifferences as more important than differences of program_point\n\twithin a supernode.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/96653\n\t* gcc.dg/analyzer/loop-0-up-to-n-by-1-with-iter-obj.c: Update\n\texpected number of exploded nodes.\n\t* gcc.dg/analyzer/malloc-vs-local-1a.c: Update expected number\n\tof exploded nodes.\n\t* gcc.dg/analyzer/pr96653.c: Remove -Wno-analyzer-too-complex.", "tree": {"sha": "b6429bd5ef52b9590f162bbcbb64fcc76b35a6e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6429bd5ef52b9590f162bbcbb64fcc76b35a6e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd111c419d146ee47c7df9a36a535e8d843d4802", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd111c419d146ee47c7df9a36a535e8d843d4802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd111c419d146ee47c7df9a36a535e8d843d4802", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd111c419d146ee47c7df9a36a535e8d843d4802/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2c4d5199cf277becc1f377536973815d1c9519c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2c4d5199cf277becc1f377536973815d1c9519c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2c4d5199cf277becc1f377536973815d1c9519c"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "d03e23a9b6e7d0907fae211f3e60260cd8d89bf2", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd111c419d146ee47c7df9a36a535e8d843d4802/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd111c419d146ee47c7df9a36a535e8d843d4802/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=fd111c419d146ee47c7df9a36a535e8d843d4802", "patch": "@@ -1615,6 +1615,9 @@ strongly_connected_components::strong_connect (unsigned index)\n   superedge *sedge;\n   FOR_EACH_VEC_ELT (v_snode->m_succs, i, sedge)\n     {\n+      if (sedge->get_kind () != SUPEREDGE_CFG_EDGE\n+\t  && sedge->get_kind () != SUPEREDGE_INTRAPROCEDURAL_CALL)\n+\tcontinue;\n       supernode *w_snode = sedge->m_dest;\n       per_node_data *w = &m_per_node[w_snode->m_index];\n       if (w->m_index == -1)\n@@ -1690,7 +1693,14 @@ worklist::add_node (exploded_node *enode)\n /* Comparator for implementing worklist::key_t comparison operators.\n    Return negative if KA is before KB\n    Return positive if KA is after KB\n-   Return 0 if they are equal.  */\n+   Return 0 if they are equal.\n+\n+   The ordering of the worklist is critical for performance and for\n+   avoiding node explosions.  Ideally we want all enodes at a CFG join-point\n+   with the same callstring to be sorted next to each other in the worklist\n+   so that a run of consecutive enodes can be merged and processed \"in bulk\"\n+   rather than individually or pairwise, minimizing the number of new enodes\n+   created.  */\n \n int\n worklist::key_t::cmp (const worklist::key_t &ka, const worklist::key_t &kb)\n@@ -1742,18 +1752,18 @@ worklist::key_t::cmp (const worklist::key_t &ka, const worklist::key_t &kb)\n \n   gcc_assert (snode_a == snode_b);\n \n+  /* The points might vary by callstring; try sorting by callstring.  */\n+  int cs_cmp = call_string::cmp (call_string_a, call_string_b);\n+  if (cs_cmp)\n+    return cs_cmp;\n+\n   /* Order within supernode via program point.  */\n   int within_snode_cmp\n     = function_point::cmp_within_supernode (point_a.get_function_point (),\n \t\t\t\t\t    point_b.get_function_point ());\n   if (within_snode_cmp)\n     return within_snode_cmp;\n \n-  /* The points might vary by callstring; try sorting by callstring.  */\n-  int cs_cmp = call_string::cmp (call_string_a, call_string_b);\n-  if (cs_cmp)\n-    return cs_cmp;\n-\n   /* Otherwise, we ought to have the same program_point.  */\n   gcc_assert (point_a == point_b);\n "}, {"sha": "2b0352711aef9f73a047b923406319734d1d539d", "filename": "gcc/testsuite/gcc.dg/analyzer/loop-0-up-to-n-by-1-with-iter-obj.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd111c419d146ee47c7df9a36a535e8d843d4802/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-0-up-to-n-by-1-with-iter-obj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd111c419d146ee47c7df9a36a535e8d843d4802/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-0-up-to-n-by-1-with-iter-obj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-0-up-to-n-by-1-with-iter-obj.c?ref=fd111c419d146ee47c7df9a36a535e8d843d4802", "patch": "@@ -69,5 +69,6 @@ void test(int n)\n \n   free (it);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n+  // TODO: why 2 enodes here, rather than 1\n }"}, {"sha": "bf77862e67c47c7c7d315deb60c075de986af610", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-vs-local-1a.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd111c419d146ee47c7df9a36a535e8d843d4802/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-vs-local-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd111c419d146ee47c7df9a36a535e8d843d4802/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-vs-local-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-vs-local-1a.c?ref=fd111c419d146ee47c7df9a36a535e8d843d4802", "patch": "@@ -48,10 +48,10 @@ int test_repeated_predicate_1 (int n)\n \n   result = do_stuff (ptr, n);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"5 processed enodes\" } */\n-  // FIXME: why 5 here?\n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"5 processed enodes\" } */\n-  // FIXME: why 5 here?\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n+\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n+\n \n   if (n > 10)\n     free (ptr); /* { dg-bogus \"not on the heap\" } */\n@@ -105,8 +105,8 @@ int test_explicit_flag (int n)\n \n   result = do_stuff (ptr, n);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"5 processed enodes\" } */\n-  // FIXME: why 5 here?\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n+\n \n   if (need_to_free)\n     free (ptr); /* { dg-bogus \"not on the heap\" } */\n@@ -131,8 +131,8 @@ int test_pointer_comparison (int n)\n \n   result = do_stuff (ptr, n);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"5 processed enodes\" } */\n-  // FIXME: why 5 here?\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n+\n \n   if (ptr != buf)\n     free (ptr); /* { dg-bogus \"not on the heap\" } */\n@@ -169,8 +169,8 @@ int test_initial_flag (int n)\n \n   result = do_stuff (ptr, n);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"6 processed enodes\" } */\n-  // FIXME: why 6 here?\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 processed enodes\" } */\n+  // FIXME: why 3 here?\n \n   if (n > 10)\n     free (ptr); /* { dg-bogus \"not on the heap\" } */"}, {"sha": "e5e387c44a51a2e4487355aa0e2b0f5027bdc48b", "filename": "gcc/testsuite/gcc.dg/analyzer/pr96653.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd111c419d146ee47c7df9a36a535e8d843d4802/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96653.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd111c419d146ee47c7df9a36a535e8d843d4802/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96653.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96653.c?ref=fd111c419d146ee47c7df9a36a535e8d843d4802", "patch": "@@ -1,8 +1,7 @@\n /* Examples of switch statements with many cases (with default values).\n    Adapted from Linux 5.9-rc1:drivers/media/v4l2-core/v4l2-ctrls.c.  */\n \n-/* { dg-additional-options \"-O1 -Wno-analyzer-too-complex\" } */\n-// TODO: remove need for -Wno-analyzer-too-complex\n+/* { dg-additional-options \"-O1\" } */\n \n typedef unsigned int u32;\n typedef long long s64;"}]}