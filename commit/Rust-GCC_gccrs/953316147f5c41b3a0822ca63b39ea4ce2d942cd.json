{"sha": "953316147f5c41b3a0822ca63b39ea4ce2d942cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUzMzE2MTQ3ZjVjNDFiM2EwODIyY2E2M2IzOWVhNGNlMmQ5NDJjZA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2008-07-19T17:49:18Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2008-07-19T17:49:18Z"}, "message": "tm.texi (MALLOC_ABI_ALIGNMENT): New macro.\n\n\t* doc/tm.texi (MALLOC_ABI_ALIGNMENT): New macro.  Alignment, in bits,\n\ta C conformant malloc implementation has to provide.\n\t* defaults.h (MALLOC_ABI_ALIGNMENT): Default to BITS_PER_WORD.\n\n\tada/\n\t* targtyps.c (get_target_default_allocator_alignment): Use it.\n\n\ttestsuite/\n\t* gcc.dg/mallign.c: New test.\n\t* gnat.dg/allocator_maxalign1.adb: New test.\n\t* gnat.dg/test_allocator_maxalign2.adb: Main caller for ...\n\t* gnat.dg/allocator_maxalign2.ad[bs]: New test.\n\nFrom-SVN: r137984", "tree": {"sha": "795260e8dc7f7962b579f40cd7ab751d17f86412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/795260e8dc7f7962b579f40cd7ab751d17f86412"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/953316147f5c41b3a0822ca63b39ea4ce2d942cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953316147f5c41b3a0822ca63b39ea4ce2d942cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/953316147f5c41b3a0822ca63b39ea4ce2d942cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953316147f5c41b3a0822ca63b39ea4ce2d942cd/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1a296c11ab091c896267dee5a3d831731fd3143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a296c11ab091c896267dee5a3d831731fd3143", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1a296c11ab091c896267dee5a3d831731fd3143"}], "stats": {"total": 145, "additions": 140, "deletions": 5}, "files": [{"sha": "392ba5876c9db4848b1803e936ace5924e726943", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=953316147f5c41b3a0822ca63b39ea4ce2d942cd", "patch": "@@ -1,3 +1,9 @@\n+2008-07-19  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* doc/tm.texi (MALLOC_ABI_ALIGNMENT): New macro. Alignment, in\n+\tbits, a C conformant malloc implementation has to provide.\n+\t* defaults.h (MALLOC_ABI_ALIGNMENT): Default to BITS_PER_WORD.\n+\n 2008-07-19  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR target/36780"}, {"sha": "f08dc9f72d719ced03af8190b682b354fa0ce595", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=953316147f5c41b3a0822ca63b39ea4ce2d942cd", "patch": "@@ -1,3 +1,8 @@\n+2008-07-19  Olivier Hainque  <hainque@adacore.com>\n+\t \n+\t* targtyps.c (get_target_default_allocator_alignment): Use\n+\tMALLOC_ABI_ALIGNMENT.\n+\n 2008-07-17  Olivier Hainque  <hainque@adacore.com>\n \n \t* adaint.c (__MINGW32__ section): Include ctype.h and define"}, {"sha": "c4e3299667dabe533c0bda7758ff471dfc3de1cf", "filename": "gcc/ada/targtyps.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Fada%2Ftargtyps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Fada%2Ftargtyps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargtyps.c?ref=953316147f5c41b3a0822ca63b39ea4ce2d942cd", "patch": "@@ -164,17 +164,13 @@ get_target_maximum_default_alignment (void)\n    Stricter alignment requests trigger gigi's aligning_type circuitry for\n    objects allocated by the default allocator.  */\n \n-#ifndef MALLOC_ALIGNMENT\n-#define MALLOC_ALIGNMENT BIGGEST_ALIGNMENT\n-#endif\n-\n Pos\n get_target_default_allocator_alignment (void)\n {\n   /* ??? Need a way to get info about __gnat_malloc from here (whether\n      it is handy and what alignment it honors).  */\n \n-  return MALLOC_ALIGNMENT / BITS_PER_UNIT;\n+  return MALLOC_ABI_ALIGNMENT / BITS_PER_UNIT;\n }\n \n /* Standard'Maximum_Allowed_Alignment.  Maximum alignment that we may"}, {"sha": "80294305850d1d19974af9f418daa32bf49508c0", "filename": "gcc/defaults.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=953316147f5c41b3a0822ca63b39ea4ce2d942cd", "patch": "@@ -551,6 +551,12 @@ along with GCC; see the file COPYING3.  If not see\n #define PUSH_ARGS_REVERSED 0\n #endif\n \n+/* Default value for the alignment (in bits) a C conformant malloc has to\n+   provide. This default is intended to be safe and always correct.  */\n+#ifndef MALLOC_ABI_ALIGNMENT\n+#define MALLOC_ABI_ALIGNMENT BITS_PER_WORD\n+#endif\n+\n /* If PREFERRED_STACK_BOUNDARY is not defined, set it to STACK_BOUNDARY.\n    STACK_BOUNDARY is required.  */\n #ifndef PREFERRED_STACK_BOUNDARY"}, {"sha": "e238797ed77f665e9b96f7ca2c60d2c90594efe3", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=953316147f5c41b3a0822ca63b39ea4ce2d942cd", "patch": "@@ -1095,6 +1095,11 @@ bits.  Note that this is not the biggest alignment that is supported,\n just the biggest alignment that, when violated, may cause a fault.\n @end defmac\n \n+@defmac MALLOC_ABI_ALIGNMENT\n+Alignment, in bits, a C conformant malloc implementation has to\n+provide.  If not defined, the default value is @code{BITS_PER_WORD}.\n+@end defmac\n+\n @defmac MINIMUM_ATOMIC_ALIGNMENT\n If defined, the smallest alignment, in bits, that can be given to an\n object that can be referenced in one operation, without disturbing any"}, {"sha": "a487a3e74c9509b2ad8affe1cf19c590e0b7a2af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=953316147f5c41b3a0822ca63b39ea4ce2d942cd", "patch": "@@ -1,3 +1,10 @@\n+2008-07-19  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc.dg/mallign.c: New test.\n+\t* gnat.dg/allocator_maxalign1.adb: New test.\n+\t* gnat.dg/test_allocator_maxalign2.adb: Main caller for ...\n+\t* gnat.dg/allocator_maxalign2.ad[bs]: New test.\n+\n 2008-07-19  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/intrinsic_argument_conformance_2.f90: New."}, {"sha": "4a64dbbcc3b3e35c75ed56c9f9df947ca77b64df", "filename": "gcc/testsuite/gcc.dg/mallign.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Ftestsuite%2Fgcc.dg%2Fmallign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Ftestsuite%2Fgcc.dg%2Fmallign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmallign.c?ref=953316147f5c41b3a0822ca63b39ea4ce2d942cd", "patch": "@@ -0,0 +1,15 @@\n+/* Check that malloc's alignment honors what we trust it\n+   minimally should.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-fno-builtin-malloc\" } */\n+\n+#include <stdlib.h>                                                            \n+typedef int word __attribute__((mode(word)));\n+\n+int main()\n+{\n+    if ((long)malloc (1) & (sizeof(word)-1))\n+\tabort ();\n+    return 0;\n+}                                                                              "}, {"sha": "062c39bbf8763a7f73e47bf9341ba9745729f6cc", "filename": "gcc/testsuite/gnat.dg/allocator_maxalign1.adb", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Ftestsuite%2Fgnat.dg%2Fallocator_maxalign1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Ftestsuite%2Fgnat.dg%2Fallocator_maxalign1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fallocator_maxalign1.adb?ref=953316147f5c41b3a0822ca63b39ea4ce2d942cd", "patch": "@@ -0,0 +1,42 @@\n+--  { dg-do run }\n+\n+with System.Storage_Elements; use System.Storage_Elements;\n+with Ada.Unchecked_Deallocation;\n+\n+procedure Allocator_Maxalign1 is\n+\n+   Max_Alignment : constant := Standard'Maximum_Alignment;\n+\n+   type Block is record\n+      X : Integer;\n+   end record;\n+   for Block'Alignment use Standard'Maximum_Alignment;\n+\n+   type Block_Access is access all Block;\n+   procedure Free is new Ada.Unchecked_Deallocation (Block, Block_Access);\n+\n+   N_Blocks : constant := 500;\n+   Blocks   : array (1 .. N_Blocks) of Block_Access;\n+begin\n+   if Block'Alignment /= Max_Alignment then\n+      raise Program_Error;\n+   end if;\n+\n+   for K in 1 .. 4 loop\n+\n+      for I in Blocks'Range loop\n+         Blocks (I) := new Block;\n+         if Blocks (I).all'Address mod Block'Alignment /= 0 then\n+            raise Program_Error;\n+         end if;\n+         Blocks(I).all.X := I;\n+      end loop;\n+\n+      for I in Blocks'Range loop\n+         Free (Blocks (I));\n+      end loop;\n+\n+   end loop;\n+\n+end;\n+"}, {"sha": "10644ea6b3c20f391183119d1e5d314405287b16", "filename": "gcc/testsuite/gnat.dg/allocator_maxalign2.adb", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Ftestsuite%2Fgnat.dg%2Fallocator_maxalign2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Ftestsuite%2Fgnat.dg%2Fallocator_maxalign2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fallocator_maxalign2.adb?ref=953316147f5c41b3a0822ca63b39ea4ce2d942cd", "patch": "@@ -0,0 +1,33 @@\n+with System, System.Storage_Elements;\n+use System.Storage_Elements;\n+\n+package body Allocator_Maxalign2 is\n+\n+   Max_Align : constant Storage_Offset := Standard'Maximum_Alignment;\n+\n+   procedure Validate is\n+      use type System.Address;\n+   begin\n+      if Addr mod Max_Align /= 0 then\n+         raise Program_Error;\n+      end if;\n+   end;\n+\n+   procedure Check is\n+      I : Integer;\n+      B : Block;\n+      type Block_Access is access all Block;\n+      A : Block_Access;\n+   begin\n+      Addr := I'Address;\n+      Addr := B'Address;\n+      Validate;\n+      for I in 1 .. 50 loop\n+         A := new Block;\n+         Addr := A.all'Address;\n+         Validate;\n+      end loop;\n+\n+   end;\n+\n+end;"}, {"sha": "43c01081cb64fcc543dcd089c6c9427519e3eec9", "filename": "gcc/testsuite/gnat.dg/allocator_maxalign2.ads", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Ftestsuite%2Fgnat.dg%2Fallocator_maxalign2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Ftestsuite%2Fgnat.dg%2Fallocator_maxalign2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fallocator_maxalign2.ads?ref=953316147f5c41b3a0822ca63b39ea4ce2d942cd", "patch": "@@ -0,0 +1,12 @@\n+with System;\n+\n+package Allocator_Maxalign2 is\n+   type Block is record\n+      X : Integer;\n+   end record;\n+   for Block'Alignment use Standard'Maximum_Alignment;\n+\n+   Addr : System.Address;\n+\n+   procedure Check;\n+end;"}, {"sha": "144914d2dc44b6fb551f5c5d0d09a1c0b9753dab", "filename": "gcc/testsuite/gnat.dg/test_allocator_maxalign2.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_allocator_maxalign2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953316147f5c41b3a0822ca63b39ea4ce2d942cd/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_allocator_maxalign2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_allocator_maxalign2.adb?ref=953316147f5c41b3a0822ca63b39ea4ce2d942cd", "patch": "@@ -0,0 +1,8 @@\n+--  { dg-do run }\n+\n+with Allocator_Maxalign2;\n+\n+procedure Test_Allocator_Maxalign2 is\n+begin\n+   Allocator_Maxalign2.Check;\n+end;"}]}