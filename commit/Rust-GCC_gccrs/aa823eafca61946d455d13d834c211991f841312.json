{"sha": "aa823eafca61946d455d13d834c211991f841312", "node_id": "C_kwDOANBUbNoAKGFhODIzZWFmY2E2MTk0NmQ0NTVkMTNkODM0YzIxMTk5MWY4NDEzMTI", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-05-19T04:05:19Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-05-31T13:51:44Z"}, "message": "Make key and key/value config options seperate\n\ngcc/rust/ChangeLog:\n\n\t* rust-session-manager.h:\n\tInclude \"rust-optional.h\".\n\t(struct TargetOptions):\n\tStore values in config key/value pairs as Optional<std::string> rather than std::string.\n\t* rust-session-manager.cc\n\t(TargetOptions::dump_target_options):\n\tHandle Optional<std::string> values.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/cfg6.rs: New test.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "a7a51b583447fd5f0890bc2b07ca1ba9fe1a30c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7a51b583447fd5f0890bc2b07ca1ba9fe1a30c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa823eafca61946d455d13d834c211991f841312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa823eafca61946d455d13d834c211991f841312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa823eafca61946d455d13d834c211991f841312", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa823eafca61946d455d13d834c211991f841312/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb1259001c2554bfc622bd31c9e07f05a7f2588b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb1259001c2554bfc622bd31c9e07f05a7f2588b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb1259001c2554bfc622bd31c9e07f05a7f2588b"}], "stats": {"total": 69, "additions": 51, "deletions": 18}, "files": [{"sha": "17f8465356b69eaab93d4a905ba0cee6abd4e4be", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa823eafca61946d455d13d834c211991f841312/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa823eafca61946d455d13d834c211991f841312/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=aa823eafca61946d455d13d834c211991f841312", "patch": "@@ -1090,10 +1090,12 @@ TargetOptions::dump_target_options () const\n   for (const auto &pairs : features)\n     {\n       for (const auto &value : pairs.second)\n-\tout << pairs.first + \": \\\"\" + value + \"\\\"\\n\";\n-\n-      if (pairs.second.empty ())\n-\tout << pairs.first + \"\\n\";\n+\t{\n+\t  if (value.is_some ())\n+\t    out << pairs.first + \": \\\"\" + value.get () + \"\\\"\\n\";\n+\t  else\n+\t    out << pairs.first + \"\\n\";\n+\t}\n     }\n \n   out.close ();"}, {"sha": "f201051e75e68a206321976370c1612d2848d38b", "filename": "gcc/rust/rust-session-manager.h", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa823eafca61946d455d13d834c211991f841312/gcc%2Frust%2Frust-session-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa823eafca61946d455d13d834c211991f841312/gcc%2Frust%2Frust-session-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.h?ref=aa823eafca61946d455d13d834c211991f841312", "patch": "@@ -30,6 +30,8 @@\n #include \"coretypes.h\"\n #include \"options.h\"\n \n+#include \"rust-optional.h\"\n+\n namespace Rust {\n // parser forward decl\n template <typename ManagedTokenSource> class Parser;\n@@ -49,13 +51,17 @@ struct TargetOptions\n {\n   /* TODO: maybe make private and access through helpers to allow changes to\n    * impl */\n-  std::unordered_map<std::string, std::unordered_set<std::string> > features;\n+  std::unordered_map<std::string, std::unordered_set<Optional<std::string>>>\n+    features;\n \n public:\n   // Returns whether a key is defined in the feature set.\n   bool has_key (std::string key) const\n   {\n-    return features.find (key) != features.end ();\n+    auto it = features.find (key);\n+    return it != features.end ()\n+\t   && it->second.find (Optional<std::string>::none ())\n+\t\t!= it->second.end ();\n   }\n \n   // Returns whether a key exists with the given value in the feature set.\n@@ -65,7 +71,7 @@ struct TargetOptions\n     if (it != features.end ())\n       {\n \tauto set = it->second;\n-\tauto it2 = set.find (value);\n+\tauto it2 = set.find (Optional<std::string>::some (value));\n \tif (it2 != set.end ())\n \t  return true;\n       }\n@@ -80,8 +86,8 @@ struct TargetOptions\n     if (it != features.end ())\n       {\n \tauto set = it->second;\n-\tif (set.size () == 1)\n-\t  return *set.begin ();\n+\tif (set.size () == 1 && set.begin ()->is_some ())\n+\t  return set.begin ()->get ();\n       }\n     return \"\";\n   }\n@@ -90,28 +96,49 @@ struct TargetOptions\n    * set if no key is found. */\n   std::unordered_set<std::string> get_values_for_key (std::string key) const\n   {\n+    std::unordered_set<std::string> ret;\n+\n     auto it = features.find (key);\n-    if (it != features.end ())\n-      return it->second;\n-    return {};\n+    if (it == features.end ())\n+      return {};\n+\n+    for (auto &val : it->second)\n+      if (val.is_some ())\n+\tret.insert (val.get ());\n+\n+    return ret;\n   }\n \n   /* Inserts a key (no value) into the feature set. This will do nothing if\n    * the key already exists. This returns whether the insertion was successful\n    * (i.e. whether key already existed). */\n   bool insert_key (std::string key)\n   {\n-    return features\n-      .insert (std::make_pair (key, std::unordered_set<std::string> ()))\n-      .second;\n+    auto it = features.find (key);\n+\n+    if (it == features.end ())\n+      it = features\n+\t     .insert (\n+\t       std::make_pair (std::move (key),\n+\t\t\t       std::unordered_set<Optional<std::string>> ()))\n+\t     .first;\n+\n+    return it->second.insert (Optional<std::string>::none ()).second;\n   }\n \n   // Inserts a key-value pair into the feature set.\n   void insert_key_value_pair (std::string key, std::string value)\n   {\n-    auto existing_set = get_values_for_key (key);\n-    existing_set.insert (std::move (value));\n-    features[std::move (key)] = std::move (existing_set);\n+    auto it = features.find (key);\n+\n+    if (it == features.end ())\n+      it = features\n+\t     .insert (\n+\t       std::make_pair (std::move (key),\n+\t\t\t       std::unordered_set<Optional<std::string>> ()))\n+\t     .first;\n+\n+    it->second.insert (Optional<std::string>::some (std::move (value)));\n   }\n \n   // Dump all target options to stderr."}, {"sha": "19a4990c8da18a6570d32e35cd25d7c92d1c850a", "filename": "gcc/testsuite/rust/compile/cfg6.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa823eafca61946d455d13d834c211991f841312/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa823eafca61946d455d13d834c211991f841312/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg6.rs?ref=aa823eafca61946d455d13d834c211991f841312", "patch": "@@ -0,0 +1,4 @@\n+// { dg-additional-options \"-frust-cfg=A=\\\"B\\\"\" }\n+#[cfg(A)]\n+pub fn foo() {}\n+pub fn foo() {}"}]}