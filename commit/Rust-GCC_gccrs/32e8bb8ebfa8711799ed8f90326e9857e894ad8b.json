{"sha": "32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJlOGJiOGViZmE4NzExNzk5ZWQ4ZjkwMzI2ZTk4NTdlODk0YWQ4Yg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2009-04-24T15:31:38Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-04-24T15:31:38Z"}, "message": "combine.c (record_value_for_reg): Change 0 to VOIDmode, twice.\n\ngcc/:\n\t* combine.c (record_value_for_reg): Change 0 to VOIDmode, twice.\n\t(record_dead_and_set_regs): Likewise.\n\t* df.h (struct df_mw_hardreg): Change flags field to int.\n\t(struct df_base_ref): Likewise.\n\t(struct df): Change changeable_flags field to int.\n\t* df-scan.c (df_defs_record): Change clobber_flags to int.\n\t* dwarf2.h (enum dwarf_tag): Make lo_user and hi_user values enum\n\tconstants rather than #define macros.\n\t(enum dwarf_attribute, enum dwarf_location_atom): Likewise.\n\t(enum dwarf_type, enum dwarf_endianity_encoding): Likewise.\n\t(enum dwarf_calling_convention): Likewise.\n\t(enum dwarf_line_number_x_ops): Likewise.\n\t(enum dwarf_call_frame_info): Likewise.\n\t(enum dwarf_source_language): Likewise.\n\t* dwarf2out.c (int_loc_descriptor): Add cast to enum type.\n\t(add_calling_convention_attribute): Likewise.\n\t* fold-const.c (fold_undefer_overflow_warnings): Add cast to enum\n\ttype.\n\t(combine_comparisons): Change compcode to int.  Add cast to enum\n\ttype.\n\t* genrecog.c (maybe_both_true_2): Change c to int.\n\t(write_switch): Likewise.  Add cast to enum type.\n\t* gimplify.c (gimplify_omp_for): Handle return values from\n\tgimplify_expr using MIN rather than bitwise or.\n\t(gimplify_expr): Add cast to enum type.\n\t* ipa-prop.c (update_jump_functions_after_inlining): Change\n\tIPA_BOTTOM to IPA_JF_UNKNOWN.\n\t* ira.c (setup_class_subset_and_memory_move_costs): Change mode to\n\tint.  Add casts to enum type.\n\t(setup_cover_and_important_classes): Change cl to int.  Add casts\n\tto enum type.\n\t(setup_class_translate): Change cl and mode to int.\n\t(ira_init_once): Change mode to int.\n\t(free_register_move_costs): Likewise.\n\t(setup_prohibited_mode_move_regs): Add casts to enum type.\n\t* langhooks.c (add_builtin_function_common): Rework assertion that\n\tvalue fits bitfield.\n\t* mcf.c (add_fixup_edge): Change type parameter to edge_type.\n\t* omega.c (omega_do_elimination): Avoid math on enum types.\n\t* optabs.c (expand_vec_shift_expr): Remove casts to int.\n\t* opts.c (set_debug_level): Change 2 to enum constant.  Use new\n\tint local to handle integral_argment value.\n\t* regmove.c (try_auto_increment): Change PUT_MODE to\n\tPUT_REG_NOTE_KIND.\n\t* reload.c (push_secondary_reload): Add casts to enum type.\n\t(secondary_reload_class, find_valid_class): Likewise.\n\t* reload1.c (emit_input_reload_insns): Likewise.\n\t* rtl.h (NOTE_VAR_LOCATION_STATUS): Likewise.\n\t* sel-sched.c (init_hard_regs_data): Change cur_mode to int.\n\t* sel-sched-ir.c (hash_with_unspec_callback): Change 0 to enum\n\tconstant.\n\t* tree.c (build_common_builtin_nodes): Add casts to enum type.\n\t* tree-complex.c (complex_lattice_t): Typedef to int rather than\n\tenum type.\n\t(expand_complex_libcall): Add casts to enum type.\n\t* tree-into-ssa.c (get_ssa_name_ann): Change 0 to enum constant.\n\t* tree-vect-loop.c (vect_model_reduction_cost): Compare reduc_code\n\twith ERROR_MARK, not NUM_TREE_CODES.\n\t(vect_create_epilog_for_reduction): Likewise.\n\t(vectorizable_reduction): Don't initialize epiloc_reduc_code.\n\tWhen not using it, set it to ERROR_MARK rather than\n\tNUM_TREE_CODES.\n\t* tree-vect-patterns.c (vect_pattern_recog_1): Change vec_mode to\n\tenum machine_mode.\n\t* tree-vect-stmts.c (new_stmt_vec_info): Change 0 to\n\tvect_unused_in_loop.  Change 0 to loop_vect.\n\t* tree-vectorizer.c (vect_set_verbosity_level): Add casts to enum\n\ttype.\n\t* var-tracking.c (get_init_value): Change return type to enum\n\tvar_init_status.\n\t* vec.h (DEF_VEC_FUNC_P) [iterate]: Cast 0 to type T.\n\t* config/arm/arm.c (fp_model_for_fpu): Change to array to enum\n\tarm_fp_model.\n\t(arm_override_options): Add casts to enum type.\n\t(arm_emit_tls_decoration): Likewise.\n\t* config/i386/i386.c (ix86_function_specific_restore): Add casts\n\tto enum type.\n\t* config/i386/i386-c.c (ix86_pragma_target_parse): Likewise.\n\t* config/ia64/ia64.c (ia64_expand_compare): Change magic to int.\n\t* config/rs6000/rs6000.c (rs6000_override_options): Add casts to\n\tenum type.\n\t* config/s390/s390.c (code_for_builtin_64): Change to array of\n\tenum insn_code.\n\t(code_for_builtin_31): Likewise.\n\t(s390_expand_builtin): Change code_for_builtin to enum insn_code\n\tconst *.\n\t* config/sparc/sparc.c (sparc_override_options): Change value\n\tfield in struct code_model to enum cmodel.  In initializer change\n\t0 to NULL and add cast to enum type.\n\n\t* c-typeck.c (build_modify_expr): Add lhs_origtype parameter.\n\tChange all callers.  Issue a -Wc++-compat warning using\n\tlhs_origtype if necessary.\n\t(convert_for_assignment): Issue -Wc++-compat warnings about\n\tinvalid conversions to enum type on assignment.\n\t* c-common.h (build_modify_expr): Update declaration.\n\ngcc/cp/:\n\t* call.c (build_temp): Change 0 to enum constant.\n\t* cp-tree.h (cp_lvalue_kind): Typedef to int rather than enum\n\ttype.\n\t* cp-gimplify.c (cp_gimplify_expr): Add cast to enum type.\n\t* decl2.c (constrain_visibility): Likewise.\n\t* parser.c (cp_lexer_get_preprocessor_token): Likewise.\n\t(cp_parser_flags): Typedef to int rather than enum type.\n\t(cp_parser_expression_stack_entry): Change prec field to enum\n\tcp_parser_prec.\n\n\t* typeck.c (build_modify_expr): Add lhs_origtype parameter.\n\tChange all callers.\n\ngcc/fortran/:\n\t* gfortran.h (enum gfc_symbol_type): New named enum type, broken\n\tout of struct gfc_symbol.\n\t(struct gfc_symbol): Use enum gfc_symbol_type.\n\t(enum gfc_array_ref_dimen_type): New named enum type, broken out\n\tof struct gfc_array_ref).\n\t(struct gfc_array_ref): Use enum gfc_array_ref_dimen_type.\n\t(mod_pointee_as): Update declaration.\n\t* decl.c (add_global_entry): Change type to enum gfc_symbol_type.\n\t(gfc_mod_pointee_as): Change return type to \"match\".\n\t* module.c (mio_array_ref): Add cast to enum type.\n\t(mio_symbol): Likewise.\n\t* resolve.c (resolve_global_procedure): Change type to enum\n\tgfc_symbol_type.\n\t* trans-io.c (gfc_build_st_parameter): Change type to unsigned\n\tint.\n\ngcc/java/:\n\t* jcf-parse.c (handle_constant): Add cast to enum type.\n\ngcc/objc/:\n\t* objc-act.c (get_super_receiver): Update calls to\n\tbuild_modify_expr to pass new argument.\n\ngcc/testsuite/:\n\t* gcc.dg/Wcxx-compat-4.c: New testcase.\n\nFrom-SVN: r146735", "tree": {"sha": "cb72f4fe59cfd12ca2739fb042e2be3d62f721b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb72f4fe59cfd12ca2739fb042e2be3d62f721b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/comments", "author": null, "committer": null, "parents": [{"sha": "ac4fc08a0a80b216618a84b9452b38d5a22e82de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac4fc08a0a80b216618a84b9452b38d5a22e82de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac4fc08a0a80b216618a84b9452b38d5a22e82de"}], "stats": {"total": 699, "additions": 493, "deletions": 206}, "files": [{"sha": "b0ed4ff7f14b8352cf1172775b50b207c7404e98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1,3 +1,102 @@\n+2009-04-24  Ian Lance Taylor  <iant@google.com>\n+\n+\t* combine.c (record_value_for_reg): Change 0 to VOIDmode, twice.\n+\t(record_dead_and_set_regs): Likewise.\n+\t* df.h (struct df_mw_hardreg): Change flags field to int.\n+\t(struct df_base_ref): Likewise.\n+\t(struct df): Change changeable_flags field to int.\n+\t* df-scan.c (df_defs_record): Change clobber_flags to int.\n+\t* dwarf2.h (enum dwarf_tag): Make lo_user and hi_user values enum\n+\tconstants rather than #define macros.\n+\t(enum dwarf_attribute, enum dwarf_location_atom): Likewise.\n+\t(enum dwarf_type, enum dwarf_endianity_encoding): Likewise.\n+\t(enum dwarf_calling_convention): Likewise.\n+\t(enum dwarf_line_number_x_ops): Likewise.\n+\t(enum dwarf_call_frame_info): Likewise.\n+\t(enum dwarf_source_language): Likewise.\n+\t* dwarf2out.c (int_loc_descriptor): Add cast to enum type.\n+\t(add_calling_convention_attribute): Likewise.\n+\t* fold-const.c (fold_undefer_overflow_warnings): Add cast to enum\n+\ttype.\n+\t(combine_comparisons): Change compcode to int.  Add cast to enum\n+\ttype.\n+\t* genrecog.c (maybe_both_true_2): Change c to int.\n+\t(write_switch): Likewise.  Add cast to enum type.\n+\t* gimplify.c (gimplify_omp_for): Handle return values from\n+\tgimplify_expr using MIN rather than bitwise or.\n+\t(gimplify_expr): Add cast to enum type.\n+\t* ipa-prop.c (update_jump_functions_after_inlining): Change\n+\tIPA_BOTTOM to IPA_JF_UNKNOWN.\n+\t* ira.c (setup_class_subset_and_memory_move_costs): Change mode to\n+\tint.  Add casts to enum type.\n+\t(setup_cover_and_important_classes): Change cl to int.  Add casts\n+\tto enum type.\n+\t(setup_class_translate): Change cl and mode to int.\n+\t(ira_init_once): Change mode to int.\n+\t(free_register_move_costs): Likewise.\n+\t(setup_prohibited_mode_move_regs): Add casts to enum type.\n+\t* langhooks.c (add_builtin_function_common): Rework assertion that\n+\tvalue fits bitfield.\n+\t* mcf.c (add_fixup_edge): Change type parameter to edge_type.\n+\t* omega.c (omega_do_elimination): Avoid math on enum types.\n+\t* optabs.c (expand_vec_shift_expr): Remove casts to int.\n+\t* opts.c (set_debug_level): Change 2 to enum constant.  Use new\n+\tint local to handle integral_argment value.\n+\t* regmove.c (try_auto_increment): Change PUT_MODE to\n+\tPUT_REG_NOTE_KIND.\n+\t* reload.c (push_secondary_reload): Add casts to enum type.\n+\t(secondary_reload_class, find_valid_class): Likewise.\n+\t* reload1.c (emit_input_reload_insns): Likewise.\n+\t* rtl.h (NOTE_VAR_LOCATION_STATUS): Likewise.\n+\t* sel-sched.c (init_hard_regs_data): Change cur_mode to int.\n+\t* sel-sched-ir.c (hash_with_unspec_callback): Change 0 to enum\n+\tconstant.\n+\t* tree.c (build_common_builtin_nodes): Add casts to enum type.\n+\t* tree-complex.c (complex_lattice_t): Typedef to int rather than\n+\tenum type.\n+\t(expand_complex_libcall): Add casts to enum type.\n+\t* tree-into-ssa.c (get_ssa_name_ann): Change 0 to enum constant.\n+\t* tree-vect-loop.c (vect_model_reduction_cost): Compare reduc_code\n+\twith ERROR_MARK, not NUM_TREE_CODES.\n+\t(vect_create_epilog_for_reduction): Likewise.\n+\t(vectorizable_reduction): Don't initialize epiloc_reduc_code.\n+\tWhen not using it, set it to ERROR_MARK rather than\n+\tNUM_TREE_CODES.\n+\t* tree-vect-patterns.c (vect_pattern_recog_1): Change vec_mode to\n+\tenum machine_mode.\n+\t* tree-vect-stmts.c (new_stmt_vec_info): Change 0 to\n+\tvect_unused_in_loop.  Change 0 to loop_vect.\n+\t* tree-vectorizer.c (vect_set_verbosity_level): Add casts to enum\n+\ttype.\n+\t* var-tracking.c (get_init_value): Change return type to enum\n+\tvar_init_status.\n+\t* vec.h (DEF_VEC_FUNC_P) [iterate]: Cast 0 to type T.\n+\t* config/arm/arm.c (fp_model_for_fpu): Change to array to enum\n+\tarm_fp_model.\n+\t(arm_override_options): Add casts to enum type.\n+\t(arm_emit_tls_decoration): Likewise.\n+\t* config/i386/i386.c (ix86_function_specific_restore): Add casts\n+\tto enum type.\n+\t* config/i386/i386-c.c (ix86_pragma_target_parse): Likewise.\n+\t* config/ia64/ia64.c (ia64_expand_compare): Change magic to int.\n+\t* config/rs6000/rs6000.c (rs6000_override_options): Add casts to\n+\tenum type.\n+\t* config/s390/s390.c (code_for_builtin_64): Change to array of\n+\tenum insn_code.\n+\t(code_for_builtin_31): Likewise.\n+\t(s390_expand_builtin): Change code_for_builtin to enum insn_code\n+\tconst *.\n+\t* config/sparc/sparc.c (sparc_override_options): Change value\n+\tfield in struct code_model to enum cmodel.  In initializer change\n+\t0 to NULL and add cast to enum type.\n+\n+\t* c-typeck.c (build_modify_expr): Add lhs_origtype parameter.\n+\tChange all callers.  Issue a -Wc++-compat warning using\n+\tlhs_origtype if necessary.\n+\t(convert_for_assignment): Issue -Wc++-compat warnings about\n+\tinvalid conversions to enum type on assignment.\n+\t* c-common.h (build_modify_expr): Update declaration.\n+\n 2009-04-24  Nick Clifton  <nickc@redhat.com>\n \n \t* config/iq2000/iq2000.c (function_arg): Handle TImode values."}, {"sha": "1e313cf9e8e1d8ec170068ce2bd69be365a09ca4", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -413,7 +413,8 @@ extern tree add_stmt (tree);\n extern void push_cleanup (tree, tree, bool);\n extern tree pushdecl_top_level (tree);\n extern tree pushdecl (tree);\n-extern tree build_modify_expr (location_t, tree, enum tree_code, tree, tree);\n+extern tree build_modify_expr (location_t, tree, tree, enum tree_code,\n+\t\t\t       tree, tree);\n extern tree build_indirect_ref (location_t, tree, const char *);\n \n extern int c_expand_decl (tree);"}, {"sha": "d31fb07e002cdd18ff26694df729f54dcbd6ccf2", "filename": "gcc/c-omp.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-omp.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -142,7 +142,7 @@ c_finish_omp_atomic (enum tree_code code, tree lhs, tree rhs)\n   /* There are lots of warnings, errors, and conversions that need to happen\n      in the course of interpreting a statement.  Use the normal mechanisms\n      to do this, and then take it apart again.  */\n-  x = build_modify_expr (input_location, lhs, code, rhs, NULL_TREE);\n+  x = build_modify_expr (input_location, lhs, NULL_TREE, code, rhs, NULL_TREE);\n   if (x == error_mark_node)\n     return error_mark_node;\n   gcc_assert (TREE_CODE (x) == MODIFY_EXPR);  \n@@ -260,7 +260,8 @@ c_finish_omp_for (location_t locus, tree declv, tree initv, tree condv,\n \t      fail = true;\n \t    }\n \n-\t  init = build_modify_expr (elocus, decl, NOP_EXPR, init, NULL_TREE);\n+\t  init = build_modify_expr (elocus, decl, NULL_TREE, NOP_EXPR, init,\n+\t\t\t\t    NULL_TREE);\n \t}\n       gcc_assert (TREE_CODE (init) == MODIFY_EXPR);\n       gcc_assert (TREE_OPERAND (init, 0) == decl);"}, {"sha": "7fe7fae1cda89f44df78faca5b2dacdba70fa020", "filename": "gcc/c-parser.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -4443,8 +4443,8 @@ c_parser_expr_no_commas (c_parser *parser, struct c_expr *after)\n   c_parser_consume_token (parser);\n   rhs = c_parser_expr_no_commas (parser, NULL);\n   rhs = default_function_array_conversion (rhs);\n-  ret.value = build_modify_expr (op_location, lhs.value, code, rhs.value,\n-\t\t\t\t rhs.original_type);\n+  ret.value = build_modify_expr (op_location, lhs.value, lhs.original_type,\n+\t\t\t\t code, rhs.value, rhs.original_type);\n   if (code == NOP_EXPR)\n     ret.original_code = MODIFY_EXPR;\n   else\n@@ -7823,18 +7823,20 @@ c_parser_omp_for_loop (c_parser *parser, tree clauses, tree *par_clauses)\n       else if (c_parser_next_token_is (parser, CPP_NAME)\n \t       && c_parser_peek_2nd_token (parser)->type == CPP_EQ)\n \t{\n+\t  struct c_expr decl_exp;\n \t  struct c_expr init_exp;\n \t  location_t init_loc;\n \n-\t  decl = c_parser_postfix_expression (parser).value;\n+\t  decl_exp = c_parser_postfix_expression (parser);\n+\t  decl = decl_exp.value;\n \n \t  c_parser_require (parser, CPP_EQ, \"expected %<=%>\");\n \t  init_loc = c_parser_peek_token (parser)->location;\n \n \t  init_exp = c_parser_expr_no_commas (parser, NULL);\n \t  init_exp = default_function_array_conversion (init_exp);\n-\t  init = build_modify_expr (init_loc,\n-\t\t\t\t    decl, NOP_EXPR, init_exp.value,\n+\t  init = build_modify_expr (init_loc, decl, decl_exp.original_type,\n+\t\t\t\t    NOP_EXPR, init_exp.value,\n \t\t\t\t    init_exp.original_type);\n \t  init = c_process_expr_stmt (init);\n "}, {"sha": "c7ea3284ac03d2a80138e79ccbb02747a0aca4d6", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -4292,6 +4292,8 @@ c_cast_expr (struct c_type_name *type_name, tree expr)\n }\n \f\n /* Build an assignment expression of lvalue LHS from value RHS.\n+   If LHS_ORIGTYPE is not NULL, it is the original type of LHS, which\n+   may differ from TREE_TYPE (LHS) for an enum bitfield.\n    MODIFYCODE is the code for a binary operator that we use\n    to combine the old value of LHS with RHS to get the new value.\n    Or else MODIFYCODE is NOP_EXPR meaning do a simple assignment.\n@@ -4301,9 +4303,8 @@ c_cast_expr (struct c_type_name *type_name, tree expr)\n    LOCATION is the location of the MODIFYCODE operator.  */\n \n tree\n-build_modify_expr (location_t location,\n-\t\t   tree lhs, enum tree_code modifycode, tree rhs,\n-\t\t   tree rhs_origtype)\n+build_modify_expr (location_t location, tree lhs, tree lhs_origtype,\n+\t\t   enum tree_code modifycode, tree rhs, tree rhs_origtype)\n {\n   tree result;\n   tree newrhs;\n@@ -4333,7 +4334,8 @@ build_modify_expr (location_t location,\n   if (TREE_CODE (lhs) == C_MAYBE_CONST_EXPR)\n     {\n       tree inner = build_modify_expr (location, C_MAYBE_CONST_EXPR_EXPR (lhs),\n-\t\t\t\t      modifycode, rhs, rhs_origtype);\n+\t\t\t\t      lhs_origtype, modifycode, rhs,\n+\t\t\t\t      rhs_origtype);\n       if (inner == error_mark_node)\n \treturn error_mark_node;\n       result = build2 (C_MAYBE_CONST_EXPR, TREE_TYPE (inner),\n@@ -4393,6 +4395,23 @@ build_modify_expr (location_t location,\n       TREE_TYPE (lhs) = lhstype;\n     }\n \n+  /* Issue -Wc++-compat warnings about an assignment to an enum type\n+     when LHS does not have its original type.  This happens for,\n+     e.g., an enum bitfield in a struct.  */\n+  if (warn_cxx_compat\n+      && lhs_origtype != NULL_TREE\n+      && lhs_origtype != lhstype\n+      && TREE_CODE (lhs_origtype) == ENUMERAL_TYPE)\n+    {\n+      tree checktype = (rhs_origtype != NULL_TREE\n+\t\t\t? rhs_origtype\n+\t\t\t: TREE_TYPE (rhs));\n+      if (checktype != error_mark_node\n+\t  && TYPE_MAIN_VARIANT (checktype) != TYPE_MAIN_VARIANT (lhs_origtype))\n+\twarning_at (location, OPT_Wc___compat,\n+\t\t    \"enum conversion in assignment is invalid in C++\");\n+    }\n+\n   /* Convert new value to destination type.  Fold it first, then\n      restore any excess precision information, for the sake of\n      conversion warnings.  */\n@@ -4553,9 +4572,9 @@ convert_for_assignment (tree type, tree rhs, tree origtype,\n \t  && TYPE_MAIN_VARIANT (checktype) != TYPE_MAIN_VARIANT (type))\n \t{\n \t  /* FIXME: Until the gcc source code is converted, we only\n-\t     warn about parameter passing.  We will add the other\n-\t     cases when bootstrap succeeds with them.  */\n-\t  if (errtype == ic_argpass)\n+\t     warn about assignment and parameter passing.  We will add\n+\t     the other cases when bootstrap succeeds with them.  */\n+\t  if (errtype == ic_argpass || errtype == ic_assign)\n \t    {\n \t      WARN_FOR_ASSIGNMENT (input_location, OPT_Wc___compat,\n \t\t\t\t   G_(\"enum conversion when passing argument \""}, {"sha": "11046b5189ef6063b4455bb4cf2dfce80803efda", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -11389,11 +11389,11 @@ record_value_for_reg (rtx reg, rtx insn, rtx value)\n \trsp->last_set = insn;\n \n       rsp->last_set_value = 0;\n-      rsp->last_set_mode = 0;\n+      rsp->last_set_mode = VOIDmode;\n       rsp->last_set_nonzero_bits = 0;\n       rsp->last_set_sign_bit_copies = 0;\n       rsp->last_death = 0;\n-      rsp->truncated_to_mode = 0;\n+      rsp->truncated_to_mode = VOIDmode;\n     }\n \n   /* Mark registers that are being referenced in this value.  */\n@@ -11540,11 +11540,11 @@ record_dead_and_set_regs (rtx insn)\n \t    rsp->last_set_invalid = 1;\n \t    rsp->last_set = insn;\n \t    rsp->last_set_value = 0;\n-\t    rsp->last_set_mode = 0;\n+\t    rsp->last_set_mode = VOIDmode;\n \t    rsp->last_set_nonzero_bits = 0;\n \t    rsp->last_set_sign_bit_copies = 0;\n \t    rsp->last_death = 0;\n-\t    rsp->truncated_to_mode = 0;\n+\t    rsp->truncated_to_mode = VOIDmode;\n \t  }\n \n       last_call_luid = mem_last_set = DF_INSN_LUID (insn);"}, {"sha": "13f209a3a871e71f8263a9d1a84c2c4053e08710", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -729,7 +729,7 @@ static const struct fpu_desc all_fpus[] =\n /* Floating point models used by the different hardware.\n    See fputype in arm.h.  */\n \n-static const enum fputype fp_model_for_fpu[] =\n+static const enum arm_fp_model fp_model_for_fpu[] =\n {\n   /* No FP hardware.  */\n   ARM_FP_MODEL_UNKNOWN,\t\t/* FPUTYPE_NONE  */\n@@ -1199,13 +1199,13 @@ arm_override_options (void)\n       const struct processors * sel;\n       unsigned int        sought;\n \n-      selected_cpu = TARGET_CPU_DEFAULT;\n+      selected_cpu = (enum processor_type) TARGET_CPU_DEFAULT;\n       if (selected_cpu == arm_none)\n \t{\n #ifdef SUBTARGET_CPU_DEFAULT\n \t  /* Use the subtarget default CPU if none was specified by\n \t     configure.  */\n-\t  selected_cpu = SUBTARGET_CPU_DEFAULT;\n+\t  selected_cpu = (enum processor_type) SUBTARGET_CPU_DEFAULT;\n #endif\n \t  /* Default to ARM6.  */\n \t  if (selected_cpu == arm_none)\n@@ -19398,7 +19398,7 @@ arm_emit_tls_decoration (FILE *fp, rtx x)\n   rtx val;\n \n   val = XVECEXP (x, 0, 0);\n-  reloc = INTVAL (XVECEXP (x, 0, 1));\n+  reloc = (enum tls_reloc) INTVAL (XVECEXP (x, 0, 1));\n \n   output_addr_const (fp, val);\n "}, {"sha": "e11ddc2819fa353938bc206443f975eb9e3e49e1", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -280,10 +280,10 @@ ix86_pragma_target_parse (tree args, tree pop_target)\n   prev_isa  = prev_opt->ix86_isa_flags;\n   cur_isa   = cur_opt->ix86_isa_flags;\n   diff_isa  = (prev_isa ^ cur_isa);\n-  prev_arch = prev_opt->arch;\n-  prev_tune = prev_opt->tune;\n-  cur_arch  = cur_opt->arch;\n-  cur_tune  = cur_opt->tune;\n+  prev_arch = (enum processor_type) prev_opt->arch;\n+  prev_tune = (enum processor_type) prev_opt->tune;\n+  cur_arch  = (enum processor_type) cur_opt->arch;\n+  cur_tune  = (enum processor_type) cur_opt->tune;\n \n   /* If the same processor is used for both previous and current options, don't\n      change the macros.  */"}, {"sha": "ab851dc00c94e0573097daec006bf266e3ea4202", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -3415,10 +3415,10 @@ ix86_function_specific_restore (struct cl_target_option *ptr)\n   unsigned int ix86_arch_mask, ix86_tune_mask;\n   int i;\n \n-  ix86_arch = ptr->arch;\n-  ix86_schedule = ptr->schedule;\n-  ix86_tune = ptr->tune;\n-  ix86_fpmath = ptr->fpmath;\n+  ix86_arch = (enum processor_type) ptr->arch;\n+  ix86_schedule = (enum attr_cpu) ptr->schedule;\n+  ix86_tune = (enum processor_type) ptr->tune;\n+  ix86_fpmath = (enum fpmath_unit) ptr->fpmath;\n   ix86_branch_cost = ptr->branch_cost;\n   ix86_tune_defaulted = ptr->tune_defaulted;\n   ix86_arch_specified = ptr->arch_specified;"}, {"sha": "54bf0d5078db79585c65f2417ed8ff7b0ba463e7", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1521,7 +1521,8 @@ ia64_expand_compare (enum rtx_code code, enum machine_mode mode)\n \tQCMP_EQ = 4,\n \tQCMP_LT = 8,\n \tQCMP_GT = 16\n-      } magic;\n+      };\n+      int magic;\n       enum rtx_code ncode;\n       rtx ret, insns;\n       "}, {"sha": "91b44affe420c28f6587a9270960a8e4dea963fa", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1771,7 +1771,8 @@ rs6000_override_options (const char *default_cpu)\n       else if (! strcmp (rs6000_sched_costly_dep_str, \"store_to_load\"))\n \trs6000_sched_costly_dep = store_to_load_dep_costly;\n       else\n-\trs6000_sched_costly_dep = atoi (rs6000_sched_costly_dep_str);\n+\trs6000_sched_costly_dep = ((enum rs6000_dependence_cost)\n+\t\t\t\t   atoi (rs6000_sched_costly_dep_str));\n     }\n \n   /* Handle -minsert-sched-nops option.  */\n@@ -1787,7 +1788,8 @@ rs6000_override_options (const char *default_cpu)\n       else if (! strcmp (rs6000_sched_insert_nops_str, \"regroup_exact\"))\n \trs6000_sched_insert_nops = sched_finish_regroup_exact;\n       else\n-\trs6000_sched_insert_nops = atoi (rs6000_sched_insert_nops_str);\n+\trs6000_sched_insert_nops = ((enum rs6000_nop_insertion)\n+\t\t\t\t    atoi (rs6000_sched_insert_nops_str));\n     }\n \n #ifdef TARGET_REGNAMES"}, {"sha": "10fdb4e267cb262eb1dfcc75aae19902ecb39f90", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -8660,12 +8660,12 @@ enum s390_builtin\n   S390_BUILTIN_max\n };\n \n-static unsigned int const code_for_builtin_64[S390_BUILTIN_max] = {\n+static enum insn_code const code_for_builtin_64[S390_BUILTIN_max] = {\n   CODE_FOR_get_tp_64,\n   CODE_FOR_set_tp_64\n };\n \n-static unsigned int const code_for_builtin_31[S390_BUILTIN_max] = {\n+static enum insn_code const code_for_builtin_31[S390_BUILTIN_max] = {\n   CODE_FOR_get_tp_31,\n   CODE_FOR_set_tp_31\n };\n@@ -8699,7 +8699,7 @@ s390_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n {\n #define MAX_ARGS 2\n \n-  unsigned int const *code_for_builtin =\n+  enum insn_code const *code_for_builtin =\n     TARGET_64BIT ? code_for_builtin_64 : code_for_builtin_31;\n \n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);"}, {"sha": "c3b5a6912fd86e55c3a99b4e9e92f8964cdc1ace", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -623,14 +623,14 @@ sparc_override_options (void)\n {\n   static struct code_model {\n     const char *const name;\n-    const int value;\n+    const enum cmodel value;\n   } const cmodels[] = {\n     { \"32\", CM_32 },\n     { \"medlow\", CM_MEDLOW },\n     { \"medmid\", CM_MEDMID },\n     { \"medany\", CM_MEDANY },\n     { \"embmedany\", CM_EMBMEDANY },\n-    { 0, 0 }\n+    { NULL, (enum cmodel) 0 }\n   };\n   const struct code_model *cmodel;\n   /* Map TARGET_CPU_DEFAULT to value for -m{arch,tune}=.  */"}, {"sha": "e15834dd94506d9cb963fa77a2d6e00c9db4b753", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1,3 +1,18 @@\n+2009-04-24  Ian Lance Taylor  <iant@google.com>\n+\n+\t* call.c (build_temp): Change 0 to enum constant.\n+\t* cp-tree.h (cp_lvalue_kind): Typedef to int rather than enum\n+\ttype.\n+\t* cp-gimplify.c (cp_gimplify_expr): Add cast to enum type.\n+\t* decl2.c (constrain_visibility): Likewise.\n+\t* parser.c (cp_lexer_get_preprocessor_token): Likewise.\n+\t(cp_parser_flags): Typedef to int rather than enum type.\n+\t(cp_parser_expression_stack_entry): Change prec field to enum\n+\tcp_parser_prec.\n+\n+\t* typeck.c (build_modify_expr): Add lhs_origtype parameter.\n+\tChange all callers.\n+\n 2009-04-22  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/39639"}, {"sha": "ca45bee5bd88cfbc81bf5bbad6f1e13caa4909e6", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -4484,7 +4484,7 @@ build_temp (tree expr, tree type, int flags,\n   else if (errorcount > savee)\n     *diagnostic_kind = DK_ERROR;\n   else\n-    *diagnostic_kind = 0;\n+    *diagnostic_kind = DK_UNSPECIFIED;\n   return expr;\n }\n "}, {"sha": "466415752ea4a9d015453f4f63304720ff5907f7", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -653,7 +653,7 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n       break;\n \n     default:\n-      ret = c_gimplify_expr (expr_p, pre_p, post_p);\n+      ret = (enum gimplify_status) c_gimplify_expr (expr_p, pre_p, post_p);\n       break;\n     }\n "}, {"sha": "1f3d0c16d23ae54b71bd45d07a62d2e130ec4442", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -3466,13 +3466,17 @@ enum tag_types {\n };\n \n /* The various kinds of lvalues we distinguish.  */\n-typedef enum cp_lvalue_kind {\n+enum cp_lvalue_kind {\n   clk_none = 0,     /* Things that are not an lvalue.  */\n   clk_ordinary = 1, /* An ordinary lvalue.  */\n   clk_class = 2,    /* An rvalue of class-type.  */\n   clk_bitfield = 4, /* An lvalue for a bit-field.  */\n   clk_packed = 8    /* An lvalue for a packed field.  */\n-} cp_lvalue_kind;\n+};\n+\n+/* This type is used for parameters and variables which hold\n+   combinations of the flags in enum cp_lvalue_kind.  */\n+typedef int cp_lvalue_kind;\n \n /* Various kinds of template specialization, instantiation, etc.  */\n typedef enum tmpl_spec_kind {"}, {"sha": "8196b54f4dd64c4ac87370076d226d5d33c5aea7", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1848,7 +1848,7 @@ constrain_visibility (tree decl, int visibility)\n   else if (visibility > DECL_VISIBILITY (decl)\n \t   && !DECL_VISIBILITY_SPECIFIED (decl))\n     {\n-      DECL_VISIBILITY (decl) = visibility;\n+      DECL_VISIBILITY (decl) = (enum symbol_visibility) visibility;\n       return true;\n     }\n   return false;"}, {"sha": "98292753a3b6a59306717e01d199eb4a6ab8af43", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -465,7 +465,8 @@ cp_lexer_get_preprocessor_token (cp_lexer *lexer, cp_token *token)\n   else if (token->type == CPP_PRAGMA)\n     {\n       /* We smuggled the cpp_token->u.pragma value in an INTEGER_CST.  */\n-      token->pragma_kind = TREE_INT_CST_LOW (token->u.value);\n+      token->pragma_kind = ((enum pragma_kind)\n+\t\t\t    TREE_INT_CST_LOW (token->u.value));\n       token->u.value = NULL_TREE;\n     }\n }\n@@ -1187,7 +1188,7 @@ function_declarator_p (const cp_declarator *declarator)\n /* Flags that are passed to some parsing functions.  These values can\n    be bitwise-ored together.  */\n \n-typedef enum cp_parser_flags\n+enum cp_parser_flags\n {\n   /* No flags.  */\n   CP_PARSER_FLAGS_NONE = 0x0,\n@@ -1196,7 +1197,11 @@ typedef enum cp_parser_flags\n   CP_PARSER_FLAGS_OPTIONAL = 0x1,\n   /* When parsing a type-specifier, do not allow user-defined types.  */\n   CP_PARSER_FLAGS_NO_USER_DEFINED_TYPES = 0x2\n-} cp_parser_flags;\n+};\n+\n+/* This type is used for parameters and variables which hold\n+   combinations of the flags in enum cp_parser_flags.  */\n+typedef int cp_parser_flags;\n \n /* The different kinds of declarators we want to parse.  */\n \n@@ -1268,7 +1273,7 @@ typedef struct cp_parser_expression_stack_entry\n   /* Tree code for the binary operation we are parsing.  */\n   enum tree_code tree_type;\n   /* Precedence of the binary operation we are parsing.  */\n-  int prec;\n+  enum cp_parser_prec prec;\n } cp_parser_expression_stack_entry;\n \n /* The stack for storing partial expressions.  We only need NUM_PREC_VALUES"}, {"sha": "50e036d40eef90d126e6411f116c969f1950771e", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -4128,7 +4128,8 @@ handle_omp_for_class_iterator (int i, location_t locus, tree declv, tree initv,\n   cond = cp_build_binary_op (elocus,\n \t\t\t     TREE_CODE (cond), decl, diff,\n \t\t\t     tf_warning_or_error);\n-  incr = build_modify_expr (elocus, decl, PLUS_EXPR, incr, NULL_TREE);\n+  incr = build_modify_expr (elocus, decl, NULL_TREE, PLUS_EXPR,\n+\t\t\t    incr, NULL_TREE);\n \n   orig_body = *body;\n   *body = push_stmt_list ();"}, {"sha": "69d5529476d1d60de973e41b085925c1b455320c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -5870,7 +5870,8 @@ cp_build_c_cast (tree type, tree expr, tsubst_flags_t complain)\n /* For use from the C common bits.  */\n tree\n build_modify_expr (location_t location ATTRIBUTE_UNUSED,\n-\t\t   tree lhs, enum tree_code modifycode, tree rhs,\n+\t\t   tree lhs, tree lhs_origtype ATTRIBUTE_UNUSED,\n+\t\t   enum tree_code modifycode, tree rhs,\n \t\t   tree rhs_origtype ATTRIBUTE_UNUSED)\n {\n   return cp_build_modify_expr (lhs, modifycode, rhs, tf_warning_or_error);"}, {"sha": "181994d646505ff92f3b1b9c0538ab2889d35bd3", "filename": "gcc/df-scan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -2978,7 +2978,7 @@ df_defs_record (struct df_collection_rec *collection_rec,\n   if (code == SET || code == CLOBBER)\n     {\n       /* Mark the single def within the pattern.  */\n-      enum df_ref_flags clobber_flags = flags;\n+      int clobber_flags = flags;\n       clobber_flags |= (code == CLOBBER) ? DF_REF_MUST_CLOBBER : 0;\n       df_def_record_1 (collection_rec, x, bb, insn_info, clobber_flags);\n     }"}, {"sha": "10b5e78d2867ff53dd2c4ab578cd65cfb87e5fc1", "filename": "gcc/df.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -342,8 +342,7 @@ struct df_mw_hardreg\n      accesses to 16-bit fields will usually be quicker.  */\n   ENUM_BITFIELD(df_ref_type) type : 16;\n \t\t\t\t/* Used to see if the ref is read or write.  */\n-  ENUM_BITFIELD(df_ref_flags) flags : 16;\n-\t\t\t\t/* Various flags.  */\n+  int flags : 16;\t\t/* Various df_ref_flags.  */\n   unsigned int start_regno;     /* First word of the multi word subreg.  */\n   unsigned int end_regno;       /* Last word of the multi word subreg.  */\n   unsigned int mw_order;        /* Same as df_ref.ref_order.  */\n@@ -361,8 +360,7 @@ struct df_base_ref\n \n   ENUM_BITFIELD(df_ref_type) type : 8;\n \t\t\t\t/* Type of ref.  */\n-  ENUM_BITFIELD(df_ref_flags) flags : 16;\n-\t\t\t\t/* Various flags.  */\n+  int flags : 16;\t\t/* Various df_ref_flags.  */\n   rtx reg;\t\t\t/* The register referenced.  */\n   struct df_link *chain;\t/* Head of def-use, use-def.  */\n   /* Pointer to the insn info of the containing instruction.  FIXME! \n@@ -603,8 +601,9 @@ struct df\n      addresses.  It is incremented whenever a ref is created.  */\n   unsigned int ref_order;\n \n-  /* Problem specific control information.  */\n-  ENUM_BITFIELD (df_changeable_flags) changeable_flags : 8;\n+  /* Problem specific control information.  This is a combination of\n+     enum df_changeable_flags values.  */\n+  int changeable_flags : 8;\n \n   /* If this is true, then only a subset of the blocks of the program\n      is considered to compute the solutions of dataflow problems.  */"}, {"sha": "d0777a007274328b9c67deda9bc14f0810623991", "filename": "gcc/dwarf2.h", "status": "modified", "additions": 37, "deletions": 29, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fdwarf2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fdwarf2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2.h?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1,7 +1,7 @@\n /* Declarations and definitions of codes relating to the DWARF2 and\n    DWARF3 symbolic debugging information formats.\n    Copyright (C) 1992, 1993, 1995, 1996, 1997, 1999, 2000, 2001, 2002,\n-   2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+   2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n \n    Written by Gary Funck (gary@intrepid.com) The Ada Joint Program\n    Office (AJPO), Florida State University and Silicon Graphics Inc.\n@@ -193,6 +193,10 @@ enum dwarf_tag\n     DW_TAG_imported_unit = 0x3d,\n     DW_TAG_condition = 0x3f,\n     DW_TAG_shared_type = 0x40,\n+\n+    DW_TAG_lo_user = 0x4080,\n+    DW_TAG_hi_user = 0xffff,\n+\n     /* SGI/MIPS Extensions.  */\n     DW_TAG_MIPS_loop = 0x4081,\n     /* HP extensions.  See: ftp://ftp.hp.com/pub/lang/tools/WDB/wdb-4.0.tar.gz .  */\n@@ -212,9 +216,6 @@ enum dwarf_tag\n     DW_TAG_PGI_interface_block = 0xA020\n   };\n \n-#define DW_TAG_lo_user\t0x4080\n-#define DW_TAG_hi_user\t0xffff\n-\n /* Flag that tells whether entry has a child or not.  */\n #define DW_children_no   0\n #define\tDW_children_yes  1\n@@ -340,6 +341,10 @@ enum dwarf_attribute\n     DW_AT_elemental     = 0x66,\n     DW_AT_pure          = 0x67,\n     DW_AT_recursive     = 0x68,\n+\n+    DW_AT_lo_user = 0x2000,\t/* Implementation-defined range start.  */\n+    DW_AT_hi_user = 0x3ff0,\t/* Implementation-defined range end.  */\n+\n     /* SGI/MIPS extensions.  */\n     DW_AT_MIPS_fde = 0x2001,\n     DW_AT_MIPS_loop_begin = 0x2002,\n@@ -385,9 +390,6 @@ enum dwarf_attribute\n     DW_AT_PGI_lstride  = 0x3a02\n   };\n \n-#define DW_AT_lo_user\t0x2000\t/* Implementation-defined range start.  */\n-#define DW_AT_hi_user\t0x3ff0\t/* Implementation-defined range end.  */\n-\n /* Location atom names and codes.  */\n enum dwarf_location_atom\n   {\n@@ -544,6 +546,10 @@ enum dwarf_location_atom\n     DW_OP_form_tls_address = 0x9b,\n     DW_OP_call_frame_cfa = 0x9c,\n     DW_OP_bit_piece = 0x9d,\n+\n+    DW_OP_lo_user = 0xe0,\t/* Implementation-defined range start.  */\n+    DW_OP_hi_user = 0xff,\t/* Implementation-defined range end.  */\n+\n     /* GNU extensions.  */\n     DW_OP_GNU_push_tls_address = 0xe0,\n     /* The following is for marking variables that are uninitialized.  */\n@@ -559,9 +565,6 @@ enum dwarf_location_atom\n     DW_OP_HP_tls         = 0xe6\n   };\n \n-#define DW_OP_lo_user\t0xe0\t/* Implementation-defined range start.  */\n-#define DW_OP_hi_user\t0xff\t/* Implementation-defined range end.  */\n-\n /* Type encodings.  */\n enum dwarf_type\n   {\n@@ -582,6 +585,10 @@ enum dwarf_type\n     DW_ATE_signed_fixed = 0xd,\n     DW_ATE_unsigned_fixed = 0xe,\n     DW_ATE_decimal_float = 0xf,\n+\n+    DW_ATE_lo_user = 0x80,\n+    DW_ATE_hi_user = 0xff,\n+\n     /* HP extensions.  */\n     DW_ATE_HP_float80            = 0x80, /* Floating-point (80 bit).  */\n     DW_ATE_HP_complex_float80    = 0x81, /* Complex floating-point (80 bit).  */\n@@ -592,9 +599,6 @@ enum dwarf_type\n     DW_ATE_HP_imaginary_float128 = 0x86\n   };\n \n-#define\tDW_ATE_lo_user 0x80\n-#define\tDW_ATE_hi_user 0xff\n-\n /* Decimal sign encodings.  */\n enum dwarf_decimal_sign_encoding\n   {\n@@ -612,11 +616,11 @@ enum dwarf_endianity_encoding\n     /* DWARF 3.  */\n     DW_END_default = 0x00,\n     DW_END_big = 0x01,\n-    DW_END_little = 0x02\n-  };\n+    DW_END_little = 0x02,\n \n-#define DW_END_lo_user 0x40\n-#define DW_END_hi_user 0xff\n+    DW_END_lo_user = 0x40,\n+    DW_END_hi_user = 0xff\n+  };\n \n /* Array ordering names and codes.  */\n enum dwarf_array_dim_ordering\n@@ -664,12 +668,13 @@ enum dwarf_calling_convention\n     DW_CC_normal = 0x1,\n     DW_CC_program = 0x2,\n     DW_CC_nocall = 0x3,\n+\n+    DW_CC_lo_user = 0x40,\n+    DW_CC_hi_user = 0xff,\n+\n     DW_CC_GNU_renesas_sh = 0x40\n   };\n \n-#define DW_CC_lo_user 0x40\n-#define DW_CC_hi_user 0xff\n-\n /* Inline attribute.  */\n enum dwarf_inline_attribute\n   {\n@@ -721,11 +726,11 @@ enum dwarf_line_number_x_ops\n     DW_LNE_HP_negate_post_semantics    = 0x17,\n     DW_LNE_HP_negate_function_exit     = 0x18,\n     DW_LNE_HP_negate_front_end_logical = 0x19,\n-    DW_LNE_HP_define_proc              = 0x20\n-  };\n+    DW_LNE_HP_define_proc              = 0x20,\n \n-#define DW_LNE_lo_user 0x80\n-#define DW_LNE_hi_user 0xff\n+    DW_LNE_lo_user = 0x80,\n+    DW_LNE_hi_user = 0xff\n+  };\n \n /* Call frame information.  */\n enum dwarf_call_frame_info\n@@ -757,6 +762,10 @@ enum dwarf_call_frame_info\n     DW_CFA_val_offset = 0x14,\n     DW_CFA_val_offset_sf = 0x15,\n     DW_CFA_val_expression = 0x16,\n+\n+    DW_CFA_lo_user = 0x1c,\n+    DW_CFA_hi_user = 0x3f,\n+\n     /* SGI/MIPS specific.  */\n     DW_CFA_MIPS_advance_loc8 = 0x1d,\n     /* GNU extensions.  */\n@@ -770,8 +779,6 @@ enum dwarf_call_frame_info\n #define DW_CIE_VERSION\t  1\n \n #define DW_CFA_extended   0\n-#define DW_CFA_lo_user    0x1c\n-#define DW_CFA_hi_user    0x3f\n \n #define DW_CHILDREN_no\t\t     0x00\n #define DW_CHILDREN_yes\t\t     0x01\n@@ -801,15 +808,16 @@ enum dwarf_source_language\n     DW_LANG_ObjC_plus_plus = 0x0011,\n     DW_LANG_UPC = 0x0012,\n     DW_LANG_D = 0x0013,\n+\n+    DW_LANG_lo_user = 0x8000,\t/* Implementation-defined range start.  */\n+    DW_LANG_hi_user = 0xffff,\t/* Implementation-defined range start.  */\n+\n     /* MIPS.  */\n     DW_LANG_Mips_Assembler = 0x8001,\n     /* UPC.  */\n     DW_LANG_Upc = 0x8765\n   };\n \n-#define DW_LANG_lo_user 0x8000\t/* Implementation-defined range start.  */\n-#define DW_LANG_hi_user 0xffff\t/* Implementation-defined range start.  */\n-\n /* Names and codes for macro information.  */\n enum dwarf_macinfo_record_type\n   {"}, {"sha": "69cdb035494df27093a9555a16c013f4c3a33348", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -9752,7 +9752,7 @@ int_loc_descriptor (HOST_WIDE_INT i)\n   if (i >= 0)\n     {\n       if (i <= 31)\n-\top = DW_OP_lit0 + i;\n+\top = (enum dwarf_location_atom) (DW_OP_lit0 + i);\n       else if (i <= 0xff)\n \top = DW_OP_const1u;\n       else if (i <= 0xffff)\n@@ -12736,7 +12736,8 @@ add_calling_convention_attribute (dw_die_ref subr_die, tree decl)\n {\n   enum dwarf_calling_convention value = DW_CC_normal;\n \n-  value = targetm.dwarf_calling_convention (TREE_TYPE (decl));\n+  value = ((enum dwarf_calling_convention)\n+\t   targetm.dwarf_calling_convention (TREE_TYPE (decl)));\n \n   /* DWARF doesn't provide a way to identify a program's source-level\n      entry point.  DW_AT_calling_convention attributes are only meant"}, {"sha": "2b8f7333182dcd31d28370672ff5f27df64c86a3", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -963,7 +963,7 @@ fold_undefer_overflow_warnings (bool issue, const_gimple stmt, int code)\n       if (fold_deferred_overflow_warning != NULL\n \t  && code != 0\n \t  && code < (int) fold_deferred_overflow_code)\n-\tfold_deferred_overflow_code = code;\n+\tfold_deferred_overflow_code = (enum warn_strict_overflow_code) code;\n       return;\n     }\n \n@@ -2935,7 +2935,7 @@ combine_comparisons (enum tree_code code, enum tree_code lcode,\n   bool honor_nans = HONOR_NANS (TYPE_MODE (TREE_TYPE (ll_arg)));\n   enum comparison_code lcompcode = comparison_to_compcode (lcode);\n   enum comparison_code rcompcode = comparison_to_compcode (rcode);\n-  enum comparison_code compcode;\n+  int compcode;\n \n   switch (code)\n     {\n@@ -3001,8 +3001,12 @@ combine_comparisons (enum tree_code code, enum tree_code lcode,\n   else if (compcode == COMPCODE_FALSE)\n     return constant_boolean_node (false, truth_type);\n   else\n-    return fold_build2 (compcode_to_comparison (compcode),\n-\t\t\ttruth_type, ll_arg, lr_arg);\n+    {\n+      enum tree_code tcode;\n+\n+      tcode = compcode_to_comparison ((enum comparison_code) compcode);\n+      return fold_build2 (tcode, truth_type, ll_arg, lr_arg);\n+    }\n }\n \f\n /* Return nonzero if two operands (typically of the same tree node)"}, {"sha": "99575797646f036840c79b94901ddb25acc6d9fc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1,3 +1,21 @@\n+2009-04-24  Ian Lance Taylor  <iant@google.com>\n+\n+\t* gfortran.h (enum gfc_symbol_type): New named enum type, broken\n+\tout of struct gfc_symbol.\n+\t(struct gfc_symbol): Use enum gfc_symbol_type.\n+\t(enum gfc_array_ref_dimen_type): New named enum type, broken out\n+\tof struct gfc_array_ref).\n+\t(struct gfc_array_ref): Use enum gfc_array_ref_dimen_type.\n+\t(mod_pointee_as): Update declaration.\n+\t* decl.c (add_global_entry): Change type to enum gfc_symbol_type.\n+\t(gfc_mod_pointee_as): Change return type to \"match\".\n+\t* module.c (mio_array_ref): Add cast to enum type.\n+\t(mio_symbol): Likewise.\n+\t* resolve.c (resolve_global_procedure): Change type to enum\n+\tgfc_symbol_type.\n+\t* trans-io.c (gfc_build_st_parameter): Change type to unsigned\n+\tint.\n+\n 2009-04-24  Daniel Kraft  <d@domob.eu>\n \n \t* gfortran.h (gfc_get_typebound_proc): Removed as macro, now a function."}, {"sha": "1a8d6dcf36a74719b44c3b0fbc13cc89d4a65a53", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1,5 +1,5 @@\n /* Declaration statement matcher\n-   Copyright (C) 2002, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2002, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n@@ -4610,7 +4610,7 @@ static bool\n add_global_entry (const char *name, int sub)\n {\n   gfc_gsymbol *s;\n-  unsigned int type;\n+  enum gfc_symbol_type type;\n \n   s = gfc_get_gsymbol(name);\n   type = sub ? GSYM_SUBROUTINE : GSYM_FUNCTION;\n@@ -6629,7 +6629,7 @@ gfc_match_derived_decl (void)\n    is the case. Since there is no bounds-checking for Cray Pointees,\n    this will be okay.  */\n \n-gfc_try\n+match\n gfc_mod_pointee_as (gfc_array_spec *as)\n {\n   as->cray_pointee = true; /* This will be useful to know later.  */"}, {"sha": "c4049545ec938866b5283d292119b071fe62c16d", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1322,6 +1322,12 @@ extern gfc_namespace *gfc_global_ns_list;\n    this to detect collisions already when parsing.\n    TODO: Extend to verify procedure calls.  */\n \n+enum gfc_symbol_type\n+{\n+  GSYM_UNKNOWN=1, GSYM_PROGRAM, GSYM_FUNCTION, GSYM_SUBROUTINE,\n+  GSYM_MODULE, GSYM_COMMON, GSYM_BLOCK_DATA\n+};\n+\n typedef struct gfc_gsymbol\n {\n   BBT_HEADER(gfc_gsymbol);\n@@ -1330,8 +1336,7 @@ typedef struct gfc_gsymbol\n   const char *sym_name;\n   const char *mod_name;\n   const char *binding_label;\n-  enum { GSYM_UNKNOWN=1, GSYM_PROGRAM, GSYM_FUNCTION, GSYM_SUBROUTINE,\n-        GSYM_MODULE, GSYM_COMMON, GSYM_BLOCK_DATA } type;\n+  enum gfc_symbol_type type;\n \n   int defined, used;\n   locus where;\n@@ -1356,6 +1361,12 @@ extern gfc_interface_info current_interface;\n \n \n /* Array reference.  */\n+\n+enum gfc_array_ref_dimen_type\n+{\n+  DIMEN_ELEMENT = 1, DIMEN_RANGE, DIMEN_VECTOR, DIMEN_UNKNOWN\n+};\n+\n typedef struct gfc_array_ref\n {\n   ar_type type;\n@@ -1367,9 +1378,7 @@ typedef struct gfc_array_ref\n   struct gfc_expr *start[GFC_MAX_DIMENSIONS], *end[GFC_MAX_DIMENSIONS],\n     *stride[GFC_MAX_DIMENSIONS];\n \n-  enum\n-  { DIMEN_ELEMENT = 1, DIMEN_RANGE, DIMEN_VECTOR, DIMEN_UNKNOWN }\n-  dimen_type[GFC_MAX_DIMENSIONS];\n+  enum gfc_array_ref_dimen_type dimen_type[GFC_MAX_DIMENSIONS];\n \n   struct gfc_expr *offset;\n }\n@@ -2270,7 +2279,7 @@ gfc_try gfc_add_optional (symbol_attribute *, locus *);\n gfc_try gfc_add_pointer (symbol_attribute *, locus *);\n gfc_try gfc_add_cray_pointer (symbol_attribute *, locus *);\n gfc_try gfc_add_cray_pointee (symbol_attribute *, locus *);\n-gfc_try gfc_mod_pointee_as (gfc_array_spec *);\n+match gfc_mod_pointee_as (gfc_array_spec *);\n gfc_try gfc_add_protected (symbol_attribute *, const char *, locus *);\n gfc_try gfc_add_result (symbol_attribute *, const char *, locus *);\n gfc_try gfc_add_save (symbol_attribute *, const char *, locus *);"}, {"sha": "86db7aa22c2816f9cf711d88d617dc3238ddf511", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -2162,7 +2162,7 @@ mio_array_ref (gfc_array_ref *ar)\n       for (i = 0; i < ar->dimen; i++)\n \t{\n \t  require_atom (ATOM_INTEGER);\n-\t  ar->dimen_type[i] = atom_int;\n+\t  ar->dimen_type[i] = (enum gfc_array_ref_dimen_type) atom_int;\n \t}\n     }\n \n@@ -3462,7 +3462,7 @@ mio_symbol (gfc_symbol *sym)\n   else\n     {\n       mio_integer (&intmod);\n-      sym->from_intmod = intmod;\n+      sym->from_intmod = (intmod_id) intmod;\n     }\n   \n   mio_integer (&(sym->intmod_sym_id));"}, {"sha": "75078699168458038ffc929ef5ff0b111595ed78", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1642,7 +1642,7 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n {\n   gfc_gsymbol * gsym;\n   gfc_namespace *ns;\n-  unsigned int type;\n+  enum gfc_symbol_type type;\n \n   type = sub ? GSYM_SUBROUTINE : GSYM_FUNCTION;\n "}, {"sha": "d2b47a408a32ef08bf1b1eba558d86992800b073", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1,5 +1,5 @@\n /* IO Code translation/library interface\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Paul Brook\n \n@@ -153,7 +153,7 @@ static stmtblock_t *dt_post_end_block;\n static void\n gfc_build_st_parameter (enum ioparam_type ptype, tree *types)\n {\n-  enum iofield type;\n+  unsigned int type;\n   gfc_st_parameter_field *p;\n   char name[64];\n   size_t len;\n@@ -2245,4 +2245,3 @@ gfc_trans_transfer (gfc_code * code)\n }\n \n #include \"gt-fortran-trans-io.h\"\n-"}, {"sha": "02006e2af9c21417651f78dae93312e33bffb506", "filename": "gcc/genrecog.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1243,7 +1243,7 @@ maybe_both_true_2 (struct decision_test *d1, struct decision_test *d2)\n \t  else if (d2->type == DT_pred && d2->u.pred.data)\n \t    {\n \t      bool common = false;\n-\t      enum rtx_code c;\n+\t      int c;\n \n \t      for (c = 0; c < NUM_RTX_CODE; c++)\n \t\tif (d1->u.pred.data->codes[c] && d2->u.pred.data->codes[c])\n@@ -1921,7 +1921,8 @@ write_switch (struct decision *start, int depth)\n       while (p && p->tests->type == DT_pred && p->tests->u.pred.data)\n \t{\n \t  const struct pred_data *data = p->tests->u.pred.data;\n-\t  RTX_CODE c;\n+\t  int c;\n+\n \t  for (c = 0; c < NUM_RTX_CODE; c++)\n \t    if (codemap[c] && data->codes[c])\n \t      goto pred_done;\n@@ -1930,7 +1931,7 @@ write_switch (struct decision *start, int depth)\n \t    if (data->codes[c])\n \t      {\n \t\tfputs (\"    case \", stdout);\n-\t\tprint_code (c);\n+\t\tprint_code ((enum rtx_code) c);\n \t\tfputs (\":\\n\", stdout);\n \t\tcodemap[c] = 1;\n \t      }"}, {"sha": "870cd1b7c1d066394f0f349dbfac5ad2d74a6d01", "filename": "gcc/gimplify.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -5902,7 +5902,8 @@ static enum gimplify_status\n gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n {\n   tree for_stmt, decl, var, t;\n-  enum gimplify_status ret = GS_OK;\n+  enum gimplify_status ret = GS_ALL_DONE;\n+  enum gimplify_status tret;\n   gimple gfor;\n   gimple_seq for_body, for_pre_body;\n   int i;\n@@ -5952,8 +5953,9 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n       else\n \tvar = decl;\n \n-      ret |= gimplify_expr (&TREE_OPERAND (t, 1), &for_pre_body, NULL,\n+      tret = gimplify_expr (&TREE_OPERAND (t, 1), &for_pre_body, NULL,\n \t\t\t    is_gimple_val, fb_rvalue);\n+      ret = MIN (ret, tret);\n       if (ret == GS_ERROR)\n \treturn ret;\n \n@@ -5962,8 +5964,9 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n       gcc_assert (COMPARISON_CLASS_P (t));\n       gcc_assert (TREE_OPERAND (t, 0) == decl);\n \n-      ret |= gimplify_expr (&TREE_OPERAND (t, 1), &for_pre_body, NULL,\n+      tret = gimplify_expr (&TREE_OPERAND (t, 1), &for_pre_body, NULL,\n \t\t\t    is_gimple_val, fb_rvalue);\n+      ret = MIN (ret, tret);\n \n       /* Handle OMP_FOR_INCR.  */\n       t = TREE_VEC_ELT (OMP_FOR_INCR (for_stmt), i);\n@@ -6010,8 +6013,9 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n \t      gcc_unreachable ();\n \t    }\n \n-\t  ret |= gimplify_expr (&TREE_OPERAND (t, 1), &for_pre_body, NULL,\n+\t  tret = gimplify_expr (&TREE_OPERAND (t, 1), &for_pre_body, NULL,\n \t\t\t\tis_gimple_val, fb_rvalue);\n+\t  ret = MIN (ret, tret);\n \t  break;\n \n \tdefault:\n@@ -6396,7 +6400,8 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t}\n \n       /* Do any language-specific gimplification.  */\n-      ret = lang_hooks.gimplify_expr (expr_p, pre_p, post_p);\n+      ret = ((enum gimplify_status)\n+\t     lang_hooks.gimplify_expr (expr_p, pre_p, post_p));\n       if (ret == GS_OK)\n \t{\n \t  if (*expr_p == NULL_TREE)"}, {"sha": "88047e476b3776c1039c41ee2b1cda10bafce97f", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1,5 +1,5 @@\n /* Interprocedural analyses.\n-   Copyright (C) 2005, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -891,7 +891,7 @@ update_jump_functions_after_inlining (struct cgraph_edge *cs,\n       /* We must check range due to calls with variable number of arguments:  */\n       if (dst->value.formal_id >= (unsigned) ipa_get_cs_argument_count (top))\n \t{\n-\t  dst->type = IPA_BOTTOM;\n+\t  dst->type = IPA_JF_UNKNOWN;\n \t  continue;\n \t}\n "}, {"sha": "1b8c84b9c94d505a321d65eeb9ee4eaacfad2816", "filename": "gcc/ira.c", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -503,8 +503,7 @@ setup_alloc_regs (bool use_hard_frame_p)\n static void\n setup_class_subset_and_memory_move_costs (void)\n {\n-  int cl, cl2;\n-  enum machine_mode mode;\n+  int cl, cl2, mode;\n   HARD_REG_SET temp_hard_regset2;\n \n   for (mode = 0; mode < MAX_MACHINE_MODE; mode++)\n@@ -516,9 +515,11 @@ setup_class_subset_and_memory_move_costs (void)\n \tfor (mode = 0; mode < MAX_MACHINE_MODE; mode++)\n \t  {\n \t    ira_memory_move_cost[mode][cl][0] =\n-\t      MEMORY_MOVE_COST (mode, (enum reg_class) cl, 0);\n+\t      MEMORY_MOVE_COST ((enum machine_mode) mode,\n+\t\t\t\t(enum reg_class) cl, 0);\n \t    ira_memory_move_cost[mode][cl][1] =\n-\t      MEMORY_MOVE_COST (mode, (enum reg_class) cl, 1);\n+\t      MEMORY_MOVE_COST ((enum machine_mode) mode,\n+\t\t\t\t(enum reg_class) cl, 1);\n \t    /* Costs for NO_REGS are used in cost calculation on the\n \t       1st pass when the preferred register classes are not\n \t       known yet.  In this case we take the best scenario.  */\n@@ -727,9 +728,8 @@ int ira_important_class_nums[N_REG_CLASSES];\n static void\n setup_cover_and_important_classes (void)\n {\n-  int i, j, n;\n+  int i, j, n, cl;\n   bool set_p, eq_p;\n-  enum reg_class cl;\n   const enum reg_class *cover_classes;\n   HARD_REG_SET temp_hard_regset2;\n   static enum reg_class classes[LIM_REG_CLASSES + 1];\n@@ -743,7 +743,7 @@ setup_cover_and_important_classes (void)\n   else\n     {\n       for (i = 0; (cl = cover_classes[i]) != LIM_REG_CLASSES; i++)\n-\tclasses[i] = cl;\n+\tclasses[i] = (enum reg_class) cl;\n       classes[i] = LIM_REG_CLASSES;\n     }\n \n@@ -756,7 +756,7 @@ setup_cover_and_important_classes (void)\n \t    continue;\n #ifdef CONSTRAINT__LIMIT\n \t  for (j = 0; j < CONSTRAINT__LIMIT; j++)\n-\t    if ((int) regclass_for_constraint (j) == i)\n+\t    if ((int) regclass_for_constraint ((enum constraint_num) j) == i)\n \t      break;\n \t  if (j < CONSTRAINT__LIMIT)\n \t    {\n@@ -778,7 +778,7 @@ setup_cover_and_important_classes (void)\n \t\t    break;\n \t    }\n \t  if (j >= i)\n-\t    classes[n++] = i;\n+\t    classes[n++] = (enum reg_class) i;\n \t}\n       classes[n] = LIM_REG_CLASSES;\n     }\n@@ -788,12 +788,12 @@ setup_cover_and_important_classes (void)\n     {\n       for (j = 0; j < i; j++)\n \tif (flag_ira_algorithm != IRA_ALGORITHM_PRIORITY\n-\t    && reg_classes_intersect_p (cl, classes[j]))\n+\t    && reg_classes_intersect_p ((enum reg_class) cl, classes[j]))\n \t  gcc_unreachable ();\n       COPY_HARD_REG_SET (temp_hard_regset, reg_class_contents[cl]);\n       AND_COMPL_HARD_REG_SET (temp_hard_regset, no_unit_alloc_regs);\n       if (! hard_reg_set_empty_p (temp_hard_regset))\n-\tira_reg_class_cover[ira_reg_class_cover_size++] = cl;\n+\tira_reg_class_cover[ira_reg_class_cover_size++] = (enum reg_class) cl;\n     }\n   ira_important_classes_num = 0;\n   for (cl = 0; cl < N_REG_CLASSES; cl++)\n@@ -810,7 +810,7 @@ setup_cover_and_important_classes (void)\n \t      COPY_HARD_REG_SET (temp_hard_regset2,\n \t\t\t\t reg_class_contents[ira_reg_class_cover[j]]);\n \t      AND_COMPL_HARD_REG_SET (temp_hard_regset2, no_unit_alloc_regs);\n-\t      if (cl == ira_reg_class_cover[j])\n+\t      if ((enum reg_class) cl == ira_reg_class_cover[j])\n \t\t{\n \t\t  eq_p = false;\n \t\t  set_p = true;\n@@ -826,7 +826,8 @@ setup_cover_and_important_classes (void)\n \t  if (set_p && ! eq_p)\n \t    {\n \t      ira_important_class_nums[cl] = ira_important_classes_num;\n-\t      ira_important_classes[ira_important_classes_num++] = cl;\n+\t      ira_important_classes[ira_important_classes_num++] =\n+\t\t(enum reg_class) cl;\n \t    }\n \t}\n     }\n@@ -841,8 +842,8 @@ enum reg_class ira_class_translate[N_REG_CLASSES];\n static void\n setup_class_translate (void)\n {\n-  enum reg_class cl, cover_class, best_class, *cl_ptr;\n-  enum machine_mode mode;\n+  int cl, mode;\n+  enum reg_class cover_class, best_class, *cl_ptr;\n   int i, cost, min_cost, best_cost;\n \n   for (cl = 0; cl < N_REG_CLASSES; cl++)\n@@ -1225,7 +1226,7 @@ ira_init_register_move_cost (enum machine_mode mode)\n void\n ira_init_once (void)\n {\n-  enum machine_mode mode;\n+  int mode;\n \n   for (mode = 0; mode < MAX_MACHINE_MODE; mode++)\n     {\n@@ -1241,7 +1242,7 @@ ira_init_once (void)\n static void\n free_register_move_costs (void)\n {\n-  enum machine_mode mode;\n+  int mode;\n \n   for (mode = 0; mode < MAX_MACHINE_MODE; mode++)\n     {\n@@ -1311,9 +1312,9 @@ setup_prohibited_mode_move_regs (void)\n \t  if (! HARD_REGNO_MODE_OK (j, (enum machine_mode) i))\n \t    continue;\n \t  SET_REGNO (test_reg1, j);\n-\t  PUT_MODE (test_reg1, i);\n+\t  PUT_MODE (test_reg1, (enum machine_mode) i);\n \t  SET_REGNO (test_reg2, j);\n-\t  PUT_MODE (test_reg2, i);\n+\t  PUT_MODE (test_reg2, (enum machine_mode) i);\n \t  INSN_CODE (move_insn) = -1;\n \t  recog_memoized (move_insn);\n \t  if (INSN_CODE (move_insn) < 0)"}, {"sha": "f4f8a2afe89a46198af4aa36b8841951eceffd2b", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1,3 +1,7 @@\n+2009-04-24  Ian Lance Taylor  <iant@google.com>\n+\n+\t* jcf-parse.c (handle_constant): Add cast to enum type.\n+\n 2009-04-21  Taras Glek <tglek@mozilla.com>\n \n \t* builtins.c: Update GTY annotations to new syntax"}, {"sha": "e3b933182a9dad5ac88bc18671a74d346da06502", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1,6 +1,6 @@\n /* Parser for Java(TM) .class files.\n    Copyright (C) 1996, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+   2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -507,7 +507,7 @@ handle_constant (JCF *jcf, int index, enum cpool_tag purpose)\n   if (! CPOOL_INDEX_IN_RANGE (&jcf->cpool, index))\n     error (\"<constant pool index %d not in range>\", index);\n   \n-  kind = JPOOL_TAG (jcf, index);\n+  kind = (enum cpool_tag) JPOOL_TAG (jcf, index);\n \n   if ((kind & ~CONSTANT_ResolvedFlag) != purpose)\n     {"}, {"sha": "fa9b8dd3acadf131e87a8d871dc8ad44dde47f0f", "filename": "gcc/langhooks.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -530,9 +530,10 @@ add_builtin_function_common (const char *name,\n   DECL_EXTERNAL (decl)       = 1;\n   DECL_BUILT_IN_CLASS (decl) = cl;\n \n-  DECL_FUNCTION_CODE (decl)  = -1;\n-  gcc_assert (DECL_FUNCTION_CODE (decl) >= function_code);\n-  DECL_FUNCTION_CODE (decl)  = function_code;\n+  DECL_FUNCTION_CODE (decl)  = (enum built_in_function) function_code;\n+\n+  /* DECL_FUNCTION_CODE is a bitfield; verify that the value fits.  */\n+  gcc_assert (DECL_FUNCTION_CODE (decl) == function_code);\n \n   if (library_name)\n     {"}, {"sha": "30f3070da332119cf810c107126b8ec9bb85ada9", "filename": "gcc/mcf.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fmcf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fmcf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmcf.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1,6 +1,6 @@\n /* Routines to implement minimum-cost maximal flow algorithm used to smooth\n    basic block and edge frequency counts.\n-   Copyright (C) 2008\n+   Copyright (C) 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Paul Yuan (yingbo.com@gmail.com) and\n                   Vinodha Ramasamy (vinodha@google.com).\n@@ -388,8 +388,9 @@ add_edge (fixup_graph_type *fixup_graph, int src, int dest, gcov_type cost)\n    MAX_CAPACITY to the edge_list in the fixup graph.  */\n \n static void\n-add_fixup_edge (fixup_graph_type *fixup_graph, int src, int dest, int type,\n-\t\tgcov_type weight, gcov_type cost, gcov_type max_capacity)\n+add_fixup_edge (fixup_graph_type *fixup_graph, int src, int dest,\n+\t\tedge_type type, gcov_type weight, gcov_type cost,\n+\t\tgcov_type max_capacity)\n {\n   fixup_edge_p curr_edge = add_edge(fixup_graph, src, dest, cost);\n   curr_edge->type = type;"}, {"sha": "1dea5280288cb112729f7d8f0cab3621f0a4e3a9", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1,3 +1,8 @@\n+2009-04-24  Ian Lance Taylor  <iant@google.com>\n+\n+\t* objc-act.c (get_super_receiver): Update calls to\n+\tbuild_modify_expr to pass new argument.\n+\n 2009-04-21  Taras Glek <tglek@mozilla.com>\n \n \t* objc-act.c: Update GTY annotations to new syntax"}, {"sha": "89048e0f3af64369b67d1a269bfa91a7fb09f241", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -8740,9 +8740,8 @@ get_super_receiver (void)\n \n       /* Set receiver to self.  */\n       super_expr = objc_build_component_ref (UOBJC_SUPER_decl, self_id);\n-      super_expr = build_modify_expr (input_location, \n-\t\t\t\t      super_expr, NOP_EXPR, self_decl,\n-\t\t\t\t      NULL_TREE);\n+      super_expr = build_modify_expr (input_location, super_expr, NULL_TREE,\n+\t\t\t\t      NOP_EXPR, self_decl, NULL_TREE);\n       super_expr_list = super_expr;\n \n       /* Set class to begin searching.  */\n@@ -8754,7 +8753,8 @@ get_super_receiver (void)\n \t  /* [_cls, __cls]Super are \"pre-built\" in\n \t     synth_forward_declarations.  */\n \n-\t  super_expr = build_modify_expr (input_location, super_expr, NOP_EXPR,\n+\t  super_expr = build_modify_expr (input_location, super_expr,\n+\t\t\t\t\t  NULL_TREE, NOP_EXPR,\n \t\t\t\t\t  ((TREE_CODE (objc_method_context)\n \t\t\t\t\t    == INSTANCE_METHOD_DECL)\n \t\t\t\t\t   ? ucls_super_ref\n@@ -8807,7 +8807,8 @@ get_super_receiver (void)\n \t    }\n \n \t  super_expr\n-\t    = build_modify_expr (input_location, super_expr, NOP_EXPR,\n+\t    = build_modify_expr (input_location, super_expr, NULL_TREE,\n+\t\t\t\t NOP_EXPR,\n \t\t\t\t build_c_cast (TREE_TYPE (super_expr),\n \t\t\t\t\t       super_class),\n \t\t\t\t NULL_TREE);"}, {"sha": "af3bd84d39c052d6d624217c90458fe0c75d0825", "filename": "gcc/omega.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fomega.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fomega.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomega.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -5,7 +5,7 @@\n    This code has no license restrictions, and is considered public\n    domain.\n \n-   Changes copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation,\n+   Changes copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation,\n    Inc.\n    Contributed by Sebastian Pop <sebastian.pop@inria.fr>\n \n@@ -3048,7 +3048,8 @@ omega_do_elimination (omega_pb pb, int e, int i)\n \t      eqn->coef[j] *= a;\n \t    k = eqn->coef[i];\n \t    eqn->coef[i] = 0;\n-\t    eqn->color |= sub->color;\n+\t    if (sub->color == omega_red)\n+\t      eqn->color = omega_red;\n \t    for (j = n_vars; j >= 0; j--)\n \t      eqn->coef[j] -= sub->coef[j] * k / c;\n \t  }"}, {"sha": "8bf8fa76297dcbf08acb2e5b9489784445fd6085", "filename": "gcc/optabs.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -822,7 +822,7 @@ expand_vec_shift_expr (tree vec_shift_expr, rtx target)\n \tgcc_unreachable ();\n     }\n \n-  icode = (int) optab_handler (shift_optab, mode)->insn_code;\n+  icode = optab_handler (shift_optab, mode)->insn_code;\n   gcc_assert (icode != CODE_FOR_nothing);\n \n   mode1 = insn_data[icode].operand[1].mode;\n@@ -4253,7 +4253,7 @@ emit_cmp_and_jump_insn_1 (rtx x, rtx y, enum machine_mode mode,\n \t}\n \n       /* Handle some compares against zero.  */\n-      icode = (int) optab_handler (tst_optab, optab_mode)->insn_code;\n+      icode = optab_handler (tst_optab, optab_mode)->insn_code;\n       if (y == CONST0_RTX (mode) && icode != CODE_FOR_nothing)\n \t{\n \t  x = prepare_operand (icode, x, 0, mode, wider_mode, unsignedp);\n@@ -4265,7 +4265,7 @@ emit_cmp_and_jump_insn_1 (rtx x, rtx y, enum machine_mode mode,\n \n       /* Handle compares for which there is a directly suitable insn.  */\n \n-      icode = (int) optab_handler (cmp_optab, optab_mode)->insn_code;\n+      icode = optab_handler (cmp_optab, optab_mode)->insn_code;\n       if (icode != CODE_FOR_nothing)\n \t{\n \t  x = prepare_operand (icode, x, 0, mode, wider_mode, unsignedp);"}, {"sha": "8e382d558203ebcabcce2664567ae4a392a824fe", "filename": "gcc/opts.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -2229,15 +2229,17 @@ set_debug_level (enum debug_info_type type, int extended, const char *arg)\n   if (*arg == '\\0')\n     {\n       if (!debug_info_level)\n-\tdebug_info_level = 2;\n+\tdebug_info_level = DINFO_LEVEL_NORMAL;\n     }\n   else\n     {\n-      debug_info_level = integral_argument (arg);\n-      if (debug_info_level == (unsigned int) -1)\n+      int argval = integral_argument (arg);\n+      if (argval == -1)\n \terror (\"unrecognised debug output level \\\"%s\\\"\", arg);\n-      else if (debug_info_level > 3)\n+      else if (argval > 3)\n \terror (\"debug output level %s is too high\", arg);\n+      else\n+\tdebug_info_level = (enum debug_info_level) argval;\n     }\n }\n "}, {"sha": "52ce8335a6a4235cb86eebadacfacaf25cdbe92e", "filename": "gcc/regmove.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -188,7 +188,7 @@ try_auto_increment (rtx insn, rtx inc_insn, rtx inc_insn_set, rtx reg,\n \t\t     changed.  */\n \t\t  rtx note = find_reg_note (insn, REG_DEAD, reg);\n \t\t  if (note)\n-\t\t    PUT_MODE (note, REG_UNUSED);\n+\t\t    PUT_REG_NOTE_KIND (note, REG_UNUSED);\n \n \t\t  add_reg_note (insn, REG_INC, reg);\n "}, {"sha": "fb87a1580a168c75f33cebf23255bb507d18eb44", "filename": "gcc/reload.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -363,7 +363,7 @@ push_secondary_reload (int in_p, rtx x, int opnum, int optional,\n   sri.icode = CODE_FOR_nothing;\n   sri.prev_sri = prev_sri;\n   rclass = targetm.secondary_reload (in_p, x, reload_class, reload_mode, &sri);\n-  icode = sri.icode;\n+  icode = (enum insn_code) sri.icode;\n \n   /* If we don't need any secondary registers, done.  */\n   if (rclass == NO_REGS && icode == CODE_FOR_nothing)\n@@ -525,7 +525,7 @@ secondary_reload_class (bool in_p, enum reg_class rclass,\n   sri.icode = CODE_FOR_nothing;\n   sri.prev_sri = NULL;\n   rclass = targetm.secondary_reload (in_p, x, rclass, mode, &sri);\n-  icode = sri.icode;\n+  icode = (enum insn_code) sri.icode;\n \n   /* If there are no secondary reloads at all, we return NO_REGS.\n      If an intermediate register is needed, we return its class.  */\n@@ -691,7 +691,7 @@ find_valid_class (enum machine_mode outer ATTRIBUTE_UNUSED,\n \t   && (best_cost < 0 || best_cost >= cost))\n \t  || best_cost > cost)\n \t{\n-\t  best_class = rclass;\n+\t  best_class = (enum reg_class) rclass;\n \t  best_size = reg_class_size[rclass];\n \t  best_cost = REGISTER_MOVE_COST (outer, (enum reg_class) rclass,\n \t\t\t\t\t  dest_class);"}, {"sha": "e3ca42e36af859f5e2d8a66862638a09a363c390", "filename": "gcc/reload1.c", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -7090,9 +7090,15 @@ emit_input_reload_insns (struct insn_chain *chain, struct reload *rl,\n \t      if (reload_adjust_reg_for_icode (&second_reload_reg,\n \t\t\t\t\t       third_reload_reg,\n \t\t\t\t\t       (enum insn_code) sri.icode))\n-\t\ticode = sri.icode, third_reload_reg = 0;\n+\t\t{\n+\t\t  icode = (enum insn_code) sri.icode;\n+\t\t  third_reload_reg = 0;\n+\t\t}\n \t      else\n-\t\toldequiv = old, real_oldequiv = real_old;\n+\t\t{\n+\t\t  oldequiv = old;\n+\t\t  real_oldequiv = real_old;\n+\t\t}\n \t    }\n \t  else if (sri.icode != CODE_FOR_nothing)\n \t    /* We currently lack a way to express this in reloads.  */\n@@ -7108,9 +7114,15 @@ emit_input_reload_insns (struct insn_chain *chain, struct reload *rl,\n \t\t  if (reload_adjust_reg_for_temp (&second_reload_reg,\n \t\t\t\t\t\t  third_reload_reg,\n \t\t\t\t\t\t  new_class, mode))\n-\t\t    third_reload_reg = 0, tertiary_icode = sri2.icode;\n+\t\t    {\n+\t\t      third_reload_reg = 0;\n+\t\t      tertiary_icode = (enum insn_code) sri2.icode;\n+\t\t    }\n \t\t  else\n-\t\t    oldequiv = old, real_oldequiv = real_old;\n+\t\t    {\n+\t\t      oldequiv = old;\n+\t\t      real_oldequiv = real_old;\n+\t\t    }\n \t\t}\n \t      else if (new_t_class == NO_REGS && sri2.icode != CODE_FOR_nothing)\n \t\t{\n@@ -7123,10 +7135,13 @@ emit_input_reload_insns (struct insn_chain *chain, struct reload *rl,\n \t\t\t\t\t\t       sri2.icode)))\n \t\t    {\n \t\t      second_reload_reg = intermediate;\n-\t\t      tertiary_icode = sri2.icode;\n+\t\t      tertiary_icode = (enum insn_code) sri2.icode;\n \t\t    }\n \t\t  else\n-\t\t    oldequiv = old, real_oldequiv = real_old;\n+\t\t    {\n+\t\t      oldequiv = old;\n+\t\t      real_oldequiv = real_old;\n+\t\t    }\n \t\t}\n \t      else if (new_t_class != NO_REGS && sri2.icode == CODE_FOR_nothing)\n \t\t{\n@@ -7138,14 +7153,20 @@ emit_input_reload_insns (struct insn_chain *chain, struct reload *rl,\n \t\t\t\t\t\t      new_t_class, mode))\n \t\t    {\n \t\t      second_reload_reg = intermediate;\n-\t\t      tertiary_icode = sri2.icode;\n+\t\t      tertiary_icode = (enum insn_code) sri2.icode;\n \t\t    }\n \t\t  else\n-\t\t    oldequiv = old, real_oldequiv = real_old;\n+\t\t    {\n+\t\t      oldequiv = old;\n+\t\t      real_oldequiv = real_old;\n+\t\t    }\n \t\t}\n \t      else\n-\t\t/* This could be handled more intelligently too.  */\n-\t\toldequiv = old, real_oldequiv = real_old;\n+\t\t{\n+\t\t  /* This could be handled more intelligently too.  */\n+\t\t  oldequiv = old;\n+\t\t  real_oldequiv = real_old;\n+\t\t}\n \t    }\n \t}\n "}, {"sha": "98fb29068efca4d14c9d351b023c68f0091903b4", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -880,8 +880,8 @@ extern const char * const reg_note_name[];\n /* Initialization status of the variable in the location.  Status\n    can be unknown, uninitialized or initialized.  See enumeration\n    type below.  */\n-#define NOTE_VAR_LOCATION_STATUS(INSN)  (XCINT (XCEXP (INSN, 4, NOTE), \\\n-\t\t\t\t\t\t2, VAR_LOCATION))\n+#define NOTE_VAR_LOCATION_STATUS(INSN) \\\n+  ((enum var_init_status) (XCINT (XCEXP (INSN, 4, NOTE), 2, VAR_LOCATION)))\n \n /* Possible initialization status of a variable.   When requested\n    by the user, this information is tracked and recorded in the DWARF"}, {"sha": "168b01f64d474ce76af6ad5fc29da946bfbafd0f", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1,5 +1,5 @@\n /* Instruction scheduling pass.  Selective scheduler and pipeliner.\n-   Copyright (C) 2006, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1108,7 +1108,7 @@ hash_with_unspec_callback (const_rtx x, enum machine_mode mode ATTRIBUTE_UNUSED,\n       && targetm.sched.skip_rtx_p (x))\n     {\n       *nx = XVECEXP (x, 0 ,0);\n-      *nmode = 0;\n+      *nmode = VOIDmode;\n       return 1;\n     }\n   "}, {"sha": "e524d02516f4b0c3a51418142a178d62eee00966", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1169,7 +1169,7 @@ static void\n init_hard_regs_data (void)\n {\n   int cur_reg = 0;\n-  enum machine_mode cur_mode = 0;\n+  int cur_mode = 0;\n \n   CLEAR_HARD_REG_SET (sel_hrd.regs_ever_used);\n   for (cur_reg = 0; cur_reg < FIRST_PSEUDO_REGISTER; cur_reg++)"}, {"sha": "b4ec0dd5cac8990173a24a5a55fee26e238550b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1,3 +1,7 @@\n+2009-04-24  Ian Lance Taylor  <iant@google.com>\n+\n+\t* gcc.dg/Wcxx-compat-4.c: New testcase.\n+\n 2009-04-24  Daniel Kraft  <d@domob.eu>\n \n \t* gfortran.dg/typebound_generic_1.f03: Change so that no error is"}, {"sha": "a294ffe0b81d99afc95864946495bc0dc86694d0", "filename": "gcc/testsuite/gcc.dg/Wcxx-compat-4.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-4.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wc++-compat\" } */\n+enum E1 { A, B, C };\n+enum E2 { D, E, F };\n+\n+enum E1 g1;\n+enum E2 g2;\n+\n+void\n+f1 ()\n+{\n+  int a;\n+  int d;\n+  enum E1 e1;\n+  enum E2 e2;\n+  a = A;\n+  a = !B;\n+  d = E;\n+  e1 = A;\n+  e1 = D;\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  e1 = 0;\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  e1 = (enum E1) 0;\n+  e1 = (enum E2) 0;\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  e1 = e2;\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  e1 = g1;\n+  e1 = g2;\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  e2 = A;\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  e2 = D;\n+}\n+\n+struct s { enum E1 e1 : 3; };\n+\n+void\n+f2 (struct s sv)\n+{\n+  sv.e1 = A;\n+  sv.e1 = D;\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  g1 = sv.e1;\n+  g2 = sv.e1;\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+}\n+\n+void\n+f3 (struct s *pv)\n+{\n+  pv->e1 = A;\n+  pv->e1 = D;\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  g1 = pv->e1;\n+  g2 = pv->e1;\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+}"}, {"sha": "7dbc63ab12d9569ad68860d5b418e0f13be5cd0f", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -38,13 +38,17 @@ along with GCC; see the file COPYING3.  If not see\n    out whether a complex number is degenerate in some way, having only real\n    or only complex parts.  */\n \n-typedef enum\n+enum\n {\n   UNINITIALIZED = 0,\n   ONLY_REAL = 1,\n   ONLY_IMAG = 2,\n   VARYING = 3\n-} complex_lattice_t;\n+};\n+\n+/* The type complex_lattice_t holds combinations of the above\n+   constants.  */\n+typedef int complex_lattice_t;\n \n #define PAIR(a, b)  ((a) << 2 | (b))\n \n@@ -945,9 +949,11 @@ expand_complex_libcall (gimple_stmt_iterator *gsi, tree ar, tree ai,\n   gcc_assert (GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT);\n \n   if (code == MULT_EXPR)\n-    bcode = BUILT_IN_COMPLEX_MUL_MIN + mode - MIN_MODE_COMPLEX_FLOAT;\n+    bcode = ((enum built_in_function)\n+\t     (BUILT_IN_COMPLEX_MUL_MIN + mode - MIN_MODE_COMPLEX_FLOAT));\n   else if (code == RDIV_EXPR)\n-    bcode = BUILT_IN_COMPLEX_DIV_MIN + mode - MIN_MODE_COMPLEX_FLOAT;\n+    bcode = ((enum built_in_function)\n+\t     (BUILT_IN_COMPLEX_DIV_MIN + mode - MIN_MODE_COMPLEX_FLOAT));\n   else\n     gcc_unreachable ();\n   fn = built_in_decls[bcode];"}, {"sha": "938eefc868a138a083913faedf8b02063d7dd516", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -318,7 +318,7 @@ get_ssa_name_ann (tree name)\n   info = VEC_index (ssa_name_info_p, info_for_ssa_name, ver);\n   if (info->age < current_info_for_ssa_name_age)\n     {\n-      info->need_phi_state = 0;\n+      info->need_phi_state = NEED_PHI_STATE_UNKNOWN;\n       info->current_def = NULL_TREE;\n       info->age = current_info_for_ssa_name_age;\n     }"}, {"sha": "efcaaaff3d0c5cc81a8df0bf3affeda90d7b3f3a", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1890,7 +1890,7 @@ vect_model_reduction_cost (stmt_vec_info stmt_info, enum tree_code reduc_code,\n \n   if (!nested_in_vect_loop_p (loop, orig_stmt))\n     {\n-      if (reduc_code < NUM_TREE_CODES) \n+      if (reduc_code != ERROR_MARK)\n \touter_cost += TARG_VEC_STMT_COST + TARG_VEC_TO_SCALAR_COST;\n       else \n \t{\n@@ -2563,7 +2563,7 @@ vect_create_epilog_for_reduction (tree vect_def, gimple stmt,\n   /* 2.3 Create the reduction code, using one of the three schemes described\n          above.  */\n \n-  if (reduc_code < NUM_TREE_CODES)\n+  if (reduc_code != ERROR_MARK)\n     {\n       tree tmp;\n \n@@ -2852,7 +2852,7 @@ vectorizable_reduction (gimple stmt, gimple_stmt_iterator *gsi,\n   tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_info);\n   struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n-  enum tree_code code, orig_code, epilog_reduc_code = 0;\n+  enum tree_code code, orig_code, epilog_reduc_code;\n   enum machine_mode vec_mode;\n   int op_type;\n   optab optab, reduc_optab;\n@@ -3088,13 +3088,13 @@ vectorizable_reduction (gimple stmt, gimple_stmt_iterator *gsi,\n     {\n       if (vect_print_dump_info (REPORT_DETAILS))\n         fprintf (vect_dump, \"no optab for reduction.\");\n-      epilog_reduc_code = NUM_TREE_CODES;\n+      epilog_reduc_code = ERROR_MARK;\n     }\n   if (optab_handler (reduc_optab, vec_mode)->insn_code == CODE_FOR_nothing)\n     {\n       if (vect_print_dump_info (REPORT_DETAILS))\n         fprintf (vect_dump, \"reduc op not supported by target.\");\n-      epilog_reduc_code = NUM_TREE_CODES;\n+      epilog_reduc_code = ERROR_MARK;\n     }\n  \n   if (!vec_stmt) /* transformation not required.  */\n@@ -3582,6 +3582,3 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n   if (loop->inner && vect_print_dump_info (REPORT_VECTORIZED_LOOPS))\n     fprintf (vect_dump, \"OUTER LOOP VECTORIZED.\");\n }\n-\n-\n-"}, {"sha": "e9dd0a9263ed7e44285350dafe27233b68081d3d", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -695,7 +695,7 @@ vect_pattern_recog_1 (\n     }\n   else\n     {\n-      enum tree_code vec_mode;\n+      enum machine_mode vec_mode;\n       enum insn_code icode;\n       optab optab;\n "}, {"sha": "ec4ba060df014058aebdbfecf39f29777dc9eea5", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -4343,7 +4343,7 @@ new_stmt_vec_info (gimple stmt, loop_vec_info loop_vinfo)\n   STMT_VINFO_TYPE (res) = undef_vec_info_type;\n   STMT_VINFO_STMT (res) = stmt;\n   STMT_VINFO_LOOP_VINFO (res) = loop_vinfo;\n-  STMT_VINFO_RELEVANT (res) = 0;\n+  STMT_VINFO_RELEVANT (res) = vect_unused_in_loop;\n   STMT_VINFO_LIVE_P (res) = false;\n   STMT_VINFO_VECTYPE (res) = NULL;\n   STMT_VINFO_VEC_STMT (res) = NULL;\n@@ -4365,7 +4365,7 @@ new_stmt_vec_info (gimple stmt, loop_vec_info loop_vinfo)\n   STMT_VINFO_SAME_ALIGN_REFS (res) = VEC_alloc (dr_p, heap, 5);\n   STMT_VINFO_INSIDE_OF_LOOP_COST (res) = 0;\n   STMT_VINFO_OUTSIDE_OF_LOOP_COST (res) = 0;\n-  STMT_SLP_TYPE (res) = 0;\n+  STMT_SLP_TYPE (res) = loop_vect;\n   DR_GROUP_FIRST_DR (res) = NULL;\n   DR_GROUP_NEXT_DR (res) = NULL;\n   DR_GROUP_SIZE (res) = 0;\n@@ -4910,5 +4910,3 @@ supportable_narrowing_operation (enum tree_code code,\n   *code1 = c1;\n   return true;\n }\n-\n-"}, {"sha": "7f2768e163308f747574f4f673a09fe2024d946a", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -99,9 +99,9 @@ vect_set_verbosity_level (const char *val)\n \n    vl = atoi (val);\n    if (vl < MAX_VERBOSITY_LEVEL)\n-     vect_verbosity_level = vl;\n+     vect_verbosity_level = (enum verbosity_levels) vl;\n    else\n-     vect_verbosity_level = MAX_VERBOSITY_LEVEL - 1;\n+     vect_verbosity_level = (enum verbosity_levels) (MAX_VERBOSITY_LEVEL - 1);\n }\n \n "}, {"sha": "0b023774b43a9bcd4807aa76ecf201c579e7d29d", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1,6 +1,6 @@\n /* Language-independent node constructors for parse phase of GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -7850,8 +7850,10 @@ build_common_builtin_nodes (void)\n \ttmp = tree_cons (NULL_TREE, inner_type, tmp);\n \tftype = build_function_type (type, tmp);\n \n-        mcode = BUILT_IN_COMPLEX_MUL_MIN + mode - MIN_MODE_COMPLEX_FLOAT;\n-        dcode = BUILT_IN_COMPLEX_DIV_MIN + mode - MIN_MODE_COMPLEX_FLOAT;\n+        mcode = ((enum built_in_function)\n+\t\t (BUILT_IN_COMPLEX_MUL_MIN + mode - MIN_MODE_COMPLEX_FLOAT));\n+        dcode = ((enum built_in_function)\n+\t\t (BUILT_IN_COMPLEX_DIV_MIN + mode - MIN_MODE_COMPLEX_FLOAT));\n \n         for (p = GET_MODE_NAME (mode), q = mode_name_buf; *p; p++, q++)\n \t  *q = TOLOWER (*p);"}, {"sha": "c4c3f3ec3161a234651d9fc48dd29f9c43c46de1", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1,5 +1,5 @@\n /* Variable tracking routines for the GNU compiler.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008\n+   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -871,13 +871,13 @@ var_reg_set (dataflow_set *set, rtx loc, enum var_init_status initialized,\n   set_variable_part (set, loc, decl, offset, initialized, set_src);\n }\n \n-static int\n+static enum var_init_status\n get_init_value (dataflow_set *set, rtx loc, tree decl)\n {\n   void **slot;\n   variable var;\n   int i;\n-  int ret_val = VAR_INIT_STATUS_UNKNOWN;\n+  enum var_init_status ret_val = VAR_INIT_STATUS_UNKNOWN;\n \n   if (! flag_var_tracking_uninit)\n     return VAR_INIT_STATUS_INITIALIZED;\n@@ -3445,4 +3445,3 @@ struct rtl_opt_pass pass_variable_tracking =\n   TODO_dump_func | TODO_verify_rtl_sharing/* todo_flags_finish */\n  }\n };\n-"}, {"sha": "6c79df00885884577b8f427687704966afdb33f7", "filename": "gcc/vec.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8bb8ebfa8711799ed8f90326e9857e894ad8b/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=32e8bb8ebfa8711799ed8f90326e9857e894ad8b", "patch": "@@ -1,5 +1,5 @@\n /* Vector API for GNU compiler.\n-   Copyright (C) 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n    Contributed by Nathan Sidwell <nathan@codesourcery.com>\n \n This file is part of GCC.\n@@ -558,7 +558,7 @@ static inline int VEC_OP (T,base,iterate)\t\t\t  \t  \\\n     }\t\t\t\t\t\t\t\t\t  \\\n   else\t\t\t\t\t\t\t\t\t  \\\n     {\t\t\t\t\t\t\t\t\t  \\\n-      *ptr = 0;\t\t\t\t\t\t\t\t  \\\n+      *ptr = (T) 0;\t\t\t\t\t\t\t  \\\n       return 0;\t\t\t\t\t\t\t\t  \\\n     }\t\t\t\t\t\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\"}]}