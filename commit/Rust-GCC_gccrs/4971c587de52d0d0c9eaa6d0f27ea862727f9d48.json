{"sha": "4971c587de52d0d0c9eaa6d0f27ea862727f9d48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk3MWM1ODdkZTUyZDBkMGM5ZWFhNmQwZjI3ZWE4NjI3MjdmOWQ0OA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-14T23:45:40Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-14T23:45:40Z"}, "message": "pa.c (output_function_prologue): Combine stack adjustment and first GR save when reasonable to do so.\n\n\t* pa.c (output_function_prologue): Combine stack adjustment and\n\tfirst GR save when reasonable to do so.\n\t(output_function_epilogue): Combine stack adjustment and first\n\tGR restore when reasonable to do so.  Avoid load/use stall for\n\tRP restore in common cases.\n\nFrom-SVN: r3246", "tree": {"sha": "d9cff41e995d11623d1136507376b85c7efef270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9cff41e995d11623d1136507376b85c7efef270"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4971c587de52d0d0c9eaa6d0f27ea862727f9d48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4971c587de52d0d0c9eaa6d0f27ea862727f9d48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4971c587de52d0d0c9eaa6d0f27ea862727f9d48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4971c587de52d0d0c9eaa6d0f27ea862727f9d48/comments", "author": null, "committer": null, "parents": [{"sha": "6627e974145343383c5cfcd3787d0b396059f87c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6627e974145343383c5cfcd3787d0b396059f87c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6627e974145343383c5cfcd3787d0b396059f87c"}], "stats": {"total": 89, "additions": 79, "deletions": 10}, "files": [{"sha": "4c360327fec75c472f4d3d032de1f459e9fb8017", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 79, "deletions": 10, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4971c587de52d0d0c9eaa6d0f27ea862727f9d48/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4971c587de52d0d0c9eaa6d0f27ea862727f9d48/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=4971c587de52d0d0c9eaa6d0f27ea862727f9d48", "patch": "@@ -1499,6 +1499,7 @@ output_function_prologue (file, size)\n   extern int frame_pointer_needed;\n   extern int current_function_returns_struct;\n   int i, offset;\n+  int merge_sp_adjust_with_store = 0;\n \n   save_fregs = 0;\n   local_fsize =  size + (size || frame_pointer_needed ? 8 : 0);\n@@ -1536,7 +1537,13 @@ output_function_prologue (file, size)\n     else\n       /* Used to be abort ();  */\n       {\n-\tif (VAL_14_BITS_P (actual_fsize))\n+\tif (VAL_14_BITS_P (-actual_fsize) \n+\t    && local_fsize == 0\n+\t    && ! frame_pointer_needed\n+\t    && ! flag_pic\n+\t    && ! profile_flag)\n+\t  merge_sp_adjust_with_store = 1;\n+\telse if (VAL_14_BITS_P (actual_fsize))\n \t  fprintf (file, \"\\tldo %d(30),30\\n\", actual_fsize);\n \telse\n \t  fprintf (file, \"\\taddil L'%d,30\\n\\tldo R'%d(1),30\\n\",\n@@ -1613,12 +1620,32 @@ output_function_prologue (file, size)\n       for (i = 18, offset = local_fsize - actual_fsize; i >= 5; i--)\n       \tif (regs_ever_live[i] && ! call_used_regs[i])\n \t  {\n-\t    print_stw (file, i, offset, 30);  offset += 4;\n+\t    /* If merge_sp_adjust_with_store is nonzero, then we can \n+\t       optimize the first GR save.  */\n+\t    if (merge_sp_adjust_with_store == 1)\n+\t      {\n+\t\tmerge_sp_adjust_with_store = 0;\n+    \t\tfprintf (file, \"\\tstwm %d,%d(0,%d)\\n\", i, -offset, 30);\n+\t      }\n+\t    else\n+\t      print_stw (file, i, offset, 30);  offset += 4;\n \t  }\n       if (regs_ever_live[3] && ! call_used_regs[3])\n \t{\n-\t  print_stw (file, 3, offset, 30);  offset += 4;\n+\t    /* If merge_sp_adjust_with_store is nonzero, then we can \n+\t       optimize the first GR save.  */\n+\t  if (merge_sp_adjust_with_store == 1)\n+\t    {\n+\t      merge_sp_adjust_with_store = 0;\n+    \t      fprintf (file, \"\\tstwm %d,%d(0,%d)\\n\", 3, -offset, 30);\n+\t    }\n+\t  else\n+\t    print_stw (file, 3, offset, 30);  offset += 4;\n \t}\n+      /* If we wanted to merge the SP adjustment with a GR save, but we never\n+\t did any GR saves, then just output the adjustment here.  */\n+      if (merge_sp_adjust_with_store == 1)\n+\tfprintf (file, \"\\tldo %d(30),30\\n\", actual_fsize);\n     }\n       \n   /* Align pointer properly (doubleword boundary).  */\n@@ -1670,6 +1697,17 @@ output_function_epilogue (file, size)\n   extern char call_used_regs[];\n   extern int frame_pointer_needed;\n   int  i, offset;\n+  int merge_sp_adjust_with_load = 0;\n+\n+  /* In the common cases restore RP early to avoid load/use interlock when\n+     RP gets used in the bv instruction.  */\n+  if (frame_pointer_needed\n+      && (regs_ever_live [2] || profile_flag))\n+    fprintf (file, \"\\tldw -20(%%r4),%%r2\\n\");\n+  else if (actual_fsize\n+\t   && VAL_14_BITS_P (actual_fsize + 20)\n+\t   && (regs_ever_live [2] || profile_flag))\n+    fprintf(file,\"\\tldw %d(30),2\\n\", - (actual_fsize + 20));\n \n   if (frame_pointer_needed)\n     {\n@@ -1688,11 +1726,29 @@ output_function_epilogue (file, size)\n       for (i = 18, offset = local_fsize - actual_fsize; i >= 5; i--)\n       \tif (regs_ever_live[i] && ! call_used_regs[i])\n \t  {\n-\t    print_ldw (file, i, offset, 30);  offset += 4;\n+\t    /* Only for first load.  And not if profiling.  \n+\t       merge_sp_adjust_with_load holds the register load with\n+\t       which we will merge the sp adjustment with.*/\n+\t    if (VAL_14_BITS_P (actual_fsize + 20)\n+\t\t&& local_fsize == 0\n+\t\t&& ! profile_flag \n+\t\t&& ! merge_sp_adjust_with_load)\n+\t      merge_sp_adjust_with_load = i;\n+\t    else \n+\t      print_ldw (file, i, offset, 30);  offset += 4;\n \t  }\n       if (regs_ever_live[3] && ! call_used_regs[3])\n \t{\n-\t  print_ldw (file, 3, offset, 30);  offset += 4;\n+\t  /* Only for first load.  And not if profiling.  \n+\t     merge_sp_adjust_with_load holds the register load with\n+\t     which we will merge the sp adjustment with.*/\n+\t  if (VAL_14_BITS_P (actual_fsize + 20)\n+\t      && local_fsize == 0\n+\t      && ! profile_flag\n+\t      && ! merge_sp_adjust_with_load)\n+\t    merge_sp_adjust_with_load = 3;\n+\t  else\n+\t    print_ldw (file, 3, offset, 30);  offset += 4;\n \t}\n     }\n       \n@@ -1736,22 +1792,31 @@ output_function_epilogue (file, size)\n \t}\n     }\n   /* Reset stack pointer (and possibly frame pointer).  The stack */\n-  /* pointer is initially set to fp + 64 to avoid a race condition. */\n+  /* pointer is initially set to fp + 64 to avoid a race condition. \n+     ??? What race condition?!?  */\n   if (frame_pointer_needed)\n     {\n+      /* RP has already been restored in this case.  */\n       fprintf (file, \"\\tldo 64(%%r4),%%r30\\n\");\n-      if (regs_ever_live[2] || profile_flag)\n-\tfprintf (file, \"\\tldw -84(%%r30),%%r2\\n\");\n       fprintf (file, \"\\tbv 0(%%r2)\\n\\tldwm -64(%%r30),4\\n\");\n     }\n   else if (actual_fsize)\n     {\n       if (regs_ever_live[2] || profile_flag)\n           \n \t{\n+\t  /* In this case RP has already been restored! */\n \t  if (VAL_14_BITS_P (actual_fsize + 20))\n-\t    fprintf (file, \"\\tldw %d(30),2\\n\\tbv 0(2)\\n\\tldo %d(30),30\\n\",\n-\t\t     -(actual_fsize + 20), -actual_fsize);\n+\t    {\n+\t      /* Optimize load and sp adjustment.  */\n+\t      if (merge_sp_adjust_with_load)\n+\t\tfprintf (file, \"\\tbv 0(2)\\n\\tldwm %d(30),%d\\n\",\n+\t\t\t -actual_fsize, merge_sp_adjust_with_load);\n+\t      else\n+\t\tfprintf (file, \"\\tbv 0(2)\\n\\tldo %d(30),30\\n\", -actual_fsize);\n+\t    }\n+\t  /* Large frame.  Uncommon and not worth extra hair to avoid\n+\t     load/use delay for RP.  */\n \t  else\n \t    fprintf (file,\n \t\t     \"\\taddil L'%d,30\\n\\tldw %d(1),2\\n\\tbv 0(2)\\n\\\n@@ -1760,6 +1825,10 @@ output_function_epilogue (file, size)\n \t\t     - (actual_fsize + 20 + ((-actual_fsize) & ~0x7ff)),\n \t\t     - actual_fsize);\n \t}\n+      /* Merge load with SP adjustment.  */\n+      else if (merge_sp_adjust_with_load)\n+\tfprintf (file, \"\\tbv 0(2)\\n\\tldwm %d(0,30),%d\\n\", \n+\t\t - actual_fsize, merge_sp_adjust_with_load);\n       else if (VAL_14_BITS_P (actual_fsize))\n \tfprintf (file, \"\\tbv 0(2)\\n\\tldo %d(30),30\\n\", - actual_fsize);\n       else"}]}