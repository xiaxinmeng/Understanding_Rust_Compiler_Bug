{"sha": "ee2f721c2f7ac5574456833447a492ed1b24b5c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUyZjcyMWMyZjdhYzU1NzQ0NTY4MzM0NDdhNDkyZWQxYjI0YjVjMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-04-25T22:43:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-04-25T22:43:15Z"}, "message": "PR libstdc++/90239 use uses_allocator_construction_args in <scoped_allocator>\n\n\tPR libstdc++/90239\n\t* doc/xml/manual/status_cxx2020.xml: Amend P0591R4 status.\n\t* include/std/scoped_allocator [__cplusplus > 201703L]\n\t(scoped_allocator_adaptor::construct): Define in terms of\n\tuses_allocator_construction_args, as per P0591R4.\n\t* testsuite/20_util/scoped_allocator/construct_pair_c++2a.cc: New test.\n\t* testsuite/util/testsuite_allocator.h: Remove name of unused\n\tparameter.\n\nFrom-SVN: r270588", "tree": {"sha": "eb17336dee84367488a7f8164d8d65c3513cfb96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb17336dee84367488a7f8164d8d65c3513cfb96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee2f721c2f7ac5574456833447a492ed1b24b5c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee2f721c2f7ac5574456833447a492ed1b24b5c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee2f721c2f7ac5574456833447a492ed1b24b5c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee2f721c2f7ac5574456833447a492ed1b24b5c2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6bf4d8a773cde07e751542f2911307d78b717fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6bf4d8a773cde07e751542f2911307d78b717fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6bf4d8a773cde07e751542f2911307d78b717fd"}], "stats": {"total": 135, "additions": 133, "deletions": 2}, "files": [{"sha": "f15125ba5a9c748c9a1b4543ac24c573af001748", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2f721c2f7ac5574456833447a492ed1b24b5c2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2f721c2f7ac5574456833447a492ed1b24b5c2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ee2f721c2f7ac5574456833447a492ed1b24b5c2", "patch": "@@ -1,3 +1,14 @@\n+2019-04-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/90239\n+\t* doc/xml/manual/status_cxx2020.xml: Amend P0591R4 status.\n+\t* include/std/scoped_allocator [__cplusplus > 201703L]\n+\t(scoped_allocator_adaptor::construct): Define in terms of\n+\tuses_allocator_construction_args, as per P0591R4.\n+\t* testsuite/20_util/scoped_allocator/construct_pair_c++2a.cc: New test.\n+\t* testsuite/util/testsuite_allocator.h: Remove name of unused\n+\tparameter.\n+\n 2019-04-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/status_cxx2017.xml: Document P0024R2 status."}, {"sha": "a075103ea4ad7b3cbd81c1ea300d8b8bf769f445", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2020.xml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2f721c2f7ac5574456833447a492ed1b24b5c2/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2020.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2f721c2f7ac5574456833447a492ed1b24b5c2/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2020.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2020.xml?ref=ee2f721c2f7ac5574456833447a492ed1b24b5c2", "patch": "@@ -674,7 +674,9 @@ Feature-testing recommendations for C++</link>.\n \t</link>\n       </entry>\n       <entry align=\"center\"> 9.1 </entry>\n-      <entry />\n+      <entry>\n+        <code>std::scoped_allocator_adaptor</code> changes missing in 9.1.0\n+      </entry>\n     </row>\n \n     <row>"}, {"sha": "2c7ad8e94d759c4dd085884e5363052bd527e917", "filename": "libstdc++-v3/include/std/scoped_allocator", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2f721c2f7ac5574456833447a492ed1b24b5c2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2f721c2f7ac5574456833447a492ed1b24b5c2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator?ref=ee2f721c2f7ac5574456833447a492ed1b24b5c2", "patch": "@@ -35,6 +35,7 @@\n # include <bits/c++0x_warning.h>\n #else\n \n+#include <memory>\n #include <utility>\n #include <tuple>\n #include <bits/alloc_traits.h>\n@@ -187,6 +188,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tusing __outermost_alloc_traits\n \t  = allocator_traits<typename __outermost_type<_Alloc>::type>;\n \n+#if __cplusplus <= 201703\n       template<typename _Tp, typename... _Args>\n         void\n         _M_construct(__uses_alloc0, _Tp* __p, _Args&&... __args)\n@@ -218,6 +220,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t       std::forward<_Args>(__args)...,\n \t\t\t       inner_allocator());\n         }\n+#endif // C++17\n \n       template<typename _Alloc>\n         static _Alloc\n@@ -355,6 +358,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       size_type max_size() const\n       { return __traits::max_size(outer_allocator()); }\n \n+#if __cplusplus <= 201703\n       template<typename _Tp, typename... _Args>\n \ttypename __not_pair<_Tp>::type\n \tconstruct(_Tp* __p, _Args&&... __args)\n@@ -417,6 +421,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t    std::forward_as_tuple(std::forward<_Up>(__x.first)),\n \t\t    std::forward_as_tuple(std::forward<_Vp>(__x.second)));\n \t}\n+#else // C++2a\n+      template<typename _Tp, typename... _Args>\n+\t__attribute__((__nonnull__))\n+\tvoid\n+\tconstruct(_Tp* __p, _Args&&... __args)\n+\t{\n+\t  typedef __outermost_alloc_traits<scoped_allocator_adaptor> _O_traits;\n+\t  std::apply([__p, this](auto&&... __newargs) {\n+\t      _O_traits::construct(__outermost(*this), __p,\n+\t\t  std::forward<decltype(__newargs)>(__newargs)...);\n+\t  },\n+\t  uses_allocator_construction_args<_Tp>(inner_allocator(),\n+\t    std::forward<_Args>(__args)...));\n+\t}\n+#endif // C++2a\n \n       template<typename _Tp>\n         void destroy(_Tp* __p)\n@@ -439,6 +458,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                  const scoped_allocator_adaptor<_OutA2, _InA...>& __b) noexcept;\n \n     private:\n+#if __cplusplus <= 201703L\n       template<typename _Ind, typename... _Args>\n \ttuple<_Args&&...>\n \t_M_construct_p(__uses_alloc0, _Ind, tuple<_Args...>& __t)\n@@ -461,6 +481,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  return { std::get<_Ind>(std::move(__t))..., inner_allocator() };\n \t}\n+#endif // C++17\n     };\n \n   template <typename _OutA1, typename _OutA2, typename... _InA>"}, {"sha": "1630f2a4d09887da05a73eaebd7a9a4035143a2b", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/construct_pair_c++2a.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2f721c2f7ac5574456833447a492ed1b24b5c2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Fconstruct_pair_c%2B%2B2a.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2f721c2f7ac5574456833447a492ed1b24b5c2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Fconstruct_pair_c%2B%2B2a.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Fconstruct_pair_c%2B%2B2a.cc?ref=ee2f721c2f7ac5574456833447a492ed1b24b5c2", "patch": "@@ -0,0 +1,97 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <scoped_allocator>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+struct X\n+{\n+  using allocator_type = __gnu_test::uneq_allocator<int>;\n+\n+  X(int personality) : a(personality) { }\n+  X(std::allocator_arg_t, allocator_type a) : a(a) { }\n+  X(std::allocator_arg_t, allocator_type a, const X&) : a(a) { }\n+\n+  allocator_type a;\n+};\n+\n+void\n+test01()\n+{\n+  using value_type = std::pair<std::pair<X, int>, std::pair<int, X>>;\n+  using scoped_alloc\n+    = std::scoped_allocator_adaptor<__gnu_test::uneq_allocator<value_type>>;\n+\n+  const scoped_alloc a(10);\n+  std::vector<value_type, scoped_alloc> v(a);\n+  VERIFY( v.get_allocator().get_personality() == a.get_personality() );\n+\n+  value_type val( { X(1), 2 }, { 3, X(4) } );\n+  v.push_back(val);\n+  X& x1 = v.back().first.first;\n+  VERIFY( x1.a.get_personality() != val.first.first.a.get_personality() );\n+  VERIFY( x1.a.get_personality() == a.get_personality() );\n+\n+  X& x2 = v.back().second.second;\n+  VERIFY( x2.a.get_personality() != val.second.second.a.get_personality() );\n+  VERIFY( x2.a.get_personality() == a.get_personality() );\n+\n+  // Check other members of the pairs are correctly initialized too:\n+  VERIFY( v.back().first.second == val.first.second );\n+  VERIFY( v.back().second.first == val.second.first );\n+}\n+\n+void\n+test02()\n+{\n+  using value_type = std::pair<std::pair<X, int>, std::pair<int, X>>;\n+  using scoped_alloc\n+    = std::scoped_allocator_adaptor<__gnu_test::uneq_allocator<value_type>,\n+\t\t\t\t    X::allocator_type>;\n+\n+  const scoped_alloc a(10, 20);\n+  std::vector<value_type, scoped_alloc> v(a);\n+  VERIFY( v.get_allocator().get_personality() == a.get_personality() );\n+\n+  value_type val( { X(1), 2 }, { 3, X(4) } );\n+  v.push_back(val);\n+  X& x1 = v.back().first.first;\n+  VERIFY( x1.a.get_personality() != val.first.first.a.get_personality() );\n+  VERIFY( x1.a.get_personality() != a.get_personality() );\n+  VERIFY( x1.a.get_personality() == a.inner_allocator().get_personality() );\n+\n+  X& x2 = v.back().second.second;\n+  VERIFY( x2.a.get_personality() != val.second.second.a.get_personality() );\n+  VERIFY( x2.a.get_personality() != a.get_personality() );\n+  VERIFY( x2.a.get_personality() == a.inner_allocator().get_personality() );\n+\n+  // Check other members of the pairs are correctly initialized too:\n+  VERIFY( v.back().first.second == val.first.second );\n+  VERIFY( v.back().second.first == val.second.first );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "0392421ca041ad6d4bed122f2f0bcaf7e049ed77", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2f721c2f7ac5574456833447a492ed1b24b5c2/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2f721c2f7ac5574456833447a492ed1b24b5c2/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=ee2f721c2f7ac5574456833447a492ed1b24b5c2", "patch": "@@ -334,7 +334,7 @@ namespace __gnu_test\n       int get_personality() const { return personality; }\n \n       pointer\n-      allocate(size_type n, const void* hint = 0)\n+      allocate(size_type n, const void* = 0)\n       {\n \tpointer p = AllocTraits::allocate(*this, n);\n "}]}