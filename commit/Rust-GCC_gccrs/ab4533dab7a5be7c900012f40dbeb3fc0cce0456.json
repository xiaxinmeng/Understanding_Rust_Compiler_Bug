{"sha": "ab4533dab7a5be7c900012f40dbeb3fc0cce0456", "node_id": "C_kwDOANBUbNoAKGFiNDUzM2RhYjdhNWJlN2M5MDAwMTJmNDBkYmViM2ZjMGNjZTA0NTY", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-03T13:16:02Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-03T14:20:55Z"}, "message": "macros: Match repetition separator properly", "tree": {"sha": "63362d5c7259b8f0bae058588d46023872cee80d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63362d5c7259b8f0bae058588d46023872cee80d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab4533dab7a5be7c900012f40dbeb3fc0cce0456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab4533dab7a5be7c900012f40dbeb3fc0cce0456", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab4533dab7a5be7c900012f40dbeb3fc0cce0456", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab4533dab7a5be7c900012f40dbeb3fc0cce0456/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25a33b0739d549c4c2937bb7035a769c0170ba65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25a33b0739d549c4c2937bb7035a769c0170ba65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25a33b0739d549c4c2937bb7035a769c0170ba65"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "91107ff7dfdf1cb498e7c6fe0134004daf1a16de", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4533dab7a5be7c900012f40dbeb3fc0cce0456/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4533dab7a5be7c900012f40dbeb3fc0cce0456/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=ab4533dab7a5be7c900012f40dbeb3fc0cce0456", "patch": "@@ -207,6 +207,7 @@ class MacroMatchRepetition : public MacroMatch\n   }\n \n   MacroRepOp get_op () const { return op; }\n+  const std::unique_ptr<MacroRepSep> &get_sep () const { return sep; }\n   std::vector<std::unique_ptr<MacroMatch> > &get_matches () { return matches; }\n \n protected:"}, {"sha": "14d68a1e14f2d35998c4ae9042ef062545cb9294", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4533dab7a5be7c900012f40dbeb3fc0cce0456/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4533dab7a5be7c900012f40dbeb3fc0cce0456/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=ab4533dab7a5be7c900012f40dbeb3fc0cce0456", "patch": "@@ -3615,12 +3615,13 @@ MacroExpander::match_token (Parser<MacroInvocLexer> &parser, AST::Token &token)\n }\n \n bool\n-MacroExpander::match_n_matches (\n-  Parser<MacroInvocLexer> &parser,\n-  std::vector<std::unique_ptr<AST::MacroMatch>> &matches, size_t &match_amount,\n-  size_t lo_bound, size_t hi_bound)\n+MacroExpander::match_n_matches (Parser<MacroInvocLexer> &parser,\n+\t\t\t\tAST::MacroMatchRepetition &rep,\n+\t\t\t\tsize_t &match_amount, size_t lo_bound,\n+\t\t\t\tsize_t hi_bound)\n {\n   match_amount = 0;\n+  auto &matches = rep.get_matches ();\n \n   const MacroInvocLexer &source = parser.get_token_source ();\n   while (true)\n@@ -3631,6 +3632,12 @@ MacroExpander::match_n_matches (\n       if (t_id == RIGHT_PAREN || t_id == RIGHT_SQUARE || t_id == RIGHT_CURLY)\n \tbreak;\n \n+      // Skip parsing a separator on the first match, otherwise consume it.\n+      // If it isn't present, this is an error\n+      if (rep.has_sep () && match_amount > 0)\n+\tif (!match_token (parser, *rep.get_sep ()))\n+\t  break;\n+\n       bool valid_current_match = false;\n       for (auto &match : matches)\n \t{\n@@ -3705,17 +3712,17 @@ MacroExpander::match_repetition (Parser<MacroInvocLexer> &parser,\n     case AST::MacroMatchRepetition::MacroRepOp::ANY:\n       lo_str = \"0\";\n       hi_str = \"+inf\";\n-      res = match_n_matches (parser, rep.get_matches (), match_amount);\n+      res = match_n_matches (parser, rep, match_amount);\n       break;\n     case AST::MacroMatchRepetition::MacroRepOp::ONE_OR_MORE:\n       lo_str = \"1\";\n       hi_str = \"+inf\";\n-      res = match_n_matches (parser, rep.get_matches (), match_amount, 1);\n+      res = match_n_matches (parser, rep, match_amount, 1);\n       break;\n     case AST::MacroMatchRepetition::MacroRepOp::ZERO_OR_ONE:\n       lo_str = \"0\";\n       hi_str = \"1\";\n-      res = match_n_matches (parser, rep.get_matches (), match_amount, 0, 1);\n+      res = match_n_matches (parser, rep, match_amount, 0, 1);\n       break;\n     default:\n       gcc_unreachable ();"}, {"sha": "617d16b40fa295c3cbd49fc636857c30e9e22c04", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4533dab7a5be7c900012f40dbeb3fc0cce0456/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4533dab7a5be7c900012f40dbeb3fc0cce0456/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=ab4533dab7a5be7c900012f40dbeb3fc0cce0456", "patch": "@@ -192,7 +192,7 @@ struct MacroExpander\n    * Match any amount of matches\n    *\n    * @param parser Parser to use for matching\n-   * @param matches All consecutive matches to identify\n+   * @param rep Repetition to try and match\n    * @param match_amount Reference in which to store the ammount of succesful\n    * and valid matches\n    *\n@@ -209,9 +209,8 @@ struct MacroExpander\n    * otherwise\n    */\n   bool match_n_matches (Parser<MacroInvocLexer> &parser,\n-\t\t\tstd::vector<std::unique_ptr<AST::MacroMatch>> &matches,\n-\t\t\tsize_t &match_amount, size_t lo_bound = 0,\n-\t\t\tsize_t hi_bound = 0);\n+\t\t\tAST::MacroMatchRepetition &rep, size_t &match_amount,\n+\t\t\tsize_t lo_bound = 0, size_t hi_bound = 0);\n \n   void push_context (ContextType t) { context.push_back (t); }\n "}]}