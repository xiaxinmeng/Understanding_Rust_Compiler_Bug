{"sha": "3f8b0bba0359419fd453f31519420d6d69fdf710", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y4YjBiYmEwMzU5NDE5ZmQ0NTNmMzE1MTk0MjBkNmQ2OWZkZjcxMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-11T18:03:23Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-11T18:03:23Z"}, "message": "aarch64: Add support for unpacked SVE ADR\n\nThis patch extends the ADR patterns to handle unpacked vectors.\nThey would work with both elements and containers, but since\nthe instructions only support .s and .d, we get more coverage\nby using containers.\n\ngcc/\n\t* config/aarch64/iterators.md (SVE_24I): New iterator.\n\t* config/aarch64/aarch64-sve.md (*aarch64_adr<mode>_shift): Extend from\n\tSVE_FULL_SDI to SVE_24I.  Use containers rather than elements.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/adr_6.c: New test.", "tree": {"sha": "3e12acd8f3b740277aa38428384442a7a8062ffe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e12acd8f3b740277aa38428384442a7a8062ffe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f8b0bba0359419fd453f31519420d6d69fdf710", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8b0bba0359419fd453f31519420d6d69fdf710", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f8b0bba0359419fd453f31519420d6d69fdf710", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8b0bba0359419fd453f31519420d6d69fdf710/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab76e3db6b8ca92cdd76870e0e9f217abcc62131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab76e3db6b8ca92cdd76870e0e9f217abcc62131", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab76e3db6b8ca92cdd76870e0e9f217abcc62131"}], "stats": {"total": 63, "additions": 55, "deletions": 8}, "files": [{"sha": "27b7fd0fccde1715f0cfde16cb574432e18289fa", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8b0bba0359419fd453f31519420d6d69fdf710/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8b0bba0359419fd453f31519420d6d69fdf710/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=3f8b0bba0359419fd453f31519420d6d69fdf710", "patch": "@@ -3901,17 +3901,17 @@\n )\n \n (define_insn_and_rewrite \"*aarch64_adr<mode>_shift\"\n-  [(set (match_operand:SVE_FULL_SDI 0 \"register_operand\" \"=w\")\n-\t(plus:SVE_FULL_SDI\n-\t  (unspec:SVE_FULL_SDI\n+  [(set (match_operand:SVE_24I 0 \"register_operand\" \"=w\")\n+\t(plus:SVE_24I\n+\t  (unspec:SVE_24I\n \t    [(match_operand 4)\n-\t     (ashift:SVE_FULL_SDI\n-\t       (match_operand:SVE_FULL_SDI 2 \"register_operand\" \"w\")\n-\t       (match_operand:SVE_FULL_SDI 3 \"const_1_to_3_operand\"))]\n+\t     (ashift:SVE_24I\n+\t       (match_operand:SVE_24I 2 \"register_operand\" \"w\")\n+\t       (match_operand:SVE_24I 3 \"const_1_to_3_operand\"))]\n \t    UNSPEC_PRED_X)\n-\t  (match_operand:SVE_FULL_SDI 1 \"register_operand\" \"w\")))]\n+\t  (match_operand:SVE_24I 1 \"register_operand\" \"w\")))]\n   \"TARGET_SVE\"\n-  \"adr\\t%0.<Vetype>, [%1.<Vetype>, %2.<Vetype>, lsl %3]\"\n+  \"adr\\t%0.<Vctype>, [%1.<Vctype>, %2.<Vctype>, lsl %3]\"\n   \"&& !CONSTANT_P (operands[4])\"\n   {\n     operands[4] = CONSTM1_RTX (<VPRED>mode);"}, {"sha": "54a99d441b831b983f1c15f8387eba314f675d83", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8b0bba0359419fd453f31519420d6d69fdf710/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8b0bba0359419fd453f31519420d6d69fdf710/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=3f8b0bba0359419fd453f31519420d6d69fdf710", "patch": "@@ -422,6 +422,10 @@\n \t\t\t      VNx2DI VNx2DF\n \t\t\t      VNx4QI VNx4HI VNx4HF VNx4BF VNx4SI VNx4SF])\n \n+;; SVE integer modes with 2 or 4 elements.\n+(define_mode_iterator SVE_24I [VNx2QI VNx2HI VNx2SI VNx2DI\n+\t\t\t       VNx4QI VNx4HI VNx4SI])\n+\n ;; SVE modes with 2 elements.\n (define_mode_iterator SVE_2 [VNx2QI VNx2HI VNx2HF VNx2BF\n \t\t\t     VNx2SI VNx2SF VNx2DI VNx2DF])"}, {"sha": "1f927493a8fd639ece714ac71f49299c2b620e06", "filename": "gcc/testsuite/gcc.target/aarch64/sve/adr_6.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8b0bba0359419fd453f31519420d6d69fdf710/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8b0bba0359419fd453f31519420d6d69fdf710/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_6.c?ref=3f8b0bba0359419fd453f31519420d6d69fdf710", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP_IMM(TYPE, AMT) \\\n+  TYPE test##_##TYPE##_##AMT (TYPE a, TYPE b) { return a + b * AMT; }\n+\n+#define TEST_OP(TYPE) \\\n+  TEST_OP_IMM (TYPE, 2) \\\n+  TEST_OP_IMM (TYPE, 4) \\\n+  TEST_OP_IMM (TYPE, 8)\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (int8_t, 32)\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (int8_t, 64)\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (int16_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+/* These two can't use ADR.  */\n+TEST_TYPE (int8_t, 128)\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (int16_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (int32_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b,} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b,} 6 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadr\\tz[0-9]+\\.s, \\[z[0-9]+\\.s, z[0-9]+\\.s, lsl #?1\\]\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tadr\\tz[0-9]+\\.s, \\[z[0-9]+\\.s, z[0-9]+\\.s, lsl #?2\\]\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tadr\\tz[0-9]+\\.s, \\[z[0-9]+\\.s, z[0-9]+\\.s, lsl #?3\\]\\n} 4 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadr\\tz[0-9]+\\.d, \\[z[0-9]+\\.d, z[0-9]+\\.d, lsl #?1\\]\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tadr\\tz[0-9]+\\.d, \\[z[0-9]+\\.d, z[0-9]+\\.d, lsl #?2\\]\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tadr\\tz[0-9]+\\.d, \\[z[0-9]+\\.d, z[0-9]+\\.d, lsl #?3\\]\\n} 6 } } */"}]}