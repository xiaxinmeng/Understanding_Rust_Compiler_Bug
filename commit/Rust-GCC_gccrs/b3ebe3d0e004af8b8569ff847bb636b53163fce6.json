{"sha": "b3ebe3d0e004af8b8569ff847bb636b53163fce6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNlYmUzZDBlMDA0YWY4Yjg1NjlmZjg0N2JiNjM2YjUzMTYzZmNlNg==", "commit": {"author": {"name": "Tim Shen", "email": "timshen91@gmail.com", "date": "2013-07-09T13:41:10Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2013-07-09T13:41:10Z"}, "message": "Implement class regex_traits.\n\n2013-07-09  Tim Shen  <timshen91@gmail.com>\n\n\tImplement class regex_traits.\n\t* include/bits/regex.h: Implement lookup_classname and\n\tlookup_collatename; modify isctype; partially implement\n\ttransform_primary.\n\t* testsuite/28_regex/traits/char/isctype.cc: Add more test cases.\n\t* testsuite/28_regex/traits/char/lookup_classname.cc: Likewise.\n\t* testsuite/28_regex/traits/char/lookup_collatename.cc: Likewise.\n\t* testsuite/28_regex/traits/char/transform_primary.cc: Likewise.\n\t* testsuite/28_regex/traits/wchar_t/isctype.cc: New.\n\t* testsuite/28_regex/traits/wchar_t/lookup_classname.cc: New.\n\t* testsuite/28_regex/traits/wchar_t/lookup_collatename.cc: New.\n\t* testsuite/28_regex/traits/wchar_t/transform_primary.cc: New.\n\nFrom-SVN: r200818", "tree": {"sha": "9dc05c3c3c00221efb59b8f81207c3de62dfb623", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dc05c3c3c00221efb59b8f81207c3de62dfb623"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3ebe3d0e004af8b8569ff847bb636b53163fce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3ebe3d0e004af8b8569ff847bb636b53163fce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3ebe3d0e004af8b8569ff847bb636b53163fce6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3ebe3d0e004af8b8569ff847bb636b53163fce6/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "309f50b9203a1f6fcf7193061a84ae42fb6f6817", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/309f50b9203a1f6fcf7193061a84ae42fb6f6817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/309f50b9203a1f6fcf7193061a84ae42fb6f6817"}], "stats": {"total": 641, "additions": 597, "deletions": 44}, "files": [{"sha": "48d3a4755f9b2b69c2ba5bc595cca90df4c0b721", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b3ebe3d0e004af8b8569ff847bb636b53163fce6", "patch": "@@ -1,3 +1,18 @@\n+2013-07-09  Tim Shen  <timshen91@gmail.com>\n+\n+\tImplement class regex_traits.\n+\t* include/bits/regex.h: Implement lookup_classname and\n+\tlookup_collatename; modify isctype; partially implement\n+\ttransform_primary.\n+\t* testsuite/28_regex/traits/char/isctype.cc: Add more test cases.\n+\t* testsuite/28_regex/traits/char/lookup_classname.cc: Likewise.\n+\t* testsuite/28_regex/traits/char/lookup_collatename.cc: Likewise.\n+\t* testsuite/28_regex/traits/char/transform_primary.cc: Likewise.\n+\t* testsuite/28_regex/traits/wchar_t/isctype.cc: New.\n+\t* testsuite/28_regex/traits/wchar_t/lookup_classname.cc: New.\n+\t* testsuite/28_regex/traits/wchar_t/lookup_collatename.cc: New.\n+\t* testsuite/28_regex/traits/wchar_t/transform_primary.cc: New.\n+\n 2013-07-07  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \t* doc/xml/manual/status_cxx2014.xml: Add links for papers."}, {"sha": "6b6484679adcfd3707a4231b911f14bec993629d", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 332, "deletions": 34, "changes": 366, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=b3ebe3d0e004af8b8569ff847bb636b53163fce6", "patch": "@@ -54,7 +54,74 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Ch_type                     \tchar_type;\n       typedef std::basic_string<char_type> \tstring_type;\n       typedef std::locale                  \tlocale_type;\n-      typedef std::ctype_base::mask        \tchar_class_type;\n+    private:\n+      struct _RegexMask\n+        {\n+          typedef typename std::ctype<char_type>::mask _BaseType;\n+          _BaseType _M_base;\n+          unsigned char _M_extended;\n+          static constexpr unsigned char _S_under = 1 << 0;\n+          // _S_blank should be removed in the future, when locale's complete.\n+          static constexpr unsigned char _S_blank = 1 << 1;\n+          static constexpr unsigned char _S_valid_mask = 0x3;\n+\n+          constexpr _RegexMask(_BaseType __base = 0,\n+                               unsigned char __extended = 0)\n+          : _M_base(__base), _M_extended(__extended)\n+          { }\n+\n+          constexpr _RegexMask\n+          operator&(_RegexMask __other) const\n+          {\n+            return _RegexMask(_M_base & __other._M_base,\n+                              _M_extended & __other._M_extended);\n+          }\n+\n+          constexpr _RegexMask\n+          operator|(_RegexMask __other) const\n+          {\n+            return _RegexMask(_M_base | __other._M_base,\n+                              _M_extended | __other._M_extended);\n+          }\n+\n+          constexpr _RegexMask\n+          operator^(_RegexMask __other) const\n+          {\n+            return _RegexMask(_M_base ^ __other._M_base,\n+                              _M_extended ^ __other._M_extended);\n+          }\n+\n+          constexpr _RegexMask\n+          operator~() const\n+          { return _RegexMask(~_M_base, ~_M_extended); }\n+\n+          constexpr _RegexMask&\n+          operator&=(_RegexMask __other)\n+          { return *this = (*this) & __other; }\n+\n+          constexpr _RegexMask&\n+          operator|=(_RegexMask __other)\n+          { return *this = (*this) | __other; }\n+\n+          constexpr _RegexMask&\n+          operator^=(_RegexMask __other)\n+          { return *this = (*this) ^ __other; }\n+\n+          constexpr bool\n+          operator==(_RegexMask __other) const\n+          {\n+            return (_M_extended & _S_valid_mask)\n+                   == (__other._M_extended & _S_valid_mask)\n+                     && _M_base == __other._M_base;\n+          }\n+\n+          constexpr bool\n+          operator!=(_RegexMask __other) const\n+          { return !((*this) == __other); }\n+\n+        };\n+    public:\n+      typedef _RegexMask char_class_type;\n \n     public:\n       /**\n@@ -151,7 +218,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Fwd_iter>\n         string_type\n         transform_primary(_Fwd_iter __first, _Fwd_iter __last) const\n-        { return string_type(); }\n+        {\n+          __try\n+            {\n+              typedef std::ctype<char_type> __ctype_type;\n+              const __ctype_type& __fctyp(use_facet<__ctype_type>(_M_locale));\n+              std::vector<char_type> __v(__first, __last);\n+              // FIXME : this is not entirely correct\n+              __fctyp.tolower(&*__v.begin(), &*__v.end());\n+              return this->transform(&*__v.begin(), &*__v.end());\n+            }\n+          __catch (...)\n+            {\n+            }\n+          return string_type();\n+        }\n \n       /**\n        * @brief Gets a collation element by name.\n@@ -163,13 +244,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * collating element consisting of the character sequence designated by\n        * the iterator range [__first, __last). Returns an empty string if the\n        * character sequence is not a valid collating element.\n-       *\n-       * @todo Implement this function.\n        */\n       template<typename _Fwd_iter>\n         string_type\n-        lookup_collatename(_Fwd_iter __first, _Fwd_iter __last) const\n-        { return string_type(); }\n+        lookup_collatename(_Fwd_iter __first, _Fwd_iter __last) const;\n \n       /**\n        * @brief Maps one or more characters to a named character\n@@ -207,14 +285,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * - space\n        * - upper\n        * - xdigit\n-       *\n-       * @todo Implement this function.\n        */\n       template<typename _Fwd_iter>\n         char_class_type\n         lookup_classname(_Fwd_iter __first, _Fwd_iter __last,\n-\t                 bool __icase = false) const\n-\t{ return 0; }\n+                         bool __icase = false) const;\n \n       /**\n        * @brief Determines if @p c is a member of an identified class.\n@@ -274,6 +349,245 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       locale_type _M_locale;\n     };\n \n+  template<typename _Ch_type>\n+  template<typename _Fwd_iter>\n+    typename regex_traits<_Ch_type>::string_type\n+    regex_traits<_Ch_type>::\n+    lookup_collatename(_Fwd_iter __first, _Fwd_iter __last) const\n+    {\n+      typedef std::ctype<char_type> __ctype_type;\n+      const __ctype_type& __fctyp(use_facet<__ctype_type>(_M_locale));\n+\n+      static const char* __collatenames[] =\n+        {\n+          \"NUL\",\n+          \"SOH\",\n+          \"STX\",\n+          \"ETX\",\n+          \"EOT\",\n+          \"ENQ\",\n+          \"ACK\",\n+          \"alert\",\n+          \"backspace\",\n+          \"tab\",\n+          \"newline\",\n+          \"vertical-tab\",\n+          \"form-feed\",\n+          \"carriage-return\",\n+          \"SO\",\n+          \"SI\",\n+          \"DLE\",\n+          \"DC1\",\n+          \"DC2\",\n+          \"DC3\",\n+          \"DC4\",\n+          \"NAK\",\n+          \"SYN\",\n+          \"ETB\",\n+          \"CAN\",\n+          \"EM\",\n+          \"SUB\",\n+          \"ESC\",\n+          \"IS4\",\n+          \"IS3\",\n+          \"IS2\",\n+          \"IS1\",\n+          \"space\",\n+          \"exclamation-mark\",\n+          \"quotation-mark\",\n+          \"number-sign\",\n+          \"dollar-sign\",\n+          \"percent-sign\",\n+          \"ampersand\",\n+          \"apostrophe\",\n+          \"left-parenthesis\",\n+          \"right-parenthesis\",\n+          \"asterisk\",\n+          \"plus-sign\",\n+          \"comma\",\n+          \"hyphen\",\n+          \"period\",\n+          \"slash\",\n+          \"zero\",\n+          \"one\",\n+          \"two\",\n+          \"three\",\n+          \"four\",\n+          \"five\",\n+          \"six\",\n+          \"seven\",\n+          \"eight\",\n+          \"nine\",\n+          \"colon\",\n+          \"semicolon\",\n+          \"less-than-sign\",\n+          \"equals-sign\",\n+          \"greater-than-sign\",\n+          \"question-mark\",\n+          \"commercial-at\",\n+          \"A\",\n+          \"B\",\n+          \"C\",\n+          \"D\",\n+          \"E\",\n+          \"F\",\n+          \"G\",\n+          \"H\",\n+          \"I\",\n+          \"J\",\n+          \"K\",\n+          \"L\",\n+          \"M\",\n+          \"N\",\n+          \"O\",\n+          \"P\",\n+          \"Q\",\n+          \"R\",\n+          \"S\",\n+          \"T\",\n+          \"U\",\n+          \"V\",\n+          \"W\",\n+          \"X\",\n+          \"Y\",\n+          \"Z\",\n+          \"left-square-bracket\",\n+          \"backslash\",\n+          \"right-square-bracket\",\n+          \"circumflex\",\n+          \"underscore\",\n+          \"grave-accent\",\n+          \"a\",\n+          \"b\",\n+          \"c\",\n+          \"d\",\n+          \"e\",\n+          \"f\",\n+          \"g\",\n+          \"h\",\n+          \"i\",\n+          \"j\",\n+          \"k\",\n+          \"l\",\n+          \"m\",\n+          \"n\",\n+          \"o\",\n+          \"p\",\n+          \"q\",\n+          \"r\",\n+          \"s\",\n+          \"t\",\n+          \"u\",\n+          \"v\",\n+          \"w\",\n+          \"x\",\n+          \"y\",\n+          \"z\",\n+          \"left-curly-bracket\",\n+          \"vertical-line\",\n+          \"right-curly-bracket\",\n+          \"tilde\",\n+          \"DEL\",\n+          \"\"\n+        };\n+\n+      // same as boost\n+      static const char* __digraphs[] =\n+        {\n+          \"ae\",\n+          \"Ae\",\n+          \"AE\",\n+          \"ch\",\n+          \"Ch\",\n+          \"CH\",\n+          \"ll\",\n+          \"Ll\",\n+          \"LL\",\n+          \"ss\",\n+          \"Ss\",\n+          \"SS\",\n+          \"nj\",\n+          \"Nj\",\n+          \"NJ\",\n+          \"dz\",\n+          \"Dz\",\n+          \"DZ\",\n+          \"lj\",\n+          \"Lj\",\n+          \"LJ\",\n+          \"\"\n+        };\n+\n+      std::string __s(__last - __first, '?');\n+      string_type a(__first, __last);\n+      __fctyp.narrow(__first, __last, '?', &*__s.begin());\n+\n+      for (unsigned int __i = 0; *__collatenames[__i]; __i++)\n+        if (__s == __collatenames[__i])\n+          return string_type(1, __fctyp.widen((char)__i));\n+\n+      for (unsigned int __i = 0; *__digraphs[__i]; __i++)\n+        {\n+          const char* __now = __digraphs[__i];\n+          if (__s == __now)\n+            {\n+              string_type ret(__s.size(), __fctyp.widen('?'));\n+              __fctyp.widen(__now, __now + 2/* ouch */, &*ret.begin());\n+              return ret;\n+            }\n+        }\n+      return string_type();\n+    }\n+\n+  template<typename _Ch_type>\n+  template<typename _Fwd_iter>\n+    typename regex_traits<_Ch_type>::char_class_type\n+    regex_traits<_Ch_type>::\n+    lookup_classname(_Fwd_iter __first, _Fwd_iter __last, bool __icase) const\n+    {\n+      typedef std::ctype<char_type> __ctype_type;\n+      typedef std::ctype<char> __cctype_type;\n+      typedef const pair<const char*, char_class_type> _ClassnameEntry;\n+      const __ctype_type& __fctyp(use_facet<__ctype_type>(_M_locale));\n+      const __cctype_type& __cctyp(use_facet<__cctype_type>(_M_locale));\n+\n+      static _ClassnameEntry __classnames[] =\n+      {\n+        {\"d\", ctype_base::digit},\n+        {\"w\", {ctype_base::alnum, _RegexMask::_S_under}},\n+        {\"s\", ctype_base::space},\n+        {\"alnum\", ctype_base::alnum},\n+        {\"alpha\", ctype_base::alpha},\n+        {\"blank\", {0, _RegexMask::_S_blank}},\n+        {\"cntrl\", ctype_base::cntrl},\n+        {\"digit\", ctype_base::digit},\n+        {\"graph\", ctype_base::graph},\n+        {\"lower\", ctype_base::lower},\n+        {\"print\", ctype_base::print},\n+        {\"punct\", ctype_base::punct},\n+        {\"space\", ctype_base::space},\n+        {\"upper\", ctype_base::upper},\n+        {\"xdigit\", ctype_base::xdigit},\n+      };\n+\n+      std::string __s(__last - __first, '?');\n+      __fctyp.narrow(__first, __last, '?', &__s[0]);\n+      __cctyp.tolower(&*__s.begin(), &*__s.end());\n+      for (_ClassnameEntry* __it = __classnames;\n+           __it < *(&__classnames + 1);\n+           ++__it)\n+        {\n+          if (__s == __it->first)\n+            {\n+              if (__icase\n+                  && ((__it->second & (ctype_base::lower | ctype_base::upper)) != 0))\n+                return ctype_base::alpha;\n+              return __it->second;\n+            }\n+        }\n+      return 0;\n+    }\n+\n   template<typename _Ch_type>\n     bool\n     regex_traits<_Ch_type>::\n@@ -282,30 +596,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef std::ctype<char_type> __ctype_type;\n       const __ctype_type& __fctyp(use_facet<__ctype_type>(_M_locale));\n       \n-      if (__fctyp.is(__f, __c))\n-\treturn true;\n-      \n-      // special case of underscore in [[:w:]]\n-      if (__c == __fctyp.widen('_'))\n-\t{\n-\t  const char __wb[] = \"w\";\n-\t  char_class_type __wt = this->lookup_classname(__wb,\n-\t\t\t\t\t\t\t__wb + sizeof(__wb));\n-\t  if (__f | __wt)\n-\t    return true;\n-\t}\n-    \n-      // special case of [[:space:]] in [[:blank:]]\n-      if (__fctyp.is(std::ctype_base::space, __c))\n-\t{\n-\t  const char __bb[] = \"blank\";\n-\t  char_class_type __bt = this->lookup_classname(__bb,\n-\t\t\t\t\t\t\t__bb + sizeof(__bb));\n-\t  if (__f | __bt)\n-\t    return true;\n-\t}\n-      \n-      return false;\n+      return __fctyp.is(__f._M_base, __c)\n+        // [[:w:]]\n+        || ((__f._M_extended & _RegexMask::_S_under)\n+            && __c == __fctyp.widen('_'))\n+        // [[:blank:]]\n+        || ((__f._M_extended & _RegexMask::_S_blank)\n+            && (__c == __fctyp.widen(' ')\n+                || __c == __fctyp.widen('\\t')));\n     }\n \n   template<typename _Ch_type>"}, {"sha": "5dad6e49513603a7484da41b8afa3101ee52ab52", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/isctype.cc", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fisctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fisctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fisctype.cc?ref=b3ebe3d0e004af8b8569ff847bb636b53163fce6", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { xfail *-*-* } }\n+// { dg-do run }\n // { dg-options \"-std=c++0x\" }\n \n //\n@@ -35,10 +35,28 @@ test01()\n   typedef char CharT;\n   typedef std::regex_traits<CharT> traits;\n \n-\tchar name[] = \"lower\";\n-\ttraits t;\n+  const CharT lower[]   = \"lOWer\";\n+  const CharT upper[]   = \"UPPER\";\n+  const CharT nothing[] = \"nothing\";\n+  const CharT word[]    = \"w\";\n+  const CharT blank[]   = \"blank\";\n+  const CharT digit[]   = \"digit\";\n+  traits t;\n \n-\tVERIFY( t.isctype('e',  t.lookup_classname(name, name+sizeof(name)-1)) );\n+#define range(s) s, s+sizeof(s)/sizeof(s[0])-1\n+  VERIFY( t.isctype('_', t.lookup_classname(range(word))));\n+  VERIFY( t.isctype('A', t.lookup_classname(range(word))));\n+  VERIFY(!t.isctype('~', t.lookup_classname(range(word))));\n+  VERIFY(!t.isctype('e', t.lookup_classname(range(upper))));\n+  VERIFY( t.isctype('e', t.lookup_classname(range(lower))));\n+  VERIFY(!t.isctype('e', t.lookup_classname(range(nothing))));\n+  VERIFY(!t.isctype('_', t.lookup_classname(range(digit))));\n+  VERIFY( t.isctype(' ', t.lookup_classname(range(blank))));\n+  VERIFY( t.isctype('\\t', t.lookup_classname(range(blank))));\n+  VERIFY(!t.isctype('\\n', t.lookup_classname(range(blank))));\n+  VERIFY( t.isctype('t', t.lookup_classname(range(upper), true)));\n+  VERIFY( t.isctype('T', t.lookup_classname(range(lower), true)));\n+#undef range\n }\n \n int main()"}, {"sha": "333546f7d11bba9ed98b8d21bb2b6baf46cb787e", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/lookup_classname.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flookup_classname.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flookup_classname.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flookup_classname.cc?ref=b3ebe3d0e004af8b8569ff847bb636b53163fce6", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { xfail *-*-* } }\n+// { dg-do run }\n // { dg-options \"-std=c++0x\" }\n \n //"}, {"sha": "7e0b259e0b7c8aa4ec589e42e7eb1e2105e15cbd", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/lookup_collatename.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flookup_collatename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flookup_collatename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flookup_collatename.cc?ref=b3ebe3d0e004af8b8569ff847bb636b53163fce6", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { xfail *-*-* } }\n+// { dg-do run }\n // { dg-options \"-std=c++0x\" }\n \n //"}, {"sha": "6b1f871ac441227272fafb296f90c4c61f612b5b", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/transform_primary.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Ftransform_primary.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Ftransform_primary.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Ftransform_primary.cc?ref=b3ebe3d0e004af8b8569ff847bb636b53163fce6", "patch": "@@ -1,5 +1,5 @@\n // { dg-options \"-std=c++0x\" }\n-// { dg-do run { xfail *-*-* } }\n+// { dg-do run }\n \n //\n // 2010-02-17  Stephen M. Webb <stephen.webb@bregmasoft.ca>\n@@ -42,10 +42,12 @@ test01()\n \ttraits::string_type J = \"ABC\";\n \n   VERIFY( G < H );\n-  VERIFY( t.transform_primary(G.begin(), G.end()) < t.transform_primary(H.begin(), H.end()) ); \n+  VERIFY( t.transform_primary(G.begin(), G.end())\n+          < t.transform_primary(H.begin(), H.end()) );\n \n-  VERIFY( G == H );\n-  VERIFY( t.transform_primary(G.begin(), G.end()) == t.transform_primary(J.begin(), J.end()) );\n+  VERIFY( G > J );\n+  VERIFY( t.transform_primary(G.begin(), G.end())\n+          == t.transform_primary(J.begin(), J.end()) );\n }\n \n int main()"}, {"sha": "327fc56416b0fa2b4746f0482d594094acbc6c3f", "filename": "libstdc++-v3/testsuite/28_regex/traits/wchar_t/isctype.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fisctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fisctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fisctype.cc?ref=b3ebe3d0e004af8b8569ff847bb636b53163fce6", "patch": "@@ -0,0 +1,63 @@\n+// { dg-do run }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Copyright (C) 2010-2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.3 Requirements [re.req]\n+// 28.2(4) Table 127 - Regular expression traits class requirements\n+// 28.7(11) Class template regex_traits [re.traits]\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef wchar_t CharT;\n+  typedef std::regex_traits<CharT> traits;\n+\n+  const CharT lower[]   = L\"lOWer\";\n+  const CharT upper[]   = L\"UPPER\";\n+  const CharT nothing[] = L\"nothing\";\n+  const CharT word[]    = L\"w\";\n+  const CharT blank[]   = L\"blank\";\n+  const CharT digit[]   = L\"digit\";\n+  traits t;\n+\n+#define range(s) s, s+sizeof(s)/sizeof(s[0])-1\n+  VERIFY( t.isctype(L'_', t.lookup_classname(range(word))));\n+  VERIFY( t.isctype(L'A', t.lookup_classname(range(word))));\n+  VERIFY(!t.isctype(L'~', t.lookup_classname(range(word))));\n+  VERIFY(!t.isctype(L'e', t.lookup_classname(range(upper))));\n+  VERIFY( t.isctype(L'e', t.lookup_classname(range(lower))));\n+  VERIFY(!t.isctype(L'e', t.lookup_classname(range(nothing))));\n+  VERIFY(!t.isctype(L'_', t.lookup_classname(range(digit))));\n+  VERIFY( t.isctype(L' ', t.lookup_classname(range(blank))));\n+  VERIFY( t.isctype(L'\\t', t.lookup_classname(range(blank))));\n+  VERIFY(!t.isctype(L'\\n', t.lookup_classname(range(blank))));\n+  VERIFY( t.isctype(L't', t.lookup_classname(range(upper), true)));\n+  VERIFY( t.isctype(L'T', t.lookup_classname(range(lower), true)));\n+#undef range\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b57b34c7b7486a220af897ccc0f475219c73f8d0", "filename": "libstdc++-v3/testsuite/28_regex/traits/wchar_t/lookup_classname.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Flookup_classname.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Flookup_classname.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Flookup_classname.cc?ref=b3ebe3d0e004af8b8569ff847bb636b53163fce6", "patch": "@@ -0,0 +1,53 @@\n+// { dg-do run }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Copyright (C) 2010-2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.3 Requirements [re.req]\n+// 28.2(4) Table 127 - Regular expression traits class requirements\n+// 28.7(9) Class template regex_traits [re.traits]\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef wchar_t CharT;\n+  typedef std::regex_traits<CharT> traits;\n+\n+  wchar_t n1[] = L\"lower\";\n+  wchar_t n2[] = L\"alpha\";\n+  traits t;\n+\n+#define range(s) s, s+sizeof(s)/sizeof(s[0])-1\n+  traits::char_class_type c1 = t.lookup_classname(range(n1));\n+  VERIFY( c1 != 0 );\n+\n+  traits::char_class_type c2 = t.lookup_classname(range(n1), true);\n+  traits::char_class_type c3 = t.lookup_classname(range(n2), true);\n+  VERIFY( c2 == c3 );\n+#undef range\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "197bb9b4a78ad47ba0ff158b94b072ee8544aee5", "filename": "libstdc++-v3/testsuite/28_regex/traits/wchar_t/lookup_collatename.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Flookup_collatename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Flookup_collatename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Flookup_collatename.cc?ref=b3ebe3d0e004af8b8569ff847bb636b53163fce6", "patch": "@@ -0,0 +1,49 @@\n+// { dg-do run }\n+// { dg-options \"-std=c++0x\" }\n+\n+//\n+// Copyright (C) 2010-2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.3 Requirements [re.req]\n+// 28.2 (4) Table 127 - Regular expression traits class requirements\n+// 28.7 (8) Class template regex_traits [re.traits]\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef wchar_t CharT;\n+  typedef std::regex_traits<CharT> traits;\n+\n+\twchar_t name[] = L\"ll\";\n+\ttraits t;\n+\n+\ttraits::string_type sname =\n+          t.lookup_collatename(name, name+sizeof(name)/sizeof(*name)-1);\n+\n+  VERIFY( !sname.empty() );\n+}\n+\n+int main()\n+{\n+\ttest01();\n+\treturn 0;\n+}"}, {"sha": "48277b4eae7c0ff3a397f1153252e308b0ae49fa", "filename": "libstdc++-v3/testsuite/28_regex/traits/wchar_t/transform_primary.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Ftransform_primary.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ebe3d0e004af8b8569ff847bb636b53163fce6/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Ftransform_primary.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Ftransform_primary.cc?ref=b3ebe3d0e004af8b8569ff847bb636b53163fce6", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do run }\n+\n+//\n+// Copyright (C) 2010-2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.3 Requirements [re.req]\n+// 28.2 (4) Table 127 - Regular expression traits class requirements\n+// 28.7 Class template regex_traits [re.traits]\n+\n+#include <regex>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef wchar_t CharT;\n+  typedef std::regex_traits<CharT> traits;\n+\n+\ttraits t;\n+\ttraits::string_type G = L\"abc\";\n+\ttraits::string_type H = L\"def\";\n+\ttraits::string_type J = L\"ABC\";\n+\n+  VERIFY( G < H );\n+  VERIFY( t.transform_primary(G.begin(), G.end())\n+          < t.transform_primary(H.begin(), H.end()) );\n+\n+  VERIFY( G > J );\n+  VERIFY( t.transform_primary(G.begin(), G.end())\n+          == t.transform_primary(J.begin(), J.end()) );\n+}\n+\n+int main()\n+{\n+\ttest01();\n+\treturn 0;\n+}"}]}