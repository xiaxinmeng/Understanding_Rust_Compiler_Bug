{"sha": "f372b26ff875096812299e386ab15e6afbea8de3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM3MmIyNmZmODc1MDk2ODEyMjk5ZTM4NmFiMTVlNmFmYmVhOGRlMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-10-31T14:48:57Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-10-31T14:48:57Z"}, "message": "re PR gcov-profile/24487 (Basic block frequencies inaccurate)\n\n\tPR profile/24487\n\t* predict.c (predict_loops): Do not estimate more than\n\tMAX_PRED_LOOP_ITERATIONS in PRED_LOOP_ITERATIONS heuristic.\n\t* predict.def (MAX_PRED_LOOP_ITERATIONS): Define.\n\nFrom-SVN: r106276", "tree": {"sha": "ccb62239319136a6317c794f1949a20d9bf8f1af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccb62239319136a6317c794f1949a20d9bf8f1af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f372b26ff875096812299e386ab15e6afbea8de3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f372b26ff875096812299e386ab15e6afbea8de3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f372b26ff875096812299e386ab15e6afbea8de3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f372b26ff875096812299e386ab15e6afbea8de3/comments", "author": null, "committer": null, "parents": [{"sha": "52f661769db6a829a8537f1b8884646c99c5da5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52f661769db6a829a8537f1b8884646c99c5da5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52f661769db6a829a8537f1b8884646c99c5da5a"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "aed015544e277d54c20394725d9ca119a3b38bca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f372b26ff875096812299e386ab15e6afbea8de3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f372b26ff875096812299e386ab15e6afbea8de3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f372b26ff875096812299e386ab15e6afbea8de3", "patch": "@@ -1,3 +1,10 @@\n+2005-10-31  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR profile/24487\n+\t* predict.c (predict_loops): Do not estimate more than\n+\tMAX_PRED_LOOP_ITERATIONS in PRED_LOOP_ITERATIONS heuristic.\n+\t* predict.def (MAX_PRED_LOOP_ITERATIONS): Define.\n+\n 2005-10-31  Andrew MacLeod  <amacleod@redhat.com>\n \t\n \tPR tree-optimization/19097"}, {"sha": "e2f7262f2850d0cf6a4aeb229e8983ba3ae62c05", "filename": "gcc/predict.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f372b26ff875096812299e386ab15e6afbea8de3/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f372b26ff875096812299e386ab15e6afbea8de3/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=f372b26ff875096812299e386ab15e6afbea8de3", "patch": "@@ -624,6 +624,8 @@ predict_loops (struct loops *loops_info, bool rtlsimpleloops)\n \t      niter = desc.niter + 1;\n \t      if (niter == 0)        /* We might overflow here.  */\n \t\tniter = desc.niter;\n+\t      if (niter > MAX_PRED_LOOP_ITERATIONS)\n+\t\tniter = MAX_PRED_LOOP_ITERATIONS;\n \n \t      prob = (REG_BR_PROB_BASE\n \t\t      - (REG_BR_PROB_BASE + niter /2) / niter);\n@@ -654,13 +656,16 @@ predict_loops (struct loops *loops_info, bool rtlsimpleloops)\n \t\t  if (host_integerp (niter, 1)\n \t\t      && tree_int_cst_lt (niter,\n \t\t\t\t          build_int_cstu (NULL_TREE,\n-\t\t\t\t\t\t       REG_BR_PROB_BASE - 1)))\n+\t\t\t\t\t\t MAX_PRED_LOOP_ITERATIONS - 1)))\n \t\t    {\n \t\t      HOST_WIDE_INT nitercst = tree_low_cst (niter, 1) + 1;\n-\t\t      probability = (REG_BR_PROB_BASE + nitercst / 2) / nitercst;\n+\t\t      probability = ((REG_BR_PROB_BASE + nitercst / 2)\n+\t\t\t\t     / nitercst);\n \t\t    }\n \t\t  else\n-\t\t    probability = 1;\n+\t\t    probability = ((REG_BR_PROB_BASE\n+\t\t\t\t    + MAX_PRED_LOOP_ITERATIONS / 2)\n+\t\t\t\t   / MAX_PRED_LOOP_ITERATIONS);\n \n \t\t  predict_edge (exits[j], PRED_LOOP_ITERATIONS, probability);\n \t\t}"}, {"sha": "fefe2ed3eee50c7acad9b43ea6c624d334f69011", "filename": "gcc/predict.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f372b26ff875096812299e386ab15e6afbea8de3/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f372b26ff875096812299e386ab15e6afbea8de3/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=f372b26ff875096812299e386ab15e6afbea8de3", "patch": "@@ -58,6 +58,18 @@ DEF_PREDICTOR (PRED_UNCONDITIONAL, \"unconditional jump\", PROB_ALWAYS,\n DEF_PREDICTOR (PRED_LOOP_ITERATIONS, \"loop iterations\", PROB_ALWAYS,\n \t       PRED_FLAG_FIRST_MATCH)\n \n+/* For guessed profiles, the loops having unknown number of iterations\n+   are predicted to iterate relatively few (10) times at average.\n+   For functions containing one loop with large known number of iterations\n+   and other loops having unbounded loops we would end up predicting all\n+   the other loops cold that is not usually the case.  So we need to artifically\n+   flatten the profile.  \n+\n+   We need to cut the maximal predicted iterations to large enought iterations\n+   so the loop appears important, but safely within HOT_BB_COUNT_FRACTION\n+   range.  */\n+#define MAX_PRED_LOOP_ITERATIONS 100\n+\n /* Hints dropped by user via __builtin_expect feature.  */\n DEF_PREDICTOR (PRED_BUILTIN_EXPECT, \"__builtin_expect\", PROB_VERY_LIKELY,\n \t       PRED_FLAG_FIRST_MATCH)"}]}