{"sha": "cd2d3822ca0f2f743601cc9d048d51f6d326f6a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QyZDM4MjJjYTBmMmY3NDM2MDFjYzlkMDQ4ZDUxZjZkMzI2ZjZhMg==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-09-08T09:10:17Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-09-08T09:12:25Z"}, "message": "MSP430: Use enums to handle -mcpu= values\n\nThe -mcpu= option accepts only a handful of string values.\nUsing enums instead of strings to handle the accepted values removes the\nneed to have specific processing of the strings in the backend, and\nsimplifies any comparisons which need to be performed on the value.\n\nIt also allows the default value to have semantic equivalence to a user\nset value, whilst retaining the ability to differentiate between them.\nPractically, this allows a user set -mcpu= value to override the the ISA set by\n-mmcu, whilst the default -mcpu= value can still have an explicit meaning.\n\ngcc/ChangeLog:\n\n\t* common/config/msp430/msp430-common.c (msp430_handle_option): Remove\n\tOPT_mcpu_ handling.\n\tSet target_cpu value to new enum values when parsing certain -mmcu=\n\tvalues.\n\t* config/msp430/msp430-opts.h (enum msp430_cpu_types): New.\n\t* config/msp430/msp430.c (msp430_option_override): Handle new\n\ttarget_cpu enum values.\n\tSet target_cpu using extracted value for given MCU when -mcpu=\n\toption is not passed by the user.\n\t* config/msp430/msp430.opt: Handle -mcpu= values using enums.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/msp430/mcpu-is-430.c: New test.\n\t* gcc.target/msp430/mcpu-is-430x.c: New test.\n\t* gcc.target/msp430/mcpu-is-430xv2.c: New test.", "tree": {"sha": "ceabcdfced7ba6f49fac182de7d8a72fa2e4c360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceabcdfced7ba6f49fac182de7d8a72fa2e4c360"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd2d3822ca0f2f743601cc9d048d51f6d326f6a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd2d3822ca0f2f743601cc9d048d51f6d326f6a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd2d3822ca0f2f743601cc9d048d51f6d326f6a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd2d3822ca0f2f743601cc9d048d51f6d326f6a2/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "213200a27d756df1709be1a1a6a85af97a32fddc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213200a27d756df1709be1a1a6a85af97a32fddc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/213200a27d756df1709be1a1a6a85af97a32fddc"}], "stats": {"total": 117, "additions": 80, "deletions": 37}, "files": [{"sha": "65be3194683143e7392e120cfff5c8719c5c4ac0", "filename": "gcc/common/config/msp430/msp430-common.c", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd2d3822ca0f2f743601cc9d048d51f6d326f6a2/gcc%2Fcommon%2Fconfig%2Fmsp430%2Fmsp430-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd2d3822ca0f2f743601cc9d048d51f6d326f6a2/gcc%2Fcommon%2Fconfig%2Fmsp430%2Fmsp430-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fmsp430%2Fmsp430-common.c?ref=cd2d3822ca0f2f743601cc9d048d51f6d326f6a2", "patch": "@@ -27,7 +27,7 @@\n #include \"opts.h\"\n #include \"flags.h\"\n \n-/* Check for generic -mcpu= and -mmcu= names here.  If found then we\n+/* Check for generic -mmcu= names here.  If found then we\n    convert to a baseline cpu name.  Otherwise we allow the option to\n    be passed on to the backend where it can be checked more fully.  */\n \n@@ -39,40 +39,20 @@ msp430_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n {\n   switch (decoded->opt_index)\n     {\n-    case OPT_mcpu_:\n-      if (strcasecmp (decoded->arg, \"msp430x\") == 0\n-\t  || strcasecmp (decoded->arg, \"msp430xv2\") == 0\n-\t  || strcasecmp (decoded->arg, \"430x\") == 0\n-\t  || strcasecmp (decoded->arg, \"430xv2\") == 0)\n-\t{\n-\t  target_cpu = \"msp430x\";\n-\t}\n-      else if (strcasecmp (decoded->arg, \"msp430\") == 0\n-\t       || strcasecmp (decoded->arg, \"430\") == 0)\n-\t{\n-\t  target_cpu = \"msp430\";\n-\t}\n-      else\n-\t{\n-\t  error (\"unrecognized argument of %<-mcpu%>: %s\", decoded->arg);\n-\t  return false;\n-\t}\n-      break;\n-\n     case OPT_mmcu_:\n       /* For backwards compatibility we recognise two generic MCU\n \t 430X names.  However we want to be able to generate special C\n \t preprocessor defines for them, which is why we set target_mcu\n \t to NULL.  */\n       if (strcasecmp (decoded->arg, \"msp430\") == 0)\n \t{\n-\t  target_cpu = \"msp430\";\n+\t  target_cpu = MSP430_CPU_MSP430;\n \t  target_mcu = NULL;\n \t}\n       else if (strcasecmp (decoded->arg, \"msp430x\") == 0\n \t       || strcasecmp (decoded->arg, \"msp430xv2\") == 0)\n \t{\n-\t  target_cpu = \"msp430x\";\n+\t  target_cpu = MSP430_CPU_MSP430X;\n \t  target_mcu = NULL;\n \t}\n       break;"}, {"sha": "fa64677cb0b2a18596b170561a862d7f421bd10b", "filename": "gcc/config/msp430/msp430-opts.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd2d3822ca0f2f743601cc9d048d51f6d326f6a2/gcc%2Fconfig%2Fmsp430%2Fmsp430-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd2d3822ca0f2f743601cc9d048d51f6d326f6a2/gcc%2Fconfig%2Fmsp430%2Fmsp430-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430-opts.h?ref=cd2d3822ca0f2f743601cc9d048d51f6d326f6a2", "patch": "@@ -29,6 +29,18 @@ enum msp430_hwmult_types\n   MSP430_HWMULT_F5SERIES\n };\n \n+enum msp430_cpu_types\n+{\n+  MSP430_CPU_MSP430,\n+  MSP430_CPU_430,\n+  MSP430_CPU_MSP430X_DEFAULT, /* The default setting, which will be overriden\n+\t\t\t\t by any other -mcpu= value.  */\n+  MSP430_CPU_MSP430X,\n+  MSP430_CPU_430X,\n+  MSP430_CPU_MSP430XV2,\n+  MSP430_CPU_430XV2\n+};\n+\n enum msp430_regions\n {\n   MSP430_REGION_ANY,"}, {"sha": "d0557fe9058c953f5127eb1f7f8a79fa8a61e121", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd2d3822ca0f2f743601cc9d048d51f6d326f6a2/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd2d3822ca0f2f743601cc9d048d51f6d326f6a2/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=cd2d3822ca0f2f743601cc9d048d51f6d326f6a2", "patch": "@@ -160,15 +160,7 @@ msp430_option_override (void)\n \n   init_machine_status = msp430_init_machine_status;\n \n-  if (target_cpu)\n-    {\n-      /* gcc/common/config/msp430-common.c will have\n-\t already canonicalised the string in target_cpu.  */\n-      if (strcasecmp (target_cpu, \"msp430x\") == 0)\n-\tmsp430x = true;\n-      else /* target_cpu == \"msp430\" - already handled by the front end.  */\n-\tmsp430x = false;\n-    }\n+  msp430x = target_cpu >= MSP430_CPU_MSP430X_DEFAULT;\n \n   if (target_mcu)\n     {\n@@ -180,7 +172,7 @@ msp430_option_override (void)\n \n \t  if (msp430_warn_mcu)\n \t    {\n-\t      if (target_cpu && msp430x != xisa)\n+\t      if (target_cpu != MSP430_CPU_MSP430X_DEFAULT && msp430x != xisa)\n \t\twarning (0, \"MCU %qs supports %s ISA but %<-mcpu%> option \"\n \t\t\t \"is set to %s\",\n \t\t\t target_mcu, xisa ? \"430X\" : \"430\",\n@@ -212,15 +204,18 @@ msp430_option_override (void)\n \t\t\t \"but %<-mhwmult%> is set to f5series\",\n \t\t\t target_mcu, hwmult_name (extracted_mcu_data.hwmpy));\n \t    }\n-\t  msp430x = xisa;\n+\t  /* Only override the default setting with the extracted ISA value if\n+\t     the user has not passed -mcpu=.  */\n+\t  if (target_cpu == MSP430_CPU_MSP430X_DEFAULT)\n+\t    msp430x = xisa;\n \t}\n       else\n \t{\n \t  if (msp430_hwmult_type == MSP430_HWMULT_AUTO)\n \t    {\n \t      if (msp430_warn_mcu)\n \t\t{\n-\t\t  if (target_cpu == NULL)\n+\t\t  if (target_cpu == MSP430_CPU_MSP430X_DEFAULT)\n \t\t    warning (0,\n \t\t\t     \"Unrecognized MCU name %qs, assuming that it is \"\n \t\t\t     \"just a MSP430X with no hardware multiply.\\n\"\n@@ -237,7 +232,7 @@ msp430_option_override (void)\n \n \t      msp430_hwmult_type = MSP430_HWMULT_NONE;\n \t    }\n-\t  else if (target_cpu == NULL)\n+\t  else if (target_cpu == MSP430_CPU_MSP430X_DEFAULT)\n \t    {\n \t      if (msp430_warn_mcu)\n \t\twarning (0,"}, {"sha": "692e7dccc9ecfa430a0b15c125d3aa0c1740983a", "filename": "gcc/config/msp430/msp430.opt", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd2d3822ca0f2f743601cc9d048d51f6d326f6a2/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd2d3822ca0f2f743601cc9d048d51f6d326f6a2/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt?ref=cd2d3822ca0f2f743601cc9d048d51f6d326f6a2", "patch": "@@ -23,9 +23,30 @@ Target Report Var(msp430_warn_devices_csv) Init(1)\n Warn if devices.csv is not found or there are problem parsing it (default: on).\n \n mcpu=\n-Target Report Joined RejectNegative Var(target_cpu)\n+Target Report Joined RejectNegative Var(target_cpu) ToLower Enum(msp430_cpu_types) Init(MSP430_CPU_MSP430X_DEFAULT)\n Specify the ISA to build for: msp430, msp430x, msp430xv2.\n \n+Enum\n+Name(msp430_cpu_types) Type(enum msp430_cpu_types)\n+\n+EnumValue\n+Enum(msp430_cpu_types) String(msp430) Value(MSP430_CPU_MSP430) Canonical\n+\n+EnumValue\n+Enum(msp430_cpu_types) String(430) Value(MSP430_CPU_MSP430)\n+\n+EnumValue\n+Enum(msp430_cpu_types) String(msp430x) Value(MSP430_CPU_MSP430X) Canonical\n+\n+EnumValue\n+Enum(msp430_cpu_types) String(430x) Value(MSP430_CPU_MSP430X)\n+\n+EnumValue\n+Enum(msp430_cpu_types) String(msp430xv2) Value(MSP430_CPU_MSP430XV2) Canonical\n+\n+EnumValue\n+Enum(msp430_cpu_types) String(430xv2) Value(MSP430_CPU_MSP430XV2)\n+\n mlarge\n Target Report Mask(LARGE) RejectNegative\n Select large model - 20-bit addresses/pointers."}, {"sha": "3139d2d52b0faa972220407408da00dd366a503c", "filename": "gcc/testsuite/gcc.target/msp430/mcpu-is-430.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd2d3822ca0f2f743601cc9d048d51f6d326f6a2/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmcpu-is-430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd2d3822ca0f2f743601cc9d048d51f6d326f6a2/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmcpu-is-430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmcpu-is-430.c?ref=cd2d3822ca0f2f743601cc9d048d51f6d326f6a2", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-mcpu=*\" \"-mmcu=*\" \"-mlarge\" } { \"\" } } */\n+/* { dg-options \"-mcpu=430\" } */\n+\n+/* Verify that the alternate way of selecting the 430 ISA (i.e. with the\n+   value \"430\" instead of \"msp430\") successfully selects the correct ISA.  */\n+\n+#ifdef __MSP430X__\n+#error\n+#endif"}, {"sha": "33100dc6bbd4c4d6067badf7bd9545831bb44a65", "filename": "gcc/testsuite/gcc.target/msp430/mcpu-is-430x.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd2d3822ca0f2f743601cc9d048d51f6d326f6a2/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmcpu-is-430x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd2d3822ca0f2f743601cc9d048d51f6d326f6a2/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmcpu-is-430x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmcpu-is-430x.c?ref=cd2d3822ca0f2f743601cc9d048d51f6d326f6a2", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-mcpu=*\" \"-mmcu=*\" } { \"\" } } */\n+/* { dg-options \"-mcpu=430x\" } */\n+\n+/* Verify that the alternate way of selecting the 430X ISA (i.e. with the\n+   value \"430x\" instead of \"msp430x\") successfully selects the correct\n+   ISA.  */\n+\n+#ifndef __MSP430X__\n+#error\n+#endif\n+"}, {"sha": "7bc3da1d2a4d09524e1fe316a09d69b12515c728", "filename": "gcc/testsuite/gcc.target/msp430/mcpu-is-430xv2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd2d3822ca0f2f743601cc9d048d51f6d326f6a2/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmcpu-is-430xv2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd2d3822ca0f2f743601cc9d048d51f6d326f6a2/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmcpu-is-430xv2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmcpu-is-430xv2.c?ref=cd2d3822ca0f2f743601cc9d048d51f6d326f6a2", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-mcpu=*\" \"-mmcu=*\" } { \"\" } } */\n+/* { dg-options \"-mcpu=430XV2\" } */\n+\n+/* Verify that the alternate way of selecting the 430XV2 ISA (i.e. with the\n+   value \"430XV2\" instead of \"msp430xv2\") successfully selects the correct\n+   ISA.  430xv2 doesn't actually have any observable effect on codegen, so we\n+   have to just test for 430X.  */\n+\n+#ifndef __MSP430X__\n+#error\n+#endif\n+"}]}