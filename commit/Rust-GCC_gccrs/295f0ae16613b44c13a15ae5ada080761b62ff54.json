{"sha": "295f0ae16613b44c13a15ae5ada080761b62ff54", "node_id": "C_kwDOANBUbNoAKDI5NWYwYWUxNjYxM2I0NGMxM2ExNWFlNWFkYTA4MDc2MWI2MmZmNTQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-25T15:01:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-25T15:01:01Z"}, "message": "Merge #817\n\n817: Remove bad mutability check pass r=philberty a=philberty\n\nThis was an initial pass to try and ensure all assignments were valid\r\nwith respect to the binding mutability. This pass cannot be done at the\r\nname resolution level and in rustc is achieved on mir as part of the borrow\r\nchecker. This patch removes this pass and associated test cases.\r\n\r\nThis set of patches also adds support for indirection around array index\r\nexpressions.\r\n\r\nFixes #815 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "0b3be7ed250e3cd25605ee7ce656b385c1c0d6b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b3be7ed250e3cd25605ee7ce656b385c1c0d6b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/295f0ae16613b44c13a15ae5ada080761b62ff54", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhn6UtCRBK7hj4Ov3rIwAAD2AIAEB9IeAM0V2MzEXuAbs2HsA6\nhzFnEbEUrpy/FZggZIJd5ERTNOSFmM4VR6dWe5sh3ThqPKov3i1QCbXaeGVqOu9g\njRzvv0QeKAKmHIpvb1GsLtSCFQ0LsH2ZcDMkUMRHoOfeUJwds8D/TUXNfl2FAkOz\nbJWluEJE08Z9rakrtFMK10HhawEA1Ua20sajrZ5R+2qn9mLd+LE7PYe4oneOb70g\no7MYRkYfSLF60jpb5ZfAB8e5SM9xDknoXCFyDUdtkxe7bRW2UxLiCKB7+f1aVAwa\nkuAZNpTYU2+lEN+K6tY17R2x5qfM6zWzu794J+1kkoY+xVfvs4JqSA8eSBTCqgo=\n=2o5F\n-----END PGP SIGNATURE-----\n", "payload": "tree 0b3be7ed250e3cd25605ee7ce656b385c1c0d6b5\nparent bdfe6abe2b11e2ddad0b8c8a92b57297fdd73f6b\nparent e7e65bbdf3a06a7d00ed7da4ff8ebb16031ed6c3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1637852461 +0000\ncommitter GitHub <noreply@github.com> 1637852461 +0000\n\nMerge #817\n\n817: Remove bad mutability check pass r=philberty a=philberty\n\nThis was an initial pass to try and ensure all assignments were valid\r\nwith respect to the binding mutability. This pass cannot be done at the\r\nname resolution level and in rustc is achieved on mir as part of the borrow\r\nchecker. This patch removes this pass and associated test cases.\r\n\r\nThis set of patches also adds support for indirection around array index\r\nexpressions.\r\n\r\nFixes #815 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/295f0ae16613b44c13a15ae5ada080761b62ff54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/295f0ae16613b44c13a15ae5ada080761b62ff54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/295f0ae16613b44c13a15ae5ada080761b62ff54/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdfe6abe2b11e2ddad0b8c8a92b57297fdd73f6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdfe6abe2b11e2ddad0b8c8a92b57297fdd73f6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdfe6abe2b11e2ddad0b8c8a92b57297fdd73f6b"}, {"sha": "e7e65bbdf3a06a7d00ed7da4ff8ebb16031ed6c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e65bbdf3a06a7d00ed7da4ff8ebb16031ed6c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7e65bbdf3a06a7d00ed7da4ff8ebb16031ed6c3"}], "stats": {"total": 103, "additions": 51, "deletions": 52}, "files": [{"sha": "46d501a58596c3f178161621588b4d30aa57b5b1", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/295f0ae16613b44c13a15ae5ada080761b62ff54/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/295f0ae16613b44c13a15ae5ada080761b62ff54/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=295f0ae16613b44c13a15ae5ada080761b62ff54", "patch": "@@ -390,10 +390,32 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::ArrayIndexExpr &expr) override\n   {\n-    tree array = CompileExpr::Compile (expr.get_array_expr (), ctx);\n+    tree array_reference = CompileExpr::Compile (expr.get_array_expr (), ctx);\n     tree index = CompileExpr::Compile (expr.get_index_expr (), ctx);\n+\n+    // lets check if the array is a reference type then we can add an\n+    // indirection if required\n+    TyTy::BaseType *array_expr_ty = nullptr;\n+    bool ok = ctx->get_tyctx ()->lookup_type (\n+      expr.get_array_expr ()->get_mappings ().get_hirid (), &array_expr_ty);\n+    rust_assert (ok);\n+\n+    // do we need to add an indirect reference\n+    if (array_expr_ty->get_kind () == TyTy::TypeKind::REF)\n+      {\n+\tTyTy::ReferenceType *r\n+\t  = static_cast<TyTy::ReferenceType *> (array_expr_ty);\n+\tTyTy::BaseType *tuple_type = r->get_base ();\n+\ttree array_tyty = TyTyResolveCompile::compile (ctx, tuple_type);\n+\n+\tarray_reference\n+\t  = ctx->get_backend ()->indirect_expression (array_tyty,\n+\t\t\t\t\t\t      array_reference, true,\n+\t\t\t\t\t\t      expr.get_locus ());\n+      }\n+\n     translated\n-      = ctx->get_backend ()->array_index_expression (array, index,\n+      = ctx->get_backend ()->array_index_expression (array_reference, index,\n \t\t\t\t\t\t     expr.get_locus ());\n   }\n "}, {"sha": "3613df52c0a7e4975b8b4e4defa6bdb03a611a1f", "filename": "gcc/rust/hir/rust-ast-lower-implitem.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/295f0ae16613b44c13a15ae5ada080761b62ff54/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/295f0ae16613b44c13a15ae5ada080761b62ff54/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h?ref=295f0ae16613b44c13a15ae5ada080761b62ff54", "patch": "@@ -153,7 +153,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t  = HIR::FunctionParam (mapping, std::move (translated_pattern),\n \t\t\t\tstd::move (translated_type),\n \t\t\t\tparam.get_locus ());\n-\tfunction_params.push_back (hir_param);\n+\tfunction_params.push_back (std::move (hir_param));\n       }\n \n     bool terminated = false;\n@@ -239,7 +239,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t  = HIR::FunctionParam (mapping, std::move (translated_pattern),\n \t\t\t\tstd::move (translated_type),\n \t\t\t\tparam.get_locus ());\n-\tfunction_params.push_back (hir_param);\n+\tfunction_params.push_back (std::move (hir_param));\n       }\n \n     bool terminated = false;\n@@ -345,7 +345,7 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \t  = HIR::FunctionParam (mapping, std::move (translated_pattern),\n \t\t\t\tstd::move (translated_type),\n \t\t\t\tparam.get_locus ());\n-\tfunction_params.push_back (hir_param);\n+\tfunction_params.push_back (std::move (hir_param));\n       }\n \n     HIR::TraitFunctionDecl decl (ref.get_identifier (), std::move (qualifiers),"}, {"sha": "697e98a3cbdceb5e0d72cc5ea4ca73eb9c19f873", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/295f0ae16613b44c13a15ae5ada080761b62ff54/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/295f0ae16613b44c13a15ae5ada080761b62ff54/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=295f0ae16613b44c13a15ae5ada080761b62ff54", "patch": "@@ -465,7 +465,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \t  = HIR::FunctionParam (mapping, std::move (translated_pattern),\n \t\t\t\tstd::move (translated_type),\n \t\t\t\tparam.get_locus ());\n-\tfunction_params.push_back (hir_param);\n+\tfunction_params.push_back (std::move (hir_param));\n       }\n \n     bool terminated = false;"}, {"sha": "e9f6f2316f2c202495546e82295d93c7cce79c0a", "filename": "gcc/rust/resolve/rust-ast-verify-assignee.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/295f0ae16613b44c13a15ae5ada080761b62ff54/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/295f0ae16613b44c13a15ae5ada080761b62ff54/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h?ref=295f0ae16613b44c13a15ae5ada080761b62ff54", "patch": "@@ -65,14 +65,6 @@ class VerifyAsignee : public ResolverBase\n     ok = true;\n     // mark the assignment to the name\n     resolver->mark_assignment_to_decl (resolved_node, parent);\n-\n-    // check is mutable\n-    if (!resolver->decl_is_mutable (resolved_node))\n-      {\n-\t// we only allow a single assignment to immutable decls\n-\tif (resolver->get_num_assignments_to_decl (resolved_node) > 1)\n-\t  rust_error_at (expr.get_locus (), \"cannot assign to immutable\");\n-      }\n   }\n \n   void visit (AST::DereferenceExpr &expr) override"}, {"sha": "8c34b6c776abfc5e5b4634a147d7ecac62832e76", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/295f0ae16613b44c13a15ae5ada080761b62ff54/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/295f0ae16613b44c13a15ae5ada080761b62ff54/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=295f0ae16613b44c13a15ae5ada080761b62ff54", "patch": "@@ -929,24 +929,27 @@ class TypeCheckExpr : public TypeCheckBase\n \n     auto resolved_index_expr\n       = size_ty->unify (TypeCheckExpr::Resolve (expr.get_index_expr (), false));\n-    if (resolved_index_expr == nullptr)\n+    if (resolved_index_expr->get_kind () != TyTy::TypeKind::ERROR)\n       {\n-\trust_error_at (expr.get_index_expr ()->get_locus (),\n-\t\t       \"Type Resolver failure in Index for ArrayIndexExpr\");\n-\treturn;\n+\t// allow the index expr to fail lets just continue on\n+\tcontext->insert_type (expr.get_index_expr ()->get_mappings (),\n+\t\t\t      resolved_index_expr);\n       }\n-    context->insert_type (expr.get_index_expr ()->get_mappings (),\n-\t\t\t  resolved_index_expr);\n \n-    // resolve the array reference\n-    expr.get_array_expr ()->accept_vis (*this);\n-    if (infered == nullptr)\n+    auto array_expr_ty\n+      = TypeCheckExpr::Resolve (expr.get_array_expr (), inside_loop);\n+    if (array_expr_ty->get_kind () == TyTy::TypeKind::ERROR)\n+      return;\n+    else if (array_expr_ty->get_kind () == TyTy::TypeKind::REF)\n       {\n-\trust_error_at (expr.get_index_expr ()->get_locus (),\n-\t\t       \"failed to resolve array reference expression\");\n-\treturn;\n+\t// lets try and deref it since rust allows this\n+\tauto ref = static_cast<TyTy::ReferenceType *> (array_expr_ty);\n+\tauto base = ref->get_base ();\n+\tif (base->get_kind () == TyTy::TypeKind::ARRAY)\n+\t  array_expr_ty = base;\n       }\n-    else if (infered->get_kind () != TyTy::TypeKind::ARRAY)\n+\n+    if (array_expr_ty->get_kind () != TyTy::TypeKind::ARRAY)\n       {\n \trust_error_at (expr.get_index_expr ()->get_locus (),\n \t\t       \"expected an ArrayType got [%s]\",\n@@ -955,7 +958,8 @@ class TypeCheckExpr : public TypeCheckBase\n \treturn;\n       }\n \n-    TyTy::ArrayType *array_type = static_cast<TyTy::ArrayType *> (infered);\n+    TyTy::ArrayType *array_type\n+      = static_cast<TyTy::ArrayType *> (array_expr_ty);\n     infered = array_type->get_element_type ()->clone ();\n   }\n "}, {"sha": "a62c6ca69c7a6e945595e372a3519c644520c04e", "filename": "gcc/testsuite/rust/compile/array3.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/295f0ae16613b44c13a15ae5ada080761b62ff54/gcc%2Ftestsuite%2Frust%2Fcompile%2Farray3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/295f0ae16613b44c13a15ae5ada080761b62ff54/gcc%2Ftestsuite%2Frust%2Fcompile%2Farray3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Farray3.rs?ref=295f0ae16613b44c13a15ae5ada080761b62ff54", "patch": "@@ -0,0 +1,5 @@\n+fn foo(state: &mut [u32; 16], a: usize) {\n+    // { dg-warning \"function is never used: .foo.\" \"\" { target *-*-* } .-1 }\n+    // { dg-warning \"unused name .foo.\" \"\" { target *-*-* } .-2 }\n+    state[a] = 1;\n+}"}, {"sha": "d78c1b759cb0336b916acdc9bb6c8f20e6a0de3b", "filename": "gcc/testsuite/rust/compile/immutable1.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfe6abe2b11e2ddad0b8c8a92b57297fdd73f6b/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimmutable1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfe6abe2b11e2ddad0b8c8a92b57297fdd73f6b/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimmutable1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimmutable1.rs?ref=bdfe6abe2b11e2ddad0b8c8a92b57297fdd73f6b", "patch": "@@ -1,5 +0,0 @@\n-static x: i32 = 3;\n-\n-fn main() {\n-    x = 1; /* { dg-error \"cannot assign to immutable\" } */\n-}"}, {"sha": "86e70fe29dd36c921a8da191b93042545cd73270", "filename": "gcc/testsuite/rust/compile/immutable2.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfe6abe2b11e2ddad0b8c8a92b57297fdd73f6b/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimmutable2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfe6abe2b11e2ddad0b8c8a92b57297fdd73f6b/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimmutable2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimmutable2.rs?ref=bdfe6abe2b11e2ddad0b8c8a92b57297fdd73f6b", "patch": "@@ -1,5 +0,0 @@\n-const TEST_CONST: i32 = 10;\n-\n-fn main() {\n-    TEST_CONST = 1; // { dg-error \"cannot assign to immutable\" }\n-}"}, {"sha": "fb60280d9098a4d88a43b8b3b152ea2d008cc459", "filename": "gcc/testsuite/rust/compile/immutable3.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfe6abe2b11e2ddad0b8c8a92b57297fdd73f6b/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimmutable3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfe6abe2b11e2ddad0b8c8a92b57297fdd73f6b/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimmutable3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimmutable3.rs?ref=bdfe6abe2b11e2ddad0b8c8a92b57297fdd73f6b", "patch": "@@ -1,4 +0,0 @@\n-fn main() {\n-    let a = 1;\n-    a += 2; // { dg-error \"cannot assign to immutable\" }\n-}"}, {"sha": "fb14554ab30ec04ec1de0d4ef2fff71e1360b64d", "filename": "gcc/testsuite/rust/compile/immutable4.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfe6abe2b11e2ddad0b8c8a92b57297fdd73f6b/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimmutable4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfe6abe2b11e2ddad0b8c8a92b57297fdd73f6b/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimmutable4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimmutable4.rs?ref=bdfe6abe2b11e2ddad0b8c8a92b57297fdd73f6b", "patch": "@@ -1,4 +0,0 @@\n-fn main() {\n-    let array: [i32; 3] = [0; 3];\n-    array[0] = 1; // { dg-error \"cannot assign to immutable\" }\n-}"}, {"sha": "db23609171fd0e8f0aa0518ba3e92b0834901690", "filename": "gcc/testsuite/rust/compile/immutable5.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfe6abe2b11e2ddad0b8c8a92b57297fdd73f6b/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimmutable5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfe6abe2b11e2ddad0b8c8a92b57297fdd73f6b/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimmutable5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimmutable5.rs?ref=bdfe6abe2b11e2ddad0b8c8a92b57297fdd73f6b", "patch": "@@ -1,6 +0,0 @@\n-struct Foo(f32, i32);\n-\n-fn main() {\n-    let a = Foo(1, 2);\n-    a.0 = 22; // { dg-error \"cannot assign to immutable\" }\n-}"}]}