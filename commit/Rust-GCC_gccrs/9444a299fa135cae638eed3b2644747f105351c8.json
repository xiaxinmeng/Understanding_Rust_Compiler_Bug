{"sha": "9444a299fa135cae638eed3b2644747f105351c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ0NGEyOTlmYTEzNWNhZTYzOGVlZDNiMjY0NDc0N2YxMDUzNTFjOA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2019-12-18T17:02:27Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2019-12-18T17:02:27Z"}, "message": "[OpenACC] Refactor 'goacc_enter_data' so that it can be called from 'goacc_insert_pointer', \"not present\" case\n\nNo functional changes.\n\n\tlibgomp/\n\t* oacc-mem.c (goacc_enter_data): Refactor, so that it can be\n\tcalled...\n\t(goacc_insert_pointer): ... from here, \"not present\" case.\n\nFrom-SVN: r279539", "tree": {"sha": "5d7c30f05cc420b7e5f7dfb65e2d5c853778c8a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d7c30f05cc420b7e5f7dfb65e2d5c853778c8a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9444a299fa135cae638eed3b2644747f105351c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9444a299fa135cae638eed3b2644747f105351c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9444a299fa135cae638eed3b2644747f105351c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9444a299fa135cae638eed3b2644747f105351c8/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5031b6199f2270c39191af57aa47610ad9e6487d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5031b6199f2270c39191af57aa47610ad9e6487d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5031b6199f2270c39191af57aa47610ad9e6487d"}], "stats": {"total": 69, "additions": 41, "deletions": 28}, "files": [{"sha": "7cf85682e7b920434fc714890227c109bd15ed05", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444a299fa135cae638eed3b2644747f105351c8/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444a299fa135cae638eed3b2644747f105351c8/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=9444a299fa135cae638eed3b2644747f105351c8", "patch": "@@ -1,5 +1,9 @@\n 2019-12-18  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\t* oacc-mem.c (goacc_enter_data): Refactor, so that it can be\n+\tcalled...\n+\t(goacc_insert_pointer): ... from here, \"not present\" case.\n+\n \t* oacc-mem.c (goacc_remove_pointer): Refactor interface.  Adjust\n \tall users.\n "}, {"sha": "3806e2d69a0aecced98b47f3c5d8cdf7b52a1ff1", "filename": "libgomp/oacc-mem.c", "status": "modified", "additions": 37, "deletions": 28, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444a299fa135cae638eed3b2644747f105351c8/libgomp%2Foacc-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444a299fa135cae638eed3b2644747f105351c8/libgomp%2Foacc-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-mem.c?ref=9444a299fa135cae638eed3b2644747f105351c8", "patch": "@@ -493,26 +493,39 @@ acc_unmap_data (void *h)\n }\n \n \n-/* Enter a dynamic mapping.\n+/* Enter dynamic mappings.\n \n-   Return the device pointer.  */\n+   The handling for MAPNUM bigger than one is special handling for\n+   'GOMP_MAP_POINTER', 'GOMP_MAP_TO_PSET'.  For these, only the first mapping\n+   is considered in reference counting; the following ones implicitly follow\n+   suit.\n+\n+   If there's just one mapping, return the device pointer.  */\n \n static void *\n-goacc_enter_data (void *h, size_t s, unsigned short kind, int async)\n+goacc_enter_data (size_t mapnum, void **hostaddrs, size_t *sizes, void *kinds,\n+\t\t  int async)\n {\n   void *d;\n   splay_tree_key n;\n \n-  if (!h || !s)\n-    gomp_fatal (\"[%p,+%d] is a bad range\", (void *)h, (int)s);\n+  assert (mapnum > 0);\n+  if (mapnum == 1\n+      && (!hostaddrs[0] || !sizes[0]))\n+    gomp_fatal (\"[%p,+%d] is a bad range\", hostaddrs[0], (int) sizes[0]);\n \n   goacc_lazy_initialize ();\n \n   struct goacc_thread *thr = goacc_thread ();\n   struct gomp_device_descr *acc_dev = thr->dev;\n \n   if (acc_dev->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM)\n-    return h;\n+    {\n+      if (mapnum == 1)\n+\treturn hostaddrs[0];\n+      else\n+\treturn /* n/a */ (void *) -1;\n+    }\n \n   acc_prof_info prof_info;\n   acc_api_info api_info;\n@@ -525,9 +538,13 @@ goacc_enter_data (void *h, size_t s, unsigned short kind, int async)\n \n   gomp_mutex_lock (&acc_dev->lock);\n \n-  n = lookup_host (acc_dev, h, s);\n+  n = lookup_host (acc_dev, hostaddrs[0], sizes[0]);\n   if (n)\n     {\n+      assert (mapnum == 1);\n+      void *h = hostaddrs[0];\n+      size_t s = sizes[0];\n+\n       /* Present. */\n       d = (void *) (n->tgt->tgt_start + n->tgt_offset + h - n->host_start);\n \n@@ -546,16 +563,13 @@ goacc_enter_data (void *h, size_t s, unsigned short kind, int async)\n     }\n   else\n     {\n-      struct target_mem_desc *tgt;\n-      size_t mapnum = 1;\n-      void *hostaddrs = h;\n-\n       gomp_mutex_unlock (&acc_dev->lock);\n \n       goacc_aq aq = get_goacc_asyncqueue (async);\n \n-      tgt = gomp_map_vars_async (acc_dev, aq, mapnum, &hostaddrs, NULL, &s,\n-\t\t\t\t &kind, true, GOMP_MAP_VARS_ENTER_DATA);\n+      struct target_mem_desc *tgt\n+\t= gomp_map_vars_async (acc_dev, aq, mapnum, hostaddrs, NULL, sizes,\n+\t\t\t       kinds, true, GOMP_MAP_VARS_ENTER_DATA);\n       assert (tgt);\n       n = tgt->list[0].key;\n       assert (n->refcount == 1);\n@@ -577,13 +591,15 @@ goacc_enter_data (void *h, size_t s, unsigned short kind, int async)\n void *\n acc_create (void *h, size_t s)\n {\n-  return goacc_enter_data (h, s, GOMP_MAP_ALLOC, acc_async_sync);\n+  unsigned short kinds[1] = { GOMP_MAP_ALLOC };\n+  return goacc_enter_data (1, &h, &s, &kinds, acc_async_sync);\n }\n \n void\n acc_create_async (void *h, size_t s, int async)\n {\n-  goacc_enter_data (h, s, GOMP_MAP_ALLOC, async);\n+  unsigned short kinds[1] = { GOMP_MAP_ALLOC };\n+  goacc_enter_data (1, &h, &s, &kinds, async);\n }\n \n /* acc_present_or_create used to be what acc_create is now.  */\n@@ -608,13 +624,15 @@ acc_pcreate (void *h, size_t s)\n void *\n acc_copyin (void *h, size_t s)\n {\n-  return goacc_enter_data (h, s, GOMP_MAP_TO, acc_async_sync);\n+  unsigned short kinds[1] = { GOMP_MAP_TO };\n+  return goacc_enter_data (1, &h, &s, &kinds, acc_async_sync);\n }\n \n void\n acc_copyin_async (void *h, size_t s, int async)\n {\n-  goacc_enter_data (h, s, GOMP_MAP_TO, async);\n+  unsigned short kinds[1] = { GOMP_MAP_TO };\n+  goacc_enter_data (1, &h, &s, &kinds, async);\n }\n \n /* acc_present_or_copyin used to be what acc_copyin is now.  */\n@@ -912,16 +930,7 @@ goacc_insert_pointer (size_t mapnum, void **hostaddrs, size_t *sizes,\n       gomp_fatal (\"Dynamic refcount incrementing failed for pointer/pset\");\n     }\n \n-  gomp_debug (0, \"  %s: prepare mappings\\n\", __FUNCTION__);\n-  goacc_aq aq = get_goacc_asyncqueue (async);\n-  tgt = gomp_map_vars_async (acc_dev, aq, mapnum, hostaddrs,\n-\t\t\t     NULL, sizes, kinds, true, GOMP_MAP_VARS_ENTER_DATA);\n-  assert (tgt);\n-  splay_tree_key n = tgt->list[0].key;\n-  assert (n->refcount == 1);\n-  assert (n->dynamic_refcount == 0);\n-  n->dynamic_refcount++;\n-  gomp_debug (0, \"  %s: mappings prepared\\n\", __FUNCTION__);\n+  goacc_enter_data (mapnum, hostaddrs, sizes, kinds, async);\n }\n \n static void\n@@ -1181,7 +1190,7 @@ GOACC_enter_exit_data (int flags_m, size_t mapnum, void **hostaddrs,\n \t\t  break;\n \t\t}\n \n-\t      goacc_enter_data (hostaddrs[i], sizes[i], kinds[i], async);\n+\t      goacc_enter_data (1, &hostaddrs[i], &sizes[i], &kinds[i], async);\n \t    }\n \t  else\n \t    {"}]}