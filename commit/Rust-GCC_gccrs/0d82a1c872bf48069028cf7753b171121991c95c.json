{"sha": "0d82a1c872bf48069028cf7753b171121991c95c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ4MmExYzg3MmJmNDgwNjkwMjhjZjc3NTNiMTcxMTIxOTkxYzk1Yw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-08-17T12:00:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-08-17T12:00:35Z"}, "message": "tree.h (convert_to_ptrofftype_loc): New function.\n\n2011-08-17  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.h (convert_to_ptrofftype_loc): New function.\n\t(convert_to_ptrofftype): Define.\n\t* builtins.c (expand_builtin_bzero): Use size_type_node.\n\t(fold_builtin_bzero): Likewise.\n\t(std_gimplify_va_arg_expr): Build the BIT_AND_EXPR on the pointer.\n\t* c-typeck.c (build_unary_op): Use convert_to_ptrofftype_loc.\n\t* cgraphunit.c (thunk_adjust): Use fold_build_pointer_plus_loc.\n\t(cgraph_redirect_edge_call_stmt_to_callee): Use size_int.\n\t* expr.c (expand_expr_addr_expr_1): Use fold_build_pointer_plus.\n\t* fold-const.c (build_range_check): Negate using the original\n\ttype.\n\t(fold_unary_loc): Use fold_build_pointer_plus_loc.\n\t* gimple-fold.c (gimple_adjust_this_by_delta): Use\n\tconvert_to_ptrofftype.\n\t* gimplify.c (gimplify_self_mod_expr): Likewise.\n\t* graphite-clast-to-gimple.c (clast_to_gcc_expression): Likewise.\n\t(graphite_create_new_loop_guard): Likewise.\n\t* graphite-sese-to-poly.c (my_long_long): Remove.\n\t(scop_ivs_can_be_represented): Adjust.\n\t* tree-cfg.c (verify_gimple_assign_unary): Use ptrofftype_p.\n\t* tree-chrec.c (chrec_fold_plus_1): Use fold_build_pointer_plus.\n\t* tree-loop-distribution.c (build_size_arg_loc): Use\n\tsize_type_node.\n\t(generate_memset_zero): Simplify.\n\t* tree-mudflap.c: Use fold_convert, not convert.\n\t* tree-predcom.c (suitable_reference_p): Expand DR_OFFSET in\n\tits own type.\n\t(determine_offset): Likewise for DR_STEP.\n\t(valid_initializer_p): Likewise.\n\t* tree-profile.c (prepare_instrumented_value): Convert the pointer\n\tto an integer type of same size.\n\t* tree-scalar-evolution.c (interpret_rhs_expr): Do not refer\n\tto sizetype without need.\n\t* tree-ssa-address.c (tree_mem_ref_addr): Likewise.\n\t* tree-ssa-loop-ivopts.c (find_bivs): Use convert_to_ptrofftype.\n\t* tree-ssa-loop-manip.c (create_iv): Likewise.\n\t(determine_exit_conditions): Adjust comment.\n\t* tree-ssa-pre.c (create_expression_by_pieces): Use\n\tconvert_to_ptrofftype.\n\t* tree-ssa-structalias.c (get_constraint_for_1): Likewise.\n\t* varasm.c (array_size_for_constructor): Compute using double_ints.\n\nFrom-SVN: r177828", "tree": {"sha": "f6d96358126a89431fcc4b7b53d17b1c0b50c6f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6d96358126a89431fcc4b7b53d17b1c0b50c6f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d82a1c872bf48069028cf7753b171121991c95c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d82a1c872bf48069028cf7753b171121991c95c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d82a1c872bf48069028cf7753b171121991c95c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d82a1c872bf48069028cf7753b171121991c95c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f846d4d940a93cbaba58b0cdb833c083f7b56df4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f846d4d940a93cbaba58b0cdb833c083f7b56df4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f846d4d940a93cbaba58b0cdb833c083f7b56df4"}], "stats": {"total": 223, "additions": 133, "deletions": 90}, "files": [{"sha": "f96f6902042c30452fb5fee5c21cbbf7a7689dfe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -1,3 +1,47 @@\n+2011-08-17  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.h (convert_to_ptrofftype_loc): New function.\n+\t(convert_to_ptrofftype): Define.\n+\t* builtins.c (expand_builtin_bzero): Use size_type_node.\n+\t(fold_builtin_bzero): Likewise.\n+\t(std_gimplify_va_arg_expr): Build the BIT_AND_EXPR on the pointer.\n+\t* c-typeck.c (build_unary_op): Use convert_to_ptrofftype_loc.\n+\t* cgraphunit.c (thunk_adjust): Use fold_build_pointer_plus_loc.\n+\t(cgraph_redirect_edge_call_stmt_to_callee): Use size_int.\n+\t* expr.c (expand_expr_addr_expr_1): Use fold_build_pointer_plus.\n+\t* fold-const.c (build_range_check): Negate using the original\n+\ttype.\n+\t(fold_unary_loc): Use fold_build_pointer_plus_loc.\n+\t* gimple-fold.c (gimple_adjust_this_by_delta): Use\n+\tconvert_to_ptrofftype.\n+\t* gimplify.c (gimplify_self_mod_expr): Likewise.\n+\t* graphite-clast-to-gimple.c (clast_to_gcc_expression): Likewise.\n+\t(graphite_create_new_loop_guard): Likewise.\n+\t* graphite-sese-to-poly.c (my_long_long): Remove.\n+\t(scop_ivs_can_be_represented): Adjust.\n+\t* tree-cfg.c (verify_gimple_assign_unary): Use ptrofftype_p.\n+\t* tree-chrec.c (chrec_fold_plus_1): Use fold_build_pointer_plus.\n+\t* tree-loop-distribution.c (build_size_arg_loc): Use\n+\tsize_type_node.\n+\t(generate_memset_zero): Simplify.\n+\t* tree-mudflap.c: Use fold_convert, not convert.\n+\t* tree-predcom.c (suitable_reference_p): Expand DR_OFFSET in\n+\tits own type.\n+\t(determine_offset): Likewise for DR_STEP.\n+\t(valid_initializer_p): Likewise.\n+\t* tree-profile.c (prepare_instrumented_value): Convert the pointer\n+\tto an integer type of same size.\n+\t* tree-scalar-evolution.c (interpret_rhs_expr): Do not refer\n+\tto sizetype without need.\n+\t* tree-ssa-address.c (tree_mem_ref_addr): Likewise.\n+\t* tree-ssa-loop-ivopts.c (find_bivs): Use convert_to_ptrofftype.\n+\t* tree-ssa-loop-manip.c (create_iv): Likewise.\n+\t(determine_exit_conditions): Adjust comment.\n+\t* tree-ssa-pre.c (create_expression_by_pieces): Use\n+\tconvert_to_ptrofftype.\n+\t* tree-ssa-structalias.c (get_constraint_for_1): Likewise.\n+\t* varasm.c (array_size_for_constructor): Compute using double_ints.\n+\n 2011-08-16  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/spu/spu.c (spu_emit_branch_or_set): Avoid reverse tests"}, {"sha": "1f263073fe54a6feeef9462bbaa4b6b4d413a610", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -3631,7 +3631,8 @@ expand_builtin_bzero (tree exp)\n      calling bzero instead of memset.  */\n \n   return expand_builtin_memset_args (dest, integer_zero_node,\n-\t\t\t\t     fold_convert_loc (loc, sizetype, size),\n+\t\t\t\t     fold_convert_loc (loc,\n+\t\t\t\t\t\t       size_type_node, size),\n \t\t\t\t     const0_rtx, VOIDmode, exp);\n }\n \n@@ -4225,11 +4226,10 @@ std_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t\t  fold_build_pointer_plus_hwi (valist_tmp, boundary - 1));\n       gimplify_and_add (t, pre_p);\n \n-      t = fold_convert (sizetype, valist_tmp);\n       t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist_tmp,\n-\t\t  fold_convert (TREE_TYPE (valist),\n-\t\t\t\tfold_build2 (BIT_AND_EXPR, sizetype, t,\n-\t\t\t\t\t     size_int (-boundary))));\n+\t\t  fold_build2 (BIT_AND_EXPR, TREE_TYPE (valist),\n+\t\t\t       valist_tmp,\n+\t\t\t       build_int_cst (TREE_TYPE (valist), -boundary)));\n       gimplify_and_add (t, pre_p);\n     }\n   else\n@@ -7969,7 +7969,7 @@ fold_builtin_bzero (location_t loc, tree dest, tree size, bool ignore)\n      calling bzero instead of memset.  */\n \n   return fold_builtin_memset (loc, dest, integer_zero_node,\n-\t\t\t      fold_convert_loc (loc, sizetype, size),\n+\t\t\t      fold_convert_loc (loc, size_type_node, size),\n \t\t\t      void_type_node, ignore);\n }\n "}, {"sha": "bd932dba54a15c501ecb8beea38452aa5a7c8b58", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -3652,7 +3652,7 @@ build_unary_op (location_t location,\n \t      }\n \n \t    inc = c_size_in_bytes (TREE_TYPE (argtype));\n-\t    inc = fold_convert_loc (location, sizetype, inc);\n+\t    inc = convert_to_ptrofftype_loc (location, inc);\n \t  }\n \telse if (FRACT_MODE_P (TYPE_MODE (argtype)))\n \t  {"}, {"sha": "5e368f87208fcb0e1466aa038f82632d02c5f16d", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -1478,7 +1478,6 @@ thunk_adjust (gimple_stmt_iterator * bsi,\n       tree vtabletmp;\n       tree vtabletmp2;\n       tree vtabletmp3;\n-      tree offsettmp;\n \n       if (!vtable_entry_type)\n \t{\n@@ -1527,15 +1526,10 @@ thunk_adjust (gimple_stmt_iterator * bsi,\n       mark_symbols_for_renaming (stmt);\n       find_referenced_vars_in (stmt);\n \n-      /* Cast to sizetype.  */\n-      offsettmp = create_tmp_var (sizetype, \"offset\");\n-      stmt = gimple_build_assign (offsettmp, fold_convert (sizetype, vtabletmp3));\n-      gsi_insert_after (bsi, stmt, GSI_NEW_STMT);\n-      mark_symbols_for_renaming (stmt);\n-      find_referenced_vars_in (stmt);\n-\n       /* Adjust the `this' pointer.  */\n-      ptr = fold_build_pointer_plus_loc (input_location, ptr, offsettmp);\n+      ptr = fold_build_pointer_plus_loc (input_location, ptr, vtabletmp3);\n+      ptr = force_gimple_operand_gsi (bsi, ptr, true, NULL_TREE, false,\n+\t\t\t\t      GSI_CONTINUE_LINKING);\n     }\n \n   if (!this_adjusting\n@@ -2417,8 +2411,7 @@ cgraph_redirect_edge_call_stmt_to_callee (struct cgraph_edge *e)\n       gsi = gsi_for_stmt (e->call_stmt);\n       gsi_computed = true;\n       gimple_adjust_this_by_delta (&gsi,\n-\t\t\t\t   build_int_cst (sizetype,\n-\t\t\t\t\t       e->indirect_info->thunk_delta));\n+\t\t\t\t   size_int (e->indirect_info->thunk_delta));\n       e->indirect_info->thunk_delta = 0;\n     }\n "}, {"sha": "98e6cff2f201be28e497c54b0a5480660068ac57", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -7231,9 +7231,7 @@ expand_expr_addr_expr_1 (tree exp, rtx target, enum machine_mode tmode,\n       {\n \ttree tem = TREE_OPERAND (exp, 0);\n \tif (!integer_zerop (TREE_OPERAND (exp, 1)))\n-\t  tem = build2 (POINTER_PLUS_EXPR, TREE_TYPE (TREE_OPERAND (exp, 1)),\n-\t\t\ttem,\n-\t\t\tdouble_int_to_tree (sizetype, mem_ref_offset (exp)));\n+\t  tem = fold_build_pointer_plus (tem, TREE_OPERAND (exp, 1));\n \treturn expand_expr (tem, target, tmode, modifier);\n       }\n "}, {"sha": "a73b1e6a9bafa240a47fd05b2d0f0dfc19a4cc40", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -4218,8 +4218,7 @@ build_range_check (location_t loc, tree type, tree exp, int in_p,\n     {\n       if (value != 0 && !TREE_OVERFLOW (value))\n \t{\n-\t  low = fold_convert_loc (loc, sizetype, low);\n-\t  low = fold_build1_loc (loc, NEGATE_EXPR, sizetype, low);\n+\t  low = fold_build1_loc (loc, NEGATE_EXPR, TREE_TYPE (low), low);\n           return build_range_check (loc, type,\n \t\t\t     \t    fold_build_pointer_plus_loc (loc, exp, low),\n \t\t\t            1, build_int_cst (etype, 0), value);\n@@ -7862,10 +7861,8 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n \t  tree arg00 = TREE_OPERAND (arg0, 0);\n \t  tree arg01 = TREE_OPERAND (arg0, 1);\n \n-\t  return fold_build2_loc (loc,\n-\t\t\t      TREE_CODE (arg0), type,\n-\t\t\t      fold_convert_loc (loc, type, arg00),\n-\t\t\t      fold_convert_loc (loc, sizetype, arg01));\n+\t  return fold_build_pointer_plus_loc\n+\t\t   (loc, fold_convert_loc (loc, type, arg00), arg01);\n \t}\n \n       /* Convert (T1)(~(T2)X) into ~(T1)X if T1 and T2 are integral types"}, {"sha": "12b2d4e4a4b43b3fa42c98b186d17e3a538b4d12", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -1436,7 +1436,7 @@ gimple_adjust_this_by_delta (gimple_stmt_iterator *gsi, tree delta)\n   tree parm, tmp;\n   gimple new_stmt;\n \n-  delta = fold_convert (sizetype, delta);\n+  delta = convert_to_ptrofftype (delta);\n   gcc_assert (gimple_call_num_args (call_stmt) >= 1);\n   parm = gimple_call_arg (call_stmt, 0);\n   gcc_assert (POINTER_TYPE_P (TREE_TYPE (parm)));"}, {"sha": "85033a998654c0db2b1b4644d5497da0f0bf9f91", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -2208,7 +2208,7 @@ gimplify_self_mod_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n   /* For POINTERs increment, use POINTER_PLUS_EXPR.  */\n   if (POINTER_TYPE_P (TREE_TYPE (lhs)))\n     {\n-      rhs = fold_convert_loc (loc, sizetype, rhs);\n+      rhs = convert_to_ptrofftype_loc (loc, rhs);\n       if (arith_code == MINUS_EXPR)\n \trhs = fold_build1_loc (loc, NEGATE_EXPR, TREE_TYPE (rhs), rhs);\n       arith_code = POINTER_PLUS_EXPR;"}, {"sha": "abf88778f9e42b313175acd04c140de6173d8d74", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -346,7 +346,7 @@ clast_to_gcc_expression (tree type, struct clast_expr *e, ivs_params_p ip)\n \t\ttree name = clast_name_to_gcc (t->var, ip);\n \n \t\tif (POINTER_TYPE_P (TREE_TYPE (name)) != POINTER_TYPE_P (type))\n-\t\t  name = fold_convert (sizetype, name);\n+\t\t  name = convert_to_ptrofftype (name);\n \n \t\tname = fold_convert (type, name);\n \t\treturn name;\n@@ -357,7 +357,7 @@ clast_to_gcc_expression (tree type, struct clast_expr *e, ivs_params_p ip)\n \t\ttree name = clast_name_to_gcc (t->var, ip);\n \n \t\tif (POINTER_TYPE_P (TREE_TYPE (name)) != POINTER_TYPE_P (type))\n-\t\t  name = fold_convert (sizetype, name);\n+\t\t  name = convert_to_ptrofftype (name);\n \n \t\tname = fold_convert (type, name);\n \n@@ -369,7 +369,7 @@ clast_to_gcc_expression (tree type, struct clast_expr *e, ivs_params_p ip)\n \t\ttree cst = gmp_cst_to_tree (type, t->val);\n \n \t\tif (POINTER_TYPE_P (TREE_TYPE (name)) != POINTER_TYPE_P (type))\n-\t\t  name = fold_convert (sizetype, name);\n+\t\t  name = convert_to_ptrofftype (name);\n \n \t\tname = fold_convert (type, name);\n \n@@ -1064,7 +1064,7 @@ graphite_create_new_loop_guard (edge entry_edge, struct clast_for *stmt,\n   else\n     {\n       tree one = (POINTER_TYPE_P (*type)\n-\t\t  ? size_one_node\n+\t\t  ? convert_to_ptrofftype (integer_one_node)\n \t\t  : fold_convert (*type, integer_one_node));\n       /* Adding +1 and using LT_EXPR helps with loop latches that have a\n \t loop iteration count of \"PARAMETER - 1\".  For PARAMETER == 0 this becomes"}, {"sha": "206df46bd19a8fa9cdcca01dd113f673d573fb73", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -3219,9 +3219,6 @@ rewrite_commutative_reductions_out_of_ssa (scop_p scop)\n     }\n }\n \n-/* Java does not initialize long_long_integer_type_node.  */\n-#define my_long_long (long_long_integer_type_node ? long_long_integer_type_node : ssizetype)\n-\n /* Can all ivs be represented by a signed integer?\n    As CLooG might generate negative values in its expressions, signed loop ivs\n    are required in the backend. */\n@@ -3246,16 +3243,14 @@ scop_ivs_can_be_represented (scop_p scop)\n \t  tree type = TREE_TYPE (res);\n \n \t  if (TYPE_UNSIGNED (type)\n-\t      && TYPE_PRECISION (type) >= TYPE_PRECISION (my_long_long))\n+\t      && TYPE_PRECISION (type) >= TYPE_PRECISION (long_long_integer_type_node))\n \t    return false;\n \t}\n     }\n \n   return true;\n }\n \n-#undef my_long_long\n-\n /* Builds the polyhedral representation for a SESE region.  */\n \n void"}, {"sha": "e42f7e9bb3210f0aee69abd316decd44faae8603", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -3246,17 +3246,17 @@ verify_gimple_assign_unary (gimple stmt)\n       {\n \t/* Allow conversions between integral types and pointers only if\n \t   there is no sign or zero extension involved.\n-\t   For targets were the precision of sizetype doesn't match that\n+\t   For targets were the precision of ptrofftype doesn't match that\n \t   of pointers we need to allow arbitrary conversions from and\n-\t   to sizetype.  */\n+\t   to ptrofftype.  */\n \tif ((POINTER_TYPE_P (lhs_type)\n \t     && INTEGRAL_TYPE_P (rhs1_type)\n \t     && (TYPE_PRECISION (lhs_type) >= TYPE_PRECISION (rhs1_type)\n-\t\t || rhs1_type == sizetype))\n+\t\t || ptrofftype_p (rhs1_type)))\n \t    || (POINTER_TYPE_P (rhs1_type)\n \t\t&& INTEGRAL_TYPE_P (lhs_type)\n \t\t&& (TYPE_PRECISION (rhs1_type) >= TYPE_PRECISION (lhs_type)\n-\t\t    || lhs_type == sizetype)))\n+\t\t    || ptrofftype_p (sizetype))))\n \t  return false;\n \n \t/* Allow conversion from integer to offset type and vice versa.  */"}, {"sha": "fbd61c08ea610943daf85d77999064821145b96c", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -262,8 +262,6 @@ static tree\n chrec_fold_plus_1 (enum tree_code code, tree type,\n \t\t   tree op0, tree op1)\n {\n-  tree op1_type = code == POINTER_PLUS_EXPR ? sizetype : type;\n-\n   if (automatically_generated_chrec_p (op0)\n       || automatically_generated_chrec_p (op1))\n     return chrec_fold_automatically_generated_operands (op0, op1);\n@@ -327,9 +325,15 @@ chrec_fold_plus_1 (enum tree_code code, tree type,\n \t\t&& size < PARAM_VALUE (PARAM_SCEV_MAX_EXPR_SIZE))\n \t      return build2 (code, type, op0, op1);\n \t    else if (size < PARAM_VALUE (PARAM_SCEV_MAX_EXPR_SIZE))\n-\t      return fold_build2 (code, type,\n-\t\t\t\t  fold_convert (type, op0),\n-\t\t\t\t  fold_convert (op1_type, op1));\n+\t      {\n+\t\tif (code == POINTER_PLUS_EXPR)\n+\t\t  return fold_build_pointer_plus (fold_convert (type, op0),\n+\t\t\t\t\t\t  op1);\n+\t\telse\n+\t\t  return fold_build2 (code, type,\n+\t\t\t\t      fold_convert (type, op0),\n+\t\t\t\t      fold_convert (type, op1));\n+\t      }\n \t    else\n \t      return chrec_dont_know;\n \t  }"}, {"sha": "f1db27a007d50388ac4c2aef7c43ea3a31402e5f", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -242,9 +242,10 @@ build_size_arg_loc (location_t loc, tree nb_iter, tree op,\n \t\t    gimple_seq *stmt_list)\n {\n   gimple_seq stmts;\n-  tree x = size_binop_loc (loc, MULT_EXPR,\n-  \t\t\t   fold_convert_loc (loc, sizetype, nb_iter),\n-\t\t\t   TYPE_SIZE_UNIT (TREE_TYPE (op)));\n+  tree x = fold_build2_loc (loc, MULT_EXPR, size_type_node,\n+\t\t\t    fold_convert_loc (loc, size_type_node, nb_iter),\n+\t\t\t    fold_convert_loc (loc, size_type_node,\n+\t\t\t\t\t      TYPE_SIZE_UNIT (TREE_TYPE (op))));\n   x = force_gimple_operand (x, &stmts, true, NULL);\n   gimple_seq_add_seq (stmt_list, stmts);\n \n@@ -275,9 +276,7 @@ generate_memset_zero (gimple stmt, tree op0, tree nb_iter,\n   addr_base = fold_convert_loc (loc, sizetype, addr_base);\n \n   /* Test for a negative stride, iterating over every element.  */\n-  if (integer_zerop (size_binop (PLUS_EXPR,\n-\t\t\t\t TYPE_SIZE_UNIT (TREE_TYPE (op0)),\n-\t\t\t\t fold_convert (sizetype, DR_STEP (dr)))))\n+  if (tree_int_cst_sgn (DR_STEP (dr)) == -1)\n     {\n       addr_base = size_binop_loc (loc, MINUS_EXPR, addr_base,\n \t\t\t\t  fold_convert_loc (loc, sizetype, nb_bytes));"}, {"sha": "f9b4599491717d2c4b6dcb6fea239aea33949100", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -851,7 +851,7 @@ mf_xform_derefs_1 (gimple_stmt_iterator *iter, tree *tp,\n \n         limit = fold_build2_loc (location, MINUS_EXPR, mf_uintptr_type,\n                              fold_build2_loc (location, PLUS_EXPR, mf_uintptr_type,\n-\t\t\t\t\t  convert (mf_uintptr_type, addr),\n+\t\t\t\t\t  fold_convert (mf_uintptr_type, addr),\n \t\t\t\t\t  size),\n                              integer_one_node);\n       }\n@@ -897,20 +897,17 @@ mf_xform_derefs_1 (gimple_stmt_iterator *iter, tree *tp,\n           return;\n \n         bpu = bitsize_int (BITS_PER_UNIT);\n-        ofs = convert (bitsizetype, TREE_OPERAND (t, 2));\n+        ofs = fold_convert (bitsizetype, TREE_OPERAND (t, 2));\n         rem = size_binop_loc (location, TRUNC_MOD_EXPR, ofs, bpu);\n-        ofs = fold_convert_loc (location,\n-\t\t\t\tsizetype,\n-\t\t\t\tsize_binop_loc (location,\n-\t\t\t\t\t\tTRUNC_DIV_EXPR, ofs, bpu));\n+        ofs = size_binop_loc (location, TRUNC_DIV_EXPR, ofs, bpu);\n \n-        size = convert (bitsizetype, TREE_OPERAND (t, 1));\n+        size = fold_convert (bitsizetype, TREE_OPERAND (t, 1));\n         size = size_binop_loc (location, PLUS_EXPR, size, rem);\n         size = size_binop_loc (location, CEIL_DIV_EXPR, size, bpu);\n-        size = convert (sizetype, size);\n+        size = fold_convert (sizetype, size);\n \n         addr = TREE_OPERAND (TREE_OPERAND (t, 0), 0);\n-        addr = convert (ptr_type_node, addr);\n+        addr = fold_convert (ptr_type_node, addr);\n         addr = fold_build_pointer_plus_loc (location, addr, ofs);\n \n         base = addr;\n@@ -1049,7 +1046,8 @@ mx_register_decls (tree decl, gimple_seq seq, location_t location)\n \n \t  /* Variable-sized objects should have sizes already been\n \t     gimplified when we got here. */\n-\t  size = convert (size_type_node, TYPE_SIZE_UNIT (TREE_TYPE (decl)));\n+\t  size = fold_convert (size_type_node,\n+\t\t\t       TYPE_SIZE_UNIT (TREE_TYPE (decl)));\n \t  gcc_assert (is_gimple_val (size));\n \n \n@@ -1233,11 +1231,11 @@ mudflap_register_call (tree obj, tree object_size, tree varname)\n   tree arg, call_stmt;\n \n   arg = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (obj)), obj);\n-  arg = convert (ptr_type_node, arg);\n+  arg = fold_convert (ptr_type_node, arg);\n \n   call_stmt = build_call_expr (mf_register_fndecl, 4,\n \t\t\t       arg,\n-\t\t\t       convert (size_type_node, object_size),\n+\t\t\t       fold_convert (size_type_node, object_size),\n \t\t\t       /* __MF_TYPE_STATIC */\n \t\t\t       build_int_cst (integer_type_node, 4),\n \t\t\t       varname);"}, {"sha": "7dfb480e9e1def9ec18291e28098f676cc149714", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -618,11 +618,12 @@ suitable_reference_p (struct data_reference *a, enum ref_step_type *ref_step)\n static void\n aff_combination_dr_offset (struct data_reference *dr, aff_tree *offset)\n {\n+  tree type = TREE_TYPE (DR_OFFSET (dr));\n   aff_tree delta;\n \n-  tree_to_aff_combination_expand (DR_OFFSET (dr), sizetype, offset,\n+  tree_to_aff_combination_expand (DR_OFFSET (dr), type, offset,\n \t\t\t\t  &name_expansions);\n-  aff_combination_const (&delta, sizetype, tree_to_double_int (DR_INIT (dr)));\n+  aff_combination_const (&delta, type, tree_to_double_int (DR_INIT (dr)));\n   aff_combination_add (offset, &delta);\n }\n \n@@ -667,7 +668,7 @@ determine_offset (struct data_reference *a, struct data_reference *b,\n   aff_combination_scale (&baseb, double_int_minus_one);\n   aff_combination_add (&diff, &baseb);\n \n-  tree_to_aff_combination_expand (DR_STEP (a), sizetype,\n+  tree_to_aff_combination_expand (DR_STEP (a), TREE_TYPE (DR_STEP (a)),\n \t\t\t\t  &step, &name_expansions);\n   return aff_combination_constant_multiple_p (&diff, &step, off);\n }\n@@ -1050,8 +1051,8 @@ valid_initializer_p (struct data_reference *ref,\n   aff_combination_scale (&base, double_int_minus_one);\n   aff_combination_add (&diff, &base);\n \n-  tree_to_aff_combination_expand (DR_STEP (root), sizetype, &step,\n-\t\t\t\t  &name_expansions);\n+  tree_to_aff_combination_expand (DR_STEP (root), TREE_TYPE (DR_STEP (root)),\n+\t\t\t\t  &step, &name_expansions);\n   if (!aff_combination_constant_multiple_p (&diff, &step, &off))\n     return false;\n "}, {"sha": "98f7d6787923809ba1fb6388a7108bd856e3b98e", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -241,7 +241,8 @@ prepare_instrumented_value (gimple_stmt_iterator *gsi, histogram_value value)\n {\n   tree val = value->hvalue.value;\n   if (POINTER_TYPE_P (TREE_TYPE (val)))\n-    val = fold_convert (sizetype, val);\n+    val = fold_convert (build_nonstandard_integer_type\n+\t\t\t  (TYPE_PRECISION (TREE_TYPE (val)), 1), val);\n   return force_gimple_operand_gsi (gsi, fold_convert (gcov_type_node, val),\n \t\t\t\t   true, NULL_TREE, true, GSI_SAME_STMT);\n }"}, {"sha": "646b4f1c5683602a5ec906044951c24ac88f4274", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -1727,7 +1727,7 @@ interpret_rhs_expr (struct loop *loop, gimple at_stmt,\n       chrec1 = analyze_scalar_evolution (loop, rhs1);\n       chrec2 = analyze_scalar_evolution (loop, rhs2);\n       chrec1 = chrec_convert (type, chrec1, at_stmt);\n-      chrec2 = chrec_convert (sizetype, chrec2, at_stmt);\n+      chrec2 = chrec_convert (TREE_TYPE (rhs2), chrec2, at_stmt);\n       res = chrec_fold_plus (type, chrec1, chrec2);\n       break;\n "}, {"sha": "34479b33ae1c7ad9fddf955f1fcb39a5ad53303e", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -279,24 +279,26 @@ tree_mem_ref_addr (tree type, tree mem_ref)\n   if (act_elem)\n     {\n       if (step)\n-\tact_elem = fold_build2 (MULT_EXPR, sizetype, act_elem, step);\n+\tact_elem = fold_build2 (MULT_EXPR, TREE_TYPE (act_elem),\n+\t\t\t\tact_elem, step);\n       addr_off = act_elem;\n     }\n \n   act_elem = TMR_INDEX2 (mem_ref);\n   if (act_elem)\n     {\n       if (addr_off)\n-\taddr_off = fold_build2 (PLUS_EXPR, sizetype, addr_off, act_elem);\n+\taddr_off = fold_build2 (PLUS_EXPR, TREE_TYPE (addr_off),\n+\t\t\t\taddr_off, act_elem);\n       else\n \taddr_off = act_elem;\n     }\n \n   if (offset && !integer_zerop (offset))\n     {\n-      offset = fold_convert (sizetype, offset);\n       if (addr_off)\n-\taddr_off = fold_build2 (PLUS_EXPR, sizetype, addr_off, offset);\n+\taddr_off = fold_build2 (PLUS_EXPR, TREE_TYPE (addr_off), addr_off,\n+\t\t\t\tfold_convert (TREE_TYPE (addr_off), offset));\n       else\n \taddr_off = offset;\n     }"}, {"sha": "6cf14383f6c063f8efd569b501bcb9099054dbc5", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -1035,7 +1035,7 @@ find_bivs (struct ivopts_data *data)\n       if (step)\n \t{\n \t  if (POINTER_TYPE_P (type))\n-\t    step = fold_convert (sizetype, step);\n+\t    step = convert_to_ptrofftype (step);\n \t  else\n \t    step = fold_convert (type, step);\n \t}"}, {"sha": "f6e2e9c937f358e412a63a571e3f6a5fdb3b2240", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -100,9 +100,9 @@ create_iv (tree base, tree step, tree var, struct loop *loop,\n     {\n       if (TREE_CODE (base) == ADDR_EXPR)\n \tmark_addressable (TREE_OPERAND (base, 0));\n-      step = fold_convert (sizetype, step);\n+      step = convert_to_ptrofftype (step);\n       if (incr_op == MINUS_EXPR)\n-\tstep = fold_build1 (NEGATE_EXPR, sizetype, step);\n+\tstep = fold_build1 (NEGATE_EXPR, TREE_TYPE (step), step);\n       incr_op = POINTER_PLUS_EXPR;\n     }\n   /* Gimplify the step if necessary.  We put the computations in front of the\n@@ -705,7 +705,7 @@ determine_exit_conditions (struct loop *loop, struct tree_niter_desc *desc,\n   enum tree_code cmp = desc->cmp;\n   tree cond = boolean_true_node, assum;\n \n-  /* For pointers, do the arithmetics in the type of step (sizetype).  */\n+  /* For pointers, do the arithmetics in the type of step.  */\n   base = fold_convert (type, base);\n   bound = fold_convert (type, bound);\n "}, {"sha": "d784bac6818dceab657912cfe8cc695f1ad1ee6c", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -3099,12 +3099,12 @@ create_expression_by_pieces (basic_block block, pre_expr expr,\n \t\t\t\t\t\t\t stmts, domstmt);\n \t      if (!genop1 || !genop2)\n \t\treturn NULL_TREE;\n-\t      /* Ensure op2 is a sizetype for POINTER_PLUS_EXPR.  It\n+\t      /* Ensure op2 is a ptrofftype for POINTER_PLUS_EXPR.  It\n \t\t may be a constant with the wrong type.  */\n \t      if (nary->opcode == POINTER_PLUS_EXPR)\n \t\t{\n \t\t  genop1 = fold_convert (nary->type, genop1);\n-\t\t  genop2 = fold_convert (sizetype, genop2);\n+\t\t  genop2 = convert_to_ptrofftype (genop2);\n \t\t}\n \t      else\n \t\t{"}, {"sha": "79d485289c1fddb9b9e4a068184a185d9002802f", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -3260,7 +3260,7 @@ get_constraint_for_1 (tree t, VEC (ce_s, heap) **results, bool address_p,\n \t    {\n \t      struct constraint_expr cs;\n \t      varinfo_t vi, curr;\n-\t      tree off = double_int_to_tree (sizetype, mem_ref_offset (t));\n+\t      tree off = convert_to_ptrofftype (TREE_OPERAND (t, 1));\n \t      get_constraint_for_ptr_offset (TREE_OPERAND (t, 0), off, results);\n \t      do_deref (results);\n "}, {"sha": "820431fae0b870913338eef773b4a035d53c0a62", "filename": "gcc/tree.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -5323,6 +5323,15 @@ ptrofftype_p (tree type)\n \t  && TYPE_UNSIGNED (type) == TYPE_UNSIGNED (sizetype));\n }\n \n+/* Return OFF converted to a pointer offset type suitable as offset for\n+   POINTER_PLUS_EXPR.  Use location LOC for this conversion.  */\n+static inline tree\n+convert_to_ptrofftype_loc (location_t loc, tree off)\n+{\n+  return fold_convert_loc (loc, sizetype, off);\n+}\n+#define convert_to_ptrofftype(t) convert_to_ptrofftype_loc (UNKNOWN_LOCATION, t)\n+\n /* Build and fold a POINTER_PLUS_EXPR at LOC offsetting PTR by OFF.  */\n static inline tree\n fold_build_pointer_plus_loc (location_t loc, tree ptr, tree off)"}, {"sha": "ca568136cb36da9af74db2db77e7643245cb8fc6", "filename": "gcc/varasm.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d82a1c872bf48069028cf7753b171121991c95c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=0d82a1c872bf48069028cf7753b171121991c95c", "patch": "@@ -4628,9 +4628,10 @@ output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align)\n static unsigned HOST_WIDE_INT\n array_size_for_constructor (tree val)\n {\n-  tree max_index, i;\n+  tree max_index;\n   unsigned HOST_WIDE_INT cnt;\n   tree index, value, tmp;\n+  double_int i;\n \n   /* This code used to attempt to handle string constants that are not\n      arrays of single-bytes, but nothing else does, so there's no point in\n@@ -4652,14 +4653,15 @@ array_size_for_constructor (tree val)\n \n   /* Compute the total number of array elements.  */\n   tmp = TYPE_MIN_VALUE (TYPE_DOMAIN (TREE_TYPE (val)));\n-  i = size_binop (MINUS_EXPR, fold_convert (sizetype, max_index),\n-\t\t  fold_convert (sizetype, tmp));\n-  i = size_binop (PLUS_EXPR, i, size_one_node);\n+  i = double_int_sub (tree_to_double_int (max_index), tree_to_double_int (tmp));\n+  i = double_int_add (i, double_int_one);\n \n   /* Multiply by the array element unit size to find number of bytes.  */\n-  i = size_binop (MULT_EXPR, i, TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (val))));\n+  i = double_int_mul (i, tree_to_double_int\n+\t\t           (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (val)))));\n \n-  return tree_low_cst (i, 1);\n+  gcc_assert (double_int_fits_in_uhwi_p (i));\n+  return i.low;\n }\n \n /* Other datastructures + helpers for output_constructor.  */"}]}