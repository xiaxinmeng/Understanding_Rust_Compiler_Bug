{"sha": "3ae564ea7410e99e533bc87f999a04b2647c831d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FlNTY0ZWE3NDEwZTk5ZTUzM2JjODdmOTk5YTA0YjI2NDdjODMxZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-11T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-11T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "c923e70c8e0661e55b58231b8ac99c572d9cd106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c923e70c8e0661e55b58231b8ac99c572d9cd106"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ae564ea7410e99e533bc87f999a04b2647c831d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae564ea7410e99e533bc87f999a04b2647c831d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ae564ea7410e99e533bc87f999a04b2647c831d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae564ea7410e99e533bc87f999a04b2647c831d/comments", "author": null, "committer": null, "parents": [{"sha": "d796cc7a3e719cc36f1851ca322e2877b974691b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d796cc7a3e719cc36f1851ca322e2877b974691b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d796cc7a3e719cc36f1851ca322e2877b974691b"}], "stats": {"total": 200, "additions": 199, "deletions": 1}, "files": [{"sha": "4bcb310d8864234451b93f9a7d2de040d32ca7d6", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae564ea7410e99e533bc87f999a04b2647c831d/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae564ea7410e99e533bc87f999a04b2647c831d/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=3ae564ea7410e99e533bc87f999a04b2647c831d", "patch": "@@ -1,3 +1,7 @@\n+2021-08-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* mklog.py: Support additional PRs without PR prefix.\n+\n 2021-08-03  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_update_version.py: Ignore problematic"}, {"sha": "3eea63b5a931a378ff1b71b18cd317f653436b48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae564ea7410e99e533bc87f999a04b2647c831d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae564ea7410e99e533bc87f999a04b2647c831d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ae564ea7410e99e533bc87f999a04b2647c831d", "patch": "@@ -1,3 +1,70 @@\n+2021-08-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/80355\n+\t* config/i386/i386-expand.c (expand_vec_perm_even_odd): Return false\n+\tfor V32HImode if !TARGET_AVX512BW.\n+\t(ix86_vectorize_vec_perm_const) <case E_V32HImode, case E_V64QImode>:\n+\tIf !TARGET_AVX512BW and TARGET_AVX512F and d.testing_p, don't fail\n+\tearly, but actually check the permutation.\n+\n+2021-08-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101809\n+\t* tree-vect-stmts.c (get_load_store_type): Allow emulated\n+\tgathers with offset vector nunits being a constant multiple\n+\tof the data vector nunits.\n+\t(vect_get_gather_scatter_ops): Use the appropriate nunits\n+\tfor the offset vector defs.\n+\t(vectorizable_store): Adjust call to\n+\tvect_get_gather_scatter_ops.\n+\t(vectorizable_load): Likewise.  Handle the case of less\n+\toffset vectors than data vectors.\n+\n+2021-08-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/80355\n+\t* config/i386/sse.md (*avx512f_shuf_<shuffletype>64x2_1<mask_name>_1,\n+\t*avx512f_shuf_<shuffletype>32x4_1<mask_name>_1): New define_insn\n+\tpatterns.\n+\n+2021-08-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101801\n+\tPR tree-optimization/101819\n+\t* tree-vectorizer.h (vect_emulated_vector_p): Declare.\n+\t* tree-vect-loop.c (vect_emulated_vector_p): New function.\n+\t(vectorizable_reduction): Re-instantiate a check for emulated\n+\toperations.\n+\t* tree-vect-stmts.c (vectorizable_shift): Likewise.\n+\t(vectorizable_operation): Likewise.  Cost emulated vector\n+\toperations according to the scalar sequence synthesized by\n+\tvector lowering.\n+\n+2021-08-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/101824\n+\t* tree-nested.c (get_frame_field): Mark the COMPONENT_REF as\n+\tvolatile in case the variable was.\n+\n+2021-08-10  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101804\n+\t* config/i386/constraints.md (BC): Document for integer SSE\n+\tconstant all bits set operand.\n+\t(BF): New constraint for const floating-point all bits set\n+\tvectors.\n+\t* config/i386/i386.c (standard_sse_constant_p): Likewise.\n+\t(standard_sse_constant_opcode): Likewise.\n+\t* config/i386/sse.md (sseconstm1): New mode attribute.\n+\t(mov<mode>_internal): Replace BC with <sseconstm1>.\n+\n+2021-08-10  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/sse.md (cond_<insn><mode>): New expander.\n+\t(VI248_AVX512VLBW): New mode iterator.\n+\t* config/i386/predicates.md\n+\t(nonimmediate_or_const_vec_dup_operand): New predicate.\n+\n 2021-08-09  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR tree-optimization/101741"}, {"sha": "4cf952ce22d9ea6b36508692ff945d696b9d3c96", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae564ea7410e99e533bc87f999a04b2647c831d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae564ea7410e99e533bc87f999a04b2647c831d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=3ae564ea7410e99e533bc87f999a04b2647c831d", "patch": "@@ -1 +1 @@\n-20210810\n+20210811"}, {"sha": "74ab186b5128f1097e2077b7778f733137bff550", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae564ea7410e99e533bc87f999a04b2647c831d/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae564ea7410e99e533bc87f999a04b2647c831d/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=3ae564ea7410e99e533bc87f999a04b2647c831d", "patch": "@@ -1,3 +1,9 @@\n+2021-08-10  Martin Uecker  <muecker@gwdg.de>\n+\n+\tPR c/29970\n+\t* c-typeck.c (c_expr_sizeof_expr): Evaluate\n+\tsize expressions for structs of variable size.\n+\n 2021-08-06  Tamar Christina  <tamar.christina@arm.com>\n \n \t* c-decl.c (c_simulate_enum_decl): Pass vec<> by pointer."}, {"sha": "fbd4af2eb06212a76953065de073a7fc1b7182bb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae564ea7410e99e533bc87f999a04b2647c831d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae564ea7410e99e533bc87f999a04b2647c831d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3ae564ea7410e99e533bc87f999a04b2647c831d", "patch": "@@ -1,3 +1,45 @@\n+2021-08-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_member_declaration): Move odsd declaration\n+\tbefore cp_parser_using_declaration call to avoid errors with\n+\tGCC 4.8 to 6.\n+\n+2021-08-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.h (struct cp_omp_declare_simd_data): Remove\n+\tin_omp_attribute_pragma and clauses members, add loc and attribs.\n+\t(struct cp_oacc_routine_data): Remove loc member, add clauses\n+\tmember.\n+\t* parser.c (cp_finalize_omp_declare_simd): New function.\n+\t(cp_parser_handle_statement_omp_attributes): Mention in\n+\tfunction comment the function is used also for\n+\tattribute-declaration.\n+\t(cp_parser_handle_directive_omp_attributes): New function.\n+\t(cp_parser_statement): Don't call\n+\tcp_parser_handle_statement_omp_attributes if statement doesn't\n+\thave attribute-specifier-seq at the beginning at all or if\n+\tif those attributes don't appertain to the statement.\n+\t(cp_parser_simple_declaration): Call\n+\tcp_parser_handle_directive_omp_attributes and\n+\tcp_finalize_omp_declare_simd.\n+\t(cp_parser_explicit_instantiation): Likewise.\n+\t(cp_parser_init_declarator): Initialize prefix_attributes\n+\tonly after parsing declarators.\n+\t(cp_parser_direct_declarator): Call\n+\tcp_parser_handle_directive_omp_attributes and\n+\tcp_finalize_omp_declare_simd.\n+\t(cp_parser_member_declaration): Likewise.\n+\t(cp_parser_single_declaration): Likewise.\n+\t(cp_parser_omp_declare_simd): Don't initialize\n+\tdata.in_omp_attribute_pragma, instead initialize\n+\tdata.attribs[0] and data.attribs[1].\n+\t(cp_finish_omp_declare_variant): Remove\n+\tin_omp_attribute_pragma argument, instead use\n+\tparser->lexer->in_omp_attribute_pragma.\n+\t(cp_parser_late_parsing_omp_declare_simd): Adjust\n+\tcp_finish_omp_declare_variant caller.  Handle attribute-syntax\n+\tdeclare simd/variant.\n+\n 2021-08-06  Tamar Christina  <tamar.christina@arm.com>\n \n \t* cp-objcp-common.h (cxx_simulate_enum_decl): Pass vec<> by pointer."}, {"sha": "07d98f76569ea915018972e59d564c6e4a45e42e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae564ea7410e99e533bc87f999a04b2647c831d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae564ea7410e99e533bc87f999a04b2647c831d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ae564ea7410e99e533bc87f999a04b2647c831d", "patch": "@@ -1,3 +1,72 @@\n+2021-08-10  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR libfortran/101305\n+\tPR fortran/101660\n+\tPR testsuite/101847\n+\t* lib/gfortran.exp (gfortran_init): Remove -I$specpath/libgfortran\n+\tfrom the string used to set GFORTRAN_UNDER_TEST.\n+\n+2021-08-10  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR tree-optimization/101809\n+\t* gcc.target/i386/pr88531-1a.c: Enable for all targets.\n+\n+2021-08-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/80355\n+\t* gcc.target/i386/avx512f-pr80355-2.c: New test.\n+\n+2021-08-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/80355\n+\t* gcc.target/i386/avx512f-pr80355-1.c: New test.\n+\n+2021-08-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/gomp/attrs-1.C (bar): Add missing semicolon after\n+\t[[omp::directive (threadprivate (t2))]].  Add tests with\n+\tif/while/switch after parallel in attribute syntax.\n+\t(corge): Add missing omp:: before directive.\n+\t* g++.dg/gomp/attrs-2.C (bar): Add missing semicolon after\n+\t[[omp::directive (threadprivate (t2))]].\n+\t* g++.dg/gomp/attrs-10.C: New test.\n+\t* g++.dg/gomp/attrs-11.C: New test.\n+\n+2021-08-10  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/amxbf16-dpbf16ps-2.c: Fix typos.\n+\n+2021-08-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/101824\n+\t* gcc.dg/tree-ssa/pr101824.c: New testcase.\n+\n+2021-08-10  Martin Uecker  <muecker@gwdg.de>\n+\n+\tPR c/29970\n+\t* gcc.dg/vla-stexp-1.c: New test.\n+\n+2021-08-10  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101804\n+\t* gcc.target/i386/avx2-gather-2.c: Pass -march=skylake instead\n+\tof \"-mavx2 -mtune=skylake\".  Scan vpcmpeqd.\n+\n+2021-08-10  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/cond_op_shift_d-1.c: New test.\n+\t* gcc.target/i386/cond_op_shift_d-2.c: New test.\n+\t* gcc.target/i386/cond_op_shift_q-1.c: New test.\n+\t* gcc.target/i386/cond_op_shift_q-2.c: New test.\n+\t* gcc.target/i386/cond_op_shift_ud-1.c: New test.\n+\t* gcc.target/i386/cond_op_shift_ud-2.c: New test.\n+\t* gcc.target/i386/cond_op_shift_uq-1.c: New test.\n+\t* gcc.target/i386/cond_op_shift_uq-2.c: New test.\n+\t* gcc.target/i386/cond_op_shift_uw-1.c: New test.\n+\t* gcc.target/i386/cond_op_shift_uw-2.c: New test.\n+\t* gcc.target/i386/cond_op_shift_w-1.c: New test.\n+\t* gcc.target/i386/cond_op_shift_w-2.c: New test.\n+\n 2021-08-09  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gcc.dg/pr101741.c: New."}, {"sha": "12685c78e9111dad3874106ed9f353304b506f59", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae564ea7410e99e533bc87f999a04b2647c831d/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae564ea7410e99e533bc87f999a04b2647c831d/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=3ae564ea7410e99e533bc87f999a04b2647c831d", "patch": "@@ -1,3 +1,13 @@\n+2021-08-10  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR libfortran/101305\n+\tPR fortran/101660\n+\tPR testsuite/101847\n+\t* Makefile.am (ISO_Fortran_binding.h): Create include/ in the build dir\n+\tand copy the include file to it.\n+\t(clean-local): Add for removing the 'include' directory.\n+\t* Makefile.in: Regenerate.\n+\n 2021-07-28  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR libfortran/101317"}]}