{"sha": "c8cb7e062664e5db5969de4239be513dfd6ab1d1", "node_id": "C_kwDOANBUbNoAKGM4Y2I3ZTA2MjY2NGU1ZGI1OTY5ZGU0MjM5YmU1MTNkZmQ2YWIxZDE", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T16:09:16Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2023-01-25T13:36:21Z"}, "message": "arm: improve tests and fix vnegq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vnegq_f<mode>, mve_vnegq_s<mode>):\n\tFix spacing.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vnegq_f16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vnegq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_x_s8.c: Likewise.\n\t* gcc.target/arm/simd/mve-vneg.c: Update test.\n\t* gcc.target/arm/simd/mve-vshr.c: Likewise", "tree": {"sha": "db0861547769a955dae8b572fa956c6bbe0f5826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db0861547769a955dae8b572fa956c6bbe0f5826"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8cb7e062664e5db5969de4239be513dfd6ab1d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cb7e062664e5db5969de4239be513dfd6ab1d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8cb7e062664e5db5969de4239be513dfd6ab1d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cb7e062664e5db5969de4239be513dfd6ab1d1/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16452c63e10f7a44c70bec0216358ac405abfcf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16452c63e10f7a44c70bec0216358ac405abfcf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16452c63e10f7a44c70bec0216358ac405abfcf6"}], "stats": {"total": 480, "additions": 433, "deletions": 47}, "files": [{"sha": "7767f945a72bfd17aea74c594a98814e1babb93e", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=c8cb7e062664e5db5969de4239be513dfd6ab1d1", "patch": "@@ -252,7 +252,7 @@\n \t(neg:MVE_0 (match_operand:MVE_0 1 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vneg.f%#<V_sz_elem>  %q0, %q1\"\n+  \"vneg.f%#<V_sz_elem>\\t%q0, %q1\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n@@ -401,7 +401,7 @@\n \t(neg:MVE_2 (match_operand:MVE_2 1 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vneg.s%#<V_sz_elem>  %q0, %q1\"\n+  \"vneg.s%#<V_sz_elem>\\t%q0, %q1\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n "}, {"sha": "9853cf6e6dd0423af37405aea356f60cc5557082", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_f16.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_f16.c?ref=c8cb7e062664e5db5969de4239be513dfd6ab1d1", "patch": "@@ -1,13 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvneg.f16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a)\n {\n   return vnegq_f16 (a);\n }\n \n-/* { dg-final { scan-assembler \"vneg.f16\"  }  } */\n+\n+/*\n+**foo1:\n+**\t...\n+**\tvneg.f16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+float16x8_t\n+foo1 (float16x8_t a)\n+{\n+  return vnegq (a);\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "489cfc760ba7594c4e98ba254ee3348a67b09a30", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_f32.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_f32.c?ref=c8cb7e062664e5db5969de4239be513dfd6ab1d1", "patch": "@@ -1,13 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvneg.f32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a)\n {\n   return vnegq_f32 (a);\n }\n \n-/* { dg-final { scan-assembler \"vneg.f32\"  }  } */\n+\n+/*\n+**foo1:\n+**\t...\n+**\tvneg.f32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+float32x4_t\n+foo1 (float32x4_t a)\n+{\n+  return vnegq (a);\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "c8b307ea50e90abeed63a13cf177cf5bfa6c9a14", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_m_f16.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_f16.c?ref=c8cb7e062664e5db5969de4239be513dfd6ab1d1", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.f16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n {\n   return vnegq_m_f16 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vnegt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.f16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n {\n   return vnegq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a530a05e644f9a828091dbd195bac6ade0a9de04", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_m_f32.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_f32.c?ref=c8cb7e062664e5db5969de4239be513dfd6ab1d1", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.f32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n {\n   return vnegq_m_f32 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vnegt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.f32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n {\n   return vnegq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "46d6e794dbe1895cf67e4ad031e7f58534f7c671", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_m_s16.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_s16.c?ref=c8cb7e062664e5db5969de4239be513dfd6ab1d1", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n {\n   return vnegq_m_s16 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vnegt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n {\n   return vnegq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5fb1f5c2a4cce37aa74be05141969a9a55acae38", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_m_s32.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_s32.c?ref=c8cb7e062664e5db5969de4239be513dfd6ab1d1", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n {\n   return vnegq_m_s32 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vnegt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n {\n   return vnegq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "868a968085874f83bfc7e28bbbf3e94a733ff8cb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_m_s8.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_s8.c?ref=c8cb7e062664e5db5969de4239be513dfd6ab1d1", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n {\n   return vnegq_m_s8 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vnegt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n {\n   return vnegq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3b518c8e0f5d48334ce0de1c20cb385a28fb2f0e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_s16.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_s16.c?ref=c8cb7e062664e5db5969de4239be513dfd6ab1d1", "patch": "@@ -1,21 +1,41 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n-/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvneg.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a)\n {\n   return vnegq_s16 (a);\n }\n \n-/* { dg-final { scan-assembler \"vneg.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvneg.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a)\n {\n   return vnegq (a);\n }\n \n-/* { dg-final { scan-assembler \"vneg.s16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f8682575892d8c69c6c1bd257a2d1ac4f45be41f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_s32.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_s32.c?ref=c8cb7e062664e5db5969de4239be513dfd6ab1d1", "patch": "@@ -1,21 +1,41 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n-/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvneg.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a)\n {\n   return vnegq_s32 (a);\n }\n \n-/* { dg-final { scan-assembler \"vneg.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvneg.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a)\n {\n   return vnegq (a);\n }\n \n-/* { dg-final { scan-assembler \"vneg.s32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1be5901740e813f132f284344d6c9b9db9075c99", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_s8.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_s8.c?ref=c8cb7e062664e5db5969de4239be513dfd6ab1d1", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvneg.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a)\n {\n   return vnegq_s8 (a);\n }\n \n-/* { dg-final { scan-assembler \"vneg.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvneg.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a)\n {\n   return vnegq (a);\n }\n \n-/* { dg-final { scan-assembler \"vneg.s8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "c10d6d2aebfa5079ec92734f043b7d434d34f99b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_x_f16.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_f16.c?ref=c8cb7e062664e5db5969de4239be513dfd6ab1d1", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.f16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, mve_pred16_t p)\n {\n   return vnegq_x_f16 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vnegt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.f16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, mve_pred16_t p)\n {\n   return vnegq_x (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0ee5ecc8262eccfcc31be561e9f7036a5fc3f6c7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_x_f32.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_f32.c?ref=c8cb7e062664e5db5969de4239be513dfd6ab1d1", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.f32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, mve_pred16_t p)\n {\n   return vnegq_x_f32 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vnegt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.f32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, mve_pred16_t p)\n {\n   return vnegq_x (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d774a055d72d6e8f13be40a5377862a10fffc39c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_x_s16.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_s16.c?ref=c8cb7e062664e5db5969de4239be513dfd6ab1d1", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, mve_pred16_t p)\n {\n   return vnegq_x_s16 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vnegt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, mve_pred16_t p)\n {\n   return vnegq_x (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "77bf1a67cfe0008db836d73856758cb8deb8a083", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_x_s32.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_s32.c?ref=c8cb7e062664e5db5969de4239be513dfd6ab1d1", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, mve_pred16_t p)\n {\n   return vnegq_x_s32 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vnegt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, mve_pred16_t p)\n {\n   return vnegq_x (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ca44512e37a532131019ab97bca80034bb694297", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_x_s8.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_s8.c?ref=c8cb7e062664e5db5969de4239be513dfd6ab1d1", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, mve_pred16_t p)\n {\n   return vnegq_x_s8 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vnegt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvnegt.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, mve_pred16_t p)\n {\n   return vnegq_x (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1379cae579f45d2972b5aa8c01f39db7d77d5705", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vneg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vneg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vneg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vneg.c?ref=c8cb7e062664e5db5969de4239be513dfd6ab1d1", "patch": "@@ -45,8 +45,8 @@ FUNC(f, float, 16, 8, -, vneg)\n \n /* MVE has only 128-bit vectors, so we can vectorize only half of the\n    functions above.  */\n-/* { dg-final { scan-assembler-times {vneg.s[0-9]+  q[0-9]+, q[0-9]+} 6 } } */\n-/* { dg-final { scan-assembler-times {vneg.f[0-9]+  q[0-9]+, q[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vneg.s[0-9]+\\tq[0-9]+, q[0-9]+} 6 } } */\n+/* { dg-final { scan-assembler-times {vneg.f[0-9]+\\tq[0-9]+, q[0-9]+} 2 } } */\n /* { dg-final { scan-assembler-times {vldr[bhw].[0-9]+\\tq[0-9]+} 8 } } */\n /* { dg-final { scan-assembler-times {vstr[bhw].[0-9]+\\tq[0-9]+} 8 } } */\n /* { dg-final { scan-assembler-not {orr\\tr[0-9]+, r[0-9]+, r[0-9]+} } } */"}, {"sha": "8c7adef9ed8f1010ff3c907969c430288298d648", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vshr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vshr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cb7e062664e5db5969de4239be513dfd6ab1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vshr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vshr.c?ref=c8cb7e062664e5db5969de4239be513dfd6ab1d1", "patch": "@@ -58,7 +58,7 @@ FUNC_IMM(u, uint, 8, 16, >>, vshrimm)\n /* Vector right shifts use vneg and left shifts.  */\n /* { dg-final { scan-assembler-times {vshl.s[0-9]+\\tq[0-9]+, q[0-9]+} 3 } } */\n /* { dg-final { scan-assembler-times {vshl.u[0-9]+\\tq[0-9]+, q[0-9]+} 3 } } */\n-/* { dg-final { scan-assembler-times {vneg.s[0-9]+  q[0-9]+, q[0-9]+} 6 } } */\n+/* { dg-final { scan-assembler-times {vneg.s[0-9]+\\tq[0-9]+, q[0-9]+} 6 } } */\n \n \n /* Shift by immediate.  */"}]}