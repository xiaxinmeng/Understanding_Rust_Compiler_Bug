{"sha": "dac655014e1c2260c7b55b2c3dcc0e8f9678aaef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFjNjU1MDE0ZTFjMjI2MGM3YjU1YjJjM2RjYzBlOGY5Njc4YWFlZg==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2001-07-06T06:36:47Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2001-07-06T06:36:47Z"}, "message": "cp-tree.h (copy_template_template_parm): Rename to ...\n\n\t* cp-tree.h (copy_template_template_parm): Rename to ...\n\t(bind_template_template_parm): ... here.\n\t* tree.c (copy_template_template_parm): Rename to ...\n\t(bind_template_template_parm): ... here.  Remove the case when\n\tNEWARGS is NULL_TREE.\n\t(copy_tree_r): Don't copy TEMPLATE_TEMPLATE_PARM and\n\tBOUND_TEMPLATE_TEMPLATE_PARM.\n\t* pt.c (lookup_template_class): Adjust.\n\nFrom-SVN: r43800", "tree": {"sha": "4ab6e0a3c0db731c148fb90ee146d4bbc2222c30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ab6e0a3c0db731c148fb90ee146d4bbc2222c30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dac655014e1c2260c7b55b2c3dcc0e8f9678aaef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dac655014e1c2260c7b55b2c3dcc0e8f9678aaef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dac655014e1c2260c7b55b2c3dcc0e8f9678aaef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dac655014e1c2260c7b55b2c3dcc0e8f9678aaef/comments", "author": null, "committer": null, "parents": [{"sha": "af418b8cb81e526c2a2d5f9195f26af1d6e722a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af418b8cb81e526c2a2d5f9195f26af1d6e722a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af418b8cb81e526c2a2d5f9195f26af1d6e722a3"}], "stats": {"total": 60, "additions": 26, "deletions": 34}, "files": [{"sha": "eb0e0eb7cf1d6159e7341233acb3f16bf1960864", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dac655014e1c2260c7b55b2c3dcc0e8f9678aaef/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dac655014e1c2260c7b55b2c3dcc0e8f9678aaef/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dac655014e1c2260c7b55b2c3dcc0e8f9678aaef", "patch": "@@ -1,3 +1,14 @@\n+2001-07-05  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\t* cp-tree.h (copy_template_template_parm): Rename to ...\n+\t(bind_template_template_parm): ... here.\n+\t* tree.c (copy_template_template_parm): Rename to ...\n+\t(bind_template_template_parm): ... here.  Remove the case when\n+\tNEWARGS is NULL_TREE.\n+\t(copy_tree_r): Don't copy TEMPLATE_TEMPLATE_PARM and\n+\tBOUND_TEMPLATE_TEMPLATE_PARM.\n+\t* pt.c (lookup_template_class): Adjust.\n+\n 2001-07-05  Jason Merrill  <jason_merrill@redhat.com>\n \n \t* cvt.c (convert_lvalue): New fn."}, {"sha": "66ce4fb0d31418aebb26bde50f84fdbb410753ce", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dac655014e1c2260c7b55b2c3dcc0e8f9678aaef/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dac655014e1c2260c7b55b2c3dcc0e8f9678aaef/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=dac655014e1c2260c7b55b2c3dcc0e8f9678aaef", "patch": "@@ -4355,7 +4355,7 @@ extern int promotes_to_aggr_type\t\tPARAMS ((tree, enum tree_code));\n extern int is_aggr_type_2\t\t\tPARAMS ((tree, tree));\n extern const char *lang_printable_name\t\tPARAMS ((tree, int));\n extern tree build_exception_variant\t\tPARAMS ((tree, tree));\n-extern tree copy_template_template_parm\t\tPARAMS ((tree, tree));\n+extern tree bind_template_template_parm\t\tPARAMS ((tree, tree));\n extern tree array_type_nelts_total\t\tPARAMS ((tree));\n extern tree array_type_nelts_top\t\tPARAMS ((tree));\n extern tree break_out_target_exprs\t\tPARAMS ((tree));"}, {"sha": "b6016402e16ffb361a51bba26b70c1db3378b280", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dac655014e1c2260c7b55b2c3dcc0e8f9678aaef/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dac655014e1c2260c7b55b2c3dcc0e8f9678aaef/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=dac655014e1c2260c7b55b2c3dcc0e8f9678aaef", "patch": "@@ -3912,8 +3912,7 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope, complain)\n       if (arglist2 == error_mark_node)\n \treturn error_mark_node;\n \n-      parm = copy_template_template_parm (TREE_TYPE (template), arglist2);\n-      TYPE_SIZE (parm) = 0;\n+      parm = bind_template_template_parm (TREE_TYPE (template), arglist2);\n       return parm;\n     }\n   else "}, {"sha": "5ced7ef875a9a1eeb85281236bca18d8b89af1ad", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 13, "deletions": 31, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dac655014e1c2260c7b55b2c3dcc0e8f9678aaef/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dac655014e1c2260c7b55b2c3dcc0e8f9678aaef/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=dac655014e1c2260c7b55b2c3dcc0e8f9678aaef", "patch": "@@ -1112,47 +1112,33 @@ build_exception_variant (type, raises)\n   return v;\n }\n \n-/* Given a TEMPLATE_TEMPLATE_PARM or BOUND_TEMPLATE_TEMPLATE_PARM\n-   node T, create a new one together with its \n-   lang_specific field and its corresponding *_DECL node.\n-   If NEWARGS is not NULL_TREE, this parameter is bound with new set of\n+/* Given a TEMPLATE_TEMPLATE_PARM node T, create a new\n+   BOUND_TEMPLATE_TEMPLATE_PARM bound with NEWARGS as its template\n    arguments.  */\n \n tree\n-copy_template_template_parm (t, newargs)\n+bind_template_template_parm (t, newargs)\n      tree t;\n      tree newargs;\n {\n   tree decl = TYPE_NAME (t);\n   tree t2;\n \n-  if (newargs == NULL_TREE)\n-    {\n-      t2 = make_aggr_type (TREE_CODE (t));\n-      decl = copy_decl (decl);\n+  t2 = make_aggr_type (BOUND_TEMPLATE_TEMPLATE_PARM);\n+  decl = build_decl (TYPE_DECL, DECL_NAME (decl), NULL_TREE);\n \n-      /* No need to copy these.  */\n-      TEMPLATE_TYPE_PARM_INDEX (t2) = TEMPLATE_TYPE_PARM_INDEX (t);\n-      TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (t2) \n-\t= TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (t);\n-    }\n-  else\n-    {\n-      t2 = make_aggr_type (BOUND_TEMPLATE_TEMPLATE_PARM);\n-      decl = build_decl (TYPE_DECL, DECL_NAME (decl), NULL_TREE);\n-\n-      /* These nodes have to be created to reflect new TYPE_DECL and template\n-         arguments.  */\n-      TEMPLATE_TYPE_PARM_INDEX (t2) = copy_node (TEMPLATE_TYPE_PARM_INDEX (t));\n-      TEMPLATE_PARM_DECL (TEMPLATE_TYPE_PARM_INDEX (t2)) = decl;\n-      TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (t2)\n-\t= tree_cons (TEMPLATE_TEMPLATE_PARM_TEMPLATE_DECL (t), \n-\t\t\t  newargs, NULL_TREE);\n-    }\n+  /* These nodes have to be created to reflect new TYPE_DECL and template\n+     arguments.  */\n+  TEMPLATE_TYPE_PARM_INDEX (t2) = copy_node (TEMPLATE_TYPE_PARM_INDEX (t));\n+  TEMPLATE_PARM_DECL (TEMPLATE_TYPE_PARM_INDEX (t2)) = decl;\n+  TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (t2)\n+    = tree_cons (TEMPLATE_TEMPLATE_PARM_TEMPLATE_DECL (t), \n+\t\t newargs, NULL_TREE);\n \n   TREE_TYPE (decl) = t2;\n   TYPE_NAME (t2) = decl;\n   TYPE_STUB_DECL (t2) = decl;\n+  TYPE_SIZE (t2) = 0;\n \n   return t2;\n }\n@@ -1564,10 +1550,6 @@ copy_tree_r (tp, walk_subtrees, data)\n       if (TREE_CODE (*tp) == SCOPE_STMT)\n \tSCOPE_STMT_BLOCK (*tp) = NULL_TREE;\n     }\n-  else if (code == TEMPLATE_TEMPLATE_PARM\n-\t   || code == BOUND_TEMPLATE_TEMPLATE_PARM)\n-    /* These must be copied specially.  */\n-    *tp = copy_template_template_parm (*tp, NULL_TREE);\n   else if (TREE_CODE_CLASS (code) == 't')\n     /* There's no need to copy types, or anything beneath them.  */\n     *walk_subtrees = 0;"}]}