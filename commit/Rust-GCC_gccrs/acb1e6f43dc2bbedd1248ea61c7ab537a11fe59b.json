{"sha": "acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b", "node_id": "C_kwDOANBUbNoAKGFjYjFlNmY0M2RjMmJiZWRkMTI0OGVhNjFjN2FiNTM3YTExZmU1OWI", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-06-15T07:31:13Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-06-15T07:31:13Z"}, "message": "Fold truncations of left shifts in match.pd\n\nWhilst investigating PR 55278, I noticed that the tree-ssa optimizers\naren't eliminating the promotions of shifts to \"int\" as inserted by the\nc-family front-ends, instead leaving this simplification to be left to\nthe RTL optimizers.  This patch allows match.pd to do this itself earlier,\nnarrowing (T)(X << C) to (T)X << C when the constant C is known to be\nvalid for the (narrower) type T.\n\nHence for this simple test case:\nshort foo(short x) { return x << 5; }\n\nthe .optimized dump currently looks like:\n\nshort int foo (short int x)\n{\n  int _1;\n  int _2;\n  short int _4;\n\n  <bb 2> [local count: 1073741824]:\n  _1 = (int) x_3(D);\n  _2 = _1 << 5;\n  _4 = (short int) _2;\n  return _4;\n}\n\nbut with this patch, now becomes:\n\nshort int foo (short int x)\n{\n  short int _2;\n\n  <bb 2> [local count: 1073741824]:\n  _2 = x_1(D) << 5;\n  return _2;\n}\n\nThis is always reasonable as RTL expansion knows how to use\nwidening optabs if it makes sense at the RTL level to perform\nthis shift in a wider mode.\n\nOf course, there's often a catch.  The above simplification not only\nreduces the number of statements in gimple, but also allows further\noptimizations, for example including the perception of rotate idioms\nand bswap16.  Alas, optimizing things earlier than anticipated\nrequires several testsuite changes [though all these tests have\nbeen confirmed to generate identical assembly code on x86_64].\nThe only significant change is that the vectorization pass wouldn't\npreviously lower rotations of signed integer types.  Hence this\npatch includes a refinement to tree-vect-patterns to allow signed\ntypes, by using the equivalent unsigned shifts.\n\n2022-06-15  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Richard Biener  <rguenther@suse.de>\n\ngcc/ChangeLog\n\t* match.pd (convert (lshift @1 INTEGER_CST@2)): Narrow integer\n\tleft shifts by a constant when the result is truncated, and the\n\tshift constant is well-defined.\n\t* tree-vect-patterns.cc (vect_recog_rotate_pattern): Add\n\tsupport for rotations of signed integer types, by lowering\n\tusing unsigned vector shifts.\n\ngcc/testsuite/ChangeLog\n\t* gcc.dg/fold-convlshift-4.c: New test case.\n\t* gcc.dg/optimize-bswaphi-1.c: Update found bswap count.\n\t* gcc.dg/tree-ssa/pr61839_3.c: Shift is now optimized before VRP.\n\t* gcc.dg/vect/vect-over-widen-1-big-array.c: Remove obsolete tests.\n\t* gcc.dg/vect/vect-over-widen-1.c: Likewise.\n\t* gcc.dg/vect/vect-over-widen-3-big-array.c: Likewise.\n\t* gcc.dg/vect/vect-over-widen-3.c: Likewise.\n\t* gcc.dg/vect/vect-over-widen-4-big-array.c: Likewise.\n\t* gcc.dg/vect/vect-over-widen-4.c: Likewise.", "tree": {"sha": "03dd0822fbb02776d3141bd9f0f80c517a6dcf68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03dd0822fbb02776d3141bd9f0f80c517a6dcf68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b1a827f024234aaf83ecfe90415e88b525d3969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1a827f024234aaf83ecfe90415e88b525d3969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b1a827f024234aaf83ecfe90415e88b525d3969"}], "stats": {"total": 93, "additions": 49, "deletions": 44}, "files": [{"sha": "d4058d619799cddd2cf8cca8cb773882b28d86a5", "filename": "gcc/match.pd", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b", "patch": "@@ -3621,17 +3621,18 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     (if (integer_zerop (@2) || integer_all_onesp (@2))\n      (cmp @0 @2)))))\n \n-/* Both signed and unsigned lshift produce the same result, so use\n-   the form that minimizes the number of conversions.  Postpone this\n-   transformation until after shifts by zero have been folded.  */\n+/* Narrow a lshift by constant.  */\n (simplify\n- (convert (lshift:s@0 (convert:s@1 @2) INTEGER_CST@3))\n+ (convert (lshift:s@0 @1 INTEGER_CST@2))\n  (if (INTEGRAL_TYPE_P (type)\n-      && tree_nop_conversion_p (type, TREE_TYPE (@0))\n-      && INTEGRAL_TYPE_P (TREE_TYPE (@2))\n-      && TYPE_PRECISION (TREE_TYPE (@2)) <= TYPE_PRECISION (type)\n-      && !integer_zerop (@3))\n-  (lshift (convert @2) @3)))\n+      && INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+      && !integer_zerop (@2)\n+      && TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@0)))\n+  (if (TYPE_PRECISION (type) == TYPE_PRECISION (TREE_TYPE (@0))\n+       || wi::ltu_p (wi::to_wide (@2), TYPE_PRECISION (type)))\n+   (lshift (convert @1) @2)\n+   (if (wi::ltu_p (wi::to_wide (@2), TYPE_PRECISION (TREE_TYPE (@0))))\n+    { build_zero_cst (type); }))))\n \n /* Simplifications of conversions.  */\n "}, {"sha": "001627fc185a032db04db20af7fd760009c1f071", "filename": "gcc/testsuite/gcc.dg/fold-convlshift-4.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convlshift-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convlshift-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convlshift-4.c?ref=acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+short foo(short x)\n+{\n+  return x << 5;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"\\\\(int\\\\)\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"\\\\(short int\\\\)\" \"optimized\" } } */"}, {"sha": "a5d8bfd5838ad4fc4cd17ef5e14f02a87a5eb79e", "filename": "gcc/testsuite/gcc.dg/optimize-bswaphi-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswaphi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswaphi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswaphi-1.c?ref=acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b", "patch": "@@ -68,4 +68,4 @@ get_unaligned_16_be (unsigned char *p)\n \n \n /* { dg-final { scan-tree-dump-times \"16 bit load in target endianness found at\" 4 \"bswap\" } } */\n-/* { dg-final { scan-tree-dump-times \"16 bit bswap implementation found at\" 5 \"bswap\" } } */\n+/* { dg-final { scan-tree-dump-times \"16 bit bswap implementation found at\" 4 \"bswap\" } } */"}, {"sha": "38cf792aca2da8d27728b39d6100b8652f65e9be", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61839_3.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_3.c?ref=acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b", "patch": "@@ -1,6 +1,6 @@\n /* PR tree-optimization/61839.  */\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fdump-tree-vrp -fdump-tree-optimized -fdisable-tree-ethread -fdisable-tree-threadfull1\" } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -fdisable-tree-ethread -fdisable-tree-threadfull1\" } */\n \n __attribute__ ((noinline))\n int foo (int a, unsigned b)\n@@ -21,6 +21,4 @@ int main ()\n   foo (-1, b);\n }\n \n-/* Scan for c [12, 13] << 8 in function foo.  */\n-/* { dg-final { scan-tree-dump-times \"3072 : 3328\" 1  \"vrp1\" } } */\n /* { dg-final { scan-tree-dump-times \"3072\" 0  \"optimized\" } } */"}, {"sha": "9a5141ee6ecce133ce85edcf75603e0b3ce41f04", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-1-big-array.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1-big-array.c?ref=acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b", "patch": "@@ -58,9 +58,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vect_recog_widen_shift_pattern: detected\" 2 \"vect\" { target vect_widen_shift } } } */\n-/* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* << 3} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 3} \"vect\" } } */\n-/* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* << 8} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 5} \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n "}, {"sha": "f2d284ca9bee4af23c25726a54866bfaf054c46c", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-1.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1.c?ref=acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b", "patch": "@@ -62,9 +62,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vect_recog_widen_shift_pattern: detected\" 2 \"vect\" { target vect_widen_shift } } } */\n-/* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* << 3} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 3} \"vect\" } } */\n-/* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* << 8} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 5} \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n "}, {"sha": "6f89aacbebf5094c7b1081b12c7fcce1b97d536b", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-3-big-array.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3-big-array.c?ref=acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b", "patch": "@@ -59,9 +59,7 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* << 3} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 3} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 8} \"vect\" } } */\n-/* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* << 9} \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n "}, {"sha": "a1e1182c6067db47445ad07b77e5c6e067858488", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-3.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3.c?ref=acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b", "patch": "@@ -57,9 +57,7 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* << 3} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 3} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 8} \"vect\" } } */\n-/* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* << 9} \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n "}, {"sha": "03a6e6795ec68e5f9a35da93ca7a8d50a3012a21", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-4-big-array.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4-big-array.c?ref=acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b", "patch": "@@ -62,9 +62,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vect_recog_widen_shift_pattern: detected\" 2 \"vect\" { target vect_widen_shift } } } */\n-/* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* << 3} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 3} \"vect\" } } */\n-/* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* << 8} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 5} \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n "}, {"sha": "0ef377f1f58a6f6466380a59c381333dbc4805df", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-4.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4.c?ref=acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b", "patch": "@@ -66,9 +66,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vect_recog_widen_shift_pattern: detected\" 2 \"vect\" { target vect_widen_shift } } } */\n-/* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* << 3} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 3} \"vect\" } } */\n-/* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* << 8} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 5} \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n "}, {"sha": "8f624863971392c891fde7278949c8818f646576", "filename": "gcc/tree-vect-patterns.cc", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftree-vect-patterns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b/gcc%2Ftree-vect-patterns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.cc?ref=acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b", "patch": "@@ -2614,8 +2614,7 @@ vect_recog_rotate_pattern (vec_info *vinfo,\n \t  || TYPE_PRECISION (TREE_TYPE (lhs)) != 16\n \t  || TYPE_PRECISION (type) <= 16\n \t  || TREE_CODE (oprnd0) != SSA_NAME\n-\t  || BITS_PER_UNIT != 8\n-\t  || !TYPE_UNSIGNED (TREE_TYPE (lhs)))\n+\t  || BITS_PER_UNIT != 8)\n \treturn NULL;\n \n       stmt_vec_info def_stmt_info;\n@@ -2688,8 +2687,7 @@ vect_recog_rotate_pattern (vec_info *vinfo,\n \n   if (TREE_CODE (oprnd0) != SSA_NAME\n       || TYPE_PRECISION (TREE_TYPE (lhs)) != TYPE_PRECISION (type)\n-      || !INTEGRAL_TYPE_P (type)\n-      || !TYPE_UNSIGNED (type))\n+      || !INTEGRAL_TYPE_P (type))\n     return NULL;\n \n   stmt_vec_info def_stmt_info;\n@@ -2745,31 +2743,36 @@ vect_recog_rotate_pattern (vec_info *vinfo,\n \tgoto use_rotate;\n     }\n \n+  tree utype = unsigned_type_for (type);\n+  tree uvectype = get_vectype_for_scalar_type (vinfo, utype);\n+  if (!uvectype)\n+    return NULL;\n+\n   /* If vector/vector or vector/scalar shifts aren't supported by the target,\n      don't do anything here either.  */\n-  optab1 = optab_for_tree_code (LSHIFT_EXPR, vectype, optab_vector);\n-  optab2 = optab_for_tree_code (RSHIFT_EXPR, vectype, optab_vector);\n+  optab1 = optab_for_tree_code (LSHIFT_EXPR, uvectype, optab_vector);\n+  optab2 = optab_for_tree_code (RSHIFT_EXPR, uvectype, optab_vector);\n   if (!optab1\n-      || optab_handler (optab1, TYPE_MODE (vectype)) == CODE_FOR_nothing\n+      || optab_handler (optab1, TYPE_MODE (uvectype)) == CODE_FOR_nothing\n       || !optab2\n-      || optab_handler (optab2, TYPE_MODE (vectype)) == CODE_FOR_nothing)\n+      || optab_handler (optab2, TYPE_MODE (uvectype)) == CODE_FOR_nothing)\n     {\n       if (! is_a <bb_vec_info> (vinfo) && dt == vect_internal_def)\n \treturn NULL;\n-      optab1 = optab_for_tree_code (LSHIFT_EXPR, vectype, optab_scalar);\n-      optab2 = optab_for_tree_code (RSHIFT_EXPR, vectype, optab_scalar);\n+      optab1 = optab_for_tree_code (LSHIFT_EXPR, uvectype, optab_scalar);\n+      optab2 = optab_for_tree_code (RSHIFT_EXPR, uvectype, optab_scalar);\n       if (!optab1\n-\t  || optab_handler (optab1, TYPE_MODE (vectype)) == CODE_FOR_nothing\n+\t  || optab_handler (optab1, TYPE_MODE (uvectype)) == CODE_FOR_nothing\n \t  || !optab2\n-\t  || optab_handler (optab2, TYPE_MODE (vectype)) == CODE_FOR_nothing)\n+\t  || optab_handler (optab2, TYPE_MODE (uvectype)) == CODE_FOR_nothing)\n \treturn NULL;\n     }\n \n   *type_out = vectype;\n \n-  if (bswap16_p && !useless_type_conversion_p (type, TREE_TYPE (oprnd0)))\n+  if (!useless_type_conversion_p (utype, TREE_TYPE (oprnd0)))\n     {\n-      def = vect_recog_temp_ssa_var (type, NULL);\n+      def = vect_recog_temp_ssa_var (utype, NULL);\n       def_stmt = gimple_build_assign (def, NOP_EXPR, oprnd0);\n       append_pattern_def_seq (vinfo, stmt_vinfo, def_stmt);\n       oprnd0 = def;\n@@ -2779,7 +2782,7 @@ vect_recog_rotate_pattern (vec_info *vinfo,\n     ext_def = vect_get_external_def_edge (vinfo, oprnd1);\n \n   def = NULL_TREE;\n-  scalar_int_mode mode = SCALAR_INT_TYPE_MODE (type);\n+  scalar_int_mode mode = SCALAR_INT_TYPE_MODE (utype);\n   if (dt != vect_internal_def || TYPE_MODE (TREE_TYPE (oprnd1)) == mode)\n     def = oprnd1;\n   else if (def_stmt && gimple_assign_cast_p (def_stmt))\n@@ -2793,7 +2796,7 @@ vect_recog_rotate_pattern (vec_info *vinfo,\n \n   if (def == NULL_TREE)\n     {\n-      def = vect_recog_temp_ssa_var (type, NULL);\n+      def = vect_recog_temp_ssa_var (utype, NULL);\n       def_stmt = gimple_build_assign (def, NOP_EXPR, oprnd1);\n       append_pattern_def_seq (vinfo, stmt_vinfo, def_stmt);\n     }\n@@ -2839,13 +2842,13 @@ vect_recog_rotate_pattern (vec_info *vinfo,\n \tappend_pattern_def_seq (vinfo, stmt_vinfo, def_stmt, vecstype);\n     }\n \n-  var1 = vect_recog_temp_ssa_var (type, NULL);\n+  var1 = vect_recog_temp_ssa_var (utype, NULL);\n   def_stmt = gimple_build_assign (var1, rhs_code == LROTATE_EXPR\n \t\t\t\t\t? LSHIFT_EXPR : RSHIFT_EXPR,\n \t\t\t\t  oprnd0, def);\n   append_pattern_def_seq (vinfo, stmt_vinfo, def_stmt);\n \n-  var2 = vect_recog_temp_ssa_var (type, NULL);\n+  var2 = vect_recog_temp_ssa_var (utype, NULL);\n   def_stmt = gimple_build_assign (var2, rhs_code == LROTATE_EXPR\n \t\t\t\t\t? RSHIFT_EXPR : LSHIFT_EXPR,\n \t\t\t\t  oprnd0, def2);\n@@ -2855,9 +2858,15 @@ vect_recog_rotate_pattern (vec_info *vinfo,\n   vect_pattern_detected (\"vect_recog_rotate_pattern\", last_stmt);\n \n   /* Pattern supported.  Create a stmt to be used to replace the pattern.  */\n-  var = vect_recog_temp_ssa_var (type, NULL);\n+  var = vect_recog_temp_ssa_var (utype, NULL);\n   pattern_stmt = gimple_build_assign (var, BIT_IOR_EXPR, var1, var2);\n \n+  if (!useless_type_conversion_p (type, utype))\n+    {\n+      append_pattern_def_seq (vinfo, stmt_vinfo, pattern_stmt);\n+      tree result = vect_recog_temp_ssa_var (type, NULL);\n+      pattern_stmt = gimple_build_assign (result, NOP_EXPR, var);\n+    }\n   return pattern_stmt;\n }\n "}]}