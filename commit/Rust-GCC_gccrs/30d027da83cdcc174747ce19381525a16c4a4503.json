{"sha": "30d027da83cdcc174747ce19381525a16c4a4503", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBkMDI3ZGE4M2NkY2MxNzQ3NDdjZTE5MzgxNTI1YTE2YzRhNDUwMw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-10-04T11:59:30Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-10-04T11:59:30Z"}, "message": "New target check for double<->int conversions\n\ngcc/ChangeLog:\n\n2017-10-04  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* doc/sourcebuild.texi: Document vect_intdouble_cvt and\n\tvect_doubleint_cvt.\n\ngcc/testsuite/ChangeLog:\n\n2017-10-04  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc.dg/vect/pr66251.c: Replace vect_floatint_cvt with\n\tvect_doubleint_cvt and vect_intfloat_cvt with vect_intdouble_cvt.\n\t* gcc.dg/vect/vect-floatint-conversion-2.c: Replace\n\tvect_floatint_cvt with vect_doubleint_cvt.\n\t* gcc.dg/vect/vect-intfloat-conversion-3.c: Replace\n\tvect_intfloat_cvt with vect_intdouble_cvt.\n\t* gfortran.dg/vect/pr60510.f: Require vect_intdouble_cvt.\n\t* gfortran.dg/vect/vect-8.f90: Make number of vectorized loops\n\tdepend on vect_intdouble_cvt.\n\t* lib/target-supports.exp\n\t(check_effective_target_vect_doubleint_cvt)\n\t(check_effective_target_vect_intdouble_cvt): New procs.\n\nFrom-SVN: r253406", "tree": {"sha": "5aeec85f033603ace711571b98c84aba26cf9b7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5aeec85f033603ace711571b98c84aba26cf9b7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30d027da83cdcc174747ce19381525a16c4a4503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d027da83cdcc174747ce19381525a16c4a4503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30d027da83cdcc174747ce19381525a16c4a4503", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d027da83cdcc174747ce19381525a16c4a4503/comments", "author": null, "committer": null, "parents": [{"sha": "c059a92eccd96d00ffd23801d032eba14ff2a244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c059a92eccd96d00ffd23801d032eba14ff2a244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c059a92eccd96d00ffd23801d032eba14ff2a244"}], "stats": {"total": 100, "additions": 95, "deletions": 5}, "files": [{"sha": "fb76db2ec4a20e2d983de67967f116b9b6744697", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d027da83cdcc174747ce19381525a16c4a4503/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d027da83cdcc174747ce19381525a16c4a4503/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30d027da83cdcc174747ce19381525a16c4a4503", "patch": "@@ -1,3 +1,8 @@\n+2017-10-04  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* doc/sourcebuild.texi: Document vect_intdouble_cvt and\n+\tvect_doubleint_cvt.\n+\n 2017-10-04  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* doc/sourcebuild.texi: Document vect_long_mult."}, {"sha": "e09bca102f030f4c3a4c6319d3881df9701c60cf", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d027da83cdcc174747ce19381525a16c4a4503/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d027da83cdcc174747ce19381525a16c4a4503/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=30d027da83cdcc174747ce19381525a16c4a4503", "patch": "@@ -1508,6 +1508,12 @@ Target supports conversion from @code{float} to @code{signed int}.\n @item vect_floatuint_cvt\n Target supports conversion from @code{float} to @code{unsigned int}.\n \n+@item vect_intdouble_cvt\n+Target supports conversion from @code{signed int} to @code{double}.\n+\n+@item vect_doubleint_cvt\n+Target supports conversion from @code{double} to @code{signed int}.\n+\n @item vect_max_reduc\n Target supports max reduction for vectors.\n @end table"}, {"sha": "f06b7b2e74f087a6ec9fd413c042c1eeb795fc9f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d027da83cdcc174747ce19381525a16c4a4503/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d027da83cdcc174747ce19381525a16c4a4503/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30d027da83cdcc174747ce19381525a16c4a4503", "patch": "@@ -1,3 +1,18 @@\n+2017-10-04  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.dg/vect/pr66251.c: Replace vect_floatint_cvt with\n+\tvect_doubleint_cvt and vect_intfloat_cvt with vect_intdouble_cvt.\n+\t* gcc.dg/vect/vect-floatint-conversion-2.c: Replace\n+\tvect_floatint_cvt with vect_doubleint_cvt.\n+\t* gcc.dg/vect/vect-intfloat-conversion-3.c: Replace\n+\tvect_intfloat_cvt with vect_intdouble_cvt.\n+\t* gfortran.dg/vect/pr60510.f: Require vect_intdouble_cvt.\n+\t* gfortran.dg/vect/vect-8.f90: Make number of vectorized loops\n+\tdepend on vect_intdouble_cvt.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_vect_doubleint_cvt)\n+\t(check_effective_target_vect_intdouble_cvt): New procs.\n+\n 2017-10-04  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.dg/vect/pr60656.c: Check vect_long_mult."}, {"sha": "26afbc96a5d57a49fbbac95753f4df006cb36018", "filename": "gcc/testsuite/gcc.dg/vect/pr66251.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d027da83cdcc174747ce19381525a16c4a4503/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr66251.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d027da83cdcc174747ce19381525a16c4a4503/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr66251.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr66251.c?ref=30d027da83cdcc174747ce19381525a16c4a4503", "patch": "@@ -1,7 +1,7 @@\n /* { dg-require-effective-target vect_int } */\n /* { dg-require-effective-target vect_double } */\n-/* { dg-require-effective-target vect_floatint_cvt } */\n-/* { dg-require-effective-target vect_intfloat_cvt } */\n+/* { dg-require-effective-target vect_doubleint_cvt } */\n+/* { dg-require-effective-target vect_intdouble_cvt } */\n /* { dg-require-effective-target vect_pack_trunc } */\n /* { dg-require-effective-target vect_unpack } */\n /* { dg-require-effective-target vect_hw_misalign } */"}, {"sha": "64fab3876310d60ca016b78938e449201c80997d", "filename": "gcc/testsuite/gcc.dg/vect/vect-floatint-conversion-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d027da83cdcc174747ce19381525a16c4a4503/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-floatint-conversion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d027da83cdcc174747ce19381525a16c4a4503/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-floatint-conversion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-floatint-conversion-2.c?ref=30d027da83cdcc174747ce19381525a16c4a4503", "patch": "@@ -36,4 +36,4 @@ main (void)\n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_floatint_cvt } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_doubleint_cvt } } } */"}, {"sha": "78fc3da481c6693611b45d3939fe03d23e84f8f7", "filename": "gcc/testsuite/gcc.dg/vect/vect-intfloat-conversion-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d027da83cdcc174747ce19381525a16c4a4503/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-intfloat-conversion-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d027da83cdcc174747ce19381525a16c4a4503/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-intfloat-conversion-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-intfloat-conversion-3.c?ref=30d027da83cdcc174747ce19381525a16c4a4503", "patch": "@@ -35,4 +35,4 @@ int main (void)\n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_intfloat_cvt } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_intdouble_cvt } } } */"}, {"sha": "202c1be8ee4779fbd2a0c3a2195604eedd9a5ea4", "filename": "gcc/testsuite/gfortran.dg/vect/pr60510.f", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d027da83cdcc174747ce19381525a16c4a4503/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr60510.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d027da83cdcc174747ce19381525a16c4a4503/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr60510.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr60510.f?ref=30d027da83cdcc174747ce19381525a16c4a4503", "patch": "@@ -1,5 +1,6 @@\n ! { dg-do run }\n ! { dg-require-effective-target vect_double }\n+! { dg-require-effective-target vect_intdouble_cvt }\n ! { dg-additional-options \"-fno-inline -ffast-math\" }\n       subroutine foo(a,x,y,n)\n       implicit none"}, {"sha": "8e18be5eebd2ab2746c8155cdf7bab076d641db5", "filename": "gcc/testsuite/gfortran.dg/vect/vect-8.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d027da83cdcc174747ce19381525a16c4a4503/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d027da83cdcc174747ce19381525a16c4a4503/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-8.f90?ref=30d027da83cdcc174747ce19381525a16c4a4503", "patch": "@@ -704,4 +704,5 @@ SUBROUTINE kernel(tk)\n RETURN\n END SUBROUTINE kernel\n \n-! { dg-final { scan-tree-dump-times \"vectorized 21 loops\" 1 \"vect\" } }\n+! { dg-final { scan-tree-dump-times \"vectorized 21 loops\" 1 \"vect\" { target { vect_intdouble_cvt } } } }\n+! { dg-final { scan-tree-dump-times \"vectorized 17 loops\" 1 \"vect\" { target { ! vect_intdouble_cvt } } } }"}, {"sha": "4f752ec25290479d0ec5ccc9fbf38fd7484f1d21", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d027da83cdcc174747ce19381525a16c4a4503/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d027da83cdcc174747ce19381525a16c4a4503/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=30d027da83cdcc174747ce19381525a16c4a4503", "patch": "@@ -3119,6 +3119,68 @@ proc check_effective_target_vect_intfloat_cvt { } {\n     return $et_vect_intfloat_cvt_saved($et_index)\n }\n \n+# Return 1 if the target supports signed double->int conversion\n+#\n+\n+proc check_effective_target_vect_doubleint_cvt { } {\n+    global et_vect_doubleint_cvt_saved\n+    global et_index\n+\n+    if [info exists et_vect_doubleint_cvt_saved($et_index)] {\n+\tverbose \"check_effective_target_vect_doubleint_cvt: using cached result\" 2\n+    } else {\n+\tset et_vect_doubleint_cvt_saved($et_index) 0\n+\tif { (([istarget i?86-*-*] || [istarget x86_64-*-*])\n+\t      && [check_no_compiler_messages vect_doubleint_cvt assembly {\n+\t\t  #ifdef __tune_atom__\n+\t\t  # error No double vectorizer support.\n+\t\t  #endif\n+\t      }])\n+\t     || [istarget aarch64*-*-*]\n+\t     || [istarget spu-*-*]\n+\t     || ([istarget powerpc*-*-*] && [check_vsx_hw_available])\n+\t     || ([istarget mips*-*-*]\n+\t\t && [et-is-effective-target mips_msa]) } {\n+\t    set et_vect_doubleint_cvt_saved($et_index) 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_doubleint_cvt:\\\n+\t     returning $et_vect_doubleint_cvt_saved($et_index)\" 2\n+    return $et_vect_doubleint_cvt_saved($et_index)\n+}\n+\n+# Return 1 if the target supports signed int->double conversion\n+#\n+\n+proc check_effective_target_vect_intdouble_cvt { } {\n+    global et_vect_intdouble_cvt_saved\n+    global et_index\n+\n+    if [info exists et_vect_intdouble_cvt_saved($et_index)] {\n+\tverbose \"check_effective_target_vect_intdouble_cvt: using cached result\" 2\n+    } else {\n+\tset et_vect_intdouble_cvt_saved($et_index) 0\n+\tif { (([istarget i?86-*-*] || [istarget x86_64-*-*])\n+\t      && [check_no_compiler_messages vect_intdouble_cvt assembly {\n+\t\t  #ifdef __tune_atom__\n+\t\t  # error No double vectorizer support.\n+\t\t  #endif\n+\t      }])\n+\t     || [istarget aarch64*-*-*]\n+\t     || [istarget spu-*-*]\n+\t     || ([istarget powerpc*-*-*] && [check_vsx_hw_available])\n+\t     || ([istarget mips*-*-*]\n+\t\t && [et-is-effective-target mips_msa]) } {\n+\t    set et_vect_intdouble_cvt_saved($et_index) 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_intdouble_cvt:\\\n+\t     returning $et_vect_intdouble_cvt_saved($et_index)\" 2\n+    return $et_vect_intdouble_cvt_saved($et_index)\n+}\n+\n #Return 1 if we're supporting __int128 for target, 0 otherwise.\n \n proc check_effective_target_int128 { } {"}]}