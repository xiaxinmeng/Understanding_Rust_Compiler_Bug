{"sha": "fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRlNTBmZTZhZmJmNzBmYzFkZmViMWYwYzY5ZTQwNGM4OTRiZmQyYw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-12-03T11:03:30Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-12-03T11:03:30Z"}, "message": "check.c (gfc_check_move_alloc): Allow nonpolymorphic FROM with polymorphic TO.\n\n2011-12-03  Tobias Burnus  <burnus@net-b.de>\n\n        * check.c (gfc_check_move_alloc): Allow nonpolymorphic\n        FROM with polymorphic TO.\n        * trans-intrinsic.c (conv_intrinsic_move_alloc): Handle\n        nonpolymorphic FROM with polymorphic TO.\n\n2011-12-03  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/select_type_23.f03: Revert Rev. 181801,\n        i.e. remove the dg-error line.\n        * gfortran.dg/move_alloc_5.f90: Ditto and change back\n        to dg-do run.\n        * gfortran.dg/move_alloc_9.f90: New.\n        * gfortran.dg/move_alloc_10.f90: New\n\nFrom-SVN: r181966", "tree": {"sha": "da9bfc5a55ce02996170af86a28a72042901bfd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da9bfc5a55ce02996170af86a28a72042901bfd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df1204ec90c671971a8da2e0551db3ffe5a6e567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df1204ec90c671971a8da2e0551db3ffe5a6e567", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df1204ec90c671971a8da2e0551db3ffe5a6e567"}], "stats": {"total": 257, "additions": 217, "deletions": 40}, "files": [{"sha": "72a7f746e9ceebfe7b59d531abb0c4b883b8843a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c", "patch": "@@ -1,3 +1,10 @@\n+2011-12-03  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* check.c (gfc_check_move_alloc): Allow nonpolymorphic\n+\tFROM with polymorphic TO.\n+\t* trans-intrinsic.c (conv_intrinsic_move_alloc): Handle\n+\tnonpolymorphic FROM with polymorphic TO.\n+\n 2011-12-01  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* module.c (dt_lower_string): Make static."}, {"sha": "605c77d2b48c29d0493fc852666da06a5ee11c3d", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c", "patch": "@@ -2688,17 +2688,17 @@ gfc_check_move_alloc (gfc_expr *from, gfc_expr *to)\n   if (allocatable_check (to, 1) == FAILURE)\n     return FAILURE;\n \n-  if (same_type_check (to, 1, from, 0) == FAILURE)\n-    return FAILURE;\n-\n-  if (to->ts.type != from->ts.type)\n+  if (from->ts.type == BT_CLASS && to->ts.type == BT_DERIVED)\n     {\n-      gfc_error (\"The FROM and TO arguments in MOVE_ALLOC call at %L must be \"\n-\t\t \"either both polymorphic or both nonpolymorphic\",\n+      gfc_error (\"The TO arguments in MOVE_ALLOC at %L must be \"\n+\t\t \"polymorphic if FROM is polymorphic\",\n \t\t &from->where);\n       return FAILURE;\n     }\n \n+  if (same_type_check (to, 1, from, 0) == FAILURE)\n+    return FAILURE;\n+\n   if (to->rank != from->rank)\n     {\n       gfc_error (\"the '%s' and '%s' arguments of '%s' intrinsic at %L must \"\n@@ -2718,7 +2718,7 @@ gfc_check_move_alloc (gfc_expr *from, gfc_expr *to)\n       return FAILURE;\n     }\n \n-  /* CLASS arguments: Make sure the vtab is present.  */\n+  /* CLASS arguments: Make sure the vtab of from is present.  */\n   if (to->ts.type == BT_CLASS)\n     gfc_find_derived_vtab (from->ts.u.derived);\n "}, {"sha": "855db306a7af3a243fefbbd896a2eea88db5fb4f", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 55, "deletions": 26, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c", "patch": "@@ -7184,7 +7184,7 @@ conv_intrinsic_move_alloc (gfc_code *code)\n {\n   stmtblock_t block;\n   gfc_expr *from_expr, *to_expr;\n-  gfc_expr *to_expr2, *from_expr2;\n+  gfc_expr *to_expr2, *from_expr2 = NULL;\n   gfc_se from_se, to_se;\n   gfc_ss *from_ss, *to_ss;\n   tree tmp;\n@@ -7199,16 +7199,21 @@ conv_intrinsic_move_alloc (gfc_code *code)\n \n   if (from_expr->rank == 0)\n     {\n+      gcc_assert (from_expr->ts.type != BT_CLASS\n+\t\t  || to_expr->ts.type == BT_CLASS);\n       if (from_expr->ts.type != BT_CLASS)\n+\tfrom_expr2 = from_expr;\n+      else\n \t{\n-\t  from_expr2 = to_expr;\n-\t  to_expr2 = to_expr;\n+\t  from_expr2 = gfc_copy_expr (from_expr);\n+\t  gfc_add_data_component (from_expr2);\n \t}\n+\n+      if (to_expr->ts.type != BT_CLASS)\n+\tto_expr2 = to_expr;\n       else\n \t{\n \t  to_expr2 = gfc_copy_expr (to_expr);\n-\t  from_expr2 = gfc_copy_expr (from_expr);\n-\t  gfc_add_data_component (from_expr2);\n \t  gfc_add_data_component (to_expr2);\n \t}\n \n@@ -7236,48 +7241,72 @@ conv_intrinsic_move_alloc (gfc_code *code)\n       gfc_add_block_to_block (&block, &to_se.post);\n \n       /* Set _vptr.  */\n-      if (from_expr->ts.type == BT_CLASS)\n+      if (to_expr->ts.type == BT_CLASS)\n \t{\n-\t  gfc_free_expr (from_expr2);\n-          gfc_free_expr (to_expr2);\n-\n-\t  gfc_init_se (&from_se, NULL);\n+\t  gfc_free_expr (to_expr2);\n \t  gfc_init_se (&to_se, NULL);\n-\t  from_se.want_pointer = 1;\n \t  to_se.want_pointer = 1;\n-\t  gfc_add_vptr_component (from_expr);\n \t  gfc_add_vptr_component (to_expr);\n-\n-\t  gfc_conv_expr (&from_se, from_expr);\n \t  gfc_conv_expr (&to_se, to_expr);\n+\n+\t  if (from_expr->ts.type == BT_CLASS)\n+\t    {\n+\t      gfc_free_expr (from_expr2);\n+\t      gfc_init_se (&from_se, NULL);\n+\t      from_se.want_pointer = 1;\n+\t      gfc_add_vptr_component (from_expr);\n+\t      gfc_conv_expr (&from_se, from_expr);\n+\t      tmp = from_se.expr;\n+\t    }\n+\t  else\n+\t    {\n+\t      gfc_symbol *vtab;\n+\t      vtab = gfc_find_derived_vtab (from_expr->ts.u.derived);\n+\t      gcc_assert (vtab);\n+\t      tmp = gfc_build_addr_expr (NULL_TREE, gfc_get_symbol_decl (vtab));\n+\t    }\n+\n \t  gfc_add_modify_loc (input_location, &block, to_se.expr,\n-\t\t\t      fold_convert (TREE_TYPE (to_se.expr), from_se.expr));\n+\t\t\t      fold_convert (TREE_TYPE (to_se.expr), tmp));\n \t}\n \n       return gfc_finish_block (&block);\n     }\n \n   /* Update _vptr component.  */\n-  if (from_expr->ts.type == BT_CLASS)\n+  if (to_expr->ts.type == BT_CLASS)\n     {\n-      from_se.want_pointer = 1;\n       to_se.want_pointer = 1;\n-\n-      from_expr2 = gfc_copy_expr (from_expr);\n       to_expr2 = gfc_copy_expr (to_expr);\n-      gfc_add_vptr_component (from_expr2);\n       gfc_add_vptr_component (to_expr2);\n-\n-      gfc_conv_expr (&from_se, from_expr2);\n       gfc_conv_expr (&to_se, to_expr2);\n \n+      if (from_expr->ts.type == BT_CLASS)\n+\t{\n+\t  from_se.want_pointer = 1;\n+\t  from_expr2 = gfc_copy_expr (from_expr);\n+\t  gfc_add_vptr_component (from_expr2);\n+\t  gfc_conv_expr (&from_se, from_expr2);\n+\t  tmp = from_se.expr;\n+\t}\n+      else\n+\t{\n+\t  gfc_symbol *vtab;\n+\t  vtab = gfc_find_derived_vtab (from_expr->ts.u.derived);\n+\t  gcc_assert (vtab);\n+\t  tmp = gfc_build_addr_expr (NULL_TREE, gfc_get_symbol_decl (vtab));\n+\t}\n+\n       gfc_add_modify_loc (input_location, &block, to_se.expr,\n-\t\t\t  fold_convert (TREE_TYPE (to_se.expr), from_se.expr));\n+\t\t\t  fold_convert (TREE_TYPE (to_se.expr), tmp));\n       gfc_free_expr (to_expr2);\n-      gfc_free_expr (from_expr2);\n-\n-      gfc_init_se (&from_se, NULL);\n       gfc_init_se (&to_se, NULL);\n+\n+      if (from_expr->ts.type == BT_CLASS)\n+\t{\n+\t  gfc_free_expr (from_expr2);\n+\t  gfc_init_se (&from_se, NULL);\n+\t}\n     }\n \n   /* Deallocate \"to\".  */"}, {"sha": "75cf459710e8d35cdeb474bf1ea7ac8fa2183efd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c", "patch": "@@ -1,3 +1,12 @@\n+2011-12-03  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/select_type_23.f03: Revert Rev. 181801,\n+\ti.e. remove the dg-error line.\n+\t* gfortran.dg/move_alloc_5.f90: Ditto and change back\n+\tto dg-do run.\n+\t* gfortran.dg/move_alloc_9.f90: New.\n+\t* gfortran.dg/move_alloc_10.f90: New\n+\n 2011-12-02  Nathan Sidwell  <nathan@acm.org>\n \n \t* lib/gcov.exp (verify-lines): Allow = as a count char."}, {"sha": "3a538be456cf74967810a7c76d8024e7464a085e", "filename": "gcc/testsuite/gfortran.dg/move_alloc_10.f90", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_10.f90?ref=fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c", "patch": "@@ -0,0 +1,79 @@\n+! { dg-do run }\n+!\n+! Test move_alloc for polymorphic scalars\n+!\n+! The following checks that a move_alloc from\n+! a TYPE to a CLASS works\n+!\n+module myalloc\n+  implicit none\n+\n+  type :: base_type\n+     integer :: i  =2\n+  end type base_type\n+\n+  type, extends(base_type) :: extended_type\n+     integer :: j = 77\n+  end type extended_type\n+contains\n+  subroutine myallocate (a)\n+    class(base_type), allocatable, intent(inout) :: a\n+    type(extended_type), allocatable :: tmp\n+\n+   allocate (tmp)\n+\n+   if (tmp%i /= 2 .or. tmp%j /= 77) call abort()\n+   tmp%i = 5\n+   tmp%j = 88\n+\n+   select type(a)\n+     type is(base_type)\n+       if (a%i /= -44) call abort()\n+       a%i = -99\n+     class default\n+       call abort ()\n+   end select\n+\n+   call move_alloc (from=tmp, to=a)\n+\n+   select type(a)\n+     type is(extended_type)\n+       if (a%i /= 5) call abort()\n+       if (a%j /= 88) call abort()\n+       a%i = 123\n+       a%j = 9498\n+     class default\n+       call abort ()\n+   end select\n+\n+   if (allocated (tmp)) call abort()\n+  end subroutine myallocate\n+end module myalloc\n+\n+program main\n+  use myalloc\n+  implicit none\n+  class(base_type), allocatable :: a\n+\n+  allocate (a)\n+\n+  select type(a)\n+    type is(base_type)\n+      if (a%i /= 2) call abort()\n+      a%i = -44\n+    class default\n+      call abort ()\n+  end select\n+\n+  call myallocate (a)\n+\n+  select type(a)\n+    type is(extended_type)\n+      if (a%i /= 123) call abort()\n+      if (a%j /= 9498) call abort()\n+    class default\n+      call abort ()\n+  end select\n+end program main\n+\n+! { dg-final { cleanup-modules \"myalloc\" } }"}, {"sha": "b2759de2c1dd1649ae765bafe203d325c858570c", "filename": "gcc/testsuite/gfortran.dg/move_alloc_5.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_5.f90?ref=fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c", "patch": "@@ -1,4 +1,4 @@\n-! { dg-do compile }\n+! { dg-do run }\n !\n ! PR 48699: [4.6/4.7 Regression] [OOP] MOVE_ALLOC inside SELECT TYPE\n !\n@@ -16,7 +16,7 @@ program testmv1\n   type(bar2), allocatable :: sm2\n \n   allocate (sm2)\n-  call move_alloc (sm2,sm) ! { dg-error \"must be either both polymorphic or both nonpolymorphic\" }\n+  call move_alloc (sm2,sm)\n \n   if (allocated(sm2)) call abort()\n   if (.not. allocated(sm)) call abort()"}, {"sha": "60d6f1496e2a8d9aacebca4147487cad28294065", "filename": "gcc/testsuite/gfortran.dg/move_alloc_9.f90", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_9.f90?ref=fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c", "patch": "@@ -0,0 +1,57 @@\n+! { dg-do compile }\n+!\n+! Test diagnostic for MOVE_ALLOC:\n+! FROM=type, TO=class is OK\n+! FROM=class, TO=type is INVALID\n+!\n+module m2\n+  type, abstract :: t2\n+  contains\n+    procedure(intf), deferred, nopass :: f\n+  end type t2\n+\n+  interface\n+    function intf()\n+      import\n+      class(t2), allocatable :: intf\n+    end function intf\n+  end interface\n+end module m2\n+\n+module m3\n+  use m2\n+  type, extends(t2) :: t3\n+  contains\n+    procedure,nopass :: f => my_f\n+  end type t3\n+contains\n+   function my_f()\n+     class(t2), allocatable :: my_f\n+   end function my_f\n+end module m3\n+\n+subroutine my_test\n+use m3\n+type(t3), allocatable :: x\n+class(t2), allocatable :: y\n+call move_alloc (x, y)\n+end subroutine my_test\n+\n+program testmv1\n+  type bar\n+  end type\n+\n+  type, extends(bar) ::  bar2\n+  end type\n+\n+  class(bar), allocatable :: sm\n+  type(bar2), allocatable :: sm2\n+\n+  allocate (sm2)\n+  call move_alloc (sm,sm2) ! { dg-error \"must be polymorphic if FROM is polymorphic\" }\n+\n+  if (allocated(sm2)) call abort()\n+  if (.not. allocated(sm)) call abort()\n+end program \n+\n+! { dg-final { cleanup-modules \"m2 m3\" } }"}, {"sha": "d7788d2f4945c637b4067d521f76d55f9710f477", "filename": "gcc/testsuite/gfortran.dg/select_type_23.f03", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_23.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_23.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_23.f03?ref=fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c", "patch": "@@ -3,10 +3,6 @@\n ! PR 48699: [OOP] MOVE_ALLOC inside SELECT TYPE\n !\n ! Contributed by Salvatore Filippone <sfilippone@uniroma2.it>\n-!\n-! Note that per Fortran 2008, 8.1.9.2, \"within the block following\n-! a TYPE IS type guard statement, the associating entity (16.5.5) is not polymorphic\"\n-!\n \n program testmv2\n \n@@ -20,7 +16,7 @@ program testmv2\n \n   select type(sm2) \n   type is (bar)\n-    call move_alloc(sm2,sm) ! { dg-error \"must be either both polymorphic or both nonpolymorphic\" }\n+    call move_alloc(sm2,sm)\n   end select\n \n end program testmv2"}]}