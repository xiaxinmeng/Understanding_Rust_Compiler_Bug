{"sha": "e2a538b1c31a13fc3d2f6d8ac3f341437775e984", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJhNTM4YjFjMzFhMTNmYzNkMmY2ZDhhYzNmMzQxNDM3Nzc1ZTk4NA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-03T14:26:16Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-15T01:53:05Z"}, "message": "analyzer: cleanups to checker_path\n\nThis patch adds DISABLE_COPY_AND_ASSIGN to checker_path, and makes its\nfields private.\n\ngcc/analyzer/ChangeLog:\n\t* checker-path.h (checker_path::get_checker_event): New function.\n\t(checker_path): Add DISABLE_COPY_AND_ASSIGN; make fields private.\n\t* diagnostic-manager.cc\n\t(diagnostic_manager::prune_for_sm_diagnostic): Replace direct\n\taccess to checker_path::m_events with accessor functions.  Fix\n\toverlong line.\n\t(diagnostic_manager::prune_interproc_events): Replace direct\n\taccess to checker_path::m_events with accessor functions.\n\t(diagnostic_manager::finish_pruning): Likewise.", "tree": {"sha": "42d3259504b5264ee52cb8d51f8936a1cba91c86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42d3259504b5264ee52cb8d51f8936a1cba91c86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2a538b1c31a13fc3d2f6d8ac3f341437775e984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a538b1c31a13fc3d2f6d8ac3f341437775e984", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2a538b1c31a13fc3d2f6d8ac3f341437775e984", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a538b1c31a13fc3d2f6d8ac3f341437775e984/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94946989e82cfa996873bcf6273242f5606cd7f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94946989e82cfa996873bcf6273242f5606cd7f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94946989e82cfa996873bcf6273242f5606cd7f5"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "d5dd0cab7240f9698d7481300d515dd7f982930c", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a538b1c31a13fc3d2f6d8ac3f341437775e984/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a538b1c31a13fc3d2f6d8ac3f341437775e984/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=e2a538b1c31a13fc3d2f6d8ac3f341437775e984", "patch": "@@ -1,3 +1,15 @@\n+2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* checker-path.h (checker_path::get_checker_event): New function.\n+\t(checker_path): Add DISABLE_COPY_AND_ASSIGN; make fields private.\n+\t* diagnostic-manager.cc\n+\t(diagnostic_manager::prune_for_sm_diagnostic): Replace direct\n+\taccess to checker_path::m_events with accessor functions.  Fix\n+\toverlong line.\n+\t(diagnostic_manager::prune_interproc_events): Replace direct\n+\taccess to checker_path::m_events with accessor functions.\n+\t(diagnostic_manager::finish_pruning): Likewise.\n+\n 2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n \n \t* checker-path.h (checker_event::clone): Delete vfunc decl."}, {"sha": "20bab77b719507eae7d324f855d617c8ecef0501", "filename": "gcc/analyzer/checker-path.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a538b1c31a13fc3d2f6d8ac3f341437775e984/gcc%2Fanalyzer%2Fchecker-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a538b1c31a13fc3d2f6d8ac3f341437775e984/gcc%2Fanalyzer%2Fchecker-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.h?ref=e2a538b1c31a13fc3d2f6d8ac3f341437775e984", "patch": "@@ -452,6 +452,11 @@ class checker_path : public diagnostic_path\n     return *m_events[idx];\n   }\n \n+  checker_event *get_checker_event (int idx)\n+  {\n+    return m_events[idx];\n+  }\n+\n   void dump (pretty_printer *pp) const;\n   void debug () const;\n \n@@ -502,6 +507,9 @@ class checker_path : public diagnostic_path\n     return false;\n   }\n \n+private:\n+  DISABLE_COPY_AND_ASSIGN(checker_path);\n+\n   /* The events that have occurred along this path.  */\n   auto_delete_vec<checker_event> m_events;\n "}, {"sha": "a00d9f7439852c7a4932803e544b40656d796709", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a538b1c31a13fc3d2f6d8ac3f341437775e984/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a538b1c31a13fc3d2f6d8ac3f341437775e984/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=e2a538b1c31a13fc3d2f6d8ac3f341437775e984", "patch": "@@ -961,10 +961,10 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\t\t\t\t     tree var,\n \t\t\t\t\t     state_machine::state_t state) const\n {\n-  int idx = path->m_events.length () - 1;\n-  while (idx >= 0 && idx < (signed)path->m_events.length ())\n+  int idx = path->num_events () - 1;\n+  while (idx >= 0 && idx < (signed)path->num_events ())\n     {\n-      checker_event *base_event = path->m_events[idx];\n+      checker_event *base_event = path->get_checker_event (idx);\n       if (get_logger ())\n \t{\n \t  if (sm)\n@@ -1096,7 +1096,8 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\tlog (\"filtering event %i: CFG edge\", idx);\n \t\tpath->delete_event (idx);\n \t\t/* Also delete the corresponding EK_END_CFG_EDGE.  */\n-\t\tgcc_assert (path->m_events[idx]->m_kind == EK_END_CFG_EDGE);\n+\t\tgcc_assert (path->get_checker_event (idx)->m_kind\n+\t\t\t    == EK_END_CFG_EDGE);\n \t\tpath->delete_event (idx);\n \t      }\n \t  }\n@@ -1193,18 +1194,19 @@ diagnostic_manager::prune_interproc_events (checker_path *path) const\n   do\n     {\n       changed = false;\n-      int idx = path->m_events.length () - 1;\n+      int idx = path->num_events () - 1;\n       while (idx >= 0)\n \t{\n \t  /* Prune [..., call, function-entry, return, ...] triples.  */\n-\t  if (idx + 2 < (signed)path->m_events.length ()\n-\t      && path->m_events[idx]->is_call_p ()\n-\t      && path->m_events[idx + 1]->is_function_entry_p ()\n-\t      && path->m_events[idx + 2]->is_return_p ())\n+\t  if (idx + 2 < (signed)path->num_events ()\n+\t      && path->get_checker_event (idx)->is_call_p ()\n+\t      && path->get_checker_event (idx + 1)->is_function_entry_p ()\n+\t      && path->get_checker_event (idx + 2)->is_return_p ())\n \t    {\n \t      if (get_logger ())\n \t\t{\n-\t\t  label_text desc (path->m_events[idx]->get_desc (false));\n+\t\t  label_text desc\n+\t\t    (path->get_checker_event (idx)->get_desc (false));\n \t\t  log (\"filtering events %i-%i:\"\n \t\t       \" irrelevant call/entry/return: %s\",\n \t\t       idx, idx + 2, desc.m_buffer);\n@@ -1220,13 +1222,14 @@ diagnostic_manager::prune_interproc_events (checker_path *path) const\n \n \t  /* Prune [..., call, return, ...] pairs\n \t     (for -fanalyzer-verbosity=0).  */\n-\t  if (idx + 1 < (signed)path->m_events.length ()\n-\t      && path->m_events[idx]->is_call_p ()\n-\t      && path->m_events[idx + 1]->is_return_p ())\n+\t  if (idx + 1 < (signed)path->num_events ()\n+\t      && path->get_checker_event (idx)->is_call_p ()\n+\t      && path->get_checker_event (idx + 1)->is_return_p ())\n \t    {\n \t      if (get_logger ())\n \t\t{\n-\t\t  label_text desc (path->m_events[idx]->get_desc (false));\n+\t\t  label_text desc\n+\t\t    (path->get_checker_event (idx)->get_desc (false));\n \t\t  log (\"filtering events %i-%i:\"\n \t\t       \" irrelevant call/return: %s\",\n \t\t       idx, idx + 1, desc.m_buffer);\n@@ -1256,10 +1259,10 @@ diagnostic_manager::finish_pruning (checker_path *path) const\n {\n   if (!path->interprocedural_p ())\n     {\n-      int idx = path->m_events.length () - 1;\n-      while (idx >= 0 && idx < (signed)path->m_events.length ())\n+      int idx = path->num_events () - 1;\n+      while (idx >= 0 && idx < (signed)path->num_events ())\n \t{\n-\t  checker_event *base_event = path->m_events[idx];\n+\t  checker_event *base_event = path->get_checker_event (idx);\n \t  if (base_event->m_kind == EK_FUNCTION_ENTRY)\n \t    {\n \t      log (\"filtering event %i:\""}]}