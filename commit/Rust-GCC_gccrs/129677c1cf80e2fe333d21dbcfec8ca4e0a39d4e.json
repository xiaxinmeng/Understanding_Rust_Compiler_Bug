{"sha": "129677c1cf80e2fe333d21dbcfec8ca4e0a39d4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI5Njc3YzFjZjgwZTJmZTMzM2QyMWRiY2ZlYzhjYTRlMGEzOWQ0ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-03-28T10:00:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-03-28T10:00:05Z"}, "message": "call.c (joust): Don't call inform for a permerror returning false.\n\n2013-03-28  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* call.c (joust): Don't call inform for a permerror returning false.\n\t* parser.c (cp_parser_check_class_key): Likewise.\n\t* pt.c (tsubst_copy_and_build): Likewise.\n\nFrom-SVN: r197190", "tree": {"sha": "25f7029eb5c55cf70bef65e257ea1c7614a325ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25f7029eb5c55cf70bef65e257ea1c7614a325ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/129677c1cf80e2fe333d21dbcfec8ca4e0a39d4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129677c1cf80e2fe333d21dbcfec8ca4e0a39d4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/129677c1cf80e2fe333d21dbcfec8ca4e0a39d4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129677c1cf80e2fe333d21dbcfec8ca4e0a39d4e/comments", "author": null, "committer": null, "parents": [{"sha": "a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd"}], "stats": {"total": 78, "additions": 44, "deletions": 34}, "files": [{"sha": "40b83ded1790cee3c59698059ff50d65d7b9b7d5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129677c1cf80e2fe333d21dbcfec8ca4e0a39d4e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129677c1cf80e2fe333d21dbcfec8ca4e0a39d4e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=129677c1cf80e2fe333d21dbcfec8ca4e0a39d4e", "patch": "@@ -1,3 +1,9 @@\n+2013-03-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* call.c (joust): Don't call inform for a permerror returning false.\n+\t* parser.c (cp_parser_check_class_key): Likewise.\n+\t* pt.c (tsubst_copy_and_build): Likewise.\n+\n 2013-03-27  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/56749"}, {"sha": "cff653fa14c1ac21596eee9835985a6606123887", "filename": "gcc/cp/call.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129677c1cf80e2fe333d21dbcfec8ca4e0a39d4e/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129677c1cf80e2fe333d21dbcfec8ca4e0a39d4e/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=129677c1cf80e2fe333d21dbcfec8ca4e0a39d4e", "patch": "@@ -8650,13 +8650,15 @@ joust (struct z_candidate *cand1, struct z_candidate *cand2, bool warn,\n \t\t{\n \t\t  if (complain & tf_error)\n \t\t    {\n-\t\t      permerror (input_location,\n-\t\t\t\t \"default argument mismatch in \"\n-\t\t\t\t \"overload resolution\");\n-\t\t      inform (input_location,\n-\t\t\t      \" candidate 1: %q+#F\", cand1->fn);\n-\t\t      inform (input_location,\n-\t\t\t      \" candidate 2: %q+#F\", cand2->fn);\n+\t\t      if (permerror (input_location,\n+\t\t\t\t     \"default argument mismatch in \"\n+\t\t\t\t     \"overload resolution\"))\n+\t\t\t{\n+\t\t\t  inform (input_location,\n+\t\t\t\t  \" candidate 1: %q+#F\", cand1->fn);\n+\t\t\t  inform (input_location,\n+\t\t\t\t  \" candidate 2: %q+#F\", cand2->fn);\n+\t\t\t}\n \t\t    }\n \t\t  else\n \t\t    return 0;"}, {"sha": "5e2a4e095253ffce6355355b43a4c929640559f2", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129677c1cf80e2fe333d21dbcfec8ca4e0a39d4e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129677c1cf80e2fe333d21dbcfec8ca4e0a39d4e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=129677c1cf80e2fe333d21dbcfec8ca4e0a39d4e", "patch": "@@ -23363,12 +23363,12 @@ cp_parser_check_class_key (enum tag_types class_key, tree type)\n     return;\n   if ((TREE_CODE (type) == UNION_TYPE) != (class_key == union_type))\n     {\n-      permerror (input_location, \"%qs tag used in naming %q#T\",\n-\t\t class_key == union_type ? \"union\"\n-\t\t : class_key == record_type ? \"struct\" : \"class\",\n-\t\t type);\n-      inform (DECL_SOURCE_LOCATION (TYPE_NAME (type)),\n-\t      \"%q#T was previously declared here\", type);\n+      if (permerror (input_location, \"%qs tag used in naming %q#T\",\n+\t\t     class_key == union_type ? \"union\"\n+\t\t     : class_key == record_type ? \"struct\" : \"class\",\n+\t\t     type))\n+\tinform (DECL_SOURCE_LOCATION (TYPE_NAME (type)),\n+\t\t\"%q#T was previously declared here\", type);\n     }\n }\n "}, {"sha": "59ecdcb82b1bc62224533313e8ce3a0ebd237a5a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129677c1cf80e2fe333d21dbcfec8ca4e0a39d4e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129677c1cf80e2fe333d21dbcfec8ca4e0a39d4e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=129677c1cf80e2fe333d21dbcfec8ca4e0a39d4e", "patch": "@@ -14019,30 +14019,32 @@ tsubst_copy_and_build (tree t,\n \t\t      fn = TREE_OPERAND (fn, 1);\n \t\t    if (is_overloaded_fn (fn))\n \t\t      fn = get_first_fn (fn);\n-\t\t    permerror (EXPR_LOC_OR_HERE (t),\n-\t\t\t       \"%qD was not declared in this scope, \"\n-\t\t\t       \"and no declarations were found by \"\n-\t\t\t       \"argument-dependent lookup at the point \"\n-\t\t\t       \"of instantiation\", function);\n-\t\t    if (!DECL_P (fn))\n-\t\t      /* Can't say anything more.  */;\n-\t\t    else if (DECL_CLASS_SCOPE_P (fn))\n+\t\t    if (permerror (EXPR_LOC_OR_HERE (t),\n+\t\t\t\t   \"%qD was not declared in this scope, \"\n+\t\t\t\t   \"and no declarations were found by \"\n+\t\t\t\t   \"argument-dependent lookup at the point \"\n+\t\t\t\t   \"of instantiation\", function))\n \t\t      {\n-\t\t\tinform (EXPR_LOC_OR_HERE (t),\n-\t\t\t\t\"declarations in dependent base %qT are \"\n-\t\t\t\t\"not found by unqualified lookup\",\n-\t\t\t\tDECL_CLASS_CONTEXT (fn));\n-\t\t\tif (current_class_ptr)\n-\t\t\t  inform (EXPR_LOC_OR_HERE (t),\n-\t\t\t\t  \"use %<this->%D%> instead\", function);\n+\t\t\tif (!DECL_P (fn))\n+\t\t\t  /* Can't say anything more.  */;\n+\t\t\telse if (DECL_CLASS_SCOPE_P (fn))\n+\t\t\t  {\n+\t\t\t    inform (EXPR_LOC_OR_HERE (t),\n+\t\t\t\t    \"declarations in dependent base %qT are \"\n+\t\t\t\t    \"not found by unqualified lookup\",\n+\t\t\t\t    DECL_CLASS_CONTEXT (fn));\n+\t\t\t    if (current_class_ptr)\n+\t\t\t      inform (EXPR_LOC_OR_HERE (t),\n+\t\t\t\t      \"use %<this->%D%> instead\", function);\n+\t\t\t    else\n+\t\t\t      inform (EXPR_LOC_OR_HERE (t),\n+\t\t\t\t      \"use %<%T::%D%> instead\",\n+\t\t\t\t      current_class_name, function);\n+\t\t\t  }\n \t\t\telse\n-\t\t\t  inform (EXPR_LOC_OR_HERE (t),\n-\t\t\t\t  \"use %<%T::%D%> instead\",\n-\t\t\t\t  current_class_name, function);\n+\t\t\t  inform (0, \"%q+D declared here, later in the \"\n+\t\t\t\t  \"translation unit\", fn);\n \t\t      }\n-\t\t    else\n-\t\t      inform (0, \"%q+D declared here, later in the \"\n-\t\t\t\t\"translation unit\", fn);\n \t\t    function = unq;\n \t\t  }\n \t      }"}]}