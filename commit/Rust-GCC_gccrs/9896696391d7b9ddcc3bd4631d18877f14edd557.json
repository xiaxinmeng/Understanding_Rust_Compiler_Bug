{"sha": "9896696391d7b9ddcc3bd4631d18877f14edd557", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg5NjY5NjM5MWQ3YjlkZGNjM2JkNDYzMWQxODg3N2YxNGVkZDU1Nw==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-12-05T07:11:58Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-12-05T07:11:58Z"}, "message": "Enable VNNI support [1/5]\n\ngcc/\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_AVX512VNNI_SET,\n\tOPTION_MASK_ISA_AVX512VNNI_UNSET): New.\n\t(ix86_handle_option): Handle -mavx512vnni.\n\t* config/i386/cpuid.h (bit_AVX512VNNI): New bit.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Handle new bit.\n\t* config/i386/i386-c (__AVX512VNNI__): New.\n\t* config/i386/i386.c (ix86_target_string): Handle new option.\n\t(ix86_valid_target_attribute_inner_p): Handle new option.\n\t* config/i386/i386.h (TARGET_AVX512VNNI, TARGET_AVX512VNNI_P): New.\n\t* config/i386/i386.opt (mavx512vnni): New option.\n\nFrom-SVN: r255401", "tree": {"sha": "8a01edbd0d9de34378f07e98c252ddedf323ff97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a01edbd0d9de34378f07e98c252ddedf323ff97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9896696391d7b9ddcc3bd4631d18877f14edd557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9896696391d7b9ddcc3bd4631d18877f14edd557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9896696391d7b9ddcc3bd4631d18877f14edd557", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9896696391d7b9ddcc3bd4631d18877f14edd557/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae4bb13f0d8bd4d630a47f04ff5b7e60274a0a9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae4bb13f0d8bd4d630a47f04ff5b7e60274a0a9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae4bb13f0d8bd4d630a47f04ff5b7e60274a0a9b"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "879fb99b313b6c6dfe644c8fadfb98788d1f0de8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9896696391d7b9ddcc3bd4631d18877f14edd557/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9896696391d7b9ddcc3bd4631d18877f14edd557/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9896696391d7b9ddcc3bd4631d18877f14edd557", "patch": "@@ -1,3 +1,16 @@\n+2017-12-05  Julia Koval  <julia.koval@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_AVX512VNNI_SET,\n+\tOPTION_MASK_ISA_AVX512VNNI_UNSET): New.\n+\t(ix86_handle_option): Handle -mavx512vnni.\n+\t* config/i386/cpuid.h (bit_AVX512VNNI): New bit.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Handle new bit.\n+\t* config/i386/i386-c (__AVX512VNNI__): New.\n+\t* config/i386/i386.c (ix86_target_string): Handle new option.\n+\t(ix86_valid_target_attribute_inner_p): Handle new option.\n+\t* config/i386/i386.h (TARGET_AVX512VNNI, TARGET_AVX512VNNI_P): New.\n+\t* config/i386/i386.opt (mavx512vnni): New option.\n+\n 2017-12-01  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR target/81616"}, {"sha": "e57317803c22dbe7705ba9bfc86a5835d84897ed", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9896696391d7b9ddcc3bd4631d18877f14edd557/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9896696391d7b9ddcc3bd4631d18877f14edd557/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=9896696391d7b9ddcc3bd4631d18877f14edd557", "patch": "@@ -81,6 +81,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_AVX5124FMAPS_SET OPTION_MASK_ISA_AVX5124FMAPS\n #define OPTION_MASK_ISA_AVX5124VNNIW_SET OPTION_MASK_ISA_AVX5124VNNIW\n #define OPTION_MASK_ISA_AVX512VBMI2_SET OPTION_MASK_ISA_AVX512VBMI2\n+#define OPTION_MASK_ISA_AVX512VNNI_SET OPTION_MASK_ISA_AVX512VNNI\n #define OPTION_MASK_ISA_AVX512VPOPCNTDQ_SET OPTION_MASK_ISA_AVX512VPOPCNTDQ\n #define OPTION_MASK_ISA_RTM_SET OPTION_MASK_ISA_RTM\n #define OPTION_MASK_ISA_PRFCHW_SET OPTION_MASK_ISA_PRFCHW\n@@ -193,6 +194,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_AVX5124FMAPS_UNSET OPTION_MASK_ISA_AVX5124FMAPS\n #define OPTION_MASK_ISA_AVX5124VNNIW_UNSET OPTION_MASK_ISA_AVX5124VNNIW\n #define OPTION_MASK_ISA_AVX512VBMI2_UNSET OPTION_MASK_ISA_AVX512VBMI2\n+#define OPTION_MASK_ISA_AVX512VNNI_UNSET OPTION_MASK_ISA_AVX512VNNI\n #define OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET OPTION_MASK_ISA_AVX512VPOPCNTDQ\n #define OPTION_MASK_ISA_RTM_UNSET OPTION_MASK_ISA_RTM\n #define OPTION_MASK_ISA_PRFCHW_UNSET OPTION_MASK_ISA_PRFCHW\n@@ -582,6 +584,21 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mavx512vnni:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_AVX512VNNI_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_AVX512VNNI_SET;\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_AVX512F_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_AVX512F_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_AVX512VNNI_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_AVX512VNNI_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mavx512vpopcntdq:\n       if (value)\n \t{"}, {"sha": "3c992a8b9dd71595307df911711b2c4a21423056", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9896696391d7b9ddcc3bd4631d18877f14edd557/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9896696391d7b9ddcc3bd4631d18877f14edd557/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=9896696391d7b9ddcc3bd4631d18877f14edd557", "patch": "@@ -100,6 +100,7 @@\n #define bit_AVX512VBMI2\t(1 << 6)\n #define bit_SHSTK\t(1 << 7)\n #define bit_GFNI\t(1 << 8)\n+#define bit_AVX512VNNI\t(1 << 11)\n #define bit_AVX512VPOPCNTDQ\t(1 << 14)\n #define bit_RDPID\t(1 << 22)\n "}, {"sha": "a6bafb160a9b80228dc0347702e73e224dae01a0", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9896696391d7b9ddcc3bd4631d18877f14edd557/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9896696391d7b9ddcc3bd4631d18877f14edd557/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=9896696391d7b9ddcc3bd4631d18877f14edd557", "patch": "@@ -417,6 +417,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_avx5124fmaps = 0, has_avx5124vnniw = 0;\n   unsigned int has_gfni = 0, has_avx512vbmi2 = 0;\n   unsigned int has_ibt = 0, has_shstk = 0;\n+  unsigned int has_avx512vnni = 0;\n \n   bool arch;\n \n@@ -506,6 +507,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_avx512vbmi = ecx & bit_AVX512VBMI;\n       has_pku = ecx & bit_OSPKE;\n       has_avx512vbmi2 = ecx & bit_AVX512VBMI2;\n+      has_avx512vnni = ecx & bit_AVX512VNNI;\n       has_rdpid = ecx & bit_RDPID;\n       has_gfni = ecx & bit_GFNI;\n \n@@ -1064,6 +1066,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *avx512vbmi = has_avx512vbmi ? \" -mavx512vbmi\" : \" -mno-avx512vbmi\";\n       const char *avx5124vnniw = has_avx5124vnniw ? \" -mavx5124vnniw\" : \" -mno-avx5124vnniw\";\n       const char *avx512vbmi2 = has_avx512vbmi2 ? \" -mavx512vbmi2\" : \" -mno-avx512vbmi2\";\n+      const char *avx512vnni = has_avx512vnni ? \" -mavx512vnni\" : \" -mno-avx512vnni\";\n       const char *avx5124fmaps = has_avx5124fmaps ? \" -mavx5124fmaps\" : \" -mno-avx5124fmaps\";\n       const char *clwb = has_clwb ? \" -mclwb\" : \" -mno-clwb\";\n       const char *mwaitx  = has_mwaitx  ? \" -mmwaitx\"  : \" -mno-mwaitx\"; \n@@ -1083,7 +1086,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\txsavec, xsaves, avx512dq, avx512bw, avx512vl,\n \t\t\tavx512ifma, avx512vbmi, avx5124fmaps, avx5124vnniw,\n \t\t\tclwb, mwaitx, clzero, pku, rdpid, gfni, ibt, shstk,\n-\t\t\tavx512vbmi2, NULL);\n+\t\t\tavx512vbmi2, avx512vnni, NULL);\n     }\n \n done:"}, {"sha": "fc667a763129e90ce3a6eba374be87dcd7bb9144", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9896696391d7b9ddcc3bd4631d18877f14edd557/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9896696391d7b9ddcc3bd4631d18877f14edd557/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=9896696391d7b9ddcc3bd4631d18877f14edd557", "patch": "@@ -394,6 +394,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__AVX5124VNNIW__\");\n   if (isa_flag2 & OPTION_MASK_ISA_AVX512VBMI2)\n     def_or_undef (parse_in, \"__AVX512VBMI2__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_AVX512VNNI)\n+    def_or_undef (parse_in, \"__AVX512VNNI__\");\n   if (isa_flag2 & OPTION_MASK_ISA_SGX)\n     def_or_undef (parse_in, \"__SGX__\");\n   if (isa_flag2 & OPTION_MASK_ISA_AVX5124FMAPS)"}, {"sha": "850ad4011a3f5e1dfd31e333017e98d9473cb94a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9896696391d7b9ddcc3bd4631d18877f14edd557/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9896696391d7b9ddcc3bd4631d18877f14edd557/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9896696391d7b9ddcc3bd4631d18877f14edd557", "patch": "@@ -2747,6 +2747,7 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n   {\n     { \"-mmpx\",\t\tOPTION_MASK_ISA_MPX },\n     { \"-mavx512vbmi2\",\tOPTION_MASK_ISA_AVX512VBMI2 },\n+    { \"-mavx512vnni\", OPTION_MASK_ISA_AVX512VNNI },\n     { \"-mrdpid\",\tOPTION_MASK_ISA_RDPID },\n     { \"-msgx\",\t\tOPTION_MASK_ISA_SGX },\n     { \"-mavx5124vnniw\", OPTION_MASK_ISA_AVX5124VNNIW },\n@@ -5256,6 +5257,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"avx5124vnniw\", OPT_mavx5124vnniw),\n     IX86_ATTR_ISA (\"avx512vpopcntdq\", OPT_mavx512vpopcntdq),\n     IX86_ATTR_ISA (\"avx512vbmi2\", OPT_mavx512vbmi2),\n+    IX86_ATTR_ISA (\"avx512vnni\", OPT_mavx512vnni),\n \n     IX86_ATTR_ISA (\"avx512vbmi\", OPT_mavx512vbmi),\n     IX86_ATTR_ISA (\"avx512ifma\", OPT_mavx512ifma),"}, {"sha": "3477aa9eba789baee24fb97cba8e4fea692bda2c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9896696391d7b9ddcc3bd4631d18877f14edd557/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9896696391d7b9ddcc3bd4631d18877f14edd557/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=9896696391d7b9ddcc3bd4631d18877f14edd557", "patch": "@@ -89,6 +89,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_AVX512VBMI2_P(x) TARGET_ISA_AVX512VBMI2_P(x)\n #define TARGET_AVX512VPOPCNTDQ\tTARGET_ISA_AVX512VPOPCNTDQ\n #define TARGET_AVX512VPOPCNTDQ_P(x) TARGET_ISA_AVX512VPOPCNTDQ_P(x)\n+#define TARGET_AVX512VNNI\tTARGET_ISA_AVX512VNNI\n+#define TARGET_AVX512VNNI_P(x) TARGET_ISA_AVX512VNNI_P(x)\n #define TARGET_FMA\tTARGET_ISA_FMA\n #define TARGET_FMA_P(x)\tTARGET_ISA_FMA_P(x)\n #define TARGET_SSE4A\tTARGET_ISA_SSE4A"}, {"sha": "6632ba800248be98278de9786a9e396ceffb0cfa", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9896696391d7b9ddcc3bd4631d18877f14edd557/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9896696391d7b9ddcc3bd4631d18877f14edd557/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=9896696391d7b9ddcc3bd4631d18877f14edd557", "patch": "@@ -741,6 +741,10 @@ mavx512vbmi2\n Target Report Mask(ISA_AVX512VBMI2) Var(ix86_isa_flags2) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX512VBMI2 built-in functions and code generation.\n \n+mavx512vnni\n+Target Report Mask(ISA_AVX512VNNI) Var(ix86_isa_flags2) Save\n+Support AVX512VNNI built-in functions and code generation.\n+\n mfma\n Target Report Mask(ISA_FMA) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX and FMA built-in functions and code generation."}]}