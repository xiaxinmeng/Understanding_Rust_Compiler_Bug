{"sha": "87a9bfe86d8a87d09de5d60e430d14bfa6c816f0", "node_id": "C_kwDOANBUbNoAKDg3YTliZmU4NmQ4YTg3ZDA5ZGU1ZDYwZTQzMGQxNGJmYTZjODE2ZjA", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-07-20T15:51:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-07-20T22:38:48Z"}, "message": "libstdc++: Fix std::common_iterator triviality [PR100823]\n\nThis fixes the remaining problem reported in the PR, that the special\nmembers should be trivial.  This can be done by constraining the\nnon-trivial versions and adding defaulted overloads that will be used\nwhen the union members are trivial.\n\nMaking these members trivial alters the argument passing ABI and so\nisn't suitable for backporting to release branches.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/100823\n\t* include/bits/stl_iterator.h (common_iterator): Define\n\tdestructor, copy constructor and move constructor as trivial\n\twhen the underlying types allow.\n\t* testsuite/24_iterators/common_iterator/100823.cc: Check\n\ttriviality of special members.", "tree": {"sha": "52a0d2c1898c82e3c8985245dac64c98dd3394fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52a0d2c1898c82e3c8985245dac64c98dd3394fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87a9bfe86d8a87d09de5d60e430d14bfa6c816f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a9bfe86d8a87d09de5d60e430d14bfa6c816f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87a9bfe86d8a87d09de5d60e430d14bfa6c816f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a9bfe86d8a87d09de5d60e430d14bfa6c816f0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56c999860bbbb2fd5091ba0985e2e5eaa90c6478", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c999860bbbb2fd5091ba0985e2e5eaa90c6478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56c999860bbbb2fd5091ba0985e2e5eaa90c6478"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "9cd262cd1d92e3d35140057a8dcbbb50c798053e", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a9bfe86d8a87d09de5d60e430d14bfa6c816f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a9bfe86d8a87d09de5d60e430d14bfa6c816f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=87a9bfe86d8a87d09de5d60e430d14bfa6c816f0", "patch": "@@ -1925,9 +1925,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n       }\n \n+    common_iterator(const common_iterator&) = default;\n+\n     constexpr\n     common_iterator(const common_iterator& __x)\n     noexcept(_S_noexcept<const _It&, const _Sent&>())\n+    requires (!is_trivially_copyable_v<_It> || !is_trivially_copyable_v<_Sent>)\n     : _M_valueless(), _M_index(__x._M_index)\n     {\n       if (_M_index == 0)\n@@ -1946,9 +1949,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n+    common_iterator(common_iterator&&) = default;\n+\n     constexpr\n     common_iterator(common_iterator&& __x)\n     noexcept(_S_noexcept<_It, _Sent>())\n+    requires (!is_trivially_copyable_v<_It> || !is_trivially_copyable_v<_Sent>)\n     : _M_valueless(), _M_index(__x._M_index)\n     {\n       if (_M_index == 0)\n@@ -2017,8 +2023,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n+#if __cpp_concepts >= 202002L // Constrained special member functions\n+    ~common_iterator() = default;\n+\n     constexpr\n     ~common_iterator()\n+      requires (!is_trivially_destructible_v<_It>\n+\t\t  || !is_trivially_destructible_v<_Sent>)\n+#else\n+    constexpr\n+    ~common_iterator()\n+#endif\n     {\n       if (_M_index == 0)\n \t_M_it.~_It();"}, {"sha": "b42dd087ab2dbe99c0ff97761078a06a12988d7e", "filename": "libstdc++-v3/testsuite/24_iterators/common_iterator/100823.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a9bfe86d8a87d09de5d60e430d14bfa6c816f0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcommon_iterator%2F100823.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a9bfe86d8a87d09de5d60e430d14bfa6c816f0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcommon_iterator%2F100823.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcommon_iterator%2F100823.cc?ref=87a9bfe86d8a87d09de5d60e430d14bfa6c816f0", "patch": "@@ -4,6 +4,21 @@\n #include <testsuite_iterators.h>\n #include <testsuite_hooks.h>\n \n+void\n+test_triviality()\n+{\n+  using I = std::common_iterator<int*, const int*>;\n+\n+  // Cannot be trivial, because it has to initialize members.\n+  static_assert( ! std::is_trivially_default_constructible_v<I> );\n+\n+  static_assert( std::is_trivially_destructible_v<I> );\n+  static_assert( std::is_trivially_copy_constructible_v<I> );\n+  static_assert( std::is_trivially_copy_assignable_v<I> );\n+  static_assert( std::is_trivially_move_constructible_v<I> );\n+  static_assert( std::is_trivially_move_assignable_v<I> );\n+}\n+\n void\n test_valueless_assignment()\n {"}]}