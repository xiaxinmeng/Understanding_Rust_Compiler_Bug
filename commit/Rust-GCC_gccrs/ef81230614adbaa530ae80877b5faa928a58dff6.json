{"sha": "ef81230614adbaa530ae80877b5faa928a58dff6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY4MTIzMDYxNGFkYmFhNTMwYWU4MDg3N2I1ZmFhOTI4YTU4ZGZmNg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-23T22:57:36Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-23T22:57:36Z"}, "message": "re PR target/51244 ([SH] Inefficient conditional branch and code around T bit)\n\n\tPR target/51244\n\t* config/sh/predicates.md (general_movsrc_operand,\n\tgeneral_movdst_operand): Reject T_REG.\n\t* config/sh/sh.md (*extendqisi2_compact_reg, *extendhisi2_compact_reg,\n\tmovsi_i, movsi_ie, movsi_i_lowpart, *movqi_reg_reg, *movhi_reg_reg):\n\tRemove T_REG alternatives.\n\t(*negtstsi): New insn.\n\nFrom-SVN: r189797", "tree": {"sha": "4d7c854a037547223d0299868fa5ceef530ce812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d7c854a037547223d0299868fa5ceef530ce812"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef81230614adbaa530ae80877b5faa928a58dff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef81230614adbaa530ae80877b5faa928a58dff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef81230614adbaa530ae80877b5faa928a58dff6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef81230614adbaa530ae80877b5faa928a58dff6/comments", "author": null, "committer": null, "parents": [{"sha": "5734aefd1bcbdd13ca2b3e09884c1552f66886d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5734aefd1bcbdd13ca2b3e09884c1552f66886d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5734aefd1bcbdd13ca2b3e09884c1552f66886d5"}], "stats": {"total": 97, "additions": 55, "deletions": 42}, "files": [{"sha": "9506f1cb2c632d15b52e260a01941ef47cd990c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef81230614adbaa530ae80877b5faa928a58dff6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef81230614adbaa530ae80877b5faa928a58dff6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef81230614adbaa530ae80877b5faa928a58dff6", "patch": "@@ -1,3 +1,13 @@\n+2012-07-23  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/51244\n+\t* config/sh/predicates.md (general_movsrc_operand,\n+\tgeneral_movdst_operand): Reject T_REG.\n+\t* config/sh/sh.md (*extendqisi2_compact_reg, *extendhisi2_compact_reg,\n+\tmovsi_i, movsi_ie, movsi_i_lowpart, *movqi_reg_reg, *movhi_reg_reg):\n+\tRemove T_REG alternatives.\n+\t(*negtstsi): New insn.\n+\n 2012-07-23  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/53511"}, {"sha": "3b9372125471fa0395197764b0c7dbb0df910424", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef81230614adbaa530ae80877b5faa928a58dff6/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef81230614adbaa530ae80877b5faa928a58dff6/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=ef81230614adbaa530ae80877b5faa928a58dff6", "patch": "@@ -382,6 +382,9 @@\n (define_predicate \"general_movsrc_operand\"\n   (match_code \"subreg,reg,const_int,const_double,mem,symbol_ref,label_ref,const,const_vector\")\n {\n+  if (t_reg_operand (op, mode))\n+    return 0;\n+\n   if (MEM_P (op))\n     {\n       rtx inside = XEXP (op, 0);\n@@ -455,6 +458,9 @@\n (define_predicate \"general_movdst_operand\"\n   (match_code \"subreg,reg,mem\")\n {\n+  if (t_reg_operand (op, mode))\n+    return 0;\n+\n   /* Only pre dec allowed.  */\n   if (MEM_P (op) && GET_CODE (XEXP (op, 0)) == POST_INC)\n     return 0;"}, {"sha": "a8c11b504f3811f7bde2cb9f1311a720a405e5cc", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 39, "deletions": 42, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef81230614adbaa530ae80877b5faa928a58dff6/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef81230614adbaa530ae80877b5faa928a58dff6/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=ef81230614adbaa530ae80877b5faa928a58dff6", "patch": "@@ -779,6 +779,18 @@\n \tcmp/pz\t%0\"\n    [(set_attr \"type\" \"mt_group\")])\n \n+;; FIXME: This is actually wrong.  There is no way to literally move a\n+;; general reg to t reg.  Luckily, it seems that this pattern will be only\n+;; used when the general reg is known be either '0' or '1' during combine.\n+;; What we actually need is reg != 0 -> T, but we have only reg == 0 -> T.\n+;; Due to interactions with other patterns, combine fails to pick the latter\n+;; and invert the dependent logic.\n+(define_insn \"*negtstsi\"\n+  [(set (reg:SI T_REG) (match_operand:SI 0 \"arith_reg_operand\" \"r\"))]\n+  \"TARGET_SH1\"\n+  \"cmp/pl\t%0\"\n+   [(set_attr \"type\" \"mt_group\")])\n+\n ;; -------------------------------------------------------------------------\n ;; SImode compare and branch\n ;; -------------------------------------------------------------------------\n@@ -4793,22 +4805,18 @@ label:\n })\n \n (define_insn \"*extendqisi2_compact_reg\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r,r\")\n-\t(sign_extend:SI (match_operand:QI 1 \"register_operand\" \"r,t\")))]\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n+\t(sign_extend:SI (match_operand:QI 1 \"register_operand\" \"r\")))]\n   \"TARGET_SH1\"\n-  \"@\n-\texts.b\t%1,%0\n-\tmovt\t%0\"\n-  [(set_attr \"type\" \"arith,arith\")])\n+  \"exts.b\t%1,%0\"\n+  [(set_attr \"type\" \"arith\")])\n \n (define_insn \"*extendhisi2_compact_reg\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r,r\")\n-\t(sign_extend:SI (match_operand:HI 1 \"register_operand\" \"r,t\")))]\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n+\t(sign_extend:SI (match_operand:HI 1 \"register_operand\" \"r\")))]\n   \"TARGET_SH1\"\n-  \"@\n-\texts.w\t%1,%0\n-\tmovt\t%0\"\n-  [(set_attr \"type\" \"arith,arith\")])\n+  \"exts.w\t%1,%0\"\n+  [(set_attr \"type\" \"arith\")])\n \n ;; FIXME: Fold non-SH2A and SH2A alternatives with \"enabled\" attribute.\n ;; See movqi insns.\n@@ -5102,9 +5110,9 @@ label:\n ;; (made from (set (subreg:SI (reg:QI ###) 0) ) into T.\n (define_insn \"movsi_i\"\n   [(set (match_operand:SI 0 \"general_movdst_operand\"\n-\t    \"=r,r,r,t,r,r,r,r,m,<,<,x,l,x,l,r\")\n+\t    \"=r,r,r,r,r,r,m,<,<,x,l,x,l,r\")\n \t(match_operand:SI 1 \"general_movsrc_operand\"\n-\t \"Q,r,I08,r,mr,x,l,t,r,x,l,r,r,>,>,i\"))]\n+\t \"Q,r,I08,mr,x,l,r,x,l,r,r,>,>,i\"))]\n   \"TARGET_SH1\n    && ! TARGET_SH2E\n    && ! TARGET_SH2A\n@@ -5114,11 +5122,9 @@ label:\n \tmov.l\t%1,%0\n \tmov\t%1,%0\n \tmov\t%1,%0\n-\tcmp/pl\t%1\n \tmov.l\t%1,%0\n \tsts\t%1,%0\n \tsts\t%1,%0\n-\tmovt\t%0\n \tmov.l\t%1,%0\n \tsts.l\t%1,%0\n \tsts.l\t%1,%0\n@@ -5127,8 +5133,8 @@ label:\n \tlds.l\t%1,%0\n \tlds.l\t%1,%0\n \tfake\t%1,%0\"\n-  [(set_attr \"type\" \"pcload_si,move,movi8,mt_group,load_si,mac_gp,prget,arith,store,mac_mem,pstore,gp_mac,prset,mem_mac,pload,pcload_si\")\n-   (set_attr \"length\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*\")])\n+  [(set_attr \"type\" \"pcload_si,move,movi8,load_si,mac_gp,prget,store,mac_mem,pstore,gp_mac,prset,mem_mac,pload,pcload_si\")\n+   (set_attr \"length\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*\")])\n \n ;; t/r must come after r/r, lest reload will try to reload stuff like\n ;; (subreg:SI (reg:SF FR14_REG) 0) into T (compiling stdlib/strtod.c -m3e -O2)\n@@ -5138,9 +5144,9 @@ label:\n ;; TARGET_FMOVD is in effect, and mode switching is done before reload.\n (define_insn \"movsi_ie\"\n   [(set (match_operand:SI 0 \"general_movdst_operand\"\n-\t    \"=r,r,r,r,r,t,r,r,r,r,m,<,<,x,l,x,l,y,<,r,y,r,*f,y,*f,y\")\n+\t    \"=r,r,r,r,r,r,r,r,m,<,<,x,l,x,l,y,<,r,y,r,*f,y,*f,y\")\n \t(match_operand:SI 1 \"general_movsrc_operand\"\n-\t \"Q,r,I08,I20,I28,r,mr,x,l,t,r,x,l,r,r,>,>,>,y,i,r,y,y,*f,*f,y\"))]\n+\t \"Q,r,I08,I20,I28,mr,x,l,r,x,l,r,r,>,>,>,y,i,r,y,y,*f,*f,y\"))]\n   \"(TARGET_SH2E || TARGET_SH2A)\n    && (register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n@@ -5150,11 +5156,9 @@ label:\n \tmov\t%1,%0\n \tmovi20\t%1,%0\n \tmovi20s\t%1,%0\n-\tcmp/pl\t%1\n \tmov.l\t%1,%0\n \tsts\t%1,%0\n \tsts\t%1,%0\n-\tmovt\t%0\n \tmov.l\t%1,%0\n \tsts.l\t%1,%0\n \tsts.l\t%1,%0\n@@ -5171,21 +5175,19 @@ label:\n \tflds\t%1,fpul\n \tfmov\t%1,%0\n \t! move optimized away\"\n-  [(set_attr \"type\" \"pcload_si,move,movi8,move,move,*,load_si,mac_gp,prget,arith,store,mac_mem,pstore,gp_mac,prset,mem_mac,pload,load,fstore,pcload_si,gp_fpul,fpul_gp,fmove,fmove,fmove,nil\")\n-   (set_attr \"late_fp_use\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,yes,*,*,yes,*,*,*,*\")\n+  [(set_attr \"type\" \"pcload_si,move,movi8,move,move,load_si,mac_gp,prget,store,mac_mem,pstore,gp_mac,prset,mem_mac,pload,load,fstore,pcload_si,gp_fpul,fpul_gp,fmove,fmove,fmove,nil\")\n+   (set_attr \"late_fp_use\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,yes,*,*,yes,*,*,*,*\")\n    (set_attr_alternative \"length\"\n      [(const_int 2)\n       (const_int 2)\n       (const_int 2)\n       (const_int 4)\n       (const_int 4)\n-      (const_int 2)\n       (if_then_else\n \t(match_test \"TARGET_SH2A\")\n \t(const_int 4) (const_int 2))\n       (const_int 2)\n       (const_int 2)\n-      (const_int 2)\n       (if_then_else\n \t(match_test \"TARGET_SH2A\")\n \t(const_int 4) (const_int 2))\n@@ -5206,8 +5208,8 @@ label:\n       (const_int 0)])])\n \n (define_insn \"movsi_i_lowpart\"\n-  [(set (strict_low_part (match_operand:SI 0 \"general_movdst_operand\" \"+r,r,r,r,r,r,r,m,r\"))\n-\t(match_operand:SI 1 \"general_movsrc_operand\" \"Q,r,I08,mr,x,l,t,r,i\"))]\n+  [(set (strict_low_part (match_operand:SI 0 \"general_movdst_operand\" \"+r,r,r,r,r,r,m,r\"))\n+\t(match_operand:SI 1 \"general_movsrc_operand\" \"Q,r,I08,mr,x,l,r,i\"))]\n    \"TARGET_SH1\n     && (register_operand (operands[0], SImode)\n         || register_operand (operands[1], SImode))\"\n@@ -5218,10 +5220,9 @@ label:\n \tmov.l\t%1,%0\n \tsts\t%1,%0\n \tsts\t%1,%0\n-\tmovt\t%0\n \tmov.l\t%1,%0\n \tfake\t%1,%0\"\n-  [(set_attr \"type\" \"pcload,move,arith,load,mac_gp,prget,arith,store,pcload\")])\n+  [(set_attr \"type\" \"pcload,move,arith,load,mac_gp,prget,store,pcload\")])\n \n (define_insn_and_split \"load_ra\"\n   [(set (match_operand:SI 0 \"general_movdst_operand\" \"\")\n@@ -5488,22 +5489,18 @@ label:\n ;; try other insns and not stick to movqi_reg_reg.\n ;; The same applies to the movhi variants.\n (define_insn \"*movqi_reg_reg\"\n-  [(set (match_operand:QI 0 \"arith_reg_dest\"   \"=r,r\")\n-\t(match_operand:QI 1 \"register_operand\" \"r,t\"))]\n+  [(set (match_operand:QI 0 \"arith_reg_dest\" \"=r\")\n+\t(match_operand:QI 1 \"register_operand\" \"r\"))]\n   \"TARGET_SH1\"\n-  \"@\n-\tmov\t%1,%0\n-\tmovt\t%0\"\n-  [(set_attr \"type\" \"move,arith\")])\n+  \"mov\t%1,%0\"\n+  [(set_attr \"type\" \"move\")])\n \n (define_insn \"*movhi_reg_reg\"\n-  [(set (match_operand:HI 0 \"arith_reg_dest\"   \"=r,r\")\n-\t(match_operand:HI 1 \"register_operand\" \"r,t\"))]\n+  [(set (match_operand:HI 0 \"arith_reg_dest\" \"=r\")\n+\t(match_operand:HI 1 \"register_operand\" \"r\"))]\n   \"TARGET_SH1\"\n-  \"@\n-\tmov\t%1,%0\n-\tmovt\t%0\"\n-  [(set_attr \"type\" \"move,arith\")])\n+  \"mov\t%1,%0\"\n+  [(set_attr \"type\" \"move\")])\n \n ;; FIXME: The non-SH2A and SH2A variants should be combined by adding\n ;; \"enabled\" attribute as it is done in other targets."}]}