{"sha": "f281956edeed9c6be03867bf3875881970bc115c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI4MTk1NmVkZWVkOWM2YmUwMzg2N2JmMzg3NTg4MTk3MGJjMTE1Yw==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2017-07-11T14:53:06Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2017-07-11T14:53:06Z"}, "message": "rs6000-c.c: Add support for builtins vector unsigned int vec_parity_lsbb (vector signed int)...\n\ngcc/ChangeLog:\n\n2017-07-11  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/rs6000-c.c: Add support for builtins\n\tvector unsigned int vec_parity_lsbb (vector signed int);\n\tvector unsigned int vec_parity_lsbb (vector unsigned int);\n\tvector unsigned __int128 vec_parity_lsbb (vector signed __int128);\n\tvector unsigned __int128 vec_parity_lsbb (vector unsigned __int128);\n\tvector unsigned long long vec_parity_lsbb (vector signed long long);\n\tvector unsigned long long vec_parity_lsbb (vector unsigned long long);\n\t* config/rs6000/rs6000-builtin.def (VPARITY_LSBB): Add BU_P9V_OVERLOAD1.\n\t* config/rs6000/altivec.h (vec_parity_lsbb): Add define.\n\t* doc/extend.texi: Update the built-in documentation file for the\n\tnew built-in functions.\n\ngcc/testsuite/ChangeLog:\n\n2017-07-11  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/builtins-2-p9-runnable.c: Add new file with\n\ttest cases for the builtins.\n\nFrom-SVN: r250135", "tree": {"sha": "4997a077804eac7a70d54fcedc669e4520eb72bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4997a077804eac7a70d54fcedc669e4520eb72bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f281956edeed9c6be03867bf3875881970bc115c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f281956edeed9c6be03867bf3875881970bc115c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f281956edeed9c6be03867bf3875881970bc115c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f281956edeed9c6be03867bf3875881970bc115c/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3fd10f97f1c2a0b832596c3b2b5c8bb22d81bf90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd10f97f1c2a0b832596c3b2b5c8bb22d81bf90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd10f97f1c2a0b832596c3b2b5c8bb22d81bf90"}], "stats": {"total": 113, "additions": 113, "deletions": 0}, "files": [{"sha": "2e88291add3cc2ade3ec74328b4d6c9cfa33ee03", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f281956edeed9c6be03867bf3875881970bc115c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f281956edeed9c6be03867bf3875881970bc115c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f281956edeed9c6be03867bf3875881970bc115c", "patch": "@@ -1,3 +1,17 @@\n+2017-07-11  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c: Add support for builtins\n+\tvector unsigned int vec_parity_lsbb (vector signed int);\n+\tvector unsigned int vec_parity_lsbb (vector unsigned int);\n+\tvector unsigned __int128 vec_parity_lsbb (vector signed __int128);\n+\tvector unsigned __int128 vec_parity_lsbb (vector unsigned __int128);\n+\tvector unsigned long long vec_parity_lsbb (vector signed long long);\n+\tvector unsigned long long vec_parity_lsbb (vector unsigned long long);\n+\t* config/rs6000/rs6000-builtin.def (VPARITY_LSBB): Add BU_P9V_OVERLOAD1.\n+\t* config/rs6000/altivec.h (vec_parity_lsbb): Add define.\n+\t* doc/extend.texi: Update the built-in documentation file for the\n+\tnew built-in functions.\n+\n 2017-07-11  David Malcolm  <dmalcolm@redhat.com>\n \n \t* diagnostic-show-locus.c: Include \"gcc-rich-location.h\"."}, {"sha": "71cdca523dff2c9525468fe7ba4840951b8d48f4", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f281956edeed9c6be03867bf3875881970bc115c/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f281956edeed9c6be03867bf3875881970bc115c/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=f281956edeed9c6be03867bf3875881970bc115c", "patch": "@@ -419,6 +419,7 @@\n #ifdef __POWER9_VECTOR__\n /* Vector additions added in ISA 3.0.  */\n #define vec_pack_to_short_fp32 __builtin_vec_convert_4f32_8i16\n+#define vec_parity_lsbb __builtin_vec_vparity_lsbb\n #define vec_vctz __builtin_vec_vctz\n #define vec_cnttz __builtin_vec_vctz\n #define vec_vctzb __builtin_vec_vctzb"}, {"sha": "e098e1c1d7ae4b71d7bb0604034a15678c560e95", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f281956edeed9c6be03867bf3875881970bc115c/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f281956edeed9c6be03867bf3875881970bc115c/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=f281956edeed9c6be03867bf3875881970bc115c", "patch": "@@ -2287,6 +2287,7 @@ BU_P9V_OVERLOAD_1 (VPRTYB,\t\"vprtyb\")\n BU_P9V_OVERLOAD_1 (VPRTYBD,\t\"vprtybd\")\n BU_P9V_OVERLOAD_1 (VPRTYBQ,\t\"vprtybq\")\n BU_P9V_OVERLOAD_1 (VPRTYBW,\t\"vprtybw\")\n+BU_P9V_OVERLOAD_1 (VPARITY_LSBB,\t\"vparity_lsbb\")\n \n /* 2 argument functions added in ISA 3.0 (power9).  */\n BU_P9_2 (CMPRB,\t\"byte_in_range\",\tCONST,\tcmprb)"}, {"sha": "abe447982953a94fe70b4a77e6d999313407c5b1", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f281956edeed9c6be03867bf3875881970bc115c/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f281956edeed9c6be03867bf3875881970bc115c/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=f281956edeed9c6be03867bf3875881970bc115c", "patch": "@@ -5419,6 +5419,19 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P9V_BUILTIN_VEC_VPRTYBQ, P9V_BUILTIN_VPRTYBQ,\n     RS6000_BTI_UINTTI, RS6000_BTI_UINTTI, 0, 0 },\n \n+  { P9V_BUILTIN_VEC_VPARITY_LSBB, P9V_BUILTIN_VPRTYBW,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_V4SI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VPARITY_LSBB, P9V_BUILTIN_VPRTYBW,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VPARITY_LSBB, P9V_BUILTIN_VPRTYBD,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_V2DI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VPARITY_LSBB, P9V_BUILTIN_VPRTYBD,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VPARITY_LSBB, P9V_BUILTIN_VPRTYBQ,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_V1TI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VPARITY_LSBB, P9V_BUILTIN_VPRTYBQ,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI, 0, 0 },\n+\n   { P9_BUILTIN_CMPRB, P9_BUILTIN_SCALAR_CMPRB,\n     RS6000_BTI_INTSI, RS6000_BTI_UINTQI, RS6000_BTI_UINTSI, 0 },\n   { P9_BUILTIN_CMPRB2, P9_BUILTIN_SCALAR_CMPRB2,"}, {"sha": "0d22d673c09fd0050f38cb4d2001f87a46c31946", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f281956edeed9c6be03867bf3875881970bc115c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f281956edeed9c6be03867bf3875881970bc115c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=f281956edeed9c6be03867bf3875881970bc115c", "patch": "@@ -18288,6 +18288,13 @@ vector unsigned char vec_insert4b (vector unsigned int, vector unsigned char,\n vector signed char vec_insert4b (long long, vector signed char, const int);\n vector unsigned char vec_insert4b (long long, vector unsigned char, const int);\n \n+vector unsigned int vec_parity_lsbb (vector signed int);\n+vector unsigned int vec_parity_lsbb (vector unsigned int);\n+vector unsigned __int128 vec_parity_lsbb (vector signed __int128);\n+vector unsigned __int128 vec_parity_lsbb (vector unsigned __int128);\n+vector unsigned long long vec_parity_lsbb (vector signed long long);\n+vector unsigned long long vec_parity_lsbb (vector unsigned long long);\n+\n vector int vec_vprtyb (vector int);\n vector unsigned int vec_vprtyb (vector unsigned int);\n vector long long vec_vprtyb (vector long long);"}, {"sha": "bf7c03e4695548a05cf19293160b620b0a03eb4b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f281956edeed9c6be03867bf3875881970bc115c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f281956edeed9c6be03867bf3875881970bc115c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f281956edeed9c6be03867bf3875881970bc115c", "patch": "@@ -1,3 +1,8 @@\n+2017-07-11  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-2-p9-runnable.c: Add new file with\n+\ttest cases for the builtins.\n+\n 2017-07-11  Yury Gribov  <tetra2005@gmail.com>\n \n \t* lib/profopt.exp: Print relative names in UNSUPPORTED"}, {"sha": "fa2bbc1eeb16eeb3508c7fe679e73be43b255b24", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-2-p9-runnable.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f281956edeed9c6be03867bf3875881970bc115c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-2-p9-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f281956edeed9c6be03867bf3875881970bc115c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-2-p9-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-2-p9-runnable.c?ref=f281956edeed9c6be03867bf3875881970bc115c", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run { target { powerpc64*-*-* && { lp64 && p9vector_hw } } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9 -O2 -mupper-regs-di\" } */\n+\n+#include <altivec.h> // vector\n+\n+void abort (void);\n+\n+int main() {\n+  int i;\n+  vector int vsia;\n+  vector unsigned int vsir, vsiexpt;\n+  vector unsigned int vuia, vuir, vuiexpt;\n+  vector signed long long vslla;\n+  vector unsigned long long vsllr, vsllexpt;\n+  vector unsigned long long vulla, vullr, vullexpt;\n+  vector __int128_t  vs128a;\n+  vector __uint128_t vs128r, vs128expt;\n+  vector __uint128_t vu128a, vu128r, vu128expt;  \n+\n+  /* Returns a vector with each element containing the parity of the low-order\n+     bit of each of the bytes in that element.  Note results are always\n+     returned in an unsinged type, per the ABI spec.  */\n+  vsia = (vector int) {0x10101010, 0x10101011, 0x10101111, 0x10111111};\n+  vsiexpt = (vector unsigned int){0x0, 0x1, 0x0, 0x1};\n+\n+  vuia = (vector unsigned int) {0x000010000, 0x00010001,\n+\t\t\t\t0x10100000, 0x000010101};\n+  vuiexpt = (vector unsigned int){0x1, 0x0, 0x0, 0x1};\n+\n+  vslla = (vector long long) {0x0000000000010000,  0x0001000100010000};\n+  vsllexpt = (vector unsigned long long){0x1, 0x1};\n+\n+  vulla = (vector unsigned long long)   {0x0000000000000001,\n+\t\t\t\t\t 0x0001000000000001};\n+  vullexpt = (vector unsigned long long){0x1, 0x0};\n+\n+  vs128a = (vector __int128_t) {0x0000000000001};\n+  vs128expt = (vector __uint128_t) {0x1};\n+  vu128a = (vector __uint128_t) {0x1000000000001};\n+  vu128expt = (vector __uint128_t) {0x0};\n+\n+  vsir = vec_parity_lsbb(vsia);\n+  vuir = vec_parity_lsbb(vuia);\n+  vsllr = vec_parity_lsbb(vslla);\n+  vullr = vec_parity_lsbb(vulla);\n+  vs128r = vec_parity_lsbb(vs128a);\n+  vu128r = vec_parity_lsbb(vu128a);\n+\n+  for(i = 0; i< 4; i++) {\n+    if (vsir[i] != vsiexpt[i])\n+      abort();\n+\n+    if (vuir[i] != vuiexpt[i])\n+      abort();\n+  }\n+\n+  for(i = 0; i< 2; i++) {\n+    if (vsllr[i] != vsllexpt[i])\n+      abort();\n+\n+    if (vullr[i] != vullexpt[i])\n+      abort();\n+  }\n+\n+  if (vs128r[0] != vs128expt[0])\n+    abort();\n+\n+  if (vu128r[0] != vu128expt[0])\n+    abort();\n+}"}]}