{"sha": "948888e1e174192e8c8921137038c491f22c1eea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ4ODg4ZTFlMTc0MTkyZThjODkyMTEzNzAzOGM0OTFmMjJjMWVlYQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-11-26T12:45:21Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-11-26T12:45:21Z"}, "message": "2003-11-26  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/Socket.java\n\t(implCreated): Dont set default value explicitely, added\n\tdocumentation.\n\t(inputShutdown): Likewise.\n\t(outputShutdown): Likewise.\n\t(bound): New private member variable.\n\t(bind): Set bound to true.\n\t(close): Set bound to false.\n\t(isBound): Return bound.\n\t* java/net/ServerSocket.java\n\t(bound): New private member variable.\n\t(bind): Set bound to true.\n\t(close): Set bound to false.\n\t(isBound): Return bound.\n\nFrom-SVN: r73949", "tree": {"sha": "ff79d9b5ed0094b0b236d0b15c5fe6b883f980e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff79d9b5ed0094b0b236d0b15c5fe6b883f980e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/948888e1e174192e8c8921137038c491f22c1eea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/948888e1e174192e8c8921137038c491f22c1eea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/948888e1e174192e8c8921137038c491f22c1eea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/948888e1e174192e8c8921137038c491f22c1eea/comments", "author": null, "committer": null, "parents": [{"sha": "7fb1d711938b8cc070400f61979afe1905cbedd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb1d711938b8cc070400f61979afe1905cbedd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fb1d711938b8cc070400f61979afe1905cbedd9"}], "stats": {"total": 60, "additions": 46, "deletions": 14}, "files": [{"sha": "c0267acb1a3ae2419cf5d7f352cd06ebcdf64475", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948888e1e174192e8c8921137038c491f22c1eea/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948888e1e174192e8c8921137038c491f22c1eea/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=948888e1e174192e8c8921137038c491f22c1eea", "patch": "@@ -1,3 +1,20 @@\n+2003-11-26  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/Socket.java\n+\t(implCreated): Dont set default value explicitely, added\n+\tdocumentation.\n+\t(inputShutdown): Likewise.\n+\t(outputShutdown): Likewise.\n+\t(bound): New private member variable.\n+\t(bind): Set bound to true.\n+\t(close): Set bound to false.\n+\t(isBound): Return bound.\n+\t* java/net/ServerSocket.java\n+\t(bound): New private member variable.\n+\t(bind): Set bound to true.\n+\t(close): Set bound to false.\n+\t(isBound): Return bound.\n+\n 2003-11-26  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/URL.java"}, {"sha": "7af1a3301c0dec023ff3a4bc264efb325b32a2f9", "filename": "libjava/java/net/ServerSocket.java", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948888e1e174192e8c8921137038c491f22c1eea/libjava%2Fjava%2Fnet%2FServerSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948888e1e174192e8c8921137038c491f22c1eea/libjava%2Fjava%2Fnet%2FServerSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FServerSocket.java?ref=948888e1e174192e8c8921137038c491f22c1eea", "patch": "@@ -73,6 +73,11 @@\n    */\n   private SocketImpl impl;\n \n+  /**\n+   * True if socket is bound.\n+   */\n+  private boolean bound;\n+  \n   /*\n    * This constructor is only used by java.nio.\n    */\n@@ -225,6 +230,7 @@ public void bind (SocketAddress endpoint, int backlog) throws IOException\n       {\n \timpl.bind (tmp.getAddress (), tmp.getPort ());\n \timpl.listen(backlog);\n+\tbound = true;\n       }\n     catch (IOException exception)\n       {\n@@ -355,6 +361,7 @@ public void close () throws IOException\n \t  getChannel().close();\n     \n \timpl = null;\n+\tbound = false;\n       }\n   }\n \n@@ -379,16 +386,7 @@ public ServerSocketChannel getChannel()\n    */\n   public boolean isBound()\n   {\n-    try\n-      {\n-        Object bindaddr = impl.getOption (SocketOptions.SO_BINDADDR);\n-      }\n-    catch (SocketException e)\n-      {\n-        return false;\n-      }\n-    \n-    return true;\n+    return bound;\n   }\n \n   /**"}, {"sha": "27fa69131b5e9d163bc7f5f13612c1d0fc2b8c4a", "filename": "libjava/java/net/Socket.java", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948888e1e174192e8c8921137038c491f22c1eea/libjava%2Fjava%2Fnet%2FSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948888e1e174192e8c8921137038c491f22c1eea/libjava%2Fjava%2Fnet%2FSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocket.java?ref=948888e1e174192e8c8921137038c491f22c1eea", "patch": "@@ -79,10 +79,25 @@\n    */\n   private SocketImpl impl;\n \n-  private boolean implCreated = false;\n+  /**\n+   * True if socket implementation was created by calling their create() method.\n+   */\n+  private boolean implCreated;\n+\n+  /**\n+   * True if the socket is bound.\n+   */\n+  private boolean bound;\n \n-  private boolean inputShutdown = false;\n-  private boolean outputShutdown = false;\n+  /**\n+   * True if input is shutdown.\n+   */\n+  private boolean inputShutdown;\n+\n+  /**\n+   * True if output is shutdown.\n+   */\n+  private boolean outputShutdown;\n \n   /**\n    * Initializes a new instance of <code>Socket</code> object without \n@@ -342,6 +357,7 @@ public void bind (SocketAddress bindpoint) throws IOException\n     try\n       {\n         getImpl().bind (tmp.getAddress(), tmp.getPort());\n+\tbound = true;\n       }\n     catch (IOException exception)\n       {\n@@ -995,6 +1011,7 @@ public synchronized void close ()  throws IOException\n       getChannel().close();\n     \n     impl = null;\n+    bound = false;\n   }\n \n   /**\n@@ -1206,7 +1223,7 @@ public boolean isConnected ()\n    */\n   public boolean isBound ()\n   {\n-    return getLocalAddress () != null;\n+    return bound;\n   }\n \n   /**"}]}