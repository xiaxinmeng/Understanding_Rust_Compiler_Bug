{"sha": "53caa4723d8de73fe21e63ba264082f3071b2887", "node_id": "C_kwDOANBUbNoAKDUzY2FhNDcyM2Q4ZGU3M2ZlMjFlNjNiYTI2NDA4MmYzMDcxYjI4ODc", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-11-24T10:45:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-12-01T18:24:36Z"}, "message": "c++: constexpr, fold, weak redecl, fp/0 [PR103310]\n\nFor PR61825, honza changed tree_single_nonzero_warnv_p to prevent a later\ndeclaration from marking a function as weak after we've determined that it\nwasn't weak before.  But we shouldn't do that for speculative folding; we\nshould only do it when we actually need a constant value.  In C++, such a\ncontext is called \"manifestly constant-evaluated\".  In fold, this seems to\ncorrespond to the folding_initializer flag, since in C this situation only\noccurs in static initializers.\n\nThis change makes nonzero-1.c well-formed; I've added a nonzero-1a.c to\nverify that we delete the null check eventually if there is no weak\nredeclaration.\n\nThe varasm.c change is so that if we do get the weak redeclaration error, we\nget it at the position of the weak declaration rather than the previous\ndeclaration.\n\nUsing the FOLD_INIT paths also affects floating point arithmetic: notably,\nthis makes floating point division by zero in a manifestly\nconstant-evaluated context constant, as in a C static initializer.  I've had\nsome success convincing CWG that this is the right direction; C++ should\nfollow C's floating point semantics more than we have been doing, and Joseph\nsays that the C policy is that Annex F overrides other parts of the standard\nthat say that some operations are undefined.  But since we're in stage 3,\nI'm only making this change with the new flag -fconstexpr-fp-except.  It may\nturn on by default in a future release.\n\nI think this distinction is only relevant for binary operations; arithmetic\nfor the floating point case, comparison for possibly non-zero addresses.\n\n\tPR c++/103310\n\ngcc/ChangeLog:\n\n\t* fold-const.c (maybe_nonzero_address): Use get_create or get\n\tdepending on folding_initializer.\n\t(fold_binary_initializer_loc): New.\n\t* fold-const.h (fold_binary_initializer_loc): Declare.\n\t* varasm.c (mark_weak): Don't use the decl location.\n\t* doc/invoke.texi: Document -fconstexpr-fp-except.\n\ngcc/c-family/ChangeLog:\n\n\t* c.opt: Add -fconstexpr-fp-except.\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.c (cxx_eval_binary_expression): Use\n\tfold_binary_initializer_loc if manifestly cxeval.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/constexpr-fp-except1.C: New test.\n\t* g++.dg/cpp1z/constexpr-if36.C: New test.\n\t* gcc.dg/tree-ssa/nonzero-1.c: Now well-formed.\n\t* gcc.dg/tree-ssa/nonzero-1a.c: New test.", "tree": {"sha": "594eeeda07a0ebd5559f79ed4c469c544cbf3637", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/594eeeda07a0ebd5559f79ed4c469c544cbf3637"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53caa4723d8de73fe21e63ba264082f3071b2887", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53caa4723d8de73fe21e63ba264082f3071b2887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53caa4723d8de73fe21e63ba264082f3071b2887", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53caa4723d8de73fe21e63ba264082f3071b2887/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d683a1b3e89007211a7c800bb61647d8ac42cb6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d683a1b3e89007211a7c800bb61647d8ac42cb6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d683a1b3e89007211a7c800bb61647d8ac42cb6b"}], "stats": {"total": 95, "additions": 88, "deletions": 7}, "files": [{"sha": "915204e1134d58fa171485c3ff09cb803d2e3436", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=53caa4723d8de73fe21e63ba264082f3071b2887", "patch": "@@ -1615,6 +1615,10 @@ fconstexpr-cache-depth=\n C++ ObjC++ Joined RejectNegative UInteger Var(constexpr_cache_depth) Init(8)\n -fconstexpr-cache-depth=<number>\tSpecify maximum constexpr recursion cache depth.\n \n+fconstexpr-fp-except\n+C++ ObjC++ Var(flag_constexpr_fp_except) Init(0)\n+Allow IEC559 floating point exceptions in constant expressions.\n+\n fconstexpr-loop-limit=\n C++ ObjC++ Joined RejectNegative UInteger Var(constexpr_loop_limit) Init(262144)\n -fconstexpr-loop-limit=<number>\tSpecify maximum constexpr loop iteration count."}, {"sha": "b4b8a96c6af8eee205dca7e75ed21e9b0fa893e0", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=53caa4723d8de73fe21e63ba264082f3071b2887", "patch": "@@ -3366,7 +3366,14 @@ cxx_eval_binary_expression (const constexpr_ctx *ctx, tree t,\n     }\n \n   if (r == NULL_TREE)\n-    r = fold_binary_loc (loc, code, type, lhs, rhs);\n+    {\n+      if (ctx->manifestly_const_eval\n+\t  && (flag_constexpr_fp_except\n+\t      || TREE_CODE (type) != REAL_TYPE))\n+\tr = fold_binary_initializer_loc (loc, code, type, lhs, rhs);\n+      else\n+\tr = fold_binary_loc (loc, code, type, lhs, rhs);\n+    }\n \n   if (r == NULL_TREE\n       && (code == LSHIFT_EXPR || code == RSHIFT_EXPR)"}, {"sha": "d6858d834f9d916e0beaf462b755ca6e85d41461", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=53caa4723d8de73fe21e63ba264082f3071b2887", "patch": "@@ -3035,6 +3035,20 @@ users are likely to want to adjust it, but if your code does heavy\n constexpr calculations you might want to experiment to find which\n value works best for you.\n \n+@item -fconstexpr-fp-except\n+@opindex fconstexpr-fp-except\n+Annex F of the C standard specifies that IEC559 floating point\n+exceptions encountered at compile time should not stop compilation.\n+C++ compilers have historically not followed this guidance, instead\n+treating floating point division by zero as non-constant even though\n+it has a well defined value.  This flag tells the compiler to give\n+Annex F priority over other rules saying that a particular operation\n+is undefined.\n+\n+@smallexample\n+constexpr float inf = 1./0.; // OK with -fconstexpr-fp-except\n+@end smallexample\n+\n @item -fconstexpr-loop-limit=@var{n}\n @opindex fconstexpr-loop-limit\n Set the maximum number of iterations for a loop in C++14 constexpr functions"}, {"sha": "0b9a42f764ac4b02c7acd1eee5f2a930024f5150", "filename": "gcc/fold-const.c", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=53caa4723d8de73fe21e63ba264082f3071b2887", "patch": "@@ -85,8 +85,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"asan.h\"\n #include \"gimple-range.h\"\n \n-/* Nonzero if we are folding constants inside an initializer; zero\n-   otherwise.  */\n+/* Nonzero if we are folding constants inside an initializer or a C++\n+   manifestly-constant-evaluated context; zero otherwise.  */\n int folding_initializer = 0;\n \n /* The following constants represent a bit based encoding of GCC's\n@@ -9924,8 +9924,15 @@ pointer_may_wrap_p (tree base, tree offset, poly_int64 bitpos)\n static int\n maybe_nonzero_address (tree decl)\n {\n+  /* Normally, don't do anything for variables and functions before symtab is\n+     built; it is quite possible that DECL will be declared weak later.\n+     But if folding_initializer, we need a constant answer now, so create\n+     the symtab entry and prevent later weak declaration.  */\n   if (DECL_P (decl) && decl_in_symtab_p (decl))\n-    if (struct symtab_node *symbol = symtab_node::get_create (decl))\n+    if (struct symtab_node *symbol\n+\t= (folding_initializer\n+\t   ? symtab_node::get_create (decl)\n+\t   : symtab_node::get (decl)))\n       return symbol->nonzero_address ();\n \n   /* Function local objects are never NULL.  */\n@@ -13991,6 +13998,19 @@ fold_build_call_array_initializer_loc (location_t loc, tree type, tree fn,\n   return result;\n }\n \n+tree\n+fold_binary_initializer_loc (location_t loc, tree_code code, tree type,\n+\t\t\t     tree lhs, tree rhs)\n+{\n+  tree result;\n+  START_FOLD_INIT;\n+\n+  result = fold_binary_loc (loc, code, type, lhs, rhs);\n+\n+  END_FOLD_INIT;\n+  return result;\n+}\n+\n #undef START_FOLD_INIT\n #undef END_FOLD_INIT\n "}, {"sha": "01bfe5df9b5fd6d6d4efff93c9061a7814573b74", "filename": "gcc/fold-const.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Ffold-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Ffold-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.h?ref=53caa4723d8de73fe21e63ba264082f3071b2887", "patch": "@@ -77,6 +77,7 @@ extern tree fold_build_call_array_loc (location_t, tree, tree, int, tree *);\n #define fold_build_call_array_initializer(T1,T2,N,T4)\\\n    fold_build_call_array_initializer_loc (UNKNOWN_LOCATION, T1, T2, N, T4)\n extern tree fold_build_call_array_initializer_loc (location_t, tree, tree, int, tree *);\n+extern tree fold_binary_initializer_loc (location_t, tree_code, tree, tree, tree);\n extern tree get_array_ctor_element_at_index (tree, offset_int,\n \t\t\t\t\t     unsigned * = NULL);\n extern bool fold_convertible_p (const_tree, const_tree);"}, {"sha": "3887a5ba7437ddeda0b305f2e8ed8de02225ade5", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-fp-except1.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-fp-except1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-fp-except1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-fp-except1.C?ref=53caa4723d8de73fe21e63ba264082f3071b2887", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options -fconstexpr-fp-except }\n+\n+constexpr double inf = 1./0.;"}, {"sha": "4a1b134cc1939701d7871da92ccf0860d590a7b2", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if36.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if36.C?ref=53caa4723d8de73fe21e63ba264082f3071b2887", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/103310\n+// Test that only manifestly-constant-evaluated comparisons lock a symbol's\n+// weakness.\n+\n+// { dg-do compile { target c++17 } }\n+\n+extern void weakfn1 (void);\n+extern void weakfn2 (void);\n+\n+void call_weakfn (void)\n+{\n+  if (weakfn1)\n+    weakfn1 ();\n+  if constexpr (weakfn2)\n+    weakfn2 ();\n+}\n+\n+extern void weakfn1 (void)  __attribute__((weak));\n+extern void weakfn2 (void)  __attribute__((weak)); // { dg-error \"declared weak after being used\" }"}, {"sha": "aa21b71c730e1b3bfbdffc8da7871b5b600ab9ef", "filename": "gcc/testsuite/gcc.dg/tree-ssa/nonzero-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fnonzero-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fnonzero-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fnonzero-1.c?ref=53caa4723d8de73fe21e63ba264082f3071b2887", "patch": "@@ -1,12 +1,13 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fdelete-null-pointer-checks -fdump-tree-optimized\" } */\n /* { dg-require-weak \"\" } */\n \n /* { dg-skip-if \"\" keeps_null_pointer_checks } */\n-extern int a; /* { dg-error \"declared weak after being used\" } */\n+extern int a;\n int\n t()\n {\n+  /* { dg-final { scan-tree-dump \"&a != 0\" \"optimized\" } } */\n   return &a!=0;\n }\n extern int a __attribute__ ((weak));"}, {"sha": "3d1eb97f151b4af8d514928bb09022ea2ffc4488", "filename": "gcc/testsuite/gcc.dg/tree-ssa/nonzero-1a.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fnonzero-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fnonzero-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fnonzero-1a.c?ref=53caa4723d8de73fe21e63ba264082f3071b2887", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdelete-null-pointer-checks -fdump-tree-optimized\" } */\n+\n+/* { dg-skip-if \"\" keeps_null_pointer_checks } */\n+extern int a;\n+int\n+t()\n+{\n+  /* { dg-final { scan-tree-dump-not \"&a != 0\" \"optimized\" } } */\n+  return &a!=0;\n+}"}, {"sha": "9315e2c6936adf39c3014ba11e86db584ec93548", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53caa4723d8de73fe21e63ba264082f3071b2887/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=53caa4723d8de73fe21e63ba264082f3071b2887", "patch": "@@ -5869,7 +5869,7 @@ mark_weak (tree decl)\n \n   struct symtab_node *n = symtab_node::get (decl);\n   if (n && n->refuse_visibility_changes)\n-    error (\"%+qD declared weak after being used\", decl);\n+    error (\"%qD declared weak after being used\", decl);\n   DECL_WEAK (decl) = 1;\n \n   if (DECL_RTL_SET_P (decl)"}]}