{"sha": "37d5c6baac1e1222567a750163ba102d0cadab0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdkNWM2YmFhYzFlMTIyMjU2N2E3NTAxNjNiYTEwMmQwY2FkYWIwYg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-02-05T01:50:18Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-02-05T01:50:18Z"}, "message": "unique_ptr.h: Remove private __this_type typedef.\n\n2009-02-04  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/unique_ptr.h: Remove private __this_type typedef.\n\t* include/bits/stl_vector.h: Remove private vector_type typedef.\n\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n\tFix line numbers.\n\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc: Same.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Same.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Same.\n\t* testsuite/20_util/unique_ptr/modifiers/reset_neg.cc: Same.\n\t* testsuite/20_util/unique_ptr/assign/assign.cc: Same.\n\nFrom-SVN: r143949", "tree": {"sha": "38fff137831ea55a8f4c99a2e684c8c66dc0f997", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38fff137831ea55a8f4c99a2e684c8c66dc0f997"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37d5c6baac1e1222567a750163ba102d0cadab0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d5c6baac1e1222567a750163ba102d0cadab0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37d5c6baac1e1222567a750163ba102d0cadab0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d5c6baac1e1222567a750163ba102d0cadab0b/comments", "author": null, "committer": null, "parents": [{"sha": "5006381cc14df7bfb634b249f50b1bf30f39f841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5006381cc14df7bfb634b249f50b1bf30f39f841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5006381cc14df7bfb634b249f50b1bf30f39f841"}], "stats": {"total": 107, "additions": 59, "deletions": 48}, "files": [{"sha": "b1340c4ecb4e5444fea92c89f9dd078679ed0a64", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5c6baac1e1222567a750163ba102d0cadab0b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5c6baac1e1222567a750163ba102d0cadab0b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=37d5c6baac1e1222567a750163ba102d0cadab0b", "patch": "@@ -1,6 +1,20 @@\n+2009-02-04  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/unique_ptr.h: Remove private __this_type typedef.\n+\t* include/bits/stl_vector.h: Remove private vector_type typedef.\n+\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n+\tFix line numbers.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc: Same.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Same.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Same.\n+\t* testsuite/20_util/unique_ptr/modifiers/reset_neg.cc: Same.\n+\t* testsuite/20_util/unique_ptr/assign/assign.cc: Same.\n+\n 2009-02-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n-\tPR libstdc++/25191\t\n+\tPR libstdc++/25191\n \t* libsupc++/exception_defines.h: Depending on __EXCEPTIONS,\n \tdeal consistently with __try and __catch too.\n \t* src/localename.cc: Replace try -> __try, catch -> __catch."}, {"sha": "e62aa7260577f41eddbede5f2829c7fffc64c8de", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5c6baac1e1222567a750163ba102d0cadab0b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5c6baac1e1222567a750163ba102d0cadab0b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=37d5c6baac1e1222567a750163ba102d0cadab0b", "patch": "@@ -181,7 +181,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)\n       \n       typedef _Vector_base<_Tp, _Alloc>\t\t\t _Base;\n-      typedef vector<_Tp, _Alloc>\t\t\t vector_type;\n       typedef typename _Base::_Tp_alloc_type\t\t _Tp_alloc_type;\n \n     public:\n@@ -190,8 +189,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       typedef typename _Tp_alloc_type::const_pointer     const_pointer;\n       typedef typename _Tp_alloc_type::reference         reference;\n       typedef typename _Tp_alloc_type::const_reference   const_reference;\n-      typedef __gnu_cxx::__normal_iterator<pointer, vector_type> iterator;\n-      typedef __gnu_cxx::__normal_iterator<const_pointer, vector_type>\n+      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;\n+      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>\n       const_iterator;\n       typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;\n       typedef std::reverse_iterator<iterator>\t\t reverse_iterator;"}, {"sha": "5e4fa8c71399d7f113c32d95a4ef334949697018", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5c6baac1e1222567a750163ba102d0cadab0b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5c6baac1e1222567a750163ba102d0cadab0b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=37d5c6baac1e1222567a750163ba102d0cadab0b", "patch": "@@ -1,6 +1,6 @@\n // unique_ptr implementation -*- C++ -*-\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -80,21 +80,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       }\n     };\n \n-  /// 20.6.11.2 unique_ptr for single objects.\n+  /// 20.7.12.2 unique_ptr for single objects.\n   template <typename _Tp, typename _Tp_Deleter = default_delete<_Tp> > \n     class unique_ptr\n     {\n-      typedef unique_ptr<_Tp, _Tp_Deleter>   __this_type;\n       typedef std::tuple<_Tp*, _Tp_Deleter>  __tuple_type;\n-      typedef __tuple_type __this_type::*    __unspecified_bool_type;\n-      typedef _Tp* __this_type::*            __unspecified_pointer_type;\n+      typedef __tuple_type unique_ptr::*     __unspecified_bool_type;\n+      typedef _Tp* unique_ptr::*             __unspecified_pointer_type;\n \n     public:\n-      typedef _Tp*                    pointer;\n+      typedef _Tp*               pointer;\n       typedef _Tp                element_type;      \n       typedef _Tp_Deleter        deleter_type;\n \n-      // constructors\n+      // Constructors.\n       unique_ptr()\n       : _M_t(pointer(), deleter_type())\n       { static_assert(!std::is_pointer<deleter_type>::value,\n@@ -117,19 +116,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { static_assert(!std::is_reference<deleter_type>::value, \n \t\t      \"rvalue deleter bound to reference\"); }\n \n-      // move constructors\n-      unique_ptr(unique_ptr && __u) \n+      // Move constructors.\n+      unique_ptr(unique_ptr&& __u) \n       : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }\n \n       template<typename _Up, typename _Up_Deleter> \n         unique_ptr(unique_ptr<_Up, _Up_Deleter>&& __u) \n         : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter()))\n \t{ }\n \n-      // destructor\n+      // Destructor.\n       ~unique_ptr() { reset(); }\n     \n-      // assignment\n+      // Assignment.\n       unique_ptr&\n       operator=(unique_ptr&& __u)\n       { \n@@ -154,7 +153,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \treturn *this;\n       }\n \n-      // observers\n+      // Observers.\n       typename std::add_lvalue_reference<element_type>::type operator*() const\n       {\n \t_GLIBCXX_DEBUG_ASSERT(get() != 0);\n@@ -183,9 +182,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return std::get<1>(_M_t); }\n \n       operator __unspecified_bool_type () const\n-      { return get() == 0 ? 0 : &__this_type::_M_t; }\n+      { return get() == 0 ? 0 : &unique_ptr::_M_t; }\n \n-      // modifiers\n+      // Modifiers.\n       pointer\n       release() \n       {\n@@ -211,7 +210,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tswap(_M_t, __u._M_t);\n       }\n \n-      // disable copy from lvalue\n+      // Disable copy from lvalue.\n       unique_ptr(const unique_ptr&) = delete;\n \n       template<typename _Up, typename _Up_Deleter> \n@@ -226,24 +225,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __tuple_type _M_t;\n   };\n  \n-  /// 20.6.11.3 unique_ptr for array objects with a runtime length\n+  /// 20.7.12.3 unique_ptr for array objects with a runtime length\n   // [unique.ptr.runtime]\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 740 - omit specialization for array objects with a compile time length\n   template<typename _Tp, typename _Tp_Deleter> \n     class unique_ptr<_Tp[], _Tp_Deleter>\n     {\n-      typedef unique_ptr<_Tp[], _Tp_Deleter>  __this_type;\n-      typedef std::tuple<_Tp*, _Tp_Deleter>   __tuple_type;\n-      typedef __tuple_type __this_type::*     __unspecified_bool_type;\n-      typedef _Tp* __this_type::*             __unspecified_pointer_type;\n+      typedef std::tuple<_Tp*, _Tp_Deleter>  __tuple_type;\n+      typedef __tuple_type unique_ptr::*     __unspecified_bool_type;\n+      typedef _Tp* unique_ptr::*             __unspecified_pointer_type;\n \n     public:\n-      typedef _Tp*                    pointer;\n+      typedef _Tp*               pointer;\n       typedef _Tp                element_type;      \n       typedef _Tp_Deleter        deleter_type;\n \n-      // constructors\n+      // Constructors.\n       unique_ptr()\n       : _M_t(pointer(), deleter_type())\n       { static_assert(!std::is_pointer<deleter_type>::value,\n@@ -266,7 +264,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { static_assert(!std::is_reference<deleter_type>::value, \n \t\t      \"rvalue deleter bound to reference\"); }\n \n-      // move constructors\n+      // Move constructors.\n       unique_ptr(unique_ptr&& __u) \n       : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }\n \n@@ -275,10 +273,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t: _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter()))\n \t{ }\n \n-      // destructor\n+      // Destructor.\n       ~unique_ptr() { reset(); }\n \n-      // assignment\n+      // Assignment.\n       unique_ptr&\n       operator=(unique_ptr&& __u)\n       {\n@@ -303,7 +301,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \treturn *this;\n       }\n \n-      // observers\n+      // Observers.\n       typename std::add_lvalue_reference<element_type>::type \n       operator[](size_t __i) const \n       {\n@@ -326,9 +324,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return std::get<1>(_M_t); }    \n \n       operator __unspecified_bool_type () const \n-      { return get() == 0 ? 0 : &__this_type::_M_t; }\n+      { return get() == 0 ? 0 : &unique_ptr::_M_t; }\n     \n-      // modifiers\n+      // Modifiers.\n       pointer\n       release() \n       {\n@@ -358,11 +356,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tswap(_M_t, __u._M_t);\n       }\n \n-      // disable copy from lvalue\n+      // Disable copy from lvalue.\n       unique_ptr(const unique_ptr&) = delete;\n       unique_ptr& operator=(const unique_ptr&) = delete;\n \n-      // disable construction from convertible pointer types\n+      // Disable construction from convertible pointer types.\n       // (N2315 - 20.6.5.3.1)\n       template<typename _Up>\n         unique_ptr(_Up*, typename"}, {"sha": "457312ea5269acb256b074265559b789350dcbb2", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/assign/assign.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5c6baac1e1222567a750163ba102d0cadab0b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5c6baac1e1222567a750163ba102d0cadab0b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign.cc?ref=37d5c6baac1e1222567a750163ba102d0cadab0b", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2008 Free Software Foundation\n+// Copyright (C) 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -53,7 +53,7 @@ test03()\n // { dg-error \"used here\" \"\" { target *-*-* } 43 }\n // { dg-error \"no matching\" \"\" { target *-*-* } 49 }\n // { dg-error \"used here\" \"\" { target *-*-* } 50 }\n-// { dg-error \"candidates are\" \"\" { target *-*-* } 215 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 215 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 362 }\n+// { dg-error \"candidates are\" \"\" { target *-*-* } 214 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 214 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 360 }\n // { dg-excess-errors \"note\" }"}, {"sha": "acff01ba26055931e13353de67170895165e57d1", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/modifiers/reset_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5c6baac1e1222567a750163ba102d0cadab0b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5c6baac1e1222567a750163ba102d0cadab0b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc?ref=37d5c6baac1e1222567a750163ba102d0cadab0b", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2008 Free Software Foundation\n+// Copyright (C) 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,4 +37,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 36 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 352 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 350 }"}, {"sha": "1f991cc938f474279d35344231691cd00e55310a", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5c6baac1e1222567a750163ba102d0cadab0b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5c6baac1e1222567a750163ba102d0cadab0b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=37d5c6baac1e1222567a750163ba102d0cadab0b", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1058 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1057 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "ff4021e12c107268c052548d128d29002eb94264", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5c6baac1e1222567a750163ba102d0cadab0b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5c6baac1e1222567a750163ba102d0cadab0b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=37d5c6baac1e1222567a750163ba102d0cadab0b", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 998 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 997 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "e1f53211e6ee8592169a22cc31d1a4810326a233", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5c6baac1e1222567a750163ba102d0cadab0b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5c6baac1e1222567a750163ba102d0cadab0b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=37d5c6baac1e1222567a750163ba102d0cadab0b", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 998 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 997 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "2c6169f1188a11d2d2f58988f92547a4ece8cbf0", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5c6baac1e1222567a750163ba102d0cadab0b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5c6baac1e1222567a750163ba102d0cadab0b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=37d5c6baac1e1222567a750163ba102d0cadab0b", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1099 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1098 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}]}