{"sha": "3e27aa84ef34539400456774ade5f2caaa20b5e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UyN2FhODRlZjM0NTM5NDAwNDU2Nzc0YWRlNWYyY2FhYTIwYjVlOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-07-16T14:31:05Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-07-16T14:31:05Z"}, "message": "optabs.c (maybe_encapsulate_block): New function extracted from...\n\n\t* optabs.c (maybe_encapsulate_block): New function extracted from...\n\t(emit_libcall_block): ...here.  Invoke it on the block of insns to\n\tmaybe emit REG_LIBCALL/REG_RETVAL notes around the block.\n\t(emit_no_conflict_block): Likewise.\n\nFrom-SVN: r115498", "tree": {"sha": "31b4477b0273cda78a13029da44c7a27c998faea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31b4477b0273cda78a13029da44c7a27c998faea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e27aa84ef34539400456774ade5f2caaa20b5e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e27aa84ef34539400456774ade5f2caaa20b5e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e27aa84ef34539400456774ade5f2caaa20b5e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e27aa84ef34539400456774ade5f2caaa20b5e9/comments", "author": null, "committer": null, "parents": [{"sha": "c5ee132b4434507f7e970da1a987a237a59ce585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ee132b4434507f7e970da1a987a237a59ce585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5ee132b4434507f7e970da1a987a237a59ce585"}], "stats": {"total": 111, "additions": 83, "deletions": 28}, "files": [{"sha": "28c4534b708018ab3491481b1600c61f321f1746", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e27aa84ef34539400456774ade5f2caaa20b5e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e27aa84ef34539400456774ade5f2caaa20b5e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e27aa84ef34539400456774ade5f2caaa20b5e9", "patch": "@@ -1,3 +1,10 @@\n+2006-07-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* optabs.c (maybe_encapsulate_block): New function extracted from...\n+\t(emit_libcall_block): ...here.  Invoke it on the block of insns to\n+\tmaybe emit REG_LIBCALL/REG_RETVAL notes around the block.\n+\t(emit_no_conflict_block): Likewise.\n+\n 2006-07-16  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* doc/install.texi (sparc-sun-solaris2*): Add GMP version number."}, {"sha": "a961bd49b53a68150d79842eac67d60d0e1dc8d2", "filename": "gcc/optabs.c", "status": "modified", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e27aa84ef34539400456774ade5f2caaa20b5e9/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e27aa84ef34539400456774ade5f2caaa20b5e9/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=3e27aa84ef34539400456774ade5f2caaa20b5e9", "patch": "@@ -3218,6 +3218,38 @@ no_conflict_move_test (rtx dest, rtx set, void *p0)\n     p->must_stay = true;\n }\n \n+/* Encapsulate the block starting at FIRST and ending with LAST, which is\n+   logically equivalent to EQUIV, so it gets manipulated as a unit if it\n+   is possible to do so.  */\n+\n+static void\n+maybe_encapsulate_block (rtx first, rtx last, rtx equiv)\n+{\n+  if (!flag_non_call_exceptions || !may_trap_p (equiv))\n+    {\n+      /* We can't attach the REG_LIBCALL and REG_RETVAL notes when the\n+\t encapsulated region would not be in one basic block, i.e. when\n+\t there is a control_flow_insn_p insn between FIRST and LAST.  */\n+      bool attach_libcall_retval_notes = true;\n+      rtx insn, next = NEXT_INSN (last);\n+\n+      for (insn = first; insn != next; insn = NEXT_INSN (insn))\n+\tif (control_flow_insn_p (insn))\n+\t  {\n+\t    attach_libcall_retval_notes = false;\n+\t    break;\n+\t  }\n+\n+      if (attach_libcall_retval_notes)\n+\t{\n+\t  REG_NOTES (first) = gen_rtx_INSN_LIST (REG_LIBCALL, last,\n+\t\t\t\t\t\t REG_NOTES (first));\n+\t  REG_NOTES (last) = gen_rtx_INSN_LIST (REG_RETVAL, first,\n+\t\t\t\t\t\tREG_NOTES (last));\n+\t}\n+    }\n+}\n+\n /* Emit code to perform a series of operations on a multi-word quantity, one\n    word at a time.\n \n@@ -3339,10 +3371,7 @@ emit_no_conflict_block (rtx insns, rtx target, rtx op0, rtx op1, rtx equiv)\n   else\n     first = NEXT_INSN (prev);\n \n-  /* Encapsulate the block so it gets manipulated as a unit.  */\n-  REG_NOTES (first) = gen_rtx_INSN_LIST (REG_LIBCALL, last,\n-\t\t\t\t\t REG_NOTES (first));\n-  REG_NOTES (last) = gen_rtx_INSN_LIST (REG_RETVAL, first, REG_NOTES (last));\n+  maybe_encapsulate_block (first, last, equiv);\n \n   return last;\n }\n@@ -3496,30 +3525,7 @@ emit_libcall_block (rtx insns, rtx target, rtx result, rtx equiv)\n   else\n     first = NEXT_INSN (prev);\n \n-  /* Encapsulate the block so it gets manipulated as a unit.  */\n-  if (!flag_non_call_exceptions || !may_trap_p (equiv))\n-    {\n-      /* We can't attach the REG_LIBCALL and REG_RETVAL notes\n-\t when the encapsulated region would not be in one basic block,\n-\t i.e. when there is a control_flow_insn_p insn between FIRST and LAST.\n-       */\n-      bool attach_libcall_retval_notes = true;\n-      next = NEXT_INSN (last);\n-      for (insn = first; insn != next; insn = NEXT_INSN (insn))\n-\tif (control_flow_insn_p (insn))\n-\t  {\n-\t    attach_libcall_retval_notes = false;\n-\t    break;\n-\t  }\n-\n-      if (attach_libcall_retval_notes)\n-\t{\n-\t  REG_NOTES (first) = gen_rtx_INSN_LIST (REG_LIBCALL, last,\n-\t\t\t\t\t\t REG_NOTES (first));\n-\t  REG_NOTES (last) = gen_rtx_INSN_LIST (REG_RETVAL, first,\n-\t\t\t\t\t\tREG_NOTES (last));\n-\t}\n-    }\n+  maybe_encapsulate_block (first, last, equiv);\n }\n \f\n /* Nonzero if we can perform a comparison of mode MODE straightforwardly."}, {"sha": "9e7e540c9fabe21660ea59fa89784d6cab10295e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e27aa84ef34539400456774ade5f2caaa20b5e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e27aa84ef34539400456774ade5f2caaa20b5e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e27aa84ef34539400456774ade5f2caaa20b5e9", "patch": "@@ -1,3 +1,9 @@\n+2006-07-16  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gnat.dg/assert.ads: New file.\n+\t* gnat.dg/controlled_record.ads: Likewise.\n+\t* gnat.dg/controlled_record.adb: Likewise.\n+\n 2006-07-15  Lee Millward  <lee.millward@gmail.com>\n \n \tPR c++/28292"}, {"sha": "81a912a8ad2e401daaeb222b0e2f254d66c8c0f3", "filename": "gcc/testsuite/gnat.dg/assert.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e27aa84ef34539400456774ade5f2caaa20b5e9/gcc%2Ftestsuite%2Fgnat.dg%2Fassert.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e27aa84ef34539400456774ade5f2caaa20b5e9/gcc%2Ftestsuite%2Fgnat.dg%2Fassert.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fassert.ads?ref=3e27aa84ef34539400456774ade5f2caaa20b5e9", "patch": "@@ -0,0 +1,5 @@\n+package Assert is\n+\n+   procedure Assert (Condition : Boolean);\n+\n+end Assert;"}, {"sha": "89a9380b9d2a3fd39577baa8497070f6389150e6", "filename": "gcc/testsuite/gnat.dg/controlled_record.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e27aa84ef34539400456774ade5f2caaa20b5e9/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled_record.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e27aa84ef34539400456774ade5f2caaa20b5e9/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled_record.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled_record.adb?ref=3e27aa84ef34539400456774ade5f2caaa20b5e9", "patch": "@@ -0,0 +1,15 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2\" }\n+\n+with Ada.Text_IO; use Ada.Text_IO;\n+with Assert;\n+\n+package body Controlled_Record is\n+   \n+   procedure Assert_Invariants (PA : Point_T) is\n+     PB : Point_T;\n+   begin\n+      Assert.Assert (PB.Pos = PA.Pos);\n+   end;\n+\n+end Controlled_Record;"}, {"sha": "71a57372c96697b36c28abbdeae9b73863d112bb", "filename": "gcc/testsuite/gnat.dg/controlled_record.ads", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e27aa84ef34539400456774ade5f2caaa20b5e9/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled_record.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e27aa84ef34539400456774ade5f2caaa20b5e9/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled_record.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled_record.ads?ref=3e27aa84ef34539400456774ade5f2caaa20b5e9", "patch": "@@ -0,0 +1,16 @@\n+with Ada.Finalization;\n+\n+package Controlled_Record is\n+\n+   type Point_T is limited private;\n+   procedure Assert_Invariants (PA : Point_T);\n+\n+private\n+\n+   type Coords_T is array (1 .. 2) of Natural;\n+\n+   type Point_T is new Ada.Finalization.Controlled with record\n+      Pos : Coords_T := (0, 0);\n+   end record;\n+\n+end Controlled_Record;"}]}