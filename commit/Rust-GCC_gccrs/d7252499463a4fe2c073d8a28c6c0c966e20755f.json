{"sha": "d7252499463a4fe2c073d8a28c6c0c966e20755f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcyNTI0OTk0NjNhNGZlMmMwNzNkOGEyOGM2YzBjOTY2ZTIwNzU1Zg==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2018-09-06T07:35:35Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2018-09-06T07:35:35Z"}, "message": "S/390: Register pass_s390_early_mach statically\n\nThe dump file used to come at the end of the sorted dump file list,\nbecause the pass was registered dynamically. This did not reflect the\norder in which passes are executed. Static registration fixes this:\n\n* foo4.c.277r.split2\n* foo4.c.281r.early_mach\n* foo4.c.282r.pro_and_epilogue\n\ngcc/ChangeLog:\n\n2018-09-06  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\tPR target/80080\n\t* config/s390/s390-passes.def: New file.\n\t* config/s390/s390-protos.h (class rtl_opt_pass): Add forward\n\tdeclaration.\n\t(make_pass_s390_early_mach): Add declaration.\n\t* config/s390/s390.c (make_pass_s390_early_mach):\n\t(s390_option_override): Remove dynamic registration.\n\t* config/s390/t-s390: Add s390-passes.def.\n\nFrom-SVN: r264142", "tree": {"sha": "c273449b084c0b8a65a8b15b899d95bf6861bd89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c273449b084c0b8a65a8b15b899d95bf6861bd89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7252499463a4fe2c073d8a28c6c0c966e20755f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7252499463a4fe2c073d8a28c6c0c966e20755f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7252499463a4fe2c073d8a28c6c0c966e20755f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7252499463a4fe2c073d8a28c6c0c966e20755f/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f0d2063151bddc1ab3cbd178afe3280a68ab76aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0d2063151bddc1ab3cbd178afe3280a68ab76aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0d2063151bddc1ab3cbd178afe3280a68ab76aa"}], "stats": {"total": 59, "additions": 44, "deletions": 15}, "files": [{"sha": "31f7778d63d6c9df4ecb923921369a05c3ff54e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7252499463a4fe2c073d8a28c6c0c966e20755f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7252499463a4fe2c073d8a28c6c0c966e20755f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7252499463a4fe2c073d8a28c6c0c966e20755f", "patch": "@@ -1,3 +1,14 @@\n+2018-09-06  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\tPR target/80080\n+\t* config/s390/s390-passes.def: New file.\n+\t* config/s390/s390-protos.h (class rtl_opt_pass): Add forward\n+\tdeclaration.\n+\t(make_pass_s390_early_mach): Add declaration.\n+\t* config/s390/s390.c (make_pass_s390_early_mach):\n+\t(s390_option_override): Remove dynamic registration.\n+\t* config/s390/t-s390: Add s390-passes.def.\n+\n 2018-09-06  Ilya Leoshkevich  <iii@linux.ibm.com>\n \n \t* config/s390/s390.c (s390_decompose_constant_pool_ref):"}, {"sha": "035c6e8bc0ae43827a8428038217a2bf43f99791", "filename": "gcc/config/s390/s390-passes.def", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7252499463a4fe2c073d8a28c6c0c966e20755f/gcc%2Fconfig%2Fs390%2Fs390-passes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7252499463a4fe2c073d8a28c6c0c966e20755f/gcc%2Fconfig%2Fs390%2Fs390-passes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-passes.def?ref=d7252499463a4fe2c073d8a28c6c0c966e20755f", "patch": "@@ -0,0 +1,20 @@\n+/* Description of target passes for S/390.\n+   Copyright (C) 2018 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+INSERT_PASS_BEFORE (pass_thread_prologue_and_epilogue, 1, pass_s390_early_mach);"}, {"sha": "45fce6ce86506c584c68bcdc161004e0decf7fc0", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7252499463a4fe2c073d8a28c6c0c966e20755f/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7252499463a4fe2c073d8a28c6c0c966e20755f/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=d7252499463a4fe2c073d8a28c6c0c966e20755f", "patch": "@@ -165,3 +165,9 @@ extern void s390_register_target_pragmas (void);\n \n /* Routines for s390-c.c */\n extern bool s390_const_operand_ok (tree, int, int, tree);\n+\n+/* Pass management.  */\n+namespace gcc { class context; }\n+class rtl_opt_pass;\n+\n+extern rtl_opt_pass *make_pass_s390_early_mach (gcc::context *ctxt);"}, {"sha": "30bf0292d8921b0bd123923eb2ee94c0254432e2", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7252499463a4fe2c073d8a28c6c0c966e20755f/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7252499463a4fe2c073d8a28c6c0c966e20755f/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=d7252499463a4fe2c073d8a28c6c0c966e20755f", "patch": "@@ -10556,6 +10556,12 @@ pass_s390_early_mach::execute (function *fun)\n \n } // anon namespace\n \n+rtl_opt_pass *\n+make_pass_s390_early_mach (gcc::context *ctxt)\n+{\n+  return new pass_s390_early_mach (ctxt);\n+}\n+\n /* Calculate TARGET = REG + OFFSET as s390_emit_prologue would do it.\n    - push too big immediates to the literal pool and annotate the refs\n    - emit frame related notes for stack pointer changes.  */\n@@ -14964,21 +14970,6 @@ s390_option_override (void)\n       if (!global_options_set.x_dwarf_version)\n \tdwarf_version = 2;\n     }\n-\n-  /* Register a target-specific optimization-and-lowering pass\n-     to run immediately before prologue and epilogue generation.\n-\n-     Registering the pass must be done at start up.  It's\n-     convenient to do it here.  */\n-  opt_pass *new_pass = new pass_s390_early_mach (g);\n-  struct register_pass_info insert_pass_s390_early_mach =\n-    {\n-      new_pass,\t\t\t/* pass */\n-      \"pro_and_epilogue\",\t/* reference_pass_name */\n-      1,\t\t\t/* ref_pass_instance_number */\n-      PASS_POS_INSERT_BEFORE\t/* po_op */\n-    };\n-  register_pass (&insert_pass_s390_early_mach);\n }\n \n #if S390_USE_TARGET_ATTRIBUTE"}, {"sha": "8ca0c7879c9940ef192ba169a1a1721f52901dcc", "filename": "gcc/config/s390/t-s390", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7252499463a4fe2c073d8a28c6c0c966e20755f/gcc%2Fconfig%2Fs390%2Ft-s390", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7252499463a4fe2c073d8a28c6c0c966e20755f/gcc%2Fconfig%2Fs390%2Ft-s390", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ft-s390?ref=d7252499463a4fe2c073d8a28c6c0c966e20755f", "patch": "@@ -18,6 +18,7 @@\n \n TM_H += $(srcdir)/config/s390/s390-builtins.def\n TM_H += $(srcdir)/config/s390/s390-builtin-types.def\n+PASSES_EXTRA += $(srcdir)/config/s390/s390-passes.def\n \n s390-c.o: $(srcdir)/config/s390/s390-c.c \\\n   $(srcdir)/config/s390/s390-protos.h $(CONFIG_H) $(SYSTEM_H) coretypes.h \\"}]}