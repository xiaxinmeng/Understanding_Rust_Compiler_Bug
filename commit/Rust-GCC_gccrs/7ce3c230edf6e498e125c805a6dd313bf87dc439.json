{"sha": "7ce3c230edf6e498e125c805a6dd313bf87dc439", "node_id": "C_kwDOANBUbNoAKDdjZTNjMjMwZWRmNmU0OThlMTI1YzgwNWE2ZGQzMTNiZjg3ZGM0Mzk", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-14T14:32:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-14T21:45:46Z"}, "message": "libstdc++: Fix handling of invalid ranges in std::regex [PR102447]\n\nstd::regex currently allows invalid bracket ranges such as [\\w-a] which\nare only allowed by ECMAScript when in web browser compatibility mode.\nIt should be an error, because the start of the range is a character\nclass, not a single character. The current implementation of\n_Compiler::_M_expression_term does not provide a way to reject this,\nbecause we only remember a previous character, not whether we just\nprocessed a character class (or collating symbol etc.)\n\nThis patch replaces the pair<bool, CharT> used to emulate\noptional<CharT> with a custom class closer to pair<tribool,CharT>. That\nallows us to track three states, so that we can tell when we've just\nseen a character class.\n\nWith this additional state the code in _M_expression_term for processing\nthe _S_token_bracket_dash can be improved to correctly reject the [\\w-a]\ncase, without regressing for valid cases such as [\\w-] and [----].\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/102447\n\t* include/bits/regex_compiler.h (_Compiler::_BracketState): New\n\tclass.\n\t(_Compiler::_BrackeyMatcher): New alias template.\n\t(_Compiler::_M_expression_term): Change pair<bool, CharT>\n\tparameter to _BracketState. Process first character for\n\tECMAScript syntax as well as POSIX.\n\t* include/bits/regex_compiler.tcc\n\t(_Compiler::_M_insert_bracket_matcher): Pass _BracketState.\n\t(_Compiler::_M_expression_term): Use _BracketState to store\n\tstate between calls. Improve handling of dashes in ranges.\n\t* testsuite/28_regex/algorithms/regex_match/cstring_bracket_01.cc:\n\tAdd more tests for ranges containing dashes. Check invalid\n\tranges with character class at the beginning.", "tree": {"sha": "7f81e7a88d1d39c5a870451c49a3711e601a692e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f81e7a88d1d39c5a870451c49a3711e601a692e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ce3c230edf6e498e125c805a6dd313bf87dc439", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce3c230edf6e498e125c805a6dd313bf87dc439", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ce3c230edf6e498e125c805a6dd313bf87dc439", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce3c230edf6e498e125c805a6dd313bf87dc439/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fda28722703d7ab8903ce5f616e3efed1bbdbc25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda28722703d7ab8903ce5f616e3efed1bbdbc25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fda28722703d7ab8903ce5f616e3efed1bbdbc25"}], "stats": {"total": 220, "additions": 152, "deletions": 68}, "files": [{"sha": "06cb48f2b6df5fc6a7adbd9b5ee01c565019cb88", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce3c230edf6e498e125c805a6dd313bf87dc439/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce3c230edf6e498e125c805a6dd313bf87dc439/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=7ce3c230edf6e498e125c805a6dd313bf87dc439", "patch": "@@ -121,13 +121,45 @@ namespace __detail\n \tvoid\n \t_M_insert_bracket_matcher(bool __neg);\n \n-      // Returns true if successfully matched one term and should continue.\n+      // Cache of the last atom seen in a bracketed range expression.\n+      struct _BracketState\n+      {\n+\tenum class _Type : char { _None, _Char, _Class } _M_type = _Type::_None;\n+\t_CharT _M_char;\n+\n+\tvoid\n+\tset(_CharT __c) noexcept { _M_type = _Type::_Char; _M_char = __c; }\n+\n+\t_GLIBCXX_NODISCARD _CharT\n+\tget() const noexcept { return _M_char; }\n+\n+\tvoid\n+\treset(_Type __t = _Type::_None) noexcept { _M_type = __t; }\n+\n+\texplicit operator bool() const noexcept\n+\t{ return _M_type != _Type::_None; }\n+\n+\t// Previous token was a single character.\n+\t_GLIBCXX_NODISCARD bool\n+\t_M_is_char() const noexcept { return _M_type == _Type::_Char; }\n+\n+\t// Previous token was a character class, equivalent class,\n+\t// collating symbol etc.\n+\t_GLIBCXX_NODISCARD bool\n+\t_M_is_class() const noexcept { return _M_type == _Type::_Class; }\n+      };\n+\n+      template<bool __icase, bool __collate>\n+\tusing _BracketMatcher\n+\t  = std::__detail::_BracketMatcher<_TraitsT, __icase, __collate>;\n+\n+      // Returns true if successfully parsed one term and should continue\n+      // compiling a bracket expression.\n       // Returns false if the compiler should move on.\n       template<bool __icase, bool __collate>\n \tbool\n-\t_M_expression_term(pair<bool, _CharT>& __last_char,\n-\t\t\t   _BracketMatcher<_TraitsT, __icase, __collate>&\n-\t\t\t   __matcher);\n+\t_M_expression_term(_BracketState& __last_char,\n+\t\t\t   _BracketMatcher<__icase, __collate>& __matcher);\n \n       int\n       _M_cur_int_value(int __radix);"}, {"sha": "9000aec8e2527f5155dd22a5df4f8460f66d0cdc", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 55, "deletions": 63, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce3c230edf6e498e125c805a6dd313bf87dc439/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce3c230edf6e498e125c805a6dd313bf87dc439/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=7ce3c230edf6e498e125c805a6dd313bf87dc439", "patch": "@@ -403,7 +403,7 @@ namespace __detail\n     _M_insert_character_class_matcher()\n     {\n       __glibcxx_assert(_M_value.size() == 1);\n-      _BracketMatcher<_TraitsT, __icase, __collate> __matcher\n+      _BracketMatcher<__icase, __collate> __matcher\n \t(_M_ctype.is(_CtypeT::upper, _M_value[0]), _M_traits);\n       __matcher._M_add_character_class(_M_value, false);\n       __matcher._M_ready();\n@@ -417,26 +417,17 @@ namespace __detail\n     _Compiler<_TraitsT>::\n     _M_insert_bracket_matcher(bool __neg)\n     {\n-      _BracketMatcher<_TraitsT, __icase, __collate> __matcher(__neg, _M_traits);\n-      pair<bool, _CharT> __last_char; // Optional<_CharT>\n-      __last_char.first = false;\n-      if (!(_M_flags & regex_constants::ECMAScript))\n-\t{\n-\t  if (_M_try_char())\n-\t    {\n-\t      __last_char.first = true;\n-\t      __last_char.second = _M_value[0];\n-\t    }\n-\t  else if (_M_match_token(_ScannerT::_S_token_bracket_dash))\n-\t    {\n-\t      __last_char.first = true;\n-\t      __last_char.second = '-';\n-\t    }\n-\t}\n+      _BracketMatcher<__icase, __collate> __matcher(__neg, _M_traits);\n+      _BracketState __last_char;\n+      if (_M_try_char())\n+\t__last_char.set(_M_value[0]);\n+      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))\n+\t// Dash as first character is a normal character.\n+\t__last_char.set('-');\n       while (_M_expression_term(__last_char, __matcher))\n \t;\n-      if (__last_char.first)\n-\t__matcher._M_add_char(__last_char.second);\n+      if (__last_char._M_is_char())\n+\t__matcher._M_add_char(__last_char.get());\n       __matcher._M_ready();\n       _M_stack.push(_StateSeqT(\n \t\t      *_M_nfa,\n@@ -447,27 +438,27 @@ namespace __detail\n   template<bool __icase, bool __collate>\n     bool\n     _Compiler<_TraitsT>::\n-    _M_expression_term(pair<bool, _CharT>& __last_char,\n-\t\t       _BracketMatcher<_TraitsT, __icase, __collate>& __matcher)\n+    _M_expression_term(_BracketState& __last_char,\n+\t\t       _BracketMatcher<__icase, __collate>& __matcher)\n     {\n       if (_M_match_token(_ScannerT::_S_token_bracket_end))\n \treturn false;\n \n+      // Add any previously cached char into the matcher and update cache.\n       const auto __push_char = [&](_CharT __ch)\n       {\n-\tif (__last_char.first)\n-\t  __matcher._M_add_char(__last_char.second);\n-\telse\n-\t  __last_char.first = true;\n-\t__last_char.second = __ch;\n+\tif (__last_char._M_is_char())\n+\t  __matcher._M_add_char(__last_char.get());\n+\t__last_char.set(__ch);\n       };\n-      const auto __flush = [&]\n+      // Add any previously cached char into the matcher and update cache.\n+      const auto __push_class = [&]\n       {\n-\tif (__last_char.first)\n-\t  {\n-\t    __matcher._M_add_char(__last_char.second);\n-\t    __last_char.first = false;\n-\t  }\n+        if (__last_char._M_is_char())\n+\t  __matcher._M_add_char(__last_char.get());\n+\t// We don't cache anything here, just record that the last thing\n+\t// processed was a character class (or similar).\n+\t__last_char.reset(_BracketState::_Type::_Class);\n       };\n \n       if (_M_match_token(_ScannerT::_S_token_collsymbol))\n@@ -476,16 +467,16 @@ namespace __detail\n \t  if (__symbol.size() == 1)\n \t    __push_char(__symbol[0]);\n \t  else\n-\t    __flush();\n+\t    __push_class();\n \t}\n       else if (_M_match_token(_ScannerT::_S_token_equiv_class_name))\n \t{\n-\t  __flush();\n+\t  __push_class();\n \t  __matcher._M_add_equivalence_class(_M_value);\n \t}\n       else if (_M_match_token(_ScannerT::_S_token_char_class_name))\n \t{\n-\t  __flush();\n+\t  __push_class();\n \t  __matcher._M_add_character_class(_M_value, false);\n \t}\n       else if (_M_try_char())\n@@ -502,49 +493,50 @@ namespace __detail\n       // It turns out that no one reads BNFs ;)\n       else if (_M_match_token(_ScannerT::_S_token_bracket_dash))\n \t{\n-\t  if (!__last_char.first)\n+\t  if (_M_match_token(_ScannerT::_S_token_bracket_end))\n \t    {\n-\t      if (!(_M_flags & regex_constants::ECMAScript))\n-\t\t{\n-\t\t  if (_M_match_token(_ScannerT::_S_token_bracket_end))\n-\t\t    {\n-\t\t      __push_char('-');\n-\t\t      return false;\n-\t\t    }\n-\t\t  __throw_regex_error(\n-\t\t    regex_constants::error_range,\n-\t\t    \"Unexpected dash in bracket expression. For POSIX syntax, \"\n-\t\t    \"a dash is not treated literally only when it is at \"\n-\t\t    \"beginning or end.\");\n-\t\t}\n+\t      // For \"-]\" the dash is a literal character.\n \t      __push_char('-');\n+\t      return false;\n \t    }\n-\t  else\n+\t  else if (__last_char._M_is_class())\n+\t    {\n+\t      // \"\\\\w-\" is invalid, start of range must be a single char.\n+\t      __throw_regex_error(regex_constants::error_range,\n+\t\t    \"Invalid start of range in bracket expression.\");\n+\t    }\n+\t  else if (__last_char._M_is_char())\n \t    {\n \t      if (_M_try_char())\n \t\t{\n-\t\t  __matcher._M_make_range(__last_char.second, _M_value[0]);\n-\t\t  __last_char.first = false;\n+\t\t  // \"x-y\"\n+\t\t  __matcher._M_make_range(__last_char.get(), _M_value[0]);\n+\t\t  __last_char.reset();\n \t\t}\n \t      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))\n \t\t{\n-\t\t  __matcher._M_make_range(__last_char.second, '-');\n-\t\t  __last_char.first = false;\n+\t\t  // \"x--\"\n+\t\t  __matcher._M_make_range(__last_char.get(), '-');\n+\t\t  __last_char.reset();\n \t\t}\n \t      else\n-\t\t{\n-\t\t  if (_M_scanner._M_get_token()\n-\t\t      != _ScannerT::_S_token_bracket_end)\n-\t\t    __throw_regex_error(\n-\t\t      regex_constants::error_range,\n-\t\t      \"Character is expected after a dash.\");\n-\t\t  __push_char('-');\n-\t\t}\n+\t\t__throw_regex_error(regex_constants::error_range,\n+\t\t      \"Invalid end of range in bracket expression.\");\n \t    }\n+\t  else if (_M_flags & regex_constants::ECMAScript)\n+\t    {\n+\t      // A dash that is not part of an existing range. Might be the\n+\t      // start of a new range, or might just be a literal '-' char.\n+\t      // Only ECMAScript allows that in the middle of a bracket expr.\n+\t      __push_char('-');\n+\t    }\n+\t  else\n+\t    __throw_regex_error(regex_constants::error_range,\n+\t\t\t\t\"Invalid dash in bracket expression.\");\n \t}\n       else if (_M_match_token(_ScannerT::_S_token_quoted_class))\n \t{\n-\t  __flush();\n+\t  __push_class();\n \t  __matcher._M_add_character_class(_M_value,\n \t\t\t\t\t   _M_ctype.is(_CtypeT::upper,\n \t\t\t\t\t\t       _M_value[0]));"}, {"sha": "0d76e63da7bca902594cc9351615722f485ffc89", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/cstring_bracket_01.cc", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce3c230edf6e498e125c805a6dd313bf87dc439/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fcstring_bracket_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce3c230edf6e498e125c805a6dd313bf87dc439/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fcstring_bracket_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fcstring_bracket_01.cc?ref=7ce3c230edf6e498e125c805a6dd313bf87dc439", "patch": "@@ -69,6 +69,16 @@ test01()\n void\n test02()\n {\n+  VERIFY(regex_match(\"-\", regex(\"[-]\", regex_constants::ECMAScript)));\n+  VERIFY(regex_match(\"-\", regex(\"[--]\", regex_constants::ECMAScript)));\n+  VERIFY(regex_match(\"-\", regex(\"[---]\", regex_constants::ECMAScript)));\n+  VERIFY(regex_match(\"-\", regex(\"[----]\", regex_constants::ECMAScript)));\n+  VERIFY(regex_match(\"-\", regex(\"[-----]\", regex_constants::ECMAScript)));\n+\n+  VERIFY(regex_match(\"-\", regex(\"[-]\", regex_constants::extended)));\n+  VERIFY(regex_match(\"-\", regex(\"[--]\", regex_constants::extended)));\n+  VERIFY(regex_match(\"-\", regex(\"[---]\", regex_constants::extended)));\n+  VERIFY(regex_match(\"-\", regex(\"[----]\", regex_constants::extended)));\n   try\n   {\n     std::regex re(\"[-----]\", std::regex::extended);\n@@ -78,7 +88,6 @@ test02()\n   {\n     VERIFY(e.code() == std::regex_constants::error_range);\n   }\n-  std::regex re(\"[-----]\", std::regex::ECMAScript);\n \n   VERIFY(!regex_match(\"b\", regex(\"[-ac]\", regex_constants::extended)));\n   VERIFY(!regex_match(\"b\", regex(\"[ac-]\", regex_constants::extended)));\n@@ -93,7 +102,27 @@ test02()\n   }\n   catch (const std::regex_error& e)\n   {\n+    VERIFY(e.code() == std::regex_constants::error_range);\n+  }\n+  try\n+  {\n+    regex(\"[@--]\", regex_constants::extended);\n+    VERIFY(false);\n   }\n+  catch (const std::regex_error& e)\n+  {\n+    VERIFY(e.code() == std::regex_constants::error_range);\n+  }\n+  try\n+  {\n+    regex(\"[--%]\", regex_constants::extended);\n+    VERIFY(false);\n+  }\n+  catch (const std::regex_error& e)\n+  {\n+    VERIFY(e.code() == std::regex_constants::error_range);\n+  }\n+\n   VERIFY(regex_match(\"].\", regex(\"[][.hyphen.]-0]*\", regex_constants::extended)));\n }\n \n@@ -158,6 +187,36 @@ test06()\n   VERIFY(regex_match(\"a-\", debian_cron_namespace_ok));\n }\n \n+// libstdc++/102447\n+void\n+test07()\n+{\n+  VERIFY(regex_match(\"-\", std::regex(\"[\\\\w-]\", std::regex::ECMAScript)));\n+  VERIFY(regex_match(\"a\", std::regex(\"[\\\\w-]\", std::regex::ECMAScript)));\n+  VERIFY(regex_match(\"-\", std::regex(\"[a-]\", std::regex::ECMAScript)));\n+  VERIFY(regex_match(\"a\", std::regex(\"[a-]\", std::regex::ECMAScript)));\n+\n+  try\n+  {\n+    std::regex re(\"[\\\\w-a]\", std::regex::ECMAScript);\n+    VERIFY(false);\n+  }\n+  catch (const std::regex_error& e)\n+  {\n+    VERIFY(e.code() == std::regex_constants::error_range);\n+  }\n+\n+  try\n+  {\n+    std::regex re(\"[\\\\w--]\", std::regex::ECMAScript);\n+    VERIFY(false);\n+  }\n+  catch (const std::regex_error& e)\n+  {\n+    VERIFY(e.code() == std::regex_constants::error_range);\n+  }\n+}\n+\n int\n main()\n {\n@@ -167,6 +226,7 @@ main()\n   test04();\n   test05();\n   test06();\n+  test07();\n \n   return 0;\n }"}]}