{"sha": "15b5aef3e72ff167751f52111b7a7be3429aae14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTViNWFlZjNlNzJmZjE2Nzc1MWY1MjExMWI3YTdiZTM0MjlhYWUxNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-03-20T02:13:39Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-20T02:13:39Z"}, "message": "flow.c (EH_USES): Provide default.\n\n        * flow.c (EH_USES): Provide default.\n        (calculate_global_regs_live): Use it for EH edges and noreturn calls.\n        * doc/tm.texi (EH_USES): New.\n\n        * config/ia64/ia64.c (ia64_eh_uses): New.\n        * config/ia64/ia64-protos.h: Update.\n        * config/ia64/ia64.h (EH_USES): New.\n\nFrom-SVN: r51060", "tree": {"sha": "b494bd2379913f69721d6206bfacbe19e6522eb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b494bd2379913f69721d6206bfacbe19e6522eb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15b5aef3e72ff167751f52111b7a7be3429aae14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15b5aef3e72ff167751f52111b7a7be3429aae14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15b5aef3e72ff167751f52111b7a7be3429aae14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15b5aef3e72ff167751f52111b7a7be3429aae14/comments", "author": null, "committer": null, "parents": [{"sha": "02a7a3fda139c2e6ddaca51063d9dc0f38b3077b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a7a3fda139c2e6ddaca51063d9dc0f38b3077b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a7a3fda139c2e6ddaca51063d9dc0f38b3077b"}], "stats": {"total": 99, "additions": 85, "deletions": 14}, "files": [{"sha": "c09bbccfba4446e86158c09af7cf577f57a6166e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b5aef3e72ff167751f52111b7a7be3429aae14/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b5aef3e72ff167751f52111b7a7be3429aae14/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15b5aef3e72ff167751f52111b7a7be3429aae14", "patch": "@@ -1,3 +1,13 @@\n+2002-03-19  Richard Henderson  <rth@redhat.com>\n+\n+\t* flow.c (EH_USES): Provide default.\n+\t(calculate_global_regs_live): Use it for EH edges and noreturn calls.\n+\t* doc/tm.texi (EH_USES): New.\n+\n+\t* config/ia64/ia64.c (ia64_eh_uses): New.\n+\t* config/ia64/ia64-protos.h: Update.\n+\t* config/ia64/ia64.h (EH_USES): New.\n+\n 2002-03-19  Richard Henderson  <rth@redhat.com>\n \n \t* varasm.c (output_constant_def): Fix stupid typo."}, {"sha": "cedeee20ec553ef0060988ac51fc4e0e7760d569", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b5aef3e72ff167751f52111b7a7be3429aae14/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b5aef3e72ff167751f52111b7a7be3429aae14/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=15b5aef3e72ff167751f52111b7a7be3429aae14", "patch": "@@ -122,6 +122,7 @@ extern void ia64_encode_section_info PARAMS((tree, int));\n extern int ia64_register_move_cost PARAMS((enum machine_mode, enum reg_class,\n \t\t\t\t\t   enum reg_class));\n extern int ia64_epilogue_uses PARAMS((int));\n+extern int ia64_eh_uses PARAMS((int));\n extern void emit_safe_across_calls PARAMS((FILE *));\n extern void ia64_init_builtins PARAMS((void));\n extern void ia64_override_options PARAMS((void));"}, {"sha": "a667ae3dbc766ee378373fa1bc75c05d7807ac42", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b5aef3e72ff167751f52111b7a7be3429aae14/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b5aef3e72ff167751f52111b7a7be3429aae14/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=15b5aef3e72ff167751f52111b7a7be3429aae14", "patch": "@@ -6816,6 +6816,34 @@ ia64_epilogue_uses (regno)\n       return 0;\n     }\n }\n+\n+/* Return true if REGNO is used by the frame unwinder.  */\n+\n+int\n+ia64_eh_uses (regno)\n+     int regno;\n+{\n+  if (! reload_completed)\n+    return 0;\n+\n+  if (current_frame_info.reg_save_b0\n+      && regno == current_frame_info.reg_save_b0)\n+    return 1;\n+  if (current_frame_info.reg_save_pr\n+      && regno == current_frame_info.reg_save_pr)\n+    return 1;\n+  if (current_frame_info.reg_save_ar_pfs\n+      && regno == current_frame_info.reg_save_ar_pfs)\n+    return 1;\n+  if (current_frame_info.reg_save_ar_unat\n+      && regno == current_frame_info.reg_save_ar_unat)\n+    return 1;\n+  if (current_frame_info.reg_save_ar_lc\n+      && regno == current_frame_info.reg_save_ar_lc)\n+    return 1;\n+\n+  return 0;\n+}\n \f\n /* For ia64, SYMBOL_REF_FLAG set means that it is a function.\n "}, {"sha": "8a4a759ec528b57b54f10888d9676122d2b374ae", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b5aef3e72ff167751f52111b7a7be3429aae14/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b5aef3e72ff167751f52111b7a7be3429aae14/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=15b5aef3e72ff167751f52111b7a7be3429aae14", "patch": "@@ -1406,6 +1406,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define EPILOGUE_USES(REGNO) ia64_epilogue_uses (REGNO)\n \n+/* Nonzero for registers used by the exception handling mechanism.  */\n+\n+#define EH_USES(REGNO) ia64_eh_uses (REGNO)\n+\n /* Output at beginning of assembler file.  */\n \n #define ASM_FILE_START(FILE) \\"}, {"sha": "3f37cdb3e6003d896784072f490b0018d4fd31d4", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b5aef3e72ff167751f52111b7a7be3429aae14/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b5aef3e72ff167751f52111b7a7be3429aae14/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=15b5aef3e72ff167751f52111b7a7be3429aae14", "patch": "@@ -4042,6 +4042,12 @@ Define this macro as a C expression that is nonzero for registers that are\n used by the epilogue or the @samp{return} pattern.  The stack and frame\n pointer registers are already be assumed to be used as needed.\n \n+@findex EH_USES\n+@item EH_USES (@var{regno})\n+Define this macro as a C expression that is nonzero for registers that are\n+used by the exception handling mechanism, and so should be considered live\n+on entry to an exception edge.\n+\n @findex DELAY_SLOTS_FOR_EPILOGUE\n @item DELAY_SLOTS_FOR_EPILOGUE\n Define this macro if the function epilogue contains delay slots to which"}, {"sha": "659815c5043fd854e66dd86491442faa610b41b8", "filename": "gcc/flow.c", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b5aef3e72ff167751f52111b7a7be3429aae14/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b5aef3e72ff167751f52111b7a7be3429aae14/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=15b5aef3e72ff167751f52111b7a7be3429aae14", "patch": "@@ -167,6 +167,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef EPILOGUE_USES\n #define EPILOGUE_USES(REGNO)  0\n #endif\n+#ifndef EH_USES\n+#define EH_USES(REGNO)  0\n+#endif\n \n #ifdef HAVE_conditional_execution\n #ifndef REVERSE_CONDEXEC_PREDICATES_P\n@@ -1144,21 +1147,40 @@ calculate_global_regs_live (blocks_in, blocks_out, flags)\n \n       /* Begin by propagating live_at_start from the successor blocks.  */\n       CLEAR_REG_SET (new_live_at_end);\n-      for (e = bb->succ; e; e = e->succ_next)\n-\t{\n-\t  basic_block sb = e->dest;\n \n-\t  /* Call-clobbered registers die across exception and call edges.  */\n-\t  /* ??? Abnormal call edges ignored for the moment, as this gets\n-\t     confused by sibling call edges, which crashes reg-stack.  */\n-\t  if (e->flags & EDGE_EH)\n-\t    {\n-\t      bitmap_operation (tmp, sb->global_live_at_start,\n-\t\t\t\tcall_used, BITMAP_AND_COMPL);\n-\t      IOR_REG_SET (new_live_at_end, tmp);\n-\t    }\n-\t  else\n-\t    IOR_REG_SET (new_live_at_end, sb->global_live_at_start);\n+      if (bb->succ)\n+\tfor (e = bb->succ; e; e = e->succ_next)\n+\t  {\n+\t    basic_block sb = e->dest;\n+\n+\t    /* Call-clobbered registers die across exception and\n+\t       call edges.  */\n+\t    /* ??? Abnormal call edges ignored for the moment, as this gets\n+\t       confused by sibling call edges, which crashes reg-stack.  */\n+\t    if (e->flags & EDGE_EH)\n+\t      {\n+\t\tbitmap_operation (tmp, sb->global_live_at_start,\n+\t\t\t\t  call_used, BITMAP_AND_COMPL);\n+\t\tIOR_REG_SET (new_live_at_end, tmp);\n+\t      }\n+\t    else\n+\t      IOR_REG_SET (new_live_at_end, sb->global_live_at_start);\n+\n+\t    /* If a target saves one register in another (instead of on\n+\t       the stack) the save register will need to be live for EH.  */\n+\t    if (e->flags & EDGE_EH)\n+\t      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+\t\tif (EH_USES (i))\n+\t\t  SET_REGNO_REG_SET (new_live_at_end, i);\n+\t  }\n+      else\n+\t{\n+\t  /* This might be a noreturn function that throws.  And\n+\t     even if it isn't, getting the unwind info right helps\n+\t     debugging.  */\n+\t  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+\t    if (EH_USES (i))\n+\t      SET_REGNO_REG_SET (new_live_at_end, i);\n \t}\n \n       /* The all-important stack pointer must always be live.  */"}]}