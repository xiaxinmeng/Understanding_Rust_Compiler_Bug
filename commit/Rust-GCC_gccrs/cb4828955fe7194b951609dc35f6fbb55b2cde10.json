{"sha": "cb4828955fe7194b951609dc35f6fbb55b2cde10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I0ODI4OTU1ZmU3MTk0Yjk1MTYwOWRjMzVmNmZiYjU1YjJjZGUxMA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-06-05T05:35:39Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-06-05T05:35:39Z"}, "message": "md (reg_not_xmm0_operand): New predicate.\n\n\t* config/i386/predicates/md (reg_not_xmm0_operand): New predicate.\n\t(nonimm_not_xmm0_operand): Ditto.\n\t* config/i386/sse.md (\"sse4_1_blendvpd\"): Use \"reg_not_xmm0_operand\"\n\tas operand[0] and operand[1] predicate.  Use \"nonimm_not_xmm0_operand\"\n\tas operand[2] predicate.  Require \"z\" class XMM register for\n\toperand[3].  Adjust asm template.\n\t(\"sse4_1_blendvpd\"): Ditto.\n\t(\"sse4_1_pblendvb\"): Ditto.\n \t* config/i386/i386.c (ix86_expand_sse_4_operands_builtin): Do not\n\tforce op2 into xmm0 register for variable blend instructions.\n\nFrom-SVN: r125327", "tree": {"sha": "cd272f190dad215f8c5b6ceb9c0260d707ef0b3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd272f190dad215f8c5b6ceb9c0260d707ef0b3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb4828955fe7194b951609dc35f6fbb55b2cde10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb4828955fe7194b951609dc35f6fbb55b2cde10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb4828955fe7194b951609dc35f6fbb55b2cde10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb4828955fe7194b951609dc35f6fbb55b2cde10/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2eaad86a2c1d3b760f7a08a74bd3a784b13c506b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eaad86a2c1d3b760f7a08a74bd3a784b13c506b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eaad86a2c1d3b760f7a08a74bd3a784b13c506b"}], "stats": {"total": 113, "additions": 60, "deletions": 53}, "files": [{"sha": "bcf11a23ed1f881836782076f53a38b2db553ef1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4828955fe7194b951609dc35f6fbb55b2cde10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4828955fe7194b951609dc35f6fbb55b2cde10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb4828955fe7194b951609dc35f6fbb55b2cde10", "patch": "@@ -1,3 +1,16 @@\n+2007-06-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates/md (reg_not_xmm0_operand): New predicate.\n+\t(nonimm_not_xmm0_operand): Ditto.\n+\t* config/i386/sse.md (\"sse4_1_blendvpd\"): Use \"reg_not_xmm0_operand\"\n+\tas operand[0] and operand[1] predicate.  Use \"nonimm_not_xmm0_operand\"\n+\tas operand[2] predicate.  Require \"z\" class XMM register for\n+\toperand[3].  Adjust asm template.\n+\t(\"sse4_1_blendvpd\"): Ditto.\n+\t(\"sse4_1_pblendvb\"): Ditto.\n+ \t* config/i386/i386.c (ix86_expand_sse_4_operands_builtin): Do not\n+\tforce op2 into xmm0 register for variable blend instructions.\n+\n 2007-06-04  Tom Tromey  <tromey@redhat.com>\n \n \t* c-tree.h (start_enum): Update."}, {"sha": "64fb97ed89f0f6af7ebfca6df9f70243820fd5bf", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 18, "deletions": 35, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4828955fe7194b951609dc35f6fbb55b2cde10/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4828955fe7194b951609dc35f6fbb55b2cde10/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=cb4828955fe7194b951609dc35f6fbb55b2cde10", "patch": "@@ -18280,13 +18280,14 @@ ix86_expand_sse_4_operands_builtin (enum insn_code icode, tree exp,\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n   enum machine_mode mode1 = insn_data[icode].operand[1].mode;\n   enum machine_mode mode2 = insn_data[icode].operand[2].mode;\n-  enum machine_mode mode3;\n-  rtx xmm0;\n+  enum machine_mode mode3 = insn_data[icode].operand[3].mode;\n \n   if (VECTOR_MODE_P (mode1))\n     op0 = safe_vector_operand (op0, mode1);\n   if (VECTOR_MODE_P (mode2))\n     op1 = safe_vector_operand (op1, mode2);\n+  if (VECTOR_MODE_P (mode3))\n+    op2 = safe_vector_operand (op2, mode3);\n \n   if (optimize\n       || target == 0\n@@ -18300,42 +18301,24 @@ ix86_expand_sse_4_operands_builtin (enum insn_code icode, tree exp,\n       || !(*insn_data[icode].operand[2].predicate) (op1, mode2))\n     op1 = copy_to_mode_reg (mode2, op1);\n \n-  switch (icode)\n-    {\n-    case CODE_FOR_sse4_1_blendvpd:\n-    case CODE_FOR_sse4_1_blendvps:\n-    case CODE_FOR_sse4_1_pblendvb:\n-      mode3 = tmode;\n-      op2 = safe_vector_operand (op2, mode3);\n-\n-      if (!register_operand (op2, mode3))\n+  if (! (*insn_data[icode].operand[3].predicate) (op2, mode3))\n+    switch (icode)\n+      {\n+      case CODE_FOR_sse4_1_blendvpd:\n+      case CODE_FOR_sse4_1_blendvps:\n+      case CODE_FOR_sse4_1_pblendvb:\n \top2 = copy_to_mode_reg (mode3, op2);\n+\tbreak;\n \n-      /* ??? The third argument of variable blends must be xmm0.  */\n-      xmm0 = gen_rtx_REG (mode3, XMM0_REG);\n+      case CODE_FOR_sse4_1_roundsd:\n+      case CODE_FOR_sse4_1_roundss:\n+\terror (\"the third argument must be a 4-bit immediate\");\n+\treturn const0_rtx;\n \n-      emit_move_insn (xmm0, op2);\n-      op2 = xmm0;\n-      break;\n-\n-    default:\n-      mode3 = insn_data[icode].operand[3].mode;\n-      if (! (*insn_data[icode].operand[3].predicate) (op2, mode3))\n-\t{\n-\t  switch (icode)\n-\t    {\n-\t    case CODE_FOR_sse4_1_roundsd:\n-\t    case CODE_FOR_sse4_1_roundss:\n-\t      error (\"the third argument must be a 4-bit immediate\");\n-\t      break;\n-\t    default:\n-\t      error (\"the third argument must be an 8-bit immediate\");\n-\t      break;\n-\t    }\n-\t  return const0_rtx;\n-\t}\n-      break;\n-    }\n+      default:\n+\terror (\"the third argument must be an 8-bit immediate\");\n+\treturn const0_rtx;\n+      }\n \n   pat = GEN_FCN (icode) (target, op0, op1, op2);\n   if (! pat)"}, {"sha": "730f32bbb9b6be8dedd82b96d8757da79c7905e9", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4828955fe7194b951609dc35f6fbb55b2cde10/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4828955fe7194b951609dc35f6fbb55b2cde10/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=cb4828955fe7194b951609dc35f6fbb55b2cde10", "patch": "@@ -1315,7 +1315,7 @@ enum reg_class\n    \"GENERAL_REGS\",\t\t\t\\\n    \"FP_TOP_REG\", \"FP_SECOND_REG\",\t\\\n    \"FLOAT_REGS\",\t\t\t\\\n-   \"FIRST_SSE_REG\",\t\t\t\\\n+   \"SSE_FIRST_REG\",\t\t\t\\\n    \"SSE_REGS\",\t\t\t\t\\\n    \"MMX_REGS\",\t\t\t\t\\\n    \"FP_TOP_SSE_REGS\",\t\t\t\\\n@@ -1343,7 +1343,7 @@ enum reg_class\n   { 0x1100ff,  0x1fe0 },\t\t/* GENERAL_REGS */\t\t\\\n      { 0x100,     0x0 }, { 0x0200, 0x0 },/* FP_TOP_REG, FP_SECOND_REG */\\\n     { 0xff00,     0x0 },\t\t/* FLOAT_REGS */\t\t\\\n-  { 0x200000,     0x0 },\t\t/* FIRST_SSE_REG */\t\t\\\n+  { 0x200000,     0x0 },\t\t/* SSE_FIRST_REG */\t\t\\\n { 0x1fe00000,0x1fe000 },\t\t/* SSE_REGS */\t\t\t\\\n { 0xe0000000,    0x1f },\t\t/* MMX_REGS */\t\t\t\\\n { 0x1fe00100,0x1fe000 },\t\t/* FP_TOP_SSE_REG */\t\t\\"}, {"sha": "3d101772f05833188f649a38b6d57bebb315c55e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4828955fe7194b951609dc35f6fbb55b2cde10/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4828955fe7194b951609dc35f6fbb55b2cde10/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=cb4828955fe7194b951609dc35f6fbb55b2cde10", "patch": "@@ -204,7 +204,6 @@\n    (FLAGS_REG\t\t\t17)\n    (FPSR_REG\t\t\t18)\n    (FPCR_REG\t\t\t19)\n-   (XMM0_REG\t\t\t21)\n    (R10_REG\t\t\t39)\n    (R11_REG\t\t\t40)\n   ])"}, {"sha": "c035287236539eb02a9e633b2be2b132f8b46fe5", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4828955fe7194b951609dc35f6fbb55b2cde10/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4828955fe7194b951609dc35f6fbb55b2cde10/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=cb4828955fe7194b951609dc35f6fbb55b2cde10", "patch": "@@ -76,6 +76,18 @@\n   (and (match_code \"reg\")\n        (match_test \"REGNO (op) == FLAGS_REG\")))\n \n+;; Return true if op is not xmm0 register.\n+(define_predicate \"reg_not_xmm0_operand\"\n+   (and (match_operand 0 \"register_operand\")\n+\t(match_test \"GET_CODE (op) != REG\n+\t\t     || REGNO (op) != FIRST_SSE_REG\")))\n+\n+;; As above, but allow nonimmediate operands.\n+(define_predicate \"nonimm_not_xmm0_operand\"\n+   (and (match_operand 0 \"nonimmediate_operand\")\n+\t(match_test \"GET_CODE (op) != REG\n+\t\t     || REGNO (op) != FIRST_SSE_REG\")))\n+\n ;; Return 1 if VALUE can be stored in a sign extended immediate field.\n (define_predicate \"x86_64_immediate_operand\"\n   (match_code \"const_int,symbol_ref,label_ref,const\")"}, {"sha": "8917dfc61ba5c06bcb4daa5c4c9808e222a0fee3", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4828955fe7194b951609dc35f6fbb55b2cde10/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4828955fe7194b951609dc35f6fbb55b2cde10/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=cb4828955fe7194b951609dc35f6fbb55b2cde10", "patch": "@@ -5841,25 +5841,25 @@\n    (set_attr \"mode\" \"V4SF\")])\n \n (define_insn \"sse4_1_blendvpd\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n-\t(unspec:V2DF [(match_operand:V2DF 1 \"register_operand\"  \"0\")\n-\t\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\")\n-\t\t      (reg:V2DF XMM0_REG)]\n+  [(set (match_operand:V2DF 0 \"reg_not_xmm0_operand\" \"=x\")\n+\t(unspec:V2DF [(match_operand:V2DF 1 \"reg_not_xmm0_operand\"  \"0\")\n+\t\t      (match_operand:V2DF 2 \"nonimm_not_xmm0_operand\" \"xm\")\n+\t\t      (match_operand:V2DF 3 \"register_operand\" \"z\")]\n \t\t     UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n-  \"blendvpd\\t{%%xmm0, %2, %0|%0, %2, %%xmm0}\"\n+  \"blendvpd\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2DF\")])\n \n (define_insn \"sse4_1_blendvps\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n-\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"0\")\n-\t\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm\")\n-\t\t      (reg:V4SF XMM0_REG)]\n+  [(set (match_operand:V4SF 0 \"reg_not_xmm0_operand\" \"=x\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"reg_not_xmm0_operand\" \"0\")\n+\t\t      (match_operand:V4SF 2 \"nonimm_not_xmm0_operand\" \"xm\")\n+\t\t      (match_operand:V4SF 3 \"register_operand\" \"z\")]\n \t\t     UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n-  \"blendvps\\t{%%xmm0, %2, %0|%0, %2, %%xmm0}\"\n+  \"blendvps\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V4SF\")])\n@@ -5924,13 +5924,13 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse4_1_pblendvb\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\"  \"0\")\n-\t\t       (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")\n-\t\t       (reg:V16QI XMM0_REG)]\n+  [(set (match_operand:V16QI 0 \"reg_not_xmm0_operand\" \"=x\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"reg_not_xmm0_operand\"  \"0\")\n+\t\t       (match_operand:V16QI 2 \"nonimm_not_xmm0_operand\" \"xm\")\n+\t\t       (match_operand:V16QI 3 \"register_operand\" \"z\")]\n \t\t      UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n-  \"pblendvb\\t{%%xmm0, %2, %0|%0, %2, %%xmm0}\"\n+  \"pblendvb\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"TI\")])"}]}