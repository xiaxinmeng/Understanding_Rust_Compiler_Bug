{"sha": "85fb1d7d5f44a81a52015d58ebe67765faabfd35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVmYjFkN2Q1ZjQ0YTgxYTUyMDE1ZDU4ZWJlNjc3NjVmYWFiZmQzNQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2021-01-07T17:34:49Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2021-01-07T17:34:49Z"}, "message": "Fortran: Improve resolution of associate variables. [PR93701].\n\n2021-01-07  Paul Thomas  <pault@gcc.gnu.org>\n\ngcc/fortran\n\tPR fortran/93701\n\t* resolve.c (find_array_spec): Put static prototype for\n\tresolve_assoc_var before this function and call for associate\n\tvariables.\n\ngcc/testsuite/\n\tPR fortran/93701\n\t* gfortran.dg/associate_54.f90: New test.\n\t* gfortran.dg/associate_55.f90: New test.\n\t* gfortran.dg/associate_56.f90: New test.", "tree": {"sha": "92304526acf7b36f8d0cdcdac67c8606c2bb4d3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92304526acf7b36f8d0cdcdac67c8606c2bb4d3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85fb1d7d5f44a81a52015d58ebe67765faabfd35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85fb1d7d5f44a81a52015d58ebe67765faabfd35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85fb1d7d5f44a81a52015d58ebe67765faabfd35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85fb1d7d5f44a81a52015d58ebe67765faabfd35/comments", "author": null, "committer": null, "parents": [{"sha": "dddea6d4d81cac76ff64cde178e2d5f7fe09fb55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dddea6d4d81cac76ff64cde178e2d5f7fe09fb55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dddea6d4d81cac76ff64cde178e2d5f7fe09fb55"}], "stats": {"total": 114, "additions": 114, "deletions": 0}, "files": [{"sha": "f243bd185b014b6dafc79b096485eef9dcd0fad5", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fb1d7d5f44a81a52015d58ebe67765faabfd35/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fb1d7d5f44a81a52015d58ebe67765faabfd35/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=85fb1d7d5f44a81a52015d58ebe67765faabfd35", "patch": "@@ -4885,6 +4885,8 @@ gfc_resolve_dim_arg (gfc_expr *dim)\n    base symbol.  We traverse the list of reference structures, setting\n    the stored reference to references.  Component references can\n    provide an additional array specification.  */\n+static void\n+resolve_assoc_var (gfc_symbol* sym, bool resolve_target);\n \n static void\n find_array_spec (gfc_expr *e)\n@@ -4894,6 +4896,13 @@ find_array_spec (gfc_expr *e)\n   gfc_ref *ref;\n   bool class_as = false;\n \n+  if (e->symtree->n.sym->assoc)\n+    {\n+      if (e->symtree->n.sym->assoc->target)\n+\tgfc_resolve_expr (e->symtree->n.sym->assoc->target);\n+      resolve_assoc_var (e->symtree->n.sym, false);\n+    }\n+\n   if (e->symtree->n.sym->ts.type == BT_CLASS)\n     {\n       as = CLASS_DATA (e->symtree->n.sym)->as;"}, {"sha": "003175a47fdb52b192424ea1a603295e5f071593", "filename": "gcc/testsuite/gfortran.dg/associate_54.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fb1d7d5f44a81a52015d58ebe67765faabfd35/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_54.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fb1d7d5f44a81a52015d58ebe67765faabfd35/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_54.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_54.f90?ref=85fb1d7d5f44a81a52015d58ebe67765faabfd35", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do compile }\n+!\n+! Test the fix for PR93701.\n+!\n+! Contributed by Simon Brass  <simon.brass@desy.de>\n+!\n+module test\n+  implicit none\n+\n+  integer, parameter :: N_STATE = 1, &\n+       TEST_STATE = 1\n+\n+  type :: test_t\n+     integer, dimension(:), allocatable :: state\n+  end type test_t\n+\n+contains\n+\n+  subroutine test_allocate (obj)\n+    class(test_t), intent(out) :: obj\n+    allocate (obj%state(N_STATE))\n+  end subroutine test_allocate\n+\n+  subroutine test_alter_state1 (obj, a)\n+    class(test_t), intent(inout) :: obj\n+    integer, intent(in) :: a\n+    associate (state => obj%state(TEST_STATES)) ! { dg-error \"is used as array\" }\n+!      state = a\n+      state(TEST_STATE) = a\n+    end associate\n+  end subroutine test_alter_state1\n+\n+end module test\n+"}, {"sha": "2b9e8c727f901355ee66f35c4fbed2b49de5b148", "filename": "gcc/testsuite/gfortran.dg/associate_55.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fb1d7d5f44a81a52015d58ebe67765faabfd35/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_55.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fb1d7d5f44a81a52015d58ebe67765faabfd35/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_55.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_55.f90?ref=85fb1d7d5f44a81a52015d58ebe67765faabfd35", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+!\n+! Test the fix for PR93701.\n+!\n+! Contributed by Simon Brass  <simon.brass@desy.de>\n+!\n+module test\n+  implicit none\n+\n+  integer, parameter :: N_STATE = 1, &\n+       TEST_STATE = 1\n+\n+  type :: test_t\n+     integer, dimension(:), allocatable :: state\n+  end type test_t\n+\n+contains\n+\n+  subroutine test_allocate (obj)\n+    class(test_t), intent(out) :: obj\n+    allocate (obj%state(N_STATE))\n+  end subroutine test_allocate\n+\n+\n+  subroutine test_alter_state2 (obj, a)\n+    class(test_t), intent(inout) :: obj\n+    integer, intent(in) :: a\n+    associate (state => obj%state(TEST_STATES)) ! { dg-error \"no IMPLICIT type\" }\n+      state = a                                 ! { dg-error \"vector-indexed target\" }\n+!      state(TEST_STATE) = a\n+    end associate\n+  end subroutine test_alter_state2\n+\n+end module test\n+"}, {"sha": "429f129da6e7fc8b811e1c52f3ce6f3ee4af498e", "filename": "gcc/testsuite/gfortran.dg/associate_56.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fb1d7d5f44a81a52015d58ebe67765faabfd35/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_56.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fb1d7d5f44a81a52015d58ebe67765faabfd35/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_56.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_56.f90?ref=85fb1d7d5f44a81a52015d58ebe67765faabfd35", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do compile }\n+!\n+! Test the fix for PR93701.\n+!\n+! Contributed by Simon Brass  <simon.brass@desy.de>\n+!\n+module test\n+  implicit none\n+\n+  integer, parameter :: N_STATE = 1, &\n+       TEST_STATE = 1\n+\n+  type :: test_t\n+     integer, dimension(:), allocatable :: state\n+  end type test_t\n+\n+contains\n+\n+  subroutine test_allocate (obj)\n+    class(test_t), intent(out) :: obj\n+    allocate (obj%state(N_STATE))\n+  end subroutine test_allocate\n+\n+\n+  subroutine test_alter_state2 (obj, a)\n+    class(test_t), intent(inout) :: obj\n+    integer, intent(in) :: a\n+    integer, dimension(2) :: TEST_STATES = [1,2]\n+    associate (state => obj%state(TEST_STATES))\n+      state = a                                 ! { dg-error \"vector-indexed target\" }\n+      state(TEST_STATE) = a                     ! { dg-error \"vector-indexed target\" }\n+    end associate\n+  end subroutine test_alter_state2\n+\n+end module test\n+"}]}