{"sha": "e37e6813d517379a4973ec2ca441c750b6289e4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM3ZTY4MTNkNTE3Mzc5YTQ5NzNlYzJjYTQ0MWM3NTBiNjI4OWU0Yg==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2015-07-03T14:08:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-07-03T14:08:37Z"}, "message": "Implement std::experimental::fundamentals_v2::propagate_const.\n\n2015-07-03  Ville Voutilainen  <ville.voutilainen@gmail.com>\n\n\tImplement std::experimental::fundamentals_v2::propagate_const.\n\t* include/Makefile.am: Add propagate_const.\n\t* include/Makefile.in: Regenerate.\n\t* include/experimental/propagate_const: New.\n\t* testsuite/experimental/propagate_const/assignment/copy.cc: Likewise.\n\t* testsuite/experimental/propagate_const/assignment/move.cc: Likewise.\n\t* testsuite/experimental/propagate_const/assignment/move_neg.cc:\n\tLikewise.\n\t* testsuite/experimental/propagate_const/cons/copy.cc: Likewise.\n\t* testsuite/experimental/propagate_const/cons/default.cc: Likewise.\n\t* testsuite/experimental/propagate_const/cons/move.cc: Likewise.\n\t* testsuite/experimental/propagate_const/cons/move_neg.cc: Likewise.\n\t* testsuite/experimental/propagate_const/hash/1.cc: Likewise.\n\t* testsuite/experimental/propagate_const/observers/1.cc: Likewise.\n\t* testsuite/experimental/propagate_const/relops/1.cc: Likewise.\n\t* testsuite/experimental/propagate_const/requirements1.cc: Likewise.\n\t* testsuite/experimental/propagate_const/requirements2.cc: Likewise.\n\t* testsuite/experimental/propagate_const/requirements3.cc: Likewise.\n\t* testsuite/experimental/propagate_const/requirements4.cc: Likewise.\n\t* testsuite/experimental/propagate_const/requirements5.cc: Likewise.\n\t* testsuite/experimental/propagate_const/swap/1.cc: Likewise.\n\t* testsuite/experimental/propagate_const/typedefs.cc: Likewise.\n\nFrom-SVN: r225379", "tree": {"sha": "f09c42085f99ce0ece58fc491f1d67c4fea5c088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f09c42085f99ce0ece58fc491f1d67c4fea5c088"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e37e6813d517379a4973ec2ca441c750b6289e4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37e6813d517379a4973ec2ca441c750b6289e4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e37e6813d517379a4973ec2ca441c750b6289e4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37e6813d517379a4973ec2ca441c750b6289e4b/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "805a54065f592746919df9f44d2cdb70c72ea1b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/805a54065f592746919df9f44d2cdb70c72ea1b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/805a54065f592746919df9f44d2cdb70c72ea1b1"}], "stats": {"total": 1214, "additions": 1214, "deletions": 0}, "files": [{"sha": "fdcfd6186f45891b15c191c3b02ca272d01160bd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -1,3 +1,28 @@\n+2015-07-03  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement std::experimental::fundamentals_v2::propagate_const.\n+\t* include/Makefile.am: Add propagate_const.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/experimental/propagate_const: New.\n+\t* testsuite/experimental/propagate_const/assignment/copy.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/assignment/move.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/assignment/move_neg.cc:\n+\tLikewise.\n+\t* testsuite/experimental/propagate_const/cons/copy.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/cons/default.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/cons/move.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/cons/move_neg.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/hash/1.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/observers/1.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/relops/1.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/requirements1.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/requirements2.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/requirements3.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/requirements4.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/requirements5.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/swap/1.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/typedefs.cc: Likewise.\n+\n 2015-07-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* acinclude.m4 (GLIBCXX_DEFAULT_ABI): Change valid arguments for"}, {"sha": "c0028dd324e1d172d3e938246bfd16fb5f5c285a", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -657,6 +657,7 @@ experimental_headers = \\\n \t${experimental_srcdir}/memory \\\n \t${experimental_srcdir}/numeric \\\n \t${experimental_srcdir}/optional \\\n+\t${experimental_srcdir}/propagate_const \\\n \t${experimental_srcdir}/ratio \\\n \t${experimental_srcdir}/set \\\n \t${experimental_srcdir}/string \\"}, {"sha": "24246a65541997d24363f958b188fc855aa150e8", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -946,6 +946,7 @@ experimental_headers = \\\n \t${experimental_srcdir}/memory \\\n \t${experimental_srcdir}/numeric \\\n \t${experimental_srcdir}/optional \\\n+\t${experimental_srcdir}/propagate_const \\\n \t${experimental_srcdir}/ratio \\\n \t${experimental_srcdir}/set \\\n \t${experimental_srcdir}/string \\"}, {"sha": "f90395964f77f069355c5f32afa5539e112d8605", "filename": "libstdc++-v3/include/experimental/propagate_const", "status": "added", "additions": 535, "deletions": 0, "changes": 535, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fpropagate_const", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fpropagate_const", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fpropagate_const?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -0,0 +1,535 @@\n+// <experimental/propagate_const> -*- C++ -*-\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/propagate_const\n+ *  This is a TS C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_PROPAGATE_CONST\n+#define _GLIBCXX_EXPERIMENTAL_PROPAGATE_CONST 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+\n+#include <type_traits>\n+#include <functional>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace experimental\n+{\n+inline namespace fundamentals_v2\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  /**\n+   * @defgroup propagate_const Const-propagating wrapper\n+   * @ingroup experimental\n+   *\n+   * A const-propagating wrapper that propagates const to pointer-like members,\n+   * as described in n4388 \"A Proposal to Add a Const-Propagating Wrapper\n+   * to the Standard Library\".\n+   *\n+   * @{\n+   */\n+\n+/// Const-propagating wrapper.\n+  template <typename _Tp>\n+    class propagate_const\n+    {\n+    public:\n+      typedef remove_reference_t<decltype(*declval<_Tp&>())> element_type;\n+\n+    private:\n+      template <typename _Up>\n+\tstruct __is_propagate_const : false_type\n+\t{ };\n+\n+      template <typename _Up>\n+\tstruct __is_propagate_const<propagate_const<_Up>> : true_type\n+\t{ };\n+\n+      template <typename _Up>\n+\tfriend constexpr const _Up&\n+\tget_underlying(const propagate_const<_Up>& __pt) noexcept;\n+      template <typename _Up>\n+\tfriend constexpr _Up&\n+\tget_underlying(propagate_const<_Up>& __pt) noexcept;\n+\n+      template <typename _Up>\n+\tstatic constexpr element_type*\n+\t__to_raw_pointer(_Up* __u)\n+\t{ return __u; }\n+\n+      template <typename _Up>\n+\tstatic constexpr element_type*\n+\t__to_raw_pointer(_Up& __u)\n+\t{ return __u.get(); }\n+\n+      template <typename _Up>\n+\tstatic constexpr const element_type*\n+\t__to_raw_pointer(const _Up* __u)\n+\t{ return __u; }\n+\n+      template <typename _Up>\n+\tstatic constexpr const element_type*\n+\t__to_raw_pointer(const _Up& __u)\n+\t{ return __u.get(); }\n+\n+    public:\n+      static_assert(__and_<is_object<typename remove_pointer<_Tp>::type>,\n+\t\t\t   __not_<is_array<_Tp>>,\n+\t\t\t   __or_<is_class<_Tp>, is_pointer<_Tp>>>::value,\n+\t\t    \"propagate_const requires a class or a pointer to an\"\n+\t\t    \" object type\");\n+\n+      // [propagate_const.ctor], constructors\n+      constexpr propagate_const() = default;\n+      propagate_const(const propagate_const& __p) = delete;\n+      constexpr propagate_const(propagate_const&& __p) = default;\n+      template <typename _Up, typename\n+\t\tenable_if<__and_<is_constructible<_Tp, _Up&&>,\n+\t\t\t\t is_convertible<_Up&&, _Tp>>::value, bool\n+\t\t\t  >::type=true>\n+      constexpr propagate_const(propagate_const<_Up>&& __pu)\n+\t: __t(move(get_underlying(__pu)))\n+      {}\n+      template <typename _Up, typename\n+\t\tenable_if<__and_<is_constructible<_Tp, _Up&&>,\n+\t\t\t\t __not_<is_convertible<_Up&&, _Tp>>>::value,\n+\t\t\t  bool>::type=false>\n+      constexpr explicit propagate_const(propagate_const<_Up>&& __pu)\n+\t: __t(move(get_underlying(__pu)))\n+      {}\n+      template <typename _Up, typename\n+\t\tenable_if<__and_<is_constructible<_Tp, _Up&&>,\n+\t\t\t\t is_convertible<_Up&&, _Tp>,\n+\t\t\t\t __not_<__is_propagate_const<\n+\t\t\t\t\t  typename decay<_Up>::type>>\n+\t\t\t\t >::value, bool>::type=true>\n+      constexpr propagate_const(_Up&& __u)\n+\t: __t(forward<_Up>(__u))\n+      {}\n+      template <typename _Up, typename\n+\t\tenable_if<__and_<is_constructible<_Tp, _Up&&>,\n+\t\t\t\t __not_<is_convertible<_Up&&, _Tp>>,\n+\t\t\t\t __not_<__is_propagate_const<\n+\t\t\t\t\t  typename decay<_Up>::type>>\n+\t\t\t\t >::value, bool>::type=false>\n+      constexpr explicit propagate_const(_Up&& __u)\n+\t: __t(forward<_Up>(__u))\n+      {}\n+\n+      // [propagate_const.assignment], assignment\n+      propagate_const& operator=(const propagate_const& __p) = delete;\n+      constexpr propagate_const& operator=(propagate_const&& __p) = default;\n+\n+      template <typename _Up, typename =\n+\t\ttypename enable_if<is_convertible<_Up&&, _Tp>::value>::type>\n+      constexpr propagate_const& operator=(propagate_const<_Up>&& __pu)\n+      {\n+\t__t = move(get_underlying(__pu));\n+      }\n+\n+      template <typename _Up, typename =\n+\t\ttypename enable_if<__and_<is_convertible<_Up&&, _Tp>,\n+\t\t\t\t\t  __not_<__is_propagate_const<\n+\t\t\t\t\t\t   typename decay<_Up>::type>>\n+\t\t\t\t\t  >::value>::type>\n+      constexpr propagate_const& operator=(_Up&& __u)\n+      {\n+\t__t = forward<_Up>(__u);\n+      }\n+\n+      // [propagate_const.const_observers], const observers\n+      explicit constexpr operator bool() const\n+      {\n+\treturn bool(__t);\n+      }\n+\n+      constexpr const element_type* operator->() const\n+      {\n+\treturn get();\n+      }\n+\n+      template <typename _Up = _Tp,\n+\t\ttypename enable_if<__or_<is_pointer<_Up>,\n+\t\t\t\t\t is_convertible<_Up,\n+\t\t\t\t\t\t\tconst element_type*>\n+\t\t\t\t\t >::value, bool>::type = true>\n+      constexpr operator const element_type*() const\n+      {\n+\treturn get();\n+      }\n+\n+      constexpr const element_type& operator*() const\n+      {\n+\treturn *get();\n+      }\n+\n+      constexpr const element_type* get() const\n+      {\n+\treturn __to_raw_pointer(__t);\n+      }\n+\n+      // [propagate_const.non_const_observers], non-const observers\n+      constexpr element_type* operator->()\n+      {\n+\treturn get();\n+      }\n+\n+      template <typename _Up = _Tp,\n+\t\ttypename enable_if<__or_<is_pointer<_Up>,\n+\t\t\t\t\t is_convertible<_Up,\n+\t\t\t\t\t\t        const element_type*>\n+\t\t\t\t\t >::value, bool>::type = true>\n+      constexpr operator element_type*()\n+      {\n+\treturn get();\n+      }\n+\n+      constexpr element_type& operator*()\n+      {\n+\treturn *get();\n+      }\n+\n+      constexpr element_type* get()\n+      {\n+\treturn __to_raw_pointer(__t);\n+      }\n+\n+      // [propagate_const.modifiers], modifiers\n+      constexpr void\n+      swap(propagate_const& __pt) noexcept(__is_nothrow_swappable<_Tp>::value)\n+      {\n+\tusing std::swap;\n+\tswap(__t, get_underlying(__pt));\n+      }\n+\n+    private:\n+      _Tp __t; //exposition only\n+    };\n+\n+  // [propagate_const.relational], relational operators\n+  template <typename _Tp>\n+    constexpr bool\n+    operator==(const propagate_const<_Tp>& __pt, nullptr_t)\n+    {\n+      return get_underlying(__pt) == nullptr;\n+    }\n+\n+  template <typename _Tp>\n+    constexpr bool\n+    operator==(nullptr_t, const propagate_const<_Tp>& __pu)\n+    {\n+      return nullptr == get_underlying(__pu);\n+    }\n+\n+  template <typename _Tp>\n+    constexpr bool\n+    operator!=(const propagate_const<_Tp>& __pt, nullptr_t)\n+    {\n+      return get_underlying(__pt) != nullptr;\n+    }\n+\n+  template <typename _Tp>\n+    constexpr bool operator!=(nullptr_t, const propagate_const<_Tp>& __pu)\n+    {\n+      return nullptr != get_underlying(__pu);\n+    }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr bool\n+    operator==(const propagate_const<_Tp>& __pt,\n+\t       const propagate_const<_Up>& __pu)\n+    {\n+      return get_underlying(__pt) == get_underlying(__pu);\n+    }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr bool\n+    operator!=(const propagate_const<_Tp>& __pt,\n+\t       const propagate_const<_Up>& __pu)\n+    {\n+      return get_underlying(__pt) != get_underlying(__pu);\n+    }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr bool\n+    operator<(const propagate_const<_Tp>& __pt,\n+\t      const propagate_const<_Up>& __pu)\n+    {\n+      return get_underlying(__pt) < get_underlying(__pu);\n+    }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr bool\n+    operator>(const propagate_const<_Tp>& __pt,\n+\t      const propagate_const<_Up>& __pu)\n+    {\n+      return get_underlying(__pt) > get_underlying(__pu);\n+    }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr bool\n+    operator<=(const propagate_const<_Tp>& __pt,\n+\t       const propagate_const<_Up>& __pu)\n+    {\n+      return get_underlying(__pt) <= get_underlying(__pu);\n+    }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr bool\n+    operator>=(const propagate_const<_Tp>& __pt,\n+\t       const propagate_const<_Up>& __pu)\n+    {\n+      return get_underlying(__pt) >= get_underlying(__pu);\n+    }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr bool\n+    operator==(const propagate_const<_Tp>& __pt, const _Up& __u)\n+    {\n+      return get_underlying(__pt) == __u;\n+    }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr bool\n+    operator!=(const propagate_const<_Tp>& __pt, const _Up& __u)\n+    {\n+      return get_underlying(__pt) != __u;\n+    }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr bool\n+    operator<(const propagate_const<_Tp>& __pt, const _Up& __u)\n+    {\n+      return get_underlying(__pt) < __u;\n+    }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr bool\n+    operator>(const propagate_const<_Tp>& __pt, const _Up& __u)\n+    {\n+      return get_underlying(__pt) > __u;\n+    }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr bool\n+    operator<=(const propagate_const<_Tp>& __pt, const _Up& __u)\n+    {\n+      return get_underlying(__pt) <= __u;\n+    }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr bool\n+    operator>=(const propagate_const<_Tp>& __pt, const _Up& __u)\n+    {\n+      return get_underlying(__pt) >= __u;\n+    }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr bool\n+    operator==(const _Tp& __t, const propagate_const<_Up>& __pu)\n+    {\n+      return __t == get_underlying(__pu);\n+    }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr bool\n+    operator!=(const _Tp& __t, const propagate_const<_Up>& __pu)\n+    {\n+      return __t != get_underlying(__pu);\n+    }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr bool\n+    operator<(const _Tp& __t, const propagate_const<_Up>& __pu)\n+    {\n+      return __t < get_underlying(__pu);\n+    }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr bool\n+    operator>(const _Tp& __t, const propagate_const<_Up>& __pu)\n+    {\n+      return __t > get_underlying(__pu);\n+    }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr bool\n+    operator<=(const _Tp& __t, const propagate_const<_Up>& __pu)\n+    {\n+      return __t <= get_underlying(__pu);\n+    }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr bool\n+    operator>=(const _Tp& __t, const propagate_const<_Up>& __pu)\n+    {\n+      return __t >= get_underlying(__pu);\n+    }\n+\n+  // [propagate_const.algorithms], specialized algorithms\n+  template <typename _Tp>\n+    constexpr void\n+    swap(propagate_const<_Tp>& __pt, propagate_const<_Tp>& __pt2)\n+      noexcept(__is_nothrow_swappable<_Tp>::value)\n+    {\n+      __pt.swap(__pt2);\n+    }\n+\n+  // [propagate_const.underlying], underlying pointer access\n+  template <typename _Tp>\n+    constexpr const _Tp&\n+    get_underlying(const propagate_const<_Tp>& __pt) noexcept\n+    {\n+      return __pt.__t;\n+    }\n+\n+  template <typename _Tp>\n+    constexpr _Tp&\n+    get_underlying(propagate_const<_Tp>& __pt) noexcept\n+    {\n+      return __pt.__t;\n+    }\n+\n+  // @} group propagate_const\n+  _GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace fundamentals_v2\n+} // namespace experimental\n+\n+// [propagate_const.hash], hash support\n+ template <typename _Tp>\n+   struct hash<experimental::propagate_const<_Tp>>\n+   {\n+     using result_type = size_t;\n+     using argument_type = experimental::propagate_const<_Tp>;\n+\n+     size_t\n+     operator()(const experimental::propagate_const<_Tp>& __t) const\n+     noexcept(noexcept(hash<_Tp>{}(get_underlying(__t))))\n+     {\n+       return hash<_Tp>{}(get_underlying(__t));\n+     }\n+   };\n+\n+ // [propagate_const.comparison_function_objects], comparison function objects\n+ template <typename _Tp>\n+   struct equal_to<experimental::propagate_const<_Tp>>\n+   {\n+     constexpr bool\n+     operator()(const experimental::propagate_const<_Tp>& __x,\n+\t        const experimental::propagate_const<_Tp>& __y) const\n+     {\n+       return equal_to<_Tp>{}(get_underlying(__x), get_underlying(__y));\n+     }\n+\n+     typedef experimental::propagate_const<_Tp> first_argument_type;\n+     typedef experimental::propagate_const<_Tp> second_argument_type;\n+     typedef bool result_type;\n+   };\n+\n+ template <typename _Tp>\n+   struct not_equal_to<experimental::propagate_const<_Tp>>\n+   {\n+     constexpr bool\n+     operator()(const experimental::propagate_const<_Tp>& __x,\n+\t\tconst experimental::propagate_const<_Tp>& __y) const\n+     {\n+       return not_equal_to<_Tp>{}(get_underlying(__x), get_underlying(__y));\n+     }\n+\n+     typedef experimental::propagate_const<_Tp> first_argument_type;\n+     typedef experimental::propagate_const<_Tp> second_argument_type;\n+     typedef bool result_type;\n+   };\n+\n+ template <typename _Tp>\n+   struct less<experimental::propagate_const<_Tp>>\n+   {\n+     constexpr bool\n+     operator()(const experimental::propagate_const<_Tp>& __x,\n+\t\tconst experimental::propagate_const<_Tp>& __y) const\n+     {\n+       return less<_Tp>{}(get_underlying(__x), get_underlying(__y));\n+     }\n+\n+     typedef experimental::propagate_const<_Tp> first_argument_type;\n+     typedef experimental::propagate_const<_Tp> second_argument_type;\n+     typedef bool result_type;\n+   };\n+\n+ template <typename _Tp>\n+   struct greater<experimental::propagate_const<_Tp>>\n+   {\n+     constexpr bool\n+     operator()(const experimental::propagate_const<_Tp>& __x,\n+\t\tconst experimental::propagate_const<_Tp>& __y) const\n+     {\n+       return greater<_Tp>{}(get_underlying(__x), get_underlying(__y));\n+     }\n+\n+     typedef experimental::propagate_const<_Tp> first_argument_type;\n+     typedef experimental::propagate_const<_Tp> second_argument_type;\n+     typedef bool result_type;\n+   };\n+\n+ template <typename _Tp>\n+   struct less_equal<experimental::propagate_const<_Tp>>\n+   {\n+     constexpr bool\n+     operator()(const experimental::propagate_const<_Tp>& __x,\n+\t        const experimental::propagate_const<_Tp>& __y) const\n+     {\n+       return less_equal<_Tp>{}(get_underlying(__x), get_underlying(__y));\n+     }\n+\n+     typedef experimental::propagate_const<_Tp> first_argument_type;\n+     typedef experimental::propagate_const<_Tp> second_argument_type;\n+     typedef bool result_type;\n+   };\n+\n+ template <typename _Tp>\n+   struct greater_equal<experimental::propagate_const<_Tp>>\n+   {\n+     constexpr bool\n+     operator()(const experimental::propagate_const<_Tp>& __x,\n+\t\tconst experimental::propagate_const<_Tp>& __y) const\n+     {\n+       return greater_equal<_Tp>{}(get_underlying(__x), get_underlying(__y));\n+     }\n+\n+     typedef experimental::propagate_const<_Tp> first_argument_type;\n+     typedef experimental::propagate_const<_Tp> second_argument_type;\n+     typedef bool result_type;\n+   };\n+} // namespace std\n+\n+#endif // C++14\n+\n+#endif // _GLIBCXX_EXPERIMENTAL_PROPAGATE_CONST"}, {"sha": "eb88ee1754f46e33a9d58ee53b656e821999e357", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/assignment/copy.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fassignment%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fassignment%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fassignment%2Fcopy.cc?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/propagate_const>\n+\n+using std::experimental::propagate_const;\n+\n+int main()\n+{\n+  int dummy;\n+  propagate_const<int*> test1;\n+  propagate_const<int*> test2;\n+  test2 = test1; // { dg-error \"deleted\" }\n+  test2 = &dummy;\n+}"}, {"sha": "73843c54f1f145e41912dc4b539eb37e1190caab", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/assignment/move.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fassignment%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fassignment%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fassignment%2Fmove.cc?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/propagate_const>\n+#include <testsuite_hooks.h>\n+#include <utility>\n+#include <memory>\n+\n+using std::experimental::propagate_const;\n+using std::unique_ptr;\n+\n+int main()\n+{\n+  const int dummy{42};\n+  propagate_const<const int*> test1;\n+  test1 = std::move(&dummy);\n+  test1 = &dummy;\n+  VERIFY(test1.get() == &dummy);\n+  propagate_const<const int*> test2;\n+  test2 = std::move(test1);\n+  VERIFY(test1.get() == &dummy);\n+  VERIFY(test2.get() == &dummy);\n+  propagate_const<const int*> test3;\n+  test3 = std::move(test2);\n+  VERIFY(test1.get() == &dummy);\n+  VERIFY(test2.get() == &dummy);\n+  VERIFY(test3.get() == &dummy);\n+  propagate_const<unique_ptr<const int>> test4;\n+  test4 = std::make_unique<int>(666);\n+}"}, {"sha": "cb553e2ed5a174576cf0234e17ebf1d4f9a495aa", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/assignment/move_neg.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fassignment%2Fmove_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fassignment%2Fmove_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fassignment%2Fmove_neg.cc?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -0,0 +1,38 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/propagate_const>\n+#include <testsuite_hooks.h>\n+#include <utility>\n+#include <memory>\n+\n+using std::experimental::propagate_const;\n+using std::unique_ptr;\n+\n+// { dg-error \"no type\" \"\" { target *-*-* } 158 }\n+\n+int main()\n+{\n+  propagate_const<unique_ptr<const int>> test5;\n+  test5 = new int{666}; // { dg-error \"no match\" }\n+  const int* dummy2 = new int{666};\n+  propagate_const<unique_ptr<const int>> test6;\n+  test6 = dummy2; // { dg-error \"no match\" }\n+}"}, {"sha": "6f7d99e368ed0a1aa419ae62852c41a5fbcc1201", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/cons/copy.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fcons%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fcons%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fcons%2Fcopy.cc?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/propagate_const>\n+\n+using std::experimental::propagate_const;\n+\n+int main()\n+{\n+  propagate_const<int*> test1;\n+  propagate_const<int*> test2{test1}; // { dg-error \"deleted\" }\n+  propagate_const<int*> test3 = test1; // { dg-error \"deleted\" }\n+}"}, {"sha": "8106f694e32846df2ee25b956c9e397e8cd02c31", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/cons/default.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fcons%2Fdefault.cc?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/propagate_const>\n+#include <testsuite_hooks.h>\n+\n+using std::experimental::propagate_const;\n+\n+int main()\n+{\n+  constexpr propagate_const<int*> test1{};\n+  static_assert(!test1.get(), \"\");\n+  propagate_const<int*> test2;\n+  VERIFY(!test2.get());\n+}"}, {"sha": "38f495a86c88f36226795fdb34177ae7f0275143", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/cons/move.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fcons%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fcons%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fcons%2Fmove.cc?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/propagate_const>\n+#include <testsuite_hooks.h>\n+#include <utility>\n+#include <memory>\n+\n+using std::experimental::propagate_const;\n+using std::unique_ptr;\n+\n+int main()\n+{\n+  const int dummy{42};\n+  propagate_const<const int*> test1{&dummy};\n+  VERIFY(test1.get() == &dummy);\n+  propagate_const<const int*> test2{std::move(test1)};\n+  VERIFY(test1.get() == &dummy);\n+  VERIFY(test2.get() == &dummy);\n+  propagate_const<const int*> test3{std::move(test2)};\n+  VERIFY(test1.get() == &dummy);\n+  VERIFY(test2.get() == &dummy);\n+  VERIFY(test3.get() == &dummy);\n+  propagate_const<unique_ptr<const int>> test4{std::make_unique<int>(666)};\n+  propagate_const<unique_ptr<const int>> test5{new int{666}};\n+  const int* dummy2 = new int{666};\n+  propagate_const<unique_ptr<const int>> test6{dummy2};\n+}"}, {"sha": "caf084ddc046b74b0c09a750a86071668742d7bb", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/cons/move_neg.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fcons%2Fmove_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fcons%2Fmove_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fcons%2Fmove_neg.cc?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/propagate_const>\n+#include <testsuite_hooks.h>\n+#include <utility>\n+#include <memory>\n+\n+using std::experimental::propagate_const;\n+using std::unique_ptr;\n+\n+// { dg-error \"no type\" \"\" { target *-*-* } 117 }\n+// { dg-error \"no type\" \"\" { target *-*-* } 124 }\n+// { dg-error \"no type\" \"\" { target *-*-* } 133 }\n+// { dg-error \"no type\" \"\" { target *-*-* } 142 }\n+\n+int main()\n+{\n+  const int dummy{42};\n+  propagate_const<const int*> test1{&dummy};\n+  propagate_const<int*> test2{&dummy}; // { dg-error \"no matching function\" }\n+  propagate_const<int*> test3{std::move(test1)}; // { dg-error \"no matching function\" }\n+  propagate_const<unique_ptr<const int>> test4 = &dummy; // { dg-error \"conversion\" }\n+  propagate_const<unique_ptr<const int>> test5 = std::move(test1); // { dg-error \"conversion\" }\n+}"}, {"sha": "41ebd2096ec3f65b92009ec3a49b5fe34cc4f8fb", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/hash/1.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fhash%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fhash%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fhash%2F1.cc?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -0,0 +1,35 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/propagate_const>\n+#include <testsuite_hooks.h>\n+\n+using std::experimental::propagate_const;\n+using std::hash;\n+\n+int main()\n+{\n+  int x{42};\n+  int y{666};\n+  propagate_const<int*> xx{&x};\n+  propagate_const<int*> yy{&y};\n+  VERIFY(hash<int*>{}(&x) == hash<propagate_const<int*>>{}(xx));\n+  VERIFY(hash<int*>{}(&y) == hash<propagate_const<int*>>{}(yy));\n+}"}, {"sha": "368b660377267daaca0018afe56b9c0ac20c0451", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/observers/1.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fobservers%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fobservers%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fobservers%2F1.cc?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -0,0 +1,65 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/propagate_const>\n+#include <testsuite_hooks.h>\n+\n+using std::experimental::propagate_const;\n+using std::hash;\n+\n+int main()\n+{\n+  int x{42};\n+  propagate_const<int*> xx{&x};\n+  VERIFY(bool(xx));\n+  propagate_const<int*> xx2{};\n+  VERIFY(!bool(xx2));\n+  struct X {int x;};\n+  X x3{42};\n+  propagate_const<X*> xx3{&x3};\n+  VERIFY(xx3->x == 42);\n+  VERIFY((*xx3).x == 42);\n+  VERIFY(xx3.get() == &x3);\n+  const propagate_const<X*> xx4{&x3};\n+  VERIFY(xx4->x == 42);\n+  VERIFY((*xx4).x == 42);\n+  VERIFY(xx4.get() == &x3);\n+  static constexpr int x4{42};\n+  constexpr propagate_const<const int*> xx5{&x4};\n+  static_assert(bool(xx5), \"\");\n+  constexpr propagate_const<const int*> xx6{};\n+  static_assert(!bool(xx6), \"\");\n+  struct X2 {int x;};\n+  static constexpr X2 x5{42};\n+  constexpr propagate_const<const X2*> xx7{&x5};\n+  static_assert(xx7->x == 42, \"\");\n+  static_assert((*xx7).x == 42, \"\");\n+  static_assert(xx7.get() == &x5, \"\");\n+  struct X3\n+  {\n+    int f() {return 42;}\n+    int f() const {return 666;}\n+  };\n+  X3 xx8;\n+  propagate_const<X3*> xx9{&xx8};\n+  const propagate_const<X3*> xx10{&xx8};\n+  VERIFY(xx9->f() == 42);\n+  VERIFY(xx10->f() == 666);\n+}"}, {"sha": "eff5df2079d23199357f1ef74e5eb8a53d8c8d04", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/relops/1.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frelops%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frelops%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frelops%2F1.cc?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -0,0 +1,67 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/propagate_const>\n+#include <testsuite_hooks.h>\n+\n+using std::experimental::propagate_const;\n+using std::hash;\n+\n+int main()\n+{\n+  int x[2];\n+  propagate_const<int*> xx1{&x[0]};\n+  propagate_const<int*> xx2{&x[1]};\n+  VERIFY(xx1 == xx1);\n+  VERIFY(xx1 != xx2);\n+  VERIFY(xx1 < xx2);\n+  VERIFY(xx2 > xx1);\n+  VERIFY(xx1 <= xx2);\n+  VERIFY(xx2 >= xx1);\n+  VERIFY(xx1 <= xx1);\n+  VERIFY(xx2 >= xx2);\n+  VERIFY(std::equal_to<propagate_const<int*>>{}(xx1, xx1));\n+  VERIFY(std::not_equal_to<propagate_const<int*>>{}(xx1, xx2));\n+  VERIFY(std::less<propagate_const<int*>>{}(xx1, xx2));\n+  VERIFY(std::greater<propagate_const<int*>>{}(xx2, xx1));\n+  VERIFY(std::less_equal<propagate_const<int*>>{}(xx1, xx2));\n+  VERIFY(std::greater_equal<propagate_const<int*>>{}(xx2, xx1));\n+  VERIFY(std::less_equal<propagate_const<int*>>{}(xx1, xx1));\n+  VERIFY(std::greater_equal<propagate_const<int*>>{}(xx2, xx2));\n+  static constexpr int x2[2]{};\n+  constexpr propagate_const<const int*> xx3{&x2[0]};\n+  constexpr propagate_const<const int*> xx4{&x2[1]};\n+  static_assert(xx3 == xx3, \"\");\n+  static_assert(xx3 != xx4, \"\");\n+  static_assert(xx3 < xx4, \"\");\n+  static_assert(xx4 > xx3, \"\");\n+  static_assert(xx3 <= xx4, \"\");\n+  static_assert(xx4 >= xx3, \"\");\n+  static_assert(xx3 <= xx3, \"\");\n+  static_assert(xx4 >= xx4, \"\");\n+  static_assert(std::equal_to<propagate_const<const int*>>{}(xx3, xx3), \"\");\n+  static_assert(std::not_equal_to<propagate_const<const int*>>{}(xx3, xx4), \"\");\n+  static_assert(std::less<propagate_const<const int*>>{}(xx3, xx4), \"\");\n+  static_assert(std::greater<propagate_const<const int*>>{}(xx4, xx3), \"\");\n+  static_assert(std::less_equal<propagate_const<const int*>>{}(xx3, xx4), \"\");\n+  static_assert(std::greater_equal<propagate_const<const int*>>{}(xx4, xx3), \"\");\n+  static_assert(std::less_equal<propagate_const<const int*>>{}(xx3, xx3), \"\");\n+  static_assert(std::greater_equal<propagate_const<const int*>>{}(xx4, xx4), \"\");\n+}"}, {"sha": "29423e87ce42edce3e8304158583f3a73af650ea", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/requirements1.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements1.cc?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013-2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/propagate_const>\n+#include <memory>\n+\n+using std::experimental::propagate_const;\n+using std::unique_ptr;\n+using std::shared_ptr;\n+\n+propagate_const<int*> test1;\n+propagate_const<const int*> test2;\n+propagate_const<unique_ptr<int>> test3;\n+propagate_const<unique_ptr<const int>> test4;\n+propagate_const<const unique_ptr<int>> test5;\n+propagate_const<const unique_ptr<const int>> test6;\n+propagate_const<shared_ptr<int>> test7;\n+propagate_const<shared_ptr<const int>> test8;\n+propagate_const<const shared_ptr<int>> test9;\n+propagate_const<const shared_ptr<const int>> test10;"}, {"sha": "5f75a311fd37418aa140076614cbe047e1022baf", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/requirements2.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements2.cc?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/propagate_const>\n+\n+using std::experimental::propagate_const;\n+\n+// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 104 }\n+// { dg-error \"not a pointer-to-object type\" \"\" { target *-*-* } 65 }\n+// { dg-error \"forming pointer to reference type\" \"\" { target *-*-* } 184 }\n+// { dg-error \"forming pointer to reference type\" \"\" { target *-*-* } 210 }\n+\n+propagate_const<void*> test1;"}, {"sha": "71d6a32c190e2fe3b1470cfbfb95067b936ec1fa", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/requirements3.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements3.cc?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/propagate_const>\n+\n+using std::experimental::propagate_const;\n+\n+// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 104 }\n+\n+propagate_const<void (*)()> test1;"}, {"sha": "942b176bd204c93ee5bb7490ea1912937f367cc9", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/requirements4.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements4.cc?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/propagate_const>\n+\n+using std::experimental::propagate_const;\n+\n+// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 104 }\n+// { dg-error \"invalid type\" \"\" { target *-*-* } 65 }\n+// { dg-error \"uninitialized reference member\" \"\" { target *-*-* } 111 }\n+\n+propagate_const<int&> test1; // { dg-error \"use of deleted function\" }"}, {"sha": "da023864f38e632cd78c6205830c7b51bbdbf1b6", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/requirements5.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements5.cc?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/propagate_const>\n+\n+using std::experimental::propagate_const;\n+\n+// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 104 }\n+\n+propagate_const<int[1]> test1;"}, {"sha": "a49b283be01b9920e9fe698872036e0e357838e2", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/swap/1.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fswap%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fswap%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fswap%2F1.cc?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/propagate_const>\n+#include <testsuite_hooks.h>\n+\n+using std::experimental::propagate_const;\n+\n+int main()\n+{\n+  int x{42};\n+  int y{666};\n+  propagate_const<int*> xx{&x};\n+  propagate_const<int*> yy{&y};\n+  VERIFY(*xx == 42);\n+  VERIFY(*yy == 666);\n+  swap(xx, yy);\n+  VERIFY(*xx == 666);\n+  VERIFY(*yy == 42);\n+}"}, {"sha": "d9362c857ea35f45a7b77c7de5c9d79fdc64b2e1", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/typedefs.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37e6813d517379a4973ec2ca441c750b6289e4b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Ftypedefs.cc?ref=e37e6813d517379a4973ec2ca441c750b6289e4b", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2014-2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/propagate_const>\n+#include <type_traits>\n+#include <stdexcept>\n+\n+template <typename T>\n+using check1_t = std::experimental::fundamentals_v2::propagate_const<T>;\n+template <typename T>\n+using check2_t\n+= typename std::experimental::fundamentals_v2::propagate_const<T>::element_type;\n+\n+static_assert(std::is_same<check2_t<int*>, int>::value,\n+\t      \"element_type must be based on the pointer\");"}]}