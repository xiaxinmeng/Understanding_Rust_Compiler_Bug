{"sha": "4565903525842e90c4fc5df51cc5dfa3cebfafbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU2NTkwMzUyNTg0MmU5MGM0ZmM1ZGY1MWNjNWRmYTNjZWJmYWZiZQ==", "commit": {"author": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-10-29T17:45:03Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-10-29T17:45:03Z"}, "message": "* init.c:\n\n\t(Raise_From_Signal_Handler, Propagate_Signal_Exception): Make arg\n\tconst.\n\t(_gnat_error_handler): Make MSG const.\n\n\t* sysdep.c: Fix localtime_r problem on LynxOS.\n\tAlso remove #elif to avoid warnings.\n\n\t* misc.c (yyparse): Don't set up and register jmpbuf; remove decls\n\tused by this.\n\n\t* decl.c (annotate_value): Make SIZE unsigned to avoid warning.\n\nFrom-SVN: r46609", "tree": {"sha": "84e043479e91b33e543375c19186765d10a6238d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84e043479e91b33e543375c19186765d10a6238d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4565903525842e90c4fc5df51cc5dfa3cebfafbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4565903525842e90c4fc5df51cc5dfa3cebfafbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4565903525842e90c4fc5df51cc5dfa3cebfafbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4565903525842e90c4fc5df51cc5dfa3cebfafbe/comments", "author": null, "committer": null, "parents": [{"sha": "4b77bfab08b2154873311f36bd3e3f1fd37944c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b77bfab08b2154873311f36bd3e3f1fd37944c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b77bfab08b2154873311f36bd3e3f1fd37944c1"}], "stats": {"total": 82, "additions": 47, "deletions": 35}, "files": [{"sha": "6e62b39ed098c91b5ce087eda87ff0fc132ba908", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4565903525842e90c4fc5df51cc5dfa3cebfafbe/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4565903525842e90c4fc5df51cc5dfa3cebfafbe/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4565903525842e90c4fc5df51cc5dfa3cebfafbe", "patch": "@@ -1,3 +1,20 @@\n+2001-10-29  Laurent Guerby  <guerby@acm.org>\n+\t\n+\t* init.c:\n+\t(Raise_From_Signal_Handler, Propagate_Signal_Exception): Make arg\n+\tconst.\n+\t(_gnat_error_handler): Make MSG const.\n+\n+2001-10-29  Richard Kenner <kenner@gnat.com>\n+\n+\t* sysdep.c: Fix localtime_r problem on LynxOS.\n+\tAlso remove #elif to avoid warnings.\n+\t\n+\t* misc.c (yyparse): Don't set up and register jmpbuf; remove decls \n+\tused by this.\n+\t\n+\t* decl.c (annotate_value): Make SIZE unsigned to avoid warning.\n+\n 2001-10-28  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* 86numaux.adb, a-tigeau.ads, a-wtgeau.ads, decl.c, exp_ch6.adb,"}, {"sha": "7c266e22c6b8b46d590b8ff346106336918ad4d0", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4565903525842e90c4fc5df51cc5dfa3cebfafbe/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4565903525842e90c4fc5df51cc5dfa3cebfafbe/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=4565903525842e90c4fc5df51cc5dfa3cebfafbe", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *                            $Revision: 1.5 $\n+ *                            $Revision$\n  *                                                                          *\n  *          Copyright (C) 1992-2001, Free Software Foundation, Inc.         *\n  *                                                                          *\n@@ -5251,7 +5251,7 @@ annotate_value (gnu_size)\n   TCode tcode;\n   Node_Ref_Or_Val ops[3];\n   int i;\n-  unsigned int size;\n+  int size;\n \n   /* If we do not return inside this switch, TCODE will be set to the\n      code to use for a Create_Node operand and LEN (set above) will be"}, {"sha": "1c8f4c7aa1722c3dc3befdccc56df1e01120abd3", "filename": "gcc/ada/init.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4565903525842e90c4fc5df51cc5dfa3cebfafbe/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4565903525842e90c4fc5df51cc5dfa3cebfafbe/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=4565903525842e90c4fc5df51cc5dfa3cebfafbe", "patch": "@@ -4,7 +4,7 @@\n  *                                                                          *\n  *                                 I N I T                                  *\n  *                                                                          *\n- *                            $Revision: 1.2 $\n+ *                            $Revision$\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n@@ -86,12 +86,12 @@ extern int    (*Check_Abort_Status) PARAMS ((void));\n #define Raise_From_Signal_Handler \\\n                       ada__exceptions__raise_from_signal_handler\n extern void   Raise_From_Signal_Handler PARAMS ((struct Exception_Data *,\n-\t\t\t\t\t\tchar *));\n+\t\t\t\t\t\tconst char *));\n \n #define Propagate_Signal_Exception \\\n                       __gnat_propagate_sig_exc\n extern void   Propagate_Signal_Exception\n-\tPARAMS ((struct Machine_State *, struct Exception_Data *, char *));\n+\tPARAMS ((struct Machine_State *, struct Exception_Data *, const char *));\n \n \n /* Copies of global values computed by the binder */\n@@ -226,7 +226,7 @@ __gnat_error_handler (sig)\n      int sig;\n {\n   struct Exception_Data *exception;\n-  char *msg;\n+  const char *msg;\n \n   switch (sig)\n     {\n@@ -557,7 +557,7 @@ __gnat_error_handler (sig)\n      int sig;\n {\n   struct Exception_Data *exception;\n-  char *msg;\n+  const char *msg;\n   static int recurse = 0;\n \n   struct sigcontext *info"}, {"sha": "edd1d2d2c42522b8889b8e3760dadba1990d8951", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4565903525842e90c4fc5df51cc5dfa3cebfafbe/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4565903525842e90c4fc5df51cc5dfa3cebfafbe/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=4565903525842e90c4fc5df51cc5dfa3cebfafbe", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                           C Implementation File                          *\n  *                                                                          *\n- *                             $Revision: 1.5 $\n+ *                             $Revision$\n  *                                                                          *\n  *          Copyright (C) 1992-2001 Free Software Foundation, Inc.          *\n  *                                                                          *\n@@ -154,9 +154,6 @@ static char *convert_ada_name_to_qualified_name PARAMS ((char *));\n /* For most front-ends, this is the parser for the language.  For us, we\n    process the GNAT tree.  */\n \n-#define Set_Jmpbuf_Address system__soft_links__set_jmpbuf_address_soft\n-extern void Set_Jmpbuf_Address (void *);\n-\n /* Declare functions we use as part of startup.  */\n extern void __gnat_initialize\tPARAMS((void));\n extern void adainit\t\tPARAMS((void));\n@@ -165,34 +162,17 @@ extern void _ada_gnat1drv\tPARAMS((void));\n int\n yyparse ()\n {\n-  /* Make up what Gigi uses as a jmpbuf.  */\n-  size_t jmpbuf[10];\n-\n   /* call the target specific initializations */\n   __gnat_initialize();\n \n   /* Call the front-end elaboration procedures */\n   adainit ();\n \n-  /* Set up to catch unhandled exceptions.  */\n-  if (__builtin_setjmp (jmpbuf))\n-    {\n-      Set_Jmpbuf_Address (0);\n-      abort ();\n-    }\n-\n-  /* This is only really needed in longjmp/setjmp mode exceptions\n-     but we don't know any easy way to tell what mode the host is\n-     compiled in, and it is harmless to do it unconditionally */\n-\n-  Set_Jmpbuf_Address (jmpbuf);\n-\n   immediate_size_expand = 1;\n \n   /* Call the front end */\n   _ada_gnat1drv ();\n \n-  Set_Jmpbuf_Address (0);\n   return 0;\n }\n "}, {"sha": "3ae033aeeeb0a6dd369ac3ed4c6780f5c11e2b05", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4565903525842e90c4fc5df51cc5dfa3cebfafbe/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4565903525842e90c4fc5df51cc5dfa3cebfafbe/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=4565903525842e90c4fc5df51cc5dfa3cebfafbe", "patch": "@@ -295,10 +295,12 @@ __gnat_ttyname (filedes)\n   || defined (__MACHTEN__)\n #include <termios.h>\n \n-#elif defined (VMS)\n+#else\n+#if defined (VMS)\n extern char *decc$ga_stdscr;\n static int initted = 0;\n #endif\n+#endif\n \n /* Implements the common processing for getc_immediate and\n    getc_immediate_nowait. */\n@@ -422,7 +424,8 @@ getc_immediate_common (stream, ch, end_of_file, avail, waiting)\n     }\n \n   else\n-#elif defined (VMS)\n+#else\n+#if defined (VMS)\n   int fd = fileno (stream);\n \n   if (isatty (fd))\n@@ -444,7 +447,8 @@ getc_immediate_common (stream, ch, end_of_file, avail, waiting)\n       decc$bsd_nocbreak ();\n     }\n   else\n-#elif defined (__MINGW32__)\n+#else\n+#if defined (__MINGW32__)\n   int fd = fileno (stream);\n   int char_waiting;\n   int eot_ch = 4; /* Ctrl-D */\n@@ -486,6 +490,8 @@ getc_immediate_common (stream, ch, end_of_file, avail, waiting)\n \t}\n     }\n   else\n+#endif\n+#endif\n #endif\n     {\n       /* If we're not on a terminal, then we don't need any fancy processing.\n@@ -571,9 +577,14 @@ __gnat_localtime_r (timer, tp)\n   return tp;\n }\n \n-#elif defined (__Lynx__)\n+#else\n+#if defined (__Lynx__) && defined (___THREADS_POSIX4ad4__)\n \n-/* LynxOS provides a non standard localtime_r */\n+/* As of LynxOS 3.1.0a patch level 040, LynuxWorks changes the\n+   prototype to the C library function localtime_r from the POSIX.4\n+   Draft 9 to the POSIX 1.c version. Before this change the following\n+   spec is required. Only use when ___THREADS_POSIX4ad4__ is defined,\n+   the Lynx convention when building against the legacy API. */\n \n extern struct tm *__gnat_localtime_r PARAMS ((const time_t *, struct tm *));\n \n@@ -582,10 +593,12 @@ __gnat_localtime_r (timer, tp)\n      const time_t *timer;\n      struct tm *tp;\n {\n-  return localtime_r (tp, timer);\n+  localtime_r (tp, timer);\n+  return NULL;\n }\n \n-#elif defined (VMS) || defined (__MINGW32__)\n+#else\n+#if defined (VMS) || defined (__MINGW32__)\n \n /* __gnat_localtime_r is not needed on NT and VMS */\n \n@@ -603,3 +616,5 @@ __gnat_localtime_r (timer, tp)\n   return (struct tm *) localtime_r (timer, tp);\n }\n #endif\n+#endif\n+#endif"}]}