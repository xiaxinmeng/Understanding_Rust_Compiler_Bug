{"sha": "616aeba2bb37e55c24cc65a861e12c08e18e3943", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE2YWViYTJiYjM3ZTU1YzI0Y2M2NWE4NjFlMTJjMDhlMThlMzk0Mw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-09-10T23:10:05Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-09-10T23:10:05Z"}, "message": "c-tree.h (struct c_declspecs): Remove typedef_decl.\n\n\t* c-tree.h (struct c_declspecs): Remove typedef_decl.  Add\n\ttypedef_p and typedef_signed_p.\n\t* c-decl.c (shadow_tag_warned): Check typedef_p, not typedef_decl.\n\t(grokdeclarator): Don't use typedef_decl for warn_deprecated_use.\n\tCheck typedef_p and typedef_signed_p, not typedef_decl.\n\t(grokfield): Check typedef_p, not typedef_decl.\n\t(build_null_declspecs): Initialize typedef_p and typedef_signed_p,\n\tnot typedef_decl.\n\t(declspecs_add_type): Set typedef_p and typedef_signed_p, not\n\ttypedef_decl.\n\ntestsuite:\n\t* gcc.dg/bitfld-9.c: New test.\n\nFrom-SVN: r87326", "tree": {"sha": "ec0adb6f879751a79c5c8f898f00474f72486beb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec0adb6f879751a79c5c8f898f00474f72486beb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/616aeba2bb37e55c24cc65a861e12c08e18e3943", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616aeba2bb37e55c24cc65a861e12c08e18e3943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/616aeba2bb37e55c24cc65a861e12c08e18e3943", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616aeba2bb37e55c24cc65a861e12c08e18e3943/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8508d5144a604c6ebb11b56442d8b8738567b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8508d5144a604c6ebb11b56442d8b8738567b3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8508d5144a604c6ebb11b56442d8b8738567b3e"}], "stats": {"total": 167, "additions": 152, "deletions": 15}, "files": [{"sha": "4e691a19a49f3c17e143d7eea4580f37537255a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/616aeba2bb37e55c24cc65a861e12c08e18e3943/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/616aeba2bb37e55c24cc65a861e12c08e18e3943/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=616aeba2bb37e55c24cc65a861e12c08e18e3943", "patch": "@@ -1,3 +1,16 @@\n+2004-09-11  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* c-tree.h (struct c_declspecs): Remove typedef_decl.  Add\n+\ttypedef_p and typedef_signed_p.\n+\t* c-decl.c (shadow_tag_warned): Check typedef_p, not typedef_decl.\n+\t(grokdeclarator): Don't use typedef_decl for warn_deprecated_use.\n+\tCheck typedef_p and typedef_signed_p, not typedef_decl.\n+\t(grokfield): Check typedef_p, not typedef_decl.\n+\t(build_null_declspecs): Initialize typedef_p and typedef_signed_p,\n+\tnot typedef_decl.\n+\t(declspecs_add_type): Set typedef_p and typedef_signed_p, not\n+\ttypedef_decl.\n+\n 2004-09-10  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* doc/tm.texi, doc/tree-ssa.texi: Fix typos."}, {"sha": "dd0e42f0ab2421f5cdf6b7f461f1af9d77a37dde", "filename": "gcc/c-decl.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/616aeba2bb37e55c24cc65a861e12c08e18e3943/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/616aeba2bb37e55c24cc65a861e12c08e18e3943/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=616aeba2bb37e55c24cc65a861e12c08e18e3943", "patch": "@@ -2681,7 +2681,7 @@ shadow_tag_warned (const struct c_declspecs *declspecs, int warned)\n \n   pending_invalid_xref = 0;\n \n-  if (declspecs->type && !declspecs->typedef_decl)\n+  if (declspecs->type && !declspecs->typedef_p)\n     {\n       tree value = declspecs->type;\n       enum tree_code code = TREE_CODE (value);\n@@ -2724,7 +2724,7 @@ shadow_tag_warned (const struct c_declspecs *declspecs, int warned)\n \t    }\n \t}\n     }\n-  else if (warned != 1 && !in_system_header && declspecs->typedef_decl)\n+  else if (warned != 1 && !in_system_header && declspecs->typedef_p)\n     {\n       pedwarn (\"useless type name in empty declaration\");\n       warned = 1;\n@@ -3666,9 +3666,7 @@ grokdeclarator (const struct c_declarator *declarator,\n     decl_context = PARM;\n \n   if (declspecs->deprecated_p && deprecated_state != DEPRECATED_SUPPRESS)\n-    warn_deprecated_use (declspecs->typedef_decl\n-\t\t\t ? declspecs->typedef_decl\n-\t\t\t : declspecs->type);\n+    warn_deprecated_use (declspecs->type);\n \n   typedef_type = type;\n   if (type)\n@@ -3782,8 +3780,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t      || declspecs->explicit_char_p\n \t      /* A typedef for plain `int' without `signed'\n \t\t can be controlled just like plain `int'.  */\n-\t      || ! (declspecs->typedef_decl != 0\n-\t\t    && C_TYPEDEF_EXPLICITLY_SIGNED (declspecs->typedef_decl)))\n+\t      || !declspecs->typedef_signed_p)\n \t  && TREE_CODE (type) != ENUMERAL_TYPE\n \t  && !(specbits & 1 << (int) RID_SIGNED)))\n     {\n@@ -3795,7 +3792,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \ttype = short_unsigned_type_node;\n       else if (type == char_type_node)\n \ttype = unsigned_char_type_node;\n-      else if (declspecs->typedef_decl)\n+      else if (declspecs->typedef_p)\n \ttype = c_common_unsigned_type (type);\n       else\n \ttype = unsigned_type_node;\n@@ -4352,8 +4349,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \ttype = c_build_qualified_type (type, type_quals);\n       decl = build_decl (TYPE_DECL, declarator->u.id, type);\n       if ((specbits & (1 << (int) RID_SIGNED))\n-\t  || (declspecs->typedef_decl\n-\t      && C_TYPEDEF_EXPLICITLY_SIGNED (declspecs->typedef_decl)))\n+\t  || declspecs->typedef_signed_p)\n \tC_TYPEDEF_EXPLICITLY_SIGNED (decl) = 1;\n       decl_attributes (&decl, returned_attrs, 0);\n       return decl;\n@@ -5099,7 +5095,7 @@ grokfield (struct c_declarator *declarator, struct c_declspecs *declspecs,\n       if (type\n \t  && (TREE_CODE (type) == RECORD_TYPE\n \t      || TREE_CODE (type) == UNION_TYPE)\n-\t  && (flag_ms_extensions || !declspecs->typedef_decl))\n+\t  && (flag_ms_extensions || !declspecs->typedef_p))\n \t{\n \t  if (flag_ms_extensions)\n \t    ; /* ok */\n@@ -6728,11 +6724,12 @@ build_null_declspecs (void)\n {\n   struct c_declspecs *ret = XOBNEW (&parser_obstack, struct c_declspecs);\n   ret->type = 0;\n-  ret->typedef_decl = 0;\n   ret->decl_attr = 0;\n   ret->attrs = 0;\n   ret->specbits = 0;\n   ret->non_sc_seen_p = false;\n+  ret->typedef_p = false;\n+  ret->typedef_signed_p = false;\n   ret->deprecated_p = false;\n   ret->explicit_int_p = false;\n   ret->explicit_char_p = false;\n@@ -6807,7 +6804,8 @@ declspecs_add_type (struct c_declspecs *specs, tree type)\n \t{\n \t  specs->type = TREE_TYPE (type);\n \t  specs->decl_attr = DECL_ATTRIBUTES (type);\n-\t  specs->typedef_decl = type;\n+\t  specs->typedef_p = true;\n+\t  specs->typedef_signed_p = C_TYPEDEF_EXPLICITLY_SIGNED (type);\n \t}\n     }\n   /* Built-in types come as identifiers.  */"}, {"sha": "dde8dc3249d01b0ed87726c203053f4abfc0693f", "filename": "gcc/c-tree.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/616aeba2bb37e55c24cc65a861e12c08e18e3943/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/616aeba2bb37e55c24cc65a861e12c08e18e3943/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=616aeba2bb37e55c24cc65a861e12c08e18e3943", "patch": "@@ -136,8 +136,6 @@ struct c_declspecs {\n   /* The type specified, not reflecting modifiers such as \"short\" and\n      \"unsigned\", or NULL_TREE if none.  */\n   tree type;\n-  /* If the type was specified with a typedef, that typedef decl.  */\n-  tree typedef_decl;\n   /* The attributes from a typedef decl.  */\n   tree decl_attr;\n   /* When parsing, the attributes.  Outside the parser, this will be\n@@ -153,6 +151,11 @@ struct c_declspecs {\n      specifiers to be handled separately from storage class\n      specifiers.)  */\n   BOOL_BITFIELD non_sc_seen_p : 1;\n+  /* Whether the type is specified by a typedef.  */\n+  BOOL_BITFIELD typedef_p : 1;\n+  /* Whether the type is specified by a typedef whose type is\n+     explicitly \"signed\".  */\n+  BOOL_BITFIELD typedef_signed_p : 1;\n   /* Whether the specifiers include a deprecated typedef.  */\n   BOOL_BITFIELD deprecated_p : 1;\n   /* Whether \"int\" was explicitly specified.  */"}, {"sha": "056073cce16048acb324e31cfc37ae6e3dce3527", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/616aeba2bb37e55c24cc65a861e12c08e18e3943/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/616aeba2bb37e55c24cc65a861e12c08e18e3943/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=616aeba2bb37e55c24cc65a861e12c08e18e3943", "patch": "@@ -1,3 +1,7 @@\n+2004-09-11  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* gcc.dg/bitfld-9.c: New test.\n+\n 2004-09-10  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* gcc.c-torture/execute/ieee/acc1.c: New test."}, {"sha": "d6ae0ac31e862e3e48bd5e875da732d929c36177", "filename": "gcc/testsuite/gcc.dg/bitfld-9.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/616aeba2bb37e55c24cc65a861e12c08e18e3943/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/616aeba2bb37e55c24cc65a861e12c08e18e3943/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-9.c?ref=616aeba2bb37e55c24cc65a861e12c08e18e3943", "patch": "@@ -0,0 +1,119 @@\n+/* Test -funsigned-bitfields works.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do run } */\n+/* { dg-options \"-funsigned-bitfields -fsigned-char\" } */\n+\n+typedef char c;\n+typedef signed char sc;\n+typedef unsigned char uc;\n+typedef short s;\n+typedef signed short ss;\n+typedef unsigned short us;\n+typedef n;\n+typedef int i;\n+typedef signed int si;\n+typedef unsigned int ui;\n+typedef long l;\n+typedef signed long sl;\n+typedef unsigned long ul;\n+typedef long long ll;\n+typedef signed long long sll;\n+typedef unsigned long long ull;\n+\n+typedef c ct;\n+typedef sc sct;\n+typedef uc uct;\n+typedef s st;\n+typedef ss sst;\n+typedef us ust;\n+typedef n nt;\n+typedef i it;\n+typedef si sit;\n+typedef ui uit;\n+typedef l lt;\n+typedef sl slt;\n+typedef ul ult;\n+typedef ll llt;\n+typedef sll sllt;\n+typedef ull ullt;\n+\n+struct foo {\n+  char char0 : 1;\n+  c char1 : 1;\n+  ct char2 : 1;\n+  signed char schar0 : 1;\n+  sc schar1 : 1;\n+  sct schar2 : 1;\n+  unsigned char uchar0 : 1;\n+  uc uchar1 : 1;\n+  uct uchar2 : 1;\n+  short short0 : 1;\n+  s short1 : 1;\n+  st short2 : 1;\n+  signed short sshort0 : 1;\n+  ss sshort1 : 1;\n+  sst sshort2 : 1;\n+  unsigned short ushort0 : 1;\n+  us ushort1 : 1;\n+  ust ushort2 : 1;\n+  __attribute__((dummy)) int0 : 1; /* { dg-warning \"attribute directive ignored\" } */\n+  n int1 : 1;\n+  nt int2 : 1;\n+  int int3 : 1;\n+  i int4 : 1;\n+  it int5 : 1;\n+  signed int sint0 : 1;\n+  si sint1 : 1;\n+  sit sint2 : 1;\n+  unsigned int uint0 : 1;\n+  ui uint1 : 1;\n+  uit uint2 : 1;\n+  long long0 : 1;\n+  l long1 : 1;\n+  lt long2 : 1;\n+  signed long slong0 : 1;\n+  sl slong1 : 1;\n+  slt slong2 : 1;\n+  unsigned long ulong0 : 1;\n+  ul ulong1 : 1;\n+  ult ulong2 : 1;\n+  long long llong0 : 1;\n+  ll llong1 : 1;\n+  llt llong2 : 1;\n+  signed long long sllong0 : 1;\n+  sll sllong1 : 1;\n+  sllt sllong2 : 1;\n+  unsigned long long ullong0 : 1;\n+  ull ullong1 : 1;\n+  ullt ullong2 : 1;\n+};\n+\n+struct foo x;\n+\n+extern void abort (void);\n+extern void exit (int);\n+extern void *memset (void *, int, __SIZE_TYPE__);\n+\n+int\n+main (void)\n+{\n+  memset (&x, (unsigned char)-1, sizeof(x));\n+  if (x.char0 != 1 || x.char1 != 1 || x.char2 != 1\n+      || x.schar0 != -1 || x.schar1 != -1 || x.schar2 != -1\n+      || x.uchar0 != 1 || x.uchar1 != 1 || x.uchar2 != 1\n+      || x.short0 != 1 || x.short1 != 1 || x.short2 != 1\n+      || x.sshort0 != -1 || x.sshort1 != -1 || x.sshort2 != -1\n+      || x.ushort0 != 1 || x.ushort1 != 1 || x.ushort2 != 1\n+      || x.int0 != 1 || x.int1 != 1 || x.int2 != 1\n+      || x.int3 != 1 || x.int4 != 1 || x.int5 != 1\n+      || x.sint0 != -1 || x.sint1 != -1 || x.sint2 != -1\n+      || x.uint0 != 1 || x.uint1 != 1 || x.uint2 != 1\n+      || x.long0 != 1 || x.long1 != 1 || x.long2 != 1\n+      || x.slong0 != -1 || x.slong1 != -1 || x.slong2 != -1\n+      || x.ulong0 != 1 || x.ulong1 != 1 || x.ulong2 != 1\n+      || x.llong0 != 1 || x.llong1 != 1 || x.llong2 != 1\n+      || x.sllong0 != -1 || x.sllong1 != -1 || x.sllong2 != -1\n+      || x.ullong0 != 1 || x.ullong1 != 1 || x.ullong2 != 1)\n+    abort ();\n+  exit (0);\n+}"}]}