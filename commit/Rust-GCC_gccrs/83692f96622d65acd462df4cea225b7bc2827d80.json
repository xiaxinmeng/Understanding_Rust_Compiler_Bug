{"sha": "83692f96622d65acd462df4cea225b7bc2827d80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM2OTJmOTY2MjJkNjVhY2Q0NjJkZjRjZWEyMjViN2JjMjgyN2Q4MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-03-02T07:53:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-03-02T07:53:42Z"}, "message": "re PR tree-optimization/79777 (ICE on -Os and above in on aarch64-linux-gnu (internal compiler error: in VN_INFO_GET, at tree-ssa-sccvn.c:407 }))\n\n2017-03-02  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/79777\n\t* tree-ssa-pre.c (eliminate_insert): Give up if we simplify\n\tthe to insert expression to sth existing.\n\n\t* gcc.dg/torture/pr79777.c: New testcase.\n\nFrom-SVN: r245830", "tree": {"sha": "bd874e6e28c52071e34efd25584d4f63a0a4dbd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd874e6e28c52071e34efd25584d4f63a0a4dbd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83692f96622d65acd462df4cea225b7bc2827d80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83692f96622d65acd462df4cea225b7bc2827d80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83692f96622d65acd462df4cea225b7bc2827d80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83692f96622d65acd462df4cea225b7bc2827d80/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f"}], "stats": {"total": 88, "additions": 84, "deletions": 4}, "files": [{"sha": "530acbb9ba31d66ad2eb1797a1b98699bb4bdea5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83692f96622d65acd462df4cea225b7bc2827d80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83692f96622d65acd462df4cea225b7bc2827d80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83692f96622d65acd462df4cea225b7bc2827d80", "patch": "@@ -1,3 +1,9 @@\n+2017-03-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79777\n+\t* tree-ssa-pre.c (eliminate_insert): Give up if we simplify\n+\tthe to insert expression to sth existing.\n+\n 2017-03-01  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/79692"}, {"sha": "8d926096459667447e58b973cfa6b8c09e83c102", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83692f96622d65acd462df4cea225b7bc2827d80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83692f96622d65acd462df4cea225b7bc2827d80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83692f96622d65acd462df4cea225b7bc2827d80", "patch": "@@ -1,3 +1,8 @@\n+2017-03-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79777\n+\t* gcc.dg/torture/pr79777.c: New testcase.\n+\n 2017-03-01  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/79692"}, {"sha": "eb1bec776e234fb398dde9e33a3b4b80bf8b6077", "filename": "gcc/testsuite/gcc.dg/torture/pr79777.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83692f96622d65acd462df4cea225b7bc2827d80/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79777.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83692f96622d65acd462df4cea225b7bc2827d80/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79777.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79777.c?ref=83692f96622d65acd462df4cea225b7bc2827d80", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+\n+typedef unsigned short __u16;\n+typedef unsigned int __u32;\n+typedef unsigned char u8;\n+typedef unsigned int u32;\n+typedef __u16 __le16;\n+typedef __u32 __le32;\n+typedef u32 secno;\n+struct bplus_internal_node {\n+    __le32 file_secno;\n+    __le32 down;\n+};\n+struct bplus_header {\n+    u8 n_used_nodes;\n+    __le16 first_free;\n+    union {\n+\tstruct bplus_internal_node internal[0];\n+    }\n+    u;\n+};\n+\n+__u16 __fswab16(__u16 val);\n+__u32 __fswab32(__u32 val);\n+void hpfs_ea_remove (__u32);\n+\n+void hpfs_truncate_btree(secno f, int fno, unsigned secs, struct bplus_header *btree)\n+{\n+  int i, j;\n+  for (i = 0; i < btree->n_used_nodes; i++)\n+    if ((__builtin_constant_p((__u32)(( __u32)(__le32)(btree->u.internal[i].file_secno))) ? ((__u32)( (((__u32)(( __u32)(__le32)(btree->u.internal[i].file_secno)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__le32)(btree->u.internal[i].file_secno)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__le32)(btree->u.internal[i].file_secno)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__le32)(btree->u.internal[i].file_secno)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__le32)(btree->u.internal[i].file_secno))) >= secs) goto f;\n+  return;\n+f:\n+  for (j = i + 1; j < btree->n_used_nodes; j++)\n+    hpfs_ea_remove((__builtin_constant_p((__u32)(( __u32)(__le32)(btree->u.internal[j].down))) ? ((__u32)( (((__u32)(( __u32)(__le32)(btree->u.internal[j].down)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__le32)(btree->u.internal[j].down)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__le32)(btree->u.internal[j].down)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__le32)(btree->u.internal[j].down)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__le32)(btree->u.internal[j].down))));\n+  btree->n_used_nodes = i + 1;\n+  btree->first_free = (( __le16)(__builtin_constant_p((__u16)((8 + 8 * btree->n_used_nodes))) ? ((__u16)( (((__u16)((8 + 8 * btree->n_used_nodes)) & (__u16)0x00ffU) << 8) | (((__u16)((8 + 8 * btree->n_used_nodes)) & (__u16)0xff00U) >> 8))) : __fswab16((8 + 8 * btree->n_used_nodes))));\n+}"}, {"sha": "ff59d53667885bea3abc0bcc4cd9f44417b86e4c", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83692f96622d65acd462df4cea225b7bc2827d80/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83692f96622d65acd462df4cea225b7bc2827d80/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=83692f96622d65acd462df4cea225b7bc2827d80", "patch": "@@ -4133,11 +4133,42 @@ eliminate_insert (gimple_stmt_iterator *gsi, tree val)\n   else\n     res = gimple_build (&stmts, gimple_assign_rhs_code (stmt),\n \t\t\tTREE_TYPE (val), leader);\n-  gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n-  VN_INFO_GET (res)->valnum = val;\n+  if (TREE_CODE (res) != SSA_NAME\n+      || SSA_NAME_IS_DEFAULT_DEF (res)\n+      || gimple_bb (SSA_NAME_DEF_STMT (res)))\n+    {\n+      gimple_seq_discard (stmts);\n+\n+      /* During propagation we have to treat SSA info conservatively\n+         and thus we can end up simplifying the inserted expression\n+\t at elimination time to sth not defined in stmts.  */\n+      /* But then this is a redundancy we failed to detect.  Which means\n+         res now has two values.  That doesn't play well with how\n+\t we track availability here, so give up.  */\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  if (TREE_CODE (res) == SSA_NAME)\n+\t    res = eliminate_avail (res);\n+\t  if (res)\n+\t    {\n+\t      fprintf (dump_file, \"Failed to insert expression for value \");\n+\t      print_generic_expr (dump_file, val, 0);\n+\t      fprintf (dump_file, \" which is really fully redundant to \");\n+\t      print_generic_expr (dump_file, res, 0);\n+\t      fprintf (dump_file, \"\\n\");\n+\t    }\n+\t}\n \n-  if (TREE_CODE (leader) == SSA_NAME)\n-    gimple_set_plf (SSA_NAME_DEF_STMT (leader), NECESSARY, true);\n+      return NULL_TREE;\n+    }\n+  else\n+    {\n+      gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+      VN_INFO_GET (res)->valnum = val;\n+\n+      if (TREE_CODE (leader) == SSA_NAME)\n+\tgimple_set_plf (SSA_NAME_DEF_STMT (leader), NECESSARY, true);\n+    }\n \n   pre_stats.insertions++;\n   if (dump_file && (dump_flags & TDF_DETAILS))"}]}