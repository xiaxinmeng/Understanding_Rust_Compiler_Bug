{"sha": "3e3b8d63e54773e0f5add898ad55acf1be22d950", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UzYjhkNjNlNTQ3NzNlMGY1YWRkODk4YWQ1NWFjZjFiZTIyZDk1MA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-10-02T12:56:17Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-10-02T12:56:17Z"}, "message": "re PR c/64249 (Missing warning for if (A) else if (A))\n\n\tPR c/64249\n\t* c-common.c (warn_duplicated_cond_add_or_warn): New function.\n\t* c-common.h (warn_duplicated_cond_add_or_warn): Declare.\n\t* c.opt (Wduplicated-cond): New option.\n\n\t* c-parser.c (c_parser_statement_after_labels): Add CHAIN parameter\n\tand pass it down to c_parser_if_statement.\n\t(c_parser_else_body): Add CHAIN parameter and pass it down to\n\tc_parser_statement_after_labels.\n\t(c_parser_if_statement): Add CHAIN parameter.  Add code to warn about\n\tduplicated if-else-if conditions.\n\n\t* parser.c (cp_parser_statement): Add CHAIN parameter and pass it\n\tdown to cp_parser_selection_statement.\n\t(cp_parser_selection_statement): Add CHAIN parameter.  Add code to\n\twarn about duplicated if-else-if conditions.\n\t(cp_parser_implicitly_scoped_statement): Add CHAIN parameter and pass\n\tit down to cp_parser_statement.\n\n\t* doc/invoke.texi: Document -Wduplicated-cond.\n\t* Makefile.in (insn-latencytab.o): Use -Wno-duplicated-cond.\n\t(insn-dfatab.o): Likewise.\n\t* genemit.c (gen_exp): Rewrite condition to avoid -Wduplicated-cond\n\twarning.\n\n\t* c-c++-common/Wduplicated-cond-1.c: New test.\n\t* c-c++-common/Wduplicated-cond-2.c: New test.\n\t* c-c++-common/Wduplicated-cond-3.c: New test.\n\t* c-c++-common/Wduplicated-cond-4.c: New test.\n\t* c-c++-common/Wmisleading-indentation.c (fn_37): Avoid\n\t-Wduplicated-cond warning.\n\nFrom-SVN: r228388", "tree": {"sha": "2068f8ebdec3daf3c4cd446ea0c01a7dfe75c37d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2068f8ebdec3daf3c4cd446ea0c01a7dfe75c37d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e3b8d63e54773e0f5add898ad55acf1be22d950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e3b8d63e54773e0f5add898ad55acf1be22d950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e3b8d63e54773e0f5add898ad55acf1be22d950", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e3b8d63e54773e0f5add898ad55acf1be22d950/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f6ca79c15711e28ea7a6330fc9ac017077fbaad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6ca79c15711e28ea7a6330fc9ac017077fbaad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f6ca79c15711e28ea7a6330fc9ac017077fbaad"}], "stats": {"total": 887, "additions": 858, "deletions": 29}, "files": [{"sha": "ee1c217d083c2b5a1203333ee1a3a71868a1a164", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e3b8d63e54773e0f5add898ad55acf1be22d950", "patch": "@@ -1,3 +1,12 @@\n+2015-10-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/64249\n+\t* doc/invoke.texi: Document -Wduplicated-cond.\n+\t* Makefile.in (insn-latencytab.o): Use -Wno-duplicated-cond.\n+\t(insn-dfatab.o): Likewise.\n+\t* genemit.c (gen_exp): Rewrite condition to avoid -Wduplicated-cond\n+\twarning.\n+\n 2015-10-02  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/sh.md: Add new unnamed split pattern to handle movt-movt"}, {"sha": "b22b5aba0ca66c023c808d4de6db1df983c5b1e4", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3e3b8d63e54773e0f5add898ad55acf1be22d950", "patch": "@@ -217,6 +217,8 @@ libgcov-merge-tool.o-warn = -Wno-error\n gimple-match.o-warn = -Wno-unused\n generic-match.o-warn = -Wno-unused\n dfp.o-warn = -Wno-strict-aliasing\n+insn-latencytab.o-warn = -Wno-duplicated-cond\n+insn-dfatab.o-warn = -Wno-duplicated-cond\n \n # All warnings have to be shut off in stage1 if the compiler used then\n # isn't gcc; configure determines that.  WARN_CFLAGS will be either"}, {"sha": "8ab8964a8c535c5073a1dda44ce1c9f52ab8790f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3e3b8d63e54773e0f5add898ad55acf1be22d950", "patch": "@@ -1,3 +1,10 @@\n+2015-10-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/64249\n+\t* c-common.c (warn_duplicated_cond_add_or_warn): New function.\n+\t* c-common.h (warn_duplicated_cond_add_or_warn): Declare.\n+\t* c.opt (Wduplicated-cond): New option.\n+\n 2015-10-01  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c.opt (std=c11): Do not describe as experimental."}, {"sha": "f38378d69dd1be998e32674891371caebe16a5d1", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=3e3b8d63e54773e0f5add898ad55acf1be22d950", "patch": "@@ -12921,4 +12921,45 @@ reject_gcc_builtin (const_tree expr, location_t loc /* = UNKNOWN_LOCATION */)\n   return false;\n }\n \n+/* If we're creating an if-else-if condition chain, first see if we\n+   already have this COND in the CHAIN.  If so, warn and don't add COND\n+   into the vector, otherwise add the COND there.  LOC is the location\n+   of COND.  */\n+\n+void\n+warn_duplicated_cond_add_or_warn (location_t loc, tree cond, vec<tree> **chain)\n+{\n+  /* No chain has been created yet.  Do nothing.  */\n+  if (*chain == NULL)\n+    return;\n+\n+  if (TREE_SIDE_EFFECTS (cond))\n+    {\n+      /* Uh-oh!  This condition has a side-effect, thus invalidates\n+\t the whole chain.  */\n+      delete *chain;\n+      *chain = NULL;\n+      return;\n+    }\n+\n+  unsigned int ix;\n+  tree t;\n+  bool found = false;\n+  FOR_EACH_VEC_ELT (**chain, ix, t)\n+    if (operand_equal_p (cond, t, 0))\n+      {\n+\tif (warning_at (loc, OPT_Wduplicated_cond,\n+\t\t\t\"duplicated %<if%> condition\"))\n+\t  inform (EXPR_LOCATION (t), \"previously used here\");\n+\tfound = true;\n+\tbreak;\n+      }\n+\n+  if (!found\n+      && !CONSTANT_CLASS_P (cond)\n+      /* Don't infinitely grow the chain.  */\n+      && (*chain)->length () < 512)\n+    (*chain)->safe_push (cond);\n+}\n+\n #include \"gt-c-family-c-common.h\""}, {"sha": "ff4530f630e8003675b3ba37e8478c0425eb8835", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=3e3b8d63e54773e0f5add898ad55acf1be22d950", "patch": "@@ -1451,5 +1451,6 @@ extern tree cilk_for_number_of_iterations (tree);\n extern bool check_no_cilk (tree, const char *, const char *,\n \t\t           location_t loc = UNKNOWN_LOCATION);\n extern bool reject_gcc_builtin (const_tree, location_t = UNKNOWN_LOCATION);\n+extern void warn_duplicated_cond_add_or_warn (location_t, tree, vec<tree> **);\n \n #endif /* ! GCC_C_COMMON_H */"}, {"sha": "a79b9f1a39f90d4684db3061c87a4ca66f0714f3", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=3e3b8d63e54773e0f5add898ad55acf1be22d950", "patch": "@@ -406,6 +406,10 @@ Wdiv-by-zero\n C ObjC C++ ObjC++ Var(warn_div_by_zero) Init(1) Warning\n Warn about compile-time integer division by zero\n \n+Wduplicated-cond\n+C ObjC C++ ObjC++ Var(warn_duplicated_cond) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+Warn about duplicated conditions in an if-else-if chain\n+\n Weffc++\n C++ ObjC++ Var(warn_ecpp) Warning\n Warn about violations of Effective C++ style rules"}, {"sha": "7c0051f20f63294e40392c455e15120ed4e10ba6", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=3e3b8d63e54773e0f5add898ad55acf1be22d950", "patch": "@@ -1,3 +1,13 @@\n+2015-10-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/64249\n+\t* c-parser.c (c_parser_statement_after_labels): Add CHAIN parameter\n+\tand pass it down to c_parser_if_statement.\n+\t(c_parser_else_body): Add CHAIN parameter and pass it down to\n+\tc_parser_statement_after_labels.\n+\t(c_parser_if_statement): Add CHAIN parameter.  Add code to warn about\n+\tduplicated if-else-if conditions.\n+\n 2015-10-01  Marek Polacek  <polacek@redhat.com>\n \n \t* c-typeck.c (convert_for_assignment): Improve commentary."}, {"sha": "00fa2386c46d58034954574c1e1fe12d181b6588", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 48, "deletions": 12, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=3e3b8d63e54773e0f5add898ad55acf1be22d950", "patch": "@@ -1198,8 +1198,8 @@ static tree c_parser_compound_statement (c_parser *);\n static void c_parser_compound_statement_nostart (c_parser *);\n static void c_parser_label (c_parser *);\n static void c_parser_statement (c_parser *);\n-static void c_parser_statement_after_labels (c_parser *);\n-static void c_parser_if_statement (c_parser *);\n+static void c_parser_statement_after_labels (c_parser *, vec<tree> * = NULL);\n+static void c_parser_if_statement (c_parser *, vec<tree> *);\n static void c_parser_switch_statement (c_parser *);\n static void c_parser_while_statement (c_parser *, bool);\n static void c_parser_do_statement (c_parser *, bool);\n@@ -4961,10 +4961,11 @@ c_parser_statement (c_parser *parser)\n   c_parser_statement_after_labels (parser);\n }\n \n-/* Parse a statement, other than a labeled statement.  */\n+/* Parse a statement, other than a labeled statement.  CHAIN is a vector\n+   of if-else-if conditions.  */\n \n static void\n-c_parser_statement_after_labels (c_parser *parser)\n+c_parser_statement_after_labels (c_parser *parser, vec<tree> *chain)\n {\n   location_t loc = c_parser_peek_token (parser)->location;\n   tree stmt = NULL_TREE;\n@@ -4979,7 +4980,7 @@ c_parser_statement_after_labels (c_parser *parser)\n       switch (c_parser_peek_token (parser)->keyword)\n \t{\n \tcase RID_IF:\n-\t  c_parser_if_statement (parser);\n+\t  c_parser_if_statement (parser, chain);\n \t  break;\n \tcase RID_SWITCH:\n \t  c_parser_switch_statement (parser);\n@@ -5230,10 +5231,12 @@ c_parser_if_body (c_parser *parser, bool *if_p,\n \n /* Parse the else body of an if statement.  This is just parsing a\n    statement but (a) it is a block in C99, (b) we handle an empty body\n-   specially for the sake of -Wempty-body warnings.  */\n+   specially for the sake of -Wempty-body warnings.  CHAIN is a vector\n+   of if-else-if conditions.  */\n \n static tree\n-c_parser_else_body (c_parser *parser, const token_indent_info &else_tinfo)\n+c_parser_else_body (c_parser *parser, const token_indent_info &else_tinfo,\n+\t\t    vec<tree> *chain)\n {\n   location_t body_loc = c_parser_peek_token (parser)->location;\n   tree block = c_begin_compound_stmt (flag_isoc99);\n@@ -5251,7 +5254,7 @@ c_parser_else_body (c_parser *parser, const token_indent_info &else_tinfo)\n       c_parser_consume_token (parser);\n     }\n   else\n-    c_parser_statement_after_labels (parser);\n+    c_parser_statement_after_labels (parser, chain);\n \n   token_indent_info next_tinfo\n     = get_token_indent_info (c_parser_peek_token (parser));\n@@ -5265,10 +5268,11 @@ c_parser_else_body (c_parser *parser, const token_indent_info &else_tinfo)\n    if-statement:\n      if ( expression ) statement\n      if ( expression ) statement else statement\n-*/\n+\n+  CHAIN is a vector of if-else-if conditions.  */\n \n static void\n-c_parser_if_statement (c_parser *parser)\n+c_parser_if_statement (c_parser *parser, vec<tree> *chain)\n {\n   tree block;\n   location_t loc;\n@@ -5294,15 +5298,47 @@ c_parser_if_statement (c_parser *parser)\n   parser->in_if_block = true;\n   first_body = c_parser_if_body (parser, &first_if, if_tinfo);\n   parser->in_if_block = in_if_block;\n+\n+  if (warn_duplicated_cond)\n+    warn_duplicated_cond_add_or_warn (EXPR_LOCATION (cond), cond, &chain);\n+\n   if (c_parser_next_token_is_keyword (parser, RID_ELSE))\n     {\n       token_indent_info else_tinfo\n \t= get_token_indent_info (c_parser_peek_token (parser));\n       c_parser_consume_token (parser);\n-      second_body = c_parser_else_body (parser, else_tinfo);\n+      if (warn_duplicated_cond)\n+\t{\n+\t  if (c_parser_next_token_is_keyword (parser, RID_IF)\n+\t      && chain == NULL)\n+\t    {\n+\t      /* We've got \"if (COND) else if (COND2)\".  Start the\n+\t\t condition chain and add COND as the first element.  */\n+\t      chain = new vec<tree> ();\n+\t      if (!CONSTANT_CLASS_P (cond) && !TREE_SIDE_EFFECTS (cond))\n+\t\tchain->safe_push (cond);\n+\t    }\n+\t  else if (!c_parser_next_token_is_keyword (parser, RID_IF))\n+\t    {\n+\t      /* This is if-else without subsequent if.  Zap the condition\n+\t\t chain; we would have already warned at this point.  */\n+\t      delete chain;\n+\t      chain = NULL;\n+\t    }\n+\t}\n+      second_body = c_parser_else_body (parser, else_tinfo, chain);\n     }\n   else\n-    second_body = NULL_TREE;\n+    {\n+      second_body = NULL_TREE;\n+      if (warn_duplicated_cond)\n+\t{\n+\t  /* This if statement does not have an else clause.  We don't\n+\t     need the condition chain anymore.  */\n+\t  delete chain;\n+\t  chain = NULL;\n+\t}\n+    }\n   c_finish_if_stmt (loc, cond, first_body, second_body, first_if);\n   if_stmt = c_end_compound_stmt (loc, block, flag_isoc99);\n "}, {"sha": "e6e2e0caf0d565afa294c877ab05c4b4394499de", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3e3b8d63e54773e0f5add898ad55acf1be22d950", "patch": "@@ -1,3 +1,13 @@\n+2015-10-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/64249\n+\t* parser.c (cp_parser_statement): Add CHAIN parameter and pass it\n+\tdown to cp_parser_selection_statement.\n+\t(cp_parser_selection_statement): Add CHAIN parameter.  Add code to\n+\twarn about duplicated if-else-if conditions.\n+\t(cp_parser_implicitly_scoped_statement): Add CHAIN parameter and pass\n+\tit down to cp_parser_statement.\n+\n 2015-10-01  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR c++/54430"}, {"sha": "46aff88f61e5f455b7c4c4e7591b77d2e2256259", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 62, "deletions": 11, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=3e3b8d63e54773e0f5add898ad55acf1be22d950", "patch": "@@ -2023,7 +2023,7 @@ static void cp_parser_lambda_body\n /* Statements [gram.stmt.stmt]  */\n \n static void cp_parser_statement\n-  (cp_parser *, tree, bool, bool *);\n+  (cp_parser *, tree, bool, bool *, vec<tree> * = NULL);\n static void cp_parser_label_for_labeled_statement\n (cp_parser *, tree);\n static tree cp_parser_expression_statement\n@@ -2033,7 +2033,7 @@ static tree cp_parser_compound_statement\n static void cp_parser_statement_seq_opt\n   (cp_parser *, tree);\n static tree cp_parser_selection_statement\n-  (cp_parser *, bool *);\n+  (cp_parser *, bool *, vec<tree> *);\n static tree cp_parser_condition\n   (cp_parser *);\n static tree cp_parser_iteration_statement\n@@ -2058,7 +2058,7 @@ static void cp_parser_declaration_statement\n   (cp_parser *);\n \n static tree cp_parser_implicitly_scoped_statement\n-  (cp_parser *, bool *, const token_indent_info &);\n+  (cp_parser *, bool *, const token_indent_info &, vec<tree> * = NULL);\n static void cp_parser_already_scoped_statement\n   (cp_parser *, const token_indent_info &);\n \n@@ -9923,11 +9923,13 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)\n \n   If IF_P is not NULL, *IF_P is set to indicate whether the statement\n   is a (possibly labeled) if statement which is not enclosed in braces\n-  and has an else clause.  This is used to implement -Wparentheses.  */\n+  and has an else clause.  This is used to implement -Wparentheses.\n+\n+  CHAIN is a vector of if-else-if conditions.  */\n \n static void\n cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n-\t\t     bool in_compound, bool *if_p)\n+\t\t     bool in_compound, bool *if_p, vec<tree> *chain)\n {\n   tree statement, std_attrs = NULL_TREE;\n   cp_token *token;\n@@ -9975,7 +9977,7 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n \n \tcase RID_IF:\n \tcase RID_SWITCH:\n-\t  statement = cp_parser_selection_statement (parser, if_p);\n+\t  statement = cp_parser_selection_statement (parser, if_p, chain);\n \t  break;\n \n \tcase RID_WHILE:\n@@ -10404,10 +10406,14 @@ cp_parser_statement_seq_opt (cp_parser* parser, tree in_statement_expr)\n    If IF_P is not NULL, *IF_P is set to indicate whether the statement\n    is a (possibly labeled) if statement which is not enclosed in\n    braces and has an else clause.  This is used to implement\n-   -Wparentheses.  */\n+   -Wparentheses.\n+\n+   CHAIN is a vector of if-else-if conditions.  This is used to implement\n+   -Wduplicated-cond.  */\n \n static tree\n-cp_parser_selection_statement (cp_parser* parser, bool *if_p)\n+cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n+\t\t\t       vec<tree> *chain)\n {\n   cp_token *token;\n   enum rid keyword;\n@@ -10458,6 +10464,10 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p)\n \t    /* Add the condition.  */\n \t    finish_if_stmt_cond (condition, statement);\n \n+\t    if (warn_duplicated_cond)\n+\t      warn_duplicated_cond_add_or_warn (token->location, condition,\n+\t\t\t\t\t\t&chain);\n+\n \t    /* Parse the then-clause.  */\n \t    in_statement = parser->in_statement;\n \t    parser->in_statement |= IN_IF_STMT;\n@@ -10475,10 +10485,41 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p)\n \t\t  = get_token_indent_info (cp_lexer_peek_token (parser->lexer));\n \t\t/* Consume the `else' keyword.  */\n \t\tcp_lexer_consume_token (parser->lexer);\n+\t\tif (warn_duplicated_cond)\n+\t\t  {\n+\t\t    if (cp_lexer_next_token_is_keyword (parser->lexer,\n+\t\t\t\t\t\t\tRID_IF)\n+\t\t\t&& chain == NULL)\n+\t\t      {\n+\t\t\t/* We've got \"if (COND) else if (COND2)\".  Start\n+\t\t\t   the condition chain and add COND as the first\n+\t\t\t   element.  */\n+\t\t\tchain = new vec<tree> ();\n+\t\t\tif (!CONSTANT_CLASS_P (condition)\n+\t\t\t    && !TREE_SIDE_EFFECTS (condition))\n+\t\t\t{\n+\t\t\t  /* Wrap it in a NOP_EXPR so that we can set the\n+\t\t\t     location of the condition.  */\n+\t\t\t  tree e = build1 (NOP_EXPR, TREE_TYPE (condition),\n+\t\t\t\t\t   condition);\n+\t\t\t  SET_EXPR_LOCATION (e, token->location);\n+\t\t\t  chain->safe_push (e);\n+\t\t\t}\n+\t\t      }\n+\t\t    else if (!cp_lexer_next_token_is_keyword (parser->lexer,\n+\t\t\t\t\t\t\t      RID_IF))\n+\t\t      {\n+\t\t\t/* This is if-else without subsequent if.  Zap the\n+\t\t\t   condition chain; we would have already warned at\n+\t\t\t   this point.  */\n+\t\t\tdelete chain;\n+\t\t\tchain = NULL;\n+\t\t      }\n+\t\t  }\n \t\tbegin_else_clause (statement);\n \t\t/* Parse the else-clause.  */\n \t\tcp_parser_implicitly_scoped_statement (parser, NULL,\n-\t\t\t\t\t\t       guard_tinfo);\n+\t\t\t\t\t\t       guard_tinfo, chain);\n \n \t\tfinish_else_clause (statement);\n \n@@ -10500,6 +10541,12 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p)\n \t\t  warning_at (EXPR_LOCATION (statement), OPT_Wparentheses,\n \t\t\t      \"suggest explicit braces to avoid ambiguous\"\n \t\t\t      \" %<else%>\");\n+\t\tif (warn_duplicated_cond)\n+\t\t  {\n+\t\t    /* We don't need the condition chain anymore.  */\n+\t\t    delete chain;\n+\t\t    chain = NULL;\n+\t\t  }\n \t      }\n \n \t    /* Now we're all done with the if-statement.  */\n@@ -11419,11 +11466,15 @@ cp_parser_declaration_statement (cp_parser* parser)\n    braces and has an else clause.  This is used to implement\n    -Wparentheses.\n \n+   CHAIN is a vector of if-else-if conditions.  This is used to implement\n+   -Wduplicated-cond.\n+\n    Returns the new statement.  */\n \n static tree\n cp_parser_implicitly_scoped_statement (cp_parser* parser, bool *if_p,\n-\t\t\t\t       const token_indent_info &guard_tinfo)\n+\t\t\t\t       const token_indent_info &guard_tinfo,\n+\t\t\t\t       vec<tree> *chain)\n {\n   tree statement;\n   location_t body_loc = cp_lexer_peek_token (parser->lexer)->location;\n@@ -11456,7 +11507,7 @@ cp_parser_implicitly_scoped_statement (cp_parser* parser, bool *if_p,\n       /* Create a compound-statement.  */\n       statement = begin_compound_stmt (0);\n       /* Parse the dependent-statement.  */\n-      cp_parser_statement (parser, NULL_TREE, false, if_p);\n+      cp_parser_statement (parser, NULL_TREE, false, if_p, chain);\n       /* Finish the dummy compound-statement.  */\n       finish_compound_stmt (statement);\n     }"}, {"sha": "2a6c3978ed43e8a0e2d8340a6221c1d1e71b1cef", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3e3b8d63e54773e0f5add898ad55acf1be22d950", "patch": "@@ -242,7 +242,7 @@ Objective-C and Objective-C++ Dialects}.\n -pedantic-errors @gol\n -w  -Wextra  -Wall  -Waddress  -Waggregate-return  @gol\n -Waggressive-loop-optimizations -Warray-bounds -Warray-bounds=@var{n} @gol\n--Wbool-compare -Wframe-address @gol\n+-Wbool-compare -Wduplicated-cond -Wframe-address @gol\n -Wno-attributes -Wno-builtin-macro-redefined @gol\n -Wc90-c99-compat -Wc99-c11-compat @gol\n -Wc++-compat -Wc++11-compat -Wc++14-compat -Wcast-align  -Wcast-qual  @gol\n@@ -3522,6 +3522,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wimplicit-int @r{(C and Objective-C only)} @gol\n -Wimplicit-function-declaration @r{(C and Objective-C only)} @gol\n -Wbool-compare  @gol\n+-Wduplicated-cond  @gol\n -Wcomment  @gol\n -Wformat   @gol\n -Wmain @r{(only for C/ObjC and unless} @option{-ffreestanding}@r{)}  @gol\n@@ -4553,6 +4554,17 @@ if ((n > 1) == 2) @{ @dots{} @}\n @end smallexample\n This warning is enabled by @option{-Wall}.\n \n+@item -Wduplicated-cond\n+@opindex Wno-duplicated-cond\n+@opindex Wduplicated-cond\n+Warn about duplicated conditions in an if-else-if chain.  For instance,\n+warn for the following code:\n+@smallexample\n+if (p->q != NULL) @{ @dots{} @}\n+else if (p->q != NULL) @{ @dots{} @}\n+@end smallexample\n+This warning is enabled by @option{-Wall}.\n+\n @item -Wframe-address\n @opindex Wno-frame-address\n @opindex Wframe-address"}, {"sha": "13f911955bcfdbd96e45b4bcd2beac2648851c5a", "filename": "gcc/genemit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=3e3b8d63e54773e0f5add898ad55acf1be22d950", "patch": "@@ -179,10 +179,10 @@ gen_exp (rtx x, enum rtx_code subroutine_type, char *used)\n       else if (INTVAL (x) == -1)\n \tprintf (\"constm1_rtx\");\n       else if (-MAX_SAVED_CONST_INT <= INTVAL (x)\n-\t  && INTVAL (x) <= MAX_SAVED_CONST_INT)\n+\t       && INTVAL (x) <= MAX_SAVED_CONST_INT)\n \tprintf (\"const_int_rtx[MAX_SAVED_CONST_INT + (%d)]\",\n \t\t(int) INTVAL (x));\n-      else if (INTVAL (x) == STORE_FLAG_VALUE)\n+      else if (STORE_FLAG_VALUE > 1 && INTVAL (x) == STORE_FLAG_VALUE)\n \tprintf (\"const_true_rtx\");\n       else\n \t{"}, {"sha": "ced7d33bfaf5eeee1cedfde1e5dcbbf21918aab4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e3b8d63e54773e0f5add898ad55acf1be22d950", "patch": "@@ -1,3 +1,13 @@\n+2015-10-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/64249\n+\t* c-c++-common/Wduplicated-cond-1.c: New test.\n+\t* c-c++-common/Wduplicated-cond-2.c: New test.\n+\t* c-c++-common/Wduplicated-cond-3.c: New test.\n+\t* c-c++-common/Wduplicated-cond-4.c: New test.\n+\t* c-c++-common/Wmisleading-indentation.c (fn_37): Avoid\n+\t-Wduplicated-cond warning.\n+\n 2015-10-02  Renlin Li  <renlin.li@arm.com>\n \n \t* gcc.target/aarch64/csneg-1.c: Update."}, {"sha": "4763a84e3d322adcb19d423b7d0fef3949c556f1", "filename": "gcc/testsuite/c-c++-common/Wduplicated-cond-1.c", "status": "added", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-cond-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-cond-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-cond-1.c?ref=3e3b8d63e54773e0f5add898ad55acf1be22d950", "patch": "@@ -0,0 +1,200 @@\n+/* PR c/64249 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wduplicated-cond\" } */\n+\n+#ifndef __cplusplus\n+# define bool _Bool\n+# define true 1\n+# define false 0\n+#endif\n+\n+extern int foo (void);\n+\n+int\n+fn1 (int n)\n+{\n+  if (n == 1) /* { dg-message \"previously used here\" } */\n+    return -1;\n+  else if (n == 2)\n+    return 0;\n+  else if (n == 1) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 1;\n+  return 0;\n+}\n+\n+int\n+fn2 (void)\n+{\n+  if (4)\n+    return 1;\n+  else if (4)\n+    return 2;\n+\n+#define N 10\n+  if (N)\n+    return 3;\n+  else if (N)\n+    return 4;\n+}\n+\n+int\n+fn3 (int n)\n+{\n+  if (n == 42)\n+    return 1;\n+  if (n == 42)\n+    return 2;\n+\n+  if (n)\n+    if (n)\n+      if (n)\n+\tif (n)\n+\t  return 42;\n+\n+  if (!n)\n+    return 10;\n+  else\n+    return 11;\n+}\n+\n+int\n+fn4 (int n)\n+{\n+  if (n > 0)\n+    {\n+      if (n == 1) /* { dg-message \"previously used here\" } */\n+\treturn 1;\n+      else if (n == 1) /* { dg-warning \"duplicated .if. condition\" } */\n+\treturn 2;\n+    }\n+  else if (n < 0)\n+    {\n+      if (n < -1)\n+\treturn 6;\n+      else if (n < -2)\n+\t{\n+\t  if (n == -10) /* { dg-message \"previously used here\" } */\n+\t    return 3;\n+\t  else if (n == -10) /* { dg-warning \"duplicated .if. condition\" } */\n+\t    return 4;\n+\t}\n+    }\n+  else\n+    return 7;\n+  return 0;\n+}\n+\n+struct S { long p, q; };\n+\n+int\n+fn5 (struct S *s)\n+{\n+  if (!s->p) /* { dg-message \"previously used here\" } */\n+    return 12345;\n+  else if (!s->p) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 1234;\n+  return 0;\n+}\n+\n+int\n+fn6 (int n)\n+{\n+  if (n) /* { dg-message \"previously used here\" } */\n+    return n;\n+  else if (n) /* { dg-warning \"duplicated .if. condition\" } */\n+    return n;\n+  else if (n) /* { dg-warning \"duplicated .if. condition\" } */\n+    return n;\n+  else if (n) /* { dg-warning \"duplicated .if. condition\" } */\n+    return n;\n+  else if (n) /* { dg-warning \"duplicated .if. condition\" } */\n+    return n;\n+  else if (n) /* { dg-warning \"duplicated .if. condition\" } */\n+    return n;\n+  else if (n) /* { dg-warning \"duplicated .if. condition\" } */\n+    return n;\n+  else if (n) /* { dg-warning \"duplicated .if. condition\" } */\n+    return n;\n+  return 0;\n+}\n+\n+int\n+fn7 (int n)\n+{\n+  if (n == 0) /* { dg-message \"previously used here\" } */\n+    return 10;\n+  else if (n == 1) /* { dg-message \"previously used here\" } */\n+    return 11;\n+  else if (n == 2) /* { dg-message \"previously used here\" } */\n+    return 12;\n+  else if (n == 3) /* { dg-message \"previously used here\" } */\n+    return 13;\n+  else if (n == 4) /* { dg-message \"previously used here\" } */\n+    return 14;\n+  else if (n == 5) /* { dg-message \"previously used here\" } */\n+    return 15;\n+  else if (n == 6) /* { dg-message \"previously used here\" } */\n+    return 16;\n+  else if (n == 7) /* { dg-message \"previously used here\" } */\n+    return 17;\n+  else if (n == 0) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 100;\n+  else if (n == 1) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 101;\n+  else if (n == 2) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 102;\n+  else if (n == 3) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 103;\n+  else if (n == 4) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 104;\n+  else if (n == 5) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 105;\n+  else if (n == 6) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 106;\n+  else if (n == 7) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 107;\n+  return 0;\n+}\n+\n+int\n+fn8 (bool b)\n+{\n+  if (!b) /* { dg-message \"previously used here\" } */\n+    return 16;\n+  else if (!b) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 27;\n+  else\n+    return 64;\n+}\n+\n+int\n+fn9 (int i, int j, int k)\n+{\n+  if (i > 0 && j > 0 && k > 0) /* { dg-message \"previously used here\" } */\n+    return -999;\n+  else\n+  if (i > 0 && j > 0 && k > 0) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 999;\n+  else\n+    return 0;\n+}\n+\n+int\n+fn10 (void)\n+{\n+  if (foo ())\n+    return 1732984;\n+  else if (foo ())\n+    return 18409;\n+  return 0;\n+}\n+\n+int\n+fn11 (int n)\n+{\n+  if (++n == 10)\n+    return 666;\n+  else if (++n == 10)\n+    return 9;\n+  return 0;\n+}"}, {"sha": "90a866305bff8e078e5bf58cd9dfe7c4a424dfe5", "filename": "gcc/testsuite/c-c++-common/Wduplicated-cond-2.c", "status": "added", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-cond-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-cond-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-cond-2.c?ref=3e3b8d63e54773e0f5add898ad55acf1be22d950", "patch": "@@ -0,0 +1,200 @@\n+/* PR c/64249 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+#ifndef __cplusplus\n+# define bool _Bool\n+# define true 1\n+# define false 0\n+#endif\n+\n+extern int foo (void);\n+\n+int\n+fn1 (int n)\n+{\n+  if (n == 1) /* { dg-message \"previously used here\" } */\n+    return -1;\n+  else if (n == 2)\n+    return 0;\n+  else if (n == 1) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 1;\n+  return 0;\n+}\n+\n+int\n+fn2 (void)\n+{\n+  if (4)\n+    return 1;\n+  else if (4)\n+    return 2;\n+\n+#define N 10\n+  if (N)\n+    return 3;\n+  else if (N)\n+    return 4;\n+}\n+\n+int\n+fn3 (int n)\n+{\n+  if (n == 42)\n+    return 1;\n+  if (n == 42)\n+    return 2;\n+\n+  if (n)\n+    if (n)\n+      if (n)\n+\tif (n)\n+\t  return 42;\n+\n+  if (!n)\n+    return 10;\n+  else\n+    return 11;\n+}\n+\n+int\n+fn4 (int n)\n+{\n+  if (n > 0)\n+    {\n+      if (n == 1) /* { dg-message \"previously used here\" } */\n+\treturn 1;\n+      else if (n == 1) /* { dg-warning \"duplicated .if. condition\" } */\n+\treturn 2;\n+    }\n+  else if (n < 0)\n+    {\n+      if (n < -1)\n+\treturn 6;\n+      else if (n < -2)\n+\t{\n+\t  if (n == -10) /* { dg-message \"previously used here\" } */\n+\t    return 3;\n+\t  else if (n == -10) /* { dg-warning \"duplicated .if. condition\" } */\n+\t    return 4;\n+\t}\n+    }\n+  else\n+    return 7;\n+  return 0;\n+}\n+\n+struct S { long p, q; };\n+\n+int\n+fn5 (struct S *s)\n+{\n+  if (!s->p) /* { dg-message \"previously used here\" } */\n+    return 12345;\n+  else if (!s->p) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 1234;\n+  return 0;\n+}\n+\n+int\n+fn6 (int n)\n+{\n+  if (n) /* { dg-message \"previously used here\" } */\n+    return n;\n+  else if (n) /* { dg-warning \"duplicated .if. condition\" } */\n+    return n;\n+  else if (n) /* { dg-warning \"duplicated .if. condition\" } */\n+    return n;\n+  else if (n) /* { dg-warning \"duplicated .if. condition\" } */\n+    return n;\n+  else if (n) /* { dg-warning \"duplicated .if. condition\" } */\n+    return n;\n+  else if (n) /* { dg-warning \"duplicated .if. condition\" } */\n+    return n;\n+  else if (n) /* { dg-warning \"duplicated .if. condition\" } */\n+    return n;\n+  else if (n) /* { dg-warning \"duplicated .if. condition\" } */\n+    return n;\n+  return 0;\n+}\n+\n+int\n+fn7 (int n)\n+{\n+  if (n == 0) /* { dg-message \"previously used here\" } */\n+    return 10;\n+  else if (n == 1) /* { dg-message \"previously used here\" } */\n+    return 11;\n+  else if (n == 2) /* { dg-message \"previously used here\" } */\n+    return 12;\n+  else if (n == 3) /* { dg-message \"previously used here\" } */\n+    return 13;\n+  else if (n == 4) /* { dg-message \"previously used here\" } */\n+    return 14;\n+  else if (n == 5) /* { dg-message \"previously used here\" } */\n+    return 15;\n+  else if (n == 6) /* { dg-message \"previously used here\" } */\n+    return 16;\n+  else if (n == 7) /* { dg-message \"previously used here\" } */\n+    return 17;\n+  else if (n == 0) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 100;\n+  else if (n == 1) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 101;\n+  else if (n == 2) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 102;\n+  else if (n == 3) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 103;\n+  else if (n == 4) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 104;\n+  else if (n == 5) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 105;\n+  else if (n == 6) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 106;\n+  else if (n == 7) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 107;\n+  return 0;\n+}\n+\n+int\n+fn8 (bool b)\n+{\n+  if (!b) /* { dg-message \"previously used here\" } */\n+    return 16;\n+  else if (!b) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 27;\n+  else\n+    return 64;\n+}\n+\n+int\n+fn9 (int i, int j, int k)\n+{\n+  if (i > 0 && j > 0 && k > 0) /* { dg-message \"previously used here\" } */\n+    return -999;\n+  else\n+  if (i > 0 && j > 0 && k > 0) /* { dg-warning \"duplicated .if. condition\" } */\n+    return 999;\n+  else\n+    return 0;\n+}\n+\n+int\n+fn10 (void)\n+{\n+  if (foo ())\n+    return 1732984;\n+  else if (foo ())\n+    return 18409;\n+  return 0;\n+}\n+\n+int\n+fn11 (int n)\n+{\n+  if (++n == 10)\n+    return 666;\n+  else if (++n == 10)\n+    return 9;\n+  return 0;\n+}"}, {"sha": "e3b5ac0cc8bcd2225bcc915c8f1b7cccae5fc52c", "filename": "gcc/testsuite/c-c++-common/Wduplicated-cond-3.c", "status": "added", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-cond-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-cond-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-cond-3.c?ref=3e3b8d63e54773e0f5add898ad55acf1be22d950", "patch": "@@ -0,0 +1,204 @@\n+/* PR c/64249 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -Wno-duplicated-cond\" } */\n+\n+#ifndef __cplusplus\n+# define bool _Bool\n+# define true 1\n+# define false 0\n+#endif\n+\n+extern int foo (void);\n+\n+int\n+fn1 (int n)\n+{\n+  if (n == 1)\n+    return -1;\n+  else if (n == 2)\n+    return 0;\n+  else if (n == 1)\n+    return 1;\n+  return 0;\n+}\n+\n+int\n+fn2 (void)\n+{\n+  if (4)\n+    return 1;\n+  else if (4)\n+    return 2;\n+\n+#define N 10\n+  if (N)\n+    return 3;\n+  else if (N)\n+    return 4;\n+}\n+\n+int\n+fn3 (int n)\n+{\n+  if (n == 42)\n+    return 1;\n+  if (n == 42)\n+    return 2;\n+\n+  if (n)\n+    if (n)\n+      if (n)\n+\tif (n)\n+\t  return 42;\n+\n+  if (!n)\n+    return 10;\n+  else\n+    return 11;\n+}\n+\n+int\n+fn4 (int n)\n+{\n+  if (n > 0)\n+    {\n+      if (n == 1)\n+\treturn 1;\n+      else if (n == 1)\n+\treturn 2;\n+    }\n+  else if (n < 0)\n+    {\n+      if (n < -1)\n+\treturn 6;\n+      else if (n < -2)\n+\t{\n+\t  if (n == -10)\n+\t    return 3;\n+\t  else if (n == -10)\n+\t    return 4;\n+\t}\n+    }\n+  else\n+    return 7;\n+  return 0;\n+}\n+\n+struct S { long p, q; };\n+\n+int\n+fn5 (struct S *s)\n+{\n+  if (!s->p)\n+    return 12345;\n+  else if (!s->p)\n+    return 1234;\n+  return 0;\n+}\n+\n+int\n+fn6 (int n)\n+{\n+  if (n)\n+    return n;\n+  else if (n)\n+    return n;\n+  else if (n)\n+    return n;\n+  else if (n)\n+    return n;\n+  else if (n)\n+    return n;\n+  else if (n)\n+    return n;\n+  else if (n)\n+    return n;\n+  else if (n)\n+    return n;\n+  return 0;\n+}\n+\n+int\n+fn7 (int n)\n+{\n+  if (n == 0)\n+    return 10;\n+  else if (n == 1)\n+    return 11;\n+  else if (n == 2)\n+    return 12;\n+  else if (n == 3)\n+    return 13;\n+  else if (n == 4)\n+    return 14;\n+  else if (n == 5)\n+    return 15;\n+  else if (n == 6)\n+    return 16;\n+  else if (n == 7)\n+    return 17;\n+  else if (n == 0)\n+    return 100;\n+  else if (n == 1)\n+    return 101;\n+  else if (n == 2)\n+    return 102;\n+  else if (n == 3)\n+    return 103;\n+  else if (n == 4)\n+    return 104;\n+  else if (n == 5)\n+    return 105;\n+  else if (n == 6)\n+    return 106;\n+  else if (n == 7)\n+    return 107;\n+  return 0;\n+}\n+\n+int\n+fn8 (bool b)\n+{\n+  if (!b)\n+    return 16;\n+  else if (!b)\n+    return 27;\n+  else\n+    return 64;\n+}\n+\n+int\n+fn9 (int i, int j, int k)\n+{\n+  if ((i > 0 && j > 0 && k > 0)\n+      && ((i > 11 && j == 76 && k < 10)\n+\t  || (i < 0 && j == 99 && k > 103)))\n+    return -999;\n+  else\n+  if ((i > 0 && j > 0 && k > 0)\n+      && ((i > 11 && j == 76 && k < 10)\n+\t  || (i < 0 && j == 99 && k > 103)))\n+    return 999;\n+  else\n+    return 0;\n+}\n+\n+int\n+fn10 (void)\n+{\n+  if (foo ())\n+    return 1732984;\n+  else if (foo ())\n+    return 18409;\n+  return 0;\n+}\n+\n+int\n+fn11 (int n)\n+{\n+  if (++n == 10)\n+    return 666;\n+  else if (++n == 10)\n+    return 9;\n+  return 0;\n+}"}, {"sha": "4fb7e174848f9c69b9c5b8450f44efaac1bf4340", "filename": "gcc/testsuite/c-c++-common/Wduplicated-cond-4.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-cond-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-cond-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-cond-4.c?ref=3e3b8d63e54773e0f5add898ad55acf1be22d950", "patch": "@@ -0,0 +1,32 @@\n+/* PR c/64249 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wduplicated-cond\" } */\n+/* Test we don't warn if a condition in an if-else-if chain\n+   has a side-effect.  E.g. __cxxabiv1::__cxa_end_catch ()\n+   uses such a construction.  */\n+\n+extern int a, bar (void);\n+\n+int\n+fn1 (void)\n+{\n+  if (a)\n+    return 1;\n+  else if (bar ())\n+    return 2;\n+  else if (a)\n+    return 3;\n+  return 0;\n+}\n+\n+int\n+fn2 (int c)\n+{\n+  if (c < 0)\n+    return 1;\n+  else if (--c == 0)\n+    return 2;\n+  else if (c < 0)\n+    return 3;\n+  return 0;\n+}"}, {"sha": "a3f5acdd533e74389e376b059255878efec51a44", "filename": "gcc/testsuite/c-c++-common/Wmisleading-indentation.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmisleading-indentation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3b8d63e54773e0f5add898ad55acf1be22d950/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmisleading-indentation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmisleading-indentation.c?ref=3e3b8d63e54773e0f5add898ad55acf1be22d950", "patch": "@@ -708,21 +708,21 @@ fn_37 (void)\n \n   if (flagA)\n     ;\n-  else if (flagA); /* { dg-message \"8: ...this 'if' clause\" } */\n+  else if (flagB); /* { dg-message \"8: ...this 'if' clause\" } */\n     foo (0); /* { dg-warning \"statement is indented as if\" } */\n   while (flagA) /* { dg-message \"3: ...this 'while' clause\" } */\n     /* blah */;\n     foo (0); /* { dg-warning \"statement is indented as if\" } */\n \n   if (flagA)\n     ;\n-  else if (flagA) /* { dg-message \"8: ...this 'if' clause\" } */\n+  else if (flagB) /* { dg-message \"8: ...this 'if' clause\" } */\n     foo (1);\n     foo (2); /* { dg-warning \"statement is indented as if\" } */\n \n   if (flagA)\n     foo (1);\n-  else if (flagA) /* { dg-message \"8: ...this 'if' clause\" } */\n+  else if (flagB) /* { dg-message \"8: ...this 'if' clause\" } */\n     foo (2);\n     foo (3); /* { dg-warning \"statement is indented as if\" } */\n "}]}