{"sha": "54d7c70c08b5b4a0180269301d466cc5e3d951b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRkN2M3MGMwOGI1YjRhMDE4MDI2OTMwMWQ0NjZjYzVlM2Q5NTFiNQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2017-01-23T08:56:36Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2017-01-23T08:56:36Z"}, "message": "[ARM,AArch64][testsuite] Fix format string in AdvSIMD tests.\n\n2017-01-23  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h (CHECK_POLY): New.\n\t(CHECK_RESULTS_NAMED_NO_FP16): Call CHECK_POLY instead of CHECK\n\tfor poly*_t types.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcnt.c (FNNAME): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcombine.c (void\n\texec_vcombine): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcreate.c (FNNAME): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vget_high.c (void exec_vget_high): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vget_low.c (void exec_vget_low): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vldX.c (void exec_vldX): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vldX_dup.c (void exec_vldX_dup): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vldX_lane.c (void exec_vldX_lane): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmul.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmvn.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqtbX.c (void exec_vqtbX): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p128.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrev.c (void exec_vrev): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vsXi_n.inc: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vshuffle.inc: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vsli_n.c (void vsli_extra): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vsri_n.c (void vsri_extra): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vstX_lane.c (void exec_vstX_lane): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vtbX.c (void exec_vtbX): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/p64_p128.c (int main):\n\tLikewise.\n\t(TEST_VGET_LANE): Cast to uint to avoid warning.\n\t* gcc.target/aarch64/advsimd-intrinsics/unary_sat_op.inc (void\n\tFNNAME): Fix PRIx format for int16_t, int32_t, uint16_t, uint32_t.\n\t* gcc.target/aarch64/advsimd-intrinsics/vfms_vfma_n.c (void\n\texec_vfma_vfms_n): Fix PRIx format for float64_t.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmovn.c (void exec_vmovn):\n\tFix PRIx format for int8_t, int16_t, uint8_t, uint16_t.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmul_lane.c (void\n\texec_vmul_lane): Fix PRIx format for int16_t, uint16_t.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmul_n.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmull.c (void exec_vmull):\n\tFix PRIx format for int16_t, int64_t, uint16_t, uint64_t. Call\n\tCHECK_POLY instead of CHECK for poly64_t types.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmull_lane.c (void\n\texec_vmull_lane): Fix PRIx format for int64_t, uint64_t.\n\t* gcc.target/aarch64/advsimd-intrinsics/vpXXX.inc:\n\tFix PRIx format for int8_t, int16_t, uint8_t, uint16_t.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqabs.c (void\n\tvqabs_extra): Fix PRIx format for int16_t, int32_t, uint16_t,\n\tuint32_t.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqdmull.c: Fix PRIx format\n\tfor int32_t, int64_t.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqneg.c (void\n\tvqneg_extra): Fix PRIx format for int16_t, int32_t.\n\t* gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p64.c\n\t(TEST_VREINTERPRET_TO_POLY): New. (main): Call\n\tTEST_VREINTERPRET_TO_POLY instead of TEST_VREINTERPRET where\n\tneeded.\n\nFrom-SVN: r244772", "tree": {"sha": "b0641be918175b3e7e5f52c34313e6d69c5c3485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0641be918175b3e7e5f52c34313e6d69c5c3485"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54d7c70c08b5b4a0180269301d466cc5e3d951b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54d7c70c08b5b4a0180269301d466cc5e3d951b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54d7c70c08b5b4a0180269301d466cc5e3d951b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54d7c70c08b5b4a0180269301d466cc5e3d951b5/comments", "author": null, "committer": null, "parents": [{"sha": "f9e37186ccddecb17034e448e366f695522740f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9e37186ccddecb17034e448e366f695522740f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9e37186ccddecb17034e448e366f695522740f1"}], "stats": {"total": 618, "additions": 355, "deletions": 263}, "files": [{"sha": "fb55fecf60fe75a888306b864cd6a698fd6f6853", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -1,3 +1,59 @@\n+2017-01-23  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h (CHECK_POLY): New.\n+\t(CHECK_RESULTS_NAMED_NO_FP16): Call CHECK_POLY instead of CHECK\n+\tfor poly*_t types.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcnt.c (FNNAME): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcombine.c (void\n+\texec_vcombine): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcreate.c (FNNAME): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vget_high.c (void exec_vget_high): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vget_low.c (void exec_vget_low): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vldX.c (void exec_vldX): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vldX_dup.c (void exec_vldX_dup): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vldX_lane.c (void exec_vldX_lane): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmul.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmvn.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqtbX.c (void exec_vqtbX): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p128.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrev.c (void exec_vrev): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vsXi_n.inc: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vshuffle.inc: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vsli_n.c (void vsli_extra): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vsri_n.c (void vsri_extra): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vstX_lane.c (void exec_vstX_lane): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vtbX.c (void exec_vtbX): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/p64_p128.c (int main):\n+\tLikewise.\n+\t(TEST_VGET_LANE): Cast to uint to avoid warning.\n+\t* gcc.target/aarch64/advsimd-intrinsics/unary_sat_op.inc (void\n+\tFNNAME): Fix PRIx format for int16_t, int32_t, uint16_t, uint32_t.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vfms_vfma_n.c (void\n+\texec_vfma_vfms_n): Fix PRIx format for float64_t.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmovn.c (void exec_vmovn):\n+\tFix PRIx format for int8_t, int16_t, uint8_t, uint16_t.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmul_lane.c (void\n+\texec_vmul_lane): Fix PRIx format for int16_t, uint16_t.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmul_n.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmull.c (void exec_vmull):\n+\tFix PRIx format for int16_t, int64_t, uint16_t, uint64_t. Call\n+\tCHECK_POLY instead of CHECK for poly64_t types.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmull_lane.c (void\n+\texec_vmull_lane): Fix PRIx format for int64_t, uint64_t.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vpXXX.inc:\n+\tFix PRIx format for int8_t, int16_t, uint8_t, uint16_t.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqabs.c (void\n+\tvqabs_extra): Fix PRIx format for int16_t, int32_t, uint16_t,\n+\tuint32_t.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqdmull.c: Fix PRIx format\n+\tfor int32_t, int64_t.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqneg.c (void\n+\tvqneg_extra): Fix PRIx format for int16_t, int32_t.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p64.c\n+\t(TEST_VREINTERPRET_TO_POLY): New. (main): Call\n+\tTEST_VREINTERPRET_TO_POLY instead of TEST_VREINTERPRET where\n+\tneeded.\n+\n 2017-01-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/79154"}, {"sha": "fde6029b7fc1d2ccd9efad8f9abd043e12b78b37", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -128,6 +128,35 @@ extern size_t strlen(const char *);\n     fprintf(stderr, \"CHECKED %s %s\\n\", STR(VECT_TYPE(T, W, N)), MSG);\t\\\n   }\n \n+/* poly variant.  */\n+#define CHECK_POLY(MSG,T,W,N,FMT,EXPECTED,COMMENT)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for(i=0; i<N ; i++)\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tunion poly_operand {\t\t\t\t\t\t\\\n+\t  uint##W##_t i;\t\t\t\t\t\t\\\n+\t  poly##W##_t p;\t\t\t\t\t\t\\\n+\t} tmp_res, tmp_exp;\t\t\t\t\t\t\\\n+\ttmp_res.p = VECT_VAR(result, T, W, N)[i];\t\t\t\\\n+\ttmp_exp.i = VECT_VAR(EXPECTED, T, W, N)[i];\t\t\t\\\n+\tif (tmp_res.i != tmp_exp.i) {\t\t\t\t\t\\\n+\t  fprintf(stderr,\t\t\t\t\t\t\\\n+\t\t  \"ERROR in %s (%s line %d in buffer '%s') at type %s \"\t\\\n+\t\t  \"index %d: got 0x%\" FMT \" != 0x%\" FMT \" %s\\n\",\t\\\n+\t\t  MSG, __FILE__, __LINE__,\t\t\t\t\\\n+\t\t  STR(EXPECTED),\t\t\t\t\t\\\n+\t\t  STR(VECT_NAME(T, W, N)),\t\t\t\t\\\n+\t\t  i,\t\t\t\t\t\t\t\\\n+\t\t  tmp_res.i,\t\t\t\t\t\t\\\n+\t\t  tmp_exp.i,\t\t\t\t\t\t\\\n+\t\t  strlen(COMMENT) > 0 ? COMMENT : \"\");\t\t\t\\\n+\t  abort();\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    fprintf(stderr, \"CHECKED %s %s\\n\", STR(VECT_TYPE(T, W, N)), MSG);\t\\\n+  }\n+\n /* Clean buffer with a non-zero pattern to help diagnose buffer\n    overflows.  */\n #define CLEAN_PATTERN_8  0x33\n@@ -218,8 +247,8 @@ extern ARRAY(expected, hfloat, 64, 2);\n     CHECK(test_name, uint, 16, 4, PRIx16, EXPECTED, comment);\t\t\\\n     CHECK(test_name, uint, 32, 2, PRIx32, EXPECTED, comment);\t\t\\\n     CHECK(test_name, uint, 64, 1, PRIx64, EXPECTED, comment);\t\t\\\n-    CHECK(test_name, poly, 8, 8, PRIx8, EXPECTED, comment);\t\t\\\n-    CHECK(test_name, poly, 16, 4, PRIx16, EXPECTED, comment);\t\t\\\n+    CHECK_POLY(test_name, poly, 8, 8, PRIx8, EXPECTED, comment);\t\\\n+    CHECK_POLY(test_name, poly, 16, 4, PRIx16, EXPECTED, comment);\t\\\n     CHECK_FP(test_name, float, 32, 2, PRIx32, EXPECTED, comment);\t\\\n \t\t\t\t\t\t\t\t\t\\\n     CHECK(test_name, int, 8, 16, PRIx8, EXPECTED, comment);\t\t\\\n@@ -230,8 +259,8 @@ extern ARRAY(expected, hfloat, 64, 2);\n     CHECK(test_name, uint, 16, 8, PRIx16, EXPECTED, comment);\t\t\\\n     CHECK(test_name, uint, 32, 4, PRIx32, EXPECTED, comment);\t\t\\\n     CHECK(test_name, uint, 64, 2, PRIx64, EXPECTED, comment);\t\t\\\n-    CHECK(test_name, poly, 8, 16, PRIx8, EXPECTED, comment);\t\t\\\n-    CHECK(test_name, poly, 16, 8, PRIx16, EXPECTED, comment);\t\t\\\n+    CHECK_POLY(test_name, poly, 8, 16, PRIx8, EXPECTED, comment);\t\\\n+    CHECK_POLY(test_name, poly, 16, 8, PRIx16, EXPECTED, comment);\t\\\n     CHECK_FP(test_name, float, 32, 4, PRIx32, EXPECTED, comment);\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n "}, {"sha": "7c5bca2ef70cf3dfce03956ba6591d89ab8341bb", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/p64_p128.c", "status": "modified", "additions": 75, "deletions": 75, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fp64_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fp64_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fp64_p128.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -196,8 +196,8 @@ int main (void)\n   TEST_VBSL(uint, , poly, p, 64, 1);\n   TEST_VBSL(uint, q, poly, p, 64, 2);\n \n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vbsl_expected, \"\");\n-  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vbsl_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vbsl_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vbsl_expected, \"\");\n \n   /* vceq_p64 tests. */\n #undef TEST_MSG\n@@ -248,7 +248,7 @@ int main (void)\n \n   TEST_VCOMBINE(poly, p, 64, 1, 2);\n \n-  CHECK(TEST_MSG, poly, 64, 2, PRIx16, vcombine_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vcombine_expected, \"\");\n \n   /* vcreate_p64 tests.  */\n #undef TEST_MSG\n@@ -271,7 +271,7 @@ int main (void)\n \n   TEST_VCREATE(poly, p, 64, 1);\n \n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vcreate_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vcreate_expected, \"\");\n \n   /* vdup_lane_p64 tests.  */\n #undef TEST_MSG\n@@ -295,8 +295,8 @@ int main (void)\n   TEST_VDUP_LANE(, poly, p, 64, 1, 1, 0);\n   TEST_VDUP_LANE(q, poly, p, 64, 2, 1, 0);\n \n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vdup_lane_expected, \"\");\n-  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vdup_lane_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vdup_lane_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vdup_lane_expected, \"\");\n \n   /* vdup_n_p64 tests.  */\n #undef TEST_MSG\n@@ -320,16 +320,16 @@ int main (void)\n \n     switch (i) {\n     case 0:\n-      CHECK(TEST_MSG, poly, 64, 1, PRIx64, vdup_n_expected0, \"\");\n-      CHECK(TEST_MSG, poly, 64, 2, PRIx64, vdup_n_expected0, \"\");\n+      CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vdup_n_expected0, \"\");\n+      CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vdup_n_expected0, \"\");\n       break;\n     case 1:\n-      CHECK(TEST_MSG, poly, 64, 1, PRIx64, vdup_n_expected1, \"\");\n-      CHECK(TEST_MSG, poly, 64, 2, PRIx64, vdup_n_expected1, \"\");\n+      CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vdup_n_expected1, \"\");\n+      CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vdup_n_expected1, \"\");\n       break;\n     case 2:\n-      CHECK(TEST_MSG, poly, 64, 1, PRIx64, vdup_n_expected2, \"\");\n-      CHECK(TEST_MSG, poly, 64, 2, PRIx64, vdup_n_expected2, \"\");\n+      CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vdup_n_expected2, \"\");\n+      CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vdup_n_expected2, \"\");\n       break;\n     default:\n       abort();\n@@ -366,8 +366,8 @@ int main (void)\n   TEST_VEXT(, poly, p, 64, 1, 0);\n   TEST_VEXT(q, poly, p, 64, 2, 1);\n \n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vext_expected, \"\");\n-  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vext_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vext_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vext_expected, \"\");\n \n   /* vget_low_p64 tests.  */\n #undef TEST_MSG\n@@ -387,7 +387,7 @@ int main (void)\n \n   TEST_VGET_LOW(poly, p, 64, 1, 2);\n \n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vget_low_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vget_low_expected, \"\");\n \n   /* vget_high_p64 tests.  */\n #undef TEST_MSG\n@@ -407,7 +407,7 @@ int main (void)\n \n   TEST_VGET_HIGH(poly, p, 64, 1, 2);\n \n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vget_high_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vget_high_expected, \"\");\n \n   /* vld1_p64 tests.  */\n #undef TEST_MSG\n@@ -429,8 +429,8 @@ int main (void)\n   TEST_VLD1(vld1_vector, buffer, , poly, p, 64, 1);\n   TEST_VLD1(vld1_vector, buffer, q, poly, p, 64, 2);\n \n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld1_expected, \"\");\n-  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vld1_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld1_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vld1_expected, \"\");\n \n   /* vld1_dup_p64 tests.  */\n #undef TEST_MSG\n@@ -454,16 +454,16 @@ int main (void)\n \n     switch (i) {\n     case 0:\n-      CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld1_dup_expected0, \"\");\n-      CHECK(TEST_MSG, poly, 64, 2, PRIx64, vld1_dup_expected0, \"\");\n+      CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld1_dup_expected0, \"\");\n+      CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vld1_dup_expected0, \"\");\n       break;\n     case 1:\n-      CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld1_dup_expected1, \"\");\n-      CHECK(TEST_MSG, poly, 64, 2, PRIx64, vld1_dup_expected1, \"\");\n+      CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld1_dup_expected1, \"\");\n+      CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vld1_dup_expected1, \"\");\n       break;\n     case 2:\n-      CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld1_dup_expected2, \"\");\n-      CHECK(TEST_MSG, poly, 64, 2, PRIx64, vld1_dup_expected2, \"\");\n+      CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld1_dup_expected2, \"\");\n+      CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vld1_dup_expected2, \"\");\n       break;\n     default:\n       abort();\n@@ -497,8 +497,8 @@ int main (void)\n   TEST_VLD1_LANE(, poly, p, 64, 1, 0);\n   TEST_VLD1_LANE(q, poly, p, 64, 2, 0);\n \n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld1_lane_expected, \"\");\n-  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vld1_lane_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld1_lane_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vld1_lane_expected, \"\");\n \n   /* vldX_p64 tests.  */\n #define DECL_VLDX(T1, W, N, X)\t\t\t\t\t\t\\\n@@ -535,37 +535,37 @@ int main (void)\n #define TEST_MSG \"VLD2/VLD2Q\"\n   CLEAN(result, poly, 64, 1);\n   TEST_VLDX(, poly, p, 64, 1, 2);\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld2_expected_0, \"chunk 0\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld2_expected_0, \"chunk 0\");\n   CLEAN(result, poly, 64, 1);\n   TEST_EXTRA_CHUNK(poly, 64, 1, 2, 1);\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld2_expected_1, \"chunk 1\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld2_expected_1, \"chunk 1\");\n \n #undef TEST_MSG\n #define TEST_MSG \"VLD3/VLD3Q\"\n   CLEAN(result, poly, 64, 1);\n   TEST_VLDX(, poly, p, 64, 1, 3);\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld3_expected_0, \"chunk 0\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld3_expected_0, \"chunk 0\");\n   CLEAN(result, poly, 64, 1);\n   TEST_EXTRA_CHUNK(poly, 64, 1, 3, 1);\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld3_expected_1, \"chunk 1\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld3_expected_1, \"chunk 1\");\n   CLEAN(result, poly, 64, 1);\n   TEST_EXTRA_CHUNK(poly, 64, 1, 3, 2);\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld3_expected_2, \"chunk 2\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld3_expected_2, \"chunk 2\");\n \n #undef TEST_MSG\n #define TEST_MSG \"VLD4/VLD4Q\"\n   CLEAN(result, poly, 64, 1);\n   TEST_VLDX(, poly, p, 64, 1, 4);\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld4_expected_0, \"chunk 0\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld4_expected_0, \"chunk 0\");\n   CLEAN(result, poly, 64, 1);\n   TEST_EXTRA_CHUNK(poly, 64, 1, 4, 1);\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld4_expected_1, \"chunk 1\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld4_expected_1, \"chunk 1\");\n   CLEAN(result, poly, 64, 1);\n   TEST_EXTRA_CHUNK(poly, 64, 1, 4, 2);\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld4_expected_2, \"chunk 2\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld4_expected_2, \"chunk 2\");\n   CLEAN(result, poly, 64, 1);\n   TEST_EXTRA_CHUNK(poly, 64, 1, 4, 3);\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld4_expected_3, \"chunk 3\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld4_expected_3, \"chunk 3\");\n \n   /* vldX_dup_p64 tests.  */\n #define DECL_VLDX_DUP(T1, W, N, X)\t\t\t\t\t\\\n@@ -596,37 +596,37 @@ int main (void)\n #define TEST_MSG \"VLD2_DUP/VLD2Q_DUP\"\n   CLEAN(result, poly, 64, 1);\n   TEST_VLDX_DUP(, poly, p, 64, 1, 2);\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld2_dup_expected_0, \"chunk 0\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld2_dup_expected_0, \"chunk 0\");\n   CLEAN(result, poly, 64, 1);\n   TEST_VLDX_DUP_EXTRA_CHUNK(poly, 64, 1, 2, 1);\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld2_dup_expected_1, \"chunk 1\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld2_dup_expected_1, \"chunk 1\");\n \n #undef TEST_MSG\n #define TEST_MSG \"VLD3_DUP/VLD3Q_DUP\"\n   CLEAN(result, poly, 64, 1);\n   TEST_VLDX_DUP(, poly, p, 64, 1, 3);\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld3_dup_expected_0, \"chunk 0\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld3_dup_expected_0, \"chunk 0\");\n   CLEAN(result, poly, 64, 1);\n   TEST_VLDX_DUP_EXTRA_CHUNK(poly, 64, 1, 3, 1);\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld3_dup_expected_1, \"chunk 1\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld3_dup_expected_1, \"chunk 1\");\n   CLEAN(result, poly, 64, 1);\n   TEST_VLDX_DUP_EXTRA_CHUNK(poly, 64, 1, 3, 2);\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld3_dup_expected_2, \"chunk 2\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld3_dup_expected_2, \"chunk 2\");\n \n #undef TEST_MSG\n #define TEST_MSG \"VLD4_DUP/VLD4Q_DUP\"\n   CLEAN(result, poly, 64, 1);\n   TEST_VLDX_DUP(, poly, p, 64, 1, 4);\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld4_dup_expected_0, \"chunk 0\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld4_dup_expected_0, \"chunk 0\");\n   CLEAN(result, poly, 64, 1);\n   TEST_VLDX_DUP_EXTRA_CHUNK(poly, 64, 1, 4, 1);\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld4_dup_expected_1, \"chunk 1\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld4_dup_expected_1, \"chunk 1\");\n   CLEAN(result, poly, 64, 1);\n   TEST_VLDX_DUP_EXTRA_CHUNK(poly, 64, 1, 4, 2);\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld4_dup_expected_2, \"chunk 2\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld4_dup_expected_2, \"chunk 2\");\n   CLEAN(result, poly, 64, 1);\n   TEST_VLDX_DUP_EXTRA_CHUNK(poly, 64, 1, 4, 3);\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld4_dup_expected_3, \"chunk 3\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vld4_dup_expected_3, \"chunk 3\");\n \n   /* vsli_p64 tests.  */\n #undef TEST_MSG\n@@ -661,8 +661,8 @@ int main (void)\n   TEST_VSXI(vsli, , poly, p, 64, 1, 3);\n   TEST_VSXI(vsli, q, poly, p, 64, 2, 53);\n \n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vsli_expected, \"\");\n-  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vsli_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vsli_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vsli_expected, \"\");\n \n   /* Test cases with maximum shift amount.  */\n   CLEAN(result, poly, 64, 1);\n@@ -672,8 +672,8 @@ int main (void)\n   TEST_VSXI(vsli, q, poly, p, 64, 2, 63);\n \n #define COMMENT \"(max shift amount)\"\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vsli_expected_max_shift, COMMENT);\n-  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vsli_expected_max_shift, COMMENT);\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vsli_expected_max_shift, COMMENT);\n+  CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vsli_expected_max_shift, COMMENT);\n \n   /* vsri_p64 tests.  */\n #undef TEST_MSG\n@@ -691,8 +691,8 @@ int main (void)\n   TEST_VSXI(vsri, , poly, p, 64, 1, 3);\n   TEST_VSXI(vsri, q, poly, p, 64, 2, 53);\n \n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vsri_expected, \"\");\n-  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vsri_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vsri_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vsri_expected, \"\");\n \n   /* Test cases with maximum shift amount.  */\n   CLEAN(result, poly, 64, 1);\n@@ -702,8 +702,8 @@ int main (void)\n   TEST_VSXI(vsri, q, poly, p, 64, 2, 64);\n \n #define COMMENT \"(max shift amount)\"\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vsri_expected_max_shift, COMMENT);\n-  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vsri_expected_max_shift, COMMENT);\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vsri_expected_max_shift, COMMENT);\n+  CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vsri_expected_max_shift, COMMENT);\n \n   /* vst1_lane_p64 tests.  */\n #undef TEST_MSG\n@@ -724,8 +724,8 @@ int main (void)\n   TEST_VST1_LANE(, poly, p, 64, 1, 0);\n   TEST_VST1_LANE(q, poly, p, 64, 2, 0);\n \n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vst1_lane_expected, \"\");\n-  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vst1_lane_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vst1_lane_expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vst1_lane_expected, \"\");\n \n #ifdef __aarch64__\n \n@@ -751,16 +751,16 @@ int main (void)\n \n     switch (i) {\n     case 0:\n-      CHECK(TEST_MSG, poly, 64, 1, PRIx64, vmov_n_expected0, \"\");\n-      CHECK(TEST_MSG, poly, 64, 2, PRIx64, vmov_n_expected0, \"\");\n+      CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vmov_n_expected0, \"\");\n+      CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vmov_n_expected0, \"\");\n       break;\n     case 1:\n-      CHECK(TEST_MSG, poly, 64, 1, PRIx64, vmov_n_expected1, \"\");\n-      CHECK(TEST_MSG, poly, 64, 2, PRIx64, vmov_n_expected1, \"\");\n+      CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vmov_n_expected1, \"\");\n+      CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vmov_n_expected1, \"\");\n       break;\n     case 2:\n-      CHECK(TEST_MSG, poly, 64, 1, PRIx64, vmov_n_expected2, \"\");\n-      CHECK(TEST_MSG, poly, 64, 2, PRIx64, vmov_n_expected2, \"\");\n+      CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vmov_n_expected2, \"\");\n+      CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vmov_n_expected2, \"\");\n       break;\n     default:\n       abort();\n@@ -780,8 +780,8 @@ int main (void)\n \t    TEST_MSG, __FILE__, __LINE__,\t\t\t\t   \\\n \t    STR(VECT_VAR(vget_lane_expected, T1, W, N)),\t\t   \\\n \t    STR(VECT_NAME(T1, W, N)),\t\t\t\t\t   \\\n-\t    VECT_VAR(vget_lane_vector, T1, W, N),\t\t\t   \\\n-\t    VECT_VAR(vget_lane_expected, T1, W, N));\t\t\t   \\\n+\t    (uint##W##_t)VECT_VAR(vget_lane_vector, T1, W, N),\t\t   \\\n+\t    (uint##W##_t)VECT_VAR(vget_lane_expected, T1, W, N));\t   \\\n     abort ();\t\t\t\t\t\t\t\t   \\\n   }\n \n@@ -864,9 +864,9 @@ VECT_VAR_DECL_INIT(buffer_vld4_lane, poly, 64, 4);\n   TEST_EXTRA_CHUNK(poly, 64, 1, X, Y) \\\n   TEST_EXTRA_CHUNK(poly, 64, 2, X, Y)\n \n-#define CHECK_RESULTS_VLD_STX_LANE(test_name,EXPECTED,comment)\t\\\n-  CHECK(test_name, poly, 64, 1, PRIx64, EXPECTED, comment);\t\\\n-  CHECK(test_name, poly, 64, 2, PRIx64, EXPECTED, comment);\n+#define CHECK_RESULTS_VLD_STX_LANE(test_name,EXPECTED,comment)\t\t\\\n+  CHECK_POLY(test_name, poly, 64, 1, PRIx64, EXPECTED, comment);\t\\\n+  CHECK_POLY(test_name, poly, 64, 2, PRIx64, EXPECTED, comment);\n \n   /* Declare the temporary buffers / variables.  */\n   DECL_ALL_VLD_STX_LANE(2);\n@@ -908,8 +908,8 @@ VECT_VAR_DECL_INIT(buffer_vld4_lane, poly, 64, 4);\n \n   TEST_ALL_EXTRA_CHUNKS(4, 1);\n   CHECK_RESULTS_VLD_STX_LANE (TEST_MSG, expected_vld_st4_1, \" chunk 1\");\n-  TEST_ALL_EXTRA_CHUNKS(4, 2);\n \n+  TEST_ALL_EXTRA_CHUNKS(4, 2);\n   CHECK_RESULTS_VLD_STX_LANE (TEST_MSG, expected_vld_st4_2, \" chunk 2\");\n \n   TEST_ALL_EXTRA_CHUNKS(4, 3);\n@@ -961,12 +961,12 @@ VECT_VAR_DECL_INIT(buffer_vld4_lane, poly, 64, 4);\n   TEST_ALL_VSTX_LANE(2);\n \n #define CMT \" (chunk 0)\"\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, expected_vld_st2_0, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, expected_vld_st2_0, CMT);\n \n   TEST_ALL_EXTRA_CHUNKS(2, 1);\n #undef CMT\n #define CMT \" chunk 1\"\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, expected_vld_st2_1, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, expected_vld_st2_1, CMT);\n \n   /* Check vst3_lane/vst3q_lane.  */\n   clean_results ();\n@@ -976,19 +976,19 @@ VECT_VAR_DECL_INIT(buffer_vld4_lane, poly, 64, 4);\n \n #undef CMT\n #define CMT \" (chunk 0)\"\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, expected_vld_st3_0, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, expected_vld_st3_0, CMT);\n \n   TEST_ALL_EXTRA_CHUNKS(3, 1);\n \n #undef CMT\n #define CMT \" (chunk 1)\"\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, expected_vld_st3_1, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, expected_vld_st3_1, CMT);\n \n   TEST_ALL_EXTRA_CHUNKS(3, 2);\n \n #undef CMT\n #define CMT \" (chunk 2)\"\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, expected_vld_st3_2, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, expected_vld_st3_2, CMT);\n \n   /* Check vst4_lane/vst4q_lane.  */\n   clean_results ();\n@@ -998,25 +998,25 @@ VECT_VAR_DECL_INIT(buffer_vld4_lane, poly, 64, 4);\n \n #undef CMT\n #define CMT \" (chunk 0)\"\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, expected_vld_st4_0, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, expected_vld_st4_0, CMT);\n \n   TEST_ALL_EXTRA_CHUNKS(4, 1);\n \n #undef CMT\n #define CMT \" (chunk 1)\"\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, expected_vld_st4_1, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, expected_vld_st4_1, CMT);\n \n   TEST_ALL_EXTRA_CHUNKS(4, 2);\n \n #undef CMT\n #define CMT \" (chunk 2)\"\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, expected_vld_st4_2, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, expected_vld_st4_2, CMT);\n \n   TEST_ALL_EXTRA_CHUNKS(4, 3);\n \n #undef CMT\n #define CMT \" (chunk 3)\"\n-  CHECK(TEST_MSG, poly, 64, 1, PRIx64, expected_vld_st4_3, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, expected_vld_st4_3, CMT);\n \n #endif /* __aarch64__.  */\n "}, {"sha": "30df2dd1190fab74bf78726d71ae8282a871300b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/unary_sat_op.inc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_sat_op.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_sat_op.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_sat_op.inc?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -61,11 +61,11 @@ void FNNAME (INSN_NAME) (void)\n   TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 32, 4, expected_cumulative_sat, \"\");\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, \"\");\n-  CHECK(TEST_MSG, int, 16, 4, PRIx8, expected, \"\");\n-  CHECK(TEST_MSG, int, 32, 2, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, \"\");\n-  CHECK(TEST_MSG, int, 16, 8, PRIx8, expected, \"\");\n-  CHECK(TEST_MSG, int, 32, 4, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n \n #ifdef EXTRA_TESTS\n   EXTRA_TESTS();"}, {"sha": "b2a898812b099823fc9eff1c26d9b9931d3909da", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcnt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcnt.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -65,10 +65,10 @@ FNNAME (INSN_NAME)\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, \"\");\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected, \"\");\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, \"\");\n   CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, \"\");\n-  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 16, PRIx8, expected, \"\");\n }\n \n int main (void)"}, {"sha": "e9d31d6dd9c61a41ede7716e6c9950a1f2919dc4", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcombine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcombine.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -93,8 +93,8 @@ void exec_vcombine (void)\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, \"\");\n-  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected, \"\");\n-  CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 16, PRIx8, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 16, 8, PRIx16, expected, \"\");\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected, \"\");\n #endif"}, {"sha": "c0b9c7ad3dc95cf1c6a1d5b0d15800323f03f1c5", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcreate.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcreate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcreate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcreate.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -106,8 +106,8 @@ FNNAME (INSN_NAME)\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected, \"\");\n-  CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 16, 4, PRIx16, expected, \"\");\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, \"\");\n #endif"}, {"sha": "b2d89bfb23acfb434cf794fa90a720db8ab8cc4f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vfms_vfma_n.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfms_vfma_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfms_vfma_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfms_vfma_n.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -345,13 +345,13 @@ void exec_vfma_vfms_n (void)\n \t\t VECT_VAR (vsrc_2, float, 64, 2), delem0);\n   vst1q_f64 (VECT_VAR (result, float, 64, 2),\n \t     VECT_VAR (vector_res, float, 64, 2));\n-  CHECK_FP (TEST_MSG, float, 64, 2, PRIx16, expectedfms0_static, \"\");\n+  CHECK_FP (TEST_MSG, float, 64, 2, PRIx64, expectedfms0_static, \"\");\n   VECT_VAR (vector_res, float, 64, 2) =\n     vfmaq_n_f64 (VECT_VAR (vsrc_1, float, 64, 2),\n \t\t VECT_VAR (vsrc_2, float, 64, 2), delem0);\n   vst1q_f64 (VECT_VAR (result, float, 64, 2),\n \t     VECT_VAR (vector_res, float, 64, 2));\n-  CHECK_FP (TEST_MSG, float, 64, 2, PRIx16, expectedfma0_static, \"\");\n+  CHECK_FP (TEST_MSG, float, 64, 2, PRIx64, expectedfma0_static, \"\");\n \n   VECT_VAR_DECL (buf_src_3, float, 64, 2) [] = {DA2, DA3};\n   VECT_VAR_DECL (buf_src_4, float, 64, 2) [] = {DB2, DB3};\n@@ -362,13 +362,13 @@ void exec_vfma_vfms_n (void)\n \t\t VECT_VAR (vsrc_2, float, 64, 2), delem1);\n   vst1q_f64 (VECT_VAR (result, float, 64, 2),\n \t     VECT_VAR (vector_res, float, 64, 2));\n-  CHECK_FP (TEST_MSG, float, 64, 2, PRIx16, expectedfms1_static, \"\");\n+  CHECK_FP (TEST_MSG, float, 64, 2, PRIx64, expectedfms1_static, \"\");\n   VECT_VAR (vector_res, float, 64, 2) =\n     vfmaq_n_f64 (VECT_VAR (vsrc_1, float, 64, 2),\n \t\t VECT_VAR (vsrc_2, float, 64, 2), delem1);\n   vst1q_f64 (VECT_VAR (result, float, 64, 2),\n \t     VECT_VAR (vector_res, float, 64, 2));\n-  CHECK_FP (TEST_MSG, float, 64, 2, PRIx16, expectedfma1_static, \"\");\n+  CHECK_FP (TEST_MSG, float, 64, 2, PRIx64, expectedfma1_static, \"\");\n \n   VECT_VAR_DECL (buf_src_5, float, 64, 2) [] = {DA4, DA5};\n   VECT_VAR_DECL (buf_src_6, float, 64, 2) [] = {DB4, DB5};\n@@ -379,13 +379,13 @@ void exec_vfma_vfms_n (void)\n \t\t VECT_VAR (vsrc_2, float, 64, 2), delem2);\n   vst1q_f64 (VECT_VAR (result, float, 64, 2),\n \t     VECT_VAR (vector_res, float, 64, 2));\n-  CHECK_FP (TEST_MSG, float, 64, 2, PRIx16, expectedfms2_static, \"\");\n+  CHECK_FP (TEST_MSG, float, 64, 2, PRIx64, expectedfms2_static, \"\");\n   VECT_VAR (vector_res, float, 64, 2) =\n     vfmaq_n_f64 (VECT_VAR (vsrc_1, float, 64, 2),\n \t\t VECT_VAR (vsrc_2, float, 64, 2), delem2);\n   vst1q_f64 (VECT_VAR (result, float, 64, 2),\n \t     VECT_VAR (vector_res, float, 64, 2));\n-  CHECK_FP (TEST_MSG, float, 64, 2, PRIx16, expectedfma2_static, \"\");\n+  CHECK_FP (TEST_MSG, float, 64, 2, PRIx64, expectedfma2_static, \"\");\n \n   VECT_VAR_DECL (buf_src_7, float, 64, 2) [] = {DA6, DA7};\n   VECT_VAR_DECL (buf_src_8, float, 64, 2) [] = {DB6, DB7};\n@@ -396,13 +396,13 @@ void exec_vfma_vfms_n (void)\n \t\t VECT_VAR (vsrc_2, float, 64, 2), delem3);\n   vst1q_f64 (VECT_VAR (result, float, 64, 2),\n \t     VECT_VAR (vector_res, float, 64, 2));\n-  CHECK_FP (TEST_MSG, float, 64, 2, PRIx16, expectedfms3_static, \"\");\n+  CHECK_FP (TEST_MSG, float, 64, 2, PRIx64, expectedfms3_static, \"\");\n   VECT_VAR (vector_res, float, 64, 2) =\n     vfmaq_n_f64 (VECT_VAR (vsrc_1, float, 64, 2),\n \t\t VECT_VAR (vsrc_2, float, 64, 2), delem3);\n   vst1q_f64 (VECT_VAR (result, float, 64, 2),\n \t     VECT_VAR (vector_res, float, 64, 2));\n-  CHECK_FP (TEST_MSG, float, 64, 2, PRIx16, expectedfma3_static, \"\");\n+  CHECK_FP (TEST_MSG, float, 64, 2, PRIx64, expectedfma3_static, \"\");\n \n #undef TEST_MSG\n #define TEST_MSG \"VFMS_VFMA_N (FP64)\"\n@@ -419,13 +419,13 @@ void exec_vfma_vfms_n (void)\n \t\tVECT_VAR (vsrc_2, float, 64, 1), delem0);\n   vst1_f64 (VECT_VAR (result, float, 64, 1),\n \t     VECT_VAR (vector_res, float, 64, 1));\n-  CHECK_FP (TEST_MSG, float, 64, 1, PRIx16, expectedfms0_static, \"\");\n+  CHECK_FP (TEST_MSG, float, 64, 1, PRIx64, expectedfms0_static, \"\");\n   VECT_VAR (vector_res, float, 64, 1) =\n     vfma_n_f64 (VECT_VAR (vsrc_1, float, 64, 1),\n \t\tVECT_VAR (vsrc_2, float, 64, 1), delem0);\n   vst1_f64 (VECT_VAR (result, float, 64, 1),\n \t     VECT_VAR (vector_res, float, 64, 1));\n-  CHECK_FP (TEST_MSG, float, 64, 1, PRIx16, expectedfma0_static, \"\");\n+  CHECK_FP (TEST_MSG, float, 64, 1, PRIx64, expectedfma0_static, \"\");\n \n   VECT_VAR_DECL (buf_src_3, float, 64, 1) [] = {DA2};\n   VECT_VAR_DECL (buf_src_4, float, 64, 1) [] = {DB2};\n@@ -436,13 +436,13 @@ void exec_vfma_vfms_n (void)\n \t\tVECT_VAR (vsrc_2, float, 64, 1), delem1);\n   vst1_f64 (VECT_VAR (result, float, 64, 1),\n \t     VECT_VAR (vector_res, float, 64, 1));\n-  CHECK_FP (TEST_MSG, float, 64, 1, PRIx16, expectedfms1_static, \"\");\n+  CHECK_FP (TEST_MSG, float, 64, 1, PRIx64, expectedfms1_static, \"\");\n   VECT_VAR (vector_res, float, 64, 1) =\n     vfma_n_f64 (VECT_VAR (vsrc_1, float, 64, 1),\n \t\tVECT_VAR (vsrc_2, float, 64, 1), delem1);\n   vst1_f64 (VECT_VAR (result, float, 64, 1),\n \t     VECT_VAR (vector_res, float, 64, 1));\n-  CHECK_FP (TEST_MSG, float, 64, 1, PRIx16, expectedfma1_static, \"\");\n+  CHECK_FP (TEST_MSG, float, 64, 1, PRIx64, expectedfma1_static, \"\");\n \n   VECT_VAR_DECL (buf_src_5, float, 64, 1) [] = {DA4};\n   VECT_VAR_DECL (buf_src_6, float, 64, 1) [] = {DB4};\n@@ -453,13 +453,13 @@ void exec_vfma_vfms_n (void)\n \t\tVECT_VAR (vsrc_2, float, 64, 1), delem2);\n   vst1_f64 (VECT_VAR (result, float, 64, 1),\n \t     VECT_VAR (vector_res, float, 64, 1));\n-  CHECK_FP (TEST_MSG, float, 64, 1, PRIx16, expectedfms2_static, \"\");\n+  CHECK_FP (TEST_MSG, float, 64, 1, PRIx64, expectedfms2_static, \"\");\n   VECT_VAR (vector_res, float, 64, 1) =\n     vfma_n_f64 (VECT_VAR (vsrc_1, float, 64, 1),\n \t\tVECT_VAR (vsrc_2, float, 64, 1), delem2);\n   vst1_f64 (VECT_VAR (result, float, 64, 1),\n \t     VECT_VAR (vector_res, float, 64, 1));\n-  CHECK_FP (TEST_MSG, float, 64, 1, PRIx16, expectedfma2_static, \"\");\n+  CHECK_FP (TEST_MSG, float, 64, 1, PRIx64, expectedfma2_static, \"\");\n \n   VECT_VAR_DECL (buf_src_7, float, 64, 1) [] = {DA6};\n   VECT_VAR_DECL (buf_src_8, float, 64, 1) [] = {DB6};\n@@ -470,13 +470,13 @@ void exec_vfma_vfms_n (void)\n \t\tVECT_VAR (vsrc_2, float, 64, 1), delem3);\n   vst1_f64 (VECT_VAR (result, float, 64, 1),\n \t     VECT_VAR (vector_res, float, 64, 1));\n-  CHECK_FP (TEST_MSG, float, 64, 1, PRIx16, expectedfms3_static, \"\");\n+  CHECK_FP (TEST_MSG, float, 64, 1, PRIx64, expectedfms3_static, \"\");\n   VECT_VAR (vector_res, float, 64, 1) =\n     vfma_n_f64 (VECT_VAR (vsrc_1, float, 64, 1),\n \t\tVECT_VAR (vsrc_2, float, 64, 1), delem3);\n   vst1_f64 (VECT_VAR (result, float, 64, 1),\n \t     VECT_VAR (vector_res, float, 64, 1));\n-  CHECK_FP (TEST_MSG, float, 64, 1, PRIx16, expectedfma3_static, \"\");\n+  CHECK_FP (TEST_MSG, float, 64, 1, PRIx64, expectedfma3_static, \"\");\n }\n #endif\n "}, {"sha": "f3b14ce507102d70c74adec98e93c6da83d138dd", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vget_high.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_high.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_high.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_high.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -63,8 +63,8 @@ void exec_vget_high (void)\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected, \"\");\n-  CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 16, 4, PRIx16, expected, \"\");\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected, \"\");\n }\n "}, {"sha": "e334e3568e13652a74e44b37521eee0e139605ee", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vget_low.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_low.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -63,8 +63,8 @@ void exec_vget_low (void)\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected, \"\");\n-  CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 16, 4, PRIx16, expected, \"\");\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, \"\");\n #endif"}, {"sha": "8a5fc22ff6c41922143570b74b06d813e6def60f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vldX.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -528,8 +528,8 @@ void exec_vldX (void)\n     CHECK(test_name, uint, 16, 4, PRIx16, EXPECTED, comment);\t\t\\\n     CHECK(test_name, uint, 32, 2, PRIx32, EXPECTED, comment);\t\t\\\n     CHECK(test_name, uint, 64, 1, PRIx64, EXPECTED, comment);\t\t\\\n-    CHECK(test_name, poly, 8, 8, PRIx8, EXPECTED, comment);\t\t\\\n-    CHECK(test_name, poly, 16, 4, PRIx16, EXPECTED, comment);\t\t\\\n+    CHECK_POLY(test_name, poly, 8, 8, PRIx8, EXPECTED, comment);\t\\\n+    CHECK_POLY(test_name, poly, 16, 4, PRIx16, EXPECTED, comment);\t\\\n     CHECK_FP(test_name, float, 32, 2, PRIx32, EXPECTED, comment);\t\\\n \t\t\t\t\t\t\t\t\t\\\n     CHECK(test_name, int, 8, 16, PRIx8, EXPECTED, comment);\t\t\\\n@@ -538,8 +538,8 @@ void exec_vldX (void)\n     CHECK(test_name, uint, 8, 16, PRIx8, EXPECTED, comment);\t\t\\\n     CHECK(test_name, uint, 16, 8, PRIx16, EXPECTED, comment);\t\t\\\n     CHECK(test_name, uint, 32, 4, PRIx32, EXPECTED, comment);\t\t\\\n-    CHECK(test_name, poly, 8, 16, PRIx8, EXPECTED, comment);\t\t\\\n-    CHECK(test_name, poly, 16, 8, PRIx16, EXPECTED, comment);\t\t\\\n+    CHECK_POLY(test_name, poly, 8, 16, PRIx8, EXPECTED, comment);\t\\\n+    CHECK_POLY(test_name, poly, 16, 8, PRIx16, EXPECTED, comment);\t\\\n     CHECK_FP(test_name, float, 32, 4, PRIx32, EXPECTED, comment)\n \n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)"}, {"sha": "903d306b6c7098b7881e72c4a7ef66ecef3ea5fa", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vldX_dup.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_dup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_dup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_dup.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -270,8 +270,8 @@ void exec_vldX_dup (void)\n     CHECK(test_name, uint, 16, 4, PRIx16, EXPECTED, comment);\t\t\\\n     CHECK(test_name, uint, 32, 2, PRIx32, EXPECTED, comment);\t\t\\\n     CHECK(test_name, uint, 64, 1, PRIx64, EXPECTED, comment);\t\t\\\n-    CHECK(test_name, poly, 8, 8, PRIx8, EXPECTED, comment);\t\t\\\n-    CHECK(test_name, poly, 16, 4, PRIx16, EXPECTED, comment);\t\t\\\n+    CHECK_POLY(test_name, poly, 8, 8, PRIx8, EXPECTED, comment);\t\\\n+    CHECK_POLY(test_name, poly, 16, 4, PRIx16, EXPECTED, comment);\t\\\n     CHECK_FP(test_name, float, 32, 2, PRIx32, EXPECTED, comment)\n \n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)"}, {"sha": "9651b701e6efc30d544ee661ada14e4d49fd5dba", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vldX_lane.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_lane.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -451,14 +451,14 @@ void exec_vldX_lane (void)\n     CHECK(test_name, uint, 8, 8, PRIx8, EXPECTED, comment);\t\t\\\n     CHECK(test_name, uint, 16, 4, PRIx16, EXPECTED, comment);\t\t\\\n     CHECK(test_name, uint, 32, 2, PRIx32, EXPECTED, comment);\t\t\\\n-    CHECK(test_name, poly, 8, 8, PRIx8, EXPECTED, comment);\t\t\\\n-    CHECK(test_name, poly, 16, 4, PRIx16, EXPECTED, comment);\t\t\\\n+    CHECK_POLY(test_name, poly, 8, 8, PRIx8, EXPECTED, comment);\t\\\n+    CHECK_POLY(test_name, poly, 16, 4, PRIx16, EXPECTED, comment);\t\\\n     CHECK_FP(test_name, float, 32, 2, PRIx32, EXPECTED, comment);\t\\\n     CHECK(test_name, int, 16, 8, PRIx16, EXPECTED, comment);\t\t\\\n     CHECK(test_name, int, 32, 4, PRIx32, EXPECTED, comment);\t\t\\\n     CHECK(test_name, uint, 16, 8, PRIx16, EXPECTED, comment);\t\t\\\n     CHECK(test_name, uint, 32, 4, PRIx32, EXPECTED, comment);\t\t\\\n-    CHECK(test_name, poly, 16, 8, PRIx16, EXPECTED, comment);\t\t\\\n+    CHECK_POLY(test_name, poly, 16, 8, PRIx16, EXPECTED, comment);\t\\\n     CHECK_FP(test_name, float, 32, 4, PRIx32, EXPECTED, comment)\n \n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)"}, {"sha": "7a11d29df1e20b0094c7156a6005ce9606cc1347", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmovn.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmovn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmovn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmovn.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -35,11 +35,11 @@ void exec_vmovn (void)\n   TEST_VMOVN(uint, u, 32, 16, 4);\n   TEST_VMOVN(uint, u, 64, 32, 2);\n \n-  CHECK(TEST_MSG, int, 8, 8, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, int, 16, 4, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, uint, 8, 8, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, uint, 16, 4, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n }\n "}, {"sha": "6a74e9a475a7e6c3105f896deef79bce0376464d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmul.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -171,15 +171,15 @@ void FNNAME (INSN_NAME) (void)\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, \"\");\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected, \"\");\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, \"\");\n   CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, \"\");\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 16, PRIx8, expected, \"\");\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected, \"\");\n #if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n   CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, \"\");"}, {"sha": "a2c9226008baea8358368c0ebddc681374449c17", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmul_lane.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul_lane.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -116,17 +116,17 @@ void exec_vmul_lane (void)\n #endif\n   TEST_VMUL_LANE(q, float, f, 32, 4, 2, 0);\n \n-  CHECK(TEST_MSG, int, 16, 4, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, uint, 16, 4, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n #if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n   CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, \"\");\n #endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, int, 16, 8, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, uint, 16, 8, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n #if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n   CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected, \"\");"}, {"sha": "c66b9f516b7df19200a749ada61531fca6b92a6f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmul_n.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul_n.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -102,17 +102,17 @@ void FNNAME (INSN_NAME) (void)\n #endif\n   TEST_VMUL_N(q, float, f, 32, 4, 88.9f);\n \n-  CHECK(TEST_MSG, int, 16, 4, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, uint, 16, 4, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n #if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n   CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, \"\");\n #endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, int, 16, 8, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, uint, 16, 8, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n #if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n   CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected, \"\");"}, {"sha": "cb14b63f23fccb06d9693bf8324cc408047112b4", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmull.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmull.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmull.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmull.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -59,13 +59,13 @@ void exec_vmull (void)\n   TEST_VMULL(uint, u, 32, 64, 2);\n   TEST_VMULL(poly, p, 8, 16, 8);\n \n-  CHECK(TEST_MSG, int, 16, 8, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, int, 64, 2, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, uint, 16, 8, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, uint, 64, 2, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 16, 8, PRIx16, expected, \"\");\n }\n \n int main (void)"}, {"sha": "c70c878b381cba313732e90063dc23a1bdead00a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmull_lane.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmull_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmull_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmull_lane.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -54,9 +54,9 @@ void exec_vmull_lane (void)\n   TEST_VMULL_LANE(uint, u, 32, 64, 2, 1);\n \n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, int, 64, 2, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, uint, 64, 2, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, \"\");\n }\n \n int main (void)"}, {"sha": "4333f4f4b790354226376e8629be30067b1d011a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmvn.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmvn.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -120,14 +120,14 @@ FNNAME (INSN_NAME)\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, \"\");\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected, \"\");\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, \"\");\n   CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, \"\");\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 16, PRIx8, expected, \"\");\n }\n \n int main (void)"}, {"sha": "eb6dd4243fe548755fafb5f447438c8d92d450c4", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vpXXX.inc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvpXXX.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvpXXX.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvpXXX.inc?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -63,11 +63,11 @@ void FNNAME (INSN_NAME) (void)\n #endif\n   TEST_VPXXX(INSN_NAME, float, f, 32, 2);\n \n-  CHECK(TEST_MSG, int, 8, 8, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, int, 16, 4, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, uint, 8, 8, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, uint, 16, 4, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n #if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n   CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, \"\");"}, {"sha": "03d25c4922cc9030e63afbb6aea9689a869ca145", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqabs.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqabs.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -90,9 +90,9 @@ void vqabs_extra()\n   TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 32, 4, expected_cumulative_sat_min_neg, MSG);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_min_neg, MSG);\n-  CHECK(TEST_MSG, int, 16, 4, PRIx8, expected_min_neg, MSG);\n-  CHECK(TEST_MSG, int, 32, 2, PRIx8, expected_min_neg, MSG);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_min_neg, MSG);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_min_neg, MSG);\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_min_neg, MSG);\n-  CHECK(TEST_MSG, int, 16, 8, PRIx8, expected_min_neg, MSG);\n-  CHECK(TEST_MSG, int, 32, 4, PRIx8, expected_min_neg, MSG);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_min_neg, MSG);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_min_neg, MSG);\n }"}, {"sha": "5caebceff64348564efef2554abe89f259481251", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqdmull.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmull.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmull.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmull.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -63,8 +63,8 @@ void FNNAME (INSN_NAME) (void)\n   TEST_VQDMULL(int, s, 16, 32, 4, expected_cumulative_sat, \"\");\n   TEST_VQDMULL(int, s, 32, 64, 2, expected_cumulative_sat, \"\");\n \n-  CHECK (TEST_MSG, int, 32, 4, PRIx16, expected, \"\");\n-  CHECK (TEST_MSG, int, 64, 2, PRIx32, expected, \"\");\n+  CHECK (TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n+  CHECK (TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n \n   VDUP(vector, , int, s, 16, 4, 0x8000);\n   VDUP(vector2, , int, s, 16, 4, 0x8000);\n@@ -75,8 +75,8 @@ void FNNAME (INSN_NAME) (void)\n   TEST_VQDMULL(int, s, 16, 32, 4, expected_cumulative_sat2, TEST_MSG2);\n   TEST_VQDMULL(int, s, 32, 64, 2, expected_cumulative_sat2, TEST_MSG2);\n \n-  CHECK (TEST_MSG, int, 32, 4, PRIx16, expected2, TEST_MSG2);\n-  CHECK (TEST_MSG, int, 64, 2, PRIx32, expected2, TEST_MSG2);\n+  CHECK (TEST_MSG, int, 32, 4, PRIx32, expected2, TEST_MSG2);\n+  CHECK (TEST_MSG, int, 64, 2, PRIx64, expected2, TEST_MSG2);\n }\n \n int main (void)"}, {"sha": "5126ac9054007b3d78a366799de6ecf7e524944a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqneg.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqneg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqneg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqneg.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -90,9 +90,9 @@ void vqneg_extra()\n   TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 32, 4, expected_cumulative_sat_min_neg, MSG);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_min_neg, MSG);\n-  CHECK(TEST_MSG, int, 16, 4, PRIx8, expected_min_neg, MSG);\n-  CHECK(TEST_MSG, int, 32, 2, PRIx8, expected_min_neg, MSG);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_min_neg, MSG);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_min_neg, MSG);\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_min_neg, MSG);\n-  CHECK(TEST_MSG, int, 16, 8, PRIx8, expected_min_neg, MSG);\n-  CHECK(TEST_MSG, int, 32, 4, PRIx8, expected_min_neg, MSG);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_min_neg, MSG);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_min_neg, MSG);\n }"}, {"sha": "2a32f3f975ad1ca0ec4accd16cceeec81c23b9c8", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqtbX.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqtbX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqtbX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqtbX.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -318,13 +318,13 @@ void exec_vqtbX (void)\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vqtbl1, \"\");\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vqtbl1, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vqtbl1, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_vqtbl1, \"\");\n \n #undef TEST_MSG\n #define TEST_MSG \"VQTBL1Q\"\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_vqtbl1q, \"\");\n   CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_vqtbl1q, \"\");\n-  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected_vqtbl1q, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 16, PRIx8, expected_vqtbl1q, \"\");\n \n   /* Check vqtbl2.  */\n   clean_results ();\n@@ -334,13 +334,13 @@ void exec_vqtbX (void)\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vqtbl2, \"\");\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vqtbl2, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vqtbl2, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_vqtbl2, \"\");\n \n #undef TEST_MSG\n #define TEST_MSG \"VQTBL2Q\"\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_vqtbl2q, \"\");\n   CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_vqtbl2q, \"\");\n-  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected_vqtbl2q, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 16, PRIx8, expected_vqtbl2q, \"\");\n \n   /* Check vqtbl3.  */\n   clean_results ();\n@@ -350,13 +350,13 @@ void exec_vqtbX (void)\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vqtbl3, \"\");\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vqtbl3, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vqtbl3, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_vqtbl3, \"\");\n \n #undef TEST_MSG\n #define TEST_MSG \"VQTBL3Q\"\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_vqtbl3q, \"\");\n   CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_vqtbl3q, \"\");\n-  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected_vqtbl3q, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 16, PRIx8, expected_vqtbl3q, \"\");\n \n   /* Check vqtbl4.  */\n   clean_results ();\n@@ -366,13 +366,13 @@ void exec_vqtbX (void)\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vqtbl4, \"\");\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vqtbl4, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vqtbl4, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_vqtbl4, \"\");\n \n #undef TEST_MSG\n #define TEST_MSG \"VQTBL4Q\"\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_vqtbl4q, \"\");\n   CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_vqtbl4q, \"\");\n-  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected_vqtbl4q, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 16, PRIx8, expected_vqtbl4q, \"\");\n \n \n   /* Now test VQTBX.  */\n@@ -455,13 +455,13 @@ void exec_vqtbX (void)\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vqtbx1, \"\");\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vqtbx1, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vqtbx1, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_vqtbx1, \"\");\n \n #undef TEST_MSG\n #define TEST_MSG \"VQTBX1Q\"\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_vqtbx1q, \"\");\n   CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_vqtbx1q, \"\");\n-  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected_vqtbx1q, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 16, PRIx8, expected_vqtbx1q, \"\");\n \n   /* Check vqtbx2.  */\n   clean_results ();\n@@ -471,13 +471,13 @@ void exec_vqtbX (void)\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vqtbx2, \"\");\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vqtbx2, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vqtbx2, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_vqtbx2, \"\");\n \n #undef TEST_MSG\n #define TEST_MSG \"VQTBX2Q\"\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_vqtbx2q, \"\");\n   CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_vqtbx2q, \"\");\n-  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected_vqtbx2q, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 16, PRIx8, expected_vqtbx2q, \"\");\n \n   /* Check vqtbx3.  */\n   clean_results ();\n@@ -487,13 +487,13 @@ void exec_vqtbX (void)\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vqtbx3, \"\");\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vqtbx3, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vqtbx3, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_vqtbx3, \"\");\n \n #undef TEST_MSG\n #define TEST_MSG \"VQTBX3Q\"\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_vqtbx3q, \"\");\n   CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_vqtbx3q, \"\");\n-  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected_vqtbx3q, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 16, PRIx8, expected_vqtbx3q, \"\");\n \n   /* Check vqtbx4.  */\n   clean_results ();\n@@ -503,13 +503,13 @@ void exec_vqtbX (void)\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vqtbx4, \"\");\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vqtbx4, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vqtbx4, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_vqtbx4, \"\");\n \n #undef TEST_MSG\n #define TEST_MSG \"VQTBX4Q\"\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_vqtbx4q, \"\");\n   CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_vqtbx4q, \"\");\n-  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected_vqtbx4q, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 16, PRIx8, expected_vqtbx4q, \"\");\n }\n \n int main (void)"}, {"sha": "25b348223f3dbffa14176d5b1be9d80e63561381", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p128.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p128.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -104,7 +104,7 @@ int main (void)\n     vreinterpret##Q##_##T2##W##_##TS2##WS(VECT_VAR(vreint_vector, TS1, WS, NS))); \\\n   vst1##Q##_##T2##64(VECT_VAR(result, poly, 64, 2),\t\t\t\\\n                      VECT_VAR(vreint_vector_res, poly, 64, 2));\t\t\\\n-  CHECK(TEST_MSG, T1, 64, 2, PRIx##64, EXPECTED, \"\");\n+  CHECK_POLY(TEST_MSG, T1, 64, 2, PRIx##64, EXPECTED, \"\");\n \n   TEST_VREINTERPRET128(q, poly, p, 128, 1, int, s, 8, 16, vreint_expected_q_p128_s8);\n   TEST_VREINTERPRET128(q, poly, p, 128, 1, int, s, 16, 8, vreint_expected_q_p128_s16);"}, {"sha": "6a46e7979e1359acb2fb9757241f3a6ecaf45ef0", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p64.c", "status": "modified", "additions": 35, "deletions": 28, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p64.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -114,6 +114,13 @@ int main (void)\n \t\t    VECT_VAR(vreint_vector_res, T1, W, N));\t\t\\\n   CHECK(TEST_MSG, T1, W, N, PRIx##W, EXPECTED, \"\");\n \n+#define TEST_VREINTERPRET_TO_POLY(Q, T1, T2, W, N, TS1, TS2, WS, NS, EXPECTED)\t\\\n+  VECT_VAR(vreint_vector_res, T1, W, N) =\t\t\t\t\\\n+    vreinterpret##Q##_##T2##W##_##TS2##WS(VECT_VAR(vreint_vector, TS1, WS, NS)); \\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n+\t\t    VECT_VAR(vreint_vector_res, T1, W, N));\t\t\\\n+  CHECK_POLY(TEST_MSG, T1, W, N, PRIx##W, EXPECTED, \"\");\n+\n #define TEST_VREINTERPRET_FP(Q, T1, T2, W, N, TS1, TS2, WS, NS, EXPECTED) \\\n   VECT_VAR(vreint_vector_res, T1, W, N) =\t\t\t\t\\\n     vreinterpret##Q##_##T2##W##_##TS2##WS(VECT_VAR(vreint_vector, TS1, WS, NS)); \\\n@@ -139,38 +146,38 @@ int main (void)\n   /* vreinterpret_p64_* tests.  */\n #undef TEST_MSG\n #define TEST_MSG \"VREINTERPRET_P64_*\"\n-  TEST_VREINTERPRET(, poly, p, 64, 1, int, s, 8, 8, vreint_expected_p64_s8);\n-  TEST_VREINTERPRET(, poly, p, 64, 1, int, s, 16, 4, vreint_expected_p64_s16);\n-  TEST_VREINTERPRET(, poly, p, 64, 1, int, s, 32, 2, vreint_expected_p64_s32);\n-  TEST_VREINTERPRET(, poly, p, 64, 1, int, s, 64, 1, vreint_expected_p64_s64);\n-  TEST_VREINTERPRET(, poly, p, 64, 1, uint, u, 8, 8, vreint_expected_p64_u8);\n-  TEST_VREINTERPRET(, poly, p, 64, 1, uint, u, 16, 4, vreint_expected_p64_u16);\n-  TEST_VREINTERPRET(, poly, p, 64, 1, uint, u, 32, 2, vreint_expected_p64_u32);\n-  TEST_VREINTERPRET(, poly, p, 64, 1, uint, u, 64, 1, vreint_expected_p64_u64);\n-  TEST_VREINTERPRET(, poly, p, 64, 1, poly, p, 8, 8, vreint_expected_p64_p8);\n-  TEST_VREINTERPRET(, poly, p, 64, 1, poly, p, 16, 4, vreint_expected_p64_p16);\n+  TEST_VREINTERPRET_TO_POLY(, poly, p, 64, 1, int, s, 8, 8, vreint_expected_p64_s8);\n+  TEST_VREINTERPRET_TO_POLY(, poly, p, 64, 1, int, s, 16, 4, vreint_expected_p64_s16);\n+  TEST_VREINTERPRET_TO_POLY(, poly, p, 64, 1, int, s, 32, 2, vreint_expected_p64_s32);\n+  TEST_VREINTERPRET_TO_POLY(, poly, p, 64, 1, int, s, 64, 1, vreint_expected_p64_s64);\n+  TEST_VREINTERPRET_TO_POLY(, poly, p, 64, 1, uint, u, 8, 8, vreint_expected_p64_u8);\n+  TEST_VREINTERPRET_TO_POLY(, poly, p, 64, 1, uint, u, 16, 4, vreint_expected_p64_u16);\n+  TEST_VREINTERPRET_TO_POLY(, poly, p, 64, 1, uint, u, 32, 2, vreint_expected_p64_u32);\n+  TEST_VREINTERPRET_TO_POLY(, poly, p, 64, 1, uint, u, 64, 1, vreint_expected_p64_u64);\n+  TEST_VREINTERPRET_TO_POLY(, poly, p, 64, 1, poly, p, 8, 8, vreint_expected_p64_p8);\n+  TEST_VREINTERPRET_TO_POLY(, poly, p, 64, 1, poly, p, 16, 4, vreint_expected_p64_p16);\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n-  TEST_VREINTERPRET(, poly, p, 64, 1, float, f, 16, 4, vreint_expected_p64_f16);\n+  TEST_VREINTERPRET_TO_POLY(, poly, p, 64, 1, float, f, 16, 4, vreint_expected_p64_f16);\n #endif\n-  TEST_VREINTERPRET(, poly, p, 64, 1, float, f, 32, 2, vreint_expected_p64_f32);\n+  TEST_VREINTERPRET_TO_POLY(, poly, p, 64, 1, float, f, 32, 2, vreint_expected_p64_f32);\n \n   /* vreinterpretq_p64_* tests.  */\n #undef TEST_MSG\n #define TEST_MSG \"VREINTERPRETQ_P64_*\"\n-  TEST_VREINTERPRET(q, poly, p, 64, 2, int, s, 8, 16, vreint_expected_q_p64_s8);\n-  TEST_VREINTERPRET(q, poly, p, 64, 2, int, s, 16, 8, vreint_expected_q_p64_s16);\n-  TEST_VREINTERPRET(q, poly, p, 64, 2, int, s, 32, 4, vreint_expected_q_p64_s32);\n-  TEST_VREINTERPRET(q, poly, p, 64, 2, int, s, 64, 2, vreint_expected_q_p64_s64);\n-  TEST_VREINTERPRET(q, poly, p, 64, 2, uint, u, 8, 16, vreint_expected_q_p64_u8);\n-  TEST_VREINTERPRET(q, poly, p, 64, 2, uint, u, 16, 8, vreint_expected_q_p64_u16);\n-  TEST_VREINTERPRET(q, poly, p, 64, 2, uint, u, 32, 4, vreint_expected_q_p64_u32);\n-  TEST_VREINTERPRET(q, poly, p, 64, 2, uint, u, 64, 2, vreint_expected_q_p64_u64);\n-  TEST_VREINTERPRET(q, poly, p, 64, 2, poly, p, 8, 16, vreint_expected_q_p64_p8);\n-  TEST_VREINTERPRET(q, poly, p, 64, 2, poly, p, 16, 8, vreint_expected_q_p64_p16);\n+  TEST_VREINTERPRET_TO_POLY(q, poly, p, 64, 2, int, s, 8, 16, vreint_expected_q_p64_s8);\n+  TEST_VREINTERPRET_TO_POLY(q, poly, p, 64, 2, int, s, 16, 8, vreint_expected_q_p64_s16);\n+  TEST_VREINTERPRET_TO_POLY(q, poly, p, 64, 2, int, s, 32, 4, vreint_expected_q_p64_s32);\n+  TEST_VREINTERPRET_TO_POLY(q, poly, p, 64, 2, int, s, 64, 2, vreint_expected_q_p64_s64);\n+  TEST_VREINTERPRET_TO_POLY(q, poly, p, 64, 2, uint, u, 8, 16, vreint_expected_q_p64_u8);\n+  TEST_VREINTERPRET_TO_POLY(q, poly, p, 64, 2, uint, u, 16, 8, vreint_expected_q_p64_u16);\n+  TEST_VREINTERPRET_TO_POLY(q, poly, p, 64, 2, uint, u, 32, 4, vreint_expected_q_p64_u32);\n+  TEST_VREINTERPRET_TO_POLY(q, poly, p, 64, 2, uint, u, 64, 2, vreint_expected_q_p64_u64);\n+  TEST_VREINTERPRET_TO_POLY(q, poly, p, 64, 2, poly, p, 8, 16, vreint_expected_q_p64_p8);\n+  TEST_VREINTERPRET_TO_POLY(q, poly, p, 64, 2, poly, p, 16, 8, vreint_expected_q_p64_p16);\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n-  TEST_VREINTERPRET(q, poly, p, 64, 2, float, f, 16, 8, vreint_expected_q_p64_f16);\n+  TEST_VREINTERPRET_TO_POLY(q, poly, p, 64, 2, float, f, 16, 8, vreint_expected_q_p64_f16);\n #endif\n-  TEST_VREINTERPRET(q, poly, p, 64, 2, float, f, 32, 4, vreint_expected_q_p64_f32);\n+  TEST_VREINTERPRET_TO_POLY(q, poly, p, 64, 2, float, f, 32, 4, vreint_expected_q_p64_f32);\n \n   /* vreinterpret_*_p64 tests.  */\n #undef TEST_MSG\n@@ -184,8 +191,8 @@ int main (void)\n   TEST_VREINTERPRET(, uint, u, 16, 4, poly, p, 64, 1, vreint_expected_u16_p64);\n   TEST_VREINTERPRET(, uint, u, 32, 2, poly, p, 64, 1, vreint_expected_u32_p64);\n   TEST_VREINTERPRET(, uint, u, 64, 1, poly, p, 64, 1, vreint_expected_u64_p64);\n-  TEST_VREINTERPRET(, poly, p, 8, 8, poly, p, 64, 1, vreint_expected_p8_p64);\n-  TEST_VREINTERPRET(, poly, p, 16, 4, poly, p, 64, 1, vreint_expected_p16_p64);\n+  TEST_VREINTERPRET_TO_POLY(, poly, p, 8, 8, poly, p, 64, 1, vreint_expected_p8_p64);\n+  TEST_VREINTERPRET_TO_POLY(, poly, p, 16, 4, poly, p, 64, 1, vreint_expected_p16_p64);\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET_FP(, float, f, 16, 4, poly, p, 64, 1, vreint_expected_f16_p64);\n #endif\n@@ -198,8 +205,8 @@ int main (void)\n   TEST_VREINTERPRET(q, uint, u, 16, 8, poly, p, 64, 2, vreint_expected_q_u16_p64);\n   TEST_VREINTERPRET(q, uint, u, 32, 4, poly, p, 64, 2, vreint_expected_q_u32_p64);\n   TEST_VREINTERPRET(q, uint, u, 64, 2, poly, p, 64, 2, vreint_expected_q_u64_p64);\n-  TEST_VREINTERPRET(q, poly, p, 8, 16, poly, p, 64, 2, vreint_expected_q_p8_p64);\n-  TEST_VREINTERPRET(q, poly, p, 16, 8, poly, p, 64, 2, vreint_expected_q_p16_p64);\n+  TEST_VREINTERPRET_TO_POLY(q, poly, p, 8, 16, poly, p, 64, 2, vreint_expected_q_p8_p64);\n+  TEST_VREINTERPRET_TO_POLY(q, poly, p, 16, 8, poly, p, 64, 2, vreint_expected_q_p16_p64);\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET_FP(q, float, f, 16, 8, poly, p, 64, 2, vreint_expected_q_f16_p64);\n #endif"}, {"sha": "521553837aec14428648b37c37de51dcefcd6c66", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrev.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrev.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -132,10 +132,10 @@ void exec_vrev (void)\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vrev16, \"\");\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vrev16, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vrev16, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_vrev16, \"\");\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_vrev16, \"\");\n   CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_vrev16, \"\");\n-  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected_vrev16, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 16, PRIx8, expected_vrev16, \"\");\n \n #undef TEST_MSG\n #define TEST_MSG \"VREV32\"\n@@ -156,14 +156,14 @@ void exec_vrev (void)\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_vrev32, \"\");\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vrev32, \"\");\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_vrev32, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vrev32, \"\");\n-  CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected_vrev32, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_vrev32, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 16, 4, PRIx16, expected_vrev32, \"\");\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_vrev32, \"\");\n   CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_vrev32, \"\");\n   CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_vrev32, \"\");\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_vrev32, \"\");\n-  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected_vrev32, \"\");\n-  CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_vrev32, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 16, PRIx8, expected_vrev32, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 16, 8, PRIx16, expected_vrev32, \"\");\n \n #undef TEST_MSG\n #define TEST_MSG \"VREV64\"\n@@ -190,16 +190,16 @@ void exec_vrev (void)\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vrev64, \"\");\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_vrev64, \"\");\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_vrev64, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vrev64, \"\");\n-  CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected_vrev64, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_vrev64, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 16, 4, PRIx16, expected_vrev64, \"\");\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_vrev64, \"\");\n   CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_vrev64, \"\");\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_vrev64, \"\");\n   CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_vrev64, \"\");\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_vrev64, \"\");\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_vrev64, \"\");\n-  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected_vrev64, \"\");\n-  CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_vrev64, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 16, PRIx8, expected_vrev64, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 16, 8, PRIx16, expected_vrev64, \"\");\n \n #if defined (FP16_SUPPORTED)\n   TEST_VREV (, float, f, 16, 4, 64);"}, {"sha": "dc1641683865eeadffbbc90bc554fb27a5e7bde9", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vsXi_n.inc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvsXi_n.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvsXi_n.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvsXi_n.inc?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -76,16 +76,16 @@ void FNNAME (INSN_NAME) (void)\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected, \"\");\n-  CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 16, 4, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, \"\");\n   CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, \"\");\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n-  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected, \"\");\n-  CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 16, PRIx8, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 16, 8, PRIx16, expected, \"\");\n \n #ifdef EXTRA_TESTS\n   EXTRA_TESTS();"}, {"sha": "9976488b0bfcdd6c4d5f3487abb4b0fbecd51a78", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vshuffle.inc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshuffle.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshuffle.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshuffle.inc?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -148,8 +148,8 @@ void FNNAME (INSN_NAME) (void)\n     CHECK(test_name, uint, 8, 8, PRIx8, EXPECTED, comment);\t\t\\\n     CHECK(test_name, uint, 16, 4, PRIx16, EXPECTED, comment);\t\t\\\n     CHECK(test_name, uint, 32, 2, PRIx32, EXPECTED, comment);\t\t\\\n-    CHECK(test_name, poly, 8, 8, PRIx8, EXPECTED, comment);\t\t\\\n-    CHECK(test_name, poly, 16, 4, PRIx16, EXPECTED, comment);\t\t\\\n+    CHECK_POLY(test_name, poly, 8, 8, PRIx8, EXPECTED, comment);\t\t\\\n+    CHECK_POLY(test_name, poly, 16, 4, PRIx16, EXPECTED, comment);\t\t\\\n     CHECK_FP(test_name, float, 32, 2, PRIx32, EXPECTED, comment);\t\\\n \t\t\t\t\t\t\t\t\t\\\n     CHECK(test_name, int, 8, 16, PRIx8, EXPECTED, comment);\t\t\\\n@@ -158,8 +158,8 @@ void FNNAME (INSN_NAME) (void)\n     CHECK(test_name, uint, 8, 16, PRIx8, EXPECTED, comment);\t\t\\\n     CHECK(test_name, uint, 16, 8, PRIx16, EXPECTED, comment);\t\t\\\n     CHECK(test_name, uint, 32, 4, PRIx32, EXPECTED, comment);\t\t\\\n-    CHECK(test_name, poly, 8, 16, PRIx8, EXPECTED, comment);\t\t\\\n-    CHECK(test_name, poly, 16, 8, PRIx16, EXPECTED, comment);\t\t\\\n+    CHECK_POLY(test_name, poly, 8, 16, PRIx8, EXPECTED, comment);\t\t\\\n+    CHECK_POLY(test_name, poly, 16, 8, PRIx16, EXPECTED, comment);\t\t\\\n     CHECK_FP(test_name, float, 32, 4, PRIx32, EXPECTED, comment);\t\\\n   }\n "}, {"sha": "995789f62cc3b8c81bae6facfc08f5676345a4e2", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vsli_n.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsli_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsli_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsli_n.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -161,8 +161,8 @@ void vsli_extra(void)\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_shift, COMMENT);\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_max_shift, COMMENT);\n   CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_max_shift, COMMENT);\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_max_shift, COMMENT);\n-  CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected_max_shift, COMMENT);\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_max_shift, COMMENT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 4, PRIx16, expected_max_shift, COMMENT);\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max_shift, COMMENT);\n   CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max_shift, COMMENT);\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max_shift, COMMENT);\n@@ -171,6 +171,6 @@ void vsli_extra(void)\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_shift, COMMENT);\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_shift, COMMENT);\n   CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_max_shift, COMMENT);\n-  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected_max_shift, COMMENT);\n-  CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_max_shift, COMMENT);\n+  CHECK_POLY(TEST_MSG, poly, 8, 16, PRIx8, expected_max_shift, COMMENT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 8, PRIx16, expected_max_shift, COMMENT);\n }"}, {"sha": "3b58bfcf3fda53c342abb8200efbdf611d285e0d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vsri_n.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsri_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsri_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsri_n.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -163,14 +163,14 @@ void vsri_extra(void)\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_shift, COMMENT);\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_max_shift, COMMENT);\n   CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_max_shift, COMMENT);\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_max_shift, COMMENT);\n-  CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected_max_shift, COMMENT);\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_max_shift, COMMENT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 4, PRIx16, expected_max_shift, COMMENT);\n   CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max_shift, COMMENT);\n   CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max_shift, COMMENT);\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max_shift, COMMENT);\n   CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_shift, COMMENT);\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_shift, COMMENT);\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_shift, COMMENT);\n-  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected_max_shift, COMMENT);\n-  CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_max_shift, COMMENT);\n+  CHECK_POLY(TEST_MSG, poly, 8, 16, PRIx8, expected_max_shift, COMMENT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 8, PRIx16, expected_max_shift, COMMENT);\n }"}, {"sha": "3329e6bbb54eb46d6e45ec11fefe4384561665c1", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vstX_lane.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvstX_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvstX_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvstX_lane.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -460,14 +460,14 @@ void exec_vstX_lane (void)\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_st2_0, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_st2_0, CMT);\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_st2_0, CMT);\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_st2_0, CMT);\n-  CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected_st2_0, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_st2_0, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 4, PRIx16, expected_st2_0, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_st2_0, CMT);\n   CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_st2_0, CMT);\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_st2_0, CMT);\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_st2_0, CMT);\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_st2_0, CMT);\n-  CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_st2_0, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 8, PRIx16, expected_st2_0, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_st2_0, CMT);\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_st2_0, CMT);\n@@ -483,14 +483,14 @@ void exec_vstX_lane (void)\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_st2_1, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_st2_1, CMT);\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_st2_1, CMT);\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_st2_1, CMT);\n-  CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected_st2_1, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_st2_1, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 4, PRIx16, expected_st2_1, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_st2_1, CMT);\n   CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_st2_1, CMT);\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_st2_1, CMT);\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_st2_1, CMT);\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_st2_1, CMT);\n-  CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_st2_1, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 8, PRIx16, expected_st2_1, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_st2_1, CMT);\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_st2_1, CMT);\n@@ -512,14 +512,14 @@ void exec_vstX_lane (void)\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_st3_0, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_st3_0, CMT);\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_st3_0, CMT);\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_st3_0, CMT);\n-  CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected_st3_0, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_st3_0, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 4, PRIx16, expected_st3_0, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_st3_0, CMT);\n   CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_st3_0, CMT);\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_st3_0, CMT);\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_st3_0, CMT);\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_st3_0, CMT);\n-  CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_st3_0, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 8, PRIx16, expected_st3_0, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_st3_0, CMT);\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_st3_0, CMT);\n@@ -536,14 +536,14 @@ void exec_vstX_lane (void)\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_st3_1, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_st3_1, CMT);\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_st3_1, CMT);\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_st3_1, CMT);\n-  CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected_st3_1, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_st3_1, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 4, PRIx16, expected_st3_1, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_st3_1, CMT);\n   CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_st3_1, CMT);\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_st3_1, CMT);\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_st3_1, CMT);\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_st3_1, CMT);\n-  CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_st3_1, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 8, PRIx16, expected_st3_1, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_st3_1, CMT);\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_st3_1, CMT);\n@@ -560,14 +560,14 @@ void exec_vstX_lane (void)\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_st3_2, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_st3_2, CMT);\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_st3_2, CMT);\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_st3_2, CMT);\n-  CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected_st3_2, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_st3_2, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 4, PRIx16, expected_st3_2, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_st3_2, CMT);\n   CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_st3_2, CMT);\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_st3_2, CMT);\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_st3_2, CMT);\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_st3_2, CMT);\n-  CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_st3_2, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 8, PRIx16, expected_st3_2, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_st3_2, CMT);\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_st3_2, CMT);\n@@ -589,14 +589,14 @@ void exec_vstX_lane (void)\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_st4_0, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_st4_0, CMT);\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_st4_0, CMT);\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_st4_0, CMT);\n-  CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected_st4_0, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_st4_0, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 4, PRIx16, expected_st4_0, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_st4_0, CMT);\n   CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_st4_0, CMT);\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_st4_0, CMT);\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_st4_0, CMT);\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_st4_0, CMT);\n-  CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_st4_0, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 8, PRIx16, expected_st4_0, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_st4_0, CMT);\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_st4_0, CMT);\n@@ -613,14 +613,14 @@ void exec_vstX_lane (void)\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_st4_1, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_st4_1, CMT);\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_st4_1, CMT);\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_st4_1, CMT);\n-  CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected_st4_1, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_st4_1, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 4, PRIx16, expected_st4_1, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_st4_1, CMT);\n   CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_st4_1, CMT);\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_st4_1, CMT);\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_st4_1, CMT);\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_st4_1, CMT);\n-  CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_st4_1, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 8, PRIx16, expected_st4_1, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_st4_1, CMT);\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_st4_1, CMT);\n@@ -637,14 +637,14 @@ void exec_vstX_lane (void)\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_st4_2, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_st4_2, CMT);\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_st4_2, CMT);\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_st4_2, CMT);\n-  CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected_st4_2, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_st4_2, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 4, PRIx16, expected_st4_2, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_st4_2, CMT);\n   CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_st4_2, CMT);\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_st4_2, CMT);\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_st4_2, CMT);\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_st4_2, CMT);\n-  CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_st4_2, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 8, PRIx16, expected_st4_2, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_st4_2, CMT);\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_st4_2, CMT);\n@@ -661,14 +661,14 @@ void exec_vstX_lane (void)\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_st4_3, CMT);\n   CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_st4_3, CMT);\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_st4_3, CMT);\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_st4_3, CMT);\n-  CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected_st4_3, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_st4_3, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 4, PRIx16, expected_st4_3, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_st4_3, CMT);\n   CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_st4_3, CMT);\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_st4_3, CMT);\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_st4_3, CMT);\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_st4_3, CMT);\n-  CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_st4_3, CMT);\n+  CHECK_POLY(TEST_MSG, poly, 16, 8, PRIx16, expected_st4_3, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_st4_3, CMT);\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_st4_3, CMT);"}, {"sha": "c3e1d9bbd547949986a03dbec06a0e27367b2b48", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vtbX.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvtbX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d7c70c08b5b4a0180269301d466cc5e3d951b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvtbX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvtbX.c?ref=54d7c70c08b5b4a0180269301d466cc5e3d951b5", "patch": "@@ -167,7 +167,7 @@ void exec_vtbX (void)\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vtbl1, \"\");\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vtbl1, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vtbl1, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_vtbl1, \"\");\n \n   /* Check vtbl2.  */\n   clean_results ();\n@@ -177,7 +177,7 @@ void exec_vtbX (void)\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vtbl2, \"\");\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vtbl2, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vtbl2, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_vtbl2, \"\");\n \n   /* Check vtbl3.  */\n   clean_results ();\n@@ -187,7 +187,7 @@ void exec_vtbX (void)\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vtbl3, \"\");\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vtbl3, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vtbl3, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_vtbl3, \"\");\n \n   /* Check vtbl4.  */\n   clean_results ();\n@@ -197,7 +197,7 @@ void exec_vtbX (void)\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vtbl4, \"\");\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vtbl4, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vtbl4, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_vtbl4, \"\");\n \n \n   /* Now test VTBX.  */\n@@ -249,7 +249,7 @@ void exec_vtbX (void)\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vtbx1, \"\");\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vtbx1, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vtbx1, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_vtbx1, \"\");\n \n   /* Check vtbx2.  */\n   clean_results ();\n@@ -259,7 +259,7 @@ void exec_vtbX (void)\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vtbx2, \"\");\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vtbx2, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vtbx2, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_vtbx2, \"\");\n \n   /* Check vtbx3.  */\n   clean_results ();\n@@ -269,7 +269,7 @@ void exec_vtbX (void)\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vtbx3, \"\");\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vtbx3, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vtbx3, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_vtbx3, \"\");\n \n   /* Check vtbx4.  */\n   clean_results ();\n@@ -279,7 +279,7 @@ void exec_vtbX (void)\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vtbx4, \"\");\n   CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vtbx4, \"\");\n-  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vtbx4, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 8, 8, PRIx8, expected_vtbx4, \"\");\n }\n \n int main (void)"}]}