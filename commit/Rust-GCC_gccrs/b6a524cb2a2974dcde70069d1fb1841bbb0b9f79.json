{"sha": "b6a524cb2a2974dcde70069d1fb1841bbb0b9f79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZhNTI0Y2IyYTI5NzRkY2RlNzAwNjlkMWZiMTg0MWJiYjBiOWY3OQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-13T00:25:33Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-13T00:25:33Z"}, "message": "(gen_lowpart_common): Use those macros if REAL_ARITHMETIC.\n\nFrom-SVN: r4672", "tree": {"sha": "07b045f4534b77cb7e39ec22cfe721b715164ec6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07b045f4534b77cb7e39ec22cfe721b715164ec6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6a524cb2a2974dcde70069d1fb1841bbb0b9f79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a524cb2a2974dcde70069d1fb1841bbb0b9f79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6a524cb2a2974dcde70069d1fb1841bbb0b9f79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a524cb2a2974dcde70069d1fb1841bbb0b9f79/comments", "author": null, "committer": null, "parents": [{"sha": "543758c6c44ec668ca58a34016ef8905854fec72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/543758c6c44ec668ca58a34016ef8905854fec72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/543758c6c44ec668ca58a34016ef8905854fec72"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "b63f0c8b479114cf91249b1954ee32654d1d336a", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a524cb2a2974dcde70069d1fb1841bbb0b9f79/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a524cb2a2974dcde70069d1fb1841bbb0b9f79/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=b6a524cb2a2974dcde70069d1fb1841bbb0b9f79", "patch": "@@ -594,13 +594,23 @@ gen_lowpart_common (mode, x)\n \t   && GET_MODE_SIZE (mode) == UNITS_PER_WORD\n \t   && GET_CODE (x) == CONST_INT\n \t   && sizeof (float) * HOST_BITS_PER_CHAR == HOST_BITS_PER_WIDE_INT)\n+#ifdef REAL_ARITHMETIC\n+    {\n+      REAL_VALUE_TYPE r;\n+      HOST_WIDE_INT i;\n+\n+      i = INTVAL (x);\n+      r = REAL_VALUE_FROM_TARGET_SINGLE (i);\n+      return immed_real_const_1 (r, mode);\n+    }\n+#else\n     {\n       union {HOST_WIDE_INT i; float d; } u;\n \n       u.i = INTVAL (x);\n       return immed_real_const_1 (u.d, mode);\n     }\n-\n+#endif\n   else if (((HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT\n \t     && HOST_BITS_PER_WIDE_INT == BITS_PER_WORD)\n \t    || flag_pretend_float)\n@@ -610,6 +620,28 @@ gen_lowpart_common (mode, x)\n \t   && GET_MODE (x) == VOIDmode\n \t   && (sizeof (double) * HOST_BITS_PER_CHAR\n \t       == 2 * HOST_BITS_PER_WIDE_INT))\n+#ifdef REAL_ARITHMETIC\n+    {\n+      REAL_VALUE_TYPE r;\n+      HOST_WIDE_INT i[2];\n+      HOST_WIDE_INT low, high;\n+\n+      if (GET_CODE (x) == CONST_INT)\n+\tlow = INTVAL (x), high = low >> (HOST_BITS_PER_WIDE_INT -1);\n+      else\n+\tlow = CONST_DOUBLE_LOW (x), high = CONST_DOUBLE_HIGH (x);\n+\n+/* TARGET_DOUBLE takes the addressing order of the target machine. */\n+#ifdef WORDS_BIG_ENDIAN\n+      i[0] = high, i[1] = low;\n+#else\n+      i[0] = low, i[1] = high;\n+#endif\n+\n+      r = REAL_VALUE_FROM_TARGET_DOUBLE (i);\n+      return immed_real_const_1 (r, mode);\n+    }\n+#else\n     {\n       union {HOST_WIDE_INT i[2]; double d; } u;\n       HOST_WIDE_INT low, high;\n@@ -627,7 +659,7 @@ gen_lowpart_common (mode, x)\n \n       return immed_real_const_1 (u.d, mode);\n     }\n-\n+#endif\n   /* Similarly, if this is converting a floating-point value into a\n      single-word integer.  Only do this is the host and target parameters are\n      compatible.  */"}]}