{"sha": "b92883d6ba13db87d893755f74532bfe5cb4ba72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkyODgzZDZiYTEzZGI4N2Q4OTM3NTVmNzQ1MzJiZmU1Y2I0YmE3Mg==", "commit": {"author": {"name": "Ilya Tocar", "email": "ilya.tocar@intel.com", "date": "2014-11-05T15:55:44Z"}, "committer": {"name": "Ilya Tocar", "email": "tocarip@gcc.gnu.org", "date": "2014-11-05T15:55:44Z"}, "message": "Fix dg.torture tests with avx512\n\ngcc/\n\t* config/i386/i386.c (expand_vec_perm_pshufb): Try vpermq/vpermd\n\tfor 512-bit wide modes.\n\t(expand_vec_perm_1): Use correct versions of patterns.\n\t* config/i386/sse.md (avx512f_vec_dup_<mode>_1): New.\n\t(vashr<mode>3<mask_name>): Split V8HImode and V16QImode.\n\nFrom-SVN: r217138", "tree": {"sha": "572e7d693518c2b56dccef72f0472bf47f595958", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/572e7d693518c2b56dccef72f0472bf47f595958"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b92883d6ba13db87d893755f74532bfe5cb4ba72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b92883d6ba13db87d893755f74532bfe5cb4ba72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b92883d6ba13db87d893755f74532bfe5cb4ba72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b92883d6ba13db87d893755f74532bfe5cb4ba72/comments", "author": {"login": "TocarIP", "id": 16836375, "node_id": "MDQ6VXNlcjE2ODM2Mzc1", "avatar_url": "https://avatars.githubusercontent.com/u/16836375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TocarIP", "html_url": "https://github.com/TocarIP", "followers_url": "https://api.github.com/users/TocarIP/followers", "following_url": "https://api.github.com/users/TocarIP/following{/other_user}", "gists_url": "https://api.github.com/users/TocarIP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TocarIP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TocarIP/subscriptions", "organizations_url": "https://api.github.com/users/TocarIP/orgs", "repos_url": "https://api.github.com/users/TocarIP/repos", "events_url": "https://api.github.com/users/TocarIP/events{/privacy}", "received_events_url": "https://api.github.com/users/TocarIP/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d80b40be2ff06fbcbedd4d1c091a4b1ab4948ff4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80b40be2ff06fbcbedd4d1c091a4b1ab4948ff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d80b40be2ff06fbcbedd4d1c091a4b1ab4948ff4"}], "stats": {"total": 121, "additions": 106, "deletions": 15}, "files": [{"sha": "2fe8c8af1e54a5c936e973ac06a717df8c3ae2b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b92883d6ba13db87d893755f74532bfe5cb4ba72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b92883d6ba13db87d893755f74532bfe5cb4ba72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b92883d6ba13db87d893755f74532bfe5cb4ba72", "patch": "@@ -1,3 +1,11 @@\n+2014-11-05  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* config/i386/i386.c (expand_vec_perm_pshufb): Try vpermq/vpermd\n+\tfor 512-bit wide modes.\n+\t(expand_vec_perm_1): Use correct versions of patterns.\n+\t* config/i386/sse.md (avx512f_vec_dup<mode>_1): New.\n+\t(vashr<mode>3<mask_name>): Split V8HImode and V16QImode.\n+\n 2014-11-05  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* ipa-chkp.c: New."}, {"sha": "0a4c13bed4421fcf5e3fd74329cb9e658125916b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 52, "deletions": 7, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b92883d6ba13db87d893755f74532bfe5cb4ba72/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b92883d6ba13db87d893755f74532bfe5cb4ba72/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b92883d6ba13db87d893755f74532bfe5cb4ba72", "patch": "@@ -46891,6 +46891,42 @@ expand_vec_perm_pshufb (struct expand_vec_perm_d *d)\n \t{\n \t  if (!TARGET_AVX512BW)\n \t    return false;\n+\n+\t  /* If vpermq didn't work, vpshufb won't work either.  */\n+\t  if (d->vmode == V8DFmode || d->vmode == V8DImode)\n+\t    return false;\n+\n+\t  vmode = V64QImode;\n+\t  if (d->vmode == V16SImode\n+\t      || d->vmode == V32HImode\n+\t      || d->vmode == V64QImode)\n+\t    {\n+\t      /* First see if vpermq can be used for\n+\t\t V16SImode/V32HImode/V64QImode.  */\n+\t      if (valid_perm_using_mode_p (V8DImode, d))\n+\t\t{\n+\t\t  for (i = 0; i < 8; i++)\n+\t\t    perm[i] = (d->perm[i * nelt / 8] * 8 / nelt) & 7;\n+\t\t  if (d->testing_p)\n+\t\t    return true;\n+\t\t  target = gen_reg_rtx (V8DImode);\n+\t\t  if (expand_vselect (target, gen_lowpart (V8DImode, d->op0),\n+\t\t\t\t      perm, 8, false))\n+\t\t    {\n+\t\t      emit_move_insn (d->target,\n+\t\t\t\t      gen_lowpart (d->vmode, target));\n+\t\t      return true;\n+\t\t    }\n+\t\t  return false;\n+\t\t}\n+\n+\t      /* Next see if vpermd can be used.  */\n+\t      if (valid_perm_using_mode_p (V16SImode, d))\n+\t\tvmode = V16SImode;\n+\t    }\n+\t  /* Or if vpermps can be used.  */\n+\t  else if (d->vmode == V16SFmode)\n+\t    vmode = V16SImode;\n \t  if (vmode == V64QImode)\n \t    {\n \t      /* vpshufb only works intra lanes, it is not\n@@ -46910,6 +46946,9 @@ expand_vec_perm_pshufb (struct expand_vec_perm_d *d)\n   if (vmode == V8SImode)\n     for (i = 0; i < 8; ++i)\n       rperm[i] = GEN_INT ((d->perm[i * nelt / 8] * 8 / nelt) & 7);\n+  else if (vmode == V16SImode)\n+    for (i = 0; i < 16; ++i)\n+      rperm[i] = GEN_INT ((d->perm[i * nelt / 16] * 16 / nelt) & 15);\n   else\n     {\n       eltsz = GET_MODE_SIZE (GET_MODE_INNER (d->vmode));\n@@ -46948,8 +46987,14 @@ expand_vec_perm_pshufb (struct expand_vec_perm_d *d)\n \temit_insn (gen_avx512bw_pshufbv64qi3 (target, op0, vperm));\n       else if (vmode == V8SFmode)\n \temit_insn (gen_avx2_permvarv8sf (target, op0, vperm));\n-      else\n+      else if (vmode == V8SImode)\n \temit_insn (gen_avx2_permvarv8si (target, op0, vperm));\n+      else if (vmode == V16SFmode)\n+\temit_insn (gen_avx512f_permvarv16sf (target, op0, vperm));\n+      else if (vmode == V16SImode)\n+\temit_insn (gen_avx512f_permvarv16si (target, op0, vperm));\n+      else\n+\tgcc_unreachable ();\n     }\n   else\n     {\n@@ -47003,21 +47048,21 @@ expand_vec_perm_1 (struct expand_vec_perm_d *d)\n \t    {\n \t    case V64QImode:\n \t      if (TARGET_AVX512BW)\n-\t\tgen = gen_avx512bw_vec_dupv64qi;\n+\t\tgen = gen_avx512bw_vec_dupv64qi_1;\n \t      break;\n \t    case V32QImode:\n \t      gen = gen_avx2_pbroadcastv32qi_1;\n \t      break;\n \t    case V32HImode:\n \t      if (TARGET_AVX512BW)\n-\t\tgen = gen_avx512bw_vec_dupv32hi;\n+\t\tgen = gen_avx512bw_vec_dupv32hi_1;\n \t      break;\n \t    case V16HImode:\n \t      gen = gen_avx2_pbroadcastv16hi_1;\n \t      break;\n \t    case V16SImode:\n \t      if (TARGET_AVX512F)\n-\t\tgen = gen_avx512f_vec_dupv16si;\n+\t\tgen = gen_avx512f_vec_dupv16si_1;\n \t      break;\n \t    case V8SImode:\n \t      gen = gen_avx2_pbroadcastv8si_1;\n@@ -47030,18 +47075,18 @@ expand_vec_perm_1 (struct expand_vec_perm_d *d)\n \t      break;\n \t    case V16SFmode:\n \t      if (TARGET_AVX512F)\n-\t\tgen = gen_avx512f_vec_dupv16sf;\n+\t\tgen = gen_avx512f_vec_dupv16sf_1;\n \t      break;\n \t    case V8SFmode:\n \t      gen = gen_avx2_vec_dupv8sf_1;\n \t      break;\n \t    case V8DFmode:\n \t      if (TARGET_AVX512F)\n-\t\tgen = gen_avx512f_vec_dupv8df;\n+\t\tgen = gen_avx512f_vec_dupv8df_1;\n \t      break;\n \t    case V8DImode:\n \t      if (TARGET_AVX512F)\n-\t\tgen = gen_avx512f_vec_dupv8di;\n+\t\tgen = gen_avx512f_vec_dupv8di_1;\n \t      break;\n \t    /* For other modes prefer other shuffles this function creates.  */\n \t    default: break;"}, {"sha": "13ddd290bdb4140d6ada95502c14ac64d66b8b5e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b92883d6ba13db87d893755f74532bfe5cb4ba72/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b92883d6ba13db87d893755f74532bfe5cb4ba72/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b92883d6ba13db87d893755f74532bfe5cb4ba72", "patch": "@@ -6297,6 +6297,18 @@\n     (set_attr \"prefix\" \"vex\")\n     (set_attr \"mode\" \"V8SF\")])\n \n+(define_insn \"avx512f_vec_dup<mode>_1\"\n+  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n+\t(vec_duplicate:VF_512\n+\t  (vec_select:<ssescalarmode>\n+\t    (match_operand:VF_512 1 \"register_operand\" \"v\")\n+\t    (parallel [(const_int 0)]))))]\n+  \"TARGET_AVX512F\"\n+  \"vbroadcast<bcstscalarsuff>\\t{%x1, %0|%0, %x1}\"\n+  [(set_attr \"type\" \"sselog1\")\n+    (set_attr \"prefix\" \"evex\")\n+    (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"vec_dupv4sf\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x,x\")\n \t(vec_duplicate:V4SF\n@@ -15922,22 +15934,35 @@\n \t  (match_operand:VI48_256 2 \"nonimmediate_operand\")))]\n   \"TARGET_AVX2\")\n \n-(define_expand \"vashr<mode>3<mask_name>\"\n-  [(set (match_operand:VI12_128 0 \"register_operand\")\n-\t(ashiftrt:VI12_128\n-\t  (match_operand:VI12_128 1 \"register_operand\")\n-\t  (match_operand:VI12_128 2 \"nonimmediate_operand\")))]\n+(define_expand \"vashrv8hi3<mask_name>\"\n+  [(set (match_operand:V8HI 0 \"register_operand\")\n+\t(ashiftrt:V8HI\n+\t  (match_operand:V8HI 1 \"register_operand\")\n+\t  (match_operand:V8HI 2 \"nonimmediate_operand\")))]\n   \"TARGET_XOP || (TARGET_AVX512BW && TARGET_AVX512VL)\"\n {\n   if (TARGET_XOP)\n     {\n-      rtx neg = gen_reg_rtx (<MODE>mode);\n-      emit_insn (gen_neg<mode>2 (neg, operands[2]));\n-      emit_insn (gen_xop_sha<mode>3 (operands[0], operands[1], neg));\n+      rtx neg = gen_reg_rtx (V8HImode);\n+      emit_insn (gen_negv8hi2 (neg, operands[2]));\n+      emit_insn (gen_xop_shav8hi3 (operands[0], operands[1], neg));\n       DONE;\n     }\n })\n \n+(define_expand \"vashrv16qi3\"\n+  [(set (match_operand:V16QI 0 \"register_operand\")\n+\t(ashiftrt:V16QI\n+\t  (match_operand:V16QI 1 \"register_operand\")\n+\t  (match_operand:V16QI 2 \"nonimmediate_operand\")))]\n+  \"TARGET_XOP\"\n+{\n+   rtx neg = gen_reg_rtx (V16QImode);\n+   emit_insn (gen_negv16qi2 (neg, operands[2]));\n+   emit_insn (gen_xop_shav16qi3 (operands[0], operands[1], neg));\n+   DONE;\n+})\n+\n (define_expand \"vashrv2di3<mask_name>\"\n   [(set (match_operand:V2DI 0 \"register_operand\")\n \t(ashiftrt:V2DI\n@@ -16531,6 +16556,19 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V4DF\")])\n \n+(define_insn \"<avx512>_vec_dup<mode>_1\"\n+  [(set (match_operand:VI_AVX512BW 0 \"register_operand\" \"=v,v\")\n+\t(vec_duplicate:VI_AVX512BW\n+\t  (vec_select:VI_AVX512BW\n+\t    (match_operand:VI_AVX512BW 1 \"nonimmediate_operand\" \"v,m\")\n+\t    (parallel [(const_int 0)]))))]\n+  \"TARGET_AVX512F\"\n+  \"vpbroadcast<ssemodesuffix>\\t{%1, %0|%0, %<iptr>1}\n+   vpbroadcast<ssemodesuffix>\\t{%x1, %0|%0, %x1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"<avx512>_vec_dup<mode><mask_name>\"\n   [(set (match_operand:V48_AVX512VL 0 \"register_operand\" \"=v\")\n \t(vec_duplicate:V48_AVX512VL"}]}