{"sha": "f82f425b56a1ccf1950c6d0992e7c106558acba0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgyZjQyNWI1NmExY2NmMTk1MGM2ZDA5OTJlN2MxMDY1NThhY2JhMA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-05-20T10:04:46Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-05-20T10:04:46Z"}, "message": "re PR fortran/49636 ([F03] ASSOCIATE construct confused with slightly complicated case)\n\n2018-05-20  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/49636\n\t* trans-array.c (gfc_get_array_span): Renamed from\n\t'get_array_span'.\n\t(gfc_conv_expr_descriptor): Change references to above.\n\t* trans-array.h : Add prototype for 'gfc_get_array_span'.\n\t* trans-stmt.c (trans_associate_var): If the associate name is\n\ta subref array pointer, use gfc_get_array_span for the span.\n\n2018-05-20  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/49636\n\t* gfortran.dg/associate_38.f90: New test.\n\nFrom-SVN: r260414", "tree": {"sha": "1979e22abd5e448cee201ee6e3e3f4b88d8e102f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1979e22abd5e448cee201ee6e3e3f4b88d8e102f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f82f425b56a1ccf1950c6d0992e7c106558acba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f82f425b56a1ccf1950c6d0992e7c106558acba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f82f425b56a1ccf1950c6d0992e7c106558acba0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f82f425b56a1ccf1950c6d0992e7c106558acba0/comments", "author": null, "committer": null, "parents": [{"sha": "7c71e79664fbc04c3eb1d8b0307b33e502488664", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c71e79664fbc04c3eb1d8b0307b33e502488664", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c71e79664fbc04c3eb1d8b0307b33e502488664"}], "stats": {"total": 74, "additions": 56, "deletions": 18}, "files": [{"sha": "8e6c933d7c71fb46cc150c1f8aac79dbce386507", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82f425b56a1ccf1950c6d0992e7c106558acba0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82f425b56a1ccf1950c6d0992e7c106558acba0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f82f425b56a1ccf1950c6d0992e7c106558acba0", "patch": "@@ -1,3 +1,13 @@\n+2018-05-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/49636\n+\t* trans-array.c (gfc_get_array_span): Renamed from\n+\t'get_array_span'.\n+\t(gfc_conv_expr_descriptor): Change references to above.\n+\t* trans-array.h : Add prototype for 'gfc_get_array_span'.\n+\t* trans-stmt.c (trans_associate_var): If the associate name is\n+\ta subref array pointer, use gfc_get_array_span for the span.\n+\n 2018-05-20  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/82275"}, {"sha": "7e6cea15c6a00942f53434cf244dc8da7a174cd1", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82f425b56a1ccf1950c6d0992e7c106558acba0/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82f425b56a1ccf1950c6d0992e7c106558acba0/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=f82f425b56a1ccf1950c6d0992e7c106558acba0", "patch": "@@ -817,8 +817,8 @@ is_pointer_array (tree expr)\n \n /* Return the span of an array.  */\n \n-static tree\n-get_array_span (tree desc, gfc_expr *expr)\n+tree\n+gfc_get_array_span (tree desc, gfc_expr *expr)\n {\n   tree tmp;\n \n@@ -7061,7 +7061,7 @@ gfc_conv_expr_descriptor (gfc_se *se, gfc_expr *expr)\n \t\t\t\t      subref_array_target, expr);\n \n \t      /* ....and set the span field.  */\n-\t      tmp = get_array_span (desc, expr);\n+\t      tmp = gfc_get_array_span (desc, expr);\n \t      gfc_conv_descriptor_span_set (&se->pre, se->expr, tmp);\n \t    }\n \t  else if (se->want_pointer)\n@@ -7334,7 +7334,7 @@ gfc_conv_expr_descriptor (gfc_se *se, gfc_expr *expr)\n \t  parmtype = TREE_TYPE (parm);\n \n \t  /* ....and set the span field.  */\n-\t  tmp = get_array_span (desc, expr);\n+\t  tmp = gfc_get_array_span (desc, expr);\n \t  gfc_conv_descriptor_span_set (&loop.pre, parm, tmp);\n \t}\n       else"}, {"sha": "5ef86565d8d09aba3c927962ba19172a9e05fede", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82f425b56a1ccf1950c6d0992e7c106558acba0/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82f425b56a1ccf1950c6d0992e7c106558acba0/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=f82f425b56a1ccf1950c6d0992e7c106558acba0", "patch": "@@ -136,6 +136,8 @@ void gfc_conv_tmp_array_ref (gfc_se * se);\n /* Translate a reference to an array temporary.  */\n void gfc_conv_tmp_ref (gfc_se *);\n \n+/* Obtain the span of an array.  */\n+tree gfc_get_array_span (tree, gfc_expr *);\n /* Evaluate an array expression.  */\n void gfc_conv_expr_descriptor (gfc_se *, gfc_expr *);\n /* Convert an array for passing as an actual function parameter.  */"}, {"sha": "fa0197162921e011191997759591b529eb45864e", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82f425b56a1ccf1950c6d0992e7c106558acba0/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82f425b56a1ccf1950c6d0992e7c106558acba0/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=f82f425b56a1ccf1950c6d0992e7c106558acba0", "patch": "@@ -4966,7 +4966,7 @@ gfc_conv_intrinsic_minmaxloc (gfc_se * se, gfc_expr * expr, enum tree_code op)\n       else\n \t{\n \t  tree ifbody2, elsebody2;\n-\t  \n+\n \t  /* We switch to > or >= depending on the value of the BACK argument. */\n \t  cond = gfc_create_var (logical_type_node, \"cond\");\n \n@@ -7900,15 +7900,17 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n \t\t\t\t\t      logical_type_node, tmp,\n \t\t\t\t\t      build_int_cst (TREE_TYPE (tmp), 0));\n \n-          /* A pointer to an array, call library function _gfor_associated.  */\n-          arg1se.want_pointer = 1;\n-          gfc_conv_expr_descriptor (&arg1se, arg1->expr);\n+\t  /* A pointer to an array, call library function _gfor_associated.  */\n+\t  arg1se.want_pointer = 1;\n+\t  gfc_conv_expr_descriptor (&arg1se, arg1->expr);\n+\t  gfc_add_block_to_block (&se->pre, &arg1se.pre);\n+\t  gfc_add_block_to_block (&se->post, &arg1se.post);\n \n-          arg2se.want_pointer = 1;\n-          gfc_conv_expr_descriptor (&arg2se, arg2->expr);\n-          gfc_add_block_to_block (&se->pre, &arg2se.pre);\n-          gfc_add_block_to_block (&se->post, &arg2se.post);\n-          se->expr = build_call_expr_loc (input_location,\n+\t  arg2se.want_pointer = 1;\n+\t  gfc_conv_expr_descriptor (&arg2se, arg2->expr);\n+\t  gfc_add_block_to_block (&se->pre, &arg2se.pre);\n+\t  gfc_add_block_to_block (&se->post, &arg2se.post);\n+\t  se->expr = build_call_expr_loc (input_location,\n \t\t\t\t      gfor_fndecl_associated, 2,\n \t\t\t\t      arg1se.expr, arg2se.expr);\n \t  se->expr = convert (logical_type_node, se->expr);"}, {"sha": "cc1a42943277328efbcfc109d6582c186bb25c14", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82f425b56a1ccf1950c6d0992e7c106558acba0/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82f425b56a1ccf1950c6d0992e7c106558acba0/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=f82f425b56a1ccf1950c6d0992e7c106558acba0", "patch": "@@ -1735,11 +1735,8 @@ trans_associate_var (gfc_symbol *sym, gfc_wrapped_block *block)\n       if (sym->attr.subref_array_pointer)\n \t{\n \t  gcc_assert (e->expr_type == EXPR_VARIABLE);\n-\t  tmp = e->symtree->n.sym->ts.type == BT_CLASS\n-\t      ? gfc_class_data_get (e->symtree->n.sym->backend_decl)\n-\t      : e->symtree->n.sym->backend_decl;\n-\t  tmp = gfc_get_element_type (TREE_TYPE (tmp));\n-\t  tmp = fold_convert (gfc_array_index_type, size_in_bytes (tmp));\n+\t  tmp = gfc_get_array_span (se.expr, e);\n+\n \t  gfc_conv_descriptor_span_set (&se.pre, desc, tmp);\n \t}\n "}, {"sha": "b919b842aa85a6c5aaa781001ccef3453c9ef56f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82f425b56a1ccf1950c6d0992e7c106558acba0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82f425b56a1ccf1950c6d0992e7c106558acba0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f82f425b56a1ccf1950c6d0992e7c106558acba0", "patch": "@@ -1,3 +1,8 @@\n+2018-05-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/49636\n+\t* gfortran.dg/associate_38.f90: New test.\n+\n 2018-05-20  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/82923"}, {"sha": "27a6f4b556baeb243911f62a993096f7941196a1", "filename": "gcc/testsuite/gfortran.dg/associate_38.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82f425b56a1ccf1950c6d0992e7c106558acba0/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_38.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82f425b56a1ccf1950c6d0992e7c106558acba0/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_38.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_38.f90?ref=f82f425b56a1ccf1950c6d0992e7c106558acba0", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR49636 in which the 'span' of 'ty1' was not used\n+! in the descriptor of 'i'.\n+!\n+! Contributed by Fred Krogh  <fkrogh#gcc@mathalacarte.com>\n+!\n+program test\n+  type ty1\n+    integer :: k\n+    integer :: i\n+  end type ty1\n+  type ty2\n+    type(ty1) :: j(3)\n+  end type ty2\n+\n+  type(ty2) t2\n+  t2%j(1:3)%i = [ 1, 3, 5 ]\n+  associate (i=>t2%j%i)\n+    if (any (t2%j(1:3)%i .ne. i(1:3))) stop 1\n+  end associate\n+end program test"}]}