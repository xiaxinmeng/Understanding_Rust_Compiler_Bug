{"sha": "b0791fa925202359a56169bf0e28d89cd49f1c33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA3OTFmYTkyNTIwMjM1OWE1NjE2OWJmMGUyOGQ4OWNkNDlmMWMzMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-11-29T02:50:04Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-11-29T02:50:04Z"}, "message": "com.c (ffecom_file_, [...]): Constify a char*.\n\n        * com.c (ffecom_file_, ffecom_file, file_buf,\n        ffecom_open_include_): Constify a char*.\n        (ffecom_possible_partial_overlap_): Mark parameter `expr2' with\n        ATTRIBUTE_UNUSED.\n        (ffecom_init_0): Use a fully prototyped cast in call to bsearch.\n        (lang_print_error_function): ANSI-fy.\n\n        * com.h (ffecom_file): Constify a char*.\n\n        * fini.c (main): Call return, not exit.\n\n        * g77spec.c (lang_specific_driver): Use non-const *in_argv in\n        assignment.\n\n        * intrin.c (ffeintrin_cmp_name_): Don't needlessly cast away\n        const-ness.\n\nFrom-SVN: r30693", "tree": {"sha": "f852635f5817ab1e26919869bfbda84e5cfbce64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f852635f5817ab1e26919869bfbda84e5cfbce64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0791fa925202359a56169bf0e28d89cd49f1c33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0791fa925202359a56169bf0e28d89cd49f1c33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0791fa925202359a56169bf0e28d89cd49f1c33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0791fa925202359a56169bf0e28d89cd49f1c33/comments", "author": null, "committer": null, "parents": [{"sha": "14657de8f1fd8fff5cb3bed37d91267beea5e1f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14657de8f1fd8fff5cb3bed37d91267beea5e1f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14657de8f1fd8fff5cb3bed37d91267beea5e1f3"}], "stats": {"total": 64, "additions": 41, "deletions": 23}, "files": [{"sha": "99d597a722695e89d9e1dceb59c5554725e8c877", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0791fa925202359a56169bf0e28d89cd49f1c33/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0791fa925202359a56169bf0e28d89cd49f1c33/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=b0791fa925202359a56169bf0e28d89cd49f1c33", "patch": "@@ -1,3 +1,22 @@\n+Sun Nov 28 21:39:05 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* com.c (ffecom_file_, ffecom_file, file_buf,\n+\tffecom_open_include_): Constify a char*.\n+\t(ffecom_possible_partial_overlap_): Mark parameter `expr2' with\n+\tATTRIBUTE_UNUSED.\n+\t(ffecom_init_0): Use a fully prototyped cast in call to bsearch.\n+\t(lang_print_error_function): ANSI-fy.\n+\n+\t* com.h (ffecom_file): Constify a char*.\n+\n+\t* fini.c (main): Call return, not exit.\n+\n+\t* g77spec.c (lang_specific_driver): Use non-const *in_argv in\n+\tassignment.\n+\n+\t* intrin.c (ffeintrin_cmp_name_): Don't needlessly cast away\n+\tconst-ness.\n+\t\n Sun Nov 28 21:15:29 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* com.c (ffecom_get_invented_identifier): Rewrite to take an ellipses."}, {"sha": "92e028568fa011c600b3a9c937eec3a56e80eed8", "filename": "gcc/f/com.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0791fa925202359a56169bf0e28d89cd49f1c33/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0791fa925202359a56169bf0e28d89cd49f1c33/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=b0791fa925202359a56169bf0e28d89cd49f1c33", "patch": "@@ -484,7 +484,7 @@ static tree start_decl (tree decl, bool is_top_level);\n static void start_function (tree name, tree type, int nested, int public);\n #endif\t/* FFECOM_targetCURRENT == FFECOM_targetGCC */\n #if FFECOM_GCC_INCLUDE\n-static void ffecom_file_ (char *name);\n+static void ffecom_file_ (const char *name);\n static void ffecom_initialize_char_syntax_ (void);\n static void ffecom_close_include_ (FILE *f);\n static int ffecom_decode_include_option_ (char *spec);\n@@ -1566,7 +1566,7 @@ ffecom_widest_expr_type_ (ffebld list)\n    aliasing of arguments, it isn't a concern.  */\n \n static bool\n-ffecom_possible_partial_overlap_ (ffebld expr1, ffebld expr2)\n+ffecom_possible_partial_overlap_ (ffebld expr1, ffebld expr2 ATTRIBUTE_UNUSED)\n {\n   ffesymbol sym;\n   ffestorag st;\n@@ -11581,7 +11581,7 @@ ffecom_init_0 ()\n       double fl;\n \n       name = bsearch (\"foo\", &names[0], ARRAY_SIZE (names), sizeof (names[0]),\n-\t\t      (int (*)()) strcmp);\n+\t\t      (int (*)(const void *, const void *)) strcmp);\n       if (name != (char *) &names[2])\n \t{\n \t  assert (\"bsearch doesn't work, #define FFEPROJ_BSEARCH 0 in proj.h\"\n@@ -12461,7 +12461,7 @@ ffecom_modify (tree newtype, tree lhs,\n /* Register source file name.  */\n \n void\n-ffecom_file (char *name)\n+ffecom_file (const char *name)\n {\n #if FFECOM_GCC_INCLUDE\n   ffecom_file_ (name);\n@@ -14304,9 +14304,8 @@ lang_printable_name (tree decl, int v)\n    an error.  */\n \n #if BUILT_FOR_270\n-void\n-lang_print_error_function (file)\n-     const char *file;\n+static void\n+lang_print_error_function (const char *file)\n {\n   static ffeglobal last_g = NULL;\n   static ffesymbol last_s = NULL;\n@@ -15816,9 +15815,9 @@ static struct file_name_list *last_include = NULL;\t/* Last in chain */\n    and for expanding macro arguments.  */\n #define INPUT_STACK_MAX 400\n static struct file_buf {\n-  char *fname;\n+  const char *fname;\n   /* Filename specified with #line command.  */\n-  char *nominal_fname;\n+  const char *nominal_fname;\n   /* Record where in the search path this file was found.\n      For #include_next.  */\n   struct file_name_list *dir;\n@@ -16160,7 +16159,7 @@ read_name_map (dirname)\n }\n \n static void\n-ffecom_file_ (char *name)\n+ffecom_file_ (const char *name)\n {\n   FILE_BUF *fp;\n \n@@ -16273,7 +16272,7 @@ ffecom_open_include_ (char *name, ffewhereLine l, ffewhereColumn c)\n \t{\n \t  int n;\n \t  char *ep;\n-\t  char *nam;\n+\t  const char *nam;\n \n \t  if ((nam = fp->nominal_fname) != NULL)\n \t    {"}, {"sha": "aa268931e4712a85be6a44d2384fd24b9e5813b8", "filename": "gcc/f/com.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0791fa925202359a56169bf0e28d89cd49f1c33/gcc%2Ff%2Fcom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0791fa925202359a56169bf0e28d89cd49f1c33/gcc%2Ff%2Fcom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.h?ref=b0791fa925202359a56169bf0e28d89cd49f1c33", "patch": "@@ -319,7 +319,7 @@ tree ffecom_make_tempvar (const char *commentary, tree type,\n \t\t\t  ffetargetCharacterSize size, int elements);\n tree ffecom_modify (tree newtype, tree lhs, tree rhs);\n #endif\t/* FFECOM_targetCURRENT == FFECOM_targetGCC */\n-void ffecom_file (char *name);\n+void ffecom_file (const char *name);\n void ffecom_notify_init_storage (ffestorag st);\n void ffecom_notify_init_symbol (ffesymbol s);\n void ffecom_notify_primary_entry (ffesymbol fn);"}, {"sha": "e5eb5391ac1918ac3c0e3e1da62f584ac4b7c5a9", "filename": "gcc/f/fini.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0791fa925202359a56169bf0e28d89cd49f1c33/gcc%2Ff%2Ffini.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0791fa925202359a56169bf0e28d89cd49f1c33/gcc%2Ff%2Ffini.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ffini.c?ref=b0791fa925202359a56169bf0e28d89cd49f1c33", "patch": "@@ -267,7 +267,7 @@ main (int argc, char **argv)\n   if (argc != 4)\n     {\n       fprintf (stderr, \"Command form: fini input output-code output-include\\n\");\n-      exit (1);\n+      return (1);\n     }\n \n   input_name = argv[1];\n@@ -278,21 +278,21 @@ main (int argc, char **argv)\n   if (in == NULL)\n     {\n       fprintf (stderr, \"Cannot open \\\"%s\\\"\\n\", input_name);\n-      exit (1);\n+      return (1);\n     }\n   out = fopen (output_name, \"w\");\n   if (out == NULL)\n     {\n       fclose (in);\n       fprintf (stderr, \"Cannot open \\\"%s\\\"\\n\", output_name);\n-      exit (1);\n+      return (1);\n     }\n   incl = fopen (include_name, \"w\");\n   if (incl == NULL)\n     {\n       fclose (in);\n       fprintf (stderr, \"Cannot open \\\"%s\\\"\\n\", include_name);\n-      exit (1);\n+      return (1);\n     }\n \n   /* Get past the initial block-style comment (man, this parsing code is just\n@@ -316,7 +316,7 @@ main (int argc, char **argv)\n       else\n \t{\n \t  assert (\"EOF too soon!\" == NULL);\n-\t  exit (1);\n+\t  return (1);\n \t}\n     }\n \n@@ -441,7 +441,7 @@ main (int argc, char **argv)\n #endif\n \n   if (do_exit)\n-    exit (1);\n+    return (1);\n \n   /* First output the #include file. */\n \n@@ -624,7 +624,7 @@ typedef enum %s_ %s;\\n\\\n     fclose (incl);\n   if (in != stdin)\n     fclose (in);\n-  exit (0);\n+  return (0);\n }\n \n void"}, {"sha": "505bc12b0bbb32a0a4249f0dcf18026fb97fd490", "filename": "gcc/f/g77spec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0791fa925202359a56169bf0e28d89cd49f1c33/gcc%2Ff%2Fg77spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0791fa925202359a56169bf0e28d89cd49f1c33/gcc%2Ff%2Fg77spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77spec.c?ref=b0791fa925202359a56169bf0e28d89cd49f1c33", "patch": "@@ -304,7 +304,7 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n   fprintf (stderr, \"\\n\");\n #endif\n \n-  real_g77_newargv = argv;\n+  real_g77_newargv = *in_argv;\n \n   g77_xargc = argc;\n   g77_xargv = argv;"}, {"sha": "fa316212d6044d9dc3193d345517c81dd449447f", "filename": "gcc/f/intrin.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0791fa925202359a56169bf0e28d89cd49f1c33/gcc%2Ff%2Fintrin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0791fa925202359a56169bf0e28d89cd49f1c33/gcc%2Ff%2Fintrin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintrin.c?ref=b0791fa925202359a56169bf0e28d89cd49f1c33", "patch": "@@ -1165,9 +1165,9 @@ ffeintrin_check_any_ (ffebld arglist)\n static int\n ffeintrin_cmp_name_ (const void *name, const void *intrinsic)\n {\n-  const char *uc = ((struct _ffeintrin_name_ *) intrinsic)->name_uc;\n-  const char *lc = ((struct _ffeintrin_name_ *) intrinsic)->name_lc;\n-  const char *ic = ((struct _ffeintrin_name_ *) intrinsic)->name_ic;\n+  const char *uc = ((const struct _ffeintrin_name_ *) intrinsic)->name_uc;\n+  const char *lc = ((const struct _ffeintrin_name_ *) intrinsic)->name_lc;\n+  const char *ic = ((const struct _ffeintrin_name_ *) intrinsic)->name_ic;\n \n   return ffesrc_strcmp_2c (ffe_case_intrin (), name, uc, lc, ic);\n }"}]}