{"sha": "8fe07c420601a4462ef0dce58346f19d259ac045", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZlMDdjNDIwNjAxYTQ0NjJlZjBkY2U1ODM0NmYxOWQyNTlhYzA0NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-09-17T21:46:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-09-17T21:46:20Z"}, "message": "tree-pass.h (pass_vect_dce): Declare.\n\n        * tree-pass.h (pass_vect_dce): Declare.\n        * passes.c (init_optimization_passes): Add it.\n        * tree-flow.h (tree_ssa_dce): Declare.\n        * tree-ssa-dce.c (tree_ssa_dce): Export.\n        * tree-ssa-loop.c (tree_vectorize): Move current_loops check ...\n        (gate_tree_vectorize): ... here.\n        (pass_vect_dce): New.\n\nFrom-SVN: r104376", "tree": {"sha": "413d9496ae75a23076489beca6df3159d54426a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/413d9496ae75a23076489beca6df3159d54426a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fe07c420601a4462ef0dce58346f19d259ac045", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fe07c420601a4462ef0dce58346f19d259ac045", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fe07c420601a4462ef0dce58346f19d259ac045", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fe07c420601a4462ef0dce58346f19d259ac045/comments", "author": null, "committer": null, "parents": [{"sha": "0856ee98d3c36b382be29a7d33ff7341af6e299f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0856ee98d3c36b382be29a7d33ff7341af6e299f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0856ee98d3c36b382be29a7d33ff7341af6e299f"}], "stats": {"total": 112, "additions": 72, "deletions": 40}, "files": [{"sha": "b32d3c08d984082c7ac07e843f0818e81b4369b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 35, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe07c420601a4462ef0dce58346f19d259ac045/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe07c420601a4462ef0dce58346f19d259ac045/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fe07c420601a4462ef0dce58346f19d259ac045", "patch": "@@ -1,3 +1,13 @@\n+2005-09-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* tree-pass.h (pass_vect_dce): Declare.\n+\t* passes.c (init_optimization_passes): Add it.\n+\t* tree-flow.h (tree_ssa_dce): Declare.\n+\t* tree-ssa-dce.c (tree_ssa_dce): Export.\n+\t* tree-ssa-loop.c (tree_vectorize): Move current_loops check ...\n+\t(gate_tree_vectorize): ... here.\n+\t(pass_vect_dce): New.\n+\n 2005-09-17  Jan Hubicka  <jh@suse.cz>\n \n \t* except.c (struct eh_status): Turn region_array into vec.\n@@ -400,43 +410,43 @@\n \n 2005-09-07  Richard Henderson  <rth@redhat.com>\n \n-        * function.c (ARG_POINTER_CFA_OFFSET): Move ...\n-        * defaults.h (ARG_POINTER_CFA_OFFSET): ... here.\n+\t* function.c (ARG_POINTER_CFA_OFFSET): Move ...\n+\t* defaults.h (ARG_POINTER_CFA_OFFSET): ... here.\n \t(INCOMING_FRAME_SP_OFFSET): Move from dwarf2out.c.\n-        * dwarf2out.c (struct cfa_loc): Change reg to unsigned int,\n-        rearrange for better packing.\n+\t* dwarf2out.c (struct cfa_loc): Change reg to unsigned int,\n+\trearrange for better packing.\n \t(INCOMING_FRAME_SP_OFFSET): Move to defaults.h.\n-        (lookup_cfa_1): Remove inline marker.\n-        (cfa_equal_p): Split out of ...\n-        (def_cfa_1): ... here.  Use INVALID_REGNUM.\n-        (build_cfa_loc): Handle !cfa->indirect.\n-        (frame_pointer_cfa_offset): New.\n-        (dbx_reg_number): Assert register elimination performed; do\n-        leaf register remapping.\n-        (reg_loc_descriptor): Avoid calling dbx_reg_number when unused.\n-        (eliminate_reg_to_offset): New.\n-        (based_loc_descr): Remove can_use_fbreg argument.  Use fbreg only\n-        for verifiably local stack frame addresses; re-base to CFA.\n-        (mem_loc_descriptor): Remove can_use_fbreg argument.\n-        (concat_loc_descriptor, loc_descriptor): Likewise.\n-        (containing_function_has_frame_base): Remove.\n-        (rtl_for_decl_location): Don't do register elimination or\n-        leaf register remapping here.\n-        (secname_for_decl): Split out from ..\n-        (add_location_or_const_value_attribute): ... here.\n-        (convert_cfa_to_loc_list): New.\n-        (compute_frame_pointer_to_cfa_displacement): New.\n-        (gen_subprogram_die): Use them.\n-        * tree.h (frame_base_decl): Remove.\n-        * var-tracking.c (frame_base_decl, frame_stack_adjust): Remove.\n-        (prologue_stack_adjust): Remove.\n-        (vt_stack_adjustments): Use INCOMING_FRAME_SP_OFFSET.\n-        (adjust_stack_reference): Re-base memories to arg_pointer_rtx.\n-        (set_frame_base_location): Remove.\n-        (compute_bb_dataflow, emit_notes_in_bb): Don't call it.\n-        (dump_attrs_list, dump_dataflow_set): Use string concatenation.\n-        (vt_add_function_parameters): Don't eliminate_regs.\n-        (vt_initialize): Don't create frame_base_decl.\n+\t(lookup_cfa_1): Remove inline marker.\n+\t(cfa_equal_p): Split out of ...\n+\t(def_cfa_1): ... here.  Use INVALID_REGNUM.\n+\t(build_cfa_loc): Handle !cfa->indirect.\n+\t(frame_pointer_cfa_offset): New.\n+\t(dbx_reg_number): Assert register elimination performed; do\n+\tleaf register remapping.\n+\t(reg_loc_descriptor): Avoid calling dbx_reg_number when unused.\n+\t(eliminate_reg_to_offset): New.\n+\t(based_loc_descr): Remove can_use_fbreg argument.  Use fbreg only\n+\tfor verifiably local stack frame addresses; re-base to CFA.\n+\t(mem_loc_descriptor): Remove can_use_fbreg argument.\n+\t(concat_loc_descriptor, loc_descriptor): Likewise.\n+\t(containing_function_has_frame_base): Remove.\n+\t(rtl_for_decl_location): Don't do register elimination or\n+\tleaf register remapping here.\n+\t(secname_for_decl): Split out from ..\n+\t(add_location_or_const_value_attribute): ... here.\n+\t(convert_cfa_to_loc_list): New.\n+\t(compute_frame_pointer_to_cfa_displacement): New.\n+\t(gen_subprogram_die): Use them.\n+\t* tree.h (frame_base_decl): Remove.\n+\t* var-tracking.c (frame_base_decl, frame_stack_adjust): Remove.\n+\t(prologue_stack_adjust): Remove.\n+\t(vt_stack_adjustments): Use INCOMING_FRAME_SP_OFFSET.\n+\t(adjust_stack_reference): Re-base memories to arg_pointer_rtx.\n+\t(set_frame_base_location): Remove.\n+\t(compute_bb_dataflow, emit_notes_in_bb): Don't call it.\n+\t(dump_attrs_list, dump_dataflow_set): Use string concatenation.\n+\t(vt_add_function_parameters): Don't eliminate_regs.\n+\t(vt_initialize): Don't create frame_base_decl.\n \n 2005-09-07  Eric Botcazou  <ebotcazou@libertysurf.fr>\n "}, {"sha": "bf6db2cda737857176b3da3b650622c62da792a0", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe07c420601a4462ef0dce58346f19d259ac045/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe07c420601a4462ef0dce58346f19d259ac045/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=8fe07c420601a4462ef0dce58346f19d259ac045", "patch": "@@ -567,6 +567,7 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_iv_canon);\n   NEXT_PASS (pass_if_conversion);\n   NEXT_PASS (pass_vectorize);\n+  NEXT_PASS (pass_vect_dce);\n   /* NEXT_PASS (pass_may_alias) cannot be done again because the\n      vectorizer creates alias relations that are not supported by\n      pass_may_alias.  */"}, {"sha": "ee53971667823bb5b178270d8c9bcb66ee38badb", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe07c420601a4462ef0dce58346f19d259ac045/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe07c420601a4462ef0dce58346f19d259ac045/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=8fe07c420601a4462ef0dce58346f19d259ac045", "patch": "@@ -707,6 +707,9 @@ struct tree_niter_desc\n \t\t\t   the loop), then the information would be lost.  */\n };\n \n+/* In tree-ssa-dce.c */\n+void tree_ssa_dce (void);\n+\n /* In tree-vectorizer.c */\n void vectorize_loops (struct loops *);\n "}, {"sha": "cca51d3d6a39d1020ead8262958d0fbd95277dfa", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe07c420601a4462ef0dce58346f19d259ac045/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe07c420601a4462ef0dce58346f19d259ac045/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=8fe07c420601a4462ef0dce58346f19d259ac045", "patch": "@@ -234,6 +234,7 @@ extern struct tree_opt_pass pass_empty_loop;\n extern struct tree_opt_pass pass_record_bounds;\n extern struct tree_opt_pass pass_if_conversion;\n extern struct tree_opt_pass pass_vectorize;\n+extern struct tree_opt_pass pass_vect_dce;\n extern struct tree_opt_pass pass_complete_unroll;\n extern struct tree_opt_pass pass_iv_optimize;\n extern struct tree_opt_pass pass_tree_loop_done;"}, {"sha": "e77bc6008a34491b4e0112e169e0eb3435d857d5", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe07c420601a4462ef0dce58346f19d259ac045/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe07c420601a4462ef0dce58346f19d259ac045/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=8fe07c420601a4462ef0dce58346f19d259ac045", "patch": "@@ -935,7 +935,7 @@ perform_tree_ssa_dce (bool aggressive)\n }\n \n /* Pass entry points.  */\n-static void\n+void\n tree_ssa_dce (void)\n {\n   perform_tree_ssa_dce (/*aggressive=*/false);"}, {"sha": "ce629726e7957907fde23bf9b7d53d0e3b64f1e8", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe07c420601a4462ef0dce58346f19d259ac045/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe07c420601a4462ef0dce58346f19d259ac045/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=8fe07c420601a4462ef0dce58346f19d259ac045", "patch": "@@ -188,16 +188,13 @@ struct tree_opt_pass pass_tree_unswitch =\n static void\n tree_vectorize (void)\n {\n-  if (!current_loops)\n-    return;\n-\n   vectorize_loops (current_loops);\n }\n \n static bool\n gate_tree_vectorize (void)\n {\n-  return flag_tree_vectorize != 0;\n+  return flag_tree_vectorize && current_loops;\n }\n \n struct tree_opt_pass pass_vectorize =\n@@ -217,6 +214,26 @@ struct tree_opt_pass pass_vectorize =\n   0\t\t\t\t\t/* letter */\n };\n \n+struct tree_opt_pass pass_vect_dce =\n+{\n+  \"vect_dce\",\t\t\t\t/* name */\n+  gate_tree_vectorize,\t\t\t/* gate */\n+  tree_ssa_dce,\t\t\t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  TV_TREE_DCE,\t\t\t\t/* tv_id */\n+  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  TODO_dump_func \n+    | TODO_update_ssa_no_phi \n+    | TODO_cleanup_cfg\n+    | TODO_ggc_collect\n+    | TODO_verify_ssa,\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n+};\n \n /* Loop nest optimizations.  */\n "}]}