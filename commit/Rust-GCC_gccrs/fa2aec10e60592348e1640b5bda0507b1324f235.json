{"sha": "fa2aec10e60592348e1640b5bda0507b1324f235", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEyYWVjMTBlNjA1OTIzNDhlMTY0MGI1YmRhMDUwN2IxMzI0ZjIzNQ==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-08T21:57:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-08T21:57:02Z"}, "message": "Merge #615\n\n615: lex: accept zero codepoints in strings r=philberty a=dkm\n\nFrom Mark Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000127.html\r\n\r\n> \r\n> Zero characters (codepoints) are acceptable in strings. The current\r\n> Lexer::parse_string skipped such zero codepoints by accidents. The\r\n> zero codepoint was also used as error/skip indicator, but that is only\r\n> true if the third argument of utf8_escape_pair is true (yes, it is\r\n> called pair, but is a triple).\r\n> \r\n> Add a testcase that checks the (sub)strings are separated by zero\r\n> chars. Since we cannot slice strings yet this uses extern \"C\"\r\n> functions, printf and memchr.\r\n\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>", "tree": {"sha": "9d02fcb274469700637cdbde6e54e0fe81ff03e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d02fcb274469700637cdbde6e54e0fe81ff03e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa2aec10e60592348e1640b5bda0507b1324f235", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhEFMuCRBK7hj4Ov3rIwAAlAcIADAcmh04qLUx0Jdzj7vbSPy9\npMH0q8+F9aipSaqScSZRjaqKXuChXYjE/y+wJ9vlwe3SbqCiSDcbxBWNX8v9Qk0K\nwuMD67rb/rKPMlLsYR0zYD+tgPWMPHTx86TQsQytSUQUuigu4BtowaYUNzmtE8mX\nVj2+zg5JWvnPjGdwg02yuoSH2gx+QmQuFVadPaUoPEluVqfSkrdzZUypKxxjK6qF\nxJSSSoqTPHjA2U7M2+vtWet6xq/oIrcENEApeyBgGs5FtLKKm5NPudoQ+h2SC8pk\n6VvKhc4C5P4sRoR8L/cwB9d2+5UM8oZou3uMxboHdLx6oe/idepF1frAQLpJsPo=\n=uQ8S\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d02fcb274469700637cdbde6e54e0fe81ff03e4\nparent 6bd42365fa2f46430fe933deaecd879857415fc4\nparent 007e6ecefb0b43d0b9e7bf85f75ec050b5c520e5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628459822 +0000\ncommitter GitHub <noreply@github.com> 1628459822 +0000\n\nMerge #615\n\n615: lex: accept zero codepoints in strings r=philberty a=dkm\n\nFrom Mark Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000127.html\r\n\r\n> \r\n> Zero characters (codepoints) are acceptable in strings. The current\r\n> Lexer::parse_string skipped such zero codepoints by accidents. The\r\n> zero codepoint was also used as error/skip indicator, but that is only\r\n> true if the third argument of utf8_escape_pair is true (yes, it is\r\n> called pair, but is a triple).\r\n> \r\n> Add a testcase that checks the (sub)strings are separated by zero\r\n> chars. Since we cannot slice strings yet this uses extern \"C\"\r\n> functions, printf and memchr.\r\n\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2aec10e60592348e1640b5bda0507b1324f235", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa2aec10e60592348e1640b5bda0507b1324f235", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2aec10e60592348e1640b5bda0507b1324f235/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bd42365fa2f46430fe933deaecd879857415fc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd42365fa2f46430fe933deaecd879857415fc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bd42365fa2f46430fe933deaecd879857415fc4"}, {"sha": "007e6ecefb0b43d0b9e7bf85f75ec050b5c520e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/007e6ecefb0b43d0b9e7bf85f75ec050b5c520e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/007e6ecefb0b43d0b9e7bf85f75ec050b5c520e5"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "49b6b6d32a749693229a90017bf073d1d3c9b67f", "filename": "gcc/rust/lex/rust-lex.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2aec10e60592348e1640b5bda0507b1324f235/gcc%2Frust%2Flex%2Frust-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2aec10e60592348e1640b5bda0507b1324f235/gcc%2Frust%2Flex%2Frust-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.cc?ref=fa2aec10e60592348e1640b5bda0507b1324f235", "patch": "@@ -1827,7 +1827,8 @@ Lexer::parse_string (Location loc)\n \t  else\n \t    length += std::get<1> (utf8_escape_pair);\n \n-\t  if (current_char32 != Codepoint (0))\n+\t  if (current_char32 != Codepoint (0)\n+\t      || !std::get<2> (utf8_escape_pair))\n \t    str += current_char32;\n \n \t  // required as parsing utf8 escape only changes current_char"}, {"sha": "e7fba0d1372a37a99719cefdacc17539dddea8de", "filename": "gcc/testsuite/rust/execute/torture/str-zero.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2aec10e60592348e1640b5bda0507b1324f235/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-zero.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2aec10e60592348e1640b5bda0507b1324f235/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-zero.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-zero.rs?ref=fa2aec10e60592348e1640b5bda0507b1324f235", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-output \"bar foo baz foobar\\n\" } */\n+extern \"C\"\n+{\n+  fn printf(s: *const i8, ...);\n+  fn memchr(s: *const i8, c: u8, n: usize) -> *const i8;\n+}\n+\n+pub fn main () -> i32\n+{\n+  let f = \"%s %s %s %s\\n\\0\";\n+  let s = \"bar\\0\\\n+           foo\\\n+           \\x00\\\n+           baz\\u{0000}\\\n+           foobar\\0\";\n+  let cf = f as *const str as *const i8;\n+  let cs = s as *const str as *const i8;\n+  unsafe\n+    {\n+      let cs2 = memchr (cs, b'f', 5);\n+      let cs3 = memchr (cs2, b'b', 5);\n+      let cs4 = memchr (cs3, b'f', 5);\n+      printf (cf, cs, cs2, cs3, cs4);\n+    }\n+  0\n+}"}]}