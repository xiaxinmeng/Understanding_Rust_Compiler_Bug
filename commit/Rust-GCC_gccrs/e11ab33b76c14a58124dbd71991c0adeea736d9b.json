{"sha": "e11ab33b76c14a58124dbd71991c0adeea736d9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTExYWIzM2I3NmMxNGE1ODEyNGRiZDcxOTkxYzBhZGVlYTczNmQ5Yg==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2004-12-07T01:14:40Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2004-12-07T01:14:40Z"}, "message": "reload.c (find_valid_class): Fix logic to test inner mode as well.\n\n* reload.c (find_valid_class): Fix logic to test inner mode as well.\n(push_reload): Pass inner mode.\n\nFrom-SVN: r91802", "tree": {"sha": "861e9f14a0b81df68d28f56d761a5d92d63bc7bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/861e9f14a0b81df68d28f56d761a5d92d63bc7bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e11ab33b76c14a58124dbd71991c0adeea736d9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11ab33b76c14a58124dbd71991c0adeea736d9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e11ab33b76c14a58124dbd71991c0adeea736d9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11ab33b76c14a58124dbd71991c0adeea736d9b/comments", "author": null, "committer": null, "parents": [{"sha": "e09ec16630ef1ec3dc7d6b512d3eb019e40d0424", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09ec16630ef1ec3dc7d6b512d3eb019e40d0424", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e09ec16630ef1ec3dc7d6b512d3eb019e40d0424"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "ebc7bae02a25b98752eb48b889726fa9623cdbbb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11ab33b76c14a58124dbd71991c0adeea736d9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11ab33b76c14a58124dbd71991c0adeea736d9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e11ab33b76c14a58124dbd71991c0adeea736d9b", "patch": "@@ -1,3 +1,8 @@\n+2004-12-06  DJ Delorie  <dj@redhat.com>\n+\n+\t* reload.c (find_valid_class): Fix logic to test inner mode as well.\n+\t(push_reload): Pass inner mode.\n+\n 2004-12-06  Eric Christopher  <echristo@redhat.com>\n \n \t* doc/tm.texi (TARGET_VALID_POINTER_MODE): Document."}, {"sha": "eec1b0fcf5290906a473e5d560cf087a6acc91b1", "filename": "gcc/reload.c", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11ab33b76c14a58124dbd71991c0adeea736d9b/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11ab33b76c14a58124dbd71991c0adeea736d9b/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=e11ab33b76c14a58124dbd71991c0adeea736d9b", "patch": "@@ -240,7 +240,8 @@ static int push_secondary_reload (int, rtx, int, int, enum reg_class,\n \t\t\t\t  enum machine_mode, enum reload_type,\n \t\t\t\t  enum insn_code *);\n #endif\n-static enum reg_class find_valid_class (enum machine_mode, int, unsigned int);\n+static enum reg_class find_valid_class (enum machine_mode, enum machine_mode,\n+\t\t\t\t\tint, unsigned int);\n static int reload_inner_reg_of_subreg (rtx, enum machine_mode, int);\n static void push_replacement (rtx *, int, enum machine_mode);\n static void dup_replacements (rtx *, rtx *);\n@@ -659,12 +660,15 @@ clear_secondary_mem (void)\n }\n #endif /* SECONDARY_MEMORY_NEEDED */\n \f\n-/* Find the largest class for which every register number plus N is valid in\n-   M1 (if in range) and is cheap to move into REGNO.\n-   Abort if no such class exists.  */\n+\n+/* Find the largest class which has at least one register valid in\n+   mode INNER, and which for every such register, that register number\n+   plus N is also valid in OUTER (if in range) and is cheap to move\n+   into REGNO.  Abort if no such class exists.  */\n \n static enum reg_class\n-find_valid_class (enum machine_mode m1 ATTRIBUTE_UNUSED, int n,\n+find_valid_class (enum machine_mode outer ATTRIBUTE_UNUSED,\n+\t\t  enum machine_mode inner ATTRIBUTE_UNUSED, int n,\n \t\t  unsigned int dest_regno ATTRIBUTE_UNUSED)\n {\n   int best_cost = -1;\n@@ -678,23 +682,30 @@ find_valid_class (enum machine_mode m1 ATTRIBUTE_UNUSED, int n,\n   for (class = 1; class < N_REG_CLASSES; class++)\n     {\n       int bad = 0;\n-      for (regno = 0; regno < FIRST_PSEUDO_REGISTER && ! bad; regno++)\n-\tif (TEST_HARD_REG_BIT (reg_class_contents[class], regno)\n-\t    && TEST_HARD_REG_BIT (reg_class_contents[class], regno + n)\n-\t    && ! HARD_REGNO_MODE_OK (regno + n, m1))\n-\t  bad = 1;\n+      int good = 0;\n+      for (regno = 0; regno < FIRST_PSEUDO_REGISTER - n && ! bad; regno++)\n+\tif (TEST_HARD_REG_BIT (reg_class_contents[class], regno))\n+\t  {\n+\t    if (HARD_REGNO_MODE_OK (regno, inner))\n+\t      {\n+\t\tgood = 1;\n+\t\tif (! TEST_HARD_REG_BIT (reg_class_contents[class], regno + n)\n+\t\t    || ! HARD_REGNO_MODE_OK (regno + n, outer))\n+\t\t  bad = 1;\n+\t      }\n+\t  }\n \n-      if (bad)\n+      if (bad || !good)\n \tcontinue;\n-      cost = REGISTER_MOVE_COST (m1, class, dest_class);\n+      cost = REGISTER_MOVE_COST (outer, class, dest_class);\n \n       if ((reg_class_size[class] > best_size\n \t   && (best_cost < 0 || best_cost >= cost))\n \t  || best_cost > cost)\n \t{\n \t  best_class = class;\n \t  best_size = reg_class_size[class];\n-\t  best_cost = REGISTER_MOVE_COST (m1, class, dest_class);\n+\t  best_cost = REGISTER_MOVE_COST (outer, class, dest_class);\n \t}\n     }\n \n@@ -1083,7 +1094,7 @@ push_reload (rtx in, rtx out, rtx *inloc, rtx *outloc,\n \n       if (REG_P (SUBREG_REG (in)))\n \tin_class\n-\t  = find_valid_class (inmode,\n+\t  = find_valid_class (inmode, GET_MODE (SUBREG_REG (in)),\n \t\t\t      subreg_regno_offset (REGNO (SUBREG_REG (in)),\n \t\t\t\t\t\t   GET_MODE (SUBREG_REG (in)),\n \t\t\t\t\t\t   SUBREG_BYTE (in),\n@@ -1180,7 +1191,7 @@ push_reload (rtx in, rtx out, rtx *inloc, rtx *outloc,\n       dont_remove_subreg = 1;\n       push_reload (SUBREG_REG (out), SUBREG_REG (out), &SUBREG_REG (out),\n \t\t   &SUBREG_REG (out),\n-\t\t   find_valid_class (outmode,\n+\t\t   find_valid_class (outmode, GET_MODE (SUBREG_REG (out)),\n \t\t\t\t     subreg_regno_offset (REGNO (SUBREG_REG (out)),\n \t\t\t\t\t\t\t  GET_MODE (SUBREG_REG (out)),\n \t\t\t\t\t\t\t  SUBREG_BYTE (out),"}]}