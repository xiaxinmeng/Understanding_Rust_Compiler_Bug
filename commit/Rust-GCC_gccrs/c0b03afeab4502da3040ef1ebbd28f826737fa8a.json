{"sha": "c0b03afeab4502da3040ef1ebbd28f826737fa8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBiMDNhZmVhYjQ1MDJkYTMwNDBlZjFlYmJkMjhmODI2NzM3ZmE4YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-09-06T09:16:08Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-09-06T09:18:06Z"}, "message": "Fix debug info for packed array types in Ada\n\nPacked array types are sometimes represented with integer types under the\nhood in Ada, but we nevertheless need to emit them as array types in the\ndebug info so we have the types.get_array_descr_info langhook for this\npurpose; but it is not invoked from modified_type_die, which causes:\n\nFAIL: gdb.ada/arrayptr.exp: scenario=minimal: print pa_ptr.all\nFAIL: gdb.ada/arrayptr.exp: scenario=minimal: print pa_ptr.all(3)\n\nin the GDB testsuite.\n\ngcc/\n\t* dwarf2out.c (modified_type_die): Deal with all array types earlier\n\tand use local variable consistently throughout the function.", "tree": {"sha": "1af09fe1972c1ae866af8488939da17be43da15e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1af09fe1972c1ae866af8488939da17be43da15e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0b03afeab4502da3040ef1ebbd28f826737fa8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0b03afeab4502da3040ef1ebbd28f826737fa8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0b03afeab4502da3040ef1ebbd28f826737fa8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0b03afeab4502da3040ef1ebbd28f826737fa8a/comments", "author": null, "committer": null, "parents": [{"sha": "8a4602c2e0f81895415ba7ee23bf81dc795d1103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a4602c2e0f81895415ba7ee23bf81dc795d1103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a4602c2e0f81895415ba7ee23bf81dc795d1103"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "4f100606618674fa3a5cc495fd728d4118e87ea8", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b03afeab4502da3040ef1ebbd28f826737fa8a/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b03afeab4502da3040ef1ebbd28f826737fa8a/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c0b03afeab4502da3040ef1ebbd28f826737fa8a", "patch": "@@ -13542,6 +13542,7 @@ modified_type_die (tree type, int cv_quals, bool reverse,\n   tree qualified_type;\n   tree name, low, high;\n   dw_die_ref mod_scope;\n+  struct array_descr_info info;\n   /* Only these cv-qualifiers are currently handled.  */\n   const int cv_qual_mask = (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE\n \t\t\t    | TYPE_QUAL_RESTRICT | TYPE_QUAL_ATOMIC | \n@@ -13786,6 +13787,13 @@ modified_type_die (tree type, int cv_quals, bool reverse,\n \t    }\n \t}\n     }\n+  else if (code == ARRAY_TYPE\n+\t   || (lang_hooks.types.get_array_descr_info\n+\t       && lang_hooks.types.get_array_descr_info (type, &info)))\n+    {\n+      gen_type_die (type, context_die);\n+      return lookup_type_die (type);\n+    }\n   else if (code == INTEGER_TYPE\n \t   && TREE_TYPE (type) != NULL_TREE\n \t   && subrange_type_for_debug_p (type, &low, &high))\n@@ -13822,8 +13830,7 @@ modified_type_die (tree type, int cv_quals, bool reverse,\n \t copy was created to help us keep track of typedef names) and\n \t that copy might have a different TYPE_UID from the original\n \t ..._TYPE node.  */\n-      if (TREE_CODE (type) == FUNCTION_TYPE\n-\t  || TREE_CODE (type) == METHOD_TYPE)\n+      if (code == FUNCTION_TYPE || code == METHOD_TYPE)\n \t{\n \t  /* For function/method types, can't just use type_main_variant here,\n \t     because that can have different ref-qualifiers for C++,\n@@ -13836,13 +13843,12 @@ modified_type_die (tree type, int cv_quals, bool reverse,\n \t      return lookup_type_die (t);\n \t  return lookup_type_die (type);\n \t}\n-      else if (TREE_CODE (type) != VECTOR_TYPE\n-\t       && TREE_CODE (type) != ARRAY_TYPE)\n-\treturn lookup_type_die (type_main_variant (type));\n-      else\n-\t/* Vectors have the debugging information in the type,\n-\t   not the main variant.  */\n+      /* Vectors have the debugging information in the type,\n+\t not the main variant.  */\n+      else if (code == VECTOR_TYPE)\n \treturn lookup_type_die (type);\n+      else\n+\treturn lookup_type_die (type_main_variant (type));\n     }\n \n   /* Builtin types don't have a DECL_ORIGINAL_TYPE.  For those,"}]}