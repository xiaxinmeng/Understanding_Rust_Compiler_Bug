{"sha": "8f8b5612dc889bdbbdbb1944217d6d5db7294c7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY4YjU2MTJkYzg4OWJkYmJkYmIxOTQ0MjE3ZDZkNWRiNzI5NGM3Yw==", "commit": {"author": {"name": "Geoff Keating", "email": "geoffk@cygnus.com", "date": "1999-11-24T06:25:14Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "1999-11-24T06:25:14Z"}, "message": "mips.md (div_trap_normal): Don't ask for the REGNO of (const_int 0)...\n\n* config/mips/mips.md (div_trap_normal): Don't ask for the REGNO\nof (const_int 0), when what we really care about is\nwhether it's a zero constant anyway.\n(div_trap_mips16): Likewise.\n\nFrom-SVN: r30648", "tree": {"sha": "4d0821103c36efb25a66f886aaf5435d0e6e4826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d0821103c36efb25a66f886aaf5435d0e6e4826"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f8b5612dc889bdbbdbb1944217d6d5db7294c7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8b5612dc889bdbbdbb1944217d6d5db7294c7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f8b5612dc889bdbbdbb1944217d6d5db7294c7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8b5612dc889bdbbdbb1944217d6d5db7294c7c/comments", "author": null, "committer": null, "parents": [{"sha": "428248f7944d289104751f05dc49d0e0c359f161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/428248f7944d289104751f05dc49d0e0c359f161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/428248f7944d289104751f05dc49d0e0c359f161"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "d0ae9ba9937b83014a276eb062d0e90c9ba1883f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8b5612dc889bdbbdbb1944217d6d5db7294c7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8b5612dc889bdbbdbb1944217d6d5db7294c7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f8b5612dc889bdbbdbb1944217d6d5db7294c7c", "patch": "@@ -1,3 +1,10 @@\n+1999-11-24  Geoffrey Keating  <geoffk@cygnus.com>\n+\n+\t* config/mips/mips.md (div_trap_normal): Don't ask for the REGNO\n+\tof (const_int 0), when what we really care about is\n+\twhether it's a zero constant anyway.\n+\t(div_trap_mips16): Likewise.\n+\n 1999-11-23  Mark Mitchell  <mark@codesourcery.com>\n \n \t* loop.c (loop_optimize): Always find_loop_tree_blocks and"}, {"sha": "c909a134d65b02bd3677b6299eb7e23ee7dbbd93", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8b5612dc889bdbbdbb1944217d6d5db7294c7c/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8b5612dc889bdbbdbb1944217d6d5db7294c7c/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=8f8b5612dc889bdbbdbb1944217d6d5db7294c7c", "patch": "@@ -2395,8 +2395,8 @@\n }\")\n \n (define_insn \"div_trap_normal\"\n-  [(trap_if (eq (match_operand 0 \"register_operand\" \"d\")\n-\t\t(match_operand 1 \"true_reg_or_0_operand\" \"dJ\"))\n+  [(trap_if (eq (match_operand 0 \"register_operand\" \"d,d\")\n+\t\t(match_operand 1 \"true_reg_or_0_operand\" \"d,J\"))\n             (match_operand 2 \"immediate_operand\" \"\"))]\n   \"!TARGET_MIPS16\"\n   \"*\n@@ -2411,20 +2411,20 @@\n     if ((int) REG_DEP_ANTI == (int) REG_NOTE_KIND (link)\n         && GET_CODE (XEXP (link, 0)) == INSN\n         && GET_CODE (PATTERN (XEXP (link, 0))) == TRAP_IF\n-\t&& REGNO (operands[1]) == 0)\n+\t&& which_alternative == 1)\n       have_dep_anti = 1;\n   if (! have_dep_anti)\n     {\n       if (GENERATE_BRANCHLIKELY)\n \t{\n-          if (GET_CODE (operands[1]) == CONST_INT)\n+          if (which_alternative == 1)\n \t    return \\\"%(beql\\\\t%0,$0,1f\\\\n\\\\tbreak\\\\t%2\\\\n%~1:%)\\\";\n \t  else\n \t    return \\\"%(beql\\\\t%0,%1,1f\\\\n\\\\tbreak\\\\t%2\\\\n%~1:%)\\\";\n \t}\n       else\n \t{\n-          if (GET_CODE (operands[1]) == CONST_INT)\n+          if (which_alternative == 1)\n \t    return \\\"%(bne\\\\t%0,$0,1f\\\\n\\\\tnop\\\\n\\\\tbreak\\\\t%2\\\\n%~1:%)\\\";\n \t  else\n \t    return \\\"%(bne\\\\t%0,%1,1f\\\\n\\\\tnop\\\\n\\\\tbreak\\\\t%2\\\\n%~1:%)\\\";\n@@ -2439,8 +2439,8 @@\n ;; The mips16 bne insns is a macro which uses reg 24 as an intermediate.\n \n (define_insn \"div_trap_mips16\"\n-  [(trap_if (eq (match_operand 0 \"register_operand\" \"d\")\n-\t\t(match_operand 1 \"true_reg_or_0_operand\" \"dJ\"))\n+  [(trap_if (eq (match_operand 0 \"register_operand\" \"d,d\")\n+\t\t(match_operand 1 \"true_reg_or_0_operand\" \"d,J\"))\n             (match_operand 2 \"immediate_operand\" \"\"))\n    (clobber (reg:SI 24))]\n   \"TARGET_MIPS16\"\n@@ -2456,12 +2456,12 @@\n     if ((int) REG_DEP_ANTI == (int) REG_NOTE_KIND (link)\n         && GET_CODE (XEXP (link, 0)) == INSN\n         && GET_CODE (PATTERN (XEXP (link, 0))) == TRAP_IF\n-\t&& REGNO (operands[1]) == 0)\n+\t&& which_alternative == 1)\n       have_dep_anti = 1;\n   if (! have_dep_anti)\n     {\n       /* No branch delay slots on mips16. */ \n-      if (GET_CODE (operands[1]) == CONST_INT)\n+      if (which_alternative == 1)\n         return \\\"%(bnez\\\\t%0,1f\\\\n\\\\tbreak\\\\t%2\\\\n%~1:%)\\\";\n       else\n         return \\\"%(bne\\\\t%0,%1,1f\\\\n\\\\tbreak\\\\t%2\\\\n%~1:%)\\\";"}]}