{"sha": "35cb3e53878eefd7ea817613ffbe6ab84502f92e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVjYjNlNTM4NzhlZWZkN2VhODE3NjEzZmZiZTZhYjg0NTAyZjkyZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-09-09T11:17:20Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-09-09T11:17:20Z"}, "message": "[ARM][1/7] Convert FP mnemonics to UAL | mov patterns.\n\n\t* config/arm/arm.c (output_move_vfp): Use UAL syntax for load/store\n\tmultiple.\n\t(arm_print_operand): Don't convert real values to decimal\n\trepresentation in default case.\n\t(fp_immediate_constant): Delete.\n\t* config/arm/arm-protos.h (fp_immediate_constant): Likewise.\n\t* config/arm/vfp.md (*arm_movsi_vfp): Convert to VFP moves to UAL\n\tsyntax.\n\t(*thumb2_movsi_vfp): Likewise.\n\t(*movdi_vfp): Likewise.\n\t(*movdi_vfp_cortexa8): Likewise.\n\t(*movhf_vfp_neon): Likewise.\n\t(*movhf_vfp): Likewise.\n\t(*movsf_vfp): Likewise.\n\t(*thumb2_movsf_vfp): Likewise.\n\t(*movdf_vfp): Likewise.\n\t(*thumb2_movdf_vfp): Likewise.\n\t(*movsfcc_vfp): Likewise.\n\t(*thumb2_movsfcc_vfp): Likewise.\n\t(*movdfcc_vfp): Likewise.\n\t(*thumb2_movdfcc_vfp): Likewise.\n\n\t* gcc.target/arm/pr51835.c: Update expected assembly.\n\t* gcc.target/arm/vfp-1.c: Likewise.\n\t* gcc.target/arm/vfp-ldmdbd.c: Likewise.\n\t* gcc.target/arm/vfp-ldmdbs.c: Likewise.\n\t* gcc.target/arm/vfp-ldmiad.c: Likewise.\n\t* gcc.target/arm/vfp-ldmias.c: Likewise.\n\t* gcc.target/arm/vfp-stmdbd.c: Likewise.\n\t* gcc.target/arm/vfp-stmdbs.c: Likewise.\n\t* gcc.target/arm/vfp-stmiad.c: Likewise.\n\t* gcc.target/arm/vfp-stmias.c: Likewise.\n\nFrom-SVN: r215050", "tree": {"sha": "bab0967f12402d3701673e5d8d1e03bdfe7982cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bab0967f12402d3701673e5d8d1e03bdfe7982cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35cb3e53878eefd7ea817613ffbe6ab84502f92e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35cb3e53878eefd7ea817613ffbe6ab84502f92e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35cb3e53878eefd7ea817613ffbe6ab84502f92e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35cb3e53878eefd7ea817613ffbe6ab84502f92e/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "995ba386eeeff521886fabf96b793048bc0305b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/995ba386eeeff521886fabf96b793048bc0305b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/995ba386eeeff521886fabf96b793048bc0305b9"}], "stats": {"total": 260, "additions": 138, "deletions": 122}, "files": [{"sha": "a4855233e93c45f875069dcffe910ea3d0316f23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35cb3e53878eefd7ea817613ffbe6ab84502f92e", "patch": "@@ -1,3 +1,27 @@\n+2014-09-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm.c (output_move_vfp): Use UAL syntax for load/store\n+\tmultiple.\n+\t(arm_print_operand): Don't convert real values to decimal\n+\trepresentation in default case.\n+\t(fp_immediate_constant): Delete.\n+\t* config/arm/arm-protos.h (fp_immediate_constant): Likewise.\n+\t* config/arm/vfp.md (*arm_movsi_vfp): Convert to VFP moves to UAL\n+\tsyntax.\n+\t(*thumb2_movsi_vfp): Likewise.\n+\t(*movdi_vfp): Likewise.\n+\t(*movdi_vfp_cortexa8): Likewise.\n+\t(*movhf_vfp_neon): Likewise.\n+\t(*movhf_vfp): Likewise.\n+\t(*movsf_vfp): Likewise.\n+\t(*thumb2_movsf_vfp): Likewise.\n+\t(*movdf_vfp): Likewise.\n+\t(*thumb2_movdf_vfp): Likewise.\n+\t(*movsfcc_vfp): Likewise.\n+\t(*thumb2_movsfcc_vfp): Likewise.\n+\t(*movdfcc_vfp): Likewise.\n+\t(*thumb2_movdfcc_vfp): Likewise.\n+\n 2014-09-09  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* doc/invoke.texi (-march): Use GNU/Linux rather than Linux."}, {"sha": "0878ab40e6dc728629976ada771609229ced0497", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=35cb3e53878eefd7ea817613ffbe6ab84502f92e", "patch": "@@ -126,7 +126,6 @@ extern int arm_max_const_double_inline_cost (void);\n extern int arm_const_double_inline_cost (rtx);\n extern bool arm_const_double_by_parts (rtx);\n extern bool arm_const_double_by_immediates (rtx);\n-extern const char *fp_immediate_constant (rtx);\n extern void arm_emit_call_insn (rtx, rtx, bool);\n extern const char *output_call (rtx *);\n extern const char *output_call_mem (rtx *);"}, {"sha": "06b1b6f39b4d3ab46863aefa9d3f85016329e894", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 11, "deletions": 31, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=35cb3e53878eefd7ea817613ffbe6ab84502f92e", "patch": "@@ -17539,24 +17539,7 @@ arm_reorg (void)\n \f\n /* Routines to output assembly language.  */\n \n-/* If the rtx is the correct value then return the string of the number.\n-   In this way we can ensure that valid double constants are generated even\n-   when cross compiling.  */\n-const char *\n-fp_immediate_constant (rtx x)\n-{\n-  REAL_VALUE_TYPE r;\n-\n-  if (!fp_consts_inited)\n-    init_fp_table ();\n-\n-  REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-\n-  gcc_assert (REAL_VALUES_EQUAL (r, value_fp0));\n-  return \"0\";\n-}\n-\n-/* As for fp_immediate_constant, but value is passed directly, not in rtx.  */\n+/* Return string representation of passed in real value.  */\n static const char *\n fp_const_from_val (REAL_VALUE_TYPE *r)\n {\n@@ -18472,27 +18455,27 @@ output_move_vfp (rtx *operands)\n   switch (GET_CODE (addr))\n     {\n     case PRE_DEC:\n-      templ = \"f%smdb%c%%?\\t%%0!, {%%%s1}%s\";\n+      templ = \"v%smdb%%?.%s\\t%%0!, {%%%s1}%s\";\n       ops[0] = XEXP (addr, 0);\n       ops[1] = reg;\n       break;\n \n     case POST_INC:\n-      templ = \"f%smia%c%%?\\t%%0!, {%%%s1}%s\";\n+      templ = \"v%smia%%?.%s\\t%%0!, {%%%s1}%s\";\n       ops[0] = XEXP (addr, 0);\n       ops[1] = reg;\n       break;\n \n     default:\n-      templ = \"f%s%c%%?\\t%%%s0, %%1%s\";\n+      templ = \"v%sr%%?.%s\\t%%%s0, %%1%s\";\n       ops[0] = reg;\n       ops[1] = mem;\n       break;\n     }\n \n   sprintf (buff, templ,\n \t   load ? \"ld\" : \"st\",\n-\t   dp ? 'd' : 's',\n+\t   dp ? \"64\" : \"32\",\n \t   dp ? \"P\" : \"\",\n \t   integer_p ? \"\\t%@ int\" : \"\");\n   output_asm_insn (buff, ops);\n@@ -22144,15 +22127,12 @@ arm_print_operand (FILE *stream, rtx x, int code)\n \t  break;\n \n \tcase CONST_DOUBLE:\n-          if (TARGET_NEON)\n-            {\n-              char fpstr[20];\n-              real_to_decimal (fpstr, CONST_DOUBLE_REAL_VALUE (x),\n-\t\t\t       sizeof (fpstr), 0, 1);\n-              fprintf (stream, \"#%s\", fpstr);\n-            }\n-          else\n-\t    fprintf (stream, \"#%s\", fp_immediate_constant (x));\n+\t  {\n+            char fpstr[20];\n+            real_to_decimal (fpstr, CONST_DOUBLE_REAL_VALUE (x),\n+\t\t\t      sizeof (fpstr), 0, 1);\n+            fprintf (stream, \"#%s\", fpstr);\n+\t  }\n \t  break;\n \n \tdefault:"}, {"sha": "c14f8e4c2463229a75680339533b4fca94a407f8", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 74, "deletions": 74, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=35cb3e53878eefd7ea817613ffbe6ab84502f92e", "patch": "@@ -41,11 +41,11 @@\n     case 5:\n       return \\\"str%?\\\\t%1, %0\\\";\n     case 6:\n-      return \\\"fmsr%?\\\\t%0, %1\\\\t%@ int\\\";\n+      return \\\"vmov%?\\\\t%0, %1\\\\t%@ int\\\";\n     case 7:\n-      return \\\"fmrs%?\\\\t%0, %1\\\\t%@ int\\\";\n+      return \\\"vmov%?\\\\t%0, %1\\\\t%@ int\\\";\n     case 8:\n-      return \\\"fcpys%?\\\\t%0, %1\\\\t%@ int\\\";\n+      return \\\"vmov%?.f32\\\\t%0, %1\\\\t%@ int\\\";\n     case 9: case 10:\n       return output_move_vfp (operands);\n     default:\n@@ -87,11 +87,11 @@\n     case 8:\n       return \\\"str%?\\\\t%1, %0\\\";\n     case 9:\n-      return \\\"fmsr%?\\\\t%0, %1\\\\t%@ int\\\";\n+      return \\\"vmov%?\\\\t%0, %1\\\\t%@ int\\\";\n     case 10:\n-      return \\\"fmrs%?\\\\t%0, %1\\\\t%@ int\\\";\n+      return \\\"vmov%?\\\\t%0, %1\\\\t%@ int\\\";\n     case 11:\n-      return \\\"fcpys%?\\\\t%0, %1\\\\t%@ int\\\";\n+      return \\\"vmov%?.f32\\\\t%0, %1\\\\t%@ int\\\";\n     case 12: case 13:\n       return output_move_vfp (operands);\n     default:\n@@ -130,14 +130,14 @@\n     case 6:\n       return output_move_double (operands, true, NULL);\n     case 7:\n-      return \\\"fmdrr%?\\\\t%P0, %Q1, %R1\\\\t%@ int\\\";\n+      return \\\"vmov%?\\\\t%P0, %Q1, %R1\\\\t%@ int\\\";\n     case 8:\n-      return \\\"fmrrd%?\\\\t%Q0, %R0, %P1\\\\t%@ int\\\";\n+      return \\\"vmov%?\\\\t%Q0, %R0, %P1\\\\t%@ int\\\";\n     case 9:\n       if (TARGET_VFP_SINGLE)\n-\treturn \\\"fcpys%?\\\\t%0, %1\\\\t%@ int\\;fcpys%?\\\\t%p0, %p1\\\\t%@ int\\\";\n+\treturn \\\"vmov%?.f32\\\\t%0, %1\\\\t%@ int\\;vmov%?.f32\\\\t%p0, %p1\\\\t%@ int\\\";\n       else\n-\treturn \\\"fcpyd%?\\\\t%P0, %P1\\\\t%@ int\\\";\n+\treturn \\\"vmov%?.f64\\\\t%P0, %P1\\\\t%@ int\\\";\n     case 10: case 11:\n       return output_move_vfp (operands);\n     default:\n@@ -181,11 +181,11 @@\n     case 6:\n       return output_move_double (operands, true, NULL);\n     case 7:\n-      return \\\"fmdrr%?\\\\t%P0, %Q1, %R1\\\\t%@ int\\\";\n+      return \\\"vmov%?\\\\t%P0, %Q1, %R1\\\\t%@ int\\\";\n     case 8:\n-      return \\\"fmrrd%?\\\\t%Q0, %R0, %P1\\\\t%@ int\\\";\n+      return \\\"vmov%?\\\\t%Q0, %R0, %P1\\\\t%@ int\\\";\n     case 9:\n-      return \\\"fcpyd%?\\\\t%P0, %P1\\\\t%@ int\\\";\n+      return \\\"vmov%?.f64\\\\t%P0, %P1\\\\t%@ int\\\";\n     case 10: case 11:\n       return output_move_vfp (operands);\n     default:\n@@ -229,13 +229,13 @@\n     case 3:     /* memory from ARM register */\n       return \\\"strh\\\\t%1, %0\\\\t%@ __fp16\\\";\n     case 4:\t/* S register from S register */\n-      return \\\"fcpys\\\\t%0, %1\\\";\n+      return \\\"vmov.f32\\\\t%0, %1\\\";\n     case 5:\t/* ARM register from ARM register */\n       return \\\"mov\\\\t%0, %1\\\\t%@ __fp16\\\";\n     case 6:\t/* S register from ARM register */\n-      return \\\"fmsr\\\\t%0, %1\\\";\n+      return \\\"vmov\\\\t%0, %1\\\";\n     case 7:\t/* ARM register from S register */\n-      return \\\"fmrs\\\\t%0, %1\\\";\n+      return \\\"vmov\\\\t%0, %1\\\";\n     case 8:\t/* ARM register from constant */\n       {\n         REAL_VALUE_TYPE r;\n@@ -280,13 +280,13 @@\n     case 1:     /* memory from ARM register */\n       return \\\"strh\\\\t%1, %0\\\\t%@ __fp16\\\";\n     case 2:\t/* S register from S register */\n-      return \\\"fcpys\\\\t%0, %1\\\";\n+      return \\\"vmov.f32\\\\t%0, %1\\\";\n     case 3:\t/* ARM register from ARM register */\n       return \\\"mov\\\\t%0, %1\\\\t%@ __fp16\\\";\n     case 4:\t/* S register from ARM register */\n-      return \\\"fmsr\\\\t%0, %1\\\";\n+      return \\\"vmov\\\\t%0, %1\\\";\n     case 5:\t/* ARM register from S register */\n-      return \\\"fmrs\\\\t%0, %1\\\";\n+      return \\\"vmov\\\\t%0, %1\\\";\n     case 6:\t/* ARM register from constant */\n       {\n         REAL_VALUE_TYPE r;\n@@ -322,27 +322,27 @@\n \n (define_insn \"*movsf_vfp\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=t,?r,t ,t  ,Uv,r ,m,t,r\")\n-\t(match_operand:SF 1 \"general_operand\"\t   \" ?r,t,Dv,UvE,t, mE,r,t,r\"))]\n+        (match_operand:SF 1 \"general_operand\"\t   \" ?r,t,Dv,UvE,t, mE,r,t,r\"))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_VFP\n    && (   s_register_operand (operands[0], SFmode)\n        || s_register_operand (operands[1], SFmode))\"\n   \"*\n   switch (which_alternative)\n     {\n     case 0:\n-      return \\\"fmsr%?\\\\t%0, %1\\\";\n+      return \\\"vmov%?\\\\t%0, %1\\\";\n     case 1:\n-      return \\\"fmrs%?\\\\t%0, %1\\\";\n+      return \\\"vmov%?\\\\t%0, %1\\\";\n     case 2:\n-      return \\\"fconsts%?\\\\t%0, #%G1\\\";\n+      return \\\"vmov%?.f32\\\\t%0, %1\\\";\n     case 3: case 4:\n       return output_move_vfp (operands);\n     case 5:\n       return \\\"ldr%?\\\\t%0, %1\\\\t%@ float\\\";\n     case 6:\n       return \\\"str%?\\\\t%1, %0\\\\t%@ float\\\";\n     case 7:\n-      return \\\"fcpys%?\\\\t%0, %1\\\";\n+      return \\\"vmov%?.f32\\\\t%0, %1\\\";\n     case 8:\n       return \\\"mov%?\\\\t%0, %1\\\\t%@ float\\\";\n     default:\n@@ -366,19 +366,19 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \\\"fmsr%?\\\\t%0, %1\\\";\n+      return \\\"vmov%?\\\\t%0, %1\\\";\n     case 1:\n-      return \\\"fmrs%?\\\\t%0, %1\\\";\n+      return \\\"vmov%?\\\\t%0, %1\\\";\n     case 2:\n-      return \\\"fconsts%?\\\\t%0, #%G1\\\";\n+      return \\\"vmov%?.f32\\\\t%0, %1\\\";\n     case 3: case 4:\n       return output_move_vfp (operands);\n     case 5:\n       return \\\"ldr%?\\\\t%0, %1\\\\t%@ float\\\";\n     case 6:\n       return \\\"str%?\\\\t%1, %0\\\\t%@ float\\\";\n     case 7:\n-      return \\\"fcpys%?\\\\t%0, %1\\\";\n+      return \\\"vmov%?.f32\\\\t%0, %1\\\";\n     case 8:\n       return \\\"mov%?\\\\t%0, %1\\\\t%@ float\\\";\n     default:\n@@ -406,21 +406,21 @@\n     switch (which_alternative)\n       {\n       case 0:\n-\treturn \\\"fmdrr%?\\\\t%P0, %Q1, %R1\\\";\n+\treturn \\\"vmov%?\\\\t%P0, %Q1, %R1\\\";\n       case 1:\n-\treturn \\\"fmrrd%?\\\\t%Q0, %R0, %P1\\\";\n+\treturn \\\"vmov%?\\\\t%Q0, %R0, %P1\\\";\n       case 2:\n \tgcc_assert (TARGET_VFP_DOUBLE);\n-        return \\\"fconstd%?\\\\t%P0, #%G1\\\";\n+        return \\\"vmov%?.f64\\\\t%P0, %1\\\";\n       case 3: case 4:\n \treturn output_move_vfp (operands);\n       case 5: case 6:\n \treturn output_move_double (operands, true, NULL);\n       case 7:\n \tif (TARGET_VFP_SINGLE)\n-\t  return \\\"fcpys%?\\\\t%0, %1\\;fcpys%?\\\\t%p0, %p1\\\";\n+\t  return \\\"vmov%?.f32\\\\t%0, %1\\;vmov%?.f32\\\\t%p0, %p1\\\";\n \telse\n-\t  return \\\"fcpyd%?\\\\t%P0, %P1\\\";\n+\t  return \\\"vmov%?.f64\\\\t%P0, %P1\\\";\n       case 8:\n         return \\\"#\\\";\n       default:\n@@ -453,21 +453,21 @@\n     switch (which_alternative)\n       {\n       case 0:\n-\treturn \\\"fmdrr%?\\\\t%P0, %Q1, %R1\\\";\n+\treturn \\\"vmov%?\\\\t%P0, %Q1, %R1\\\";\n       case 1:\n-\treturn \\\"fmrrd%?\\\\t%Q0, %R0, %P1\\\";\n+\treturn \\\"vmov%?\\\\t%Q0, %R0, %P1\\\";\n       case 2:\n \tgcc_assert (TARGET_VFP_DOUBLE);\n-\treturn \\\"fconstd%?\\\\t%P0, #%G1\\\";\n+\treturn \\\"vmov%?.f64\\\\t%P0, %1\\\";\n       case 3: case 4:\n \treturn output_move_vfp (operands);\n       case 5: case 6: case 8:\n \treturn output_move_double (operands, true, NULL);\n       case 7:\n \tif (TARGET_VFP_SINGLE)\n-\t  return \\\"fcpys%?\\\\t%0, %1\\;fcpys%?\\\\t%p0, %p1\\\";\n+\t  return \\\"vmov%?.f32\\\\t%0, %1\\;vmov%?.f32\\\\t%p0, %p1\\\";\n \telse\n-\t  return \\\"fcpyd%?\\\\t%P0, %P1\\\";\n+\t  return \\\"vmov%?.f64\\\\t%P0, %P1\\\";\n       default:\n \tabort ();\n       }\n@@ -498,15 +498,15 @@\n \t  (match_operand:SF 2 \"s_register_operand\" \"t,0,t,?r,0,?r,t,0,t\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_VFP\"\n   \"@\n-   fcpys%D3\\\\t%0, %2\n-   fcpys%d3\\\\t%0, %1\n-   fcpys%D3\\\\t%0, %2\\;fcpys%d3\\\\t%0, %1\n-   fmsr%D3\\\\t%0, %2\n-   fmsr%d3\\\\t%0, %1\n-   fmsr%D3\\\\t%0, %2\\;fmsr%d3\\\\t%0, %1\n-   fmrs%D3\\\\t%0, %2\n-   fmrs%d3\\\\t%0, %1\n-   fmrs%D3\\\\t%0, %2\\;fmrs%d3\\\\t%0, %1\"\n+   vmov%D3.f32\\\\t%0, %2\n+   vmov%d3.f32\\\\t%0, %1\n+   vmov%D3.f32\\\\t%0, %2\\;vmov%d3.f32\\\\t%0, %1\n+   vmov%D3\\\\t%0, %2\n+   vmov%d3\\\\t%0, %1\n+   vmov%D3\\\\t%0, %2\\;vmov%d3\\\\t%0, %1\n+   vmov%D3\\\\t%0, %2\n+   vmov%d3\\\\t%0, %1\n+   vmov%D3\\\\t%0, %2\\;vmov%d3\\\\t%0, %1\"\n    [(set_attr \"conds\" \"use\")\n     (set_attr \"length\" \"4,4,8,4,4,8,4,4,8\")\n     (set_attr \"type\" \"fmov,fmov,fmov,f_mcr,f_mcr,f_mcr,f_mrc,f_mrc,f_mrc\")]\n@@ -521,15 +521,15 @@\n \t  (match_operand:SF 2 \"s_register_operand\" \"t,0,t,?r,0,?r,t,0,t\")))]\n   \"TARGET_THUMB2 && TARGET_HARD_FLOAT && TARGET_VFP && !arm_restrict_it\"\n   \"@\n-   it\\\\t%D3\\;fcpys%D3\\\\t%0, %2\n-   it\\\\t%d3\\;fcpys%d3\\\\t%0, %1\n-   ite\\\\t%D3\\;fcpys%D3\\\\t%0, %2\\;fcpys%d3\\\\t%0, %1\n-   it\\\\t%D3\\;fmsr%D3\\\\t%0, %2\n-   it\\\\t%d3\\;fmsr%d3\\\\t%0, %1\n-   ite\\\\t%D3\\;fmsr%D3\\\\t%0, %2\\;fmsr%d3\\\\t%0, %1\n-   it\\\\t%D3\\;fmrs%D3\\\\t%0, %2\n-   it\\\\t%d3\\;fmrs%d3\\\\t%0, %1\n-   ite\\\\t%D3\\;fmrs%D3\\\\t%0, %2\\;fmrs%d3\\\\t%0, %1\"\n+   it\\\\t%D3\\;vmov%D3.f32\\\\t%0, %2\n+   it\\\\t%d3\\;vmov%d3.f32\\\\t%0, %1\n+   ite\\\\t%D3\\;vmov%D3.f32\\\\t%0, %2\\;vmov%d3.f32\\\\t%0, %1\n+   it\\\\t%D3\\;vmov%D3\\\\t%0, %2\n+   it\\\\t%d3\\;vmov%d3\\\\t%0, %1\n+   ite\\\\t%D3\\;vmov%D3\\\\t%0, %2\\;vmov%d3\\\\t%0, %1\n+   it\\\\t%D3\\;vmov%D3\\\\t%0, %2\n+   it\\\\t%d3\\;vmov%d3\\\\t%0, %1\n+   ite\\\\t%D3\\;vmov%D3\\\\t%0, %2\\;vmov%d3\\\\t%0, %1\"\n    [(set_attr \"conds\" \"use\")\n     (set_attr \"length\" \"6,6,10,6,6,10,6,6,10\")\n     (set_attr \"type\" \"fmov,fmov,fmov,f_mcr,f_mcr,f_mcr,f_mrc,f_mrc,f_mrc\")]\n@@ -544,15 +544,15 @@\n \t  (match_operand:DF 2 \"s_register_operand\" \"w,0,w,?r,0,?r,w,0,w\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_VFP_DOUBLE\"\n   \"@\n-   fcpyd%D3\\\\t%P0, %P2\n-   fcpyd%d3\\\\t%P0, %P1\n-   fcpyd%D3\\\\t%P0, %P2\\;fcpyd%d3\\\\t%P0, %P1\n-   fmdrr%D3\\\\t%P0, %Q2, %R2\n-   fmdrr%d3\\\\t%P0, %Q1, %R1\n-   fmdrr%D3\\\\t%P0, %Q2, %R2\\;fmdrr%d3\\\\t%P0, %Q1, %R1\n-   fmrrd%D3\\\\t%Q0, %R0, %P2\n-   fmrrd%d3\\\\t%Q0, %R0, %P1\n-   fmrrd%D3\\\\t%Q0, %R0, %P2\\;fmrrd%d3\\\\t%Q0, %R0, %P1\"\n+   vmov%D3.f64\\\\t%P0, %P2\n+   vmov%d3.f64\\\\t%P0, %P1\n+   vmov%D3.f64\\\\t%P0, %P2\\;vmov%d3.f64\\\\t%P0, %P1\n+   vmov%D3\\\\t%P0, %Q2, %R2\n+   vmov%d3\\\\t%P0, %Q1, %R1\n+   vmov%D3\\\\t%P0, %Q2, %R2\\;vmov%d3\\\\t%P0, %Q1, %R1\n+   vmov%D3\\\\t%Q0, %R0, %P2\n+   vmov%d3\\\\t%Q0, %R0, %P1\n+   vmov%D3\\\\t%Q0, %R0, %P2\\;vmov%d3\\\\t%Q0, %R0, %P1\"\n    [(set_attr \"conds\" \"use\")\n     (set_attr \"length\" \"4,4,8,4,4,8,4,4,8\")\n     (set_attr \"type\" \"ffarithd,ffarithd,ffarithd,f_mcr,f_mcr,f_mcr,f_mrrc,f_mrrc,f_mrrc\")]\n@@ -567,15 +567,15 @@\n \t  (match_operand:DF 2 \"s_register_operand\" \"w,0,w,?r,0,?r,w,0,w\")))]\n   \"TARGET_THUMB2 && TARGET_HARD_FLOAT && TARGET_VFP_DOUBLE && !arm_restrict_it\"\n   \"@\n-   it\\\\t%D3\\;fcpyd%D3\\\\t%P0, %P2\n-   it\\\\t%d3\\;fcpyd%d3\\\\t%P0, %P1\n-   ite\\\\t%D3\\;fcpyd%D3\\\\t%P0, %P2\\;fcpyd%d3\\\\t%P0, %P1\n-   it\\t%D3\\;fmdrr%D3\\\\t%P0, %Q2, %R2\n-   it\\t%d3\\;fmdrr%d3\\\\t%P0, %Q1, %R1\n-   ite\\\\t%D3\\;fmdrr%D3\\\\t%P0, %Q2, %R2\\;fmdrr%d3\\\\t%P0, %Q1, %R1\n-   it\\t%D3\\;fmrrd%D3\\\\t%Q0, %R0, %P2\n-   it\\t%d3\\;fmrrd%d3\\\\t%Q0, %R0, %P1\n-   ite\\\\t%D3\\;fmrrd%D3\\\\t%Q0, %R0, %P2\\;fmrrd%d3\\\\t%Q0, %R0, %P1\"\n+   it\\\\t%D3\\;vmov%D3.f64\\\\t%P0, %P2\n+   it\\\\t%d3\\;vmov%d3.f64\\\\t%P0, %P1\n+   ite\\\\t%D3\\;vmov%D3.f64\\\\t%P0, %P2\\;vmov%d3.f64\\\\t%P0, %P1\n+   it\\t%D3\\;vmov%D3\\\\t%P0, %Q2, %R2\n+   it\\t%d3\\;vmov%d3\\\\t%P0, %Q1, %R1\n+   ite\\\\t%D3\\;vmov%D3\\\\t%P0, %Q2, %R2\\;vmov%d3\\\\t%P0, %Q1, %R1\n+   it\\t%D3\\;vmov%D3\\\\t%Q0, %R0, %P2\n+   it\\t%d3\\;vmov%d3\\\\t%Q0, %R0, %P1\n+   ite\\\\t%D3\\;vmov%D3\\\\t%Q0, %R0, %P2\\;vmov%d3\\\\t%Q0, %R0, %P1\"\n    [(set_attr \"conds\" \"use\")\n     (set_attr \"length\" \"6,6,10,6,6,10,6,6,10\")\n     (set_attr \"type\" \"ffarithd,ffarithd,ffarithd,f_mcr,f_mcr,f_mcrr,f_mrrc,f_mrrc,f_mrrc\")]"}, {"sha": "c5358606c4d9dbf5c46ce0b1fb414c7f2affd1cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=35cb3e53878eefd7ea817613ffbe6ab84502f92e", "patch": "@@ -1,3 +1,16 @@\n+2014-09-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/arm/pr51835.c: Update expected assembly.\n+\t* gcc.target/arm/vfp-1.c: Likewise.\n+\t* gcc.target/arm/vfp-ldmdbd.c: Likewise.\n+\t* gcc.target/arm/vfp-ldmdbs.c: Likewise.\n+\t* gcc.target/arm/vfp-ldmiad.c: Likewise.\n+\t* gcc.target/arm/vfp-ldmias.c: Likewise.\n+\t* gcc.target/arm/vfp-stmdbd.c: Likewise.\n+\t* gcc.target/arm/vfp-stmdbs.c: Likewise.\n+\t* gcc.target/arm/vfp-stmiad.c: Likewise.\n+\t* gcc.target/arm/vfp-stmias.c: Likewise.\n+\n 2014-09-09  Tony Wang  <tony.wang@arm.com>\n \n \t* gcc.target/arm/xordi3-opt.c: Disable this"}, {"sha": "128b9d5d596ef64d7a2badef00eb50a2f2e637f6", "filename": "gcc/testsuite/gcc.target/arm/pr51835.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr51835.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr51835.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr51835.c?ref=35cb3e53878eefd7ea817613ffbe6ab84502f92e", "patch": "@@ -13,5 +13,5 @@ unsigned int func2 (double d)\n   return (unsigned int)d;\n }\n \n-/* { dg-final { scan-assembler-times \"fmrrd\\[\\\\t \\]+r0,\\[\\\\t \\]*r1,\\[\\\\t \\]*d0\" 2 { target { arm_little_endian } } } } */\n-/* { dg-final { scan-assembler-times \"fmrrd\\[\\\\t \\]+r1,\\[\\\\t \\]*r0,\\[\\\\t \\]*d0\" 2 { target { ! arm_little_endian } } } } */\n+/* { dg-final { scan-assembler-times \"vmov\\[\\\\t \\]+r0,\\[\\\\t \\]*r1,\\[\\\\t \\]*d0\" 2 { target { arm_little_endian } } } } */\n+/* { dg-final { scan-assembler-times \"vmov\\[\\\\t \\]+r1,\\[\\\\t \\]*r0,\\[\\\\t \\]*d0\" 2 { target { ! arm_little_endian } } } } */"}, {"sha": "2355b4de37aa311a3a4646b956905025ebaae25c", "filename": "gcc/testsuite/gcc.target/arm/vfp-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-1.c?ref=35cb3e53878eefd7ea817613ffbe6ab84502f92e", "patch": "@@ -126,14 +126,14 @@ void test_convert () {\n }\n \n void test_ldst (float f[], double d[]) {\n-  /* { dg-final { scan-assembler \"flds.+ \\\\\\[r0, #1020\\\\\\]\" } } */\n-  /* { dg-final { scan-assembler \"flds.+ \\\\\\[r\\[0-9\\], #-1020\\\\\\]\" { target { arm32 && { ! arm_thumb2_ok } } } } } */\n+  /* { dg-final { scan-assembler \"vldr.32.+ \\\\\\[r0, #1020\\\\\\]\" } } */\n+  /* { dg-final { scan-assembler \"vldr.32.+ \\\\\\[r\\[0-9\\], #-1020\\\\\\]\" { target { arm32 && { ! arm_thumb2_ok } } } } } */\n   /* { dg-final { scan-assembler \"add.+ r0, #1024\" } } */\n-  /* { dg-final { scan-assembler \"fsts.+ \\\\\\[r\\[0-9\\]\\\\\\]\\n\" } } */\n+  /* { dg-final { scan-assembler \"vstr.32.+ \\\\\\[r\\[0-9\\]\\\\\\]\\n\" } } */\n   f[256] = f[255] + f[-255];\n \n-  /* { dg-final { scan-assembler \"fldd.+ \\\\\\[r1, #1016\\\\\\]\" } } */\n-  /* { dg-final { scan-assembler \"fldd.+ \\\\\\[r\\[1-9\\], #-1016\\\\\\]\" { target { arm32 && { ! arm_thumb2_ok } } } } } */\n-  /* { dg-final { scan-assembler \"fstd.+ \\\\\\[r1, #256\\\\\\]\" } } */\n+  /* { dg-final { scan-assembler \"vldr.64.+ \\\\\\[r1, #1016\\\\\\]\" } } */\n+  /* { dg-final { scan-assembler \"vldr.64.+ \\\\\\[r\\[1-9\\], #-1016\\\\\\]\" { target { arm32 && { ! arm_thumb2_ok } } } } } */\n+  /* { dg-final { scan-assembler \"vstr.64.+ \\\\\\[r1, #256\\\\\\]\" } } */\n   d[32] = d[127] + d[-127];\n }"}, {"sha": "704157979aa32c548dc764fed3ab387ba23ec8bd", "filename": "gcc/testsuite/gcc.target/arm/vfp-ldmdbd.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmdbd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmdbd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmdbd.c?ref=35cb3e53878eefd7ea817613ffbe6ab84502f92e", "patch": "@@ -13,4 +13,4 @@ foo (double *p, double a, int n)\n   while (n--);\n }\n \n-/* { dg-final { scan-assembler \"fldmdbd\" } } */\n+/* { dg-final { scan-assembler \"vldmdb.64\" } } */"}, {"sha": "10bccf66c2812d0fa02e712a644d76e7843be625", "filename": "gcc/testsuite/gcc.target/arm/vfp-ldmdbs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmdbs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmdbs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmdbs.c?ref=35cb3e53878eefd7ea817613ffbe6ab84502f92e", "patch": "@@ -13,4 +13,4 @@ foo (float *p, float a, int n)\n   while (n--);\n }\n \n-/* { dg-final { scan-assembler \"fldmdbs\" } } */\n+/* { dg-final { scan-assembler \"vldmdb.32\" } } */"}, {"sha": "9c22f1f463cbc09b4fc6a71f87f4b9b6dc1c0268", "filename": "gcc/testsuite/gcc.target/arm/vfp-ldmiad.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmiad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmiad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmiad.c?ref=35cb3e53878eefd7ea817613ffbe6ab84502f92e", "patch": "@@ -13,4 +13,4 @@ foo (double *p, double a, int n)\n   while (n--);\n }\n \n-/* { dg-final { scan-assembler \"fldmiad\" } } */\n+/* { dg-final { scan-assembler \"vldmia.64\" } } */"}, {"sha": "bc40451be3590d0096f3161106c6493204b3cf79", "filename": "gcc/testsuite/gcc.target/arm/vfp-ldmias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmias.c?ref=35cb3e53878eefd7ea817613ffbe6ab84502f92e", "patch": "@@ -13,4 +13,4 @@ foo (float *p, float a, int n)\n   while (n--);\n }\n \n-/* { dg-final { scan-assembler \"fldmias\" } } */\n+/* { dg-final { scan-assembler \"vldmia.32\" } } */"}, {"sha": "53383b5cf0ab31193e87e796b2d70020a6475400", "filename": "gcc/testsuite/gcc.target/arm/vfp-stmdbd.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmdbd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmdbd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmdbd.c?ref=35cb3e53878eefd7ea817613ffbe6ab84502f92e", "patch": "@@ -12,4 +12,4 @@ foo (double *p, double a, double b, int n)\n   while (n--);\n }\n \n-/* { dg-final { scan-assembler \"fstmdbd\" } } */\n+/* { dg-final { scan-assembler \"vstmdb.64\" } } */"}, {"sha": "6570defa71eedaf1e9b9bf7bba54afe756bdaebf", "filename": "gcc/testsuite/gcc.target/arm/vfp-stmdbs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmdbs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmdbs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmdbs.c?ref=35cb3e53878eefd7ea817613ffbe6ab84502f92e", "patch": "@@ -12,4 +12,4 @@ foo (float *p, float a, float b, int n)\n   while (n--);\n }\n \n-/* { dg-final { scan-assembler \"fstmdbs\" } } */\n+/* { dg-final { scan-assembler \"vstmdb.32\" } } */"}, {"sha": "28e9d73b3f6e01556f3d86ed5e822dfa2209eb8b", "filename": "gcc/testsuite/gcc.target/arm/vfp-stmiad.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmiad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmiad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmiad.c?ref=35cb3e53878eefd7ea817613ffbe6ab84502f92e", "patch": "@@ -12,4 +12,4 @@ foo (double *p, double a, double b, int n)\n   while (n--);\n }\n \n-/* { dg-final { scan-assembler \"fstmiad\" } } */\n+/* { dg-final { scan-assembler \"vstmia.64\" } } */"}, {"sha": "efa5fbe57f62bd0a85959a8fca04beeee5eef2f3", "filename": "gcc/testsuite/gcc.target/arm/vfp-stmias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35cb3e53878eefd7ea817613ffbe6ab84502f92e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmias.c?ref=35cb3e53878eefd7ea817613ffbe6ab84502f92e", "patch": "@@ -12,4 +12,4 @@ foo (float *p, float a, float b, int n)\n   while (n--);\n }\n \n-/* { dg-final { scan-assembler \"fstmias\" } } */\n+/* { dg-final { scan-assembler \"vstmia.32\" } } */"}]}