{"sha": "3d9dbf5c004b4ab2206b86c68c2c824229aeee34", "node_id": "C_kwDOANBUbNoAKDNkOWRiZjVjMDA0YjRhYjIyMDZiODZjNjhjMmM4MjQyMjlhZWVlMzQ", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-23T15:46:51Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-03-30T14:48:27Z"}, "message": "ast: Add use declarations TokenStream visitors\n\nAdd UseDeclaration (and it's childrens) visitor implementation.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-tokenstream.cc (TokenStream::visit): Add visitor.\n\t* ast/rust-item.h: Add missing getters.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "3e1ad8d53e6675a59051cf51230f9e9a9486691f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e1ad8d53e6675a59051cf51230f9e9a9486691f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d9dbf5c004b4ab2206b86c68c2c824229aeee34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9dbf5c004b4ab2206b86c68c2c824229aeee34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d9dbf5c004b4ab2206b86c68c2c824229aeee34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9dbf5c004b4ab2206b86c68c2c824229aeee34/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c34e05d01cfb3ffd5f2adb51eb6ab4d40aa3330f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c34e05d01cfb3ffd5f2adb51eb6ab4d40aa3330f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c34e05d01cfb3ffd5f2adb51eb6ab4d40aa3330f"}], "stats": {"total": 88, "additions": 80, "deletions": 8}, "files": [{"sha": "9fb9f931202451b9846477ce7c318a033181212b", "filename": "gcc/rust/ast/rust-ast-tokenstream.cc", "status": "modified", "additions": 69, "deletions": 8, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9dbf5c004b4ab2206b86c68c2c824229aeee34/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9dbf5c004b4ab2206b86c68c2c824229aeee34/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc?ref=3d9dbf5c004b4ab2206b86c68c2c824229aeee34", "patch": "@@ -1586,20 +1586,81 @@ TokenStream::visit (ExternCrate &crate)\n }\n \n void\n-TokenStream::visit (UseTreeGlob &)\n-{}\n+TokenStream::visit (UseTreeGlob &use_tree)\n+{\n+  switch (use_tree.get_glob_type ())\n+    {\n+      case UseTreeGlob::PathType::PATH_PREFIXED: {\n+\tauto path = use_tree.get_path ();\n+\tvisit (path);\n+\ttokens.push_back (Rust::Token::make (SCOPE_RESOLUTION, Location ()));\n+      }\n+      break;\n+    case UseTreeGlob::PathType::NO_PATH:\n+      tokens.push_back (Rust::Token::make (SCOPE_RESOLUTION, Location ()));\n+      break;\n+    case UseTreeGlob::PathType::GLOBAL:\n+      break;\n+    }\n+  tokens.push_back (Rust::Token::make (ASTERISK, Location ()));\n+}\n \n void\n-TokenStream::visit (UseTreeList &)\n-{}\n+TokenStream::visit (UseTreeList &use_tree)\n+{\n+  switch (use_tree.get_path_type ())\n+    {\n+      case UseTreeList::PathType::PATH_PREFIXED: {\n+\tauto path = use_tree.get_path ();\n+\tvisit (path);\n+\ttokens.push_back (Rust::Token::make (SCOPE_RESOLUTION, Location ()));\n+      }\n+      break;\n+    case UseTreeList::PathType::NO_PATH:\n+      tokens.push_back (Rust::Token::make (SCOPE_RESOLUTION, Location ()));\n+      break;\n+    case UseTreeList::PathType::GLOBAL:\n+      break;\n+    }\n+\n+  tokens.push_back (Rust::Token::make (LEFT_CURLY, Location ()));\n+  if (use_tree.has_trees ())\n+    {\n+      visit_items_joined_by_separator (use_tree.get_trees (), COMMA);\n+    }\n+  tokens.push_back (Rust::Token::make (RIGHT_CURLY, Location ()));\n+}\n \n void\n-TokenStream::visit (UseTreeRebind &)\n-{}\n+TokenStream::visit (UseTreeRebind &use_tree)\n+{\n+  auto path = use_tree.get_path ();\n+  visit (path);\n+  switch (use_tree.get_new_bind_type ())\n+    {\n+      case UseTreeRebind::NewBindType::IDENTIFIER: {\n+\ttokens.push_back (Rust::Token::make (AS, Location ()));\n+\tauto id = use_tree.get_identifier ();\n+\ttokens.push_back (\n+\t  Rust::Token::make_identifier (use_tree.get_locus (), std::move (id)));\n+      }\n+      break;\n+    case UseTreeRebind::NewBindType::WILDCARD:\n+      tokens.push_back (Rust::Token::make (AS, Location ()));\n+      tokens.push_back (Rust::Token::make (UNDERSCORE, use_tree.get_locus ()));\n+      break;\n+    case UseTreeRebind::NewBindType::NONE:\n+      break;\n+    }\n+}\n \n void\n-TokenStream::visit (UseDeclaration &)\n-{}\n+TokenStream::visit (UseDeclaration &decl)\n+{\n+  tokens.push_back (Rust::Token::make (USE, decl.get_locus ()));\n+  visit (*decl.get_tree ());\n+  tokens.push_back (Rust::Token::make (SEMICOLON, Location ()));\n+}\n \n void\n TokenStream::visit (Function &function)"}, {"sha": "49e340ed393add7c54252a0b69124660818d175b", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9dbf5c004b4ab2206b86c68c2c824229aeee34/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9dbf5c004b4ab2206b86c68c2c824229aeee34/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=3d9dbf5c004b4ab2206b86c68c2c824229aeee34", "patch": "@@ -1280,6 +1280,8 @@ class UseTreeGlob : public UseTree\n \n   void accept_vis (ASTVisitor &vis) override;\n \n+  PathType get_glob_type () { return glob_type; }\n+\n   Kind get_kind () const override { return Glob; }\n \n   SimplePath get_path () const\n@@ -1367,6 +1369,8 @@ class UseTreeList : public UseTree\n \n   std::string as_string () const override;\n \n+  PathType get_path_type () { return path_type; }\n+\n   void accept_vis (ASTVisitor &vis) override;\n \n   Kind get_kind () const override { return List; }\n@@ -1376,6 +1380,8 @@ class UseTreeList : public UseTree\n     return path;\n   }\n \n+  std::vector<std::unique_ptr<UseTree>> &get_trees () { return trees; }\n+\n   const std::vector<std::unique_ptr<UseTree>> &get_trees () const\n   {\n     return trees;\n@@ -1424,6 +1430,8 @@ class UseTreeRebind : public UseTree\n \n   std::string as_string () const override;\n \n+  NewBindType get_new_bind_type () { return bind_type; }\n+\n   void accept_vis (ASTVisitor &vis) override;\n \n   Kind get_kind () const override { return Rebind; }\n@@ -1497,6 +1505,9 @@ class UseDeclaration : public VisItem\n   UseDeclaration &operator= (UseDeclaration &&other) = default;\n \n   Location get_locus () const override final { return locus; }\n+\n+  std::unique_ptr<UseTree> &get_tree () { return use_tree; }\n+\n   const std::unique_ptr<UseTree> &get_tree () const { return use_tree; }\n \n   void accept_vis (ASTVisitor &vis) override;"}]}