{"sha": "3651f7ad941bc7dd797d5e5948c9922da0fb6f8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY1MWY3YWQ5NDFiYzdkZDc5N2Q1ZTU5NDhjOTkyMmRhMGZiNmY4Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-05-25T22:42:49Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-05-25T22:42:49Z"}, "message": "tree-nested.c (convert_tramp_reference): Do not build a trampoline if we don't want one.\n\n\t * tree-nested.c (convert_tramp_reference) <ADDR_EXPR>: Do not\n\tbuild a trampoline if we don't want one.\n\t* varasm.c (initializer_constant_valid_p) <ADDR_EXPR>: Do not\n\treturn zero for nested functions if we don't want a trampoline.\nada/\n\t* trans.c (Attribute_to_gnu) <Code_Address>: Set TREE_NO_TRAMPOLINE\n\tinstead of TREE_STATIC on the ADDR_EXPR.\n\nFrom-SVN: r135884", "tree": {"sha": "1a3f8d2557f13dd05aa93e2ca0e800b6a5a115c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a3f8d2557f13dd05aa93e2ca0e800b6a5a115c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c/comments", "author": null, "committer": null, "parents": [{"sha": "b885a4c1e2ba31aacad53184599c8ae2fc1147e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b885a4c1e2ba31aacad53184599c8ae2fc1147e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b885a4c1e2ba31aacad53184599c8ae2fc1147e6"}], "stats": {"total": 115, "additions": 95, "deletions": 20}, "files": [{"sha": "b456a499a3214949e488b0871637ea2af612e3c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3651f7ad941bc7dd797d5e5948c9922da0fb6f8c", "patch": "@@ -1,3 +1,10 @@\n+2008-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t * tree-nested.c (convert_tramp_reference) <ADDR_EXPR>: Do not\n+\tbuild a trampoline if we don't want one.\n+\t* varasm.c (initializer_constant_valid_p) <ADDR_EXPR>: Do not\n+\treturn zero for nested functions if we don't want a trampoline.\n+\n 2008-05-26  Daniel Franke  <franke.daniel@gmail.com>\n \n \t* doc/invoke.texi: Added f77, f77-cpp-input to list of file types."}, {"sha": "c2ffb5eaa6308a3cdc3989d13092e18132e2f251", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3651f7ad941bc7dd797d5e5948c9922da0fb6f8c", "patch": "@@ -1,3 +1,8 @@\n+2008-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* trans.c (Attribute_to_gnu) <Code_Address>: Set TREE_NO_TRAMPOLINE\n+\tinstead of TREE_STATIC on the ADDR_EXPR.\n+\n 2008-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* trans.c (gnat_to_gnu): Do not set source location info on NOP_EXPRs."}, {"sha": "717c14bbf6a2bc03f0cde6cbb3a53a1ba8c8830e", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=3651f7ad941bc7dd797d5e5948c9922da0fb6f8c", "patch": "@@ -920,7 +920,7 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t    TREE_CONSTANT (gnu_expr) = 1;\n \n \t  if (TREE_CODE (gnu_expr) == ADDR_EXPR)\n-\t    TREE_STATIC (gnu_expr) = TREE_CONSTANT (gnu_expr) = 1;\n+\t    TREE_NO_TRAMPOLINE (gnu_expr) = TREE_CONSTANT (gnu_expr) = 1;\n \t}\n \n       /* For other address attributes applied to a nested function,"}, {"sha": "b81a420aaf0558d8d97bc14fbbe59a9a0188f425", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3651f7ad941bc7dd797d5e5948c9922da0fb6f8c", "patch": "@@ -1,3 +1,8 @@\n+2008-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/trampoline1.adb: New test.\n+\t* gnat.dg/trampoline2.adb: Likewise.\n+\n 2008-05-25  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/32600"}, {"sha": "065b373f07c73201be079a1c8537ad4052ed81f6", "filename": "gcc/testsuite/gnat.dg/trampoline1.adb", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c/gcc%2Ftestsuite%2Fgnat.dg%2Ftrampoline1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c/gcc%2Ftestsuite%2Fgnat.dg%2Ftrampoline1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftrampoline1.adb?ref=3651f7ad941bc7dd797d5e5948c9922da0fb6f8c", "patch": "@@ -0,0 +1,23 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatws\" }\n+\n+with System; use System;\n+\n+procedure Trampoline1 is\n+\n+  A : Integer;\n+\n+  function F (I : Integer) return Integer is\n+  begin\n+    return A + I;\n+  end F;\n+\n+  CA : System.Address := F'Code_Address;\n+\n+begin\n+  if CA = System.Null_Address then\n+    raise Program_Error;\n+  end if;\n+end;\n+\n+-- { dg-final { scan-assembler-not \"GNU-stack.*x\" } }"}, {"sha": "26b42722ac7fa36b262784a3825fcdfd533c73c4", "filename": "gcc/testsuite/gnat.dg/trampoline2.adb", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c/gcc%2Ftestsuite%2Fgnat.dg%2Ftrampoline2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c/gcc%2Ftestsuite%2Fgnat.dg%2Ftrampoline2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftrampoline2.adb?ref=3651f7ad941bc7dd797d5e5948c9922da0fb6f8c", "patch": "@@ -0,0 +1,27 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnatws\" }\n+\n+with System; use System;\n+\n+procedure Trampoline2 is\n+\n+  A : Integer;\n+\n+  type FuncPtr is access function (I : Integer) return Integer;\n+\n+  function F (I : Integer) return Integer is\n+  begin\n+    return A + I;\n+  end F;\n+\n+  P : FuncPtr := F'Access;\n+  CA : System.Address := F'Code_Address;\n+  I : Integer;\n+\n+begin\n+  if CA = System.Null_Address then\n+    raise Program_Error;\n+  end if;\n+\n+  I := P(0);\n+end;"}, {"sha": "ded3c2bf49b5a4d48a1e5e027e9f88f2e942b586", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=3651f7ad941bc7dd797d5e5948c9922da0fb6f8c", "patch": "@@ -1645,6 +1645,10 @@ convert_tramp_reference (tree *tp, int *walk_subtrees, void *data)\n       if (DECL_NO_STATIC_CHAIN (decl))\n \tbreak;\n \n+      /* If we don't want a trampoline, then don't build one.  */\n+      if (TREE_NO_TRAMPOLINE (t))\n+\tbreak;\n+\n       /* Lookup the immediate parent of the callee, as that's where\n \t we need to insert the trampoline.  */\n       for (i = info; i->context != target_context; i = i->outer)"}, {"sha": "2202ce110980d18bc3f6c691641344556b91117a", "filename": "gcc/varasm.c", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3651f7ad941bc7dd797d5e5948c9922da0fb6f8c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=3651f7ad941bc7dd797d5e5948c9922da0fb6f8c", "patch": "@@ -4099,25 +4099,29 @@ initializer_constant_valid_p (tree value, tree endtype)\n \n     case ADDR_EXPR:\n     case FDESC_EXPR:\n-      value = staticp (TREE_OPERAND (value, 0));\n-      if (value)\n-\t{\n-\t  /* \"&(*a).f\" is like unto pointer arithmetic.  If \"a\" turns out to\n-\t     be a constant, this is old-skool offsetof-like nonsense.  */\n-\t  if (TREE_CODE (value) == INDIRECT_REF\n-\t      && TREE_CONSTANT (TREE_OPERAND (value, 0)))\n-\t    return null_pointer_node;\n-\t  /* Taking the address of a nested function involves a trampoline.  */\n-\t  if (TREE_CODE (value) == FUNCTION_DECL\n-\t      && decl_function_context (value)\n-\t      && !DECL_NO_STATIC_CHAIN (value))\n-\t    return NULL_TREE;\n-\t  /* \"&{...}\" requires a temporary to hold the constructed\n-\t     object.  */\n-\t  if (TREE_CODE (value) == CONSTRUCTOR)\n-\t    return NULL_TREE;\n-\t}\n-      return value;\n+      {\n+\ttree op0 = staticp (TREE_OPERAND (value, 0));\n+\tif (op0)\n+\t  {\n+\t    /* \"&(*a).f\" is like unto pointer arithmetic.  If \"a\" turns out\n+\t       to be a constant, this is old-skool offsetof-like nonsense.  */\n+\t    if (TREE_CODE (op0) == INDIRECT_REF\n+\t\t&& TREE_CONSTANT (TREE_OPERAND (op0, 0)))\n+\t      return null_pointer_node;\n+\t    /* Taking the address of a nested function involves a trampoline,\n+\t       unless we don't need or want one.  */\n+\t    if (TREE_CODE (op0) == FUNCTION_DECL\n+\t\t&& decl_function_context (op0)\n+\t\t&& !DECL_NO_STATIC_CHAIN (op0)\n+\t\t&& !TREE_NO_TRAMPOLINE (value))\n+\t      return NULL_TREE;\n+\t    /* \"&{...}\" requires a temporary to hold the constructed\n+\t       object.  */\n+\t    if (TREE_CODE (op0) == CONSTRUCTOR)\n+\t      return NULL_TREE;\n+\t  }\n+\treturn op0;\n+      }\n \n     case VIEW_CONVERT_EXPR:\n     case NON_LVALUE_EXPR:"}]}