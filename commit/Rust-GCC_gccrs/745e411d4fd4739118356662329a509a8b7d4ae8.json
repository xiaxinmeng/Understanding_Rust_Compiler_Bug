{"sha": "745e411d4fd4739118356662329a509a8b7d4ae8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ1ZTQxMWQ0ZmQ0NzM5MTE4MzU2NjYyMzI5YTUwOWE4YjdkNGFlOA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-12-21T17:45:34Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-12-21T17:45:34Z"}, "message": "C and C++ FE: fix source ranges for binary ops\n\ngcc/c-family/ChangeLog:\n\t* c-common.c (binary_op_error): Convert first param from\n\tlocation_t to rich_location * and use it when emitting an error.\n\t* c-common.h (binary_op_error): Convert first param from\n\tlocation_t to rich_location *.\n\ngcc/c/ChangeLog:\n\t* c-typeck.c: Include \"gcc-rich-location.h\".\n\t(build_binary_op): In the two places that call binary_op_error,\n\tcreate a gcc_rich_location and populate it with the location of\n\tthe binary op and its two operands.\n\ngcc/cp/ChangeLog:\n\t* typeck.c (cp_build_binary_op): Update for change in signature\n\tof build_binary_op.  Use error_at to replace an implicit use\n\tof input_location with param \"location\" in \"invalid operands\"\n\terror.\n\t(cp_build_binary_op): Replace an error with an error_at, using\n\t\"location\", rather than implicitly using input_location.\n\ngcc/testsuite/ChangeLog:\n\t* g++.dg/diagnostic/bad-binary-ops.C: New test case.\n\t* gcc.dg/bad-binary-ops.c: New test case.\n\tgcc.dg/plugin/diagnostic_plugin_show_trees.c (get_range_for_expr):\n\tRemove material copied from gcc-rich-location.c\n\t(gcc_rich_location::add_expr): Likewise.\n\nFrom-SVN: r231884", "tree": {"sha": "646f3ed78c4f1afbdbb1c0deb9b8436571b732c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/646f3ed78c4f1afbdbb1c0deb9b8436571b732c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/745e411d4fd4739118356662329a509a8b7d4ae8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/745e411d4fd4739118356662329a509a8b7d4ae8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/745e411d4fd4739118356662329a509a8b7d4ae8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/745e411d4fd4739118356662329a509a8b7d4ae8/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c154ecc12c064ba3b154d1d27be6f19dbd0c294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c154ecc12c064ba3b154d1d27be6f19dbd0c294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c154ecc12c064ba3b154d1d27be6f19dbd0c294"}], "stats": {"total": 214, "additions": 159, "deletions": 55}, "files": [{"sha": "fc2e19ef92ef56e10a081e4cfed4e5d0fabc61d2", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=745e411d4fd4739118356662329a509a8b7d4ae8", "patch": "@@ -1,3 +1,10 @@\n+2015-12-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-common.c (binary_op_error): Convert first param from\n+\tlocation_t to rich_location * and use it when emitting an error.\n+\t* c-common.h (binary_op_error): Convert first param from\n+\tlocation_t to rich_location *.\n+\n 2015-12-16  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-common.h (conflict_marker_get_final_tok_kind): New prototype."}, {"sha": "653d1dc1a72df544f9636db7fdb4429284dd9dc1", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=745e411d4fd4739118356662329a509a8b7d4ae8", "patch": "@@ -3795,10 +3795,21 @@ c_register_builtin_type (tree type, const char* name)\n \f\n /* Print an error message for invalid operands to arith operation\n    CODE with TYPE0 for operand 0, and TYPE1 for operand 1.\n-   LOCATION is the location of the message.  */\n+   RICHLOC is a rich location for the message, containing either\n+   three separate locations for each of the operator and operands\n+\n+      lhs op rhs\n+      ~~~ ^~ ~~~\n+\n+   (C FE), or one location ranging over all over them\n+\n+      lhs op rhs\n+      ~~~~^~~~~~\n+\n+   (C++ FE).  */\n \n void\n-binary_op_error (location_t location, enum tree_code code,\n+binary_op_error (rich_location *richloc, enum tree_code code,\n \t\t tree type0, tree type1)\n {\n   const char *opname;\n@@ -3850,9 +3861,9 @@ binary_op_error (location_t location, enum tree_code code,\n     default:\n       gcc_unreachable ();\n     }\n-  error_at (location,\n-\t    \"invalid operands to binary %s (have %qT and %qT)\", opname,\n-\t    type0, type1);\n+  error_at_rich_loc (richloc,\n+\t\t     \"invalid operands to binary %s (have %qT and %qT)\",\n+\t\t     opname, type0, type1);\n }\n \f\n /* Given an expression as a tree, return its original type.  Do this"}, {"sha": "eb63f1d9ad104694a1783aebfa7a0684b02badd3", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=745e411d4fd4739118356662329a509a8b7d4ae8", "patch": "@@ -817,7 +817,7 @@ extern tree c_sizeof_or_alignof_type (location_t, tree, bool, bool, int);\n extern tree c_alignof_expr (location_t, tree);\n /* Print an error message for invalid operands to arith operation CODE.\n    NOP_EXPR is used as a special case (see truthvalue_conversion).  */\n-extern void binary_op_error (location_t, enum tree_code, tree, tree);\n+extern void binary_op_error (rich_location *, enum tree_code, tree, tree);\n extern tree fix_string_type (tree);\n extern void constant_expression_warning (tree);\n extern void constant_expression_error (tree);"}, {"sha": "fb9fda3b21165fc84ea14dfb566d4c36fcafe6f4", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=745e411d4fd4739118356662329a509a8b7d4ae8", "patch": "@@ -1,3 +1,10 @@\n+2015-12-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-typeck.c: Include \"gcc-rich-location.h\".\n+\t(build_binary_op): In the two places that call binary_op_error,\n+\tcreate a gcc_rich_location and populate it with the location of\n+\tthe binary op and its two operands.\n+\n 2015-12-16  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-parser.c (c_parser_statement_after_labels): When calling"}, {"sha": "a97774fea92c493d024b204e6e6bb97cfd5759c8", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=745e411d4fd4739118356662329a509a8b7d4ae8", "patch": "@@ -48,6 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cilk.h\"\n #include \"gomp-constants.h\"\n #include \"spellcheck.h\"\n+#include \"gcc-rich-location.h\"\n \n /* Possible cases of implicit bad conversions.  Used to select\n    diagnostic messages in convert_for_assignment.  */\n@@ -11202,7 +11203,10 @@ build_binary_op (location_t location, enum tree_code code,\n       && (!tree_int_cst_equal (TYPE_SIZE (type0), TYPE_SIZE (type1))\n \t  || !vector_types_compatible_elements_p (type0, type1)))\n     {\n-      binary_op_error (location, code, type0, type1);\n+      gcc_rich_location richloc (location);\n+      richloc.maybe_add_expr (orig_op0);\n+      richloc.maybe_add_expr (orig_op1);\n+      binary_op_error (&richloc, code, type0, type1);\n       return error_mark_node;\n     }\n \n@@ -11441,7 +11445,10 @@ build_binary_op (location_t location, enum tree_code code,\n \n   if (!result_type)\n     {\n-      binary_op_error (location, code, TREE_TYPE (op0), TREE_TYPE (op1));\n+      gcc_rich_location richloc (location);\n+      richloc.maybe_add_expr (orig_op0);\n+      richloc.maybe_add_expr (orig_op1);\n+      binary_op_error (&richloc, code, TREE_TYPE (op0), TREE_TYPE (op1));\n       return error_mark_node;\n     }\n "}, {"sha": "bba3973a0958165b2aa5e0c3f09b98eb3b80e4ad", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=745e411d4fd4739118356662329a509a8b7d4ae8", "patch": "@@ -1,3 +1,12 @@\n+2015-12-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* typeck.c (cp_build_binary_op): Update for change in signature\n+\tof build_binary_op.  Use error_at to replace an implicit use\n+\tof input_location with param \"location\" in \"invalid operands\"\n+\terror.\n+\t(cp_build_binary_op): Replace an error with an error_at, using\n+\t\"location\", rather than implicitly using input_location.\n+\n 2015-12-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/67411"}, {"sha": "25e74e901933f4fb2d62c8f9e95646434bbd828b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=745e411d4fd4739118356662329a509a8b7d4ae8", "patch": "@@ -4908,7 +4908,13 @@ cp_build_binary_op (location_t location,\n \t      || !vector_types_compatible_elements_p (type0, type1))\n \t    {\n \t      if (complain & tf_error)\n-\t\tbinary_op_error (location, code, type0, type1);\n+\t\t{\n+\t\t  /* \"location\" already embeds the locations of the\n+\t\t     operands, so we don't need to add them separately\n+\t\t     to richloc.  */\n+\t\t  rich_location richloc (line_table, location);\n+\t\t  binary_op_error (&richloc, code, type0, type1);\n+\t\t}\n \t      return error_mark_node;\n \t    }\n \t  arithmetic_types_p = 1;\n@@ -4931,8 +4937,9 @@ cp_build_binary_op (location_t location,\n   if (!result_type)\n     {\n       if (complain & tf_error)\n-\terror (\"invalid operands of types %qT and %qT to binary %qO\",\n-\t       TREE_TYPE (orig_op0), TREE_TYPE (orig_op1), code);\n+\terror_at (location,\n+\t\t  \"invalid operands of types %qT and %qT to binary %qO\",\n+\t\t  TREE_TYPE (orig_op0), TREE_TYPE (orig_op1), code);\n       return error_mark_node;\n     }\n "}, {"sha": "14f048d1df908baa1a7e61039b707f479f31edbc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=745e411d4fd4739118356662329a509a8b7d4ae8", "patch": "@@ -1,3 +1,11 @@\n+2015-12-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* g++.dg/diagnostic/bad-binary-ops.C: New test case.\n+\t* gcc.dg/bad-binary-ops.c: New test case.\n+\tgcc.dg/plugin/diagnostic_plugin_show_trees.c (get_range_for_expr):\n+\tRemove material copied from gcc-rich-location.c\n+\t(gcc_rich_location::add_expr): Likewise.\n+\n 2015-12-21  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/builtin_general.c: New test."}, {"sha": "4ab7656434c8959f315b0caa02af95081ae29231", "filename": "gcc/testsuite/g++.dg/diagnostic/bad-binary-ops.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fbad-binary-ops.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fbad-binary-ops.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fbad-binary-ops.C?ref=745e411d4fd4739118356662329a509a8b7d4ae8", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+// Adapted from https://gcc.gnu.org/wiki/ClangDiagnosticsComparison\n+\n+typedef float __m128;\n+void test_1 ()\n+{\n+  __m128 myvec[2];\n+  int const *ptr;\n+  myvec[1] / ptr; // { dg-error \"invalid operands\" }\n+\n+/* { dg-begin-multiline-output \"\" }\n+   myvec[1] / ptr;\n+   ~~~~~~~~~^~~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+struct s {};\n+struct t {};\n+extern struct s some_function (void);\n+extern struct t some_other_function (void);\n+\n+int test_2 (void)\n+{\n+  return (some_function ()\n+\t  + some_other_function ()); // { dg-error \"no match for .operator\" }\n+\n+/* { dg-begin-multiline-output \"\" }\n+   return (some_function ()\n+           ~~~~~~~~~~~~~~~~\n+    + some_other_function ());\n+    ^~~~~~~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+int test_3 (struct s param_s, struct t param_t)\n+{\n+  return param_s && param_t; // { dg-error \"no match for .operator\" }\n+\n+/* { dg-begin-multiline-output \"\" }\n+   return param_s && param_t;\n+          ~~~~~~~~^~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "e1da4d615eedac9526170821a480f3d436d82fb4", "filename": "gcc/testsuite/gcc.dg/bad-binary-ops.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Ftestsuite%2Fgcc.dg%2Fbad-binary-ops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Ftestsuite%2Fgcc.dg%2Fbad-binary-ops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbad-binary-ops.c?ref=745e411d4fd4739118356662329a509a8b7d4ae8", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-options \"-fdiagnostics-show-caret\" } */\n+\n+/* Adapted from https://gcc.gnu.org/wiki/ClangDiagnosticsComparison */\n+\n+typedef float __m128;\n+void test_1 ()\n+{\n+  __m128 myvec[2];\n+  int const *ptr;\n+  myvec[1]/ptr; /* { dg-error \"invalid operands to binary /\" } */\n+\n+/* TODO: ideally we'd underline \"ptr\" as well.\n+{ dg-begin-multiline-output \"\" }\n+   myvec[1]/ptr;\n+   ~~~~~~~~^\n+{ dg-end-multiline-output \"\" } */\n+\n+\n+}\n+\n+struct s {};\n+struct t {};\n+extern struct s some_function (void);\n+extern struct t some_other_function (void);\n+\n+int test_2 (void)\n+{\n+  return (some_function ()\n+\t  + some_other_function ()); /* { dg-error \"invalid operands to binary \\+\" } */\n+\n+/* { dg-begin-multiline-output \"\" }\n+   return (some_function ()\n+           ~~~~~~~~~~~~~~~~\n+    + some_other_function ());\n+    ^ ~~~~~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+int test_3 (struct s param_s, struct t param_t)\n+{\n+  return param_s + param_t; // { dg-error \"invalid operands to binary \\+\" }\n+\n+/* { dg-begin-multiline-output \"\" }\n+   return param_s + param_t;\n+                  ^\n+   { dg-end-multiline-output \"\" } */\n+/* TODO: ideally we'd underline both params here.  */\n+}"}, {"sha": "c98034fb69564f3070d8e103356e8f2c3f4644c3", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_show_trees.c", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_show_trees.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745e411d4fd4739118356662329a509a8b7d4ae8/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_show_trees.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_show_trees.c?ref=745e411d4fd4739118356662329a509a8b7d4ae8", "patch": "@@ -32,50 +32,6 @@\n #include \"gcc-rich-location.h\"\n #include \"print-tree.h\"\n \n-/*\n-  Hack: fails with linker error:\n-./diagnostic_plugin_show_trees.so: undefined symbol: _ZN17gcc_rich_location8add_exprEP9tree_node\n-  since nothing in the tree is using gcc_rich_location::add_expr yet.\n-\n-  I've tried various workarounds (adding DEBUG_FUNCTION to the\n-  method, taking its address), but can't seem to fix it that way.\n-  So as a nasty workaround, the following material is copied&pasted\n-  from gcc-rich-location.c: */\n-\n-static bool\n-get_range_for_expr (tree expr, location_range *r)\n-{\n-  if (EXPR_HAS_RANGE (expr))\n-    {\n-      source_range sr = EXPR_LOCATION_RANGE (expr);\n-\n-      /* Do we have meaningful data?  */\n-      if (sr.m_start && sr.m_finish)\n-\t{\n-\t  r->m_start = expand_location (sr.m_start);\n-\t  r->m_finish = expand_location (sr.m_finish);\n-\t  return true;\n-\t}\n-    }\n-\n-  return false;\n-}\n-\n-/* Add a range to the rich_location, covering expression EXPR. */\n-\n-void\n-gcc_rich_location::add_expr (tree expr)\n-{\n-  gcc_assert (expr);\n-\n-  location_range r;\n-  r.m_show_caret_p = false;\n-  if (get_range_for_expr (expr, &r))\n-    add_range (&r);\n-}\n-\n-/* FIXME: end of material taken from gcc-rich-location.c */\n-\n int plugin_is_GPL_compatible;\n \n static void"}]}