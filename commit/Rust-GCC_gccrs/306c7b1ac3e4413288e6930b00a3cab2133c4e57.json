{"sha": "306c7b1ac3e4413288e6930b00a3cab2133c4e57", "node_id": "C_kwDOANBUbNoAKDMwNmM3YjFhYzNlNDQxMzI4OGU2OTMwYjAwYTNjYWIyMTMzYzRlNTc", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2023-03-06T22:38:33Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2023-03-06T22:38:33Z"}, "message": "PR target/107299: Fix build issue when long double is IEEE 128-bit\n\nThis patch updates the IEEE 128-bit types used in libgcc.\n\nAt the moment, we cannot build GCC when the target uses IEEE 128-bit long\ndoubles, such as building the compiler for a native Fedora 36 system.  The\nbuild dies when it is trying to build the _mulkc3.c and _divkc3 modules.\n\nThis patch changes libgcc to use long double for the IEEE 128-bit base type if\nlong double is IEEE 128-bit, and it uses _Float128 otherwise.  The built-in\nfunctions are adjusted to be the correct version based on the IEEE 128-bit base\ntype used.\n\nWhile it is desirable to ultimately have __float128 and _Float128 use the same\ninternal type and mode within GCC, at present if you use the option\n-mabi=ieeelongdouble, the __float128 type will use the long double type and not\nthe _Float128 type.  We get an internal compiler error if we combine the\nsignbitf128 built-in with a long double type.\n\nI've gone through several iterations of trying to fix this within GCC, and\nthere are various problems that have come up.  I developed this alternative\npatch that changes libgcc so that it does not tickle the issue.  I hope we can\nfix the compiler at some point, but right now, this is preventing people on\nFedora 36 systems from building compilers where the default long double is IEEE\n128-bit.\n\n2023-03-06   Michael Meissner  <meissner@linux.ibm.com>\n\nlibgcc/\n\n\tPR target/107299\n\t* config/rs6000/_divkc3.c (COPYSIGN): Use the correct built-in based on\n\twhether long double is IBM or IEEE.\n\t(INFINITY): Likewise.\n\t(FABS): Likewise.\n\t* config/rs6000/_mulkc3.c (COPYSIGN): Likewise.\n\t(INFINITY): Likewise.\n\t* config/rs6000/quad-float128.h (TF): Remove definition.\n\t(TFtype): Define to be long double or _Float128.\n\t(TCtype): Define to be _Complex long double or _Complex _Float128.\n\t* libgcc2.h (TFtype): Allow machine config files to override this.\n\t(TCtype): Likewise.\n\t* soft-fp/quad.h (TFtype): Likewise.", "tree": {"sha": "7627d63c250b4abec9f4500818a35b0fd57997fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7627d63c250b4abec9f4500818a35b0fd57997fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/306c7b1ac3e4413288e6930b00a3cab2133c4e57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/306c7b1ac3e4413288e6930b00a3cab2133c4e57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/306c7b1ac3e4413288e6930b00a3cab2133c4e57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/306c7b1ac3e4413288e6930b00a3cab2133c4e57/comments", "author": null, "committer": null, "parents": [{"sha": "553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/553ff2524f412be4e02e2ffb1a0a3dc3e2280742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/553ff2524f412be4e02e2ffb1a0a3dc3e2280742"}], "stats": {"total": 63, "additions": 52, "deletions": 11}, "files": [{"sha": "b5f9e59627d0c3aadb9f3f67423f133a4d1906ce", "filename": "libgcc/config/rs6000/_divkc3.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/306c7b1ac3e4413288e6930b00a3cab2133c4e57/libgcc%2Fconfig%2Frs6000%2F_divkc3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/306c7b1ac3e4413288e6930b00a3cab2133c4e57/libgcc%2Fconfig%2Frs6000%2F_divkc3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_divkc3.c?ref=306c7b1ac3e4413288e6930b00a3cab2133c4e57", "patch": "@@ -26,9 +26,19 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"soft-fp.h\"\n #include \"quad-float128.h\"\n \n+/* Use the correct built-in function based on whether TFmode is _Float128 or\n+   long double.  See quad-float128.h for more details.  */\n+#ifndef __LONG_DOUBLE_IEEE128__\n #define COPYSIGN(x,y) __builtin_copysignf128 (x, y)\n #define INFINITY __builtin_inff128 ()\n #define FABS __builtin_fabsf128\n+\n+#else\n+#define COPYSIGN(x,y) __builtin_copysignl (x, y)\n+#define INFINITY __builtin_infl ()\n+#define FABS __builtin_fabsl\n+#endif\n+\n #define isnan __builtin_isnan\n #define isinf __builtin_isinf\n #define isfinite __builtin_isfinite"}, {"sha": "a01cb0540547f22ffe368cfa5ef19590e1577734", "filename": "libgcc/config/rs6000/_mulkc3.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/306c7b1ac3e4413288e6930b00a3cab2133c4e57/libgcc%2Fconfig%2Frs6000%2F_mulkc3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/306c7b1ac3e4413288e6930b00a3cab2133c4e57/libgcc%2Fconfig%2Frs6000%2F_mulkc3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_mulkc3.c?ref=306c7b1ac3e4413288e6930b00a3cab2133c4e57", "patch": "@@ -26,8 +26,17 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"soft-fp.h\"\n #include \"quad-float128.h\"\n \n+/* Use the correct built-in function based on whether TFmode is _Float128 or\n+   long double.  See quad-float128.h for more details.  */\n+#ifndef __LONG_DOUBLE_IEEE128__\n #define COPYSIGN(x,y) __builtin_copysignf128 (x, y)\n #define INFINITY __builtin_inff128 ()\n+\n+#else\n+#define COPYSIGN(x,y) __builtin_copysignl (x, y)\n+#define INFINITY __builtin_infl ()\n+#endif\n+\n #define isnan __builtin_isnan\n #define isinf __builtin_isinf\n "}, {"sha": "974912326ba9aa82d89c57816e52c1a3c4202660", "filename": "libgcc/config/rs6000/quad-float128.h", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/306c7b1ac3e4413288e6930b00a3cab2133c4e57/libgcc%2Fconfig%2Frs6000%2Fquad-float128.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/306c7b1ac3e4413288e6930b00a3cab2133c4e57/libgcc%2Fconfig%2Frs6000%2Fquad-float128.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fquad-float128.h?ref=306c7b1ac3e4413288e6930b00a3cab2133c4e57", "patch": "@@ -27,21 +27,37 @@\n    License along with the GNU C Library; if not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* quad.h defines the TFtype type by:\n-   typedef float TFtype __attribute__ ((mode (TF)));\n+/* Override the types for IEEE 128-bit scalar and complex.  We need to use the\n+   same IEEE 128-bit type (either long double or _Float128) for both the\n+   128-bit scalar type and for the base type in _Complex.  Otherwise, if\n+   different types are used, there may be problems in mixing _Complex values\n+   with the scalar value.\n \n-   This define forces it to use KFmode (aka, ieee 128-bit floating point).\n-   However, when the compiler's default is changed so that long double is IEEE\n-   128-bit floating point, we need to go back to using TFmode and TCmode.  */\n-#ifndef __LONG_DOUBLE_IEEE128__\n-#define TF KF\n+   We can't use _Compelx _float128 since GCC doesn't allow it.  It only allows\n+   _Complex for _Float128 or for long double.\n \n-/* We also need TCtype to represent complex ieee 128-bit float for\n-   __mulkc3 and __divkc3.  */\n-typedef __complex float TCtype __attribute__ ((mode (KC)));\n+   We use _Float128 when long double is IBM double-double or 64-bit, and long\n+   double when long double uses the IEEE 128-bit type.  We need to do this\n+   because the compiler has a built-in prototype for __mulkc3 and __divkc3\n+   using those types.  Since we are declaring these functions here, we need to\n+   use the same type that the compiler uses (i.e. we can't just always use\n+   _Float128).\n+\n+   Even though the type _Float128 and long double (when long double uses IEEE\n+   128-bits) both hold IEEE 128-bit values, the front ends treat these as two\n+   separate types.\n+\n+   The extension keyword __float128 is currently problematical because it can\n+   either be a synonym for _Float128 (when long double is IBM) or for long\n+   double (when long double is IEEE).  */\n+\n+#ifdef __LONG_DOUBLE_IEEE128__\n+#define TFtype long double\n+#define TCtype _Complex long double\n \n #else\n-typedef __complex float TCtype __attribute__ ((mode (TC)));\n+#define TFtype _Float128\n+#define TCtype _Complex _Float128\n #endif\n \n /* Force the use of the VSX instruction set.  */"}, {"sha": "3ec9bbd81647514e299fec6b445e48b21c88943b", "filename": "libgcc/libgcc2.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/306c7b1ac3e4413288e6930b00a3cab2133c4e57/libgcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/306c7b1ac3e4413288e6930b00a3cab2133c4e57/libgcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc2.h?ref=306c7b1ac3e4413288e6930b00a3cab2133c4e57", "patch": "@@ -156,9 +156,13 @@ typedef\t\tfloat XFtype\t__attribute__ ((mode (XF)));\n typedef _Complex float XCtype\t__attribute__ ((mode (XC)));\n #endif\n #if LIBGCC2_HAS_TF_MODE\n+#ifndef TFtype\n typedef\t\tfloat TFtype\t__attribute__ ((mode (TF)));\n+#endif\n+#ifndef TCtype\n typedef _Complex float TCtype\t__attribute__ ((mode (TC)));\n #endif\n+#endif\n \n typedef int cmp_return_type __attribute__((mode (__libgcc_cmp_return__)));\n typedef int shift_count_type __attribute__((mode (__libgcc_shift_count__)));"}, {"sha": "71f87d36ba9801ac0aabc1d87cb947a413b5a9fc", "filename": "libgcc/soft-fp/quad.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/306c7b1ac3e4413288e6930b00a3cab2133c4e57/libgcc%2Fsoft-fp%2Fquad.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/306c7b1ac3e4413288e6930b00a3cab2133c4e57/libgcc%2Fsoft-fp%2Fquad.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fquad.h?ref=306c7b1ac3e4413288e6930b00a3cab2133c4e57", "patch": "@@ -65,7 +65,9 @@\n #define _FP_HIGHBIT_DW_Q\t\\\n   ((_FP_W_TYPE) 1 << (_FP_WFRACBITS_DW_Q - 1) % _FP_W_TYPE_SIZE)\n \n+#ifndef TFtype\n typedef float TFtype __attribute__ ((mode (TF)));\n+#endif\n \n #if _FP_W_TYPE_SIZE < 64\n "}]}