{"sha": "ebbcdd7fae1f802763850e4afedfdfa09cf10e1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJiY2RkN2ZhZTFmODAyNzYzODUwZTRhZmVkZmRmYTA5Y2YxMGUxYQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-07-28T17:14:22Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-07-30T19:10:48Z"}, "message": "Change integral divide by zero to produce UNDEFINED.\n\nInstead of VARYING, we can get better results by treating divide by zero\nas producing an undefined result.\n\n\tgcc/\n\t* range-op.cc (operator_div::wi_fold): Return UNDEFINED for [0, 0] divisor.\n\n\tgcc/testsuite/\n\t* gcc.dg/tree-ssa/pr61839_2.c: Adjust.", "tree": {"sha": "cf21f2d2140b00303b24119cd93ad5190d43c009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf21f2d2140b00303b24119cd93ad5190d43c009"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebbcdd7fae1f802763850e4afedfdfa09cf10e1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebbcdd7fae1f802763850e4afedfdfa09cf10e1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebbcdd7fae1f802763850e4afedfdfa09cf10e1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebbcdd7fae1f802763850e4afedfdfa09cf10e1a/comments", "author": null, "committer": null, "parents": [{"sha": "d242acc396d645267cd1ccbdb4d0d73cc9b1ef48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d242acc396d645267cd1ccbdb4d0d73cc9b1ef48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d242acc396d645267cd1ccbdb4d0d73cc9b1ef48"}], "stats": {"total": 12, "additions": 2, "deletions": 10}, "files": [{"sha": "69228882930b1931bd827f8d972a0857454d9309", "filename": "gcc/range-op.cc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebbcdd7fae1f802763850e4afedfdfa09cf10e1a/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebbcdd7fae1f802763850e4afedfdfa09cf10e1a/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=ebbcdd7fae1f802763850e4afedfdfa09cf10e1a", "patch": "@@ -1785,13 +1785,6 @@ operator_div::wi_fold (irange &r, tree type,\n \t\t       const wide_int &lh_lb, const wide_int &lh_ub,\n \t\t       const wide_int &rh_lb, const wide_int &rh_ub) const\n {\n-  // If we know we will divide by zero...\n-  if (rh_lb == 0 && rh_ub == 0)\n-    {\n-      r.set_varying (type);\n-      return;\n-    }\n-\n   const wide_int dividend_min = lh_lb;\n   const wide_int dividend_max = lh_ub;\n   const wide_int divisor_min = rh_lb;\n@@ -1818,7 +1811,7 @@ operator_div::wi_fold (irange &r, tree type,\n   // If we're definitely dividing by zero, there's nothing to do.\n   if (wi_zero_p (type, divisor_min, divisor_max))\n     {\n-      r.set_varying (type);\n+      r.set_undefined ();\n       return;\n     }\n "}, {"sha": "f1b8feb4e9d3a90cba872a79eb1794556ad20e1f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61839_2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebbcdd7fae1f802763850e4afedfdfa09cf10e1a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebbcdd7fae1f802763850e4afedfdfa09cf10e1a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_2.c?ref=ebbcdd7fae1f802763850e4afedfdfa09cf10e1a", "patch": "@@ -45,9 +45,8 @@ int bar2 ()\n   return 0;\n }\n \n-\n /* Dont optimize 972195717 / 0 in function foo.  */\n-/* { dg-final { scan-tree-dump-times \"972195717 / \" 1  \"evrp\" } } */\n+/* { dg-final { scan-tree-dump-times \"972195717 / \" 0  \"evrp\" } } */\n /* Dont optimize 972195717 % 0 in function bar.  */\n /* { dg-final { scan-tree-dump-times \"972195717 % \" 1 \"evrp\" } } */\n /* May optimize in function bar2, but EVRP doesn't perform this yet.  */"}]}