{"sha": "0fe9176f410accc767e0abab010aec843b2e7ea6", "node_id": "C_kwDOANBUbNoAKDBmZTkxNzZmNDEwYWNjYzc2N2UwYWJhYjAxMGFlYzg0M2IyZTdlYTY", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-08-13T19:17:55Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-02-22T16:43:39Z"}, "message": "Further simplify 'gcc/omp-oacc-neuter-broadcast.cc:record_field_map_t'\n\nNow that I've resolved GCC 'hash_map' issues (a while ago already), we may\nfurther simplify this after commit 049eda8274b7394523238b17ab12c3e2889f253e\n\"Avoid 'GTY' use for 'gcc/omp-oacc-neuter-broadcast.cc:field_map'\": as\n'hash_map' Value, directly store 'field_map_t' objects, not pointers to\nmanually allocated 'field_map_t' objects.\n\n\tgcc/\n\t* omp-oacc-neuter-broadcast.cc (record_field_map_t): Further\n\tsimplify.  Adjust all users.", "tree": {"sha": "707c49cffaf031a259adc2b33eea71fec158d104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/707c49cffaf031a259adc2b33eea71fec158d104"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fe9176f410accc767e0abab010aec843b2e7ea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe9176f410accc767e0abab010aec843b2e7ea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fe9176f410accc767e0abab010aec843b2e7ea6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe9176f410accc767e0abab010aec843b2e7ea6/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8187b5c0d22723c8e0a3d13d0ea5dd7ecfeff75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8187b5c0d22723c8e0a3d13d0ea5dd7ecfeff75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8187b5c0d22723c8e0a3d13d0ea5dd7ecfeff75"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "314161e38f5a81596f315e408d08fe4bce81f17d", "filename": "gcc/omp-oacc-neuter-broadcast.cc", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe9176f410accc767e0abab010aec843b2e7ea6/gcc%2Fomp-oacc-neuter-broadcast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe9176f410accc767e0abab010aec843b2e7ea6/gcc%2Fomp-oacc-neuter-broadcast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-oacc-neuter-broadcast.cc?ref=0fe9176f410accc767e0abab010aec843b2e7ea6", "patch": "@@ -538,7 +538,7 @@ typedef hash_map<tree, tree> field_map_t;\n    to propagate, to the field in the record type that should be used for\n    transmission and reception.  */\n \n-typedef hash_map<tree, field_map_t *> record_field_map_t;\n+typedef hash_map<tree, field_map_t> record_field_map_t;\n \n static void\n install_var_field (tree var, tree record_type, field_map_t *fields)\n@@ -1168,8 +1168,7 @@ worker_single_copy (basic_block from, basic_block to,\n \tgcc_assert (TREE_CODE (var) == VAR_DECL);\n \n       /* If we had no record type, we will have no fields map.  */\n-      field_map_t **fields_p = record_field_map->get (record_type);\n-      field_map_t *fields = fields_p ? *fields_p : NULL;\n+      field_map_t *fields = record_field_map->get (record_type);\n \n       if (worker_partitioned_uses->contains (var)\n \t  && fields\n@@ -1684,10 +1683,9 @@ oacc_do_neutering (unsigned HOST_WIDE_INT bounds_lo,\n \n \t  field_vec.qsort (sort_by_size_then_ssa_version_or_uid);\n \n-\t  field_map_t *fields = new field_map_t;\n-\n \t  bool existed;\n-\t  existed = record_field_map.put (record_type, fields);\n+\t  field_map_t *fields\n+\t    = &record_field_map.get_or_insert (record_type, &existed);\n \t  gcc_checking_assert (!existed);\n \n \t  /* Insert var fields in reverse order, so the last inserted element\n@@ -1818,8 +1816,6 @@ oacc_do_neutering (unsigned HOST_WIDE_INT bounds_lo,\n \t\t\t&partitioned_var_uses, &record_field_map,\n \t\t\t&blk_offset_map, writes_gang_private);\n \n-  for (auto it : record_field_map)\n-    delete it.second;\n   record_field_map.empty ();\n \n   /* These are supposed to have been 'delete'd by 'neuter_worker_single'.  */"}]}