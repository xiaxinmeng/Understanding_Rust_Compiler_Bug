{"sha": "cde52d3a2d02d037da53e6974d5e39021030b346", "node_id": "C_kwDOANBUbNoAKGNkZTUyZDNhMmQwMmQwMzdkYTUzZTY5NzRkNWUzOTAyMTAzMGIzNDY", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2022-02-24T17:16:13Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2022-05-24T15:18:14Z"}, "message": "amdgcn: Add gfx90a support\n\nThis adds architecture options and multilibs for the AMD GFX90a GPUs.\nIt also tidies up some of the ISA selection code, and corrects a few small\nmistake in the gfx908 naming.\n\ngcc/ChangeLog:\n\n\t* config.gcc (amdgcn): Accept --with-arch=gfx908 and gfx90a.\n\t* config/gcn/gcn-opts.h (enum gcn_isa): New.\n\t(TARGET_GCN3): Use enum gcn_isa.\n\t(TARGET_GCN3_PLUS): Likewise.\n\t(TARGET_GCN5): Likewise.\n\t(TARGET_GCN5_PLUS): Likewise.\n\t(TARGET_CDNA1): New.\n\t(TARGET_CDNA1_PLUS): New.\n\t(TARGET_CDNA2): New.\n\t(TARGET_CDNA2_PLUS): New.\n\t(TARGET_M0_LDS_LIMIT): New.\n\t(TARGET_PACKED_WORK_ITEMS): New.\n\t* config/gcn/gcn.cc (gcn_isa): Change to enum gcn_isa.\n\t(gcn_option_override): Recognise CDNA ISA variants.\n\t(gcn_omp_device_kind_arch_isa): Support gfx90a.\n\t(gcn_expand_prologue): Make m0 init optional.\n\tAdd support for packed work items.\n\t(output_file_start): Support gfx90a.\n\t(gcn_hsa_declare_function_name): Support gfx90a metadata.\n\t* config/gcn/gcn.h (TARGET_CPU_CPP_BUILTINS):Add __CDNA1__ and\n\t__CDNA2__.\n\t* config/gcn/gcn.md (<su>mulsi3_highpart): Use TARGET_GCN5_PLUS.\n\t(<su>mulsi3_highpart_imm): Likewise.\n\t(<su>mulsidi3): Likewise.\n\t(<su>mulsidi3_imm): Likewise.\n\t* config/gcn/gcn.opt (gpu_type): Add gfx90a.\n\t* config/gcn/mkoffload.cc (EF_AMDGPU_MACH_AMDGCN_GFX90a): New.\n\t(main): Support gfx90a.\n\t* config/gcn/t-gcn-hsa: Add gfx90a multilib.\n\t* config/gcn/t-omp-device: Add gfx90a isa.\n\nlibgomp/ChangeLog:\n\n\t* plugin/plugin-gcn.c (EF_AMDGPU_MACH): Add\n\tEF_AMDGPU_MACH_AMDGCN_GFX90a.\n\t(gcn_gfx90a_s): New.\n\t(isa_hsa_name): Support gfx90a.\n\t(isa_code): Likewise.", "tree": {"sha": "9b8c9566629ee5915934617814b4ec080f7632ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b8c9566629ee5915934617814b4ec080f7632ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cde52d3a2d02d037da53e6974d5e39021030b346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde52d3a2d02d037da53e6974d5e39021030b346", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cde52d3a2d02d037da53e6974d5e39021030b346", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde52d3a2d02d037da53e6974d5e39021030b346/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8086230e7ac619c0b0eeb6e15df7975ac214725f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8086230e7ac619c0b0eeb6e15df7975ac214725f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8086230e7ac619c0b0eeb6e15df7975ac214725f"}], "stats": {"total": 124, "additions": 100, "deletions": 24}, "files": [{"sha": "cdbefb5b4f50d58ed81af147b5a4aada03e5c259", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde52d3a2d02d037da53e6974d5e39021030b346/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde52d3a2d02d037da53e6974d5e39021030b346/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=cde52d3a2d02d037da53e6974d5e39021030b346", "patch": "@@ -4522,7 +4522,7 @@ case \"${target}\" in\n \t\tfor which in arch tune; do\n \t\t\teval \"val=\\$with_$which\"\n \t\t\tcase ${val} in\n-\t\t\t\"\" | fiji | gfx900 | gfx906 )\n+\t\t\t\"\" | fiji | gfx900 | gfx906 | gfx908 | gfx90a)\n \t\t\t\t# OK\n \t\t\t\t;;\n \t\t\t*)"}, {"sha": "b62dfb45f591e49b2d83212d794a3e52afeb51b3", "filename": "gcc/config/gcn/gcn-opts.h", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde52d3a2d02d037da53e6974d5e39021030b346/gcc%2Fconfig%2Fgcn%2Fgcn-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde52d3a2d02d037da53e6974d5e39021030b346/gcc%2Fconfig%2Fgcn%2Fgcn-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-opts.h?ref=cde52d3a2d02d037da53e6974d5e39021030b346", "patch": "@@ -23,16 +23,30 @@ enum processor_type\n   PROCESSOR_FIJI,    // gfx803\n   PROCESSOR_VEGA10,  // gfx900\n   PROCESSOR_VEGA20,  // gfx906\n-  PROCESSOR_GFX908   // as yet unnamed\n+  PROCESSOR_GFX908,\n+  PROCESSOR_GFX90a\n };\n \n /* Set in gcn_option_override.  */\n-extern int gcn_isa;\n-\n-#define TARGET_GCN3 (gcn_isa == 3)\n-#define TARGET_GCN3_PLUS (gcn_isa >= 3)\n-#define TARGET_GCN5 (gcn_isa == 5)\n-#define TARGET_GCN5_PLUS (gcn_isa >= 5)\n+extern enum gcn_isa {\n+  ISA_UNKNOWN,\n+  ISA_GCN3,\n+  ISA_GCN5,\n+  ISA_CDNA1,\n+  ISA_CDNA2\n+} gcn_isa;\n+\n+#define TARGET_GCN3 (gcn_isa == ISA_GCN3)\n+#define TARGET_GCN3_PLUS (gcn_isa >= ISA_GCN3)\n+#define TARGET_GCN5 (gcn_isa == ISA_GCN5)\n+#define TARGET_GCN5_PLUS (gcn_isa >= ISA_GCN5)\n+#define TARGET_CDNA1 (gcn_isa == ISA_CDNA1)\n+#define TARGET_CDNA1_PLUS (gcn_isa >= ISA_CDNA1)\n+#define TARGET_CDNA2 (gcn_isa == ISA_CDNA2)\n+#define TARGET_CDNA2_PLUS (gcn_isa >= ISA_CDNA2)\n+\n+#define TARGET_M0_LDS_LIMIT (TARGET_GCN3)\n+#define TARGET_PACKED_WORK_ITEMS (TARGET_CDNA2_PLUS)\n \n enum sram_ecc_type\n {"}, {"sha": "5e75a1b63aaa30886aa97eb5287dce5cc8f9aba8", "filename": "gcc/config/gcn/gcn.cc", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde52d3a2d02d037da53e6974d5e39021030b346/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde52d3a2d02d037da53e6974d5e39021030b346/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.cc?ref=cde52d3a2d02d037da53e6974d5e39021030b346", "patch": "@@ -66,7 +66,7 @@ static bool ext_gcn_constants_init = 0;\n \n /* Holds the ISA variant, derived from the command line parameters.  */\n \n-int gcn_isa = 3;\t\t/* Default to GCN3.  */\n+enum gcn_isa gcn_isa = ISA_GCN3;\t/* Default to GCN3.  */\n \n /* Reserve this much space for LDS (for propagating variables from\n    worker-single mode to worker-partitioned mode), per workgroup.  Global\n@@ -129,7 +129,13 @@ gcn_option_override (void)\n   if (!flag_pic)\n     flag_pic = flag_pie;\n \n-  gcn_isa = gcn_arch == PROCESSOR_FIJI ? 3 : 5;\n+  gcn_isa = (gcn_arch == PROCESSOR_FIJI ? ISA_GCN3\n+      : gcn_arch == PROCESSOR_VEGA10 ? ISA_GCN5\n+      : gcn_arch == PROCESSOR_VEGA20 ? ISA_GCN5\n+      : gcn_arch == PROCESSOR_GFX908 ? ISA_CDNA1\n+      : gcn_arch == PROCESSOR_GFX90a ? ISA_CDNA2\n+      : ISA_UNKNOWN);\n+  gcc_assert (gcn_isa != ISA_UNKNOWN);\n \n   /* The default stack size needs to be small for offload kernels because\n      there may be many, many threads.  Also, a smaller stack gives a\n@@ -2642,6 +2648,8 @@ gcn_omp_device_kind_arch_isa (enum omp_device_kind_arch_isa trait,\n \treturn gcn_arch == PROCESSOR_VEGA20;\n       if (strcmp (name, \"gfx908\") == 0)\n \treturn gcn_arch == PROCESSOR_GFX908;\n+      if (strcmp (name, \"gfx90a\") == 0)\n+\treturn gcn_arch == PROCESSOR_GFX90a;\n       return 0;\n     default:\n       gcc_unreachable ();\n@@ -3081,13 +3089,35 @@ gcn_expand_prologue ()\n   /* Ensure that the scheduler doesn't do anything unexpected.  */\n   emit_insn (gen_blockage ());\n \n-  /* m0 is initialized for the usual LDS DS and FLAT memory case.\n-     The low-part is the address of the topmost addressable byte, which is\n-     size-1.  The high-part is an offset and should be zero.  */\n-  emit_move_insn (gen_rtx_REG (SImode, M0_REG),\n-\t\t  gen_int_mode (LDS_SIZE, SImode));\n+  if (TARGET_M0_LDS_LIMIT)\n+  {\n+    /* m0 is initialized for the usual LDS DS and FLAT memory case.\n+       The low-part is the address of the topmost addressable byte, which is\n+       size-1.  The high-part is an offset and should be zero.  */\n+    emit_move_insn (gen_rtx_REG (SImode, M0_REG),\n+\tgen_int_mode (LDS_SIZE, SImode));\n+\n+    emit_insn (gen_prologue_use (gen_rtx_REG (SImode, M0_REG)));\n+  }\n \n-  emit_insn (gen_prologue_use (gen_rtx_REG (SImode, M0_REG)));\n+  if (TARGET_PACKED_WORK_ITEMS\n+      && cfun && cfun->machine && !cfun->machine->normal_function)\n+  {\n+    /* v0 conatins the X, Y and Z dimensions all in one.\n+       Expand them out for ABI compatibility.  */\n+    /* TODO: implement and use zero_extract.  */\n+    rtx v1 = gen_rtx_REG (V64SImode, VGPR_REGNO (1));\n+    emit_insn (gen_andv64si3 (v1, gen_rtx_REG (V64SImode, VGPR_REGNO (0)),\n+\t       gen_rtx_CONST_INT (VOIDmode, 0x3FF << 10)));\n+    emit_insn (gen_lshrv64si3 (v1, v1, gen_rtx_CONST_INT (VOIDmode, 10)));\n+    emit_insn (gen_prologue_use (v1));\n+\n+    rtx v2 = gen_rtx_REG (V64SImode, VGPR_REGNO (2));\n+    emit_insn (gen_andv64si3 (v2, gen_rtx_REG (V64SImode, VGPR_REGNO (0)),\n+\t       gen_rtx_CONST_INT (VOIDmode, 0x3FF << 20)));\n+    emit_insn (gen_lshrv64si3 (v2, v2, gen_rtx_CONST_INT (VOIDmode, 20)));\n+    emit_insn (gen_prologue_use (v2));\n+  }\n \n   if (cfun && cfun->machine && !cfun->machine->normal_function && flag_openmp)\n     {\n@@ -5243,6 +5273,9 @@ output_file_start (void)\n     case PROCESSOR_GFX908:\n       cpu = \"gfx908\";\n       break;\n+    case PROCESSOR_GFX90a:\n+      cpu = \"gfx90a\";\n+      break;\n     default: gcc_unreachable ();\n     }\n \n@@ -5296,6 +5329,10 @@ gcn_hsa_declare_function_name (FILE *file, const char *name, tree)\n \tsgpr = MAX_NORMAL_SGPR_COUNT;\n     }\n \n+  /* The gfx90a accum_offset field can't represent 0 registers.  */\n+  if (gcn_arch == PROCESSOR_GFX90a && vgpr < 4)\n+    vgpr = 4;\n+\n   fputs (\"\\t.rodata\\n\"\n \t \"\\t.p2align\\t6\\n\"\n \t \"\\t.amdhsa_kernel\\t\", file);\n@@ -5364,6 +5401,11 @@ gcn_hsa_declare_function_name (FILE *file, const char *name, tree)\n \t      one 64th the wave-front stack size.  */\n \t   stack_size_opt / 64,\n \t   LDS_SIZE);\n+  if (gcn_arch == PROCESSOR_GFX90a)\n+    fprintf (file,\n+\t     \"\\t  .amdhsa_accum_offset\\t%i\\n\"\n+\t     \"\\t  .amdhsa_tg_split\\t0\\n\",\n+\t     (vgpr+3)&~3); // I think this means the AGPRs come after the VGPRs\n   fputs (\"\\t.end_amdhsa_kernel\\n\", file);\n \n #if 1\n@@ -5392,6 +5434,8 @@ gcn_hsa_declare_function_name (FILE *file, const char *name, tree)\n \t   LDS_SIZE,\n \t   stack_size_opt / 64,\n \t   sgpr, vgpr);\n+  if (gcn_arch == PROCESSOR_GFX90a)\n+    fprintf (file, \"            .agpr_count: 0\\n\"); // AGPRs are not used, yet\n   fputs (\"        .end_amdgpu_metadata\\n\", file);\n #endif\n "}, {"sha": "a1297605047c42d84a8f0eed947932bc00ba93d7", "filename": "gcc/config/gcn/gcn.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde52d3a2d02d037da53e6974d5e39021030b346/gcc%2Fconfig%2Fgcn%2Fgcn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde52d3a2d02d037da53e6974d5e39021030b346/gcc%2Fconfig%2Fgcn%2Fgcn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.h?ref=cde52d3a2d02d037da53e6974d5e39021030b346", "patch": "@@ -24,6 +24,10 @@\n \tbuiltin_define (\"__GCN3__\");\t\\\n       else if (TARGET_GCN5)\t\t\\\n \tbuiltin_define (\"__GCN5__\");\t\\\n+      else if (TARGET_CDNA1)\t\t\\\n+\tbuiltin_define (\"__CDNA1__\");\t\\\n+      else if (TARGET_CDNA2)\t\t\\\n+\tbuiltin_define (\"__CDNA2__\");\t\\\n     }\t\t\t\t\t\\\n   while(0)\n "}, {"sha": "53e846e15d14ae28149f4e02002abef7cec889b5", "filename": "gcc/config/gcn/gcn.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde52d3a2d02d037da53e6974d5e39021030b346/gcc%2Fconfig%2Fgcn%2Fgcn.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde52d3a2d02d037da53e6974d5e39021030b346/gcc%2Fconfig%2Fgcn%2Fgcn.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.md?ref=cde52d3a2d02d037da53e6974d5e39021030b346", "patch": "@@ -1410,7 +1410,7 @@\n   \"\"\n {\n   if (can_create_pseudo_p ()\n-      && !TARGET_GCN5\n+      && !TARGET_GCN5_PLUS\n       && !gcn_inline_immediate_operand (operands[2], SImode))\n     operands[2] = force_reg (SImode, operands[2]);\n \n@@ -1451,7 +1451,7 @@\n \t\t(match_operand:SI 1 \"register_operand\"         \"Sg,Sg,v\"))\n \t      (match_operand:DI 2 \"gcn_32bit_immediate_operand\" \"A, B,A\"))\n \t    (const_int 32))))]\n-  \"TARGET_GCN5 || gcn_inline_immediate_operand (operands[2], SImode)\"\n+  \"TARGET_GCN5_PLUS || gcn_inline_immediate_operand (operands[2], SImode)\"\n   \"@\n   s_mul_hi<sgnsuffix>0\\t%0, %1, %2\n   s_mul_hi<sgnsuffix>0\\t%0, %1, %2\n@@ -1469,7 +1469,7 @@\n   \"\"\n {\n   if (can_create_pseudo_p ()\n-      && !TARGET_GCN5\n+      && !TARGET_GCN5_PLUS\n       && !gcn_inline_immediate_operand (operands[2], SImode))\n     operands[2] = force_reg (SImode, operands[2]);\n \n@@ -1506,7 +1506,7 @@\n \t\t   (match_operand:SI 1 \"register_operand\"       \"Sg, Sg, v\"))\n \t\t (match_operand:DI 2 \"gcn_32bit_immediate_operand\"\n \t\t\t\t\t\t\t\t \"A,  B, A\")))]\n-  \"TARGET_GCN5 || gcn_inline_immediate_operand (operands[2], SImode)\"\n+  \"TARGET_GCN5_PLUS || gcn_inline_immediate_operand (operands[2], SImode)\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]"}, {"sha": "9606aaf0b1abc6b6d287737b42a1c3b652f1587d", "filename": "gcc/config/gcn/gcn.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde52d3a2d02d037da53e6974d5e39021030b346/gcc%2Fconfig%2Fgcn%2Fgcn.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde52d3a2d02d037da53e6974d5e39021030b346/gcc%2Fconfig%2Fgcn%2Fgcn.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.opt?ref=cde52d3a2d02d037da53e6974d5e39021030b346", "patch": "@@ -37,6 +37,9 @@ Enum(gpu_type) String(gfx906) Value(PROCESSOR_VEGA20)\n EnumValue\n Enum(gpu_type) String(gfx908) Value(PROCESSOR_GFX908)\n \n+EnumValue\n+Enum(gpu_type) String(gfx90a) Value(PROCESSOR_GFX90a)\n+\n march=\n Target RejectNegative Joined ToLower Enum(gpu_type) Var(gcn_arch) Init(PROCESSOR_FIJI)\n Specify the name of the target GPU."}, {"sha": "ed93ae844e47530eeeb45306191c376538e9b91c", "filename": "gcc/config/gcn/mkoffload.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde52d3a2d02d037da53e6974d5e39021030b346/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde52d3a2d02d037da53e6974d5e39021030b346/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc?ref=cde52d3a2d02d037da53e6974d5e39021030b346", "patch": "@@ -55,6 +55,8 @@\n #define EF_AMDGPU_MACH_AMDGCN_GFX906 0x2f\n #undef  EF_AMDGPU_MACH_AMDGCN_GFX908\n #define EF_AMDGPU_MACH_AMDGCN_GFX908 0x30\n+#undef  EF_AMDGPU_MACH_AMDGCN_GFX90a\n+#define EF_AMDGPU_MACH_AMDGCN_GFX90a 0x3f\n \n #define EF_AMDGPU_FEATURE_XNACK_V4\t0x300  /* Mask.  */\n #define EF_AMDGPU_FEATURE_XNACK_UNSUPPORTED_V4\t0x000\n@@ -904,6 +906,8 @@ main (int argc, char **argv)\n \telf_arch = EF_AMDGPU_MACH_AMDGCN_GFX906;\n       else if (strcmp (argv[i], \"-march=gfx908\") == 0)\n \telf_arch = EF_AMDGPU_MACH_AMDGCN_GFX908;\n+      else if (strcmp (argv[i], \"-march=gfx90a\") == 0)\n+\telf_arch = EF_AMDGPU_MACH_AMDGCN_GFX90a;\n     }\n \n   if (!(fopenacc ^ fopenmp))"}, {"sha": "9e03ec89ec229b8ac4a95a0b5044d6d12a9f9c17", "filename": "gcc/config/gcn/t-gcn-hsa", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde52d3a2d02d037da53e6974d5e39021030b346/gcc%2Fconfig%2Fgcn%2Ft-gcn-hsa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde52d3a2d02d037da53e6974d5e39021030b346/gcc%2Fconfig%2Fgcn%2Ft-gcn-hsa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Ft-gcn-hsa?ref=cde52d3a2d02d037da53e6974d5e39021030b346", "patch": "@@ -42,8 +42,8 @@ ALL_HOST_OBJS += gcn-run.o\n gcn-run$(exeext): gcn-run.o\n \t+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ $< -ldl\n \n-MULTILIB_OPTIONS = march=gfx900/march=gfx906/march=gfx908\n-MULTILIB_DIRNAMES = gfx900 gfx906 gfx908\n+MULTILIB_OPTIONS = march=gfx900/march=gfx906/march=gfx908/march=gfx90a\n+MULTILIB_DIRNAMES = gfx900 gfx906 gfx908 gfx90a\n \n gcn-tree.o: $(srcdir)/config/gcn/gcn-tree.cc\n \t$(COMPILE) $<"}, {"sha": "27d36db894bed8845b240831867688a9aff44da2", "filename": "gcc/config/gcn/t-omp-device", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde52d3a2d02d037da53e6974d5e39021030b346/gcc%2Fconfig%2Fgcn%2Ft-omp-device", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde52d3a2d02d037da53e6974d5e39021030b346/gcc%2Fconfig%2Fgcn%2Ft-omp-device", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Ft-omp-device?ref=cde52d3a2d02d037da53e6974d5e39021030b346", "patch": "@@ -1,4 +1,4 @@\n omp-device-properties-gcn: $(srcdir)/config/gcn/gcn.cc\n \techo kind: gpu > $@\n \techo arch: amdgcn gcn >> $@\n-\techo isa: fiji gfx900 gfx906 gfx908 >> $@\n+\techo isa: fiji gfx900 gfx906 gfx908 gfx90a >> $@"}, {"sha": "1c0436842da5602d17a801b353804e1b4aee3505", "filename": "libgomp/plugin/plugin-gcn.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde52d3a2d02d037da53e6974d5e39021030b346/libgomp%2Fplugin%2Fplugin-gcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde52d3a2d02d037da53e6974d5e39021030b346/libgomp%2Fplugin%2Fplugin-gcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-gcn.c?ref=cde52d3a2d02d037da53e6974d5e39021030b346", "patch": "@@ -402,7 +402,8 @@ typedef enum {\n   EF_AMDGPU_MACH_AMDGCN_GFX803 = 0x02a,\n   EF_AMDGPU_MACH_AMDGCN_GFX900 = 0x02c,\n   EF_AMDGPU_MACH_AMDGCN_GFX906 = 0x02f,\n-  EF_AMDGPU_MACH_AMDGCN_GFX908 = 0x030\n+  EF_AMDGPU_MACH_AMDGCN_GFX908 = 0x030,\n+  EF_AMDGPU_MACH_AMDGCN_GFX90a = 0x03f\n } EF_AMDGPU_MACH;\n \n const static int EF_AMDGPU_MACH_MASK = 0x000000ff;\n@@ -1628,6 +1629,7 @@ const static char *gcn_gfx803_s = \"gfx803\";\n const static char *gcn_gfx900_s = \"gfx900\";\n const static char *gcn_gfx906_s = \"gfx906\";\n const static char *gcn_gfx908_s = \"gfx908\";\n+const static char *gcn_gfx90a_s = \"gfx90a\";\n const static int gcn_isa_name_len = 6;\n \n /* Returns the name that the HSA runtime uses for the ISA or NULL if we do not\n@@ -1645,6 +1647,8 @@ isa_hsa_name (int isa) {\n       return gcn_gfx906_s;\n     case EF_AMDGPU_MACH_AMDGCN_GFX908:\n       return gcn_gfx908_s;\n+    case EF_AMDGPU_MACH_AMDGCN_GFX90a:\n+      return gcn_gfx90a_s;\n     }\n   return NULL;\n }\n@@ -1681,6 +1685,9 @@ isa_code(const char *isa) {\n   if (!strncmp (isa, gcn_gfx908_s, gcn_isa_name_len))\n     return EF_AMDGPU_MACH_AMDGCN_GFX908;\n \n+  if (!strncmp (isa, gcn_gfx90a_s, gcn_isa_name_len))\n+    return EF_AMDGPU_MACH_AMDGCN_GFX90a;\n+\n   return -1;\n }\n "}]}