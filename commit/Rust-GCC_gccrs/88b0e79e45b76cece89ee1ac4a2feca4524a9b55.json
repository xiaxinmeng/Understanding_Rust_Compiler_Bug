{"sha": "88b0e79e45b76cece89ee1ac4a2feca4524a9b55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhiMGU3OWU0NWI3NmNlY2U4OWVlMWFjNGEyZmVjYTQ1MjRhOWI1NQ==", "commit": {"author": {"name": "Jacek Caban", "email": "jacek@codeweavers.com", "date": "2013-09-13T18:06:41Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2013-09-13T18:06:41Z"}, "message": "c-target.def: New hook\n\n2013-09-13  Jacek Caban  <jacek@codeweavers.com>\n\n\t* c-target.def: New hook\n    \n    gcc/ChangeLog:\n\n2013-09-13  Jacek Caban  <jacek@codeweavers.com>\n\n\t* config.gcc: Use new winnt-c.c target hooks\n\t* config/t-winnt: New file\n\t* config/winnt-c.c: New file\n\t* doc/tm.texi.in: Document new hook\n\t* doc/tm.texi: Regenerated\n    \n    gcc/cp/Changelog:\n\n2013-09-13  Jacek Caban  <jacek@codeweavers.com>\n\n\t* decl.c: Use new cxx_implicit_extern_c hook\n    \n    gcc/testsuite/ChangeLog:\n\n2013-09-13  Jacek Caban  <jacek@codeweavers.com>\n\n\t* g++.dg/abi/main.C: Added implicit C linkage tests\n\nFrom-SVN: r202573", "tree": {"sha": "c9142db87feb2cf94393c30e427ed094ad2e503d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9142db87feb2cf94393c30e427ed094ad2e503d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88b0e79e45b76cece89ee1ac4a2feca4524a9b55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b0e79e45b76cece89ee1ac4a2feca4524a9b55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88b0e79e45b76cece89ee1ac4a2feca4524a9b55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/comments", "author": {"login": "cjacek", "id": 3763736, "node_id": "MDQ6VXNlcjM3NjM3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3763736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjacek", "html_url": "https://github.com/cjacek", "followers_url": "https://api.github.com/users/cjacek/followers", "following_url": "https://api.github.com/users/cjacek/following{/other_user}", "gists_url": "https://api.github.com/users/cjacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjacek/subscriptions", "organizations_url": "https://api.github.com/users/cjacek/orgs", "repos_url": "https://api.github.com/users/cjacek/repos", "events_url": "https://api.github.com/users/cjacek/events{/privacy}", "received_events_url": "https://api.github.com/users/cjacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a1e51df97b9d2a61cb4a2c8c7a3f2caca6be1f89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e51df97b9d2a61cb4a2c8c7a3f2caca6be1f89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1e51df97b9d2a61cb4a2c8c7a3f2caca6be1f89"}], "stats": {"total": 131, "additions": 129, "deletions": 2}, "files": [{"sha": "6413fe37299f1017b00bf804118560d6d5983b85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88b0e79e45b76cece89ee1ac4a2feca4524a9b55", "patch": "@@ -1,3 +1,11 @@\n+2013-09-13  Jacek Caban  <jacek@codeweavers.com>\n+\n+\t* config.gcc: Use new winnt-c.c target hooks\n+\t* config/t-winnt: New file\n+\t* config/winnt-c.c: New file\n+\t* doc/tm.texi.in: Document new hook\n+\t* doc/tm.texi: Regenerated\n+\n 2013-09-13  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/58094"}, {"sha": "1fbfbf8da94b7edfdba7f06590030f35ddc84b27", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=88b0e79e45b76cece89ee1ac4a2feca4524a9b55", "patch": "@@ -1,3 +1,7 @@\n+2013-09-13  Jacek Caban  <jacek@codeweavers.com>\n+\n+\t* c-target.def: New hook\n+\n 2013-09-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/43452"}, {"sha": "925dbd14cc4a4a226c1833d80bfb7896d0fdeefc", "filename": "gcc/c-family/c-target.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Fc-family%2Fc-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Fc-family%2Fc-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-target.def?ref=88b0e79e45b76cece89ee1ac4a2feca4524a9b55", "patch": "@@ -102,5 +102,15 @@ DEFHOOK\n  than just the compiler.\",\n  const char *, (void),\n  hook_constcharptr_void_null)\n+\n+DEFHOOK\n+(cxx_implicit_extern_c,\n+ \"Define this hook to add target-specific C++ implicit extern C functions.\\\n+ If this function returns true for the name of a file-scope function, that\\\n+ function implicitly gets extern \\\"C\\\" linkage rather than whatever language\\\n+ linkage the declaration would normally have.  An example of such function\\\n+ is WinMain on Win32 targets.\",\n+ bool, (const char*),\n+ NULL)\n  \n HOOK_VECTOR_END (C90_EMPTY_HACK)"}, {"sha": "605efc0e090eaf31fb7d8992f1cf452ed5132c9a", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=88b0e79e45b76cece89ee1ac4a2feca4524a9b55", "patch": "@@ -1526,6 +1526,9 @@ x86_64-*-cygwin*)\n i[34567]86-*-mingw* | x86_64-*-mingw*)\n \ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h dbxcoff.h i386/cygming.h\"\n \txm_file=i386/xm-mingw32.h\n+\tc_target_objs=\"${c_target_objs} winnt-c.o\"\n+\tcxx_target_objs=\"${cxx_target_objs} winnt-c.o\"\n+\ttarget_has_targetcm=\"yes\"\n \tcase ${target} in\n \t\tx86_64-*-* | *-w64-*)\n \t\t\tneed_64bit_isa=yes\n@@ -1565,7 +1568,7 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t\t\t;;\n \tesac\n \ttm_file=\"${tm_file} i386/mingw-stdint.h\"\n-\ttmake_file=\"${tmake_file} i386/t-cygming t-slibgcc\"\n+\ttmake_file=\"${tmake_file} t-winnt i386/t-cygming t-slibgcc\"\n         case ${target} in\n                x86_64-w64-*)\n                \t\ttmake_file=\"${tmake_file} i386/t-mingw-w64\""}, {"sha": "1751622661ba4da8d9b3ce2e4f7e6c8356751b78", "filename": "gcc/config/t-winnt", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Fconfig%2Ft-winnt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Fconfig%2Ft-winnt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-winnt?ref=88b0e79e45b76cece89ee1ac4a2feca4524a9b55", "patch": "@@ -0,0 +1,22 @@\n+# Copyright (C) 2013 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+winnt-c.o: config/winnt-c.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+  $(C_TARGET_H) $(C_TARGET_DEF_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n+\t  $< $(OUTPUT_OPTION)"}, {"sha": "d52db62afd28302ddf697ff444d1694ced8e5867", "filename": "gcc/config/winnt-c.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Fconfig%2Fwinnt-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Fconfig%2Fwinnt-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt-c.c?ref=88b0e79e45b76cece89ee1ac4a2feca4524a9b55", "patch": "@@ -0,0 +1,39 @@\n+/* Default C-family target hooks initializer.\n+   Copyright (C) 2013\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"c-family/c-target.h\"\n+#include \"c-family/c-target-def.h\"\n+\n+static bool\n+winnt_implicit_extern_c (const char *ident)\n+{\n+  return !strcmp(ident, \"wmain\")\n+      || !strcmp(ident, \"DllMain\")\n+      || !strcmp(ident, \"WinMain\")\n+      || !strcmp(ident, \"wWinMain\");\n+}\n+\n+#undef TARGET_CXX_IMPLICIT_EXTERN_C\n+#define TARGET_CXX_IMPLICIT_EXTERN_C winnt_implicit_extern_c\n+\n+struct gcc_targetcm targetcm = TARGETCM_INITIALIZER;"}, {"sha": "a574f2a23ede9e946f25e7d2cd7cb30ee3eed502", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=88b0e79e45b76cece89ee1ac4a2feca4524a9b55", "patch": "@@ -1,3 +1,7 @@\n+2013-09-13  Jacek Caban  <jacek@codeweavers.com>\n+\n+\t* decl.c: Use new cxx_implicit_extern_c hook\n+\n 2013-09-12  Brooks Moses  <bmoses@google.com>\n \n \tPR driver/42955"}, {"sha": "f193676c382e32ba09eb5b63f84c5f0f6181a419", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=88b0e79e45b76cece89ee1ac4a2feca4524a9b55", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-family/c-common.h\"\n #include \"c-family/c-objc.h\"\n #include \"c-family/c-pragma.h\"\n+#include \"c-family/c-target.h\"\n #include \"diagnostic.h\"\n #include \"intl.h\"\n #include \"debug.h\"\n@@ -7457,7 +7458,9 @@ grokfndecl (tree ctype,\n        || (IDENTIFIER_LENGTH (declarator) > 10\n \t   && IDENTIFIER_POINTER (declarator)[0] == '_'\n \t   && IDENTIFIER_POINTER (declarator)[1] == '_'\n-\t   && strncmp (IDENTIFIER_POINTER (declarator)+2, \"builtin_\", 8) == 0))\n+\t   && strncmp (IDENTIFIER_POINTER (declarator)+2, \"builtin_\", 8) == 0)\n+       || (targetcm.cxx_implicit_extern_c\n+\t   && targetcm.cxx_implicit_extern_c(IDENTIFIER_POINTER (declarator))))\n       && current_lang_name == lang_name_cplusplus\n       && ctype == NULL_TREE\n       && DECL_FILE_SCOPE_P (decl))"}, {"sha": "a7ab95ad9e2e149b7e1dbb8a16f4632910b8c4f3", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=88b0e79e45b76cece89ee1ac4a2feca4524a9b55", "patch": "@@ -10651,6 +10651,10 @@ Define this hook to return the name of a header file to be included at the start\n  This hook can be used together with a header provided by the system C library to implement ISO C requirements for certain macros to be predefined that describe properties of the whole implementation rather than just the compiler.\n @end deftypefn\n \n+@deftypefn {C Target Hook} bool TARGET_CXX_IMPLICIT_EXTERN_C (const char*@var{})\n+Define this hook to add target-specific C++ implicit extern C functions. If this function returns true for the name of a file-scope function, that function implicitly gets extern \"C\" linkage rather than whatever language linkage the declaration would normally have.  An example of such function is WinMain on Win32 targets.\n+@end deftypefn\n+\n @defmac NO_IMPLICIT_EXTERN_C\n Define this macro if the system header files support C++ as well as C@.\n This macro inhibits the usual method of using system header files in"}, {"sha": "fdc392556f36f1c7263529dc0eb600967dfb5693", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=88b0e79e45b76cece89ee1ac4a2feca4524a9b55", "patch": "@@ -7985,6 +7985,8 @@ files @code{__STDC__} will always expand to 1.\n \n @hook TARGET_C_PREINCLUDE\n \n+@hook TARGET_CXX_IMPLICIT_EXTERN_C\n+\n @defmac NO_IMPLICIT_EXTERN_C\n Define this macro if the system header files support C++ as well as C@.\n This macro inhibits the usual method of using system header files in"}, {"sha": "179dfe279d355147334e95e279d4bd20afa2ddc4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88b0e79e45b76cece89ee1ac4a2feca4524a9b55", "patch": "@@ -1,3 +1,7 @@\n+2013-09-13  Jacek Caban  <jacek@codeweavers.com>\n+\n+\t* g++.dg/abi/main.C: Added implicit C linkage tests\n+\n 2013-09-13  Kai Tietz  <ktietz@redhat.com>\n \n \tgcc.target/i386/pr57848.c: New file."}, {"sha": "4c5f1ea213c2de58e9ea21c8f32099cf2589ccf0", "filename": "gcc/testsuite/g++.dg/abi/main.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmain.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b0e79e45b76cece89ee1ac4a2feca4524a9b55/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmain.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmain.C?ref=88b0e79e45b76cece89ee1ac4a2feca4524a9b55", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+\n+/* Check if entry points get implicit C linkage. If they don't, compiler will\n+ * error on incompatible declarations */\n+\n+int main();\n+extern \"C\" int main();\n+\n+#ifdef __MINGW32__\n+\n+int wmain();\n+extern \"C\" int wmain();\n+\n+int DllMain();\n+extern \"C\" int DllMain();\n+\n+int WinMain();\n+extern \"C\" int WinMain();\n+\n+int wWinMain();\n+extern \"C\" int wWinMain();\n+\n+#endif\n+"}]}