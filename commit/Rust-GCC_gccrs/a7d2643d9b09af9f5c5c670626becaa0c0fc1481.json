{"sha": "a7d2643d9b09af9f5c5c670626becaa0c0fc1481", "node_id": "C_kwDOANBUbNoAKGE3ZDI2NDNkOWIwOWFmOWY1YzVjNjcwNjI2YmVjYWEwYzBmYzE0ODE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-05T16:24:42Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-06T13:07:17Z"}, "message": "Support looking up super traits for trait items\n\nWhen supporting calls to super traits we need to allow lookups based on\nthe super traits as specified on the TraitReferences.\n\nFixes #1555", "tree": {"sha": "cf7011c7659af1416f4a109f81bc264f4686ecef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf7011c7659af1416f4a109f81bc264f4686ecef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7d2643d9b09af9f5c5c670626becaa0c0fc1481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d2643d9b09af9f5c5c670626becaa0c0fc1481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7d2643d9b09af9f5c5c670626becaa0c0fc1481", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d2643d9b09af9f5c5c670626becaa0c0fc1481/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e033f1705dde104c44d69cec87cb728dba596c6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e033f1705dde104c44d69cec87cb728dba596c6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e033f1705dde104c44d69cec87cb728dba596c6f"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "0f4883d6ba3bc2fae38f94f5375179d53aa15351", "filename": "gcc/rust/typecheck/rust-hir-trait-ref.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d2643d9b09af9f5c5c670626becaa0c0fc1481/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d2643d9b09af9f5c5c670626becaa0c0fc1481/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h?ref=a7d2643d9b09af9f5c5c670626becaa0c0fc1481", "patch": "@@ -336,6 +336,15 @@ class TraitReference\n \t    return true;\n \t  }\n       }\n+\n+    // lookup super traits\n+    for (const auto &super_trait : super_traits)\n+      {\n+\tbool found = super_trait->lookup_trait_item (ident, ref);\n+\tif (found)\n+\t  return true;\n+      }\n+\n     return false;\n   }\n \n@@ -351,6 +360,16 @@ class TraitReference\n \tif (ident.compare (item.get_identifier ()) == 0)\n \t  return &item;\n       }\n+\n+    // lookup super traits\n+    for (const auto &super_trait : super_traits)\n+      {\n+\tconst TraitItemReference *res\n+\t  = super_trait->lookup_trait_item (ident, type);\n+\tif (!res->is_error ())\n+\t  return res;\n+      }\n+\n     return &TraitItemReference::error_node ();\n   }\n "}, {"sha": "adb489116488130ed259e515d7eb47d74e469077", "filename": "gcc/testsuite/rust/compile/torture/issue-1555.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d2643d9b09af9f5c5c670626becaa0c0fc1481/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1555.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d2643d9b09af9f5c5c670626becaa0c0fc1481/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1555.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1555.rs?ref=a7d2643d9b09af9f5c5c670626becaa0c0fc1481", "patch": "@@ -0,0 +1,48 @@\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct Foo(i32);\n+trait Bar {\n+    fn baz(&self);\n+}\n+\n+trait Baz: Bar {\n+    fn qux(&self);\n+}\n+\n+impl Bar for Foo {\n+    fn baz(&self) {\n+        unsafe {\n+            let a = \"baz %i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, self.0);\n+        }\n+    }\n+}\n+\n+impl Baz for Foo {\n+    fn qux(&self) {\n+        unsafe {\n+            let a = \"qux %i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, self.0);\n+        }\n+    }\n+}\n+\n+fn static_dispatch<T: Baz>(t: &T) {\n+    t.baz();\n+    t.qux();\n+}\n+\n+pub fn main() {\n+    let a;\n+    a = &Foo(123);\n+\n+    static_dispatch(a);\n+}"}]}