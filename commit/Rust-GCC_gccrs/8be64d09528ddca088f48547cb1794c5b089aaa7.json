{"sha": "8be64d09528ddca088f48547cb1794c5b089aaa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJlNjRkMDk1MjhkZGNhMDg4ZjQ4NTQ3Y2IxNzk0YzViMDg5YWFhNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-02-23T01:44:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-02-23T01:44:23Z"}, "message": "errfn.c: Change varargs code to look like toplev.c.\n\n\t* errfn.c: Change varargs code to look like toplev.c.\n\t* method.c (process_modifiers): Don't prepend 'U' for char or\n\twchar_t.\n\nFrom-SVN: r25386", "tree": {"sha": "57ea4d0cdc8e43aee2aa4be34ed4a75b54dd34d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57ea4d0cdc8e43aee2aa4be34ed4a75b54dd34d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8be64d09528ddca088f48547cb1794c5b089aaa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be64d09528ddca088f48547cb1794c5b089aaa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8be64d09528ddca088f48547cb1794c5b089aaa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be64d09528ddca088f48547cb1794c5b089aaa7/comments", "author": null, "committer": null, "parents": [{"sha": "bd022652bf81864eec39c749155a229116913163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd022652bf81864eec39c749155a229116913163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd022652bf81864eec39c749155a229116913163"}], "stats": {"total": 155, "additions": 117, "deletions": 38}, "files": [{"sha": "8aacd3f8a49d95f1541f99df0a40848319f19451", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be64d09528ddca088f48547cb1794c5b089aaa7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be64d09528ddca088f48547cb1794c5b089aaa7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8be64d09528ddca088f48547cb1794c5b089aaa7", "patch": "@@ -1,10 +1,17 @@\n-Sun Feb 21 20:38:00 1999  H.J. Lu  (hjl@gnu.org)\n+1999-02-23  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* errfn.c: Change varargs code to look like toplev.c.\n+\n+\t* method.c (process_modifiers): Don't prepend 'U' for char or\n+\twchar_t.\n+\n 1999-02-20  Craig Burley  <craig@jcb-sc.com>\n \n \t* Make-lang.in (cplib2.ready): Don't consider updating\n \tcplib2 stuff if the current directory isn't writable, as\n \tit won't work (such as during a `make install').\n \n+Sun Feb 21 20:38:00 1999  H.J. Lu  (hjl@gnu.org)\n \n \t* decl2.c (start_objects): Make file scope constructors and\n \tdestructors local to the file if ASM_OUTPUT_CONSTRUCTOR and"}, {"sha": "fd8a6d4d1c361c370f202842a14dfc579acc32b8", "filename": "gcc/cp/errfn.c", "status": "modified", "additions": 99, "deletions": 31, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be64d09528ddca088f48547cb1794c5b089aaa7/gcc%2Fcp%2Ferrfn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be64d09528ddca088f48547cb1794c5b089aaa7/gcc%2Fcp%2Ferrfn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferrfn.c?ref=8be64d09528ddca088f48547cb1794c5b089aaa7", "patch": "@@ -1,5 +1,5 @@\n /* Provide a call-back mechanism for handling error output.\n-   Copyright (C) 1993, 94-97, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 94-98, 1999 Free Software Foundation, Inc.\n    Contributed by Jason Merrill (jason@cygnus.com)\n \n    This file is part of GNU CC.\n@@ -47,17 +47,12 @@ extern int   cp_line_of PROTO((tree));\n /* This function supports only `%s', `%d', `%%', and the C++ print\n    codes.  */\n \n-#ifdef __STDC__\n-static void\n-cp_thing (errorfn *errfn, int atarg1, const char *format, va_list ap)\n-#else\n static void\n cp_thing (errfn, atarg1, format, ap)\n      errorfn *errfn;\n      int atarg1;\n      const char *format;\n      va_list ap;\n-#endif\n {\n   static char *buf;\n   static long buflen;\n@@ -194,81 +189,154 @@ cp_thing (errfn, atarg1, format, ap)\n \n }\n \n-#ifdef __STDC__\n-#define DECLARE(name) void name (const char *format, ...)\n-#define INIT va_start (ap, format)\n-#else\n-#define DECLARE(name) void name (format, va_alist) char *format; va_dcl\n-#define INIT va_start (ap)\n-#endif\n-\n-DECLARE (cp_error)\n+void\n+cp_error VPROTO((const char *format, ...))\n {\n+#ifndef ANSI_PROTOTYPES\n+  char *format;\n+#endif\n   va_list ap;\n-  INIT;\n+\n+  VA_START (ap, format);\n+\n+#ifndef ANSI_PROTOTYPES\n+  format = va_arg (ap, char *);\n+#endif\n+\n   if (! cp_silent)\n     cp_thing ((errorfn *) error, 0, format, ap);\n   va_end (ap);\n }\n \n-DECLARE (cp_warning)\n+void\n+cp_warning VPROTO((const char *format, ...))\n {\n+#ifndef ANSI_PROTOTYPES\n+  char *format;\n+#endif\n   va_list ap;\n-  INIT;\n+\n+  VA_START (ap, format);\n+\n+#ifndef ANSI_PROTOTYPES\n+  format = va_arg (ap, char *);\n+#endif\n+\n   if (! cp_silent)\n     cp_thing ((errorfn *) warning, 0, format, ap);\n   va_end (ap);\n }\n \n-DECLARE (cp_pedwarn)\n+void\n+cp_pedwarn VPROTO((const char *format, ...))\n {\n+#ifndef ANSI_PROTOTYPES\n+  char *format;\n+#endif\n   va_list ap;\n-  INIT;\n+\n+  VA_START (ap, format);\n+\n+#ifndef ANSI_PROTOTYPES\n+  format = va_arg (ap, char *);\n+#endif\n+\n   if (! cp_silent)\n     cp_thing ((errorfn *) pedwarn, 0, format, ap);\n   va_end (ap);\n }\n \n-DECLARE (cp_compiler_error)\n+extern errorfn compiler_error;\n+\n+void\n+cp_compiler_error VPROTO((const char *format, ...))\n {\n-  extern errorfn compiler_error;\n+#ifndef ANSI_PROTOTYPES\n+  char *format;\n+#endif\n   va_list ap;\n-  INIT;\n+\n+  VA_START (ap, format);\n+\n+#ifndef ANSI_PROTOTYPES\n+  format = va_arg (ap, char *);\n+#endif\n+\n   if (! cp_silent)\n     cp_thing (compiler_error, 0, format, ap);\n   va_end (ap);\n }\n \n-DECLARE (cp_sprintf)\n+void\n+cp_sprintf VPROTO((const char *format, ...))\n {\n+#ifndef ANSI_PROTOTYPES\n+  char *format;\n+#endif\n   va_list ap;\n-  INIT;\n+\n+  VA_START (ap, format);\n+\n+#ifndef ANSI_PROTOTYPES\n+  format = va_arg (ap, char *);\n+#endif\n+\n   cp_thing ((errorfn *) sprintf, 0, format, ap);\n   va_end (ap);\n }\n \n-DECLARE (cp_error_at)\n+void\n+cp_error_at VPROTO((const char *format, ...))\n {\n+#ifndef ANSI_PROTOTYPES\n+  char *format;\n+#endif\n   va_list ap;\n-  INIT;\n+\n+  VA_START (ap, format);\n+\n+#ifndef ANSI_PROTOTYPES\n+  format = va_arg (ap, char *);\n+#endif\n+\n   if (! cp_silent)\n     cp_thing ((errorfn *) error_with_file_and_line, 1, format, ap);\n   va_end (ap);\n }\n \n-DECLARE (cp_warning_at)\n+void\n+cp_warning_at VPROTO((const char *format, ...))\n {\n+#ifndef ANSI_PROTOTYPES\n+  char *format;\n+#endif\n   va_list ap;\n-  INIT;\n+\n+  VA_START (ap, format);\n+\n+#ifndef ANSI_PROTOTYPES\n+  format = va_arg (ap, char *);\n+#endif\n+\n   if (! cp_silent)\n     cp_thing ((errorfn *) warning_with_file_and_line, 1, format, ap);\n   va_end (ap);\n }\n \n-DECLARE (cp_pedwarn_at)\n+void\n+cp_pedwarn_at VPROTO((const char *format, ...))\n {\n+#ifndef ANSI_PROTOTYPES\n+  char *format;\n+#endif\n   va_list ap;\n-  INIT;\n+\n+  VA_START (ap, format);\n+\n+#ifndef ANSI_PROTOTYPES\n+  format = va_arg (ap, char *);\n+#endif\n+\n   if (! cp_silent)\n     cp_thing ((errorfn *) pedwarn_with_file_and_line, 1, format, ap);\n   va_end (ap);"}, {"sha": "f3530dd1c3c93de1ca65730c3a3ff7dbda1e6a5d", "filename": "gcc/cp/method.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be64d09528ddca088f48547cb1794c5b089aaa7/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be64d09528ddca088f48547cb1794c5b089aaa7/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=8be64d09528ddca088f48547cb1794c5b089aaa7", "patch": "@@ -1,6 +1,6 @@\n /* Handle the hair of processing (but not expanding) inline functions.\n    Also manage function and variable name overloading.\n-   Copyright (C) 1987, 89, 92-97, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 89, 92-97, 1998, 1999 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -1201,7 +1201,8 @@ build_mangled_name (parmtypes, begin, end)\n   return (char *)obstack_base (&scratch_obstack);\n }\n \n-/* handles emitting modifiers such as Constant, read-only, and volatile */\n+/* Emit modifiers such as constant, read-only, and volatile.  */\n+\n void \n process_modifiers (parmtype) \n      tree parmtype;\n@@ -1212,6 +1213,8 @@ process_modifiers (parmtype)\n   if (TYPE_READONLY (parmtype))\n     OB_PUTC ('C');\n   if (TREE_CODE (parmtype) == INTEGER_TYPE\n+      && parmtype != char_type_node\n+      && parmtype != wchar_type_node\n       && (TYPE_MAIN_VARIANT (parmtype)\n \t  == unsigned_type (TYPE_MAIN_VARIANT (parmtype)))\n       && ! TYPE_FOR_JAVA (parmtype))\n@@ -1267,17 +1270,18 @@ check_btype (type)\n   return 0;\n }\n \n-/* handle emitting the correct code for various node types */\n+/* Emit the correct code for various node types.  */\n+\n static void \n process_overload_item (parmtype, extra_Gcode) \n   tree parmtype;\n   int extra_Gcode;\n {\n   numeric_output_need_bar = 0;\n \n-  /* These tree types are considered modifiers for B code squangling , */\n-  /* and therefore should not get entries in the Btypelist             */\n-  /* they are, however, repeatable types                               */\n+  /* These tree types are considered modifiers for B code squangling,\n+     and therefore should not get entries in the Btypelist.  They are,\n+     however, repeatable types.  */\n \n   switch (TREE_CODE (parmtype))\n     {"}]}