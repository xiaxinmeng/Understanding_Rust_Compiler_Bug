{"sha": "d7afa673382e790f34aa8811c020f043580f9fa2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdhZmE2NzMzODJlNzkwZjM0YWE4ODExYzAyMGYwNDM1ODBmOWZhMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-08-27T17:03:34Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-08-27T17:03:34Z"}, "message": "re PR c++/52892 (Function pointer loses constexpr qualification)\n\n/cp\n2014-08-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/52892\n\t* semantics.c (cxx_eval_call_expression): Use STRIP_NOPS on the\n\tresult of cxx_eval_constant_expression.\n\n/testsuite\n2014-08-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/52892\n\t* g++.dg/cpp0x/constexpr-52892-1.C: New.\n\t* g++.dg/cpp0x/constexpr-52892-2.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-52282-1.C: Likewise.\n\nFrom-SVN: r214579", "tree": {"sha": "01bedd2000e53feabec7995c08cdbca348ba5c27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01bedd2000e53feabec7995c08cdbca348ba5c27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7afa673382e790f34aa8811c020f043580f9fa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7afa673382e790f34aa8811c020f043580f9fa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7afa673382e790f34aa8811c020f043580f9fa2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7afa673382e790f34aa8811c020f043580f9fa2/comments", "author": null, "committer": null, "parents": [{"sha": "3d0b75dee41113c397caabd6b5690c6c39204d0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d0b75dee41113c397caabd6b5690c6c39204d0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d0b75dee41113c397caabd6b5690c6c39204d0d"}], "stats": {"total": 84, "additions": 83, "deletions": 1}, "files": [{"sha": "2f7cc664f3d06c092d33b80e9d1d07fa5637aa02", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afa673382e790f34aa8811c020f043580f9fa2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afa673382e790f34aa8811c020f043580f9fa2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d7afa673382e790f34aa8811c020f043580f9fa2", "patch": "@@ -1,3 +1,9 @@\n+2014-08-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/52892\n+\t* semantics.c (cxx_eval_call_expression): Use STRIP_NOPS on the\n+\tresult of cxx_eval_constant_expression.\n+\n 2014-08-26  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/58624"}, {"sha": "168bde8fc7cafad3f95ca4495db08b8c40b85444", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afa673382e790f34aa8811c020f043580f9fa2/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afa673382e790f34aa8811c020f043580f9fa2/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=d7afa673382e790f34aa8811c020f043580f9fa2", "patch": "@@ -8391,7 +8391,9 @@ cxx_eval_call_expression (const constexpr_call *old_call, tree t,\n     {\n       /* Might be a constexpr function pointer.  */\n       fun = cxx_eval_constant_expression (old_call, fun, allow_non_constant,\n-\t\t\t\t\t  /*addr*/false, non_constant_p, overflow_p);\n+\t\t\t\t\t  /*addr*/false, non_constant_p,\n+\t\t\t\t\t  overflow_p);\n+      STRIP_NOPS (fun);\n       if (TREE_CODE (fun) == ADDR_EXPR)\n \tfun = TREE_OPERAND (fun, 0);\n     }"}, {"sha": "4b5def9c633e53e65507124aad822362450bc55a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afa673382e790f34aa8811c020f043580f9fa2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afa673382e790f34aa8811c020f043580f9fa2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7afa673382e790f34aa8811c020f043580f9fa2", "patch": "@@ -1,3 +1,10 @@\n+2014-08-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/52892\n+\t* g++.dg/cpp0x/constexpr-52892-1.C: New.\n+\t* g++.dg/cpp0x/constexpr-52892-2.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-52282-1.C: Likewise.\n+\n 2014-08-27  Guozhi Wei  <carrot@google.com>\n \n \tPR target/62262"}, {"sha": "61797f046d7b3d5a67bced9888fc305bcd2eb86a", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-52282-1.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afa673382e790f34aa8811c020f043580f9fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52282-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afa673382e790f34aa8811c020f043580f9fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52282-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52282-1.C?ref=d7afa673382e790f34aa8811c020f043580f9fa2", "patch": "@@ -0,0 +1,32 @@\n+// PR c++/52282\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T, T V>\n+struct A\n+    {\n+    static constexpr T a() { return V; }\n+    };\n+\n+template <typename T, T V>\n+struct B\n+    {\n+    typedef T type;\n+    static constexpr type b() { return V; }\n+    };\n+\n+template <typename T, T V>\n+struct C\n+    {\n+    static constexpr decltype(V) c() { return V; }\n+    };\n+static_assert(A<int, 10>::a() == 10, \"oops\");\n+static_assert(B<int, 10>::b() == 10, \"oops\");\n+static_assert(C<int, 10>::c() == 10, \"oops\");\n+\n+struct D\n+    {\n+    static constexpr int d() { return 10; }\n+    };\n+static_assert((A<int(*)(), &D::d>::a())() == 10, \"oops\");\n+static_assert((B<int(*)(), &D::d>::b())() == 10, \"oops\");\n+static_assert((C<int(*)(), &D::d>::c())() == 10, \"oops\");"}, {"sha": "8e6bc49b63255b6a0e0058d99c69d14eabbb5dd2", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-52892-1.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afa673382e790f34aa8811c020f043580f9fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52892-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afa673382e790f34aa8811c020f043580f9fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52892-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52892-1.C?ref=d7afa673382e790f34aa8811c020f043580f9fa2", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/52892\n+// { dg-do compile { target c++11 } }\n+\n+constexpr __SIZE_TYPE__ fibonacci(__SIZE_TYPE__ val) {\n+  return (val <= 2) ? 1 : fibonacci(val - 1) + fibonacci(val - 2);\n+}\n+\n+template <typename Function>\n+struct Defer {\n+  constexpr Defer(const Function func_) : func(func_) { }\n+\n+  const Function func;\n+\n+  template <typename... Args>\n+  constexpr auto operator () (const Args&... args) -> decltype(func(args...)) {\n+    return func(args...);\n+  }\n+};\n+\n+template <typename Function>\n+constexpr Defer<Function> make_deferred(const Function f) {\n+  return Defer<Function>(f);\n+}\n+\n+int main() {\n+  constexpr auto deferred = make_deferred(&fibonacci);\n+  static_assert(deferred(25) == 75025, \"Static fibonacci call failed\");\n+}"}, {"sha": "d2062cee842bd0388d9273030a9f2fb34ec6aa53", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-52892-2.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afa673382e790f34aa8811c020f043580f9fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52892-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afa673382e790f34aa8811c020f043580f9fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52892-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52892-2.C?ref=d7afa673382e790f34aa8811c020f043580f9fa2", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/52892\n+// { dg-do compile { target c++11 } }\n+\n+constexpr bool is_negative(int x) { return x < 0; }\n+typedef bool (*Function)(int);\n+constexpr bool check(int x, Function p) { return p(x); }\n+static_assert(check(-2, is_negative), \"Error\");"}]}