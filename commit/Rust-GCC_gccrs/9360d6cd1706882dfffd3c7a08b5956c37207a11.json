{"sha": "9360d6cd1706882dfffd3c7a08b5956c37207a11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM2MGQ2Y2QxNzA2ODgyZGZmZmQzYzdhMDhiNTk1NmMzNzIwN2ExMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-27T13:50:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-27T20:36:01Z"}, "message": "libstdc++: Simplify std::optional::value()\n\nThe structure of these functions likely dates from the time before G++\nfully supported C++14 extended constexpr, so that the throw expression\nhad to be the operand of a conditional expression. That is not true now,\nso we can use a more straightforward version of the code.\n\nWe can also simplify the declaration of __throw_bad_optional_access by\nusing the C++11-style [[noreturn]] attribute so that a separate\ndeclaration isn't needed.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/optional (__throw_bad_optional_access):\n\tReplace GNU attribute with C++11 attribute.\n\t(optional::value, optional::value_or): Use if statements\n\tinstead of conditional expressions.\n\t* include/std/optional (__throw_bad_optional_access)\n\t(optional::value, optional::value_or): Likewise.", "tree": {"sha": "e03975117aa828b80f557d0d4f7695f8696c00f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e03975117aa828b80f557d0d4f7695f8696c00f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9360d6cd1706882dfffd3c7a08b5956c37207a11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9360d6cd1706882dfffd3c7a08b5956c37207a11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9360d6cd1706882dfffd3c7a08b5956c37207a11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9360d6cd1706882dfffd3c7a08b5956c37207a11/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7195fb01fe62a313ae5f7faede698101bdb3025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7195fb01fe62a313ae5f7faede698101bdb3025", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7195fb01fe62a313ae5f7faede698101bdb3025"}], "stats": {"total": 99, "additions": 46, "deletions": 53}, "files": [{"sha": "274c974853ddec13dc272673f08595882fb64eb8", "filename": "libstdc++-v3/include/experimental/optional", "status": "modified", "additions": 25, "deletions": 31, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9360d6cd1706882dfffd3c7a08b5956c37207a11/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9360d6cd1706882dfffd3c7a08b5956c37207a11/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional?ref=9360d6cd1706882dfffd3c7a08b5956c37207a11", "patch": "@@ -114,12 +114,8 @@ inline namespace fundamentals_v1\n \n   /// @cond undocumented\n \n-  void\n-  __throw_bad_optional_access(const char*)\n-  __attribute__((__noreturn__));\n-\n   // XXX Does not belong here.\n-  inline void\n+  [[noreturn]] inline void\n   __throw_bad_optional_access(const char* __s)\n   { _GLIBCXX_THROW_OR_ABORT(bad_optional_access(__s)); }\n \n@@ -674,41 +670,37 @@ inline namespace fundamentals_v1\n       constexpr const _Tp&\n       value() const&\n       {\n-\treturn this->_M_is_engaged()\n-\t  ?  this->_M_get()\n-\t  : (__throw_bad_optional_access(\"Attempt to access value of a \"\n-\t\t                         \"disengaged optional object\"),\n-\t     this->_M_get());\n+\tif (this->_M_is_engaged())\n+\t  return this->_M_get();\n+\t__throw_bad_optional_access(\"Attempt to access value of a \"\n+\t\t\t\t    \"disengaged optional object\");\n       }\n \n       constexpr _Tp&\n       value()&\n       {\n-\treturn this->_M_is_engaged()\n-\t  ?  this->_M_get()\n-\t  : (__throw_bad_optional_access(\"Attempt to access value of a \"\n-\t\t                         \"disengaged optional object\"),\n-\t     this->_M_get());\n+\tif (this->_M_is_engaged())\n+\t  return this->_M_get();\n+\t__throw_bad_optional_access(\"Attempt to access value of a \"\n+\t\t\t\t    \"disengaged optional object\");\n       }\n \n       constexpr _Tp&&\n       value()&&\n       {\n-\treturn this->_M_is_engaged()\n-\t  ?  std::move(this->_M_get())\n-\t  : (__throw_bad_optional_access(\"Attempt to access value of a \"\n-\t\t                         \"disengaged optional object\"),\n-\t     std::move(this->_M_get()));\n+\tif (this->_M_is_engaged())\n+\t  return std::move(this->_M_get());\n+\t__throw_bad_optional_access(\"Attempt to access value of a \"\n+\t\t\t\t    \"disengaged optional object\");\n       }\n \n       constexpr const _Tp&&\n       value() const&&\n       {\n-\treturn this->_M_is_engaged()\n-\t  ?  std::move(this->_M_get())\n-\t  : (__throw_bad_optional_access(\"Attempt to access value of a \"\n-\t\t                         \"disengaged optional object\"),\n-\t     std::move(this->_M_get()));\n+\tif (this->_M_is_engaged())\n+\t  return std::move(this->_M_get());\n+\t__throw_bad_optional_access(\"Attempt to access value of a \"\n+\t\t\t\t    \"disengaged optional object\");\n       }\n \n       template<typename _Up>\n@@ -719,9 +711,10 @@ inline namespace fundamentals_v1\n \t\t\t       is_convertible<_Up&&, _Tp>>(),\n \t\t\t\"Cannot return value\");\n \n-\t  return this->_M_is_engaged()\n-\t    ? this->_M_get()\n-\t    : static_cast<_Tp>(std::forward<_Up>(__u));\n+\t  if (this->_M_is_engaged())\n+\t    return this->_M_get();\n+\t  else\n+\t    return static_cast<_Tp>(std::forward<_Up>(__u));\n \t}\n \n       template<typename _Up>\n@@ -732,9 +725,10 @@ inline namespace fundamentals_v1\n \t\t\t       is_convertible<_Up&&, _Tp>>(),\n \t\t\t\"Cannot return value\" );\n \n-\t  return this->_M_is_engaged()\n-\t    ? std::move(this->_M_get())\n-\t    : static_cast<_Tp>(std::forward<_Up>(__u));\n+\t  if (this->_M_is_engaged())\n+\t    return std::move(this->_M_get());\n+\t  else\n+\t    return static_cast<_Tp>(std::forward<_Up>(__u));\n \t}\n     };\n "}, {"sha": "b8ab75107572d7fe56ce649fe4f6e9506e3b5cd5", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9360d6cd1706882dfffd3c7a08b5956c37207a11/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9360d6cd1706882dfffd3c7a08b5956c37207a11/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=9360d6cd1706882dfffd3c7a08b5956c37207a11", "patch": "@@ -91,12 +91,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return \"bad optional access\"; }\n   };\n \n-  void\n-  __throw_bad_optional_access()\n-  __attribute__((__noreturn__));\n-\n   // XXX Does not belong here.\n-  inline void\n+  [[__noreturn__]] inline void\n   __throw_bad_optional_access()\n   { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }\n \n@@ -943,33 +939,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr const _Tp&\n       value() const&\n       {\n-\treturn this->_M_is_engaged()\n-\t  ? this->_M_get()\n-\t  : (__throw_bad_optional_access(), this->_M_get());\n+\tif (this->_M_is_engaged())\n+\t  return this->_M_get();\n+\t__throw_bad_optional_access();\n       }\n \n       constexpr _Tp&\n       value()&\n       {\n-\treturn this->_M_is_engaged()\n-\t  ? this->_M_get()\n-\t  : (__throw_bad_optional_access(), this->_M_get());\n+\tif (this->_M_is_engaged())\n+\t  return this->_M_get();\n+\t__throw_bad_optional_access();\n       }\n \n       constexpr _Tp&&\n       value()&&\n       {\n-\treturn this->_M_is_engaged()\n-\t  ? std::move(this->_M_get())\n-\t  : (__throw_bad_optional_access(), std::move(this->_M_get()));\n+\tif (this->_M_is_engaged())\n+\t  return std::move(this->_M_get());\n+\t__throw_bad_optional_access();\n       }\n \n       constexpr const _Tp&&\n       value() const&&\n       {\n-\treturn this->_M_is_engaged()\n-\t  ? std::move(this->_M_get())\n-\t  : (__throw_bad_optional_access(), std::move(this->_M_get()));\n+\tif (this->_M_is_engaged())\n+\t  return std::move(this->_M_get());\n+\t__throw_bad_optional_access();\n       }\n \n       template<typename _Up>\n@@ -979,8 +975,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  static_assert(is_copy_constructible_v<_Tp>);\n \t  static_assert(is_convertible_v<_Up&&, _Tp>);\n \n-\t  return this->_M_is_engaged()\n-\t    ? this->_M_get() : static_cast<_Tp>(std::forward<_Up>(__u));\n+\t  if (this->_M_is_engaged())\n+\t    return this->_M_get();\n+\t  else\n+\t    return static_cast<_Tp>(std::forward<_Up>(__u));\n \t}\n \n       template<typename _Up>\n@@ -990,9 +988,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  static_assert(is_move_constructible_v<_Tp>);\n \t  static_assert(is_convertible_v<_Up&&, _Tp>);\n \n-\t  return this->_M_is_engaged()\n-\t    ? std::move(this->_M_get())\n-\t    : static_cast<_Tp>(std::forward<_Up>(__u));\n+\t  if (this->_M_is_engaged())\n+\t    return std::move(this->_M_get());\n+\t  else\n+\t    return static_cast<_Tp>(std::forward<_Up>(__u));\n \t}\n \n       void reset() noexcept { this->_M_reset(); }"}]}