{"sha": "51c16b7e8a7415eba4863cafbc5e5ff717351f3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFjMTZiN2U4YTc0MTVlYmE0ODYzY2FmYmM1ZTVmZjcxNzM1MWYzYw==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2003-09-28T09:51:52Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2003-09-28T09:51:52Z"}, "message": "stormy16.c, [...]: Convert to ISO C90 function declarations and definitions.\n\n\t* config/stormy16/stormy16.c, config/stormy16/stormy16-protos.h:\n\tConvert to ISO C90 function declarations and definitions.\n\nFrom-SVN: r71878", "tree": {"sha": "1973b8081f9223dc6cb13da63614bc27523f5b06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1973b8081f9223dc6cb13da63614bc27523f5b06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51c16b7e8a7415eba4863cafbc5e5ff717351f3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c16b7e8a7415eba4863cafbc5e5ff717351f3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51c16b7e8a7415eba4863cafbc5e5ff717351f3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c16b7e8a7415eba4863cafbc5e5ff717351f3c/comments", "author": null, "committer": null, "parents": [{"sha": "c54859d3c9355d07c5e4d30bb4301a32f7bd6fb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54859d3c9355d07c5e4d30bb4301a32f7bd6fb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c54859d3c9355d07c5e4d30bb4301a32f7bd6fb7"}], "stats": {"total": 380, "additions": 138, "deletions": 242}, "files": [{"sha": "d77a99fa71ce94bb335cfe9afb511cd031520049", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51c16b7e8a7415eba4863cafbc5e5ff717351f3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51c16b7e8a7415eba4863cafbc5e5ff717351f3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51c16b7e8a7415eba4863cafbc5e5ff717351f3c", "patch": "@@ -1,3 +1,8 @@\n+2003-09-28  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t*  config/stormy16/stormy16.c, config/stormy16/stormy16-protos.h:\n+\tConvert to ISO C90 function declarations and definitions.\n+\n 2003-09-28  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (mips_constant_info): Add reloc field."}, {"sha": "70e63633855ad5b672185c2dac273529f6c2a6da", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 46, "deletions": 53, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51c16b7e8a7415eba4863cafbc5e5ff717351f3c/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51c16b7e8a7415eba4863cafbc5e5ff717351f3c/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=51c16b7e8a7415eba4863cafbc5e5ff717351f3c", "patch": "@@ -21,76 +21,69 @@ Boston, MA 02111-1307, USA.  */\n \n \n \n-extern struct xstormy16_stack_layout \n-\t\t    xstormy16_compute_stack_layout PARAMS((void));\n-extern void         xstormy16_expand_prologue      PARAMS ((void));\n-extern void         xstormy16_expand_epilogue      PARAMS ((void));\n-extern int\txstormy16_initial_elimination_offset PARAMS ((int, int));\n-extern int\tdirect_return PARAMS ((void));\n-extern int\txstormy16_interrupt_function_p PARAMS ((void));\n-extern int\txstormy16_epilogue_uses PARAMS ((int));\n-extern void\txstormy16_function_profiler PARAMS ((void));\n+extern struct xstormy16_stack_layout xstormy16_compute_stack_layout (void);\n+extern void xstormy16_expand_prologue (void);\n+extern void xstormy16_expand_epilogue (void);\n+extern int xstormy16_initial_elimination_offset (int, int);\n+extern int direct_return (void);\n+extern int xstormy16_interrupt_function_p (void);\n+extern int xstormy16_epilogue_uses (int);\n+extern void xstormy16_function_profiler (void);\n \n #if defined (TREE_CODE)\n #  if defined (HAVE_MACHINE_MODES)\n extern CUMULATIVE_ARGS xstormy16_function_arg_advance \n-  PARAMS ((CUMULATIVE_ARGS, enum machine_mode, tree, int));\n+ (CUMULATIVE_ARGS, enum machine_mode, tree, int);\n extern rtx xstormy16_function_arg\n-  PARAMS ((CUMULATIVE_ARGS, enum machine_mode, tree, int));\n+ (CUMULATIVE_ARGS, enum machine_mode, tree, int);\n #  endif\n-extern void    xstormy16_setup_incoming_varargs \n-  PARAMS ((CUMULATIVE_ARGS, int, tree, int *));\n-extern tree    xstormy16_build_va_list PARAMS ((void));\n+extern void xstormy16_setup_incoming_varargs \n+ (CUMULATIVE_ARGS, int, tree, int *);\n+extern tree xstormy16_build_va_list (void);\n #endif\n \n #if defined (TREE_CODE) && defined (RTX_CODE)\n-extern void    xstormy16_expand_builtin_va_start PARAMS ((tree, rtx));\n-extern rtx     xstormy16_expand_builtin_va_arg PARAMS ((tree, tree));\n-extern void    xstormy16_initialize_trampoline PARAMS ((rtx, rtx, rtx));\n-extern rtx     xstormy16_function_value PARAMS ((tree, tree));\n+extern void xstormy16_expand_builtin_va_start (tree, rtx);\n+extern rtx xstormy16_expand_builtin_va_arg (tree, tree);\n+extern void xstormy16_initialize_trampoline (rtx, rtx, rtx);\n+extern rtx xstormy16_function_value (tree, tree);\n #endif\n \n #ifdef RTX_CODE\n-extern void xstormy16_emit_cbranch PARAMS ((enum rtx_code, rtx));\n-extern char * xstormy16_output_cbranch_hi PARAMS ((rtx, const char *, int, \n-\t\t\t\t\t\t  rtx));\n-extern char * xstormy16_output_cbranch_si PARAMS ((rtx, const char *, int, \n-\t\t\t\t\t\t  rtx));\n-extern int xstormy16_mode_dependent_address_p PARAMS ((rtx));\n-extern int xstormy16_extra_constraint_p PARAMS ((rtx, int));\n+extern void xstormy16_emit_cbranch (enum rtx_code, rtx);\n+extern char *xstormy16_output_cbranch_hi (rtx, const char *, int, rtx);\n+extern char *xstormy16_output_cbranch_si (rtx, const char *, int, rtx);\n+extern int xstormy16_mode_dependent_address_p (rtx);\n+extern int xstormy16_extra_constraint_p (rtx, int);\n \n-extern void xstormy16_print_operand          PARAMS ((FILE *, rtx, int));\n-extern void xstormy16_print_operand_address  PARAMS ((FILE *, rtx));\n+extern void xstormy16_print_operand (FILE *, rtx, int);\n+extern void xstormy16_print_operand_address (FILE *, rtx);\n \n-extern void xstormy16_expand_casesi PARAMS ((rtx, rtx, rtx, rtx, rtx));\n-extern void xstormy16_output_addr_vec PARAMS ((FILE *, rtx, rtx));\n-extern void xstormy16_expand_call PARAMS ((rtx, rtx, rtx));\n+extern void xstormy16_expand_casesi (rtx, rtx, rtx, rtx, rtx);\n+extern void xstormy16_output_addr_vec (FILE *, rtx, rtx);\n+extern void xstormy16_expand_call (rtx, rtx, rtx);\n #endif\n \n #if defined (HAVE_MACHINE_MODES) && defined (RTX_CODE)\n-extern int xstormy16_ineqsi_operator PARAMS ((rtx, enum machine_mode));\n-extern int equality_operator PARAMS ((rtx, enum machine_mode));\n-extern int inequality_operator PARAMS ((rtx, enum machine_mode));\n-extern void xstormy16_split_cbranch PARAMS ((enum machine_mode, \n-\t\t\t\t\t   rtx, rtx, rtx, rtx));\n-extern int  short_memory_operand PARAMS ((rtx, enum machine_mode));\n-extern int  nonimmediate_nonstack_operand PARAMS ((rtx, enum machine_mode));\n+extern int xstormy16_ineqsi_operator (rtx, enum machine_mode);\n+extern int equality_operator (rtx, enum machine_mode);\n+extern int inequality_operator (rtx, enum machine_mode);\n+extern void xstormy16_split_cbranch (enum machine_mode, rtx, rtx, rtx, rtx);\n+extern int  short_memory_operand (rtx, enum machine_mode);\n+extern int  nonimmediate_nonstack_operand (rtx, enum machine_mode);\n extern enum reg_class xstormy16_secondary_reload_class \n-  PARAMS ((enum reg_class, enum machine_mode, rtx));\n-extern int  xstormy16_carry_plus_operand PARAMS ((rtx, enum machine_mode));\n-extern int  xs_hi_general_operand PARAMS ((rtx, enum machine_mode));\n-extern int  xs_hi_nonmemory_operand PARAMS ((rtx, enum machine_mode));\n-extern enum reg_class xstormy16_preferred_reload_class \n-  PARAMS ((rtx, enum reg_class));\n-extern int xstormy16_legitimate_address_p \n-   PARAMS ((enum machine_mode, rtx, int));\n-extern void xstormy16_split_move PARAMS ((enum machine_mode, rtx, rtx));\n-extern void xstormy16_expand_move PARAMS ((enum machine_mode, rtx, rtx));\n-extern void xstormy16_expand_arith PARAMS ((enum machine_mode, enum rtx_code, \n-\t\t\t\t\t   rtx, rtx, rtx, rtx));\n-extern int  shift_operator PARAMS ((rtx, enum machine_mode));\n-extern const char * xstormy16_output_shift PARAMS ((enum machine_mode, \n-\t\t\t\t\t\t   enum rtx_code, \n-\t\t\t\t\t\t   rtx, rtx, rtx));\n+ (enum reg_class, enum machine_mode, rtx);\n+extern int  xstormy16_carry_plus_operand (rtx, enum machine_mode);\n+extern int  xs_hi_general_operand (rtx, enum machine_mode);\n+extern int  xs_hi_nonmemory_operand (rtx, enum machine_mode);\n+extern enum reg_class xstormy16_preferred_reload_class (rtx, enum reg_class);\n+extern int xstormy16_legitimate_address_p (enum machine_mode, rtx, int);\n+extern void xstormy16_split_move (enum machine_mode, rtx, rtx);\n+extern void xstormy16_expand_move (enum machine_mode, rtx, rtx);\n+extern void xstormy16_expand_arith (enum machine_mode, enum rtx_code, \n+\t\t\t\t    rtx, rtx, rtx, rtx);\n+extern int  shift_operator (rtx, enum machine_mode);\n+extern const char * xstormy16_output_shift (enum machine_mode, enum rtx_code, \n+\t\t\t\t\t    rtx, rtx, rtx);\n #endif\n "}, {"sha": "1961f0a9d011f16b2738cc8f18d84e3d1b16eabe", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 87, "deletions": 189, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51c16b7e8a7415eba4863cafbc5e5ff717351f3c/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51c16b7e8a7415eba4863cafbc5e5ff717351f3c/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=51c16b7e8a7415eba4863cafbc5e5ff717351f3c", "patch": "@@ -47,16 +47,16 @@ Boston, MA 02111-1307, USA.  */\n #include \"tm_p.h\"\n #include \"langhooks.h\"\n \n-static rtx emit_addhi3_postreload PARAMS ((rtx, rtx, rtx));\n-static void xstormy16_asm_out_constructor PARAMS ((rtx, int));\n-static void xstormy16_asm_out_destructor PARAMS ((rtx, int));\n-static void xstormy16_asm_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n-\t\t\t\t\t\t   HOST_WIDE_INT, tree));\n+static rtx emit_addhi3_postreload (rtx, rtx, rtx);\n+static void xstormy16_asm_out_constructor (rtx, int);\n+static void xstormy16_asm_out_destructor (rtx, int);\n+static void xstormy16_asm_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n+\t\t\t\t\t   HOST_WIDE_INT, tree);\n \n-static void xstormy16_init_builtins PARAMS ((void));\n-static rtx xstormy16_expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int));\n-static bool xstormy16_rtx_costs PARAMS ((rtx, int, int, int *));\n-static int xstormy16_address_cost PARAMS ((rtx));\n+static void xstormy16_init_builtins (void);\n+static rtx xstormy16_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n+static bool xstormy16_rtx_costs (rtx, int, int, int *);\n+static int xstormy16_address_cost (rtx);\n \n /* Define the information needed to generate branch and scc insns.  This is\n    stored from the compare operation.  */\n@@ -66,9 +66,7 @@ struct rtx_def * xstormy16_compare_op1;\n /* Return 1 if this is a LT, GE, LTU, or GEU operator.  */\n \n int\n-xstormy16_ineqsi_operator (op, mode)\n-    register rtx op;\n-    enum machine_mode mode;\n+xstormy16_ineqsi_operator (register rtx op, enum machine_mode mode)\n {\n   enum rtx_code code = GET_CODE (op);\n   \n@@ -79,9 +77,7 @@ xstormy16_ineqsi_operator (op, mode)\n /* Return 1 if this is an EQ or NE operator.  */\n \n int\n-equality_operator (op, mode)\n-    register rtx op;\n-    enum machine_mode mode;\n+equality_operator (register rtx op, enum machine_mode mode)\n {\n   return ((mode == VOIDmode || GET_MODE (op) == mode)\n \t  && (GET_CODE (op) == EQ || GET_CODE (op) == NE));\n@@ -90,9 +86,7 @@ equality_operator (op, mode)\n /* Return 1 if this is a comparison operator but not an EQ or NE operator.  */\n \n int\n-inequality_operator (op, mode)\n-    register rtx op;\n-    enum machine_mode mode;\n+inequality_operator (register rtx op, enum machine_mode mode)\n {\n   return comparison_operator (op, mode) && ! equality_operator (op, mode);\n }\n@@ -102,10 +96,8 @@ inequality_operator (op, mode)\n    scanned.  In either case, *TOTAL contains the cost result.  */\n \n static bool\n-xstormy16_rtx_costs (x, code, outer_code, total)\n-     rtx x;\n-     int code, outer_code ATTRIBUTE_UNUSED;\n-     int *total;\n+xstormy16_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n+\t\t     int *total)\n {\n   switch (code)\n     {\n@@ -138,8 +130,7 @@ xstormy16_rtx_costs (x, code, outer_code, total)\n }\n \n static int\n-xstormy16_address_cost (x)\n-     rtx x;\n+xstormy16_address_cost (rtx x)\n {\n   return (GET_CODE (x) == CONST_INT ? 2\n \t  : GET_CODE (x) == PLUS ? 7\n@@ -172,9 +163,7 @@ xstormy16_address_cost (x)\n /* Emit a branch of kind CODE to location LOC.  */\n \n void\n-xstormy16_emit_cbranch (code, loc)\n-     enum rtx_code code;\n-     rtx loc;\n+xstormy16_emit_cbranch (enum rtx_code code, rtx loc)\n {\n   rtx op0 = xstormy16_compare_op0;\n   rtx op1 = xstormy16_compare_op1;\n@@ -274,12 +263,8 @@ xstormy16_emit_cbranch (code, loc)\n    xstormy16_expand_arith.  */\n \n void\n-xstormy16_split_cbranch (mode, label, comparison, dest, carry)\n-     enum machine_mode mode;\n-     rtx label;\n-     rtx comparison;\n-     rtx dest;\n-     rtx carry;\n+xstormy16_split_cbranch (enum machine_mode mode, rtx label, rtx comparison,\n+\t\t\t rtx dest, rtx carry)\n {\n   rtx op0 = XEXP (comparison, 0);\n   rtx op1 = XEXP (comparison, 1);\n@@ -315,11 +300,7 @@ xstormy16_split_cbranch (mode, label, comparison, dest, carry)\n    INSN is the insn.  */\n \n char *\n-xstormy16_output_cbranch_hi (op, label, reversed, insn)\n-     rtx op;\n-     const char * label;\n-     int reversed;\n-     rtx insn;\n+xstormy16_output_cbranch_hi (rtx op, const char *label, int reversed, rtx insn)\n {\n   static char string[64];\n   int need_longbranch = (op != NULL_RTX\n@@ -392,11 +373,7 @@ xstormy16_output_cbranch_hi (op, label, reversed, insn)\n    INSN is the insn.  */\n \n char *\n-xstormy16_output_cbranch_si (op, label, reversed, insn)\n-     rtx op;\n-     const char * label;\n-     int reversed;\n-     rtx insn;\n+xstormy16_output_cbranch_si (rtx op, const char *label, int reversed, rtx insn)\n {\n   static char string[64];\n   int need_longbranch = get_attr_length (insn) >= 8;\n@@ -510,10 +487,9 @@ xstormy16_output_cbranch_si (op, label, reversed, insn)\n    This case often occurs between floating-point and general registers.  */\n \n enum reg_class\n-xstormy16_secondary_reload_class (class, mode, x)\n-     enum reg_class class;\n-     enum machine_mode mode;\n-     rtx x;\n+xstormy16_secondary_reload_class (enum reg_class class,\n+\t\t\t\t  enum machine_mode mode,\n+\t\t\t\t  rtx x)\n {\n   /* This chip has the interesting property that only the first eight\n      registers can be moved to/from memory.  */\n@@ -534,9 +510,7 @@ xstormy16_secondary_reload_class (class, mode, x)\n \n /* Recognize a PLUS that needs the carry register.  */\n int\n-xstormy16_carry_plus_operand (x, mode)\n-     rtx x;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+xstormy16_carry_plus_operand (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return (GET_CODE (x) == PLUS\n \t  && GET_CODE (XEXP (x, 1)) == CONST_INT\n@@ -545,9 +519,7 @@ xstormy16_carry_plus_operand (x, mode)\n \n /* Detect and error out on out-of-range constants for movhi.  */\n int\n-xs_hi_general_operand (x, mode)\n-     rtx x;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+xs_hi_general_operand (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   if ((GET_CODE (x) == CONST_INT) \n    && ((INTVAL (x) >= 32768) || (INTVAL (x) < -32768)))\n@@ -557,9 +529,7 @@ xs_hi_general_operand (x, mode)\n \n /* Detect and error out on out-of-range constants for addhi and subhi.  */\n int\n-xs_hi_nonmemory_operand (x, mode)\n-     rtx x;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+xs_hi_nonmemory_operand (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   if ((GET_CODE (x) == CONST_INT) \n    && ((INTVAL (x) >= 32768) || (INTVAL (x) < -32768)))\n@@ -568,9 +538,7 @@ xs_hi_nonmemory_operand (x, mode)\n }\n \n enum reg_class\n-xstormy16_preferred_reload_class (x, class)\n-     enum reg_class class;\n-     rtx x;\n+xstormy16_preferred_reload_class (rtx x, enum reg_class class)\n {\n   if (class == GENERAL_REGS\n       && GET_CODE (x) == MEM)\n@@ -590,10 +558,8 @@ xstormy16_preferred_reload_class (x, class)\n   && (INTVAL (X) + (OFFSET) < 0x100 || INTVAL (X) + (OFFSET) >= 0x7F00))\n \n int\n-xstormy16_legitimate_address_p (mode, x, strict)\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n-     rtx x;\n-     int strict;\n+xstormy16_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t\trtx x, int strict)\n {\n   if (LEGITIMATE_ADDRESS_CONST_INT_P (x, 0))\n     return 1;\n@@ -632,8 +598,7 @@ xstormy16_legitimate_address_p (mode, x, strict)\n    address for DImode or DFmode, or if the address is a post-increment\n    or pre-decrement address.  */\n int\n-xstormy16_mode_dependent_address_p (x)\n-     rtx x;\n+xstormy16_mode_dependent_address_p (rtx x)\n {\n   if (LEGITIMATE_ADDRESS_CONST_INT_P (x, 0)\n       && ! LEGITIMATE_ADDRESS_CONST_INT_P (x, 6))\n@@ -662,9 +627,7 @@ xstormy16_mode_dependent_address_p (x)\n    represented by the constraint letter C.  If C is not defined as an extra\n    constraint, the value returned should be 0 regardless of VALUE.  */\n int\n-xstormy16_extra_constraint_p (x, c)\n-     rtx x;\n-     int c;\n+xstormy16_extra_constraint_p (rtx x, int c)\n {\n   switch (c)\n     {\n@@ -709,19 +672,15 @@ xstormy16_extra_constraint_p (x, c)\n }\n \n int\n-short_memory_operand (x, mode)\n-     rtx x;\n-     enum machine_mode mode;\n+short_memory_operand (rtx x, enum machine_mode mode)\n {\n   if (! memory_operand (x, mode))\n     return 0;\n   return (GET_CODE (XEXP (x, 0)) != PLUS);\n }\n \n int\n-nonimmediate_nonstack_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+nonimmediate_nonstack_operand (rtx op, enum machine_mode mode)\n {\n   /* 'Q' is for pushes, 'R' for pops.  */\n   return (nonimmediate_operand (op, mode) \n@@ -737,10 +696,7 @@ nonimmediate_nonstack_operand (op, mode)\n    */\n \n void \n-xstormy16_split_move (mode, dest, src)\n-     enum machine_mode mode;\n-     rtx dest;\n-     rtx src;\n+xstormy16_split_move (enum machine_mode mode, rtx dest, rtx src)\n {\n   int num_words = GET_MODE_BITSIZE (mode) / BITS_PER_WORD;\n   int direction, end, i;\n@@ -879,10 +835,7 @@ xstormy16_split_move (mode, dest, src)\n    mode MODE from SRC to DEST.  */\n \n void \n-xstormy16_expand_move (mode, dest, src)\n-     enum machine_mode mode;\n-     rtx dest;\n-     rtx src;\n+xstormy16_expand_move (enum machine_mode mode, rtx dest, rtx src)\n {\n   if ((GET_CODE (dest) == MEM) && (GET_CODE (XEXP (dest, 0)) == PRE_MODIFY))\n     {\n@@ -972,7 +925,7 @@ struct xstormy16_stack_layout\n \n /* Compute the stack layout.  */\n struct xstormy16_stack_layout \n-xstormy16_compute_stack_layout ()\n+xstormy16_compute_stack_layout (void)\n {\n   struct xstormy16_stack_layout layout;\n   int regno;\n@@ -1014,8 +967,7 @@ xstormy16_compute_stack_layout ()\n \n /* Determine how all the special registers get eliminated.  */\n int\n-xstormy16_initial_elimination_offset (from, to)\n-     int from, to;\n+xstormy16_initial_elimination_offset (int from, int to)\n {\n   struct xstormy16_stack_layout layout;\n   int result;\n@@ -1037,10 +989,7 @@ xstormy16_initial_elimination_offset (from, to)\n }\n \n static rtx\n-emit_addhi3_postreload (dest, src0, src1)\n-     rtx dest;\n-     rtx src0;\n-     rtx src1;\n+emit_addhi3_postreload (rtx dest, rtx src0, rtx src1)\n {\n   rtx set, clobber, insn;\n   \n@@ -1061,7 +1010,7 @@ emit_addhi3_postreload (dest, src0, src1)\n    Also any insns generated here should have RTX_FRAME_RELATED_P(insn) = 1\n    so that the debug info generation code can handle them properly.  */\n void\n-xstormy16_expand_prologue ()\n+xstormy16_expand_prologue (void)\n {\n   struct xstormy16_stack_layout layout;\n   int regno;\n@@ -1156,7 +1105,7 @@ xstormy16_expand_prologue ()\n \n /* Do we need an epilogue at all?  */\n int\n-direct_return ()\n+direct_return (void)\n {\n   return (reload_completed \n \t  && xstormy16_compute_stack_layout ().frame_size == 0);\n@@ -1171,7 +1120,7 @@ direct_return ()\n    such scheduling.  */\n \n void\n-xstormy16_expand_epilogue ()\n+xstormy16_expand_epilogue (void)\n {\n   struct xstormy16_stack_layout layout;\n   rtx mem_pop_rtx, insn;\n@@ -1228,8 +1177,7 @@ xstormy16_expand_epilogue ()\n }\n \n int\n-xstormy16_epilogue_uses (regno)\n-     int regno;\n+xstormy16_epilogue_uses (int regno)\n {\n   if (reload_completed && call_used_regs[regno])\n     {\n@@ -1240,7 +1188,7 @@ xstormy16_epilogue_uses (regno)\n }\n \n void\n-xstormy16_function_profiler ()\n+xstormy16_function_profiler (void)\n {\n   sorry (\"function_profiler support\");\n }\n@@ -1258,11 +1206,8 @@ xstormy16_function_profiler ()\n    it makes life easier for xstormy16_build_va_list if it does update\n    the word count.  */\n CUMULATIVE_ARGS\n-xstormy16_function_arg_advance (cum, mode, type, named)\n-     CUMULATIVE_ARGS cum;\n-     enum machine_mode mode;\n-     tree type;\n-     int named ATTRIBUTE_UNUSED;\n+xstormy16_function_arg_advance (CUMULATIVE_ARGS cum, enum machine_mode mode,\n+\t\t\t\ttree type, int named ATTRIBUTE_UNUSED)\n {\n   /* If an argument would otherwise be passed partially in registers,\n      and partially on the stack, the whole of it is passed on the\n@@ -1277,11 +1222,8 @@ xstormy16_function_arg_advance (cum, mode, type, named)\n }\n \n rtx\n-xstormy16_function_arg (cum, mode, type, named)\n-     CUMULATIVE_ARGS cum;\n-     enum machine_mode mode;\n-     tree type;\n-     int named ATTRIBUTE_UNUSED;\n+xstormy16_function_arg (CUMULATIVE_ARGS cum, enum machine_mode mode,\n+\t\t\ttree type, int named ATTRIBUTE_UNUSED)\n {\n   if (mode == VOIDmode)\n     return const0_rtx;\n@@ -1294,11 +1236,10 @@ xstormy16_function_arg (cum, mode, type, named)\n /* Do any needed setup for a variadic function.  CUM has not been updated\n    for the last named argument which has type TYPE and mode MODE.  */\n void\n-xstormy16_setup_incoming_varargs (cum, int_mode, type, pretend_size)\n-     CUMULATIVE_ARGS cum ATTRIBUTE_UNUSED;\n-     int             int_mode ATTRIBUTE_UNUSED;\n-     tree            type ATTRIBUTE_UNUSED;\n-     int *           pretend_size ATTRIBUTE_UNUSED;\n+xstormy16_setup_incoming_varargs (CUMULATIVE_ARGS cum ATTRIBUTE_UNUSED,\n+\t\t\t\t  int int_mode ATTRIBUTE_UNUSED,\n+\t\t\t\t  tree type ATTRIBUTE_UNUSED,\n+\t\t\t\t  int *pretend_size ATTRIBUTE_UNUSED)\n {\n }\n \n@@ -1311,7 +1252,7 @@ xstormy16_setup_incoming_varargs (cum, int_mode, type, pretend_size)\n    To keep the layout nice, the pointer is first in the structure.  */\n \n tree\n-xstormy16_build_va_list ()\n+xstormy16_build_va_list (void)\n {\n   tree f_1, f_2, record, type_decl;\n \n@@ -1341,9 +1282,7 @@ xstormy16_build_va_list ()\n    variable to initialize.  NEXTARG is the machine independent notion of the\n    'next' argument after the variable arguments.  */\n void\n-xstormy16_expand_builtin_va_start (valist, nextarg)\n-     tree valist;\n-     rtx nextarg ATTRIBUTE_UNUSED;\n+xstormy16_expand_builtin_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n {\n   tree f_base, f_count;\n   tree base, count;\n@@ -1376,9 +1315,7 @@ xstormy16_expand_builtin_va_start (valist, nextarg)\n    Note:  This algorithm is documented in stormy-abi.  */\n    \n rtx\n-xstormy16_expand_builtin_va_arg (valist, type)\n-     tree valist;\n-     tree type;\n+xstormy16_expand_builtin_va_arg (tree valist, tree type)\n {\n   tree f_base, f_count;\n   tree base, count;\n@@ -1466,10 +1403,7 @@ xstormy16_expand_builtin_va_arg (valist, type)\n    the nested function; STATIC_CHAIN is an RTX for the static chain\n    value that should be passed to the function when it is called.  */\n void\n-xstormy16_initialize_trampoline (addr, fnaddr, static_chain)\n-     rtx addr;\n-     rtx fnaddr;\n-     rtx static_chain;\n+xstormy16_initialize_trampoline (rtx addr, rtx fnaddr, rtx static_chain)\n {\n   rtx reg_addr = gen_reg_rtx (Pmode);\n   rtx temp = gen_reg_rtx (HImode);\n@@ -1514,9 +1448,7 @@ xstormy16_initialize_trampoline (addr, fnaddr, static_chain)\n    because these are returned in another way.  See `STRUCT_VALUE_REGNUM' and\n    related macros.  */\n rtx\n-xstormy16_function_value (valtype, func)\n-     tree valtype;\n-     tree func ATTRIBUTE_UNUSED;\n+xstormy16_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode;\n   mode = TYPE_MODE (valtype);\n@@ -1551,13 +1483,11 @@ xstormy16_function_value (valtype, func)\n    probably not.  */\n \n static void\n-xstormy16_asm_output_mi_thunk (file, thunk_fndecl, delta,\n-\t\t\t       vcall_offset, function)\n-     FILE *file;\n-     tree thunk_fndecl ATTRIBUTE_UNUSED;\n-     HOST_WIDE_INT delta;\n-     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED;\n-     tree function;\n+xstormy16_asm_output_mi_thunk (FILE *file,\n+\t\t\t       tree thunk_fndecl ATTRIBUTE_UNUSED,\n+\t\t\t       HOST_WIDE_INT delta,\n+\t\t\t       HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED,\n+\t\t\t       tree function)\n {\n   int regnum = FIRST_ARGUMENT_REGISTER;\n   \n@@ -1579,9 +1509,7 @@ xstormy16_asm_output_mi_thunk (file, thunk_fndecl, delta,\n #define TARGET_ASM_DESTRUCTOR xstormy16_asm_out_destructor\n \n static void\n-xstormy16_asm_out_destructor (symbol, priority)\n-     rtx symbol;\n-     int priority;\n+xstormy16_asm_out_destructor (rtx symbol, int priority)\n {\n   const char *section = \".dtors\";\n   char buf[16];\n@@ -1603,9 +1531,7 @@ xstormy16_asm_out_destructor (symbol, priority)\n }\n \n static void\n-xstormy16_asm_out_constructor (symbol, priority)\n-     rtx symbol;\n-     int priority;\n+xstormy16_asm_out_constructor (rtx symbol, int priority)\n {\n   const char *section = \".ctors\";\n   char buf[16];\n@@ -1628,9 +1554,7 @@ xstormy16_asm_out_constructor (symbol, priority)\n \f\n /* Print a memory address as an operand to reference that memory location.  */\n void\n-xstormy16_print_operand_address (file, address)\n-     FILE * file;\n-     rtx    address;\n+xstormy16_print_operand_address (FILE *file, rtx address)\n {\n   HOST_WIDE_INT offset;\n   int pre_dec, post_inc;\n@@ -1683,10 +1607,7 @@ xstormy16_print_operand_address (file, address)\n \n /* Print an operand to an assembler instruction.  */\n void\n-xstormy16_print_operand (file, x, code)\n-     FILE * file;\n-     rtx    x;\n-     int    code;\n+xstormy16_print_operand (FILE *file, rtx x, int code)\n {\n   switch (code)\n     {\n@@ -1783,12 +1704,8 @@ xstormy16_print_operand (file, x, code)\n */\n \n void \n-xstormy16_expand_casesi (index, lower_bound, range, table, default_label)\n-     rtx index;\n-     rtx lower_bound;\n-     rtx range;\n-     rtx table;\n-     rtx default_label;\n+xstormy16_expand_casesi (rtx index, rtx lower_bound, rtx range,\n+\t\t\t rtx table, rtx default_label)\n {\n   HOST_WIDE_INT range_i = INTVAL (range);\n   rtx int_index;\n@@ -1817,10 +1734,7 @@ xstormy16_expand_casesi (index, lower_bound, range, table, default_label)\n    all reach.  */\n \n void\n-xstormy16_output_addr_vec (file, label, table)\n-     FILE *file;\n-     rtx label ATTRIBUTE_UNUSED;\n-     rtx table;\n+xstormy16_output_addr_vec (FILE *file, rtx label ATTRIBUTE_UNUSED, rtx table)\n { \n   int vlen, idx;\n   \n@@ -1847,10 +1761,7 @@ xstormy16_output_addr_vec (file, label, table)\n */\n \n void \n-xstormy16_expand_call (retval, dest, counter)\n-     rtx retval;\n-     rtx dest;\n-     rtx counter;\n+xstormy16_expand_call (rtx retval, rtx dest, rtx counter)\n {\n   rtx call, temp;\n   enum machine_mode mode;\n@@ -1897,13 +1808,8 @@ xstormy16_expand_call (retval, dest, counter)\n    xstormy16_split_cbranch).  */\n \n void \n-xstormy16_expand_arith (mode, code, dest, src0, src1, carry)\n-     enum machine_mode mode;\n-     enum rtx_code code;\n-     rtx dest;\n-     rtx src0;\n-     rtx src1;\n-     rtx carry;\n+xstormy16_expand_arith (enum machine_mode mode, enum rtx_code code,\n+\t\t\trtx dest, rtx src0, rtx src1, rtx carry)\n {\n   int num_words = GET_MODE_BITSIZE (mode) / BITS_PER_WORD;\n   int i;\n@@ -1999,9 +1905,7 @@ xstormy16_expand_arith (mode, code, dest, src0, src1, carry)\n /* Return 1 if OP is a shift operator.  */\n \n int\n-shift_operator (op, mode)\n-     register rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+shift_operator (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   enum rtx_code code = GET_CODE (op);\n \n@@ -2017,12 +1921,8 @@ shift_operator (op, mode)\n    SIZE_R will be a CONST_INT, X will be a hard register.  */\n \n const char * \n-xstormy16_output_shift (mode, code, x, size_r, temp)\n-     enum machine_mode mode;\n-     enum rtx_code code;\n-     rtx x;\n-     rtx size_r;\n-     rtx temp;\n+xstormy16_output_shift (enum machine_mode mode, enum rtx_code code,\n+\t\t\trtx x, rtx size_r, rtx temp)\n {\n   HOST_WIDE_INT size;\n   const char *r0, *r1, *rt;\n@@ -2134,7 +2034,7 @@ xstormy16_output_shift (mode, code, x, size_r, temp)\n \n /* Return nonzero if the function is an interrupt function.  */\n int\n-xstormy16_interrupt_function_p ()\n+xstormy16_interrupt_function_p (void)\n {\n   tree attributes;\n   \n@@ -2150,7 +2050,9 @@ xstormy16_interrupt_function_p ()\n \n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE xstormy16_attribute_table\n-static tree xstormy16_handle_interrupt_attribute PARAMS ((tree *, tree, tree, int, bool *));\n+static tree xstormy16_handle_interrupt_attribute\n+  (tree *, tree, tree, int, bool *);\n+\n static const struct attribute_spec xstormy16_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n@@ -2161,12 +2063,10 @@ static const struct attribute_spec xstormy16_attribute_table[] =\n /* Handle an \"interrupt\" attribute;\n    arguments as in struct attribute_spec.handler.  */\n static tree\n-xstormy16_handle_interrupt_attribute (node, name, args, flags, no_add_attrs)\n-     tree *node;\n-     tree name;\n-     tree args ATTRIBUTE_UNUSED;\n-     int flags ATTRIBUTE_UNUSED;\n-     bool *no_add_attrs;\n+xstormy16_handle_interrupt_attribute (tree *node, tree name,\n+\t\t\t\t      tree args ATTRIBUTE_UNUSED,\n+\t\t\t\t      int flags ATTRIBUTE_UNUSED,\n+\t\t\t\t      bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) != FUNCTION_TYPE)\n     {\n@@ -2197,7 +2097,7 @@ static struct {\n };\n \n static void\n-xstormy16_init_builtins ()\n+xstormy16_init_builtins (void)\n {\n   tree args, ret_type, arg;\n   int i, a;\n@@ -2229,12 +2129,10 @@ xstormy16_init_builtins ()\n }\n \n static rtx\n-xstormy16_expand_builtin(exp, target, subtarget, mode, ignore)\n-     tree exp;\n-     rtx target;\n-     rtx subtarget ATTRIBUTE_UNUSED;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n-     int ignore ATTRIBUTE_UNUSED;\n+xstormy16_expand_builtin(tree exp, rtx target,\n+\t\t\t rtx subtarget ATTRIBUTE_UNUSED,\n+\t\t\t enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t int ignore ATTRIBUTE_UNUSED)\n {\n   rtx op[10], args[10], pat, copyto[10], retval = 0;\n   tree fndecl, argtree;"}]}