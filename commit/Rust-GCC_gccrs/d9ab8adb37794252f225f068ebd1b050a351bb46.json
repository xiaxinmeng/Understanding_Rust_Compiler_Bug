{"sha": "d9ab8adb37794252f225f068ebd1b050a351bb46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlhYjhhZGIzNzc5NDI1MmYyMjVmMDY4ZWJkMWIwNTBhMzUxYmI0Ng==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2000-12-14T07:20:37Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-12-14T07:20:37Z"}, "message": "ctype_base.h (ctype_base): Consistency with linux.\n\n\n2000-12-13  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* config/os/generic/bits/ctype_base.h (ctype_base): Consistency\n\twith linux.\n\t* config/os/generic/bits/ctype_inline.h (is): Same.\n\t* config/os/solaris/solaris2.5/bits/ctype_inline.h (is): Same.\n\t* config/os/solaris/solaris2.5/bits/ctype_base.h: Same.\n\t* config/os/solaris/solaris2.6/bits/ctype_inline.h (is): Same.\n\t* config/os/solaris/solaris2.6/bits/ctype_base.h: Same.\n\t* config/os/solaris/solaris2.7/bits/ctype_inline.h (is): Same.\n\t* config/os/solaris/solaris2.7/bits/ctype_base.h: Same.\n\t* config/os/irix/bits/ctype_inline.h (is): Same.\n\t* config/os/irix/bits/ctype_base.h (ctype_base): Same.\n\t* config/os/aix/bits/ctype_inline.h (is): Same.\n\t* config/os/aix/bits/ctype_base.h (ctype_base): Same.\n\t* config/os/bsd/netbsd/bits/ctype_inline.h (is): Same.\n\t* config/os/bsd/netbsd/bits/ctype_base.h (ctype_base): Same.\n\t* config/os/bsd/freebsd/bits/ctype_base.h (ctype_base): Same.\n\t* config/os/bsd/freebsd/bits/ctype_inline.h (is): Same.\n\t* config/os/newlib/bits/ctype_inline.h (is): Same.\n\t* config/os/newlib/bits/ctype_base.h (ctype_base): Same.\n\n\t* testsuite/22_locale/ctype_char_members.cc (test01): Add tests, fix.\n\t* testsuite/22_locale/ctype.cc (test01): Add tests for\n\tctype_base::mask bitmask features.\n\t* src/locale.cc: Define const static data for ctype_base.\n\t* config/os/gnu-linux/bits/ctype_base.h (ctype_base): Make\n\tctype_base::mask type an integer type, not an enum.\n\t* config/os/gnu-linux/bits/ctype_inline.h (is): Implement correctly.\n\t* include/bits/locale_facets.h: Tweaks.\n\n\t* include/bits/ios_base.h: Formatting tweaks.\n\n\t* docs/html/17_intro/C++STYLE: Add.\n\nFrom-SVN: r38243", "tree": {"sha": "dc9f61b3f86b17f8ce77a373cf2578b9d5c0469e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc9f61b3f86b17f8ce77a373cf2578b9d5c0469e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9ab8adb37794252f225f068ebd1b050a351bb46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ab8adb37794252f225f068ebd1b050a351bb46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9ab8adb37794252f225f068ebd1b050a351bb46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ab8adb37794252f225f068ebd1b050a351bb46/comments", "author": null, "committer": null, "parents": [{"sha": "413c5c85ca7279123136a308e51d0270857db518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413c5c85ca7279123136a308e51d0270857db518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/413c5c85ca7279123136a308e51d0270857db518"}], "stats": {"total": 680, "additions": 418, "deletions": 262}, "files": [{"sha": "440cbc40dcb587745715e43bfc72fc9d33105f32", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -1,3 +1,38 @@\n+2000-12-13  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* config/os/generic/bits/ctype_base.h (ctype_base): Consistency\n+\twith linux.\n+\t* config/os/generic/bits/ctype_inline.h (is): Same.\n+\t* config/os/solaris/solaris2.5/bits/ctype_inline.h (is): Same.\n+\t* config/os/solaris/solaris2.5/bits/ctype_base.h: Same.\n+\t* config/os/solaris/solaris2.6/bits/ctype_inline.h (is): Same.\n+\t* config/os/solaris/solaris2.6/bits/ctype_base.h: Same.\n+\t* config/os/solaris/solaris2.7/bits/ctype_inline.h (is): Same.\n+\t* config/os/solaris/solaris2.7/bits/ctype_base.h: Same.\n+\t* config/os/irix/bits/ctype_inline.h (is): Same.\n+\t* config/os/irix/bits/ctype_base.h (ctype_base): Same.\n+\t* config/os/aix/bits/ctype_inline.h (is): Same.\n+\t* config/os/aix/bits/ctype_base.h (ctype_base): Same.\n+\t* config/os/bsd/netbsd/bits/ctype_inline.h (is): Same.\n+\t* config/os/bsd/netbsd/bits/ctype_base.h (ctype_base): Same.\n+\t* config/os/bsd/freebsd/bits/ctype_base.h (ctype_base): Same.\n+\t* config/os/bsd/freebsd/bits/ctype_inline.h (is): Same.\n+\t* config/os/newlib/bits/ctype_inline.h (is): Same.\n+\t* config/os/newlib/bits/ctype_base.h (ctype_base): Same.\n+\n+\t* testsuite/22_locale/ctype_char_members.cc (test01): Add tests, fix.\n+\t* testsuite/22_locale/ctype.cc (test01): Add tests for\n+\tctype_base::mask bitmask features.\n+\t* src/locale.cc: Define const static data for ctype_base.\n+\t* config/os/gnu-linux/bits/ctype_base.h (ctype_base): Make\n+\tctype_base::mask type an integer type, not an enum.\n+\t* config/os/gnu-linux/bits/ctype_inline.h (is): Implement correctly.\n+\t* include/bits/locale_facets.h: Tweaks.\n+\t\n+\t* include/bits/ios_base.h: Formatting tweaks.\n+\n+\t* docs/html/17_intro/C++STYLE: Add.\n+\n 2000-12-12  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_CHECK_CTYPE_SUPPORT): Don't link ctype"}, {"sha": "166e5d063072a0c6cbc964dce18c8f1c3e9322f9", "filename": "libstdc++-v3/config/os/aix/bits/ctype_base.h", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fctype_base.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -35,28 +35,21 @@\n   \n   struct ctype_base\n   {\n-    typedef unsigned char \tmask;\n     // Non-standard typedefs.\n     typedef const int* \t\t__to_type;\n \n-    enum\n-    {\n-      space = _ISSPACE,\n-      print = _ISPRINT,\n-      cntrl = _ISCNTRL,\n-      upper = _ISUPPER,\n-      lower = _ISLOWER,\n-      alpha = _ISALPHA,\n-      digit = _ISDIGIT,\n-      punct = _ISPUNCT,\n-      xdigit = _ISXDIGIT,\n-      alnum = _ISALNUM,\n-      graph = _ISGRAPH\n-    };\n+    // NB: Offsets into ctype<char>::_M_table force a particular size\n+    // on the mask type. Because of this, we don't use an enum.\n+    typedef unsigned char \tmask;\n+    static const mask upper    \t= _ISUPPER;\n+    static const mask lower \t= _ISLOWER;\n+    static const mask alpha \t= _ISALPHA;\n+    static const mask digit \t= _ISDIGIT;\n+    static const mask xdigit \t= _ISXDIGIT;\n+    static const mask space \t= _ISSPACE;\n+    static const mask print \t= _ISPRINT;\n+    static const mask graph \t= _ISGRAPH;\n+    static const mask cntrl \t= _ISCNTRL;\n+    static const mask punct \t= _ISPUNCT;\n+    static const mask alnum \t= _ISALNUM;\n   };\n-\n-\n-\n-\n-\n-"}, {"sha": "c376f35672308f834d6c1307537c4c16702def9b", "filename": "libstdc++-v3/config/os/aix/bits/ctype_inline.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fctype_inline.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -43,8 +43,15 @@\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const throw()\n   {\n-    while (__low < __high)\n-      *__vec++ = __OBJ_DATA(__lc_ctype)->mask[*__low++];\n+    const int __bitmasksize = sizeof(mask) * 8;\n+    for (;__low < __high; ++__vec, ++__low)\n+      {\n+\tmask __m = __OBJ_DATA(__lc_ctype)->mask[*__low++];\n+\tint __i = 0; // Lowest bitmask.\n+\twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n+\t  ++__i;\n+\t*__vec = static_cast<mask>(1 << __i);\n+      }\n     return __high;\n   }\n "}, {"sha": "98b6265ddebb73c93127a8dcbdd305a53e588ae4", "filename": "libstdc++-v3/config/os/bsd/freebsd/bits/ctype_base.h", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fctype_base.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -37,40 +37,39 @@\n   \n   struct ctype_base\n   {\n-    typedef unsigned long \tmask;\n     // Non-standard typedefs.\n     typedef const int* \t\t__to_type;\n \n-    enum\n-    {\n+    // NB: Offsets into ctype<char>::_M_table force a particular size\n+    // on the mask type. Because of this, we don't use an enum.\n+    typedef unsigned long \tmask;\n #ifdef _CTYPE_S\n-      // FreeBSD 4.0 uses this style of define.\n-      space = _CTYPE_S,\n-      print = _CTYPE_R,\n-      cntrl = _CTYPE_C,\n-      upper = _CTYPE_U,\n-      lower = _CTYPE_L,\n-      alpha = _CTYPE_A,\n-      digit = _CTYPE_D,\n-      punct = _CTYPE_P,\n-      xdigit = _CTYPE_X,\n-      alnum = _CTYPE_A | _CTYPE_D,\n-      graph = _CTYPE_G\n+    // FreeBSD 4.0 uses this style of define.\n+    static const mask upper    \t= _CTYPE_U;\n+    static const mask lower \t= _CTYPE_L;\n+    static const mask alpha \t= _CTYPE_A;\n+    static const mask digit \t= _CTYPE_D;\n+    static const mask xdigit \t= _CTYPE_X;\n+    static const mask space \t= _CTYPE_S;\n+    static const mask print \t= _CTYPE_R;\n+    static const mask graph \t= _CTYPE_G;\n+    static const mask cntrl \t= _CTYPE_C;\n+    static const mask punct \t= _CTYPE_P;\n+    static const mask alnum \t= _CTYPE_A | _CTYPE_D;\n #else\n-      // Older versions, including Free BSD 3.4, use this style of define.\n-      space = _S,\n-      print = _R,\n-      cntrl = _C,\n-      upper = _U,\n-      lower = _L,\n-      alpha = _A,\n-      digit = _D,\n-      punct = _P,\n-      xdigit = _X,\n-      alnum = _A | _D,\n-      graph = _G\n+    // Older versions, including Free BSD 3.4, use this style of define.\n+    static const mask upper    \t= _U;\n+    static const mask lower \t= _L;\n+    static const mask alpha \t= _A;\n+    static const mask digit \t= _D;\n+    static const mask xdigit \t= _X;\n+    static const mask space \t= _S;\n+    static const mask print \t= _R;\n+    static const mask graph \t= _G;\n+    static const mask cntrl \t= _C;\n+    static const mask punct \t= _P;\n+    static const mask alnum \t= _A | _D;\n #endif\n-    };\n   };\n \n "}, {"sha": "64566c27bf1b67eff13da1b0e9d2e62e1335c2c6", "filename": "libstdc++-v3/config/os/bsd/freebsd/bits/ctype_inline.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fctype_inline.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -48,9 +48,15 @@\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const throw()\n   {\n-    // XXX\n-    while (__low < __high)\n-      *__vec++ = _M_table[(unsigned char)(*__low++)];\n+    const int __bitmasksize = sizeof(mask) * 8;\n+    for (;__low < __high; ++__vec, ++__low)\n+      {\n+\tmask __m = _M_table[*__low];\n+\tint __i = 0; // Lowest bitmask value, 1 == 1 << 0 means 0 \n+\twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n+\t  ++__i;\n+\t*__vec = static_cast<mask>(1 << __i);\n+      }\n     return __high;\n   }\n "}, {"sha": "ceea8acbc907ce7e18d6cf150bf1683b902c75ae", "filename": "libstdc++-v3/config/os/bsd/netbsd/bits/ctype_base.h", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fbits%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fbits%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fbits%2Fctype_base.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -38,26 +38,21 @@\n   \n   struct ctype_base\n   {\n-    typedef unsigned char \t\tmask;\n     // Non-standard typedefs.\n     typedef const unsigned char*\t__to_type;\n \n-    enum\n-    {\n-      // NetBSD \n-      space = _S,\n-      print = _P | _U | _L | _N | _B,\n-      cntrl = _C,\n-      upper = _U,\n-      lower = _L,\n-      alpha = _U | _L,\n-      digit = _N,\n-      punct = _P,\n-      xdigit = _N | _X,\n-      alnum = _U | _L | _N,\n-      graph = _P | _U | _L | _N,\n-    };\n+    // NB: Offsets into ctype<char>::_M_table force a particular size\n+    // on the mask type. Because of this, we don't use an enum.\n+    typedef unsigned char      \tmask;\n+    static const mask upper    \t= _U;\n+    static const mask lower \t= _L;\n+    static const mask alpha \t= _U | _L;\n+    static const mask digit \t= _N;\n+    static const mask xdigit \t= _N | _X;\n+    static const mask space \t= _S;\n+    static const mask print \t= _P | _U | _L | _N | _B;\n+    static const mask graph \t= _P | _U | _L | _N;\n+    static const mask cntrl \t= _C;\n+    static const mask punct \t= _P;\n+    static const mask alnum \t= _U | _L | _N;\n   };\n-\n-\n-"}, {"sha": "23a6d19bbb2600d182f06f7c7ac3bbf0190406b6", "filename": "libstdc++-v3/config/os/bsd/netbsd/bits/ctype_inline.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fbits%2Fctype_inline.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -43,8 +43,15 @@\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const throw()\n   {\n-    while (__low < __high)\n-      *__vec++ = _M_table[(unsigned char)(*__low++)];\n+    const int __bitmasksize = sizeof(mask) * 8;\n+    for (;__low < __high; ++__vec, ++__low)\n+      {\n+\tmask __m = _M_table[*__low];\n+\tint __i = 0; // Lowest bitmask.\n+\twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n+\t  ++__i;\n+\t*__vec = static_cast<mask>(1 << __i);\n+      }\n     return __high;\n   }\n "}, {"sha": "58976b6670a575e040103e8bfc3895a2700bf66b", "filename": "libstdc++-v3/config/os/generic/bits/ctype_base.h", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_base.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -35,24 +35,23 @@\n   \n   struct ctype_base\n   {\n-    typedef unsigned int \tmask;\n     // Non-standard typedefs.\n     typedef const int* \t\t__to_type;\n \n-    enum\n-    {\n-      space  = (1 << 0),     // Whitespace\n-      print  = (1 << 1),     // Printing\n-      cntrl  = (1 << 2),     // Control character\n-      upper  = (1 << 3),     // UPPERCASE\n-      lower  = (1 << 4),     // lowercase\n-      alpha  = (1 << 5),     // Alphabetic\n-      digit  = (1 << 6),     // Numeric\n-      punct  = (1 << 7),     // Punctuation\n-      xdigit = (1 << 8),     // Hexadecimal numeric\n-      alnum  = (1 << 9),     // Alphanumeric\n-      graph  = (1 << 10)     // Graphical\n-    };\n+    // NB: Offsets into ctype<char>::_M_table force a particular size\n+    // on the mask type. Because of this, we don't use an enum.\n+    typedef unsigned int \tmask;   \n+    static const mask upper    \t= 1 << 0;\n+    static const mask lower \t= 1 << 1;\n+    static const mask alpha \t= 1 << 2;\n+    static const mask digit \t= 1 << 3;\n+    static const mask xdigit \t= 1 << 4;\n+    static const mask space \t= 1 << 5;\n+    static const mask print \t= 1 << 6;\n+    static const mask graph \t= 1 << 7;\n+    static const mask cntrl \t= 1 << 8;\n+    static const mask punct \t= 1 << 9;\n+    static const mask alnum \t= 1 << 10;\n   };\n \n "}, {"sha": "74429a2a05943e36fe8da470ef00fe22da0e24f7", "filename": "libstdc++-v3/config/os/generic/bits/ctype_inline.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_inline.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -43,7 +43,7 @@\n   ctype<char>::\n   is(mask __m, char __c) const throw()\n   { \n-    bool __ret = false;\n+    bool __ret;\n     switch (__m)\n       {\n       case space:\n@@ -80,6 +80,7 @@\n \t__ret = isgraph(__c);\n \tbreak;\n       default:\n+\t__ret = false;\n \tbreak;\n       }\n     return __ret;\n@@ -89,8 +90,15 @@\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const throw()\n   {\n-    while (__low < __high)\n-      *__vec++ = _M_table[(unsigned char)(*__low++)];\n+    const int __bitmasksize = 11; // Highest bitmask in ctype_base == 10\n+    for (;__low < __high; ++__vec, ++__low)\n+      {\n+\tmask __m = _M_table[*__low];\n+\tint __i = 0; // Lowest bitmask in ctype_base == 0\n+\twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n+\t  ++__i;\n+\t*__vec = static_cast<mask>(1 << __i);\n+      }\n     return __high;\n   }\n "}, {"sha": "b546e0163c4a0dbdefcb3673c03b5e68133a17fd", "filename": "libstdc++-v3/config/os/gnu-linux/bits/ctype_base.h", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_base.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -50,29 +50,20 @@\n   struct ctype_base\n   {\n     // Non-standard typedefs.\n-    // XXX\n-    typedef unsigned short \tmask;   \n-    typedef unsigned short \t__table_type;   \n     typedef const int* \t\t__to_type;\n \n-    // XXX\n-    //    enum mask\n-    enum \n-    {\n-      space = _ISspace,\n-      print = _ISprint,\n-      cntrl = _IScntrl,\n-      upper = _ISupper,\n-      lower = _ISlower,\n-      alpha = _ISalpha,\n-      digit = _ISdigit,\n-      punct = _ISpunct,\n-      xdigit = _ISxdigit,\n-      alnum = _ISalnum,\n-      graph = _ISgraph\n-    };\n+    // NB: Offsets into ctype<char>::_M_table force a particular size\n+    // on the mask type. Because of this, we don't use an enum.\n+    typedef unsigned short \tmask;   \n+    static const mask upper    \t= _ISupper;\n+    static const mask lower \t= _ISlower;\n+    static const mask alpha \t= _ISalpha;\n+    static const mask digit \t= _ISdigit;\n+    static const mask xdigit \t= _ISxdigit;\n+    static const mask space \t= _ISspace;\n+    static const mask print \t= _ISprint;\n+    static const mask graph \t= _ISgraph;\n+    static const mask cntrl \t= _IScntrl;\n+    static const mask punct \t= _ISpunct;\n+    static const mask alnum \t= _ISalnum;\n   };\n-\n-\n-\n-"}, {"sha": "9fe7b16f7b6236792cbdc68829ee054e10cdaa49", "filename": "libstdc++-v3/config/os/gnu-linux/bits/ctype_inline.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_inline.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -37,22 +37,29 @@\n   bool\n   ctype<char>::\n   is(mask __m, char __c) const throw()\n-  { return _M_table[(unsigned char)(__c)] & __m; }\n+  { return _M_table[__c] & __m; }\n \n   const char*\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const throw()\n   {\n-    while (__low < __high)\n-      *__vec++ = _M_table[(unsigned char)(*__low++)];\n+    const int __bitmasksize = sizeof(mask) * 8;\n+    for (;__low < __high; ++__vec, ++__low)\n+      {\n+\tmask __m = _M_table[*__low];\n+\tint __i = 1; // Lowest bitmask on linux, 1 <= x <= 15\n+\twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n+\t  ++__i;\n+\t*__vec = static_cast<mask>(1 << __i);\n+      }\n     return __high;\n   }\n \n   const char*\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const throw()\n   {\n-    while (__low < __high && !(_M_table[(unsigned char)(*__low)] & __m))\n+    while (__low < __high && !(_M_table[*__low] & __m))\n       ++__low;\n     return __low;\n   }\n@@ -62,7 +69,7 @@\n   scan_not(mask __m, const char* __low, const char* __high) const throw()\n   {\n     while (__low < __high \n-\t   && (_M_table[(unsigned char)(*__low)] & __m) != 0)\n+\t   && (_M_table[*__low] & __m) != 0)\n       ++__low;\n     return __low;\n   }"}, {"sha": "0013c5b079aca6807d28ee63a61436ce283de675", "filename": "libstdc++-v3/config/os/gnu-linux/bits/ctype_noninline.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -39,11 +39,11 @@\n   using _C_legacy::__ctype_b;\n #endif\n \n-  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n-    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n-      _M_toupper(__ctype_toupper), _M_tolower(__ctype_tolower),\n-      _M_ctable(__ctype_b), _M_table(__table == 0 ? _M_ctable: __table) \n-    { }\n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) : \n+  __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(__ctype_toupper), _M_tolower(__ctype_tolower),\n+  _M_ctable(__ctype_b), _M_table(__table == 0 ? _M_ctable : __table) \n+  { }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "08557d158d75d6b0d6a7b500c8930ec6e454e988", "filename": "libstdc++-v3/config/os/irix/bits/ctype_base.h", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fbits%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fbits%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fbits%2Fctype_base.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -35,26 +35,21 @@\n   \n   struct ctype_base\n   {\n-    typedef unsigned int \tmask;\n     // Non-standard typedefs.\n     typedef int* \t\t__to_type;\n \n-    enum\n-    {\n-      space = _ISspace,\n-      print = _ISprint,\n-      cntrl = _IScntrl,\n-      upper = _ISupper,\n-      lower = _ISlower,\n-      alpha = _ISalpha,\n-      digit = _ISdigit,\n-      punct = _ISpunct,\n-      xdigit = _ISxdigit,\n-      alnum = _ISalnum,\n-      graph = _ISgraph\n-    };\n+    // NB: Offsets into ctype<char>::_M_table force a particular size\n+    // on the mask type. Because of this, we don't use an enum.\n+    typedef unsigned int \tmask;\n+    static const mask upper    \t= _ISupper;\n+    static const mask lower \t= _ISlower;\n+    static const mask alpha \t= _ISalpha;\n+    static const mask digit \t= _ISdigit;\n+    static const mask xdigit \t= _ISxdigit;\n+    static const mask space \t= _ISspace;\n+    static const mask print \t= _ISprint;\n+    static const mask graph \t= _ISgraph;\n+    static const mask cntrl \t= _IScntrl;\n+    static const mask punct \t= _ISpunct;\n+    static const mask alnum \t= _ISalnum;\n   };\n-\n-\n-\n-"}, {"sha": "4a76dc5c6bd51b9e300bcc3d0eac1997a1a51340", "filename": "libstdc++-v3/config/os/irix/bits/ctype_inline.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fbits%2Fctype_inline.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -37,22 +37,29 @@\n   bool\n   ctype<char>::\n   is(mask __m, char __c) const throw()\n-  { return (_M_table)[(unsigned char)(__c)] & __m; }\n+  { return (_M_table)[__c] & __m; }\n \n   const char*\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const throw()\n   {\n-    while (__low < __high)\n-      *__vec++ = (_M_table)[(unsigned char)(*__low++)];\n+    const int __bitmasksize = sizeof(mask) * 8;\n+    for (;__low < __high; ++__vec, ++__low)\n+      {\n+\tmask __m = _M_table[*__low];\n+\tint __i = 1; // Lowest bitmask on linux, 1 <= x <= 15\n+\twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n+\t  ++__i;\n+\t*__vec = static_cast<mask>(1 << __i);\n+      }\n     return __high;\n   }\n \n   const char*\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const throw()\n   {\n-    while (__low < __high && !((_M_table)[(unsigned char)(*__low)] & __m))\n+    while (__low < __high && !((_M_table)[*__low] & __m))\n       ++__low;\n     return __low;\n   }\n@@ -61,8 +68,7 @@\n   ctype<char>::\n   scan_not(mask __m, const char* __low, const char* __high) const throw()\n   {\n-    while (__low < __high \n-\t   && ((_M_table + 1)[(unsigned char)(*__low)] & __m) != 0)\n+    while (__low < __high && ((_M_table + 1)[*__low] & __m) != 0)\n       ++__low;\n     return __low;\n   }"}, {"sha": "973d41053b2a72572eea17e431a581164f5109ae", "filename": "libstdc++-v3/config/os/newlib/bits/ctype_base.h", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fctype_base.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -37,25 +37,21 @@\n   \n   struct ctype_base\n   {\n-    typedef char \t\tmask;\n     // Non-standard typedefs.\n     typedef const int* \t\t__to_type;\n \n-    enum\n-    {\n-      space = 010,\t\t\t\t// Whitespace\n-      print = 020 | 01 | 02 | 04 | 0200,\t// Printing\n-      cntrl = 040,\t\t\t\t// Control character\n-      upper = 01,\t\t\t\t// UPPERCASE\n-      lower = 02,\t\t\t\t// lowercase\n-      alpha = 01 | 02,\t\t\t\t// Alphabetic\n-      digit = 04,\t\t\t\t// Numeric\n-      punct = 020,\t\t\t\t// Punctuation\n-      xdigit = 0200,\t\t\t\t// Hexadecimal numeric\n-      alnum = 01 | 02 | 04,\t\t\t// Alphanumeric\n-      graph = 020 | 01 | 02 | 04 \t\t// Graphical\n-    };\n+    // NB: Offsets into ctype<char>::_M_table force a particular size\n+    // on the mask type. Because of this, we don't use an enum.\n+    typedef char \t\tmask;\n+    static const mask upper    \t= _U;\n+    static const mask lower \t= _L;\n+    static const mask alpha \t= _U | _L;\n+    static const mask digit \t= _N;\n+    static const mask xdigit \t= _X | _N;\n+    static const mask space \t= _S;\n+    static const mask print \t= _P | _U | _L | _N | _B;\n+    static const mask graph \t= _P | _U | _L | _N;\n+    static const mask cntrl \t= _C;\n+    static const mask punct \t= _P;\n+    static const mask alnum \t= _U | _L | _N;\n   };\n-\n-\n-"}, {"sha": "b2dd42b285474acf5f1fbc6ffd614d0e6508f39f", "filename": "libstdc++-v3/config/os/newlib/bits/ctype_inline.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fctype_inline.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -43,8 +43,15 @@\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const throw()\n   {\n-    while (__low < __high)\n-      *__vec++ = (_M_table + 1)[(unsigned char)(*__low++)];\n+    const int __bitmasksize = sizeof(mask) * 8;\n+    for (;__low < __high; ++__vec, ++__low)\n+      {\n+\tmask __m = _M_table[*__low];\n+\tint __i = 0; // Lowest bitmask with newlib, 1 << 0 == 01\n+\twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n+\t  ++__i;\n+\t*__vec = static_cast<mask>(1 << __i);\n+      }\n     return __high;\n   }\n "}, {"sha": "ad2babdb338cb8515d12d1a8dbc79719ef7f9b9f", "filename": "libstdc++-v3/config/os/solaris/solaris2.5/bits/ctype_base.h", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_base.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997-1999 Cygnus Solutions\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,22 +35,21 @@\n \n   struct ctype_base\n   {\n-    typedef unsigned char \tmask;\n     // Non-standard typedefs.\n     typedef const int* \t\t__to_type;\n \n-    enum\n-    {\n-      space = 010,\t\t\t\t// Whitespace\n-      print = 020 | 01 | 02 | 04 | 0200,\t// Printing\n-      cntrl = 040,\t\t\t\t// Control character\n-      upper = 01,\t\t\t\t// UPPERCASE\n-      lower = 02,\t\t\t\t// lowercase\n-      alpha = 01 | 02,\t\t\t\t// Alphabetic\n-      digit = 04,\t\t\t\t// Numeric\n-      punct = 020,\t\t\t\t// Punctuation\n-      xdigit = 0200,\t\t\t\t// Hexadecimal numeric\n-      alnum = 01 | 02 | 04,\t\t\t// Alphanumeric\n-      graph = 020 | 01 | 02 | 04 \t\t// Graphical\n-    };\n+    // NB: Offsets into ctype<char>::_M_table force a particular size\n+    // on the mask type. Because of this, we don't use an enum.\n+    typedef unsigned char \tmask;\n+    static const mask upper    \t= 01;\n+    static const mask lower \t= 02;\n+    static const mask alpha \t= 01 | 02;\n+    static const mask digit \t= 04;\n+    static const mask xdigit \t= 0200;\n+    static const mask space \t= 010;\n+    static const mask print \t= 020 | 01 | 02 | 04 | 0200;\n+    static const mask graph \t= 020 | 01 | 02 | 04;\n+    static const mask cntrl \t= 040;\n+    static const mask punct \t= 020;\n+    static const mask alnum \t= 01 | 02 | 04;\n   };"}, {"sha": "d6259a44eaca241c0a95745e16f9ae064081adac", "filename": "libstdc++-v3/config/os/solaris/solaris2.5/bits/ctype_inline.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_inline.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2000 Cygnus Solutions\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -43,8 +43,15 @@\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const throw()\n   {\n-    while (__low < __high)\n-      *__vec++ = (_M_table + 1)[(unsigned char)(*__low++)];\n+    const int __bitmasksize = sizeof(mask) * 8;\n+    for (;__low < __high; ++__vec, ++__low)\n+      {\n+\tmask __m = _M_table[*__low];\n+\tint __i = 0; // Lowest bitmask in ctype_base::mask.\n+\twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n+\t  ++__i;\n+\t*__vec = static_cast<mask>(1 << __i);\n+      }\n     return __high;\n   }\n "}, {"sha": "5f8d10aaf6f5c2129cc4f9a69e1568b6375c3609", "filename": "libstdc++-v3/config/os/solaris/solaris2.6/bits/ctype_base.h", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_base.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997-1999 Cygnus Solutions\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,27 +32,25 @@\n //\n   \n // Information as gleaned from /usr/include/ctype.h. Looks like this\n-// only works with solaris2.6 and solaris2.7, but not solaris2.5.1.\n+// only works with solaris2.6.\n \n   struct ctype_base\n   {\n-    typedef unsigned int \tmask;\n     // Non-standard typedefs.\n     typedef long* \t\t__to_type;\n \n-    enum\n-    {\n-      space = _ISSPACE,\n-      print = _ISPRINT,\n-      cntrl = _ISCNTRL,\n-      upper = _ISUPPER,\n-      lower = _ISLOWER,\n-      alpha = _ISALPHA,\n-      digit = _ISDIGIT,\n-      punct = _ISPUNCT,\n-      xdigit = _ISXDIGIT,\n-      alnum = _ISALNUM,\n-      graph = _ISGRAPH\n-    };\n+    // NB: Offsets into ctype<char>::_M_table force a particular size\n+    // on the mask type. Because of this, we don't use an enum.\n+    typedef unsigned int \tmask;   \n+    static const mask upper    \t= _ISUPPER;\n+    static const mask lower \t= _ISLOWER;\n+    static const mask alpha \t= _ISALPHA;\n+    static const mask digit \t= _ISDIGIT;\n+    static const mask xdigit \t= _ISXDIGIT;\n+    static const mask space \t= _ISSPACE;\n+    static const mask print \t= _ISPRINT;\n+    static const mask graph \t= _ISGRAPH;\n+    static const mask cntrl \t= _ISCNTRL;\n+    static const mask punct \t= _ISPUNCT;\n+    static const mask alnum \t= _ISALNUM;\n   };\n-"}, {"sha": "2ea6f69b97f10aab939c50488f4c962da72f0baf", "filename": "libstdc++-v3/config/os/solaris/solaris2.6/bits/ctype_inline.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_inline.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2000 Cygnus Solutions\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,22 +37,29 @@\n   bool\n   ctype<char>::\n   is(mask __m, char __c) const throw()\n-  { return _M_table[(unsigned char)(__c)] & __m; }\n+  { return _M_table[__c] & __m; }\n \n   const char*\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const throw()\n   {\n-    while (__low < __high)\n-      *__vec++ = _M_table[(unsigned char)(*__low++)];\n+    const int __bitmasksize = sizeof(mask) * 8;\n+    for (;__low < __high; ++__vec, ++__low)\n+      {\n+\tmask __m = _M_table[*__low];\n+\tint __i = 0; // Lowest bitmask value from ctype_base.\n+\twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n+\t  ++__i;\n+\t*__vec = static_cast<mask>(1 << __i);\n+      }\n     return __high;\n   }\n \n   const char*\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const throw()\n   {\n-    while (__low < __high && !(_M_table[(unsigned char)(*__low)] & __m))\n+    while (__low < __high && !(_M_table[*__low] & __m))\n       ++__low;\n     return __low;\n   }\n@@ -62,7 +69,7 @@\n   scan_not(mask __m, const char* __low, const char* __high) const throw()\n   {\n     while (__low < __high \n-\t   && (_M_table[(unsigned char)(*__low)] & __m) != 0)\n+\t   && (_M_table[*__low] & __m) != 0)\n       ++__low;\n     return __low;\n   }"}, {"sha": "9b8bddc8d37df01955e1da07a063ccd3a7f7cb90", "filename": "libstdc++-v3/config/os/solaris/solaris2.7/bits/ctype_base.h", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_base.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997-1999 Cygnus Solutions\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,27 +32,26 @@\n //\n   \n // Information as gleaned from /usr/include/ctype.h. Looks like this\n-// only works with solaris2.6 and solaris2.7, but not solaris2.5.1.\n+// only works with solaris2.7 and solaris2.8. Thanks for not changing\n+// things, sun engineers!\n \n   struct ctype_base\n   {\n-    typedef unsigned int \tmask;\n     // Non-standard typedefs.\n     typedef int* \t\t__to_type;\n \n-    enum\n-    {\n-      space = _ISSPACE,\n-      print = _ISPRINT,\n-      cntrl = _ISCNTRL,\n-      upper = _ISUPPER,\n-      lower = _ISLOWER,\n-      alpha = _ISALPHA,\n-      digit = _ISDIGIT,\n-      punct = _ISPUNCT,\n-      xdigit = _ISXDIGIT,\n-      alnum = _ISALNUM,\n-      graph = _ISGRAPH\n-    };\n+    // NB: Offsets into ctype<char>::_M_table force a particular size\n+    // on the mask type. Because of this, we don't use an enum.\n+    typedef unsigned int \tmask;   \n+    static const mask upper    \t= _ISUPPER;\n+    static const mask lower \t= _ISLOWER;\n+    static const mask alpha \t= _ISALPHA;\n+    static const mask digit \t= _ISDIGIT;\n+    static const mask xdigit \t= _ISXDIGIT;\n+    static const mask space \t= _ISSPACE;\n+    static const mask print \t= _ISPRINT;\n+    static const mask graph \t= _ISGRAPH;\n+    static const mask cntrl \t= _ISCNTRL;\n+    static const mask punct \t= _ISPUNCT;\n+    static const mask alnum \t= _ISALNUM;\n   };\n-"}, {"sha": "2ea6f69b97f10aab939c50488f4c962da72f0baf", "filename": "libstdc++-v3/config/os/solaris/solaris2.7/bits/ctype_inline.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_inline.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2000 Cygnus Solutions\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,22 +37,29 @@\n   bool\n   ctype<char>::\n   is(mask __m, char __c) const throw()\n-  { return _M_table[(unsigned char)(__c)] & __m; }\n+  { return _M_table[__c] & __m; }\n \n   const char*\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const throw()\n   {\n-    while (__low < __high)\n-      *__vec++ = _M_table[(unsigned char)(*__low++)];\n+    const int __bitmasksize = sizeof(mask) * 8;\n+    for (;__low < __high; ++__vec, ++__low)\n+      {\n+\tmask __m = _M_table[*__low];\n+\tint __i = 0; // Lowest bitmask value from ctype_base.\n+\twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n+\t  ++__i;\n+\t*__vec = static_cast<mask>(1 << __i);\n+      }\n     return __high;\n   }\n \n   const char*\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const throw()\n   {\n-    while (__low < __high && !(_M_table[(unsigned char)(*__low)] & __m))\n+    while (__low < __high && !(_M_table[*__low] & __m))\n       ++__low;\n     return __low;\n   }\n@@ -62,7 +69,7 @@\n   scan_not(mask __m, const char* __low, const char* __high) const throw()\n   {\n     while (__low < __high \n-\t   && (_M_table[(unsigned char)(*__low)] & __m) != 0)\n+\t   && (_M_table[*__low] & __m) != 0)\n       ++__low;\n     return __low;\n   }"}, {"sha": "6a85ac6e2cb690d566a2c8e38cc6be69783aa79f", "filename": "libstdc++-v3/docs/html/17_intro/C++STYLE", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FC%2B%2BSTYLE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FC%2B%2BSTYLE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FC%2B%2BSTYLE?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -146,7 +146,18 @@ Notable areas of divergence from what may be previous local practice\n   -NOT-\n   sync()\n \n-\tReason: ???\n+\tReason: Koenig lookup.\n+\n+11. constructor member intialization lists\n+\n+  should look like this:\n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) : \n+  __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(__ctype_toupper), _M_tolower(__ctype_tolower),\n+  _M_ctable(static_cast<const mask*>(__ctype_b), \n+  _M_table(__table == 0 ? _M_ctable : __table) \n+  { }\n+\n \n The library currently has a mixture of GNU-C and modern C++ coding\n styles.  The GNU C usages will be combed out gradually."}, {"sha": "2ffeaf68e0eb4e21451844de6884c4fc8382a64e", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -40,7 +40,7 @@ namespace std {\n   // as permitted (but not required) in the standard, in order to provide\n   // better type safety in iostream calls.  A side effect is that\n   // expressions involving them are no longer compile-time constants.\n-  enum _Ios_Fmtflags { _S_ios_fmtflags_end = 1<<16 };\n+  enum _Ios_Fmtflags { _M_ios_fmtflags_end = 1 << 16 };\n \n   inline _Ios_Fmtflags \n   operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)\n@@ -71,7 +71,7 @@ namespace std {\n   { return _Ios_Fmtflags(~static_cast<int>(__a)); }\n \n \n-  enum _Ios_Openmode { _S_ios_openmode_end = 1<<16 };\n+  enum _Ios_Openmode { _M_ios_openmode_end = 1 << 16 };\n \n   inline _Ios_Openmode \n   operator&(_Ios_Openmode __a, _Ios_Openmode __b)\n@@ -102,7 +102,7 @@ namespace std {\n   { return _Ios_Openmode(~static_cast<int>(__a)); }\n \n \n-  enum _Ios_Iostate { _S_ios_iostate_end = 1<<16 };\n+  enum _Ios_Iostate { _M_ios_iostate_end = 1 << 16 };\n \n   inline _Ios_Iostate \n   operator&(_Ios_Iostate __a, _Ios_Iostate __b)\n@@ -132,7 +132,7 @@ namespace std {\n   operator~(_Ios_Iostate __a)\n   { return _Ios_Iostate(~static_cast<int>(__a)); }\n \n-  enum _Ios_Seekdir { _S_ios_Seekdir_end = 1<<16 };\n+  enum _Ios_Seekdir { _M_ios_seekdir_end = 1 << 16 };\n \n   // 27.4.2  Class ios_base\n   class ios_base\n@@ -229,9 +229,8 @@ namespace std {\n     streamsize \t\t_M_width;\n     fmtflags \t\t_M_flags;\n \n-     // 27.4.2.6  Members for callbacks\n+    // 27.4.2.6  Members for callbacks\n     // 27.4.2.6  ios_base callbacks\n-\n     struct _Callback_list\n     {\n       // Data Members\n@@ -259,7 +258,7 @@ namespace std {\n     void \n     _M_dispose_callbacks(void);\n \n-   // 27.4.2.5  Members for iword/pword storage\n+    // 27.4.2.5  Members for iword/pword storage\n     struct _Words \n     { \n       void* \t_M_pword; \n@@ -282,11 +281,11 @@ namespace std {\n     _M_init();\n \n   public:\n+\n     // 27.4.2.1.6  Class ios_base::Init\n     // Used to initialize standard streams. In theory, g++ could use\n     // -finit-priority to order this stuff correctly without going\n     // through these machinations. \n-\n     class Init \n     {\n       friend class ios_base;\n@@ -362,7 +361,7 @@ namespace std {\n     static bool \n     sync_with_stdio(bool __sync = true);\n \n-   // Locales:\n+    // Locales:\n     locale \n     imbue(const locale& __loc);\n "}, {"sha": "c89bb213479298672ef58eda078f06602834c851", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -215,7 +215,6 @@ namespace std\n     public:\n       // Types:\n       typedef char \t       char_type;\n-      typedef ctype::mask      mask;\n \n     private:\n       // Data Members:\n@@ -248,12 +247,10 @@ namespace std\n       virtual \n       ~ctype();\n \n-      // XXX\n       const mask* \n       table() const throw()\n       { return _M_table; }\n \n-      // XXX\n       const mask* \n       classic_table() throw()\n       { return _M_ctable; }\n@@ -312,7 +309,6 @@ namespace std\n     public:\n       // Types:\n       typedef wchar_t \t       char_type;\n-      typedef ctype::mask      mask;\n       typedef wctype_t\t       __wmask_type;\n \n       // Data Members:"}, {"sha": "6c72c7f21b797d3e530718ba3cfe71f0073f0050", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -778,6 +778,19 @@ namespace std {\n   _Bad_use_facet::\n   ~_Bad_use_facet() throw() { }\n   \n+  // Definitions for static const data members of ctype_base.\n+  const ctype_base::mask ctype_base::space;\n+  const ctype_base::mask ctype_base::print;\n+  const ctype_base::mask ctype_base::cntrl;\n+  const ctype_base::mask ctype_base::upper;\n+  const ctype_base::mask ctype_base::lower;\n+  const ctype_base::mask ctype_base::alpha;\n+  const ctype_base::mask ctype_base::digit;\n+  const ctype_base::mask ctype_base::punct;\n+  const ctype_base::mask ctype_base::xdigit;\n+  const ctype_base::mask ctype_base::alnum;\n+  const ctype_base::mask ctype_base::graph;\n+\n   // Platform-specific initialization code for ctype tables.\n   #include <bits/ctype_noninline.h>\n "}, {"sha": "4e9c9fe05dd2941a2532a3a5061b8d97abd49c3c", "filename": "libstdc++-v3/testsuite/22_locale/ctype.cc", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype.cc?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -30,5 +30,29 @@ int mask ();\n class gnu_ctype: public std::ctype<unsigned char> { };\n gnu_ctype facet01;\n \n-\n-int main() { }\n+// 3: Sanity check ctype_base::mask bitmask requirements\n+void\n+test01()\n+{\n+  using namespace std;\n+\n+  ctype_base::mask m01;\n+  ctype_base::mask m02;\n+  \n+  m01 = ctype_base::space;\n+  m02 = ctype_base::xdigit;\n+\n+  m01 & m02;\n+  m01 | m02;\n+  m01 ^ m02;\n+  m01 ~ m02;\n+  m01 &= m02;\n+  m01 |= m02;\n+  m01 ^= m02;\n+}\n+\n+int main() \n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "d1a7783cfb5296a19ec8f0ea222993b1e44ed733", "filename": "libstdc++-v3/testsuite/22_locale/ctype_char_members.cc", "status": "modified", "additions": 53, "deletions": 8, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_char_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ab8adb37794252f225f068ebd1b050a351bb46/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_char_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_char_members.cc?ref=d9ab8adb37794252f225f068ebd1b050a351bb46", "patch": "@@ -56,6 +56,22 @@ void test01()\n   int len = std::char_traits<char>::length(strlit00);\n   char c_array[len + 1];\n \n+  // sanity check ctype_base::mask members\n+  int i01 = std::ctype_base::space;\n+  int i02 = std::ctype_base::upper;\n+  int i03 = std::ctype_base::lower;\n+  int i04 = std::ctype_base::digit;\n+  int i05 = std::ctype_base::punct;\n+  int i06 = std::ctype_base::alpha;\n+  int i07 = std::ctype_base::xdigit;\n+  int i08 = std::ctype_base::alnum;\n+  int i09 = std::ctype_base::graph;\n+  int i10 = std::ctype_base::print;\n+  int i11 = std::ctype_base::cntrl;\n+  int i12 = sizeof(std::ctype_base::mask);\n+  VERIFY ( i01 != i02 != i03 != i04 != i05 != i06 != i07 != i08 != i09 );\n+  VERIFY ( i01 != i10 != i11);\n+\n   // bool is(mask m, char c) const;\n   VERIFY( gctype.is(std::ctype_base::space, c30) );\n   VERIFY( gctype.is(std::ctype_base::upper, c00) );\n@@ -72,20 +88,49 @@ void test01()\n   VERIFY( gctype.is(std::ctype_base::graph, c20) );\n \n   // const char* is(const char* low, const char* high, mask* vec) const\n-  std::ctype_base::mask m01 = static_cast<std::ctype_base::mask>(0);\n-  std::ctype_base::mask m02 = std::ctype_base::digit;\n+  std::ctype_base::mask m00 = static_cast<std::ctype_base::mask>(0);\n+  std::ctype_base::mask m01[3];\n+  std::ctype_base::mask m02[13];\n   const char* cc0 = strlit00;\n   const char* cc1 = NULL;\n   const char* cc2 = NULL;\n-#if 1\n-  cc1 = gctype.is(cc0, cc0, &m01);\n+\n+  cc0 = strlit00;\n+  m01[0] = m00;\n+  m01[1] = m00;\n+  m01[2] = m00;\n+  cc1 = gctype.is(cc0, cc0, m01);\n   VERIFY( cc1 == strlit00 );\n-  cc2 = gctype.is(cc0, cc0 + 3, &m01);\n+  VERIFY( m01[0] == m00 );\n+  VERIFY( m01[1] == m00 );\n+  VERIFY( m01[2] == m00 );\n+\n+  cc0 = strlit00;\n+  m01[0] = m00;\n+  m01[1] = m00;\n+  m01[2] = m00;\n+  cc2 = gctype.is(cc0, cc0 + 3, m01);\n   VERIFY( cc2 == strlit00 + 3);\n-\n-  cc1 = gctype.is(cc0, cc0 + 13, &m02);\n+  VERIFY( m01[0] != m00 );\n+  VERIFY( m01[1] != m00 );\n+  VERIFY( m01[2] != m00 );\n+  VERIFY( gctype.is(m01[0], cc0[0]) );\n+  VERIFY( gctype.is(m01[1], cc0[1]) );\n+  VERIFY( gctype.is(m01[2], cc0[2]) );\n+\n+  cc0 = strlit00;\n+  cc1 = gctype.is(cc0, cc0 + 13, m02);\n   VERIFY( cc1 == strlit00 + 13);\n-#endif\n+  VERIFY( m02[6] != m00 );\n+  VERIFY( m02[7] != m00 );\n+  VERIFY( m02[8] != m00 );\n+  VERIFY( m02[8] != m02[6] != m02[7] );\n+  VERIFY( static_cast<bool>(m02[6] & std::ctype_base::alnum) );\n+  VERIFY( static_cast<bool>(m02[7] & std::ctype_base::punct) );\n+  VERIFY( static_cast<bool>(m02[8] & std::ctype_base::space) );\n+  VERIFY( gctype.is(m02[6], cc0[6]) );\n+  VERIFY( gctype.is(m02[7], cc0[7]) );\n+  VERIFY( gctype.is(m02[8], cc0[8]) );\n \n   // char toupper(char c) const\n   c100 = gctype.toupper(c10);"}]}