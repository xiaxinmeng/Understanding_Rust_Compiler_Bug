{"sha": "b973629e6111e77faa512754a4e4738a0c75ee83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk3MzYyOWU2MTExZTc3ZmFhNTEyNzU0YTRlNDczOGEwYzc1ZWU4Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:34:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:34:35Z"}, "message": "[multiple changes]\n\n2014-07-29  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_dbug.adb, g-expect.adb, sem_elab.adb: Minor typo fix.\n\n2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Return_Type): Reject a return type that\n\tis a limited view when the context is a package body, because\n\tthere is no subsequent place at which the non-limited view may\n\tbecome visible.\n\t(Process_Formals): Ditto.\n\t* sinfo.ads, par-ch3.adb: Minor reformatting.\n\nFrom-SVN: r213178", "tree": {"sha": "840d941918f91a26ae42475dc3dec94e441d2a08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/840d941918f91a26ae42475dc3dec94e441d2a08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b973629e6111e77faa512754a4e4738a0c75ee83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b973629e6111e77faa512754a4e4738a0c75ee83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b973629e6111e77faa512754a4e4738a0c75ee83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b973629e6111e77faa512754a4e4738a0c75ee83/comments", "author": null, "committer": null, "parents": [{"sha": "a7737c19cff44e5d8cb0863e6ff514bbf0999ad5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7737c19cff44e5d8cb0863e6ff514bbf0999ad5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7737c19cff44e5d8cb0863e6ff514bbf0999ad5"}], "stats": {"total": 73, "additions": 50, "deletions": 23}, "files": [{"sha": "5e5a38cd2ab1602ced6778109c15d5f4ec5316b5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b973629e6111e77faa512754a4e4738a0c75ee83/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b973629e6111e77faa512754a4e4738a0c75ee83/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b973629e6111e77faa512754a4e4738a0c75ee83", "patch": "@@ -1,3 +1,16 @@\n+2014-07-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_dbug.adb, g-expect.adb, sem_elab.adb: Minor typo fix.\n+\n+2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Return_Type): Reject a return type that\n+\tis a limited view when the context is a package body, because\n+\tthere is no subsequent place at which the non-limited view may\n+\tbecome visible.\n+\t(Process_Formals): Ditto.\n+\t* sinfo.ads, par-ch3.adb: Minor reformatting.\n+\n 2014-07-29  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* expect.c (__gnat_expect_poll): New parameter dead_process"}, {"sha": "d1439abbb48ba9756d1c030dc66ccde7c0071fc5", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b973629e6111e77faa512754a4e4738a0c75ee83/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b973629e6111e77faa512754a4e4738a0c75ee83/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=b973629e6111e77faa512754a4e4738a0c75ee83", "patch": "@@ -332,11 +332,8 @@ package body Exp_Dbug is\n          T : constant Entity_Id := Etype (N);\n       begin\n          Enable :=\n-           (Enable\n-               or else\n-            (Ekind (T) in Array_Kind\n-               and then\n-             Present (Packed_Array_Impl_Type (T))));\n+           Enable or else (Ekind (T) in Array_Kind\n+                            and then Present (Packed_Array_Impl_Type (T)));\n       end Enable_If_Packed_Array;\n \n       ----------------------\n@@ -397,19 +394,20 @@ package body Exp_Dbug is\n                exit;\n \n             when N_Selected_Component =>\n-               Enable :=\n-                 Enable or else Is_Packed (Etype (Prefix (Ren)));\n+               Enable := Enable or else Is_Packed (Etype (Prefix (Ren)));\n                Prepend_String_To_Buffer\n                  (Get_Name_String (Chars (Selector_Name (Ren))));\n                Prepend_String_To_Buffer (\"XR\");\n                Ren := Prefix (Ren);\n \n             when N_Indexed_Component =>\n                declare\n-                  X : Node_Id := Last (Expressions (Ren));\n+                  X : Node_Id;\n \n                begin\n                   Enable_If_Packed_Array (Prefix (Ren));\n+\n+                  X := Last (Expressions (Ren));\n                   while Present (X) loop\n                      if not Output_Subscript (X, \"XS\") then\n                         Set_Materialize_Entity (Ent);\n@@ -423,7 +421,6 @@ package body Exp_Dbug is\n                Ren := Prefix (Ren);\n \n             when N_Slice =>\n-\n                Enable_If_Packed_Array (Prefix (Ren));\n                Typ := Etype (First_Index (Etype (Nam)));\n \n@@ -451,7 +448,7 @@ package body Exp_Dbug is\n          end case;\n       end loop;\n \n-      --  If we found no reason here to emit an encoding, stop now.\n+      --  If we found no reason here to emit an encoding, stop now\n \n       if not Enable then\n          Set_Materialize_Entity (Ent);"}, {"sha": "af2f0dc1bba8ad8755bd2703eb7f1ddb7798af85", "filename": "gcc/ada/g-expect.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b973629e6111e77faa512754a4e4738a0c75ee83/gcc%2Fada%2Fg-expect.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b973629e6111e77faa512754a4e4738a0c75ee83/gcc%2Fada%2Fg-expect.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect.adb?ref=b973629e6111e77faa512754a4e4738a0c75ee83", "patch": "@@ -110,10 +110,9 @@ package body GNAT.Expect is\n       Dead_Process : access Integer;\n       Is_Set       : System.Address) return Integer;\n    pragma Import (C, Poll, \"__gnat_expect_poll\");\n-   --  Check whether there is any data waiting on the file descriptors\n-   --  Fds, and wait if there is none, at most Timeout milliseconds\n-   --  Returns -1 in case of error, 0 if the timeout expired before\n-   --  data became available.\n+   --  Check whether there is any data waiting on the file descriptors Fds, and\n+   --  wait if there is none, at most Timeout milliseconds Returns -1 in case\n+   --  of error, 0 if the timeout expired before data became available.\n    --\n    --  Is_Set is an array of the same size as FDs and elements are set to 1 if\n    --  data is available for the corresponding File Descriptor, 0 otherwise."}, {"sha": "a5f5c804ad87130e78d35d78f7b26f378baba5aa", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b973629e6111e77faa512754a4e4738a0c75ee83/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b973629e6111e77faa512754a4e4738a0c75ee83/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=b973629e6111e77faa512754a4e4738a0c75ee83", "patch": "@@ -3967,10 +3967,12 @@ package body Ch3 is\n       if not Header_Already_Parsed then\n \n          --  NOT NULL ACCESS .. is a common form of access definition.\n-         --  ACCESS NON NULL ..  is certainly rare, but syntactically legal.\n+         --  ACCESS NOT NULL ..  is certainly rare, but syntactically legal.\n          --  NOT NULL ACCESS NOT NULL .. is rarer yet, and also legal.\n          --  The last two cases are only meaningful if the following subtype\n-         --  indication denotes an access type (semantic check).\n+         --  indication denotes an access type (semantic check). The flag\n+         --  Not_Null_Subtype indicates that this second null exclusion is\n+         --  present in the access type definition.\n \n          Not_Null_Present := P_Null_Exclusion;     --  Ada 2005 (AI-231)\n          Scan; -- past ACCESS"}, {"sha": "4d84a6dd9a7b976520d56ed3b23984b5981d5a57", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b973629e6111e77faa512754a4e4738a0c75ee83/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b973629e6111e77faa512754a4e4738a0c75ee83/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=b973629e6111e77faa512754a4e4738a0c75ee83", "patch": "@@ -1951,9 +1951,17 @@ package body Sem_Ch6 is\n             then\n                --  AI05-0151: Tagged incomplete types are allowed in all formal\n                --  parts. Untagged incomplete types are not allowed in bodies.\n+               --  As a consequence, limited views cannot appear in a basic\n+               --  declaration that is itself within a body, because there is\n+               --  no point at which the non-limited view will become visible.\n \n                if Ada_Version >= Ada_2012 then\n-                  if Is_Tagged_Type (Typ) then\n+                  if From_Limited_With (Typ) and then In_Package_Body then\n+                     Error_Msg_NE\n+                       (\"invalid use of incomplete type&\",\n+                          Result_Definition (N), Typ);\n+\n+                  elsif Is_Tagged_Type (Typ) then\n                      null;\n \n                   elsif Nkind (Parent (N)) = N_Subprogram_Body\n@@ -11328,10 +11336,10 @@ package body Sem_Ch6 is\n                --  dependents of the type.\n \n                if Is_Tagged_Type (Formal_Type)\n-                 or else Ada_Version >= Ada_2012\n+                 or else (Ada_Version >= Ada_2012\n+                           and then not From_Limited_With (Formal_Type))\n                then\n                   if Ekind (Scope (Current_Scope)) = E_Package\n-                    and then not From_Limited_With (Formal_Type)\n                     and then not Is_Generic_Type (Formal_Type)\n                     and then not Is_Class_Wide_Type (Formal_Type)\n                   then\n@@ -11363,13 +11371,19 @@ package body Sem_Ch6 is\n                then\n                   --  AI05-0151: Tagged incomplete types are allowed in all\n                   --  formal parts. Untagged incomplete types are not allowed\n-                  --  in bodies.\n+                  --  in bodies. Limited views of either kind are not allowed\n+                  --  if there is no place at which the non-limited view can\n+                  --  become available.\n \n                   if Ada_Version >= Ada_2012 then\n-                     if Is_Tagged_Type (Formal_Type) then\n+                     if Is_Tagged_Type (Formal_Type)\n+                       and then (not From_Limited_With (Formal_Type)\n+                                  or else not In_Package_Body)\n+                     then\n                         null;\n \n                      elsif Nkind_In (Parent (Parent (T)), N_Accept_Statement,\n+                                                          N_Accept_Alternative,\n                                                           N_Entry_Body,\n                                                           N_Subprogram_Body)\n                      then"}, {"sha": "01c644ef10afe206e51502f87723d76ec8f9cde8", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b973629e6111e77faa512754a4e4738a0c75ee83/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b973629e6111e77faa512754a4e4738a0c75ee83/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=b973629e6111e77faa512754a4e4738a0c75ee83", "patch": "@@ -271,7 +271,7 @@ package body Sem_Elab is\n    --  are all continuation messages. The argument is the call node at which\n    --  the messages are to be placed. When Check_Elab_Flag is set, calls are\n    --  enumerated only when flag Elab_Warning is set for the dynamic case or\n-   --  when flag Elab_Info_Messages is set for the statis case.\n+   --  when flag Elab_Info_Messages is set for the static case.\n \n    function Same_Elaboration_Scope (Scop1, Scop2 : Entity_Id) return Boolean;\n    --  Given two scopes, determine whether they are the same scope from an"}, {"sha": "13d1d599bb877b7985493ac1bf9498ab99eb0f15", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b973629e6111e77faa512754a4e4738a0c75ee83/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b973629e6111e77faa512754a4e4738a0c75ee83/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=b973629e6111e77faa512754a4e4738a0c75ee83", "patch": "@@ -1851,7 +1851,9 @@ package Sinfo is\n    --    to assist in detecting this illegal use of Unrestricted_Access.\n \n    --  Null_Excluding_Subtype (Flag16)\n-   --    ??? needs documentation ???\n+   --   Present in N_Access_To_Object_Definition. Indicates that the subtype\n+   --   indication carries a null-exclusion indicator, which is distinct from\n+   --   the null-exclusion indicator that may precede the access keyword.\n \n    --  Original_Discriminant (Node2-Sem)\n    --    Present in identifiers. Used in references to discriminants that"}]}