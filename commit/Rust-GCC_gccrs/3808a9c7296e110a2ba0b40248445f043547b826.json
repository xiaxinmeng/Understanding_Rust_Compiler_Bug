{"sha": "3808a9c7296e110a2ba0b40248445f043547b826", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgwOGE5YzcyOTZlMTEwYTJiYTBiNDAyNDg0NDVmMDQzNTQ3YjgyNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:48:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:48:13Z"}, "message": "[multiple changes]\n\n2014-07-29  Doug Rupp  <rupp@adacore.com>\n\n\t* sigtramp-armvxw.c: Enhance to handle RTP trampolining.\n\t* init.c: Remove guard on sigtramp for ARM VxWorks RTP.\n\n2014-07-29  Vincent Celier  <celier@adacore.com>\n\n\t* switch-c.adb (Scan_Front_End_Switches): Do not fail when two\n\truntime directorie specified with two switches --RTS= designate\n\tthe same directory, even when there are no literarily the same.\n\n2014-07-29  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Minor documentation clarification.\n\t* switch-c.adb: Minor reformatting.\n\nFrom-SVN: r213187", "tree": {"sha": "95f9e15c4186644e62210590592f754ec3248b41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95f9e15c4186644e62210590592f754ec3248b41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3808a9c7296e110a2ba0b40248445f043547b826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3808a9c7296e110a2ba0b40248445f043547b826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3808a9c7296e110a2ba0b40248445f043547b826", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3808a9c7296e110a2ba0b40248445f043547b826/comments", "author": null, "committer": null, "parents": [{"sha": "24d14b918a541a2903c940dd26ad1d16a2d1d987", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d14b918a541a2903c940dd26ad1d16a2d1d987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24d14b918a541a2903c940dd26ad1d16a2d1d987"}], "stats": {"total": 156, "additions": 102, "deletions": 54}, "files": [{"sha": "8ce008efa956bffb5c34771c6f92a0fbd1791c6b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3808a9c7296e110a2ba0b40248445f043547b826/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3808a9c7296e110a2ba0b40248445f043547b826/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3808a9c7296e110a2ba0b40248445f043547b826", "patch": "@@ -1,3 +1,19 @@\n+2014-07-29  Doug Rupp  <rupp@adacore.com>\n+\n+\t* sigtramp-armvxw.c: Enhance to handle RTP trampolining.\n+\t* init.c: Remove guard on sigtramp for ARM VxWorks RTP.\n+\n+2014-07-29  Vincent Celier  <celier@adacore.com>\n+\n+\t* switch-c.adb (Scan_Front_End_Switches): Do not fail when two\n+\truntime directorie specified with two switches --RTS= designate\n+\tthe same directory, even when there are no literarily the same.\n+\n+2014-07-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Minor documentation clarification.\n+\t* switch-c.adb: Minor reformatting.\n+\n 2014-07-29  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_prag.adb (Analyze_Pragma, case Allow_Integer_Address):"}, {"sha": "169233834df112331a810889ce22b8ef1b46d49e", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3808a9c7296e110a2ba0b40248445f043547b826/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3808a9c7296e110a2ba0b40248445f043547b826/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=3808a9c7296e110a2ba0b40248445f043547b826", "patch": "@@ -8567,8 +8567,8 @@ objects with pragma Initialize_Scalars.\n The @var{xxx} ^string specified with the switch^option^ may be either\n @itemize @bullet\n @item ``@option{^in^INVALID^}'' requesting an invalid value where possible\n-@item ``@option{^lo^LOW^}'' for the lowest possible value\n-@item ``@option{^hi^HIGH^}'' for the highest possible value\n+@item ``@option{^lo^LOW^}'' for the lowest possible value (all 0 bits)\n+@item ``@option{^hi^HIGH^}'' for the highest possible value (all 1 bits)\n @item ``@option{@var{xx}}'' for a value consisting of repeated bytes with the\n value @code{16#@var{xx}#} (i.e., @var{xx} is a string of two hexadecimal digits).\n @end itemize"}, {"sha": "41156cecd1eddf5b247364a54abfea037864ac12", "filename": "gcc/ada/init.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3808a9c7296e110a2ba0b40248445f043547b826/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3808a9c7296e110a2ba0b40248445f043547b826/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=3808a9c7296e110a2ba0b40248445f043547b826", "patch": "@@ -1703,7 +1703,9 @@ __gnat_install_handler ()\n #include <signal.h>\n #include <taskLib.h>\n \n-#ifndef __RTP__\n+#ifdef __RTP__\n+#include <base/b_ucontext_t.h>\n+#else\n #include <intLib.h>\n #include <iv.h>\n #endif\n@@ -1911,7 +1913,7 @@ __gnat_error_handler (int sig, siginfo_t *si, void *sc)\n   sigdelset (&mask, sig);\n   sigprocmask (SIG_SETMASK, &mask, NULL);\n \n-#if (defined (__ARMEL__) || defined (__PPC__)) && defined(_WRS_KERNEL)\n+#if defined (__ARMEL__) || (defined (__PPC__) && defined (_WRS_KERNEL))\n   /* On PowerPC, kernel mode, we process signals through a Call Frame Info\n      trampoline, voiding the need for myriads of fallback_frame_state\n      variants in the ZCX runtime.  We have no simple way to distinguish ZCX"}, {"sha": "0cef508908e550932c250ee812443a6c24b41491", "filename": "gcc/ada/sigtramp-armvxw.c", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3808a9c7296e110a2ba0b40248445f043547b826/gcc%2Fada%2Fsigtramp-armvxw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3808a9c7296e110a2ba0b40248445f043547b826/gcc%2Fada%2Fsigtramp-armvxw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp-armvxw.c?ref=3808a9c7296e110a2ba0b40248445f043547b826", "patch": "@@ -38,7 +38,12 @@\n \n #include <vxWorks.h>\n #include <arch/../regs.h>\n+#ifndef __RTP__\n #include <sigLib.h>\n+#else\n+#include <signal.h>\n+#include <base/b_ucontext_t.h>\n+#endif\n \n /* ----------------------\n    -- General comments --\n@@ -47,29 +52,29 @@\n    Stubs are generated from toplevel asms and .cfi directives, much simpler\n    to use and check for correctness than manual encodings of CFI byte\n    sequences.  The general idea is to establish CFA as sigcontext->sc_pregs\n-   and state where to find the registers as offsets from there.\n+   (for DKM) and mcontext (for RTP) and state where to find the registers as\n+   offsets from there.\n \n    As of today, we support a stub providing CFI info for common\n    registers (GPRs, LR, ...). We might need variants with support for floating\n    point or altivec registers as well at some point.\n \n-   Checking which variant should apply and getting at sc_pregs is simpler\n-   to express in C (we can't use offsetof in toplevel asms and hardcoding\n-   constants is not workable with the flurry of VxWorks variants), so this\n-   is the choice for our toplevel interface.\n+   Checking which variant should apply and getting at sc_pregs / mcontext\n+   is simpler to express in C (we can't use offsetof in toplevel asms and\n+   hardcoding constants is not workable with the flurry of VxWorks variants),\n+   so this is the choice for our toplevel interface.\n \n    Note that the registers we \"restore\" here are those to which we have\n    direct access through the system sigcontext structure, which includes\n    only a partial set of the non-volatiles ABI-wise.  */\n \n-/* -----------------------------------------\n-   -- Protypes for our internal asm stubs --\n-   -----------------------------------------\n+/* -------------------------------------------\n+   -- Prototypes for our internal asm stubs --\n+   -------------------------------------------\n \n-   SC_PREGS is always expected to be SIGCONTEXT->sc_pregs.  Eventhough our\n-   symbols will remain local, the prototype claims \"extern\" and not\n-   \"static\" to prevent compiler complaints about a symbol used but never\n-   defined.  */\n+   Eventhough our symbols will remain local, the prototype claims \"extern\"\n+   and not \"static\" to prevent compiler complaints about a symbol used but\n+   never defined.  */\n \n /* sigtramp stub providing CFI info for common registers.  */\n \n@@ -91,9 +96,17 @@ void __gnat_sigtramp (int signo, void *si, void *sc,\n void __gnat_sigtramp (int signo, void *si, void *sc,\n \t\t      __sigtramphandler_t * handler)\n {\n+#ifdef __RTP__\n+  mcontext_t *mcontext = &((ucontext_t *) sc)->uc_mcontext;\n+\n+  /* Pass MCONTEXT in the fifth position so that the assembly code can find\n+     it at the same stack location or in the same register as SC_PREGS.  */\n+  __gnat_sigtramp_common (signo, si, mcontext, handler, mcontext);\n+#else\n   struct sigcontext * sctx = (struct sigcontext *) sc;\n \n   __gnat_sigtramp_common (signo, si, sctx, handler, sctx->sc_pregs);\n+#endif\n }\n \n \n@@ -199,7 +212,7 @@ TCR(\"# Allocate frame and save the non-volatile\") \\\n TCR(\"# registers we're going to modify\") \\\n TCR(\"mov\tip, sp\") \\\n TCR(\"stmfd\tsp!, {r\"S(CFA_REG)\", fp, ip, lr, pc}\") \\\n-TCR(\"# Setup CFA_REG = sc_pregs, that we'll retrieve as our CFA value\") \\\n+TCR(\"# Setup CFA_REG = context, which we'll retrieve as our CFA value\") \\\n TCR(\"ldr\tr\"S(CFA_REG)\", [ip]\") \\\n TCR(\"\")                 \\\n TCR(\"# Call the real handler. The signo, siginfo and sigcontext\") \\"}, {"sha": "76b4c5d8001e643ddcca8d7bcab90bb3955b46c4", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 54, "deletions": 37, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3808a9c7296e110a2ba0b40248445f043547b826/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3808a9c7296e110a2ba0b40248445f043547b826/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=3808a9c7296e110a2ba0b40248445f043547b826", "patch": "@@ -38,6 +38,7 @@ with Warnsw;   use Warnsw;\n \n with Ada.Unchecked_Deallocation;\n with System.WCh_Con; use System.WCh_Con;\n+with System.OS_Lib;\n \n package body Switch.C is\n \n@@ -207,54 +208,70 @@ package body Switch.C is\n               or else Switch_Chars (Ptr + 3) /= '='\n             then\n                Osint.Fail (\"missing path for --RTS\");\n+\n             else\n-               --  Check that this is the first time --RTS is specified or if\n-               --  it is not the first time, the same path has been specified.\n+               declare\n+                  Runtime_Dir : String_Access;\n \n-               if RTS_Specified = null then\n-                  RTS_Specified := new String'(Switch_Chars (Ptr + 4 .. Max));\n+               begin\n+                  if System.OS_Lib.Is_Absolute_Path\n+                       (Switch_Chars (Ptr + 4 .. Max))\n+                  then\n+                     Runtime_Dir :=\n+                       new String'\n+                         (System.OS_Lib.Normalize_Pathname\n+                            (Switch_Chars (Ptr + 4 .. Max)));\n \n-               elsif\n-                 RTS_Specified.all /= Switch_Chars (Ptr + 4 .. Max)\n-               then\n-                  Osint.Fail (\"--RTS cannot be specified multiple times\");\n-               end if;\n+                  else\n+                     Runtime_Dir :=\n+                       new String'(Switch_Chars (Ptr + 4 .. Max));\n+                  end if;\n \n-               --  Valid --RTS switch\n+                  --  Check that this is the first time --RTS is specified\n+                  --  or if it is not the first time, the same path has been\n+                  --  specified.\n \n-               Opt.No_Stdinc := True;\n-               Opt.RTS_Switch := True;\n+                  if RTS_Specified = null then\n+                     RTS_Specified := Runtime_Dir;\n \n-               RTS_Src_Path_Name :=\n-                 Get_RTS_Search_Dir\n-                   (Switch_Chars (Ptr + 4 .. Max), Include);\n+                  elsif  RTS_Specified.all /= Runtime_Dir.all then\n+                     Osint.Fail (\"--RTS cannot be specified multiple times\");\n+                  end if;\n \n-               RTS_Lib_Path_Name :=\n-                 Get_RTS_Search_Dir\n-                   (Switch_Chars (Ptr + 4 .. Max), Objects);\n+                  --  Valid --RTS switch\n \n-               if RTS_Src_Path_Name /= null\n-                 and then RTS_Lib_Path_Name /= null\n-               then\n-                  --  Store the -fRTS switch (Note: Store_Compilation_Switch\n-                  --  changes -fRTS back into --RTS for the actual output).\n+                  Opt.No_Stdinc := True;\n+                  Opt.RTS_Switch := True;\n \n-                  Store_Compilation_Switch (Switch_Chars);\n+                  RTS_Src_Path_Name :=\n+                    Get_RTS_Search_Dir (Runtime_Dir.all, Include);\n \n-               elsif RTS_Src_Path_Name = null\n-                 and then RTS_Lib_Path_Name = null\n-               then\n-                  Osint.Fail (\"RTS path not valid: missing \" &\n-                              \"adainclude and adalib directories\");\n+                  RTS_Lib_Path_Name :=\n+                    Get_RTS_Search_Dir (Runtime_Dir.all, Objects);\n \n-               elsif RTS_Src_Path_Name = null then\n-                  Osint.Fail (\"RTS path not valid: missing \" &\n-                              \"adainclude directory\");\n+                  if RTS_Src_Path_Name /= null\n+                    and then RTS_Lib_Path_Name /= null\n+                  then\n+                     --  Store the -fRTS switch (Note: Store_Compilation_Switch\n+                     --  changes -fRTS back into --RTS for the actual output).\n \n-               elsif RTS_Lib_Path_Name = null then\n-                  Osint.Fail (\"RTS path not valid: missing \" &\n-                              \"adalib directory\");\n-               end if;\n+                     Store_Compilation_Switch (Switch_Chars);\n+\n+                  elsif RTS_Src_Path_Name = null\n+                    and then RTS_Lib_Path_Name = null\n+                  then\n+                     Osint.Fail (\"RTS path not valid: missing \"\n+                                 & \"adainclude and adalib directories\");\n+\n+                  elsif RTS_Src_Path_Name = null then\n+                     Osint.Fail (\"RTS path not valid: missing \"\n+                                 & \"adainclude directory\");\n+\n+                  elsif RTS_Lib_Path_Name = null then\n+                     Osint.Fail (\"RTS path not valid: missing \"\n+                                 & \"adalib directory\");\n+                  end if;\n+               end;\n             end if;\n \n             --  There are no other switches not starting with -gnat\n@@ -363,7 +380,7 @@ package body Switch.C is\n \n                         if C = 'b'\n                           and then (Ptr /= First_Ptr + 1\n-                                      or else not First_Switch)\n+                                     or else not First_Switch)\n                         then\n                            Osint.Fail\n                              (\"-gnatd.b must be first if combined \""}]}