{"sha": "89f33f44addbf9853bc3e6677db1fa941713cb6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlmMzNmNDRhZGRiZjk4NTNiYzNlNjY3N2RiMWZhOTQxNzEzY2I2Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-08-30T10:56:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-08-30T12:03:56Z"}, "message": "tree-optimization/102128 - rework if-converted BB vect heuristic\n\nThis reworks the previous attempt to avoid leaving around if-converted\nscalar code in BB vectorized loop bodies to keep costing independent\nsubgraphs which should address the observed regression with 519.lbm_r.\n\nFor this to work we now first cost all subgraphs and only after\ndoing that proceed to emit vectorized code.\n\n2021-08-30  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/102128\n\t* tree-vect-slp.c (vect_bb_vectorization_profitable_p):\n\tMove scanning for if-converted scalar code to the caller\n\tand instead delay clearing the visited flag for profitable\n\tsubgraphs.\n\t(vect_slp_region): Cost all subgraphs before scheduling.\n\tFor if-converted BB vectorization scan for scalar COND_EXPRs\n\tand do not vectorize if any found and the cost model is\n\tvery-cheap.", "tree": {"sha": "879065a3fa94ab9273351771794aecbd4dbf3fc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/879065a3fa94ab9273351771794aecbd4dbf3fc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89f33f44addbf9853bc3e6677db1fa941713cb6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f33f44addbf9853bc3e6677db1fa941713cb6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89f33f44addbf9853bc3e6677db1fa941713cb6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f33f44addbf9853bc3e6677db1fa941713cb6c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1313111fdec0d0de4228b5e839ca728b3e4b106e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1313111fdec0d0de4228b5e839ca728b3e4b106e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1313111fdec0d0de4228b5e839ca728b3e4b106e"}], "stats": {"total": 112, "additions": 58, "deletions": 54}, "files": [{"sha": "4ca24408249762d517624cd29292857e7c5c9d08", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 58, "deletions": 54, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f33f44addbf9853bc3e6677db1fa941713cb6c/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f33f44addbf9853bc3e6677db1fa941713cb6c/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=89f33f44addbf9853bc3e6677db1fa941713cb6c", "patch": "@@ -5275,34 +5275,6 @@ vect_bb_vectorization_profitable_p (bb_vec_info bb_vinfo,\n       vector_costs.safe_splice (instance->cost_vec);\n       instance->cost_vec.release ();\n     }\n-  /* When we're vectorizing an if-converted loop body with the\n-     very-cheap cost model make sure we vectorized all if-converted\n-     code.  */\n-  bool force_not_profitable = false;\n-  if (orig_loop && flag_vect_cost_model == VECT_COST_MODEL_VERY_CHEAP)\n-    {\n-      gcc_assert (bb_vinfo->bbs.length () == 1);\n-      for (gimple_stmt_iterator gsi = gsi_start_bb (bb_vinfo->bbs[0]);\n-\t   !gsi_end_p (gsi); gsi_next (&gsi))\n-\t{\n-\t  /* The costing above left us with DCEable vectorized scalar\n-\t     stmts having the visited flag set.  */\n-\t  if (gimple_visited_p (gsi_stmt (gsi)))\n-\t    continue;\n-\n-\t  if (gassign *ass = dyn_cast <gassign *> (gsi_stmt (gsi)))\n-\t    if (gimple_assign_rhs_code (ass) == COND_EXPR)\n-\t      {\n-\t\tforce_not_profitable = true;\n-\t\tbreak;\n-\t      }\n-\t}\n-    }\n-\n-  /* Unset visited flag.  */\n-  stmt_info_for_cost *cost;\n-  FOR_EACH_VEC_ELT (scalar_costs, i, cost)\n-    gimple_set_visited  (cost->stmt_info->stmt, false);\n \n   if (dump_enabled_p ())\n     dump_printf_loc (MSG_NOTE, vect_location, \"Cost model analysis: \\n\");\n@@ -5319,6 +5291,7 @@ vect_bb_vectorization_profitable_p (bb_vec_info bb_vinfo,\n     li_scalar_costs (scalar_costs.length ());\n   auto_vec<std::pair<unsigned, stmt_info_for_cost *> >\n     li_vector_costs (vector_costs.length ());\n+  stmt_info_for_cost *cost;\n   FOR_EACH_VEC_ELT (scalar_costs, i, cost)\n     {\n       unsigned l = gimple_bb (cost->stmt_info->stmt)->loop_father->num;\n@@ -5341,6 +5314,7 @@ vect_bb_vectorization_profitable_p (bb_vec_info bb_vinfo,\n   /* Now cost the portions individually.  */\n   unsigned vi = 0;\n   unsigned si = 0;\n+  bool profitable = true;\n   while (si < li_scalar_costs.length ()\n \t && vi < li_vector_costs.length ())\n     {\n@@ -5407,30 +5381,29 @@ vect_bb_vectorization_profitable_p (bb_vec_info bb_vinfo,\n \t example).  */\n       if (vec_outside_cost + vec_inside_cost > scalar_cost)\n \t{\n-\t  scalar_costs.release ();\n-\t  vector_costs.release ();\n-\t  return false;\n+\t  profitable = false;\n+\t  break;\n \t}\n     }\n-  if (vi < li_vector_costs.length ())\n+  if (profitable && vi < li_vector_costs.length ())\n     {\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t \"Excess vector cost for part in loop %d:\\n\",\n \t\t\t li_vector_costs[vi].first);\n-      scalar_costs.release ();\n-      vector_costs.release ();\n-      return false;\n+      profitable = false;\n     }\n \n-  if (dump_enabled_p () && force_not_profitable)\n-    dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t     \"not profitable because of unprofitable if-converted \"\n-\t\t     \"scalar code\\n\");\n+  /* Unset visited flag.  This is delayed when the subgraph is profitable\n+     and we process the loop for remaining unvectorized if-converted code.  */\n+  if (orig_loop && !profitable)\n+    FOR_EACH_VEC_ELT (scalar_costs, i, cost)\n+      gimple_set_visited  (cost->stmt_info->stmt, false);\n \n   scalar_costs.release ();\n   vector_costs.release ();\n-  return !force_not_profitable;\n+\n+  return profitable;\n }\n \n /* qsort comparator for lane defs.  */\n@@ -5884,19 +5857,16 @@ vect_slp_region (vec<basic_block> bbs, vec<data_reference_p> datarefs,\n \n \t  bb_vinfo->shared->check_datarefs ();\n \n-\t  unsigned i;\n-\t  slp_instance instance;\n-\t  FOR_EACH_VEC_ELT (BB_VINFO_SLP_INSTANCES (bb_vinfo), i, instance)\n+\t  auto_vec<slp_instance> profitable_subgraphs;\n+\t  for (slp_instance instance : BB_VINFO_SLP_INSTANCES (bb_vinfo))\n \t    {\n \t      if (instance->subgraph_entries.is_empty ())\n \t\tcontinue;\n \n \t      vect_location = instance->location ();\n \t      if (!unlimited_cost_model (NULL)\n \t\t  && !vect_bb_vectorization_profitable_p\n-\t\t\t(bb_vinfo,\n-\t\t\t orig_loop ? BB_VINFO_SLP_INSTANCES (bb_vinfo)\n-\t\t\t : instance->subgraph_entries, orig_loop))\n+\t\t\t(bb_vinfo, instance->subgraph_entries, orig_loop))\n \t\t{\n \t\t  if (dump_enabled_p ())\n \t\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -5908,15 +5878,54 @@ vect_slp_region (vec<basic_block> bbs, vec<data_reference_p> datarefs,\n \t      if (!dbg_cnt (vect_slp))\n \t\tcontinue;\n \n+\t      profitable_subgraphs.safe_push (instance);\n+\t    }\n+\n+\t  /* When we're vectorizing an if-converted loop body with the\n+\t     very-cheap cost model make sure we vectorized all if-converted\n+\t     code.  */\n+\t  if (!profitable_subgraphs.is_empty ()\n+\t      && orig_loop)\n+\t    {\n+\t      gcc_assert (bb_vinfo->bbs.length () == 1);\n+\t      for (gimple_stmt_iterator gsi = gsi_start_bb (bb_vinfo->bbs[0]);\n+\t\t   !gsi_end_p (gsi); gsi_next (&gsi))\n+\t\t{\n+\t\t  /* The costing above left us with DCEable vectorized scalar\n+\t\t     stmts having the visited flag set on profitable\n+\t\t     subgraphs.  Do the delayed clearing of the flag here.  */\n+\t\t  if (gimple_visited_p (gsi_stmt (gsi)))\n+\t\t    {\n+\t\t      gimple_set_visited (gsi_stmt (gsi), false);\n+\t\t      continue;\n+\t\t    }\n+\t\t  if (flag_vect_cost_model != VECT_COST_MODEL_VERY_CHEAP)\n+\t\t    continue;\n+\n+\t\t  if (gassign *ass = dyn_cast <gassign *> (gsi_stmt (gsi)))\n+\t\t    if (gimple_assign_rhs_code (ass) == COND_EXPR)\n+\t\t      {\n+\t\t\tif (!profitable_subgraphs.is_empty ()\n+\t\t\t    && dump_enabled_p ())\n+\t\t\t  dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t\t\t   \"not profitable because of \"\n+\t\t\t\t\t   \"unprofitable if-converted scalar \"\n+\t\t\t\t\t   \"code\\n\");\n+\t\t\tprofitable_subgraphs.truncate (0);\n+\t\t      }\n+\t\t}\n+\t    }\n+\n+\t  /* Finally schedule the profitable subgraphs.  */\n+\t  for (slp_instance instance : profitable_subgraphs)\n+\t    {\n \t      if (!vectorized && dump_enabled_p ())\n \t\tdump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t\t \"Basic block will be vectorized \"\n \t\t\t\t \"using SLP\\n\");\n \t      vectorized = true;\n \n-\t      vect_schedule_slp (bb_vinfo,\n-\t\t\t\t orig_loop ? BB_VINFO_SLP_INSTANCES (bb_vinfo)\n-\t\t\t\t : instance->subgraph_entries);\n+\t      vect_schedule_slp (bb_vinfo, instance->subgraph_entries);\n \n \t      unsigned HOST_WIDE_INT bytes;\n \t      if (dump_enabled_p ())\n@@ -5931,11 +5940,6 @@ vect_slp_region (vec<basic_block> bbs, vec<data_reference_p> datarefs,\n \t\t\t\t     \"basic block part vectorized using \"\n \t\t\t\t     \"variable length vectors\\n\");\n \t\t}\n-\n-\t      /* When we're called from loop vectorization we're considering\n-\t\t all subgraphs at once.  */\n-\t      if (orig_loop)\n-\t\tbreak;\n \t    }\n \t}\n       else"}]}