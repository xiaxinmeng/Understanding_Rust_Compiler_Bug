{"sha": "53b735889886371868daa0596ab14250eb71f6d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNiNzM1ODg5ODg2MzcxODY4ZGFhMDU5NmFiMTQyNTBlYjcxZjZkNg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-01-12T08:59:52Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-01-12T08:59:52Z"}, "message": "Initialize type_warnings::dyn_count with a default value (PR ipa/83054).\n\n2018-01-12  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/83054\n\t* ipa-devirt.c (final_warning_record::grow_type_warnings):\n\tNew function.\n\t(possible_polymorphic_call_targets): Use it.\n\t(ipa_devirt): Likewise.\n2018-01-12  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/83054\n\t* g++.dg/warn/pr83054.C: New test.\n\nFrom-SVN: r256566", "tree": {"sha": "1b51494d2baf0e0cdf695153a215dd57a9ce9340", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b51494d2baf0e0cdf695153a215dd57a9ce9340"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53b735889886371868daa0596ab14250eb71f6d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b735889886371868daa0596ab14250eb71f6d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53b735889886371868daa0596ab14250eb71f6d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b735889886371868daa0596ab14250eb71f6d6/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aae9da9bdebeb345aee79125441c16dd94ae70db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae9da9bdebeb345aee79125441c16dd94ae70db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aae9da9bdebeb345aee79125441c16dd94ae70db"}], "stats": {"total": 79, "additions": 74, "deletions": 5}, "files": [{"sha": "5ed1111f9bd4e510caae3ec39adda95aa705149e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b735889886371868daa0596ab14250eb71f6d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b735889886371868daa0596ab14250eb71f6d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53b735889886371868daa0596ab14250eb71f6d6", "patch": "@@ -1,3 +1,11 @@\n+2018-01-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/83054\n+\t* ipa-devirt.c (final_warning_record::grow_type_warnings):\n+\tNew function.\n+\t(possible_polymorphic_call_targets): Use it.\n+\t(ipa_devirt): Likewise.\n+\n 2018-01-12  Martin Liska  <mliska@suse.cz>\n \n \t* profile-count.h (enum profile_quality): Use 0 as invalid"}, {"sha": "cc551d636fd7c5e097858af4fc5db8dff99d69b1", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b735889886371868daa0596ab14250eb71f6d6/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b735889886371868daa0596ab14250eb71f6d6/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=53b735889886371868daa0596ab14250eb71f6d6", "patch": "@@ -2901,10 +2901,27 @@ struct decl_warn_count\n \n struct final_warning_record\n {\n+  /* If needed grow type_warnings vector and initialize new decl_warn_count\n+     to have dyn_count set to profile_count::zero ().  */\n+  void grow_type_warnings (unsigned newlen);\n+\n   profile_count dyn_count;\n   auto_vec<odr_type_warn_count> type_warnings;\n   hash_map<tree, decl_warn_count> decl_warnings;\n };\n+\n+void\n+final_warning_record::grow_type_warnings (unsigned newlen)\n+{\n+  unsigned len = type_warnings.length ();\n+  if (newlen > len)\n+    {\n+      type_warnings.safe_grow_cleared (newlen);\n+      for (unsigned i = len; i < newlen; i++)\n+\ttype_warnings[i].dyn_count = profile_count::zero ();\n+    }\n+}\n+\n struct final_warning_record *final_warning_records;\n \n /* Return vector containing possible targets of polymorphic call of type\n@@ -3176,9 +3193,8 @@ possible_polymorphic_call_targets (tree otr_type,\n \t\t      && warn_suggest_final_types\n \t\t      && !outer_type->derived_types.length ())\n \t\t    {\n-\t\t      if (outer_type->id >= (int)final_warning_records->type_warnings.length ())\n-\t\t\tfinal_warning_records->type_warnings.safe_grow_cleared\n-\t\t\t  (odr_types.length ());\n+\t\t      final_warning_records->grow_type_warnings\n+\t\t\t(outer_type->id);\n \t\t      final_warning_records->type_warnings[outer_type->id].count++;\n \t\t      if (!final_warning_records->type_warnings\n \t\t\t\t[outer_type->id].dyn_count.initialized_p ())\n@@ -3545,8 +3561,7 @@ ipa_devirt (void)\n     {\n       final_warning_records = new (final_warning_record);\n       final_warning_records->dyn_count = profile_count::zero ();\n-      final_warning_records->type_warnings.safe_grow_cleared\n-\t\t\t\t\t\t (odr_types.length ());\n+      final_warning_records->grow_type_warnings (odr_types.length ());\n       free_polymorphic_call_targets_hash ();\n     }\n "}, {"sha": "3949efb2ccb7936795d9eb8cfa949edae7f502f3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b735889886371868daa0596ab14250eb71f6d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b735889886371868daa0596ab14250eb71f6d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53b735889886371868daa0596ab14250eb71f6d6", "patch": "@@ -1,3 +1,8 @@\n+2018-01-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/83054\n+\t* g++.dg/warn/pr83054.C: New test.\n+\n 2018-01-11  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/spec-barr-1.c: New file."}, {"sha": "506c9609b908a687ebd222e55d355ce8d77cbff5", "filename": "gcc/testsuite/g++.dg/warn/pr83054.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b735889886371868daa0596ab14250eb71f6d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr83054.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b735889886371868daa0596ab14250eb71f6d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr83054.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr83054.C?ref=53b735889886371868daa0596ab14250eb71f6d6", "patch": "@@ -0,0 +1,41 @@\n+// PR ipa/83054\n+// { dg-options \"-O3 -Wsuggest-final-types\" }\n+// { dg-do compile }\n+\n+extern \"C\" int printf (const char *, ...);\n+struct foo // { dg-warning \"final would enable devirtualization of 5 calls\" }\n+{\n+  static int count;\n+  void print (int i, int j) { printf (\"foo[%d][%d] = %d\\n\", i, j, x); }\n+  int x;\n+  foo () {\n+    x = count++;\n+    printf(\"this %d = %x\\n\", x, (void *)this);\n+  }\n+  virtual ~foo () {\n+    printf(\"this %d = %x\\n\", x, (void *)this);\n+    --count;\n+  }\n+};\n+int foo::count;\n+\n+\n+int main ()\n+{\n+  {\n+    foo array[3][3];\n+    for (int i = 0; i < 3; i++)\n+      {\n+\tfor (int j = 0; j < 3; j++)\n+\t  {\n+\t    printf(\"&a[%d][%d] = %x\\n\", i, j, (void *)&array[i][j]);\n+\t  }\n+      }\n+      // The count should be nine, if not, fail the test.\n+      if (foo::count != 9)\n+\treturn 1;\n+  }\n+  if (foo::count != 0)\n+    return 1;\n+  return 0;\n+}"}]}