{"sha": "3459ca230e1acd3520dbe567e601eca07ad5269d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ1OWNhMjMwZTFhY2QzNTIwZGJlNTY3ZTYwMWVjYTA3YWQ1MjY5ZA==", "commit": {"author": {"name": "Ollie Wild", "email": "aaw@google.com", "date": "2007-10-26T08:19:14Z"}, "committer": {"name": "Ollie Wild", "email": "aaw@gcc.gnu.org", "date": "2007-10-26T08:19:14Z"}, "message": "expr.c (cxx_expand_expr): Removed.\n\n\tgcc/cp/\n\t* expr.c (cxx_expand_expr): Removed.\n\t* cp-tree.h (exx_expand_expr): Removed.\n\t* cp-objcp-common.h (LANK_HOOKS_EXPAND_EXPR): Replace cxx_expand_expr\n\twith c_expand_expr.\n\nFrom-SVN: r129645", "tree": {"sha": "19014509b98dc0b204370c257cc4f025795db897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19014509b98dc0b204370c257cc4f025795db897"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3459ca230e1acd3520dbe567e601eca07ad5269d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3459ca230e1acd3520dbe567e601eca07ad5269d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3459ca230e1acd3520dbe567e601eca07ad5269d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3459ca230e1acd3520dbe567e601eca07ad5269d/comments", "author": {"login": "olliewild", "id": 11523068, "node_id": "MDQ6VXNlcjExNTIzMDY4", "avatar_url": "https://avatars.githubusercontent.com/u/11523068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olliewild", "html_url": "https://github.com/olliewild", "followers_url": "https://api.github.com/users/olliewild/followers", "following_url": "https://api.github.com/users/olliewild/following{/other_user}", "gists_url": "https://api.github.com/users/olliewild/gists{/gist_id}", "starred_url": "https://api.github.com/users/olliewild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olliewild/subscriptions", "organizations_url": "https://api.github.com/users/olliewild/orgs", "repos_url": "https://api.github.com/users/olliewild/repos", "events_url": "https://api.github.com/users/olliewild/events{/privacy}", "received_events_url": "https://api.github.com/users/olliewild/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb80272af11c09868c5cfa30cb6af8e08afa977c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb80272af11c09868c5cfa30cb6af8e08afa977c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb80272af11c09868c5cfa30cb6af8e08afa977c"}], "stats": {"total": 55, "additions": 8, "deletions": 47}, "files": [{"sha": "b4edd884d292fa5a9aa3ebe80e34fc7a4ff06b58", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3459ca230e1acd3520dbe567e601eca07ad5269d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3459ca230e1acd3520dbe567e601eca07ad5269d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3459ca230e1acd3520dbe567e601eca07ad5269d", "patch": "@@ -1,3 +1,10 @@\n+2007-10-26  Ollie Wild  <aaw@google.com>\n+\n+\t* expr.c (cxx_expand_expr): Removed.\n+\t* cp-tree.h (exx_expand_expr): Removed.\n+\t* cp-objcp-common.h (LANK_HOOKS_EXPAND_EXPR): Replace cxx_expand_expr\n+\twith c_expand_expr.\n+\n 2007-10-25  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/33843"}, {"sha": "8fc69879cab4da8341f281792558a2a2b30bb6cd", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3459ca230e1acd3520dbe567e601eca07ad5269d/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3459ca230e1acd3520dbe567e601eca07ad5269d/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=3459ca230e1acd3520dbe567e601eca07ad5269d", "patch": "@@ -51,7 +51,7 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n #undef LANG_HOOKS_GET_ALIAS_SET\n #define LANG_HOOKS_GET_ALIAS_SET cxx_get_alias_set\n #undef LANG_HOOKS_EXPAND_EXPR\n-#define LANG_HOOKS_EXPAND_EXPR cxx_expand_expr\n+#define LANG_HOOKS_EXPAND_EXPR c_expand_expr\n #undef LANG_HOOKS_EXPAND_DECL\n #define LANG_HOOKS_EXPAND_DECL c_expand_decl\n #undef LANG_HOOKS_PARSE_FILE"}, {"sha": "bb02692a07ad6541dbb87be752a203ffd43b219a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3459ca230e1acd3520dbe567e601eca07ad5269d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3459ca230e1acd3520dbe567e601eca07ad5269d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3459ca230e1acd3520dbe567e601eca07ad5269d", "patch": "@@ -4332,9 +4332,6 @@ extern void choose_personality_routine\t\t(enum languages);\n extern tree eh_type_info\t\t\t(tree);\n \n /* in expr.c */\n-extern rtx cxx_expand_expr\t\t\t(tree, rtx,\n-\t\t\t\t\t\t enum machine_mode,\n-\t\t\t\t\t\t int, rtx *);\n extern tree cplus_expand_constant\t\t(tree);\n \n /* friend.c */"}, {"sha": "feafd7034c01cfd0275e6e8655e7d21ed89c6368", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3459ca230e1acd3520dbe567e601eca07ad5269d/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3459ca230e1acd3520dbe567e601eca07ad5269d/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=3459ca230e1acd3520dbe567e601eca07ad5269d", "patch": "@@ -82,46 +82,3 @@ cplus_expand_constant (tree cst)\n \n   return cst;\n }\n-\n-/* Hook used by expand_expr to expand language-specific tree codes.  */\n-/* ??? The only thing that should be here are things needed to expand\n-   constant initializers; everything else should be handled by the\n-   gimplification routines.  Are EMPTY_CLASS_EXPR or BASELINK needed?  */\n-\n-rtx\n-cxx_expand_expr (tree exp, rtx target, enum machine_mode tmode, int modifier,\n-\t\t rtx *alt_rtl)\n-{\n-  tree type = TREE_TYPE (exp);\n-  enum machine_mode mode = TYPE_MODE (type);\n-  enum tree_code code = TREE_CODE (exp);\n-\n-  /* No sense saving up arithmetic to be done\n-     if it's all in the wrong mode to form part of an address.\n-     And force_operand won't know whether to sign-extend or zero-extend.  */\n-\n-  if (mode != Pmode && modifier == EXPAND_SUM)\n-    modifier = EXPAND_NORMAL;\n-\n-  switch (code)\n-    {\n-    case PTRMEM_CST:\n-      return expand_expr (cplus_expand_constant (exp),\n-\t\t\t  target, tmode, modifier);\n-\n-    case OFFSET_REF:\n-      /* Offset refs should not make it through to here.  */\n-      gcc_unreachable ();\n-\n-    case EMPTY_CLASS_EXPR:\n-      /* We don't need to generate any code for an empty class.  */\n-      return const0_rtx;\n-\n-    case BASELINK:\n-      return expand_expr (BASELINK_FUNCTIONS (exp), target, tmode,\n-\t\t\t  modifier);\n-\n-    default:\n-      return c_expand_expr (exp, target, tmode, modifier, alt_rtl);\n-    }\n-}"}]}