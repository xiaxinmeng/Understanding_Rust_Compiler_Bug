{"sha": "2afa8dcedaa0b3db5444fe6086e991ac77bdd730", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFmYThkY2VkYWEwYjNkYjU0NDRmZTYwODZlOTkxYWM3N2JkZDczMA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-05-18T13:29:38Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-05-18T13:29:38Z"}, "message": "cfgrtl.c (purge_dead_edges): Don't remove fake edges.\n\n2005-05-18  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* cfgrtl.c (purge_dead_edges): Don't remove fake edges.\n\nFrom-SVN: r99897", "tree": {"sha": "24154ad4da32dba37675b38d2241bffdb18e8307", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24154ad4da32dba37675b38d2241bffdb18e8307"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2afa8dcedaa0b3db5444fe6086e991ac77bdd730", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2afa8dcedaa0b3db5444fe6086e991ac77bdd730", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2afa8dcedaa0b3db5444fe6086e991ac77bdd730", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2afa8dcedaa0b3db5444fe6086e991ac77bdd730/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23e66a36cb937636be796fce2f7d273209a80a4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23e66a36cb937636be796fce2f7d273209a80a4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23e66a36cb937636be796fce2f7d273209a80a4f"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "26c1162dc70a3bcb0ea8b74656a348f6c7b1e930", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afa8dcedaa0b3db5444fe6086e991ac77bdd730/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afa8dcedaa0b3db5444fe6086e991ac77bdd730/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2afa8dcedaa0b3db5444fe6086e991ac77bdd730", "patch": "@@ -1,3 +1,7 @@\n+2005-05-18  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* cfgrtl.c (purge_dead_edges): Don't remove fake edges.\n+\n 2005-05-18  Daniel Berlin  <dberlin@dberlin.org>\n \t\n \tFix PR tree-optimization/21407"}, {"sha": "42761cad745d02bb90a07393f40df94064942556", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afa8dcedaa0b3db5444fe6086e991ac77bdd730/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afa8dcedaa0b3db5444fe6086e991ac77bdd730/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=2afa8dcedaa0b3db5444fe6086e991ac77bdd730", "patch": "@@ -2428,9 +2428,12 @@ purge_dead_edges (basic_block bb)\n   if (!found)\n     return purged;\n \n+  /* Remove all but the fake and fallthru edges.  The fake edge may be\n+     the only successor for this block in the case of noreturn\n+     calls.  */\n   for (ei = ei_start (bb->succs); (e = ei_safe_edge (ei)); )\n     {\n-      if (!(e->flags & EDGE_FALLTHRU))\n+      if (!(e->flags & (EDGE_FALLTHRU | EDGE_FAKE)))\n \t{\n \t  bb->flags |= BB_DIRTY;\n \t  remove_edge (e);"}]}