{"sha": "1ba61f4eb273fdb544fa0653ebf64e2a30d50a03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJhNjFmNGViMjczZmRiNTQ0ZmEwNjUzZWJmNjRlMmEzMGQ1MGEwMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1997-01-15T19:08:08Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1997-01-15T19:08:08Z"}, "message": "Use reload_address_{base,index}_reg_class when reloading an address\n\nFrom-SVN: r13494", "tree": {"sha": "2667c0e4971db319b817e62dbef792dd6d068ec2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2667c0e4971db319b817e62dbef792dd6d068ec2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ba61f4eb273fdb544fa0653ebf64e2a30d50a03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ba61f4eb273fdb544fa0653ebf64e2a30d50a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ba61f4eb273fdb544fa0653ebf64e2a30d50a03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ba61f4eb273fdb544fa0653ebf64e2a30d50a03/comments", "author": null, "committer": null, "parents": [{"sha": "9c8ae275098c687f28d443bbf1ae9052a8629054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c8ae275098c687f28d443bbf1ae9052a8629054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c8ae275098c687f28d443bbf1ae9052a8629054"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "5bb39dc4df38388ae6b24f3f60e39b1d0b0ad8c3", "filename": "gcc/reload.c", "status": "modified", "additions": 40, "deletions": 20, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ba61f4eb273fdb544fa0653ebf64e2a30d50a03/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ba61f4eb273fdb544fa0653ebf64e2a30d50a03/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=1ba61f4eb273fdb544fa0653ebf64e2a30d50a03", "patch": "@@ -4218,7 +4218,8 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels)\n \t  tem = make_memloc (ad, regno);\n \t  find_reloads_address (GET_MODE (tem), NULL_PTR, XEXP (tem, 0),\n \t\t\t\t&XEXP (tem, 0), opnum, type, ind_levels);\n-\t  push_reload (tem, NULL_RTX, loc, NULL_PTR, BASE_REG_CLASS,\n+\t  push_reload (tem, NULL_RTX, loc, NULL_PTR,\n+\t\t       reload_address_base_reg_class,\n \t\t       GET_MODE (ad), VOIDmode, 0, 0,\n \t\t       opnum, type);\n \t  return 1;\n@@ -4247,7 +4248,7 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels)\n \treturn 0;\n \n       /* If we do not have one of the cases above, we must do the reload.  */\n-      push_reload (ad, NULL_RTX, loc, NULL_PTR, BASE_REG_CLASS,\n+      push_reload (ad, NULL_RTX, loc, NULL_PTR, reload_address_base_reg_class,\n \t\t   GET_MODE (ad), VOIDmode, 0, 0, opnum, type);\n       return 1;\n     }\n@@ -4317,7 +4318,8 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels)\n \t  /* Must use TEM here, not AD, since it is the one that will\n \t     have any subexpressions reloaded, if needed.  */\n \t  push_reload (tem, NULL_RTX, loc, NULL_PTR,\n-\t\t       BASE_REG_CLASS, GET_MODE (tem), VOIDmode, 0,\n+\t\t       reload_address_base_reg_class, GET_MODE (tem),\n+\t\t       VOIDmode, 0,\n \t\t       0, opnum, type);\n \t  return 1;\n \t}\n@@ -4349,16 +4351,16 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels)\n \t  /* Reload the displacement into an index reg.\n \t     We assume the frame pointer or arg pointer is a base reg.  */\n \t  find_reloads_address_part (XEXP (ad, 1), &XEXP (ad, 1),\n-\t\t\t\t     INDEX_REG_CLASS, GET_MODE (ad), opnum,\n-\t\t\t\t     type, ind_levels);\n+\t\t\t\t     reload_address_index_reg_class,\n+\t\t\t\t     GET_MODE (ad), opnum, type, ind_levels);\n \t}\n       else\n \t{\n \t  /* If the sum of two regs is not necessarily valid,\n \t     reload the sum into a base reg.\n \t     That will at least work.  */\n-\t  find_reloads_address_part (ad, loc, BASE_REG_CLASS, Pmode,\n-\t\t\t\t     opnum, type, ind_levels);\n+\t  find_reloads_address_part (ad, loc, reload_address_base_reg_class,\n+\t\t\t\t     Pmode, opnum, type, ind_levels);\n \t}\n       return 1;\n     }\n@@ -4408,7 +4410,8 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels)\n \t\t\t   plus_constant (XEXP (XEXP (ad, 0), 0),\n \t\t\t\t\t  INTVAL (XEXP (ad, 1))),\n \t\t\t   XEXP (XEXP (ad, 0), 1));\n-      find_reloads_address_part (XEXP (ad, 0), &XEXP (ad, 0), BASE_REG_CLASS,\n+      find_reloads_address_part (XEXP (ad, 0), &XEXP (ad, 0),\n+\t\t\t\t reload_address_base_reg_class,\n \t\t\t\t GET_MODE (ad), opnum, type, ind_levels);\n       find_reloads_address_1 (mode, XEXP (ad, 1), 1, &XEXP (ad, 1), opnum,\n \t\t\t      type, 0);\n@@ -4432,7 +4435,8 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels)\n \t\t\t   XEXP (XEXP (ad, 0), 0),\n \t\t\t   plus_constant (XEXP (XEXP (ad, 0), 1),\n \t\t\t\t\t  INTVAL (XEXP (ad, 1))));\n-      find_reloads_address_part (XEXP (ad, 1), &XEXP (ad, 1), BASE_REG_CLASS,\n+      find_reloads_address_part (XEXP (ad, 1), &XEXP (ad, 1),\n+\t\t\t\t reload_address_base_reg_class,\n \t\t\t\t GET_MODE (ad), opnum, type, ind_levels);\n       find_reloads_address_1 (mode, XEXP (ad, 0), 1, &XEXP (ad, 0), opnum,\n \t\t\t      type, 0);\n@@ -4476,7 +4480,8 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels)\n \t  loc = &XEXP (*memrefloc, 0);\n \t}\n \n-      find_reloads_address_part (ad, loc, BASE_REG_CLASS, Pmode, opnum, type,\n+      find_reloads_address_part (ad, loc, reload_address_base_reg_class,\n+\t\t\t\t Pmode, opnum, type,\n \t\t\t\t ind_levels);\n       return 1;\n     }\n@@ -4831,7 +4836,9 @@ find_reloads_address_1 (mode, x, context, loc, opnum, type, ind_levels)\n \n \t      int reloadnum\n \t\t= push_reload (x, NULL_RTX, loc, NULL_PTR,\n-\t\t\t       context ? INDEX_REG_CLASS : BASE_REG_CLASS,\n+\t\t\t       (context\n+\t\t\t\t? reload_address_index_reg_class\n+\t\t\t\t: reload_address_base_reg_class),\n \t\t\t       GET_MODE (x), GET_MODE (x), VOIDmode, 0,\n \t\t\t       opnum, type);\n \t      reload_inc[reloadnum]\n@@ -4873,7 +4880,9 @@ find_reloads_address_1 (mode, x, context, loc, opnum, type, ind_levels)\n \t\t\t\topnum, type, ind_levels);\n \n \t  reloadnum = push_reload (x, NULL_RTX, loc, NULL_PTR,\n-\t\t\t\t   context ? INDEX_REG_CLASS : BASE_REG_CLASS,\n+\t\t\t\t   (context\n+\t\t\t\t    ? reload_address_index_reg_class\n+\t\t\t\t    : reload_address_base_reg_class),\n \t\t\t\t   GET_MODE (x), VOIDmode, 0, 0, opnum, type);\n \t  reload_inc[reloadnum]\n \t    = find_inc_amount (PATTERN (this_insn), XEXP (x, 0));\n@@ -4902,7 +4911,8 @@ find_reloads_address_1 (mode, x, context, loc, opnum, type, ind_levels)\n       find_reloads_address (GET_MODE (x), loc, XEXP (x, 0), &XEXP (x, 0),\n \t\t\t    opnum, type, ind_levels);\n       push_reload (*loc, NULL_RTX, loc, NULL_PTR,\n-\t\t   context ? INDEX_REG_CLASS : BASE_REG_CLASS,\n+\t\t   (context ? reload_address_index_reg_class\n+\t\t    : reload_address_base_reg_class),\n \t\t   GET_MODE (x), VOIDmode, 0, 0, opnum, type);\n       return 1;\n \n@@ -4913,8 +4923,9 @@ find_reloads_address_1 (mode, x, context, loc, opnum, type, ind_levels)\n \tif (reg_equiv_constant[regno] != 0)\n \t  {\n \t    find_reloads_address_part (reg_equiv_constant[regno], loc, \n-\t\t\t\t       (context ? INDEX_REG_CLASS\n-\t\t\t\t\t: BASE_REG_CLASS),\n+\t\t\t\t       (context\n+\t\t\t\t\t? reload_address_index_reg_class\n+\t\t\t\t\t: reload_address_base_reg_class),\n \t\t\t\t       GET_MODE (x), opnum, type, ind_levels);\n \t    return 1;\n \t  }\n@@ -4924,7 +4935,9 @@ find_reloads_address_1 (mode, x, context, loc, opnum, type, ind_levels)\n \tif (reg_equiv_mem[regno] != 0)\n \t  {\n \t    push_reload (reg_equiv_mem[regno], NULL_RTX, loc, NULL_PTR,\n-\t\t\t context ? INDEX_REG_CLASS : BASE_REG_CLASS,\n+\t\t\t (context\n+\t\t\t  ? reload_address_index_reg_class\n+\t\t\t  : reload_address_base_reg_class),\n \t\t\t GET_MODE (x), VOIDmode, 0, 0, opnum, type);\n \t    return 1;\n \t  }\n@@ -4945,7 +4958,9 @@ find_reloads_address_1 (mode, x, context, loc, opnum, type, ind_levels)\n \t\t  : REGNO_MODE_OK_FOR_BASE_P (regno, mode))))\n \t  {\n \t    push_reload (x, NULL_RTX, loc, NULL_PTR,\n-\t\t\t context ? INDEX_REG_CLASS : BASE_REG_CLASS,\n+\t\t\t (context\n+\t\t\t  ? reload_address_index_reg_class\n+\t\t\t  : reload_address_base_reg_class),\n \t\t\t GET_MODE (x), VOIDmode, 0, 0, opnum, type);\n \t    return 1;\n \t  }\n@@ -4957,7 +4972,9 @@ find_reloads_address_1 (mode, x, context, loc, opnum, type, ind_levels)\n \tif (regno_clobbered_p (regno, this_insn))\n \t  {\n \t    push_reload (x, NULL_RTX, loc, NULL_PTR,\n-\t\t\t context ? INDEX_REG_CLASS : BASE_REG_CLASS,\n+\t\t\t (context\n+\t\t\t  ? reload_address_index_reg_class\n+\t\t\t  : reload_address_base_reg_class),\n \t\t\t GET_MODE (x), VOIDmode, 0, 0, opnum, type);\n \t    return 1;\n \t  }\n@@ -4978,7 +4995,9 @@ find_reloads_address_1 (mode, x, context, loc, opnum, type, ind_levels)\n \t\t     : REGNO_MODE_OK_FOR_BASE_P (regno, mode)))\n \t\t{\n \t\t  push_reload (x, NULL_RTX, loc, NULL_PTR,\n-\t\t\t       context ? INDEX_REG_CLASS : BASE_REG_CLASS,\n+\t\t\t       (context\n+\t\t\t\t? reload_address_index_reg_class\n+\t\t\t\t: reload_address_base_reg_class),\n \t\t\t       GET_MODE (x), VOIDmode, 0, 0, opnum, type);\n \t\t  return 1;\n \t\t}\n@@ -4988,7 +5007,8 @@ find_reloads_address_1 (mode, x, context, loc, opnum, type, ind_levels)\n \t  else\n \t    {\n \t      enum reg_class class = (context\n-\t\t\t\t      ? INDEX_REG_CLASS : BASE_REG_CLASS);\n+\t\t\t\t      ? reload_address_index_reg_class\n+\t\t\t\t      : reload_address_base_reg_class);\n \t      if (CLASS_MAX_NREGS (class, GET_MODE (SUBREG_REG (x)))\n \t\t  > reg_class_size[class])\n \t\t{"}]}