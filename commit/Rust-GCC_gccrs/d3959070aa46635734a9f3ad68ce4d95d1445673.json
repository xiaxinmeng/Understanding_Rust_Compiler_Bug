{"sha": "d3959070aa46635734a9f3ad68ce4d95d1445673", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM5NTkwNzBhYTQ2NjM1NzM0YTlmM2FkNjhjZTRkOTVkMTQ0NTY3Mw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-15T17:55:57Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-15T17:55:57Z"}, "message": "[PATCH] aarch64: Implement vmlsl[_high]* intrinsics using builtins\n\nThis patch reimplements some more intrinsics using RTL builtins in the\nstraightforward way.\nThankfully most of the RTL infrastructure is already in place for it.\n\ngcc/\n\t* config/aarch64/aarch64-simd.md (*aarch64_<su>mlsl_hi<mode>):\n\tRename to...\n\t(aarch64_<su>mlsl_hi<mode>): ... This.\n\t(aarch64_<su>mlsl_hi<mode>): Define.\n\t(*aarch64_<su>mlsl<mode): Rename to...\n\t(aarch64_<su>mlsl<mode): ... This.\n\t* config/aarch64/aarch64-simd-builtins.def (smlsl, umlsl,\n\tsmlsl_hi, umlsl_hi): Define builtins.\n\t* config/aarch64/arm_neon.h (vmlsl_high_s8, vmlsl_high_s16,\n\tvmlsl_high_s32, vmlsl_high_u8, vmlsl_high_u16, vmlsl_high_u32,\n\tvmlsl_s8, vmlsl_s16, vmlsl_s32, vmlsl_u8,\n\tvmlsl_u16, vmlsl_u32): Reimplement with builtins.", "tree": {"sha": "649a1c007db9e213bf6a1ba98fdf069aae3b6faa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/649a1c007db9e213bf6a1ba98fdf069aae3b6faa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3959070aa46635734a9f3ad68ce4d95d1445673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3959070aa46635734a9f3ad68ce4d95d1445673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3959070aa46635734a9f3ad68ce4d95d1445673", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3959070aa46635734a9f3ad68ce4d95d1445673/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d0df0aeb67dbb83f7814466e866c2957be92b97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d0df0aeb67dbb83f7814466e866c2957be92b97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d0df0aeb67dbb83f7814466e866c2957be92b97"}], "stats": {"total": 110, "additions": 36, "deletions": 74}, "files": [{"sha": "73a24d59745ab03fbed213b01eb3134d053295e1", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3959070aa46635734a9f3ad68ce4d95d1445673/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3959070aa46635734a9f3ad68ce4d95d1445673/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=d3959070aa46635734a9f3ad68ce4d95d1445673", "patch": "@@ -178,6 +178,14 @@\n   /* Implemented by aarch64_xtn<mode>.  */\n   BUILTIN_VQN (UNOP, xtn, 0, NONE)\n \n+  /* Implemented by aarch64_<su>mlsl<mode>.  */\n+  BUILTIN_VD_BHSI (TERNOP, smlsl, 0, NONE)\n+  BUILTIN_VD_BHSI (TERNOPU, umlsl, 0, NONE)\n+\n+  /* Implemented by aarch64_<su>mlsl_hi<mode>.  */\n+  BUILTIN_VQW (TERNOP, smlsl_hi, 0, NONE)\n+  BUILTIN_VQW (TERNOPU, umlsl_hi, 0, NONE)\n+\n   BUILTIN_VSQN_HSDI (UNOPUS, sqmovun, 0, ALL)\n   /* Implemented by aarch64_<sur>qmovn<mode>.  */\n   BUILTIN_VSQN_HSDI (UNOP, sqmovn, 0, ALL)"}, {"sha": "eabc915c681bf4700fc2e06826aa589ff6f9eecb", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3959070aa46635734a9f3ad68ce4d95d1445673/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3959070aa46635734a9f3ad68ce4d95d1445673/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=d3959070aa46635734a9f3ad68ce4d95d1445673", "patch": "@@ -1755,7 +1755,7 @@\n   [(set_attr \"type\" \"neon_mla_<Vetype>_long\")]\n )\n \n-(define_insn \"*aarch64_<su>mlsl_hi<mode>\"\n+(define_insn \"aarch64_<su>mlsl_hi<mode>_insn\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (minus:<VWIDE>\n           (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n@@ -1771,6 +1771,20 @@\n   [(set_attr \"type\" \"neon_mla_<Vetype>_long\")]\n )\n \n+(define_expand \"aarch64_<su>mlsl_hi<mode>\"\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:<VWIDE> 1 \"register_operand\")\n+   (ANY_EXTEND:<VWIDE>(match_operand:VQW 2 \"register_operand\"))\n+   (match_operand:VQW 3 \"register_operand\")]\n+  \"TARGET_SIMD\"\n+{\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n+  emit_insn (gen_aarch64_<su>mlsl_hi<mode>_insn (operands[0], operands[1],\n+\t\t\t\t\t\t operands[2], p, operands[3]));\n+  DONE;\n+}\n+)\n+\n (define_insn \"*aarch64_<su>mlal<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (plus:<VWIDE>\n@@ -1785,7 +1799,7 @@\n   [(set_attr \"type\" \"neon_mla_<Vetype>_long\")]\n )\n \n-(define_insn \"*aarch64_<su>mlsl<mode>\"\n+(define_insn \"aarch64_<su>mlsl<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (minus:<VWIDE>\n           (match_operand:<VWIDE> 1 \"register_operand\" \"0\")"}, {"sha": "f7efee61de4c5268acf446555af4a93fece6b169", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 12, "deletions": 72, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3959070aa46635734a9f3ad68ce4d95d1445673/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3959070aa46635734a9f3ad68ce4d95d1445673/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=d3959070aa46635734a9f3ad68ce4d95d1445673", "patch": "@@ -8200,72 +8200,42 @@ __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsl_high_s8 (int16x8_t __a, int8x16_t __b, int8x16_t __c)\n {\n-  int16x8_t __result;\n-  __asm__ (\"smlsl2 %0.8h,%2.16b,%3.16b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smlsl_hiv16qi (__a, __b, __c);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsl_high_s16 (int32x4_t __a, int16x8_t __b, int16x8_t __c)\n {\n-  int32x4_t __result;\n-  __asm__ (\"smlsl2 %0.4s,%2.8h,%3.8h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smlsl_hiv8hi (__a, __b, __c);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsl_high_s32 (int64x2_t __a, int32x4_t __b, int32x4_t __c)\n {\n-  int64x2_t __result;\n-  __asm__ (\"smlsl2 %0.2d,%2.4s,%3.4s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smlsl_hiv4si (__a, __b, __c);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsl_high_u8 (uint16x8_t __a, uint8x16_t __b, uint8x16_t __c)\n {\n-  uint16x8_t __result;\n-  __asm__ (\"umlsl2 %0.8h,%2.16b,%3.16b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umlsl_hiv16qi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsl_high_u16 (uint32x4_t __a, uint16x8_t __b, uint16x8_t __c)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"umlsl2 %0.4s,%2.8h,%3.8h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umlsl_hiv8hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsl_high_u32 (uint64x2_t __a, uint32x4_t __b, uint32x4_t __c)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"umlsl2 %0.2d,%2.4s,%3.4s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umlsl_hiv4si_uuuu (__a, __b, __c);\n }\n \n #define vmlsl_lane_s16(a, b, c, d)                                      \\\n@@ -8432,72 +8402,42 @@ __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsl_s8 (int16x8_t __a, int8x8_t __b, int8x8_t __c)\n {\n-  int16x8_t __result;\n-  __asm__ (\"smlsl %0.8h, %2.8b, %3.8b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smlslv8qi (__a, __b, __c);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsl_s16 (int32x4_t __a, int16x4_t __b, int16x4_t __c)\n {\n-  int32x4_t __result;\n-  __asm__ (\"smlsl %0.4s, %2.4h, %3.4h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smlslv4hi (__a, __b, __c);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsl_s32 (int64x2_t __a, int32x2_t __b, int32x2_t __c)\n {\n-  int64x2_t __result;\n-  __asm__ (\"smlsl %0.2d, %2.2s, %3.2s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smlslv2si (__a, __b, __c);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsl_u8 (uint16x8_t __a, uint8x8_t __b, uint8x8_t __c)\n {\n-  uint16x8_t __result;\n-  __asm__ (\"umlsl %0.8h, %2.8b, %3.8b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umlslv8qi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsl_u16 (uint32x4_t __a, uint16x4_t __b, uint16x4_t __c)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"umlsl %0.4s, %2.4h, %3.4h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umlslv4hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsl_u32 (uint64x2_t __a, uint32x2_t __b, uint32x2_t __c)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"umlsl %0.2d, %2.2s, %3.2s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umlslv2si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline float32x4_t"}]}