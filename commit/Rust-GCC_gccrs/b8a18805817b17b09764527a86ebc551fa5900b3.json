{"sha": "b8a18805817b17b09764527a86ebc551fa5900b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhhMTg4MDU4MTdiMTdiMDk3NjQ1MjdhODZlYmM1NTFmYTU5MDBiMw==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-10-23T18:40:39Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-10-23T18:40:39Z"}, "message": "In gcc/cp/: 2010-10-23 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/cp/:\n2010-10-23  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * tree.c (cxx_printable_name_internal): In Objective-C++, call\n        objc_maybe_printable_name.\n\nIn gcc/objc/:\n2010-10-23  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc-act.c (OBJC_GEN_METHOD_LABEL): Updated comments.\n        (objc_demangle): Return NULL if demangling can not be done because\n        the string to demangle is not an Objective-C mangled method name.\n        Be smarter in demangling method names so that at least for methods\n        with no arguments we are able to almost always demangle '_' correctly.\n        Updated comments.\n        (objc_maybe_printable_name): New.\n        (objc_printable_name): Call objc_maybe_printable_name.  If it\n        returns NULL, call cxx_printable_name in Objective-C++.\n\nIn gcc/testsuite/:\n2010-10-23  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc.dg/demangle-1.m: New test.\n        * obj-c++.dg/demangle-1.mm: New test.\n        * obj-c++.dg/demangle-2.mm: New test.\n        * obj-c++.dg/demangle-3.mm: New test.\n\nIn gcc/c-family/:\n2010-10-23  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * c-common.h (objc_maybe_printable_name): New.\n        * stub-objc.c (objc_maybe_printable_name): New.\n\nFrom-SVN: r165887", "tree": {"sha": "c267f9ca3f7d1cb2966e10f23962c1b2d259571a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c267f9ca3f7d1cb2966e10f23962c1b2d259571a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8a18805817b17b09764527a86ebc551fa5900b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a18805817b17b09764527a86ebc551fa5900b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8a18805817b17b09764527a86ebc551fa5900b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a18805817b17b09764527a86ebc551fa5900b3/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "487a9a3ef8a77211c02d9f130f2db1f20962a58d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/487a9a3ef8a77211c02d9f130f2db1f20962a58d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/487a9a3ef8a77211c02d9f130f2db1f20962a58d"}], "stats": {"total": 371, "additions": 358, "deletions": 13}, "files": [{"sha": "b73e45a8f54fe7eb29a6c0b3db92a47463156b9c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b8a18805817b17b09764527a86ebc551fa5900b3", "patch": "@@ -1,3 +1,8 @@\n+2010-10-23  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* c-common.h (objc_maybe_printable_name): New.\n+\t* stub-objc.c (objc_maybe_printable_name): New.\n+\n 2010-10-22  Artjoms Sinkarovs <artyom.shinakroff@gmail.com>\n \tAndrew Pinski <pinskia@gmail.com>\n "}, {"sha": "8031bb44a347bee0e083bca4cc60e35b572ca761", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=b8a18805817b17b09764527a86ebc551fa5900b3", "patch": "@@ -1048,6 +1048,7 @@ extern tree objc_build_getter_call (tree, tree);\n extern tree objc_build_setter_call (tree, tree);\n extern void objc_add_synthesize_declaration (location_t, tree);\n extern void objc_add_dynamic_declaration (location_t, tree);\n+extern const char * objc_maybe_printable_name (tree, int);\n \n /* The following are provided by the C and C++ front-ends, and called by\n    ObjC/ObjC++.  */"}, {"sha": "f808dc76f6b755a33c6372553e2e751e61d379ee", "filename": "gcc/c-family/stub-objc.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Fc-family%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Fc-family%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fstub-objc.c?ref=b8a18805817b17b09764527a86ebc551fa5900b3", "patch": "@@ -359,6 +359,13 @@ objc_add_dynamic_declaration (location_t ARG_UNUSED (start_locus),\n {\n }\n \n+const char *\n+objc_maybe_printable_name (tree ARG_UNUSED (decl), \n+\t\t\t   int ARG_UNUSED (v))\n+{\n+  return NULL;\n+}\n+\n tree\n objc_build_throw_stmt (location_t ARG_UNUSED (loc), tree ARG_UNUSED (expr))\n {"}, {"sha": "bf36e6ff753f8379c3fb12fb4e1dc37c03a6a1a6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b8a18805817b17b09764527a86ebc551fa5900b3", "patch": "@@ -1,3 +1,8 @@\n+2010-10-23  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* tree.c (cxx_printable_name_internal): In Objective-C++, call\n+\tobjc_maybe_printable_name.\n+\n 2010-10-22  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/46129"}, {"sha": "26746f961c2daab0f40a918ad895a5c9f8e8ba39", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=b8a18805817b17b09764527a86ebc551fa5900b3", "patch": "@@ -1409,6 +1409,15 @@ cxx_printable_name_internal (tree decl, int v, bool translate)\n   static int ring_counter;\n   int i;\n \n+  /* If doing Objective-C++, give Objective-C a chance to demangle\n+     Objective-C method names.  */\n+  if (c_dialect_objc ())\n+    {\n+      const char *demangled = objc_maybe_printable_name (decl, v);\n+      if (demangled)\n+\treturn demangled;\n+    }\n+\n   /* Only cache functions.  */\n   if (v < 2\n       || TREE_CODE (decl) != FUNCTION_DECL"}, {"sha": "7720a9c89d1705f5ff0c533e035d1123c9ce3ba8", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=b8a18805817b17b09764527a86ebc551fa5900b3", "patch": "@@ -1,3 +1,15 @@\n+2010-10-23  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-act.c (OBJC_GEN_METHOD_LABEL): Updated comments.\n+\t(objc_demangle): Return NULL if demangling can not be done because\n+\tthe string to demangle is not an Objective-C mangled method name.\n+\tBe smarter in demangling method names so that at least for methods\n+\twith no arguments we are able to almost always demangle '_' correctly.\n+\tUpdated comments.\n+\t(objc_maybe_printable_name): New.\n+\t(objc_printable_name): Call objc_maybe_printable_name.  If it\n+\treturns NULL, call cxx_printable_name in Objective-C++.\n+\n 2010-10-21  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tBased on the CFString implementation in FSF apple/trunk branch."}, {"sha": "97ac0e8066b5d333b323dac1de396b85005abe09", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 150, "deletions": 13, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=b8a18805817b17b09764527a86ebc551fa5900b3", "patch": "@@ -75,9 +75,14 @@ bool in_late_binary_op = false;\n #endif  /* OBJCPLUS */\n \n /* This is the default way of generating a method name.  */\n-/* I am not sure it is really correct.\n-   Perhaps there's a danger that it will make name conflicts\n-   if method names contain underscores. -- rms.  */\n+/* This has the problem that \"test_method:argument:\" and\n+   \"test:method_argument:\" will generate the same name\n+   (\"_i_Test__test_method_argument_\" for an instance method of the\n+   class \"Test\"), so you can't have them both in the same class!\n+   Moreover, the demangling (going from\n+   \"_i_Test__test_method_argument\" back to the original name) is\n+   undefined because there are two correct ways of demangling the\n+   name.  */\n #ifndef OBJC_GEN_METHOD_LABEL\n #define OBJC_GEN_METHOD_LABEL(BUF, IS_INST, CLASS_NAME, CAT_NAME, SEL_NAME, NUM) \\\n   do {\t\t\t\t\t    \\\n@@ -10615,7 +10620,64 @@ dump_interface (FILE *fp, tree chain)\n   fprintf (fp, \"@end\\n\");\n }\n \n-/* Demangle function for Objective-C */\n+#if 0\n+/* Produce the pretty printing for an Objective-C method.  This is\n+   currently unused, but could be handy while reorganizing the pretty\n+   printing to be more robust.  */\n+static const char *\n+objc_pretty_print_method (bool is_class_method,\n+\t\t\t  const char *class_name,\n+\t\t\t  const char *category_name,\n+\t\t\t  const char *selector)\n+{\n+  if (category_name)\n+    {\n+      char *result = XNEWVEC (char, strlen (class_name) + strlen (category_name) \n+\t\t\t      + strlen (selector) + 7);\n+\n+      if (is_class_method)\n+\tsprintf (result, \"+[%s(%s) %s]\", class_name, category_name, selector);\n+      else\n+\tsprintf (result, \"-[%s(%s) %s]\", class_name, category_name, selector);\n+\n+      return result;\n+    }\n+  else\n+    {\n+      char *result = XNEWVEC (char, strlen (class_name)\n+\t\t\t      + strlen (selector) + 5);\n+\n+      if (is_class_method)\n+\tsprintf (result, \"+[%s %s]\", class_name, selector);\n+      else\n+\tsprintf (result, \"-[%s %s]\", class_name, selector);\n+\n+      return result;      \n+    }\n+}\n+#endif\n+\n+/* Demangle function for Objective-C.  Attempt to demangle the\n+   function name associated with a method (eg, going from\n+   \"_i_NSObject__class\" to \"-[NSObject class]\"); usually for the\n+   purpose of pretty printing or error messages.  Return the demangled\n+   name, or NULL if the string is not an Objective-C mangled method\n+   name.\n+\n+   Because of how the mangling is done, any method that has a '_' in\n+   its original name is at risk of being demangled incorrectly.  In\n+   some cases there are multiple valid ways to demangle a method name\n+   and there is no way we can decide.\n+\n+   TODO: objc_demangle() can't always get it right; the right way to\n+   get this correct for all method names would be to store the\n+   Objective-C method name somewhere in the function decl.  Then,\n+   there is no demangling to do; we'd just pull the method name out of\n+   the decl.  As an additional bonus, when printing error messages we\n+   could check for such a method name, and if we find it, we know the\n+   function is actually an Objective-C method and we could print error\n+   messages saying \"In method '+[NSObject class]\" instead of \"In\n+   function '+[NSObject class]\" as we do now.  */\n static const char *\n objc_demangle (const char *mangled)\n {\n@@ -10638,7 +10700,7 @@ objc_demangle (const char *mangled)\n       if (cp == NULL)\n \t{\n \t  free(demangled);      /* not mangled name */\n-\t  return mangled;\n+\t  return NULL;\n \t}\n       if (cp[1] == '_')  /* easy case: no category name */\n \t{\n@@ -10652,29 +10714,104 @@ objc_demangle (const char *mangled)\n \t  if (cp == 0)\n \t    {\n \t      free(demangled);    /* not mangled name */\n-\t      return mangled;\n+\t      return NULL;\n \t    }\n \t  *cp++ = ')';\n \t  *cp++ = ' ';            /* overwriting 1st char of method name... */\n \t  strcpy(cp, mangled + (cp - demangled)); /* get it back */\n \t}\n+      /* Now we have the method name.  We need to generally replace\n+\t '_' with ':' but trying to preserve '_' if it could only have\n+\t been in the mangled string because it was already in the\n+\t original name.  In cases where it's ambiguous, we assume that\n+\t any '_' originated from a ':'.  */\n+\n+      /* Initial '_'s in method name can't have been generating by\n+\t converting ':'s.  Skip them.  */\n       while (*cp && *cp == '_')\n-\tcp++;                   /* skip any initial underbars in method name */\n-      for (; *cp; cp++)\n-\tif (*cp == '_')\n-\t  *cp = ':';            /* replace remaining '_' with ':' */\n+\tcp++;\n+\n+      /* If the method name does not end with '_', then it has no\n+\t arguments and there was no replacement of ':'s with '_'s\n+\t during mangling.  Check for that case, and skip any\n+\t replacement if so.  This at least guarantees that methods\n+\t with no arguments are always demangled correctly (unless the\n+\t original name ends with '_').  */\n+      if (*(mangled + strlen (mangled) - 1) != '_')\n+\t{\n+\t  /* Skip to the end.  */\n+\t  for (; *cp; cp++)\n+\t    ;\n+\t}\n+      else\n+\t{\n+\t  /* Replace remaining '_' with ':'.  This may get it wrong if\n+\t     there were '_'s in the original name.  In most cases it\n+\t     is impossible to disambiguate.  */\n+\t  for (; *cp; cp++)\n+\t    if (*cp == '_')\n+\t      *cp = ':';         \n+\t}\n       *cp++ = ']';              /* closing right brace */\n       *cp++ = 0;                /* string terminator */\n       return demangled;\n     }\n   else\n-    return mangled;             /* not an objc mangled name */\n+    return NULL;             /* not an objc mangled name */\n }\n \n+/* Try to pretty-print a decl.  If the 'decl' is an Objective-C\n+   specific decl, return the printable name for it.  If not, return\n+   NULL.  */\n const char *\n-objc_printable_name (tree decl, int kind ATTRIBUTE_UNUSED)\n+objc_maybe_printable_name (tree decl, int v ATTRIBUTE_UNUSED)\n {\n-  return objc_demangle (IDENTIFIER_POINTER (DECL_NAME (decl)));\n+  const char *decl_name = IDENTIFIER_POINTER (DECL_NAME (decl));  \n+\n+  switch (TREE_CODE (decl))\n+    {\n+    case FUNCTION_DECL:\n+      return objc_demangle (decl_name);\n+      break;\n+      /* This unusual case (INSTANCE_METHOD_DECL and\n+\t CLASS_METHOD_DECL) seems to happen only in ObjC++ and to be a\n+\t by-product of the method attribute changes.  It would be nice\n+\t to be able to print \"-[NSObject autorelease] is deprecated\",\n+\t but to do that, we'd need to store the class and method name\n+\t in the method decl, which we currently don't do.  For now,\n+\t just return the name of the method.  We don't return NULL,\n+\t because that may trigger further attempts to pretty-print the\n+\t decl in C/C++, but they wouldn't know how to pretty-print\n+\t it.  */\n+    case INSTANCE_METHOD_DECL:\n+    case CLASS_METHOD_DECL:\n+      return decl_name;\n+      break;\n+    default:\n+      return NULL;\n+      break;\n+    }\n+}\n+\n+/* Return a printable name for 'decl'.  This first tries\n+   objc_maybe_printable_name(), and if that fails, it hands it back to\n+   C/C++.  'v' is the verbosity level, as this is a\n+   LANG_HOOKS_DECL_PRINTABLE_NAME.  */\n+const char *\n+objc_printable_name (tree decl, int v)\n+{\n+  const char *demangled_name = objc_maybe_printable_name (decl, v);\n+\n+  if (demangled_name != NULL)\n+    return demangled_name;\n+  else\n+    {\n+#ifdef OBJCPLUS\n+      return cxx_printable_name (decl, v);\n+#else\n+      return IDENTIFIER_POINTER (DECL_NAME (decl));\n+#endif\n+    }\n }\n \n static void"}, {"sha": "137f96562d7f936ebcf21882781333c3adfd7a67", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8a18805817b17b09764527a86ebc551fa5900b3", "patch": "@@ -1,3 +1,10 @@\n+2010-10-23  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/demangle-1.m: New test.\n+\t* obj-c++.dg/demangle-1.mm: New test.\n+\t* obj-c++.dg/demangle-2.mm: New test.\n+\t* obj-c++.dg/demangle-3.mm: New test.\t\n+\n 2010-10-23  Ian Lance Taylor  <iant@google.com>\n \n \t* gcc.c-torture/execute/20101011-1.c: New test."}, {"sha": "015a3aff848154c64f5ec0fc1fa4c98cc7806f3f", "filename": "gcc/testsuite/obj-c++.dg/demangle-1.mm", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdemangle-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdemangle-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdemangle-1.mm?ref=b8a18805817b17b09764527a86ebc551fa5900b3", "patch": "@@ -0,0 +1,35 @@\n+/* Test demangling a C++ function.  */\n+/* { dg-do run } */\n+\n+#include <cstring>\n+#include <cstdlib>\n+#include <iostream>\n+\n+class demangle_test\n+{\n+public:\n+  /* Return 0 if the demangling test succeeds.  */\n+  static int test_function1 ()\n+  {\n+    std::cout << __PRETTY_FUNCTION__ << \"\\n\";\n+    return std::strcmp (__PRETTY_FUNCTION__, \"static int demangle_test::test_function1()\");\n+  }\n+\n+  /* Return 0 if the demangling test succeeds.  */\n+  static int test_function2 (int ignored)\n+  {\n+    std::cout << __PRETTY_FUNCTION__ << \"\\n\";\n+    return std::strcmp (__PRETTY_FUNCTION__, \"static int demangle_test::test_function2(int)\");\n+  }\n+};\n+\n+int main ()\n+{\n+  if (demangle_test::test_function1 () != 0)\n+    abort ();\n+\n+  if (demangle_test::test_function2 (0) != 0)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "c58a4f8ce4fc075a2943636b0fd39ad10704b982", "filename": "gcc/testsuite/obj-c++.dg/demangle-2.mm", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdemangle-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdemangle-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdemangle-2.mm?ref=b8a18805817b17b09764527a86ebc551fa5900b3", "patch": "@@ -0,0 +1,50 @@\n+/* Test demangling an Objective-C method.  */\n+/* { dg-do run } */\n+\n+#include <cstring>\n+#include <cstdlib>\n+#include <iostream>\n+#include <objc/objc.h>\n+\n+@interface DemangleTest\n+{\n+  Class isa;\n+}\n++ (int) testFunction1;\n++ (int) test_function2;\n++ (int) __testFunction3: (int)unused  andArgument: (char)unused2;\n+@end\n+\n+@implementation DemangleTest\n++ (int) testFunction1\n+{\n+  std::cout << __PRETTY_FUNCTION__ << \"\\n\";\n+  return std::strcmp (__PRETTY_FUNCTION__, \"+[DemangleTest testFunction1]\");\n+}\n++ (int) test_function2\n+{\n+  std::cout << __PRETTY_FUNCTION__ << \"\\n\";\n+  return std::strcmp (__PRETTY_FUNCTION__, \"+[DemangleTest test_function2]\");\n+}\n++ (int) __testFunction3: (int)unused   andArgument: (char)unused2\n+{\n+  std::cout << __PRETTY_FUNCTION__ << \"\\n\";\n+  return std::strcmp (__PRETTY_FUNCTION__, \"+[DemangleTest __testFunction3:andArgument:]\");\n+}\n+@end\n+\n+int main ()\n+{\n+  if ([DemangleTest testFunction1] != 0)\n+      abort ();\n+\n+  if ([DemangleTest test_function2] != 0)\n+      abort ();\n+\n+  if ([DemangleTest __testFunction3:0 andArgument: 'c'] != 0)\n+      abort ();\n+  \n+  return 0;\n+}\n+\n+"}, {"sha": "01e6c618e5e4eef60c591cc2346e574c7e188646", "filename": "gcc/testsuite/obj-c++.dg/demangle-3.mm", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdemangle-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdemangle-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdemangle-3.mm?ref=b8a18805817b17b09764527a86ebc551fa5900b3", "patch": "@@ -0,0 +1,21 @@\n+/* Test demangling an Objective-C method in error messages.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface DemangleTest\n+{\n+  Class isa;\n+}\n++ (int) testFunction1;\n+@end\n+\n+@implementation DemangleTest\n++ (int) testFunction1\n+{\n+  /* TODO: Hack the testsuite so we can test that we get \n+     dg-error \"In function .+[DemangleTest testFunction1].\"\n+     At the moment, the message is filtered out.  */\n+  z; /* { dg-error \"was not declared\" } */\n+}\n+@end"}, {"sha": "0cee76b5582c767d48da264471dfa21eb52705d8", "filename": "gcc/testsuite/objc.dg/demangle-1.m", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Ftestsuite%2Fobjc.dg%2Fdemangle-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a18805817b17b09764527a86ebc551fa5900b3/gcc%2Ftestsuite%2Fobjc.dg%2Fdemangle-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fdemangle-1.m?ref=b8a18805817b17b09764527a86ebc551fa5900b3", "patch": "@@ -0,0 +1,56 @@\n+/* Test demangling an Objective-C method.  */\n+/* { dg-do run } */\n+\n+#include <string.h>\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include <objc/objc.h>\n+\n+@interface DemangleTest\n+{\n+  Class isa;\n+}\n++ (int) testFunction1;\n++ (int) test_function2;\n++ (int) __testFunction3: (int)unused  andArgument: (char)unused2;\n+@end\n+\n+@implementation DemangleTest\n++ (int) testFunction1\n+{\n+  printf (\"%s\\n\", __PRETTY_FUNCTION__);\n+  return strcmp (__PRETTY_FUNCTION__, \"+[DemangleTest testFunction1]\");\n+}\n+/* Note that in general, due to how mangling is done, it's impossible\n+   to get the demangling right for all functions containing '_' in the\n+   name.  But at least we should be able to get that right for single\n+   argument ones that don't end with '_', such as the following\n+   one.  */\n++ (int) test_function2\n+{\n+  printf (\"%s\\n\", __PRETTY_FUNCTION__);\n+  return strcmp (__PRETTY_FUNCTION__, \"+[DemangleTest test_function2]\");\n+}\n++ (int) __testFunction3: (int)unused   andArgument: (char)unused2\n+{\n+  printf (\"%s\\n\", __PRETTY_FUNCTION__);\n+  return strcmp (__PRETTY_FUNCTION__, \"+[DemangleTest __testFunction3:andArgument:]\");\n+}\n+@end\n+\n+int main ()\n+{\n+  if ([DemangleTest testFunction1] != 0)\n+      abort ();\n+\n+  if ([DemangleTest test_function2] != 0)\n+    abort ();\n+\n+  if ([DemangleTest __testFunction3:0 andArgument: 'c'] != 0)\n+      abort ();\n+\n+  return 0;\n+}\n+\n+"}]}