{"sha": "410d3f5de9e750be1a08b252a543c7b9c5577d34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEwZDNmNWRlOWU3NTBiZTFhMDhiMjUyYTU0M2M3YjljNTU3N2QzNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-18T23:02:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-18T23:02:49Z"}, "message": "(fold, case CONVERT_EXPR): Don't merge conversions if outer is to\nhandle a type with differing precision.\n\nFrom-SVN: r10145", "tree": {"sha": "b5ab00a485b8808fc97b5299212b6bc8c9e9f0d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5ab00a485b8808fc97b5299212b6bc8c9e9f0d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/410d3f5de9e750be1a08b252a543c7b9c5577d34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410d3f5de9e750be1a08b252a543c7b9c5577d34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410d3f5de9e750be1a08b252a543c7b9c5577d34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410d3f5de9e750be1a08b252a543c7b9c5577d34/comments", "author": null, "committer": null, "parents": [{"sha": "56a9868e9e0b537edf26383343b78a93eae418b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a9868e9e0b537edf26383343b78a93eae418b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56a9868e9e0b537edf26383343b78a93eae418b4"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "8c35dc49bfc7232034f76ec7a5fce89d6caea8cd", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410d3f5de9e750be1a08b252a543c7b9c5577d34/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410d3f5de9e750be1a08b252a543c7b9c5577d34/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=410d3f5de9e750be1a08b252a543c7b9c5577d34", "patch": "@@ -3445,11 +3445,14 @@ fold (expr)\n \t     float or both integer, we don't need the middle conversion if\n \t     it is wider than the final type and doesn't change the signedness\n \t     (for integers).  Avoid this if the final type is a pointer\n-\t     since then we sometimes need the inner conversion.  */\n+\t     since then we sometimes need the inner conversion.  Likewise if\n+\t     the outer has a precision not equal to the size of its mode.  */\n \t  if ((((inter_int || inter_ptr) && (inside_int || inside_ptr))\n \t       || (inter_float && inside_float))\n \t      && inter_prec >= inside_prec\n \t      && (inter_float || inter_unsignedp == inside_unsignedp)\n+\t      && ! (final_prec != GET_MODE_BITSIZE (TYPE_MODE (final_type))\n+\t\t    && TYPE_MODE (final_type) == TYPE_MODE (inter_type))\n \t      && ! final_ptr)\n \t    return convert (final_type, TREE_OPERAND (TREE_OPERAND (t, 0), 0));\n \n@@ -3471,7 +3474,10 @@ fold (expr)\n \t      && ((inter_unsignedp && inter_prec > inside_prec)\n \t\t  == (final_unsignedp && final_prec > inter_prec))\n \t      && ! (inside_ptr && inter_prec != final_prec)\n-\t      && ! (final_ptr && inside_prec != inter_prec))\n+\t      && ! (final_ptr && inside_prec != inter_prec)\n+\t      && ! (final_prec != GET_MODE_BITSIZE (TYPE_MODE (final_type))\n+\t\t    && TYPE_MODE (final_type) == TYPE_MODE (inter_type))\n+\t      && ! final_ptr)\n \t    return convert (final_type, TREE_OPERAND (TREE_OPERAND (t, 0), 0));\n \t}\n "}]}