{"sha": "a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAwNWI1YmVmZDZiYjMxNjZiMWQ3YzUyNjlhMmM3OTFlNGE0ZWU3Yw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2013-12-13T10:00:40Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2013-12-13T10:00:40Z"}, "message": "msp430.c (is_wakeup_func): New function.\n\n\t* config/msp430/msp430.c (is_wakeup_func): New function.  Returns\n\ttrue if the current function has the wakeup attribute.\n\t(msp430_start_function): Note if the function has the wakeup\n\tattribute.\n\t(msp430_attribute_table): Add wakeup attribute.\n\t(msp430_expand_epilogue): Add support for wakeup functions.\n\t* config/msp430/msp430.md (disable_interrupts): Emit a NOP after\n\tthe DINT instruction.\n\t* doc/extend.texi: Document the wakeup attribute.\n\nFrom-SVN: r205958", "tree": {"sha": "cdf53cc2a532fa7be52f7a04968c25e7ca478971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdf53cc2a532fa7be52f7a04968c25e7ca478971"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8111c8c64088b4efdf3e1a1a7818947fc2ae051", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8111c8c64088b4efdf3e1a1a7818947fc2ae051", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8111c8c64088b4efdf3e1a1a7818947fc2ae051"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "ce87c3898585473d6709fe782c6ca812e127af53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c", "patch": "@@ -1,3 +1,15 @@\n+2013-12-13  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/msp430/msp430.c (is_wakeup_func): New function.  Returns\n+\ttrue if the current function has the wakeup attribute.\n+\t(msp430_start_function): Note if the function has the wakeup\n+\tattribute.\n+\t(msp430_attribute_table): Add wakeup attribute.\n+\t(msp430_expand_epilogue): Add support for wakeup functions.\n+\t* config/msp430/msp430.md (disable_interrupts): Emit a NOP after\n+\tthe DINT instruction.\n+\t* doc/extend.texi: Document the wakeup attribute.\n+\n 2013-12-13  Kai Tietz  <kitetz@redhat.com>\n \n \tPR c++/57897"}, {"sha": "6887d505d31ca7c123a564bded9a2edf9f7e71d4", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c", "patch": "@@ -188,7 +188,7 @@ msp430_mcu_name (void)\n \tmcu_name[i] = TOUPPER (mcu_name[i]);\n       return mcu_name;\n     }\n-  \n+\n   return msp430x ? \"__MSP430XGENERIC__\" : \"__MSP430GENERIC__\";\n }\n \n@@ -966,6 +966,12 @@ msp430_is_interrupt_func (void)\n   return is_attr_func (\"interrupt\");\n }\n \n+static bool\n+is_wakeup_func (void)\n+{\n+  return msp430_is_interrupt_func () && is_attr_func (\"wakeup\");\n+}\n+\n static inline bool\n is_naked_func (void)\n {\n@@ -1005,6 +1011,8 @@ msp430_start_function (FILE *outfile, HOST_WIDE_INT hwi_local ATTRIBUTE_UNUSED)\n \tfprintf (outfile, \"reentrant \");\n       if (is_critical_func ())\n \tfprintf (outfile, \"critical \");\n+      if (is_wakeup_func ())\n+\tfprintf (outfile, \"wakeup \");\n       fprintf (outfile, \"\\n\");\n     }\n \n@@ -1131,6 +1139,7 @@ const struct attribute_spec msp430_attribute_table[] =\n   { \"naked\",          0, 0, true,  false, false, msp430_attr, false },\n   { \"reentrant\",      0, 0, true,  false, false, msp430_attr, false },\n   { \"critical\",       0, 0, true,  false, false, msp430_attr, false },\n+  { \"wakeup\",         0, 0, true,  false, false, msp430_attr, false },\n   { NULL,             0, 0, false, false, false, NULL,        false }\n };\n \n@@ -1409,6 +1418,14 @@ msp430_expand_epilogue (int is_eh)\n \n   emit_insn (gen_epilogue_start_marker ());\n \n+  if (is_wakeup_func ())\n+    /* Clear the SCG1, SCG0, OSCOFF and CPUOFF bits in the saved copy of the\n+       status register current residing on the stack.  When this function\n+       executes its RETI instruction the SR will be updated with this saved\n+       value, thus ensuring that the processor is woken up from any low power\n+       state in which it may be residing.  */\n+    emit_insn (gen_bic_SR (GEN_INT (0xf0)));\n+\n   fs = cfun->machine->framesize_locals + cfun->machine->framesize_outgoing;\n \n   increment_stack (fs);\n@@ -1828,7 +1845,7 @@ msp430_output_labelref (FILE *file, const char *name)\n static void\n msp430_print_operand_raw (FILE * file, rtx op)\n {\n-  int i;\n+  HOST_WIDE_INT i;\n \n   switch (GET_CODE (op))\n     {\n@@ -1839,9 +1856,9 @@ msp430_print_operand_raw (FILE * file, rtx op)\n     case CONST_INT:\n       i = INTVAL (op);\n       if (TARGET_ASM_HEX)\n-\tfprintf (file, \"%#x\", i);\n+\tfprintf (file, \"%#\" HOST_WIDE_INT_PRINT \"x\", i);\n       else\n-\tfprintf (file, \"%d\", i);\n+\tfprintf (file, \"%\" HOST_WIDE_INT_PRINT \"d\", i);\n       break;\n \n     case CONST:"}, {"sha": "21720a47c11fc928177359c8ef7d87e19dc81821", "filename": "gcc/config/msp430/msp430.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.md?ref=a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c", "patch": "@@ -1253,11 +1253,11 @@\n   \"1\"\n   \"NOP\"\n )\n-  \n+\n (define_insn \"disable_interrupts\"\n   [(unspec_volatile [(const_int 0)] UNS_DINT)]\n   \"\"\n-  \"DINT\"\n+  \"DINT \\; NOP\"\n   )\n \n (define_insn \"enable_interrupts\""}, {"sha": "af258d72faf9a821225c35da2e99bcff5b9e59cb", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c", "patch": "@@ -2919,6 +2919,13 @@ upon exit.  Reentrant functions cannot also have the @code{naked}\n or @code{critical} attributes.  They can have the @code{interrupt}\n attribute.\n \n+@item wakeup\n+@cindex @code{wakeup} attribute\n+This attribute only applies to interrupt functions.  It is silently\n+ignored if applied to a non-interrupt function.  A wakeup interrupt\n+function will rouse the processor from any low-power state that it\n+might be in when the function exits.\n+\n @end table\n \n On Epiphany targets one or more optional parameters can be added like this:"}]}