{"sha": "847898f6f563031bad4d5b3f3587146f5549627c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ3ODk4ZjZmNTYzMDMxYmFkNGQ1YjNmMzU4NzE0NmY1NTQ5NjI3Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-11-16T20:30:19Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-11-16T20:30:19Z"}, "message": "pa.c: Reflect changes in calling sequences of alter_reg and emit_cmp_insn.\n\n\t* config/pa/pa.c: Reflect changes in calling sequences of alter_reg and\n\temit_cmp_insn.\n\nFrom-SVN: r47101", "tree": {"sha": "a045b0fb8db35d2c99d582d6a8ee875012f15cd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a045b0fb8db35d2c99d582d6a8ee875012f15cd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/847898f6f563031bad4d5b3f3587146f5549627c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847898f6f563031bad4d5b3f3587146f5549627c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/847898f6f563031bad4d5b3f3587146f5549627c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847898f6f563031bad4d5b3f3587146f5549627c/comments", "author": null, "committer": null, "parents": [{"sha": "d0225025e0d9f4c59a8fa724598ba6ae056e0684", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0225025e0d9f4c59a8fa724598ba6ae056e0684", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0225025e0d9f4c59a8fa724598ba6ae056e0684"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "070d606c8567b79e95c1d75a9f4f4e78849d3b7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847898f6f563031bad4d5b3f3587146f5549627c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847898f6f563031bad4d5b3f3587146f5549627c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=847898f6f563031bad4d5b3f3587146f5549627c", "patch": "@@ -1,3 +1,8 @@\n+Fri Nov 16 15:22:35 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* config/pa/pa.c: Reflect changes in calling sequences of alter_reg and\n+\temit_cmp_insn.\n+\n 2001-11-16  Andreas Jaeger  <aj@suse.de>\n \n \t* cfglayout.c (fixup_fallthru_exit_predecesor): Make void, rename"}, {"sha": "617071e18d564d63b05e52f8a1c4b6385aeea86a", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847898f6f563031bad4d5b3f3587146f5549627c/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847898f6f563031bad4d5b3f3587146f5549627c/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=847898f6f563031bad4d5b3f3587146f5549627c", "patch": "@@ -1209,7 +1209,7 @@ emit_move_sequence (operands, mode, scratch_reg)\n       rtx temp = gen_rtx_SUBREG (GET_MODE (operand0),\n \t\t\t\t reg_equiv_mem [REGNO (SUBREG_REG (operand0))],\n \t\t\t\t SUBREG_BYTE (operand0));\n-      operand0 = alter_subreg (temp);\n+      operand0 = alter_subreg (&temp);\n     }\n \n   if (scratch_reg\n@@ -1226,7 +1226,7 @@ emit_move_sequence (operands, mode, scratch_reg)\n       rtx temp = gen_rtx_SUBREG (GET_MODE (operand1),\n \t\t\t\t reg_equiv_mem [REGNO (SUBREG_REG (operand1))],\n \t\t\t\t SUBREG_BYTE (operand1));\n-      operand1 = alter_subreg (temp);\n+      operand1 = alter_subreg (&temp);\n     }\n \n   if (scratch_reg && reload_in_progress && GET_CODE (operand0) == MEM\n@@ -3551,24 +3551,20 @@ return_addr_rtx (count, frameaddr)\n      If it is an export stub, than our return address is really in\n      -24[frameaddr].  */\n \n-  emit_cmp_insn (gen_rtx_MEM (SImode, ins),\n-\t\t GEN_INT (0x4bc23fd1),\n-\t\t NE, NULL_RTX, SImode, 1, 0);\n+  emit_cmp_insn (gen_rtx_MEM (SImode, ins), GEN_INT (0x4bc23fd1), NE,\n+\t\t NULL_RTX, SImode, 1);\n   emit_jump_insn (gen_bne (label));\n \n   emit_cmp_insn (gen_rtx_MEM (SImode, plus_constant (ins, 4)),\n-\t\t GEN_INT (0x004010a1),\n-\t\t NE, NULL_RTX, SImode, 1, 0);\n+\t\t GEN_INT (0x004010a1), NE, NULL_RTX, SImode, 1);\n   emit_jump_insn (gen_bne (label));\n \n   emit_cmp_insn (gen_rtx_MEM (SImode, plus_constant (ins, 8)),\n-\t\t GEN_INT (0x00011820),\n-\t\t NE, NULL_RTX, SImode, 1, 0);\n+\t\t GEN_INT (0x00011820), NE, NULL_RTX, SImode, 1);\n   emit_jump_insn (gen_bne (label));\n \n   emit_cmp_insn (gen_rtx_MEM (SImode, plus_constant (ins, 12)),\n-\t\t GEN_INT (0xe0400002),\n-\t\t NE, NULL_RTX, SImode, 1, 0);\n+\t\t GEN_INT (0xe0400002), NE, NULL_RTX, SImode, 1);\n \n   /* If there is no export stub then just use the value saved from\n      the return pointer register.  */"}]}