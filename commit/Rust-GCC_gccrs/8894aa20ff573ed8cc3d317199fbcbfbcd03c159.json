{"sha": "8894aa20ff573ed8cc3d317199fbcbfbcd03c159", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg5NGFhMjBmZjU3M2VkOGNjM2QzMTcxOTlmYmNiZmJjZDAzYzE1OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T10:15:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T10:15:59Z"}, "message": "[multiple changes]\n\n2014-08-01  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications, case Aspect_Import):\n\tSet Is_Imported flag at once, to simplify subsequent legality\n\tchecks. Reject the aspect on an object whose declaration has an\n\texplicit initial value.\n\t* sem_prag.adb (Process_Import_Or_Interface): Use original node\n\tto check legality of an initial value for an imported entity.\n\tSet Is_Imported flag in case of error to prevent cascaded errors.\n\tDo not set the Is_Imported flag if the pragma comes from an\n\taspect, because it is already done when analyzing the aspect.\n\n2014-08-01  Emmanuel Briot  <briot@adacore.com>\n\n\t* g-regpat.adb (Parse): Add support for non-capturing parenthesis.\n\nFrom-SVN: r213447", "tree": {"sha": "2ad58359fd383b19cc1da5d950b502f3eb5a1b82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ad58359fd383b19cc1da5d950b502f3eb5a1b82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8894aa20ff573ed8cc3d317199fbcbfbcd03c159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8894aa20ff573ed8cc3d317199fbcbfbcd03c159", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8894aa20ff573ed8cc3d317199fbcbfbcd03c159", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8894aa20ff573ed8cc3d317199fbcbfbcd03c159/comments", "author": null, "committer": null, "parents": [{"sha": "7b4ebba52333641f9f09c8079e1d73e9f638083f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b4ebba52333641f9f09c8079e1d73e9f638083f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b4ebba52333641f9f09c8079e1d73e9f638083f"}], "stats": {"total": 125, "additions": 97, "deletions": 28}, "files": [{"sha": "7f190853be69b0e06166224ec8eea7bce1b7a41b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8894aa20ff573ed8cc3d317199fbcbfbcd03c159/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8894aa20ff573ed8cc3d317199fbcbfbcd03c159/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8894aa20ff573ed8cc3d317199fbcbfbcd03c159", "patch": "@@ -1,3 +1,19 @@\n+2014-08-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications, case Aspect_Import):\n+\tSet Is_Imported flag at once, to simplify subsequent legality\n+\tchecks. Reject the aspect on an object whose declaration has an\n+\texplicit initial value.\n+\t* sem_prag.adb (Process_Import_Or_Interface): Use original node\n+\tto check legality of an initial value for an imported entity.\n+\tSet Is_Imported flag in case of error to prevent cascaded errors.\n+\tDo not set the Is_Imported flag if the pragma comes from an\n+\taspect, because it is already done when analyzing the aspect.\n+\n+2014-08-01  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* g-regpat.adb (Parse): Add support for non-capturing parenthesis.\n+\n 2014-08-01  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch7.adb, einfo.adb, einfo.ads, sem_ch13.adb: Minor change of"}, {"sha": "842b6e362c2b5cb4a0ed411098b3f3b0a1eaf70e", "filename": "gcc/ada/s-regpat.adb", "status": "modified", "additions": 37, "deletions": 21, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8894aa20ff573ed8cc3d317199fbcbfbcd03c159/gcc%2Fada%2Fs-regpat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8894aa20ff573ed8cc3d317199fbcbfbcd03c159/gcc%2Fada%2Fs-regpat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-regpat.adb?ref=8894aa20ff573ed8cc3d317199fbcbfbcd03c159", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --                                                                          --\n --               Copyright (C) 1986 by University of Toronto.               --\n---                      Copyright (C) 1999-2013, AdaCore                    --\n+--                      Copyright (C) 1999-2014, AdaCore                    --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -410,10 +410,13 @@ package body System.Regpat is\n \n       procedure Parse\n         (Parenthesized : Boolean;\n+         Capturing     : Boolean;\n          Flags         : out Expression_Flags;\n          IP            : out Pointer);\n       --  Parse regular expression, i.e. main body or parenthesized thing\n       --  Caller must absorb opening parenthesis.\n+      --  Capturing should be set to True when we have an open parenthesis\n+      --  from which we want the user to extra text.\n \n       procedure Parse_Branch\n         (Flags         : out Expression_Flags;\n@@ -831,9 +834,10 @@ package body System.Regpat is\n       --  the branches to what follows makes it hard to avoid.\n \n       procedure Parse\n-         (Parenthesized  : Boolean;\n-          Flags          : out Expression_Flags;\n-          IP             : out Pointer)\n+         (Parenthesized : Boolean;\n+          Capturing     : Boolean;\n+          Flags         : out Expression_Flags;\n+          IP            : out Pointer)\n       is\n          E           : String renames Expression;\n          Br, Br2     : Pointer;\n@@ -847,7 +851,7 @@ package body System.Regpat is\n \n          --  Make an OPEN node, if parenthesized\n \n-         if Parenthesized then\n+         if Parenthesized and then Capturing then\n             if Matcher.Paren_Count > Max_Paren_Count then\n                Fail (\"too many ()\");\n             end if;\n@@ -856,7 +860,6 @@ package body System.Regpat is\n             Matcher.Paren_Count := Matcher.Paren_Count + 1;\n             IP := Emit_Node (OPEN);\n             Emit (Character'Val (Par_No));\n-\n          else\n             IP := 0;\n             Par_No := 0;\n@@ -913,14 +916,19 @@ package body System.Regpat is\n          --  Make a closing node, and hook it on the end\n \n          if Parenthesized then\n-            Ender := Emit_Node (CLOSE);\n-            Emit (Character'Val (Par_No));\n+            if Capturing then\n+               Ender := Emit_Node (CLOSE);\n+               Emit (Character'Val (Par_No));\n+               Link_Tail (IP, Ender);\n+            else\n+               --  need to keep looking after the closing parenthesis\n+               null;\n+            end if;\n          else\n             Ender := Emit_Node (EOP);\n+            Link_Tail (IP, Ender);\n          end if;\n \n-         Link_Tail (IP, Ender);\n-\n          if Have_Branch and then Emit_Ptr <= PM.Size + 1 then\n \n             --  Hook the tails of the branches to the closing node\n@@ -945,7 +953,7 @@ package body System.Regpat is\n \n          elsif Parse_Pos <= Parse_End then\n             if E (Parse_Pos) = ')'  then\n-               Fail (\"unmatched ()\");\n+               Fail (\"unmatched ')'\");\n             else\n                Fail (\"junk on end\");         -- \"Can't happen\"\n             end if;\n@@ -1003,16 +1011,24 @@ package body System.Regpat is\n                   New_Flags : Expression_Flags;\n \n                begin\n-                  Parse (True, New_Flags, IP);\n-\n-                  if IP = 0 then\n-                     return;\n+                  if Parse_Pos <= Parse_End - 1\n+                     and then Expression (Parse_Pos) = '?'\n+                     and then Expression (Parse_Pos + 1) = ':'\n+                  then\n+                     Parse_Pos := Parse_Pos + 2;\n+                     --  non-capturing parenthesis\n+                     Parse (True, False, New_Flags, IP);\n+                  else\n+                     --  capturing parenthesis\n+                     Parse (True, True, New_Flags, IP);\n+                     Expr_Flags.Has_Width :=\n+                       Expr_Flags.Has_Width or else New_Flags.Has_Width;\n+                     Expr_Flags.SP_Start :=\n+                       Expr_Flags.SP_Start or else New_Flags.SP_Start;\n+                     if IP = 0 then\n+                        return;\n+                     end if;\n                   end if;\n-\n-                  Expr_Flags.Has_Width :=\n-                    Expr_Flags.Has_Width or else New_Flags.Has_Width;\n-                  Expr_Flags.SP_Start :=\n-                    Expr_Flags.SP_Start or else New_Flags.SP_Start;\n                end;\n \n             when '|' | ASCII.LF | ')' =>\n@@ -1971,7 +1987,7 @@ package body System.Regpat is\n    --  Start of processing for Compile\n \n    begin\n-      Parse (False, Expr_Flags, Result);\n+      Parse (False, False, Expr_Flags, Result);\n \n       if Result = 0 then\n          Fail (\"Couldn't compile expression\");"}, {"sha": "5c8bf5e1c3cba23692c271bb81dcab48326d9e63", "filename": "gcc/ada/s-regpat.ads", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8894aa20ff573ed8cc3d317199fbcbfbcd03c159/gcc%2Fada%2Fs-regpat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8894aa20ff573ed8cc3d317199fbcbfbcd03c159/gcc%2Fada%2Fs-regpat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-regpat.ads?ref=8894aa20ff573ed8cc3d317199fbcbfbcd03c159", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                                                                          --\n --               Copyright (C) 1986 by University of Toronto.               --\n---                     Copyright (C) 1996-2010, AdaCore                     --\n+--                     Copyright (C) 1996-2014, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -78,8 +78,10 @@ package System.Regpat is\n    --            ::= [^ range range ...]  -- matches any character not listed\n    --            ::= .                    -- matches any single character\n    --                                     -- except newlines\n-   --            ::= ( expr )             -- parens used for grouping\n-   --            ::= \\ num                -- reference to num-th parenthesis\n+   --            ::= ( expr )             -- parenthesis used for grouping\n+   --            ::= (?: expr )           -- non-capturing parenthesis\n+   --            ::= \\ num                -- reference to num-th capturing\n+   --                                        parenthesis\n \n    --     range  ::= char - char          -- matches chars in given range\n    --            ::= nchr\n@@ -345,6 +347,9 @@ package System.Regpat is\n    --  N'th parenthesized subexpressions; Matches (0) is for the whole\n    --  expression.\n    --\n+   --  Non-capturing parenthesis (introduced with (?:...)) can not be\n+   --  retrieved and do not count in the match array index.\n+   --\n    --  For instance, if your regular expression is: \"a((b*)c+)(d+)\", then\n    --                                                 12      3\n    --     Matches (0) is for \"a((b*)c+)(d+)\" (the entire expression)"}, {"sha": "86a36ced87f40a6d00dcea34fdd402d592163be2", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8894aa20ff573ed8cc3d317199fbcbfbcd03c159/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8894aa20ff573ed8cc3d317199fbcbfbcd03c159/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=8894aa20ff573ed8cc3d317199fbcbfbcd03c159", "patch": "@@ -2915,6 +2915,21 @@ package body Sem_Ch13 is\n                      --  that verifed that there was a matching convention\n                      --  is now obsolete.\n \n+                     if A_Id = Aspect_Import then\n+                        Set_Is_Imported (E);\n+\n+                        --  An imported entity cannot have an explicit\n+                        --  initialization.\n+\n+                        if Nkind (N) = N_Object_Declaration\n+                          and then Present (Expression (N))\n+                        then\n+                           Error_Msg_N\n+                             (\"imported entities cannot be initialized \"\n+                              & \"(RM B.1(24))\", Expression (N));\n+                        end if;\n+                     end if;\n+\n                      goto Continue;\n                   end if;\n \n@@ -2930,7 +2945,7 @@ package body Sem_Ch13 is\n                     and then Nkind (Parent (N)) /= N_Compilation_Unit\n                   then\n                      Error_Msg_N\n-                        (\"incorrect context for library unit aspect&\", Id);\n+                       (\"incorrect context for library unit aspect&\", Id);\n                      goto Continue;\n                   end if;\n "}, {"sha": "ea7477915688cd98bb4e029992cb27789eab4912", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8894aa20ff573ed8cc3d317199fbcbfbcd03c159/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8894aa20ff573ed8cc3d317199fbcbfbcd03c159/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=8894aa20ff573ed8cc3d317199fbcbfbcd03c159", "patch": "@@ -7838,16 +7838,28 @@ package body Sem_Prag is\n             --  the code generator making an implicit initialization explicit.\n \n             elsif Present (Expression (Parent (Def_Id)))\n-              and then Comes_From_Source (Expression (Parent (Def_Id)))\n+              and then Comes_From_Source\n+                         (Original_Node (Expression (Parent (Def_Id))))\n             then\n+\n+               --  Set imported flag to prevent cascaded errors.\n+\n+               Set_Is_Imported (Def_Id);\n+\n                Error_Msg_Sloc := Sloc (Def_Id);\n                Error_Pragma_Arg\n                  (\"no initialization allowed for declaration of& #\",\n                   \"\\imported entities cannot be initialized (RM B.1(24))\",\n                   Arg2);\n \n             else\n-               Set_Imported (Def_Id);\n+               --  If the pragma comes from an aspect specification the\n+               --  Is_Imported flag has already been set.\n+\n+               if not From_Aspect_Specification (N) then\n+                  Set_Imported (Def_Id);\n+               end if;\n+\n                Process_Interface_Name (Def_Id, Arg3, Arg4);\n \n                --  Note that we do not set Is_Public here. That's because we\n@@ -7922,7 +7934,12 @@ package body Sem_Prag is\n                   exit;\n \n                else\n-                  Set_Imported (Def_Id);\n+                  --  If the pragma comes from an aspect specification the\n+                  --  Is_Imported flag has already been set.\n+\n+                  if not From_Aspect_Specification (N) then\n+                     Set_Imported (Def_Id);\n+                  end if;\n \n                   --  Reject an Import applied to an abstract subprogram\n "}]}