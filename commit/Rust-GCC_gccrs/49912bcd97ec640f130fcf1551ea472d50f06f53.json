{"sha": "49912bcd97ec640f130fcf1551ea472d50f06f53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk5MTJiY2Q5N2VjNjQwZjEzMGZjZjE1NTFlYTQ3MmQ1MGYwNmY1Mw==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2008-09-04T21:02:30Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2008-09-04T21:02:30Z"}, "message": "mips.h (ISA_HAS_CINS): New macro.\n\n\t* config/mips/mips.h (ISA_HAS_CINS): New macro.\n\t* config/mips/mips-protos.h (mask_low_and_shift_p,\n\tmask_low_and_shift_len): Declare.\n\t* config/mips/mips.c (mask_low_and_shift_p,\n\tmask_low_and_shift_len): New functions.\n\t(mips_print_operand): Handle new operand prefix \"m\".\n\t* config/mips/mips.md (*cins<mode>): New pattern.\n\ntestsuite/\n\t* gcc.target/mips/octeon-cins-1.c: New test.\n\t* gcc.target/mips/octeon-cins-2.c: New test.\n\nFrom-SVN: r140008", "tree": {"sha": "8728d4656e53438f747bef9025ee567345b165e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8728d4656e53438f747bef9025ee567345b165e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49912bcd97ec640f130fcf1551ea472d50f06f53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49912bcd97ec640f130fcf1551ea472d50f06f53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49912bcd97ec640f130fcf1551ea472d50f06f53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49912bcd97ec640f130fcf1551ea472d50f06f53/comments", "author": null, "committer": null, "parents": [{"sha": "192a671ee333c190c483d54b32c3b26510997abc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/192a671ee333c190c483d54b32c3b26510997abc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/192a671ee333c190c483d54b32c3b26510997abc"}], "stats": {"total": 117, "additions": 117, "deletions": 0}, "files": [{"sha": "2350a47c9eb45d1f5635af4c24d258c9f2c91a64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49912bcd97ec640f130fcf1551ea472d50f06f53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49912bcd97ec640f130fcf1551ea472d50f06f53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49912bcd97ec640f130fcf1551ea472d50f06f53", "patch": "@@ -1,3 +1,13 @@\n+2008-09-04  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* config/mips/mips.h (ISA_HAS_CINS): New macro.\n+\t* config/mips/mips-protos.h (mask_low_and_shift_p,\n+\tmask_low_and_shift_len): Declare.\n+\t* config/mips/mips.c (mask_low_and_shift_p,\n+\tmask_low_and_shift_len): New functions.\n+\t(mips_print_operand): Handle new operand prefix \"m\".\n+\t* config/mips/mips.md (*cins<mode>): New pattern.\n+\n 2008-09-04  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* config/bfin/bfin.c (gen_one_bundle): Don't create new nops when"}, {"sha": "9403945a4f3b0761faeb06c3154c79e61fb1f98d", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49912bcd97ec640f130fcf1551ea472d50f06f53/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49912bcd97ec640f130fcf1551ea472d50f06f53/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=49912bcd97ec640f130fcf1551ea472d50f06f53", "patch": "@@ -314,6 +314,10 @@ extern bool mips_use_ins_ext_p (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n extern const char *mips16e_output_save_restore (rtx, HOST_WIDE_INT);\n extern bool mips16e_save_restore_pattern_p (rtx, HOST_WIDE_INT,\n \t\t\t\t\t    struct mips16e_save_restore_info *);\n+\n+extern bool mask_low_and_shift_p (enum machine_mode, rtx, rtx, int);\n+extern int mask_low_and_shift_len (enum machine_mode, rtx, rtx);\n+\n union mips_gen_fn_ptrs\n {\n   rtx (*fn_6) (rtx, rtx, rtx, rtx, rtx, rtx);"}, {"sha": "911f93c2b4fcdae93ae9f7c71af91990e325fc7c", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49912bcd97ec640f130fcf1551ea472d50f06f53/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49912bcd97ec640f130fcf1551ea472d50f06f53/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=49912bcd97ec640f130fcf1551ea472d50f06f53", "patch": "@@ -6659,6 +6659,32 @@ mips_use_ins_ext_p (rtx op, HOST_WIDE_INT width, HOST_WIDE_INT bitpos)\n \n   return true;\n }\n+\n+/* Check if MASK and SHIFT are valid in mask-low-and-shift-left\n+   operation if MAXLEN is the maxium length of consecutive bits that\n+   can make up MASK.  MODE is the mode of the operation.  See\n+   mask_low_and_shift_len for the actual definition.  */\n+\n+bool\n+mask_low_and_shift_p (enum machine_mode mode, rtx mask, rtx shift, int maxlen)\n+{\n+  return IN_RANGE (mask_low_and_shift_len (mode, mask, shift), 1, maxlen);\n+}\n+\n+/* The canonical form of a mask-low-and-shift-left operation is\n+   (and (ashift X SHIFT) MASK) where MASK has the lower SHIFT number of bits\n+   cleared.  Thus we need to shift MASK to the right before checking if it\n+   is a valid mask value.  MODE is the mode of the operation.  If true\n+   return the length of the mask, otherwise return -1.  */\n+\n+int\n+mask_low_and_shift_len (enum machine_mode mode, rtx mask, rtx shift)\n+{\n+  HOST_WIDE_INT shval;\n+\n+  shval = INTVAL (shift) & (GET_MODE_BITSIZE (mode) - 1);\n+  return exact_log2 ((UINTVAL (mask) >> shval) + 1);\n+}\n \f\n /* Return true if -msplit-addresses is selected and should be honored.\n \n@@ -7026,6 +7052,7 @@ mips_print_float_branch_condition (FILE *file, enum rtx_code code, int letter)\n    'X'\tPrint CONST_INT OP in hexadecimal format.\n    'x'\tPrint the low 16 bits of CONST_INT OP in hexadecimal format.\n    'd'\tPrint CONST_INT OP in decimal.\n+   'm'\tPrint one less than CONST_INT OP in decimal.\n    'h'\tPrint the high-part relocation associated with OP, after stripping\n \t  any outermost HIGH.\n    'R'\tPrint the low-part relocation associated with OP.\n@@ -7081,6 +7108,13 @@ mips_print_operand (FILE *file, rtx op, int letter)\n \toutput_operand_lossage (\"invalid use of '%%%c'\", letter);\n       break;\n \n+    case 'm':\n+      if (GET_CODE (op) == CONST_INT)\n+\tfprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (op) - 1);\n+      else\n+\toutput_operand_lossage (\"invalid use of '%%%c'\", letter);\n+      break;\n+\n     case 'h':\n       if (code == HIGH)\n \top = XEXP (op, 0);"}, {"sha": "a3f47f79dcfed679fcb6cfb0122fa8ec681fc25b", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49912bcd97ec640f130fcf1551ea472d50f06f53/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49912bcd97ec640f130fcf1551ea472d50f06f53/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=49912bcd97ec640f130fcf1551ea472d50f06f53", "patch": "@@ -1009,6 +1009,9 @@ enum mips_code_readable_setting {\n /* ISA includes the bbit* instructions.  */\n #define ISA_HAS_BBIT\t\tTARGET_OCTEON\n \n+/* ISA includes the cins instruction.  */\n+#define ISA_HAS_CINS\t\tTARGET_OCTEON\n+\n /* ISA includes the pop instruction.  */\n #define ISA_HAS_POP\t\tTARGET_OCTEON\n \f"}, {"sha": "04dd30a1e10c4e57afece769488cfd9726380812", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49912bcd97ec640f130fcf1551ea472d50f06f53/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49912bcd97ec640f130fcf1551ea472d50f06f53/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=49912bcd97ec640f130fcf1551ea472d50f06f53", "patch": "@@ -3441,6 +3441,28 @@\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"<MODE>\")])\n \n+;; Combiner pattern for cins (clear and insert bit field).  We can\n+;; implement mask-and-shift-left operation with this.  Note that if\n+;; the upper bit of the mask is set in an SImode operation, the mask\n+;; itself will be sign-extended.  mask_low_and_shift_len will\n+;; therefore be greater than our threshold of 32.\n+\n+(define_insn \"*cins<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(and:GPR\n+\t (ashift:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t     (match_operand:GPR 2 \"const_int_operand\" \"\"))\n+\t (match_operand:GPR 3 \"const_int_operand\" \"\")))]\n+  \"ISA_HAS_CINS\n+   && mask_low_and_shift_p (<MODE>mode, operands[3], operands[2], 32)\"\n+{\n+  operands[3] =\n+    GEN_INT (mask_low_and_shift_len (<MODE>mode, operands[3], operands[2]));\n+  return \"cins\\t%0,%1,%2,%m3\";\n+}\n+  [(set_attr \"type\"     \"shift\")\n+   (set_attr \"mode\"     \"<MODE>\")])\n+\n ;; Unaligned word moves generated by the bit field patterns.\n ;;\n ;; As far as the rtl is concerned, both the left-part and right-part"}, {"sha": "b6f573e7fc03e221f3a2d4fe0c4e8dfa80b61679", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49912bcd97ec640f130fcf1551ea472d50f06f53/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49912bcd97ec640f130fcf1551ea472d50f06f53/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=49912bcd97ec640f130fcf1551ea472d50f06f53", "patch": "@@ -1,3 +1,8 @@\n+2008-09-04  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* gcc.target/mips/octeon-cins-1.c: New test.\n+\t* gcc.target/mips/octeon-cins-2.c: New test.\n+\n 2008-09-04  Richard Guenther  <rguenther@suse.de>\n \n \t* gfortran.dg/internal_pack_4.f90: Adjust pattern."}, {"sha": "27dc6b3d2b745d15528dcbc524219a133911f3da", "filename": "gcc/testsuite/gcc.target/mips/octeon-cins-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49912bcd97ec640f130fcf1551ea472d50f06f53/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-cins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49912bcd97ec640f130fcf1551ea472d50f06f53/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-cins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-cins-1.c?ref=49912bcd97ec640f130fcf1551ea472d50f06f53", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* The tests also work with -mgp32.  For long long tests, only one of\n+   the 32-bit parts is used.  */\n+/* { dg-mips-options \"-O -march=octeon\" } */\n+/* { dg-final { scan-assembler-times \"\\tcins\\t\" 3 } } */\n+/* { dg-final { scan-assembler-not \"\\tandi\\t|sll\\t\" } } */\n+\n+NOMIPS16 long long\n+f (long long i)\n+{\n+  return (i & 0xff) << 34;\n+}\n+\n+NOMIPS16 int\n+g (int i)\n+{\n+  return (i << 4) & 0xff0;\n+}\n+\n+NOMIPS16 long long\n+h (long long i)\n+{\n+  return (i << 4) & 0xfff;\n+}"}, {"sha": "c60ee933ffab27b98afb4cb0dff1745213445d65", "filename": "gcc/testsuite/gcc.target/mips/octeon-cins-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49912bcd97ec640f130fcf1551ea472d50f06f53/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-cins-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49912bcd97ec640f130fcf1551ea472d50f06f53/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-cins-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-cins-2.c?ref=49912bcd97ec640f130fcf1551ea472d50f06f53", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O -march=octeon -mgp64\" } */\n+/* { dg-final { scan-assembler-not \"\\tcins\\t\" } } */\n+\n+NOMIPS16 unsigned\n+f (unsigned i)\n+{\n+  return (i & 0xff) << 24;\n+}\n+\n+NOMIPS16 unsigned long long\n+g (unsigned long long i)\n+{\n+  return (i & 0x1ffffffffULL) << 4;\n+}"}]}