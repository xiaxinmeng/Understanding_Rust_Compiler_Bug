{"sha": "31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFhYjFjYzlkYjM0ZmY0NDliOGE3MmEyZTg1NmI5ZjVlZGNhYjdmYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-01-08T11:20:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-01-08T11:20:00Z"}, "message": "re PR tree-optimization/23603 (VRP does not say range for a in a = b == c; is [0,1])\n\n2007-01-08  Richard Guenther  <rguenther@suse.de>\n\n        PR tree-optimization/23603\n        * tree-vrp.c (set_value_range_to_truthvalue): New function.\n        (extract_range_from_binary): Fall back to truthvalue instead of\n        varying for TRUTH_*_EXPR.\n        (extract_range_from_comparison): Fall back to truthvalue instead of\n        varying.\n        (vrp_visit_phi_node): Don't adjust new range bounds to +INF/-INF\n        if all visited PHI values were constant.\n\n        * gcc.dg/tree-ssa/vrp31.c: New testcase.\n        * gcc.dg/tree-ssa/vrp32.c: Likewise.\n\nFrom-SVN: r120578", "tree": {"sha": "27fe13c00c2f39209cfd47f2e65d6c869e76737f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27fe13c00c2f39209cfd47f2e65d6c869e76737f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "151e6f2437deb05a6080f0710b4e52f57d74be95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/151e6f2437deb05a6080f0710b4e52f57d74be95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/151e6f2437deb05a6080f0710b4e52f57d74be95"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "9e9f510acbe1b656628e86816ba91492244c7f26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa", "patch": "@@ -1,3 +1,14 @@\n+2007-01-08  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/23603\n+\t* tree-vrp.c (set_value_range_to_truthvalue): New function.\n+\t(extract_range_from_binary): Fall back to truthvalue instead of\n+\tvarying for TRUTH_*_EXPR.\n+\t(extract_range_from_comparison): Fall back to truthvalue instead of\n+\tvarying.\n+\t(vrp_visit_phi_node): Don't adjust new range bounds to +INF/-INF\n+\tif all visited PHI values were constant.\n+\n 2007-01-08  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphunit.c (cgraph_process_new_functions): Reset reachable flag."}, {"sha": "22e47180e5bb84dac69f298861d27ad87de571b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa", "patch": "@@ -1,3 +1,9 @@\n+2007-01-08  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/23603\n+\t* gcc.dg/tree-ssa/vrp31.c: New testcase.\n+\t* gcc.dg/tree-ssa/vrp32.c: Likewise.\n+\n 2007-01-08  Mark Shinwell  <shinwell@codesourcery.com>\n \n \t* gcc.target/i386/20020531-1.c: Use \"char\" not \"unsigned char\""}, {"sha": "5b4aa5db9783cb5d2f4728db1b9457f5d254a126", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp31.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp31.c?ref=31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+\n+int f(int i)\n+{\n+  int t = i == 1;\n+  int g = t == 2;\n+  int h = g == 3;\n+  return h;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 0;\" \"vrp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n+"}, {"sha": "a42b3ca279e74d26e621856d224274ee75766ceb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp32.c?ref=31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+\n+int f(int i)\n+{\n+  _Bool t = !i;\n+  int g = !t && i;\n+  int h = g == 3;\n+  return h;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 0;\" \"vrp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n+"}, {"sha": "1092d176dbd73c51f2893411e11668973a1ef3e5", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=31ab1cc9db34ff449b8a72a2e856b9f5edcab7fa", "patch": "@@ -236,6 +236,20 @@ set_value_range_to_varying (value_range_t *vr)\n }\n \n \n+/* Set value range VR to a range of a truthvalue of type TYPE.  */\n+\n+static inline void\n+set_value_range_to_truthvalue (value_range_t *vr, tree type)\n+{\n+  if (TYPE_PRECISION (type) == 1)\n+    set_value_range_to_varying (vr);\n+  else\n+    set_value_range (vr, VR_RANGE,\n+\t\t     build_int_cst (type, 0), build_int_cst (type, 1),\n+\t\t     vr->equiv);\n+}\n+\n+\n /* Set value range VR to VR_UNDEFINED.  */\n \n static inline void\n@@ -1439,7 +1453,8 @@ extract_range_from_binary_expr (value_range_t *vr, tree expr)\n \t}\n       else\n \t{\n-\t  set_value_range_to_varying (vr);\n+\t  /* The result of a TRUTH_*_EXPR is always true or false.  */\n+\t  set_value_range_to_truthvalue (vr, TREE_TYPE (expr));\n \t  return;\n \t}\n     }\n@@ -1920,7 +1935,8 @@ extract_range_from_comparison (value_range_t *vr, tree expr)\n       set_value_range (vr, VR_RANGE, val, val, vr->equiv);\n     }\n   else\n-    set_value_range_to_varying (vr);\n+    /* The result of a comparison is always true or false.  */\n+    set_value_range_to_truthvalue (vr, TREE_TYPE (expr));\n }\n \n \n@@ -4182,6 +4198,7 @@ vrp_visit_phi_node (tree phi)\n   tree lhs = PHI_RESULT (phi);\n   value_range_t *lhs_vr = get_value_range (lhs);\n   value_range_t vr_result = { VR_UNDEFINED, NULL_TREE, NULL_TREE, NULL };\n+  bool all_const = true;\n \n   copy_value_range (&vr_result, lhs_vr);\n \n@@ -4209,7 +4226,10 @@ vrp_visit_phi_node (tree phi)\n \t  value_range_t vr_arg;\n \n \t  if (TREE_CODE (arg) == SSA_NAME)\n-\t    vr_arg = *(get_value_range (arg));\n+\t    {\n+\t      vr_arg = *(get_value_range (arg));\n+\t      all_const = false;\n+\t    }\n \t  else\n \t    {\n \t      vr_arg.type = VR_RANGE;\n@@ -4240,7 +4260,8 @@ vrp_visit_phi_node (tree phi)\n   /* To prevent infinite iterations in the algorithm, derive ranges\n      when the new value is slightly bigger or smaller than the\n      previous one.  */\n-  if (lhs_vr->type == VR_RANGE && vr_result.type == VR_RANGE)\n+  if (lhs_vr->type == VR_RANGE && vr_result.type == VR_RANGE\n+      && !all_const)\n     {\n       if (!POINTER_TYPE_P (TREE_TYPE (lhs)))\n \t{"}]}