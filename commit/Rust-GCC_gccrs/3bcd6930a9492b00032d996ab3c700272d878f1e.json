{"sha": "3bcd6930a9492b00032d996ab3c700272d878f1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JjZDY5MzBhOTQ5MmIwMDAzMmQ5OTZhYjNjNzAwMjcyZDg3OGYxZQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2006-02-15T09:43:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:43:23Z"}, "message": "restrict.ads (No_Dispatching_Calls): New GNAT restriction.\n\n2006-02-13  Javier Miranda  <miranda@adacore.com>\n\t    Gary Dismukes  <dismukes@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\n\t* restrict.ads (No_Dispatching_Calls): New GNAT restriction.\n\n\t* sem_disp.adb (Override_Dispatching_Operation): Traverse the list of\n\taliased entities to look for the overriden abstract interface\n\tsubprogram.\n\t(Is_Interface_Subprogram): Complete documentation.\n\t(Check_Dispatching_Operation): Do not generate code to register the\n\toperation in the dispatch table if the source is compiled with\n\trestriction No_Dispatching_Calls.\n\t(Override_Dispatching_Operation): Check for illegal attempt to override\n\tNo_Return procedure with procedure that is not No_Return\n\t(Check_Dispatching_Call): Suppress the check for an abstract operation\n\twhen the original node of an actual is a tag-indeterminate attribute\n\tcall, since the attribute, which must be 'Input, can never be abstract.\n\t(Is_Tag_Indeterminate): Handle checking of tag indeterminacy of a\n\tcall to the Input attribute (even when rewritten).\n\t(Propagate_Tag): Augment comment to indicate the possibility of a call\n\tto an Input attribute.\n\n\t* sem_disp.ads (Override_Dispatching_Operation): Moved to spec to allow\n\tcalling it from Exp_Ch3.Make_Controlling_Function_Wrappers.\n\n\t* s-rident.ads: (No_Dispatching_Calls): New GNAT restriction.\n\tNo_Wide_Characters is no longer partition-wide\n\tNo_Implementation_Attributes/Pragmas are now Ada 2005 (AI-257)\n\trather than GNAT\n\nFrom-SVN: r111086", "tree": {"sha": "c9786568eb60998e3bee26aa25ade22c4bfd8302", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9786568eb60998e3bee26aa25ade22c4bfd8302"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bcd6930a9492b00032d996ab3c700272d878f1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bcd6930a9492b00032d996ab3c700272d878f1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bcd6930a9492b00032d996ab3c700272d878f1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bcd6930a9492b00032d996ab3c700272d878f1e/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4ffa8adc765fc1af90972d6d5a7ac1959792412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ffa8adc765fc1af90972d6d5a7ac1959792412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ffa8adc765fc1af90972d6d5a7ac1959792412"}], "stats": {"total": 123, "additions": 89, "deletions": 34}, "files": [{"sha": "8eb9c8dccfc573c8ac9f150e0490a1425e526b29", "filename": "gcc/ada/restrict.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bcd6930a9492b00032d996ab3c700272d878f1e/gcc%2Fada%2Frestrict.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bcd6930a9492b00032d996ab3c700272d878f1e/gcc%2Fada%2Frestrict.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.ads?ref=3bcd6930a9492b00032d996ab3c700272d878f1e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -106,6 +106,7 @@ package Restrict is\n    Implementation_Restriction : array (All_Restrictions) of Boolean :=\n      (Simple_Barriers                    => True,\n       No_Calendar                        => True,\n+      No_Dispatching_Calls               => True,\n       No_Dynamic_Attachment              => True,\n       No_Enumeration_Maps                => True,\n       No_Entry_Calls_In_Elaboration_Code => True,"}, {"sha": "7d0b2c193ba4fb2b22c2d783905faf104584321f", "filename": "gcc/ada/s-rident.ads", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bcd6930a9492b00032d996ab3c700272d878f1e/gcc%2Fada%2Fs-rident.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bcd6930a9492b00032d996ab3c700272d878f1e/gcc%2Fada%2Fs-rident.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rident.ads?ref=3bcd6930a9492b00032d996ab3c700272d878f1e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -66,6 +66,7 @@ package System.Rident is\n       No_Delay,                                -- (RM H.4(21))\n       No_Direct_Boolean_Operators,             -- GNAT\n       No_Dispatch,                             -- (RM H.4(19))\n+      No_Dispatching_Calls,                    -- GNAT\n       No_Dynamic_Attachment,                   -- GNAT\n       No_Dynamic_Priorities,                   -- (RM D.9(9))\n       No_Enumeration_Maps,                     -- GNAT\n@@ -105,18 +106,18 @@ package System.Rident is\n       No_Unchecked_Access,                     -- (RM H.4(18))\n       No_Unchecked_Conversion,                 -- (RM H.4(16))\n       No_Unchecked_Deallocation,               -- (RM H.4(9))\n-      No_Wide_Characters,                      -- GNAT\n       Static_Priorities,                       -- GNAT\n       Static_Storage_Size,                     -- GNAT\n \n       --  The following cases do not require partition-wide checks\n \n       Immediate_Reclamation,                   -- (RM H.4(10))\n-      No_Implementation_Attributes,            -- GNAT\n-      No_Implementation_Pragmas,               -- GNAT\n+      No_Implementation_Attributes,            -- Ada 2005 AI-257\n+      No_Implementation_Pragmas,               -- Ada 2005 AI-257\n       No_Implementation_Restrictions,          -- GNAT\n       No_Elaboration_Code,                     -- GNAT\n       No_Obsolescent_Features,                 -- Ada 2005 AI-368\n+      No_Wide_Characters,                      -- GNAT\n \n       --  The following cases require a parameter value\n \n@@ -167,7 +168,7 @@ package System.Rident is\n    --  All restrictions (excluding only Not_A_Restriction_Id)\n \n    subtype All_Boolean_Restrictions is Restriction_Id range\n-     Simple_Barriers .. No_Obsolescent_Features;\n+     Simple_Barriers .. No_Wide_Characters;\n    --  All restrictions which do not take a parameter\n \n    subtype Partition_Boolean_Restrictions is All_Boolean_Restrictions range\n@@ -178,7 +179,7 @@ package System.Rident is\n    --  case of Boolean restrictions.\n \n    subtype Cunit_Boolean_Restrictions is All_Boolean_Restrictions range\n-     Immediate_Reclamation .. No_Obsolescent_Features;\n+     Immediate_Reclamation .. No_Wide_Characters;\n    --  Boolean restrictions that are not checked for partition consistency\n    --  and that thus apply only to the current unit. Note that for these\n    --  restrictions, the compiler does not apply restrictions found in"}, {"sha": "73737dedd6a99cd09503e3637c7ed771f135e6e7", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 71, "deletions": 26, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bcd6930a9492b00032d996ab3c700272d878f1e/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bcd6930a9492b00032d996ab3c700272d878f1e/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=3bcd6930a9492b00032d996ab3c700272d878f1e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,6 +38,8 @@ with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n with Opt;      use Opt;\n with Output;   use Output;\n+with Restrict; use Restrict;\n+with Rident;   use Rident;\n with Sem;      use Sem;\n with Sem_Ch6;  use Sem_Ch6;\n with Sem_Eval; use Sem_Eval;\n@@ -55,14 +57,6 @@ package body Sem_Disp is\n    -- Local Subprograms --\n    -----------------------\n \n-   procedure Override_Dispatching_Operation\n-     (Tagged_Type : Entity_Id;\n-      Prev_Op     : Entity_Id;\n-      New_Op      : Entity_Id);\n-   --  Replace an implicit dispatching operation with an explicit one.\n-   --  Prev_Op is an inherited primitive operation which is overridden\n-   --  by the explicit declaration of New_Op.\n-\n    procedure Add_Dispatching_Operation\n      (Tagged_Type : Entity_Id;\n       New_Op      : Entity_Id);\n@@ -406,7 +400,7 @@ package body Sem_Disp is\n          --  discriminants), the tag of the containing call's associated\n          --  tagged type is directly used to control the dispatching.\n \n-         if not Present (Control)\n+         if No (Control)\n            and then Indeterm_Ancestor_Call\n          then\n             Control :=\n@@ -476,6 +470,15 @@ package body Sem_Disp is\n                   if Nkind (Original_Node (Actual)) = N_Function_Call then\n                      Func := Entity (Name (Original_Node (Actual)));\n \n+                  --  If the actual is an attribute then it can't be abstract\n+                  --  (the only current case of a tag-indeterminate attribute\n+                  --  is the stream Input attribute).\n+\n+                  elsif\n+                    Nkind (Original_Node (Actual)) = N_Attribute_Reference\n+                  then\n+                     Func := Empty;\n+\n                   --  Only other possibility is a qualified expression whose\n                   --  consituent expression is itself a call.\n \n@@ -486,7 +489,7 @@ package body Sem_Disp is\n                            (Expression (Original_Node (Actual)))));\n                   end if;\n \n-                  if Is_Abstract (Func) then\n+                  if Present (Func) and then Is_Abstract (Func) then\n                      Error_Msg_N (\n                        \"call to abstract function must be dispatching\", N);\n                   end if;\n@@ -553,7 +556,7 @@ package body Sem_Disp is\n       then\n          --  Protect the frontend against previously detected errors\n \n-         if not Present (Corresponding_Record_Type (Tagged_Type)) then\n+         if No (Corresponding_Record_Type (Tagged_Type)) then\n             return;\n          end if;\n \n@@ -661,7 +664,7 @@ package body Sem_Disp is\n                   --  has definitely been frozen already and the body\n                   --  is illegal.\n \n-                  if not Present (Decl_Item) then\n+                  if No (Decl_Item) then\n                      Error_Msg_N (\"overriding of& is too late!\", Subp);\n                      Error_Msg_N\n                        (\"\\spec should appear immediately after the type!\",\n@@ -679,8 +682,11 @@ package body Sem_Disp is\n                      if Present (DTC_Entity (Old_Subp)) then\n                         Set_DTC_Entity (Subp, DTC_Entity (Old_Subp));\n                         Set_DT_Position (Subp, DT_Position (Old_Subp));\n-                        Insert_After (\n-                          Subp_Body, Fill_DT_Entry (Sloc (Subp_Body), Subp));\n+\n+                        if not Restriction_Active (No_Dispatching_Calls) then\n+                           Insert_After (Subp_Body,\n+                             Fill_DT_Entry (Sloc (Subp_Body), Subp));\n+                        end if;\n                      end if;\n                   end if;\n                end;\n@@ -739,7 +745,12 @@ package body Sem_Disp is\n             Override_Dispatching_Operation (Tagged_Type, Old_Subp, Subp);\n             Set_Is_Overriding_Operation (Subp);\n          end if;\n-      else\n+\n+      --  If no old subprogram, then we add this as a dispatching operation,\n+      --  but we avoid doing this if an error was posted, to prevent annoying\n+      --  cascaded errors.\n+\n+      elsif not Error_Posted (Subp) then\n          Add_Dispatching_Operation (Tagged_Type, Subp);\n       end if;\n \n@@ -1139,7 +1150,6 @@ package body Sem_Disp is\n \n          else\n             Actual := First_Actual (Orig_Node);\n-\n             while Present (Actual) loop\n                if Is_Controlling_Actual (Actual)\n                  and then not Is_Tag_Indeterminate (Actual)\n@@ -1151,12 +1161,21 @@ package body Sem_Disp is\n             end loop;\n \n             return True;\n-\n          end if;\n \n       elsif Nkind (Orig_Node) = N_Qualified_Expression then\n          return Is_Tag_Indeterminate (Expression (Orig_Node));\n \n+      --  Case of a call to the Input attribute (possibly rewritten), which is\n+      --  always tag-indeterminate except when its prefix is a Class attribute.\n+\n+      elsif Nkind (Orig_Node) = N_Attribute_Reference\n+        and then\n+          Get_Attribute_Id (Attribute_Name (Orig_Node)) = Attribute_Input\n+        and then\n+          Nkind (Prefix (Orig_Node)) /= N_Attribute_Reference\n+      then\n+         return True;\n       else\n          return False;\n       end if;\n@@ -1174,9 +1193,12 @@ package body Sem_Disp is\n       Op_Elmt : Elmt_Id := First_Elmt (Primitive_Operations (Tagged_Type));\n       Elmt    : Elmt_Id;\n       Found   : Boolean;\n+      E       : Entity_Id;\n \n       function Is_Interface_Subprogram (Op : Entity_Id) return Boolean;\n-      --  Comment requjired ???\n+      --  Traverse the list of aliased entities to check if the overriden\n+      --  entity corresponds with a primitive operation of an abstract\n+      --  interface type.\n \n       -----------------------------\n       -- Is_Interface_Subprogram --\n@@ -1202,6 +1224,14 @@ package body Sem_Disp is\n    --  Start of processing for Override_Dispatching_Operation\n \n    begin\n+      --  Diagnose failure to match No_Return in parent (Ada-2005, AI-414, but\n+      --  we do it unconditionally in Ada 95 now, since this is our pragma!)\n+\n+      if No_Return (Prev_Op) and then not No_Return (New_Op) then\n+         Error_Msg_N (\"procedure & must have No_Return pragma\", New_Op);\n+         Error_Msg_N (\"\\since overridden procedure has No_Return\", New_Op);\n+      end if;\n+\n       --  Patch the primitive operation list\n \n       while Present (Op_Elmt)\n@@ -1228,7 +1258,20 @@ package body Sem_Disp is\n          Set_DT_Position              (Prev_Op, DT_Position (Alias (Prev_Op)));\n          Set_Is_Abstract              (Prev_Op, Is_Abstract (New_Op));\n          Set_Is_Overriding_Operation  (Prev_Op);\n-         Set_Abstract_Interface_Alias (Prev_Op, Alias (Prev_Op));\n+\n+         --  Traverse the list of aliased entities to look for the overriden\n+         --  abstract interface subprogram.\n+\n+         E := Alias (Prev_Op);\n+         while Present (Alias (E))\n+           and then Present (DTC_Entity (E))\n+           and then not (Is_Abstract (E))\n+           and then not Is_Interface (Scope (DTC_Entity (E)))\n+         loop\n+            E := Alias (E);\n+         end loop;\n+\n+         Set_Abstract_Interface_Alias (Prev_Op, E);\n          Set_Alias                    (Prev_Op, New_Op);\n          Set_Is_Internal              (Prev_Op);\n          Set_Is_Hidden                (Prev_Op);\n@@ -1256,8 +1299,8 @@ package body Sem_Disp is\n \n          if not Found then\n             Append_Elmt (New_Op, Primitive_Operations (Tagged_Type));\n-            --  Replace_Elmt (Op_Elmt, New_Op); -- why is this commented out???\n          end if;\n+\n          return;\n \n       else\n@@ -1274,10 +1317,10 @@ package body Sem_Disp is\n       else pragma Assert (Is_Inherited_Operation (Prev_Op));\n \n          --  Make the overriding operation into an alias of the implicit one.\n-         --  In this fashion a call from outside ends up calling the new\n-         --  body even if non-dispatching, and a call from inside calls the\n-         --  overriding operation because it hides the implicit one.\n-         --  To indicate that the body of Prev_Op is never called, set its\n+         --  In this fashion a call from outside ends up calling the new body\n+         --  even if non-dispatching, and a call from inside calls the\n+         --  overriding operation because it hides the implicit one. To\n+         --  indicate that the body of Prev_Op is never called, set its\n          --  dispatch table entity to Empty.\n \n          Set_Alias (Prev_Op, New_Op);\n@@ -1307,7 +1350,9 @@ package body Sem_Disp is\n \n          Call_Node := Expression (Parent (Entity (Actual)));\n \n-      --  Only other possibility is parenthesized or qualified expression\n+      --  Only other possibilities are parenthesized or qualified expression,\n+      --  or an expander-generated unchecked conversion of a function call to\n+      --  a stream Input attribute.\n \n       else\n          Call_Node := Expression (Actual);"}, {"sha": "1e9e18e318c9cfdda3608c56b570eade247e139d", "filename": "gcc/ada/sem_disp.ads", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bcd6930a9492b00032d996ab3c700272d878f1e/gcc%2Fada%2Fsem_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bcd6930a9492b00032d996ab3c700272d878f1e/gcc%2Fada%2Fsem_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.ads?ref=3bcd6930a9492b00032d996ab3c700272d878f1e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -80,6 +80,14 @@ package Sem_Disp is\n    --  on result, and all controlling operands are also indeterminate.\n    --  Such a function call may inherit a tag from an enclosing call.\n \n+   procedure Override_Dispatching_Operation\n+     (Tagged_Type : Entity_Id;\n+      Prev_Op     : Entity_Id;\n+      New_Op      : Entity_Id);\n+   --  Replace an implicit dispatching operation with an explicit one.\n+   --  Prev_Op is an inherited primitive operation which is overridden\n+   --  by the explicit declaration of New_Op.\n+\n    procedure Propagate_Tag (Control : Node_Id; Actual : Node_Id);\n    --  If a function call is tag-indeterminate,  its controlling argument is\n    --  found in the context;  either an enclosing call, or the left-hand side"}]}