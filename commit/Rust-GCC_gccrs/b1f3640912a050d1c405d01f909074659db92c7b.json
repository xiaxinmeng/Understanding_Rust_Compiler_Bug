{"sha": "b1f3640912a050d1c405d01f909074659db92c7b", "node_id": "C_kwDOANBUbNoAKGIxZjM2NDA5MTJhMDUwZDFjNDA1ZDAxZjkwOTA3NDY1OWRiOTJjN2I", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-18T13:16:53Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-18T16:25:36Z"}, "message": "nvptx: fix -Wformat-diag warnings\n\ngcc/ChangeLog:\n\n\t* config/nvptx/nvptx.cc (nvptx_goacc_validate_dims_1): Wrap\n\tkeyword.\n\t* config/nvptx/nvptx.md: Remove trailing dot.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.oacc-c++/privatized-ref-2.C: Update keyword\n\tin dg-warning.\n\t* testsuite/libgomp.oacc-c++/privatized-ref-3.C: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-kernels-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-loop-2.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/pr85486.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/pr95270-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-nohost-2.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/struct-copyout-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/struct-copyout-2.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/vector-length-64-1.c: Likewise.\n\t* testsuite/libgomp.oacc-fortran/attach-descriptor-1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/derivedtypes-arrays-1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-loop-2.f95: Likewise.\n\t* testsuite/libgomp.oacc-fortran/parallel-dims.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/privatized-ref-1.f95: Likewise.", "tree": {"sha": "9af43f771e349faaccdcae7e2656c1d76979f05e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9af43f771e349faaccdcae7e2656c1d76979f05e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1f3640912a050d1c405d01f909074659db92c7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1f3640912a050d1c405d01f909074659db92c7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1f3640912a050d1c405d01f909074659db92c7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1f3640912a050d1c405d01f909074659db92c7b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "591b6e00d1bfe12932ca31530d5859f95db8a35a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591b6e00d1bfe12932ca31530d5859f95db8a35a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/591b6e00d1bfe12932ca31530d5859f95db8a35a"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "a829bd3fe7aa4c9d4115e9c83d27664f4d9c5cf2", "filename": "gcc/config/nvptx/nvptx.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f3640912a050d1c405d01f909074659db92c7b/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f3640912a050d1c405d01f909074659db92c7b/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc?ref=b1f3640912a050d1c405d01f909074659db92c7b", "patch": "@@ -5894,15 +5894,15 @@ nvptx_goacc_validate_dims_1 (tree decl, int dims[], int fn_level, unsigned used)\n \n       if (dims[GOMP_DIM_VECTOR] > PTX_WARP_SIZE)\n \t{\n-\t  vector_reason = G_(\"using vector_length (%d) due to call to\"\n+\t  vector_reason = G_(\"using %<vector_length%> (%d) due to call to\"\n \t\t\t     \" vector-partitionable routine, ignoring %d\");\n \t  dims[GOMP_DIM_VECTOR] = PTX_WARP_SIZE;\n \t}\n     }\n \n   if (dims[GOMP_DIM_VECTOR] == 0)\n     {\n-      vector_reason = G_(\"using vector_length (%d), ignoring runtime setting\");\n+      vector_reason = G_(\"using %<vector_length%> (%d), ignoring runtime setting\");\n       dims[GOMP_DIM_VECTOR] = default_vector_length;\n     }\n \n@@ -5916,12 +5916,12 @@ nvptx_goacc_validate_dims_1 (tree decl, int dims[], int fn_level, unsigned used)\n     warning_at (decl ? DECL_SOURCE_LOCATION (decl) : UNKNOWN_LOCATION, 0,\n \t\tvector_reason != NULL\n \t\t? vector_reason\n-\t\t: G_(\"using vector_length (%d), ignoring %d\"),\n+\t\t: G_(\"using %<vector_length%> (%d), ignoring %d\"),\n \t\tdims[GOMP_DIM_VECTOR], old_dims[GOMP_DIM_VECTOR]);\n \n   if (dims[GOMP_DIM_WORKER] != old_dims[GOMP_DIM_WORKER])\n     warning_at (decl ? DECL_SOURCE_LOCATION (decl) : UNKNOWN_LOCATION, 0,\n-\t\tG_(\"using num_workers (%d), ignoring %d\"),\n+\t\tG_(\"using %<num_workers%> (%d), ignoring %d\"),\n \t\tdims[GOMP_DIM_WORKER], old_dims[GOMP_DIM_WORKER]);\n \n   if (oacc_default_dims_p)"}, {"sha": "5cf190ab73e65b48a5464767712da13932df414c", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f3640912a050d1c405d01f909074659db92c7b/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f3640912a050d1c405d01f909074659db92c7b/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=b1f3640912a050d1c405d01f909074659db92c7b", "patch": "@@ -1410,7 +1410,7 @@\n    (match_operand 3 \"\" \"\")]\n   \"\"\n {\n-  sorry (\"target cannot support nonlocal goto.\");\n+  sorry (\"target cannot support nonlocal goto\");\n   emit_insn (gen_nop ());\n   DONE;\n })\n@@ -1419,7 +1419,7 @@\n   [(const_int 0)]\n   \"\"\n {\n-  sorry (\"target cannot support nonlocal goto.\");\n+  sorry (\"target cannot support nonlocal goto\");\n })\n \n (define_expand \"allocate_stack\"\n@@ -1438,7 +1438,7 @@\n   /* The ptx documentation specifies an alloca intrinsic (for 32 bit\n      only)  but notes it is not implemented.  The assembler emits a\n      confused error message.  Issue a blunt one now instead.  */\n-  sorry (\"target cannot support alloca.\");\n+  sorry (\"target cannot support alloca\");\n   emit_insn (gen_nop ());\n   DONE;\n })"}, {"sha": "f531bae5f2dc78ec167d2857bcf4c5a9f790a93a", "filename": "libgomp/testsuite/libgomp.oacc-c++/privatized-ref-2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fprivatized-ref-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fprivatized-ref-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fprivatized-ref-2.C?ref=b1f3640912a050d1c405d01f909074659db92c7b", "patch": "@@ -69,7 +69,7 @@ void workers (void)\n #pragma acc parallel copyout(res) num_gangs(64) num_workers(64) /* { dg-line l_compute[incr c_compute] } */\n   /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-  /* { dg-warning \"using num_workers \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n+  /* { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n   {\n     int i, j;\n #pragma acc loop gang /* { dg-line l_loop[incr c_loop] } */\n@@ -105,7 +105,7 @@ void vectors (void)\n #pragma acc parallel copyout(res) num_gangs(64) num_workers(64) /* { dg-line l_compute[incr c_compute] } */\n   /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-  /* { dg-warning \"using num_workers \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n+  /* { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n   {\n     int i, j;\n #pragma acc loop gang worker /* { dg-line l_loop[incr c_loop] } */\n@@ -141,7 +141,7 @@ void gangs_workers_vectors (void)\n #pragma acc parallel copyout(res) num_gangs(64) num_workers(64) /* { dg-line l_compute[incr c_compute] } */\n   /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-  /* { dg-warning \"using num_workers \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n+  /* { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n   {\n     int i, j;\n #pragma acc loop collapse(2) gang worker vector /* { dg-line l_loop[incr c_loop] } */"}, {"sha": "9030fb1d60554e83a74f4c1cf2feab5ac489baf5", "filename": "libgomp/testsuite/libgomp.oacc-c++/privatized-ref-3.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fprivatized-ref-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fprivatized-ref-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fprivatized-ref-3.C?ref=b1f3640912a050d1c405d01f909074659db92c7b", "patch": "@@ -86,7 +86,7 @@ void workers (void)\n      { dg-bogus {note: variable 'tmpvar' adjusted for OpenACC privatization level: 'gang'} \"\" { target { openacc_nvidia_accel_selected && __OPTIMIZE__ } } l_compute$c_compute }\n   */\n   /* { dg-note {variable 'tmpref' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-  /* { dg-warning \"using num_workers \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n+  /* { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n   {\n     int i, j;\n     int tmpvar;\n@@ -132,7 +132,7 @@ void vectors (void)\n      { dg-bogus {note: variable 'tmpvar' adjusted for OpenACC privatization level: 'gang'} \"\" { target { openacc_nvidia_accel_selected && __OPTIMIZE__ } } l_compute$c_compute }\n   */\n   /* { dg-note {variable 'tmpref' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-  /* { dg-warning \"using num_workers \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n+  /* { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n   {\n     int i, j;\n     int tmpvar;\n@@ -178,7 +178,7 @@ void gangs_workers_vectors (void)\n      { dg-bogus {note: variable 'tmpvar' adjusted for OpenACC privatization level: 'gang'} \"\" { target { openacc_nvidia_accel_selected && __OPTIMIZE__ } } l_compute$c_compute }\n   */\n   /* { dg-note {variable 'tmpref' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-  /* { dg-warning \"using num_workers \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n+  /* { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n   {\n     int i, j;\n     int tmpvar;"}, {"sha": "cb9b6cf8856772901fd0cbcd0e8157b57e3ad63a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_prof-kernels-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-kernels-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-kernels-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-kernels-1.c?ref=b1f3640912a050d1c405d01f909074659db92c7b", "patch": "@@ -189,7 +189,7 @@ int main()\n     int x[N];\n #pragma acc kernels \\\n   num_gangs (30) num_workers (3) vector_length (5)\n-    /* { dg-prune-output \"using vector_length \\\\(32\\\\), ignoring 5\" } */\n+    /* { dg-prune-output \"using .vector_length. \\\\(32\\\\), ignoring 5\" } */\n     {\n       for (int i = 0; i < N; ++i)\n \tx[i] = i * i;\n@@ -214,7 +214,7 @@ int main()\n     int x[N];\n #pragma acc kernels \\\n   num_gangs (num_gangs) num_workers (num_workers) vector_length (vector_length)\n-    /* { dg-prune-output \"using vector_length \\\\(32\\\\), ignoring runtime setting\" } */\n+    /* { dg-prune-output \"using .vector_length. \\\\(32\\\\), ignoring runtime setting\" } */\n     {\n       for (int i = 0; i < N; ++i)\n \tx[i] = i * i;"}, {"sha": "640951b4f8580f61ecbbebd855945272fee998bc", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-loop-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-2.c?ref=b1f3640912a050d1c405d01f909074659db92c7b", "patch": "@@ -24,7 +24,7 @@ main (void)\n   /* Parallelism dimensions: variable.  */\n #pragma acc kernels copyout (b[0:N]) \\\n   num_gangs (3 + a[3]) num_workers (5 + a[5]) vector_length (7 + a[7])\n-  /* { dg-prune-output \"using vector_length \\\\(32\\\\), ignoring runtime setting\" } */\n+  /* { dg-prune-output \"using .vector_length. \\\\(32\\\\), ignoring runtime setting\" } */\n   {\n     for (COUNTERTYPE i = 0; i < N; i++)\n       b[i] = i * 4;\n@@ -33,7 +33,7 @@ main (void)\n   /* Parallelism dimensions: literal.  */\n #pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N]) \\\n   num_gangs (3) num_workers (5) vector_length (7)\n-  /* { dg-prune-output \"using vector_length \\\\(32\\\\), ignoring 7\" } */\n+  /* { dg-prune-output \"using .vector_length. \\\\(32\\\\), ignoring 7\" } */\n   {\n     for (COUNTERTYPE ii = 0; ii < N; ii++)\n       c[ii] = a[ii] + b[ii];"}, {"sha": "b1db3e887f88083f1007d4da4e9bcaf9a2090922", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-dims.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c?ref=b1f3640912a050d1c405d01f909074659db92c7b", "patch": "@@ -133,7 +133,7 @@ int main ()\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n-#pragma acc parallel copy (vectors_actual) /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n+#pragma acc parallel copy (vectors_actual) /* { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   vector_length (VECTORS) /* { dg-warning \"'vector_length' value must be positive\" \"\" { target c++ } } */\n     /* { dg-warning \"region contains vector partitioned code but is not vector partitioned\" \"\" { target *-*-* } .-2 } */\n     {\n@@ -246,7 +246,7 @@ int main ()\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n-#pragma acc parallel copy (workers_actual) /* { dg-warning \"using num_workers \\\\(32\\\\), ignoring 2097152\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n+#pragma acc parallel copy (workers_actual) /* { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 2097152\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   num_workers (WORKERS)\n     {\n       if (acc_on_device (acc_device_host))\n@@ -341,7 +341,7 @@ int main ()\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n-#pragma acc parallel copy (vectors_actual) /* { dg-warning \"using vector_length \\\\(1024\\\\), ignoring 2097152\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n+#pragma acc parallel copy (vectors_actual) /* { dg-warning \"using .vector_length. \\\\(1024\\\\), ignoring 2097152\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   vector_length (VECTORS)\n     {\n       if (acc_on_device (acc_device_host))\n@@ -386,7 +386,7 @@ int main ()\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n-#pragma acc parallel copy (vectors_actual) /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring runtime setting\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n+#pragma acc parallel copy (vectors_actual) /* { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring runtime setting\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   vector_length (vectors)\n     {\n       if (acc_on_device (acc_device_host))\n@@ -443,7 +443,7 @@ int main ()\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n-#pragma acc parallel copy (gangs_actual, workers_actual, vectors_actual) /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring 11\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n+#pragma acc parallel copy (gangs_actual, workers_actual, vectors_actual) /* { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 11\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   num_gangs (gangs) \\\n   num_workers (WORKERS) \\\n   vector_length (VECTORS)\n@@ -564,7 +564,7 @@ int main ()\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n-#pragma acc serial /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n+#pragma acc serial /* { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n     {\n       for (int i = 100; i > -100; i--)\n@@ -586,7 +586,7 @@ int main ()\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n-#pragma acc serial copy (vectors_actual) /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n+#pragma acc serial copy (vectors_actual) /* { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   copy (gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max)\n     /* { dg-bogus \"warning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-2 }\n        { dg-bogus \"warning: region contains worker partitioned code but is not worker partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-3 }"}, {"sha": "fcf5d60f866ef958432a0315c9f46eff49db2475", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr85486.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486.c?ref=b1f3640912a050d1c405d01f909074659db92c7b", "patch": "@@ -31,7 +31,7 @@ main (void)\n \n   int err = 0;\n \n-#pragma acc parallel copy (ary) VECTOR_LENGTH /* { dg-warning \"using vector_length \\\\(32\\\\) due to call to vector-partitionable routine, ignoring 128\" } */\n+#pragma acc parallel copy (ary) VECTOR_LENGTH /* { dg-warning \"using .vector_length. \\\\(32\\\\) due to call to vector-partitionable routine, ignoring 128\" } */\n   {\n     Vector (&ary[0][0], m * n, (1 << 24) - (1 << 16));\n   }"}, {"sha": "06afddb91a23fcfe7c69c161145845e372ecd32e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr95270-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr95270-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr95270-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr95270-1.c?ref=b1f3640912a050d1c405d01f909074659db92c7b", "patch": "@@ -16,7 +16,7 @@ main ()\n \n   /* Test attach/detach directives.  */\n #pragma acc enter data attach(data_p)\n-#pragma acc serial copyout(ptrbits) /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */\n+#pragma acc serial copyout(ptrbits) /* { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */\n   {\n     ptrbits = (uintptr_t) data_p;\n   }\n@@ -28,7 +28,7 @@ main ()\n \n   /* Test attach/detach API call.  */\n   acc_attach ((void **) &data_p);\n-#pragma acc serial copyout(ptrbits) /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */\n+#pragma acc serial copyout(ptrbits) /* { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */\n   {\n     ptrbits = (uintptr_t) data_p;\n   }"}, {"sha": "7d7dbb569d38b6bbc11bd4e6bed4b3a168b16437", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-nohost-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-nohost-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-nohost-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-nohost-2.c?ref=b1f3640912a050d1c405d01f909074659db92c7b", "patch": "@@ -21,7 +21,7 @@ int main()\n   int x = -10;\n \n #pragma acc serial copy(x)\n-  /* { dg-warning {using vector_length \\(32\\), ignoring 1} \"\" { target openacc_nvidia_accel_selected } .-1 } */\n+  /* { dg-warning {using .vector_length. \\(32\\), ignoring 1} \"\" { target openacc_nvidia_accel_selected } .-1 } */\n   {\n     if (f1)\n       x = f1(x);"}, {"sha": "9f3d826801877543a9d7fd176ea92f95c890f1e0", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/struct-copyout-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-copyout-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-copyout-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-copyout-1.c?ref=b1f3640912a050d1c405d01f909074659db92c7b", "patch": "@@ -23,7 +23,7 @@ main (int argc, char *argv[])\n \n   #pragma acc enter data copyin(t.s)\n \n-  #pragma acc serial present(t.s) /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */\n+  #pragma acc serial present(t.s) /* { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */\n   {\n     t.s.a = 5;\n     t.s.b = 6;"}, {"sha": "654afaddba2dc7d62d22b9d9166d4bd871f34001", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/struct-copyout-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-copyout-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-copyout-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-copyout-2.c?ref=b1f3640912a050d1c405d01f909074659db92c7b", "patch": "@@ -23,7 +23,7 @@ main (int argc, char *argv[])\n \n   #pragma acc enter data copyin(s.a, s.b, s.c[0:N])\n \n-  #pragma acc serial present(s.a, s.b, s.c[0:N]) /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */\n+  #pragma acc serial present(s.a, s.b, s.c[0:N]) /* { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */\n   {\n     s.a = 3;\n     s.b = 4;"}, {"sha": "faa0f70b090488924387c070bd8066d63d1aa675", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vector-length-64-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-64-1.c?ref=b1f3640912a050d1c405d01f909074659db92c7b", "patch": "@@ -4,7 +4,7 @@\n int\n main (void)\n {\n-#pragma acc parallel vector_length (64) num_workers (16) /* { dg-warning \"using num_workers \\\\(15\\\\), ignoring 16\" \"\" { target openacc_nvidia_accel_selected } } */\n+#pragma acc parallel vector_length (64) num_workers (16) /* { dg-warning \"using .num_workers. \\\\(15\\\\), ignoring 16\" \"\" { target openacc_nvidia_accel_selected } } */\n   {\n #pragma acc loop worker\n     for (unsigned int i = 0; i < 32; i++)"}, {"sha": "12df6af023014004f80f81e783ffb009911ef0ae", "filename": "libgomp/testsuite/libgomp.oacc-fortran/attach-descriptor-1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fattach-descriptor-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fattach-descriptor-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fattach-descriptor-1.f90?ref=b1f3640912a050d1c405d01f909074659db92c7b", "patch": "@@ -43,7 +43,7 @@ subroutine test(variant)\n   end if\n \n   !$acc serial present(myvar%arr2)\n-  ! { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n+  ! { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n   do i=1,10\n     myvar%arr1(i) = i + variant\n     myvar%arr2(i) = i - variant"}, {"sha": "bd9afa2218cead40df64a10fcfc60e72f0595110", "filename": "libgomp/testsuite/libgomp.oacc-fortran/derivedtypes-arrays-1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fderivedtypes-arrays-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fderivedtypes-arrays-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fderivedtypes-arrays-1.f90?ref=b1f3640912a050d1c405d01f909074659db92c7b", "patch": "@@ -88,7 +88,7 @@\n !$acc data copyin(var3%t2(5)%t1%arr1)\n \n !$acc serial present(var3%t2(5)%t1%arr1)\n-! { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n+! { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n var3%t2(5)%t1%arr1(:,:) = 6\n !$acc end serial\n "}, {"sha": "a60273ac29481520e5ec638c637aac79e7c94d23", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-loop-2.f95", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-loop-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-loop-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-loop-2.f95?ref=b1f3640912a050d1c405d01f909074659db92c7b", "patch": "@@ -16,7 +16,7 @@ program main\n   ! Parallelism dimensions: variable.\n   !$acc kernels copyout (b(0:n-1)) &\n   !$acc num_gangs (3 + a(3)) num_workers (5 + a(5)) vector_length (7 + a(7))\n-  ! { dg-prune-output \"using vector_length \\\\(32\\\\), ignoring runtime setting\" }\n+  ! { dg-prune-output \"using .vector_length. \\\\(32\\\\), ignoring runtime setting\" }\n   do i = 0, n -1\n      b(i) = i * 4\n   end do\n@@ -25,7 +25,7 @@ program main\n   ! Parallelism dimensions: literal.\n   !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) &\n   !$acc num_gangs (3) num_workers (5) vector_length (7)\n-  ! { dg-prune-output \"using vector_length \\\\(32\\\\), ignoring 7\" }\n+  ! { dg-prune-output \"using .vector_length. \\\\(32\\\\), ignoring 7\" }\n   do ii = 0, n - 1\n      c(ii) = a(ii) + b(ii)\n   end do"}, {"sha": "02e3c2f4496b271340464b38a48ef33b3691864a", "filename": "libgomp/testsuite/libgomp.oacc-fortran/parallel-dims.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90?ref=b1f3640912a050d1c405d01f909074659db92c7b", "patch": "@@ -67,7 +67,7 @@ program main\n   workers_max = -huge(gangs_max) - 1 ! INT_MIN\n   vectors_max = -huge(gangs_max) - 1 ! INT_MIN\n   !$acc serial &\n-  !$acc   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max) ! { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } }\n+  !$acc   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max) ! { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } }\n   ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 100, -99, -1\n      gangs_min = acc_gang ();\n@@ -93,7 +93,7 @@ program main\n   workers_max = -huge(gangs_max) - 1 ! INT_MIN\n   vectors_max = -huge(gangs_max) - 1 ! INT_MIN\n   !$acc serial copy (vectors_actual) &\n-  !$acc   copy (gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max) ! { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } }\n+  !$acc   copy (gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max) ! { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } }\n   ! { dg-bogus \"\\[Ww\\]arning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-1 }\n   ! { dg-bogus \"\\[Ww\\]arning: region contains worker partitioned code but is not worker partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-2 }\n   ! { dg-bogus \"\\[Ww\\]arning: region contains vector partitioned code but is not vector partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-3 }"}, {"sha": "73d9975ae8b0db081d4b2723fd1640540899caa9", "filename": "libgomp/testsuite/libgomp.oacc-fortran/privatized-ref-1.f95", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-1.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f3640912a050d1c405d01f909074659db92c7b/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-1.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-1.f95?ref=b1f3640912a050d1c405d01f909074659db92c7b", "patch": "@@ -96,7 +96,7 @@ subroutine workers(t1, res)\n     real, intent(out) :: res(:)\n \n     !$acc parallel copyout(res) num_gangs(64) num_workers(64)\n-    ! { dg-warning \"using num_workers \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n+    ! { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n \n     !$acc loop gang ! { dg-line l_loop[incr c_loop] }\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n@@ -120,7 +120,7 @@ subroutine vectors(t1, res)\n     real, intent(out) :: res(:)\n \n     !$acc parallel copyout(res) num_gangs(64) num_workers(64)\n-    ! { dg-warning \"using num_workers \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n+    ! { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n \n     !$acc loop gang worker ! { dg-line l_loop[incr c_loop] }\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n@@ -144,7 +144,7 @@ subroutine gangs_workers_vectors(t1, res)\n     real, intent(out) :: res(:)\n \n     !$acc parallel copyout(res) num_gangs(64) num_workers(64)\n-    ! { dg-warning \"using num_workers \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n+    ! { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n \n     !$acc loop collapse(2) gang worker vector private(t1) ! { dg-line l_loop[incr c_loop] }\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }"}]}