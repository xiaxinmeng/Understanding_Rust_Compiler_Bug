{"sha": "8cd9e2ac305d008905732657978f2fb26981a2d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNkOWUyYWMzMDVkMDA4OTA1NzMyNjU3OTc4ZjJmYjI2OTgxYTJkOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-12-08T11:24:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-12-08T11:24:38Z"}, "message": "s-intman-vxworks.adb (Notify_Exception): removed useless check for current task being suspended.\n\n\t* s-intman-vxworks.adb (Notify_Exception): removed useless check for\n\tcurrent task being suspended.\n\n\t* init.c (__gnat_clear_exception): added to reset VxWorks exception\n\tcount.\n\t(__gnat_map_signal): removed test for current task being suspended.\n\nFrom-SVN: r91873", "tree": {"sha": "f74f83c31f0cf4f9225914020efb075b0cdd660d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f74f83c31f0cf4f9225914020efb075b0cdd660d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cd9e2ac305d008905732657978f2fb26981a2d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd9e2ac305d008905732657978f2fb26981a2d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cd9e2ac305d008905732657978f2fb26981a2d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd9e2ac305d008905732657978f2fb26981a2d8/comments", "author": null, "committer": null, "parents": [{"sha": "de40e4dd33113039dfe75d5a99d75fbfd4797ede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de40e4dd33113039dfe75d5a99d75fbfd4797ede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de40e4dd33113039dfe75d5a99d75fbfd4797ede"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "ee0919297de9a13c909255c7224281ab9a2d406f", "filename": "gcc/ada/init.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd9e2ac305d008905732657978f2fb26981a2d8/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd9e2ac305d008905732657978f2fb26981a2d8/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=8cd9e2ac305d008905732657978f2fb26981a2d8", "patch": "@@ -1661,6 +1661,10 @@ __gnat_initialize ()\n #include <intLib.h>\n #include <iv.h>\n \n+#ifdef VTHREADS\n+#include \"private/vThreadsP.h\"\n+#endif\n+\n extern int __gnat_inum_to_ivec (int);\n static void __gnat_error_handler (int, int, struct sigcontext *);\n void __gnat_map_signal (int);\n@@ -1686,6 +1690,16 @@ __gnat_inum_to_ivec (int num)\n   return INUM_TO_IVEC (num);\n }\n \n+/* VxWorks expects the field excCnt to be zeroed when a signal is handled.\n+   The VxWorks version of longjmp does this; gcc's builtin_longjmp does not */\n+void\n+__gnat_clear_exception_count (void)\n+{\n+#ifdef VTHREADS\n+  taskIdCurrent->vThreads.excCnt = 0;\n+#endif\n+}\n+\n /* Exported to 5zintman.adb in order to handle different signal\n    to exception mappings in different VxWorks versions */\n void\n@@ -1700,11 +1714,11 @@ __gnat_map_signal (int sig)\n       exception = &constraint_error;\n       msg = \"SIGFPE\";\n       break;\n+#ifdef VTHREADS\n     case SIGILL:\n       exception = &constraint_error;\n-      msg = \"SIGILL\";\n+      msg = \"Floating point exception or SIGILL\";\n       break;\n-#ifdef VTHREADS\n     case SIGSEGV:\n       exception = &storage_error;\n       msg = \"SIGSEGV: possible stack overflow\";\n@@ -1714,6 +1728,10 @@ __gnat_map_signal (int sig)\n       msg = \"SIGBUS: possible stack overflow\";\n       break;\n #else\n+    case SIGILL:\n+      exception = &constraint_error;\n+      msg = \"SIGILL\";\n+      break;\n     case SIGSEGV:\n       exception = &program_error;\n       msg = \"SIGSEGV\";\n@@ -1728,6 +1746,7 @@ __gnat_map_signal (int sig)\n       msg = \"unhandled signal\";\n     }\n \n+  __gnat_clear_exception_count ();\n   Raise_From_Signal_Handler (exception, msg);\n }\n \n@@ -1745,11 +1764,6 @@ __gnat_error_handler (int sig, int code, struct sigcontext *sc)\n   sigdelset (&mask, sig);\n   sigprocmask (SIG_SETMASK, &mask, NULL);\n \n-  /* VxWorks will suspend the task when it gets a hardware exception.  We\n-     take the liberty of resuming the task for the application. */\n-  if (taskIsSuspended (taskIdSelf ()) != 0)\n-    taskResume (taskIdSelf ());\n-\n   __gnat_map_signal (sig);\n \n }"}, {"sha": "eae409b919562271a8b3cccc626a53e3471d116d", "filename": "gcc/ada/s-intman-vxworks.adb", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd9e2ac305d008905732657978f2fb26981a2d8/gcc%2Fada%2Fs-intman-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd9e2ac305d008905732657978f2fb26981a2d8/gcc%2Fada%2Fs-intman-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman-vxworks.adb?ref=8cd9e2ac305d008905732657978f2fb26981a2d8", "patch": "@@ -86,7 +86,6 @@ package body System.Interrupt_Management is\n \n    procedure Notify_Exception (signo : Signal) is\n       Mask   : aliased sigset_t;\n-      My_Id  : t_id;\n \n       Result : int;\n       pragma Unreferenced (Result);\n@@ -96,16 +95,6 @@ package body System.Interrupt_Management is\n       Result := sigdelset (Mask'Access, signo);\n       Result := pthread_sigmask (SIG_SETMASK, Mask'Unchecked_Access, null);\n \n-      --  VxWorks will suspend the task when it gets a hardware\n-      --  exception.  We take the liberty of resuming the task\n-      --  for the application.\n-\n-      My_Id := taskIdSelf;\n-\n-      if taskIsSuspended (My_Id) /= 0 then\n-         Result := taskResume (My_Id);\n-      end if;\n-\n       Map_And_Raise_Exception (signo);\n    end Notify_Exception;\n "}]}