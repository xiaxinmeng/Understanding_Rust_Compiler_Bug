{"sha": "853d88280aa4989f22b716b55f80b0d36ae5fc27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUzZDg4MjgwYWE0OTg5ZjIyYjcxNmI1NWY4MGIwZDM2YWU1ZmMyNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-08-16T07:56:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-08-16T07:56:04Z"}, "message": "combine.c (simplify_shift_const): Revert previous two changes.\n\n        * combine.c (simplify_shift_const): Revert previous two\n        changes.  If SHIFT_COUNT_TRUNCATED, crop the shift count\n        before the main loop.\n\nFrom-SVN: r35742", "tree": {"sha": "063dee2e529b7990805b0203f057fade59de7b59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/063dee2e529b7990805b0203f057fade59de7b59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/853d88280aa4989f22b716b55f80b0d36ae5fc27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/853d88280aa4989f22b716b55f80b0d36ae5fc27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/853d88280aa4989f22b716b55f80b0d36ae5fc27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/853d88280aa4989f22b716b55f80b0d36ae5fc27/comments", "author": null, "committer": null, "parents": [{"sha": "cbd273a8034166dc9f5c5d2db54d549103d2bf0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbd273a8034166dc9f5c5d2db54d549103d2bf0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbd273a8034166dc9f5c5d2db54d549103d2bf0c"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "0a319c69032228988f5e4ecd28ff2f96dcb4d695", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/853d88280aa4989f22b716b55f80b0d36ae5fc27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/853d88280aa4989f22b716b55f80b0d36ae5fc27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=853d88280aa4989f22b716b55f80b0d36ae5fc27", "patch": "@@ -1,3 +1,9 @@\n+2000-08-16  Richard Henderson  <rth@cygnus.com>\n+\n+\t* combine.c (simplify_shift_const): Revert previous two\n+\tchanges.  If SHIFT_COUNT_TRUNCATED, crop the shift count\n+\tbefore the main loop.\n+\n 2000-08-15  Richard Henderson  <rth@cygnus.com>\n \n \t* combine.c (simplify_shift_const): Bound shift count when"}, {"sha": "9e7083bb407abcbae643e94d85a9c543be9301de", "filename": "gcc/combine.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/853d88280aa4989f22b716b55f80b0d36ae5fc27/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/853d88280aa4989f22b716b55f80b0d36ae5fc27/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=853d88280aa4989f22b716b55f80b0d36ae5fc27", "patch": "@@ -8851,6 +8851,14 @@ simplify_shift_const (x, code, result_mode, varop, input_count)\n \n   count = input_count;\n \n+  /* Make sure and truncate the \"natural\" shift on the way in.  We don't\n+     want to do this inside the loop as it makes it more difficult to\n+     combine shifts.  */\n+#ifdef SHIFT_COUNT_TRUNCATED\n+  if (SHIFT_COUNT_TRUNCATED)\n+    count %= GET_MODE_BITSIZE (mode);\n+#endif\n+\n   /* Unless one of the branches of the `if' in this loop does a `continue',\n      we will `break' the loop after the `if'.  */\n \n@@ -8879,23 +8887,17 @@ simplify_shift_const (x, code, result_mode, varop, input_count)\n \t   ? result_mode : mode);\n \n       /* Handle cases where the count is greater than the size of the mode\n-\t minus 1.  If SHIFT_COUNT_TRUNCATED, there aren't really any such\n-\t cases.  Otherwise, for ASHIFT, use the size minus one as the count\n-\t (this can occur when simplifying (lshiftrt (ashiftrt ..))).  For\n-\t rotates, take the count modulo the size.  For other shifts, the\n-\t result is zero.\n+\t minus 1.  For ASHIFT, use the size minus one as the count (this can\n+\t occur when simplifying (lshiftrt (ashiftrt ..))).  For rotates,\n+\t take the count modulo the size.  For other shifts, the result is\n+\t zero.\n \n \t Since these shifts are being produced by the compiler by combining\n \t multiple operations, each of which are defined, we know what the\n \t result is supposed to be.  */\n \n       if (count > GET_MODE_BITSIZE (shift_mode) - 1)\n \t{\n-#ifdef SHIFT_COUNT_TRUNCATED\n-\t  if (SHIFT_COUNT_TRUNCATED)\n-\t    count %= GET_MODE_BITSIZE (shift_mode);\n-\t  else\n-#endif\n \t  if (code == ASHIFTRT)\n \t    count = GET_MODE_BITSIZE (shift_mode) - 1;\n \t  else if (code == ROTATE || code == ROTATERT)\n@@ -9149,8 +9151,6 @@ simplify_shift_const (x, code, result_mode, varop, input_count)\n \t\t    break;\n \n \t\t  count += first_count;\n-\t\t  if (count >= GET_MODE_BITSIZE (shift_mode))\n-\t\t    count = GET_MODE_BITSIZE (shift_mode) - 1;\n \t\t  varop = XEXP (varop, 0);\n \t\t  continue;\n \t\t}\n@@ -9204,9 +9204,6 @@ simplify_shift_const (x, code, result_mode, varop, input_count)\n \t      else\n \t\tcount = signed_count;\n \n-\t      if (count >= GET_MODE_BITSIZE (shift_mode))\n-\t\tcount = GET_MODE_BITSIZE (shift_mode) - 1;\n-\n \t      varop = XEXP (varop, 0);\n \t      continue;\n \t    }"}]}