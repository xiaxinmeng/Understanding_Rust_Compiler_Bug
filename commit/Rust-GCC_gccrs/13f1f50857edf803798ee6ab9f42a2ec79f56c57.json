{"sha": "13f1f50857edf803798ee6ab9f42a2ec79f56c57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNmMWY1MDg1N2VkZjgwMzc5OGVlNmFiOWY0MmEyZWM3OWY1NmM1Nw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-18T07:49:50Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-18T07:49:50Z"}, "message": "re PR target/33135 ([SH] -ffinite-math-only should not be on by default)\n\n\tPR target/33135\n\t* config/sh/sh.opt (mieee): Use Var instead of Mask.  Correct\n\tdescription.\n\t* config/sh/sh.c (sh_option_override): Do not change \n\tflag_finite_math_only.  Set TARGET_IEEE to complement of\n\tflag_finite_math_only.\n\t* doc/invoke.texi (SH options): Add mno-ieee.  Correct description\n\tof mieee and mno-ieee behavior.\n\n\tPR target/33135\n\t* gcc.target/sh/pr33135-1.c: New.\n\t* gcc.target/sh/pr33135-2.c: New.\n\t* gcc.target/sh/pr33135-3.c: New.\n\t* gcc.target/sh/pr33135-4.c: New.\n\nFrom-SVN: r189602", "tree": {"sha": "fa3a48852b7b7f7f3f70579909d4b47f2f6cc6a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa3a48852b7b7f7f3f70579909d4b47f2f6cc6a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13f1f50857edf803798ee6ab9f42a2ec79f56c57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13f1f50857edf803798ee6ab9f42a2ec79f56c57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13f1f50857edf803798ee6ab9f42a2ec79f56c57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13f1f50857edf803798ee6ab9f42a2ec79f56c57/comments", "author": null, "committer": null, "parents": [{"sha": "512ab65410b71ebd1fa32cab38405cd937c1e9d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/512ab65410b71ebd1fa32cab38405cd937c1e9d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/512ab65410b71ebd1fa32cab38405cd937c1e9d7"}], "stats": {"total": 179, "additions": 164, "deletions": 15}, "files": [{"sha": "4507857878372b82e600c45ca1f6c91d4e99717b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f1f50857edf803798ee6ab9f42a2ec79f56c57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f1f50857edf803798ee6ab9f42a2ec79f56c57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13f1f50857edf803798ee6ab9f42a2ec79f56c57", "patch": "@@ -1,3 +1,14 @@\n+2012-07-18  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/33135\n+\t* config/sh/sh.opt (mieee): Use Var instead of Mask.  Correct\n+\tdescription.\n+\t* config/sh/sh.c (sh_option_override): Do not change \n+\tflag_finite_math_only.  Set TARGET_IEEE to complement of\n+\tflag_finite_math_only.\n+\t* doc/invoke.texi (SH options): Add mno-ieee.  Correct description\n+\tof mieee and mno-ieee behavior.\n+\n 2012-07-18  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* graphite-poly.c (print_pbb_body): Fixup dump_bb call."}, {"sha": "df39858e66b664979d50fe64eb11e5d91e581d9a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f1f50857edf803798ee6ab9f42a2ec79f56c57/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f1f50857edf803798ee6ab9f42a2ec79f56c57/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=13f1f50857edf803798ee6ab9f42a2ec79f56c57", "patch": "@@ -599,11 +599,6 @@ sh_option_override (void)\n   SUBTARGET_OVERRIDE_OPTIONS;\n   if (optimize > 1 && !optimize_size)\n     target_flags |= MASK_SAVE_ALL_TARGET_REGS;\n-  if (flag_finite_math_only == 2)\n-    flag_finite_math_only\n-      = !flag_signaling_nans && TARGET_SH2E && ! TARGET_IEEE;\n-  if (TARGET_SH2E && !flag_finite_math_only)\n-    target_flags |= MASK_IEEE;\n   sh_cpu = PROCESSOR_SH1;\n   assembler_dialect = 0;\n   if (TARGET_SH2)\n@@ -889,6 +884,11 @@ sh_option_override (void)\n \t\t && flag_unsafe_math_optimizations\n \t\t && flag_finite_math_only;\n \n+  /* If the -mieee option was not explicitly set by the user, turn it on\n+     unless -ffinite-math-only was specified.  See also PR 33135.  */\n+  if (! global_options_set.x_TARGET_IEEE)\n+    TARGET_IEEE = ! flag_finite_math_only;\n+\n   if (sh_fixed_range_str)\n     sh_fix_range (sh_fixed_range_str);\n "}, {"sha": "fabf9b5b93268de234afa1f7ee5364cf2c3cc4b7", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f1f50857edf803798ee6ab9f42a2ec79f56c57/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f1f50857edf803798ee6ab9f42a2ec79f56c57/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=13f1f50857edf803798ee6ab9f42a2ec79f56c57", "patch": "@@ -266,8 +266,8 @@ Target Report RejectNegative Mask(HITACHI)\n Follow Renesas (formerly Hitachi) / SuperH calling conventions\n \n mieee\n-Target Report Mask(IEEE)\n-Increase the IEEE compliance for floating-point code\n+Target Var(TARGET_IEEE)\n+Increase the IEEE compliance for floating-point comparisons\n \n mindexed-addressing\n Target Report Mask(ALLOW_INDEXED_ADDRESS) Condition(SUPPORT_ANY_SH5_32MEDIA)"}, {"sha": "1207f85127cf75f5c415634a84620535066f2ae7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f1f50857edf803798ee6ab9f42a2ec79f56c57/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f1f50857edf803798ee6ab9f42a2ec79f56c57/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=13f1f50857edf803798ee6ab9f42a2ec79f56c57", "patch": "@@ -881,8 +881,8 @@ See RS/6000 and PowerPC Options.\n -m5-compact  -m5-compact-nofpu @gol\n -mb  -ml  -mdalign  -mrelax @gol\n -mbigtable -mfmovd -mhitachi -mrenesas -mno-renesas -mnomacsave @gol\n--mieee  -mbitops  -misize  -minline-ic_invalidate -mpadstruct  -mspace @gol\n--mprefergot  -musermode -multcost=@var{number} -mdiv=@var{strategy} @gol\n+-mieee -mno-ieee -mbitops  -misize  -minline-ic_invalidate -mpadstruct @gol\n+-mspace -mprefergot  -musermode -multcost=@var{number} -mdiv=@var{strategy} @gol\n -mdivsi3_libfunc=@var{name} -mfixed-range=@var{register-range} @gol\n -mindexed-addressing -mgettrcost=@var{number} -mpt-fixed @gol\n -maccumulate-outgoing-args -minvalid-symbols -msoft-atomic -mhard-atomic @gol\n@@ -18099,13 +18099,15 @@ Mark the @code{MAC} register as call-clobbered, even if\n @option{-mhitachi} is given.\n \n @item -mieee\n+@item -mno-ieee\n @opindex mieee\n-Increase IEEE compliance of floating-point code.\n-At the moment, this is equivalent to @option{-fno-finite-math-only}.\n-When generating 16-bit SH opcodes, getting IEEE-conforming results for\n-comparisons of NANs / infinities incurs extra overhead in every\n-floating-point comparison, therefore the default is set to\n-@option{-ffinite-math-only}.\n+@opindex mnoieee\n+Control the IEEE compliance of floating-point comparisons, which affects the\n+handling of cases where the result of a comparison is unordered.  By default\n+@option{-mieee} is implicitly enabled.  If @option{-ffinite-math-only} is\n+enabled @option{-mno-ieee} is implicitly set, which results in faster\n+floating-point greater-equal and less-equal comparisons.  The implcit settings\n+can be overridden by specifying either @option{-mieee} or @option{-mno-ieee}.\n \n @item -minline-ic_invalidate\n @opindex minline-ic_invalidate"}, {"sha": "4c95a402bd969a93e27edc67a86f741176c703ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f1f50857edf803798ee6ab9f42a2ec79f56c57/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f1f50857edf803798ee6ab9f42a2ec79f56c57/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=13f1f50857edf803798ee6ab9f42a2ec79f56c57", "patch": "@@ -1,3 +1,11 @@\n+2012-07-18  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/33135\n+\t* gcc.target/sh/pr33135-1.c: New.\n+\t* gcc.target/sh/pr33135-2.c: New.\n+\t* gcc.target/sh/pr33135-3.c: New.\n+\t* gcc.target/sh/pr33135-4.c: New.\n+\n 2012-07-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/53995"}, {"sha": "6c28e8c3b2b2ed0d7f98c7c0d7d5c6be46cba703", "filename": "gcc/testsuite/gcc.target/sh/pr33135-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f1f50857edf803798ee6ab9f42a2ec79f56c57/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f1f50857edf803798ee6ab9f42a2ec79f56c57/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-1.c?ref=13f1f50857edf803798ee6ab9f42a2ec79f56c57", "patch": "@@ -0,0 +1,32 @@\n+/* Check that fcmp/eq and fcmp/gt instructions are generated by default\n+   (implicit -mieee).  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"fcmp/eq\" 4 } } */\n+/* { dg-final { scan-assembler-times \"fcmp/gt\" 4 } } */\n+\n+int\n+test_00 (float a, float b)\n+{\n+  return a <= b;\n+}\n+\n+int\n+test_01 (float a, float b)\n+{\n+  return a >= b;\n+}\n+\n+int\n+test_02 (double a, double b)\n+{\n+  return a <= b;\n+}\n+\n+int\n+test_03 (double a, double b)\n+{\n+  return a >= b;\n+}\n+"}, {"sha": "37c4035deca66010b8f8ecc10908558bfc0e371d", "filename": "gcc/testsuite/gcc.target/sh/pr33135-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f1f50857edf803798ee6ab9f42a2ec79f56c57/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f1f50857edf803798ee6ab9f42a2ec79f56c57/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-2.c?ref=13f1f50857edf803798ee6ab9f42a2ec79f56c57", "patch": "@@ -0,0 +1,32 @@\n+/* Check that only the fcmp/gt instruction is generated when specifying\n+   -ffinite-math-only (implicit -mno-ieee).  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1 -ffinite-math-only\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler-not \"fcmp/eq\" } } */\n+/* { dg-final { scan-assembler-times \"fcmp/gt\" 4 } } */\n+\n+int\n+test_00 (float a, float b)\n+{\n+  return a <= b;\n+}\n+\n+int\n+test_01 (float a, float b)\n+{\n+  return a >= b;\n+}\n+\n+int\n+test_02 (double a, double b)\n+{\n+  return a <= b;\n+}\n+\n+int\n+test_03 (double a, double b)\n+{\n+  return a >= b;\n+}\n+"}, {"sha": "cbda922e103c8348e5cd6b95070886b4edb30481", "filename": "gcc/testsuite/gcc.target/sh/pr33135-3.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f1f50857edf803798ee6ab9f42a2ec79f56c57/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f1f50857edf803798ee6ab9f42a2ec79f56c57/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-3.c?ref=13f1f50857edf803798ee6ab9f42a2ec79f56c57", "patch": "@@ -0,0 +1,32 @@\n+/* Check that fcmp/eq and fcmp/gt instructions are generated when specifying\n+   -ffinite-math-only and -mieee.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1 -ffinite-math-only -mieee\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"fcmp/eq\" 4 } } */\n+/* { dg-final { scan-assembler-times \"fcmp/gt\" 4 } } */\n+\n+int\n+test_00 (float a, float b)\n+{\n+  return a <= b;\n+}\n+\n+int\n+test_01 (float a, float b)\n+{\n+  return a >= b;\n+}\n+\n+int\n+test_02 (double a, double b)\n+{\n+  return a <= b;\n+}\n+\n+int\n+test_03 (double a, double b)\n+{\n+  return a >= b;\n+}\n+"}, {"sha": "3e4aa51cd9b07b0f8484949fcfe2b39b54c7238b", "filename": "gcc/testsuite/gcc.target/sh/pr33135-4.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f1f50857edf803798ee6ab9f42a2ec79f56c57/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f1f50857edf803798ee6ab9f42a2ec79f56c57/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-4.c?ref=13f1f50857edf803798ee6ab9f42a2ec79f56c57", "patch": "@@ -0,0 +1,32 @@\n+/* Check that only the fcmp/gt instruction is generated when specifying\n+   -fno-finite-math-only and -mno-ieee.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1 -fno-finite-math-only -mno-ieee\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler-not \"fcmp/eq\" } } */\n+/* { dg-final { scan-assembler-times \"fcmp/gt\" 4 } } */\n+\n+int\n+test_00 (float a, float b)\n+{\n+  return a <= b;\n+}\n+\n+int\n+test_01 (float a, float b)\n+{\n+  return a >= b;\n+}\n+\n+int\n+test_02 (double a, double b)\n+{\n+  return a <= b;\n+}\n+\n+int\n+test_03 (double a, double b)\n+{\n+  return a >= b;\n+}\n+"}]}