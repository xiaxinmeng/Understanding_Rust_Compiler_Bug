{"sha": "24244e4debd3261c8237d15d940fd10df5b0005a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQyNDRlNGRlYmQzMjYxYzgyMzdkMTVkOTQwZmQxMGRmNWIwMDA1YQ==", "commit": {"author": {"name": "Vidya Praveen", "email": "vidyapraveen@arm.com", "date": "2013-06-14T16:53:10Z"}, "committer": {"name": "Vidya Praveen", "email": "vp@gcc.gnu.org", "date": "2013-06-14T16:53:10Z"}, "message": "aarch64-simd.md (aarch64_<su>mlal_lo<mode>): New pattern.\n\n\ngcc/ChangeLog\n\n2013-06-14  Vidya Praveen <vidyapraveen@arm.com>\n\n\t* config/aarch64/aarch64-simd.md (aarch64_<su>mlal_lo<mode>):\n\tNew pattern.\n\t(aarch64_<su>mlal_hi<mode>, aarch64_<su>mlsl_lo<mode>): Likewise.\n\t(aarch64_<su>mlsl_hi<mode>, aarch64_<su>mlal<mode>): Likewise.\n\t(aarch64_<su>mlsl<mode>): Likewise.\n\ngcc/testsuite/ChangeLog\n\n2013-06-14  Vidya Praveen <vidyapraveen@arm.com>\n\n\t* gcc.target/aarch64/vect_smlal_1.c: New file.\n\nFrom-SVN: r200096", "tree": {"sha": "0303478a86dc0ad5692c8f7b7fb414d5969362e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0303478a86dc0ad5692c8f7b7fb414d5969362e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24244e4debd3261c8237d15d940fd10df5b0005a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24244e4debd3261c8237d15d940fd10df5b0005a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24244e4debd3261c8237d15d940fd10df5b0005a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24244e4debd3261c8237d15d940fd10df5b0005a/comments", "author": {"login": "vparm", "id": 63807973, "node_id": "MDQ6VXNlcjYzODA3OTcz", "avatar_url": "https://avatars.githubusercontent.com/u/63807973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vparm", "html_url": "https://github.com/vparm", "followers_url": "https://api.github.com/users/vparm/followers", "following_url": "https://api.github.com/users/vparm/following{/other_user}", "gists_url": "https://api.github.com/users/vparm/gists{/gist_id}", "starred_url": "https://api.github.com/users/vparm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vparm/subscriptions", "organizations_url": "https://api.github.com/users/vparm/orgs", "repos_url": "https://api.github.com/users/vparm/repos", "events_url": "https://api.github.com/users/vparm/events{/privacy}", "received_events_url": "https://api.github.com/users/vparm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5273574ff277259dd369786b75d83f10efdb187", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5273574ff277259dd369786b75d83f10efdb187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5273574ff277259dd369786b75d83f10efdb187"}], "stats": {"total": 435, "additions": 435, "deletions": 0}, "files": [{"sha": "abdc7b56a5c250bc362fe3c3ded958d332fb751c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24244e4debd3261c8237d15d940fd10df5b0005a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24244e4debd3261c8237d15d940fd10df5b0005a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24244e4debd3261c8237d15d940fd10df5b0005a", "patch": "@@ -1,3 +1,11 @@\n+2013-06-14  Vidya Praveen <vidyapraveen@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_<su>mlal_lo<mode>):\n+\tNew pattern.\n+\t(aarch64_<su>mlal_hi<mode>, aarch64_<su>mlsl_lo<mode>): Likewise.\n+\t(aarch64_<su>mlsl_hi<mode>, aarch64_<su>mlal<mode>): Likewise.\n+\t(aarch64_<su>mlsl<mode>): Likewise.\n+\n 2013-06-14  Mike Stump  <mikestump@comcast.net>\n \n \t* Makefile.in (TARGET_H): Add insn-codes.h."}, {"sha": "02037f3f2cb5a926d203d23ce323ae6a88ee9d61", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24244e4debd3261c8237d15d940fd10df5b0005a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24244e4debd3261c8237d15d940fd10df5b0005a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=24244e4debd3261c8237d15d940fd10df5b0005a", "patch": "@@ -1190,6 +1190,104 @@\n \n ;; Widening arithmetic.\n \n+(define_insn \"*aarch64_<su>mlal_lo<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (plus:<VWIDE>\n+          (mult:<VWIDE>\n+              (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n+                 (match_operand:VQW 2 \"register_operand\" \"w\")\n+                 (match_operand:VQW 3 \"vect_par_cnst_lo_half\" \"\")))\n+              (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n+                 (match_operand:VQW 4 \"register_operand\" \"w\")\n+                 (match_dup 3))))\n+          (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  \"<su>mlal\\t%0.<Vwtype>, %2.<Vhalftype>, %4.<Vhalftype>\"\n+  [(set_attr \"simd_type\" \"simd_mlal\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+\n+(define_insn \"*aarch64_<su>mlal_hi<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (plus:<VWIDE>\n+          (mult:<VWIDE>\n+              (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n+                 (match_operand:VQW 2 \"register_operand\" \"w\")\n+                 (match_operand:VQW 3 \"vect_par_cnst_hi_half\" \"\")))\n+              (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n+                 (match_operand:VQW 4 \"register_operand\" \"w\")\n+                 (match_dup 3))))\n+          (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  \"<su>mlal2\\t%0.<Vwtype>, %2.<Vtype>, %4.<Vtype>\"\n+  [(set_attr \"simd_type\" \"simd_mlal\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+\n+(define_insn \"*aarch64_<su>mlsl_lo<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (minus:<VWIDE>\n+          (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n+          (mult:<VWIDE>\n+              (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n+                 (match_operand:VQW 2 \"register_operand\" \"w\")\n+                 (match_operand:VQW 3 \"vect_par_cnst_lo_half\" \"\")))\n+              (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n+                 (match_operand:VQW 4 \"register_operand\" \"w\")\n+                 (match_dup 3))))))]\n+  \"TARGET_SIMD\"\n+  \"<su>mlsl\\t%0.<Vwtype>, %2.<Vhalftype>, %4.<Vhalftype>\"\n+  [(set_attr \"simd_type\" \"simd_mlal\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+\n+(define_insn \"*aarch64_<su>mlsl_hi<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (minus:<VWIDE>\n+          (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n+          (mult:<VWIDE>\n+              (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n+                 (match_operand:VQW 2 \"register_operand\" \"w\")\n+                 (match_operand:VQW 3 \"vect_par_cnst_hi_half\" \"\")))\n+              (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n+                 (match_operand:VQW 4 \"register_operand\" \"w\")\n+                 (match_dup 3))))))]\n+  \"TARGET_SIMD\"\n+  \"<su>mlsl2\\t%0.<Vwtype>, %2.<Vtype>, %4.<Vtype>\"\n+  [(set_attr \"simd_type\" \"simd_mlal\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+\n+(define_insn \"*aarch64_<su>mlal<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (plus:<VWIDE>\n+          (mult:<VWIDE>\n+            (ANY_EXTEND:<VWIDE>\n+              (match_operand:VDW 1 \"register_operand\" \"w\"))\n+            (ANY_EXTEND:<VWIDE>\n+              (match_operand:VDW 2 \"register_operand\" \"w\")))\n+          (match_operand:<VWIDE> 3 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  \"<su>mlal\\t%0.<Vwtype>, %1.<Vtype>, %2.<Vtype>\"\n+  [(set_attr \"simd_type\" \"simd_mlal\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+\n+(define_insn \"*aarch64_<su>mlsl<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (minus:<VWIDE>\n+          (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n+          (mult:<VWIDE>\n+            (ANY_EXTEND:<VWIDE>\n+              (match_operand:VDW 2 \"register_operand\" \"w\"))\n+            (ANY_EXTEND:<VWIDE>\n+              (match_operand:VDW 3 \"register_operand\" \"w\")))))]\n+  \"TARGET_SIMD\"\n+  \"<su>mlsl\\t%0.<Vwtype>, %2.<Vtype>, %3.<Vtype>\"\n+  [(set_attr \"simd_type\" \"simd_mlal\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+\n (define_insn \"aarch64_simd_vec_<su>mult_lo_<mode>\"\n  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n        (mult:<VWIDE> (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>"}, {"sha": "40ff17f2389438cc5aff3227f467f23379e76980", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24244e4debd3261c8237d15d940fd10df5b0005a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24244e4debd3261c8237d15d940fd10df5b0005a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=24244e4debd3261c8237d15d940fd10df5b0005a", "patch": "@@ -1,3 +1,7 @@\n+2013-06-14  Vidya Praveen <vidyapraveen@arm.com>\n+\n+\t* gcc.target/aarch64/vect_smlal_1.c: New file.\n+\n 2013-06-14  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/57508"}, {"sha": "1f86eaeeb6e8cc2cb1fa4be4ea1ab0ef33a14b74", "filename": "gcc/testsuite/gcc.target/aarch64/vect_smlal_1.c", "status": "added", "additions": 325, "deletions": 0, "changes": 325, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24244e4debd3261c8237d15d940fd10df5b0005a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_smlal_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24244e4debd3261c8237d15d940fd10df5b0005a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_smlal_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_smlal_1.c?ref=24244e4debd3261c8237d15d940fd10df5b0005a", "patch": "@@ -0,0 +1,325 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -fno-inline -save-temps -fno-vect-cost-model\" } */\n+\n+typedef signed char S8_t;\n+typedef signed short S16_t;\n+typedef signed int S32_t;\n+typedef signed long S64_t;\n+typedef signed char *__restrict__ pS8_t;\n+typedef signed short *__restrict__ pS16_t;\n+typedef signed int *__restrict__ pS32_t;\n+typedef signed long *__restrict__ pS64_t;\n+typedef unsigned char U8_t;\n+typedef unsigned short U16_t;\n+typedef unsigned int U32_t;\n+typedef unsigned long U64_t;\n+typedef unsigned char *__restrict__ pU8_t;\n+typedef unsigned short *__restrict__ pU16_t;\n+typedef unsigned int *__restrict__ pU32_t;\n+typedef unsigned long *__restrict__ pU64_t;\n+\n+extern void abort ();\n+\n+void\n+test_addS64_tS32_t4 (pS64_t a, pS32_t b, pS32_t c)\n+{\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    a[i] += (S64_t) b[i] * (S64_t) c[i];\n+}\n+\n+/* { dg-final { scan-assembler \"smlal\\tv\\[0-9\\]+\\.2d\" } } */\n+/* { dg-final { scan-assembler \"smlal2\\tv\\[0-9\\]+\\.2d\" } } */\n+\n+void\n+test_addS32_tS16_t8 (pS32_t a, pS16_t b, pS16_t c)\n+{\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    a[i] += (S32_t) b[i] * (S32_t) c[i];\n+}\n+\n+/* { dg-final { scan-assembler \"smlal\\tv\\[0-9\\]+\\.4s\" } } */\n+/* { dg-final { scan-assembler \"smlal2\\tv\\[0-9\\]+\\.4s\" } } */\n+\n+void\n+test_addS16_tS8_t16 (pS16_t a, pS8_t b, pS8_t c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    a[i] += (S16_t) b[i] * (S16_t) c[i];\n+}\n+\n+void\n+test_addS16_tS8_t16_neg0 (pS16_t a, pS8_t b, pS8_t c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    a[i] += (S16_t) -b[i] * (S16_t) -c[i];\n+}\n+\n+void\n+test_addS16_tS8_t16_neg1 (pS16_t a, pS8_t b, pS8_t c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    a[i] -= (S16_t) b[i] * (S16_t) -c[i];\n+}\n+\n+void\n+test_addS16_tS8_t16_neg2 (pS16_t a, pS8_t b, pS8_t c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    a[i] -= (S16_t) -b[i] * (S16_t) c[i];\n+}\n+\n+/* { dg-final { scan-assembler-times \"smlal\\tv\\[0-9\\]+\\.8h\" 4 } } */\n+/* { dg-final { scan-assembler-times \"smlal2\\tv\\[0-9\\]+\\.8h\" 4 } } */\n+\n+void\n+test_subS64_tS32_t4 (pS64_t a, pS32_t b, pS32_t c)\n+{\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    a[i] -= (S64_t) b[i] * (S64_t) c[i];\n+}\n+\n+/* { dg-final { scan-assembler \"smlsl\\tv\\[0-9\\]+\\.2d\" } } */\n+/* { dg-final { scan-assembler \"smlsl2\\tv\\[0-9\\]+\\.2d\" } } */\n+\n+void\n+test_subS32_tS16_t8 (pS32_t a, pS16_t b, pS16_t c)\n+{\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    a[i] -= (S32_t) b[i] * (S32_t) c[i];\n+}\n+\n+/* { dg-final { scan-assembler \"smlsl\\tv\\[0-9\\]+\\.4s\" } } */\n+/* { dg-final { scan-assembler \"smlsl2\\tv\\[0-9\\]+\\.4s\" } } */\n+\n+void\n+test_subS16_tS8_t16 (pS16_t a, pS8_t b, pS8_t c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    a[i] -= (S16_t) b[i] * (S16_t) c[i];\n+}\n+\n+void\n+test_subS16_tS8_t16_neg0 (pS16_t a, pS8_t b, pS8_t c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    a[i] += (S16_t) -b[i] * (S16_t) c[i];\n+}\n+\n+void\n+test_subS16_tS8_t16_neg1 (pS16_t a, pS8_t b, pS8_t c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    a[i] += (S16_t) b[i] * (S16_t) -c[i];\n+}\n+\n+void\n+test_subS16_tS8_t16_neg2 (pS16_t a, pS8_t b, pS8_t c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    a[i] += -((S16_t) b[i] * (S16_t) c[i]);\n+}\n+\n+void\n+test_subS16_tS8_t16_neg3 (pS16_t a, pS8_t b, pS8_t c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    a[i] -= (S16_t) -b[i] * (S16_t) -c[i];\n+}\n+\n+/* { dg-final { scan-assembler-times \"smlsl\\tv\\[0-9\\]+\\.8h\" 5 } } */\n+/* { dg-final { scan-assembler-times \"smlsl2\\tv\\[0-9\\]+\\.8h\" 5 } } */\n+\n+void\n+test_addU64_tU32_t4 (pU64_t a, pU32_t b, pU32_t c)\n+{\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    a[i] += (U64_t) b[i] * (U64_t) c[i];\n+}\n+\n+/* { dg-final { scan-assembler \"umlal\\tv\\[0-9\\]+\\.2d\" } } */\n+/* { dg-final { scan-assembler \"umlal2\\tv\\[0-9\\]+\\.2d\" } } */\n+\n+void\n+test_addU32_tU16_t8 (pU32_t a, pU16_t b, pU16_t c)\n+{\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    a[i] += (U32_t) b[i] * (U32_t) c[i];\n+}\n+\n+/* { dg-final { scan-assembler \"umlal\\tv\\[0-9\\]+\\.4s\" } } */\n+/* { dg-final { scan-assembler \"umlal2\\tv\\[0-9\\]+\\.4s\" } } */\n+\n+void\n+test_addU16_tU8_t16 (pU16_t a, pU8_t b, pU8_t c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    a[i] += (U16_t) b[i] * (U16_t) c[i];\n+}\n+\n+/* { dg-final { scan-assembler \"umlal\\tv\\[0-9\\]+\\.8h\" } } */\n+/* { dg-final { scan-assembler \"umlal2\\tv\\[0-9\\]+\\.8h\" } } */\n+\n+void\n+test_subU64_tU32_t4 (pU64_t a, pU32_t b, pU32_t c)\n+{\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    a[i] -= (U64_t) b[i] * (U64_t) c[i];\n+}\n+\n+/* { dg-final { scan-assembler \"umlsl\\tv\\[0-9\\]+\\.2d\" } } */\n+/* { dg-final { scan-assembler \"umlsl2\\tv\\[0-9\\]+\\.2d\" } } */\n+\n+void\n+test_subU32_tU16_t8 (pU32_t a, pU16_t b, pU16_t c)\n+{\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    a[i] -= (U32_t) b[i] * (U32_t) c[i];\n+}\n+\n+/* { dg-final { scan-assembler \"umlsl\\tv\\[0-9\\]+\\.4s\" } } */\n+/* { dg-final { scan-assembler \"umlsl2\\tv\\[0-9\\]+\\.4s\" } } */\n+\n+void\n+test_subU16_tU8_t16 (pU16_t a, pU8_t b, pU8_t c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    a[i] -= (U16_t) b[i] * (U16_t) c[i];\n+}\n+\n+/* { dg-final { scan-assembler \"umlsl\\tv\\[0-9\\]+\\.8h\" } } */\n+/* { dg-final { scan-assembler \"umlsl2\\tv\\[0-9\\]+\\.8h\" } } */\n+\n+\n+S64_t add_rS64[4] = { 6, 7, -4, -3 };\n+S32_t add_rS32[8] = { 6, 7, -4, -3, 10, 11, 0, 1 };\n+S16_t add_rS16[16] =\n+ { 6, 7, -4, -3, 10, 11, 0, 1, 14, 15, 4, 5, 18, 19, 8, 9 };\n+\n+S64_t sub_rS64[4] = { 0, 1, 2, 3 };\n+S32_t sub_rS32[8] = { 0, 1, 2, 3, 4, 5, 6, 7 };\n+S16_t sub_rS16[16] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+\n+U64_t add_rU64[4] = { 0x6, 0x7, 0x2fffffffc, 0x2fffffffd };\n+\n+U32_t add_rU32[8] =\n+{\n+  0x6, 0x7, 0x2fffc, 0x2fffd,\n+  0xa, 0xb, 0x30000, 0x30001\n+};\n+\n+U16_t add_rU16[16] =\n+{\n+  0x6, 0x7, 0x2fc, 0x2fd, 0xa, 0xb, 0x300, 0x301,\n+  0xe, 0xf, 0x304, 0x305, 0x12, 0x13, 0x308, 0x309\n+};\n+\n+U64_t sub_rU64[4] = { 0, 1, 2, 3 };\n+U32_t sub_rU32[8] = { 0, 1, 2, 3, 4, 5, 6, 7 };\n+U16_t sub_rU16[16] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+\n+S8_t neg_r[16] = { -6, -5, 8, 9, -2, -1, 12, 13, 2, 3, 16, 17, 6, 7, 20, 21 };\n+\n+S64_t S64_ta[16] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+S32_t S32_tb[16] = { 2, 2, -2, -2, 2, 2, -2, -2, 2, 2, -2, -2, 2, 2, -2, -2 };\n+S32_t S32_tc[16] = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };\n+\n+S32_t S32_ta[16] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+S16_t S16_tb[16] = { 2, 2, -2, -2, 2, 2, -2, -2, 2, 2, -2, -2, 2, 2, -2, -2 };\n+S16_t S16_tc[16] = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };\n+\n+S16_t S16_ta[16] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+S8_t S8_tb[16] = { 2, 2, -2, -2, 2, 2, -2, -2, 2, 2, -2, -2, 2, 2, -2, -2 };\n+S8_t S8_tc[16] = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };\n+\n+\n+#define CHECK(T,N,AS,US)                      \\\n+do                                            \\\n+  {                                           \\\n+    for (i = 0; i < N; i++)                   \\\n+      if (S##T##_ta[i] != AS##_r##US##T[i])   \\\n+        abort ();                             \\\n+  }                                           \\\n+while (0)\n+\n+#define SCHECK(T,N,AS) CHECK(T,N,AS,S)\n+#define UCHECK(T,N,AS) CHECK(T,N,AS,U)\n+\n+#define NCHECK(RES)                           \\\n+do                                            \\\n+  {                                           \\\n+    for (i = 0; i < 16; i++)                  \\\n+      if (S16_ta[i] != RES[i])                \\\n+        abort ();                             \\\n+  }                                           \\\n+while (0)\n+\n+\n+int\n+main ()\n+{\n+  int i;\n+\n+  test_addS64_tS32_t4 (S64_ta, S32_tb, S32_tc);\n+  SCHECK (64, 4, add);\n+  test_addS32_tS16_t8 (S32_ta, S16_tb, S16_tc);\n+  SCHECK (32, 8, add);\n+  test_addS16_tS8_t16 (S16_ta, S8_tb, S8_tc);\n+  SCHECK (16, 16, add);\n+  test_subS64_tS32_t4 (S64_ta, S32_tb, S32_tc);\n+  SCHECK (64, 4, sub);\n+  test_subS32_tS16_t8 (S32_ta, S16_tb, S16_tc);\n+  SCHECK (32, 8, sub);\n+  test_subS16_tS8_t16 (S16_ta, S8_tb, S8_tc);\n+  SCHECK (16, 16, sub);\n+\n+  test_addU64_tU32_t4 (S64_ta, S32_tb, S32_tc);\n+  UCHECK (64, 4, add);\n+  test_addU32_tU16_t8 (S32_ta, S16_tb, S16_tc);\n+  UCHECK (32, 8, add);\n+  test_addU16_tU8_t16 (S16_ta, S8_tb, S8_tc);\n+  UCHECK (16, 16, add);\n+  test_subU64_tU32_t4 (S64_ta, S32_tb, S32_tc);\n+  UCHECK (64, 4, sub);\n+  test_subU32_tU16_t8 (S32_ta, S16_tb, S16_tc);\n+  UCHECK (32, 8, sub);\n+  test_subU16_tU8_t16 (S16_ta, S8_tb, S8_tc);\n+  UCHECK (16, 16, sub);\n+\n+  test_addS16_tS8_t16_neg0 (S16_ta, S8_tb, S8_tc);\n+  NCHECK (add_rS16);\n+  test_subS16_tS8_t16_neg0 (S16_ta, S8_tb, S8_tc);\n+  NCHECK (sub_rS16);\n+  test_addS16_tS8_t16_neg1 (S16_ta, S8_tb, S8_tc);\n+  NCHECK (add_rS16);\n+  test_subS16_tS8_t16_neg1 (S16_ta, S8_tb, S8_tc);\n+  NCHECK (sub_rS16);\n+  test_addS16_tS8_t16_neg2 (S16_ta, S8_tb, S8_tc);\n+  NCHECK (add_rS16);\n+  test_subS16_tS8_t16_neg2 (S16_ta, S8_tb, S8_tc);\n+  NCHECK (sub_rS16);\n+  test_subS16_tS8_t16_neg3 (S16_ta, S8_tb, S8_tc);\n+  NCHECK (neg_r);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}