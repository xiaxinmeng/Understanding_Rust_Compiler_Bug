{"sha": "002d81affa8a4e625993d3c9c7840ca4aba9750c", "node_id": "C_kwDOANBUbNoAKDAwMmQ4MWFmZmE4YTRlNjI1OTkzZDNjOWM3ODQwY2E0YWJhOTc1MGM", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-09T08:02:14Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-09T08:04:55Z"}, "message": "Support *testdi_not_doubleword during STV pass on x86.\n\nThis patch fixes the current two FAILs of pr65105-5.c on x86 when\ncompiled with -m32.  These (temporary) breakages were fallout from my\npatches to improve/upgrade (scalar) double word comparisons.\nOn mainline, the i386 backend currently represents a critical comparison\nusing (compare (and (not reg1) reg2) (const_int 0)) which isn't/wasn't\nrecognized by the STV pass' convertible_comparison_p.  This simple STV\npatch adds support for this pattern (*testdi_not_doubleword) and\ngenerates the vector pandn and ptest instructions expected in the\nexisting (failing) test case.\n\n2022-07-09  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/i386-features.cc (convert_compare): Add support\n\tfor *testdi_not_doubleword pattern, \"(compare (and (not ...)))\"\n\tby generating a pandn followed by ptest.\n\t(convertible_comparison_p): Recognize both *cmpdi_doubleword and\n\trecent *testdi_not_doubleword comparison patterns.", "tree": {"sha": "b5a49fd2bfb45375a80cd4f4eede7f0522a74576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5a49fd2bfb45375a80cd4f4eede7f0522a74576"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/002d81affa8a4e625993d3c9c7840ca4aba9750c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/002d81affa8a4e625993d3c9c7840ca4aba9750c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/002d81affa8a4e625993d3c9c7840ca4aba9750c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/002d81affa8a4e625993d3c9c7840ca4aba9750c/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84ff566c63cde517c7d963a554e338531fb059f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ff566c63cde517c7d963a554e338531fb059f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84ff566c63cde517c7d963a554e338531fb059f1"}], "stats": {"total": 53, "additions": 41, "deletions": 12}, "files": [{"sha": "a7bd17240ca02d8713f61ad66239e22b4c980061", "filename": "gcc/config/i386/i386-features.cc", "status": "modified", "additions": 41, "deletions": 12, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002d81affa8a4e625993d3c9c7840ca4aba9750c/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002d81affa8a4e625993d3c9c7840ca4aba9750c/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.cc?ref=002d81affa8a4e625993d3c9c7840ca4aba9750c", "patch": "@@ -938,10 +938,10 @@ general_scalar_chain::convert_compare (rtx op1, rtx op2, rtx_insn *insn)\n {\n   rtx tmp = gen_reg_rtx (vmode);\n   rtx src;\n-  convert_op (&op1, insn);\n   /* Comparison against anything other than zero, requires an XOR.  */\n   if (op2 != const0_rtx)\n     {\n+      convert_op (&op1, insn);\n       convert_op (&op2, insn);\n       /* If both operands are MEMs, explicitly load the OP1 into TMP.  */\n       if (MEM_P (op1) && MEM_P (op2))\n@@ -953,8 +953,25 @@ general_scalar_chain::convert_compare (rtx op1, rtx op2, rtx_insn *insn)\n \tsrc = op1;\n       src = gen_rtx_XOR (vmode, src, op2);\n     }\n+  else if (GET_CODE (op1) == AND\n+\t   && GET_CODE (XEXP (op1, 0)) == NOT)\n+    {\n+      rtx op11 = XEXP (XEXP (op1, 0), 0);\n+      rtx op12 = XEXP (op1, 1);\n+      convert_op (&op11, insn);\n+      convert_op (&op12, insn);\n+      if (MEM_P (op11))\n+\t{\n+\t  emit_insn_before (gen_rtx_SET (tmp, op11), insn);\n+\t  op11 = tmp;\n+\t}\n+      src = gen_rtx_AND (vmode, gen_rtx_NOT (vmode, op11), op12);\n+    }\n   else\n-    src = op1;\n+    {\n+      convert_op (&op1, insn);\n+      src = op1;\n+    }\n   emit_insn_before (gen_rtx_SET (tmp, src), insn);\n \n   if (vmode == V2DImode)\n@@ -1399,17 +1416,29 @@ convertible_comparison_p (rtx_insn *insn, enum machine_mode mode)\n   rtx op1 = XEXP (src, 0);\n   rtx op2 = XEXP (src, 1);\n \n-  if (!CONST_INT_P (op1)\n-      && ((!REG_P (op1) && !MEM_P (op1))\n-\t  || GET_MODE (op1) != mode))\n-    return false;\n-\n-  if (!CONST_INT_P (op2)\n-      && ((!REG_P (op2) && !MEM_P (op2))\n-\t  || GET_MODE (op2) != mode))\n-    return false;\n+  /* *cmp<dwi>_doubleword.  */\n+  if ((CONST_INT_P (op1)\n+       || ((REG_P (op1) || MEM_P (op1))\n+           && GET_MODE (op1) == mode))\n+      && (CONST_INT_P (op2)\n+\t  || ((REG_P (op2) || MEM_P (op2))\n+\t      && GET_MODE (op2) == mode)))\n+    return true;\n+\n+  /* *test<dwi>_not_doubleword.  */\n+  if (op2 == const0_rtx\n+      && GET_CODE (op1) == AND\n+      && GET_CODE (XEXP (op1, 0)) == NOT)\n+    {\n+      rtx op11 = XEXP (XEXP (op1, 0), 0);\n+      rtx op12 = XEXP (op1, 1);\n+      return (REG_P (op11) || MEM_P (op11))\n+\t     && (REG_P (op12) || MEM_P (op12))\n+\t     && GET_MODE (op11) == mode\n+\t     && GET_MODE (op12) == mode;\n+    }\n \n-  return true;\n+  return false;\n }\n \n /* The general version of scalar_to_vector_candidate_p.  */"}]}