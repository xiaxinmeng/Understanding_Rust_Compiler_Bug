{"sha": "607fb860424ca6579ade785b50e7052ad50c0cd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA3ZmI4NjA0MjRjYTY1NzlhZGU3ODViNTBlNzA1MmFkNTBjMGNkNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-06-12T14:03:01Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-06-12T14:03:01Z"}, "message": "cgraphunit.c, [...]: Fix comment typos.\n\n\t* cgraphunit.c, tree-ssa-loop-ivopts.c,\n\ttree-ssa-structalias.c, tree-vectorizer.c, tree-vectorizer.h,\n\tconfig/sparc/sparc.c: Fix comment typos.\n\nFrom-SVN: r100856", "tree": {"sha": "094995a12852b3b2e72466a874154edd2a9104a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/094995a12852b3b2e72466a874154edd2a9104a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/607fb860424ca6579ade785b50e7052ad50c0cd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/607fb860424ca6579ade785b50e7052ad50c0cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/607fb860424ca6579ade785b50e7052ad50c0cd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/607fb860424ca6579ade785b50e7052ad50c0cd5/comments", "author": null, "committer": null, "parents": [{"sha": "f825b328fa27bcb714ae5b955aad6c80c40b3a22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f825b328fa27bcb714ae5b955aad6c80c40b3a22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f825b328fa27bcb714ae5b955aad6c80c40b3a22"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "1995605a6803771ef1f3f5d634fa6af2f3165227", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607fb860424ca6579ade785b50e7052ad50c0cd5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607fb860424ca6579ade785b50e7052ad50c0cd5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=607fb860424ca6579ade785b50e7052ad50c0cd5", "patch": "@@ -1,3 +1,9 @@\n+2005-06-12  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* cgraphunit.c, tree-ssa-loop-ivopts.c,\n+\ttree-ssa-structalias.c, tree-vectorizer.c, tree-vectorizer.h,\n+\tconfig/sparc/sparc.c: Fix comment typos.\n+\n 2005-06-12  Richard Earnshaw  <richard.earnshaw@arm.com>\n \n \t* arm/ieee754-df.s (aeabi_dcmpeq, aeabi_dcmplt, aeabi_dcmple)"}, {"sha": "2f993f3d443bad8db246f782186f102a22404bbc", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607fb860424ca6579ade785b50e7052ad50c0cd5/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607fb860424ca6579ade785b50e7052ad50c0cd5/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=607fb860424ca6579ade785b50e7052ad50c0cd5", "patch": "@@ -736,7 +736,7 @@ cgraph_varpool_assemble_pending_decls (void)\n       if (!TREE_ASM_WRITTEN (decl) && !node->alias && !DECL_EXTERNAL (decl))\n \t{\n \t  assemble_variable (decl, 0, 1, 0);\n-\t  /* Local static vairables are neever seen by check_global_declarations\n+\t  /* Local static variables are never seen by check_global_declarations\n \t     so we need to output debug info by hand.  */\n \t  if (decl_function_context (decl) && errorcount == 0 && sorrycount == 0)\n \t    {"}, {"sha": "edbde43da66b13a12939ea3f5c3dafd45424470e", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607fb860424ca6579ade785b50e7052ad50c0cd5/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607fb860424ca6579ade785b50e7052ad50c0cd5/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=607fb860424ca6579ade785b50e7052ad50c0cd5", "patch": "@@ -7978,7 +7978,7 @@ sparc_handle_vis_mul8x16 (int fncode, tree inner_type, tree elts0, tree elts1)\n \n }\n /* Handle TARGET_FOLD_BUILTIN target hook.\n-   Fold builtin functions for SPARC intrinsics.  If INGNORE is true the\n+   Fold builtin functions for SPARC intrinsics.  If IGNORE is true the\n    result of the function call is ignored.  NULL_TREE is returned if the\n    function could not be folded.  */\n "}, {"sha": "2d474d3713f361eade422fa0eb15210d1c4acdc9", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607fb860424ca6579ade785b50e7052ad50c0cd5/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607fb860424ca6579ade785b50e7052ad50c0cd5/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=607fb860424ca6579ade785b50e7052ad50c0cd5", "patch": "@@ -1492,7 +1492,7 @@ may_be_unaligned_p (tree ref)\n   unsigned base_align;\n \n   /* TARGET_MEM_REFs are translated directly to valid MEMs on the target,\n-     thus they are not missaligned.  */\n+     thus they are not misaligned.  */\n   if (TREE_CODE (ref) == TARGET_MEM_REF)\n     return false;\n "}, {"sha": "25c2a449d92e423b59d26ff84867077a0c1c6da2", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607fb860424ca6579ade785b50e7052ad50c0cd5/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607fb860424ca6579ade785b50e7052ad50c0cd5/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=607fb860424ca6579ade785b50e7052ad50c0cd5", "patch": "@@ -80,7 +80,7 @@ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n    DEREF is a constraint expression type used to represent *x, whether\n    it appears on the LHS or the RHS of a statement. \n    ADDRESSOF is a constraint expression used to represent &x, whether\n-   it apepars on the LHS or the RHS of a statement.\n+   it appears on the LHS or the RHS of a statement.\n    \n    Each pointer variable in the program is assigned an integer id, and\n    each field of a structure variable is assigned an integer id as well.\n@@ -137,8 +137,8 @@ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n   causes Sol(P) <- Sol(P) union Sol(Q).\n   \n   7.  As we visit each node, all complex constraints associated with\n-  that node are processed by adding approriate copy edges to the graph, or the\n-  approriate variables to the solution set.  \n+  that node are processed by adding appropriate copy edges to the graph, or the\n+  appropriate variables to the solution set.  \n \n   8. The process of walking the graph is iterated until no solution\n   sets change.\n@@ -245,7 +245,7 @@ DEF_VEC_P(varinfo_t);\n \n DEF_VEC_ALLOC_P(varinfo_t, gc);\n \n-/* Table of variable info structures for constraint variables.  Indexed direcly\n+/* Table of variable info structures for constraint variables.  Indexed directly\n    by variable info id.  */\n static VEC(varinfo_t,gc) *varmap;\n #define get_varinfo(n) VEC_index(varinfo_t, varmap, n)\n@@ -1582,7 +1582,7 @@ perform_var_substitution (constraint_graph_t graph)\n \t  /* Theorem 4 in Rountev and Chandra: If i is a direct node,\n \t     then Solution(i) is a subset of Solution (w), where w is a\n \t     predecessor in the graph.  \n-\t     Corrolary: If all predecessors of i have the same\n+\t     Corollary: If all predecessors of i have the same\n \t     points-to set, then i has that same points-to set as\n \t     those predecessors.  */\n \t  tmp = BITMAP_ALLOC (NULL);\n@@ -3052,7 +3052,7 @@ init_base_vars (void)\n   /* readonly memory points to anything, in order to make deref\n      easier.  In reality, it points to anything the particular\n      readonly variable can point to, but we don't track this\n-     seperately. */\n+     separately. */\n   lhs.type = SCALAR;\n   lhs.var = readonly_id;\n   lhs.offset = 0;"}, {"sha": "1f612c5444c6a37bc269534aec670d4c1d534eaa", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607fb860424ca6579ade785b50e7052ad50c0cd5/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607fb860424ca6579ade785b50e7052ad50c0cd5/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=607fb860424ca6579ade785b50e7052ad50c0cd5", "patch": "@@ -1748,7 +1748,7 @@ vect_is_simple_use (tree operand, loop_vec_info loop_vinfo, tree *def_stmt,\n \n    TODO:\n    Detect a cross-iteration def-use cucle that represents a simple\n-   reduction computation. We look for the followng pattern:\n+   reduction computation. We look for the following pattern:\n \n    loop_header:\n      a1 = phi < a0, a2 >"}, {"sha": "332025b03e66a90dace08c904d8250dea5ec0e5b", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607fb860424ca6579ade785b50e7052ad50c0cd5/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607fb860424ca6579ade785b50e7052ad50c0cd5/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=607fb860424ca6579ade785b50e7052ad50c0cd5", "patch": "@@ -56,7 +56,7 @@ enum dr_alignment_support {\n   dr_aligned\n };\n \n-/* Define type of def-use cross-iteraiton cycle.  */\n+/* Define type of def-use cross-iteration cycle.  */\n enum vect_def_type {\n   vect_constant_def,\n   vect_invariant_def,"}]}