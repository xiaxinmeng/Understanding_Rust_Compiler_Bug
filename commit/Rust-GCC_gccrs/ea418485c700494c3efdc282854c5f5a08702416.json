{"sha": "ea418485c700494c3efdc282854c5f5a08702416", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE0MTg0ODVjNzAwNDk0YzNlZmRjMjgyODU0YzVmNWEwODcwMjQxNg==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-05-31T00:17:22Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-06-01T18:28:59Z"}, "message": "Fix PR 95481: tail call fails with empty struct types\n\nThe problem here is we don't have an assignment type any more\nfor empty structs as they were removed during gimplifcation.\nThis adds a special case where the assignment var does not exist\nand the return decl is empty typed.\n\nOK? Tested on aarch64-linux-gnu with no regressions.\n\nThanks,\nAndrew Pinski\n\nchanges since v1:\nv2: Use is_empty_type instead of zero-sized type.\n\ngcc/ChangeLog:\n\tPR tree-optimization/95481\n\t* tree-tailcall.c (find_tail_calls): Handle empty typed\n\treturn decls.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/95481\n\t* gcc.dg/tree-ssa/tailcall-10.c: New test.\n\t* gcc.dg/tree-ssa/tailcall-11.c: New test.\n\t* gcc.dg/tree-ssa/tailcall-12.c: New test.\n\t* gcc.dg/tree-ssa/tailcall-13.c: New test.\n\t* gcc.dg/tree-ssa/tailrecursion-8.c: New test.", "tree": {"sha": "769672eb702b47d8a88a80540d300e667ce47c6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/769672eb702b47d8a88a80540d300e667ce47c6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea418485c700494c3efdc282854c5f5a08702416", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea418485c700494c3efdc282854c5f5a08702416", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea418485c700494c3efdc282854c5f5a08702416", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea418485c700494c3efdc282854c5f5a08702416/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34aae6b561871d6d8b10c810f303cb6f18b5fdd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34aae6b561871d6d8b10c810f303cb6f18b5fdd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34aae6b561871d6d8b10c810f303cb6f18b5fdd0"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "484dcc125fc3275847f169da46d69d2975a8e5be", "filename": "gcc/testsuite/gcc.dg/tree-ssa/tailcall-10.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea418485c700494c3efdc282854c5f5a08702416/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailcall-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea418485c700494c3efdc282854c5f5a08702416/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailcall-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailcall-10.c?ref=ea418485c700494c3efdc282854c5f5a08702416", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-tailc-details\" } */\n+\n+struct A {};\n+\n+struct A goo(void);\n+struct A foo(void)\n+{\n+  return goo();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Found tail call\" 1 \"tailc\"} } */"}, {"sha": "36e441775ff1210028ac16b97256cfd6fd624347", "filename": "gcc/testsuite/gcc.dg/tree-ssa/tailcall-11.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea418485c700494c3efdc282854c5f5a08702416/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailcall-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea418485c700494c3efdc282854c5f5a08702416/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailcall-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailcall-11.c?ref=ea418485c700494c3efdc282854c5f5a08702416", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-tailc-details\" } */\n+\n+struct A {};\n+\n+void goo(void);\n+struct A foo(void)\n+{\n+  goo();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Found tail call\" 1 \"tailc\"} } */"}, {"sha": "0eeb3ab2794e480a0ea7742c4d230aa803158013", "filename": "gcc/testsuite/gcc.dg/tree-ssa/tailcall-12.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea418485c700494c3efdc282854c5f5a08702416/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailcall-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea418485c700494c3efdc282854c5f5a08702416/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailcall-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailcall-12.c?ref=ea418485c700494c3efdc282854c5f5a08702416", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-tailc-details\" } */\n+\n+struct A {};\n+\n+struct A goo(void);\n+void foo(void)\n+{\n+  goo();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Found tail call\" 1 \"tailc\"} } */"}, {"sha": "855b3312ef43ab571f31fdfde72ba9208490dfb8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/tailcall-13.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea418485c700494c3efdc282854c5f5a08702416/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailcall-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea418485c700494c3efdc282854c5f5a08702416/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailcall-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailcall-13.c?ref=ea418485c700494c3efdc282854c5f5a08702416", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-tailc-details\" } */\n+\n+struct A {};\n+struct B{};\n+\n+struct B goo(void);\n+struct A foo(void)\n+{\n+  struct A a;\n+  goo();\n+  return a;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Found tail call\" 1 \"tailc\"} } */"}, {"sha": "ecde499a06b62a0de23dd21797f3442f54e8626e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/tailrecursion-8.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea418485c700494c3efdc282854c5f5a08702416/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea418485c700494c3efdc282854c5f5a08702416/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-8.c?ref=ea418485c700494c3efdc282854c5f5a08702416", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -foptimize-sibling-calls -fdump-tree-tailr1-details\" } */\n+\n+struct A {};\n+\n+struct A foo()\n+{\n+  return foo();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Eliminated tail recursion\" 1 \"tailr1\"} } */"}, {"sha": "a4d31c90c49539921cbf7fc3088a7b2fbbf21425", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea418485c700494c3efdc282854c5f5a08702416/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea418485c700494c3efdc282854c5f5a08702416/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=ea418485c700494c3efdc282854c5f5a08702416", "patch": "@@ -710,9 +710,11 @@ find_tail_calls (basic_block bb, struct tailcall **ret)\n   ret_var = gimple_return_retval (as_a <greturn *> (stmt));\n \n   /* We may proceed if there either is no return value, or the return value\n-     is identical to the call's return.  */\n+     is identical to the call's return or if the return decl is an empty type\n+     variable and the call's return was not assigned. */\n   if (ret_var\n-      && (ret_var != ass_var))\n+      && (ret_var != ass_var\n+\t  && !(is_empty_type (TREE_TYPE (ret_var)) && !ass_var)))\n     return;\n \n   /* If this is not a tail recursive call, we cannot handle addends or"}]}