{"sha": "ae88a9f49e8e20bad0c36ab04143ca051c2db4d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU4OGE5ZjQ5ZThlMjBiYWQwYzM2YWIwNDE0M2NhMDUxYzJkYjRkMg==", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-05-15T17:19:57Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T19:11:30Z"}, "message": "Setup error handling for infering types in declarations", "tree": {"sha": "9911b546b0fcc120abc5c6a77059993b05f5dfa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9911b546b0fcc120abc5c6a77059993b05f5dfa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae88a9f49e8e20bad0c36ab04143ca051c2db4d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae88a9f49e8e20bad0c36ab04143ca051c2db4d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae88a9f49e8e20bad0c36ab04143ca051c2db4d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae88a9f49e8e20bad0c36ab04143ca051c2db4d2/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a75153ea0d821b98da7205c5de3eb088e059587", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a75153ea0d821b98da7205c5de3eb088e059587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a75153ea0d821b98da7205c5de3eb088e059587"}], "stats": {"total": 70, "additions": 56, "deletions": 14}, "files": [{"sha": "b4444e41969f94f1f1ede21910292af47d771adf", "filename": "gcc/rust/analysis/rust-resolution.cc", "status": "modified", "additions": 55, "deletions": 14, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae88a9f49e8e20bad0c36ab04143ca051c2db4d2/gcc%2Frust%2Fanalysis%2Frust-resolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae88a9f49e8e20bad0c36ab04143ca051c2db4d2/gcc%2Frust%2Fanalysis%2Frust-resolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-resolution.cc?ref=ae88a9f49e8e20bad0c36ab04143ca051c2db4d2", "patch": "@@ -1,9 +1,18 @@\n #include \"rust-resolution.h\"\n+#include \"rust-diagnostics.h\"\n \n namespace Rust {\n namespace Analysis {\n \n-TypeResolution::TypeResolution (AST::Crate &crate) : scope (), crate (crate) {}\n+TypeResolution::TypeResolution (AST::Crate &crate) : scope (), crate (crate)\n+{\n+  // push all builtin types\n+  // base is parse_path_ident_segment based up on segments\n+  /*  scope.Insert (\"u8\",\n+\t      new AST::MaybeNamedParam (Identifier (\"u8\"),\n+\t\t\t\t\tAST::MaybeNamedParam::IDENTIFIER,\n+\t\t\t\t\tNULL, Location ()));*/\n+}\n \n TypeResolution::~TypeResolution () {}\n \n@@ -40,7 +49,9 @@ TypeResolution::visit (AST::AttrInputMetaItemContainer &input)\n \n void\n TypeResolution::visit (AST::IdentifierExpr &ident_expr)\n-{}\n+{\n+  printf (\"IdentifierExpr %s\\n\", ident_expr.as_string ().c_str ());\n+}\n \n void\n TypeResolution::visit (AST::Lifetime &lifetime)\n@@ -80,7 +91,11 @@ TypeResolution::visit (AST::QualifiedPathInType &path)\n // rust-expr.h\n void\n TypeResolution::visit (AST::LiteralExpr &expr)\n-{}\n+{\n+  printf (\"LiteralExpr: %s\\n\", expr.as_string ().c_str ());\n+  // figure out what this type is and push it onto the\n+}\n+\n void\n TypeResolution::visit (AST::AttrInputLiteral &attr_input)\n {}\n@@ -526,44 +541,70 @@ TypeResolution::visit (AST::SlicePattern &pattern)\n void\n TypeResolution::visit (AST::EmptyStmt &stmt)\n {}\n-void\n \n+void\n TypeResolution::visit (AST::LetStmt &stmt)\n {\n-  printf (\"Within LetStmt: %s\\n\", stmt.as_string ().c_str ());\n-\n-  if (!stmt.has_type ())\n+  AST::Type *inferedType = NULL;\n+  if (stmt.has_type ())\n+    {\n+      inferedType = stmt.type.get ();\n+    }\n+  else if (stmt.has_init_expr ())\n     {\n-      // infer the type\n-      printf (\"XXX UNKNOWN TYPE PLEASE INFER ME\\n\");\n+      stmt.init_expr->accept_vis (*this);\n+\n+      if (typeBuffer.empty ())\n+\t{\n+\t  rust_error_at (\n+\t    stmt.init_expr->get_locus_slow (),\n+\t    \"unable to determine type for declaration from init expr\");\n+\t  return;\n+\t}\n+\n+      inferedType = typeBuffer.back ();\n+      typeBuffer.pop_back ();\n+    }\n+  else\n+    {\n+      rust_error_at (stmt.locus, \"unable to determine type for declaration\");\n+      return;\n     }\n \n   // TODO check we know what the type is\n \n+  // get all the names part of this declaration and add the types to the scope\n   stmt.variables_pattern->accept_vis (*this);\n-\n   for (auto it = letPatternBuffer.begin (); it != letPatternBuffer.end (); it++)\n     {\n-      scope.Insert (it->variable_ident, stmt.type.get ());\n+      scope.Insert (it->variable_ident, inferedType);\n     }\n-\n   letPatternBuffer.clear ();\n }\n \n void\n TypeResolution::visit (AST::ExprStmtWithoutBlock &stmt)\n-{}\n+{\n+  printf (\"ExprStmtWithoutBlock: %s\\n\", stmt.as_string ().c_str ());\n+  stmt.expr->accept_vis (*this);\n+}\n+\n void\n TypeResolution::visit (AST::ExprStmtWithBlock &stmt)\n-{}\n+{\n+  printf (\"ExprStmtWithBlock: %s\\n\", stmt.as_string ().c_str ());\n+  stmt.expr->accept_vis (*this);\n+}\n \n // rust-type.h\n void\n TypeResolution::visit (AST::TraitBound &bound)\n {}\n+\n void\n TypeResolution::visit (AST::ImplTraitType &type)\n {}\n+\n void\n TypeResolution::visit (AST::TraitObjectType &type)\n {}"}, {"sha": "9d0927abbfee5efebf17a594e7138990580cff6a", "filename": "gcc/rust/analysis/rust-resolution.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae88a9f49e8e20bad0c36ab04143ca051c2db4d2/gcc%2Frust%2Fanalysis%2Frust-resolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae88a9f49e8e20bad0c36ab04143ca051c2db4d2/gcc%2Frust%2Fanalysis%2Frust-resolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-resolution.h?ref=ae88a9f49e8e20bad0c36ab04143ca051c2db4d2", "patch": "@@ -229,6 +229,7 @@ class TypeResolution : public AST::ASTVisitor\n   AST::Crate &crate;\n \n   std::vector<AST::IdentifierPattern> letPatternBuffer;\n+  std::vector<AST::Type *> typeBuffer;\n };\n \n } // namespace Analysis"}]}