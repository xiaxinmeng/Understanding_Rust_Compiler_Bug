{"sha": "88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhkOWJmZTZiOWIwYTc0ZDg4OThiMmJmYWQ2MGRhYTJiMDFjNzA0OQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@codesourcery.com", "date": "2013-07-20T16:22:59Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2013-07-20T16:22:59Z"}, "message": "re PR target/51784 (PIC register not correctly preserved in nested funcs / with non-local goto)\n\ngcc/\n\n\tPR target/51784\n\t* config/i386/i386.c (output_set_got) [TARGET_MACHO]: Adjust to emit a\n\tsecond label for nonlocal goto receivers. Don't output pic base labels\n\tunless we're producing PIC; mark that action unreachable().\n\t(ix86_save_reg): If the function contains a nonlocal label, save the\n\tPIC base reg.\n\t* config/darwin-protos.h (machopic_should_output_picbase_label): New.\n\t* gcc/config/darwin.c (emitted_pic_label_num): New GTY. \n\t(update_pic_label_number_if_needed): New.\n\t(machopic_output_function_base_name): Adjust for nonlocal receiver\n\tcase.\n\t(machopic_should_output_picbase_label): New.\n\t* config/i386/i386.md (enum unspecv): UNSPECV_NLGR: New.\n\t(nonlocal_goto_receiver): New insn and split.\n\nFrom-SVN: r201086", "tree": {"sha": "88e847313021b566970743f6d41c2ceb446ede0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88e847313021b566970743f6d41c2ceb446ede0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d586fb43236fb518dd2644cef33d525684cddff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d586fb43236fb518dd2644cef33d525684cddff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d586fb43236fb518dd2644cef33d525684cddff"}], "stats": {"total": 113, "additions": 93, "deletions": 20}, "files": [{"sha": "70b7fb00959b3fdc0c82b719aeb8ad409d3d9af1", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049", "patch": "@@ -25,6 +25,7 @@ extern void machopic_validate_stub_or_non_lazy_ptr (const char *);\n extern void machopic_output_function_base_name (FILE *);\n extern const char *machopic_indirection_name (rtx, bool);\n extern const char *machopic_mcount_stub_name (void);\n+extern bool machopic_should_output_picbase_label (void);\n \n #ifdef RTX_CODE\n "}, {"sha": "e07fa4c83249d1d0fa80352d49050d89e156f124", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049", "patch": "@@ -369,14 +369,13 @@ machopic_gen_offset (rtx orig)\n \n static GTY(()) const char * function_base_func_name;\n static GTY(()) int current_pic_label_num;\n+static GTY(()) int emitted_pic_label_num;\n \n-void\n-machopic_output_function_base_name (FILE *file)\n+static void\n+update_pic_label_number_if_needed (void)\n {\n   const char *current_name;\n \n-  /* If dynamic-no-pic is on, we should not get here.  */\n-  gcc_assert (!MACHO_DYNAMIC_NO_PIC_P);\n   /* When we are generating _get_pc thunks within stubs, there is no current\n      function.  */\n   if (current_function_decl)\n@@ -394,7 +393,28 @@ machopic_output_function_base_name (FILE *file)\n       ++current_pic_label_num;\n       function_base_func_name = \"L_machopic_stub_dummy\";\n     }\n-  fprintf (file, \"L%011d$pb\", current_pic_label_num);\n+}\n+\n+void\n+machopic_output_function_base_name (FILE *file)\n+{\n+  /* If dynamic-no-pic is on, we should not get here.  */\n+  gcc_assert (!MACHO_DYNAMIC_NO_PIC_P);\n+\n+  update_pic_label_number_if_needed ();\n+  fprintf (file, \"L%d$pb\", current_pic_label_num);\n+}\n+\n+bool\n+machopic_should_output_picbase_label (void)\n+{\n+  update_pic_label_number_if_needed ();\n+\n+  if (current_pic_label_num == emitted_pic_label_num)\n+    return false;\n+\n+  emitted_pic_label_num = current_pic_label_num;\n+  return true;\n }\n \n /* The suffix attached to non-lazy pointer symbols.  */"}, {"sha": "a8b1759061ac14f55568368862577a2be0daaf01", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049", "patch": "@@ -8822,17 +8822,12 @@ output_set_got (rtx dest, rtx label ATTRIBUTE_UNUSED)\n \n   if (!flag_pic)\n     {\n-      xops[2] = gen_rtx_LABEL_REF (Pmode, label ? label : gen_label_rtx ());\n+      if (TARGET_MACHO)\n+\t/* We don't need a pic base, we're not producing pic.  */\n+\tgcc_unreachable ();\n \n+      xops[2] = gen_rtx_LABEL_REF (Pmode, label ? label : gen_label_rtx ());\n       output_asm_insn (\"mov%z0\\t{%2, %0|%0, %2}\", xops);\n-\n-#if TARGET_MACHO\n-      /* Output the Mach-O \"canonical\" label name (\"Lxx$pb\") here too.  This\n-         is what will be referenced by the Mach-O PIC subsystem.  */\n-      if (!label)\n-\tASM_OUTPUT_LABEL (asm_out_file, MACHOPIC_FUNCTION_BASE_NAME);\n-#endif\n-\n       targetm.asm_out.internal_label (asm_out_file, \"L\",\n \t\t\t\t      CODE_LABEL_NUMBER (XEXP (xops[2], 0)));\n     }\n@@ -8845,12 +8840,18 @@ output_set_got (rtx dest, rtx label ATTRIBUTE_UNUSED)\n       xops[2] = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (name));\n       xops[2] = gen_rtx_MEM (QImode, xops[2]);\n       output_asm_insn (\"call\\t%X2\", xops);\n-      /* Output the Mach-O \"canonical\" label name (\"Lxx$pb\") here too.  This\n-         is what will be referenced by the Mach-O PIC subsystem.  */\n+\n #if TARGET_MACHO\n-      if (!label)\n+      /* Output the Mach-O \"canonical\" pic base label name (\"Lxx$pb\") here.\n+         This is what will be referenced by the Mach-O PIC subsystem.  */\n+      if (machopic_should_output_picbase_label () || !label)\n \tASM_OUTPUT_LABEL (asm_out_file, MACHOPIC_FUNCTION_BASE_NAME);\n-      else\n+\n+      /* When we are restoring the pic base at the site of a nonlocal label,\n+         and we decided to emit the pic base above, we will still output a\n+         local label used for calculating the correction offset (even though\n+         the offset will be 0 in that case).  */\n+      if (label)\n         targetm.asm_out.internal_label (asm_out_file, \"L\",\n \t\t\t\t\t   CODE_LABEL_NUMBER (label));\n #endif\n@@ -8932,7 +8933,8 @@ ix86_save_reg (unsigned int regno, bool maybe_eh_return)\n       && (df_regs_ever_live_p (REAL_PIC_OFFSET_TABLE_REGNUM)\n \t  || crtl->profile\n \t  || crtl->calls_eh_return\n-\t  || crtl->uses_const_pool))\n+\t  || crtl->uses_const_pool\n+\t  || cfun->has_nonlocal_label))\n     return ix86_select_alt_pic_regnum () == INVALID_REGNUM;\n \n   if (crtl->calls_eh_return && maybe_eh_return)"}, {"sha": "a4778fed1a9d8a46746a054e641de861ea7d863f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049", "patch": "@@ -222,6 +222,8 @@\n   UNSPECV_XEND\n   UNSPECV_XABORT\n   UNSPECV_XTEST\n+\n+  UNSPECV_NLGR\n ])\n \n ;; Constants to represent rounding modes in the ROUND instruction\n@@ -16227,7 +16229,38 @@\n     emit_insn (gen_set_got (pic_offset_table_rtx));\n   DONE;\n })\n-\f\n+\n+(define_insn_and_split \"nonlocal_goto_receiver\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_NLGR)]\n+  \"TARGET_MACHO && !TARGET_64BIT && flag_pic\"\n+{\n+  if (crtl->uses_pic_offset_table)\n+    return \"#\";\n+  else\n+    return \"\"; /* No pic reg restore needed.  */\n+}\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  if (crtl->uses_pic_offset_table)\n+    {\n+      rtx xops[3];\n+      rtx label_rtx = gen_label_rtx ();\n+      rtx tmp;\n+\n+      /* Get a new pic base.  */\n+      emit_insn (gen_set_got_labelled (pic_offset_table_rtx, label_rtx));\n+      /* Correct this with the offset from the new to the old.  */\n+      xops[0] = xops[1] = pic_offset_table_rtx;\n+      label_rtx = gen_rtx_LABEL_REF (SImode, label_rtx);\n+      tmp = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, label_rtx),\n+\t\t\t    UNSPEC_MACHOPIC_OFFSET);\n+      xops[2] = gen_rtx_CONST (Pmode, tmp);\n+      ix86_expand_binary_operator (MINUS, SImode, xops);\n+    }\n+  DONE;\n+})\n+\n ;; Avoid redundant prefixes by splitting HImode arithmetic to SImode.\n \n (define_split"}, {"sha": "1bd6b0443f734d7c881629511e36381ea7137475", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88d9bfe6b9b0a74d8898b2bfad60daa2b01c7049", "patch": "@@ -1,3 +1,20 @@\n+2013-07-20  Iain Sandoe  <iain@codesourcery.com>\n+\n+\tPR target/51784\n+\t* config/i386/i386.c (output_set_got) [TARGET_MACHO]: Adjust to emit a\n+\tsecond label for nonlocal goto receivers. Don't output pic base labels\n+\tunless we're producing PIC; mark that action unreachable().\n+\t(ix86_save_reg): If the function contains a nonlocal label, save the\n+\tPIC base reg.\n+\t* config/darwin-protos.h (machopic_should_output_picbase_label): New.\n+\t* gcc/config/darwin.c (emitted_pic_label_num): New GTY. \n+\t(update_pic_label_number_if_needed): New.\n+\t(machopic_output_function_base_name): Adjust for nonlocal receiver\n+\tcase.\n+\t(machopic_should_output_picbase_label): New.\n+\t* config/i386/i386.md (enum unspecv): UNSPECV_NLGR: New.\n+\t(nonlocal_goto_receiver): New insn and split.\n+\n 2013-07-20  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gcc.target/aarch64/vabs_intrinsic_1.c: New file."}]}