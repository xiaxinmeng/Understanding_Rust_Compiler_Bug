{"sha": "a4feaa716751d9755b7c0420cd8845089c6d6d3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRmZWFhNzE2NzUxZDk3NTViN2MwNDIwY2Q4ODQ1MDg5YzZkNmQzYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-10-12T10:58:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-10-12T10:58:14Z"}, "message": "expr.c (store_expr): Share code for STRING_CST and MEM_REF of &STRING_CST cases.\n\n\t* expr.c (store_expr): Share code for STRING_CST and\n\tMEM_REF of &STRING_CST cases.  Don't require BLKmode, instead\n\tcheck if target is a MEM.\n\nFrom-SVN: r165360", "tree": {"sha": "139cf80e3e8db939547ef695dba0290e3be35e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/139cf80e3e8db939547ef695dba0290e3be35e4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4feaa716751d9755b7c0420cd8845089c6d6d3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4feaa716751d9755b7c0420cd8845089c6d6d3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4feaa716751d9755b7c0420cd8845089c6d6d3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4feaa716751d9755b7c0420cd8845089c6d6d3a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2551782dc3fdb3baa1e97310223fc8e3c51cf6c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2551782dc3fdb3baa1e97310223fc8e3c51cf6c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2551782dc3fdb3baa1e97310223fc8e3c51cf6c9"}], "stats": {"total": 68, "additions": 19, "deletions": 49}, "files": [{"sha": "8d8bb3a1571ed76cc5792929c130be96a0258d7e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4feaa716751d9755b7c0420cd8845089c6d6d3a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4feaa716751d9755b7c0420cd8845089c6d6d3a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4feaa716751d9755b7c0420cd8845089c6d6d3a", "patch": "@@ -1,5 +1,9 @@\n 2010-10-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* expr.c (store_expr): Share code for STRING_CST and\n+\tMEM_REF of &STRING_CST cases.  Don't require BLKmode, instead\n+\tcheck if target is a MEM.\n+\n \t* rtl.h: Include hashtab.h.\n \t(iterative_hash_rtx): New prototype.\n \t* rtl.c (iterative_hash_rtx): New function."}, {"sha": "b0c160f9367e95a07ee7f403b719d418dfe6a59c", "filename": "gcc/expr.c", "status": "modified", "additions": 15, "deletions": 49, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4feaa716751d9755b7c0420cd8845089c6d6d3a/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4feaa716751d9755b7c0420cd8845089c6d6d3a/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a4feaa716751d9755b7c0420cd8845089c6d6d3a", "patch": "@@ -4636,85 +4636,51 @@ store_expr (tree exp, rtx target, int call_param_p, bool nontemporal)\n \n       return NULL_RTX;\n     }\n-  else if (TREE_CODE (exp) == STRING_CST\n+  else if ((TREE_CODE (exp) == STRING_CST\n+\t    || (TREE_CODE (exp) == MEM_REF\n+\t\t&& TREE_CODE (TREE_OPERAND (exp, 0)) == ADDR_EXPR\n+\t\t&& TREE_CODE (TREE_OPERAND (TREE_OPERAND (exp, 0), 0))\n+\t\t   == STRING_CST\n+\t\t&& integer_zerop (TREE_OPERAND (exp, 1))))\n \t   && !nontemporal && !call_param_p\n-\t   && TREE_STRING_LENGTH (exp) > 0\n-\t   && TYPE_MODE (TREE_TYPE (exp)) == BLKmode)\n+\t   && MEM_P (target))\n     {\n       /* Optimize initialization of an array with a STRING_CST.  */\n       HOST_WIDE_INT exp_len, str_copy_len;\n       rtx dest_mem;\n+      tree str = TREE_CODE (exp) == STRING_CST\n+\t\t ? exp : TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n \n       exp_len = int_expr_size (exp);\n       if (exp_len <= 0)\n \tgoto normal_expr;\n \n-      str_copy_len = strlen (TREE_STRING_POINTER (exp));\n-      if (str_copy_len < TREE_STRING_LENGTH (exp) - 1)\n-\tgoto normal_expr;\n-\n-      str_copy_len = TREE_STRING_LENGTH (exp);\n-      if ((STORE_MAX_PIECES & (STORE_MAX_PIECES - 1)) == 0)\n-\t{\n-\t  str_copy_len += STORE_MAX_PIECES - 1;\n-\t  str_copy_len &= ~(STORE_MAX_PIECES - 1);\n-\t}\n-      str_copy_len = MIN (str_copy_len, exp_len);\n-      if (!can_store_by_pieces (str_copy_len, builtin_strncpy_read_str,\n-\t\t\t\tCONST_CAST(char *, TREE_STRING_POINTER (exp)),\n-\t\t\t\tMEM_ALIGN (target), false))\n-\tgoto normal_expr;\n-\n-      dest_mem = target;\n-\n-      dest_mem = store_by_pieces (dest_mem,\n-\t\t\t\t  str_copy_len, builtin_strncpy_read_str,\n-\t\t\t\t  CONST_CAST(char *, TREE_STRING_POINTER (exp)),\n-\t\t\t\t  MEM_ALIGN (target), false,\n-\t\t\t\t  exp_len > str_copy_len ? 1 : 0);\n-      if (exp_len > str_copy_len)\n-\tclear_storage (adjust_address (dest_mem, BLKmode, 0),\n-\t\t       GEN_INT (exp_len - str_copy_len),\n-\t\t       BLOCK_OP_NORMAL);\n-      return NULL_RTX;\n-    }\n-  else if (TREE_CODE (exp) == MEM_REF\n-\t   && TREE_CODE (TREE_OPERAND (exp, 0)) == ADDR_EXPR\n-\t   && TREE_CODE (TREE_OPERAND (TREE_OPERAND (exp, 0), 0)) == STRING_CST\n-\t   && integer_zerop (TREE_OPERAND (exp, 1))\n-\t   && !nontemporal && !call_param_p\n-\t   && TYPE_MODE (TREE_TYPE (exp)) == BLKmode)\n-    {\n-      /* Optimize initialization of an array with a STRING_CST.  */\n-      HOST_WIDE_INT exp_len, str_copy_len;\n-      rtx dest_mem;\n-      tree str = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n-\n-      exp_len = int_expr_size (exp);\n-      if (exp_len <= 0)\n+      if (TREE_STRING_LENGTH (str) <= 0)\n \tgoto normal_expr;\n \n       str_copy_len = strlen (TREE_STRING_POINTER (str));\n       if (str_copy_len < TREE_STRING_LENGTH (str) - 1)\n \tgoto normal_expr;\n \n       str_copy_len = TREE_STRING_LENGTH (str);\n-      if ((STORE_MAX_PIECES & (STORE_MAX_PIECES - 1)) == 0)\n+      if ((STORE_MAX_PIECES & (STORE_MAX_PIECES - 1)) == 0\n+\t  && TREE_STRING_POINTER (str)[TREE_STRING_LENGTH (str) - 1] == '\\0')\n \t{\n \t  str_copy_len += STORE_MAX_PIECES - 1;\n \t  str_copy_len &= ~(STORE_MAX_PIECES - 1);\n \t}\n       str_copy_len = MIN (str_copy_len, exp_len);\n       if (!can_store_by_pieces (str_copy_len, builtin_strncpy_read_str,\n-\t\t\t\tCONST_CAST(char *, TREE_STRING_POINTER (str)),\n+\t\t\t\tCONST_CAST (char *, TREE_STRING_POINTER (str)),\n \t\t\t\tMEM_ALIGN (target), false))\n \tgoto normal_expr;\n \n       dest_mem = target;\n \n       dest_mem = store_by_pieces (dest_mem,\n \t\t\t\t  str_copy_len, builtin_strncpy_read_str,\n-\t\t\t\t  CONST_CAST(char *, TREE_STRING_POINTER (str)),\n+\t\t\t\t  CONST_CAST (char *,\n+\t\t\t\t\t      TREE_STRING_POINTER (str)),\n \t\t\t\t  MEM_ALIGN (target), false,\n \t\t\t\t  exp_len > str_copy_len ? 1 : 0);\n       if (exp_len > str_copy_len)"}]}