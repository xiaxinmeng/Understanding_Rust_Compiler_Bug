{"sha": "31d61ac600b2a6e8b80d0e27d11ec8d4720780ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFkNjFhYzYwMGIyYTZlOGI4MGQwZTI3ZDExZWM4ZDQ3MjA3ODBlYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-04-12T04:26:15Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-04-12T04:26:15Z"}, "message": "re PR go/77857 (gccgo: vendoring doesn't work in gcc 6/7)\n\n\tPR go/77857\n    cmd/go: generate vendor paths for -I arg on compile\n    \n    This change generates the vendor path to be used with -I\n    on a gccgo compile to find imports from the vendor directories.\n    \n    Fixes golang/go#15628\n    \n    Reviewed-on: https://go-review.googlesource.com/39590\n\nFrom-SVN: r246864", "tree": {"sha": "8779dfadd15de6e87f5bab30fdc18126be9c47ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8779dfadd15de6e87f5bab30fdc18126be9c47ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31d61ac600b2a6e8b80d0e27d11ec8d4720780ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31d61ac600b2a6e8b80d0e27d11ec8d4720780ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31d61ac600b2a6e8b80d0e27d11ec8d4720780ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31d61ac600b2a6e8b80d0e27d11ec8d4720780ea/comments", "author": null, "committer": null, "parents": [{"sha": "782f99291849d55394f79600f5cf9c71a8693fc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/782f99291849d55394f79600f5cf9c71a8693fc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/782f99291849d55394f79600f5cf9c71a8693fc2"}], "stats": {"total": 57, "additions": 49, "deletions": 8}, "files": [{"sha": "f2d11f43f19aab525b0d47d09b15ba35bc1550fd", "filename": "libgo/go/cmd/go/build.go", "status": "modified", "additions": 49, "deletions": 8, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31d61ac600b2a6e8b80d0e27d11ec8d4720780ea/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31d61ac600b2a6e8b80d0e27d11ec8d4720780ea/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go?ref=31d61ac600b2a6e8b80d0e27d11ec8d4720780ea", "patch": "@@ -2398,14 +2398,6 @@ func (gcToolchain) gc(b *builder, p *Package, archive, obj string, asmhdr bool,\n \t\t}\n \t}\n \n-\tfor _, path := range p.Imports {\n-\t\tif i := strings.LastIndex(path, \"/vendor/\"); i >= 0 {\n-\t\t\tgcargs = append(gcargs, \"-importmap\", path[i+len(\"/vendor/\"):]+\"=\"+path)\n-\t\t} else if strings.HasPrefix(path, \"vendor/\") {\n-\t\t\tgcargs = append(gcargs, \"-importmap\", path[len(\"vendor/\"):]+\"=\"+path)\n-\t\t}\n-\t}\n-\n \targs := []interface{}{buildToolExec, tool(\"compile\"), \"-o\", ofile, \"-trimpath\", b.work, buildGcflags, gcargs, \"-D\", p.localPrefix, importArgs}\n \tif ofile == archive {\n \t\targs = append(args, \"-pack\")\n@@ -2706,6 +2698,55 @@ func (tools gccgoToolchain) gc(b *builder, p *Package, archive, obj string, asmh\n \tif p.localPrefix != \"\" {\n \t\tgcargs = append(gcargs, \"-fgo-relative-import-path=\"+p.localPrefix)\n \t}\n+\tsavedirs := []string{}\n+\tfor _, incdir := range importArgs {\n+\t\tif incdir != \"-I\" {\n+\t\t\tsavedirs = append(savedirs, incdir)\n+\t\t}\n+\t}\n+\n+\tfor _, path := range p.Imports {\n+\t\t// If this is a new vendor path, add it to the list of importArgs\n+\t\tif i := strings.LastIndex(path, \"/vendor\"); i >= 0 {\n+\t\t\tfor _, dir := range savedirs {\n+\t\t\t\t// Check if the vendor path is already included in dir\n+\t\t\t\tif strings.HasSuffix(dir, path[:i+len(\"/vendor\")]) {\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n+\t\t\t\t// Make sure this vendor path is not already in the list for importArgs\n+\t\t\t\tvendorPath := dir + \"/\" + path[:i+len(\"/vendor\")]\n+\t\t\t\tfor _, imp := range importArgs {\n+\t\t\t\t\tif imp == \"-I\" {\n+\t\t\t\t\t\tcontinue\n+\t\t\t\t\t}\n+\t\t\t\t\t// This vendorPath is already in the list\n+\t\t\t\t\tif imp == vendorPath {\n+\t\t\t\t\t\tgoto nextSuffixPath\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// New vendorPath not yet in the importArgs list, so add it\n+\t\t\t\timportArgs = append(importArgs, \"-I\", vendorPath)\n+\t\t\tnextSuffixPath:\n+\t\t\t}\n+\t\t} else if strings.HasPrefix(path, \"vendor/\") {\n+\t\t\tfor _, dir := range savedirs {\n+\t\t\t\t// Make sure this vendor path is not already in the list for importArgs\n+\t\t\t\tvendorPath := dir + \"/\" + path[len(\"/vendor\"):]\n+\t\t\t\tfor _, imp := range importArgs {\n+\t\t\t\t\tif imp == \"-I\" {\n+\t\t\t\t\t\tcontinue\n+\t\t\t\t\t}\n+\t\t\t\t\tif imp == vendorPath {\n+\t\t\t\t\t\tgoto nextPrefixPath\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// This vendor path is needed and not already in the list, so add it\n+\t\t\t\timportArgs = append(importArgs, \"-I\", vendorPath)\n+\t\t\tnextPrefixPath:\n+\t\t\t}\n+\t\t}\n+\t}\n+\n \targs := stringList(tools.compiler(), importArgs, \"-c\", gcargs, \"-o\", ofile, buildGccgoflags)\n \tfor _, f := range gofiles {\n \t\targs = append(args, mkAbs(p.Dir, f))"}]}