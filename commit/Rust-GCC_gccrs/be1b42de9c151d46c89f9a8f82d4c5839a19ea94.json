{"sha": "be1b42de9c151d46c89f9a8f82d4c5839a19ea94", "node_id": "C_kwDOANBUbNoAKGJlMWI0MmRlOWMxNTFkNDZjODlmOWE4ZjgyZDRjNTgzOWExOWVhOTQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-02T11:36:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-02T12:33:07Z"}, "message": "tree-optimization/106809 - compile time hog in VN\n\nThe dominated_by_p_w_unex function is prone to high compile time.\nWith GCC 12 we introduced a VN run for uninit diagnostics which now\nruns into a degenerate case with bison generated code.  Fortunately\nthis case is easy to fix with a simple extra check - a more\ngeneral fix needs more work.\n\n\tPR tree-optimization/106809\n\t* tree-ssa-sccvn.cc (dominaged_by_p_w_unex): Check we have\n\tmore than one successor before doing extra work.\n\n\t* gcc.dg/torture/pr106809.c: New testcase.", "tree": {"sha": "edf8f4c735300d5b6fb3d2a4d5fa28e3296c03cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edf8f4c735300d5b6fb3d2a4d5fa28e3296c03cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be1b42de9c151d46c89f9a8f82d4c5839a19ea94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be1b42de9c151d46c89f9a8f82d4c5839a19ea94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be1b42de9c151d46c89f9a8f82d4c5839a19ea94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be1b42de9c151d46c89f9a8f82d4c5839a19ea94/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d72ca12b846a9f5c01674b280b1817876c77888f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d72ca12b846a9f5c01674b280b1817876c77888f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d72ca12b846a9f5c01674b280b1817876c77888f"}], "stats": {"total": 85, "additions": 58, "deletions": 27}, "files": [{"sha": "11e158185cf4679fd26e9a5965c91384de622fd2", "filename": "gcc/testsuite/gcc.dg/torture/pr106809.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1b42de9c151d46c89f9a8f82d4c5839a19ea94/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr106809.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1b42de9c151d46c89f9a8f82d4c5839a19ea94/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr106809.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr106809.c?ref=be1b42de9c151d46c89f9a8f82d4c5839a19ea94", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wuninitialized\" } */\n+\n+int foo (int x, int *val)\n+{\n+  switch (x)\n+    {\n+#define C(n) \\\n+    case n + 0: return *val; \\\n+    case n + 1: return *val; \\\n+    case n + 2: return *val; \\\n+    case n + 3: return *val; \\\n+    case n + 4: return *val; \\\n+    case n + 5: return *val; \\\n+    case n + 6: return *val; \\\n+    case n + 7: return *val; \\\n+    case n + 8: return *val; \\\n+    case n + 9: return *val;\n+#define C1(n) \\\n+    C(n+00) C(n+10) C(n+20) C(n+30) C(n+40) \\\n+    C(n+50) C(n+60) C(n+70) C(n+80) C(n+90)\n+#define C10(n) \\\n+    C1(n+000) C1(n+100) C1(n+200) C1(n+300) C1(n+400) \\\n+    C1(n+500) C1(n+600) C1(n+700) C1(n+800) C1(n+900)\n+    C10(1000)\n+    }\n+  return 0;\n+}"}, {"sha": "5abc8667ce6045160bdddf7958ab0ce8fc5e56d9", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1b42de9c151d46c89f9a8f82d4c5839a19ea94/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1b42de9c151d46c89f9a8f82d4c5839a19ea94/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=be1b42de9c151d46c89f9a8f82d4c5839a19ea94", "patch": "@@ -4877,41 +4877,44 @@ dominated_by_p_w_unex (basic_block bb1, basic_block bb2, bool allow_back)\n     }\n \n   /* Iterate to the single executable bb2 successor.  */\n-  edge succe = NULL;\n-  FOR_EACH_EDGE (e, ei, bb2->succs)\n-    if ((e->flags & EDGE_EXECUTABLE)\n-\t|| (!allow_back && (e->flags & EDGE_DFS_BACK)))\n-      {\n-\tif (succe)\n-\t  {\n-\t    succe = NULL;\n-\t    break;\n-\t  }\n-\tsucce = e;\n-      }\n-  if (succe)\n+  if (EDGE_COUNT (bb2->succs) > 1)\n     {\n-      /* Verify the reached block is only reached through succe.\n-\t If there is only one edge we can spare us the dominator\n-\t check and iterate directly.  */\n-      if (EDGE_COUNT (succe->dest->preds) > 1)\n-\t{\n-\t  FOR_EACH_EDGE (e, ei, succe->dest->preds)\n-\t    if (e != succe\n-\t\t&& ((e->flags & EDGE_EXECUTABLE)\n-\t\t    || (!allow_back && (e->flags & EDGE_DFS_BACK))))\n+      edge succe = NULL;\n+      FOR_EACH_EDGE (e, ei, bb2->succs)\n+\tif ((e->flags & EDGE_EXECUTABLE)\n+\t    || (!allow_back && (e->flags & EDGE_DFS_BACK)))\n+\t  {\n+\t    if (succe)\n \t      {\n \t\tsucce = NULL;\n \t\tbreak;\n \t      }\n-\t}\n+\t    succe = e;\n+\t  }\n       if (succe)\n \t{\n-\t  bb2 = succe->dest;\n+\t  /* Verify the reached block is only reached through succe.\n+\t     If there is only one edge we can spare us the dominator\n+\t     check and iterate directly.  */\n+\t  if (EDGE_COUNT (succe->dest->preds) > 1)\n+\t    {\n+\t      FOR_EACH_EDGE (e, ei, succe->dest->preds)\n+\t\tif (e != succe\n+\t\t    && ((e->flags & EDGE_EXECUTABLE)\n+\t\t\t|| (!allow_back && (e->flags & EDGE_DFS_BACK))))\n+\t\t  {\n+\t\t    succe = NULL;\n+\t\t    break;\n+\t\t  }\n+\t    }\n+\t  if (succe)\n+\t    {\n+\t      bb2 = succe->dest;\n \n-\t  /* Re-do the dominance check with changed bb2.  */\n-\t  if (dominated_by_p (CDI_DOMINATORS, bb1, bb2))\n-\t    return true;\n+\t      /* Re-do the dominance check with changed bb2.  */\n+\t      if (dominated_by_p (CDI_DOMINATORS, bb1, bb2))\n+\t\treturn true;\n+\t    }\n \t}\n     }\n "}]}