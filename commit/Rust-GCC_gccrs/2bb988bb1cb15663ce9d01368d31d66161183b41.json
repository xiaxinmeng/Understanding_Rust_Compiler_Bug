{"sha": "2bb988bb1cb15663ce9d01368d31d66161183b41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJiOTg4YmIxY2IxNTY2M2NlOWQwMTM2OGQzMWQ2NjE2MTE4M2I0MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T08:33:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T08:33:18Z"}, "message": "[multiple changes]\n\n2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_aggr.adb, inline.adb, einfo.adb, einfo.ads, scng.adb,\n\tsem_prag.adb: Minor reformatting.\n\n2017-04-25  Bob Duff  <duff@adacore.com>\n\n\t* sem_attr.adb (Type_Key): Add code in the\n\trecursive Compute_Type_Key to protect against fetching the source\n\tcode for Standard, in case a component of the type is declared\n\tin Standard. There was already code to do this for the original\n\ttype, but not for its components.\n\nFrom-SVN: r247147", "tree": {"sha": "ef7d98dc387ce923dcfce2f345cce20be82944bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef7d98dc387ce923dcfce2f345cce20be82944bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bb988bb1cb15663ce9d01368d31d66161183b41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bb988bb1cb15663ce9d01368d31d66161183b41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bb988bb1cb15663ce9d01368d31d66161183b41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bb988bb1cb15663ce9d01368d31d66161183b41/comments", "author": null, "committer": null, "parents": [{"sha": "b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b03d3f7390b5744c5fdf54a73fec6a28a8849a1b"}], "stats": {"total": 93, "additions": 59, "deletions": 34}, "files": [{"sha": "75733c1a82325116be19efc07fee383811dc85d9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb988bb1cb15663ce9d01368d31d66161183b41/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb988bb1cb15663ce9d01368d31d66161183b41/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2bb988bb1cb15663ce9d01368d31d66161183b41", "patch": "@@ -1,3 +1,16 @@\n+2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_aggr.adb, inline.adb, einfo.adb, einfo.ads, scng.adb,\n+\tsem_prag.adb: Minor reformatting.\n+\n+2017-04-25  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_attr.adb (Type_Key): Add code in the\n+\trecursive Compute_Type_Key to protect against fetching the source\n+\tcode for Standard, in case a component of the type is declared\n+\tin Standard. There was already code to do this for the original\n+\ttype, but not for its components.\n+\n 2017-04-25  Javier Miranda  <miranda@adacore.com>\n \n \t* exp_ch3.adb (Build_Initialization_Call): Handle"}, {"sha": "9f9a0a617bf07f93e9a3f3eed03409b9aaf17147", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb988bb1cb15663ce9d01368d31d66161183b41/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb988bb1cb15663ce9d01368d31d66161183b41/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=2bb988bb1cb15663ce9d01368d31d66161183b41", "patch": "@@ -9262,8 +9262,8 @@ package body Einfo is\n       end if;\n \n       W (\"Address_Taken\",                   Flag104 (Id));\n-      W (\"Body_Needed_For_SAL\",             Flag40  (Id));\n       W (\"Body_Needed_For_Inlining\",        Flag299 (Id));\n+      W (\"Body_Needed_For_SAL\",             Flag40  (Id));\n       W (\"C_Pass_By_Copy\",                  Flag125 (Id));\n       W (\"Can_Never_Be_Null\",               Flag38  (Id));\n       W (\"Checks_May_Be_Suppressed\",        Flag31  (Id));"}, {"sha": "f0080d550d3065885f820bcbd00a9919cd835d2f", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb988bb1cb15663ce9d01368d31d66161183b41/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb988bb1cb15663ce9d01368d31d66161183b41/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=2bb988bb1cb15663ce9d01368d31d66161183b41", "patch": "@@ -6245,13 +6245,13 @@ package Einfo is\n    --    Contract                            (Node34)\n    --    SPARK_Pragma                        (Node40)\n    --    SPARK_Aux_Pragma                    (Node41)\n-   --    Delay_Subprogram_Descriptors        (Flag50)\n    --    Body_Needed_For_Inlining            (Flag299)\n    --    Body_Needed_For_SAL                 (Flag40)\n    --    Contains_Ignored_Ghost_Code         (Flag279)\n+   --    Delay_Subprogram_Descriptors        (Flag50)\n    --    Discard_Names                       (Flag88)\n-   --    Elaboration_Entity_Required         (Flag174)\n    --    Elaborate_Body_Desirable            (Flag210)  (non-generic case only)\n+   --    Elaboration_Entity_Required         (Flag174)\n    --    From_Limited_With                   (Flag159)\n    --    Has_All_Calls_Remote                (Flag79)\n    --    Has_Completion                      (Flag26)"}, {"sha": "a5d5ce1c511d6e4c8fd463edfe5abcd9665f11b6", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb988bb1cb15663ce9d01368d31d66161183b41/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb988bb1cb15663ce9d01368d31d66161183b41/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=2bb988bb1cb15663ce9d01368d31d66161183b41", "patch": "@@ -751,11 +751,12 @@ package body Inline is\n             if Present (Comp_Unit)\n               and then Comp_Unit /= Cunit (Main_Unit)\n               and then Body_Required (Comp_Unit)\n-              and then (Nkind (Unit (Comp_Unit)) /= N_Package_Declaration\n-                         or else\n-                          (No (Corresponding_Body (Unit (Comp_Unit)))\n-                             and then Body_Needed_For_Inlining\n-                               (Defining_Entity (Unit (Comp_Unit)))))\n+              and then\n+                (Nkind (Unit (Comp_Unit)) /= N_Package_Declaration\n+                  or else\n+                    (No (Corresponding_Body (Unit (Comp_Unit)))\n+                      and then Body_Needed_For_Inlining\n+                                 (Defining_Entity (Unit (Comp_Unit)))))\n             then\n                declare\n                   Bname : constant Unit_Name_Type :="}, {"sha": "3f1c3a9eb53e9898e5dd74c9d608de790d3db711", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb988bb1cb15663ce9d01368d31d66161183b41/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb988bb1cb15663ce9d01368d31d66161183b41/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=2bb988bb1cb15663ce9d01368d31d66161183b41", "patch": "@@ -2056,14 +2056,14 @@ package body Scng is\n             --  In Ada 2020, a target name (i.e. @) is a valid prefix of an\n             --  attribute, and functions like a name.\n \n-            if Prev_Token = Tok_Identifier\n-               or else Prev_Token = Tok_Right_Paren\n-               or else Prev_Token = Tok_All\n-               or else Prev_Token = Tok_Delta\n-               or else Prev_Token = Tok_Digits\n-               or else Prev_Token = Tok_Project\n-               or else Prev_Token = Tok_At_Sign\n-               or else Prev_Token in Token_Class_Literal\n+            if Prev_Token = Tok_All\n+              or else Prev_Token = Tok_At_Sign\n+              or else Prev_Token = Tok_Delta\n+              or else Prev_Token = Tok_Digits\n+              or else Prev_Token = Tok_Identifier\n+              or else Prev_Token = Tok_Project\n+              or else Prev_Token = Tok_Right_Paren\n+              or else Prev_Token in Token_Class_Literal\n             then\n                Token := Tok_Apostrophe;\n "}, {"sha": "d18383525c3619a9ecb8900d77127e76fcabd5ef", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb988bb1cb15663ce9d01368d31d66161183b41/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb988bb1cb15663ce9d01368d31d66161183b41/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=2bb988bb1cb15663ce9d01368d31d66161183b41", "patch": "@@ -1666,7 +1666,7 @@ package body Sem_Aggr is\n             else\n                Analyze (Choice);\n \n-               --  Choice can be a subtype name, a range, or an expression.\n+               --  Choice can be a subtype name, a range, or an expression\n \n                if Is_Entity_Name (Choice)\n                  and then Is_Type (Entity (Choice))"}, {"sha": "40ee462906cd39c06c6958f3475a324ad51138be", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb988bb1cb15663ce9d01368d31d66161183b41/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb988bb1cb15663ce9d01368d31d66161183b41/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=2bb988bb1cb15663ce9d01368d31d66161183b41", "patch": "@@ -6256,6 +6256,21 @@ package body Sem_Attr is\n                return;\n             end if;\n \n+            --  If the type is declared in Standard, there is no source, so\n+            --  just use its name.\n+\n+            if Scope (T) = Standard_Standard then\n+               declare\n+                  Name : constant String := Get_Name_String (Chars (T));\n+               begin\n+                  for J in Name'Range loop\n+                     System.CRC32.Update (CRC, Name (J));\n+                  end loop;\n+               end;\n+\n+               return;\n+            end if;\n+\n             Sloc_Range (Enclosing_Declaration (T), P_Min, P_Max);\n             SFI    := Get_Source_File_Index (P_Min);\n             Buffer := Source_Text (SFI);\n@@ -6318,25 +6333,21 @@ package body Sem_Attr is\n             Store_String_Char (Get_String_Char (Full_Name, Pos (J)));\n          end loop;\n \n-         --  For standard types return the name of the type, as there is no\n-         --  explicit source declaration to use. Otherwise compute CRC and\n-         --  convert it to string one character at a time, so as not to use\n-         --  Image within the compiler.\n+         --  Compute CRC and convert it to string one character at a time, so\n+         --  as not to use Image within the compiler.\n \n-         if Scope (Entity (P)) /= Standard_Standard then\n-            Initialize (CRC);\n-            Compute_Type_Key (Entity (P));\n-\n-            if not Is_Frozen (Entity (P)) then\n-               Error_Msg_N (\"premature usage of Type_Key?\", N);\n-            end if;\n+         Initialize (CRC);\n+         Compute_Type_Key (Entity (P));\n \n-            while CRC > 0 loop\n-               Store_String_Char (Character'Val (48 + (CRC rem 10)));\n-               CRC := CRC / 10;\n-            end loop;\n+         if not Is_Frozen (Entity (P)) then\n+            Error_Msg_N (\"premature usage of Type_Key?\", N);\n          end if;\n \n+         while CRC > 0 loop\n+            Store_String_Char (Character'Val (48 + (CRC rem 10)));\n+            CRC := CRC / 10;\n+         end loop;\n+\n          Rewrite (N, Make_String_Literal (Loc, End_String));\n          Analyze_And_Resolve (N, Standard_String);\n       end Type_Key;"}, {"sha": "35e1b88a1574e0b764ff40f30f233c6e17c47b2a", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb988bb1cb15663ce9d01368d31d66161183b41/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb988bb1cb15663ce9d01368d31d66161183b41/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=2bb988bb1cb15663ce9d01368d31d66161183b41", "patch": "@@ -9118,8 +9118,8 @@ package body Sem_Prag is\n          --  body. (this may be further refined).\n \n          if not In_Instance\n-           and then Nkind (Unit (Cunit (Current_Sem_Unit)))\n-                      = N_Package_Declaration\n+           and then Nkind (Unit (Cunit (Current_Sem_Unit))) =\n+                      N_Package_Declaration\n          then\n             Set_Body_Needed_For_Inlining (Cunit_Entity (Current_Sem_Unit));\n          end if;"}]}