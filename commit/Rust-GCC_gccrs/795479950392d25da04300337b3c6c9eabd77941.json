{"sha": "795479950392d25da04300337b3c6c9eabd77941", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk1NDc5OTUwMzkyZDI1ZGEwNDMwMDMzN2IzYzZjOWVhYmQ3Nzk0MQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-05-28T21:03:53Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-05-28T21:03:53Z"}, "message": "tree-ssa-ccp.c (ccp_fold): Remove code that produces non-gimple min minvariant.\n\n\t* tree-ssa-ccp.c (ccp_fold): Remove code that produces\n\tnon-gimple min minvariant.\n\nFrom-SVN: r100301", "tree": {"sha": "9079d9b1955f3bd76707127687c446129233f4c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9079d9b1955f3bd76707127687c446129233f4c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/795479950392d25da04300337b3c6c9eabd77941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/795479950392d25da04300337b3c6c9eabd77941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/795479950392d25da04300337b3c6c9eabd77941", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/795479950392d25da04300337b3c6c9eabd77941/comments", "author": null, "committer": null, "parents": [{"sha": "d1aa35ae8ee1188cdc524e1785c5ad13499922d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1aa35ae8ee1188cdc524e1785c5ad13499922d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1aa35ae8ee1188cdc524e1785c5ad13499922d4"}], "stats": {"total": 37, "additions": 5, "deletions": 32}, "files": [{"sha": "a925d495d1c5af268fa605cc5f77d95a6a82578f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/795479950392d25da04300337b3c6c9eabd77941/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/795479950392d25da04300337b3c6c9eabd77941/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=795479950392d25da04300337b3c6c9eabd77941", "patch": "@@ -1,3 +1,8 @@\n+2005-05-28  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-ssa-ccp.c (ccp_fold): Remove code that produces\n+\tnon-gimple min minvariant.\n+\n 2005-05-28  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa-threadupdate.c: (create_edge_and_update_destination_phis):"}, {"sha": "01b608bd50df0117104ba5ad5aff14ee766e1380", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/795479950392d25da04300337b3c6c9eabd77941/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/795479950392d25da04300337b3c6c9eabd77941/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=795479950392d25da04300337b3c6c9eabd77941", "patch": "@@ -855,21 +855,6 @@ ccp_fold (tree stmt)\n \t use this expression.  */\n       if (retval && ! is_gimple_min_invariant (retval))\n \treturn NULL;\n-\n-      /* If we could not fold the expression, but the arguments are all\n-         constants and gimple values, then build and return the new\n-\t expression. \n-\n-\t In some cases the new expression is still something we can\n-\t use as a replacement for an argument.  This happens with\n-\t NOP conversions of types for example.\n-\n-\t In other cases the new expression can not be used as a\n-\t replacement for an argument (as it would create non-gimple\n-\t code).  But the new expression can still be used to derive\n-\t other constants.  */\n-      if (! retval && is_gimple_min_invariant (op0))\n-\treturn build1 (code, TREE_TYPE (rhs), op0);\n     }\n \n   /* Binary and comparison operators.  We know one or both of the\n@@ -906,23 +891,6 @@ ccp_fold (tree stmt)\n \t use this expression.  */\n       if (retval && ! is_gimple_min_invariant (retval))\n \treturn NULL;\n-      \n-      /* If we could not fold the expression, but the arguments are all\n-         constants and gimple values, then build and return the new\n-\t expression. \n-\n-\t In some cases the new expression is still something we can\n-\t use as a replacement for an argument.  This happens with\n-\t NOP conversions of types for example.\n-\n-\t In other cases the new expression can not be used as a\n-\t replacement for an argument (as it would create non-gimple\n-\t code).  But the new expression can still be used to derive\n-\t other constants.  */\n-      if (! retval\n-\t  && is_gimple_min_invariant (op0)\n-\t  && is_gimple_min_invariant (op1))\n-\treturn build (code, TREE_TYPE (rhs), op0, op1);\n     }\n \n   /* We may be able to fold away calls to builtin functions if their"}]}