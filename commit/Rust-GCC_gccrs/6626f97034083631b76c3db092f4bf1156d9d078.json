{"sha": "6626f97034083631b76c3db092f4bf1156d9d078", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYyNmY5NzAzNDA4MzYzMWI3NmMzZGIwOTJmNGJmMTE1NmQ5ZDA3OA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2015-11-09T09:18:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2015-11-09T09:18:59Z"}, "message": "Add TARGET_ADDR_SPACE_ZERO_ADDRESS_VALID\n\n        * gimple.c (check_loadstore): Return false when 0 is a valid address.\n        * fold-const.c (const_unop) [ADDR_SPACE_CONVERT_EXPR]: Do not fold\n        null when 0 is valid in the source address space.\n        * target.def (TARGET_ADDR_SPACE_ZERO_ADDRESS_VALID): New.\n        * targhooks.c (default_addr_space_zero_address_valid): New.\n        * targhooks.h (default_addr_space_zero_address_valid): Declare.\n        * doc/tm.texi.in (TARGET_ADDR_SPACE_ZERO_ADDRESS_VALID): Mark it.\n        * doc/tm.texi: Rebuild.\n\nFrom-SVN: r229999", "tree": {"sha": "9ced0fef02073054fa60b803b27fbf06077574a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ced0fef02073054fa60b803b27fbf06077574a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6626f97034083631b76c3db092f4bf1156d9d078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6626f97034083631b76c3db092f4bf1156d9d078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6626f97034083631b76c3db092f4bf1156d9d078", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6626f97034083631b76c3db092f4bf1156d9d078/comments", "author": null, "committer": null, "parents": [{"sha": "bd68a3a7e74c8a034dab3efd84c09c4fed066fc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd68a3a7e74c8a034dab3efd84c09c4fed066fc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd68a3a7e74c8a034dab3efd84c09c4fed066fc1"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "858f9b8ffd6449d344eb0acaa67e065c88429dd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626f97034083631b76c3db092f4bf1156d9d078/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626f97034083631b76c3db092f4bf1156d9d078/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6626f97034083631b76c3db092f4bf1156d9d078", "patch": "@@ -1,5 +1,14 @@\n 2015-11-09  Richard Henderson  <rth@redhat.com>\n \n+\t* gimple.c (check_loadstore): Return false when 0 is a valid address.\n+\t* fold-const.c (const_unop) [ADDR_SPACE_CONVERT_EXPR]: Do not fold\n+\tnull when 0 is valid in the source address space.\n+\t* target.def (TARGET_ADDR_SPACE_ZERO_ADDRESS_VALID): New.\n+\t* targhooks.c (default_addr_space_zero_address_valid): New.\n+\t* targhooks.h (default_addr_space_zero_address_valid): Declare.\n+\t* doc/tm.texi.in (TARGET_ADDR_SPACE_ZERO_ADDRESS_VALID): Mark it.\n+\t* doc/tm.texi: Rebuild.\n+\n \t* cselib.c (add_mem_for_addr): Compare address spaces when\n \tmatching memories.\n \t(cselib_lookup_mem): Likewise."}, {"sha": "56cf60d004fe948641603f621ac682496e87a9b1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626f97034083631b76c3db092f4bf1156d9d078/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626f97034083631b76c3db092f4bf1156d9d078/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=6626f97034083631b76c3db092f4bf1156d9d078", "patch": "@@ -10365,6 +10365,11 @@ arithmetic operations.  Pointers to a superset address space can be\n converted to pointers to a subset address space via explicit casts.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_ADDR_SPACE_ZERO_ADDRESS_VALID (addr_space_t @var{as})\n+Define this to modify the default handling of address 0 for the\n+address space.  Return true if 0 should be considered a valid address.\n+@end deftypefn\n+\n @deftypefn {Target Hook} rtx TARGET_ADDR_SPACE_CONVERT (rtx @var{op}, tree @var{from_type}, tree @var{to_type})\n Define this to convert the pointer expression represented by the RTL\n @var{op} with type @var{from_type} that points to a named address"}, {"sha": "40abf76cdb4de928171b434a6099cfbd06ada965", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626f97034083631b76c3db092f4bf1156d9d078/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626f97034083631b76c3db092f4bf1156d9d078/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=6626f97034083631b76c3db092f4bf1156d9d078", "patch": "@@ -7455,6 +7455,8 @@ c_register_addr_space (\"__ea\", ADDR_SPACE_EA);\n \n @hook TARGET_ADDR_SPACE_SUBSET_P\n \n+@hook TARGET_ADDR_SPACE_ZERO_ADDRESS_VALID\n+\n @hook TARGET_ADDR_SPACE_CONVERT\n \n @node Misc"}, {"sha": "8b437ab8f26b8f795d50dbaac8fd83cfaf5e1d4e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626f97034083631b76c3db092f4bf1156d9d078/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626f97034083631b76c3db092f4bf1156d9d078/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6626f97034083631b76c3db092f4bf1156d9d078", "patch": "@@ -1545,7 +1545,11 @@ const_unop (enum tree_code code, tree type, tree arg0)\n       return fold_convert_const (code, type, arg0);\n \n     case ADDR_SPACE_CONVERT_EXPR:\n-      if (integer_zerop (arg0))\n+      /* If the source address is 0, and the source address space\n+\t cannot have a valid object at 0, fold to dest type null.  */\n+      if (integer_zerop (arg0)\n+\t  && !(targetm.addr_space.zero_address_valid\n+\t       (TYPE_ADDR_SPACE (TREE_TYPE (TREE_TYPE (arg0))))))\n \treturn fold_convert_const (code, type, arg0);\n       break;\n "}, {"sha": "706b126e5bb93b70e64ce75ff25728a57bee85fe", "filename": "gcc/gimple.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626f97034083631b76c3db092f4bf1156d9d078/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626f97034083631b76c3db092f4bf1156d9d078/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=6626f97034083631b76c3db092f4bf1156d9d078", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-iterator.h\"\n #include \"gimple-walk.h\"\n #include \"gimplify.h\"\n+#include \"target.h\"\n \n \n /* All the tuples have their operand vector (if present) at the very bottom\n@@ -2624,9 +2625,15 @@ nonfreeing_call_p (gimple *call)\n static bool\n check_loadstore (gimple *, tree op, tree, void *data)\n {\n-  if ((TREE_CODE (op) == MEM_REF || TREE_CODE (op) == TARGET_MEM_REF)\n-      && operand_equal_p (TREE_OPERAND (op, 0), (tree)data, 0))\n-    return true;\n+  if (TREE_CODE (op) == MEM_REF || TREE_CODE (op) == TARGET_MEM_REF)\n+    {\n+      /* Some address spaces may legitimately dereference zero.  */\n+      addr_space_t as = TYPE_ADDR_SPACE (TREE_TYPE (op));\n+      if (targetm.addr_space.zero_address_valid (as))\n+\treturn false;\n+\n+      return operand_equal_p (TREE_OPERAND (op, 0), (tree)data, 0);\n+    }\n   return false;\n }\n "}, {"sha": "fc52798096841e8d6bd28a2cfcf3be31be4b48d7", "filename": "gcc/target.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626f97034083631b76c3db092f4bf1156d9d078/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626f97034083631b76c3db092f4bf1156d9d078/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=6626f97034083631b76c3db092f4bf1156d9d078", "patch": "@@ -3223,6 +3223,15 @@ converted to pointers to a subset address space via explicit casts.\",\n  bool, (addr_space_t subset, addr_space_t superset),\n  default_addr_space_subset_p)\n \n+/* True if 0 is a valid address in the address space, or false if\n+   0 is a NULL in the address space.  */\n+DEFHOOK\n+(zero_address_valid,\n+ \"Define this to modify the default handling of address 0 for the\\n\\\n+address space.  Return true if 0 should be considered a valid address.\",\n+ bool, (addr_space_t as),\n+ default_addr_space_zero_address_valid)\n+\n /* Function to convert an rtl expression from one address space to another.  */\n DEFHOOK\n (convert,"}, {"sha": "d9108a633bf5418fcade72ae5b56e10bae26addb", "filename": "gcc/targhooks.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626f97034083631b76c3db092f4bf1156d9d078/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626f97034083631b76c3db092f4bf1156d9d078/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=6626f97034083631b76c3db092f4bf1156d9d078", "patch": "@@ -1268,6 +1268,15 @@ default_addr_space_subset_p (addr_space_t subset, addr_space_t superset)\n   return (subset == superset);\n }\n \n+/* The default hook for determining if 0 within a named address\n+   space is a valid address.  */\n+\n+bool\n+default_addr_space_zero_address_valid (addr_space_t as ATTRIBUTE_UNUSED)\n+{\n+  return false;\n+}\n+\n /* The default hook for TARGET_ADDR_SPACE_CONVERT. This hook should never be\n    called for targets with only a generic address space.  */\n "}, {"sha": "d93d4d7957cac7c0f782e98be40d9e390dceeb7d", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626f97034083631b76c3db092f4bf1156d9d078/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626f97034083631b76c3db092f4bf1156d9d078/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=6626f97034083631b76c3db092f4bf1156d9d078", "patch": "@@ -177,6 +177,7 @@ extern bool default_addr_space_legitimate_address_p (machine_mode, rtx,\n extern rtx default_addr_space_legitimize_address (rtx, rtx, machine_mode,\n \t\t\t\t\t\t  addr_space_t);\n extern bool default_addr_space_subset_p (addr_space_t, addr_space_t);\n+extern bool default_addr_space_zero_address_valid (addr_space_t);\n extern rtx default_addr_space_convert (rtx, tree, tree);\n extern unsigned int default_case_values_threshold (void);\n extern bool default_have_conditional_execution (void);"}]}