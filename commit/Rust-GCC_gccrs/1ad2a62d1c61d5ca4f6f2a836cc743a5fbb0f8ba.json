{"sha": "1ad2a62d1c61d5ca4f6f2a836cc743a5fbb0f8ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFkMmE2MmQxYzYxZDVjYTRmNmYyYTgzNmNjNzQzYTVmYmIwZjhiYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-17T12:40:51Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-17T12:40:51Z"}, "message": "(alpha_emit_conditional_move): Fix some bugs in previous change and do\nsome cleanup.\n\nFrom-SVN: r11834", "tree": {"sha": "49e14e9c06d87251286b03968c94ad3af69ec01b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49e14e9c06d87251286b03968c94ad3af69ec01b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ad2a62d1c61d5ca4f6f2a836cc743a5fbb0f8ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad2a62d1c61d5ca4f6f2a836cc743a5fbb0f8ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ad2a62d1c61d5ca4f6f2a836cc743a5fbb0f8ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad2a62d1c61d5ca4f6f2a836cc743a5fbb0f8ba/comments", "author": null, "committer": null, "parents": [{"sha": "6fd5ac08f27178e29e89f34990357c3d4ec85a1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd5ac08f27178e29e89f34990357c3d4ec85a1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fd5ac08f27178e29e89f34990357c3d4ec85a1b"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "aa1f1e3d06e437921482140c60e952a6cf9bf443", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad2a62d1c61d5ca4f6f2a836cc743a5fbb0f8ba/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad2a62d1c61d5ca4f6f2a836cc743a5fbb0f8ba/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=1ad2a62d1c61d5ca4f6f2a836cc743a5fbb0f8ba", "patch": "@@ -977,54 +977,54 @@ alpha_emit_conditional_move (cmp, mode)\n      rtx cmp;\n      enum machine_mode mode;\n {\n+  enum rtx_code code = GET_CODE (cmp);\n   rtx op0 = alpha_compare_op0;\n   rtx op1 = alpha_compare_op1;\n-  rtx zero = CONST0_RTX (mode);\n-  rtx tmp;\n-  enum rtx_code code = GET_CODE (cmp), code2;\n+  enum machine_mode cmp_mode\n+    = (GET_MODE (op0) == VOIDmode ? DImode : GET_MODE (op0));\n+  enum machine_mode cmp_op_mode = alpha_compare_fp_p ? DFmode : DImode;\n+  rtx tem;\n \n-  if (alpha_compare_fp_p != FLOAT_MODE_P(mode))\n+  if (alpha_compare_fp_p != FLOAT_MODE_P (mode))\n     return 0;\n \n   /* We may be able to use a conditional move directly.\n      This avoids emitting spurious compares. */\n-  if (signed_comparison_operator (cmp, mode) && (op0 == zero || op1 == zero))\n-    return gen_rtx (code, mode, op0, op1);\n+  if (signed_comparison_operator (cmp, cmp_op_mode)\n+      && (op0 == CONST0_RTX (cmp_mode) || op1 == CONST0_RTX (cmp_mode)))\n+    return gen_rtx (code, VOIDmode, op0, op1);\n \n   /* We can't put the comparison insides a conditional move;\n      emit a compare instruction and put that inside the\n-     conditional move. */\n+     conditional move.  Make sure we emit only comparisons we have;\n+     swap or reverse as necessary.  */\n \n-  /* The alpha does not have NE GE GT compares for any mode.  Avoid them. */\n-  code2 = NE;\n   switch (code)\n     {\n-    /* We have these compares: */\n-    case EQ: case LE: case LT:\n+    case EQ:  case LE:  case LT:  case LEU:  case LTU:\n+      /* We have these compares: */\n       break;\n-    /* These must be inverted: */\n+\n     case NE:\n-      code = code2 = EQ;\n-      break;\n-    case GE:\n-      code = LE;\n-      op0 = force_reg (mode, alpha_compare_op1);\n-      op1 = alpha_compare_op0;\n+      /* This must be reversed. */\n+      code = reverse_condition (code);\n       break;\n-    case GT:\n-      code = LT;\n-      op0 = force_reg (mode, alpha_compare_op1);\n-      op1 = alpha_compare_op0;\n+\n+    case GE:  case GT:  case GEU:  case GTU:\n+      /* These must be swapped.  Make sure the new first operand is in\n+\t a register.  */\n+      code = swap_condition (code);\n+      tem = op0, op0 = op1, op1 = tem;\n+      op0 = force_reg (cmp_mode, op0);\n       break;\n+\n     default:\n-      return 0;\n+      abort ();\n     }\n \n-  cmp = gen_rtx (code, mode, op0, op1);\n-  tmp = gen_reg_rtx (mode);\n-  emit_insn (gen_rtx (SET, VOIDmode, tmp, cmp));\n-  cmp = gen_rtx (code2, VOIDmode, tmp, zero);\n-  return cmp;\n+  tem = gen_reg_rtx (cmp_op_mode);\n+  emit_move_insn (tem, gen_rtx (code, cmp_op_mode, op0, op1));\n+  return gen_rtx (code == NE ? EQ : NE, VOIDmode, tem, CONST0_RTX (mode));\n }\n \f\n /* Adjust the cost of a scheduling dependency.  Return the new cost of"}]}