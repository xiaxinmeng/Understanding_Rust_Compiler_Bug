{"sha": "c18257c7265470a071f7ed9fe29899ece839fcf4", "node_id": "C_kwDOANBUbNoAKGMxODI1N2M3MjY1NDcwYTA3MWY3ZWQ5ZmUyOTg5OWVjZTgzOWZjZjQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-20T17:04:23Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-20T17:04:42Z"}, "message": "Add HIR Lowering for TuplePattern", "tree": {"sha": "012c451c43e92f6cf5d29c8a73023515493cee06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/012c451c43e92f6cf5d29c8a73023515493cee06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c18257c7265470a071f7ed9fe29899ece839fcf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c18257c7265470a071f7ed9fe29899ece839fcf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c18257c7265470a071f7ed9fe29899ece839fcf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c18257c7265470a071f7ed9fe29899ece839fcf4/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53ce1d5ac9106bc7427f14c285d782c1023124ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53ce1d5ac9106bc7427f14c285d782c1023124ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53ce1d5ac9106bc7427f14c285d782c1023124ec"}], "stats": {"total": 182, "additions": 143, "deletions": 39}, "files": [{"sha": "28895ba197d0702d4a64be8dc95a6479a0caf4e4", "filename": "gcc/rust/hir/rust-ast-lower-base.cc", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18257c7265470a071f7ed9fe29899ece839fcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18257c7265470a071f7ed9fe29899ece839fcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc?ref=c18257c7265470a071f7ed9fe29899ece839fcf4", "patch": "@@ -18,6 +18,7 @@\n \n #include \"rust-ast-lower-base.h\"\n #include \"rust-ast-lower-type.h\"\n+#include \"rust-ast-lower-pattern.h\"\n \n namespace Rust {\n namespace HIR {\n@@ -885,5 +886,79 @@ ASTLoweringBase::attribute_handled_in_another_pass (\n   return lookup.handler != Analysis::CompilerPass::HIR_LOWERING;\n }\n \n+std::unique_ptr<HIR::TuplePatternItems>\n+ASTLoweringBase::lower_tuple_pattern_multiple (\n+  AST::TuplePatternItemsMultiple &pattern)\n+{\n+  std::vector<std::unique_ptr<HIR::Pattern> > patterns;\n+  for (auto &p : pattern.get_patterns ())\n+    {\n+      HIR::Pattern *translated = ASTLoweringPattern::translate (p.get ());\n+      patterns.push_back (std::unique_ptr<HIR::Pattern> (translated));\n+    }\n+\n+  return std::unique_ptr<HIR::TuplePatternItems> (\n+    new HIR::TuplePatternItemsMultiple (std::move (patterns)));\n+}\n+\n+std::unique_ptr<TuplePatternItems>\n+ASTLoweringBase::lower_tuple_pattern_ranged (\n+  AST::TuplePatternItemsRanged &pattern)\n+{\n+  std::vector<std::unique_ptr<HIR::Pattern> > lower_patterns;\n+  std::vector<std::unique_ptr<HIR::Pattern> > upper_patterns;\n+\n+  for (auto &p : pattern.get_lower_patterns ())\n+    {\n+      HIR::Pattern *translated = ASTLoweringPattern::translate (p.get ());\n+      lower_patterns.push_back (std::unique_ptr<HIR::Pattern> (translated));\n+    }\n+\n+  for (auto &p : pattern.get_upper_patterns ())\n+    {\n+      HIR::Pattern *translated = ASTLoweringPattern::translate (p.get ());\n+      upper_patterns.push_back (std::unique_ptr<HIR::Pattern> (translated));\n+    }\n+\n+  return std::unique_ptr<HIR::TuplePatternItems> (\n+    new HIR::TuplePatternItemsRanged (std::move (lower_patterns),\n+\t\t\t\t      std::move (upper_patterns)));\n+}\n+\n+HIR::Literal\n+ASTLoweringBase::lower_literal (const AST::Literal &literal)\n+{\n+  HIR::Literal::LitType type = HIR::Literal::LitType::CHAR;\n+  switch (literal.get_lit_type ())\n+    {\n+    case AST::Literal::LitType::CHAR:\n+      type = HIR::Literal::LitType::CHAR;\n+      break;\n+    case AST::Literal::LitType::STRING:\n+      type = HIR::Literal::LitType::STRING;\n+      break;\n+    case AST::Literal::LitType::BYTE:\n+      type = HIR::Literal::LitType::BYTE;\n+      break;\n+    case AST::Literal::LitType::BYTE_STRING:\n+      type = HIR::Literal::LitType::BYTE_STRING;\n+      break;\n+    case AST::Literal::LitType::INT:\n+      type = HIR::Literal::LitType::INT;\n+      break;\n+    case AST::Literal::LitType::FLOAT:\n+      type = HIR::Literal::LitType::FLOAT;\n+      break;\n+    case AST::Literal::LitType::BOOL:\n+      type = HIR::Literal::LitType::BOOL;\n+      break;\n+    case AST::Literal::LitType::ERROR:\n+      gcc_unreachable ();\n+      break;\n+    }\n+\n+  return HIR::Literal (literal.as_string (), type, literal.get_type_hint ());\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "33009ae8c2db72c2429185be23ff8d9def163a61", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18257c7265470a071f7ed9fe29899ece839fcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18257c7265470a071f7ed9fe29899ece839fcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=c18257c7265470a071f7ed9fe29899ece839fcf4", "patch": "@@ -272,6 +272,14 @@ class ASTLoweringBase : public AST::ASTVisitor\n \n   bool\n   attribute_handled_in_another_pass (const std::string &attribute_path) const;\n+\n+  std::unique_ptr<TuplePatternItems>\n+  lower_tuple_pattern_multiple (AST::TuplePatternItemsMultiple &pattern);\n+\n+  std::unique_ptr<TuplePatternItems>\n+  lower_tuple_pattern_ranged (AST::TuplePatternItemsRanged &pattern);\n+\n+  HIR::Literal lower_literal (const AST::Literal &literal);\n };\n \n } // namespace HIR"}, {"sha": "5ae538621aa147d4ba3eebd704d063489f39b24a", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 4, "deletions": 32, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18257c7265470a071f7ed9fe29899ece839fcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18257c7265470a071f7ed9fe29899ece839fcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=c18257c7265470a071f7ed9fe29899ece839fcf4", "patch": "@@ -327,43 +327,15 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n   void visit (AST::LiteralExpr &expr) override\n   {\n-    HIR::Literal::LitType type = HIR::Literal::LitType::CHAR;\n-    switch (expr.get_lit_type ())\n-      {\n-      case AST::Literal::LitType::CHAR:\n-\ttype = HIR::Literal::LitType::CHAR;\n-\tbreak;\n-      case AST::Literal::LitType::STRING:\n-\ttype = HIR::Literal::LitType::STRING;\n-\tbreak;\n-      case AST::Literal::LitType::BYTE:\n-\ttype = HIR::Literal::LitType::BYTE;\n-\tbreak;\n-      case AST::Literal::LitType::BYTE_STRING:\n-\ttype = HIR::Literal::LitType::BYTE_STRING;\n-\tbreak;\n-      case AST::Literal::LitType::INT:\n-\ttype = HIR::Literal::LitType::INT;\n-\tbreak;\n-      case AST::Literal::LitType::FLOAT:\n-\ttype = HIR::Literal::LitType::FLOAT;\n-\tbreak;\n-      case AST::Literal::LitType::BOOL:\n-\ttype = HIR::Literal::LitType::BOOL;\n-\tbreak;\n-\t// Error literals should have been stripped during expansion\n-      case AST::Literal::LitType::ERROR:\n-\tgcc_unreachable ();\n-\tbreak;\n-      }\n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   UNKNOWN_LOCAL_DEFID);\n \n-    translated = new HIR::LiteralExpr (mapping, expr.as_string (), type,\n-\t\t\t\t       expr.get_literal ().get_type_hint (),\n-\t\t\t\t       expr.get_locus ());\n+    HIR::Literal l = lower_literal (expr.get_literal ());\n+    translated\n+      = new HIR::LiteralExpr (mapping, std::move (l), expr.get_locus (),\n+\t\t\t      expr.get_outer_attrs ());\n   }\n \n   void visit (AST::ArithmeticOrLogicalExpr &expr) override"}, {"sha": "957f8cd003b42c76914458df4a4562b3d1eefd68", "filename": "gcc/rust/hir/rust-ast-lower-pattern.cc", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18257c7265470a071f7ed9fe29899ece839fcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18257c7265470a071f7ed9fe29899ece839fcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.cc?ref=c18257c7265470a071f7ed9fe29899ece839fcf4", "patch": "@@ -163,5 +163,50 @@ ASTLoweringPattern::visit (AST::WildcardPattern &pattern)\n   translated = new HIR::WildcardPattern (mapping, pattern.get_locus ());\n }\n \n+void\n+ASTLoweringPattern::visit (AST::TuplePattern &pattern)\n+{\n+  std::unique_ptr<HIR::TuplePatternItems> items;\n+  switch (pattern.get_items ()->get_pattern_type ())\n+    {\n+      case AST::TuplePatternItems::TuplePatternItemType::MULTIPLE: {\n+\tAST::TuplePatternItemsMultiple &ref\n+\t  = *static_cast<AST::TuplePatternItemsMultiple *> (\n+\t    pattern.get_items ().get ());\n+\titems = lower_tuple_pattern_multiple (ref);\n+      }\n+      break;\n+\n+      case AST::TuplePatternItems::TuplePatternItemType::RANGED: {\n+\tAST::TuplePatternItemsRanged &ref\n+\t  = *static_cast<AST::TuplePatternItemsRanged *> (\n+\t    pattern.get_items ().get ());\n+\titems = lower_tuple_pattern_ranged (ref);\n+      }\n+      break;\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, pattern.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::TuplePattern (mapping, std::move (items), pattern.get_locus ());\n+}\n+\n+void\n+ASTLoweringPattern::visit (AST::LiteralPattern &pattern)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, pattern.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  HIR::Literal l = lower_literal (pattern.get_literal ());\n+  translated\n+    = new HIR::LiteralPattern (mapping, std::move (l), pattern.get_locus ());\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "32e9dacbbd427e356699902d8be23c512124d75e", "filename": "gcc/rust/hir/rust-ast-lower-pattern.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18257c7265470a071f7ed9fe29899ece839fcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18257c7265470a071f7ed9fe29899ece839fcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h?ref=c18257c7265470a071f7ed9fe29899ece839fcf4", "patch": "@@ -58,6 +58,10 @@ class ASTLoweringPattern : public ASTLoweringBase\n \n   void visit (AST::WildcardPattern &pattern) override;\n \n+  void visit (AST::TuplePattern &pattern) override;\n+\n+  void visit (AST::LiteralPattern &pattern) override;\n+\n private:\n   ASTLoweringPattern () : translated (nullptr) {}\n "}, {"sha": "e585dd2a3317e49169ce78802cb0f9beb6fe47b5", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18257c7265470a071f7ed9fe29899ece839fcf4/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18257c7265470a071f7ed9fe29899ece839fcf4/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=c18257c7265470a071f7ed9fe29899ece839fcf4", "patch": "@@ -77,13 +77,13 @@ class LiteralExpr : public ExprWithoutBlock\n \n   LiteralExpr (Analysis::NodeMapping mappings, std::string value_as_string,\n \t       Literal::LitType type, PrimitiveCoreType type_hint,\n-\t       Location locus, AST::AttrVec outer_attrs = AST::AttrVec ())\n+\t       Location locus, AST::AttrVec outer_attrs)\n     : ExprWithoutBlock (std::move (mappings), std::move (outer_attrs)),\n       literal (std::move (value_as_string), type, type_hint), locus (locus)\n   {}\n \n   LiteralExpr (Analysis::NodeMapping mappings, Literal literal, Location locus,\n-\t       AST::AttrVec outer_attrs = AST::AttrVec ())\n+\t       AST::AttrVec outer_attrs)\n     : ExprWithoutBlock (std::move (mappings), std::move (outer_attrs)),\n       literal (std::move (literal)), locus (locus)\n   {}"}, {"sha": "d6baff11056dc45322383e4b820e6c000bc8183d", "filename": "gcc/rust/typecheck/rust-hir-type-check-enumitem.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18257c7265470a071f7ed9fe29899ece839fcf4/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18257c7265470a071f7ed9fe29899ece839fcf4/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.h?ref=c18257c7265470a071f7ed9fe29899ece839fcf4", "patch": "@@ -57,7 +57,7 @@ class TypeCheckEnumItem : public TypeCheckBase\n       = new HIR::LiteralExpr (mapping, std::to_string (last_discriminant),\n \t\t\t      HIR::Literal::LitType::INT,\n \t\t\t      PrimitiveCoreType::CORETYPE_I64,\n-\t\t\t      item.get_locus ());\n+\t\t\t      item.get_locus (), {});\n \n     TyTy::BaseType *isize = nullptr;\n     bool ok = context->lookup_builtin (\"isize\", &isize);\n@@ -135,7 +135,7 @@ class TypeCheckEnumItem : public TypeCheckBase\n       = new HIR::LiteralExpr (mapping, std::to_string (last_discriminant),\n \t\t\t      HIR::Literal::LitType::INT,\n \t\t\t      PrimitiveCoreType::CORETYPE_I64,\n-\t\t\t      item.get_locus ());\n+\t\t\t      item.get_locus (), {});\n \n     TyTy::BaseType *isize = nullptr;\n     bool ok = context->lookup_builtin (\"isize\", &isize);\n@@ -182,7 +182,7 @@ class TypeCheckEnumItem : public TypeCheckBase\n       = new HIR::LiteralExpr (mapping, std::to_string (last_discriminant),\n \t\t\t      HIR::Literal::LitType::INT,\n \t\t\t      PrimitiveCoreType::CORETYPE_I64,\n-\t\t\t      item.get_locus ());\n+\t\t\t      item.get_locus (), {});\n \n     TyTy::BaseType *isize = nullptr;\n     bool ok = context->lookup_builtin (\"isize\", &isize);"}, {"sha": "b24ad8b5e995888e0431064d0a6461ea18317606", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18257c7265470a071f7ed9fe29899ece839fcf4/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18257c7265470a071f7ed9fe29899ece839fcf4/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=c18257c7265470a071f7ed9fe29899ece839fcf4", "patch": "@@ -670,7 +670,7 @@ class TypeCheckExpr : public TypeCheckBase\n \t    = new HIR::LiteralExpr (capacity_mapping, capacity_str,\n \t\t\t\t    HIR::Literal::LitType::INT,\n \t\t\t\t    PrimitiveCoreType::CORETYPE_USIZE,\n-\t\t\t\t    expr.get_locus ());\n+\t\t\t\t    expr.get_locus (), expr.get_outer_attrs ());\n \n \t  // mark the type for this implicit node\n \t  TyTy::BaseType *expected_ty = nullptr;\n@@ -929,7 +929,7 @@ class TypeCheckExpr : public TypeCheckBase\n \t    = new HIR::LiteralExpr (mapping, capacity_str,\n \t\t\t\t    HIR::Literal::LitType::INT,\n \t\t\t\t    PrimitiveCoreType::CORETYPE_USIZE,\n-\t\t\t\t    Location ());\n+\t\t\t\t    Location (), {});\n \n \t  // mark the type for this implicit node\n \t  TyTy::BaseType *expected_ty = nullptr;"}]}