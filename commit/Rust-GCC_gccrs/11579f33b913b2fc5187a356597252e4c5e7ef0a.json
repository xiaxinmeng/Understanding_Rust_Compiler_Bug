{"sha": "11579f33b913b2fc5187a356597252e4c5e7ef0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE1NzlmMzNiOTEzYjJmYzUxODdhMzU2NTk3MjUyZTRjNWU3ZWYwYQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2002-04-08T17:09:50Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2002-04-08T17:09:50Z"}, "message": "Revert last patch from Richard Henderson.\n\nFrom-SVN: r52029", "tree": {"sha": "28f086598325eb808ed2a01d6c8f07fc12f3df46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28f086598325eb808ed2a01d6c8f07fc12f3df46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11579f33b913b2fc5187a356597252e4c5e7ef0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11579f33b913b2fc5187a356597252e4c5e7ef0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11579f33b913b2fc5187a356597252e4c5e7ef0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11579f33b913b2fc5187a356597252e4c5e7ef0a/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62afca269c8a62ec8e42952e4bad741ad163245c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62afca269c8a62ec8e42952e4bad741ad163245c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62afca269c8a62ec8e42952e4bad741ad163245c"}], "stats": {"total": 52, "additions": 17, "deletions": 35}, "files": [{"sha": "f2279012a21bae91257c99ace067bc5cbc8a56f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11579f33b913b2fc5187a356597252e4c5e7ef0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11579f33b913b2fc5187a356597252e4c5e7ef0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11579f33b913b2fc5187a356597252e4c5e7ef0a", "patch": "@@ -1,3 +1,8 @@\n+2002-04-08  Andreas Jaeger  <aj@suse.de>\n+\n+\t* stmt.c (expand_asm_operands): Revert last patch from Richard\n+\tHenderson.\n+\n 2002-04-08  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* doc/contrib.texi (Contributors): Add John David Anglin and Loren"}, {"sha": "4f0cb179547687ca2bb4971246dc712d8d7b9ae8", "filename": "gcc/stmt.c", "status": "modified", "additions": 12, "deletions": 35, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11579f33b913b2fc5187a356597252e4c5e7ef0a/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11579f33b913b2fc5187a356597252e4c5e7ef0a/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=11579f33b913b2fc5187a356597252e4c5e7ef0a", "patch": "@@ -1740,48 +1740,25 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t      && (allows_mem || GET_CODE (DECL_RTL (val)) == REG)\n \t      && ! (GET_CODE (DECL_RTL (val)) == REG\n \t\t    && GET_MODE (DECL_RTL (val)) != TYPE_MODE (type)))\n+\t  || ! allows_reg\n \t  || is_inout)\n \t{\n-\t  enum { do_not_copy, do_copy_reg, do_copy_mem } do_copy;\n-\t  rtx op;\n+\t  output_rtx[i] = expand_expr (val, NULL_RTX, VOIDmode, EXPAND_WRITE);\n \n-\t  op = expand_expr (val, NULL_RTX, VOIDmode, EXPAND_WRITE);\n-\t  output_rtx[i] = op;\n-\n-\t  if (! allows_reg && GET_CODE (op) != MEM)\n+\t  if (! allows_reg && GET_CODE (output_rtx[i]) != MEM)\n \t    error (\"output number %d not directly addressable\", i);\n-\n-\t  do_copy = do_not_copy;\n-\t  if (! allows_mem && GET_CODE (op) == MEM)\n-\t    do_copy = do_copy_reg;\n-\t  else if (GET_CODE (op) == CONCAT)\n-\t    do_copy = do_copy_reg;\n-\t  else if (asm_operand_ok (op, constraints[i]) <= 0)\n-\t    {\n-\t      if (allows_reg && !register_operand (op, VOIDmode))\n-\t\tdo_copy = do_copy_reg;\n-\t      else if (allows_mem && GET_CODE (op) != MEM)\n-\t\tdo_copy = do_copy_mem;\n-\t      else\n-\t\twarning (\"asm operand %d probably doesn't match constraints\", i);\n-\t    }\n-\n-\t  if (do_copy == do_copy_reg)\n-\t    {\n-    \t      real_output_rtx[i] = protect_from_queue (op, 1);\n-\t      output_rtx[i] = gen_reg_rtx (GET_MODE (op));\n-\t    }\n-\t  else if (do_copy == do_copy_mem)\n+\t  if ((! allows_mem && GET_CODE (output_rtx[i]) == MEM)\n+\t      || GET_CODE (output_rtx[i]) == CONCAT)\n \t    {\n-\t      real_output_rtx[i] = op;\n-\t      output_rtx[i] = assign_temp (type, 0, 1, 1);\n+    \t      real_output_rtx[i] = protect_from_queue (output_rtx[i], 1);\n+\t      output_rtx[i] = gen_reg_rtx (GET_MODE (output_rtx[i]));\n+\t      if (is_inout)\n+\t\temit_move_insn (output_rtx[i], real_output_rtx[i]);\n \t    }\n-\t  if (do_copy && is_inout)\n-\t    emit_move_insn (output_rtx[i], real_output_rtx[i]);\n \t}\n       else\n \t{\n-\t  output_rtx[i] = assign_temp (type, 0, !allows_reg, 1);\n+\t  output_rtx[i] = assign_temp (type, 0, 0, 1);\n \t  TREE_VALUE (tail) = make_tree (type, output_rtx[i]);\n \t}\n \n@@ -1835,9 +1812,9 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \n       if (asm_operand_ok (op, constraint) <= 0)\n \t{\n-\t  if (allows_reg && !register_operand (op, VOIDmode))\n+\t  if (allows_reg)\n \t    op = force_reg (TYPE_MODE (type), op);\n-\t  else if (!allows_mem || GET_CODE (op) == MEM)\n+\t  else if (!allows_mem)\n \t    warning (\"asm operand %d probably doesn't match constraints\",\n \t\t     i + noutputs);\n \t  else if (CONSTANT_P (op))"}]}