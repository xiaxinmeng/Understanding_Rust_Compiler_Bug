{"sha": "b9e8bfda537a521ac2a02867b9d103ff82fd1fbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjllOGJmZGE1MzdhNTIxYWMyYTAyODY3YjlkMTAzZmY4MmZkMWZiZg==", "commit": {"author": {"name": "Nicolas Pitre", "email": "nico@cam.org", "date": "2004-11-18T20:28:04Z"}, "committer": {"name": "Nicolas Pitre", "email": "nico@gcc.gnu.org", "date": "2004-11-18T20:28:04Z"}, "message": "arm.c (const_double_needs_minipool): New function to determine if a CONST_DOUBLE should be pushed to the minipool.\n\n* config/arm/arm.c (const_double_needs_minipool): New function to\ndetermine if a CONST_DOUBLE should be pushed to the minipool.\n(note_invalid_constants): Use it.\n\nFrom-SVN: r90881", "tree": {"sha": "8a87f2457fc0f84352e5578da2a5d18d4f6bb6f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a87f2457fc0f84352e5578da2a5d18d4f6bb6f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9e8bfda537a521ac2a02867b9d103ff82fd1fbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e8bfda537a521ac2a02867b9d103ff82fd1fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9e8bfda537a521ac2a02867b9d103ff82fd1fbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e8bfda537a521ac2a02867b9d103ff82fd1fbf/comments", "author": null, "committer": null, "parents": [{"sha": "6e5b508490a8a67f277e965dd0e2ae3b073d3c9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5b508490a8a67f277e965dd0e2ae3b073d3c9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e5b508490a8a67f277e965dd0e2ae3b073d3c9b"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "2cb26b672dd4d7979ccb4ee0ec3f7263a5f71377", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e8bfda537a521ac2a02867b9d103ff82fd1fbf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e8bfda537a521ac2a02867b9d103ff82fd1fbf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9e8bfda537a521ac2a02867b9d103ff82fd1fbf", "patch": "@@ -1,3 +1,9 @@\n+2004-11-18  Nicolas Pitre <nico@cam.org>\n+\n+\t* config/arm/arm.c (const_double_needs_minipool): New function to\n+\tdetermine if a CONST_DOUBLE should be pushed to the minipool.\n+\t(note_invalid_constants): Use it.\n+\n 2004-11-18  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/arm.c (target_float_switch): New variable.."}, {"sha": "192fdb4f17b929b728979b068739184c661ded58", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e8bfda537a521ac2a02867b9d103ff82fd1fbf/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e8bfda537a521ac2a02867b9d103ff82fd1fbf/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b9e8bfda537a521ac2a02867b9d103ff82fd1fbf", "patch": "@@ -7258,6 +7258,45 @@ push_minipool_fix (rtx insn, HOST_WIDE_INT address, rtx *loc,\n   minipool_fix_tail = fix;\n }\n \n+/* Determine if a CONST_DOUBLE should be pushed to the minipool */\n+static bool\n+const_double_needs_minipool (rtx val)\n+{\n+  long parts[2];\n+\n+  /* thumb only knows to load a CONST_DOUBLE from memory at the moment */\n+  if (TARGET_THUMB)\n+    return true;\n+\n+  if (GET_MODE (val) == DFmode)\n+    {\n+      REAL_VALUE_TYPE r;\n+      if (!TARGET_SOFT_FLOAT)\n+\treturn true;\n+      REAL_VALUE_FROM_CONST_DOUBLE (r, val);\n+      REAL_VALUE_TO_TARGET_DOUBLE (r, parts);\n+    }\n+  else if (GET_MODE (val) != VOIDmode)\n+    return true;\n+  else\n+    {\n+      parts[0] = CONST_DOUBLE_LOW (val);\n+      parts[1] = CONST_DOUBLE_HIGH (val);\n+    }\n+\n+  /* Don't push anything to the minipool if a CONST_DOUBLE can be built with\n+     a few ALU insns directly. On balance, the optimum is likely to be around\n+     3 insns, except when there are no load delay slots where it should be 4.\n+     When optimizing for size, a limit of 3 allows saving at least one word\n+     except for cases where a single minipool entry could be shared more than\n+     2 times which is rather unlikely to outweight the overall savings. */\n+  return (  arm_gen_constant (SET, SImode, NULL_RTX, parts[0],\n+\t\t\t      NULL_RTX, NULL_RTX, 0, 0)\n+\t  + arm_gen_constant (SET, SImode, NULL_RTX, parts[1],\n+\t\t\t      NULL_RTX, NULL_RTX, 0, 0)\n+\t  > ((optimize_size || (tune_flags & FL_LDSCHED)) ? 3 : 4));\n+}\n+\n /* Scan INSN and note any of its operands that need fixing.\n    If DO_PUSHES is false we do not actually push any of the fixups\n    needed.  The function returns TRUE is any fixups were needed/pushed.\n@@ -7294,7 +7333,9 @@ note_invalid_constants (rtx insn, HOST_WIDE_INT address, int do_pushes)\n \t{\n \t  rtx op = recog_data.operand[opno];\n \n-\t  if (CONSTANT_P (op))\n+\t  if (CONSTANT_P (op)\n+\t      && (GET_CODE (op) != CONST_DOUBLE\n+\t\t  || const_double_needs_minipool (op)))\n \t    {\n \t      if (do_pushes)\n \t\tpush_minipool_fix (insn, address, recog_data.operand_loc[opno],"}]}