{"sha": "6461bdc48fa3f98015584953598a83f8c7caa506", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ2MWJkYzQ4ZmEzZjk4MDE1NTg0OTUzNTk4YTgzZjhjN2NhYTUwNg==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2019-02-14T14:51:46Z"}, "committer": {"name": "Matthew Malcomson", "email": "matmal01@gcc.gnu.org", "date": "2019-02-14T14:51:46Z"}, "message": "When this testcase was introduced it failed to account for the possibility of...\n\nWhen this testcase was introduced it failed to account for the possibility of\ntargets that do not support arm mode or that do not support the ldrd/strd\ninstructions.\n\nThis patch accounts for both of these by adding some\ndg-require-effective-target lines to the testcase.\n\nThis patch also adds a new effective-target procedure to check a target\nsupports ldrd/strd.\n\nThis patch also adds a new effective-target procedure to check a target\nsupports arm ldrd/strd.\nThe check uses the 'r' constraint to ensure SP is not used so that it will work\nfor thumb mode code generation as well as arm mode.\n\nTested by running this testcase with cross compilers using \"-march=armv5t\",\n\"-mcpu=cortex-m3\", \"-mcpu-arm7tdmi\", \"-mcpu=cortex-a9 -march=armv5t\" for both\narm-none-eabi and arm-none-linux-gnueabihf.\nAlso ran this testcase with `make check` natively.\n\ngcc/testsuite/ChangeLog:\n\n2019-02-14  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* gcc.dg/rtl/arm/ldrd-peepholes.c: Restrict testcase.\n\t* lib/target-supports.exp: Add procedure to check for ldrd.\n\nFrom-SVN: r268881", "tree": {"sha": "741b8d74b2634252797ac61608223aca09d09212", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/741b8d74b2634252797ac61608223aca09d09212"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6461bdc48fa3f98015584953598a83f8c7caa506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6461bdc48fa3f98015584953598a83f8c7caa506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6461bdc48fa3f98015584953598a83f8c7caa506", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6461bdc48fa3f98015584953598a83f8c7caa506/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae2341c94d1743c7bedb499ebdcbbab7d9a40ebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae2341c94d1743c7bedb499ebdcbbab7d9a40ebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae2341c94d1743c7bedb499ebdcbbab7d9a40ebd"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "1d0a0fd5c49053e0b464ec0367020eaf0fef0134", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6461bdc48fa3f98015584953598a83f8c7caa506/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6461bdc48fa3f98015584953598a83f8c7caa506/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6461bdc48fa3f98015584953598a83f8c7caa506", "patch": "@@ -1,3 +1,8 @@\n+2019-02-14  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* gcc.dg/rtl/arm/ldrd-peepholes.c: Restrict testcase.\n+\t* lib/target-supports.exp: Add procedure to check for ldrd.\n+\n 2019-02-14  Cesar Philippidis  <cesar@codesourcery.com>\n \n \tPR fortran/72715"}, {"sha": "cbb64a770f5d796250601cafe481d7c2ea13f2eb", "filename": "gcc/testsuite/gcc.dg/rtl/arm/ldrd-peepholes.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6461bdc48fa3f98015584953598a83f8c7caa506/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Farm%2Fldrd-peepholes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6461bdc48fa3f98015584953598a83f8c7caa506/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Farm%2Fldrd-peepholes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Farm%2Fldrd-peepholes.c?ref=6461bdc48fa3f98015584953598a83f8c7caa506", "patch": "@@ -1,4 +1,6 @@\n /* { dg-do compile { target arm*-*-* } } */\n+/* { dg-require-effective-target arm_arm_ok } */\n+/* { dg-require-effective-target arm_ldrd_strd_ok } */\n /* { dg-skip-if \"Ensure only targetting arm with TARGET_LDRD\" { *-*-* } { \"-mthumb\" } { \"\" } } */\n /* { dg-options \"-O3 -marm -fdump-rtl-peephole2\" } */\n "}, {"sha": "5e5325550855c438115fcdb1096afb05630ab82f", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6461bdc48fa3f98015584953598a83f8c7caa506/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6461bdc48fa3f98015584953598a83f8c7caa506/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=6461bdc48fa3f98015584953598a83f8c7caa506", "patch": "@@ -4918,6 +4918,26 @@ proc check_effective_target_arm_prefer_ldrd_strd { } {\n     }  \"-O2 -mthumb\" ]\n }\n \n+# Return true if LDRD/STRD instructions are available on this target.\n+proc check_effective_target_arm_ldrd_strd_ok { } {\n+    if { ![check_effective_target_arm32] } {\n+      return 0;\n+    }\n+\n+    return [check_no_compiler_messages arm_ldrd_strd_ok object {\n+      int main(void)\n+      {\n+        __UINT64_TYPE__ a = 1, b = 10;\n+        __UINT64_TYPE__ *c = &b;\n+        // `a` will be in a valid register since it's a DImode quantity.\n+        asm (\"ldrd %0, %1\"\n+             : \"=r\" (a)\n+             : \"m\" (c));\n+        return a == 10;\n+      }\n+    }]\n+}\n+\n # Return 1 if this is a PowerPC target supporting -meabi.\n \n proc check_effective_target_powerpc_eabi_ok { } {"}]}