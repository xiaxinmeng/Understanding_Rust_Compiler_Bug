{"sha": "980002c6e997b5bce8a2be92ef4cd1f893fc82b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgwMDAyYzZlOTk3YjViY2U4YTJiZTkyZWY0Y2QxZjg5M2ZjODJiNQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-10-23T18:05:09Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-10-23T18:05:09Z"}, "message": "fold-const.c (operand_equal_p): Handle matching of vector constructors.\n\n\t* fold-const.c (operand_equal_p): Handle matching of vector\n\tconstructors.\n\t* gcc.dg/tree-ssa/operand-equal-2.c: New testcase.\n\nFrom-SVN: r229264", "tree": {"sha": "eb784efb3d0e852cb6b6e8867f1546084f5fd39a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb784efb3d0e852cb6b6e8867f1546084f5fd39a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/980002c6e997b5bce8a2be92ef4cd1f893fc82b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980002c6e997b5bce8a2be92ef4cd1f893fc82b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/980002c6e997b5bce8a2be92ef4cd1f893fc82b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980002c6e997b5bce8a2be92ef4cd1f893fc82b5/comments", "author": null, "committer": null, "parents": [{"sha": "0682ab79e9968db632a7aae1955b505b6fce0eb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0682ab79e9968db632a7aae1955b505b6fce0eb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0682ab79e9968db632a7aae1955b505b6fce0eb4"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "df246e672ed929baabd4e89454625c8efd69357d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980002c6e997b5bce8a2be92ef4cd1f893fc82b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980002c6e997b5bce8a2be92ef4cd1f893fc82b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=980002c6e997b5bce8a2be92ef4cd1f893fc82b5", "patch": "@@ -1,3 +1,8 @@\n+2015-10-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* fold-const.c (operand_equal_p): Handle matching of vector\n+\tconstructors.\n+\n 2015-10-23  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* doc/install.texi (*-ibm-aix*): Additional information for AIX 7.1."}, {"sha": "018cb03f8995ba3c01ff211a262d11ddf1bdd5f0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980002c6e997b5bce8a2be92ef4cd1f893fc82b5/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980002c6e997b5bce8a2be92ef4cd1f893fc82b5/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=980002c6e997b5bce8a2be92ef4cd1f893fc82b5", "patch": "@@ -3149,6 +3149,56 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t      && DECL_BUILT_IN_CLASS (arg0) == DECL_BUILT_IN_CLASS (arg1)\n \t      && DECL_FUNCTION_CODE (arg0) == DECL_FUNCTION_CODE (arg1));\n \n+    case tcc_exceptional:\n+      if (TREE_CODE (arg0) == CONSTRUCTOR)\n+\t{\n+\t  /* In GIMPLE constructors are used only to build vectors from\n+\t     elements.  Individual elements in the constructor must be\n+\t     indexed in increasing order and form an initial sequence.\n+\n+\t     We make no effort to compare constructors in generic.\n+\t     (see sem_variable::equals in ipa-icf which can do so for\n+\t      constants).  */\n+\t  if (!VECTOR_TYPE_P (TREE_TYPE (arg0))\n+\t      || !VECTOR_TYPE_P (TREE_TYPE (arg1)))\n+\t    return 0;\n+\n+\t  /* Be sure that vectors constructed have the same representation.\n+\t     We only tested element precision and modes to match.\n+\t     Vectors may be BLKmode and thus also check that the number of\n+\t     parts match.  */\n+\t  if (TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg0))\n+\t      != TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg1)))\n+\t    return 0;\n+\n+\t  vec<constructor_elt, va_gc> *v0 = CONSTRUCTOR_ELTS (arg0);\n+\t  vec<constructor_elt, va_gc> *v1 = CONSTRUCTOR_ELTS (arg1);\n+\t  unsigned int len = vec_safe_length (v0);\n+\n+\t  if (len != vec_safe_length (v1))\n+\t    return 0;\n+\n+\t  for (unsigned int i = 0; i < len; i++)\n+\t    {\n+\t      constructor_elt *c0 = &(*v0)[i];\n+\t      constructor_elt *c1 = &(*v1)[i];\n+\n+\t      if (!operand_equal_p (c0->value, c1->value, flags)\n+\t\t  /* In GIMPLE the indexes can be either NULL or matching i.\n+\t\t     Double check this so we won't get false\n+\t\t     positives for GENERIC.  */\n+\t\t  || (c0->index\n+\t\t      && (TREE_CODE (c0->index) != INTEGER_CST \n+\t\t\t  || !compare_tree_int (c0->index, i)))\n+\t\t  || (c1->index\n+\t\t      && (TREE_CODE (c1->index) != INTEGER_CST \n+\t\t\t  || !compare_tree_int (c1->index, i))))\n+\t\treturn 0;\n+\t    }\n+\t  return 1;\n+\t}\n+      return 0;\n+\n     default:\n       return 0;\n     }"}, {"sha": "bedb76a782ab49aeefaa7a47034460f9fcbd000a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980002c6e997b5bce8a2be92ef4cd1f893fc82b5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980002c6e997b5bce8a2be92ef4cd1f893fc82b5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=980002c6e997b5bce8a2be92ef4cd1f893fc82b5", "patch": "@@ -1,3 +1,7 @@\n+2015-10-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/tree-ssa/operand-equal-2.c: New testcase.\n+\n 2015-10-23  Steve Ellcey  <sellcey@imgtec.com>\n \t    Andrew Pinski  <apinski@cavium.com>\n "}, {"sha": "46fa323b4d70a208688d2a257c4d26c798b30221", "filename": "gcc/testsuite/gcc.dg/tree-ssa/operand-equal-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980002c6e997b5bce8a2be92ef4cd1f893fc82b5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Foperand-equal-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980002c6e997b5bce8a2be92ef4cd1f893fc82b5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Foperand-equal-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Foperand-equal-2.c?ref=980002c6e997b5bce8a2be92ef4cd1f893fc82b5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-forwprop1\" } */\n+\n+typedef char __attribute__ ((vector_size (4))) v4qi;\n+\n+v4qi v;\n+void ret(char a)\n+{\n+  v4qi c={a,a,a,a},d={a,a,a,a};\n+  v = (c!=d);\n+}\n+/* { dg-final { scan-tree-dump \"v = . 0, 0, 0, 0 .\" \"forwprop2\"} } */"}]}