{"sha": "b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJiMjYzZTFjZmQ5ZmQyZjA5ODdjM2E5NTI2ZGI0ZjEzYmZkZmRmNg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-06-26T06:36:44Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-06-26T06:36:44Z"}, "message": "defaults.h: Default escape sequences to ASCII.\n\n\t* defaults.h: Default escape sequences to ASCII.\n\t* config/i370/i370.h: Adjust for ASCII default.\n\t* config/1750a/1750a.h: Remove escape sequence definitions.\n\t* config/a29k/a29k.h: Similarly.\n\t* config/alpha/alpha.h: Similarly.\n\t* config/arc/arc.h: Similarly.\n\t* config/arm/arm.h: Similarly.\n\t* config/avr/avr.h: Similarly.\n\t* config/c4x/c4x.h: Similarly.\n\t* config/clipper/clipper.h: Similarly.\n\t* config/convex/convex.h: Similarly.\n\t* config/d30v/d30v.h: Similarly.\n\t* config/dsp16xx/dsp16xx.h: Similarly.\n\t* config/elxsi/elxsi.h: Similarly.\n\t* config/fr30/fr30.h: Similarly.\n\t* config/h8300/h8300.h: Similarly.\n\t* config/i386/i386.h: Similarly.\n\t* config/i860/i860.h: Similarly.\n\t* config/i960/i960.h: Similarly.\n\t* config/ia64/ia64.h: Similarly.\n\t* config/m32r/m32r.h: Similarly.\n\t* config/m68hc11/m68hc11.h: Similarly.\n\t* config/m68k/m68k.h: Similarly.\n\t* config/m88k/m88k.h: Similarly.\n\t* config/mcore/mcore.h: Similarly.\n\t* config/mips/mips.h: Similarly.\n\t* config/mn10200/mn10200.h: Similarly.\n\t* config/mn10300/mn10300.h: Similarly.\n\t* config/ns32k/ns32k.h: Similarly.\n\t* config/pa/pa.h: Similarly.\n\t* config/pdp11/pdp11.h: Similarly.\n\t* config/pj/pj.h: Similarly.\n\t* config/romp/romp.h: Similarly.\n\t* config/rs6000/rs6000.h: Similarly.\n\t* config/sh/sh.h: Similarly.\n\t* config/sparc/sparc.h: Similarly.\n\t* config/v850/v850.h: Similarly.\n\t* config/vax/vax.h: Similarly.\n\t* config/we32k/we32k.h: Similarly.\n\t* doc/tm.texi: Update documentation.\n\nFrom-SVN: r43569", "tree": {"sha": "e0e64dd29c40cb55ba10d7e7b174710f7ee263f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0e64dd29c40cb55ba10d7e7b174710f7ee263f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/comments", "author": null, "committer": null, "parents": [{"sha": "9483461dc9bd390cfbc4053435e3934ae39f46c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9483461dc9bd390cfbc4053435e3934ae39f46c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9483461dc9bd390cfbc4053435e3934ae39f46c6"}], "stats": {"total": 427, "additions": 67, "deletions": 360}, "files": [{"sha": "a6bfbf70088a9ac9e921cf014a403dca4c3c6946", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -1,3 +1,46 @@\n+2001-06-26  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* defaults.h: Default escape sequences to ASCII.\n+\t* config/i370/i370.h: Adjust for ASCII default.\n+\t* config/1750a/1750a.h: Remove escape sequence definitions.\n+\t* config/a29k/a29k.h: Similarly.\n+\t* config/alpha/alpha.h: Similarly.\n+\t* config/arc/arc.h: Similarly.\n+\t* config/arm/arm.h: Similarly.\n+\t* config/avr/avr.h: Similarly.\n+\t* config/c4x/c4x.h: Similarly.\n+\t* config/clipper/clipper.h: Similarly.\n+\t* config/convex/convex.h: Similarly.\n+\t* config/d30v/d30v.h: Similarly.\n+\t* config/dsp16xx/dsp16xx.h: Similarly.\n+\t* config/elxsi/elxsi.h: Similarly.\n+\t* config/fr30/fr30.h: Similarly.\n+\t* config/h8300/h8300.h: Similarly.\n+\t* config/i386/i386.h: Similarly.\n+\t* config/i860/i860.h: Similarly.\n+\t* config/i960/i960.h: Similarly.\n+\t* config/ia64/ia64.h: Similarly.\n+\t* config/m32r/m32r.h: Similarly.\n+\t* config/m68hc11/m68hc11.h: Similarly.\n+\t* config/m68k/m68k.h: Similarly.\n+\t* config/m88k/m88k.h: Similarly.\n+\t* config/mcore/mcore.h: Similarly.\n+\t* config/mips/mips.h: Similarly.\n+\t* config/mn10200/mn10200.h: Similarly.\n+\t* config/mn10300/mn10300.h: Similarly.\n+\t* config/ns32k/ns32k.h: Similarly.\n+\t* config/pa/pa.h: Similarly.\n+\t* config/pdp11/pdp11.h: Similarly.\n+\t* config/pj/pj.h: Similarly.\n+\t* config/romp/romp.h: Similarly.\n+\t* config/rs6000/rs6000.h: Similarly.\n+\t* config/sh/sh.h: Similarly.\n+\t* config/sparc/sparc.h: Similarly.\n+\t* config/v850/v850.h: Similarly.\n+\t* config/vax/vax.h: Similarly.\n+\t* config/we32k/we32k.h: Similarly.\n+\t* doc/tm.texi: Update documentation.\n+\n 2001-06-26  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n \t* diagnostic.c (digit_buffer): Remove as global.  Move to..."}, {"sha": "c410378f7406e1858abb46677090eab14256b496", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -1314,16 +1314,6 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n #define ASM_OPEN_PAREN \"(\"\n #define ASM_CLOSE_PAREN \")\"\n \n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL\t007\n-#define TARGET_BS\t010\n-#define TARGET_TAB\t011\n-#define TARGET_NEWLINE\t012\n-#define TARGET_VT\t013\n-#define TARGET_FF\t014\n-#define TARGET_CR\t015\n-\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null."}, {"sha": "5cf9906e2ac687a51462841f9db860787a5a570b", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -1595,15 +1595,6 @@ extern int a29k_debug_reg_map[];\n #define ASM_OPEN_PAREN \"(\"\n #define ASM_CLOSE_PAREN \")\"\n \n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null.  */"}, {"sha": "f11fa184db31c466b7cf937f076fb7cea90f8c8c", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -2236,15 +2236,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #endif\n \f\n \n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null.  */"}, {"sha": "9026cf813fc058b7846d46ab595d274d130883eb", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -312,15 +312,6 @@ if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n #define PTRDIFF_TYPE \"long int\"\n #define WCHAR_TYPE \"short unsigned int\"\n #define WCHAR_TYPE_SIZE 16\n-\n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n \f\n /* Standard register usage.  */\n "}, {"sha": "2057ae67c2f6a8ba0894cfbc98b82e2fef68fd4a", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -2721,15 +2721,6 @@ extern int making_const_table;\n                  (LOG), (MAX_SKIP));\t\t\t\t\\\n     }\n #endif\n-\n-/* Target characters.  */\n-#define TARGET_BELL\t007\n-#define TARGET_BS\t010\n-#define TARGET_TAB\t011\n-#define TARGET_NEWLINE\t012\n-#define TARGET_VT\t013\n-#define TARGET_FF\t014\n-#define TARGET_CR\t015\n \f\n /* Only perform branch elimination (by making instructions conditional) if\n    we're optimising.  Otherwise it's of no use anyway.  */"}, {"sha": "79c868928e655cbdd689d25cb780a382330d797c", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -2884,17 +2884,6 @@ valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n    addresses.  Thus sorting to put the smallest address first allows\n    the most combinations to be found.  */\n \n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n-\n-\n-\n #define TRAMPOLINE_TEMPLATE(FILE) \\\n   internal_error (\"Trampolines not supported\\n\")\n "}, {"sha": "49b903ee7d92c0b69938632dbea474d859f1212e", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -2514,17 +2514,6 @@ do { fprintf (asm_out_file, \"\\t.sdef\\t\");\t\t\\\n \t      \"%s\\t.val\\t.%s\\t.scl\\t-1%s\\t.endef\\n\",\t\\\n \t      SDB_DELIM, SDB_DELIM, SDB_DELIM); } while (0)\n \n-\n-/* Define results of standard character escape sequences.  */\n-\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n-\n /* This is the kind of divide that is easiest to do in the general case.  */\n \n #define EASY_DIV_EXPR TRUNC_DIV_EXPR"}, {"sha": "f411fe3c33c67927ff30f19111ddeefbd5903026", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -1079,15 +1079,6 @@ do\t\t\t\t\t\t\t\t\t      \\\n #define ASM_OPEN_PAREN \"(\"\n #define ASM_CLOSE_PAREN \")\"\n \n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n-\n /* Print an instruction operand X on file FILE.\n    CODE is the code from the %-spec that requested printing this operand;\n    if `%z3' was used to print operand 3, then CODE is 'z'."}, {"sha": "beed9a3feb2d807d10cec9a1f59d9cd14a7af494", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -1449,15 +1449,6 @@ enum reg_class {\n #define ASM_OPEN_PAREN \"(\"\n #define ASM_CLOSE_PAREN \")\"\n \n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n-\n /* Print an instruction operand X on file FILE.\n    CODE is the code from the %-spec that requested printing this operand;\n    if `%z3' was used to print operand 3, then CODE is 'z'. */"}, {"sha": "3efa6d70fcedcf0fd112ddf377e67d62a024842c", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -1021,22 +1021,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    selector because this enables the linker to eliminate duplicate selectors.  */\n /* #define OBJC_SELECTORS_WITHOUT_LABELS */\n \n-/* A C constant expression for the integer value for escape sequence\n-   `\\a'.  */\n-#define TARGET_BELL 0x7\n-\n-/* C constant expressions for the integer values for escape sequences\n-   `\\b', `\\t' and `\\n'.  */\n-#define TARGET_BS\t0x8\n-#define TARGET_TAB\t0x9\n-#define TARGET_NEWLINE\t0xa\n-\n-/* C constant expressions for the integer values for escape sequences\n-   `\\v', `\\f' and `\\r'.  */\n-#define TARGET_VT\t0xb\n-#define TARGET_FF\t0xc\n-#define TARGET_CR\t0xd\n-\n \f\n /* D30V register layout.  */\n "}, {"sha": "d5aa7c68b452a0e17234e34f9715537e3d4d3426", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -383,15 +383,6 @@ while (0)\n    result of subtracting two pointers */\n \n #define PTRDIFF_TYPE \"long int\"\n-\n-#define TARGET_BELL     '\\a'\n-#define TARGET_BS       '\\b'\n-#define TARGET_TAB      '\\t'\n-#define TARGET_NEWLINE  '\\n'\n-#define TARGET_VT       '\\v'\n-#define TARGET_FF       '\\f'\n-#define TARGET_CR       '\\r'\n-\n \f\n /* REGISTER USAGE.  */\n "}, {"sha": "332172c361ba8bb3c7acc11bb1735a4abf9b9652", "filename": "gcc/config/elxsi/elxsi.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Felxsi%2Felxsi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Felxsi%2Felxsi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -921,15 +921,6 @@ enum reg_class { NO_REGS, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n #define ASM_OPEN_PAREN \"(\"\n #define ASM_CLOSE_PAREN \")\"\n \n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n-\n /* Print an instruction operand X on file FILE.\n    CODE is the code from the %-spec that requested printing this operand;\n    if `%z3' was used to print operand 3, then CODE is 'z'.  */"}, {"sha": "57d3f967a86c794eb96438bb682943cac4540f21", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -341,14 +341,6 @@ extern int target_flags;\n    default with the options `-fsigned-char' and `-funsigned-char'.  */\n #define DEFAULT_SIGNED_CHAR 1\n \n-#define TARGET_BELL     0x7\t/*  '\\a'  */\n-#define TARGET_BS\t0x8\t/*  '\\b'  */\n-#define TARGET_TAB\t0x9\t/*  '\\t'  */\n-#define TARGET_NEWLINE\t0xa\t/*  '\\n'  */\n-#define TARGET_VT\t0xb\t/*  '\\v'  */\n-#define TARGET_FF\t0xc\t/*  '\\f'  */\n-#define TARGET_CR\t0xd\t/*  '\\r'  */\n-\n /*}}}*/ \f\n /*{{{  REGISTER BASICS.  */ \n "}, {"sha": "d4d3fc1547e43ffeb0184f4d3e445265a855059c", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -1412,15 +1412,6 @@ readonly_data ()\t\t\t\t\t\t\t\\\n #define ASM_OPEN_PAREN \"(\"\n #define ASM_CLOSE_PAREN \")\"\n \n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n-\n /* Print an instruction operand X on file FILE.\n    Look in h8300.c for details.  */\n "}, {"sha": "71e95c44dd1e88a4b00bf50735f9f618ff0f1483", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -1042,7 +1042,8 @@ enum reg_class\n #define ASM_OPEN_PAREN \"(\"\n #define ASM_CLOSE_PAREN \")\"\n \n-/* Define results of standard character escape sequences.  */\n+/* Define standard character escape sequences for non-ASCII targets\n+   only.  */\n \n #ifdef TARGET_EBCDIC\n #define TARGET_ESC\t39\n@@ -1053,14 +1054,6 @@ enum reg_class\n #define TARGET_VT\t11\n #define TARGET_FF\t12\n #define TARGET_CR\t13\n-#else \n-#define TARGET_BELL\t007\n-#define TARGET_BS\t010\n-#define TARGET_TAB\t011\n-#define TARGET_NEWLINE\t012\n-#define TARGET_VT\t013\n-#define TARGET_FF\t014\n-#define TARGET_CR\t015\n #endif\n \n /* ======================================================== */"}, {"sha": "10556e63b94dcfef5a3e802dcf70ccaf858fa6b5", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -2955,15 +2955,6 @@ do { long l;\t\t\t\t\t\t\\\n \n #define ASM_OPEN_PAREN \"\"\n #define ASM_CLOSE_PAREN \"\"\n-\n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n \f\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified."}, {"sha": "510a863b033ebad4ac235ea32fb725362927855a", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -1207,15 +1207,6 @@ do { ASM_OUTPUT_ALIGN ((FILE), 2);\t\t\t\t\t\\\n #define ASM_OPEN_PAREN \"(\"\n #define ASM_CLOSE_PAREN \")\"\n \n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null."}, {"sha": "8a1d0beed50088e9d62ef9ef1a01606e896337ad", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -1536,15 +1536,6 @@ extern struct rtx_def *i960_compare_op0, *i960_compare_op1;\n \n #define ASM_OPEN_PAREN \"(\"\n #define ASM_CLOSE_PAREN \")\"\n-\n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL\t007\n-#define TARGET_BS\t010\n-#define TARGET_TAB\t011\n-#define TARGET_NEWLINE\t012\n-#define TARGET_VT\t013\n-#define TARGET_FF\t014\n-#define TARGET_CR\t015\n \f\n /* Output assembler code to FILE to initialize this source file's\n    basic block profiling info, if that has not already been done.  */"}, {"sha": "20c40849affcc175e31ef369fc4915707210e905", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -506,22 +506,6 @@ while (0)\n    at run-time.  This is used in `cpp'.  */\n /* #define MAX_WCHAR_TYPE_SIZE */\n \n-/* A C constant expression for the integer value for escape sequence\n-   `\\a'.  */\n-#define TARGET_BELL 0x7\n-\n-/* C constant expressions for the integer values for escape sequences\n-   `\\b', `\\t' and `\\n'.  */\n-#define TARGET_BS\t0x8\n-#define TARGET_TAB\t0x9\n-#define TARGET_NEWLINE\t0xa\n-\n-/* C constant expressions for the integer values for escape sequences\n-   `\\v', `\\f' and `\\r'.  */\n-#define TARGET_VT\t0xb\n-#define TARGET_FF\t0xc\n-#define TARGET_CR\t0xd\n-\n \f\n /* Register Basics */\n "}, {"sha": "238160592e8f6faabdd36e5c459fc38b18ae5b48", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -484,15 +484,6 @@ extern enum m32r_sdata m32r_sdata;\n #define PTRDIFF_TYPE \"long int\"\n #define WCHAR_TYPE \"short unsigned int\"\n #define WCHAR_TYPE_SIZE 16\n-\n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n \f\n /* Standard register usage.  */\n "}, {"sha": "0e9a65b509407cfcbc0e5d9bfe33fa199f81fc8d", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -345,15 +345,6 @@ extern struct processor_costs *m68hc11_cost;\n    where TARGET_SHORT is not available.  */\n #define WCHAR_TYPE              \"short int\"\n #define WCHAR_TYPE_SIZE         16\n-\n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL\t\t007\n-#define TARGET_BS\t\t010\n-#define TARGET_TAB\t\t011\n-#define TARGET_NEWLINE\t\t012\n-#define TARGET_VT\t\t013\n-#define TARGET_FF\t\t014\n-#define TARGET_CR\t\t015\n \f\n \n /* Standard register usage.  */"}, {"sha": "133e16ff297f888c563b9c31ed4fab6be03ebf9b", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -2039,15 +2039,6 @@ do { long l;\t\t\t\t\t\t\\\n #define ASM_OPEN_PAREN \"(\"\n #define ASM_CLOSE_PAREN \")\"\n \n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n-\n /* Output a float value (represented as a C double) as an immediate operand.\n    This macro is a 68k-specific macro.  */\n "}, {"sha": "73015c16734e60cbcd1ba8bb95611d087b27d990", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -2238,15 +2238,6 @@ do {\t\t\t\t\t\t\t\t\t \\\n    in assembler code.  */\n #define ASM_OPEN_PAREN \"(\"\n #define ASM_CLOSE_PAREN \")\"\n-\n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n \f\n /* Macros to deal with OCS debug information */\n "}, {"sha": "ce1234ac393cdd65270c97ea75ab4d9ddbf3b78d", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -1404,15 +1404,6 @@ extern long mcore_current_compilation_timestamp;\n #define ASM_OPEN_PAREN \"(\"\n #define ASM_CLOSE_PAREN \")\"\n \n-/* Target characters.  */\n-#define TARGET_BELL\t007\n-#define TARGET_BS\t010\n-#define TARGET_TAB\t011\n-#define TARGET_NEWLINE\t012\n-#define TARGET_VT\t013\n-#define TARGET_FF\t014\n-#define TARGET_CR\t015\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null.  */"}, {"sha": "b39f8f258f163a8bc53d4870e2c8a9a2a54b6fe7", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -3996,15 +3996,6 @@ while (0)\n   { \"$fp\",\t30 + GP_REG_FIRST }\t\t\t\t\t\\\n }\n \n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL\t007\n-#define TARGET_BS\t010\n-#define TARGET_TAB\t011\n-#define TARGET_NEWLINE\t012\n-#define TARGET_VT\t013\n-#define TARGET_FF\t014\n-#define TARGET_CR\t015\n-\n /* A C compound statement to output to stdio stream STREAM the\n    assembler syntax for an instruction operand X.  X is an RTL\n    expression."}, {"sha": "20639b8ea24ccf71402879cc335fcdafa9b26a02", "filename": "gcc/config/mn10200/mn10200.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -133,15 +133,6 @@ extern int target_flags;\n \n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 0\n-\n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n \f\n /* Standard register usage.  */\n "}, {"sha": "55a427ad929f2f16032b84589f7116a97d4f6ce7", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -130,15 +130,6 @@ extern int target_flags;\n \n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 0\n-\n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n \f\n /* Standard register usage.  */\n "}, {"sha": "9a377b5a9016dd7b620087db95d4835863ba4ada", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -1661,15 +1661,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OPEN_PAREN \"(\"\n #define ASM_CLOSE_PAREN \")\"\n \n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n-\n /* Print an instruction operand X on file FILE.\n    CODE is the code from the %-spec that requested printing this operand;\n    if `%z3' was used to print operand 3, then CODE is 'z'. */"}, {"sha": "d006fbeb20ee835d8aa9c252ea72ad643f67fd3d", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -1921,15 +1921,6 @@ while (0)\n /* All HP assemblers use \"!\" to separate logical lines.  */\n #define IS_ASM_LOGICAL_LINE_SEPARATOR(C) ((C) == '!')\n \n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n-\n #define PRINT_OPERAND_PUNCT_VALID_P(CHAR) \\\n   ((CHAR) == '@' || (CHAR) == '#' || (CHAR) == '*' || (CHAR) == '^')\n "}, {"sha": "58ce77ff6b383e5422ffda458fc18a5379d019f3", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -1202,15 +1202,6 @@ fprintf (FILE, \"$help$: . = .+8 ; space for tmp moves!\\n\")\t\\\n #define ASM_OPEN_PAREN \"[\"\n #define ASM_CLOSE_PAREN \"]\"\n \n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null."}, {"sha": "8bd28f1c575d7070823f6fd30384a805952d55f6", "filename": "gcc/config/pj/pj.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fpj%2Fpj.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fpj%2Fpj.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -1246,15 +1246,6 @@ do { char dstr[30];                                     \\\n /* We don't want the default switch handling.  */\n #undef ASM_OUTPUT_BEFORE_CASE_LABEL\n #undef ASM_OUTPUT_CASE_LABEL\n-\n-/* Target characters.  */\n-#define TARGET_BELL     007\n-#define TARGET_BS       010\n-#define TARGET_TAB      011\n-#define TARGET_NEWLINE  012\n-#define TARGET_VT       013\n-#define TARGET_FF       014\n-#define TARGET_CR       015\n \f\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or star or 0 if no letter was specified."}, {"sha": "ce9fcd7de8c0d4bfa7a3d69841d6081b45f85384", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -1547,15 +1547,6 @@ struct rt_cargs {int gregs, fregs; };\n #define ASM_OPEN_PAREN \"(\"\n #define ASM_CLOSE_PAREN \")\"\n \n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null.  */"}, {"sha": "230cdc8c941b469412300ead5aef4ff523c6fd9c", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -2639,15 +2639,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define EH_RETURN_DATA_REGNO(N) ((N) < 4 ? (N) + 3 : INVALID_REGNUM)\n #define EH_RETURN_STACKADJ_RTX  gen_rtx_REG (Pmode, 10)\n \n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null.  */"}, {"sha": "0707977bcf9363caaf4661688944c058199c4476", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -2170,15 +2170,6 @@ do { char dstr[30];\t\t\t\t\t\\\n /* The assembler's parentheses characters.  */\n #define ASM_OPEN_PAREN \"(\"\n #define ASM_CLOSE_PAREN \")\"\n-\n-/* Target characters.  */\n-#define TARGET_BELL\t007\n-#define TARGET_BS\t010\n-#define TARGET_TAB\t011\n-#define TARGET_NEWLINE\t012\n-#define TARGET_VT\t013\n-#define TARGET_FF\t014\n-#define TARGET_CR\t015\n \f\n /* A C statement to be executed just prior to the output of\n    assembler code for INSN, to modify the extracted operands so"}, {"sha": "ac0bcb0415a4361060c5ea23ac657e3ca7c7c96d", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -3262,15 +3262,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OPEN_PAREN \"(\"\n #define ASM_CLOSE_PAREN \")\"\n \n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n-\n #define PRINT_OPERAND_PUNCT_VALID_P(CHAR) \\\n   ((CHAR) == '#' || (CHAR) == '*' || (CHAR) == '^' || (CHAR) == '(' || (CHAR) == '_')\n "}, {"sha": "9b348c7aab49c5c40afaa916281f6c69a080d183", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -304,15 +304,6 @@ extern struct small_memory_info small_memory[(int)SMALL_MEMORY_max];\n \n    On the NEC V850, loads do sign extension, so make this default. */\n #define DEFAULT_SIGNED_CHAR 1\n-\n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n \f\n /* Standard register usage.  */\n "}, {"sha": "4cbb1041eb2dfe860e81d5fcab017eb3235848db", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -1265,15 +1265,6 @@ do {\t\t\t\t\t\t\\\n #define ASM_OPEN_PAREN \"(\"\n #define ASM_CLOSE_PAREN \")\"\n \n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n-\n /* Print an instruction operand X on file FILE.\n    CODE is the code from the %-spec that requested printing this operand;\n    if `%z3' was used to print operand 3, then CODE is 'z'."}, {"sha": "e448cabe36f527a90b2ce30ecd7f640e97c70e1a", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -965,15 +965,6 @@ do {\t\t\t\t\t\t\t\\\n #define ASM_OPEN_PAREN \"(\"\n #define ASM_CLOSE_PAREN \")\"\n \n-/* Define results of standard character escape sequences.  */\n-#define TARGET_BELL 007\n-#define TARGET_BS 010\n-#define TARGET_TAB 011\n-#define TARGET_NEWLINE 012\n-#define TARGET_VT 013\n-#define TARGET_FF 014\n-#define TARGET_CR 015\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null. */"}, {"sha": "75c42253fdfe601a69bb4f19b7e5d63897b09301", "filename": "gcc/defaults.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -23,6 +23,17 @@ Boston, MA 02111-1307, USA.  */\n #ifndef GCC_DEFAULTS_H\n #define GCC_DEFAULTS_H\n \n+/* Define default standard character escape sequences.  */\n+#ifndef TARGET_BELL\n+#  define TARGET_BELL 007\n+#  define TARGET_BS 010\n+#  define TARGET_TAB 011\n+#  define TARGET_NEWLINE 012\n+#  define TARGET_VT 013\n+#  define TARGET_FF 014\n+#  define TARGET_CR 015\n+#endif\n+\n /* Store in OUTPUT a string (made with alloca) containing\n    an assembler-name for a local static variable or function named NAME.\n    LABELNO is an integer which is different for each call.  */"}, {"sha": "1b1c5663e0b20e13d987bbfa15388f5e3a5ad6d9", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "patch": "@@ -25,6 +25,7 @@ includes @file{tm.h} and most compiler source files include\n * Per-Function Data::   Defining data structures for per-function information.\n * Storage Layout::      Defining sizes and alignments of data.\n * Type Layout::         Defining sizes and properties of basic user data types.\n+* Escape Sequences::    Defining the value of target character escape sequences\n * Registers::           Naming and describing the hardware registers.\n * Register Classes::    Defining the classes of hardware registers.\n * Stack and Calling::   Defining which way the stack grows and by how much.\n@@ -1515,7 +1516,17 @@ In general, you should not have to define this macro.  On architectures\n in which function addresses are always even, according to\n @code{FUNCTION_BOUNDARY}, GCC will automatically define this macro to\n @code{ptrmemfunc_vbit_in_pfn}.\n+@end table\n+\n+@node Escape Sequences\n+@section Target Character Escape Sequences\n+@cindex escape sequences\n \n+By default, GCC assumes that the C character escape sequences take on\n+their ASCII values for the target.  If this is not correct, you must\n+explicitly define all of the macros below.\n+\n+@table @code\n @findex TARGET_BELL\n @item TARGET_BELL\n A C constant expression for the integer value for escape sequence"}]}