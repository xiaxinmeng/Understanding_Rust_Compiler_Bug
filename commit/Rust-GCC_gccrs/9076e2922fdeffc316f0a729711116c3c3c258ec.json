{"sha": "9076e2922fdeffc316f0a729711116c3c3c258ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA3NmUyOTIyZmRlZmZjMzE2ZjBhNzI5NzExMTE2YzNjM2MyNThlYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2000-07-28T06:05:11Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-07-28T06:05:11Z"}, "message": "decl.c (duplicate_decls): If common_type produces a non-typedef type for a typedef, just use the old type.\n\n        * decl.c (duplicate_decls): If common_type produces a non-typedef\n        type for a typedef, just use the old type.\n\n        * pt.c (for_each_template_parm_r, case RECORD_TYPE): Use\n        TYPE_PTRMEMFUNC_P.\n        * cp-tree.h (TYPE_TEMPLATE_INFO): Check for TYPE_LANG_SPECIFIC.\n\nFrom-SVN: r35311", "tree": {"sha": "b0fff77e7eb5eced448cc9ef37a902ac7eda5c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0fff77e7eb5eced448cc9ef37a902ac7eda5c52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9076e2922fdeffc316f0a729711116c3c3c258ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9076e2922fdeffc316f0a729711116c3c3c258ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9076e2922fdeffc316f0a729711116c3c3c258ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9076e2922fdeffc316f0a729711116c3c3c258ec/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb41a1065985ab534e1c254839fc42d0fe9235d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb41a1065985ab534e1c254839fc42d0fe9235d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb41a1065985ab534e1c254839fc42d0fe9235d0"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "d4604c49d74582d25ebf9213cd13fc848d3c627e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9076e2922fdeffc316f0a729711116c3c3c258ec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9076e2922fdeffc316f0a729711116c3c3c258ec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9076e2922fdeffc316f0a729711116c3c3c258ec", "patch": "@@ -1,3 +1,8 @@\n+2000-07-27  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (duplicate_decls): If common_type produces a non-typedef\n+\ttype for a typedef, just use the old type.\n+\n 2000-07-27  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (function_depth): Declare.\n@@ -12,8 +17,9 @@\n \n 2000-07-27  Jason Merrill  <jason@redhat.com>\n \n-\t* typeck.c (common_type): If we're just returning one of our\n-\targuments, don't strip typedef types.\n+\t* pt.c (for_each_template_parm_r, case RECORD_TYPE): Use\n+\tTYPE_PTRMEMFUNC_P.\n+\t* cp-tree.h (TYPE_TEMPLATE_INFO): Check for TYPE_LANG_SPECIFIC.\n \n 2000-07-26  Mark Mitchell  <mark@codesourcery.com>\n "}, {"sha": "56ec82d26806037101f361d617aa8e21c20e225c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9076e2922fdeffc316f0a729711116c3c3c258ec/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9076e2922fdeffc316f0a729711116c3c3c258ec/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9076e2922fdeffc316f0a729711116c3c3c258ec", "patch": "@@ -2309,10 +2309,12 @@ struct lang_decl\n /* Template information for an ENUMERAL_, RECORD_, or UNION_TYPE.  */\n #define TYPE_TEMPLATE_INFO(NODE)\t\t\t\\\n   (TREE_CODE (NODE) == ENUMERAL_TYPE\t\t\t\\\n-   ? ENUM_TEMPLATE_INFO (NODE) : \t\t\t\\\n+   ? ENUM_TEMPLATE_INFO (NODE) :\t\t\t\\\n    (TREE_CODE (NODE) == TEMPLATE_TEMPLATE_PARM\t\t\\\n-    ? TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (NODE)\t\\\n-    : CLASSTYPE_TEMPLATE_INFO (NODE)))\n+    ? TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (NODE) :\t\\\n+    (TYPE_LANG_SPECIFIC (NODE)\t\t\t\t\\\n+     ? CLASSTYPE_TEMPLATE_INFO (NODE)\t\t\t\\\n+     : NULL_TREE)))\n \n /* Set the template information for an ENUMERAL_, RECORD_, or\n    UNION_TYPE to VAL.  */"}, {"sha": "020dd303b56f8b13c2c7aec8c1708090c5a30b57", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9076e2922fdeffc316f0a729711116c3c3c258ec/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9076e2922fdeffc316f0a729711116c3c3c258ec/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9076e2922fdeffc316f0a729711116c3c3c258ec", "patch": "@@ -3526,6 +3526,11 @@ duplicate_decls (newdecl, olddecl)\n       /* Merge the data types specified in the two decls.  */\n       newtype = common_type (TREE_TYPE (newdecl), TREE_TYPE (olddecl));\n \n+      /* If common_type produces a non-typedef type, just use the old type.  */\n+      if (TREE_CODE (newdecl) == TYPE_DECL\n+\t  && newtype == DECL_ORIGINAL_TYPE (newdecl))\n+\tnewtype = oldtype;\n+\n       if (TREE_CODE (newdecl) == VAR_DECL)\n \tDECL_THIS_EXTERN (newdecl) |= DECL_THIS_EXTERN (olddecl);\n       /* Do this after calling `common_type' so that default"}, {"sha": "ecabed9668c5a7d355c864d75c0f13fe90841dfb", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9076e2922fdeffc316f0a729711116c3c3c258ec/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9076e2922fdeffc316f0a729711116c3c3c258ec/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9076e2922fdeffc316f0a729711116c3c3c258ec", "patch": "@@ -4133,7 +4133,7 @@ for_each_template_parm_r (tp, walk_subtrees, d)\n   switch (TREE_CODE (t))\n     {\n     case RECORD_TYPE:\n-      if (TYPE_PTRMEMFUNC_FLAG (t))\n+      if (TYPE_PTRMEMFUNC_P (t))\n \tbreak;\n       /* Fall through.  */\n "}, {"sha": "e7f8d2f81ec4aa75c8ca8e4da9d1e6f9fbb34825", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9076e2922fdeffc316f0a729711116c3c3c258ec/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9076e2922fdeffc316f0a729711116c3c3c258ec/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9076e2922fdeffc316f0a729711116c3c3c258ec", "patch": "@@ -521,27 +521,26 @@ composite_pointer_type (t1, t2, arg1, arg2, location)\n    converted to integer types.  */\n \n tree\n-common_type (orig_t1, orig_t2)\n-     tree orig_t1, orig_t2;\n+common_type (t1, t2)\n+     tree t1, t2;\n {\n   register enum tree_code code1;\n   register enum tree_code code2;\n   tree attributes;\n-  tree t1, t2;\n \n   /* Save time if the two types are the same.  */\n-  if (orig_t1 == orig_t2)\n-    return orig_t1;\n-  t1 = original_type (orig_t1);\n-  t2 = original_type (orig_t2);\n   if (t1 == t2)\n-    return orig_t1;\n+    return t1;\n+  t1 = original_type (t1);\n+  t2 = original_type (t2);\n+  if (t1 == t2)\n+    return t1;\n \n   /* If one type is nonsense, use the other.  */\n   if (t1 == error_mark_node)\n-    return orig_t2;\n+    return t2;\n   if (t2 == error_mark_node)\n-    return orig_t1;\n+    return t1;\n \n   if ((ARITHMETIC_TYPE_P (t1) || TREE_CODE (t1) == ENUMERAL_TYPE)\n       && (ARITHMETIC_TYPE_P (t2) || TREE_CODE (t2) == ENUMERAL_TYPE))"}]}