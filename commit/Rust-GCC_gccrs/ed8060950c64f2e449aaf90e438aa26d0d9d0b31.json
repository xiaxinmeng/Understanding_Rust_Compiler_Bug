{"sha": "ed8060950c64f2e449aaf90e438aa26d0d9d0b31", "node_id": "C_kwDOANBUbNoAKGVkODA2MDk1MGM2NGYyZTQ0OWFhZjkwZTQzOGFhMjZkMGQ5ZDBiMzE", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-01-06T00:33:16Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-01-06T19:35:11Z"}, "message": "x86: Rename -harden-sls=indirect-branch to -harden-sls=indirect-jmp\n\nIndirect branch also includes indirect call instructions.  Rename\n-harden-sls=indirect-branch to -harden-sls=indirect-jmp to match its\nintended behavior.\n\n\tPR target/102952\n\t* config/i386/i386-opts.h (harden_sls): Replace\n\tharden_sls_indirect_branch with harden_sls_indirect_jmp.\n\t* config/i386/i386.c (ix86_output_jmp_thunk_or_indirect):\n\tLikewise.\n\t(ix86_output_indirect_jmp): Likewise.\n\t(ix86_output_call_insn): Likewise.\n\t* config/i386/i386.opt: Replace indirect-branch with\n\tindirect-jmp.  Replace harden_sls_indirect_branch with\n\tharden_sls_indirect_jmp.\n\t* doc/invoke.texi (-harden-sls=): Replace indirect-branch with\n\tindirect-jmp.", "tree": {"sha": "56945066d829dbb2d69c83d0829ef056375e8e65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56945066d829dbb2d69c83d0829ef056375e8e65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed8060950c64f2e449aaf90e438aa26d0d9d0b31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed8060950c64f2e449aaf90e438aa26d0d9d0b31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed8060950c64f2e449aaf90e438aa26d0d9d0b31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed8060950c64f2e449aaf90e438aa26d0d9d0b31/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be129ca481c2e9c06ba40957b955a5c5765b7c87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be129ca481c2e9c06ba40957b955a5c5765b7c87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be129ca481c2e9c06ba40957b955a5c5765b7c87"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "8f71e89fa9ab9af99e5ff02c5f630382656401dd", "filename": "gcc/config/i386/i386-opts.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8060950c64f2e449aaf90e438aa26d0d9d0b31/gcc%2Fconfig%2Fi386%2Fi386-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8060950c64f2e449aaf90e438aa26d0d9d0b31/gcc%2Fconfig%2Fi386%2Fi386-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-opts.h?ref=ed8060950c64f2e449aaf90e438aa26d0d9d0b31", "patch": "@@ -124,8 +124,8 @@ enum instrument_return {\n enum harden_sls {\n   harden_sls_none = 0,\n   harden_sls_return = 1 << 0,\n-  harden_sls_indirect_branch = 1 << 1,\n-  harden_sls_all = harden_sls_return | harden_sls_indirect_branch\n+  harden_sls_indirect_jmp = 1 << 1,\n+  harden_sls_all = harden_sls_return | harden_sls_indirect_jmp\n };\n \n #endif"}, {"sha": "736577585f76635510ed8c006b2585eacfb62cbe", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8060950c64f2e449aaf90e438aa26d0d9d0b31/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8060950c64f2e449aaf90e438aa26d0d9d0b31/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ed8060950c64f2e449aaf90e438aa26d0d9d0b31", "patch": "@@ -16052,7 +16052,7 @@ ix86_output_jmp_thunk_or_indirect (const char *thunk_name, const int regno)\n       fprintf (asm_out_file, \"\\tjmp\\t\");\n       assemble_name (asm_out_file, thunk_name);\n       putc ('\\n', asm_out_file);\n-      if ((ix86_harden_sls & harden_sls_indirect_branch))\n+      if ((ix86_harden_sls & harden_sls_indirect_jmp))\n \tfputs (\"\\tint3\\n\", asm_out_file);\n     }\n   else\n@@ -16278,7 +16278,7 @@ ix86_output_indirect_jmp (rtx call_op)\n     }\n   else\n     output_asm_insn (\"%!jmp\\t%A0\", &call_op);\n-  return (ix86_harden_sls & harden_sls_indirect_branch) ? \"int3\" : \"\";\n+  return (ix86_harden_sls & harden_sls_indirect_jmp) ? \"int3\" : \"\";\n }\n \n /* Output return instrumentation for current function if needed.  */\n@@ -16445,7 +16445,7 @@ ix86_output_call_insn (rtx_insn *insn, rtx call_op)\n \t{\n \t  output_asm_insn (xasm, &call_op);\n \t  if (!direct_p\n-\t      && (ix86_harden_sls & harden_sls_indirect_branch))\n+\t      && (ix86_harden_sls & harden_sls_indirect_jmp))\n \t    return \"int3\";\n \t}\n       return \"\";"}, {"sha": "eb829d13d407dd85908eb5e81d797175d8badd04", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8060950c64f2e449aaf90e438aa26d0d9d0b31/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8060950c64f2e449aaf90e438aa26d0d9d0b31/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=ed8060950c64f2e449aaf90e438aa26d0d9d0b31", "patch": "@@ -1144,7 +1144,7 @@ EnumValue\n Enum(harden_sls) String(return) Value(harden_sls_return)\n \n EnumValue\n-Enum(harden_sls) String(indirect-branch) Value(harden_sls_indirect_branch)\n+Enum(harden_sls) String(indirect-jmp) Value(harden_sls_indirect_jmp)\n \n EnumValue\n Enum(harden_sls) String(all) Value(harden_sls_all)"}, {"sha": "6b84228f14284d350cb0918e5cf2e6d24770e4cd", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8060950c64f2e449aaf90e438aa26d0d9d0b31/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8060950c64f2e449aaf90e438aa26d0d9d0b31/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ed8060950c64f2e449aaf90e438aa26d0d9d0b31", "patch": "@@ -32507,8 +32507,8 @@ Force indirect call and jump via register.\n @opindex mharden-sls\n Generate code to mitigate against straight line speculation (SLS) with\n @var{choice}.  The default is @samp{none} which disables all SLS\n-hardening.  @samp{return} enables SLS hardening for function return.\n-@samp{indirect-branch} enables SLS hardening for indirect branch.\n+hardening.  @samp{return} enables SLS hardening for function returns.\n+@samp{indirect-jmp} enables SLS hardening for indirect jumps.\n @samp{all} enables all SLS hardening.\n \n @item -mindirect-branch-cs-prefix"}]}