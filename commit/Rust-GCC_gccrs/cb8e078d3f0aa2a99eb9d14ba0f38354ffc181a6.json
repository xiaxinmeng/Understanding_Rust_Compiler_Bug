{"sha": "cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I4ZTA3OGQzZjBhYTJhOTllYjlkMTRiYTBmMzgzNTRmZmMxODFhNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-11-15T19:02:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-11-15T19:02:54Z"}, "message": "re PR middle-end/23848 (stack deallocation can be more efficient)\n\n\tPR middle-end/23848\n\t* tree-ssa-ccp.c (optimize_stack_restore): New function.\n\t(execute_fold_all_builtins): Call optimize_stack_restore for\n\tBUILT_IN_STACK_RESTORE.\n\n\t* gcc.dg/tree-ssa/pr23848-1.c: New test.\n\t* gcc.dg/tree-ssa/pr23848-2.c: New test.\n\t* gcc.dg/tree-ssa/pr23848-3.c: New test.\n\t* gcc.dg/tree-ssa/pr23848-4.c: New test.\n\nFrom-SVN: r130206", "tree": {"sha": "632c05815bb907003de31352c54fe7216c1a16a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/632c05815bb907003de31352c54fe7216c1a16a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62e66076c6c114aa150ff63478b41e8c834a6fcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e66076c6c114aa150ff63478b41e8c834a6fcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e66076c6c114aa150ff63478b41e8c834a6fcb"}], "stats": {"total": 201, "additions": 201, "deletions": 0}, "files": [{"sha": "ba07292fb8a919b95c8a386d045e76bc37b94491", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6", "patch": "@@ -1,3 +1,10 @@\n+2007-11-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/23848\n+\t* tree-ssa-ccp.c (optimize_stack_restore): New function.\n+\t(execute_fold_all_builtins): Call optimize_stack_restore for\n+\tBUILT_IN_STACK_RESTORE.\n+\n 2007-11-15  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* fwprop.c (try_fwprop_subst): Skip profitability check for forward"}, {"sha": "5d00b2d1d8502e0f697735ab21344e0754481631", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6", "patch": "@@ -1,3 +1,11 @@\n+2007-11-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/23848\n+\t* gcc.dg/tree-ssa/pr23848-1.c: New test.\n+\t* gcc.dg/tree-ssa/pr23848-2.c: New test.\n+\t* gcc.dg/tree-ssa/pr23848-3.c: New test.\n+\t* gcc.dg/tree-ssa/pr23848-4.c: New test.\n+\n 2007-11-15  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/33917"}, {"sha": "08916e4e5dd6720a031136d206d22b9391754d95", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23848-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23848-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23848-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23848-1.c?ref=cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6", "patch": "@@ -0,0 +1,32 @@\n+/* PR middle-end/23848 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+void bar1 (char *, int);\n+void foo1 (int size)\n+{\n+  char temp[size];\n+  temp[size-1] = '\\0';\n+  bar1 (temp, size);\n+}\n+\n+void bar2 (char *, char *, char *, char *, int);\n+void foo2 (int size)\n+{\n+  char temp[size];\n+  temp[size-1] = '\\0';\n+  {\n+    char temp2[size];\n+    {\n+      char temp3[size];\n+      {\n+\tchar temp4[size];\n+\tbar2 (temp, temp2, temp3, temp4, size);\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"__builtin_stack_save\" \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_stack_restore\" \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "c9691469dbfbb02df13e0cb42d642c2a9476ac46", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23848-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23848-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23848-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23848-2.c?ref=cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6", "patch": "@@ -0,0 +1,25 @@\n+/* PR middle-end/23848 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+void bar (char *, char *, char *, char *, int);\n+void foo (int size)\n+{\n+  char temp[size];\n+  temp[size-1] = '\\0';\n+  {\n+    char temp2[size];\n+    {\n+      char temp3[size];\n+      {\n+\tchar temp4[size];\n+\tbar (temp, temp2, temp3, temp4, size);\n+      }\n+    }\n+    bar (temp, temp2, (char *) 0, (char *) 0, size);\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin_stack_save\" 1 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_stack_restore\" 1 \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "d2555049b7f64a15f975a4595645be86a6bb6d02", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23848-3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23848-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23848-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23848-3.c?ref=cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6", "patch": "@@ -0,0 +1,28 @@\n+/* PR middle-end/23848 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+void bar (int, char *, char *, char *, char *, int);\n+void foo (int size)\n+{\n+  int i;\n+  for (i = 0; i < size; i++)\n+    {\n+      char temp[size];\n+      temp[size-1] = '\\0';\n+      {\n+\tchar temp2[size];\n+\t{\n+\t  char temp3[size];\n+\t  {\n+\t    char temp4[size];\n+\t    bar (i, temp, temp2, temp3, temp4, size);\n+\t  }\n+\t}\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin_stack_save\" 1 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_stack_restore\" 1 \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "66b21b81e89f0929f6ea19ab0662de00f4a29ede", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23848-4.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23848-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23848-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23848-4.c?ref=cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6", "patch": "@@ -0,0 +1,25 @@\n+/* PR middle-end/23848 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+void bar (char *, char *, char *, char *, int);\n+void foo (int size)\n+{\n+  char temp[size];\n+  temp[size-1] = '\\0';\n+  {\n+    char temp2[size];\n+    {\n+      char temp3[size];\n+      {\n+\tchar temp4[size];\n+\tbar (temp, temp2, temp3, temp4, size);\n+      }\n+    }\n+    __asm __volatile (\"\" : : \"r\" (&temp[0]), \"r\" (&temp2[0]) : \"memory\");\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin_stack_save\" 1 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_stack_restore\" 1 \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "0fc4b4713b415088b58f2202483d3149ef8e5008", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=cb8e078d3f0aa2a99eb9d14ba0f38354ffc181a6", "patch": "@@ -2601,6 +2601,76 @@ fold_stmt_inplace (tree stmt)\n   return changed;\n }\n \f\n+/* Try to optimize out __builtin_stack_restore.  Optimize it out\n+   if there is another __builtin_stack_restore in the same basic\n+   block and no calls or ASM_EXPRs are in between, or if this block's\n+   only outgoing edge is to EXIT_BLOCK and there are no calls or\n+   ASM_EXPRs after this __builtin_stack_restore.  */\n+\n+static tree\n+optimize_stack_restore (basic_block bb, tree call, block_stmt_iterator i)\n+{\n+  tree stack_save, stmt, callee;\n+\n+  if (TREE_CODE (call) != CALL_EXPR\n+      || call_expr_nargs (call) != 1\n+      || TREE_CODE (CALL_EXPR_ARG (call, 0)) != SSA_NAME\n+      || !POINTER_TYPE_P (TREE_TYPE (CALL_EXPR_ARG (call, 0))))\n+    return NULL_TREE;\n+\n+  for (bsi_next (&i); !bsi_end_p (i); bsi_next (&i))\n+    {\n+      tree call;\n+\n+      stmt = bsi_stmt (i);\n+      if (TREE_CODE (stmt) == ASM_EXPR)\n+\treturn NULL_TREE;\n+      call = get_call_expr_in (stmt);\n+      if (call == NULL)\n+\tcontinue;\n+\n+      callee = get_callee_fndecl (call);\n+      if (!callee || DECL_BUILT_IN_CLASS (callee) != BUILT_IN_NORMAL)\n+\treturn NULL_TREE;\n+\n+      if (DECL_FUNCTION_CODE (callee) == BUILT_IN_STACK_RESTORE)\n+\tbreak;\n+    }\n+\n+  if (bsi_end_p (i)\n+      && (! single_succ_p (bb)\n+\t  || single_succ_edge (bb)->dest != EXIT_BLOCK_PTR))\n+    return NULL_TREE;\n+\n+  stack_save = SSA_NAME_DEF_STMT (CALL_EXPR_ARG (call, 0));\n+  if (TREE_CODE (stack_save) != GIMPLE_MODIFY_STMT\n+      || GIMPLE_STMT_OPERAND (stack_save, 0) != CALL_EXPR_ARG (call, 0)\n+      || TREE_CODE (GIMPLE_STMT_OPERAND (stack_save, 1)) != CALL_EXPR\n+      || tree_could_throw_p (stack_save)\n+      || !has_single_use (CALL_EXPR_ARG (call, 0)))\n+    return NULL_TREE;\n+\n+  callee = get_callee_fndecl (GIMPLE_STMT_OPERAND (stack_save, 1));\n+  if (!callee\n+      || DECL_BUILT_IN_CLASS (callee) != BUILT_IN_NORMAL\n+      || DECL_FUNCTION_CODE (callee) != BUILT_IN_STACK_SAVE\n+      || call_expr_nargs (GIMPLE_STMT_OPERAND (stack_save, 1)) != 0)\n+    return NULL_TREE;\n+\n+  stmt = stack_save;\n+  push_stmt_changes (&stmt);\n+  if (!set_rhs (&stmt,\n+\t\tbuild_int_cst (TREE_TYPE (CALL_EXPR_ARG (call, 0)), 0)))\n+    {\n+      discard_stmt_changes (&stmt);\n+      return NULL_TREE;\n+    }\n+  gcc_assert (stmt == stack_save);\n+  pop_stmt_changes (&stmt);\n+\n+  return integer_zero_node;\n+}\n+\f\n /* Convert EXPR into a GIMPLE value suitable for substitution on the\n    RHS of an assignment.  Insert the necessary statements before\n    iterator *SI_P. \n@@ -2685,6 +2755,12 @@ execute_fold_all_builtins (void)\n \t\tresult = integer_zero_node;\n \t\tbreak;\n \n+\t      case BUILT_IN_STACK_RESTORE:\n+\t\tresult = optimize_stack_restore (bb, *stmtp, i);\n+\t\tif (result)\n+\t\t  break;\n+\t\t/* FALLTHRU */\n+\n \t      default:\n \t\tbsi_next (&i);\n \t\tcontinue;"}]}