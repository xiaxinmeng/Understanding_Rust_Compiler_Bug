{"sha": "a229966c9c76afe0cf18c566a3c13ddde3878288", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIyOTk2NmM5Yzc2YWZlMGNmMThjNTY2YTNjMTNkZGRlMzg3ODI4OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T08:58:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T08:58:40Z"}, "message": "[AArch64] Use SVE ADR to optimise shift-add sequences\n\nThis patch uses SVE ADR to optimise shift-and-add and uxtw-and-add\nsequences.\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/predicates.md (const_1_to_3_operand): New predicate.\n\t* config/aarch64/aarch64-sve.md (*aarch64_adr_uxtw)\n\t(*aarch64_adr<mode>_shift, *aarch64_adr_shift_uxtw): New patterns.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/adr_1.c: New test.\n\t* gcc.target/aarch64/sve/adr_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/adr_2.c: Likewise.\n\t* gcc.target/aarch64/sve/adr_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/adr_3.c: Likewise.\n\t* gcc.target/aarch64/sve/adr_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/adr_4.c: Likewise.\n\t* gcc.target/aarch64/sve/adr_4_run.c: Likewise.\n\t* gcc.target/aarch64/sve/adr_5.c: Likewise.\n\t* gcc.target/aarch64/sve/adr_5_run.c: Likewise.\n\nFrom-SVN: r274436", "tree": {"sha": "36e43f5e15e510d575e2979b9a8436c4e5950ea7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36e43f5e15e510d575e2979b9a8436c4e5950ea7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a229966c9c76afe0cf18c566a3c13ddde3878288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a229966c9c76afe0cf18c566a3c13ddde3878288", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a229966c9c76afe0cf18c566a3c13ddde3878288", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a229966c9c76afe0cf18c566a3c13ddde3878288/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "917d611c56a58c38f2b6a7ba808d7a7ae7ed145c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917d611c56a58c38f2b6a7ba808d7a7ae7ed145c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/917d611c56a58c38f2b6a7ba808d7a7ae7ed145c"}], "stats": {"total": 293, "additions": 293, "deletions": 0}, "files": [{"sha": "c325192459188fc433b38ae0142942a8aee3e50d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a229966c9c76afe0cf18c566a3c13ddde3878288", "patch": "@@ -1,3 +1,9 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/predicates.md (const_1_to_3_operand): New predicate.\n+\t* config/aarch64/aarch64-sve.md (*aarch64_adr_uxtw)\n+\t(*aarch64_adr<mode>_shift, *aarch64_adr_shift_uxtw): New patterns.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_expand_sve_const_pred_eor)"}, {"sha": "6fed4efaaaa8701f9240ba4678d952df7ddc4073", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=a229966c9c76afe0cf18c566a3c13ddde3878288", "patch": "@@ -61,6 +61,7 @@\n ;; ---- [INT] General binary arithmetic corresponding to rtx codes\n ;; ---- [INT] Addition\n ;; ---- [INT] Subtraction\n+;; ---- [INT] Take address\n ;; ---- [INT] Absolute difference\n ;; ---- [INT] Multiplication\n ;; ---- [INT] Highpart multiplication\n@@ -1671,6 +1672,65 @@\n \n ;; Merging forms are handled through SVE_INT_BINARY.\n \n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Take address\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - ADR\n+;; -------------------------------------------------------------------------\n+\n+;; Unshifted ADR, with the offset being zero-extended from the low 32 bits.\n+(define_insn \"*aarch64_adr_uxtw\"\n+  [(set (match_operand:VNx2DI 0 \"register_operand\" \"=w\")\n+\t(plus:VNx2DI\n+\t  (and:VNx2DI\n+\t    (match_operand:VNx2DI 2 \"register_operand\" \"w\")\n+\t    (match_operand:VNx2DI 3 \"aarch64_sve_uxtw_immediate\"))\n+\t  (match_operand:VNx2DI 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SVE\"\n+  \"adr\\t%0.d, [%1.d, %2.d, uxtw]\"\n+)\n+\n+;; ADR with a nonzero shift.\n+(define_insn_and_rewrite \"*aarch64_adr<mode>_shift\"\n+  [(set (match_operand:SVE_SDI 0 \"register_operand\" \"=w\")\n+\t(plus:SVE_SDI\n+\t  (unspec:SVE_SDI\n+\t    [(match_operand 4)\n+\t     (ashift:SVE_SDI\n+\t       (match_operand:SVE_SDI 2 \"register_operand\" \"w\")\n+\t       (match_operand:SVE_SDI 3 \"const_1_to_3_operand\"))]\n+\t    UNSPEC_PRED_X)\n+\t  (match_operand:SVE_SDI 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SVE\"\n+  \"adr\\t%0.<Vetype>, [%1.<Vetype>, %2.<Vetype>, lsl %3]\"\n+  \"&& !CONSTANT_P (operands[4])\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+)\n+\n+;; Same, but with the index being zero-extended from the low 32 bits.\n+(define_insn_and_rewrite \"*aarch64_adr_shift_uxtw\"\n+  [(set (match_operand:VNx2DI 0 \"register_operand\" \"=w\")\n+\t(plus:VNx2DI\n+\t  (unspec:VNx2DI\n+\t    [(match_operand 5)\n+\t     (ashift:VNx2DI\n+\t       (and:VNx2DI\n+\t\t (match_operand:VNx2DI 2 \"register_operand\" \"w\")\n+\t\t (match_operand:VNx2DI 4 \"aarch64_sve_uxtw_immediate\"))\n+\t       (match_operand:VNx2DI 3 \"const_1_to_3_operand\"))]\n+\t    UNSPEC_PRED_X)\n+\t  (match_operand:VNx2DI 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SVE\"\n+  \"adr\\t%0.d, [%1.d, %2.d, uxtw %3]\"\n+  \"&& !CONSTANT_P (operands[5])\"\n+  {\n+    operands[5] = CONSTM1_RTX (VNx2BImode);\n+  }\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [INT] Absolute difference\n ;; -------------------------------------------------------------------------"}, {"sha": "466d56df3ef082227ca9754682c3101587ec0d7c", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=a229966c9c76afe0cf18c566a3c13ddde3878288", "patch": "@@ -39,6 +39,13 @@\n   (and (match_code \"const_int\")\n        (match_test \"op == CONST0_RTX (mode)\")))\n \n+(define_predicate \"const_1_to_3_operand\"\n+  (match_code \"const_int,const_vector\")\n+{\n+  op = unwrap_const_vec_duplicate (op);\n+  return CONST_INT_P (op) && IN_RANGE (INTVAL (op), 1, 3);\n+})\n+\n (define_special_predicate \"subreg_lowpart_operator\"\n   (and (match_code \"subreg\")\n        (match_test \"subreg_lowpart_p (op)\")))\n@@ -595,6 +602,11 @@\n   (and (match_code \"const,const_vector\")\n        (match_test \"aarch64_sve_inc_dec_immediate_p (op)\")))\n \n+(define_predicate \"aarch64_sve_uxtw_immediate\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"GET_MODE_UNIT_BITSIZE (GET_MODE (op)) > 32\")\n+       (match_test \"aarch64_const_vec_all_same_int_p (op, 0xffffffff)\")))\n+\n (define_predicate \"aarch64_sve_logical_immediate\"\n   (and (match_code \"const,const_vector\")\n        (match_test \"aarch64_sve_bitmask_immediate_p (op)\")))"}, {"sha": "c33667ead1860797a4de210a4eb5948071b35845", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a229966c9c76afe0cf18c566a3c13ddde3878288", "patch": "@@ -1,3 +1,16 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/adr_1.c: New test.\n+\t* gcc.target/aarch64/sve/adr_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/adr_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/adr_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/adr_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/adr_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/adr_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/adr_4_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/adr_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/adr_5_run.c: Likewise.\n+\n 2019-08-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/conversion/simd4.C: Test locations."}, {"sha": "223351c2fc5683c776bd2230a938c32b73f4ff98", "filename": "gcc/testsuite/gcc.target/aarch64/sve/adr_1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_1.c?ref=a229966c9c76afe0cf18c566a3c13ddde3878288", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#ifndef FACTOR\n+#define FACTOR 2\n+#endif\n+\n+#define LOOP(TYPE)\t\t\t\t\t\t\\\n+  __attribute__ ((noipa))\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\\\n+  test_##TYPE (TYPE *restrict dst, TYPE *restrict src,\t\t\\\n+\t       int count)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < count; ++i)\t\t\t\t\\\n+      dst[i] += src[i] * FACTOR;\t\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int8_t) \\\n+  T (int16_t) \\\n+  T (int32_t) \\\n+  T (int64_t) \\\n+  T (uint8_t) \\\n+  T (uint16_t) \\\n+  T (uint32_t) \\\n+  T (uint64_t)\n+\n+TEST_ALL (LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]\\.b,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]\\.b,} 2 } } */\n+/* { dg-final { scan-assembler-not {\\tadr\\tz[0-9]\\.b,} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]\\.h,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]\\.h,} 2 } } */\n+/* { dg-final { scan-assembler-not {\\tadr\\tz[0-9]\\.h,} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]\\.s,} } } */\n+/* { dg-final { scan-assembler-not {\\tlsl\\tz[0-9]\\.s,} } } */\n+/* { dg-final { scan-assembler-times {\\tadr\\tz[0-9]\\.s, \\[z[0-9]\\.s, z[0-9]\\.s, lsl 1\\]} 2 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]\\.d,} } } */\n+/* { dg-final { scan-assembler-not {\\tlsl\\tz[0-9]\\.d,} } } */\n+/* { dg-final { scan-assembler-times {\\tadr\\tz[0-9]\\.d, \\[z[0-9]\\.d, z[0-9]\\.d, lsl 1\\]} 2 } } */"}, {"sha": "383a90c248446e0bc4d2022bbee4509ec21054c5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/adr_1_run.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_1_run.c?ref=a229966c9c76afe0cf18c566a3c13ddde3878288", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"adr_1.c\"\n+\n+#define N 131\n+\n+#define TEST_LOOP(TYPE)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE a[N], b[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (TYPE) i * i + i % 5;\t\t\t\t\\\n+\tb[i] = (TYPE) i * 3 + i % 7;\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE (a, b, N);\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = ((TYPE) (i * i + i % 5)\t\t\t\\\n+\t\t\t + ((TYPE) i * 3 + i % 7) * FACTOR);\t\\\n+\tif (a[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+}"}, {"sha": "dc20ddbad009e5dfeedcd82a1c5c41dce3c465d0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/adr_2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_2.c?ref=a229966c9c76afe0cf18c566a3c13ddde3878288", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#define FACTOR 4\n+#include \"adr_1.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]\\.b,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]\\.b,} 2 } } */\n+/* { dg-final { scan-assembler-not {\\tadr\\tz[0-9]\\.b,} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]\\.h,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]\\.h,} 2 } } */\n+/* { dg-final { scan-assembler-not {\\tadr\\tz[0-9]\\.h,} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]\\.s,} } } */\n+/* { dg-final { scan-assembler-not {\\tlsl\\tz[0-9]\\.s,} } } */\n+/* { dg-final { scan-assembler-times {\\tadr\\tz[0-9]\\.s, \\[z[0-9]\\.s, z[0-9]\\.s, lsl 2\\]} 2 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]\\.d,} } } */\n+/* { dg-final { scan-assembler-not {\\tlsl\\tz[0-9]\\.d,} } } */\n+/* { dg-final { scan-assembler-times {\\tadr\\tz[0-9]\\.d, \\[z[0-9]\\.d, z[0-9]\\.d, lsl 2\\]} 2 } } */"}, {"sha": "e823d3d0a6ee6f170881a11f03633a16172ba581", "filename": "gcc/testsuite/gcc.target/aarch64/sve/adr_2_run.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_2_run.c?ref=a229966c9c76afe0cf18c566a3c13ddde3878288", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#define FACTOR 4\n+#include \"adr_1_run.c\""}, {"sha": "b0cb180dde303e02d4b2246a601fc834412c55ad", "filename": "gcc/testsuite/gcc.target/aarch64/sve/adr_3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_3.c?ref=a229966c9c76afe0cf18c566a3c13ddde3878288", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#define FACTOR 8\n+#include \"adr_1.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]\\.b,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]\\.b,} 2 } } */\n+/* { dg-final { scan-assembler-not {\\tadr\\tz[0-9]\\.b,} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]\\.h,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]\\.h,} 2 } } */\n+/* { dg-final { scan-assembler-not {\\tadr\\tz[0-9]\\.h,} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]\\.s,} } } */\n+/* { dg-final { scan-assembler-not {\\tlsl\\tz[0-9]\\.s,} } } */\n+/* { dg-final { scan-assembler-times {\\tadr\\tz[0-9]\\.s, \\[z[0-9]\\.s, z[0-9]\\.s, lsl 3\\]} 2 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]\\.d,} } } */\n+/* { dg-final { scan-assembler-not {\\tlsl\\tz[0-9]\\.d,} } } */\n+/* { dg-final { scan-assembler-times {\\tadr\\tz[0-9]\\.d, \\[z[0-9]\\.d, z[0-9]\\.d, lsl 3\\]} 2 } } */"}, {"sha": "721dd68efc42c5e0cd321c1259c3cf677f04377a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/adr_3_run.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_3_run.c?ref=a229966c9c76afe0cf18c566a3c13ddde3878288", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#define FACTOR 8\n+#include \"adr_1_run.c\""}, {"sha": "7c039ba1380298a0898fc5eddf9ab74d306ad222", "filename": "gcc/testsuite/gcc.target/aarch64/sve/adr_4.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_4.c?ref=a229966c9c76afe0cf18c566a3c13ddde3878288", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#define FACTOR 16\n+#include \"adr_1.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]\\.[bhsd],} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]\\.[bhsd],} 8 } } */\n+/* { dg-final { scan-assembler-not {\\tadr\\tz[0-9]\\.[bhsd],} } } */"}, {"sha": "3fb9099e1e8c416b0d7f12e5210177c28dd4de6a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/adr_4_run.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_4_run.c?ref=a229966c9c76afe0cf18c566a3c13ddde3878288", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#define FACTOR 16\n+#include \"adr_1_run.c\""}, {"sha": "ce3991cb2e5c2c1270eaa2a6c300fa8ed16c7e27", "filename": "gcc/testsuite/gcc.target/aarch64/sve/adr_5.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_5.c?ref=a229966c9c76afe0cf18c566a3c13ddde3878288", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define LOOP(FACTOR)\t\t\t\t\t\t\\\n+  __attribute__ ((noipa))\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\\\n+  test_##FACTOR (uint64_t *restrict dst,\t\t\t\\\n+\t\t uint64_t *restrict src, int count)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < count; ++i)\t\t\t\t\\\n+      dst[i] += (src[i] & 0xffffffff) * FACTOR;\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) T (1) T (2) T (4) T (8)\n+\n+TEST_ALL (LOOP)\n+\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]\\.d,} } } */\n+/* { dg-final { scan-assembler-not {\\tlsl\\tz[0-9]\\.d,} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]\\.d,} } } */\n+/* { dg-final { scan-assembler-not {\\tuxtw\\tz[0-9]\\.d,} } } */\n+/* { dg-final { scan-assembler-times {\\tadr\\tz[0-9]\\.d, \\[z[0-9]\\.d, z[0-9]\\.d, uxtw\\]} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadr\\tz[0-9]\\.d, \\[z[0-9]\\.d, z[0-9]\\.d, uxtw 1\\]} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadr\\tz[0-9]\\.d, \\[z[0-9]\\.d, z[0-9]\\.d, uxtw 2\\]} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadr\\tz[0-9]\\.d, \\[z[0-9]\\.d, z[0-9]\\.d, uxtw 3\\]} 1 } } */"}, {"sha": "025c38d23899f8a26010ec26203d97c55e069910", "filename": "gcc/testsuite/gcc.target/aarch64/sve/adr_5_run.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_5_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a229966c9c76afe0cf18c566a3c13ddde3878288/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_5_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fadr_5_run.c?ref=a229966c9c76afe0cf18c566a3c13ddde3878288", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"adr_5.c\"\n+\n+#define N 131\n+\n+#define TEST_LOOP(FACTOR)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    uint64_t a[N], b[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\ta[i] = (uint64_t) i * i + i % 5;\t\t\t\t\\\n+\tb[i] = (uint64_t) (i * 3) << ((i & 7) * 8);\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    test_##FACTOR (a, b, N);\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tuint64_t expected = ((uint64_t) (i * i + i % 5)\t\t\t\\\n+\t\t\t     + (((uint64_t) (i * 3) << ((i & 7) * 8))\t\\\n+\t\t\t\t& 0xffffffff) * FACTOR);\t\t\\\n+\tif (a[i] != expected)\t\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+}"}]}