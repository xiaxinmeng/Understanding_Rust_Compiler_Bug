{"sha": "fb0f04feaa6710087d04a5214394bd468d983a6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIwZjA0ZmVhYTY3MTAwODdkMDRhNTIxNDM5NGJkNDY4ZDk4M2E2Yg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2015-09-17T08:23:05Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2015-09-17T08:23:05Z"}, "message": "[AArch64] Implement copysign[ds]f3\n\ngcc/\n\n\t* config/aarch64/aarch64.md (copysigndf3): New.\n\t(copysignsf3): Likewise.\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/copysign_1.c: New.\n\t* gcc.target/aarch64/copysign_2.c: New.\n\nFrom-SVN: r227849", "tree": {"sha": "b83481dc814025c58c58a64ff47444650c086743", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b83481dc814025c58c58a64ff47444650c086743"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb0f04feaa6710087d04a5214394bd468d983a6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb0f04feaa6710087d04a5214394bd468d983a6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb0f04feaa6710087d04a5214394bd468d983a6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb0f04feaa6710087d04a5214394bd468d983a6b/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb6b3973cc5738eab821d4fd8a61d14266d8a503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6b3973cc5738eab821d4fd8a61d14266d8a503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb6b3973cc5738eab821d4fd8a61d14266d8a503"}], "stats": {"total": 218, "additions": 218, "deletions": 0}, "files": [{"sha": "dcc6f2f4347a9147f688a4840d493edbdeba62b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0f04feaa6710087d04a5214394bd468d983a6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0f04feaa6710087d04a5214394bd468d983a6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb0f04feaa6710087d04a5214394bd468d983a6b", "patch": "@@ -1,3 +1,8 @@\n+2015-09-17  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64.md (copysigndf3): New.\n+\t(copysignsf3): Likewise.\n+\n 2015-09-17  David S. Miller  <davem@davemloft.net>\n \n \t* config/sparc/sparc-protos.h (sparc_secondary_memory_needed):"}, {"sha": "925c6b1d377fcca6298d63d1096e33d69c90ea21", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0f04feaa6710087d04a5214394bd468d983a6b/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0f04feaa6710087d04a5214394bd468d983a6b/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=fb0f04feaa6710087d04a5214394bd468d983a6b", "patch": "@@ -4412,6 +4412,52 @@\n   [(set_attr \"type\" \"f_minmax<s>\")]\n )\n \n+;; For copysign (x, y), we want to generate:\n+;;\n+;;   LDR d2, #(1 << 63)\n+;;   BSL v2.8b, [y], [x]\n+;;\n+;; or another, equivalent, sequence using one of BSL/BIT/BIF.\n+;; aarch64_simd_bsldf will select the best suited of these instructions\n+;; to generate based on register allocation, and knows how to partially\n+;; constant fold based on the values of X and Y, so expand through that.\n+\n+(define_expand \"copysigndf3\"\n+  [(match_operand:DF 0 \"register_operand\")\n+   (match_operand:DF 1 \"register_operand\")\n+   (match_operand:DF 2 \"register_operand\")]\n+  \"TARGET_FLOAT && TARGET_SIMD\"\n+{\n+  rtx mask = gen_reg_rtx (DImode);\n+  emit_move_insn (mask, GEN_INT (HOST_WIDE_INT_1U << 63));\n+  emit_insn (gen_aarch64_simd_bsldf (operands[0], mask,\n+\t\t\t\t     operands[2], operands[1]));\n+  DONE;\n+}\n+)\n+\n+;; As above, but we must first get to a 64-bit value if we wish to use\n+;; aarch64_simd_bslv2sf.\n+\n+(define_expand \"copysignsf3\"\n+  [(match_operand:SF 0 \"register_operand\")\n+   (match_operand:SF 1 \"register_operand\")\n+   (match_operand:SF 2 \"register_operand\")]\n+  \"TARGET_FLOAT && TARGET_SIMD\"\n+{\n+  rtx mask = gen_reg_rtx (DImode);\n+\n+  /* Juggle modes to get us in to a vector mode for BSL.  */\n+  rtx op1 = lowpart_subreg (V2SFmode, operands[1], SFmode);\n+  rtx op2 = lowpart_subreg (V2SFmode, operands[2], SFmode);\n+  rtx tmp = gen_reg_rtx (V2SFmode);\n+  emit_move_insn (mask, GEN_INT (HOST_WIDE_INT_1U << 31));\n+  emit_insn (gen_aarch64_simd_bslv2sf (tmp, mask, op2, op1));\n+  emit_move_insn (operands[0], lowpart_subreg (SFmode, tmp, V2SFmode));\n+  DONE;\n+}\n+)\n+\n ;; -------------------------------------------------------------------\n ;; Reload support\n ;; -------------------------------------------------------------------"}, {"sha": "ab7f1cc5f1ad3a375b983470df6af7d890ea0749", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0f04feaa6710087d04a5214394bd468d983a6b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0f04feaa6710087d04a5214394bd468d983a6b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb0f04feaa6710087d04a5214394bd468d983a6b", "patch": "@@ -1,3 +1,8 @@\n+2015-09-17  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/copysign_1.c: New.\n+\t* gcc.target/aarch64/copysign_2.c: New.\n+\n 2015-09-17  Bin Cheng  <bin.cheng@arm.com>\n \n \t* gcc.dg/tree-ssa/loop-bound-2.c: New test."}, {"sha": "27fb9ca4ed7a7abcc21549dea32c24d2ffdca3f4", "filename": "gcc/testsuite/gcc.target/aarch64/copysign_1.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0f04feaa6710087d04a5214394bd468d983a6b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcopysign_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0f04feaa6710087d04a5214394bd468d983a6b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcopysign_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcopysign_1.c?ref=fb0f04feaa6710087d04a5214394bd468d983a6b", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+\n+double fabs (double);\n+\n+double\n+check (double x, double y)\n+{\n+  return __builtin_copysign (x, y);\n+}\n+\n+double\n+check1 (double x)\n+{\n+  return __builtin_copysign (x, 1.0);\n+}\n+\n+double\n+check2 (double x)\n+{\n+  return __builtin_copysign (1.0, x);\n+}\n+\n+double\n+check3 (double x)\n+{\n+  return -__builtin_copysign (x, 1.0);\n+}\n+\n+double\n+check4 (double x, double y)\n+{\n+  return x * __builtin_copysign (x, y);\n+}\n+\n+double\n+check5 (double x, double y)\n+{\n+  return __builtin_copysign (-x, -y);\n+}\n+\n+int\n+main (int argc, char** argv)\n+{\n+  double x = 2.0;\n+  double y = -5.0;\n+  double epsilon = 0.00001;\n+\n+  double expected = -2.0;\n+\n+  if (fabs (check (x, y) - expected) >= epsilon)\n+    __builtin_abort ();\n+\n+  expected = 2.0;\n+\n+  if (fabs (check1 (x) - expected) >= epsilon)\n+    __builtin_abort ();\n+\n+  expected = 1.0;\n+\n+  if (fabs (check2 (x) - expected) >= epsilon)\n+    __builtin_abort ();\n+\n+  expected = -2.0;\n+\n+  if (fabs (check3 (x) - expected) >= epsilon)\n+    __builtin_abort ();\n+\n+  expected = -4.0;\n+\n+  if (fabs (check4 (x, y) - expected) >= epsilon)\n+    __builtin_abort ();\n+\n+  expected = 2.0;\n+\n+  if (fabs (check5 (x, y) - expected) >= epsilon)\n+    __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-assembler-not \"copysign\\tw\" } } */\n+"}, {"sha": "6eaa70413a36c364fbdc4206671dc00d7bd60cc9", "filename": "gcc/testsuite/gcc.target/aarch64/copysign_2.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0f04feaa6710087d04a5214394bd468d983a6b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcopysign_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0f04feaa6710087d04a5214394bd468d983a6b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcopysign_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcopysign_2.c?ref=fb0f04feaa6710087d04a5214394bd468d983a6b", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+\n+float fabsf (float);\n+\n+float\n+check (float x, float y)\n+{\n+  return __builtin_copysignf (x, y);\n+}\n+\n+float\n+check1 (float x)\n+{\n+  return __builtin_copysignf (x, 1.0);\n+}\n+\n+float\n+check2 (float x)\n+{\n+  return __builtin_copysignf (1.0, x);\n+}\n+\n+float\n+check3 (float x)\n+{\n+  return -__builtin_copysignf (x, 1.0);\n+}\n+\n+float\n+check4 (float x, float y)\n+{\n+  return x * __builtin_copysignf (x, y);\n+}\n+\n+float\n+check5 (float x, float y)\n+{\n+  return __builtin_copysignf (-x, -y);\n+}\n+\n+int\n+main (int argc, char** argv)\n+{\n+  float x = 2.0f;\n+  float y = -5.0f;\n+  float epsilon = 0.00001f;\n+\n+  float expected = -2.0f;\n+\n+  if (fabsf (check (x, y) - expected) >= epsilon)\n+    __builtin_abort ();\n+\n+  expected = 2.0f;\n+\n+  if (fabsf (check1 (x) - expected) >= epsilon)\n+    __builtin_abort ();\n+\n+  expected = 1.0f;\n+\n+  if (fabsf (check2 (x) - expected) >= epsilon)\n+    __builtin_abort ();\n+\n+  expected = -2.0f;\n+\n+  if (fabsf (check3 (x) - expected) >= epsilon)\n+    __builtin_abort ();\n+\n+  expected = -4.0f;\n+\n+  if (fabsf (check4 (x, y) - expected) >= epsilon)\n+    __builtin_abort ();\n+\n+  expected = 2.0f;\n+\n+  if (fabsf (check5 (x, y) - expected) >= epsilon)\n+    __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-assembler-not \"copysign\\tw\" } } */\n+"}]}