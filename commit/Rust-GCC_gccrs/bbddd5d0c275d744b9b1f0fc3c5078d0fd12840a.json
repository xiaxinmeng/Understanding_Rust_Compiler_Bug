{"sha": "bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJkZGQ1ZDBjMjc1ZDc0NGI5YjFmMGZjM2M1MDc4ZDBmZDEyODQwYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-08-15T02:28:45Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-08-15T02:28:45Z"}, "message": "random (class poisson_distribution<>): Add.\n\n2006-08-14  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/random (class poisson_distribution<>): Add.\n\t* include/tr1/random.tcc (poisson_distribution<>::operator(),\n\toperator<<(std::basic_ostream<>&, const poisson_distribution<>&),\n\toperator>>(std::basic_istream<>&, poisson_distribution<>&,\n\tpoisson_distribution<>::poisson_distribution(const _RealType&)):\n\tDefine.\n\t* testsuite/tr1/5_numerical_facilities/random/poisson_distribution/\n\trequirements/typedefs.cc: New.\n\n\t* include/tr1/random.tcc (mersenne_twister<>::operator()): Tweak\n\ta bit for efficiency.\n\t\n\t* include/tr1/random.tcc (operator<<(std::basic_ostream<>&,\n\tconst normal_distribution<>&), operator>>(std::basic_istream<>&,\n\tnormal_distribution<>&)): Do not output _M_saved unnecessarily.\n\n\t* include/tr1/random: Trivial formatting fixes.\n\t* include/tr1/cmath: Likewise.\n\nFrom-SVN: r116149", "tree": {"sha": "112a1012b3a9eb5b196e0a984f6db537e174b640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/112a1012b3a9eb5b196e0a984f6db537e174b640"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a/comments", "author": null, "committer": null, "parents": [{"sha": "e63d6886f47b4c844918787f774021cd6faf6270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e63d6886f47b4c844918787f774021cd6faf6270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e63d6886f47b4c844918787f774021cd6faf6270"}], "stats": {"total": 368, "additions": 353, "deletions": 15}, "files": [{"sha": "bf29f8185957b38f8b326386cd218fcc44862a02", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a", "patch": "@@ -1,3 +1,24 @@\n+2006-08-14  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/random (class poisson_distribution<>): Add.\n+\t* include/tr1/random.tcc (poisson_distribution<>::operator(),\n+\toperator<<(std::basic_ostream<>&, const poisson_distribution<>&),\n+\toperator>>(std::basic_istream<>&, poisson_distribution<>&,\n+\tpoisson_distribution<>::poisson_distribution(const _RealType&)):\n+\tDefine.\n+\t* testsuite/tr1/5_numerical_facilities/random/poisson_distribution/\n+\trequirements/typedefs.cc: New.\n+\n+\t* include/tr1/random.tcc (mersenne_twister<>::operator()): Tweak\n+\ta bit for efficiency.\n+\t\n+\t* include/tr1/random.tcc (operator<<(std::basic_ostream<>&,\n+\tconst normal_distribution<>&), operator>>(std::basic_istream<>&,\n+\tnormal_distribution<>&)): Do not output _M_saved unnecessarily.\n+\n+\t* include/tr1/random: Trivial formatting fixes.\n+\t* include/tr1/cmath: Likewise.\n+\n 2006-08-11  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_bvector.h (__fill_bvector(_Bit_iterator,"}, {"sha": "0f51604d9e0c67a5ff3d4aa5e652dae31eacac26", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a", "patch": "@@ -375,7 +375,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     std::__enable_if<typename std::tr1::__promote_2<_Tp, _Up>::__type,\n \t\t     (std::__is_floating<_Tp>::__value\n \t\t      || std::__is_floating<_Up>::__value)>::__type\n-\t\t      atan2(_Tp __y, _Up __x)\n+    atan2(_Tp __y, _Up __x)\n     {\n       typedef typename std::tr1::__promote_2<_Tp, _Up>::__type __type;\n       return std::atan2(__type(__y), __type(__x));"}, {"sha": "b9934561c100410f5b8630c8c59aa1964896a302", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 93, "deletions": 3, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a", "patch": "@@ -44,6 +44,7 @@\n #include <iosfwd>\n #include <limits>\n #include <tr1/type_traits>\n+#include <tr1/cmath>\n #include <fstream>\n \n namespace std\n@@ -1516,9 +1517,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     /**\n      * Gets the next value in the Bernoullian sequence.\n      */\n-    template<class UniformRandomNumberGenerator>\n+    template<class _UniformRandomNumberGenerator>\n       result_type\n-      operator()(UniformRandomNumberGenerator& __urng)\n+      operator()(_UniformRandomNumberGenerator& __urng)\n       {\n \tif (__urng() < _M_p)\n \t  return true;\n@@ -1585,7 +1586,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       typedef _IntType  result_type;\n \n       // constructors and member function\n-      \n       explicit\n       geometric_distribution(const _RealType& __p = _RealType(0.5))\n       : _M_p(__p), _M_log_p(std::log(_M_p))\n@@ -1648,6 +1648,96 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       _RealType _M_log_p;\n     };\n \n+\n+  /**\n+   * @brief A discrete Poisson random number distribution.\n+   *\n+   * The formula for the poisson probability mass function is \n+   * @f$ p(i) = \\frac{mean^i}{i!} e^{-mean} @f$ where @f$ mean @f$ is the\n+   * parameter of the distribution.\n+   */\n+  template<typename _IntType = int, typename _RealType = double>\n+    class poisson_distribution;\n+\n+  template<typename _IntType, typename _RealType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const poisson_distribution<_IntType, _RealType>& __x);\n+\n+  template<typename _IntType, typename _RealType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       poisson_distribution<_IntType, _RealType>& __x);\n+\n+  template<typename _IntType, typename _RealType>\n+    class poisson_distribution\n+    {\n+    public:\n+      // types\n+      typedef _RealType input_type;\n+      typedef _IntType  result_type;\n+\n+      // constructors and member function\n+      explicit\n+      poisson_distribution(const _RealType& __mean = _RealType(1));\n+\n+      /**\n+       * Gets the distribution parameter @p mean.\n+       */\n+      _RealType\n+      mean() const\n+      { return _M_mean; }\n+\n+      void\n+      reset() { }\n+\n+      template<class _UniformRandomNumberGenerator>\n+        result_type\n+        operator()(_UniformRandomNumberGenerator& __urng);\n+\n+      /**\n+       * Inserts a %poisson_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %poisson_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _IntType1, typename _RealType1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_ostream<_CharT, _Traits>&\n+        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const poisson_distribution<_IntType1, _RealType1>& __x);\n+\n+      /**\n+       * Extracts a %poisson_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %poisson_distribution random number generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _IntType1, typename _RealType1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_istream<_CharT, _Traits>&\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   poisson_distribution<_IntType1, _RealType1>& __x);\n+\n+    protected:\n+      _RealType _M_mean;\n+\n+      _RealType _M_lm_thr;\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+      _RealType _M_lfm, _M_sm, _M_d, _M_scx4, _M_2cx, _M_c2b, _M_cb;\n+#endif\n+      bool _M_large;\n+    };\n+\n   /* @} */ // group tr1_random_distributions_discrete\n \n   /**"}, {"sha": "42b53a0d9920805c6f830e49df9aa1e4f90f6ec1", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 201, "deletions": 11, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a", "patch": "@@ -285,27 +285,26 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t{\n \t  const _UIntType __upper_mask = (~_UIntType()) << __r;\n \t  const _UIntType __lower_mask = ~__upper_mask;\n+\t  const _UIntType __fx[2] = { 0, __a };\n \n \t  for (int __k = 0; __k < (__n - __m); ++__k)\n \t    {\n \t      _UIntType __y = ((_M_x[__k] & __upper_mask)\n \t\t\t       | (_M_x[__k + 1] & __lower_mask));\n-\t      _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)\n-\t\t\t   ^ ((__y & 0x01) ? __a : 0));\n+\t      _M_x[__k] = _M_x[__k + __m] ^ (__y >> 1) ^ __fx[__y & 0x01];\n \t    }\n \n \t  for (int __k = (__n - __m); __k < (__n - 1); ++__k)\n \t    {\n \t      _UIntType __y = ((_M_x[__k] & __upper_mask)\n \t\t\t       | (_M_x[__k + 1] & __lower_mask));\n \t      _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)\n-\t\t\t   ^ ((__y & 0x01) ? __a : 0));\n+\t\t\t   ^ __fx[__y & 0x01]);\n \t    }\n \n \t  _UIntType __y = ((_M_x[__n - 1] & __upper_mask)\n \t\t\t   | (_M_x[0] & __lower_mask));\n-\t  _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)\n-\t\t\t   ^ ((__y & 0x01) ? __a : 0));\n+\t  _M_x[__n - 1] = _M_x[__m - 1] ^ (__y >> 1) ^ __fx[__y & 0x01];\n \t  _M_p = 0;\n \t}\n \n@@ -655,6 +654,194 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     }\n \n \n+  template<typename _IntType, typename _RealType>\n+    poisson_distribution<_IntType, _RealType>::\n+    poisson_distribution(const _RealType& __mean)\n+    : _M_mean(__mean), _M_large(false)\n+    {\n+      _GLIBCXX_DEBUG_ASSERT(_M_mean > 0.0);\n+\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+      if (_M_mean >= 12)\n+\t{\n+\t  _M_large = true;\n+\t  const _RealType __m = std::floor(_M_mean);\n+\t  _M_lm_thr = std::log(_M_mean);\n+\t  _M_lfm = std::tr1::lgamma(__m + 1);\n+\t  _M_sm = std::sqrt(__m);\n+\t  \n+\t  const _RealType __dx =\n+\t    std::sqrt(2 * __m\n+\t    * std::log(_RealType(40.743665431525205956834243423363677L)\n+\t\t       * __m));\n+\t  _M_d = std::tr1::round(std::max(_RealType(6),\n+\t\t\t\t\t  std::min(__m, __dx)));\n+\t  const _RealType __cx = 2 * (2 * __m + _M_d);\n+\t  const _RealType __cx4 = __cx / 4;\n+\t  _M_scx4 = std::sqrt(__cx4);\n+\t  _M_2cx = 2 / __cx;\n+\n+\t  const _RealType __pi_2 = 1.5707963267948966192313216916397514L;\n+\t  _M_c2b = std::sqrt(__pi_2 * __cx4) * std::exp(_M_2cx);\n+\t  _M_cb = __cx * std::exp(-_M_d * _M_2cx * (1 + _M_d / 2)) / _M_d;\n+\t}\n+      else\n+#endif\n+\t_M_lm_thr = std::exp(-_M_mean);\n+      }\n+\n+  /**\n+   * A rejection algorithm when mean >= 12 and a simple method based\n+   * upon the multiplication of uniform random variates otherwise.\n+   * NB: The former is available only if _GLIBCXX_USE_C99_MATH_TR1\n+   * is defined.\n+   *\n+   * Reference:\n+   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n+   * New York, 1986, Ch. X, Sects. 3.3 & 3.4 (+ Errata!).\n+   */\n+  template<typename _IntType, typename _RealType>\n+    template<class _UniformRandomNumberGenerator>\n+      typename poisson_distribution<_IntType, _RealType>::result_type\n+      poisson_distribution<_IntType, _RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng)\n+      {\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\tif (_M_large)\n+\t  {\n+\t    _RealType __x;\n+\n+\t    const _RealType __m = std::floor(_M_mean);\n+\t    // sqrt(mu * pi / 2)\n+\t    const _RealType __c1 = (_M_sm\n+\t\t\t\t    * 1.2533141373155002512078826424055226L);\n+\t    const _RealType __c2 = _M_c2b + __c1; \n+\t    const _RealType __c3 = __c2 + 1;\n+\t    const _RealType __c4 = __c3 + 1;\n+\t    // c4 + e^(1 / 78)\n+\t    const _RealType __c5 = (__c4\n+\t\t\t\t    + 1.0129030479320018583185514777512983L);\n+\t    const _RealType __c = _M_cb + __c5;\n+\t    const _RealType __cx = 2 * (2 * __m + _M_d);\n+\n+\t    normal_distribution<_RealType> __nd;\n+\n+\t    bool __keepgoing = true;\n+\t    do\n+\t      {\n+\t\tconst _RealType __u = __c * __urng();\n+\t\tconst _RealType __e = -std::log(__urng());\n+\n+\t\t_RealType __w = 0.0;\n+\t\t\n+\t\tif (__u <= __c1)\n+\t\t  {\n+\t\t    const _RealType __n = __nd(__urng);\n+\t\t    const _RealType __y = -std::abs(__n) * _M_sm - 1;\n+\t\t    __x = std::floor(__y);\n+\t\t    __w = -__n * __n / 2;\n+\t\t    if (__x < -__m)\n+\t\t      continue;\n+\t\t  }\n+\t\telse if (__u <= __c2)\n+\t\t  {\n+\t\t    const _RealType __n = __nd(__urng);\n+\t\t    const _RealType __y = 1 + std::abs(__n) * _M_scx4;\n+\t\t    __x = std::ceil(__y);\n+\t\t    __w = __y * (2 - __y) * _M_2cx;\n+\t\t    if (__x > _M_d)\n+\t\t      continue;\n+\t\t  }\n+\t\telse if (__u <= __c3)\n+\t\t  // XXX This case not in the book, nor in the Errata...\n+\t\t  __x = -1;\n+\t\telse if (__u <= __c4)\n+\t\t  __x = 0;\n+\t\telse if (__u <= __c5)\n+\t\t  __x = 1;\n+\t\telse\n+\t\t  {\n+\t\t    const _RealType __v = -std::log(__urng());\n+\t\t    const _RealType __y = _M_d + __v * __cx / _M_d;\n+\t\t    __x = std::ceil(__y);\n+\t\t    __w = -_M_d * _M_2cx * (1 + __y / 2);\n+\t\t  }\n+\n+\t\t__keepgoing = (__w - __e - __x * _M_lm_thr\n+\t\t\t       > _M_lfm - std::tr1::lgamma(__x + __m + 1));\n+\n+\t      } while (__keepgoing);\n+\n+\t    return _IntType(std::tr1::round(__x + __m));\n+\t  }\n+\telse\n+#endif\n+\t  {\n+\t    _IntType __x = -1;\n+\t    _RealType __prod = 1.0;\n+\n+\t    do\n+\t      {\n+\t\t__prod *= __urng();\n+\t\t__x += 1;\n+\t      }\n+\t    while (__prod > _M_lm_thr);\n+\n+\t    return __x;\n+\t  }\n+      }\n+\n+  template<typename _IntType, typename _RealType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const poisson_distribution<_IntType, _RealType>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(std::ios_base::scientific | std::ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(_Max_digits10<_RealType>::__value);\n+\n+      __os << __x._M_large << __space << __x.mean()\n+\t   << __space << __x._M_lm_thr;\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+      if (__x._M_large)\n+\t__os << __space << __x._M_lfm << __space << __x._M_sm\n+\t     << __space << __x._M_d << __space << __x._M_scx4\n+\t     << __space << __x._M_2cx << __space << __x._M_c2b\n+\t     << __space << __x._M_cb;\n+#endif\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _IntType, typename _RealType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       poisson_distribution<_IntType, _RealType>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(std::ios_base::skipws);\n+\n+      __is >> __x._M_large >> __x._M_mean >> __x._M_lm_thr;\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+      if (__x._M_large)\n+\t__is >> __x._M_lfm >> __x._M_sm >> __x._M_d >> __x._M_scx4\n+\t     >> __x._M_2cx >> __x._M_c2b >> __x._M_cb;\n+#endif\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -766,10 +953,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       __os.fill(__space);\n       __os.precision(_Max_digits10<_RealType>::__value);\n \n-      __os << __x.mean() << __space\n-\t   << __x.sigma() << __space\n-\t   << __x._M_saved << __space\n-\t   << __x._M_saved_available;\n+      __os << __x._M_saved_available << __space\n+\t   << __x.mean() << __space\n+\t   << __x.sigma();\n+      if (__x._M_saved_available)\n+\t__os << __space << __x._M_saved;\n \n       __os.flags(__flags);\n       __os.fill(__fill);\n@@ -785,8 +973,10 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       const std::ios_base::fmtflags __flags = __is.flags();\n       __is.flags(std::ios_base::dec | std::ios_base::skipws);\n \n-      __is >> __x._M_mean >> __x._M_sigma\n-\t   >> __x._M_saved >> __x._M_saved_available;\n+      __is >> __x._M_saved_available >> __x._M_mean\n+\t   >> __x._M_sigma;\n+      if (__x._M_saved_available)\n+\t__is >> __x._M_saved;\n \n       __is.flags(__flags);\n       return __is;"}, {"sha": "4cf8d85f87161451adddaaff9b34f144dfd0c089", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/poisson_distribution/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fpoisson_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fpoisson_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fpoisson_distribution%2Frequirements%2Ftypedefs.cc?ref=bbddd5d0c275d744b9b1f0fc3c5078d0fd12840a", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+//\n+// 2006-08-13  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.7.4 Class template poisson_distribution [tr.rand.dist.pois]\n+// 5.1.1 [7] Table 17\n+\n+#include <tr1/random>\n+\n+void\n+test01() \n+{ \n+  using namespace std::tr1;\n+\n+  typedef poisson_distribution<int, double> test_type;\n+\n+  typedef test_type::input_type  input_type;\n+  typedef test_type::result_type result_type;\n+}"}]}