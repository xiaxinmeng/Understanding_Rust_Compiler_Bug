{"sha": "18a90182e3204fe9418addfd3824d7ca68007128", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThhOTAxODJlMzIwNGZlOTQxOGFkZGZkMzgyNGQ3Y2E2ODAwNzEyOA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "crux@pool.informatik.rwth-aachen.de", "date": "1998-10-14T01:21:06Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-10-14T01:21:06Z"}, "message": "reload1.c (maybe_fix_stack_asms): New static function.\n\n\t* reload1.c (maybe_fix_stack_asms): New static function.\n\t(reload): Call it.\n\nFrom-SVN: r23075", "tree": {"sha": "c4a397994dfab113e27e01b53436dba983f876f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4a397994dfab113e27e01b53436dba983f876f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18a90182e3204fe9418addfd3824d7ca68007128", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18a90182e3204fe9418addfd3824d7ca68007128", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18a90182e3204fe9418addfd3824d7ca68007128", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18a90182e3204fe9418addfd3824d7ca68007128/comments", "author": null, "committer": null, "parents": [{"sha": "7609e7209a9078fec27fa04108cb5b8173911cbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7609e7209a9078fec27fa04108cb5b8173911cbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7609e7209a9078fec27fa04108cb5b8173911cbe"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "9351a57c3e770c082b0adbaad823b7435f1ab63a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18a90182e3204fe9418addfd3824d7ca68007128/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18a90182e3204fe9418addfd3824d7ca68007128/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18a90182e3204fe9418addfd3824d7ca68007128", "patch": "@@ -1,5 +1,8 @@\n Tue Oct 13 22:12:11 1998  Bernd Schmidt <crux@pool.informatik.rwth-aachen.de>\n \n+\t* reload1.c (maybe_fix_stack_asms): New static function.\n+\t(reload): Call it.\n+\n \t* reload.h (compute_use_by_pseudos): Declare.\n \n \t* reload1.c (spilled_pseudos, insns_need_reload): New variables."}, {"sha": "34f495468cce18bba1859dd3da99aec53bd9d1af", "filename": "gcc/reload1.c", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18a90182e3204fe9418addfd3824d7ca68007128/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18a90182e3204fe9418addfd3824d7ca68007128/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=18a90182e3204fe9418addfd3824d7ca68007128", "patch": "@@ -357,6 +357,7 @@ static int num_labels;\n struct hard_reg_n_uses { int regno; int uses; };\n \f\n static void dump_needs\t\t\tPROTO((FILE *));\n+static void maybe_fix_stack_asms\tPROTO((void));\n static int calculate_needs_all_insns\tPROTO((int));\n static int calculate_needs\t\tPROTO((struct insn_chain *, rtx, int));\n static int find_reload_regs\t\tPROTO((int, FILE *));\n@@ -868,6 +869,8 @@ reload (first, global, dumpfile)\n \n   order_regs_for_reload ();\n \n+  maybe_fix_stack_asms ();\n+\n   /* So far, no hard regs have been spilled.  */\n   n_spills = 0;\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n@@ -1280,6 +1283,119 @@ reload (first, global, dumpfile)\n   return failure;\n }\n \n+/* Yet another special case.  Unfortunately, reg-stack forces people to\n+   write incorrect clobbers in asm statements.  These clobbers must not\n+   cause the register to appear in bad_spill_regs, otherwise we'll call\n+   fatal_insn later.  We clear the corresponding regnos in the live\n+   register sets to avoid this.\n+   The whole thing is rather sick, I'm afraid.  */\n+static void\n+maybe_fix_stack_asms ()\n+{\n+#ifdef STACK_REGS\n+  char *constraints[MAX_RECOG_OPERANDS];\n+  enum machine_mode operand_mode[MAX_RECOG_OPERANDS];\n+  struct insn_chain *chain;\n+\n+  for (chain = reload_insn_chain; chain != 0; chain = chain->next)\n+    {\n+      int i, noperands;\n+      HARD_REG_SET clobbered, allowed;\n+      rtx pat;\n+\n+      if (GET_RTX_CLASS (GET_CODE (chain->insn)) != 'i'\n+\t  || (noperands = asm_noperands (PATTERN (chain->insn))) < 0)\n+\tcontinue;\n+      pat = PATTERN (chain->insn);\n+      if (GET_CODE (pat) != PARALLEL)\n+\tcontinue;\n+\n+      CLEAR_HARD_REG_SET (clobbered);\n+      CLEAR_HARD_REG_SET (allowed);\n+\n+      /* First, make a mask of all stack regs that are clobbered.  */\n+      for (i = 0; i < XVECLEN (pat, 0); i++)\n+\t{\n+\t  rtx t = XVECEXP (pat, 0, i);\n+\t  if (GET_CODE (t) == CLOBBER && STACK_REG_P (XEXP (t, 0)))\n+\t    SET_HARD_REG_BIT (clobbered, REGNO (XEXP (t, 0)));\n+\t}\n+\n+      /* Get the operand values and constraints out of the insn.  */\n+      decode_asm_operands (pat, recog_operand, recog_operand_loc,\n+\t\t\t   constraints, operand_mode);\n+\n+      /* For every operand, see what registers are allowed.  */\n+      for (i = 0; i < noperands; i++)\n+\t{\n+\t  char *p = constraints[i];\n+\t  /* For every alternative, we compute the class of registers allowed\n+\t     for reloading in CLS, and merge its contents into the reg set\n+\t     ALLOWED.  */\n+\t  int cls = (int) NO_REGS;\n+\n+\t  for (;;)\n+\t    {\n+\t      char c = *p++;\n+\n+\t      if (c == '\\0' || c == ',' || c == '#')\n+\t\t{\n+\t\t  /* End of one alternative - mark the regs in the current\n+\t\t     class, and reset the class.  */\n+\t\t  IOR_HARD_REG_SET (allowed, reg_class_contents[cls]);\n+\t\t  cls = NO_REGS;\n+\t\t  if (c == '#')\n+\t\t    do {\n+\t\t      c = *p++;\n+\t\t    } while (c != '\\0' && c != ',');\n+\t\t  if (c == '\\0')\n+\t\t    break;\n+\t\t  continue;\n+\t\t}\n+\n+\t      switch (c)\n+\t\t{\n+\t\tcase '=': case '+': case '*': case '%': case '?': case '!':\n+\t\tcase '0': case '1': case '2': case '3': case '4': case 'm':\n+\t\tcase '<': case '>': case 'V': case 'o': case '&': case 'E':\n+\t\tcase 'F': case 's': case 'i': case 'n': case 'X': case 'I':\n+\t\tcase 'J': case 'K': case 'L': case 'M': case 'N': case 'O':\n+\t\tcase 'P':\n+#ifdef EXTRA_CONSTRAINT\n+\t\tcase 'Q': case 'R': case 'S': case 'T': case 'U':\n+#endif\n+\t\t  break;\n+\n+\t\tcase 'p':\n+\t\t  cls = (int) reg_class_subunion[cls][(int) BASE_REG_CLASS];\n+\t\t  break;\n+\n+\t\tcase 'g':\n+\t\tcase 'r':\n+\t\t  cls = (int) reg_class_subunion[cls][(int) GENERAL_REGS];\n+\t\t  break;\n+\n+\t\tdefault:\n+\t\t  cls = (int) reg_class_subunion[cls][(int) REG_CLASS_FROM_LETTER (c)];\n+\t\t\n+\t\t}\n+\t    }\n+\t}\n+      /* Those of the registers which are clobbered, but allowed by the\n+\t constraints, must be usable as reload registers.  So clear them\n+\t out of the life information.  */\n+      AND_HARD_REG_SET (allowed, clobbered);\n+      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+\tif (TEST_HARD_REG_BIT (allowed, i))\n+\t  {\n+\t    CLEAR_REGNO_REG_SET (chain->live_before, i);\n+\t    CLEAR_REGNO_REG_SET (chain->live_after, i);\n+\t  }\n+    }\n+\n+#endif\n+}\n+\n /* Walk the insns of the current function, starting with FIRST, and collect\n    information about the need to do register elimination and the need to\n    perform reloads.  */"}]}