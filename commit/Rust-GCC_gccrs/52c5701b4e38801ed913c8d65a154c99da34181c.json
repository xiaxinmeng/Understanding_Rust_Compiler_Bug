{"sha": "52c5701b4e38801ed913c8d65a154c99da34181c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJjNTcwMWI0ZTM4ODAxZWQ5MTNjOGQ2NWExNTRjOTlkYTM0MTgxYw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-09-21T20:34:43Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-09-21T20:34:43Z"}, "message": "reg-notes.def (REG_DEP_TRUE): New entry, place first so it gets value 0.\n\n\t* reg-notes.def (REG_DEP_TRUE): New entry, place first so it\n\tgets value 0.\n\t* print-rtl.c (print_rtx): Print the name of a REG_NOTE even\n\tif it has value 0.\n\nFrom-SVN: r87821", "tree": {"sha": "5732b65d4f290578782bc61fdb3bd2b831e92877", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5732b65d4f290578782bc61fdb3bd2b831e92877"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52c5701b4e38801ed913c8d65a154c99da34181c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c5701b4e38801ed913c8d65a154c99da34181c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c5701b4e38801ed913c8d65a154c99da34181c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c5701b4e38801ed913c8d65a154c99da34181c/comments", "author": null, "committer": null, "parents": [{"sha": "938806922d7f2bc14ccfb8a87aed2af4de529236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/938806922d7f2bc14ccfb8a87aed2af4de529236", "html_url": "https://github.com/Rust-GCC/gccrs/commit/938806922d7f2bc14ccfb8a87aed2af4de529236"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "fd4e6526db458f74f93c7e200709535a2d273182", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c5701b4e38801ed913c8d65a154c99da34181c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c5701b4e38801ed913c8d65a154c99da34181c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52c5701b4e38801ed913c8d65a154c99da34181c", "patch": "@@ -1,5 +1,12 @@\n+2004-09-21  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* reg-notes.def (REG_DEP_TRUE): New entry, place first so it\n+\tgets value 0.\n+\t* print-rtl.c (print_rtx): Print the name of a REG_NOTE even\n+\tif it has value 0.\n+\n 2004-09-21  Daniel Berlin <dberlin@dberlin.org>\n-\t\n+\n \t* c-typeck.c (build_function_call): Give name of object\n \twe are attempting to call in error message.\n \t* c-objc-common.c (c_tree_printer): Call pp_expression,\n@@ -30,7 +37,7 @@\n \tprecedence of stripped constant.\n \n 2004-09-20 Jeff Law  <law@redhat.com>\n-           Jan Hubicka  <jh@suse.cz>\n+\t   Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssanames.c (make_ssa_name): No longer need to clear, then\n \tinitialize key elements here."}, {"sha": "b4b2ca36fb5191acd84e742fc2c4bc3978447905", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c5701b4e38801ed913c8d65a154c99da34181c/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c5701b4e38801ed913c8d65a154c99da34181c/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=52c5701b4e38801ed913c8d65a154c99da34181c", "patch": "@@ -186,16 +186,15 @@ print_rtx (rtx in_rtx)\n \t  if (RTX_FLAG (in_rtx, return_val))\n \t    fputs (\"/i\", outfile);\n \n-\t  if (GET_MODE (in_rtx) != VOIDmode)\n-\t    {\n-\t      /* Print REG_NOTE names for EXPR_LIST and INSN_LIST.  */\n-\t      if (GET_CODE (in_rtx) == EXPR_LIST\n-\t\t  || GET_CODE (in_rtx) == INSN_LIST)\n-\t\tfprintf (outfile, \":%s\",\n-\t\t\t GET_REG_NOTE_NAME (GET_MODE (in_rtx)));\n-\t      else\n-\t\tfprintf (outfile, \":%s\", GET_MODE_NAME (GET_MODE (in_rtx)));\n-\t    }\n+\t  /* Print REG_NOTE names for EXPR_LIST and INSN_LIST.  */\n+\t  if (GET_CODE (in_rtx) == EXPR_LIST\n+\t      || GET_CODE (in_rtx) == INSN_LIST)\n+\t    fprintf (outfile, \":%s\",\n+\t\t     GET_REG_NOTE_NAME (GET_MODE (in_rtx)));\n+\n+\t  /* For other rtl, print the mode if it's not VOID.  */\n+\t  else if (GET_MODE (in_rtx) != VOIDmode)\n+\t    fprintf (outfile, \":%s\", GET_MODE_NAME (GET_MODE (in_rtx)));\n \t}\n     }\n "}, {"sha": "85a122f65328c7759d1b8ea48fb057446d4c5c73", "filename": "gcc/reg-notes.def", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c5701b4e38801ed913c8d65a154c99da34181c/gcc%2Freg-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c5701b4e38801ed913c8d65a154c99da34181c/gcc%2Freg-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-notes.def?ref=52c5701b4e38801ed913c8d65a154c99da34181c", "patch": "@@ -26,6 +26,12 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Shorthand.  */\n #define REG_NOTE(NAME) DEF_REG_NOTE (REG_##NAME)\n \n+/* REG_DEP_TRUE is used in LOG_LINKS to represent a read-after-write\n+   dependency (i.e. a true data dependency).  This is here, not\n+   grouped with REG_DEP_ANTI and REG_DEP_OUTPUT, because some passes\n+   use a literal 0 for it.  */\n+REG_NOTE (DEP_TRUE)\n+\n /* The value in REG dies in this insn (i.e., it is not needed past\n    this insn).  If REG is set in this insn, the REG_DEAD note may,\n    but need not, be omitted.  */\n@@ -92,9 +98,7 @@ REG_NOTE (CC_USER)\n REG_NOTE (LABEL)\n \n /* REG_DEP_ANTI and REG_DEP_OUTPUT are used in LOG_LINKS to represent\n-   write-after-read and write-after-write dependencies respectively.\n-   Data dependencies, which are the only type of LOG_LINK created by\n-   flow, are represented by a 0 reg note kind.  */\n+   write-after-read and write-after-write dependencies respectively.  */\n REG_NOTE (DEP_ANTI)\n REG_NOTE (DEP_OUTPUT)\n "}]}