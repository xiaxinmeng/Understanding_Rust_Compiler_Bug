{"sha": "0c604a61a3ea932bc4cf17f543d014c740c4a28a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM2MDRhNjFhM2VhOTMyYmM0Y2YxN2Y1NDNkMDE0Yzc0MGM0YTI4YQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2012-11-15T16:49:45Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2012-11-15T16:49:45Z"}, "message": "re PR tree-optimization/54619 (GCC aborts during compilation with '-O2 -mips16')\n\n2012-11-15  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/54619\n\t* tree-ssa-loop-ivopts.c (get_use_type): New function.\n\t(get_computation_at): Use get_use_type.\n\t(get_computation_cost_at): Declare and set mem_mode.  Use mem_mode.\n\nFrom-SVN: r193537", "tree": {"sha": "018eecc9d64d2d8d0bfb03c5e3c4de2f6a450fcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/018eecc9d64d2d8d0bfb03c5e3c4de2f6a450fcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c604a61a3ea932bc4cf17f543d014c740c4a28a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c604a61a3ea932bc4cf17f543d014c740c4a28a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c604a61a3ea932bc4cf17f543d014c740c4a28a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c604a61a3ea932bc4cf17f543d014c740c4a28a/comments", "author": null, "committer": null, "parents": [{"sha": "f0e10e243e96e55be6e10b91f554b20811d8f0fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e10e243e96e55be6e10b91f554b20811d8f0fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0e10e243e96e55be6e10b91f554b20811d8f0fc"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "cecf13ed8ecf217fbfb6a38cd72002dc8da60c15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c604a61a3ea932bc4cf17f543d014c740c4a28a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c604a61a3ea932bc4cf17f543d014c740c4a28a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c604a61a3ea932bc4cf17f543d014c740c4a28a", "patch": "@@ -1,3 +1,10 @@\n+2012-11-15  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/54619\n+\t* tree-ssa-loop-ivopts.c (get_use_type): New function.\n+\t(get_computation_at): Use get_use_type.\n+\t(get_computation_cost_at): Declare and set mem_mode.  Use mem_mode.\n+\n 2012-11-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* asan.c (report_error_func): Set DECL_IGNORED_P, don't touch"}, {"sha": "040885f5ade503eb1bf4c8eba3f7bca2def8869c", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c604a61a3ea932bc4cf17f543d014c740c4a28a/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c604a61a3ea932bc4cf17f543d014c740c4a28a/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=0c604a61a3ea932bc4cf17f543d014c740c4a28a", "patch": "@@ -3009,6 +3009,28 @@ get_computation_aff (struct loop *loop,\n   return true;\n }\n \n+/* Return the type of USE.  */\n+\n+static tree\n+get_use_type (struct iv_use *use)\n+{\n+  tree base_type = TREE_TYPE (use->iv->base);\n+  tree type;\n+\n+  if (use->type == USE_ADDRESS)\n+    {\n+      /* The base_type may be a void pointer.  Create a pointer type based on\n+\t the mem_ref instead.  */\n+      type = build_pointer_type (TREE_TYPE (*use->op_p));\n+      gcc_assert (TYPE_ADDR_SPACE (TREE_TYPE (type))\n+\t\t  == TYPE_ADDR_SPACE (TREE_TYPE (base_type)));\n+    }\n+  else\n+    type = base_type;\n+\n+  return type;\n+}\n+\n /* Determines the expression by that USE is expressed from induction variable\n    CAND at statement AT in LOOP.  The computation is unshared.  */\n \n@@ -3017,7 +3039,7 @@ get_computation_at (struct loop *loop,\n \t\t    struct iv_use *use, struct iv_cand *cand, gimple at)\n {\n   aff_tree aff;\n-  tree type = TREE_TYPE (use->iv->base);\n+  tree type = get_use_type (use);\n \n   if (!get_computation_aff (loop, use, cand, at, &aff))\n     return NULL_TREE;\n@@ -3934,6 +3956,9 @@ get_computation_cost_at (struct ivopts_data *data,\n   comp_cost cost;\n   double_int rat;\n   bool speed = optimize_bb_for_speed_p (gimple_bb (at));\n+  enum machine_mode mem_mode = (address_p\n+\t\t\t\t? TYPE_MODE (TREE_TYPE (*use->op_p))\n+\t\t\t\t: VOIDmode);\n \n   *depends_on = NULL;\n \n@@ -4041,7 +4066,7 @@ get_computation_cost_at (struct ivopts_data *data,\n   else if (address_p\n \t   && !POINTER_TYPE_P (ctype)\n \t   && multiplier_allowed_in_address_p\n-\t\t(ratio, TYPE_MODE (TREE_TYPE (utype)),\n+\t\t(ratio, mem_mode,\n \t\t\tTYPE_ADDR_SPACE (TREE_TYPE (utype))))\n     {\n       cbase\n@@ -4085,7 +4110,7 @@ get_computation_cost_at (struct ivopts_data *data,\n     return add_costs (cost,\n \t\t      get_address_cost (symbol_present, var_present,\n \t\t\t\t\toffset, ratio, cstepi,\n-\t\t\t\t\tTYPE_MODE (TREE_TYPE (utype)),\n+\t\t\t\t\tmem_mode,\n \t\t\t\t\tTYPE_ADDR_SPACE (TREE_TYPE (utype)),\n \t\t\t\t\tspeed, stmt_is_after_inc,\n \t\t\t\t\tcan_autoinc));"}]}