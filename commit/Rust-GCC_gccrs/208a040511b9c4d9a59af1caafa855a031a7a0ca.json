{"sha": "208a040511b9c4d9a59af1caafa855a031a7a0ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA4YTA0MDUxMWI5YzRkOWE1OWFmMWNhYWZhODU1YTAzMWE3YTBjYQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-06-04T16:28:46Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-06-04T16:28:46Z"}, "message": "rs6000: wv -> v+p7v\n\n\"wv\" is \"v\", but only if VSX is enabled (otherwise it's NO_REGS).  So\nthis patch sets \"isa\" \"p7v\" to all alternatives that used \"wv\" before\n(and that do not already need a later ISA), and changes the constraint.\n\n\n\t* config/rs6000/constraints.md (define_register_constraint \"wv\"):\n\tDelete.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n\t(rs6000_init_hard_regno_mode_ok): Adjust.\n\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n\tRS6000_CONSTRAINT_wv.\n\t* config/rs6000/rs6000.md: Adjust.\n\t* config/rs6000/vsx.md: Adjust.\n\t* doc/md.texi (Machine Constraints): Adjust.\n\nFrom-SVN: r271915", "tree": {"sha": "1f60b3ad5ca8a3a7b4e5a1c7c5436d302f1300b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f60b3ad5ca8a3a7b4e5a1c7c5436d302f1300b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/208a040511b9c4d9a59af1caafa855a031a7a0ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/208a040511b9c4d9a59af1caafa855a031a7a0ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/208a040511b9c4d9a59af1caafa855a031a7a0ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/208a040511b9c4d9a59af1caafa855a031a7a0ca/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e670418ff18f36f81f3f619c34578da03d102694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e670418ff18f36f81f3f619c34578da03d102694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e670418ff18f36f81f3f619c34578da03d102694"}], "stats": {"total": 65, "additions": 33, "deletions": 32}, "files": [{"sha": "3e7683d5bebd2a8156edca1881b9d76e14a2eb52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/208a040511b9c4d9a59af1caafa855a031a7a0ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/208a040511b9c4d9a59af1caafa855a031a7a0ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=208a040511b9c4d9a59af1caafa855a031a7a0ca", "patch": "@@ -1,3 +1,15 @@\n+2019-06-04  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (define_register_constraint \"wv\"):\n+\tDelete.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n+\t(rs6000_init_hard_regno_mode_ok): Adjust.\n+\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n+\tRS6000_CONSTRAINT_wv.\n+\t* config/rs6000/rs6000.md: Adjust.\n+\t* config/rs6000/vsx.md: Adjust.\n+\t* doc/md.texi (Machine Constraints): Adjust.\n+\n 2019-06-04  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/constraints.md (define_register_constraint \"wi\"):"}, {"sha": "afc071f1c5eb3bf75c2fd0f098da4aa20086cd08", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/208a040511b9c4d9a59af1caafa855a031a7a0ca/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/208a040511b9c4d9a59af1caafa855a031a7a0ca/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=208a040511b9c4d9a59af1caafa855a031a7a0ca", "patch": "@@ -85,9 +85,6 @@\n (define_register_constraint \"ws\" \"rs6000_constraints[RS6000_CONSTRAINT_ws]\"\n   \"VSX vector register to hold scalar double values or NO_REGS.\")\n \n-(define_register_constraint \"wv\" \"rs6000_constraints[RS6000_CONSTRAINT_wv]\"\n-  \"Altivec register to use for double loads/stores  or NO_REGS.\")\n-\n (define_register_constraint \"ww\" \"rs6000_constraints[RS6000_CONSTRAINT_ww]\"\n   \"FP or VSX register to perform float operations under -mvsx or NO_REGS.\")\n "}, {"sha": "42a72d864c15093358bf169bd92eaf59ed9467de", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/208a040511b9c4d9a59af1caafa855a031a7a0ca/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/208a040511b9c4d9a59af1caafa855a031a7a0ca/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=208a040511b9c4d9a59af1caafa855a031a7a0ca", "patch": "@@ -2515,7 +2515,6 @@ rs6000_debug_reg_global (void)\n \t   \"wq reg_class = %s\\n\"\n \t   \"wr reg_class = %s\\n\"\n \t   \"ws reg_class = %s\\n\"\n-\t   \"wv reg_class = %s\\n\"\n \t   \"ww reg_class = %s\\n\"\n \t   \"wx reg_class = %s\\n\"\n \t   \"wA reg_class = %s\\n\"\n@@ -2531,7 +2530,6 @@ rs6000_debug_reg_global (void)\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wq]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wr]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_ws]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wv]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_ww]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wx]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wA]]);\n@@ -3147,7 +3145,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \twn - always NO_REGS.\n \twr - GPR if 64-bit mode is permitted.\n \tws - Register class to do ISA 2.06 DF operations.\n-\twv - Altivec register for ISA 2.06 VSX DF/DI load/stores.\n \tww - Register class to do SF conversions in with VSX operations.\n \twx - Float register if we can do 32-bit int stores.  */\n \n@@ -3163,7 +3160,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n       rs6000_constraints[RS6000_CONSTRAINT_wd] = VSX_REGS;\t/* V2DFmode  */\n       rs6000_constraints[RS6000_CONSTRAINT_wf] = VSX_REGS;\t/* V4SFmode  */\n       rs6000_constraints[RS6000_CONSTRAINT_ws] = VSX_REGS;\t/* DFmode  */\n-      rs6000_constraints[RS6000_CONSTRAINT_wv] = ALTIVEC_REGS;\t/* DFmode  */\n     }\n \n   /* Add conditional constraints based on various options, to allow us to"}, {"sha": "c91854a458b9feceed08977b3f1027c6c461230f", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/208a040511b9c4d9a59af1caafa855a031a7a0ca/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/208a040511b9c4d9a59af1caafa855a031a7a0ca/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=208a040511b9c4d9a59af1caafa855a031a7a0ca", "patch": "@@ -1263,7 +1263,6 @@ enum r6000_reg_class_enum {\n   RS6000_CONSTRAINT_wq,\t\t/* VSX reg for IEEE 128-bit fp KFmode.  */\n   RS6000_CONSTRAINT_wr,\t\t/* GPR register if 64-bit  */\n   RS6000_CONSTRAINT_ws,\t\t/* VSX register for DF */\n-  RS6000_CONSTRAINT_wv,\t\t/* Altivec register for double load/stores.  */\n   RS6000_CONSTRAINT_ww,\t\t/* FP or VSX register for vsx float ops.  */\n   RS6000_CONSTRAINT_wx,\t\t/* FPR register for STFIWX */\n   RS6000_CONSTRAINT_wA,\t\t/* BASE_REGS if 64-bit.  */"}, {"sha": "45e03479b777014a316192d494407d5e13208f54", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/208a040511b9c4d9a59af1caafa855a031a7a0ca/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/208a040511b9c4d9a59af1caafa855a031a7a0ca/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=208a040511b9c4d9a59af1caafa855a031a7a0ca", "patch": "@@ -475,7 +475,7 @@\n (define_mode_attr f64_dm  [(DF \"ws\") (DD \"d\")])\n \n ; Definitions for 64-bit use of altivec registers\n-(define_mode_attr f64_av  [(DF \"wv\") (DD \"wn\")])\n+(define_mode_attr f64_av  [(DF \"v\") (DD \"wn\")])\n \n ; Definitions for 64-bit access to ISA 3.0 (power9) vector\n (define_mode_attr f64_p9  [(DF \"v\") (DD \"wn\")])\n@@ -7611,7 +7611,7 @@\n              8,           8,          8\")\n    (set_attr \"isa\"\n             \"*,           *,          *,          p9v,        p9v,\n-             *,           *,          *,          *,          *,\n+             p7v,         p7v,        *,          *,          *,\n              *,           *,          *\")])\n \n ;;           STW      LWZ     MR      G-const H-const F-const\n@@ -7682,7 +7682,7 @@\n    (set_attr \"size\" \"64\")\n    (set_attr \"isa\"\n             \"*,           *,          *,          p9v,        p9v,\n-             *,           *,          *,          *,          *,\n+             p7v,         p7v,        *,          *,          *,\n              *,           *,          *,          *,          *,\n              *,           p8v,        p8v\")])\n \n@@ -8742,12 +8742,12 @@\n (define_insn \"*movdi_internal32\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n          \"=Y,        r,         r,         m,         ^d,        ^d,\n-          r,         wY,        Z,         ^v,        $wv,       ^wa,\n-          wa,        wa,        wv,        wa,        *i,        wv,\n-          wv\")\n+          r,         wY,        Z,         ^v,        $v,        ^wa,\n+          wa,        wa,        v,         wa,        *i,        v,\n+          v\")\n \t(match_operand:DI 1 \"input_operand\"\n          \"r,         Y,         r,         ^d,        m,         ^d,\n-          IJKnF,     ^v,        $wv,       wY,        Z,         ^wa,\n+          IJKnF,     ^v,        $v,        wY,        Z,         ^wa,\n           Oj,        wM,        OjwM,      Oj,        wM,        wS,\n           wB\"))]\n   \"! TARGET_POWERPC64\n@@ -8786,9 +8786,9 @@\n           4\")\n    (set_attr \"isa\"\n          \"*,         *,         *,         *,         *,         *,\n-          *,         p9v,       *,         p9v,       *,         *,\n-          p9v,       p9v,       *,         *,         *,         *,\n-          *\")])\n+          *,         p9v,       p7v,       p9v,       p7v,       *,\n+          p9v,       p9v,       p7v,       *,         *,         p7v,\n+          p7v\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"gpc_reg_operand\")\n@@ -8826,12 +8826,12 @@\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n                \"=YZ,       r,         r,         r,         r,          r,\n                 m,         ^d,        ^d,        wY,        Z,          $v,\n-                $wv,       ^wa,       wa,        wa,        wv,         wa,\n-                wa,        wv,        wv,        r,         *h,         *h,\n+                $v,        ^wa,       wa,        wa,        v,          wa,\n+                wa,        v,         v,         r,         *h,         *h,\n                 ?r,        ?wa\")\n \t(match_operand:DI 1 \"input_operand\"\n                \"r,         YZ,        r,         I,         L,          nF,\n-                ^d,        m,         ^d,        ^v,        $wv,        wY,\n+                ^d,        m,         ^d,        ^v,        $v,         wY,\n                 Z,         ^wa,       Oj,        wM,        OjwM,       Oj,\n                 wM,        wS,        wB,        *h,        r,          0,\n                 wa,        r\"))]\n@@ -8880,9 +8880,9 @@\n                 4,         4\")\n    (set_attr \"isa\"\n                \"*,         *,         *,         *,         *,          *,\n-                *,         *,         *,         p9v,       *,          p9v,\n-                *,         *,         p9v,       p9v,       *,          *,\n-                *,         *,         *,         *,         *,          *,\n+                *,         *,         *,         p9v,       p7v,        p9v,\n+                p7v,       *,         p9v,       p9v,       p7v,        *,\n+                *,         p7v,       p7v,       *,         *,          *,\n                 p8v,       p8v\")])\n \n ; Some DImode loads are best done as a load of -1 followed by a mask"}, {"sha": "bc121582f7d54035f9ddadba3f6c3a9a1ae9e5c4", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/208a040511b9c4d9a59af1caafa855a031a7a0ca/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/208a040511b9c4d9a59af1caafa855a031a7a0ca/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=208a040511b9c4d9a59af1caafa855a031a7a0ca", "patch": "@@ -3273,15 +3273,15 @@\n (define_insn \"*vsx_extract_<mode>_store\"\n   [(set (match_operand:<VS_scalar> 0 \"memory_operand\" \"=m,Z,wY\")\n \t(vec_select:<VS_scalar>\n-\t (match_operand:VSX_D 1 \"register_operand\" \"d,wv,v\")\n+\t (match_operand:VSX_D 1 \"register_operand\" \"d,v,v\")\n \t (parallel [(match_operand:QI 2 \"vsx_scalar_64bit\" \"wD,wD,wD\")])))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n   \"@\n    stfd%U0%X0 %1,%0\n    stxsdx %x1,%y0\n    stxsd %1,%0\"\n   [(set_attr \"type\" \"fpstore\")\n-   (set_attr \"isa\" \"*,*,p9v\")])\n+   (set_attr \"isa\" \"*,p7v,p9v\")])\n \n ;; Variable V2DI/V2DF extract shift\n (define_insn \"vsx_vslo_<mode>\"\n@@ -3346,7 +3346,7 @@\n    (set_attr \"type\" \"fp\")])\n \n (define_insn_and_split \"*vsx_extract_v4sf_<mode>_load\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,wv,v,?r\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f,v,v,?r\")\n \t(vec_select:SF\n \t (match_operand:V4SF 1 \"memory_operand\" \"m,Z,m,m\")\n \t (parallel [(match_operand:QI 2 \"const_0_to_3_operand\" \"n,n,n,n\")])))\n@@ -3361,7 +3361,7 @@\n }\n   [(set_attr \"type\" \"fpload,fpload,fpload,load\")\n    (set_attr \"length\" \"8\")\n-   (set_attr \"isa\" \"*,*,p9v,*\")])\n+   (set_attr \"isa\" \"*,p7v,p9v,*\")])\n \n ;; Variable V4SF extract\n (define_insn_and_split \"vsx_extract_v4sf_var\""}, {"sha": "0fbe332c64ad3124fede31c46e242d7218ee33bc", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/208a040511b9c4d9a59af1caafa855a031a7a0ca/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/208a040511b9c4d9a59af1caafa855a031a7a0ca/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=208a040511b9c4d9a59af1caafa855a031a7a0ca", "patch": "@@ -3197,7 +3197,7 @@ Altivec vector register\n Any VSX register if the @option{-mvsx} option was used or NO_REGS.\n \n When using any of the register constraints (@code{wa}, @code{wd}, @code{wf},\n-@code{wp}, @code{wq}, @code{ws}, @code{wv}, or @code{ww})\n+@code{wp}, @code{wq}, @code{ws}, or @code{ww})\n that take VSX registers, you must use @code{%x<n>} in the template so\n that the correct register is used.  Otherwise the register number\n output in the assembly file will be incorrect if an Altivec register\n@@ -3269,9 +3269,6 @@ General purpose register if 64-bit instructions are enabled or NO_REGS.\n @item ws\n VSX vector register to hold scalar double values or NO_REGS.\n \n-@item wv\n-Altivec register to use for double loads/stores  or NO_REGS.\n-\n @item ww\n FP or VSX register to perform float operations under @option{-mvsx} or NO_REGS.\n "}]}