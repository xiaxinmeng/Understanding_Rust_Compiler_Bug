{"sha": "56dbd05b0ed265ec37f66234487aaad6e330c7ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZkYmQwNWIwZWQyNjVlYzM3ZjY2MjM0NDg3YWFhZDZlMzMwYzdjZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-01-23T19:30:32Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-01-23T19:30:32Z"}, "message": "i386: Use const reference of struct ix86_frame to avoid copy\n\nWe can use const reference of struct ix86_frame to avoid making a local\ncopy of ix86_frame.  ix86_expand_epilogue makes a local copy of struct\nix86_frame and uses the reg_save_offset field as a local variable.  This\npatch uses a separate local variable for reg_save_offset.\n\nTested on x86-64 with ada.\n\n\tPR target/83905\n\t* config/i386/i386.c (ix86_expand_prologue): Use cost reference\n\tof struct ix86_frame.\n\t(ix86_expand_epilogue): Likewise.  Add a local variable for\n\tthe reg_save_offset field in struct ix86_frame.\n\nFrom-SVN: r256996", "tree": {"sha": "8753b6e58fcf8b59cdc63f9748f6f99d97c1b9dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8753b6e58fcf8b59cdc63f9748f6f99d97c1b9dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56dbd05b0ed265ec37f66234487aaad6e330c7ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56dbd05b0ed265ec37f66234487aaad6e330c7ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56dbd05b0ed265ec37f66234487aaad6e330c7ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56dbd05b0ed265ec37f66234487aaad6e330c7ce/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f59986b285e3dff07f847c5a680f6f9e0b9520f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f59986b285e3dff07f847c5a680f6f9e0b9520f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f59986b285e3dff07f847c5a680f6f9e0b9520f0"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "04de55440f5ecd8b2ffcbaf3f8c6c624f0604d3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56dbd05b0ed265ec37f66234487aaad6e330c7ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56dbd05b0ed265ec37f66234487aaad6e330c7ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56dbd05b0ed265ec37f66234487aaad6e330c7ce", "patch": "@@ -1,3 +1,11 @@\n+2018-01-23  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/83905\n+\t* config/i386/i386.c (ix86_expand_prologue): Use cost reference\n+\tof struct ix86_frame.\n+\t(ix86_expand_epilogue): Likewise.  Add a local variable for\n+\tthe reg_save_offset field in struct ix86_frame.\n+\n 2018-01-23  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/82604"}, {"sha": "101fea6041f9a106743bfac779247aaf0183edcf", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56dbd05b0ed265ec37f66234487aaad6e330c7ce/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56dbd05b0ed265ec37f66234487aaad6e330c7ce/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=56dbd05b0ed265ec37f66234487aaad6e330c7ce", "patch": "@@ -13376,7 +13376,6 @@ ix86_expand_prologue (void)\n {\n   struct machine_function *m = cfun->machine;\n   rtx insn, t;\n-  struct ix86_frame frame;\n   HOST_WIDE_INT allocate;\n   bool int_registers_saved;\n   bool sse_registers_saved;\n@@ -13404,7 +13403,7 @@ ix86_expand_prologue (void)\n   m->fs.sp_valid = true;\n   m->fs.sp_realigned = false;\n \n-  frame = m->frame;\n+  const struct ix86_frame &frame = cfun->machine->frame;\n \n   if (!TARGET_64BIT && ix86_function_ms_hook_prologue (current_function_decl))\n     {\n@@ -14282,7 +14281,6 @@ ix86_expand_epilogue (int style)\n {\n   struct machine_function *m = cfun->machine;\n   struct machine_frame_state frame_state_save = m->fs;\n-  struct ix86_frame frame;\n   bool restore_regs_via_mov;\n   bool using_drap;\n   bool restore_stub_is_tail = false;\n@@ -14295,7 +14293,7 @@ ix86_expand_epilogue (int style)\n     }\n \n   ix86_finalize_stack_frame_flags ();\n-  frame = m->frame;\n+  const struct ix86_frame &frame = cfun->machine->frame;\n \n   m->fs.sp_realigned = stack_realign_fp;\n   m->fs.sp_valid = stack_realign_fp\n@@ -14339,11 +14337,13 @@ ix86_expand_epilogue (int style)\n \t\t\t\t  + UNITS_PER_WORD);\n     }\n \n+  HOST_WIDE_INT reg_save_offset = frame.reg_save_offset;\n+\n   /* Special care must be taken for the normal return case of a function\n      using eh_return: the eax and edx registers are marked as saved, but\n      not restored along this path.  Adjust the save location to match.  */\n   if (crtl->calls_eh_return && style != 2)\n-    frame.reg_save_offset -= 2 * UNITS_PER_WORD;\n+    reg_save_offset -= 2 * UNITS_PER_WORD;\n \n   /* EH_RETURN requires the use of moves to function properly.  */\n   if (crtl->calls_eh_return)\n@@ -14359,11 +14359,11 @@ ix86_expand_epilogue (int style)\n   else if (TARGET_EPILOGUE_USING_MOVE\n \t   && cfun->machine->use_fast_prologue_epilogue\n \t   && (frame.nregs > 1\n-\t       || m->fs.sp_offset != frame.reg_save_offset))\n+\t       || m->fs.sp_offset != reg_save_offset))\n     restore_regs_via_mov = true;\n   else if (frame_pointer_needed\n \t   && !frame.nregs\n-\t   && m->fs.sp_offset != frame.reg_save_offset)\n+\t   && m->fs.sp_offset != reg_save_offset)\n     restore_regs_via_mov = true;\n   else if (frame_pointer_needed\n \t   && TARGET_USE_LEAVE\n@@ -14431,7 +14431,7 @@ ix86_expand_epilogue (int style)\n       rtx t;\n \n       if (frame.nregs)\n-\tix86_emit_restore_regs_using_mov (frame.reg_save_offset, style == 2);\n+\tix86_emit_restore_regs_using_mov (reg_save_offset, style == 2);\n \n       /* eh_return epilogues need %ecx added to the stack pointer.  */\n       if (style == 2)\n@@ -14526,19 +14526,19 @@ ix86_expand_epilogue (int style)\n \t in epilogues.  */\n       if (!m->fs.sp_valid || m->fs.sp_realigned\n  \t  || (TARGET_SEH\n-\t      && (m->fs.sp_offset - frame.reg_save_offset\n+\t      && (m->fs.sp_offset - reg_save_offset\n \t\t  >= SEH_MAX_FRAME_SIZE)))\n \t{\n \t  pro_epilogue_adjust_stack (stack_pointer_rtx, hard_frame_pointer_rtx,\n \t\t\t\t     GEN_INT (m->fs.fp_offset\n-\t\t\t\t\t      - frame.reg_save_offset),\n+\t\t\t\t\t      - reg_save_offset),\n \t\t\t\t     style, false);\n \t}\n-      else if (m->fs.sp_offset != frame.reg_save_offset)\n+      else if (m->fs.sp_offset != reg_save_offset)\n \t{\n \t  pro_epilogue_adjust_stack (stack_pointer_rtx, stack_pointer_rtx,\n \t\t\t\t     GEN_INT (m->fs.sp_offset\n-\t\t\t\t\t      - frame.reg_save_offset),\n+\t\t\t\t\t      - reg_save_offset),\n \t\t\t\t     style,\n \t\t\t\t     m->fs.cfa_reg == stack_pointer_rtx);\n \t}"}]}