{"sha": "6365da9ed071eaa11f25a5a872d5357e66da1db3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM2NWRhOWVkMDcxZWFhMTFmMjVhNWE4NzJkNTM1N2U2NmRhMWRiMw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-04-30T16:59:50Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-04-30T16:59:50Z"}, "message": "[AArch64] Properly handle mvn-register and add EON+shift pattern and cost appropriately\n\n\t* config/aarch64/aarch64.md\n\t(*eor_one_cmpl_<SHIFT:optab><mode>3_alt): New pattern.\n\t(*eor_one_cmpl_<SHIFT:optab>sidi3_alt_ze): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Handle MVN-shift\n\tappropriately.  Handle alternative EON form.\n\nFrom-SVN: r222637", "tree": {"sha": "ddbe75c43b9443e59d54539bb5a312fa69ef7053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddbe75c43b9443e59d54539bb5a312fa69ef7053"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6365da9ed071eaa11f25a5a872d5357e66da1db3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6365da9ed071eaa11f25a5a872d5357e66da1db3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6365da9ed071eaa11f25a5a872d5357e66da1db3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6365da9ed071eaa11f25a5a872d5357e66da1db3/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4"}], "stats": {"total": 72, "additions": 69, "deletions": 3}, "files": [{"sha": "a4569bbc075f4fe98ecc86c503ef3b9316e50117", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6365da9ed071eaa11f25a5a872d5357e66da1db3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6365da9ed071eaa11f25a5a872d5357e66da1db3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6365da9ed071eaa11f25a5a872d5357e66da1db3", "patch": "@@ -1,3 +1,11 @@\n+2015-04-30  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.md\n+\t(*eor_one_cmpl_<SHIFT:optab><mode>3_alt): New pattern.\n+\t(*eor_one_cmpl_<SHIFT:optab>sidi3_alt_ze): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Handle MVN-shift\n+\tappropriately.  Handle alternative EON form.\n+\n 2015-04-30  Renlin Li  <renlin.li@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (vec_shr): Defined as an unspec."}, {"sha": "7579f5b2519eb6d279f2c76bcfe13d9ea709809a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6365da9ed071eaa11f25a5a872d5357e66da1db3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6365da9ed071eaa11f25a5a872d5357e66da1db3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=6365da9ed071eaa11f25a5a872d5357e66da1db3", "patch": "@@ -6049,13 +6049,45 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n       return false;\n \n     case NOT:\n+      x = XEXP (x, 0);\n+      op0 = aarch64_strip_shift (x);\n+\n+      /* MVN-shifted-reg.  */\n+      if (op0 != x)\n+        {\n+          *cost += rtx_cost (op0, (enum rtx_code) code, 0, speed);\n+\n+          if (speed)\n+            *cost += extra_cost->alu.log_shift;\n+\n+          return true;\n+        }\n+      /* EON can have two forms: (xor (not a) b) but also (not (xor a b)).\n+         Handle the second form here taking care that 'a' in the above can\n+         be a shift.  */\n+      else if (GET_CODE (op0) == XOR)\n+        {\n+          rtx newop0 = XEXP (op0, 0);\n+          rtx newop1 = XEXP (op0, 1);\n+          rtx op0_stripped = aarch64_strip_shift (newop0);\n+\n+          *cost += rtx_cost (newop1, (enum rtx_code) code, 1, speed)\n+                   + rtx_cost (op0_stripped, XOR, 0, speed);\n+\n+          if (speed)\n+            {\n+              if (op0_stripped != newop0)\n+                *cost += extra_cost->alu.log_shift;\n+              else\n+                *cost += extra_cost->alu.logical;\n+            }\n+\n+          return true;\n+        }\n       /* MVN.  */\n       if (speed)\n \t*cost += extra_cost->alu.logical;\n \n-      /* The logical instruction could have the shifted register form,\n-         but the cost is the same if the shift is processed as a separate\n-         instruction, so we don't bother with it here.  */\n       return false;\n \n     case ZERO_EXTEND:"}, {"sha": "194bfd3d2bdd4bda69402d28a8af4b641b4fa9f2", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6365da9ed071eaa11f25a5a872d5357e66da1db3/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6365da9ed071eaa11f25a5a872d5357e66da1db3/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=6365da9ed071eaa11f25a5a872d5357e66da1db3", "patch": "@@ -3151,6 +3151,32 @@\n   [(set_attr \"type\" \"logics_shift_imm\")]\n )\n \n+(define_insn \"*eor_one_cmpl_<SHIFT:optab><mode>3_alt\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(not:GPI (xor:GPI\n+\t\t      (SHIFT:GPI\n+\t\t       (match_operand:GPI 1 \"register_operand\" \"r\")\n+\t\t       (match_operand:QI 2 \"aarch64_shift_imm_<mode>\" \"n\"))\n+\t\t     (match_operand:GPI 3 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"eon\\\\t%<w>0, %<w>3, %<w>1, <SHIFT:shift> %2\"\n+  [(set_attr \"type\" \"logic_shift_imm\")]\n+)\n+\n+;; Zero-extend version of the above.\n+(define_insn \"*eor_one_cmpl_<SHIFT:optab>sidi3_alt_ze\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (not:SI (xor:SI\n+\t\t    (SHIFT:SI\n+\t\t      (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t      (match_operand:QI 2 \"aarch64_shift_imm_si\" \"n\"))\n+\t\t    (match_operand:SI 3 \"register_operand\" \"r\")))))]\n+  \"\"\n+  \"eon\\\\t%w0, %w3, %w1, <SHIFT:shift> %2\"\n+  [(set_attr \"type\" \"logic_shift_imm\")]\n+)\n+\n (define_insn \"*and_one_cmpl_<SHIFT:optab><mode>3_compare0\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ"}]}