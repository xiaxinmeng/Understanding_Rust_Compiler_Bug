{"sha": "2bccb817ce335a130252ceabd55524ce1b5ffa93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJjY2I4MTdjZTMzNWExMzAyNTJjZWFiZDU1NTI0Y2UxYjVmZmE5Mw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-06-03T00:43:21Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-06-03T00:43:21Z"}, "message": "m68k.c (m68k_attribute_table): Add \"interrupt\".\n\n\t* config/m68k/m68k.c (m68k_attribute_table): Add \"interrupt\".\n\t(m68k_get_function_kind): Return m68k_fk_interrupt_handler on\n\t\"interrupt\".\n\t* doc/extend.texi (interrupt): Mention m68k.\n\nFrom-SVN: r125290", "tree": {"sha": "9d08f042bc977b44fd461ebd592fa70987105930", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d08f042bc977b44fd461ebd592fa70987105930"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bccb817ce335a130252ceabd55524ce1b5ffa93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bccb817ce335a130252ceabd55524ce1b5ffa93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bccb817ce335a130252ceabd55524ce1b5ffa93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bccb817ce335a130252ceabd55524ce1b5ffa93/comments", "author": null, "committer": null, "parents": [{"sha": "097dbf654dde503a0d2a7e1ae3974291a4161d33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/097dbf654dde503a0d2a7e1ae3974291a4161d33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/097dbf654dde503a0d2a7e1ae3974291a4161d33"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "3f671396097e7f176f712da224e437c2ef392a34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bccb817ce335a130252ceabd55524ce1b5ffa93/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bccb817ce335a130252ceabd55524ce1b5ffa93/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2bccb817ce335a130252ceabd55524ce1b5ffa93", "patch": "@@ -1,3 +1,10 @@\n+2007-06-03  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* config/m68k/m68k.c (m68k_attribute_table): Add \"interrupt\".\n+\t(m68k_get_function_kind): Return m68k_fk_interrupt_handler on\n+\t\"interrupt\".\n+\t* doc/extend.texi (interrupt): Mention m68k.\n+\n 2007-06-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_expand_sse_4_operands_builtin): Call"}, {"sha": "7001e294d1d03a4bfa1f64bb28d6bf33e29c83f3", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bccb817ce335a130252ceabd55524ce1b5ffa93/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bccb817ce335a130252ceabd55524ce1b5ffa93/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=2bccb817ce335a130252ceabd55524ce1b5ffa93", "patch": "@@ -222,6 +222,7 @@ int m68k_last_compare_had_fp_operands;\n static const struct attribute_spec m68k_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n+  { \"interrupt\", 0, 0, true,  false, false, m68k_handle_fndecl_attribute },\n   { \"interrupt_handler\", 0, 0, true,  false, false, m68k_handle_fndecl_attribute },\n   { \"interrupt_thread\", 0, 0, true,  false, false, m68k_handle_fndecl_attribute },\n   { NULL,                0, 0, false, false, false, NULL }\n@@ -634,9 +635,10 @@ m68k_cpp_cpu_family (const char *prefix)\n   return concat (\"__m\", prefix, \"_family_\", m68k_cpu_entry->family, NULL);\n }\n \f\n-/* Return m68k_fk_interrupt_handler if FUNC has an \"interrupt_handler\"\n-   attribute and interrupt_thread if FUNC has an \"interrupt_thread\"\n-   attribute.  Otherwise, return m68k_fk_normal_function.  */\n+/* Return m68k_fk_interrupt_handler if FUNC has an \"interrupt\" or\n+   \"interrupt_handler\" attribute and interrupt_thread if FUNC has an\n+   \"interrupt_thread\" attribute.  Otherwise, return\n+   m68k_fk_normal_function.  */\n \n enum m68k_function_kind\n m68k_get_function_kind (tree func)\n@@ -646,6 +648,10 @@ m68k_get_function_kind (tree func)\n   if (TREE_CODE (func) != FUNCTION_DECL)\n     return false;\n \n+  a = lookup_attribute (\"interrupt\", DECL_ATTRIBUTES (func));\n+  if (a != NULL_TREE)\n+    return m68k_fk_interrupt_handler;\n+\n   a = lookup_attribute (\"interrupt_handler\", DECL_ATTRIBUTES (func));\n   if (a != NULL_TREE)\n     return m68k_fk_interrupt_handler;"}, {"sha": "b652bff248dca79e636c45f0b6073dd2ece7ac3a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bccb817ce335a130252ceabd55524ce1b5ffa93/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bccb817ce335a130252ceabd55524ce1b5ffa93/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2bccb817ce335a130252ceabd55524ce1b5ffa93", "patch": "@@ -2043,12 +2043,13 @@ This attribute is ignored for R8C target.\n \n @item interrupt\n @cindex interrupt handler functions\n-Use this attribute on the ARM, AVR, C4x, CRX, M32C, M32R/D, MS1, and Xstormy16\n-ports to indicate that the specified function is an interrupt handler.\n-The compiler will generate function entry and exit sequences suitable\n-for use in an interrupt handler when this attribute is present.\n+Use this attribute on the ARM, AVR, C4x, CRX, M32C, M32R/D, m68k, MS1,\n+and Xstormy16 ports to indicate that the specified function is an\n+interrupt handler.  The compiler will generate function entry and exit\n+sequences suitable for use in an interrupt handler when this attribute\n+is present.\n \n-Note, interrupt handlers for the Blackfin, m68k, H8/300, H8/300H, H8S, and\n+Note, interrupt handlers for the Blackfin, H8/300, H8/300H, H8S, and\n SH processors can be specified via the @code{interrupt_handler} attribute.\n \n Note, on the AVR, interrupts will be enabled inside the function."}]}