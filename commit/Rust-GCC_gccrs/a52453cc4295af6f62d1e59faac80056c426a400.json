{"sha": "a52453cc4295af6f62d1e59faac80056c426a400", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUyNDUzY2M0Mjk1YWY2ZjYyZDFlNTlmYWFjODAwNTZjNDI2YTQwMA==", "commit": {"author": {"name": "Philipp Thomas", "email": "pthomas@suse.de", "date": "2002-02-17T14:23:53Z"}, "committer": {"name": "Philipp Thomas", "email": "pthomas@gcc.gnu.org", "date": "2002-02-17T14:23:53Z"}, "message": "final.c (output_operand_lossage): Changed to accept printf style arguments.\n\n2002-02-17  Philipp Thomas  <pthomas@suse.de>\n\n\t* final.c (output_operand_lossage): Changed to accept\n\tprintf style arguments. Change calls where necessary.\n\t* output.h (output_operand_lossage): Change declaration\n\taccordingly. Update copyright.\n\t* config/arc/arc.c config/fr30/fr30.c config/m32r/m32r.c\n\tconfig/m88k/m88k.c : Adapt all calls to output_operand_lossage.\n\tUpdate copyright date where necessary.\n\n\t* config/i386/i386.c (print_operand): Likewise. Remove use of\n\tsprintf.\n\n\t* config/cris/cris.c (cris_operand_lossage): Likewise.\n\tRename parameter so that exgettext recognizes it as\n\ttranslatable message.\n\t(LOSE_AND_RETURN): Rename parameter to msgid.\n\n\t* po/gcc.pot: Regenerate.\n\nFrom-SVN: r49820", "tree": {"sha": "03fe05fc78e4acec8f41d3b93c5865ae3c456739", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03fe05fc78e4acec8f41d3b93c5865ae3c456739"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a52453cc4295af6f62d1e59faac80056c426a400", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a52453cc4295af6f62d1e59faac80056c426a400", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a52453cc4295af6f62d1e59faac80056c426a400", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a52453cc4295af6f62d1e59faac80056c426a400/comments", "author": null, "committer": null, "parents": [{"sha": "1c11abc46fe2ef296d8726ee1e0c98359de6f961", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c11abc46fe2ef296d8726ee1e0c98359de6f961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c11abc46fe2ef296d8726ee1e0c98359de6f961"}], "stats": {"total": 3591, "additions": 1205, "deletions": 2386}, "files": [{"sha": "cd30880e35f2d3b400465b1893b7e6166e4e6e94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a52453cc4295af6f62d1e59faac80056c426a400", "patch": "@@ -1,3 +1,21 @@\n+2002-02-17  Philipp Thomas  <pthomas@suse.de>\n+\n+\t* final.c (output_operand_lossage): Changed to accept\n+\tprintf style arguments. Change calls where necessary.\n+\t* output.h (output_operand_lossage): Change declaration\n+\taccordingly. Update copyright.\n+\t* config/arc/arc.c config/fr30/fr30.c config/m32r/m32r.c\n+\tconfig/m88k/m88k.c : Adapt all calls to output_operand_lossage.\n+\tUpdate copyright date where necessary.\n+\t\n+\t* config/i386/i386.c (print_operand): Likewise. Remove use of\n+\tsprintf.\n+\n+\t* config/cris/cris.c (cris_operand_lossage): Likewise.\n+\tRename parameter so that exgettext recognizes it as\n+\ttranslatable message.\n+\t(LOSE_AND_RETURN): Rename parameter to msgid.\n+\n 2002-02-17  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.h (CONDITIONAL_REGISTER_USAGE): Replace a"}, {"sha": "d3adb744e159f4c989364a302a0a6c358575465a", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=a52453cc4295af6f62d1e59faac80056c426a400", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on the Argonaut ARC cpu.\n-   Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001\n+   Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -1706,7 +1706,7 @@ arc_print_operand (file, x, code)\n \t  fputc (']', file);\n \t}\n       else\n-\toutput_operand_lossage (\"invalid operand to %R code\");\n+\toutput_operand_lossage (\"invalid operand to %%R code\");\n       return;\n     case 'S' :\n       if ((GET_CODE (x) == SYMBOL_REF && SYMBOL_REF_FLAG (x))\n@@ -1738,7 +1738,7 @@ arc_print_operand (file, x, code)\n \t\t   (long)(code == 'L' ? INTVAL (first) : INTVAL (second)));\n \t}\n       else\n-\toutput_operand_lossage (\"invalid operand to %H/%L code\");\n+\toutput_operand_lossage (\"invalid operand to %%H/%%L code\");\n       return;\n     case 'A' :\n       {\n@@ -1762,7 +1762,7 @@ arc_print_operand (file, x, code)\n \t    fputs (\".a\", file);\n \t}\n       else\n-\toutput_operand_lossage (\"invalid operand to %U code\");\n+\toutput_operand_lossage (\"invalid operand to %%U code\");\n       return;\n     case 'V' :\n       /* Output cache bypass indicator for a load/store insn.  Volatile memory\n@@ -1773,7 +1773,7 @@ arc_print_operand (file, x, code)\n \t    fputs (\".di\", file);\n \t}\n       else\n-\toutput_operand_lossage (\"invalid operand to %V code\");\n+\toutput_operand_lossage (\"invalid operand to %%V code\");\n       return;\n     case 0 :\n       /* Do nothing special.  */"}, {"sha": "063bad642ea4341e362b890468de853b85f49e83", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=a52453cc4295af6f62d1e59faac80056c426a400", "patch": "@@ -55,10 +55,10 @@ Boston, MA 02111-1307, USA.  */\n \tabort ();\t\t\t\t\t\t\\\n     } while (0)\n \n-#define LOSE_AND_RETURN(msg, x)\t\t\t\\\n+#define LOSE_AND_RETURN(msgid, x)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      cris_operand_lossage (msg, x);\t\t\\\n+      cris_operand_lossage (msgid, x);\t\t\\\n       return;\t\t\t\t\t\\\n     } while (0)\n \n@@ -507,12 +507,12 @@ cris_op_str (x)\n    categorization of the error.  */\n \n static void\n-cris_operand_lossage (msg, op)\n-     const char *msg;\n+cris_operand_lossage (msgid, op)\n+     const char *msgid;\n      rtx op;\n {\n   debug_rtx (op);\n-  output_operand_lossage (msg);\n+  output_operand_lossage (\"%s\", msgid);\n }\n \n /* Print an index part of an address to file.  */"}, {"sha": "261f3665325de5138206b61d1efc1552d53fa3ac", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=a52453cc4295af6f62d1e59faac80056c426a400", "patch": "@@ -1,5 +1,5 @@\n /* FR30 specific functions.\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Cygnus Solutions.\n \n This file is part of GNU CC.\n@@ -480,7 +480,7 @@ fr30_print_operand (file, x, code)\n       /* Compute the register name of the second register in a hi/lo\n \t register pair.  */\n       if (GET_CODE (x) != REG)\n-\toutput_operand_lossage (\"fr30_print_operand: unrecognized %p code\");\n+\toutput_operand_lossage (\"fr30_print_operand: unrecognized %%p code\");\n       else\n \tfprintf (file, \"r%d\", REGNO (x) + 1);\n       return;\n@@ -500,7 +500,7 @@ fr30_print_operand (file, x, code)\n \tcase GTU: fprintf (file, \"hi\"); break;\n \tcase GEU: fprintf (file, \"nc\");  break;\n \tdefault:\n-\t  output_operand_lossage (\"fr30_print_operand: unrecognized %b code\");\n+\t  output_operand_lossage (\"fr30_print_operand: unrecognized %%b code\");\n \t  break;\n \t}\n       return;\n@@ -521,15 +521,15 @@ fr30_print_operand (file, x, code)\n \tcase GTU: fprintf (file, \"ls\"); break;\n \tcase GEU: fprintf (file, \"c\"); break;\n \tdefault:\n-\t  output_operand_lossage (\"fr30_print_operand: unrecognized %B code\");\n+\t  output_operand_lossage (\"fr30_print_operand: unrecognized %%B code\");\n \t  break;\n \t}\n       return;\n \n     case 'A':\n       /* Print a signed byte value as an unsigned value.  */\n       if (GET_CODE (x) != CONST_INT)\n-\toutput_operand_lossage (\"fr30_print_operand: invalid operand to %A code\");\n+\toutput_operand_lossage (\"fr30_print_operand: invalid operand to %%A code\");\n       else\n \t{\n \t  HOST_WIDE_INT val;\n@@ -546,14 +546,14 @@ fr30_print_operand (file, x, code)\n       if (GET_CODE (x) != CONST_INT\n \t  || INTVAL (x) < 16\n \t  || INTVAL (x) > 32)\n-\toutput_operand_lossage (\"fr30_print_operand: invalid %x code\");\n+\toutput_operand_lossage (\"fr30_print_operand: invalid %%x code\");\n       else\n \tfprintf (file, \"%d\", INTVAL (x) - 16);\n       return;\n \n     case 'F':\n       if (GET_CODE (x) != CONST_DOUBLE)\n-\toutput_operand_lossage (\"fr30_print_operand: invalid %F code\");\n+\toutput_operand_lossage (\"fr30_print_operand: invalid %%F code\");\n       else\n \t{\n \t  REAL_VALUE_TYPE d;"}, {"sha": "23bb34ea941b712c82c2e3ae66acf0c290ffdbd4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a52453cc4295af6f62d1e59faac80056c426a400", "patch": "@@ -5862,11 +5862,7 @@ print_operand (file, x, code)\n \t    return;\n \t  }\n \tdefault:\n-\t  {\n-\t    char str[50];\n-\t    sprintf (str, \"invalid operand code `%c'\", code);\n-\t    output_operand_lossage (str);\n-\t  }\n+\t    output_operand_lossage (\"invalid operand code `%c'\", code);\n \t}\n     }\n "}, {"sha": "edf5fa4056e6fd354c2a025d05d2005545ed2cf9", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=a52453cc4295af6f62d1e59faac80056c426a400", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on the Mitsubishi M32R cpu.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -2245,14 +2245,14 @@ m32r_print_operand (file, x, code)\n       if (GET_CODE (x) == REG)\n \tfprintf (file, \"@+%s\", reg_names [REGNO (x)]);\n       else\n-\toutput_operand_lossage (\"invalid operand to %s code\");\n+\toutput_operand_lossage (\"invalid operand to %%s code\");\n       return;\n       \n     case 'p':\n       if (GET_CODE (x) == REG)\n \tfprintf (file, \"@%s+\", reg_names [REGNO (x)]);\n       else\n-\toutput_operand_lossage (\"invalid operand to %p code\");\n+\toutput_operand_lossage (\"invalid operand to %%p code\");\n       return;\n \n     case 'R' :\n@@ -2275,7 +2275,7 @@ m32r_print_operand (file, x, code)\n \t  fputc (')', file);\n \t}\n       else\n-\toutput_operand_lossage (\"invalid operand to %R code\");\n+\toutput_operand_lossage (\"invalid operand to %%R code\");\n       return;\n \n     case 'H' : /* High word */\n@@ -2298,7 +2298,7 @@ m32r_print_operand (file, x, code)\n \t\t   code == 'L' ? INTVAL (first) : INTVAL (second));\n \t}\n       else\n-\toutput_operand_lossage (\"invalid operand to %H/%L code\");\n+\toutput_operand_lossage (\"invalid operand to %%H/%%L code\");\n       return;\n \n     case 'A' :\n@@ -2360,7 +2360,7 @@ m32r_print_operand (file, x, code)\n \t  fputc (')', file);\n \t  return;\n \tdefault :\n-\t  output_operand_lossage (\"invalid operand to %T/%B code\");\n+\t  output_operand_lossage (\"invalid operand to %%T/%%B code\");\n \t  return;\n \t}\n       break;\n@@ -2375,15 +2375,15 @@ m32r_print_operand (file, x, code)\n \t    fputs (\".a\", file);\n \t}\n       else\n-\toutput_operand_lossage (\"invalid operand to %U code\");\n+\toutput_operand_lossage (\"invalid operand to %%U code\");\n       return;\n \n     case 'N' :\n       /* Print a constant value negated.  */\n       if (GET_CODE (x) == CONST_INT)\n \toutput_addr_const (file, GEN_INT (- INTVAL (x)));\n       else\n-\toutput_operand_lossage (\"invalid operand to %N code\");\n+\toutput_operand_lossage (\"invalid operand to %%N code\");\n       return;\n \n     case 'X' :"}, {"sha": "c1c2146603e90bdea5dca6d2ca76f35a4c6f4d4b", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=a52453cc4295af6f62d1e59faac80056c426a400", "patch": "@@ -2879,7 +2879,7 @@ print_operand (file, x, code)\n   if (sequencep)\n     {\n       if (code < 'B' || code > 'E')\n-\toutput_operand_lossage (\"%R not followed by %B/C/D/E\");\n+\toutput_operand_lossage (\"%%R not followed by %%B/C/D/E\");\n       if (reversep)\n \txc = reverse_condition (xc);\n       sequencep = 0;\n@@ -2947,43 +2947,43 @@ print_operand (file, x, code)\n       value >>= 16;\n     case 'x': /* print the lower 16 bits of the integer constant in hex */\n       if (xc != CONST_INT)\n-\toutput_operand_lossage (\"invalid %x/X value\");\n+\toutput_operand_lossage (\"invalid %%x/X value\");\n       fprintf (file, \"0x%x\", value & 0xffff); return;\n \n     case 'H': /* print the low 16 bits of the negated integer constant */\n       if (xc != CONST_INT)\n-\toutput_operand_lossage (\"invalid %H value\");\n+\toutput_operand_lossage (\"invalid %%H value\");\n       value = -value;\n     case 'h': /* print the register or low 16 bits of the integer constant */\n       if (xc == REG)\n \tgoto reg;\n       if (xc != CONST_INT)\n-\toutput_operand_lossage (\"invalid %h value\");\n+\toutput_operand_lossage (\"invalid %%h value\");\n       fprintf (file, \"%d\", value & 0xffff);\n       return;\n \n     case 'Q': /* print the low 8 bits of the negated integer constant */\n       if (xc != CONST_INT)\n-\toutput_operand_lossage (\"invalid %Q value\");\n+\toutput_operand_lossage (\"invalid %%Q value\");\n       value = -value;\n     case 'q': /* print the register or low 8 bits of the integer constant */\n       if (xc == REG)\n \tgoto reg;\n       if (xc != CONST_INT)\n-\toutput_operand_lossage (\"invalid %q value\");\n+\toutput_operand_lossage (\"invalid %%q value\");\n       fprintf (file, \"%d\", value & 0xff);\n       return;\n \n     case 'w': /* print the integer constant (X == 32 ? 0 : 32 - X) */\n       if (xc != CONST_INT)\n-\toutput_operand_lossage (\"invalid %o value\");\n+\toutput_operand_lossage (\"invalid %%o value\");\n       fprintf (file, \"%d\", value == 32 ? 0 : 32 - value);\n       return;\n \n     case 'p': /* print the logarithm of the integer constant */\n       if (xc != CONST_INT\n \t  || (value = exact_log2 (value)) < 0)\n-\toutput_operand_lossage (\"invalid %p value\");\n+\toutput_operand_lossage (\"invalid %%p value\");\n       fprintf (file, \"%d\", value);\n       return;\n \n@@ -2996,12 +2996,12 @@ print_operand (file, x, code)\n \tregister int top, bottom;\n \n \tif (xc != CONST_INT)\n-\t  output_operand_lossage (\"invalid %s/S value\");\n+\t  output_operand_lossage (\"invalid %%s/S value\");\n \t/* All the \"one\" bits must be contiguous.  If so, MASK will be\n \t   a power of two or zero.  */\n \tmask = (uval | (uval - 1)) + 1;\n \tif (!(uval && POWER_OF_2_or_0 (mask)))\n-\t  output_operand_lossage (\"invalid %s/S value\");\n+\t  output_operand_lossage (\"invalid %%s/S value\");\n \ttop = mask ? exact_log2 (mask) : 32;\n \tbottom = exact_log2 (uval & ~(uval - 1));\n \tfprintf (file,\"%d<%d>\", top - bottom, bottom);\n@@ -3012,7 +3012,7 @@ print_operand (file, x, code)\n       if (xc == LABEL_REF)\n \toutput_addr_const (file, x);\n       else if (xc != PC)\n-\toutput_operand_lossage (\"invalid %P operand\");\n+\toutput_operand_lossage (\"invalid %%P operand\");\n       return;\n \n     case 'L': /* print 0 or 1 if operand is label_ref and then...  */\n@@ -3043,7 +3043,7 @@ print_operand (file, x, code)\n \tcase LE: fputs (\"le0\", file); return;\n \tcase LT: fputs (\"lt0\", file); return;\n \tcase GE: fputs (\"ge0\", file); return;\n-\tdefault: output_operand_lossage (\"invalid %B value\");\n+\tdefault: output_operand_lossage (\"invalid %%B value\");\n \t}\n \n     case 'C': /* bb0/bb1 branch values for comparisons */\n@@ -3060,7 +3060,7 @@ print_operand (file, x, code)\n \tcase LEU: fputs (\"ls\", file); return;\n \tcase LTU: fputs (\"lo\", file); return;\n \tcase GEU: fputs (\"hs\", file); return;\n-\tdefault:  output_operand_lossage (\"invalid %C value\");\n+\tdefault:  output_operand_lossage (\"invalid %%C value\");\n \t}\n \n     case 'D': /* bcnd branch values for float comparisons */\n@@ -3073,20 +3073,20 @@ print_operand (file, x, code)\n \tcase LE: fputs (\"0xe\", file); return;\n \tcase LT: fputs (\"0x4\", file); return;\n \tcase GE: fputs (\"0xb\", file); return;\n-\tdefault: output_operand_lossage (\"invalid %D value\");\n+\tdefault: output_operand_lossage (\"invalid %%D value\");\n \t}\n \n     case 'E': /* bcnd branch values for special integers */\n       switch (xc)\n \t{\n \tcase EQ: fputs (\"0x8\", file); return;\n \tcase NE: fputs (\"0x7\", file); return;\n-\tdefault: output_operand_lossage (\"invalid %E value\");\n+\tdefault: output_operand_lossage (\"invalid %%E value\");\n \t}\n \n     case 'd': /* second register of a two register pair */\n       if (xc != REG)\n-\toutput_operand_lossage (\"`%d' operand isn't a register\");\n+\toutput_operand_lossage (\"`%%d' operand isn't a register\");\n       fputs (reg_names[REGNO (x) + 1], file);\n       return;\n \n@@ -3097,7 +3097,7 @@ print_operand (file, x, code)\n \t  return;\n \t}\n       else if (xc != REG)\n-\toutput_operand_lossage (\"invalid %r value\");\n+\toutput_operand_lossage (\"invalid %%r value\");\n     case 0:\n     name:\n       if (xc == REG)"}, {"sha": "e8edf19854356d81775c157ed7182c5ac78b9db0", "filename": "gcc/final.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=a52453cc4295af6f62d1e59faac80056c426a400", "patch": "@@ -2965,13 +2965,26 @@ alter_cond (cond)\n    In an `asm', it's the user's fault; otherwise, the compiler's fault.  */\n \n void\n-output_operand_lossage (msgid)\n-     const char *msgid;\n+output_operand_lossage VPARAMS ((const char *msgid, ...))\n {\n+  char *fmt_string;\n+  char *new_message;\n+  char *pfx_str;\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n+\n+  pfx_str = this_is_asm_operands ? _(\"invalid `asm': \") : \"output_operand: \";\n+  asprintf (&fmt_string, \"%s%s\", pfx_str, _(msgid));\n+  vasprintf (&new_message, fmt_string, ap);\n+  \n   if (this_is_asm_operands)\n-    error_for_asm (this_is_asm_operands, \"invalid `asm': %s\", _(msgid));\n+    error_for_asm (this_is_asm_operands, \"%s\", new_message);\n   else\n-    internal_error (\"output_operand: %s\", _(msgid));\n+    internal_error (\"%s\", new_message);\n+\n+  free (fmt_string);\n+  free (new_message);\n+  VA_CLOSE (ap);\n }\n \f\n /* Output of assembler code from a template, and its subroutines.  */\n@@ -3217,7 +3230,7 @@ output_asm_insn (template, operands)\n \t    c = atoi (p);\n \n \t    if (! ISDIGIT (*p))\n-\t      output_operand_lossage (\"operand number missing after %-letter\");\n+\t      output_operand_lossage (\"operand number missing after %%-letter\");\n \t    else if (this_is_asm_operands\n \t\t     && (c < 0 || (unsigned int) c >= insn_noperands))\n \t      output_operand_lossage (\"operand number out of range\");\n@@ -3309,7 +3322,7 @@ output_asm_label (x)\n \t  && NOTE_LINE_NUMBER (x) == NOTE_INSN_DELETED_LABEL))\n     ASM_GENERATE_INTERNAL_LABEL (buf, \"L\", CODE_LABEL_NUMBER (x));\n   else\n-    output_operand_lossage (\"`%l' operand isn't a label\");\n+    output_operand_lossage (\"`%%l' operand isn't a label\");\n \n   assemble_name (asm_out_file, buf);\n }"}, {"sha": "98ec391a4227e5f9fa5bcc453dd01369719bbb80", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=a52453cc4295af6f62d1e59faac80056c426a400", "patch": "@@ -1,7 +1,7 @@\n /* Declarations for insn-output.c.  These functions are defined in recog.c,\n    final.c, and varasm.c.\n    Copyright (C) 1987, 1991, 1994, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -81,7 +81,7 @@ extern rtx alter_subreg PARAMS ((rtx *));\n \n /* Report inconsistency between the assembler template and the operands.\n    In an `asm', it's the user's fault; otherwise, the compiler's fault.  */\n-extern void output_operand_lossage  PARAMS ((const char *));\n+extern void output_operand_lossage  PARAMS ((const char *, ...)) ATTRIBUTE_PRINTF_1;\n \n /* Output a string of assembler code, substituting insn operands.\n    Defined in final.c.  */"}, {"sha": "5a82692529ef17b4666bc8b29e1190fa850581fb", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=a52453cc4295af6f62d1e59faac80056c426a400", "patch": "@@ -1,3 +1,7 @@\n+2002-02-17  Philipp Thomas  <pthomas@suse.de>\n+\n+\t* gcc.pot: Regenerate.\n+\n 2002-02-11  Zack Weinberg  <zack@codesourcery.com>\n \n \t* gcc.pot: Regenerate."}, {"sha": "f1c8322242fb6d2fedffa32ff8c91bf9d0219027", "filename": "gcc/po/gcc.pot", "status": "modified", "additions": 1119, "deletions": 2331, "changes": 3450, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Fpo%2Fgcc.pot", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52453cc4295af6f62d1e59faac80056c426a400/gcc%2Fpo%2Fgcc.pot", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fgcc.pot?ref=a52453cc4295af6f62d1e59faac80056c426a400"}]}