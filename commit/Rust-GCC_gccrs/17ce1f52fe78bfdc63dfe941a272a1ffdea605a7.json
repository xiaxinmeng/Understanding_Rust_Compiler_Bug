{"sha": "17ce1f52fe78bfdc63dfe941a272a1ffdea605a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdjZTFmNTJmZTc4YmZkYzYzZGZlOTQxYTI3MmExZmZkZWE2MDVhNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-20T09:48:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-20T09:48:22Z"}, "message": "[multiple changes]\n\n2015-02-20  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sinfo.ads: Add comment.\n\n2015-02-20  Olivier Hainque  <hainque@adacore.com>\n\n\t* opt.ads: Replace Opt.Suppress_All_Inlining by two separate\n\tflags controlling the actual FE inlining out of pragma Inline\n\tand pragma Inline_Always.\n\t* adabkend.adb (Scan_Compiler_Arguments): Set both flags to True\n\ton -fno-inline, which disables all inlining in compilers with\n\tan Ada back-end and without back-end inlining support.\n\t* back_end.adb (Scan_Back_End_Switches): Set the Inline related\n\tflag to True on -fno-inline and leave Inline_Always alone for\n\tgcc back-ends.\n\t* back_end.ads (Scan_Compiler_Arguments): Adjust spec wrt the\n\tnames of the Opt flags it sets.\n\t* gnat1drv.adb (Adjust_Global_Switches): Remove test on\n\tOpt.Suppress_All_Inlining in the Back_End_Inlining computation.\n\t* sem_prag.adb (Make_Inline): Remove early return conditioned\n\ton Opt.Suppress_All_Inlining.\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Use the flags to\n\tdisable the calls to Build_Body_To_Inline otherwise triggered\n\tby pragma Inline or Inline_Always. This will prevent actual\n\tfront-end inlining of the subprogram on calls.\n\nFrom-SVN: r220842", "tree": {"sha": "c48f5ec002d929397a7d3b385e81dff00a2940cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c48f5ec002d929397a7d3b385e81dff00a2940cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7/comments", "author": null, "committer": null, "parents": [{"sha": "cf27c5a2bcf21d320a6d82de255f01e43a17a473", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf27c5a2bcf21d320a6d82de255f01e43a17a473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf27c5a2bcf21d320a6d82de255f01e43a17a473"}], "stats": {"total": 95, "additions": 66, "deletions": 29}, "files": [{"sha": "27f4cd04395c8ca623c303594f827d5410ca469a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=17ce1f52fe78bfdc63dfe941a272a1ffdea605a7", "patch": "@@ -1,3 +1,29 @@\n+2015-02-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sinfo.ads: Add comment.\n+\n+2015-02-20  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* opt.ads: Replace Opt.Suppress_All_Inlining by two separate\n+\tflags controlling the actual FE inlining out of pragma Inline\n+\tand pragma Inline_Always.\n+\t* adabkend.adb (Scan_Compiler_Arguments): Set both flags to True\n+\ton -fno-inline, which disables all inlining in compilers with\n+\tan Ada back-end and without back-end inlining support.\n+\t* back_end.adb (Scan_Back_End_Switches): Set the Inline related\n+\tflag to True on -fno-inline and leave Inline_Always alone for\n+\tgcc back-ends.\n+\t* back_end.ads (Scan_Compiler_Arguments): Adjust spec wrt the\n+\tnames of the Opt flags it sets.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Remove test on\n+\tOpt.Suppress_All_Inlining in the Back_End_Inlining computation.\n+\t* sem_prag.adb (Make_Inline): Remove early return conditioned\n+\ton Opt.Suppress_All_Inlining.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Use the flags to\n+\tdisable the calls to Build_Body_To_Inline otherwise triggered\n+\tby pragma Inline or Inline_Always. This will prevent actual\n+\tfront-end inlining of the subprogram on calls.\n+\n 2015-02-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_ch3.adb (Default_Initialize_Object): Call Add_Inlined_Body on the"}, {"sha": "5bf4f748bfe3c6618a984363387e82f271b063c1", "filename": "gcc/ada/adabkend.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7/gcc%2Fada%2Fadabkend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7/gcc%2Fada%2Fadabkend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadabkend.adb?ref=17ce1f52fe78bfdc63dfe941a272a1ffdea605a7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2014, AdaCore                     --\n+--                     Copyright (C) 2001-2015, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -178,12 +178,13 @@ package body Adabkend is\n             return;\n \n          --  Special check, the back end switch -fno-inline also sets the\n-         --  front end flag to entirely inhibit all inlining. So we store it\n-         --  and set the appropriate flag.\n+         --  front end flags to entirely inhibit all inlining. So we store it\n+         --  and set the appropriate flags.\n \n          elsif Switch_Chars (First .. Last) = \"fno-inline\" then\n             Lib.Store_Compilation_Switch (Switch_Chars);\n-            Opt.Suppress_All_Inlining := True;\n+            Opt.Disable_FE_Inline := True;\n+            Opt.Disable_FE_Inline_Always := True;\n             return;\n \n          --  Similar processing for -fpreserve-control-flow"}, {"sha": "7768687b26907cde6ae70605dc3cebdb0971e240", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=17ce1f52fe78bfdc63dfe941a272a1ffdea605a7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -23,6 +23,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  This is the version of the Back_End package for GCC back ends\n+\n with Atree;    use Atree;\n with Debug;    use Debug;\n with Elists;   use Elists;\n@@ -251,11 +253,12 @@ package body Back_End is\n          else\n             Store_Compilation_Switch (Switch_Chars);\n \n-            --  Back end switch -fno-inline also sets the Suppress_All_Inlining\n-            --  front end flag to entirely inhibit all inlining.\n+            --  For gcc back ends, -fno-inline disables Inline pragmas only,\n+            --  not Inline_Always to remain consistent with the always_inline\n+            --  attribute behavior.\n \n             if Switch_Chars (First .. Last) = \"fno-inline\" then\n-               Opt.Suppress_All_Inlining := True;\n+               Opt.Disable_FE_Inline := True;\n \n             --  Back end switch -fpreserve-control-flow also sets the front end\n             --  flag that inhibits improper control flow transformations."}, {"sha": "c58f0805f200aae8bc549f329ae8508157b4ee3e", "filename": "gcc/ada/back_end.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7/gcc%2Fada%2Fback_end.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7/gcc%2Fada%2Fback_end.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.ads?ref=17ce1f52fe78bfdc63dfe941a272a1ffdea605a7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -24,6 +24,7 @@\n ------------------------------------------------------------------------------\n \n --  Call the back end with all the information needed\n+\n --  Note: there are multiple bodies/variants of this package, so do not\n --  modify this spec without coordination.\n \n@@ -65,7 +66,8 @@ package Back_End is\n    --  This routine is expected to set the following to True if necessary (the\n    --  default for all of these in Opt is False).\n    --\n-   --    Opt.Suppress_All_Inlining\n+   --    Opt.Disable_FE_Inline\n+   --    Opt.Disable_FE_Inline_Always\n    --    Opt.Suppress_Control_Float_Optimizations\n    --    Opt.Generate_SCO\n    --    Opt.Generate_SCO_Instance_Table"}, {"sha": "a7acd29801a6c748d4256425c2c69d50ef3f6d73", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=17ce1f52fe78bfdc63dfe941a272a1ffdea605a7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -609,13 +609,9 @@ procedure Gnat1drv is\n \n       Back_End_Inlining :=\n \n-        --  No back end inlining if inlining is suppressed\n-\n-        not Suppress_All_Inlining\n-\n         --  No back end inlining available for VM targets\n \n-        and then VM_Target = No_VM\n+        VM_Target = No_VM\n \n         --  No back end inlining available on AAMP\n "}, {"sha": "d144a5a8df83c961bca18542f04641f5b49237dd", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=17ce1f52fe78bfdc63dfe941a272a1ffdea605a7", "patch": "@@ -1370,10 +1370,14 @@ package Opt is\n    --  with'ed indirectly. It is set True by use of either the -gnatg or\n    --  -gnaty switches, but not by use of the Style_Checks pragma.\n \n-   Suppress_All_Inlining : Boolean := False;\n-   --  GNAT\n-   --  Set by -fno-inline. Suppresses all inlining, both front end and back end\n-   --  regardless of any other switches that are set.\n+   Disable_FE_Inline        : Boolean := False;\n+   Disable_FE_Inline_Always : Boolean := False;\n+   --  GNAT\n+   --  Request to disable front end inlining from pragma Inline or pragma\n+   --  Inline_Always out of the presence of the -fno-inline back end flag\n+   --  on the command line, regardless of any other switches that are set.\n+   --  It remains the back end's reponsibility to honor -fno-inline at the\n+   --  back end level.\n \n    Suppress_Control_Flow_Optimizations : Boolean := False;\n    --  GNAT"}, {"sha": "523cbc22c37742e5dd5a0f6fd326b62f88781ef1", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=17ce1f52fe78bfdc63dfe941a272a1ffdea605a7", "patch": "@@ -3739,8 +3739,11 @@ package body Sem_Ch6 is\n          --  Legacy implementation (relying on frontend inlining)\n \n          if not Back_End_Inlining then\n-            if Has_Pragma_Inline_Always (Spec_Id)\n-              or else (Has_Pragma_Inline (Spec_Id) and Front_End_Inlining)\n+            if (Has_Pragma_Inline_Always (Spec_Id)\n+                  and then not Opt.Disable_FE_Inline_Always)\n+              or else\n+              (Has_Pragma_Inline (Spec_Id) and then Front_End_Inlining\n+                 and then not Opt.Disable_FE_Inline)\n             then\n                Build_Body_To_Inline (N, Spec_Id);\n             end if;"}, {"sha": "8c26e3ef8a0bfa7dba4c2882b9ea9e3ef02775d9", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=17ce1f52fe78bfdc63dfe941a272a1ffdea605a7", "patch": "@@ -8204,12 +8204,6 @@ package body Sem_Prag is\n                Applies := True;\n                return;\n \n-            --  Ignore if all inlining is suppressed\n-\n-            elsif Suppress_All_Inlining then\n-               Applies := True;\n-               return;\n-\n             --  If inlining is not possible, for now do not treat as an error\n \n             elsif Status /= Suppressed"}, {"sha": "3dc93111fb184ad6fb41043bfe6c879c57413edd", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=17ce1f52fe78bfdc63dfe941a272a1ffdea605a7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -6522,6 +6522,14 @@ package Sinfo is\n       --  a cleanup procedure that must handle declarations as well as the\n       --  statements of a block.\n \n+      --  Note: the cleanup_procedure_call does not go through the common\n+      --  processing for calls, which in particular means that it will not be\n+      --  automatically inlined in all cases, even though the procedure to be\n+      --  called is marked inline. More specifically, if the procedure comes\n+      --  from another unit than the main source unit, for example a run-time\n+      --  unit, then it needs to be manually added to the list of bodies to be\n+      --  inlined by invoking Add_Inlined_Body on it.\n+\n       --  N_Handled_Sequence_Of_Statements\n       --  Sloc points to first token of first statement\n       --  Statements (List3)"}]}