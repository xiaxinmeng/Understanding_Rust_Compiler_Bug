{"sha": "c1aca26b707471ce8051bd03b3fb2217bcdf2df0", "node_id": "C_kwDOANBUbNoAKGMxYWNhMjZiNzA3NDcxY2U4MDUxYmQwM2IzZmIyMjE3YmNkZjJkZjA", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-03-13T22:50:25Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-04-04T13:13:18Z"}, "message": "sanitizer: missing signed integer overflow errors [PR109107]\n\nHere we're failing to detect a signed overflow with -O because match.pd,\nsince r8-1516, transforms\n\n  c = (a + 1) - (int) (short int) b;\n\ninto\n\n  c = (int) ((unsigned int) a + 4294946117);\n\nwrongly eliding the overflow.  This kind of problems is usually\navoided by using TYPE_OVERFLOW_SANITIZED in the appropriate place.\nThe first match.pd hunk in the patch fixes it.  I've constructed\na testcase for each of the surrounding cases as well.  Then I\nnoticed that fold_binary_loc/associate has the same problem, so I've\nadded a TYPE_OVERFLOW_SANITIZED there as well (it may be too coarse,\nsorry).  Then I found yet another problem, but instead of fixing it\nnow I've opened 109134.  I could probably go on and find a dozen more.\n\n\tPR sanitizer/109107\n\ngcc/ChangeLog:\n\n\t* fold-const.cc (fold_binary_loc): Use TYPE_OVERFLOW_SANITIZED\n\twhen associating.\n\t* match.pd: Use TYPE_OVERFLOW_SANITIZED.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/ubsan/pr109107-1.c: New test.\n\t* c-c++-common/ubsan/pr109107-2.c: New test.\n\t* c-c++-common/ubsan/pr109107-3.c: New test.\n\t* c-c++-common/ubsan/pr109107-4.c: New test.", "tree": {"sha": "afbb9d5d70561460513075a5f9b939bf8e015a9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afbb9d5d70561460513075a5f9b939bf8e015a9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1aca26b707471ce8051bd03b3fb2217bcdf2df0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1aca26b707471ce8051bd03b3fb2217bcdf2df0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1aca26b707471ce8051bd03b3fb2217bcdf2df0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1aca26b707471ce8051bd03b3fb2217bcdf2df0/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f0ca7a3e4431534bff3b8eb73709cc822e489b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f0ca7a3e4431534bff3b8eb73709cc822e489b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f0ca7a3e4431534bff3b8eb73709cc822e489b0"}], "stats": {"total": 105, "additions": 101, "deletions": 4}, "files": [{"sha": "3b397ae2941dc2f714831f2b162eca59f855d64a", "filename": "gcc/fold-const.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1aca26b707471ce8051bd03b3fb2217bcdf2df0/gcc%2Ffold-const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1aca26b707471ce8051bd03b3fb2217bcdf2df0/gcc%2Ffold-const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.cc?ref=c1aca26b707471ce8051bd03b3fb2217bcdf2df0", "patch": "@@ -11320,7 +11320,8 @@ fold_binary_loc (location_t loc, enum tree_code code, tree type,\n \t And, we need to make sure type is not saturating.  */\n \n       if ((! FLOAT_TYPE_P (type) || flag_associative_math)\n-\t  && !TYPE_SATURATING (type))\n+\t  && !TYPE_SATURATING (type)\n+\t  && !TYPE_OVERFLOW_SANITIZED (type))\n \t{\n \t  tree var0, minus_var0, con0, minus_con0, lit0, minus_lit0;\n \t  tree var1, minus_var1, con1, minus_con1, lit1, minus_lit1;"}, {"sha": "c5d2c36e117298782bc154eaed1b381bf3418701", "filename": "gcc/match.pd", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1aca26b707471ce8051bd03b3fb2217bcdf2df0/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1aca26b707471ce8051bd03b3fb2217bcdf2df0/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=c1aca26b707471ce8051bd03b3fb2217bcdf2df0", "patch": "@@ -2933,7 +2933,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        /* If the constant operation overflows we cannot do the transform\n \t  directly as we would introduce undefined overflow, for example\n \t  with (a - 1) + INT_MIN.  */\n-       (if (types_match (type, @0))\n+       (if (types_match (type, @0) && !TYPE_OVERFLOW_SANITIZED (type))\n \t(with { tree cst = const_binop (outer_op == inner_op\n \t\t\t\t\t? PLUS_EXPR : MINUS_EXPR,\n \t\t\t\t\ttype, @1, @2); }\n@@ -2964,7 +2964,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n      (if (!ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n \t  || TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0)))\n       (view_convert (minus (outer_op @1 (view_convert @2)) @0))\n-      (if (types_match (type, @0))\n+      (if (types_match (type, @0) && !TYPE_OVERFLOW_SANITIZED (type))\n        (with { tree cst = const_binop (outer_op, type, @1, @2); }\n \t(if (cst && !TREE_OVERFLOW (cst))\n \t (minus { cst; } @0))))))))\n@@ -2983,7 +2983,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     (if (!ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n \t || TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0)))\n      (view_convert (plus @0 (minus (view_convert @1) @2)))\n-     (if (types_match (type, @0))\n+     (if (types_match (type, @0) && !TYPE_OVERFLOW_SANITIZED (type))\n       (with { tree cst = const_binop (MINUS_EXPR, type, @1, @2); }\n        (if (cst && !TREE_OVERFLOW (cst))\n \t(plus { cst; } @0)))))))"}, {"sha": "ca4dd0e3943cb2b6cf28edd0b7485ec104352b60", "filename": "gcc/testsuite/c-c++-common/ubsan/pr109107-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1aca26b707471ce8051bd03b3fb2217bcdf2df0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr109107-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1aca26b707471ce8051bd03b3fb2217bcdf2df0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr109107-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr109107-1.c?ref=c1aca26b707471ce8051bd03b3fb2217bcdf2df0", "patch": "@@ -0,0 +1,23 @@\n+/* PR sanitizer/109107 */\n+/* { dg-do run { target int32 } } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow\" } */\n+\n+#define INT_MIN (-__INT_MAX__ - 1)\n+int a = INT_MIN;\n+const int b = 676540;\n+\n+__attribute__((noipa)) int\n+foo ()\n+{\n+  int c = a + 1 - (int) (short) b;\n+  return c;\n+}\n+\n+int\n+main ()\n+{\n+  foo ();\n+  return 0;\n+}\n+\n+/* { dg-output \"signed integer overflow: -2147483647 - 21180 cannot be represented in type 'int'\" } */"}, {"sha": "eb440b58dd87ae29ae1afdb46b40045db9072375", "filename": "gcc/testsuite/c-c++-common/ubsan/pr109107-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1aca26b707471ce8051bd03b3fb2217bcdf2df0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr109107-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1aca26b707471ce8051bd03b3fb2217bcdf2df0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr109107-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr109107-2.c?ref=c1aca26b707471ce8051bd03b3fb2217bcdf2df0", "patch": "@@ -0,0 +1,24 @@\n+/* PR sanitizer/109107 */\n+/* { dg-do run { target int32 } } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow\" } */\n+\n+#define INT_MIN (-__INT_MAX__ - 1)\n+int a = INT_MIN;\n+const int b = 676540;\n+\n+__attribute__((noipa)) int\n+foo ()\n+{\n+  int c = a - 1 + (int) (short) b;\n+  return c;\n+}\n+\n+int\n+main ()\n+{\n+  foo ();\n+  return 0;\n+}\n+\n+/* { dg-output \"signed integer overflow: -2147483648 - 1 cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*signed integer overflow: 2147483647 \\\\+ 21180 cannot be represented in type 'int'\" } */"}, {"sha": "fa074e7426a971bc9489d5527a3acfc8dd5c0387", "filename": "gcc/testsuite/c-c++-common/ubsan/pr109107-3.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1aca26b707471ce8051bd03b3fb2217bcdf2df0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr109107-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1aca26b707471ce8051bd03b3fb2217bcdf2df0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr109107-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr109107-3.c?ref=c1aca26b707471ce8051bd03b3fb2217bcdf2df0", "patch": "@@ -0,0 +1,25 @@\n+/* PR sanitizer/109107 */\n+/* { dg-do run { target int32 } } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow\" } */\n+\n+#define INT_MIN (-__INT_MAX__ - 1)\n+const int a = INT_MIN;\n+const int b = 40;\n+int d = 1;\n+\n+__attribute__((noipa)) int\n+foo ()\n+{\n+  int c = a - d + (int) (short) b;\n+  return c;\n+}\n+\n+int\n+main ()\n+{\n+  foo ();\n+  return 0;\n+}\n+\n+/* { dg-output \"signed integer overflow: -2147483648 - 1 cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*signed integer overflow: 2147483647 \\\\+ 40 cannot be represented in type 'int'\" } */"}, {"sha": "b0ac987a15b8d3dd72a76082292d49425506836d", "filename": "gcc/testsuite/c-c++-common/ubsan/pr109107-4.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1aca26b707471ce8051bd03b3fb2217bcdf2df0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr109107-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1aca26b707471ce8051bd03b3fb2217bcdf2df0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr109107-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr109107-4.c?ref=c1aca26b707471ce8051bd03b3fb2217bcdf2df0", "patch": "@@ -0,0 +1,24 @@\n+/* PR sanitizer/109107 */\n+/* { dg-do run { target int32 } } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow\" } */\n+\n+#define INT_MIN (-__INT_MAX__ - 1)\n+const int x = INT_MIN;\n+const int y = -2;\n+int a = -3;\n+\n+__attribute__((noipa)) int\n+foo ()\n+{\n+  int c = x - (y - a);\n+  return c;\n+}\n+\n+int\n+main ()\n+{\n+  foo ();\n+  return 0;\n+}\n+\n+/* { dg-output \"signed integer overflow: -2147483648 - 1 cannot be represented in type 'int'\" } */"}]}