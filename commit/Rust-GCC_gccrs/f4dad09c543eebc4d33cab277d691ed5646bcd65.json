{"sha": "f4dad09c543eebc4d33cab277d691ed5646bcd65", "node_id": "C_kwDOANBUbNoAKGY0ZGFkMDljNTQzZWViYzRkMzNjYWIyNzdkNjkxZWQ1NjQ2YmNkNjU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-17T13:16:53Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-17T13:16:53Z"}, "message": "c++: modules ICE with typename friend\n\nA couple of xtreme-header-* modules tests began ICEing in C++23 mode\never since r13-2650-g5d84a4418aa962 which introduced into <ranges> a\ndependently scoped friend declaration:\n\n  friend /* typename */ _OuterIter::value_type;\n\nThis happens because the streaming code assumes a TYPE_P friend must\nbe a class type, but here it's a TYPENAME_TYPE, which doesn't have\na TEMPLATE_INFO or CLASSTYPE_BEFRIENDING_CLASSES.  This patch tries\nto correct this in a minimal way.\n\ngcc/cp/ChangeLog:\n\n\t* module.cc (friend_from_decl_list): Don't consider\n\tCLASSTYPE_TEMPLATE_INFO for a TYPENAME_TYPE friend.\n\t(trees_in::read_class_def): Don't add to\n\tCLASSTYPE_BEFRIENDING_CLASSES for a TYPENAME_TYPE friend.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/modules/typename-friend_a.C: New test.\n\t* g++.dg/modules/typename-friend_b.C: New test.", "tree": {"sha": "3c04f6007840533e241fb54ca3a15728cb1a40f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c04f6007840533e241fb54ca3a15728cb1a40f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4dad09c543eebc4d33cab277d691ed5646bcd65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4dad09c543eebc4d33cab277d691ed5646bcd65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4dad09c543eebc4d33cab277d691ed5646bcd65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4dad09c543eebc4d33cab277d691ed5646bcd65/comments", "author": null, "committer": null, "parents": [{"sha": "9ac9fde961f76879f0379ff3b2494a2f9ac915f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac9fde961f76879f0379ff3b2494a2f9ac915f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ac9fde961f76879f0379ff3b2494a2f9ac915f7"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "1a1ff5be57474485fb99543fb0ccdd2c0a5c3ef1", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4dad09c543eebc4d33cab277d691ed5646bcd65/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4dad09c543eebc4d33cab277d691ed5646bcd65/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=f4dad09c543eebc4d33cab277d691ed5646bcd65", "patch": "@@ -4734,7 +4734,8 @@ friend_from_decl_list (tree frnd)\n       if (TYPE_P (frnd))\n \t{\n \t  res = TYPE_NAME (frnd);\n-\t  if (CLASSTYPE_TEMPLATE_INFO (frnd))\n+\t  if (CLASS_TYPE_P (frnd)\n+\t      && CLASSTYPE_TEMPLATE_INFO (frnd))\n \t    tmpl = CLASSTYPE_TI_TEMPLATE (frnd);\n \t}\n       else if (DECL_TEMPLATE_INFO (frnd))\n@@ -12121,7 +12122,7 @@ trees_in::read_class_def (tree defn, tree maybe_template)\n \t    {\n \t      tree f = TREE_VALUE (friend_classes);\n \n-\t      if (TYPE_P (f))\n+\t      if (CLASS_TYPE_P (f))\n \t\t{\n \t\t  CLASSTYPE_BEFRIENDING_CLASSES (f)\n \t\t    = tree_cons (NULL_TREE, type,"}, {"sha": "aa426fe6cf01d9cb773f73be4accdc8b6a99f16a", "filename": "gcc/testsuite/g++.dg/modules/typename-friend_a.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4dad09c543eebc4d33cab277d691ed5646bcd65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Ftypename-friend_a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4dad09c543eebc4d33cab277d691ed5646bcd65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Ftypename-friend_a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Ftypename-friend_a.C?ref=f4dad09c543eebc4d33cab277d691ed5646bcd65", "patch": "@@ -0,0 +1,11 @@\n+// { dg-additional-options \"-fmodules-ts\" }\n+export module foo;\n+// { dg-module-cmi foo }\n+\n+template<class T>\n+struct A {\n+  friend typename T::type;\n+  friend void f(A) { }\n+private:\n+  static constexpr int value = 42;\n+};"}, {"sha": "97da9d82e1181a510a3373791c8798a875db84eb", "filename": "gcc/testsuite/g++.dg/modules/typename-friend_b.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4dad09c543eebc4d33cab277d691ed5646bcd65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Ftypename-friend_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4dad09c543eebc4d33cab277d691ed5646bcd65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Ftypename-friend_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Ftypename-friend_b.C?ref=f4dad09c543eebc4d33cab277d691ed5646bcd65", "patch": "@@ -0,0 +1,6 @@\n+// { dg-additional-options \"-fmodules-ts\" }\n+module foo;\n+\n+struct C;\n+struct B { using type = C; };\n+struct C { static_assert(A<B>::value == 42); };"}]}