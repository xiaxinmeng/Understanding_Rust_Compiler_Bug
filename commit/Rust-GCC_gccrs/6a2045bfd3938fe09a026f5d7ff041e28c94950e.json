{"sha": "6a2045bfd3938fe09a026f5d7ff041e28c94950e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEyMDQ1YmZkMzkzOGZlMDlhMDI2ZjVkN2ZmMDQxZTI4Yzk0OTUwZQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2011-12-15T15:52:08Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2011-12-15T15:52:08Z"}, "message": "rs6000.c (rs6000_emit_prologue): Move update of VRSave mask to save_world() when that is in use.\n\n\ngcc:\n\n\t* config/rs6000/rs6000.c  (rs6000_emit_prologue): Move update of\n\tVRSave mask to save_world() when that is in use.\n\nlibgcc:\n\n\t* config/rs6000/darwin-world.S (toplevel): Make it clear that this\n\tfunction is not used for PPC64.  \n\t(save_world): Amend comments.  Update the VRsave mask to reflect the\n\tsaved regs.\n\t(rest_world): Update comments, do not  clobber r10, do not use r8.\n\t(eh_rest_world_r10): Amend comments, do not use r8.\n\t(rest_world_eh_r7r8): Rename as local Lrest_world_eh_r7, since r8 is\n\tno longer used, move restore of CR and target address to the end of\n\tthe routine.\n\nFrom-SVN: r182376", "tree": {"sha": "5d0c04560395d48bd64dd64844e3dac52c6e0f33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d0c04560395d48bd64dd64844e3dac52c6e0f33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a2045bfd3938fe09a026f5d7ff041e28c94950e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a2045bfd3938fe09a026f5d7ff041e28c94950e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a2045bfd3938fe09a026f5d7ff041e28c94950e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a2045bfd3938fe09a026f5d7ff041e28c94950e/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f03e689a9db25772c9650630bff7333bbf01c43d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f03e689a9db25772c9650630bff7333bbf01c43d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f03e689a9db25772c9650630bff7333bbf01c43d"}], "stats": {"total": 147, "additions": 78, "deletions": 69}, "files": [{"sha": "b6d8a02edbd0570ab6ff69535a5f703f5625fc78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2045bfd3938fe09a026f5d7ff041e28c94950e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2045bfd3938fe09a026f5d7ff041e28c94950e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a2045bfd3938fe09a026f5d7ff041e28c94950e", "patch": "@@ -1,3 +1,8 @@\n+2011-12-15  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000.c  (rs6000_emit_prologue): Move update of\n+\tVRSave mask to save_world() when that is in use.\n+\n 2011-12-15  Richard Guenther  <rguenther@suse.de>\n \n \t* lto-wrapper.c (run_gcc): In non-parallel mode remove"}, {"sha": "da35528f5015e2e0ace6a9f48e029f62588398dc", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2045bfd3938fe09a026f5d7ff041e28c94950e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2045bfd3938fe09a026f5d7ff041e28c94950e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6a2045bfd3938fe09a026f5d7ff041e28c94950e", "patch": "@@ -19909,7 +19909,9 @@ rs6000_emit_prologue (void)\n      used in this function, and do the corresponding magic in the\n      epilogue.  */\n \n-  if (TARGET_ALTIVEC && TARGET_ALTIVEC_VRSAVE\n+  if (!WORLD_SAVE_P (info)\n+      && TARGET_ALTIVEC\n+      && TARGET_ALTIVEC_VRSAVE\n       && info->vrsave_mask != 0)\n     {\n       rtx reg, mem, vrsave;\n@@ -19925,15 +19927,12 @@ rs6000_emit_prologue (void)\n       else\n         emit_insn (gen_rtx_SET (VOIDmode, reg, vrsave));\n \n-      if (!WORLD_SAVE_P (info))\n-        {\n-          /* Save VRSAVE.  */\n-          offset = info->vrsave_save_offset + sp_offset;\n-          mem = gen_frame_mem (SImode,\n-                               gen_rtx_PLUS (Pmode, frame_reg_rtx,\n-                                             GEN_INT (offset)));\n-          insn = emit_move_insn (mem, reg);\n-        }\n+      /* Save VRSAVE.  */\n+      offset = info->vrsave_save_offset + sp_offset;\n+      mem = gen_frame_mem (SImode,\n+\t\t\t   gen_rtx_PLUS (Pmode, frame_reg_rtx, \n+\t\t\t\t\t GEN_INT (offset)));\n+      insn = emit_move_insn (mem, reg);\n \n       /* Include the registers in the mask.  */\n       emit_insn (gen_iorsi3 (reg, reg, GEN_INT ((int) info->vrsave_mask)));"}, {"sha": "56be7d2607ec40eb78e0bbeef6b798a7579e1fef", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2045bfd3938fe09a026f5d7ff041e28c94950e/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2045bfd3938fe09a026f5d7ff041e28c94950e/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=6a2045bfd3938fe09a026f5d7ff041e28c94950e", "patch": "@@ -1,3 +1,15 @@\n+2011-12-15  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* config/rs6000/darwin-world.S (toplevel): Make it clear that this\n+\tfunction is not used for PPC64.  \n+\t(save_world): Amend comments.  Update the VRsave mask to reflect the\n+\tsaved regs.\n+\t(rest_world): Update comments, do not  clobber r10, do not use r8.\n+\t(eh_rest_world_r10): Amend comments, do not use r8.\n+\t(rest_world_eh_r7r8): Rename as local Lrest_world_eh_r7, since r8 is\n+\tno longer used, move restore of CR and target address to the end of\n+\tthe routine.\n+\n 2011-12-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* generic-morestack.c (__generic_morestack_set_initial_sp): Check"}, {"sha": "9aa5e57e07d4d27c68de9c09de03610da04fec23", "filename": "libgcc/config/rs6000/darwin-world.S", "status": "modified", "additions": 52, "deletions": 59, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2045bfd3938fe09a026f5d7ff041e28c94950e/libgcc%2Fconfig%2Frs6000%2Fdarwin-world.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2045bfd3938fe09a026f5d7ff041e28c94950e/libgcc%2Fconfig%2Frs6000%2Fdarwin-world.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fdarwin-world.S?ref=6a2045bfd3938fe09a026f5d7ff041e28c94950e", "patch": "@@ -24,6 +24,8 @@\n  * <http://www.gnu.org/licenses/>.\n  */ \n \n+#ifndef __ppc64__\n+\n \t.machine ppc7400\n .data\n \t.align 2\n@@ -33,12 +35,7 @@\n .non_lazy_symbol_pointer\n L_has_vec$non_lazy_ptr:\n \t.indirect_symbol __cpu_has_altivec\n-#ifdef __ppc64__\n-\t.quad\t0\n-#else\n \t.long\t0\n-#endif\n-\n #else\n \n /* For static, \"pretend\" we have a non-lazy-pointer.  */\n@@ -57,12 +54,11 @@ L_has_vec$non_lazy_ptr:\n    provided by the System Framework to determine this.)\n \n    SAVE_WORLD takes R0 (the caller`s caller`s return address) and R11\n-   (the stack frame size) as parameters.  It returns VRsave in R0 if\n-   we`re on a CPU with vector regs.\n+   (the stack frame size) as parameters.  It returns the updated VRsave\n+   in R0 if we`re on a CPU with vector regs.\n \n-   With gcc3, we now need to save and restore CR as well, since gcc3's\n-   scheduled prologs can cause comparisons to be moved before calls to\n-   save_world!\n+   For gcc3 onward, we need to save and restore CR as well, since scheduled\n+   prologs can cause comparisons to be moved before calls to save_world.\n \n    USES: R0 R11 R12  */\n \n@@ -143,69 +139,62 @@ L$saveVMX:\n \tstvx v30,r11,r12\n \tmfspr r0,VRsave\n \tli r11,-16\n-\tstvx v31,r11,r12\n-\t\t\t\t/* VRsave lives at -224(R1)  */\n-\tstw r0,0(r12)\n+\tstvx v31,r11,r12\t\n+\tstw r0,0(r12)\t\t/* VRsave lives at -224(R1).  */\n+\tori r0,r0,0xfff\t\t/* We just saved these.  */\n+\tmtspr VRsave,r0\n \tblr\n \n+/* rest_world  is jumped to, not called, so no need to worry about LR.\n+   clobbers R0, R7, R11 and R12.  This just undoes the work done above.  */\n+\n+\t.private_extern rest_world\n+rest_world:\n+\t\t\t\t\n+\tlwz r11, 0(r1)\t\t/* Pickup previous SP  */\n+\tli r7, 0\t\t/* Stack offset is zero, r10 is ignored.  */\n+\tb Lrest_world_eh_r7\n \n /* eh_rest_world_r10 is jumped to, not called, so no need to worry about LR.\n    R10 is the C++ EH stack adjust parameter, we return to the caller`s caller.\n \n-   USES: R0 R10 R11 R12   and R7 R8\n-   RETURNS: C++ EH Data registers (R3 - R6.)\n-\n-   We now set up R7/R8 and jump to rest_world_eh_r7r8.\n+   clobbers: R0, R7, R11 and R12\n+   uses    : R10\n+   RETURNS : C++ EH Data registers (R3 - R6).  */\n \n-   rest_world doesn't use the R10 stack adjust parameter, nor does it\n-   pick up the R3-R6 exception handling stuff.  */\n-\n-.private_extern rest_world\n-rest_world:\n-\t\t\t\t/* Pickup previous SP  */\n-\tlwz r11, 0(r1)\n-\tli r7, 0\n-\tlwz r8, 8(r11)\n-\tli r10, 0\n-\tb rest_world_eh_r7r8\n-\n-.private_extern eh_rest_world_r10\n+\t.private_extern eh_rest_world_r10\n eh_rest_world_r10:\n-\t\t\t\t/* Pickup previous SP  */\n-\tlwz r11, 0(r1)\n-\tmr  r7,r10\n-\tlwz r8, 8(r11)\n-\t\t\t/* pickup the C++ EH data regs (R3 - R6.)  */\n+\t\t\t\t\n+\tlwz r11, 0(r1)\t\t/* Pickup previous SP  */\n+\tmr  r7,r10\t\t/* Stack offset.  */\n+\t\n+\t/* pickup the C++ EH data regs (R3 - R6.)  */\n \tlwz r6,-420(r11)\n \tlwz r5,-424(r11)\n \tlwz r4,-428(r11)\n \tlwz r3,-432(r11)\n \n-\tb rest_world_eh_r7r8\n+\t/* Fall through to Lrest_world_eh_r7.  */\n \n-/* rest_world_eh_r7r8 is jumped to -- not called! -- when we're doing\n-   the exception-handling epilog.  R7 contains the offset to add to\n-   the SP, and R8 contains the 'real' return address.\n+/* When we are doing the exception-handling epilog, R7 contains the offset to\n+   add to the SP.\n \n-   USES: R0 R11 R12  [R7/R8]\n-   RETURNS: C++ EH Data registers (R3 - R6.)  */\n+   clobbers: R0, R11 and R12\n+   uses    : R7.  */\n \n-rest_world_eh_r7r8:\n-\tbcl 20,31,Lr7r8$pb\n-Lr7r8$pb: mflr r12\n-\tlwz r11,0(r1)\n-\t\t\t\t/* R11 := previous SP  */\n-\taddis r12,r12,ha16(L_has_vec$non_lazy_ptr-Lr7r8$pb)\n-\tlwz r12,lo16(L_has_vec$non_lazy_ptr-Lr7r8$pb)(r12)\n-\tlwz r0,4(r11)\n-\t\t\t\t/* R0 := old CR  */\n-\tlwz r12,0(r12)\n-\t\t\t\t/* R12 := HAS_VEC  */\n-\tmtcr r0\t\n+Lrest_world_eh_r7:\n+\t/* See if we have Altivec.  */\n+\tbcl 20,31,Lr7$pb\n+Lr7$pb: mflr r12\n+\n+\taddis r12,r12,ha16(L_has_vec$non_lazy_ptr-Lr7$pb)\n+\tlwz r12,lo16(L_has_vec$non_lazy_ptr-Lr7$pb)(r12)\n+\tlwz r12,0(r12)\t\t/* R12 := HAS_VEC  */\n \tcmpwi r12,0\n \tlmw r13,-220(r11)\n \tbeq L.rest_world_fp_eh\n-\t\t\t\t/* restore VRsave and V20..V31  */\n+\n+\t/* We have Altivec, restore VRsave and V20..V31  */\n \tlwz r0,-224(r11)\n \tli r12,-416\n \tmtspr VRsave,r0\n@@ -234,6 +223,7 @@ Lr7r8$pb: mflr r12\n \tlvx v31,r11,r12\n \n L.rest_world_fp_eh:\n+\tlwz r0,4(r11)\t\t/* recover saved CR  */\n \tlfd f14,-144(r11)\n \tlfd f15,-136(r11)\n \tlfd f16,-128(r11)\n@@ -251,9 +241,12 @@ L.rest_world_fp_eh:\n \tlfd f28,-32(r11)\n \tlfd f29,-24(r11)\n \tlfd f30,-16(r11)\n-\t\t\t/* R8 is the exception-handler's address  */\n-\tmtctr r8\n-\tlfd f31,-8(r11)\n-\t\t\t/* set SP to original value + R7 offset  */\n-\tadd r1,r11,r7\n+\tmtcr r0\t\t\t/* restore the saved cr.  */\n+\tlwz r0, 8(r11)\t\t/* Pick up the 'real' return address.  */\n+\tlfd f31,-8(r11)\t\t\n+\tmtctr r0\t\t/* exception-handler ret. address  */\n+\tadd r1,r11,r7\t\t/* set SP to original value + R7 offset  */\n \tbctr\n+#endif\n+/* we should never be called on ppc64 for this ... */\n+/* Done.  */"}]}