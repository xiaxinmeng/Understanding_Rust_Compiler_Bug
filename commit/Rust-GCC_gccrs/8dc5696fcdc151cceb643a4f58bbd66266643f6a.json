{"sha": "8dc5696fcdc151cceb643a4f58bbd66266643f6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRjNTY5NmZjZGMxNTFjY2ViNjQzYTRmNThiYmQ2NjI2NjY0M2Y2YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-10-02T15:27:07Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-10-02T15:27:07Z"}, "message": "i386.md (fxam<mode>2_i387_with_temp): Remove.\n\n\t* config/i386/i386.md (fxam<mode>2_i387_with_temp): Remove.\n\t(isinfxf2): Ditto.\n\t(isinf<mode>2): Ditto.\n\nFrom-SVN: r264795", "tree": {"sha": "5f34f2c16aaf23499505cfe1abe94226359626ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f34f2c16aaf23499505cfe1abe94226359626ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dc5696fcdc151cceb643a4f58bbd66266643f6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc5696fcdc151cceb643a4f58bbd66266643f6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dc5696fcdc151cceb643a4f58bbd66266643f6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc5696fcdc151cceb643a4f58bbd66266643f6a/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "34c77d0b2fb7325c1b318b2de755b588cb7179ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34c77d0b2fb7325c1b318b2de755b588cb7179ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34c77d0b2fb7325c1b318b2de755b588cb7179ce"}], "stats": {"total": 81, "additions": 6, "deletions": 75}, "files": [{"sha": "af0e08dfddfa902847d224ad7819dee278fd8d1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc5696fcdc151cceb643a4f58bbd66266643f6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc5696fcdc151cceb643a4f58bbd66266643f6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8dc5696fcdc151cceb643a4f58bbd66266643f6a", "patch": "@@ -1,3 +1,9 @@\n+2018-10-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (fxam<mode>2_i387_with_temp): Remove.\n+\t(isinfxf2): Ditto.\n+\t(isinf<mode>2): Ditto.\n+\n 2018-10-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_emit_i387_round): Extend op1 to XFmode"}, {"sha": "367e9bfe255b32141e915ed3245c6d7e29168e23", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc5696fcdc151cceb643a4f58bbd66266643f6a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc5696fcdc151cceb643a4f58bbd66266643f6a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=8dc5696fcdc151cceb643a4f58bbd66266643f6a", "patch": "@@ -16456,81 +16456,6 @@\n    (set_attr \"unit\" \"i387\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn_and_split \"fxam<mode>2_i387_with_temp\"\n-  [(set (match_operand:HI 0 \"register_operand\")\n-\t(unspec:HI\n-\t  [(match_operand:MODEF 1 \"memory_operand\")]\n-\t  UNSPEC_FXAM_MEM))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && can_create_pseudo_p ()\"\n-  \"#\"\n-  \"&& 1\"\n-  [(set (match_dup 2)(match_dup 1))\n-   (set (match_dup 0)\n-\t(unspec:HI [(match_dup 2)] UNSPEC_FXAM))]\n-{\n-  operands[2] = gen_reg_rtx (<MODE>mode);\n-\n-  MEM_VOLATILE_P (operands[1]) = 1;\n-}\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"unit\" \"i387\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_expand \"isinfxf2\"\n-  [(use (match_operand:SI 0 \"register_operand\"))\n-   (use (match_operand:XF 1 \"register_operand\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && ix86_libc_has_function (function_c99_misc)\"\n-{\n-  rtx mask = GEN_INT (0x45);\n-  rtx val = GEN_INT (0x05);\n-\n-  rtx scratch = gen_reg_rtx (HImode);\n-  rtx res = gen_reg_rtx (QImode);\n-\n-  emit_insn (gen_fxamxf2_i387 (scratch, operands[1]));\n-\n-  emit_insn (gen_andqi_ext_1 (scratch, scratch, mask));\n-  emit_insn (gen_cmpqi_ext_3 (scratch, val));\n-  ix86_expand_setcc (res, EQ,\n-\t\t     gen_rtx_REG (CCmode, FLAGS_REG), const0_rtx);\n-  emit_insn (gen_zero_extendqisi2 (operands[0], res));\n-  DONE;\n-})\n-\n-(define_expand \"isinf<mode>2\"\n-  [(use (match_operand:SI 0 \"register_operand\"))\n-   (use (match_operand:MODEF 1 \"nonimmediate_operand\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && ix86_libc_has_function (function_c99_misc)\n-   && !(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n-{\n-  rtx mask = GEN_INT (0x45);\n-  rtx val = GEN_INT (0x05);\n-\n-  rtx scratch = gen_reg_rtx (HImode);\n-  rtx res = gen_reg_rtx (QImode);\n-\n-  /* Remove excess precision by forcing value through memory. */\n-  if (memory_operand (operands[1], VOIDmode))\n-    emit_insn (gen_fxam<mode>2_i387_with_temp (scratch, operands[1]));\n-  else\n-    {\n-      rtx temp = assign_386_stack_local (<MODE>mode, SLOT_TEMP);\n-\n-      emit_move_insn (temp, operands[1]);\n-      emit_insn (gen_fxam<mode>2_i387_with_temp (scratch, temp));\n-    }\n-\n-  emit_insn (gen_andqi_ext_1 (scratch, scratch, mask));\n-  emit_insn (gen_cmpqi_ext_3 (scratch, val));\n-  ix86_expand_setcc (res, EQ,\n-\t\t     gen_rtx_REG (CCmode, FLAGS_REG), const0_rtx);\n-  emit_insn (gen_zero_extendqisi2 (operands[0], res));\n-  DONE;\n-})\n-\n (define_expand \"signbittf2\"\n   [(use (match_operand:SI 0 \"register_operand\"))\n    (use (match_operand:TF 1 \"register_operand\"))]"}]}