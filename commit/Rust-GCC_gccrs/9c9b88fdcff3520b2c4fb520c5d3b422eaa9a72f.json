{"sha": "9c9b88fdcff3520b2c4fb520c5d3b422eaa9a72f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM5Yjg4ZmRjZmYzNTIwYjJjNGZiNTIwYzVkM2I0MjJlYWE5YTcyZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-09-18T11:36:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-09-18T12:48:42Z"}, "message": "tree-optimization/97081 - fix wrong-code with vectorized shift\n\nThis corrects the mask for creation of x << s | x >> (-x & mask)\nfrom a rotate x <<r s to use the precision of x.\n\n2020-09-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/97081\n\t* tree-vect-patterns.c (vect_recog_rotate_pattern): Use the\n\tprecision of the shifted operand to determine the mask.\n\n\t* gcc.dg/vect/pr97081.c: New testcase.", "tree": {"sha": "d4ddf6cfb0bcd6d65a75c889ee527c041c141bb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4ddf6cfb0bcd6d65a75c889ee527c041c141bb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c9b88fdcff3520b2c4fb520c5d3b422eaa9a72f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c9b88fdcff3520b2c4fb520c5d3b422eaa9a72f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c9b88fdcff3520b2c4fb520c5d3b422eaa9a72f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c9b88fdcff3520b2c4fb520c5d3b422eaa9a72f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f8022873c72e4abed7987cfa6b8ab9de6e53971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f8022873c72e4abed7987cfa6b8ab9de6e53971", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f8022873c72e4abed7987cfa6b8ab9de6e53971"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "bc83c88c019da6f67ddb49e6d36ddf8f642c6fc9", "filename": "gcc/testsuite/gcc.dg/vect/pr97081.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c9b88fdcff3520b2c4fb520c5d3b422eaa9a72f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97081.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c9b88fdcff3520b2c4fb520c5d3b422eaa9a72f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97081.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97081.c?ref=9c9b88fdcff3520b2c4fb520c5d3b422eaa9a72f", "patch": "@@ -0,0 +1,26 @@\n+#include \"tree-vect.h\"\n+\n+#define EXEC_ROR2(a, b, sz)     (a >> b) | (a << (64 - b))\n+\n+#define TYPE __UINT64_TYPE__\n+\n+void __attribute__((noipa))\n+exec_VRORudi_i(TYPE *__restrict__ pvd,\n+\t       TYPE *__restrict__ const pva, unsigned char IMM)\n+{\n+  unsigned char I2 = IMM & 63;\n+\n+  for (unsigned i = 0; i < 4; i++)\n+    pvd[i] = EXEC_ROR2(pva[i], I2, 8);\n+}\n+\n+int main()\n+{\n+  check_vect ();\n+\n+  TYPE pvd[4], pva[4] = { 0x0102030405060708, 0x0102030405060708, 0x0102030405060708, 0x0102030405060708 };\n+  exec_VRORudi_i (pvd, pva, 7);\n+  if (pvd[0] != 0x10020406080a0c0e)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "db45740da3cba14a3552f9446651e8f289187fbb", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c9b88fdcff3520b2c4fb520c5d3b422eaa9a72f/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c9b88fdcff3520b2c4fb520c5d3b422eaa9a72f/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=9c9b88fdcff3520b2c4fb520c5d3b422eaa9a72f", "patch": "@@ -2456,7 +2456,6 @@ vect_recog_rotate_pattern (vec_info *vinfo,\n       append_pattern_def_seq (vinfo, stmt_vinfo, def_stmt);\n     }\n   stype = TREE_TYPE (def);\n-  scalar_int_mode smode = SCALAR_INT_TYPE_MODE (stype);\n \n   if (TREE_CODE (def) == INTEGER_CST)\n     {\n@@ -2485,7 +2484,7 @@ vect_recog_rotate_pattern (vec_info *vinfo,\n \tappend_pattern_def_seq (vinfo, stmt_vinfo, def_stmt, vecstype);\n \n       def2 = vect_recog_temp_ssa_var (stype, NULL);\n-      tree mask = build_int_cst (stype, GET_MODE_PRECISION (smode) - 1);\n+      tree mask = build_int_cst (stype, GET_MODE_PRECISION (mode) - 1);\n       def_stmt = gimple_build_assign (def2, BIT_AND_EXPR,\n \t\t\t\t      gimple_assign_lhs (def_stmt), mask);\n       if (ext_def)"}]}