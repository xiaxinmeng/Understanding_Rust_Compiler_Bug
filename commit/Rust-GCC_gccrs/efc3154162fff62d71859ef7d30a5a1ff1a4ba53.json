{"sha": "efc3154162fff62d71859ef7d30a5a1ff1a4ba53", "node_id": "C_kwDOANBUbNoAKGVmYzMxNTQxNjJmZmY2MmQ3MTg1OWVmN2QzMGE1YTFmZjFhNGJhNTM", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-29T14:00:39Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-30T16:52:24Z"}, "message": "gccrs: make distinction between error and empty for substution args\n\nWhen handling generics of only lifetimes we have an empty\nSubstitutionArgumentMappings which was being detected as an error but this\nis not the case as we don't currently handle const generics or generic\nlifetimes so this makes the distinction between an error occurred or its\nsimply empty because it was all only lifetime arguments and we don't care\nabout it.\n\nAddresses #2043 #2039\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-tyty-bounds.cc (TypeBoundPredicate::TypeBoundPredicate): this is an empty\n\t(TypeBoundPredicate::operator=): likewise\n\t* typecheck/rust-tyty-subst.cc (SubstitutionArgumentMappings::empty): new interface\n\t(SubstitutionArgumentMappings::is_error): this marks it as an error\n\t* typecheck/rust-tyty-subst.h: update prototypes\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "789f2cb35e124cd25e0922c7af66a71a7bd7c1da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/789f2cb35e124cd25e0922c7af66a71a7bd7c1da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efc3154162fff62d71859ef7d30a5a1ff1a4ba53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc3154162fff62d71859ef7d30a5a1ff1a4ba53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc3154162fff62d71859ef7d30a5a1ff1a4ba53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc3154162fff62d71859ef7d30a5a1ff1a4ba53/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "441c1d06b9b4c311eb599c9cf45cc2ce3b65b4b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441c1d06b9b4c311eb599c9cf45cc2ce3b65b4b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/441c1d06b9b4c311eb599c9cf45cc2ce3b65b4b2"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "0fb6e7df95b6b446143350e61acc88676e1c0b28", "filename": "gcc/rust/typecheck/rust-tyty-bounds.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc3154162fff62d71859ef7d30a5a1ff1a4ba53/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc3154162fff62d71859ef7d30a5a1ff1a4ba53/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc?ref=efc3154162fff62d71859ef7d30a5a1ff1a4ba53", "patch": "@@ -271,7 +271,7 @@ namespace TyTy {\n \n TypeBoundPredicate::TypeBoundPredicate (\n   const Resolver::TraitReference &trait_reference, Location locus)\n-  : SubstitutionRef ({}, SubstitutionArgumentMappings::error ()),\n+  : SubstitutionRef ({}, SubstitutionArgumentMappings::empty ()),\n     reference (trait_reference.get_mappings ().get_defid ()), locus (locus),\n     error_flag (false)\n {\n@@ -286,7 +286,7 @@ TypeBoundPredicate::TypeBoundPredicate (\n \n TypeBoundPredicate::TypeBoundPredicate (\n   DefId reference, std::vector<SubstitutionParamMapping> subst, Location locus)\n-  : SubstitutionRef ({}, SubstitutionArgumentMappings::error ()),\n+  : SubstitutionRef ({}, SubstitutionArgumentMappings::empty ()),\n     reference (reference), locus (locus), error_flag (false)\n {\n   substitutions.clear ();\n@@ -299,7 +299,7 @@ TypeBoundPredicate::TypeBoundPredicate (\n }\n \n TypeBoundPredicate::TypeBoundPredicate (const TypeBoundPredicate &other)\n-  : SubstitutionRef ({}, SubstitutionArgumentMappings::error ()),\n+  : SubstitutionRef ({}, SubstitutionArgumentMappings::empty ()),\n     reference (other.reference), locus (other.locus),\n     error_flag (other.error_flag)\n {\n@@ -337,7 +337,7 @@ TypeBoundPredicate::operator= (const TypeBoundPredicate &other)\n   reference = other.reference;\n   locus = other.locus;\n   error_flag = other.error_flag;\n-  used_arguments = SubstitutionArgumentMappings::error ();\n+  used_arguments = SubstitutionArgumentMappings::empty ();\n \n   substitutions.clear ();\n   for (const auto &p : other.get_substs ())"}, {"sha": "60bf219e26cb68e407f05f22787c5ae90a29fb42", "filename": "gcc/rust/typecheck/rust-tyty-subst.cc", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc3154162fff62d71859ef7d30a5a1ff1a4ba53/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc3154162fff62d71859ef7d30a5a1ff1a4ba53/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.cc?ref=efc3154162fff62d71859ef7d30a5a1ff1a4ba53", "patch": "@@ -236,16 +236,17 @@ SubstitutionArg::as_string () const\n SubstitutionArgumentMappings::SubstitutionArgumentMappings (\n   std::vector<SubstitutionArg> mappings,\n   std::map<std::string, BaseType *> binding_args, Location locus,\n-  ParamSubstCb param_subst_cb, bool trait_item_flag)\n+  ParamSubstCb param_subst_cb, bool trait_item_flag, bool error_flag)\n   : mappings (mappings), binding_args (binding_args), locus (locus),\n-    param_subst_cb (param_subst_cb), trait_item_flag (trait_item_flag)\n+    param_subst_cb (param_subst_cb), trait_item_flag (trait_item_flag),\n+    error_flag (error_flag)\n {}\n \n SubstitutionArgumentMappings::SubstitutionArgumentMappings (\n   const SubstitutionArgumentMappings &other)\n   : mappings (other.mappings), binding_args (other.binding_args),\n     locus (other.locus), param_subst_cb (nullptr),\n-    trait_item_flag (other.trait_item_flag)\n+    trait_item_flag (other.trait_item_flag), error_flag (other.error_flag)\n {}\n \n SubstitutionArgumentMappings &\n@@ -257,20 +258,29 @@ SubstitutionArgumentMappings::operator= (\n   locus = other.locus;\n   param_subst_cb = nullptr;\n   trait_item_flag = other.trait_item_flag;\n+  error_flag = other.error_flag;\n \n   return *this;\n }\n \n SubstitutionArgumentMappings\n SubstitutionArgumentMappings::error ()\n {\n-  return SubstitutionArgumentMappings ({}, {}, Location (), nullptr, false);\n+  return SubstitutionArgumentMappings ({}, {}, Location (), nullptr, false,\n+\t\t\t\t       true);\n+}\n+\n+SubstitutionArgumentMappings\n+SubstitutionArgumentMappings::empty ()\n+{\n+  return SubstitutionArgumentMappings ({}, {}, Location (), nullptr, false,\n+\t\t\t\t       false);\n }\n \n bool\n SubstitutionArgumentMappings::is_error () const\n {\n-  return mappings.size () == 0;\n+  return error_flag;\n }\n \n bool"}, {"sha": "639a275eea0c96e07d84622f9159925eed85f15d", "filename": "gcc/rust/typecheck/rust-tyty-subst.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc3154162fff62d71859ef7d30a5a1ff1a4ba53/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc3154162fff62d71859ef7d30a5a1ff1a4ba53/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.h?ref=efc3154162fff62d71859ef7d30a5a1ff1a4ba53", "patch": "@@ -109,7 +109,8 @@ class SubstitutionArgumentMappings\n \t\t\t\tstd::map<std::string, BaseType *> binding_args,\n \t\t\t\tLocation locus,\n \t\t\t\tParamSubstCb param_subst_cb = nullptr,\n-\t\t\t\tbool trait_item_flag = false);\n+\t\t\t\tbool trait_item_flag = false,\n+\t\t\t\tbool error_flag = false);\n \n   SubstitutionArgumentMappings (const SubstitutionArgumentMappings &other);\n   SubstitutionArgumentMappings &\n@@ -120,6 +121,7 @@ class SubstitutionArgumentMappings\n     = default;\n \n   static SubstitutionArgumentMappings error ();\n+  static SubstitutionArgumentMappings empty ();\n \n   bool is_error () const;\n \n@@ -161,6 +163,7 @@ class SubstitutionArgumentMappings\n   Location locus;\n   ParamSubstCb param_subst_cb;\n   bool trait_item_flag;\n+  bool error_flag;\n };\n \n class SubstitutionRef"}]}