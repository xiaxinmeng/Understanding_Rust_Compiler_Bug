{"sha": "a6873608446d86909cf4a60fea355091b1297e8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY4NzM2MDg0NDZkODY5MDljZjRhNjBmZWEzNTUwOTFiMTI5N2U4ZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-12-05T00:20:43Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-12-05T00:20:43Z"}, "message": "varray.h (varray_head_tag): Add elements_used.\n\n\t* varray.h (varray_head_tag): Add elements_used.\n\t(VARRAY_PUSH): New macro.\n\t(VARRAY_POP): Likewise.\n\t(VARRAY_TOP): Likewise.\n\tAdd variants of VARRAY_PUSH and VARRAY_POP for all varray element\n\ttypes.\n\t* varray.c (varray_init): Initialize elements_used.\n\t* Makefile.in (BASIC_BLOCK_H): Add varray.h.\n\t(INTEGRATE_H): New variable.\n\t(integrate.o): Depend on INTEGRATE_H.\n\t(unroll.o): Likewise.\n\nFrom-SVN: r30777", "tree": {"sha": "140a755d82250e682ae8859b95daa46daee2869d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/140a755d82250e682ae8859b95daa46daee2869d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6873608446d86909cf4a60fea355091b1297e8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6873608446d86909cf4a60fea355091b1297e8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6873608446d86909cf4a60fea355091b1297e8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6873608446d86909cf4a60fea355091b1297e8d/comments", "author": null, "committer": null, "parents": [{"sha": "4ce893648569539981c77058e89108a9461217ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ce893648569539981c77058e89108a9461217ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ce893648569539981c77058e89108a9461217ab"}], "stats": {"total": 76, "additions": 72, "deletions": 4}, "files": [{"sha": "9ac6d32a99d176e454a3fbcf73c0e34b82b6ac60", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6873608446d86909cf4a60fea355091b1297e8d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6873608446d86909cf4a60fea355091b1297e8d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a6873608446d86909cf4a60fea355091b1297e8d", "patch": "@@ -743,11 +743,12 @@ MACHMODE_H = machmode.h machmode.def\n RTL_BASE_H = rtl.h rtl.def $(MACHMODE_H)\n RTL_H = $(RTL_BASE_H) genrtl.h\n TREE_H = tree.h real.h tree.def $(MACHMODE_H) tree-check.h\n-BASIC_BLOCK_H = basic-block.h bitmap.h sbitmap.h\n+BASIC_BLOCK_H = basic-block.h bitmap.h sbitmap.h varray.h\n DEMANGLE_H = $(srcdir)/../include/demangle.h\n RECOG_H = recog.h\n EXPR_H = expr.h insn-codes.h\n REGS_H = regs.h varray.h $(MACHMODE_H)\n+INTREGRATE_H = integrate.h varray.h\n LOOP_H = loop.h varray.h\n #\f\n # Language makefile fragments.\n@@ -1527,7 +1528,7 @@ emit-rtl.o : emit-rtl.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    $(EXPR_H) $(srcdir)/../include/obstack.h hard-reg-set.h bitmap.h toplev.h\n real.o : real.c $(CONFIG_H) system.h $(TREE_H) toplev.h\n integrate.o : integrate.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n-   integrate.h insn-flags.h insn-config.h $(EXPR_H) real.h $(REGS_H) \\\n+   $(INTEGRATE_H) insn-flags.h insn-config.h $(EXPR_H) real.h $(REGS_H) \\\n    intl.h function.h output.h $(RECOG_H) except.h toplev.h $(LOOP_H)\n jump.o : jump.c $(CONFIG_H) system.h $(RTL_H) flags.h hard-reg-set.h $(REGS_H) \\\n    insn-config.h insn-flags.h $(RECOG_H) $(EXPR_H) real.h except.h function.h \\\n@@ -1555,7 +1556,8 @@ loop.o : loop.c $(CONFIG_H) system.h $(RTL_H) flags.h $(LOOP_H) insn-config.h \\\n    insn-flags.h $(REGS_H) hard-reg-set.h $(RECOG_H) $(EXPR_H) real.h \\\n    $(BASIC_BLOCK_H) function.h toplev.h varray.h except.h\n unroll.o : unroll.c $(CONFIG_H) system.h $(RTL_H) insn-config.h function.h \\\n-   integrate.h $(REGS_H) $(RECOG_H) flags.h $(EXPR_H) $(LOOP_H) toplev.h varray.h\n+   $(INTEGRATE_H) $(REGS_H) $(RECOG_H) flags.h $(EXPR_H) $(LOOP_H) toplev.h \\\n+   varray.h \n flow.o : flow.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h insn-config.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h $(RECOG_H) \\\n    insn-flags.h function.h except.h"}, {"sha": "516913617afff7a2a7a9c7bc91e7657f4e053ad1", "filename": "gcc/varray.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6873608446d86909cf4a60fea355091b1297e8d/gcc%2Fvarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6873608446d86909cf4a60fea355091b1297e8d/gcc%2Fvarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.c?ref=a6873608446d86909cf4a60fea355091b1297e8d", "patch": "@@ -40,8 +40,9 @@ varray_init (num_elements, element_size, name)\n   varray_type ptr = (varray_type) xcalloc (VARRAY_HDR_SIZE + data_size, 1);\n \n   ptr->num_elements = num_elements;\n+  ptr->elements_used = 0;\n   ptr->element_size = element_size;\n-  ptr->name\t    = name;\n+  ptr->name = name;\n   return ptr;\n }\n "}, {"sha": "0d1843bef0d6abb8abd3d51c2345da9d48d52979", "filename": "gcc/varray.h", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6873608446d86909cf4a60fea355091b1297e8d/gcc%2Fvarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6873608446d86909cf4a60fea355091b1297e8d/gcc%2Fvarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.h?ref=a6873608446d86909cf4a60fea355091b1297e8d", "patch": "@@ -81,6 +81,8 @@ typedef union varray_data_tag {\n /* Virtual array of pointers header.  */\n typedef struct varray_head_tag {\n   size_t\tnum_elements;\t/* maximum element number allocated */\n+  size_t        elements_used;  /* the number of elements used, if\n+\t\t\t\t   using VARRAY_PUSH/VARRAY_POP.  */\n   size_t\telement_size;\t/* size of each data element */\n   const char   *name;\t\t/* name of the varray for reporting errors */\n   varray_data\tdata;\t\t/* data elements follow, must be last */\n@@ -178,6 +180,25 @@ extern void varray_check_failed PROTO ((varray_type, size_t,\n #define VARRAY_CHECK(VA, N, T) ((VA)->data.T[N])\n #endif\n \n+/* Push X onto VA.  T is the name of the field in varray_data\n+   corresponding to the type of X.  */\n+#define VARRAY_PUSH(VA, T, X) \t\t\t\t\\\n+  do \t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      if ((VA)->elements_used >= (VA)->num_elements)\t\\\n+        VARRAY_GROW ((VA), 2 * (VA)->num_elements);\t\\\n+      (VA)->data.T[(VA)->elements_used++] = (X);\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Pop the top element of VA.  */\n+#define VARRAY_POP(VA) \\\n+  ((VA)->elements_used--)\n+\n+/* Return the top element of VA.  */\n+#define VARRAY_TOP(VA, T) \\\n+  ((VA)->data.T[(VA)->elements_used - 1])\n+\n #define VARRAY_CHAR(VA, N)\t\tVARRAY_CHECK (VA, N, c)\n #define VARRAY_UCHAR(VA, N)\t\tVARRAY_CHECK (VA, N, uc)\n #define VARRAY_SHORT(VA, N)\t\tVARRAY_CHECK (VA, N, s)\n@@ -199,4 +220,48 @@ extern void varray_check_failed PROTO ((varray_type, size_t,\n #define VARRAY_CONST_EQUIV(VA, N)\tVARRAY_CHECK (VA, N, const_equiv)\n #define VARRAY_BB(VA, N)\t\tVARRAY_CHECK (VA, N, bb)\n \n+/* Push a new element on the end of VA, extending it if necessary.  */\n+#define VARRAY_PUSH_CHAR(VA, X)\t\tVARRAY_PUSH (VA, c, X)\n+#define VARRAY_PUSH_UCHAR(VA, X)\tVARRAY_PUSH (VA, uc, X)\n+#define VARRAY_PUSH_SHORT(VA, X)\tVARRAY_PUSH (VA, s, X)\n+#define VARRAY_PUSH_USHORT(VA, X)\tVARRAY_PUSH (VA, us, X)\n+#define VARRAY_PUSH_INT(VA, X)\t\tVARRAY_PUSH (VA, i, X)\n+#define VARRAY_PUSH_UINT(VA, X)\t\tVARRAY_PUSH (VA, u, X)\n+#define VARRAY_PUSH_LONG(VA, X)\t\tVARRAY_PUSH (VA, l, X)\n+#define VARRAY_PUSH_ULONG(VA, X)\tVARRAY_PUSH (VA, ul, X)\n+#define VARRAY_PUSH_WIDE_INT(VA, X)\tVARRAY_PUSH (VA, hint, X)\n+#define VARRAY_PUSH_UWIDE_INT(VA, X)\tVARRAY_PUSH (VA, uhint, X)\n+#define VARRAY_PUSH_GENERIC_PTR(VA,N)\tVARRAY_PUSH (VA, generic, X)\n+#define VARRAY_PUSH_CHAR_PTR(VA,N)\tVARRAY_PUSH (VA, cptr, X)\n+#define VARRAY_PUSH_RTX(VA, X)\t\tVARRAY_PUSH (VA, rtx, X)\n+#define VARRAY_PUSH_RTVEC(VA, X)\tVARRAY_PUSH (VA, rtvec, X)\n+#define VARRAY_PUSH_TREE(VA, X)\t\tVARRAY_PUSH (VA, tree, X)\n+#define VARRAY_PUSH_BITMAP(VA, X)\tVARRAY_PUSH (VA, bitmap, X)\n+#define VARRAY_PUSH_SCHED(VA, X)\tVARRAY_PUSH (VA, sched, X)\n+#define VARRAY_PUSH_REG(VA, X)\t\tVARRAY_PUSH (VA, reg, X)\n+#define VARRAY_PUSH_CONST_EQUIV(VA, X)\tVARRAY_PUSH (VA, const_equiv, X)\n+#define VARRAY_PUSH_BB(VA, X)\t\tVARRAY_PUSH (VA, bb, X)\n+\n+/* Return the last element of VA.  */\n+#define VARRAY_TOP_CHAR(VA)\t\tVARRAY_TOP (VA, c)\n+#define VARRAY_TOP_UCHAR(VA)\t        VARRAY_TOP (VA, uc)\n+#define VARRAY_TOP_SHORT(VA)\t        VARRAY_TOP (VA, s)\n+#define VARRAY_TOP_USHORT(VA)\t        VARRAY_TOP (VA, us)\n+#define VARRAY_TOP_INT(VA)\t\tVARRAY_TOP (VA, i)\n+#define VARRAY_TOP_UINT(VA)\t\tVARRAY_TOP (VA, u)\n+#define VARRAY_TOP_LONG(VA)\t\tVARRAY_TOP (VA, l)\n+#define VARRAY_TOP_ULONG(VA)\t        VARRAY_TOP (VA, ul)\n+#define VARRAY_TOP_WIDE_INT(VA)\t        VARRAY_TOP (VA, hint)\n+#define VARRAY_TOP_UWIDE_INT(VA)\tVARRAY_TOP (VA, uhint)\n+#define VARRAY_TOP_GENERIC_PTR(VA,N)\tVARRAY_TOP (VA, generic)\n+#define VARRAY_TOP_CHAR_PTR(VA,N)\tVARRAY_TOP (VA, cptr)\n+#define VARRAY_TOP_RTX(VA)\t\tVARRAY_TOP (VA, rtx)\n+#define VARRAY_TOP_RTVEC(VA)\t        VARRAY_TOP (VA, rtvec)\n+#define VARRAY_TOP_TREE(VA)\t\tVARRAY_TOP (VA, tree)\n+#define VARRAY_TOP_BITMAP(VA)\t        VARRAY_TOP (VA, bitmap)\n+#define VARRAY_TOP_SCHED(VA)\t        VARRAY_TOP (VA, sched)\n+#define VARRAY_TOP_REG(VA)\t\tVARRAY_TOP (VA, reg)\n+#define VARRAY_TOP_CONST_EQUIV(VA)\tVARRAY_TOP (VA, const_equiv)\n+#define VARRAY_TOP_BB(VA)\t\tVARRAY_TOP (VA, bb)\n+\n #endif /* _VARRAY_H_ */"}]}