{"sha": "047142d32ee7988c4715e6784fd0fe228db7caa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ3MTQyZDMyZWU3OTg4YzQ3MTVlNjc4NGZkMGZlMjI4ZGI3Y2FhOA==", "commit": {"author": {"name": "Philipp Thomas", "email": "pthomas@suse.de", "date": "2000-06-27T02:26:23Z"}, "committer": {"name": "Philipp Thomas", "email": "pthomas@gcc.gnu.org", "date": "2000-06-27T02:26:23Z"}, "message": "1750a.h: Mark help strings for options/switches for translation.\n\n2000-06-27  Philipp Thomas  <pthomas@suse.de>\n\n\t* 1750a.h: Mark help strings for options/switches for translation.\n\t* a29k.h: Likewise.\n\t* alpha.h: Likewise.\n\t* arm.h: Likewise.\n\t* pe.h: Likewise.\n\t* riscix.h: Likewise.\n\t* c4x.h: Likewise.\n\t* clipper.h: Likewise.\n\t* convex.h: Likewise.\n\t* elxsi.h: Likewise.\n\t* fr30.h: Likewise.\n\t* fx80.h: Likewise.\n\t* h8300.h: Likewise.\n\t* i370.h: Likewise.\n\t* cygwin.h: Likewise.\n\t* dgux.h: Likewise.\n\t* djgpp.h: Likewise.\n\t* i386.h: Likewise.\n\t* osf1elf.h: Likewise.\n\t* osfrose.h: Likewise.\n\t* sco5.h: Likewise.\n\t* win32.h: Likewise.\n\t* i860.h: Likewise.\n\t* paragon.h: Likewise.\n\t* i960.h: Likewise.\n\t* ia64.h: Likewise.\n\t* m32r.h: Likewise.\n\t* mcore.h: Likewise.\n\t* mips.h: Likewise.\n\t* mn10300.h: Likewise.\n\t* ns32k.h: Likewise.\n\t* pdp11.h: Likewise.\n\t* pj.h: Likewise.\n\t* aix.h: Likewise.\n\t* aix41.h: Likewise.\n\t* aix43.h: Likewise.\n\t* beos.h: Likewise.\n\t* rs6000.h: Likewise.\n\t* sysv4.h: Likewise.\n\t* linux.h: Likewise.\n\t* linux64.h: Likewise.\n\t* sp64-elf.h: Likewise.\n\t* sparc.h: Likewise.\n\t* splet.h: Likewise.\n\t* v850.h: Likewise.\n\t* convex.h (TARGET_SWITCHES): Provide descriptions and mark them\n\tfor translation.\n\t* sp86x-aout.h: Remove bogus first definition of SUBTARGET_SWITCHES.\n\tProperly document option and mark for translation.\n\t* sp86x-elf.h: Likewise.\n\nFrom-SVN: r34724", "tree": {"sha": "96359c9e7d2f56ec3735ed3377047a2227a37041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96359c9e7d2f56ec3735ed3377047a2227a37041"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/047142d32ee7988c4715e6784fd0fe228db7caa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047142d32ee7988c4715e6784fd0fe228db7caa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/047142d32ee7988c4715e6784fd0fe228db7caa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047142d32ee7988c4715e6784fd0fe228db7caa8/comments", "author": null, "committer": null, "parents": [{"sha": "ec611c173f6d46f47efca1529a3ef10a96de7199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec611c173f6d46f47efca1529a3ef10a96de7199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec611c173f6d46f47efca1529a3ef10a96de7199"}], "stats": {"total": 1710, "additions": 937, "deletions": 773}, "files": [{"sha": "2403eebcc44ca077500c1ac8258944888577a4be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -1,3 +1,56 @@\n+2000-06-27  Philipp Thomas  <pthomas@suse.de>\n+\n+\t* 1750a.h: Mark help strings for options/switches for translation.\n+\t* a29k.h: Likewise.\n+\t* alpha.h: Likewise.\n+\t* arm.h: Likewise.\n+\t* pe.h: Likewise.\n+\t* riscix.h: Likewise.\n+\t* c4x.h: Likewise.\n+\t* clipper.h: Likewise.\n+\t* convex.h: Likewise. \n+\t* elxsi.h: Likewise.\n+\t* fr30.h: Likewise.\n+\t* fx80.h: Likewise.\n+\t* h8300.h: Likewise.\n+\t* i370.h: Likewise.\n+\t* cygwin.h: Likewise.\n+\t* dgux.h: Likewise.\n+\t* djgpp.h: Likewise.\n+\t* i386.h: Likewise.\n+\t* osf1elf.h: Likewise.\n+\t* osfrose.h: Likewise.\n+\t* sco5.h: Likewise.\n+\t* win32.h: Likewise.\n+\t* i860.h: Likewise.\n+\t* paragon.h: Likewise.\n+\t* i960.h: Likewise.\n+\t* ia64.h: Likewise.\n+\t* m32r.h: Likewise.\n+\t* mcore.h: Likewise.\n+\t* mips.h: Likewise.\n+\t* mn10300.h: Likewise.\n+\t* ns32k.h: Likewise.\n+\t* pdp11.h: Likewise.\n+\t* pj.h: Likewise.\n+\t* aix.h: Likewise.\n+\t* aix41.h: Likewise.\n+\t* aix43.h: Likewise.\n+\t* beos.h: Likewise.\n+\t* rs6000.h: Likewise.\n+\t* sysv4.h: Likewise.\n+\t* linux.h: Likewise.\n+\t* linux64.h: Likewise.\n+\t* sp64-elf.h: Likewise.\n+\t* sparc.h: Likewise.\n+\t* splet.h: Likewise.\n+\t* v850.h: Likewise.\n+\t* convex.h (TARGET_SWITCHES): Provide descriptions and mark them\n+\tfor translation.\n+\t* sp86x-aout.h: Remove bogus first definition of SUBTARGET_SWITCHES.\n+\tProperly document option and mark for translation.\n+\t* sp86x-elf.h: Likewise.\n+\n 2000-06-27  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \tAdd MMX and SSE registers to i386 machine description."}, {"sha": "d5ad9d146c7e53b504da44bb08f988cc1086ab28", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -35,8 +35,8 @@ Boston, MA 02111-1307, USA.  */\n \n /* Run-time compilation parameters selecting different hardware subsets.  */\n \n-#define TARGET_SWITCHES  \\\n-  { {\"vaxc-alignment\", 2, \"Use VAX-C alignment\"}, \\\n+#define TARGET_SWITCHES\t\t\t\t\t\\\n+  { {\"vaxc-alignment\", 2, N_(\"Use VAX-C alignment\")},\t\\\n     { \"\", TARGET_DEFAULT, NULL}}\n \n /* Default target_flags if no switches specified.  */"}, {"sha": "7ab10eee4da9c60e99a9946b7ad33a1dd346c77a", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -98,25 +98,25 @@ extern int target_flags;\n #define TARGET_MULTM\t\t((target_flags & 1024) == 0)\n \n #define TARGET_SWITCHES\t\t\t\\\n-  { {\"dw\", 1, \"Generate code assuming DW bit is set\"},\t\t\t\\\n-    {\"ndw\", -1, \"Generate code assuming DW bit is not set\"},\t\t\\\n-    {\"bw\", 2, \"Generate code using byte writes\"},\t\t\t\\\n-    {\"nbw\", - (1|2), \"Do not generate byte writes\"},\t\t\t\\\n-    {\"small\", 4, \"Use small memory model\"},\t\t\t\t\\\n-    {\"normal\", - (4|8), \"Use normal memory model\"},\t\t\t\\\n-    {\"large\", 8, \"Use large memory model\"},\t\t\t\t\\\n-    {\"29050\", 16+128, \"Generate 29050 code\"},\t\t\t\t\\\n-    {\"29000\", -16, \"Generate 29000 code\"},\t\t\t\t\\\n-    {\"kernel-registers\", 32, \"Use kernel global registers\"},\t\t\\\n-    {\"user-registers\", -32, \"Use user global registers\"},\t\t\\\n-    {\"stack-check\", 64, \"Emit stack checking code\"},\t\t\t\\\n-    {\"no-stack-check\", - 74, \"Do not emit stack checking code\"},\t\\\n-    {\"storem-bug\", -128, \"Work around storem hardware bug\"},\t\t\\\n-    {\"no-storem-bug\", 128, \"Do not work around storem hardware bug\"},\t\\\n-    {\"reuse-arg-regs\", -256, \"Store locals in argument registers\"},\t\\\n-    {\"no-reuse-arg-regs\", 256, \"Do not store locals in arg registers\"},\t\\\n-    {\"soft-float\", 512, \"Use software floating point\"},\t\t\t\\\n-    {\"no-multm\", 1024, \"Do not generate multm instructions\"},\t\t\\\n+  { {\"dw\", 1, N_(\"Generate code assuming DW bit is set\")},\t\t\\\n+    {\"ndw\", -1, N_(\"Generate code assuming DW bit is not set\")},\t\\\n+    {\"bw\", 2, N_(\"Generate code using byte writes\")},\t\t\t\\\n+    {\"nbw\", - (1|2), N_(\"Do not generate byte writes\")},\t\t\\\n+    {\"small\", 4, N_(\"Use small memory model\")},\t\t\t\t\\\n+    {\"normal\", - (4|8), N_(\"Use normal memory model\")},\t\t\t\\\n+    {\"large\", 8, N_(\"Use large memory model\")},\t\t\t\t\\\n+    {\"29050\", 16+128, N_(\"Generate 29050 code\")},\t\t\t\\\n+    {\"29000\", -16, N_(\"Generate 29000 code\")},\t\t\t\t\\\n+    {\"kernel-registers\", 32, N_(\"Use kernel global registers\")},\t\\\n+    {\"user-registers\", -32, N_(\"Use user global registers\")},\t\t\\\n+    {\"stack-check\", 64, N_(\"Emit stack checking code\")},\t\t\\\n+    {\"no-stack-check\", - 74, N_(\"Do not emit stack checking code\")},\t\\\n+    {\"storem-bug\", -128, N_(\"Work around storem hardware bug\")},\t\\\n+    {\"no-storem-bug\", 128, N_(\"Do not work around storem hardware bug\")},\t\\\n+    {\"reuse-arg-regs\", -256, N_(\"Store locals in argument registers\")},\t\t\\\n+    {\"no-reuse-arg-regs\", 256, N_(\"Do not store locals in arg registers\")},\t\\\n+    {\"soft-float\", 512, N_(\"Use software floating point\")},\t\t\t\\\n+    {\"no-multm\", 1024, N_(\"Do not generate multm instructions\")},\t\t\\\n     {\"\", TARGET_DEFAULT, NULL}}\n \n #define TARGET_DEFAULT 3"}, {"sha": "878a9c3a6b2865efef2d9be05375ef164e613755", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -196,29 +196,32 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n    An empty string NAME is used to identify the default VALUE.  */\n \n #define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n-  { {\"no-soft-float\", MASK_FP, \"Use hardware fp\"},\t\t\t\\\n-    {\"soft-float\", - MASK_FP, \"Do not use hardware fp\"},\t\t\\\n-    {\"fp-regs\", MASK_FPREGS, \"Use fp registers\"},\t\t\t\\\n-    {\"no-fp-regs\", - (MASK_FP|MASK_FPREGS), \"Do not use fp registers\"},\t\\\n-    {\"alpha-as\", -MASK_GAS, \"Do not assume GAS\"},\t\t\t\\\n-    {\"gas\", MASK_GAS, \"Assume GAS\"},\t\t\t\t\t\\\n+  { {\"no-soft-float\", MASK_FP, N_(\"Use hardware fp\")},\t\t\t\\\n+    {\"soft-float\", - MASK_FP, N_(\"Do not use hardware fp\")},\t\t\\\n+    {\"fp-regs\", MASK_FPREGS, N_(\"Use fp registers\")},\t\t\t\\\n+    {\"no-fp-regs\", - (MASK_FP|MASK_FPREGS),\t\t\t\t\\\n+     N_(\"Do not use fp registers\")},\t\t\t\t\t\\\n+    {\"alpha-as\", -MASK_GAS, N_(\"Do not assume GAS\")},\t\t\t\\\n+    {\"gas\", MASK_GAS, N_(\"Assume GAS\")},\t\t\t\t\\\n     {\"ieee-conformant\", MASK_IEEE_CONFORMANT,\t\t\t\t\\\n-     \"Request IEEE-conformant math library routines (OSF/1)\"},\t\t\\\n+     N_(\"Request IEEE-conformant math library routines (OSF/1)\")},\t\\\n     {\"ieee\", MASK_IEEE|MASK_IEEE_CONFORMANT,\t\t\t\t\\\n-     \"Emit IEEE-conformant code, without inexact exceptions\"},\t\t\\\n+     N_(\"Emit IEEE-conformant code, without inexact exceptions\")},\t\\\n     {\"ieee-with-inexact\", MASK_IEEE_WITH_INEXACT|MASK_IEEE_CONFORMANT,\t\\\n-     \"Emit IEEE-conformant code, with inexact exceptions\"},\t\t\\\n+     N_(\"Emit IEEE-conformant code, with inexact exceptions\")},\t\t\\\n     {\"build-constants\", MASK_BUILD_CONSTANTS,\t\t\t\t\\\n-     \"Do not emit complex integer constants to read-only memory\"},\t\\\n-    {\"float-vax\", MASK_FLOAT_VAX, \"Use VAX fp\"},\t\t\t\\\n-    {\"float-ieee\", -MASK_FLOAT_VAX, \"Do not use VAX fp\"},\t\t\\\n-    {\"bwx\", MASK_BWX, \"Emit code for the byte/word ISA extension\"},\t\\\n+     N_(\"Do not emit complex integer constants to read-only memory\")},\t\\\n+    {\"float-vax\", MASK_FLOAT_VAX, N_(\"Use VAX fp\")},\t\t\t\\\n+    {\"float-ieee\", -MASK_FLOAT_VAX, N_(\"Do not use VAX fp\")},\t\t\\\n+    {\"bwx\", MASK_BWX, N_(\"Emit code for the byte/word ISA extension\")},\t\\\n     {\"no-bwx\", -MASK_BWX, \"\"},\t\t\t\t\t\t\\\n-    {\"max\", MASK_MAX, \"Emit code for the motion video ISA extension\"},\t\\\n+    {\"max\", MASK_MAX,\t\t\t\t\t\t\t\\\n+     N_(\"Emit code for the motion video ISA extension\")},\t\t\\\n     {\"no-max\", -MASK_MAX, \"\"},\t\t\t\t\t\t\\\n-    {\"fix\", MASK_FIX, \"Emit code for the fp move and sqrt ISA extension\"}, \\\n+    {\"fix\", MASK_FIX,\t\t\t\t\t\t\t\\\n+     N_(\"Emit code for the fp move and sqrt ISA extension\")}, \t\t\\\n     {\"no-fix\", -MASK_FIX, \"\"},\t\t\t\t\t\t\\\n-    {\"cix\", MASK_CIX, \"Emit code for the counting ISA extension\"},\t\\\n+    {\"cix\", MASK_CIX, N_(\"Emit code for the counting ISA extension\")},\t\\\n     {\"no-cix\", -MASK_CIX, \"\"},\t\t\t\t\t\t\\\n     {\"\", TARGET_DEFAULT | TARGET_CPU_DEFAULT, \"\"} }\n \n@@ -254,15 +257,15 @@ extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n #define TARGET_OPTIONS\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\\\n   {\"cpu=\",\t\t&alpha_cpu_string,\t\t\\\n-   \"Generate code for a given CPU\"},\t\t\t\\\n+   N_(\"Generate code for a given CPU\")},\t\t\\\n   {\"fp-rounding-mode=\",\t&alpha_fprm_string,\t\t\\\n-   \"Control the generated fp rounding mode\"},\t\t\\\n+   N_(\"Control the generated fp rounding mode\")},\t\\\n   {\"fp-trap-mode=\",\t&alpha_fptm_string,\t\t\\\n-   \"Control the IEEE trap mode\"},\t\t\t\\\n+   N_(\"Control the IEEE trap mode\")},\t\t\t\\\n   {\"trap-precision=\",\t&alpha_tp_string,\t\t\\\n-   \"Control the precision given to fp exceptions\"},\t\\\n+   N_(\"Control the precision given to fp exceptions\")},\t\\\n   {\"memory-latency=\",\t&alpha_mlat_string,\t\t\\\n-   \"Tune expected memory latency\"},\t\t\t\\\n+   N_(\"Tune expected memory latency\")},\t\t\t\\\n }\n \n /* Attempt to describe CPU characteristics to the preprocessor.  */"}, {"sha": "8c9517be8b644f9b41ff6cae4c09650068018189", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 81, "deletions": 81, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -387,96 +387,96 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n #define SUBTARGET_SWITCHES\n #endif\n \n-#define TARGET_SWITCHES\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  {\"apcs\",\t\t\tARM_FLAG_APCS_FRAME, \"\" },\t\\\n-  {\"apcs-frame\",\t\tARM_FLAG_APCS_FRAME,\t\t\\\n-     \"Generate APCS conformant stack frames\" },\t\t\t\\\n-  {\"no-apcs-frame\",\t       -ARM_FLAG_APCS_FRAME, \"\" },\t\\\n-  {\"poke-function-name\",\tARM_FLAG_POKE,\t\t\t\\\n-     \"Store function names in object code\" },\t\t\t\\\n-  {\"no-poke-function-name\",    -ARM_FLAG_POKE, \"\" },\t\t\\\n-  {\"fpe\",\t\t\tARM_FLAG_FPE,  \"\" },\t\t\\\n-  {\"apcs-32\",\t\t\tARM_FLAG_APCS_32,\t\t\\\n-     \"Use the 32bit version of the APCS\" },\t\t\t\\\n-  {\"apcs-26\",\t\t       -ARM_FLAG_APCS_32,\t\t\\\n-     \"Use the 26bit version of the APCS\" },\t\t\t\\\n-  {\"apcs-stack-check\",\t\tARM_FLAG_APCS_STACK, \"\" },\t\\\n-  {\"no-apcs-stack-check\",      -ARM_FLAG_APCS_STACK, \"\" },\t\\\n-  {\"apcs-float\",\t\tARM_FLAG_APCS_FLOAT,\t\t\\\n-     \"Pass FP arguments in FP registers\" },\t\t\t\\\n-  {\"no-apcs-float\",\t       -ARM_FLAG_APCS_FLOAT, \"\" },\t\\\n-  {\"apcs-reentrant\",\t\tARM_FLAG_APCS_REENT,\t\t\\\n-     \"Generate re-entrant, PIC code\" },\t\t\t\t\\\n-  {\"no-apcs-reentrant\",\t       -ARM_FLAG_APCS_REENT, \"\" },\t\\\n-  {\"alignment-traps\",           ARM_FLAG_MMU_TRAPS,\t\t\\\n-     \"The MMU will trap on unaligned accesses\" },\t\t\\\n-  {\"no-alignment-traps\",       -ARM_FLAG_MMU_TRAPS, \"\" },\t\\\n-  {\"short-load-bytes\",\t\tARM_FLAG_MMU_TRAPS, \"\" },\t\\\n-  {\"no-short-load-bytes\",      -ARM_FLAG_MMU_TRAPS, \"\" },\t\\\n-  {\"short-load-words\",\t       -ARM_FLAG_MMU_TRAPS, \"\" },\t\\\n-  {\"no-short-load-words\",\tARM_FLAG_MMU_TRAPS, \"\" },\t\\\n-  {\"soft-float\",\t\tARM_FLAG_SOFT_FLOAT,\t\t\\\n-     \"Use library calls to perform FP operations\" },\t\t\\\n-  {\"hard-float\",\t       -ARM_FLAG_SOFT_FLOAT,\t\t\\\n-     \"Use hardware floating point instructions\" },\t\t\\\n-  {\"big-endian\",\t\tARM_FLAG_BIG_END,\t\t\\\n-     \"Assume target CPU is configured as big endian\" },\t\t\\\n-  {\"little-endian\",\t       -ARM_FLAG_BIG_END,\t\t\\\n-     \"Assume target CPU is configured as little endian\" },\t\\\n-  {\"words-little-endian\",       ARM_FLAG_LITTLE_WORDS,\t\t\\\n-     \"Assume big endian bytes, little endian words\" },\t\t\\\n-  {\"thumb-interwork\",\t\tARM_FLAG_INTERWORK,\t\t\\\n-     \"Support calls between THUMB and ARM instructions sets\" },\t\\\n-  {\"no-thumb-interwork\",       -ARM_FLAG_INTERWORK, \"\" },\t\\\n-  {\"abort-on-noreturn\",         ARM_FLAG_ABORT_NORETURN,\t\\\n-     \"Generate a call to abort if a noreturn function returns\"},\\\n-  {\"no-abort-on-noreturn\",     -ARM_FLAG_ABORT_NORETURN, \"\" },\t\\\n-  {\"sched-prolog\",             -ARM_FLAG_NO_SCHED_PRO,\t\t\\\n-     \"Do not move instructions into a function's prologue\" },\t\\\n-  {\"no-sched-prolog\",           ARM_FLAG_NO_SCHED_PRO, \"\" },\t\\\n-  {\"single-pic-base\",\t\tARM_FLAG_SINGLE_PIC_BASE,\t\\\n-     \"Do not load the PIC register in function prologues\" },\t\\\n-  {\"no-single-pic-base\",       -ARM_FLAG_SINGLE_PIC_BASE, \"\" },\t\\\n-  {\"long-calls\",\t\tARM_FLAG_LONG_CALLS,\t\t\\\n-     \"Generate call insns as indirect calls, if necessary\" },\t\\\n-  {\"no-long-calls\",\t       -ARM_FLAG_LONG_CALLS, \"\" },\t\\\n-  {\"thumb\",                     ARM_FLAG_THUMB,\t\t\t\\\n-     \"Compile for the Thumb not the ARM\" },\t\t\t\\\n-  {\"no-thumb\",                 -ARM_FLAG_THUMB, \"\" },\t\t\\\n-  {\"arm\",                      -ARM_FLAG_THUMB, \"\" },\t\t\\\n-  {\"tpcs-frame\",\t\t    THUMB_FLAG_BACKTRACE,\t\\\n-     \"Thumb: Generate (non-leaf) stack frames even if not needed\" },\t  \\\n-  {\"no-tpcs-frame\",                -THUMB_FLAG_BACKTRACE, \"\" },\t\t  \\\n-  {\"tpcs-leaf-frame\",\t  \t    THUMB_FLAG_LEAF_BACKTRACE,\t\t  \\\n-     \"Thumb: Generate (leaf) stack frames even if not needed\" },\t  \\\n-  {\"no-tpcs-leaf-frame\",           -THUMB_FLAG_LEAF_BACKTRACE, \"\" },\t  \\\n-  {\"callee-super-interworking\",\t    THUMB_FLAG_CALLEE_SUPER_INTERWORKING, \\\n-     \"Thumb: Assume non-static functions may be called from ARM code\" },  \\\n-  {\"no-callee-super-interworking\", -THUMB_FLAG_CALLEE_SUPER_INTERWORKING, \\\n-     \"\" },\t\t\t\t\t\t\t\t  \\\n-  {\"caller-super-interworking\",\t    THUMB_FLAG_CALLER_SUPER_INTERWORKING, \\\n-     \"Thumb: Assume function pointers may go to non-Thumb aware code\" },  \\\n-  {\"no-caller-super-interworking\", -THUMB_FLAG_CALLER_SUPER_INTERWORKING, \\\n-     \"\" },\t\t\t\t\t\t\t\t  \\\n-  SUBTARGET_SWITCHES\t\t\t\t\t\t\t  \\\n-  {\"\",\t\t\t\tTARGET_DEFAULT, \"\" }\t\t\t  \\\n+#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  {\"apcs\",\t\t\tARM_FLAG_APCS_FRAME, \"\" },\t\t\\\n+  {\"apcs-frame\",\t\tARM_FLAG_APCS_FRAME,\t\t\t\\\n+   N_(\"Generate APCS conformant stack frames\") },\t\t\t\\\n+  {\"no-apcs-frame\",\t       -ARM_FLAG_APCS_FRAME, \"\" },\t\t\\\n+  {\"poke-function-name\",\tARM_FLAG_POKE,\t\t\t\t\\\n+   N_(\"Store function names in object code\") },\t\t\t\t\\\n+  {\"no-poke-function-name\",    -ARM_FLAG_POKE, \"\" },\t\t\t\\\n+  {\"fpe\",\t\t\tARM_FLAG_FPE,  \"\" },\t\t\t\\\n+  {\"apcs-32\",\t\t\tARM_FLAG_APCS_32,\t\t\t\\\n+   N_(\"Use the 32bit version of the APCS\") },\t\t\t\t\\\n+  {\"apcs-26\",\t\t       -ARM_FLAG_APCS_32,\t\t\t\\\n+   N_(\"Use the 26bit version of the APCS\") },\t\t\t\t\\\n+  {\"apcs-stack-check\",\t\tARM_FLAG_APCS_STACK, \"\" },\t\t\\\n+  {\"no-apcs-stack-check\",      -ARM_FLAG_APCS_STACK, \"\" },\t\t\\\n+  {\"apcs-float\",\t\tARM_FLAG_APCS_FLOAT,\t\t\t\\\n+   N_(\"Pass FP arguments in FP registers\") },\t\t\t\t\\\n+  {\"no-apcs-float\",\t       -ARM_FLAG_APCS_FLOAT, \"\" },\t\t\\\n+  {\"apcs-reentrant\",\t\tARM_FLAG_APCS_REENT,\t\t\t\\\n+   N_(\"Generate re-entrant, PIC code\") },\t\t\t\t\\\n+  {\"no-apcs-reentrant\",\t       -ARM_FLAG_APCS_REENT, \"\" },\t\t\\\n+  {\"alignment-traps\",           ARM_FLAG_MMU_TRAPS,\t\t\t\\\n+   N_(\"The MMU will trap on unaligned accesses\") },\t\t\t\\\n+  {\"no-alignment-traps\",       -ARM_FLAG_MMU_TRAPS, \"\" },\t\t\\\n+  {\"short-load-bytes\",\t\tARM_FLAG_MMU_TRAPS, \"\" },\t\t\\\n+  {\"no-short-load-bytes\",      -ARM_FLAG_MMU_TRAPS, \"\" },\t\t\\\n+  {\"short-load-words\",\t       -ARM_FLAG_MMU_TRAPS, \"\" },\t\t\\\n+  {\"no-short-load-words\",\tARM_FLAG_MMU_TRAPS, \"\" },\t\t\\\n+  {\"soft-float\",\t\tARM_FLAG_SOFT_FLOAT,\t\t\t\\\n+   N_(\"Use library calls to perform FP operations\") },\t\t\t\\\n+  {\"hard-float\",\t       -ARM_FLAG_SOFT_FLOAT,\t\t\t\\\n+   N_(\"Use hardware floating point instructions\") },\t\t\t\\\n+  {\"big-endian\",\t\tARM_FLAG_BIG_END,\t\t\t\\\n+   N_(\"Assume target CPU is configured as big endian\") },\t\t\\\n+  {\"little-endian\",\t       -ARM_FLAG_BIG_END,\t\t\t\\\n+   N_(\"Assume target CPU is configured as little endian\") },\t\t\\\n+  {\"words-little-endian\",       ARM_FLAG_LITTLE_WORDS,\t\t\t\\\n+   N_(\"Assume big endian bytes, little endian words\") },\t\t\\\n+  {\"thumb-interwork\",\t\tARM_FLAG_INTERWORK,\t\t\t\\\n+   N_(\"Support calls between THUMB and ARM instructions sets\") },\t\\\n+  {\"no-thumb-interwork\",       -ARM_FLAG_INTERWORK, \"\" },\t\t\\\n+  {\"abort-on-noreturn\",         ARM_FLAG_ABORT_NORETURN,\t\t\\\n+   N_(\"Generate a call to abort if a noreturn function returns\")},\t\\\n+  {\"no-abort-on-noreturn\",     -ARM_FLAG_ABORT_NORETURN, \"\" },\t\t\\\n+  {\"sched-prolog\",             -ARM_FLAG_NO_SCHED_PRO,\t\t\t\\\n+   N_(\"Do not move instructions into a function's prologue\") },\t\t\\\n+  {\"no-sched-prolog\",           ARM_FLAG_NO_SCHED_PRO, \"\" },\t\t\\\n+  {\"single-pic-base\",\t\tARM_FLAG_SINGLE_PIC_BASE,\t\t\\\n+   N_(\"Do not load the PIC register in function prologues\") },\t\t\\\n+  {\"no-single-pic-base\",       -ARM_FLAG_SINGLE_PIC_BASE, \"\" },\t\t\\\n+  {\"long-calls\",\t\tARM_FLAG_LONG_CALLS,\t\t\t\\\n+   N_(\"Generate call insns as indirect calls, if necessary\") },\t\t\\\n+  {\"no-long-calls\",\t       -ARM_FLAG_LONG_CALLS, \"\" },\t\t\\\n+  {\"thumb\",                     ARM_FLAG_THUMB,\t\t\t\t\\\n+   N_(\"Compile for the Thumb not the ARM\") },\t\t\t\t\\\n+  {\"no-thumb\",                 -ARM_FLAG_THUMB, \"\" },\t\t\t\\\n+  {\"arm\",                      -ARM_FLAG_THUMB, \"\" },\t\t\t\\\n+  {\"tpcs-frame\",\t\t    THUMB_FLAG_BACKTRACE,\t\t\\\n+   N_(\"Thumb: Generate (non-leaf) stack frames even if not needed\") },\t   \\\n+  {\"no-tpcs-frame\",                -THUMB_FLAG_BACKTRACE, \"\" },\t\t   \\\n+  {\"tpcs-leaf-frame\",\t  \t    THUMB_FLAG_LEAF_BACKTRACE,\t\t   \\\n+   N_(\"Thumb: Generate (leaf) stack frames even if not needed\") },\t   \\\n+  {\"no-tpcs-leaf-frame\",           -THUMB_FLAG_LEAF_BACKTRACE, \"\" },\t   \\\n+  {\"callee-super-interworking\",\t    THUMB_FLAG_CALLEE_SUPER_INTERWORKING,  \\\n+   N_(\"Thumb: Assume non-static functions may be called from ARM code\") }, \\\n+  {\"no-callee-super-interworking\", -THUMB_FLAG_CALLEE_SUPER_INTERWORKING,  \\\n+     \"\" },\t\t\t\t\t\t\t\t   \\\n+  {\"caller-super-interworking\",\t    THUMB_FLAG_CALLER_SUPER_INTERWORKING,  \\\n+   N_(\"Thumb: Assume function pointers may go to non-Thumb aware code\") }, \\\n+  {\"no-caller-super-interworking\", -THUMB_FLAG_CALLER_SUPER_INTERWORKING,  \\\n+   \"\" },\t\t\t\t\t\t\t\t   \\\n+  SUBTARGET_SWITCHES\t\t\t\t\t\t\t   \\\n+  {\"\",\t\t\t\tTARGET_DEFAULT, \"\" }\t\t\t   \\\n }\n \n #define TARGET_OPTIONS\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   {\"cpu=\",  & arm_select[0].string,\t\t\t\t\\\n-     \"Specify the name of the target CPU\" },\t\t\t\\\n+   N_(\"Specify the name of the target CPU\") },\t\t\t\\\n   {\"arch=\", & arm_select[1].string,\t\t\t\t\\\n-     \"Specify the name of the target architecture\" }, \t\t\\\n+   N_(\"Specify the name of the target architecture\") }, \t\\\n   {\"tune=\", & arm_select[2].string, \"\" }, \t\t\t\\\n   {\"fpe=\",  & target_fp_name, \"\" }, \t\t\t\t\\\n   {\"fp=\",   & target_fp_name,\t\t\t\t\t\\\n-     \"Specify the version of the floating point emulator\" },\t\\\n-  { \"structure-size-boundary=\", & structure_size_string, \t\\\n-     \"Specify the minimum bit alignment of structures\" }, \t\\\n-  { \"pic-register=\", & arm_pic_register_string,\t\t\t\\\n-     \"Specify the register to be used for PIC addressing\" }\t\\\n+   N_(\"Specify the version of the floating point emulator\") },\t\\\n+  {\"structure-size-boundary=\", & structure_size_string, \t\\\n+   N_(\"Specify the minimum bit alignment of structures\") }, \t\\\n+  {\"pic-register=\", & arm_pic_register_string,\t\t\t\\\n+   N_(\"Specify the register to be used for PIC addressing\") }\t\\\n }\n \n struct arm_cpu_select"}, {"sha": "8acd3e0783f3aab4c839f2b10b0468325db825bf", "filename": "gcc/config/arm/pe.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Farm%2Fpe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Farm%2Fpe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -57,8 +57,9 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_NOP_FUN_DLLIMPORT (target_flags & TARGET_FLAG_NOP_FUN)\n \n #undef  SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-{ \"nop-fun-dllimport\",\t\t  TARGET_FLAG_NOP_FUN, \"Ignore dllimport attribute for functions\" }, \\\n+#define SUBTARGET_SWITCHES\t\t\t\t\t\\\n+{ \"nop-fun-dllimport\",\t\t  TARGET_FLAG_NOP_FUN,\t\t\\\n+  N_(\"Ignore dllimport attribute for functions\") },\t\t\\\n { \"no-nop-fun-dllimport\",\t- TARGET_FLAG_NOP_FUN, \"\" },\n \n #undef  TARGET_DEFAULT"}, {"sha": "8d31b1ca64b2a34bd0146b33972bf883915b5185", "filename": "gcc/config/arm/riscix.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Farm%2Friscix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Farm%2Friscix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Friscix.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -1,5 +1,6 @@\n /* Definitions of target machine for GNU compiler.  ARM RISCiX version.\n-   Copyright (C) 1993, 1994, 1995, 1997, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1994, 1995, 1997, 1999, 2000\n+   Free Software Foundation, Inc.\n    Contributed by Richard Earnshaw (rwe11@cl.cam.ac.uk), based on original\n \t      work by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n    \t      and Martin Simmons (@harleqn.co.uk).\n@@ -80,9 +81,9 @@ Boston, MA 02111-1307, USA.  */\n    switches cc1 complains about them.  For the sake of argument lets allocate\n    bit 31 of target flags for such options.  */\n #define SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n-  {\"bsd\",\t   0x80000000, \"Do symbol renaming for BSD\"},\t\t\\\n-  {\"xopen\",\t   0x80000000, \"Do symbol renaming for X/OPEN\"},\t\\\n-  {\"no-symrename\", 0x80000000, \"Don't do symbol renaming\"},\n+  {\"bsd\",\t   0x80000000, N_(\"Do symbol renaming for BSD\")},\t\\\n+  {\"xopen\",\t   0x80000000, N_(\"Do symbol renaming for X/OPEN\")},\t\\\n+  {\"no-symrename\", 0x80000000, N_(\"Don't do symbol renaming\")},\n     \n \n /* Run-time Target Specification.  */"}, {"sha": "06f2873cc409fac250ae9f73258772575e4d4938", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 98, "deletions": 98, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -136,99 +136,99 @@\n    where VALUE is the bits to set or minus the bits to clear.\n    An empty string NAME is used to identify the default VALUE.  */\n \n-#define TARGET_SWITCHES \\\n-{ { \"small\", SMALL_MEMORY_FLAG, \\\n-    \"Small memory model\" }, \\\n-  { \"big\", -SMALL_MEMORY_FLAG, \\\n-    \"Big memory model\" }, \\\n-  { \"mpyi\", MPYI_FLAG, \\\n-    \"Use MPYI instruction for C3x\" }, \\\n-  { \"no-mpyi\", -MPYI_FLAG, \\\n-    \"Do not use MPYI instruction for C3x\" }, \\\n-  { \"fast-fix\", FAST_FIX_FLAG, \\\n-    \"Use fast but approximate float to integer conversion\" }, \\\n-  { \"no-fast-fix\", -FAST_FIX_FLAG, \\\n-    \"Use slow but accurate float to integer conversion\" }, \\\n-  { \"rpts\", RPTS_FLAG, \\\n-    \"Enable use of RTPS instruction\" }, \\\n-  { \"no-rpts\", -RPTS_FLAG, \\\n-    \"Disable use of RTPS instruction\" }, \\\n-  { \"rptb\", RPTB_FLAG, \\\n-    \"Enable use of RTPB instruction\" }, \\\n-  { \"no-rptb\", -RPTB_FLAG, \\\n-    \"Disable use of RTPB instruction\" }, \\\n-  { \"30\", C30_FLAG, \\\n-    \"Generate code for C30 CPU\"}, \\\n-  { \"31\", C31_FLAG, \\\n-    \"Generate code for C31 CPU\"}, \\\n-  { \"32\", C32_FLAG, \\\n-    \"Generate code for C32 CPU\"}, \\\n-  { \"33\", C33_FLAG, \\\n-    \"Generate code for C33 CPU\"}, \\\n-  { \"40\", C40_FLAG, \\\n-    \"Generate code for C40 CPU\"}, \\\n-  { \"44\", C44_FLAG, \\\n-    \"Generate code for C44 CPU\"}, \\\n-  { \"ti\", TI_FLAG, \\\n-    \"Emit code compatible with TI tools\"}, \\\n-  { \"no-ti\", -TI_FLAG, \\\n-    \"Emit code to use GAS extensions\"}, \\\n-  { \"paranoid\", PARANOID_FLAG, \\\n-    \"Save DP across ISR in small memory model\" }, \\\n-  { \"no-paranoid\", -PARANOID_FLAG, \\\n-    \"Don't save DP across ISR in small memory model\" }, \\\n-  { \"isr-dp-reload\", PARANOID_FLAG, \\\n-    \"Save DP across ISR in small memory model\" }, \\\n-  { \"no-isr-dp-reload\", -PARANOID_FLAG, \\\n-    \"Don't save DP across ISR in small memory model\" }, \\\n-  { \"memparm\", MEMPARM_FLAG, \\\n-    \"Pass arguments on the stack\" }, \\\n-  { \"regparm\", -MEMPARM_FLAG,  \\\n-    \"Pass arguments in registers\" }, \\\n-  { \"devel\", DEVEL_FLAG, \\\n-    \"Enable new features under development\" }, \\\n-  { \"no-devel\", -DEVEL_FLAG, \\\n-    \"Disable new features under development\" }, \\\n-  { \"bk\", BK_FLAG, \\\n-    \"Use the BK register as a general purpose register\" }, \\\n-  { \"no-bk\", -BK_FLAG, \\\n-    \"Do not allocate BK register\" }, \\\n-  { \"db\", DB_FLAG, \\\n-    \"Enable use of DB instruction\" }, \\\n-  { \"no-db\", -DB_FLAG, \\\n-    \"Disable use of DB instruction\" }, \\\n-  { \"debug\", DEBUG_FLAG, \\\n-    \"Enable debugging\" }, \\\n-  { \"no-debug\", -DEBUG_FLAG, \\\n-    \"Disable debugging\" }, \\\n-  { \"hoist\", HOIST_FLAG, \\\n-    \"Force constants into registers to improve hoisting\" }, \\\n-  { \"no-hoist\", -HOIST_FLAG, \\\n-    \"Don't force constants into registers\" }, \\\n-  { \"force\", FORCE_FLAG, \\\n-    \"Force RTL generation to emit valid 3 operand insns\" }, \\\n-  { \"no-force\", -FORCE_FLAG, \\\n-    \"Allow RTL generation to emit invalid 3 operand insns\" }, \\\n-  { \"loop-unsigned\", LOOP_UNSIGNED_FLAG, \\\n-    \"Allow unsigned interation counts for RPTB/DB\" }, \\\n-  { \"no-loop-unsigned\", -LOOP_UNSIGNED_FLAG, \\\n-    \"Disallow unsigned iteration counts for RPTB/DB\" }, \\\n-  { \"preserve-float\", PRESERVE_FLOAT_FLAG, \\\n-    \"Preserve all 40 bits of FP reg across call\" }, \\\n-  { \"no-preserve-float\", -PRESERVE_FLOAT_FLAG, \\\n-    \"Only preserve 32 bits of FP reg across call\" }, \\\n-  { \"parallel-insns\", PARALLEL_INSN_FLAG, \\\n-    \"Enable parallel instructions\" }, \\\n-  { \"no-parallel-insns\", -PARALLEL_INSN_FLAG, \\\n-    \"Disable parallel instructions\" }, \\\n-  { \"parallel-mpy\", PARALLEL_MPY_FLAG, \\\n-    \"Enable MPY||ADD and MPY||SUB instructions\" }, \\\n-  { \"no-parallel-mpy\", -PARALLEL_MPY_FLAG, \\\n-    \"Disable MPY||ADD and MPY||SUB instructions\" }, \\\n-  { \"aliases\", ALIASES_FLAG, \\\n-    \"Assume that pointers may be aliased\" }, \\\n-  { \"no-aliases\", -ALIASES_FLAG, \\\n-    \"Assume that pointers not aliased\" }, \\\n+#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n+{ { \"small\", SMALL_MEMORY_FLAG,\t\t\t\t\t\t\\\n+    N_(\"Small memory model\") },\t\t\t\t\t\t\\\n+  { \"big\", -SMALL_MEMORY_FLAG,\t\t\t\t\t\t\\\n+    N_(\"Big memory model\") },\t\t\t\t\t\t\\\n+  { \"mpyi\", MPYI_FLAG,\t\t\t\t\t\t\t\\\n+    N_(\"Use MPYI instruction for C3x\") },\t\t\t\t\\\n+  { \"no-mpyi\", -MPYI_FLAG,\t\t\t\t\t\t\\\n+    N_(\"Do not use MPYI instruction for C3x\") },\t\t\t\\\n+  { \"fast-fix\", FAST_FIX_FLAG,\t\t\t\t\t\t\\\n+    N_(\"Use fast but approximate float to integer conversion\") },\t\\\n+  { \"no-fast-fix\", -FAST_FIX_FLAG,\t\t\t\t\t\\\n+    N_(\"Use slow but accurate float to integer conversion\") },\t\t\\\n+  { \"rpts\", RPTS_FLAG,\t\t\t\t\t\t\t\\\n+    N_(\"Enable use of RTPS instruction\") },\t\t\t\t\\\n+  { \"no-rpts\", -RPTS_FLAG,\t\t\t\t\t\t\\\n+    N_(\"Disable use of RTPS instruction\") },\t\t\t\t\\\n+  { \"rptb\", RPTB_FLAG,\t\t\t\t\t\t\t\\\n+    N_(\"Enable use of RTPB instruction\") },\t\t\t\t\\\n+  { \"no-rptb\", -RPTB_FLAG,\t\t\t\t\t\t\\\n+    N_(\"Disable use of RTPB instruction\") },\t\t\t\t\\\n+  { \"30\", C30_FLAG,\t\t\t\t\t\t\t\\\n+    N_(\"Generate code for C30 CPU\")},\t\t\t\t\t\\\n+  { \"31\", C31_FLAG,\t\t\t\t\t\t\t\\\n+    N_(\"Generate code for C31 CPU\")},\t\t\t\t\t\\\n+  { \"32\", C32_FLAG,\t\t\t\t\t\t\t\\\n+    N_(\"Generate code for C32 CPU\")},\t\t\t\t\t\\\n+  { \"33\", C33_FLAG,\t\t\t\t\t\t\t\\\n+    N_(\"Generate code for C33 CPU\")},\t\t\t\t\t\\\n+  { \"40\", C40_FLAG,\t\t\t\t\t\t\t\\\n+    N_(\"Generate code for C40 CPU\")},\t\t\t\t\t\\\n+  { \"44\", C44_FLAG,\t\t\t\t\t\t\t\\\n+    N_(\"Generate code for C44 CPU\")},\t\t\t\t\t\\\n+  { \"ti\", TI_FLAG,\t\t\t\t\t\t\t\\\n+    N_(\"Emit code compatible with TI tools\")},\t\t\t\t\\\n+  { \"no-ti\", -TI_FLAG,\t\t\t\t\t\t\t\\\n+    N_(\"Emit code to use GAS extensions\")},\t\t\t\t\\\n+  { \"paranoid\", PARANOID_FLAG,\t\t\t\t\t\t\\\n+    N_(\"Save DP across ISR in small memory model\") },\t\t\t\\\n+  { \"no-paranoid\", -PARANOID_FLAG,\t\t\t\t\t\\\n+    N_(\"Don't save DP across ISR in small memory model\") },\t\t\\\n+  { \"isr-dp-reload\", PARANOID_FLAG,\t\t\t\t\t\\\n+    N_(\"Save DP across ISR in small memory model\") },\t\t\t\\\n+  { \"no-isr-dp-reload\", -PARANOID_FLAG,\t\t\t\t\t\\\n+    N_(\"Don't save DP across ISR in small memory model\") },\t\t\\\n+  { \"memparm\", MEMPARM_FLAG,\t\t\t\t\t\t\\\n+    N_(\"Pass arguments on the stack\") },\t\t\t\t\\\n+  { \"regparm\", -MEMPARM_FLAG,\t\t\t\t\t\t\\\n+    N_(\"Pass arguments in registers\") },\t\t\t\t\\\n+  { \"devel\", DEVEL_FLAG,\t\t\t\t\t\t\\\n+    N_(\"Enable new features under development\") },\t\t\t\\\n+  { \"no-devel\", -DEVEL_FLAG,\t\t\t\t\t\t\\\n+    N_(\"Disable new features under development\") },\t\t\t\\\n+  { \"bk\", BK_FLAG,\t\t\t\t\t\t\t\\\n+    N_(\"Use the BK register as a general purpose register\") },\t\t\\\n+  { \"no-bk\", -BK_FLAG,\t\t\t\t\t\t\t\\\n+    N_(\"Do not allocate BK register\") },\t\t\t\t\\\n+  { \"db\", DB_FLAG,\t\t\t\t\t\t\t\\\n+    N_(\"Enable use of DB instruction\") },\t\t\t\t\\\n+  { \"no-db\", -DB_FLAG,\t\t\t\t\t\t\t\\\n+    N_(\"Disable use of DB instruction\") },\t\t\t\t\\\n+  { \"debug\", DEBUG_FLAG,\t\t\t\t\t\t\\\n+    N_(\"Enable debugging\") },\t\t\t\t\t\t\\\n+  { \"no-debug\", -DEBUG_FLAG,\t\t\t\t\t\t\\\n+    N_(\"Disable debugging\") },\t\t\t\t\t\t\\\n+  { \"hoist\", HOIST_FLAG,\t\t\t\t\t\t\\\n+    N_(\"Force constants into registers to improve hoisting\") },\t\t\\\n+  { \"no-hoist\", -HOIST_FLAG,\t\t\t\t\t\t\\\n+    N_(\"Don't force constants into registers\") },\t\t\t\\\n+  { \"force\", FORCE_FLAG,\t\t\t\t\t\t\\\n+    N_(\"Force RTL generation to emit valid 3 operand insns\") },\t\t\\\n+  { \"no-force\", -FORCE_FLAG,\t\t\t\t\t\t\\\n+    N_(\"Allow RTL generation to emit invalid 3 operand insns\") },\t\\\n+  { \"loop-unsigned\", LOOP_UNSIGNED_FLAG,\t\t\t\t\\\n+    N_(\"Allow unsigned interation counts for RPTB/DB\") },\t\t\\\n+  { \"no-loop-unsigned\", -LOOP_UNSIGNED_FLAG,\t\t\t\t\\\n+    N_(\"Disallow unsigned iteration counts for RPTB/DB\") },\t\t\\\n+  { \"preserve-float\", PRESERVE_FLOAT_FLAG,\t\t\t\t\\\n+    N_(\"Preserve all 40 bits of FP reg across call\") },\t\t\t\\\n+  { \"no-preserve-float\", -PRESERVE_FLOAT_FLAG,\t\t\t\t\\\n+    N_(\"Only preserve 32 bits of FP reg across call\") },\t\t\\\n+  { \"parallel-insns\", PARALLEL_INSN_FLAG,\t\t\t\t\\\n+    N_(\"Enable parallel instructions\") },\t\t\t\t\\\n+  { \"no-parallel-insns\", -PARALLEL_INSN_FLAG,\t\t\t\t\\\n+    N_(\"Disable parallel instructions\") },\t\t\t\t\\\n+  { \"parallel-mpy\", PARALLEL_MPY_FLAG,\t\t\t\t\t\\\n+    N_(\"Enable MPY||ADD and MPY||SUB instructions\") },\t\t\t\\\n+  { \"no-parallel-mpy\", -PARALLEL_MPY_FLAG,\t\t\t\t\\\n+    N_(\"Disable MPY||ADD and MPY||SUB instructions\") },\t\t\t\\\n+  { \"aliases\", ALIASES_FLAG,\t\t\t\t\t\t\\\n+    N_(\"Assume that pointers may be aliased\") },\t\t\t\\\n+  { \"no-aliases\", -ALIASES_FLAG,\t\t\t\t\t\\\n+    N_(\"Assume that pointers not aliased\") },\t\t\t\t\\\n   { \"\", TARGET_DEFAULT, \"\"} }\n \n /* Default target switches.  */\n@@ -312,11 +312,11 @@ extern int target_flags;\n \n extern const char *c4x_rpts_cycles_string, *c4x_cpu_version_string;\n \n-#define TARGET_OPTIONS\t\t\\\n-{ {\"rpts=\", &c4x_rpts_cycles_string, \\\n-   \"Specify maximum number of iterations for RPTS\" }, \\\n-  {\"cpu=\", &c4x_cpu_version_string, \\\n-   \"Select CPU to generate code for\" } }\n+#define TARGET_OPTIONS\t\t\t\t\t\t\\\n+{ {\"rpts=\", &c4x_rpts_cycles_string,\t\t\t\t\\\n+   N_(\"Specify maximum number of iterations for RPTS\") },\t\\\n+  {\"cpu=\", &c4x_cpu_version_string,\t\t\t\t\\\n+   N_(\"Select CPU to generate code for\") } }\n \n /* Sometimes certain combinations of command options do not make sense\n    on a particular target machine.  You can define a macro"}, {"sha": "a4fb1f1a09f365317ab55d49892e4d25323a1f82", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -36,9 +36,9 @@ extern int target_flags;\n    where VALUE is the bits to set or minus the bits to clear.\n    An empty string NAME is used to identify the default VALUE.  */\n \n-#define TARGET_SWITCHES\t\t\\\n-  { { \"c400\", 1, \"Generate code for the C400\" },\t\t\\\n-    { \"c300\", -1, \"Generate code for the C300\" },\t\t\\\n+#define TARGET_SWITCHES\t\t\t\t\t\t\\\n+  { { \"c400\", 1, N_(\"Generate code for the C400\") },\t\t\\\n+    { \"c300\", -1, N_(\"Generate code for the C300\") },\t\t\\\n     { \"\", TARGET_DEFAULT, NULL} }\n \n #define TARGET_C400 1"}, {"sha": "2f216f31171919f736d5c9f857f9cf5990c6a301", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -48,20 +48,26 @@ extern int target_flags;\n #define TARGET_DEFAULT 0\n #endif\n \n-#define TARGET_SWITCHES \\\n-  { { \"c1\", 001 }, \t\\\n-    { \"c2\", 002 },\t\\\n-    { \"c32\", 004 },\t\\\n-    { \"c34\", 010 },\t\\\n-    { \"c38\", 020 },\t\\\n-    { \"argcount\", 0100 }, \\\n-    { \"argcount-nop\", 0200 }, \\\n-    { \"no-argcount\", -0300 }, \\\n-    { \"volatile-cache\", -0400 }, \\\n-    { \"no-volatile-cache\", 0400 }, \\\n-    { \"volatile-nocache\", 0400 }, \\\n-    { \"long64\", 01000 }, \\\n-    { \"long32\", -01000 }, \\\n+#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n+  { { \"c1\", 001, N_(\"Generate code for c1\") },\t\t\t\t\\\n+    { \"c2\", 002, N_(\"Generate code for c2\") },\t\t\t\t\\\n+    { \"c32\", 004, N_(\"Generate code for c32\") },\t\t\t\\\n+    { \"c34\", 010, N_(\"Generate code for c34\") },\t\t\t\\\n+    { \"c38\", 020, N_(\"Generate code for c34\") },\t\t\t\\\n+    { \"argcount\", 0100,\t\t\t\t\t\t\t\\\n+      N_(\"Use standard calling sequence, with arg count word\")},\t\\\n+    { \"argcount-nop\", 0200,\t\t\t\t\t\t\\\n+      N_(\"Place arg count in a nop instruction (faster than push)\") },\t\\\n+    { \"no-argcount\", -0300,\t\t\t\t\t\t\\\n+      N_(\"Don't push arg count, depend on symbol table\") },\t\t\\\n+    { \"volatile-cache\", -0400,\t\t\t\t\t\t\\\n+      N_(\"Use data cache for volatile mem refs (default)\") },\t\t\\\n+    { \"no-volatile-cache\", 0400,\t\t\t\t\t\\\n+      N_(\"Don't use data cache for volatile mem refs\") },\t\t\\\n+    { \"volatile-nocache\", 0400,\t\t\t\t\t\t\\\n+      N_(\"Bypass data cache for volatile mem refs\") },\t\t\t\\\n+    { \"long64\", 01000, N_(\"Use 64-bit longs\") },\t\t\t\\\n+    { \"long32\", -01000, N_(\"Use cc- and libc-compatible 32-bit longs\")},\\\n     { \"\", TARGET_DEFAULT | TARGET_CPU_DEFAULT}}\n \n /* Macros used in the machine description to test the flags.  */"}, {"sha": "1fc38b8a61e1bba3b39aca7b4d0f413c9ba076d4", "filename": "gcc/config/elxsi/elxsi.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Felxsi%2Felxsi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Felxsi%2Felxsi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -47,8 +47,8 @@ extern int target_flags;\n    An empty string NAME is used to identify the default VALUE.  */\n \n #define TARGET_SWITCHES  \\\n-  { {\"unix\", 1, \"Generate code the unix assembler can handle\"},  \\\n-    {\"embos\", -1, \"Generate code an embedded assembler can handle\"},  \\\n+  { {\"unix\", 1, N_(\"Generate code the unix assembler can handle\")},\t\\\n+    {\"embos\", -1, N_(\"Generate code an embedded assembler can handle\")},\\\n     { \"\", TARGET_DEFAULT, NULL}}\n \n /* Default target_flags if no switches specified.  */"}, {"sha": "7a49a287089530e3927660ef3aacc7f7dfa73e8b", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -79,12 +79,13 @@ Boston, MA 02111-1307, USA.  */\n /* This declaration should be present.  */\n extern int target_flags;\n \n-#define TARGET_SWITCHES \\\n-{\t\\\n-  { \"small-model\",      TARGET_SMALL_MODEL_MASK, \"Assume small address space\" }, \\\n-  { \"no-small-model\", - TARGET_SMALL_MODEL_MASK, \"\" },\t\t\t \t \\\n-  { \"no-lsim\",          0, \"\" },\t\t\t\t\t \t \\\n-  { \"\",                 TARGET_DEFAULT, \"\" }\t\t\t\t\t \\\n+#define TARGET_SWITCHES\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  { \"small-model\",      TARGET_SMALL_MODEL_MASK,\t\t\\\n+    N_(\"Assume small address space\") },\t\t\t\t\\\n+  { \"no-small-model\", - TARGET_SMALL_MODEL_MASK, \"\" },\t\t\\\n+  { \"no-lsim\",          0, \"\" },\t\t\t\t\\\n+  { \"\",                 TARGET_DEFAULT, \"\" }\t\t\t\\\n }\n \n #define TARGET_VERSION fprintf (stderr, \" (fr30)\");"}, {"sha": "a0fe0541bd6c45f64c63103edd92a275e4dd2526", "filename": "gcc/config/fx80/fx80.h", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Ffx80%2Ffx80.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Ffx80%2Ffx80.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffx80%2Ffx80.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -1,5 +1,6 @@\n /* Definitions of target machine for GNU compiler.  Alliant FX version.\n-   Copyright (C) 1989, 93, 94, 95, 96, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1993, 1994, 1995, 1996, 1998, 1999, 2000\n+   Free Software Foundation, Inc.\n    Adapted from m68k.h by Paul Petersen (petersen@uicsrd.csrd.uiuc.edu)\n    and Joe Weening (weening@gang-of-four.stanford.edu).\n \n@@ -109,15 +110,15 @@ extern int target_flags;\n    An empty string NAME is used to identify the default VALUE.  */\n \n #define TARGET_SWITCHES  \\\n-  { { \"68020\", 5, \"Generate code for a mc68020\"},\t\t\\\n-    { \"c68020\", 5, \"Generate code for a mc68020\"},\t\t\\\n-    { \"bitfield\", 4, \"Use bitfield instructions\"},\t\t\\\n-    { \"68000\", -7, \"Generate code for a mc68000\"},\t\t\\\n-    { \"c68000\", -7, \"Generate code for a mc68000\"},\t\t\\\n-    { \"soft-float\", -2, \"Generate software FP code\"},\t\t\\\n-    { \"nobitfield\", -4, \"Do not generate bitfield insns\"},\t\\\n-    { \"short\", 040, \"Use 16bit integers\"},\t\t\t\\\n-    { \"noshort\", -040, \"Use 32bit integers\"},\t\t\t\\\n+  { { \"68020\", 5, N_(\"Generate code for a mc68020\")},\t\t\\\n+    { \"c68020\", 5, N_(\"Generate code for a mc68020\")},\t\t\\\n+    { \"bitfield\", 4, N_(\"Use bitfield instructions\")},\t\t\\\n+    { \"68000\", -7, N_(\"Generate code for a mc68000\")},\t\t\\\n+    { \"c68000\", -7, N_(\"Generate code for a mc68000\")},\t\t\\\n+    { \"soft-float\", -2, N_(\"Generate software FP code\")},\t\\\n+    { \"nobitfield\", -4, N_(\"Do not generate bitfield insns\")},\t\\\n+    { \"short\", 040, N_(\"Use 16bit integers\")},\t\t\t\\\n+    { \"noshort\", -040, N_(\"Use 32bit integers\")},\t\t\\\n     { \"\", TARGET_DEFAULT, NULL}}\n \f\n /* target machine storage layout */"}, {"sha": "54edea871d6930dcc8e3c4b3a3d312a26fc2f5a7", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -99,18 +99,21 @@ extern int target_flags;\n    An empty string NAME is used to identify the default VALUE.  */\n \n #define TARGET_SWITCHES  \\\n-  { {\"s\",\t\t1,     \"Generate H8/S code\"},\t\t\t\\\n-    {\"no-s\",\t\t-1,    \"Do not generate H8/S code\"},\t\t\\\n-    {\"int32\",\t\t8,     \"Make integers 32 bits wide\"},\t\t\\\n+  { {\"s\",\t\t1,     N_(\"Generate H8/S code\")},\t\t\\\n+    {\"no-s\",\t\t-1,    N_(\"Do not generate H8/S code\")},\t\\\n+    {\"int32\",\t\t8,     N_(\"Make integers 32 bits wide\")},\t\\\n     {\"addresses\",\t64,    NULL},\t\t\t\t\t\\\n-    {\"quickcall\",\t128,   \"Use registers for argument passing\"},  \t\\\n-    {\"no-quickcall\",\t-128,  \"Do not use registers for argument passing\"},\\\n-    {\"slowbyte\",\t256,   \"Consider access to byte sized memory slow\"},\\\n-    {\"relax\",\t\t1024,  \"Enable linker relaxing\"},\t\t\\\n+    {\"quickcall\",\t128,\t\t\t\t\t\t\\\n+     N_(\"Use registers for argument passing\")},  \t\t\t\\\n+    {\"no-quickcall\",\t-128,\t\t\t\t\t\t\\\n+     N_(\"Do not use registers for argument passing\")},\t\t\t\\\n+    {\"slowbyte\",\t256,\t\t\t\t\t\t\\\n+     N_(\"Consider access to byte sized memory slow\")},\t\t\t\\\n+    {\"relax\",\t\t1024,  N_(\"Enable linker relaxing\")},\t\t\\\n     {\"rtl-dump\",\t2048,  NULL},\t\t\t\t\t\\\n-    {\"h\",\t\t4096,  \"Generate H8/300H code\"},\t\t\\\n-    {\"no-h\",\t\t-4096, \"Do not generate H8/300H code\"},\t\t\\\n-    {\"align-300\",\t8192,  \"Use H8/300 alignment rules\"},\t\t\\\n+    {\"h\",\t\t4096,  N_(\"Generate H8/300H code\")},\t\t\\\n+    {\"no-h\",\t\t-4096, N_(\"Do not generate H8/300H code\")},\t\\\n+    {\"align-300\",\t8192,  N_(\"Use H8/300 alignment rules\")},\t\\\n     { \"\", TARGET_DEFAULT, NULL}}\n \n #ifdef IN_LIBGCC2"}, {"sha": "eccbcb6e56b591f58cc40630fe5ce1f4e6e6e97c", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -60,8 +60,8 @@ extern int mvs_function_name_length;\n    An empty string NAME is used to identify the default VALUE.  */\n \n #define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n-{ { \"char-instructions\", 1, \"Generate char instructions\"},            \\\n-  { \"no-char-instructions\", -1, \"Do not generate char instructions\"}, \\\n+{ { \"char-instructions\", 1, N_(\"Generate char instructions\")},            \\\n+  { \"no-char-instructions\", -1, N_(\"Do not generate char instructions\")}, \\\n   { \"\", TARGET_DEFAULT, 0} }\n \n /* To use IBM supplied macro function prologue and epilogue, define the"}, {"sha": "6e538d5f4010d6db72457d7fa885d07ebcbc3a58", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -46,14 +46,18 @@ Boston, MA 02111-1307, USA. */\n \n #undef  SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES \\\n-{ \"cygwin\",\t\t  MASK_CYGWIN, \"Use the Cygwin interface\" },  \\\n-{ \"no-cygwin\",\t\t  MASK_WIN32, \"Use the Mingw32 interface\" }, \\\n-{ \"windows\",\t\t  MASK_WINDOWS, \"Create GUI application\" }, \\\n-{ \"console\",\t\t  -MASK_WINDOWS, \"Create console application\" }, \\\n-{ \"dll\",\t\t  MASK_DLL, \"Generate code for a DLL\" },     \\\n-{ \"nop-fun-dllimport\",\t  MASK_NOP_FUN_DLLIMPORT, \"Ignore dllimport for functions\" }, \\\n+{ \"cygwin\",\t\t  MASK_CYGWIN,\t\t\t\t\t\\\n+  N_(\"Use the Cygwin interface\") },\t\t\t\t\t\\\n+{ \"no-cygwin\",\t\t  MASK_WIN32,\t\t\t\t\t\\\n+  N_(\"Use the Mingw32 interface\") },\t\t\t\t\t\\\n+{ \"windows\",\t\t  MASK_WINDOWS, N_(\"Create GUI application\") },\t\\\n+{ \"console\",\t\t  -MASK_WINDOWS,\t\t\t\t\\\n+  N_(\"Create console application\") }, \t\t\t\t\t\\\n+{ \"dll\",\t\t  MASK_DLL, N_(\"Generate code for a DLL\") },\t\\\n+{ \"nop-fun-dllimport\",\t  MASK_NOP_FUN_DLLIMPORT,\t\t\t\\\n+  N_(\"Ignore dllimport for functions\") }, \t\t\t\t\\\n { \"no-nop-fun-dllimport\", -MASK_NOP_FUN_DLLIMPORT, \"\" }, \\\n-{ \"threads\",\t\t  0, \"Use Mingw-specific thread support\" },\n+{ \"threads\",\t\t  0, N_(\"Use Mingw-specific thread support\") },\n \n \n /* Support the __declspec keyword by turning them into attributes."}, {"sha": "5b0ca5f0995ca5dcffb1247065888c5caec540c4", "filename": "gcc/config/i386/dgux.h", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi386%2Fdgux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi386%2Fdgux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdgux.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -1,5 +1,6 @@\n /* Target definitions for GNU compiler for Intel 80x86 running DG/ux\n-   Copyright (C) 1993, 1995, 1996, 1997, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1996, 1997, 1998, 2000\n+   Free Software Foundation, Inc.\n    Currently maintained by gcc@dg-rtp.dg.com.\n \n This file is part of GNU CC.\n@@ -26,7 +27,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"i386/sysv4.h\"\n \n #ifndef VERSION_INFO2\n-#define VERSION_INFO2   \"$Revision: 1.8 $\"\n+#define VERSION_INFO2   \"$Revision: 1.9 $\"\n #endif\n \n #ifndef VERSION_STRING\n@@ -57,12 +58,17 @@ Boston, MA 02111-1307, USA.  */\n \n #undef  SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES \\\n-    { \"standard\",\t\t\t MASK_STANDARD, \"Retain standard MXDB information\" },          \\\n-    { \"legend\",\t\t\t\t-MASK_NOLEGEND, \"Retain legend information\" },          \\\n-    { \"no-legend\",\t\t\t MASK_NOLEGEND, \"\" },          \\\n-    { \"external-legend\",\t\t MASK_EXTERNAL_LEGEND, \"Generate external legend information\" },   \\\n-    { \"identify-revision\", \t\t MASK_IDENTIFY_REVISION, \"Emit identifying info in .s file\" }, \\\n-    { \"warn-passed-structs\", \t\t MASK_WARN_PASS_STRUCT, \"Warn when a function arg is a structure\" },\n+    { \"standard\",\t\tMASK_STANDARD,\t\t\t\\\n+      N_(\"Retain standard MXDB information\") },\t\t\t\\\n+    { \"legend\",\t\t\t-MASK_NOLEGEND,\t\t\t\\\n+      N_(\"Retain legend information\") },          \t\t\\\n+    { \"no-legend\",\t\tMASK_NOLEGEND, \"\" },\t\t\\\n+    { \"external-legend\",\tMASK_EXTERNAL_LEGEND,\t\t\\\n+      N_(\"Generate external legend information\") },\t\t\\\n+    { \"identify-revision\", \tMASK_IDENTIFY_REVISION,\t\t\\\n+      N_(\"Emit identifying info in .s file\") },\t\t\t\\\n+    { \"warn-passed-structs\", \tMASK_WARN_PASS_STRUCT,\t\t\\\n+      N_(\"Warn when a function arg is a structure\") },\n \n #undef  DWARF_DEBUGGING_INFO\n #define DWARF_DEBUGGING_INFO"}, {"sha": "21c66cc39fbf30878bc51c7d11a9740259e020fb", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -137,7 +137,7 @@ ctor_section ()\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   if (in_section != in_ctor)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\\\n       in_section = in_ctor;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n@@ -148,7 +148,7 @@ dtor_section ()\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   if (in_section != in_dtor)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\\\n       in_section = in_dtor;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n@@ -222,8 +222,8 @@ dtor_section ()\t\t\t\t\t\t\t\\\n \n #undef SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES \t\t\\\n-  { \"bnu210\", MASK_BNU210, \"Enable weak symbol and enhanced C++ template support. Binutils 2.9.5.1 or higher required.\" }, \\\n-  { \"no-bnu210\", -MASK_BNU210, \"Disable weak symbol and enhanced C++ template support.\" },\n+  { \"bnu210\", MASK_BNU210, N_(\"Enable weak symbol and enhanced C++ template support. Binutils 2.9.5.1 or higher required.\") }, \\\n+  { \"no-bnu210\", -MASK_BNU210, N_(\"Disable weak symbol and enhanced C++ template support.\") },\n \n /* Weak symbols and .gnu.linkonce are only in the binutils snapshots\n    and binutils-2.10.  So do it only when -mbnu210 is specified.  */"}, {"sha": "fd58968c5a84a96d44ec295ef9a9cd906bd33055", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 50, "deletions": 45, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -224,72 +224,77 @@ extern const int x86_partial_reg_dependency, x86_memory_mismatch_stall;\n #define TARGET_MMX ((target_flags & MASK_MMX) != 0)\n \n #define TARGET_SWITCHES\t\t\t\t\t\t\t      \\\n-{ { \"80387\",\t\t\t MASK_80387, \"Use hardware fp\" },\t      \\\n-  { \"no-80387\",\t\t\t-MASK_80387, \"Do not use hardware fp\" },      \\\n-  { \"hard-float\",\t\t MASK_80387, \"Use hardware fp\" },\t      \\\n-  { \"soft-float\",\t\t-MASK_80387, \"Do not use hardware fp\" },      \\\n-  { \"no-soft-float\",\t\t MASK_80387, \"Use hardware fp\" },\t      \\\n-  { \"386\",\t\t\t 0, \"Same as -mcpu=i386\" },\t\t      \\\n-  { \"486\",\t\t\t 0, \"Same as -mcpu=i486\" },\t\t      \\\n-  { \"pentium\",\t\t\t 0, \"Same as -mcpu=pentium\" },\t\t      \\\n-  { \"pentiumpro\",\t\t 0, \"Same as -mcpu=pentiumpro\" },\t      \\\n-  { \"rtd\",\t\t\t MASK_RTD, \"Alternate calling convention\" },  \\\n-  { \"no-rtd\",\t\t\t-MASK_RTD, \"Use normal calling convention\" }, \\\n+{ { \"80387\",\t\t\t MASK_80387, N_(\"Use hardware fp\") },\t      \\\n+  { \"no-80387\",\t\t\t-MASK_80387, N_(\"Do not use hardware fp\") },  \\\n+  { \"hard-float\",\t\t MASK_80387, N_(\"Use hardware fp\") },\t      \\\n+  { \"soft-float\",\t\t-MASK_80387, N_(\"Do not use hardware fp\") },  \\\n+  { \"no-soft-float\",\t\t MASK_80387, N_(\"Use hardware fp\") },\t      \\\n+  { \"386\",\t\t\t 0, N_(\"Same as -mcpu=i386\") },\t\t      \\\n+  { \"486\",\t\t\t 0, N_(\"Same as -mcpu=i486\") },\t\t      \\\n+  { \"pentium\",\t\t\t 0, N_(\"Same as -mcpu=pentium\") },\t      \\\n+  { \"pentiumpro\",\t\t 0, N_(\"Same as -mcpu=pentiumpro\") },\t      \\\n+  { \"rtd\",\t\t\t MASK_RTD,\t\t\t\t      \\\n+    N_(\"Alternate calling convention\") },\t\t\t\t      \\\n+  { \"no-rtd\",\t\t\t-MASK_RTD,\t\t\t\t      \\\n+    N_(\"Use normal calling convention\") },\t\t\t\t      \\\n   { \"align-double\",\t\t MASK_ALIGN_DOUBLE,\t\t\t      \\\n-    \"Align some doubles on dword boundary\" },\t\t\t\t      \\\n+    N_(\"Align some doubles on dword boundary\") },\t\t\t      \\\n   { \"no-align-double\",\t\t-MASK_ALIGN_DOUBLE,\t\t\t      \\\n-    \"Align doubles on word boundary\" },\t\t\t\t\t      \\\n+    N_(\"Align doubles on word boundary\") },\t\t\t\t      \\\n   { \"svr3-shlib\",\t\t MASK_SVR3_SHLIB,\t\t\t      \\\n-    \"Uninitialized locals in .bss\"  },\t\t\t\t\t      \\\n+    N_(\"Uninitialized locals in .bss\")  },\t\t\t\t      \\\n   { \"no-svr3-shlib\",\t\t-MASK_SVR3_SHLIB,\t\t\t      \\\n-    \"Uninitialized locals in .data\" },\t\t\t\t\t      \\\n+    N_(\"Uninitialized locals in .data\") },\t\t\t\t      \\\n   { \"ieee-fp\",\t\t\t MASK_IEEE_FP,\t\t\t\t      \\\n-    \"Use IEEE math for fp comparisons\" },\t\t\t\t      \\\n+    N_(\"Use IEEE math for fp comparisons\") },\t\t\t\t      \\\n   { \"no-ieee-fp\",\t\t-MASK_IEEE_FP,\t\t\t\t      \\\n-    \"Do not use IEEE math for fp comparisons\" },\t\t\t      \\\n+    N_(\"Do not use IEEE math for fp comparisons\") },\t\t\t      \\\n   { \"fp-ret-in-387\",\t\t MASK_FLOAT_RETURNS,\t\t\t      \\\n-    \"Return values of functions in FPU registers\" },\t\t\t      \\\n+    N_(\"Return values of functions in FPU registers\") },\t\t      \\\n   { \"no-fp-ret-in-387\",\t\t-MASK_FLOAT_RETURNS ,\t\t\t      \\\n-    \"Do not return values of functions in FPU registers\"},\t\t      \\\n+    N_(\"Do not return values of functions in FPU registers\")},\t\t      \\\n   { \"no-fancy-math-387\",\t MASK_NO_FANCY_MATH_387,\t\t      \\\n-    \"Do not generate sin, cos, sqrt for FPU\" },\t\t\t\t      \\\n+    N_(\"Do not generate sin, cos, sqrt for FPU\") },\t\t\t      \\\n   { \"fancy-math-387\",\t\t-MASK_NO_FANCY_MATH_387,\t\t      \\\n-     \"Generate sin, cos, sqrt for FPU\"},\t\t\t\t      \\\n+     N_(\"Generate sin, cos, sqrt for FPU\")},\t\t\t\t      \\\n   { \"omit-leaf-frame-pointer\",\t MASK_OMIT_LEAF_FRAME_POINTER,\t\t      \\\n-    \"Omit the frame pointer in leaf functions\" },\t\t\t      \\\n+    N_(\"Omit the frame pointer in leaf functions\") },\t\t\t      \\\n   { \"no-omit-leaf-frame-pointer\",-MASK_OMIT_LEAF_FRAME_POINTER, \"\" },\t      \\\n   { \"debug-addr\",\t\t MASK_DEBUG_ADDR, 0 /* undocumented */ },     \\\n   { \"no-debug-addr\",\t\t-MASK_DEBUG_ADDR, 0 /* undocumented */ },     \\\n   { \"debug-arg\",\t\t MASK_DEBUG_ARG, 0 /* undocumented */ },      \\\n   { \"no-debug-arg\",\t\t-MASK_DEBUG_ARG, 0 /* undocumented */ },      \\\n-  { \"stack-arg-probe\",\t\t MASK_STACK_PROBE, \"Enable stack probing\" },  \\\n+  { \"stack-arg-probe\",\t\t MASK_STACK_PROBE,\t\t\t      \\\n+    N_(\"Enable stack probing\") },\t\t\t\t\t      \\\n   { \"no-stack-arg-probe\",\t-MASK_STACK_PROBE, \"\" },\t\t      \\\n   { \"windows\",\t\t\t0, 0 /* undocumented */ },\t\t      \\\n   { \"dll\",\t\t\t0,  0 /* undocumented */ },\t\t      \\\n   { \"intel-syntax\",\t\tMASK_INTEL_SYNTAX,\t\t\t      \\\n-    \"Emit Intel syntax assembler opcodes\" },\t\t\t\t      \\\n+    N_(\"Emit Intel syntax assembler opcodes\") },\t\t\t      \\\n   { \"no-intel-syntax\",\t\t-MASK_INTEL_SYNTAX, \"\" },\t\t      \\\n   { \"align-stringops\",\t\t-MASK_NO_ALIGN_STROPS,\t\t\t      \\\n-    \"Align destination of the string operations\" },\t\t\t      \\\n+    N_(\"Align destination of the string operations\") },\t\t\t      \\\n   { \"no-align-stringops\",\t MASK_NO_ALIGN_STROPS,\t\t\t      \\\n-    \"Do not align destination of the string operations\" },\t\t      \\\n+    N_(\"Do not align destination of the string operations\") },\t\t      \\\n   { \"inline-all-stringops\",\t MASK_INLINE_ALL_STROPS,\t\t      \\\n-    \"Inline all known string operations\" },\t\t\t\t      \\\n+    N_(\"Inline all known string operations\") },\t\t\t\t      \\\n   { \"no-inline-all-stringops\",\t-MASK_INLINE_ALL_STROPS,\t\t      \\\n-    \"Do not inline all known string operations\" },\t\t\t      \\\n+    N_(\"Do not inline all known string operations\") },\t\t\t      \\\n   { \"push-args\",\t\t-MASK_NO_PUSH_ARGS,\t\t\t      \\\n-    \"Use push instructions to save outgoing arguments\" },\t\t      \\\n+    N_(\"Use push instructions to save outgoing arguments\") },\t\t      \\\n   { \"no-push-args\",\t\tMASK_NO_PUSH_ARGS,\t\t\t      \\\n-    \"Do not use push instructions to save outgoing arguments\" },\t      \\\n+    N_(\"Do not use push instructions to save outgoing arguments\") },\t      \\\n   { \"accumulate-outgoing-args\",\tMASK_ACCUMULATE_OUTGOING_ARGS,\t\t      \\\n-    \"Use push instructions to save outgoing arguments\" },\t\t      \\\n+    N_(\"Use push instructions to save outgoing arguments\") },\t\t      \\\n   { \"no-accumulate-outgoing-args\",-MASK_ACCUMULATE_OUTGOING_ARGS,\t      \\\n-    \"Do not use push instructions to save outgoing arguments\" },\t      \\\n-  { \"mmx\",\t\t\t MASK_MMX, \"Support MMX builtins\" },          \\\n-  { \"no-mmx\",\t\t\t-MASK_MMX, \"Do not support MMX builtins\" },   \\\n-  { \"sse\",\t\t\t MASK_SSE, \"Support MMX and SSE builtins\" },  \\\n+    N_(\"Do not use push instructions to save outgoing arguments\") },\t      \\\n+  { \"mmx\",\t\t\t MASK_MMX, N_(\"Support MMX builtins\") },      \\\n+  { \"no-mmx\",\t\t\t-MASK_MMX,\t\t\t\t      \\\n+    N_(\"Do not support MMX builtins\") },\t\t\t\t      \\\n+  { \"sse\",\t\t\t MASK_SSE,\t\t\t\t      \\\n+    N_(\"Support MMX and SSE builtins\") },\t\t\t\t      \\\n   { \"no-sse\",\t\t\t-MASK_SSE,\t\t\t\t      \\\n-    \"Do not support MMX and SSE builtins\" },\t\t\t\t      \\\n+    N_(\"Do not support MMX and SSE builtins\") },\t\t\t      \\\n   SUBTARGET_SWITCHES\t\t\t\t\t\t\t      \\\n   { \"\", TARGET_DEFAULT, 0 }}\n \n@@ -322,24 +327,24 @@ extern int ix86_arch;\n    by appending `-m' to the specified name.  */\n #define TARGET_OPTIONS\t\t\t\t\t\t\\\n { { \"cpu=\",\t\t&ix86_cpu_string,\t\t\t\\\n-    \"Schedule code for given CPU\"},\t\t\t\t\\\n+    N_(\"Schedule code for given CPU\")},\t\t\t\t\\\n   { \"arch=\",\t\t&ix86_arch_string,\t\t\t\\\n-    \"Generate code for given CPU\"},\t\t\t\t\\\n+    N_(\"Generate code for given CPU\")},\t\t\t\t\\\n   { \"reg-alloc=\",\t&ix86_reg_alloc_order,\t\t\t\\\n-    \"Control allocation order of integer registers\" },\t\t\\\n+    N_(\"Control allocation order of integer registers\") },\t\\\n   { \"regparm=\",\t\t&ix86_regparm_string,\t\t\t\\\n-    \"Number of registers used to pass integer arguments\" },\t\\\n+    N_(\"Number of registers used to pass integer arguments\") },\t\\\n   { \"align-loops=\",\t&ix86_align_loops_string,\t\t\\\n-    \"Loop code aligned to this power of 2\" },\t\t\t\\\n+    N_(\"Loop code aligned to this power of 2\") },\t\t\\\n   { \"align-jumps=\",\t&ix86_align_jumps_string,\t\t\\\n-    \"Jump targets are aligned to this power of 2\" },\t\t\\\n+    N_(\"Jump targets are aligned to this power of 2\") },\t\\\n   { \"align-functions=\",\t&ix86_align_funcs_string,\t\t\\\n-    \"Function starts are aligned to this power of 2\" },\t\t\\\n+    N_(\"Function starts are aligned to this power of 2\") },\t\\\n   { \"preferred-stack-boundary=\",\t\t\t\t\\\n     &ix86_preferred_stack_boundary_string,\t\t\t\\\n-    \"Attempt to keep stack aligned to this power of 2\" },\t\\\n+    N_(\"Attempt to keep stack aligned to this power of 2\") },\t\\\n   { \"branch-cost=\",\t&ix86_branch_cost_string,\t\t\\\n-    \"Branches are this expensive (1-5, arbitrary units)\" },\t\\\n+    N_(\"Branches are this expensive (1-5, arbitrary units)\") },\t\\\n   SUBTARGET_OPTIONS\t\t\t\t\t\t\\\n }\n "}, {"sha": "9e342493270bcc3cafb597a6c3338494b0fa6b8c", "filename": "gcc/config/i386/osf1elf.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi386%2Fosf1elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi386%2Fosf1elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosf1elf.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -1,5 +1,6 @@\n /* OSF/1 1.3 now is compitable with SVR4, so include sysv4.h, and\n-   put difference here.  */\n+   put difference here.\n+   Copyright (C) 2000 Free Software Foundation, Inc. */\n \n #include <stdio.h>\n #include \"i386/sysv4.h\"\t/* Base i386 target machine definitions */\n@@ -121,7 +122,8 @@\n \n #undef\tSUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n-     { \"mcount\",\t\t-MASK_NO_MCOUNT, \"Profiling uses mcount\" },\t\t\t\\\n+     { \"mcount\",\t\t-MASK_NO_MCOUNT,\t\t\t\\\n+       N_(\"Profiling uses mcount\") },\t\t\t\t\t\\\n      { \"no-mcount\",\t\t MASK_NO_MCOUNT, \"\" },\n \n /* This macro generates the assembly code for function entry."}, {"sha": "303d2650d65018e3e79ef4e1c24dd61ee8570d31", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -1,6 +1,7 @@\n /* Definitions of target machine for GNU compiler.\n    Intel 386 (OSF/1 with OSF/rose) version.\n-   Copyright (C) 1991, 92, 93, 96, 98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1992, 1993, 1996, 1998, 1999, 2000\n+   Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -58,18 +59,27 @@ Boston, MA 02111-1307, USA.  */\n \n #undef\tSUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n-     { \"half-pic\",\t\t MASK_HALF_PIC, \"Emit half-PIC code\" },\t\t\t\\\n+     { \"half-pic\",\t\t MASK_HALF_PIC,\t\t\t\t\\\n+       N_(\"Emit half-PIC code\") },\t\t\t\t\t\\\n      { \"no-half-pic\",\t\t-MASK_HALF_PIC, \"\" }\t\t\t\\\n-     { \"debug-half-pic\",\t MASK_HALF_PIC_DEBUG, 0 /* intentionally undoc */ },\t\t\t\\\n-     { \"debugb\",\t\t MASK_HALF_PIC_DEBUG, 0 /* intentionally undoc */ },\t\t\t\\\n-     { \"elf\",\t\t\t MASK_ELF, \"Emit ELF object code\" },\t\t\t\t\\\n-     { \"rose\",\t\t\t-MASK_ELF, \"Emit ROSE object code\" },\t\t\t\t\\\n-     { \"underscores\",\t\t-MASK_NO_UNDERSCORES, \"Symbols have a leading underscore\" },\t\t\t\\\n-     { \"no-underscores\",\t MASK_NO_UNDERSCORES, \"\" },\t\t\t\\\n-     { \"large-align\",\t\t MASK_LARGE_ALIGN, \"Align to >word boundaries\" },\t\t\t\\\n-     { \"no-large-align\",\t-MASK_LARGE_ALIGN, \"\" },\t\t\t\\\n-     { \"mcount\",\t\t-MASK_NO_MCOUNT, \"Use mcount for profiling\" },\t\t\t\\\n-     { \"mcount-ptr\",\t\t MASK_NO_MCOUNT, \"Use mcount_ptr for profiling\" },\t\t\t\\\n+     { \"debug-half-pic\",\t MASK_HALF_PIC_DEBUG,\t\t\t\\\n+       0 /* intentionally undoc */ },\t\t\t\t\t\\\n+     { \"debugb\",\t\t MASK_HALF_PIC_DEBUG,\t\t\t\\\n+       0 /* intentionally undoc */ },\t\t\t\t\t\\\n+     { \"elf\",\t\t\t MASK_ELF,\t\t\t\t\\\n+       N_(\"Emit ELF object code\") },\t\t\t\t\t\\\n+     { \"rose\",\t\t\t-MASK_ELF,\t\t\t\t\\\n+       N_(\"Emit ROSE object code\") },\t\t\t\t\t\\\n+     { \"underscores\",\t\t-MASK_NO_UNDERSCORES,\t\t\t\\\n+       N_(\"Symbols have a leading underscore\") },\t\t\t\\\n+     { \"no-underscores\",\t MASK_NO_UNDERSCORES, \"\" },\t\t\\\n+     { \"large-align\",\t\t MASK_LARGE_ALIGN,\t\t\t\\\n+       N_(\"Align to >word boundaries\") },\t\t\t\t\\\n+     { \"no-large-align\",\t-MASK_LARGE_ALIGN, \"\" },\t\t\\\n+     { \"mcount\",\t\t-MASK_NO_MCOUNT,\t\t\t\\\n+       N_(\"Use mcount for profiling\") },\t\t\t\t\\\n+     { \"mcount-ptr\",\t\t MASK_NO_MCOUNT,\t\t\t\\\n+       N_(\"Use mcount_ptr for profiling\") },\t\t\t\t\\\n      { \"no-mcount\",\t\t MASK_NO_MCOUNT, \"\" },\n \n /* OSF/rose uses stabs, not dwarf.  */"}, {"sha": "0853c7a5386320c7d1630fd2f5669c5311c67fc5", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for Intel 386 running SCO Unix System V 3.2 Version 5.\n-   Copyright (C) 1992, 1995, 1996, 1997, 1998, 1999 \n+   Copyright (C) 1992, 1995, 1996, 1997, 1998, 1999, 2000\n    Free Software Foundation, Inc.\n    Contributed by Kean Johnston (hug@netcom.com)\n \n@@ -894,9 +894,9 @@ dtors_section ()\t\t\t\t\t\t\t\\\n #define TARGET_ELF              (!(target_flags & MASK_COFF))\n \n #undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \t\t\\\n-\t{ \"coff\", MASK_COFF, \"Generate COFF output\" }, \t\t\\\n-\t{ \"elf\", -MASK_COFF, \"Generate ELF output\"  },\n+#define SUBTARGET_SWITCHES \t\t\t\t\t\\\n+\t{ \"coff\", MASK_COFF, N_(\"Generate COFF output\") }, \t\\\n+\t{ \"elf\", -MASK_COFF, N_(\"Generate ELF output\")  },\n \n #define NO_DOLLAR_IN_LABEL\n "}, {"sha": "12ae5a81f16c91ced4e8ad7d9ea7e823e3b49b22", "filename": "gcc/config/i386/win32.h", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi386%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi386%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwin32.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -2,7 +2,8 @@\n    hosting on Windows NT 3.x, using a Unix style C library and tools,\n    as distinct from winnt.h, which is used to build GCC for use with a\n    windows style library and tool set and uses the Microsoft tools.\n-   Copyright (C) 1995, 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000\n+   Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -47,13 +48,18 @@ Boston, MA 02111-1307, USA. */\n #define TARGET_NOP_FUN_DLLIMPORT (target_flags & MASK_NOP_FUN_DLLIMPORT)\n \n #undef  SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-    { \"win32\",                           MASK_WIN32, \"Use Mingw32 interface\" }, \\\n-    { \"cygwin\",                          MASK_CYGWIN, \"Use Cygwin interface\"  },  \\\n-    { \"windows\",                         MASK_WINDOWS, \"Use bare Windows interface\" }, \\\n-    { \"dll\",                             MASK_DLL, \"Generate code for a DLL\" },     \\\n-    { \"nop-fun-dllimport\",\t\t MASK_NOP_FUN_DLLIMPORT, \"Ignore dllimport for functions\" }, \\\n-    { \"no-nop-fun-dllimport\",\t\t MASK_NOP_FUN_DLLIMPORT, \"\" },\n+#define SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n+    { \"win32\",\t\t\tMASK_WIN32,\t\t\t\t\\\n+      N_(\"Use Mingw32 interface\") },\t\t\t\t\t\\\n+    { \"cygwin\",\t\t\tMASK_CYGWIN,\t\t\t\t\\\n+      N_(\"Use Cygwin interface\")  },\t\t\t\t\t\\\n+    { \"windows\",\t\tMASK_WINDOWS,\t\t\t\t\\\n+      N_(\"Use bare Windows interface\") },\t\t\t\t\\\n+    { \"dll\",\t\t\tMASK_DLL,\t\t\t\t\\\n+      N_(\"Generate code for a DLL\") },\t\t\t\t\t\\\n+    { \"nop-fun-dllimport\",\tMASK_NOP_FUN_DLLIMPORT,\t\t\t\\\n+      N_(\"Ignore dllimport for functions\") }, \t\t\t\t\\\n+    { \"no-nop-fun-dllimport\",\tMASK_NOP_FUN_DLLIMPORT, \"\" },\n \n \n #undef CPP_PREDEFINES"}, {"sha": "4ecaebfba524321d32b8d1300e9464b323afee75", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -53,9 +53,9 @@ extern int target_flags;\n    An empty string NAME is used to identify the default VALUE.  */\n \n #define TARGET_SWITCHES  \\\n-  { {\"xp\", 1, \"Generate code which uses the FPU\"},\t\t\t\\\n-    {\"noxp\", -1, \"Do not generate code which uses the FPU\"},\t\t\\\n-    {\"xr\", -1, \"Do not generate code which uses the FPU\"},\t\t\\\n+  { {\"xp\", 1, N_(\"Generate code which uses the FPU\")},\t\t\t\\\n+    {\"noxp\", -1, N_(\"Do not generate code which uses the FPU\")},\t\\\n+    {\"xr\", -1, N_(\"Do not generate code which uses the FPU\")},\t\t\\\n     { \"\", TARGET_DEFAULT, NULL}}\n \n #define TARGET_DEFAULT 0"}, {"sha": "003cf79e750d4222f9759db0da832ec0ca9ff554", "filename": "gcc/config/i860/paragon.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi860%2Fparagon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi860%2Fparagon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fparagon.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -1,5 +1,5 @@\n /* Target definitions for GNU compiler for Intel 80860 running OSF/1AD\n-   Copyright (C) 1991, 1996, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1996, 1999, 2000 Free Software Foundation, Inc.\n    Based upon original work of Ron Guilmette (rfg@monkeys.com).\n    Contributed by Andy Pfiffer (andyp@ssd.intel.com).\n    Partially inspired by\n@@ -25,10 +25,10 @@ Boston, MA 02111-1307, USA.  */\n \n #undef TARGET_SWITCHES\n #define TARGET_SWITCHES  \\\n-  { {\"xp\", 1, \"Generate code which uses the FPU\"},              \\\n-    {\"noxp\", -1, \"Do not generate code which uses the FPU\"},    \\\n-    {\"xr\", -1, \"Do not generate code which uses the FPU\"},      \\\n-    {\"noieee\", -1, \"Do not generate code which uses the FPU\"},\t\\\n+  { {\"xp\", 1, N_(\"Generate code which uses the FPU\")},              \\\n+    {\"noxp\", -1, N_(\"Do not generate code which uses the FPU\")},    \\\n+    {\"xr\", -1, N_(\"Do not generate code which uses the FPU\")},      \\\n+    {\"noieee\", -1, N_(\"Do not generate code which uses the FPU\")},\t\\\n     {\"nx\", 2, NULL},                  \\\n     { \"\", TARGET_DEFAULT, NULL}}\n  "}, {"sha": "66be5f624eaa77b652d52a0430c1661fe8e72131", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -235,94 +235,94 @@ extern int target_flags;\n \n #define TARGET_SWITCHES  \\\n   { {\"sa\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR),\t\t\\\n-       \"Generate SA code\"},\t\t\t\t\t\t\\\n+       N_(\"Generate SA code\")},\t\t\t\t\t\t\\\n     {\"sb\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_K_SERIES|\t\t\t\\\n \t\t\tTARGET_FLAG_COMPLEX_ADDR),\t\t\t\\\n-       \"Generate SB code\"},\t\t\t\t\t\t\\\n+       N_(\"Generate SB code\")},\t\t\t\t\t\t\\\n /*  {\"sc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\t\t\t\\\n \t\t\tTARGET_FLAG_MC|TARGET_FLAG_COMPLEX_ADDR),\t\\\n-       \"Generate SC code\"}, */\t\t\t\t\t\t\\\n+       N_(\"Generate SC code\")}, */\t\t\t\t\t\\\n     {\"ka\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR),\t\t\\\n-       \"Generate KA code\"},\t\t\t\t\t\t\\\n+       N_(\"Generate KA code\")},\t\t\t\t\t\t\\\n     {\"kb\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_K_SERIES|\t\t\t\\\n \t\t\tTARGET_FLAG_COMPLEX_ADDR),\t\t\t\\\n-       \"Generate KB code\"},\t\t\t\t\t\t\\\n+       N_(\"Generate KB code\")},\t\t\t\t\t\t\\\n /*  {\"kc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\t\t\t\\\n \t\t\tTARGET_FLAG_MC|TARGET_FLAG_COMPLEX_ADDR),\t\\\n-       \"Generate KC code\"}, */\t\t\t\t\t\t\\\n+       N_(\"Generate KC code\")}, */\t\t\t\t\t\\\n     {\"ja\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR),\t\t\\\n-       \"Generate JA code\"},\t\t\t\t\t\t\\\n+       N_(\"Generate JA code\")},\t\t\t\t\t\t\\\n     {\"jd\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR),\t\t\\\n-       \"Generate JD code\"},\t\t\t\t\t\t\\\n+       N_(\"Generate JD code\")},\t\t\t\t\t\t\\\n     {\"jf\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_K_SERIES|\t\t\t\\\n \t\t\tTARGET_FLAG_COMPLEX_ADDR),\t\t\t\\\n-       \"Generate JF code\"},\t\t\t\t\t\t\\\n+       N_(\"Generate JF code\")},\t\t\t\t\t\t\\\n     {\"rp\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR),\t\t\\\n-       \"generate RP code\"},\t\t\t\t\t\t\\\n+       N_(\"generate RP code\")},\t\t\t\t\t\t\\\n     {\"mc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\t\t\t\\\n \t\t\tTARGET_FLAG_MC|TARGET_FLAG_COMPLEX_ADDR),\t\\\n-       \"Generate MC code\"},\t\t\t\t\t\t\\\n+       N_(\"Generate MC code\")},\t\t\t\t\t\t\\\n     {\"ca\", (TARGET_FLAG_C_SERIES|TARGET_FLAG_BRANCH_PREDICT|\t\t\\\n \t\t\tTARGET_FLAG_CODE_ALIGN|TARGET_FLAG_COMPLEX_ADDR),\\\n-       \"Generate CA code\"},\t\t\t\t\t\t\\\n+       N_(\"Generate CA code\")},\t\t\t\t\t\t\\\n /*  {\"cb\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_C_SERIES|\t\t\t\\\n \t\t\tTARGET_FLAG_BRANCH_PREDICT|TARGET_FLAG_CODE_ALIGN),\\\n-       \"Generate CB code\"},\t\t\t\t\t\t\\\n+       N_(\"Generate CB code\")},\t\t\t\t\t\t\\\n     {\"cc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\t\t\t\\\n \t\t\tTARGET_FLAG_C_SERIES|TARGET_FLAG_BRANCH_PREDICT|\\\n \t\t\tTARGET_FLAG_CODE_ALIGN),\t\t\t\\\n-       \"Generate CC code\"}, */\t\t\t\t\t\t\\\n+       N_(\"Generate CC code\")}, */\t\t\t\t\t\\\n     {\"cf\", (TARGET_FLAG_C_SERIES|TARGET_FLAG_BRANCH_PREDICT|\t\t\\\n \t\t\tTARGET_FLAG_CODE_ALIGN|TARGET_FLAG_COMPLEX_ADDR),\\\n-       \"Generate CF code\"},\t\t\t\t\t\t\\\n+       N_(\"Generate CF code\")},\t\t\t\t\t\t\\\n     {\"numerics\", (TARGET_FLAG_NUMERICS),\t\t\t\t\\\n-       \"Use hardware floating point instructions\"},\t\t\t\\\n+       N_(\"Use hardware floating point instructions\")},\t\t\t\\\n     {\"soft-float\", -(TARGET_FLAG_NUMERICS),\t\t\t\t\\\n-       \"Use software floating point\"},\t\t\t\t\t\\\n+       N_(\"Use software floating point\")},\t\t\t\t\\\n     {\"leaf-procedures\", TARGET_FLAG_LEAFPROC,\t\t\t\t\\\n-       \"Use alternate leaf function entries\"},\t\t\t\t\\\n+       N_(\"Use alternate leaf function entries\")},\t\t\t\\\n     {\"no-leaf-procedures\", -(TARGET_FLAG_LEAFPROC),\t\t\t\\\n-       \"Do not use alternate leaf function entries\"},\t\t\t\\\n+       N_(\"Do not use alternate leaf function entries\")},\t\t\\\n     {\"tail-call\", TARGET_FLAG_TAILCALL,\t\t\t\t\t\\\n-       \"Perform tail call optimization\"},\t\t\t\t\\\n+       N_(\"Perform tail call optimization\")},\t\t\t\t\\\n     {\"no-tail-call\", -(TARGET_FLAG_TAILCALL),\t\t\t\t\\\n-       \"Do not perform tail call optimization\"},\t\t\t\\\n+       N_(\"Do not perform tail call optimization\")},\t\t\t\\\n     {\"complex-addr\", TARGET_FLAG_COMPLEX_ADDR, \t\t\t\t\\\n-       \"Use complex addressing modes\"},\t\t\t\t\t\\\n+       N_(\"Use complex addressing modes\")},\t\t\t\t\\\n     {\"no-complex-addr\", -(TARGET_FLAG_COMPLEX_ADDR),\t\t\t\\\n-       \"Do not use complex addressing modes\"},\t\t\t\t\\\n+       N_(\"Do not use complex addressing modes\")},\t\t\t\\\n     {\"code-align\", TARGET_FLAG_CODE_ALIGN,\t\t\t\t\\\n-       \"Align code to 8 byte boundary\"},\t\t\t\t\\\n+       N_(\"Align code to 8 byte boundary\")},\t\t\t\t\\\n     {\"no-code-align\", -(TARGET_FLAG_CODE_ALIGN),\t\t\t\\\n-       \"Do not align code to 8 byte boundary\"},\t\t\t\t\\\n+       N_(\"Do not align code to 8 byte boundary\")},\t\t\t\\\n /*  {\"clean-linkage\", (TARGET_FLAG_CLEAN_LINKAGE),\t\t\t\\\n-       \"Force use of prototypes\"},\t\t\t\t\t\\\n+       N_(\"Force use of prototypes\")},\t\t\t\t\t\\\n     {\"no-clean-linkage\", -(TARGET_FLAG_CLEAN_LINKAGE),\t\t\t\\\n-       \"Do not force use of prototypes\"}, */\t\t\t\t\\\n+       N_(\"Do not force use of prototypes\")}, */\t\t\t\\\n     {\"ic-compat\", TARGET_FLAG_IC_COMPAT2_0,\t\t\t\t\\\n-       \"Enable compatibility with iC960 v2.0\"},\t\t\t\t\\\n+       N_(\"Enable compatibility with iC960 v2.0\")},\t\t\t\\\n     {\"ic2.0-compat\", TARGET_FLAG_IC_COMPAT2_0,\t\t\t\t\\\n-       \"Enable compatibility with iC960 v2.0\"},\t\t\t\t\\\n+       N_(\"Enable compatibility with iC960 v2.0\")},\t\t\t\\\n     {\"ic3.0-compat\", TARGET_FLAG_IC_COMPAT3_0,\t\t\t\t\\\n-       \"Enable compatibility with iC960 v3.0\"},\t\t\t\t\\\n+       N_(\"Enable compatibility with iC960 v3.0\")},\t\t\t\\\n     {\"asm-compat\", TARGET_FLAG_ASM_COMPAT,\t\t\t\t\\\n-       \"Enable compatibility with ic960 assembler\"},\t\t\t\\\n+       N_(\"Enable compatibility with ic960 assembler\")},\t\t\\\n     {\"intel-asm\", TARGET_FLAG_ASM_COMPAT,\t\t\t\t\\\n-       \"Enable compatibility with ic960 assembler\"},\t\t\t\\\n+       N_(\"Enable compatibility with ic960 assembler\")},\t\t\\\n     {\"strict-align\", TARGET_FLAG_STRICT_ALIGN,\t\t\t\t\\\n-       \"Do not permit unaligned accesses\"},\t\t\t\t\\\n+       N_(\"Do not permit unaligned accesses\")},\t\t\t\t\\\n     {\"no-strict-align\", -(TARGET_FLAG_STRICT_ALIGN),\t\t\t\\\n-       \"Permit unaligned accesses\"},\t\t\t\t\t\\\n+       N_(\"Permit unaligned accesses\")},\t\t\t\t\\\n     {\"old-align\", (TARGET_FLAG_OLD_ALIGN|TARGET_FLAG_STRICT_ALIGN),\t\\\n-       \"Layout types like Intel's v1.3 gcc\"},\t\t\t\t\\\n+       N_(\"Layout types like Intel's v1.3 gcc\")},\t\t\t\\\n     {\"no-old-align\", -(TARGET_FLAG_OLD_ALIGN|TARGET_FLAG_STRICT_ALIGN),\t\\\n-       \"Do not layout types like Intel's v1.3 gcc\"},\t\t\t\\\n+       N_(\"Do not layout types like Intel's v1.3 gcc\")},\t\t\\\n     {\"long-double-64\", TARGET_FLAG_LONG_DOUBLE_64,\t\t\t\\\n-       \"Use 64 bit long doubles\"},\t\t\t\t\t\\\n+       N_(\"Use 64 bit long doubles\")},\t\t\t\t\t\\\n     {\"link-relax\", 0,\t\t\t\t\t\t\t\\\n-       \"Enable linker relaxation\"},\t\t\t\t\t\\\n+       N_(\"Enable linker relaxation\")},\t\t\t\t\t\\\n     {\"no-link-relax\", 0,\t\t\t\t\t\t\\\n-       \"Do not enable linker relaxation\"},\t\t\t\t\\\n+       N_(\"Do not enable linker relaxation\")},\t\t\t\t\\\n     SUBTARGET_SWITCHES                                                  \\\n     { \"\", TARGET_DEFAULT,\t\t\t\t\t\t\\\n \tNULL}}"}, {"sha": "32a6f384eac21c33f0534bbd2aa49d6b4113de72", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -101,39 +101,39 @@ extern int target_flags;\n #define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   { \"big-endian\",\tMASK_BIG_ENDIAN,\t\t\t\t\\\n-      \"Generate big endian code\" },\t\t\t\t\t\\\n+      N_(\"Generate big endian code\") },\t\t\t\t\t\\\n   { \"little-endian\",\t-MASK_BIG_ENDIAN,\t\t\t\t\\\n-      \"Generate little endian code\" },\t\t\t\t\t\\\n+      N_(\"Generate little endian code\") },\t\t\t\t\\\n   { \"gnu-as\",\t\tMASK_GNU_AS,\t\t\t\t\t\\\n-      \"Generate code for GNU as\" },\t\t\t\t\t\\\n+      N_(\"Generate code for GNU as\") },\t\t\t\t\t\\\n   { \"no-gnu-as\",\t-MASK_GNU_AS,\t\t\t\t\t\\\n-      \"Generate code for Intel as\" },\t\t\t\t\t\\\n+      N_(\"Generate code for Intel as\") },\t\t\t\t\\\n   { \"gnu-ld\",\t\tMASK_GNU_LD,\t\t\t\t\t\\\n-      \"Generate code for GNU ld\" },\t\t\t\t\t\\\n+      N_(\"Generate code for GNU ld\") },\t\t\t\t\t\\\n   { \"no-gnu-ld\",\t-MASK_GNU_LD,\t\t\t\t\t\\\n-      \"Generate code for Intel ld\" },\t\t\t\t\t\\\n+      N_(\"Generate code for Intel ld\") },\t\t\t\t\\\n   { \"no-pic\",\t\tMASK_NO_PIC,\t\t\t\t\t\\\n-      \"Generate code without GP reg\" },\t\t\t\t\t\\\n+      N_(\"Generate code without GP reg\") },\t\t\t\t\\\n   { \"volatile-asm-stop\", MASK_VOL_ASM_STOP,\t\t\t\t\\\n-      \"Emit stop bits before and after volatile extended asms\" },\t\\\n+      N_(\"Emit stop bits before and after volatile extended asms\") },\t\\\n   { \"no-volatile-asm-stop\", -MASK_VOL_ASM_STOP,\t\t\t\t\\\n-      \"Don't emit stop bits before and after volatile extended asms\" },\t\\\n+      N_(\"Don't emit stop bits before and after volatile extended asms\") }, \\\n   { \"a-step\",\t\tMASK_A_STEP,\t\t\t\t\t\\\n-      \"Emit code for Itanium (TM) processor A step\"},\t\t\t\\\n+      N_(\"Emit code for Itanium (TM) processor A step\")},\t\t\\\n   { \"register-names\",\tMASK_REG_NAMES,\t\t\t\t\t\\\n-      \"Use in/loc/out register names\"},\t\t\t\t\t\\\n+      N_(\"Use in/loc/out register names\")},\t\t\t\t\\\n   { \"no-sdata\",\t\tMASK_NO_SDATA,\t\t\t\t\t\\\n-      \"Disable use of sdata/scommon/sbss\"},\t\t\t\t\\\n+      N_(\"Disable use of sdata/scommon/sbss\")},\t\t\t\t\\\n   { \"sdata\",\t\t-MASK_NO_SDATA,\t\t\t\t\t\\\n-      \"Enable use of sdata/scommon/sbss\"},\t\t\t\t\\\n+      N_(\"Enable use of sdata/scommon/sbss\")},\t\t\t\t\\\n   { \"constant-gp\",\tMASK_CONST_GP,\t\t\t\t\t\\\n-      \"gp is constant (but save/restore gp on indirect calls)\" },\t\\\n+      N_(\"gp is constant (but save/restore gp on indirect calls)\") },\t\\\n   { \"auto-pic\",\t\tMASK_AUTO_PIC,\t\t\t\t\t\\\n-      \"Generate self-relocatable code\" },\t\t\t\t\\\n+      N_(\"Generate self-relocatable code\") },\t\t\t\t\\\n   { \"dwarf2-asm\", \tMASK_DWARF2_ASM,\t\t\t\t\\\n-      \"Enable Dwarf 2 line debug info via GNU as\"},\t\t\t\\\n+      N_(\"Enable Dwarf 2 line debug info via GNU as\")},\t\t\t\\\n   { \"no-dwarf2-asm\", \t-MASK_DWARF2_ASM,\t\t\t\t\\\n-      \"Disable Dwarf 2 line debug info via GNU as\"},\t\t\t\\\n+      N_(\"Disable Dwarf 2 line debug info via GNU as\")},\t\t\\\n   { \"\",\t\t\tTARGET_DEFAULT | TARGET_CPU_DEFAULT,\t\t\\\n       NULL }\t\t\t\t\t\t\t\t\\\n }\n@@ -156,7 +156,7 @@ extern const char *ia64_fixed_range_string;\n #define TARGET_OPTIONS \\\n {\t\t\t\t\t\t\t\t\t\\\n   { \"fixed-range=\", \t&ia64_fixed_range_string,\t\t\t\\\n-      \"Specify range of registers to make fixed.\"},\t\t\t\\\n+      N_(\"Specify range of registers to make fixed.\")},\t\t\t\\\n }\n \n /* This macro is a C statement to print on `stderr' a string describing the"}, {"sha": "c529cf660f7c559f59692ba3a3c720b0ce3dad64", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -182,15 +182,15 @@ extern int target_flags;\n /*  { \"relax\",\t\t\tTARGET_RELAX_MASK, \"\" },\t\t\\\n     { \"no-relax\",\t\t-TARGET_RELAX_MASK, \"\" },*/\t\t\\\n     { \"debug\",\t\t\tTARGET_DEBUG_MASK, \t\t\t\\\n-\t\"Display compile time statistics\" },\t\t\t\t\\\n+\tN_(\"Display compile time statistics\") },\t\t\t\\\n     { \"align-loops\",\t\tTARGET_ALIGN_LOOPS_MASK, \t\t\\\n-\t\"Align all loops to 32 byte boundary\" },\t\t\t\\\n+\tN_(\"Align all loops to 32 byte boundary\") },\t\t\t\\\n     { \"no-align-loops\",\t\t-TARGET_ALIGN_LOOPS_MASK, \"\" },\t\t\\\n     { \"issue-rate=1\",\t\tTARGET_ISSUE_RATE_MASK, \t\t\\\n-\t\"Only issue one instruction per cycle\" },\t\t\t\\\n+\tN_(\"Only issue one instruction per cycle\") },\t\t\t\\\n     { \"issue-rate=2\",\t\t-TARGET_ISSUE_RATE_MASK, \"\" },\t\t\\\n     { \"branch-cost=1\",\t\tTARGET_BRANCH_COST_MASK, \t\t\\\n-\t\"Prefer branches over conditional execution\" },\t\t\t\\\n+\tN_(\"Prefer branches over conditional execution\") },\t\t\\\n     { \"branch-cost=2\",\t\t-TARGET_BRANCH_COST_MASK, \"\" },\t\t\\\n     SUBTARGET_SWITCHES\t\t\t\t\t\t\t\\\n     { \"\", TARGET_DEFAULT, \"\" }\t\t\t\t\t\t\\\n@@ -205,8 +205,10 @@ extern const char * m32r_sdata_string;\n \n #define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  { \"model=\", & m32r_model_string, \"Code size: small, medium or large\" },\\\n-  { \"sdata=\", & m32r_sdata_string, \"Small data area: none, sdata, use\" } \\\n+  { \"model=\", & m32r_model_string,\t\t\t\t\t\\\n+    N_(\"Code size: small, medium or large\") },\t\t\t\t\\\n+  { \"sdata=\", & m32r_sdata_string,\t\t\t\t\t\\\n+    N_(\"Small data area: none, sdata, use\") }\t\t\t\t\\\n   SUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n }\n "}, {"sha": "f39542f1d0366291e4d5443dc802f627b6232f68", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -126,61 +126,61 @@ extern int target_flags;\n #define TARGET_M340 \t\t(target_flags & M340_BIT)\n \n \n-#define TARGET_SWITCHES\t\t\t\t\t\t\\\n-{ {\"hardlit\", \t            HARDLIT_BIT,\t\t\t\\\n-     \"Inline constants if it can be done in 2 insns or less\" },\t\\\n-  {\"no-hardlit\",          - HARDLIT_BIT,\t\t\t\\\n-     \"inline constants if it only takes 1 instruction\" },\t\\\n-  {\"4align\",              - ALIGN8_BIT,\t\t\t\t\\\n-     \"Set maximum alignment to 4\" },\t\t\t\t\\\n-  {\"8align\",\t            ALIGN8_BIT,\t\t\t\t\\\n-     \"Set maximum alignment to 8\" },\t\t\t\t\\\n-  {\"div\",                   DIV_BIT,\t\t\t\t\\\n-     \"\" },\t\t\t\t\t\t\t\\\n-  {\"no-div\",\t          - DIV_BIT,\t\t\t\t\\\n-     \"Do not use the divide instruction\" },\t\t\t\\\n-  {\"relax-immediates\",      RELAX_IMM_BIT,\t\t\t\\\n-     \"\" },\t\t\t\t\t\t\t\\\n-  {\"no-relax-immediates\", - RELAX_IMM_BIT,\t\t\t\\\n-     \"Do not arbitary sized immediates in bit operations\" },\t\\\n-  {\"wide-bitfields\",        W_FIELD_BIT,\t\t\t\\\n-     \"Always treat bitfield as int-sized\" },\t\t\t\\\n-  {\"no-wide-bitfields\",   - W_FIELD_BIT,\t\t\t\\\n-     \"\" },\t\t\t\t\t\t\t\\\n-  {\"4byte-functions\",       OVERALIGN_FUNC_BIT,\t\t\t\\\n-     \"Force functions to be aligned to a 4 byte boundary\" },\t\\\n-  {\"no-4byte-functions\",  - OVERALIGN_FUNC_BIT,\t\t\t\\\n-     \"Force functions to be aligned to a 2 byte boundary\" },\t\\\n-  {\"callgraph-data\",        CGDATA_BIT,\t\t\t\t\\\n-     \"Emit call graph information\" },\t\t\t\t\\\n-  {\"no-callgraph-data\",   - CGDATA_BIT,\t\t\t\t\\\n-     \"\" },\t\t\t\t\t\t\t\\\n-  {\"slow-bytes\",            SLOW_BYTES_BIT,\t\t\t\\\n-     \"Prefer word accesses over byte accesses\" },\t\t\\\n-  {\"no-slow-bytes\",       - SLOW_BYTES_BIT,\t\t\t\\\n-     \"\" },\t\t\t\t\t\t\t\\\n-  { \"no-lsim\",              0, \"\" },\t\t\t \t\\\n-  {\"little-endian\",         LITTLE_END_BIT,\t\t\t\\\n-     \"Generate little endian code\" },\t\t\t\t\\\n-  {\"big-endian\",          - LITTLE_END_BIT,\t\t\t\\\n-     \"\" },\t\t\t\t\t\t\t\\\n-  {\"210\",                 - M340_BIT,\t\t\t\t\\\n-     \"\" },\t\t\t\t\t\t\t\\\n-  {\"340\",                   M340_BIT,\t\t\t\t\\\n-     \"Generate code for the M*Core M340\" },\t\t\t\\\n-  {\"\",   \t            TARGET_DEFAULT,\t\t\t\\\n-     \"\" }\t\t\t\t\t\t\t\\\n+#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n+{ {\"hardlit\", \t            HARDLIT_BIT,\t\t\t\t\\\n+     N_(\"Inline constants if it can be done in 2 insns or less\") },\t\\\n+  {\"no-hardlit\",          - HARDLIT_BIT,\t\t\t\t\\\n+     N_(\"inline constants if it only takes 1 instruction\") },\t\t\\\n+  {\"4align\",              - ALIGN8_BIT,\t\t\t\t\t\\\n+     N_(\"Set maximum alignment to 4\") },\t\t\t\t\\\n+  {\"8align\",\t            ALIGN8_BIT,\t\t\t\t\t\\\n+     N_(\"Set maximum alignment to 8\") },\t\t\t\t\\\n+  {\"div\",                   DIV_BIT,\t\t\t\t\t\\\n+     \"\" },\t\t\t\t\t\t\t\t\\\n+  {\"no-div\",\t          - DIV_BIT,\t\t\t\t\t\\\n+     N_(\"Do not use the divide instruction\") },\t\t\t\t\\\n+  {\"relax-immediates\",      RELAX_IMM_BIT,\t\t\t\t\\\n+     \"\" },\t\t\t\t\t\t\t\t\\\n+  {\"no-relax-immediates\", - RELAX_IMM_BIT,\t\t\t\t\\\n+     N_(\"Do not arbitary sized immediates in bit operations\") },\t\\\n+  {\"wide-bitfields\",        W_FIELD_BIT,\t\t\t\t\\\n+     N_(\"Always treat bitfield as int-sized\") },\t\t\t\\\n+  {\"no-wide-bitfields\",   - W_FIELD_BIT,\t\t\t\t\\\n+     \"\" },\t\t\t\t\t\t\t\t\\\n+  {\"4byte-functions\",       OVERALIGN_FUNC_BIT,\t\t\t\t\\\n+     N_(\"Force functions to be aligned to a 4 byte boundary\") },\t\\\n+  {\"no-4byte-functions\",  - OVERALIGN_FUNC_BIT,\t\t\t\t\\\n+     N_(\"Force functions to be aligned to a 2 byte boundary\") },\t\\\n+  {\"callgraph-data\",        CGDATA_BIT,\t\t\t\t\t\\\n+     N_(\"Emit call graph information\") },\t\t\t\t\\\n+  {\"no-callgraph-data\",   - CGDATA_BIT,\t\t\t\t\t\\\n+     \"\" },\t\t\t\t\t\t\t\t\\\n+  {\"slow-bytes\",            SLOW_BYTES_BIT,\t\t\t\t\\\n+     N_(\"Prefer word accesses over byte accesses\") },\t\t\t\\\n+  {\"no-slow-bytes\",       - SLOW_BYTES_BIT,\t\t\t\t\\\n+     \"\" },\t\t\t\t\t\t\t\t\\\n+  { \"no-lsim\",              0, \"\" },\t\t\t \t\t\\\n+  {\"little-endian\",         LITTLE_END_BIT,\t\t\t\t\\\n+     N_(\"Generate little endian code\") },\t\t\t\t\\\n+  {\"big-endian\",          - LITTLE_END_BIT,\t\t\t\t\\\n+     \"\" },\t\t\t\t\t\t\t\t\\\n+  {\"210\",                 - M340_BIT,\t\t\t\t\t\\\n+     \"\" },\t\t\t\t\t\t\t\t\\\n+  {\"340\",                   M340_BIT,\t\t\t\t\t\\\n+     N_(\"Generate code for the M*Core M340\") },\t\t\t\t\\\n+  {\"\",   \t            TARGET_DEFAULT,\t\t\t\t\\\n+     \"\" }\t\t\t\t\t\t\t\t\\\n }\n \n extern char * mcore_current_function_name;\n  \n /* Target specific options (as opposed to the switches above).  */\n extern const char * mcore_stack_increment_string;\n \n-#define\tTARGET_OPTIONS\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  {\"stack-increment=\", & mcore_stack_increment_string,\t\t\\\n-     \"Maximum amount for a single stack increment operation\"}\t\\\n+#define\tTARGET_OPTIONS\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  {\"stack-increment=\", & mcore_stack_increment_string,\t\t\t\\\n+     N_(\"Maximum amount for a single stack increment operation\")}\t\\\n }\n \n /* The MCore ABI says that bitfields are unsigned by default. */"}, {"sha": "b08099dd4bab4ba32849e2c86fa961d832a97498", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -330,109 +330,109 @@ extern void\t\tsbss_section PARAMS ((void));\n #define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   {\"no-crt0\",          0,                                               \\\n-     \"No default crt0.o\" },\t\t\t\t\t \t\\\n+     N_(\"No default crt0.o\") },\t\t\t\t\t \t\\\n   {\"int64\",\t\t  MASK_INT64 | MASK_LONG64,\t\t\t\\\n-     \"Use 64-bit int type\"},\t\t\t\t\t\t\\\n+     N_(\"Use 64-bit int type\")},\t\t\t\t\t\\\n   {\"long64\",\t\t  MASK_LONG64,\t\t\t\t\t\\\n-     \"Use 64-bit long type\"},\t\t\t\t\t\t\\\n+     N_(\"Use 64-bit long type\")},\t\t\t\t\t\\\n   {\"long32\",\t\t -(MASK_LONG64 | MASK_INT64),\t\t\t\\\n-     \"Use 32-bit long type\"},\t\t\t\t\t\t\\\n+     N_(\"Use 32-bit long type\")},\t\t\t\t\t\\\n   {\"split-addresses\",\t  MASK_SPLIT_ADDR,\t\t\t\t\\\n-     \"Optimize lui/addiu address loads\"},\t\t\t\t\\\n+     N_(\"Optimize lui/addiu address loads\")},\t\t\t\t\\\n   {\"no-split-addresses\", -MASK_SPLIT_ADDR,\t\t\t\t\\\n-     \"Don't optimize lui/addiu address loads\"},\t\t\t\t\\\n+     N_(\"Don't optimize lui/addiu address loads\")},\t\t\t\\\n   {\"mips-as\",\t\t -MASK_GAS,\t\t\t\t\t\\\n-     \"Use MIPS as\"},\t\t\t\t\t\t\t\\\n+     N_(\"Use MIPS as\")},\t\t\t\t\t\t\\\n   {\"gas\",\t\t  MASK_GAS,\t\t\t\t\t\\\n-     \"Use GNU as\"},\t\t\t\t\t\t\t\\\n+     N_(\"Use GNU as\")},\t\t\t\t\t\t\t\\\n   {\"rnames\",\t\t  MASK_NAME_REGS,\t\t\t\t\\\n-     \"Use symbolic register names\"},\t\t\t\t\t\\\n+     N_(\"Use symbolic register names\")},\t\t\t\t\\\n   {\"no-rnames\",\t\t -MASK_NAME_REGS,\t\t\t\t\\\n-     \"Don't use symbolic register names\"},\t\t\t\t\\\n+     N_(\"Don't use symbolic register names\")},\t\t\t\t\\\n   {\"gpOPT\",\t\t  MASK_GPOPT,\t\t\t\t\t\\\n-     \"Use GP relative sdata/sbss sections\"},\t\t\t\t\\\n+     N_(\"Use GP relative sdata/sbss sections\")},\t\t\t\\\n   {\"gpopt\",\t\t  MASK_GPOPT,\t\t\t\t\t\\\n-     \"Use GP relative sdata/sbss sections\"},\t\t\t\t\\\n+     N_(\"Use GP relative sdata/sbss sections\")},\t\t\t\\\n   {\"no-gpOPT\",\t\t -MASK_GPOPT,\t\t\t\t\t\\\n-     \"Don't use GP relative sdata/sbss sections\"},\t\t\t\\\n+     N_(\"Don't use GP relative sdata/sbss sections\")},\t\t\t\\\n   {\"no-gpopt\",\t\t -MASK_GPOPT,\t\t\t\t\t\\\n-     \"Don't use GP relative sdata/sbss sections\"},\t\t\t\\\n+     N_(\"Don't use GP relative sdata/sbss sections\")},\t\t\t\\\n   {\"stats\",\t\t  MASK_STATS,\t\t\t\t\t\\\n-     \"Output compiler statistics\"},\t\t\t\t\t\\\n+     N_(\"Output compiler statistics\")},\t\t\t\t\t\\\n   {\"no-stats\",\t\t -MASK_STATS,\t\t\t\t\t\\\n-     \"Don't output compiler statistics\"},\t\t\t\t\\\n+     N_(\"Don't output compiler statistics\")},\t\t\t\t\\\n   {\"memcpy\",\t\t  MASK_MEMCPY,\t\t\t\t\t\\\n-     \"Don't optimize block moves\"},\t\t\t\t\t\\\n+     N_(\"Don't optimize block moves\")},\t\t\t\t\t\\\n   {\"no-memcpy\",\t\t -MASK_MEMCPY,\t\t\t\t\t\\\n-     \"Optimize block moves\"},\t\t\t\t\t\t\\\n+     N_(\"Optimize block moves\")},\t\t\t\t\t\\\n   {\"mips-tfile\",\t  MASK_MIPS_TFILE,\t\t\t\t\\\n-     \"Use mips-tfile asm postpass\"},\t\t\t\t\t\\\n+     N_(\"Use mips-tfile asm postpass\")},\t\t\t\t\\\n   {\"no-mips-tfile\",\t -MASK_MIPS_TFILE,\t\t\t\t\\\n-     \"Don't use mips-tfile asm postpass\"},\t\t\t\t\\\n+     N_(\"Don't use mips-tfile asm postpass\")},\t\t\t\t\\\n   {\"soft-float\",\t  MASK_SOFT_FLOAT,\t\t\t\t\\\n-     \"Use software floating point\"},\t\t\t\t\t\\\n+     N_(\"Use software floating point\")},\t\t\t\t\\\n   {\"hard-float\",\t -MASK_SOFT_FLOAT,\t\t\t\t\\\n-     \"Use hardware floating point\"},\t\t\t\t\t\\\n+     N_(\"Use hardware floating point\")},\t\t\t\t\\\n   {\"fp64\",\t\t  MASK_FLOAT64,\t\t\t\t\t\\\n-     \"Use 64-bit FP registers\"},\t\t\t\t\t\\\n+     N_(\"Use 64-bit FP registers\")},\t\t\t\t\t\\\n   {\"fp32\",\t\t -MASK_FLOAT64,\t\t\t\t\t\\\n-     \"Use 32-bit FP registers\"},\t\t\t\t\t\\\n+     N_(\"Use 32-bit FP registers\")},\t\t\t\t\t\\\n   {\"gp64\",\t\t  MASK_64BIT,\t\t\t\t\t\\\n-     \"Use 64-bit general registers\"},\t\t\t\t\t\\\n+     N_(\"Use 64-bit general registers\")},\t\t\t\t\\\n   {\"gp32\",\t\t -MASK_64BIT,\t\t\t\t\t\\\n-     \"Use 32-bit general registers\"},\t\t\t\t\t\\\n+     N_(\"Use 32-bit general registers\")},\t\t\t\t\\\n   {\"abicalls\",\t\t  MASK_ABICALLS,\t\t\t\t\\\n-     \"Use Irix PIC\"},\t\t\t\t\t\t\t\\\n+     N_(\"Use Irix PIC\")},\t\t\t\t\t\t\\\n   {\"no-abicalls\",\t -MASK_ABICALLS,\t\t\t\t\\\n-     \"Don't use Irix PIC\"},\t\t\t\t\t\t\\\n+     N_(\"Don't use Irix PIC\")},\t\t\t\t\t\t\\\n   {\"half-pic\",\t\t  MASK_HALF_PIC,\t\t\t\t\\\n-     \"Use OSF PIC\"},\t\t\t\t\t\t\t\\\n+     N_(\"Use OSF PIC\")},\t\t\t\t\t\t\\\n   {\"no-half-pic\",\t -MASK_HALF_PIC,\t\t\t\t\\\n-     \"Don't use OSF PIC\"},\t\t\t\t\t\t\\\n+     N_(\"Don't use OSF PIC\")},\t\t\t\t\t\t\\\n   {\"long-calls\",\t  MASK_LONG_CALLS,\t\t\t\t\\\n-     \"Use indirect calls\"},\t\t\t\t\t\t\\\n+     N_(\"Use indirect calls\")},\t\t\t\t\t\t\\\n   {\"no-long-calls\",\t -MASK_LONG_CALLS,\t\t\t\t\\\n-     \"Don't use indirect calls\"},\t\t\t\t\t\\\n+     N_(\"Don't use indirect calls\")},\t\t\t\t\t\\\n   {\"embedded-pic\",\t  MASK_EMBEDDED_PIC,\t\t\t\t\\\n-     \"Use embedded PIC\"},\t\t\t\t\t\t\\\n+     N_(\"Use embedded PIC\")},\t\t\t\t\t\t\\\n   {\"no-embedded-pic\",\t -MASK_EMBEDDED_PIC,\t\t\t\t\\\n-     \"Don't use embedded PIC\"},\t\t\t\t\t\t\\\n+     N_(\"Don't use embedded PIC\")},\t\t\t\t\t\\\n   {\"embedded-data\",\t  MASK_EMBEDDED_DATA,\t\t\t\t\\\n-     \"Use ROM instead of RAM\"},\t\t\t\t\t\t\\\n+     N_(\"Use ROM instead of RAM\")},\t\t\t\t\t\\\n   {\"no-embedded-data\",\t -MASK_EMBEDDED_DATA,\t\t\t\t\\\n-     \"Don't use ROM instead of RAM\"},\t\t\t\t\t\\\n+     N_(\"Don't use ROM instead of RAM\")},\t\t\t\t\\\n   {\"uninit-const-in-rodata\", MASK_UNINIT_CONST_IN_RODATA,\t\t\\\n-     \"Put uninitialized constants in ROM (needs -membedded-data)\"},\t\\\n+     N_(\"Put uninitialized constants in ROM (needs -membedded-data)\")},\t\\\n   {\"no-uninit-const-in-rodata\", -MASK_UNINIT_CONST_IN_RODATA,\t\t\\\n-     \"Don't put uninitialized constants in ROM\"},\t\t\t\\\n+     N_(\"Don't put uninitialized constants in ROM\")},\t\t\t\\\n   {\"eb\",\t\t  MASK_BIG_ENDIAN,\t\t\t\t\\\n-     \"Use big-endian byte order\"},\t\t\t\t\t\\\n+     N_(\"Use big-endian byte order\")},\t\t\t\t\t\\\n   {\"el\",\t\t -MASK_BIG_ENDIAN,\t\t\t\t\\\n-     \"Use little-endian byte order\"},\t\t\t\t\t\\\n+     N_(\"Use little-endian byte order\")},\t\t\t\t\\\n   {\"single-float\",\t  MASK_SINGLE_FLOAT,\t\t\t\t\\\n-     \"Use single (32-bit) FP only\"},\t\t\t\t\t\\\n+     N_(\"Use single (32-bit) FP only\")},\t\t\t\t\\\n   {\"double-float\",\t -MASK_SINGLE_FLOAT,\t\t\t\t\\\n-     \"Don't use single (32-bit) FP only\"},\t\t\t\t\\\n+     N_(\"Don't use single (32-bit) FP only\")},\t\t\t\t\\\n   {\"mad\",\t\t  MASK_MAD,\t\t\t\t\t\\\n-     \"Use multiply accumulate\"},\t\t\t\t\t\\\n+     N_(\"Use multiply accumulate\")},\t\t\t\t\t\\\n   {\"no-mad\",\t\t -MASK_MAD,\t\t\t\t\t\\\n-     \"Don't use multiply accumulate\"},\t\t\t\t\t\\\n+     N_(\"Don't use multiply accumulate\")},\t\t\t\t\\\n   {\"fix4300\",             MASK_4300_MUL_FIX,\t\t\t\t\\\n-     \"Work around early 4300 hardware bug\"},\t\t\t\t\\\n+     N_(\"Work around early 4300 hardware bug\")},\t\t\t\\\n   {\"no-fix4300\",         -MASK_4300_MUL_FIX,\t\t\t\t\\\n-     \"Don't work around early 4300 hardware bug\"},\t\t\t\\\n+     N_(\"Don't work around early 4300 hardware bug\")},\t\t\t\\\n   {\"4650\",\t\t  MASK_MAD | MASK_SINGLE_FLOAT,\t\t\t\\\n-     \"Optimize for 4650\"},\t\t\t\t\t\t\\\n+     N_(\"Optimize for 4650\")},\t\t\t\t\t\t\\\n   {\"3900\",\t\t  MASK_MIPS3900,\t\t\t\t\\\n-     \"Optimize for 3900\"},\t\t\t\t\t\t\\\n+     N_(\"Optimize for 3900\")},\t\t\t\t\t\t\\\n   {\"check-zero-division\",-MASK_NO_CHECK_ZERO_DIV,\t\t\t\\\n-     \"Trap on integer divide by zero\"},\t\t\t\t\t\\\n+     N_(\"Trap on integer divide by zero\")},\t\t\t\t\\\n   {\"no-check-zero-division\", MASK_NO_CHECK_ZERO_DIV,\t\t\t\\\n-     \"Don't trap on integer divide by zero\"},\t\t\t\t\\\n+     N_(\"Don't trap on integer divide by zero\")},\t\t\t\\\n   {\"check-range-division\",MASK_CHECK_RANGE_DIV,\t\t\t\t\\\n-     \"Trap on integer divide overflow\"},\t\t\t\t\\\n+     N_(\"Trap on integer divide overflow\")},\t\t\t\t\\\n   {\"no-check-range-division\",-MASK_CHECK_RANGE_DIV,\t\t\t\\\n-     \"Don't trap on integer divide overflow\"},\t\t\t\t\\\n+     N_(\"Don't trap on integer divide overflow\")},\t\t\t\\\n   {\"debug\",\t\t  MASK_DEBUG,\t\t\t\t\t\\\n      NULL},\t\t\t\t\t\t\t\t\\\n   {\"debuga\",\t\t  MASK_DEBUG_A,\t\t\t\t\t\\\n@@ -551,13 +551,13 @@ extern void\t\tsbss_section PARAMS ((void));\n {\t\t\t\t\t\t\t\t\t\\\n   SUBTARGET_TARGET_OPTIONS\t\t\t\t\t\t\\\n   { \"cpu=\",\t&mips_cpu_string,\t\t\t\t\t\\\n-      \"Specify CPU for scheduling purposes\"},\t\t\t\t\\\n+      N_(\"Specify CPU for scheduling purposes\")},\t\t\t\\\n   { \"ips\",\t&mips_isa_string,\t\t\t\t\t\\\n-      \"Specify MIPS ISA\"},\t\t\t\t\t\t\\\n+      N_(\"Specify MIPS ISA\")},\t\t\t\t\t\t\\\n   { \"entry\",\t&mips_entry_string,\t\t\t\t\t\\\n-      \"Use mips16 entry/exit psuedo ops\"},\t\t\t\t\\\n+      N_(\"Use mips16 entry/exit psuedo ops\")},\t\t\t\t\\\n   { \"no-mips16\", &mips_no_mips16_string,\t\t\t\t\\\n-      \"Don't use MIPS16 instructions\"},\t\t\t\t\t\\\n+      N_(\"Don't use MIPS16 instructions\")},\t\t\t\t\\\n   { \"explicit-type-size\", &mips_explicit_type_size_string,\t\t\\\n       NULL},\t\t\t\t\t\t\t\t\\\n }"}, {"sha": "2e20ee1f55bcb1a95456e8d4ee3bafef281eb09b", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -53,11 +53,11 @@ extern int target_flags;\n #define TARGET_AM33\t\t\t(target_flags & 0x2)\n \n #define TARGET_SWITCHES  \\\n-  {{ \"mult-bug\",\t0x1,  \"Work around hardware multiply bug\"},\t\\\n-   { \"no-mult-bug\", \t-0x1, \"Do not work around hardware multiply bug\"},\\\n-   { \"am33\", \t\t0x2},\t\\\n-   { \"am33\", \t\t-(0x1)},\\\n-   { \"no-am33\", \t-0x2},\t\\\n+  {{ \"mult-bug\",\t0x1,  N_(\"Work around hardware multiply bug\")},\t\\\n+   { \"no-mult-bug\", \t-0x1, N_(\"Do not work around hardware multiply bug\")},\\\n+   { \"am33\", \t\t0x2,  0},\t\\\n+   { \"am33\", \t\t-(0x1), 0},\\\n+   { \"no-am33\", \t-0x2, 0},\t\\\n    { \"\", TARGET_DEFAULT, NULL}}\n \n #ifndef TARGET_DEFAULT"}, {"sha": "352acaee63937bbdb7feef7c5ba8beb489ee62ea", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -99,28 +99,30 @@ extern int target_flags;\n    where VALUE is the bits to set or minus the bits to clear.\n    An empty string NAME is used to identify the default VALUE.  */\n \n-#define TARGET_SWITCHES\t\t\t\t\t\t\t      \\\n-  { { \"32081\", 1, \"Use hardware fp\"},\t\t\t\t\t      \\\n-    { \"soft-float\", -257, \"Don't use hardware fp\"},\t\t\t      \\\n-    { \"rtd\", 2, \"Alternative calling convention\"},\t\t\t      \\\n-    { \"nortd\", -2, \"Use normal calling convention\"},\t\t\t      \\\n-    { \"regparm\", 4, \"Pass some arguments in registers\"},\t\t      \\\n-    { \"noregparm\", -4, \"Pass all arguments on stack\"},\t\t\t      \\\n-    { \"32532\", 24, \"Optimize for 32532 cpu\"},\t\t\t\t      \\\n-    { \"32332\", 16, \"Optimize for 32332 cpu\"},\t\t\t\t      \\\n-    { \"32332\", -8, 0},\t\t\t\t\t\t\t      \\\n-    { \"32032\", -24, \"Optimize for 32032\"},\t\t\t\t      \\\n-    { \"sb\", -32, \"Register sb is zero. Use for absolute addressing\"},\t      \\\n-    { \"nosb\", 32, \"Do not use register sb\"},\t\t\t\t      \\\n-    { \"bitfield\", -64, \"Do not use bitfield instructions\"},\t\t      \\\n-    { \"nobitfield\", 64, \"Use bitfield instructions\"},\t\t\t      \\\n-    { \"himem\", 128, \"Generate code for high memory\"},\t\t\t      \\\n-    { \"nohimem\", -128, \"Generate code for low memory\"},\t\t\t      \\\n-    { \"32381\", 256, \"32381 fpu\"},\t\t\t\t\t      \\\n-    { \"mult-add\", 512, \"Use multiply-accumulate fp instructions\"},\t      \\\n-    { \"nomult-add\", -512, \"Do not use multiply-accumulate fp instructions\" }, \\\n-    { \"src\", 1024, \"\\\"Small register classes\\\" kludge\"},\t\t      \\\n-    { \"nosrc\", -1024, \"No \\\"Small register classes\\\" kludge\"},\t\t      \\\n+#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n+  { { \"32081\", 1, N_(\"Use hardware fp\")},\t\t\t\t\\\n+    { \"soft-float\", -257, N_(\"Don't use hardware fp\")},\t\t\t\\\n+    { \"rtd\", 2, N_(\"Alternative calling convention\")},\t\t\t\\\n+    { \"nortd\", -2, N_(\"Use normal calling convention\")},\t\t\\\n+    { \"regparm\", 4, N_(\"Pass some arguments in registers\")},\t\t\\\n+    { \"noregparm\", -4, N_(\"Pass all arguments on stack\")},\t\t\\\n+    { \"32532\", 24, N_(\"Optimize for 32532 cpu\")},\t\t\t\\\n+    { \"32332\", 16, N_(\"Optimize for 32332 cpu\")},\t\t\t\\\n+    { \"32332\", -8, 0},\t\t\t\t\t\t\t\\\n+    { \"32032\", -24, N_(\"Optimize for 32032\")},\t\t\t\t\\\n+    { \"sb\", -32,\t\t\t\t\t\t\t\\\n+      N_(\"Register sb is zero. Use for absolute addressing\")},\t\t\\\n+    { \"nosb\", 32, N_(\"Do not use register sb\")},\t\t\t\\\n+    { \"bitfield\", -64, N_(\"Do not use bitfield instructions\")},\t\t\\\n+    { \"nobitfield\", 64, N_(\"Use bitfield instructions\")},\t\t\\\n+    { \"himem\", 128, N_(\"Generate code for high memory\")},\t\t\\\n+    { \"nohimem\", -128, N_(\"Generate code for low memory\")},\t\t\\\n+    { \"32381\", 256, N_(\"32381 fpu\")},\t\t\t\t\t\\\n+    { \"mult-add\", 512, N_(\"Use multiply-accumulate fp instructions\")},\t\\\n+    { \"nomult-add\", -512,\t\t\t\t\t\t\\\n+      N_(\"Do not use multiply-accumulate fp instructions\") }, \t\t\\\n+    { \"src\", 1024, N_(\"\\\"Small register classes\\\" kludge\")},\t\t\\\n+    { \"nosrc\", -1024, N_(\"No \\\"Small register classes\\\" kludge\")},\t\\\n     { \"\", TARGET_DEFAULT, 0}}\n \n /* TARGET_DEFAULT is defined in encore.h, pc532.h, etc.  */"}, {"sha": "c670a99f048f5828a258e738d6ad741a60a17dc6", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -51,45 +51,45 @@ extern int target_flags;\n    An empty string NAME is used to identify the default VALUE.  */\n \n #define TARGET_SWITCHES  \\\n-{   { \"fpu\", 1, \"Use hardware floating point\" },\t\t\\\n-    { \"soft-float\", -1, \"Do not use hardware floating point\" }, \\\n-/* return float result in ac0 */\t\t\t\t\\\n-    { \"ac0\", 2, \"Return floating point results in ac0\" },\t\\\n-    { \"no-ac0\", -2, \"Return floating point results in memory\" },\\\n-/* is 11/40 */\t\t\t\t\t\t\t\\\n-    { \"40\", 4, \"Generate code for an 11/40\" },\t\t\t\\\n-    { \"no-40\", -4, \"\" },\t\t\t\t\t\\\n-/* is 11/45 */\t\t\t\t\t\t\t\\\n-    { \"45\", 8, \"Generate code for an 11/45\" },\t\t\t\\\n-    { \"no-45\", -8, \"\" },\t\t\t\t\t\\\n-/* is 11/10 */\t\t\t\t\t\t\t\\\n-    { \"10\", -12, \"Generate code for an 11/10\" },\t\t\\\n-/* use movstrhi for bcopy */\t\t\t\t\t\\\n-    { \"bcopy\", 16, NULL },\t\t\t\t\t\\\n-    { \"bcopy-builtin\", -16, NULL },\t\t\t\t\\\n-/* use 32 bit for int */\t\t\t\t\t\\\n-    { \"int32\", 32, \"Use 32 bit int\" },\t\t\t\t\\\n-    { \"no-int16\", 32, \"Use 32 bit int\" },\t\t\t\\\n-    { \"int16\", -32, \"Use 16 bit int\" },\t\t\t\t\\\n-    { \"no-int32\", -32, \"Use 16 bit int\" },\t\t\t\\\n-/* use 32 bit for float */\t\t\t\t\t\\\n-    { \"float32\", 64, \"Use 32 bit float\" },\t\t\t\\\n-    { \"no-float64\", 64, \"Use 32 bit float\" },\t\t\t\\\n-    { \"float64\", -64, \"Use 64 bit float\" },\t\t\t\\\n-    { \"no-float32\", -64, \"Use 64 bit float\" },\t\t\t\\\n+{   { \"fpu\", 1, N_(\"Use hardware floating point\") },\t\t\t\\\n+    { \"soft-float\", -1, N_(\"Do not use hardware floating point\") },\t\\\n+/* return float result in ac0 */\t\t\t\t\t\\\n+    { \"ac0\", 2, N_(\"Return floating point results in ac0\") },\t\t\\\n+    { \"no-ac0\", -2, N_(\"Return floating point results in memory\") },\t\\\n+/* is 11/40 */\t\t\t\t\t\t\t\t\\\n+    { \"40\", 4, N_(\"Generate code for an 11/40\") },\t\t\t\\\n+    { \"no-40\", -4, \"\" },\t\t\t\t\t\t\\\n+/* is 11/45 */\t\t\t\t\t\t\t\t\\\n+    { \"45\", 8, N_(\"Generate code for an 11/45\") },\t\t\t\\\n+    { \"no-45\", -8, \"\" },\t\t\t\t\t\t\\\n+/* is 11/10 */\t\t\t\t\t\t\t\t\\\n+    { \"10\", -12, N_(\"Generate code for an 11/10\") },\t\t\t\\\n+/* use movstrhi for bcopy */\t\t\t\t\t\t\\\n+    { \"bcopy\", 16, NULL },\t\t\t\t\t\t\\\n+    { \"bcopy-builtin\", -16, NULL },\t\t\t\t\t\\\n+/* use 32 bit for int */\t\t\t\t\t\t\\\n+    { \"int32\", 32, N_(\"Use 32 bit int\") },\t\t\t\t\\\n+    { \"no-int16\", 32, N_(\"Use 32 bit int\") },\t\t\t\t\\\n+    { \"int16\", -32, N_(\"Use 16 bit int\") },\t\t\t\t\\\n+    { \"no-int32\", -32, N_(\"Use 16 bit int\") },\t\t\t\t\\\n+/* use 32 bit for float */\t\t\t\t\t\t\\\n+    { \"float32\", 64, N_(\"Use 32 bit float\") },\t\t\t\t\\\n+    { \"no-float64\", 64, N_(\"Use 32 bit float\") },\t\t\t\\\n+    { \"float64\", -64, N_(\"Use 64 bit float\") },\t\t\t\t\\\n+    { \"no-float32\", -64, N_(\"Use 64 bit float\") },\t\t\t\\\n /* allow abshi pattern? - can trigger \"optimizations\" which make code SLOW! */\\\n-    { \"abshi\", 128, NULL },\t\t\t\t\t\\\n-    { \"no-abshi\", -128, NULL },\t\t\t\t\t\\\n+    { \"abshi\", 128, NULL },\t\t\t\t\t\t\\\n+    { \"no-abshi\", -128, NULL },\t\t\t\t\t\t\\\n /* is branching expensive - on a PDP, it's actually really cheap */ \\\n /* this is just to play around and check what code gcc generates */ \\\n-    { \"branch-expensive\", 256, NULL }, \t\t\t\t\\\n-    { \"branch-cheap\", -256, NULL },\t\t\t\t\\\n-/* split instruction and data memory? */ \t\t\t\\\n-    { \"split\", 1024, \"Target has split I&D\" },\t\t\t\\\n-    { \"no-split\", -1024, \"Target does not have split I&D\" },\t\\\n-/* UNIX assembler syntax?  */\t\t\t\t\t\\\n-    { \"unix-asm\", 2048, \"Use UNIX assembler syntax\" },\t\t\\\n-    { \"dec-asm\", -2048, \"Use DEC assembler syntax\" },\t\t\\\n+    { \"branch-expensive\", 256, NULL }, \t\t\t\t\t\\\n+    { \"branch-cheap\", -256, NULL },\t\t\t\t\t\\\n+/* split instruction and data memory? */ \t\t\t\t\\\n+    { \"split\", 1024, N_(\"Target has split I&D\") },\t\t\t\\\n+    { \"no-split\", -1024, N_(\"Target does not have split I&D\") },\t\\\n+/* UNIX assembler syntax?  */\t\t\t\t\t\t\\\n+    { \"unix-asm\", 2048, N_(\"Use UNIX assembler syntax\") },\t\t\\\n+    { \"dec-asm\", -2048, N_(\"Use DEC assembler syntax\") },\t\t\\\n /* default */\t\t\t\\\n     { \"\", TARGET_DEFAULT, NULL}\t\\\n }"}, {"sha": "b11b706e1d826dfe393bf7ce2b198cda1d391a2b", "filename": "gcc/config/pj/pj.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fpj%2Fpj.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fpj%2Fpj.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -69,12 +69,18 @@ extern int target_flags;\n #endif\n \n #define TARGET_SWITCHES  \\\n-{ {\"l\",         LITTLE_ENDIAN_BIT, \"Generate little endian data\"           }, \\\n-  {\"b\",        -LITTLE_ENDIAN_BIT, \"Generate big endian data\"              }, \\\n-  {\"t\",         PJ_TEST_BIT,       \"Turn on maintainer testing code\"       }, \\\n-  {\"ext\",       EXTENSIONS_BIT,    \"Enable Transmeta picoJava extensions\"  }, \\\n-  {\"no-ext\",   -EXTENSIONS_BIT,    \"Disable Transmeta picoJava extensions\" }, \\\n-  {\"no-reorg\", -REORG_BIT,         \"Disable reorganization pass\"           }, \\\n+{ {\"l\",         LITTLE_ENDIAN_BIT,\t\t\t\\\n+   N_(\"Generate little endian data\")           },\t\\\n+  {\"b\",        -LITTLE_ENDIAN_BIT,\t\t\t\\\n+   N_(\"Generate big endian data\")              },\t\\\n+  {\"t\",         PJ_TEST_BIT,\t\t\t\t\\\n+   N_(\"Turn on maintainer testing code\")       },\t\\\n+  {\"ext\",       EXTENSIONS_BIT,\t\t\t\t\\\n+   N_(\"Enable Transmeta picoJava extensions\")  },\t\\\n+  {\"no-ext\",   -EXTENSIONS_BIT,\t\t\t\t\\\n+   N_(\"Disable Transmeta picoJava extensions\") },\t\\\n+  {\"no-reorg\", -REORG_BIT,\t\t\t\t\\\n+   N_(\"Disable reorganization pass\")           },\t\\\n   {\"\",          TARGET_DEFAULT,    0 }}\n \n /* Sometimes certain combinations of command options do not make"}, {"sha": "0487863212a627845fc422031384ab1d09e91333", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -251,9 +251,9 @@ toc_section ()\t\t\t\t\t\t\\\n #undef  SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES\t\t\\\n   {\"xl-call\", \t\tMASK_XL_CALL,\t\t\t\t\t\\\n-   \"Always pass floating-point arguments in memory\" },\t\t\t\\\n+   N_(\"Always pass floating-point arguments in memory\") },\t\t\\\n   {\"no-xl-call\",\t- MASK_XL_CALL,\t\t\t\t\t\\\n-   \"Don't always pass floating-point arguments in memory\" },\t\t\\\n+   N_(\"Don't always pass floating-point arguments in memory\") },\t\\\n   SUBSUBTARGET_SWITCHES\n #define SUBSUBTARGET_SWITCHES \n "}, {"sha": "eb2c3fd3fd2cc068584ee3cc8dda99d8f48d5338", "filename": "gcc/config/rs6000/aix41.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Frs6000%2Faix41.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Frs6000%2Faix41.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix41.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -28,7 +28,7 @@ Boston, MA 02111-1307, USA.  */\n #undef  SUBSUBTARGET_SWITCHES\n #define SUBSUBTARGET_SWITCHES\t\t\\\n   {\"pe\",\t\t0,\t\t\t\t\t\\\n-   \"Support message passing with the Parallel Environment\" },\n+   N_(\"Support message passing with the Parallel Environment\") },\n \n #undef ASM_SPEC\n #define ASM_SPEC \"-u %(asm_cpu)\""}, {"sha": "a9114b5acd007a837b0df33ce3a8b9ce52b0e4c5", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -28,11 +28,11 @@ Boston, MA 02111-1307, USA.  */\n #undef  SUBSUBTARGET_SWITCHES\n #define SUBSUBTARGET_SWITCHES\t\t\t\t\t\\\n   {\"aix64\", \t\tMASK_64BIT | MASK_POWERPC64 | MASK_POWERPC,\t\\\n-   \"Compile for 64-bit pointers\" },\t\t\t\t\t\\\n+   N_(\"Compile for 64-bit pointers\") },\t\t\t\t\t\\\n   {\"aix32\",\t\t- (MASK_64BIT | MASK_POWERPC64),\t\t\\\n-   \"Compile for 32-bit pointers\" },\t\t\t\t\t\\\n+   N_(\"Compile for 32-bit pointers\") },\t\t\t\t\t\\\n   {\"pe\",\t\t0,\t\t\t\t\t\t\\\n-   \"Support message passing with the Parallel Environment\" },\n+   N_(\"Support message passing with the Parallel Environment\") },\n \n /* Sometimes certain combinations of command options do not make sense\n    on a particular target machine.  You can define a macro"}, {"sha": "8d850e25257328887c114499e764e202b4a365b8", "filename": "gcc/config/rs6000/beos.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Frs6000%2Fbeos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Frs6000%2Fbeos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fbeos.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -29,9 +29,11 @@ Boston, MA 02111-1307, USA.  */\n #define\tTARGET_XL_CALL\t\t(target_flags & MASK_XL_CALL)\n #undef  SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES\t\t\\\n-  {\"xl-call\", \t\tMASK_XL_CALL},\t\\\n-  {\"no-xl-call\",\t- MASK_XL_CALL}, \\\n-  {\"threads\",\t\t0},\t\t\\\n+  {\"xl-call\", \t\tMASK_XL_CALL,\t\t\t\t\t\\\n+   N_(\"Always pass floating-point arguments in memory\") },\t\t\\\n+  {\"no-xl-call\",\t- MASK_XL_CALL,\t\t\t\t\t\\\n+   N_(\"Don't always pass floating-point arguments in memory\") },\t\\\n+  {\"threads\",\t\t0},\t\t\t\t\t\t\\\n   {\"pe\",\t\t0},\n \n #undef ASM_SPEC"}, {"sha": "375d379f5cd6f750c6a9cb5676ed59cd536aa286", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -253,81 +253,81 @@ extern int target_flags;\n \n #define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n  {{\"power\",\t\tMASK_POWER  | MASK_MULTIPLE | MASK_STRING,\t\\\n-\t\t\t\"Use POWER instruction set\"},\t\t\t\\\n+\t\t\tN_(\"Use POWER instruction set\")},\t\t\\\n   {\"power2\",\t\t(MASK_POWER | MASK_MULTIPLE | MASK_STRING\t\\\n \t\t\t | MASK_POWER2),\t\t\t\t\\\n-\t\t\t\"Use POWER2 instruction set\"},\t\t\t\\\n+\t\t\tN_(\"Use POWER2 instruction set\")},\t\t\\\n   {\"no-power2\",\t\t- MASK_POWER2,\t\t\t\t\t\\\n-\t\t\t\"Do not use POWER2 instruction set\"},\t\t\\\n+\t\t\tN_(\"Do not use POWER2 instruction set\")},\t\\\n   {\"no-power\",\t\t- (MASK_POWER | MASK_POWER2 | MASK_MULTIPLE\t\\\n \t\t\t   | MASK_STRING),\t\t\t\t\\\n-\t\t\t\"Do not use POWER instruction set\"},\t\t\\\n+\t\t\tN_(\"Do not use POWER instruction set\")},\t\\\n   {\"powerpc\",\t\tMASK_POWERPC,\t\t\t\t\t\\\n-\t\t\t\"Use PowerPC instruction set\"},\t\t\t\\\n+\t\t\tN_(\"Use PowerPC instruction set\")},\t\t\\\n   {\"no-powerpc\",\t- (MASK_POWERPC | MASK_PPC_GPOPT\t\t\\\n \t\t\t   | MASK_PPC_GFXOPT | MASK_POWERPC64),\t\t\\\n-\t\t\t\"Do not use PowerPC instruction set\"},\t\t\\\n+\t\t\tN_(\"Do not use PowerPC instruction set\")},\t\\\n   {\"powerpc-gpopt\",\tMASK_POWERPC | MASK_PPC_GPOPT,\t\t\t\\\n-\t\t\t\"Use PowerPC General Purpose group optional instructions\"},\\\n+\t\t\tN_(\"Use PowerPC General Purpose group optional instructions\")},\\\n   {\"no-powerpc-gpopt\",\t- MASK_PPC_GPOPT,\t\t\t\t\\\n-\t\t\t\"Don't use PowerPC General Purpose group optional instructions\"},\\\n+\t\t\tN_(\"Don't use PowerPC General Purpose group optional instructions\")},\\\n   {\"powerpc-gfxopt\",\tMASK_POWERPC | MASK_PPC_GFXOPT,\t\t\t\\\n-\t\t\t\"Use PowerPC Graphics group optional instructions\"},\\\n+\t\t\tN_(\"Use PowerPC Graphics group optional instructions\")},\\\n   {\"no-powerpc-gfxopt\",\t- MASK_PPC_GFXOPT,\t\t\t\t\\\n-\t\t\t\"Don't use PowerPC Graphics group optional instructions\"},\\\n+\t\t\tN_(\"Don't use PowerPC Graphics group optional instructions\")},\\\n   {\"powerpc64\",\t\tMASK_POWERPC64,\t\t\t\t\t\\\n-\t\t\t\"Use PowerPC-64 instruction set\"},\t\t\\\n+\t\t\tN_(\"Use PowerPC-64 instruction set\")},\t\t\\\n   {\"no-powerpc64\",\t- MASK_POWERPC64,\t\t\t\t\\\n-\t\t\t\"Don't use PowerPC-64 instruction set\"},\t\\\n+\t\t\tN_(\"Don't use PowerPC-64 instruction set\")},\t\\\n   {\"new-mnemonics\",\tMASK_NEW_MNEMONICS,\t\t\t\t\\\n-\t\t\t\"Use new mnemonics for PowerPC architecture\"},\t\\\n+\t\t\tN_(\"Use new mnemonics for PowerPC architecture\")},\\\n   {\"old-mnemonics\",\t-MASK_NEW_MNEMONICS,\t\t\t\t\\\n-\t\t\t\"Use old mnemonics for PowerPC architecture\"},\t\\\n+\t\t\tN_(\"Use old mnemonics for PowerPC architecture\")},\\\n   {\"full-toc\",\t\t- (MASK_NO_FP_IN_TOC | MASK_NO_SUM_IN_TOC\t\\\n \t\t\t   | MASK_MINIMAL_TOC),\t\t\t\t\\\n-\t\t\t\"Put everything in the regular TOC\"},\t\t\\\n+\t\t\tN_(\"Put everything in the regular TOC\")},\t\\\n   {\"fp-in-toc\",\t\t- MASK_NO_FP_IN_TOC,\t\t\t\t\\\n-\t\t\t\"Place floating point constants in TOC\"},\t\\\n+\t\t\tN_(\"Place floating point constants in TOC\")},\t\\\n   {\"no-fp-in-toc\",\tMASK_NO_FP_IN_TOC,\t\t\t\t\\\n-\t\t\t\"Don't place floating point constants in TOC\"},\t\\\n+\t\t\tN_(\"Don't place floating point constants in TOC\")},\\\n   {\"sum-in-toc\",\t- MASK_NO_SUM_IN_TOC,\t\t\t\t\\\n-\t\t\t\"Place symbol+offset constants in TOC\"},\t\\\n+\t\t\tN_(\"Place symbol+offset constants in TOC\")},\t\\\n   {\"no-sum-in-toc\",\tMASK_NO_SUM_IN_TOC,\t\t\t\t\\\n-\t\t\t\"Don't place symbol+offset constants in TOC\"},\t\\\n+\t\t\tN_(\"Don't place symbol+offset constants in TOC\")},\\\n   {\"minimal-toc\",\tMASK_MINIMAL_TOC,\t\t\t\t\\\n \t\t\t\"Use only one TOC entry per procedure\"},\t\\\n   {\"minimal-toc\",\t- (MASK_NO_FP_IN_TOC | MASK_NO_SUM_IN_TOC),\t\\\n-\t\t\t\"\"},\t\t\t\t\\\n+\t\t\t\"\"},\t\t\t\t\t\t\\\n   {\"no-minimal-toc\",\t- MASK_MINIMAL_TOC,\t\t\t\t\\\n-\t\t\t\"Place variable addresses in the regular TOC\"},\t\\\n+\t\t\tN_(\"Place variable addresses in the regular TOC\")},\\\n   {\"hard-float\",\t- MASK_SOFT_FLOAT,\t\t\t\t\\\n-\t\t\t\"Use hardware fp\"},\t\t\t\t\\\n+\t\t\tN_(\"Use hardware fp\")},\t\t\t\t\\\n   {\"soft-float\",\tMASK_SOFT_FLOAT,\t\t\t\t\\\n-\t\t\t\"Do not use hardware fp\"},\t\t\t\\\n+\t\t\tN_(\"Do not use hardware fp\")},\t\t\t\\\n   {\"multiple\",\t\tMASK_MULTIPLE | MASK_MULTIPLE_SET,\t\t\\\n-\t\t\t\"Generate load/store multiple instructions\"},\t\\\n+\t\t\tN_(\"Generate load/store multiple instructions\")},\t\\\n   {\"no-multiple\",\t- MASK_MULTIPLE,\t\t\t\t\\\n-\t\t\t\"Do not generate load/store multiple instructions\"},\\\n+\t\t\tN_(\"Do not generate load/store multiple instructions\")},\\\n   {\"no-multiple\",\tMASK_MULTIPLE_SET,\t\t\t\t\\\n-\t\t\t\"\"},\\\n+\t\t\t\"\"},\t\t\t\t\t\t\\\n   {\"string\",\t\tMASK_STRING | MASK_STRING_SET,\t\t\t\\\n-\t\t\t\"Generate string instructions for block moves\"},\\\n+\t\t\tN_(\"Generate string instructions for block moves\")},\\\n   {\"no-string\",\t\t- MASK_STRING,\t\t\t\t\t\\\n-\t\t\t\"Do not generate string instructions for block moves\"},\\\n+\t\t\tN_(\"Do not generate string instructions for block moves\")},\\\n   {\"no-string\",\t\tMASK_STRING_SET,\t\t\t\t\\\n-\t\t\t\"\"},\\\n+\t\t\t\"\"},\t\t\t\t\t\t\\\n   {\"update\",\t\t- MASK_NO_UPDATE,\t\t\t\t\\\n-\t\t\t\"Generate load/store with update instructions\"},\\\n+\t\t\tN_(\"Generate load/store with update instructions\")},\\\n   {\"no-update\",\t\tMASK_NO_UPDATE,\t\t\t\t\t\\\n-\t\t\t\"Do not generate load/store with update instructions\"},\\\n+\t\t\tN_(\"Do not generate load/store with update instructions\")},\\\n   {\"fused-madd\",\t- MASK_NO_FUSED_MADD,\t\t\t\t\\\n-\t\t\t\"Generate fused multiply/add instructions\"},\t\\\n+\t\t\tN_(\"Generate fused multiply/add instructions\")},\\\n   {\"no-fused-madd\",\tMASK_NO_FUSED_MADD,\t\t\t\t\\\n-\t\t\t\"Don't generate fused multiply/add instructions\"},\\\n+\t\t\tN_(\"Don't generate fused multiply/add instructions\")},\\\n   {\"sched-prolog\",      MASK_SCHED_PROLOG,                              \\\n \t\t\t\"\"},\t\t\t\t\t\t\\\n   {\"no-sched-prolog\",   -MASK_SCHED_PROLOG,                             \\\n-\t\t\t\"Don't schedule the start and end of the procedure\"},\\\n+\t\t\tN_(\"Don't schedule the start and end of the procedure\")},\\\n   {\"sched-epilog\",      MASK_SCHED_PROLOG,                              \\\n \t\t\t\"\"},\t\t\t\t\t\t\\\n   {\"no-sched-epilog\",   -MASK_SCHED_PROLOG,                             \\\n@@ -399,9 +399,11 @@ extern enum processor_type rs6000_cpu;\n \n #define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-   {\"cpu=\",  &rs6000_select[1].string, \"Use features of and schedule code for given CPU\" },\\\n-   {\"tune=\", &rs6000_select[2].string, \"Schedule code for given CPU\" },\t\\\n-   {\"debug=\", &rs6000_debug_name, \"Enable debug output\" },\t\t\\\n+   {\"cpu=\",  &rs6000_select[1].string,\t\t\t\t\t\\\n+    N_(\"Use features of and schedule code for given CPU\") },\t\t\\\n+   {\"tune=\", &rs6000_select[2].string,\t\t\t\t\t\\\n+    N_(\"Schedule code for given CPU\") },\t\t\t\t\\\n+   {\"debug=\", &rs6000_debug_name, N_(\"Enable debug output\") },\t\t\\\n    SUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n }\n "}, {"sha": "85ce2612a81df4081f980b25dc67424dce634cf2", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 55, "deletions": 36, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -87,8 +87,8 @@ extern const char *rs6000_sdata_name;\n /* Override rs6000.h definition.  */\n #undef\tSUBTARGET_OPTIONS\n #define\tSUBTARGET_OPTIONS\t\t\t\t\t\t\\\n-  { \"call-\",  &rs6000_abi_name, \"Select ABI calling convention.\" },\t\t\t\\\n-  { \"sdata=\", &rs6000_sdata_name, \"Select method for sdata handling.\" }\n+  { \"call-\",  &rs6000_abi_name, N_(\"Select ABI calling convention.\") },\t\\\n+  { \"sdata=\", &rs6000_sdata_name, N_(\"Select method for sdata handling.\") }\n \n /* Max # of bytes for variables to automatically be put into the .sdata\n    or .sdata2 sections.  */\n@@ -102,40 +102,59 @@ extern int g_switch_set;\t\t/* Whether -G xx was passed.  */\n /* Override rs6000.h definition.  */\n #undef\tSUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n-  { \"bit-align\",\t-MASK_NO_BITFIELD_TYPE, \"Align to the base type of the bitfield.\" },\\\n-  { \"no-bit-align\",\t MASK_NO_BITFIELD_TYPE, \"Don't align to the base type of the bitfield.\" },\\\n-  { \"strict-align\",\t MASK_STRICT_ALIGN, \"Don't assume that unaligned accesses are handled by the system\" },\\\n-  { \"no-strict-align\",\t-MASK_STRICT_ALIGN, \"Assume that unaligned accesses are handled by the system\" },\\\n-  { \"relocatable\",\t MASK_RELOCATABLE | MASK_MINIMAL_TOC | MASK_NO_FP_IN_TOC, \"Produce code relocatable at runtime.\" },\\\n-  { \"no-relocatable\",\t-MASK_RELOCATABLE, \"Don't produce code relocatable at runtime.\" },\\\n-  { \"relocatable-lib\",\t MASK_RELOCATABLE | MASK_MINIMAL_TOC | MASK_NO_FP_IN_TOC, \"Produce code relocatable at runtime.\" },\\\n-  { \"no-relocatable-lib\", -MASK_RELOCATABLE, \"Don't produce code relocatable at runtime.\" },\\\n-  { \"little-endian\",\t MASK_LITTLE_ENDIAN, \"Produce little endian code.\" },\t\\\n-  { \"little\",\t\t MASK_LITTLE_ENDIAN, \"Produce little endian code.\" },\t\\\n-  { \"big-endian\",\t-MASK_LITTLE_ENDIAN, \"Produce big endian code.\" },\t\\\n-  { \"big\",\t\t-MASK_LITTLE_ENDIAN, \"Produce big endian code.\" },\t\\\n-  { \"no-toc\",\t\t 0, \"no description yet\" },\t\t\t\t\\\n-  { \"toc\",\t\t MASK_MINIMAL_TOC, \"no description yet\" },\t\t\\\n-  { \"full-toc\",\t\t MASK_MINIMAL_TOC, \"no description yet\" },\t\t\\\n-  { \"prototype\",\t MASK_PROTOTYPE, \"no description yet\" },\t\t\\\n-  { \"no-prototype\",\t-MASK_PROTOTYPE, \"no description yet\" },\t\t\\\n-  { \"no-traceback\",\t 0, \"no description yet\" },\t\t\t\t\\\n-  { \"eabi\",\t\t MASK_EABI, \"Use EABI.\" },\t\t\t\t\\\n-  { \"no-eabi\",\t\t-MASK_EABI, \"Don't use EABI.\" },\t\t\t\\\n-  { \"regnames\",\t\t  MASK_REGNAMES, \"Use alternate register names.\" },\t\\\n-  { \"no-regnames\",\t -MASK_REGNAMES, \"Don't use alternate register names.\" },\\\n-  { \"sdata\",\t\t 0, \"no description yet\" },\t\t\t\t\\\n-  { \"no-sdata\",\t\t 0, \"no description yet\" },\t\t\t\t\\\n-  { \"sim\",\t\t 0, \"Link with libsim.a, libc.a and sim-crt0.o.\" },\t\\\n-  { \"ads\",\t\t 0, \"Link with libads.a, libc.a and crt0.o.\" },\t\t\\\n-  { \"yellowknife\",\t 0, \"Link with libyk.a, libc.a and crt0.o.\" },\t\t\\\n-  { \"mvme\",\t\t 0, \"Link with libmvme.a, libc.a and crt0.o.\" },\t\\\n-  { \"emb\",\t\t 0, \"Set the PPC_EMB bit in the ELF flags header\" },\t\\\n-  { \"vxworks\",\t\t 0, \"no description yet\" },\t\t\t\t\\\n-  { \"solaris-cclib\",\t 0, \"no description yet\" },\t\t\t\t\\\n-  { \"shlib\",\t\t 0, \"no description yet\" },\t\t\t\t\\\n-  EXTRA_SUBTARGET_SWITCHES\t\t\t\t\t\t\t\\\n-  { \"newlib\",\t\t 0, \"no description yet\" },\n+  { \"bit-align\",\t-MASK_NO_BITFIELD_TYPE,\t\t\t\t\\\n+    N_(\"Align to the base type of the bitfield.\") },\t\t\t\\\n+  { \"no-bit-align\",\t MASK_NO_BITFIELD_TYPE,\t\t\t\t\\\n+    N_(\"Don't align to the base type of the bitfield.\") },\t\t\\\n+  { \"strict-align\",\t MASK_STRICT_ALIGN,\t\t\t\t\\\n+    N_(\"Don't assume that unaligned accesses are handled by the system\") }, \\\n+  { \"no-strict-align\",\t-MASK_STRICT_ALIGN,\t\t\t\t\\\n+    N_(\"Assume that unaligned accesses are handled by the system\") },\t\\\n+  { \"relocatable\",\t MASK_RELOCATABLE | MASK_MINIMAL_TOC | MASK_NO_FP_IN_TOC, \\\n+    N_(\"Produce code relocatable at runtime.\") },\t\t\t\\\n+  { \"no-relocatable\",\t-MASK_RELOCATABLE,\t\t\t\t\\\n+    N_(\"Don't produce code relocatable at runtime.\") },\t\t\t\\\n+  { \"relocatable-lib\",\t MASK_RELOCATABLE | MASK_MINIMAL_TOC | MASK_NO_FP_IN_TOC, \\\n+    N_(\"Produce code relocatable at runtime.\") },\t\t\t\\\n+  { \"no-relocatable-lib\", -MASK_RELOCATABLE,\t\t\t\t\\\n+    N_(\"Don't produce code relocatable at runtime.\") },\t\t\t\\\n+  { \"little-endian\",\t MASK_LITTLE_ENDIAN,\t\t\t\t\\\n+    N_(\"Produce little endian code.\") },\t\t\t\t\\\n+  { \"little\",\t\t MASK_LITTLE_ENDIAN,\t\t\t\t\\\n+    N_(\"Produce little endian code.\") },\t\t\t\t\\\n+  { \"big-endian\",\t-MASK_LITTLE_ENDIAN,\t\t\t\t\\\n+    N_(\"Produce big endian code.\") },\t\t\t\t\t\\\n+  { \"big\",\t\t-MASK_LITTLE_ENDIAN,\t\t\t\t\\\n+    N_(\"Produce big endian code.\") },\t\t\t\t\t\\\n+  { \"no-toc\",\t\t 0, N_(\"no description yet\") },\t\t\t\\\n+  { \"toc\",\t\t MASK_MINIMAL_TOC, N_(\"no description yet\") },\t\\\n+  { \"full-toc\",\t\t MASK_MINIMAL_TOC, N_(\"no description yet\") },\t\\\n+  { \"prototype\",\t MASK_PROTOTYPE, N_(\"no description yet\") },\t\\\n+  { \"no-prototype\",\t-MASK_PROTOTYPE, N_(\"no description yet\") },\t\\\n+  { \"no-traceback\",\t 0, N_(\"no description yet\") },\t\t\t\\\n+  { \"eabi\",\t\t MASK_EABI, N_(\"Use EABI.\") },\t\t\t\\\n+  { \"no-eabi\",\t\t-MASK_EABI, N_(\"Don't use EABI.\") },\t\t\\\n+  { \"regnames\",\t\t  MASK_REGNAMES,\t\t\t\t\\\n+    N_(\"Use alternate register names.\") },\t\t\t\t\\\n+  { \"no-regnames\",\t -MASK_REGNAMES,\t\t\t\t\\\n+    N_(\"Don't use alternate register names.\") },\t\t\t\\\n+  { \"sdata\",\t\t 0, N_(\"no description yet\") },\t\t\t\\\n+  { \"no-sdata\",\t\t 0, N_(\"no description yet\") },\t\t\t\\\n+  { \"sim\",\t\t 0,\t\t\t\t\t\t\\\n+    N_(\"Link with libsim.a, libc.a and sim-crt0.o.\") },\t\t\t\\\n+  { \"ads\",\t\t 0,\t\t\t\t\t\t\\\n+    N_(\"Link with libads.a, libc.a and crt0.o.\") },\t\t\t\\\n+  { \"yellowknife\",\t 0,\t\t\t\t\t\t\\\n+    N_(\"Link with libyk.a, libc.a and crt0.o.\") },\t\t\t\\\n+  { \"mvme\",\t\t 0,\t\t\t\t\t\t\\\n+    N_(\"Link with libmvme.a, libc.a and crt0.o.\") },\t\t\t\\\n+  { \"emb\",\t\t 0,\t\t\t\t\t\t\\\n+    N_(\"Set the PPC_EMB bit in the ELF flags header\") },\t\t\\\n+  { \"vxworks\",\t\t 0, N_(\"no description yet\") },\t\t\t\\\n+  { \"solaris-cclib\",\t 0, N_(\"no description yet\") },\t\t\t\\\n+  { \"shlib\",\t\t 0, N_(\"no description yet\") },\t\t\t\\\n+  EXTRA_SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n+  { \"newlib\",\t\t 0, N_(\"no description yet\") },\n \n /* This is meant to be redefined in the host dependent files.  */\n #define EXTRA_SUBTARGET_SWITCHES"}, {"sha": "5826784ac1cdc3c7f1240240b93d45cf634bdf59", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for SPARC running Linux-based GNU systems with ELF.\n-   Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Eddie C. Dost (ecd@skynet.be)\n \n This file is part of GNU CC.\n@@ -89,8 +89,8 @@ Boston, MA 02111-1307, USA.  */\n \n #undef SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES \\\n-{\"long-double-64\", -MASK_LONG_DOUBLE_128, \"Use 64 bit long doubles\" }, \\\n-{\"long-double-128\", MASK_LONG_DOUBLE_128, \"Use 128 bit long doubles\" },\n+{\"long-double-64\", -MASK_LONG_DOUBLE_128, N_(\"Use 64 bit long doubles\") }, \\\n+{\"long-double-128\", MASK_LONG_DOUBLE_128, N_(\"Use 128 bit long doubles\") },\n \n #undef SIZE_TYPE\n #define SIZE_TYPE \"unsigned int\""}, {"sha": "b253d2273f4ed8227081f96074602334ce2d03de", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for 64-bit SPARC running Linux-based GNU systems with ELF.\n-   Copyright 1996, 1997, 1998 Free Software Foundation, Inc.\n+   Copyright 1996, 1997, 1998, 2000 Free Software Foundation, Inc.\n    Contributed by David S. Miller (davem@caip.rutgers.edu)\n \n This file is part of GNU CC.\n@@ -144,9 +144,9 @@ Boston, MA 02111-1307, USA.  */\n #define SPARC_DEFAULT_CMODEL CM_MEDLOW\n \n #undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-{\"long-double-64\", -MASK_LONG_DOUBLE_128, \"Use 64 bit long doubles\" }, \\\n-{\"long-double-128\", MASK_LONG_DOUBLE_128, \"Use 128 bit long doubles\" },\n+#define SUBTARGET_SWITCHES\t\t\t\t\t\t    \\\n+{\"long-double-64\", -MASK_LONG_DOUBLE_128, N_(\"Use 64 bit long doubles\") },  \\\n+{\"long-double-128\", MASK_LONG_DOUBLE_128, N_(\"Use 128 bit long doubles\") },\n \n #undef WCHAR_TYPE\n #define WCHAR_TYPE \"int\""}, {"sha": "52fdcb065bbe81a8ec0b80d97231b3ee6c67b2dc", "filename": "gcc/config/sparc/sp64-elf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -81,8 +81,8 @@ crtbegin.o%s \\\n /* V9 chips can handle either endianness.  */\n #undef SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES \\\n-{\"big-endian\", -MASK_LITTLE_ENDIAN, \"Generate code for big endian\" }, \\\n-{\"little-endian\", MASK_LITTLE_ENDIAN, \"Generate code for little endian\" },\n+{\"big-endian\", -MASK_LITTLE_ENDIAN, N_(\"Generate code for big endian\") }, \\\n+{\"little-endian\", MASK_LITTLE_ENDIAN, N_(\"Generate code for little endian\") },\n \n #undef BYTES_BIG_ENDIAN\n #define BYTES_BIG_ENDIAN (! TARGET_LITTLE_ENDIAN)"}, {"sha": "3d4aa8f9a2cae07e7396da77de70a6c61b8827c0", "filename": "gcc/config/sparc/sp86x-aout.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fsparc%2Fsp86x-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fsparc%2Fsp86x-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp86x-aout.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for sparclite 86x w/o FPU.\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -33,11 +33,6 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_APP_REGS + MASK_EPILOGUE)\n \n-#undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-{\"big-endian\", -MASK_LITTLE_ENDIAN},\t\t\\\n-{\"little-endian\", MASK_LITTLE_ENDIAN},\t\t\n-\n #undef ASM_SPEC\n #define ASM_SPEC \"%{v:-v} %{mlittle-endian-data:--little-endian-data} %(asm_cpu)\"\n \n@@ -57,4 +52,4 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_LITTLE_ENDIAN_DATA (target_flags & MASK_LITTLE_ENDIAN)\n #undef  SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES \\\n-    { \"little-endian-data\",              MASK_LITTLE_ENDIAN },     \n+    { \"little-endian-data\",              MASK_LITTLE_ENDIAN,\tN_(\"Use little-endian byte order for data\")},"}, {"sha": "9b08512eadf039137fc67f8f7806fd1c0c5bb454", "filename": "gcc/config/sparc/sp86x-elf.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fsparc%2Fsp86x-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fsparc%2Fsp86x-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp86x-elf.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for sparclite 86x w/o FPU.\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Stan Cox (scox@cygnus.com).\n \n This file is part of GNU CC.\n@@ -40,11 +40,6 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_APP_REGS + MASK_EPILOGUE)\n \n-#undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-{\"big-endian\", -MASK_LITTLE_ENDIAN},\t\t\\\n-{\"little-endian\", MASK_LITTLE_ENDIAN},\t\t\n-\n #undef ASM_SPEC\n #define ASM_SPEC \"%{v:-V} %{mlittle-endian-data:--little-endian-data} %(asm_cpu)\"\n \n@@ -70,4 +65,4 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_LITTLE_ENDIAN_DATA (target_flags & MASK_LITTLE_ENDIAN)\n #undef  SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES \\\n-    { \"little-endian-data\",              MASK_LITTLE_ENDIAN,\t\"Use little-endian byte order\"},\n+    { \"little-endian-data\",              MASK_LITTLE_ENDIAN,\tN_(\"Use little-endian byte order for data\")},"}, {"sha": "a05c599c6d84664a88b56b4ffc2b91efb78dbdb7", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 83, "deletions": 44, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for Sun SPARC.\n    Copyright (C) 1987, 1988, 1989, 1992, 1994, 1995, 1996, 1997, 1998, 1999\n-   Free Software Foundation, Inc.\n+   2000 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com).\n    64 bit SPARC V9 support by Michael Tiemann, Jim Wilson, and Doug Evans,\n    at Cygnus Support.\n@@ -574,46 +574,82 @@ extern int target_flags;\n    An empty string NAME is used to identify the default VALUE.  */\n \n #define TARGET_SWITCHES  \\\n-  { {\"fpu\", MASK_FPU | MASK_FPU_SET,\t\t\t\"Use hardware fp\" },\t\t\\\n-    {\"no-fpu\", -MASK_FPU,\t\t\t\t\"Do not use hardware fp\" },\t\\\n+  { {\"fpu\", MASK_FPU | MASK_FPU_SET,\t\t\t\t\t\\\n+     N_(\"Use hardware fp\") },\t\t\t\t\t\t\\\n+    {\"no-fpu\", -MASK_FPU,\t\t\t\t\t\t\\\n+     N_(\"Do not use hardware fp\") },\t\t\t\t\t\\\n     {\"no-fpu\", MASK_FPU_SET,\t\t\t\tNULL, },\t\\\n-    {\"hard-float\", MASK_FPU | MASK_FPU_SET,\t\t\"Use hardware fp\" },\t\t\\\n-    {\"soft-float\", -MASK_FPU,\t\t\t\t\"Do not use hardware fp\" },\t\\\n-    {\"soft-float\", MASK_FPU_SET,\t\t\tNULL },\t\\\n-    {\"epilogue\", MASK_EPILOGUE,\t\t\t\t\"Use FUNCTION_EPILOGUE\" },\t\\\n-    {\"no-epilogue\", -MASK_EPILOGUE,\t\t\t\"Do not use FUNCTION_EPILOGUE\" }, \t\\\n-    {\"unaligned-doubles\", MASK_UNALIGNED_DOUBLES,\t\"Assume possible double misalignment\" },\\\n-    {\"no-unaligned-doubles\", -MASK_UNALIGNED_DOUBLES,\t\"Assume all doubles are aligned\" }, \\\n-    {\"impure-text\", MASK_IMPURE_TEXT,\t\t\t\"Pass -assert pure-text to linker\" }, \\\n-    {\"no-impure-text\", -MASK_IMPURE_TEXT,\t\t\"Do not pass -assert pure-text to linker\" }, \\\n-    {\"flat\", MASK_FLAT,\t\t\t\t\t\"Use flat register window model\" }, \\\n-    {\"no-flat\", -MASK_FLAT,\t\t\t\t\"Do not use flat register window model\" }, \\\n-    {\"app-regs\", MASK_APP_REGS,\t\t\t\t\"Use ABI reserved registers\" },\t\\\n-    {\"no-app-regs\", -MASK_APP_REGS,\t\t\t\"Do not use ABI reserved registers\" }, \\\n-    {\"hard-quad-float\", MASK_HARD_QUAD,\t\t\t\"Use hardware quad fp instructions\" }, \\\n-    {\"soft-quad-float\", -MASK_HARD_QUAD,\t\t\"Do not use hardware quad fp instructions\" }, \\\n-    {\"v8plus\", MASK_V8PLUS,\t\t\t\t\"Compile for v8plus ABI\" },\t\\\n-    {\"no-v8plus\", -MASK_V8PLUS,\t\t\t\t\"Do not compile for v8plus ABI\" }, \\\n-    {\"vis\", MASK_VIS,\t\t\t\t\t\"Utilize Visual Instruction Set\" }, \\\n-    {\"no-vis\", -MASK_VIS,\t\t\t\t\"Do not utilize Visual Instruction Set\" }, \\\n+    {\"hard-float\", MASK_FPU | MASK_FPU_SET,\t\t\t\t\\\n+     N_(\"Use hardware fp\") },\t\t\t\t\t\t\\\n+    {\"soft-float\", -MASK_FPU,\t\t\t\t\t\t\\\n+     N_(\"Do not use hardware fp\") },\t\t\t\t\t\\\n+    {\"soft-float\", MASK_FPU_SET,\t\t\tNULL },\t\t\\\n+    {\"epilogue\", MASK_EPILOGUE,\t\t\t\t\t\t\\\n+     N_(\"Use FUNCTION_EPILOGUE\") },\t\t\t\t\t\\\n+    {\"no-epilogue\", -MASK_EPILOGUE,\t\t\t\t\t\\\n+     N_(\"Do not use FUNCTION_EPILOGUE\") }, \t\t\t\t\\\n+    {\"unaligned-doubles\", MASK_UNALIGNED_DOUBLES,\t\t\t\\\n+     N_(\"Assume possible double misalignment\") },\t\t\t\\\n+    {\"no-unaligned-doubles\", -MASK_UNALIGNED_DOUBLES,\t\t\t\\\n+     N_(\"Assume all doubles are aligned\") },\t\t\t\t\\\n+    {\"impure-text\", MASK_IMPURE_TEXT,\t\t\t\t\t\\\n+     N_(\"Pass -assert pure-text to linker\") }, \t\t\t\t\\\n+    {\"no-impure-text\", -MASK_IMPURE_TEXT,\t\t\t\t\\\n+     N_(\"Do not pass -assert pure-text to linker\") }, \t\t\t\\\n+    {\"flat\", MASK_FLAT,\t\t\t\t\t\t\t\\\n+     N_(\"Use flat register window model\") }, \t\t\t\t\\\n+    {\"no-flat\", -MASK_FLAT,\t\t\t\t\t\t\\\n+     N_(\"Do not use flat register window model\") }, \t\t\t\\\n+    {\"app-regs\", MASK_APP_REGS,\t\t\t\t\t\t\\\n+     N_(\"Use ABI reserved registers\") },\t\t\t\t\\\n+    {\"no-app-regs\", -MASK_APP_REGS,\t\t\t\t\t\\\n+     N_(\"Do not use ABI reserved registers\") }, \t\t\t\\\n+    {\"hard-quad-float\", MASK_HARD_QUAD,\t\t\t\t\t\\\n+     N_(\"Use hardware quad fp instructions\") }, \t\t\t\\\n+    {\"soft-quad-float\", -MASK_HARD_QUAD,\t\t\t\t\\\n+     N_(\"Do not use hardware quad fp instructions\") }, \t\t\t\\\n+    {\"v8plus\", MASK_V8PLUS,\t\t\t\t\t\t\\\n+     N_(\"Compile for v8plus ABI\") },\t\t\t\t\t\\\n+    {\"no-v8plus\", -MASK_V8PLUS,\t\t\t\t\t\t\\\n+     N_(\"Do not compile for v8plus ABI\") }, \t\t\t\t\\\n+    {\"vis\", MASK_VIS,\t\t\t\t\t\t\t\\\n+     N_(\"Utilize Visual Instruction Set\") }, \t\t\t\t\\\n+    {\"no-vis\", -MASK_VIS,\t\t\t\t\t\t\\\n+     N_(\"Do not utilize Visual Instruction Set\") }, \t\t\t\\\n     /* ??? These are deprecated, coerced to -mcpu=.  Delete in 2.9.  */ \\\n-    {\"cypress\", 0,\t\t\t\t\t\"Optimize for Cypress processors\" }, \\\n-    {\"sparclite\", 0,\t\t\t\t\t\"Optimize for SparcLite processors\" }, \\\n-    {\"f930\", 0,\t\t\t\t\t\t\"Optimize for F930 processors\" }, \\\n-    {\"f934\", 0,\t\t\t\t\t\t\"Optimize for F934 processors\" }, \\\n-    {\"v8\", 0,\t\t\t\t\t\t\"Use V8 Sparc ISA\" }, \\\n-    {\"supersparc\", 0,\t\t\t\t\t\"Optimize for SuperSparc processors\" }, \\\n-    /* End of deprecated options.  */\t\\\n-    {\"ptr64\", MASK_PTR64,\t\t\t\t\"Pointers are 64-bit\" }, \\\n-    {\"ptr32\", -MASK_PTR64,\t\t\t\t\"Pointers are 32-bit\" }, \\\n-    {\"32\", -MASK_64BIT,\t\t\t\t\t\"Use 32-bit ABI\" }, \\\n-    {\"64\", MASK_64BIT,\t\t\t\t\t\"Use 64-bit ABI\" }, \\\n-    {\"stack-bias\", MASK_STACK_BIAS,\t\t\t\"Use stack bias\" }, \\\n-    {\"no-stack-bias\", -MASK_STACK_BIAS,\t\t\t\"Do not use stack bias\" }, \\\n-    {\"faster-structs\", MASK_FASTER_STRUCTS,\t\t\t\"Use structs on stronger alignment for double-word copies\" }, \\\n-    {\"no-faster-structs\", -MASK_FASTER_STRUCTS,\t\t\"Do not use structs on stronger alignment for double-word copies\" }, \\\n-    {\"relax\", 0,\t\t\t\t\t\"Optimize tail call instructions in assembler and linker\" }, \\\n-    {\"no-relax\", 0,\t\t\t\t\t\"Do not optimize tail call instructions in assembler or linker\" }, \\\n+    {\"cypress\", 0,\t\t\t\t\t\t\t\\\n+     N_(\"Optimize for Cypress processors\") }, \t\t\t\t\\\n+    {\"sparclite\", 0,\t\t\t\t\t\t\t\\\n+     N_(\"Optimize for SparcLite processors\") }, \t\t\t\\\n+    {\"f930\", 0,\t\t\t\t\t\t\t\t\\\n+     N_(\"Optimize for F930 processors\") }, \t\t\t\t\\\n+    {\"f934\", 0,\t\t\t\t\t\t\t\t\\\n+     N_(\"Optimize for F934 processors\") }, \t\t\t\t\\\n+    {\"v8\", 0,\t\t\t\t\t\t\t\t\\\n+     N_(\"Use V8 Sparc ISA\") }, \t\t\t\t\t\t\\\n+    {\"supersparc\", 0,\t\t\t\t\t\t\t\\\n+     N_(\"Optimize for SuperSparc processors\") }, \t\t\t\\\n+    /* End of deprecated options.  */\t\t\t\t\t\\\n+    {\"ptr64\", MASK_PTR64,\t\t\t\t\t\t\\\n+     N_(\"Pointers are 64-bit\") }, \t\t\t\t\t\\\n+    {\"ptr32\", -MASK_PTR64,\t\t\t\t\t\t\\\n+     N_(\"Pointers are 32-bit\") }, \t\t\t\t\t\\\n+    {\"32\", -MASK_64BIT,\t\t\t\t\t\t\t\\\n+     N_(\"Use 32-bit ABI\") }, \t\t\t\t\t\t\\\n+    {\"64\", MASK_64BIT,\t\t\t\t\t\t\t\\\n+     N_(\"Use 64-bit ABI\") }, \t\t\t\t\t\t\\\n+    {\"stack-bias\", MASK_STACK_BIAS,\t\t\t\t\t\\\n+     N_(\"Use stack bias\") }, \t\t\t\t\t\t\\\n+    {\"no-stack-bias\", -MASK_STACK_BIAS,\t\t\t\t\t\\\n+     N_(\"Do not use stack bias\") }, \t\t\t\t\t\\\n+    {\"faster-structs\", MASK_FASTER_STRUCTS,\t\t\t\t\\\n+     N_(\"Use structs on stronger alignment for double-word copies\") }, \t\\\n+    {\"no-faster-structs\", -MASK_FASTER_STRUCTS,\t\t\t\t\\\n+     N_(\"Do not use structs on stronger alignment for double-word copies\") }, \\\n+    {\"relax\", 0,\t\t\t\t\t\t\t\\\n+     N_(\"Optimize tail call instructions in assembler and linker\") },\t\\\n+    {\"no-relax\", 0,\t\t\t\t\t\t\t\\\n+     N_(\"Do not optimize tail call instructions in assembler or linker\") }, \\\n     SUBTARGET_SWITCHES\t\t\t\\\n     { \"\", TARGET_DEFAULT, \"\"}}\n \n@@ -668,11 +704,14 @@ extern enum processor_type sparc_cpu;\n \t#define TARGET_OPTIONS { { \"short-data-\", &m88k_short_data } }  */\n \n #define TARGET_OPTIONS \\\n-{\t\t\t\t\t\t\t\\\n-  { \"cpu=\",  &sparc_select[1].string, \"Use features of and schedule code for given CPU\" }, \\\n-  { \"tune=\", &sparc_select[2].string, \"Schedule code for given CPU\" }, \\\n-  { \"cmodel=\", &sparc_cmodel_string, \"Use given Sparc code model\" }, \\\n-  SUBTARGET_OPTIONS \t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  { \"cpu=\",  &sparc_select[1].string,\t\t\t\t\\\n+    N_(\"Use features of and schedule code for given CPU\") },\t\\\n+  { \"tune=\", &sparc_select[2].string,\t\t\t\t\\\n+    N_(\"Schedule code for given CPU\") },\t\t\t\\\n+  { \"cmodel=\", &sparc_cmodel_string,\t\t\t\t\\\n+    N_(\"Use given Sparc code model\") },\t\t\t\t\\\n+  SUBTARGET_OPTIONS \t\t\t\t\t\t\\\n }\n \n /* This is meant to be redefined in target specific files.  */"}, {"sha": "cd85f01ec9a152feb7b21571fa45c19e30eae615", "filename": "gcc/config/sparc/splet.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fsparc%2Fsplet.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fsparc%2Fsplet.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsplet.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for SPARClet.\n-   Copyright (C) 1996, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 2000 Free Software Foundation, Inc.\n    Contributed by Doug Evans (dje@cygnus.com).\n \n This file is part of GNU CC.\n@@ -25,9 +25,9 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_DEFAULT (MASK_APP_REGS + MASK_EPILOGUE)\n \n #undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-{\"big-endian\", -MASK_LITTLE_ENDIAN, \"Generate code for big endian\" }, \\\n-{\"little-endian\", MASK_LITTLE_ENDIAN, \"Generate code for little endian\" },\n+#define SUBTARGET_SWITCHES\t\t\t\t\t\t      \\\n+{\"big-endian\", -MASK_LITTLE_ENDIAN, N_(\"Generate code for big endian\") },     \\\n+{\"little-endian\", MASK_LITTLE_ENDIAN, N_(\"Generate code for little endian\") },\n \n #undef ASM_SPEC\n #define ASM_SPEC \"%{mlittle-endian:-EL} %(asm_cpu)\""}, {"sha": "88267e7ac9506323ee4d1eaa257377d5fdd28a36", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047142d32ee7988c4715e6784fd0fe228db7caa8/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=047142d32ee7988c4715e6784fd0fe228db7caa8", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler. NEC V850 series\n-   Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n This file is part of GNU CC.\n@@ -115,25 +115,25 @@ extern int target_flags;\n    An empty string NAME is used to identify the default VALUE.  */\n \n #define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n-  {{ \"ghs\",\t\t\t MASK_GHS, \"Support Green Hills ABI\" },\t\\\n+  {{ \"ghs\",\t\t\t MASK_GHS, N_(\"Support Green Hills ABI\") }, \\\n    { \"no-ghs\",\t\t\t-MASK_GHS, \"\" },\t\t\t\\\n    { \"long-calls\",\t\t MASK_LONG_CALLS, \t\t\t\\\n-       \t\t\t\t\"Prohibit PC relative function calls\" },\\\n+       \t\t\t\tN_(\"Prohibit PC relative function calls\") },\\\n    { \"no-long-calls\",\t\t-MASK_LONG_CALLS, \"\" },\t\t\t\\\n    { \"ep\",\t\t\t MASK_EP,\t\t\t\t\\\n-                                \"Reuse r30 on a per function basis\" },  \\\n+                                N_(\"Reuse r30 on a per function basis\") }, \\\n    { \"no-ep\",\t\t\t-MASK_EP, \"\" },\t\t\t\t\\\n    { \"prolog-function\",\t\t MASK_PROLOG_FUNCTION, \t\t\t\\\n-       \t\t\t\t\"Use stubs for function prologues\" },\t\\\n+       \t\t\t\tN_(\"Use stubs for function prologues\") }, \\\n    { \"no-prolog-function\",\t-MASK_PROLOG_FUNCTION, \"\" },\t\t\\\n    { \"space\",\t\t\t MASK_EP | MASK_PROLOG_FUNCTION, \t\\\n-       \t\t\t\t\"Same as: -mep -mprolog-function\" },\t\\\n-   { \"debug\",\t\t\t MASK_DEBUG, \"Enable backend debugging\" }, \\\n+       \t\t\t\tN_(\"Same as: -mep -mprolog-function\") }, \\\n+   { \"debug\",\t\t\t MASK_DEBUG, N_(\"Enable backend debugging\") }, \\\n    { \"v850\",\t\t \t MASK_V850,\t\t\t\t\\\n-                                \"Compile for the v850 processor\" },\t\\\n+                                N_(\"Compile for the v850 processor\") },\t\\\n    { \"v850\",\t\t \t -(MASK_V850 ^ MASK_CPU), \"\" },\t\t\\\n    { \"big-switch\",\t\t MASK_BIG_SWITCH, \t\t\t\\\n-       \t\t\t\t\"Use 4 byte entries in switch tables\" },\\\n+       \t\t\t\tN_(\"Use 4 byte entries in switch tables\") },\\\n    { \"\",\t\t\t MASK_DEFAULT, \"\"}}\n \n /* Information about the various small memory areas.  */\n@@ -177,13 +177,13 @@ extern struct small_memory_info small_memory[(int)SMALL_MEMORY_max];\n #define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   { \"tda=\",\t&small_memory[ (int)SMALL_MEMORY_TDA ].value,\t\t\\\n-      \"Set the max size of data eligible for the TDA area\"  },\t\t\\\n+      N_(\"Set the max size of data eligible for the TDA area\")  },\t\\\n   { \"tda-\",\t&small_memory[ (int)SMALL_MEMORY_TDA ].value, \"\" },\t\\\n   { \"sda=\",\t&small_memory[ (int)SMALL_MEMORY_SDA ].value, \t\t\\\n-      \"Set the max size of data eligible for the SDA area\"  },\t\t\\\n+      N_(\"Set the max size of data eligible for the SDA area\")  },\t\\\n   { \"sda-\",\t&small_memory[ (int)SMALL_MEMORY_SDA ].value, \"\" },\t\\\n   { \"zda=\",\t&small_memory[ (int)SMALL_MEMORY_ZDA ].value, \t\t\\\n-      \"Set the max size of data eligible for the ZDA area\"  },\t\t\\\n+      N_(\"Set the max size of data eligible for the ZDA area\")  },\t\\\n   { \"zda-\",\t&small_memory[ (int)SMALL_MEMORY_ZDA ].value, \"\" },\t\\\n }\n "}]}